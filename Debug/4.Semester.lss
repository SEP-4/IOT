
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005d6  00800200  0000691c  000069b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000691c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000eb3  008007d6  008007d6  00006f86  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006f86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006fe4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000af0  00000000  00000000  00007024  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d922  00000000  00000000  00007b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000036b3  00000000  00000000  00015436  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000069e8  00000000  00000000  00018ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000027a0  00000000  00000000  0001f4d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004293  00000000  00000000  00021c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c593  00000000  00000000  00025f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a40  00000000  00000000  0003249a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c4 c6       	rjmp	.+3464   	; 0xdba <__vector_12>
      32:	00 00       	nop
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 10 25 	jmp	0x4a20	; 0x4a20 <__vector_25>
      68:	0c 94 62 25 	jmp	0x4ac4	; 0x4ac4 <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 a6 25 	jmp	0x4b4c	; 0x4b4c <__vector_36>
      94:	0c 94 f8 25 	jmp	0x4bf0	; 0x4bf0 <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 44 2a 	jmp	0x5488	; 0x5488 <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 3c 26 	jmp	0x4c78	; 0x4c78 <__vector_51>
      d0:	0c 94 8e 26 	jmp	0x4d1c	; 0x4d1c <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 d2 26 	jmp	0x4da4	; 0x4da4 <__vector_54>
      dc:	0c 94 24 27 	jmp	0x4e48	; 0x4e48 <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f4 1a       	sub	r15, r20
      e6:	f4 1a       	sub	r15, r20
      e8:	f4 1a       	sub	r15, r20
      ea:	2b 1b       	sub	r18, r27
      ec:	33 1b       	sub	r19, r19
      ee:	48 1b       	sub	r20, r24
      f0:	f4 1a       	sub	r15, r20
      f2:	f4 1a       	sub	r15, r20
      f4:	2b 1b       	sub	r18, r27
      f6:	33 1b       	sub	r19, r19
      f8:	66 2a       	or	r6, r22
      fa:	d6 2a       	or	r13, r22
      fc:	d6 2a       	or	r13, r22
      fe:	d6 2a       	or	r13, r22
     100:	d6 2a       	or	r13, r22
     102:	d6 2a       	or	r13, r22
     104:	d6 2a       	or	r13, r22
     106:	d6 2a       	or	r13, r22
     108:	66 2a       	or	r6, r22
     10a:	d6 2a       	or	r13, r22
     10c:	d6 2a       	or	r13, r22
     10e:	d6 2a       	or	r13, r22
     110:	d6 2a       	or	r13, r22
     112:	d6 2a       	or	r13, r22
     114:	d6 2a       	or	r13, r22
     116:	d6 2a       	or	r13, r22
     118:	68 2a       	or	r6, r24
     11a:	d6 2a       	or	r13, r22
     11c:	d6 2a       	or	r13, r22
     11e:	d6 2a       	or	r13, r22
     120:	d6 2a       	or	r13, r22
     122:	d6 2a       	or	r13, r22
     124:	d6 2a       	or	r13, r22
     126:	d6 2a       	or	r13, r22
     128:	d6 2a       	or	r13, r22
     12a:	d6 2a       	or	r13, r22
     12c:	d6 2a       	or	r13, r22
     12e:	d6 2a       	or	r13, r22
     130:	d6 2a       	or	r13, r22
     132:	d6 2a       	or	r13, r22
     134:	d6 2a       	or	r13, r22
     136:	d6 2a       	or	r13, r22
     138:	68 2a       	or	r6, r24
     13a:	d6 2a       	or	r13, r22
     13c:	d6 2a       	or	r13, r22
     13e:	d6 2a       	or	r13, r22
     140:	d6 2a       	or	r13, r22
     142:	d6 2a       	or	r13, r22
     144:	d6 2a       	or	r13, r22
     146:	d6 2a       	or	r13, r22
     148:	d6 2a       	or	r13, r22
     14a:	d6 2a       	or	r13, r22
     14c:	d6 2a       	or	r13, r22
     14e:	d6 2a       	or	r13, r22
     150:	d6 2a       	or	r13, r22
     152:	d6 2a       	or	r13, r22
     154:	d6 2a       	or	r13, r22
     156:	d6 2a       	or	r13, r22
     158:	d2 2a       	or	r13, r18
     15a:	d6 2a       	or	r13, r22
     15c:	d6 2a       	or	r13, r22
     15e:	d6 2a       	or	r13, r22
     160:	d6 2a       	or	r13, r22
     162:	d6 2a       	or	r13, r22
     164:	d6 2a       	or	r13, r22
     166:	d6 2a       	or	r13, r22
     168:	9d 2a       	or	r9, r29
     16a:	d6 2a       	or	r13, r22
     16c:	d6 2a       	or	r13, r22
     16e:	d6 2a       	or	r13, r22
     170:	d6 2a       	or	r13, r22
     172:	d6 2a       	or	r13, r22
     174:	d6 2a       	or	r13, r22
     176:	d6 2a       	or	r13, r22
     178:	d6 2a       	or	r13, r22
     17a:	d6 2a       	or	r13, r22
     17c:	d6 2a       	or	r13, r22
     17e:	d6 2a       	or	r13, r22
     180:	d6 2a       	or	r13, r22
     182:	d6 2a       	or	r13, r22
     184:	d6 2a       	or	r13, r22
     186:	d6 2a       	or	r13, r22
     188:	91 2a       	or	r9, r17
     18a:	d6 2a       	or	r13, r22
     18c:	d6 2a       	or	r13, r22
     18e:	d6 2a       	or	r13, r22
     190:	d6 2a       	or	r13, r22
     192:	d6 2a       	or	r13, r22
     194:	d6 2a       	or	r13, r22
     196:	d6 2a       	or	r13, r22
     198:	b5 2a       	or	r11, r21

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <prvCheckTasksWaitingTermination>
     2a0:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	c2 d4       	rcall	.+2436   	; 0xc2e <vPortYield>
     2aa:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 71 18 	call	0x30e2	; 0x30e2 <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 66 1a 	call	0x34cc	; 0x34cc <prvProcessTimerOrBlockTask>
     2c8:	0e 94 bd 1a 	call	0x357a	; 0x357a <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	17 e0       	ldi	r17, 0x07	; 7
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	ec e1       	ldi	r30, 0x1C	; 28
     2e6:	f9 e6       	ldi	r31, 0x69	; 105
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	a6 3d       	cpi	r26, 0xD6	; 214
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	26 e1       	ldi	r18, 0x16	; 22
     2fa:	a6 ed       	ldi	r26, 0xD6	; 214
     2fc:	b7 e0       	ldi	r27, 0x07	; 7
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	a9 38       	cpi	r26, 0x89	; 137
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 48 1c 	call	0x3890	; 0x3890 <main>
     30c:	0c 94 8c 34 	jmp	0x6918	; 0x6918 <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <Application_getEventGroup>:
// Declare a variable to hold the created event group.
EventGroupHandle_t xCreatedEventGroup;

EventGroupHandle_t Application_getEventGroup(){
	return xCreatedEventGroup;
}
     312:	80 91 77 16 	lds	r24, 0x1677	; 0x801677 <xCreatedEventGroup>
     316:	90 91 78 16 	lds	r25, 0x1678	; 0x801678 <xCreatedEventGroup+0x1>
     31a:	08 95       	ret

0000031c <aFunctionToClearBits>:
void aFunctionToClearBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Clear bit 0 and bit 4 in xEventGroup. */
  uxBits = xEventGroupClearBits(
     31c:	41 e1       	ldi	r20, 0x11	; 17
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	b2 c1       	rjmp	.+868    	; 0x68a <xEventGroupClearBits>
     326:	08 95       	ret

00000328 <aFunctionToWaitBits>:
EventGroupHandle_t Application_getEventGroup(){
	return xCreatedEventGroup;
}

void aFunctionToWaitBits( EventGroupHandle_t xEventGroup )
{
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	ec 01       	movw	r28, r24
EventBits_t uxBits;
const TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;

  /* Wait a maximum of 100ms for either bit 0 or bit 4 to be set within
  the event group.  Clear the bits before exiting. */
  uxBits = xEventGroupWaitBits(
     338:	0f 2e       	mov	r0, r31
     33a:	f6 e0       	ldi	r31, 0x06	; 6
     33c:	cf 2e       	mov	r12, r31
     33e:	d1 2c       	mov	r13, r1
     340:	e1 2c       	mov	r14, r1
     342:	f1 2c       	mov	r15, r1
     344:	f0 2d       	mov	r31, r0
     346:	01 e0       	ldi	r16, 0x01	; 1
     348:	20 e0       	ldi	r18, 0x00	; 0
     34a:	41 e1       	ldi	r20, 0x11	; 17
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	fb d0       	rcall	.+502    	; 0x54a <xEventGroupWaitBits>
            BIT_0 | BIT_4, /* The bits within the event group to wait for. */
            pdFALSE,        /* BIT_0 & BIT_4 should not be cleared before returning. */
            pdTRUE,       /* Wait for both bits, either bit will do. */
            xTicksToWait );/* Wait a maximum of 100ms for either bit to be set. */

  if( ( uxBits & ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )
     354:	dc 01       	movw	r26, r24
     356:	cb 01       	movw	r24, r22
     358:	81 71       	andi	r24, 0x11	; 17
     35a:	99 27       	eor	r25, r25
     35c:	aa 27       	eor	r26, r26
     35e:	bb 27       	eor	r27, r27
     360:	41 97       	sbiw	r24, 0x11	; 17
     362:	a1 05       	cpc	r26, r1
     364:	b1 05       	cpc	r27, r1
     366:	a9 f4       	brne	.+42     	; 0x392 <aFunctionToWaitBits+0x6a>
  {
      /* xEventGroupWaitBits() returned because both bits were set. */
	  printf("setting the bits, they are set");
     368:	8f e6       	ldi	r24, 0x6F	; 111
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	9f 93       	push	r25
     36e:	8f 93       	push	r24
     370:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
	  SensorDataPackageHandler_SetHumidity(hih820_getHumidityInUint16());
     374:	0e 94 b2 1b 	call	0x3764	; 0x3764 <hih820_getHumidityInUint16>
     378:	0e 94 6d 1c 	call	0x38da	; 0x38da <SensorDataPackageHandler_SetHumidity>
	  SensorDataPackageHandler_SetTemperature(hih820_getTemperatureInUint16());
     37c:	0e 94 c1 1b 	call	0x3782	; 0x3782 <hih820_getTemperatureInUint16>
     380:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <SensorDataPackageHandler_SetTemperature>
	  SensorDataPackageHandler_SetCO2(CO2_getCO2InUint16());
     384:	5f d0       	rcall	.+190    	; 0x444 <CO2_getCO2InUint16>
     386:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <SensorDataPackageHandler_SetCO2>
	  aFunctionToClearBits( xEventGroup );
     38a:	ce 01       	movw	r24, r28
     38c:	c7 df       	rcall	.-114    	; 0x31c <aFunctionToClearBits>
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
  else
  {
      /* xEventGroupWaitBits() returned because xTicksToWait ticks passed
      without either BIT_0 or BIT_4 becoming set. */
  }
}
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	0f 91       	pop	r16
     398:	ff 90       	pop	r15
     39a:	ef 90       	pop	r14
     39c:	df 90       	pop	r13
     39e:	cf 90       	pop	r12
     3a0:	08 95       	ret

000003a2 <Application_handler_task>:
	,  Application_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void Application_handler_task(void *pvParameters)
{
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	00 d0       	rcall	.+0      	; 0x3a8 <Application_handler_task+0x6>
     3a8:	1f 92       	push	r1
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
	printf("startApplication");
     3ae:	8e e8       	ldi	r24, 0x8E	; 142
     3b0:	92 e0       	ldi	r25, 0x02	; 2
     3b2:	9f 93       	push	r25
     3b4:	8f 93       	push	r24
     3b6:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
	(void)pvParameters;
	xCreatedEventGroup = xEventGroupCreate();
     3ba:	b4 d0       	rcall	.+360    	; 0x524 <xEventGroupCreate>
     3bc:	90 93 78 16 	sts	0x1678, r25	; 0x801678 <xCreatedEventGroup+0x1>
     3c0:	80 93 77 16 	sts	0x1677, r24	; 0x801677 <xCreatedEventGroup>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300UL); // Upload message every 1 minutes (300 ms)
	xLastWakeTime = xTaskGetTickCount();
     3c4:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <xTaskGetTickCount>
     3c8:	69 83       	std	Y+1, r22	; 0x01
     3ca:	7a 83       	std	Y+2, r23	; 0x02
     3cc:	8b 83       	std	Y+3, r24	; 0x03
     3ce:	9c 83       	std	Y+4, r25	; 0x04
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     3d4:	42 e1       	ldi	r20, 0x12	; 18
     3d6:	50 e0       	ldi	r21, 0x00	; 0
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	ce 01       	movw	r24, r28
     3de:	01 96       	adiw	r24, 0x01	; 1
     3e0:	0e 94 9d 11 	call	0x233a	; 0x233a <xTaskDelayUntil>
		// Was the event group created successfully?
		if( xCreatedEventGroup == NULL )
     3e4:	80 91 77 16 	lds	r24, 0x1677	; 0x801677 <xCreatedEventGroup>
     3e8:	90 91 78 16 	lds	r25, 0x1678	; 0x801678 <xCreatedEventGroup+0x1>
     3ec:	00 97       	sbiw	r24, 0x00	; 0
		// The event group was not created because there was insufficient
		// FreeRTOS heap available.
		}
		else
		{
			aFunctionToWaitBits( xCreatedEventGroup);
     3ee:	91 f3       	breq	.-28     	; 0x3d4 <Application_handler_task+0x32>
     3f0:	9b df       	rcall	.-202    	; 0x328 <aFunctionToWaitBits>
     3f2:	f0 cf       	rjmp	.-32     	; 0x3d4 <Application_handler_task+0x32>

000003f4 <Application_handler_initialise>:

static char _out_buf[100];

void Application_handler_task( void *pvParameters );

void Application_handler_initialise(UBaseType_t Application_task_priority){
     3f4:	ef 92       	push	r14
     3f6:	ff 92       	push	r15
     3f8:	0f 93       	push	r16
	xTaskCreate(
     3fa:	e1 2c       	mov	r14, r1
     3fc:	f1 2c       	mov	r15, r1
     3fe:	08 2f       	mov	r16, r24
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	40 ec       	ldi	r20, 0xC0	; 192
     406:	50 e0       	ldi	r21, 0x00	; 0
     408:	6f e9       	ldi	r22, 0x9F	; 159
     40a:	72 e0       	ldi	r23, 0x02	; 2
     40c:	81 ed       	ldi	r24, 0xD1	; 209
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <xTaskCreate>
	,  "ApplicationHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  Application_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     414:	0f 91       	pop	r16
     416:	ff 90       	pop	r15
     418:	ef 90       	pop	r14
     41a:	08 95       	ret

0000041c <CO2Sensor_handler_initialise>:

static char _out_buf[100];

void CO2Sensor_handler_task( void *pvParameters );

void CO2Sensor_handler_initialise(UBaseType_t CO2_task_priority){
     41c:	ef 92       	push	r14
     41e:	ff 92       	push	r15
     420:	0f 93       	push	r16
	
	xTaskCreate(
     422:	e1 2c       	mov	r14, r1
     424:	f1 2c       	mov	r15, r1
     426:	08 2f       	mov	r16, r24
     428:	20 e0       	ldi	r18, 0x00	; 0
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	40 ec       	ldi	r20, 0xC0	; 192
     42e:	50 e0       	ldi	r21, 0x00	; 0
     430:	6f ea       	ldi	r22, 0xAF	; 175
     432:	72 e0       	ldi	r23, 0x02	; 2
     434:	8d e2       	ldi	r24, 0x2D	; 45
     436:	92 e0       	ldi	r25, 0x02	; 2
     438:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <xTaskCreate>
	,  "CO2Hand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  CO2_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     43c:	0f 91       	pop	r16
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	08 95       	ret

00000444 <CO2_getCO2InUint16>:
}


uint16_t CO2_getCO2InUint16(){
	return CO2ppm;
}
     444:	80 91 7b 16 	lds	r24, 0x167B	; 0x80167b <CO2ppm>
     448:	90 91 7c 16 	lds	r25, 0x167C	; 0x80167c <CO2ppm+0x1>
     44c:	08 95       	ret

0000044e <CO2_aFunctionToSetBits>:
void CO2_aFunctionToSetBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Set bit 0  in xEventGroup. */
  uxBits = xEventGroupSetBits(
     44e:	41 e0       	ldi	r20, 0x01	; 1
     450:	50 e0       	ldi	r21, 0x00	; 0
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	36 c1       	rjmp	.+620    	; 0x6c4 <xEventGroupSetBits>
     458:	08 95       	ret

0000045a <CO2Sensor_handler_task>:
	,  CO2_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void CO2Sensor_handler_task(void *pvParameters)
{
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	00 d0       	rcall	.+0      	; 0x460 <CO2Sensor_handler_task+0x6>
     460:	1f 92       	push	r1
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
	printf("startCO2");
     466:	87 eb       	ldi	r24, 0xB7	; 183
     468:	92 e0       	ldi	r25, 0x02	; 2
     46a:	9f 93       	push	r25
     46c:	8f 93       	push	r24
     46e:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
	(void)pvParameters;
	mh_z19_injectCallBack(NULL);
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 89 23 	call	0x4712	; 0x4712 <mh_z19_injectCallBack>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     47a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <xTaskGetTickCount>
     47e:	69 83       	std	Y+1, r22	; 0x01
     480:	7a 83       	std	Y+2, r23	; 0x02
     482:	8b 83       	std	Y+3, r24	; 0x03
     484:	9c 83       	std	Y+4, r25	; 0x04
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     48a:	48 ea       	ldi	r20, 0xA8	; 168
     48c:	58 e4       	ldi	r21, 0x48	; 72
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	ce 01       	movw	r24, r28
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	0e 94 9d 11 	call	0x233a	; 0x233a <xTaskDelayUntil>
		rc = mh_z19_takeMeassuring();
     49a:	0e 94 8e 23 	call	0x471c	; 0x471c <mh_z19_takeMeassuring>
     49e:	80 93 79 16 	sts	0x1679, r24	; 0x801679 <rc>
		if (rc == MHZ19_OK)
     4a2:	81 11       	cpse	r24, r1
     4a4:	f2 cf       	rjmp	.-28     	; 0x48a <CO2Sensor_handler_task+0x30>
		{
			vTaskDelay(50);
     4a6:	62 e3       	ldi	r22, 0x32	; 50
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0e 94 02 12 	call	0x2404	; 0x2404 <vTaskDelay>
			if(getCO2return == MHZ19_OK){
     4b2:	80 91 7a 16 	lds	r24, 0x167A	; 0x80167a <getCO2return>
     4b6:	81 11       	cpse	r24, r1
     4b8:	09 c0       	rjmp	.+18     	; 0x4cc <CO2Sensor_handler_task+0x72>
				getCO2return = mh_z19_getCo2Ppm(&CO2ppm);
     4ba:	8b e7       	ldi	r24, 0x7B	; 123
     4bc:	96 e1       	ldi	r25, 0x16	; 22
     4be:	0e 94 bd 23 	call	0x477a	; 0x477a <mh_z19_getCo2Ppm>
     4c2:	80 93 7a 16 	sts	0x167A, r24	; 0x80167a <getCO2return>
				CO2_aFunctionToSetBits(Application_getEventGroup());
     4c6:	25 df       	rcall	.-438    	; 0x312 <Application_getEventGroup>
     4c8:	c2 df       	rcall	.-124    	; 0x44e <CO2_aFunctionToSetBits>
     4ca:	df cf       	rjmp	.-66     	; 0x48a <CO2Sensor_handler_task+0x30>
			}
			else if(getCO2return == MHZ19_NO_MEASSURING_AVAILABLE){
     4cc:	81 30       	cpi	r24, 0x01	; 1
     4ce:	e9 f6       	brne	.-70     	; 0x48a <CO2Sensor_handler_task+0x30>
				printf("Didn't get the measurements");
     4d0:	80 ec       	ldi	r24, 0xC0	; 192
     4d2:	92 e0       	ldi	r25, 0x02	; 2
     4d4:	9f 93       	push	r25
     4d6:	8f 93       	push	r24
     4d8:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	d4 cf       	rjmp	.-88     	; 0x48a <CO2Sensor_handler_task+0x30>

000004e2 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     4e2:	0f 93       	push	r16
     4e4:	01 11       	cpse	r16, r1
     4e6:	0c c0       	rjmp	.+24     	; 0x500 <prvTestWaitCondition+0x1e>
     4e8:	dc 01       	movw	r26, r24
     4ea:	cb 01       	movw	r24, r22
     4ec:	82 23       	and	r24, r18
     4ee:	93 23       	and	r25, r19
     4f0:	a4 23       	and	r26, r20
     4f2:	b5 23       	and	r27, r21
     4f4:	89 2b       	or	r24, r25
     4f6:	8a 2b       	or	r24, r26
     4f8:	8b 2b       	or	r24, r27
     4fa:	79 f4       	brne	.+30     	; 0x51a <prvTestWaitCondition+0x38>
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	10 c0       	rjmp	.+32     	; 0x520 <prvTestWaitCondition+0x3e>
     500:	dc 01       	movw	r26, r24
     502:	cb 01       	movw	r24, r22
     504:	82 23       	and	r24, r18
     506:	93 23       	and	r25, r19
     508:	a4 23       	and	r26, r20
     50a:	b5 23       	and	r27, r21
     50c:	28 17       	cp	r18, r24
     50e:	39 07       	cpc	r19, r25
     510:	4a 07       	cpc	r20, r26
     512:	5b 07       	cpc	r21, r27
     514:	21 f0       	breq	.+8      	; 0x51e <prvTestWaitCondition+0x3c>
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	03 c0       	rjmp	.+6      	; 0x520 <prvTestWaitCondition+0x3e>
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	01 c0       	rjmp	.+2      	; 0x520 <prvTestWaitCondition+0x3e>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	0f 91       	pop	r16
     522:	08 95       	ret

00000524 <xEventGroupCreate>:
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	8f e0       	ldi	r24, 0x0F	; 15
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	cc d1       	rcall	.+920    	; 0x8c6 <pvPortMalloc>
     52e:	ec 01       	movw	r28, r24
     530:	00 97       	sbiw	r24, 0x00	; 0
     532:	39 f0       	breq	.+14     	; 0x542 <xEventGroupCreate+0x1e>
     534:	fc 01       	movw	r30, r24
     536:	11 92       	st	Z+, r1
     538:	11 92       	st	Z+, r1
     53a:	11 92       	st	Z+, r1
     53c:	11 92       	st	Z+, r1
     53e:	cf 01       	movw	r24, r30
     540:	a8 d2       	rcall	.+1360   	; 0xa92 <vListInitialise>
     542:	ce 01       	movw	r24, r28
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	08 95       	ret

0000054a <xEventGroupWaitBits>:
     54a:	2f 92       	push	r2
     54c:	3f 92       	push	r3
     54e:	4f 92       	push	r4
     550:	5f 92       	push	r5
     552:	6f 92       	push	r6
     554:	7f 92       	push	r7
     556:	8f 92       	push	r8
     558:	9f 92       	push	r9
     55a:	af 92       	push	r10
     55c:	bf 92       	push	r11
     55e:	cf 92       	push	r12
     560:	df 92       	push	r13
     562:	ef 92       	push	r14
     564:	ff 92       	push	r15
     566:	0f 93       	push	r16
     568:	1f 93       	push	r17
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	ec 01       	movw	r28, r24
     570:	4a 01       	movw	r8, r20
     572:	5b 01       	movw	r10, r22
     574:	62 2e       	mov	r6, r18
     576:	70 2e       	mov	r7, r16
     578:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <vTaskSuspendAll>
     57c:	28 80       	ld	r2, Y
     57e:	39 80       	ldd	r3, Y+1	; 0x01
     580:	4a 80       	ldd	r4, Y+2	; 0x02
     582:	5b 80       	ldd	r5, Y+3	; 0x03
     584:	a5 01       	movw	r20, r10
     586:	94 01       	movw	r18, r8
     588:	c2 01       	movw	r24, r4
     58a:	b1 01       	movw	r22, r2
     58c:	aa df       	rcall	.-172    	; 0x4e2 <prvTestWaitCondition>
     58e:	88 23       	and	r24, r24
     590:	a1 f0       	breq	.+40     	; 0x5ba <xEventGroupWaitBits+0x70>
     592:	66 20       	and	r6, r6
     594:	89 f1       	breq	.+98     	; 0x5f8 <xEventGroupWaitBits+0xae>
     596:	d5 01       	movw	r26, r10
     598:	c4 01       	movw	r24, r8
     59a:	80 95       	com	r24
     59c:	90 95       	com	r25
     59e:	a0 95       	com	r26
     5a0:	b0 95       	com	r27
     5a2:	82 21       	and	r24, r2
     5a4:	93 21       	and	r25, r3
     5a6:	a4 21       	and	r26, r4
     5a8:	b5 21       	and	r27, r5
     5aa:	88 83       	st	Y, r24
     5ac:	99 83       	std	Y+1, r25	; 0x01
     5ae:	aa 83       	std	Y+2, r26	; 0x02
     5b0:	bb 83       	std	Y+3, r27	; 0x03
     5b2:	c1 2c       	mov	r12, r1
     5b4:	d1 2c       	mov	r13, r1
     5b6:	76 01       	movw	r14, r12
     5b8:	22 c0       	rjmp	.+68     	; 0x5fe <xEventGroupWaitBits+0xb4>
     5ba:	c1 14       	cp	r12, r1
     5bc:	d1 04       	cpc	r13, r1
     5be:	e1 04       	cpc	r14, r1
     5c0:	f1 04       	cpc	r15, r1
     5c2:	e9 f0       	breq	.+58     	; 0x5fe <xEventGroupWaitBits+0xb4>
     5c4:	61 10       	cpse	r6, r1
     5c6:	04 c0       	rjmp	.+8      	; 0x5d0 <xEventGroupWaitBits+0x86>
     5c8:	40 e0       	ldi	r20, 0x00	; 0
     5ca:	50 e0       	ldi	r21, 0x00	; 0
     5cc:	ba 01       	movw	r22, r20
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <xEventGroupWaitBits+0x8e>
     5d0:	40 e0       	ldi	r20, 0x00	; 0
     5d2:	50 e0       	ldi	r21, 0x00	; 0
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	71 e0       	ldi	r23, 0x01	; 1
     5d8:	71 10       	cpse	r7, r1
     5da:	74 60       	ori	r23, 0x04	; 4
     5dc:	48 29       	or	r20, r8
     5de:	59 29       	or	r21, r9
     5e0:	6a 29       	or	r22, r10
     5e2:	7b 29       	or	r23, r11
     5e4:	97 01       	movw	r18, r14
     5e6:	86 01       	movw	r16, r12
     5e8:	ce 01       	movw	r24, r28
     5ea:	04 96       	adiw	r24, 0x04	; 4
     5ec:	0e 94 99 12 	call	0x2532	; 0x2532 <vTaskPlaceOnUnorderedEventList>
     5f0:	21 2c       	mov	r2, r1
     5f2:	31 2c       	mov	r3, r1
     5f4:	21 01       	movw	r4, r2
     5f6:	03 c0       	rjmp	.+6      	; 0x5fe <xEventGroupWaitBits+0xb4>
     5f8:	c1 2c       	mov	r12, r1
     5fa:	d1 2c       	mov	r13, r1
     5fc:	76 01       	movw	r14, r12
     5fe:	0e 94 c1 10 	call	0x2182	; 0x2182 <xTaskResumeAll>
     602:	cd 28       	or	r12, r13
     604:	ce 28       	or	r12, r14
     606:	cf 28       	or	r12, r15
     608:	59 f1       	breq	.+86     	; 0x660 <xEventGroupWaitBits+0x116>
     60a:	81 11       	cpse	r24, r1
     60c:	01 c0       	rjmp	.+2      	; 0x610 <xEventGroupWaitBits+0xc6>
     60e:	0f d3       	rcall	.+1566   	; 0xc2e <vPortYield>
     610:	0e 94 6d 15 	call	0x2ada	; 0x2ada <uxTaskResetEventItemValue>
     614:	6b 01       	movw	r12, r22
     616:	7c 01       	movw	r14, r24
     618:	91 fd       	sbrc	r25, 1
     61a:	1f c0       	rjmp	.+62     	; 0x65a <xEventGroupWaitBits+0x110>
     61c:	0f b6       	in	r0, 0x3f	; 63
     61e:	f8 94       	cli
     620:	0f 92       	push	r0
     622:	c8 80       	ld	r12, Y
     624:	d9 80       	ldd	r13, Y+1	; 0x01
     626:	ea 80       	ldd	r14, Y+2	; 0x02
     628:	fb 80       	ldd	r15, Y+3	; 0x03
     62a:	07 2d       	mov	r16, r7
     62c:	a5 01       	movw	r20, r10
     62e:	94 01       	movw	r18, r8
     630:	c7 01       	movw	r24, r14
     632:	b6 01       	movw	r22, r12
     634:	56 df       	rcall	.-340    	; 0x4e2 <prvTestWaitCondition>
     636:	88 23       	and	r24, r24
     638:	71 f0       	breq	.+28     	; 0x656 <xEventGroupWaitBits+0x10c>
     63a:	66 20       	and	r6, r6
     63c:	61 f0       	breq	.+24     	; 0x656 <xEventGroupWaitBits+0x10c>
     63e:	80 94       	com	r8
     640:	90 94       	com	r9
     642:	a0 94       	com	r10
     644:	b0 94       	com	r11
     646:	8c 20       	and	r8, r12
     648:	9d 20       	and	r9, r13
     64a:	ae 20       	and	r10, r14
     64c:	bf 20       	and	r11, r15
     64e:	88 82       	st	Y, r8
     650:	99 82       	std	Y+1, r9	; 0x01
     652:	aa 82       	std	Y+2, r10	; 0x02
     654:	bb 82       	std	Y+3, r11	; 0x03
     656:	0f 90       	pop	r0
     658:	0f be       	out	0x3f, r0	; 63
     65a:	16 01       	movw	r2, r12
     65c:	27 01       	movw	r4, r14
     65e:	55 24       	eor	r5, r5
     660:	c2 01       	movw	r24, r4
     662:	b1 01       	movw	r22, r2
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	df 90       	pop	r13
     672:	cf 90       	pop	r12
     674:	bf 90       	pop	r11
     676:	af 90       	pop	r10
     678:	9f 90       	pop	r9
     67a:	8f 90       	pop	r8
     67c:	7f 90       	pop	r7
     67e:	6f 90       	pop	r6
     680:	5f 90       	pop	r5
     682:	4f 90       	pop	r4
     684:	3f 90       	pop	r3
     686:	2f 90       	pop	r2
     688:	08 95       	ret

0000068a <xEventGroupClearBits>:
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	f8 94       	cli
     692:	0f 92       	push	r0
     694:	fc 01       	movw	r30, r24
     696:	00 81       	ld	r16, Z
     698:	11 81       	ldd	r17, Z+1	; 0x01
     69a:	22 81       	ldd	r18, Z+2	; 0x02
     69c:	33 81       	ldd	r19, Z+3	; 0x03
     69e:	40 95       	com	r20
     6a0:	50 95       	com	r21
     6a2:	60 95       	com	r22
     6a4:	70 95       	com	r23
     6a6:	40 23       	and	r20, r16
     6a8:	51 23       	and	r21, r17
     6aa:	62 23       	and	r22, r18
     6ac:	73 23       	and	r23, r19
     6ae:	40 83       	st	Z, r20
     6b0:	51 83       	std	Z+1, r21	; 0x01
     6b2:	62 83       	std	Z+2, r22	; 0x02
     6b4:	73 83       	std	Z+3, r23	; 0x03
     6b6:	0f 90       	pop	r0
     6b8:	0f be       	out	0x3f, r0	; 63
     6ba:	c9 01       	movw	r24, r18
     6bc:	b8 01       	movw	r22, r16
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	08 95       	ret

000006c4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     6c4:	4f 92       	push	r4
     6c6:	5f 92       	push	r5
     6c8:	6f 92       	push	r6
     6ca:	7f 92       	push	r7
     6cc:	af 92       	push	r10
     6ce:	bf 92       	push	r11
     6d0:	cf 92       	push	r12
     6d2:	df 92       	push	r13
     6d4:	ef 92       	push	r14
     6d6:	ff 92       	push	r15
     6d8:	0f 93       	push	r16
     6da:	1f 93       	push	r17
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	ec 01       	movw	r28, r24
     6e2:	6a 01       	movw	r12, r20
     6e4:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6e6:	8c 01       	movw	r16, r24
     6e8:	09 5f       	subi	r16, 0xF9	; 249
     6ea:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     6ec:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     6f0:	eb 85       	ldd	r30, Y+11	; 0x0b
     6f2:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     6f4:	88 81       	ld	r24, Y
     6f6:	99 81       	ldd	r25, Y+1	; 0x01
     6f8:	aa 81       	ldd	r26, Y+2	; 0x02
     6fa:	bb 81       	ldd	r27, Y+3	; 0x03
     6fc:	c8 2a       	or	r12, r24
     6fe:	d9 2a       	or	r13, r25
     700:	ea 2a       	or	r14, r26
     702:	fb 2a       	or	r15, r27
     704:	c8 82       	st	Y, r12
     706:	d9 82       	std	Y+1, r13	; 0x01
     708:	ea 82       	std	Y+2, r14	; 0x02
     70a:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     70c:	c1 2c       	mov	r12, r1
     70e:	d1 2c       	mov	r13, r1
     710:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     712:	3d c0       	rjmp	.+122    	; 0x78e <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     714:	a4 80       	ldd	r10, Z+4	; 0x04
     716:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     718:	80 81       	ld	r24, Z
     71a:	91 81       	ldd	r25, Z+1	; 0x01
     71c:	a2 81       	ldd	r26, Z+2	; 0x02
     71e:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     720:	ac 01       	movw	r20, r24
     722:	bd 01       	movw	r22, r26
     724:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     726:	b2 fd       	sbrc	r27, 2
     728:	0e c0       	rjmp	.+28     	; 0x746 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     72a:	48 80       	ld	r4, Y
     72c:	59 80       	ldd	r5, Y+1	; 0x01
     72e:	6a 80       	ldd	r6, Y+2	; 0x02
     730:	7b 80       	ldd	r7, Y+3	; 0x03
     732:	44 22       	and	r4, r20
     734:	55 22       	and	r5, r21
     736:	66 22       	and	r6, r22
     738:	77 22       	and	r7, r23
     73a:	45 28       	or	r4, r5
     73c:	46 28       	or	r4, r6
     73e:	47 28       	or	r4, r7
     740:	89 f4       	brne	.+34     	; 0x764 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	12 c0       	rjmp	.+36     	; 0x76a <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     746:	48 80       	ld	r4, Y
     748:	59 80       	ldd	r5, Y+1	; 0x01
     74a:	6a 80       	ldd	r6, Y+2	; 0x02
     74c:	7b 80       	ldd	r7, Y+3	; 0x03
     74e:	44 22       	and	r4, r20
     750:	55 22       	and	r5, r21
     752:	66 22       	and	r6, r22
     754:	77 22       	and	r7, r23
     756:	44 15       	cp	r20, r4
     758:	55 05       	cpc	r21, r5
     75a:	66 05       	cpc	r22, r6
     75c:	77 05       	cpc	r23, r7
     75e:	21 f0       	breq	.+8      	; 0x768 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	03 c0       	rjmp	.+6      	; 0x76a <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     764:	21 e0       	ldi	r18, 0x01	; 1
     766:	01 c0       	rjmp	.+2      	; 0x76a <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     768:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     76a:	22 23       	and	r18, r18
     76c:	71 f0       	breq	.+28     	; 0x78a <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     76e:	b0 ff       	sbrs	r27, 0
     770:	04 c0       	rjmp	.+8      	; 0x77a <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     772:	c4 2a       	or	r12, r20
     774:	d5 2a       	or	r13, r21
     776:	e6 2a       	or	r14, r22
     778:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     77a:	48 81       	ld	r20, Y
     77c:	59 81       	ldd	r21, Y+1	; 0x01
     77e:	6a 81       	ldd	r22, Y+2	; 0x02
     780:	7b 81       	ldd	r23, Y+3	; 0x03
     782:	72 60       	ori	r23, 0x02	; 2
     784:	cf 01       	movw	r24, r30
     786:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     78a:	ea 2d       	mov	r30, r10
     78c:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     78e:	e0 17       	cp	r30, r16
     790:	f1 07       	cpc	r31, r17
     792:	09 f0       	breq	.+2      	; 0x796 <xEventGroupSetBits+0xd2>
     794:	bf cf       	rjmp	.-130    	; 0x714 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     796:	c0 94       	com	r12
     798:	d0 94       	com	r13
     79a:	e0 94       	com	r14
     79c:	f0 94       	com	r15
     79e:	88 81       	ld	r24, Y
     7a0:	99 81       	ldd	r25, Y+1	; 0x01
     7a2:	aa 81       	ldd	r26, Y+2	; 0x02
     7a4:	bb 81       	ldd	r27, Y+3	; 0x03
     7a6:	c8 22       	and	r12, r24
     7a8:	d9 22       	and	r13, r25
     7aa:	ea 22       	and	r14, r26
     7ac:	fb 22       	and	r15, r27
     7ae:	c8 82       	st	Y, r12
     7b0:	d9 82       	std	Y+1, r13	; 0x01
     7b2:	ea 82       	std	Y+2, r14	; 0x02
     7b4:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     7b6:	0e 94 c1 10 	call	0x2182	; 0x2182 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     7ba:	68 81       	ld	r22, Y
     7bc:	79 81       	ldd	r23, Y+1	; 0x01
     7be:	8a 81       	ldd	r24, Y+2	; 0x02
     7c0:	9b 81       	ldd	r25, Y+3	; 0x03
}
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	df 90       	pop	r13
     7d0:	cf 90       	pop	r12
     7d2:	bf 90       	pop	r11
     7d4:	af 90       	pop	r10
     7d6:	7f 90       	pop	r7
     7d8:	6f 90       	pop	r6
     7da:	5f 90       	pop	r5
     7dc:	4f 90       	pop	r4
     7de:	08 95       	ret

000007e0 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     7e0:	e2 ee       	ldi	r30, 0xE2	; 226
     7e2:	f7 e0       	ldi	r31, 0x07	; 7
     7e4:	a6 ee       	ldi	r26, 0xE6	; 230
     7e6:	b7 e0       	ldi	r27, 0x07	; 7
     7e8:	b1 83       	std	Z+1, r27	; 0x01
     7ea:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     7ec:	13 82       	std	Z+3, r1	; 0x03
     7ee:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     7f0:	ea e9       	ldi	r30, 0x9A	; 154
     7f2:	f3 e1       	ldi	r31, 0x13	; 19
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     7f4:	f0 93 e1 07 	sts	0x07E1, r31	; 0x8007e1 <pxEnd+0x1>
     7f8:	e0 93 e0 07 	sts	0x07E0, r30	; 0x8007e0 <pxEnd>
    pxEnd->xBlockSize = 0;
     7fc:	13 82       	std	Z+3, r1	; 0x03
     7fe:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     800:	11 82       	std	Z+1, r1	; 0x01
     802:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     804:	84 eb       	ldi	r24, 0xB4	; 180
     806:	9b e0       	ldi	r25, 0x0B	; 11
     808:	13 96       	adiw	r26, 0x03	; 3
     80a:	9c 93       	st	X, r25
     80c:	8e 93       	st	-X, r24
     80e:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     810:	ed 93       	st	X+, r30
     812:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     814:	90 93 dd 07 	sts	0x07DD, r25	; 0x8007dd <xMinimumEverFreeBytesRemaining+0x1>
     818:	80 93 dc 07 	sts	0x07DC, r24	; 0x8007dc <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     81c:	90 93 df 07 	sts	0x07DF, r25	; 0x8007df <xFreeBytesRemaining+0x1>
     820:	80 93 de 07 	sts	0x07DE, r24	; 0x8007de <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e8       	ldi	r25, 0x80	; 128
     828:	90 93 d7 07 	sts	0x07D7, r25	; 0x8007d7 <__data_end+0x1>
     82c:	80 93 d6 07 	sts	0x07D6, r24	; 0x8007d6 <__data_end>
     830:	08 95       	ret

00000832 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     838:	a2 ee       	ldi	r26, 0xE2	; 226
     83a:	b7 e0       	ldi	r27, 0x07	; 7
     83c:	01 c0       	rjmp	.+2      	; 0x840 <prvInsertBlockIntoFreeList+0xe>
     83e:	df 01       	movw	r26, r30
     840:	ed 91       	ld	r30, X+
     842:	fc 91       	ld	r31, X
     844:	11 97       	sbiw	r26, 0x01	; 1
     846:	ec 17       	cp	r30, r28
     848:	fd 07       	cpc	r31, r29
     84a:	c8 f3       	brcs	.-14     	; 0x83e <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     84c:	12 96       	adiw	r26, 0x02	; 2
     84e:	8d 91       	ld	r24, X+
     850:	9c 91       	ld	r25, X
     852:	13 97       	sbiw	r26, 0x03	; 3
     854:	9d 01       	movw	r18, r26
     856:	28 0f       	add	r18, r24
     858:	39 1f       	adc	r19, r25
     85a:	c2 17       	cp	r28, r18
     85c:	d3 07       	cpc	r29, r19
     85e:	49 f4       	brne	.+18     	; 0x872 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     860:	2a 81       	ldd	r18, Y+2	; 0x02
     862:	3b 81       	ldd	r19, Y+3	; 0x03
     864:	82 0f       	add	r24, r18
     866:	93 1f       	adc	r25, r19
     868:	13 96       	adiw	r26, 0x03	; 3
     86a:	9c 93       	st	X, r25
     86c:	8e 93       	st	-X, r24
     86e:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     870:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     872:	8a 81       	ldd	r24, Y+2	; 0x02
     874:	9b 81       	ldd	r25, Y+3	; 0x03
     876:	9e 01       	movw	r18, r28
     878:	28 0f       	add	r18, r24
     87a:	39 1f       	adc	r19, r25
     87c:	e2 17       	cp	r30, r18
     87e:	f3 07       	cpc	r31, r19
     880:	c1 f4       	brne	.+48     	; 0x8b2 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     882:	20 91 e0 07 	lds	r18, 0x07E0	; 0x8007e0 <pxEnd>
     886:	30 91 e1 07 	lds	r19, 0x07E1	; 0x8007e1 <pxEnd+0x1>
     88a:	e2 17       	cp	r30, r18
     88c:	f3 07       	cpc	r31, r19
     88e:	71 f0       	breq	.+28     	; 0x8ac <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     890:	22 81       	ldd	r18, Z+2	; 0x02
     892:	33 81       	ldd	r19, Z+3	; 0x03
     894:	82 0f       	add	r24, r18
     896:	93 1f       	adc	r25, r19
     898:	9b 83       	std	Y+3, r25	; 0x03
     89a:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     89c:	ed 91       	ld	r30, X+
     89e:	fc 91       	ld	r31, X
     8a0:	11 97       	sbiw	r26, 0x01	; 1
     8a2:	80 81       	ld	r24, Z
     8a4:	91 81       	ldd	r25, Z+1	; 0x01
     8a6:	99 83       	std	Y+1, r25	; 0x01
     8a8:	88 83       	st	Y, r24
     8aa:	05 c0       	rjmp	.+10     	; 0x8b6 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     8ac:	39 83       	std	Y+1, r19	; 0x01
     8ae:	28 83       	st	Y, r18
     8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     8b2:	f9 83       	std	Y+1, r31	; 0x01
     8b4:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     8b6:	ca 17       	cp	r28, r26
     8b8:	db 07       	cpc	r29, r27
     8ba:	11 f0       	breq	.+4      	; 0x8c0 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     8bc:	cd 93       	st	X+, r28
     8be:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     8c6:	ef 92       	push	r14
     8c8:	ff 92       	push	r15
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     8d4:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     8d8:	80 91 e0 07 	lds	r24, 0x07E0	; 0x8007e0 <pxEnd>
     8dc:	90 91 e1 07 	lds	r25, 0x07E1	; 0x8007e1 <pxEnd+0x1>
     8e0:	89 2b       	or	r24, r25
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     8e4:	7d df       	rcall	.-262    	; 0x7e0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     8e6:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <__data_end>
     8ea:	90 91 d7 07 	lds	r25, 0x07D7	; 0x8007d7 <__data_end+0x1>
     8ee:	80 23       	and	r24, r16
     8f0:	91 23       	and	r25, r17
     8f2:	89 2b       	or	r24, r25
     8f4:	09 f0       	breq	.+2      	; 0x8f8 <pvPortMalloc+0x32>
     8f6:	76 c0       	rjmp	.+236    	; 0x9e4 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     8f8:	01 15       	cp	r16, r1
     8fa:	11 05       	cpc	r17, r1
     8fc:	49 f0       	breq	.+18     	; 0x910 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     8fe:	c8 01       	movw	r24, r16
     900:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     902:	08 17       	cp	r16, r24
     904:	19 07       	cpc	r17, r25
     906:	18 f0       	brcs	.+6      	; 0x90e <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     908:	00 e0       	ldi	r16, 0x00	; 0
     90a:	10 e0       	ldi	r17, 0x00	; 0
     90c:	01 c0       	rjmp	.+2      	; 0x910 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     90e:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     910:	01 15       	cp	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	09 f4       	brne	.+2      	; 0x918 <pvPortMalloc+0x52>
     916:	69 c0       	rjmp	.+210    	; 0x9ea <pvPortMalloc+0x124>
     918:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <xFreeBytesRemaining>
     91c:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <xFreeBytesRemaining+0x1>
     920:	80 17       	cp	r24, r16
     922:	91 07       	cpc	r25, r17
     924:	08 f4       	brcc	.+2      	; 0x928 <pvPortMalloc+0x62>
     926:	64 c0       	rjmp	.+200    	; 0x9f0 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     928:	c0 91 e2 07 	lds	r28, 0x07E2	; 0x8007e2 <xStart>
     92c:	d0 91 e3 07 	lds	r29, 0x07E3	; 0x8007e3 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     930:	e2 ee       	ldi	r30, 0xE2	; 226
     932:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     934:	02 c0       	rjmp	.+4      	; 0x93a <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     936:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     938:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     93a:	8a 81       	ldd	r24, Y+2	; 0x02
     93c:	9b 81       	ldd	r25, Y+3	; 0x03
     93e:	80 17       	cp	r24, r16
     940:	91 07       	cpc	r25, r17
     942:	20 f4       	brcc	.+8      	; 0x94c <pvPortMalloc+0x86>
     944:	88 81       	ld	r24, Y
     946:	99 81       	ldd	r25, Y+1	; 0x01
     948:	00 97       	sbiw	r24, 0x00	; 0
     94a:	a9 f7       	brne	.-22     	; 0x936 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     94c:	80 91 e0 07 	lds	r24, 0x07E0	; 0x8007e0 <pxEnd>
     950:	90 91 e1 07 	lds	r25, 0x07E1	; 0x8007e1 <pxEnd+0x1>
     954:	c8 17       	cp	r28, r24
     956:	d9 07       	cpc	r29, r25
     958:	09 f4       	brne	.+2      	; 0x95c <pvPortMalloc+0x96>
     95a:	4d c0       	rjmp	.+154    	; 0x9f6 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     95c:	e0 80       	ld	r14, Z
     95e:	f1 80       	ldd	r15, Z+1	; 0x01
     960:	84 e0       	ldi	r24, 0x04	; 4
     962:	e8 0e       	add	r14, r24
     964:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     966:	88 81       	ld	r24, Y
     968:	99 81       	ldd	r25, Y+1	; 0x01
     96a:	91 83       	std	Z+1, r25	; 0x01
     96c:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     96e:	2a 81       	ldd	r18, Y+2	; 0x02
     970:	3b 81       	ldd	r19, Y+3	; 0x03
     972:	20 1b       	sub	r18, r16
     974:	31 0b       	sbc	r19, r17
     976:	29 30       	cpi	r18, 0x09	; 9
     978:	31 05       	cpc	r19, r1
     97a:	48 f0       	brcs	.+18     	; 0x98e <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     97c:	ce 01       	movw	r24, r28
     97e:	80 0f       	add	r24, r16
     980:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     982:	fc 01       	movw	r30, r24
     984:	33 83       	std	Z+3, r19	; 0x03
     986:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     988:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     98a:	0a 83       	std	Y+2, r16	; 0x02
     98c:	52 df       	rcall	.-348    	; 0x832 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     98e:	2a 81       	ldd	r18, Y+2	; 0x02
     990:	3b 81       	ldd	r19, Y+3	; 0x03
     992:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <xFreeBytesRemaining>
     996:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <xFreeBytesRemaining+0x1>
     99a:	82 1b       	sub	r24, r18
     99c:	93 0b       	sbc	r25, r19
     99e:	90 93 df 07 	sts	0x07DF, r25	; 0x8007df <xFreeBytesRemaining+0x1>
     9a2:	80 93 de 07 	sts	0x07DE, r24	; 0x8007de <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     9a6:	40 91 dc 07 	lds	r20, 0x07DC	; 0x8007dc <xMinimumEverFreeBytesRemaining>
     9aa:	50 91 dd 07 	lds	r21, 0x07DD	; 0x8007dd <xMinimumEverFreeBytesRemaining+0x1>
     9ae:	84 17       	cp	r24, r20
     9b0:	95 07       	cpc	r25, r21
     9b2:	20 f4       	brcc	.+8      	; 0x9bc <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     9b4:	90 93 dd 07 	sts	0x07DD, r25	; 0x8007dd <xMinimumEverFreeBytesRemaining+0x1>
     9b8:	80 93 dc 07 	sts	0x07DC, r24	; 0x8007dc <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     9bc:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <__data_end>
     9c0:	90 91 d7 07 	lds	r25, 0x07D7	; 0x8007d7 <__data_end+0x1>
     9c4:	28 2b       	or	r18, r24
     9c6:	39 2b       	or	r19, r25
     9c8:	3b 83       	std	Y+3, r19	; 0x03
     9ca:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     9cc:	19 82       	std	Y+1, r1	; 0x01
     9ce:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     9d0:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <xNumberOfSuccessfulAllocations>
     9d4:	90 91 db 07 	lds	r25, 0x07DB	; 0x8007db <xNumberOfSuccessfulAllocations+0x1>
     9d8:	01 96       	adiw	r24, 0x01	; 1
     9da:	90 93 db 07 	sts	0x07DB, r25	; 0x8007db <xNumberOfSuccessfulAllocations+0x1>
     9de:	80 93 da 07 	sts	0x07DA, r24	; 0x8007da <xNumberOfSuccessfulAllocations>
     9e2:	0b c0       	rjmp	.+22     	; 0x9fa <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     9e4:	e1 2c       	mov	r14, r1
     9e6:	f1 2c       	mov	r15, r1
     9e8:	08 c0       	rjmp	.+16     	; 0x9fa <pvPortMalloc+0x134>
     9ea:	e1 2c       	mov	r14, r1
     9ec:	f1 2c       	mov	r15, r1
     9ee:	05 c0       	rjmp	.+10     	; 0x9fa <pvPortMalloc+0x134>
     9f0:	e1 2c       	mov	r14, r1
     9f2:	f1 2c       	mov	r15, r1
     9f4:	02 c0       	rjmp	.+4      	; 0x9fa <pvPortMalloc+0x134>
     9f6:	e1 2c       	mov	r14, r1
     9f8:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     9fa:	0e 94 c1 10 	call	0x2182	; 0x2182 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     9fe:	e1 14       	cp	r14, r1
     a00:	f1 04       	cpc	r15, r1
     a02:	11 f4       	brne	.+4      	; 0xa08 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     a04:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     a08:	c7 01       	movw	r24, r14
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ff 90       	pop	r15
     a14:	ef 90       	pop	r14
     a16:	08 95       	ret

00000a18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     a20:	00 97       	sbiw	r24, 0x00	; 0
     a22:	91 f1       	breq	.+100    	; 0xa88 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     a24:	ec 01       	movw	r28, r24
     a26:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     a28:	4a 81       	ldd	r20, Y+2	; 0x02
     a2a:	5b 81       	ldd	r21, Y+3	; 0x03
     a2c:	20 91 d6 07 	lds	r18, 0x07D6	; 0x8007d6 <__data_end>
     a30:	30 91 d7 07 	lds	r19, 0x07D7	; 0x8007d7 <__data_end+0x1>
     a34:	ba 01       	movw	r22, r20
     a36:	62 23       	and	r22, r18
     a38:	73 23       	and	r23, r19
     a3a:	67 2b       	or	r22, r23
     a3c:	29 f1       	breq	.+74     	; 0xa88 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     a3e:	68 81       	ld	r22, Y
     a40:	79 81       	ldd	r23, Y+1	; 0x01
     a42:	67 2b       	or	r22, r23
     a44:	09 f5       	brne	.+66     	; 0xa88 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     a46:	20 95       	com	r18
     a48:	30 95       	com	r19
     a4a:	24 23       	and	r18, r20
     a4c:	35 23       	and	r19, r21
     a4e:	3b 83       	std	Y+3, r19	; 0x03
     a50:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     a52:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     a56:	8a 81       	ldd	r24, Y+2	; 0x02
     a58:	9b 81       	ldd	r25, Y+3	; 0x03
     a5a:	20 91 de 07 	lds	r18, 0x07DE	; 0x8007de <xFreeBytesRemaining>
     a5e:	30 91 df 07 	lds	r19, 0x07DF	; 0x8007df <xFreeBytesRemaining+0x1>
     a62:	82 0f       	add	r24, r18
     a64:	93 1f       	adc	r25, r19
     a66:	90 93 df 07 	sts	0x07DF, r25	; 0x8007df <xFreeBytesRemaining+0x1>
     a6a:	80 93 de 07 	sts	0x07DE, r24	; 0x8007de <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     a6e:	ce 01       	movw	r24, r28
     a70:	e0 de       	rcall	.-576    	; 0x832 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     a72:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <xNumberOfSuccessfulFrees>
     a76:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <xNumberOfSuccessfulFrees+0x1>
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	90 93 d9 07 	sts	0x07D9, r25	; 0x8007d9 <xNumberOfSuccessfulFrees+0x1>
     a80:	80 93 d8 07 	sts	0x07D8, r24	; 0x8007d8 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     a84:	0e 94 c1 10 	call	0x2182	; 0x2182 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	08 95       	ret

00000a92 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     a92:	fc 01       	movw	r30, r24
     a94:	03 96       	adiw	r24, 0x03	; 3
     a96:	92 83       	std	Z+2, r25	; 0x02
     a98:	81 83       	std	Z+1, r24	; 0x01
     a9a:	4f ef       	ldi	r20, 0xFF	; 255
     a9c:	5f ef       	ldi	r21, 0xFF	; 255
     a9e:	ba 01       	movw	r22, r20
     aa0:	43 83       	std	Z+3, r20	; 0x03
     aa2:	54 83       	std	Z+4, r21	; 0x04
     aa4:	65 83       	std	Z+5, r22	; 0x05
     aa6:	76 83       	std	Z+6, r23	; 0x06
     aa8:	90 87       	std	Z+8, r25	; 0x08
     aaa:	87 83       	std	Z+7, r24	; 0x07
     aac:	92 87       	std	Z+10, r25	; 0x0a
     aae:	81 87       	std	Z+9, r24	; 0x09
     ab0:	10 82       	st	Z, r1
     ab2:	08 95       	ret

00000ab4 <vListInitialiseItem>:
     ab4:	fc 01       	movw	r30, r24
     ab6:	13 86       	std	Z+11, r1	; 0x0b
     ab8:	12 86       	std	Z+10, r1	; 0x0a
     aba:	08 95       	ret

00000abc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     ac6:	08 81       	ld	r16, Y
     ac8:	19 81       	ldd	r17, Y+1	; 0x01
     aca:	2a 81       	ldd	r18, Y+2	; 0x02
     acc:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     ace:	0f 3f       	cpi	r16, 0xFF	; 255
     ad0:	4f ef       	ldi	r20, 0xFF	; 255
     ad2:	14 07       	cpc	r17, r20
     ad4:	24 07       	cpc	r18, r20
     ad6:	34 07       	cpc	r19, r20
     ad8:	21 f4       	brne	.+8      	; 0xae2 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     ada:	fc 01       	movw	r30, r24
     adc:	a1 85       	ldd	r26, Z+9	; 0x09
     ade:	b2 85       	ldd	r27, Z+10	; 0x0a
     ae0:	11 c0       	rjmp	.+34     	; 0xb04 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     ae2:	dc 01       	movw	r26, r24
     ae4:	13 96       	adiw	r26, 0x03	; 3
     ae6:	01 c0       	rjmp	.+2      	; 0xaea <vListInsert+0x2e>
     ae8:	df 01       	movw	r26, r30
     aea:	14 96       	adiw	r26, 0x04	; 4
     aec:	ed 91       	ld	r30, X+
     aee:	fc 91       	ld	r31, X
     af0:	15 97       	sbiw	r26, 0x05	; 5
     af2:	40 81       	ld	r20, Z
     af4:	51 81       	ldd	r21, Z+1	; 0x01
     af6:	62 81       	ldd	r22, Z+2	; 0x02
     af8:	73 81       	ldd	r23, Z+3	; 0x03
     afa:	04 17       	cp	r16, r20
     afc:	15 07       	cpc	r17, r21
     afe:	26 07       	cpc	r18, r22
     b00:	37 07       	cpc	r19, r23
     b02:	90 f7       	brcc	.-28     	; 0xae8 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     b04:	14 96       	adiw	r26, 0x04	; 4
     b06:	ed 91       	ld	r30, X+
     b08:	fc 91       	ld	r31, X
     b0a:	15 97       	sbiw	r26, 0x05	; 5
     b0c:	fd 83       	std	Y+5, r31	; 0x05
     b0e:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     b10:	d7 83       	std	Z+7, r29	; 0x07
     b12:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     b14:	bf 83       	std	Y+7, r27	; 0x07
     b16:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     b18:	15 96       	adiw	r26, 0x05	; 5
     b1a:	dc 93       	st	X, r29
     b1c:	ce 93       	st	-X, r28
     b1e:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     b20:	9b 87       	std	Y+11, r25	; 0x0b
     b22:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     b24:	fc 01       	movw	r30, r24
     b26:	20 81       	ld	r18, Z
     b28:	2f 5f       	subi	r18, 0xFF	; 255
     b2a:	20 83       	st	Z, r18
}
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	08 95       	ret

00000b36 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     b3c:	a2 85       	ldd	r26, Z+10	; 0x0a
     b3e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     b40:	c4 81       	ldd	r28, Z+4	; 0x04
     b42:	d5 81       	ldd	r29, Z+5	; 0x05
     b44:	86 81       	ldd	r24, Z+6	; 0x06
     b46:	97 81       	ldd	r25, Z+7	; 0x07
     b48:	9f 83       	std	Y+7, r25	; 0x07
     b4a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     b4c:	c6 81       	ldd	r28, Z+6	; 0x06
     b4e:	d7 81       	ldd	r29, Z+7	; 0x07
     b50:	84 81       	ldd	r24, Z+4	; 0x04
     b52:	95 81       	ldd	r25, Z+5	; 0x05
     b54:	9d 83       	std	Y+5, r25	; 0x05
     b56:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     b58:	11 96       	adiw	r26, 0x01	; 1
     b5a:	8d 91       	ld	r24, X+
     b5c:	9c 91       	ld	r25, X
     b5e:	12 97       	sbiw	r26, 0x02	; 2
     b60:	e8 17       	cp	r30, r24
     b62:	f9 07       	cpc	r31, r25
     b64:	31 f4       	brne	.+12     	; 0xb72 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     b66:	86 81       	ldd	r24, Z+6	; 0x06
     b68:	97 81       	ldd	r25, Z+7	; 0x07
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	9c 93       	st	X, r25
     b6e:	8e 93       	st	-X, r24
     b70:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     b72:	13 86       	std	Z+11, r1	; 0x0b
     b74:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     b76:	8c 91       	ld	r24, X
     b78:	81 50       	subi	r24, 0x01	; 1
     b7a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     b7c:	8c 91       	ld	r24, X
}
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	08 95       	ret

00000b84 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     b84:	a8 95       	wdr
     b86:	90 ec       	ldi	r25, 0xC0	; 192
     b88:	88 e1       	ldi	r24, 0x18	; 24
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	f8 94       	cli
     b8e:	a8 95       	wdr
     b90:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     b9a:	08 95       	ret

00000b9c <pxPortInitialiseStack>:
     b9c:	fc 01       	movw	r30, r24
     b9e:	60 83       	st	Z, r22
     ba0:	31 97       	sbiw	r30, 0x01	; 1
     ba2:	70 83       	st	Z, r23
     ba4:	31 97       	sbiw	r30, 0x01	; 1
     ba6:	10 82       	st	Z, r1
     ba8:	31 97       	sbiw	r30, 0x01	; 1
     baa:	10 82       	st	Z, r1
     bac:	31 97       	sbiw	r30, 0x01	; 1
     bae:	20 e8       	ldi	r18, 0x80	; 128
     bb0:	20 83       	st	Z, r18
     bb2:	31 97       	sbiw	r30, 0x01	; 1
     bb4:	10 82       	st	Z, r1
     bb6:	31 97       	sbiw	r30, 0x01	; 1
     bb8:	10 82       	st	Z, r1
     bba:	31 97       	sbiw	r30, 0x01	; 1
     bbc:	10 82       	st	Z, r1
     bbe:	77 97       	sbiw	r30, 0x17	; 23
     bc0:	40 83       	st	Z, r20
     bc2:	31 97       	sbiw	r30, 0x01	; 1
     bc4:	50 83       	st	Z, r21
     bc6:	86 97       	sbiw	r24, 0x26	; 38
     bc8:	08 95       	ret

00000bca <xPortStartScheduler>:
     bca:	dc df       	rcall	.-72     	; 0xb84 <prvSetupTimerInterrupt>
     bcc:	a0 91 5d 14 	lds	r26, 0x145D	; 0x80145d <pxCurrentTCB>
     bd0:	b0 91 5e 14 	lds	r27, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
     bd4:	cd 91       	ld	r28, X+
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	dd 91       	ld	r29, X+
     bda:	de bf       	out	0x3e, r29	; 62
     bdc:	ff 91       	pop	r31
     bde:	ef 91       	pop	r30
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	bf 91       	pop	r27
     be6:	af 91       	pop	r26
     be8:	9f 91       	pop	r25
     bea:	8f 91       	pop	r24
     bec:	7f 91       	pop	r23
     bee:	6f 91       	pop	r22
     bf0:	5f 91       	pop	r21
     bf2:	4f 91       	pop	r20
     bf4:	3f 91       	pop	r19
     bf6:	2f 91       	pop	r18
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	ff 90       	pop	r15
     bfe:	ef 90       	pop	r14
     c00:	df 90       	pop	r13
     c02:	cf 90       	pop	r12
     c04:	bf 90       	pop	r11
     c06:	af 90       	pop	r10
     c08:	9f 90       	pop	r9
     c0a:	8f 90       	pop	r8
     c0c:	7f 90       	pop	r7
     c0e:	6f 90       	pop	r6
     c10:	5f 90       	pop	r5
     c12:	4f 90       	pop	r4
     c14:	3f 90       	pop	r3
     c16:	2f 90       	pop	r2
     c18:	1f 90       	pop	r1
     c1a:	0f 90       	pop	r0
     c1c:	0c be       	out	0x3c, r0	; 60
     c1e:	0f 90       	pop	r0
     c20:	0b be       	out	0x3b, r0	; 59
     c22:	0f 90       	pop	r0
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	0f 90       	pop	r0
     c28:	08 95       	ret
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	08 95       	ret

00000c2e <vPortYield>:
     c2e:	0f 92       	push	r0
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	f8 94       	cli
     c34:	0f 92       	push	r0
     c36:	0b b6       	in	r0, 0x3b	; 59
     c38:	0f 92       	push	r0
     c3a:	0c b6       	in	r0, 0x3c	; 60
     c3c:	0f 92       	push	r0
     c3e:	1f 92       	push	r1
     c40:	11 24       	eor	r1, r1
     c42:	2f 92       	push	r2
     c44:	3f 92       	push	r3
     c46:	4f 92       	push	r4
     c48:	5f 92       	push	r5
     c4a:	6f 92       	push	r6
     c4c:	7f 92       	push	r7
     c4e:	8f 92       	push	r8
     c50:	9f 92       	push	r9
     c52:	af 92       	push	r10
     c54:	bf 92       	push	r11
     c56:	cf 92       	push	r12
     c58:	df 92       	push	r13
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	2f 93       	push	r18
     c64:	3f 93       	push	r19
     c66:	4f 93       	push	r20
     c68:	5f 93       	push	r21
     c6a:	6f 93       	push	r22
     c6c:	7f 93       	push	r23
     c6e:	8f 93       	push	r24
     c70:	9f 93       	push	r25
     c72:	af 93       	push	r26
     c74:	bf 93       	push	r27
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	ef 93       	push	r30
     c7c:	ff 93       	push	r31
     c7e:	a0 91 5d 14 	lds	r26, 0x145D	; 0x80145d <pxCurrentTCB>
     c82:	b0 91 5e 14 	lds	r27, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
     c86:	0d b6       	in	r0, 0x3d	; 61
     c88:	0d 92       	st	X+, r0
     c8a:	0e b6       	in	r0, 0x3e	; 62
     c8c:	0d 92       	st	X+, r0
     c8e:	0e 94 1d 12 	call	0x243a	; 0x243a <vTaskSwitchContext>
     c92:	a0 91 5d 14 	lds	r26, 0x145D	; 0x80145d <pxCurrentTCB>
     c96:	b0 91 5e 14 	lds	r27, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
     c9a:	cd 91       	ld	r28, X+
     c9c:	cd bf       	out	0x3d, r28	; 61
     c9e:	dd 91       	ld	r29, X+
     ca0:	de bf       	out	0x3e, r29	; 62
     ca2:	ff 91       	pop	r31
     ca4:	ef 91       	pop	r30
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	bf 91       	pop	r27
     cac:	af 91       	pop	r26
     cae:	9f 91       	pop	r25
     cb0:	8f 91       	pop	r24
     cb2:	7f 91       	pop	r23
     cb4:	6f 91       	pop	r22
     cb6:	5f 91       	pop	r21
     cb8:	4f 91       	pop	r20
     cba:	3f 91       	pop	r19
     cbc:	2f 91       	pop	r18
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	ff 90       	pop	r15
     cc4:	ef 90       	pop	r14
     cc6:	df 90       	pop	r13
     cc8:	cf 90       	pop	r12
     cca:	bf 90       	pop	r11
     ccc:	af 90       	pop	r10
     cce:	9f 90       	pop	r9
     cd0:	8f 90       	pop	r8
     cd2:	7f 90       	pop	r7
     cd4:	6f 90       	pop	r6
     cd6:	5f 90       	pop	r5
     cd8:	4f 90       	pop	r4
     cda:	3f 90       	pop	r3
     cdc:	2f 90       	pop	r2
     cde:	1f 90       	pop	r1
     ce0:	0f 90       	pop	r0
     ce2:	0c be       	out	0x3c, r0	; 60
     ce4:	0f 90       	pop	r0
     ce6:	0b be       	out	0x3b, r0	; 59
     ce8:	0f 90       	pop	r0
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	0f 90       	pop	r0
     cee:	08 95       	ret

00000cf0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     cf0:	0f 92       	push	r0
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	0f 92       	push	r0
     cf8:	0b b6       	in	r0, 0x3b	; 59
     cfa:	0f 92       	push	r0
     cfc:	0c b6       	in	r0, 0x3c	; 60
     cfe:	0f 92       	push	r0
     d00:	1f 92       	push	r1
     d02:	11 24       	eor	r1, r1
     d04:	2f 92       	push	r2
     d06:	3f 92       	push	r3
     d08:	4f 92       	push	r4
     d0a:	5f 92       	push	r5
     d0c:	6f 92       	push	r6
     d0e:	7f 92       	push	r7
     d10:	8f 92       	push	r8
     d12:	9f 92       	push	r9
     d14:	af 92       	push	r10
     d16:	bf 92       	push	r11
     d18:	cf 92       	push	r12
     d1a:	df 92       	push	r13
     d1c:	ef 92       	push	r14
     d1e:	ff 92       	push	r15
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	2f 93       	push	r18
     d26:	3f 93       	push	r19
     d28:	4f 93       	push	r20
     d2a:	5f 93       	push	r21
     d2c:	6f 93       	push	r22
     d2e:	7f 93       	push	r23
     d30:	8f 93       	push	r24
     d32:	9f 93       	push	r25
     d34:	af 93       	push	r26
     d36:	bf 93       	push	r27
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	ef 93       	push	r30
     d3e:	ff 93       	push	r31
     d40:	a0 91 5d 14 	lds	r26, 0x145D	; 0x80145d <pxCurrentTCB>
     d44:	b0 91 5e 14 	lds	r27, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
     d48:	0d b6       	in	r0, 0x3d	; 61
     d4a:	0d 92       	st	X+, r0
     d4c:	0e b6       	in	r0, 0x3e	; 62
     d4e:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     d50:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     d52:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <xTaskIncrementTick>
     d56:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     d58:	0e 94 1d 12 	call	0x243a	; 0x243a <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     d5c:	a0 91 5d 14 	lds	r26, 0x145D	; 0x80145d <pxCurrentTCB>
     d60:	b0 91 5e 14 	lds	r27, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
     d64:	cd 91       	ld	r28, X+
     d66:	cd bf       	out	0x3d, r28	; 61
     d68:	dd 91       	ld	r29, X+
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	ff 91       	pop	r31
     d6e:	ef 91       	pop	r30
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	bf 91       	pop	r27
     d76:	af 91       	pop	r26
     d78:	9f 91       	pop	r25
     d7a:	8f 91       	pop	r24
     d7c:	7f 91       	pop	r23
     d7e:	6f 91       	pop	r22
     d80:	5f 91       	pop	r21
     d82:	4f 91       	pop	r20
     d84:	3f 91       	pop	r19
     d86:	2f 91       	pop	r18
     d88:	1f 91       	pop	r17
     d8a:	0f 91       	pop	r16
     d8c:	ff 90       	pop	r15
     d8e:	ef 90       	pop	r14
     d90:	df 90       	pop	r13
     d92:	cf 90       	pop	r12
     d94:	bf 90       	pop	r11
     d96:	af 90       	pop	r10
     d98:	9f 90       	pop	r9
     d9a:	8f 90       	pop	r8
     d9c:	7f 90       	pop	r7
     d9e:	6f 90       	pop	r6
     da0:	5f 90       	pop	r5
     da2:	4f 90       	pop	r4
     da4:	3f 90       	pop	r3
     da6:	2f 90       	pop	r2
     da8:	1f 90       	pop	r1
     daa:	0f 90       	pop	r0
     dac:	0c be       	out	0x3c, r0	; 60
     dae:	0f 90       	pop	r0
     db0:	0b be       	out	0x3b, r0	; 59
     db2:	0f 90       	pop	r0
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     db8:	08 95       	ret

00000dba <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     dba:	9a df       	rcall	.-204    	; 0xcf0 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     dbc:	18 95       	reti

00000dbe <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	0f 92       	push	r0
     dc4:	fc 01       	movw	r30, r24
     dc6:	86 8d       	ldd	r24, Z+30	; 0x1e
     dc8:	81 11       	cpse	r24, r1
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <prvIsQueueEmpty+0x12>
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	01 c0       	rjmp	.+2      	; 0xdd2 <prvIsQueueEmpty+0x14>
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	0f 90       	pop	r0
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	08 95       	ret

00000dd8 <prvIsQueueFull>:
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	0f 92       	push	r0
     dde:	fc 01       	movw	r30, r24
     de0:	26 8d       	ldd	r18, Z+30	; 0x1e
     de2:	87 8d       	ldd	r24, Z+31	; 0x1f
     de4:	28 13       	cpse	r18, r24
     de6:	02 c0       	rjmp	.+4      	; 0xdec <prvIsQueueFull+0x14>
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	01 c0       	rjmp	.+2      	; 0xdee <prvIsQueueFull+0x16>
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	0f 90       	pop	r0
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	08 95       	ret

00000df4 <prvCopyDataToQueue>:
     df4:	0f 93       	push	r16
     df6:	1f 93       	push	r17
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	ec 01       	movw	r28, r24
     dfe:	04 2f       	mov	r16, r20
     e00:	1e 8d       	ldd	r17, Y+30	; 0x1e
     e02:	48 a1       	ldd	r20, Y+32	; 0x20
     e04:	41 11       	cpse	r20, r1
     e06:	0c c0       	rjmp	.+24     	; 0xe20 <prvCopyDataToQueue+0x2c>
     e08:	88 81       	ld	r24, Y
     e0a:	99 81       	ldd	r25, Y+1	; 0x01
     e0c:	89 2b       	or	r24, r25
     e0e:	09 f0       	breq	.+2      	; 0xe12 <prvCopyDataToQueue+0x1e>
     e10:	42 c0       	rjmp	.+132    	; 0xe96 <prvCopyDataToQueue+0xa2>
     e12:	8c 81       	ldd	r24, Y+4	; 0x04
     e14:	9d 81       	ldd	r25, Y+5	; 0x05
     e16:	0e 94 12 15 	call	0x2a24	; 0x2a24 <xTaskPriorityDisinherit>
     e1a:	1d 82       	std	Y+5, r1	; 0x05
     e1c:	1c 82       	std	Y+4, r1	; 0x04
     e1e:	42 c0       	rjmp	.+132    	; 0xea4 <prvCopyDataToQueue+0xb0>
     e20:	01 11       	cpse	r16, r1
     e22:	17 c0       	rjmp	.+46     	; 0xe52 <prvCopyDataToQueue+0x5e>
     e24:	50 e0       	ldi	r21, 0x00	; 0
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	9b 81       	ldd	r25, Y+3	; 0x03
     e2a:	0e 94 17 33 	call	0x662e	; 0x662e <memcpy>
     e2e:	28 a1       	ldd	r18, Y+32	; 0x20
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	9b 81       	ldd	r25, Y+3	; 0x03
     e34:	82 0f       	add	r24, r18
     e36:	91 1d       	adc	r25, r1
     e38:	9b 83       	std	Y+3, r25	; 0x03
     e3a:	8a 83       	std	Y+2, r24	; 0x02
     e3c:	2c 81       	ldd	r18, Y+4	; 0x04
     e3e:	3d 81       	ldd	r19, Y+5	; 0x05
     e40:	82 17       	cp	r24, r18
     e42:	93 07       	cpc	r25, r19
     e44:	50 f1       	brcs	.+84     	; 0xe9a <prvCopyDataToQueue+0xa6>
     e46:	88 81       	ld	r24, Y
     e48:	99 81       	ldd	r25, Y+1	; 0x01
     e4a:	9b 83       	std	Y+3, r25	; 0x03
     e4c:	8a 83       	std	Y+2, r24	; 0x02
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	29 c0       	rjmp	.+82     	; 0xea4 <prvCopyDataToQueue+0xb0>
     e52:	50 e0       	ldi	r21, 0x00	; 0
     e54:	8e 81       	ldd	r24, Y+6	; 0x06
     e56:	9f 81       	ldd	r25, Y+7	; 0x07
     e58:	0e 94 17 33 	call	0x662e	; 0x662e <memcpy>
     e5c:	88 a1       	ldd	r24, Y+32	; 0x20
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	91 95       	neg	r25
     e62:	81 95       	neg	r24
     e64:	91 09       	sbc	r25, r1
     e66:	2e 81       	ldd	r18, Y+6	; 0x06
     e68:	3f 81       	ldd	r19, Y+7	; 0x07
     e6a:	28 0f       	add	r18, r24
     e6c:	39 1f       	adc	r19, r25
     e6e:	3f 83       	std	Y+7, r19	; 0x07
     e70:	2e 83       	std	Y+6, r18	; 0x06
     e72:	48 81       	ld	r20, Y
     e74:	59 81       	ldd	r21, Y+1	; 0x01
     e76:	24 17       	cp	r18, r20
     e78:	35 07       	cpc	r19, r21
     e7a:	30 f4       	brcc	.+12     	; 0xe88 <prvCopyDataToQueue+0x94>
     e7c:	2c 81       	ldd	r18, Y+4	; 0x04
     e7e:	3d 81       	ldd	r19, Y+5	; 0x05
     e80:	82 0f       	add	r24, r18
     e82:	93 1f       	adc	r25, r19
     e84:	9f 83       	std	Y+7, r25	; 0x07
     e86:	8e 83       	std	Y+6, r24	; 0x06
     e88:	02 30       	cpi	r16, 0x02	; 2
     e8a:	49 f4       	brne	.+18     	; 0xe9e <prvCopyDataToQueue+0xaa>
     e8c:	11 23       	and	r17, r17
     e8e:	49 f0       	breq	.+18     	; 0xea2 <prvCopyDataToQueue+0xae>
     e90:	11 50       	subi	r17, 0x01	; 1
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	07 c0       	rjmp	.+14     	; 0xea4 <prvCopyDataToQueue+0xb0>
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	05 c0       	rjmp	.+10     	; 0xea4 <prvCopyDataToQueue+0xb0>
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	03 c0       	rjmp	.+6      	; 0xea4 <prvCopyDataToQueue+0xb0>
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	01 c0       	rjmp	.+2      	; 0xea4 <prvCopyDataToQueue+0xb0>
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	1f 5f       	subi	r17, 0xFF	; 255
     ea6:	1e 8f       	std	Y+30, r17	; 0x1e
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	08 95       	ret

00000eb2 <prvCopyDataFromQueue>:
     eb2:	fc 01       	movw	r30, r24
     eb4:	40 a1       	ldd	r20, Z+32	; 0x20
     eb6:	44 23       	and	r20, r20
     eb8:	a9 f0       	breq	.+42     	; 0xee4 <prvCopyDataFromQueue+0x32>
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	26 81       	ldd	r18, Z+6	; 0x06
     ebe:	37 81       	ldd	r19, Z+7	; 0x07
     ec0:	24 0f       	add	r18, r20
     ec2:	35 1f       	adc	r19, r21
     ec4:	37 83       	std	Z+7, r19	; 0x07
     ec6:	26 83       	std	Z+6, r18	; 0x06
     ec8:	84 81       	ldd	r24, Z+4	; 0x04
     eca:	95 81       	ldd	r25, Z+5	; 0x05
     ecc:	28 17       	cp	r18, r24
     ece:	39 07       	cpc	r19, r25
     ed0:	20 f0       	brcs	.+8      	; 0xeda <prvCopyDataFromQueue+0x28>
     ed2:	80 81       	ld	r24, Z
     ed4:	91 81       	ldd	r25, Z+1	; 0x01
     ed6:	97 83       	std	Z+7, r25	; 0x07
     ed8:	86 83       	std	Z+6, r24	; 0x06
     eda:	cb 01       	movw	r24, r22
     edc:	66 81       	ldd	r22, Z+6	; 0x06
     ede:	77 81       	ldd	r23, Z+7	; 0x07
     ee0:	0c 94 17 33 	jmp	0x662e	; 0x662e <memcpy>
     ee4:	08 95       	ret

00000ee6 <prvUnlockQueue>:
     ee6:	1f 93       	push	r17
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	ec 01       	movw	r28, r24
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	0f 92       	push	r0
     ef4:	1a a1       	ldd	r17, Y+34	; 0x22
     ef6:	0b c0       	rjmp	.+22     	; 0xf0e <prvUnlockQueue+0x28>
     ef8:	8b 89       	ldd	r24, Y+19	; 0x13
     efa:	88 23       	and	r24, r24
     efc:	51 f0       	breq	.+20     	; 0xf12 <prvUnlockQueue+0x2c>
     efe:	ce 01       	movw	r24, r28
     f00:	43 96       	adiw	r24, 0x13	; 19
     f02:	0e 94 25 13 	call	0x264a	; 0x264a <xTaskRemoveFromEventList>
     f06:	81 11       	cpse	r24, r1
     f08:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <vTaskMissedYield>
     f0c:	11 50       	subi	r17, 0x01	; 1
     f0e:	11 16       	cp	r1, r17
     f10:	9c f3       	brlt	.-26     	; 0xef8 <prvUnlockQueue+0x12>
     f12:	8f ef       	ldi	r24, 0xFF	; 255
     f14:	8a a3       	std	Y+34, r24	; 0x22
     f16:	0f 90       	pop	r0
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	0f 92       	push	r0
     f20:	19 a1       	ldd	r17, Y+33	; 0x21
     f22:	0b c0       	rjmp	.+22     	; 0xf3a <prvUnlockQueue+0x54>
     f24:	88 85       	ldd	r24, Y+8	; 0x08
     f26:	88 23       	and	r24, r24
     f28:	51 f0       	breq	.+20     	; 0xf3e <prvUnlockQueue+0x58>
     f2a:	ce 01       	movw	r24, r28
     f2c:	08 96       	adiw	r24, 0x08	; 8
     f2e:	0e 94 25 13 	call	0x264a	; 0x264a <xTaskRemoveFromEventList>
     f32:	81 11       	cpse	r24, r1
     f34:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <vTaskMissedYield>
     f38:	11 50       	subi	r17, 0x01	; 1
     f3a:	11 16       	cp	r1, r17
     f3c:	9c f3       	brlt	.-26     	; 0xf24 <prvUnlockQueue+0x3e>
     f3e:	8f ef       	ldi	r24, 0xFF	; 255
     f40:	89 a3       	std	Y+33, r24	; 0x21
     f42:	0f 90       	pop	r0
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	1f 91       	pop	r17
     f4c:	08 95       	ret

00000f4e <xQueueGenericReset>:
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	ec 01       	movw	r28, r24
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	0f 92       	push	r0
     f5a:	e8 81       	ld	r30, Y
     f5c:	f9 81       	ldd	r31, Y+1	; 0x01
     f5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f60:	28 a1       	ldd	r18, Y+32	; 0x20
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	82 9f       	mul	r24, r18
     f68:	a0 01       	movw	r20, r0
     f6a:	83 9f       	mul	r24, r19
     f6c:	50 0d       	add	r21, r0
     f6e:	92 9f       	mul	r25, r18
     f70:	50 0d       	add	r21, r0
     f72:	11 24       	eor	r1, r1
     f74:	4e 0f       	add	r20, r30
     f76:	5f 1f       	adc	r21, r31
     f78:	5d 83       	std	Y+5, r21	; 0x05
     f7a:	4c 83       	std	Y+4, r20	; 0x04
     f7c:	1e 8e       	std	Y+30, r1	; 0x1e
     f7e:	fb 83       	std	Y+3, r31	; 0x03
     f80:	ea 83       	std	Y+2, r30	; 0x02
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	28 9f       	mul	r18, r24
     f86:	a0 01       	movw	r20, r0
     f88:	29 9f       	mul	r18, r25
     f8a:	50 0d       	add	r21, r0
     f8c:	38 9f       	mul	r19, r24
     f8e:	50 0d       	add	r21, r0
     f90:	11 24       	eor	r1, r1
     f92:	cf 01       	movw	r24, r30
     f94:	84 0f       	add	r24, r20
     f96:	95 1f       	adc	r25, r21
     f98:	9f 83       	std	Y+7, r25	; 0x07
     f9a:	8e 83       	std	Y+6, r24	; 0x06
     f9c:	8f ef       	ldi	r24, 0xFF	; 255
     f9e:	89 a3       	std	Y+33, r24	; 0x21
     fa0:	8a a3       	std	Y+34, r24	; 0x22
     fa2:	61 11       	cpse	r22, r1
     fa4:	0b c0       	rjmp	.+22     	; 0xfbc <xQueueGenericReset+0x6e>
     fa6:	88 85       	ldd	r24, Y+8	; 0x08
     fa8:	88 23       	and	r24, r24
     faa:	71 f0       	breq	.+28     	; 0xfc8 <xQueueGenericReset+0x7a>
     fac:	ce 01       	movw	r24, r28
     fae:	08 96       	adiw	r24, 0x08	; 8
     fb0:	0e 94 25 13 	call	0x264a	; 0x264a <xTaskRemoveFromEventList>
     fb4:	88 23       	and	r24, r24
     fb6:	41 f0       	breq	.+16     	; 0xfc8 <xQueueGenericReset+0x7a>
     fb8:	3a de       	rcall	.-908    	; 0xc2e <vPortYield>
     fba:	06 c0       	rjmp	.+12     	; 0xfc8 <xQueueGenericReset+0x7a>
     fbc:	ce 01       	movw	r24, r28
     fbe:	08 96       	adiw	r24, 0x08	; 8
     fc0:	68 dd       	rcall	.-1328   	; 0xa92 <vListInitialise>
     fc2:	ce 01       	movw	r24, r28
     fc4:	43 96       	adiw	r24, 0x13	; 19
     fc6:	65 dd       	rcall	.-1334   	; 0xa92 <vListInitialise>
     fc8:	0f 90       	pop	r0
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	08 95       	ret

00000fd4 <prvInitialiseNewQueue>:
     fd4:	0f 93       	push	r16
     fd6:	1f 93       	push	r17
     fd8:	f8 01       	movw	r30, r16
     fda:	61 11       	cpse	r22, r1
     fdc:	03 c0       	rjmp	.+6      	; 0xfe4 <prvInitialiseNewQueue+0x10>
     fde:	11 83       	std	Z+1, r17	; 0x01
     fe0:	00 83       	st	Z, r16
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <prvInitialiseNewQueue+0x14>
     fe4:	51 83       	std	Z+1, r21	; 0x01
     fe6:	40 83       	st	Z, r20
     fe8:	87 8f       	std	Z+31, r24	; 0x1f
     fea:	60 a3       	std	Z+32, r22	; 0x20
     fec:	61 e0       	ldi	r22, 0x01	; 1
     fee:	cf 01       	movw	r24, r30
     ff0:	ae df       	rcall	.-164    	; 0xf4e <xQueueGenericReset>
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	08 95       	ret

00000ff8 <xQueueGenericCreate>:
     ff8:	df 92       	push	r13
     ffa:	ef 92       	push	r14
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	f8 2e       	mov	r15, r24
    1008:	e6 2e       	mov	r14, r22
    100a:	d4 2e       	mov	r13, r20
    100c:	86 9f       	mul	r24, r22
    100e:	c0 01       	movw	r24, r0
    1010:	11 24       	eor	r1, r1
    1012:	83 96       	adiw	r24, 0x23	; 35
    1014:	58 dc       	rcall	.-1872   	; 0x8c6 <pvPortMalloc>
    1016:	ec 01       	movw	r28, r24
    1018:	00 97       	sbiw	r24, 0x00	; 0
    101a:	41 f0       	breq	.+16     	; 0x102c <__EEPROM_REGION_LENGTH__+0x2c>
    101c:	8c 01       	movw	r16, r24
    101e:	2d 2d       	mov	r18, r13
    1020:	ac 01       	movw	r20, r24
    1022:	4d 5d       	subi	r20, 0xDD	; 221
    1024:	5f 4f       	sbci	r21, 0xFF	; 255
    1026:	6e 2d       	mov	r22, r14
    1028:	8f 2d       	mov	r24, r15
    102a:	d4 df       	rcall	.-88     	; 0xfd4 <prvInitialiseNewQueue>
    102c:	ce 01       	movw	r24, r28
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	ff 90       	pop	r15
    1038:	ef 90       	pop	r14
    103a:	df 90       	pop	r13
    103c:	08 95       	ret

0000103e <xQueueGenericSend>:
    103e:	cf 92       	push	r12
    1040:	df 92       	push	r13
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	29 97       	sbiw	r28, 0x09	; 9
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	7c 01       	movw	r14, r24
    1060:	6b 01       	movw	r12, r22
    1062:	2e 83       	std	Y+6, r18	; 0x06
    1064:	3f 83       	std	Y+7, r19	; 0x07
    1066:	48 87       	std	Y+8, r20	; 0x08
    1068:	59 87       	std	Y+9, r21	; 0x09
    106a:	10 e0       	ldi	r17, 0x00	; 0
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	0f 92       	push	r0
    1072:	f7 01       	movw	r30, r14
    1074:	96 8d       	ldd	r25, Z+30	; 0x1e
    1076:	87 8d       	ldd	r24, Z+31	; 0x1f
    1078:	98 17       	cp	r25, r24
    107a:	10 f0       	brcs	.+4      	; 0x1080 <xQueueGenericSend+0x42>
    107c:	02 30       	cpi	r16, 0x02	; 2
    107e:	b1 f4       	brne	.+44     	; 0x10ac <xQueueGenericSend+0x6e>
    1080:	40 2f       	mov	r20, r16
    1082:	b6 01       	movw	r22, r12
    1084:	c7 01       	movw	r24, r14
    1086:	b6 de       	rcall	.-660    	; 0xdf4 <prvCopyDataToQueue>
    1088:	f7 01       	movw	r30, r14
    108a:	93 89       	ldd	r25, Z+19	; 0x13
    108c:	99 23       	and	r25, r25
    108e:	41 f0       	breq	.+16     	; 0x10a0 <xQueueGenericSend+0x62>
    1090:	c7 01       	movw	r24, r14
    1092:	43 96       	adiw	r24, 0x13	; 19
    1094:	0e 94 25 13 	call	0x264a	; 0x264a <xTaskRemoveFromEventList>
    1098:	88 23       	and	r24, r24
    109a:	21 f0       	breq	.+8      	; 0x10a4 <xQueueGenericSend+0x66>
    109c:	c8 dd       	rcall	.-1136   	; 0xc2e <vPortYield>
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <xQueueGenericSend+0x66>
    10a0:	81 11       	cpse	r24, r1
    10a2:	c5 dd       	rcall	.-1142   	; 0xc2e <vPortYield>
    10a4:	0f 90       	pop	r0
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	4c c0       	rjmp	.+152    	; 0x1144 <xQueueGenericSend+0x106>
    10ac:	8e 81       	ldd	r24, Y+6	; 0x06
    10ae:	9f 81       	ldd	r25, Y+7	; 0x07
    10b0:	a8 85       	ldd	r26, Y+8	; 0x08
    10b2:	b9 85       	ldd	r27, Y+9	; 0x09
    10b4:	89 2b       	or	r24, r25
    10b6:	8a 2b       	or	r24, r26
    10b8:	8b 2b       	or	r24, r27
    10ba:	21 f4       	brne	.+8      	; 0x10c4 <xQueueGenericSend+0x86>
    10bc:	0f 90       	pop	r0
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	40 c0       	rjmp	.+128    	; 0x1144 <xQueueGenericSend+0x106>
    10c4:	11 11       	cpse	r17, r1
    10c6:	05 c0       	rjmp	.+10     	; 0x10d2 <xQueueGenericSend+0x94>
    10c8:	ce 01       	movw	r24, r28
    10ca:	01 96       	adiw	r24, 0x01	; 1
    10cc:	0e 94 84 14 	call	0x2908	; 0x2908 <vTaskInternalSetTimeOutState>
    10d0:	11 e0       	ldi	r17, 0x01	; 1
    10d2:	0f 90       	pop	r0
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	15 d7       	rcall	.+3626   	; 0x1f02 <vTaskSuspendAll>
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	0f 92       	push	r0
    10de:	f7 01       	movw	r30, r14
    10e0:	81 a1       	ldd	r24, Z+33	; 0x21
    10e2:	8f 3f       	cpi	r24, 0xFF	; 255
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <xQueueGenericSend+0xaa>
    10e6:	11 a2       	std	Z+33, r1	; 0x21
    10e8:	f7 01       	movw	r30, r14
    10ea:	82 a1       	ldd	r24, Z+34	; 0x22
    10ec:	8f 3f       	cpi	r24, 0xFF	; 255
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <xQueueGenericSend+0xb4>
    10f0:	12 a2       	std	Z+34, r1	; 0x22
    10f2:	0f 90       	pop	r0
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	be 01       	movw	r22, r28
    10f8:	6a 5f       	subi	r22, 0xFA	; 250
    10fa:	7f 4f       	sbci	r23, 0xFF	; 255
    10fc:	ce 01       	movw	r24, r28
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	0e 94 95 14 	call	0x292a	; 0x292a <xTaskCheckForTimeOut>
    1104:	81 11       	cpse	r24, r1
    1106:	19 c0       	rjmp	.+50     	; 0x113a <xQueueGenericSend+0xfc>
    1108:	c7 01       	movw	r24, r14
    110a:	66 de       	rcall	.-820    	; 0xdd8 <prvIsQueueFull>
    110c:	88 23       	and	r24, r24
    110e:	81 f0       	breq	.+32     	; 0x1130 <xQueueGenericSend+0xf2>
    1110:	4e 81       	ldd	r20, Y+6	; 0x06
    1112:	5f 81       	ldd	r21, Y+7	; 0x07
    1114:	68 85       	ldd	r22, Y+8	; 0x08
    1116:	79 85       	ldd	r23, Y+9	; 0x09
    1118:	c7 01       	movw	r24, r14
    111a:	08 96       	adiw	r24, 0x08	; 8
    111c:	0e 94 82 12 	call	0x2504	; 0x2504 <vTaskPlaceOnEventList>
    1120:	c7 01       	movw	r24, r14
    1122:	e1 de       	rcall	.-574    	; 0xee6 <prvUnlockQueue>
    1124:	0e 94 c1 10 	call	0x2182	; 0x2182 <xTaskResumeAll>
    1128:	81 11       	cpse	r24, r1
    112a:	a0 cf       	rjmp	.-192    	; 0x106c <xQueueGenericSend+0x2e>
    112c:	80 dd       	rcall	.-1280   	; 0xc2e <vPortYield>
    112e:	9e cf       	rjmp	.-196    	; 0x106c <xQueueGenericSend+0x2e>
    1130:	c7 01       	movw	r24, r14
    1132:	d9 de       	rcall	.-590    	; 0xee6 <prvUnlockQueue>
    1134:	0e 94 c1 10 	call	0x2182	; 0x2182 <xTaskResumeAll>
    1138:	99 cf       	rjmp	.-206    	; 0x106c <xQueueGenericSend+0x2e>
    113a:	c7 01       	movw	r24, r14
    113c:	d4 de       	rcall	.-600    	; 0xee6 <prvUnlockQueue>
    113e:	0e 94 c1 10 	call	0x2182	; 0x2182 <xTaskResumeAll>
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	29 96       	adiw	r28, 0x09	; 9
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	ff 90       	pop	r15
    115a:	ef 90       	pop	r14
    115c:	df 90       	pop	r13
    115e:	cf 90       	pop	r12
    1160:	08 95       	ret

00001162 <prvInitialiseMutex>:
    1162:	0f 93       	push	r16
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	69 f0       	breq	.+26     	; 0x1182 <prvInitialiseMutex+0x20>
    1168:	fc 01       	movw	r30, r24
    116a:	15 82       	std	Z+5, r1	; 0x05
    116c:	14 82       	std	Z+4, r1	; 0x04
    116e:	11 82       	std	Z+1, r1	; 0x01
    1170:	10 82       	st	Z, r1
    1172:	16 82       	std	Z+6, r1	; 0x06
    1174:	00 e0       	ldi	r16, 0x00	; 0
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	a9 01       	movw	r20, r18
    117c:	60 e0       	ldi	r22, 0x00	; 0
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	5e df       	rcall	.-324    	; 0x103e <xQueueGenericSend>
    1182:	0f 91       	pop	r16
    1184:	08 95       	ret

00001186 <xQueueCreateMutex>:
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	48 2f       	mov	r20, r24
    118c:	60 e0       	ldi	r22, 0x00	; 0
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	33 df       	rcall	.-410    	; 0xff8 <xQueueGenericCreate>
    1192:	ec 01       	movw	r28, r24
    1194:	e6 df       	rcall	.-52     	; 0x1162 <prvInitialiseMutex>
    1196:	ce 01       	movw	r24, r28
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	08 95       	ret

0000119e <xQueueGenericSendFromISR>:
    119e:	ef 92       	push	r14
    11a0:	ff 92       	push	r15
    11a2:	0f 93       	push	r16
    11a4:	1f 93       	push	r17
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	8a 01       	movw	r16, r20
    11ac:	fc 01       	movw	r30, r24
    11ae:	56 8d       	ldd	r21, Z+30	; 0x1e
    11b0:	37 8d       	ldd	r19, Z+31	; 0x1f
    11b2:	53 17       	cp	r21, r19
    11b4:	10 f0       	brcs	.+4      	; 0x11ba <xQueueGenericSendFromISR+0x1c>
    11b6:	22 30       	cpi	r18, 0x02	; 2
    11b8:	f9 f4       	brne	.+62     	; 0x11f8 <xQueueGenericSendFromISR+0x5a>
    11ba:	42 2f       	mov	r20, r18
    11bc:	78 01       	movw	r14, r16
    11be:	ec 01       	movw	r28, r24
    11c0:	1a a1       	ldd	r17, Y+34	; 0x22
    11c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11c4:	ce 01       	movw	r24, r28
    11c6:	16 de       	rcall	.-980    	; 0xdf4 <prvCopyDataToQueue>
    11c8:	1f 3f       	cpi	r17, 0xFF	; 255
    11ca:	81 f4       	brne	.+32     	; 0x11ec <xQueueGenericSendFromISR+0x4e>
    11cc:	8b 89       	ldd	r24, Y+19	; 0x13
    11ce:	88 23       	and	r24, r24
    11d0:	a9 f0       	breq	.+42     	; 0x11fc <xQueueGenericSendFromISR+0x5e>
    11d2:	ce 01       	movw	r24, r28
    11d4:	43 96       	adiw	r24, 0x13	; 19
    11d6:	0e 94 25 13 	call	0x264a	; 0x264a <xTaskRemoveFromEventList>
    11da:	88 23       	and	r24, r24
    11dc:	89 f0       	breq	.+34     	; 0x1200 <xQueueGenericSendFromISR+0x62>
    11de:	e1 14       	cp	r14, r1
    11e0:	f1 04       	cpc	r15, r1
    11e2:	81 f0       	breq	.+32     	; 0x1204 <xQueueGenericSendFromISR+0x66>
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	f7 01       	movw	r30, r14
    11e8:	80 83       	st	Z, r24
    11ea:	0d c0       	rjmp	.+26     	; 0x1206 <xQueueGenericSendFromISR+0x68>
    11ec:	ff 24       	eor	r15, r15
    11ee:	f3 94       	inc	r15
    11f0:	f1 0e       	add	r15, r17
    11f2:	fa a2       	std	Y+34, r15	; 0x22
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	07 c0       	rjmp	.+14     	; 0x1206 <xQueueGenericSendFromISR+0x68>
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	05 c0       	rjmp	.+10     	; 0x1206 <xQueueGenericSendFromISR+0x68>
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	03 c0       	rjmp	.+6      	; 0x1206 <xQueueGenericSendFromISR+0x68>
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	01 c0       	rjmp	.+2      	; 0x1206 <xQueueGenericSendFromISR+0x68>
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	ff 90       	pop	r15
    1210:	ef 90       	pop	r14
    1212:	08 95       	ret

00001214 <xQueueReceive>:
    1214:	cf 92       	push	r12
    1216:	df 92       	push	r13
    1218:	ef 92       	push	r14
    121a:	ff 92       	push	r15
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	29 97       	sbiw	r28, 0x09	; 9
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	8c 01       	movw	r16, r24
    1236:	6b 01       	movw	r12, r22
    1238:	2e 83       	std	Y+6, r18	; 0x06
    123a:	3f 83       	std	Y+7, r19	; 0x07
    123c:	48 87       	std	Y+8, r20	; 0x08
    123e:	59 87       	std	Y+9, r21	; 0x09
    1240:	e1 2c       	mov	r14, r1
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	0f 92       	push	r0
    1248:	f8 01       	movw	r30, r16
    124a:	f6 8c       	ldd	r15, Z+30	; 0x1e
    124c:	ff 20       	and	r15, r15
    124e:	99 f0       	breq	.+38     	; 0x1276 <xQueueReceive+0x62>
    1250:	b6 01       	movw	r22, r12
    1252:	c8 01       	movw	r24, r16
    1254:	2e de       	rcall	.-932    	; 0xeb2 <prvCopyDataFromQueue>
    1256:	fa 94       	dec	r15
    1258:	f8 01       	movw	r30, r16
    125a:	f6 8e       	std	Z+30, r15	; 0x1e
    125c:	80 85       	ldd	r24, Z+8	; 0x08
    125e:	88 23       	and	r24, r24
    1260:	31 f0       	breq	.+12     	; 0x126e <xQueueReceive+0x5a>
    1262:	c8 01       	movw	r24, r16
    1264:	08 96       	adiw	r24, 0x08	; 8
    1266:	0e 94 25 13 	call	0x264a	; 0x264a <xTaskRemoveFromEventList>
    126a:	81 11       	cpse	r24, r1
    126c:	e0 dc       	rcall	.-1600   	; 0xc2e <vPortYield>
    126e:	0f 90       	pop	r0
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	4f c0       	rjmp	.+158    	; 0x1314 <xQueueReceive+0x100>
    1276:	8e 81       	ldd	r24, Y+6	; 0x06
    1278:	9f 81       	ldd	r25, Y+7	; 0x07
    127a:	a8 85       	ldd	r26, Y+8	; 0x08
    127c:	b9 85       	ldd	r27, Y+9	; 0x09
    127e:	89 2b       	or	r24, r25
    1280:	8a 2b       	or	r24, r26
    1282:	8b 2b       	or	r24, r27
    1284:	21 f4       	brne	.+8      	; 0x128e <xQueueReceive+0x7a>
    1286:	0f 90       	pop	r0
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	43 c0       	rjmp	.+134    	; 0x1314 <xQueueReceive+0x100>
    128e:	e1 10       	cpse	r14, r1
    1290:	06 c0       	rjmp	.+12     	; 0x129e <xQueueReceive+0x8a>
    1292:	ce 01       	movw	r24, r28
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	0e 94 84 14 	call	0x2908	; 0x2908 <vTaskInternalSetTimeOutState>
    129a:	ee 24       	eor	r14, r14
    129c:	e3 94       	inc	r14
    129e:	0f 90       	pop	r0
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	2f d6       	rcall	.+3166   	; 0x1f02 <vTaskSuspendAll>
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	0f 92       	push	r0
    12aa:	f8 01       	movw	r30, r16
    12ac:	81 a1       	ldd	r24, Z+33	; 0x21
    12ae:	8f 3f       	cpi	r24, 0xFF	; 255
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <xQueueReceive+0xa0>
    12b2:	11 a2       	std	Z+33, r1	; 0x21
    12b4:	f8 01       	movw	r30, r16
    12b6:	82 a1       	ldd	r24, Z+34	; 0x22
    12b8:	8f 3f       	cpi	r24, 0xFF	; 255
    12ba:	09 f4       	brne	.+2      	; 0x12be <xQueueReceive+0xaa>
    12bc:	12 a2       	std	Z+34, r1	; 0x22
    12be:	0f 90       	pop	r0
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	be 01       	movw	r22, r28
    12c4:	6a 5f       	subi	r22, 0xFA	; 250
    12c6:	7f 4f       	sbci	r23, 0xFF	; 255
    12c8:	ce 01       	movw	r24, r28
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	0e 94 95 14 	call	0x292a	; 0x292a <xTaskCheckForTimeOut>
    12d0:	81 11       	cpse	r24, r1
    12d2:	17 c0       	rjmp	.+46     	; 0x1302 <xQueueReceive+0xee>
    12d4:	c8 01       	movw	r24, r16
    12d6:	73 dd       	rcall	.-1306   	; 0xdbe <prvIsQueueEmpty>
    12d8:	88 23       	and	r24, r24
    12da:	79 f0       	breq	.+30     	; 0x12fa <xQueueReceive+0xe6>
    12dc:	4e 81       	ldd	r20, Y+6	; 0x06
    12de:	5f 81       	ldd	r21, Y+7	; 0x07
    12e0:	68 85       	ldd	r22, Y+8	; 0x08
    12e2:	79 85       	ldd	r23, Y+9	; 0x09
    12e4:	c8 01       	movw	r24, r16
    12e6:	43 96       	adiw	r24, 0x13	; 19
    12e8:	0e 94 82 12 	call	0x2504	; 0x2504 <vTaskPlaceOnEventList>
    12ec:	c8 01       	movw	r24, r16
    12ee:	fb dd       	rcall	.-1034   	; 0xee6 <prvUnlockQueue>
    12f0:	48 d7       	rcall	.+3728   	; 0x2182 <xTaskResumeAll>
    12f2:	81 11       	cpse	r24, r1
    12f4:	a6 cf       	rjmp	.-180    	; 0x1242 <xQueueReceive+0x2e>
    12f6:	9b dc       	rcall	.-1738   	; 0xc2e <vPortYield>
    12f8:	a4 cf       	rjmp	.-184    	; 0x1242 <xQueueReceive+0x2e>
    12fa:	c8 01       	movw	r24, r16
    12fc:	f4 dd       	rcall	.-1048   	; 0xee6 <prvUnlockQueue>
    12fe:	41 d7       	rcall	.+3714   	; 0x2182 <xTaskResumeAll>
    1300:	a0 cf       	rjmp	.-192    	; 0x1242 <xQueueReceive+0x2e>
    1302:	c8 01       	movw	r24, r16
    1304:	f0 dd       	rcall	.-1056   	; 0xee6 <prvUnlockQueue>
    1306:	3d d7       	rcall	.+3706   	; 0x2182 <xTaskResumeAll>
    1308:	c8 01       	movw	r24, r16
    130a:	59 dd       	rcall	.-1358   	; 0xdbe <prvIsQueueEmpty>
    130c:	88 23       	and	r24, r24
    130e:	09 f4       	brne	.+2      	; 0x1312 <xQueueReceive+0xfe>
    1310:	98 cf       	rjmp	.-208    	; 0x1242 <xQueueReceive+0x2e>
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	29 96       	adiw	r28, 0x09	; 9
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	1f 91       	pop	r17
    1326:	0f 91       	pop	r16
    1328:	ff 90       	pop	r15
    132a:	ef 90       	pop	r14
    132c:	df 90       	pop	r13
    132e:	cf 90       	pop	r12
    1330:	08 95       	ret

00001332 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	0f 92       	push	r0
    133e:	89 a1       	ldd	r24, Y+33	; 0x21
    1340:	8f 3f       	cpi	r24, 0xFF	; 255
    1342:	09 f4       	brne	.+2      	; 0x1346 <vQueueWaitForMessageRestricted+0x14>
    1344:	19 a2       	std	Y+33, r1	; 0x21
    1346:	8a a1       	ldd	r24, Y+34	; 0x22
    1348:	8f 3f       	cpi	r24, 0xFF	; 255
    134a:	09 f4       	brne	.+2      	; 0x134e <vQueueWaitForMessageRestricted+0x1c>
    134c:	1a a2       	std	Y+34, r1	; 0x22
    134e:	0f 90       	pop	r0
    1350:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1352:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1354:	81 11       	cpse	r24, r1
    1356:	04 c0       	rjmp	.+8      	; 0x1360 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1358:	ce 01       	movw	r24, r28
    135a:	43 96       	adiw	r24, 0x13	; 19
    135c:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1360:	ce 01       	movw	r24, r28
    1362:	c1 dd       	rcall	.-1150   	; 0xee6 <prvUnlockQueue>
    }
    1364:	df 91       	pop	r29
    1366:	cf 91       	pop	r28
    1368:	08 95       	ret

0000136a <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    136a:	fc 01       	movw	r30, r24
    136c:	44 81       	ldd	r20, Z+4	; 0x04
    136e:	55 81       	ldd	r21, Z+5	; 0x05
    1370:	22 81       	ldd	r18, Z+2	; 0x02
    1372:	33 81       	ldd	r19, Z+3	; 0x03
    1374:	24 0f       	add	r18, r20
    1376:	35 1f       	adc	r19, r21
    1378:	80 81       	ld	r24, Z
    137a:	91 81       	ldd	r25, Z+1	; 0x01
    137c:	b9 01       	movw	r22, r18
    137e:	68 1b       	sub	r22, r24
    1380:	79 0b       	sbc	r23, r25
    1382:	cb 01       	movw	r24, r22
    1384:	64 17       	cp	r22, r20
    1386:	75 07       	cpc	r23, r21
    1388:	10 f0       	brcs	.+4      	; 0x138e <prvBytesInBuffer+0x24>
    138a:	84 1b       	sub	r24, r20
    138c:	95 0b       	sbc	r25, r21
    138e:	08 95       	ret

00001390 <prvInitialiseNewStreamBuffer>:
    1390:	0f 93       	push	r16
    1392:	fc 01       	movw	r30, r24
    1394:	8f e0       	ldi	r24, 0x0F	; 15
    1396:	df 01       	movw	r26, r30
    1398:	1d 92       	st	X+, r1
    139a:	8a 95       	dec	r24
    139c:	e9 f7       	brne	.-6      	; 0x1398 <prvInitialiseNewStreamBuffer+0x8>
    139e:	75 87       	std	Z+13, r23	; 0x0d
    13a0:	64 87       	std	Z+12, r22	; 0x0c
    13a2:	55 83       	std	Z+5, r21	; 0x05
    13a4:	44 83       	std	Z+4, r20	; 0x04
    13a6:	37 83       	std	Z+7, r19	; 0x07
    13a8:	26 83       	std	Z+6, r18	; 0x06
    13aa:	06 87       	std	Z+14, r16	; 0x0e
    13ac:	0f 91       	pop	r16
    13ae:	08 95       	ret

000013b0 <prvWriteBytesToBuffer>:
    13b0:	af 92       	push	r10
    13b2:	bf 92       	push	r11
    13b4:	cf 92       	push	r12
    13b6:	df 92       	push	r13
    13b8:	ef 92       	push	r14
    13ba:	ff 92       	push	r15
    13bc:	0f 93       	push	r16
    13be:	1f 93       	push	r17
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	6c 01       	movw	r12, r24
    13c6:	5b 01       	movw	r10, r22
    13c8:	7a 01       	movw	r14, r20
    13ca:	fc 01       	movw	r30, r24
    13cc:	c2 81       	ldd	r28, Z+2	; 0x02
    13ce:	d3 81       	ldd	r29, Z+3	; 0x03
    13d0:	04 81       	ldd	r16, Z+4	; 0x04
    13d2:	15 81       	ldd	r17, Z+5	; 0x05
    13d4:	0c 1b       	sub	r16, r28
    13d6:	1d 0b       	sbc	r17, r29
    13d8:	40 17       	cp	r20, r16
    13da:	51 07       	cpc	r21, r17
    13dc:	08 f4       	brcc	.+2      	; 0x13e0 <prvWriteBytesToBuffer+0x30>
    13de:	8a 01       	movw	r16, r20
    13e0:	f6 01       	movw	r30, r12
    13e2:	84 85       	ldd	r24, Z+12	; 0x0c
    13e4:	95 85       	ldd	r25, Z+13	; 0x0d
    13e6:	a8 01       	movw	r20, r16
    13e8:	b5 01       	movw	r22, r10
    13ea:	8c 0f       	add	r24, r28
    13ec:	9d 1f       	adc	r25, r29
    13ee:	0e 94 17 33 	call	0x662e	; 0x662e <memcpy>
    13f2:	0e 15       	cp	r16, r14
    13f4:	1f 05       	cpc	r17, r15
    13f6:	58 f4       	brcc	.+22     	; 0x140e <prvWriteBytesToBuffer+0x5e>
    13f8:	a7 01       	movw	r20, r14
    13fa:	40 1b       	sub	r20, r16
    13fc:	51 0b       	sbc	r21, r17
    13fe:	b5 01       	movw	r22, r10
    1400:	60 0f       	add	r22, r16
    1402:	71 1f       	adc	r23, r17
    1404:	f6 01       	movw	r30, r12
    1406:	84 85       	ldd	r24, Z+12	; 0x0c
    1408:	95 85       	ldd	r25, Z+13	; 0x0d
    140a:	0e 94 17 33 	call	0x662e	; 0x662e <memcpy>
    140e:	ce 01       	movw	r24, r28
    1410:	8e 0d       	add	r24, r14
    1412:	9f 1d       	adc	r25, r15
    1414:	f6 01       	movw	r30, r12
    1416:	24 81       	ldd	r18, Z+4	; 0x04
    1418:	35 81       	ldd	r19, Z+5	; 0x05
    141a:	82 17       	cp	r24, r18
    141c:	93 07       	cpc	r25, r19
    141e:	10 f0       	brcs	.+4      	; 0x1424 <prvWriteBytesToBuffer+0x74>
    1420:	82 1b       	sub	r24, r18
    1422:	93 0b       	sbc	r25, r19
    1424:	f6 01       	movw	r30, r12
    1426:	93 83       	std	Z+3, r25	; 0x03
    1428:	82 83       	std	Z+2, r24	; 0x02
    142a:	c7 01       	movw	r24, r14
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	1f 91       	pop	r17
    1432:	0f 91       	pop	r16
    1434:	ff 90       	pop	r15
    1436:	ef 90       	pop	r14
    1438:	df 90       	pop	r13
    143a:	cf 90       	pop	r12
    143c:	bf 90       	pop	r11
    143e:	af 90       	pop	r10
    1440:	08 95       	ret

00001442 <prvWriteMessageToBuffer>:
    1442:	cf 92       	push	r12
    1444:	df 92       	push	r13
    1446:	ef 92       	push	r14
    1448:	ff 92       	push	r15
    144a:	0f 93       	push	r16
    144c:	1f 93       	push	r17
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	1f 92       	push	r1
    1454:	1f 92       	push	r1
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	7c 01       	movw	r14, r24
    145c:	6b 01       	movw	r12, r22
    145e:	5a 83       	std	Y+2, r21	; 0x02
    1460:	49 83       	std	Y+1, r20	; 0x01
    1462:	21 15       	cp	r18, r1
    1464:	31 05       	cpc	r19, r1
    1466:	c1 f0       	breq	.+48     	; 0x1498 <prvWriteMessageToBuffer+0x56>
    1468:	fc 01       	movw	r30, r24
    146a:	86 85       	ldd	r24, Z+14	; 0x0e
    146c:	80 fd       	sbrc	r24, 0
    146e:	08 c0       	rjmp	.+16     	; 0x1480 <prvWriteMessageToBuffer+0x3e>
    1470:	42 17       	cp	r20, r18
    1472:	53 07       	cpc	r21, r19
    1474:	08 f4       	brcc	.+2      	; 0x1478 <prvWriteMessageToBuffer+0x36>
    1476:	9a 01       	movw	r18, r20
    1478:	3a 83       	std	Y+2, r19	; 0x02
    147a:	29 83       	std	Y+1, r18	; 0x01
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	0f c0       	rjmp	.+30     	; 0x149e <prvWriteMessageToBuffer+0x5c>
    1480:	20 17       	cp	r18, r16
    1482:	31 07       	cpc	r19, r17
    1484:	58 f0       	brcs	.+22     	; 0x149c <prvWriteMessageToBuffer+0x5a>
    1486:	42 e0       	ldi	r20, 0x02	; 2
    1488:	50 e0       	ldi	r21, 0x00	; 0
    148a:	be 01       	movw	r22, r28
    148c:	6f 5f       	subi	r22, 0xFF	; 255
    148e:	7f 4f       	sbci	r23, 0xFF	; 255
    1490:	c7 01       	movw	r24, r14
    1492:	8e df       	rcall	.-228    	; 0x13b0 <prvWriteBytesToBuffer>
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	03 c0       	rjmp	.+6      	; 0x149e <prvWriteMessageToBuffer+0x5c>
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	01 c0       	rjmp	.+2      	; 0x149e <prvWriteMessageToBuffer+0x5c>
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	88 23       	and	r24, r24
    14a0:	31 f0       	breq	.+12     	; 0x14ae <prvWriteMessageToBuffer+0x6c>
    14a2:	49 81       	ldd	r20, Y+1	; 0x01
    14a4:	5a 81       	ldd	r21, Y+2	; 0x02
    14a6:	b6 01       	movw	r22, r12
    14a8:	c7 01       	movw	r24, r14
    14aa:	82 df       	rcall	.-252    	; 0x13b0 <prvWriteBytesToBuffer>
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <prvWriteMessageToBuffer+0x70>
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	1f 91       	pop	r17
    14bc:	0f 91       	pop	r16
    14be:	ff 90       	pop	r15
    14c0:	ef 90       	pop	r14
    14c2:	df 90       	pop	r13
    14c4:	cf 90       	pop	r12
    14c6:	08 95       	ret

000014c8 <prvReadBytesFromBuffer>:
    14c8:	af 92       	push	r10
    14ca:	bf 92       	push	r11
    14cc:	cf 92       	push	r12
    14ce:	df 92       	push	r13
    14d0:	ef 92       	push	r14
    14d2:	ff 92       	push	r15
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	7c 01       	movw	r14, r24
    14de:	5b 01       	movw	r10, r22
    14e0:	e9 01       	movw	r28, r18
    14e2:	42 17       	cp	r20, r18
    14e4:	53 07       	cpc	r21, r19
    14e6:	08 f4       	brcc	.+2      	; 0x14ea <prvReadBytesFromBuffer+0x22>
    14e8:	ea 01       	movw	r28, r20
    14ea:	20 97       	sbiw	r28, 0x00	; 0
    14ec:	81 f1       	breq	.+96     	; 0x154e <prvReadBytesFromBuffer+0x86>
    14ee:	f7 01       	movw	r30, r14
    14f0:	00 81       	ld	r16, Z
    14f2:	11 81       	ldd	r17, Z+1	; 0x01
    14f4:	84 81       	ldd	r24, Z+4	; 0x04
    14f6:	95 81       	ldd	r25, Z+5	; 0x05
    14f8:	80 1b       	sub	r24, r16
    14fa:	91 0b       	sbc	r25, r17
    14fc:	6e 01       	movw	r12, r28
    14fe:	8c 17       	cp	r24, r28
    1500:	9d 07       	cpc	r25, r29
    1502:	08 f4       	brcc	.+2      	; 0x1506 <prvReadBytesFromBuffer+0x3e>
    1504:	6c 01       	movw	r12, r24
    1506:	f7 01       	movw	r30, r14
    1508:	64 85       	ldd	r22, Z+12	; 0x0c
    150a:	75 85       	ldd	r23, Z+13	; 0x0d
    150c:	60 0f       	add	r22, r16
    150e:	71 1f       	adc	r23, r17
    1510:	a6 01       	movw	r20, r12
    1512:	c5 01       	movw	r24, r10
    1514:	0e 94 17 33 	call	0x662e	; 0x662e <memcpy>
    1518:	cc 16       	cp	r12, r28
    151a:	dd 06       	cpc	r13, r29
    151c:	58 f4       	brcc	.+22     	; 0x1534 <prvReadBytesFromBuffer+0x6c>
    151e:	ae 01       	movw	r20, r28
    1520:	4c 19       	sub	r20, r12
    1522:	5d 09       	sbc	r21, r13
    1524:	f7 01       	movw	r30, r14
    1526:	64 85       	ldd	r22, Z+12	; 0x0c
    1528:	75 85       	ldd	r23, Z+13	; 0x0d
    152a:	c5 01       	movw	r24, r10
    152c:	8c 0d       	add	r24, r12
    152e:	9d 1d       	adc	r25, r13
    1530:	0e 94 17 33 	call	0x662e	; 0x662e <memcpy>
    1534:	0c 0f       	add	r16, r28
    1536:	1d 1f       	adc	r17, r29
    1538:	f7 01       	movw	r30, r14
    153a:	84 81       	ldd	r24, Z+4	; 0x04
    153c:	95 81       	ldd	r25, Z+5	; 0x05
    153e:	08 17       	cp	r16, r24
    1540:	19 07       	cpc	r17, r25
    1542:	10 f0       	brcs	.+4      	; 0x1548 <prvReadBytesFromBuffer+0x80>
    1544:	08 1b       	sub	r16, r24
    1546:	19 0b       	sbc	r17, r25
    1548:	f7 01       	movw	r30, r14
    154a:	11 83       	std	Z+1, r17	; 0x01
    154c:	00 83       	st	Z, r16
    154e:	ce 01       	movw	r24, r28
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	1f 91       	pop	r17
    1556:	0f 91       	pop	r16
    1558:	ff 90       	pop	r15
    155a:	ef 90       	pop	r14
    155c:	df 90       	pop	r13
    155e:	cf 90       	pop	r12
    1560:	bf 90       	pop	r11
    1562:	af 90       	pop	r10
    1564:	08 95       	ret

00001566 <prvReadMessageFromBuffer>:
    1566:	6f 92       	push	r6
    1568:	7f 92       	push	r7
    156a:	8f 92       	push	r8
    156c:	9f 92       	push	r9
    156e:	af 92       	push	r10
    1570:	bf 92       	push	r11
    1572:	cf 92       	push	r12
    1574:	df 92       	push	r13
    1576:	ef 92       	push	r14
    1578:	ff 92       	push	r15
    157a:	0f 93       	push	r16
    157c:	1f 93       	push	r17
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	1f 92       	push	r1
    1584:	1f 92       	push	r1
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	6c 01       	movw	r12, r24
    158c:	4b 01       	movw	r8, r22
    158e:	5a 01       	movw	r10, r20
    1590:	79 01       	movw	r14, r18
    1592:	01 15       	cp	r16, r1
    1594:	11 05       	cpc	r17, r1
    1596:	b1 f0       	breq	.+44     	; 0x15c4 <prvReadMessageFromBuffer+0x5e>
    1598:	fc 01       	movw	r30, r24
    159a:	60 80       	ld	r6, Z
    159c:	71 80       	ldd	r7, Z+1	; 0x01
    159e:	a8 01       	movw	r20, r16
    15a0:	be 01       	movw	r22, r28
    15a2:	6f 5f       	subi	r22, 0xFF	; 255
    15a4:	7f 4f       	sbci	r23, 0xFF	; 255
    15a6:	90 df       	rcall	.-224    	; 0x14c8 <prvReadBytesFromBuffer>
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	9a 81       	ldd	r25, Y+2	; 0x02
    15ac:	e0 1a       	sub	r14, r16
    15ae:	f1 0a       	sbc	r15, r17
    15b0:	a8 16       	cp	r10, r24
    15b2:	b9 06       	cpc	r11, r25
    15b4:	30 f4       	brcc	.+12     	; 0x15c2 <prvReadMessageFromBuffer+0x5c>
    15b6:	f6 01       	movw	r30, r12
    15b8:	71 82       	std	Z+1, r7	; 0x01
    15ba:	60 82       	st	Z, r6
    15bc:	a1 2c       	mov	r10, r1
    15be:	b1 2c       	mov	r11, r1
    15c0:	01 c0       	rjmp	.+2      	; 0x15c4 <prvReadMessageFromBuffer+0x5e>
    15c2:	5c 01       	movw	r10, r24
    15c4:	97 01       	movw	r18, r14
    15c6:	a5 01       	movw	r20, r10
    15c8:	b4 01       	movw	r22, r8
    15ca:	c6 01       	movw	r24, r12
    15cc:	7d df       	rcall	.-262    	; 0x14c8 <prvReadBytesFromBuffer>
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	1f 91       	pop	r17
    15d8:	0f 91       	pop	r16
    15da:	ff 90       	pop	r15
    15dc:	ef 90       	pop	r14
    15de:	df 90       	pop	r13
    15e0:	cf 90       	pop	r12
    15e2:	bf 90       	pop	r11
    15e4:	af 90       	pop	r10
    15e6:	9f 90       	pop	r9
    15e8:	8f 90       	pop	r8
    15ea:	7f 90       	pop	r7
    15ec:	6f 90       	pop	r6
    15ee:	08 95       	ret

000015f0 <xStreamBufferGenericCreate>:
    15f0:	cf 92       	push	r12
    15f2:	df 92       	push	r13
    15f4:	ef 92       	push	r14
    15f6:	ff 92       	push	r15
    15f8:	0f 93       	push	r16
    15fa:	cf 93       	push	r28
    15fc:	df 93       	push	r29
    15fe:	ec 01       	movw	r28, r24
    1600:	6b 01       	movw	r12, r22
    1602:	41 30       	cpi	r20, 0x01	; 1
    1604:	11 f4       	brne	.+4      	; 0x160a <xStreamBufferGenericCreate+0x1a>
    1606:	01 e0       	ldi	r16, 0x01	; 1
    1608:	01 c0       	rjmp	.+2      	; 0x160c <xStreamBufferGenericCreate+0x1c>
    160a:	00 e0       	ldi	r16, 0x00	; 0
    160c:	c1 14       	cp	r12, r1
    160e:	d1 04       	cpc	r13, r1
    1610:	19 f4       	brne	.+6      	; 0x1618 <xStreamBufferGenericCreate+0x28>
    1612:	cc 24       	eor	r12, r12
    1614:	c3 94       	inc	r12
    1616:	d1 2c       	mov	r13, r1
    1618:	ce 01       	movw	r24, r28
    161a:	40 96       	adiw	r24, 0x10	; 16
    161c:	c8 17       	cp	r28, r24
    161e:	d9 07       	cpc	r29, r25
    1620:	20 f4       	brcc	.+8      	; 0x162a <xStreamBufferGenericCreate+0x3a>
    1622:	21 96       	adiw	r28, 0x01	; 1
    1624:	50 d9       	rcall	.-3424   	; 0x8c6 <pvPortMalloc>
    1626:	7c 01       	movw	r14, r24
    1628:	02 c0       	rjmp	.+4      	; 0x162e <xStreamBufferGenericCreate+0x3e>
    162a:	e1 2c       	mov	r14, r1
    162c:	f1 2c       	mov	r15, r1
    162e:	e1 14       	cp	r14, r1
    1630:	f1 04       	cpc	r15, r1
    1632:	39 f0       	breq	.+14     	; 0x1642 <xStreamBufferGenericCreate+0x52>
    1634:	96 01       	movw	r18, r12
    1636:	ae 01       	movw	r20, r28
    1638:	b7 01       	movw	r22, r14
    163a:	61 5f       	subi	r22, 0xF1	; 241
    163c:	7f 4f       	sbci	r23, 0xFF	; 255
    163e:	c7 01       	movw	r24, r14
    1640:	a7 de       	rcall	.-690    	; 0x1390 <prvInitialiseNewStreamBuffer>
    1642:	c7 01       	movw	r24, r14
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	0f 91       	pop	r16
    164a:	ff 90       	pop	r15
    164c:	ef 90       	pop	r14
    164e:	df 90       	pop	r13
    1650:	cf 90       	pop	r12
    1652:	08 95       	ret

00001654 <xStreamBufferReset>:
    1654:	0f 93       	push	r16
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	0f 92       	push	r0
    165c:	fc 01       	movw	r30, r24
    165e:	20 85       	ldd	r18, Z+8	; 0x08
    1660:	31 85       	ldd	r19, Z+9	; 0x09
    1662:	23 2b       	or	r18, r19
    1664:	71 f4       	brne	.+28     	; 0x1682 <xStreamBufferReset+0x2e>
    1666:	22 85       	ldd	r18, Z+10	; 0x0a
    1668:	33 85       	ldd	r19, Z+11	; 0x0b
    166a:	23 2b       	or	r18, r19
    166c:	61 f4       	brne	.+24     	; 0x1686 <xStreamBufferReset+0x32>
    166e:	26 81       	ldd	r18, Z+6	; 0x06
    1670:	37 81       	ldd	r19, Z+7	; 0x07
    1672:	44 81       	ldd	r20, Z+4	; 0x04
    1674:	55 81       	ldd	r21, Z+5	; 0x05
    1676:	64 85       	ldd	r22, Z+12	; 0x0c
    1678:	75 85       	ldd	r23, Z+13	; 0x0d
    167a:	06 85       	ldd	r16, Z+14	; 0x0e
    167c:	89 de       	rcall	.-750    	; 0x1390 <prvInitialiseNewStreamBuffer>
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	03 c0       	rjmp	.+6      	; 0x1688 <xStreamBufferReset+0x34>
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	01 c0       	rjmp	.+2      	; 0x1688 <xStreamBufferReset+0x34>
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	0f 90       	pop	r0
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	0f 91       	pop	r16
    168e:	08 95       	ret

00001690 <xStreamBufferSpacesAvailable>:
    1690:	fc 01       	movw	r30, r24
    1692:	24 81       	ldd	r18, Z+4	; 0x04
    1694:	35 81       	ldd	r19, Z+5	; 0x05
    1696:	80 81       	ld	r24, Z
    1698:	91 81       	ldd	r25, Z+1	; 0x01
    169a:	82 0f       	add	r24, r18
    169c:	93 1f       	adc	r25, r19
    169e:	42 81       	ldd	r20, Z+2	; 0x02
    16a0:	53 81       	ldd	r21, Z+3	; 0x03
    16a2:	84 1b       	sub	r24, r20
    16a4:	95 0b       	sbc	r25, r21
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	82 17       	cp	r24, r18
    16aa:	93 07       	cpc	r25, r19
    16ac:	10 f0       	brcs	.+4      	; 0x16b2 <xStreamBufferSpacesAvailable+0x22>
    16ae:	82 1b       	sub	r24, r18
    16b0:	93 0b       	sbc	r25, r19
    16b2:	08 95       	ret

000016b4 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    16b4:	2f 92       	push	r2
    16b6:	3f 92       	push	r3
    16b8:	4f 92       	push	r4
    16ba:	5f 92       	push	r5
    16bc:	6f 92       	push	r6
    16be:	7f 92       	push	r7
    16c0:	8f 92       	push	r8
    16c2:	9f 92       	push	r9
    16c4:	af 92       	push	r10
    16c6:	bf 92       	push	r11
    16c8:	cf 92       	push	r12
    16ca:	df 92       	push	r13
    16cc:	ef 92       	push	r14
    16ce:	ff 92       	push	r15
    16d0:	0f 93       	push	r16
    16d2:	1f 93       	push	r17
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	2b 97       	sbiw	r28, 0x0b	; 11
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	4c 01       	movw	r8, r24
    16ea:	7b 87       	std	Y+11, r23	; 0x0b
    16ec:	6a 87       	std	Y+10, r22	; 0x0a
    16ee:	1a 01       	movw	r2, r20
    16f0:	0e 83       	std	Y+6, r16	; 0x06
    16f2:	1f 83       	std	Y+7, r17	; 0x07
    16f4:	28 87       	std	Y+8, r18	; 0x08
    16f6:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    16f8:	fc 01       	movw	r30, r24
    16fa:	84 81       	ldd	r24, Z+4	; 0x04
    16fc:	95 81       	ldd	r25, Z+5	; 0x05
    16fe:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1700:	26 85       	ldd	r18, Z+14	; 0x0e
    1702:	20 ff       	sbrs	r18, 0
    1704:	0c c0       	rjmp	.+24     	; 0x171e <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1706:	2a 01       	movw	r4, r20
    1708:	f2 e0       	ldi	r31, 0x02	; 2
    170a:	4f 0e       	add	r4, r31
    170c:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    170e:	84 15       	cp	r24, r4
    1710:	95 05       	cpc	r25, r5
    1712:	58 f4       	brcc	.+22     	; 0x172a <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1714:	1e 82       	std	Y+6, r1	; 0x06
    1716:	1f 82       	std	Y+7, r1	; 0x07
    1718:	18 86       	std	Y+8, r1	; 0x08
    171a:	19 86       	std	Y+9, r1	; 0x09
    171c:	06 c0       	rjmp	.+12     	; 0x172a <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    171e:	84 17       	cp	r24, r20
    1720:	95 07       	cpc	r25, r21
    1722:	10 f0       	brcs	.+4      	; 0x1728 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1724:	2a 01       	movw	r4, r20
    1726:	01 c0       	rjmp	.+2      	; 0x172a <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1728:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    172a:	8e 81       	ldd	r24, Y+6	; 0x06
    172c:	9f 81       	ldd	r25, Y+7	; 0x07
    172e:	a8 85       	ldd	r26, Y+8	; 0x08
    1730:	b9 85       	ldd	r27, Y+9	; 0x09
    1732:	89 2b       	or	r24, r25
    1734:	8a 2b       	or	r24, r26
    1736:	8b 2b       	or	r24, r27
    1738:	09 f4       	brne	.+2      	; 0x173c <xStreamBufferSend+0x88>
    173a:	38 c0       	rjmp	.+112    	; 0x17ac <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    173c:	ce 01       	movw	r24, r28
    173e:	01 96       	adiw	r24, 0x01	; 1
    1740:	0e 94 6e 14 	call	0x28dc	; 0x28dc <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    174a:	c4 01       	movw	r24, r8
    174c:	a1 df       	rcall	.-190    	; 0x1690 <xStreamBufferSpacesAvailable>
    174e:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1750:	84 15       	cp	r24, r4
    1752:	95 05       	cpc	r25, r5
    1754:	40 f5       	brcc	.+80     	; 0x17a6 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 57 18 	call	0x30ae	; 0x30ae <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1760:	0e 94 ff 14 	call	0x29fe	; 0x29fe <xTaskGetCurrentTaskHandle>
    1764:	f4 01       	movw	r30, r8
    1766:	93 87       	std	Z+11, r25	; 0x0b
    1768:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    176a:	0f 90       	pop	r0
    176c:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    176e:	ae 80       	ldd	r10, Y+6	; 0x06
    1770:	bf 80       	ldd	r11, Y+7	; 0x07
    1772:	c8 84       	ldd	r12, Y+8	; 0x08
    1774:	d9 84       	ldd	r13, Y+9	; 0x09
    1776:	e1 2c       	mov	r14, r1
    1778:	f1 2c       	mov	r15, r1
    177a:	00 e0       	ldi	r16, 0x00	; 0
    177c:	10 e0       	ldi	r17, 0x00	; 0
    177e:	98 01       	movw	r18, r16
    1780:	40 e0       	ldi	r20, 0x00	; 0
    1782:	50 e0       	ldi	r21, 0x00	; 0
    1784:	ba 01       	movw	r22, r20
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    178c:	f4 01       	movw	r30, r8
    178e:	13 86       	std	Z+11, r1	; 0x0b
    1790:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1792:	be 01       	movw	r22, r28
    1794:	6a 5f       	subi	r22, 0xFA	; 250
    1796:	7f 4f       	sbci	r23, 0xFF	; 255
    1798:	ce 01       	movw	r24, r28
    179a:	01 96       	adiw	r24, 0x01	; 1
    179c:	0e 94 95 14 	call	0x292a	; 0x292a <xTaskCheckForTimeOut>
    17a0:	88 23       	and	r24, r24
    17a2:	81 f2       	breq	.-96     	; 0x1744 <xStreamBufferSend+0x90>
    17a4:	05 c0       	rjmp	.+10     	; 0x17b0 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    17a6:	0f 90       	pop	r0
    17a8:	0f be       	out	0x3f, r0	; 63
                    break;
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    17ac:	61 2c       	mov	r6, r1
    17ae:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    17b0:	61 14       	cp	r6, r1
    17b2:	71 04       	cpc	r7, r1
    17b4:	19 f4       	brne	.+6      	; 0x17bc <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    17b6:	c4 01       	movw	r24, r8
    17b8:	6b df       	rcall	.-298    	; 0x1690 <xStreamBufferSpacesAvailable>
    17ba:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    17bc:	82 01       	movw	r16, r4
    17be:	93 01       	movw	r18, r6
    17c0:	a1 01       	movw	r20, r2
    17c2:	6a 85       	ldd	r22, Y+10	; 0x0a
    17c4:	7b 85       	ldd	r23, Y+11	; 0x0b
    17c6:	c4 01       	movw	r24, r8
    17c8:	3c de       	rcall	.-904    	; 0x1442 <prvWriteMessageToBuffer>
    17ca:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    17cc:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    17ce:	e9 f0       	breq	.+58     	; 0x180a <xStreamBufferSend+0x156>
    17d0:	c4 01       	movw	r24, r8
    17d2:	cb dd       	rcall	.-1130   	; 0x136a <prvBytesInBuffer>
    17d4:	f4 01       	movw	r30, r8
    17d6:	26 81       	ldd	r18, Z+6	; 0x06
    17d8:	37 81       	ldd	r19, Z+7	; 0x07
    17da:	82 17       	cp	r24, r18
    17dc:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    17de:	a8 f0       	brcs	.+42     	; 0x180a <xStreamBufferSend+0x156>
    17e0:	90 d3       	rcall	.+1824   	; 0x1f02 <vTaskSuspendAll>
    17e2:	f4 01       	movw	r30, r8
    17e4:	80 85       	ldd	r24, Z+8	; 0x08
    17e6:	91 85       	ldd	r25, Z+9	; 0x09
    17e8:	89 2b       	or	r24, r25
    17ea:	71 f0       	breq	.+28     	; 0x1808 <xStreamBufferSend+0x154>
    17ec:	80 85       	ldd	r24, Z+8	; 0x08
    17ee:	91 85       	ldd	r25, Z+9	; 0x09
    17f0:	e1 2c       	mov	r14, r1
    17f2:	f1 2c       	mov	r15, r1
    17f4:	00 e0       	ldi	r16, 0x00	; 0
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	a9 01       	movw	r20, r18
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <xTaskGenericNotify>
    1802:	f4 01       	movw	r30, r8
    1804:	11 86       	std	Z+9, r1	; 0x09
    1806:	10 86       	std	Z+8, r1	; 0x08
    1808:	bc d4       	rcall	.+2424   	; 0x2182 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    180a:	c6 01       	movw	r24, r12
    180c:	2b 96       	adiw	r28, 0x0b	; 11
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	ff 90       	pop	r15
    1822:	ef 90       	pop	r14
    1824:	df 90       	pop	r13
    1826:	cf 90       	pop	r12
    1828:	bf 90       	pop	r11
    182a:	af 90       	pop	r10
    182c:	9f 90       	pop	r9
    182e:	8f 90       	pop	r8
    1830:	7f 90       	pop	r7
    1832:	6f 90       	pop	r6
    1834:	5f 90       	pop	r5
    1836:	4f 90       	pop	r4
    1838:	3f 90       	pop	r3
    183a:	2f 90       	pop	r2
    183c:	08 95       	ret

0000183e <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    183e:	af 92       	push	r10
    1840:	bf 92       	push	r11
    1842:	cf 92       	push	r12
    1844:	df 92       	push	r13
    1846:	ef 92       	push	r14
    1848:	ff 92       	push	r15
    184a:	0f 93       	push	r16
    184c:	1f 93       	push	r17
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	ec 01       	movw	r28, r24
    1854:	7b 01       	movw	r14, r22
    1856:	5a 01       	movw	r10, r20
    1858:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    185a:	8e 85       	ldd	r24, Y+14	; 0x0e
    185c:	80 ff       	sbrs	r24, 0
    185e:	04 c0       	rjmp	.+8      	; 0x1868 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1860:	8a 01       	movw	r16, r20
    1862:	0e 5f       	subi	r16, 0xFE	; 254
    1864:	1f 4f       	sbci	r17, 0xFF	; 255
    1866:	01 c0       	rjmp	.+2      	; 0x186a <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1868:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    186a:	ce 01       	movw	r24, r28
    186c:	11 df       	rcall	.-478    	; 0x1690 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    186e:	9c 01       	movw	r18, r24
    1870:	a5 01       	movw	r20, r10
    1872:	b7 01       	movw	r22, r14
    1874:	ce 01       	movw	r24, r28
    1876:	e5 dd       	rcall	.-1078   	; 0x1442 <prvWriteMessageToBuffer>
    1878:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    187a:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    187c:	c1 f0       	breq	.+48     	; 0x18ae <xStreamBufferSendFromISR+0x70>
    187e:	ce 01       	movw	r24, r28
    1880:	74 dd       	rcall	.-1304   	; 0x136a <prvBytesInBuffer>
    1882:	2e 81       	ldd	r18, Y+6	; 0x06
    1884:	3f 81       	ldd	r19, Y+7	; 0x07
    1886:	82 17       	cp	r24, r18
    1888:	93 07       	cpc	r25, r19
    188a:	88 f0       	brcs	.+34     	; 0x18ae <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    188c:	88 85       	ldd	r24, Y+8	; 0x08
    188e:	99 85       	ldd	r25, Y+9	; 0x09
    1890:	89 2b       	or	r24, r25
    1892:	69 f0       	breq	.+26     	; 0x18ae <xStreamBufferSendFromISR+0x70>
    1894:	88 85       	ldd	r24, Y+8	; 0x08
    1896:	99 85       	ldd	r25, Y+9	; 0x09
    1898:	e1 2c       	mov	r14, r1
    189a:	f1 2c       	mov	r15, r1
    189c:	00 e0       	ldi	r16, 0x00	; 0
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	a9 01       	movw	r20, r18
    18a4:	60 e0       	ldi	r22, 0x00	; 0
    18a6:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <xTaskGenericNotifyFromISR>
    18aa:	19 86       	std	Y+9, r1	; 0x09
    18ac:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    18ae:	c5 01       	movw	r24, r10
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	1f 91       	pop	r17
    18b6:	0f 91       	pop	r16
    18b8:	ff 90       	pop	r15
    18ba:	ef 90       	pop	r14
    18bc:	df 90       	pop	r13
    18be:	cf 90       	pop	r12
    18c0:	bf 90       	pop	r11
    18c2:	af 90       	pop	r10
    18c4:	08 95       	ret

000018c6 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    18c6:	4f 92       	push	r4
    18c8:	5f 92       	push	r5
    18ca:	6f 92       	push	r6
    18cc:	7f 92       	push	r7
    18ce:	8f 92       	push	r8
    18d0:	9f 92       	push	r9
    18d2:	af 92       	push	r10
    18d4:	bf 92       	push	r11
    18d6:	cf 92       	push	r12
    18d8:	df 92       	push	r13
    18da:	ef 92       	push	r14
    18dc:	ff 92       	push	r15
    18de:	0f 93       	push	r16
    18e0:	1f 93       	push	r17
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	ec 01       	movw	r28, r24
    18e8:	2b 01       	movw	r4, r22
    18ea:	3a 01       	movw	r6, r20
    18ec:	58 01       	movw	r10, r16
    18ee:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    18f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    18f2:	80 ff       	sbrs	r24, 0
    18f4:	05 c0       	rjmp	.+10     	; 0x1900 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    18f6:	68 94       	set
    18f8:	88 24       	eor	r8, r8
    18fa:	81 f8       	bld	r8, 1
    18fc:	91 2c       	mov	r9, r1
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1900:	81 2c       	mov	r8, r1
    1902:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1904:	a1 14       	cp	r10, r1
    1906:	b1 04       	cpc	r11, r1
    1908:	c1 04       	cpc	r12, r1
    190a:	d1 04       	cpc	r13, r1
    190c:	41 f1       	breq	.+80     	; 0x195e <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1914:	ce 01       	movw	r24, r28
    1916:	29 dd       	rcall	.-1454   	; 0x136a <prvBytesInBuffer>
    1918:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    191a:	88 16       	cp	r8, r24
    191c:	99 06       	cpc	r9, r25
    191e:	48 f0       	brcs	.+18     	; 0x1932 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	0e 94 57 18 	call	0x30ae	; 0x30ae <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    192a:	0e 94 ff 14 	call	0x29fe	; 0x29fe <xTaskGetCurrentTaskHandle>
    192e:	99 87       	std	Y+9, r25	; 0x09
    1930:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1932:	0f 90       	pop	r0
    1934:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1936:	8e 14       	cp	r8, r14
    1938:	9f 04       	cpc	r9, r15
    193a:	a0 f0       	brcs	.+40     	; 0x1964 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    193c:	e1 2c       	mov	r14, r1
    193e:	f1 2c       	mov	r15, r1
    1940:	00 e0       	ldi	r16, 0x00	; 0
    1942:	10 e0       	ldi	r17, 0x00	; 0
    1944:	98 01       	movw	r18, r16
    1946:	40 e0       	ldi	r20, 0x00	; 0
    1948:	50 e0       	ldi	r21, 0x00	; 0
    194a:	ba 01       	movw	r22, r20
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1952:	19 86       	std	Y+9, r1	; 0x09
    1954:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1956:	ce 01       	movw	r24, r28
    1958:	08 dd       	rcall	.-1520   	; 0x136a <prvBytesInBuffer>
    195a:	7c 01       	movw	r14, r24
    195c:	03 c0       	rjmp	.+6      	; 0x1964 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    195e:	ce 01       	movw	r24, r28
    1960:	04 dd       	rcall	.-1528   	; 0x136a <prvBytesInBuffer>
    1962:	7c 01       	movw	r14, r24
    1964:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1966:	9f 04       	cpc	r9, r15
    1968:	e8 f4       	brcc	.+58     	; 0x19a4 <xStreamBufferReceive+0xde>
    196a:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    196c:	97 01       	movw	r18, r14
    196e:	a3 01       	movw	r20, r6
    1970:	b2 01       	movw	r22, r4
    1972:	ce 01       	movw	r24, r28
    1974:	f8 dd       	rcall	.-1040   	; 0x1566 <prvReadMessageFromBuffer>
    1976:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1978:	89 2b       	or	r24, r25
    197a:	b1 f0       	breq	.+44     	; 0x19a8 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    197c:	c2 d2       	rcall	.+1412   	; 0x1f02 <vTaskSuspendAll>
    197e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1980:	9b 85       	ldd	r25, Y+11	; 0x0b
    1982:	89 2b       	or	r24, r25
    1984:	69 f0       	breq	.+26     	; 0x19a0 <xStreamBufferReceive+0xda>
    1986:	8a 85       	ldd	r24, Y+10	; 0x0a
    1988:	9b 85       	ldd	r25, Y+11	; 0x0b
    198a:	e1 2c       	mov	r14, r1
    198c:	f1 2c       	mov	r15, r1
    198e:	00 e0       	ldi	r16, 0x00	; 0
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	a9 01       	movw	r20, r18
    1996:	60 e0       	ldi	r22, 0x00	; 0
    1998:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <xTaskGenericNotify>
    199c:	1b 86       	std	Y+11, r1	; 0x0b
    199e:	1a 86       	std	Y+10, r1	; 0x0a
    19a0:	f0 d3       	rcall	.+2016   	; 0x2182 <xTaskResumeAll>
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <xStreamBufferReceive+0xe2>
    19a4:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    19a6:	d1 2c       	mov	r13, r1
    19a8:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	1f 91       	pop	r17
    19b0:	0f 91       	pop	r16
    19b2:	ff 90       	pop	r15
    19b4:	ef 90       	pop	r14
    19b6:	df 90       	pop	r13
    19b8:	cf 90       	pop	r12
    19ba:	bf 90       	pop	r11
    19bc:	af 90       	pop	r10
    19be:	9f 90       	pop	r9
    19c0:	8f 90       	pop	r8
    19c2:	7f 90       	pop	r7
    19c4:	6f 90       	pop	r6
    19c6:	5f 90       	pop	r5
    19c8:	4f 90       	pop	r4
    19ca:	08 95       	ret

000019cc <prvResetNextTaskUnblockTime>:
    19cc:	e0 91 d7 13 	lds	r30, 0x13D7	; 0x8013d7 <pxDelayedTaskList>
    19d0:	f0 91 d8 13 	lds	r31, 0x13D8	; 0x8013d8 <pxDelayedTaskList+0x1>
    19d4:	80 81       	ld	r24, Z
    19d6:	81 11       	cpse	r24, r1
    19d8:	0c c0       	rjmp	.+24     	; 0x19f2 <prvResetNextTaskUnblockTime+0x26>
    19da:	8f ef       	ldi	r24, 0xFF	; 255
    19dc:	9f ef       	ldi	r25, 0xFF	; 255
    19de:	dc 01       	movw	r26, r24
    19e0:	80 93 a1 13 	sts	0x13A1, r24	; 0x8013a1 <xNextTaskUnblockTime>
    19e4:	90 93 a2 13 	sts	0x13A2, r25	; 0x8013a2 <xNextTaskUnblockTime+0x1>
    19e8:	a0 93 a3 13 	sts	0x13A3, r26	; 0x8013a3 <xNextTaskUnblockTime+0x2>
    19ec:	b0 93 a4 13 	sts	0x13A4, r27	; 0x8013a4 <xNextTaskUnblockTime+0x3>
    19f0:	08 95       	ret
    19f2:	e0 91 d7 13 	lds	r30, 0x13D7	; 0x8013d7 <pxDelayedTaskList>
    19f6:	f0 91 d8 13 	lds	r31, 0x13D8	; 0x8013d8 <pxDelayedTaskList+0x1>
    19fa:	07 80       	ldd	r0, Z+7	; 0x07
    19fc:	f0 85       	ldd	r31, Z+8	; 0x08
    19fe:	e0 2d       	mov	r30, r0
    1a00:	80 81       	ld	r24, Z
    1a02:	91 81       	ldd	r25, Z+1	; 0x01
    1a04:	a2 81       	ldd	r26, Z+2	; 0x02
    1a06:	b3 81       	ldd	r27, Z+3	; 0x03
    1a08:	80 93 a1 13 	sts	0x13A1, r24	; 0x8013a1 <xNextTaskUnblockTime>
    1a0c:	90 93 a2 13 	sts	0x13A2, r25	; 0x8013a2 <xNextTaskUnblockTime+0x1>
    1a10:	a0 93 a3 13 	sts	0x13A3, r26	; 0x8013a3 <xNextTaskUnblockTime+0x2>
    1a14:	b0 93 a4 13 	sts	0x13A4, r27	; 0x8013a4 <xNextTaskUnblockTime+0x3>
    1a18:	08 95       	ret

00001a1a <prvDeleteTCB>:
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
    1a1e:	ec 01       	movw	r28, r24
    1a20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a24:	0e 94 0c 05 	call	0xa18	; 0xa18 <vPortFree>
    1a28:	ce 01       	movw	r24, r28
    1a2a:	0e 94 0c 05 	call	0xa18	; 0xa18 <vPortFree>
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	08 95       	ret

00001a34 <prvInitialiseNewTask>:
    1a34:	4f 92       	push	r4
    1a36:	5f 92       	push	r5
    1a38:	6f 92       	push	r6
    1a3a:	7f 92       	push	r7
    1a3c:	8f 92       	push	r8
    1a3e:	9f 92       	push	r9
    1a40:	af 92       	push	r10
    1a42:	bf 92       	push	r11
    1a44:	cf 92       	push	r12
    1a46:	df 92       	push	r13
    1a48:	ef 92       	push	r14
    1a4a:	ff 92       	push	r15
    1a4c:	0f 93       	push	r16
    1a4e:	cf 93       	push	r28
    1a50:	df 93       	push	r29
    1a52:	2c 01       	movw	r4, r24
    1a54:	5b 01       	movw	r10, r22
    1a56:	4a 01       	movw	r8, r20
    1a58:	39 01       	movw	r6, r18
    1a5a:	e6 01       	movw	r28, r12
    1a5c:	65 ea       	ldi	r22, 0xA5	; 165
    1a5e:	70 e0       	ldi	r23, 0x00	; 0
    1a60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a64:	0e 94 20 33 	call	0x6640	; 0x6640 <memset>
    1a68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a6c:	21 e0       	ldi	r18, 0x01	; 1
    1a6e:	82 1a       	sub	r8, r18
    1a70:	91 08       	sbc	r9, r1
    1a72:	88 0e       	add	r8, r24
    1a74:	99 1e       	adc	r9, r25
    1a76:	a1 14       	cp	r10, r1
    1a78:	b1 04       	cpc	r11, r1
    1a7a:	89 f4       	brne	.+34     	; 0x1a9e <prvInitialiseNewTask+0x6a>
    1a7c:	15 c0       	rjmp	.+42     	; 0x1aa8 <prvInitialiseNewTask+0x74>
    1a7e:	82 2f       	mov	r24, r18
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	f5 01       	movw	r30, r10
    1a84:	e8 0f       	add	r30, r24
    1a86:	f9 1f       	adc	r31, r25
    1a88:	30 81       	ld	r19, Z
    1a8a:	de 01       	movw	r26, r28
    1a8c:	a8 0f       	add	r26, r24
    1a8e:	b9 1f       	adc	r27, r25
    1a90:	5d 96       	adiw	r26, 0x1d	; 29
    1a92:	3c 93       	st	X, r19
    1a94:	80 81       	ld	r24, Z
    1a96:	88 23       	and	r24, r24
    1a98:	29 f0       	breq	.+10     	; 0x1aa4 <prvInitialiseNewTask+0x70>
    1a9a:	2f 5f       	subi	r18, 0xFF	; 255
    1a9c:	01 c0       	rjmp	.+2      	; 0x1aa0 <prvInitialiseNewTask+0x6c>
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	20 31       	cpi	r18, 0x10	; 16
    1aa2:	68 f3       	brcs	.-38     	; 0x1a7e <prvInitialiseNewTask+0x4a>
    1aa4:	1c a6       	std	Y+44, r1	; 0x2c
    1aa6:	01 c0       	rjmp	.+2      	; 0x1aaa <prvInitialiseNewTask+0x76>
    1aa8:	1d 8e       	std	Y+29, r1	; 0x1d
    1aaa:	0a 30       	cpi	r16, 0x0A	; 10
    1aac:	08 f0       	brcs	.+2      	; 0x1ab0 <prvInitialiseNewTask+0x7c>
    1aae:	09 e0       	ldi	r16, 0x09	; 9
    1ab0:	0a 8f       	std	Y+26, r16	; 0x1a
    1ab2:	0d a7       	std	Y+45, r16	; 0x2d
    1ab4:	1e a6       	std	Y+46, r1	; 0x2e
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	02 96       	adiw	r24, 0x02	; 2
    1aba:	0e 94 5a 05 	call	0xab4	; 0xab4 <vListInitialiseItem>
    1abe:	ce 01       	movw	r24, r28
    1ac0:	0e 96       	adiw	r24, 0x0e	; 14
    1ac2:	0e 94 5a 05 	call	0xab4	; 0xab4 <vListInitialiseItem>
    1ac6:	db 87       	std	Y+11, r29	; 0x0b
    1ac8:	ca 87       	std	Y+10, r28	; 0x0a
    1aca:	8a e0       	ldi	r24, 0x0A	; 10
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	a0 e0       	ldi	r26, 0x00	; 0
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	80 1b       	sub	r24, r16
    1ad4:	91 09       	sbc	r25, r1
    1ad6:	a1 09       	sbc	r26, r1
    1ad8:	b1 09       	sbc	r27, r1
    1ada:	8e 87       	std	Y+14, r24	; 0x0e
    1adc:	9f 87       	std	Y+15, r25	; 0x0f
    1ade:	a8 8b       	std	Y+16, r26	; 0x10
    1ae0:	b9 8b       	std	Y+17, r27	; 0x11
    1ae2:	df 8b       	std	Y+23, r29	; 0x17
    1ae4:	ce 8b       	std	Y+22, r28	; 0x16
    1ae6:	84 e0       	ldi	r24, 0x04	; 4
    1ae8:	fe 01       	movw	r30, r28
    1aea:	bf 96       	adiw	r30, 0x2f	; 47
    1aec:	df 01       	movw	r26, r30
    1aee:	1d 92       	st	X+, r1
    1af0:	8a 95       	dec	r24
    1af2:	e9 f7       	brne	.-6      	; 0x1aee <prvInitialiseNewTask+0xba>
    1af4:	1b aa       	std	Y+51, r1	; 0x33
    1af6:	a3 01       	movw	r20, r6
    1af8:	b2 01       	movw	r22, r4
    1afa:	c4 01       	movw	r24, r8
    1afc:	4f d8       	rcall	.-3938   	; 0xb9c <pxPortInitialiseStack>
    1afe:	99 83       	std	Y+1, r25	; 0x01
    1b00:	88 83       	st	Y, r24
    1b02:	e1 14       	cp	r14, r1
    1b04:	f1 04       	cpc	r15, r1
    1b06:	19 f0       	breq	.+6      	; 0x1b0e <prvInitialiseNewTask+0xda>
    1b08:	f7 01       	movw	r30, r14
    1b0a:	d1 83       	std	Z+1, r29	; 0x01
    1b0c:	c0 83       	st	Z, r28
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	0f 91       	pop	r16
    1b14:	ff 90       	pop	r15
    1b16:	ef 90       	pop	r14
    1b18:	df 90       	pop	r13
    1b1a:	cf 90       	pop	r12
    1b1c:	bf 90       	pop	r11
    1b1e:	af 90       	pop	r10
    1b20:	9f 90       	pop	r9
    1b22:	8f 90       	pop	r8
    1b24:	7f 90       	pop	r7
    1b26:	6f 90       	pop	r6
    1b28:	5f 90       	pop	r5
    1b2a:	4f 90       	pop	r4
    1b2c:	08 95       	ret

00001b2e <prvInitialiseTaskLists>:
    1b2e:	cf 93       	push	r28
    1b30:	c0 e0       	ldi	r28, 0x00	; 0
    1b32:	09 c0       	rjmp	.+18     	; 0x1b46 <prvInitialiseTaskLists+0x18>
    1b34:	2b e0       	ldi	r18, 0x0B	; 11
    1b36:	c2 9f       	mul	r28, r18
    1b38:	c0 01       	movw	r24, r0
    1b3a:	11 24       	eor	r1, r1
    1b3c:	81 51       	subi	r24, 0x11	; 17
    1b3e:	9c 4e       	sbci	r25, 0xEC	; 236
    1b40:	0e 94 49 05 	call	0xa92	; 0xa92 <vListInitialise>
    1b44:	cf 5f       	subi	r28, 0xFF	; 255
    1b46:	ca 30       	cpi	r28, 0x0A	; 10
    1b48:	a8 f3       	brcs	.-22     	; 0x1b34 <prvInitialiseTaskLists+0x6>
    1b4a:	84 ee       	ldi	r24, 0xE4	; 228
    1b4c:	93 e1       	ldi	r25, 0x13	; 19
    1b4e:	0e 94 49 05 	call	0xa92	; 0xa92 <vListInitialise>
    1b52:	89 ed       	ldi	r24, 0xD9	; 217
    1b54:	93 e1       	ldi	r25, 0x13	; 19
    1b56:	0e 94 49 05 	call	0xa92	; 0xa92 <vListInitialise>
    1b5a:	8a ec       	ldi	r24, 0xCA	; 202
    1b5c:	93 e1       	ldi	r25, 0x13	; 19
    1b5e:	0e 94 49 05 	call	0xa92	; 0xa92 <vListInitialise>
    1b62:	8f eb       	ldi	r24, 0xBF	; 191
    1b64:	93 e1       	ldi	r25, 0x13	; 19
    1b66:	0e 94 49 05 	call	0xa92	; 0xa92 <vListInitialise>
    1b6a:	83 eb       	ldi	r24, 0xB3	; 179
    1b6c:	93 e1       	ldi	r25, 0x13	; 19
    1b6e:	0e 94 49 05 	call	0xa92	; 0xa92 <vListInitialise>
    1b72:	84 ee       	ldi	r24, 0xE4	; 228
    1b74:	93 e1       	ldi	r25, 0x13	; 19
    1b76:	90 93 d8 13 	sts	0x13D8, r25	; 0x8013d8 <pxDelayedTaskList+0x1>
    1b7a:	80 93 d7 13 	sts	0x13D7, r24	; 0x8013d7 <pxDelayedTaskList>
    1b7e:	89 ed       	ldi	r24, 0xD9	; 217
    1b80:	93 e1       	ldi	r25, 0x13	; 19
    1b82:	90 93 d6 13 	sts	0x13D6, r25	; 0x8013d6 <pxOverflowDelayedTaskList+0x1>
    1b86:	80 93 d5 13 	sts	0x13D5, r24	; 0x8013d5 <pxOverflowDelayedTaskList>
    1b8a:	cf 91       	pop	r28
    1b8c:	08 95       	ret

00001b8e <prvAddNewTaskToReadyList>:
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	ec 01       	movw	r28, r24
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	0f 92       	push	r0
    1b9a:	80 91 b2 13 	lds	r24, 0x13B2	; 0x8013b2 <uxCurrentNumberOfTasks>
    1b9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ba0:	80 93 b2 13 	sts	0x13B2, r24	; 0x8013b2 <uxCurrentNumberOfTasks>
    1ba4:	80 91 5d 14 	lds	r24, 0x145D	; 0x80145d <pxCurrentTCB>
    1ba8:	90 91 5e 14 	lds	r25, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    1bac:	89 2b       	or	r24, r25
    1bae:	51 f4       	brne	.+20     	; 0x1bc4 <prvAddNewTaskToReadyList+0x36>
    1bb0:	d0 93 5e 14 	sts	0x145E, r29	; 0x80145e <pxCurrentTCB+0x1>
    1bb4:	c0 93 5d 14 	sts	0x145D, r28	; 0x80145d <pxCurrentTCB>
    1bb8:	80 91 b2 13 	lds	r24, 0x13B2	; 0x8013b2 <uxCurrentNumberOfTasks>
    1bbc:	81 30       	cpi	r24, 0x01	; 1
    1bbe:	91 f4       	brne	.+36     	; 0x1be4 <prvAddNewTaskToReadyList+0x56>
    1bc0:	b6 df       	rcall	.-148    	; 0x1b2e <prvInitialiseTaskLists>
    1bc2:	10 c0       	rjmp	.+32     	; 0x1be4 <prvAddNewTaskToReadyList+0x56>
    1bc4:	80 91 ac 13 	lds	r24, 0x13AC	; 0x8013ac <xSchedulerRunning>
    1bc8:	81 11       	cpse	r24, r1
    1bca:	0c c0       	rjmp	.+24     	; 0x1be4 <prvAddNewTaskToReadyList+0x56>
    1bcc:	e0 91 5d 14 	lds	r30, 0x145D	; 0x80145d <pxCurrentTCB>
    1bd0:	f0 91 5e 14 	lds	r31, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    1bd4:	92 8d       	ldd	r25, Z+26	; 0x1a
    1bd6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1bd8:	89 17       	cp	r24, r25
    1bda:	20 f0       	brcs	.+8      	; 0x1be4 <prvAddNewTaskToReadyList+0x56>
    1bdc:	d0 93 5e 14 	sts	0x145E, r29	; 0x80145e <pxCurrentTCB+0x1>
    1be0:	c0 93 5d 14 	sts	0x145D, r28	; 0x80145d <pxCurrentTCB>
    1be4:	80 91 a5 13 	lds	r24, 0x13A5	; 0x8013a5 <uxTaskNumber>
    1be8:	8f 5f       	subi	r24, 0xFF	; 255
    1bea:	80 93 a5 13 	sts	0x13A5, r24	; 0x8013a5 <uxTaskNumber>
    1bee:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1bf0:	80 91 ad 13 	lds	r24, 0x13AD	; 0x8013ad <uxTopReadyPriority>
    1bf4:	8e 17       	cp	r24, r30
    1bf6:	10 f4       	brcc	.+4      	; 0x1bfc <prvAddNewTaskToReadyList+0x6e>
    1bf8:	e0 93 ad 13 	sts	0x13AD, r30	; 0x8013ad <uxTopReadyPriority>
    1bfc:	8b e0       	ldi	r24, 0x0B	; 11
    1bfe:	8e 9f       	mul	r24, r30
    1c00:	f0 01       	movw	r30, r0
    1c02:	11 24       	eor	r1, r1
    1c04:	e1 51       	subi	r30, 0x11	; 17
    1c06:	fc 4e       	sbci	r31, 0xEC	; 236
    1c08:	01 80       	ldd	r0, Z+1	; 0x01
    1c0a:	f2 81       	ldd	r31, Z+2	; 0x02
    1c0c:	e0 2d       	mov	r30, r0
    1c0e:	ff 83       	std	Y+7, r31	; 0x07
    1c10:	ee 83       	std	Y+6, r30	; 0x06
    1c12:	26 81       	ldd	r18, Z+6	; 0x06
    1c14:	37 81       	ldd	r19, Z+7	; 0x07
    1c16:	39 87       	std	Y+9, r19	; 0x09
    1c18:	28 87       	std	Y+8, r18	; 0x08
    1c1a:	a6 81       	ldd	r26, Z+6	; 0x06
    1c1c:	b7 81       	ldd	r27, Z+7	; 0x07
    1c1e:	9e 01       	movw	r18, r28
    1c20:	2e 5f       	subi	r18, 0xFE	; 254
    1c22:	3f 4f       	sbci	r19, 0xFF	; 255
    1c24:	15 96       	adiw	r26, 0x05	; 5
    1c26:	3c 93       	st	X, r19
    1c28:	2e 93       	st	-X, r18
    1c2a:	14 97       	sbiw	r26, 0x04	; 4
    1c2c:	37 83       	std	Z+7, r19	; 0x07
    1c2e:	26 83       	std	Z+6, r18	; 0x06
    1c30:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1c32:	8e 9f       	mul	r24, r30
    1c34:	f0 01       	movw	r30, r0
    1c36:	11 24       	eor	r1, r1
    1c38:	e1 51       	subi	r30, 0x11	; 17
    1c3a:	fc 4e       	sbci	r31, 0xEC	; 236
    1c3c:	fd 87       	std	Y+13, r31	; 0x0d
    1c3e:	ec 87       	std	Y+12, r30	; 0x0c
    1c40:	80 81       	ld	r24, Z
    1c42:	8f 5f       	subi	r24, 0xFF	; 255
    1c44:	80 83       	st	Z, r24
    1c46:	0f 90       	pop	r0
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	80 91 ac 13 	lds	r24, 0x13AC	; 0x8013ac <xSchedulerRunning>
    1c4e:	88 23       	and	r24, r24
    1c50:	51 f0       	breq	.+20     	; 0x1c66 <prvAddNewTaskToReadyList+0xd8>
    1c52:	e0 91 5d 14 	lds	r30, 0x145D	; 0x80145d <pxCurrentTCB>
    1c56:	f0 91 5e 14 	lds	r31, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    1c5a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c5c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c5e:	98 17       	cp	r25, r24
    1c60:	10 f4       	brcc	.+4      	; 0x1c66 <prvAddNewTaskToReadyList+0xd8>
    1c62:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
    1c66:	df 91       	pop	r29
    1c68:	cf 91       	pop	r28
    1c6a:	08 95       	ret

00001c6c <prvCheckTasksWaitingTermination>:
    1c6c:	cf 93       	push	r28
    1c6e:	df 93       	push	r29
    1c70:	1b c0       	rjmp	.+54     	; 0x1ca8 <prvCheckTasksWaitingTermination+0x3c>
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	0f 92       	push	r0
    1c78:	e0 91 c6 13 	lds	r30, 0x13C6	; 0x8013c6 <xTasksWaitingTermination+0x7>
    1c7c:	f0 91 c7 13 	lds	r31, 0x13C7	; 0x8013c7 <xTasksWaitingTermination+0x8>
    1c80:	c0 85       	ldd	r28, Z+8	; 0x08
    1c82:	d1 85       	ldd	r29, Z+9	; 0x09
    1c84:	ce 01       	movw	r24, r28
    1c86:	02 96       	adiw	r24, 0x02	; 2
    1c88:	0e 94 9b 05 	call	0xb36	; 0xb36 <uxListRemove>
    1c8c:	80 91 b2 13 	lds	r24, 0x13B2	; 0x8013b2 <uxCurrentNumberOfTasks>
    1c90:	81 50       	subi	r24, 0x01	; 1
    1c92:	80 93 b2 13 	sts	0x13B2, r24	; 0x8013b2 <uxCurrentNumberOfTasks>
    1c96:	80 91 be 13 	lds	r24, 0x13BE	; 0x8013be <uxDeletedTasksWaitingCleanUp>
    1c9a:	81 50       	subi	r24, 0x01	; 1
    1c9c:	80 93 be 13 	sts	0x13BE, r24	; 0x8013be <uxDeletedTasksWaitingCleanUp>
    1ca0:	0f 90       	pop	r0
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	ce 01       	movw	r24, r28
    1ca6:	b9 de       	rcall	.-654    	; 0x1a1a <prvDeleteTCB>
    1ca8:	80 91 be 13 	lds	r24, 0x13BE	; 0x8013be <uxDeletedTasksWaitingCleanUp>
    1cac:	81 11       	cpse	r24, r1
    1cae:	e1 cf       	rjmp	.-62     	; 0x1c72 <prvCheckTasksWaitingTermination+0x6>
    1cb0:	df 91       	pop	r29
    1cb2:	cf 91       	pop	r28
    1cb4:	08 95       	ret

00001cb6 <prvAddCurrentTaskToDelayedList>:
    1cb6:	8f 92       	push	r8
    1cb8:	9f 92       	push	r9
    1cba:	af 92       	push	r10
    1cbc:	bf 92       	push	r11
    1cbe:	cf 92       	push	r12
    1cc0:	df 92       	push	r13
    1cc2:	ef 92       	push	r14
    1cc4:	ff 92       	push	r15
    1cc6:	cf 93       	push	r28
    1cc8:	df 93       	push	r29
    1cca:	6b 01       	movw	r12, r22
    1ccc:	7c 01       	movw	r14, r24
    1cce:	c4 2f       	mov	r28, r20
    1cd0:	80 90 ae 13 	lds	r8, 0x13AE	; 0x8013ae <xTickCount>
    1cd4:	90 90 af 13 	lds	r9, 0x13AF	; 0x8013af <xTickCount+0x1>
    1cd8:	a0 90 b0 13 	lds	r10, 0x13B0	; 0x8013b0 <xTickCount+0x2>
    1cdc:	b0 90 b1 13 	lds	r11, 0x13B1	; 0x8013b1 <xTickCount+0x3>
    1ce0:	80 91 5d 14 	lds	r24, 0x145D	; 0x80145d <pxCurrentTCB>
    1ce4:	90 91 5e 14 	lds	r25, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    1ce8:	02 96       	adiw	r24, 0x02	; 2
    1cea:	0e 94 9b 05 	call	0xb36	; 0xb36 <uxListRemove>
    1cee:	8f ef       	ldi	r24, 0xFF	; 255
    1cf0:	c8 16       	cp	r12, r24
    1cf2:	d8 06       	cpc	r13, r24
    1cf4:	e8 06       	cpc	r14, r24
    1cf6:	f8 06       	cpc	r15, r24
    1cf8:	b1 f5       	brne	.+108    	; 0x1d66 <prvAddCurrentTaskToDelayedList+0xb0>
    1cfa:	cc 23       	and	r28, r28
    1cfc:	a1 f1       	breq	.+104    	; 0x1d66 <prvAddCurrentTaskToDelayedList+0xb0>
    1cfe:	e3 eb       	ldi	r30, 0xB3	; 179
    1d00:	f3 e1       	ldi	r31, 0x13	; 19
    1d02:	a1 81       	ldd	r26, Z+1	; 0x01
    1d04:	b2 81       	ldd	r27, Z+2	; 0x02
    1d06:	c0 91 5d 14 	lds	r28, 0x145D	; 0x80145d <pxCurrentTCB>
    1d0a:	d0 91 5e 14 	lds	r29, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    1d0e:	bf 83       	std	Y+7, r27	; 0x07
    1d10:	ae 83       	std	Y+6, r26	; 0x06
    1d12:	c0 91 5d 14 	lds	r28, 0x145D	; 0x80145d <pxCurrentTCB>
    1d16:	d0 91 5e 14 	lds	r29, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    1d1a:	16 96       	adiw	r26, 0x06	; 6
    1d1c:	8d 91       	ld	r24, X+
    1d1e:	9c 91       	ld	r25, X
    1d20:	17 97       	sbiw	r26, 0x07	; 7
    1d22:	99 87       	std	Y+9, r25	; 0x09
    1d24:	88 87       	std	Y+8, r24	; 0x08
    1d26:	16 96       	adiw	r26, 0x06	; 6
    1d28:	cd 91       	ld	r28, X+
    1d2a:	dc 91       	ld	r29, X
    1d2c:	17 97       	sbiw	r26, 0x07	; 7
    1d2e:	80 91 5d 14 	lds	r24, 0x145D	; 0x80145d <pxCurrentTCB>
    1d32:	90 91 5e 14 	lds	r25, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    1d36:	02 96       	adiw	r24, 0x02	; 2
    1d38:	9d 83       	std	Y+5, r25	; 0x05
    1d3a:	8c 83       	std	Y+4, r24	; 0x04
    1d3c:	80 91 5d 14 	lds	r24, 0x145D	; 0x80145d <pxCurrentTCB>
    1d40:	90 91 5e 14 	lds	r25, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    1d44:	02 96       	adiw	r24, 0x02	; 2
    1d46:	17 96       	adiw	r26, 0x07	; 7
    1d48:	9c 93       	st	X, r25
    1d4a:	8e 93       	st	-X, r24
    1d4c:	16 97       	sbiw	r26, 0x06	; 6
    1d4e:	a0 91 5d 14 	lds	r26, 0x145D	; 0x80145d <pxCurrentTCB>
    1d52:	b0 91 5e 14 	lds	r27, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    1d56:	1d 96       	adiw	r26, 0x0d	; 13
    1d58:	fc 93       	st	X, r31
    1d5a:	ee 93       	st	-X, r30
    1d5c:	1c 97       	sbiw	r26, 0x0c	; 12
    1d5e:	80 81       	ld	r24, Z
    1d60:	8f 5f       	subi	r24, 0xFF	; 255
    1d62:	80 83       	st	Z, r24
    1d64:	3f c0       	rjmp	.+126    	; 0x1de4 <prvAddCurrentTaskToDelayedList+0x12e>
    1d66:	c8 0c       	add	r12, r8
    1d68:	d9 1c       	adc	r13, r9
    1d6a:	ea 1c       	adc	r14, r10
    1d6c:	fb 1c       	adc	r15, r11
    1d6e:	e0 91 5d 14 	lds	r30, 0x145D	; 0x80145d <pxCurrentTCB>
    1d72:	f0 91 5e 14 	lds	r31, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    1d76:	c2 82       	std	Z+2, r12	; 0x02
    1d78:	d3 82       	std	Z+3, r13	; 0x03
    1d7a:	e4 82       	std	Z+4, r14	; 0x04
    1d7c:	f5 82       	std	Z+5, r15	; 0x05
    1d7e:	c8 14       	cp	r12, r8
    1d80:	d9 04       	cpc	r13, r9
    1d82:	ea 04       	cpc	r14, r10
    1d84:	fb 04       	cpc	r15, r11
    1d86:	68 f4       	brcc	.+26     	; 0x1da2 <prvAddCurrentTaskToDelayedList+0xec>
    1d88:	60 91 5d 14 	lds	r22, 0x145D	; 0x80145d <pxCurrentTCB>
    1d8c:	70 91 5e 14 	lds	r23, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    1d90:	80 91 d5 13 	lds	r24, 0x13D5	; 0x8013d5 <pxOverflowDelayedTaskList>
    1d94:	90 91 d6 13 	lds	r25, 0x13D6	; 0x8013d6 <pxOverflowDelayedTaskList+0x1>
    1d98:	6e 5f       	subi	r22, 0xFE	; 254
    1d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d9c:	0e 94 5e 05 	call	0xabc	; 0xabc <vListInsert>
    1da0:	21 c0       	rjmp	.+66     	; 0x1de4 <prvAddCurrentTaskToDelayedList+0x12e>
    1da2:	60 91 5d 14 	lds	r22, 0x145D	; 0x80145d <pxCurrentTCB>
    1da6:	70 91 5e 14 	lds	r23, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    1daa:	80 91 d7 13 	lds	r24, 0x13D7	; 0x8013d7 <pxDelayedTaskList>
    1dae:	90 91 d8 13 	lds	r25, 0x13D8	; 0x8013d8 <pxDelayedTaskList+0x1>
    1db2:	6e 5f       	subi	r22, 0xFE	; 254
    1db4:	7f 4f       	sbci	r23, 0xFF	; 255
    1db6:	0e 94 5e 05 	call	0xabc	; 0xabc <vListInsert>
    1dba:	80 91 a1 13 	lds	r24, 0x13A1	; 0x8013a1 <xNextTaskUnblockTime>
    1dbe:	90 91 a2 13 	lds	r25, 0x13A2	; 0x8013a2 <xNextTaskUnblockTime+0x1>
    1dc2:	a0 91 a3 13 	lds	r26, 0x13A3	; 0x8013a3 <xNextTaskUnblockTime+0x2>
    1dc6:	b0 91 a4 13 	lds	r27, 0x13A4	; 0x8013a4 <xNextTaskUnblockTime+0x3>
    1dca:	c8 16       	cp	r12, r24
    1dcc:	d9 06       	cpc	r13, r25
    1dce:	ea 06       	cpc	r14, r26
    1dd0:	fb 06       	cpc	r15, r27
    1dd2:	40 f4       	brcc	.+16     	; 0x1de4 <prvAddCurrentTaskToDelayedList+0x12e>
    1dd4:	c0 92 a1 13 	sts	0x13A1, r12	; 0x8013a1 <xNextTaskUnblockTime>
    1dd8:	d0 92 a2 13 	sts	0x13A2, r13	; 0x8013a2 <xNextTaskUnblockTime+0x1>
    1ddc:	e0 92 a3 13 	sts	0x13A3, r14	; 0x8013a3 <xNextTaskUnblockTime+0x2>
    1de0:	f0 92 a4 13 	sts	0x13A4, r15	; 0x8013a4 <xNextTaskUnblockTime+0x3>
    1de4:	df 91       	pop	r29
    1de6:	cf 91       	pop	r28
    1de8:	ff 90       	pop	r15
    1dea:	ef 90       	pop	r14
    1dec:	df 90       	pop	r13
    1dee:	cf 90       	pop	r12
    1df0:	bf 90       	pop	r11
    1df2:	af 90       	pop	r10
    1df4:	9f 90       	pop	r9
    1df6:	8f 90       	pop	r8
    1df8:	08 95       	ret

00001dfa <xTaskCreate>:
    1dfa:	2f 92       	push	r2
    1dfc:	3f 92       	push	r3
    1dfe:	4f 92       	push	r4
    1e00:	5f 92       	push	r5
    1e02:	6f 92       	push	r6
    1e04:	7f 92       	push	r7
    1e06:	8f 92       	push	r8
    1e08:	9f 92       	push	r9
    1e0a:	af 92       	push	r10
    1e0c:	bf 92       	push	r11
    1e0e:	cf 92       	push	r12
    1e10:	df 92       	push	r13
    1e12:	ef 92       	push	r14
    1e14:	ff 92       	push	r15
    1e16:	0f 93       	push	r16
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	3c 01       	movw	r6, r24
    1e1e:	1b 01       	movw	r2, r22
    1e20:	4a 01       	movw	r8, r20
    1e22:	29 01       	movw	r4, r18
    1e24:	ca 01       	movw	r24, r20
    1e26:	0e 94 63 04 	call	0x8c6	; 0x8c6 <pvPortMalloc>
    1e2a:	6c 01       	movw	r12, r24
    1e2c:	89 2b       	or	r24, r25
    1e2e:	71 f0       	breq	.+28     	; 0x1e4c <xTaskCreate+0x52>
    1e30:	84 e3       	ldi	r24, 0x34	; 52
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	0e 94 63 04 	call	0x8c6	; 0x8c6 <pvPortMalloc>
    1e38:	ec 01       	movw	r28, r24
    1e3a:	89 2b       	or	r24, r25
    1e3c:	19 f0       	breq	.+6      	; 0x1e44 <xTaskCreate+0x4a>
    1e3e:	dc 8e       	std	Y+28, r13	; 0x1c
    1e40:	cb 8e       	std	Y+27, r12	; 0x1b
    1e42:	06 c0       	rjmp	.+12     	; 0x1e50 <xTaskCreate+0x56>
    1e44:	c6 01       	movw	r24, r12
    1e46:	0e 94 0c 05 	call	0xa18	; 0xa18 <vPortFree>
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <xTaskCreate+0x56>
    1e4c:	c0 e0       	ldi	r28, 0x00	; 0
    1e4e:	d0 e0       	ldi	r29, 0x00	; 0
    1e50:	20 97       	sbiw	r28, 0x00	; 0
    1e52:	61 f0       	breq	.+24     	; 0x1e6c <xTaskCreate+0x72>
    1e54:	a1 2c       	mov	r10, r1
    1e56:	b1 2c       	mov	r11, r1
    1e58:	6e 01       	movw	r12, r28
    1e5a:	92 01       	movw	r18, r4
    1e5c:	a4 01       	movw	r20, r8
    1e5e:	b1 01       	movw	r22, r2
    1e60:	c3 01       	movw	r24, r6
    1e62:	e8 dd       	rcall	.-1072   	; 0x1a34 <prvInitialiseNewTask>
    1e64:	ce 01       	movw	r24, r28
    1e66:	93 de       	rcall	.-730    	; 0x1b8e <prvAddNewTaskToReadyList>
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	01 c0       	rjmp	.+2      	; 0x1e6e <xTaskCreate+0x74>
    1e6c:	8f ef       	ldi	r24, 0xFF	; 255
    1e6e:	df 91       	pop	r29
    1e70:	cf 91       	pop	r28
    1e72:	0f 91       	pop	r16
    1e74:	ff 90       	pop	r15
    1e76:	ef 90       	pop	r14
    1e78:	df 90       	pop	r13
    1e7a:	cf 90       	pop	r12
    1e7c:	bf 90       	pop	r11
    1e7e:	af 90       	pop	r10
    1e80:	9f 90       	pop	r9
    1e82:	8f 90       	pop	r8
    1e84:	7f 90       	pop	r7
    1e86:	6f 90       	pop	r6
    1e88:	5f 90       	pop	r5
    1e8a:	4f 90       	pop	r4
    1e8c:	3f 90       	pop	r3
    1e8e:	2f 90       	pop	r2
    1e90:	08 95       	ret

00001e92 <vTaskStartScheduler>:
    1e92:	ef 92       	push	r14
    1e94:	ff 92       	push	r15
    1e96:	0f 93       	push	r16
    1e98:	0f 2e       	mov	r0, r31
    1e9a:	ff e9       	ldi	r31, 0x9F	; 159
    1e9c:	ef 2e       	mov	r14, r31
    1e9e:	f3 e1       	ldi	r31, 0x13	; 19
    1ea0:	ff 2e       	mov	r15, r31
    1ea2:	f0 2d       	mov	r31, r0
    1ea4:	00 e0       	ldi	r16, 0x00	; 0
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 ec       	ldi	r20, 0xC0	; 192
    1eac:	50 e0       	ldi	r21, 0x00	; 0
    1eae:	6c ed       	ldi	r22, 0xDC	; 220
    1eb0:	72 e0       	ldi	r23, 0x02	; 2
    1eb2:	8e e4       	ldi	r24, 0x4E	; 78
    1eb4:	91 e0       	ldi	r25, 0x01	; 1
    1eb6:	a1 df       	rcall	.-190    	; 0x1dfa <xTaskCreate>
    1eb8:	81 30       	cpi	r24, 0x01	; 1
    1eba:	11 f4       	brne	.+4      	; 0x1ec0 <vTaskStartScheduler+0x2e>
    1ebc:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <xTimerCreateTimerTask>
    1ec0:	81 30       	cpi	r24, 0x01	; 1
    1ec2:	c9 f4       	brne	.+50     	; 0x1ef6 <vTaskStartScheduler+0x64>
    1ec4:	f8 94       	cli
    1ec6:	8f ef       	ldi	r24, 0xFF	; 255
    1ec8:	9f ef       	ldi	r25, 0xFF	; 255
    1eca:	dc 01       	movw	r26, r24
    1ecc:	80 93 a1 13 	sts	0x13A1, r24	; 0x8013a1 <xNextTaskUnblockTime>
    1ed0:	90 93 a2 13 	sts	0x13A2, r25	; 0x8013a2 <xNextTaskUnblockTime+0x1>
    1ed4:	a0 93 a3 13 	sts	0x13A3, r26	; 0x8013a3 <xNextTaskUnblockTime+0x2>
    1ed8:	b0 93 a4 13 	sts	0x13A4, r27	; 0x8013a4 <xNextTaskUnblockTime+0x3>
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	80 93 ac 13 	sts	0x13AC, r24	; 0x8013ac <xSchedulerRunning>
    1ee2:	10 92 ae 13 	sts	0x13AE, r1	; 0x8013ae <xTickCount>
    1ee6:	10 92 af 13 	sts	0x13AF, r1	; 0x8013af <xTickCount+0x1>
    1eea:	10 92 b0 13 	sts	0x13B0, r1	; 0x8013b0 <xTickCount+0x2>
    1eee:	10 92 b1 13 	sts	0x13B1, r1	; 0x8013b1 <xTickCount+0x3>
    1ef2:	0e 94 e5 05 	call	0xbca	; 0xbca <xPortStartScheduler>
    1ef6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1efa:	0f 91       	pop	r16
    1efc:	ff 90       	pop	r15
    1efe:	ef 90       	pop	r14
    1f00:	08 95       	ret

00001f02 <vTaskSuspendAll>:
    1f02:	80 91 9e 13 	lds	r24, 0x139E	; 0x80139e <uxSchedulerSuspended>
    1f06:	8f 5f       	subi	r24, 0xFF	; 255
    1f08:	80 93 9e 13 	sts	0x139E, r24	; 0x80139e <uxSchedulerSuspended>
    1f0c:	08 95       	ret

00001f0e <xTaskGetTickCount>:
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	0f 92       	push	r0
    1f14:	60 91 ae 13 	lds	r22, 0x13AE	; 0x8013ae <xTickCount>
    1f18:	70 91 af 13 	lds	r23, 0x13AF	; 0x8013af <xTickCount+0x1>
    1f1c:	80 91 b0 13 	lds	r24, 0x13B0	; 0x8013b0 <xTickCount+0x2>
    1f20:	90 91 b1 13 	lds	r25, 0x13B1	; 0x8013b1 <xTickCount+0x3>
    1f24:	0f 90       	pop	r0
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	08 95       	ret

00001f2a <xTaskIncrementTick>:
    1f2a:	cf 92       	push	r12
    1f2c:	df 92       	push	r13
    1f2e:	ef 92       	push	r14
    1f30:	ff 92       	push	r15
    1f32:	cf 93       	push	r28
    1f34:	df 93       	push	r29
    1f36:	80 91 9e 13 	lds	r24, 0x139E	; 0x80139e <uxSchedulerSuspended>
    1f3a:	81 11       	cpse	r24, r1
    1f3c:	05 c1       	rjmp	.+522    	; 0x2148 <__DATA_REGION_LENGTH__+0x148>
    1f3e:	c0 90 ae 13 	lds	r12, 0x13AE	; 0x8013ae <xTickCount>
    1f42:	d0 90 af 13 	lds	r13, 0x13AF	; 0x8013af <xTickCount+0x1>
    1f46:	e0 90 b0 13 	lds	r14, 0x13B0	; 0x8013b0 <xTickCount+0x2>
    1f4a:	f0 90 b1 13 	lds	r15, 0x13B1	; 0x8013b1 <xTickCount+0x3>
    1f4e:	8f ef       	ldi	r24, 0xFF	; 255
    1f50:	c8 1a       	sub	r12, r24
    1f52:	d8 0a       	sbc	r13, r24
    1f54:	e8 0a       	sbc	r14, r24
    1f56:	f8 0a       	sbc	r15, r24
    1f58:	c0 92 ae 13 	sts	0x13AE, r12	; 0x8013ae <xTickCount>
    1f5c:	d0 92 af 13 	sts	0x13AF, r13	; 0x8013af <xTickCount+0x1>
    1f60:	e0 92 b0 13 	sts	0x13B0, r14	; 0x8013b0 <xTickCount+0x2>
    1f64:	f0 92 b1 13 	sts	0x13B1, r15	; 0x8013b1 <xTickCount+0x3>
    1f68:	c1 14       	cp	r12, r1
    1f6a:	d1 04       	cpc	r13, r1
    1f6c:	e1 04       	cpc	r14, r1
    1f6e:	f1 04       	cpc	r15, r1
    1f70:	b1 f4       	brne	.+44     	; 0x1f9e <xTaskIncrementTick+0x74>
    1f72:	80 91 d7 13 	lds	r24, 0x13D7	; 0x8013d7 <pxDelayedTaskList>
    1f76:	90 91 d8 13 	lds	r25, 0x13D8	; 0x8013d8 <pxDelayedTaskList+0x1>
    1f7a:	20 91 d5 13 	lds	r18, 0x13D5	; 0x8013d5 <pxOverflowDelayedTaskList>
    1f7e:	30 91 d6 13 	lds	r19, 0x13D6	; 0x8013d6 <pxOverflowDelayedTaskList+0x1>
    1f82:	30 93 d8 13 	sts	0x13D8, r19	; 0x8013d8 <pxDelayedTaskList+0x1>
    1f86:	20 93 d7 13 	sts	0x13D7, r18	; 0x8013d7 <pxDelayedTaskList>
    1f8a:	90 93 d6 13 	sts	0x13D6, r25	; 0x8013d6 <pxOverflowDelayedTaskList+0x1>
    1f8e:	80 93 d5 13 	sts	0x13D5, r24	; 0x8013d5 <pxOverflowDelayedTaskList>
    1f92:	80 91 a6 13 	lds	r24, 0x13A6	; 0x8013a6 <xNumOfOverflows>
    1f96:	8f 5f       	subi	r24, 0xFF	; 255
    1f98:	80 93 a6 13 	sts	0x13A6, r24	; 0x8013a6 <xNumOfOverflows>
    1f9c:	17 dd       	rcall	.-1490   	; 0x19cc <prvResetNextTaskUnblockTime>
    1f9e:	80 91 a1 13 	lds	r24, 0x13A1	; 0x8013a1 <xNextTaskUnblockTime>
    1fa2:	90 91 a2 13 	lds	r25, 0x13A2	; 0x8013a2 <xNextTaskUnblockTime+0x1>
    1fa6:	a0 91 a3 13 	lds	r26, 0x13A3	; 0x8013a3 <xNextTaskUnblockTime+0x2>
    1faa:	b0 91 a4 13 	lds	r27, 0x13A4	; 0x8013a4 <xNextTaskUnblockTime+0x3>
    1fae:	c8 16       	cp	r12, r24
    1fb0:	d9 06       	cpc	r13, r25
    1fb2:	ea 06       	cpc	r14, r26
    1fb4:	fb 06       	cpc	r15, r27
    1fb6:	20 f4       	brcc	.+8      	; 0x1fc0 <xTaskIncrementTick+0x96>
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	b2 c0       	rjmp	.+356    	; 0x2120 <__DATA_REGION_LENGTH__+0x120>
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	01 c0       	rjmp	.+2      	; 0x1fc2 <xTaskIncrementTick+0x98>
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	e0 91 d7 13 	lds	r30, 0x13D7	; 0x8013d7 <pxDelayedTaskList>
    1fc6:	f0 91 d8 13 	lds	r31, 0x13D8	; 0x8013d8 <pxDelayedTaskList+0x1>
    1fca:	90 81       	ld	r25, Z
    1fcc:	91 11       	cpse	r25, r1
    1fce:	0c c0       	rjmp	.+24     	; 0x1fe8 <xTaskIncrementTick+0xbe>
    1fd0:	4f ef       	ldi	r20, 0xFF	; 255
    1fd2:	5f ef       	ldi	r21, 0xFF	; 255
    1fd4:	ba 01       	movw	r22, r20
    1fd6:	40 93 a1 13 	sts	0x13A1, r20	; 0x8013a1 <xNextTaskUnblockTime>
    1fda:	50 93 a2 13 	sts	0x13A2, r21	; 0x8013a2 <xNextTaskUnblockTime+0x1>
    1fde:	60 93 a3 13 	sts	0x13A3, r22	; 0x8013a3 <xNextTaskUnblockTime+0x2>
    1fe2:	70 93 a4 13 	sts	0x13A4, r23	; 0x8013a4 <xNextTaskUnblockTime+0x3>
    1fe6:	9c c0       	rjmp	.+312    	; 0x2120 <__DATA_REGION_LENGTH__+0x120>
    1fe8:	e0 91 d7 13 	lds	r30, 0x13D7	; 0x8013d7 <pxDelayedTaskList>
    1fec:	f0 91 d8 13 	lds	r31, 0x13D8	; 0x8013d8 <pxDelayedTaskList+0x1>
    1ff0:	07 80       	ldd	r0, Z+7	; 0x07
    1ff2:	f0 85       	ldd	r31, Z+8	; 0x08
    1ff4:	e0 2d       	mov	r30, r0
    1ff6:	00 84       	ldd	r0, Z+8	; 0x08
    1ff8:	f1 85       	ldd	r31, Z+9	; 0x09
    1ffa:	e0 2d       	mov	r30, r0
    1ffc:	42 81       	ldd	r20, Z+2	; 0x02
    1ffe:	53 81       	ldd	r21, Z+3	; 0x03
    2000:	64 81       	ldd	r22, Z+4	; 0x04
    2002:	75 81       	ldd	r23, Z+5	; 0x05
    2004:	c4 16       	cp	r12, r20
    2006:	d5 06       	cpc	r13, r21
    2008:	e6 06       	cpc	r14, r22
    200a:	f7 06       	cpc	r15, r23
    200c:	48 f4       	brcc	.+18     	; 0x2020 <__DATA_REGION_LENGTH__+0x20>
    200e:	40 93 a1 13 	sts	0x13A1, r20	; 0x8013a1 <xNextTaskUnblockTime>
    2012:	50 93 a2 13 	sts	0x13A2, r21	; 0x8013a2 <xNextTaskUnblockTime+0x1>
    2016:	60 93 a3 13 	sts	0x13A3, r22	; 0x8013a3 <xNextTaskUnblockTime+0x2>
    201a:	70 93 a4 13 	sts	0x13A4, r23	; 0x8013a4 <xNextTaskUnblockTime+0x3>
    201e:	80 c0       	rjmp	.+256    	; 0x2120 <__DATA_REGION_LENGTH__+0x120>
    2020:	a4 85       	ldd	r26, Z+12	; 0x0c
    2022:	b5 85       	ldd	r27, Z+13	; 0x0d
    2024:	c6 81       	ldd	r28, Z+6	; 0x06
    2026:	d7 81       	ldd	r29, Z+7	; 0x07
    2028:	20 85       	ldd	r18, Z+8	; 0x08
    202a:	31 85       	ldd	r19, Z+9	; 0x09
    202c:	3f 83       	std	Y+7, r19	; 0x07
    202e:	2e 83       	std	Y+6, r18	; 0x06
    2030:	c0 85       	ldd	r28, Z+8	; 0x08
    2032:	d1 85       	ldd	r29, Z+9	; 0x09
    2034:	26 81       	ldd	r18, Z+6	; 0x06
    2036:	37 81       	ldd	r19, Z+7	; 0x07
    2038:	3d 83       	std	Y+5, r19	; 0x05
    203a:	2c 83       	std	Y+4, r18	; 0x04
    203c:	11 96       	adiw	r26, 0x01	; 1
    203e:	4d 91       	ld	r20, X+
    2040:	5c 91       	ld	r21, X
    2042:	12 97       	sbiw	r26, 0x02	; 2
    2044:	9f 01       	movw	r18, r30
    2046:	2e 5f       	subi	r18, 0xFE	; 254
    2048:	3f 4f       	sbci	r19, 0xFF	; 255
    204a:	42 17       	cp	r20, r18
    204c:	53 07       	cpc	r21, r19
    204e:	31 f4       	brne	.+12     	; 0x205c <__DATA_REGION_LENGTH__+0x5c>
    2050:	40 85       	ldd	r20, Z+8	; 0x08
    2052:	51 85       	ldd	r21, Z+9	; 0x09
    2054:	12 96       	adiw	r26, 0x02	; 2
    2056:	5c 93       	st	X, r21
    2058:	4e 93       	st	-X, r20
    205a:	11 97       	sbiw	r26, 0x01	; 1
    205c:	15 86       	std	Z+13, r1	; 0x0d
    205e:	14 86       	std	Z+12, r1	; 0x0c
    2060:	9c 91       	ld	r25, X
    2062:	91 50       	subi	r25, 0x01	; 1
    2064:	9c 93       	st	X, r25
    2066:	a0 8d       	ldd	r26, Z+24	; 0x18
    2068:	b1 8d       	ldd	r27, Z+25	; 0x19
    206a:	10 97       	sbiw	r26, 0x00	; 0
    206c:	09 f1       	breq	.+66     	; 0x20b0 <__DATA_REGION_LENGTH__+0xb0>
    206e:	c2 89       	ldd	r28, Z+18	; 0x12
    2070:	d3 89       	ldd	r29, Z+19	; 0x13
    2072:	44 89       	ldd	r20, Z+20	; 0x14
    2074:	55 89       	ldd	r21, Z+21	; 0x15
    2076:	5f 83       	std	Y+7, r21	; 0x07
    2078:	4e 83       	std	Y+6, r20	; 0x06
    207a:	c4 89       	ldd	r28, Z+20	; 0x14
    207c:	d5 89       	ldd	r29, Z+21	; 0x15
    207e:	42 89       	ldd	r20, Z+18	; 0x12
    2080:	53 89       	ldd	r21, Z+19	; 0x13
    2082:	5d 83       	std	Y+5, r21	; 0x05
    2084:	4c 83       	std	Y+4, r20	; 0x04
    2086:	11 96       	adiw	r26, 0x01	; 1
    2088:	6d 91       	ld	r22, X+
    208a:	7c 91       	ld	r23, X
    208c:	12 97       	sbiw	r26, 0x02	; 2
    208e:	af 01       	movw	r20, r30
    2090:	42 5f       	subi	r20, 0xF2	; 242
    2092:	5f 4f       	sbci	r21, 0xFF	; 255
    2094:	64 17       	cp	r22, r20
    2096:	75 07       	cpc	r23, r21
    2098:	31 f4       	brne	.+12     	; 0x20a6 <__DATA_REGION_LENGTH__+0xa6>
    209a:	44 89       	ldd	r20, Z+20	; 0x14
    209c:	55 89       	ldd	r21, Z+21	; 0x15
    209e:	12 96       	adiw	r26, 0x02	; 2
    20a0:	5c 93       	st	X, r21
    20a2:	4e 93       	st	-X, r20
    20a4:	11 97       	sbiw	r26, 0x01	; 1
    20a6:	11 8e       	std	Z+25, r1	; 0x19
    20a8:	10 8e       	std	Z+24, r1	; 0x18
    20aa:	9c 91       	ld	r25, X
    20ac:	91 50       	subi	r25, 0x01	; 1
    20ae:	9c 93       	st	X, r25
    20b0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    20b2:	90 91 ad 13 	lds	r25, 0x13AD	; 0x8013ad <uxTopReadyPriority>
    20b6:	9a 17       	cp	r25, r26
    20b8:	10 f4       	brcc	.+4      	; 0x20be <__DATA_REGION_LENGTH__+0xbe>
    20ba:	a0 93 ad 13 	sts	0x13AD, r26	; 0x8013ad <uxTopReadyPriority>
    20be:	9b e0       	ldi	r25, 0x0B	; 11
    20c0:	9a 9f       	mul	r25, r26
    20c2:	d0 01       	movw	r26, r0
    20c4:	11 24       	eor	r1, r1
    20c6:	a1 51       	subi	r26, 0x11	; 17
    20c8:	bc 4e       	sbci	r27, 0xEC	; 236
    20ca:	11 96       	adiw	r26, 0x01	; 1
    20cc:	0d 90       	ld	r0, X+
    20ce:	bc 91       	ld	r27, X
    20d0:	a0 2d       	mov	r26, r0
    20d2:	b7 83       	std	Z+7, r27	; 0x07
    20d4:	a6 83       	std	Z+6, r26	; 0x06
    20d6:	16 96       	adiw	r26, 0x06	; 6
    20d8:	4d 91       	ld	r20, X+
    20da:	5c 91       	ld	r21, X
    20dc:	17 97       	sbiw	r26, 0x07	; 7
    20de:	51 87       	std	Z+9, r21	; 0x09
    20e0:	40 87       	std	Z+8, r20	; 0x08
    20e2:	16 96       	adiw	r26, 0x06	; 6
    20e4:	cd 91       	ld	r28, X+
    20e6:	dc 91       	ld	r29, X
    20e8:	17 97       	sbiw	r26, 0x07	; 7
    20ea:	3d 83       	std	Y+5, r19	; 0x05
    20ec:	2c 83       	std	Y+4, r18	; 0x04
    20ee:	17 96       	adiw	r26, 0x07	; 7
    20f0:	3c 93       	st	X, r19
    20f2:	2e 93       	st	-X, r18
    20f4:	16 97       	sbiw	r26, 0x06	; 6
    20f6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    20f8:	9a 9f       	mul	r25, r26
    20fa:	d0 01       	movw	r26, r0
    20fc:	11 24       	eor	r1, r1
    20fe:	a1 51       	subi	r26, 0x11	; 17
    2100:	bc 4e       	sbci	r27, 0xEC	; 236
    2102:	b5 87       	std	Z+13, r27	; 0x0d
    2104:	a4 87       	std	Z+12, r26	; 0x0c
    2106:	9c 91       	ld	r25, X
    2108:	9f 5f       	subi	r25, 0xFF	; 255
    210a:	9c 93       	st	X, r25
    210c:	22 8d       	ldd	r18, Z+26	; 0x1a
    210e:	e0 91 5d 14 	lds	r30, 0x145D	; 0x80145d <pxCurrentTCB>
    2112:	f0 91 5e 14 	lds	r31, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2116:	92 8d       	ldd	r25, Z+26	; 0x1a
    2118:	29 17       	cp	r18, r25
    211a:	08 f0       	brcs	.+2      	; 0x211e <__DATA_REGION_LENGTH__+0x11e>
    211c:	4f cf       	rjmp	.-354    	; 0x1fbc <xTaskIncrementTick+0x92>
    211e:	51 cf       	rjmp	.-350    	; 0x1fc2 <xTaskIncrementTick+0x98>
    2120:	e0 91 5d 14 	lds	r30, 0x145D	; 0x80145d <pxCurrentTCB>
    2124:	f0 91 5e 14 	lds	r31, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2128:	e2 8d       	ldd	r30, Z+26	; 0x1a
    212a:	9b e0       	ldi	r25, 0x0B	; 11
    212c:	e9 9f       	mul	r30, r25
    212e:	f0 01       	movw	r30, r0
    2130:	11 24       	eor	r1, r1
    2132:	e1 51       	subi	r30, 0x11	; 17
    2134:	fc 4e       	sbci	r31, 0xEC	; 236
    2136:	90 81       	ld	r25, Z
    2138:	92 30       	cpi	r25, 0x02	; 2
    213a:	08 f0       	brcs	.+2      	; 0x213e <__DATA_REGION_LENGTH__+0x13e>
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 91 a7 13 	lds	r25, 0x13A7	; 0x8013a7 <xYieldPending>
    2142:	91 11       	cpse	r25, r1
    2144:	16 c0       	rjmp	.+44     	; 0x2172 <__DATA_REGION_LENGTH__+0x172>
    2146:	16 c0       	rjmp	.+44     	; 0x2174 <__DATA_REGION_LENGTH__+0x174>
    2148:	80 91 a8 13 	lds	r24, 0x13A8	; 0x8013a8 <xPendedTicks>
    214c:	90 91 a9 13 	lds	r25, 0x13A9	; 0x8013a9 <xPendedTicks+0x1>
    2150:	a0 91 aa 13 	lds	r26, 0x13AA	; 0x8013aa <xPendedTicks+0x2>
    2154:	b0 91 ab 13 	lds	r27, 0x13AB	; 0x8013ab <xPendedTicks+0x3>
    2158:	01 96       	adiw	r24, 0x01	; 1
    215a:	a1 1d       	adc	r26, r1
    215c:	b1 1d       	adc	r27, r1
    215e:	80 93 a8 13 	sts	0x13A8, r24	; 0x8013a8 <xPendedTicks>
    2162:	90 93 a9 13 	sts	0x13A9, r25	; 0x8013a9 <xPendedTicks+0x1>
    2166:	a0 93 aa 13 	sts	0x13AA, r26	; 0x8013aa <xPendedTicks+0x2>
    216a:	b0 93 ab 13 	sts	0x13AB, r27	; 0x8013ab <xPendedTicks+0x3>
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	01 c0       	rjmp	.+2      	; 0x2174 <__DATA_REGION_LENGTH__+0x174>
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	df 91       	pop	r29
    2176:	cf 91       	pop	r28
    2178:	ff 90       	pop	r15
    217a:	ef 90       	pop	r14
    217c:	df 90       	pop	r13
    217e:	cf 90       	pop	r12
    2180:	08 95       	ret

00002182 <xTaskResumeAll>:
    2182:	cf 92       	push	r12
    2184:	df 92       	push	r13
    2186:	ef 92       	push	r14
    2188:	ff 92       	push	r15
    218a:	cf 93       	push	r28
    218c:	df 93       	push	r29
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	0f 92       	push	r0
    2194:	80 91 9e 13 	lds	r24, 0x139E	; 0x80139e <uxSchedulerSuspended>
    2198:	81 50       	subi	r24, 0x01	; 1
    219a:	80 93 9e 13 	sts	0x139E, r24	; 0x80139e <uxSchedulerSuspended>
    219e:	80 91 9e 13 	lds	r24, 0x139E	; 0x80139e <uxSchedulerSuspended>
    21a2:	81 11       	cpse	r24, r1
    21a4:	be c0       	rjmp	.+380    	; 0x2322 <__stack+0x123>
    21a6:	80 91 b2 13 	lds	r24, 0x13B2	; 0x8013b2 <uxCurrentNumberOfTasks>
    21aa:	81 11       	cpse	r24, r1
    21ac:	88 c0       	rjmp	.+272    	; 0x22be <__stack+0xbf>
    21ae:	bc c0       	rjmp	.+376    	; 0x2328 <__stack+0x129>
    21b0:	e0 91 d1 13 	lds	r30, 0x13D1	; 0x8013d1 <xPendingReadyList+0x7>
    21b4:	f0 91 d2 13 	lds	r31, 0x13D2	; 0x8013d2 <xPendingReadyList+0x8>
    21b8:	00 84       	ldd	r0, Z+8	; 0x08
    21ba:	f1 85       	ldd	r31, Z+9	; 0x09
    21bc:	e0 2d       	mov	r30, r0
    21be:	a0 8d       	ldd	r26, Z+24	; 0x18
    21c0:	b1 8d       	ldd	r27, Z+25	; 0x19
    21c2:	c2 89       	ldd	r28, Z+18	; 0x12
    21c4:	d3 89       	ldd	r29, Z+19	; 0x13
    21c6:	84 89       	ldd	r24, Z+20	; 0x14
    21c8:	95 89       	ldd	r25, Z+21	; 0x15
    21ca:	9f 83       	std	Y+7, r25	; 0x07
    21cc:	8e 83       	std	Y+6, r24	; 0x06
    21ce:	c4 89       	ldd	r28, Z+20	; 0x14
    21d0:	d5 89       	ldd	r29, Z+21	; 0x15
    21d2:	82 89       	ldd	r24, Z+18	; 0x12
    21d4:	93 89       	ldd	r25, Z+19	; 0x13
    21d6:	9d 83       	std	Y+5, r25	; 0x05
    21d8:	8c 83       	std	Y+4, r24	; 0x04
    21da:	11 96       	adiw	r26, 0x01	; 1
    21dc:	2d 91       	ld	r18, X+
    21de:	3c 91       	ld	r19, X
    21e0:	12 97       	sbiw	r26, 0x02	; 2
    21e2:	cf 01       	movw	r24, r30
    21e4:	0e 96       	adiw	r24, 0x0e	; 14
    21e6:	28 17       	cp	r18, r24
    21e8:	39 07       	cpc	r19, r25
    21ea:	31 f4       	brne	.+12     	; 0x21f8 <xTaskResumeAll+0x76>
    21ec:	84 89       	ldd	r24, Z+20	; 0x14
    21ee:	95 89       	ldd	r25, Z+21	; 0x15
    21f0:	12 96       	adiw	r26, 0x02	; 2
    21f2:	9c 93       	st	X, r25
    21f4:	8e 93       	st	-X, r24
    21f6:	11 97       	sbiw	r26, 0x01	; 1
    21f8:	11 8e       	std	Z+25, r1	; 0x19
    21fa:	10 8e       	std	Z+24, r1	; 0x18
    21fc:	8c 91       	ld	r24, X
    21fe:	81 50       	subi	r24, 0x01	; 1
    2200:	8c 93       	st	X, r24
    2202:	a4 85       	ldd	r26, Z+12	; 0x0c
    2204:	b5 85       	ldd	r27, Z+13	; 0x0d
    2206:	c6 81       	ldd	r28, Z+6	; 0x06
    2208:	d7 81       	ldd	r29, Z+7	; 0x07
    220a:	80 85       	ldd	r24, Z+8	; 0x08
    220c:	91 85       	ldd	r25, Z+9	; 0x09
    220e:	9f 83       	std	Y+7, r25	; 0x07
    2210:	8e 83       	std	Y+6, r24	; 0x06
    2212:	c0 85       	ldd	r28, Z+8	; 0x08
    2214:	d1 85       	ldd	r29, Z+9	; 0x09
    2216:	86 81       	ldd	r24, Z+6	; 0x06
    2218:	97 81       	ldd	r25, Z+7	; 0x07
    221a:	9d 83       	std	Y+5, r25	; 0x05
    221c:	8c 83       	std	Y+4, r24	; 0x04
    221e:	11 96       	adiw	r26, 0x01	; 1
    2220:	8d 91       	ld	r24, X+
    2222:	9c 91       	ld	r25, X
    2224:	12 97       	sbiw	r26, 0x02	; 2
    2226:	9f 01       	movw	r18, r30
    2228:	2e 5f       	subi	r18, 0xFE	; 254
    222a:	3f 4f       	sbci	r19, 0xFF	; 255
    222c:	82 17       	cp	r24, r18
    222e:	93 07       	cpc	r25, r19
    2230:	31 f4       	brne	.+12     	; 0x223e <__stack+0x3f>
    2232:	80 85       	ldd	r24, Z+8	; 0x08
    2234:	91 85       	ldd	r25, Z+9	; 0x09
    2236:	12 96       	adiw	r26, 0x02	; 2
    2238:	9c 93       	st	X, r25
    223a:	8e 93       	st	-X, r24
    223c:	11 97       	sbiw	r26, 0x01	; 1
    223e:	15 86       	std	Z+13, r1	; 0x0d
    2240:	14 86       	std	Z+12, r1	; 0x0c
    2242:	8c 91       	ld	r24, X
    2244:	81 50       	subi	r24, 0x01	; 1
    2246:	8c 93       	st	X, r24
    2248:	a2 8d       	ldd	r26, Z+26	; 0x1a
    224a:	80 91 ad 13 	lds	r24, 0x13AD	; 0x8013ad <uxTopReadyPriority>
    224e:	8a 17       	cp	r24, r26
    2250:	10 f4       	brcc	.+4      	; 0x2256 <__stack+0x57>
    2252:	a0 93 ad 13 	sts	0x13AD, r26	; 0x8013ad <uxTopReadyPriority>
    2256:	8b e0       	ldi	r24, 0x0B	; 11
    2258:	8a 9f       	mul	r24, r26
    225a:	d0 01       	movw	r26, r0
    225c:	11 24       	eor	r1, r1
    225e:	a1 51       	subi	r26, 0x11	; 17
    2260:	bc 4e       	sbci	r27, 0xEC	; 236
    2262:	11 96       	adiw	r26, 0x01	; 1
    2264:	0d 90       	ld	r0, X+
    2266:	bc 91       	ld	r27, X
    2268:	a0 2d       	mov	r26, r0
    226a:	b7 83       	std	Z+7, r27	; 0x07
    226c:	a6 83       	std	Z+6, r26	; 0x06
    226e:	16 96       	adiw	r26, 0x06	; 6
    2270:	4d 91       	ld	r20, X+
    2272:	5c 91       	ld	r21, X
    2274:	17 97       	sbiw	r26, 0x07	; 7
    2276:	51 87       	std	Z+9, r21	; 0x09
    2278:	40 87       	std	Z+8, r20	; 0x08
    227a:	16 96       	adiw	r26, 0x06	; 6
    227c:	cd 91       	ld	r28, X+
    227e:	dc 91       	ld	r29, X
    2280:	17 97       	sbiw	r26, 0x07	; 7
    2282:	3d 83       	std	Y+5, r19	; 0x05
    2284:	2c 83       	std	Y+4, r18	; 0x04
    2286:	17 96       	adiw	r26, 0x07	; 7
    2288:	3c 93       	st	X, r19
    228a:	2e 93       	st	-X, r18
    228c:	16 97       	sbiw	r26, 0x06	; 6
    228e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2290:	8a 9f       	mul	r24, r26
    2292:	d0 01       	movw	r26, r0
    2294:	11 24       	eor	r1, r1
    2296:	a1 51       	subi	r26, 0x11	; 17
    2298:	bc 4e       	sbci	r27, 0xEC	; 236
    229a:	b5 87       	std	Z+13, r27	; 0x0d
    229c:	a4 87       	std	Z+12, r26	; 0x0c
    229e:	8c 91       	ld	r24, X
    22a0:	8f 5f       	subi	r24, 0xFF	; 255
    22a2:	8c 93       	st	X, r24
    22a4:	92 8d       	ldd	r25, Z+26	; 0x1a
    22a6:	a0 91 5d 14 	lds	r26, 0x145D	; 0x80145d <pxCurrentTCB>
    22aa:	b0 91 5e 14 	lds	r27, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    22ae:	5a 96       	adiw	r26, 0x1a	; 26
    22b0:	8c 91       	ld	r24, X
    22b2:	98 17       	cp	r25, r24
    22b4:	30 f0       	brcs	.+12     	; 0x22c2 <__stack+0xc3>
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	80 93 a7 13 	sts	0x13A7, r24	; 0x8013a7 <xYieldPending>
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <__stack+0xc3>
    22be:	e0 e0       	ldi	r30, 0x00	; 0
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 91 ca 13 	lds	r24, 0x13CA	; 0x8013ca <xPendingReadyList>
    22c6:	81 11       	cpse	r24, r1
    22c8:	73 cf       	rjmp	.-282    	; 0x21b0 <xTaskResumeAll+0x2e>
    22ca:	ef 2b       	or	r30, r31
    22cc:	09 f0       	breq	.+2      	; 0x22d0 <__stack+0xd1>
    22ce:	7e db       	rcall	.-2308   	; 0x19cc <prvResetNextTaskUnblockTime>
    22d0:	c0 90 a8 13 	lds	r12, 0x13A8	; 0x8013a8 <xPendedTicks>
    22d4:	d0 90 a9 13 	lds	r13, 0x13A9	; 0x8013a9 <xPendedTicks+0x1>
    22d8:	e0 90 aa 13 	lds	r14, 0x13AA	; 0x8013aa <xPendedTicks+0x2>
    22dc:	f0 90 ab 13 	lds	r15, 0x13AB	; 0x8013ab <xPendedTicks+0x3>
    22e0:	c1 14       	cp	r12, r1
    22e2:	d1 04       	cpc	r13, r1
    22e4:	e1 04       	cpc	r14, r1
    22e6:	f1 04       	cpc	r15, r1
    22e8:	a1 f0       	breq	.+40     	; 0x2312 <__stack+0x113>
    22ea:	1f de       	rcall	.-962    	; 0x1f2a <xTaskIncrementTick>
    22ec:	88 23       	and	r24, r24
    22ee:	19 f0       	breq	.+6      	; 0x22f6 <__stack+0xf7>
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	80 93 a7 13 	sts	0x13A7, r24	; 0x8013a7 <xYieldPending>
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	c8 1a       	sub	r12, r24
    22fa:	d1 08       	sbc	r13, r1
    22fc:	e1 08       	sbc	r14, r1
    22fe:	f1 08       	sbc	r15, r1
    2300:	a1 f7       	brne	.-24     	; 0x22ea <__stack+0xeb>
    2302:	10 92 a8 13 	sts	0x13A8, r1	; 0x8013a8 <xPendedTicks>
    2306:	10 92 a9 13 	sts	0x13A9, r1	; 0x8013a9 <xPendedTicks+0x1>
    230a:	10 92 aa 13 	sts	0x13AA, r1	; 0x8013aa <xPendedTicks+0x2>
    230e:	10 92 ab 13 	sts	0x13AB, r1	; 0x8013ab <xPendedTicks+0x3>
    2312:	80 91 a7 13 	lds	r24, 0x13A7	; 0x8013a7 <xYieldPending>
    2316:	88 23       	and	r24, r24
    2318:	31 f0       	breq	.+12     	; 0x2326 <__stack+0x127>
    231a:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	03 c0       	rjmp	.+6      	; 0x2328 <__stack+0x129>
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	01 c0       	rjmp	.+2      	; 0x2328 <__stack+0x129>
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	0f 90       	pop	r0
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	ff 90       	pop	r15
    2332:	ef 90       	pop	r14
    2334:	df 90       	pop	r13
    2336:	cf 90       	pop	r12
    2338:	08 95       	ret

0000233a <xTaskDelayUntil>:
    233a:	8f 92       	push	r8
    233c:	9f 92       	push	r9
    233e:	af 92       	push	r10
    2340:	bf 92       	push	r11
    2342:	cf 92       	push	r12
    2344:	df 92       	push	r13
    2346:	ef 92       	push	r14
    2348:	ff 92       	push	r15
    234a:	1f 93       	push	r17
    234c:	cf 93       	push	r28
    234e:	df 93       	push	r29
    2350:	ec 01       	movw	r28, r24
    2352:	6a 01       	movw	r12, r20
    2354:	7b 01       	movw	r14, r22
    2356:	d5 dd       	rcall	.-1110   	; 0x1f02 <vTaskSuspendAll>
    2358:	80 90 ae 13 	lds	r8, 0x13AE	; 0x8013ae <xTickCount>
    235c:	90 90 af 13 	lds	r9, 0x13AF	; 0x8013af <xTickCount+0x1>
    2360:	a0 90 b0 13 	lds	r10, 0x13B0	; 0x8013b0 <xTickCount+0x2>
    2364:	b0 90 b1 13 	lds	r11, 0x13B1	; 0x8013b1 <xTickCount+0x3>
    2368:	88 81       	ld	r24, Y
    236a:	99 81       	ldd	r25, Y+1	; 0x01
    236c:	aa 81       	ldd	r26, Y+2	; 0x02
    236e:	bb 81       	ldd	r27, Y+3	; 0x03
    2370:	ac 01       	movw	r20, r24
    2372:	bd 01       	movw	r22, r26
    2374:	4c 0d       	add	r20, r12
    2376:	5d 1d       	adc	r21, r13
    2378:	6e 1d       	adc	r22, r14
    237a:	7f 1d       	adc	r23, r15
    237c:	88 16       	cp	r8, r24
    237e:	99 06       	cpc	r9, r25
    2380:	aa 06       	cpc	r10, r26
    2382:	bb 06       	cpc	r11, r27
    2384:	60 f4       	brcc	.+24     	; 0x239e <xTaskDelayUntil+0x64>
    2386:	48 17       	cp	r20, r24
    2388:	59 07       	cpc	r21, r25
    238a:	6a 07       	cpc	r22, r26
    238c:	7b 07       	cpc	r23, r27
    238e:	98 f4       	brcc	.+38     	; 0x23b6 <xTaskDelayUntil+0x7c>
    2390:	84 16       	cp	r8, r20
    2392:	95 06       	cpc	r9, r21
    2394:	a6 06       	cpc	r10, r22
    2396:	b7 06       	cpc	r11, r23
    2398:	80 f0       	brcs	.+32     	; 0x23ba <xTaskDelayUntil+0x80>
    239a:	10 e0       	ldi	r17, 0x00	; 0
    239c:	13 c0       	rjmp	.+38     	; 0x23c4 <xTaskDelayUntil+0x8a>
    239e:	48 17       	cp	r20, r24
    23a0:	59 07       	cpc	r21, r25
    23a2:	6a 07       	cpc	r22, r26
    23a4:	7b 07       	cpc	r23, r27
    23a6:	58 f0       	brcs	.+22     	; 0x23be <xTaskDelayUntil+0x84>
    23a8:	84 16       	cp	r8, r20
    23aa:	95 06       	cpc	r9, r21
    23ac:	a6 06       	cpc	r10, r22
    23ae:	b7 06       	cpc	r11, r23
    23b0:	40 f0       	brcs	.+16     	; 0x23c2 <xTaskDelayUntil+0x88>
    23b2:	10 e0       	ldi	r17, 0x00	; 0
    23b4:	07 c0       	rjmp	.+14     	; 0x23c4 <xTaskDelayUntil+0x8a>
    23b6:	10 e0       	ldi	r17, 0x00	; 0
    23b8:	05 c0       	rjmp	.+10     	; 0x23c4 <xTaskDelayUntil+0x8a>
    23ba:	11 e0       	ldi	r17, 0x01	; 1
    23bc:	03 c0       	rjmp	.+6      	; 0x23c4 <xTaskDelayUntil+0x8a>
    23be:	11 e0       	ldi	r17, 0x01	; 1
    23c0:	01 c0       	rjmp	.+2      	; 0x23c4 <xTaskDelayUntil+0x8a>
    23c2:	11 e0       	ldi	r17, 0x01	; 1
    23c4:	48 83       	st	Y, r20
    23c6:	59 83       	std	Y+1, r21	; 0x01
    23c8:	6a 83       	std	Y+2, r22	; 0x02
    23ca:	7b 83       	std	Y+3, r23	; 0x03
    23cc:	11 23       	and	r17, r17
    23ce:	41 f0       	breq	.+16     	; 0x23e0 <xTaskDelayUntil+0xa6>
    23d0:	cb 01       	movw	r24, r22
    23d2:	ba 01       	movw	r22, r20
    23d4:	68 19       	sub	r22, r8
    23d6:	79 09       	sbc	r23, r9
    23d8:	8a 09       	sbc	r24, r10
    23da:	9b 09       	sbc	r25, r11
    23dc:	40 e0       	ldi	r20, 0x00	; 0
    23de:	6b dc       	rcall	.-1834   	; 0x1cb6 <prvAddCurrentTaskToDelayedList>
    23e0:	d0 de       	rcall	.-608    	; 0x2182 <xTaskResumeAll>
    23e2:	81 11       	cpse	r24, r1
    23e4:	02 c0       	rjmp	.+4      	; 0x23ea <xTaskDelayUntil+0xb0>
    23e6:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
    23ea:	81 2f       	mov	r24, r17
    23ec:	df 91       	pop	r29
    23ee:	cf 91       	pop	r28
    23f0:	1f 91       	pop	r17
    23f2:	ff 90       	pop	r15
    23f4:	ef 90       	pop	r14
    23f6:	df 90       	pop	r13
    23f8:	cf 90       	pop	r12
    23fa:	bf 90       	pop	r11
    23fc:	af 90       	pop	r10
    23fe:	9f 90       	pop	r9
    2400:	8f 90       	pop	r8
    2402:	08 95       	ret

00002404 <vTaskDelay>:
    2404:	cf 92       	push	r12
    2406:	df 92       	push	r13
    2408:	ef 92       	push	r14
    240a:	ff 92       	push	r15
    240c:	6b 01       	movw	r12, r22
    240e:	7c 01       	movw	r14, r24
    2410:	67 2b       	or	r22, r23
    2412:	68 2b       	or	r22, r24
    2414:	69 2b       	or	r22, r25
    2416:	39 f0       	breq	.+14     	; 0x2426 <vTaskDelay+0x22>
    2418:	74 dd       	rcall	.-1304   	; 0x1f02 <vTaskSuspendAll>
    241a:	40 e0       	ldi	r20, 0x00	; 0
    241c:	c7 01       	movw	r24, r14
    241e:	b6 01       	movw	r22, r12
    2420:	4a dc       	rcall	.-1900   	; 0x1cb6 <prvAddCurrentTaskToDelayedList>
    2422:	af de       	rcall	.-674    	; 0x2182 <xTaskResumeAll>
    2424:	01 c0       	rjmp	.+2      	; 0x2428 <vTaskDelay+0x24>
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	81 11       	cpse	r24, r1
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <vTaskDelay+0x2c>
    242c:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
    2430:	ff 90       	pop	r15
    2432:	ef 90       	pop	r14
    2434:	df 90       	pop	r13
    2436:	cf 90       	pop	r12
    2438:	08 95       	ret

0000243a <vTaskSwitchContext>:
    243a:	80 91 9e 13 	lds	r24, 0x139E	; 0x80139e <uxSchedulerSuspended>
    243e:	88 23       	and	r24, r24
    2440:	21 f0       	breq	.+8      	; 0x244a <vTaskSwitchContext+0x10>
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	80 93 a7 13 	sts	0x13A7, r24	; 0x8013a7 <xYieldPending>
    2448:	08 95       	ret
    244a:	10 92 a7 13 	sts	0x13A7, r1	; 0x8013a7 <xYieldPending>
    244e:	e0 91 5d 14 	lds	r30, 0x145D	; 0x80145d <pxCurrentTCB>
    2452:	f0 91 5e 14 	lds	r31, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2456:	20 81       	ld	r18, Z
    2458:	31 81       	ldd	r19, Z+1	; 0x01
    245a:	e0 91 5d 14 	lds	r30, 0x145D	; 0x80145d <pxCurrentTCB>
    245e:	f0 91 5e 14 	lds	r31, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2462:	83 8d       	ldd	r24, Z+27	; 0x1b
    2464:	94 8d       	ldd	r25, Z+28	; 0x1c
    2466:	82 17       	cp	r24, r18
    2468:	93 07       	cpc	r25, r19
    246a:	60 f0       	brcs	.+24     	; 0x2484 <vTaskSwitchContext+0x4a>
    246c:	60 91 5d 14 	lds	r22, 0x145D	; 0x80145d <pxCurrentTCB>
    2470:	70 91 5e 14 	lds	r23, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2474:	63 5e       	subi	r22, 0xE3	; 227
    2476:	7f 4f       	sbci	r23, 0xFF	; 255
    2478:	80 91 5d 14 	lds	r24, 0x145D	; 0x80145d <pxCurrentTCB>
    247c:	90 91 5e 14 	lds	r25, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2480:	0e 94 89 1b 	call	0x3712	; 0x3712 <vApplicationStackOverflowHook>
    2484:	80 91 ad 13 	lds	r24, 0x13AD	; 0x8013ad <uxTopReadyPriority>
    2488:	01 c0       	rjmp	.+2      	; 0x248c <vTaskSwitchContext+0x52>
    248a:	81 50       	subi	r24, 0x01	; 1
    248c:	28 2f       	mov	r18, r24
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	9b e0       	ldi	r25, 0x0B	; 11
    2492:	92 9f       	mul	r25, r18
    2494:	f0 01       	movw	r30, r0
    2496:	93 9f       	mul	r25, r19
    2498:	f0 0d       	add	r31, r0
    249a:	11 24       	eor	r1, r1
    249c:	e1 51       	subi	r30, 0x11	; 17
    249e:	fc 4e       	sbci	r31, 0xEC	; 236
    24a0:	90 81       	ld	r25, Z
    24a2:	99 23       	and	r25, r25
    24a4:	91 f3       	breq	.-28     	; 0x248a <vTaskSwitchContext+0x50>
    24a6:	9b e0       	ldi	r25, 0x0B	; 11
    24a8:	92 9f       	mul	r25, r18
    24aa:	a0 01       	movw	r20, r0
    24ac:	93 9f       	mul	r25, r19
    24ae:	50 0d       	add	r21, r0
    24b0:	11 24       	eor	r1, r1
    24b2:	df 01       	movw	r26, r30
    24b4:	01 80       	ldd	r0, Z+1	; 0x01
    24b6:	f2 81       	ldd	r31, Z+2	; 0x02
    24b8:	e0 2d       	mov	r30, r0
    24ba:	04 80       	ldd	r0, Z+4	; 0x04
    24bc:	f5 81       	ldd	r31, Z+5	; 0x05
    24be:	e0 2d       	mov	r30, r0
    24c0:	12 96       	adiw	r26, 0x02	; 2
    24c2:	fc 93       	st	X, r31
    24c4:	ee 93       	st	-X, r30
    24c6:	11 97       	sbiw	r26, 0x01	; 1
    24c8:	4e 50       	subi	r20, 0x0E	; 14
    24ca:	5c 4e       	sbci	r21, 0xEC	; 236
    24cc:	e4 17       	cp	r30, r20
    24ce:	f5 07       	cpc	r31, r21
    24d0:	29 f4       	brne	.+10     	; 0x24dc <vTaskSwitchContext+0xa2>
    24d2:	44 81       	ldd	r20, Z+4	; 0x04
    24d4:	55 81       	ldd	r21, Z+5	; 0x05
    24d6:	fd 01       	movw	r30, r26
    24d8:	52 83       	std	Z+2, r21	; 0x02
    24da:	41 83       	std	Z+1, r20	; 0x01
    24dc:	9b e0       	ldi	r25, 0x0B	; 11
    24de:	92 9f       	mul	r25, r18
    24e0:	f0 01       	movw	r30, r0
    24e2:	93 9f       	mul	r25, r19
    24e4:	f0 0d       	add	r31, r0
    24e6:	11 24       	eor	r1, r1
    24e8:	e1 51       	subi	r30, 0x11	; 17
    24ea:	fc 4e       	sbci	r31, 0xEC	; 236
    24ec:	01 80       	ldd	r0, Z+1	; 0x01
    24ee:	f2 81       	ldd	r31, Z+2	; 0x02
    24f0:	e0 2d       	mov	r30, r0
    24f2:	20 85       	ldd	r18, Z+8	; 0x08
    24f4:	31 85       	ldd	r19, Z+9	; 0x09
    24f6:	30 93 5e 14 	sts	0x145E, r19	; 0x80145e <pxCurrentTCB+0x1>
    24fa:	20 93 5d 14 	sts	0x145D, r18	; 0x80145d <pxCurrentTCB>
    24fe:	80 93 ad 13 	sts	0x13AD, r24	; 0x8013ad <uxTopReadyPriority>
    2502:	08 95       	ret

00002504 <vTaskPlaceOnEventList>:
    2504:	cf 92       	push	r12
    2506:	df 92       	push	r13
    2508:	ef 92       	push	r14
    250a:	ff 92       	push	r15
    250c:	6a 01       	movw	r12, r20
    250e:	7b 01       	movw	r14, r22
    2510:	60 91 5d 14 	lds	r22, 0x145D	; 0x80145d <pxCurrentTCB>
    2514:	70 91 5e 14 	lds	r23, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2518:	62 5f       	subi	r22, 0xF2	; 242
    251a:	7f 4f       	sbci	r23, 0xFF	; 255
    251c:	0e 94 5e 05 	call	0xabc	; 0xabc <vListInsert>
    2520:	41 e0       	ldi	r20, 0x01	; 1
    2522:	c7 01       	movw	r24, r14
    2524:	b6 01       	movw	r22, r12
    2526:	c7 db       	rcall	.-2162   	; 0x1cb6 <prvAddCurrentTaskToDelayedList>
    2528:	ff 90       	pop	r15
    252a:	ef 90       	pop	r14
    252c:	df 90       	pop	r13
    252e:	cf 90       	pop	r12
    2530:	08 95       	ret

00002532 <vTaskPlaceOnUnorderedEventList>:
    2532:	0f 93       	push	r16
    2534:	1f 93       	push	r17
    2536:	cf 93       	push	r28
    2538:	df 93       	push	r29
    253a:	fc 01       	movw	r30, r24
    253c:	a0 91 5d 14 	lds	r26, 0x145D	; 0x80145d <pxCurrentTCB>
    2540:	b0 91 5e 14 	lds	r27, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2544:	70 68       	ori	r23, 0x80	; 128
    2546:	1e 96       	adiw	r26, 0x0e	; 14
    2548:	4d 93       	st	X+, r20
    254a:	5d 93       	st	X+, r21
    254c:	6d 93       	st	X+, r22
    254e:	7c 93       	st	X, r23
    2550:	51 97       	sbiw	r26, 0x11	; 17
    2552:	a1 81       	ldd	r26, Z+1	; 0x01
    2554:	b2 81       	ldd	r27, Z+2	; 0x02
    2556:	c0 91 5d 14 	lds	r28, 0x145D	; 0x80145d <pxCurrentTCB>
    255a:	d0 91 5e 14 	lds	r29, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    255e:	bb 8b       	std	Y+19, r27	; 0x13
    2560:	aa 8b       	std	Y+18, r26	; 0x12
    2562:	c0 91 5d 14 	lds	r28, 0x145D	; 0x80145d <pxCurrentTCB>
    2566:	d0 91 5e 14 	lds	r29, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    256a:	16 96       	adiw	r26, 0x06	; 6
    256c:	8d 91       	ld	r24, X+
    256e:	9c 91       	ld	r25, X
    2570:	17 97       	sbiw	r26, 0x07	; 7
    2572:	9d 8b       	std	Y+21, r25	; 0x15
    2574:	8c 8b       	std	Y+20, r24	; 0x14
    2576:	16 96       	adiw	r26, 0x06	; 6
    2578:	cd 91       	ld	r28, X+
    257a:	dc 91       	ld	r29, X
    257c:	17 97       	sbiw	r26, 0x07	; 7
    257e:	80 91 5d 14 	lds	r24, 0x145D	; 0x80145d <pxCurrentTCB>
    2582:	90 91 5e 14 	lds	r25, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2586:	0e 96       	adiw	r24, 0x0e	; 14
    2588:	9d 83       	std	Y+5, r25	; 0x05
    258a:	8c 83       	std	Y+4, r24	; 0x04
    258c:	80 91 5d 14 	lds	r24, 0x145D	; 0x80145d <pxCurrentTCB>
    2590:	90 91 5e 14 	lds	r25, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2594:	0e 96       	adiw	r24, 0x0e	; 14
    2596:	17 96       	adiw	r26, 0x07	; 7
    2598:	9c 93       	st	X, r25
    259a:	8e 93       	st	-X, r24
    259c:	16 97       	sbiw	r26, 0x06	; 6
    259e:	a0 91 5d 14 	lds	r26, 0x145D	; 0x80145d <pxCurrentTCB>
    25a2:	b0 91 5e 14 	lds	r27, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    25a6:	59 96       	adiw	r26, 0x19	; 25
    25a8:	fc 93       	st	X, r31
    25aa:	ee 93       	st	-X, r30
    25ac:	58 97       	sbiw	r26, 0x18	; 24
    25ae:	80 81       	ld	r24, Z
    25b0:	8f 5f       	subi	r24, 0xFF	; 255
    25b2:	80 83       	st	Z, r24
    25b4:	41 e0       	ldi	r20, 0x01	; 1
    25b6:	c9 01       	movw	r24, r18
    25b8:	b8 01       	movw	r22, r16
    25ba:	7d db       	rcall	.-2310   	; 0x1cb6 <prvAddCurrentTaskToDelayedList>
    25bc:	df 91       	pop	r29
    25be:	cf 91       	pop	r28
    25c0:	1f 91       	pop	r17
    25c2:	0f 91       	pop	r16
    25c4:	08 95       	ret

000025c6 <vTaskPlaceOnEventListRestricted>:
    25c6:	cf 93       	push	r28
    25c8:	df 93       	push	r29
    25ca:	fc 01       	movw	r30, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	ba 01       	movw	r22, r20
    25d0:	a1 81       	ldd	r26, Z+1	; 0x01
    25d2:	b2 81       	ldd	r27, Z+2	; 0x02
    25d4:	c0 91 5d 14 	lds	r28, 0x145D	; 0x80145d <pxCurrentTCB>
    25d8:	d0 91 5e 14 	lds	r29, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    25dc:	bb 8b       	std	Y+19, r27	; 0x13
    25de:	aa 8b       	std	Y+18, r26	; 0x12
    25e0:	c0 91 5d 14 	lds	r28, 0x145D	; 0x80145d <pxCurrentTCB>
    25e4:	d0 91 5e 14 	lds	r29, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    25e8:	16 96       	adiw	r26, 0x06	; 6
    25ea:	4d 91       	ld	r20, X+
    25ec:	5c 91       	ld	r21, X
    25ee:	17 97       	sbiw	r26, 0x07	; 7
    25f0:	5d 8b       	std	Y+21, r21	; 0x15
    25f2:	4c 8b       	std	Y+20, r20	; 0x14
    25f4:	16 96       	adiw	r26, 0x06	; 6
    25f6:	cd 91       	ld	r28, X+
    25f8:	dc 91       	ld	r29, X
    25fa:	17 97       	sbiw	r26, 0x07	; 7
    25fc:	40 91 5d 14 	lds	r20, 0x145D	; 0x80145d <pxCurrentTCB>
    2600:	50 91 5e 14 	lds	r21, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2604:	42 5f       	subi	r20, 0xF2	; 242
    2606:	5f 4f       	sbci	r21, 0xFF	; 255
    2608:	5d 83       	std	Y+5, r21	; 0x05
    260a:	4c 83       	std	Y+4, r20	; 0x04
    260c:	40 91 5d 14 	lds	r20, 0x145D	; 0x80145d <pxCurrentTCB>
    2610:	50 91 5e 14 	lds	r21, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2614:	42 5f       	subi	r20, 0xF2	; 242
    2616:	5f 4f       	sbci	r21, 0xFF	; 255
    2618:	17 96       	adiw	r26, 0x07	; 7
    261a:	5c 93       	st	X, r21
    261c:	4e 93       	st	-X, r20
    261e:	16 97       	sbiw	r26, 0x06	; 6
    2620:	a0 91 5d 14 	lds	r26, 0x145D	; 0x80145d <pxCurrentTCB>
    2624:	b0 91 5e 14 	lds	r27, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2628:	59 96       	adiw	r26, 0x19	; 25
    262a:	fc 93       	st	X, r31
    262c:	ee 93       	st	-X, r30
    262e:	58 97       	sbiw	r26, 0x18	; 24
    2630:	30 81       	ld	r19, Z
    2632:	3f 5f       	subi	r19, 0xFF	; 255
    2634:	30 83       	st	Z, r19
    2636:	22 23       	and	r18, r18
    2638:	19 f0       	breq	.+6      	; 0x2640 <vTaskPlaceOnEventListRestricted+0x7a>
    263a:	6f ef       	ldi	r22, 0xFF	; 255
    263c:	7f ef       	ldi	r23, 0xFF	; 255
    263e:	cb 01       	movw	r24, r22
    2640:	42 2f       	mov	r20, r18
    2642:	39 db       	rcall	.-2446   	; 0x1cb6 <prvAddCurrentTaskToDelayedList>
    2644:	df 91       	pop	r29
    2646:	cf 91       	pop	r28
    2648:	08 95       	ret

0000264a <xTaskRemoveFromEventList>:
    264a:	cf 93       	push	r28
    264c:	df 93       	push	r29
    264e:	dc 01       	movw	r26, r24
    2650:	17 96       	adiw	r26, 0x07	; 7
    2652:	ed 91       	ld	r30, X+
    2654:	fc 91       	ld	r31, X
    2656:	18 97       	sbiw	r26, 0x08	; 8
    2658:	00 84       	ldd	r0, Z+8	; 0x08
    265a:	f1 85       	ldd	r31, Z+9	; 0x09
    265c:	e0 2d       	mov	r30, r0
    265e:	a0 8d       	ldd	r26, Z+24	; 0x18
    2660:	b1 8d       	ldd	r27, Z+25	; 0x19
    2662:	c2 89       	ldd	r28, Z+18	; 0x12
    2664:	d3 89       	ldd	r29, Z+19	; 0x13
    2666:	84 89       	ldd	r24, Z+20	; 0x14
    2668:	95 89       	ldd	r25, Z+21	; 0x15
    266a:	9f 83       	std	Y+7, r25	; 0x07
    266c:	8e 83       	std	Y+6, r24	; 0x06
    266e:	c4 89       	ldd	r28, Z+20	; 0x14
    2670:	d5 89       	ldd	r29, Z+21	; 0x15
    2672:	82 89       	ldd	r24, Z+18	; 0x12
    2674:	93 89       	ldd	r25, Z+19	; 0x13
    2676:	9d 83       	std	Y+5, r25	; 0x05
    2678:	8c 83       	std	Y+4, r24	; 0x04
    267a:	11 96       	adiw	r26, 0x01	; 1
    267c:	8d 91       	ld	r24, X+
    267e:	9c 91       	ld	r25, X
    2680:	12 97       	sbiw	r26, 0x02	; 2
    2682:	9f 01       	movw	r18, r30
    2684:	22 5f       	subi	r18, 0xF2	; 242
    2686:	3f 4f       	sbci	r19, 0xFF	; 255
    2688:	82 17       	cp	r24, r18
    268a:	93 07       	cpc	r25, r19
    268c:	31 f4       	brne	.+12     	; 0x269a <xTaskRemoveFromEventList+0x50>
    268e:	84 89       	ldd	r24, Z+20	; 0x14
    2690:	95 89       	ldd	r25, Z+21	; 0x15
    2692:	12 96       	adiw	r26, 0x02	; 2
    2694:	9c 93       	st	X, r25
    2696:	8e 93       	st	-X, r24
    2698:	11 97       	sbiw	r26, 0x01	; 1
    269a:	11 8e       	std	Z+25, r1	; 0x19
    269c:	10 8e       	std	Z+24, r1	; 0x18
    269e:	8c 91       	ld	r24, X
    26a0:	81 50       	subi	r24, 0x01	; 1
    26a2:	8c 93       	st	X, r24
    26a4:	80 91 9e 13 	lds	r24, 0x139E	; 0x80139e <uxSchedulerSuspended>
    26a8:	81 11       	cpse	r24, r1
    26aa:	52 c0       	rjmp	.+164    	; 0x2750 <xTaskRemoveFromEventList+0x106>
    26ac:	a4 85       	ldd	r26, Z+12	; 0x0c
    26ae:	b5 85       	ldd	r27, Z+13	; 0x0d
    26b0:	c6 81       	ldd	r28, Z+6	; 0x06
    26b2:	d7 81       	ldd	r29, Z+7	; 0x07
    26b4:	80 85       	ldd	r24, Z+8	; 0x08
    26b6:	91 85       	ldd	r25, Z+9	; 0x09
    26b8:	9f 83       	std	Y+7, r25	; 0x07
    26ba:	8e 83       	std	Y+6, r24	; 0x06
    26bc:	c0 85       	ldd	r28, Z+8	; 0x08
    26be:	d1 85       	ldd	r29, Z+9	; 0x09
    26c0:	86 81       	ldd	r24, Z+6	; 0x06
    26c2:	97 81       	ldd	r25, Z+7	; 0x07
    26c4:	9d 83       	std	Y+5, r25	; 0x05
    26c6:	8c 83       	std	Y+4, r24	; 0x04
    26c8:	11 96       	adiw	r26, 0x01	; 1
    26ca:	8d 91       	ld	r24, X+
    26cc:	9c 91       	ld	r25, X
    26ce:	12 97       	sbiw	r26, 0x02	; 2
    26d0:	9f 01       	movw	r18, r30
    26d2:	2e 5f       	subi	r18, 0xFE	; 254
    26d4:	3f 4f       	sbci	r19, 0xFF	; 255
    26d6:	82 17       	cp	r24, r18
    26d8:	93 07       	cpc	r25, r19
    26da:	31 f4       	brne	.+12     	; 0x26e8 <xTaskRemoveFromEventList+0x9e>
    26dc:	80 85       	ldd	r24, Z+8	; 0x08
    26de:	91 85       	ldd	r25, Z+9	; 0x09
    26e0:	12 96       	adiw	r26, 0x02	; 2
    26e2:	9c 93       	st	X, r25
    26e4:	8e 93       	st	-X, r24
    26e6:	11 97       	sbiw	r26, 0x01	; 1
    26e8:	15 86       	std	Z+13, r1	; 0x0d
    26ea:	14 86       	std	Z+12, r1	; 0x0c
    26ec:	8c 91       	ld	r24, X
    26ee:	81 50       	subi	r24, 0x01	; 1
    26f0:	8c 93       	st	X, r24
    26f2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    26f4:	80 91 ad 13 	lds	r24, 0x13AD	; 0x8013ad <uxTopReadyPriority>
    26f8:	8a 17       	cp	r24, r26
    26fa:	10 f4       	brcc	.+4      	; 0x2700 <xTaskRemoveFromEventList+0xb6>
    26fc:	a0 93 ad 13 	sts	0x13AD, r26	; 0x8013ad <uxTopReadyPriority>
    2700:	8b e0       	ldi	r24, 0x0B	; 11
    2702:	8a 9f       	mul	r24, r26
    2704:	d0 01       	movw	r26, r0
    2706:	11 24       	eor	r1, r1
    2708:	a1 51       	subi	r26, 0x11	; 17
    270a:	bc 4e       	sbci	r27, 0xEC	; 236
    270c:	11 96       	adiw	r26, 0x01	; 1
    270e:	0d 90       	ld	r0, X+
    2710:	bc 91       	ld	r27, X
    2712:	a0 2d       	mov	r26, r0
    2714:	b7 83       	std	Z+7, r27	; 0x07
    2716:	a6 83       	std	Z+6, r26	; 0x06
    2718:	16 96       	adiw	r26, 0x06	; 6
    271a:	4d 91       	ld	r20, X+
    271c:	5c 91       	ld	r21, X
    271e:	17 97       	sbiw	r26, 0x07	; 7
    2720:	51 87       	std	Z+9, r21	; 0x09
    2722:	40 87       	std	Z+8, r20	; 0x08
    2724:	16 96       	adiw	r26, 0x06	; 6
    2726:	cd 91       	ld	r28, X+
    2728:	dc 91       	ld	r29, X
    272a:	17 97       	sbiw	r26, 0x07	; 7
    272c:	3d 83       	std	Y+5, r19	; 0x05
    272e:	2c 83       	std	Y+4, r18	; 0x04
    2730:	17 96       	adiw	r26, 0x07	; 7
    2732:	3c 93       	st	X, r19
    2734:	2e 93       	st	-X, r18
    2736:	16 97       	sbiw	r26, 0x06	; 6
    2738:	a2 8d       	ldd	r26, Z+26	; 0x1a
    273a:	8a 9f       	mul	r24, r26
    273c:	d0 01       	movw	r26, r0
    273e:	11 24       	eor	r1, r1
    2740:	a1 51       	subi	r26, 0x11	; 17
    2742:	bc 4e       	sbci	r27, 0xEC	; 236
    2744:	b5 87       	std	Z+13, r27	; 0x0d
    2746:	a4 87       	std	Z+12, r26	; 0x0c
    2748:	8c 91       	ld	r24, X
    274a:	8f 5f       	subi	r24, 0xFF	; 255
    274c:	8c 93       	st	X, r24
    274e:	1c c0       	rjmp	.+56     	; 0x2788 <xTaskRemoveFromEventList+0x13e>
    2750:	4a ec       	ldi	r20, 0xCA	; 202
    2752:	53 e1       	ldi	r21, 0x13	; 19
    2754:	da 01       	movw	r26, r20
    2756:	11 96       	adiw	r26, 0x01	; 1
    2758:	cd 91       	ld	r28, X+
    275a:	dc 91       	ld	r29, X
    275c:	12 97       	sbiw	r26, 0x02	; 2
    275e:	d3 8b       	std	Z+19, r29	; 0x13
    2760:	c2 8b       	std	Z+18, r28	; 0x12
    2762:	8e 81       	ldd	r24, Y+6	; 0x06
    2764:	9f 81       	ldd	r25, Y+7	; 0x07
    2766:	95 8b       	std	Z+21, r25	; 0x15
    2768:	84 8b       	std	Z+20, r24	; 0x14
    276a:	8e 81       	ldd	r24, Y+6	; 0x06
    276c:	9f 81       	ldd	r25, Y+7	; 0x07
    276e:	dc 01       	movw	r26, r24
    2770:	15 96       	adiw	r26, 0x05	; 5
    2772:	3c 93       	st	X, r19
    2774:	2e 93       	st	-X, r18
    2776:	14 97       	sbiw	r26, 0x04	; 4
    2778:	3f 83       	std	Y+7, r19	; 0x07
    277a:	2e 83       	std	Y+6, r18	; 0x06
    277c:	51 8f       	std	Z+25, r21	; 0x19
    277e:	40 8f       	std	Z+24, r20	; 0x18
    2780:	da 01       	movw	r26, r20
    2782:	8c 91       	ld	r24, X
    2784:	8f 5f       	subi	r24, 0xFF	; 255
    2786:	8c 93       	st	X, r24
    2788:	92 8d       	ldd	r25, Z+26	; 0x1a
    278a:	e0 91 5d 14 	lds	r30, 0x145D	; 0x80145d <pxCurrentTCB>
    278e:	f0 91 5e 14 	lds	r31, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2792:	82 8d       	ldd	r24, Z+26	; 0x1a
    2794:	89 17       	cp	r24, r25
    2796:	20 f4       	brcc	.+8      	; 0x27a0 <xTaskRemoveFromEventList+0x156>
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	80 93 a7 13 	sts	0x13A7, r24	; 0x8013a7 <xYieldPending>
    279e:	01 c0       	rjmp	.+2      	; 0x27a2 <xTaskRemoveFromEventList+0x158>
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	df 91       	pop	r29
    27a4:	cf 91       	pop	r28
    27a6:	08 95       	ret

000027a8 <vTaskRemoveFromUnorderedEventList>:
    27a8:	cf 93       	push	r28
    27aa:	df 93       	push	r29
    27ac:	dc 01       	movw	r26, r24
    27ae:	70 68       	ori	r23, 0x80	; 128
    27b0:	4d 93       	st	X+, r20
    27b2:	5d 93       	st	X+, r21
    27b4:	6d 93       	st	X+, r22
    27b6:	7c 93       	st	X, r23
    27b8:	13 97       	sbiw	r26, 0x03	; 3
    27ba:	18 96       	adiw	r26, 0x08	; 8
    27bc:	ed 91       	ld	r30, X+
    27be:	fc 91       	ld	r31, X
    27c0:	19 97       	sbiw	r26, 0x09	; 9
    27c2:	1a 96       	adiw	r26, 0x0a	; 10
    27c4:	4d 91       	ld	r20, X+
    27c6:	5c 91       	ld	r21, X
    27c8:	1b 97       	sbiw	r26, 0x0b	; 11
    27ca:	14 96       	adiw	r26, 0x04	; 4
    27cc:	8d 91       	ld	r24, X+
    27ce:	9c 91       	ld	r25, X
    27d0:	15 97       	sbiw	r26, 0x05	; 5
    27d2:	16 96       	adiw	r26, 0x06	; 6
    27d4:	2d 91       	ld	r18, X+
    27d6:	3c 91       	ld	r19, X
    27d8:	17 97       	sbiw	r26, 0x07	; 7
    27da:	ec 01       	movw	r28, r24
    27dc:	3f 83       	std	Y+7, r19	; 0x07
    27de:	2e 83       	std	Y+6, r18	; 0x06
    27e0:	16 96       	adiw	r26, 0x06	; 6
    27e2:	8d 91       	ld	r24, X+
    27e4:	9c 91       	ld	r25, X
    27e6:	17 97       	sbiw	r26, 0x07	; 7
    27e8:	14 96       	adiw	r26, 0x04	; 4
    27ea:	2d 91       	ld	r18, X+
    27ec:	3c 91       	ld	r19, X
    27ee:	15 97       	sbiw	r26, 0x05	; 5
    27f0:	ec 01       	movw	r28, r24
    27f2:	3d 83       	std	Y+5, r19	; 0x05
    27f4:	2c 83       	std	Y+4, r18	; 0x04
    27f6:	ea 01       	movw	r28, r20
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	9a 81       	ldd	r25, Y+2	; 0x02
    27fc:	a8 17       	cp	r26, r24
    27fe:	b9 07       	cpc	r27, r25
    2800:	31 f4       	brne	.+12     	; 0x280e <vTaskRemoveFromUnorderedEventList+0x66>
    2802:	16 96       	adiw	r26, 0x06	; 6
    2804:	8d 91       	ld	r24, X+
    2806:	9c 91       	ld	r25, X
    2808:	17 97       	sbiw	r26, 0x07	; 7
    280a:	9a 83       	std	Y+2, r25	; 0x02
    280c:	89 83       	std	Y+1, r24	; 0x01
    280e:	1b 96       	adiw	r26, 0x0b	; 11
    2810:	1c 92       	st	X, r1
    2812:	1e 92       	st	-X, r1
    2814:	1a 97       	sbiw	r26, 0x0a	; 10
    2816:	da 01       	movw	r26, r20
    2818:	8c 91       	ld	r24, X
    281a:	81 50       	subi	r24, 0x01	; 1
    281c:	8c 93       	st	X, r24
    281e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2820:	b5 85       	ldd	r27, Z+13	; 0x0d
    2822:	c6 81       	ldd	r28, Z+6	; 0x06
    2824:	d7 81       	ldd	r29, Z+7	; 0x07
    2826:	80 85       	ldd	r24, Z+8	; 0x08
    2828:	91 85       	ldd	r25, Z+9	; 0x09
    282a:	9f 83       	std	Y+7, r25	; 0x07
    282c:	8e 83       	std	Y+6, r24	; 0x06
    282e:	c0 85       	ldd	r28, Z+8	; 0x08
    2830:	d1 85       	ldd	r29, Z+9	; 0x09
    2832:	86 81       	ldd	r24, Z+6	; 0x06
    2834:	97 81       	ldd	r25, Z+7	; 0x07
    2836:	9d 83       	std	Y+5, r25	; 0x05
    2838:	8c 83       	std	Y+4, r24	; 0x04
    283a:	11 96       	adiw	r26, 0x01	; 1
    283c:	8d 91       	ld	r24, X+
    283e:	9c 91       	ld	r25, X
    2840:	12 97       	sbiw	r26, 0x02	; 2
    2842:	9f 01       	movw	r18, r30
    2844:	2e 5f       	subi	r18, 0xFE	; 254
    2846:	3f 4f       	sbci	r19, 0xFF	; 255
    2848:	82 17       	cp	r24, r18
    284a:	93 07       	cpc	r25, r19
    284c:	31 f4       	brne	.+12     	; 0x285a <vTaskRemoveFromUnorderedEventList+0xb2>
    284e:	80 85       	ldd	r24, Z+8	; 0x08
    2850:	91 85       	ldd	r25, Z+9	; 0x09
    2852:	12 96       	adiw	r26, 0x02	; 2
    2854:	9c 93       	st	X, r25
    2856:	8e 93       	st	-X, r24
    2858:	11 97       	sbiw	r26, 0x01	; 1
    285a:	15 86       	std	Z+13, r1	; 0x0d
    285c:	14 86       	std	Z+12, r1	; 0x0c
    285e:	8c 91       	ld	r24, X
    2860:	81 50       	subi	r24, 0x01	; 1
    2862:	8c 93       	st	X, r24
    2864:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2866:	80 91 ad 13 	lds	r24, 0x13AD	; 0x8013ad <uxTopReadyPriority>
    286a:	8a 17       	cp	r24, r26
    286c:	10 f4       	brcc	.+4      	; 0x2872 <vTaskRemoveFromUnorderedEventList+0xca>
    286e:	a0 93 ad 13 	sts	0x13AD, r26	; 0x8013ad <uxTopReadyPriority>
    2872:	8b e0       	ldi	r24, 0x0B	; 11
    2874:	8a 9f       	mul	r24, r26
    2876:	d0 01       	movw	r26, r0
    2878:	11 24       	eor	r1, r1
    287a:	a1 51       	subi	r26, 0x11	; 17
    287c:	bc 4e       	sbci	r27, 0xEC	; 236
    287e:	11 96       	adiw	r26, 0x01	; 1
    2880:	0d 90       	ld	r0, X+
    2882:	bc 91       	ld	r27, X
    2884:	a0 2d       	mov	r26, r0
    2886:	b7 83       	std	Z+7, r27	; 0x07
    2888:	a6 83       	std	Z+6, r26	; 0x06
    288a:	16 96       	adiw	r26, 0x06	; 6
    288c:	4d 91       	ld	r20, X+
    288e:	5c 91       	ld	r21, X
    2890:	17 97       	sbiw	r26, 0x07	; 7
    2892:	51 87       	std	Z+9, r21	; 0x09
    2894:	40 87       	std	Z+8, r20	; 0x08
    2896:	16 96       	adiw	r26, 0x06	; 6
    2898:	cd 91       	ld	r28, X+
    289a:	dc 91       	ld	r29, X
    289c:	17 97       	sbiw	r26, 0x07	; 7
    289e:	3d 83       	std	Y+5, r19	; 0x05
    28a0:	2c 83       	std	Y+4, r18	; 0x04
    28a2:	17 96       	adiw	r26, 0x07	; 7
    28a4:	3c 93       	st	X, r19
    28a6:	2e 93       	st	-X, r18
    28a8:	16 97       	sbiw	r26, 0x06	; 6
    28aa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    28ac:	8a 9f       	mul	r24, r26
    28ae:	d0 01       	movw	r26, r0
    28b0:	11 24       	eor	r1, r1
    28b2:	a1 51       	subi	r26, 0x11	; 17
    28b4:	bc 4e       	sbci	r27, 0xEC	; 236
    28b6:	b5 87       	std	Z+13, r27	; 0x0d
    28b8:	a4 87       	std	Z+12, r26	; 0x0c
    28ba:	8c 91       	ld	r24, X
    28bc:	8f 5f       	subi	r24, 0xFF	; 255
    28be:	8c 93       	st	X, r24
    28c0:	92 8d       	ldd	r25, Z+26	; 0x1a
    28c2:	e0 91 5d 14 	lds	r30, 0x145D	; 0x80145d <pxCurrentTCB>
    28c6:	f0 91 5e 14 	lds	r31, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    28ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    28cc:	89 17       	cp	r24, r25
    28ce:	18 f4       	brcc	.+6      	; 0x28d6 <vTaskRemoveFromUnorderedEventList+0x12e>
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	80 93 a7 13 	sts	0x13A7, r24	; 0x8013a7 <xYieldPending>
    28d6:	df 91       	pop	r29
    28d8:	cf 91       	pop	r28
    28da:	08 95       	ret

000028dc <vTaskSetTimeOutState>:
    28dc:	0f b6       	in	r0, 0x3f	; 63
    28de:	f8 94       	cli
    28e0:	0f 92       	push	r0
    28e2:	20 91 a6 13 	lds	r18, 0x13A6	; 0x8013a6 <xNumOfOverflows>
    28e6:	fc 01       	movw	r30, r24
    28e8:	20 83       	st	Z, r18
    28ea:	40 91 ae 13 	lds	r20, 0x13AE	; 0x8013ae <xTickCount>
    28ee:	50 91 af 13 	lds	r21, 0x13AF	; 0x8013af <xTickCount+0x1>
    28f2:	60 91 b0 13 	lds	r22, 0x13B0	; 0x8013b0 <xTickCount+0x2>
    28f6:	70 91 b1 13 	lds	r23, 0x13B1	; 0x8013b1 <xTickCount+0x3>
    28fa:	41 83       	std	Z+1, r20	; 0x01
    28fc:	52 83       	std	Z+2, r21	; 0x02
    28fe:	63 83       	std	Z+3, r22	; 0x03
    2900:	74 83       	std	Z+4, r23	; 0x04
    2902:	0f 90       	pop	r0
    2904:	0f be       	out	0x3f, r0	; 63
    2906:	08 95       	ret

00002908 <vTaskInternalSetTimeOutState>:
    2908:	20 91 a6 13 	lds	r18, 0x13A6	; 0x8013a6 <xNumOfOverflows>
    290c:	fc 01       	movw	r30, r24
    290e:	20 83       	st	Z, r18
    2910:	40 91 ae 13 	lds	r20, 0x13AE	; 0x8013ae <xTickCount>
    2914:	50 91 af 13 	lds	r21, 0x13AF	; 0x8013af <xTickCount+0x1>
    2918:	60 91 b0 13 	lds	r22, 0x13B0	; 0x8013b0 <xTickCount+0x2>
    291c:	70 91 b1 13 	lds	r23, 0x13B1	; 0x8013b1 <xTickCount+0x3>
    2920:	41 83       	std	Z+1, r20	; 0x01
    2922:	52 83       	std	Z+2, r21	; 0x02
    2924:	63 83       	std	Z+3, r22	; 0x03
    2926:	74 83       	std	Z+4, r23	; 0x04
    2928:	08 95       	ret

0000292a <xTaskCheckForTimeOut>:
    292a:	8f 92       	push	r8
    292c:	9f 92       	push	r9
    292e:	af 92       	push	r10
    2930:	bf 92       	push	r11
    2932:	cf 92       	push	r12
    2934:	df 92       	push	r13
    2936:	ef 92       	push	r14
    2938:	ff 92       	push	r15
    293a:	0f 93       	push	r16
    293c:	1f 93       	push	r17
    293e:	cf 93       	push	r28
    2940:	df 93       	push	r29
    2942:	fb 01       	movw	r30, r22
    2944:	0f b6       	in	r0, 0x3f	; 63
    2946:	f8 94       	cli
    2948:	0f 92       	push	r0
    294a:	c0 90 ae 13 	lds	r12, 0x13AE	; 0x8013ae <xTickCount>
    294e:	d0 90 af 13 	lds	r13, 0x13AF	; 0x8013af <xTickCount+0x1>
    2952:	e0 90 b0 13 	lds	r14, 0x13B0	; 0x8013b0 <xTickCount+0x2>
    2956:	f0 90 b1 13 	lds	r15, 0x13B1	; 0x8013b1 <xTickCount+0x3>
    295a:	dc 01       	movw	r26, r24
    295c:	11 96       	adiw	r26, 0x01	; 1
    295e:	0d 91       	ld	r16, X+
    2960:	1d 91       	ld	r17, X+
    2962:	2d 91       	ld	r18, X+
    2964:	3c 91       	ld	r19, X
    2966:	14 97       	sbiw	r26, 0x04	; 4
    2968:	46 01       	movw	r8, r12
    296a:	57 01       	movw	r10, r14
    296c:	80 1a       	sub	r8, r16
    296e:	91 0a       	sbc	r9, r17
    2970:	a2 0a       	sbc	r10, r18
    2972:	b3 0a       	sbc	r11, r19
    2974:	40 81       	ld	r20, Z
    2976:	51 81       	ldd	r21, Z+1	; 0x01
    2978:	62 81       	ldd	r22, Z+2	; 0x02
    297a:	73 81       	ldd	r23, Z+3	; 0x03
    297c:	4f 3f       	cpi	r20, 0xFF	; 255
    297e:	bf ef       	ldi	r27, 0xFF	; 255
    2980:	5b 07       	cpc	r21, r27
    2982:	6b 07       	cpc	r22, r27
    2984:	7b 07       	cpc	r23, r27
    2986:	39 f1       	breq	.+78     	; 0x29d6 <xTaskCheckForTimeOut+0xac>
    2988:	ec 01       	movw	r28, r24
    298a:	b8 81       	ld	r27, Y
    298c:	a0 91 a6 13 	lds	r26, 0x13A6	; 0x8013a6 <xNumOfOverflows>
    2990:	ba 17       	cp	r27, r26
    2992:	59 f0       	breq	.+22     	; 0x29aa <xTaskCheckForTimeOut+0x80>
    2994:	c0 16       	cp	r12, r16
    2996:	d1 06       	cpc	r13, r17
    2998:	e2 06       	cpc	r14, r18
    299a:	f3 06       	cpc	r15, r19
    299c:	30 f0       	brcs	.+12     	; 0x29aa <xTaskCheckForTimeOut+0x80>
    299e:	10 82       	st	Z, r1
    29a0:	11 82       	std	Z+1, r1	; 0x01
    29a2:	12 82       	std	Z+2, r1	; 0x02
    29a4:	13 82       	std	Z+3, r1	; 0x03
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	17 c0       	rjmp	.+46     	; 0x29d8 <xTaskCheckForTimeOut+0xae>
    29aa:	84 16       	cp	r8, r20
    29ac:	95 06       	cpc	r9, r21
    29ae:	a6 06       	cpc	r10, r22
    29b0:	b7 06       	cpc	r11, r23
    29b2:	58 f4       	brcc	.+22     	; 0x29ca <xTaskCheckForTimeOut+0xa0>
    29b4:	48 19       	sub	r20, r8
    29b6:	59 09       	sbc	r21, r9
    29b8:	6a 09       	sbc	r22, r10
    29ba:	7b 09       	sbc	r23, r11
    29bc:	40 83       	st	Z, r20
    29be:	51 83       	std	Z+1, r21	; 0x01
    29c0:	62 83       	std	Z+2, r22	; 0x02
    29c2:	73 83       	std	Z+3, r23	; 0x03
    29c4:	a1 df       	rcall	.-190    	; 0x2908 <vTaskInternalSetTimeOutState>
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	07 c0       	rjmp	.+14     	; 0x29d8 <xTaskCheckForTimeOut+0xae>
    29ca:	10 82       	st	Z, r1
    29cc:	11 82       	std	Z+1, r1	; 0x01
    29ce:	12 82       	std	Z+2, r1	; 0x02
    29d0:	13 82       	std	Z+3, r1	; 0x03
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	01 c0       	rjmp	.+2      	; 0x29d8 <xTaskCheckForTimeOut+0xae>
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	0f 90       	pop	r0
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	df 91       	pop	r29
    29de:	cf 91       	pop	r28
    29e0:	1f 91       	pop	r17
    29e2:	0f 91       	pop	r16
    29e4:	ff 90       	pop	r15
    29e6:	ef 90       	pop	r14
    29e8:	df 90       	pop	r13
    29ea:	cf 90       	pop	r12
    29ec:	bf 90       	pop	r11
    29ee:	af 90       	pop	r10
    29f0:	9f 90       	pop	r9
    29f2:	8f 90       	pop	r8
    29f4:	08 95       	ret

000029f6 <vTaskMissedYield>:
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	80 93 a7 13 	sts	0x13A7, r24	; 0x8013a7 <xYieldPending>
    29fc:	08 95       	ret

000029fe <xTaskGetCurrentTaskHandle>:
    29fe:	80 91 5d 14 	lds	r24, 0x145D	; 0x80145d <pxCurrentTCB>
    2a02:	90 91 5e 14 	lds	r25, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2a06:	08 95       	ret

00002a08 <xTaskGetSchedulerState>:
    2a08:	80 91 ac 13 	lds	r24, 0x13AC	; 0x8013ac <xSchedulerRunning>
    2a0c:	88 23       	and	r24, r24
    2a0e:	31 f0       	breq	.+12     	; 0x2a1c <xTaskGetSchedulerState+0x14>
    2a10:	80 91 9e 13 	lds	r24, 0x139E	; 0x80139e <uxSchedulerSuspended>
    2a14:	81 11       	cpse	r24, r1
    2a16:	04 c0       	rjmp	.+8      	; 0x2a20 <xTaskGetSchedulerState+0x18>
    2a18:	82 e0       	ldi	r24, 0x02	; 2
    2a1a:	08 95       	ret
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	08 95       	ret
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	08 95       	ret

00002a24 <xTaskPriorityDisinherit>:
    2a24:	0f 93       	push	r16
    2a26:	1f 93       	push	r17
    2a28:	cf 93       	push	r28
    2a2a:	df 93       	push	r29
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	89 2b       	or	r24, r25
    2a30:	09 f4       	brne	.+2      	; 0x2a34 <xTaskPriorityDisinherit+0x10>
    2a32:	49 c0       	rjmp	.+146    	; 0x2ac6 <xTaskPriorityDisinherit+0xa2>
    2a34:	86 a5       	ldd	r24, Z+46	; 0x2e
    2a36:	81 50       	subi	r24, 0x01	; 1
    2a38:	86 a7       	std	Z+46, r24	; 0x2e
    2a3a:	22 8d       	ldd	r18, Z+26	; 0x1a
    2a3c:	95 a5       	ldd	r25, Z+45	; 0x2d
    2a3e:	29 17       	cp	r18, r25
    2a40:	09 f4       	brne	.+2      	; 0x2a44 <xTaskPriorityDisinherit+0x20>
    2a42:	43 c0       	rjmp	.+134    	; 0x2aca <xTaskPriorityDisinherit+0xa6>
    2a44:	81 11       	cpse	r24, r1
    2a46:	43 c0       	rjmp	.+134    	; 0x2ace <xTaskPriorityDisinherit+0xaa>
    2a48:	ef 01       	movw	r28, r30
    2a4a:	8f 01       	movw	r16, r30
    2a4c:	0e 5f       	subi	r16, 0xFE	; 254
    2a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a50:	c8 01       	movw	r24, r16
    2a52:	0e 94 9b 05 	call	0xb36	; 0xb36 <uxListRemove>
    2a56:	ed a5       	ldd	r30, Y+45	; 0x2d
    2a58:	ea 8f       	std	Y+26, r30	; 0x1a
    2a5a:	8a e0       	ldi	r24, 0x0A	; 10
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	a0 e0       	ldi	r26, 0x00	; 0
    2a60:	b0 e0       	ldi	r27, 0x00	; 0
    2a62:	8e 1b       	sub	r24, r30
    2a64:	91 09       	sbc	r25, r1
    2a66:	a1 09       	sbc	r26, r1
    2a68:	b1 09       	sbc	r27, r1
    2a6a:	8e 87       	std	Y+14, r24	; 0x0e
    2a6c:	9f 87       	std	Y+15, r25	; 0x0f
    2a6e:	a8 8b       	std	Y+16, r26	; 0x10
    2a70:	b9 8b       	std	Y+17, r27	; 0x11
    2a72:	80 91 ad 13 	lds	r24, 0x13AD	; 0x8013ad <uxTopReadyPriority>
    2a76:	8e 17       	cp	r24, r30
    2a78:	10 f4       	brcc	.+4      	; 0x2a7e <xTaskPriorityDisinherit+0x5a>
    2a7a:	e0 93 ad 13 	sts	0x13AD, r30	; 0x8013ad <uxTopReadyPriority>
    2a7e:	8b e0       	ldi	r24, 0x0B	; 11
    2a80:	8e 9f       	mul	r24, r30
    2a82:	f0 01       	movw	r30, r0
    2a84:	11 24       	eor	r1, r1
    2a86:	e1 51       	subi	r30, 0x11	; 17
    2a88:	fc 4e       	sbci	r31, 0xEC	; 236
    2a8a:	01 80       	ldd	r0, Z+1	; 0x01
    2a8c:	f2 81       	ldd	r31, Z+2	; 0x02
    2a8e:	e0 2d       	mov	r30, r0
    2a90:	ff 83       	std	Y+7, r31	; 0x07
    2a92:	ee 83       	std	Y+6, r30	; 0x06
    2a94:	26 81       	ldd	r18, Z+6	; 0x06
    2a96:	37 81       	ldd	r19, Z+7	; 0x07
    2a98:	39 87       	std	Y+9, r19	; 0x09
    2a9a:	28 87       	std	Y+8, r18	; 0x08
    2a9c:	a6 81       	ldd	r26, Z+6	; 0x06
    2a9e:	b7 81       	ldd	r27, Z+7	; 0x07
    2aa0:	15 96       	adiw	r26, 0x05	; 5
    2aa2:	1c 93       	st	X, r17
    2aa4:	0e 93       	st	-X, r16
    2aa6:	14 97       	sbiw	r26, 0x04	; 4
    2aa8:	17 83       	std	Z+7, r17	; 0x07
    2aaa:	06 83       	std	Z+6, r16	; 0x06
    2aac:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2aae:	8e 9f       	mul	r24, r30
    2ab0:	f0 01       	movw	r30, r0
    2ab2:	11 24       	eor	r1, r1
    2ab4:	e1 51       	subi	r30, 0x11	; 17
    2ab6:	fc 4e       	sbci	r31, 0xEC	; 236
    2ab8:	fd 87       	std	Y+13, r31	; 0x0d
    2aba:	ec 87       	std	Y+12, r30	; 0x0c
    2abc:	80 81       	ld	r24, Z
    2abe:	8f 5f       	subi	r24, 0xFF	; 255
    2ac0:	80 83       	st	Z, r24
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	05 c0       	rjmp	.+10     	; 0x2ad0 <xTaskPriorityDisinherit+0xac>
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	03 c0       	rjmp	.+6      	; 0x2ad0 <xTaskPriorityDisinherit+0xac>
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	01 c0       	rjmp	.+2      	; 0x2ad0 <xTaskPriorityDisinherit+0xac>
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	df 91       	pop	r29
    2ad2:	cf 91       	pop	r28
    2ad4:	1f 91       	pop	r17
    2ad6:	0f 91       	pop	r16
    2ad8:	08 95       	ret

00002ada <uxTaskResetEventItemValue>:
    2ada:	cf 92       	push	r12
    2adc:	df 92       	push	r13
    2ade:	ef 92       	push	r14
    2ae0:	ff 92       	push	r15
    2ae2:	e0 91 5d 14 	lds	r30, 0x145D	; 0x80145d <pxCurrentTCB>
    2ae6:	f0 91 5e 14 	lds	r31, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2aea:	66 85       	ldd	r22, Z+14	; 0x0e
    2aec:	77 85       	ldd	r23, Z+15	; 0x0f
    2aee:	80 89       	ldd	r24, Z+16	; 0x10
    2af0:	91 89       	ldd	r25, Z+17	; 0x11
    2af2:	e0 91 5d 14 	lds	r30, 0x145D	; 0x80145d <pxCurrentTCB>
    2af6:	f0 91 5e 14 	lds	r31, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2afa:	a0 91 5d 14 	lds	r26, 0x145D	; 0x80145d <pxCurrentTCB>
    2afe:	b0 91 5e 14 	lds	r27, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2b02:	5a 96       	adiw	r26, 0x1a	; 26
    2b04:	2c 91       	ld	r18, X
    2b06:	0f 2e       	mov	r0, r31
    2b08:	fa e0       	ldi	r31, 0x0A	; 10
    2b0a:	cf 2e       	mov	r12, r31
    2b0c:	d1 2c       	mov	r13, r1
    2b0e:	e1 2c       	mov	r14, r1
    2b10:	f1 2c       	mov	r15, r1
    2b12:	f0 2d       	mov	r31, r0
    2b14:	c2 1a       	sub	r12, r18
    2b16:	d1 08       	sbc	r13, r1
    2b18:	e1 08       	sbc	r14, r1
    2b1a:	f1 08       	sbc	r15, r1
    2b1c:	c6 86       	std	Z+14, r12	; 0x0e
    2b1e:	d7 86       	std	Z+15, r13	; 0x0f
    2b20:	e0 8a       	std	Z+16, r14	; 0x10
    2b22:	f1 8a       	std	Z+17, r15	; 0x11
    2b24:	ff 90       	pop	r15
    2b26:	ef 90       	pop	r14
    2b28:	df 90       	pop	r13
    2b2a:	cf 90       	pop	r12
    2b2c:	08 95       	ret

00002b2e <xTaskGenericNotifyWait>:
    2b2e:	4f 92       	push	r4
    2b30:	5f 92       	push	r5
    2b32:	6f 92       	push	r6
    2b34:	7f 92       	push	r7
    2b36:	af 92       	push	r10
    2b38:	bf 92       	push	r11
    2b3a:	cf 92       	push	r12
    2b3c:	df 92       	push	r13
    2b3e:	ef 92       	push	r14
    2b40:	ff 92       	push	r15
    2b42:	0f 93       	push	r16
    2b44:	1f 93       	push	r17
    2b46:	cf 93       	push	r28
    2b48:	df 93       	push	r29
    2b4a:	28 01       	movw	r4, r16
    2b4c:	39 01       	movw	r6, r18
    2b4e:	0f b6       	in	r0, 0x3f	; 63
    2b50:	f8 94       	cli
    2b52:	0f 92       	push	r0
    2b54:	e0 91 5d 14 	lds	r30, 0x145D	; 0x80145d <pxCurrentTCB>
    2b58:	f0 91 5e 14 	lds	r31, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2b5c:	c8 2f       	mov	r28, r24
    2b5e:	d0 e0       	ldi	r29, 0x00	; 0
    2b60:	ec 0f       	add	r30, r28
    2b62:	fd 1f       	adc	r31, r29
    2b64:	83 a9       	ldd	r24, Z+51	; 0x33
    2b66:	82 30       	cpi	r24, 0x02	; 2
    2b68:	71 f1       	breq	.+92     	; 0x2bc6 <xTaskGenericNotifyWait+0x98>
    2b6a:	e0 91 5d 14 	lds	r30, 0x145D	; 0x80145d <pxCurrentTCB>
    2b6e:	f0 91 5e 14 	lds	r31, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2b72:	ce 01       	movw	r24, r28
    2b74:	88 0f       	add	r24, r24
    2b76:	99 1f       	adc	r25, r25
    2b78:	88 0f       	add	r24, r24
    2b7a:	99 1f       	adc	r25, r25
    2b7c:	e8 0f       	add	r30, r24
    2b7e:	f9 1f       	adc	r31, r25
    2b80:	87 a5       	ldd	r24, Z+47	; 0x2f
    2b82:	90 a9       	ldd	r25, Z+48	; 0x30
    2b84:	a1 a9       	ldd	r26, Z+49	; 0x31
    2b86:	b2 a9       	ldd	r27, Z+50	; 0x32
    2b88:	40 95       	com	r20
    2b8a:	50 95       	com	r21
    2b8c:	60 95       	com	r22
    2b8e:	70 95       	com	r23
    2b90:	48 23       	and	r20, r24
    2b92:	59 23       	and	r21, r25
    2b94:	6a 23       	and	r22, r26
    2b96:	7b 23       	and	r23, r27
    2b98:	47 a7       	std	Z+47, r20	; 0x2f
    2b9a:	50 ab       	std	Z+48, r21	; 0x30
    2b9c:	61 ab       	std	Z+49, r22	; 0x31
    2b9e:	72 ab       	std	Z+50, r23	; 0x32
    2ba0:	e0 91 5d 14 	lds	r30, 0x145D	; 0x80145d <pxCurrentTCB>
    2ba4:	f0 91 5e 14 	lds	r31, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2ba8:	ec 0f       	add	r30, r28
    2baa:	fd 1f       	adc	r31, r29
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	83 ab       	std	Z+51, r24	; 0x33
    2bb0:	a1 14       	cp	r10, r1
    2bb2:	b1 04       	cpc	r11, r1
    2bb4:	c1 04       	cpc	r12, r1
    2bb6:	d1 04       	cpc	r13, r1
    2bb8:	31 f0       	breq	.+12     	; 0x2bc6 <xTaskGenericNotifyWait+0x98>
    2bba:	41 e0       	ldi	r20, 0x01	; 1
    2bbc:	c6 01       	movw	r24, r12
    2bbe:	b5 01       	movw	r22, r10
    2bc0:	7a d8       	rcall	.-3852   	; 0x1cb6 <prvAddCurrentTaskToDelayedList>
    2bc2:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
    2bc6:	0f 90       	pop	r0
    2bc8:	0f be       	out	0x3f, r0	; 63
    2bca:	0f b6       	in	r0, 0x3f	; 63
    2bcc:	f8 94       	cli
    2bce:	0f 92       	push	r0
    2bd0:	e1 14       	cp	r14, r1
    2bd2:	f1 04       	cpc	r15, r1
    2bd4:	a1 f0       	breq	.+40     	; 0x2bfe <xTaskGenericNotifyWait+0xd0>
    2bd6:	e0 91 5d 14 	lds	r30, 0x145D	; 0x80145d <pxCurrentTCB>
    2bda:	f0 91 5e 14 	lds	r31, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2bde:	ce 01       	movw	r24, r28
    2be0:	88 0f       	add	r24, r24
    2be2:	99 1f       	adc	r25, r25
    2be4:	88 0f       	add	r24, r24
    2be6:	99 1f       	adc	r25, r25
    2be8:	e8 0f       	add	r30, r24
    2bea:	f9 1f       	adc	r31, r25
    2bec:	87 a5       	ldd	r24, Z+47	; 0x2f
    2bee:	90 a9       	ldd	r25, Z+48	; 0x30
    2bf0:	a1 a9       	ldd	r26, Z+49	; 0x31
    2bf2:	b2 a9       	ldd	r27, Z+50	; 0x32
    2bf4:	f7 01       	movw	r30, r14
    2bf6:	80 83       	st	Z, r24
    2bf8:	91 83       	std	Z+1, r25	; 0x01
    2bfa:	a2 83       	std	Z+2, r26	; 0x02
    2bfc:	b3 83       	std	Z+3, r27	; 0x03
    2bfe:	e0 91 5d 14 	lds	r30, 0x145D	; 0x80145d <pxCurrentTCB>
    2c02:	f0 91 5e 14 	lds	r31, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2c06:	ec 0f       	add	r30, r28
    2c08:	fd 1f       	adc	r31, r29
    2c0a:	83 a9       	ldd	r24, Z+51	; 0x33
    2c0c:	82 30       	cpi	r24, 0x02	; 2
    2c0e:	e9 f4       	brne	.+58     	; 0x2c4a <xTaskGenericNotifyWait+0x11c>
    2c10:	e0 91 5d 14 	lds	r30, 0x145D	; 0x80145d <pxCurrentTCB>
    2c14:	f0 91 5e 14 	lds	r31, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2c18:	ce 01       	movw	r24, r28
    2c1a:	88 0f       	add	r24, r24
    2c1c:	99 1f       	adc	r25, r25
    2c1e:	88 0f       	add	r24, r24
    2c20:	99 1f       	adc	r25, r25
    2c22:	e8 0f       	add	r30, r24
    2c24:	f9 1f       	adc	r31, r25
    2c26:	87 a5       	ldd	r24, Z+47	; 0x2f
    2c28:	90 a9       	ldd	r25, Z+48	; 0x30
    2c2a:	a1 a9       	ldd	r26, Z+49	; 0x31
    2c2c:	b2 a9       	ldd	r27, Z+50	; 0x32
    2c2e:	40 94       	com	r4
    2c30:	50 94       	com	r5
    2c32:	60 94       	com	r6
    2c34:	70 94       	com	r7
    2c36:	48 22       	and	r4, r24
    2c38:	59 22       	and	r5, r25
    2c3a:	6a 22       	and	r6, r26
    2c3c:	7b 22       	and	r7, r27
    2c3e:	47 a6       	std	Z+47, r4	; 0x2f
    2c40:	50 aa       	std	Z+48, r5	; 0x30
    2c42:	61 aa       	std	Z+49, r6	; 0x31
    2c44:	72 aa       	std	Z+50, r7	; 0x32
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	01 c0       	rjmp	.+2      	; 0x2c4c <xTaskGenericNotifyWait+0x11e>
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	20 91 5d 14 	lds	r18, 0x145D	; 0x80145d <pxCurrentTCB>
    2c50:	30 91 5e 14 	lds	r19, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2c54:	c2 0f       	add	r28, r18
    2c56:	d3 1f       	adc	r29, r19
    2c58:	1b aa       	std	Y+51, r1	; 0x33
    2c5a:	0f 90       	pop	r0
    2c5c:	0f be       	out	0x3f, r0	; 63
    2c5e:	df 91       	pop	r29
    2c60:	cf 91       	pop	r28
    2c62:	1f 91       	pop	r17
    2c64:	0f 91       	pop	r16
    2c66:	ff 90       	pop	r15
    2c68:	ef 90       	pop	r14
    2c6a:	df 90       	pop	r13
    2c6c:	cf 90       	pop	r12
    2c6e:	bf 90       	pop	r11
    2c70:	af 90       	pop	r10
    2c72:	7f 90       	pop	r7
    2c74:	6f 90       	pop	r6
    2c76:	5f 90       	pop	r5
    2c78:	4f 90       	pop	r4
    2c7a:	08 95       	ret

00002c7c <xTaskGenericNotify>:
    2c7c:	8f 92       	push	r8
    2c7e:	9f 92       	push	r9
    2c80:	af 92       	push	r10
    2c82:	bf 92       	push	r11
    2c84:	ef 92       	push	r14
    2c86:	ff 92       	push	r15
    2c88:	0f 93       	push	r16
    2c8a:	cf 93       	push	r28
    2c8c:	df 93       	push	r29
    2c8e:	dc 01       	movw	r26, r24
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	f8 94       	cli
    2c94:	0f 92       	push	r0
    2c96:	e1 14       	cp	r14, r1
    2c98:	f1 04       	cpc	r15, r1
    2c9a:	89 f0       	breq	.+34     	; 0x2cbe <xTaskGenericNotify+0x42>
    2c9c:	e6 2f       	mov	r30, r22
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	ee 0f       	add	r30, r30
    2ca2:	ff 1f       	adc	r31, r31
    2ca4:	ee 0f       	add	r30, r30
    2ca6:	ff 1f       	adc	r31, r31
    2ca8:	e8 0f       	add	r30, r24
    2caa:	f9 1f       	adc	r31, r25
    2cac:	87 a4       	ldd	r8, Z+47	; 0x2f
    2cae:	90 a8       	ldd	r9, Z+48	; 0x30
    2cb0:	a1 a8       	ldd	r10, Z+49	; 0x31
    2cb2:	b2 a8       	ldd	r11, Z+50	; 0x32
    2cb4:	f7 01       	movw	r30, r14
    2cb6:	80 82       	st	Z, r8
    2cb8:	91 82       	std	Z+1, r9	; 0x01
    2cba:	a2 82       	std	Z+2, r10	; 0x02
    2cbc:	b3 82       	std	Z+3, r11	; 0x03
    2cbe:	70 e0       	ldi	r23, 0x00	; 0
    2cc0:	fd 01       	movw	r30, r26
    2cc2:	e6 0f       	add	r30, r22
    2cc4:	f7 1f       	adc	r31, r23
    2cc6:	83 a9       	ldd	r24, Z+51	; 0x33
    2cc8:	92 e0       	ldi	r25, 0x02	; 2
    2cca:	93 ab       	std	Z+51, r25	; 0x33
    2ccc:	02 30       	cpi	r16, 0x02	; 2
    2cce:	01 f1       	breq	.+64     	; 0x2d10 <xTaskGenericNotify+0x94>
    2cd0:	18 f4       	brcc	.+6      	; 0x2cd8 <xTaskGenericNotify+0x5c>
    2cd2:	01 30       	cpi	r16, 0x01	; 1
    2cd4:	31 f0       	breq	.+12     	; 0x2ce2 <xTaskGenericNotify+0x66>
    2cd6:	4d c0       	rjmp	.+154    	; 0x2d72 <xTaskGenericNotify+0xf6>
    2cd8:	03 30       	cpi	r16, 0x03	; 3
    2cda:	79 f1       	breq	.+94     	; 0x2d3a <xTaskGenericNotify+0xbe>
    2cdc:	04 30       	cpi	r16, 0x04	; 4
    2cde:	d1 f1       	breq	.+116    	; 0x2d54 <xTaskGenericNotify+0xd8>
    2ce0:	48 c0       	rjmp	.+144    	; 0x2d72 <xTaskGenericNotify+0xf6>
    2ce2:	66 0f       	add	r22, r22
    2ce4:	77 1f       	adc	r23, r23
    2ce6:	66 0f       	add	r22, r22
    2ce8:	77 1f       	adc	r23, r23
    2cea:	fd 01       	movw	r30, r26
    2cec:	e6 0f       	add	r30, r22
    2cee:	f7 1f       	adc	r31, r23
    2cf0:	87 a4       	ldd	r8, Z+47	; 0x2f
    2cf2:	90 a8       	ldd	r9, Z+48	; 0x30
    2cf4:	a1 a8       	ldd	r10, Z+49	; 0x31
    2cf6:	b2 a8       	ldd	r11, Z+50	; 0x32
    2cf8:	ba 01       	movw	r22, r20
    2cfa:	a9 01       	movw	r20, r18
    2cfc:	48 29       	or	r20, r8
    2cfe:	59 29       	or	r21, r9
    2d00:	6a 29       	or	r22, r10
    2d02:	7b 29       	or	r23, r11
    2d04:	47 a7       	std	Z+47, r20	; 0x2f
    2d06:	50 ab       	std	Z+48, r21	; 0x30
    2d08:	61 ab       	std	Z+49, r22	; 0x31
    2d0a:	72 ab       	std	Z+50, r23	; 0x32
    2d0c:	01 e0       	ldi	r16, 0x01	; 1
    2d0e:	34 c0       	rjmp	.+104    	; 0x2d78 <xTaskGenericNotify+0xfc>
    2d10:	66 0f       	add	r22, r22
    2d12:	77 1f       	adc	r23, r23
    2d14:	66 0f       	add	r22, r22
    2d16:	77 1f       	adc	r23, r23
    2d18:	fd 01       	movw	r30, r26
    2d1a:	e6 0f       	add	r30, r22
    2d1c:	f7 1f       	adc	r31, r23
    2d1e:	47 a5       	ldd	r20, Z+47	; 0x2f
    2d20:	50 a9       	ldd	r21, Z+48	; 0x30
    2d22:	61 a9       	ldd	r22, Z+49	; 0x31
    2d24:	72 a9       	ldd	r23, Z+50	; 0x32
    2d26:	4f 5f       	subi	r20, 0xFF	; 255
    2d28:	5f 4f       	sbci	r21, 0xFF	; 255
    2d2a:	6f 4f       	sbci	r22, 0xFF	; 255
    2d2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d2e:	47 a7       	std	Z+47, r20	; 0x2f
    2d30:	50 ab       	std	Z+48, r21	; 0x30
    2d32:	61 ab       	std	Z+49, r22	; 0x31
    2d34:	72 ab       	std	Z+50, r23	; 0x32
    2d36:	01 e0       	ldi	r16, 0x01	; 1
    2d38:	1f c0       	rjmp	.+62     	; 0x2d78 <xTaskGenericNotify+0xfc>
    2d3a:	66 0f       	add	r22, r22
    2d3c:	77 1f       	adc	r23, r23
    2d3e:	66 0f       	add	r22, r22
    2d40:	77 1f       	adc	r23, r23
    2d42:	fd 01       	movw	r30, r26
    2d44:	e6 0f       	add	r30, r22
    2d46:	f7 1f       	adc	r31, r23
    2d48:	27 a7       	std	Z+47, r18	; 0x2f
    2d4a:	30 ab       	std	Z+48, r19	; 0x30
    2d4c:	41 ab       	std	Z+49, r20	; 0x31
    2d4e:	52 ab       	std	Z+50, r21	; 0x32
    2d50:	01 e0       	ldi	r16, 0x01	; 1
    2d52:	12 c0       	rjmp	.+36     	; 0x2d78 <xTaskGenericNotify+0xfc>
    2d54:	82 30       	cpi	r24, 0x02	; 2
    2d56:	79 f0       	breq	.+30     	; 0x2d76 <xTaskGenericNotify+0xfa>
    2d58:	66 0f       	add	r22, r22
    2d5a:	77 1f       	adc	r23, r23
    2d5c:	66 0f       	add	r22, r22
    2d5e:	77 1f       	adc	r23, r23
    2d60:	fd 01       	movw	r30, r26
    2d62:	e6 0f       	add	r30, r22
    2d64:	f7 1f       	adc	r31, r23
    2d66:	27 a7       	std	Z+47, r18	; 0x2f
    2d68:	30 ab       	std	Z+48, r19	; 0x30
    2d6a:	41 ab       	std	Z+49, r20	; 0x31
    2d6c:	52 ab       	std	Z+50, r21	; 0x32
    2d6e:	01 e0       	ldi	r16, 0x01	; 1
    2d70:	03 c0       	rjmp	.+6      	; 0x2d78 <xTaskGenericNotify+0xfc>
    2d72:	01 e0       	ldi	r16, 0x01	; 1
    2d74:	01 c0       	rjmp	.+2      	; 0x2d78 <xTaskGenericNotify+0xfc>
    2d76:	00 e0       	ldi	r16, 0x00	; 0
    2d78:	81 30       	cpi	r24, 0x01	; 1
    2d7a:	09 f0       	breq	.+2      	; 0x2d7e <xTaskGenericNotify+0x102>
    2d7c:	69 c0       	rjmp	.+210    	; 0x2e50 <xTaskGenericNotify+0x1d4>
    2d7e:	1c 96       	adiw	r26, 0x0c	; 12
    2d80:	ed 91       	ld	r30, X+
    2d82:	fc 91       	ld	r31, X
    2d84:	1d 97       	sbiw	r26, 0x0d	; 13
    2d86:	16 96       	adiw	r26, 0x06	; 6
    2d88:	cd 91       	ld	r28, X+
    2d8a:	dc 91       	ld	r29, X
    2d8c:	17 97       	sbiw	r26, 0x07	; 7
    2d8e:	18 96       	adiw	r26, 0x08	; 8
    2d90:	8d 91       	ld	r24, X+
    2d92:	9c 91       	ld	r25, X
    2d94:	19 97       	sbiw	r26, 0x09	; 9
    2d96:	9f 83       	std	Y+7, r25	; 0x07
    2d98:	8e 83       	std	Y+6, r24	; 0x06
    2d9a:	18 96       	adiw	r26, 0x08	; 8
    2d9c:	cd 91       	ld	r28, X+
    2d9e:	dc 91       	ld	r29, X
    2da0:	19 97       	sbiw	r26, 0x09	; 9
    2da2:	16 96       	adiw	r26, 0x06	; 6
    2da4:	8d 91       	ld	r24, X+
    2da6:	9c 91       	ld	r25, X
    2da8:	17 97       	sbiw	r26, 0x07	; 7
    2daa:	9d 83       	std	Y+5, r25	; 0x05
    2dac:	8c 83       	std	Y+4, r24	; 0x04
    2dae:	81 81       	ldd	r24, Z+1	; 0x01
    2db0:	92 81       	ldd	r25, Z+2	; 0x02
    2db2:	9d 01       	movw	r18, r26
    2db4:	2e 5f       	subi	r18, 0xFE	; 254
    2db6:	3f 4f       	sbci	r19, 0xFF	; 255
    2db8:	82 17       	cp	r24, r18
    2dba:	93 07       	cpc	r25, r19
    2dbc:	31 f4       	brne	.+12     	; 0x2dca <xTaskGenericNotify+0x14e>
    2dbe:	18 96       	adiw	r26, 0x08	; 8
    2dc0:	8d 91       	ld	r24, X+
    2dc2:	9c 91       	ld	r25, X
    2dc4:	19 97       	sbiw	r26, 0x09	; 9
    2dc6:	92 83       	std	Z+2, r25	; 0x02
    2dc8:	81 83       	std	Z+1, r24	; 0x01
    2dca:	1d 96       	adiw	r26, 0x0d	; 13
    2dcc:	1c 92       	st	X, r1
    2dce:	1e 92       	st	-X, r1
    2dd0:	1c 97       	sbiw	r26, 0x0c	; 12
    2dd2:	80 81       	ld	r24, Z
    2dd4:	81 50       	subi	r24, 0x01	; 1
    2dd6:	80 83       	st	Z, r24
    2dd8:	5a 96       	adiw	r26, 0x1a	; 26
    2dda:	ec 91       	ld	r30, X
    2ddc:	5a 97       	sbiw	r26, 0x1a	; 26
    2dde:	80 91 ad 13 	lds	r24, 0x13AD	; 0x8013ad <uxTopReadyPriority>
    2de2:	8e 17       	cp	r24, r30
    2de4:	10 f4       	brcc	.+4      	; 0x2dea <xTaskGenericNotify+0x16e>
    2de6:	e0 93 ad 13 	sts	0x13AD, r30	; 0x8013ad <uxTopReadyPriority>
    2dea:	8b e0       	ldi	r24, 0x0B	; 11
    2dec:	8e 9f       	mul	r24, r30
    2dee:	f0 01       	movw	r30, r0
    2df0:	11 24       	eor	r1, r1
    2df2:	e1 51       	subi	r30, 0x11	; 17
    2df4:	fc 4e       	sbci	r31, 0xEC	; 236
    2df6:	01 80       	ldd	r0, Z+1	; 0x01
    2df8:	f2 81       	ldd	r31, Z+2	; 0x02
    2dfa:	e0 2d       	mov	r30, r0
    2dfc:	17 96       	adiw	r26, 0x07	; 7
    2dfe:	fc 93       	st	X, r31
    2e00:	ee 93       	st	-X, r30
    2e02:	16 97       	sbiw	r26, 0x06	; 6
    2e04:	46 81       	ldd	r20, Z+6	; 0x06
    2e06:	57 81       	ldd	r21, Z+7	; 0x07
    2e08:	19 96       	adiw	r26, 0x09	; 9
    2e0a:	5c 93       	st	X, r21
    2e0c:	4e 93       	st	-X, r20
    2e0e:	18 97       	sbiw	r26, 0x08	; 8
    2e10:	c6 81       	ldd	r28, Z+6	; 0x06
    2e12:	d7 81       	ldd	r29, Z+7	; 0x07
    2e14:	3d 83       	std	Y+5, r19	; 0x05
    2e16:	2c 83       	std	Y+4, r18	; 0x04
    2e18:	37 83       	std	Z+7, r19	; 0x07
    2e1a:	26 83       	std	Z+6, r18	; 0x06
    2e1c:	5a 96       	adiw	r26, 0x1a	; 26
    2e1e:	ec 91       	ld	r30, X
    2e20:	5a 97       	sbiw	r26, 0x1a	; 26
    2e22:	8e 9f       	mul	r24, r30
    2e24:	f0 01       	movw	r30, r0
    2e26:	11 24       	eor	r1, r1
    2e28:	e1 51       	subi	r30, 0x11	; 17
    2e2a:	fc 4e       	sbci	r31, 0xEC	; 236
    2e2c:	1d 96       	adiw	r26, 0x0d	; 13
    2e2e:	fc 93       	st	X, r31
    2e30:	ee 93       	st	-X, r30
    2e32:	1c 97       	sbiw	r26, 0x0c	; 12
    2e34:	80 81       	ld	r24, Z
    2e36:	8f 5f       	subi	r24, 0xFF	; 255
    2e38:	80 83       	st	Z, r24
    2e3a:	5a 96       	adiw	r26, 0x1a	; 26
    2e3c:	9c 91       	ld	r25, X
    2e3e:	e0 91 5d 14 	lds	r30, 0x145D	; 0x80145d <pxCurrentTCB>
    2e42:	f0 91 5e 14 	lds	r31, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    2e46:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e48:	89 17       	cp	r24, r25
    2e4a:	10 f4       	brcc	.+4      	; 0x2e50 <xTaskGenericNotify+0x1d4>
    2e4c:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
    2e50:	0f 90       	pop	r0
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	80 2f       	mov	r24, r16
    2e56:	df 91       	pop	r29
    2e58:	cf 91       	pop	r28
    2e5a:	0f 91       	pop	r16
    2e5c:	ff 90       	pop	r15
    2e5e:	ef 90       	pop	r14
    2e60:	bf 90       	pop	r11
    2e62:	af 90       	pop	r10
    2e64:	9f 90       	pop	r9
    2e66:	8f 90       	pop	r8
    2e68:	08 95       	ret

00002e6a <xTaskGenericNotifyFromISR>:
    2e6a:	8f 92       	push	r8
    2e6c:	9f 92       	push	r9
    2e6e:	af 92       	push	r10
    2e70:	bf 92       	push	r11
    2e72:	cf 92       	push	r12
    2e74:	df 92       	push	r13
    2e76:	ef 92       	push	r14
    2e78:	ff 92       	push	r15
    2e7a:	0f 93       	push	r16
    2e7c:	cf 93       	push	r28
    2e7e:	df 93       	push	r29
    2e80:	dc 01       	movw	r26, r24
    2e82:	e1 14       	cp	r14, r1
    2e84:	f1 04       	cpc	r15, r1
    2e86:	89 f0       	breq	.+34     	; 0x2eaa <xTaskGenericNotifyFromISR+0x40>
    2e88:	e6 2f       	mov	r30, r22
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	ee 0f       	add	r30, r30
    2e8e:	ff 1f       	adc	r31, r31
    2e90:	ee 0f       	add	r30, r30
    2e92:	ff 1f       	adc	r31, r31
    2e94:	e8 0f       	add	r30, r24
    2e96:	f9 1f       	adc	r31, r25
    2e98:	87 a4       	ldd	r8, Z+47	; 0x2f
    2e9a:	90 a8       	ldd	r9, Z+48	; 0x30
    2e9c:	a1 a8       	ldd	r10, Z+49	; 0x31
    2e9e:	b2 a8       	ldd	r11, Z+50	; 0x32
    2ea0:	f7 01       	movw	r30, r14
    2ea2:	80 82       	st	Z, r8
    2ea4:	91 82       	std	Z+1, r9	; 0x01
    2ea6:	a2 82       	std	Z+2, r10	; 0x02
    2ea8:	b3 82       	std	Z+3, r11	; 0x03
    2eaa:	70 e0       	ldi	r23, 0x00	; 0
    2eac:	fd 01       	movw	r30, r26
    2eae:	e6 0f       	add	r30, r22
    2eb0:	f7 1f       	adc	r31, r23
    2eb2:	93 a9       	ldd	r25, Z+51	; 0x33
    2eb4:	82 e0       	ldi	r24, 0x02	; 2
    2eb6:	83 ab       	std	Z+51, r24	; 0x33
    2eb8:	02 30       	cpi	r16, 0x02	; 2
    2eba:	01 f1       	breq	.+64     	; 0x2efc <xTaskGenericNotifyFromISR+0x92>
    2ebc:	18 f4       	brcc	.+6      	; 0x2ec4 <xTaskGenericNotifyFromISR+0x5a>
    2ebe:	01 30       	cpi	r16, 0x01	; 1
    2ec0:	31 f0       	breq	.+12     	; 0x2ece <xTaskGenericNotifyFromISR+0x64>
    2ec2:	4d c0       	rjmp	.+154    	; 0x2f5e <xTaskGenericNotifyFromISR+0xf4>
    2ec4:	03 30       	cpi	r16, 0x03	; 3
    2ec6:	79 f1       	breq	.+94     	; 0x2f26 <xTaskGenericNotifyFromISR+0xbc>
    2ec8:	04 30       	cpi	r16, 0x04	; 4
    2eca:	d1 f1       	breq	.+116    	; 0x2f40 <xTaskGenericNotifyFromISR+0xd6>
    2ecc:	48 c0       	rjmp	.+144    	; 0x2f5e <xTaskGenericNotifyFromISR+0xf4>
    2ece:	66 0f       	add	r22, r22
    2ed0:	77 1f       	adc	r23, r23
    2ed2:	66 0f       	add	r22, r22
    2ed4:	77 1f       	adc	r23, r23
    2ed6:	fd 01       	movw	r30, r26
    2ed8:	e6 0f       	add	r30, r22
    2eda:	f7 1f       	adc	r31, r23
    2edc:	87 a4       	ldd	r8, Z+47	; 0x2f
    2ede:	90 a8       	ldd	r9, Z+48	; 0x30
    2ee0:	a1 a8       	ldd	r10, Z+49	; 0x31
    2ee2:	b2 a8       	ldd	r11, Z+50	; 0x32
    2ee4:	ba 01       	movw	r22, r20
    2ee6:	a9 01       	movw	r20, r18
    2ee8:	48 29       	or	r20, r8
    2eea:	59 29       	or	r21, r9
    2eec:	6a 29       	or	r22, r10
    2eee:	7b 29       	or	r23, r11
    2ef0:	47 a7       	std	Z+47, r20	; 0x2f
    2ef2:	50 ab       	std	Z+48, r21	; 0x30
    2ef4:	61 ab       	std	Z+49, r22	; 0x31
    2ef6:	72 ab       	std	Z+50, r23	; 0x32
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	34 c0       	rjmp	.+104    	; 0x2f64 <xTaskGenericNotifyFromISR+0xfa>
    2efc:	66 0f       	add	r22, r22
    2efe:	77 1f       	adc	r23, r23
    2f00:	66 0f       	add	r22, r22
    2f02:	77 1f       	adc	r23, r23
    2f04:	fd 01       	movw	r30, r26
    2f06:	e6 0f       	add	r30, r22
    2f08:	f7 1f       	adc	r31, r23
    2f0a:	47 a5       	ldd	r20, Z+47	; 0x2f
    2f0c:	50 a9       	ldd	r21, Z+48	; 0x30
    2f0e:	61 a9       	ldd	r22, Z+49	; 0x31
    2f10:	72 a9       	ldd	r23, Z+50	; 0x32
    2f12:	4f 5f       	subi	r20, 0xFF	; 255
    2f14:	5f 4f       	sbci	r21, 0xFF	; 255
    2f16:	6f 4f       	sbci	r22, 0xFF	; 255
    2f18:	7f 4f       	sbci	r23, 0xFF	; 255
    2f1a:	47 a7       	std	Z+47, r20	; 0x2f
    2f1c:	50 ab       	std	Z+48, r21	; 0x30
    2f1e:	61 ab       	std	Z+49, r22	; 0x31
    2f20:	72 ab       	std	Z+50, r23	; 0x32
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	1f c0       	rjmp	.+62     	; 0x2f64 <xTaskGenericNotifyFromISR+0xfa>
    2f26:	66 0f       	add	r22, r22
    2f28:	77 1f       	adc	r23, r23
    2f2a:	66 0f       	add	r22, r22
    2f2c:	77 1f       	adc	r23, r23
    2f2e:	fd 01       	movw	r30, r26
    2f30:	e6 0f       	add	r30, r22
    2f32:	f7 1f       	adc	r31, r23
    2f34:	27 a7       	std	Z+47, r18	; 0x2f
    2f36:	30 ab       	std	Z+48, r19	; 0x30
    2f38:	41 ab       	std	Z+49, r20	; 0x31
    2f3a:	52 ab       	std	Z+50, r21	; 0x32
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	12 c0       	rjmp	.+36     	; 0x2f64 <xTaskGenericNotifyFromISR+0xfa>
    2f40:	92 30       	cpi	r25, 0x02	; 2
    2f42:	79 f0       	breq	.+30     	; 0x2f62 <xTaskGenericNotifyFromISR+0xf8>
    2f44:	66 0f       	add	r22, r22
    2f46:	77 1f       	adc	r23, r23
    2f48:	66 0f       	add	r22, r22
    2f4a:	77 1f       	adc	r23, r23
    2f4c:	fd 01       	movw	r30, r26
    2f4e:	e6 0f       	add	r30, r22
    2f50:	f7 1f       	adc	r31, r23
    2f52:	27 a7       	std	Z+47, r18	; 0x2f
    2f54:	30 ab       	std	Z+48, r19	; 0x30
    2f56:	41 ab       	std	Z+49, r20	; 0x31
    2f58:	52 ab       	std	Z+50, r21	; 0x32
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	03 c0       	rjmp	.+6      	; 0x2f64 <xTaskGenericNotifyFromISR+0xfa>
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	01 c0       	rjmp	.+2      	; 0x2f64 <xTaskGenericNotifyFromISR+0xfa>
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	91 30       	cpi	r25, 0x01	; 1
    2f66:	09 f0       	breq	.+2      	; 0x2f6a <xTaskGenericNotifyFromISR+0x100>
    2f68:	96 c0       	rjmp	.+300    	; 0x3096 <xTaskGenericNotifyFromISR+0x22c>
    2f6a:	90 91 9e 13 	lds	r25, 0x139E	; 0x80139e <uxSchedulerSuspended>
    2f6e:	91 11       	cpse	r25, r1
    2f70:	5f c0       	rjmp	.+190    	; 0x3030 <xTaskGenericNotifyFromISR+0x1c6>
    2f72:	1c 96       	adiw	r26, 0x0c	; 12
    2f74:	ed 91       	ld	r30, X+
    2f76:	fc 91       	ld	r31, X
    2f78:	1d 97       	sbiw	r26, 0x0d	; 13
    2f7a:	16 96       	adiw	r26, 0x06	; 6
    2f7c:	cd 91       	ld	r28, X+
    2f7e:	dc 91       	ld	r29, X
    2f80:	17 97       	sbiw	r26, 0x07	; 7
    2f82:	18 96       	adiw	r26, 0x08	; 8
    2f84:	2d 91       	ld	r18, X+
    2f86:	3c 91       	ld	r19, X
    2f88:	19 97       	sbiw	r26, 0x09	; 9
    2f8a:	3f 83       	std	Y+7, r19	; 0x07
    2f8c:	2e 83       	std	Y+6, r18	; 0x06
    2f8e:	18 96       	adiw	r26, 0x08	; 8
    2f90:	cd 91       	ld	r28, X+
    2f92:	dc 91       	ld	r29, X
    2f94:	19 97       	sbiw	r26, 0x09	; 9
    2f96:	16 96       	adiw	r26, 0x06	; 6
    2f98:	2d 91       	ld	r18, X+
    2f9a:	3c 91       	ld	r19, X
    2f9c:	17 97       	sbiw	r26, 0x07	; 7
    2f9e:	3d 83       	std	Y+5, r19	; 0x05
    2fa0:	2c 83       	std	Y+4, r18	; 0x04
    2fa2:	41 81       	ldd	r20, Z+1	; 0x01
    2fa4:	52 81       	ldd	r21, Z+2	; 0x02
    2fa6:	9d 01       	movw	r18, r26
    2fa8:	2e 5f       	subi	r18, 0xFE	; 254
    2faa:	3f 4f       	sbci	r19, 0xFF	; 255
    2fac:	42 17       	cp	r20, r18
    2fae:	53 07       	cpc	r21, r19
    2fb0:	31 f4       	brne	.+12     	; 0x2fbe <xTaskGenericNotifyFromISR+0x154>
    2fb2:	18 96       	adiw	r26, 0x08	; 8
    2fb4:	4d 91       	ld	r20, X+
    2fb6:	5c 91       	ld	r21, X
    2fb8:	19 97       	sbiw	r26, 0x09	; 9
    2fba:	52 83       	std	Z+2, r21	; 0x02
    2fbc:	41 83       	std	Z+1, r20	; 0x01
    2fbe:	1d 96       	adiw	r26, 0x0d	; 13
    2fc0:	1c 92       	st	X, r1
    2fc2:	1e 92       	st	-X, r1
    2fc4:	1c 97       	sbiw	r26, 0x0c	; 12
    2fc6:	90 81       	ld	r25, Z
    2fc8:	91 50       	subi	r25, 0x01	; 1
    2fca:	90 83       	st	Z, r25
    2fcc:	5a 96       	adiw	r26, 0x1a	; 26
    2fce:	ec 91       	ld	r30, X
    2fd0:	5a 97       	sbiw	r26, 0x1a	; 26
    2fd2:	90 91 ad 13 	lds	r25, 0x13AD	; 0x8013ad <uxTopReadyPriority>
    2fd6:	9e 17       	cp	r25, r30
    2fd8:	10 f4       	brcc	.+4      	; 0x2fde <xTaskGenericNotifyFromISR+0x174>
    2fda:	e0 93 ad 13 	sts	0x13AD, r30	; 0x8013ad <uxTopReadyPriority>
    2fde:	9b e0       	ldi	r25, 0x0B	; 11
    2fe0:	9e 9f       	mul	r25, r30
    2fe2:	f0 01       	movw	r30, r0
    2fe4:	11 24       	eor	r1, r1
    2fe6:	e1 51       	subi	r30, 0x11	; 17
    2fe8:	fc 4e       	sbci	r31, 0xEC	; 236
    2fea:	01 80       	ldd	r0, Z+1	; 0x01
    2fec:	f2 81       	ldd	r31, Z+2	; 0x02
    2fee:	e0 2d       	mov	r30, r0
    2ff0:	17 96       	adiw	r26, 0x07	; 7
    2ff2:	fc 93       	st	X, r31
    2ff4:	ee 93       	st	-X, r30
    2ff6:	16 97       	sbiw	r26, 0x06	; 6
    2ff8:	46 81       	ldd	r20, Z+6	; 0x06
    2ffa:	57 81       	ldd	r21, Z+7	; 0x07
    2ffc:	19 96       	adiw	r26, 0x09	; 9
    2ffe:	5c 93       	st	X, r21
    3000:	4e 93       	st	-X, r20
    3002:	18 97       	sbiw	r26, 0x08	; 8
    3004:	c6 81       	ldd	r28, Z+6	; 0x06
    3006:	d7 81       	ldd	r29, Z+7	; 0x07
    3008:	3d 83       	std	Y+5, r19	; 0x05
    300a:	2c 83       	std	Y+4, r18	; 0x04
    300c:	37 83       	std	Z+7, r19	; 0x07
    300e:	26 83       	std	Z+6, r18	; 0x06
    3010:	5a 96       	adiw	r26, 0x1a	; 26
    3012:	ec 91       	ld	r30, X
    3014:	5a 97       	sbiw	r26, 0x1a	; 26
    3016:	9e 9f       	mul	r25, r30
    3018:	f0 01       	movw	r30, r0
    301a:	11 24       	eor	r1, r1
    301c:	e1 51       	subi	r30, 0x11	; 17
    301e:	fc 4e       	sbci	r31, 0xEC	; 236
    3020:	1d 96       	adiw	r26, 0x0d	; 13
    3022:	fc 93       	st	X, r31
    3024:	ee 93       	st	-X, r30
    3026:	1c 97       	sbiw	r26, 0x0c	; 12
    3028:	90 81       	ld	r25, Z
    302a:	9f 5f       	subi	r25, 0xFF	; 255
    302c:	90 83       	st	Z, r25
    302e:	21 c0       	rjmp	.+66     	; 0x3072 <xTaskGenericNotifyFromISR+0x208>
    3030:	6a ec       	ldi	r22, 0xCA	; 202
    3032:	73 e1       	ldi	r23, 0x13	; 19
    3034:	fb 01       	movw	r30, r22
    3036:	c1 81       	ldd	r28, Z+1	; 0x01
    3038:	d2 81       	ldd	r29, Z+2	; 0x02
    303a:	53 96       	adiw	r26, 0x13	; 19
    303c:	dc 93       	st	X, r29
    303e:	ce 93       	st	-X, r28
    3040:	52 97       	sbiw	r26, 0x12	; 18
    3042:	2e 81       	ldd	r18, Y+6	; 0x06
    3044:	3f 81       	ldd	r19, Y+7	; 0x07
    3046:	55 96       	adiw	r26, 0x15	; 21
    3048:	3c 93       	st	X, r19
    304a:	2e 93       	st	-X, r18
    304c:	54 97       	sbiw	r26, 0x14	; 20
    304e:	4e 81       	ldd	r20, Y+6	; 0x06
    3050:	5f 81       	ldd	r21, Y+7	; 0x07
    3052:	9d 01       	movw	r18, r26
    3054:	22 5f       	subi	r18, 0xF2	; 242
    3056:	3f 4f       	sbci	r19, 0xFF	; 255
    3058:	fa 01       	movw	r30, r20
    305a:	35 83       	std	Z+5, r19	; 0x05
    305c:	24 83       	std	Z+4, r18	; 0x04
    305e:	3f 83       	std	Y+7, r19	; 0x07
    3060:	2e 83       	std	Y+6, r18	; 0x06
    3062:	59 96       	adiw	r26, 0x19	; 25
    3064:	7c 93       	st	X, r23
    3066:	6e 93       	st	-X, r22
    3068:	58 97       	sbiw	r26, 0x18	; 24
    306a:	fb 01       	movw	r30, r22
    306c:	90 81       	ld	r25, Z
    306e:	9f 5f       	subi	r25, 0xFF	; 255
    3070:	90 83       	st	Z, r25
    3072:	5a 96       	adiw	r26, 0x1a	; 26
    3074:	2c 91       	ld	r18, X
    3076:	e0 91 5d 14 	lds	r30, 0x145D	; 0x80145d <pxCurrentTCB>
    307a:	f0 91 5e 14 	lds	r31, 0x145E	; 0x80145e <pxCurrentTCB+0x1>
    307e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3080:	92 17       	cp	r25, r18
    3082:	48 f4       	brcc	.+18     	; 0x3096 <xTaskGenericNotifyFromISR+0x22c>
    3084:	c1 14       	cp	r12, r1
    3086:	d1 04       	cpc	r13, r1
    3088:	19 f0       	breq	.+6      	; 0x3090 <xTaskGenericNotifyFromISR+0x226>
    308a:	91 e0       	ldi	r25, 0x01	; 1
    308c:	f6 01       	movw	r30, r12
    308e:	90 83       	st	Z, r25
    3090:	91 e0       	ldi	r25, 0x01	; 1
    3092:	90 93 a7 13 	sts	0x13A7, r25	; 0x8013a7 <xYieldPending>
    3096:	df 91       	pop	r29
    3098:	cf 91       	pop	r28
    309a:	0f 91       	pop	r16
    309c:	ff 90       	pop	r15
    309e:	ef 90       	pop	r14
    30a0:	df 90       	pop	r13
    30a2:	cf 90       	pop	r12
    30a4:	bf 90       	pop	r11
    30a6:	af 90       	pop	r10
    30a8:	9f 90       	pop	r9
    30aa:	8f 90       	pop	r8
    30ac:	08 95       	ret

000030ae <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    30ae:	00 97       	sbiw	r24, 0x00	; 0
    30b0:	21 f4       	brne	.+8      	; 0x30ba <xTaskGenericNotifyStateClear+0xc>
    30b2:	80 91 5d 14 	lds	r24, 0x145D	; 0x80145d <pxCurrentTCB>
    30b6:	90 91 5e 14 	lds	r25, 0x145E	; 0x80145e <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    30ba:	0f b6       	in	r0, 0x3f	; 63
    30bc:	f8 94       	cli
    30be:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    30c0:	70 e0       	ldi	r23, 0x00	; 0
    30c2:	fc 01       	movw	r30, r24
    30c4:	e6 0f       	add	r30, r22
    30c6:	f7 1f       	adc	r31, r23
    30c8:	23 a9       	ldd	r18, Z+51	; 0x33
    30ca:	22 30       	cpi	r18, 0x02	; 2
    30cc:	31 f4       	brne	.+12     	; 0x30da <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    30ce:	fc 01       	movw	r30, r24
    30d0:	e6 0f       	add	r30, r22
    30d2:	f7 1f       	adc	r31, r23
    30d4:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    30d6:	81 e0       	ldi	r24, 0x01	; 1
    30d8:	01 c0       	rjmp	.+2      	; 0x30dc <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    30da:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    30dc:	0f 90       	pop	r0
    30de:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    30e0:	08 95       	ret

000030e2 <prvGetNextExpireTime>:
    30e2:	dc 01       	movw	r26, r24
    30e4:	e0 91 69 14 	lds	r30, 0x1469	; 0x801469 <pxCurrentTimerList>
    30e8:	f0 91 6a 14 	lds	r31, 0x146A	; 0x80146a <pxCurrentTimerList+0x1>
    30ec:	80 81       	ld	r24, Z
    30ee:	91 e0       	ldi	r25, 0x01	; 1
    30f0:	81 11       	cpse	r24, r1
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	9c 93       	st	X, r25
    30f6:	91 11       	cpse	r25, r1
    30f8:	08 c0       	rjmp	.+16     	; 0x310a <prvGetNextExpireTime+0x28>
    30fa:	07 80       	ldd	r0, Z+7	; 0x07
    30fc:	f0 85       	ldd	r31, Z+8	; 0x08
    30fe:	e0 2d       	mov	r30, r0
    3100:	60 81       	ld	r22, Z
    3102:	71 81       	ldd	r23, Z+1	; 0x01
    3104:	82 81       	ldd	r24, Z+2	; 0x02
    3106:	93 81       	ldd	r25, Z+3	; 0x03
    3108:	08 95       	ret
    310a:	60 e0       	ldi	r22, 0x00	; 0
    310c:	70 e0       	ldi	r23, 0x00	; 0
    310e:	cb 01       	movw	r24, r22
    3110:	08 95       	ret

00003112 <prvInsertTimerInActiveList>:
    3112:	cf 92       	push	r12
    3114:	df 92       	push	r13
    3116:	ef 92       	push	r14
    3118:	ff 92       	push	r15
    311a:	0f 93       	push	r16
    311c:	1f 93       	push	r17
    311e:	fc 01       	movw	r30, r24
    3120:	42 83       	std	Z+2, r20	; 0x02
    3122:	53 83       	std	Z+3, r21	; 0x03
    3124:	64 83       	std	Z+4, r22	; 0x04
    3126:	75 83       	std	Z+5, r23	; 0x05
    3128:	93 87       	std	Z+11, r25	; 0x0b
    312a:	82 87       	std	Z+10, r24	; 0x0a
    312c:	04 17       	cp	r16, r20
    312e:	15 07       	cpc	r17, r21
    3130:	26 07       	cpc	r18, r22
    3132:	37 07       	cpc	r19, r23
    3134:	c0 f0       	brcs	.+48     	; 0x3166 <prvInsertTimerInActiveList+0x54>
    3136:	0c 19       	sub	r16, r12
    3138:	1d 09       	sbc	r17, r13
    313a:	2e 09       	sbc	r18, r14
    313c:	3f 09       	sbc	r19, r15
    313e:	86 85       	ldd	r24, Z+14	; 0x0e
    3140:	97 85       	ldd	r25, Z+15	; 0x0f
    3142:	a0 89       	ldd	r26, Z+16	; 0x10
    3144:	b1 89       	ldd	r27, Z+17	; 0x11
    3146:	08 17       	cp	r16, r24
    3148:	19 07       	cpc	r17, r25
    314a:	2a 07       	cpc	r18, r26
    314c:	3b 07       	cpc	r19, r27
    314e:	00 f5       	brcc	.+64     	; 0x3190 <prvInsertTimerInActiveList+0x7e>
    3150:	bf 01       	movw	r22, r30
    3152:	6e 5f       	subi	r22, 0xFE	; 254
    3154:	7f 4f       	sbci	r23, 0xFF	; 255
    3156:	80 91 67 14 	lds	r24, 0x1467	; 0x801467 <pxOverflowTimerList>
    315a:	90 91 68 14 	lds	r25, 0x1468	; 0x801468 <pxOverflowTimerList+0x1>
    315e:	0e 94 5e 05 	call	0xabc	; 0xabc <vListInsert>
    3162:	80 e0       	ldi	r24, 0x00	; 0
    3164:	18 c0       	rjmp	.+48     	; 0x3196 <prvInsertTimerInActiveList+0x84>
    3166:	0c 15       	cp	r16, r12
    3168:	1d 05       	cpc	r17, r13
    316a:	2e 05       	cpc	r18, r14
    316c:	3f 05       	cpc	r19, r15
    316e:	28 f4       	brcc	.+10     	; 0x317a <prvInsertTimerInActiveList+0x68>
    3170:	4c 15       	cp	r20, r12
    3172:	5d 05       	cpc	r21, r13
    3174:	6e 05       	cpc	r22, r14
    3176:	7f 05       	cpc	r23, r15
    3178:	68 f4       	brcc	.+26     	; 0x3194 <prvInsertTimerInActiveList+0x82>
    317a:	bf 01       	movw	r22, r30
    317c:	6e 5f       	subi	r22, 0xFE	; 254
    317e:	7f 4f       	sbci	r23, 0xFF	; 255
    3180:	80 91 69 14 	lds	r24, 0x1469	; 0x801469 <pxCurrentTimerList>
    3184:	90 91 6a 14 	lds	r25, 0x146A	; 0x80146a <pxCurrentTimerList+0x1>
    3188:	0e 94 5e 05 	call	0xabc	; 0xabc <vListInsert>
    318c:	80 e0       	ldi	r24, 0x00	; 0
    318e:	03 c0       	rjmp	.+6      	; 0x3196 <prvInsertTimerInActiveList+0x84>
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	01 c0       	rjmp	.+2      	; 0x3196 <prvInsertTimerInActiveList+0x84>
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	1f 91       	pop	r17
    3198:	0f 91       	pop	r16
    319a:	ff 90       	pop	r15
    319c:	ef 90       	pop	r14
    319e:	df 90       	pop	r13
    31a0:	cf 90       	pop	r12
    31a2:	08 95       	ret

000031a4 <prvCheckForValidListAndQueue>:
    31a4:	0f b6       	in	r0, 0x3f	; 63
    31a6:	f8 94       	cli
    31a8:	0f 92       	push	r0
    31aa:	80 91 65 14 	lds	r24, 0x1465	; 0x801465 <xTimerQueue>
    31ae:	90 91 66 14 	lds	r25, 0x1466	; 0x801466 <xTimerQueue+0x1>
    31b2:	89 2b       	or	r24, r25
    31b4:	e9 f4       	brne	.+58     	; 0x31f0 <prvCheckForValidListAndQueue+0x4c>
    31b6:	86 e7       	ldi	r24, 0x76	; 118
    31b8:	94 e1       	ldi	r25, 0x14	; 20
    31ba:	0e 94 49 05 	call	0xa92	; 0xa92 <vListInitialise>
    31be:	8b e6       	ldi	r24, 0x6B	; 107
    31c0:	94 e1       	ldi	r25, 0x14	; 20
    31c2:	0e 94 49 05 	call	0xa92	; 0xa92 <vListInitialise>
    31c6:	86 e7       	ldi	r24, 0x76	; 118
    31c8:	94 e1       	ldi	r25, 0x14	; 20
    31ca:	90 93 6a 14 	sts	0x146A, r25	; 0x80146a <pxCurrentTimerList+0x1>
    31ce:	80 93 69 14 	sts	0x1469, r24	; 0x801469 <pxCurrentTimerList>
    31d2:	8b e6       	ldi	r24, 0x6B	; 107
    31d4:	94 e1       	ldi	r25, 0x14	; 20
    31d6:	90 93 68 14 	sts	0x1468, r25	; 0x801468 <pxOverflowTimerList+0x1>
    31da:	80 93 67 14 	sts	0x1467, r24	; 0x801467 <pxOverflowTimerList>
    31de:	40 e0       	ldi	r20, 0x00	; 0
    31e0:	67 e0       	ldi	r22, 0x07	; 7
    31e2:	8a e0       	ldi	r24, 0x0A	; 10
    31e4:	0e 94 fc 07 	call	0xff8	; 0xff8 <xQueueGenericCreate>
    31e8:	90 93 66 14 	sts	0x1466, r25	; 0x801466 <xTimerQueue+0x1>
    31ec:	80 93 65 14 	sts	0x1465, r24	; 0x801465 <xTimerQueue>
    31f0:	0f 90       	pop	r0
    31f2:	0f be       	out	0x3f, r0	; 63
    31f4:	08 95       	ret

000031f6 <xTimerCreateTimerTask>:
    31f6:	ef 92       	push	r14
    31f8:	ff 92       	push	r15
    31fa:	0f 93       	push	r16
    31fc:	d3 df       	rcall	.-90     	; 0x31a4 <prvCheckForValidListAndQueue>
    31fe:	80 91 65 14 	lds	r24, 0x1465	; 0x801465 <xTimerQueue>
    3202:	90 91 66 14 	lds	r25, 0x1466	; 0x801466 <xTimerQueue+0x1>
    3206:	89 2b       	or	r24, r25
    3208:	91 f0       	breq	.+36     	; 0x322e <xTimerCreateTimerTask+0x38>
    320a:	0f 2e       	mov	r0, r31
    320c:	f3 e6       	ldi	r31, 0x63	; 99
    320e:	ef 2e       	mov	r14, r31
    3210:	f4 e1       	ldi	r31, 0x14	; 20
    3212:	ff 2e       	mov	r15, r31
    3214:	f0 2d       	mov	r31, r0
    3216:	03 e0       	ldi	r16, 0x03	; 3
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	40 ec       	ldi	r20, 0xC0	; 192
    321e:	50 e0       	ldi	r21, 0x00	; 0
    3220:	61 ee       	ldi	r22, 0xE1	; 225
    3222:	72 e0       	ldi	r23, 0x02	; 2
    3224:	88 e5       	ldi	r24, 0x58	; 88
    3226:	91 e0       	ldi	r25, 0x01	; 1
    3228:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <xTaskCreate>
    322c:	01 c0       	rjmp	.+2      	; 0x3230 <xTimerCreateTimerTask+0x3a>
    322e:	80 e0       	ldi	r24, 0x00	; 0
    3230:	0f 91       	pop	r16
    3232:	ff 90       	pop	r15
    3234:	ef 90       	pop	r14
    3236:	08 95       	ret

00003238 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3238:	8f 92       	push	r8
    323a:	9f 92       	push	r9
    323c:	af 92       	push	r10
    323e:	bf 92       	push	r11
    3240:	cf 92       	push	r12
    3242:	df 92       	push	r13
    3244:	ef 92       	push	r14
    3246:	ff 92       	push	r15
    3248:	0f 93       	push	r16
    324a:	1f 93       	push	r17
    324c:	cf 93       	push	r28
    324e:	df 93       	push	r29
    3250:	cd b7       	in	r28, 0x3d	; 61
    3252:	de b7       	in	r29, 0x3e	; 62
    3254:	27 97       	sbiw	r28, 0x07	; 7
    3256:	0f b6       	in	r0, 0x3f	; 63
    3258:	f8 94       	cli
    325a:	de bf       	out	0x3e, r29	; 62
    325c:	0f be       	out	0x3f, r0	; 63
    325e:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3260:	e0 91 65 14 	lds	r30, 0x1465	; 0x801465 <xTimerQueue>
    3264:	f0 91 66 14 	lds	r31, 0x1466	; 0x801466 <xTimerQueue+0x1>
    3268:	30 97       	sbiw	r30, 0x00	; 0
    326a:	81 f1       	breq	.+96     	; 0x32cc <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    326c:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    326e:	2a 83       	std	Y+2, r18	; 0x02
    3270:	3b 83       	std	Y+3, r19	; 0x03
    3272:	4c 83       	std	Y+4, r20	; 0x04
    3274:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3276:	9f 83       	std	Y+7, r25	; 0x07
    3278:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    327a:	66 30       	cpi	r22, 0x06	; 6
    327c:	f4 f4       	brge	.+60     	; 0x32ba <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    327e:	c4 db       	rcall	.-2168   	; 0x2a08 <xTaskGetSchedulerState>
    3280:	82 30       	cpi	r24, 0x02	; 2
    3282:	69 f4       	brne	.+26     	; 0x329e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3284:	00 e0       	ldi	r16, 0x00	; 0
    3286:	a7 01       	movw	r20, r14
    3288:	96 01       	movw	r18, r12
    328a:	be 01       	movw	r22, r28
    328c:	6f 5f       	subi	r22, 0xFF	; 255
    328e:	7f 4f       	sbci	r23, 0xFF	; 255
    3290:	80 91 65 14 	lds	r24, 0x1465	; 0x801465 <xTimerQueue>
    3294:	90 91 66 14 	lds	r25, 0x1466	; 0x801466 <xTimerQueue+0x1>
    3298:	0e 94 1f 08 	call	0x103e	; 0x103e <xQueueGenericSend>
    329c:	18 c0       	rjmp	.+48     	; 0x32ce <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    329e:	00 e0       	ldi	r16, 0x00	; 0
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	a9 01       	movw	r20, r18
    32a6:	be 01       	movw	r22, r28
    32a8:	6f 5f       	subi	r22, 0xFF	; 255
    32aa:	7f 4f       	sbci	r23, 0xFF	; 255
    32ac:	80 91 65 14 	lds	r24, 0x1465	; 0x801465 <xTimerQueue>
    32b0:	90 91 66 14 	lds	r25, 0x1466	; 0x801466 <xTimerQueue+0x1>
    32b4:	0e 94 1f 08 	call	0x103e	; 0x103e <xQueueGenericSend>
    32b8:	0a c0       	rjmp	.+20     	; 0x32ce <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    32ba:	20 e0       	ldi	r18, 0x00	; 0
    32bc:	a8 01       	movw	r20, r16
    32be:	be 01       	movw	r22, r28
    32c0:	6f 5f       	subi	r22, 0xFF	; 255
    32c2:	7f 4f       	sbci	r23, 0xFF	; 255
    32c4:	cf 01       	movw	r24, r30
    32c6:	0e 94 cf 08 	call	0x119e	; 0x119e <xQueueGenericSendFromISR>
    32ca:	01 c0       	rjmp	.+2      	; 0x32ce <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    32cc:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    32ce:	27 96       	adiw	r28, 0x07	; 7
    32d0:	0f b6       	in	r0, 0x3f	; 63
    32d2:	f8 94       	cli
    32d4:	de bf       	out	0x3e, r29	; 62
    32d6:	0f be       	out	0x3f, r0	; 63
    32d8:	cd bf       	out	0x3d, r28	; 61
    32da:	df 91       	pop	r29
    32dc:	cf 91       	pop	r28
    32de:	1f 91       	pop	r17
    32e0:	0f 91       	pop	r16
    32e2:	ff 90       	pop	r15
    32e4:	ef 90       	pop	r14
    32e6:	df 90       	pop	r13
    32e8:	cf 90       	pop	r12
    32ea:	bf 90       	pop	r11
    32ec:	af 90       	pop	r10
    32ee:	9f 90       	pop	r9
    32f0:	8f 90       	pop	r8
    32f2:	08 95       	ret

000032f4 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    32f4:	8f 92       	push	r8
    32f6:	9f 92       	push	r9
    32f8:	af 92       	push	r10
    32fa:	bf 92       	push	r11
    32fc:	cf 92       	push	r12
    32fe:	df 92       	push	r13
    3300:	ef 92       	push	r14
    3302:	ff 92       	push	r15
    3304:	0f 93       	push	r16
    3306:	1f 93       	push	r17
    3308:	cf 93       	push	r28
    330a:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    330c:	3b c0       	rjmp	.+118    	; 0x3384 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    330e:	07 80       	ldd	r0, Z+7	; 0x07
    3310:	f0 85       	ldd	r31, Z+8	; 0x08
    3312:	e0 2d       	mov	r30, r0
    3314:	80 80       	ld	r8, Z
    3316:	91 80       	ldd	r9, Z+1	; 0x01
    3318:	a2 80       	ldd	r10, Z+2	; 0x02
    331a:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    331c:	c0 85       	ldd	r28, Z+8	; 0x08
    331e:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3320:	8e 01       	movw	r16, r28
    3322:	0e 5f       	subi	r16, 0xFE	; 254
    3324:	1f 4f       	sbci	r17, 0xFF	; 255
    3326:	c8 01       	movw	r24, r16
    3328:	0e 94 9b 05 	call	0xb36	; 0xb36 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    332c:	ec 89       	ldd	r30, Y+20	; 0x14
    332e:	fd 89       	ldd	r31, Y+21	; 0x15
    3330:	ce 01       	movw	r24, r28
    3332:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3334:	8e 89       	ldd	r24, Y+22	; 0x16
    3336:	82 ff       	sbrs	r24, 2
    3338:	25 c0       	rjmp	.+74     	; 0x3384 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    333a:	8e 85       	ldd	r24, Y+14	; 0x0e
    333c:	9f 85       	ldd	r25, Y+15	; 0x0f
    333e:	a8 89       	ldd	r26, Y+16	; 0x10
    3340:	b9 89       	ldd	r27, Y+17	; 0x11
    3342:	88 0d       	add	r24, r8
    3344:	99 1d       	adc	r25, r9
    3346:	aa 1d       	adc	r26, r10
    3348:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    334a:	88 16       	cp	r8, r24
    334c:	99 06       	cpc	r9, r25
    334e:	aa 06       	cpc	r10, r26
    3350:	bb 06       	cpc	r11, r27
    3352:	70 f4       	brcc	.+28     	; 0x3370 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3354:	8a 83       	std	Y+2, r24	; 0x02
    3356:	9b 83       	std	Y+3, r25	; 0x03
    3358:	ac 83       	std	Y+4, r26	; 0x04
    335a:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    335c:	db 87       	std	Y+11, r29	; 0x0b
    335e:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3360:	b8 01       	movw	r22, r16
    3362:	80 91 69 14 	lds	r24, 0x1469	; 0x801469 <pxCurrentTimerList>
    3366:	90 91 6a 14 	lds	r25, 0x146A	; 0x80146a <pxCurrentTimerList+0x1>
    336a:	0e 94 5e 05 	call	0xabc	; 0xabc <vListInsert>
    336e:	0a c0       	rjmp	.+20     	; 0x3384 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3370:	c1 2c       	mov	r12, r1
    3372:	d1 2c       	mov	r13, r1
    3374:	76 01       	movw	r14, r12
    3376:	00 e0       	ldi	r16, 0x00	; 0
    3378:	10 e0       	ldi	r17, 0x00	; 0
    337a:	a5 01       	movw	r20, r10
    337c:	94 01       	movw	r18, r8
    337e:	60 e0       	ldi	r22, 0x00	; 0
    3380:	ce 01       	movw	r24, r28
    3382:	5a df       	rcall	.-332    	; 0x3238 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3384:	e0 91 69 14 	lds	r30, 0x1469	; 0x801469 <pxCurrentTimerList>
    3388:	f0 91 6a 14 	lds	r31, 0x146A	; 0x80146a <pxCurrentTimerList+0x1>
    338c:	80 81       	ld	r24, Z
    338e:	81 11       	cpse	r24, r1
    3390:	be cf       	rjmp	.-132    	; 0x330e <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3392:	80 91 67 14 	lds	r24, 0x1467	; 0x801467 <pxOverflowTimerList>
    3396:	90 91 68 14 	lds	r25, 0x1468	; 0x801468 <pxOverflowTimerList+0x1>
    339a:	90 93 6a 14 	sts	0x146A, r25	; 0x80146a <pxCurrentTimerList+0x1>
    339e:	80 93 69 14 	sts	0x1469, r24	; 0x801469 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    33a2:	f0 93 68 14 	sts	0x1468, r31	; 0x801468 <pxOverflowTimerList+0x1>
    33a6:	e0 93 67 14 	sts	0x1467, r30	; 0x801467 <pxOverflowTimerList>
    }
    33aa:	df 91       	pop	r29
    33ac:	cf 91       	pop	r28
    33ae:	1f 91       	pop	r17
    33b0:	0f 91       	pop	r16
    33b2:	ff 90       	pop	r15
    33b4:	ef 90       	pop	r14
    33b6:	df 90       	pop	r13
    33b8:	cf 90       	pop	r12
    33ba:	bf 90       	pop	r11
    33bc:	af 90       	pop	r10
    33be:	9f 90       	pop	r9
    33c0:	8f 90       	pop	r8
    33c2:	08 95       	ret

000033c4 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    33c4:	cf 92       	push	r12
    33c6:	df 92       	push	r13
    33c8:	ef 92       	push	r14
    33ca:	ff 92       	push	r15
    33cc:	cf 93       	push	r28
    33ce:	df 93       	push	r29
    33d0:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    33d2:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <xTaskGetTickCount>
    33d6:	6b 01       	movw	r12, r22
    33d8:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    33da:	80 91 5f 14 	lds	r24, 0x145F	; 0x80145f <xLastTime.2436>
    33de:	90 91 60 14 	lds	r25, 0x1460	; 0x801460 <xLastTime.2436+0x1>
    33e2:	a0 91 61 14 	lds	r26, 0x1461	; 0x801461 <xLastTime.2436+0x2>
    33e6:	b0 91 62 14 	lds	r27, 0x1462	; 0x801462 <xLastTime.2436+0x3>
    33ea:	c8 16       	cp	r12, r24
    33ec:	d9 06       	cpc	r13, r25
    33ee:	ea 06       	cpc	r14, r26
    33f0:	fb 06       	cpc	r15, r27
    33f2:	20 f4       	brcc	.+8      	; 0x33fc <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    33f4:	7f df       	rcall	.-258    	; 0x32f4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	88 83       	st	Y, r24
    33fa:	01 c0       	rjmp	.+2      	; 0x33fe <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    33fc:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    33fe:	c0 92 5f 14 	sts	0x145F, r12	; 0x80145f <xLastTime.2436>
    3402:	d0 92 60 14 	sts	0x1460, r13	; 0x801460 <xLastTime.2436+0x1>
    3406:	e0 92 61 14 	sts	0x1461, r14	; 0x801461 <xLastTime.2436+0x2>
    340a:	f0 92 62 14 	sts	0x1462, r15	; 0x801462 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    340e:	c7 01       	movw	r24, r14
    3410:	b6 01       	movw	r22, r12
    3412:	df 91       	pop	r29
    3414:	cf 91       	pop	r28
    3416:	ff 90       	pop	r15
    3418:	ef 90       	pop	r14
    341a:	df 90       	pop	r13
    341c:	cf 90       	pop	r12
    341e:	08 95       	ret

00003420 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3420:	4f 92       	push	r4
    3422:	5f 92       	push	r5
    3424:	6f 92       	push	r6
    3426:	7f 92       	push	r7
    3428:	8f 92       	push	r8
    342a:	9f 92       	push	r9
    342c:	af 92       	push	r10
    342e:	bf 92       	push	r11
    3430:	cf 92       	push	r12
    3432:	df 92       	push	r13
    3434:	ef 92       	push	r14
    3436:	ff 92       	push	r15
    3438:	0f 93       	push	r16
    343a:	1f 93       	push	r17
    343c:	cf 93       	push	r28
    343e:	df 93       	push	r29
    3440:	4b 01       	movw	r8, r22
    3442:	5c 01       	movw	r10, r24
    3444:	29 01       	movw	r4, r18
    3446:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3448:	e0 91 69 14 	lds	r30, 0x1469	; 0x801469 <pxCurrentTimerList>
    344c:	f0 91 6a 14 	lds	r31, 0x146A	; 0x80146a <pxCurrentTimerList+0x1>
    3450:	07 80       	ldd	r0, Z+7	; 0x07
    3452:	f0 85       	ldd	r31, Z+8	; 0x08
    3454:	e0 2d       	mov	r30, r0
    3456:	c0 85       	ldd	r28, Z+8	; 0x08
    3458:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    345a:	ce 01       	movw	r24, r28
    345c:	02 96       	adiw	r24, 0x02	; 2
    345e:	0e 94 9b 05 	call	0xb36	; 0xb36 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3462:	8e 89       	ldd	r24, Y+22	; 0x16
    3464:	82 ff       	sbrs	r24, 2
    3466:	1b c0       	rjmp	.+54     	; 0x349e <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3468:	4e 85       	ldd	r20, Y+14	; 0x0e
    346a:	5f 85       	ldd	r21, Y+15	; 0x0f
    346c:	68 89       	ldd	r22, Y+16	; 0x10
    346e:	79 89       	ldd	r23, Y+17	; 0x11
    3470:	48 0d       	add	r20, r8
    3472:	59 1d       	adc	r21, r9
    3474:	6a 1d       	adc	r22, r10
    3476:	7b 1d       	adc	r23, r11
    3478:	75 01       	movw	r14, r10
    347a:	64 01       	movw	r12, r8
    347c:	93 01       	movw	r18, r6
    347e:	82 01       	movw	r16, r4
    3480:	ce 01       	movw	r24, r28
    3482:	47 de       	rcall	.-882    	; 0x3112 <prvInsertTimerInActiveList>
    3484:	88 23       	and	r24, r24
    3486:	69 f0       	breq	.+26     	; 0x34a2 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3488:	c1 2c       	mov	r12, r1
    348a:	d1 2c       	mov	r13, r1
    348c:	76 01       	movw	r14, r12
    348e:	00 e0       	ldi	r16, 0x00	; 0
    3490:	10 e0       	ldi	r17, 0x00	; 0
    3492:	a5 01       	movw	r20, r10
    3494:	94 01       	movw	r18, r8
    3496:	60 e0       	ldi	r22, 0x00	; 0
    3498:	ce 01       	movw	r24, r28
    349a:	ce de       	rcall	.-612    	; 0x3238 <xTimerGenericCommand>
    349c:	02 c0       	rjmp	.+4      	; 0x34a2 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    349e:	8e 7f       	andi	r24, 0xFE	; 254
    34a0:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    34a2:	ec 89       	ldd	r30, Y+20	; 0x14
    34a4:	fd 89       	ldd	r31, Y+21	; 0x15
    34a6:	ce 01       	movw	r24, r28
    34a8:	19 95       	eicall
    }
    34aa:	df 91       	pop	r29
    34ac:	cf 91       	pop	r28
    34ae:	1f 91       	pop	r17
    34b0:	0f 91       	pop	r16
    34b2:	ff 90       	pop	r15
    34b4:	ef 90       	pop	r14
    34b6:	df 90       	pop	r13
    34b8:	cf 90       	pop	r12
    34ba:	bf 90       	pop	r11
    34bc:	af 90       	pop	r10
    34be:	9f 90       	pop	r9
    34c0:	8f 90       	pop	r8
    34c2:	7f 90       	pop	r7
    34c4:	6f 90       	pop	r6
    34c6:	5f 90       	pop	r5
    34c8:	4f 90       	pop	r4
    34ca:	08 95       	ret

000034cc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    34cc:	8f 92       	push	r8
    34ce:	9f 92       	push	r9
    34d0:	af 92       	push	r10
    34d2:	bf 92       	push	r11
    34d4:	cf 92       	push	r12
    34d6:	df 92       	push	r13
    34d8:	ef 92       	push	r14
    34da:	ff 92       	push	r15
    34dc:	1f 93       	push	r17
    34de:	cf 93       	push	r28
    34e0:	df 93       	push	r29
    34e2:	1f 92       	push	r1
    34e4:	cd b7       	in	r28, 0x3d	; 61
    34e6:	de b7       	in	r29, 0x3e	; 62
    34e8:	6b 01       	movw	r12, r22
    34ea:	7c 01       	movw	r14, r24
    34ec:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    34ee:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    34f2:	ce 01       	movw	r24, r28
    34f4:	01 96       	adiw	r24, 0x01	; 1
    34f6:	66 df       	rcall	.-308    	; 0x33c4 <prvSampleTimeNow>
    34f8:	4b 01       	movw	r8, r22
    34fa:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    34fc:	89 81       	ldd	r24, Y+1	; 0x01
    34fe:	81 11       	cpse	r24, r1
    3500:	2d c0       	rjmp	.+90     	; 0x355c <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3502:	11 11       	cpse	r17, r1
    3504:	0d c0       	rjmp	.+26     	; 0x3520 <prvProcessTimerOrBlockTask+0x54>
    3506:	8c 14       	cp	r8, r12
    3508:	9d 04       	cpc	r9, r13
    350a:	ae 04       	cpc	r10, r14
    350c:	bf 04       	cpc	r11, r15
    350e:	40 f0       	brcs	.+16     	; 0x3520 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3510:	0e 94 c1 10 	call	0x2182	; 0x2182 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3514:	a5 01       	movw	r20, r10
    3516:	94 01       	movw	r18, r8
    3518:	c7 01       	movw	r24, r14
    351a:	b6 01       	movw	r22, r12
    351c:	81 df       	rcall	.-254    	; 0x3420 <prvProcessExpiredTimer>
    351e:	20 c0       	rjmp	.+64     	; 0x3560 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3520:	11 23       	and	r17, r17
    3522:	41 f0       	breq	.+16     	; 0x3534 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3524:	e0 91 67 14 	lds	r30, 0x1467	; 0x801467 <pxOverflowTimerList>
    3528:	f0 91 68 14 	lds	r31, 0x1468	; 0x801468 <pxOverflowTimerList+0x1>
    352c:	80 81       	ld	r24, Z
    352e:	11 e0       	ldi	r17, 0x01	; 1
    3530:	81 11       	cpse	r24, r1
    3532:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3534:	b7 01       	movw	r22, r14
    3536:	a6 01       	movw	r20, r12
    3538:	48 19       	sub	r20, r8
    353a:	59 09       	sbc	r21, r9
    353c:	6a 09       	sbc	r22, r10
    353e:	7b 09       	sbc	r23, r11
    3540:	21 2f       	mov	r18, r17
    3542:	80 91 65 14 	lds	r24, 0x1465	; 0x801465 <xTimerQueue>
    3546:	90 91 66 14 	lds	r25, 0x1466	; 0x801466 <xTimerQueue+0x1>
    354a:	0e 94 99 09 	call	0x1332	; 0x1332 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    354e:	0e 94 c1 10 	call	0x2182	; 0x2182 <xTaskResumeAll>
    3552:	81 11       	cpse	r24, r1
    3554:	05 c0       	rjmp	.+10     	; 0x3560 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3556:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
    355a:	02 c0       	rjmp	.+4      	; 0x3560 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    355c:	0e 94 c1 10 	call	0x2182	; 0x2182 <xTaskResumeAll>
            }
        }
    }
    3560:	0f 90       	pop	r0
    3562:	df 91       	pop	r29
    3564:	cf 91       	pop	r28
    3566:	1f 91       	pop	r17
    3568:	ff 90       	pop	r15
    356a:	ef 90       	pop	r14
    356c:	df 90       	pop	r13
    356e:	cf 90       	pop	r12
    3570:	bf 90       	pop	r11
    3572:	af 90       	pop	r10
    3574:	9f 90       	pop	r9
    3576:	8f 90       	pop	r8
    3578:	08 95       	ret

0000357a <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    357a:	af 92       	push	r10
    357c:	bf 92       	push	r11
    357e:	cf 92       	push	r12
    3580:	df 92       	push	r13
    3582:	ef 92       	push	r14
    3584:	ff 92       	push	r15
    3586:	0f 93       	push	r16
    3588:	1f 93       	push	r17
    358a:	cf 93       	push	r28
    358c:	df 93       	push	r29
    358e:	cd b7       	in	r28, 0x3d	; 61
    3590:	de b7       	in	r29, 0x3e	; 62
    3592:	28 97       	sbiw	r28, 0x08	; 8
    3594:	0f b6       	in	r0, 0x3f	; 63
    3596:	f8 94       	cli
    3598:	de bf       	out	0x3e, r29	; 62
    359a:	0f be       	out	0x3f, r0	; 63
    359c:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    359e:	82 c0       	rjmp	.+260    	; 0x36a4 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    35a0:	89 81       	ldd	r24, Y+1	; 0x01
    35a2:	88 23       	and	r24, r24
    35a4:	0c f4       	brge	.+2      	; 0x35a8 <prvProcessReceivedCommands+0x2e>
    35a6:	7e c0       	rjmp	.+252    	; 0x36a4 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    35a8:	ae 80       	ldd	r10, Y+6	; 0x06
    35aa:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    35ac:	d5 01       	movw	r26, r10
    35ae:	1c 96       	adiw	r26, 0x0c	; 12
    35b0:	8d 91       	ld	r24, X+
    35b2:	9c 91       	ld	r25, X
    35b4:	1d 97       	sbiw	r26, 0x0d	; 13
    35b6:	89 2b       	or	r24, r25
    35b8:	21 f0       	breq	.+8      	; 0x35c2 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    35ba:	c5 01       	movw	r24, r10
    35bc:	02 96       	adiw	r24, 0x02	; 2
    35be:	0e 94 9b 05 	call	0xb36	; 0xb36 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    35c2:	ce 01       	movw	r24, r28
    35c4:	08 96       	adiw	r24, 0x08	; 8
    35c6:	fe de       	rcall	.-516    	; 0x33c4 <prvSampleTimeNow>
    35c8:	8b 01       	movw	r16, r22
    35ca:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    35cc:	e9 81       	ldd	r30, Y+1	; 0x01
    35ce:	0e 2e       	mov	r0, r30
    35d0:	00 0c       	add	r0, r0
    35d2:	ff 0b       	sbc	r31, r31
    35d4:	ea 30       	cpi	r30, 0x0A	; 10
    35d6:	f1 05       	cpc	r31, r1
    35d8:	08 f0       	brcs	.+2      	; 0x35dc <prvProcessReceivedCommands+0x62>
    35da:	64 c0       	rjmp	.+200    	; 0x36a4 <prvProcessReceivedCommands+0x12a>
    35dc:	88 27       	eor	r24, r24
    35de:	ee 58       	subi	r30, 0x8E	; 142
    35e0:	ff 4f       	sbci	r31, 0xFF	; 255
    35e2:	8f 4f       	sbci	r24, 0xFF	; 255
    35e4:	0c 94 ca 30 	jmp	0x6194	; 0x6194 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    35e8:	f5 01       	movw	r30, r10
    35ea:	86 89       	ldd	r24, Z+22	; 0x16
    35ec:	81 60       	ori	r24, 0x01	; 1
    35ee:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    35f0:	ca 80       	ldd	r12, Y+2	; 0x02
    35f2:	db 80       	ldd	r13, Y+3	; 0x03
    35f4:	ec 80       	ldd	r14, Y+4	; 0x04
    35f6:	fd 80       	ldd	r15, Y+5	; 0x05
    35f8:	46 85       	ldd	r20, Z+14	; 0x0e
    35fa:	57 85       	ldd	r21, Z+15	; 0x0f
    35fc:	60 89       	ldd	r22, Z+16	; 0x10
    35fe:	71 89       	ldd	r23, Z+17	; 0x11
    3600:	4c 0d       	add	r20, r12
    3602:	5d 1d       	adc	r21, r13
    3604:	6e 1d       	adc	r22, r14
    3606:	7f 1d       	adc	r23, r15
    3608:	c5 01       	movw	r24, r10
    360a:	83 dd       	rcall	.-1274   	; 0x3112 <prvInsertTimerInActiveList>
    360c:	88 23       	and	r24, r24
    360e:	09 f4       	brne	.+2      	; 0x3612 <prvProcessReceivedCommands+0x98>
    3610:	49 c0       	rjmp	.+146    	; 0x36a4 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3612:	d5 01       	movw	r26, r10
    3614:	54 96       	adiw	r26, 0x14	; 20
    3616:	ed 91       	ld	r30, X+
    3618:	fc 91       	ld	r31, X
    361a:	55 97       	sbiw	r26, 0x15	; 21
    361c:	c5 01       	movw	r24, r10
    361e:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3620:	f5 01       	movw	r30, r10
    3622:	86 89       	ldd	r24, Z+22	; 0x16
    3624:	82 ff       	sbrs	r24, 2
    3626:	3e c0       	rjmp	.+124    	; 0x36a4 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3628:	4a 81       	ldd	r20, Y+2	; 0x02
    362a:	5b 81       	ldd	r21, Y+3	; 0x03
    362c:	6c 81       	ldd	r22, Y+4	; 0x04
    362e:	7d 81       	ldd	r23, Y+5	; 0x05
    3630:	86 85       	ldd	r24, Z+14	; 0x0e
    3632:	97 85       	ldd	r25, Z+15	; 0x0f
    3634:	a0 89       	ldd	r26, Z+16	; 0x10
    3636:	b1 89       	ldd	r27, Z+17	; 0x11
    3638:	9a 01       	movw	r18, r20
    363a:	ab 01       	movw	r20, r22
    363c:	28 0f       	add	r18, r24
    363e:	39 1f       	adc	r19, r25
    3640:	4a 1f       	adc	r20, r26
    3642:	5b 1f       	adc	r21, r27
    3644:	c1 2c       	mov	r12, r1
    3646:	d1 2c       	mov	r13, r1
    3648:	76 01       	movw	r14, r12
    364a:	00 e0       	ldi	r16, 0x00	; 0
    364c:	10 e0       	ldi	r17, 0x00	; 0
    364e:	60 e0       	ldi	r22, 0x00	; 0
    3650:	c5 01       	movw	r24, r10
    3652:	f2 dd       	rcall	.-1052   	; 0x3238 <xTimerGenericCommand>
    3654:	27 c0       	rjmp	.+78     	; 0x36a4 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3656:	d5 01       	movw	r26, r10
    3658:	56 96       	adiw	r26, 0x16	; 22
    365a:	8c 91       	ld	r24, X
    365c:	56 97       	sbiw	r26, 0x16	; 22
    365e:	8e 7f       	andi	r24, 0xFE	; 254
    3660:	56 96       	adiw	r26, 0x16	; 22
    3662:	8c 93       	st	X, r24
                        break;
    3664:	1f c0       	rjmp	.+62     	; 0x36a4 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3666:	f5 01       	movw	r30, r10
    3668:	86 89       	ldd	r24, Z+22	; 0x16
    366a:	81 60       	ori	r24, 0x01	; 1
    366c:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    366e:	4a 81       	ldd	r20, Y+2	; 0x02
    3670:	5b 81       	ldd	r21, Y+3	; 0x03
    3672:	6c 81       	ldd	r22, Y+4	; 0x04
    3674:	7d 81       	ldd	r23, Y+5	; 0x05
    3676:	46 87       	std	Z+14, r20	; 0x0e
    3678:	57 87       	std	Z+15, r21	; 0x0f
    367a:	60 8b       	std	Z+16, r22	; 0x10
    367c:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    367e:	40 0f       	add	r20, r16
    3680:	51 1f       	adc	r21, r17
    3682:	62 1f       	adc	r22, r18
    3684:	73 1f       	adc	r23, r19
    3686:	68 01       	movw	r12, r16
    3688:	79 01       	movw	r14, r18
    368a:	c5 01       	movw	r24, r10
    368c:	42 dd       	rcall	.-1404   	; 0x3112 <prvInsertTimerInActiveList>
                        break;
    368e:	0a c0       	rjmp	.+20     	; 0x36a4 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3690:	f5 01       	movw	r30, r10
    3692:	86 89       	ldd	r24, Z+22	; 0x16
    3694:	81 fd       	sbrc	r24, 1
    3696:	04 c0       	rjmp	.+8      	; 0x36a0 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3698:	c5 01       	movw	r24, r10
    369a:	0e 94 0c 05 	call	0xa18	; 0xa18 <vPortFree>
    369e:	02 c0       	rjmp	.+4      	; 0x36a4 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    36a0:	8e 7f       	andi	r24, 0xFE	; 254
    36a2:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    36a4:	20 e0       	ldi	r18, 0x00	; 0
    36a6:	30 e0       	ldi	r19, 0x00	; 0
    36a8:	a9 01       	movw	r20, r18
    36aa:	be 01       	movw	r22, r28
    36ac:	6f 5f       	subi	r22, 0xFF	; 255
    36ae:	7f 4f       	sbci	r23, 0xFF	; 255
    36b0:	80 91 65 14 	lds	r24, 0x1465	; 0x801465 <xTimerQueue>
    36b4:	90 91 66 14 	lds	r25, 0x1466	; 0x801466 <xTimerQueue+0x1>
    36b8:	0e 94 0a 09 	call	0x1214	; 0x1214 <xQueueReceive>
    36bc:	81 11       	cpse	r24, r1
    36be:	70 cf       	rjmp	.-288    	; 0x35a0 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    36c0:	28 96       	adiw	r28, 0x08	; 8
    36c2:	0f b6       	in	r0, 0x3f	; 63
    36c4:	f8 94       	cli
    36c6:	de bf       	out	0x3e, r29	; 62
    36c8:	0f be       	out	0x3f, r0	; 63
    36ca:	cd bf       	out	0x3d, r28	; 61
    36cc:	df 91       	pop	r29
    36ce:	cf 91       	pop	r28
    36d0:	1f 91       	pop	r17
    36d2:	0f 91       	pop	r16
    36d4:	ff 90       	pop	r15
    36d6:	ef 90       	pop	r14
    36d8:	df 90       	pop	r13
    36da:	cf 90       	pop	r12
    36dc:	bf 90       	pop	r11
    36de:	af 90       	pop	r10
    36e0:	08 95       	ret

000036e2 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    36e2:	08 95       	ret

000036e4 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    36e4:	84 b1       	in	r24, 0x04	; 4
    36e6:	80 68       	ori	r24, 0x80	; 128
    36e8:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    36ea:	85 b1       	in	r24, 0x05	; 5
    36ec:	80 68       	ori	r24, 0x80	; 128
    36ee:	85 b9       	out	0x05, r24	; 5
    36f0:	08 95       	ret

000036f2 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    36f2:	83 b1       	in	r24, 0x03	; 3
    36f4:	80 68       	ori	r24, 0x80	; 128
    36f6:	83 b9       	out	0x03, r24	; 3
    36f8:	08 95       	ret

000036fa <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    36fa:	f4 df       	rcall	.-24     	; 0x36e4 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    36fc:	2f ef       	ldi	r18, 0xFF	; 255
    36fe:	80 e7       	ldi	r24, 0x70	; 112
    3700:	92 e0       	ldi	r25, 0x02	; 2
    3702:	21 50       	subi	r18, 0x01	; 1
    3704:	80 40       	sbci	r24, 0x00	; 0
    3706:	90 40       	sbci	r25, 0x00	; 0
    3708:	e1 f7       	brne	.-8      	; 0x3702 <vApplicationMallocFailedHook+0x8>
    370a:	00 c0       	rjmp	.+0      	; 0x370c <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    370c:	00 00       	nop
    370e:	f1 df       	rcall	.-30     	; 0x36f2 <prvBlinkMainLed>
    3710:	f5 cf       	rjmp	.-22     	; 0x36fc <vApplicationMallocFailedHook+0x2>

00003712 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3712:	e8 df       	rcall	.-48     	; 0x36e4 <prvSetMainLedOn>
    3714:	2f ef       	ldi	r18, 0xFF	; 255
    3716:	87 ea       	ldi	r24, 0xA7	; 167
    3718:	91 e6       	ldi	r25, 0x61	; 97
    371a:	21 50       	subi	r18, 0x01	; 1
    371c:	80 40       	sbci	r24, 0x00	; 0
    371e:	90 40       	sbci	r25, 0x00	; 0
    3720:	e1 f7       	brne	.-8      	; 0x371a <vApplicationStackOverflowHook+0x8>
    3722:	00 c0       	rjmp	.+0      	; 0x3724 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3724:	00 00       	nop
    3726:	e5 df       	rcall	.-54     	; 0x36f2 <prvBlinkMainLed>
    3728:	f5 cf       	rjmp	.-22     	; 0x3714 <vApplicationStackOverflowHook+0x2>

0000372a <hih8120_handler_initialise>:

static char _out_buf[100];

void hih820_handler_task( void *pvParameters );

void hih8120_handler_initialise(UBaseType_t hih8120_task_priority){
    372a:	ef 92       	push	r14
    372c:	ff 92       	push	r15
    372e:	0f 93       	push	r16
    3730:	08 2f       	mov	r16, r24
	if ( HIH8120_OK == hih8120_initialise() ){
    3732:	80 d2       	rcall	.+1280   	; 0x3c34 <hih8120_initialise>
    3734:	81 11       	cpse	r24, r1
    3736:	06 c0       	rjmp	.+12     	; 0x3744 <hih8120_handler_initialise+0x1a>
			printf(HIH8120_OK);
    3738:	1f 92       	push	r1
    373a:	1f 92       	push	r1
    373c:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
    3740:	0f 90       	pop	r0
    3742:	0f 90       	pop	r0
	}
	xTaskCreate(
    3744:	e1 2c       	mov	r14, r1
    3746:	f1 2c       	mov	r15, r1
    3748:	20 e0       	ldi	r18, 0x00	; 0
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	40 ec       	ldi	r20, 0xC0	; 192
    374e:	50 e0       	ldi	r21, 0x00	; 0
    3750:	69 ee       	ldi	r22, 0xE9	; 233
    3752:	72 e0       	ldi	r23, 0x02	; 2
    3754:	82 ed       	ldi	r24, 0xD2	; 210
    3756:	9b e1       	ldi	r25, 0x1B	; 27
    3758:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <xTaskCreate>
	,  "Hih820Hand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  hih8120_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    375c:	0f 91       	pop	r16
    375e:	ff 90       	pop	r15
    3760:	ef 90       	pop	r14
    3762:	08 95       	ret

00003764 <hih820_getHumidityInUint16>:
		}
	}
}

uint16_t hih820_getHumidityInUint16(){
	return humidityIn16/10;
    3764:	20 91 83 14 	lds	r18, 0x1483	; 0x801483 <humidityIn16>
    3768:	30 91 84 14 	lds	r19, 0x1484	; 0x801484 <humidityIn16+0x1>
    376c:	ad ec       	ldi	r26, 0xCD	; 205
    376e:	bc ec       	ldi	r27, 0xCC	; 204
    3770:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__umulhisi3>
}
    3774:	96 95       	lsr	r25
    3776:	87 95       	ror	r24
    3778:	96 95       	lsr	r25
    377a:	87 95       	ror	r24
    377c:	96 95       	lsr	r25
    377e:	87 95       	ror	r24
    3780:	08 95       	ret

00003782 <hih820_getTemperatureInUint16>:

int16_t hih820_getTemperatureInUint16(){
	return temperatureIn16/10;
    3782:	80 91 81 14 	lds	r24, 0x1481	; 0x801481 <temperatureIn16>
    3786:	90 91 82 14 	lds	r25, 0x1482	; 0x801482 <temperatureIn16+0x1>
    378a:	6a e0       	ldi	r22, 0x0A	; 10
    378c:	70 e0       	ldi	r23, 0x00	; 0
    378e:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
    3792:	cb 01       	movw	r24, r22
}
    3794:	08 95       	ret

00003796 <aFunctionToSetBits>:
void aFunctionToSetBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Set bit 0 and bit 4 in xEventGroup. */
  uxBits = xEventGroupSetBits(
    3796:	40 e1       	ldi	r20, 0x10	; 16
    3798:	50 e0       	ldi	r21, 0x00	; 0
    379a:	60 e0       	ldi	r22, 0x00	; 0
    379c:	70 e0       	ldi	r23, 0x00	; 0
    379e:	0c 94 62 03 	jmp	0x6c4	; 0x6c4 <xEventGroupSetBits>
    37a2:	08 95       	ret

000037a4 <hih820_handler_task>:
	,  hih8120_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void hih820_handler_task(void *pvParameters)
{
    37a4:	cf 93       	push	r28
    37a6:	df 93       	push	r29
    37a8:	00 d0       	rcall	.+0      	; 0x37aa <hih820_handler_task+0x6>
    37aa:	1f 92       	push	r1
    37ac:	cd b7       	in	r28, 0x3d	; 61
    37ae:	de b7       	in	r29, 0x3e	; 62
	printf("start1");
    37b0:	84 ef       	ldi	r24, 0xF4	; 244
    37b2:	92 e0       	ldi	r25, 0x02	; 2
    37b4:	9f 93       	push	r25
    37b6:	8f 93       	push	r24
    37b8:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
	(void)pvParameters;
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    37bc:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <xTaskGetTickCount>
    37c0:	69 83       	std	Y+1, r22	; 0x01
    37c2:	7a 83       	std	Y+2, r23	; 0x02
    37c4:	8b 83       	std	Y+3, r24	; 0x03
    37c6:	9c 83       	std	Y+4, r25	; 0x04
    37c8:	0f 90       	pop	r0
    37ca:	0f 90       	pop	r0
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    37cc:	48 ea       	ldi	r20, 0xA8	; 168
    37ce:	58 e4       	ldi	r21, 0x48	; 72
    37d0:	60 e0       	ldi	r22, 0x00	; 0
    37d2:	70 e0       	ldi	r23, 0x00	; 0
    37d4:	ce 01       	movw	r24, r28
    37d6:	01 96       	adiw	r24, 0x01	; 1
    37d8:	0e 94 9d 11 	call	0x233a	; 0x233a <xTaskDelayUntil>
		printf("start2");
    37dc:	8b ef       	ldi	r24, 0xFB	; 251
    37de:	92 e0       	ldi	r25, 0x02	; 2
    37e0:	9f 93       	push	r25
    37e2:	8f 93       	push	r24
    37e4:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
		if (HIH8120_OK == hih8120_wakeup())
    37e8:	3d d2       	rcall	.+1146   	; 0x3c64 <hih8120_wakeup>
    37ea:	0f 90       	pop	r0
    37ec:	0f 90       	pop	r0
    37ee:	81 11       	cpse	r24, r1
    37f0:	ed cf       	rjmp	.-38     	; 0x37cc <hih820_handler_task+0x28>
		{
			printf("start4");
    37f2:	82 e0       	ldi	r24, 0x02	; 2
    37f4:	93 e0       	ldi	r25, 0x03	; 3
    37f6:	9f 93       	push	r25
    37f8:	8f 93       	push	r24
    37fa:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
			vTaskDelay(50);
    37fe:	62 e3       	ldi	r22, 0x32	; 50
    3800:	70 e0       	ldi	r23, 0x00	; 0
    3802:	80 e0       	ldi	r24, 0x00	; 0
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	0e 94 02 12 	call	0x2404	; 0x2404 <vTaskDelay>
			if (HIH8120_OK == hih8120_measure())
    380a:	41 d2       	rcall	.+1154   	; 0x3c8e <hih8120_measure>
    380c:	0f 90       	pop	r0
    380e:	0f 90       	pop	r0
    3810:	81 11       	cpse	r24, r1
    3812:	dc cf       	rjmp	.-72     	; 0x37cc <hih820_handler_task+0x28>
			{
				printf("start5");
    3814:	89 e0       	ldi	r24, 0x09	; 9
    3816:	93 e0       	ldi	r25, 0x03	; 3
    3818:	9f 93       	push	r25
    381a:	8f 93       	push	r24
    381c:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
				vTaskDelay(1);
    3820:	61 e0       	ldi	r22, 0x01	; 1
    3822:	70 e0       	ldi	r23, 0x00	; 0
    3824:	80 e0       	ldi	r24, 0x00	; 0
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	0e 94 02 12 	call	0x2404	; 0x2404 <vTaskDelay>
				humidityIn16 = hih8120_getHumidityPercent_x10();
    382c:	56 d2       	rcall	.+1196   	; 0x3cda <hih8120_getHumidityPercent_x10>
    382e:	90 93 84 14 	sts	0x1484, r25	; 0x801484 <humidityIn16+0x1>
    3832:	80 93 83 14 	sts	0x1483, r24	; 0x801483 <humidityIn16>
				temperatureIn16 = hih8120_getTemperature_x10();
    3836:	77 d2       	rcall	.+1262   	; 0x3d26 <hih8120_getTemperature_x10>
    3838:	90 93 82 14 	sts	0x1482, r25	; 0x801482 <temperatureIn16+0x1>
    383c:	80 93 81 14 	sts	0x1481, r24	; 0x801481 <temperatureIn16>
				printf("Arrived here");
    3840:	80 e1       	ldi	r24, 0x10	; 16
    3842:	93 e0       	ldi	r25, 0x03	; 3
    3844:	9f 93       	push	r25
    3846:	8f 93       	push	r24
    3848:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
				aFunctionToSetBits(Application_getEventGroup());
    384c:	0e 94 89 01 	call	0x312	; 0x312 <Application_getEventGroup>
    3850:	a2 df       	rcall	.-188    	; 0x3796 <aFunctionToSetBits>
    3852:	0f 90       	pop	r0
    3854:	0f 90       	pop	r0
    3856:	0f 90       	pop	r0
    3858:	0f 90       	pop	r0
    385a:	b8 cf       	rjmp	.-144    	; 0x37cc <hih820_handler_task+0x28>

0000385c <create_semaphores>:
void hih8120_handler_initialise(UBaseType_t hih8120_handler_task_priority);
// Prototype for Application handler
void Application_handler_initialise(UBaseType_t Application_task_priority);

void create_semaphores(void)
{
    385c:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    385e:	80 91 7d 16 	lds	r24, 0x167D	; 0x80167d <xTestSemaphore>
    3862:	90 91 7e 16 	lds	r25, 0x167E	; 0x80167e <xTestSemaphore+0x1>
    3866:	89 2b       	or	r24, r25
    3868:	89 f4       	brne	.+34     	; 0x388c <create_semaphores+0x30>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    386a:	81 e0       	ldi	r24, 0x01	; 1
    386c:	0e 94 c3 08 	call	0x1186	; 0x1186 <xQueueCreateMutex>
    3870:	90 93 7e 16 	sts	0x167E, r25	; 0x80167e <xTestSemaphore+0x1>
    3874:	80 93 7d 16 	sts	0x167D, r24	; 0x80167d <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    3878:	00 97       	sbiw	r24, 0x00	; 0
    387a:	41 f0       	breq	.+16     	; 0x388c <create_semaphores+0x30>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    387c:	00 e0       	ldi	r16, 0x00	; 0
    387e:	20 e0       	ldi	r18, 0x00	; 0
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	a9 01       	movw	r20, r18
    3884:	60 e0       	ldi	r22, 0x00	; 0
    3886:	70 e0       	ldi	r23, 0x00	; 0
    3888:	0e 94 1f 08 	call	0x103e	; 0x103e <xQueueGenericSend>
		}
	}
}
    388c:	0f 91       	pop	r16
    388e:	08 95       	ret

00003890 <main>:
/*-----------------------------------------------------------*/
int main(void)
{
	// Must be done as the very first thing!!
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3890:	80 e0       	ldi	r24, 0x00	; 0
    3892:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <stdio_initialise>
	// Let's create some semaphores
	create_semaphores();
    3896:	e2 df       	rcall	.-60     	; 0x385c <create_semaphores>
	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(6); // Priority 5 for internal task
    3898:	86 e0       	ldi	r24, 0x06	; 6
    389a:	0e 94 8d 28 	call	0x511a	; 0x511a <status_leds_initialise>
	//Initialize Application
	Application_handler_initialise(5);
    389e:	85 e0       	ldi	r24, 0x05	; 5
    38a0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Application_handler_initialise>
	//initialize CO2Sensor
	mh_z19_initialise(ser_USART3);
    38a4:	83 e0       	ldi	r24, 0x03	; 3
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	0f d7       	rcall	.+3614   	; 0x46c8 <mh_z19_initialise>
	//create CO2 task
	CO2Sensor_handler_initialise(4);
    38aa:	84 e0       	ldi	r24, 0x04	; 4
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	0e 94 0e 02 	call	0x41c	; 0x41c <CO2Sensor_handler_initialise>
	//Create humidity temperature task and start with priority 3
	hih8120_handler_initialise(3);
    38b2:	83 e0       	ldi	r24, 0x03	; 3
    38b4:	3a df       	rcall	.-396    	; 0x372a <hih8120_handler_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
    38b6:	60 e0       	ldi	r22, 0x00	; 0
    38b8:	70 e0       	ldi	r23, 0x00	; 0
    38ba:	81 e0       	ldi	r24, 0x01	; 1
	// Create LoRaWAN task and start it up with priority 2
	lora_handler_initialise(2);
    38bc:	5e d3       	rcall	.+1724   	; 0x3f7a <lora_driver_initialise>
    38be:	82 e0       	ldi	r24, 0x02	; 2
    38c0:	78 d1       	rcall	.+752    	; 0x3bb2 <lora_handler_initialise>
	
	
	printf("Program Started!!\n");
    38c2:	8d e1       	ldi	r24, 0x1D	; 29
    38c4:	93 e0       	ldi	r25, 0x03	; 3
    38c6:	0e 94 d0 33 	call	0x67a0	; 0x67a0 <puts>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    38ca:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <vTaskStartScheduler>
    38ce:	ff cf       	rjmp	.-2      	; 0x38ce <main+0x3e>

000038d0 <SensorDataPackageHandler_SetCO2>:
int16_t tempIn16 = 0.0;
uint16_t co2_ppmIn16 = 0.0;
static lora_driver_payload_t _uplink_payload;

void SensorDataPackageHandler_SetCO2(uint16_t co2){
	co2_ppmIn16 = co2;
    38d0:	90 93 9c 14 	sts	0x149C, r25	; 0x80149c <co2_ppmIn16+0x1>
    38d4:	80 93 9b 14 	sts	0x149B, r24	; 0x80149b <co2_ppmIn16>
    38d8:	08 95       	ret

000038da <SensorDataPackageHandler_SetHumidity>:
}

void SensorDataPackageHandler_SetHumidity(uint16_t humidity){
	humIn16 = humidity;
    38da:	90 93 a0 14 	sts	0x14A0, r25	; 0x8014a0 <humIn16+0x1>
    38de:	80 93 9f 14 	sts	0x149F, r24	; 0x80149f <humIn16>
    38e2:	08 95       	ret

000038e4 <SensorDataPackageHandler_SetTemperature>:
}

void SensorDataPackageHandler_SetTemperature(int16_t temperature){
	tempIn16 = temperature;
    38e4:	90 93 9e 14 	sts	0x149E, r25	; 0x80149e <tempIn16+0x1>
    38e8:	80 93 9d 14 	sts	0x149D, r24	; 0x80149d <tempIn16>
    38ec:	08 95       	ret

000038ee <SensorDataPackageHandler_getLoRaPayload>:
}

lora_driver_payload_t SensorDataPackageHandler_getLoRaPayload(){
    38ee:	cf 93       	push	r28
    38f0:	df 93       	push	r29
    38f2:	ec 01       	movw	r28, r24
	printf("STARTEDSensorDataPackageHandler");
    38f4:	8f e2       	ldi	r24, 0x2F	; 47
    38f6:	93 e0       	ldi	r25, 0x03	; 3
    38f8:	9f 93       	push	r25
    38fa:	8f 93       	push	r24
    38fc:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
	printf("and this is the changed hum %u\n", humIn16);
    3900:	80 91 a0 14 	lds	r24, 0x14A0	; 0x8014a0 <humIn16+0x1>
    3904:	8f 93       	push	r24
    3906:	80 91 9f 14 	lds	r24, 0x149F	; 0x80149f <humIn16>
    390a:	8f 93       	push	r24
    390c:	8f e4       	ldi	r24, 0x4F	; 79
    390e:	93 e0       	ldi	r25, 0x03	; 3
    3910:	9f 93       	push	r25
    3912:	8f 93       	push	r24
    3914:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
	printf("and also the changed temp %u\n", tempIn16);
    3918:	80 91 9e 14 	lds	r24, 0x149E	; 0x80149e <tempIn16+0x1>
    391c:	8f 93       	push	r24
    391e:	80 91 9d 14 	lds	r24, 0x149D	; 0x80149d <tempIn16>
    3922:	8f 93       	push	r24
    3924:	8f e6       	ldi	r24, 0x6F	; 111
    3926:	93 e0       	ldi	r25, 0x03	; 3
    3928:	9f 93       	push	r25
    392a:	8f 93       	push	r24
    392c:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
	printf("and also the changed CO2 %u\n", co2_ppmIn16);
    3930:	80 91 9c 14 	lds	r24, 0x149C	; 0x80149c <co2_ppmIn16+0x1>
    3934:	8f 93       	push	r24
    3936:	80 91 9b 14 	lds	r24, 0x149B	; 0x80149b <co2_ppmIn16>
    393a:	8f 93       	push	r24
    393c:	8d e8       	ldi	r24, 0x8D	; 141
    393e:	93 e0       	ldi	r25, 0x03	; 3
    3940:	9f 93       	push	r25
    3942:	8f 93       	push	r24
    3944:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
	
	_uplink_payload.len = 6;
    3948:	e5 e8       	ldi	r30, 0x85	; 133
    394a:	f4 e1       	ldi	r31, 0x14	; 20
    394c:	86 e0       	ldi	r24, 0x06	; 6
    394e:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.portNo = 2;
    3950:	82 e0       	ldi	r24, 0x02	; 2
    3952:	80 83       	st	Z, r24
	_uplink_payload.bytes[0] = humIn16 >> 8;
    3954:	80 91 9f 14 	lds	r24, 0x149F	; 0x80149f <humIn16>
    3958:	90 91 a0 14 	lds	r25, 0x14A0	; 0x8014a0 <humIn16+0x1>
    395c:	92 83       	std	Z+2, r25	; 0x02
	_uplink_payload.bytes[1] = humIn16 & 0xFF;
    395e:	83 83       	std	Z+3, r24	; 0x03
	_uplink_payload.bytes[2] = tempIn16 >> 8;
    3960:	80 91 9d 14 	lds	r24, 0x149D	; 0x80149d <tempIn16>
    3964:	90 91 9e 14 	lds	r25, 0x149E	; 0x80149e <tempIn16+0x1>
    3968:	94 83       	std	Z+4, r25	; 0x04
	_uplink_payload.bytes[3] = tempIn16 & 0xFF;
    396a:	85 83       	std	Z+5, r24	; 0x05
	_uplink_payload.bytes[4] = co2_ppmIn16 >> 8;
    396c:	80 91 9b 14 	lds	r24, 0x149B	; 0x80149b <co2_ppmIn16>
    3970:	90 91 9c 14 	lds	r25, 0x149C	; 0x80149c <co2_ppmIn16+0x1>
    3974:	96 83       	std	Z+6, r25	; 0x06
	_uplink_payload.bytes[5] = co2_ppmIn16 & 0xFF;
    3976:	87 83       	std	Z+7, r24	; 0x07
	return _uplink_payload;
    3978:	86 e1       	ldi	r24, 0x16	; 22
    397a:	de 01       	movw	r26, r28
    397c:	01 90       	ld	r0, Z+
    397e:	0d 92       	st	X+, r0
    3980:	8a 95       	dec	r24
    3982:	e1 f7       	brne	.-8      	; 0x397c <SensorDataPackageHandler_getLoRaPayload+0x8e>
    3984:	8d b7       	in	r24, 0x3d	; 61
    3986:	9e b7       	in	r25, 0x3e	; 62
    3988:	0e 96       	adiw	r24, 0x0e	; 14
    398a:	0f b6       	in	r0, 0x3f	; 63
    398c:	f8 94       	cli
    398e:	9e bf       	out	0x3e, r25	; 62
    3990:	0f be       	out	0x3f, r0	; 63
    3992:	8d bf       	out	0x3d, r24	; 61
    3994:	ce 01       	movw	r24, r28
    3996:	df 91       	pop	r29
    3998:	cf 91       	pop	r28
    399a:	08 95       	ret

0000399c <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    399c:	cf 93       	push	r28
    399e:	df 93       	push	r29
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    39a0:	81 e0       	ldi	r24, 0x01	; 1
    39a2:	0e 94 db 28 	call	0x51b6	; 0x51b6 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    39a6:	37 d3       	rcall	.+1646   	; 0x4016 <lora_driver_rn2483FactoryReset>
    39a8:	b3 d5       	rcall	.+2918   	; 0x4510 <lora_driver_mapReturnCodeToText>
    39aa:	9f 93       	push	r25
    39ac:	8f 93       	push	r24
    39ae:	8a ea       	ldi	r24, 0xAA	; 170
    39b0:	93 e0       	ldi	r25, 0x03	; 3
    39b2:	9f 93       	push	r25
    39b4:	8f 93       	push	r24
    39b6:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    39ba:	ab d4       	rcall	.+2390   	; 0x4312 <lora_driver_configureToEu868>
    39bc:	a9 d5       	rcall	.+2898   	; 0x4510 <lora_driver_mapReturnCodeToText>
    39be:	9f 93       	push	r25
    39c0:	8f 93       	push	r24
    39c2:	8d eb       	ldi	r24, 0xBD	; 189
    39c4:	93 e0       	ldi	r25, 0x03	; 3
    39c6:	9f 93       	push	r25
    39c8:	8f 93       	push	r24
    39ca:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
    39ce:	87 eb       	ldi	r24, 0xB7	; 183

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    39d0:	94 e1       	ldi	r25, 0x14	; 20
    39d2:	33 d3       	rcall	.+1638   	; 0x403a <lora_driver_getRn2483Hweui>
    39d4:	9d d5       	rcall	.+2874   	; 0x4510 <lora_driver_mapReturnCodeToText>
    39d6:	c7 eb       	ldi	r28, 0xB7	; 183
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    39d8:	d4 e1       	ldi	r29, 0x14	; 20
    39da:	df 93       	push	r29
    39dc:	cf 93       	push	r28
    39de:	9f 93       	push	r25
    39e0:	8f 93       	push	r24
    39e2:	86 ed       	ldi	r24, 0xD6	; 214
    39e4:	93 e0       	ldi	r25, 0x03	; 3
    39e6:	9f 93       	push	r25
    39e8:	8f 93       	push	r24
    39ea:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
    39ee:	ce 01       	movw	r24, r28

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    39f0:	40 d3       	rcall	.+1664   	; 0x4072 <lora_driver_setDeviceIdentifier>
    39f2:	8e d5       	rcall	.+2844   	; 0x4510 <lora_driver_mapReturnCodeToText>
    39f4:	9f 93       	push	r25
    39f6:	8f 93       	push	r24
    39f8:	df 93       	push	r29
    39fa:	cf 93       	push	r28
    39fc:	8a ee       	ldi	r24, 0xEA	; 234
    39fe:	93 e0       	ldi	r25, 0x03	; 3
    3a00:	9f 93       	push	r25
    3a02:	8f 93       	push	r24
    3a04:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
    3a08:	ae 01       	movw	r20, r28

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3a0a:	6f ef       	ldi	r22, 0xFF	; 255
    3a0c:	73 e0       	ldi	r23, 0x03	; 3
    3a0e:	80 e2       	ldi	r24, 0x20	; 32
    3a10:	94 e0       	ldi	r25, 0x04	; 4
    3a12:	5d d5       	rcall	.+2746   	; 0x44ce <lora_driver_setOtaaIdentity>
    3a14:	7d d5       	rcall	.+2810   	; 0x4510 <lora_driver_mapReturnCodeToText>
    3a16:	9f 93       	push	r25
    3a18:	8f 93       	push	r24
    3a1a:	df 93       	push	r29
    3a1c:	cf 93       	push	r28
    3a1e:	8f ef       	ldi	r24, 0xFF	; 255
    3a20:	93 e0       	ldi	r25, 0x03	; 3
    3a22:	9f 93       	push	r25
    3a24:	8f 93       	push	r24
    3a26:	80 e2       	ldi	r24, 0x20	; 32
    3a28:	94 e0       	ldi	r25, 0x04	; 4
    3a2a:	9f 93       	push	r25
    3a2c:	8f 93       	push	r24
    3a2e:	81 e3       	ldi	r24, 0x31	; 49
    3a30:	94 e0       	ldi	r25, 0x04	; 4
    3a32:	9f 93       	push	r25
    3a34:	8f 93       	push	r24
    3a36:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
    3a3a:	4e d3       	rcall	.+1692   	; 0x40d8 <lora_driver_saveMac>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3a3c:	69 d5       	rcall	.+2770   	; 0x4510 <lora_driver_mapReturnCodeToText>
    3a3e:	9f 93       	push	r25
    3a40:	8f 93       	push	r24
    3a42:	87 e6       	ldi	r24, 0x67	; 103
    3a44:	94 e0       	ldi	r25, 0x04	; 4
    3a46:	9f 93       	push	r25
    3a48:	8f 93       	push	r24
    3a4a:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
    3a4e:	8d b7       	in	r24, 0x3d	; 61

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3a50:	9e b7       	in	r25, 0x3e	; 62
    3a52:	82 96       	adiw	r24, 0x22	; 34
    3a54:	0f b6       	in	r0, 0x3f	; 63
    3a56:	f8 94       	cli
    3a58:	9e bf       	out	0x3e, r25	; 62
    3a5a:	0f be       	out	0x3f, r0	; 63
    3a5c:	8d bf       	out	0x3d, r24	; 61
    3a5e:	81 e0       	ldi	r24, 0x01	; 1
    3a60:	35 d4       	rcall	.+2154   	; 0x42cc <lora_driver_setAdaptiveDataRate>
    3a62:	56 d5       	rcall	.+2732   	; 0x4510 <lora_driver_mapReturnCodeToText>
    3a64:	9f 93       	push	r25
    3a66:	8f 93       	push	r24
    3a68:	86 e7       	ldi	r24, 0x76	; 118
    3a6a:	94 e0       	ldi	r25, 0x04	; 4
    3a6c:	9f 93       	push	r25
    3a6e:	8f 93       	push	r24
    3a70:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
    3a74:	84 ef       	ldi	r24, 0xF4	; 244

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3a76:	91 e0       	ldi	r25, 0x01	; 1
    3a78:	34 d4       	rcall	.+2152   	; 0x42e2 <lora_driver_setReceiveDelay>
    3a7a:	4a d5       	rcall	.+2708   	; 0x4510 <lora_driver_mapReturnCodeToText>
    3a7c:	9f 93       	push	r25
    3a7e:	8f 93       	push	r24
    3a80:	81 e0       	ldi	r24, 0x01	; 1
    3a82:	8f 93       	push	r24
    3a84:	84 ef       	ldi	r24, 0xF4	; 244
    3a86:	8f 93       	push	r24
    3a88:	87 e9       	ldi	r24, 0x97	; 151
    3a8a:	94 e0       	ldi	r25, 0x04	; 4
    3a8c:	9f 93       	push	r25
    3a8e:	8f 93       	push	r24
    3a90:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
    3a94:	8d b7       	in	r24, 0x3d	; 61
    3a96:	9e b7       	in	r25, 0x3e	; 62
    3a98:	0a 96       	adiw	r24, 0x0a	; 10
    3a9a:	0f b6       	in	r0, 0x3f	; 63
    3a9c:	f8 94       	cli
    3a9e:	9e bf       	out	0x3e, r25	; 62
    3aa0:	0f be       	out	0x3f, r0	; 63
    3aa2:	8d bf       	out	0x3d, r24	; 61
    3aa4:	ca e0       	ldi	r28, 0x0A	; 10

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3aa6:	80 e0       	ldi	r24, 0x00	; 0
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3aa8:	1d d3       	rcall	.+1594   	; 0x40e4 <lora_driver_join>
    3aaa:	d8 2f       	mov	r29, r24
    3aac:	31 d5       	rcall	.+2658   	; 0x4510 <lora_driver_mapReturnCodeToText>
    3aae:	9f 93       	push	r25
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3ab0:	8f 93       	push	r24
    3ab2:	1f 92       	push	r1
    3ab4:	cf 93       	push	r28
    3ab6:	87 eb       	ldi	r24, 0xB7	; 183
    3ab8:	94 e0       	ldi	r25, 0x04	; 4
    3aba:	9f 93       	push	r25
    3abc:	8f 93       	push	r24
    3abe:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
    3ac2:	0f 90       	pop	r0
    3ac4:	0f 90       	pop	r0
    3ac6:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3ac8:	0f 90       	pop	r0
    3aca:	0f 90       	pop	r0
    3acc:	0f 90       	pop	r0
    3ace:	d8 30       	cpi	r29, 0x08	; 8
    3ad0:	59 f0       	breq	.+22     	; 0x3ae8 <_lora_setup+0x14c>
    3ad2:	80 e0       	ldi	r24, 0x00	; 0
    3ad4:	0e 94 3f 29 	call	0x527e	; 0x527e <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3ad8:	66 e3       	ldi	r22, 0x36	; 54
    3ada:	71 e0       	ldi	r23, 0x01	; 1
    3adc:	80 e0       	ldi	r24, 0x00	; 0
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	0e 94 02 12 	call	0x2404	; 0x2404 <vTaskDelay>
    3ae4:	c1 50       	subi	r28, 0x01	; 1
    3ae6:	f9 f6       	brne	.-66     	; 0x3aa6 <_lora_setup+0x10a>
    3ae8:	d8 30       	cpi	r29, 0x08	; 8
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3aea:	21 f4       	brne	.+8      	; 0x3af4 <_lora_setup+0x158>
    3aec:	81 e0       	ldi	r24, 0x01	; 1

	if (rc == LORA_ACCEPTED)
    3aee:	0e 94 21 29 	call	0x5242	; 0x5242 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3af2:	09 c0       	rjmp	.+18     	; 0x3b06 <_lora_setup+0x16a>
    3af4:	81 e0       	ldi	r24, 0x01	; 1
    3af6:	0e 94 30 29 	call	0x5260	; 0x5260 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3afa:	80 e0       	ldi	r24, 0x00	; 0
    3afc:	0e 94 fe 28 	call	0x51fc	; 0x51fc <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3b00:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
    3b04:	fd cf       	rjmp	.-6      	; 0x3b00 <_lora_setup+0x164>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3b06:	df 91       	pop	r29
    3b08:	cf 91       	pop	r28
    3b0a:	08 95       	ret

00003b0c <lora_handler_task>:
		}
	}
}
    3b0c:	cf 93       	push	r28
    3b0e:	df 93       	push	r29
    3b10:	cd b7       	in	r28, 0x3d	; 61

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    3b12:	de b7       	in	r29, 0x3e	; 62
    3b14:	6a 97       	sbiw	r28, 0x1a	; 26
    3b16:	0f b6       	in	r0, 0x3f	; 63
    3b18:	f8 94       	cli
    3b1a:	de bf       	out	0x3e, r29	; 62
    3b1c:	0f be       	out	0x3f, r0	; 63
    3b1e:	cd bf       	out	0x3d, r28	; 61
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3b20:	81 e0       	ldi	r24, 0x01	; 1
    3b22:	6b d2       	rcall	.+1238   	; 0x3ffa <lora_driver_resetRn2483>
	vTaskDelay(2);
    3b24:	62 e0       	ldi	r22, 0x02	; 2
    3b26:	70 e0       	ldi	r23, 0x00	; 0
    3b28:	80 e0       	ldi	r24, 0x00	; 0
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	0e 94 02 12 	call	0x2404	; 0x2404 <vTaskDelay>
	lora_driver_resetRn2483(0);
    3b30:	80 e0       	ldi	r24, 0x00	; 0
    3b32:	63 d2       	rcall	.+1222   	; 0x3ffa <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3b34:	66 e9       	ldi	r22, 0x96	; 150
    3b36:	70 e0       	ldi	r23, 0x00	; 0
    3b38:	80 e0       	ldi	r24, 0x00	; 0
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	0e 94 02 12 	call	0x2404	; 0x2404 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3b40:	15 d2       	rcall	.+1066   	; 0x3f6c <lora_driver_flushBuffers>

	_lora_setup();
    3b42:	2c df       	rcall	.-424    	; 0x399c <_lora_setup>
    3b44:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <xTaskGetTickCount>


	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    3b48:	69 83       	std	Y+1, r22	; 0x01
    3b4a:	7a 83       	std	Y+2, r23	; 0x02
    3b4c:	8b 83       	std	Y+3, r24	; 0x03
    3b4e:	9c 83       	std	Y+4, r25	; 0x04
    3b50:	48 ea       	ldi	r20, 0xA8	; 168
	
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3b52:	58 e4       	ldi	r21, 0x48	; 72
    3b54:	60 e0       	ldi	r22, 0x00	; 0
    3b56:	70 e0       	ldi	r23, 0x00	; 0
    3b58:	ce 01       	movw	r24, r28
    3b5a:	01 96       	adiw	r24, 0x01	; 1
    3b5c:	0e 94 9d 11 	call	0x233a	; 0x233a <xTaskDelayUntil>
    3b60:	87 ed       	ldi	r24, 0xD7	; 215
		printf("startLoraTask");
    3b62:	94 e0       	ldi	r25, 0x04	; 4
    3b64:	9f 93       	push	r25
    3b66:	8f 93       	push	r24
    3b68:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
		_uplink_payload = SensorDataPackageHandler_getLoRaPayload();
    3b6c:	ce 01       	movw	r24, r28
    3b6e:	05 96       	adiw	r24, 0x05	; 5
    3b70:	be de       	rcall	.-644    	; 0x38ee <SensorDataPackageHandler_getLoRaPayload>
    3b72:	86 e1       	ldi	r24, 0x16	; 22
    3b74:	fe 01       	movw	r30, r28
    3b76:	35 96       	adiw	r30, 0x05	; 5
    3b78:	a1 ea       	ldi	r26, 0xA1	; 161
    3b7a:	b4 e1       	ldi	r27, 0x14	; 20
    3b7c:	01 90       	ld	r0, Z+
    3b7e:	0d 92       	st	X+, r0
    3b80:	8a 95       	dec	r24
    3b82:	e1 f7       	brne	.-8      	; 0x3b7c <lora_handler_task+0x70>
    3b84:	83 e0       	ldi	r24, 0x03	; 3
		status_leds_shortPuls(led_ST4);  // OPTIONAL
    3b86:	0e 94 51 29 	call	0x52a2	; 0x52a2 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3b8a:	61 ea       	ldi	r22, 0xA1	; 161
    3b8c:	74 e1       	ldi	r23, 0x14	; 20
    3b8e:	80 e0       	ldi	r24, 0x00	; 0
    3b90:	d2 d2       	rcall	.+1444   	; 0x4136 <lora_driver_sendUploadMessage>
    3b92:	be d4       	rcall	.+2428   	; 0x4510 <lora_driver_mapReturnCodeToText>
    3b94:	9f 93       	push	r25
    3b96:	8f 93       	push	r24
    3b98:	85 ee       	ldi	r24, 0xE5	; 229
    3b9a:	94 e0       	ldi	r25, 0x04	; 4
    3b9c:	9f 93       	push	r25
    3b9e:	8f 93       	push	r24
    3ba0:	0e 94 bd 33 	call	0x677a	; 0x677a <printf>
    3ba4:	0f 90       	pop	r0
    3ba6:	0f 90       	pop	r0
    3ba8:	0f 90       	pop	r0
    3baa:	0f 90       	pop	r0
    3bac:	0f 90       	pop	r0
    3bae:	0f 90       	pop	r0
    3bb0:	cf cf       	rjmp	.-98     	; 0x3b50 <lora_handler_task+0x44>

00003bb2 <lora_handler_initialise>:
    3bb2:	ef 92       	push	r14
    3bb4:	ff 92       	push	r15

static lora_driver_payload_t _uplink_payload;


void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    3bb6:	0f 93       	push	r16
	xTaskCreate(
    3bb8:	e1 2c       	mov	r14, r1
    3bba:	f1 2c       	mov	r15, r1
    3bbc:	08 2f       	mov	r16, r24
    3bbe:	20 e0       	ldi	r18, 0x00	; 0
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	48 e8       	ldi	r20, 0x88	; 136
    3bc4:	51 e0       	ldi	r21, 0x01	; 1
    3bc6:	6a ef       	ldi	r22, 0xFA	; 250
    3bc8:	74 e0       	ldi	r23, 0x04	; 4
    3bca:	86 e8       	ldi	r24, 0x86	; 134
    3bcc:	9d e1       	ldi	r25, 0x1D	; 29
    3bce:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3bd2:	0f 91       	pop	r16
    3bd4:	ff 90       	pop	r15
    3bd6:	ef 90       	pop	r14
    3bd8:	08 95       	ret

00003bda <_hihTwiCallback>:
    3bda:	65 30       	cpi	r22, 0x05	; 5
    3bdc:	f1 f4       	brne	.+60     	; 0x3c1a <_hihTwiCallback+0x40>
    3bde:	fa 01       	movw	r30, r20
    3be0:	80 81       	ld	r24, Z
    3be2:	8f 73       	andi	r24, 0x3F	; 63
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	98 2f       	mov	r25, r24
    3be8:	88 27       	eor	r24, r24
    3bea:	21 81       	ldd	r18, Z+1	; 0x01
    3bec:	82 2b       	or	r24, r18
    3bee:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3bf2:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3bf6:	82 81       	ldd	r24, Z+2	; 0x02
    3bf8:	f0 e4       	ldi	r31, 0x40	; 64
    3bfa:	8f 9f       	mul	r24, r31
    3bfc:	c0 01       	movw	r24, r0
    3bfe:	11 24       	eor	r1, r1
    3c00:	fa 01       	movw	r30, r20
    3c02:	23 81       	ldd	r18, Z+3	; 0x03
    3c04:	26 95       	lsr	r18
    3c06:	26 95       	lsr	r18
    3c08:	82 2b       	or	r24, r18
    3c0a:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3c0e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3c12:	81 e0       	ldi	r24, 0x01	; 1
    3c14:	80 93 1b 15 	sts	0x151B, r24	; 0x80151b <_measuringIsReady>
    3c18:	08 95       	ret
    3c1a:	64 30       	cpi	r22, 0x04	; 4
    3c1c:	51 f0       	breq	.+20     	; 0x3c32 <_hihTwiCallback+0x58>
    3c1e:	80 e0       	ldi	r24, 0x00	; 0
    3c20:	90 e4       	ldi	r25, 0x40	; 64
    3c22:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3c26:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3c2a:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3c2e:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3c32:	08 95       	ret

00003c34 <hih8120_initialise>:
    3c34:	0f 93       	push	r16
    3c36:	1f 93       	push	r17
    3c38:	0d ee       	ldi	r16, 0xED	; 237
    3c3a:	1d e1       	ldi	r17, 0x1D	; 29
    3c3c:	20 e0       	ldi	r18, 0x00	; 0
    3c3e:	34 e2       	ldi	r19, 0x24	; 36
    3c40:	44 ef       	ldi	r20, 0xF4	; 244
    3c42:	50 e0       	ldi	r21, 0x00	; 0
    3c44:	60 e0       	ldi	r22, 0x00	; 0
    3c46:	87 e2       	ldi	r24, 0x27	; 39
    3c48:	0e 94 74 29 	call	0x52e8	; 0x52e8 <twiCreate>
    3c4c:	90 93 1d 15 	sts	0x151D, r25	; 0x80151d <_hih8120Handler+0x1>
    3c50:	80 93 1c 15 	sts	0x151C, r24	; 0x80151c <_hih8120Handler>
    3c54:	21 e0       	ldi	r18, 0x01	; 1
    3c56:	89 2b       	or	r24, r25
    3c58:	09 f0       	breq	.+2      	; 0x3c5c <hih8120_initialise+0x28>
    3c5a:	20 e0       	ldi	r18, 0x00	; 0
    3c5c:	82 2f       	mov	r24, r18
    3c5e:	1f 91       	pop	r17
    3c60:	0f 91       	pop	r16
    3c62:	08 95       	ret

00003c64 <hih8120_wakeup>:
    3c64:	80 91 1c 15 	lds	r24, 0x151C	; 0x80151c <_hih8120Handler>
    3c68:	90 91 1d 15 	lds	r25, 0x151D	; 0x80151d <_hih8120Handler+0x1>
    3c6c:	00 97       	sbiw	r24, 0x00	; 0
    3c6e:	59 f0       	breq	.+22     	; 0x3c86 <hih8120_wakeup+0x22>
    3c70:	40 e0       	ldi	r20, 0x00	; 0
    3c72:	60 e0       	ldi	r22, 0x00	; 0
    3c74:	70 e0       	ldi	r23, 0x00	; 0
    3c76:	0e 94 c5 29 	call	0x538a	; 0x538a <twiTransmit>
    3c7a:	84 30       	cpi	r24, 0x04	; 4
    3c7c:	31 f4       	brne	.+12     	; 0x3c8a <hih8120_wakeup+0x26>
    3c7e:	10 92 1b 15 	sts	0x151B, r1	; 0x80151b <_measuringIsReady>
    3c82:	80 e0       	ldi	r24, 0x00	; 0
    3c84:	08 95       	ret
    3c86:	82 e0       	ldi	r24, 0x02	; 2
    3c88:	08 95       	ret
    3c8a:	83 e0       	ldi	r24, 0x03	; 3
    3c8c:	08 95       	ret

00003c8e <hih8120_measure>:
    3c8e:	80 91 1c 15 	lds	r24, 0x151C	; 0x80151c <_hih8120Handler>
    3c92:	90 91 1d 15 	lds	r25, 0x151D	; 0x80151d <_hih8120Handler+0x1>
    3c96:	00 97       	sbiw	r24, 0x00	; 0
    3c98:	39 f0       	breq	.+14     	; 0x3ca8 <hih8120_measure+0x1a>
    3c9a:	64 e0       	ldi	r22, 0x04	; 4
    3c9c:	0e 94 11 2a 	call	0x5422	; 0x5422 <twiReceive>
    3ca0:	85 30       	cpi	r24, 0x05	; 5
    3ca2:	21 f0       	breq	.+8      	; 0x3cac <hih8120_measure+0x1e>
    3ca4:	83 e0       	ldi	r24, 0x03	; 3
    3ca6:	08 95       	ret
    3ca8:	82 e0       	ldi	r24, 0x02	; 2
    3caa:	08 95       	ret
    3cac:	80 e0       	ldi	r24, 0x00	; 0
    3cae:	08 95       	ret

00003cb0 <hih8120_getHumidity>:
    3cb0:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3cb4:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3cb8:	80 e0       	ldi	r24, 0x00	; 0
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	0e 94 1b 2c 	call	0x5836	; 0x5836 <__floatunsisf>
    3cc0:	20 e0       	ldi	r18, 0x00	; 0
    3cc2:	30 e0       	ldi	r19, 0x00	; 0
    3cc4:	48 ec       	ldi	r20, 0xC8	; 200
    3cc6:	52 e4       	ldi	r21, 0x42	; 66
    3cc8:	0e 94 a9 2c 	call	0x5952	; 0x5952 <__mulsf3>
    3ccc:	20 e0       	ldi	r18, 0x00	; 0
    3cce:	38 ef       	ldi	r19, 0xF8	; 248
    3cd0:	4f e7       	ldi	r20, 0x7F	; 127
    3cd2:	56 e4       	ldi	r21, 0x46	; 70
    3cd4:	0c 94 82 2b 	jmp	0x5704	; 0x5704 <__divsf3>
    3cd8:	08 95       	ret

00003cda <hih8120_getHumidityPercent_x10>:
    3cda:	ea df       	rcall	.-44     	; 0x3cb0 <hih8120_getHumidity>
    3cdc:	20 e0       	ldi	r18, 0x00	; 0
    3cde:	30 e0       	ldi	r19, 0x00	; 0
    3ce0:	40 e2       	ldi	r20, 0x20	; 32
    3ce2:	51 e4       	ldi	r21, 0x41	; 65
    3ce4:	0e 94 a9 2c 	call	0x5952	; 0x5952 <__mulsf3>
    3ce8:	0e 94 ef 2b 	call	0x57de	; 0x57de <__fixunssfsi>
    3cec:	cb 01       	movw	r24, r22
    3cee:	08 95       	ret

00003cf0 <hih8120_getTemperature>:
    3cf0:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3cf4:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3cf8:	80 e0       	ldi	r24, 0x00	; 0
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	0e 94 1b 2c 	call	0x5836	; 0x5836 <__floatunsisf>
    3d00:	20 e0       	ldi	r18, 0x00	; 0
    3d02:	30 e0       	ldi	r19, 0x00	; 0
    3d04:	45 e2       	ldi	r20, 0x25	; 37
    3d06:	53 e4       	ldi	r21, 0x43	; 67
    3d08:	0e 94 a9 2c 	call	0x5952	; 0x5952 <__mulsf3>
    3d0c:	20 e0       	ldi	r18, 0x00	; 0
    3d0e:	38 ef       	ldi	r19, 0xF8	; 248
    3d10:	4f e7       	ldi	r20, 0x7F	; 127
    3d12:	56 e4       	ldi	r21, 0x46	; 70
    3d14:	0e 94 82 2b 	call	0x5704	; 0x5704 <__divsf3>
    3d18:	20 e0       	ldi	r18, 0x00	; 0
    3d1a:	30 e0       	ldi	r19, 0x00	; 0
    3d1c:	40 e2       	ldi	r20, 0x20	; 32
    3d1e:	52 e4       	ldi	r21, 0x42	; 66
    3d20:	0c 94 1d 2b 	jmp	0x563a	; 0x563a <__subsf3>
    3d24:	08 95       	ret

00003d26 <hih8120_getTemperature_x10>:
    3d26:	e4 df       	rcall	.-56     	; 0x3cf0 <hih8120_getTemperature>
    3d28:	20 e0       	ldi	r18, 0x00	; 0
    3d2a:	30 e0       	ldi	r19, 0x00	; 0
    3d2c:	40 e2       	ldi	r20, 0x20	; 32
    3d2e:	51 e4       	ldi	r21, 0x41	; 65
    3d30:	0e 94 a9 2c 	call	0x5952	; 0x5952 <__mulsf3>
    3d34:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__fixsfsi>
    3d38:	cb 01       	movw	r24, r22
    3d3a:	08 95       	ret

00003d3c <_serialCallBack>:
    3d3c:	0f 93       	push	r16
    3d3e:	1f 93       	push	r17
    3d40:	cf 93       	push	r28
    3d42:	df 93       	push	r29
    3d44:	1f 92       	push	r1
    3d46:	1f 92       	push	r1
    3d48:	cd b7       	in	r28, 0x3d	; 61
    3d4a:	de b7       	in	r29, 0x3e	; 62
    3d4c:	8c 01       	movw	r16, r24
    3d4e:	19 82       	std	Y+1, r1	; 0x01
    3d50:	2d c0       	rjmp	.+90     	; 0x3dac <_serialCallBack+0x70>
    3d52:	e0 91 82 15 	lds	r30, 0x1582	; 0x801582 <rec_buf_inp.2878>
    3d56:	ec 32       	cpi	r30, 0x2C	; 44
    3d58:	50 f4       	brcc	.+20     	; 0x3d6e <_serialCallBack+0x32>
    3d5a:	81 e0       	ldi	r24, 0x01	; 1
    3d5c:	8e 0f       	add	r24, r30
    3d5e:	80 93 82 15 	sts	0x1582, r24	; 0x801582 <rec_buf_inp.2878>
    3d62:	f0 e0       	ldi	r31, 0x00	; 0
    3d64:	ec 54       	subi	r30, 0x4C	; 76
    3d66:	fa 4e       	sbci	r31, 0xEA	; 234
    3d68:	8a 81       	ldd	r24, Y+2	; 0x02
    3d6a:	80 83       	st	Z, r24
    3d6c:	02 c0       	rjmp	.+4      	; 0x3d72 <_serialCallBack+0x36>
    3d6e:	10 92 82 15 	sts	0x1582, r1	; 0x801582 <rec_buf_inp.2878>
    3d72:	8a 81       	ldd	r24, Y+2	; 0x02
    3d74:	8a 30       	cpi	r24, 0x0A	; 10
    3d76:	d1 f4       	brne	.+52     	; 0x3dac <_serialCallBack+0x70>
    3d78:	40 91 82 15 	lds	r20, 0x1582	; 0x801582 <rec_buf_inp.2878>
    3d7c:	50 e0       	ldi	r21, 0x00	; 0
    3d7e:	fa 01       	movw	r30, r20
    3d80:	ee 54       	subi	r30, 0x4E	; 78
    3d82:	fa 4e       	sbci	r31, 0xEA	; 234
    3d84:	10 82       	st	Z, r1
    3d86:	41 50       	subi	r20, 0x01	; 1
    3d88:	51 09       	sbc	r21, r1
    3d8a:	9e 01       	movw	r18, r28
    3d8c:	2f 5f       	subi	r18, 0xFF	; 255
    3d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d90:	64 eb       	ldi	r22, 0xB4	; 180
    3d92:	75 e1       	ldi	r23, 0x15	; 21
    3d94:	80 91 85 15 	lds	r24, 0x1585	; 0x801585 <_serialReplyBufferHandle>
    3d98:	90 91 86 15 	lds	r25, 0x1586	; 0x801586 <_serialReplyBufferHandle+0x1>
    3d9c:	0e 94 1f 0c 	call	0x183e	; 0x183e <xStreamBufferSendFromISR>
    3da0:	89 81       	ldd	r24, Y+1	; 0x01
    3da2:	81 11       	cpse	r24, r1
    3da4:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
    3da8:	10 92 82 15 	sts	0x1582, r1	; 0x801582 <rec_buf_inp.2878>
    3dac:	be 01       	movw	r22, r28
    3dae:	6e 5f       	subi	r22, 0xFE	; 254
    3db0:	7f 4f       	sbci	r23, 0xFF	; 255
    3db2:	c8 01       	movw	r24, r16
    3db4:	15 d6       	rcall	.+3114   	; 0x49e0 <serial_getByte>
    3db6:	88 23       	and	r24, r24
    3db8:	61 f2       	breq	.-104    	; 0x3d52 <_serialCallBack+0x16>
    3dba:	0f 90       	pop	r0
    3dbc:	0f 90       	pop	r0
    3dbe:	df 91       	pop	r29
    3dc0:	cf 91       	pop	r28
    3dc2:	1f 91       	pop	r17
    3dc4:	0f 91       	pop	r16
    3dc6:	08 95       	ret

00003dc8 <_uploadMessage>:
    3dc8:	0f 93       	push	r16
    3dca:	1f 93       	push	r17
    3dcc:	cf 93       	push	r28
    3dce:	df 93       	push	r29
    3dd0:	8c 01       	movw	r16, r24
    3dd2:	eb 01       	movw	r28, r22
    3dd4:	80 91 85 15 	lds	r24, 0x1585	; 0x801585 <_serialReplyBufferHandle>
    3dd8:	90 91 86 15 	lds	r25, 0x1586	; 0x801586 <_serialReplyBufferHandle+0x1>
    3ddc:	0e 94 2a 0b 	call	0x1654	; 0x1654 <xStreamBufferReset>
    3de0:	b8 01       	movw	r22, r16
    3de2:	8e e1       	ldi	r24, 0x1E	; 30
    3de4:	95 e1       	ldi	r25, 0x15	; 21
    3de6:	0e 94 57 33 	call	0x66ae	; 0x66ae <strcpy>
    3dea:	20 97       	sbiw	r28, 0x00	; 0
    3dec:	79 f0       	breq	.+30     	; 0x3e0c <_uploadMessage+0x44>
    3dee:	ee e1       	ldi	r30, 0x1E	; 30
    3df0:	f5 e1       	ldi	r31, 0x15	; 21
    3df2:	01 90       	ld	r0, Z+
    3df4:	00 20       	and	r0, r0
    3df6:	e9 f7       	brne	.-6      	; 0x3df2 <_uploadMessage+0x2a>
    3df8:	31 97       	sbiw	r30, 0x01	; 1
    3dfa:	80 e2       	ldi	r24, 0x20	; 32
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	91 83       	std	Z+1, r25	; 0x01
    3e00:	80 83       	st	Z, r24
    3e02:	be 01       	movw	r22, r28
    3e04:	8e e1       	ldi	r24, 0x1E	; 30
    3e06:	95 e1       	ldi	r25, 0x15	; 21
    3e08:	0e 94 4c 33 	call	0x6698	; 0x6698 <strcat>
    3e0c:	ee e1       	ldi	r30, 0x1E	; 30
    3e0e:	f5 e1       	ldi	r31, 0x15	; 21
    3e10:	df 01       	movw	r26, r30
    3e12:	0d 90       	ld	r0, X+
    3e14:	00 20       	and	r0, r0
    3e16:	e9 f7       	brne	.-6      	; 0x3e12 <_uploadMessage+0x4a>
    3e18:	11 97       	sbiw	r26, 0x01	; 1
    3e1a:	8d e0       	ldi	r24, 0x0D	; 13
    3e1c:	9a e0       	ldi	r25, 0x0A	; 10
    3e1e:	11 96       	adiw	r26, 0x01	; 1
    3e20:	9c 93       	st	X, r25
    3e22:	8e 93       	st	-X, r24
    3e24:	12 96       	adiw	r26, 0x02	; 2
    3e26:	1c 92       	st	X, r1
    3e28:	01 90       	ld	r0, Z+
    3e2a:	00 20       	and	r0, r0
    3e2c:	e9 f7       	brne	.-6      	; 0x3e28 <_uploadMessage+0x60>
    3e2e:	31 97       	sbiw	r30, 0x01	; 1
    3e30:	ee 51       	subi	r30, 0x1E	; 30
    3e32:	f5 41       	sbci	r31, 0x15	; 21
    3e34:	ae 2f       	mov	r26, r30
    3e36:	8e e1       	ldi	r24, 0x1E	; 30
    3e38:	95 e1       	ldi	r25, 0x15	; 21
    3e3a:	ac 01       	movw	r20, r24
    3e3c:	6a 2f       	mov	r22, r26
    3e3e:	80 91 87 15 	lds	r24, 0x1587	; 0x801587 <_rn2483_serial>
    3e42:	90 91 88 15 	lds	r25, 0x1588	; 0x801588 <_rn2483_serial+0x1>
    3e46:	77 d5       	rcall	.+2798   	; 0x4936 <serial_sendBytes>
    3e48:	81 11       	cpse	r24, r1
    3e4a:	11 c0       	rjmp	.+34     	; 0x3e6e <_uploadMessage+0xa6>
    3e4c:	08 e2       	ldi	r16, 0x28	; 40
    3e4e:	15 e0       	ldi	r17, 0x05	; 5
    3e50:	20 e0       	ldi	r18, 0x00	; 0
    3e52:	30 e0       	ldi	r19, 0x00	; 0
    3e54:	4d e2       	ldi	r20, 0x2D	; 45
    3e56:	50 e0       	ldi	r21, 0x00	; 0
    3e58:	6e e0       	ldi	r22, 0x0E	; 14
    3e5a:	76 e1       	ldi	r23, 0x16	; 22
    3e5c:	80 91 85 15 	lds	r24, 0x1585	; 0x801585 <_serialReplyBufferHandle>
    3e60:	90 91 86 15 	lds	r25, 0x1586	; 0x801586 <_serialReplyBufferHandle+0x1>
    3e64:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <xStreamBufferReceive>
    3e68:	8e e0       	ldi	r24, 0x0E	; 14
    3e6a:	96 e1       	ldi	r25, 0x16	; 22
    3e6c:	02 c0       	rjmp	.+4      	; 0x3e72 <_uploadMessage+0xaa>
    3e6e:	80 e0       	ldi	r24, 0x00	; 0
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	df 91       	pop	r29
    3e74:	cf 91       	pop	r28
    3e76:	1f 91       	pop	r17
    3e78:	0f 91       	pop	r16
    3e7a:	08 95       	ret

00003e7c <_reply2ReturnCode>:
    3e7c:	2f 92       	push	r2
    3e7e:	3f 92       	push	r3
    3e80:	4f 92       	push	r4
    3e82:	5f 92       	push	r5
    3e84:	6f 92       	push	r6
    3e86:	7f 92       	push	r7
    3e88:	8f 92       	push	r8
    3e8a:	9f 92       	push	r9
    3e8c:	af 92       	push	r10
    3e8e:	bf 92       	push	r11
    3e90:	cf 92       	push	r12
    3e92:	df 92       	push	r13
    3e94:	ef 92       	push	r14
    3e96:	ff 92       	push	r15
    3e98:	0f 93       	push	r16
    3e9a:	1f 93       	push	r17
    3e9c:	cf 93       	push	r28
    3e9e:	df 93       	push	r29
    3ea0:	5c 01       	movw	r10, r24
    3ea2:	fc 01       	movw	r30, r24
    3ea4:	01 90       	ld	r0, Z+
    3ea6:	00 20       	and	r0, r0
    3ea8:	e9 f7       	brne	.-6      	; 0x3ea4 <_reply2ReturnCode+0x28>
    3eaa:	31 97       	sbiw	r30, 0x01	; 1
    3eac:	6f 01       	movw	r12, r30
    3eae:	c8 1a       	sub	r12, r24
    3eb0:	d9 0a       	sbc	r13, r25
    3eb2:	5c 2c       	mov	r5, r12
    3eb4:	0f 2e       	mov	r0, r31
    3eb6:	fa e9       	ldi	r31, 0x9A	; 154
    3eb8:	8f 2e       	mov	r8, r31
    3eba:	f7 e0       	ldi	r31, 0x07	; 7
    3ebc:	9f 2e       	mov	r9, r31
    3ebe:	f0 2d       	mov	r31, r0
    3ec0:	e1 2c       	mov	r14, r1
    3ec2:	f1 2c       	mov	r15, r1
    3ec4:	4c 2c       	mov	r4, r12
    3ec6:	37 01       	movw	r6, r14
    3ec8:	f4 01       	movw	r30, r8
    3eca:	01 81       	ldd	r16, Z+1	; 0x01
    3ecc:	12 81       	ldd	r17, Z+2	; 0x02
    3ece:	e8 01       	movw	r28, r16
    3ed0:	09 90       	ld	r0, Y+
    3ed2:	00 20       	and	r0, r0
    3ed4:	e9 f7       	brne	.-6      	; 0x3ed0 <_reply2ReturnCode+0x54>
    3ed6:	21 97       	sbiw	r28, 0x01	; 1
    3ed8:	c0 1b       	sub	r28, r16
    3eda:	d1 0b       	sbc	r29, r17
    3edc:	3c 2e       	mov	r3, r28
    3ede:	f9 e0       	ldi	r31, 0x09	; 9
    3ee0:	cf 16       	cp	r12, r31
    3ee2:	d1 04       	cpc	r13, r1
    3ee4:	58 f0       	brcs	.+22     	; 0x3efc <_reply2ReturnCode+0x80>
    3ee6:	f4 01       	movw	r30, r8
    3ee8:	20 80       	ld	r2, Z
    3eea:	fe e0       	ldi	r31, 0x0E	; 14
    3eec:	2f 12       	cpse	r2, r31
    3eee:	06 c0       	rjmp	.+12     	; 0x3efc <_reply2ReturnCode+0x80>
    3ef0:	b8 01       	movw	r22, r16
    3ef2:	c5 01       	movw	r24, r10
    3ef4:	0e 94 27 33 	call	0x664e	; 0x664e <strcasestr>
    3ef8:	89 2b       	or	r24, r25
    3efa:	09 f5       	brne	.+66     	; 0x3f3e <_reply2ReturnCode+0xc2>
    3efc:	44 2d       	mov	r20, r4
    3efe:	35 14       	cp	r3, r5
    3f00:	08 f4       	brcc	.+2      	; 0x3f04 <_reply2ReturnCode+0x88>
    3f02:	4c 2f       	mov	r20, r28
    3f04:	50 e0       	ldi	r21, 0x00	; 0
    3f06:	b8 01       	movw	r22, r16
    3f08:	c5 01       	movw	r24, r10
    3f0a:	0e 94 5e 33 	call	0x66bc	; 0x66bc <strncasecmp>
    3f0e:	89 2b       	or	r24, r25
    3f10:	49 f4       	brne	.+18     	; 0x3f24 <_reply2ReturnCode+0xa8>
    3f12:	f3 01       	movw	r30, r6
    3f14:	ee 0f       	add	r30, r30
    3f16:	ff 1f       	adc	r31, r31
    3f18:	e6 0d       	add	r30, r6
    3f1a:	f7 1d       	adc	r31, r7
    3f1c:	e6 56       	subi	r30, 0x66	; 102
    3f1e:	f8 4f       	sbci	r31, 0xF8	; 248
    3f20:	20 80       	ld	r2, Z
    3f22:	0d c0       	rjmp	.+26     	; 0x3f3e <_reply2ReturnCode+0xc2>
    3f24:	8f ef       	ldi	r24, 0xFF	; 255
    3f26:	e8 1a       	sub	r14, r24
    3f28:	f8 0a       	sbc	r15, r24
    3f2a:	e3 e0       	ldi	r30, 0x03	; 3
    3f2c:	8e 0e       	add	r8, r30
    3f2e:	91 1c       	adc	r9, r1
    3f30:	f1 e1       	ldi	r31, 0x11	; 17
    3f32:	ef 16       	cp	r14, r31
    3f34:	f1 04       	cpc	r15, r1
    3f36:	39 f6       	brne	.-114    	; 0x3ec6 <_reply2ReturnCode+0x4a>
    3f38:	68 94       	set
    3f3a:	22 24       	eor	r2, r2
    3f3c:	24 f8       	bld	r2, 4
    3f3e:	82 2d       	mov	r24, r2
    3f40:	df 91       	pop	r29
    3f42:	cf 91       	pop	r28
    3f44:	1f 91       	pop	r17
    3f46:	0f 91       	pop	r16
    3f48:	ff 90       	pop	r15
    3f4a:	ef 90       	pop	r14
    3f4c:	df 90       	pop	r13
    3f4e:	cf 90       	pop	r12
    3f50:	bf 90       	pop	r11
    3f52:	af 90       	pop	r10
    3f54:	9f 90       	pop	r9
    3f56:	8f 90       	pop	r8
    3f58:	7f 90       	pop	r7
    3f5a:	6f 90       	pop	r6
    3f5c:	5f 90       	pop	r5
    3f5e:	4f 90       	pop	r4
    3f60:	3f 90       	pop	r3
    3f62:	2f 90       	pop	r2
    3f64:	08 95       	ret

00003f66 <_uploadMessageRc>:
    3f66:	30 df       	rcall	.-416    	; 0x3dc8 <_uploadMessage>
    3f68:	89 cf       	rjmp	.-238    	; 0x3e7c <_reply2ReturnCode>
    3f6a:	08 95       	ret

00003f6c <lora_driver_flushBuffers>:
    3f6c:	80 91 85 15 	lds	r24, 0x1585	; 0x801585 <_serialReplyBufferHandle>
    3f70:	90 91 86 15 	lds	r25, 0x1586	; 0x801586 <_serialReplyBufferHandle+0x1>
    3f74:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <xStreamBufferReset>
    3f78:	08 95       	ret

00003f7a <lora_driver_initialise>:
    3f7a:	8f 92       	push	r8
    3f7c:	9f 92       	push	r9
    3f7e:	af 92       	push	r10
    3f80:	cf 92       	push	r12
    3f82:	ef 92       	push	r14
    3f84:	0f 93       	push	r16
    3f86:	1f 93       	push	r17
    3f88:	cf 93       	push	r28
    3f8a:	c8 2f       	mov	r28, r24
    3f8c:	8b 01       	movw	r16, r22
    3f8e:	41 e0       	ldi	r20, 0x01	; 1
    3f90:	60 e0       	ldi	r22, 0x00	; 0
    3f92:	70 e0       	ldi	r23, 0x00	; 0
    3f94:	88 ec       	ldi	r24, 0xC8	; 200
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <xStreamBufferGenericCreate>
    3f9c:	90 93 86 15 	sts	0x1586, r25	; 0x801586 <_serialReplyBufferHandle+0x1>
    3fa0:	80 93 85 15 	sts	0x1585, r24	; 0x801585 <_serialReplyBufferHandle>
    3fa4:	10 93 84 15 	sts	0x1584, r17	; 0x801584 <_downlinkMessageBuffer+0x1>
    3fa8:	00 93 83 15 	sts	0x1583, r16	; 0x801583 <_downlinkMessageBuffer>
    3fac:	0f 2e       	mov	r0, r31
    3fae:	fe e9       	ldi	r31, 0x9E	; 158
    3fb0:	8f 2e       	mov	r8, r31
    3fb2:	fe e1       	ldi	r31, 0x1E	; 30
    3fb4:	9f 2e       	mov	r9, r31
    3fb6:	f0 2d       	mov	r31, r0
    3fb8:	68 94       	set
    3fba:	aa 24       	eor	r10, r10
    3fbc:	a6 f8       	bld	r10, 6
    3fbe:	68 94       	set
    3fc0:	cc 24       	eor	r12, r12
    3fc2:	c6 f8       	bld	r12, 6
    3fc4:	e1 2c       	mov	r14, r1
    3fc6:	00 e0       	ldi	r16, 0x00	; 0
    3fc8:	23 e0       	ldi	r18, 0x03	; 3
    3fca:	40 e0       	ldi	r20, 0x00	; 0
    3fcc:	51 ee       	ldi	r21, 0xE1	; 225
    3fce:	60 e0       	ldi	r22, 0x00	; 0
    3fd0:	70 e0       	ldi	r23, 0x00	; 0
    3fd2:	8c 2f       	mov	r24, r28
    3fd4:	e3 d3       	rcall	.+1990   	; 0x479c <serial_create>
    3fd6:	90 93 88 15 	sts	0x1588, r25	; 0x801588 <_rn2483_serial+0x1>
    3fda:	80 93 87 15 	sts	0x1587, r24	; 0x801587 <_rn2483_serial>
    3fde:	e7 e0       	ldi	r30, 0x07	; 7
    3fe0:	f1 e0       	ldi	r31, 0x01	; 1
    3fe2:	80 81       	ld	r24, Z
    3fe4:	80 61       	ori	r24, 0x10	; 16
    3fe6:	80 83       	st	Z, r24
    3fe8:	cf 91       	pop	r28
    3fea:	1f 91       	pop	r17
    3fec:	0f 91       	pop	r16
    3fee:	ef 90       	pop	r14
    3ff0:	cf 90       	pop	r12
    3ff2:	af 90       	pop	r10
    3ff4:	9f 90       	pop	r9
    3ff6:	8f 90       	pop	r8
    3ff8:	08 95       	ret

00003ffa <lora_driver_resetRn2483>:
    3ffa:	88 23       	and	r24, r24
    3ffc:	31 f0       	breq	.+12     	; 0x400a <lora_driver_resetRn2483+0x10>
    3ffe:	e8 e0       	ldi	r30, 0x08	; 8
    4000:	f1 e0       	ldi	r31, 0x01	; 1
    4002:	80 81       	ld	r24, Z
    4004:	8f 7e       	andi	r24, 0xEF	; 239
    4006:	80 83       	st	Z, r24
    4008:	08 95       	ret
    400a:	e8 e0       	ldi	r30, 0x08	; 8
    400c:	f1 e0       	ldi	r31, 0x01	; 1
    400e:	80 81       	ld	r24, Z
    4010:	80 61       	ori	r24, 0x10	; 16
    4012:	80 83       	st	Z, r24
    4014:	08 95       	ret

00004016 <lora_driver_rn2483FactoryReset>:
    4016:	60 e0       	ldi	r22, 0x00	; 0
    4018:	70 e0       	ldi	r23, 0x00	; 0
    401a:	80 e2       	ldi	r24, 0x20	; 32
    401c:	95 e0       	ldi	r25, 0x05	; 5
    401e:	d4 de       	rcall	.-600    	; 0x3dc8 <_uploadMessage>
    4020:	ee e0       	ldi	r30, 0x0E	; 14
    4022:	f6 e1       	ldi	r31, 0x16	; 22
    4024:	01 90       	ld	r0, Z+
    4026:	00 20       	and	r0, r0
    4028:	e9 f7       	brne	.-6      	; 0x4024 <lora_driver_rn2483FactoryReset+0xe>
    402a:	31 97       	sbiw	r30, 0x01	; 1
    402c:	ee 50       	subi	r30, 0x0E	; 14
    402e:	f6 41       	sbci	r31, 0x16	; 22
    4030:	81 e0       	ldi	r24, 0x01	; 1
    4032:	75 97       	sbiw	r30, 0x15	; 21
    4034:	08 f0       	brcs	.+2      	; 0x4038 <lora_driver_rn2483FactoryReset+0x22>
    4036:	80 e0       	ldi	r24, 0x00	; 0
    4038:	08 95       	ret

0000403a <lora_driver_getRn2483Hweui>:
    403a:	cf 93       	push	r28
    403c:	df 93       	push	r29
    403e:	ec 01       	movw	r28, r24
    4040:	60 e0       	ldi	r22, 0x00	; 0
    4042:	70 e0       	ldi	r23, 0x00	; 0
    4044:	81 e3       	ldi	r24, 0x31	; 49
    4046:	95 e0       	ldi	r25, 0x05	; 5
    4048:	bf de       	rcall	.-642    	; 0x3dc8 <_uploadMessage>
    404a:	ee e0       	ldi	r30, 0x0E	; 14
    404c:	f6 e1       	ldi	r31, 0x16	; 22
    404e:	01 90       	ld	r0, Z+
    4050:	00 20       	and	r0, r0
    4052:	e9 f7       	brne	.-6      	; 0x404e <lora_driver_getRn2483Hweui+0x14>
    4054:	ef 51       	subi	r30, 0x1F	; 31
    4056:	f6 41       	sbci	r31, 0x16	; 22
    4058:	39 f4       	brne	.+14     	; 0x4068 <lora_driver_getRn2483Hweui+0x2e>
    405a:	6e e0       	ldi	r22, 0x0E	; 14
    405c:	76 e1       	ldi	r23, 0x16	; 22
    405e:	ce 01       	movw	r24, r28
    4060:	0e 94 57 33 	call	0x66ae	; 0x66ae <strcpy>
    4064:	80 e0       	ldi	r24, 0x00	; 0
    4066:	02 c0       	rjmp	.+4      	; 0x406c <lora_driver_getRn2483Hweui+0x32>
    4068:	18 82       	st	Y, r1
    406a:	81 e0       	ldi	r24, 0x01	; 1
    406c:	df 91       	pop	r29
    406e:	cf 91       	pop	r28
    4070:	08 95       	ret

00004072 <lora_driver_setDeviceIdentifier>:
    4072:	fc 01       	movw	r30, r24
    4074:	01 90       	ld	r0, Z+
    4076:	00 20       	and	r0, r0
    4078:	e9 f7       	brne	.-6      	; 0x4074 <lora_driver_setDeviceIdentifier+0x2>
    407a:	9f 01       	movw	r18, r30
    407c:	21 51       	subi	r18, 0x11	; 17
    407e:	31 09       	sbc	r19, r1
    4080:	28 17       	cp	r18, r24
    4082:	39 07       	cpc	r19, r25
    4084:	29 f4       	brne	.+10     	; 0x4090 <lora_driver_setDeviceIdentifier+0x1e>
    4086:	bc 01       	movw	r22, r24
    4088:	8f e5       	ldi	r24, 0x5F	; 95
    408a:	95 e0       	ldi	r25, 0x05	; 5
    408c:	6c cf       	rjmp	.-296    	; 0x3f66 <_uploadMessageRc>
    408e:	08 95       	ret
    4090:	89 e0       	ldi	r24, 0x09	; 9
    4092:	08 95       	ret

00004094 <lora_driver_setApplicationIdentifier>:
    4094:	fc 01       	movw	r30, r24
    4096:	01 90       	ld	r0, Z+
    4098:	00 20       	and	r0, r0
    409a:	e9 f7       	brne	.-6      	; 0x4096 <lora_driver_setApplicationIdentifier+0x2>
    409c:	9f 01       	movw	r18, r30
    409e:	21 51       	subi	r18, 0x11	; 17
    40a0:	31 09       	sbc	r19, r1
    40a2:	28 17       	cp	r18, r24
    40a4:	39 07       	cpc	r19, r25
    40a6:	29 f4       	brne	.+10     	; 0x40b2 <lora_driver_setApplicationIdentifier+0x1e>
    40a8:	bc 01       	movw	r22, r24
    40aa:	8e e6       	ldi	r24, 0x6E	; 110
    40ac:	95 e0       	ldi	r25, 0x05	; 5
    40ae:	5b cf       	rjmp	.-330    	; 0x3f66 <_uploadMessageRc>
    40b0:	08 95       	ret
    40b2:	89 e0       	ldi	r24, 0x09	; 9
    40b4:	08 95       	ret

000040b6 <lora_driver_setApplicationKey>:
    40b6:	fc 01       	movw	r30, r24
    40b8:	01 90       	ld	r0, Z+
    40ba:	00 20       	and	r0, r0
    40bc:	e9 f7       	brne	.-6      	; 0x40b8 <lora_driver_setApplicationKey+0x2>
    40be:	9f 01       	movw	r18, r30
    40c0:	21 52       	subi	r18, 0x21	; 33
    40c2:	31 09       	sbc	r19, r1
    40c4:	28 17       	cp	r18, r24
    40c6:	39 07       	cpc	r19, r25
    40c8:	29 f4       	brne	.+10     	; 0x40d4 <lora_driver_setApplicationKey+0x1e>
    40ca:	bc 01       	movw	r22, r24
    40cc:	8d e7       	ldi	r24, 0x7D	; 125
    40ce:	95 e0       	ldi	r25, 0x05	; 5
    40d0:	4a cf       	rjmp	.-364    	; 0x3f66 <_uploadMessageRc>
    40d2:	08 95       	ret
    40d4:	89 e0       	ldi	r24, 0x09	; 9
    40d6:	08 95       	ret

000040d8 <lora_driver_saveMac>:
    40d8:	60 e0       	ldi	r22, 0x00	; 0
    40da:	70 e0       	ldi	r23, 0x00	; 0
    40dc:	8c eb       	ldi	r24, 0xBC	; 188
    40de:	95 e0       	ldi	r25, 0x05	; 5
    40e0:	42 cf       	rjmp	.-380    	; 0x3f66 <_uploadMessageRc>
    40e2:	08 95       	ret

000040e4 <lora_driver_join>:
    40e4:	0f 93       	push	r16
    40e6:	1f 93       	push	r17
    40e8:	e8 2f       	mov	r30, r24
    40ea:	f0 e0       	ldi	r31, 0x00	; 0
    40ec:	ee 0f       	add	r30, r30
    40ee:	ff 1f       	adc	r31, r31
    40f0:	ea 56       	subi	r30, 0x6A	; 106
    40f2:	f8 4f       	sbci	r31, 0xF8	; 248
    40f4:	60 81       	ld	r22, Z
    40f6:	71 81       	ldd	r23, Z+1	; 0x01
    40f8:	85 ec       	ldi	r24, 0xC5	; 197
    40fa:	95 e0       	ldi	r25, 0x05	; 5
    40fc:	34 df       	rcall	.-408    	; 0x3f66 <_uploadMessageRc>
    40fe:	81 11       	cpse	r24, r1
    4100:	14 c0       	rjmp	.+40     	; 0x412a <lora_driver_join+0x46>
    4102:	08 e2       	ldi	r16, 0x28	; 40
    4104:	15 e0       	ldi	r17, 0x05	; 5
    4106:	20 e0       	ldi	r18, 0x00	; 0
    4108:	30 e0       	ldi	r19, 0x00	; 0
    410a:	4d e2       	ldi	r20, 0x2D	; 45
    410c:	50 e0       	ldi	r21, 0x00	; 0
    410e:	6e e0       	ldi	r22, 0x0E	; 14
    4110:	76 e1       	ldi	r23, 0x16	; 22
    4112:	80 91 85 15 	lds	r24, 0x1585	; 0x801585 <_serialReplyBufferHandle>
    4116:	90 91 86 15 	lds	r25, 0x1586	; 0x801586 <_serialReplyBufferHandle+0x1>
    411a:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <xStreamBufferReceive>
    411e:	88 23       	and	r24, r24
    4120:	21 f0       	breq	.+8      	; 0x412a <lora_driver_join+0x46>
    4122:	8e e0       	ldi	r24, 0x0E	; 14
    4124:	96 e1       	ldi	r25, 0x16	; 22
    4126:	aa de       	rcall	.-684    	; 0x3e7c <_reply2ReturnCode>
    4128:	03 c0       	rjmp	.+6      	; 0x4130 <lora_driver_join+0x4c>
    412a:	8e e0       	ldi	r24, 0x0E	; 14
    412c:	96 e1       	ldi	r25, 0x16	; 22
    412e:	a6 de       	rcall	.-692    	; 0x3e7c <_reply2ReturnCode>
    4130:	1f 91       	pop	r17
    4132:	0f 91       	pop	r16
    4134:	08 95       	ret

00004136 <lora_driver_sendUploadMessage>:
    4136:	0f 93       	push	r16
    4138:	1f 93       	push	r17
    413a:	cf 93       	push	r28
    413c:	df 93       	push	r29
    413e:	1f 92       	push	r1
    4140:	cd b7       	in	r28, 0x3d	; 61
    4142:	de b7       	in	r29, 0x3e	; 62
    4144:	db 01       	movw	r26, r22
    4146:	11 96       	adiw	r26, 0x01	; 1
    4148:	9c 91       	ld	r25, X
    414a:	11 97       	sbiw	r26, 0x01	; 1
    414c:	95 31       	cpi	r25, 0x15	; 21
    414e:	08 f0       	brcs	.+2      	; 0x4152 <lora_driver_sendUploadMessage+0x1c>
    4150:	b4 c0       	rjmp	.+360    	; 0x42ba <lora_driver_sendUploadMessage+0x184>
    4152:	99 23       	and	r25, r25
    4154:	81 f1       	breq	.+96     	; 0x41b6 <lora_driver_sendUploadMessage+0x80>
    4156:	60 e0       	ldi	r22, 0x00	; 0
    4158:	70 e0       	ldi	r23, 0x00	; 0
    415a:	27 2f       	mov	r18, r23
    415c:	30 e0       	ldi	r19, 0x00	; 0
    415e:	46 2f       	mov	r20, r22
    4160:	50 e0       	ldi	r21, 0x00	; 0
    4162:	fd 01       	movw	r30, r26
    4164:	e4 0f       	add	r30, r20
    4166:	f5 1f       	adc	r31, r21
    4168:	92 81       	ldd	r25, Z+2	; 0x02
    416a:	92 95       	swap	r25
    416c:	9f 70       	andi	r25, 0x0F	; 15
    416e:	9a 30       	cpi	r25, 0x0A	; 10
    4170:	10 f0       	brcs	.+4      	; 0x4176 <lora_driver_sendUploadMessage+0x40>
    4172:	99 5c       	subi	r25, 0xC9	; 201
    4174:	01 c0       	rjmp	.+2      	; 0x4178 <lora_driver_sendUploadMessage+0x42>
    4176:	90 5d       	subi	r25, 0xD0	; 208
    4178:	f9 01       	movw	r30, r18
    417a:	e1 56       	subi	r30, 0x61	; 97
    417c:	fa 4e       	sbci	r31, 0xEA	; 234
    417e:	90 83       	st	Z, r25
    4180:	2f 5f       	subi	r18, 0xFF	; 255
    4182:	3f 4f       	sbci	r19, 0xFF	; 255
    4184:	fd 01       	movw	r30, r26
    4186:	e4 0f       	add	r30, r20
    4188:	f5 1f       	adc	r31, r21
    418a:	92 81       	ldd	r25, Z+2	; 0x02
    418c:	9f 70       	andi	r25, 0x0F	; 15
    418e:	49 2f       	mov	r20, r25
    4190:	50 e0       	ldi	r21, 0x00	; 0
    4192:	4a 30       	cpi	r20, 0x0A	; 10
    4194:	51 05       	cpc	r21, r1
    4196:	14 f0       	brlt	.+4      	; 0x419c <lora_driver_sendUploadMessage+0x66>
    4198:	99 5c       	subi	r25, 0xC9	; 201
    419a:	01 c0       	rjmp	.+2      	; 0x419e <lora_driver_sendUploadMessage+0x68>
    419c:	90 5d       	subi	r25, 0xD0	; 208
    419e:	f9 01       	movw	r30, r18
    41a0:	e1 56       	subi	r30, 0x61	; 97
    41a2:	fa 4e       	sbci	r31, 0xEA	; 234
    41a4:	90 83       	st	Z, r25
    41a6:	7e 5f       	subi	r23, 0xFE	; 254
    41a8:	6f 5f       	subi	r22, 0xFF	; 255
    41aa:	11 96       	adiw	r26, 0x01	; 1
    41ac:	9c 91       	ld	r25, X
    41ae:	11 97       	sbiw	r26, 0x01	; 1
    41b0:	69 17       	cp	r22, r25
    41b2:	98 f2       	brcs	.-90     	; 0x415a <lora_driver_sendUploadMessage+0x24>
    41b4:	01 c0       	rjmp	.+2      	; 0x41b8 <lora_driver_sendUploadMessage+0x82>
    41b6:	70 e0       	ldi	r23, 0x00	; 0
    41b8:	e7 2f       	mov	r30, r23
    41ba:	f0 e0       	ldi	r31, 0x00	; 0
    41bc:	e1 56       	subi	r30, 0x61	; 97
    41be:	fa 4e       	sbci	r31, 0xEA	; 234
    41c0:	10 82       	st	Z, r1
    41c2:	4c 91       	ld	r20, X
    41c4:	81 11       	cpse	r24, r1
    41c6:	03 c0       	rjmp	.+6      	; 0x41ce <lora_driver_sendUploadMessage+0x98>
    41c8:	8e ec       	ldi	r24, 0xCE	; 206
    41ca:	95 e0       	ldi	r25, 0x05	; 5
    41cc:	02 c0       	rjmp	.+4      	; 0x41d2 <lora_driver_sendUploadMessage+0x9c>
    41ce:	80 ed       	ldi	r24, 0xD0	; 208
    41d0:	95 e0       	ldi	r25, 0x05	; 5
    41d2:	2f e9       	ldi	r18, 0x9F	; 159
    41d4:	35 e1       	ldi	r19, 0x15	; 21
    41d6:	3f 93       	push	r19
    41d8:	2f 93       	push	r18
    41da:	1f 92       	push	r1
    41dc:	4f 93       	push	r20
    41de:	9f 93       	push	r25
    41e0:	8f 93       	push	r24
    41e2:	84 ed       	ldi	r24, 0xD4	; 212
    41e4:	95 e0       	ldi	r25, 0x05	; 5
    41e6:	9f 93       	push	r25
    41e8:	8f 93       	push	r24
    41ea:	81 ee       	ldi	r24, 0xE1	; 225
    41ec:	95 e1       	ldi	r25, 0x15	; 21
    41ee:	9f 93       	push	r25
    41f0:	8f 93       	push	r24
    41f2:	0e 94 00 34 	call	0x6800	; 0x6800 <sprintf>
    41f6:	60 e0       	ldi	r22, 0x00	; 0
    41f8:	70 e0       	ldi	r23, 0x00	; 0
    41fa:	81 ee       	ldi	r24, 0xE1	; 225
    41fc:	95 e1       	ldi	r25, 0x15	; 21
    41fe:	b3 de       	rcall	.-666    	; 0x3f66 <_uploadMessageRc>
    4200:	0f b6       	in	r0, 0x3f	; 63
    4202:	f8 94       	cli
    4204:	de bf       	out	0x3e, r29	; 62
    4206:	0f be       	out	0x3f, r0	; 63
    4208:	cd bf       	out	0x3d, r28	; 61
    420a:	81 11       	cpse	r24, r1
    420c:	59 c0       	rjmp	.+178    	; 0x42c0 <lora_driver_sendUploadMessage+0x18a>
    420e:	08 e2       	ldi	r16, 0x28	; 40
    4210:	15 e0       	ldi	r17, 0x05	; 5
    4212:	20 e0       	ldi	r18, 0x00	; 0
    4214:	30 e0       	ldi	r19, 0x00	; 0
    4216:	4d e2       	ldi	r20, 0x2D	; 45
    4218:	50 e0       	ldi	r21, 0x00	; 0
    421a:	6e e0       	ldi	r22, 0x0E	; 14
    421c:	76 e1       	ldi	r23, 0x16	; 22
    421e:	80 91 85 15 	lds	r24, 0x1585	; 0x801585 <_serialReplyBufferHandle>
    4222:	90 91 86 15 	lds	r25, 0x1586	; 0x801586 <_serialReplyBufferHandle+0x1>
    4226:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <xStreamBufferReceive>
    422a:	88 23       	and	r24, r24
    422c:	09 f4       	brne	.+2      	; 0x4230 <lora_driver_sendUploadMessage+0xfa>
    422e:	47 c0       	rjmp	.+142    	; 0x42be <lora_driver_sendUploadMessage+0x188>
    4230:	8e e0       	ldi	r24, 0x0E	; 14
    4232:	96 e1       	ldi	r25, 0x16	; 22
    4234:	23 de       	rcall	.-954    	; 0x3e7c <_reply2ReturnCode>
    4236:	8e 30       	cpi	r24, 0x0E	; 14
    4238:	09 f0       	breq	.+2      	; 0x423c <lora_driver_sendUploadMessage+0x106>
    423a:	42 c0       	rjmp	.+132    	; 0x42c0 <lora_driver_sendUploadMessage+0x18a>
    423c:	87 e0       	ldi	r24, 0x07	; 7
    423e:	89 83       	std	Y+1, r24	; 0x01
    4240:	80 91 83 15 	lds	r24, 0x1583	; 0x801583 <_downlinkMessageBuffer>
    4244:	90 91 84 15 	lds	r25, 0x1584	; 0x801584 <_downlinkMessageBuffer+0x1>
    4248:	89 2b       	or	r24, r25
    424a:	a9 f1       	breq	.+106    	; 0x42b6 <lora_driver_sendUploadMessage+0x180>
    424c:	be 01       	movw	r22, r28
    424e:	6f 5f       	subi	r22, 0xFF	; 255
    4250:	7f 4f       	sbci	r23, 0xFF	; 255
    4252:	8e e0       	ldi	r24, 0x0E	; 14
    4254:	96 e1       	ldi	r25, 0x16	; 22
    4256:	68 d1       	rcall	.+720    	; 0x4528 <decode_port_no>
    4258:	80 93 89 15 	sts	0x1589, r24	; 0x801589 <_downlinkPayload>
    425c:	e9 81       	ldd	r30, Y+1	; 0x01
    425e:	f0 e0       	ldi	r31, 0x00	; 0
    4260:	e2 5f       	subi	r30, 0xF2	; 242
    4262:	f9 4e       	sbci	r31, 0xE9	; 233
    4264:	df 01       	movw	r26, r30
    4266:	0d 90       	ld	r0, X+
    4268:	00 20       	and	r0, r0
    426a:	e9 f7       	brne	.-6      	; 0x4266 <lora_driver_sendUploadMessage+0x130>
    426c:	11 97       	sbiw	r26, 0x01	; 1
    426e:	ae 1b       	sub	r26, r30
    4270:	bf 0b       	sbc	r27, r31
    4272:	aa 23       	and	r26, r26
    4274:	91 f0       	breq	.+36     	; 0x429a <lora_driver_sendUploadMessage+0x164>
    4276:	bb 27       	eor	r27, r27
    4278:	cd 01       	movw	r24, r26
    427a:	01 97       	sbiw	r24, 0x01	; 1
    427c:	9c 01       	movw	r18, r24
    427e:	12 f4       	brpl	.+4      	; 0x4284 <lora_driver_sendUploadMessage+0x14e>
    4280:	2f 5f       	subi	r18, 0xFF	; 255
    4282:	3f 4f       	sbci	r19, 0xFF	; 255
    4284:	35 95       	asr	r19
    4286:	27 95       	ror	r18
    4288:	20 93 8a 15 	sts	0x158A, r18	; 0x80158a <_downlinkPayload+0x1>
    428c:	af 01       	movw	r20, r30
    428e:	4f 5f       	subi	r20, 0xFF	; 255
    4290:	5f 4f       	sbci	r21, 0xFF	; 255
    4292:	64 e1       	ldi	r22, 0x14	; 20
    4294:	8b e8       	ldi	r24, 0x8B	; 139
    4296:	95 e1       	ldi	r25, 0x15	; 21
    4298:	73 d1       	rcall	.+742    	; 0x4580 <decode_hexadecimal_string_bytes>
    429a:	01 e0       	ldi	r16, 0x01	; 1
    429c:	10 e0       	ldi	r17, 0x00	; 0
    429e:	20 e0       	ldi	r18, 0x00	; 0
    42a0:	30 e0       	ldi	r19, 0x00	; 0
    42a2:	46 e1       	ldi	r20, 0x16	; 22
    42a4:	50 e0       	ldi	r21, 0x00	; 0
    42a6:	69 e8       	ldi	r22, 0x89	; 137
    42a8:	75 e1       	ldi	r23, 0x15	; 21
    42aa:	80 91 83 15 	lds	r24, 0x1583	; 0x801583 <_downlinkMessageBuffer>
    42ae:	90 91 84 15 	lds	r25, 0x1584	; 0x801584 <_downlinkMessageBuffer+0x1>
    42b2:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <xStreamBufferSend>
    42b6:	8e e0       	ldi	r24, 0x0E	; 14
    42b8:	03 c0       	rjmp	.+6      	; 0x42c0 <lora_driver_sendUploadMessage+0x18a>
    42ba:	84 e1       	ldi	r24, 0x14	; 20
    42bc:	01 c0       	rjmp	.+2      	; 0x42c0 <lora_driver_sendUploadMessage+0x18a>
    42be:	80 e0       	ldi	r24, 0x00	; 0
    42c0:	0f 90       	pop	r0
    42c2:	df 91       	pop	r29
    42c4:	cf 91       	pop	r28
    42c6:	1f 91       	pop	r17
    42c8:	0f 91       	pop	r16
    42ca:	08 95       	ret

000042cc <lora_driver_setAdaptiveDataRate>:
    42cc:	81 30       	cpi	r24, 0x01	; 1
    42ce:	19 f0       	breq	.+6      	; 0x42d6 <lora_driver_setAdaptiveDataRate+0xa>
    42d0:	64 ee       	ldi	r22, 0xE4	; 228
    42d2:	75 e0       	ldi	r23, 0x05	; 5
    42d4:	02 c0       	rjmp	.+4      	; 0x42da <lora_driver_setAdaptiveDataRate+0xe>
    42d6:	6d eb       	ldi	r22, 0xBD	; 189
    42d8:	76 e0       	ldi	r23, 0x06	; 6
    42da:	88 ee       	ldi	r24, 0xE8	; 232
    42dc:	95 e0       	ldi	r25, 0x05	; 5
    42de:	43 ce       	rjmp	.-890    	; 0x3f66 <_uploadMessageRc>
    42e0:	08 95       	ret

000042e2 <lora_driver_setReceiveDelay>:
    42e2:	9f 93       	push	r25
    42e4:	8f 93       	push	r24
    42e6:	89 e1       	ldi	r24, 0x19	; 25
    42e8:	96 e0       	ldi	r25, 0x06	; 6
    42ea:	9f 93       	push	r25
    42ec:	8f 93       	push	r24
    42ee:	81 ee       	ldi	r24, 0xE1	; 225
    42f0:	95 e1       	ldi	r25, 0x15	; 21
    42f2:	9f 93       	push	r25
    42f4:	8f 93       	push	r24
    42f6:	0e 94 00 34 	call	0x6800	; 0x6800 <sprintf>
    42fa:	60 e0       	ldi	r22, 0x00	; 0
    42fc:	70 e0       	ldi	r23, 0x00	; 0
    42fe:	81 ee       	ldi	r24, 0xE1	; 225
    4300:	95 e1       	ldi	r25, 0x15	; 21
    4302:	31 de       	rcall	.-926    	; 0x3f66 <_uploadMessageRc>
    4304:	0f 90       	pop	r0
    4306:	0f 90       	pop	r0
    4308:	0f 90       	pop	r0
    430a:	0f 90       	pop	r0
    430c:	0f 90       	pop	r0
    430e:	0f 90       	pop	r0
    4310:	08 95       	ret

00004312 <lora_driver_configureToEu868>:
    4312:	2f 92       	push	r2
    4314:	3f 92       	push	r3
    4316:	4f 92       	push	r4
    4318:	5f 92       	push	r5
    431a:	6f 92       	push	r6
    431c:	7f 92       	push	r7
    431e:	8f 92       	push	r8
    4320:	9f 92       	push	r9
    4322:	af 92       	push	r10
    4324:	bf 92       	push	r11
    4326:	cf 92       	push	r12
    4328:	df 92       	push	r13
    432a:	ef 92       	push	r14
    432c:	ff 92       	push	r15
    432e:	0f 93       	push	r16
    4330:	1f 93       	push	r17
    4332:	cf 93       	push	r28
    4334:	df 93       	push	r29
    4336:	cd b7       	in	r28, 0x3d	; 61
    4338:	de b7       	in	r29, 0x3e	; 62
    433a:	a0 97       	sbiw	r28, 0x20	; 32
    433c:	0f b6       	in	r0, 0x3f	; 63
    433e:	f8 94       	cli
    4340:	de bf       	out	0x3e, r29	; 62
    4342:	0f be       	out	0x3f, r0	; 63
    4344:	cd bf       	out	0x3d, r28	; 61
    4346:	66 e4       	ldi	r22, 0x46	; 70
    4348:	76 e0       	ldi	r23, 0x06	; 6
    434a:	82 e5       	ldi	r24, 0x52	; 82
    434c:	96 e0       	ldi	r25, 0x06	; 6
    434e:	3c dd       	rcall	.-1416   	; 0x3dc8 <_uploadMessage>
    4350:	95 dd       	rcall	.-1238   	; 0x3e7c <_reply2ReturnCode>
    4352:	81 11       	cpse	r24, r1
    4354:	a3 c0       	rjmp	.+326    	; 0x449c <lora_driver_configureToEu868+0x18a>
    4356:	80 e2       	ldi	r24, 0x20	; 32
    4358:	e2 e2       	ldi	r30, 0x22	; 34
    435a:	f2 e0       	ldi	r31, 0x02	; 2
    435c:	de 01       	movw	r26, r28
    435e:	11 96       	adiw	r26, 0x01	; 1
    4360:	01 90       	ld	r0, Z+
    4362:	0d 92       	st	X+, r0
    4364:	8a 95       	dec	r24
    4366:	e1 f7       	brne	.-8      	; 0x4360 <lora_driver_configureToEu868+0x4e>
    4368:	9e 01       	movw	r18, r28
    436a:	2f 5f       	subi	r18, 0xFF	; 255
    436c:	3f 4f       	sbci	r19, 0xFF	; 255
    436e:	69 01       	movw	r12, r18
    4370:	e1 2c       	mov	r14, r1
    4372:	f1 2c       	mov	r15, r1
    4374:	0f 2e       	mov	r0, r31
    4376:	fe e5       	ldi	r31, 0x5E	; 94
    4378:	af 2e       	mov	r10, r31
    437a:	f6 e0       	ldi	r31, 0x06	; 6
    437c:	bf 2e       	mov	r11, r31
    437e:	f0 2d       	mov	r31, r0
    4380:	01 ee       	ldi	r16, 0xE1	; 225
    4382:	15 e1       	ldi	r17, 0x15	; 21
    4384:	0f 2e       	mov	r0, r31
    4386:	f7 e7       	ldi	r31, 0x77	; 119
    4388:	4f 2e       	mov	r4, r31
    438a:	f6 e0       	ldi	r31, 0x06	; 6
    438c:	5f 2e       	mov	r5, r31
    438e:	f0 2d       	mov	r31, r0
    4390:	0f 2e       	mov	r0, r31
    4392:	fe e8       	ldi	r31, 0x8E	; 142
    4394:	8f 2e       	mov	r8, r31
    4396:	f6 e0       	ldi	r31, 0x06	; 6
    4398:	9f 2e       	mov	r9, r31
    439a:	f0 2d       	mov	r31, r0
    439c:	0f 2e       	mov	r0, r31
    439e:	f8 ea       	ldi	r31, 0xA8	; 168
    43a0:	6f 2e       	mov	r6, r31
    43a2:	f6 e0       	ldi	r31, 0x06	; 6
    43a4:	7f 2e       	mov	r7, r31
    43a6:	f0 2d       	mov	r31, r0
    43a8:	3e 2c       	mov	r3, r14
    43aa:	2f 2c       	mov	r2, r15
    43ac:	ff 92       	push	r15
    43ae:	ef 92       	push	r14
    43b0:	bf 92       	push	r11
    43b2:	af 92       	push	r10
    43b4:	1f 93       	push	r17
    43b6:	0f 93       	push	r16
    43b8:	0e 94 00 34 	call	0x6800	; 0x6800 <sprintf>
    43bc:	60 e0       	ldi	r22, 0x00	; 0
    43be:	70 e0       	ldi	r23, 0x00	; 0
    43c0:	c8 01       	movw	r24, r16
    43c2:	02 dd       	rcall	.-1532   	; 0x3dc8 <_uploadMessage>
    43c4:	5b dd       	rcall	.-1354   	; 0x3e7c <_reply2ReturnCode>
    43c6:	0f 90       	pop	r0
    43c8:	0f 90       	pop	r0
    43ca:	0f 90       	pop	r0
    43cc:	0f 90       	pop	r0
    43ce:	0f 90       	pop	r0
    43d0:	0f 90       	pop	r0
    43d2:	81 11       	cpse	r24, r1
    43d4:	63 c0       	rjmp	.+198    	; 0x449c <lora_driver_configureToEu868+0x18a>
    43d6:	32 e0       	ldi	r19, 0x02	; 2
    43d8:	3e 15       	cp	r19, r14
    43da:	e8 f4       	brcc	.+58     	; 0x4416 <lora_driver_configureToEu868+0x104>
    43dc:	f6 01       	movw	r30, r12
    43de:	83 81       	ldd	r24, Z+3	; 0x03
    43e0:	8f 93       	push	r24
    43e2:	82 81       	ldd	r24, Z+2	; 0x02
    43e4:	8f 93       	push	r24
    43e6:	81 81       	ldd	r24, Z+1	; 0x01
    43e8:	8f 93       	push	r24
    43ea:	80 81       	ld	r24, Z
    43ec:	8f 93       	push	r24
    43ee:	ff 92       	push	r15
    43f0:	ef 92       	push	r14
    43f2:	5f 92       	push	r5
    43f4:	4f 92       	push	r4
    43f6:	1f 93       	push	r17
    43f8:	0f 93       	push	r16
    43fa:	0e 94 00 34 	call	0x6800	; 0x6800 <sprintf>
    43fe:	60 e0       	ldi	r22, 0x00	; 0
    4400:	70 e0       	ldi	r23, 0x00	; 0
    4402:	c8 01       	movw	r24, r16
    4404:	e1 dc       	rcall	.-1598   	; 0x3dc8 <_uploadMessage>
    4406:	3a dd       	rcall	.-1420   	; 0x3e7c <_reply2ReturnCode>
    4408:	0f b6       	in	r0, 0x3f	; 63
    440a:	f8 94       	cli
    440c:	de bf       	out	0x3e, r29	; 62
    440e:	0f be       	out	0x3f, r0	; 63
    4410:	cd bf       	out	0x3d, r28	; 61
    4412:	81 11       	cpse	r24, r1
    4414:	43 c0       	rjmp	.+134    	; 0x449c <lora_driver_configureToEu868+0x18a>
    4416:	2f 92       	push	r2
    4418:	3f 92       	push	r3
    441a:	9f 92       	push	r9
    441c:	8f 92       	push	r8
    441e:	1f 93       	push	r17
    4420:	0f 93       	push	r16
    4422:	0e 94 00 34 	call	0x6800	; 0x6800 <sprintf>
    4426:	60 e0       	ldi	r22, 0x00	; 0
    4428:	70 e0       	ldi	r23, 0x00	; 0
    442a:	c8 01       	movw	r24, r16
    442c:	cd dc       	rcall	.-1638   	; 0x3dc8 <_uploadMessage>
    442e:	26 dd       	rcall	.-1460   	; 0x3e7c <_reply2ReturnCode>
    4430:	0f 90       	pop	r0
    4432:	0f 90       	pop	r0
    4434:	0f 90       	pop	r0
    4436:	0f 90       	pop	r0
    4438:	0f 90       	pop	r0
    443a:	0f 90       	pop	r0
    443c:	81 11       	cpse	r24, r1
    443e:	2e c0       	rjmp	.+92     	; 0x449c <lora_driver_configureToEu868+0x18a>
    4440:	2f 92       	push	r2
    4442:	3f 92       	push	r3
    4444:	7f 92       	push	r7
    4446:	6f 92       	push	r6
    4448:	1f 93       	push	r17
    444a:	0f 93       	push	r16
    444c:	0e 94 00 34 	call	0x6800	; 0x6800 <sprintf>
    4450:	60 e0       	ldi	r22, 0x00	; 0
    4452:	70 e0       	ldi	r23, 0x00	; 0
    4454:	c8 01       	movw	r24, r16
    4456:	b8 dc       	rcall	.-1680   	; 0x3dc8 <_uploadMessage>
    4458:	11 dd       	rcall	.-1502   	; 0x3e7c <_reply2ReturnCode>
    445a:	0f 90       	pop	r0
    445c:	0f 90       	pop	r0
    445e:	0f 90       	pop	r0
    4460:	0f 90       	pop	r0
    4462:	0f 90       	pop	r0
    4464:	0f 90       	pop	r0
    4466:	81 11       	cpse	r24, r1
    4468:	19 c0       	rjmp	.+50     	; 0x449c <lora_driver_configureToEu868+0x18a>
    446a:	3f ef       	ldi	r19, 0xFF	; 255
    446c:	e3 1a       	sub	r14, r19
    446e:	f3 0a       	sbc	r15, r19
    4470:	84 e0       	ldi	r24, 0x04	; 4
    4472:	c8 0e       	add	r12, r24
    4474:	d1 1c       	adc	r13, r1
    4476:	98 e0       	ldi	r25, 0x08	; 8
    4478:	e9 16       	cp	r14, r25
    447a:	f1 04       	cpc	r15, r1
    447c:	09 f0       	breq	.+2      	; 0x4480 <lora_driver_configureToEu868+0x16e>
    447e:	94 cf       	rjmp	.-216    	; 0x43a8 <lora_driver_configureToEu868+0x96>
    4480:	60 e0       	ldi	r22, 0x00	; 0
    4482:	70 e0       	ldi	r23, 0x00	; 0
    4484:	80 ec       	ldi	r24, 0xC0	; 192
    4486:	96 e0       	ldi	r25, 0x06	; 6
    4488:	9f dc       	rcall	.-1730   	; 0x3dc8 <_uploadMessage>
    448a:	f8 dc       	rcall	.-1552   	; 0x3e7c <_reply2ReturnCode>
    448c:	81 11       	cpse	r24, r1
    448e:	06 c0       	rjmp	.+12     	; 0x449c <lora_driver_configureToEu868+0x18a>
    4490:	60 e0       	ldi	r22, 0x00	; 0
    4492:	70 e0       	ldi	r23, 0x00	; 0
    4494:	81 ed       	ldi	r24, 0xD1	; 209
    4496:	96 e0       	ldi	r25, 0x06	; 6
    4498:	97 dc       	rcall	.-1746   	; 0x3dc8 <_uploadMessage>
    449a:	f0 dc       	rcall	.-1568   	; 0x3e7c <_reply2ReturnCode>
    449c:	a0 96       	adiw	r28, 0x20	; 32
    449e:	0f b6       	in	r0, 0x3f	; 63
    44a0:	f8 94       	cli
    44a2:	de bf       	out	0x3e, r29	; 62
    44a4:	0f be       	out	0x3f, r0	; 63
    44a6:	cd bf       	out	0x3d, r28	; 61
    44a8:	df 91       	pop	r29
    44aa:	cf 91       	pop	r28
    44ac:	1f 91       	pop	r17
    44ae:	0f 91       	pop	r16
    44b0:	ff 90       	pop	r15
    44b2:	ef 90       	pop	r14
    44b4:	df 90       	pop	r13
    44b6:	cf 90       	pop	r12
    44b8:	bf 90       	pop	r11
    44ba:	af 90       	pop	r10
    44bc:	9f 90       	pop	r9
    44be:	8f 90       	pop	r8
    44c0:	7f 90       	pop	r7
    44c2:	6f 90       	pop	r6
    44c4:	5f 90       	pop	r5
    44c6:	4f 90       	pop	r4
    44c8:	3f 90       	pop	r3
    44ca:	2f 90       	pop	r2
    44cc:	08 95       	ret

000044ce <lora_driver_setOtaaIdentity>:
    44ce:	ef 92       	push	r14
    44d0:	ff 92       	push	r15
    44d2:	0f 93       	push	r16
    44d4:	1f 93       	push	r17
    44d6:	cf 93       	push	r28
    44d8:	df 93       	push	r29
    44da:	ec 01       	movw	r28, r24
    44dc:	8b 01       	movw	r16, r22
    44de:	7a 01       	movw	r14, r20
    44e0:	81 e0       	ldi	r24, 0x01	; 1
    44e2:	f4 de       	rcall	.-536    	; 0x42cc <lora_driver_setAdaptiveDataRate>
    44e4:	81 11       	cpse	r24, r1
    44e6:	0d c0       	rjmp	.+26     	; 0x4502 <lora_driver_setOtaaIdentity+0x34>
    44e8:	ce 01       	movw	r24, r28
    44ea:	d4 dd       	rcall	.-1112   	; 0x4094 <lora_driver_setApplicationIdentifier>
    44ec:	81 11       	cpse	r24, r1
    44ee:	09 c0       	rjmp	.+18     	; 0x4502 <lora_driver_setOtaaIdentity+0x34>
    44f0:	c8 01       	movw	r24, r16
    44f2:	e1 dd       	rcall	.-1086   	; 0x40b6 <lora_driver_setApplicationKey>
    44f4:	81 11       	cpse	r24, r1
    44f6:	05 c0       	rjmp	.+10     	; 0x4502 <lora_driver_setOtaaIdentity+0x34>
    44f8:	c7 01       	movw	r24, r14
    44fa:	bb dd       	rcall	.-1162   	; 0x4072 <lora_driver_setDeviceIdentifier>
    44fc:	81 11       	cpse	r24, r1
    44fe:	01 c0       	rjmp	.+2      	; 0x4502 <lora_driver_setOtaaIdentity+0x34>
    4500:	eb dd       	rcall	.-1066   	; 0x40d8 <lora_driver_saveMac>
    4502:	df 91       	pop	r29
    4504:	cf 91       	pop	r28
    4506:	1f 91       	pop	r17
    4508:	0f 91       	pop	r16
    450a:	ff 90       	pop	r15
    450c:	ef 90       	pop	r14
    450e:	08 95       	ret

00004510 <lora_driver_mapReturnCodeToText>:
    4510:	90 e0       	ldi	r25, 0x00	; 0
    4512:	fc 01       	movw	r30, r24
    4514:	ee 0f       	add	r30, r30
    4516:	ff 1f       	adc	r31, r31
    4518:	8e 0f       	add	r24, r30
    451a:	9f 1f       	adc	r25, r31
    451c:	fc 01       	movw	r30, r24
    451e:	e6 56       	subi	r30, 0x66	; 102
    4520:	f8 4f       	sbci	r31, 0xF8	; 248
    4522:	81 81       	ldd	r24, Z+1	; 0x01
    4524:	92 81       	ldd	r25, Z+2	; 0x02
    4526:	08 95       	ret

00004528 <decode_port_no>:
    4528:	dc 01       	movw	r26, r24
    452a:	00 97       	sbiw	r24, 0x00	; 0
    452c:	29 f1       	breq	.+74     	; 0x4578 <decode_port_no+0x50>
    452e:	fb 01       	movw	r30, r22
    4530:	20 81       	ld	r18, Z
    4532:	fc 01       	movw	r30, r24
    4534:	01 90       	ld	r0, Z+
    4536:	00 20       	and	r0, r0
    4538:	e9 f7       	brne	.-6      	; 0x4534 <decode_port_no+0xc>
    453a:	31 97       	sbiw	r30, 0x01	; 1
    453c:	e8 1b       	sub	r30, r24
    453e:	f9 0b       	sbc	r31, r25
    4540:	82 2f       	mov	r24, r18
    4542:	90 e0       	ldi	r25, 0x00	; 0
    4544:	e8 17       	cp	r30, r24
    4546:	f9 07       	cpc	r31, r25
    4548:	c8 f0       	brcs	.+50     	; 0x457c <decode_port_no+0x54>
    454a:	80 e0       	ldi	r24, 0x00	; 0
    454c:	08 c0       	rjmp	.+16     	; 0x455e <decode_port_no+0x36>
    454e:	88 0f       	add	r24, r24
    4550:	38 2f       	mov	r19, r24
    4552:	33 0f       	add	r19, r19
    4554:	33 0f       	add	r19, r19
    4556:	83 0f       	add	r24, r19
    4558:	80 53       	subi	r24, 0x30	; 48
    455a:	89 0f       	add	r24, r25
    455c:	2f 5f       	subi	r18, 0xFF	; 255
    455e:	fd 01       	movw	r30, r26
    4560:	e2 0f       	add	r30, r18
    4562:	f1 1d       	adc	r31, r1
    4564:	90 81       	ld	r25, Z
    4566:	30 ed       	ldi	r19, 0xD0	; 208
    4568:	39 0f       	add	r19, r25
    456a:	3a 30       	cpi	r19, 0x0A	; 10
    456c:	10 f4       	brcc	.+4      	; 0x4572 <decode_port_no+0x4a>
    456e:	91 11       	cpse	r25, r1
    4570:	ee cf       	rjmp	.-36     	; 0x454e <decode_port_no+0x26>
    4572:	fb 01       	movw	r30, r22
    4574:	20 83       	st	Z, r18
    4576:	08 95       	ret
    4578:	80 e0       	ldi	r24, 0x00	; 0
    457a:	08 95       	ret
    457c:	80 e0       	ldi	r24, 0x00	; 0
    457e:	08 95       	ret

00004580 <decode_hexadecimal_string_bytes>:
    4580:	0f 93       	push	r16
    4582:	1f 93       	push	r17
    4584:	cf 93       	push	r28
    4586:	df 93       	push	r29
    4588:	dc 01       	movw	r26, r24
    458a:	ea 01       	movw	r28, r20
    458c:	20 97       	sbiw	r28, 0x00	; 0
    458e:	e1 f1       	breq	.+120    	; 0x4608 <decode_hexadecimal_string_bytes+0x88>
    4590:	fa 01       	movw	r30, r20
    4592:	01 90       	ld	r0, Z+
    4594:	00 20       	and	r0, r0
    4596:	e9 f7       	brne	.-6      	; 0x4592 <decode_hexadecimal_string_bytes+0x12>
    4598:	31 97       	sbiw	r30, 0x01	; 1
    459a:	e4 1b       	sub	r30, r20
    459c:	f5 0b       	sbc	r31, r21
    459e:	32 97       	sbiw	r30, 0x02	; 2
    45a0:	10 f5       	brcc	.+68     	; 0x45e6 <decode_hexadecimal_string_bytes+0x66>
    45a2:	32 c0       	rjmp	.+100    	; 0x4608 <decode_hexadecimal_string_bytes+0x88>
    45a4:	8d 01       	movw	r16, r26
    45a6:	04 0f       	add	r16, r20
    45a8:	15 1f       	adc	r17, r21
    45aa:	30 e0       	ldi	r19, 0x00	; 0
    45ac:	ae 01       	movw	r20, r28
    45ae:	42 0f       	add	r20, r18
    45b0:	53 1f       	adc	r21, r19
    45b2:	fa 01       	movw	r30, r20
    45b4:	90 81       	ld	r25, Z
    45b6:	91 34       	cpi	r25, 0x41	; 65
    45b8:	28 f0       	brcs	.+10     	; 0x45c4 <decode_hexadecimal_string_bytes+0x44>
    45ba:	97 53       	subi	r25, 0x37	; 55
    45bc:	59 2f       	mov	r21, r25
    45be:	52 95       	swap	r21
    45c0:	50 7f       	andi	r21, 0xF0	; 240
    45c2:	03 c0       	rjmp	.+6      	; 0x45ca <decode_hexadecimal_string_bytes+0x4a>
    45c4:	59 2f       	mov	r21, r25
    45c6:	52 95       	swap	r21
    45c8:	50 7f       	andi	r21, 0xF0	; 240
    45ca:	2c 0f       	add	r18, r28
    45cc:	3d 1f       	adc	r19, r29
    45ce:	f9 01       	movw	r30, r18
    45d0:	91 81       	ldd	r25, Z+1	; 0x01
    45d2:	91 34       	cpi	r25, 0x41	; 65
    45d4:	10 f0       	brcs	.+4      	; 0x45da <decode_hexadecimal_string_bytes+0x5a>
    45d6:	97 53       	subi	r25, 0x37	; 55
    45d8:	01 c0       	rjmp	.+2      	; 0x45dc <decode_hexadecimal_string_bytes+0x5c>
    45da:	90 53       	subi	r25, 0x30	; 48
    45dc:	95 0f       	add	r25, r21
    45de:	f8 01       	movw	r30, r16
    45e0:	90 83       	st	Z, r25
    45e2:	8f 5f       	subi	r24, 0xFF	; 255
    45e4:	01 c0       	rjmp	.+2      	; 0x45e8 <decode_hexadecimal_string_bytes+0x68>
    45e6:	80 e0       	ldi	r24, 0x00	; 0
    45e8:	28 2f       	mov	r18, r24
    45ea:	22 0f       	add	r18, r18
    45ec:	48 2f       	mov	r20, r24
    45ee:	50 e0       	ldi	r21, 0x00	; 0
    45f0:	fe 01       	movw	r30, r28
    45f2:	01 90       	ld	r0, Z+
    45f4:	00 20       	and	r0, r0
    45f6:	e9 f7       	brne	.-6      	; 0x45f2 <decode_hexadecimal_string_bytes+0x72>
    45f8:	31 97       	sbiw	r30, 0x01	; 1
    45fa:	ec 1b       	sub	r30, r28
    45fc:	fd 0b       	sbc	r31, r29
    45fe:	4e 17       	cp	r20, r30
    4600:	5f 07       	cpc	r21, r31
    4602:	10 f4       	brcc	.+4      	; 0x4608 <decode_hexadecimal_string_bytes+0x88>
    4604:	86 13       	cpse	r24, r22
    4606:	ce cf       	rjmp	.-100    	; 0x45a4 <decode_hexadecimal_string_bytes+0x24>
    4608:	df 91       	pop	r29
    460a:	cf 91       	pop	r28
    460c:	1f 91       	pop	r17
    460e:	0f 91       	pop	r16
    4610:	08 95       	ret

00004612 <_serialCallBack>:
    4612:	80 91 3e 16 	lds	r24, 0x163E	; 0x80163e <crc_sum.1945>
    4616:	86 0f       	add	r24, r22
    4618:	80 93 3e 16 	sts	0x163E, r24	; 0x80163e <crc_sum.1945>
    461c:	90 91 41 16 	lds	r25, 0x1641	; 0x801641 <_mh_state>
    4620:	91 30       	cpi	r25, 0x01	; 1
    4622:	79 f0       	breq	.+30     	; 0x4642 <_serialCallBack+0x30>
    4624:	28 f0       	brcs	.+10     	; 0x4630 <_serialCallBack+0x1e>
    4626:	92 30       	cpi	r25, 0x02	; 2
    4628:	a9 f0       	breq	.+42     	; 0x4654 <_serialCallBack+0x42>
    462a:	93 30       	cpi	r25, 0x03	; 3
    462c:	19 f1       	breq	.+70     	; 0x4674 <_serialCallBack+0x62>
    462e:	08 95       	ret
    4630:	6f 3f       	cpi	r22, 0xFF	; 255
    4632:	09 f0       	breq	.+2      	; 0x4636 <_serialCallBack+0x24>
    4634:	48 c0       	rjmp	.+144    	; 0x46c6 <_serialCallBack+0xb4>
    4636:	10 92 3e 16 	sts	0x163E, r1	; 0x80163e <crc_sum.1945>
    463a:	81 e0       	ldi	r24, 0x01	; 1
    463c:	80 93 41 16 	sts	0x1641, r24	; 0x801641 <_mh_state>
    4640:	08 95       	ret
    4642:	66 38       	cpi	r22, 0x86	; 134
    4644:	09 f0       	breq	.+2      	; 0x4648 <_serialCallBack+0x36>
    4646:	3f c0       	rjmp	.+126    	; 0x46c6 <_serialCallBack+0xb4>
    4648:	10 92 3d 16 	sts	0x163D, r1	; 0x80163d <inDex.1943>
    464c:	82 e0       	ldi	r24, 0x02	; 2
    464e:	80 93 41 16 	sts	0x1641, r24	; 0x801641 <_mh_state>
    4652:	08 95       	ret
    4654:	e0 91 3d 16 	lds	r30, 0x163D	; 0x80163d <inDex.1943>
    4658:	81 e0       	ldi	r24, 0x01	; 1
    465a:	8e 0f       	add	r24, r30
    465c:	80 93 3d 16 	sts	0x163D, r24	; 0x80163d <inDex.1943>
    4660:	f0 e0       	ldi	r31, 0x00	; 0
    4662:	e5 5c       	subi	r30, 0xC5	; 197
    4664:	f9 4e       	sbci	r31, 0xE9	; 233
    4666:	60 83       	st	Z, r22
    4668:	82 30       	cpi	r24, 0x02	; 2
    466a:	69 f5       	brne	.+90     	; 0x46c6 <_serialCallBack+0xb4>
    466c:	83 e0       	ldi	r24, 0x03	; 3
    466e:	80 93 41 16 	sts	0x1641, r24	; 0x801641 <_mh_state>
    4672:	08 95       	ret
    4674:	90 91 3d 16 	lds	r25, 0x163D	; 0x80163d <inDex.1943>
    4678:	21 e0       	ldi	r18, 0x01	; 1
    467a:	29 0f       	add	r18, r25
    467c:	20 93 3d 16 	sts	0x163D, r18	; 0x80163d <inDex.1943>
    4680:	96 30       	cpi	r25, 0x06	; 6
    4682:	09 f5       	brne	.+66     	; 0x46c6 <_serialCallBack+0xb4>
    4684:	81 11       	cpse	r24, r1
    4686:	0e c0       	rjmp	.+28     	; 0x46a4 <_serialCallBack+0x92>
    4688:	eb e3       	ldi	r30, 0x3B	; 59
    468a:	f6 e1       	ldi	r31, 0x16	; 22
    468c:	80 81       	ld	r24, Z
    468e:	90 e0       	ldi	r25, 0x00	; 0
    4690:	98 2f       	mov	r25, r24
    4692:	88 27       	eor	r24, r24
    4694:	21 81       	ldd	r18, Z+1	; 0x01
    4696:	82 0f       	add	r24, r18
    4698:	91 1d       	adc	r25, r1
    469a:	90 93 43 16 	sts	0x1643, r25	; 0x801643 <_ppm+0x1>
    469e:	80 93 42 16 	sts	0x1642, r24	; 0x801642 <_ppm>
    46a2:	04 c0       	rjmp	.+8      	; 0x46ac <_serialCallBack+0x9a>
    46a4:	10 92 43 16 	sts	0x1643, r1	; 0x801643 <_ppm+0x1>
    46a8:	10 92 42 16 	sts	0x1642, r1	; 0x801642 <_ppm>
    46ac:	10 92 41 16 	sts	0x1641, r1	; 0x801641 <_mh_state>
    46b0:	e0 91 3f 16 	lds	r30, 0x163F	; 0x80163f <_appCallBack>
    46b4:	f0 91 40 16 	lds	r31, 0x1640	; 0x801640 <_appCallBack+0x1>
    46b8:	30 97       	sbiw	r30, 0x00	; 0
    46ba:	29 f0       	breq	.+10     	; 0x46c6 <_serialCallBack+0xb4>
    46bc:	80 91 42 16 	lds	r24, 0x1642	; 0x801642 <_ppm>
    46c0:	90 91 43 16 	lds	r25, 0x1643	; 0x801643 <_ppm+0x1>
    46c4:	19 95       	eicall
    46c6:	08 95       	ret

000046c8 <mh_z19_initialise>:
    46c8:	8f 92       	push	r8
    46ca:	9f 92       	push	r9
    46cc:	af 92       	push	r10
    46ce:	cf 92       	push	r12
    46d0:	ef 92       	push	r14
    46d2:	0f 93       	push	r16
    46d4:	0f 2e       	mov	r0, r31
    46d6:	f9 e0       	ldi	r31, 0x09	; 9
    46d8:	8f 2e       	mov	r8, r31
    46da:	f3 e2       	ldi	r31, 0x23	; 35
    46dc:	9f 2e       	mov	r9, r31
    46de:	f0 2d       	mov	r31, r0
    46e0:	68 94       	set
    46e2:	aa 24       	eor	r10, r10
    46e4:	a4 f8       	bld	r10, 4
    46e6:	68 94       	set
    46e8:	cc 24       	eor	r12, r12
    46ea:	c4 f8       	bld	r12, 4
    46ec:	e1 2c       	mov	r14, r1
    46ee:	00 e0       	ldi	r16, 0x00	; 0
    46f0:	23 e0       	ldi	r18, 0x03	; 3
    46f2:	40 e8       	ldi	r20, 0x80	; 128
    46f4:	55 e2       	ldi	r21, 0x25	; 37
    46f6:	60 e0       	ldi	r22, 0x00	; 0
    46f8:	70 e0       	ldi	r23, 0x00	; 0
    46fa:	50 d0       	rcall	.+160    	; 0x479c <serial_create>
    46fc:	90 93 45 16 	sts	0x1645, r25	; 0x801645 <_serial+0x1>
    4700:	80 93 44 16 	sts	0x1644, r24	; 0x801644 <_serial>
    4704:	0f 91       	pop	r16
    4706:	ef 90       	pop	r14
    4708:	cf 90       	pop	r12
    470a:	af 90       	pop	r10
    470c:	9f 90       	pop	r9
    470e:	8f 90       	pop	r8
    4710:	08 95       	ret

00004712 <mh_z19_injectCallBack>:
    4712:	90 93 40 16 	sts	0x1640, r25	; 0x801640 <_appCallBack+0x1>
    4716:	80 93 3f 16 	sts	0x163F, r24	; 0x80163f <_appCallBack>
    471a:	08 95       	ret

0000471c <mh_z19_takeMeassuring>:
    471c:	cf 93       	push	r28
    471e:	df 93       	push	r29
    4720:	cd b7       	in	r28, 0x3d	; 61
    4722:	de b7       	in	r29, 0x3e	; 62
    4724:	29 97       	sbiw	r28, 0x09	; 9
    4726:	0f b6       	in	r0, 0x3f	; 63
    4728:	f8 94       	cli
    472a:	de bf       	out	0x3e, r29	; 62
    472c:	0f be       	out	0x3f, r0	; 63
    472e:	cd bf       	out	0x3d, r28	; 61
    4730:	89 e0       	ldi	r24, 0x09	; 9
    4732:	e2 e4       	ldi	r30, 0x42	; 66
    4734:	f2 e0       	ldi	r31, 0x02	; 2
    4736:	9e 01       	movw	r18, r28
    4738:	2f 5f       	subi	r18, 0xFF	; 255
    473a:	3f 4f       	sbci	r19, 0xFF	; 255
    473c:	d9 01       	movw	r26, r18
    473e:	01 90       	ld	r0, Z+
    4740:	0d 92       	st	X+, r0
    4742:	8a 95       	dec	r24
    4744:	e1 f7       	brne	.-8      	; 0x473e <mh_z19_takeMeassuring+0x22>
    4746:	10 92 43 16 	sts	0x1643, r1	; 0x801643 <_ppm+0x1>
    474a:	10 92 42 16 	sts	0x1642, r1	; 0x801642 <_ppm>
    474e:	80 91 44 16 	lds	r24, 0x1644	; 0x801644 <_serial>
    4752:	90 91 45 16 	lds	r25, 0x1645	; 0x801645 <_serial+0x1>
    4756:	00 97       	sbiw	r24, 0x00	; 0
    4758:	31 f0       	breq	.+12     	; 0x4766 <mh_z19_takeMeassuring+0x4a>
    475a:	42 2f       	mov	r20, r18
    475c:	53 2f       	mov	r21, r19
    475e:	69 e0       	ldi	r22, 0x09	; 9
    4760:	ea d0       	rcall	.+468    	; 0x4936 <serial_sendBytes>
    4762:	80 e0       	ldi	r24, 0x00	; 0
    4764:	01 c0       	rjmp	.+2      	; 0x4768 <mh_z19_takeMeassuring+0x4c>
    4766:	82 e0       	ldi	r24, 0x02	; 2
    4768:	29 96       	adiw	r28, 0x09	; 9
    476a:	0f b6       	in	r0, 0x3f	; 63
    476c:	f8 94       	cli
    476e:	de bf       	out	0x3e, r29	; 62
    4770:	0f be       	out	0x3f, r0	; 63
    4772:	cd bf       	out	0x3d, r28	; 61
    4774:	df 91       	pop	r29
    4776:	cf 91       	pop	r28
    4778:	08 95       	ret

0000477a <mh_z19_getCo2Ppm>:
    477a:	20 91 42 16 	lds	r18, 0x1642	; 0x801642 <_ppm>
    477e:	30 91 43 16 	lds	r19, 0x1643	; 0x801643 <_ppm+0x1>
    4782:	21 15       	cp	r18, r1
    4784:	31 05       	cpc	r19, r1
    4786:	29 f4       	brne	.+10     	; 0x4792 <mh_z19_getCo2Ppm+0x18>
    4788:	fc 01       	movw	r30, r24
    478a:	11 82       	std	Z+1, r1	; 0x01
    478c:	10 82       	st	Z, r1
    478e:	81 e0       	ldi	r24, 0x01	; 1
    4790:	08 95       	ret
    4792:	fc 01       	movw	r30, r24
    4794:	31 83       	std	Z+1, r19	; 0x01
    4796:	20 83       	st	Z, r18
    4798:	80 e0       	ldi	r24, 0x00	; 0
    479a:	08 95       	ret

0000479c <serial_create>:
    479c:	2f 92       	push	r2
    479e:	3f 92       	push	r3
    47a0:	4f 92       	push	r4
    47a2:	5f 92       	push	r5
    47a4:	6f 92       	push	r6
    47a6:	7f 92       	push	r7
    47a8:	8f 92       	push	r8
    47aa:	9f 92       	push	r9
    47ac:	af 92       	push	r10
    47ae:	cf 92       	push	r12
    47b0:	ef 92       	push	r14
    47b2:	ff 92       	push	r15
    47b4:	0f 93       	push	r16
    47b6:	1f 93       	push	r17
    47b8:	cf 93       	push	r28
    47ba:	df 93       	push	r29
    47bc:	cd b7       	in	r28, 0x3d	; 61
    47be:	de b7       	in	r29, 0x3e	; 62
    47c0:	f8 2e       	mov	r15, r24
    47c2:	2a 01       	movw	r4, r20
    47c4:	3b 01       	movw	r6, r22
    47c6:	88 e0       	ldi	r24, 0x08	; 8
    47c8:	90 e0       	ldi	r25, 0x00	; 0
    47ca:	0e 94 0f 31 	call	0x621e	; 0x621e <malloc>
    47ce:	8c 01       	movw	r16, r24
    47d0:	8f 2d       	mov	r24, r15
    47d2:	90 e0       	ldi	r25, 0x00	; 0
    47d4:	fc 01       	movw	r30, r24
    47d6:	ee 0f       	add	r30, r30
    47d8:	ff 1f       	adc	r31, r31
    47da:	ea 5b       	subi	r30, 0xBA	; 186
    47dc:	f9 4e       	sbci	r31, 0xE9	; 233
    47de:	11 83       	std	Z+1, r17	; 0x01
    47e0:	00 83       	st	Z, r16
    47e2:	01 15       	cp	r16, r1
    47e4:	11 05       	cpc	r17, r1
    47e6:	09 f4       	brne	.+2      	; 0x47ea <serial_create+0x4e>
    47e8:	69 c0       	rjmp	.+210    	; 0x48bc <serial_create+0x120>
    47ea:	88 0f       	add	r24, r24
    47ec:	99 1f       	adc	r25, r25
    47ee:	fc 01       	movw	r30, r24
    47f0:	e5 5f       	subi	r30, 0xF5	; 245
    47f2:	fd 4f       	sbci	r31, 0xFD	; 253
    47f4:	80 81       	ld	r24, Z
    47f6:	91 81       	ldd	r25, Z+1	; 0x01
    47f8:	d8 01       	movw	r26, r16
    47fa:	8d 93       	st	X+, r24
    47fc:	9c 93       	st	X, r25
    47fe:	6c 2d       	mov	r22, r12
    4800:	70 e0       	ldi	r23, 0x00	; 0
    4802:	84 e0       	ldi	r24, 0x04	; 4
    4804:	90 e0       	ldi	r25, 0x00	; 0
    4806:	0e 94 f5 30 	call	0x61ea	; 0x61ea <calloc>
    480a:	1c 01       	movw	r2, r24
    480c:	61 e0       	ldi	r22, 0x01	; 1
    480e:	70 e0       	ldi	r23, 0x00	; 0
    4810:	86 e0       	ldi	r24, 0x06	; 6
    4812:	90 e0       	ldi	r25, 0x00	; 0
    4814:	0e 94 f5 30 	call	0x61ea	; 0x61ea <calloc>
    4818:	7c 01       	movw	r14, r24
    481a:	4c 2d       	mov	r20, r12
    481c:	b1 01       	movw	r22, r2
    481e:	f1 d6       	rcall	.+3554   	; 0x5602 <fifo_init>
    4820:	f8 01       	movw	r30, r16
    4822:	f5 82       	std	Z+5, r15	; 0x05
    4824:	e4 82       	std	Z+4, r14	; 0x04
    4826:	6a 2d       	mov	r22, r10
    4828:	70 e0       	ldi	r23, 0x00	; 0
    482a:	84 e0       	ldi	r24, 0x04	; 4
    482c:	90 e0       	ldi	r25, 0x00	; 0
    482e:	0e 94 f5 30 	call	0x61ea	; 0x61ea <calloc>
    4832:	1c 01       	movw	r2, r24
    4834:	61 e0       	ldi	r22, 0x01	; 1
    4836:	70 e0       	ldi	r23, 0x00	; 0
    4838:	86 e0       	ldi	r24, 0x06	; 6
    483a:	90 e0       	ldi	r25, 0x00	; 0
    483c:	0e 94 f5 30 	call	0x61ea	; 0x61ea <calloc>
    4840:	7c 01       	movw	r14, r24
    4842:	4a 2d       	mov	r20, r10
    4844:	b1 01       	movw	r22, r2
    4846:	dd d6       	rcall	.+3514   	; 0x5602 <fifo_init>
    4848:	d8 01       	movw	r26, r16
    484a:	13 96       	adiw	r26, 0x03	; 3
    484c:	fc 92       	st	X, r15
    484e:	ee 92       	st	-X, r14
    4850:	12 97       	sbiw	r26, 0x02	; 2
    4852:	17 96       	adiw	r26, 0x07	; 7
    4854:	9c 92       	st	X, r9
    4856:	8e 92       	st	-X, r8
    4858:	16 97       	sbiw	r26, 0x06	; 6
    485a:	ff b6       	in	r15, 0x3f	; 63
    485c:	f8 94       	cli
    485e:	ed 91       	ld	r30, X+
    4860:	fc 91       	ld	r31, X
    4862:	11 97       	sbiw	r26, 0x01	; 1
    4864:	36 97       	sbiw	r30, 0x06	; 6
    4866:	80 81       	ld	r24, Z
    4868:	82 60       	ori	r24, 0x02	; 2
    486a:	80 83       	st	Z, r24
    486c:	8d 90       	ld	r8, X+
    486e:	9c 90       	ld	r9, X
    4870:	c3 01       	movw	r24, r6
    4872:	b2 01       	movw	r22, r4
    4874:	e0 d7       	rcall	.+4032   	; 0x5836 <__floatunsisf>
    4876:	20 e0       	ldi	r18, 0x00	; 0
    4878:	30 e0       	ldi	r19, 0x00	; 0
    487a:	40 e0       	ldi	r20, 0x00	; 0
    487c:	51 e4       	ldi	r21, 0x41	; 65
    487e:	0e 94 a9 2c 	call	0x5952	; 0x5952 <__mulsf3>
    4882:	9b 01       	movw	r18, r22
    4884:	ac 01       	movw	r20, r24
    4886:	60 e0       	ldi	r22, 0x00	; 0
    4888:	74 e2       	ldi	r23, 0x24	; 36
    488a:	84 e7       	ldi	r24, 0x74	; 116
    488c:	9b e4       	ldi	r25, 0x4B	; 75
    488e:	3a d7       	rcall	.+3700   	; 0x5704 <__divsf3>
    4890:	20 e0       	ldi	r18, 0x00	; 0
    4892:	30 e0       	ldi	r19, 0x00	; 0
    4894:	40 e8       	ldi	r20, 0x80	; 128
    4896:	5f e3       	ldi	r21, 0x3F	; 63
    4898:	d0 d6       	rcall	.+3488   	; 0x563a <__subsf3>
    489a:	a1 d7       	rcall	.+3906   	; 0x57de <__fixunssfsi>
    489c:	f4 01       	movw	r30, r8
    489e:	32 97       	sbiw	r30, 0x02	; 2
    48a0:	60 83       	st	Z, r22
    48a2:	d8 01       	movw	r26, r16
    48a4:	ed 91       	ld	r30, X+
    48a6:	fc 91       	ld	r31, X
    48a8:	11 97       	sbiw	r26, 0x01	; 1
    48aa:	35 97       	sbiw	r30, 0x05	; 5
    48ac:	88 e9       	ldi	r24, 0x98	; 152
    48ae:	80 83       	st	Z, r24
    48b0:	ed 91       	ld	r30, X+
    48b2:	fc 91       	ld	r31, X
    48b4:	34 97       	sbiw	r30, 0x04	; 4
    48b6:	86 e0       	ldi	r24, 0x06	; 6
    48b8:	80 83       	st	Z, r24
    48ba:	ff be       	out	0x3f, r15	; 63
    48bc:	c8 01       	movw	r24, r16
    48be:	df 91       	pop	r29
    48c0:	cf 91       	pop	r28
    48c2:	1f 91       	pop	r17
    48c4:	0f 91       	pop	r16
    48c6:	ff 90       	pop	r15
    48c8:	ef 90       	pop	r14
    48ca:	cf 90       	pop	r12
    48cc:	af 90       	pop	r10
    48ce:	9f 90       	pop	r9
    48d0:	8f 90       	pop	r8
    48d2:	7f 90       	pop	r7
    48d4:	6f 90       	pop	r6
    48d6:	5f 90       	pop	r5
    48d8:	4f 90       	pop	r4
    48da:	3f 90       	pop	r3
    48dc:	2f 90       	pop	r2
    48de:	08 95       	ret

000048e0 <serial_sendByte>:
    48e0:	cf 93       	push	r28
    48e2:	df 93       	push	r29
    48e4:	dc 01       	movw	r26, r24
    48e6:	89 2b       	or	r24, r25
    48e8:	01 f1       	breq	.+64     	; 0x492a <serial_sendByte+0x4a>
    48ea:	12 96       	adiw	r26, 0x02	; 2
    48ec:	ed 91       	ld	r30, X+
    48ee:	fc 91       	ld	r31, X
    48f0:	13 97       	sbiw	r26, 0x03	; 3
    48f2:	93 81       	ldd	r25, Z+3	; 0x03
    48f4:	82 81       	ldd	r24, Z+2	; 0x02
    48f6:	25 81       	ldd	r18, Z+5	; 0x05
    48f8:	98 1b       	sub	r25, r24
    48fa:	92 23       	and	r25, r18
    48fc:	84 81       	ldd	r24, Z+4	; 0x04
    48fe:	98 17       	cp	r25, r24
    4900:	b1 f0       	breq	.+44     	; 0x492e <serial_sendByte+0x4e>
    4902:	83 81       	ldd	r24, Z+3	; 0x03
    4904:	26 95       	lsr	r18
    4906:	28 23       	and	r18, r24
    4908:	c0 81       	ld	r28, Z
    490a:	d1 81       	ldd	r29, Z+1	; 0x01
    490c:	c2 0f       	add	r28, r18
    490e:	d1 1d       	adc	r29, r1
    4910:	68 83       	st	Y, r22
    4912:	8f 5f       	subi	r24, 0xFF	; 255
    4914:	95 81       	ldd	r25, Z+5	; 0x05
    4916:	89 23       	and	r24, r25
    4918:	83 83       	std	Z+3, r24	; 0x03
    491a:	ed 91       	ld	r30, X+
    491c:	fc 91       	ld	r31, X
    491e:	35 97       	sbiw	r30, 0x05	; 5
    4920:	80 81       	ld	r24, Z
    4922:	80 62       	ori	r24, 0x20	; 32
    4924:	80 83       	st	Z, r24
    4926:	80 e0       	ldi	r24, 0x00	; 0
    4928:	03 c0       	rjmp	.+6      	; 0x4930 <serial_sendByte+0x50>
    492a:	81 e0       	ldi	r24, 0x01	; 1
    492c:	01 c0       	rjmp	.+2      	; 0x4930 <serial_sendByte+0x50>
    492e:	82 e0       	ldi	r24, 0x02	; 2
    4930:	df 91       	pop	r29
    4932:	cf 91       	pop	r28
    4934:	08 95       	ret

00004936 <serial_sendBytes>:
    4936:	ef 92       	push	r14
    4938:	ff 92       	push	r15
    493a:	0f 93       	push	r16
    493c:	1f 93       	push	r17
    493e:	cf 93       	push	r28
    4940:	df 93       	push	r29
    4942:	7c 01       	movw	r14, r24
    4944:	00 97       	sbiw	r24, 0x00	; 0
    4946:	09 f4       	brne	.+2      	; 0x494a <serial_sendBytes+0x14>
    4948:	41 c0       	rjmp	.+130    	; 0x49cc <serial_sendBytes+0x96>
    494a:	dc 01       	movw	r26, r24
    494c:	12 96       	adiw	r26, 0x02	; 2
    494e:	ed 91       	ld	r30, X+
    4950:	fc 91       	ld	r31, X
    4952:	13 97       	sbiw	r26, 0x03	; 3
    4954:	93 81       	ldd	r25, Z+3	; 0x03
    4956:	82 81       	ldd	r24, Z+2	; 0x02
    4958:	98 1b       	sub	r25, r24
    495a:	85 81       	ldd	r24, Z+5	; 0x05
    495c:	98 23       	and	r25, r24
    495e:	84 81       	ldd	r24, Z+4	; 0x04
    4960:	89 1b       	sub	r24, r25
    4962:	86 17       	cp	r24, r22
    4964:	a8 f1       	brcs	.+106    	; 0x49d0 <serial_sendBytes+0x9a>
    4966:	66 23       	and	r22, r22
    4968:	41 f1       	breq	.+80     	; 0x49ba <serial_sendBytes+0x84>
    496a:	84 2f       	mov	r24, r20
    496c:	95 2f       	mov	r25, r21
    496e:	dc 01       	movw	r26, r24
    4970:	61 50       	subi	r22, 0x01	; 1
    4972:	46 2f       	mov	r20, r22
    4974:	50 e0       	ldi	r21, 0x00	; 0
    4976:	4f 5f       	subi	r20, 0xFF	; 255
    4978:	5f 4f       	sbci	r21, 0xFF	; 255
    497a:	48 0f       	add	r20, r24
    497c:	59 1f       	adc	r21, r25
    497e:	e7 01       	movw	r28, r14
    4980:	ea 81       	ldd	r30, Y+2	; 0x02
    4982:	fb 81       	ldd	r31, Y+3	; 0x03
    4984:	93 81       	ldd	r25, Z+3	; 0x03
    4986:	82 81       	ldd	r24, Z+2	; 0x02
    4988:	25 81       	ldd	r18, Z+5	; 0x05
    498a:	98 1b       	sub	r25, r24
    498c:	92 23       	and	r25, r18
    498e:	84 81       	ldd	r24, Z+4	; 0x04
    4990:	98 17       	cp	r25, r24
    4992:	79 f0       	breq	.+30     	; 0x49b2 <serial_sendBytes+0x7c>
    4994:	8c 91       	ld	r24, X
    4996:	93 81       	ldd	r25, Z+3	; 0x03
    4998:	26 95       	lsr	r18
    499a:	29 23       	and	r18, r25
    499c:	60 81       	ld	r22, Z
    499e:	71 81       	ldd	r23, Z+1	; 0x01
    49a0:	8b 01       	movw	r16, r22
    49a2:	02 0f       	add	r16, r18
    49a4:	11 1d       	adc	r17, r1
    49a6:	e8 01       	movw	r28, r16
    49a8:	88 83       	st	Y, r24
    49aa:	9f 5f       	subi	r25, 0xFF	; 255
    49ac:	85 81       	ldd	r24, Z+5	; 0x05
    49ae:	98 23       	and	r25, r24
    49b0:	93 83       	std	Z+3, r25	; 0x03
    49b2:	11 96       	adiw	r26, 0x01	; 1
    49b4:	a4 17       	cp	r26, r20
    49b6:	b5 07       	cpc	r27, r21
    49b8:	11 f7       	brne	.-60     	; 0x497e <serial_sendBytes+0x48>
    49ba:	d7 01       	movw	r26, r14
    49bc:	ed 91       	ld	r30, X+
    49be:	fc 91       	ld	r31, X
    49c0:	35 97       	sbiw	r30, 0x05	; 5
    49c2:	80 81       	ld	r24, Z
    49c4:	80 62       	ori	r24, 0x20	; 32
    49c6:	80 83       	st	Z, r24
    49c8:	80 e0       	ldi	r24, 0x00	; 0
    49ca:	03 c0       	rjmp	.+6      	; 0x49d2 <serial_sendBytes+0x9c>
    49cc:	81 e0       	ldi	r24, 0x01	; 1
    49ce:	01 c0       	rjmp	.+2      	; 0x49d2 <serial_sendBytes+0x9c>
    49d0:	82 e0       	ldi	r24, 0x02	; 2
    49d2:	df 91       	pop	r29
    49d4:	cf 91       	pop	r28
    49d6:	1f 91       	pop	r17
    49d8:	0f 91       	pop	r16
    49da:	ff 90       	pop	r15
    49dc:	ef 90       	pop	r14
    49de:	08 95       	ret

000049e0 <serial_getByte>:
    49e0:	00 97       	sbiw	r24, 0x00	; 0
    49e2:	d1 f0       	breq	.+52     	; 0x4a18 <serial_getByte+0x38>
    49e4:	dc 01       	movw	r26, r24
    49e6:	14 96       	adiw	r26, 0x04	; 4
    49e8:	ed 91       	ld	r30, X+
    49ea:	fc 91       	ld	r31, X
    49ec:	15 97       	sbiw	r26, 0x05	; 5
    49ee:	93 81       	ldd	r25, Z+3	; 0x03
    49f0:	82 81       	ldd	r24, Z+2	; 0x02
    49f2:	98 17       	cp	r25, r24
    49f4:	99 f0       	breq	.+38     	; 0x4a1c <serial_getByte+0x3c>
    49f6:	92 81       	ldd	r25, Z+2	; 0x02
    49f8:	85 81       	ldd	r24, Z+5	; 0x05
    49fa:	86 95       	lsr	r24
    49fc:	89 23       	and	r24, r25
    49fe:	a0 81       	ld	r26, Z
    4a00:	b1 81       	ldd	r27, Z+1	; 0x01
    4a02:	a8 0f       	add	r26, r24
    4a04:	b1 1d       	adc	r27, r1
    4a06:	8c 91       	ld	r24, X
    4a08:	db 01       	movw	r26, r22
    4a0a:	8c 93       	st	X, r24
    4a0c:	9f 5f       	subi	r25, 0xFF	; 255
    4a0e:	85 81       	ldd	r24, Z+5	; 0x05
    4a10:	98 23       	and	r25, r24
    4a12:	92 83       	std	Z+2, r25	; 0x02
    4a14:	80 e0       	ldi	r24, 0x00	; 0
    4a16:	08 95       	ret
    4a18:	81 e0       	ldi	r24, 0x01	; 1
    4a1a:	08 95       	ret
    4a1c:	83 e0       	ldi	r24, 0x03	; 3
    4a1e:	08 95       	ret

00004a20 <__vector_25>:
    4a20:	1f 92       	push	r1
    4a22:	0f 92       	push	r0
    4a24:	0f b6       	in	r0, 0x3f	; 63
    4a26:	0f 92       	push	r0
    4a28:	11 24       	eor	r1, r1
    4a2a:	0b b6       	in	r0, 0x3b	; 59
    4a2c:	0f 92       	push	r0
    4a2e:	2f 93       	push	r18
    4a30:	3f 93       	push	r19
    4a32:	4f 93       	push	r20
    4a34:	5f 93       	push	r21
    4a36:	6f 93       	push	r22
    4a38:	7f 93       	push	r23
    4a3a:	8f 93       	push	r24
    4a3c:	9f 93       	push	r25
    4a3e:	af 93       	push	r26
    4a40:	bf 93       	push	r27
    4a42:	cf 93       	push	r28
    4a44:	df 93       	push	r29
    4a46:	ef 93       	push	r30
    4a48:	ff 93       	push	r31
    4a4a:	a0 91 46 16 	lds	r26, 0x1646	; 0x801646 <_ser_handle>
    4a4e:	b0 91 47 16 	lds	r27, 0x1647	; 0x801647 <_ser_handle+0x1>
    4a52:	10 97       	sbiw	r26, 0x00	; 0
    4a54:	11 f1       	breq	.+68     	; 0x4a9a <__vector_25+0x7a>
    4a56:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4a5a:	14 96       	adiw	r26, 0x04	; 4
    4a5c:	ed 91       	ld	r30, X+
    4a5e:	fc 91       	ld	r31, X
    4a60:	15 97       	sbiw	r26, 0x05	; 5
    4a62:	93 81       	ldd	r25, Z+3	; 0x03
    4a64:	82 81       	ldd	r24, Z+2	; 0x02
    4a66:	25 81       	ldd	r18, Z+5	; 0x05
    4a68:	98 1b       	sub	r25, r24
    4a6a:	92 23       	and	r25, r18
    4a6c:	84 81       	ldd	r24, Z+4	; 0x04
    4a6e:	98 17       	cp	r25, r24
    4a70:	61 f0       	breq	.+24     	; 0x4a8a <__vector_25+0x6a>
    4a72:	83 81       	ldd	r24, Z+3	; 0x03
    4a74:	26 95       	lsr	r18
    4a76:	28 23       	and	r18, r24
    4a78:	c0 81       	ld	r28, Z
    4a7a:	d1 81       	ldd	r29, Z+1	; 0x01
    4a7c:	c2 0f       	add	r28, r18
    4a7e:	d1 1d       	adc	r29, r1
    4a80:	68 83       	st	Y, r22
    4a82:	8f 5f       	subi	r24, 0xFF	; 255
    4a84:	95 81       	ldd	r25, Z+5	; 0x05
    4a86:	89 23       	and	r24, r25
    4a88:	83 83       	std	Z+3, r24	; 0x03
    4a8a:	16 96       	adiw	r26, 0x06	; 6
    4a8c:	ed 91       	ld	r30, X+
    4a8e:	fc 91       	ld	r31, X
    4a90:	17 97       	sbiw	r26, 0x07	; 7
    4a92:	30 97       	sbiw	r30, 0x00	; 0
    4a94:	11 f0       	breq	.+4      	; 0x4a9a <__vector_25+0x7a>
    4a96:	cd 01       	movw	r24, r26
    4a98:	19 95       	eicall
    4a9a:	ff 91       	pop	r31
    4a9c:	ef 91       	pop	r30
    4a9e:	df 91       	pop	r29
    4aa0:	cf 91       	pop	r28
    4aa2:	bf 91       	pop	r27
    4aa4:	af 91       	pop	r26
    4aa6:	9f 91       	pop	r25
    4aa8:	8f 91       	pop	r24
    4aaa:	7f 91       	pop	r23
    4aac:	6f 91       	pop	r22
    4aae:	5f 91       	pop	r21
    4ab0:	4f 91       	pop	r20
    4ab2:	3f 91       	pop	r19
    4ab4:	2f 91       	pop	r18
    4ab6:	0f 90       	pop	r0
    4ab8:	0b be       	out	0x3b, r0	; 59
    4aba:	0f 90       	pop	r0
    4abc:	0f be       	out	0x3f, r0	; 63
    4abe:	0f 90       	pop	r0
    4ac0:	1f 90       	pop	r1
    4ac2:	18 95       	reti

00004ac4 <__vector_26>:
    4ac4:	1f 92       	push	r1
    4ac6:	0f 92       	push	r0
    4ac8:	0f b6       	in	r0, 0x3f	; 63
    4aca:	0f 92       	push	r0
    4acc:	11 24       	eor	r1, r1
    4ace:	0b b6       	in	r0, 0x3b	; 59
    4ad0:	0f 92       	push	r0
    4ad2:	2f 93       	push	r18
    4ad4:	8f 93       	push	r24
    4ad6:	9f 93       	push	r25
    4ad8:	af 93       	push	r26
    4ada:	bf 93       	push	r27
    4adc:	ef 93       	push	r30
    4ade:	ff 93       	push	r31
    4ae0:	e0 91 46 16 	lds	r30, 0x1646	; 0x801646 <_ser_handle>
    4ae4:	f0 91 47 16 	lds	r31, 0x1647	; 0x801647 <_ser_handle+0x1>
    4ae8:	30 97       	sbiw	r30, 0x00	; 0
    4aea:	b9 f0       	breq	.+46     	; 0x4b1a <__vector_26+0x56>
    4aec:	02 80       	ldd	r0, Z+2	; 0x02
    4aee:	f3 81       	ldd	r31, Z+3	; 0x03
    4af0:	e0 2d       	mov	r30, r0
    4af2:	93 81       	ldd	r25, Z+3	; 0x03
    4af4:	82 81       	ldd	r24, Z+2	; 0x02
    4af6:	98 17       	cp	r25, r24
    4af8:	b1 f0       	breq	.+44     	; 0x4b26 <__vector_26+0x62>
    4afa:	92 81       	ldd	r25, Z+2	; 0x02
    4afc:	85 81       	ldd	r24, Z+5	; 0x05
    4afe:	28 2f       	mov	r18, r24
    4b00:	26 95       	lsr	r18
    4b02:	29 23       	and	r18, r25
    4b04:	a0 81       	ld	r26, Z
    4b06:	b1 81       	ldd	r27, Z+1	; 0x01
    4b08:	a2 0f       	add	r26, r18
    4b0a:	b1 1d       	adc	r27, r1
    4b0c:	2c 91       	ld	r18, X
    4b0e:	9f 5f       	subi	r25, 0xFF	; 255
    4b10:	89 23       	and	r24, r25
    4b12:	82 83       	std	Z+2, r24	; 0x02
    4b14:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4b18:	0b c0       	rjmp	.+22     	; 0x4b30 <__vector_26+0x6c>
    4b1a:	e1 ec       	ldi	r30, 0xC1	; 193
    4b1c:	f0 e0       	ldi	r31, 0x00	; 0
    4b1e:	80 81       	ld	r24, Z
    4b20:	8f 7d       	andi	r24, 0xDF	; 223
    4b22:	80 83       	st	Z, r24
    4b24:	05 c0       	rjmp	.+10     	; 0x4b30 <__vector_26+0x6c>
    4b26:	e1 ec       	ldi	r30, 0xC1	; 193
    4b28:	f0 e0       	ldi	r31, 0x00	; 0
    4b2a:	80 81       	ld	r24, Z
    4b2c:	8f 7d       	andi	r24, 0xDF	; 223
    4b2e:	80 83       	st	Z, r24
    4b30:	ff 91       	pop	r31
    4b32:	ef 91       	pop	r30
    4b34:	bf 91       	pop	r27
    4b36:	af 91       	pop	r26
    4b38:	9f 91       	pop	r25
    4b3a:	8f 91       	pop	r24
    4b3c:	2f 91       	pop	r18
    4b3e:	0f 90       	pop	r0
    4b40:	0b be       	out	0x3b, r0	; 59
    4b42:	0f 90       	pop	r0
    4b44:	0f be       	out	0x3f, r0	; 63
    4b46:	0f 90       	pop	r0
    4b48:	1f 90       	pop	r1
    4b4a:	18 95       	reti

00004b4c <__vector_36>:
    4b4c:	1f 92       	push	r1
    4b4e:	0f 92       	push	r0
    4b50:	0f b6       	in	r0, 0x3f	; 63
    4b52:	0f 92       	push	r0
    4b54:	11 24       	eor	r1, r1
    4b56:	0b b6       	in	r0, 0x3b	; 59
    4b58:	0f 92       	push	r0
    4b5a:	2f 93       	push	r18
    4b5c:	3f 93       	push	r19
    4b5e:	4f 93       	push	r20
    4b60:	5f 93       	push	r21
    4b62:	6f 93       	push	r22
    4b64:	7f 93       	push	r23
    4b66:	8f 93       	push	r24
    4b68:	9f 93       	push	r25
    4b6a:	af 93       	push	r26
    4b6c:	bf 93       	push	r27
    4b6e:	cf 93       	push	r28
    4b70:	df 93       	push	r29
    4b72:	ef 93       	push	r30
    4b74:	ff 93       	push	r31
    4b76:	a0 91 48 16 	lds	r26, 0x1648	; 0x801648 <_ser_handle+0x2>
    4b7a:	b0 91 49 16 	lds	r27, 0x1649	; 0x801649 <_ser_handle+0x3>
    4b7e:	10 97       	sbiw	r26, 0x00	; 0
    4b80:	11 f1       	breq	.+68     	; 0x4bc6 <__vector_36+0x7a>
    4b82:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4b86:	14 96       	adiw	r26, 0x04	; 4
    4b88:	ed 91       	ld	r30, X+
    4b8a:	fc 91       	ld	r31, X
    4b8c:	15 97       	sbiw	r26, 0x05	; 5
    4b8e:	93 81       	ldd	r25, Z+3	; 0x03
    4b90:	82 81       	ldd	r24, Z+2	; 0x02
    4b92:	25 81       	ldd	r18, Z+5	; 0x05
    4b94:	98 1b       	sub	r25, r24
    4b96:	92 23       	and	r25, r18
    4b98:	84 81       	ldd	r24, Z+4	; 0x04
    4b9a:	98 17       	cp	r25, r24
    4b9c:	61 f0       	breq	.+24     	; 0x4bb6 <__vector_36+0x6a>
    4b9e:	83 81       	ldd	r24, Z+3	; 0x03
    4ba0:	26 95       	lsr	r18
    4ba2:	28 23       	and	r18, r24
    4ba4:	c0 81       	ld	r28, Z
    4ba6:	d1 81       	ldd	r29, Z+1	; 0x01
    4ba8:	c2 0f       	add	r28, r18
    4baa:	d1 1d       	adc	r29, r1
    4bac:	68 83       	st	Y, r22
    4bae:	8f 5f       	subi	r24, 0xFF	; 255
    4bb0:	95 81       	ldd	r25, Z+5	; 0x05
    4bb2:	89 23       	and	r24, r25
    4bb4:	83 83       	std	Z+3, r24	; 0x03
    4bb6:	16 96       	adiw	r26, 0x06	; 6
    4bb8:	ed 91       	ld	r30, X+
    4bba:	fc 91       	ld	r31, X
    4bbc:	17 97       	sbiw	r26, 0x07	; 7
    4bbe:	30 97       	sbiw	r30, 0x00	; 0
    4bc0:	11 f0       	breq	.+4      	; 0x4bc6 <__vector_36+0x7a>
    4bc2:	cd 01       	movw	r24, r26
    4bc4:	19 95       	eicall
    4bc6:	ff 91       	pop	r31
    4bc8:	ef 91       	pop	r30
    4bca:	df 91       	pop	r29
    4bcc:	cf 91       	pop	r28
    4bce:	bf 91       	pop	r27
    4bd0:	af 91       	pop	r26
    4bd2:	9f 91       	pop	r25
    4bd4:	8f 91       	pop	r24
    4bd6:	7f 91       	pop	r23
    4bd8:	6f 91       	pop	r22
    4bda:	5f 91       	pop	r21
    4bdc:	4f 91       	pop	r20
    4bde:	3f 91       	pop	r19
    4be0:	2f 91       	pop	r18
    4be2:	0f 90       	pop	r0
    4be4:	0b be       	out	0x3b, r0	; 59
    4be6:	0f 90       	pop	r0
    4be8:	0f be       	out	0x3f, r0	; 63
    4bea:	0f 90       	pop	r0
    4bec:	1f 90       	pop	r1
    4bee:	18 95       	reti

00004bf0 <__vector_37>:
    4bf0:	1f 92       	push	r1
    4bf2:	0f 92       	push	r0
    4bf4:	0f b6       	in	r0, 0x3f	; 63
    4bf6:	0f 92       	push	r0
    4bf8:	11 24       	eor	r1, r1
    4bfa:	0b b6       	in	r0, 0x3b	; 59
    4bfc:	0f 92       	push	r0
    4bfe:	2f 93       	push	r18
    4c00:	8f 93       	push	r24
    4c02:	9f 93       	push	r25
    4c04:	af 93       	push	r26
    4c06:	bf 93       	push	r27
    4c08:	ef 93       	push	r30
    4c0a:	ff 93       	push	r31
    4c0c:	e0 91 48 16 	lds	r30, 0x1648	; 0x801648 <_ser_handle+0x2>
    4c10:	f0 91 49 16 	lds	r31, 0x1649	; 0x801649 <_ser_handle+0x3>
    4c14:	30 97       	sbiw	r30, 0x00	; 0
    4c16:	b9 f0       	breq	.+46     	; 0x4c46 <__vector_37+0x56>
    4c18:	02 80       	ldd	r0, Z+2	; 0x02
    4c1a:	f3 81       	ldd	r31, Z+3	; 0x03
    4c1c:	e0 2d       	mov	r30, r0
    4c1e:	93 81       	ldd	r25, Z+3	; 0x03
    4c20:	82 81       	ldd	r24, Z+2	; 0x02
    4c22:	98 17       	cp	r25, r24
    4c24:	b1 f0       	breq	.+44     	; 0x4c52 <__vector_37+0x62>
    4c26:	92 81       	ldd	r25, Z+2	; 0x02
    4c28:	85 81       	ldd	r24, Z+5	; 0x05
    4c2a:	28 2f       	mov	r18, r24
    4c2c:	26 95       	lsr	r18
    4c2e:	29 23       	and	r18, r25
    4c30:	a0 81       	ld	r26, Z
    4c32:	b1 81       	ldd	r27, Z+1	; 0x01
    4c34:	a2 0f       	add	r26, r18
    4c36:	b1 1d       	adc	r27, r1
    4c38:	2c 91       	ld	r18, X
    4c3a:	9f 5f       	subi	r25, 0xFF	; 255
    4c3c:	89 23       	and	r24, r25
    4c3e:	82 83       	std	Z+2, r24	; 0x02
    4c40:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4c44:	0b c0       	rjmp	.+22     	; 0x4c5c <__vector_37+0x6c>
    4c46:	e9 ec       	ldi	r30, 0xC9	; 201
    4c48:	f0 e0       	ldi	r31, 0x00	; 0
    4c4a:	80 81       	ld	r24, Z
    4c4c:	8f 7d       	andi	r24, 0xDF	; 223
    4c4e:	80 83       	st	Z, r24
    4c50:	05 c0       	rjmp	.+10     	; 0x4c5c <__vector_37+0x6c>
    4c52:	e9 ec       	ldi	r30, 0xC9	; 201
    4c54:	f0 e0       	ldi	r31, 0x00	; 0
    4c56:	80 81       	ld	r24, Z
    4c58:	8f 7d       	andi	r24, 0xDF	; 223
    4c5a:	80 83       	st	Z, r24
    4c5c:	ff 91       	pop	r31
    4c5e:	ef 91       	pop	r30
    4c60:	bf 91       	pop	r27
    4c62:	af 91       	pop	r26
    4c64:	9f 91       	pop	r25
    4c66:	8f 91       	pop	r24
    4c68:	2f 91       	pop	r18
    4c6a:	0f 90       	pop	r0
    4c6c:	0b be       	out	0x3b, r0	; 59
    4c6e:	0f 90       	pop	r0
    4c70:	0f be       	out	0x3f, r0	; 63
    4c72:	0f 90       	pop	r0
    4c74:	1f 90       	pop	r1
    4c76:	18 95       	reti

00004c78 <__vector_51>:
    4c78:	1f 92       	push	r1
    4c7a:	0f 92       	push	r0
    4c7c:	0f b6       	in	r0, 0x3f	; 63
    4c7e:	0f 92       	push	r0
    4c80:	11 24       	eor	r1, r1
    4c82:	0b b6       	in	r0, 0x3b	; 59
    4c84:	0f 92       	push	r0
    4c86:	2f 93       	push	r18
    4c88:	3f 93       	push	r19
    4c8a:	4f 93       	push	r20
    4c8c:	5f 93       	push	r21
    4c8e:	6f 93       	push	r22
    4c90:	7f 93       	push	r23
    4c92:	8f 93       	push	r24
    4c94:	9f 93       	push	r25
    4c96:	af 93       	push	r26
    4c98:	bf 93       	push	r27
    4c9a:	cf 93       	push	r28
    4c9c:	df 93       	push	r29
    4c9e:	ef 93       	push	r30
    4ca0:	ff 93       	push	r31
    4ca2:	a0 91 4a 16 	lds	r26, 0x164A	; 0x80164a <_ser_handle+0x4>
    4ca6:	b0 91 4b 16 	lds	r27, 0x164B	; 0x80164b <_ser_handle+0x5>
    4caa:	10 97       	sbiw	r26, 0x00	; 0
    4cac:	11 f1       	breq	.+68     	; 0x4cf2 <__vector_51+0x7a>
    4cae:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4cb2:	14 96       	adiw	r26, 0x04	; 4
    4cb4:	ed 91       	ld	r30, X+
    4cb6:	fc 91       	ld	r31, X
    4cb8:	15 97       	sbiw	r26, 0x05	; 5
    4cba:	93 81       	ldd	r25, Z+3	; 0x03
    4cbc:	82 81       	ldd	r24, Z+2	; 0x02
    4cbe:	25 81       	ldd	r18, Z+5	; 0x05
    4cc0:	98 1b       	sub	r25, r24
    4cc2:	92 23       	and	r25, r18
    4cc4:	84 81       	ldd	r24, Z+4	; 0x04
    4cc6:	98 17       	cp	r25, r24
    4cc8:	61 f0       	breq	.+24     	; 0x4ce2 <__vector_51+0x6a>
    4cca:	83 81       	ldd	r24, Z+3	; 0x03
    4ccc:	26 95       	lsr	r18
    4cce:	28 23       	and	r18, r24
    4cd0:	c0 81       	ld	r28, Z
    4cd2:	d1 81       	ldd	r29, Z+1	; 0x01
    4cd4:	c2 0f       	add	r28, r18
    4cd6:	d1 1d       	adc	r29, r1
    4cd8:	68 83       	st	Y, r22
    4cda:	8f 5f       	subi	r24, 0xFF	; 255
    4cdc:	95 81       	ldd	r25, Z+5	; 0x05
    4cde:	89 23       	and	r24, r25
    4ce0:	83 83       	std	Z+3, r24	; 0x03
    4ce2:	16 96       	adiw	r26, 0x06	; 6
    4ce4:	ed 91       	ld	r30, X+
    4ce6:	fc 91       	ld	r31, X
    4ce8:	17 97       	sbiw	r26, 0x07	; 7
    4cea:	30 97       	sbiw	r30, 0x00	; 0
    4cec:	11 f0       	breq	.+4      	; 0x4cf2 <__vector_51+0x7a>
    4cee:	cd 01       	movw	r24, r26
    4cf0:	19 95       	eicall
    4cf2:	ff 91       	pop	r31
    4cf4:	ef 91       	pop	r30
    4cf6:	df 91       	pop	r29
    4cf8:	cf 91       	pop	r28
    4cfa:	bf 91       	pop	r27
    4cfc:	af 91       	pop	r26
    4cfe:	9f 91       	pop	r25
    4d00:	8f 91       	pop	r24
    4d02:	7f 91       	pop	r23
    4d04:	6f 91       	pop	r22
    4d06:	5f 91       	pop	r21
    4d08:	4f 91       	pop	r20
    4d0a:	3f 91       	pop	r19
    4d0c:	2f 91       	pop	r18
    4d0e:	0f 90       	pop	r0
    4d10:	0b be       	out	0x3b, r0	; 59
    4d12:	0f 90       	pop	r0
    4d14:	0f be       	out	0x3f, r0	; 63
    4d16:	0f 90       	pop	r0
    4d18:	1f 90       	pop	r1
    4d1a:	18 95       	reti

00004d1c <__vector_52>:
    4d1c:	1f 92       	push	r1
    4d1e:	0f 92       	push	r0
    4d20:	0f b6       	in	r0, 0x3f	; 63
    4d22:	0f 92       	push	r0
    4d24:	11 24       	eor	r1, r1
    4d26:	0b b6       	in	r0, 0x3b	; 59
    4d28:	0f 92       	push	r0
    4d2a:	2f 93       	push	r18
    4d2c:	8f 93       	push	r24
    4d2e:	9f 93       	push	r25
    4d30:	af 93       	push	r26
    4d32:	bf 93       	push	r27
    4d34:	ef 93       	push	r30
    4d36:	ff 93       	push	r31
    4d38:	e0 91 4a 16 	lds	r30, 0x164A	; 0x80164a <_ser_handle+0x4>
    4d3c:	f0 91 4b 16 	lds	r31, 0x164B	; 0x80164b <_ser_handle+0x5>
    4d40:	30 97       	sbiw	r30, 0x00	; 0
    4d42:	b9 f0       	breq	.+46     	; 0x4d72 <__vector_52+0x56>
    4d44:	02 80       	ldd	r0, Z+2	; 0x02
    4d46:	f3 81       	ldd	r31, Z+3	; 0x03
    4d48:	e0 2d       	mov	r30, r0
    4d4a:	93 81       	ldd	r25, Z+3	; 0x03
    4d4c:	82 81       	ldd	r24, Z+2	; 0x02
    4d4e:	98 17       	cp	r25, r24
    4d50:	b1 f0       	breq	.+44     	; 0x4d7e <__vector_52+0x62>
    4d52:	92 81       	ldd	r25, Z+2	; 0x02
    4d54:	85 81       	ldd	r24, Z+5	; 0x05
    4d56:	28 2f       	mov	r18, r24
    4d58:	26 95       	lsr	r18
    4d5a:	29 23       	and	r18, r25
    4d5c:	a0 81       	ld	r26, Z
    4d5e:	b1 81       	ldd	r27, Z+1	; 0x01
    4d60:	a2 0f       	add	r26, r18
    4d62:	b1 1d       	adc	r27, r1
    4d64:	2c 91       	ld	r18, X
    4d66:	9f 5f       	subi	r25, 0xFF	; 255
    4d68:	89 23       	and	r24, r25
    4d6a:	82 83       	std	Z+2, r24	; 0x02
    4d6c:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4d70:	0b c0       	rjmp	.+22     	; 0x4d88 <__vector_52+0x6c>
    4d72:	e1 ed       	ldi	r30, 0xD1	; 209
    4d74:	f0 e0       	ldi	r31, 0x00	; 0
    4d76:	80 81       	ld	r24, Z
    4d78:	8f 7d       	andi	r24, 0xDF	; 223
    4d7a:	80 83       	st	Z, r24
    4d7c:	05 c0       	rjmp	.+10     	; 0x4d88 <__vector_52+0x6c>
    4d7e:	e1 ed       	ldi	r30, 0xD1	; 209
    4d80:	f0 e0       	ldi	r31, 0x00	; 0
    4d82:	80 81       	ld	r24, Z
    4d84:	8f 7d       	andi	r24, 0xDF	; 223
    4d86:	80 83       	st	Z, r24
    4d88:	ff 91       	pop	r31
    4d8a:	ef 91       	pop	r30
    4d8c:	bf 91       	pop	r27
    4d8e:	af 91       	pop	r26
    4d90:	9f 91       	pop	r25
    4d92:	8f 91       	pop	r24
    4d94:	2f 91       	pop	r18
    4d96:	0f 90       	pop	r0
    4d98:	0b be       	out	0x3b, r0	; 59
    4d9a:	0f 90       	pop	r0
    4d9c:	0f be       	out	0x3f, r0	; 63
    4d9e:	0f 90       	pop	r0
    4da0:	1f 90       	pop	r1
    4da2:	18 95       	reti

00004da4 <__vector_54>:
    4da4:	1f 92       	push	r1
    4da6:	0f 92       	push	r0
    4da8:	0f b6       	in	r0, 0x3f	; 63
    4daa:	0f 92       	push	r0
    4dac:	11 24       	eor	r1, r1
    4dae:	0b b6       	in	r0, 0x3b	; 59
    4db0:	0f 92       	push	r0
    4db2:	2f 93       	push	r18
    4db4:	3f 93       	push	r19
    4db6:	4f 93       	push	r20
    4db8:	5f 93       	push	r21
    4dba:	6f 93       	push	r22
    4dbc:	7f 93       	push	r23
    4dbe:	8f 93       	push	r24
    4dc0:	9f 93       	push	r25
    4dc2:	af 93       	push	r26
    4dc4:	bf 93       	push	r27
    4dc6:	cf 93       	push	r28
    4dc8:	df 93       	push	r29
    4dca:	ef 93       	push	r30
    4dcc:	ff 93       	push	r31
    4dce:	a0 91 4c 16 	lds	r26, 0x164C	; 0x80164c <_ser_handle+0x6>
    4dd2:	b0 91 4d 16 	lds	r27, 0x164D	; 0x80164d <_ser_handle+0x7>
    4dd6:	10 97       	sbiw	r26, 0x00	; 0
    4dd8:	11 f1       	breq	.+68     	; 0x4e1e <__vector_54+0x7a>
    4dda:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4dde:	14 96       	adiw	r26, 0x04	; 4
    4de0:	ed 91       	ld	r30, X+
    4de2:	fc 91       	ld	r31, X
    4de4:	15 97       	sbiw	r26, 0x05	; 5
    4de6:	93 81       	ldd	r25, Z+3	; 0x03
    4de8:	82 81       	ldd	r24, Z+2	; 0x02
    4dea:	25 81       	ldd	r18, Z+5	; 0x05
    4dec:	98 1b       	sub	r25, r24
    4dee:	92 23       	and	r25, r18
    4df0:	84 81       	ldd	r24, Z+4	; 0x04
    4df2:	98 17       	cp	r25, r24
    4df4:	61 f0       	breq	.+24     	; 0x4e0e <__vector_54+0x6a>
    4df6:	83 81       	ldd	r24, Z+3	; 0x03
    4df8:	26 95       	lsr	r18
    4dfa:	28 23       	and	r18, r24
    4dfc:	c0 81       	ld	r28, Z
    4dfe:	d1 81       	ldd	r29, Z+1	; 0x01
    4e00:	c2 0f       	add	r28, r18
    4e02:	d1 1d       	adc	r29, r1
    4e04:	68 83       	st	Y, r22
    4e06:	8f 5f       	subi	r24, 0xFF	; 255
    4e08:	95 81       	ldd	r25, Z+5	; 0x05
    4e0a:	89 23       	and	r24, r25
    4e0c:	83 83       	std	Z+3, r24	; 0x03
    4e0e:	16 96       	adiw	r26, 0x06	; 6
    4e10:	ed 91       	ld	r30, X+
    4e12:	fc 91       	ld	r31, X
    4e14:	17 97       	sbiw	r26, 0x07	; 7
    4e16:	30 97       	sbiw	r30, 0x00	; 0
    4e18:	11 f0       	breq	.+4      	; 0x4e1e <__vector_54+0x7a>
    4e1a:	cd 01       	movw	r24, r26
    4e1c:	19 95       	eicall
    4e1e:	ff 91       	pop	r31
    4e20:	ef 91       	pop	r30
    4e22:	df 91       	pop	r29
    4e24:	cf 91       	pop	r28
    4e26:	bf 91       	pop	r27
    4e28:	af 91       	pop	r26
    4e2a:	9f 91       	pop	r25
    4e2c:	8f 91       	pop	r24
    4e2e:	7f 91       	pop	r23
    4e30:	6f 91       	pop	r22
    4e32:	5f 91       	pop	r21
    4e34:	4f 91       	pop	r20
    4e36:	3f 91       	pop	r19
    4e38:	2f 91       	pop	r18
    4e3a:	0f 90       	pop	r0
    4e3c:	0b be       	out	0x3b, r0	; 59
    4e3e:	0f 90       	pop	r0
    4e40:	0f be       	out	0x3f, r0	; 63
    4e42:	0f 90       	pop	r0
    4e44:	1f 90       	pop	r1
    4e46:	18 95       	reti

00004e48 <__vector_55>:
    4e48:	1f 92       	push	r1
    4e4a:	0f 92       	push	r0
    4e4c:	0f b6       	in	r0, 0x3f	; 63
    4e4e:	0f 92       	push	r0
    4e50:	11 24       	eor	r1, r1
    4e52:	0b b6       	in	r0, 0x3b	; 59
    4e54:	0f 92       	push	r0
    4e56:	2f 93       	push	r18
    4e58:	8f 93       	push	r24
    4e5a:	9f 93       	push	r25
    4e5c:	af 93       	push	r26
    4e5e:	bf 93       	push	r27
    4e60:	ef 93       	push	r30
    4e62:	ff 93       	push	r31
    4e64:	e0 91 4c 16 	lds	r30, 0x164C	; 0x80164c <_ser_handle+0x6>
    4e68:	f0 91 4d 16 	lds	r31, 0x164D	; 0x80164d <_ser_handle+0x7>
    4e6c:	30 97       	sbiw	r30, 0x00	; 0
    4e6e:	b9 f0       	breq	.+46     	; 0x4e9e <__vector_55+0x56>
    4e70:	02 80       	ldd	r0, Z+2	; 0x02
    4e72:	f3 81       	ldd	r31, Z+3	; 0x03
    4e74:	e0 2d       	mov	r30, r0
    4e76:	93 81       	ldd	r25, Z+3	; 0x03
    4e78:	82 81       	ldd	r24, Z+2	; 0x02
    4e7a:	98 17       	cp	r25, r24
    4e7c:	b1 f0       	breq	.+44     	; 0x4eaa <__vector_55+0x62>
    4e7e:	92 81       	ldd	r25, Z+2	; 0x02
    4e80:	85 81       	ldd	r24, Z+5	; 0x05
    4e82:	28 2f       	mov	r18, r24
    4e84:	26 95       	lsr	r18
    4e86:	29 23       	and	r18, r25
    4e88:	a0 81       	ld	r26, Z
    4e8a:	b1 81       	ldd	r27, Z+1	; 0x01
    4e8c:	a2 0f       	add	r26, r18
    4e8e:	b1 1d       	adc	r27, r1
    4e90:	2c 91       	ld	r18, X
    4e92:	9f 5f       	subi	r25, 0xFF	; 255
    4e94:	89 23       	and	r24, r25
    4e96:	82 83       	std	Z+2, r24	; 0x02
    4e98:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4e9c:	0b c0       	rjmp	.+22     	; 0x4eb4 <__vector_55+0x6c>
    4e9e:	e1 e3       	ldi	r30, 0x31	; 49
    4ea0:	f1 e0       	ldi	r31, 0x01	; 1
    4ea2:	80 81       	ld	r24, Z
    4ea4:	8f 7d       	andi	r24, 0xDF	; 223
    4ea6:	80 83       	st	Z, r24
    4ea8:	05 c0       	rjmp	.+10     	; 0x4eb4 <__vector_55+0x6c>
    4eaa:	e1 e3       	ldi	r30, 0x31	; 49
    4eac:	f1 e0       	ldi	r31, 0x01	; 1
    4eae:	80 81       	ld	r24, Z
    4eb0:	8f 7d       	andi	r24, 0xDF	; 223
    4eb2:	80 83       	st	Z, r24
    4eb4:	ff 91       	pop	r31
    4eb6:	ef 91       	pop	r30
    4eb8:	bf 91       	pop	r27
    4eba:	af 91       	pop	r26
    4ebc:	9f 91       	pop	r25
    4ebe:	8f 91       	pop	r24
    4ec0:	2f 91       	pop	r18
    4ec2:	0f 90       	pop	r0
    4ec4:	0b be       	out	0x3b, r0	; 59
    4ec6:	0f 90       	pop	r0
    4ec8:	0f be       	out	0x3f, r0	; 63
    4eca:	0f 90       	pop	r0
    4ecc:	1f 90       	pop	r1
    4ece:	18 95       	reti

00004ed0 <usart_getchar>:
    4ed0:	cf 93       	push	r28
    4ed2:	df 93       	push	r29
    4ed4:	1f 92       	push	r1
    4ed6:	cd b7       	in	r28, 0x3d	; 61
    4ed8:	de b7       	in	r29, 0x3e	; 62
    4eda:	be 01       	movw	r22, r28
    4edc:	6f 5f       	subi	r22, 0xFF	; 255
    4ede:	7f 4f       	sbci	r23, 0xFF	; 255
    4ee0:	80 91 4e 16 	lds	r24, 0x164E	; 0x80164e <_com_serial_instance>
    4ee4:	90 91 4f 16 	lds	r25, 0x164F	; 0x80164f <_com_serial_instance+0x1>
    4ee8:	7b dd       	rcall	.-1290   	; 0x49e0 <serial_getByte>
    4eea:	81 11       	cpse	r24, r1
    4eec:	f6 cf       	rjmp	.-20     	; 0x4eda <usart_getchar+0xa>
    4eee:	89 81       	ldd	r24, Y+1	; 0x01
    4ef0:	90 e0       	ldi	r25, 0x00	; 0
    4ef2:	0f 90       	pop	r0
    4ef4:	df 91       	pop	r29
    4ef6:	cf 91       	pop	r28
    4ef8:	08 95       	ret

00004efa <usart_putchar>:
    4efa:	68 2f       	mov	r22, r24
    4efc:	80 91 4e 16 	lds	r24, 0x164E	; 0x80164e <_com_serial_instance>
    4f00:	90 91 4f 16 	lds	r25, 0x164F	; 0x80164f <_com_serial_instance+0x1>
    4f04:	ed dc       	rcall	.-1574   	; 0x48e0 <serial_sendByte>
    4f06:	80 e0       	ldi	r24, 0x00	; 0
    4f08:	90 e0       	ldi	r25, 0x00	; 0
    4f0a:	08 95       	ret

00004f0c <stdio_initialise>:
    4f0c:	8f 92       	push	r8
    4f0e:	9f 92       	push	r9
    4f10:	af 92       	push	r10
    4f12:	cf 92       	push	r12
    4f14:	ef 92       	push	r14
    4f16:	0f 93       	push	r16
    4f18:	81 2c       	mov	r8, r1
    4f1a:	91 2c       	mov	r9, r1
    4f1c:	68 94       	set
    4f1e:	aa 24       	eor	r10, r10
    4f20:	a7 f8       	bld	r10, 7
    4f22:	68 94       	set
    4f24:	cc 24       	eor	r12, r12
    4f26:	c7 f8       	bld	r12, 7
    4f28:	e1 2c       	mov	r14, r1
    4f2a:	00 e0       	ldi	r16, 0x00	; 0
    4f2c:	23 e0       	ldi	r18, 0x03	; 3
    4f2e:	40 e0       	ldi	r20, 0x00	; 0
    4f30:	51 ee       	ldi	r21, 0xE1	; 225
    4f32:	60 e0       	ldi	r22, 0x00	; 0
    4f34:	70 e0       	ldi	r23, 0x00	; 0
    4f36:	32 dc       	rcall	.-1948   	; 0x479c <serial_create>
    4f38:	90 93 4f 16 	sts	0x164F, r25	; 0x80164f <_com_serial_instance+0x1>
    4f3c:	80 93 4e 16 	sts	0x164E, r24	; 0x80164e <_com_serial_instance>
    4f40:	e3 e8       	ldi	r30, 0x83	; 131
    4f42:	f6 e1       	ldi	r31, 0x16	; 22
    4f44:	83 e1       	ldi	r24, 0x13	; 19
    4f46:	92 e0       	ldi	r25, 0x02	; 2
    4f48:	91 83       	std	Z+1, r25	; 0x01
    4f4a:	80 83       	st	Z, r24
    4f4c:	93 83       	std	Z+3, r25	; 0x03
    4f4e:	82 83       	std	Z+2, r24	; 0x02
    4f50:	0f 91       	pop	r16
    4f52:	ef 90       	pop	r14
    4f54:	cf 90       	pop	r12
    4f56:	af 90       	pop	r10
    4f58:	9f 90       	pop	r9
    4f5a:	8f 90       	pop	r8
    4f5c:	08 95       	ret

00004f5e <_turn_off>:
    4f5e:	90 e0       	ldi	r25, 0x00	; 0
    4f60:	fc 01       	movw	r30, r24
    4f62:	ee 0f       	add	r30, r30
    4f64:	ff 1f       	adc	r31, r31
    4f66:	e8 0f       	add	r30, r24
    4f68:	f9 1f       	adc	r31, r25
    4f6a:	ee 0f       	add	r30, r30
    4f6c:	ff 1f       	adc	r31, r31
    4f6e:	e0 5b       	subi	r30, 0xB0	; 176
    4f70:	f9 4e       	sbci	r31, 0xE9	; 233
    4f72:	23 81       	ldd	r18, Z+3	; 0x03
    4f74:	21 11       	cpse	r18, r1
    4f76:	1f c0       	rjmp	.+62     	; 0x4fb6 <_turn_off+0x58>
    4f78:	9c 01       	movw	r18, r24
    4f7a:	22 0f       	add	r18, r18
    4f7c:	33 1f       	adc	r19, r19
    4f7e:	f9 01       	movw	r30, r18
    4f80:	e8 0f       	add	r30, r24
    4f82:	f9 1f       	adc	r31, r25
    4f84:	ee 0f       	add	r30, r30
    4f86:	ff 1f       	adc	r31, r31
    4f88:	e0 5b       	subi	r30, 0xB0	; 176
    4f8a:	f9 4e       	sbci	r31, 0xE9	; 233
    4f8c:	a0 81       	ld	r26, Z
    4f8e:	b1 81       	ldd	r27, Z+1	; 0x01
    4f90:	4c 91       	ld	r20, X
    4f92:	f9 01       	movw	r30, r18
    4f94:	e8 0f       	add	r30, r24
    4f96:	f9 1f       	adc	r31, r25
    4f98:	ee 0f       	add	r30, r30
    4f9a:	ff 1f       	adc	r31, r31
    4f9c:	e0 5b       	subi	r30, 0xB0	; 176
    4f9e:	f9 4e       	sbci	r31, 0xE9	; 233
    4fa0:	81 e0       	ldi	r24, 0x01	; 1
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	02 80       	ldd	r0, Z+2	; 0x02
    4fa6:	02 c0       	rjmp	.+4      	; 0x4fac <_turn_off+0x4e>
    4fa8:	88 0f       	add	r24, r24
    4faa:	99 1f       	adc	r25, r25
    4fac:	0a 94       	dec	r0
    4fae:	e2 f7       	brpl	.-8      	; 0x4fa8 <_turn_off+0x4a>
    4fb0:	84 2b       	or	r24, r20
    4fb2:	8c 93       	st	X, r24
    4fb4:	08 95       	ret
    4fb6:	fc 01       	movw	r30, r24
    4fb8:	ee 0f       	add	r30, r30
    4fba:	ff 1f       	adc	r31, r31
    4fbc:	df 01       	movw	r26, r30
    4fbe:	a8 0f       	add	r26, r24
    4fc0:	b9 1f       	adc	r27, r25
    4fc2:	aa 0f       	add	r26, r26
    4fc4:	bb 1f       	adc	r27, r27
    4fc6:	a0 5b       	subi	r26, 0xB0	; 176
    4fc8:	b9 4e       	sbci	r27, 0xE9	; 233
    4fca:	0d 90       	ld	r0, X+
    4fcc:	bc 91       	ld	r27, X
    4fce:	a0 2d       	mov	r26, r0
    4fd0:	2c 91       	ld	r18, X
    4fd2:	e8 0f       	add	r30, r24
    4fd4:	f9 1f       	adc	r31, r25
    4fd6:	ee 0f       	add	r30, r30
    4fd8:	ff 1f       	adc	r31, r31
    4fda:	e0 5b       	subi	r30, 0xB0	; 176
    4fdc:	f9 4e       	sbci	r31, 0xE9	; 233
    4fde:	81 e0       	ldi	r24, 0x01	; 1
    4fe0:	90 e0       	ldi	r25, 0x00	; 0
    4fe2:	02 80       	ldd	r0, Z+2	; 0x02
    4fe4:	02 c0       	rjmp	.+4      	; 0x4fea <_turn_off+0x8c>
    4fe6:	88 0f       	add	r24, r24
    4fe8:	99 1f       	adc	r25, r25
    4fea:	0a 94       	dec	r0
    4fec:	e2 f7       	brpl	.-8      	; 0x4fe6 <_turn_off+0x88>
    4fee:	80 95       	com	r24
    4ff0:	82 23       	and	r24, r18
    4ff2:	8c 93       	st	X, r24
    4ff4:	08 95       	ret

00004ff6 <_turn_on>:
    4ff6:	90 e0       	ldi	r25, 0x00	; 0
    4ff8:	fc 01       	movw	r30, r24
    4ffa:	ee 0f       	add	r30, r30
    4ffc:	ff 1f       	adc	r31, r31
    4ffe:	e8 0f       	add	r30, r24
    5000:	f9 1f       	adc	r31, r25
    5002:	ee 0f       	add	r30, r30
    5004:	ff 1f       	adc	r31, r31
    5006:	e0 5b       	subi	r30, 0xB0	; 176
    5008:	f9 4e       	sbci	r31, 0xE9	; 233
    500a:	23 81       	ldd	r18, Z+3	; 0x03
    500c:	21 11       	cpse	r18, r1
    500e:	20 c0       	rjmp	.+64     	; 0x5050 <_turn_on+0x5a>
    5010:	9c 01       	movw	r18, r24
    5012:	22 0f       	add	r18, r18
    5014:	33 1f       	adc	r19, r19
    5016:	f9 01       	movw	r30, r18
    5018:	e8 0f       	add	r30, r24
    501a:	f9 1f       	adc	r31, r25
    501c:	ee 0f       	add	r30, r30
    501e:	ff 1f       	adc	r31, r31
    5020:	e0 5b       	subi	r30, 0xB0	; 176
    5022:	f9 4e       	sbci	r31, 0xE9	; 233
    5024:	a0 81       	ld	r26, Z
    5026:	b1 81       	ldd	r27, Z+1	; 0x01
    5028:	4c 91       	ld	r20, X
    502a:	f9 01       	movw	r30, r18
    502c:	e8 0f       	add	r30, r24
    502e:	f9 1f       	adc	r31, r25
    5030:	ee 0f       	add	r30, r30
    5032:	ff 1f       	adc	r31, r31
    5034:	e0 5b       	subi	r30, 0xB0	; 176
    5036:	f9 4e       	sbci	r31, 0xE9	; 233
    5038:	81 e0       	ldi	r24, 0x01	; 1
    503a:	90 e0       	ldi	r25, 0x00	; 0
    503c:	02 80       	ldd	r0, Z+2	; 0x02
    503e:	02 c0       	rjmp	.+4      	; 0x5044 <_turn_on+0x4e>
    5040:	88 0f       	add	r24, r24
    5042:	99 1f       	adc	r25, r25
    5044:	0a 94       	dec	r0
    5046:	e2 f7       	brpl	.-8      	; 0x5040 <_turn_on+0x4a>
    5048:	80 95       	com	r24
    504a:	84 23       	and	r24, r20
    504c:	8c 93       	st	X, r24
    504e:	08 95       	ret
    5050:	fc 01       	movw	r30, r24
    5052:	ee 0f       	add	r30, r30
    5054:	ff 1f       	adc	r31, r31
    5056:	df 01       	movw	r26, r30
    5058:	a8 0f       	add	r26, r24
    505a:	b9 1f       	adc	r27, r25
    505c:	aa 0f       	add	r26, r26
    505e:	bb 1f       	adc	r27, r27
    5060:	a0 5b       	subi	r26, 0xB0	; 176
    5062:	b9 4e       	sbci	r27, 0xE9	; 233
    5064:	0d 90       	ld	r0, X+
    5066:	bc 91       	ld	r27, X
    5068:	a0 2d       	mov	r26, r0
    506a:	2c 91       	ld	r18, X
    506c:	e8 0f       	add	r30, r24
    506e:	f9 1f       	adc	r31, r25
    5070:	ee 0f       	add	r30, r30
    5072:	ff 1f       	adc	r31, r31
    5074:	e0 5b       	subi	r30, 0xB0	; 176
    5076:	f9 4e       	sbci	r31, 0xE9	; 233
    5078:	81 e0       	ldi	r24, 0x01	; 1
    507a:	90 e0       	ldi	r25, 0x00	; 0
    507c:	02 80       	ldd	r0, Z+2	; 0x02
    507e:	02 c0       	rjmp	.+4      	; 0x5084 <_turn_on+0x8e>
    5080:	88 0f       	add	r24, r24
    5082:	99 1f       	adc	r25, r25
    5084:	0a 94       	dec	r0
    5086:	e2 f7       	brpl	.-8      	; 0x5080 <_turn_on+0x8a>
    5088:	82 2b       	or	r24, r18
    508a:	8c 93       	st	X, r24
    508c:	08 95       	ret

0000508e <_hal_led_task>:
    508e:	cc 24       	eor	r12, r12
    5090:	c3 94       	inc	r12
    5092:	d1 2c       	mov	r13, r1
    5094:	68 94       	set
    5096:	bb 24       	eor	r11, r11
    5098:	b2 f8       	bld	r11, 2
    509a:	c0 e5       	ldi	r28, 0x50	; 80
    509c:	d6 e1       	ldi	r29, 0x16	; 22
    509e:	10 e0       	ldi	r17, 0x00	; 0
    50a0:	8c 81       	ldd	r24, Y+4	; 0x04
    50a2:	81 30       	cpi	r24, 0x01	; 1
    50a4:	81 f0       	breq	.+32     	; 0x50c6 <_hal_led_task+0x38>
    50a6:	18 f1       	brcs	.+70     	; 0x50ee <_hal_led_task+0x60>
    50a8:	82 30       	cpi	r24, 0x02	; 2
    50aa:	61 f5       	brne	.+88     	; 0x5104 <_hal_led_task+0x76>
    50ac:	e8 81       	ld	r30, Y
    50ae:	f9 81       	ldd	r31, Y+1	; 0x01
    50b0:	20 81       	ld	r18, Z
    50b2:	c6 01       	movw	r24, r12
    50b4:	0a 80       	ldd	r0, Y+2	; 0x02
    50b6:	02 c0       	rjmp	.+4      	; 0x50bc <_hal_led_task+0x2e>
    50b8:	88 0f       	add	r24, r24
    50ba:	99 1f       	adc	r25, r25
    50bc:	0a 94       	dec	r0
    50be:	e2 f7       	brpl	.-8      	; 0x50b8 <_hal_led_task+0x2a>
    50c0:	82 27       	eor	r24, r18
    50c2:	80 83       	st	Z, r24
    50c4:	1f c0       	rjmp	.+62     	; 0x5104 <_hal_led_task+0x76>
    50c6:	8d 81       	ldd	r24, Y+5	; 0x05
    50c8:	8f 5f       	subi	r24, 0xFF	; 255
    50ca:	8a 30       	cpi	r24, 0x0A	; 10
    50cc:	10 f4       	brcc	.+4      	; 0x50d2 <_hal_led_task+0x44>
    50ce:	8d 83       	std	Y+5, r24	; 0x05
    50d0:	19 c0       	rjmp	.+50     	; 0x5104 <_hal_led_task+0x76>
    50d2:	1d 82       	std	Y+5, r1	; 0x05
    50d4:	e8 81       	ld	r30, Y
    50d6:	f9 81       	ldd	r31, Y+1	; 0x01
    50d8:	20 81       	ld	r18, Z
    50da:	c6 01       	movw	r24, r12
    50dc:	0a 80       	ldd	r0, Y+2	; 0x02
    50de:	02 c0       	rjmp	.+4      	; 0x50e4 <_hal_led_task+0x56>
    50e0:	88 0f       	add	r24, r24
    50e2:	99 1f       	adc	r25, r25
    50e4:	0a 94       	dec	r0
    50e6:	e2 f7       	brpl	.-8      	; 0x50e0 <_hal_led_task+0x52>
    50e8:	82 27       	eor	r24, r18
    50ea:	80 83       	st	Z, r24
    50ec:	0b c0       	rjmp	.+22     	; 0x5104 <_hal_led_task+0x76>
    50ee:	0d 81       	ldd	r16, Y+5	; 0x05
    50f0:	00 23       	and	r16, r16
    50f2:	29 f0       	breq	.+10     	; 0x50fe <_hal_led_task+0x70>
    50f4:	81 2f       	mov	r24, r17
    50f6:	7f df       	rcall	.-258    	; 0x4ff6 <_turn_on>
    50f8:	01 50       	subi	r16, 0x01	; 1
    50fa:	0d 83       	std	Y+5, r16	; 0x05
    50fc:	03 c0       	rjmp	.+6      	; 0x5104 <_hal_led_task+0x76>
    50fe:	bc 82       	std	Y+4, r11	; 0x04
    5100:	81 2f       	mov	r24, r17
    5102:	2d df       	rcall	.-422    	; 0x4f5e <_turn_off>
    5104:	1f 5f       	subi	r17, 0xFF	; 255
    5106:	26 96       	adiw	r28, 0x06	; 6
    5108:	14 30       	cpi	r17, 0x04	; 4
    510a:	51 f6       	brne	.-108    	; 0x50a0 <_hal_led_task+0x12>
    510c:	65 e0       	ldi	r22, 0x05	; 5
    510e:	70 e0       	ldi	r23, 0x00	; 0
    5110:	80 e0       	ldi	r24, 0x00	; 0
    5112:	90 e0       	ldi	r25, 0x00	; 0
    5114:	0e 94 02 12 	call	0x2404	; 0x2404 <vTaskDelay>
    5118:	c0 cf       	rjmp	.-128    	; 0x509a <_hal_led_task+0xc>

0000511a <status_leds_initialise>:
    511a:	ef 92       	push	r14
    511c:	ff 92       	push	r15
    511e:	0f 93       	push	r16
    5120:	1f 93       	push	r17
    5122:	cf 93       	push	r28
    5124:	df 93       	push	r29
    5126:	08 2f       	mov	r16, r24
    5128:	80 e4       	ldi	r24, 0x40	; 64
    512a:	87 b9       	out	0x07, r24	; 7
    512c:	c0 e5       	ldi	r28, 0x50	; 80
    512e:	d6 e1       	ldi	r29, 0x16	; 22
    5130:	0f 2e       	mov	r0, r31
    5132:	f8 e2       	ldi	r31, 0x28	; 40
    5134:	ef 2e       	mov	r14, r31
    5136:	f1 2c       	mov	r15, r1
    5138:	f0 2d       	mov	r31, r0
    513a:	f9 82       	std	Y+1, r15	; 0x01
    513c:	e8 82       	st	Y, r14
    513e:	86 e0       	ldi	r24, 0x06	; 6
    5140:	8a 83       	std	Y+2, r24	; 0x02
    5142:	1b 82       	std	Y+3, r1	; 0x03
    5144:	14 e0       	ldi	r17, 0x04	; 4
    5146:	1c 83       	std	Y+4, r17	; 0x04
    5148:	80 e0       	ldi	r24, 0x00	; 0
    514a:	09 df       	rcall	.-494    	; 0x4f5e <_turn_off>
    514c:	80 e8       	ldi	r24, 0x80	; 128
    514e:	87 b9       	out	0x07, r24	; 7
    5150:	ff 82       	std	Y+7, r15	; 0x07
    5152:	ee 82       	std	Y+6, r14	; 0x06
    5154:	87 e0       	ldi	r24, 0x07	; 7
    5156:	88 87       	std	Y+8, r24	; 0x08
    5158:	19 86       	std	Y+9, r1	; 0x09
    515a:	1a 87       	std	Y+10, r17	; 0x0a
    515c:	81 e0       	ldi	r24, 0x01	; 1
    515e:	ff de       	rcall	.-514    	; 0x4f5e <_turn_off>
    5160:	80 e2       	ldi	r24, 0x20	; 32
    5162:	83 bb       	out	0x13, r24	; 19
    5164:	84 e3       	ldi	r24, 0x34	; 52
    5166:	90 e0       	ldi	r25, 0x00	; 0
    5168:	9d 87       	std	Y+13, r25	; 0x0d
    516a:	8c 87       	std	Y+12, r24	; 0x0c
    516c:	85 e0       	ldi	r24, 0x05	; 5
    516e:	8e 87       	std	Y+14, r24	; 0x0e
    5170:	1f 86       	std	Y+15, r1	; 0x0f
    5172:	18 8b       	std	Y+16, r17	; 0x10
    5174:	82 e0       	ldi	r24, 0x02	; 2
    5176:	f3 de       	rcall	.-538    	; 0x4f5e <_turn_off>
    5178:	80 e1       	ldi	r24, 0x10	; 16
    517a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    517e:	82 e0       	ldi	r24, 0x02	; 2
    5180:	91 e0       	ldi	r25, 0x01	; 1
    5182:	9b 8b       	std	Y+19, r25	; 0x13
    5184:	8a 8b       	std	Y+18, r24	; 0x12
    5186:	1c 8b       	std	Y+20, r17	; 0x14
    5188:	1d 8a       	std	Y+21, r1	; 0x15
    518a:	1e 8b       	std	Y+22, r17	; 0x16
    518c:	83 e0       	ldi	r24, 0x03	; 3
    518e:	e7 de       	rcall	.-562    	; 0x4f5e <_turn_off>
    5190:	e1 2c       	mov	r14, r1
    5192:	f1 2c       	mov	r15, r1
    5194:	20 e0       	ldi	r18, 0x00	; 0
    5196:	30 e0       	ldi	r19, 0x00	; 0
    5198:	40 ec       	ldi	r20, 0xC0	; 192
    519a:	50 e0       	ldi	r21, 0x00	; 0
    519c:	6d ec       	ldi	r22, 0xCD	; 205
    519e:	77 e0       	ldi	r23, 0x07	; 7
    51a0:	87 e4       	ldi	r24, 0x47	; 71
    51a2:	98 e2       	ldi	r25, 0x28	; 40
    51a4:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <xTaskCreate>
    51a8:	df 91       	pop	r29
    51aa:	cf 91       	pop	r28
    51ac:	1f 91       	pop	r17
    51ae:	0f 91       	pop	r16
    51b0:	ff 90       	pop	r15
    51b2:	ef 90       	pop	r14
    51b4:	08 95       	ret

000051b6 <status_leds_slowBlink>:
    51b6:	cf 93       	push	r28
    51b8:	df 93       	push	r29
    51ba:	90 e0       	ldi	r25, 0x00	; 0
    51bc:	fc 01       	movw	r30, r24
    51be:	ee 0f       	add	r30, r30
    51c0:	ff 1f       	adc	r31, r31
    51c2:	df 01       	movw	r26, r30
    51c4:	a8 0f       	add	r26, r24
    51c6:	b9 1f       	adc	r27, r25
    51c8:	aa 0f       	add	r26, r26
    51ca:	bb 1f       	adc	r27, r27
    51cc:	a0 5b       	subi	r26, 0xB0	; 176
    51ce:	b9 4e       	sbci	r27, 0xE9	; 233
    51d0:	cd 91       	ld	r28, X+
    51d2:	dc 91       	ld	r29, X
    51d4:	11 97       	sbiw	r26, 0x01	; 1
    51d6:	48 81       	ld	r20, Y
    51d8:	21 e0       	ldi	r18, 0x01	; 1
    51da:	30 e0       	ldi	r19, 0x00	; 0
    51dc:	12 96       	adiw	r26, 0x02	; 2
    51de:	0c 90       	ld	r0, X
    51e0:	12 97       	sbiw	r26, 0x02	; 2
    51e2:	02 c0       	rjmp	.+4      	; 0x51e8 <status_leds_slowBlink+0x32>
    51e4:	22 0f       	add	r18, r18
    51e6:	33 1f       	adc	r19, r19
    51e8:	0a 94       	dec	r0
    51ea:	e2 f7       	brpl	.-8      	; 0x51e4 <status_leds_slowBlink+0x2e>
    51ec:	24 27       	eor	r18, r20
    51ee:	28 83       	st	Y, r18
    51f0:	fd 01       	movw	r30, r26
    51f2:	81 e0       	ldi	r24, 0x01	; 1
    51f4:	84 83       	std	Z+4, r24	; 0x04
    51f6:	df 91       	pop	r29
    51f8:	cf 91       	pop	r28
    51fa:	08 95       	ret

000051fc <status_leds_fastBlink>:
    51fc:	cf 93       	push	r28
    51fe:	df 93       	push	r29
    5200:	90 e0       	ldi	r25, 0x00	; 0
    5202:	fc 01       	movw	r30, r24
    5204:	ee 0f       	add	r30, r30
    5206:	ff 1f       	adc	r31, r31
    5208:	df 01       	movw	r26, r30
    520a:	a8 0f       	add	r26, r24
    520c:	b9 1f       	adc	r27, r25
    520e:	aa 0f       	add	r26, r26
    5210:	bb 1f       	adc	r27, r27
    5212:	a0 5b       	subi	r26, 0xB0	; 176
    5214:	b9 4e       	sbci	r27, 0xE9	; 233
    5216:	cd 91       	ld	r28, X+
    5218:	dc 91       	ld	r29, X
    521a:	11 97       	sbiw	r26, 0x01	; 1
    521c:	48 81       	ld	r20, Y
    521e:	21 e0       	ldi	r18, 0x01	; 1
    5220:	30 e0       	ldi	r19, 0x00	; 0
    5222:	12 96       	adiw	r26, 0x02	; 2
    5224:	0c 90       	ld	r0, X
    5226:	12 97       	sbiw	r26, 0x02	; 2
    5228:	02 c0       	rjmp	.+4      	; 0x522e <status_leds_fastBlink+0x32>
    522a:	22 0f       	add	r18, r18
    522c:	33 1f       	adc	r19, r19
    522e:	0a 94       	dec	r0
    5230:	e2 f7       	brpl	.-8      	; 0x522a <status_leds_fastBlink+0x2e>
    5232:	24 27       	eor	r18, r20
    5234:	28 83       	st	Y, r18
    5236:	fd 01       	movw	r30, r26
    5238:	82 e0       	ldi	r24, 0x02	; 2
    523a:	84 83       	std	Z+4, r24	; 0x04
    523c:	df 91       	pop	r29
    523e:	cf 91       	pop	r28
    5240:	08 95       	ret

00005242 <status_leds_ledOn>:
    5242:	28 2f       	mov	r18, r24
    5244:	30 e0       	ldi	r19, 0x00	; 0
    5246:	f9 01       	movw	r30, r18
    5248:	ee 0f       	add	r30, r30
    524a:	ff 1f       	adc	r31, r31
    524c:	e2 0f       	add	r30, r18
    524e:	f3 1f       	adc	r31, r19
    5250:	ee 0f       	add	r30, r30
    5252:	ff 1f       	adc	r31, r31
    5254:	e0 5b       	subi	r30, 0xB0	; 176
    5256:	f9 4e       	sbci	r31, 0xE9	; 233
    5258:	93 e0       	ldi	r25, 0x03	; 3
    525a:	94 83       	std	Z+4, r25	; 0x04
    525c:	cc ce       	rjmp	.-616    	; 0x4ff6 <_turn_on>
    525e:	08 95       	ret

00005260 <status_leds_ledOff>:
    5260:	28 2f       	mov	r18, r24
    5262:	30 e0       	ldi	r19, 0x00	; 0
    5264:	f9 01       	movw	r30, r18
    5266:	ee 0f       	add	r30, r30
    5268:	ff 1f       	adc	r31, r31
    526a:	e2 0f       	add	r30, r18
    526c:	f3 1f       	adc	r31, r19
    526e:	ee 0f       	add	r30, r30
    5270:	ff 1f       	adc	r31, r31
    5272:	e0 5b       	subi	r30, 0xB0	; 176
    5274:	f9 4e       	sbci	r31, 0xE9	; 233
    5276:	94 e0       	ldi	r25, 0x04	; 4
    5278:	94 83       	std	Z+4, r25	; 0x04
    527a:	71 ce       	rjmp	.-798    	; 0x4f5e <_turn_off>
    527c:	08 95       	ret

0000527e <status_leds_longPuls>:
    527e:	90 e0       	ldi	r25, 0x00	; 0
    5280:	fc 01       	movw	r30, r24
    5282:	ee 0f       	add	r30, r30
    5284:	ff 1f       	adc	r31, r31
    5286:	df 01       	movw	r26, r30
    5288:	a8 0f       	add	r26, r24
    528a:	b9 1f       	adc	r27, r25
    528c:	aa 0f       	add	r26, r26
    528e:	bb 1f       	adc	r27, r27
    5290:	a0 5b       	subi	r26, 0xB0	; 176
    5292:	b9 4e       	sbci	r27, 0xE9	; 233
    5294:	24 e0       	ldi	r18, 0x04	; 4
    5296:	15 96       	adiw	r26, 0x05	; 5
    5298:	2c 93       	st	X, r18
    529a:	15 97       	sbiw	r26, 0x05	; 5
    529c:	fd 01       	movw	r30, r26
    529e:	14 82       	std	Z+4, r1	; 0x04
    52a0:	08 95       	ret

000052a2 <status_leds_shortPuls>:
    52a2:	90 e0       	ldi	r25, 0x00	; 0
    52a4:	fc 01       	movw	r30, r24
    52a6:	ee 0f       	add	r30, r30
    52a8:	ff 1f       	adc	r31, r31
    52aa:	df 01       	movw	r26, r30
    52ac:	a8 0f       	add	r26, r24
    52ae:	b9 1f       	adc	r27, r25
    52b0:	aa 0f       	add	r26, r26
    52b2:	bb 1f       	adc	r27, r27
    52b4:	a0 5b       	subi	r26, 0xB0	; 176
    52b6:	b9 4e       	sbci	r27, 0xE9	; 233
    52b8:	21 e0       	ldi	r18, 0x01	; 1
    52ba:	15 96       	adiw	r26, 0x05	; 5
    52bc:	2c 93       	st	X, r18
    52be:	15 97       	sbiw	r26, 0x05	; 5
    52c0:	fd 01       	movw	r30, r26
    52c2:	14 82       	std	Z+4, r1	; 0x04
    52c4:	08 95       	ret

000052c6 <_initTwiInterface>:
    52c6:	80 91 76 16 	lds	r24, 0x1676	; 0x801676 <_twiIsInitiated>
    52ca:	81 11       	cpse	r24, r1
    52cc:	0c c0       	rjmp	.+24     	; 0x52e6 <_initTwiInterface+0x20>
    52ce:	8c e0       	ldi	r24, 0x0C	; 12
    52d0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    52d4:	8f ef       	ldi	r24, 0xFF	; 255
    52d6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    52da:	84 e0       	ldi	r24, 0x04	; 4
    52dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    52e0:	81 e0       	ldi	r24, 0x01	; 1
    52e2:	80 93 76 16 	sts	0x1676, r24	; 0x801676 <_twiIsInitiated>
    52e6:	08 95       	ret

000052e8 <twiCreate>:
    52e8:	af 92       	push	r10
    52ea:	bf 92       	push	r11
    52ec:	cf 92       	push	r12
    52ee:	df 92       	push	r13
    52f0:	ef 92       	push	r14
    52f2:	ff 92       	push	r15
    52f4:	0f 93       	push	r16
    52f6:	1f 93       	push	r17
    52f8:	cf 93       	push	r28
    52fa:	df 93       	push	r29
    52fc:	a8 2e       	mov	r10, r24
    52fe:	b6 2e       	mov	r11, r22
    5300:	69 01       	movw	r12, r18
    5302:	7a 01       	movw	r14, r20
    5304:	84 e0       	ldi	r24, 0x04	; 4
    5306:	90 e0       	ldi	r25, 0x00	; 0
    5308:	8a d7       	rcall	.+3860   	; 0x621e <malloc>
    530a:	ec 01       	movw	r28, r24
    530c:	89 2b       	or	r24, r25
    530e:	61 f1       	breq	.+88     	; 0x5368 <twiCreate+0x80>
    5310:	a8 82       	st	Y, r10
    5312:	81 e0       	ldi	r24, 0x01	; 1
    5314:	b8 12       	cpse	r11, r24
    5316:	12 c0       	rjmp	.+36     	; 0x533c <twiCreate+0x54>
    5318:	c7 01       	movw	r24, r14
    531a:	b6 01       	movw	r22, r12
    531c:	20 ea       	ldi	r18, 0xA0	; 160
    531e:	36 e8       	ldi	r19, 0x86	; 134
    5320:	41 e0       	ldi	r20, 0x01	; 1
    5322:	50 e0       	ldi	r21, 0x00	; 0
    5324:	15 d7       	rcall	.+3626   	; 0x6150 <__udivmodsi4>
    5326:	da 01       	movw	r26, r20
    5328:	c9 01       	movw	r24, r18
    532a:	40 97       	sbiw	r24, 0x10	; 16
    532c:	a1 09       	sbc	r26, r1
    532e:	b1 09       	sbc	r27, r1
    5330:	b6 95       	lsr	r27
    5332:	a7 95       	ror	r26
    5334:	97 95       	ror	r25
    5336:	87 95       	ror	r24
    5338:	89 83       	std	Y+1, r24	; 0x01
    533a:	11 c0       	rjmp	.+34     	; 0x535e <twiCreate+0x76>
    533c:	c7 01       	movw	r24, r14
    533e:	b6 01       	movw	r22, r12
    5340:	20 e8       	ldi	r18, 0x80	; 128
    5342:	3a e1       	ldi	r19, 0x1A	; 26
    5344:	46 e0       	ldi	r20, 0x06	; 6
    5346:	50 e0       	ldi	r21, 0x00	; 0
    5348:	03 d7       	rcall	.+3590   	; 0x6150 <__udivmodsi4>
    534a:	da 01       	movw	r26, r20
    534c:	c9 01       	movw	r24, r18
    534e:	40 97       	sbiw	r24, 0x10	; 16
    5350:	a1 09       	sbc	r26, r1
    5352:	b1 09       	sbc	r27, r1
    5354:	b6 95       	lsr	r27
    5356:	a7 95       	ror	r26
    5358:	97 95       	ror	r25
    535a:	87 95       	ror	r24
    535c:	89 83       	std	Y+1, r24	; 0x01
    535e:	1b 83       	std	Y+3, r17	; 0x03
    5360:	0a 83       	std	Y+2, r16	; 0x02
    5362:	8c 2f       	mov	r24, r28
    5364:	9d 2f       	mov	r25, r29
    5366:	02 c0       	rjmp	.+4      	; 0x536c <twiCreate+0x84>
    5368:	80 e0       	ldi	r24, 0x00	; 0
    536a:	90 e0       	ldi	r25, 0x00	; 0
    536c:	df 91       	pop	r29
    536e:	cf 91       	pop	r28
    5370:	1f 91       	pop	r17
    5372:	0f 91       	pop	r16
    5374:	ff 90       	pop	r15
    5376:	ef 90       	pop	r14
    5378:	df 90       	pop	r13
    537a:	cf 90       	pop	r12
    537c:	bf 90       	pop	r11
    537e:	af 90       	pop	r10
    5380:	08 95       	ret

00005382 <twiIsBusy>:
    5382:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5386:	81 70       	andi	r24, 0x01	; 1
    5388:	08 95       	ret

0000538a <twiTransmit>:
    538a:	ff 92       	push	r15
    538c:	0f 93       	push	r16
    538e:	1f 93       	push	r17
    5390:	cf 93       	push	r28
    5392:	df 93       	push	r29
    5394:	00 97       	sbiw	r24, 0x00	; 0
    5396:	d1 f1       	breq	.+116    	; 0x540c <twiTransmit+0x82>
    5398:	4a 30       	cpi	r20, 0x0A	; 10
    539a:	d0 f5       	brcc	.+116    	; 0x5410 <twiTransmit+0x86>
    539c:	f4 2e       	mov	r15, r20
    539e:	8b 01       	movw	r16, r22
    53a0:	ec 01       	movw	r28, r24
    53a2:	ef df       	rcall	.-34     	; 0x5382 <twiIsBusy>
    53a4:	81 11       	cpse	r24, r1
    53a6:	36 c0       	rjmp	.+108    	; 0x5414 <twiTransmit+0x8a>
    53a8:	80 91 69 16 	lds	r24, 0x1669	; 0x801669 <_twiCurrentHandler>
    53ac:	90 91 6a 16 	lds	r25, 0x166A	; 0x80166a <_twiCurrentHandler+0x1>
    53b0:	c8 17       	cp	r28, r24
    53b2:	d9 07       	cpc	r29, r25
    53b4:	41 f0       	breq	.+16     	; 0x53c6 <twiTransmit+0x3c>
    53b6:	87 df       	rcall	.-242    	; 0x52c6 <_initTwiInterface>
    53b8:	89 81       	ldd	r24, Y+1	; 0x01
    53ba:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    53be:	d0 93 6a 16 	sts	0x166A, r29	; 0x80166a <_twiCurrentHandler+0x1>
    53c2:	c0 93 69 16 	sts	0x1669, r28	; 0x801669 <_twiCurrentHandler>
    53c6:	81 e0       	ldi	r24, 0x01	; 1
    53c8:	8f 0d       	add	r24, r15
    53ca:	80 93 6b 16 	sts	0x166B, r24	; 0x80166b <_twiMessageLen>
    53ce:	88 81       	ld	r24, Y
    53d0:	88 0f       	add	r24, r24
    53d2:	80 93 6c 16 	sts	0x166C, r24	; 0x80166c <_twiMessageBuffer>
    53d6:	ff 20       	and	r15, r15
    53d8:	89 f0       	breq	.+34     	; 0x53fc <twiTransmit+0x72>
    53da:	f8 01       	movw	r30, r16
    53dc:	ad e6       	ldi	r26, 0x6D	; 109
    53de:	b6 e1       	ldi	r27, 0x16	; 22
    53e0:	4f ef       	ldi	r20, 0xFF	; 255
    53e2:	4f 0d       	add	r20, r15
    53e4:	64 2f       	mov	r22, r20
    53e6:	70 e0       	ldi	r23, 0x00	; 0
    53e8:	cb 01       	movw	r24, r22
    53ea:	01 96       	adiw	r24, 0x01	; 1
    53ec:	b8 01       	movw	r22, r16
    53ee:	68 0f       	add	r22, r24
    53f0:	79 1f       	adc	r23, r25
    53f2:	81 91       	ld	r24, Z+
    53f4:	8d 93       	st	X+, r24
    53f6:	e6 17       	cp	r30, r22
    53f8:	f7 07       	cpc	r31, r23
    53fa:	d9 f7       	brne	.-10     	; 0x53f2 <twiTransmit+0x68>
    53fc:	88 ef       	ldi	r24, 0xF8	; 248
    53fe:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5402:	85 ea       	ldi	r24, 0xA5	; 165
    5404:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5408:	84 e0       	ldi	r24, 0x04	; 4
    540a:	05 c0       	rjmp	.+10     	; 0x5416 <twiTransmit+0x8c>
    540c:	86 e0       	ldi	r24, 0x06	; 6
    540e:	03 c0       	rjmp	.+6      	; 0x5416 <twiTransmit+0x8c>
    5410:	87 e0       	ldi	r24, 0x07	; 7
    5412:	01 c0       	rjmp	.+2      	; 0x5416 <twiTransmit+0x8c>
    5414:	82 e0       	ldi	r24, 0x02	; 2
    5416:	df 91       	pop	r29
    5418:	cf 91       	pop	r28
    541a:	1f 91       	pop	r17
    541c:	0f 91       	pop	r16
    541e:	ff 90       	pop	r15
    5420:	08 95       	ret

00005422 <twiReceive>:
    5422:	1f 93       	push	r17
    5424:	cf 93       	push	r28
    5426:	df 93       	push	r29
    5428:	00 97       	sbiw	r24, 0x00	; 0
    542a:	29 f1       	breq	.+74     	; 0x5476 <twiReceive+0x54>
    542c:	6b 30       	cpi	r22, 0x0B	; 11
    542e:	28 f5       	brcc	.+74     	; 0x547a <twiReceive+0x58>
    5430:	16 2f       	mov	r17, r22
    5432:	ec 01       	movw	r28, r24
    5434:	a6 df       	rcall	.-180    	; 0x5382 <twiIsBusy>
    5436:	81 11       	cpse	r24, r1
    5438:	22 c0       	rjmp	.+68     	; 0x547e <twiReceive+0x5c>
    543a:	80 91 69 16 	lds	r24, 0x1669	; 0x801669 <_twiCurrentHandler>
    543e:	90 91 6a 16 	lds	r25, 0x166A	; 0x80166a <_twiCurrentHandler+0x1>
    5442:	c8 17       	cp	r28, r24
    5444:	d9 07       	cpc	r29, r25
    5446:	41 f0       	breq	.+16     	; 0x5458 <twiReceive+0x36>
    5448:	3e df       	rcall	.-388    	; 0x52c6 <_initTwiInterface>
    544a:	89 81       	ldd	r24, Y+1	; 0x01
    544c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5450:	d0 93 6a 16 	sts	0x166A, r29	; 0x80166a <_twiCurrentHandler+0x1>
    5454:	c0 93 69 16 	sts	0x1669, r28	; 0x801669 <_twiCurrentHandler>
    5458:	10 93 6b 16 	sts	0x166B, r17	; 0x80166b <_twiMessageLen>
    545c:	88 81       	ld	r24, Y
    545e:	88 0f       	add	r24, r24
    5460:	81 60       	ori	r24, 0x01	; 1
    5462:	80 93 6c 16 	sts	0x166C, r24	; 0x80166c <_twiMessageBuffer>
    5466:	88 ef       	ldi	r24, 0xF8	; 248
    5468:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    546c:	85 ea       	ldi	r24, 0xA5	; 165
    546e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5472:	85 e0       	ldi	r24, 0x05	; 5
    5474:	05 c0       	rjmp	.+10     	; 0x5480 <twiReceive+0x5e>
    5476:	86 e0       	ldi	r24, 0x06	; 6
    5478:	03 c0       	rjmp	.+6      	; 0x5480 <twiReceive+0x5e>
    547a:	87 e0       	ldi	r24, 0x07	; 7
    547c:	01 c0       	rjmp	.+2      	; 0x5480 <twiReceive+0x5e>
    547e:	82 e0       	ldi	r24, 0x02	; 2
    5480:	df 91       	pop	r29
    5482:	cf 91       	pop	r28
    5484:	1f 91       	pop	r17
    5486:	08 95       	ret

00005488 <__vector_39>:
    5488:	1f 92       	push	r1
    548a:	0f 92       	push	r0
    548c:	0f b6       	in	r0, 0x3f	; 63
    548e:	0f 92       	push	r0
    5490:	11 24       	eor	r1, r1
    5492:	0b b6       	in	r0, 0x3b	; 59
    5494:	0f 92       	push	r0
    5496:	2f 93       	push	r18
    5498:	3f 93       	push	r19
    549a:	4f 93       	push	r20
    549c:	5f 93       	push	r21
    549e:	6f 93       	push	r22
    54a0:	7f 93       	push	r23
    54a2:	8f 93       	push	r24
    54a4:	9f 93       	push	r25
    54a6:	af 93       	push	r26
    54a8:	bf 93       	push	r27
    54aa:	ef 93       	push	r30
    54ac:	ff 93       	push	r31
    54ae:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    54b2:	8e 2f       	mov	r24, r30
    54b4:	90 e0       	ldi	r25, 0x00	; 0
    54b6:	fc 01       	movw	r30, r24
    54b8:	38 97       	sbiw	r30, 0x08	; 8
    54ba:	e1 35       	cpi	r30, 0x51	; 81
    54bc:	f1 05       	cpc	r31, r1
    54be:	08 f0       	brcs	.+2      	; 0x54c2 <__vector_39+0x3a>
    54c0:	75 c0       	rjmp	.+234    	; 0x55ac <__vector_39+0x124>
    54c2:	88 27       	eor	r24, r24
    54c4:	e4 58       	subi	r30, 0x84	; 132
    54c6:	ff 4f       	sbci	r31, 0xFF	; 255
    54c8:	8f 4f       	sbci	r24, 0xFF	; 255
    54ca:	64 c6       	rjmp	.+3272   	; 0x6194 <__tablejump2__>
    54cc:	10 92 68 16 	sts	0x1668, r1	; 0x801668 <_index.1885>
    54d0:	e0 91 68 16 	lds	r30, 0x1668	; 0x801668 <_index.1885>
    54d4:	80 91 6b 16 	lds	r24, 0x166B	; 0x80166b <_twiMessageLen>
    54d8:	e8 17       	cp	r30, r24
    54da:	70 f4       	brcc	.+28     	; 0x54f8 <__vector_39+0x70>
    54dc:	81 e0       	ldi	r24, 0x01	; 1
    54de:	8e 0f       	add	r24, r30
    54e0:	80 93 68 16 	sts	0x1668, r24	; 0x801668 <_index.1885>
    54e4:	f0 e0       	ldi	r31, 0x00	; 0
    54e6:	e4 59       	subi	r30, 0x94	; 148
    54e8:	f9 4e       	sbci	r31, 0xE9	; 233
    54ea:	80 81       	ld	r24, Z
    54ec:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    54f0:	85 e8       	ldi	r24, 0x85	; 133
    54f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54f6:	72 c0       	rjmp	.+228    	; 0x55dc <__vector_39+0x154>
    54f8:	84 e9       	ldi	r24, 0x94	; 148
    54fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54fe:	80 91 69 16 	lds	r24, 0x1669	; 0x801669 <_twiCurrentHandler>
    5502:	90 91 6a 16 	lds	r25, 0x166A	; 0x80166a <_twiCurrentHandler+0x1>
    5506:	dc 01       	movw	r26, r24
    5508:	12 96       	adiw	r26, 0x02	; 2
    550a:	ed 91       	ld	r30, X+
    550c:	fc 91       	ld	r31, X
    550e:	13 97       	sbiw	r26, 0x03	; 3
    5510:	30 97       	sbiw	r30, 0x00	; 0
    5512:	09 f4       	brne	.+2      	; 0x5516 <__vector_39+0x8e>
    5514:	63 c0       	rjmp	.+198    	; 0x55dc <__vector_39+0x154>
    5516:	20 e0       	ldi	r18, 0x00	; 0
    5518:	40 e0       	ldi	r20, 0x00	; 0
    551a:	50 e0       	ldi	r21, 0x00	; 0
    551c:	64 e0       	ldi	r22, 0x04	; 4
    551e:	19 95       	eicall
    5520:	5d c0       	rjmp	.+186    	; 0x55dc <__vector_39+0x154>
    5522:	e0 91 68 16 	lds	r30, 0x1668	; 0x801668 <_index.1885>
    5526:	81 e0       	ldi	r24, 0x01	; 1
    5528:	8e 0f       	add	r24, r30
    552a:	80 93 68 16 	sts	0x1668, r24	; 0x801668 <_index.1885>
    552e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5532:	f0 e0       	ldi	r31, 0x00	; 0
    5534:	e4 59       	subi	r30, 0x94	; 148
    5536:	f9 4e       	sbci	r31, 0xE9	; 233
    5538:	80 83       	st	Z, r24
    553a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    553e:	80 34       	cpi	r24, 0x40	; 64
    5540:	11 f4       	brne	.+4      	; 0x5546 <__vector_39+0xbe>
    5542:	10 92 68 16 	sts	0x1668, r1	; 0x801668 <_index.1885>
    5546:	20 91 68 16 	lds	r18, 0x1668	; 0x801668 <_index.1885>
    554a:	30 e0       	ldi	r19, 0x00	; 0
    554c:	80 91 6b 16 	lds	r24, 0x166B	; 0x80166b <_twiMessageLen>
    5550:	90 e0       	ldi	r25, 0x00	; 0
    5552:	01 97       	sbiw	r24, 0x01	; 1
    5554:	28 17       	cp	r18, r24
    5556:	39 07       	cpc	r19, r25
    5558:	24 f4       	brge	.+8      	; 0x5562 <__vector_39+0xda>
    555a:	85 ec       	ldi	r24, 0xC5	; 197
    555c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5560:	3d c0       	rjmp	.+122    	; 0x55dc <__vector_39+0x154>
    5562:	85 e8       	ldi	r24, 0x85	; 133
    5564:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5568:	39 c0       	rjmp	.+114    	; 0x55dc <__vector_39+0x154>
    556a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    556e:	e0 91 68 16 	lds	r30, 0x1668	; 0x801668 <_index.1885>
    5572:	f0 e0       	ldi	r31, 0x00	; 0
    5574:	e4 59       	subi	r30, 0x94	; 148
    5576:	f9 4e       	sbci	r31, 0xE9	; 233
    5578:	80 83       	st	Z, r24
    557a:	84 e9       	ldi	r24, 0x94	; 148
    557c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5580:	80 91 69 16 	lds	r24, 0x1669	; 0x801669 <_twiCurrentHandler>
    5584:	90 91 6a 16 	lds	r25, 0x166A	; 0x80166a <_twiCurrentHandler+0x1>
    5588:	dc 01       	movw	r26, r24
    558a:	12 96       	adiw	r26, 0x02	; 2
    558c:	ed 91       	ld	r30, X+
    558e:	fc 91       	ld	r31, X
    5590:	13 97       	sbiw	r26, 0x03	; 3
    5592:	30 97       	sbiw	r30, 0x00	; 0
    5594:	19 f1       	breq	.+70     	; 0x55dc <__vector_39+0x154>
    5596:	20 91 6b 16 	lds	r18, 0x166B	; 0x80166b <_twiMessageLen>
    559a:	4c e6       	ldi	r20, 0x6C	; 108
    559c:	56 e1       	ldi	r21, 0x16	; 22
    559e:	65 e0       	ldi	r22, 0x05	; 5
    55a0:	19 95       	eicall
    55a2:	1c c0       	rjmp	.+56     	; 0x55dc <__vector_39+0x154>
    55a4:	85 ea       	ldi	r24, 0xA5	; 165
    55a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55aa:	18 c0       	rjmp	.+48     	; 0x55dc <__vector_39+0x154>
    55ac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    55b0:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    55b4:	84 e0       	ldi	r24, 0x04	; 4
    55b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55ba:	80 91 69 16 	lds	r24, 0x1669	; 0x801669 <_twiCurrentHandler>
    55be:	90 91 6a 16 	lds	r25, 0x166A	; 0x80166a <_twiCurrentHandler+0x1>
    55c2:	dc 01       	movw	r26, r24
    55c4:	12 96       	adiw	r26, 0x02	; 2
    55c6:	ed 91       	ld	r30, X+
    55c8:	fc 91       	ld	r31, X
    55ca:	13 97       	sbiw	r26, 0x03	; 3
    55cc:	30 97       	sbiw	r30, 0x00	; 0
    55ce:	31 f0       	breq	.+12     	; 0x55dc <__vector_39+0x154>
    55d0:	20 e0       	ldi	r18, 0x00	; 0
    55d2:	40 e0       	ldi	r20, 0x00	; 0
    55d4:	50 e0       	ldi	r21, 0x00	; 0
    55d6:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    55da:	19 95       	eicall
    55dc:	ff 91       	pop	r31
    55de:	ef 91       	pop	r30
    55e0:	bf 91       	pop	r27
    55e2:	af 91       	pop	r26
    55e4:	9f 91       	pop	r25
    55e6:	8f 91       	pop	r24
    55e8:	7f 91       	pop	r23
    55ea:	6f 91       	pop	r22
    55ec:	5f 91       	pop	r21
    55ee:	4f 91       	pop	r20
    55f0:	3f 91       	pop	r19
    55f2:	2f 91       	pop	r18
    55f4:	0f 90       	pop	r0
    55f6:	0b be       	out	0x3b, r0	; 59
    55f8:	0f 90       	pop	r0
    55fa:	0f be       	out	0x3f, r0	; 63
    55fc:	0f 90       	pop	r0
    55fe:	1f 90       	pop	r1
    5600:	18 95       	reti

00005602 <fifo_init>:
    5602:	fc 01       	movw	r30, r24
    5604:	41 11       	cpse	r20, r1
    5606:	01 c0       	rjmp	.+2      	; 0x560a <fifo_init+0x8>
    5608:	2b d7       	rcall	.+3670   	; 0x6460 <abort>
    560a:	84 2f       	mov	r24, r20
    560c:	90 e0       	ldi	r25, 0x00	; 0
    560e:	9c 01       	movw	r18, r24
    5610:	21 50       	subi	r18, 0x01	; 1
    5612:	31 09       	sbc	r19, r1
    5614:	82 23       	and	r24, r18
    5616:	93 23       	and	r25, r19
    5618:	89 2b       	or	r24, r25
    561a:	09 f0       	breq	.+2      	; 0x561e <fifo_init+0x1c>
    561c:	21 d7       	rcall	.+3650   	; 0x6460 <abort>
    561e:	41 38       	cpi	r20, 0x81	; 129
    5620:	08 f0       	brcs	.+2      	; 0x5624 <fifo_init+0x22>
    5622:	1e d7       	rcall	.+3644   	; 0x6460 <abort>
    5624:	12 82       	std	Z+2, r1	; 0x02
    5626:	13 82       	std	Z+3, r1	; 0x03
    5628:	44 83       	std	Z+4, r20	; 0x04
    562a:	44 0f       	add	r20, r20
    562c:	41 50       	subi	r20, 0x01	; 1
    562e:	45 83       	std	Z+5, r20	; 0x05
    5630:	71 83       	std	Z+1, r23	; 0x01
    5632:	60 83       	st	Z, r22
    5634:	80 e0       	ldi	r24, 0x00	; 0
    5636:	90 e0       	ldi	r25, 0x00	; 0
    5638:	08 95       	ret

0000563a <__subsf3>:
    563a:	50 58       	subi	r21, 0x80	; 128

0000563c <__addsf3>:
    563c:	bb 27       	eor	r27, r27
    563e:	aa 27       	eor	r26, r26
    5640:	0e d0       	rcall	.+28     	; 0x565e <__addsf3x>
    5642:	4d c1       	rjmp	.+666    	; 0x58de <__fp_round>
    5644:	3e d1       	rcall	.+636    	; 0x58c2 <__fp_pscA>
    5646:	30 f0       	brcs	.+12     	; 0x5654 <__addsf3+0x18>
    5648:	43 d1       	rcall	.+646    	; 0x58d0 <__fp_pscB>
    564a:	20 f0       	brcs	.+8      	; 0x5654 <__addsf3+0x18>
    564c:	31 f4       	brne	.+12     	; 0x565a <__addsf3+0x1e>
    564e:	9f 3f       	cpi	r25, 0xFF	; 255
    5650:	11 f4       	brne	.+4      	; 0x5656 <__addsf3+0x1a>
    5652:	1e f4       	brtc	.+6      	; 0x565a <__addsf3+0x1e>
    5654:	33 c1       	rjmp	.+614    	; 0x58bc <__fp_nan>
    5656:	0e f4       	brtc	.+2      	; 0x565a <__addsf3+0x1e>
    5658:	e0 95       	com	r30
    565a:	e7 fb       	bst	r30, 7
    565c:	29 c1       	rjmp	.+594    	; 0x58b0 <__fp_inf>

0000565e <__addsf3x>:
    565e:	e9 2f       	mov	r30, r25
    5660:	4f d1       	rcall	.+670    	; 0x5900 <__fp_split3>
    5662:	80 f3       	brcs	.-32     	; 0x5644 <__addsf3+0x8>
    5664:	ba 17       	cp	r27, r26
    5666:	62 07       	cpc	r22, r18
    5668:	73 07       	cpc	r23, r19
    566a:	84 07       	cpc	r24, r20
    566c:	95 07       	cpc	r25, r21
    566e:	18 f0       	brcs	.+6      	; 0x5676 <__addsf3x+0x18>
    5670:	71 f4       	brne	.+28     	; 0x568e <__addsf3x+0x30>
    5672:	9e f5       	brtc	.+102    	; 0x56da <__addsf3x+0x7c>
    5674:	67 c1       	rjmp	.+718    	; 0x5944 <__fp_zero>
    5676:	0e f4       	brtc	.+2      	; 0x567a <__addsf3x+0x1c>
    5678:	e0 95       	com	r30
    567a:	0b 2e       	mov	r0, r27
    567c:	ba 2f       	mov	r27, r26
    567e:	a0 2d       	mov	r26, r0
    5680:	0b 01       	movw	r0, r22
    5682:	b9 01       	movw	r22, r18
    5684:	90 01       	movw	r18, r0
    5686:	0c 01       	movw	r0, r24
    5688:	ca 01       	movw	r24, r20
    568a:	a0 01       	movw	r20, r0
    568c:	11 24       	eor	r1, r1
    568e:	ff 27       	eor	r31, r31
    5690:	59 1b       	sub	r21, r25
    5692:	99 f0       	breq	.+38     	; 0x56ba <__addsf3x+0x5c>
    5694:	59 3f       	cpi	r21, 0xF9	; 249
    5696:	50 f4       	brcc	.+20     	; 0x56ac <__addsf3x+0x4e>
    5698:	50 3e       	cpi	r21, 0xE0	; 224
    569a:	68 f1       	brcs	.+90     	; 0x56f6 <__addsf3x+0x98>
    569c:	1a 16       	cp	r1, r26
    569e:	f0 40       	sbci	r31, 0x00	; 0
    56a0:	a2 2f       	mov	r26, r18
    56a2:	23 2f       	mov	r18, r19
    56a4:	34 2f       	mov	r19, r20
    56a6:	44 27       	eor	r20, r20
    56a8:	58 5f       	subi	r21, 0xF8	; 248
    56aa:	f3 cf       	rjmp	.-26     	; 0x5692 <__addsf3x+0x34>
    56ac:	46 95       	lsr	r20
    56ae:	37 95       	ror	r19
    56b0:	27 95       	ror	r18
    56b2:	a7 95       	ror	r26
    56b4:	f0 40       	sbci	r31, 0x00	; 0
    56b6:	53 95       	inc	r21
    56b8:	c9 f7       	brne	.-14     	; 0x56ac <__addsf3x+0x4e>
    56ba:	7e f4       	brtc	.+30     	; 0x56da <__addsf3x+0x7c>
    56bc:	1f 16       	cp	r1, r31
    56be:	ba 0b       	sbc	r27, r26
    56c0:	62 0b       	sbc	r22, r18
    56c2:	73 0b       	sbc	r23, r19
    56c4:	84 0b       	sbc	r24, r20
    56c6:	ba f0       	brmi	.+46     	; 0x56f6 <__addsf3x+0x98>
    56c8:	91 50       	subi	r25, 0x01	; 1
    56ca:	a1 f0       	breq	.+40     	; 0x56f4 <__addsf3x+0x96>
    56cc:	ff 0f       	add	r31, r31
    56ce:	bb 1f       	adc	r27, r27
    56d0:	66 1f       	adc	r22, r22
    56d2:	77 1f       	adc	r23, r23
    56d4:	88 1f       	adc	r24, r24
    56d6:	c2 f7       	brpl	.-16     	; 0x56c8 <__addsf3x+0x6a>
    56d8:	0e c0       	rjmp	.+28     	; 0x56f6 <__addsf3x+0x98>
    56da:	ba 0f       	add	r27, r26
    56dc:	62 1f       	adc	r22, r18
    56de:	73 1f       	adc	r23, r19
    56e0:	84 1f       	adc	r24, r20
    56e2:	48 f4       	brcc	.+18     	; 0x56f6 <__addsf3x+0x98>
    56e4:	87 95       	ror	r24
    56e6:	77 95       	ror	r23
    56e8:	67 95       	ror	r22
    56ea:	b7 95       	ror	r27
    56ec:	f7 95       	ror	r31
    56ee:	9e 3f       	cpi	r25, 0xFE	; 254
    56f0:	08 f0       	brcs	.+2      	; 0x56f4 <__addsf3x+0x96>
    56f2:	b3 cf       	rjmp	.-154    	; 0x565a <__addsf3+0x1e>
    56f4:	93 95       	inc	r25
    56f6:	88 0f       	add	r24, r24
    56f8:	08 f0       	brcs	.+2      	; 0x56fc <__addsf3x+0x9e>
    56fa:	99 27       	eor	r25, r25
    56fc:	ee 0f       	add	r30, r30
    56fe:	97 95       	ror	r25
    5700:	87 95       	ror	r24
    5702:	08 95       	ret

00005704 <__divsf3>:
    5704:	0c d0       	rcall	.+24     	; 0x571e <__divsf3x>
    5706:	eb c0       	rjmp	.+470    	; 0x58de <__fp_round>
    5708:	e3 d0       	rcall	.+454    	; 0x58d0 <__fp_pscB>
    570a:	40 f0       	brcs	.+16     	; 0x571c <__divsf3+0x18>
    570c:	da d0       	rcall	.+436    	; 0x58c2 <__fp_pscA>
    570e:	30 f0       	brcs	.+12     	; 0x571c <__divsf3+0x18>
    5710:	21 f4       	brne	.+8      	; 0x571a <__divsf3+0x16>
    5712:	5f 3f       	cpi	r21, 0xFF	; 255
    5714:	19 f0       	breq	.+6      	; 0x571c <__divsf3+0x18>
    5716:	cc c0       	rjmp	.+408    	; 0x58b0 <__fp_inf>
    5718:	51 11       	cpse	r21, r1
    571a:	15 c1       	rjmp	.+554    	; 0x5946 <__fp_szero>
    571c:	cf c0       	rjmp	.+414    	; 0x58bc <__fp_nan>

0000571e <__divsf3x>:
    571e:	f0 d0       	rcall	.+480    	; 0x5900 <__fp_split3>
    5720:	98 f3       	brcs	.-26     	; 0x5708 <__divsf3+0x4>

00005722 <__divsf3_pse>:
    5722:	99 23       	and	r25, r25
    5724:	c9 f3       	breq	.-14     	; 0x5718 <__divsf3+0x14>
    5726:	55 23       	and	r21, r21
    5728:	b1 f3       	breq	.-20     	; 0x5716 <__divsf3+0x12>
    572a:	95 1b       	sub	r25, r21
    572c:	55 0b       	sbc	r21, r21
    572e:	bb 27       	eor	r27, r27
    5730:	aa 27       	eor	r26, r26
    5732:	62 17       	cp	r22, r18
    5734:	73 07       	cpc	r23, r19
    5736:	84 07       	cpc	r24, r20
    5738:	38 f0       	brcs	.+14     	; 0x5748 <__divsf3_pse+0x26>
    573a:	9f 5f       	subi	r25, 0xFF	; 255
    573c:	5f 4f       	sbci	r21, 0xFF	; 255
    573e:	22 0f       	add	r18, r18
    5740:	33 1f       	adc	r19, r19
    5742:	44 1f       	adc	r20, r20
    5744:	aa 1f       	adc	r26, r26
    5746:	a9 f3       	breq	.-22     	; 0x5732 <__divsf3_pse+0x10>
    5748:	33 d0       	rcall	.+102    	; 0x57b0 <__divsf3_pse+0x8e>
    574a:	0e 2e       	mov	r0, r30
    574c:	3a f0       	brmi	.+14     	; 0x575c <__divsf3_pse+0x3a>
    574e:	e0 e8       	ldi	r30, 0x80	; 128
    5750:	30 d0       	rcall	.+96     	; 0x57b2 <__divsf3_pse+0x90>
    5752:	91 50       	subi	r25, 0x01	; 1
    5754:	50 40       	sbci	r21, 0x00	; 0
    5756:	e6 95       	lsr	r30
    5758:	00 1c       	adc	r0, r0
    575a:	ca f7       	brpl	.-14     	; 0x574e <__divsf3_pse+0x2c>
    575c:	29 d0       	rcall	.+82     	; 0x57b0 <__divsf3_pse+0x8e>
    575e:	fe 2f       	mov	r31, r30
    5760:	27 d0       	rcall	.+78     	; 0x57b0 <__divsf3_pse+0x8e>
    5762:	66 0f       	add	r22, r22
    5764:	77 1f       	adc	r23, r23
    5766:	88 1f       	adc	r24, r24
    5768:	bb 1f       	adc	r27, r27
    576a:	26 17       	cp	r18, r22
    576c:	37 07       	cpc	r19, r23
    576e:	48 07       	cpc	r20, r24
    5770:	ab 07       	cpc	r26, r27
    5772:	b0 e8       	ldi	r27, 0x80	; 128
    5774:	09 f0       	breq	.+2      	; 0x5778 <__divsf3_pse+0x56>
    5776:	bb 0b       	sbc	r27, r27
    5778:	80 2d       	mov	r24, r0
    577a:	bf 01       	movw	r22, r30
    577c:	ff 27       	eor	r31, r31
    577e:	93 58       	subi	r25, 0x83	; 131
    5780:	5f 4f       	sbci	r21, 0xFF	; 255
    5782:	2a f0       	brmi	.+10     	; 0x578e <__divsf3_pse+0x6c>
    5784:	9e 3f       	cpi	r25, 0xFE	; 254
    5786:	51 05       	cpc	r21, r1
    5788:	68 f0       	brcs	.+26     	; 0x57a4 <__divsf3_pse+0x82>
    578a:	92 c0       	rjmp	.+292    	; 0x58b0 <__fp_inf>
    578c:	dc c0       	rjmp	.+440    	; 0x5946 <__fp_szero>
    578e:	5f 3f       	cpi	r21, 0xFF	; 255
    5790:	ec f3       	brlt	.-6      	; 0x578c <__divsf3_pse+0x6a>
    5792:	98 3e       	cpi	r25, 0xE8	; 232
    5794:	dc f3       	brlt	.-10     	; 0x578c <__divsf3_pse+0x6a>
    5796:	86 95       	lsr	r24
    5798:	77 95       	ror	r23
    579a:	67 95       	ror	r22
    579c:	b7 95       	ror	r27
    579e:	f7 95       	ror	r31
    57a0:	9f 5f       	subi	r25, 0xFF	; 255
    57a2:	c9 f7       	brne	.-14     	; 0x5796 <__divsf3_pse+0x74>
    57a4:	88 0f       	add	r24, r24
    57a6:	91 1d       	adc	r25, r1
    57a8:	96 95       	lsr	r25
    57aa:	87 95       	ror	r24
    57ac:	97 f9       	bld	r25, 7
    57ae:	08 95       	ret
    57b0:	e1 e0       	ldi	r30, 0x01	; 1
    57b2:	66 0f       	add	r22, r22
    57b4:	77 1f       	adc	r23, r23
    57b6:	88 1f       	adc	r24, r24
    57b8:	bb 1f       	adc	r27, r27
    57ba:	62 17       	cp	r22, r18
    57bc:	73 07       	cpc	r23, r19
    57be:	84 07       	cpc	r24, r20
    57c0:	ba 07       	cpc	r27, r26
    57c2:	20 f0       	brcs	.+8      	; 0x57cc <__divsf3_pse+0xaa>
    57c4:	62 1b       	sub	r22, r18
    57c6:	73 0b       	sbc	r23, r19
    57c8:	84 0b       	sbc	r24, r20
    57ca:	ba 0b       	sbc	r27, r26
    57cc:	ee 1f       	adc	r30, r30
    57ce:	88 f7       	brcc	.-30     	; 0x57b2 <__divsf3_pse+0x90>
    57d0:	e0 95       	com	r30
    57d2:	08 95       	ret

000057d4 <__fixsfsi>:
    57d4:	04 d0       	rcall	.+8      	; 0x57de <__fixunssfsi>
    57d6:	68 94       	set
    57d8:	b1 11       	cpse	r27, r1
    57da:	b5 c0       	rjmp	.+362    	; 0x5946 <__fp_szero>
    57dc:	08 95       	ret

000057de <__fixunssfsi>:
    57de:	98 d0       	rcall	.+304    	; 0x5910 <__fp_splitA>
    57e0:	88 f0       	brcs	.+34     	; 0x5804 <__fixunssfsi+0x26>
    57e2:	9f 57       	subi	r25, 0x7F	; 127
    57e4:	90 f0       	brcs	.+36     	; 0x580a <__fixunssfsi+0x2c>
    57e6:	b9 2f       	mov	r27, r25
    57e8:	99 27       	eor	r25, r25
    57ea:	b7 51       	subi	r27, 0x17	; 23
    57ec:	a0 f0       	brcs	.+40     	; 0x5816 <__fixunssfsi+0x38>
    57ee:	d1 f0       	breq	.+52     	; 0x5824 <__fixunssfsi+0x46>
    57f0:	66 0f       	add	r22, r22
    57f2:	77 1f       	adc	r23, r23
    57f4:	88 1f       	adc	r24, r24
    57f6:	99 1f       	adc	r25, r25
    57f8:	1a f0       	brmi	.+6      	; 0x5800 <__fixunssfsi+0x22>
    57fa:	ba 95       	dec	r27
    57fc:	c9 f7       	brne	.-14     	; 0x57f0 <__fixunssfsi+0x12>
    57fe:	12 c0       	rjmp	.+36     	; 0x5824 <__fixunssfsi+0x46>
    5800:	b1 30       	cpi	r27, 0x01	; 1
    5802:	81 f0       	breq	.+32     	; 0x5824 <__fixunssfsi+0x46>
    5804:	9f d0       	rcall	.+318    	; 0x5944 <__fp_zero>
    5806:	b1 e0       	ldi	r27, 0x01	; 1
    5808:	08 95       	ret
    580a:	9c c0       	rjmp	.+312    	; 0x5944 <__fp_zero>
    580c:	67 2f       	mov	r22, r23
    580e:	78 2f       	mov	r23, r24
    5810:	88 27       	eor	r24, r24
    5812:	b8 5f       	subi	r27, 0xF8	; 248
    5814:	39 f0       	breq	.+14     	; 0x5824 <__fixunssfsi+0x46>
    5816:	b9 3f       	cpi	r27, 0xF9	; 249
    5818:	cc f3       	brlt	.-14     	; 0x580c <__fixunssfsi+0x2e>
    581a:	86 95       	lsr	r24
    581c:	77 95       	ror	r23
    581e:	67 95       	ror	r22
    5820:	b3 95       	inc	r27
    5822:	d9 f7       	brne	.-10     	; 0x581a <__fixunssfsi+0x3c>
    5824:	3e f4       	brtc	.+14     	; 0x5834 <__fixunssfsi+0x56>
    5826:	90 95       	com	r25
    5828:	80 95       	com	r24
    582a:	70 95       	com	r23
    582c:	61 95       	neg	r22
    582e:	7f 4f       	sbci	r23, 0xFF	; 255
    5830:	8f 4f       	sbci	r24, 0xFF	; 255
    5832:	9f 4f       	sbci	r25, 0xFF	; 255
    5834:	08 95       	ret

00005836 <__floatunsisf>:
    5836:	e8 94       	clt
    5838:	09 c0       	rjmp	.+18     	; 0x584c <__floatsisf+0x12>

0000583a <__floatsisf>:
    583a:	97 fb       	bst	r25, 7
    583c:	3e f4       	brtc	.+14     	; 0x584c <__floatsisf+0x12>
    583e:	90 95       	com	r25
    5840:	80 95       	com	r24
    5842:	70 95       	com	r23
    5844:	61 95       	neg	r22
    5846:	7f 4f       	sbci	r23, 0xFF	; 255
    5848:	8f 4f       	sbci	r24, 0xFF	; 255
    584a:	9f 4f       	sbci	r25, 0xFF	; 255
    584c:	99 23       	and	r25, r25
    584e:	a9 f0       	breq	.+42     	; 0x587a <__floatsisf+0x40>
    5850:	f9 2f       	mov	r31, r25
    5852:	96 e9       	ldi	r25, 0x96	; 150
    5854:	bb 27       	eor	r27, r27
    5856:	93 95       	inc	r25
    5858:	f6 95       	lsr	r31
    585a:	87 95       	ror	r24
    585c:	77 95       	ror	r23
    585e:	67 95       	ror	r22
    5860:	b7 95       	ror	r27
    5862:	f1 11       	cpse	r31, r1
    5864:	f8 cf       	rjmp	.-16     	; 0x5856 <__floatsisf+0x1c>
    5866:	fa f4       	brpl	.+62     	; 0x58a6 <__floatsisf+0x6c>
    5868:	bb 0f       	add	r27, r27
    586a:	11 f4       	brne	.+4      	; 0x5870 <__floatsisf+0x36>
    586c:	60 ff       	sbrs	r22, 0
    586e:	1b c0       	rjmp	.+54     	; 0x58a6 <__floatsisf+0x6c>
    5870:	6f 5f       	subi	r22, 0xFF	; 255
    5872:	7f 4f       	sbci	r23, 0xFF	; 255
    5874:	8f 4f       	sbci	r24, 0xFF	; 255
    5876:	9f 4f       	sbci	r25, 0xFF	; 255
    5878:	16 c0       	rjmp	.+44     	; 0x58a6 <__floatsisf+0x6c>
    587a:	88 23       	and	r24, r24
    587c:	11 f0       	breq	.+4      	; 0x5882 <__floatsisf+0x48>
    587e:	96 e9       	ldi	r25, 0x96	; 150
    5880:	11 c0       	rjmp	.+34     	; 0x58a4 <__floatsisf+0x6a>
    5882:	77 23       	and	r23, r23
    5884:	21 f0       	breq	.+8      	; 0x588e <__floatsisf+0x54>
    5886:	9e e8       	ldi	r25, 0x8E	; 142
    5888:	87 2f       	mov	r24, r23
    588a:	76 2f       	mov	r23, r22
    588c:	05 c0       	rjmp	.+10     	; 0x5898 <__floatsisf+0x5e>
    588e:	66 23       	and	r22, r22
    5890:	71 f0       	breq	.+28     	; 0x58ae <__floatsisf+0x74>
    5892:	96 e8       	ldi	r25, 0x86	; 134
    5894:	86 2f       	mov	r24, r22
    5896:	70 e0       	ldi	r23, 0x00	; 0
    5898:	60 e0       	ldi	r22, 0x00	; 0
    589a:	2a f0       	brmi	.+10     	; 0x58a6 <__floatsisf+0x6c>
    589c:	9a 95       	dec	r25
    589e:	66 0f       	add	r22, r22
    58a0:	77 1f       	adc	r23, r23
    58a2:	88 1f       	adc	r24, r24
    58a4:	da f7       	brpl	.-10     	; 0x589c <__floatsisf+0x62>
    58a6:	88 0f       	add	r24, r24
    58a8:	96 95       	lsr	r25
    58aa:	87 95       	ror	r24
    58ac:	97 f9       	bld	r25, 7
    58ae:	08 95       	ret

000058b0 <__fp_inf>:
    58b0:	97 f9       	bld	r25, 7
    58b2:	9f 67       	ori	r25, 0x7F	; 127
    58b4:	80 e8       	ldi	r24, 0x80	; 128
    58b6:	70 e0       	ldi	r23, 0x00	; 0
    58b8:	60 e0       	ldi	r22, 0x00	; 0
    58ba:	08 95       	ret

000058bc <__fp_nan>:
    58bc:	9f ef       	ldi	r25, 0xFF	; 255
    58be:	80 ec       	ldi	r24, 0xC0	; 192
    58c0:	08 95       	ret

000058c2 <__fp_pscA>:
    58c2:	00 24       	eor	r0, r0
    58c4:	0a 94       	dec	r0
    58c6:	16 16       	cp	r1, r22
    58c8:	17 06       	cpc	r1, r23
    58ca:	18 06       	cpc	r1, r24
    58cc:	09 06       	cpc	r0, r25
    58ce:	08 95       	ret

000058d0 <__fp_pscB>:
    58d0:	00 24       	eor	r0, r0
    58d2:	0a 94       	dec	r0
    58d4:	12 16       	cp	r1, r18
    58d6:	13 06       	cpc	r1, r19
    58d8:	14 06       	cpc	r1, r20
    58da:	05 06       	cpc	r0, r21
    58dc:	08 95       	ret

000058de <__fp_round>:
    58de:	09 2e       	mov	r0, r25
    58e0:	03 94       	inc	r0
    58e2:	00 0c       	add	r0, r0
    58e4:	11 f4       	brne	.+4      	; 0x58ea <__fp_round+0xc>
    58e6:	88 23       	and	r24, r24
    58e8:	52 f0       	brmi	.+20     	; 0x58fe <__fp_round+0x20>
    58ea:	bb 0f       	add	r27, r27
    58ec:	40 f4       	brcc	.+16     	; 0x58fe <__fp_round+0x20>
    58ee:	bf 2b       	or	r27, r31
    58f0:	11 f4       	brne	.+4      	; 0x58f6 <__fp_round+0x18>
    58f2:	60 ff       	sbrs	r22, 0
    58f4:	04 c0       	rjmp	.+8      	; 0x58fe <__fp_round+0x20>
    58f6:	6f 5f       	subi	r22, 0xFF	; 255
    58f8:	7f 4f       	sbci	r23, 0xFF	; 255
    58fa:	8f 4f       	sbci	r24, 0xFF	; 255
    58fc:	9f 4f       	sbci	r25, 0xFF	; 255
    58fe:	08 95       	ret

00005900 <__fp_split3>:
    5900:	57 fd       	sbrc	r21, 7
    5902:	90 58       	subi	r25, 0x80	; 128
    5904:	44 0f       	add	r20, r20
    5906:	55 1f       	adc	r21, r21
    5908:	59 f0       	breq	.+22     	; 0x5920 <__fp_splitA+0x10>
    590a:	5f 3f       	cpi	r21, 0xFF	; 255
    590c:	71 f0       	breq	.+28     	; 0x592a <__fp_splitA+0x1a>
    590e:	47 95       	ror	r20

00005910 <__fp_splitA>:
    5910:	88 0f       	add	r24, r24
    5912:	97 fb       	bst	r25, 7
    5914:	99 1f       	adc	r25, r25
    5916:	61 f0       	breq	.+24     	; 0x5930 <__fp_splitA+0x20>
    5918:	9f 3f       	cpi	r25, 0xFF	; 255
    591a:	79 f0       	breq	.+30     	; 0x593a <__fp_splitA+0x2a>
    591c:	87 95       	ror	r24
    591e:	08 95       	ret
    5920:	12 16       	cp	r1, r18
    5922:	13 06       	cpc	r1, r19
    5924:	14 06       	cpc	r1, r20
    5926:	55 1f       	adc	r21, r21
    5928:	f2 cf       	rjmp	.-28     	; 0x590e <__fp_split3+0xe>
    592a:	46 95       	lsr	r20
    592c:	f1 df       	rcall	.-30     	; 0x5910 <__fp_splitA>
    592e:	08 c0       	rjmp	.+16     	; 0x5940 <__fp_splitA+0x30>
    5930:	16 16       	cp	r1, r22
    5932:	17 06       	cpc	r1, r23
    5934:	18 06       	cpc	r1, r24
    5936:	99 1f       	adc	r25, r25
    5938:	f1 cf       	rjmp	.-30     	; 0x591c <__fp_splitA+0xc>
    593a:	86 95       	lsr	r24
    593c:	71 05       	cpc	r23, r1
    593e:	61 05       	cpc	r22, r1
    5940:	08 94       	sec
    5942:	08 95       	ret

00005944 <__fp_zero>:
    5944:	e8 94       	clt

00005946 <__fp_szero>:
    5946:	bb 27       	eor	r27, r27
    5948:	66 27       	eor	r22, r22
    594a:	77 27       	eor	r23, r23
    594c:	cb 01       	movw	r24, r22
    594e:	97 f9       	bld	r25, 7
    5950:	08 95       	ret

00005952 <__mulsf3>:
    5952:	0b d0       	rcall	.+22     	; 0x596a <__mulsf3x>
    5954:	c4 cf       	rjmp	.-120    	; 0x58de <__fp_round>
    5956:	b5 df       	rcall	.-150    	; 0x58c2 <__fp_pscA>
    5958:	28 f0       	brcs	.+10     	; 0x5964 <__mulsf3+0x12>
    595a:	ba df       	rcall	.-140    	; 0x58d0 <__fp_pscB>
    595c:	18 f0       	brcs	.+6      	; 0x5964 <__mulsf3+0x12>
    595e:	95 23       	and	r25, r21
    5960:	09 f0       	breq	.+2      	; 0x5964 <__mulsf3+0x12>
    5962:	a6 cf       	rjmp	.-180    	; 0x58b0 <__fp_inf>
    5964:	ab cf       	rjmp	.-170    	; 0x58bc <__fp_nan>
    5966:	11 24       	eor	r1, r1
    5968:	ee cf       	rjmp	.-36     	; 0x5946 <__fp_szero>

0000596a <__mulsf3x>:
    596a:	ca df       	rcall	.-108    	; 0x5900 <__fp_split3>
    596c:	a0 f3       	brcs	.-24     	; 0x5956 <__mulsf3+0x4>

0000596e <__mulsf3_pse>:
    596e:	95 9f       	mul	r25, r21
    5970:	d1 f3       	breq	.-12     	; 0x5966 <__mulsf3+0x14>
    5972:	95 0f       	add	r25, r21
    5974:	50 e0       	ldi	r21, 0x00	; 0
    5976:	55 1f       	adc	r21, r21
    5978:	62 9f       	mul	r22, r18
    597a:	f0 01       	movw	r30, r0
    597c:	72 9f       	mul	r23, r18
    597e:	bb 27       	eor	r27, r27
    5980:	f0 0d       	add	r31, r0
    5982:	b1 1d       	adc	r27, r1
    5984:	63 9f       	mul	r22, r19
    5986:	aa 27       	eor	r26, r26
    5988:	f0 0d       	add	r31, r0
    598a:	b1 1d       	adc	r27, r1
    598c:	aa 1f       	adc	r26, r26
    598e:	64 9f       	mul	r22, r20
    5990:	66 27       	eor	r22, r22
    5992:	b0 0d       	add	r27, r0
    5994:	a1 1d       	adc	r26, r1
    5996:	66 1f       	adc	r22, r22
    5998:	82 9f       	mul	r24, r18
    599a:	22 27       	eor	r18, r18
    599c:	b0 0d       	add	r27, r0
    599e:	a1 1d       	adc	r26, r1
    59a0:	62 1f       	adc	r22, r18
    59a2:	73 9f       	mul	r23, r19
    59a4:	b0 0d       	add	r27, r0
    59a6:	a1 1d       	adc	r26, r1
    59a8:	62 1f       	adc	r22, r18
    59aa:	83 9f       	mul	r24, r19
    59ac:	a0 0d       	add	r26, r0
    59ae:	61 1d       	adc	r22, r1
    59b0:	22 1f       	adc	r18, r18
    59b2:	74 9f       	mul	r23, r20
    59b4:	33 27       	eor	r19, r19
    59b6:	a0 0d       	add	r26, r0
    59b8:	61 1d       	adc	r22, r1
    59ba:	23 1f       	adc	r18, r19
    59bc:	84 9f       	mul	r24, r20
    59be:	60 0d       	add	r22, r0
    59c0:	21 1d       	adc	r18, r1
    59c2:	82 2f       	mov	r24, r18
    59c4:	76 2f       	mov	r23, r22
    59c6:	6a 2f       	mov	r22, r26
    59c8:	11 24       	eor	r1, r1
    59ca:	9f 57       	subi	r25, 0x7F	; 127
    59cc:	50 40       	sbci	r21, 0x00	; 0
    59ce:	8a f0       	brmi	.+34     	; 0x59f2 <__mulsf3_pse+0x84>
    59d0:	e1 f0       	breq	.+56     	; 0x5a0a <__mulsf3_pse+0x9c>
    59d2:	88 23       	and	r24, r24
    59d4:	4a f0       	brmi	.+18     	; 0x59e8 <__mulsf3_pse+0x7a>
    59d6:	ee 0f       	add	r30, r30
    59d8:	ff 1f       	adc	r31, r31
    59da:	bb 1f       	adc	r27, r27
    59dc:	66 1f       	adc	r22, r22
    59de:	77 1f       	adc	r23, r23
    59e0:	88 1f       	adc	r24, r24
    59e2:	91 50       	subi	r25, 0x01	; 1
    59e4:	50 40       	sbci	r21, 0x00	; 0
    59e6:	a9 f7       	brne	.-22     	; 0x59d2 <__mulsf3_pse+0x64>
    59e8:	9e 3f       	cpi	r25, 0xFE	; 254
    59ea:	51 05       	cpc	r21, r1
    59ec:	70 f0       	brcs	.+28     	; 0x5a0a <__mulsf3_pse+0x9c>
    59ee:	60 cf       	rjmp	.-320    	; 0x58b0 <__fp_inf>
    59f0:	aa cf       	rjmp	.-172    	; 0x5946 <__fp_szero>
    59f2:	5f 3f       	cpi	r21, 0xFF	; 255
    59f4:	ec f3       	brlt	.-6      	; 0x59f0 <__mulsf3_pse+0x82>
    59f6:	98 3e       	cpi	r25, 0xE8	; 232
    59f8:	dc f3       	brlt	.-10     	; 0x59f0 <__mulsf3_pse+0x82>
    59fa:	86 95       	lsr	r24
    59fc:	77 95       	ror	r23
    59fe:	67 95       	ror	r22
    5a00:	b7 95       	ror	r27
    5a02:	f7 95       	ror	r31
    5a04:	e7 95       	ror	r30
    5a06:	9f 5f       	subi	r25, 0xFF	; 255
    5a08:	c1 f7       	brne	.-16     	; 0x59fa <__mulsf3_pse+0x8c>
    5a0a:	fe 2b       	or	r31, r30
    5a0c:	88 0f       	add	r24, r24
    5a0e:	91 1d       	adc	r25, r1
    5a10:	96 95       	lsr	r25
    5a12:	87 95       	ror	r24
    5a14:	97 f9       	bld	r25, 7
    5a16:	08 95       	ret

00005a18 <vfprintf>:
    5a18:	2f 92       	push	r2
    5a1a:	3f 92       	push	r3
    5a1c:	4f 92       	push	r4
    5a1e:	5f 92       	push	r5
    5a20:	6f 92       	push	r6
    5a22:	7f 92       	push	r7
    5a24:	8f 92       	push	r8
    5a26:	9f 92       	push	r9
    5a28:	af 92       	push	r10
    5a2a:	bf 92       	push	r11
    5a2c:	cf 92       	push	r12
    5a2e:	df 92       	push	r13
    5a30:	ef 92       	push	r14
    5a32:	ff 92       	push	r15
    5a34:	0f 93       	push	r16
    5a36:	1f 93       	push	r17
    5a38:	cf 93       	push	r28
    5a3a:	df 93       	push	r29
    5a3c:	cd b7       	in	r28, 0x3d	; 61
    5a3e:	de b7       	in	r29, 0x3e	; 62
    5a40:	60 97       	sbiw	r28, 0x10	; 16
    5a42:	0f b6       	in	r0, 0x3f	; 63
    5a44:	f8 94       	cli
    5a46:	de bf       	out	0x3e, r29	; 62
    5a48:	0f be       	out	0x3f, r0	; 63
    5a4a:	cd bf       	out	0x3d, r28	; 61
    5a4c:	7c 01       	movw	r14, r24
    5a4e:	1b 01       	movw	r2, r22
    5a50:	6a 01       	movw	r12, r20
    5a52:	fc 01       	movw	r30, r24
    5a54:	17 82       	std	Z+7, r1	; 0x07
    5a56:	16 82       	std	Z+6, r1	; 0x06
    5a58:	83 81       	ldd	r24, Z+3	; 0x03
    5a5a:	81 ff       	sbrs	r24, 1
    5a5c:	2a c3       	rjmp	.+1620   	; 0x60b2 <vfprintf+0x69a>
    5a5e:	9e 01       	movw	r18, r28
    5a60:	2f 5f       	subi	r18, 0xFF	; 255
    5a62:	3f 4f       	sbci	r19, 0xFF	; 255
    5a64:	39 01       	movw	r6, r18
    5a66:	f7 01       	movw	r30, r14
    5a68:	93 81       	ldd	r25, Z+3	; 0x03
    5a6a:	f1 01       	movw	r30, r2
    5a6c:	93 fd       	sbrc	r25, 3
    5a6e:	85 91       	lpm	r24, Z+
    5a70:	93 ff       	sbrs	r25, 3
    5a72:	81 91       	ld	r24, Z+
    5a74:	1f 01       	movw	r2, r30
    5a76:	88 23       	and	r24, r24
    5a78:	09 f4       	brne	.+2      	; 0x5a7c <vfprintf+0x64>
    5a7a:	17 c3       	rjmp	.+1582   	; 0x60aa <vfprintf+0x692>
    5a7c:	85 32       	cpi	r24, 0x25	; 37
    5a7e:	39 f4       	brne	.+14     	; 0x5a8e <vfprintf+0x76>
    5a80:	93 fd       	sbrc	r25, 3
    5a82:	85 91       	lpm	r24, Z+
    5a84:	93 ff       	sbrs	r25, 3
    5a86:	81 91       	ld	r24, Z+
    5a88:	1f 01       	movw	r2, r30
    5a8a:	85 32       	cpi	r24, 0x25	; 37
    5a8c:	31 f4       	brne	.+12     	; 0x5a9a <vfprintf+0x82>
    5a8e:	b7 01       	movw	r22, r14
    5a90:	90 e0       	ldi	r25, 0x00	; 0
    5a92:	37 d6       	rcall	.+3182   	; 0x6702 <fputc>
    5a94:	56 01       	movw	r10, r12
    5a96:	65 01       	movw	r12, r10
    5a98:	e6 cf       	rjmp	.-52     	; 0x5a66 <vfprintf+0x4e>
    5a9a:	10 e0       	ldi	r17, 0x00	; 0
    5a9c:	51 2c       	mov	r5, r1
    5a9e:	91 2c       	mov	r9, r1
    5aa0:	ff e1       	ldi	r31, 0x1F	; 31
    5aa2:	f9 15       	cp	r31, r9
    5aa4:	d8 f0       	brcs	.+54     	; 0x5adc <vfprintf+0xc4>
    5aa6:	8b 32       	cpi	r24, 0x2B	; 43
    5aa8:	79 f0       	breq	.+30     	; 0x5ac8 <vfprintf+0xb0>
    5aaa:	38 f4       	brcc	.+14     	; 0x5aba <vfprintf+0xa2>
    5aac:	80 32       	cpi	r24, 0x20	; 32
    5aae:	79 f0       	breq	.+30     	; 0x5ace <vfprintf+0xb6>
    5ab0:	83 32       	cpi	r24, 0x23	; 35
    5ab2:	a1 f4       	brne	.+40     	; 0x5adc <vfprintf+0xc4>
    5ab4:	f9 2d       	mov	r31, r9
    5ab6:	f0 61       	ori	r31, 0x10	; 16
    5ab8:	2e c0       	rjmp	.+92     	; 0x5b16 <vfprintf+0xfe>
    5aba:	8d 32       	cpi	r24, 0x2D	; 45
    5abc:	61 f0       	breq	.+24     	; 0x5ad6 <vfprintf+0xbe>
    5abe:	80 33       	cpi	r24, 0x30	; 48
    5ac0:	69 f4       	brne	.+26     	; 0x5adc <vfprintf+0xc4>
    5ac2:	29 2d       	mov	r18, r9
    5ac4:	21 60       	ori	r18, 0x01	; 1
    5ac6:	2d c0       	rjmp	.+90     	; 0x5b22 <vfprintf+0x10a>
    5ac8:	39 2d       	mov	r19, r9
    5aca:	32 60       	ori	r19, 0x02	; 2
    5acc:	93 2e       	mov	r9, r19
    5ace:	89 2d       	mov	r24, r9
    5ad0:	84 60       	ori	r24, 0x04	; 4
    5ad2:	98 2e       	mov	r9, r24
    5ad4:	2a c0       	rjmp	.+84     	; 0x5b2a <vfprintf+0x112>
    5ad6:	e9 2d       	mov	r30, r9
    5ad8:	e8 60       	ori	r30, 0x08	; 8
    5ada:	15 c0       	rjmp	.+42     	; 0x5b06 <vfprintf+0xee>
    5adc:	97 fc       	sbrc	r9, 7
    5ade:	2d c0       	rjmp	.+90     	; 0x5b3a <vfprintf+0x122>
    5ae0:	20 ed       	ldi	r18, 0xD0	; 208
    5ae2:	28 0f       	add	r18, r24
    5ae4:	2a 30       	cpi	r18, 0x0A	; 10
    5ae6:	88 f4       	brcc	.+34     	; 0x5b0a <vfprintf+0xf2>
    5ae8:	96 fe       	sbrs	r9, 6
    5aea:	06 c0       	rjmp	.+12     	; 0x5af8 <vfprintf+0xe0>
    5aec:	3a e0       	ldi	r19, 0x0A	; 10
    5aee:	13 9f       	mul	r17, r19
    5af0:	20 0d       	add	r18, r0
    5af2:	11 24       	eor	r1, r1
    5af4:	12 2f       	mov	r17, r18
    5af6:	19 c0       	rjmp	.+50     	; 0x5b2a <vfprintf+0x112>
    5af8:	8a e0       	ldi	r24, 0x0A	; 10
    5afa:	58 9e       	mul	r5, r24
    5afc:	20 0d       	add	r18, r0
    5afe:	11 24       	eor	r1, r1
    5b00:	52 2e       	mov	r5, r18
    5b02:	e9 2d       	mov	r30, r9
    5b04:	e0 62       	ori	r30, 0x20	; 32
    5b06:	9e 2e       	mov	r9, r30
    5b08:	10 c0       	rjmp	.+32     	; 0x5b2a <vfprintf+0x112>
    5b0a:	8e 32       	cpi	r24, 0x2E	; 46
    5b0c:	31 f4       	brne	.+12     	; 0x5b1a <vfprintf+0x102>
    5b0e:	96 fc       	sbrc	r9, 6
    5b10:	cc c2       	rjmp	.+1432   	; 0x60aa <vfprintf+0x692>
    5b12:	f9 2d       	mov	r31, r9
    5b14:	f0 64       	ori	r31, 0x40	; 64
    5b16:	9f 2e       	mov	r9, r31
    5b18:	08 c0       	rjmp	.+16     	; 0x5b2a <vfprintf+0x112>
    5b1a:	8c 36       	cpi	r24, 0x6C	; 108
    5b1c:	21 f4       	brne	.+8      	; 0x5b26 <vfprintf+0x10e>
    5b1e:	29 2d       	mov	r18, r9
    5b20:	20 68       	ori	r18, 0x80	; 128
    5b22:	92 2e       	mov	r9, r18
    5b24:	02 c0       	rjmp	.+4      	; 0x5b2a <vfprintf+0x112>
    5b26:	88 36       	cpi	r24, 0x68	; 104
    5b28:	41 f4       	brne	.+16     	; 0x5b3a <vfprintf+0x122>
    5b2a:	f1 01       	movw	r30, r2
    5b2c:	93 fd       	sbrc	r25, 3
    5b2e:	85 91       	lpm	r24, Z+
    5b30:	93 ff       	sbrs	r25, 3
    5b32:	81 91       	ld	r24, Z+
    5b34:	1f 01       	movw	r2, r30
    5b36:	81 11       	cpse	r24, r1
    5b38:	b3 cf       	rjmp	.-154    	; 0x5aa0 <vfprintf+0x88>
    5b3a:	9b eb       	ldi	r25, 0xBB	; 187
    5b3c:	98 0f       	add	r25, r24
    5b3e:	93 30       	cpi	r25, 0x03	; 3
    5b40:	20 f4       	brcc	.+8      	; 0x5b4a <vfprintf+0x132>
    5b42:	99 2d       	mov	r25, r9
    5b44:	90 61       	ori	r25, 0x10	; 16
    5b46:	80 5e       	subi	r24, 0xE0	; 224
    5b48:	07 c0       	rjmp	.+14     	; 0x5b58 <vfprintf+0x140>
    5b4a:	9b e9       	ldi	r25, 0x9B	; 155
    5b4c:	98 0f       	add	r25, r24
    5b4e:	93 30       	cpi	r25, 0x03	; 3
    5b50:	08 f0       	brcs	.+2      	; 0x5b54 <vfprintf+0x13c>
    5b52:	59 c1       	rjmp	.+690    	; 0x5e06 <vfprintf+0x3ee>
    5b54:	99 2d       	mov	r25, r9
    5b56:	9f 7e       	andi	r25, 0xEF	; 239
    5b58:	96 ff       	sbrs	r25, 6
    5b5a:	16 e0       	ldi	r17, 0x06	; 6
    5b5c:	9f 73       	andi	r25, 0x3F	; 63
    5b5e:	99 2e       	mov	r9, r25
    5b60:	85 36       	cpi	r24, 0x65	; 101
    5b62:	19 f4       	brne	.+6      	; 0x5b6a <vfprintf+0x152>
    5b64:	90 64       	ori	r25, 0x40	; 64
    5b66:	99 2e       	mov	r9, r25
    5b68:	08 c0       	rjmp	.+16     	; 0x5b7a <vfprintf+0x162>
    5b6a:	86 36       	cpi	r24, 0x66	; 102
    5b6c:	21 f4       	brne	.+8      	; 0x5b76 <vfprintf+0x15e>
    5b6e:	39 2f       	mov	r19, r25
    5b70:	30 68       	ori	r19, 0x80	; 128
    5b72:	93 2e       	mov	r9, r19
    5b74:	02 c0       	rjmp	.+4      	; 0x5b7a <vfprintf+0x162>
    5b76:	11 11       	cpse	r17, r1
    5b78:	11 50       	subi	r17, 0x01	; 1
    5b7a:	97 fe       	sbrs	r9, 7
    5b7c:	07 c0       	rjmp	.+14     	; 0x5b8c <vfprintf+0x174>
    5b7e:	1c 33       	cpi	r17, 0x3C	; 60
    5b80:	50 f4       	brcc	.+20     	; 0x5b96 <vfprintf+0x17e>
    5b82:	44 24       	eor	r4, r4
    5b84:	43 94       	inc	r4
    5b86:	41 0e       	add	r4, r17
    5b88:	27 e0       	ldi	r18, 0x07	; 7
    5b8a:	0b c0       	rjmp	.+22     	; 0x5ba2 <vfprintf+0x18a>
    5b8c:	18 30       	cpi	r17, 0x08	; 8
    5b8e:	38 f0       	brcs	.+14     	; 0x5b9e <vfprintf+0x186>
    5b90:	27 e0       	ldi	r18, 0x07	; 7
    5b92:	17 e0       	ldi	r17, 0x07	; 7
    5b94:	05 c0       	rjmp	.+10     	; 0x5ba0 <vfprintf+0x188>
    5b96:	27 e0       	ldi	r18, 0x07	; 7
    5b98:	9c e3       	ldi	r25, 0x3C	; 60
    5b9a:	49 2e       	mov	r4, r25
    5b9c:	02 c0       	rjmp	.+4      	; 0x5ba2 <vfprintf+0x18a>
    5b9e:	21 2f       	mov	r18, r17
    5ba0:	41 2c       	mov	r4, r1
    5ba2:	56 01       	movw	r10, r12
    5ba4:	84 e0       	ldi	r24, 0x04	; 4
    5ba6:	a8 0e       	add	r10, r24
    5ba8:	b1 1c       	adc	r11, r1
    5baa:	f6 01       	movw	r30, r12
    5bac:	60 81       	ld	r22, Z
    5bae:	71 81       	ldd	r23, Z+1	; 0x01
    5bb0:	82 81       	ldd	r24, Z+2	; 0x02
    5bb2:	93 81       	ldd	r25, Z+3	; 0x03
    5bb4:	04 2d       	mov	r16, r4
    5bb6:	a3 01       	movw	r20, r6
    5bb8:	57 d4       	rcall	.+2222   	; 0x6468 <__ftoa_engine>
    5bba:	6c 01       	movw	r12, r24
    5bbc:	f9 81       	ldd	r31, Y+1	; 0x01
    5bbe:	fc 87       	std	Y+12, r31	; 0x0c
    5bc0:	f0 ff       	sbrs	r31, 0
    5bc2:	02 c0       	rjmp	.+4      	; 0x5bc8 <vfprintf+0x1b0>
    5bc4:	f3 ff       	sbrs	r31, 3
    5bc6:	06 c0       	rjmp	.+12     	; 0x5bd4 <vfprintf+0x1bc>
    5bc8:	91 fc       	sbrc	r9, 1
    5bca:	06 c0       	rjmp	.+12     	; 0x5bd8 <vfprintf+0x1c0>
    5bcc:	92 fe       	sbrs	r9, 2
    5bce:	06 c0       	rjmp	.+12     	; 0x5bdc <vfprintf+0x1c4>
    5bd0:	00 e2       	ldi	r16, 0x20	; 32
    5bd2:	05 c0       	rjmp	.+10     	; 0x5bde <vfprintf+0x1c6>
    5bd4:	0d e2       	ldi	r16, 0x2D	; 45
    5bd6:	03 c0       	rjmp	.+6      	; 0x5bde <vfprintf+0x1c6>
    5bd8:	0b e2       	ldi	r16, 0x2B	; 43
    5bda:	01 c0       	rjmp	.+2      	; 0x5bde <vfprintf+0x1c6>
    5bdc:	00 e0       	ldi	r16, 0x00	; 0
    5bde:	8c 85       	ldd	r24, Y+12	; 0x0c
    5be0:	8c 70       	andi	r24, 0x0C	; 12
    5be2:	19 f0       	breq	.+6      	; 0x5bea <vfprintf+0x1d2>
    5be4:	01 11       	cpse	r16, r1
    5be6:	43 c2       	rjmp	.+1158   	; 0x606e <vfprintf+0x656>
    5be8:	80 c2       	rjmp	.+1280   	; 0x60ea <vfprintf+0x6d2>
    5bea:	97 fe       	sbrs	r9, 7
    5bec:	10 c0       	rjmp	.+32     	; 0x5c0e <vfprintf+0x1f6>
    5bee:	4c 0c       	add	r4, r12
    5bf0:	fc 85       	ldd	r31, Y+12	; 0x0c
    5bf2:	f4 ff       	sbrs	r31, 4
    5bf4:	04 c0       	rjmp	.+8      	; 0x5bfe <vfprintf+0x1e6>
    5bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    5bf8:	81 33       	cpi	r24, 0x31	; 49
    5bfa:	09 f4       	brne	.+2      	; 0x5bfe <vfprintf+0x1e6>
    5bfc:	4a 94       	dec	r4
    5bfe:	14 14       	cp	r1, r4
    5c00:	74 f5       	brge	.+92     	; 0x5c5e <vfprintf+0x246>
    5c02:	28 e0       	ldi	r18, 0x08	; 8
    5c04:	24 15       	cp	r18, r4
    5c06:	78 f5       	brcc	.+94     	; 0x5c66 <vfprintf+0x24e>
    5c08:	88 e0       	ldi	r24, 0x08	; 8
    5c0a:	48 2e       	mov	r4, r24
    5c0c:	2c c0       	rjmp	.+88     	; 0x5c66 <vfprintf+0x24e>
    5c0e:	96 fc       	sbrc	r9, 6
    5c10:	2a c0       	rjmp	.+84     	; 0x5c66 <vfprintf+0x24e>
    5c12:	81 2f       	mov	r24, r17
    5c14:	90 e0       	ldi	r25, 0x00	; 0
    5c16:	8c 15       	cp	r24, r12
    5c18:	9d 05       	cpc	r25, r13
    5c1a:	9c f0       	brlt	.+38     	; 0x5c42 <vfprintf+0x22a>
    5c1c:	3c ef       	ldi	r19, 0xFC	; 252
    5c1e:	c3 16       	cp	r12, r19
    5c20:	3f ef       	ldi	r19, 0xFF	; 255
    5c22:	d3 06       	cpc	r13, r19
    5c24:	74 f0       	brlt	.+28     	; 0x5c42 <vfprintf+0x22a>
    5c26:	89 2d       	mov	r24, r9
    5c28:	80 68       	ori	r24, 0x80	; 128
    5c2a:	98 2e       	mov	r9, r24
    5c2c:	0a c0       	rjmp	.+20     	; 0x5c42 <vfprintf+0x22a>
    5c2e:	e2 e0       	ldi	r30, 0x02	; 2
    5c30:	f0 e0       	ldi	r31, 0x00	; 0
    5c32:	ec 0f       	add	r30, r28
    5c34:	fd 1f       	adc	r31, r29
    5c36:	e1 0f       	add	r30, r17
    5c38:	f1 1d       	adc	r31, r1
    5c3a:	80 81       	ld	r24, Z
    5c3c:	80 33       	cpi	r24, 0x30	; 48
    5c3e:	19 f4       	brne	.+6      	; 0x5c46 <vfprintf+0x22e>
    5c40:	11 50       	subi	r17, 0x01	; 1
    5c42:	11 11       	cpse	r17, r1
    5c44:	f4 cf       	rjmp	.-24     	; 0x5c2e <vfprintf+0x216>
    5c46:	97 fe       	sbrs	r9, 7
    5c48:	0e c0       	rjmp	.+28     	; 0x5c66 <vfprintf+0x24e>
    5c4a:	44 24       	eor	r4, r4
    5c4c:	43 94       	inc	r4
    5c4e:	41 0e       	add	r4, r17
    5c50:	81 2f       	mov	r24, r17
    5c52:	90 e0       	ldi	r25, 0x00	; 0
    5c54:	c8 16       	cp	r12, r24
    5c56:	d9 06       	cpc	r13, r25
    5c58:	2c f4       	brge	.+10     	; 0x5c64 <vfprintf+0x24c>
    5c5a:	1c 19       	sub	r17, r12
    5c5c:	04 c0       	rjmp	.+8      	; 0x5c66 <vfprintf+0x24e>
    5c5e:	44 24       	eor	r4, r4
    5c60:	43 94       	inc	r4
    5c62:	01 c0       	rjmp	.+2      	; 0x5c66 <vfprintf+0x24e>
    5c64:	10 e0       	ldi	r17, 0x00	; 0
    5c66:	97 fe       	sbrs	r9, 7
    5c68:	06 c0       	rjmp	.+12     	; 0x5c76 <vfprintf+0x25e>
    5c6a:	1c 14       	cp	r1, r12
    5c6c:	1d 04       	cpc	r1, r13
    5c6e:	34 f4       	brge	.+12     	; 0x5c7c <vfprintf+0x264>
    5c70:	c6 01       	movw	r24, r12
    5c72:	01 96       	adiw	r24, 0x01	; 1
    5c74:	05 c0       	rjmp	.+10     	; 0x5c80 <vfprintf+0x268>
    5c76:	85 e0       	ldi	r24, 0x05	; 5
    5c78:	90 e0       	ldi	r25, 0x00	; 0
    5c7a:	02 c0       	rjmp	.+4      	; 0x5c80 <vfprintf+0x268>
    5c7c:	81 e0       	ldi	r24, 0x01	; 1
    5c7e:	90 e0       	ldi	r25, 0x00	; 0
    5c80:	01 11       	cpse	r16, r1
    5c82:	01 96       	adiw	r24, 0x01	; 1
    5c84:	11 23       	and	r17, r17
    5c86:	31 f0       	breq	.+12     	; 0x5c94 <vfprintf+0x27c>
    5c88:	21 2f       	mov	r18, r17
    5c8a:	30 e0       	ldi	r19, 0x00	; 0
    5c8c:	2f 5f       	subi	r18, 0xFF	; 255
    5c8e:	3f 4f       	sbci	r19, 0xFF	; 255
    5c90:	82 0f       	add	r24, r18
    5c92:	93 1f       	adc	r25, r19
    5c94:	25 2d       	mov	r18, r5
    5c96:	30 e0       	ldi	r19, 0x00	; 0
    5c98:	82 17       	cp	r24, r18
    5c9a:	93 07       	cpc	r25, r19
    5c9c:	14 f4       	brge	.+4      	; 0x5ca2 <vfprintf+0x28a>
    5c9e:	58 1a       	sub	r5, r24
    5ca0:	01 c0       	rjmp	.+2      	; 0x5ca4 <vfprintf+0x28c>
    5ca2:	51 2c       	mov	r5, r1
    5ca4:	89 2d       	mov	r24, r9
    5ca6:	89 70       	andi	r24, 0x09	; 9
    5ca8:	41 f4       	brne	.+16     	; 0x5cba <vfprintf+0x2a2>
    5caa:	55 20       	and	r5, r5
    5cac:	31 f0       	breq	.+12     	; 0x5cba <vfprintf+0x2a2>
    5cae:	b7 01       	movw	r22, r14
    5cb0:	80 e2       	ldi	r24, 0x20	; 32
    5cb2:	90 e0       	ldi	r25, 0x00	; 0
    5cb4:	26 d5       	rcall	.+2636   	; 0x6702 <fputc>
    5cb6:	5a 94       	dec	r5
    5cb8:	f8 cf       	rjmp	.-16     	; 0x5caa <vfprintf+0x292>
    5cba:	00 23       	and	r16, r16
    5cbc:	21 f0       	breq	.+8      	; 0x5cc6 <vfprintf+0x2ae>
    5cbe:	b7 01       	movw	r22, r14
    5cc0:	80 2f       	mov	r24, r16
    5cc2:	90 e0       	ldi	r25, 0x00	; 0
    5cc4:	1e d5       	rcall	.+2620   	; 0x6702 <fputc>
    5cc6:	93 fc       	sbrc	r9, 3
    5cc8:	08 c0       	rjmp	.+16     	; 0x5cda <vfprintf+0x2c2>
    5cca:	55 20       	and	r5, r5
    5ccc:	31 f0       	breq	.+12     	; 0x5cda <vfprintf+0x2c2>
    5cce:	b7 01       	movw	r22, r14
    5cd0:	80 e3       	ldi	r24, 0x30	; 48
    5cd2:	90 e0       	ldi	r25, 0x00	; 0
    5cd4:	16 d5       	rcall	.+2604   	; 0x6702 <fputc>
    5cd6:	5a 94       	dec	r5
    5cd8:	f8 cf       	rjmp	.-16     	; 0x5cca <vfprintf+0x2b2>
    5cda:	97 fe       	sbrs	r9, 7
    5cdc:	4a c0       	rjmp	.+148    	; 0x5d72 <vfprintf+0x35a>
    5cde:	46 01       	movw	r8, r12
    5ce0:	d7 fe       	sbrs	r13, 7
    5ce2:	02 c0       	rjmp	.+4      	; 0x5ce8 <vfprintf+0x2d0>
    5ce4:	81 2c       	mov	r8, r1
    5ce6:	91 2c       	mov	r9, r1
    5ce8:	c6 01       	movw	r24, r12
    5cea:	88 19       	sub	r24, r8
    5cec:	99 09       	sbc	r25, r9
    5cee:	f3 01       	movw	r30, r6
    5cf0:	e8 0f       	add	r30, r24
    5cf2:	f9 1f       	adc	r31, r25
    5cf4:	fe 87       	std	Y+14, r31	; 0x0e
    5cf6:	ed 87       	std	Y+13, r30	; 0x0d
    5cf8:	96 01       	movw	r18, r12
    5cfa:	24 19       	sub	r18, r4
    5cfc:	31 09       	sbc	r19, r1
    5cfe:	38 8b       	std	Y+16, r19	; 0x10
    5d00:	2f 87       	std	Y+15, r18	; 0x0f
    5d02:	01 2f       	mov	r16, r17
    5d04:	10 e0       	ldi	r17, 0x00	; 0
    5d06:	11 95       	neg	r17
    5d08:	01 95       	neg	r16
    5d0a:	11 09       	sbc	r17, r1
    5d0c:	3f ef       	ldi	r19, 0xFF	; 255
    5d0e:	83 16       	cp	r8, r19
    5d10:	93 06       	cpc	r9, r19
    5d12:	21 f4       	brne	.+8      	; 0x5d1c <vfprintf+0x304>
    5d14:	b7 01       	movw	r22, r14
    5d16:	8e e2       	ldi	r24, 0x2E	; 46
    5d18:	90 e0       	ldi	r25, 0x00	; 0
    5d1a:	f3 d4       	rcall	.+2534   	; 0x6702 <fputc>
    5d1c:	c8 14       	cp	r12, r8
    5d1e:	d9 04       	cpc	r13, r9
    5d20:	4c f0       	brlt	.+18     	; 0x5d34 <vfprintf+0x31c>
    5d22:	8f 85       	ldd	r24, Y+15	; 0x0f
    5d24:	98 89       	ldd	r25, Y+16	; 0x10
    5d26:	88 15       	cp	r24, r8
    5d28:	99 05       	cpc	r25, r9
    5d2a:	24 f4       	brge	.+8      	; 0x5d34 <vfprintf+0x31c>
    5d2c:	ed 85       	ldd	r30, Y+13	; 0x0d
    5d2e:	fe 85       	ldd	r31, Y+14	; 0x0e
    5d30:	81 81       	ldd	r24, Z+1	; 0x01
    5d32:	01 c0       	rjmp	.+2      	; 0x5d36 <vfprintf+0x31e>
    5d34:	80 e3       	ldi	r24, 0x30	; 48
    5d36:	f1 e0       	ldi	r31, 0x01	; 1
    5d38:	8f 1a       	sub	r8, r31
    5d3a:	91 08       	sbc	r9, r1
    5d3c:	2d 85       	ldd	r18, Y+13	; 0x0d
    5d3e:	3e 85       	ldd	r19, Y+14	; 0x0e
    5d40:	2f 5f       	subi	r18, 0xFF	; 255
    5d42:	3f 4f       	sbci	r19, 0xFF	; 255
    5d44:	3e 87       	std	Y+14, r19	; 0x0e
    5d46:	2d 87       	std	Y+13, r18	; 0x0d
    5d48:	80 16       	cp	r8, r16
    5d4a:	91 06       	cpc	r9, r17
    5d4c:	24 f0       	brlt	.+8      	; 0x5d56 <vfprintf+0x33e>
    5d4e:	b7 01       	movw	r22, r14
    5d50:	90 e0       	ldi	r25, 0x00	; 0
    5d52:	d7 d4       	rcall	.+2478   	; 0x6702 <fputc>
    5d54:	db cf       	rjmp	.-74     	; 0x5d0c <vfprintf+0x2f4>
    5d56:	c8 14       	cp	r12, r8
    5d58:	d9 04       	cpc	r13, r9
    5d5a:	41 f4       	brne	.+16     	; 0x5d6c <vfprintf+0x354>
    5d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    5d5e:	96 33       	cpi	r25, 0x36	; 54
    5d60:	20 f4       	brcc	.+8      	; 0x5d6a <vfprintf+0x352>
    5d62:	95 33       	cpi	r25, 0x35	; 53
    5d64:	19 f4       	brne	.+6      	; 0x5d6c <vfprintf+0x354>
    5d66:	3c 85       	ldd	r19, Y+12	; 0x0c
    5d68:	34 ff       	sbrs	r19, 4
    5d6a:	81 e3       	ldi	r24, 0x31	; 49
    5d6c:	b7 01       	movw	r22, r14
    5d6e:	90 e0       	ldi	r25, 0x00	; 0
    5d70:	48 c0       	rjmp	.+144    	; 0x5e02 <vfprintf+0x3ea>
    5d72:	8a 81       	ldd	r24, Y+2	; 0x02
    5d74:	81 33       	cpi	r24, 0x31	; 49
    5d76:	19 f0       	breq	.+6      	; 0x5d7e <vfprintf+0x366>
    5d78:	9c 85       	ldd	r25, Y+12	; 0x0c
    5d7a:	9f 7e       	andi	r25, 0xEF	; 239
    5d7c:	9c 87       	std	Y+12, r25	; 0x0c
    5d7e:	b7 01       	movw	r22, r14
    5d80:	90 e0       	ldi	r25, 0x00	; 0
    5d82:	bf d4       	rcall	.+2430   	; 0x6702 <fputc>
    5d84:	11 11       	cpse	r17, r1
    5d86:	05 c0       	rjmp	.+10     	; 0x5d92 <vfprintf+0x37a>
    5d88:	94 fc       	sbrc	r9, 4
    5d8a:	16 c0       	rjmp	.+44     	; 0x5db8 <vfprintf+0x3a0>
    5d8c:	85 e6       	ldi	r24, 0x65	; 101
    5d8e:	90 e0       	ldi	r25, 0x00	; 0
    5d90:	15 c0       	rjmp	.+42     	; 0x5dbc <vfprintf+0x3a4>
    5d92:	b7 01       	movw	r22, r14
    5d94:	8e e2       	ldi	r24, 0x2E	; 46
    5d96:	90 e0       	ldi	r25, 0x00	; 0
    5d98:	b4 d4       	rcall	.+2408   	; 0x6702 <fputc>
    5d9a:	1e 5f       	subi	r17, 0xFE	; 254
    5d9c:	82 e0       	ldi	r24, 0x02	; 2
    5d9e:	01 e0       	ldi	r16, 0x01	; 1
    5da0:	08 0f       	add	r16, r24
    5da2:	f3 01       	movw	r30, r6
    5da4:	e8 0f       	add	r30, r24
    5da6:	f1 1d       	adc	r31, r1
    5da8:	80 81       	ld	r24, Z
    5daa:	b7 01       	movw	r22, r14
    5dac:	90 e0       	ldi	r25, 0x00	; 0
    5dae:	a9 d4       	rcall	.+2386   	; 0x6702 <fputc>
    5db0:	80 2f       	mov	r24, r16
    5db2:	01 13       	cpse	r16, r17
    5db4:	f4 cf       	rjmp	.-24     	; 0x5d9e <vfprintf+0x386>
    5db6:	e8 cf       	rjmp	.-48     	; 0x5d88 <vfprintf+0x370>
    5db8:	85 e4       	ldi	r24, 0x45	; 69
    5dba:	90 e0       	ldi	r25, 0x00	; 0
    5dbc:	b7 01       	movw	r22, r14
    5dbe:	a1 d4       	rcall	.+2370   	; 0x6702 <fputc>
    5dc0:	d7 fc       	sbrc	r13, 7
    5dc2:	06 c0       	rjmp	.+12     	; 0x5dd0 <vfprintf+0x3b8>
    5dc4:	c1 14       	cp	r12, r1
    5dc6:	d1 04       	cpc	r13, r1
    5dc8:	41 f4       	brne	.+16     	; 0x5dda <vfprintf+0x3c2>
    5dca:	ec 85       	ldd	r30, Y+12	; 0x0c
    5dcc:	e4 ff       	sbrs	r30, 4
    5dce:	05 c0       	rjmp	.+10     	; 0x5dda <vfprintf+0x3c2>
    5dd0:	d1 94       	neg	r13
    5dd2:	c1 94       	neg	r12
    5dd4:	d1 08       	sbc	r13, r1
    5dd6:	8d e2       	ldi	r24, 0x2D	; 45
    5dd8:	01 c0       	rjmp	.+2      	; 0x5ddc <vfprintf+0x3c4>
    5dda:	8b e2       	ldi	r24, 0x2B	; 43
    5ddc:	b7 01       	movw	r22, r14
    5dde:	90 e0       	ldi	r25, 0x00	; 0
    5de0:	90 d4       	rcall	.+2336   	; 0x6702 <fputc>
    5de2:	80 e3       	ldi	r24, 0x30	; 48
    5de4:	2a e0       	ldi	r18, 0x0A	; 10
    5de6:	c2 16       	cp	r12, r18
    5de8:	d1 04       	cpc	r13, r1
    5dea:	2c f0       	brlt	.+10     	; 0x5df6 <vfprintf+0x3de>
    5dec:	8f 5f       	subi	r24, 0xFF	; 255
    5dee:	fa e0       	ldi	r31, 0x0A	; 10
    5df0:	cf 1a       	sub	r12, r31
    5df2:	d1 08       	sbc	r13, r1
    5df4:	f7 cf       	rjmp	.-18     	; 0x5de4 <vfprintf+0x3cc>
    5df6:	b7 01       	movw	r22, r14
    5df8:	90 e0       	ldi	r25, 0x00	; 0
    5dfa:	83 d4       	rcall	.+2310   	; 0x6702 <fputc>
    5dfc:	b7 01       	movw	r22, r14
    5dfe:	c6 01       	movw	r24, r12
    5e00:	c0 96       	adiw	r24, 0x30	; 48
    5e02:	7f d4       	rcall	.+2302   	; 0x6702 <fputc>
    5e04:	49 c1       	rjmp	.+658    	; 0x6098 <vfprintf+0x680>
    5e06:	83 36       	cpi	r24, 0x63	; 99
    5e08:	31 f0       	breq	.+12     	; 0x5e16 <vfprintf+0x3fe>
    5e0a:	83 37       	cpi	r24, 0x73	; 115
    5e0c:	79 f0       	breq	.+30     	; 0x5e2c <vfprintf+0x414>
    5e0e:	83 35       	cpi	r24, 0x53	; 83
    5e10:	09 f0       	breq	.+2      	; 0x5e14 <vfprintf+0x3fc>
    5e12:	52 c0       	rjmp	.+164    	; 0x5eb8 <vfprintf+0x4a0>
    5e14:	1f c0       	rjmp	.+62     	; 0x5e54 <vfprintf+0x43c>
    5e16:	56 01       	movw	r10, r12
    5e18:	32 e0       	ldi	r19, 0x02	; 2
    5e1a:	a3 0e       	add	r10, r19
    5e1c:	b1 1c       	adc	r11, r1
    5e1e:	f6 01       	movw	r30, r12
    5e20:	80 81       	ld	r24, Z
    5e22:	89 83       	std	Y+1, r24	; 0x01
    5e24:	01 e0       	ldi	r16, 0x01	; 1
    5e26:	10 e0       	ldi	r17, 0x00	; 0
    5e28:	63 01       	movw	r12, r6
    5e2a:	11 c0       	rjmp	.+34     	; 0x5e4e <vfprintf+0x436>
    5e2c:	56 01       	movw	r10, r12
    5e2e:	f2 e0       	ldi	r31, 0x02	; 2
    5e30:	af 0e       	add	r10, r31
    5e32:	b1 1c       	adc	r11, r1
    5e34:	f6 01       	movw	r30, r12
    5e36:	c0 80       	ld	r12, Z
    5e38:	d1 80       	ldd	r13, Z+1	; 0x01
    5e3a:	96 fe       	sbrs	r9, 6
    5e3c:	03 c0       	rjmp	.+6      	; 0x5e44 <vfprintf+0x42c>
    5e3e:	61 2f       	mov	r22, r17
    5e40:	70 e0       	ldi	r23, 0x00	; 0
    5e42:	02 c0       	rjmp	.+4      	; 0x5e48 <vfprintf+0x430>
    5e44:	6f ef       	ldi	r22, 0xFF	; 255
    5e46:	7f ef       	ldi	r23, 0xFF	; 255
    5e48:	c6 01       	movw	r24, r12
    5e4a:	50 d4       	rcall	.+2208   	; 0x66ec <strnlen>
    5e4c:	8c 01       	movw	r16, r24
    5e4e:	f9 2d       	mov	r31, r9
    5e50:	ff 77       	andi	r31, 0x7F	; 127
    5e52:	13 c0       	rjmp	.+38     	; 0x5e7a <vfprintf+0x462>
    5e54:	56 01       	movw	r10, r12
    5e56:	22 e0       	ldi	r18, 0x02	; 2
    5e58:	a2 0e       	add	r10, r18
    5e5a:	b1 1c       	adc	r11, r1
    5e5c:	f6 01       	movw	r30, r12
    5e5e:	c0 80       	ld	r12, Z
    5e60:	d1 80       	ldd	r13, Z+1	; 0x01
    5e62:	96 fe       	sbrs	r9, 6
    5e64:	03 c0       	rjmp	.+6      	; 0x5e6c <vfprintf+0x454>
    5e66:	61 2f       	mov	r22, r17
    5e68:	70 e0       	ldi	r23, 0x00	; 0
    5e6a:	02 c0       	rjmp	.+4      	; 0x5e70 <vfprintf+0x458>
    5e6c:	6f ef       	ldi	r22, 0xFF	; 255
    5e6e:	7f ef       	ldi	r23, 0xFF	; 255
    5e70:	c6 01       	movw	r24, r12
    5e72:	d2 d3       	rcall	.+1956   	; 0x6618 <strnlen_P>
    5e74:	8c 01       	movw	r16, r24
    5e76:	f9 2d       	mov	r31, r9
    5e78:	f0 68       	ori	r31, 0x80	; 128
    5e7a:	9f 2e       	mov	r9, r31
    5e7c:	f3 fd       	sbrc	r31, 3
    5e7e:	18 c0       	rjmp	.+48     	; 0x5eb0 <vfprintf+0x498>
    5e80:	85 2d       	mov	r24, r5
    5e82:	90 e0       	ldi	r25, 0x00	; 0
    5e84:	08 17       	cp	r16, r24
    5e86:	19 07       	cpc	r17, r25
    5e88:	98 f4       	brcc	.+38     	; 0x5eb0 <vfprintf+0x498>
    5e8a:	b7 01       	movw	r22, r14
    5e8c:	80 e2       	ldi	r24, 0x20	; 32
    5e8e:	90 e0       	ldi	r25, 0x00	; 0
    5e90:	38 d4       	rcall	.+2160   	; 0x6702 <fputc>
    5e92:	5a 94       	dec	r5
    5e94:	f5 cf       	rjmp	.-22     	; 0x5e80 <vfprintf+0x468>
    5e96:	f6 01       	movw	r30, r12
    5e98:	97 fc       	sbrc	r9, 7
    5e9a:	85 91       	lpm	r24, Z+
    5e9c:	97 fe       	sbrs	r9, 7
    5e9e:	81 91       	ld	r24, Z+
    5ea0:	6f 01       	movw	r12, r30
    5ea2:	b7 01       	movw	r22, r14
    5ea4:	90 e0       	ldi	r25, 0x00	; 0
    5ea6:	2d d4       	rcall	.+2138   	; 0x6702 <fputc>
    5ea8:	51 10       	cpse	r5, r1
    5eaa:	5a 94       	dec	r5
    5eac:	01 50       	subi	r16, 0x01	; 1
    5eae:	11 09       	sbc	r17, r1
    5eb0:	01 15       	cp	r16, r1
    5eb2:	11 05       	cpc	r17, r1
    5eb4:	81 f7       	brne	.-32     	; 0x5e96 <vfprintf+0x47e>
    5eb6:	f0 c0       	rjmp	.+480    	; 0x6098 <vfprintf+0x680>
    5eb8:	84 36       	cpi	r24, 0x64	; 100
    5eba:	11 f0       	breq	.+4      	; 0x5ec0 <vfprintf+0x4a8>
    5ebc:	89 36       	cpi	r24, 0x69	; 105
    5ebe:	59 f5       	brne	.+86     	; 0x5f16 <vfprintf+0x4fe>
    5ec0:	56 01       	movw	r10, r12
    5ec2:	97 fe       	sbrs	r9, 7
    5ec4:	09 c0       	rjmp	.+18     	; 0x5ed8 <vfprintf+0x4c0>
    5ec6:	24 e0       	ldi	r18, 0x04	; 4
    5ec8:	a2 0e       	add	r10, r18
    5eca:	b1 1c       	adc	r11, r1
    5ecc:	f6 01       	movw	r30, r12
    5ece:	60 81       	ld	r22, Z
    5ed0:	71 81       	ldd	r23, Z+1	; 0x01
    5ed2:	82 81       	ldd	r24, Z+2	; 0x02
    5ed4:	93 81       	ldd	r25, Z+3	; 0x03
    5ed6:	0a c0       	rjmp	.+20     	; 0x5eec <vfprintf+0x4d4>
    5ed8:	f2 e0       	ldi	r31, 0x02	; 2
    5eda:	af 0e       	add	r10, r31
    5edc:	b1 1c       	adc	r11, r1
    5ede:	f6 01       	movw	r30, r12
    5ee0:	60 81       	ld	r22, Z
    5ee2:	71 81       	ldd	r23, Z+1	; 0x01
    5ee4:	07 2e       	mov	r0, r23
    5ee6:	00 0c       	add	r0, r0
    5ee8:	88 0b       	sbc	r24, r24
    5eea:	99 0b       	sbc	r25, r25
    5eec:	f9 2d       	mov	r31, r9
    5eee:	ff 76       	andi	r31, 0x6F	; 111
    5ef0:	9f 2e       	mov	r9, r31
    5ef2:	97 ff       	sbrs	r25, 7
    5ef4:	09 c0       	rjmp	.+18     	; 0x5f08 <vfprintf+0x4f0>
    5ef6:	90 95       	com	r25
    5ef8:	80 95       	com	r24
    5efa:	70 95       	com	r23
    5efc:	61 95       	neg	r22
    5efe:	7f 4f       	sbci	r23, 0xFF	; 255
    5f00:	8f 4f       	sbci	r24, 0xFF	; 255
    5f02:	9f 4f       	sbci	r25, 0xFF	; 255
    5f04:	f0 68       	ori	r31, 0x80	; 128
    5f06:	9f 2e       	mov	r9, r31
    5f08:	2a e0       	ldi	r18, 0x0A	; 10
    5f0a:	30 e0       	ldi	r19, 0x00	; 0
    5f0c:	a3 01       	movw	r20, r6
    5f0e:	a6 d4       	rcall	.+2380   	; 0x685c <__ultoa_invert>
    5f10:	c8 2e       	mov	r12, r24
    5f12:	c6 18       	sub	r12, r6
    5f14:	3e c0       	rjmp	.+124    	; 0x5f92 <vfprintf+0x57a>
    5f16:	09 2d       	mov	r16, r9
    5f18:	85 37       	cpi	r24, 0x75	; 117
    5f1a:	21 f4       	brne	.+8      	; 0x5f24 <vfprintf+0x50c>
    5f1c:	0f 7e       	andi	r16, 0xEF	; 239
    5f1e:	2a e0       	ldi	r18, 0x0A	; 10
    5f20:	30 e0       	ldi	r19, 0x00	; 0
    5f22:	1d c0       	rjmp	.+58     	; 0x5f5e <vfprintf+0x546>
    5f24:	09 7f       	andi	r16, 0xF9	; 249
    5f26:	8f 36       	cpi	r24, 0x6F	; 111
    5f28:	91 f0       	breq	.+36     	; 0x5f4e <vfprintf+0x536>
    5f2a:	18 f4       	brcc	.+6      	; 0x5f32 <vfprintf+0x51a>
    5f2c:	88 35       	cpi	r24, 0x58	; 88
    5f2e:	59 f0       	breq	.+22     	; 0x5f46 <vfprintf+0x52e>
    5f30:	bc c0       	rjmp	.+376    	; 0x60aa <vfprintf+0x692>
    5f32:	80 37       	cpi	r24, 0x70	; 112
    5f34:	19 f0       	breq	.+6      	; 0x5f3c <vfprintf+0x524>
    5f36:	88 37       	cpi	r24, 0x78	; 120
    5f38:	11 f0       	breq	.+4      	; 0x5f3e <vfprintf+0x526>
    5f3a:	b7 c0       	rjmp	.+366    	; 0x60aa <vfprintf+0x692>
    5f3c:	00 61       	ori	r16, 0x10	; 16
    5f3e:	04 ff       	sbrs	r16, 4
    5f40:	09 c0       	rjmp	.+18     	; 0x5f54 <vfprintf+0x53c>
    5f42:	04 60       	ori	r16, 0x04	; 4
    5f44:	07 c0       	rjmp	.+14     	; 0x5f54 <vfprintf+0x53c>
    5f46:	94 fe       	sbrs	r9, 4
    5f48:	08 c0       	rjmp	.+16     	; 0x5f5a <vfprintf+0x542>
    5f4a:	06 60       	ori	r16, 0x06	; 6
    5f4c:	06 c0       	rjmp	.+12     	; 0x5f5a <vfprintf+0x542>
    5f4e:	28 e0       	ldi	r18, 0x08	; 8
    5f50:	30 e0       	ldi	r19, 0x00	; 0
    5f52:	05 c0       	rjmp	.+10     	; 0x5f5e <vfprintf+0x546>
    5f54:	20 e1       	ldi	r18, 0x10	; 16
    5f56:	30 e0       	ldi	r19, 0x00	; 0
    5f58:	02 c0       	rjmp	.+4      	; 0x5f5e <vfprintf+0x546>
    5f5a:	20 e1       	ldi	r18, 0x10	; 16
    5f5c:	32 e0       	ldi	r19, 0x02	; 2
    5f5e:	56 01       	movw	r10, r12
    5f60:	07 ff       	sbrs	r16, 7
    5f62:	09 c0       	rjmp	.+18     	; 0x5f76 <vfprintf+0x55e>
    5f64:	84 e0       	ldi	r24, 0x04	; 4
    5f66:	a8 0e       	add	r10, r24
    5f68:	b1 1c       	adc	r11, r1
    5f6a:	f6 01       	movw	r30, r12
    5f6c:	60 81       	ld	r22, Z
    5f6e:	71 81       	ldd	r23, Z+1	; 0x01
    5f70:	82 81       	ldd	r24, Z+2	; 0x02
    5f72:	93 81       	ldd	r25, Z+3	; 0x03
    5f74:	08 c0       	rjmp	.+16     	; 0x5f86 <vfprintf+0x56e>
    5f76:	f2 e0       	ldi	r31, 0x02	; 2
    5f78:	af 0e       	add	r10, r31
    5f7a:	b1 1c       	adc	r11, r1
    5f7c:	f6 01       	movw	r30, r12
    5f7e:	60 81       	ld	r22, Z
    5f80:	71 81       	ldd	r23, Z+1	; 0x01
    5f82:	80 e0       	ldi	r24, 0x00	; 0
    5f84:	90 e0       	ldi	r25, 0x00	; 0
    5f86:	a3 01       	movw	r20, r6
    5f88:	69 d4       	rcall	.+2258   	; 0x685c <__ultoa_invert>
    5f8a:	c8 2e       	mov	r12, r24
    5f8c:	c6 18       	sub	r12, r6
    5f8e:	0f 77       	andi	r16, 0x7F	; 127
    5f90:	90 2e       	mov	r9, r16
    5f92:	96 fe       	sbrs	r9, 6
    5f94:	0b c0       	rjmp	.+22     	; 0x5fac <vfprintf+0x594>
    5f96:	09 2d       	mov	r16, r9
    5f98:	0e 7f       	andi	r16, 0xFE	; 254
    5f9a:	c1 16       	cp	r12, r17
    5f9c:	50 f4       	brcc	.+20     	; 0x5fb2 <vfprintf+0x59a>
    5f9e:	94 fe       	sbrs	r9, 4
    5fa0:	0a c0       	rjmp	.+20     	; 0x5fb6 <vfprintf+0x59e>
    5fa2:	92 fc       	sbrc	r9, 2
    5fa4:	08 c0       	rjmp	.+16     	; 0x5fb6 <vfprintf+0x59e>
    5fa6:	09 2d       	mov	r16, r9
    5fa8:	0e 7e       	andi	r16, 0xEE	; 238
    5faa:	05 c0       	rjmp	.+10     	; 0x5fb6 <vfprintf+0x59e>
    5fac:	dc 2c       	mov	r13, r12
    5fae:	09 2d       	mov	r16, r9
    5fb0:	03 c0       	rjmp	.+6      	; 0x5fb8 <vfprintf+0x5a0>
    5fb2:	dc 2c       	mov	r13, r12
    5fb4:	01 c0       	rjmp	.+2      	; 0x5fb8 <vfprintf+0x5a0>
    5fb6:	d1 2e       	mov	r13, r17
    5fb8:	04 ff       	sbrs	r16, 4
    5fba:	0d c0       	rjmp	.+26     	; 0x5fd6 <vfprintf+0x5be>
    5fbc:	fe 01       	movw	r30, r28
    5fbe:	ec 0d       	add	r30, r12
    5fc0:	f1 1d       	adc	r31, r1
    5fc2:	80 81       	ld	r24, Z
    5fc4:	80 33       	cpi	r24, 0x30	; 48
    5fc6:	11 f4       	brne	.+4      	; 0x5fcc <vfprintf+0x5b4>
    5fc8:	09 7e       	andi	r16, 0xE9	; 233
    5fca:	09 c0       	rjmp	.+18     	; 0x5fde <vfprintf+0x5c6>
    5fcc:	02 ff       	sbrs	r16, 2
    5fce:	06 c0       	rjmp	.+12     	; 0x5fdc <vfprintf+0x5c4>
    5fd0:	d3 94       	inc	r13
    5fd2:	d3 94       	inc	r13
    5fd4:	04 c0       	rjmp	.+8      	; 0x5fde <vfprintf+0x5c6>
    5fd6:	80 2f       	mov	r24, r16
    5fd8:	86 78       	andi	r24, 0x86	; 134
    5fda:	09 f0       	breq	.+2      	; 0x5fde <vfprintf+0x5c6>
    5fdc:	d3 94       	inc	r13
    5fde:	03 fd       	sbrc	r16, 3
    5fe0:	10 c0       	rjmp	.+32     	; 0x6002 <vfprintf+0x5ea>
    5fe2:	00 ff       	sbrs	r16, 0
    5fe4:	06 c0       	rjmp	.+12     	; 0x5ff2 <vfprintf+0x5da>
    5fe6:	1c 2d       	mov	r17, r12
    5fe8:	d5 14       	cp	r13, r5
    5fea:	78 f4       	brcc	.+30     	; 0x600a <vfprintf+0x5f2>
    5fec:	15 0d       	add	r17, r5
    5fee:	1d 19       	sub	r17, r13
    5ff0:	0c c0       	rjmp	.+24     	; 0x600a <vfprintf+0x5f2>
    5ff2:	d5 14       	cp	r13, r5
    5ff4:	50 f4       	brcc	.+20     	; 0x600a <vfprintf+0x5f2>
    5ff6:	b7 01       	movw	r22, r14
    5ff8:	80 e2       	ldi	r24, 0x20	; 32
    5ffa:	90 e0       	ldi	r25, 0x00	; 0
    5ffc:	82 d3       	rcall	.+1796   	; 0x6702 <fputc>
    5ffe:	d3 94       	inc	r13
    6000:	f8 cf       	rjmp	.-16     	; 0x5ff2 <vfprintf+0x5da>
    6002:	d5 14       	cp	r13, r5
    6004:	10 f4       	brcc	.+4      	; 0x600a <vfprintf+0x5f2>
    6006:	5d 18       	sub	r5, r13
    6008:	01 c0       	rjmp	.+2      	; 0x600c <vfprintf+0x5f4>
    600a:	51 2c       	mov	r5, r1
    600c:	04 ff       	sbrs	r16, 4
    600e:	0f c0       	rjmp	.+30     	; 0x602e <vfprintf+0x616>
    6010:	b7 01       	movw	r22, r14
    6012:	80 e3       	ldi	r24, 0x30	; 48
    6014:	90 e0       	ldi	r25, 0x00	; 0
    6016:	75 d3       	rcall	.+1770   	; 0x6702 <fputc>
    6018:	02 ff       	sbrs	r16, 2
    601a:	16 c0       	rjmp	.+44     	; 0x6048 <vfprintf+0x630>
    601c:	01 fd       	sbrc	r16, 1
    601e:	03 c0       	rjmp	.+6      	; 0x6026 <vfprintf+0x60e>
    6020:	88 e7       	ldi	r24, 0x78	; 120
    6022:	90 e0       	ldi	r25, 0x00	; 0
    6024:	02 c0       	rjmp	.+4      	; 0x602a <vfprintf+0x612>
    6026:	88 e5       	ldi	r24, 0x58	; 88
    6028:	90 e0       	ldi	r25, 0x00	; 0
    602a:	b7 01       	movw	r22, r14
    602c:	0c c0       	rjmp	.+24     	; 0x6046 <vfprintf+0x62e>
    602e:	80 2f       	mov	r24, r16
    6030:	86 78       	andi	r24, 0x86	; 134
    6032:	51 f0       	breq	.+20     	; 0x6048 <vfprintf+0x630>
    6034:	01 ff       	sbrs	r16, 1
    6036:	02 c0       	rjmp	.+4      	; 0x603c <vfprintf+0x624>
    6038:	8b e2       	ldi	r24, 0x2B	; 43
    603a:	01 c0       	rjmp	.+2      	; 0x603e <vfprintf+0x626>
    603c:	80 e2       	ldi	r24, 0x20	; 32
    603e:	07 fd       	sbrc	r16, 7
    6040:	8d e2       	ldi	r24, 0x2D	; 45
    6042:	b7 01       	movw	r22, r14
    6044:	90 e0       	ldi	r25, 0x00	; 0
    6046:	5d d3       	rcall	.+1722   	; 0x6702 <fputc>
    6048:	c1 16       	cp	r12, r17
    604a:	30 f4       	brcc	.+12     	; 0x6058 <vfprintf+0x640>
    604c:	b7 01       	movw	r22, r14
    604e:	80 e3       	ldi	r24, 0x30	; 48
    6050:	90 e0       	ldi	r25, 0x00	; 0
    6052:	57 d3       	rcall	.+1710   	; 0x6702 <fputc>
    6054:	11 50       	subi	r17, 0x01	; 1
    6056:	f8 cf       	rjmp	.-16     	; 0x6048 <vfprintf+0x630>
    6058:	ca 94       	dec	r12
    605a:	f3 01       	movw	r30, r6
    605c:	ec 0d       	add	r30, r12
    605e:	f1 1d       	adc	r31, r1
    6060:	80 81       	ld	r24, Z
    6062:	b7 01       	movw	r22, r14
    6064:	90 e0       	ldi	r25, 0x00	; 0
    6066:	4d d3       	rcall	.+1690   	; 0x6702 <fputc>
    6068:	c1 10       	cpse	r12, r1
    606a:	f6 cf       	rjmp	.-20     	; 0x6058 <vfprintf+0x640>
    606c:	15 c0       	rjmp	.+42     	; 0x6098 <vfprintf+0x680>
    606e:	f4 e0       	ldi	r31, 0x04	; 4
    6070:	f5 15       	cp	r31, r5
    6072:	50 f5       	brcc	.+84     	; 0x60c8 <vfprintf+0x6b0>
    6074:	84 e0       	ldi	r24, 0x04	; 4
    6076:	58 1a       	sub	r5, r24
    6078:	93 fe       	sbrs	r9, 3
    607a:	1e c0       	rjmp	.+60     	; 0x60b8 <vfprintf+0x6a0>
    607c:	01 11       	cpse	r16, r1
    607e:	25 c0       	rjmp	.+74     	; 0x60ca <vfprintf+0x6b2>
    6080:	2c 85       	ldd	r18, Y+12	; 0x0c
    6082:	23 ff       	sbrs	r18, 3
    6084:	27 c0       	rjmp	.+78     	; 0x60d4 <vfprintf+0x6bc>
    6086:	0a e9       	ldi	r16, 0x9A	; 154
    6088:	11 e0       	ldi	r17, 0x01	; 1
    608a:	39 2d       	mov	r19, r9
    608c:	30 71       	andi	r19, 0x10	; 16
    608e:	93 2e       	mov	r9, r19
    6090:	f8 01       	movw	r30, r16
    6092:	84 91       	lpm	r24, Z
    6094:	81 11       	cpse	r24, r1
    6096:	21 c0       	rjmp	.+66     	; 0x60da <vfprintf+0x6c2>
    6098:	55 20       	and	r5, r5
    609a:	09 f4       	brne	.+2      	; 0x609e <vfprintf+0x686>
    609c:	fc cc       	rjmp	.-1544   	; 0x5a96 <vfprintf+0x7e>
    609e:	b7 01       	movw	r22, r14
    60a0:	80 e2       	ldi	r24, 0x20	; 32
    60a2:	90 e0       	ldi	r25, 0x00	; 0
    60a4:	2e d3       	rcall	.+1628   	; 0x6702 <fputc>
    60a6:	5a 94       	dec	r5
    60a8:	f7 cf       	rjmp	.-18     	; 0x6098 <vfprintf+0x680>
    60aa:	f7 01       	movw	r30, r14
    60ac:	86 81       	ldd	r24, Z+6	; 0x06
    60ae:	97 81       	ldd	r25, Z+7	; 0x07
    60b0:	23 c0       	rjmp	.+70     	; 0x60f8 <vfprintf+0x6e0>
    60b2:	8f ef       	ldi	r24, 0xFF	; 255
    60b4:	9f ef       	ldi	r25, 0xFF	; 255
    60b6:	20 c0       	rjmp	.+64     	; 0x60f8 <vfprintf+0x6e0>
    60b8:	b7 01       	movw	r22, r14
    60ba:	80 e2       	ldi	r24, 0x20	; 32
    60bc:	90 e0       	ldi	r25, 0x00	; 0
    60be:	21 d3       	rcall	.+1602   	; 0x6702 <fputc>
    60c0:	5a 94       	dec	r5
    60c2:	51 10       	cpse	r5, r1
    60c4:	f9 cf       	rjmp	.-14     	; 0x60b8 <vfprintf+0x6a0>
    60c6:	da cf       	rjmp	.-76     	; 0x607c <vfprintf+0x664>
    60c8:	51 2c       	mov	r5, r1
    60ca:	b7 01       	movw	r22, r14
    60cc:	80 2f       	mov	r24, r16
    60ce:	90 e0       	ldi	r25, 0x00	; 0
    60d0:	18 d3       	rcall	.+1584   	; 0x6702 <fputc>
    60d2:	d6 cf       	rjmp	.-84     	; 0x6080 <vfprintf+0x668>
    60d4:	0e e9       	ldi	r16, 0x9E	; 158
    60d6:	11 e0       	ldi	r17, 0x01	; 1
    60d8:	d8 cf       	rjmp	.-80     	; 0x608a <vfprintf+0x672>
    60da:	91 10       	cpse	r9, r1
    60dc:	80 52       	subi	r24, 0x20	; 32
    60de:	b7 01       	movw	r22, r14
    60e0:	90 e0       	ldi	r25, 0x00	; 0
    60e2:	0f d3       	rcall	.+1566   	; 0x6702 <fputc>
    60e4:	0f 5f       	subi	r16, 0xFF	; 255
    60e6:	1f 4f       	sbci	r17, 0xFF	; 255
    60e8:	d3 cf       	rjmp	.-90     	; 0x6090 <vfprintf+0x678>
    60ea:	23 e0       	ldi	r18, 0x03	; 3
    60ec:	25 15       	cp	r18, r5
    60ee:	10 f4       	brcc	.+4      	; 0x60f4 <vfprintf+0x6dc>
    60f0:	83 e0       	ldi	r24, 0x03	; 3
    60f2:	c1 cf       	rjmp	.-126    	; 0x6076 <vfprintf+0x65e>
    60f4:	51 2c       	mov	r5, r1
    60f6:	c4 cf       	rjmp	.-120    	; 0x6080 <vfprintf+0x668>
    60f8:	60 96       	adiw	r28, 0x10	; 16
    60fa:	0f b6       	in	r0, 0x3f	; 63
    60fc:	f8 94       	cli
    60fe:	de bf       	out	0x3e, r29	; 62
    6100:	0f be       	out	0x3f, r0	; 63
    6102:	cd bf       	out	0x3d, r28	; 61
    6104:	df 91       	pop	r29
    6106:	cf 91       	pop	r28
    6108:	1f 91       	pop	r17
    610a:	0f 91       	pop	r16
    610c:	ff 90       	pop	r15
    610e:	ef 90       	pop	r14
    6110:	df 90       	pop	r13
    6112:	cf 90       	pop	r12
    6114:	bf 90       	pop	r11
    6116:	af 90       	pop	r10
    6118:	9f 90       	pop	r9
    611a:	8f 90       	pop	r8
    611c:	7f 90       	pop	r7
    611e:	6f 90       	pop	r6
    6120:	5f 90       	pop	r5
    6122:	4f 90       	pop	r4
    6124:	3f 90       	pop	r3
    6126:	2f 90       	pop	r2
    6128:	08 95       	ret

0000612a <__divmodhi4>:
    612a:	97 fb       	bst	r25, 7
    612c:	07 2e       	mov	r0, r23
    612e:	16 f4       	brtc	.+4      	; 0x6134 <__divmodhi4+0xa>
    6130:	00 94       	com	r0
    6132:	06 d0       	rcall	.+12     	; 0x6140 <__divmodhi4_neg1>
    6134:	77 fd       	sbrc	r23, 7
    6136:	08 d0       	rcall	.+16     	; 0x6148 <__divmodhi4_neg2>
    6138:	44 d0       	rcall	.+136    	; 0x61c2 <__udivmodhi4>
    613a:	07 fc       	sbrc	r0, 7
    613c:	05 d0       	rcall	.+10     	; 0x6148 <__divmodhi4_neg2>
    613e:	3e f4       	brtc	.+14     	; 0x614e <__divmodhi4_exit>

00006140 <__divmodhi4_neg1>:
    6140:	90 95       	com	r25
    6142:	81 95       	neg	r24
    6144:	9f 4f       	sbci	r25, 0xFF	; 255
    6146:	08 95       	ret

00006148 <__divmodhi4_neg2>:
    6148:	70 95       	com	r23
    614a:	61 95       	neg	r22
    614c:	7f 4f       	sbci	r23, 0xFF	; 255

0000614e <__divmodhi4_exit>:
    614e:	08 95       	ret

00006150 <__udivmodsi4>:
    6150:	a1 e2       	ldi	r26, 0x21	; 33
    6152:	1a 2e       	mov	r1, r26
    6154:	aa 1b       	sub	r26, r26
    6156:	bb 1b       	sub	r27, r27
    6158:	fd 01       	movw	r30, r26
    615a:	0d c0       	rjmp	.+26     	; 0x6176 <__udivmodsi4_ep>

0000615c <__udivmodsi4_loop>:
    615c:	aa 1f       	adc	r26, r26
    615e:	bb 1f       	adc	r27, r27
    6160:	ee 1f       	adc	r30, r30
    6162:	ff 1f       	adc	r31, r31
    6164:	a2 17       	cp	r26, r18
    6166:	b3 07       	cpc	r27, r19
    6168:	e4 07       	cpc	r30, r20
    616a:	f5 07       	cpc	r31, r21
    616c:	20 f0       	brcs	.+8      	; 0x6176 <__udivmodsi4_ep>
    616e:	a2 1b       	sub	r26, r18
    6170:	b3 0b       	sbc	r27, r19
    6172:	e4 0b       	sbc	r30, r20
    6174:	f5 0b       	sbc	r31, r21

00006176 <__udivmodsi4_ep>:
    6176:	66 1f       	adc	r22, r22
    6178:	77 1f       	adc	r23, r23
    617a:	88 1f       	adc	r24, r24
    617c:	99 1f       	adc	r25, r25
    617e:	1a 94       	dec	r1
    6180:	69 f7       	brne	.-38     	; 0x615c <__udivmodsi4_loop>
    6182:	60 95       	com	r22
    6184:	70 95       	com	r23
    6186:	80 95       	com	r24
    6188:	90 95       	com	r25
    618a:	9b 01       	movw	r18, r22
    618c:	ac 01       	movw	r20, r24
    618e:	bd 01       	movw	r22, r26
    6190:	cf 01       	movw	r24, r30
    6192:	08 95       	ret

00006194 <__tablejump2__>:
    6194:	ee 0f       	add	r30, r30
    6196:	ff 1f       	adc	r31, r31
    6198:	88 1f       	adc	r24, r24
    619a:	8b bf       	out	0x3b, r24	; 59
    619c:	07 90       	elpm	r0, Z+
    619e:	f6 91       	elpm	r31, Z
    61a0:	e0 2d       	mov	r30, r0
    61a2:	19 94       	eijmp

000061a4 <__umulhisi3>:
    61a4:	a2 9f       	mul	r26, r18
    61a6:	b0 01       	movw	r22, r0
    61a8:	b3 9f       	mul	r27, r19
    61aa:	c0 01       	movw	r24, r0
    61ac:	a3 9f       	mul	r26, r19
    61ae:	70 0d       	add	r23, r0
    61b0:	81 1d       	adc	r24, r1
    61b2:	11 24       	eor	r1, r1
    61b4:	91 1d       	adc	r25, r1
    61b6:	b2 9f       	mul	r27, r18
    61b8:	70 0d       	add	r23, r0
    61ba:	81 1d       	adc	r24, r1
    61bc:	11 24       	eor	r1, r1
    61be:	91 1d       	adc	r25, r1
    61c0:	08 95       	ret

000061c2 <__udivmodhi4>:
    61c2:	aa 1b       	sub	r26, r26
    61c4:	bb 1b       	sub	r27, r27
    61c6:	51 e1       	ldi	r21, 0x11	; 17
    61c8:	07 c0       	rjmp	.+14     	; 0x61d8 <__udivmodhi4_ep>

000061ca <__udivmodhi4_loop>:
    61ca:	aa 1f       	adc	r26, r26
    61cc:	bb 1f       	adc	r27, r27
    61ce:	a6 17       	cp	r26, r22
    61d0:	b7 07       	cpc	r27, r23
    61d2:	10 f0       	brcs	.+4      	; 0x61d8 <__udivmodhi4_ep>
    61d4:	a6 1b       	sub	r26, r22
    61d6:	b7 0b       	sbc	r27, r23

000061d8 <__udivmodhi4_ep>:
    61d8:	88 1f       	adc	r24, r24
    61da:	99 1f       	adc	r25, r25
    61dc:	5a 95       	dec	r21
    61de:	a9 f7       	brne	.-22     	; 0x61ca <__udivmodhi4_loop>
    61e0:	80 95       	com	r24
    61e2:	90 95       	com	r25
    61e4:	bc 01       	movw	r22, r24
    61e6:	cd 01       	movw	r24, r26
    61e8:	08 95       	ret

000061ea <calloc>:
    61ea:	0f 93       	push	r16
    61ec:	1f 93       	push	r17
    61ee:	cf 93       	push	r28
    61f0:	df 93       	push	r29
    61f2:	86 9f       	mul	r24, r22
    61f4:	80 01       	movw	r16, r0
    61f6:	87 9f       	mul	r24, r23
    61f8:	10 0d       	add	r17, r0
    61fa:	96 9f       	mul	r25, r22
    61fc:	10 0d       	add	r17, r0
    61fe:	11 24       	eor	r1, r1
    6200:	c8 01       	movw	r24, r16
    6202:	0d d0       	rcall	.+26     	; 0x621e <malloc>
    6204:	ec 01       	movw	r28, r24
    6206:	00 97       	sbiw	r24, 0x00	; 0
    6208:	21 f0       	breq	.+8      	; 0x6212 <calloc+0x28>
    620a:	a8 01       	movw	r20, r16
    620c:	60 e0       	ldi	r22, 0x00	; 0
    620e:	70 e0       	ldi	r23, 0x00	; 0
    6210:	17 d2       	rcall	.+1070   	; 0x6640 <memset>
    6212:	ce 01       	movw	r24, r28
    6214:	df 91       	pop	r29
    6216:	cf 91       	pop	r28
    6218:	1f 91       	pop	r17
    621a:	0f 91       	pop	r16
    621c:	08 95       	ret

0000621e <malloc>:
    621e:	0f 93       	push	r16
    6220:	1f 93       	push	r17
    6222:	cf 93       	push	r28
    6224:	df 93       	push	r29
    6226:	82 30       	cpi	r24, 0x02	; 2
    6228:	91 05       	cpc	r25, r1
    622a:	10 f4       	brcc	.+4      	; 0x6230 <malloc+0x12>
    622c:	82 e0       	ldi	r24, 0x02	; 2
    622e:	90 e0       	ldi	r25, 0x00	; 0
    6230:	e0 91 81 16 	lds	r30, 0x1681	; 0x801681 <__flp>
    6234:	f0 91 82 16 	lds	r31, 0x1682	; 0x801682 <__flp+0x1>
    6238:	20 e0       	ldi	r18, 0x00	; 0
    623a:	30 e0       	ldi	r19, 0x00	; 0
    623c:	a0 e0       	ldi	r26, 0x00	; 0
    623e:	b0 e0       	ldi	r27, 0x00	; 0
    6240:	30 97       	sbiw	r30, 0x00	; 0
    6242:	19 f1       	breq	.+70     	; 0x628a <malloc+0x6c>
    6244:	40 81       	ld	r20, Z
    6246:	51 81       	ldd	r21, Z+1	; 0x01
    6248:	02 81       	ldd	r16, Z+2	; 0x02
    624a:	13 81       	ldd	r17, Z+3	; 0x03
    624c:	48 17       	cp	r20, r24
    624e:	59 07       	cpc	r21, r25
    6250:	c8 f0       	brcs	.+50     	; 0x6284 <malloc+0x66>
    6252:	84 17       	cp	r24, r20
    6254:	95 07       	cpc	r25, r21
    6256:	69 f4       	brne	.+26     	; 0x6272 <malloc+0x54>
    6258:	10 97       	sbiw	r26, 0x00	; 0
    625a:	31 f0       	breq	.+12     	; 0x6268 <malloc+0x4a>
    625c:	12 96       	adiw	r26, 0x02	; 2
    625e:	0c 93       	st	X, r16
    6260:	12 97       	sbiw	r26, 0x02	; 2
    6262:	13 96       	adiw	r26, 0x03	; 3
    6264:	1c 93       	st	X, r17
    6266:	27 c0       	rjmp	.+78     	; 0x62b6 <malloc+0x98>
    6268:	00 93 81 16 	sts	0x1681, r16	; 0x801681 <__flp>
    626c:	10 93 82 16 	sts	0x1682, r17	; 0x801682 <__flp+0x1>
    6270:	22 c0       	rjmp	.+68     	; 0x62b6 <malloc+0x98>
    6272:	21 15       	cp	r18, r1
    6274:	31 05       	cpc	r19, r1
    6276:	19 f0       	breq	.+6      	; 0x627e <malloc+0x60>
    6278:	42 17       	cp	r20, r18
    627a:	53 07       	cpc	r21, r19
    627c:	18 f4       	brcc	.+6      	; 0x6284 <malloc+0x66>
    627e:	9a 01       	movw	r18, r20
    6280:	bd 01       	movw	r22, r26
    6282:	ef 01       	movw	r28, r30
    6284:	df 01       	movw	r26, r30
    6286:	f8 01       	movw	r30, r16
    6288:	db cf       	rjmp	.-74     	; 0x6240 <malloc+0x22>
    628a:	21 15       	cp	r18, r1
    628c:	31 05       	cpc	r19, r1
    628e:	f9 f0       	breq	.+62     	; 0x62ce <malloc+0xb0>
    6290:	28 1b       	sub	r18, r24
    6292:	39 0b       	sbc	r19, r25
    6294:	24 30       	cpi	r18, 0x04	; 4
    6296:	31 05       	cpc	r19, r1
    6298:	80 f4       	brcc	.+32     	; 0x62ba <malloc+0x9c>
    629a:	8a 81       	ldd	r24, Y+2	; 0x02
    629c:	9b 81       	ldd	r25, Y+3	; 0x03
    629e:	61 15       	cp	r22, r1
    62a0:	71 05       	cpc	r23, r1
    62a2:	21 f0       	breq	.+8      	; 0x62ac <malloc+0x8e>
    62a4:	fb 01       	movw	r30, r22
    62a6:	93 83       	std	Z+3, r25	; 0x03
    62a8:	82 83       	std	Z+2, r24	; 0x02
    62aa:	04 c0       	rjmp	.+8      	; 0x62b4 <malloc+0x96>
    62ac:	90 93 82 16 	sts	0x1682, r25	; 0x801682 <__flp+0x1>
    62b0:	80 93 81 16 	sts	0x1681, r24	; 0x801681 <__flp>
    62b4:	fe 01       	movw	r30, r28
    62b6:	32 96       	adiw	r30, 0x02	; 2
    62b8:	44 c0       	rjmp	.+136    	; 0x6342 <malloc+0x124>
    62ba:	fe 01       	movw	r30, r28
    62bc:	e2 0f       	add	r30, r18
    62be:	f3 1f       	adc	r31, r19
    62c0:	81 93       	st	Z+, r24
    62c2:	91 93       	st	Z+, r25
    62c4:	22 50       	subi	r18, 0x02	; 2
    62c6:	31 09       	sbc	r19, r1
    62c8:	39 83       	std	Y+1, r19	; 0x01
    62ca:	28 83       	st	Y, r18
    62cc:	3a c0       	rjmp	.+116    	; 0x6342 <malloc+0x124>
    62ce:	20 91 7f 16 	lds	r18, 0x167F	; 0x80167f <__brkval>
    62d2:	30 91 80 16 	lds	r19, 0x1680	; 0x801680 <__brkval+0x1>
    62d6:	23 2b       	or	r18, r19
    62d8:	41 f4       	brne	.+16     	; 0x62ea <malloc+0xcc>
    62da:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    62de:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    62e2:	30 93 80 16 	sts	0x1680, r19	; 0x801680 <__brkval+0x1>
    62e6:	20 93 7f 16 	sts	0x167F, r18	; 0x80167f <__brkval>
    62ea:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    62ee:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    62f2:	21 15       	cp	r18, r1
    62f4:	31 05       	cpc	r19, r1
    62f6:	41 f4       	brne	.+16     	; 0x6308 <malloc+0xea>
    62f8:	2d b7       	in	r18, 0x3d	; 61
    62fa:	3e b7       	in	r19, 0x3e	; 62
    62fc:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6300:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6304:	24 1b       	sub	r18, r20
    6306:	35 0b       	sbc	r19, r21
    6308:	e0 91 7f 16 	lds	r30, 0x167F	; 0x80167f <__brkval>
    630c:	f0 91 80 16 	lds	r31, 0x1680	; 0x801680 <__brkval+0x1>
    6310:	e2 17       	cp	r30, r18
    6312:	f3 07       	cpc	r31, r19
    6314:	a0 f4       	brcc	.+40     	; 0x633e <malloc+0x120>
    6316:	2e 1b       	sub	r18, r30
    6318:	3f 0b       	sbc	r19, r31
    631a:	28 17       	cp	r18, r24
    631c:	39 07       	cpc	r19, r25
    631e:	78 f0       	brcs	.+30     	; 0x633e <malloc+0x120>
    6320:	ac 01       	movw	r20, r24
    6322:	4e 5f       	subi	r20, 0xFE	; 254
    6324:	5f 4f       	sbci	r21, 0xFF	; 255
    6326:	24 17       	cp	r18, r20
    6328:	35 07       	cpc	r19, r21
    632a:	48 f0       	brcs	.+18     	; 0x633e <malloc+0x120>
    632c:	4e 0f       	add	r20, r30
    632e:	5f 1f       	adc	r21, r31
    6330:	50 93 80 16 	sts	0x1680, r21	; 0x801680 <__brkval+0x1>
    6334:	40 93 7f 16 	sts	0x167F, r20	; 0x80167f <__brkval>
    6338:	81 93       	st	Z+, r24
    633a:	91 93       	st	Z+, r25
    633c:	02 c0       	rjmp	.+4      	; 0x6342 <malloc+0x124>
    633e:	e0 e0       	ldi	r30, 0x00	; 0
    6340:	f0 e0       	ldi	r31, 0x00	; 0
    6342:	cf 01       	movw	r24, r30
    6344:	df 91       	pop	r29
    6346:	cf 91       	pop	r28
    6348:	1f 91       	pop	r17
    634a:	0f 91       	pop	r16
    634c:	08 95       	ret

0000634e <free>:
    634e:	cf 93       	push	r28
    6350:	df 93       	push	r29
    6352:	00 97       	sbiw	r24, 0x00	; 0
    6354:	09 f4       	brne	.+2      	; 0x6358 <free+0xa>
    6356:	81 c0       	rjmp	.+258    	; 0x645a <free+0x10c>
    6358:	fc 01       	movw	r30, r24
    635a:	32 97       	sbiw	r30, 0x02	; 2
    635c:	13 82       	std	Z+3, r1	; 0x03
    635e:	12 82       	std	Z+2, r1	; 0x02
    6360:	a0 91 81 16 	lds	r26, 0x1681	; 0x801681 <__flp>
    6364:	b0 91 82 16 	lds	r27, 0x1682	; 0x801682 <__flp+0x1>
    6368:	10 97       	sbiw	r26, 0x00	; 0
    636a:	81 f4       	brne	.+32     	; 0x638c <free+0x3e>
    636c:	20 81       	ld	r18, Z
    636e:	31 81       	ldd	r19, Z+1	; 0x01
    6370:	82 0f       	add	r24, r18
    6372:	93 1f       	adc	r25, r19
    6374:	20 91 7f 16 	lds	r18, 0x167F	; 0x80167f <__brkval>
    6378:	30 91 80 16 	lds	r19, 0x1680	; 0x801680 <__brkval+0x1>
    637c:	28 17       	cp	r18, r24
    637e:	39 07       	cpc	r19, r25
    6380:	51 f5       	brne	.+84     	; 0x63d6 <free+0x88>
    6382:	f0 93 80 16 	sts	0x1680, r31	; 0x801680 <__brkval+0x1>
    6386:	e0 93 7f 16 	sts	0x167F, r30	; 0x80167f <__brkval>
    638a:	67 c0       	rjmp	.+206    	; 0x645a <free+0x10c>
    638c:	ed 01       	movw	r28, r26
    638e:	20 e0       	ldi	r18, 0x00	; 0
    6390:	30 e0       	ldi	r19, 0x00	; 0
    6392:	ce 17       	cp	r28, r30
    6394:	df 07       	cpc	r29, r31
    6396:	40 f4       	brcc	.+16     	; 0x63a8 <free+0x5a>
    6398:	4a 81       	ldd	r20, Y+2	; 0x02
    639a:	5b 81       	ldd	r21, Y+3	; 0x03
    639c:	9e 01       	movw	r18, r28
    639e:	41 15       	cp	r20, r1
    63a0:	51 05       	cpc	r21, r1
    63a2:	f1 f0       	breq	.+60     	; 0x63e0 <free+0x92>
    63a4:	ea 01       	movw	r28, r20
    63a6:	f5 cf       	rjmp	.-22     	; 0x6392 <free+0x44>
    63a8:	d3 83       	std	Z+3, r29	; 0x03
    63aa:	c2 83       	std	Z+2, r28	; 0x02
    63ac:	40 81       	ld	r20, Z
    63ae:	51 81       	ldd	r21, Z+1	; 0x01
    63b0:	84 0f       	add	r24, r20
    63b2:	95 1f       	adc	r25, r21
    63b4:	c8 17       	cp	r28, r24
    63b6:	d9 07       	cpc	r29, r25
    63b8:	59 f4       	brne	.+22     	; 0x63d0 <free+0x82>
    63ba:	88 81       	ld	r24, Y
    63bc:	99 81       	ldd	r25, Y+1	; 0x01
    63be:	84 0f       	add	r24, r20
    63c0:	95 1f       	adc	r25, r21
    63c2:	02 96       	adiw	r24, 0x02	; 2
    63c4:	91 83       	std	Z+1, r25	; 0x01
    63c6:	80 83       	st	Z, r24
    63c8:	8a 81       	ldd	r24, Y+2	; 0x02
    63ca:	9b 81       	ldd	r25, Y+3	; 0x03
    63cc:	93 83       	std	Z+3, r25	; 0x03
    63ce:	82 83       	std	Z+2, r24	; 0x02
    63d0:	21 15       	cp	r18, r1
    63d2:	31 05       	cpc	r19, r1
    63d4:	29 f4       	brne	.+10     	; 0x63e0 <free+0x92>
    63d6:	f0 93 82 16 	sts	0x1682, r31	; 0x801682 <__flp+0x1>
    63da:	e0 93 81 16 	sts	0x1681, r30	; 0x801681 <__flp>
    63de:	3d c0       	rjmp	.+122    	; 0x645a <free+0x10c>
    63e0:	e9 01       	movw	r28, r18
    63e2:	fb 83       	std	Y+3, r31	; 0x03
    63e4:	ea 83       	std	Y+2, r30	; 0x02
    63e6:	49 91       	ld	r20, Y+
    63e8:	59 91       	ld	r21, Y+
    63ea:	c4 0f       	add	r28, r20
    63ec:	d5 1f       	adc	r29, r21
    63ee:	ec 17       	cp	r30, r28
    63f0:	fd 07       	cpc	r31, r29
    63f2:	61 f4       	brne	.+24     	; 0x640c <free+0xbe>
    63f4:	80 81       	ld	r24, Z
    63f6:	91 81       	ldd	r25, Z+1	; 0x01
    63f8:	84 0f       	add	r24, r20
    63fa:	95 1f       	adc	r25, r21
    63fc:	02 96       	adiw	r24, 0x02	; 2
    63fe:	e9 01       	movw	r28, r18
    6400:	99 83       	std	Y+1, r25	; 0x01
    6402:	88 83       	st	Y, r24
    6404:	82 81       	ldd	r24, Z+2	; 0x02
    6406:	93 81       	ldd	r25, Z+3	; 0x03
    6408:	9b 83       	std	Y+3, r25	; 0x03
    640a:	8a 83       	std	Y+2, r24	; 0x02
    640c:	e0 e0       	ldi	r30, 0x00	; 0
    640e:	f0 e0       	ldi	r31, 0x00	; 0
    6410:	12 96       	adiw	r26, 0x02	; 2
    6412:	8d 91       	ld	r24, X+
    6414:	9c 91       	ld	r25, X
    6416:	13 97       	sbiw	r26, 0x03	; 3
    6418:	00 97       	sbiw	r24, 0x00	; 0
    641a:	19 f0       	breq	.+6      	; 0x6422 <free+0xd4>
    641c:	fd 01       	movw	r30, r26
    641e:	dc 01       	movw	r26, r24
    6420:	f7 cf       	rjmp	.-18     	; 0x6410 <free+0xc2>
    6422:	8d 91       	ld	r24, X+
    6424:	9c 91       	ld	r25, X
    6426:	11 97       	sbiw	r26, 0x01	; 1
    6428:	9d 01       	movw	r18, r26
    642a:	2e 5f       	subi	r18, 0xFE	; 254
    642c:	3f 4f       	sbci	r19, 0xFF	; 255
    642e:	82 0f       	add	r24, r18
    6430:	93 1f       	adc	r25, r19
    6432:	20 91 7f 16 	lds	r18, 0x167F	; 0x80167f <__brkval>
    6436:	30 91 80 16 	lds	r19, 0x1680	; 0x801680 <__brkval+0x1>
    643a:	28 17       	cp	r18, r24
    643c:	39 07       	cpc	r19, r25
    643e:	69 f4       	brne	.+26     	; 0x645a <free+0x10c>
    6440:	30 97       	sbiw	r30, 0x00	; 0
    6442:	29 f4       	brne	.+10     	; 0x644e <free+0x100>
    6444:	10 92 82 16 	sts	0x1682, r1	; 0x801682 <__flp+0x1>
    6448:	10 92 81 16 	sts	0x1681, r1	; 0x801681 <__flp>
    644c:	02 c0       	rjmp	.+4      	; 0x6452 <free+0x104>
    644e:	13 82       	std	Z+3, r1	; 0x03
    6450:	12 82       	std	Z+2, r1	; 0x02
    6452:	b0 93 80 16 	sts	0x1680, r27	; 0x801680 <__brkval+0x1>
    6456:	a0 93 7f 16 	sts	0x167F, r26	; 0x80167f <__brkval>
    645a:	df 91       	pop	r29
    645c:	cf 91       	pop	r28
    645e:	08 95       	ret

00006460 <abort>:
    6460:	81 e0       	ldi	r24, 0x01	; 1
    6462:	90 e0       	ldi	r25, 0x00	; 0
    6464:	f8 94       	cli
    6466:	58 c2       	rjmp	.+1200   	; 0x6918 <_exit>

00006468 <__ftoa_engine>:
    6468:	28 30       	cpi	r18, 0x08	; 8
    646a:	08 f0       	brcs	.+2      	; 0x646e <__ftoa_engine+0x6>
    646c:	27 e0       	ldi	r18, 0x07	; 7
    646e:	33 27       	eor	r19, r19
    6470:	da 01       	movw	r26, r20
    6472:	99 0f       	add	r25, r25
    6474:	31 1d       	adc	r19, r1
    6476:	87 fd       	sbrc	r24, 7
    6478:	91 60       	ori	r25, 0x01	; 1
    647a:	00 96       	adiw	r24, 0x00	; 0
    647c:	61 05       	cpc	r22, r1
    647e:	71 05       	cpc	r23, r1
    6480:	39 f4       	brne	.+14     	; 0x6490 <__ftoa_engine+0x28>
    6482:	32 60       	ori	r19, 0x02	; 2
    6484:	2e 5f       	subi	r18, 0xFE	; 254
    6486:	3d 93       	st	X+, r19
    6488:	30 e3       	ldi	r19, 0x30	; 48
    648a:	2a 95       	dec	r18
    648c:	e1 f7       	brne	.-8      	; 0x6486 <__ftoa_engine+0x1e>
    648e:	08 95       	ret
    6490:	9f 3f       	cpi	r25, 0xFF	; 255
    6492:	30 f0       	brcs	.+12     	; 0x64a0 <__ftoa_engine+0x38>
    6494:	80 38       	cpi	r24, 0x80	; 128
    6496:	71 05       	cpc	r23, r1
    6498:	61 05       	cpc	r22, r1
    649a:	09 f0       	breq	.+2      	; 0x649e <__ftoa_engine+0x36>
    649c:	3c 5f       	subi	r19, 0xFC	; 252
    649e:	3c 5f       	subi	r19, 0xFC	; 252
    64a0:	3d 93       	st	X+, r19
    64a2:	91 30       	cpi	r25, 0x01	; 1
    64a4:	08 f0       	brcs	.+2      	; 0x64a8 <__ftoa_engine+0x40>
    64a6:	80 68       	ori	r24, 0x80	; 128
    64a8:	91 1d       	adc	r25, r1
    64aa:	df 93       	push	r29
    64ac:	cf 93       	push	r28
    64ae:	1f 93       	push	r17
    64b0:	0f 93       	push	r16
    64b2:	ff 92       	push	r15
    64b4:	ef 92       	push	r14
    64b6:	19 2f       	mov	r17, r25
    64b8:	98 7f       	andi	r25, 0xF8	; 248
    64ba:	96 95       	lsr	r25
    64bc:	e9 2f       	mov	r30, r25
    64be:	96 95       	lsr	r25
    64c0:	96 95       	lsr	r25
    64c2:	e9 0f       	add	r30, r25
    64c4:	ff 27       	eor	r31, r31
    64c6:	e4 50       	subi	r30, 0x04	; 4
    64c8:	fe 4f       	sbci	r31, 0xFE	; 254
    64ca:	99 27       	eor	r25, r25
    64cc:	33 27       	eor	r19, r19
    64ce:	ee 24       	eor	r14, r14
    64d0:	ff 24       	eor	r15, r15
    64d2:	a7 01       	movw	r20, r14
    64d4:	e7 01       	movw	r28, r14
    64d6:	05 90       	lpm	r0, Z+
    64d8:	08 94       	sec
    64da:	07 94       	ror	r0
    64dc:	28 f4       	brcc	.+10     	; 0x64e8 <__ftoa_engine+0x80>
    64de:	36 0f       	add	r19, r22
    64e0:	e7 1e       	adc	r14, r23
    64e2:	f8 1e       	adc	r15, r24
    64e4:	49 1f       	adc	r20, r25
    64e6:	51 1d       	adc	r21, r1
    64e8:	66 0f       	add	r22, r22
    64ea:	77 1f       	adc	r23, r23
    64ec:	88 1f       	adc	r24, r24
    64ee:	99 1f       	adc	r25, r25
    64f0:	06 94       	lsr	r0
    64f2:	a1 f7       	brne	.-24     	; 0x64dc <__ftoa_engine+0x74>
    64f4:	05 90       	lpm	r0, Z+
    64f6:	07 94       	ror	r0
    64f8:	28 f4       	brcc	.+10     	; 0x6504 <__ftoa_engine+0x9c>
    64fa:	e7 0e       	add	r14, r23
    64fc:	f8 1e       	adc	r15, r24
    64fe:	49 1f       	adc	r20, r25
    6500:	56 1f       	adc	r21, r22
    6502:	c1 1d       	adc	r28, r1
    6504:	77 0f       	add	r23, r23
    6506:	88 1f       	adc	r24, r24
    6508:	99 1f       	adc	r25, r25
    650a:	66 1f       	adc	r22, r22
    650c:	06 94       	lsr	r0
    650e:	a1 f7       	brne	.-24     	; 0x64f8 <__ftoa_engine+0x90>
    6510:	05 90       	lpm	r0, Z+
    6512:	07 94       	ror	r0
    6514:	28 f4       	brcc	.+10     	; 0x6520 <__ftoa_engine+0xb8>
    6516:	f8 0e       	add	r15, r24
    6518:	49 1f       	adc	r20, r25
    651a:	56 1f       	adc	r21, r22
    651c:	c7 1f       	adc	r28, r23
    651e:	d1 1d       	adc	r29, r1
    6520:	88 0f       	add	r24, r24
    6522:	99 1f       	adc	r25, r25
    6524:	66 1f       	adc	r22, r22
    6526:	77 1f       	adc	r23, r23
    6528:	06 94       	lsr	r0
    652a:	a1 f7       	brne	.-24     	; 0x6514 <__ftoa_engine+0xac>
    652c:	05 90       	lpm	r0, Z+
    652e:	07 94       	ror	r0
    6530:	20 f4       	brcc	.+8      	; 0x653a <__ftoa_engine+0xd2>
    6532:	49 0f       	add	r20, r25
    6534:	56 1f       	adc	r21, r22
    6536:	c7 1f       	adc	r28, r23
    6538:	d8 1f       	adc	r29, r24
    653a:	99 0f       	add	r25, r25
    653c:	66 1f       	adc	r22, r22
    653e:	77 1f       	adc	r23, r23
    6540:	88 1f       	adc	r24, r24
    6542:	06 94       	lsr	r0
    6544:	a9 f7       	brne	.-22     	; 0x6530 <__ftoa_engine+0xc8>
    6546:	84 91       	lpm	r24, Z
    6548:	10 95       	com	r17
    654a:	17 70       	andi	r17, 0x07	; 7
    654c:	41 f0       	breq	.+16     	; 0x655e <__ftoa_engine+0xf6>
    654e:	d6 95       	lsr	r29
    6550:	c7 95       	ror	r28
    6552:	57 95       	ror	r21
    6554:	47 95       	ror	r20
    6556:	f7 94       	ror	r15
    6558:	e7 94       	ror	r14
    655a:	1a 95       	dec	r17
    655c:	c1 f7       	brne	.-16     	; 0x654e <__ftoa_engine+0xe6>
    655e:	e2 ea       	ldi	r30, 0xA2	; 162
    6560:	f1 e0       	ldi	r31, 0x01	; 1
    6562:	68 94       	set
    6564:	15 90       	lpm	r1, Z+
    6566:	15 91       	lpm	r17, Z+
    6568:	35 91       	lpm	r19, Z+
    656a:	65 91       	lpm	r22, Z+
    656c:	95 91       	lpm	r25, Z+
    656e:	05 90       	lpm	r0, Z+
    6570:	7f e2       	ldi	r23, 0x2F	; 47
    6572:	73 95       	inc	r23
    6574:	e1 18       	sub	r14, r1
    6576:	f1 0a       	sbc	r15, r17
    6578:	43 0b       	sbc	r20, r19
    657a:	56 0b       	sbc	r21, r22
    657c:	c9 0b       	sbc	r28, r25
    657e:	d0 09       	sbc	r29, r0
    6580:	c0 f7       	brcc	.-16     	; 0x6572 <__ftoa_engine+0x10a>
    6582:	e1 0c       	add	r14, r1
    6584:	f1 1e       	adc	r15, r17
    6586:	43 1f       	adc	r20, r19
    6588:	56 1f       	adc	r21, r22
    658a:	c9 1f       	adc	r28, r25
    658c:	d0 1d       	adc	r29, r0
    658e:	7e f4       	brtc	.+30     	; 0x65ae <__ftoa_engine+0x146>
    6590:	70 33       	cpi	r23, 0x30	; 48
    6592:	11 f4       	brne	.+4      	; 0x6598 <__ftoa_engine+0x130>
    6594:	8a 95       	dec	r24
    6596:	e6 cf       	rjmp	.-52     	; 0x6564 <__ftoa_engine+0xfc>
    6598:	e8 94       	clt
    659a:	01 50       	subi	r16, 0x01	; 1
    659c:	30 f0       	brcs	.+12     	; 0x65aa <__ftoa_engine+0x142>
    659e:	08 0f       	add	r16, r24
    65a0:	0a f4       	brpl	.+2      	; 0x65a4 <__ftoa_engine+0x13c>
    65a2:	00 27       	eor	r16, r16
    65a4:	02 17       	cp	r16, r18
    65a6:	08 f4       	brcc	.+2      	; 0x65aa <__ftoa_engine+0x142>
    65a8:	20 2f       	mov	r18, r16
    65aa:	23 95       	inc	r18
    65ac:	02 2f       	mov	r16, r18
    65ae:	7a 33       	cpi	r23, 0x3A	; 58
    65b0:	28 f0       	brcs	.+10     	; 0x65bc <__ftoa_engine+0x154>
    65b2:	79 e3       	ldi	r23, 0x39	; 57
    65b4:	7d 93       	st	X+, r23
    65b6:	2a 95       	dec	r18
    65b8:	e9 f7       	brne	.-6      	; 0x65b4 <__ftoa_engine+0x14c>
    65ba:	10 c0       	rjmp	.+32     	; 0x65dc <__ftoa_engine+0x174>
    65bc:	7d 93       	st	X+, r23
    65be:	2a 95       	dec	r18
    65c0:	89 f6       	brne	.-94     	; 0x6564 <__ftoa_engine+0xfc>
    65c2:	06 94       	lsr	r0
    65c4:	97 95       	ror	r25
    65c6:	67 95       	ror	r22
    65c8:	37 95       	ror	r19
    65ca:	17 95       	ror	r17
    65cc:	17 94       	ror	r1
    65ce:	e1 18       	sub	r14, r1
    65d0:	f1 0a       	sbc	r15, r17
    65d2:	43 0b       	sbc	r20, r19
    65d4:	56 0b       	sbc	r21, r22
    65d6:	c9 0b       	sbc	r28, r25
    65d8:	d0 09       	sbc	r29, r0
    65da:	98 f0       	brcs	.+38     	; 0x6602 <__ftoa_engine+0x19a>
    65dc:	23 95       	inc	r18
    65de:	7e 91       	ld	r23, -X
    65e0:	73 95       	inc	r23
    65e2:	7a 33       	cpi	r23, 0x3A	; 58
    65e4:	08 f0       	brcs	.+2      	; 0x65e8 <__ftoa_engine+0x180>
    65e6:	70 e3       	ldi	r23, 0x30	; 48
    65e8:	7c 93       	st	X, r23
    65ea:	20 13       	cpse	r18, r16
    65ec:	b8 f7       	brcc	.-18     	; 0x65dc <__ftoa_engine+0x174>
    65ee:	7e 91       	ld	r23, -X
    65f0:	70 61       	ori	r23, 0x10	; 16
    65f2:	7d 93       	st	X+, r23
    65f4:	30 f0       	brcs	.+12     	; 0x6602 <__ftoa_engine+0x19a>
    65f6:	83 95       	inc	r24
    65f8:	71 e3       	ldi	r23, 0x31	; 49
    65fa:	7d 93       	st	X+, r23
    65fc:	70 e3       	ldi	r23, 0x30	; 48
    65fe:	2a 95       	dec	r18
    6600:	e1 f7       	brne	.-8      	; 0x65fa <__ftoa_engine+0x192>
    6602:	11 24       	eor	r1, r1
    6604:	ef 90       	pop	r14
    6606:	ff 90       	pop	r15
    6608:	0f 91       	pop	r16
    660a:	1f 91       	pop	r17
    660c:	cf 91       	pop	r28
    660e:	df 91       	pop	r29
    6610:	99 27       	eor	r25, r25
    6612:	87 fd       	sbrc	r24, 7
    6614:	90 95       	com	r25
    6616:	08 95       	ret

00006618 <strnlen_P>:
    6618:	fc 01       	movw	r30, r24
    661a:	05 90       	lpm	r0, Z+
    661c:	61 50       	subi	r22, 0x01	; 1
    661e:	70 40       	sbci	r23, 0x00	; 0
    6620:	01 10       	cpse	r0, r1
    6622:	d8 f7       	brcc	.-10     	; 0x661a <strnlen_P+0x2>
    6624:	80 95       	com	r24
    6626:	90 95       	com	r25
    6628:	8e 0f       	add	r24, r30
    662a:	9f 1f       	adc	r25, r31
    662c:	08 95       	ret

0000662e <memcpy>:
    662e:	fb 01       	movw	r30, r22
    6630:	dc 01       	movw	r26, r24
    6632:	02 c0       	rjmp	.+4      	; 0x6638 <memcpy+0xa>
    6634:	01 90       	ld	r0, Z+
    6636:	0d 92       	st	X+, r0
    6638:	41 50       	subi	r20, 0x01	; 1
    663a:	50 40       	sbci	r21, 0x00	; 0
    663c:	d8 f7       	brcc	.-10     	; 0x6634 <memcpy+0x6>
    663e:	08 95       	ret

00006640 <memset>:
    6640:	dc 01       	movw	r26, r24
    6642:	01 c0       	rjmp	.+2      	; 0x6646 <memset+0x6>
    6644:	6d 93       	st	X+, r22
    6646:	41 50       	subi	r20, 0x01	; 1
    6648:	50 40       	sbci	r21, 0x00	; 0
    664a:	e0 f7       	brcc	.-8      	; 0x6644 <memset+0x4>
    664c:	08 95       	ret

0000664e <strcasestr>:
    664e:	fb 01       	movw	r30, r22
    6650:	51 91       	ld	r21, Z+
    6652:	55 23       	and	r21, r21
    6654:	b1 f0       	breq	.+44     	; 0x6682 <strcasestr+0x34>
    6656:	bf 01       	movw	r22, r30
    6658:	dc 01       	movw	r26, r24
    665a:	05 2e       	mov	r0, r21
    665c:	4d 91       	ld	r20, X+
    665e:	44 23       	and	r20, r20
    6660:	69 f0       	breq	.+26     	; 0x667c <strcasestr+0x2e>
    6662:	10 d0       	rcall	.+32     	; 0x6684 <strcasestr+0x36>
    6664:	d9 f7       	brne	.-10     	; 0x665c <strcasestr+0xe>
    6666:	cd 01       	movw	r24, r26
    6668:	01 90       	ld	r0, Z+
    666a:	00 20       	and	r0, r0
    666c:	49 f0       	breq	.+18     	; 0x6680 <strcasestr+0x32>
    666e:	4d 91       	ld	r20, X+
    6670:	41 11       	cpse	r20, r1
    6672:	08 d0       	rcall	.+16     	; 0x6684 <strcasestr+0x36>
    6674:	c9 f3       	breq	.-14     	; 0x6668 <strcasestr+0x1a>
    6676:	fb 01       	movw	r30, r22
    6678:	41 11       	cpse	r20, r1
    667a:	ee cf       	rjmp	.-36     	; 0x6658 <strcasestr+0xa>
    667c:	81 e0       	ldi	r24, 0x01	; 1
    667e:	90 e0       	ldi	r25, 0x00	; 0
    6680:	01 97       	sbiw	r24, 0x01	; 1
    6682:	08 95       	ret
    6684:	40 25       	eor	r20, r0
    6686:	39 f0       	breq	.+14     	; 0x6696 <strcasestr+0x48>
    6688:	40 32       	cpi	r20, 0x20	; 32
    668a:	29 f4       	brne	.+10     	; 0x6696 <strcasestr+0x48>
    668c:	40 29       	or	r20, r0
    668e:	4b 57       	subi	r20, 0x7B	; 123
    6690:	46 5e       	subi	r20, 0xE6	; 230
    6692:	08 f0       	brcs	.+2      	; 0x6696 <strcasestr+0x48>
    6694:	18 94       	sez
    6696:	08 95       	ret

00006698 <strcat>:
    6698:	fb 01       	movw	r30, r22
    669a:	dc 01       	movw	r26, r24
    669c:	0d 90       	ld	r0, X+
    669e:	00 20       	and	r0, r0
    66a0:	e9 f7       	brne	.-6      	; 0x669c <strcat+0x4>
    66a2:	11 97       	sbiw	r26, 0x01	; 1
    66a4:	01 90       	ld	r0, Z+
    66a6:	0d 92       	st	X+, r0
    66a8:	00 20       	and	r0, r0
    66aa:	e1 f7       	brne	.-8      	; 0x66a4 <strcat+0xc>
    66ac:	08 95       	ret

000066ae <strcpy>:
    66ae:	fb 01       	movw	r30, r22
    66b0:	dc 01       	movw	r26, r24
    66b2:	01 90       	ld	r0, Z+
    66b4:	0d 92       	st	X+, r0
    66b6:	00 20       	and	r0, r0
    66b8:	e1 f7       	brne	.-8      	; 0x66b2 <strcpy+0x4>
    66ba:	08 95       	ret

000066bc <strncasecmp>:
    66bc:	fb 01       	movw	r30, r22
    66be:	dc 01       	movw	r26, r24
    66c0:	41 50       	subi	r20, 0x01	; 1
    66c2:	50 40       	sbci	r21, 0x00	; 0
    66c4:	88 f0       	brcs	.+34     	; 0x66e8 <strncasecmp+0x2c>
    66c6:	8d 91       	ld	r24, X+
    66c8:	81 34       	cpi	r24, 0x41	; 65
    66ca:	1c f0       	brlt	.+6      	; 0x66d2 <strncasecmp+0x16>
    66cc:	8b 35       	cpi	r24, 0x5B	; 91
    66ce:	0c f4       	brge	.+2      	; 0x66d2 <strncasecmp+0x16>
    66d0:	80 5e       	subi	r24, 0xE0	; 224
    66d2:	61 91       	ld	r22, Z+
    66d4:	61 34       	cpi	r22, 0x41	; 65
    66d6:	1c f0       	brlt	.+6      	; 0x66de <strncasecmp+0x22>
    66d8:	6b 35       	cpi	r22, 0x5B	; 91
    66da:	0c f4       	brge	.+2      	; 0x66de <strncasecmp+0x22>
    66dc:	60 5e       	subi	r22, 0xE0	; 224
    66de:	86 1b       	sub	r24, r22
    66e0:	61 11       	cpse	r22, r1
    66e2:	71 f3       	breq	.-36     	; 0x66c0 <strncasecmp+0x4>
    66e4:	99 0b       	sbc	r25, r25
    66e6:	08 95       	ret
    66e8:	88 1b       	sub	r24, r24
    66ea:	fc cf       	rjmp	.-8      	; 0x66e4 <strncasecmp+0x28>

000066ec <strnlen>:
    66ec:	fc 01       	movw	r30, r24
    66ee:	61 50       	subi	r22, 0x01	; 1
    66f0:	70 40       	sbci	r23, 0x00	; 0
    66f2:	01 90       	ld	r0, Z+
    66f4:	01 10       	cpse	r0, r1
    66f6:	d8 f7       	brcc	.-10     	; 0x66ee <strnlen+0x2>
    66f8:	80 95       	com	r24
    66fa:	90 95       	com	r25
    66fc:	8e 0f       	add	r24, r30
    66fe:	9f 1f       	adc	r25, r31
    6700:	08 95       	ret

00006702 <fputc>:
    6702:	0f 93       	push	r16
    6704:	1f 93       	push	r17
    6706:	cf 93       	push	r28
    6708:	df 93       	push	r29
    670a:	fb 01       	movw	r30, r22
    670c:	23 81       	ldd	r18, Z+3	; 0x03
    670e:	21 fd       	sbrc	r18, 1
    6710:	03 c0       	rjmp	.+6      	; 0x6718 <fputc+0x16>
    6712:	8f ef       	ldi	r24, 0xFF	; 255
    6714:	9f ef       	ldi	r25, 0xFF	; 255
    6716:	2c c0       	rjmp	.+88     	; 0x6770 <fputc+0x6e>
    6718:	22 ff       	sbrs	r18, 2
    671a:	16 c0       	rjmp	.+44     	; 0x6748 <fputc+0x46>
    671c:	46 81       	ldd	r20, Z+6	; 0x06
    671e:	57 81       	ldd	r21, Z+7	; 0x07
    6720:	24 81       	ldd	r18, Z+4	; 0x04
    6722:	35 81       	ldd	r19, Z+5	; 0x05
    6724:	42 17       	cp	r20, r18
    6726:	53 07       	cpc	r21, r19
    6728:	44 f4       	brge	.+16     	; 0x673a <fputc+0x38>
    672a:	a0 81       	ld	r26, Z
    672c:	b1 81       	ldd	r27, Z+1	; 0x01
    672e:	9d 01       	movw	r18, r26
    6730:	2f 5f       	subi	r18, 0xFF	; 255
    6732:	3f 4f       	sbci	r19, 0xFF	; 255
    6734:	31 83       	std	Z+1, r19	; 0x01
    6736:	20 83       	st	Z, r18
    6738:	8c 93       	st	X, r24
    673a:	26 81       	ldd	r18, Z+6	; 0x06
    673c:	37 81       	ldd	r19, Z+7	; 0x07
    673e:	2f 5f       	subi	r18, 0xFF	; 255
    6740:	3f 4f       	sbci	r19, 0xFF	; 255
    6742:	37 83       	std	Z+7, r19	; 0x07
    6744:	26 83       	std	Z+6, r18	; 0x06
    6746:	14 c0       	rjmp	.+40     	; 0x6770 <fputc+0x6e>
    6748:	8b 01       	movw	r16, r22
    674a:	ec 01       	movw	r28, r24
    674c:	fb 01       	movw	r30, r22
    674e:	00 84       	ldd	r0, Z+8	; 0x08
    6750:	f1 85       	ldd	r31, Z+9	; 0x09
    6752:	e0 2d       	mov	r30, r0
    6754:	19 95       	eicall
    6756:	89 2b       	or	r24, r25
    6758:	e1 f6       	brne	.-72     	; 0x6712 <fputc+0x10>
    675a:	d8 01       	movw	r26, r16
    675c:	16 96       	adiw	r26, 0x06	; 6
    675e:	8d 91       	ld	r24, X+
    6760:	9c 91       	ld	r25, X
    6762:	17 97       	sbiw	r26, 0x07	; 7
    6764:	01 96       	adiw	r24, 0x01	; 1
    6766:	17 96       	adiw	r26, 0x07	; 7
    6768:	9c 93       	st	X, r25
    676a:	8e 93       	st	-X, r24
    676c:	16 97       	sbiw	r26, 0x06	; 6
    676e:	ce 01       	movw	r24, r28
    6770:	df 91       	pop	r29
    6772:	cf 91       	pop	r28
    6774:	1f 91       	pop	r17
    6776:	0f 91       	pop	r16
    6778:	08 95       	ret

0000677a <printf>:
    677a:	cf 93       	push	r28
    677c:	df 93       	push	r29
    677e:	cd b7       	in	r28, 0x3d	; 61
    6780:	de b7       	in	r29, 0x3e	; 62
    6782:	ae 01       	movw	r20, r28
    6784:	4a 5f       	subi	r20, 0xFA	; 250
    6786:	5f 4f       	sbci	r21, 0xFF	; 255
    6788:	fa 01       	movw	r30, r20
    678a:	61 91       	ld	r22, Z+
    678c:	71 91       	ld	r23, Z+
    678e:	af 01       	movw	r20, r30
    6790:	80 91 85 16 	lds	r24, 0x1685	; 0x801685 <__iob+0x2>
    6794:	90 91 86 16 	lds	r25, 0x1686	; 0x801686 <__iob+0x3>
    6798:	3f d9       	rcall	.-3458   	; 0x5a18 <vfprintf>
    679a:	df 91       	pop	r29
    679c:	cf 91       	pop	r28
    679e:	08 95       	ret

000067a0 <puts>:
    67a0:	0f 93       	push	r16
    67a2:	1f 93       	push	r17
    67a4:	cf 93       	push	r28
    67a6:	df 93       	push	r29
    67a8:	e0 91 85 16 	lds	r30, 0x1685	; 0x801685 <__iob+0x2>
    67ac:	f0 91 86 16 	lds	r31, 0x1686	; 0x801686 <__iob+0x3>
    67b0:	23 81       	ldd	r18, Z+3	; 0x03
    67b2:	21 ff       	sbrs	r18, 1
    67b4:	1b c0       	rjmp	.+54     	; 0x67ec <puts+0x4c>
    67b6:	8c 01       	movw	r16, r24
    67b8:	d0 e0       	ldi	r29, 0x00	; 0
    67ba:	c0 e0       	ldi	r28, 0x00	; 0
    67bc:	f8 01       	movw	r30, r16
    67be:	81 91       	ld	r24, Z+
    67c0:	8f 01       	movw	r16, r30
    67c2:	60 91 85 16 	lds	r22, 0x1685	; 0x801685 <__iob+0x2>
    67c6:	70 91 86 16 	lds	r23, 0x1686	; 0x801686 <__iob+0x3>
    67ca:	db 01       	movw	r26, r22
    67cc:	18 96       	adiw	r26, 0x08	; 8
    67ce:	ed 91       	ld	r30, X+
    67d0:	fc 91       	ld	r31, X
    67d2:	19 97       	sbiw	r26, 0x09	; 9
    67d4:	88 23       	and	r24, r24
    67d6:	31 f0       	breq	.+12     	; 0x67e4 <puts+0x44>
    67d8:	19 95       	eicall
    67da:	89 2b       	or	r24, r25
    67dc:	79 f3       	breq	.-34     	; 0x67bc <puts+0x1c>
    67de:	df ef       	ldi	r29, 0xFF	; 255
    67e0:	cf ef       	ldi	r28, 0xFF	; 255
    67e2:	ec cf       	rjmp	.-40     	; 0x67bc <puts+0x1c>
    67e4:	8a e0       	ldi	r24, 0x0A	; 10
    67e6:	19 95       	eicall
    67e8:	89 2b       	or	r24, r25
    67ea:	19 f0       	breq	.+6      	; 0x67f2 <puts+0x52>
    67ec:	8f ef       	ldi	r24, 0xFF	; 255
    67ee:	9f ef       	ldi	r25, 0xFF	; 255
    67f0:	02 c0       	rjmp	.+4      	; 0x67f6 <puts+0x56>
    67f2:	8d 2f       	mov	r24, r29
    67f4:	9c 2f       	mov	r25, r28
    67f6:	df 91       	pop	r29
    67f8:	cf 91       	pop	r28
    67fa:	1f 91       	pop	r17
    67fc:	0f 91       	pop	r16
    67fe:	08 95       	ret

00006800 <sprintf>:
    6800:	0f 93       	push	r16
    6802:	1f 93       	push	r17
    6804:	cf 93       	push	r28
    6806:	df 93       	push	r29
    6808:	cd b7       	in	r28, 0x3d	; 61
    680a:	de b7       	in	r29, 0x3e	; 62
    680c:	2e 97       	sbiw	r28, 0x0e	; 14
    680e:	0f b6       	in	r0, 0x3f	; 63
    6810:	f8 94       	cli
    6812:	de bf       	out	0x3e, r29	; 62
    6814:	0f be       	out	0x3f, r0	; 63
    6816:	cd bf       	out	0x3d, r28	; 61
    6818:	0e 89       	ldd	r16, Y+22	; 0x16
    681a:	1f 89       	ldd	r17, Y+23	; 0x17
    681c:	86 e0       	ldi	r24, 0x06	; 6
    681e:	8c 83       	std	Y+4, r24	; 0x04
    6820:	1a 83       	std	Y+2, r17	; 0x02
    6822:	09 83       	std	Y+1, r16	; 0x01
    6824:	8f ef       	ldi	r24, 0xFF	; 255
    6826:	9f e7       	ldi	r25, 0x7F	; 127
    6828:	9e 83       	std	Y+6, r25	; 0x06
    682a:	8d 83       	std	Y+5, r24	; 0x05
    682c:	ae 01       	movw	r20, r28
    682e:	46 5e       	subi	r20, 0xE6	; 230
    6830:	5f 4f       	sbci	r21, 0xFF	; 255
    6832:	68 8d       	ldd	r22, Y+24	; 0x18
    6834:	79 8d       	ldd	r23, Y+25	; 0x19
    6836:	ce 01       	movw	r24, r28
    6838:	01 96       	adiw	r24, 0x01	; 1
    683a:	ee d8       	rcall	.-3620   	; 0x5a18 <vfprintf>
    683c:	ef 81       	ldd	r30, Y+7	; 0x07
    683e:	f8 85       	ldd	r31, Y+8	; 0x08
    6840:	e0 0f       	add	r30, r16
    6842:	f1 1f       	adc	r31, r17
    6844:	10 82       	st	Z, r1
    6846:	2e 96       	adiw	r28, 0x0e	; 14
    6848:	0f b6       	in	r0, 0x3f	; 63
    684a:	f8 94       	cli
    684c:	de bf       	out	0x3e, r29	; 62
    684e:	0f be       	out	0x3f, r0	; 63
    6850:	cd bf       	out	0x3d, r28	; 61
    6852:	df 91       	pop	r29
    6854:	cf 91       	pop	r28
    6856:	1f 91       	pop	r17
    6858:	0f 91       	pop	r16
    685a:	08 95       	ret

0000685c <__ultoa_invert>:
    685c:	fa 01       	movw	r30, r20
    685e:	aa 27       	eor	r26, r26
    6860:	28 30       	cpi	r18, 0x08	; 8
    6862:	51 f1       	breq	.+84     	; 0x68b8 <__ultoa_invert+0x5c>
    6864:	20 31       	cpi	r18, 0x10	; 16
    6866:	81 f1       	breq	.+96     	; 0x68c8 <__ultoa_invert+0x6c>
    6868:	e8 94       	clt
    686a:	6f 93       	push	r22
    686c:	6e 7f       	andi	r22, 0xFE	; 254
    686e:	6e 5f       	subi	r22, 0xFE	; 254
    6870:	7f 4f       	sbci	r23, 0xFF	; 255
    6872:	8f 4f       	sbci	r24, 0xFF	; 255
    6874:	9f 4f       	sbci	r25, 0xFF	; 255
    6876:	af 4f       	sbci	r26, 0xFF	; 255
    6878:	b1 e0       	ldi	r27, 0x01	; 1
    687a:	3e d0       	rcall	.+124    	; 0x68f8 <__ultoa_invert+0x9c>
    687c:	b4 e0       	ldi	r27, 0x04	; 4
    687e:	3c d0       	rcall	.+120    	; 0x68f8 <__ultoa_invert+0x9c>
    6880:	67 0f       	add	r22, r23
    6882:	78 1f       	adc	r23, r24
    6884:	89 1f       	adc	r24, r25
    6886:	9a 1f       	adc	r25, r26
    6888:	a1 1d       	adc	r26, r1
    688a:	68 0f       	add	r22, r24
    688c:	79 1f       	adc	r23, r25
    688e:	8a 1f       	adc	r24, r26
    6890:	91 1d       	adc	r25, r1
    6892:	a1 1d       	adc	r26, r1
    6894:	6a 0f       	add	r22, r26
    6896:	71 1d       	adc	r23, r1
    6898:	81 1d       	adc	r24, r1
    689a:	91 1d       	adc	r25, r1
    689c:	a1 1d       	adc	r26, r1
    689e:	20 d0       	rcall	.+64     	; 0x68e0 <__ultoa_invert+0x84>
    68a0:	09 f4       	brne	.+2      	; 0x68a4 <__ultoa_invert+0x48>
    68a2:	68 94       	set
    68a4:	3f 91       	pop	r19
    68a6:	2a e0       	ldi	r18, 0x0A	; 10
    68a8:	26 9f       	mul	r18, r22
    68aa:	11 24       	eor	r1, r1
    68ac:	30 19       	sub	r19, r0
    68ae:	30 5d       	subi	r19, 0xD0	; 208
    68b0:	31 93       	st	Z+, r19
    68b2:	de f6       	brtc	.-74     	; 0x686a <__ultoa_invert+0xe>
    68b4:	cf 01       	movw	r24, r30
    68b6:	08 95       	ret
    68b8:	46 2f       	mov	r20, r22
    68ba:	47 70       	andi	r20, 0x07	; 7
    68bc:	40 5d       	subi	r20, 0xD0	; 208
    68be:	41 93       	st	Z+, r20
    68c0:	b3 e0       	ldi	r27, 0x03	; 3
    68c2:	0f d0       	rcall	.+30     	; 0x68e2 <__ultoa_invert+0x86>
    68c4:	c9 f7       	brne	.-14     	; 0x68b8 <__ultoa_invert+0x5c>
    68c6:	f6 cf       	rjmp	.-20     	; 0x68b4 <__ultoa_invert+0x58>
    68c8:	46 2f       	mov	r20, r22
    68ca:	4f 70       	andi	r20, 0x0F	; 15
    68cc:	40 5d       	subi	r20, 0xD0	; 208
    68ce:	4a 33       	cpi	r20, 0x3A	; 58
    68d0:	18 f0       	brcs	.+6      	; 0x68d8 <__ultoa_invert+0x7c>
    68d2:	49 5d       	subi	r20, 0xD9	; 217
    68d4:	31 fd       	sbrc	r19, 1
    68d6:	40 52       	subi	r20, 0x20	; 32
    68d8:	41 93       	st	Z+, r20
    68da:	02 d0       	rcall	.+4      	; 0x68e0 <__ultoa_invert+0x84>
    68dc:	a9 f7       	brne	.-22     	; 0x68c8 <__ultoa_invert+0x6c>
    68de:	ea cf       	rjmp	.-44     	; 0x68b4 <__ultoa_invert+0x58>
    68e0:	b4 e0       	ldi	r27, 0x04	; 4
    68e2:	a6 95       	lsr	r26
    68e4:	97 95       	ror	r25
    68e6:	87 95       	ror	r24
    68e8:	77 95       	ror	r23
    68ea:	67 95       	ror	r22
    68ec:	ba 95       	dec	r27
    68ee:	c9 f7       	brne	.-14     	; 0x68e2 <__ultoa_invert+0x86>
    68f0:	00 97       	sbiw	r24, 0x00	; 0
    68f2:	61 05       	cpc	r22, r1
    68f4:	71 05       	cpc	r23, r1
    68f6:	08 95       	ret
    68f8:	9b 01       	movw	r18, r22
    68fa:	ac 01       	movw	r20, r24
    68fc:	0a 2e       	mov	r0, r26
    68fe:	06 94       	lsr	r0
    6900:	57 95       	ror	r21
    6902:	47 95       	ror	r20
    6904:	37 95       	ror	r19
    6906:	27 95       	ror	r18
    6908:	ba 95       	dec	r27
    690a:	c9 f7       	brne	.-14     	; 0x68fe <__ultoa_invert+0xa2>
    690c:	62 0f       	add	r22, r18
    690e:	73 1f       	adc	r23, r19
    6910:	84 1f       	adc	r24, r20
    6912:	95 1f       	adc	r25, r21
    6914:	a0 1d       	adc	r26, r0
    6916:	08 95       	ret

00006918 <_exit>:
    6918:	f8 94       	cli

0000691a <__stop_program>:
    691a:	ff cf       	rjmp	.-2      	; 0x691a <__stop_program>

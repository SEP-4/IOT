
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005ee  00800200  000062e6  0000637a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000062e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c92  008007ee  008007ee  00006968  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006968  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000069c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b28  00000000  00000000  00006a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d961  00000000  00000000  0000752c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000037bb  00000000  00000000  00014e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006a94  00000000  00000000  00018648  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002814  00000000  00000000  0001f0dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000439f  00000000  00000000  000218f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c5b4  00000000  00000000  00025c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a68  00000000  00000000  00032243  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	66 c6       	rjmp	.+3276   	; 0xcfe <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 73 24 	jmp	0x48e6	; 0x48e6 <__vector_25>
      68:	0c 94 c5 24 	jmp	0x498a	; 0x498a <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 09 25 	jmp	0x4a12	; 0x4a12 <__vector_36>
      94:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 a7 29 	jmp	0x534e	; 0x534e <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 9f 25 	jmp	0x4b3e	; 0x4b3e <__vector_51>
      d0:	0c 94 f1 25 	jmp	0x4be2	; 0x4be2 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 35 26 	jmp	0x4c6a	; 0x4c6a <__vector_54>
      dc:	0c 94 87 26 	jmp	0x4d0e	; 0x4d0e <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	72 1a       	sub	r7, r18
      e6:	72 1a       	sub	r7, r18
      e8:	72 1a       	sub	r7, r18
      ea:	a9 1a       	sub	r10, r25
      ec:	b1 1a       	sub	r11, r17
      ee:	c6 1a       	sub	r12, r22
      f0:	72 1a       	sub	r7, r18
      f2:	72 1a       	sub	r7, r18
      f4:	a9 1a       	sub	r10, r25
      f6:	b1 1a       	sub	r11, r17
      f8:	c9 29       	or	r28, r9
      fa:	39 2a       	or	r3, r25
      fc:	39 2a       	or	r3, r25
      fe:	39 2a       	or	r3, r25
     100:	39 2a       	or	r3, r25
     102:	39 2a       	or	r3, r25
     104:	39 2a       	or	r3, r25
     106:	39 2a       	or	r3, r25
     108:	c9 29       	or	r28, r9
     10a:	39 2a       	or	r3, r25
     10c:	39 2a       	or	r3, r25
     10e:	39 2a       	or	r3, r25
     110:	39 2a       	or	r3, r25
     112:	39 2a       	or	r3, r25
     114:	39 2a       	or	r3, r25
     116:	39 2a       	or	r3, r25
     118:	cb 29       	or	r28, r11
     11a:	39 2a       	or	r3, r25
     11c:	39 2a       	or	r3, r25
     11e:	39 2a       	or	r3, r25
     120:	39 2a       	or	r3, r25
     122:	39 2a       	or	r3, r25
     124:	39 2a       	or	r3, r25
     126:	39 2a       	or	r3, r25
     128:	39 2a       	or	r3, r25
     12a:	39 2a       	or	r3, r25
     12c:	39 2a       	or	r3, r25
     12e:	39 2a       	or	r3, r25
     130:	39 2a       	or	r3, r25
     132:	39 2a       	or	r3, r25
     134:	39 2a       	or	r3, r25
     136:	39 2a       	or	r3, r25
     138:	cb 29       	or	r28, r11
     13a:	39 2a       	or	r3, r25
     13c:	39 2a       	or	r3, r25
     13e:	39 2a       	or	r3, r25
     140:	39 2a       	or	r3, r25
     142:	39 2a       	or	r3, r25
     144:	39 2a       	or	r3, r25
     146:	39 2a       	or	r3, r25
     148:	39 2a       	or	r3, r25
     14a:	39 2a       	or	r3, r25
     14c:	39 2a       	or	r3, r25
     14e:	39 2a       	or	r3, r25
     150:	39 2a       	or	r3, r25
     152:	39 2a       	or	r3, r25
     154:	39 2a       	or	r3, r25
     156:	39 2a       	or	r3, r25
     158:	35 2a       	or	r3, r21
     15a:	39 2a       	or	r3, r25
     15c:	39 2a       	or	r3, r25
     15e:	39 2a       	or	r3, r25
     160:	39 2a       	or	r3, r25
     162:	39 2a       	or	r3, r25
     164:	39 2a       	or	r3, r25
     166:	39 2a       	or	r3, r25
     168:	00 2a       	or	r0, r16
     16a:	39 2a       	or	r3, r25
     16c:	39 2a       	or	r3, r25
     16e:	39 2a       	or	r3, r25
     170:	39 2a       	or	r3, r25
     172:	39 2a       	or	r3, r25
     174:	39 2a       	or	r3, r25
     176:	39 2a       	or	r3, r25
     178:	39 2a       	or	r3, r25
     17a:	39 2a       	or	r3, r25
     17c:	39 2a       	or	r3, r25
     17e:	39 2a       	or	r3, r25
     180:	39 2a       	or	r3, r25
     182:	39 2a       	or	r3, r25
     184:	39 2a       	or	r3, r25
     186:	39 2a       	or	r3, r25
     188:	f4 29       	or	r31, r4
     18a:	39 2a       	or	r3, r25
     18c:	39 2a       	or	r3, r25
     18e:	39 2a       	or	r3, r25
     190:	39 2a       	or	r3, r25
     192:	39 2a       	or	r3, r25
     194:	39 2a       	or	r3, r25
     196:	39 2a       	or	r3, r25
     198:	18 2a       	or	r1, r24

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <prvCheckTasksWaitingTermination>
     19e:	80 91 15 12 	lds	r24, 0x1215	; 0x801215 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	e5 d4       	rcall	.+2506   	; 0xb72 <vPortYield>
     1a8:	0e 94 ef 1a 	call	0x35de	; 0x35de <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 ef 17 	call	0x2fde	; 0x2fde <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 3b 1a 	call	0x3476	; 0x3476 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	17 e0       	ldi	r17, 0x07	; 7
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e6 ee       	ldi	r30, 0xE6	; 230
     1e4:	f2 e6       	ldi	r31, 0x62	; 98
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	ae 3e       	cpi	r26, 0xEE	; 238
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	24 e1       	ldi	r18, 0x14	; 20
     1f8:	ae ee       	ldi	r26, 0xEE	; 238
     1fa:	b7 e0       	ldi	r27, 0x07	; 7
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a0 38       	cpi	r26, 0x80	; 128
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <main>
     20a:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <Application_getEventGroup>:
// Declare a variable to hold the created event group.
EventGroupHandle_t xCreatedEventGroup;

EventGroupHandle_t Application_getEventGroup(){
	return xCreatedEventGroup;
}
     210:	80 91 70 14 	lds	r24, 0x1470	; 0x801470 <xCreatedEventGroup>
     214:	90 91 71 14 	lds	r25, 0x1471	; 0x801471 <xCreatedEventGroup+0x1>
     218:	08 95       	ret

0000021a <Application_aFunctionToClearBits>:
void Application_aFunctionToClearBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Clear bit 0 and bit 4 in xEventGroup. */
  uxBits = xEventGroupClearBits(
     21a:	41 e1       	ldi	r20, 0x11	; 17
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	d5 c1       	rjmp	.+938    	; 0x5ce <xEventGroupClearBits>
     224:	08 95       	ret

00000226 <Application_aFunctionToWaitBits>:
EventGroupHandle_t Application_getEventGroup(){
	return xCreatedEventGroup;
}

void Application_aFunctionToWaitBits( EventGroupHandle_t xEventGroup )
{
     226:	cf 92       	push	r12
     228:	df 92       	push	r13
     22a:	ef 92       	push	r14
     22c:	ff 92       	push	r15
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	ec 01       	movw	r28, r24
EventBits_t uxBits;
const TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;

  /* Wait a maximum of 100ms for either bit 0 or bit 4 to be set within
  the event group.  Clear the bits before exiting. */
  uxBits = xEventGroupWaitBits(
     238:	0f 2e       	mov	r0, r31
     23a:	f6 e0       	ldi	r31, 0x06	; 6
     23c:	cf 2e       	mov	r12, r31
     23e:	d1 2c       	mov	r13, r1
     240:	e1 2c       	mov	r14, r1
     242:	f1 2c       	mov	r15, r1
     244:	f0 2d       	mov	r31, r0
     246:	01 e0       	ldi	r16, 0x01	; 1
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	41 e1       	ldi	r20, 0x11	; 17
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	60 e0       	ldi	r22, 0x00	; 0
     250:	70 e0       	ldi	r23, 0x00	; 0
     252:	1d d1       	rcall	.+570    	; 0x48e <xEventGroupWaitBits>
            BIT_0 | BIT_4, /* The bits within the event group to wait for. */
            pdFALSE,        /* BIT_0 & BIT_4 should not be cleared before returning. */
            pdTRUE,       /* Wait for both bits, either bit will do. */
            xTicksToWait );/* Wait a maximum of 100ms for either bit to be set. */

  if( ( uxBits & ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )
     254:	dc 01       	movw	r26, r24
     256:	cb 01       	movw	r24, r22
     258:	81 71       	andi	r24, 0x11	; 17
     25a:	99 27       	eor	r25, r25
     25c:	aa 27       	eor	r26, r26
     25e:	bb 27       	eor	r27, r27
     260:	41 97       	sbiw	r24, 0x11	; 17
     262:	a1 05       	cpc	r26, r1
     264:	b1 05       	cpc	r27, r1
     266:	81 f5       	brne	.+96     	; 0x2c8 <Application_aFunctionToWaitBits+0xa2>
  {
      /* xEventGroupWaitBits() returned because both bits were set. */
	  printf("setting the bits, they are set");
     268:	8f e6       	ldi	r24, 0x6F	; 111
     26a:	92 e0       	ldi	r25, 0x02	; 2
     26c:	9f 93       	push	r25
     26e:	8f 93       	push	r24
     270:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
	  printf("Hum: %u\nTemp: %u\nCO2: %u",hih820_getHumidityInUint16(),hih820_getTemperatureInUint16(),CO2Sensor_getCO2InUint16());
     274:	84 d0       	rcall	.+264    	; 0x37e <CO2Sensor_getCO2InUint16>
     276:	f8 2e       	mov	r15, r24
     278:	e9 2e       	mov	r14, r25
     27a:	0e 94 c4 1c 	call	0x3988	; 0x3988 <hih820_getTemperatureInUint16>
     27e:	18 2f       	mov	r17, r24
     280:	09 2f       	mov	r16, r25
     282:	0e 94 b5 1c 	call	0x396a	; 0x396a <hih820_getHumidityInUint16>
     286:	ef 92       	push	r14
     288:	ff 92       	push	r15
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	9f 93       	push	r25
     290:	8f 93       	push	r24
     292:	8e e8       	ldi	r24, 0x8E	; 142
     294:	92 e0       	ldi	r25, 0x02	; 2
     296:	9f 93       	push	r25
     298:	8f 93       	push	r24
     29a:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
	  SensorDataPackageHandler_SetHumidity(hih820_getHumidityInUint16());
     29e:	0e 94 b5 1c 	call	0x396a	; 0x396a <hih820_getHumidityInUint16>
     2a2:	0e 94 18 1b 	call	0x3630	; 0x3630 <SensorDataPackageHandler_SetHumidity>
	  SensorDataPackageHandler_SetTemperature(hih820_getTemperatureInUint16());
     2a6:	0e 94 c4 1c 	call	0x3988	; 0x3988 <hih820_getTemperatureInUint16>
     2aa:	0e 94 1d 1b 	call	0x363a	; 0x363a <SensorDataPackageHandler_SetTemperature>
	  SensorDataPackageHandler_SetCO2(CO2Sensor_getCO2InUint16());
     2ae:	67 d0       	rcall	.+206    	; 0x37e <CO2Sensor_getCO2InUint16>
     2b0:	0e 94 13 1b 	call	0x3626	; 0x3626 <SensorDataPackageHandler_SetCO2>
	  Application_aFunctionToClearBits( xEventGroup );
     2b4:	ce 01       	movw	r24, r28
     2b6:	b1 df       	rcall	.-158    	; 0x21a <Application_aFunctionToClearBits>
     2b8:	8d b7       	in	r24, 0x3d	; 61
     2ba:	9e b7       	in	r25, 0x3e	; 62
     2bc:	0a 96       	adiw	r24, 0x0a	; 10
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	f8 94       	cli
     2c2:	9e bf       	out	0x3e, r25	; 62
     2c4:	0f be       	out	0x3f, r0	; 63
     2c6:	8d bf       	out	0x3d, r24	; 61
  else
  {
      /* xEventGroupWaitBits() returned because xTicksToWait ticks passed
      without either BIT_0 or BIT_4 becoming set. */
  }
}
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	1f 91       	pop	r17
     2ce:	0f 91       	pop	r16
     2d0:	ff 90       	pop	r15
     2d2:	ef 90       	pop	r14
     2d4:	df 90       	pop	r13
     2d6:	cf 90       	pop	r12
     2d8:	08 95       	ret

000002da <Application_handler_task>:
	,  Application_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void Application_handler_task(void *pvParameters)
{
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	00 d0       	rcall	.+0      	; 0x2e0 <Application_handler_task+0x6>
     2e0:	1f 92       	push	r1
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
	printf("startApplication");
     2e6:	87 ea       	ldi	r24, 0xA7	; 167
     2e8:	92 e0       	ldi	r25, 0x02	; 2
     2ea:	9f 93       	push	r25
     2ec:	8f 93       	push	r24
     2ee:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
	(void)pvParameters;
	xCreatedEventGroup = xEventGroupCreate();
     2f2:	ba d0       	rcall	.+372    	; 0x468 <xEventGroupCreate>
     2f4:	90 93 71 14 	sts	0x1471, r25	; 0x801471 <xCreatedEventGroup+0x1>
     2f8:	80 93 70 14 	sts	0x1470, r24	; 0x801470 <xCreatedEventGroup>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300UL); // Upload message every 1 minutes (300 ms)
	xLastWakeTime = xTaskGetTickCount();
     2fc:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <xTaskGetTickCount>
     300:	69 83       	std	Y+1, r22	; 0x01
     302:	7a 83       	std	Y+2, r23	; 0x02
     304:	8b 83       	std	Y+3, r24	; 0x03
	SemaphoreHandle_t semaphore_mutex = get_mutex();
     306:	9c 83       	std	Y+4, r25	; 0x04
     308:	89 d0       	rcall	.+274    	; 0x41c <get_mutex>
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     30e:	42 e1       	ldi	r20, 0x12	; 18
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	60 e0       	ldi	r22, 0x00	; 0
     314:	70 e0       	ldi	r23, 0x00	; 0
     316:	ce 01       	movw	r24, r28
     318:	01 96       	adiw	r24, 0x01	; 1
     31a:	0e 94 1b 11 	call	0x2236	; 0x2236 <xTaskDelayUntil>
		// Was the event group created successfully?
		if( xCreatedEventGroup == NULL )
     31e:	80 91 70 14 	lds	r24, 0x1470	; 0x801470 <xCreatedEventGroup>
     322:	90 91 71 14 	lds	r25, 0x1471	; 0x801471 <xCreatedEventGroup+0x1>
     326:	00 97       	sbiw	r24, 0x00	; 0
		// The event group was not created because there was insufficient
		// FreeRTOS heap available.
		}
		else
		{
			Application_aFunctionToWaitBits( xCreatedEventGroup);
     328:	91 f3       	breq	.-28     	; 0x30e <Application_handler_task+0x34>
     32a:	7d df       	rcall	.-262    	; 0x226 <Application_aFunctionToWaitBits>
     32c:	f0 cf       	rjmp	.-32     	; 0x30e <Application_handler_task+0x34>

0000032e <Application_handler_initialise>:

static char _out_buf[100];

void Application_handler_task( void *pvParameters );

void Application_handler_initialise(UBaseType_t Application_task_priority){
     32e:	ef 92       	push	r14
     330:	ff 92       	push	r15
     332:	0f 93       	push	r16
	xTaskCreate(
     334:	e1 2c       	mov	r14, r1
     336:	f1 2c       	mov	r15, r1
     338:	08 2f       	mov	r16, r24
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	40 ec       	ldi	r20, 0xC0	; 192
     340:	50 e0       	ldi	r21, 0x00	; 0
     342:	68 eb       	ldi	r22, 0xB8	; 184
     344:	72 e0       	ldi	r23, 0x02	; 2
     346:	8d e6       	ldi	r24, 0x6D	; 109
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <xTaskCreate>
	,  "ApplicationHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  Application_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	08 95       	ret

00000356 <CO2Sensor_handler_initialise>:
mh_z19_returnCode_t getCO2return;


void CO2Sensor_handler_task( void *pvParameters );

void CO2Sensor_handler_initialise(UBaseType_t CO2_task_priority){
     356:	ef 92       	push	r14
     358:	ff 92       	push	r15
     35a:	0f 93       	push	r16
	
	xTaskCreate(
     35c:	e1 2c       	mov	r14, r1
     35e:	f1 2c       	mov	r15, r1
     360:	08 2f       	mov	r16, r24
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	40 ec       	ldi	r20, 0xC0	; 192
     368:	50 e0       	ldi	r21, 0x00	; 0
     36a:	68 ec       	ldi	r22, 0xC8	; 200
     36c:	72 e0       	ldi	r23, 0x02	; 2
     36e:	8a ec       	ldi	r24, 0xCA	; 202
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <xTaskCreate>
	,  "CO2Hand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  CO2_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     376:	0f 91       	pop	r16
     378:	ff 90       	pop	r15
     37a:	ef 90       	pop	r14
     37c:	08 95       	ret

0000037e <CO2Sensor_getCO2InUint16>:
}


uint16_t CO2Sensor_getCO2InUint16(){
	return CO2ppm;
}
     37e:	80 91 74 14 	lds	r24, 0x1474	; 0x801474 <CO2ppm>
     382:	90 91 75 14 	lds	r25, 0x1475	; 0x801475 <CO2ppm+0x1>
     386:	08 95       	ret

00000388 <CO2Sensor_aFunctionToSetBits>:
void CO2Sensor_aFunctionToSetBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Set bit 0  in xEventGroup. */
  uxBits = xEventGroupSetBits(
     388:	41 e0       	ldi	r20, 0x01	; 1
     38a:	50 e0       	ldi	r21, 0x00	; 0
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	3b c1       	rjmp	.+630    	; 0x608 <xEventGroupSetBits>
     392:	08 95       	ret

00000394 <CO2Sensor_handler_task>:
	,  CO2_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void CO2Sensor_handler_task(void *pvParameters)
{
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	00 d0       	rcall	.+0      	; 0x39a <CO2Sensor_handler_task+0x6>
     39a:	1f 92       	push	r1
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
	printf("startCO2");
     3a0:	80 ed       	ldi	r24, 0xD0	; 208
     3a2:	92 e0       	ldi	r25, 0x02	; 2
     3a4:	9f 93       	push	r25
     3a6:	8f 93       	push	r24
     3a8:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
	(void)pvParameters;
	mh_z19_injectCallBack(NULL);
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <mh_z19_injectCallBack>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     3b4:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <xTaskGetTickCount>
     3b8:	69 83       	std	Y+1, r22	; 0x01
     3ba:	7a 83       	std	Y+2, r23	; 0x02
     3bc:	8b 83       	std	Y+3, r24	; 0x03
     3be:	9c 83       	std	Y+4, r25	; 0x04
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     3c4:	48 ea       	ldi	r20, 0xA8	; 168
     3c6:	58 e4       	ldi	r21, 0x48	; 72
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	ce 01       	movw	r24, r28
     3ce:	01 96       	adiw	r24, 0x01	; 1
     3d0:	0e 94 1b 11 	call	0x2236	; 0x2236 <xTaskDelayUntil>
		rc = mh_z19_takeMeassuring();
     3d4:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <mh_z19_takeMeassuring>
     3d8:	80 93 72 14 	sts	0x1472, r24	; 0x801472 <rc>
		if (rc == MHZ19_OK)
     3dc:	81 11       	cpse	r24, r1
     3de:	f2 cf       	rjmp	.-28     	; 0x3c4 <CO2Sensor_handler_task+0x30>
		{
			vTaskDelay(50);
     3e0:	62 e3       	ldi	r22, 0x32	; 50
     3e2:	70 e0       	ldi	r23, 0x00	; 0
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	0e 94 80 11 	call	0x2300	; 0x2300 <vTaskDelay>
			if(getCO2return == MHZ19_OK){
     3ec:	80 91 73 14 	lds	r24, 0x1473	; 0x801473 <getCO2return>
     3f0:	81 11       	cpse	r24, r1
     3f2:	09 c0       	rjmp	.+18     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
				getCO2return = mh_z19_getCo2Ppm(&CO2ppm);
     3f4:	84 e7       	ldi	r24, 0x74	; 116
     3f6:	94 e1       	ldi	r25, 0x14	; 20
     3f8:	0e 94 20 23 	call	0x4640	; 0x4640 <mh_z19_getCo2Ppm>
     3fc:	80 93 73 14 	sts	0x1473, r24	; 0x801473 <getCO2return>
				CO2Sensor_aFunctionToSetBits(Application_getEventGroup());
     400:	07 df       	rcall	.-498    	; 0x210 <Application_getEventGroup>
     402:	c2 df       	rcall	.-124    	; 0x388 <CO2Sensor_aFunctionToSetBits>
     404:	df cf       	rjmp	.-66     	; 0x3c4 <CO2Sensor_handler_task+0x30>
			}
			else if(getCO2return == MHZ19_NO_MEASSURING_AVAILABLE){
     406:	81 30       	cpi	r24, 0x01	; 1
     408:	e9 f6       	brne	.-70     	; 0x3c4 <CO2Sensor_handler_task+0x30>
				printf("Didn't get the measurements");
     40a:	89 ed       	ldi	r24, 0xD9	; 217
     40c:	92 e0       	ldi	r25, 0x02	; 2
     40e:	9f 93       	push	r25
     410:	8f 93       	push	r24
     412:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	d4 cf       	rjmp	.-88     	; 0x3c4 <CO2Sensor_handler_task+0x30>

0000041c <get_mutex>:
	windows_settings = value;
}

SemaphoreHandle_t get_mutex(){
	return _configurationSemaphore ;
}
     41c:	80 91 ee 07 	lds	r24, 0x07EE	; 0x8007ee <__data_end>
     420:	90 91 ef 07 	lds	r25, 0x07EF	; 0x8007ef <__data_end+0x1>
     424:	08 95       	ret

00000426 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     426:	0f 93       	push	r16
     428:	01 11       	cpse	r16, r1
     42a:	0c c0       	rjmp	.+24     	; 0x444 <prvTestWaitCondition+0x1e>
     42c:	dc 01       	movw	r26, r24
     42e:	cb 01       	movw	r24, r22
     430:	82 23       	and	r24, r18
     432:	93 23       	and	r25, r19
     434:	a4 23       	and	r26, r20
     436:	b5 23       	and	r27, r21
     438:	89 2b       	or	r24, r25
     43a:	8a 2b       	or	r24, r26
     43c:	8b 2b       	or	r24, r27
     43e:	79 f4       	brne	.+30     	; 0x45e <prvTestWaitCondition+0x38>
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	10 c0       	rjmp	.+32     	; 0x464 <prvTestWaitCondition+0x3e>
     444:	dc 01       	movw	r26, r24
     446:	cb 01       	movw	r24, r22
     448:	82 23       	and	r24, r18
     44a:	93 23       	and	r25, r19
     44c:	a4 23       	and	r26, r20
     44e:	b5 23       	and	r27, r21
     450:	28 17       	cp	r18, r24
     452:	39 07       	cpc	r19, r25
     454:	4a 07       	cpc	r20, r26
     456:	5b 07       	cpc	r21, r27
     458:	21 f0       	breq	.+8      	; 0x462 <prvTestWaitCondition+0x3c>
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	03 c0       	rjmp	.+6      	; 0x464 <prvTestWaitCondition+0x3e>
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	01 c0       	rjmp	.+2      	; 0x464 <prvTestWaitCondition+0x3e>
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	0f 91       	pop	r16
     466:	08 95       	ret

00000468 <xEventGroupCreate>:
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	8f e0       	ldi	r24, 0x0F	; 15
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	cc d1       	rcall	.+920    	; 0x80a <pvPortMalloc>
     472:	ec 01       	movw	r28, r24
     474:	00 97       	sbiw	r24, 0x00	; 0
     476:	39 f0       	breq	.+14     	; 0x486 <xEventGroupCreate+0x1e>
     478:	fc 01       	movw	r30, r24
     47a:	11 92       	st	Z+, r1
     47c:	11 92       	st	Z+, r1
     47e:	11 92       	st	Z+, r1
     480:	11 92       	st	Z+, r1
     482:	cf 01       	movw	r24, r30
     484:	a8 d2       	rcall	.+1360   	; 0x9d6 <vListInitialise>
     486:	ce 01       	movw	r24, r28
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	08 95       	ret

0000048e <xEventGroupWaitBits>:
     48e:	2f 92       	push	r2
     490:	3f 92       	push	r3
     492:	4f 92       	push	r4
     494:	5f 92       	push	r5
     496:	6f 92       	push	r6
     498:	7f 92       	push	r7
     49a:	8f 92       	push	r8
     49c:	9f 92       	push	r9
     49e:	af 92       	push	r10
     4a0:	bf 92       	push	r11
     4a2:	cf 92       	push	r12
     4a4:	df 92       	push	r13
     4a6:	ef 92       	push	r14
     4a8:	ff 92       	push	r15
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	ec 01       	movw	r28, r24
     4b4:	4a 01       	movw	r8, r20
     4b6:	5b 01       	movw	r10, r22
     4b8:	62 2e       	mov	r6, r18
     4ba:	70 2e       	mov	r7, r16
     4bc:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <vTaskSuspendAll>
     4c0:	28 80       	ld	r2, Y
     4c2:	39 80       	ldd	r3, Y+1	; 0x01
     4c4:	4a 80       	ldd	r4, Y+2	; 0x02
     4c6:	5b 80       	ldd	r5, Y+3	; 0x03
     4c8:	a5 01       	movw	r20, r10
     4ca:	94 01       	movw	r18, r8
     4cc:	c2 01       	movw	r24, r4
     4ce:	b1 01       	movw	r22, r2
     4d0:	aa df       	rcall	.-172    	; 0x426 <prvTestWaitCondition>
     4d2:	88 23       	and	r24, r24
     4d4:	a1 f0       	breq	.+40     	; 0x4fe <xEventGroupWaitBits+0x70>
     4d6:	66 20       	and	r6, r6
     4d8:	89 f1       	breq	.+98     	; 0x53c <xEventGroupWaitBits+0xae>
     4da:	d5 01       	movw	r26, r10
     4dc:	c4 01       	movw	r24, r8
     4de:	80 95       	com	r24
     4e0:	90 95       	com	r25
     4e2:	a0 95       	com	r26
     4e4:	b0 95       	com	r27
     4e6:	82 21       	and	r24, r2
     4e8:	93 21       	and	r25, r3
     4ea:	a4 21       	and	r26, r4
     4ec:	b5 21       	and	r27, r5
     4ee:	88 83       	st	Y, r24
     4f0:	99 83       	std	Y+1, r25	; 0x01
     4f2:	aa 83       	std	Y+2, r26	; 0x02
     4f4:	bb 83       	std	Y+3, r27	; 0x03
     4f6:	c1 2c       	mov	r12, r1
     4f8:	d1 2c       	mov	r13, r1
     4fa:	76 01       	movw	r14, r12
     4fc:	22 c0       	rjmp	.+68     	; 0x542 <xEventGroupWaitBits+0xb4>
     4fe:	c1 14       	cp	r12, r1
     500:	d1 04       	cpc	r13, r1
     502:	e1 04       	cpc	r14, r1
     504:	f1 04       	cpc	r15, r1
     506:	e9 f0       	breq	.+58     	; 0x542 <xEventGroupWaitBits+0xb4>
     508:	61 10       	cpse	r6, r1
     50a:	04 c0       	rjmp	.+8      	; 0x514 <xEventGroupWaitBits+0x86>
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	50 e0       	ldi	r21, 0x00	; 0
     510:	ba 01       	movw	r22, r20
     512:	04 c0       	rjmp	.+8      	; 0x51c <xEventGroupWaitBits+0x8e>
     514:	40 e0       	ldi	r20, 0x00	; 0
     516:	50 e0       	ldi	r21, 0x00	; 0
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	71 e0       	ldi	r23, 0x01	; 1
     51c:	71 10       	cpse	r7, r1
     51e:	74 60       	ori	r23, 0x04	; 4
     520:	48 29       	or	r20, r8
     522:	59 29       	or	r21, r9
     524:	6a 29       	or	r22, r10
     526:	7b 29       	or	r23, r11
     528:	97 01       	movw	r18, r14
     52a:	86 01       	movw	r16, r12
     52c:	ce 01       	movw	r24, r28
     52e:	04 96       	adiw	r24, 0x04	; 4
     530:	0e 94 17 12 	call	0x242e	; 0x242e <vTaskPlaceOnUnorderedEventList>
     534:	21 2c       	mov	r2, r1
     536:	31 2c       	mov	r3, r1
     538:	21 01       	movw	r4, r2
     53a:	03 c0       	rjmp	.+6      	; 0x542 <xEventGroupWaitBits+0xb4>
     53c:	c1 2c       	mov	r12, r1
     53e:	d1 2c       	mov	r13, r1
     540:	76 01       	movw	r14, r12
     542:	0e 94 3f 10 	call	0x207e	; 0x207e <xTaskResumeAll>
     546:	cd 28       	or	r12, r13
     548:	ce 28       	or	r12, r14
     54a:	cf 28       	or	r12, r15
     54c:	59 f1       	breq	.+86     	; 0x5a4 <xEventGroupWaitBits+0x116>
     54e:	81 11       	cpse	r24, r1
     550:	01 c0       	rjmp	.+2      	; 0x554 <xEventGroupWaitBits+0xc6>
     552:	0f d3       	rcall	.+1566   	; 0xb72 <vPortYield>
     554:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <uxTaskResetEventItemValue>
     558:	6b 01       	movw	r12, r22
     55a:	7c 01       	movw	r14, r24
     55c:	91 fd       	sbrc	r25, 1
     55e:	1f c0       	rjmp	.+62     	; 0x59e <xEventGroupWaitBits+0x110>
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	f8 94       	cli
     564:	0f 92       	push	r0
     566:	c8 80       	ld	r12, Y
     568:	d9 80       	ldd	r13, Y+1	; 0x01
     56a:	ea 80       	ldd	r14, Y+2	; 0x02
     56c:	fb 80       	ldd	r15, Y+3	; 0x03
     56e:	07 2d       	mov	r16, r7
     570:	a5 01       	movw	r20, r10
     572:	94 01       	movw	r18, r8
     574:	c7 01       	movw	r24, r14
     576:	b6 01       	movw	r22, r12
     578:	56 df       	rcall	.-340    	; 0x426 <prvTestWaitCondition>
     57a:	88 23       	and	r24, r24
     57c:	71 f0       	breq	.+28     	; 0x59a <xEventGroupWaitBits+0x10c>
     57e:	66 20       	and	r6, r6
     580:	61 f0       	breq	.+24     	; 0x59a <xEventGroupWaitBits+0x10c>
     582:	80 94       	com	r8
     584:	90 94       	com	r9
     586:	a0 94       	com	r10
     588:	b0 94       	com	r11
     58a:	8c 20       	and	r8, r12
     58c:	9d 20       	and	r9, r13
     58e:	ae 20       	and	r10, r14
     590:	bf 20       	and	r11, r15
     592:	88 82       	st	Y, r8
     594:	99 82       	std	Y+1, r9	; 0x01
     596:	aa 82       	std	Y+2, r10	; 0x02
     598:	bb 82       	std	Y+3, r11	; 0x03
     59a:	0f 90       	pop	r0
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	16 01       	movw	r2, r12
     5a0:	27 01       	movw	r4, r14
     5a2:	55 24       	eor	r5, r5
     5a4:	c2 01       	movw	r24, r4
     5a6:	b1 01       	movw	r22, r2
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	ff 90       	pop	r15
     5b2:	ef 90       	pop	r14
     5b4:	df 90       	pop	r13
     5b6:	cf 90       	pop	r12
     5b8:	bf 90       	pop	r11
     5ba:	af 90       	pop	r10
     5bc:	9f 90       	pop	r9
     5be:	8f 90       	pop	r8
     5c0:	7f 90       	pop	r7
     5c2:	6f 90       	pop	r6
     5c4:	5f 90       	pop	r5
     5c6:	4f 90       	pop	r4
     5c8:	3f 90       	pop	r3
     5ca:	2f 90       	pop	r2
     5cc:	08 95       	ret

000005ce <xEventGroupClearBits>:
     5ce:	0f 93       	push	r16
     5d0:	1f 93       	push	r17
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	0f 92       	push	r0
     5d8:	fc 01       	movw	r30, r24
     5da:	00 81       	ld	r16, Z
     5dc:	11 81       	ldd	r17, Z+1	; 0x01
     5de:	22 81       	ldd	r18, Z+2	; 0x02
     5e0:	33 81       	ldd	r19, Z+3	; 0x03
     5e2:	40 95       	com	r20
     5e4:	50 95       	com	r21
     5e6:	60 95       	com	r22
     5e8:	70 95       	com	r23
     5ea:	40 23       	and	r20, r16
     5ec:	51 23       	and	r21, r17
     5ee:	62 23       	and	r22, r18
     5f0:	73 23       	and	r23, r19
     5f2:	40 83       	st	Z, r20
     5f4:	51 83       	std	Z+1, r21	; 0x01
     5f6:	62 83       	std	Z+2, r22	; 0x02
     5f8:	73 83       	std	Z+3, r23	; 0x03
     5fa:	0f 90       	pop	r0
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	c9 01       	movw	r24, r18
     600:	b8 01       	movw	r22, r16
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	08 95       	ret

00000608 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     608:	4f 92       	push	r4
     60a:	5f 92       	push	r5
     60c:	6f 92       	push	r6
     60e:	7f 92       	push	r7
     610:	af 92       	push	r10
     612:	bf 92       	push	r11
     614:	cf 92       	push	r12
     616:	df 92       	push	r13
     618:	ef 92       	push	r14
     61a:	ff 92       	push	r15
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	ec 01       	movw	r28, r24
     626:	6a 01       	movw	r12, r20
     628:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     62a:	8c 01       	movw	r16, r24
     62c:	09 5f       	subi	r16, 0xF9	; 249
     62e:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     630:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     634:	eb 85       	ldd	r30, Y+11	; 0x0b
     636:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     638:	88 81       	ld	r24, Y
     63a:	99 81       	ldd	r25, Y+1	; 0x01
     63c:	aa 81       	ldd	r26, Y+2	; 0x02
     63e:	bb 81       	ldd	r27, Y+3	; 0x03
     640:	c8 2a       	or	r12, r24
     642:	d9 2a       	or	r13, r25
     644:	ea 2a       	or	r14, r26
     646:	fb 2a       	or	r15, r27
     648:	c8 82       	st	Y, r12
     64a:	d9 82       	std	Y+1, r13	; 0x01
     64c:	ea 82       	std	Y+2, r14	; 0x02
     64e:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     650:	c1 2c       	mov	r12, r1
     652:	d1 2c       	mov	r13, r1
     654:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     656:	3d c0       	rjmp	.+122    	; 0x6d2 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     658:	a4 80       	ldd	r10, Z+4	; 0x04
     65a:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     65c:	80 81       	ld	r24, Z
     65e:	91 81       	ldd	r25, Z+1	; 0x01
     660:	a2 81       	ldd	r26, Z+2	; 0x02
     662:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     664:	ac 01       	movw	r20, r24
     666:	bd 01       	movw	r22, r26
     668:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     66a:	b2 fd       	sbrc	r27, 2
     66c:	0e c0       	rjmp	.+28     	; 0x68a <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     66e:	48 80       	ld	r4, Y
     670:	59 80       	ldd	r5, Y+1	; 0x01
     672:	6a 80       	ldd	r6, Y+2	; 0x02
     674:	7b 80       	ldd	r7, Y+3	; 0x03
     676:	44 22       	and	r4, r20
     678:	55 22       	and	r5, r21
     67a:	66 22       	and	r6, r22
     67c:	77 22       	and	r7, r23
     67e:	45 28       	or	r4, r5
     680:	46 28       	or	r4, r6
     682:	47 28       	or	r4, r7
     684:	89 f4       	brne	.+34     	; 0x6a8 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	12 c0       	rjmp	.+36     	; 0x6ae <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     68a:	48 80       	ld	r4, Y
     68c:	59 80       	ldd	r5, Y+1	; 0x01
     68e:	6a 80       	ldd	r6, Y+2	; 0x02
     690:	7b 80       	ldd	r7, Y+3	; 0x03
     692:	44 22       	and	r4, r20
     694:	55 22       	and	r5, r21
     696:	66 22       	and	r6, r22
     698:	77 22       	and	r7, r23
     69a:	44 15       	cp	r20, r4
     69c:	55 05       	cpc	r21, r5
     69e:	66 05       	cpc	r22, r6
     6a0:	77 05       	cpc	r23, r7
     6a2:	21 f0       	breq	.+8      	; 0x6ac <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	03 c0       	rjmp	.+6      	; 0x6ae <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     6a8:	21 e0       	ldi	r18, 0x01	; 1
     6aa:	01 c0       	rjmp	.+2      	; 0x6ae <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     6ac:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     6ae:	22 23       	and	r18, r18
     6b0:	71 f0       	breq	.+28     	; 0x6ce <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     6b2:	b0 ff       	sbrs	r27, 0
     6b4:	04 c0       	rjmp	.+8      	; 0x6be <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     6b6:	c4 2a       	or	r12, r20
     6b8:	d5 2a       	or	r13, r21
     6ba:	e6 2a       	or	r14, r22
     6bc:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     6be:	48 81       	ld	r20, Y
     6c0:	59 81       	ldd	r21, Y+1	; 0x01
     6c2:	6a 81       	ldd	r22, Y+2	; 0x02
     6c4:	7b 81       	ldd	r23, Y+3	; 0x03
     6c6:	72 60       	ori	r23, 0x02	; 2
     6c8:	cf 01       	movw	r24, r30
     6ca:	0e 94 52 13 	call	0x26a4	; 0x26a4 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     6ce:	ea 2d       	mov	r30, r10
     6d0:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     6d2:	e0 17       	cp	r30, r16
     6d4:	f1 07       	cpc	r31, r17
     6d6:	09 f0       	breq	.+2      	; 0x6da <xEventGroupSetBits+0xd2>
     6d8:	bf cf       	rjmp	.-130    	; 0x658 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     6da:	c0 94       	com	r12
     6dc:	d0 94       	com	r13
     6de:	e0 94       	com	r14
     6e0:	f0 94       	com	r15
     6e2:	88 81       	ld	r24, Y
     6e4:	99 81       	ldd	r25, Y+1	; 0x01
     6e6:	aa 81       	ldd	r26, Y+2	; 0x02
     6e8:	bb 81       	ldd	r27, Y+3	; 0x03
     6ea:	c8 22       	and	r12, r24
     6ec:	d9 22       	and	r13, r25
     6ee:	ea 22       	and	r14, r26
     6f0:	fb 22       	and	r15, r27
     6f2:	c8 82       	st	Y, r12
     6f4:	d9 82       	std	Y+1, r13	; 0x01
     6f6:	ea 82       	std	Y+2, r14	; 0x02
     6f8:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     6fa:	0e 94 3f 10 	call	0x207e	; 0x207e <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     6fe:	68 81       	ld	r22, Y
     700:	79 81       	ldd	r23, Y+1	; 0x01
     702:	8a 81       	ldd	r24, Y+2	; 0x02
     704:	9b 81       	ldd	r25, Y+3	; 0x03
}
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	df 90       	pop	r13
     714:	cf 90       	pop	r12
     716:	bf 90       	pop	r11
     718:	af 90       	pop	r10
     71a:	7f 90       	pop	r7
     71c:	6f 90       	pop	r6
     71e:	5f 90       	pop	r5
     720:	4f 90       	pop	r4
     722:	08 95       	ret

00000724 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     724:	ec ef       	ldi	r30, 0xFC	; 252
     726:	f7 e0       	ldi	r31, 0x07	; 7
     728:	a0 e0       	ldi	r26, 0x00	; 0
     72a:	b8 e0       	ldi	r27, 0x08	; 8
     72c:	b1 83       	std	Z+1, r27	; 0x01
     72e:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     730:	13 82       	std	Z+3, r1	; 0x03
     732:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     734:	e0 ec       	ldi	r30, 0xC0	; 192
     736:	f1 e1       	ldi	r31, 0x11	; 17
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     738:	f0 93 fb 07 	sts	0x07FB, r31	; 0x8007fb <pxEnd+0x1>
     73c:	e0 93 fa 07 	sts	0x07FA, r30	; 0x8007fa <pxEnd>
    pxEnd->xBlockSize = 0;
     740:	13 82       	std	Z+3, r1	; 0x03
     742:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     744:	11 82       	std	Z+1, r1	; 0x01
     746:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     748:	80 ec       	ldi	r24, 0xC0	; 192
     74a:	99 e0       	ldi	r25, 0x09	; 9
     74c:	13 96       	adiw	r26, 0x03	; 3
     74e:	9c 93       	st	X, r25
     750:	8e 93       	st	-X, r24
     752:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     754:	ed 93       	st	X+, r30
     756:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     758:	90 93 f7 07 	sts	0x07F7, r25	; 0x8007f7 <xMinimumEverFreeBytesRemaining+0x1>
     75c:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     760:	90 93 f9 07 	sts	0x07F9, r25	; 0x8007f9 <xFreeBytesRemaining+0x1>
     764:	80 93 f8 07 	sts	0x07F8, r24	; 0x8007f8 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	90 e8       	ldi	r25, 0x80	; 128
     76c:	90 93 f1 07 	sts	0x07F1, r25	; 0x8007f1 <xBlockAllocatedBit+0x1>
     770:	80 93 f0 07 	sts	0x07F0, r24	; 0x8007f0 <xBlockAllocatedBit>
     774:	08 95       	ret

00000776 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     77c:	ac ef       	ldi	r26, 0xFC	; 252
     77e:	b7 e0       	ldi	r27, 0x07	; 7
     780:	01 c0       	rjmp	.+2      	; 0x784 <prvInsertBlockIntoFreeList+0xe>
     782:	df 01       	movw	r26, r30
     784:	ed 91       	ld	r30, X+
     786:	fc 91       	ld	r31, X
     788:	11 97       	sbiw	r26, 0x01	; 1
     78a:	ec 17       	cp	r30, r28
     78c:	fd 07       	cpc	r31, r29
     78e:	c8 f3       	brcs	.-14     	; 0x782 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     790:	12 96       	adiw	r26, 0x02	; 2
     792:	8d 91       	ld	r24, X+
     794:	9c 91       	ld	r25, X
     796:	13 97       	sbiw	r26, 0x03	; 3
     798:	9d 01       	movw	r18, r26
     79a:	28 0f       	add	r18, r24
     79c:	39 1f       	adc	r19, r25
     79e:	c2 17       	cp	r28, r18
     7a0:	d3 07       	cpc	r29, r19
     7a2:	49 f4       	brne	.+18     	; 0x7b6 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     7a4:	2a 81       	ldd	r18, Y+2	; 0x02
     7a6:	3b 81       	ldd	r19, Y+3	; 0x03
     7a8:	82 0f       	add	r24, r18
     7aa:	93 1f       	adc	r25, r19
     7ac:	13 96       	adiw	r26, 0x03	; 3
     7ae:	9c 93       	st	X, r25
     7b0:	8e 93       	st	-X, r24
     7b2:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     7b4:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     7b6:	8a 81       	ldd	r24, Y+2	; 0x02
     7b8:	9b 81       	ldd	r25, Y+3	; 0x03
     7ba:	9e 01       	movw	r18, r28
     7bc:	28 0f       	add	r18, r24
     7be:	39 1f       	adc	r19, r25
     7c0:	e2 17       	cp	r30, r18
     7c2:	f3 07       	cpc	r31, r19
     7c4:	c1 f4       	brne	.+48     	; 0x7f6 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     7c6:	20 91 fa 07 	lds	r18, 0x07FA	; 0x8007fa <pxEnd>
     7ca:	30 91 fb 07 	lds	r19, 0x07FB	; 0x8007fb <pxEnd+0x1>
     7ce:	e2 17       	cp	r30, r18
     7d0:	f3 07       	cpc	r31, r19
     7d2:	71 f0       	breq	.+28     	; 0x7f0 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     7d4:	22 81       	ldd	r18, Z+2	; 0x02
     7d6:	33 81       	ldd	r19, Z+3	; 0x03
     7d8:	82 0f       	add	r24, r18
     7da:	93 1f       	adc	r25, r19
     7dc:	9b 83       	std	Y+3, r25	; 0x03
     7de:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     7e0:	ed 91       	ld	r30, X+
     7e2:	fc 91       	ld	r31, X
     7e4:	11 97       	sbiw	r26, 0x01	; 1
     7e6:	80 81       	ld	r24, Z
     7e8:	91 81       	ldd	r25, Z+1	; 0x01
     7ea:	99 83       	std	Y+1, r25	; 0x01
     7ec:	88 83       	st	Y, r24
     7ee:	05 c0       	rjmp	.+10     	; 0x7fa <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     7f0:	39 83       	std	Y+1, r19	; 0x01
     7f2:	28 83       	st	Y, r18
     7f4:	02 c0       	rjmp	.+4      	; 0x7fa <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     7f6:	f9 83       	std	Y+1, r31	; 0x01
     7f8:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     7fa:	ca 17       	cp	r28, r26
     7fc:	db 07       	cpc	r29, r27
     7fe:	11 f0       	breq	.+4      	; 0x804 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     800:	cd 93       	st	X+, r28
     802:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	08 95       	ret

0000080a <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     80a:	ef 92       	push	r14
     80c:	ff 92       	push	r15
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     818:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     81c:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <pxEnd>
     820:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <pxEnd+0x1>
     824:	89 2b       	or	r24, r25
     826:	09 f4       	brne	.+2      	; 0x82a <pvPortMalloc+0x20>
        {
            prvHeapInit();
     828:	7d df       	rcall	.-262    	; 0x724 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     82a:	80 91 f0 07 	lds	r24, 0x07F0	; 0x8007f0 <xBlockAllocatedBit>
     82e:	90 91 f1 07 	lds	r25, 0x07F1	; 0x8007f1 <xBlockAllocatedBit+0x1>
     832:	80 23       	and	r24, r16
     834:	91 23       	and	r25, r17
     836:	89 2b       	or	r24, r25
     838:	09 f0       	breq	.+2      	; 0x83c <pvPortMalloc+0x32>
     83a:	76 c0       	rjmp	.+236    	; 0x928 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     83c:	01 15       	cp	r16, r1
     83e:	11 05       	cpc	r17, r1
     840:	49 f0       	breq	.+18     	; 0x854 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     842:	c8 01       	movw	r24, r16
     844:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     846:	08 17       	cp	r16, r24
     848:	19 07       	cpc	r17, r25
     84a:	18 f0       	brcs	.+6      	; 0x852 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     84c:	00 e0       	ldi	r16, 0x00	; 0
     84e:	10 e0       	ldi	r17, 0x00	; 0
     850:	01 c0       	rjmp	.+2      	; 0x854 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     852:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     854:	01 15       	cp	r16, r1
     856:	11 05       	cpc	r17, r1
     858:	09 f4       	brne	.+2      	; 0x85c <pvPortMalloc+0x52>
     85a:	69 c0       	rjmp	.+210    	; 0x92e <pvPortMalloc+0x124>
     85c:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <xFreeBytesRemaining>
     860:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <xFreeBytesRemaining+0x1>
     864:	80 17       	cp	r24, r16
     866:	91 07       	cpc	r25, r17
     868:	08 f4       	brcc	.+2      	; 0x86c <pvPortMalloc+0x62>
     86a:	64 c0       	rjmp	.+200    	; 0x934 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     86c:	c0 91 fc 07 	lds	r28, 0x07FC	; 0x8007fc <xStart>
     870:	d0 91 fd 07 	lds	r29, 0x07FD	; 0x8007fd <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     874:	ec ef       	ldi	r30, 0xFC	; 252
     876:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     878:	02 c0       	rjmp	.+4      	; 0x87e <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     87a:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     87c:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     87e:	8a 81       	ldd	r24, Y+2	; 0x02
     880:	9b 81       	ldd	r25, Y+3	; 0x03
     882:	80 17       	cp	r24, r16
     884:	91 07       	cpc	r25, r17
     886:	20 f4       	brcc	.+8      	; 0x890 <pvPortMalloc+0x86>
     888:	88 81       	ld	r24, Y
     88a:	99 81       	ldd	r25, Y+1	; 0x01
     88c:	00 97       	sbiw	r24, 0x00	; 0
     88e:	a9 f7       	brne	.-22     	; 0x87a <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     890:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <pxEnd>
     894:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <pxEnd+0x1>
     898:	c8 17       	cp	r28, r24
     89a:	d9 07       	cpc	r29, r25
     89c:	09 f4       	brne	.+2      	; 0x8a0 <pvPortMalloc+0x96>
     89e:	4d c0       	rjmp	.+154    	; 0x93a <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     8a0:	e0 80       	ld	r14, Z
     8a2:	f1 80       	ldd	r15, Z+1	; 0x01
     8a4:	84 e0       	ldi	r24, 0x04	; 4
     8a6:	e8 0e       	add	r14, r24
     8a8:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     8aa:	88 81       	ld	r24, Y
     8ac:	99 81       	ldd	r25, Y+1	; 0x01
     8ae:	91 83       	std	Z+1, r25	; 0x01
     8b0:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     8b2:	2a 81       	ldd	r18, Y+2	; 0x02
     8b4:	3b 81       	ldd	r19, Y+3	; 0x03
     8b6:	20 1b       	sub	r18, r16
     8b8:	31 0b       	sbc	r19, r17
     8ba:	29 30       	cpi	r18, 0x09	; 9
     8bc:	31 05       	cpc	r19, r1
     8be:	48 f0       	brcs	.+18     	; 0x8d2 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     8c0:	ce 01       	movw	r24, r28
     8c2:	80 0f       	add	r24, r16
     8c4:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     8c6:	fc 01       	movw	r30, r24
     8c8:	33 83       	std	Z+3, r19	; 0x03
     8ca:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     8cc:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     8ce:	0a 83       	std	Y+2, r16	; 0x02
     8d0:	52 df       	rcall	.-348    	; 0x776 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     8d2:	2a 81       	ldd	r18, Y+2	; 0x02
     8d4:	3b 81       	ldd	r19, Y+3	; 0x03
     8d6:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <xFreeBytesRemaining>
     8da:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <xFreeBytesRemaining+0x1>
     8de:	82 1b       	sub	r24, r18
     8e0:	93 0b       	sbc	r25, r19
     8e2:	90 93 f9 07 	sts	0x07F9, r25	; 0x8007f9 <xFreeBytesRemaining+0x1>
     8e6:	80 93 f8 07 	sts	0x07F8, r24	; 0x8007f8 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     8ea:	40 91 f6 07 	lds	r20, 0x07F6	; 0x8007f6 <xMinimumEverFreeBytesRemaining>
     8ee:	50 91 f7 07 	lds	r21, 0x07F7	; 0x8007f7 <xMinimumEverFreeBytesRemaining+0x1>
     8f2:	84 17       	cp	r24, r20
     8f4:	95 07       	cpc	r25, r21
     8f6:	20 f4       	brcc	.+8      	; 0x900 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     8f8:	90 93 f7 07 	sts	0x07F7, r25	; 0x8007f7 <xMinimumEverFreeBytesRemaining+0x1>
     8fc:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     900:	80 91 f0 07 	lds	r24, 0x07F0	; 0x8007f0 <xBlockAllocatedBit>
     904:	90 91 f1 07 	lds	r25, 0x07F1	; 0x8007f1 <xBlockAllocatedBit+0x1>
     908:	28 2b       	or	r18, r24
     90a:	39 2b       	or	r19, r25
     90c:	3b 83       	std	Y+3, r19	; 0x03
     90e:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     910:	19 82       	std	Y+1, r1	; 0x01
     912:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     914:	80 91 f4 07 	lds	r24, 0x07F4	; 0x8007f4 <xNumberOfSuccessfulAllocations>
     918:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <xNumberOfSuccessfulAllocations+0x1>
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	90 93 f5 07 	sts	0x07F5, r25	; 0x8007f5 <xNumberOfSuccessfulAllocations+0x1>
     922:	80 93 f4 07 	sts	0x07F4, r24	; 0x8007f4 <xNumberOfSuccessfulAllocations>
     926:	0b c0       	rjmp	.+22     	; 0x93e <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     928:	e1 2c       	mov	r14, r1
     92a:	f1 2c       	mov	r15, r1
     92c:	08 c0       	rjmp	.+16     	; 0x93e <pvPortMalloc+0x134>
     92e:	e1 2c       	mov	r14, r1
     930:	f1 2c       	mov	r15, r1
     932:	05 c0       	rjmp	.+10     	; 0x93e <pvPortMalloc+0x134>
     934:	e1 2c       	mov	r14, r1
     936:	f1 2c       	mov	r15, r1
     938:	02 c0       	rjmp	.+4      	; 0x93e <pvPortMalloc+0x134>
     93a:	e1 2c       	mov	r14, r1
     93c:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     93e:	0e 94 3f 10 	call	0x207e	; 0x207e <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     942:	e1 14       	cp	r14, r1
     944:	f1 04       	cpc	r15, r1
     946:	11 f4       	brne	.+4      	; 0x94c <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     948:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     94c:	c7 01       	movw	r24, r14
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	1f 91       	pop	r17
     954:	0f 91       	pop	r16
     956:	ff 90       	pop	r15
     958:	ef 90       	pop	r14
     95a:	08 95       	ret

0000095c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     95c:	0f 93       	push	r16
     95e:	1f 93       	push	r17
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     964:	00 97       	sbiw	r24, 0x00	; 0
     966:	91 f1       	breq	.+100    	; 0x9cc <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     968:	ec 01       	movw	r28, r24
     96a:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     96c:	4a 81       	ldd	r20, Y+2	; 0x02
     96e:	5b 81       	ldd	r21, Y+3	; 0x03
     970:	20 91 f0 07 	lds	r18, 0x07F0	; 0x8007f0 <xBlockAllocatedBit>
     974:	30 91 f1 07 	lds	r19, 0x07F1	; 0x8007f1 <xBlockAllocatedBit+0x1>
     978:	ba 01       	movw	r22, r20
     97a:	62 23       	and	r22, r18
     97c:	73 23       	and	r23, r19
     97e:	67 2b       	or	r22, r23
     980:	29 f1       	breq	.+74     	; 0x9cc <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     982:	68 81       	ld	r22, Y
     984:	79 81       	ldd	r23, Y+1	; 0x01
     986:	67 2b       	or	r22, r23
     988:	09 f5       	brne	.+66     	; 0x9cc <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     98a:	20 95       	com	r18
     98c:	30 95       	com	r19
     98e:	24 23       	and	r18, r20
     990:	35 23       	and	r19, r21
     992:	3b 83       	std	Y+3, r19	; 0x03
     994:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     996:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     99a:	8a 81       	ldd	r24, Y+2	; 0x02
     99c:	9b 81       	ldd	r25, Y+3	; 0x03
     99e:	20 91 f8 07 	lds	r18, 0x07F8	; 0x8007f8 <xFreeBytesRemaining>
     9a2:	30 91 f9 07 	lds	r19, 0x07F9	; 0x8007f9 <xFreeBytesRemaining+0x1>
     9a6:	82 0f       	add	r24, r18
     9a8:	93 1f       	adc	r25, r19
     9aa:	90 93 f9 07 	sts	0x07F9, r25	; 0x8007f9 <xFreeBytesRemaining+0x1>
     9ae:	80 93 f8 07 	sts	0x07F8, r24	; 0x8007f8 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     9b2:	ce 01       	movw	r24, r28
     9b4:	e0 de       	rcall	.-576    	; 0x776 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     9b6:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <xNumberOfSuccessfulFrees>
     9ba:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <xNumberOfSuccessfulFrees+0x1>
     9be:	01 96       	adiw	r24, 0x01	; 1
     9c0:	90 93 f3 07 	sts	0x07F3, r25	; 0x8007f3 <xNumberOfSuccessfulFrees+0x1>
     9c4:	80 93 f2 07 	sts	0x07F2, r24	; 0x8007f2 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     9c8:	0e 94 3f 10 	call	0x207e	; 0x207e <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	08 95       	ret

000009d6 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     9d6:	fc 01       	movw	r30, r24
     9d8:	03 96       	adiw	r24, 0x03	; 3
     9da:	92 83       	std	Z+2, r25	; 0x02
     9dc:	81 83       	std	Z+1, r24	; 0x01
     9de:	4f ef       	ldi	r20, 0xFF	; 255
     9e0:	5f ef       	ldi	r21, 0xFF	; 255
     9e2:	ba 01       	movw	r22, r20
     9e4:	43 83       	std	Z+3, r20	; 0x03
     9e6:	54 83       	std	Z+4, r21	; 0x04
     9e8:	65 83       	std	Z+5, r22	; 0x05
     9ea:	76 83       	std	Z+6, r23	; 0x06
     9ec:	90 87       	std	Z+8, r25	; 0x08
     9ee:	87 83       	std	Z+7, r24	; 0x07
     9f0:	92 87       	std	Z+10, r25	; 0x0a
     9f2:	81 87       	std	Z+9, r24	; 0x09
     9f4:	10 82       	st	Z, r1
     9f6:	08 95       	ret

000009f8 <vListInitialiseItem>:
     9f8:	fc 01       	movw	r30, r24
     9fa:	13 86       	std	Z+11, r1	; 0x0b
     9fc:	12 86       	std	Z+10, r1	; 0x0a
     9fe:	08 95       	ret

00000a00 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     a00:	0f 93       	push	r16
     a02:	1f 93       	push	r17
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     a0a:	08 81       	ld	r16, Y
     a0c:	19 81       	ldd	r17, Y+1	; 0x01
     a0e:	2a 81       	ldd	r18, Y+2	; 0x02
     a10:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     a12:	0f 3f       	cpi	r16, 0xFF	; 255
     a14:	4f ef       	ldi	r20, 0xFF	; 255
     a16:	14 07       	cpc	r17, r20
     a18:	24 07       	cpc	r18, r20
     a1a:	34 07       	cpc	r19, r20
     a1c:	21 f4       	brne	.+8      	; 0xa26 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     a1e:	fc 01       	movw	r30, r24
     a20:	a1 85       	ldd	r26, Z+9	; 0x09
     a22:	b2 85       	ldd	r27, Z+10	; 0x0a
     a24:	11 c0       	rjmp	.+34     	; 0xa48 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     a26:	dc 01       	movw	r26, r24
     a28:	13 96       	adiw	r26, 0x03	; 3
     a2a:	01 c0       	rjmp	.+2      	; 0xa2e <vListInsert+0x2e>
     a2c:	df 01       	movw	r26, r30
     a2e:	14 96       	adiw	r26, 0x04	; 4
     a30:	ed 91       	ld	r30, X+
     a32:	fc 91       	ld	r31, X
     a34:	15 97       	sbiw	r26, 0x05	; 5
     a36:	40 81       	ld	r20, Z
     a38:	51 81       	ldd	r21, Z+1	; 0x01
     a3a:	62 81       	ldd	r22, Z+2	; 0x02
     a3c:	73 81       	ldd	r23, Z+3	; 0x03
     a3e:	04 17       	cp	r16, r20
     a40:	15 07       	cpc	r17, r21
     a42:	26 07       	cpc	r18, r22
     a44:	37 07       	cpc	r19, r23
     a46:	90 f7       	brcc	.-28     	; 0xa2c <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     a48:	14 96       	adiw	r26, 0x04	; 4
     a4a:	ed 91       	ld	r30, X+
     a4c:	fc 91       	ld	r31, X
     a4e:	15 97       	sbiw	r26, 0x05	; 5
     a50:	fd 83       	std	Y+5, r31	; 0x05
     a52:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a54:	d7 83       	std	Z+7, r29	; 0x07
     a56:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     a58:	bf 83       	std	Y+7, r27	; 0x07
     a5a:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     a5c:	15 96       	adiw	r26, 0x05	; 5
     a5e:	dc 93       	st	X, r29
     a60:	ce 93       	st	-X, r28
     a62:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     a64:	9b 87       	std	Y+11, r25	; 0x0b
     a66:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     a68:	fc 01       	movw	r30, r24
     a6a:	20 81       	ld	r18, Z
     a6c:	2f 5f       	subi	r18, 0xFF	; 255
     a6e:	20 83       	st	Z, r18
}
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	1f 91       	pop	r17
     a76:	0f 91       	pop	r16
     a78:	08 95       	ret

00000a7a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     a80:	a2 85       	ldd	r26, Z+10	; 0x0a
     a82:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a84:	c4 81       	ldd	r28, Z+4	; 0x04
     a86:	d5 81       	ldd	r29, Z+5	; 0x05
     a88:	86 81       	ldd	r24, Z+6	; 0x06
     a8a:	97 81       	ldd	r25, Z+7	; 0x07
     a8c:	9f 83       	std	Y+7, r25	; 0x07
     a8e:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a90:	c6 81       	ldd	r28, Z+6	; 0x06
     a92:	d7 81       	ldd	r29, Z+7	; 0x07
     a94:	84 81       	ldd	r24, Z+4	; 0x04
     a96:	95 81       	ldd	r25, Z+5	; 0x05
     a98:	9d 83       	std	Y+5, r25	; 0x05
     a9a:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     a9c:	11 96       	adiw	r26, 0x01	; 1
     a9e:	8d 91       	ld	r24, X+
     aa0:	9c 91       	ld	r25, X
     aa2:	12 97       	sbiw	r26, 0x02	; 2
     aa4:	e8 17       	cp	r30, r24
     aa6:	f9 07       	cpc	r31, r25
     aa8:	31 f4       	brne	.+12     	; 0xab6 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     aaa:	86 81       	ldd	r24, Z+6	; 0x06
     aac:	97 81       	ldd	r25, Z+7	; 0x07
     aae:	12 96       	adiw	r26, 0x02	; 2
     ab0:	9c 93       	st	X, r25
     ab2:	8e 93       	st	-X, r24
     ab4:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     ab6:	13 86       	std	Z+11, r1	; 0x0b
     ab8:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     aba:	8c 91       	ld	r24, X
     abc:	81 50       	subi	r24, 0x01	; 1
     abe:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     ac0:	8c 91       	ld	r24, X
}
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	08 95       	ret

00000ac8 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     ac8:	a8 95       	wdr
     aca:	90 ec       	ldi	r25, 0xC0	; 192
     acc:	88 e1       	ldi	r24, 0x18	; 24
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	f8 94       	cli
     ad2:	a8 95       	wdr
     ad4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     ade:	08 95       	ret

00000ae0 <pxPortInitialiseStack>:
     ae0:	fc 01       	movw	r30, r24
     ae2:	60 83       	st	Z, r22
     ae4:	31 97       	sbiw	r30, 0x01	; 1
     ae6:	70 83       	st	Z, r23
     ae8:	31 97       	sbiw	r30, 0x01	; 1
     aea:	10 82       	st	Z, r1
     aec:	31 97       	sbiw	r30, 0x01	; 1
     aee:	10 82       	st	Z, r1
     af0:	31 97       	sbiw	r30, 0x01	; 1
     af2:	20 e8       	ldi	r18, 0x80	; 128
     af4:	20 83       	st	Z, r18
     af6:	31 97       	sbiw	r30, 0x01	; 1
     af8:	10 82       	st	Z, r1
     afa:	31 97       	sbiw	r30, 0x01	; 1
     afc:	10 82       	st	Z, r1
     afe:	31 97       	sbiw	r30, 0x01	; 1
     b00:	10 82       	st	Z, r1
     b02:	77 97       	sbiw	r30, 0x17	; 23
     b04:	40 83       	st	Z, r20
     b06:	31 97       	sbiw	r30, 0x01	; 1
     b08:	50 83       	st	Z, r21
     b0a:	86 97       	sbiw	r24, 0x26	; 38
     b0c:	08 95       	ret

00000b0e <xPortStartScheduler>:
     b0e:	dc df       	rcall	.-72     	; 0xac8 <prvSetupTimerInterrupt>
     b10:	a0 91 83 12 	lds	r26, 0x1283	; 0x801283 <pxCurrentTCB>
     b14:	b0 91 84 12 	lds	r27, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
     b18:	cd 91       	ld	r28, X+
     b1a:	cd bf       	out	0x3d, r28	; 61
     b1c:	dd 91       	ld	r29, X+
     b1e:	de bf       	out	0x3e, r29	; 62
     b20:	ff 91       	pop	r31
     b22:	ef 91       	pop	r30
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	bf 91       	pop	r27
     b2a:	af 91       	pop	r26
     b2c:	9f 91       	pop	r25
     b2e:	8f 91       	pop	r24
     b30:	7f 91       	pop	r23
     b32:	6f 91       	pop	r22
     b34:	5f 91       	pop	r21
     b36:	4f 91       	pop	r20
     b38:	3f 91       	pop	r19
     b3a:	2f 91       	pop	r18
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	ff 90       	pop	r15
     b42:	ef 90       	pop	r14
     b44:	df 90       	pop	r13
     b46:	cf 90       	pop	r12
     b48:	bf 90       	pop	r11
     b4a:	af 90       	pop	r10
     b4c:	9f 90       	pop	r9
     b4e:	8f 90       	pop	r8
     b50:	7f 90       	pop	r7
     b52:	6f 90       	pop	r6
     b54:	5f 90       	pop	r5
     b56:	4f 90       	pop	r4
     b58:	3f 90       	pop	r3
     b5a:	2f 90       	pop	r2
     b5c:	1f 90       	pop	r1
     b5e:	0f 90       	pop	r0
     b60:	0c be       	out	0x3c, r0	; 60
     b62:	0f 90       	pop	r0
     b64:	0b be       	out	0x3b, r0	; 59
     b66:	0f 90       	pop	r0
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	0f 90       	pop	r0
     b6c:	08 95       	ret
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	08 95       	ret

00000b72 <vPortYield>:
     b72:	0f 92       	push	r0
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	f8 94       	cli
     b78:	0f 92       	push	r0
     b7a:	0b b6       	in	r0, 0x3b	; 59
     b7c:	0f 92       	push	r0
     b7e:	0c b6       	in	r0, 0x3c	; 60
     b80:	0f 92       	push	r0
     b82:	1f 92       	push	r1
     b84:	11 24       	eor	r1, r1
     b86:	2f 92       	push	r2
     b88:	3f 92       	push	r3
     b8a:	4f 92       	push	r4
     b8c:	5f 92       	push	r5
     b8e:	6f 92       	push	r6
     b90:	7f 92       	push	r7
     b92:	8f 92       	push	r8
     b94:	9f 92       	push	r9
     b96:	af 92       	push	r10
     b98:	bf 92       	push	r11
     b9a:	cf 92       	push	r12
     b9c:	df 92       	push	r13
     b9e:	ef 92       	push	r14
     ba0:	ff 92       	push	r15
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	2f 93       	push	r18
     ba8:	3f 93       	push	r19
     baa:	4f 93       	push	r20
     bac:	5f 93       	push	r21
     bae:	6f 93       	push	r22
     bb0:	7f 93       	push	r23
     bb2:	8f 93       	push	r24
     bb4:	9f 93       	push	r25
     bb6:	af 93       	push	r26
     bb8:	bf 93       	push	r27
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	ef 93       	push	r30
     bc0:	ff 93       	push	r31
     bc2:	a0 91 83 12 	lds	r26, 0x1283	; 0x801283 <pxCurrentTCB>
     bc6:	b0 91 84 12 	lds	r27, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
     bca:	0d b6       	in	r0, 0x3d	; 61
     bcc:	0d 92       	st	X+, r0
     bce:	0e b6       	in	r0, 0x3e	; 62
     bd0:	0d 92       	st	X+, r0
     bd2:	0e 94 9b 11 	call	0x2336	; 0x2336 <vTaskSwitchContext>
     bd6:	a0 91 83 12 	lds	r26, 0x1283	; 0x801283 <pxCurrentTCB>
     bda:	b0 91 84 12 	lds	r27, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
     bde:	cd 91       	ld	r28, X+
     be0:	cd bf       	out	0x3d, r28	; 61
     be2:	dd 91       	ld	r29, X+
     be4:	de bf       	out	0x3e, r29	; 62
     be6:	ff 91       	pop	r31
     be8:	ef 91       	pop	r30
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	bf 91       	pop	r27
     bf0:	af 91       	pop	r26
     bf2:	9f 91       	pop	r25
     bf4:	8f 91       	pop	r24
     bf6:	7f 91       	pop	r23
     bf8:	6f 91       	pop	r22
     bfa:	5f 91       	pop	r21
     bfc:	4f 91       	pop	r20
     bfe:	3f 91       	pop	r19
     c00:	2f 91       	pop	r18
     c02:	1f 91       	pop	r17
     c04:	0f 91       	pop	r16
     c06:	ff 90       	pop	r15
     c08:	ef 90       	pop	r14
     c0a:	df 90       	pop	r13
     c0c:	cf 90       	pop	r12
     c0e:	bf 90       	pop	r11
     c10:	af 90       	pop	r10
     c12:	9f 90       	pop	r9
     c14:	8f 90       	pop	r8
     c16:	7f 90       	pop	r7
     c18:	6f 90       	pop	r6
     c1a:	5f 90       	pop	r5
     c1c:	4f 90       	pop	r4
     c1e:	3f 90       	pop	r3
     c20:	2f 90       	pop	r2
     c22:	1f 90       	pop	r1
     c24:	0f 90       	pop	r0
     c26:	0c be       	out	0x3c, r0	; 60
     c28:	0f 90       	pop	r0
     c2a:	0b be       	out	0x3b, r0	; 59
     c2c:	0f 90       	pop	r0
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	0f 90       	pop	r0
     c32:	08 95       	ret

00000c34 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     c34:	0f 92       	push	r0
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	0f 92       	push	r0
     c3c:	0b b6       	in	r0, 0x3b	; 59
     c3e:	0f 92       	push	r0
     c40:	0c b6       	in	r0, 0x3c	; 60
     c42:	0f 92       	push	r0
     c44:	1f 92       	push	r1
     c46:	11 24       	eor	r1, r1
     c48:	2f 92       	push	r2
     c4a:	3f 92       	push	r3
     c4c:	4f 92       	push	r4
     c4e:	5f 92       	push	r5
     c50:	6f 92       	push	r6
     c52:	7f 92       	push	r7
     c54:	8f 92       	push	r8
     c56:	9f 92       	push	r9
     c58:	af 92       	push	r10
     c5a:	bf 92       	push	r11
     c5c:	cf 92       	push	r12
     c5e:	df 92       	push	r13
     c60:	ef 92       	push	r14
     c62:	ff 92       	push	r15
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	2f 93       	push	r18
     c6a:	3f 93       	push	r19
     c6c:	4f 93       	push	r20
     c6e:	5f 93       	push	r21
     c70:	6f 93       	push	r22
     c72:	7f 93       	push	r23
     c74:	8f 93       	push	r24
     c76:	9f 93       	push	r25
     c78:	af 93       	push	r26
     c7a:	bf 93       	push	r27
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	ef 93       	push	r30
     c82:	ff 93       	push	r31
     c84:	a0 91 83 12 	lds	r26, 0x1283	; 0x801283 <pxCurrentTCB>
     c88:	b0 91 84 12 	lds	r27, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
     c8c:	0d b6       	in	r0, 0x3d	; 61
     c8e:	0d 92       	st	X+, r0
     c90:	0e b6       	in	r0, 0x3e	; 62
     c92:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     c94:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     c96:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <xTaskIncrementTick>
     c9a:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     c9c:	0e 94 9b 11 	call	0x2336	; 0x2336 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     ca0:	a0 91 83 12 	lds	r26, 0x1283	; 0x801283 <pxCurrentTCB>
     ca4:	b0 91 84 12 	lds	r27, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
     ca8:	cd 91       	ld	r28, X+
     caa:	cd bf       	out	0x3d, r28	; 61
     cac:	dd 91       	ld	r29, X+
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	ff 91       	pop	r31
     cb2:	ef 91       	pop	r30
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	bf 91       	pop	r27
     cba:	af 91       	pop	r26
     cbc:	9f 91       	pop	r25
     cbe:	8f 91       	pop	r24
     cc0:	7f 91       	pop	r23
     cc2:	6f 91       	pop	r22
     cc4:	5f 91       	pop	r21
     cc6:	4f 91       	pop	r20
     cc8:	3f 91       	pop	r19
     cca:	2f 91       	pop	r18
     ccc:	1f 91       	pop	r17
     cce:	0f 91       	pop	r16
     cd0:	ff 90       	pop	r15
     cd2:	ef 90       	pop	r14
     cd4:	df 90       	pop	r13
     cd6:	cf 90       	pop	r12
     cd8:	bf 90       	pop	r11
     cda:	af 90       	pop	r10
     cdc:	9f 90       	pop	r9
     cde:	8f 90       	pop	r8
     ce0:	7f 90       	pop	r7
     ce2:	6f 90       	pop	r6
     ce4:	5f 90       	pop	r5
     ce6:	4f 90       	pop	r4
     ce8:	3f 90       	pop	r3
     cea:	2f 90       	pop	r2
     cec:	1f 90       	pop	r1
     cee:	0f 90       	pop	r0
     cf0:	0c be       	out	0x3c, r0	; 60
     cf2:	0f 90       	pop	r0
     cf4:	0b be       	out	0x3b, r0	; 59
     cf6:	0f 90       	pop	r0
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     cfc:	08 95       	ret

00000cfe <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     cfe:	9a df       	rcall	.-204    	; 0xc34 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     d00:	18 95       	reti

00000d02 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	0f 92       	push	r0
     d08:	fc 01       	movw	r30, r24
     d0a:	86 8d       	ldd	r24, Z+30	; 0x1e
     d0c:	81 11       	cpse	r24, r1
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <prvIsQueueEmpty+0x12>
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	01 c0       	rjmp	.+2      	; 0xd16 <prvIsQueueEmpty+0x14>
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	0f 90       	pop	r0
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	08 95       	ret

00000d1c <prvIsQueueFull>:
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	0f 92       	push	r0
     d22:	fc 01       	movw	r30, r24
     d24:	26 8d       	ldd	r18, Z+30	; 0x1e
     d26:	87 8d       	ldd	r24, Z+31	; 0x1f
     d28:	28 13       	cpse	r18, r24
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <prvIsQueueFull+0x14>
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	01 c0       	rjmp	.+2      	; 0xd32 <prvIsQueueFull+0x16>
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	0f 90       	pop	r0
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	08 95       	ret

00000d38 <prvCopyDataToQueue>:
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	ec 01       	movw	r28, r24
     d42:	04 2f       	mov	r16, r20
     d44:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d46:	48 a1       	ldd	r20, Y+32	; 0x20
     d48:	41 11       	cpse	r20, r1
     d4a:	0c c0       	rjmp	.+24     	; 0xd64 <prvCopyDataToQueue+0x2c>
     d4c:	88 81       	ld	r24, Y
     d4e:	99 81       	ldd	r25, Y+1	; 0x01
     d50:	89 2b       	or	r24, r25
     d52:	09 f0       	breq	.+2      	; 0xd56 <prvCopyDataToQueue+0x1e>
     d54:	42 c0       	rjmp	.+132    	; 0xdda <prvCopyDataToQueue+0xa2>
     d56:	8c 81       	ldd	r24, Y+4	; 0x04
     d58:	9d 81       	ldd	r25, Y+5	; 0x05
     d5a:	0e 94 90 14 	call	0x2920	; 0x2920 <xTaskPriorityDisinherit>
     d5e:	1d 82       	std	Y+5, r1	; 0x05
     d60:	1c 82       	std	Y+4, r1	; 0x04
     d62:	42 c0       	rjmp	.+132    	; 0xde8 <prvCopyDataToQueue+0xb0>
     d64:	01 11       	cpse	r16, r1
     d66:	17 c0       	rjmp	.+46     	; 0xd96 <prvCopyDataToQueue+0x5e>
     d68:	50 e0       	ldi	r21, 0x00	; 0
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	9b 81       	ldd	r25, Y+3	; 0x03
     d6e:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <memcpy>
     d72:	28 a1       	ldd	r18, Y+32	; 0x20
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	9b 81       	ldd	r25, Y+3	; 0x03
     d78:	82 0f       	add	r24, r18
     d7a:	91 1d       	adc	r25, r1
     d7c:	9b 83       	std	Y+3, r25	; 0x03
     d7e:	8a 83       	std	Y+2, r24	; 0x02
     d80:	2c 81       	ldd	r18, Y+4	; 0x04
     d82:	3d 81       	ldd	r19, Y+5	; 0x05
     d84:	82 17       	cp	r24, r18
     d86:	93 07       	cpc	r25, r19
     d88:	50 f1       	brcs	.+84     	; 0xdde <prvCopyDataToQueue+0xa6>
     d8a:	88 81       	ld	r24, Y
     d8c:	99 81       	ldd	r25, Y+1	; 0x01
     d8e:	9b 83       	std	Y+3, r25	; 0x03
     d90:	8a 83       	std	Y+2, r24	; 0x02
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	29 c0       	rjmp	.+82     	; 0xde8 <prvCopyDataToQueue+0xb0>
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	8e 81       	ldd	r24, Y+6	; 0x06
     d9a:	9f 81       	ldd	r25, Y+7	; 0x07
     d9c:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <memcpy>
     da0:	88 a1       	ldd	r24, Y+32	; 0x20
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	91 95       	neg	r25
     da6:	81 95       	neg	r24
     da8:	91 09       	sbc	r25, r1
     daa:	2e 81       	ldd	r18, Y+6	; 0x06
     dac:	3f 81       	ldd	r19, Y+7	; 0x07
     dae:	28 0f       	add	r18, r24
     db0:	39 1f       	adc	r19, r25
     db2:	3f 83       	std	Y+7, r19	; 0x07
     db4:	2e 83       	std	Y+6, r18	; 0x06
     db6:	48 81       	ld	r20, Y
     db8:	59 81       	ldd	r21, Y+1	; 0x01
     dba:	24 17       	cp	r18, r20
     dbc:	35 07       	cpc	r19, r21
     dbe:	30 f4       	brcc	.+12     	; 0xdcc <prvCopyDataToQueue+0x94>
     dc0:	2c 81       	ldd	r18, Y+4	; 0x04
     dc2:	3d 81       	ldd	r19, Y+5	; 0x05
     dc4:	82 0f       	add	r24, r18
     dc6:	93 1f       	adc	r25, r19
     dc8:	9f 83       	std	Y+7, r25	; 0x07
     dca:	8e 83       	std	Y+6, r24	; 0x06
     dcc:	02 30       	cpi	r16, 0x02	; 2
     dce:	49 f4       	brne	.+18     	; 0xde2 <prvCopyDataToQueue+0xaa>
     dd0:	11 23       	and	r17, r17
     dd2:	49 f0       	breq	.+18     	; 0xde6 <prvCopyDataToQueue+0xae>
     dd4:	11 50       	subi	r17, 0x01	; 1
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	07 c0       	rjmp	.+14     	; 0xde8 <prvCopyDataToQueue+0xb0>
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	05 c0       	rjmp	.+10     	; 0xde8 <prvCopyDataToQueue+0xb0>
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	03 c0       	rjmp	.+6      	; 0xde8 <prvCopyDataToQueue+0xb0>
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	01 c0       	rjmp	.+2      	; 0xde8 <prvCopyDataToQueue+0xb0>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	1f 5f       	subi	r17, 0xFF	; 255
     dea:	1e 8f       	std	Y+30, r17	; 0x1e
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	1f 91       	pop	r17
     df2:	0f 91       	pop	r16
     df4:	08 95       	ret

00000df6 <prvCopyDataFromQueue>:
     df6:	fc 01       	movw	r30, r24
     df8:	40 a1       	ldd	r20, Z+32	; 0x20
     dfa:	44 23       	and	r20, r20
     dfc:	a9 f0       	breq	.+42     	; 0xe28 <prvCopyDataFromQueue+0x32>
     dfe:	50 e0       	ldi	r21, 0x00	; 0
     e00:	26 81       	ldd	r18, Z+6	; 0x06
     e02:	37 81       	ldd	r19, Z+7	; 0x07
     e04:	24 0f       	add	r18, r20
     e06:	35 1f       	adc	r19, r21
     e08:	37 83       	std	Z+7, r19	; 0x07
     e0a:	26 83       	std	Z+6, r18	; 0x06
     e0c:	84 81       	ldd	r24, Z+4	; 0x04
     e0e:	95 81       	ldd	r25, Z+5	; 0x05
     e10:	28 17       	cp	r18, r24
     e12:	39 07       	cpc	r19, r25
     e14:	20 f0       	brcs	.+8      	; 0xe1e <prvCopyDataFromQueue+0x28>
     e16:	80 81       	ld	r24, Z
     e18:	91 81       	ldd	r25, Z+1	; 0x01
     e1a:	97 83       	std	Z+7, r25	; 0x07
     e1c:	86 83       	std	Z+6, r24	; 0x06
     e1e:	cb 01       	movw	r24, r22
     e20:	66 81       	ldd	r22, Z+6	; 0x06
     e22:	77 81       	ldd	r23, Z+7	; 0x07
     e24:	0c 94 f4 2d 	jmp	0x5be8	; 0x5be8 <memcpy>
     e28:	08 95       	ret

00000e2a <prvUnlockQueue>:
     e2a:	1f 93       	push	r17
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	ec 01       	movw	r28, r24
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	0f 92       	push	r0
     e38:	1a a1       	ldd	r17, Y+34	; 0x22
     e3a:	0b c0       	rjmp	.+22     	; 0xe52 <prvUnlockQueue+0x28>
     e3c:	8b 89       	ldd	r24, Y+19	; 0x13
     e3e:	88 23       	and	r24, r24
     e40:	51 f0       	breq	.+20     	; 0xe56 <prvUnlockQueue+0x2c>
     e42:	ce 01       	movw	r24, r28
     e44:	43 96       	adiw	r24, 0x13	; 19
     e46:	0e 94 a3 12 	call	0x2546	; 0x2546 <xTaskRemoveFromEventList>
     e4a:	81 11       	cpse	r24, r1
     e4c:	0e 94 79 14 	call	0x28f2	; 0x28f2 <vTaskMissedYield>
     e50:	11 50       	subi	r17, 0x01	; 1
     e52:	11 16       	cp	r1, r17
     e54:	9c f3       	brlt	.-26     	; 0xe3c <prvUnlockQueue+0x12>
     e56:	8f ef       	ldi	r24, 0xFF	; 255
     e58:	8a a3       	std	Y+34, r24	; 0x22
     e5a:	0f 90       	pop	r0
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	0f 92       	push	r0
     e64:	19 a1       	ldd	r17, Y+33	; 0x21
     e66:	0b c0       	rjmp	.+22     	; 0xe7e <prvUnlockQueue+0x54>
     e68:	88 85       	ldd	r24, Y+8	; 0x08
     e6a:	88 23       	and	r24, r24
     e6c:	51 f0       	breq	.+20     	; 0xe82 <prvUnlockQueue+0x58>
     e6e:	ce 01       	movw	r24, r28
     e70:	08 96       	adiw	r24, 0x08	; 8
     e72:	0e 94 a3 12 	call	0x2546	; 0x2546 <xTaskRemoveFromEventList>
     e76:	81 11       	cpse	r24, r1
     e78:	0e 94 79 14 	call	0x28f2	; 0x28f2 <vTaskMissedYield>
     e7c:	11 50       	subi	r17, 0x01	; 1
     e7e:	11 16       	cp	r1, r17
     e80:	9c f3       	brlt	.-26     	; 0xe68 <prvUnlockQueue+0x3e>
     e82:	8f ef       	ldi	r24, 0xFF	; 255
     e84:	89 a3       	std	Y+33, r24	; 0x21
     e86:	0f 90       	pop	r0
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	1f 91       	pop	r17
     e90:	08 95       	ret

00000e92 <xQueueGenericReset>:
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	ec 01       	movw	r28, r24
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	0f 92       	push	r0
     e9e:	e8 81       	ld	r30, Y
     ea0:	f9 81       	ldd	r31, Y+1	; 0x01
     ea2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ea4:	28 a1       	ldd	r18, Y+32	; 0x20
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	82 9f       	mul	r24, r18
     eac:	a0 01       	movw	r20, r0
     eae:	83 9f       	mul	r24, r19
     eb0:	50 0d       	add	r21, r0
     eb2:	92 9f       	mul	r25, r18
     eb4:	50 0d       	add	r21, r0
     eb6:	11 24       	eor	r1, r1
     eb8:	4e 0f       	add	r20, r30
     eba:	5f 1f       	adc	r21, r31
     ebc:	5d 83       	std	Y+5, r21	; 0x05
     ebe:	4c 83       	std	Y+4, r20	; 0x04
     ec0:	1e 8e       	std	Y+30, r1	; 0x1e
     ec2:	fb 83       	std	Y+3, r31	; 0x03
     ec4:	ea 83       	std	Y+2, r30	; 0x02
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	28 9f       	mul	r18, r24
     eca:	a0 01       	movw	r20, r0
     ecc:	29 9f       	mul	r18, r25
     ece:	50 0d       	add	r21, r0
     ed0:	38 9f       	mul	r19, r24
     ed2:	50 0d       	add	r21, r0
     ed4:	11 24       	eor	r1, r1
     ed6:	cf 01       	movw	r24, r30
     ed8:	84 0f       	add	r24, r20
     eda:	95 1f       	adc	r25, r21
     edc:	9f 83       	std	Y+7, r25	; 0x07
     ede:	8e 83       	std	Y+6, r24	; 0x06
     ee0:	8f ef       	ldi	r24, 0xFF	; 255
     ee2:	89 a3       	std	Y+33, r24	; 0x21
     ee4:	8a a3       	std	Y+34, r24	; 0x22
     ee6:	61 11       	cpse	r22, r1
     ee8:	0b c0       	rjmp	.+22     	; 0xf00 <xQueueGenericReset+0x6e>
     eea:	88 85       	ldd	r24, Y+8	; 0x08
     eec:	88 23       	and	r24, r24
     eee:	71 f0       	breq	.+28     	; 0xf0c <xQueueGenericReset+0x7a>
     ef0:	ce 01       	movw	r24, r28
     ef2:	08 96       	adiw	r24, 0x08	; 8
     ef4:	0e 94 a3 12 	call	0x2546	; 0x2546 <xTaskRemoveFromEventList>
     ef8:	88 23       	and	r24, r24
     efa:	41 f0       	breq	.+16     	; 0xf0c <xQueueGenericReset+0x7a>
     efc:	3a de       	rcall	.-908    	; 0xb72 <vPortYield>
     efe:	06 c0       	rjmp	.+12     	; 0xf0c <xQueueGenericReset+0x7a>
     f00:	ce 01       	movw	r24, r28
     f02:	08 96       	adiw	r24, 0x08	; 8
     f04:	68 dd       	rcall	.-1328   	; 0x9d6 <vListInitialise>
     f06:	ce 01       	movw	r24, r28
     f08:	43 96       	adiw	r24, 0x13	; 19
     f0a:	65 dd       	rcall	.-1334   	; 0x9d6 <vListInitialise>
     f0c:	0f 90       	pop	r0
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	08 95       	ret

00000f18 <prvInitialiseNewQueue>:
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	f8 01       	movw	r30, r16
     f1e:	61 11       	cpse	r22, r1
     f20:	03 c0       	rjmp	.+6      	; 0xf28 <prvInitialiseNewQueue+0x10>
     f22:	11 83       	std	Z+1, r17	; 0x01
     f24:	00 83       	st	Z, r16
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <prvInitialiseNewQueue+0x14>
     f28:	51 83       	std	Z+1, r21	; 0x01
     f2a:	40 83       	st	Z, r20
     f2c:	87 8f       	std	Z+31, r24	; 0x1f
     f2e:	60 a3       	std	Z+32, r22	; 0x20
     f30:	61 e0       	ldi	r22, 0x01	; 1
     f32:	cf 01       	movw	r24, r30
     f34:	ae df       	rcall	.-164    	; 0xe92 <xQueueGenericReset>
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	08 95       	ret

00000f3c <xQueueGenericCreate>:
     f3c:	df 92       	push	r13
     f3e:	ef 92       	push	r14
     f40:	ff 92       	push	r15
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	f8 2e       	mov	r15, r24
     f4c:	e6 2e       	mov	r14, r22
     f4e:	d4 2e       	mov	r13, r20
     f50:	86 9f       	mul	r24, r22
     f52:	c0 01       	movw	r24, r0
     f54:	11 24       	eor	r1, r1
     f56:	83 96       	adiw	r24, 0x23	; 35
     f58:	58 dc       	rcall	.-1872   	; 0x80a <pvPortMalloc>
     f5a:	ec 01       	movw	r28, r24
     f5c:	00 97       	sbiw	r24, 0x00	; 0
     f5e:	41 f0       	breq	.+16     	; 0xf70 <xQueueGenericCreate+0x34>
     f60:	8c 01       	movw	r16, r24
     f62:	2d 2d       	mov	r18, r13
     f64:	ac 01       	movw	r20, r24
     f66:	4d 5d       	subi	r20, 0xDD	; 221
     f68:	5f 4f       	sbci	r21, 0xFF	; 255
     f6a:	6e 2d       	mov	r22, r14
     f6c:	8f 2d       	mov	r24, r15
     f6e:	d4 df       	rcall	.-88     	; 0xf18 <prvInitialiseNewQueue>
     f70:	ce 01       	movw	r24, r28
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	1f 91       	pop	r17
     f78:	0f 91       	pop	r16
     f7a:	ff 90       	pop	r15
     f7c:	ef 90       	pop	r14
     f7e:	df 90       	pop	r13
     f80:	08 95       	ret

00000f82 <xQueueGenericSend>:
     f82:	cf 92       	push	r12
     f84:	df 92       	push	r13
     f86:	ef 92       	push	r14
     f88:	ff 92       	push	r15
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	29 97       	sbiw	r28, 0x09	; 9
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	7c 01       	movw	r14, r24
     fa4:	6b 01       	movw	r12, r22
     fa6:	2e 83       	std	Y+6, r18	; 0x06
     fa8:	3f 83       	std	Y+7, r19	; 0x07
     faa:	48 87       	std	Y+8, r20	; 0x08
     fac:	59 87       	std	Y+9, r21	; 0x09
     fae:	10 e0       	ldi	r17, 0x00	; 0
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	0f 92       	push	r0
     fb6:	f7 01       	movw	r30, r14
     fb8:	96 8d       	ldd	r25, Z+30	; 0x1e
     fba:	87 8d       	ldd	r24, Z+31	; 0x1f
     fbc:	98 17       	cp	r25, r24
     fbe:	10 f0       	brcs	.+4      	; 0xfc4 <xQueueGenericSend+0x42>
     fc0:	02 30       	cpi	r16, 0x02	; 2
     fc2:	b1 f4       	brne	.+44     	; 0xff0 <xQueueGenericSend+0x6e>
     fc4:	40 2f       	mov	r20, r16
     fc6:	b6 01       	movw	r22, r12
     fc8:	c7 01       	movw	r24, r14
     fca:	b6 de       	rcall	.-660    	; 0xd38 <prvCopyDataToQueue>
     fcc:	f7 01       	movw	r30, r14
     fce:	93 89       	ldd	r25, Z+19	; 0x13
     fd0:	99 23       	and	r25, r25
     fd2:	41 f0       	breq	.+16     	; 0xfe4 <xQueueGenericSend+0x62>
     fd4:	c7 01       	movw	r24, r14
     fd6:	43 96       	adiw	r24, 0x13	; 19
     fd8:	0e 94 a3 12 	call	0x2546	; 0x2546 <xTaskRemoveFromEventList>
     fdc:	88 23       	and	r24, r24
     fde:	21 f0       	breq	.+8      	; 0xfe8 <xQueueGenericSend+0x66>
     fe0:	c8 dd       	rcall	.-1136   	; 0xb72 <vPortYield>
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <xQueueGenericSend+0x66>
     fe4:	81 11       	cpse	r24, r1
     fe6:	c5 dd       	rcall	.-1142   	; 0xb72 <vPortYield>
     fe8:	0f 90       	pop	r0
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	4b c0       	rjmp	.+150    	; 0x1086 <__EEPROM_REGION_LENGTH__+0x86>
     ff0:	8e 81       	ldd	r24, Y+6	; 0x06
     ff2:	9f 81       	ldd	r25, Y+7	; 0x07
     ff4:	a8 85       	ldd	r26, Y+8	; 0x08
     ff6:	b9 85       	ldd	r27, Y+9	; 0x09
     ff8:	89 2b       	or	r24, r25
     ffa:	8a 2b       	or	r24, r26
     ffc:	8b 2b       	or	r24, r27
     ffe:	21 f4       	brne	.+8      	; 0x1008 <__EEPROM_REGION_LENGTH__+0x8>
    1000:	0f 90       	pop	r0
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	3f c0       	rjmp	.+126    	; 0x1086 <__EEPROM_REGION_LENGTH__+0x86>
    1008:	11 11       	cpse	r17, r1
    100a:	05 c0       	rjmp	.+10     	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
    100c:	ce 01       	movw	r24, r28
    100e:	01 96       	adiw	r24, 0x01	; 1
    1010:	0e 94 02 14 	call	0x2804	; 0x2804 <vTaskInternalSetTimeOutState>
    1014:	11 e0       	ldi	r17, 0x01	; 1
    1016:	0f 90       	pop	r0
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	f1 d6       	rcall	.+3554   	; 0x1dfe <vTaskSuspendAll>
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	0f 92       	push	r0
    1022:	f7 01       	movw	r30, r14
    1024:	81 a1       	ldd	r24, Z+33	; 0x21
    1026:	8f 3f       	cpi	r24, 0xFF	; 255
    1028:	09 f4       	brne	.+2      	; 0x102c <__EEPROM_REGION_LENGTH__+0x2c>
    102a:	11 a2       	std	Z+33, r1	; 0x21
    102c:	f7 01       	movw	r30, r14
    102e:	82 a1       	ldd	r24, Z+34	; 0x22
    1030:	8f 3f       	cpi	r24, 0xFF	; 255
    1032:	09 f4       	brne	.+2      	; 0x1036 <__EEPROM_REGION_LENGTH__+0x36>
    1034:	12 a2       	std	Z+34, r1	; 0x22
    1036:	0f 90       	pop	r0
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	be 01       	movw	r22, r28
    103c:	6a 5f       	subi	r22, 0xFA	; 250
    103e:	7f 4f       	sbci	r23, 0xFF	; 255
    1040:	ce 01       	movw	r24, r28
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	0e 94 13 14 	call	0x2826	; 0x2826 <xTaskCheckForTimeOut>
    1048:	81 11       	cpse	r24, r1
    104a:	19 c0       	rjmp	.+50     	; 0x107e <__EEPROM_REGION_LENGTH__+0x7e>
    104c:	c7 01       	movw	r24, r14
    104e:	66 de       	rcall	.-820    	; 0xd1c <prvIsQueueFull>
    1050:	88 23       	and	r24, r24
    1052:	81 f0       	breq	.+32     	; 0x1074 <__EEPROM_REGION_LENGTH__+0x74>
    1054:	4e 81       	ldd	r20, Y+6	; 0x06
    1056:	5f 81       	ldd	r21, Y+7	; 0x07
    1058:	68 85       	ldd	r22, Y+8	; 0x08
    105a:	79 85       	ldd	r23, Y+9	; 0x09
    105c:	c7 01       	movw	r24, r14
    105e:	08 96       	adiw	r24, 0x08	; 8
    1060:	0e 94 00 12 	call	0x2400	; 0x2400 <vTaskPlaceOnEventList>
    1064:	c7 01       	movw	r24, r14
    1066:	e1 de       	rcall	.-574    	; 0xe2a <prvUnlockQueue>
    1068:	0e 94 3f 10 	call	0x207e	; 0x207e <xTaskResumeAll>
    106c:	81 11       	cpse	r24, r1
    106e:	a0 cf       	rjmp	.-192    	; 0xfb0 <xQueueGenericSend+0x2e>
    1070:	80 dd       	rcall	.-1280   	; 0xb72 <vPortYield>
    1072:	9e cf       	rjmp	.-196    	; 0xfb0 <xQueueGenericSend+0x2e>
    1074:	c7 01       	movw	r24, r14
    1076:	d9 de       	rcall	.-590    	; 0xe2a <prvUnlockQueue>
    1078:	0e 94 3f 10 	call	0x207e	; 0x207e <xTaskResumeAll>
    107c:	99 cf       	rjmp	.-206    	; 0xfb0 <xQueueGenericSend+0x2e>
    107e:	c7 01       	movw	r24, r14
    1080:	d4 de       	rcall	.-600    	; 0xe2a <prvUnlockQueue>
    1082:	fd d7       	rcall	.+4090   	; 0x207e <xTaskResumeAll>
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	29 96       	adiw	r28, 0x09	; 9
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	1f 91       	pop	r17
    1098:	0f 91       	pop	r16
    109a:	ff 90       	pop	r15
    109c:	ef 90       	pop	r14
    109e:	df 90       	pop	r13
    10a0:	cf 90       	pop	r12
    10a2:	08 95       	ret

000010a4 <xQueueGenericSendFromISR>:
    10a4:	ef 92       	push	r14
    10a6:	ff 92       	push	r15
    10a8:	0f 93       	push	r16
    10aa:	1f 93       	push	r17
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	8a 01       	movw	r16, r20
    10b2:	fc 01       	movw	r30, r24
    10b4:	56 8d       	ldd	r21, Z+30	; 0x1e
    10b6:	37 8d       	ldd	r19, Z+31	; 0x1f
    10b8:	53 17       	cp	r21, r19
    10ba:	10 f0       	brcs	.+4      	; 0x10c0 <xQueueGenericSendFromISR+0x1c>
    10bc:	22 30       	cpi	r18, 0x02	; 2
    10be:	f9 f4       	brne	.+62     	; 0x10fe <xQueueGenericSendFromISR+0x5a>
    10c0:	42 2f       	mov	r20, r18
    10c2:	78 01       	movw	r14, r16
    10c4:	ec 01       	movw	r28, r24
    10c6:	1a a1       	ldd	r17, Y+34	; 0x22
    10c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10ca:	ce 01       	movw	r24, r28
    10cc:	35 de       	rcall	.-918    	; 0xd38 <prvCopyDataToQueue>
    10ce:	1f 3f       	cpi	r17, 0xFF	; 255
    10d0:	81 f4       	brne	.+32     	; 0x10f2 <xQueueGenericSendFromISR+0x4e>
    10d2:	8b 89       	ldd	r24, Y+19	; 0x13
    10d4:	88 23       	and	r24, r24
    10d6:	a9 f0       	breq	.+42     	; 0x1102 <xQueueGenericSendFromISR+0x5e>
    10d8:	ce 01       	movw	r24, r28
    10da:	43 96       	adiw	r24, 0x13	; 19
    10dc:	0e 94 a3 12 	call	0x2546	; 0x2546 <xTaskRemoveFromEventList>
    10e0:	88 23       	and	r24, r24
    10e2:	89 f0       	breq	.+34     	; 0x1106 <xQueueGenericSendFromISR+0x62>
    10e4:	e1 14       	cp	r14, r1
    10e6:	f1 04       	cpc	r15, r1
    10e8:	81 f0       	breq	.+32     	; 0x110a <xQueueGenericSendFromISR+0x66>
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	f7 01       	movw	r30, r14
    10ee:	80 83       	st	Z, r24
    10f0:	0d c0       	rjmp	.+26     	; 0x110c <xQueueGenericSendFromISR+0x68>
    10f2:	ff 24       	eor	r15, r15
    10f4:	f3 94       	inc	r15
    10f6:	f1 0e       	add	r15, r17
    10f8:	fa a2       	std	Y+34, r15	; 0x22
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	07 c0       	rjmp	.+14     	; 0x110c <xQueueGenericSendFromISR+0x68>
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	05 c0       	rjmp	.+10     	; 0x110c <xQueueGenericSendFromISR+0x68>
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	03 c0       	rjmp	.+6      	; 0x110c <xQueueGenericSendFromISR+0x68>
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	01 c0       	rjmp	.+2      	; 0x110c <xQueueGenericSendFromISR+0x68>
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	1f 91       	pop	r17
    1112:	0f 91       	pop	r16
    1114:	ff 90       	pop	r15
    1116:	ef 90       	pop	r14
    1118:	08 95       	ret

0000111a <xQueueReceive>:
    111a:	cf 92       	push	r12
    111c:	df 92       	push	r13
    111e:	ef 92       	push	r14
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	29 97       	sbiw	r28, 0x09	; 9
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	de bf       	out	0x3e, r29	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	8c 01       	movw	r16, r24
    113c:	6b 01       	movw	r12, r22
    113e:	2e 83       	std	Y+6, r18	; 0x06
    1140:	3f 83       	std	Y+7, r19	; 0x07
    1142:	48 87       	std	Y+8, r20	; 0x08
    1144:	59 87       	std	Y+9, r21	; 0x09
    1146:	e1 2c       	mov	r14, r1
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	f8 94       	cli
    114c:	0f 92       	push	r0
    114e:	f8 01       	movw	r30, r16
    1150:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1152:	ff 20       	and	r15, r15
    1154:	99 f0       	breq	.+38     	; 0x117c <xQueueReceive+0x62>
    1156:	b6 01       	movw	r22, r12
    1158:	c8 01       	movw	r24, r16
    115a:	4d de       	rcall	.-870    	; 0xdf6 <prvCopyDataFromQueue>
    115c:	fa 94       	dec	r15
    115e:	f8 01       	movw	r30, r16
    1160:	f6 8e       	std	Z+30, r15	; 0x1e
    1162:	80 85       	ldd	r24, Z+8	; 0x08
    1164:	88 23       	and	r24, r24
    1166:	31 f0       	breq	.+12     	; 0x1174 <xQueueReceive+0x5a>
    1168:	c8 01       	movw	r24, r16
    116a:	08 96       	adiw	r24, 0x08	; 8
    116c:	0e 94 a3 12 	call	0x2546	; 0x2546 <xTaskRemoveFromEventList>
    1170:	81 11       	cpse	r24, r1
    1172:	ff dc       	rcall	.-1538   	; 0xb72 <vPortYield>
    1174:	0f 90       	pop	r0
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	4f c0       	rjmp	.+158    	; 0x121a <xQueueReceive+0x100>
    117c:	8e 81       	ldd	r24, Y+6	; 0x06
    117e:	9f 81       	ldd	r25, Y+7	; 0x07
    1180:	a8 85       	ldd	r26, Y+8	; 0x08
    1182:	b9 85       	ldd	r27, Y+9	; 0x09
    1184:	89 2b       	or	r24, r25
    1186:	8a 2b       	or	r24, r26
    1188:	8b 2b       	or	r24, r27
    118a:	21 f4       	brne	.+8      	; 0x1194 <xQueueReceive+0x7a>
    118c:	0f 90       	pop	r0
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	43 c0       	rjmp	.+134    	; 0x121a <xQueueReceive+0x100>
    1194:	e1 10       	cpse	r14, r1
    1196:	06 c0       	rjmp	.+12     	; 0x11a4 <xQueueReceive+0x8a>
    1198:	ce 01       	movw	r24, r28
    119a:	01 96       	adiw	r24, 0x01	; 1
    119c:	0e 94 02 14 	call	0x2804	; 0x2804 <vTaskInternalSetTimeOutState>
    11a0:	ee 24       	eor	r14, r14
    11a2:	e3 94       	inc	r14
    11a4:	0f 90       	pop	r0
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	2a d6       	rcall	.+3156   	; 0x1dfe <vTaskSuspendAll>
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	0f 92       	push	r0
    11b0:	f8 01       	movw	r30, r16
    11b2:	81 a1       	ldd	r24, Z+33	; 0x21
    11b4:	8f 3f       	cpi	r24, 0xFF	; 255
    11b6:	09 f4       	brne	.+2      	; 0x11ba <xQueueReceive+0xa0>
    11b8:	11 a2       	std	Z+33, r1	; 0x21
    11ba:	f8 01       	movw	r30, r16
    11bc:	82 a1       	ldd	r24, Z+34	; 0x22
    11be:	8f 3f       	cpi	r24, 0xFF	; 255
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <xQueueReceive+0xaa>
    11c2:	12 a2       	std	Z+34, r1	; 0x22
    11c4:	0f 90       	pop	r0
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	be 01       	movw	r22, r28
    11ca:	6a 5f       	subi	r22, 0xFA	; 250
    11cc:	7f 4f       	sbci	r23, 0xFF	; 255
    11ce:	ce 01       	movw	r24, r28
    11d0:	01 96       	adiw	r24, 0x01	; 1
    11d2:	0e 94 13 14 	call	0x2826	; 0x2826 <xTaskCheckForTimeOut>
    11d6:	81 11       	cpse	r24, r1
    11d8:	17 c0       	rjmp	.+46     	; 0x1208 <xQueueReceive+0xee>
    11da:	c8 01       	movw	r24, r16
    11dc:	92 dd       	rcall	.-1244   	; 0xd02 <prvIsQueueEmpty>
    11de:	88 23       	and	r24, r24
    11e0:	79 f0       	breq	.+30     	; 0x1200 <xQueueReceive+0xe6>
    11e2:	4e 81       	ldd	r20, Y+6	; 0x06
    11e4:	5f 81       	ldd	r21, Y+7	; 0x07
    11e6:	68 85       	ldd	r22, Y+8	; 0x08
    11e8:	79 85       	ldd	r23, Y+9	; 0x09
    11ea:	c8 01       	movw	r24, r16
    11ec:	43 96       	adiw	r24, 0x13	; 19
    11ee:	0e 94 00 12 	call	0x2400	; 0x2400 <vTaskPlaceOnEventList>
    11f2:	c8 01       	movw	r24, r16
    11f4:	1a de       	rcall	.-972    	; 0xe2a <prvUnlockQueue>
    11f6:	43 d7       	rcall	.+3718   	; 0x207e <xTaskResumeAll>
    11f8:	81 11       	cpse	r24, r1
    11fa:	a6 cf       	rjmp	.-180    	; 0x1148 <xQueueReceive+0x2e>
    11fc:	ba dc       	rcall	.-1676   	; 0xb72 <vPortYield>
    11fe:	a4 cf       	rjmp	.-184    	; 0x1148 <xQueueReceive+0x2e>
    1200:	c8 01       	movw	r24, r16
    1202:	13 de       	rcall	.-986    	; 0xe2a <prvUnlockQueue>
    1204:	3c d7       	rcall	.+3704   	; 0x207e <xTaskResumeAll>
    1206:	a0 cf       	rjmp	.-192    	; 0x1148 <xQueueReceive+0x2e>
    1208:	c8 01       	movw	r24, r16
    120a:	0f de       	rcall	.-994    	; 0xe2a <prvUnlockQueue>
    120c:	38 d7       	rcall	.+3696   	; 0x207e <xTaskResumeAll>
    120e:	c8 01       	movw	r24, r16
    1210:	78 dd       	rcall	.-1296   	; 0xd02 <prvIsQueueEmpty>
    1212:	88 23       	and	r24, r24
    1214:	09 f4       	brne	.+2      	; 0x1218 <xQueueReceive+0xfe>
    1216:	98 cf       	rjmp	.-208    	; 0x1148 <xQueueReceive+0x2e>
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	29 96       	adiw	r28, 0x09	; 9
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	ff 90       	pop	r15
    1230:	ef 90       	pop	r14
    1232:	df 90       	pop	r13
    1234:	cf 90       	pop	r12
    1236:	08 95       	ret

00001238 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	0f 92       	push	r0
    1244:	89 a1       	ldd	r24, Y+33	; 0x21
    1246:	8f 3f       	cpi	r24, 0xFF	; 255
    1248:	09 f4       	brne	.+2      	; 0x124c <vQueueWaitForMessageRestricted+0x14>
    124a:	19 a2       	std	Y+33, r1	; 0x21
    124c:	8a a1       	ldd	r24, Y+34	; 0x22
    124e:	8f 3f       	cpi	r24, 0xFF	; 255
    1250:	09 f4       	brne	.+2      	; 0x1254 <vQueueWaitForMessageRestricted+0x1c>
    1252:	1a a2       	std	Y+34, r1	; 0x22
    1254:	0f 90       	pop	r0
    1256:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1258:	8e 8d       	ldd	r24, Y+30	; 0x1e
    125a:	81 11       	cpse	r24, r1
    125c:	04 c0       	rjmp	.+8      	; 0x1266 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    125e:	ce 01       	movw	r24, r28
    1260:	43 96       	adiw	r24, 0x13	; 19
    1262:	0e 94 61 12 	call	0x24c2	; 0x24c2 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1266:	ce 01       	movw	r24, r28
    1268:	e0 dd       	rcall	.-1088   	; 0xe2a <prvUnlockQueue>
    }
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	08 95       	ret

00001270 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1270:	fc 01       	movw	r30, r24
    1272:	44 81       	ldd	r20, Z+4	; 0x04
    1274:	55 81       	ldd	r21, Z+5	; 0x05
    1276:	22 81       	ldd	r18, Z+2	; 0x02
    1278:	33 81       	ldd	r19, Z+3	; 0x03
    127a:	24 0f       	add	r18, r20
    127c:	35 1f       	adc	r19, r21
    127e:	80 81       	ld	r24, Z
    1280:	91 81       	ldd	r25, Z+1	; 0x01
    1282:	b9 01       	movw	r22, r18
    1284:	68 1b       	sub	r22, r24
    1286:	79 0b       	sbc	r23, r25
    1288:	cb 01       	movw	r24, r22
    128a:	64 17       	cp	r22, r20
    128c:	75 07       	cpc	r23, r21
    128e:	10 f0       	brcs	.+4      	; 0x1294 <prvBytesInBuffer+0x24>
    1290:	84 1b       	sub	r24, r20
    1292:	95 0b       	sbc	r25, r21
    1294:	08 95       	ret

00001296 <prvInitialiseNewStreamBuffer>:
    1296:	0f 93       	push	r16
    1298:	fc 01       	movw	r30, r24
    129a:	8f e0       	ldi	r24, 0x0F	; 15
    129c:	df 01       	movw	r26, r30
    129e:	1d 92       	st	X+, r1
    12a0:	8a 95       	dec	r24
    12a2:	e9 f7       	brne	.-6      	; 0x129e <prvInitialiseNewStreamBuffer+0x8>
    12a4:	75 87       	std	Z+13, r23	; 0x0d
    12a6:	64 87       	std	Z+12, r22	; 0x0c
    12a8:	55 83       	std	Z+5, r21	; 0x05
    12aa:	44 83       	std	Z+4, r20	; 0x04
    12ac:	37 83       	std	Z+7, r19	; 0x07
    12ae:	26 83       	std	Z+6, r18	; 0x06
    12b0:	06 87       	std	Z+14, r16	; 0x0e
    12b2:	0f 91       	pop	r16
    12b4:	08 95       	ret

000012b6 <prvWriteBytesToBuffer>:
    12b6:	af 92       	push	r10
    12b8:	bf 92       	push	r11
    12ba:	cf 92       	push	r12
    12bc:	df 92       	push	r13
    12be:	ef 92       	push	r14
    12c0:	ff 92       	push	r15
    12c2:	0f 93       	push	r16
    12c4:	1f 93       	push	r17
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	6c 01       	movw	r12, r24
    12cc:	5b 01       	movw	r10, r22
    12ce:	7a 01       	movw	r14, r20
    12d0:	fc 01       	movw	r30, r24
    12d2:	c2 81       	ldd	r28, Z+2	; 0x02
    12d4:	d3 81       	ldd	r29, Z+3	; 0x03
    12d6:	04 81       	ldd	r16, Z+4	; 0x04
    12d8:	15 81       	ldd	r17, Z+5	; 0x05
    12da:	0c 1b       	sub	r16, r28
    12dc:	1d 0b       	sbc	r17, r29
    12de:	40 17       	cp	r20, r16
    12e0:	51 07       	cpc	r21, r17
    12e2:	08 f4       	brcc	.+2      	; 0x12e6 <prvWriteBytesToBuffer+0x30>
    12e4:	8a 01       	movw	r16, r20
    12e6:	f6 01       	movw	r30, r12
    12e8:	84 85       	ldd	r24, Z+12	; 0x0c
    12ea:	95 85       	ldd	r25, Z+13	; 0x0d
    12ec:	a8 01       	movw	r20, r16
    12ee:	b5 01       	movw	r22, r10
    12f0:	8c 0f       	add	r24, r28
    12f2:	9d 1f       	adc	r25, r29
    12f4:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <memcpy>
    12f8:	0e 15       	cp	r16, r14
    12fa:	1f 05       	cpc	r17, r15
    12fc:	58 f4       	brcc	.+22     	; 0x1314 <prvWriteBytesToBuffer+0x5e>
    12fe:	a7 01       	movw	r20, r14
    1300:	40 1b       	sub	r20, r16
    1302:	51 0b       	sbc	r21, r17
    1304:	b5 01       	movw	r22, r10
    1306:	60 0f       	add	r22, r16
    1308:	71 1f       	adc	r23, r17
    130a:	f6 01       	movw	r30, r12
    130c:	84 85       	ldd	r24, Z+12	; 0x0c
    130e:	95 85       	ldd	r25, Z+13	; 0x0d
    1310:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <memcpy>
    1314:	ce 01       	movw	r24, r28
    1316:	8e 0d       	add	r24, r14
    1318:	9f 1d       	adc	r25, r15
    131a:	f6 01       	movw	r30, r12
    131c:	24 81       	ldd	r18, Z+4	; 0x04
    131e:	35 81       	ldd	r19, Z+5	; 0x05
    1320:	82 17       	cp	r24, r18
    1322:	93 07       	cpc	r25, r19
    1324:	10 f0       	brcs	.+4      	; 0x132a <prvWriteBytesToBuffer+0x74>
    1326:	82 1b       	sub	r24, r18
    1328:	93 0b       	sbc	r25, r19
    132a:	f6 01       	movw	r30, r12
    132c:	93 83       	std	Z+3, r25	; 0x03
    132e:	82 83       	std	Z+2, r24	; 0x02
    1330:	c7 01       	movw	r24, r14
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	1f 91       	pop	r17
    1338:	0f 91       	pop	r16
    133a:	ff 90       	pop	r15
    133c:	ef 90       	pop	r14
    133e:	df 90       	pop	r13
    1340:	cf 90       	pop	r12
    1342:	bf 90       	pop	r11
    1344:	af 90       	pop	r10
    1346:	08 95       	ret

00001348 <prvWriteMessageToBuffer>:
    1348:	cf 92       	push	r12
    134a:	df 92       	push	r13
    134c:	ef 92       	push	r14
    134e:	ff 92       	push	r15
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	1f 92       	push	r1
    135a:	1f 92       	push	r1
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	7c 01       	movw	r14, r24
    1362:	6b 01       	movw	r12, r22
    1364:	5a 83       	std	Y+2, r21	; 0x02
    1366:	49 83       	std	Y+1, r20	; 0x01
    1368:	21 15       	cp	r18, r1
    136a:	31 05       	cpc	r19, r1
    136c:	c1 f0       	breq	.+48     	; 0x139e <prvWriteMessageToBuffer+0x56>
    136e:	fc 01       	movw	r30, r24
    1370:	86 85       	ldd	r24, Z+14	; 0x0e
    1372:	80 fd       	sbrc	r24, 0
    1374:	08 c0       	rjmp	.+16     	; 0x1386 <prvWriteMessageToBuffer+0x3e>
    1376:	42 17       	cp	r20, r18
    1378:	53 07       	cpc	r21, r19
    137a:	08 f4       	brcc	.+2      	; 0x137e <prvWriteMessageToBuffer+0x36>
    137c:	9a 01       	movw	r18, r20
    137e:	3a 83       	std	Y+2, r19	; 0x02
    1380:	29 83       	std	Y+1, r18	; 0x01
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	0f c0       	rjmp	.+30     	; 0x13a4 <prvWriteMessageToBuffer+0x5c>
    1386:	20 17       	cp	r18, r16
    1388:	31 07       	cpc	r19, r17
    138a:	58 f0       	brcs	.+22     	; 0x13a2 <prvWriteMessageToBuffer+0x5a>
    138c:	42 e0       	ldi	r20, 0x02	; 2
    138e:	50 e0       	ldi	r21, 0x00	; 0
    1390:	be 01       	movw	r22, r28
    1392:	6f 5f       	subi	r22, 0xFF	; 255
    1394:	7f 4f       	sbci	r23, 0xFF	; 255
    1396:	c7 01       	movw	r24, r14
    1398:	8e df       	rcall	.-228    	; 0x12b6 <prvWriteBytesToBuffer>
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	03 c0       	rjmp	.+6      	; 0x13a4 <prvWriteMessageToBuffer+0x5c>
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	01 c0       	rjmp	.+2      	; 0x13a4 <prvWriteMessageToBuffer+0x5c>
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	88 23       	and	r24, r24
    13a6:	31 f0       	breq	.+12     	; 0x13b4 <prvWriteMessageToBuffer+0x6c>
    13a8:	49 81       	ldd	r20, Y+1	; 0x01
    13aa:	5a 81       	ldd	r21, Y+2	; 0x02
    13ac:	b6 01       	movw	r22, r12
    13ae:	c7 01       	movw	r24, r14
    13b0:	82 df       	rcall	.-252    	; 0x12b6 <prvWriteBytesToBuffer>
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <prvWriteMessageToBuffer+0x70>
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	1f 91       	pop	r17
    13c2:	0f 91       	pop	r16
    13c4:	ff 90       	pop	r15
    13c6:	ef 90       	pop	r14
    13c8:	df 90       	pop	r13
    13ca:	cf 90       	pop	r12
    13cc:	08 95       	ret

000013ce <prvReadBytesFromBuffer>:
    13ce:	af 92       	push	r10
    13d0:	bf 92       	push	r11
    13d2:	cf 92       	push	r12
    13d4:	df 92       	push	r13
    13d6:	ef 92       	push	r14
    13d8:	ff 92       	push	r15
    13da:	0f 93       	push	r16
    13dc:	1f 93       	push	r17
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	7c 01       	movw	r14, r24
    13e4:	5b 01       	movw	r10, r22
    13e6:	e9 01       	movw	r28, r18
    13e8:	42 17       	cp	r20, r18
    13ea:	53 07       	cpc	r21, r19
    13ec:	08 f4       	brcc	.+2      	; 0x13f0 <prvReadBytesFromBuffer+0x22>
    13ee:	ea 01       	movw	r28, r20
    13f0:	20 97       	sbiw	r28, 0x00	; 0
    13f2:	81 f1       	breq	.+96     	; 0x1454 <prvReadBytesFromBuffer+0x86>
    13f4:	f7 01       	movw	r30, r14
    13f6:	00 81       	ld	r16, Z
    13f8:	11 81       	ldd	r17, Z+1	; 0x01
    13fa:	84 81       	ldd	r24, Z+4	; 0x04
    13fc:	95 81       	ldd	r25, Z+5	; 0x05
    13fe:	80 1b       	sub	r24, r16
    1400:	91 0b       	sbc	r25, r17
    1402:	6e 01       	movw	r12, r28
    1404:	8c 17       	cp	r24, r28
    1406:	9d 07       	cpc	r25, r29
    1408:	08 f4       	brcc	.+2      	; 0x140c <prvReadBytesFromBuffer+0x3e>
    140a:	6c 01       	movw	r12, r24
    140c:	f7 01       	movw	r30, r14
    140e:	64 85       	ldd	r22, Z+12	; 0x0c
    1410:	75 85       	ldd	r23, Z+13	; 0x0d
    1412:	60 0f       	add	r22, r16
    1414:	71 1f       	adc	r23, r17
    1416:	a6 01       	movw	r20, r12
    1418:	c5 01       	movw	r24, r10
    141a:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <memcpy>
    141e:	cc 16       	cp	r12, r28
    1420:	dd 06       	cpc	r13, r29
    1422:	58 f4       	brcc	.+22     	; 0x143a <prvReadBytesFromBuffer+0x6c>
    1424:	ae 01       	movw	r20, r28
    1426:	4c 19       	sub	r20, r12
    1428:	5d 09       	sbc	r21, r13
    142a:	f7 01       	movw	r30, r14
    142c:	64 85       	ldd	r22, Z+12	; 0x0c
    142e:	75 85       	ldd	r23, Z+13	; 0x0d
    1430:	c5 01       	movw	r24, r10
    1432:	8c 0d       	add	r24, r12
    1434:	9d 1d       	adc	r25, r13
    1436:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <memcpy>
    143a:	0c 0f       	add	r16, r28
    143c:	1d 1f       	adc	r17, r29
    143e:	f7 01       	movw	r30, r14
    1440:	84 81       	ldd	r24, Z+4	; 0x04
    1442:	95 81       	ldd	r25, Z+5	; 0x05
    1444:	08 17       	cp	r16, r24
    1446:	19 07       	cpc	r17, r25
    1448:	10 f0       	brcs	.+4      	; 0x144e <prvReadBytesFromBuffer+0x80>
    144a:	08 1b       	sub	r16, r24
    144c:	19 0b       	sbc	r17, r25
    144e:	f7 01       	movw	r30, r14
    1450:	11 83       	std	Z+1, r17	; 0x01
    1452:	00 83       	st	Z, r16
    1454:	ce 01       	movw	r24, r28
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	1f 91       	pop	r17
    145c:	0f 91       	pop	r16
    145e:	ff 90       	pop	r15
    1460:	ef 90       	pop	r14
    1462:	df 90       	pop	r13
    1464:	cf 90       	pop	r12
    1466:	bf 90       	pop	r11
    1468:	af 90       	pop	r10
    146a:	08 95       	ret

0000146c <prvReadMessageFromBuffer>:
    146c:	6f 92       	push	r6
    146e:	7f 92       	push	r7
    1470:	8f 92       	push	r8
    1472:	9f 92       	push	r9
    1474:	af 92       	push	r10
    1476:	bf 92       	push	r11
    1478:	cf 92       	push	r12
    147a:	df 92       	push	r13
    147c:	ef 92       	push	r14
    147e:	ff 92       	push	r15
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	1f 92       	push	r1
    148a:	1f 92       	push	r1
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	6c 01       	movw	r12, r24
    1492:	4b 01       	movw	r8, r22
    1494:	5a 01       	movw	r10, r20
    1496:	79 01       	movw	r14, r18
    1498:	01 15       	cp	r16, r1
    149a:	11 05       	cpc	r17, r1
    149c:	b1 f0       	breq	.+44     	; 0x14ca <prvReadMessageFromBuffer+0x5e>
    149e:	fc 01       	movw	r30, r24
    14a0:	60 80       	ld	r6, Z
    14a2:	71 80       	ldd	r7, Z+1	; 0x01
    14a4:	a8 01       	movw	r20, r16
    14a6:	be 01       	movw	r22, r28
    14a8:	6f 5f       	subi	r22, 0xFF	; 255
    14aa:	7f 4f       	sbci	r23, 0xFF	; 255
    14ac:	90 df       	rcall	.-224    	; 0x13ce <prvReadBytesFromBuffer>
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	9a 81       	ldd	r25, Y+2	; 0x02
    14b2:	e0 1a       	sub	r14, r16
    14b4:	f1 0a       	sbc	r15, r17
    14b6:	a8 16       	cp	r10, r24
    14b8:	b9 06       	cpc	r11, r25
    14ba:	30 f4       	brcc	.+12     	; 0x14c8 <prvReadMessageFromBuffer+0x5c>
    14bc:	f6 01       	movw	r30, r12
    14be:	71 82       	std	Z+1, r7	; 0x01
    14c0:	60 82       	st	Z, r6
    14c2:	a1 2c       	mov	r10, r1
    14c4:	b1 2c       	mov	r11, r1
    14c6:	01 c0       	rjmp	.+2      	; 0x14ca <prvReadMessageFromBuffer+0x5e>
    14c8:	5c 01       	movw	r10, r24
    14ca:	97 01       	movw	r18, r14
    14cc:	a5 01       	movw	r20, r10
    14ce:	b4 01       	movw	r22, r8
    14d0:	c6 01       	movw	r24, r12
    14d2:	7d df       	rcall	.-262    	; 0x13ce <prvReadBytesFromBuffer>
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	1f 91       	pop	r17
    14de:	0f 91       	pop	r16
    14e0:	ff 90       	pop	r15
    14e2:	ef 90       	pop	r14
    14e4:	df 90       	pop	r13
    14e6:	cf 90       	pop	r12
    14e8:	bf 90       	pop	r11
    14ea:	af 90       	pop	r10
    14ec:	9f 90       	pop	r9
    14ee:	8f 90       	pop	r8
    14f0:	7f 90       	pop	r7
    14f2:	6f 90       	pop	r6
    14f4:	08 95       	ret

000014f6 <xStreamBufferGenericCreate>:
    14f6:	cf 92       	push	r12
    14f8:	df 92       	push	r13
    14fa:	ef 92       	push	r14
    14fc:	ff 92       	push	r15
    14fe:	0f 93       	push	r16
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	ec 01       	movw	r28, r24
    1506:	6b 01       	movw	r12, r22
    1508:	41 30       	cpi	r20, 0x01	; 1
    150a:	11 f4       	brne	.+4      	; 0x1510 <xStreamBufferGenericCreate+0x1a>
    150c:	01 e0       	ldi	r16, 0x01	; 1
    150e:	01 c0       	rjmp	.+2      	; 0x1512 <xStreamBufferGenericCreate+0x1c>
    1510:	00 e0       	ldi	r16, 0x00	; 0
    1512:	c1 14       	cp	r12, r1
    1514:	d1 04       	cpc	r13, r1
    1516:	19 f4       	brne	.+6      	; 0x151e <xStreamBufferGenericCreate+0x28>
    1518:	cc 24       	eor	r12, r12
    151a:	c3 94       	inc	r12
    151c:	d1 2c       	mov	r13, r1
    151e:	ce 01       	movw	r24, r28
    1520:	40 96       	adiw	r24, 0x10	; 16
    1522:	c8 17       	cp	r28, r24
    1524:	d9 07       	cpc	r29, r25
    1526:	20 f4       	brcc	.+8      	; 0x1530 <xStreamBufferGenericCreate+0x3a>
    1528:	21 96       	adiw	r28, 0x01	; 1
    152a:	6f d9       	rcall	.-3362   	; 0x80a <pvPortMalloc>
    152c:	7c 01       	movw	r14, r24
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <xStreamBufferGenericCreate+0x3e>
    1530:	e1 2c       	mov	r14, r1
    1532:	f1 2c       	mov	r15, r1
    1534:	e1 14       	cp	r14, r1
    1536:	f1 04       	cpc	r15, r1
    1538:	39 f0       	breq	.+14     	; 0x1548 <xStreamBufferGenericCreate+0x52>
    153a:	96 01       	movw	r18, r12
    153c:	ae 01       	movw	r20, r28
    153e:	b7 01       	movw	r22, r14
    1540:	61 5f       	subi	r22, 0xF1	; 241
    1542:	7f 4f       	sbci	r23, 0xFF	; 255
    1544:	c7 01       	movw	r24, r14
    1546:	a7 de       	rcall	.-690    	; 0x1296 <prvInitialiseNewStreamBuffer>
    1548:	c7 01       	movw	r24, r14
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	0f 91       	pop	r16
    1550:	ff 90       	pop	r15
    1552:	ef 90       	pop	r14
    1554:	df 90       	pop	r13
    1556:	cf 90       	pop	r12
    1558:	08 95       	ret

0000155a <xStreamBufferReset>:
    155a:	0f 93       	push	r16
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	0f 92       	push	r0
    1562:	fc 01       	movw	r30, r24
    1564:	20 85       	ldd	r18, Z+8	; 0x08
    1566:	31 85       	ldd	r19, Z+9	; 0x09
    1568:	23 2b       	or	r18, r19
    156a:	71 f4       	brne	.+28     	; 0x1588 <xStreamBufferReset+0x2e>
    156c:	22 85       	ldd	r18, Z+10	; 0x0a
    156e:	33 85       	ldd	r19, Z+11	; 0x0b
    1570:	23 2b       	or	r18, r19
    1572:	61 f4       	brne	.+24     	; 0x158c <xStreamBufferReset+0x32>
    1574:	26 81       	ldd	r18, Z+6	; 0x06
    1576:	37 81       	ldd	r19, Z+7	; 0x07
    1578:	44 81       	ldd	r20, Z+4	; 0x04
    157a:	55 81       	ldd	r21, Z+5	; 0x05
    157c:	64 85       	ldd	r22, Z+12	; 0x0c
    157e:	75 85       	ldd	r23, Z+13	; 0x0d
    1580:	06 85       	ldd	r16, Z+14	; 0x0e
    1582:	89 de       	rcall	.-750    	; 0x1296 <prvInitialiseNewStreamBuffer>
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	03 c0       	rjmp	.+6      	; 0x158e <xStreamBufferReset+0x34>
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	01 c0       	rjmp	.+2      	; 0x158e <xStreamBufferReset+0x34>
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	0f 90       	pop	r0
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	0f 91       	pop	r16
    1594:	08 95       	ret

00001596 <xStreamBufferSpacesAvailable>:
    1596:	fc 01       	movw	r30, r24
    1598:	24 81       	ldd	r18, Z+4	; 0x04
    159a:	35 81       	ldd	r19, Z+5	; 0x05
    159c:	80 81       	ld	r24, Z
    159e:	91 81       	ldd	r25, Z+1	; 0x01
    15a0:	82 0f       	add	r24, r18
    15a2:	93 1f       	adc	r25, r19
    15a4:	42 81       	ldd	r20, Z+2	; 0x02
    15a6:	53 81       	ldd	r21, Z+3	; 0x03
    15a8:	84 1b       	sub	r24, r20
    15aa:	95 0b       	sbc	r25, r21
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	82 17       	cp	r24, r18
    15b0:	93 07       	cpc	r25, r19
    15b2:	10 f0       	brcs	.+4      	; 0x15b8 <xStreamBufferSpacesAvailable+0x22>
    15b4:	82 1b       	sub	r24, r18
    15b6:	93 0b       	sbc	r25, r19
    15b8:	08 95       	ret

000015ba <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    15ba:	2f 92       	push	r2
    15bc:	3f 92       	push	r3
    15be:	4f 92       	push	r4
    15c0:	5f 92       	push	r5
    15c2:	6f 92       	push	r6
    15c4:	7f 92       	push	r7
    15c6:	8f 92       	push	r8
    15c8:	9f 92       	push	r9
    15ca:	af 92       	push	r10
    15cc:	bf 92       	push	r11
    15ce:	cf 92       	push	r12
    15d0:	df 92       	push	r13
    15d2:	ef 92       	push	r14
    15d4:	ff 92       	push	r15
    15d6:	0f 93       	push	r16
    15d8:	1f 93       	push	r17
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	2b 97       	sbiw	r28, 0x0b	; 11
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	4c 01       	movw	r8, r24
    15f0:	7b 87       	std	Y+11, r23	; 0x0b
    15f2:	6a 87       	std	Y+10, r22	; 0x0a
    15f4:	1a 01       	movw	r2, r20
    15f6:	0e 83       	std	Y+6, r16	; 0x06
    15f8:	1f 83       	std	Y+7, r17	; 0x07
    15fa:	28 87       	std	Y+8, r18	; 0x08
    15fc:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    15fe:	fc 01       	movw	r30, r24
    1600:	84 81       	ldd	r24, Z+4	; 0x04
    1602:	95 81       	ldd	r25, Z+5	; 0x05
    1604:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1606:	26 85       	ldd	r18, Z+14	; 0x0e
    1608:	20 ff       	sbrs	r18, 0
    160a:	0c c0       	rjmp	.+24     	; 0x1624 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    160c:	2a 01       	movw	r4, r20
    160e:	f2 e0       	ldi	r31, 0x02	; 2
    1610:	4f 0e       	add	r4, r31
    1612:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1614:	84 15       	cp	r24, r4
    1616:	95 05       	cpc	r25, r5
    1618:	58 f4       	brcc	.+22     	; 0x1630 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    161a:	1e 82       	std	Y+6, r1	; 0x06
    161c:	1f 82       	std	Y+7, r1	; 0x07
    161e:	18 86       	std	Y+8, r1	; 0x08
    1620:	19 86       	std	Y+9, r1	; 0x09
    1622:	06 c0       	rjmp	.+12     	; 0x1630 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1624:	84 17       	cp	r24, r20
    1626:	95 07       	cpc	r25, r21
    1628:	10 f0       	brcs	.+4      	; 0x162e <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    162a:	2a 01       	movw	r4, r20
    162c:	01 c0       	rjmp	.+2      	; 0x1630 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    162e:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1630:	8e 81       	ldd	r24, Y+6	; 0x06
    1632:	9f 81       	ldd	r25, Y+7	; 0x07
    1634:	a8 85       	ldd	r26, Y+8	; 0x08
    1636:	b9 85       	ldd	r27, Y+9	; 0x09
    1638:	89 2b       	or	r24, r25
    163a:	8a 2b       	or	r24, r26
    163c:	8b 2b       	or	r24, r27
    163e:	09 f4       	brne	.+2      	; 0x1642 <xStreamBufferSend+0x88>
    1640:	38 c0       	rjmp	.+112    	; 0x16b2 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1642:	ce 01       	movw	r24, r28
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1650:	c4 01       	movw	r24, r8
    1652:	a1 df       	rcall	.-190    	; 0x1596 <xStreamBufferSpacesAvailable>
    1654:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1656:	84 15       	cp	r24, r4
    1658:	95 05       	cpc	r25, r5
    165a:	40 f5       	brcc	.+80     	; 0x16ac <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	0e 94 d5 17 	call	0x2faa	; 0x2faa <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1666:	0e 94 7d 14 	call	0x28fa	; 0x28fa <xTaskGetCurrentTaskHandle>
    166a:	f4 01       	movw	r30, r8
    166c:	93 87       	std	Z+11, r25	; 0x0b
    166e:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1670:	0f 90       	pop	r0
    1672:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1674:	ae 80       	ldd	r10, Y+6	; 0x06
    1676:	bf 80       	ldd	r11, Y+7	; 0x07
    1678:	c8 84       	ldd	r12, Y+8	; 0x08
    167a:	d9 84       	ldd	r13, Y+9	; 0x09
    167c:	e1 2c       	mov	r14, r1
    167e:	f1 2c       	mov	r15, r1
    1680:	00 e0       	ldi	r16, 0x00	; 0
    1682:	10 e0       	ldi	r17, 0x00	; 0
    1684:	98 01       	movw	r18, r16
    1686:	40 e0       	ldi	r20, 0x00	; 0
    1688:	50 e0       	ldi	r21, 0x00	; 0
    168a:	ba 01       	movw	r22, r20
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1692:	f4 01       	movw	r30, r8
    1694:	13 86       	std	Z+11, r1	; 0x0b
    1696:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1698:	be 01       	movw	r22, r28
    169a:	6a 5f       	subi	r22, 0xFA	; 250
    169c:	7f 4f       	sbci	r23, 0xFF	; 255
    169e:	ce 01       	movw	r24, r28
    16a0:	01 96       	adiw	r24, 0x01	; 1
    16a2:	0e 94 13 14 	call	0x2826	; 0x2826 <xTaskCheckForTimeOut>
    16a6:	88 23       	and	r24, r24
    16a8:	81 f2       	breq	.-96     	; 0x164a <xStreamBufferSend+0x90>
    16aa:	05 c0       	rjmp	.+10     	; 0x16b6 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    16ac:	0f 90       	pop	r0
    16ae:	0f be       	out	0x3f, r0	; 63
                    break;
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    16b2:	61 2c       	mov	r6, r1
    16b4:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    16b6:	61 14       	cp	r6, r1
    16b8:	71 04       	cpc	r7, r1
    16ba:	19 f4       	brne	.+6      	; 0x16c2 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    16bc:	c4 01       	movw	r24, r8
    16be:	6b df       	rcall	.-298    	; 0x1596 <xStreamBufferSpacesAvailable>
    16c0:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    16c2:	82 01       	movw	r16, r4
    16c4:	93 01       	movw	r18, r6
    16c6:	a1 01       	movw	r20, r2
    16c8:	6a 85       	ldd	r22, Y+10	; 0x0a
    16ca:	7b 85       	ldd	r23, Y+11	; 0x0b
    16cc:	c4 01       	movw	r24, r8
    16ce:	3c de       	rcall	.-904    	; 0x1348 <prvWriteMessageToBuffer>
    16d0:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    16d2:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    16d4:	e9 f0       	breq	.+58     	; 0x1710 <xStreamBufferSend+0x156>
    16d6:	c4 01       	movw	r24, r8
    16d8:	cb dd       	rcall	.-1130   	; 0x1270 <prvBytesInBuffer>
    16da:	f4 01       	movw	r30, r8
    16dc:	26 81       	ldd	r18, Z+6	; 0x06
    16de:	37 81       	ldd	r19, Z+7	; 0x07
    16e0:	82 17       	cp	r24, r18
    16e2:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    16e4:	a8 f0       	brcs	.+42     	; 0x1710 <xStreamBufferSend+0x156>
    16e6:	8b d3       	rcall	.+1814   	; 0x1dfe <vTaskSuspendAll>
    16e8:	f4 01       	movw	r30, r8
    16ea:	80 85       	ldd	r24, Z+8	; 0x08
    16ec:	91 85       	ldd	r25, Z+9	; 0x09
    16ee:	89 2b       	or	r24, r25
    16f0:	71 f0       	breq	.+28     	; 0x170e <xStreamBufferSend+0x154>
    16f2:	80 85       	ldd	r24, Z+8	; 0x08
    16f4:	91 85       	ldd	r25, Z+9	; 0x09
    16f6:	e1 2c       	mov	r14, r1
    16f8:	f1 2c       	mov	r15, r1
    16fa:	00 e0       	ldi	r16, 0x00	; 0
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	a9 01       	movw	r20, r18
    1702:	60 e0       	ldi	r22, 0x00	; 0
    1704:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <xTaskGenericNotify>
    1708:	f4 01       	movw	r30, r8
    170a:	11 86       	std	Z+9, r1	; 0x09
    170c:	10 86       	std	Z+8, r1	; 0x08
    170e:	b7 d4       	rcall	.+2414   	; 0x207e <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1710:	c6 01       	movw	r24, r12
    1712:	2b 96       	adiw	r28, 0x0b	; 11
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	1f 91       	pop	r17
    1724:	0f 91       	pop	r16
    1726:	ff 90       	pop	r15
    1728:	ef 90       	pop	r14
    172a:	df 90       	pop	r13
    172c:	cf 90       	pop	r12
    172e:	bf 90       	pop	r11
    1730:	af 90       	pop	r10
    1732:	9f 90       	pop	r9
    1734:	8f 90       	pop	r8
    1736:	7f 90       	pop	r7
    1738:	6f 90       	pop	r6
    173a:	5f 90       	pop	r5
    173c:	4f 90       	pop	r4
    173e:	3f 90       	pop	r3
    1740:	2f 90       	pop	r2
    1742:	08 95       	ret

00001744 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1744:	af 92       	push	r10
    1746:	bf 92       	push	r11
    1748:	cf 92       	push	r12
    174a:	df 92       	push	r13
    174c:	ef 92       	push	r14
    174e:	ff 92       	push	r15
    1750:	0f 93       	push	r16
    1752:	1f 93       	push	r17
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	ec 01       	movw	r28, r24
    175a:	7b 01       	movw	r14, r22
    175c:	5a 01       	movw	r10, r20
    175e:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1760:	8e 85       	ldd	r24, Y+14	; 0x0e
    1762:	80 ff       	sbrs	r24, 0
    1764:	04 c0       	rjmp	.+8      	; 0x176e <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1766:	8a 01       	movw	r16, r20
    1768:	0e 5f       	subi	r16, 0xFE	; 254
    176a:	1f 4f       	sbci	r17, 0xFF	; 255
    176c:	01 c0       	rjmp	.+2      	; 0x1770 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    176e:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1770:	ce 01       	movw	r24, r28
    1772:	11 df       	rcall	.-478    	; 0x1596 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1774:	9c 01       	movw	r18, r24
    1776:	a5 01       	movw	r20, r10
    1778:	b7 01       	movw	r22, r14
    177a:	ce 01       	movw	r24, r28
    177c:	e5 dd       	rcall	.-1078   	; 0x1348 <prvWriteMessageToBuffer>
    177e:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1780:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1782:	c1 f0       	breq	.+48     	; 0x17b4 <xStreamBufferSendFromISR+0x70>
    1784:	ce 01       	movw	r24, r28
    1786:	74 dd       	rcall	.-1304   	; 0x1270 <prvBytesInBuffer>
    1788:	2e 81       	ldd	r18, Y+6	; 0x06
    178a:	3f 81       	ldd	r19, Y+7	; 0x07
    178c:	82 17       	cp	r24, r18
    178e:	93 07       	cpc	r25, r19
    1790:	88 f0       	brcs	.+34     	; 0x17b4 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1792:	88 85       	ldd	r24, Y+8	; 0x08
    1794:	99 85       	ldd	r25, Y+9	; 0x09
    1796:	89 2b       	or	r24, r25
    1798:	69 f0       	breq	.+26     	; 0x17b4 <xStreamBufferSendFromISR+0x70>
    179a:	88 85       	ldd	r24, Y+8	; 0x08
    179c:	99 85       	ldd	r25, Y+9	; 0x09
    179e:	e1 2c       	mov	r14, r1
    17a0:	f1 2c       	mov	r15, r1
    17a2:	00 e0       	ldi	r16, 0x00	; 0
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	a9 01       	movw	r20, r18
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <xTaskGenericNotifyFromISR>
    17b0:	19 86       	std	Y+9, r1	; 0x09
    17b2:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    17b4:	c5 01       	movw	r24, r10
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	1f 91       	pop	r17
    17bc:	0f 91       	pop	r16
    17be:	ff 90       	pop	r15
    17c0:	ef 90       	pop	r14
    17c2:	df 90       	pop	r13
    17c4:	cf 90       	pop	r12
    17c6:	bf 90       	pop	r11
    17c8:	af 90       	pop	r10
    17ca:	08 95       	ret

000017cc <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    17cc:	4f 92       	push	r4
    17ce:	5f 92       	push	r5
    17d0:	6f 92       	push	r6
    17d2:	7f 92       	push	r7
    17d4:	8f 92       	push	r8
    17d6:	9f 92       	push	r9
    17d8:	af 92       	push	r10
    17da:	bf 92       	push	r11
    17dc:	cf 92       	push	r12
    17de:	df 92       	push	r13
    17e0:	ef 92       	push	r14
    17e2:	ff 92       	push	r15
    17e4:	0f 93       	push	r16
    17e6:	1f 93       	push	r17
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	ec 01       	movw	r28, r24
    17ee:	2b 01       	movw	r4, r22
    17f0:	3a 01       	movw	r6, r20
    17f2:	58 01       	movw	r10, r16
    17f4:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    17f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    17f8:	80 ff       	sbrs	r24, 0
    17fa:	05 c0       	rjmp	.+10     	; 0x1806 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    17fc:	68 94       	set
    17fe:	88 24       	eor	r8, r8
    1800:	81 f8       	bld	r8, 1
    1802:	91 2c       	mov	r9, r1
    1804:	02 c0       	rjmp	.+4      	; 0x180a <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1806:	81 2c       	mov	r8, r1
    1808:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    180a:	a1 14       	cp	r10, r1
    180c:	b1 04       	cpc	r11, r1
    180e:	c1 04       	cpc	r12, r1
    1810:	d1 04       	cpc	r13, r1
    1812:	41 f1       	breq	.+80     	; 0x1864 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    181a:	ce 01       	movw	r24, r28
    181c:	29 dd       	rcall	.-1454   	; 0x1270 <prvBytesInBuffer>
    181e:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1820:	88 16       	cp	r8, r24
    1822:	99 06       	cpc	r9, r25
    1824:	48 f0       	brcs	.+18     	; 0x1838 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	0e 94 d5 17 	call	0x2faa	; 0x2faa <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1830:	0e 94 7d 14 	call	0x28fa	; 0x28fa <xTaskGetCurrentTaskHandle>
    1834:	99 87       	std	Y+9, r25	; 0x09
    1836:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1838:	0f 90       	pop	r0
    183a:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    183c:	8e 14       	cp	r8, r14
    183e:	9f 04       	cpc	r9, r15
    1840:	a0 f0       	brcs	.+40     	; 0x186a <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1842:	e1 2c       	mov	r14, r1
    1844:	f1 2c       	mov	r15, r1
    1846:	00 e0       	ldi	r16, 0x00	; 0
    1848:	10 e0       	ldi	r17, 0x00	; 0
    184a:	98 01       	movw	r18, r16
    184c:	40 e0       	ldi	r20, 0x00	; 0
    184e:	50 e0       	ldi	r21, 0x00	; 0
    1850:	ba 01       	movw	r22, r20
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1858:	19 86       	std	Y+9, r1	; 0x09
    185a:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    185c:	ce 01       	movw	r24, r28
    185e:	08 dd       	rcall	.-1520   	; 0x1270 <prvBytesInBuffer>
    1860:	7c 01       	movw	r14, r24
    1862:	03 c0       	rjmp	.+6      	; 0x186a <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1864:	ce 01       	movw	r24, r28
    1866:	04 dd       	rcall	.-1528   	; 0x1270 <prvBytesInBuffer>
    1868:	7c 01       	movw	r14, r24
    186a:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    186c:	9f 04       	cpc	r9, r15
    186e:	e8 f4       	brcc	.+58     	; 0x18aa <xStreamBufferReceive+0xde>
    1870:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1872:	97 01       	movw	r18, r14
    1874:	a3 01       	movw	r20, r6
    1876:	b2 01       	movw	r22, r4
    1878:	ce 01       	movw	r24, r28
    187a:	f8 dd       	rcall	.-1040   	; 0x146c <prvReadMessageFromBuffer>
    187c:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    187e:	89 2b       	or	r24, r25
    1880:	b1 f0       	breq	.+44     	; 0x18ae <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1882:	bd d2       	rcall	.+1402   	; 0x1dfe <vTaskSuspendAll>
    1884:	8a 85       	ldd	r24, Y+10	; 0x0a
    1886:	9b 85       	ldd	r25, Y+11	; 0x0b
    1888:	89 2b       	or	r24, r25
    188a:	69 f0       	breq	.+26     	; 0x18a6 <xStreamBufferReceive+0xda>
    188c:	8a 85       	ldd	r24, Y+10	; 0x0a
    188e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1890:	e1 2c       	mov	r14, r1
    1892:	f1 2c       	mov	r15, r1
    1894:	00 e0       	ldi	r16, 0x00	; 0
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	a9 01       	movw	r20, r18
    189c:	60 e0       	ldi	r22, 0x00	; 0
    189e:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <xTaskGenericNotify>
    18a2:	1b 86       	std	Y+11, r1	; 0x0b
    18a4:	1a 86       	std	Y+10, r1	; 0x0a
    18a6:	eb d3       	rcall	.+2006   	; 0x207e <xTaskResumeAll>
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <xStreamBufferReceive+0xe2>
    18aa:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    18ac:	d1 2c       	mov	r13, r1
    18ae:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	1f 91       	pop	r17
    18b6:	0f 91       	pop	r16
    18b8:	ff 90       	pop	r15
    18ba:	ef 90       	pop	r14
    18bc:	df 90       	pop	r13
    18be:	cf 90       	pop	r12
    18c0:	bf 90       	pop	r11
    18c2:	af 90       	pop	r10
    18c4:	9f 90       	pop	r9
    18c6:	8f 90       	pop	r8
    18c8:	7f 90       	pop	r7
    18ca:	6f 90       	pop	r6
    18cc:	5f 90       	pop	r5
    18ce:	4f 90       	pop	r4
    18d0:	08 95       	ret

000018d2 <prvResetNextTaskUnblockTime>:
    18d2:	e0 91 fd 11 	lds	r30, 0x11FD	; 0x8011fd <pxDelayedTaskList>
    18d6:	f0 91 fe 11 	lds	r31, 0x11FE	; 0x8011fe <pxDelayedTaskList+0x1>
    18da:	80 81       	ld	r24, Z
    18dc:	81 11       	cpse	r24, r1
    18de:	0c c0       	rjmp	.+24     	; 0x18f8 <prvResetNextTaskUnblockTime+0x26>
    18e0:	8f ef       	ldi	r24, 0xFF	; 255
    18e2:	9f ef       	ldi	r25, 0xFF	; 255
    18e4:	dc 01       	movw	r26, r24
    18e6:	80 93 c7 11 	sts	0x11C7, r24	; 0x8011c7 <xNextTaskUnblockTime>
    18ea:	90 93 c8 11 	sts	0x11C8, r25	; 0x8011c8 <xNextTaskUnblockTime+0x1>
    18ee:	a0 93 c9 11 	sts	0x11C9, r26	; 0x8011c9 <xNextTaskUnblockTime+0x2>
    18f2:	b0 93 ca 11 	sts	0x11CA, r27	; 0x8011ca <xNextTaskUnblockTime+0x3>
    18f6:	08 95       	ret
    18f8:	e0 91 fd 11 	lds	r30, 0x11FD	; 0x8011fd <pxDelayedTaskList>
    18fc:	f0 91 fe 11 	lds	r31, 0x11FE	; 0x8011fe <pxDelayedTaskList+0x1>
    1900:	07 80       	ldd	r0, Z+7	; 0x07
    1902:	f0 85       	ldd	r31, Z+8	; 0x08
    1904:	e0 2d       	mov	r30, r0
    1906:	80 81       	ld	r24, Z
    1908:	91 81       	ldd	r25, Z+1	; 0x01
    190a:	a2 81       	ldd	r26, Z+2	; 0x02
    190c:	b3 81       	ldd	r27, Z+3	; 0x03
    190e:	80 93 c7 11 	sts	0x11C7, r24	; 0x8011c7 <xNextTaskUnblockTime>
    1912:	90 93 c8 11 	sts	0x11C8, r25	; 0x8011c8 <xNextTaskUnblockTime+0x1>
    1916:	a0 93 c9 11 	sts	0x11C9, r26	; 0x8011c9 <xNextTaskUnblockTime+0x2>
    191a:	b0 93 ca 11 	sts	0x11CA, r27	; 0x8011ca <xNextTaskUnblockTime+0x3>
    191e:	08 95       	ret

00001920 <prvDeleteTCB>:
    1920:	cf 93       	push	r28
    1922:	df 93       	push	r29
    1924:	ec 01       	movw	r28, r24
    1926:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1928:	9c 8d       	ldd	r25, Y+28	; 0x1c
    192a:	18 d8       	rcall	.-4048   	; 0x95c <vPortFree>
    192c:	ce 01       	movw	r24, r28
    192e:	16 d8       	rcall	.-4052   	; 0x95c <vPortFree>
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	08 95       	ret

00001936 <prvInitialiseNewTask>:
    1936:	4f 92       	push	r4
    1938:	5f 92       	push	r5
    193a:	6f 92       	push	r6
    193c:	7f 92       	push	r7
    193e:	8f 92       	push	r8
    1940:	9f 92       	push	r9
    1942:	af 92       	push	r10
    1944:	bf 92       	push	r11
    1946:	cf 92       	push	r12
    1948:	df 92       	push	r13
    194a:	ef 92       	push	r14
    194c:	ff 92       	push	r15
    194e:	0f 93       	push	r16
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	2c 01       	movw	r4, r24
    1956:	5b 01       	movw	r10, r22
    1958:	4a 01       	movw	r8, r20
    195a:	39 01       	movw	r6, r18
    195c:	e6 01       	movw	r28, r12
    195e:	65 ea       	ldi	r22, 0xA5	; 165
    1960:	70 e0       	ldi	r23, 0x00	; 0
    1962:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1964:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1966:	0e 94 fd 2d 	call	0x5bfa	; 0x5bfa <memset>
    196a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    196c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    196e:	21 e0       	ldi	r18, 0x01	; 1
    1970:	82 1a       	sub	r8, r18
    1972:	91 08       	sbc	r9, r1
    1974:	88 0e       	add	r8, r24
    1976:	99 1e       	adc	r9, r25
    1978:	a1 14       	cp	r10, r1
    197a:	b1 04       	cpc	r11, r1
    197c:	89 f4       	brne	.+34     	; 0x19a0 <prvInitialiseNewTask+0x6a>
    197e:	15 c0       	rjmp	.+42     	; 0x19aa <prvInitialiseNewTask+0x74>
    1980:	82 2f       	mov	r24, r18
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	f5 01       	movw	r30, r10
    1986:	e8 0f       	add	r30, r24
    1988:	f9 1f       	adc	r31, r25
    198a:	30 81       	ld	r19, Z
    198c:	de 01       	movw	r26, r28
    198e:	a8 0f       	add	r26, r24
    1990:	b9 1f       	adc	r27, r25
    1992:	5d 96       	adiw	r26, 0x1d	; 29
    1994:	3c 93       	st	X, r19
    1996:	80 81       	ld	r24, Z
    1998:	88 23       	and	r24, r24
    199a:	29 f0       	breq	.+10     	; 0x19a6 <prvInitialiseNewTask+0x70>
    199c:	2f 5f       	subi	r18, 0xFF	; 255
    199e:	01 c0       	rjmp	.+2      	; 0x19a2 <prvInitialiseNewTask+0x6c>
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	20 31       	cpi	r18, 0x10	; 16
    19a4:	68 f3       	brcs	.-38     	; 0x1980 <prvInitialiseNewTask+0x4a>
    19a6:	1c a6       	std	Y+44, r1	; 0x2c
    19a8:	01 c0       	rjmp	.+2      	; 0x19ac <prvInitialiseNewTask+0x76>
    19aa:	1d 8e       	std	Y+29, r1	; 0x1d
    19ac:	0a 30       	cpi	r16, 0x0A	; 10
    19ae:	08 f0       	brcs	.+2      	; 0x19b2 <prvInitialiseNewTask+0x7c>
    19b0:	09 e0       	ldi	r16, 0x09	; 9
    19b2:	0a 8f       	std	Y+26, r16	; 0x1a
    19b4:	0d a7       	std	Y+45, r16	; 0x2d
    19b6:	1e a6       	std	Y+46, r1	; 0x2e
    19b8:	ce 01       	movw	r24, r28
    19ba:	02 96       	adiw	r24, 0x02	; 2
    19bc:	1d d8       	rcall	.-4038   	; 0x9f8 <vListInitialiseItem>
    19be:	ce 01       	movw	r24, r28
    19c0:	0e 96       	adiw	r24, 0x0e	; 14
    19c2:	1a d8       	rcall	.-4044   	; 0x9f8 <vListInitialiseItem>
    19c4:	db 87       	std	Y+11, r29	; 0x0b
    19c6:	ca 87       	std	Y+10, r28	; 0x0a
    19c8:	8a e0       	ldi	r24, 0x0A	; 10
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	a0 e0       	ldi	r26, 0x00	; 0
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	80 1b       	sub	r24, r16
    19d2:	91 09       	sbc	r25, r1
    19d4:	a1 09       	sbc	r26, r1
    19d6:	b1 09       	sbc	r27, r1
    19d8:	8e 87       	std	Y+14, r24	; 0x0e
    19da:	9f 87       	std	Y+15, r25	; 0x0f
    19dc:	a8 8b       	std	Y+16, r26	; 0x10
    19de:	b9 8b       	std	Y+17, r27	; 0x11
    19e0:	df 8b       	std	Y+23, r29	; 0x17
    19e2:	ce 8b       	std	Y+22, r28	; 0x16
    19e4:	84 e0       	ldi	r24, 0x04	; 4
    19e6:	fe 01       	movw	r30, r28
    19e8:	bf 96       	adiw	r30, 0x2f	; 47
    19ea:	df 01       	movw	r26, r30
    19ec:	1d 92       	st	X+, r1
    19ee:	8a 95       	dec	r24
    19f0:	e9 f7       	brne	.-6      	; 0x19ec <prvInitialiseNewTask+0xb6>
    19f2:	1b aa       	std	Y+51, r1	; 0x33
    19f4:	a3 01       	movw	r20, r6
    19f6:	b2 01       	movw	r22, r4
    19f8:	c4 01       	movw	r24, r8
    19fa:	72 d8       	rcall	.-3868   	; 0xae0 <pxPortInitialiseStack>
    19fc:	99 83       	std	Y+1, r25	; 0x01
    19fe:	88 83       	st	Y, r24
    1a00:	e1 14       	cp	r14, r1
    1a02:	f1 04       	cpc	r15, r1
    1a04:	19 f0       	breq	.+6      	; 0x1a0c <prvInitialiseNewTask+0xd6>
    1a06:	f7 01       	movw	r30, r14
    1a08:	d1 83       	std	Z+1, r29	; 0x01
    1a0a:	c0 83       	st	Z, r28
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	0f 91       	pop	r16
    1a12:	ff 90       	pop	r15
    1a14:	ef 90       	pop	r14
    1a16:	df 90       	pop	r13
    1a18:	cf 90       	pop	r12
    1a1a:	bf 90       	pop	r11
    1a1c:	af 90       	pop	r10
    1a1e:	9f 90       	pop	r9
    1a20:	8f 90       	pop	r8
    1a22:	7f 90       	pop	r7
    1a24:	6f 90       	pop	r6
    1a26:	5f 90       	pop	r5
    1a28:	4f 90       	pop	r4
    1a2a:	08 95       	ret

00001a2c <prvInitialiseTaskLists>:
    1a2c:	cf 93       	push	r28
    1a2e:	c0 e0       	ldi	r28, 0x00	; 0
    1a30:	09 c0       	rjmp	.+18     	; 0x1a44 <prvInitialiseTaskLists+0x18>
    1a32:	2b e0       	ldi	r18, 0x0B	; 11
    1a34:	c2 9f       	mul	r28, r18
    1a36:	c0 01       	movw	r24, r0
    1a38:	11 24       	eor	r1, r1
    1a3a:	8b 5e       	subi	r24, 0xEB	; 235
    1a3c:	9d 4e       	sbci	r25, 0xED	; 237
    1a3e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <vListInitialise>
    1a42:	cf 5f       	subi	r28, 0xFF	; 255
    1a44:	ca 30       	cpi	r28, 0x0A	; 10
    1a46:	a8 f3       	brcs	.-22     	; 0x1a32 <prvInitialiseTaskLists+0x6>
    1a48:	8a e0       	ldi	r24, 0x0A	; 10
    1a4a:	92 e1       	ldi	r25, 0x12	; 18
    1a4c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <vListInitialise>
    1a50:	8f ef       	ldi	r24, 0xFF	; 255
    1a52:	91 e1       	ldi	r25, 0x11	; 17
    1a54:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <vListInitialise>
    1a58:	80 ef       	ldi	r24, 0xF0	; 240
    1a5a:	91 e1       	ldi	r25, 0x11	; 17
    1a5c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <vListInitialise>
    1a60:	85 ee       	ldi	r24, 0xE5	; 229
    1a62:	91 e1       	ldi	r25, 0x11	; 17
    1a64:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <vListInitialise>
    1a68:	89 ed       	ldi	r24, 0xD9	; 217
    1a6a:	91 e1       	ldi	r25, 0x11	; 17
    1a6c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <vListInitialise>
    1a70:	8a e0       	ldi	r24, 0x0A	; 10
    1a72:	92 e1       	ldi	r25, 0x12	; 18
    1a74:	90 93 fe 11 	sts	0x11FE, r25	; 0x8011fe <pxDelayedTaskList+0x1>
    1a78:	80 93 fd 11 	sts	0x11FD, r24	; 0x8011fd <pxDelayedTaskList>
    1a7c:	8f ef       	ldi	r24, 0xFF	; 255
    1a7e:	91 e1       	ldi	r25, 0x11	; 17
    1a80:	90 93 fc 11 	sts	0x11FC, r25	; 0x8011fc <pxOverflowDelayedTaskList+0x1>
    1a84:	80 93 fb 11 	sts	0x11FB, r24	; 0x8011fb <pxOverflowDelayedTaskList>
    1a88:	cf 91       	pop	r28
    1a8a:	08 95       	ret

00001a8c <prvAddNewTaskToReadyList>:
    1a8c:	cf 93       	push	r28
    1a8e:	df 93       	push	r29
    1a90:	ec 01       	movw	r28, r24
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	f8 94       	cli
    1a96:	0f 92       	push	r0
    1a98:	80 91 d8 11 	lds	r24, 0x11D8	; 0x8011d8 <uxCurrentNumberOfTasks>
    1a9c:	8f 5f       	subi	r24, 0xFF	; 255
    1a9e:	80 93 d8 11 	sts	0x11D8, r24	; 0x8011d8 <uxCurrentNumberOfTasks>
    1aa2:	80 91 83 12 	lds	r24, 0x1283	; 0x801283 <pxCurrentTCB>
    1aa6:	90 91 84 12 	lds	r25, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    1aaa:	89 2b       	or	r24, r25
    1aac:	51 f4       	brne	.+20     	; 0x1ac2 <prvAddNewTaskToReadyList+0x36>
    1aae:	d0 93 84 12 	sts	0x1284, r29	; 0x801284 <pxCurrentTCB+0x1>
    1ab2:	c0 93 83 12 	sts	0x1283, r28	; 0x801283 <pxCurrentTCB>
    1ab6:	80 91 d8 11 	lds	r24, 0x11D8	; 0x8011d8 <uxCurrentNumberOfTasks>
    1aba:	81 30       	cpi	r24, 0x01	; 1
    1abc:	91 f4       	brne	.+36     	; 0x1ae2 <prvAddNewTaskToReadyList+0x56>
    1abe:	b6 df       	rcall	.-148    	; 0x1a2c <prvInitialiseTaskLists>
    1ac0:	10 c0       	rjmp	.+32     	; 0x1ae2 <prvAddNewTaskToReadyList+0x56>
    1ac2:	80 91 d2 11 	lds	r24, 0x11D2	; 0x8011d2 <xSchedulerRunning>
    1ac6:	81 11       	cpse	r24, r1
    1ac8:	0c c0       	rjmp	.+24     	; 0x1ae2 <prvAddNewTaskToReadyList+0x56>
    1aca:	e0 91 83 12 	lds	r30, 0x1283	; 0x801283 <pxCurrentTCB>
    1ace:	f0 91 84 12 	lds	r31, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    1ad2:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ad4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ad6:	89 17       	cp	r24, r25
    1ad8:	20 f0       	brcs	.+8      	; 0x1ae2 <prvAddNewTaskToReadyList+0x56>
    1ada:	d0 93 84 12 	sts	0x1284, r29	; 0x801284 <pxCurrentTCB+0x1>
    1ade:	c0 93 83 12 	sts	0x1283, r28	; 0x801283 <pxCurrentTCB>
    1ae2:	80 91 cb 11 	lds	r24, 0x11CB	; 0x8011cb <uxTaskNumber>
    1ae6:	8f 5f       	subi	r24, 0xFF	; 255
    1ae8:	80 93 cb 11 	sts	0x11CB, r24	; 0x8011cb <uxTaskNumber>
    1aec:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1aee:	80 91 d3 11 	lds	r24, 0x11D3	; 0x8011d3 <uxTopReadyPriority>
    1af2:	8e 17       	cp	r24, r30
    1af4:	10 f4       	brcc	.+4      	; 0x1afa <prvAddNewTaskToReadyList+0x6e>
    1af6:	e0 93 d3 11 	sts	0x11D3, r30	; 0x8011d3 <uxTopReadyPriority>
    1afa:	8b e0       	ldi	r24, 0x0B	; 11
    1afc:	8e 9f       	mul	r24, r30
    1afe:	f0 01       	movw	r30, r0
    1b00:	11 24       	eor	r1, r1
    1b02:	eb 5e       	subi	r30, 0xEB	; 235
    1b04:	fd 4e       	sbci	r31, 0xED	; 237
    1b06:	01 80       	ldd	r0, Z+1	; 0x01
    1b08:	f2 81       	ldd	r31, Z+2	; 0x02
    1b0a:	e0 2d       	mov	r30, r0
    1b0c:	ff 83       	std	Y+7, r31	; 0x07
    1b0e:	ee 83       	std	Y+6, r30	; 0x06
    1b10:	26 81       	ldd	r18, Z+6	; 0x06
    1b12:	37 81       	ldd	r19, Z+7	; 0x07
    1b14:	39 87       	std	Y+9, r19	; 0x09
    1b16:	28 87       	std	Y+8, r18	; 0x08
    1b18:	a6 81       	ldd	r26, Z+6	; 0x06
    1b1a:	b7 81       	ldd	r27, Z+7	; 0x07
    1b1c:	9e 01       	movw	r18, r28
    1b1e:	2e 5f       	subi	r18, 0xFE	; 254
    1b20:	3f 4f       	sbci	r19, 0xFF	; 255
    1b22:	15 96       	adiw	r26, 0x05	; 5
    1b24:	3c 93       	st	X, r19
    1b26:	2e 93       	st	-X, r18
    1b28:	14 97       	sbiw	r26, 0x04	; 4
    1b2a:	37 83       	std	Z+7, r19	; 0x07
    1b2c:	26 83       	std	Z+6, r18	; 0x06
    1b2e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1b30:	8e 9f       	mul	r24, r30
    1b32:	f0 01       	movw	r30, r0
    1b34:	11 24       	eor	r1, r1
    1b36:	eb 5e       	subi	r30, 0xEB	; 235
    1b38:	fd 4e       	sbci	r31, 0xED	; 237
    1b3a:	fd 87       	std	Y+13, r31	; 0x0d
    1b3c:	ec 87       	std	Y+12, r30	; 0x0c
    1b3e:	80 81       	ld	r24, Z
    1b40:	8f 5f       	subi	r24, 0xFF	; 255
    1b42:	80 83       	st	Z, r24
    1b44:	0f 90       	pop	r0
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	80 91 d2 11 	lds	r24, 0x11D2	; 0x8011d2 <xSchedulerRunning>
    1b4c:	88 23       	and	r24, r24
    1b4e:	49 f0       	breq	.+18     	; 0x1b62 <prvAddNewTaskToReadyList+0xd6>
    1b50:	e0 91 83 12 	lds	r30, 0x1283	; 0x801283 <pxCurrentTCB>
    1b54:	f0 91 84 12 	lds	r31, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    1b58:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b5a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b5c:	98 17       	cp	r25, r24
    1b5e:	08 f4       	brcc	.+2      	; 0x1b62 <prvAddNewTaskToReadyList+0xd6>
    1b60:	08 d8       	rcall	.-4080   	; 0xb72 <vPortYield>
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	08 95       	ret

00001b68 <prvCheckTasksWaitingTermination>:
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	1b c0       	rjmp	.+54     	; 0x1ba4 <prvCheckTasksWaitingTermination+0x3c>
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	0f 92       	push	r0
    1b74:	e0 91 ec 11 	lds	r30, 0x11EC	; 0x8011ec <xTasksWaitingTermination+0x7>
    1b78:	f0 91 ed 11 	lds	r31, 0x11ED	; 0x8011ed <xTasksWaitingTermination+0x8>
    1b7c:	c0 85       	ldd	r28, Z+8	; 0x08
    1b7e:	d1 85       	ldd	r29, Z+9	; 0x09
    1b80:	ce 01       	movw	r24, r28
    1b82:	02 96       	adiw	r24, 0x02	; 2
    1b84:	0e 94 3d 05 	call	0xa7a	; 0xa7a <uxListRemove>
    1b88:	80 91 d8 11 	lds	r24, 0x11D8	; 0x8011d8 <uxCurrentNumberOfTasks>
    1b8c:	81 50       	subi	r24, 0x01	; 1
    1b8e:	80 93 d8 11 	sts	0x11D8, r24	; 0x8011d8 <uxCurrentNumberOfTasks>
    1b92:	80 91 e4 11 	lds	r24, 0x11E4	; 0x8011e4 <uxDeletedTasksWaitingCleanUp>
    1b96:	81 50       	subi	r24, 0x01	; 1
    1b98:	80 93 e4 11 	sts	0x11E4, r24	; 0x8011e4 <uxDeletedTasksWaitingCleanUp>
    1b9c:	0f 90       	pop	r0
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	ce 01       	movw	r24, r28
    1ba2:	be de       	rcall	.-644    	; 0x1920 <prvDeleteTCB>
    1ba4:	80 91 e4 11 	lds	r24, 0x11E4	; 0x8011e4 <uxDeletedTasksWaitingCleanUp>
    1ba8:	81 11       	cpse	r24, r1
    1baa:	e1 cf       	rjmp	.-62     	; 0x1b6e <prvCheckTasksWaitingTermination+0x6>
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	08 95       	ret

00001bb2 <prvAddCurrentTaskToDelayedList>:
    1bb2:	8f 92       	push	r8
    1bb4:	9f 92       	push	r9
    1bb6:	af 92       	push	r10
    1bb8:	bf 92       	push	r11
    1bba:	cf 92       	push	r12
    1bbc:	df 92       	push	r13
    1bbe:	ef 92       	push	r14
    1bc0:	ff 92       	push	r15
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	6b 01       	movw	r12, r22
    1bc8:	7c 01       	movw	r14, r24
    1bca:	c4 2f       	mov	r28, r20
    1bcc:	80 90 d4 11 	lds	r8, 0x11D4	; 0x8011d4 <xTickCount>
    1bd0:	90 90 d5 11 	lds	r9, 0x11D5	; 0x8011d5 <xTickCount+0x1>
    1bd4:	a0 90 d6 11 	lds	r10, 0x11D6	; 0x8011d6 <xTickCount+0x2>
    1bd8:	b0 90 d7 11 	lds	r11, 0x11D7	; 0x8011d7 <xTickCount+0x3>
    1bdc:	80 91 83 12 	lds	r24, 0x1283	; 0x801283 <pxCurrentTCB>
    1be0:	90 91 84 12 	lds	r25, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    1be4:	02 96       	adiw	r24, 0x02	; 2
    1be6:	0e 94 3d 05 	call	0xa7a	; 0xa7a <uxListRemove>
    1bea:	8f ef       	ldi	r24, 0xFF	; 255
    1bec:	c8 16       	cp	r12, r24
    1bee:	d8 06       	cpc	r13, r24
    1bf0:	e8 06       	cpc	r14, r24
    1bf2:	f8 06       	cpc	r15, r24
    1bf4:	b1 f5       	brne	.+108    	; 0x1c62 <prvAddCurrentTaskToDelayedList+0xb0>
    1bf6:	cc 23       	and	r28, r28
    1bf8:	a1 f1       	breq	.+104    	; 0x1c62 <prvAddCurrentTaskToDelayedList+0xb0>
    1bfa:	e9 ed       	ldi	r30, 0xD9	; 217
    1bfc:	f1 e1       	ldi	r31, 0x11	; 17
    1bfe:	a1 81       	ldd	r26, Z+1	; 0x01
    1c00:	b2 81       	ldd	r27, Z+2	; 0x02
    1c02:	c0 91 83 12 	lds	r28, 0x1283	; 0x801283 <pxCurrentTCB>
    1c06:	d0 91 84 12 	lds	r29, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    1c0a:	bf 83       	std	Y+7, r27	; 0x07
    1c0c:	ae 83       	std	Y+6, r26	; 0x06
    1c0e:	c0 91 83 12 	lds	r28, 0x1283	; 0x801283 <pxCurrentTCB>
    1c12:	d0 91 84 12 	lds	r29, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    1c16:	16 96       	adiw	r26, 0x06	; 6
    1c18:	8d 91       	ld	r24, X+
    1c1a:	9c 91       	ld	r25, X
    1c1c:	17 97       	sbiw	r26, 0x07	; 7
    1c1e:	99 87       	std	Y+9, r25	; 0x09
    1c20:	88 87       	std	Y+8, r24	; 0x08
    1c22:	16 96       	adiw	r26, 0x06	; 6
    1c24:	cd 91       	ld	r28, X+
    1c26:	dc 91       	ld	r29, X
    1c28:	17 97       	sbiw	r26, 0x07	; 7
    1c2a:	80 91 83 12 	lds	r24, 0x1283	; 0x801283 <pxCurrentTCB>
    1c2e:	90 91 84 12 	lds	r25, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    1c32:	02 96       	adiw	r24, 0x02	; 2
    1c34:	9d 83       	std	Y+5, r25	; 0x05
    1c36:	8c 83       	std	Y+4, r24	; 0x04
    1c38:	80 91 83 12 	lds	r24, 0x1283	; 0x801283 <pxCurrentTCB>
    1c3c:	90 91 84 12 	lds	r25, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    1c40:	02 96       	adiw	r24, 0x02	; 2
    1c42:	17 96       	adiw	r26, 0x07	; 7
    1c44:	9c 93       	st	X, r25
    1c46:	8e 93       	st	-X, r24
    1c48:	16 97       	sbiw	r26, 0x06	; 6
    1c4a:	a0 91 83 12 	lds	r26, 0x1283	; 0x801283 <pxCurrentTCB>
    1c4e:	b0 91 84 12 	lds	r27, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    1c52:	1d 96       	adiw	r26, 0x0d	; 13
    1c54:	fc 93       	st	X, r31
    1c56:	ee 93       	st	-X, r30
    1c58:	1c 97       	sbiw	r26, 0x0c	; 12
    1c5a:	80 81       	ld	r24, Z
    1c5c:	8f 5f       	subi	r24, 0xFF	; 255
    1c5e:	80 83       	st	Z, r24
    1c60:	3f c0       	rjmp	.+126    	; 0x1ce0 <prvAddCurrentTaskToDelayedList+0x12e>
    1c62:	c8 0c       	add	r12, r8
    1c64:	d9 1c       	adc	r13, r9
    1c66:	ea 1c       	adc	r14, r10
    1c68:	fb 1c       	adc	r15, r11
    1c6a:	e0 91 83 12 	lds	r30, 0x1283	; 0x801283 <pxCurrentTCB>
    1c6e:	f0 91 84 12 	lds	r31, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    1c72:	c2 82       	std	Z+2, r12	; 0x02
    1c74:	d3 82       	std	Z+3, r13	; 0x03
    1c76:	e4 82       	std	Z+4, r14	; 0x04
    1c78:	f5 82       	std	Z+5, r15	; 0x05
    1c7a:	c8 14       	cp	r12, r8
    1c7c:	d9 04       	cpc	r13, r9
    1c7e:	ea 04       	cpc	r14, r10
    1c80:	fb 04       	cpc	r15, r11
    1c82:	68 f4       	brcc	.+26     	; 0x1c9e <prvAddCurrentTaskToDelayedList+0xec>
    1c84:	60 91 83 12 	lds	r22, 0x1283	; 0x801283 <pxCurrentTCB>
    1c88:	70 91 84 12 	lds	r23, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    1c8c:	80 91 fb 11 	lds	r24, 0x11FB	; 0x8011fb <pxOverflowDelayedTaskList>
    1c90:	90 91 fc 11 	lds	r25, 0x11FC	; 0x8011fc <pxOverflowDelayedTaskList+0x1>
    1c94:	6e 5f       	subi	r22, 0xFE	; 254
    1c96:	7f 4f       	sbci	r23, 0xFF	; 255
    1c98:	0e 94 00 05 	call	0xa00	; 0xa00 <vListInsert>
    1c9c:	21 c0       	rjmp	.+66     	; 0x1ce0 <prvAddCurrentTaskToDelayedList+0x12e>
    1c9e:	60 91 83 12 	lds	r22, 0x1283	; 0x801283 <pxCurrentTCB>
    1ca2:	70 91 84 12 	lds	r23, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    1ca6:	80 91 fd 11 	lds	r24, 0x11FD	; 0x8011fd <pxDelayedTaskList>
    1caa:	90 91 fe 11 	lds	r25, 0x11FE	; 0x8011fe <pxDelayedTaskList+0x1>
    1cae:	6e 5f       	subi	r22, 0xFE	; 254
    1cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb2:	0e 94 00 05 	call	0xa00	; 0xa00 <vListInsert>
    1cb6:	80 91 c7 11 	lds	r24, 0x11C7	; 0x8011c7 <xNextTaskUnblockTime>
    1cba:	90 91 c8 11 	lds	r25, 0x11C8	; 0x8011c8 <xNextTaskUnblockTime+0x1>
    1cbe:	a0 91 c9 11 	lds	r26, 0x11C9	; 0x8011c9 <xNextTaskUnblockTime+0x2>
    1cc2:	b0 91 ca 11 	lds	r27, 0x11CA	; 0x8011ca <xNextTaskUnblockTime+0x3>
    1cc6:	c8 16       	cp	r12, r24
    1cc8:	d9 06       	cpc	r13, r25
    1cca:	ea 06       	cpc	r14, r26
    1ccc:	fb 06       	cpc	r15, r27
    1cce:	40 f4       	brcc	.+16     	; 0x1ce0 <prvAddCurrentTaskToDelayedList+0x12e>
    1cd0:	c0 92 c7 11 	sts	0x11C7, r12	; 0x8011c7 <xNextTaskUnblockTime>
    1cd4:	d0 92 c8 11 	sts	0x11C8, r13	; 0x8011c8 <xNextTaskUnblockTime+0x1>
    1cd8:	e0 92 c9 11 	sts	0x11C9, r14	; 0x8011c9 <xNextTaskUnblockTime+0x2>
    1cdc:	f0 92 ca 11 	sts	0x11CA, r15	; 0x8011ca <xNextTaskUnblockTime+0x3>
    1ce0:	df 91       	pop	r29
    1ce2:	cf 91       	pop	r28
    1ce4:	ff 90       	pop	r15
    1ce6:	ef 90       	pop	r14
    1ce8:	df 90       	pop	r13
    1cea:	cf 90       	pop	r12
    1cec:	bf 90       	pop	r11
    1cee:	af 90       	pop	r10
    1cf0:	9f 90       	pop	r9
    1cf2:	8f 90       	pop	r8
    1cf4:	08 95       	ret

00001cf6 <xTaskCreate>:
    1cf6:	2f 92       	push	r2
    1cf8:	3f 92       	push	r3
    1cfa:	4f 92       	push	r4
    1cfc:	5f 92       	push	r5
    1cfe:	6f 92       	push	r6
    1d00:	7f 92       	push	r7
    1d02:	8f 92       	push	r8
    1d04:	9f 92       	push	r9
    1d06:	af 92       	push	r10
    1d08:	bf 92       	push	r11
    1d0a:	cf 92       	push	r12
    1d0c:	df 92       	push	r13
    1d0e:	ef 92       	push	r14
    1d10:	ff 92       	push	r15
    1d12:	0f 93       	push	r16
    1d14:	cf 93       	push	r28
    1d16:	df 93       	push	r29
    1d18:	3c 01       	movw	r6, r24
    1d1a:	1b 01       	movw	r2, r22
    1d1c:	4a 01       	movw	r8, r20
    1d1e:	29 01       	movw	r4, r18
    1d20:	ca 01       	movw	r24, r20
    1d22:	0e 94 05 04 	call	0x80a	; 0x80a <pvPortMalloc>
    1d26:	6c 01       	movw	r12, r24
    1d28:	89 2b       	or	r24, r25
    1d2a:	71 f0       	breq	.+28     	; 0x1d48 <xTaskCreate+0x52>
    1d2c:	84 e3       	ldi	r24, 0x34	; 52
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	0e 94 05 04 	call	0x80a	; 0x80a <pvPortMalloc>
    1d34:	ec 01       	movw	r28, r24
    1d36:	89 2b       	or	r24, r25
    1d38:	19 f0       	breq	.+6      	; 0x1d40 <xTaskCreate+0x4a>
    1d3a:	dc 8e       	std	Y+28, r13	; 0x1c
    1d3c:	cb 8e       	std	Y+27, r12	; 0x1b
    1d3e:	06 c0       	rjmp	.+12     	; 0x1d4c <xTaskCreate+0x56>
    1d40:	c6 01       	movw	r24, r12
    1d42:	0e 94 ae 04 	call	0x95c	; 0x95c <vPortFree>
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <xTaskCreate+0x56>
    1d48:	c0 e0       	ldi	r28, 0x00	; 0
    1d4a:	d0 e0       	ldi	r29, 0x00	; 0
    1d4c:	20 97       	sbiw	r28, 0x00	; 0
    1d4e:	61 f0       	breq	.+24     	; 0x1d68 <xTaskCreate+0x72>
    1d50:	a1 2c       	mov	r10, r1
    1d52:	b1 2c       	mov	r11, r1
    1d54:	6e 01       	movw	r12, r28
    1d56:	92 01       	movw	r18, r4
    1d58:	a4 01       	movw	r20, r8
    1d5a:	b1 01       	movw	r22, r2
    1d5c:	c3 01       	movw	r24, r6
    1d5e:	eb dd       	rcall	.-1066   	; 0x1936 <prvInitialiseNewTask>
    1d60:	ce 01       	movw	r24, r28
    1d62:	94 de       	rcall	.-728    	; 0x1a8c <prvAddNewTaskToReadyList>
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	01 c0       	rjmp	.+2      	; 0x1d6a <xTaskCreate+0x74>
    1d68:	8f ef       	ldi	r24, 0xFF	; 255
    1d6a:	df 91       	pop	r29
    1d6c:	cf 91       	pop	r28
    1d6e:	0f 91       	pop	r16
    1d70:	ff 90       	pop	r15
    1d72:	ef 90       	pop	r14
    1d74:	df 90       	pop	r13
    1d76:	cf 90       	pop	r12
    1d78:	bf 90       	pop	r11
    1d7a:	af 90       	pop	r10
    1d7c:	9f 90       	pop	r9
    1d7e:	8f 90       	pop	r8
    1d80:	7f 90       	pop	r7
    1d82:	6f 90       	pop	r6
    1d84:	5f 90       	pop	r5
    1d86:	4f 90       	pop	r4
    1d88:	3f 90       	pop	r3
    1d8a:	2f 90       	pop	r2
    1d8c:	08 95       	ret

00001d8e <vTaskStartScheduler>:
    1d8e:	ef 92       	push	r14
    1d90:	ff 92       	push	r15
    1d92:	0f 93       	push	r16
    1d94:	0f 2e       	mov	r0, r31
    1d96:	f5 ec       	ldi	r31, 0xC5	; 197
    1d98:	ef 2e       	mov	r14, r31
    1d9a:	f1 e1       	ldi	r31, 0x11	; 17
    1d9c:	ff 2e       	mov	r15, r31
    1d9e:	f0 2d       	mov	r31, r0
    1da0:	00 e0       	ldi	r16, 0x00	; 0
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 ec       	ldi	r20, 0xC0	; 192
    1da8:	50 e0       	ldi	r21, 0x00	; 0
    1daa:	65 ef       	ldi	r22, 0xF5	; 245
    1dac:	72 e0       	ldi	r23, 0x02	; 2
    1dae:	8d ec       	ldi	r24, 0xCD	; 205
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	a1 df       	rcall	.-190    	; 0x1cf6 <xTaskCreate>
    1db4:	81 30       	cpi	r24, 0x01	; 1
    1db6:	11 f4       	brne	.+4      	; 0x1dbc <vTaskStartScheduler+0x2e>
    1db8:	0e 94 79 18 	call	0x30f2	; 0x30f2 <xTimerCreateTimerTask>
    1dbc:	81 30       	cpi	r24, 0x01	; 1
    1dbe:	c9 f4       	brne	.+50     	; 0x1df2 <vTaskStartScheduler+0x64>
    1dc0:	f8 94       	cli
    1dc2:	8f ef       	ldi	r24, 0xFF	; 255
    1dc4:	9f ef       	ldi	r25, 0xFF	; 255
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	80 93 c7 11 	sts	0x11C7, r24	; 0x8011c7 <xNextTaskUnblockTime>
    1dcc:	90 93 c8 11 	sts	0x11C8, r25	; 0x8011c8 <xNextTaskUnblockTime+0x1>
    1dd0:	a0 93 c9 11 	sts	0x11C9, r26	; 0x8011c9 <xNextTaskUnblockTime+0x2>
    1dd4:	b0 93 ca 11 	sts	0x11CA, r27	; 0x8011ca <xNextTaskUnblockTime+0x3>
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	80 93 d2 11 	sts	0x11D2, r24	; 0x8011d2 <xSchedulerRunning>
    1dde:	10 92 d4 11 	sts	0x11D4, r1	; 0x8011d4 <xTickCount>
    1de2:	10 92 d5 11 	sts	0x11D5, r1	; 0x8011d5 <xTickCount+0x1>
    1de6:	10 92 d6 11 	sts	0x11D6, r1	; 0x8011d6 <xTickCount+0x2>
    1dea:	10 92 d7 11 	sts	0x11D7, r1	; 0x8011d7 <xTickCount+0x3>
    1dee:	0e 94 87 05 	call	0xb0e	; 0xb0e <xPortStartScheduler>
    1df2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1df6:	0f 91       	pop	r16
    1df8:	ff 90       	pop	r15
    1dfa:	ef 90       	pop	r14
    1dfc:	08 95       	ret

00001dfe <vTaskSuspendAll>:
    1dfe:	80 91 c4 11 	lds	r24, 0x11C4	; 0x8011c4 <uxSchedulerSuspended>
    1e02:	8f 5f       	subi	r24, 0xFF	; 255
    1e04:	80 93 c4 11 	sts	0x11C4, r24	; 0x8011c4 <uxSchedulerSuspended>
    1e08:	08 95       	ret

00001e0a <xTaskGetTickCount>:
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	0f 92       	push	r0
    1e10:	60 91 d4 11 	lds	r22, 0x11D4	; 0x8011d4 <xTickCount>
    1e14:	70 91 d5 11 	lds	r23, 0x11D5	; 0x8011d5 <xTickCount+0x1>
    1e18:	80 91 d6 11 	lds	r24, 0x11D6	; 0x8011d6 <xTickCount+0x2>
    1e1c:	90 91 d7 11 	lds	r25, 0x11D7	; 0x8011d7 <xTickCount+0x3>
    1e20:	0f 90       	pop	r0
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	08 95       	ret

00001e26 <xTaskIncrementTick>:
    1e26:	cf 92       	push	r12
    1e28:	df 92       	push	r13
    1e2a:	ef 92       	push	r14
    1e2c:	ff 92       	push	r15
    1e2e:	cf 93       	push	r28
    1e30:	df 93       	push	r29
    1e32:	80 91 c4 11 	lds	r24, 0x11C4	; 0x8011c4 <uxSchedulerSuspended>
    1e36:	81 11       	cpse	r24, r1
    1e38:	05 c1       	rjmp	.+522    	; 0x2044 <__DATA_REGION_LENGTH__+0x44>
    1e3a:	c0 90 d4 11 	lds	r12, 0x11D4	; 0x8011d4 <xTickCount>
    1e3e:	d0 90 d5 11 	lds	r13, 0x11D5	; 0x8011d5 <xTickCount+0x1>
    1e42:	e0 90 d6 11 	lds	r14, 0x11D6	; 0x8011d6 <xTickCount+0x2>
    1e46:	f0 90 d7 11 	lds	r15, 0x11D7	; 0x8011d7 <xTickCount+0x3>
    1e4a:	8f ef       	ldi	r24, 0xFF	; 255
    1e4c:	c8 1a       	sub	r12, r24
    1e4e:	d8 0a       	sbc	r13, r24
    1e50:	e8 0a       	sbc	r14, r24
    1e52:	f8 0a       	sbc	r15, r24
    1e54:	c0 92 d4 11 	sts	0x11D4, r12	; 0x8011d4 <xTickCount>
    1e58:	d0 92 d5 11 	sts	0x11D5, r13	; 0x8011d5 <xTickCount+0x1>
    1e5c:	e0 92 d6 11 	sts	0x11D6, r14	; 0x8011d6 <xTickCount+0x2>
    1e60:	f0 92 d7 11 	sts	0x11D7, r15	; 0x8011d7 <xTickCount+0x3>
    1e64:	c1 14       	cp	r12, r1
    1e66:	d1 04       	cpc	r13, r1
    1e68:	e1 04       	cpc	r14, r1
    1e6a:	f1 04       	cpc	r15, r1
    1e6c:	b1 f4       	brne	.+44     	; 0x1e9a <xTaskIncrementTick+0x74>
    1e6e:	80 91 fd 11 	lds	r24, 0x11FD	; 0x8011fd <pxDelayedTaskList>
    1e72:	90 91 fe 11 	lds	r25, 0x11FE	; 0x8011fe <pxDelayedTaskList+0x1>
    1e76:	20 91 fb 11 	lds	r18, 0x11FB	; 0x8011fb <pxOverflowDelayedTaskList>
    1e7a:	30 91 fc 11 	lds	r19, 0x11FC	; 0x8011fc <pxOverflowDelayedTaskList+0x1>
    1e7e:	30 93 fe 11 	sts	0x11FE, r19	; 0x8011fe <pxDelayedTaskList+0x1>
    1e82:	20 93 fd 11 	sts	0x11FD, r18	; 0x8011fd <pxDelayedTaskList>
    1e86:	90 93 fc 11 	sts	0x11FC, r25	; 0x8011fc <pxOverflowDelayedTaskList+0x1>
    1e8a:	80 93 fb 11 	sts	0x11FB, r24	; 0x8011fb <pxOverflowDelayedTaskList>
    1e8e:	80 91 cc 11 	lds	r24, 0x11CC	; 0x8011cc <xNumOfOverflows>
    1e92:	8f 5f       	subi	r24, 0xFF	; 255
    1e94:	80 93 cc 11 	sts	0x11CC, r24	; 0x8011cc <xNumOfOverflows>
    1e98:	1c dd       	rcall	.-1480   	; 0x18d2 <prvResetNextTaskUnblockTime>
    1e9a:	80 91 c7 11 	lds	r24, 0x11C7	; 0x8011c7 <xNextTaskUnblockTime>
    1e9e:	90 91 c8 11 	lds	r25, 0x11C8	; 0x8011c8 <xNextTaskUnblockTime+0x1>
    1ea2:	a0 91 c9 11 	lds	r26, 0x11C9	; 0x8011c9 <xNextTaskUnblockTime+0x2>
    1ea6:	b0 91 ca 11 	lds	r27, 0x11CA	; 0x8011ca <xNextTaskUnblockTime+0x3>
    1eaa:	c8 16       	cp	r12, r24
    1eac:	d9 06       	cpc	r13, r25
    1eae:	ea 06       	cpc	r14, r26
    1eb0:	fb 06       	cpc	r15, r27
    1eb2:	20 f4       	brcc	.+8      	; 0x1ebc <xTaskIncrementTick+0x96>
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	b2 c0       	rjmp	.+356    	; 0x201c <__DATA_REGION_LENGTH__+0x1c>
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	01 c0       	rjmp	.+2      	; 0x1ebe <xTaskIncrementTick+0x98>
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	e0 91 fd 11 	lds	r30, 0x11FD	; 0x8011fd <pxDelayedTaskList>
    1ec2:	f0 91 fe 11 	lds	r31, 0x11FE	; 0x8011fe <pxDelayedTaskList+0x1>
    1ec6:	90 81       	ld	r25, Z
    1ec8:	91 11       	cpse	r25, r1
    1eca:	0c c0       	rjmp	.+24     	; 0x1ee4 <xTaskIncrementTick+0xbe>
    1ecc:	4f ef       	ldi	r20, 0xFF	; 255
    1ece:	5f ef       	ldi	r21, 0xFF	; 255
    1ed0:	ba 01       	movw	r22, r20
    1ed2:	40 93 c7 11 	sts	0x11C7, r20	; 0x8011c7 <xNextTaskUnblockTime>
    1ed6:	50 93 c8 11 	sts	0x11C8, r21	; 0x8011c8 <xNextTaskUnblockTime+0x1>
    1eda:	60 93 c9 11 	sts	0x11C9, r22	; 0x8011c9 <xNextTaskUnblockTime+0x2>
    1ede:	70 93 ca 11 	sts	0x11CA, r23	; 0x8011ca <xNextTaskUnblockTime+0x3>
    1ee2:	9c c0       	rjmp	.+312    	; 0x201c <__DATA_REGION_LENGTH__+0x1c>
    1ee4:	e0 91 fd 11 	lds	r30, 0x11FD	; 0x8011fd <pxDelayedTaskList>
    1ee8:	f0 91 fe 11 	lds	r31, 0x11FE	; 0x8011fe <pxDelayedTaskList+0x1>
    1eec:	07 80       	ldd	r0, Z+7	; 0x07
    1eee:	f0 85       	ldd	r31, Z+8	; 0x08
    1ef0:	e0 2d       	mov	r30, r0
    1ef2:	00 84       	ldd	r0, Z+8	; 0x08
    1ef4:	f1 85       	ldd	r31, Z+9	; 0x09
    1ef6:	e0 2d       	mov	r30, r0
    1ef8:	42 81       	ldd	r20, Z+2	; 0x02
    1efa:	53 81       	ldd	r21, Z+3	; 0x03
    1efc:	64 81       	ldd	r22, Z+4	; 0x04
    1efe:	75 81       	ldd	r23, Z+5	; 0x05
    1f00:	c4 16       	cp	r12, r20
    1f02:	d5 06       	cpc	r13, r21
    1f04:	e6 06       	cpc	r14, r22
    1f06:	f7 06       	cpc	r15, r23
    1f08:	48 f4       	brcc	.+18     	; 0x1f1c <xTaskIncrementTick+0xf6>
    1f0a:	40 93 c7 11 	sts	0x11C7, r20	; 0x8011c7 <xNextTaskUnblockTime>
    1f0e:	50 93 c8 11 	sts	0x11C8, r21	; 0x8011c8 <xNextTaskUnblockTime+0x1>
    1f12:	60 93 c9 11 	sts	0x11C9, r22	; 0x8011c9 <xNextTaskUnblockTime+0x2>
    1f16:	70 93 ca 11 	sts	0x11CA, r23	; 0x8011ca <xNextTaskUnblockTime+0x3>
    1f1a:	80 c0       	rjmp	.+256    	; 0x201c <__DATA_REGION_LENGTH__+0x1c>
    1f1c:	a4 85       	ldd	r26, Z+12	; 0x0c
    1f1e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1f20:	c6 81       	ldd	r28, Z+6	; 0x06
    1f22:	d7 81       	ldd	r29, Z+7	; 0x07
    1f24:	20 85       	ldd	r18, Z+8	; 0x08
    1f26:	31 85       	ldd	r19, Z+9	; 0x09
    1f28:	3f 83       	std	Y+7, r19	; 0x07
    1f2a:	2e 83       	std	Y+6, r18	; 0x06
    1f2c:	c0 85       	ldd	r28, Z+8	; 0x08
    1f2e:	d1 85       	ldd	r29, Z+9	; 0x09
    1f30:	26 81       	ldd	r18, Z+6	; 0x06
    1f32:	37 81       	ldd	r19, Z+7	; 0x07
    1f34:	3d 83       	std	Y+5, r19	; 0x05
    1f36:	2c 83       	std	Y+4, r18	; 0x04
    1f38:	11 96       	adiw	r26, 0x01	; 1
    1f3a:	4d 91       	ld	r20, X+
    1f3c:	5c 91       	ld	r21, X
    1f3e:	12 97       	sbiw	r26, 0x02	; 2
    1f40:	9f 01       	movw	r18, r30
    1f42:	2e 5f       	subi	r18, 0xFE	; 254
    1f44:	3f 4f       	sbci	r19, 0xFF	; 255
    1f46:	42 17       	cp	r20, r18
    1f48:	53 07       	cpc	r21, r19
    1f4a:	31 f4       	brne	.+12     	; 0x1f58 <xTaskIncrementTick+0x132>
    1f4c:	40 85       	ldd	r20, Z+8	; 0x08
    1f4e:	51 85       	ldd	r21, Z+9	; 0x09
    1f50:	12 96       	adiw	r26, 0x02	; 2
    1f52:	5c 93       	st	X, r21
    1f54:	4e 93       	st	-X, r20
    1f56:	11 97       	sbiw	r26, 0x01	; 1
    1f58:	15 86       	std	Z+13, r1	; 0x0d
    1f5a:	14 86       	std	Z+12, r1	; 0x0c
    1f5c:	9c 91       	ld	r25, X
    1f5e:	91 50       	subi	r25, 0x01	; 1
    1f60:	9c 93       	st	X, r25
    1f62:	a0 8d       	ldd	r26, Z+24	; 0x18
    1f64:	b1 8d       	ldd	r27, Z+25	; 0x19
    1f66:	10 97       	sbiw	r26, 0x00	; 0
    1f68:	09 f1       	breq	.+66     	; 0x1fac <xTaskIncrementTick+0x186>
    1f6a:	c2 89       	ldd	r28, Z+18	; 0x12
    1f6c:	d3 89       	ldd	r29, Z+19	; 0x13
    1f6e:	44 89       	ldd	r20, Z+20	; 0x14
    1f70:	55 89       	ldd	r21, Z+21	; 0x15
    1f72:	5f 83       	std	Y+7, r21	; 0x07
    1f74:	4e 83       	std	Y+6, r20	; 0x06
    1f76:	c4 89       	ldd	r28, Z+20	; 0x14
    1f78:	d5 89       	ldd	r29, Z+21	; 0x15
    1f7a:	42 89       	ldd	r20, Z+18	; 0x12
    1f7c:	53 89       	ldd	r21, Z+19	; 0x13
    1f7e:	5d 83       	std	Y+5, r21	; 0x05
    1f80:	4c 83       	std	Y+4, r20	; 0x04
    1f82:	11 96       	adiw	r26, 0x01	; 1
    1f84:	6d 91       	ld	r22, X+
    1f86:	7c 91       	ld	r23, X
    1f88:	12 97       	sbiw	r26, 0x02	; 2
    1f8a:	af 01       	movw	r20, r30
    1f8c:	42 5f       	subi	r20, 0xF2	; 242
    1f8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f90:	64 17       	cp	r22, r20
    1f92:	75 07       	cpc	r23, r21
    1f94:	31 f4       	brne	.+12     	; 0x1fa2 <xTaskIncrementTick+0x17c>
    1f96:	44 89       	ldd	r20, Z+20	; 0x14
    1f98:	55 89       	ldd	r21, Z+21	; 0x15
    1f9a:	12 96       	adiw	r26, 0x02	; 2
    1f9c:	5c 93       	st	X, r21
    1f9e:	4e 93       	st	-X, r20
    1fa0:	11 97       	sbiw	r26, 0x01	; 1
    1fa2:	11 8e       	std	Z+25, r1	; 0x19
    1fa4:	10 8e       	std	Z+24, r1	; 0x18
    1fa6:	9c 91       	ld	r25, X
    1fa8:	91 50       	subi	r25, 0x01	; 1
    1faa:	9c 93       	st	X, r25
    1fac:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1fae:	90 91 d3 11 	lds	r25, 0x11D3	; 0x8011d3 <uxTopReadyPriority>
    1fb2:	9a 17       	cp	r25, r26
    1fb4:	10 f4       	brcc	.+4      	; 0x1fba <xTaskIncrementTick+0x194>
    1fb6:	a0 93 d3 11 	sts	0x11D3, r26	; 0x8011d3 <uxTopReadyPriority>
    1fba:	9b e0       	ldi	r25, 0x0B	; 11
    1fbc:	9a 9f       	mul	r25, r26
    1fbe:	d0 01       	movw	r26, r0
    1fc0:	11 24       	eor	r1, r1
    1fc2:	ab 5e       	subi	r26, 0xEB	; 235
    1fc4:	bd 4e       	sbci	r27, 0xED	; 237
    1fc6:	11 96       	adiw	r26, 0x01	; 1
    1fc8:	0d 90       	ld	r0, X+
    1fca:	bc 91       	ld	r27, X
    1fcc:	a0 2d       	mov	r26, r0
    1fce:	b7 83       	std	Z+7, r27	; 0x07
    1fd0:	a6 83       	std	Z+6, r26	; 0x06
    1fd2:	16 96       	adiw	r26, 0x06	; 6
    1fd4:	4d 91       	ld	r20, X+
    1fd6:	5c 91       	ld	r21, X
    1fd8:	17 97       	sbiw	r26, 0x07	; 7
    1fda:	51 87       	std	Z+9, r21	; 0x09
    1fdc:	40 87       	std	Z+8, r20	; 0x08
    1fde:	16 96       	adiw	r26, 0x06	; 6
    1fe0:	cd 91       	ld	r28, X+
    1fe2:	dc 91       	ld	r29, X
    1fe4:	17 97       	sbiw	r26, 0x07	; 7
    1fe6:	3d 83       	std	Y+5, r19	; 0x05
    1fe8:	2c 83       	std	Y+4, r18	; 0x04
    1fea:	17 96       	adiw	r26, 0x07	; 7
    1fec:	3c 93       	st	X, r19
    1fee:	2e 93       	st	-X, r18
    1ff0:	16 97       	sbiw	r26, 0x06	; 6
    1ff2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ff4:	9a 9f       	mul	r25, r26
    1ff6:	d0 01       	movw	r26, r0
    1ff8:	11 24       	eor	r1, r1
    1ffa:	ab 5e       	subi	r26, 0xEB	; 235
    1ffc:	bd 4e       	sbci	r27, 0xED	; 237
    1ffe:	b5 87       	std	Z+13, r27	; 0x0d
    2000:	a4 87       	std	Z+12, r26	; 0x0c
    2002:	9c 91       	ld	r25, X
    2004:	9f 5f       	subi	r25, 0xFF	; 255
    2006:	9c 93       	st	X, r25
    2008:	22 8d       	ldd	r18, Z+26	; 0x1a
    200a:	e0 91 83 12 	lds	r30, 0x1283	; 0x801283 <pxCurrentTCB>
    200e:	f0 91 84 12 	lds	r31, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    2012:	92 8d       	ldd	r25, Z+26	; 0x1a
    2014:	29 17       	cp	r18, r25
    2016:	08 f0       	brcs	.+2      	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    2018:	4f cf       	rjmp	.-354    	; 0x1eb8 <xTaskIncrementTick+0x92>
    201a:	51 cf       	rjmp	.-350    	; 0x1ebe <xTaskIncrementTick+0x98>
    201c:	e0 91 83 12 	lds	r30, 0x1283	; 0x801283 <pxCurrentTCB>
    2020:	f0 91 84 12 	lds	r31, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    2024:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2026:	9b e0       	ldi	r25, 0x0B	; 11
    2028:	e9 9f       	mul	r30, r25
    202a:	f0 01       	movw	r30, r0
    202c:	11 24       	eor	r1, r1
    202e:	eb 5e       	subi	r30, 0xEB	; 235
    2030:	fd 4e       	sbci	r31, 0xED	; 237
    2032:	90 81       	ld	r25, Z
    2034:	92 30       	cpi	r25, 0x02	; 2
    2036:	08 f0       	brcs	.+2      	; 0x203a <__DATA_REGION_LENGTH__+0x3a>
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	90 91 cd 11 	lds	r25, 0x11CD	; 0x8011cd <xYieldPending>
    203e:	91 11       	cpse	r25, r1
    2040:	16 c0       	rjmp	.+44     	; 0x206e <__DATA_REGION_LENGTH__+0x6e>
    2042:	16 c0       	rjmp	.+44     	; 0x2070 <__DATA_REGION_LENGTH__+0x70>
    2044:	80 91 ce 11 	lds	r24, 0x11CE	; 0x8011ce <xPendedTicks>
    2048:	90 91 cf 11 	lds	r25, 0x11CF	; 0x8011cf <xPendedTicks+0x1>
    204c:	a0 91 d0 11 	lds	r26, 0x11D0	; 0x8011d0 <xPendedTicks+0x2>
    2050:	b0 91 d1 11 	lds	r27, 0x11D1	; 0x8011d1 <xPendedTicks+0x3>
    2054:	01 96       	adiw	r24, 0x01	; 1
    2056:	a1 1d       	adc	r26, r1
    2058:	b1 1d       	adc	r27, r1
    205a:	80 93 ce 11 	sts	0x11CE, r24	; 0x8011ce <xPendedTicks>
    205e:	90 93 cf 11 	sts	0x11CF, r25	; 0x8011cf <xPendedTicks+0x1>
    2062:	a0 93 d0 11 	sts	0x11D0, r26	; 0x8011d0 <xPendedTicks+0x2>
    2066:	b0 93 d1 11 	sts	0x11D1, r27	; 0x8011d1 <xPendedTicks+0x3>
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	01 c0       	rjmp	.+2      	; 0x2070 <__DATA_REGION_LENGTH__+0x70>
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	df 91       	pop	r29
    2072:	cf 91       	pop	r28
    2074:	ff 90       	pop	r15
    2076:	ef 90       	pop	r14
    2078:	df 90       	pop	r13
    207a:	cf 90       	pop	r12
    207c:	08 95       	ret

0000207e <xTaskResumeAll>:
    207e:	cf 92       	push	r12
    2080:	df 92       	push	r13
    2082:	ef 92       	push	r14
    2084:	ff 92       	push	r15
    2086:	cf 93       	push	r28
    2088:	df 93       	push	r29
    208a:	0f b6       	in	r0, 0x3f	; 63
    208c:	f8 94       	cli
    208e:	0f 92       	push	r0
    2090:	80 91 c4 11 	lds	r24, 0x11C4	; 0x8011c4 <uxSchedulerSuspended>
    2094:	81 50       	subi	r24, 0x01	; 1
    2096:	80 93 c4 11 	sts	0x11C4, r24	; 0x8011c4 <uxSchedulerSuspended>
    209a:	80 91 c4 11 	lds	r24, 0x11C4	; 0x8011c4 <uxSchedulerSuspended>
    209e:	81 11       	cpse	r24, r1
    20a0:	be c0       	rjmp	.+380    	; 0x221e <__stack+0x1f>
    20a2:	80 91 d8 11 	lds	r24, 0x11D8	; 0x8011d8 <uxCurrentNumberOfTasks>
    20a6:	81 11       	cpse	r24, r1
    20a8:	88 c0       	rjmp	.+272    	; 0x21ba <xTaskResumeAll+0x13c>
    20aa:	bc c0       	rjmp	.+376    	; 0x2224 <__stack+0x25>
    20ac:	e0 91 f7 11 	lds	r30, 0x11F7	; 0x8011f7 <xPendingReadyList+0x7>
    20b0:	f0 91 f8 11 	lds	r31, 0x11F8	; 0x8011f8 <xPendingReadyList+0x8>
    20b4:	00 84       	ldd	r0, Z+8	; 0x08
    20b6:	f1 85       	ldd	r31, Z+9	; 0x09
    20b8:	e0 2d       	mov	r30, r0
    20ba:	a0 8d       	ldd	r26, Z+24	; 0x18
    20bc:	b1 8d       	ldd	r27, Z+25	; 0x19
    20be:	c2 89       	ldd	r28, Z+18	; 0x12
    20c0:	d3 89       	ldd	r29, Z+19	; 0x13
    20c2:	84 89       	ldd	r24, Z+20	; 0x14
    20c4:	95 89       	ldd	r25, Z+21	; 0x15
    20c6:	9f 83       	std	Y+7, r25	; 0x07
    20c8:	8e 83       	std	Y+6, r24	; 0x06
    20ca:	c4 89       	ldd	r28, Z+20	; 0x14
    20cc:	d5 89       	ldd	r29, Z+21	; 0x15
    20ce:	82 89       	ldd	r24, Z+18	; 0x12
    20d0:	93 89       	ldd	r25, Z+19	; 0x13
    20d2:	9d 83       	std	Y+5, r25	; 0x05
    20d4:	8c 83       	std	Y+4, r24	; 0x04
    20d6:	11 96       	adiw	r26, 0x01	; 1
    20d8:	2d 91       	ld	r18, X+
    20da:	3c 91       	ld	r19, X
    20dc:	12 97       	sbiw	r26, 0x02	; 2
    20de:	cf 01       	movw	r24, r30
    20e0:	0e 96       	adiw	r24, 0x0e	; 14
    20e2:	28 17       	cp	r18, r24
    20e4:	39 07       	cpc	r19, r25
    20e6:	31 f4       	brne	.+12     	; 0x20f4 <xTaskResumeAll+0x76>
    20e8:	84 89       	ldd	r24, Z+20	; 0x14
    20ea:	95 89       	ldd	r25, Z+21	; 0x15
    20ec:	12 96       	adiw	r26, 0x02	; 2
    20ee:	9c 93       	st	X, r25
    20f0:	8e 93       	st	-X, r24
    20f2:	11 97       	sbiw	r26, 0x01	; 1
    20f4:	11 8e       	std	Z+25, r1	; 0x19
    20f6:	10 8e       	std	Z+24, r1	; 0x18
    20f8:	8c 91       	ld	r24, X
    20fa:	81 50       	subi	r24, 0x01	; 1
    20fc:	8c 93       	st	X, r24
    20fe:	a4 85       	ldd	r26, Z+12	; 0x0c
    2100:	b5 85       	ldd	r27, Z+13	; 0x0d
    2102:	c6 81       	ldd	r28, Z+6	; 0x06
    2104:	d7 81       	ldd	r29, Z+7	; 0x07
    2106:	80 85       	ldd	r24, Z+8	; 0x08
    2108:	91 85       	ldd	r25, Z+9	; 0x09
    210a:	9f 83       	std	Y+7, r25	; 0x07
    210c:	8e 83       	std	Y+6, r24	; 0x06
    210e:	c0 85       	ldd	r28, Z+8	; 0x08
    2110:	d1 85       	ldd	r29, Z+9	; 0x09
    2112:	86 81       	ldd	r24, Z+6	; 0x06
    2114:	97 81       	ldd	r25, Z+7	; 0x07
    2116:	9d 83       	std	Y+5, r25	; 0x05
    2118:	8c 83       	std	Y+4, r24	; 0x04
    211a:	11 96       	adiw	r26, 0x01	; 1
    211c:	8d 91       	ld	r24, X+
    211e:	9c 91       	ld	r25, X
    2120:	12 97       	sbiw	r26, 0x02	; 2
    2122:	9f 01       	movw	r18, r30
    2124:	2e 5f       	subi	r18, 0xFE	; 254
    2126:	3f 4f       	sbci	r19, 0xFF	; 255
    2128:	82 17       	cp	r24, r18
    212a:	93 07       	cpc	r25, r19
    212c:	31 f4       	brne	.+12     	; 0x213a <xTaskResumeAll+0xbc>
    212e:	80 85       	ldd	r24, Z+8	; 0x08
    2130:	91 85       	ldd	r25, Z+9	; 0x09
    2132:	12 96       	adiw	r26, 0x02	; 2
    2134:	9c 93       	st	X, r25
    2136:	8e 93       	st	-X, r24
    2138:	11 97       	sbiw	r26, 0x01	; 1
    213a:	15 86       	std	Z+13, r1	; 0x0d
    213c:	14 86       	std	Z+12, r1	; 0x0c
    213e:	8c 91       	ld	r24, X
    2140:	81 50       	subi	r24, 0x01	; 1
    2142:	8c 93       	st	X, r24
    2144:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2146:	80 91 d3 11 	lds	r24, 0x11D3	; 0x8011d3 <uxTopReadyPriority>
    214a:	8a 17       	cp	r24, r26
    214c:	10 f4       	brcc	.+4      	; 0x2152 <xTaskResumeAll+0xd4>
    214e:	a0 93 d3 11 	sts	0x11D3, r26	; 0x8011d3 <uxTopReadyPriority>
    2152:	8b e0       	ldi	r24, 0x0B	; 11
    2154:	8a 9f       	mul	r24, r26
    2156:	d0 01       	movw	r26, r0
    2158:	11 24       	eor	r1, r1
    215a:	ab 5e       	subi	r26, 0xEB	; 235
    215c:	bd 4e       	sbci	r27, 0xED	; 237
    215e:	11 96       	adiw	r26, 0x01	; 1
    2160:	0d 90       	ld	r0, X+
    2162:	bc 91       	ld	r27, X
    2164:	a0 2d       	mov	r26, r0
    2166:	b7 83       	std	Z+7, r27	; 0x07
    2168:	a6 83       	std	Z+6, r26	; 0x06
    216a:	16 96       	adiw	r26, 0x06	; 6
    216c:	4d 91       	ld	r20, X+
    216e:	5c 91       	ld	r21, X
    2170:	17 97       	sbiw	r26, 0x07	; 7
    2172:	51 87       	std	Z+9, r21	; 0x09
    2174:	40 87       	std	Z+8, r20	; 0x08
    2176:	16 96       	adiw	r26, 0x06	; 6
    2178:	cd 91       	ld	r28, X+
    217a:	dc 91       	ld	r29, X
    217c:	17 97       	sbiw	r26, 0x07	; 7
    217e:	3d 83       	std	Y+5, r19	; 0x05
    2180:	2c 83       	std	Y+4, r18	; 0x04
    2182:	17 96       	adiw	r26, 0x07	; 7
    2184:	3c 93       	st	X, r19
    2186:	2e 93       	st	-X, r18
    2188:	16 97       	sbiw	r26, 0x06	; 6
    218a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    218c:	8a 9f       	mul	r24, r26
    218e:	d0 01       	movw	r26, r0
    2190:	11 24       	eor	r1, r1
    2192:	ab 5e       	subi	r26, 0xEB	; 235
    2194:	bd 4e       	sbci	r27, 0xED	; 237
    2196:	b5 87       	std	Z+13, r27	; 0x0d
    2198:	a4 87       	std	Z+12, r26	; 0x0c
    219a:	8c 91       	ld	r24, X
    219c:	8f 5f       	subi	r24, 0xFF	; 255
    219e:	8c 93       	st	X, r24
    21a0:	92 8d       	ldd	r25, Z+26	; 0x1a
    21a2:	a0 91 83 12 	lds	r26, 0x1283	; 0x801283 <pxCurrentTCB>
    21a6:	b0 91 84 12 	lds	r27, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    21aa:	5a 96       	adiw	r26, 0x1a	; 26
    21ac:	8c 91       	ld	r24, X
    21ae:	98 17       	cp	r25, r24
    21b0:	30 f0       	brcs	.+12     	; 0x21be <xTaskResumeAll+0x140>
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	80 93 cd 11 	sts	0x11CD, r24	; 0x8011cd <xYieldPending>
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <xTaskResumeAll+0x140>
    21ba:	e0 e0       	ldi	r30, 0x00	; 0
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 91 f0 11 	lds	r24, 0x11F0	; 0x8011f0 <xPendingReadyList>
    21c2:	81 11       	cpse	r24, r1
    21c4:	73 cf       	rjmp	.-282    	; 0x20ac <xTaskResumeAll+0x2e>
    21c6:	ef 2b       	or	r30, r31
    21c8:	09 f0       	breq	.+2      	; 0x21cc <xTaskResumeAll+0x14e>
    21ca:	83 db       	rcall	.-2298   	; 0x18d2 <prvResetNextTaskUnblockTime>
    21cc:	c0 90 ce 11 	lds	r12, 0x11CE	; 0x8011ce <xPendedTicks>
    21d0:	d0 90 cf 11 	lds	r13, 0x11CF	; 0x8011cf <xPendedTicks+0x1>
    21d4:	e0 90 d0 11 	lds	r14, 0x11D0	; 0x8011d0 <xPendedTicks+0x2>
    21d8:	f0 90 d1 11 	lds	r15, 0x11D1	; 0x8011d1 <xPendedTicks+0x3>
    21dc:	c1 14       	cp	r12, r1
    21de:	d1 04       	cpc	r13, r1
    21e0:	e1 04       	cpc	r14, r1
    21e2:	f1 04       	cpc	r15, r1
    21e4:	a1 f0       	breq	.+40     	; 0x220e <__stack+0xf>
    21e6:	1f de       	rcall	.-962    	; 0x1e26 <xTaskIncrementTick>
    21e8:	88 23       	and	r24, r24
    21ea:	19 f0       	breq	.+6      	; 0x21f2 <xTaskResumeAll+0x174>
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	80 93 cd 11 	sts	0x11CD, r24	; 0x8011cd <xYieldPending>
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	c8 1a       	sub	r12, r24
    21f6:	d1 08       	sbc	r13, r1
    21f8:	e1 08       	sbc	r14, r1
    21fa:	f1 08       	sbc	r15, r1
    21fc:	a1 f7       	brne	.-24     	; 0x21e6 <xTaskResumeAll+0x168>
    21fe:	10 92 ce 11 	sts	0x11CE, r1	; 0x8011ce <xPendedTicks>
    2202:	10 92 cf 11 	sts	0x11CF, r1	; 0x8011cf <xPendedTicks+0x1>
    2206:	10 92 d0 11 	sts	0x11D0, r1	; 0x8011d0 <xPendedTicks+0x2>
    220a:	10 92 d1 11 	sts	0x11D1, r1	; 0x8011d1 <xPendedTicks+0x3>
    220e:	80 91 cd 11 	lds	r24, 0x11CD	; 0x8011cd <xYieldPending>
    2212:	88 23       	and	r24, r24
    2214:	31 f0       	breq	.+12     	; 0x2222 <__stack+0x23>
    2216:	0e 94 b9 05 	call	0xb72	; 0xb72 <vPortYield>
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	03 c0       	rjmp	.+6      	; 0x2224 <__stack+0x25>
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	01 c0       	rjmp	.+2      	; 0x2224 <__stack+0x25>
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	0f 90       	pop	r0
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	ff 90       	pop	r15
    222e:	ef 90       	pop	r14
    2230:	df 90       	pop	r13
    2232:	cf 90       	pop	r12
    2234:	08 95       	ret

00002236 <xTaskDelayUntil>:
    2236:	8f 92       	push	r8
    2238:	9f 92       	push	r9
    223a:	af 92       	push	r10
    223c:	bf 92       	push	r11
    223e:	cf 92       	push	r12
    2240:	df 92       	push	r13
    2242:	ef 92       	push	r14
    2244:	ff 92       	push	r15
    2246:	1f 93       	push	r17
    2248:	cf 93       	push	r28
    224a:	df 93       	push	r29
    224c:	ec 01       	movw	r28, r24
    224e:	6a 01       	movw	r12, r20
    2250:	7b 01       	movw	r14, r22
    2252:	d5 dd       	rcall	.-1110   	; 0x1dfe <vTaskSuspendAll>
    2254:	80 90 d4 11 	lds	r8, 0x11D4	; 0x8011d4 <xTickCount>
    2258:	90 90 d5 11 	lds	r9, 0x11D5	; 0x8011d5 <xTickCount+0x1>
    225c:	a0 90 d6 11 	lds	r10, 0x11D6	; 0x8011d6 <xTickCount+0x2>
    2260:	b0 90 d7 11 	lds	r11, 0x11D7	; 0x8011d7 <xTickCount+0x3>
    2264:	88 81       	ld	r24, Y
    2266:	99 81       	ldd	r25, Y+1	; 0x01
    2268:	aa 81       	ldd	r26, Y+2	; 0x02
    226a:	bb 81       	ldd	r27, Y+3	; 0x03
    226c:	ac 01       	movw	r20, r24
    226e:	bd 01       	movw	r22, r26
    2270:	4c 0d       	add	r20, r12
    2272:	5d 1d       	adc	r21, r13
    2274:	6e 1d       	adc	r22, r14
    2276:	7f 1d       	adc	r23, r15
    2278:	88 16       	cp	r8, r24
    227a:	99 06       	cpc	r9, r25
    227c:	aa 06       	cpc	r10, r26
    227e:	bb 06       	cpc	r11, r27
    2280:	60 f4       	brcc	.+24     	; 0x229a <xTaskDelayUntil+0x64>
    2282:	48 17       	cp	r20, r24
    2284:	59 07       	cpc	r21, r25
    2286:	6a 07       	cpc	r22, r26
    2288:	7b 07       	cpc	r23, r27
    228a:	98 f4       	brcc	.+38     	; 0x22b2 <xTaskDelayUntil+0x7c>
    228c:	84 16       	cp	r8, r20
    228e:	95 06       	cpc	r9, r21
    2290:	a6 06       	cpc	r10, r22
    2292:	b7 06       	cpc	r11, r23
    2294:	80 f0       	brcs	.+32     	; 0x22b6 <xTaskDelayUntil+0x80>
    2296:	10 e0       	ldi	r17, 0x00	; 0
    2298:	13 c0       	rjmp	.+38     	; 0x22c0 <xTaskDelayUntil+0x8a>
    229a:	48 17       	cp	r20, r24
    229c:	59 07       	cpc	r21, r25
    229e:	6a 07       	cpc	r22, r26
    22a0:	7b 07       	cpc	r23, r27
    22a2:	58 f0       	brcs	.+22     	; 0x22ba <xTaskDelayUntil+0x84>
    22a4:	84 16       	cp	r8, r20
    22a6:	95 06       	cpc	r9, r21
    22a8:	a6 06       	cpc	r10, r22
    22aa:	b7 06       	cpc	r11, r23
    22ac:	40 f0       	brcs	.+16     	; 0x22be <xTaskDelayUntil+0x88>
    22ae:	10 e0       	ldi	r17, 0x00	; 0
    22b0:	07 c0       	rjmp	.+14     	; 0x22c0 <xTaskDelayUntil+0x8a>
    22b2:	10 e0       	ldi	r17, 0x00	; 0
    22b4:	05 c0       	rjmp	.+10     	; 0x22c0 <xTaskDelayUntil+0x8a>
    22b6:	11 e0       	ldi	r17, 0x01	; 1
    22b8:	03 c0       	rjmp	.+6      	; 0x22c0 <xTaskDelayUntil+0x8a>
    22ba:	11 e0       	ldi	r17, 0x01	; 1
    22bc:	01 c0       	rjmp	.+2      	; 0x22c0 <xTaskDelayUntil+0x8a>
    22be:	11 e0       	ldi	r17, 0x01	; 1
    22c0:	48 83       	st	Y, r20
    22c2:	59 83       	std	Y+1, r21	; 0x01
    22c4:	6a 83       	std	Y+2, r22	; 0x02
    22c6:	7b 83       	std	Y+3, r23	; 0x03
    22c8:	11 23       	and	r17, r17
    22ca:	41 f0       	breq	.+16     	; 0x22dc <xTaskDelayUntil+0xa6>
    22cc:	cb 01       	movw	r24, r22
    22ce:	ba 01       	movw	r22, r20
    22d0:	68 19       	sub	r22, r8
    22d2:	79 09       	sbc	r23, r9
    22d4:	8a 09       	sbc	r24, r10
    22d6:	9b 09       	sbc	r25, r11
    22d8:	40 e0       	ldi	r20, 0x00	; 0
    22da:	6b dc       	rcall	.-1834   	; 0x1bb2 <prvAddCurrentTaskToDelayedList>
    22dc:	d0 de       	rcall	.-608    	; 0x207e <xTaskResumeAll>
    22de:	81 11       	cpse	r24, r1
    22e0:	02 c0       	rjmp	.+4      	; 0x22e6 <xTaskDelayUntil+0xb0>
    22e2:	0e 94 b9 05 	call	0xb72	; 0xb72 <vPortYield>
    22e6:	81 2f       	mov	r24, r17
    22e8:	df 91       	pop	r29
    22ea:	cf 91       	pop	r28
    22ec:	1f 91       	pop	r17
    22ee:	ff 90       	pop	r15
    22f0:	ef 90       	pop	r14
    22f2:	df 90       	pop	r13
    22f4:	cf 90       	pop	r12
    22f6:	bf 90       	pop	r11
    22f8:	af 90       	pop	r10
    22fa:	9f 90       	pop	r9
    22fc:	8f 90       	pop	r8
    22fe:	08 95       	ret

00002300 <vTaskDelay>:
    2300:	cf 92       	push	r12
    2302:	df 92       	push	r13
    2304:	ef 92       	push	r14
    2306:	ff 92       	push	r15
    2308:	6b 01       	movw	r12, r22
    230a:	7c 01       	movw	r14, r24
    230c:	67 2b       	or	r22, r23
    230e:	68 2b       	or	r22, r24
    2310:	69 2b       	or	r22, r25
    2312:	39 f0       	breq	.+14     	; 0x2322 <vTaskDelay+0x22>
    2314:	74 dd       	rcall	.-1304   	; 0x1dfe <vTaskSuspendAll>
    2316:	40 e0       	ldi	r20, 0x00	; 0
    2318:	c7 01       	movw	r24, r14
    231a:	b6 01       	movw	r22, r12
    231c:	4a dc       	rcall	.-1900   	; 0x1bb2 <prvAddCurrentTaskToDelayedList>
    231e:	af de       	rcall	.-674    	; 0x207e <xTaskResumeAll>
    2320:	01 c0       	rjmp	.+2      	; 0x2324 <vTaskDelay+0x24>
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	81 11       	cpse	r24, r1
    2326:	02 c0       	rjmp	.+4      	; 0x232c <vTaskDelay+0x2c>
    2328:	0e 94 b9 05 	call	0xb72	; 0xb72 <vPortYield>
    232c:	ff 90       	pop	r15
    232e:	ef 90       	pop	r14
    2330:	df 90       	pop	r13
    2332:	cf 90       	pop	r12
    2334:	08 95       	ret

00002336 <vTaskSwitchContext>:
    2336:	80 91 c4 11 	lds	r24, 0x11C4	; 0x8011c4 <uxSchedulerSuspended>
    233a:	88 23       	and	r24, r24
    233c:	21 f0       	breq	.+8      	; 0x2346 <vTaskSwitchContext+0x10>
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	80 93 cd 11 	sts	0x11CD, r24	; 0x8011cd <xYieldPending>
    2344:	08 95       	ret
    2346:	10 92 cd 11 	sts	0x11CD, r1	; 0x8011cd <xYieldPending>
    234a:	e0 91 83 12 	lds	r30, 0x1283	; 0x801283 <pxCurrentTCB>
    234e:	f0 91 84 12 	lds	r31, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    2352:	20 81       	ld	r18, Z
    2354:	31 81       	ldd	r19, Z+1	; 0x01
    2356:	e0 91 83 12 	lds	r30, 0x1283	; 0x801283 <pxCurrentTCB>
    235a:	f0 91 84 12 	lds	r31, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    235e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2360:	94 8d       	ldd	r25, Z+28	; 0x1c
    2362:	82 17       	cp	r24, r18
    2364:	93 07       	cpc	r25, r19
    2366:	60 f0       	brcs	.+24     	; 0x2380 <vTaskSwitchContext+0x4a>
    2368:	60 91 83 12 	lds	r22, 0x1283	; 0x801283 <pxCurrentTCB>
    236c:	70 91 84 12 	lds	r23, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    2370:	63 5e       	subi	r22, 0xE3	; 227
    2372:	7f 4f       	sbci	r23, 0xFF	; 255
    2374:	80 91 83 12 	lds	r24, 0x1283	; 0x801283 <pxCurrentTCB>
    2378:	90 91 84 12 	lds	r25, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    237c:	0e 94 07 1b 	call	0x360e	; 0x360e <vApplicationStackOverflowHook>
    2380:	80 91 d3 11 	lds	r24, 0x11D3	; 0x8011d3 <uxTopReadyPriority>
    2384:	01 c0       	rjmp	.+2      	; 0x2388 <vTaskSwitchContext+0x52>
    2386:	81 50       	subi	r24, 0x01	; 1
    2388:	28 2f       	mov	r18, r24
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	9b e0       	ldi	r25, 0x0B	; 11
    238e:	92 9f       	mul	r25, r18
    2390:	f0 01       	movw	r30, r0
    2392:	93 9f       	mul	r25, r19
    2394:	f0 0d       	add	r31, r0
    2396:	11 24       	eor	r1, r1
    2398:	eb 5e       	subi	r30, 0xEB	; 235
    239a:	fd 4e       	sbci	r31, 0xED	; 237
    239c:	90 81       	ld	r25, Z
    239e:	99 23       	and	r25, r25
    23a0:	91 f3       	breq	.-28     	; 0x2386 <vTaskSwitchContext+0x50>
    23a2:	9b e0       	ldi	r25, 0x0B	; 11
    23a4:	92 9f       	mul	r25, r18
    23a6:	a0 01       	movw	r20, r0
    23a8:	93 9f       	mul	r25, r19
    23aa:	50 0d       	add	r21, r0
    23ac:	11 24       	eor	r1, r1
    23ae:	df 01       	movw	r26, r30
    23b0:	01 80       	ldd	r0, Z+1	; 0x01
    23b2:	f2 81       	ldd	r31, Z+2	; 0x02
    23b4:	e0 2d       	mov	r30, r0
    23b6:	04 80       	ldd	r0, Z+4	; 0x04
    23b8:	f5 81       	ldd	r31, Z+5	; 0x05
    23ba:	e0 2d       	mov	r30, r0
    23bc:	12 96       	adiw	r26, 0x02	; 2
    23be:	fc 93       	st	X, r31
    23c0:	ee 93       	st	-X, r30
    23c2:	11 97       	sbiw	r26, 0x01	; 1
    23c4:	48 5e       	subi	r20, 0xE8	; 232
    23c6:	5d 4e       	sbci	r21, 0xED	; 237
    23c8:	e4 17       	cp	r30, r20
    23ca:	f5 07       	cpc	r31, r21
    23cc:	29 f4       	brne	.+10     	; 0x23d8 <vTaskSwitchContext+0xa2>
    23ce:	44 81       	ldd	r20, Z+4	; 0x04
    23d0:	55 81       	ldd	r21, Z+5	; 0x05
    23d2:	fd 01       	movw	r30, r26
    23d4:	52 83       	std	Z+2, r21	; 0x02
    23d6:	41 83       	std	Z+1, r20	; 0x01
    23d8:	9b e0       	ldi	r25, 0x0B	; 11
    23da:	92 9f       	mul	r25, r18
    23dc:	f0 01       	movw	r30, r0
    23de:	93 9f       	mul	r25, r19
    23e0:	f0 0d       	add	r31, r0
    23e2:	11 24       	eor	r1, r1
    23e4:	eb 5e       	subi	r30, 0xEB	; 235
    23e6:	fd 4e       	sbci	r31, 0xED	; 237
    23e8:	01 80       	ldd	r0, Z+1	; 0x01
    23ea:	f2 81       	ldd	r31, Z+2	; 0x02
    23ec:	e0 2d       	mov	r30, r0
    23ee:	20 85       	ldd	r18, Z+8	; 0x08
    23f0:	31 85       	ldd	r19, Z+9	; 0x09
    23f2:	30 93 84 12 	sts	0x1284, r19	; 0x801284 <pxCurrentTCB+0x1>
    23f6:	20 93 83 12 	sts	0x1283, r18	; 0x801283 <pxCurrentTCB>
    23fa:	80 93 d3 11 	sts	0x11D3, r24	; 0x8011d3 <uxTopReadyPriority>
    23fe:	08 95       	ret

00002400 <vTaskPlaceOnEventList>:
    2400:	cf 92       	push	r12
    2402:	df 92       	push	r13
    2404:	ef 92       	push	r14
    2406:	ff 92       	push	r15
    2408:	6a 01       	movw	r12, r20
    240a:	7b 01       	movw	r14, r22
    240c:	60 91 83 12 	lds	r22, 0x1283	; 0x801283 <pxCurrentTCB>
    2410:	70 91 84 12 	lds	r23, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    2414:	62 5f       	subi	r22, 0xF2	; 242
    2416:	7f 4f       	sbci	r23, 0xFF	; 255
    2418:	0e 94 00 05 	call	0xa00	; 0xa00 <vListInsert>
    241c:	41 e0       	ldi	r20, 0x01	; 1
    241e:	c7 01       	movw	r24, r14
    2420:	b6 01       	movw	r22, r12
    2422:	c7 db       	rcall	.-2162   	; 0x1bb2 <prvAddCurrentTaskToDelayedList>
    2424:	ff 90       	pop	r15
    2426:	ef 90       	pop	r14
    2428:	df 90       	pop	r13
    242a:	cf 90       	pop	r12
    242c:	08 95       	ret

0000242e <vTaskPlaceOnUnorderedEventList>:
    242e:	0f 93       	push	r16
    2430:	1f 93       	push	r17
    2432:	cf 93       	push	r28
    2434:	df 93       	push	r29
    2436:	fc 01       	movw	r30, r24
    2438:	a0 91 83 12 	lds	r26, 0x1283	; 0x801283 <pxCurrentTCB>
    243c:	b0 91 84 12 	lds	r27, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    2440:	70 68       	ori	r23, 0x80	; 128
    2442:	1e 96       	adiw	r26, 0x0e	; 14
    2444:	4d 93       	st	X+, r20
    2446:	5d 93       	st	X+, r21
    2448:	6d 93       	st	X+, r22
    244a:	7c 93       	st	X, r23
    244c:	51 97       	sbiw	r26, 0x11	; 17
    244e:	a1 81       	ldd	r26, Z+1	; 0x01
    2450:	b2 81       	ldd	r27, Z+2	; 0x02
    2452:	c0 91 83 12 	lds	r28, 0x1283	; 0x801283 <pxCurrentTCB>
    2456:	d0 91 84 12 	lds	r29, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    245a:	bb 8b       	std	Y+19, r27	; 0x13
    245c:	aa 8b       	std	Y+18, r26	; 0x12
    245e:	c0 91 83 12 	lds	r28, 0x1283	; 0x801283 <pxCurrentTCB>
    2462:	d0 91 84 12 	lds	r29, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    2466:	16 96       	adiw	r26, 0x06	; 6
    2468:	8d 91       	ld	r24, X+
    246a:	9c 91       	ld	r25, X
    246c:	17 97       	sbiw	r26, 0x07	; 7
    246e:	9d 8b       	std	Y+21, r25	; 0x15
    2470:	8c 8b       	std	Y+20, r24	; 0x14
    2472:	16 96       	adiw	r26, 0x06	; 6
    2474:	cd 91       	ld	r28, X+
    2476:	dc 91       	ld	r29, X
    2478:	17 97       	sbiw	r26, 0x07	; 7
    247a:	80 91 83 12 	lds	r24, 0x1283	; 0x801283 <pxCurrentTCB>
    247e:	90 91 84 12 	lds	r25, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    2482:	0e 96       	adiw	r24, 0x0e	; 14
    2484:	9d 83       	std	Y+5, r25	; 0x05
    2486:	8c 83       	std	Y+4, r24	; 0x04
    2488:	80 91 83 12 	lds	r24, 0x1283	; 0x801283 <pxCurrentTCB>
    248c:	90 91 84 12 	lds	r25, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    2490:	0e 96       	adiw	r24, 0x0e	; 14
    2492:	17 96       	adiw	r26, 0x07	; 7
    2494:	9c 93       	st	X, r25
    2496:	8e 93       	st	-X, r24
    2498:	16 97       	sbiw	r26, 0x06	; 6
    249a:	a0 91 83 12 	lds	r26, 0x1283	; 0x801283 <pxCurrentTCB>
    249e:	b0 91 84 12 	lds	r27, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    24a2:	59 96       	adiw	r26, 0x19	; 25
    24a4:	fc 93       	st	X, r31
    24a6:	ee 93       	st	-X, r30
    24a8:	58 97       	sbiw	r26, 0x18	; 24
    24aa:	80 81       	ld	r24, Z
    24ac:	8f 5f       	subi	r24, 0xFF	; 255
    24ae:	80 83       	st	Z, r24
    24b0:	41 e0       	ldi	r20, 0x01	; 1
    24b2:	c9 01       	movw	r24, r18
    24b4:	b8 01       	movw	r22, r16
    24b6:	7d db       	rcall	.-2310   	; 0x1bb2 <prvAddCurrentTaskToDelayedList>
    24b8:	df 91       	pop	r29
    24ba:	cf 91       	pop	r28
    24bc:	1f 91       	pop	r17
    24be:	0f 91       	pop	r16
    24c0:	08 95       	ret

000024c2 <vTaskPlaceOnEventListRestricted>:
    24c2:	cf 93       	push	r28
    24c4:	df 93       	push	r29
    24c6:	fc 01       	movw	r30, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	ba 01       	movw	r22, r20
    24cc:	a1 81       	ldd	r26, Z+1	; 0x01
    24ce:	b2 81       	ldd	r27, Z+2	; 0x02
    24d0:	c0 91 83 12 	lds	r28, 0x1283	; 0x801283 <pxCurrentTCB>
    24d4:	d0 91 84 12 	lds	r29, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    24d8:	bb 8b       	std	Y+19, r27	; 0x13
    24da:	aa 8b       	std	Y+18, r26	; 0x12
    24dc:	c0 91 83 12 	lds	r28, 0x1283	; 0x801283 <pxCurrentTCB>
    24e0:	d0 91 84 12 	lds	r29, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    24e4:	16 96       	adiw	r26, 0x06	; 6
    24e6:	4d 91       	ld	r20, X+
    24e8:	5c 91       	ld	r21, X
    24ea:	17 97       	sbiw	r26, 0x07	; 7
    24ec:	5d 8b       	std	Y+21, r21	; 0x15
    24ee:	4c 8b       	std	Y+20, r20	; 0x14
    24f0:	16 96       	adiw	r26, 0x06	; 6
    24f2:	cd 91       	ld	r28, X+
    24f4:	dc 91       	ld	r29, X
    24f6:	17 97       	sbiw	r26, 0x07	; 7
    24f8:	40 91 83 12 	lds	r20, 0x1283	; 0x801283 <pxCurrentTCB>
    24fc:	50 91 84 12 	lds	r21, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    2500:	42 5f       	subi	r20, 0xF2	; 242
    2502:	5f 4f       	sbci	r21, 0xFF	; 255
    2504:	5d 83       	std	Y+5, r21	; 0x05
    2506:	4c 83       	std	Y+4, r20	; 0x04
    2508:	40 91 83 12 	lds	r20, 0x1283	; 0x801283 <pxCurrentTCB>
    250c:	50 91 84 12 	lds	r21, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    2510:	42 5f       	subi	r20, 0xF2	; 242
    2512:	5f 4f       	sbci	r21, 0xFF	; 255
    2514:	17 96       	adiw	r26, 0x07	; 7
    2516:	5c 93       	st	X, r21
    2518:	4e 93       	st	-X, r20
    251a:	16 97       	sbiw	r26, 0x06	; 6
    251c:	a0 91 83 12 	lds	r26, 0x1283	; 0x801283 <pxCurrentTCB>
    2520:	b0 91 84 12 	lds	r27, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    2524:	59 96       	adiw	r26, 0x19	; 25
    2526:	fc 93       	st	X, r31
    2528:	ee 93       	st	-X, r30
    252a:	58 97       	sbiw	r26, 0x18	; 24
    252c:	30 81       	ld	r19, Z
    252e:	3f 5f       	subi	r19, 0xFF	; 255
    2530:	30 83       	st	Z, r19
    2532:	22 23       	and	r18, r18
    2534:	19 f0       	breq	.+6      	; 0x253c <vTaskPlaceOnEventListRestricted+0x7a>
    2536:	6f ef       	ldi	r22, 0xFF	; 255
    2538:	7f ef       	ldi	r23, 0xFF	; 255
    253a:	cb 01       	movw	r24, r22
    253c:	42 2f       	mov	r20, r18
    253e:	39 db       	rcall	.-2446   	; 0x1bb2 <prvAddCurrentTaskToDelayedList>
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	08 95       	ret

00002546 <xTaskRemoveFromEventList>:
    2546:	cf 93       	push	r28
    2548:	df 93       	push	r29
    254a:	dc 01       	movw	r26, r24
    254c:	17 96       	adiw	r26, 0x07	; 7
    254e:	ed 91       	ld	r30, X+
    2550:	fc 91       	ld	r31, X
    2552:	18 97       	sbiw	r26, 0x08	; 8
    2554:	00 84       	ldd	r0, Z+8	; 0x08
    2556:	f1 85       	ldd	r31, Z+9	; 0x09
    2558:	e0 2d       	mov	r30, r0
    255a:	a0 8d       	ldd	r26, Z+24	; 0x18
    255c:	b1 8d       	ldd	r27, Z+25	; 0x19
    255e:	c2 89       	ldd	r28, Z+18	; 0x12
    2560:	d3 89       	ldd	r29, Z+19	; 0x13
    2562:	84 89       	ldd	r24, Z+20	; 0x14
    2564:	95 89       	ldd	r25, Z+21	; 0x15
    2566:	9f 83       	std	Y+7, r25	; 0x07
    2568:	8e 83       	std	Y+6, r24	; 0x06
    256a:	c4 89       	ldd	r28, Z+20	; 0x14
    256c:	d5 89       	ldd	r29, Z+21	; 0x15
    256e:	82 89       	ldd	r24, Z+18	; 0x12
    2570:	93 89       	ldd	r25, Z+19	; 0x13
    2572:	9d 83       	std	Y+5, r25	; 0x05
    2574:	8c 83       	std	Y+4, r24	; 0x04
    2576:	11 96       	adiw	r26, 0x01	; 1
    2578:	8d 91       	ld	r24, X+
    257a:	9c 91       	ld	r25, X
    257c:	12 97       	sbiw	r26, 0x02	; 2
    257e:	9f 01       	movw	r18, r30
    2580:	22 5f       	subi	r18, 0xF2	; 242
    2582:	3f 4f       	sbci	r19, 0xFF	; 255
    2584:	82 17       	cp	r24, r18
    2586:	93 07       	cpc	r25, r19
    2588:	31 f4       	brne	.+12     	; 0x2596 <xTaskRemoveFromEventList+0x50>
    258a:	84 89       	ldd	r24, Z+20	; 0x14
    258c:	95 89       	ldd	r25, Z+21	; 0x15
    258e:	12 96       	adiw	r26, 0x02	; 2
    2590:	9c 93       	st	X, r25
    2592:	8e 93       	st	-X, r24
    2594:	11 97       	sbiw	r26, 0x01	; 1
    2596:	11 8e       	std	Z+25, r1	; 0x19
    2598:	10 8e       	std	Z+24, r1	; 0x18
    259a:	8c 91       	ld	r24, X
    259c:	81 50       	subi	r24, 0x01	; 1
    259e:	8c 93       	st	X, r24
    25a0:	80 91 c4 11 	lds	r24, 0x11C4	; 0x8011c4 <uxSchedulerSuspended>
    25a4:	81 11       	cpse	r24, r1
    25a6:	52 c0       	rjmp	.+164    	; 0x264c <xTaskRemoveFromEventList+0x106>
    25a8:	a4 85       	ldd	r26, Z+12	; 0x0c
    25aa:	b5 85       	ldd	r27, Z+13	; 0x0d
    25ac:	c6 81       	ldd	r28, Z+6	; 0x06
    25ae:	d7 81       	ldd	r29, Z+7	; 0x07
    25b0:	80 85       	ldd	r24, Z+8	; 0x08
    25b2:	91 85       	ldd	r25, Z+9	; 0x09
    25b4:	9f 83       	std	Y+7, r25	; 0x07
    25b6:	8e 83       	std	Y+6, r24	; 0x06
    25b8:	c0 85       	ldd	r28, Z+8	; 0x08
    25ba:	d1 85       	ldd	r29, Z+9	; 0x09
    25bc:	86 81       	ldd	r24, Z+6	; 0x06
    25be:	97 81       	ldd	r25, Z+7	; 0x07
    25c0:	9d 83       	std	Y+5, r25	; 0x05
    25c2:	8c 83       	std	Y+4, r24	; 0x04
    25c4:	11 96       	adiw	r26, 0x01	; 1
    25c6:	8d 91       	ld	r24, X+
    25c8:	9c 91       	ld	r25, X
    25ca:	12 97       	sbiw	r26, 0x02	; 2
    25cc:	9f 01       	movw	r18, r30
    25ce:	2e 5f       	subi	r18, 0xFE	; 254
    25d0:	3f 4f       	sbci	r19, 0xFF	; 255
    25d2:	82 17       	cp	r24, r18
    25d4:	93 07       	cpc	r25, r19
    25d6:	31 f4       	brne	.+12     	; 0x25e4 <xTaskRemoveFromEventList+0x9e>
    25d8:	80 85       	ldd	r24, Z+8	; 0x08
    25da:	91 85       	ldd	r25, Z+9	; 0x09
    25dc:	12 96       	adiw	r26, 0x02	; 2
    25de:	9c 93       	st	X, r25
    25e0:	8e 93       	st	-X, r24
    25e2:	11 97       	sbiw	r26, 0x01	; 1
    25e4:	15 86       	std	Z+13, r1	; 0x0d
    25e6:	14 86       	std	Z+12, r1	; 0x0c
    25e8:	8c 91       	ld	r24, X
    25ea:	81 50       	subi	r24, 0x01	; 1
    25ec:	8c 93       	st	X, r24
    25ee:	a2 8d       	ldd	r26, Z+26	; 0x1a
    25f0:	80 91 d3 11 	lds	r24, 0x11D3	; 0x8011d3 <uxTopReadyPriority>
    25f4:	8a 17       	cp	r24, r26
    25f6:	10 f4       	brcc	.+4      	; 0x25fc <xTaskRemoveFromEventList+0xb6>
    25f8:	a0 93 d3 11 	sts	0x11D3, r26	; 0x8011d3 <uxTopReadyPriority>
    25fc:	8b e0       	ldi	r24, 0x0B	; 11
    25fe:	8a 9f       	mul	r24, r26
    2600:	d0 01       	movw	r26, r0
    2602:	11 24       	eor	r1, r1
    2604:	ab 5e       	subi	r26, 0xEB	; 235
    2606:	bd 4e       	sbci	r27, 0xED	; 237
    2608:	11 96       	adiw	r26, 0x01	; 1
    260a:	0d 90       	ld	r0, X+
    260c:	bc 91       	ld	r27, X
    260e:	a0 2d       	mov	r26, r0
    2610:	b7 83       	std	Z+7, r27	; 0x07
    2612:	a6 83       	std	Z+6, r26	; 0x06
    2614:	16 96       	adiw	r26, 0x06	; 6
    2616:	4d 91       	ld	r20, X+
    2618:	5c 91       	ld	r21, X
    261a:	17 97       	sbiw	r26, 0x07	; 7
    261c:	51 87       	std	Z+9, r21	; 0x09
    261e:	40 87       	std	Z+8, r20	; 0x08
    2620:	16 96       	adiw	r26, 0x06	; 6
    2622:	cd 91       	ld	r28, X+
    2624:	dc 91       	ld	r29, X
    2626:	17 97       	sbiw	r26, 0x07	; 7
    2628:	3d 83       	std	Y+5, r19	; 0x05
    262a:	2c 83       	std	Y+4, r18	; 0x04
    262c:	17 96       	adiw	r26, 0x07	; 7
    262e:	3c 93       	st	X, r19
    2630:	2e 93       	st	-X, r18
    2632:	16 97       	sbiw	r26, 0x06	; 6
    2634:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2636:	8a 9f       	mul	r24, r26
    2638:	d0 01       	movw	r26, r0
    263a:	11 24       	eor	r1, r1
    263c:	ab 5e       	subi	r26, 0xEB	; 235
    263e:	bd 4e       	sbci	r27, 0xED	; 237
    2640:	b5 87       	std	Z+13, r27	; 0x0d
    2642:	a4 87       	std	Z+12, r26	; 0x0c
    2644:	8c 91       	ld	r24, X
    2646:	8f 5f       	subi	r24, 0xFF	; 255
    2648:	8c 93       	st	X, r24
    264a:	1c c0       	rjmp	.+56     	; 0x2684 <xTaskRemoveFromEventList+0x13e>
    264c:	40 ef       	ldi	r20, 0xF0	; 240
    264e:	51 e1       	ldi	r21, 0x11	; 17
    2650:	da 01       	movw	r26, r20
    2652:	11 96       	adiw	r26, 0x01	; 1
    2654:	cd 91       	ld	r28, X+
    2656:	dc 91       	ld	r29, X
    2658:	12 97       	sbiw	r26, 0x02	; 2
    265a:	d3 8b       	std	Z+19, r29	; 0x13
    265c:	c2 8b       	std	Z+18, r28	; 0x12
    265e:	8e 81       	ldd	r24, Y+6	; 0x06
    2660:	9f 81       	ldd	r25, Y+7	; 0x07
    2662:	95 8b       	std	Z+21, r25	; 0x15
    2664:	84 8b       	std	Z+20, r24	; 0x14
    2666:	8e 81       	ldd	r24, Y+6	; 0x06
    2668:	9f 81       	ldd	r25, Y+7	; 0x07
    266a:	dc 01       	movw	r26, r24
    266c:	15 96       	adiw	r26, 0x05	; 5
    266e:	3c 93       	st	X, r19
    2670:	2e 93       	st	-X, r18
    2672:	14 97       	sbiw	r26, 0x04	; 4
    2674:	3f 83       	std	Y+7, r19	; 0x07
    2676:	2e 83       	std	Y+6, r18	; 0x06
    2678:	51 8f       	std	Z+25, r21	; 0x19
    267a:	40 8f       	std	Z+24, r20	; 0x18
    267c:	da 01       	movw	r26, r20
    267e:	8c 91       	ld	r24, X
    2680:	8f 5f       	subi	r24, 0xFF	; 255
    2682:	8c 93       	st	X, r24
    2684:	92 8d       	ldd	r25, Z+26	; 0x1a
    2686:	e0 91 83 12 	lds	r30, 0x1283	; 0x801283 <pxCurrentTCB>
    268a:	f0 91 84 12 	lds	r31, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    268e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2690:	89 17       	cp	r24, r25
    2692:	20 f4       	brcc	.+8      	; 0x269c <xTaskRemoveFromEventList+0x156>
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	80 93 cd 11 	sts	0x11CD, r24	; 0x8011cd <xYieldPending>
    269a:	01 c0       	rjmp	.+2      	; 0x269e <xTaskRemoveFromEventList+0x158>
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	df 91       	pop	r29
    26a0:	cf 91       	pop	r28
    26a2:	08 95       	ret

000026a4 <vTaskRemoveFromUnorderedEventList>:
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	dc 01       	movw	r26, r24
    26aa:	70 68       	ori	r23, 0x80	; 128
    26ac:	4d 93       	st	X+, r20
    26ae:	5d 93       	st	X+, r21
    26b0:	6d 93       	st	X+, r22
    26b2:	7c 93       	st	X, r23
    26b4:	13 97       	sbiw	r26, 0x03	; 3
    26b6:	18 96       	adiw	r26, 0x08	; 8
    26b8:	ed 91       	ld	r30, X+
    26ba:	fc 91       	ld	r31, X
    26bc:	19 97       	sbiw	r26, 0x09	; 9
    26be:	1a 96       	adiw	r26, 0x0a	; 10
    26c0:	4d 91       	ld	r20, X+
    26c2:	5c 91       	ld	r21, X
    26c4:	1b 97       	sbiw	r26, 0x0b	; 11
    26c6:	14 96       	adiw	r26, 0x04	; 4
    26c8:	8d 91       	ld	r24, X+
    26ca:	9c 91       	ld	r25, X
    26cc:	15 97       	sbiw	r26, 0x05	; 5
    26ce:	16 96       	adiw	r26, 0x06	; 6
    26d0:	2d 91       	ld	r18, X+
    26d2:	3c 91       	ld	r19, X
    26d4:	17 97       	sbiw	r26, 0x07	; 7
    26d6:	ec 01       	movw	r28, r24
    26d8:	3f 83       	std	Y+7, r19	; 0x07
    26da:	2e 83       	std	Y+6, r18	; 0x06
    26dc:	16 96       	adiw	r26, 0x06	; 6
    26de:	8d 91       	ld	r24, X+
    26e0:	9c 91       	ld	r25, X
    26e2:	17 97       	sbiw	r26, 0x07	; 7
    26e4:	14 96       	adiw	r26, 0x04	; 4
    26e6:	2d 91       	ld	r18, X+
    26e8:	3c 91       	ld	r19, X
    26ea:	15 97       	sbiw	r26, 0x05	; 5
    26ec:	ec 01       	movw	r28, r24
    26ee:	3d 83       	std	Y+5, r19	; 0x05
    26f0:	2c 83       	std	Y+4, r18	; 0x04
    26f2:	ea 01       	movw	r28, r20
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	9a 81       	ldd	r25, Y+2	; 0x02
    26f8:	a8 17       	cp	r26, r24
    26fa:	b9 07       	cpc	r27, r25
    26fc:	31 f4       	brne	.+12     	; 0x270a <vTaskRemoveFromUnorderedEventList+0x66>
    26fe:	16 96       	adiw	r26, 0x06	; 6
    2700:	8d 91       	ld	r24, X+
    2702:	9c 91       	ld	r25, X
    2704:	17 97       	sbiw	r26, 0x07	; 7
    2706:	9a 83       	std	Y+2, r25	; 0x02
    2708:	89 83       	std	Y+1, r24	; 0x01
    270a:	1b 96       	adiw	r26, 0x0b	; 11
    270c:	1c 92       	st	X, r1
    270e:	1e 92       	st	-X, r1
    2710:	1a 97       	sbiw	r26, 0x0a	; 10
    2712:	da 01       	movw	r26, r20
    2714:	8c 91       	ld	r24, X
    2716:	81 50       	subi	r24, 0x01	; 1
    2718:	8c 93       	st	X, r24
    271a:	a4 85       	ldd	r26, Z+12	; 0x0c
    271c:	b5 85       	ldd	r27, Z+13	; 0x0d
    271e:	c6 81       	ldd	r28, Z+6	; 0x06
    2720:	d7 81       	ldd	r29, Z+7	; 0x07
    2722:	80 85       	ldd	r24, Z+8	; 0x08
    2724:	91 85       	ldd	r25, Z+9	; 0x09
    2726:	9f 83       	std	Y+7, r25	; 0x07
    2728:	8e 83       	std	Y+6, r24	; 0x06
    272a:	c0 85       	ldd	r28, Z+8	; 0x08
    272c:	d1 85       	ldd	r29, Z+9	; 0x09
    272e:	86 81       	ldd	r24, Z+6	; 0x06
    2730:	97 81       	ldd	r25, Z+7	; 0x07
    2732:	9d 83       	std	Y+5, r25	; 0x05
    2734:	8c 83       	std	Y+4, r24	; 0x04
    2736:	11 96       	adiw	r26, 0x01	; 1
    2738:	8d 91       	ld	r24, X+
    273a:	9c 91       	ld	r25, X
    273c:	12 97       	sbiw	r26, 0x02	; 2
    273e:	9f 01       	movw	r18, r30
    2740:	2e 5f       	subi	r18, 0xFE	; 254
    2742:	3f 4f       	sbci	r19, 0xFF	; 255
    2744:	82 17       	cp	r24, r18
    2746:	93 07       	cpc	r25, r19
    2748:	31 f4       	brne	.+12     	; 0x2756 <vTaskRemoveFromUnorderedEventList+0xb2>
    274a:	80 85       	ldd	r24, Z+8	; 0x08
    274c:	91 85       	ldd	r25, Z+9	; 0x09
    274e:	12 96       	adiw	r26, 0x02	; 2
    2750:	9c 93       	st	X, r25
    2752:	8e 93       	st	-X, r24
    2754:	11 97       	sbiw	r26, 0x01	; 1
    2756:	15 86       	std	Z+13, r1	; 0x0d
    2758:	14 86       	std	Z+12, r1	; 0x0c
    275a:	8c 91       	ld	r24, X
    275c:	81 50       	subi	r24, 0x01	; 1
    275e:	8c 93       	st	X, r24
    2760:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2762:	80 91 d3 11 	lds	r24, 0x11D3	; 0x8011d3 <uxTopReadyPriority>
    2766:	8a 17       	cp	r24, r26
    2768:	10 f4       	brcc	.+4      	; 0x276e <vTaskRemoveFromUnorderedEventList+0xca>
    276a:	a0 93 d3 11 	sts	0x11D3, r26	; 0x8011d3 <uxTopReadyPriority>
    276e:	8b e0       	ldi	r24, 0x0B	; 11
    2770:	8a 9f       	mul	r24, r26
    2772:	d0 01       	movw	r26, r0
    2774:	11 24       	eor	r1, r1
    2776:	ab 5e       	subi	r26, 0xEB	; 235
    2778:	bd 4e       	sbci	r27, 0xED	; 237
    277a:	11 96       	adiw	r26, 0x01	; 1
    277c:	0d 90       	ld	r0, X+
    277e:	bc 91       	ld	r27, X
    2780:	a0 2d       	mov	r26, r0
    2782:	b7 83       	std	Z+7, r27	; 0x07
    2784:	a6 83       	std	Z+6, r26	; 0x06
    2786:	16 96       	adiw	r26, 0x06	; 6
    2788:	4d 91       	ld	r20, X+
    278a:	5c 91       	ld	r21, X
    278c:	17 97       	sbiw	r26, 0x07	; 7
    278e:	51 87       	std	Z+9, r21	; 0x09
    2790:	40 87       	std	Z+8, r20	; 0x08
    2792:	16 96       	adiw	r26, 0x06	; 6
    2794:	cd 91       	ld	r28, X+
    2796:	dc 91       	ld	r29, X
    2798:	17 97       	sbiw	r26, 0x07	; 7
    279a:	3d 83       	std	Y+5, r19	; 0x05
    279c:	2c 83       	std	Y+4, r18	; 0x04
    279e:	17 96       	adiw	r26, 0x07	; 7
    27a0:	3c 93       	st	X, r19
    27a2:	2e 93       	st	-X, r18
    27a4:	16 97       	sbiw	r26, 0x06	; 6
    27a6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    27a8:	8a 9f       	mul	r24, r26
    27aa:	d0 01       	movw	r26, r0
    27ac:	11 24       	eor	r1, r1
    27ae:	ab 5e       	subi	r26, 0xEB	; 235
    27b0:	bd 4e       	sbci	r27, 0xED	; 237
    27b2:	b5 87       	std	Z+13, r27	; 0x0d
    27b4:	a4 87       	std	Z+12, r26	; 0x0c
    27b6:	8c 91       	ld	r24, X
    27b8:	8f 5f       	subi	r24, 0xFF	; 255
    27ba:	8c 93       	st	X, r24
    27bc:	92 8d       	ldd	r25, Z+26	; 0x1a
    27be:	e0 91 83 12 	lds	r30, 0x1283	; 0x801283 <pxCurrentTCB>
    27c2:	f0 91 84 12 	lds	r31, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    27c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    27c8:	89 17       	cp	r24, r25
    27ca:	18 f4       	brcc	.+6      	; 0x27d2 <vTaskRemoveFromUnorderedEventList+0x12e>
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	80 93 cd 11 	sts	0x11CD, r24	; 0x8011cd <xYieldPending>
    27d2:	df 91       	pop	r29
    27d4:	cf 91       	pop	r28
    27d6:	08 95       	ret

000027d8 <vTaskSetTimeOutState>:
    27d8:	0f b6       	in	r0, 0x3f	; 63
    27da:	f8 94       	cli
    27dc:	0f 92       	push	r0
    27de:	20 91 cc 11 	lds	r18, 0x11CC	; 0x8011cc <xNumOfOverflows>
    27e2:	fc 01       	movw	r30, r24
    27e4:	20 83       	st	Z, r18
    27e6:	40 91 d4 11 	lds	r20, 0x11D4	; 0x8011d4 <xTickCount>
    27ea:	50 91 d5 11 	lds	r21, 0x11D5	; 0x8011d5 <xTickCount+0x1>
    27ee:	60 91 d6 11 	lds	r22, 0x11D6	; 0x8011d6 <xTickCount+0x2>
    27f2:	70 91 d7 11 	lds	r23, 0x11D7	; 0x8011d7 <xTickCount+0x3>
    27f6:	41 83       	std	Z+1, r20	; 0x01
    27f8:	52 83       	std	Z+2, r21	; 0x02
    27fa:	63 83       	std	Z+3, r22	; 0x03
    27fc:	74 83       	std	Z+4, r23	; 0x04
    27fe:	0f 90       	pop	r0
    2800:	0f be       	out	0x3f, r0	; 63
    2802:	08 95       	ret

00002804 <vTaskInternalSetTimeOutState>:
    2804:	20 91 cc 11 	lds	r18, 0x11CC	; 0x8011cc <xNumOfOverflows>
    2808:	fc 01       	movw	r30, r24
    280a:	20 83       	st	Z, r18
    280c:	40 91 d4 11 	lds	r20, 0x11D4	; 0x8011d4 <xTickCount>
    2810:	50 91 d5 11 	lds	r21, 0x11D5	; 0x8011d5 <xTickCount+0x1>
    2814:	60 91 d6 11 	lds	r22, 0x11D6	; 0x8011d6 <xTickCount+0x2>
    2818:	70 91 d7 11 	lds	r23, 0x11D7	; 0x8011d7 <xTickCount+0x3>
    281c:	41 83       	std	Z+1, r20	; 0x01
    281e:	52 83       	std	Z+2, r21	; 0x02
    2820:	63 83       	std	Z+3, r22	; 0x03
    2822:	74 83       	std	Z+4, r23	; 0x04
    2824:	08 95       	ret

00002826 <xTaskCheckForTimeOut>:
    2826:	8f 92       	push	r8
    2828:	9f 92       	push	r9
    282a:	af 92       	push	r10
    282c:	bf 92       	push	r11
    282e:	cf 92       	push	r12
    2830:	df 92       	push	r13
    2832:	ef 92       	push	r14
    2834:	ff 92       	push	r15
    2836:	0f 93       	push	r16
    2838:	1f 93       	push	r17
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	fb 01       	movw	r30, r22
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	0f 92       	push	r0
    2846:	c0 90 d4 11 	lds	r12, 0x11D4	; 0x8011d4 <xTickCount>
    284a:	d0 90 d5 11 	lds	r13, 0x11D5	; 0x8011d5 <xTickCount+0x1>
    284e:	e0 90 d6 11 	lds	r14, 0x11D6	; 0x8011d6 <xTickCount+0x2>
    2852:	f0 90 d7 11 	lds	r15, 0x11D7	; 0x8011d7 <xTickCount+0x3>
    2856:	dc 01       	movw	r26, r24
    2858:	11 96       	adiw	r26, 0x01	; 1
    285a:	0d 91       	ld	r16, X+
    285c:	1d 91       	ld	r17, X+
    285e:	2d 91       	ld	r18, X+
    2860:	3c 91       	ld	r19, X
    2862:	14 97       	sbiw	r26, 0x04	; 4
    2864:	46 01       	movw	r8, r12
    2866:	57 01       	movw	r10, r14
    2868:	80 1a       	sub	r8, r16
    286a:	91 0a       	sbc	r9, r17
    286c:	a2 0a       	sbc	r10, r18
    286e:	b3 0a       	sbc	r11, r19
    2870:	40 81       	ld	r20, Z
    2872:	51 81       	ldd	r21, Z+1	; 0x01
    2874:	62 81       	ldd	r22, Z+2	; 0x02
    2876:	73 81       	ldd	r23, Z+3	; 0x03
    2878:	4f 3f       	cpi	r20, 0xFF	; 255
    287a:	bf ef       	ldi	r27, 0xFF	; 255
    287c:	5b 07       	cpc	r21, r27
    287e:	6b 07       	cpc	r22, r27
    2880:	7b 07       	cpc	r23, r27
    2882:	39 f1       	breq	.+78     	; 0x28d2 <xTaskCheckForTimeOut+0xac>
    2884:	ec 01       	movw	r28, r24
    2886:	b8 81       	ld	r27, Y
    2888:	a0 91 cc 11 	lds	r26, 0x11CC	; 0x8011cc <xNumOfOverflows>
    288c:	ba 17       	cp	r27, r26
    288e:	59 f0       	breq	.+22     	; 0x28a6 <xTaskCheckForTimeOut+0x80>
    2890:	c0 16       	cp	r12, r16
    2892:	d1 06       	cpc	r13, r17
    2894:	e2 06       	cpc	r14, r18
    2896:	f3 06       	cpc	r15, r19
    2898:	30 f0       	brcs	.+12     	; 0x28a6 <xTaskCheckForTimeOut+0x80>
    289a:	10 82       	st	Z, r1
    289c:	11 82       	std	Z+1, r1	; 0x01
    289e:	12 82       	std	Z+2, r1	; 0x02
    28a0:	13 82       	std	Z+3, r1	; 0x03
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	17 c0       	rjmp	.+46     	; 0x28d4 <xTaskCheckForTimeOut+0xae>
    28a6:	84 16       	cp	r8, r20
    28a8:	95 06       	cpc	r9, r21
    28aa:	a6 06       	cpc	r10, r22
    28ac:	b7 06       	cpc	r11, r23
    28ae:	58 f4       	brcc	.+22     	; 0x28c6 <xTaskCheckForTimeOut+0xa0>
    28b0:	48 19       	sub	r20, r8
    28b2:	59 09       	sbc	r21, r9
    28b4:	6a 09       	sbc	r22, r10
    28b6:	7b 09       	sbc	r23, r11
    28b8:	40 83       	st	Z, r20
    28ba:	51 83       	std	Z+1, r21	; 0x01
    28bc:	62 83       	std	Z+2, r22	; 0x02
    28be:	73 83       	std	Z+3, r23	; 0x03
    28c0:	a1 df       	rcall	.-190    	; 0x2804 <vTaskInternalSetTimeOutState>
    28c2:	80 e0       	ldi	r24, 0x00	; 0
    28c4:	07 c0       	rjmp	.+14     	; 0x28d4 <xTaskCheckForTimeOut+0xae>
    28c6:	10 82       	st	Z, r1
    28c8:	11 82       	std	Z+1, r1	; 0x01
    28ca:	12 82       	std	Z+2, r1	; 0x02
    28cc:	13 82       	std	Z+3, r1	; 0x03
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	01 c0       	rjmp	.+2      	; 0x28d4 <xTaskCheckForTimeOut+0xae>
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	0f 90       	pop	r0
    28d6:	0f be       	out	0x3f, r0	; 63
    28d8:	df 91       	pop	r29
    28da:	cf 91       	pop	r28
    28dc:	1f 91       	pop	r17
    28de:	0f 91       	pop	r16
    28e0:	ff 90       	pop	r15
    28e2:	ef 90       	pop	r14
    28e4:	df 90       	pop	r13
    28e6:	cf 90       	pop	r12
    28e8:	bf 90       	pop	r11
    28ea:	af 90       	pop	r10
    28ec:	9f 90       	pop	r9
    28ee:	8f 90       	pop	r8
    28f0:	08 95       	ret

000028f2 <vTaskMissedYield>:
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	80 93 cd 11 	sts	0x11CD, r24	; 0x8011cd <xYieldPending>
    28f8:	08 95       	ret

000028fa <xTaskGetCurrentTaskHandle>:
    28fa:	80 91 83 12 	lds	r24, 0x1283	; 0x801283 <pxCurrentTCB>
    28fe:	90 91 84 12 	lds	r25, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    2902:	08 95       	ret

00002904 <xTaskGetSchedulerState>:
    2904:	80 91 d2 11 	lds	r24, 0x11D2	; 0x8011d2 <xSchedulerRunning>
    2908:	88 23       	and	r24, r24
    290a:	31 f0       	breq	.+12     	; 0x2918 <xTaskGetSchedulerState+0x14>
    290c:	80 91 c4 11 	lds	r24, 0x11C4	; 0x8011c4 <uxSchedulerSuspended>
    2910:	81 11       	cpse	r24, r1
    2912:	04 c0       	rjmp	.+8      	; 0x291c <xTaskGetSchedulerState+0x18>
    2914:	82 e0       	ldi	r24, 0x02	; 2
    2916:	08 95       	ret
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	08 95       	ret
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	08 95       	ret

00002920 <xTaskPriorityDisinherit>:
    2920:	0f 93       	push	r16
    2922:	1f 93       	push	r17
    2924:	cf 93       	push	r28
    2926:	df 93       	push	r29
    2928:	fc 01       	movw	r30, r24
    292a:	89 2b       	or	r24, r25
    292c:	09 f4       	brne	.+2      	; 0x2930 <xTaskPriorityDisinherit+0x10>
    292e:	49 c0       	rjmp	.+146    	; 0x29c2 <xTaskPriorityDisinherit+0xa2>
    2930:	86 a5       	ldd	r24, Z+46	; 0x2e
    2932:	81 50       	subi	r24, 0x01	; 1
    2934:	86 a7       	std	Z+46, r24	; 0x2e
    2936:	22 8d       	ldd	r18, Z+26	; 0x1a
    2938:	95 a5       	ldd	r25, Z+45	; 0x2d
    293a:	29 17       	cp	r18, r25
    293c:	09 f4       	brne	.+2      	; 0x2940 <xTaskPriorityDisinherit+0x20>
    293e:	43 c0       	rjmp	.+134    	; 0x29c6 <xTaskPriorityDisinherit+0xa6>
    2940:	81 11       	cpse	r24, r1
    2942:	43 c0       	rjmp	.+134    	; 0x29ca <xTaskPriorityDisinherit+0xaa>
    2944:	ef 01       	movw	r28, r30
    2946:	8f 01       	movw	r16, r30
    2948:	0e 5f       	subi	r16, 0xFE	; 254
    294a:	1f 4f       	sbci	r17, 0xFF	; 255
    294c:	c8 01       	movw	r24, r16
    294e:	0e 94 3d 05 	call	0xa7a	; 0xa7a <uxListRemove>
    2952:	ed a5       	ldd	r30, Y+45	; 0x2d
    2954:	ea 8f       	std	Y+26, r30	; 0x1a
    2956:	8a e0       	ldi	r24, 0x0A	; 10
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	a0 e0       	ldi	r26, 0x00	; 0
    295c:	b0 e0       	ldi	r27, 0x00	; 0
    295e:	8e 1b       	sub	r24, r30
    2960:	91 09       	sbc	r25, r1
    2962:	a1 09       	sbc	r26, r1
    2964:	b1 09       	sbc	r27, r1
    2966:	8e 87       	std	Y+14, r24	; 0x0e
    2968:	9f 87       	std	Y+15, r25	; 0x0f
    296a:	a8 8b       	std	Y+16, r26	; 0x10
    296c:	b9 8b       	std	Y+17, r27	; 0x11
    296e:	80 91 d3 11 	lds	r24, 0x11D3	; 0x8011d3 <uxTopReadyPriority>
    2972:	8e 17       	cp	r24, r30
    2974:	10 f4       	brcc	.+4      	; 0x297a <xTaskPriorityDisinherit+0x5a>
    2976:	e0 93 d3 11 	sts	0x11D3, r30	; 0x8011d3 <uxTopReadyPriority>
    297a:	8b e0       	ldi	r24, 0x0B	; 11
    297c:	8e 9f       	mul	r24, r30
    297e:	f0 01       	movw	r30, r0
    2980:	11 24       	eor	r1, r1
    2982:	eb 5e       	subi	r30, 0xEB	; 235
    2984:	fd 4e       	sbci	r31, 0xED	; 237
    2986:	01 80       	ldd	r0, Z+1	; 0x01
    2988:	f2 81       	ldd	r31, Z+2	; 0x02
    298a:	e0 2d       	mov	r30, r0
    298c:	ff 83       	std	Y+7, r31	; 0x07
    298e:	ee 83       	std	Y+6, r30	; 0x06
    2990:	26 81       	ldd	r18, Z+6	; 0x06
    2992:	37 81       	ldd	r19, Z+7	; 0x07
    2994:	39 87       	std	Y+9, r19	; 0x09
    2996:	28 87       	std	Y+8, r18	; 0x08
    2998:	a6 81       	ldd	r26, Z+6	; 0x06
    299a:	b7 81       	ldd	r27, Z+7	; 0x07
    299c:	15 96       	adiw	r26, 0x05	; 5
    299e:	1c 93       	st	X, r17
    29a0:	0e 93       	st	-X, r16
    29a2:	14 97       	sbiw	r26, 0x04	; 4
    29a4:	17 83       	std	Z+7, r17	; 0x07
    29a6:	06 83       	std	Z+6, r16	; 0x06
    29a8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    29aa:	8e 9f       	mul	r24, r30
    29ac:	f0 01       	movw	r30, r0
    29ae:	11 24       	eor	r1, r1
    29b0:	eb 5e       	subi	r30, 0xEB	; 235
    29b2:	fd 4e       	sbci	r31, 0xED	; 237
    29b4:	fd 87       	std	Y+13, r31	; 0x0d
    29b6:	ec 87       	std	Y+12, r30	; 0x0c
    29b8:	80 81       	ld	r24, Z
    29ba:	8f 5f       	subi	r24, 0xFF	; 255
    29bc:	80 83       	st	Z, r24
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	05 c0       	rjmp	.+10     	; 0x29cc <xTaskPriorityDisinherit+0xac>
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	03 c0       	rjmp	.+6      	; 0x29cc <xTaskPriorityDisinherit+0xac>
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	01 c0       	rjmp	.+2      	; 0x29cc <xTaskPriorityDisinherit+0xac>
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	df 91       	pop	r29
    29ce:	cf 91       	pop	r28
    29d0:	1f 91       	pop	r17
    29d2:	0f 91       	pop	r16
    29d4:	08 95       	ret

000029d6 <uxTaskResetEventItemValue>:
    29d6:	cf 92       	push	r12
    29d8:	df 92       	push	r13
    29da:	ef 92       	push	r14
    29dc:	ff 92       	push	r15
    29de:	e0 91 83 12 	lds	r30, 0x1283	; 0x801283 <pxCurrentTCB>
    29e2:	f0 91 84 12 	lds	r31, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    29e6:	66 85       	ldd	r22, Z+14	; 0x0e
    29e8:	77 85       	ldd	r23, Z+15	; 0x0f
    29ea:	80 89       	ldd	r24, Z+16	; 0x10
    29ec:	91 89       	ldd	r25, Z+17	; 0x11
    29ee:	e0 91 83 12 	lds	r30, 0x1283	; 0x801283 <pxCurrentTCB>
    29f2:	f0 91 84 12 	lds	r31, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    29f6:	a0 91 83 12 	lds	r26, 0x1283	; 0x801283 <pxCurrentTCB>
    29fa:	b0 91 84 12 	lds	r27, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    29fe:	5a 96       	adiw	r26, 0x1a	; 26
    2a00:	2c 91       	ld	r18, X
    2a02:	0f 2e       	mov	r0, r31
    2a04:	fa e0       	ldi	r31, 0x0A	; 10
    2a06:	cf 2e       	mov	r12, r31
    2a08:	d1 2c       	mov	r13, r1
    2a0a:	e1 2c       	mov	r14, r1
    2a0c:	f1 2c       	mov	r15, r1
    2a0e:	f0 2d       	mov	r31, r0
    2a10:	c2 1a       	sub	r12, r18
    2a12:	d1 08       	sbc	r13, r1
    2a14:	e1 08       	sbc	r14, r1
    2a16:	f1 08       	sbc	r15, r1
    2a18:	c6 86       	std	Z+14, r12	; 0x0e
    2a1a:	d7 86       	std	Z+15, r13	; 0x0f
    2a1c:	e0 8a       	std	Z+16, r14	; 0x10
    2a1e:	f1 8a       	std	Z+17, r15	; 0x11
    2a20:	ff 90       	pop	r15
    2a22:	ef 90       	pop	r14
    2a24:	df 90       	pop	r13
    2a26:	cf 90       	pop	r12
    2a28:	08 95       	ret

00002a2a <xTaskGenericNotifyWait>:
    2a2a:	4f 92       	push	r4
    2a2c:	5f 92       	push	r5
    2a2e:	6f 92       	push	r6
    2a30:	7f 92       	push	r7
    2a32:	af 92       	push	r10
    2a34:	bf 92       	push	r11
    2a36:	cf 92       	push	r12
    2a38:	df 92       	push	r13
    2a3a:	ef 92       	push	r14
    2a3c:	ff 92       	push	r15
    2a3e:	0f 93       	push	r16
    2a40:	1f 93       	push	r17
    2a42:	cf 93       	push	r28
    2a44:	df 93       	push	r29
    2a46:	28 01       	movw	r4, r16
    2a48:	39 01       	movw	r6, r18
    2a4a:	0f b6       	in	r0, 0x3f	; 63
    2a4c:	f8 94       	cli
    2a4e:	0f 92       	push	r0
    2a50:	e0 91 83 12 	lds	r30, 0x1283	; 0x801283 <pxCurrentTCB>
    2a54:	f0 91 84 12 	lds	r31, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    2a58:	c8 2f       	mov	r28, r24
    2a5a:	d0 e0       	ldi	r29, 0x00	; 0
    2a5c:	ec 0f       	add	r30, r28
    2a5e:	fd 1f       	adc	r31, r29
    2a60:	83 a9       	ldd	r24, Z+51	; 0x33
    2a62:	82 30       	cpi	r24, 0x02	; 2
    2a64:	71 f1       	breq	.+92     	; 0x2ac2 <xTaskGenericNotifyWait+0x98>
    2a66:	e0 91 83 12 	lds	r30, 0x1283	; 0x801283 <pxCurrentTCB>
    2a6a:	f0 91 84 12 	lds	r31, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    2a6e:	ce 01       	movw	r24, r28
    2a70:	88 0f       	add	r24, r24
    2a72:	99 1f       	adc	r25, r25
    2a74:	88 0f       	add	r24, r24
    2a76:	99 1f       	adc	r25, r25
    2a78:	e8 0f       	add	r30, r24
    2a7a:	f9 1f       	adc	r31, r25
    2a7c:	87 a5       	ldd	r24, Z+47	; 0x2f
    2a7e:	90 a9       	ldd	r25, Z+48	; 0x30
    2a80:	a1 a9       	ldd	r26, Z+49	; 0x31
    2a82:	b2 a9       	ldd	r27, Z+50	; 0x32
    2a84:	40 95       	com	r20
    2a86:	50 95       	com	r21
    2a88:	60 95       	com	r22
    2a8a:	70 95       	com	r23
    2a8c:	48 23       	and	r20, r24
    2a8e:	59 23       	and	r21, r25
    2a90:	6a 23       	and	r22, r26
    2a92:	7b 23       	and	r23, r27
    2a94:	47 a7       	std	Z+47, r20	; 0x2f
    2a96:	50 ab       	std	Z+48, r21	; 0x30
    2a98:	61 ab       	std	Z+49, r22	; 0x31
    2a9a:	72 ab       	std	Z+50, r23	; 0x32
    2a9c:	e0 91 83 12 	lds	r30, 0x1283	; 0x801283 <pxCurrentTCB>
    2aa0:	f0 91 84 12 	lds	r31, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    2aa4:	ec 0f       	add	r30, r28
    2aa6:	fd 1f       	adc	r31, r29
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	83 ab       	std	Z+51, r24	; 0x33
    2aac:	a1 14       	cp	r10, r1
    2aae:	b1 04       	cpc	r11, r1
    2ab0:	c1 04       	cpc	r12, r1
    2ab2:	d1 04       	cpc	r13, r1
    2ab4:	31 f0       	breq	.+12     	; 0x2ac2 <xTaskGenericNotifyWait+0x98>
    2ab6:	41 e0       	ldi	r20, 0x01	; 1
    2ab8:	c6 01       	movw	r24, r12
    2aba:	b5 01       	movw	r22, r10
    2abc:	7a d8       	rcall	.-3852   	; 0x1bb2 <prvAddCurrentTaskToDelayedList>
    2abe:	0e 94 b9 05 	call	0xb72	; 0xb72 <vPortYield>
    2ac2:	0f 90       	pop	r0
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	0f b6       	in	r0, 0x3f	; 63
    2ac8:	f8 94       	cli
    2aca:	0f 92       	push	r0
    2acc:	e1 14       	cp	r14, r1
    2ace:	f1 04       	cpc	r15, r1
    2ad0:	a1 f0       	breq	.+40     	; 0x2afa <xTaskGenericNotifyWait+0xd0>
    2ad2:	e0 91 83 12 	lds	r30, 0x1283	; 0x801283 <pxCurrentTCB>
    2ad6:	f0 91 84 12 	lds	r31, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    2ada:	ce 01       	movw	r24, r28
    2adc:	88 0f       	add	r24, r24
    2ade:	99 1f       	adc	r25, r25
    2ae0:	88 0f       	add	r24, r24
    2ae2:	99 1f       	adc	r25, r25
    2ae4:	e8 0f       	add	r30, r24
    2ae6:	f9 1f       	adc	r31, r25
    2ae8:	87 a5       	ldd	r24, Z+47	; 0x2f
    2aea:	90 a9       	ldd	r25, Z+48	; 0x30
    2aec:	a1 a9       	ldd	r26, Z+49	; 0x31
    2aee:	b2 a9       	ldd	r27, Z+50	; 0x32
    2af0:	f7 01       	movw	r30, r14
    2af2:	80 83       	st	Z, r24
    2af4:	91 83       	std	Z+1, r25	; 0x01
    2af6:	a2 83       	std	Z+2, r26	; 0x02
    2af8:	b3 83       	std	Z+3, r27	; 0x03
    2afa:	e0 91 83 12 	lds	r30, 0x1283	; 0x801283 <pxCurrentTCB>
    2afe:	f0 91 84 12 	lds	r31, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    2b02:	ec 0f       	add	r30, r28
    2b04:	fd 1f       	adc	r31, r29
    2b06:	83 a9       	ldd	r24, Z+51	; 0x33
    2b08:	82 30       	cpi	r24, 0x02	; 2
    2b0a:	e9 f4       	brne	.+58     	; 0x2b46 <xTaskGenericNotifyWait+0x11c>
    2b0c:	e0 91 83 12 	lds	r30, 0x1283	; 0x801283 <pxCurrentTCB>
    2b10:	f0 91 84 12 	lds	r31, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    2b14:	ce 01       	movw	r24, r28
    2b16:	88 0f       	add	r24, r24
    2b18:	99 1f       	adc	r25, r25
    2b1a:	88 0f       	add	r24, r24
    2b1c:	99 1f       	adc	r25, r25
    2b1e:	e8 0f       	add	r30, r24
    2b20:	f9 1f       	adc	r31, r25
    2b22:	87 a5       	ldd	r24, Z+47	; 0x2f
    2b24:	90 a9       	ldd	r25, Z+48	; 0x30
    2b26:	a1 a9       	ldd	r26, Z+49	; 0x31
    2b28:	b2 a9       	ldd	r27, Z+50	; 0x32
    2b2a:	40 94       	com	r4
    2b2c:	50 94       	com	r5
    2b2e:	60 94       	com	r6
    2b30:	70 94       	com	r7
    2b32:	48 22       	and	r4, r24
    2b34:	59 22       	and	r5, r25
    2b36:	6a 22       	and	r6, r26
    2b38:	7b 22       	and	r7, r27
    2b3a:	47 a6       	std	Z+47, r4	; 0x2f
    2b3c:	50 aa       	std	Z+48, r5	; 0x30
    2b3e:	61 aa       	std	Z+49, r6	; 0x31
    2b40:	72 aa       	std	Z+50, r7	; 0x32
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	01 c0       	rjmp	.+2      	; 0x2b48 <xTaskGenericNotifyWait+0x11e>
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	20 91 83 12 	lds	r18, 0x1283	; 0x801283 <pxCurrentTCB>
    2b4c:	30 91 84 12 	lds	r19, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    2b50:	c2 0f       	add	r28, r18
    2b52:	d3 1f       	adc	r29, r19
    2b54:	1b aa       	std	Y+51, r1	; 0x33
    2b56:	0f 90       	pop	r0
    2b58:	0f be       	out	0x3f, r0	; 63
    2b5a:	df 91       	pop	r29
    2b5c:	cf 91       	pop	r28
    2b5e:	1f 91       	pop	r17
    2b60:	0f 91       	pop	r16
    2b62:	ff 90       	pop	r15
    2b64:	ef 90       	pop	r14
    2b66:	df 90       	pop	r13
    2b68:	cf 90       	pop	r12
    2b6a:	bf 90       	pop	r11
    2b6c:	af 90       	pop	r10
    2b6e:	7f 90       	pop	r7
    2b70:	6f 90       	pop	r6
    2b72:	5f 90       	pop	r5
    2b74:	4f 90       	pop	r4
    2b76:	08 95       	ret

00002b78 <xTaskGenericNotify>:
    2b78:	8f 92       	push	r8
    2b7a:	9f 92       	push	r9
    2b7c:	af 92       	push	r10
    2b7e:	bf 92       	push	r11
    2b80:	ef 92       	push	r14
    2b82:	ff 92       	push	r15
    2b84:	0f 93       	push	r16
    2b86:	cf 93       	push	r28
    2b88:	df 93       	push	r29
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	0f b6       	in	r0, 0x3f	; 63
    2b8e:	f8 94       	cli
    2b90:	0f 92       	push	r0
    2b92:	e1 14       	cp	r14, r1
    2b94:	f1 04       	cpc	r15, r1
    2b96:	89 f0       	breq	.+34     	; 0x2bba <xTaskGenericNotify+0x42>
    2b98:	e6 2f       	mov	r30, r22
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	ee 0f       	add	r30, r30
    2b9e:	ff 1f       	adc	r31, r31
    2ba0:	ee 0f       	add	r30, r30
    2ba2:	ff 1f       	adc	r31, r31
    2ba4:	e8 0f       	add	r30, r24
    2ba6:	f9 1f       	adc	r31, r25
    2ba8:	87 a4       	ldd	r8, Z+47	; 0x2f
    2baa:	90 a8       	ldd	r9, Z+48	; 0x30
    2bac:	a1 a8       	ldd	r10, Z+49	; 0x31
    2bae:	b2 a8       	ldd	r11, Z+50	; 0x32
    2bb0:	f7 01       	movw	r30, r14
    2bb2:	80 82       	st	Z, r8
    2bb4:	91 82       	std	Z+1, r9	; 0x01
    2bb6:	a2 82       	std	Z+2, r10	; 0x02
    2bb8:	b3 82       	std	Z+3, r11	; 0x03
    2bba:	70 e0       	ldi	r23, 0x00	; 0
    2bbc:	fd 01       	movw	r30, r26
    2bbe:	e6 0f       	add	r30, r22
    2bc0:	f7 1f       	adc	r31, r23
    2bc2:	83 a9       	ldd	r24, Z+51	; 0x33
    2bc4:	92 e0       	ldi	r25, 0x02	; 2
    2bc6:	93 ab       	std	Z+51, r25	; 0x33
    2bc8:	02 30       	cpi	r16, 0x02	; 2
    2bca:	01 f1       	breq	.+64     	; 0x2c0c <xTaskGenericNotify+0x94>
    2bcc:	18 f4       	brcc	.+6      	; 0x2bd4 <xTaskGenericNotify+0x5c>
    2bce:	01 30       	cpi	r16, 0x01	; 1
    2bd0:	31 f0       	breq	.+12     	; 0x2bde <xTaskGenericNotify+0x66>
    2bd2:	4d c0       	rjmp	.+154    	; 0x2c6e <xTaskGenericNotify+0xf6>
    2bd4:	03 30       	cpi	r16, 0x03	; 3
    2bd6:	79 f1       	breq	.+94     	; 0x2c36 <xTaskGenericNotify+0xbe>
    2bd8:	04 30       	cpi	r16, 0x04	; 4
    2bda:	d1 f1       	breq	.+116    	; 0x2c50 <xTaskGenericNotify+0xd8>
    2bdc:	48 c0       	rjmp	.+144    	; 0x2c6e <xTaskGenericNotify+0xf6>
    2bde:	66 0f       	add	r22, r22
    2be0:	77 1f       	adc	r23, r23
    2be2:	66 0f       	add	r22, r22
    2be4:	77 1f       	adc	r23, r23
    2be6:	fd 01       	movw	r30, r26
    2be8:	e6 0f       	add	r30, r22
    2bea:	f7 1f       	adc	r31, r23
    2bec:	87 a4       	ldd	r8, Z+47	; 0x2f
    2bee:	90 a8       	ldd	r9, Z+48	; 0x30
    2bf0:	a1 a8       	ldd	r10, Z+49	; 0x31
    2bf2:	b2 a8       	ldd	r11, Z+50	; 0x32
    2bf4:	ba 01       	movw	r22, r20
    2bf6:	a9 01       	movw	r20, r18
    2bf8:	48 29       	or	r20, r8
    2bfa:	59 29       	or	r21, r9
    2bfc:	6a 29       	or	r22, r10
    2bfe:	7b 29       	or	r23, r11
    2c00:	47 a7       	std	Z+47, r20	; 0x2f
    2c02:	50 ab       	std	Z+48, r21	; 0x30
    2c04:	61 ab       	std	Z+49, r22	; 0x31
    2c06:	72 ab       	std	Z+50, r23	; 0x32
    2c08:	01 e0       	ldi	r16, 0x01	; 1
    2c0a:	34 c0       	rjmp	.+104    	; 0x2c74 <xTaskGenericNotify+0xfc>
    2c0c:	66 0f       	add	r22, r22
    2c0e:	77 1f       	adc	r23, r23
    2c10:	66 0f       	add	r22, r22
    2c12:	77 1f       	adc	r23, r23
    2c14:	fd 01       	movw	r30, r26
    2c16:	e6 0f       	add	r30, r22
    2c18:	f7 1f       	adc	r31, r23
    2c1a:	47 a5       	ldd	r20, Z+47	; 0x2f
    2c1c:	50 a9       	ldd	r21, Z+48	; 0x30
    2c1e:	61 a9       	ldd	r22, Z+49	; 0x31
    2c20:	72 a9       	ldd	r23, Z+50	; 0x32
    2c22:	4f 5f       	subi	r20, 0xFF	; 255
    2c24:	5f 4f       	sbci	r21, 0xFF	; 255
    2c26:	6f 4f       	sbci	r22, 0xFF	; 255
    2c28:	7f 4f       	sbci	r23, 0xFF	; 255
    2c2a:	47 a7       	std	Z+47, r20	; 0x2f
    2c2c:	50 ab       	std	Z+48, r21	; 0x30
    2c2e:	61 ab       	std	Z+49, r22	; 0x31
    2c30:	72 ab       	std	Z+50, r23	; 0x32
    2c32:	01 e0       	ldi	r16, 0x01	; 1
    2c34:	1f c0       	rjmp	.+62     	; 0x2c74 <xTaskGenericNotify+0xfc>
    2c36:	66 0f       	add	r22, r22
    2c38:	77 1f       	adc	r23, r23
    2c3a:	66 0f       	add	r22, r22
    2c3c:	77 1f       	adc	r23, r23
    2c3e:	fd 01       	movw	r30, r26
    2c40:	e6 0f       	add	r30, r22
    2c42:	f7 1f       	adc	r31, r23
    2c44:	27 a7       	std	Z+47, r18	; 0x2f
    2c46:	30 ab       	std	Z+48, r19	; 0x30
    2c48:	41 ab       	std	Z+49, r20	; 0x31
    2c4a:	52 ab       	std	Z+50, r21	; 0x32
    2c4c:	01 e0       	ldi	r16, 0x01	; 1
    2c4e:	12 c0       	rjmp	.+36     	; 0x2c74 <xTaskGenericNotify+0xfc>
    2c50:	82 30       	cpi	r24, 0x02	; 2
    2c52:	79 f0       	breq	.+30     	; 0x2c72 <xTaskGenericNotify+0xfa>
    2c54:	66 0f       	add	r22, r22
    2c56:	77 1f       	adc	r23, r23
    2c58:	66 0f       	add	r22, r22
    2c5a:	77 1f       	adc	r23, r23
    2c5c:	fd 01       	movw	r30, r26
    2c5e:	e6 0f       	add	r30, r22
    2c60:	f7 1f       	adc	r31, r23
    2c62:	27 a7       	std	Z+47, r18	; 0x2f
    2c64:	30 ab       	std	Z+48, r19	; 0x30
    2c66:	41 ab       	std	Z+49, r20	; 0x31
    2c68:	52 ab       	std	Z+50, r21	; 0x32
    2c6a:	01 e0       	ldi	r16, 0x01	; 1
    2c6c:	03 c0       	rjmp	.+6      	; 0x2c74 <xTaskGenericNotify+0xfc>
    2c6e:	01 e0       	ldi	r16, 0x01	; 1
    2c70:	01 c0       	rjmp	.+2      	; 0x2c74 <xTaskGenericNotify+0xfc>
    2c72:	00 e0       	ldi	r16, 0x00	; 0
    2c74:	81 30       	cpi	r24, 0x01	; 1
    2c76:	09 f0       	breq	.+2      	; 0x2c7a <xTaskGenericNotify+0x102>
    2c78:	69 c0       	rjmp	.+210    	; 0x2d4c <xTaskGenericNotify+0x1d4>
    2c7a:	1c 96       	adiw	r26, 0x0c	; 12
    2c7c:	ed 91       	ld	r30, X+
    2c7e:	fc 91       	ld	r31, X
    2c80:	1d 97       	sbiw	r26, 0x0d	; 13
    2c82:	16 96       	adiw	r26, 0x06	; 6
    2c84:	cd 91       	ld	r28, X+
    2c86:	dc 91       	ld	r29, X
    2c88:	17 97       	sbiw	r26, 0x07	; 7
    2c8a:	18 96       	adiw	r26, 0x08	; 8
    2c8c:	8d 91       	ld	r24, X+
    2c8e:	9c 91       	ld	r25, X
    2c90:	19 97       	sbiw	r26, 0x09	; 9
    2c92:	9f 83       	std	Y+7, r25	; 0x07
    2c94:	8e 83       	std	Y+6, r24	; 0x06
    2c96:	18 96       	adiw	r26, 0x08	; 8
    2c98:	cd 91       	ld	r28, X+
    2c9a:	dc 91       	ld	r29, X
    2c9c:	19 97       	sbiw	r26, 0x09	; 9
    2c9e:	16 96       	adiw	r26, 0x06	; 6
    2ca0:	8d 91       	ld	r24, X+
    2ca2:	9c 91       	ld	r25, X
    2ca4:	17 97       	sbiw	r26, 0x07	; 7
    2ca6:	9d 83       	std	Y+5, r25	; 0x05
    2ca8:	8c 83       	std	Y+4, r24	; 0x04
    2caa:	81 81       	ldd	r24, Z+1	; 0x01
    2cac:	92 81       	ldd	r25, Z+2	; 0x02
    2cae:	9d 01       	movw	r18, r26
    2cb0:	2e 5f       	subi	r18, 0xFE	; 254
    2cb2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb4:	82 17       	cp	r24, r18
    2cb6:	93 07       	cpc	r25, r19
    2cb8:	31 f4       	brne	.+12     	; 0x2cc6 <xTaskGenericNotify+0x14e>
    2cba:	18 96       	adiw	r26, 0x08	; 8
    2cbc:	8d 91       	ld	r24, X+
    2cbe:	9c 91       	ld	r25, X
    2cc0:	19 97       	sbiw	r26, 0x09	; 9
    2cc2:	92 83       	std	Z+2, r25	; 0x02
    2cc4:	81 83       	std	Z+1, r24	; 0x01
    2cc6:	1d 96       	adiw	r26, 0x0d	; 13
    2cc8:	1c 92       	st	X, r1
    2cca:	1e 92       	st	-X, r1
    2ccc:	1c 97       	sbiw	r26, 0x0c	; 12
    2cce:	80 81       	ld	r24, Z
    2cd0:	81 50       	subi	r24, 0x01	; 1
    2cd2:	80 83       	st	Z, r24
    2cd4:	5a 96       	adiw	r26, 0x1a	; 26
    2cd6:	ec 91       	ld	r30, X
    2cd8:	5a 97       	sbiw	r26, 0x1a	; 26
    2cda:	80 91 d3 11 	lds	r24, 0x11D3	; 0x8011d3 <uxTopReadyPriority>
    2cde:	8e 17       	cp	r24, r30
    2ce0:	10 f4       	brcc	.+4      	; 0x2ce6 <xTaskGenericNotify+0x16e>
    2ce2:	e0 93 d3 11 	sts	0x11D3, r30	; 0x8011d3 <uxTopReadyPriority>
    2ce6:	8b e0       	ldi	r24, 0x0B	; 11
    2ce8:	8e 9f       	mul	r24, r30
    2cea:	f0 01       	movw	r30, r0
    2cec:	11 24       	eor	r1, r1
    2cee:	eb 5e       	subi	r30, 0xEB	; 235
    2cf0:	fd 4e       	sbci	r31, 0xED	; 237
    2cf2:	01 80       	ldd	r0, Z+1	; 0x01
    2cf4:	f2 81       	ldd	r31, Z+2	; 0x02
    2cf6:	e0 2d       	mov	r30, r0
    2cf8:	17 96       	adiw	r26, 0x07	; 7
    2cfa:	fc 93       	st	X, r31
    2cfc:	ee 93       	st	-X, r30
    2cfe:	16 97       	sbiw	r26, 0x06	; 6
    2d00:	46 81       	ldd	r20, Z+6	; 0x06
    2d02:	57 81       	ldd	r21, Z+7	; 0x07
    2d04:	19 96       	adiw	r26, 0x09	; 9
    2d06:	5c 93       	st	X, r21
    2d08:	4e 93       	st	-X, r20
    2d0a:	18 97       	sbiw	r26, 0x08	; 8
    2d0c:	c6 81       	ldd	r28, Z+6	; 0x06
    2d0e:	d7 81       	ldd	r29, Z+7	; 0x07
    2d10:	3d 83       	std	Y+5, r19	; 0x05
    2d12:	2c 83       	std	Y+4, r18	; 0x04
    2d14:	37 83       	std	Z+7, r19	; 0x07
    2d16:	26 83       	std	Z+6, r18	; 0x06
    2d18:	5a 96       	adiw	r26, 0x1a	; 26
    2d1a:	ec 91       	ld	r30, X
    2d1c:	5a 97       	sbiw	r26, 0x1a	; 26
    2d1e:	8e 9f       	mul	r24, r30
    2d20:	f0 01       	movw	r30, r0
    2d22:	11 24       	eor	r1, r1
    2d24:	eb 5e       	subi	r30, 0xEB	; 235
    2d26:	fd 4e       	sbci	r31, 0xED	; 237
    2d28:	1d 96       	adiw	r26, 0x0d	; 13
    2d2a:	fc 93       	st	X, r31
    2d2c:	ee 93       	st	-X, r30
    2d2e:	1c 97       	sbiw	r26, 0x0c	; 12
    2d30:	80 81       	ld	r24, Z
    2d32:	8f 5f       	subi	r24, 0xFF	; 255
    2d34:	80 83       	st	Z, r24
    2d36:	5a 96       	adiw	r26, 0x1a	; 26
    2d38:	9c 91       	ld	r25, X
    2d3a:	e0 91 83 12 	lds	r30, 0x1283	; 0x801283 <pxCurrentTCB>
    2d3e:	f0 91 84 12 	lds	r31, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    2d42:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d44:	89 17       	cp	r24, r25
    2d46:	10 f4       	brcc	.+4      	; 0x2d4c <xTaskGenericNotify+0x1d4>
    2d48:	0e 94 b9 05 	call	0xb72	; 0xb72 <vPortYield>
    2d4c:	0f 90       	pop	r0
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	80 2f       	mov	r24, r16
    2d52:	df 91       	pop	r29
    2d54:	cf 91       	pop	r28
    2d56:	0f 91       	pop	r16
    2d58:	ff 90       	pop	r15
    2d5a:	ef 90       	pop	r14
    2d5c:	bf 90       	pop	r11
    2d5e:	af 90       	pop	r10
    2d60:	9f 90       	pop	r9
    2d62:	8f 90       	pop	r8
    2d64:	08 95       	ret

00002d66 <xTaskGenericNotifyFromISR>:
    2d66:	8f 92       	push	r8
    2d68:	9f 92       	push	r9
    2d6a:	af 92       	push	r10
    2d6c:	bf 92       	push	r11
    2d6e:	cf 92       	push	r12
    2d70:	df 92       	push	r13
    2d72:	ef 92       	push	r14
    2d74:	ff 92       	push	r15
    2d76:	0f 93       	push	r16
    2d78:	cf 93       	push	r28
    2d7a:	df 93       	push	r29
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	e1 14       	cp	r14, r1
    2d80:	f1 04       	cpc	r15, r1
    2d82:	89 f0       	breq	.+34     	; 0x2da6 <xTaskGenericNotifyFromISR+0x40>
    2d84:	e6 2f       	mov	r30, r22
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	ee 0f       	add	r30, r30
    2d8a:	ff 1f       	adc	r31, r31
    2d8c:	ee 0f       	add	r30, r30
    2d8e:	ff 1f       	adc	r31, r31
    2d90:	e8 0f       	add	r30, r24
    2d92:	f9 1f       	adc	r31, r25
    2d94:	87 a4       	ldd	r8, Z+47	; 0x2f
    2d96:	90 a8       	ldd	r9, Z+48	; 0x30
    2d98:	a1 a8       	ldd	r10, Z+49	; 0x31
    2d9a:	b2 a8       	ldd	r11, Z+50	; 0x32
    2d9c:	f7 01       	movw	r30, r14
    2d9e:	80 82       	st	Z, r8
    2da0:	91 82       	std	Z+1, r9	; 0x01
    2da2:	a2 82       	std	Z+2, r10	; 0x02
    2da4:	b3 82       	std	Z+3, r11	; 0x03
    2da6:	70 e0       	ldi	r23, 0x00	; 0
    2da8:	fd 01       	movw	r30, r26
    2daa:	e6 0f       	add	r30, r22
    2dac:	f7 1f       	adc	r31, r23
    2dae:	93 a9       	ldd	r25, Z+51	; 0x33
    2db0:	82 e0       	ldi	r24, 0x02	; 2
    2db2:	83 ab       	std	Z+51, r24	; 0x33
    2db4:	02 30       	cpi	r16, 0x02	; 2
    2db6:	01 f1       	breq	.+64     	; 0x2df8 <xTaskGenericNotifyFromISR+0x92>
    2db8:	18 f4       	brcc	.+6      	; 0x2dc0 <xTaskGenericNotifyFromISR+0x5a>
    2dba:	01 30       	cpi	r16, 0x01	; 1
    2dbc:	31 f0       	breq	.+12     	; 0x2dca <xTaskGenericNotifyFromISR+0x64>
    2dbe:	4d c0       	rjmp	.+154    	; 0x2e5a <xTaskGenericNotifyFromISR+0xf4>
    2dc0:	03 30       	cpi	r16, 0x03	; 3
    2dc2:	79 f1       	breq	.+94     	; 0x2e22 <xTaskGenericNotifyFromISR+0xbc>
    2dc4:	04 30       	cpi	r16, 0x04	; 4
    2dc6:	d1 f1       	breq	.+116    	; 0x2e3c <xTaskGenericNotifyFromISR+0xd6>
    2dc8:	48 c0       	rjmp	.+144    	; 0x2e5a <xTaskGenericNotifyFromISR+0xf4>
    2dca:	66 0f       	add	r22, r22
    2dcc:	77 1f       	adc	r23, r23
    2dce:	66 0f       	add	r22, r22
    2dd0:	77 1f       	adc	r23, r23
    2dd2:	fd 01       	movw	r30, r26
    2dd4:	e6 0f       	add	r30, r22
    2dd6:	f7 1f       	adc	r31, r23
    2dd8:	87 a4       	ldd	r8, Z+47	; 0x2f
    2dda:	90 a8       	ldd	r9, Z+48	; 0x30
    2ddc:	a1 a8       	ldd	r10, Z+49	; 0x31
    2dde:	b2 a8       	ldd	r11, Z+50	; 0x32
    2de0:	ba 01       	movw	r22, r20
    2de2:	a9 01       	movw	r20, r18
    2de4:	48 29       	or	r20, r8
    2de6:	59 29       	or	r21, r9
    2de8:	6a 29       	or	r22, r10
    2dea:	7b 29       	or	r23, r11
    2dec:	47 a7       	std	Z+47, r20	; 0x2f
    2dee:	50 ab       	std	Z+48, r21	; 0x30
    2df0:	61 ab       	std	Z+49, r22	; 0x31
    2df2:	72 ab       	std	Z+50, r23	; 0x32
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	34 c0       	rjmp	.+104    	; 0x2e60 <xTaskGenericNotifyFromISR+0xfa>
    2df8:	66 0f       	add	r22, r22
    2dfa:	77 1f       	adc	r23, r23
    2dfc:	66 0f       	add	r22, r22
    2dfe:	77 1f       	adc	r23, r23
    2e00:	fd 01       	movw	r30, r26
    2e02:	e6 0f       	add	r30, r22
    2e04:	f7 1f       	adc	r31, r23
    2e06:	47 a5       	ldd	r20, Z+47	; 0x2f
    2e08:	50 a9       	ldd	r21, Z+48	; 0x30
    2e0a:	61 a9       	ldd	r22, Z+49	; 0x31
    2e0c:	72 a9       	ldd	r23, Z+50	; 0x32
    2e0e:	4f 5f       	subi	r20, 0xFF	; 255
    2e10:	5f 4f       	sbci	r21, 0xFF	; 255
    2e12:	6f 4f       	sbci	r22, 0xFF	; 255
    2e14:	7f 4f       	sbci	r23, 0xFF	; 255
    2e16:	47 a7       	std	Z+47, r20	; 0x2f
    2e18:	50 ab       	std	Z+48, r21	; 0x30
    2e1a:	61 ab       	std	Z+49, r22	; 0x31
    2e1c:	72 ab       	std	Z+50, r23	; 0x32
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	1f c0       	rjmp	.+62     	; 0x2e60 <xTaskGenericNotifyFromISR+0xfa>
    2e22:	66 0f       	add	r22, r22
    2e24:	77 1f       	adc	r23, r23
    2e26:	66 0f       	add	r22, r22
    2e28:	77 1f       	adc	r23, r23
    2e2a:	fd 01       	movw	r30, r26
    2e2c:	e6 0f       	add	r30, r22
    2e2e:	f7 1f       	adc	r31, r23
    2e30:	27 a7       	std	Z+47, r18	; 0x2f
    2e32:	30 ab       	std	Z+48, r19	; 0x30
    2e34:	41 ab       	std	Z+49, r20	; 0x31
    2e36:	52 ab       	std	Z+50, r21	; 0x32
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	12 c0       	rjmp	.+36     	; 0x2e60 <xTaskGenericNotifyFromISR+0xfa>
    2e3c:	92 30       	cpi	r25, 0x02	; 2
    2e3e:	79 f0       	breq	.+30     	; 0x2e5e <xTaskGenericNotifyFromISR+0xf8>
    2e40:	66 0f       	add	r22, r22
    2e42:	77 1f       	adc	r23, r23
    2e44:	66 0f       	add	r22, r22
    2e46:	77 1f       	adc	r23, r23
    2e48:	fd 01       	movw	r30, r26
    2e4a:	e6 0f       	add	r30, r22
    2e4c:	f7 1f       	adc	r31, r23
    2e4e:	27 a7       	std	Z+47, r18	; 0x2f
    2e50:	30 ab       	std	Z+48, r19	; 0x30
    2e52:	41 ab       	std	Z+49, r20	; 0x31
    2e54:	52 ab       	std	Z+50, r21	; 0x32
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	03 c0       	rjmp	.+6      	; 0x2e60 <xTaskGenericNotifyFromISR+0xfa>
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	01 c0       	rjmp	.+2      	; 0x2e60 <xTaskGenericNotifyFromISR+0xfa>
    2e5e:	80 e0       	ldi	r24, 0x00	; 0
    2e60:	91 30       	cpi	r25, 0x01	; 1
    2e62:	09 f0       	breq	.+2      	; 0x2e66 <xTaskGenericNotifyFromISR+0x100>
    2e64:	96 c0       	rjmp	.+300    	; 0x2f92 <xTaskGenericNotifyFromISR+0x22c>
    2e66:	90 91 c4 11 	lds	r25, 0x11C4	; 0x8011c4 <uxSchedulerSuspended>
    2e6a:	91 11       	cpse	r25, r1
    2e6c:	5f c0       	rjmp	.+190    	; 0x2f2c <xTaskGenericNotifyFromISR+0x1c6>
    2e6e:	1c 96       	adiw	r26, 0x0c	; 12
    2e70:	ed 91       	ld	r30, X+
    2e72:	fc 91       	ld	r31, X
    2e74:	1d 97       	sbiw	r26, 0x0d	; 13
    2e76:	16 96       	adiw	r26, 0x06	; 6
    2e78:	cd 91       	ld	r28, X+
    2e7a:	dc 91       	ld	r29, X
    2e7c:	17 97       	sbiw	r26, 0x07	; 7
    2e7e:	18 96       	adiw	r26, 0x08	; 8
    2e80:	2d 91       	ld	r18, X+
    2e82:	3c 91       	ld	r19, X
    2e84:	19 97       	sbiw	r26, 0x09	; 9
    2e86:	3f 83       	std	Y+7, r19	; 0x07
    2e88:	2e 83       	std	Y+6, r18	; 0x06
    2e8a:	18 96       	adiw	r26, 0x08	; 8
    2e8c:	cd 91       	ld	r28, X+
    2e8e:	dc 91       	ld	r29, X
    2e90:	19 97       	sbiw	r26, 0x09	; 9
    2e92:	16 96       	adiw	r26, 0x06	; 6
    2e94:	2d 91       	ld	r18, X+
    2e96:	3c 91       	ld	r19, X
    2e98:	17 97       	sbiw	r26, 0x07	; 7
    2e9a:	3d 83       	std	Y+5, r19	; 0x05
    2e9c:	2c 83       	std	Y+4, r18	; 0x04
    2e9e:	41 81       	ldd	r20, Z+1	; 0x01
    2ea0:	52 81       	ldd	r21, Z+2	; 0x02
    2ea2:	9d 01       	movw	r18, r26
    2ea4:	2e 5f       	subi	r18, 0xFE	; 254
    2ea6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea8:	42 17       	cp	r20, r18
    2eaa:	53 07       	cpc	r21, r19
    2eac:	31 f4       	brne	.+12     	; 0x2eba <xTaskGenericNotifyFromISR+0x154>
    2eae:	18 96       	adiw	r26, 0x08	; 8
    2eb0:	4d 91       	ld	r20, X+
    2eb2:	5c 91       	ld	r21, X
    2eb4:	19 97       	sbiw	r26, 0x09	; 9
    2eb6:	52 83       	std	Z+2, r21	; 0x02
    2eb8:	41 83       	std	Z+1, r20	; 0x01
    2eba:	1d 96       	adiw	r26, 0x0d	; 13
    2ebc:	1c 92       	st	X, r1
    2ebe:	1e 92       	st	-X, r1
    2ec0:	1c 97       	sbiw	r26, 0x0c	; 12
    2ec2:	90 81       	ld	r25, Z
    2ec4:	91 50       	subi	r25, 0x01	; 1
    2ec6:	90 83       	st	Z, r25
    2ec8:	5a 96       	adiw	r26, 0x1a	; 26
    2eca:	ec 91       	ld	r30, X
    2ecc:	5a 97       	sbiw	r26, 0x1a	; 26
    2ece:	90 91 d3 11 	lds	r25, 0x11D3	; 0x8011d3 <uxTopReadyPriority>
    2ed2:	9e 17       	cp	r25, r30
    2ed4:	10 f4       	brcc	.+4      	; 0x2eda <xTaskGenericNotifyFromISR+0x174>
    2ed6:	e0 93 d3 11 	sts	0x11D3, r30	; 0x8011d3 <uxTopReadyPriority>
    2eda:	9b e0       	ldi	r25, 0x0B	; 11
    2edc:	9e 9f       	mul	r25, r30
    2ede:	f0 01       	movw	r30, r0
    2ee0:	11 24       	eor	r1, r1
    2ee2:	eb 5e       	subi	r30, 0xEB	; 235
    2ee4:	fd 4e       	sbci	r31, 0xED	; 237
    2ee6:	01 80       	ldd	r0, Z+1	; 0x01
    2ee8:	f2 81       	ldd	r31, Z+2	; 0x02
    2eea:	e0 2d       	mov	r30, r0
    2eec:	17 96       	adiw	r26, 0x07	; 7
    2eee:	fc 93       	st	X, r31
    2ef0:	ee 93       	st	-X, r30
    2ef2:	16 97       	sbiw	r26, 0x06	; 6
    2ef4:	46 81       	ldd	r20, Z+6	; 0x06
    2ef6:	57 81       	ldd	r21, Z+7	; 0x07
    2ef8:	19 96       	adiw	r26, 0x09	; 9
    2efa:	5c 93       	st	X, r21
    2efc:	4e 93       	st	-X, r20
    2efe:	18 97       	sbiw	r26, 0x08	; 8
    2f00:	c6 81       	ldd	r28, Z+6	; 0x06
    2f02:	d7 81       	ldd	r29, Z+7	; 0x07
    2f04:	3d 83       	std	Y+5, r19	; 0x05
    2f06:	2c 83       	std	Y+4, r18	; 0x04
    2f08:	37 83       	std	Z+7, r19	; 0x07
    2f0a:	26 83       	std	Z+6, r18	; 0x06
    2f0c:	5a 96       	adiw	r26, 0x1a	; 26
    2f0e:	ec 91       	ld	r30, X
    2f10:	5a 97       	sbiw	r26, 0x1a	; 26
    2f12:	9e 9f       	mul	r25, r30
    2f14:	f0 01       	movw	r30, r0
    2f16:	11 24       	eor	r1, r1
    2f18:	eb 5e       	subi	r30, 0xEB	; 235
    2f1a:	fd 4e       	sbci	r31, 0xED	; 237
    2f1c:	1d 96       	adiw	r26, 0x0d	; 13
    2f1e:	fc 93       	st	X, r31
    2f20:	ee 93       	st	-X, r30
    2f22:	1c 97       	sbiw	r26, 0x0c	; 12
    2f24:	90 81       	ld	r25, Z
    2f26:	9f 5f       	subi	r25, 0xFF	; 255
    2f28:	90 83       	st	Z, r25
    2f2a:	21 c0       	rjmp	.+66     	; 0x2f6e <xTaskGenericNotifyFromISR+0x208>
    2f2c:	60 ef       	ldi	r22, 0xF0	; 240
    2f2e:	71 e1       	ldi	r23, 0x11	; 17
    2f30:	fb 01       	movw	r30, r22
    2f32:	c1 81       	ldd	r28, Z+1	; 0x01
    2f34:	d2 81       	ldd	r29, Z+2	; 0x02
    2f36:	53 96       	adiw	r26, 0x13	; 19
    2f38:	dc 93       	st	X, r29
    2f3a:	ce 93       	st	-X, r28
    2f3c:	52 97       	sbiw	r26, 0x12	; 18
    2f3e:	2e 81       	ldd	r18, Y+6	; 0x06
    2f40:	3f 81       	ldd	r19, Y+7	; 0x07
    2f42:	55 96       	adiw	r26, 0x15	; 21
    2f44:	3c 93       	st	X, r19
    2f46:	2e 93       	st	-X, r18
    2f48:	54 97       	sbiw	r26, 0x14	; 20
    2f4a:	4e 81       	ldd	r20, Y+6	; 0x06
    2f4c:	5f 81       	ldd	r21, Y+7	; 0x07
    2f4e:	9d 01       	movw	r18, r26
    2f50:	22 5f       	subi	r18, 0xF2	; 242
    2f52:	3f 4f       	sbci	r19, 0xFF	; 255
    2f54:	fa 01       	movw	r30, r20
    2f56:	35 83       	std	Z+5, r19	; 0x05
    2f58:	24 83       	std	Z+4, r18	; 0x04
    2f5a:	3f 83       	std	Y+7, r19	; 0x07
    2f5c:	2e 83       	std	Y+6, r18	; 0x06
    2f5e:	59 96       	adiw	r26, 0x19	; 25
    2f60:	7c 93       	st	X, r23
    2f62:	6e 93       	st	-X, r22
    2f64:	58 97       	sbiw	r26, 0x18	; 24
    2f66:	fb 01       	movw	r30, r22
    2f68:	90 81       	ld	r25, Z
    2f6a:	9f 5f       	subi	r25, 0xFF	; 255
    2f6c:	90 83       	st	Z, r25
    2f6e:	5a 96       	adiw	r26, 0x1a	; 26
    2f70:	2c 91       	ld	r18, X
    2f72:	e0 91 83 12 	lds	r30, 0x1283	; 0x801283 <pxCurrentTCB>
    2f76:	f0 91 84 12 	lds	r31, 0x1284	; 0x801284 <pxCurrentTCB+0x1>
    2f7a:	92 8d       	ldd	r25, Z+26	; 0x1a
    2f7c:	92 17       	cp	r25, r18
    2f7e:	48 f4       	brcc	.+18     	; 0x2f92 <xTaskGenericNotifyFromISR+0x22c>
    2f80:	c1 14       	cp	r12, r1
    2f82:	d1 04       	cpc	r13, r1
    2f84:	19 f0       	breq	.+6      	; 0x2f8c <xTaskGenericNotifyFromISR+0x226>
    2f86:	91 e0       	ldi	r25, 0x01	; 1
    2f88:	f6 01       	movw	r30, r12
    2f8a:	90 83       	st	Z, r25
    2f8c:	91 e0       	ldi	r25, 0x01	; 1
    2f8e:	90 93 cd 11 	sts	0x11CD, r25	; 0x8011cd <xYieldPending>
    2f92:	df 91       	pop	r29
    2f94:	cf 91       	pop	r28
    2f96:	0f 91       	pop	r16
    2f98:	ff 90       	pop	r15
    2f9a:	ef 90       	pop	r14
    2f9c:	df 90       	pop	r13
    2f9e:	cf 90       	pop	r12
    2fa0:	bf 90       	pop	r11
    2fa2:	af 90       	pop	r10
    2fa4:	9f 90       	pop	r9
    2fa6:	8f 90       	pop	r8
    2fa8:	08 95       	ret

00002faa <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2faa:	00 97       	sbiw	r24, 0x00	; 0
    2fac:	21 f4       	brne	.+8      	; 0x2fb6 <xTaskGenericNotifyStateClear+0xc>
    2fae:	80 91 83 12 	lds	r24, 0x1283	; 0x801283 <pxCurrentTCB>
    2fb2:	90 91 84 12 	lds	r25, 0x1284	; 0x801284 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2fb6:	0f b6       	in	r0, 0x3f	; 63
    2fb8:	f8 94       	cli
    2fba:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2fbc:	70 e0       	ldi	r23, 0x00	; 0
    2fbe:	fc 01       	movw	r30, r24
    2fc0:	e6 0f       	add	r30, r22
    2fc2:	f7 1f       	adc	r31, r23
    2fc4:	23 a9       	ldd	r18, Z+51	; 0x33
    2fc6:	22 30       	cpi	r18, 0x02	; 2
    2fc8:	31 f4       	brne	.+12     	; 0x2fd6 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2fca:	fc 01       	movw	r30, r24
    2fcc:	e6 0f       	add	r30, r22
    2fce:	f7 1f       	adc	r31, r23
    2fd0:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2fd2:	81 e0       	ldi	r24, 0x01	; 1
    2fd4:	01 c0       	rjmp	.+2      	; 0x2fd8 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2fd6:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2fd8:	0f 90       	pop	r0
    2fda:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2fdc:	08 95       	ret

00002fde <prvGetNextExpireTime>:
    2fde:	dc 01       	movw	r26, r24
    2fe0:	e0 91 8f 12 	lds	r30, 0x128F	; 0x80128f <pxCurrentTimerList>
    2fe4:	f0 91 90 12 	lds	r31, 0x1290	; 0x801290 <pxCurrentTimerList+0x1>
    2fe8:	80 81       	ld	r24, Z
    2fea:	91 e0       	ldi	r25, 0x01	; 1
    2fec:	81 11       	cpse	r24, r1
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	9c 93       	st	X, r25
    2ff2:	91 11       	cpse	r25, r1
    2ff4:	08 c0       	rjmp	.+16     	; 0x3006 <prvGetNextExpireTime+0x28>
    2ff6:	07 80       	ldd	r0, Z+7	; 0x07
    2ff8:	f0 85       	ldd	r31, Z+8	; 0x08
    2ffa:	e0 2d       	mov	r30, r0
    2ffc:	60 81       	ld	r22, Z
    2ffe:	71 81       	ldd	r23, Z+1	; 0x01
    3000:	82 81       	ldd	r24, Z+2	; 0x02
    3002:	93 81       	ldd	r25, Z+3	; 0x03
    3004:	08 95       	ret
    3006:	60 e0       	ldi	r22, 0x00	; 0
    3008:	70 e0       	ldi	r23, 0x00	; 0
    300a:	cb 01       	movw	r24, r22
    300c:	08 95       	ret

0000300e <prvInsertTimerInActiveList>:
    300e:	cf 92       	push	r12
    3010:	df 92       	push	r13
    3012:	ef 92       	push	r14
    3014:	ff 92       	push	r15
    3016:	0f 93       	push	r16
    3018:	1f 93       	push	r17
    301a:	fc 01       	movw	r30, r24
    301c:	42 83       	std	Z+2, r20	; 0x02
    301e:	53 83       	std	Z+3, r21	; 0x03
    3020:	64 83       	std	Z+4, r22	; 0x04
    3022:	75 83       	std	Z+5, r23	; 0x05
    3024:	93 87       	std	Z+11, r25	; 0x0b
    3026:	82 87       	std	Z+10, r24	; 0x0a
    3028:	04 17       	cp	r16, r20
    302a:	15 07       	cpc	r17, r21
    302c:	26 07       	cpc	r18, r22
    302e:	37 07       	cpc	r19, r23
    3030:	c0 f0       	brcs	.+48     	; 0x3062 <prvInsertTimerInActiveList+0x54>
    3032:	0c 19       	sub	r16, r12
    3034:	1d 09       	sbc	r17, r13
    3036:	2e 09       	sbc	r18, r14
    3038:	3f 09       	sbc	r19, r15
    303a:	86 85       	ldd	r24, Z+14	; 0x0e
    303c:	97 85       	ldd	r25, Z+15	; 0x0f
    303e:	a0 89       	ldd	r26, Z+16	; 0x10
    3040:	b1 89       	ldd	r27, Z+17	; 0x11
    3042:	08 17       	cp	r16, r24
    3044:	19 07       	cpc	r17, r25
    3046:	2a 07       	cpc	r18, r26
    3048:	3b 07       	cpc	r19, r27
    304a:	00 f5       	brcc	.+64     	; 0x308c <prvInsertTimerInActiveList+0x7e>
    304c:	bf 01       	movw	r22, r30
    304e:	6e 5f       	subi	r22, 0xFE	; 254
    3050:	7f 4f       	sbci	r23, 0xFF	; 255
    3052:	80 91 8d 12 	lds	r24, 0x128D	; 0x80128d <pxOverflowTimerList>
    3056:	90 91 8e 12 	lds	r25, 0x128E	; 0x80128e <pxOverflowTimerList+0x1>
    305a:	0e 94 00 05 	call	0xa00	; 0xa00 <vListInsert>
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	18 c0       	rjmp	.+48     	; 0x3092 <prvInsertTimerInActiveList+0x84>
    3062:	0c 15       	cp	r16, r12
    3064:	1d 05       	cpc	r17, r13
    3066:	2e 05       	cpc	r18, r14
    3068:	3f 05       	cpc	r19, r15
    306a:	28 f4       	brcc	.+10     	; 0x3076 <prvInsertTimerInActiveList+0x68>
    306c:	4c 15       	cp	r20, r12
    306e:	5d 05       	cpc	r21, r13
    3070:	6e 05       	cpc	r22, r14
    3072:	7f 05       	cpc	r23, r15
    3074:	68 f4       	brcc	.+26     	; 0x3090 <prvInsertTimerInActiveList+0x82>
    3076:	bf 01       	movw	r22, r30
    3078:	6e 5f       	subi	r22, 0xFE	; 254
    307a:	7f 4f       	sbci	r23, 0xFF	; 255
    307c:	80 91 8f 12 	lds	r24, 0x128F	; 0x80128f <pxCurrentTimerList>
    3080:	90 91 90 12 	lds	r25, 0x1290	; 0x801290 <pxCurrentTimerList+0x1>
    3084:	0e 94 00 05 	call	0xa00	; 0xa00 <vListInsert>
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	03 c0       	rjmp	.+6      	; 0x3092 <prvInsertTimerInActiveList+0x84>
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	01 c0       	rjmp	.+2      	; 0x3092 <prvInsertTimerInActiveList+0x84>
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	1f 91       	pop	r17
    3094:	0f 91       	pop	r16
    3096:	ff 90       	pop	r15
    3098:	ef 90       	pop	r14
    309a:	df 90       	pop	r13
    309c:	cf 90       	pop	r12
    309e:	08 95       	ret

000030a0 <prvCheckForValidListAndQueue>:
    30a0:	0f b6       	in	r0, 0x3f	; 63
    30a2:	f8 94       	cli
    30a4:	0f 92       	push	r0
    30a6:	80 91 8b 12 	lds	r24, 0x128B	; 0x80128b <xTimerQueue>
    30aa:	90 91 8c 12 	lds	r25, 0x128C	; 0x80128c <xTimerQueue+0x1>
    30ae:	89 2b       	or	r24, r25
    30b0:	e9 f4       	brne	.+58     	; 0x30ec <prvCheckForValidListAndQueue+0x4c>
    30b2:	8c e9       	ldi	r24, 0x9C	; 156
    30b4:	92 e1       	ldi	r25, 0x12	; 18
    30b6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <vListInitialise>
    30ba:	81 e9       	ldi	r24, 0x91	; 145
    30bc:	92 e1       	ldi	r25, 0x12	; 18
    30be:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <vListInitialise>
    30c2:	8c e9       	ldi	r24, 0x9C	; 156
    30c4:	92 e1       	ldi	r25, 0x12	; 18
    30c6:	90 93 90 12 	sts	0x1290, r25	; 0x801290 <pxCurrentTimerList+0x1>
    30ca:	80 93 8f 12 	sts	0x128F, r24	; 0x80128f <pxCurrentTimerList>
    30ce:	81 e9       	ldi	r24, 0x91	; 145
    30d0:	92 e1       	ldi	r25, 0x12	; 18
    30d2:	90 93 8e 12 	sts	0x128E, r25	; 0x80128e <pxOverflowTimerList+0x1>
    30d6:	80 93 8d 12 	sts	0x128D, r24	; 0x80128d <pxOverflowTimerList>
    30da:	40 e0       	ldi	r20, 0x00	; 0
    30dc:	67 e0       	ldi	r22, 0x07	; 7
    30de:	8a e0       	ldi	r24, 0x0A	; 10
    30e0:	0e 94 9e 07 	call	0xf3c	; 0xf3c <xQueueGenericCreate>
    30e4:	90 93 8c 12 	sts	0x128C, r25	; 0x80128c <xTimerQueue+0x1>
    30e8:	80 93 8b 12 	sts	0x128B, r24	; 0x80128b <xTimerQueue>
    30ec:	0f 90       	pop	r0
    30ee:	0f be       	out	0x3f, r0	; 63
    30f0:	08 95       	ret

000030f2 <xTimerCreateTimerTask>:
    30f2:	ef 92       	push	r14
    30f4:	ff 92       	push	r15
    30f6:	0f 93       	push	r16
    30f8:	d3 df       	rcall	.-90     	; 0x30a0 <prvCheckForValidListAndQueue>
    30fa:	80 91 8b 12 	lds	r24, 0x128B	; 0x80128b <xTimerQueue>
    30fe:	90 91 8c 12 	lds	r25, 0x128C	; 0x80128c <xTimerQueue+0x1>
    3102:	89 2b       	or	r24, r25
    3104:	91 f0       	breq	.+36     	; 0x312a <xTimerCreateTimerTask+0x38>
    3106:	0f 2e       	mov	r0, r31
    3108:	f9 e8       	ldi	r31, 0x89	; 137
    310a:	ef 2e       	mov	r14, r31
    310c:	f2 e1       	ldi	r31, 0x12	; 18
    310e:	ff 2e       	mov	r15, r31
    3110:	f0 2d       	mov	r31, r0
    3112:	03 e0       	ldi	r16, 0x03	; 3
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	40 ec       	ldi	r20, 0xC0	; 192
    311a:	50 e0       	ldi	r21, 0x00	; 0
    311c:	6a ef       	ldi	r22, 0xFA	; 250
    311e:	72 e0       	ldi	r23, 0x02	; 2
    3120:	87 ed       	ldi	r24, 0xD7	; 215
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <xTaskCreate>
    3128:	01 c0       	rjmp	.+2      	; 0x312c <xTimerCreateTimerTask+0x3a>
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	0f 91       	pop	r16
    312e:	ff 90       	pop	r15
    3130:	ef 90       	pop	r14
    3132:	08 95       	ret

00003134 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3134:	8f 92       	push	r8
    3136:	9f 92       	push	r9
    3138:	af 92       	push	r10
    313a:	bf 92       	push	r11
    313c:	cf 92       	push	r12
    313e:	df 92       	push	r13
    3140:	ef 92       	push	r14
    3142:	ff 92       	push	r15
    3144:	0f 93       	push	r16
    3146:	1f 93       	push	r17
    3148:	cf 93       	push	r28
    314a:	df 93       	push	r29
    314c:	cd b7       	in	r28, 0x3d	; 61
    314e:	de b7       	in	r29, 0x3e	; 62
    3150:	27 97       	sbiw	r28, 0x07	; 7
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	f8 94       	cli
    3156:	de bf       	out	0x3e, r29	; 62
    3158:	0f be       	out	0x3f, r0	; 63
    315a:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    315c:	e0 91 8b 12 	lds	r30, 0x128B	; 0x80128b <xTimerQueue>
    3160:	f0 91 8c 12 	lds	r31, 0x128C	; 0x80128c <xTimerQueue+0x1>
    3164:	30 97       	sbiw	r30, 0x00	; 0
    3166:	81 f1       	breq	.+96     	; 0x31c8 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    3168:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    316a:	2a 83       	std	Y+2, r18	; 0x02
    316c:	3b 83       	std	Y+3, r19	; 0x03
    316e:	4c 83       	std	Y+4, r20	; 0x04
    3170:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3172:	9f 83       	std	Y+7, r25	; 0x07
    3174:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3176:	66 30       	cpi	r22, 0x06	; 6
    3178:	f4 f4       	brge	.+60     	; 0x31b6 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    317a:	c4 db       	rcall	.-2168   	; 0x2904 <xTaskGetSchedulerState>
    317c:	82 30       	cpi	r24, 0x02	; 2
    317e:	69 f4       	brne	.+26     	; 0x319a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3180:	00 e0       	ldi	r16, 0x00	; 0
    3182:	a7 01       	movw	r20, r14
    3184:	96 01       	movw	r18, r12
    3186:	be 01       	movw	r22, r28
    3188:	6f 5f       	subi	r22, 0xFF	; 255
    318a:	7f 4f       	sbci	r23, 0xFF	; 255
    318c:	80 91 8b 12 	lds	r24, 0x128B	; 0x80128b <xTimerQueue>
    3190:	90 91 8c 12 	lds	r25, 0x128C	; 0x80128c <xTimerQueue+0x1>
    3194:	0e 94 c1 07 	call	0xf82	; 0xf82 <xQueueGenericSend>
    3198:	18 c0       	rjmp	.+48     	; 0x31ca <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    319a:	00 e0       	ldi	r16, 0x00	; 0
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	a9 01       	movw	r20, r18
    31a2:	be 01       	movw	r22, r28
    31a4:	6f 5f       	subi	r22, 0xFF	; 255
    31a6:	7f 4f       	sbci	r23, 0xFF	; 255
    31a8:	80 91 8b 12 	lds	r24, 0x128B	; 0x80128b <xTimerQueue>
    31ac:	90 91 8c 12 	lds	r25, 0x128C	; 0x80128c <xTimerQueue+0x1>
    31b0:	0e 94 c1 07 	call	0xf82	; 0xf82 <xQueueGenericSend>
    31b4:	0a c0       	rjmp	.+20     	; 0x31ca <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	a8 01       	movw	r20, r16
    31ba:	be 01       	movw	r22, r28
    31bc:	6f 5f       	subi	r22, 0xFF	; 255
    31be:	7f 4f       	sbci	r23, 0xFF	; 255
    31c0:	cf 01       	movw	r24, r30
    31c2:	0e 94 52 08 	call	0x10a4	; 0x10a4 <xQueueGenericSendFromISR>
    31c6:	01 c0       	rjmp	.+2      	; 0x31ca <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    31c8:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    31ca:	27 96       	adiw	r28, 0x07	; 7
    31cc:	0f b6       	in	r0, 0x3f	; 63
    31ce:	f8 94       	cli
    31d0:	de bf       	out	0x3e, r29	; 62
    31d2:	0f be       	out	0x3f, r0	; 63
    31d4:	cd bf       	out	0x3d, r28	; 61
    31d6:	df 91       	pop	r29
    31d8:	cf 91       	pop	r28
    31da:	1f 91       	pop	r17
    31dc:	0f 91       	pop	r16
    31de:	ff 90       	pop	r15
    31e0:	ef 90       	pop	r14
    31e2:	df 90       	pop	r13
    31e4:	cf 90       	pop	r12
    31e6:	bf 90       	pop	r11
    31e8:	af 90       	pop	r10
    31ea:	9f 90       	pop	r9
    31ec:	8f 90       	pop	r8
    31ee:	08 95       	ret

000031f0 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    31f0:	8f 92       	push	r8
    31f2:	9f 92       	push	r9
    31f4:	af 92       	push	r10
    31f6:	bf 92       	push	r11
    31f8:	cf 92       	push	r12
    31fa:	df 92       	push	r13
    31fc:	ef 92       	push	r14
    31fe:	ff 92       	push	r15
    3200:	0f 93       	push	r16
    3202:	1f 93       	push	r17
    3204:	cf 93       	push	r28
    3206:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3208:	3b c0       	rjmp	.+118    	; 0x3280 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    320a:	07 80       	ldd	r0, Z+7	; 0x07
    320c:	f0 85       	ldd	r31, Z+8	; 0x08
    320e:	e0 2d       	mov	r30, r0
    3210:	80 80       	ld	r8, Z
    3212:	91 80       	ldd	r9, Z+1	; 0x01
    3214:	a2 80       	ldd	r10, Z+2	; 0x02
    3216:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3218:	c0 85       	ldd	r28, Z+8	; 0x08
    321a:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    321c:	8e 01       	movw	r16, r28
    321e:	0e 5f       	subi	r16, 0xFE	; 254
    3220:	1f 4f       	sbci	r17, 0xFF	; 255
    3222:	c8 01       	movw	r24, r16
    3224:	0e 94 3d 05 	call	0xa7a	; 0xa7a <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3228:	ec 89       	ldd	r30, Y+20	; 0x14
    322a:	fd 89       	ldd	r31, Y+21	; 0x15
    322c:	ce 01       	movw	r24, r28
    322e:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3230:	8e 89       	ldd	r24, Y+22	; 0x16
    3232:	82 ff       	sbrs	r24, 2
    3234:	25 c0       	rjmp	.+74     	; 0x3280 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3236:	8e 85       	ldd	r24, Y+14	; 0x0e
    3238:	9f 85       	ldd	r25, Y+15	; 0x0f
    323a:	a8 89       	ldd	r26, Y+16	; 0x10
    323c:	b9 89       	ldd	r27, Y+17	; 0x11
    323e:	88 0d       	add	r24, r8
    3240:	99 1d       	adc	r25, r9
    3242:	aa 1d       	adc	r26, r10
    3244:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    3246:	88 16       	cp	r8, r24
    3248:	99 06       	cpc	r9, r25
    324a:	aa 06       	cpc	r10, r26
    324c:	bb 06       	cpc	r11, r27
    324e:	70 f4       	brcc	.+28     	; 0x326c <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3250:	8a 83       	std	Y+2, r24	; 0x02
    3252:	9b 83       	std	Y+3, r25	; 0x03
    3254:	ac 83       	std	Y+4, r26	; 0x04
    3256:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3258:	db 87       	std	Y+11, r29	; 0x0b
    325a:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    325c:	b8 01       	movw	r22, r16
    325e:	80 91 8f 12 	lds	r24, 0x128F	; 0x80128f <pxCurrentTimerList>
    3262:	90 91 90 12 	lds	r25, 0x1290	; 0x801290 <pxCurrentTimerList+0x1>
    3266:	0e 94 00 05 	call	0xa00	; 0xa00 <vListInsert>
    326a:	0a c0       	rjmp	.+20     	; 0x3280 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    326c:	c1 2c       	mov	r12, r1
    326e:	d1 2c       	mov	r13, r1
    3270:	76 01       	movw	r14, r12
    3272:	00 e0       	ldi	r16, 0x00	; 0
    3274:	10 e0       	ldi	r17, 0x00	; 0
    3276:	a5 01       	movw	r20, r10
    3278:	94 01       	movw	r18, r8
    327a:	60 e0       	ldi	r22, 0x00	; 0
    327c:	ce 01       	movw	r24, r28
    327e:	5a df       	rcall	.-332    	; 0x3134 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3280:	e0 91 8f 12 	lds	r30, 0x128F	; 0x80128f <pxCurrentTimerList>
    3284:	f0 91 90 12 	lds	r31, 0x1290	; 0x801290 <pxCurrentTimerList+0x1>
    3288:	80 81       	ld	r24, Z
    328a:	81 11       	cpse	r24, r1
    328c:	be cf       	rjmp	.-132    	; 0x320a <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    328e:	80 91 8d 12 	lds	r24, 0x128D	; 0x80128d <pxOverflowTimerList>
    3292:	90 91 8e 12 	lds	r25, 0x128E	; 0x80128e <pxOverflowTimerList+0x1>
    3296:	90 93 90 12 	sts	0x1290, r25	; 0x801290 <pxCurrentTimerList+0x1>
    329a:	80 93 8f 12 	sts	0x128F, r24	; 0x80128f <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    329e:	f0 93 8e 12 	sts	0x128E, r31	; 0x80128e <pxOverflowTimerList+0x1>
    32a2:	e0 93 8d 12 	sts	0x128D, r30	; 0x80128d <pxOverflowTimerList>
    }
    32a6:	df 91       	pop	r29
    32a8:	cf 91       	pop	r28
    32aa:	1f 91       	pop	r17
    32ac:	0f 91       	pop	r16
    32ae:	ff 90       	pop	r15
    32b0:	ef 90       	pop	r14
    32b2:	df 90       	pop	r13
    32b4:	cf 90       	pop	r12
    32b6:	bf 90       	pop	r11
    32b8:	af 90       	pop	r10
    32ba:	9f 90       	pop	r9
    32bc:	8f 90       	pop	r8
    32be:	08 95       	ret

000032c0 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    32c0:	cf 92       	push	r12
    32c2:	df 92       	push	r13
    32c4:	ef 92       	push	r14
    32c6:	ff 92       	push	r15
    32c8:	cf 93       	push	r28
    32ca:	df 93       	push	r29
    32cc:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    32ce:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <xTaskGetTickCount>
    32d2:	6b 01       	movw	r12, r22
    32d4:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    32d6:	80 91 85 12 	lds	r24, 0x1285	; 0x801285 <xLastTime.2436>
    32da:	90 91 86 12 	lds	r25, 0x1286	; 0x801286 <xLastTime.2436+0x1>
    32de:	a0 91 87 12 	lds	r26, 0x1287	; 0x801287 <xLastTime.2436+0x2>
    32e2:	b0 91 88 12 	lds	r27, 0x1288	; 0x801288 <xLastTime.2436+0x3>
    32e6:	c8 16       	cp	r12, r24
    32e8:	d9 06       	cpc	r13, r25
    32ea:	ea 06       	cpc	r14, r26
    32ec:	fb 06       	cpc	r15, r27
    32ee:	20 f4       	brcc	.+8      	; 0x32f8 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    32f0:	7f df       	rcall	.-258    	; 0x31f0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    32f2:	81 e0       	ldi	r24, 0x01	; 1
    32f4:	88 83       	st	Y, r24
    32f6:	01 c0       	rjmp	.+2      	; 0x32fa <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    32f8:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    32fa:	c0 92 85 12 	sts	0x1285, r12	; 0x801285 <xLastTime.2436>
    32fe:	d0 92 86 12 	sts	0x1286, r13	; 0x801286 <xLastTime.2436+0x1>
    3302:	e0 92 87 12 	sts	0x1287, r14	; 0x801287 <xLastTime.2436+0x2>
    3306:	f0 92 88 12 	sts	0x1288, r15	; 0x801288 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    330a:	c7 01       	movw	r24, r14
    330c:	b6 01       	movw	r22, r12
    330e:	df 91       	pop	r29
    3310:	cf 91       	pop	r28
    3312:	ff 90       	pop	r15
    3314:	ef 90       	pop	r14
    3316:	df 90       	pop	r13
    3318:	cf 90       	pop	r12
    331a:	08 95       	ret

0000331c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    331c:	4f 92       	push	r4
    331e:	5f 92       	push	r5
    3320:	6f 92       	push	r6
    3322:	7f 92       	push	r7
    3324:	8f 92       	push	r8
    3326:	9f 92       	push	r9
    3328:	af 92       	push	r10
    332a:	bf 92       	push	r11
    332c:	cf 92       	push	r12
    332e:	df 92       	push	r13
    3330:	ef 92       	push	r14
    3332:	ff 92       	push	r15
    3334:	0f 93       	push	r16
    3336:	1f 93       	push	r17
    3338:	cf 93       	push	r28
    333a:	df 93       	push	r29
    333c:	4b 01       	movw	r8, r22
    333e:	5c 01       	movw	r10, r24
    3340:	29 01       	movw	r4, r18
    3342:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3344:	e0 91 8f 12 	lds	r30, 0x128F	; 0x80128f <pxCurrentTimerList>
    3348:	f0 91 90 12 	lds	r31, 0x1290	; 0x801290 <pxCurrentTimerList+0x1>
    334c:	07 80       	ldd	r0, Z+7	; 0x07
    334e:	f0 85       	ldd	r31, Z+8	; 0x08
    3350:	e0 2d       	mov	r30, r0
    3352:	c0 85       	ldd	r28, Z+8	; 0x08
    3354:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3356:	ce 01       	movw	r24, r28
    3358:	02 96       	adiw	r24, 0x02	; 2
    335a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    335e:	8e 89       	ldd	r24, Y+22	; 0x16
    3360:	82 ff       	sbrs	r24, 2
    3362:	1b c0       	rjmp	.+54     	; 0x339a <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3364:	4e 85       	ldd	r20, Y+14	; 0x0e
    3366:	5f 85       	ldd	r21, Y+15	; 0x0f
    3368:	68 89       	ldd	r22, Y+16	; 0x10
    336a:	79 89       	ldd	r23, Y+17	; 0x11
    336c:	48 0d       	add	r20, r8
    336e:	59 1d       	adc	r21, r9
    3370:	6a 1d       	adc	r22, r10
    3372:	7b 1d       	adc	r23, r11
    3374:	75 01       	movw	r14, r10
    3376:	64 01       	movw	r12, r8
    3378:	93 01       	movw	r18, r6
    337a:	82 01       	movw	r16, r4
    337c:	ce 01       	movw	r24, r28
    337e:	47 de       	rcall	.-882    	; 0x300e <prvInsertTimerInActiveList>
    3380:	88 23       	and	r24, r24
    3382:	69 f0       	breq	.+26     	; 0x339e <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3384:	c1 2c       	mov	r12, r1
    3386:	d1 2c       	mov	r13, r1
    3388:	76 01       	movw	r14, r12
    338a:	00 e0       	ldi	r16, 0x00	; 0
    338c:	10 e0       	ldi	r17, 0x00	; 0
    338e:	a5 01       	movw	r20, r10
    3390:	94 01       	movw	r18, r8
    3392:	60 e0       	ldi	r22, 0x00	; 0
    3394:	ce 01       	movw	r24, r28
    3396:	ce de       	rcall	.-612    	; 0x3134 <xTimerGenericCommand>
    3398:	02 c0       	rjmp	.+4      	; 0x339e <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    339a:	8e 7f       	andi	r24, 0xFE	; 254
    339c:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    339e:	ec 89       	ldd	r30, Y+20	; 0x14
    33a0:	fd 89       	ldd	r31, Y+21	; 0x15
    33a2:	ce 01       	movw	r24, r28
    33a4:	19 95       	eicall
    }
    33a6:	df 91       	pop	r29
    33a8:	cf 91       	pop	r28
    33aa:	1f 91       	pop	r17
    33ac:	0f 91       	pop	r16
    33ae:	ff 90       	pop	r15
    33b0:	ef 90       	pop	r14
    33b2:	df 90       	pop	r13
    33b4:	cf 90       	pop	r12
    33b6:	bf 90       	pop	r11
    33b8:	af 90       	pop	r10
    33ba:	9f 90       	pop	r9
    33bc:	8f 90       	pop	r8
    33be:	7f 90       	pop	r7
    33c0:	6f 90       	pop	r6
    33c2:	5f 90       	pop	r5
    33c4:	4f 90       	pop	r4
    33c6:	08 95       	ret

000033c8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    33c8:	8f 92       	push	r8
    33ca:	9f 92       	push	r9
    33cc:	af 92       	push	r10
    33ce:	bf 92       	push	r11
    33d0:	cf 92       	push	r12
    33d2:	df 92       	push	r13
    33d4:	ef 92       	push	r14
    33d6:	ff 92       	push	r15
    33d8:	1f 93       	push	r17
    33da:	cf 93       	push	r28
    33dc:	df 93       	push	r29
    33de:	1f 92       	push	r1
    33e0:	cd b7       	in	r28, 0x3d	; 61
    33e2:	de b7       	in	r29, 0x3e	; 62
    33e4:	6b 01       	movw	r12, r22
    33e6:	7c 01       	movw	r14, r24
    33e8:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    33ea:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    33ee:	ce 01       	movw	r24, r28
    33f0:	01 96       	adiw	r24, 0x01	; 1
    33f2:	66 df       	rcall	.-308    	; 0x32c0 <prvSampleTimeNow>
    33f4:	4b 01       	movw	r8, r22
    33f6:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    33f8:	89 81       	ldd	r24, Y+1	; 0x01
    33fa:	81 11       	cpse	r24, r1
    33fc:	2d c0       	rjmp	.+90     	; 0x3458 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    33fe:	11 11       	cpse	r17, r1
    3400:	0d c0       	rjmp	.+26     	; 0x341c <prvProcessTimerOrBlockTask+0x54>
    3402:	8c 14       	cp	r8, r12
    3404:	9d 04       	cpc	r9, r13
    3406:	ae 04       	cpc	r10, r14
    3408:	bf 04       	cpc	r11, r15
    340a:	40 f0       	brcs	.+16     	; 0x341c <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    340c:	0e 94 3f 10 	call	0x207e	; 0x207e <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3410:	a5 01       	movw	r20, r10
    3412:	94 01       	movw	r18, r8
    3414:	c7 01       	movw	r24, r14
    3416:	b6 01       	movw	r22, r12
    3418:	81 df       	rcall	.-254    	; 0x331c <prvProcessExpiredTimer>
    341a:	20 c0       	rjmp	.+64     	; 0x345c <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    341c:	11 23       	and	r17, r17
    341e:	41 f0       	breq	.+16     	; 0x3430 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3420:	e0 91 8d 12 	lds	r30, 0x128D	; 0x80128d <pxOverflowTimerList>
    3424:	f0 91 8e 12 	lds	r31, 0x128E	; 0x80128e <pxOverflowTimerList+0x1>
    3428:	80 81       	ld	r24, Z
    342a:	11 e0       	ldi	r17, 0x01	; 1
    342c:	81 11       	cpse	r24, r1
    342e:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3430:	b7 01       	movw	r22, r14
    3432:	a6 01       	movw	r20, r12
    3434:	48 19       	sub	r20, r8
    3436:	59 09       	sbc	r21, r9
    3438:	6a 09       	sbc	r22, r10
    343a:	7b 09       	sbc	r23, r11
    343c:	21 2f       	mov	r18, r17
    343e:	80 91 8b 12 	lds	r24, 0x128B	; 0x80128b <xTimerQueue>
    3442:	90 91 8c 12 	lds	r25, 0x128C	; 0x80128c <xTimerQueue+0x1>
    3446:	0e 94 1c 09 	call	0x1238	; 0x1238 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    344a:	0e 94 3f 10 	call	0x207e	; 0x207e <xTaskResumeAll>
    344e:	81 11       	cpse	r24, r1
    3450:	05 c0       	rjmp	.+10     	; 0x345c <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3452:	0e 94 b9 05 	call	0xb72	; 0xb72 <vPortYield>
    3456:	02 c0       	rjmp	.+4      	; 0x345c <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3458:	0e 94 3f 10 	call	0x207e	; 0x207e <xTaskResumeAll>
            }
        }
    }
    345c:	0f 90       	pop	r0
    345e:	df 91       	pop	r29
    3460:	cf 91       	pop	r28
    3462:	1f 91       	pop	r17
    3464:	ff 90       	pop	r15
    3466:	ef 90       	pop	r14
    3468:	df 90       	pop	r13
    346a:	cf 90       	pop	r12
    346c:	bf 90       	pop	r11
    346e:	af 90       	pop	r10
    3470:	9f 90       	pop	r9
    3472:	8f 90       	pop	r8
    3474:	08 95       	ret

00003476 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3476:	af 92       	push	r10
    3478:	bf 92       	push	r11
    347a:	cf 92       	push	r12
    347c:	df 92       	push	r13
    347e:	ef 92       	push	r14
    3480:	ff 92       	push	r15
    3482:	0f 93       	push	r16
    3484:	1f 93       	push	r17
    3486:	cf 93       	push	r28
    3488:	df 93       	push	r29
    348a:	cd b7       	in	r28, 0x3d	; 61
    348c:	de b7       	in	r29, 0x3e	; 62
    348e:	28 97       	sbiw	r28, 0x08	; 8
    3490:	0f b6       	in	r0, 0x3f	; 63
    3492:	f8 94       	cli
    3494:	de bf       	out	0x3e, r29	; 62
    3496:	0f be       	out	0x3f, r0	; 63
    3498:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    349a:	82 c0       	rjmp	.+260    	; 0x35a0 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    349c:	89 81       	ldd	r24, Y+1	; 0x01
    349e:	88 23       	and	r24, r24
    34a0:	0c f4       	brge	.+2      	; 0x34a4 <prvProcessReceivedCommands+0x2e>
    34a2:	7e c0       	rjmp	.+252    	; 0x35a0 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    34a4:	ae 80       	ldd	r10, Y+6	; 0x06
    34a6:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    34a8:	d5 01       	movw	r26, r10
    34aa:	1c 96       	adiw	r26, 0x0c	; 12
    34ac:	8d 91       	ld	r24, X+
    34ae:	9c 91       	ld	r25, X
    34b0:	1d 97       	sbiw	r26, 0x0d	; 13
    34b2:	89 2b       	or	r24, r25
    34b4:	21 f0       	breq	.+8      	; 0x34be <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    34b6:	c5 01       	movw	r24, r10
    34b8:	02 96       	adiw	r24, 0x02	; 2
    34ba:	0e 94 3d 05 	call	0xa7a	; 0xa7a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    34be:	ce 01       	movw	r24, r28
    34c0:	08 96       	adiw	r24, 0x08	; 8
    34c2:	fe de       	rcall	.-516    	; 0x32c0 <prvSampleTimeNow>
    34c4:	8b 01       	movw	r16, r22
    34c6:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    34c8:	e9 81       	ldd	r30, Y+1	; 0x01
    34ca:	0e 2e       	mov	r0, r30
    34cc:	00 0c       	add	r0, r0
    34ce:	ff 0b       	sbc	r31, r31
    34d0:	ea 30       	cpi	r30, 0x0A	; 10
    34d2:	f1 05       	cpc	r31, r1
    34d4:	08 f0       	brcs	.+2      	; 0x34d8 <prvProcessReceivedCommands+0x62>
    34d6:	64 c0       	rjmp	.+200    	; 0x35a0 <prvProcessReceivedCommands+0x12a>
    34d8:	88 27       	eor	r24, r24
    34da:	ee 58       	subi	r30, 0x8E	; 142
    34dc:	ff 4f       	sbci	r31, 0xFF	; 255
    34de:	8f 4f       	sbci	r24, 0xFF	; 255
    34e0:	0c 94 a4 2c 	jmp	0x5948	; 0x5948 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    34e4:	f5 01       	movw	r30, r10
    34e6:	86 89       	ldd	r24, Z+22	; 0x16
    34e8:	81 60       	ori	r24, 0x01	; 1
    34ea:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    34ec:	ca 80       	ldd	r12, Y+2	; 0x02
    34ee:	db 80       	ldd	r13, Y+3	; 0x03
    34f0:	ec 80       	ldd	r14, Y+4	; 0x04
    34f2:	fd 80       	ldd	r15, Y+5	; 0x05
    34f4:	46 85       	ldd	r20, Z+14	; 0x0e
    34f6:	57 85       	ldd	r21, Z+15	; 0x0f
    34f8:	60 89       	ldd	r22, Z+16	; 0x10
    34fa:	71 89       	ldd	r23, Z+17	; 0x11
    34fc:	4c 0d       	add	r20, r12
    34fe:	5d 1d       	adc	r21, r13
    3500:	6e 1d       	adc	r22, r14
    3502:	7f 1d       	adc	r23, r15
    3504:	c5 01       	movw	r24, r10
    3506:	83 dd       	rcall	.-1274   	; 0x300e <prvInsertTimerInActiveList>
    3508:	88 23       	and	r24, r24
    350a:	09 f4       	brne	.+2      	; 0x350e <prvProcessReceivedCommands+0x98>
    350c:	49 c0       	rjmp	.+146    	; 0x35a0 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    350e:	d5 01       	movw	r26, r10
    3510:	54 96       	adiw	r26, 0x14	; 20
    3512:	ed 91       	ld	r30, X+
    3514:	fc 91       	ld	r31, X
    3516:	55 97       	sbiw	r26, 0x15	; 21
    3518:	c5 01       	movw	r24, r10
    351a:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    351c:	f5 01       	movw	r30, r10
    351e:	86 89       	ldd	r24, Z+22	; 0x16
    3520:	82 ff       	sbrs	r24, 2
    3522:	3e c0       	rjmp	.+124    	; 0x35a0 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3524:	4a 81       	ldd	r20, Y+2	; 0x02
    3526:	5b 81       	ldd	r21, Y+3	; 0x03
    3528:	6c 81       	ldd	r22, Y+4	; 0x04
    352a:	7d 81       	ldd	r23, Y+5	; 0x05
    352c:	86 85       	ldd	r24, Z+14	; 0x0e
    352e:	97 85       	ldd	r25, Z+15	; 0x0f
    3530:	a0 89       	ldd	r26, Z+16	; 0x10
    3532:	b1 89       	ldd	r27, Z+17	; 0x11
    3534:	9a 01       	movw	r18, r20
    3536:	ab 01       	movw	r20, r22
    3538:	28 0f       	add	r18, r24
    353a:	39 1f       	adc	r19, r25
    353c:	4a 1f       	adc	r20, r26
    353e:	5b 1f       	adc	r21, r27
    3540:	c1 2c       	mov	r12, r1
    3542:	d1 2c       	mov	r13, r1
    3544:	76 01       	movw	r14, r12
    3546:	00 e0       	ldi	r16, 0x00	; 0
    3548:	10 e0       	ldi	r17, 0x00	; 0
    354a:	60 e0       	ldi	r22, 0x00	; 0
    354c:	c5 01       	movw	r24, r10
    354e:	f2 dd       	rcall	.-1052   	; 0x3134 <xTimerGenericCommand>
    3550:	27 c0       	rjmp	.+78     	; 0x35a0 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3552:	d5 01       	movw	r26, r10
    3554:	56 96       	adiw	r26, 0x16	; 22
    3556:	8c 91       	ld	r24, X
    3558:	56 97       	sbiw	r26, 0x16	; 22
    355a:	8e 7f       	andi	r24, 0xFE	; 254
    355c:	56 96       	adiw	r26, 0x16	; 22
    355e:	8c 93       	st	X, r24
                        break;
    3560:	1f c0       	rjmp	.+62     	; 0x35a0 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3562:	f5 01       	movw	r30, r10
    3564:	86 89       	ldd	r24, Z+22	; 0x16
    3566:	81 60       	ori	r24, 0x01	; 1
    3568:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    356a:	4a 81       	ldd	r20, Y+2	; 0x02
    356c:	5b 81       	ldd	r21, Y+3	; 0x03
    356e:	6c 81       	ldd	r22, Y+4	; 0x04
    3570:	7d 81       	ldd	r23, Y+5	; 0x05
    3572:	46 87       	std	Z+14, r20	; 0x0e
    3574:	57 87       	std	Z+15, r21	; 0x0f
    3576:	60 8b       	std	Z+16, r22	; 0x10
    3578:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    357a:	40 0f       	add	r20, r16
    357c:	51 1f       	adc	r21, r17
    357e:	62 1f       	adc	r22, r18
    3580:	73 1f       	adc	r23, r19
    3582:	68 01       	movw	r12, r16
    3584:	79 01       	movw	r14, r18
    3586:	c5 01       	movw	r24, r10
    3588:	42 dd       	rcall	.-1404   	; 0x300e <prvInsertTimerInActiveList>
                        break;
    358a:	0a c0       	rjmp	.+20     	; 0x35a0 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    358c:	f5 01       	movw	r30, r10
    358e:	86 89       	ldd	r24, Z+22	; 0x16
    3590:	81 fd       	sbrc	r24, 1
    3592:	04 c0       	rjmp	.+8      	; 0x359c <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3594:	c5 01       	movw	r24, r10
    3596:	0e 94 ae 04 	call	0x95c	; 0x95c <vPortFree>
    359a:	02 c0       	rjmp	.+4      	; 0x35a0 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    359c:	8e 7f       	andi	r24, 0xFE	; 254
    359e:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	a9 01       	movw	r20, r18
    35a6:	be 01       	movw	r22, r28
    35a8:	6f 5f       	subi	r22, 0xFF	; 255
    35aa:	7f 4f       	sbci	r23, 0xFF	; 255
    35ac:	80 91 8b 12 	lds	r24, 0x128B	; 0x80128b <xTimerQueue>
    35b0:	90 91 8c 12 	lds	r25, 0x128C	; 0x80128c <xTimerQueue+0x1>
    35b4:	0e 94 8d 08 	call	0x111a	; 0x111a <xQueueReceive>
    35b8:	81 11       	cpse	r24, r1
    35ba:	70 cf       	rjmp	.-288    	; 0x349c <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    35bc:	28 96       	adiw	r28, 0x08	; 8
    35be:	0f b6       	in	r0, 0x3f	; 63
    35c0:	f8 94       	cli
    35c2:	de bf       	out	0x3e, r29	; 62
    35c4:	0f be       	out	0x3f, r0	; 63
    35c6:	cd bf       	out	0x3d, r28	; 61
    35c8:	df 91       	pop	r29
    35ca:	cf 91       	pop	r28
    35cc:	1f 91       	pop	r17
    35ce:	0f 91       	pop	r16
    35d0:	ff 90       	pop	r15
    35d2:	ef 90       	pop	r14
    35d4:	df 90       	pop	r13
    35d6:	cf 90       	pop	r12
    35d8:	bf 90       	pop	r11
    35da:	af 90       	pop	r10
    35dc:	08 95       	ret

000035de <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    35de:	08 95       	ret

000035e0 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    35e0:	84 b1       	in	r24, 0x04	; 4
    35e2:	80 68       	ori	r24, 0x80	; 128
    35e4:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    35e6:	85 b1       	in	r24, 0x05	; 5
    35e8:	80 68       	ori	r24, 0x80	; 128
    35ea:	85 b9       	out	0x05, r24	; 5
    35ec:	08 95       	ret

000035ee <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    35ee:	83 b1       	in	r24, 0x03	; 3
    35f0:	80 68       	ori	r24, 0x80	; 128
    35f2:	83 b9       	out	0x03, r24	; 3
    35f4:	08 95       	ret

000035f6 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    35f6:	f4 df       	rcall	.-24     	; 0x35e0 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    35f8:	2f ef       	ldi	r18, 0xFF	; 255
    35fa:	80 e7       	ldi	r24, 0x70	; 112
    35fc:	92 e0       	ldi	r25, 0x02	; 2
    35fe:	21 50       	subi	r18, 0x01	; 1
    3600:	80 40       	sbci	r24, 0x00	; 0
    3602:	90 40       	sbci	r25, 0x00	; 0
    3604:	e1 f7       	brne	.-8      	; 0x35fe <vApplicationMallocFailedHook+0x8>
    3606:	00 c0       	rjmp	.+0      	; 0x3608 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3608:	00 00       	nop
    360a:	f1 df       	rcall	.-30     	; 0x35ee <prvBlinkMainLed>
    360c:	f5 cf       	rjmp	.-22     	; 0x35f8 <vApplicationMallocFailedHook+0x2>

0000360e <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    360e:	e8 df       	rcall	.-48     	; 0x35e0 <prvSetMainLedOn>
    3610:	2f ef       	ldi	r18, 0xFF	; 255
    3612:	87 ea       	ldi	r24, 0xA7	; 167
    3614:	91 e6       	ldi	r25, 0x61	; 97
    3616:	21 50       	subi	r18, 0x01	; 1
    3618:	80 40       	sbci	r24, 0x00	; 0
    361a:	90 40       	sbci	r25, 0x00	; 0
    361c:	e1 f7       	brne	.-8      	; 0x3616 <vApplicationStackOverflowHook+0x8>
    361e:	00 c0       	rjmp	.+0      	; 0x3620 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3620:	00 00       	nop
    3622:	e5 df       	rcall	.-54     	; 0x35ee <prvBlinkMainLed>
    3624:	f5 cf       	rjmp	.-22     	; 0x3610 <vApplicationStackOverflowHook+0x2>

00003626 <SensorDataPackageHandler_SetCO2>:
int16_t tempIn16 = 0.0;
uint16_t co2_ppmIn16 = 0.0;
static lora_driver_payload_t _uplink_payload;

void SensorDataPackageHandler_SetCO2(uint16_t co2){
	co2_ppmIn16 = co2;
    3626:	90 93 be 12 	sts	0x12BE, r25	; 0x8012be <co2_ppmIn16+0x1>
    362a:	80 93 bd 12 	sts	0x12BD, r24	; 0x8012bd <co2_ppmIn16>
    362e:	08 95       	ret

00003630 <SensorDataPackageHandler_SetHumidity>:
}

void SensorDataPackageHandler_SetHumidity(uint16_t humidity){
	humIn16 = humidity;
    3630:	90 93 c2 12 	sts	0x12C2, r25	; 0x8012c2 <humIn16+0x1>
    3634:	80 93 c1 12 	sts	0x12C1, r24	; 0x8012c1 <humIn16>
    3638:	08 95       	ret

0000363a <SensorDataPackageHandler_SetTemperature>:
}

void SensorDataPackageHandler_SetTemperature(int16_t temperature){
	tempIn16 = temperature;
    363a:	90 93 c0 12 	sts	0x12C0, r25	; 0x8012c0 <tempIn16+0x1>
    363e:	80 93 bf 12 	sts	0x12BF, r24	; 0x8012bf <tempIn16>
    3642:	08 95       	ret

00003644 <SensorDataPackageHandler_getLoRaPayload>:
}

lora_driver_payload_t SensorDataPackageHandler_getLoRaPayload(){
    3644:	cf 93       	push	r28
    3646:	df 93       	push	r29
    3648:	ec 01       	movw	r28, r24
	printf("STARTEDSensorDataPackageHandler");
    364a:	82 e0       	ldi	r24, 0x02	; 2
    364c:	93 e0       	ldi	r25, 0x03	; 3
    364e:	9f 93       	push	r25
    3650:	8f 93       	push	r24
    3652:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
	printf("and this is the changed hum %u\n", humIn16);
    3656:	80 91 c2 12 	lds	r24, 0x12C2	; 0x8012c2 <humIn16+0x1>
    365a:	8f 93       	push	r24
    365c:	80 91 c1 12 	lds	r24, 0x12C1	; 0x8012c1 <humIn16>
    3660:	8f 93       	push	r24
    3662:	82 e2       	ldi	r24, 0x22	; 34
    3664:	93 e0       	ldi	r25, 0x03	; 3
    3666:	9f 93       	push	r25
    3668:	8f 93       	push	r24
    366a:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
	printf("and also the changed temp %u\n", tempIn16);
    366e:	80 91 c0 12 	lds	r24, 0x12C0	; 0x8012c0 <tempIn16+0x1>
    3672:	8f 93       	push	r24
    3674:	80 91 bf 12 	lds	r24, 0x12BF	; 0x8012bf <tempIn16>
    3678:	8f 93       	push	r24
    367a:	82 e4       	ldi	r24, 0x42	; 66
    367c:	93 e0       	ldi	r25, 0x03	; 3
    367e:	9f 93       	push	r25
    3680:	8f 93       	push	r24
    3682:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
	printf("and also the changed CO2 %u\n", co2_ppmIn16);
    3686:	80 91 be 12 	lds	r24, 0x12BE	; 0x8012be <co2_ppmIn16+0x1>
    368a:	8f 93       	push	r24
    368c:	80 91 bd 12 	lds	r24, 0x12BD	; 0x8012bd <co2_ppmIn16>
    3690:	8f 93       	push	r24
    3692:	80 e6       	ldi	r24, 0x60	; 96
    3694:	93 e0       	ldi	r25, 0x03	; 3
    3696:	9f 93       	push	r25
    3698:	8f 93       	push	r24
    369a:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
	
	_uplink_payload.len = 6;
    369e:	e7 ea       	ldi	r30, 0xA7	; 167
    36a0:	f2 e1       	ldi	r31, 0x12	; 18
    36a2:	86 e0       	ldi	r24, 0x06	; 6
    36a4:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.portNo = 2;
    36a6:	82 e0       	ldi	r24, 0x02	; 2
    36a8:	80 83       	st	Z, r24
	_uplink_payload.bytes[0] = humIn16 >> 8;
    36aa:	80 91 c1 12 	lds	r24, 0x12C1	; 0x8012c1 <humIn16>
    36ae:	90 91 c2 12 	lds	r25, 0x12C2	; 0x8012c2 <humIn16+0x1>
    36b2:	92 83       	std	Z+2, r25	; 0x02
	_uplink_payload.bytes[1] = humIn16 & 0xFF;
    36b4:	83 83       	std	Z+3, r24	; 0x03
	_uplink_payload.bytes[2] = tempIn16 >> 8;
    36b6:	80 91 bf 12 	lds	r24, 0x12BF	; 0x8012bf <tempIn16>
    36ba:	90 91 c0 12 	lds	r25, 0x12C0	; 0x8012c0 <tempIn16+0x1>
    36be:	94 83       	std	Z+4, r25	; 0x04
	_uplink_payload.bytes[3] = tempIn16 & 0xFF;
    36c0:	85 83       	std	Z+5, r24	; 0x05
	_uplink_payload.bytes[4] = co2_ppmIn16 >> 8;
    36c2:	80 91 bd 12 	lds	r24, 0x12BD	; 0x8012bd <co2_ppmIn16>
    36c6:	90 91 be 12 	lds	r25, 0x12BE	; 0x8012be <co2_ppmIn16+0x1>
    36ca:	96 83       	std	Z+6, r25	; 0x06
	_uplink_payload.bytes[5] = co2_ppmIn16 & 0xFF;
    36cc:	87 83       	std	Z+7, r24	; 0x07
	return _uplink_payload;
    36ce:	86 e1       	ldi	r24, 0x16	; 22
    36d0:	de 01       	movw	r26, r28
    36d2:	01 90       	ld	r0, Z+
    36d4:	0d 92       	st	X+, r0
    36d6:	8a 95       	dec	r24
    36d8:	e1 f7       	brne	.-8      	; 0x36d2 <SensorDataPackageHandler_getLoRaPayload+0x8e>
    36da:	8d b7       	in	r24, 0x3d	; 61
    36dc:	9e b7       	in	r25, 0x3e	; 62
    36de:	0e 96       	adiw	r24, 0x0e	; 14
    36e0:	0f b6       	in	r0, 0x3f	; 63
    36e2:	f8 94       	cli
    36e4:	9e bf       	out	0x3e, r25	; 62
    36e6:	0f be       	out	0x3f, r0	; 63
    36e8:	8d bf       	out	0x3d, r24	; 61
    36ea:	ce 01       	movw	r24, r28
    36ec:	df 91       	pop	r29
    36ee:	cf 91       	pop	r28
    36f0:	08 95       	ret

000036f2 <_lora_setup>:
	,  UpLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    36f2:	cf 93       	push	r28
    36f4:	df 93       	push	r29
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    36f6:	81 e0       	ldi	r24, 0x01	; 1
    36f8:	0e 94 3e 28 	call	0x507c	; 0x507c <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    36fc:	ef d3       	rcall	.+2014   	; 0x3edc <lora_driver_rn2483FactoryReset>
    36fe:	6b d6       	rcall	.+3286   	; 0x43d6 <lora_driver_mapReturnCodeToText>
    3700:	9f 93       	push	r25
    3702:	8f 93       	push	r24
    3704:	8d e7       	ldi	r24, 0x7D	; 125
    3706:	93 e0       	ldi	r25, 0x03	; 3
    3708:	9f 93       	push	r25
    370a:	8f 93       	push	r24
    370c:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3710:	63 d5       	rcall	.+2758   	; 0x41d8 <lora_driver_configureToEu868>
    3712:	61 d6       	rcall	.+3266   	; 0x43d6 <lora_driver_mapReturnCodeToText>
    3714:	9f 93       	push	r25
    3716:	8f 93       	push	r24
    3718:	80 e9       	ldi	r24, 0x90	; 144
    371a:	93 e0       	ldi	r25, 0x03	; 3
    371c:	9f 93       	push	r25
    371e:	8f 93       	push	r24
    3720:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
    3724:	89 ed       	ldi	r24, 0xD9	; 217

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3726:	92 e1       	ldi	r25, 0x12	; 18
    3728:	eb d3       	rcall	.+2006   	; 0x3f00 <lora_driver_getRn2483Hweui>
    372a:	55 d6       	rcall	.+3242   	; 0x43d6 <lora_driver_mapReturnCodeToText>
    372c:	c9 ed       	ldi	r28, 0xD9	; 217
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    372e:	d2 e1       	ldi	r29, 0x12	; 18
    3730:	df 93       	push	r29
    3732:	cf 93       	push	r28
    3734:	9f 93       	push	r25
    3736:	8f 93       	push	r24
    3738:	89 ea       	ldi	r24, 0xA9	; 169
    373a:	93 e0       	ldi	r25, 0x03	; 3
    373c:	9f 93       	push	r25
    373e:	8f 93       	push	r24
    3740:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
    3744:	ce 01       	movw	r24, r28

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3746:	f8 d3       	rcall	.+2032   	; 0x3f38 <lora_driver_setDeviceIdentifier>
    3748:	46 d6       	rcall	.+3212   	; 0x43d6 <lora_driver_mapReturnCodeToText>
    374a:	9f 93       	push	r25
    374c:	8f 93       	push	r24
    374e:	df 93       	push	r29
    3750:	cf 93       	push	r28
    3752:	8d eb       	ldi	r24, 0xBD	; 189
    3754:	93 e0       	ldi	r25, 0x03	; 3
    3756:	9f 93       	push	r25
    3758:	8f 93       	push	r24
    375a:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
    375e:	ae 01       	movw	r20, r28

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3760:	62 ed       	ldi	r22, 0xD2	; 210
    3762:	73 e0       	ldi	r23, 0x03	; 3
    3764:	83 ef       	ldi	r24, 0xF3	; 243
    3766:	93 e0       	ldi	r25, 0x03	; 3
    3768:	15 d6       	rcall	.+3114   	; 0x4394 <lora_driver_setOtaaIdentity>
    376a:	35 d6       	rcall	.+3178   	; 0x43d6 <lora_driver_mapReturnCodeToText>
    376c:	9f 93       	push	r25
    376e:	8f 93       	push	r24
    3770:	df 93       	push	r29
    3772:	cf 93       	push	r28
    3774:	82 ed       	ldi	r24, 0xD2	; 210
    3776:	93 e0       	ldi	r25, 0x03	; 3
    3778:	9f 93       	push	r25
    377a:	8f 93       	push	r24
    377c:	83 ef       	ldi	r24, 0xF3	; 243
    377e:	93 e0       	ldi	r25, 0x03	; 3
    3780:	9f 93       	push	r25
    3782:	8f 93       	push	r24
    3784:	84 e0       	ldi	r24, 0x04	; 4
    3786:	94 e0       	ldi	r25, 0x04	; 4
    3788:	9f 93       	push	r25
    378a:	8f 93       	push	r24
    378c:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
    3790:	06 d4       	rcall	.+2060   	; 0x3f9e <lora_driver_saveMac>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3792:	21 d6       	rcall	.+3138   	; 0x43d6 <lora_driver_mapReturnCodeToText>
    3794:	9f 93       	push	r25
    3796:	8f 93       	push	r24
    3798:	8a e3       	ldi	r24, 0x3A	; 58
    379a:	94 e0       	ldi	r25, 0x04	; 4
    379c:	9f 93       	push	r25
    379e:	8f 93       	push	r24
    37a0:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
    37a4:	8d b7       	in	r24, 0x3d	; 61

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    37a6:	9e b7       	in	r25, 0x3e	; 62
    37a8:	82 96       	adiw	r24, 0x22	; 34
    37aa:	0f b6       	in	r0, 0x3f	; 63
    37ac:	f8 94       	cli
    37ae:	9e bf       	out	0x3e, r25	; 62
    37b0:	0f be       	out	0x3f, r0	; 63
    37b2:	8d bf       	out	0x3d, r24	; 61
    37b4:	81 e0       	ldi	r24, 0x01	; 1
    37b6:	ed d4       	rcall	.+2522   	; 0x4192 <lora_driver_setAdaptiveDataRate>
    37b8:	0e d6       	rcall	.+3100   	; 0x43d6 <lora_driver_mapReturnCodeToText>
    37ba:	9f 93       	push	r25
    37bc:	8f 93       	push	r24
    37be:	89 e4       	ldi	r24, 0x49	; 73
    37c0:	94 e0       	ldi	r25, 0x04	; 4
    37c2:	9f 93       	push	r25
    37c4:	8f 93       	push	r24
    37c6:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
    37ca:	84 ef       	ldi	r24, 0xF4	; 244

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    37cc:	91 e0       	ldi	r25, 0x01	; 1
    37ce:	ec d4       	rcall	.+2520   	; 0x41a8 <lora_driver_setReceiveDelay>
    37d0:	02 d6       	rcall	.+3076   	; 0x43d6 <lora_driver_mapReturnCodeToText>
    37d2:	9f 93       	push	r25
    37d4:	8f 93       	push	r24
    37d6:	81 e0       	ldi	r24, 0x01	; 1
    37d8:	8f 93       	push	r24
    37da:	84 ef       	ldi	r24, 0xF4	; 244
    37dc:	8f 93       	push	r24
    37de:	8a e6       	ldi	r24, 0x6A	; 106
    37e0:	94 e0       	ldi	r25, 0x04	; 4
    37e2:	9f 93       	push	r25
    37e4:	8f 93       	push	r24
    37e6:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
    37ea:	8d b7       	in	r24, 0x3d	; 61
    37ec:	9e b7       	in	r25, 0x3e	; 62
    37ee:	0a 96       	adiw	r24, 0x0a	; 10
    37f0:	0f b6       	in	r0, 0x3f	; 63
    37f2:	f8 94       	cli
    37f4:	9e bf       	out	0x3e, r25	; 62
    37f6:	0f be       	out	0x3f, r0	; 63
    37f8:	8d bf       	out	0x3d, r24	; 61
    37fa:	ca e0       	ldi	r28, 0x0A	; 10

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    37fc:	80 e0       	ldi	r24, 0x00	; 0
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    37fe:	d5 d3       	rcall	.+1962   	; 0x3faa <lora_driver_join>
    3800:	d8 2f       	mov	r29, r24
    3802:	e9 d5       	rcall	.+3026   	; 0x43d6 <lora_driver_mapReturnCodeToText>
    3804:	9f 93       	push	r25
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3806:	8f 93       	push	r24
    3808:	1f 92       	push	r1
    380a:	cf 93       	push	r28
    380c:	8a e8       	ldi	r24, 0x8A	; 138
    380e:	94 e0       	ldi	r25, 0x04	; 4
    3810:	9f 93       	push	r25
    3812:	8f 93       	push	r24
    3814:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
    3818:	0f 90       	pop	r0
    381a:	0f 90       	pop	r0
    381c:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    381e:	0f 90       	pop	r0
    3820:	0f 90       	pop	r0
    3822:	0f 90       	pop	r0
    3824:	d8 30       	cpi	r29, 0x08	; 8
    3826:	59 f0       	breq	.+22     	; 0x383e <_lora_setup+0x14c>
    3828:	80 e0       	ldi	r24, 0x00	; 0
    382a:	0e 94 a2 28 	call	0x5144	; 0x5144 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    382e:	66 e3       	ldi	r22, 0x36	; 54
    3830:	71 e0       	ldi	r23, 0x01	; 1
    3832:	80 e0       	ldi	r24, 0x00	; 0
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	0e 94 80 11 	call	0x2300	; 0x2300 <vTaskDelay>
    383a:	c1 50       	subi	r28, 0x01	; 1
    383c:	f9 f6       	brne	.-66     	; 0x37fc <_lora_setup+0x10a>
    383e:	d8 30       	cpi	r29, 0x08	; 8
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3840:	21 f4       	brne	.+8      	; 0x384a <_lora_setup+0x158>
    3842:	81 e0       	ldi	r24, 0x01	; 1

	if (rc == LORA_ACCEPTED)
    3844:	0e 94 84 28 	call	0x5108	; 0x5108 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3848:	09 c0       	rjmp	.+18     	; 0x385c <_lora_setup+0x16a>
    384a:	81 e0       	ldi	r24, 0x01	; 1
    384c:	0e 94 93 28 	call	0x5126	; 0x5126 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3850:	80 e0       	ldi	r24, 0x00	; 0
    3852:	0e 94 61 28 	call	0x50c2	; 0x50c2 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3856:	0e 94 b9 05 	call	0xb72	; 0xb72 <vPortYield>
    385a:	fd cf       	rjmp	.-6      	; 0x3856 <_lora_setup+0x164>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    385c:	df 91       	pop	r29
    385e:	cf 91       	pop	r28
    3860:	08 95       	ret

00003862 <UpLinkHandler_lora_handler_task>:
		}
	}
}
    3862:	cf 93       	push	r28
    3864:	df 93       	push	r29
    3866:	cd b7       	in	r28, 0x3d	; 61

/*-----------------------------------------------------------*/
void UpLinkHandler_lora_handler_task( void *pvParameters )
{
    3868:	de b7       	in	r29, 0x3e	; 62
    386a:	6a 97       	sbiw	r28, 0x1a	; 26
    386c:	0f b6       	in	r0, 0x3f	; 63
    386e:	f8 94       	cli
    3870:	de bf       	out	0x3e, r29	; 62
    3872:	0f be       	out	0x3f, r0	; 63
    3874:	cd bf       	out	0x3d, r28	; 61
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3876:	81 e0       	ldi	r24, 0x01	; 1
    3878:	23 d3       	rcall	.+1606   	; 0x3ec0 <lora_driver_resetRn2483>
	vTaskDelay(2);
    387a:	62 e0       	ldi	r22, 0x02	; 2
    387c:	70 e0       	ldi	r23, 0x00	; 0
    387e:	80 e0       	ldi	r24, 0x00	; 0
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	0e 94 80 11 	call	0x2300	; 0x2300 <vTaskDelay>
	lora_driver_resetRn2483(0);
    3886:	80 e0       	ldi	r24, 0x00	; 0
    3888:	1b d3       	rcall	.+1590   	; 0x3ec0 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    388a:	66 e9       	ldi	r22, 0x96	; 150
    388c:	70 e0       	ldi	r23, 0x00	; 0
    388e:	80 e0       	ldi	r24, 0x00	; 0
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	0e 94 80 11 	call	0x2300	; 0x2300 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3896:	cd d2       	rcall	.+1434   	; 0x3e32 <lora_driver_flushBuffers>

	_lora_setup();
    3898:	2c df       	rcall	.-424    	; 0x36f2 <_lora_setup>
    389a:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <xTaskGetTickCount>


	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    389e:	69 83       	std	Y+1, r22	; 0x01
    38a0:	7a 83       	std	Y+2, r23	; 0x02
    38a2:	8b 83       	std	Y+3, r24	; 0x03
    38a4:	9c 83       	std	Y+4, r25	; 0x04
    38a6:	48 ea       	ldi	r20, 0xA8	; 168
	
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    38a8:	58 e4       	ldi	r21, 0x48	; 72
    38aa:	60 e0       	ldi	r22, 0x00	; 0
    38ac:	70 e0       	ldi	r23, 0x00	; 0
    38ae:	ce 01       	movw	r24, r28
    38b0:	01 96       	adiw	r24, 0x01	; 1
    38b2:	0e 94 1b 11 	call	0x2236	; 0x2236 <xTaskDelayUntil>
    38b6:	8a ea       	ldi	r24, 0xAA	; 170
		printf("startLoraTask");
    38b8:	94 e0       	ldi	r25, 0x04	; 4
    38ba:	9f 93       	push	r25
    38bc:	8f 93       	push	r24
    38be:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
		_uplink_payload = SensorDataPackageHandler_getLoRaPayload();
    38c2:	ce 01       	movw	r24, r28
    38c4:	05 96       	adiw	r24, 0x05	; 5
    38c6:	be de       	rcall	.-644    	; 0x3644 <SensorDataPackageHandler_getLoRaPayload>
    38c8:	86 e1       	ldi	r24, 0x16	; 22
    38ca:	fe 01       	movw	r30, r28
    38cc:	35 96       	adiw	r30, 0x05	; 5
    38ce:	a3 ec       	ldi	r26, 0xC3	; 195
    38d0:	b2 e1       	ldi	r27, 0x12	; 18
    38d2:	01 90       	ld	r0, Z+
    38d4:	0d 92       	st	X+, r0
    38d6:	8a 95       	dec	r24
    38d8:	e1 f7       	brne	.-8      	; 0x38d2 <UpLinkHandler_lora_handler_task+0x70>
    38da:	83 e0       	ldi	r24, 0x03	; 3
		status_leds_shortPuls(led_ST4);  // OPTIONAL
    38dc:	0e 94 b4 28 	call	0x5168	; 0x5168 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    38e0:	63 ec       	ldi	r22, 0xC3	; 195
    38e2:	72 e1       	ldi	r23, 0x12	; 18
    38e4:	80 e0       	ldi	r24, 0x00	; 0
    38e6:	8a d3       	rcall	.+1812   	; 0x3ffc <lora_driver_sendUploadMessage>
    38e8:	76 d5       	rcall	.+2796   	; 0x43d6 <lora_driver_mapReturnCodeToText>
    38ea:	9f 93       	push	r25
    38ec:	8f 93       	push	r24
    38ee:	88 eb       	ldi	r24, 0xB8	; 184
    38f0:	94 e0       	ldi	r25, 0x04	; 4
    38f2:	9f 93       	push	r25
    38f4:	8f 93       	push	r24
    38f6:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
    38fa:	0f 90       	pop	r0
    38fc:	0f 90       	pop	r0
    38fe:	0f 90       	pop	r0
    3900:	0f 90       	pop	r0
    3902:	0f 90       	pop	r0
    3904:	0f 90       	pop	r0
    3906:	cf cf       	rjmp	.-98     	; 0x38a6 <UpLinkHandler_lora_handler_task+0x44>

00003908 <UpLinkHandler_lora_handler_initialise>:
    3908:	ef 92       	push	r14
    390a:	ff 92       	push	r15

static lora_driver_payload_t _uplink_payload;


void UpLinkHandler_lora_handler_initialise(UBaseType_t UpLinkHandler_lora_handler_task_priority)
{
    390c:	0f 93       	push	r16
	xTaskCreate(
    390e:	e1 2c       	mov	r14, r1
    3910:	f1 2c       	mov	r15, r1
    3912:	08 2f       	mov	r16, r24
    3914:	20 e0       	ldi	r18, 0x00	; 0
    3916:	30 e0       	ldi	r19, 0x00	; 0
    3918:	48 e8       	ldi	r20, 0x88	; 136
    391a:	51 e0       	ldi	r21, 0x01	; 1
    391c:	6d ec       	ldi	r22, 0xCD	; 205
    391e:	74 e0       	ldi	r23, 0x04	; 4
    3920:	81 e3       	ldi	r24, 0x31	; 49
    3922:	9c e1       	ldi	r25, 0x1C	; 28
    3924:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  UpLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3928:	0f 91       	pop	r16
    392a:	ff 90       	pop	r15
    392c:	ef 90       	pop	r14
    392e:	08 95       	ret

00003930 <hih8120_handler_initialise>:
int16_t temperatureIn16 = 0;


void hih820_handler_task( void *pvParameters );

void hih8120_handler_initialise(UBaseType_t hih8120_task_priority){
    3930:	ef 92       	push	r14
    3932:	ff 92       	push	r15
    3934:	0f 93       	push	r16
    3936:	08 2f       	mov	r16, r24
	if ( HIH8120_OK == hih8120_initialise() ){
    3938:	e0 d0       	rcall	.+448    	; 0x3afa <hih8120_initialise>
    393a:	81 11       	cpse	r24, r1
    393c:	06 c0       	rjmp	.+12     	; 0x394a <hih8120_handler_initialise+0x1a>
			printf(HIH8120_OK);
    393e:	1f 92       	push	r1
    3940:	1f 92       	push	r1
    3942:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
    3946:	0f 90       	pop	r0
    3948:	0f 90       	pop	r0
	}
	xTaskCreate(
    394a:	e1 2c       	mov	r14, r1
    394c:	f1 2c       	mov	r15, r1
    394e:	20 e0       	ldi	r18, 0x00	; 0
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	40 ec       	ldi	r20, 0xC0	; 192
    3954:	50 e0       	ldi	r21, 0x00	; 0
    3956:	64 ed       	ldi	r22, 0xD4	; 212
    3958:	74 e0       	ldi	r23, 0x04	; 4
    395a:	85 ed       	ldi	r24, 0xD5	; 213
    395c:	9c e1       	ldi	r25, 0x1C	; 28
    395e:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <xTaskCreate>
	,  "Hih820Hand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  hih8120_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3962:	0f 91       	pop	r16
    3964:	ff 90       	pop	r15
    3966:	ef 90       	pop	r14
    3968:	08 95       	ret

0000396a <hih820_getHumidityInUint16>:
		}
	}
}

uint16_t hih820_getHumidityInUint16(){
	return humidityIn16/10;
    396a:	20 91 3f 13 	lds	r18, 0x133F	; 0x80133f <humidityIn16>
    396e:	30 91 40 13 	lds	r19, 0x1340	; 0x801340 <humidityIn16+0x1>
    3972:	ad ec       	ldi	r26, 0xCD	; 205
    3974:	bc ec       	ldi	r27, 0xCC	; 204
    3976:	0e 94 ac 2c 	call	0x5958	; 0x5958 <__umulhisi3>
}
    397a:	96 95       	lsr	r25
    397c:	87 95       	ror	r24
    397e:	96 95       	lsr	r25
    3980:	87 95       	ror	r24
    3982:	96 95       	lsr	r25
    3984:	87 95       	ror	r24
    3986:	08 95       	ret

00003988 <hih820_getTemperatureInUint16>:

int16_t hih820_getTemperatureInUint16(){
	return temperatureIn16/10;
    3988:	80 91 3d 13 	lds	r24, 0x133D	; 0x80133d <temperatureIn16>
    398c:	90 91 3e 13 	lds	r25, 0x133E	; 0x80133e <temperatureIn16+0x1>
    3990:	6a e0       	ldi	r22, 0x0A	; 10
    3992:	70 e0       	ldi	r23, 0x00	; 0
    3994:	0e 94 6f 2c 	call	0x58de	; 0x58de <__divmodhi4>
    3998:	cb 01       	movw	r24, r22
}
    399a:	08 95       	ret

0000399c <hih820_aFunctionToSetBits>:
void hih820_aFunctionToSetBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Set bit 0 and bit 4 in xEventGroup. */
  uxBits = xEventGroupSetBits(
    399c:	40 e1       	ldi	r20, 0x10	; 16
    399e:	50 e0       	ldi	r21, 0x00	; 0
    39a0:	60 e0       	ldi	r22, 0x00	; 0
    39a2:	70 e0       	ldi	r23, 0x00	; 0
    39a4:	0c 94 04 03 	jmp	0x608	; 0x608 <xEventGroupSetBits>
    39a8:	08 95       	ret

000039aa <hih820_handler_task>:
	,  hih8120_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void hih820_handler_task(void *pvParameters)
{
    39aa:	cf 93       	push	r28
    39ac:	df 93       	push	r29
    39ae:	00 d0       	rcall	.+0      	; 0x39b0 <hih820_handler_task+0x6>
    39b0:	1f 92       	push	r1
    39b2:	cd b7       	in	r28, 0x3d	; 61
    39b4:	de b7       	in	r29, 0x3e	; 62
	printf("start1");
    39b6:	8f ed       	ldi	r24, 0xDF	; 223
    39b8:	94 e0       	ldi	r25, 0x04	; 4
    39ba:	9f 93       	push	r25
    39bc:	8f 93       	push	r24
    39be:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
	(void)pvParameters;
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    39c2:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <xTaskGetTickCount>
    39c6:	69 83       	std	Y+1, r22	; 0x01
    39c8:	7a 83       	std	Y+2, r23	; 0x02
    39ca:	8b 83       	std	Y+3, r24	; 0x03
    39cc:	9c 83       	std	Y+4, r25	; 0x04
    39ce:	0f 90       	pop	r0
    39d0:	0f 90       	pop	r0
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    39d2:	48 ea       	ldi	r20, 0xA8	; 168
    39d4:	58 e4       	ldi	r21, 0x48	; 72
    39d6:	60 e0       	ldi	r22, 0x00	; 0
    39d8:	70 e0       	ldi	r23, 0x00	; 0
    39da:	ce 01       	movw	r24, r28
    39dc:	01 96       	adiw	r24, 0x01	; 1
    39de:	0e 94 1b 11 	call	0x2236	; 0x2236 <xTaskDelayUntil>
		printf("start2");
    39e2:	86 ee       	ldi	r24, 0xE6	; 230
    39e4:	94 e0       	ldi	r25, 0x04	; 4
    39e6:	9f 93       	push	r25
    39e8:	8f 93       	push	r24
    39ea:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
		if (HIH8120_OK == hih8120_wakeup())
    39ee:	9d d0       	rcall	.+314    	; 0x3b2a <hih8120_wakeup>
    39f0:	0f 90       	pop	r0
    39f2:	0f 90       	pop	r0
    39f4:	81 11       	cpse	r24, r1
    39f6:	ed cf       	rjmp	.-38     	; 0x39d2 <hih820_handler_task+0x28>
		{
			printf("start4");
    39f8:	8d ee       	ldi	r24, 0xED	; 237
    39fa:	94 e0       	ldi	r25, 0x04	; 4
    39fc:	9f 93       	push	r25
    39fe:	8f 93       	push	r24
    3a00:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
			vTaskDelay(50);
    3a04:	62 e3       	ldi	r22, 0x32	; 50
    3a06:	70 e0       	ldi	r23, 0x00	; 0
    3a08:	80 e0       	ldi	r24, 0x00	; 0
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	0e 94 80 11 	call	0x2300	; 0x2300 <vTaskDelay>
			if (HIH8120_OK == hih8120_measure())
    3a10:	a1 d0       	rcall	.+322    	; 0x3b54 <hih8120_measure>
    3a12:	0f 90       	pop	r0
    3a14:	0f 90       	pop	r0
    3a16:	81 11       	cpse	r24, r1
    3a18:	dc cf       	rjmp	.-72     	; 0x39d2 <hih820_handler_task+0x28>
			{
				printf("start5");
    3a1a:	84 ef       	ldi	r24, 0xF4	; 244
    3a1c:	94 e0       	ldi	r25, 0x04	; 4
    3a1e:	9f 93       	push	r25
    3a20:	8f 93       	push	r24
    3a22:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
				vTaskDelay(1);
    3a26:	61 e0       	ldi	r22, 0x01	; 1
    3a28:	70 e0       	ldi	r23, 0x00	; 0
    3a2a:	80 e0       	ldi	r24, 0x00	; 0
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	0e 94 80 11 	call	0x2300	; 0x2300 <vTaskDelay>
				humidityIn16 = hih8120_getHumidityPercent_x10();
    3a32:	b6 d0       	rcall	.+364    	; 0x3ba0 <hih8120_getHumidityPercent_x10>
    3a34:	90 93 40 13 	sts	0x1340, r25	; 0x801340 <humidityIn16+0x1>
    3a38:	80 93 3f 13 	sts	0x133F, r24	; 0x80133f <humidityIn16>
				temperatureIn16 = hih8120_getTemperature_x10();
    3a3c:	d7 d0       	rcall	.+430    	; 0x3bec <hih8120_getTemperature_x10>
    3a3e:	90 93 3e 13 	sts	0x133E, r25	; 0x80133e <temperatureIn16+0x1>
    3a42:	80 93 3d 13 	sts	0x133D, r24	; 0x80133d <temperatureIn16>
				printf("Arrived here");
    3a46:	8b ef       	ldi	r24, 0xFB	; 251
    3a48:	94 e0       	ldi	r25, 0x04	; 4
    3a4a:	9f 93       	push	r25
    3a4c:	8f 93       	push	r24
    3a4e:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <printf>
				hih820_aFunctionToSetBits(Application_getEventGroup());
    3a52:	0e 94 08 01 	call	0x210	; 0x210 <Application_getEventGroup>
    3a56:	a2 df       	rcall	.-188    	; 0x399c <hih820_aFunctionToSetBits>
    3a58:	0f 90       	pop	r0
    3a5a:	0f 90       	pop	r0
    3a5c:	0f 90       	pop	r0
    3a5e:	0f 90       	pop	r0
    3a60:	b8 cf       	rjmp	.-144    	; 0x39d2 <hih820_handler_task+0x28>

00003a62 <main>:
/*-----------------------------------------------------------*/
int main(void)
{
	// Must be done as the very first thing!!
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3a62:	80 e0       	ldi	r24, 0x00	; 0
    3a64:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stdio_initialise>
	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(6); // Priority 5 for internal task
    3a68:	86 e0       	ldi	r24, 0x06	; 6
    3a6a:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <status_leds_initialise>
	//Initialize Application
	Application_handler_initialise(5);
    3a6e:	85 e0       	ldi	r24, 0x05	; 5
    3a70:	0e 94 97 01 	call	0x32e	; 0x32e <Application_handler_initialise>
	//initialize CO2Sensor
	mh_z19_initialise(ser_USART3);
    3a74:	83 e0       	ldi	r24, 0x03	; 3
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	8a d5       	rcall	.+2836   	; 0x458e <mh_z19_initialise>
	//create CO2 task
	CO2Sensor_handler_initialise(4);
    3a7a:	84 e0       	ldi	r24, 0x04	; 4
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	0e 94 ab 01 	call	0x356	; 0x356 <CO2Sensor_handler_initialise>
	//Create humidity temperature task and start with priority 3
	hih8120_handler_initialise(3);
    3a82:	83 e0       	ldi	r24, 0x03	; 3
    3a84:	55 df       	rcall	.-342    	; 0x3930 <hih8120_handler_initialise>
	//initialize rc_servo
	//rc_servo_initialise();
	// Initialise the LoRaWAN driver with down-link buffer
	//downLinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
	lora_driver_initialise(1, NULL);
    3a86:	60 e0       	ldi	r22, 0x00	; 0
    3a88:	70 e0       	ldi	r23, 0x00	; 0
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
	// Create LoRaWAN task and start it up with priority 2
	UpLinkHandler_lora_handler_initialise(2);
    3a8c:	d9 d1       	rcall	.+946    	; 0x3e40 <lora_driver_initialise>
    3a8e:	82 e0       	ldi	r24, 0x02	; 2
    3a90:	3b df       	rcall	.-394    	; 0x3908 <UpLinkHandler_lora_handler_initialise>
	//Create LoRaWAN task and start with priority 1
	//DownLinkHandler_lora_handler_initialise(1,downLinkMessageBufferHandle);
	//Create Configuration for Downlink_handler and WindowController
	
	printf("Program Started!!\n");
    3a92:	88 e0       	ldi	r24, 0x08	; 8
    3a94:	95 e0       	ldi	r25, 0x05	; 5
    3a96:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <puts>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    3a9a:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <vTaskStartScheduler>
    3a9e:	ff cf       	rjmp	.-2      	; 0x3a9e <main+0x3c>

00003aa0 <_hihTwiCallback>:
    3aa0:	65 30       	cpi	r22, 0x05	; 5
    3aa2:	f1 f4       	brne	.+60     	; 0x3ae0 <_hihTwiCallback+0x40>
    3aa4:	fa 01       	movw	r30, r20
    3aa6:	80 81       	ld	r24, Z
    3aa8:	8f 73       	andi	r24, 0x3F	; 63
    3aaa:	90 e0       	ldi	r25, 0x00	; 0
    3aac:	98 2f       	mov	r25, r24
    3aae:	88 27       	eor	r24, r24
    3ab0:	21 81       	ldd	r18, Z+1	; 0x01
    3ab2:	82 2b       	or	r24, r18
    3ab4:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3ab8:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3abc:	82 81       	ldd	r24, Z+2	; 0x02
    3abe:	f0 e4       	ldi	r31, 0x40	; 64
    3ac0:	8f 9f       	mul	r24, r31
    3ac2:	c0 01       	movw	r24, r0
    3ac4:	11 24       	eor	r1, r1
    3ac6:	fa 01       	movw	r30, r20
    3ac8:	23 81       	ldd	r18, Z+3	; 0x03
    3aca:	26 95       	lsr	r18
    3acc:	26 95       	lsr	r18
    3ace:	82 2b       	or	r24, r18
    3ad0:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3ad4:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3ad8:	81 e0       	ldi	r24, 0x01	; 1
    3ada:	80 93 41 13 	sts	0x1341, r24	; 0x801341 <_measuringIsReady>
    3ade:	08 95       	ret
    3ae0:	64 30       	cpi	r22, 0x04	; 4
    3ae2:	51 f0       	breq	.+20     	; 0x3af8 <_hihTwiCallback+0x58>
    3ae4:	80 e0       	ldi	r24, 0x00	; 0
    3ae6:	90 e4       	ldi	r25, 0x40	; 64
    3ae8:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3aec:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3af0:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3af4:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3af8:	08 95       	ret

00003afa <hih8120_initialise>:
    3afa:	0f 93       	push	r16
    3afc:	1f 93       	push	r17
    3afe:	00 e5       	ldi	r16, 0x50	; 80
    3b00:	1d e1       	ldi	r17, 0x1D	; 29
    3b02:	20 e0       	ldi	r18, 0x00	; 0
    3b04:	34 e2       	ldi	r19, 0x24	; 36
    3b06:	44 ef       	ldi	r20, 0xF4	; 244
    3b08:	50 e0       	ldi	r21, 0x00	; 0
    3b0a:	60 e0       	ldi	r22, 0x00	; 0
    3b0c:	87 e2       	ldi	r24, 0x27	; 39
    3b0e:	0e 94 d7 28 	call	0x51ae	; 0x51ae <twiCreate>
    3b12:	90 93 43 13 	sts	0x1343, r25	; 0x801343 <_hih8120Handler+0x1>
    3b16:	80 93 42 13 	sts	0x1342, r24	; 0x801342 <_hih8120Handler>
    3b1a:	21 e0       	ldi	r18, 0x01	; 1
    3b1c:	89 2b       	or	r24, r25
    3b1e:	09 f0       	breq	.+2      	; 0x3b22 <hih8120_initialise+0x28>
    3b20:	20 e0       	ldi	r18, 0x00	; 0
    3b22:	82 2f       	mov	r24, r18
    3b24:	1f 91       	pop	r17
    3b26:	0f 91       	pop	r16
    3b28:	08 95       	ret

00003b2a <hih8120_wakeup>:
    3b2a:	80 91 42 13 	lds	r24, 0x1342	; 0x801342 <_hih8120Handler>
    3b2e:	90 91 43 13 	lds	r25, 0x1343	; 0x801343 <_hih8120Handler+0x1>
    3b32:	00 97       	sbiw	r24, 0x00	; 0
    3b34:	59 f0       	breq	.+22     	; 0x3b4c <hih8120_wakeup+0x22>
    3b36:	40 e0       	ldi	r20, 0x00	; 0
    3b38:	60 e0       	ldi	r22, 0x00	; 0
    3b3a:	70 e0       	ldi	r23, 0x00	; 0
    3b3c:	0e 94 28 29 	call	0x5250	; 0x5250 <twiTransmit>
    3b40:	84 30       	cpi	r24, 0x04	; 4
    3b42:	31 f4       	brne	.+12     	; 0x3b50 <hih8120_wakeup+0x26>
    3b44:	10 92 41 13 	sts	0x1341, r1	; 0x801341 <_measuringIsReady>
    3b48:	80 e0       	ldi	r24, 0x00	; 0
    3b4a:	08 95       	ret
    3b4c:	82 e0       	ldi	r24, 0x02	; 2
    3b4e:	08 95       	ret
    3b50:	83 e0       	ldi	r24, 0x03	; 3
    3b52:	08 95       	ret

00003b54 <hih8120_measure>:
    3b54:	80 91 42 13 	lds	r24, 0x1342	; 0x801342 <_hih8120Handler>
    3b58:	90 91 43 13 	lds	r25, 0x1343	; 0x801343 <_hih8120Handler+0x1>
    3b5c:	00 97       	sbiw	r24, 0x00	; 0
    3b5e:	39 f0       	breq	.+14     	; 0x3b6e <hih8120_measure+0x1a>
    3b60:	64 e0       	ldi	r22, 0x04	; 4
    3b62:	0e 94 74 29 	call	0x52e8	; 0x52e8 <twiReceive>
    3b66:	85 30       	cpi	r24, 0x05	; 5
    3b68:	21 f0       	breq	.+8      	; 0x3b72 <hih8120_measure+0x1e>
    3b6a:	83 e0       	ldi	r24, 0x03	; 3
    3b6c:	08 95       	ret
    3b6e:	82 e0       	ldi	r24, 0x02	; 2
    3b70:	08 95       	ret
    3b72:	80 e0       	ldi	r24, 0x00	; 0
    3b74:	08 95       	ret

00003b76 <hih8120_getHumidity>:
    3b76:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3b7a:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3b7e:	80 e0       	ldi	r24, 0x00	; 0
    3b80:	90 e0       	ldi	r25, 0x00	; 0
    3b82:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__floatunsisf>
    3b86:	20 e0       	ldi	r18, 0x00	; 0
    3b88:	30 e0       	ldi	r19, 0x00	; 0
    3b8a:	48 ec       	ldi	r20, 0xC8	; 200
    3b8c:	52 e4       	ldi	r21, 0x42	; 66
    3b8e:	0e 94 0c 2c 	call	0x5818	; 0x5818 <__mulsf3>
    3b92:	20 e0       	ldi	r18, 0x00	; 0
    3b94:	38 ef       	ldi	r19, 0xF8	; 248
    3b96:	4f e7       	ldi	r20, 0x7F	; 127
    3b98:	56 e4       	ldi	r21, 0x46	; 70
    3b9a:	0c 94 e5 2a 	jmp	0x55ca	; 0x55ca <__divsf3>
    3b9e:	08 95       	ret

00003ba0 <hih8120_getHumidityPercent_x10>:
    3ba0:	ea df       	rcall	.-44     	; 0x3b76 <hih8120_getHumidity>
    3ba2:	20 e0       	ldi	r18, 0x00	; 0
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	40 e2       	ldi	r20, 0x20	; 32
    3ba8:	51 e4       	ldi	r21, 0x41	; 65
    3baa:	0e 94 0c 2c 	call	0x5818	; 0x5818 <__mulsf3>
    3bae:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <__fixunssfsi>
    3bb2:	cb 01       	movw	r24, r22
    3bb4:	08 95       	ret

00003bb6 <hih8120_getTemperature>:
    3bb6:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3bba:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3bbe:	80 e0       	ldi	r24, 0x00	; 0
    3bc0:	90 e0       	ldi	r25, 0x00	; 0
    3bc2:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__floatunsisf>
    3bc6:	20 e0       	ldi	r18, 0x00	; 0
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	45 e2       	ldi	r20, 0x25	; 37
    3bcc:	53 e4       	ldi	r21, 0x43	; 67
    3bce:	0e 94 0c 2c 	call	0x5818	; 0x5818 <__mulsf3>
    3bd2:	20 e0       	ldi	r18, 0x00	; 0
    3bd4:	38 ef       	ldi	r19, 0xF8	; 248
    3bd6:	4f e7       	ldi	r20, 0x7F	; 127
    3bd8:	56 e4       	ldi	r21, 0x46	; 70
    3bda:	0e 94 e5 2a 	call	0x55ca	; 0x55ca <__divsf3>
    3bde:	20 e0       	ldi	r18, 0x00	; 0
    3be0:	30 e0       	ldi	r19, 0x00	; 0
    3be2:	40 e2       	ldi	r20, 0x20	; 32
    3be4:	52 e4       	ldi	r21, 0x42	; 66
    3be6:	0c 94 80 2a 	jmp	0x5500	; 0x5500 <__subsf3>
    3bea:	08 95       	ret

00003bec <hih8120_getTemperature_x10>:
    3bec:	e4 df       	rcall	.-56     	; 0x3bb6 <hih8120_getTemperature>
    3bee:	20 e0       	ldi	r18, 0x00	; 0
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	40 e2       	ldi	r20, 0x20	; 32
    3bf4:	51 e4       	ldi	r21, 0x41	; 65
    3bf6:	0e 94 0c 2c 	call	0x5818	; 0x5818 <__mulsf3>
    3bfa:	0e 94 4d 2b 	call	0x569a	; 0x569a <__fixsfsi>
    3bfe:	cb 01       	movw	r24, r22
    3c00:	08 95       	ret

00003c02 <_serialCallBack>:
    3c02:	0f 93       	push	r16
    3c04:	1f 93       	push	r17
    3c06:	cf 93       	push	r28
    3c08:	df 93       	push	r29
    3c0a:	1f 92       	push	r1
    3c0c:	1f 92       	push	r1
    3c0e:	cd b7       	in	r28, 0x3d	; 61
    3c10:	de b7       	in	r29, 0x3e	; 62
    3c12:	8c 01       	movw	r16, r24
    3c14:	19 82       	std	Y+1, r1	; 0x01
    3c16:	2d c0       	rjmp	.+90     	; 0x3c72 <_serialCallBack+0x70>
    3c18:	e0 91 7b 13 	lds	r30, 0x137B	; 0x80137b <rec_buf_inp.2878>
    3c1c:	ec 32       	cpi	r30, 0x2C	; 44
    3c1e:	50 f4       	brcc	.+20     	; 0x3c34 <_serialCallBack+0x32>
    3c20:	81 e0       	ldi	r24, 0x01	; 1
    3c22:	8e 0f       	add	r24, r30
    3c24:	80 93 7b 13 	sts	0x137B, r24	; 0x80137b <rec_buf_inp.2878>
    3c28:	f0 e0       	ldi	r31, 0x00	; 0
    3c2a:	e3 55       	subi	r30, 0x53	; 83
    3c2c:	fc 4e       	sbci	r31, 0xEC	; 236
    3c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c30:	80 83       	st	Z, r24
    3c32:	02 c0       	rjmp	.+4      	; 0x3c38 <_serialCallBack+0x36>
    3c34:	10 92 7b 13 	sts	0x137B, r1	; 0x80137b <rec_buf_inp.2878>
    3c38:	8a 81       	ldd	r24, Y+2	; 0x02
    3c3a:	8a 30       	cpi	r24, 0x0A	; 10
    3c3c:	d1 f4       	brne	.+52     	; 0x3c72 <_serialCallBack+0x70>
    3c3e:	40 91 7b 13 	lds	r20, 0x137B	; 0x80137b <rec_buf_inp.2878>
    3c42:	50 e0       	ldi	r21, 0x00	; 0
    3c44:	fa 01       	movw	r30, r20
    3c46:	e5 55       	subi	r30, 0x55	; 85
    3c48:	fc 4e       	sbci	r31, 0xEC	; 236
    3c4a:	10 82       	st	Z, r1
    3c4c:	41 50       	subi	r20, 0x01	; 1
    3c4e:	51 09       	sbc	r21, r1
    3c50:	9e 01       	movw	r18, r28
    3c52:	2f 5f       	subi	r18, 0xFF	; 255
    3c54:	3f 4f       	sbci	r19, 0xFF	; 255
    3c56:	6d ea       	ldi	r22, 0xAD	; 173
    3c58:	73 e1       	ldi	r23, 0x13	; 19
    3c5a:	80 91 7e 13 	lds	r24, 0x137E	; 0x80137e <_serialReplyBufferHandle>
    3c5e:	90 91 7f 13 	lds	r25, 0x137F	; 0x80137f <_serialReplyBufferHandle+0x1>
    3c62:	0e 94 a2 0b 	call	0x1744	; 0x1744 <xStreamBufferSendFromISR>
    3c66:	89 81       	ldd	r24, Y+1	; 0x01
    3c68:	81 11       	cpse	r24, r1
    3c6a:	0e 94 b9 05 	call	0xb72	; 0xb72 <vPortYield>
    3c6e:	10 92 7b 13 	sts	0x137B, r1	; 0x80137b <rec_buf_inp.2878>
    3c72:	be 01       	movw	r22, r28
    3c74:	6e 5f       	subi	r22, 0xFE	; 254
    3c76:	7f 4f       	sbci	r23, 0xFF	; 255
    3c78:	c8 01       	movw	r24, r16
    3c7a:	15 d6       	rcall	.+3114   	; 0x48a6 <serial_getByte>
    3c7c:	88 23       	and	r24, r24
    3c7e:	61 f2       	breq	.-104    	; 0x3c18 <_serialCallBack+0x16>
    3c80:	0f 90       	pop	r0
    3c82:	0f 90       	pop	r0
    3c84:	df 91       	pop	r29
    3c86:	cf 91       	pop	r28
    3c88:	1f 91       	pop	r17
    3c8a:	0f 91       	pop	r16
    3c8c:	08 95       	ret

00003c8e <_uploadMessage>:
    3c8e:	0f 93       	push	r16
    3c90:	1f 93       	push	r17
    3c92:	cf 93       	push	r28
    3c94:	df 93       	push	r29
    3c96:	8c 01       	movw	r16, r24
    3c98:	eb 01       	movw	r28, r22
    3c9a:	80 91 7e 13 	lds	r24, 0x137E	; 0x80137e <_serialReplyBufferHandle>
    3c9e:	90 91 7f 13 	lds	r25, 0x137F	; 0x80137f <_serialReplyBufferHandle+0x1>
    3ca2:	0e 94 ad 0a 	call	0x155a	; 0x155a <xStreamBufferReset>
    3ca6:	b8 01       	movw	r22, r16
    3ca8:	84 e4       	ldi	r24, 0x44	; 68
    3caa:	93 e1       	ldi	r25, 0x13	; 19
    3cac:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <strcpy>
    3cb0:	20 97       	sbiw	r28, 0x00	; 0
    3cb2:	79 f0       	breq	.+30     	; 0x3cd2 <_uploadMessage+0x44>
    3cb4:	e4 e4       	ldi	r30, 0x44	; 68
    3cb6:	f3 e1       	ldi	r31, 0x13	; 19
    3cb8:	01 90       	ld	r0, Z+
    3cba:	00 20       	and	r0, r0
    3cbc:	e9 f7       	brne	.-6      	; 0x3cb8 <_uploadMessage+0x2a>
    3cbe:	31 97       	sbiw	r30, 0x01	; 1
    3cc0:	80 e2       	ldi	r24, 0x20	; 32
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	91 83       	std	Z+1, r25	; 0x01
    3cc6:	80 83       	st	Z, r24
    3cc8:	be 01       	movw	r22, r28
    3cca:	84 e4       	ldi	r24, 0x44	; 68
    3ccc:	93 e1       	ldi	r25, 0x13	; 19
    3cce:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <strcat>
    3cd2:	e4 e4       	ldi	r30, 0x44	; 68
    3cd4:	f3 e1       	ldi	r31, 0x13	; 19
    3cd6:	df 01       	movw	r26, r30
    3cd8:	0d 90       	ld	r0, X+
    3cda:	00 20       	and	r0, r0
    3cdc:	e9 f7       	brne	.-6      	; 0x3cd8 <_uploadMessage+0x4a>
    3cde:	11 97       	sbiw	r26, 0x01	; 1
    3ce0:	8d e0       	ldi	r24, 0x0D	; 13
    3ce2:	9a e0       	ldi	r25, 0x0A	; 10
    3ce4:	11 96       	adiw	r26, 0x01	; 1
    3ce6:	9c 93       	st	X, r25
    3ce8:	8e 93       	st	-X, r24
    3cea:	12 96       	adiw	r26, 0x02	; 2
    3cec:	1c 92       	st	X, r1
    3cee:	01 90       	ld	r0, Z+
    3cf0:	00 20       	and	r0, r0
    3cf2:	e9 f7       	brne	.-6      	; 0x3cee <_uploadMessage+0x60>
    3cf4:	31 97       	sbiw	r30, 0x01	; 1
    3cf6:	e4 54       	subi	r30, 0x44	; 68
    3cf8:	f3 41       	sbci	r31, 0x13	; 19
    3cfa:	ae 2f       	mov	r26, r30
    3cfc:	84 e4       	ldi	r24, 0x44	; 68
    3cfe:	93 e1       	ldi	r25, 0x13	; 19
    3d00:	ac 01       	movw	r20, r24
    3d02:	6a 2f       	mov	r22, r26
    3d04:	80 91 80 13 	lds	r24, 0x1380	; 0x801380 <_rn2483_serial>
    3d08:	90 91 81 13 	lds	r25, 0x1381	; 0x801381 <_rn2483_serial+0x1>
    3d0c:	77 d5       	rcall	.+2798   	; 0x47fc <serial_sendBytes>
    3d0e:	81 11       	cpse	r24, r1
    3d10:	11 c0       	rjmp	.+34     	; 0x3d34 <_uploadMessage+0xa6>
    3d12:	08 e2       	ldi	r16, 0x28	; 40
    3d14:	15 e0       	ldi	r17, 0x05	; 5
    3d16:	20 e0       	ldi	r18, 0x00	; 0
    3d18:	30 e0       	ldi	r19, 0x00	; 0
    3d1a:	4d e2       	ldi	r20, 0x2D	; 45
    3d1c:	50 e0       	ldi	r21, 0x00	; 0
    3d1e:	67 e0       	ldi	r22, 0x07	; 7
    3d20:	74 e1       	ldi	r23, 0x14	; 20
    3d22:	80 91 7e 13 	lds	r24, 0x137E	; 0x80137e <_serialReplyBufferHandle>
    3d26:	90 91 7f 13 	lds	r25, 0x137F	; 0x80137f <_serialReplyBufferHandle+0x1>
    3d2a:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <xStreamBufferReceive>
    3d2e:	87 e0       	ldi	r24, 0x07	; 7
    3d30:	94 e1       	ldi	r25, 0x14	; 20
    3d32:	02 c0       	rjmp	.+4      	; 0x3d38 <_uploadMessage+0xaa>
    3d34:	80 e0       	ldi	r24, 0x00	; 0
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	df 91       	pop	r29
    3d3a:	cf 91       	pop	r28
    3d3c:	1f 91       	pop	r17
    3d3e:	0f 91       	pop	r16
    3d40:	08 95       	ret

00003d42 <_reply2ReturnCode>:
    3d42:	2f 92       	push	r2
    3d44:	3f 92       	push	r3
    3d46:	4f 92       	push	r4
    3d48:	5f 92       	push	r5
    3d4a:	6f 92       	push	r6
    3d4c:	7f 92       	push	r7
    3d4e:	8f 92       	push	r8
    3d50:	9f 92       	push	r9
    3d52:	af 92       	push	r10
    3d54:	bf 92       	push	r11
    3d56:	cf 92       	push	r12
    3d58:	df 92       	push	r13
    3d5a:	ef 92       	push	r14
    3d5c:	ff 92       	push	r15
    3d5e:	0f 93       	push	r16
    3d60:	1f 93       	push	r17
    3d62:	cf 93       	push	r28
    3d64:	df 93       	push	r29
    3d66:	5c 01       	movw	r10, r24
    3d68:	fc 01       	movw	r30, r24
    3d6a:	01 90       	ld	r0, Z+
    3d6c:	00 20       	and	r0, r0
    3d6e:	e9 f7       	brne	.-6      	; 0x3d6a <_reply2ReturnCode+0x28>
    3d70:	31 97       	sbiw	r30, 0x01	; 1
    3d72:	6f 01       	movw	r12, r30
    3d74:	c8 1a       	sub	r12, r24
    3d76:	d9 0a       	sbc	r13, r25
    3d78:	5c 2c       	mov	r5, r12
    3d7a:	0f 2e       	mov	r0, r31
    3d7c:	f3 eb       	ldi	r31, 0xB3	; 179
    3d7e:	8f 2e       	mov	r8, r31
    3d80:	f7 e0       	ldi	r31, 0x07	; 7
    3d82:	9f 2e       	mov	r9, r31
    3d84:	f0 2d       	mov	r31, r0
    3d86:	e1 2c       	mov	r14, r1
    3d88:	f1 2c       	mov	r15, r1
    3d8a:	4c 2c       	mov	r4, r12
    3d8c:	37 01       	movw	r6, r14
    3d8e:	f4 01       	movw	r30, r8
    3d90:	01 81       	ldd	r16, Z+1	; 0x01
    3d92:	12 81       	ldd	r17, Z+2	; 0x02
    3d94:	e8 01       	movw	r28, r16
    3d96:	09 90       	ld	r0, Y+
    3d98:	00 20       	and	r0, r0
    3d9a:	e9 f7       	brne	.-6      	; 0x3d96 <_reply2ReturnCode+0x54>
    3d9c:	21 97       	sbiw	r28, 0x01	; 1
    3d9e:	c0 1b       	sub	r28, r16
    3da0:	d1 0b       	sbc	r29, r17
    3da2:	3c 2e       	mov	r3, r28
    3da4:	f9 e0       	ldi	r31, 0x09	; 9
    3da6:	cf 16       	cp	r12, r31
    3da8:	d1 04       	cpc	r13, r1
    3daa:	58 f0       	brcs	.+22     	; 0x3dc2 <_reply2ReturnCode+0x80>
    3dac:	f4 01       	movw	r30, r8
    3dae:	20 80       	ld	r2, Z
    3db0:	fe e0       	ldi	r31, 0x0E	; 14
    3db2:	2f 12       	cpse	r2, r31
    3db4:	06 c0       	rjmp	.+12     	; 0x3dc2 <_reply2ReturnCode+0x80>
    3db6:	b8 01       	movw	r22, r16
    3db8:	c5 01       	movw	r24, r10
    3dba:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <strcasestr>
    3dbe:	89 2b       	or	r24, r25
    3dc0:	09 f5       	brne	.+66     	; 0x3e04 <_reply2ReturnCode+0xc2>
    3dc2:	44 2d       	mov	r20, r4
    3dc4:	35 14       	cp	r3, r5
    3dc6:	08 f4       	brcc	.+2      	; 0x3dca <_reply2ReturnCode+0x88>
    3dc8:	4c 2f       	mov	r20, r28
    3dca:	50 e0       	ldi	r21, 0x00	; 0
    3dcc:	b8 01       	movw	r22, r16
    3dce:	c5 01       	movw	r24, r10
    3dd0:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <strncasecmp>
    3dd4:	89 2b       	or	r24, r25
    3dd6:	49 f4       	brne	.+18     	; 0x3dea <_reply2ReturnCode+0xa8>
    3dd8:	f3 01       	movw	r30, r6
    3dda:	ee 0f       	add	r30, r30
    3ddc:	ff 1f       	adc	r31, r31
    3dde:	e6 0d       	add	r30, r6
    3de0:	f7 1d       	adc	r31, r7
    3de2:	ed 54       	subi	r30, 0x4D	; 77
    3de4:	f8 4f       	sbci	r31, 0xF8	; 248
    3de6:	20 80       	ld	r2, Z
    3de8:	0d c0       	rjmp	.+26     	; 0x3e04 <_reply2ReturnCode+0xc2>
    3dea:	8f ef       	ldi	r24, 0xFF	; 255
    3dec:	e8 1a       	sub	r14, r24
    3dee:	f8 0a       	sbc	r15, r24
    3df0:	e3 e0       	ldi	r30, 0x03	; 3
    3df2:	8e 0e       	add	r8, r30
    3df4:	91 1c       	adc	r9, r1
    3df6:	f1 e1       	ldi	r31, 0x11	; 17
    3df8:	ef 16       	cp	r14, r31
    3dfa:	f1 04       	cpc	r15, r1
    3dfc:	39 f6       	brne	.-114    	; 0x3d8c <_reply2ReturnCode+0x4a>
    3dfe:	68 94       	set
    3e00:	22 24       	eor	r2, r2
    3e02:	24 f8       	bld	r2, 4
    3e04:	82 2d       	mov	r24, r2
    3e06:	df 91       	pop	r29
    3e08:	cf 91       	pop	r28
    3e0a:	1f 91       	pop	r17
    3e0c:	0f 91       	pop	r16
    3e0e:	ff 90       	pop	r15
    3e10:	ef 90       	pop	r14
    3e12:	df 90       	pop	r13
    3e14:	cf 90       	pop	r12
    3e16:	bf 90       	pop	r11
    3e18:	af 90       	pop	r10
    3e1a:	9f 90       	pop	r9
    3e1c:	8f 90       	pop	r8
    3e1e:	7f 90       	pop	r7
    3e20:	6f 90       	pop	r6
    3e22:	5f 90       	pop	r5
    3e24:	4f 90       	pop	r4
    3e26:	3f 90       	pop	r3
    3e28:	2f 90       	pop	r2
    3e2a:	08 95       	ret

00003e2c <_uploadMessageRc>:
    3e2c:	30 df       	rcall	.-416    	; 0x3c8e <_uploadMessage>
    3e2e:	89 cf       	rjmp	.-238    	; 0x3d42 <_reply2ReturnCode>
    3e30:	08 95       	ret

00003e32 <lora_driver_flushBuffers>:
    3e32:	80 91 7e 13 	lds	r24, 0x137E	; 0x80137e <_serialReplyBufferHandle>
    3e36:	90 91 7f 13 	lds	r25, 0x137F	; 0x80137f <_serialReplyBufferHandle+0x1>
    3e3a:	0c 94 ad 0a 	jmp	0x155a	; 0x155a <xStreamBufferReset>
    3e3e:	08 95       	ret

00003e40 <lora_driver_initialise>:
    3e40:	8f 92       	push	r8
    3e42:	9f 92       	push	r9
    3e44:	af 92       	push	r10
    3e46:	cf 92       	push	r12
    3e48:	ef 92       	push	r14
    3e4a:	0f 93       	push	r16
    3e4c:	1f 93       	push	r17
    3e4e:	cf 93       	push	r28
    3e50:	c8 2f       	mov	r28, r24
    3e52:	8b 01       	movw	r16, r22
    3e54:	41 e0       	ldi	r20, 0x01	; 1
    3e56:	60 e0       	ldi	r22, 0x00	; 0
    3e58:	70 e0       	ldi	r23, 0x00	; 0
    3e5a:	88 ec       	ldi	r24, 0xC8	; 200
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <xStreamBufferGenericCreate>
    3e62:	90 93 7f 13 	sts	0x137F, r25	; 0x80137f <_serialReplyBufferHandle+0x1>
    3e66:	80 93 7e 13 	sts	0x137E, r24	; 0x80137e <_serialReplyBufferHandle>
    3e6a:	10 93 7d 13 	sts	0x137D, r17	; 0x80137d <_downlinkMessageBuffer+0x1>
    3e6e:	00 93 7c 13 	sts	0x137C, r16	; 0x80137c <_downlinkMessageBuffer>
    3e72:	0f 2e       	mov	r0, r31
    3e74:	f1 e0       	ldi	r31, 0x01	; 1
    3e76:	8f 2e       	mov	r8, r31
    3e78:	fe e1       	ldi	r31, 0x1E	; 30
    3e7a:	9f 2e       	mov	r9, r31
    3e7c:	f0 2d       	mov	r31, r0
    3e7e:	68 94       	set
    3e80:	aa 24       	eor	r10, r10
    3e82:	a6 f8       	bld	r10, 6
    3e84:	68 94       	set
    3e86:	cc 24       	eor	r12, r12
    3e88:	c6 f8       	bld	r12, 6
    3e8a:	e1 2c       	mov	r14, r1
    3e8c:	00 e0       	ldi	r16, 0x00	; 0
    3e8e:	23 e0       	ldi	r18, 0x03	; 3
    3e90:	40 e0       	ldi	r20, 0x00	; 0
    3e92:	51 ee       	ldi	r21, 0xE1	; 225
    3e94:	60 e0       	ldi	r22, 0x00	; 0
    3e96:	70 e0       	ldi	r23, 0x00	; 0
    3e98:	8c 2f       	mov	r24, r28
    3e9a:	e3 d3       	rcall	.+1990   	; 0x4662 <serial_create>
    3e9c:	90 93 81 13 	sts	0x1381, r25	; 0x801381 <_rn2483_serial+0x1>
    3ea0:	80 93 80 13 	sts	0x1380, r24	; 0x801380 <_rn2483_serial>
    3ea4:	e7 e0       	ldi	r30, 0x07	; 7
    3ea6:	f1 e0       	ldi	r31, 0x01	; 1
    3ea8:	80 81       	ld	r24, Z
    3eaa:	80 61       	ori	r24, 0x10	; 16
    3eac:	80 83       	st	Z, r24
    3eae:	cf 91       	pop	r28
    3eb0:	1f 91       	pop	r17
    3eb2:	0f 91       	pop	r16
    3eb4:	ef 90       	pop	r14
    3eb6:	cf 90       	pop	r12
    3eb8:	af 90       	pop	r10
    3eba:	9f 90       	pop	r9
    3ebc:	8f 90       	pop	r8
    3ebe:	08 95       	ret

00003ec0 <lora_driver_resetRn2483>:
    3ec0:	88 23       	and	r24, r24
    3ec2:	31 f0       	breq	.+12     	; 0x3ed0 <lora_driver_resetRn2483+0x10>
    3ec4:	e8 e0       	ldi	r30, 0x08	; 8
    3ec6:	f1 e0       	ldi	r31, 0x01	; 1
    3ec8:	80 81       	ld	r24, Z
    3eca:	8f 7e       	andi	r24, 0xEF	; 239
    3ecc:	80 83       	st	Z, r24
    3ece:	08 95       	ret
    3ed0:	e8 e0       	ldi	r30, 0x08	; 8
    3ed2:	f1 e0       	ldi	r31, 0x01	; 1
    3ed4:	80 81       	ld	r24, Z
    3ed6:	80 61       	ori	r24, 0x10	; 16
    3ed8:	80 83       	st	Z, r24
    3eda:	08 95       	ret

00003edc <lora_driver_rn2483FactoryReset>:
    3edc:	60 e0       	ldi	r22, 0x00	; 0
    3ede:	70 e0       	ldi	r23, 0x00	; 0
    3ee0:	89 e3       	ldi	r24, 0x39	; 57
    3ee2:	95 e0       	ldi	r25, 0x05	; 5
    3ee4:	d4 de       	rcall	.-600    	; 0x3c8e <_uploadMessage>
    3ee6:	e7 e0       	ldi	r30, 0x07	; 7
    3ee8:	f4 e1       	ldi	r31, 0x14	; 20
    3eea:	01 90       	ld	r0, Z+
    3eec:	00 20       	and	r0, r0
    3eee:	e9 f7       	brne	.-6      	; 0x3eea <lora_driver_rn2483FactoryReset+0xe>
    3ef0:	31 97       	sbiw	r30, 0x01	; 1
    3ef2:	e7 50       	subi	r30, 0x07	; 7
    3ef4:	f4 41       	sbci	r31, 0x14	; 20
    3ef6:	81 e0       	ldi	r24, 0x01	; 1
    3ef8:	75 97       	sbiw	r30, 0x15	; 21
    3efa:	08 f0       	brcs	.+2      	; 0x3efe <lora_driver_rn2483FactoryReset+0x22>
    3efc:	80 e0       	ldi	r24, 0x00	; 0
    3efe:	08 95       	ret

00003f00 <lora_driver_getRn2483Hweui>:
    3f00:	cf 93       	push	r28
    3f02:	df 93       	push	r29
    3f04:	ec 01       	movw	r28, r24
    3f06:	60 e0       	ldi	r22, 0x00	; 0
    3f08:	70 e0       	ldi	r23, 0x00	; 0
    3f0a:	8a e4       	ldi	r24, 0x4A	; 74
    3f0c:	95 e0       	ldi	r25, 0x05	; 5
    3f0e:	bf de       	rcall	.-642    	; 0x3c8e <_uploadMessage>
    3f10:	e7 e0       	ldi	r30, 0x07	; 7
    3f12:	f4 e1       	ldi	r31, 0x14	; 20
    3f14:	01 90       	ld	r0, Z+
    3f16:	00 20       	and	r0, r0
    3f18:	e9 f7       	brne	.-6      	; 0x3f14 <lora_driver_getRn2483Hweui+0x14>
    3f1a:	e8 51       	subi	r30, 0x18	; 24
    3f1c:	f4 41       	sbci	r31, 0x14	; 20
    3f1e:	39 f4       	brne	.+14     	; 0x3f2e <lora_driver_getRn2483Hweui+0x2e>
    3f20:	67 e0       	ldi	r22, 0x07	; 7
    3f22:	74 e1       	ldi	r23, 0x14	; 20
    3f24:	ce 01       	movw	r24, r28
    3f26:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <strcpy>
    3f2a:	80 e0       	ldi	r24, 0x00	; 0
    3f2c:	02 c0       	rjmp	.+4      	; 0x3f32 <lora_driver_getRn2483Hweui+0x32>
    3f2e:	18 82       	st	Y, r1
    3f30:	81 e0       	ldi	r24, 0x01	; 1
    3f32:	df 91       	pop	r29
    3f34:	cf 91       	pop	r28
    3f36:	08 95       	ret

00003f38 <lora_driver_setDeviceIdentifier>:
    3f38:	fc 01       	movw	r30, r24
    3f3a:	01 90       	ld	r0, Z+
    3f3c:	00 20       	and	r0, r0
    3f3e:	e9 f7       	brne	.-6      	; 0x3f3a <lora_driver_setDeviceIdentifier+0x2>
    3f40:	9f 01       	movw	r18, r30
    3f42:	21 51       	subi	r18, 0x11	; 17
    3f44:	31 09       	sbc	r19, r1
    3f46:	28 17       	cp	r18, r24
    3f48:	39 07       	cpc	r19, r25
    3f4a:	29 f4       	brne	.+10     	; 0x3f56 <lora_driver_setDeviceIdentifier+0x1e>
    3f4c:	bc 01       	movw	r22, r24
    3f4e:	88 e7       	ldi	r24, 0x78	; 120
    3f50:	95 e0       	ldi	r25, 0x05	; 5
    3f52:	6c cf       	rjmp	.-296    	; 0x3e2c <_uploadMessageRc>
    3f54:	08 95       	ret
    3f56:	89 e0       	ldi	r24, 0x09	; 9
    3f58:	08 95       	ret

00003f5a <lora_driver_setApplicationIdentifier>:
    3f5a:	fc 01       	movw	r30, r24
    3f5c:	01 90       	ld	r0, Z+
    3f5e:	00 20       	and	r0, r0
    3f60:	e9 f7       	brne	.-6      	; 0x3f5c <lora_driver_setApplicationIdentifier+0x2>
    3f62:	9f 01       	movw	r18, r30
    3f64:	21 51       	subi	r18, 0x11	; 17
    3f66:	31 09       	sbc	r19, r1
    3f68:	28 17       	cp	r18, r24
    3f6a:	39 07       	cpc	r19, r25
    3f6c:	29 f4       	brne	.+10     	; 0x3f78 <lora_driver_setApplicationIdentifier+0x1e>
    3f6e:	bc 01       	movw	r22, r24
    3f70:	87 e8       	ldi	r24, 0x87	; 135
    3f72:	95 e0       	ldi	r25, 0x05	; 5
    3f74:	5b cf       	rjmp	.-330    	; 0x3e2c <_uploadMessageRc>
    3f76:	08 95       	ret
    3f78:	89 e0       	ldi	r24, 0x09	; 9
    3f7a:	08 95       	ret

00003f7c <lora_driver_setApplicationKey>:
    3f7c:	fc 01       	movw	r30, r24
    3f7e:	01 90       	ld	r0, Z+
    3f80:	00 20       	and	r0, r0
    3f82:	e9 f7       	brne	.-6      	; 0x3f7e <lora_driver_setApplicationKey+0x2>
    3f84:	9f 01       	movw	r18, r30
    3f86:	21 52       	subi	r18, 0x21	; 33
    3f88:	31 09       	sbc	r19, r1
    3f8a:	28 17       	cp	r18, r24
    3f8c:	39 07       	cpc	r19, r25
    3f8e:	29 f4       	brne	.+10     	; 0x3f9a <lora_driver_setApplicationKey+0x1e>
    3f90:	bc 01       	movw	r22, r24
    3f92:	86 e9       	ldi	r24, 0x96	; 150
    3f94:	95 e0       	ldi	r25, 0x05	; 5
    3f96:	4a cf       	rjmp	.-364    	; 0x3e2c <_uploadMessageRc>
    3f98:	08 95       	ret
    3f9a:	89 e0       	ldi	r24, 0x09	; 9
    3f9c:	08 95       	ret

00003f9e <lora_driver_saveMac>:
    3f9e:	60 e0       	ldi	r22, 0x00	; 0
    3fa0:	70 e0       	ldi	r23, 0x00	; 0
    3fa2:	85 ed       	ldi	r24, 0xD5	; 213
    3fa4:	95 e0       	ldi	r25, 0x05	; 5
    3fa6:	42 cf       	rjmp	.-380    	; 0x3e2c <_uploadMessageRc>
    3fa8:	08 95       	ret

00003faa <lora_driver_join>:
    3faa:	0f 93       	push	r16
    3fac:	1f 93       	push	r17
    3fae:	e8 2f       	mov	r30, r24
    3fb0:	f0 e0       	ldi	r31, 0x00	; 0
    3fb2:	ee 0f       	add	r30, r30
    3fb4:	ff 1f       	adc	r31, r31
    3fb6:	e1 55       	subi	r30, 0x51	; 81
    3fb8:	f8 4f       	sbci	r31, 0xF8	; 248
    3fba:	60 81       	ld	r22, Z
    3fbc:	71 81       	ldd	r23, Z+1	; 0x01
    3fbe:	8e ed       	ldi	r24, 0xDE	; 222
    3fc0:	95 e0       	ldi	r25, 0x05	; 5
    3fc2:	34 df       	rcall	.-408    	; 0x3e2c <_uploadMessageRc>
    3fc4:	81 11       	cpse	r24, r1
    3fc6:	14 c0       	rjmp	.+40     	; 0x3ff0 <lora_driver_join+0x46>
    3fc8:	08 e2       	ldi	r16, 0x28	; 40
    3fca:	15 e0       	ldi	r17, 0x05	; 5
    3fcc:	20 e0       	ldi	r18, 0x00	; 0
    3fce:	30 e0       	ldi	r19, 0x00	; 0
    3fd0:	4d e2       	ldi	r20, 0x2D	; 45
    3fd2:	50 e0       	ldi	r21, 0x00	; 0
    3fd4:	67 e0       	ldi	r22, 0x07	; 7
    3fd6:	74 e1       	ldi	r23, 0x14	; 20
    3fd8:	80 91 7e 13 	lds	r24, 0x137E	; 0x80137e <_serialReplyBufferHandle>
    3fdc:	90 91 7f 13 	lds	r25, 0x137F	; 0x80137f <_serialReplyBufferHandle+0x1>
    3fe0:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <xStreamBufferReceive>
    3fe4:	88 23       	and	r24, r24
    3fe6:	21 f0       	breq	.+8      	; 0x3ff0 <lora_driver_join+0x46>
    3fe8:	87 e0       	ldi	r24, 0x07	; 7
    3fea:	94 e1       	ldi	r25, 0x14	; 20
    3fec:	aa de       	rcall	.-684    	; 0x3d42 <_reply2ReturnCode>
    3fee:	03 c0       	rjmp	.+6      	; 0x3ff6 <lora_driver_join+0x4c>
    3ff0:	87 e0       	ldi	r24, 0x07	; 7
    3ff2:	94 e1       	ldi	r25, 0x14	; 20
    3ff4:	a6 de       	rcall	.-692    	; 0x3d42 <_reply2ReturnCode>
    3ff6:	1f 91       	pop	r17
    3ff8:	0f 91       	pop	r16
    3ffa:	08 95       	ret

00003ffc <lora_driver_sendUploadMessage>:
    3ffc:	0f 93       	push	r16
    3ffe:	1f 93       	push	r17
    4000:	cf 93       	push	r28
    4002:	df 93       	push	r29
    4004:	1f 92       	push	r1
    4006:	cd b7       	in	r28, 0x3d	; 61
    4008:	de b7       	in	r29, 0x3e	; 62
    400a:	db 01       	movw	r26, r22
    400c:	11 96       	adiw	r26, 0x01	; 1
    400e:	9c 91       	ld	r25, X
    4010:	11 97       	sbiw	r26, 0x01	; 1
    4012:	95 31       	cpi	r25, 0x15	; 21
    4014:	08 f0       	brcs	.+2      	; 0x4018 <lora_driver_sendUploadMessage+0x1c>
    4016:	b4 c0       	rjmp	.+360    	; 0x4180 <lora_driver_sendUploadMessage+0x184>
    4018:	99 23       	and	r25, r25
    401a:	81 f1       	breq	.+96     	; 0x407c <lora_driver_sendUploadMessage+0x80>
    401c:	60 e0       	ldi	r22, 0x00	; 0
    401e:	70 e0       	ldi	r23, 0x00	; 0
    4020:	27 2f       	mov	r18, r23
    4022:	30 e0       	ldi	r19, 0x00	; 0
    4024:	46 2f       	mov	r20, r22
    4026:	50 e0       	ldi	r21, 0x00	; 0
    4028:	fd 01       	movw	r30, r26
    402a:	e4 0f       	add	r30, r20
    402c:	f5 1f       	adc	r31, r21
    402e:	92 81       	ldd	r25, Z+2	; 0x02
    4030:	92 95       	swap	r25
    4032:	9f 70       	andi	r25, 0x0F	; 15
    4034:	9a 30       	cpi	r25, 0x0A	; 10
    4036:	10 f0       	brcs	.+4      	; 0x403c <lora_driver_sendUploadMessage+0x40>
    4038:	99 5c       	subi	r25, 0xC9	; 201
    403a:	01 c0       	rjmp	.+2      	; 0x403e <lora_driver_sendUploadMessage+0x42>
    403c:	90 5d       	subi	r25, 0xD0	; 208
    403e:	f9 01       	movw	r30, r18
    4040:	e8 56       	subi	r30, 0x68	; 104
    4042:	fc 4e       	sbci	r31, 0xEC	; 236
    4044:	90 83       	st	Z, r25
    4046:	2f 5f       	subi	r18, 0xFF	; 255
    4048:	3f 4f       	sbci	r19, 0xFF	; 255
    404a:	fd 01       	movw	r30, r26
    404c:	e4 0f       	add	r30, r20
    404e:	f5 1f       	adc	r31, r21
    4050:	92 81       	ldd	r25, Z+2	; 0x02
    4052:	9f 70       	andi	r25, 0x0F	; 15
    4054:	49 2f       	mov	r20, r25
    4056:	50 e0       	ldi	r21, 0x00	; 0
    4058:	4a 30       	cpi	r20, 0x0A	; 10
    405a:	51 05       	cpc	r21, r1
    405c:	14 f0       	brlt	.+4      	; 0x4062 <lora_driver_sendUploadMessage+0x66>
    405e:	99 5c       	subi	r25, 0xC9	; 201
    4060:	01 c0       	rjmp	.+2      	; 0x4064 <lora_driver_sendUploadMessage+0x68>
    4062:	90 5d       	subi	r25, 0xD0	; 208
    4064:	f9 01       	movw	r30, r18
    4066:	e8 56       	subi	r30, 0x68	; 104
    4068:	fc 4e       	sbci	r31, 0xEC	; 236
    406a:	90 83       	st	Z, r25
    406c:	7e 5f       	subi	r23, 0xFE	; 254
    406e:	6f 5f       	subi	r22, 0xFF	; 255
    4070:	11 96       	adiw	r26, 0x01	; 1
    4072:	9c 91       	ld	r25, X
    4074:	11 97       	sbiw	r26, 0x01	; 1
    4076:	69 17       	cp	r22, r25
    4078:	98 f2       	brcs	.-90     	; 0x4020 <lora_driver_sendUploadMessage+0x24>
    407a:	01 c0       	rjmp	.+2      	; 0x407e <lora_driver_sendUploadMessage+0x82>
    407c:	70 e0       	ldi	r23, 0x00	; 0
    407e:	e7 2f       	mov	r30, r23
    4080:	f0 e0       	ldi	r31, 0x00	; 0
    4082:	e8 56       	subi	r30, 0x68	; 104
    4084:	fc 4e       	sbci	r31, 0xEC	; 236
    4086:	10 82       	st	Z, r1
    4088:	4c 91       	ld	r20, X
    408a:	81 11       	cpse	r24, r1
    408c:	03 c0       	rjmp	.+6      	; 0x4094 <lora_driver_sendUploadMessage+0x98>
    408e:	87 ee       	ldi	r24, 0xE7	; 231
    4090:	95 e0       	ldi	r25, 0x05	; 5
    4092:	02 c0       	rjmp	.+4      	; 0x4098 <lora_driver_sendUploadMessage+0x9c>
    4094:	89 ee       	ldi	r24, 0xE9	; 233
    4096:	95 e0       	ldi	r25, 0x05	; 5
    4098:	28 e9       	ldi	r18, 0x98	; 152
    409a:	33 e1       	ldi	r19, 0x13	; 19
    409c:	3f 93       	push	r19
    409e:	2f 93       	push	r18
    40a0:	1f 92       	push	r1
    40a2:	4f 93       	push	r20
    40a4:	9f 93       	push	r25
    40a6:	8f 93       	push	r24
    40a8:	8d ee       	ldi	r24, 0xED	; 237
    40aa:	95 e0       	ldi	r25, 0x05	; 5
    40ac:	9f 93       	push	r25
    40ae:	8f 93       	push	r24
    40b0:	8a ed       	ldi	r24, 0xDA	; 218
    40b2:	93 e1       	ldi	r25, 0x13	; 19
    40b4:	9f 93       	push	r25
    40b6:	8f 93       	push	r24
    40b8:	0e 94 96 2e 	call	0x5d2c	; 0x5d2c <sprintf>
    40bc:	60 e0       	ldi	r22, 0x00	; 0
    40be:	70 e0       	ldi	r23, 0x00	; 0
    40c0:	8a ed       	ldi	r24, 0xDA	; 218
    40c2:	93 e1       	ldi	r25, 0x13	; 19
    40c4:	b3 de       	rcall	.-666    	; 0x3e2c <_uploadMessageRc>
    40c6:	0f b6       	in	r0, 0x3f	; 63
    40c8:	f8 94       	cli
    40ca:	de bf       	out	0x3e, r29	; 62
    40cc:	0f be       	out	0x3f, r0	; 63
    40ce:	cd bf       	out	0x3d, r28	; 61
    40d0:	81 11       	cpse	r24, r1
    40d2:	59 c0       	rjmp	.+178    	; 0x4186 <lora_driver_sendUploadMessage+0x18a>
    40d4:	08 e2       	ldi	r16, 0x28	; 40
    40d6:	15 e0       	ldi	r17, 0x05	; 5
    40d8:	20 e0       	ldi	r18, 0x00	; 0
    40da:	30 e0       	ldi	r19, 0x00	; 0
    40dc:	4d e2       	ldi	r20, 0x2D	; 45
    40de:	50 e0       	ldi	r21, 0x00	; 0
    40e0:	67 e0       	ldi	r22, 0x07	; 7
    40e2:	74 e1       	ldi	r23, 0x14	; 20
    40e4:	80 91 7e 13 	lds	r24, 0x137E	; 0x80137e <_serialReplyBufferHandle>
    40e8:	90 91 7f 13 	lds	r25, 0x137F	; 0x80137f <_serialReplyBufferHandle+0x1>
    40ec:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <xStreamBufferReceive>
    40f0:	88 23       	and	r24, r24
    40f2:	09 f4       	brne	.+2      	; 0x40f6 <lora_driver_sendUploadMessage+0xfa>
    40f4:	47 c0       	rjmp	.+142    	; 0x4184 <lora_driver_sendUploadMessage+0x188>
    40f6:	87 e0       	ldi	r24, 0x07	; 7
    40f8:	94 e1       	ldi	r25, 0x14	; 20
    40fa:	23 de       	rcall	.-954    	; 0x3d42 <_reply2ReturnCode>
    40fc:	8e 30       	cpi	r24, 0x0E	; 14
    40fe:	09 f0       	breq	.+2      	; 0x4102 <lora_driver_sendUploadMessage+0x106>
    4100:	42 c0       	rjmp	.+132    	; 0x4186 <lora_driver_sendUploadMessage+0x18a>
    4102:	87 e0       	ldi	r24, 0x07	; 7
    4104:	89 83       	std	Y+1, r24	; 0x01
    4106:	80 91 7c 13 	lds	r24, 0x137C	; 0x80137c <_downlinkMessageBuffer>
    410a:	90 91 7d 13 	lds	r25, 0x137D	; 0x80137d <_downlinkMessageBuffer+0x1>
    410e:	89 2b       	or	r24, r25
    4110:	a9 f1       	breq	.+106    	; 0x417c <lora_driver_sendUploadMessage+0x180>
    4112:	be 01       	movw	r22, r28
    4114:	6f 5f       	subi	r22, 0xFF	; 255
    4116:	7f 4f       	sbci	r23, 0xFF	; 255
    4118:	87 e0       	ldi	r24, 0x07	; 7
    411a:	94 e1       	ldi	r25, 0x14	; 20
    411c:	68 d1       	rcall	.+720    	; 0x43ee <decode_port_no>
    411e:	80 93 82 13 	sts	0x1382, r24	; 0x801382 <_downlinkPayload>
    4122:	e9 81       	ldd	r30, Y+1	; 0x01
    4124:	f0 e0       	ldi	r31, 0x00	; 0
    4126:	e9 5f       	subi	r30, 0xF9	; 249
    4128:	fb 4e       	sbci	r31, 0xEB	; 235
    412a:	df 01       	movw	r26, r30
    412c:	0d 90       	ld	r0, X+
    412e:	00 20       	and	r0, r0
    4130:	e9 f7       	brne	.-6      	; 0x412c <lora_driver_sendUploadMessage+0x130>
    4132:	11 97       	sbiw	r26, 0x01	; 1
    4134:	ae 1b       	sub	r26, r30
    4136:	bf 0b       	sbc	r27, r31
    4138:	aa 23       	and	r26, r26
    413a:	91 f0       	breq	.+36     	; 0x4160 <lora_driver_sendUploadMessage+0x164>
    413c:	bb 27       	eor	r27, r27
    413e:	cd 01       	movw	r24, r26
    4140:	01 97       	sbiw	r24, 0x01	; 1
    4142:	9c 01       	movw	r18, r24
    4144:	12 f4       	brpl	.+4      	; 0x414a <lora_driver_sendUploadMessage+0x14e>
    4146:	2f 5f       	subi	r18, 0xFF	; 255
    4148:	3f 4f       	sbci	r19, 0xFF	; 255
    414a:	35 95       	asr	r19
    414c:	27 95       	ror	r18
    414e:	20 93 83 13 	sts	0x1383, r18	; 0x801383 <_downlinkPayload+0x1>
    4152:	af 01       	movw	r20, r30
    4154:	4f 5f       	subi	r20, 0xFF	; 255
    4156:	5f 4f       	sbci	r21, 0xFF	; 255
    4158:	64 e1       	ldi	r22, 0x14	; 20
    415a:	84 e8       	ldi	r24, 0x84	; 132
    415c:	93 e1       	ldi	r25, 0x13	; 19
    415e:	73 d1       	rcall	.+742    	; 0x4446 <decode_hexadecimal_string_bytes>
    4160:	01 e0       	ldi	r16, 0x01	; 1
    4162:	10 e0       	ldi	r17, 0x00	; 0
    4164:	20 e0       	ldi	r18, 0x00	; 0
    4166:	30 e0       	ldi	r19, 0x00	; 0
    4168:	46 e1       	ldi	r20, 0x16	; 22
    416a:	50 e0       	ldi	r21, 0x00	; 0
    416c:	62 e8       	ldi	r22, 0x82	; 130
    416e:	73 e1       	ldi	r23, 0x13	; 19
    4170:	80 91 7c 13 	lds	r24, 0x137C	; 0x80137c <_downlinkMessageBuffer>
    4174:	90 91 7d 13 	lds	r25, 0x137D	; 0x80137d <_downlinkMessageBuffer+0x1>
    4178:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <xStreamBufferSend>
    417c:	8e e0       	ldi	r24, 0x0E	; 14
    417e:	03 c0       	rjmp	.+6      	; 0x4186 <lora_driver_sendUploadMessage+0x18a>
    4180:	84 e1       	ldi	r24, 0x14	; 20
    4182:	01 c0       	rjmp	.+2      	; 0x4186 <lora_driver_sendUploadMessage+0x18a>
    4184:	80 e0       	ldi	r24, 0x00	; 0
    4186:	0f 90       	pop	r0
    4188:	df 91       	pop	r29
    418a:	cf 91       	pop	r28
    418c:	1f 91       	pop	r17
    418e:	0f 91       	pop	r16
    4190:	08 95       	ret

00004192 <lora_driver_setAdaptiveDataRate>:
    4192:	81 30       	cpi	r24, 0x01	; 1
    4194:	19 f0       	breq	.+6      	; 0x419c <lora_driver_setAdaptiveDataRate+0xa>
    4196:	6d ef       	ldi	r22, 0xFD	; 253
    4198:	75 e0       	ldi	r23, 0x05	; 5
    419a:	02 c0       	rjmp	.+4      	; 0x41a0 <lora_driver_setAdaptiveDataRate+0xe>
    419c:	66 ed       	ldi	r22, 0xD6	; 214
    419e:	76 e0       	ldi	r23, 0x06	; 6
    41a0:	81 e0       	ldi	r24, 0x01	; 1
    41a2:	96 e0       	ldi	r25, 0x06	; 6
    41a4:	43 ce       	rjmp	.-890    	; 0x3e2c <_uploadMessageRc>
    41a6:	08 95       	ret

000041a8 <lora_driver_setReceiveDelay>:
    41a8:	9f 93       	push	r25
    41aa:	8f 93       	push	r24
    41ac:	82 e3       	ldi	r24, 0x32	; 50
    41ae:	96 e0       	ldi	r25, 0x06	; 6
    41b0:	9f 93       	push	r25
    41b2:	8f 93       	push	r24
    41b4:	8a ed       	ldi	r24, 0xDA	; 218
    41b6:	93 e1       	ldi	r25, 0x13	; 19
    41b8:	9f 93       	push	r25
    41ba:	8f 93       	push	r24
    41bc:	0e 94 96 2e 	call	0x5d2c	; 0x5d2c <sprintf>
    41c0:	60 e0       	ldi	r22, 0x00	; 0
    41c2:	70 e0       	ldi	r23, 0x00	; 0
    41c4:	8a ed       	ldi	r24, 0xDA	; 218
    41c6:	93 e1       	ldi	r25, 0x13	; 19
    41c8:	31 de       	rcall	.-926    	; 0x3e2c <_uploadMessageRc>
    41ca:	0f 90       	pop	r0
    41cc:	0f 90       	pop	r0
    41ce:	0f 90       	pop	r0
    41d0:	0f 90       	pop	r0
    41d2:	0f 90       	pop	r0
    41d4:	0f 90       	pop	r0
    41d6:	08 95       	ret

000041d8 <lora_driver_configureToEu868>:
    41d8:	2f 92       	push	r2
    41da:	3f 92       	push	r3
    41dc:	4f 92       	push	r4
    41de:	5f 92       	push	r5
    41e0:	6f 92       	push	r6
    41e2:	7f 92       	push	r7
    41e4:	8f 92       	push	r8
    41e6:	9f 92       	push	r9
    41e8:	af 92       	push	r10
    41ea:	bf 92       	push	r11
    41ec:	cf 92       	push	r12
    41ee:	df 92       	push	r13
    41f0:	ef 92       	push	r14
    41f2:	ff 92       	push	r15
    41f4:	0f 93       	push	r16
    41f6:	1f 93       	push	r17
    41f8:	cf 93       	push	r28
    41fa:	df 93       	push	r29
    41fc:	cd b7       	in	r28, 0x3d	; 61
    41fe:	de b7       	in	r29, 0x3e	; 62
    4200:	a0 97       	sbiw	r28, 0x20	; 32
    4202:	0f b6       	in	r0, 0x3f	; 63
    4204:	f8 94       	cli
    4206:	de bf       	out	0x3e, r29	; 62
    4208:	0f be       	out	0x3f, r0	; 63
    420a:	cd bf       	out	0x3d, r28	; 61
    420c:	6f e5       	ldi	r22, 0x5F	; 95
    420e:	76 e0       	ldi	r23, 0x06	; 6
    4210:	8b e6       	ldi	r24, 0x6B	; 107
    4212:	96 e0       	ldi	r25, 0x06	; 6
    4214:	3c dd       	rcall	.-1416   	; 0x3c8e <_uploadMessage>
    4216:	95 dd       	rcall	.-1238   	; 0x3d42 <_reply2ReturnCode>
    4218:	81 11       	cpse	r24, r1
    421a:	a3 c0       	rjmp	.+326    	; 0x4362 <lora_driver_configureToEu868+0x18a>
    421c:	80 e2       	ldi	r24, 0x20	; 32
    421e:	e2 e2       	ldi	r30, 0x22	; 34
    4220:	f2 e0       	ldi	r31, 0x02	; 2
    4222:	de 01       	movw	r26, r28
    4224:	11 96       	adiw	r26, 0x01	; 1
    4226:	01 90       	ld	r0, Z+
    4228:	0d 92       	st	X+, r0
    422a:	8a 95       	dec	r24
    422c:	e1 f7       	brne	.-8      	; 0x4226 <lora_driver_configureToEu868+0x4e>
    422e:	9e 01       	movw	r18, r28
    4230:	2f 5f       	subi	r18, 0xFF	; 255
    4232:	3f 4f       	sbci	r19, 0xFF	; 255
    4234:	69 01       	movw	r12, r18
    4236:	e1 2c       	mov	r14, r1
    4238:	f1 2c       	mov	r15, r1
    423a:	0f 2e       	mov	r0, r31
    423c:	f7 e7       	ldi	r31, 0x77	; 119
    423e:	af 2e       	mov	r10, r31
    4240:	f6 e0       	ldi	r31, 0x06	; 6
    4242:	bf 2e       	mov	r11, r31
    4244:	f0 2d       	mov	r31, r0
    4246:	0a ed       	ldi	r16, 0xDA	; 218
    4248:	13 e1       	ldi	r17, 0x13	; 19
    424a:	0f 2e       	mov	r0, r31
    424c:	f0 e9       	ldi	r31, 0x90	; 144
    424e:	4f 2e       	mov	r4, r31
    4250:	f6 e0       	ldi	r31, 0x06	; 6
    4252:	5f 2e       	mov	r5, r31
    4254:	f0 2d       	mov	r31, r0
    4256:	0f 2e       	mov	r0, r31
    4258:	f7 ea       	ldi	r31, 0xA7	; 167
    425a:	8f 2e       	mov	r8, r31
    425c:	f6 e0       	ldi	r31, 0x06	; 6
    425e:	9f 2e       	mov	r9, r31
    4260:	f0 2d       	mov	r31, r0
    4262:	0f 2e       	mov	r0, r31
    4264:	f1 ec       	ldi	r31, 0xC1	; 193
    4266:	6f 2e       	mov	r6, r31
    4268:	f6 e0       	ldi	r31, 0x06	; 6
    426a:	7f 2e       	mov	r7, r31
    426c:	f0 2d       	mov	r31, r0
    426e:	3e 2c       	mov	r3, r14
    4270:	2f 2c       	mov	r2, r15
    4272:	ff 92       	push	r15
    4274:	ef 92       	push	r14
    4276:	bf 92       	push	r11
    4278:	af 92       	push	r10
    427a:	1f 93       	push	r17
    427c:	0f 93       	push	r16
    427e:	0e 94 96 2e 	call	0x5d2c	; 0x5d2c <sprintf>
    4282:	60 e0       	ldi	r22, 0x00	; 0
    4284:	70 e0       	ldi	r23, 0x00	; 0
    4286:	c8 01       	movw	r24, r16
    4288:	02 dd       	rcall	.-1532   	; 0x3c8e <_uploadMessage>
    428a:	5b dd       	rcall	.-1354   	; 0x3d42 <_reply2ReturnCode>
    428c:	0f 90       	pop	r0
    428e:	0f 90       	pop	r0
    4290:	0f 90       	pop	r0
    4292:	0f 90       	pop	r0
    4294:	0f 90       	pop	r0
    4296:	0f 90       	pop	r0
    4298:	81 11       	cpse	r24, r1
    429a:	63 c0       	rjmp	.+198    	; 0x4362 <lora_driver_configureToEu868+0x18a>
    429c:	32 e0       	ldi	r19, 0x02	; 2
    429e:	3e 15       	cp	r19, r14
    42a0:	e8 f4       	brcc	.+58     	; 0x42dc <lora_driver_configureToEu868+0x104>
    42a2:	f6 01       	movw	r30, r12
    42a4:	83 81       	ldd	r24, Z+3	; 0x03
    42a6:	8f 93       	push	r24
    42a8:	82 81       	ldd	r24, Z+2	; 0x02
    42aa:	8f 93       	push	r24
    42ac:	81 81       	ldd	r24, Z+1	; 0x01
    42ae:	8f 93       	push	r24
    42b0:	80 81       	ld	r24, Z
    42b2:	8f 93       	push	r24
    42b4:	ff 92       	push	r15
    42b6:	ef 92       	push	r14
    42b8:	5f 92       	push	r5
    42ba:	4f 92       	push	r4
    42bc:	1f 93       	push	r17
    42be:	0f 93       	push	r16
    42c0:	0e 94 96 2e 	call	0x5d2c	; 0x5d2c <sprintf>
    42c4:	60 e0       	ldi	r22, 0x00	; 0
    42c6:	70 e0       	ldi	r23, 0x00	; 0
    42c8:	c8 01       	movw	r24, r16
    42ca:	e1 dc       	rcall	.-1598   	; 0x3c8e <_uploadMessage>
    42cc:	3a dd       	rcall	.-1420   	; 0x3d42 <_reply2ReturnCode>
    42ce:	0f b6       	in	r0, 0x3f	; 63
    42d0:	f8 94       	cli
    42d2:	de bf       	out	0x3e, r29	; 62
    42d4:	0f be       	out	0x3f, r0	; 63
    42d6:	cd bf       	out	0x3d, r28	; 61
    42d8:	81 11       	cpse	r24, r1
    42da:	43 c0       	rjmp	.+134    	; 0x4362 <lora_driver_configureToEu868+0x18a>
    42dc:	2f 92       	push	r2
    42de:	3f 92       	push	r3
    42e0:	9f 92       	push	r9
    42e2:	8f 92       	push	r8
    42e4:	1f 93       	push	r17
    42e6:	0f 93       	push	r16
    42e8:	0e 94 96 2e 	call	0x5d2c	; 0x5d2c <sprintf>
    42ec:	60 e0       	ldi	r22, 0x00	; 0
    42ee:	70 e0       	ldi	r23, 0x00	; 0
    42f0:	c8 01       	movw	r24, r16
    42f2:	cd dc       	rcall	.-1638   	; 0x3c8e <_uploadMessage>
    42f4:	26 dd       	rcall	.-1460   	; 0x3d42 <_reply2ReturnCode>
    42f6:	0f 90       	pop	r0
    42f8:	0f 90       	pop	r0
    42fa:	0f 90       	pop	r0
    42fc:	0f 90       	pop	r0
    42fe:	0f 90       	pop	r0
    4300:	0f 90       	pop	r0
    4302:	81 11       	cpse	r24, r1
    4304:	2e c0       	rjmp	.+92     	; 0x4362 <lora_driver_configureToEu868+0x18a>
    4306:	2f 92       	push	r2
    4308:	3f 92       	push	r3
    430a:	7f 92       	push	r7
    430c:	6f 92       	push	r6
    430e:	1f 93       	push	r17
    4310:	0f 93       	push	r16
    4312:	0e 94 96 2e 	call	0x5d2c	; 0x5d2c <sprintf>
    4316:	60 e0       	ldi	r22, 0x00	; 0
    4318:	70 e0       	ldi	r23, 0x00	; 0
    431a:	c8 01       	movw	r24, r16
    431c:	b8 dc       	rcall	.-1680   	; 0x3c8e <_uploadMessage>
    431e:	11 dd       	rcall	.-1502   	; 0x3d42 <_reply2ReturnCode>
    4320:	0f 90       	pop	r0
    4322:	0f 90       	pop	r0
    4324:	0f 90       	pop	r0
    4326:	0f 90       	pop	r0
    4328:	0f 90       	pop	r0
    432a:	0f 90       	pop	r0
    432c:	81 11       	cpse	r24, r1
    432e:	19 c0       	rjmp	.+50     	; 0x4362 <lora_driver_configureToEu868+0x18a>
    4330:	3f ef       	ldi	r19, 0xFF	; 255
    4332:	e3 1a       	sub	r14, r19
    4334:	f3 0a       	sbc	r15, r19
    4336:	84 e0       	ldi	r24, 0x04	; 4
    4338:	c8 0e       	add	r12, r24
    433a:	d1 1c       	adc	r13, r1
    433c:	98 e0       	ldi	r25, 0x08	; 8
    433e:	e9 16       	cp	r14, r25
    4340:	f1 04       	cpc	r15, r1
    4342:	09 f0       	breq	.+2      	; 0x4346 <lora_driver_configureToEu868+0x16e>
    4344:	94 cf       	rjmp	.-216    	; 0x426e <lora_driver_configureToEu868+0x96>
    4346:	60 e0       	ldi	r22, 0x00	; 0
    4348:	70 e0       	ldi	r23, 0x00	; 0
    434a:	89 ed       	ldi	r24, 0xD9	; 217
    434c:	96 e0       	ldi	r25, 0x06	; 6
    434e:	9f dc       	rcall	.-1730   	; 0x3c8e <_uploadMessage>
    4350:	f8 dc       	rcall	.-1552   	; 0x3d42 <_reply2ReturnCode>
    4352:	81 11       	cpse	r24, r1
    4354:	06 c0       	rjmp	.+12     	; 0x4362 <lora_driver_configureToEu868+0x18a>
    4356:	60 e0       	ldi	r22, 0x00	; 0
    4358:	70 e0       	ldi	r23, 0x00	; 0
    435a:	8a ee       	ldi	r24, 0xEA	; 234
    435c:	96 e0       	ldi	r25, 0x06	; 6
    435e:	97 dc       	rcall	.-1746   	; 0x3c8e <_uploadMessage>
    4360:	f0 dc       	rcall	.-1568   	; 0x3d42 <_reply2ReturnCode>
    4362:	a0 96       	adiw	r28, 0x20	; 32
    4364:	0f b6       	in	r0, 0x3f	; 63
    4366:	f8 94       	cli
    4368:	de bf       	out	0x3e, r29	; 62
    436a:	0f be       	out	0x3f, r0	; 63
    436c:	cd bf       	out	0x3d, r28	; 61
    436e:	df 91       	pop	r29
    4370:	cf 91       	pop	r28
    4372:	1f 91       	pop	r17
    4374:	0f 91       	pop	r16
    4376:	ff 90       	pop	r15
    4378:	ef 90       	pop	r14
    437a:	df 90       	pop	r13
    437c:	cf 90       	pop	r12
    437e:	bf 90       	pop	r11
    4380:	af 90       	pop	r10
    4382:	9f 90       	pop	r9
    4384:	8f 90       	pop	r8
    4386:	7f 90       	pop	r7
    4388:	6f 90       	pop	r6
    438a:	5f 90       	pop	r5
    438c:	4f 90       	pop	r4
    438e:	3f 90       	pop	r3
    4390:	2f 90       	pop	r2
    4392:	08 95       	ret

00004394 <lora_driver_setOtaaIdentity>:
    4394:	ef 92       	push	r14
    4396:	ff 92       	push	r15
    4398:	0f 93       	push	r16
    439a:	1f 93       	push	r17
    439c:	cf 93       	push	r28
    439e:	df 93       	push	r29
    43a0:	ec 01       	movw	r28, r24
    43a2:	8b 01       	movw	r16, r22
    43a4:	7a 01       	movw	r14, r20
    43a6:	81 e0       	ldi	r24, 0x01	; 1
    43a8:	f4 de       	rcall	.-536    	; 0x4192 <lora_driver_setAdaptiveDataRate>
    43aa:	81 11       	cpse	r24, r1
    43ac:	0d c0       	rjmp	.+26     	; 0x43c8 <lora_driver_setOtaaIdentity+0x34>
    43ae:	ce 01       	movw	r24, r28
    43b0:	d4 dd       	rcall	.-1112   	; 0x3f5a <lora_driver_setApplicationIdentifier>
    43b2:	81 11       	cpse	r24, r1
    43b4:	09 c0       	rjmp	.+18     	; 0x43c8 <lora_driver_setOtaaIdentity+0x34>
    43b6:	c8 01       	movw	r24, r16
    43b8:	e1 dd       	rcall	.-1086   	; 0x3f7c <lora_driver_setApplicationKey>
    43ba:	81 11       	cpse	r24, r1
    43bc:	05 c0       	rjmp	.+10     	; 0x43c8 <lora_driver_setOtaaIdentity+0x34>
    43be:	c7 01       	movw	r24, r14
    43c0:	bb dd       	rcall	.-1162   	; 0x3f38 <lora_driver_setDeviceIdentifier>
    43c2:	81 11       	cpse	r24, r1
    43c4:	01 c0       	rjmp	.+2      	; 0x43c8 <lora_driver_setOtaaIdentity+0x34>
    43c6:	eb dd       	rcall	.-1066   	; 0x3f9e <lora_driver_saveMac>
    43c8:	df 91       	pop	r29
    43ca:	cf 91       	pop	r28
    43cc:	1f 91       	pop	r17
    43ce:	0f 91       	pop	r16
    43d0:	ff 90       	pop	r15
    43d2:	ef 90       	pop	r14
    43d4:	08 95       	ret

000043d6 <lora_driver_mapReturnCodeToText>:
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	fc 01       	movw	r30, r24
    43da:	ee 0f       	add	r30, r30
    43dc:	ff 1f       	adc	r31, r31
    43de:	8e 0f       	add	r24, r30
    43e0:	9f 1f       	adc	r25, r31
    43e2:	fc 01       	movw	r30, r24
    43e4:	ed 54       	subi	r30, 0x4D	; 77
    43e6:	f8 4f       	sbci	r31, 0xF8	; 248
    43e8:	81 81       	ldd	r24, Z+1	; 0x01
    43ea:	92 81       	ldd	r25, Z+2	; 0x02
    43ec:	08 95       	ret

000043ee <decode_port_no>:
    43ee:	dc 01       	movw	r26, r24
    43f0:	00 97       	sbiw	r24, 0x00	; 0
    43f2:	29 f1       	breq	.+74     	; 0x443e <decode_port_no+0x50>
    43f4:	fb 01       	movw	r30, r22
    43f6:	20 81       	ld	r18, Z
    43f8:	fc 01       	movw	r30, r24
    43fa:	01 90       	ld	r0, Z+
    43fc:	00 20       	and	r0, r0
    43fe:	e9 f7       	brne	.-6      	; 0x43fa <decode_port_no+0xc>
    4400:	31 97       	sbiw	r30, 0x01	; 1
    4402:	e8 1b       	sub	r30, r24
    4404:	f9 0b       	sbc	r31, r25
    4406:	82 2f       	mov	r24, r18
    4408:	90 e0       	ldi	r25, 0x00	; 0
    440a:	e8 17       	cp	r30, r24
    440c:	f9 07       	cpc	r31, r25
    440e:	c8 f0       	brcs	.+50     	; 0x4442 <decode_port_no+0x54>
    4410:	80 e0       	ldi	r24, 0x00	; 0
    4412:	08 c0       	rjmp	.+16     	; 0x4424 <decode_port_no+0x36>
    4414:	88 0f       	add	r24, r24
    4416:	38 2f       	mov	r19, r24
    4418:	33 0f       	add	r19, r19
    441a:	33 0f       	add	r19, r19
    441c:	83 0f       	add	r24, r19
    441e:	80 53       	subi	r24, 0x30	; 48
    4420:	89 0f       	add	r24, r25
    4422:	2f 5f       	subi	r18, 0xFF	; 255
    4424:	fd 01       	movw	r30, r26
    4426:	e2 0f       	add	r30, r18
    4428:	f1 1d       	adc	r31, r1
    442a:	90 81       	ld	r25, Z
    442c:	30 ed       	ldi	r19, 0xD0	; 208
    442e:	39 0f       	add	r19, r25
    4430:	3a 30       	cpi	r19, 0x0A	; 10
    4432:	10 f4       	brcc	.+4      	; 0x4438 <decode_port_no+0x4a>
    4434:	91 11       	cpse	r25, r1
    4436:	ee cf       	rjmp	.-36     	; 0x4414 <decode_port_no+0x26>
    4438:	fb 01       	movw	r30, r22
    443a:	20 83       	st	Z, r18
    443c:	08 95       	ret
    443e:	80 e0       	ldi	r24, 0x00	; 0
    4440:	08 95       	ret
    4442:	80 e0       	ldi	r24, 0x00	; 0
    4444:	08 95       	ret

00004446 <decode_hexadecimal_string_bytes>:
    4446:	0f 93       	push	r16
    4448:	1f 93       	push	r17
    444a:	cf 93       	push	r28
    444c:	df 93       	push	r29
    444e:	dc 01       	movw	r26, r24
    4450:	ea 01       	movw	r28, r20
    4452:	20 97       	sbiw	r28, 0x00	; 0
    4454:	e1 f1       	breq	.+120    	; 0x44ce <decode_hexadecimal_string_bytes+0x88>
    4456:	fa 01       	movw	r30, r20
    4458:	01 90       	ld	r0, Z+
    445a:	00 20       	and	r0, r0
    445c:	e9 f7       	brne	.-6      	; 0x4458 <decode_hexadecimal_string_bytes+0x12>
    445e:	31 97       	sbiw	r30, 0x01	; 1
    4460:	e4 1b       	sub	r30, r20
    4462:	f5 0b       	sbc	r31, r21
    4464:	32 97       	sbiw	r30, 0x02	; 2
    4466:	10 f5       	brcc	.+68     	; 0x44ac <decode_hexadecimal_string_bytes+0x66>
    4468:	32 c0       	rjmp	.+100    	; 0x44ce <decode_hexadecimal_string_bytes+0x88>
    446a:	8d 01       	movw	r16, r26
    446c:	04 0f       	add	r16, r20
    446e:	15 1f       	adc	r17, r21
    4470:	30 e0       	ldi	r19, 0x00	; 0
    4472:	ae 01       	movw	r20, r28
    4474:	42 0f       	add	r20, r18
    4476:	53 1f       	adc	r21, r19
    4478:	fa 01       	movw	r30, r20
    447a:	90 81       	ld	r25, Z
    447c:	91 34       	cpi	r25, 0x41	; 65
    447e:	28 f0       	brcs	.+10     	; 0x448a <decode_hexadecimal_string_bytes+0x44>
    4480:	97 53       	subi	r25, 0x37	; 55
    4482:	59 2f       	mov	r21, r25
    4484:	52 95       	swap	r21
    4486:	50 7f       	andi	r21, 0xF0	; 240
    4488:	03 c0       	rjmp	.+6      	; 0x4490 <decode_hexadecimal_string_bytes+0x4a>
    448a:	59 2f       	mov	r21, r25
    448c:	52 95       	swap	r21
    448e:	50 7f       	andi	r21, 0xF0	; 240
    4490:	2c 0f       	add	r18, r28
    4492:	3d 1f       	adc	r19, r29
    4494:	f9 01       	movw	r30, r18
    4496:	91 81       	ldd	r25, Z+1	; 0x01
    4498:	91 34       	cpi	r25, 0x41	; 65
    449a:	10 f0       	brcs	.+4      	; 0x44a0 <decode_hexadecimal_string_bytes+0x5a>
    449c:	97 53       	subi	r25, 0x37	; 55
    449e:	01 c0       	rjmp	.+2      	; 0x44a2 <decode_hexadecimal_string_bytes+0x5c>
    44a0:	90 53       	subi	r25, 0x30	; 48
    44a2:	95 0f       	add	r25, r21
    44a4:	f8 01       	movw	r30, r16
    44a6:	90 83       	st	Z, r25
    44a8:	8f 5f       	subi	r24, 0xFF	; 255
    44aa:	01 c0       	rjmp	.+2      	; 0x44ae <decode_hexadecimal_string_bytes+0x68>
    44ac:	80 e0       	ldi	r24, 0x00	; 0
    44ae:	28 2f       	mov	r18, r24
    44b0:	22 0f       	add	r18, r18
    44b2:	48 2f       	mov	r20, r24
    44b4:	50 e0       	ldi	r21, 0x00	; 0
    44b6:	fe 01       	movw	r30, r28
    44b8:	01 90       	ld	r0, Z+
    44ba:	00 20       	and	r0, r0
    44bc:	e9 f7       	brne	.-6      	; 0x44b8 <decode_hexadecimal_string_bytes+0x72>
    44be:	31 97       	sbiw	r30, 0x01	; 1
    44c0:	ec 1b       	sub	r30, r28
    44c2:	fd 0b       	sbc	r31, r29
    44c4:	4e 17       	cp	r20, r30
    44c6:	5f 07       	cpc	r21, r31
    44c8:	10 f4       	brcc	.+4      	; 0x44ce <decode_hexadecimal_string_bytes+0x88>
    44ca:	86 13       	cpse	r24, r22
    44cc:	ce cf       	rjmp	.-100    	; 0x446a <decode_hexadecimal_string_bytes+0x24>
    44ce:	df 91       	pop	r29
    44d0:	cf 91       	pop	r28
    44d2:	1f 91       	pop	r17
    44d4:	0f 91       	pop	r16
    44d6:	08 95       	ret

000044d8 <_serialCallBack>:
    44d8:	80 91 37 14 	lds	r24, 0x1437	; 0x801437 <crc_sum.1945>
    44dc:	86 0f       	add	r24, r22
    44de:	80 93 37 14 	sts	0x1437, r24	; 0x801437 <crc_sum.1945>
    44e2:	90 91 3a 14 	lds	r25, 0x143A	; 0x80143a <_mh_state>
    44e6:	91 30       	cpi	r25, 0x01	; 1
    44e8:	79 f0       	breq	.+30     	; 0x4508 <_serialCallBack+0x30>
    44ea:	28 f0       	brcs	.+10     	; 0x44f6 <_serialCallBack+0x1e>
    44ec:	92 30       	cpi	r25, 0x02	; 2
    44ee:	a9 f0       	breq	.+42     	; 0x451a <_serialCallBack+0x42>
    44f0:	93 30       	cpi	r25, 0x03	; 3
    44f2:	19 f1       	breq	.+70     	; 0x453a <_serialCallBack+0x62>
    44f4:	08 95       	ret
    44f6:	6f 3f       	cpi	r22, 0xFF	; 255
    44f8:	09 f0       	breq	.+2      	; 0x44fc <_serialCallBack+0x24>
    44fa:	48 c0       	rjmp	.+144    	; 0x458c <_serialCallBack+0xb4>
    44fc:	10 92 37 14 	sts	0x1437, r1	; 0x801437 <crc_sum.1945>
    4500:	81 e0       	ldi	r24, 0x01	; 1
    4502:	80 93 3a 14 	sts	0x143A, r24	; 0x80143a <_mh_state>
    4506:	08 95       	ret
    4508:	66 38       	cpi	r22, 0x86	; 134
    450a:	09 f0       	breq	.+2      	; 0x450e <_serialCallBack+0x36>
    450c:	3f c0       	rjmp	.+126    	; 0x458c <_serialCallBack+0xb4>
    450e:	10 92 36 14 	sts	0x1436, r1	; 0x801436 <inDex.1943>
    4512:	82 e0       	ldi	r24, 0x02	; 2
    4514:	80 93 3a 14 	sts	0x143A, r24	; 0x80143a <_mh_state>
    4518:	08 95       	ret
    451a:	e0 91 36 14 	lds	r30, 0x1436	; 0x801436 <inDex.1943>
    451e:	81 e0       	ldi	r24, 0x01	; 1
    4520:	8e 0f       	add	r24, r30
    4522:	80 93 36 14 	sts	0x1436, r24	; 0x801436 <inDex.1943>
    4526:	f0 e0       	ldi	r31, 0x00	; 0
    4528:	ec 5c       	subi	r30, 0xCC	; 204
    452a:	fb 4e       	sbci	r31, 0xEB	; 235
    452c:	60 83       	st	Z, r22
    452e:	82 30       	cpi	r24, 0x02	; 2
    4530:	69 f5       	brne	.+90     	; 0x458c <_serialCallBack+0xb4>
    4532:	83 e0       	ldi	r24, 0x03	; 3
    4534:	80 93 3a 14 	sts	0x143A, r24	; 0x80143a <_mh_state>
    4538:	08 95       	ret
    453a:	90 91 36 14 	lds	r25, 0x1436	; 0x801436 <inDex.1943>
    453e:	21 e0       	ldi	r18, 0x01	; 1
    4540:	29 0f       	add	r18, r25
    4542:	20 93 36 14 	sts	0x1436, r18	; 0x801436 <inDex.1943>
    4546:	96 30       	cpi	r25, 0x06	; 6
    4548:	09 f5       	brne	.+66     	; 0x458c <_serialCallBack+0xb4>
    454a:	81 11       	cpse	r24, r1
    454c:	0e c0       	rjmp	.+28     	; 0x456a <_serialCallBack+0x92>
    454e:	e4 e3       	ldi	r30, 0x34	; 52
    4550:	f4 e1       	ldi	r31, 0x14	; 20
    4552:	80 81       	ld	r24, Z
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	98 2f       	mov	r25, r24
    4558:	88 27       	eor	r24, r24
    455a:	21 81       	ldd	r18, Z+1	; 0x01
    455c:	82 0f       	add	r24, r18
    455e:	91 1d       	adc	r25, r1
    4560:	90 93 3c 14 	sts	0x143C, r25	; 0x80143c <_ppm+0x1>
    4564:	80 93 3b 14 	sts	0x143B, r24	; 0x80143b <_ppm>
    4568:	04 c0       	rjmp	.+8      	; 0x4572 <_serialCallBack+0x9a>
    456a:	10 92 3c 14 	sts	0x143C, r1	; 0x80143c <_ppm+0x1>
    456e:	10 92 3b 14 	sts	0x143B, r1	; 0x80143b <_ppm>
    4572:	10 92 3a 14 	sts	0x143A, r1	; 0x80143a <_mh_state>
    4576:	e0 91 38 14 	lds	r30, 0x1438	; 0x801438 <_appCallBack>
    457a:	f0 91 39 14 	lds	r31, 0x1439	; 0x801439 <_appCallBack+0x1>
    457e:	30 97       	sbiw	r30, 0x00	; 0
    4580:	29 f0       	breq	.+10     	; 0x458c <_serialCallBack+0xb4>
    4582:	80 91 3b 14 	lds	r24, 0x143B	; 0x80143b <_ppm>
    4586:	90 91 3c 14 	lds	r25, 0x143C	; 0x80143c <_ppm+0x1>
    458a:	19 95       	eicall
    458c:	08 95       	ret

0000458e <mh_z19_initialise>:
    458e:	8f 92       	push	r8
    4590:	9f 92       	push	r9
    4592:	af 92       	push	r10
    4594:	cf 92       	push	r12
    4596:	ef 92       	push	r14
    4598:	0f 93       	push	r16
    459a:	0f 2e       	mov	r0, r31
    459c:	fc e6       	ldi	r31, 0x6C	; 108
    459e:	8f 2e       	mov	r8, r31
    45a0:	f2 e2       	ldi	r31, 0x22	; 34
    45a2:	9f 2e       	mov	r9, r31
    45a4:	f0 2d       	mov	r31, r0
    45a6:	68 94       	set
    45a8:	aa 24       	eor	r10, r10
    45aa:	a4 f8       	bld	r10, 4
    45ac:	68 94       	set
    45ae:	cc 24       	eor	r12, r12
    45b0:	c4 f8       	bld	r12, 4
    45b2:	e1 2c       	mov	r14, r1
    45b4:	00 e0       	ldi	r16, 0x00	; 0
    45b6:	23 e0       	ldi	r18, 0x03	; 3
    45b8:	40 e8       	ldi	r20, 0x80	; 128
    45ba:	55 e2       	ldi	r21, 0x25	; 37
    45bc:	60 e0       	ldi	r22, 0x00	; 0
    45be:	70 e0       	ldi	r23, 0x00	; 0
    45c0:	50 d0       	rcall	.+160    	; 0x4662 <serial_create>
    45c2:	90 93 3e 14 	sts	0x143E, r25	; 0x80143e <_serial+0x1>
    45c6:	80 93 3d 14 	sts	0x143D, r24	; 0x80143d <_serial>
    45ca:	0f 91       	pop	r16
    45cc:	ef 90       	pop	r14
    45ce:	cf 90       	pop	r12
    45d0:	af 90       	pop	r10
    45d2:	9f 90       	pop	r9
    45d4:	8f 90       	pop	r8
    45d6:	08 95       	ret

000045d8 <mh_z19_injectCallBack>:
    45d8:	90 93 39 14 	sts	0x1439, r25	; 0x801439 <_appCallBack+0x1>
    45dc:	80 93 38 14 	sts	0x1438, r24	; 0x801438 <_appCallBack>
    45e0:	08 95       	ret

000045e2 <mh_z19_takeMeassuring>:
    45e2:	cf 93       	push	r28
    45e4:	df 93       	push	r29
    45e6:	cd b7       	in	r28, 0x3d	; 61
    45e8:	de b7       	in	r29, 0x3e	; 62
    45ea:	29 97       	sbiw	r28, 0x09	; 9
    45ec:	0f b6       	in	r0, 0x3f	; 63
    45ee:	f8 94       	cli
    45f0:	de bf       	out	0x3e, r29	; 62
    45f2:	0f be       	out	0x3f, r0	; 63
    45f4:	cd bf       	out	0x3d, r28	; 61
    45f6:	89 e0       	ldi	r24, 0x09	; 9
    45f8:	e2 e4       	ldi	r30, 0x42	; 66
    45fa:	f2 e0       	ldi	r31, 0x02	; 2
    45fc:	9e 01       	movw	r18, r28
    45fe:	2f 5f       	subi	r18, 0xFF	; 255
    4600:	3f 4f       	sbci	r19, 0xFF	; 255
    4602:	d9 01       	movw	r26, r18
    4604:	01 90       	ld	r0, Z+
    4606:	0d 92       	st	X+, r0
    4608:	8a 95       	dec	r24
    460a:	e1 f7       	brne	.-8      	; 0x4604 <mh_z19_takeMeassuring+0x22>
    460c:	10 92 3c 14 	sts	0x143C, r1	; 0x80143c <_ppm+0x1>
    4610:	10 92 3b 14 	sts	0x143B, r1	; 0x80143b <_ppm>
    4614:	80 91 3d 14 	lds	r24, 0x143D	; 0x80143d <_serial>
    4618:	90 91 3e 14 	lds	r25, 0x143E	; 0x80143e <_serial+0x1>
    461c:	00 97       	sbiw	r24, 0x00	; 0
    461e:	31 f0       	breq	.+12     	; 0x462c <mh_z19_takeMeassuring+0x4a>
    4620:	42 2f       	mov	r20, r18
    4622:	53 2f       	mov	r21, r19
    4624:	69 e0       	ldi	r22, 0x09	; 9
    4626:	ea d0       	rcall	.+468    	; 0x47fc <serial_sendBytes>
    4628:	80 e0       	ldi	r24, 0x00	; 0
    462a:	01 c0       	rjmp	.+2      	; 0x462e <mh_z19_takeMeassuring+0x4c>
    462c:	82 e0       	ldi	r24, 0x02	; 2
    462e:	29 96       	adiw	r28, 0x09	; 9
    4630:	0f b6       	in	r0, 0x3f	; 63
    4632:	f8 94       	cli
    4634:	de bf       	out	0x3e, r29	; 62
    4636:	0f be       	out	0x3f, r0	; 63
    4638:	cd bf       	out	0x3d, r28	; 61
    463a:	df 91       	pop	r29
    463c:	cf 91       	pop	r28
    463e:	08 95       	ret

00004640 <mh_z19_getCo2Ppm>:
    4640:	20 91 3b 14 	lds	r18, 0x143B	; 0x80143b <_ppm>
    4644:	30 91 3c 14 	lds	r19, 0x143C	; 0x80143c <_ppm+0x1>
    4648:	21 15       	cp	r18, r1
    464a:	31 05       	cpc	r19, r1
    464c:	29 f4       	brne	.+10     	; 0x4658 <mh_z19_getCo2Ppm+0x18>
    464e:	fc 01       	movw	r30, r24
    4650:	11 82       	std	Z+1, r1	; 0x01
    4652:	10 82       	st	Z, r1
    4654:	81 e0       	ldi	r24, 0x01	; 1
    4656:	08 95       	ret
    4658:	fc 01       	movw	r30, r24
    465a:	31 83       	std	Z+1, r19	; 0x01
    465c:	20 83       	st	Z, r18
    465e:	80 e0       	ldi	r24, 0x00	; 0
    4660:	08 95       	ret

00004662 <serial_create>:
    4662:	2f 92       	push	r2
    4664:	3f 92       	push	r3
    4666:	4f 92       	push	r4
    4668:	5f 92       	push	r5
    466a:	6f 92       	push	r6
    466c:	7f 92       	push	r7
    466e:	8f 92       	push	r8
    4670:	9f 92       	push	r9
    4672:	af 92       	push	r10
    4674:	cf 92       	push	r12
    4676:	ef 92       	push	r14
    4678:	ff 92       	push	r15
    467a:	0f 93       	push	r16
    467c:	1f 93       	push	r17
    467e:	cf 93       	push	r28
    4680:	df 93       	push	r29
    4682:	cd b7       	in	r28, 0x3d	; 61
    4684:	de b7       	in	r29, 0x3e	; 62
    4686:	f8 2e       	mov	r15, r24
    4688:	2a 01       	movw	r4, r20
    468a:	3b 01       	movw	r6, r22
    468c:	88 e0       	ldi	r24, 0x08	; 8
    468e:	90 e0       	ldi	r25, 0x00	; 0
    4690:	0e 94 cf 2c 	call	0x599e	; 0x599e <malloc>
    4694:	8c 01       	movw	r16, r24
    4696:	8f 2d       	mov	r24, r15
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	fc 01       	movw	r30, r24
    469c:	ee 0f       	add	r30, r30
    469e:	ff 1f       	adc	r31, r31
    46a0:	e1 5c       	subi	r30, 0xC1	; 193
    46a2:	fb 4e       	sbci	r31, 0xEB	; 235
    46a4:	11 83       	std	Z+1, r17	; 0x01
    46a6:	00 83       	st	Z, r16
    46a8:	01 15       	cp	r16, r1
    46aa:	11 05       	cpc	r17, r1
    46ac:	09 f4       	brne	.+2      	; 0x46b0 <serial_create+0x4e>
    46ae:	69 c0       	rjmp	.+210    	; 0x4782 <serial_create+0x120>
    46b0:	88 0f       	add	r24, r24
    46b2:	99 1f       	adc	r25, r25
    46b4:	fc 01       	movw	r30, r24
    46b6:	e5 5f       	subi	r30, 0xF5	; 245
    46b8:	fd 4f       	sbci	r31, 0xFD	; 253
    46ba:	80 81       	ld	r24, Z
    46bc:	91 81       	ldd	r25, Z+1	; 0x01
    46be:	d8 01       	movw	r26, r16
    46c0:	8d 93       	st	X+, r24
    46c2:	9c 93       	st	X, r25
    46c4:	8c 2d       	mov	r24, r12
    46c6:	90 e0       	ldi	r25, 0x00	; 0
    46c8:	88 0f       	add	r24, r24
    46ca:	99 1f       	adc	r25, r25
    46cc:	88 0f       	add	r24, r24
    46ce:	99 1f       	adc	r25, r25
    46d0:	0e 94 cf 2c 	call	0x599e	; 0x599e <malloc>
    46d4:	1c 01       	movw	r2, r24
    46d6:	86 e0       	ldi	r24, 0x06	; 6
    46d8:	90 e0       	ldi	r25, 0x00	; 0
    46da:	0e 94 cf 2c 	call	0x599e	; 0x599e <malloc>
    46de:	7c 01       	movw	r14, r24
    46e0:	4c 2d       	mov	r20, r12
    46e2:	b1 01       	movw	r22, r2
    46e4:	f1 d6       	rcall	.+3554   	; 0x54c8 <fifo_init>
    46e6:	f8 01       	movw	r30, r16
    46e8:	f5 82       	std	Z+5, r15	; 0x05
    46ea:	e4 82       	std	Z+4, r14	; 0x04
    46ec:	8a 2d       	mov	r24, r10
    46ee:	90 e0       	ldi	r25, 0x00	; 0
    46f0:	88 0f       	add	r24, r24
    46f2:	99 1f       	adc	r25, r25
    46f4:	88 0f       	add	r24, r24
    46f6:	99 1f       	adc	r25, r25
    46f8:	0e 94 cf 2c 	call	0x599e	; 0x599e <malloc>
    46fc:	1c 01       	movw	r2, r24
    46fe:	86 e0       	ldi	r24, 0x06	; 6
    4700:	90 e0       	ldi	r25, 0x00	; 0
    4702:	0e 94 cf 2c 	call	0x599e	; 0x599e <malloc>
    4706:	7c 01       	movw	r14, r24
    4708:	4a 2d       	mov	r20, r10
    470a:	b1 01       	movw	r22, r2
    470c:	dd d6       	rcall	.+3514   	; 0x54c8 <fifo_init>
    470e:	d8 01       	movw	r26, r16
    4710:	13 96       	adiw	r26, 0x03	; 3
    4712:	fc 92       	st	X, r15
    4714:	ee 92       	st	-X, r14
    4716:	12 97       	sbiw	r26, 0x02	; 2
    4718:	17 96       	adiw	r26, 0x07	; 7
    471a:	9c 92       	st	X, r9
    471c:	8e 92       	st	-X, r8
    471e:	16 97       	sbiw	r26, 0x06	; 6
    4720:	ff b6       	in	r15, 0x3f	; 63
    4722:	f8 94       	cli
    4724:	ed 91       	ld	r30, X+
    4726:	fc 91       	ld	r31, X
    4728:	11 97       	sbiw	r26, 0x01	; 1
    472a:	36 97       	sbiw	r30, 0x06	; 6
    472c:	80 81       	ld	r24, Z
    472e:	82 60       	ori	r24, 0x02	; 2
    4730:	80 83       	st	Z, r24
    4732:	8d 90       	ld	r8, X+
    4734:	9c 90       	ld	r9, X
    4736:	c3 01       	movw	r24, r6
    4738:	b2 01       	movw	r22, r4
    473a:	e0 d7       	rcall	.+4032   	; 0x56fc <__floatunsisf>
    473c:	20 e0       	ldi	r18, 0x00	; 0
    473e:	30 e0       	ldi	r19, 0x00	; 0
    4740:	40 e0       	ldi	r20, 0x00	; 0
    4742:	51 e4       	ldi	r21, 0x41	; 65
    4744:	0e 94 0c 2c 	call	0x5818	; 0x5818 <__mulsf3>
    4748:	9b 01       	movw	r18, r22
    474a:	ac 01       	movw	r20, r24
    474c:	60 e0       	ldi	r22, 0x00	; 0
    474e:	74 e2       	ldi	r23, 0x24	; 36
    4750:	84 e7       	ldi	r24, 0x74	; 116
    4752:	9b e4       	ldi	r25, 0x4B	; 75
    4754:	3a d7       	rcall	.+3700   	; 0x55ca <__divsf3>
    4756:	20 e0       	ldi	r18, 0x00	; 0
    4758:	30 e0       	ldi	r19, 0x00	; 0
    475a:	40 e8       	ldi	r20, 0x80	; 128
    475c:	5f e3       	ldi	r21, 0x3F	; 63
    475e:	d0 d6       	rcall	.+3488   	; 0x5500 <__subsf3>
    4760:	a1 d7       	rcall	.+3906   	; 0x56a4 <__fixunssfsi>
    4762:	f4 01       	movw	r30, r8
    4764:	32 97       	sbiw	r30, 0x02	; 2
    4766:	60 83       	st	Z, r22
    4768:	d8 01       	movw	r26, r16
    476a:	ed 91       	ld	r30, X+
    476c:	fc 91       	ld	r31, X
    476e:	11 97       	sbiw	r26, 0x01	; 1
    4770:	35 97       	sbiw	r30, 0x05	; 5
    4772:	88 e9       	ldi	r24, 0x98	; 152
    4774:	80 83       	st	Z, r24
    4776:	ed 91       	ld	r30, X+
    4778:	fc 91       	ld	r31, X
    477a:	34 97       	sbiw	r30, 0x04	; 4
    477c:	86 e0       	ldi	r24, 0x06	; 6
    477e:	80 83       	st	Z, r24
    4780:	ff be       	out	0x3f, r15	; 63
    4782:	c8 01       	movw	r24, r16
    4784:	df 91       	pop	r29
    4786:	cf 91       	pop	r28
    4788:	1f 91       	pop	r17
    478a:	0f 91       	pop	r16
    478c:	ff 90       	pop	r15
    478e:	ef 90       	pop	r14
    4790:	cf 90       	pop	r12
    4792:	af 90       	pop	r10
    4794:	9f 90       	pop	r9
    4796:	8f 90       	pop	r8
    4798:	7f 90       	pop	r7
    479a:	6f 90       	pop	r6
    479c:	5f 90       	pop	r5
    479e:	4f 90       	pop	r4
    47a0:	3f 90       	pop	r3
    47a2:	2f 90       	pop	r2
    47a4:	08 95       	ret

000047a6 <serial_sendByte>:
    47a6:	cf 93       	push	r28
    47a8:	df 93       	push	r29
    47aa:	dc 01       	movw	r26, r24
    47ac:	89 2b       	or	r24, r25
    47ae:	01 f1       	breq	.+64     	; 0x47f0 <serial_sendByte+0x4a>
    47b0:	12 96       	adiw	r26, 0x02	; 2
    47b2:	ed 91       	ld	r30, X+
    47b4:	fc 91       	ld	r31, X
    47b6:	13 97       	sbiw	r26, 0x03	; 3
    47b8:	93 81       	ldd	r25, Z+3	; 0x03
    47ba:	82 81       	ldd	r24, Z+2	; 0x02
    47bc:	25 81       	ldd	r18, Z+5	; 0x05
    47be:	98 1b       	sub	r25, r24
    47c0:	92 23       	and	r25, r18
    47c2:	84 81       	ldd	r24, Z+4	; 0x04
    47c4:	98 17       	cp	r25, r24
    47c6:	b1 f0       	breq	.+44     	; 0x47f4 <serial_sendByte+0x4e>
    47c8:	83 81       	ldd	r24, Z+3	; 0x03
    47ca:	26 95       	lsr	r18
    47cc:	28 23       	and	r18, r24
    47ce:	c0 81       	ld	r28, Z
    47d0:	d1 81       	ldd	r29, Z+1	; 0x01
    47d2:	c2 0f       	add	r28, r18
    47d4:	d1 1d       	adc	r29, r1
    47d6:	68 83       	st	Y, r22
    47d8:	8f 5f       	subi	r24, 0xFF	; 255
    47da:	95 81       	ldd	r25, Z+5	; 0x05
    47dc:	89 23       	and	r24, r25
    47de:	83 83       	std	Z+3, r24	; 0x03
    47e0:	ed 91       	ld	r30, X+
    47e2:	fc 91       	ld	r31, X
    47e4:	35 97       	sbiw	r30, 0x05	; 5
    47e6:	80 81       	ld	r24, Z
    47e8:	80 62       	ori	r24, 0x20	; 32
    47ea:	80 83       	st	Z, r24
    47ec:	80 e0       	ldi	r24, 0x00	; 0
    47ee:	03 c0       	rjmp	.+6      	; 0x47f6 <serial_sendByte+0x50>
    47f0:	81 e0       	ldi	r24, 0x01	; 1
    47f2:	01 c0       	rjmp	.+2      	; 0x47f6 <serial_sendByte+0x50>
    47f4:	82 e0       	ldi	r24, 0x02	; 2
    47f6:	df 91       	pop	r29
    47f8:	cf 91       	pop	r28
    47fa:	08 95       	ret

000047fc <serial_sendBytes>:
    47fc:	ef 92       	push	r14
    47fe:	ff 92       	push	r15
    4800:	0f 93       	push	r16
    4802:	1f 93       	push	r17
    4804:	cf 93       	push	r28
    4806:	df 93       	push	r29
    4808:	7c 01       	movw	r14, r24
    480a:	00 97       	sbiw	r24, 0x00	; 0
    480c:	09 f4       	brne	.+2      	; 0x4810 <serial_sendBytes+0x14>
    480e:	41 c0       	rjmp	.+130    	; 0x4892 <serial_sendBytes+0x96>
    4810:	dc 01       	movw	r26, r24
    4812:	12 96       	adiw	r26, 0x02	; 2
    4814:	ed 91       	ld	r30, X+
    4816:	fc 91       	ld	r31, X
    4818:	13 97       	sbiw	r26, 0x03	; 3
    481a:	93 81       	ldd	r25, Z+3	; 0x03
    481c:	82 81       	ldd	r24, Z+2	; 0x02
    481e:	98 1b       	sub	r25, r24
    4820:	85 81       	ldd	r24, Z+5	; 0x05
    4822:	98 23       	and	r25, r24
    4824:	84 81       	ldd	r24, Z+4	; 0x04
    4826:	89 1b       	sub	r24, r25
    4828:	86 17       	cp	r24, r22
    482a:	a8 f1       	brcs	.+106    	; 0x4896 <serial_sendBytes+0x9a>
    482c:	66 23       	and	r22, r22
    482e:	41 f1       	breq	.+80     	; 0x4880 <serial_sendBytes+0x84>
    4830:	84 2f       	mov	r24, r20
    4832:	95 2f       	mov	r25, r21
    4834:	dc 01       	movw	r26, r24
    4836:	61 50       	subi	r22, 0x01	; 1
    4838:	46 2f       	mov	r20, r22
    483a:	50 e0       	ldi	r21, 0x00	; 0
    483c:	4f 5f       	subi	r20, 0xFF	; 255
    483e:	5f 4f       	sbci	r21, 0xFF	; 255
    4840:	48 0f       	add	r20, r24
    4842:	59 1f       	adc	r21, r25
    4844:	e7 01       	movw	r28, r14
    4846:	ea 81       	ldd	r30, Y+2	; 0x02
    4848:	fb 81       	ldd	r31, Y+3	; 0x03
    484a:	93 81       	ldd	r25, Z+3	; 0x03
    484c:	82 81       	ldd	r24, Z+2	; 0x02
    484e:	25 81       	ldd	r18, Z+5	; 0x05
    4850:	98 1b       	sub	r25, r24
    4852:	92 23       	and	r25, r18
    4854:	84 81       	ldd	r24, Z+4	; 0x04
    4856:	98 17       	cp	r25, r24
    4858:	79 f0       	breq	.+30     	; 0x4878 <serial_sendBytes+0x7c>
    485a:	8c 91       	ld	r24, X
    485c:	93 81       	ldd	r25, Z+3	; 0x03
    485e:	26 95       	lsr	r18
    4860:	29 23       	and	r18, r25
    4862:	60 81       	ld	r22, Z
    4864:	71 81       	ldd	r23, Z+1	; 0x01
    4866:	8b 01       	movw	r16, r22
    4868:	02 0f       	add	r16, r18
    486a:	11 1d       	adc	r17, r1
    486c:	e8 01       	movw	r28, r16
    486e:	88 83       	st	Y, r24
    4870:	9f 5f       	subi	r25, 0xFF	; 255
    4872:	85 81       	ldd	r24, Z+5	; 0x05
    4874:	98 23       	and	r25, r24
    4876:	93 83       	std	Z+3, r25	; 0x03
    4878:	11 96       	adiw	r26, 0x01	; 1
    487a:	a4 17       	cp	r26, r20
    487c:	b5 07       	cpc	r27, r21
    487e:	11 f7       	brne	.-60     	; 0x4844 <serial_sendBytes+0x48>
    4880:	d7 01       	movw	r26, r14
    4882:	ed 91       	ld	r30, X+
    4884:	fc 91       	ld	r31, X
    4886:	35 97       	sbiw	r30, 0x05	; 5
    4888:	80 81       	ld	r24, Z
    488a:	80 62       	ori	r24, 0x20	; 32
    488c:	80 83       	st	Z, r24
    488e:	80 e0       	ldi	r24, 0x00	; 0
    4890:	03 c0       	rjmp	.+6      	; 0x4898 <serial_sendBytes+0x9c>
    4892:	81 e0       	ldi	r24, 0x01	; 1
    4894:	01 c0       	rjmp	.+2      	; 0x4898 <serial_sendBytes+0x9c>
    4896:	82 e0       	ldi	r24, 0x02	; 2
    4898:	df 91       	pop	r29
    489a:	cf 91       	pop	r28
    489c:	1f 91       	pop	r17
    489e:	0f 91       	pop	r16
    48a0:	ff 90       	pop	r15
    48a2:	ef 90       	pop	r14
    48a4:	08 95       	ret

000048a6 <serial_getByte>:
    48a6:	00 97       	sbiw	r24, 0x00	; 0
    48a8:	d1 f0       	breq	.+52     	; 0x48de <serial_getByte+0x38>
    48aa:	dc 01       	movw	r26, r24
    48ac:	14 96       	adiw	r26, 0x04	; 4
    48ae:	ed 91       	ld	r30, X+
    48b0:	fc 91       	ld	r31, X
    48b2:	15 97       	sbiw	r26, 0x05	; 5
    48b4:	93 81       	ldd	r25, Z+3	; 0x03
    48b6:	82 81       	ldd	r24, Z+2	; 0x02
    48b8:	98 17       	cp	r25, r24
    48ba:	99 f0       	breq	.+38     	; 0x48e2 <serial_getByte+0x3c>
    48bc:	92 81       	ldd	r25, Z+2	; 0x02
    48be:	85 81       	ldd	r24, Z+5	; 0x05
    48c0:	86 95       	lsr	r24
    48c2:	89 23       	and	r24, r25
    48c4:	a0 81       	ld	r26, Z
    48c6:	b1 81       	ldd	r27, Z+1	; 0x01
    48c8:	a8 0f       	add	r26, r24
    48ca:	b1 1d       	adc	r27, r1
    48cc:	8c 91       	ld	r24, X
    48ce:	db 01       	movw	r26, r22
    48d0:	8c 93       	st	X, r24
    48d2:	9f 5f       	subi	r25, 0xFF	; 255
    48d4:	85 81       	ldd	r24, Z+5	; 0x05
    48d6:	98 23       	and	r25, r24
    48d8:	92 83       	std	Z+2, r25	; 0x02
    48da:	80 e0       	ldi	r24, 0x00	; 0
    48dc:	08 95       	ret
    48de:	81 e0       	ldi	r24, 0x01	; 1
    48e0:	08 95       	ret
    48e2:	83 e0       	ldi	r24, 0x03	; 3
    48e4:	08 95       	ret

000048e6 <__vector_25>:
    48e6:	1f 92       	push	r1
    48e8:	0f 92       	push	r0
    48ea:	0f b6       	in	r0, 0x3f	; 63
    48ec:	0f 92       	push	r0
    48ee:	11 24       	eor	r1, r1
    48f0:	0b b6       	in	r0, 0x3b	; 59
    48f2:	0f 92       	push	r0
    48f4:	2f 93       	push	r18
    48f6:	3f 93       	push	r19
    48f8:	4f 93       	push	r20
    48fa:	5f 93       	push	r21
    48fc:	6f 93       	push	r22
    48fe:	7f 93       	push	r23
    4900:	8f 93       	push	r24
    4902:	9f 93       	push	r25
    4904:	af 93       	push	r26
    4906:	bf 93       	push	r27
    4908:	cf 93       	push	r28
    490a:	df 93       	push	r29
    490c:	ef 93       	push	r30
    490e:	ff 93       	push	r31
    4910:	a0 91 3f 14 	lds	r26, 0x143F	; 0x80143f <_ser_handle>
    4914:	b0 91 40 14 	lds	r27, 0x1440	; 0x801440 <_ser_handle+0x1>
    4918:	10 97       	sbiw	r26, 0x00	; 0
    491a:	11 f1       	breq	.+68     	; 0x4960 <__vector_25+0x7a>
    491c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4920:	14 96       	adiw	r26, 0x04	; 4
    4922:	ed 91       	ld	r30, X+
    4924:	fc 91       	ld	r31, X
    4926:	15 97       	sbiw	r26, 0x05	; 5
    4928:	93 81       	ldd	r25, Z+3	; 0x03
    492a:	82 81       	ldd	r24, Z+2	; 0x02
    492c:	25 81       	ldd	r18, Z+5	; 0x05
    492e:	98 1b       	sub	r25, r24
    4930:	92 23       	and	r25, r18
    4932:	84 81       	ldd	r24, Z+4	; 0x04
    4934:	98 17       	cp	r25, r24
    4936:	61 f0       	breq	.+24     	; 0x4950 <__vector_25+0x6a>
    4938:	83 81       	ldd	r24, Z+3	; 0x03
    493a:	26 95       	lsr	r18
    493c:	28 23       	and	r18, r24
    493e:	c0 81       	ld	r28, Z
    4940:	d1 81       	ldd	r29, Z+1	; 0x01
    4942:	c2 0f       	add	r28, r18
    4944:	d1 1d       	adc	r29, r1
    4946:	68 83       	st	Y, r22
    4948:	8f 5f       	subi	r24, 0xFF	; 255
    494a:	95 81       	ldd	r25, Z+5	; 0x05
    494c:	89 23       	and	r24, r25
    494e:	83 83       	std	Z+3, r24	; 0x03
    4950:	16 96       	adiw	r26, 0x06	; 6
    4952:	ed 91       	ld	r30, X+
    4954:	fc 91       	ld	r31, X
    4956:	17 97       	sbiw	r26, 0x07	; 7
    4958:	30 97       	sbiw	r30, 0x00	; 0
    495a:	11 f0       	breq	.+4      	; 0x4960 <__vector_25+0x7a>
    495c:	cd 01       	movw	r24, r26
    495e:	19 95       	eicall
    4960:	ff 91       	pop	r31
    4962:	ef 91       	pop	r30
    4964:	df 91       	pop	r29
    4966:	cf 91       	pop	r28
    4968:	bf 91       	pop	r27
    496a:	af 91       	pop	r26
    496c:	9f 91       	pop	r25
    496e:	8f 91       	pop	r24
    4970:	7f 91       	pop	r23
    4972:	6f 91       	pop	r22
    4974:	5f 91       	pop	r21
    4976:	4f 91       	pop	r20
    4978:	3f 91       	pop	r19
    497a:	2f 91       	pop	r18
    497c:	0f 90       	pop	r0
    497e:	0b be       	out	0x3b, r0	; 59
    4980:	0f 90       	pop	r0
    4982:	0f be       	out	0x3f, r0	; 63
    4984:	0f 90       	pop	r0
    4986:	1f 90       	pop	r1
    4988:	18 95       	reti

0000498a <__vector_26>:
    498a:	1f 92       	push	r1
    498c:	0f 92       	push	r0
    498e:	0f b6       	in	r0, 0x3f	; 63
    4990:	0f 92       	push	r0
    4992:	11 24       	eor	r1, r1
    4994:	0b b6       	in	r0, 0x3b	; 59
    4996:	0f 92       	push	r0
    4998:	2f 93       	push	r18
    499a:	8f 93       	push	r24
    499c:	9f 93       	push	r25
    499e:	af 93       	push	r26
    49a0:	bf 93       	push	r27
    49a2:	ef 93       	push	r30
    49a4:	ff 93       	push	r31
    49a6:	e0 91 3f 14 	lds	r30, 0x143F	; 0x80143f <_ser_handle>
    49aa:	f0 91 40 14 	lds	r31, 0x1440	; 0x801440 <_ser_handle+0x1>
    49ae:	30 97       	sbiw	r30, 0x00	; 0
    49b0:	b9 f0       	breq	.+46     	; 0x49e0 <__vector_26+0x56>
    49b2:	02 80       	ldd	r0, Z+2	; 0x02
    49b4:	f3 81       	ldd	r31, Z+3	; 0x03
    49b6:	e0 2d       	mov	r30, r0
    49b8:	93 81       	ldd	r25, Z+3	; 0x03
    49ba:	82 81       	ldd	r24, Z+2	; 0x02
    49bc:	98 17       	cp	r25, r24
    49be:	b1 f0       	breq	.+44     	; 0x49ec <__vector_26+0x62>
    49c0:	92 81       	ldd	r25, Z+2	; 0x02
    49c2:	85 81       	ldd	r24, Z+5	; 0x05
    49c4:	28 2f       	mov	r18, r24
    49c6:	26 95       	lsr	r18
    49c8:	29 23       	and	r18, r25
    49ca:	a0 81       	ld	r26, Z
    49cc:	b1 81       	ldd	r27, Z+1	; 0x01
    49ce:	a2 0f       	add	r26, r18
    49d0:	b1 1d       	adc	r27, r1
    49d2:	2c 91       	ld	r18, X
    49d4:	9f 5f       	subi	r25, 0xFF	; 255
    49d6:	89 23       	and	r24, r25
    49d8:	82 83       	std	Z+2, r24	; 0x02
    49da:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    49de:	0b c0       	rjmp	.+22     	; 0x49f6 <__vector_26+0x6c>
    49e0:	e1 ec       	ldi	r30, 0xC1	; 193
    49e2:	f0 e0       	ldi	r31, 0x00	; 0
    49e4:	80 81       	ld	r24, Z
    49e6:	8f 7d       	andi	r24, 0xDF	; 223
    49e8:	80 83       	st	Z, r24
    49ea:	05 c0       	rjmp	.+10     	; 0x49f6 <__vector_26+0x6c>
    49ec:	e1 ec       	ldi	r30, 0xC1	; 193
    49ee:	f0 e0       	ldi	r31, 0x00	; 0
    49f0:	80 81       	ld	r24, Z
    49f2:	8f 7d       	andi	r24, 0xDF	; 223
    49f4:	80 83       	st	Z, r24
    49f6:	ff 91       	pop	r31
    49f8:	ef 91       	pop	r30
    49fa:	bf 91       	pop	r27
    49fc:	af 91       	pop	r26
    49fe:	9f 91       	pop	r25
    4a00:	8f 91       	pop	r24
    4a02:	2f 91       	pop	r18
    4a04:	0f 90       	pop	r0
    4a06:	0b be       	out	0x3b, r0	; 59
    4a08:	0f 90       	pop	r0
    4a0a:	0f be       	out	0x3f, r0	; 63
    4a0c:	0f 90       	pop	r0
    4a0e:	1f 90       	pop	r1
    4a10:	18 95       	reti

00004a12 <__vector_36>:
    4a12:	1f 92       	push	r1
    4a14:	0f 92       	push	r0
    4a16:	0f b6       	in	r0, 0x3f	; 63
    4a18:	0f 92       	push	r0
    4a1a:	11 24       	eor	r1, r1
    4a1c:	0b b6       	in	r0, 0x3b	; 59
    4a1e:	0f 92       	push	r0
    4a20:	2f 93       	push	r18
    4a22:	3f 93       	push	r19
    4a24:	4f 93       	push	r20
    4a26:	5f 93       	push	r21
    4a28:	6f 93       	push	r22
    4a2a:	7f 93       	push	r23
    4a2c:	8f 93       	push	r24
    4a2e:	9f 93       	push	r25
    4a30:	af 93       	push	r26
    4a32:	bf 93       	push	r27
    4a34:	cf 93       	push	r28
    4a36:	df 93       	push	r29
    4a38:	ef 93       	push	r30
    4a3a:	ff 93       	push	r31
    4a3c:	a0 91 41 14 	lds	r26, 0x1441	; 0x801441 <_ser_handle+0x2>
    4a40:	b0 91 42 14 	lds	r27, 0x1442	; 0x801442 <_ser_handle+0x3>
    4a44:	10 97       	sbiw	r26, 0x00	; 0
    4a46:	11 f1       	breq	.+68     	; 0x4a8c <__vector_36+0x7a>
    4a48:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4a4c:	14 96       	adiw	r26, 0x04	; 4
    4a4e:	ed 91       	ld	r30, X+
    4a50:	fc 91       	ld	r31, X
    4a52:	15 97       	sbiw	r26, 0x05	; 5
    4a54:	93 81       	ldd	r25, Z+3	; 0x03
    4a56:	82 81       	ldd	r24, Z+2	; 0x02
    4a58:	25 81       	ldd	r18, Z+5	; 0x05
    4a5a:	98 1b       	sub	r25, r24
    4a5c:	92 23       	and	r25, r18
    4a5e:	84 81       	ldd	r24, Z+4	; 0x04
    4a60:	98 17       	cp	r25, r24
    4a62:	61 f0       	breq	.+24     	; 0x4a7c <__vector_36+0x6a>
    4a64:	83 81       	ldd	r24, Z+3	; 0x03
    4a66:	26 95       	lsr	r18
    4a68:	28 23       	and	r18, r24
    4a6a:	c0 81       	ld	r28, Z
    4a6c:	d1 81       	ldd	r29, Z+1	; 0x01
    4a6e:	c2 0f       	add	r28, r18
    4a70:	d1 1d       	adc	r29, r1
    4a72:	68 83       	st	Y, r22
    4a74:	8f 5f       	subi	r24, 0xFF	; 255
    4a76:	95 81       	ldd	r25, Z+5	; 0x05
    4a78:	89 23       	and	r24, r25
    4a7a:	83 83       	std	Z+3, r24	; 0x03
    4a7c:	16 96       	adiw	r26, 0x06	; 6
    4a7e:	ed 91       	ld	r30, X+
    4a80:	fc 91       	ld	r31, X
    4a82:	17 97       	sbiw	r26, 0x07	; 7
    4a84:	30 97       	sbiw	r30, 0x00	; 0
    4a86:	11 f0       	breq	.+4      	; 0x4a8c <__vector_36+0x7a>
    4a88:	cd 01       	movw	r24, r26
    4a8a:	19 95       	eicall
    4a8c:	ff 91       	pop	r31
    4a8e:	ef 91       	pop	r30
    4a90:	df 91       	pop	r29
    4a92:	cf 91       	pop	r28
    4a94:	bf 91       	pop	r27
    4a96:	af 91       	pop	r26
    4a98:	9f 91       	pop	r25
    4a9a:	8f 91       	pop	r24
    4a9c:	7f 91       	pop	r23
    4a9e:	6f 91       	pop	r22
    4aa0:	5f 91       	pop	r21
    4aa2:	4f 91       	pop	r20
    4aa4:	3f 91       	pop	r19
    4aa6:	2f 91       	pop	r18
    4aa8:	0f 90       	pop	r0
    4aaa:	0b be       	out	0x3b, r0	; 59
    4aac:	0f 90       	pop	r0
    4aae:	0f be       	out	0x3f, r0	; 63
    4ab0:	0f 90       	pop	r0
    4ab2:	1f 90       	pop	r1
    4ab4:	18 95       	reti

00004ab6 <__vector_37>:
    4ab6:	1f 92       	push	r1
    4ab8:	0f 92       	push	r0
    4aba:	0f b6       	in	r0, 0x3f	; 63
    4abc:	0f 92       	push	r0
    4abe:	11 24       	eor	r1, r1
    4ac0:	0b b6       	in	r0, 0x3b	; 59
    4ac2:	0f 92       	push	r0
    4ac4:	2f 93       	push	r18
    4ac6:	8f 93       	push	r24
    4ac8:	9f 93       	push	r25
    4aca:	af 93       	push	r26
    4acc:	bf 93       	push	r27
    4ace:	ef 93       	push	r30
    4ad0:	ff 93       	push	r31
    4ad2:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <_ser_handle+0x2>
    4ad6:	f0 91 42 14 	lds	r31, 0x1442	; 0x801442 <_ser_handle+0x3>
    4ada:	30 97       	sbiw	r30, 0x00	; 0
    4adc:	b9 f0       	breq	.+46     	; 0x4b0c <__vector_37+0x56>
    4ade:	02 80       	ldd	r0, Z+2	; 0x02
    4ae0:	f3 81       	ldd	r31, Z+3	; 0x03
    4ae2:	e0 2d       	mov	r30, r0
    4ae4:	93 81       	ldd	r25, Z+3	; 0x03
    4ae6:	82 81       	ldd	r24, Z+2	; 0x02
    4ae8:	98 17       	cp	r25, r24
    4aea:	b1 f0       	breq	.+44     	; 0x4b18 <__vector_37+0x62>
    4aec:	92 81       	ldd	r25, Z+2	; 0x02
    4aee:	85 81       	ldd	r24, Z+5	; 0x05
    4af0:	28 2f       	mov	r18, r24
    4af2:	26 95       	lsr	r18
    4af4:	29 23       	and	r18, r25
    4af6:	a0 81       	ld	r26, Z
    4af8:	b1 81       	ldd	r27, Z+1	; 0x01
    4afa:	a2 0f       	add	r26, r18
    4afc:	b1 1d       	adc	r27, r1
    4afe:	2c 91       	ld	r18, X
    4b00:	9f 5f       	subi	r25, 0xFF	; 255
    4b02:	89 23       	and	r24, r25
    4b04:	82 83       	std	Z+2, r24	; 0x02
    4b06:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4b0a:	0b c0       	rjmp	.+22     	; 0x4b22 <__vector_37+0x6c>
    4b0c:	e9 ec       	ldi	r30, 0xC9	; 201
    4b0e:	f0 e0       	ldi	r31, 0x00	; 0
    4b10:	80 81       	ld	r24, Z
    4b12:	8f 7d       	andi	r24, 0xDF	; 223
    4b14:	80 83       	st	Z, r24
    4b16:	05 c0       	rjmp	.+10     	; 0x4b22 <__vector_37+0x6c>
    4b18:	e9 ec       	ldi	r30, 0xC9	; 201
    4b1a:	f0 e0       	ldi	r31, 0x00	; 0
    4b1c:	80 81       	ld	r24, Z
    4b1e:	8f 7d       	andi	r24, 0xDF	; 223
    4b20:	80 83       	st	Z, r24
    4b22:	ff 91       	pop	r31
    4b24:	ef 91       	pop	r30
    4b26:	bf 91       	pop	r27
    4b28:	af 91       	pop	r26
    4b2a:	9f 91       	pop	r25
    4b2c:	8f 91       	pop	r24
    4b2e:	2f 91       	pop	r18
    4b30:	0f 90       	pop	r0
    4b32:	0b be       	out	0x3b, r0	; 59
    4b34:	0f 90       	pop	r0
    4b36:	0f be       	out	0x3f, r0	; 63
    4b38:	0f 90       	pop	r0
    4b3a:	1f 90       	pop	r1
    4b3c:	18 95       	reti

00004b3e <__vector_51>:
    4b3e:	1f 92       	push	r1
    4b40:	0f 92       	push	r0
    4b42:	0f b6       	in	r0, 0x3f	; 63
    4b44:	0f 92       	push	r0
    4b46:	11 24       	eor	r1, r1
    4b48:	0b b6       	in	r0, 0x3b	; 59
    4b4a:	0f 92       	push	r0
    4b4c:	2f 93       	push	r18
    4b4e:	3f 93       	push	r19
    4b50:	4f 93       	push	r20
    4b52:	5f 93       	push	r21
    4b54:	6f 93       	push	r22
    4b56:	7f 93       	push	r23
    4b58:	8f 93       	push	r24
    4b5a:	9f 93       	push	r25
    4b5c:	af 93       	push	r26
    4b5e:	bf 93       	push	r27
    4b60:	cf 93       	push	r28
    4b62:	df 93       	push	r29
    4b64:	ef 93       	push	r30
    4b66:	ff 93       	push	r31
    4b68:	a0 91 43 14 	lds	r26, 0x1443	; 0x801443 <_ser_handle+0x4>
    4b6c:	b0 91 44 14 	lds	r27, 0x1444	; 0x801444 <_ser_handle+0x5>
    4b70:	10 97       	sbiw	r26, 0x00	; 0
    4b72:	11 f1       	breq	.+68     	; 0x4bb8 <__vector_51+0x7a>
    4b74:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4b78:	14 96       	adiw	r26, 0x04	; 4
    4b7a:	ed 91       	ld	r30, X+
    4b7c:	fc 91       	ld	r31, X
    4b7e:	15 97       	sbiw	r26, 0x05	; 5
    4b80:	93 81       	ldd	r25, Z+3	; 0x03
    4b82:	82 81       	ldd	r24, Z+2	; 0x02
    4b84:	25 81       	ldd	r18, Z+5	; 0x05
    4b86:	98 1b       	sub	r25, r24
    4b88:	92 23       	and	r25, r18
    4b8a:	84 81       	ldd	r24, Z+4	; 0x04
    4b8c:	98 17       	cp	r25, r24
    4b8e:	61 f0       	breq	.+24     	; 0x4ba8 <__vector_51+0x6a>
    4b90:	83 81       	ldd	r24, Z+3	; 0x03
    4b92:	26 95       	lsr	r18
    4b94:	28 23       	and	r18, r24
    4b96:	c0 81       	ld	r28, Z
    4b98:	d1 81       	ldd	r29, Z+1	; 0x01
    4b9a:	c2 0f       	add	r28, r18
    4b9c:	d1 1d       	adc	r29, r1
    4b9e:	68 83       	st	Y, r22
    4ba0:	8f 5f       	subi	r24, 0xFF	; 255
    4ba2:	95 81       	ldd	r25, Z+5	; 0x05
    4ba4:	89 23       	and	r24, r25
    4ba6:	83 83       	std	Z+3, r24	; 0x03
    4ba8:	16 96       	adiw	r26, 0x06	; 6
    4baa:	ed 91       	ld	r30, X+
    4bac:	fc 91       	ld	r31, X
    4bae:	17 97       	sbiw	r26, 0x07	; 7
    4bb0:	30 97       	sbiw	r30, 0x00	; 0
    4bb2:	11 f0       	breq	.+4      	; 0x4bb8 <__vector_51+0x7a>
    4bb4:	cd 01       	movw	r24, r26
    4bb6:	19 95       	eicall
    4bb8:	ff 91       	pop	r31
    4bba:	ef 91       	pop	r30
    4bbc:	df 91       	pop	r29
    4bbe:	cf 91       	pop	r28
    4bc0:	bf 91       	pop	r27
    4bc2:	af 91       	pop	r26
    4bc4:	9f 91       	pop	r25
    4bc6:	8f 91       	pop	r24
    4bc8:	7f 91       	pop	r23
    4bca:	6f 91       	pop	r22
    4bcc:	5f 91       	pop	r21
    4bce:	4f 91       	pop	r20
    4bd0:	3f 91       	pop	r19
    4bd2:	2f 91       	pop	r18
    4bd4:	0f 90       	pop	r0
    4bd6:	0b be       	out	0x3b, r0	; 59
    4bd8:	0f 90       	pop	r0
    4bda:	0f be       	out	0x3f, r0	; 63
    4bdc:	0f 90       	pop	r0
    4bde:	1f 90       	pop	r1
    4be0:	18 95       	reti

00004be2 <__vector_52>:
    4be2:	1f 92       	push	r1
    4be4:	0f 92       	push	r0
    4be6:	0f b6       	in	r0, 0x3f	; 63
    4be8:	0f 92       	push	r0
    4bea:	11 24       	eor	r1, r1
    4bec:	0b b6       	in	r0, 0x3b	; 59
    4bee:	0f 92       	push	r0
    4bf0:	2f 93       	push	r18
    4bf2:	8f 93       	push	r24
    4bf4:	9f 93       	push	r25
    4bf6:	af 93       	push	r26
    4bf8:	bf 93       	push	r27
    4bfa:	ef 93       	push	r30
    4bfc:	ff 93       	push	r31
    4bfe:	e0 91 43 14 	lds	r30, 0x1443	; 0x801443 <_ser_handle+0x4>
    4c02:	f0 91 44 14 	lds	r31, 0x1444	; 0x801444 <_ser_handle+0x5>
    4c06:	30 97       	sbiw	r30, 0x00	; 0
    4c08:	b9 f0       	breq	.+46     	; 0x4c38 <__vector_52+0x56>
    4c0a:	02 80       	ldd	r0, Z+2	; 0x02
    4c0c:	f3 81       	ldd	r31, Z+3	; 0x03
    4c0e:	e0 2d       	mov	r30, r0
    4c10:	93 81       	ldd	r25, Z+3	; 0x03
    4c12:	82 81       	ldd	r24, Z+2	; 0x02
    4c14:	98 17       	cp	r25, r24
    4c16:	b1 f0       	breq	.+44     	; 0x4c44 <__vector_52+0x62>
    4c18:	92 81       	ldd	r25, Z+2	; 0x02
    4c1a:	85 81       	ldd	r24, Z+5	; 0x05
    4c1c:	28 2f       	mov	r18, r24
    4c1e:	26 95       	lsr	r18
    4c20:	29 23       	and	r18, r25
    4c22:	a0 81       	ld	r26, Z
    4c24:	b1 81       	ldd	r27, Z+1	; 0x01
    4c26:	a2 0f       	add	r26, r18
    4c28:	b1 1d       	adc	r27, r1
    4c2a:	2c 91       	ld	r18, X
    4c2c:	9f 5f       	subi	r25, 0xFF	; 255
    4c2e:	89 23       	and	r24, r25
    4c30:	82 83       	std	Z+2, r24	; 0x02
    4c32:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4c36:	0b c0       	rjmp	.+22     	; 0x4c4e <__vector_52+0x6c>
    4c38:	e1 ed       	ldi	r30, 0xD1	; 209
    4c3a:	f0 e0       	ldi	r31, 0x00	; 0
    4c3c:	80 81       	ld	r24, Z
    4c3e:	8f 7d       	andi	r24, 0xDF	; 223
    4c40:	80 83       	st	Z, r24
    4c42:	05 c0       	rjmp	.+10     	; 0x4c4e <__vector_52+0x6c>
    4c44:	e1 ed       	ldi	r30, 0xD1	; 209
    4c46:	f0 e0       	ldi	r31, 0x00	; 0
    4c48:	80 81       	ld	r24, Z
    4c4a:	8f 7d       	andi	r24, 0xDF	; 223
    4c4c:	80 83       	st	Z, r24
    4c4e:	ff 91       	pop	r31
    4c50:	ef 91       	pop	r30
    4c52:	bf 91       	pop	r27
    4c54:	af 91       	pop	r26
    4c56:	9f 91       	pop	r25
    4c58:	8f 91       	pop	r24
    4c5a:	2f 91       	pop	r18
    4c5c:	0f 90       	pop	r0
    4c5e:	0b be       	out	0x3b, r0	; 59
    4c60:	0f 90       	pop	r0
    4c62:	0f be       	out	0x3f, r0	; 63
    4c64:	0f 90       	pop	r0
    4c66:	1f 90       	pop	r1
    4c68:	18 95       	reti

00004c6a <__vector_54>:
    4c6a:	1f 92       	push	r1
    4c6c:	0f 92       	push	r0
    4c6e:	0f b6       	in	r0, 0x3f	; 63
    4c70:	0f 92       	push	r0
    4c72:	11 24       	eor	r1, r1
    4c74:	0b b6       	in	r0, 0x3b	; 59
    4c76:	0f 92       	push	r0
    4c78:	2f 93       	push	r18
    4c7a:	3f 93       	push	r19
    4c7c:	4f 93       	push	r20
    4c7e:	5f 93       	push	r21
    4c80:	6f 93       	push	r22
    4c82:	7f 93       	push	r23
    4c84:	8f 93       	push	r24
    4c86:	9f 93       	push	r25
    4c88:	af 93       	push	r26
    4c8a:	bf 93       	push	r27
    4c8c:	cf 93       	push	r28
    4c8e:	df 93       	push	r29
    4c90:	ef 93       	push	r30
    4c92:	ff 93       	push	r31
    4c94:	a0 91 45 14 	lds	r26, 0x1445	; 0x801445 <_ser_handle+0x6>
    4c98:	b0 91 46 14 	lds	r27, 0x1446	; 0x801446 <_ser_handle+0x7>
    4c9c:	10 97       	sbiw	r26, 0x00	; 0
    4c9e:	11 f1       	breq	.+68     	; 0x4ce4 <__vector_54+0x7a>
    4ca0:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4ca4:	14 96       	adiw	r26, 0x04	; 4
    4ca6:	ed 91       	ld	r30, X+
    4ca8:	fc 91       	ld	r31, X
    4caa:	15 97       	sbiw	r26, 0x05	; 5
    4cac:	93 81       	ldd	r25, Z+3	; 0x03
    4cae:	82 81       	ldd	r24, Z+2	; 0x02
    4cb0:	25 81       	ldd	r18, Z+5	; 0x05
    4cb2:	98 1b       	sub	r25, r24
    4cb4:	92 23       	and	r25, r18
    4cb6:	84 81       	ldd	r24, Z+4	; 0x04
    4cb8:	98 17       	cp	r25, r24
    4cba:	61 f0       	breq	.+24     	; 0x4cd4 <__vector_54+0x6a>
    4cbc:	83 81       	ldd	r24, Z+3	; 0x03
    4cbe:	26 95       	lsr	r18
    4cc0:	28 23       	and	r18, r24
    4cc2:	c0 81       	ld	r28, Z
    4cc4:	d1 81       	ldd	r29, Z+1	; 0x01
    4cc6:	c2 0f       	add	r28, r18
    4cc8:	d1 1d       	adc	r29, r1
    4cca:	68 83       	st	Y, r22
    4ccc:	8f 5f       	subi	r24, 0xFF	; 255
    4cce:	95 81       	ldd	r25, Z+5	; 0x05
    4cd0:	89 23       	and	r24, r25
    4cd2:	83 83       	std	Z+3, r24	; 0x03
    4cd4:	16 96       	adiw	r26, 0x06	; 6
    4cd6:	ed 91       	ld	r30, X+
    4cd8:	fc 91       	ld	r31, X
    4cda:	17 97       	sbiw	r26, 0x07	; 7
    4cdc:	30 97       	sbiw	r30, 0x00	; 0
    4cde:	11 f0       	breq	.+4      	; 0x4ce4 <__vector_54+0x7a>
    4ce0:	cd 01       	movw	r24, r26
    4ce2:	19 95       	eicall
    4ce4:	ff 91       	pop	r31
    4ce6:	ef 91       	pop	r30
    4ce8:	df 91       	pop	r29
    4cea:	cf 91       	pop	r28
    4cec:	bf 91       	pop	r27
    4cee:	af 91       	pop	r26
    4cf0:	9f 91       	pop	r25
    4cf2:	8f 91       	pop	r24
    4cf4:	7f 91       	pop	r23
    4cf6:	6f 91       	pop	r22
    4cf8:	5f 91       	pop	r21
    4cfa:	4f 91       	pop	r20
    4cfc:	3f 91       	pop	r19
    4cfe:	2f 91       	pop	r18
    4d00:	0f 90       	pop	r0
    4d02:	0b be       	out	0x3b, r0	; 59
    4d04:	0f 90       	pop	r0
    4d06:	0f be       	out	0x3f, r0	; 63
    4d08:	0f 90       	pop	r0
    4d0a:	1f 90       	pop	r1
    4d0c:	18 95       	reti

00004d0e <__vector_55>:
    4d0e:	1f 92       	push	r1
    4d10:	0f 92       	push	r0
    4d12:	0f b6       	in	r0, 0x3f	; 63
    4d14:	0f 92       	push	r0
    4d16:	11 24       	eor	r1, r1
    4d18:	0b b6       	in	r0, 0x3b	; 59
    4d1a:	0f 92       	push	r0
    4d1c:	2f 93       	push	r18
    4d1e:	8f 93       	push	r24
    4d20:	9f 93       	push	r25
    4d22:	af 93       	push	r26
    4d24:	bf 93       	push	r27
    4d26:	ef 93       	push	r30
    4d28:	ff 93       	push	r31
    4d2a:	e0 91 45 14 	lds	r30, 0x1445	; 0x801445 <_ser_handle+0x6>
    4d2e:	f0 91 46 14 	lds	r31, 0x1446	; 0x801446 <_ser_handle+0x7>
    4d32:	30 97       	sbiw	r30, 0x00	; 0
    4d34:	b9 f0       	breq	.+46     	; 0x4d64 <__vector_55+0x56>
    4d36:	02 80       	ldd	r0, Z+2	; 0x02
    4d38:	f3 81       	ldd	r31, Z+3	; 0x03
    4d3a:	e0 2d       	mov	r30, r0
    4d3c:	93 81       	ldd	r25, Z+3	; 0x03
    4d3e:	82 81       	ldd	r24, Z+2	; 0x02
    4d40:	98 17       	cp	r25, r24
    4d42:	b1 f0       	breq	.+44     	; 0x4d70 <__vector_55+0x62>
    4d44:	92 81       	ldd	r25, Z+2	; 0x02
    4d46:	85 81       	ldd	r24, Z+5	; 0x05
    4d48:	28 2f       	mov	r18, r24
    4d4a:	26 95       	lsr	r18
    4d4c:	29 23       	and	r18, r25
    4d4e:	a0 81       	ld	r26, Z
    4d50:	b1 81       	ldd	r27, Z+1	; 0x01
    4d52:	a2 0f       	add	r26, r18
    4d54:	b1 1d       	adc	r27, r1
    4d56:	2c 91       	ld	r18, X
    4d58:	9f 5f       	subi	r25, 0xFF	; 255
    4d5a:	89 23       	and	r24, r25
    4d5c:	82 83       	std	Z+2, r24	; 0x02
    4d5e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4d62:	0b c0       	rjmp	.+22     	; 0x4d7a <__vector_55+0x6c>
    4d64:	e1 e3       	ldi	r30, 0x31	; 49
    4d66:	f1 e0       	ldi	r31, 0x01	; 1
    4d68:	80 81       	ld	r24, Z
    4d6a:	8f 7d       	andi	r24, 0xDF	; 223
    4d6c:	80 83       	st	Z, r24
    4d6e:	05 c0       	rjmp	.+10     	; 0x4d7a <__vector_55+0x6c>
    4d70:	e1 e3       	ldi	r30, 0x31	; 49
    4d72:	f1 e0       	ldi	r31, 0x01	; 1
    4d74:	80 81       	ld	r24, Z
    4d76:	8f 7d       	andi	r24, 0xDF	; 223
    4d78:	80 83       	st	Z, r24
    4d7a:	ff 91       	pop	r31
    4d7c:	ef 91       	pop	r30
    4d7e:	bf 91       	pop	r27
    4d80:	af 91       	pop	r26
    4d82:	9f 91       	pop	r25
    4d84:	8f 91       	pop	r24
    4d86:	2f 91       	pop	r18
    4d88:	0f 90       	pop	r0
    4d8a:	0b be       	out	0x3b, r0	; 59
    4d8c:	0f 90       	pop	r0
    4d8e:	0f be       	out	0x3f, r0	; 63
    4d90:	0f 90       	pop	r0
    4d92:	1f 90       	pop	r1
    4d94:	18 95       	reti

00004d96 <usart_getchar>:
    4d96:	cf 93       	push	r28
    4d98:	df 93       	push	r29
    4d9a:	1f 92       	push	r1
    4d9c:	cd b7       	in	r28, 0x3d	; 61
    4d9e:	de b7       	in	r29, 0x3e	; 62
    4da0:	be 01       	movw	r22, r28
    4da2:	6f 5f       	subi	r22, 0xFF	; 255
    4da4:	7f 4f       	sbci	r23, 0xFF	; 255
    4da6:	80 91 47 14 	lds	r24, 0x1447	; 0x801447 <_com_serial_instance>
    4daa:	90 91 48 14 	lds	r25, 0x1448	; 0x801448 <_com_serial_instance+0x1>
    4dae:	7b dd       	rcall	.-1290   	; 0x48a6 <serial_getByte>
    4db0:	81 11       	cpse	r24, r1
    4db2:	f6 cf       	rjmp	.-20     	; 0x4da0 <usart_getchar+0xa>
    4db4:	89 81       	ldd	r24, Y+1	; 0x01
    4db6:	90 e0       	ldi	r25, 0x00	; 0
    4db8:	0f 90       	pop	r0
    4dba:	df 91       	pop	r29
    4dbc:	cf 91       	pop	r28
    4dbe:	08 95       	ret

00004dc0 <usart_putchar>:
    4dc0:	68 2f       	mov	r22, r24
    4dc2:	80 91 47 14 	lds	r24, 0x1447	; 0x801447 <_com_serial_instance>
    4dc6:	90 91 48 14 	lds	r25, 0x1448	; 0x801448 <_com_serial_instance+0x1>
    4dca:	ed dc       	rcall	.-1574   	; 0x47a6 <serial_sendByte>
    4dcc:	80 e0       	ldi	r24, 0x00	; 0
    4dce:	90 e0       	ldi	r25, 0x00	; 0
    4dd0:	08 95       	ret

00004dd2 <stdio_initialise>:
    4dd2:	8f 92       	push	r8
    4dd4:	9f 92       	push	r9
    4dd6:	af 92       	push	r10
    4dd8:	cf 92       	push	r12
    4dda:	ef 92       	push	r14
    4ddc:	0f 93       	push	r16
    4dde:	81 2c       	mov	r8, r1
    4de0:	91 2c       	mov	r9, r1
    4de2:	68 94       	set
    4de4:	aa 24       	eor	r10, r10
    4de6:	a7 f8       	bld	r10, 7
    4de8:	68 94       	set
    4dea:	cc 24       	eor	r12, r12
    4dec:	c7 f8       	bld	r12, 7
    4dee:	e1 2c       	mov	r14, r1
    4df0:	00 e0       	ldi	r16, 0x00	; 0
    4df2:	23 e0       	ldi	r18, 0x03	; 3
    4df4:	40 e0       	ldi	r20, 0x00	; 0
    4df6:	51 ee       	ldi	r21, 0xE1	; 225
    4df8:	60 e0       	ldi	r22, 0x00	; 0
    4dfa:	70 e0       	ldi	r23, 0x00	; 0
    4dfc:	32 dc       	rcall	.-1948   	; 0x4662 <serial_create>
    4dfe:	90 93 48 14 	sts	0x1448, r25	; 0x801448 <_com_serial_instance+0x1>
    4e02:	80 93 47 14 	sts	0x1447, r24	; 0x801447 <_com_serial_instance>
    4e06:	ea e7       	ldi	r30, 0x7A	; 122
    4e08:	f4 e1       	ldi	r31, 0x14	; 20
    4e0a:	83 e1       	ldi	r24, 0x13	; 19
    4e0c:	92 e0       	ldi	r25, 0x02	; 2
    4e0e:	91 83       	std	Z+1, r25	; 0x01
    4e10:	80 83       	st	Z, r24
    4e12:	93 83       	std	Z+3, r25	; 0x03
    4e14:	82 83       	std	Z+2, r24	; 0x02
    4e16:	0f 91       	pop	r16
    4e18:	ef 90       	pop	r14
    4e1a:	cf 90       	pop	r12
    4e1c:	af 90       	pop	r10
    4e1e:	9f 90       	pop	r9
    4e20:	8f 90       	pop	r8
    4e22:	08 95       	ret

00004e24 <_turn_off>:
    4e24:	90 e0       	ldi	r25, 0x00	; 0
    4e26:	fc 01       	movw	r30, r24
    4e28:	ee 0f       	add	r30, r30
    4e2a:	ff 1f       	adc	r31, r31
    4e2c:	e8 0f       	add	r30, r24
    4e2e:	f9 1f       	adc	r31, r25
    4e30:	ee 0f       	add	r30, r30
    4e32:	ff 1f       	adc	r31, r31
    4e34:	e7 5b       	subi	r30, 0xB7	; 183
    4e36:	fb 4e       	sbci	r31, 0xEB	; 235
    4e38:	23 81       	ldd	r18, Z+3	; 0x03
    4e3a:	21 11       	cpse	r18, r1
    4e3c:	1f c0       	rjmp	.+62     	; 0x4e7c <_turn_off+0x58>
    4e3e:	9c 01       	movw	r18, r24
    4e40:	22 0f       	add	r18, r18
    4e42:	33 1f       	adc	r19, r19
    4e44:	f9 01       	movw	r30, r18
    4e46:	e8 0f       	add	r30, r24
    4e48:	f9 1f       	adc	r31, r25
    4e4a:	ee 0f       	add	r30, r30
    4e4c:	ff 1f       	adc	r31, r31
    4e4e:	e7 5b       	subi	r30, 0xB7	; 183
    4e50:	fb 4e       	sbci	r31, 0xEB	; 235
    4e52:	a0 81       	ld	r26, Z
    4e54:	b1 81       	ldd	r27, Z+1	; 0x01
    4e56:	4c 91       	ld	r20, X
    4e58:	f9 01       	movw	r30, r18
    4e5a:	e8 0f       	add	r30, r24
    4e5c:	f9 1f       	adc	r31, r25
    4e5e:	ee 0f       	add	r30, r30
    4e60:	ff 1f       	adc	r31, r31
    4e62:	e7 5b       	subi	r30, 0xB7	; 183
    4e64:	fb 4e       	sbci	r31, 0xEB	; 235
    4e66:	81 e0       	ldi	r24, 0x01	; 1
    4e68:	90 e0       	ldi	r25, 0x00	; 0
    4e6a:	02 80       	ldd	r0, Z+2	; 0x02
    4e6c:	02 c0       	rjmp	.+4      	; 0x4e72 <_turn_off+0x4e>
    4e6e:	88 0f       	add	r24, r24
    4e70:	99 1f       	adc	r25, r25
    4e72:	0a 94       	dec	r0
    4e74:	e2 f7       	brpl	.-8      	; 0x4e6e <_turn_off+0x4a>
    4e76:	84 2b       	or	r24, r20
    4e78:	8c 93       	st	X, r24
    4e7a:	08 95       	ret
    4e7c:	fc 01       	movw	r30, r24
    4e7e:	ee 0f       	add	r30, r30
    4e80:	ff 1f       	adc	r31, r31
    4e82:	df 01       	movw	r26, r30
    4e84:	a8 0f       	add	r26, r24
    4e86:	b9 1f       	adc	r27, r25
    4e88:	aa 0f       	add	r26, r26
    4e8a:	bb 1f       	adc	r27, r27
    4e8c:	a7 5b       	subi	r26, 0xB7	; 183
    4e8e:	bb 4e       	sbci	r27, 0xEB	; 235
    4e90:	0d 90       	ld	r0, X+
    4e92:	bc 91       	ld	r27, X
    4e94:	a0 2d       	mov	r26, r0
    4e96:	2c 91       	ld	r18, X
    4e98:	e8 0f       	add	r30, r24
    4e9a:	f9 1f       	adc	r31, r25
    4e9c:	ee 0f       	add	r30, r30
    4e9e:	ff 1f       	adc	r31, r31
    4ea0:	e7 5b       	subi	r30, 0xB7	; 183
    4ea2:	fb 4e       	sbci	r31, 0xEB	; 235
    4ea4:	81 e0       	ldi	r24, 0x01	; 1
    4ea6:	90 e0       	ldi	r25, 0x00	; 0
    4ea8:	02 80       	ldd	r0, Z+2	; 0x02
    4eaa:	02 c0       	rjmp	.+4      	; 0x4eb0 <_turn_off+0x8c>
    4eac:	88 0f       	add	r24, r24
    4eae:	99 1f       	adc	r25, r25
    4eb0:	0a 94       	dec	r0
    4eb2:	e2 f7       	brpl	.-8      	; 0x4eac <_turn_off+0x88>
    4eb4:	80 95       	com	r24
    4eb6:	82 23       	and	r24, r18
    4eb8:	8c 93       	st	X, r24
    4eba:	08 95       	ret

00004ebc <_turn_on>:
    4ebc:	90 e0       	ldi	r25, 0x00	; 0
    4ebe:	fc 01       	movw	r30, r24
    4ec0:	ee 0f       	add	r30, r30
    4ec2:	ff 1f       	adc	r31, r31
    4ec4:	e8 0f       	add	r30, r24
    4ec6:	f9 1f       	adc	r31, r25
    4ec8:	ee 0f       	add	r30, r30
    4eca:	ff 1f       	adc	r31, r31
    4ecc:	e7 5b       	subi	r30, 0xB7	; 183
    4ece:	fb 4e       	sbci	r31, 0xEB	; 235
    4ed0:	23 81       	ldd	r18, Z+3	; 0x03
    4ed2:	21 11       	cpse	r18, r1
    4ed4:	20 c0       	rjmp	.+64     	; 0x4f16 <_turn_on+0x5a>
    4ed6:	9c 01       	movw	r18, r24
    4ed8:	22 0f       	add	r18, r18
    4eda:	33 1f       	adc	r19, r19
    4edc:	f9 01       	movw	r30, r18
    4ede:	e8 0f       	add	r30, r24
    4ee0:	f9 1f       	adc	r31, r25
    4ee2:	ee 0f       	add	r30, r30
    4ee4:	ff 1f       	adc	r31, r31
    4ee6:	e7 5b       	subi	r30, 0xB7	; 183
    4ee8:	fb 4e       	sbci	r31, 0xEB	; 235
    4eea:	a0 81       	ld	r26, Z
    4eec:	b1 81       	ldd	r27, Z+1	; 0x01
    4eee:	4c 91       	ld	r20, X
    4ef0:	f9 01       	movw	r30, r18
    4ef2:	e8 0f       	add	r30, r24
    4ef4:	f9 1f       	adc	r31, r25
    4ef6:	ee 0f       	add	r30, r30
    4ef8:	ff 1f       	adc	r31, r31
    4efa:	e7 5b       	subi	r30, 0xB7	; 183
    4efc:	fb 4e       	sbci	r31, 0xEB	; 235
    4efe:	81 e0       	ldi	r24, 0x01	; 1
    4f00:	90 e0       	ldi	r25, 0x00	; 0
    4f02:	02 80       	ldd	r0, Z+2	; 0x02
    4f04:	02 c0       	rjmp	.+4      	; 0x4f0a <_turn_on+0x4e>
    4f06:	88 0f       	add	r24, r24
    4f08:	99 1f       	adc	r25, r25
    4f0a:	0a 94       	dec	r0
    4f0c:	e2 f7       	brpl	.-8      	; 0x4f06 <_turn_on+0x4a>
    4f0e:	80 95       	com	r24
    4f10:	84 23       	and	r24, r20
    4f12:	8c 93       	st	X, r24
    4f14:	08 95       	ret
    4f16:	fc 01       	movw	r30, r24
    4f18:	ee 0f       	add	r30, r30
    4f1a:	ff 1f       	adc	r31, r31
    4f1c:	df 01       	movw	r26, r30
    4f1e:	a8 0f       	add	r26, r24
    4f20:	b9 1f       	adc	r27, r25
    4f22:	aa 0f       	add	r26, r26
    4f24:	bb 1f       	adc	r27, r27
    4f26:	a7 5b       	subi	r26, 0xB7	; 183
    4f28:	bb 4e       	sbci	r27, 0xEB	; 235
    4f2a:	0d 90       	ld	r0, X+
    4f2c:	bc 91       	ld	r27, X
    4f2e:	a0 2d       	mov	r26, r0
    4f30:	2c 91       	ld	r18, X
    4f32:	e8 0f       	add	r30, r24
    4f34:	f9 1f       	adc	r31, r25
    4f36:	ee 0f       	add	r30, r30
    4f38:	ff 1f       	adc	r31, r31
    4f3a:	e7 5b       	subi	r30, 0xB7	; 183
    4f3c:	fb 4e       	sbci	r31, 0xEB	; 235
    4f3e:	81 e0       	ldi	r24, 0x01	; 1
    4f40:	90 e0       	ldi	r25, 0x00	; 0
    4f42:	02 80       	ldd	r0, Z+2	; 0x02
    4f44:	02 c0       	rjmp	.+4      	; 0x4f4a <_turn_on+0x8e>
    4f46:	88 0f       	add	r24, r24
    4f48:	99 1f       	adc	r25, r25
    4f4a:	0a 94       	dec	r0
    4f4c:	e2 f7       	brpl	.-8      	; 0x4f46 <_turn_on+0x8a>
    4f4e:	82 2b       	or	r24, r18
    4f50:	8c 93       	st	X, r24
    4f52:	08 95       	ret

00004f54 <_hal_led_task>:
    4f54:	cc 24       	eor	r12, r12
    4f56:	c3 94       	inc	r12
    4f58:	d1 2c       	mov	r13, r1
    4f5a:	68 94       	set
    4f5c:	bb 24       	eor	r11, r11
    4f5e:	b2 f8       	bld	r11, 2
    4f60:	c9 e4       	ldi	r28, 0x49	; 73
    4f62:	d4 e1       	ldi	r29, 0x14	; 20
    4f64:	10 e0       	ldi	r17, 0x00	; 0
    4f66:	8c 81       	ldd	r24, Y+4	; 0x04
    4f68:	81 30       	cpi	r24, 0x01	; 1
    4f6a:	81 f0       	breq	.+32     	; 0x4f8c <_hal_led_task+0x38>
    4f6c:	18 f1       	brcs	.+70     	; 0x4fb4 <_hal_led_task+0x60>
    4f6e:	82 30       	cpi	r24, 0x02	; 2
    4f70:	61 f5       	brne	.+88     	; 0x4fca <_hal_led_task+0x76>
    4f72:	e8 81       	ld	r30, Y
    4f74:	f9 81       	ldd	r31, Y+1	; 0x01
    4f76:	20 81       	ld	r18, Z
    4f78:	c6 01       	movw	r24, r12
    4f7a:	0a 80       	ldd	r0, Y+2	; 0x02
    4f7c:	02 c0       	rjmp	.+4      	; 0x4f82 <_hal_led_task+0x2e>
    4f7e:	88 0f       	add	r24, r24
    4f80:	99 1f       	adc	r25, r25
    4f82:	0a 94       	dec	r0
    4f84:	e2 f7       	brpl	.-8      	; 0x4f7e <_hal_led_task+0x2a>
    4f86:	82 27       	eor	r24, r18
    4f88:	80 83       	st	Z, r24
    4f8a:	1f c0       	rjmp	.+62     	; 0x4fca <_hal_led_task+0x76>
    4f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    4f8e:	8f 5f       	subi	r24, 0xFF	; 255
    4f90:	8a 30       	cpi	r24, 0x0A	; 10
    4f92:	10 f4       	brcc	.+4      	; 0x4f98 <_hal_led_task+0x44>
    4f94:	8d 83       	std	Y+5, r24	; 0x05
    4f96:	19 c0       	rjmp	.+50     	; 0x4fca <_hal_led_task+0x76>
    4f98:	1d 82       	std	Y+5, r1	; 0x05
    4f9a:	e8 81       	ld	r30, Y
    4f9c:	f9 81       	ldd	r31, Y+1	; 0x01
    4f9e:	20 81       	ld	r18, Z
    4fa0:	c6 01       	movw	r24, r12
    4fa2:	0a 80       	ldd	r0, Y+2	; 0x02
    4fa4:	02 c0       	rjmp	.+4      	; 0x4faa <_hal_led_task+0x56>
    4fa6:	88 0f       	add	r24, r24
    4fa8:	99 1f       	adc	r25, r25
    4faa:	0a 94       	dec	r0
    4fac:	e2 f7       	brpl	.-8      	; 0x4fa6 <_hal_led_task+0x52>
    4fae:	82 27       	eor	r24, r18
    4fb0:	80 83       	st	Z, r24
    4fb2:	0b c0       	rjmp	.+22     	; 0x4fca <_hal_led_task+0x76>
    4fb4:	0d 81       	ldd	r16, Y+5	; 0x05
    4fb6:	00 23       	and	r16, r16
    4fb8:	29 f0       	breq	.+10     	; 0x4fc4 <_hal_led_task+0x70>
    4fba:	81 2f       	mov	r24, r17
    4fbc:	7f df       	rcall	.-258    	; 0x4ebc <_turn_on>
    4fbe:	01 50       	subi	r16, 0x01	; 1
    4fc0:	0d 83       	std	Y+5, r16	; 0x05
    4fc2:	03 c0       	rjmp	.+6      	; 0x4fca <_hal_led_task+0x76>
    4fc4:	bc 82       	std	Y+4, r11	; 0x04
    4fc6:	81 2f       	mov	r24, r17
    4fc8:	2d df       	rcall	.-422    	; 0x4e24 <_turn_off>
    4fca:	1f 5f       	subi	r17, 0xFF	; 255
    4fcc:	26 96       	adiw	r28, 0x06	; 6
    4fce:	14 30       	cpi	r17, 0x04	; 4
    4fd0:	51 f6       	brne	.-108    	; 0x4f66 <_hal_led_task+0x12>
    4fd2:	65 e0       	ldi	r22, 0x05	; 5
    4fd4:	70 e0       	ldi	r23, 0x00	; 0
    4fd6:	80 e0       	ldi	r24, 0x00	; 0
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	0e 94 80 11 	call	0x2300	; 0x2300 <vTaskDelay>
    4fde:	c0 cf       	rjmp	.-128    	; 0x4f60 <_hal_led_task+0xc>

00004fe0 <status_leds_initialise>:
    4fe0:	ef 92       	push	r14
    4fe2:	ff 92       	push	r15
    4fe4:	0f 93       	push	r16
    4fe6:	1f 93       	push	r17
    4fe8:	cf 93       	push	r28
    4fea:	df 93       	push	r29
    4fec:	08 2f       	mov	r16, r24
    4fee:	80 e4       	ldi	r24, 0x40	; 64
    4ff0:	87 b9       	out	0x07, r24	; 7
    4ff2:	c9 e4       	ldi	r28, 0x49	; 73
    4ff4:	d4 e1       	ldi	r29, 0x14	; 20
    4ff6:	0f 2e       	mov	r0, r31
    4ff8:	f8 e2       	ldi	r31, 0x28	; 40
    4ffa:	ef 2e       	mov	r14, r31
    4ffc:	f1 2c       	mov	r15, r1
    4ffe:	f0 2d       	mov	r31, r0
    5000:	f9 82       	std	Y+1, r15	; 0x01
    5002:	e8 82       	st	Y, r14
    5004:	86 e0       	ldi	r24, 0x06	; 6
    5006:	8a 83       	std	Y+2, r24	; 0x02
    5008:	1b 82       	std	Y+3, r1	; 0x03
    500a:	14 e0       	ldi	r17, 0x04	; 4
    500c:	1c 83       	std	Y+4, r17	; 0x04
    500e:	80 e0       	ldi	r24, 0x00	; 0
    5010:	09 df       	rcall	.-494    	; 0x4e24 <_turn_off>
    5012:	80 e8       	ldi	r24, 0x80	; 128
    5014:	87 b9       	out	0x07, r24	; 7
    5016:	ff 82       	std	Y+7, r15	; 0x07
    5018:	ee 82       	std	Y+6, r14	; 0x06
    501a:	87 e0       	ldi	r24, 0x07	; 7
    501c:	88 87       	std	Y+8, r24	; 0x08
    501e:	19 86       	std	Y+9, r1	; 0x09
    5020:	1a 87       	std	Y+10, r17	; 0x0a
    5022:	81 e0       	ldi	r24, 0x01	; 1
    5024:	ff de       	rcall	.-514    	; 0x4e24 <_turn_off>
    5026:	80 e2       	ldi	r24, 0x20	; 32
    5028:	83 bb       	out	0x13, r24	; 19
    502a:	84 e3       	ldi	r24, 0x34	; 52
    502c:	90 e0       	ldi	r25, 0x00	; 0
    502e:	9d 87       	std	Y+13, r25	; 0x0d
    5030:	8c 87       	std	Y+12, r24	; 0x0c
    5032:	85 e0       	ldi	r24, 0x05	; 5
    5034:	8e 87       	std	Y+14, r24	; 0x0e
    5036:	1f 86       	std	Y+15, r1	; 0x0f
    5038:	18 8b       	std	Y+16, r17	; 0x10
    503a:	82 e0       	ldi	r24, 0x02	; 2
    503c:	f3 de       	rcall	.-538    	; 0x4e24 <_turn_off>
    503e:	80 e1       	ldi	r24, 0x10	; 16
    5040:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    5044:	82 e0       	ldi	r24, 0x02	; 2
    5046:	91 e0       	ldi	r25, 0x01	; 1
    5048:	9b 8b       	std	Y+19, r25	; 0x13
    504a:	8a 8b       	std	Y+18, r24	; 0x12
    504c:	1c 8b       	std	Y+20, r17	; 0x14
    504e:	1d 8a       	std	Y+21, r1	; 0x15
    5050:	1e 8b       	std	Y+22, r17	; 0x16
    5052:	83 e0       	ldi	r24, 0x03	; 3
    5054:	e7 de       	rcall	.-562    	; 0x4e24 <_turn_off>
    5056:	e1 2c       	mov	r14, r1
    5058:	f1 2c       	mov	r15, r1
    505a:	20 e0       	ldi	r18, 0x00	; 0
    505c:	30 e0       	ldi	r19, 0x00	; 0
    505e:	40 ec       	ldi	r20, 0xC0	; 192
    5060:	50 e0       	ldi	r21, 0x00	; 0
    5062:	66 ee       	ldi	r22, 0xE6	; 230
    5064:	77 e0       	ldi	r23, 0x07	; 7
    5066:	8a ea       	ldi	r24, 0xAA	; 170
    5068:	97 e2       	ldi	r25, 0x27	; 39
    506a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <xTaskCreate>
    506e:	df 91       	pop	r29
    5070:	cf 91       	pop	r28
    5072:	1f 91       	pop	r17
    5074:	0f 91       	pop	r16
    5076:	ff 90       	pop	r15
    5078:	ef 90       	pop	r14
    507a:	08 95       	ret

0000507c <status_leds_slowBlink>:
    507c:	cf 93       	push	r28
    507e:	df 93       	push	r29
    5080:	90 e0       	ldi	r25, 0x00	; 0
    5082:	fc 01       	movw	r30, r24
    5084:	ee 0f       	add	r30, r30
    5086:	ff 1f       	adc	r31, r31
    5088:	df 01       	movw	r26, r30
    508a:	a8 0f       	add	r26, r24
    508c:	b9 1f       	adc	r27, r25
    508e:	aa 0f       	add	r26, r26
    5090:	bb 1f       	adc	r27, r27
    5092:	a7 5b       	subi	r26, 0xB7	; 183
    5094:	bb 4e       	sbci	r27, 0xEB	; 235
    5096:	cd 91       	ld	r28, X+
    5098:	dc 91       	ld	r29, X
    509a:	11 97       	sbiw	r26, 0x01	; 1
    509c:	48 81       	ld	r20, Y
    509e:	21 e0       	ldi	r18, 0x01	; 1
    50a0:	30 e0       	ldi	r19, 0x00	; 0
    50a2:	12 96       	adiw	r26, 0x02	; 2
    50a4:	0c 90       	ld	r0, X
    50a6:	12 97       	sbiw	r26, 0x02	; 2
    50a8:	02 c0       	rjmp	.+4      	; 0x50ae <status_leds_slowBlink+0x32>
    50aa:	22 0f       	add	r18, r18
    50ac:	33 1f       	adc	r19, r19
    50ae:	0a 94       	dec	r0
    50b0:	e2 f7       	brpl	.-8      	; 0x50aa <status_leds_slowBlink+0x2e>
    50b2:	24 27       	eor	r18, r20
    50b4:	28 83       	st	Y, r18
    50b6:	fd 01       	movw	r30, r26
    50b8:	81 e0       	ldi	r24, 0x01	; 1
    50ba:	84 83       	std	Z+4, r24	; 0x04
    50bc:	df 91       	pop	r29
    50be:	cf 91       	pop	r28
    50c0:	08 95       	ret

000050c2 <status_leds_fastBlink>:
    50c2:	cf 93       	push	r28
    50c4:	df 93       	push	r29
    50c6:	90 e0       	ldi	r25, 0x00	; 0
    50c8:	fc 01       	movw	r30, r24
    50ca:	ee 0f       	add	r30, r30
    50cc:	ff 1f       	adc	r31, r31
    50ce:	df 01       	movw	r26, r30
    50d0:	a8 0f       	add	r26, r24
    50d2:	b9 1f       	adc	r27, r25
    50d4:	aa 0f       	add	r26, r26
    50d6:	bb 1f       	adc	r27, r27
    50d8:	a7 5b       	subi	r26, 0xB7	; 183
    50da:	bb 4e       	sbci	r27, 0xEB	; 235
    50dc:	cd 91       	ld	r28, X+
    50de:	dc 91       	ld	r29, X
    50e0:	11 97       	sbiw	r26, 0x01	; 1
    50e2:	48 81       	ld	r20, Y
    50e4:	21 e0       	ldi	r18, 0x01	; 1
    50e6:	30 e0       	ldi	r19, 0x00	; 0
    50e8:	12 96       	adiw	r26, 0x02	; 2
    50ea:	0c 90       	ld	r0, X
    50ec:	12 97       	sbiw	r26, 0x02	; 2
    50ee:	02 c0       	rjmp	.+4      	; 0x50f4 <status_leds_fastBlink+0x32>
    50f0:	22 0f       	add	r18, r18
    50f2:	33 1f       	adc	r19, r19
    50f4:	0a 94       	dec	r0
    50f6:	e2 f7       	brpl	.-8      	; 0x50f0 <status_leds_fastBlink+0x2e>
    50f8:	24 27       	eor	r18, r20
    50fa:	28 83       	st	Y, r18
    50fc:	fd 01       	movw	r30, r26
    50fe:	82 e0       	ldi	r24, 0x02	; 2
    5100:	84 83       	std	Z+4, r24	; 0x04
    5102:	df 91       	pop	r29
    5104:	cf 91       	pop	r28
    5106:	08 95       	ret

00005108 <status_leds_ledOn>:
    5108:	28 2f       	mov	r18, r24
    510a:	30 e0       	ldi	r19, 0x00	; 0
    510c:	f9 01       	movw	r30, r18
    510e:	ee 0f       	add	r30, r30
    5110:	ff 1f       	adc	r31, r31
    5112:	e2 0f       	add	r30, r18
    5114:	f3 1f       	adc	r31, r19
    5116:	ee 0f       	add	r30, r30
    5118:	ff 1f       	adc	r31, r31
    511a:	e7 5b       	subi	r30, 0xB7	; 183
    511c:	fb 4e       	sbci	r31, 0xEB	; 235
    511e:	93 e0       	ldi	r25, 0x03	; 3
    5120:	94 83       	std	Z+4, r25	; 0x04
    5122:	cc ce       	rjmp	.-616    	; 0x4ebc <_turn_on>
    5124:	08 95       	ret

00005126 <status_leds_ledOff>:
    5126:	28 2f       	mov	r18, r24
    5128:	30 e0       	ldi	r19, 0x00	; 0
    512a:	f9 01       	movw	r30, r18
    512c:	ee 0f       	add	r30, r30
    512e:	ff 1f       	adc	r31, r31
    5130:	e2 0f       	add	r30, r18
    5132:	f3 1f       	adc	r31, r19
    5134:	ee 0f       	add	r30, r30
    5136:	ff 1f       	adc	r31, r31
    5138:	e7 5b       	subi	r30, 0xB7	; 183
    513a:	fb 4e       	sbci	r31, 0xEB	; 235
    513c:	94 e0       	ldi	r25, 0x04	; 4
    513e:	94 83       	std	Z+4, r25	; 0x04
    5140:	71 ce       	rjmp	.-798    	; 0x4e24 <_turn_off>
    5142:	08 95       	ret

00005144 <status_leds_longPuls>:
    5144:	90 e0       	ldi	r25, 0x00	; 0
    5146:	fc 01       	movw	r30, r24
    5148:	ee 0f       	add	r30, r30
    514a:	ff 1f       	adc	r31, r31
    514c:	df 01       	movw	r26, r30
    514e:	a8 0f       	add	r26, r24
    5150:	b9 1f       	adc	r27, r25
    5152:	aa 0f       	add	r26, r26
    5154:	bb 1f       	adc	r27, r27
    5156:	a7 5b       	subi	r26, 0xB7	; 183
    5158:	bb 4e       	sbci	r27, 0xEB	; 235
    515a:	24 e0       	ldi	r18, 0x04	; 4
    515c:	15 96       	adiw	r26, 0x05	; 5
    515e:	2c 93       	st	X, r18
    5160:	15 97       	sbiw	r26, 0x05	; 5
    5162:	fd 01       	movw	r30, r26
    5164:	14 82       	std	Z+4, r1	; 0x04
    5166:	08 95       	ret

00005168 <status_leds_shortPuls>:
    5168:	90 e0       	ldi	r25, 0x00	; 0
    516a:	fc 01       	movw	r30, r24
    516c:	ee 0f       	add	r30, r30
    516e:	ff 1f       	adc	r31, r31
    5170:	df 01       	movw	r26, r30
    5172:	a8 0f       	add	r26, r24
    5174:	b9 1f       	adc	r27, r25
    5176:	aa 0f       	add	r26, r26
    5178:	bb 1f       	adc	r27, r27
    517a:	a7 5b       	subi	r26, 0xB7	; 183
    517c:	bb 4e       	sbci	r27, 0xEB	; 235
    517e:	21 e0       	ldi	r18, 0x01	; 1
    5180:	15 96       	adiw	r26, 0x05	; 5
    5182:	2c 93       	st	X, r18
    5184:	15 97       	sbiw	r26, 0x05	; 5
    5186:	fd 01       	movw	r30, r26
    5188:	14 82       	std	Z+4, r1	; 0x04
    518a:	08 95       	ret

0000518c <_initTwiInterface>:
    518c:	80 91 6f 14 	lds	r24, 0x146F	; 0x80146f <_twiIsInitiated>
    5190:	81 11       	cpse	r24, r1
    5192:	0c c0       	rjmp	.+24     	; 0x51ac <_initTwiInterface+0x20>
    5194:	8c e0       	ldi	r24, 0x0C	; 12
    5196:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    519a:	8f ef       	ldi	r24, 0xFF	; 255
    519c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    51a0:	84 e0       	ldi	r24, 0x04	; 4
    51a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    51a6:	81 e0       	ldi	r24, 0x01	; 1
    51a8:	80 93 6f 14 	sts	0x146F, r24	; 0x80146f <_twiIsInitiated>
    51ac:	08 95       	ret

000051ae <twiCreate>:
    51ae:	af 92       	push	r10
    51b0:	bf 92       	push	r11
    51b2:	cf 92       	push	r12
    51b4:	df 92       	push	r13
    51b6:	ef 92       	push	r14
    51b8:	ff 92       	push	r15
    51ba:	0f 93       	push	r16
    51bc:	1f 93       	push	r17
    51be:	cf 93       	push	r28
    51c0:	df 93       	push	r29
    51c2:	a8 2e       	mov	r10, r24
    51c4:	b6 2e       	mov	r11, r22
    51c6:	69 01       	movw	r12, r18
    51c8:	7a 01       	movw	r14, r20
    51ca:	84 e0       	ldi	r24, 0x04	; 4
    51cc:	90 e0       	ldi	r25, 0x00	; 0
    51ce:	e7 d3       	rcall	.+1998   	; 0x599e <malloc>
    51d0:	ec 01       	movw	r28, r24
    51d2:	89 2b       	or	r24, r25
    51d4:	61 f1       	breq	.+88     	; 0x522e <twiCreate+0x80>
    51d6:	a8 82       	st	Y, r10
    51d8:	81 e0       	ldi	r24, 0x01	; 1
    51da:	b8 12       	cpse	r11, r24
    51dc:	12 c0       	rjmp	.+36     	; 0x5202 <twiCreate+0x54>
    51de:	c7 01       	movw	r24, r14
    51e0:	b6 01       	movw	r22, r12
    51e2:	20 ea       	ldi	r18, 0xA0	; 160
    51e4:	36 e8       	ldi	r19, 0x86	; 134
    51e6:	41 e0       	ldi	r20, 0x01	; 1
    51e8:	50 e0       	ldi	r21, 0x00	; 0
    51ea:	8c d3       	rcall	.+1816   	; 0x5904 <__udivmodsi4>
    51ec:	da 01       	movw	r26, r20
    51ee:	c9 01       	movw	r24, r18
    51f0:	40 97       	sbiw	r24, 0x10	; 16
    51f2:	a1 09       	sbc	r26, r1
    51f4:	b1 09       	sbc	r27, r1
    51f6:	b6 95       	lsr	r27
    51f8:	a7 95       	ror	r26
    51fa:	97 95       	ror	r25
    51fc:	87 95       	ror	r24
    51fe:	89 83       	std	Y+1, r24	; 0x01
    5200:	11 c0       	rjmp	.+34     	; 0x5224 <twiCreate+0x76>
    5202:	c7 01       	movw	r24, r14
    5204:	b6 01       	movw	r22, r12
    5206:	20 e8       	ldi	r18, 0x80	; 128
    5208:	3a e1       	ldi	r19, 0x1A	; 26
    520a:	46 e0       	ldi	r20, 0x06	; 6
    520c:	50 e0       	ldi	r21, 0x00	; 0
    520e:	7a d3       	rcall	.+1780   	; 0x5904 <__udivmodsi4>
    5210:	da 01       	movw	r26, r20
    5212:	c9 01       	movw	r24, r18
    5214:	40 97       	sbiw	r24, 0x10	; 16
    5216:	a1 09       	sbc	r26, r1
    5218:	b1 09       	sbc	r27, r1
    521a:	b6 95       	lsr	r27
    521c:	a7 95       	ror	r26
    521e:	97 95       	ror	r25
    5220:	87 95       	ror	r24
    5222:	89 83       	std	Y+1, r24	; 0x01
    5224:	1b 83       	std	Y+3, r17	; 0x03
    5226:	0a 83       	std	Y+2, r16	; 0x02
    5228:	8c 2f       	mov	r24, r28
    522a:	9d 2f       	mov	r25, r29
    522c:	02 c0       	rjmp	.+4      	; 0x5232 <twiCreate+0x84>
    522e:	80 e0       	ldi	r24, 0x00	; 0
    5230:	90 e0       	ldi	r25, 0x00	; 0
    5232:	df 91       	pop	r29
    5234:	cf 91       	pop	r28
    5236:	1f 91       	pop	r17
    5238:	0f 91       	pop	r16
    523a:	ff 90       	pop	r15
    523c:	ef 90       	pop	r14
    523e:	df 90       	pop	r13
    5240:	cf 90       	pop	r12
    5242:	bf 90       	pop	r11
    5244:	af 90       	pop	r10
    5246:	08 95       	ret

00005248 <twiIsBusy>:
    5248:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    524c:	81 70       	andi	r24, 0x01	; 1
    524e:	08 95       	ret

00005250 <twiTransmit>:
    5250:	ff 92       	push	r15
    5252:	0f 93       	push	r16
    5254:	1f 93       	push	r17
    5256:	cf 93       	push	r28
    5258:	df 93       	push	r29
    525a:	00 97       	sbiw	r24, 0x00	; 0
    525c:	d1 f1       	breq	.+116    	; 0x52d2 <twiTransmit+0x82>
    525e:	4a 30       	cpi	r20, 0x0A	; 10
    5260:	d0 f5       	brcc	.+116    	; 0x52d6 <twiTransmit+0x86>
    5262:	f4 2e       	mov	r15, r20
    5264:	8b 01       	movw	r16, r22
    5266:	ec 01       	movw	r28, r24
    5268:	ef df       	rcall	.-34     	; 0x5248 <twiIsBusy>
    526a:	81 11       	cpse	r24, r1
    526c:	36 c0       	rjmp	.+108    	; 0x52da <twiTransmit+0x8a>
    526e:	80 91 62 14 	lds	r24, 0x1462	; 0x801462 <_twiCurrentHandler>
    5272:	90 91 63 14 	lds	r25, 0x1463	; 0x801463 <_twiCurrentHandler+0x1>
    5276:	c8 17       	cp	r28, r24
    5278:	d9 07       	cpc	r29, r25
    527a:	41 f0       	breq	.+16     	; 0x528c <twiTransmit+0x3c>
    527c:	87 df       	rcall	.-242    	; 0x518c <_initTwiInterface>
    527e:	89 81       	ldd	r24, Y+1	; 0x01
    5280:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5284:	d0 93 63 14 	sts	0x1463, r29	; 0x801463 <_twiCurrentHandler+0x1>
    5288:	c0 93 62 14 	sts	0x1462, r28	; 0x801462 <_twiCurrentHandler>
    528c:	81 e0       	ldi	r24, 0x01	; 1
    528e:	8f 0d       	add	r24, r15
    5290:	80 93 64 14 	sts	0x1464, r24	; 0x801464 <_twiMessageLen>
    5294:	88 81       	ld	r24, Y
    5296:	88 0f       	add	r24, r24
    5298:	80 93 65 14 	sts	0x1465, r24	; 0x801465 <_twiMessageBuffer>
    529c:	ff 20       	and	r15, r15
    529e:	89 f0       	breq	.+34     	; 0x52c2 <twiTransmit+0x72>
    52a0:	f8 01       	movw	r30, r16
    52a2:	a6 e6       	ldi	r26, 0x66	; 102
    52a4:	b4 e1       	ldi	r27, 0x14	; 20
    52a6:	4f ef       	ldi	r20, 0xFF	; 255
    52a8:	4f 0d       	add	r20, r15
    52aa:	64 2f       	mov	r22, r20
    52ac:	70 e0       	ldi	r23, 0x00	; 0
    52ae:	cb 01       	movw	r24, r22
    52b0:	01 96       	adiw	r24, 0x01	; 1
    52b2:	b8 01       	movw	r22, r16
    52b4:	68 0f       	add	r22, r24
    52b6:	79 1f       	adc	r23, r25
    52b8:	81 91       	ld	r24, Z+
    52ba:	8d 93       	st	X+, r24
    52bc:	e6 17       	cp	r30, r22
    52be:	f7 07       	cpc	r31, r23
    52c0:	d9 f7       	brne	.-10     	; 0x52b8 <twiTransmit+0x68>
    52c2:	88 ef       	ldi	r24, 0xF8	; 248
    52c4:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    52c8:	85 ea       	ldi	r24, 0xA5	; 165
    52ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    52ce:	84 e0       	ldi	r24, 0x04	; 4
    52d0:	05 c0       	rjmp	.+10     	; 0x52dc <twiTransmit+0x8c>
    52d2:	86 e0       	ldi	r24, 0x06	; 6
    52d4:	03 c0       	rjmp	.+6      	; 0x52dc <twiTransmit+0x8c>
    52d6:	87 e0       	ldi	r24, 0x07	; 7
    52d8:	01 c0       	rjmp	.+2      	; 0x52dc <twiTransmit+0x8c>
    52da:	82 e0       	ldi	r24, 0x02	; 2
    52dc:	df 91       	pop	r29
    52de:	cf 91       	pop	r28
    52e0:	1f 91       	pop	r17
    52e2:	0f 91       	pop	r16
    52e4:	ff 90       	pop	r15
    52e6:	08 95       	ret

000052e8 <twiReceive>:
    52e8:	1f 93       	push	r17
    52ea:	cf 93       	push	r28
    52ec:	df 93       	push	r29
    52ee:	00 97       	sbiw	r24, 0x00	; 0
    52f0:	29 f1       	breq	.+74     	; 0x533c <twiReceive+0x54>
    52f2:	6b 30       	cpi	r22, 0x0B	; 11
    52f4:	28 f5       	brcc	.+74     	; 0x5340 <twiReceive+0x58>
    52f6:	16 2f       	mov	r17, r22
    52f8:	ec 01       	movw	r28, r24
    52fa:	a6 df       	rcall	.-180    	; 0x5248 <twiIsBusy>
    52fc:	81 11       	cpse	r24, r1
    52fe:	22 c0       	rjmp	.+68     	; 0x5344 <twiReceive+0x5c>
    5300:	80 91 62 14 	lds	r24, 0x1462	; 0x801462 <_twiCurrentHandler>
    5304:	90 91 63 14 	lds	r25, 0x1463	; 0x801463 <_twiCurrentHandler+0x1>
    5308:	c8 17       	cp	r28, r24
    530a:	d9 07       	cpc	r29, r25
    530c:	41 f0       	breq	.+16     	; 0x531e <twiReceive+0x36>
    530e:	3e df       	rcall	.-388    	; 0x518c <_initTwiInterface>
    5310:	89 81       	ldd	r24, Y+1	; 0x01
    5312:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5316:	d0 93 63 14 	sts	0x1463, r29	; 0x801463 <_twiCurrentHandler+0x1>
    531a:	c0 93 62 14 	sts	0x1462, r28	; 0x801462 <_twiCurrentHandler>
    531e:	10 93 64 14 	sts	0x1464, r17	; 0x801464 <_twiMessageLen>
    5322:	88 81       	ld	r24, Y
    5324:	88 0f       	add	r24, r24
    5326:	81 60       	ori	r24, 0x01	; 1
    5328:	80 93 65 14 	sts	0x1465, r24	; 0x801465 <_twiMessageBuffer>
    532c:	88 ef       	ldi	r24, 0xF8	; 248
    532e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5332:	85 ea       	ldi	r24, 0xA5	; 165
    5334:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5338:	85 e0       	ldi	r24, 0x05	; 5
    533a:	05 c0       	rjmp	.+10     	; 0x5346 <twiReceive+0x5e>
    533c:	86 e0       	ldi	r24, 0x06	; 6
    533e:	03 c0       	rjmp	.+6      	; 0x5346 <twiReceive+0x5e>
    5340:	87 e0       	ldi	r24, 0x07	; 7
    5342:	01 c0       	rjmp	.+2      	; 0x5346 <twiReceive+0x5e>
    5344:	82 e0       	ldi	r24, 0x02	; 2
    5346:	df 91       	pop	r29
    5348:	cf 91       	pop	r28
    534a:	1f 91       	pop	r17
    534c:	08 95       	ret

0000534e <__vector_39>:
    534e:	1f 92       	push	r1
    5350:	0f 92       	push	r0
    5352:	0f b6       	in	r0, 0x3f	; 63
    5354:	0f 92       	push	r0
    5356:	11 24       	eor	r1, r1
    5358:	0b b6       	in	r0, 0x3b	; 59
    535a:	0f 92       	push	r0
    535c:	2f 93       	push	r18
    535e:	3f 93       	push	r19
    5360:	4f 93       	push	r20
    5362:	5f 93       	push	r21
    5364:	6f 93       	push	r22
    5366:	7f 93       	push	r23
    5368:	8f 93       	push	r24
    536a:	9f 93       	push	r25
    536c:	af 93       	push	r26
    536e:	bf 93       	push	r27
    5370:	ef 93       	push	r30
    5372:	ff 93       	push	r31
    5374:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5378:	8e 2f       	mov	r24, r30
    537a:	90 e0       	ldi	r25, 0x00	; 0
    537c:	fc 01       	movw	r30, r24
    537e:	38 97       	sbiw	r30, 0x08	; 8
    5380:	e1 35       	cpi	r30, 0x51	; 81
    5382:	f1 05       	cpc	r31, r1
    5384:	08 f0       	brcs	.+2      	; 0x5388 <__vector_39+0x3a>
    5386:	75 c0       	rjmp	.+234    	; 0x5472 <__vector_39+0x124>
    5388:	88 27       	eor	r24, r24
    538a:	e4 58       	subi	r30, 0x84	; 132
    538c:	ff 4f       	sbci	r31, 0xFF	; 255
    538e:	8f 4f       	sbci	r24, 0xFF	; 255
    5390:	db c2       	rjmp	.+1462   	; 0x5948 <__tablejump2__>
    5392:	10 92 61 14 	sts	0x1461, r1	; 0x801461 <_index.1885>
    5396:	e0 91 61 14 	lds	r30, 0x1461	; 0x801461 <_index.1885>
    539a:	80 91 64 14 	lds	r24, 0x1464	; 0x801464 <_twiMessageLen>
    539e:	e8 17       	cp	r30, r24
    53a0:	70 f4       	brcc	.+28     	; 0x53be <__vector_39+0x70>
    53a2:	81 e0       	ldi	r24, 0x01	; 1
    53a4:	8e 0f       	add	r24, r30
    53a6:	80 93 61 14 	sts	0x1461, r24	; 0x801461 <_index.1885>
    53aa:	f0 e0       	ldi	r31, 0x00	; 0
    53ac:	eb 59       	subi	r30, 0x9B	; 155
    53ae:	fb 4e       	sbci	r31, 0xEB	; 235
    53b0:	80 81       	ld	r24, Z
    53b2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    53b6:	85 e8       	ldi	r24, 0x85	; 133
    53b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    53bc:	72 c0       	rjmp	.+228    	; 0x54a2 <__vector_39+0x154>
    53be:	84 e9       	ldi	r24, 0x94	; 148
    53c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    53c4:	80 91 62 14 	lds	r24, 0x1462	; 0x801462 <_twiCurrentHandler>
    53c8:	90 91 63 14 	lds	r25, 0x1463	; 0x801463 <_twiCurrentHandler+0x1>
    53cc:	dc 01       	movw	r26, r24
    53ce:	12 96       	adiw	r26, 0x02	; 2
    53d0:	ed 91       	ld	r30, X+
    53d2:	fc 91       	ld	r31, X
    53d4:	13 97       	sbiw	r26, 0x03	; 3
    53d6:	30 97       	sbiw	r30, 0x00	; 0
    53d8:	09 f4       	brne	.+2      	; 0x53dc <__vector_39+0x8e>
    53da:	63 c0       	rjmp	.+198    	; 0x54a2 <__vector_39+0x154>
    53dc:	20 e0       	ldi	r18, 0x00	; 0
    53de:	40 e0       	ldi	r20, 0x00	; 0
    53e0:	50 e0       	ldi	r21, 0x00	; 0
    53e2:	64 e0       	ldi	r22, 0x04	; 4
    53e4:	19 95       	eicall
    53e6:	5d c0       	rjmp	.+186    	; 0x54a2 <__vector_39+0x154>
    53e8:	e0 91 61 14 	lds	r30, 0x1461	; 0x801461 <_index.1885>
    53ec:	81 e0       	ldi	r24, 0x01	; 1
    53ee:	8e 0f       	add	r24, r30
    53f0:	80 93 61 14 	sts	0x1461, r24	; 0x801461 <_index.1885>
    53f4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    53f8:	f0 e0       	ldi	r31, 0x00	; 0
    53fa:	eb 59       	subi	r30, 0x9B	; 155
    53fc:	fb 4e       	sbci	r31, 0xEB	; 235
    53fe:	80 83       	st	Z, r24
    5400:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5404:	80 34       	cpi	r24, 0x40	; 64
    5406:	11 f4       	brne	.+4      	; 0x540c <__vector_39+0xbe>
    5408:	10 92 61 14 	sts	0x1461, r1	; 0x801461 <_index.1885>
    540c:	20 91 61 14 	lds	r18, 0x1461	; 0x801461 <_index.1885>
    5410:	30 e0       	ldi	r19, 0x00	; 0
    5412:	80 91 64 14 	lds	r24, 0x1464	; 0x801464 <_twiMessageLen>
    5416:	90 e0       	ldi	r25, 0x00	; 0
    5418:	01 97       	sbiw	r24, 0x01	; 1
    541a:	28 17       	cp	r18, r24
    541c:	39 07       	cpc	r19, r25
    541e:	24 f4       	brge	.+8      	; 0x5428 <__vector_39+0xda>
    5420:	85 ec       	ldi	r24, 0xC5	; 197
    5422:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5426:	3d c0       	rjmp	.+122    	; 0x54a2 <__vector_39+0x154>
    5428:	85 e8       	ldi	r24, 0x85	; 133
    542a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    542e:	39 c0       	rjmp	.+114    	; 0x54a2 <__vector_39+0x154>
    5430:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5434:	e0 91 61 14 	lds	r30, 0x1461	; 0x801461 <_index.1885>
    5438:	f0 e0       	ldi	r31, 0x00	; 0
    543a:	eb 59       	subi	r30, 0x9B	; 155
    543c:	fb 4e       	sbci	r31, 0xEB	; 235
    543e:	80 83       	st	Z, r24
    5440:	84 e9       	ldi	r24, 0x94	; 148
    5442:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5446:	80 91 62 14 	lds	r24, 0x1462	; 0x801462 <_twiCurrentHandler>
    544a:	90 91 63 14 	lds	r25, 0x1463	; 0x801463 <_twiCurrentHandler+0x1>
    544e:	dc 01       	movw	r26, r24
    5450:	12 96       	adiw	r26, 0x02	; 2
    5452:	ed 91       	ld	r30, X+
    5454:	fc 91       	ld	r31, X
    5456:	13 97       	sbiw	r26, 0x03	; 3
    5458:	30 97       	sbiw	r30, 0x00	; 0
    545a:	19 f1       	breq	.+70     	; 0x54a2 <__vector_39+0x154>
    545c:	20 91 64 14 	lds	r18, 0x1464	; 0x801464 <_twiMessageLen>
    5460:	45 e6       	ldi	r20, 0x65	; 101
    5462:	54 e1       	ldi	r21, 0x14	; 20
    5464:	65 e0       	ldi	r22, 0x05	; 5
    5466:	19 95       	eicall
    5468:	1c c0       	rjmp	.+56     	; 0x54a2 <__vector_39+0x154>
    546a:	85 ea       	ldi	r24, 0xA5	; 165
    546c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5470:	18 c0       	rjmp	.+48     	; 0x54a2 <__vector_39+0x154>
    5472:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5476:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    547a:	84 e0       	ldi	r24, 0x04	; 4
    547c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5480:	80 91 62 14 	lds	r24, 0x1462	; 0x801462 <_twiCurrentHandler>
    5484:	90 91 63 14 	lds	r25, 0x1463	; 0x801463 <_twiCurrentHandler+0x1>
    5488:	dc 01       	movw	r26, r24
    548a:	12 96       	adiw	r26, 0x02	; 2
    548c:	ed 91       	ld	r30, X+
    548e:	fc 91       	ld	r31, X
    5490:	13 97       	sbiw	r26, 0x03	; 3
    5492:	30 97       	sbiw	r30, 0x00	; 0
    5494:	31 f0       	breq	.+12     	; 0x54a2 <__vector_39+0x154>
    5496:	20 e0       	ldi	r18, 0x00	; 0
    5498:	40 e0       	ldi	r20, 0x00	; 0
    549a:	50 e0       	ldi	r21, 0x00	; 0
    549c:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    54a0:	19 95       	eicall
    54a2:	ff 91       	pop	r31
    54a4:	ef 91       	pop	r30
    54a6:	bf 91       	pop	r27
    54a8:	af 91       	pop	r26
    54aa:	9f 91       	pop	r25
    54ac:	8f 91       	pop	r24
    54ae:	7f 91       	pop	r23
    54b0:	6f 91       	pop	r22
    54b2:	5f 91       	pop	r21
    54b4:	4f 91       	pop	r20
    54b6:	3f 91       	pop	r19
    54b8:	2f 91       	pop	r18
    54ba:	0f 90       	pop	r0
    54bc:	0b be       	out	0x3b, r0	; 59
    54be:	0f 90       	pop	r0
    54c0:	0f be       	out	0x3f, r0	; 63
    54c2:	0f 90       	pop	r0
    54c4:	1f 90       	pop	r1
    54c6:	18 95       	reti

000054c8 <fifo_init>:
    54c8:	fc 01       	movw	r30, r24
    54ca:	41 11       	cpse	r20, r1
    54cc:	01 c0       	rjmp	.+2      	; 0x54d0 <fifo_init+0x8>
    54ce:	88 d3       	rcall	.+1808   	; 0x5be0 <abort>
    54d0:	84 2f       	mov	r24, r20
    54d2:	90 e0       	ldi	r25, 0x00	; 0
    54d4:	9c 01       	movw	r18, r24
    54d6:	21 50       	subi	r18, 0x01	; 1
    54d8:	31 09       	sbc	r19, r1
    54da:	82 23       	and	r24, r18
    54dc:	93 23       	and	r25, r19
    54de:	89 2b       	or	r24, r25
    54e0:	09 f0       	breq	.+2      	; 0x54e4 <fifo_init+0x1c>
    54e2:	7e d3       	rcall	.+1788   	; 0x5be0 <abort>
    54e4:	41 38       	cpi	r20, 0x81	; 129
    54e6:	08 f0       	brcs	.+2      	; 0x54ea <fifo_init+0x22>
    54e8:	7b d3       	rcall	.+1782   	; 0x5be0 <abort>
    54ea:	12 82       	std	Z+2, r1	; 0x02
    54ec:	13 82       	std	Z+3, r1	; 0x03
    54ee:	44 83       	std	Z+4, r20	; 0x04
    54f0:	44 0f       	add	r20, r20
    54f2:	41 50       	subi	r20, 0x01	; 1
    54f4:	45 83       	std	Z+5, r20	; 0x05
    54f6:	71 83       	std	Z+1, r23	; 0x01
    54f8:	60 83       	st	Z, r22
    54fa:	80 e0       	ldi	r24, 0x00	; 0
    54fc:	90 e0       	ldi	r25, 0x00	; 0
    54fe:	08 95       	ret

00005500 <__subsf3>:
    5500:	50 58       	subi	r21, 0x80	; 128

00005502 <__addsf3>:
    5502:	bb 27       	eor	r27, r27
    5504:	aa 27       	eor	r26, r26
    5506:	0e d0       	rcall	.+28     	; 0x5524 <__addsf3x>
    5508:	4d c1       	rjmp	.+666    	; 0x57a4 <__fp_round>
    550a:	3e d1       	rcall	.+636    	; 0x5788 <__fp_pscA>
    550c:	30 f0       	brcs	.+12     	; 0x551a <__addsf3+0x18>
    550e:	43 d1       	rcall	.+646    	; 0x5796 <__fp_pscB>
    5510:	20 f0       	brcs	.+8      	; 0x551a <__addsf3+0x18>
    5512:	31 f4       	brne	.+12     	; 0x5520 <__addsf3+0x1e>
    5514:	9f 3f       	cpi	r25, 0xFF	; 255
    5516:	11 f4       	brne	.+4      	; 0x551c <__addsf3+0x1a>
    5518:	1e f4       	brtc	.+6      	; 0x5520 <__addsf3+0x1e>
    551a:	33 c1       	rjmp	.+614    	; 0x5782 <__fp_nan>
    551c:	0e f4       	brtc	.+2      	; 0x5520 <__addsf3+0x1e>
    551e:	e0 95       	com	r30
    5520:	e7 fb       	bst	r30, 7
    5522:	29 c1       	rjmp	.+594    	; 0x5776 <__fp_inf>

00005524 <__addsf3x>:
    5524:	e9 2f       	mov	r30, r25
    5526:	4f d1       	rcall	.+670    	; 0x57c6 <__fp_split3>
    5528:	80 f3       	brcs	.-32     	; 0x550a <__addsf3+0x8>
    552a:	ba 17       	cp	r27, r26
    552c:	62 07       	cpc	r22, r18
    552e:	73 07       	cpc	r23, r19
    5530:	84 07       	cpc	r24, r20
    5532:	95 07       	cpc	r25, r21
    5534:	18 f0       	brcs	.+6      	; 0x553c <__addsf3x+0x18>
    5536:	71 f4       	brne	.+28     	; 0x5554 <__addsf3x+0x30>
    5538:	9e f5       	brtc	.+102    	; 0x55a0 <__addsf3x+0x7c>
    553a:	67 c1       	rjmp	.+718    	; 0x580a <__fp_zero>
    553c:	0e f4       	brtc	.+2      	; 0x5540 <__addsf3x+0x1c>
    553e:	e0 95       	com	r30
    5540:	0b 2e       	mov	r0, r27
    5542:	ba 2f       	mov	r27, r26
    5544:	a0 2d       	mov	r26, r0
    5546:	0b 01       	movw	r0, r22
    5548:	b9 01       	movw	r22, r18
    554a:	90 01       	movw	r18, r0
    554c:	0c 01       	movw	r0, r24
    554e:	ca 01       	movw	r24, r20
    5550:	a0 01       	movw	r20, r0
    5552:	11 24       	eor	r1, r1
    5554:	ff 27       	eor	r31, r31
    5556:	59 1b       	sub	r21, r25
    5558:	99 f0       	breq	.+38     	; 0x5580 <__addsf3x+0x5c>
    555a:	59 3f       	cpi	r21, 0xF9	; 249
    555c:	50 f4       	brcc	.+20     	; 0x5572 <__addsf3x+0x4e>
    555e:	50 3e       	cpi	r21, 0xE0	; 224
    5560:	68 f1       	brcs	.+90     	; 0x55bc <__addsf3x+0x98>
    5562:	1a 16       	cp	r1, r26
    5564:	f0 40       	sbci	r31, 0x00	; 0
    5566:	a2 2f       	mov	r26, r18
    5568:	23 2f       	mov	r18, r19
    556a:	34 2f       	mov	r19, r20
    556c:	44 27       	eor	r20, r20
    556e:	58 5f       	subi	r21, 0xF8	; 248
    5570:	f3 cf       	rjmp	.-26     	; 0x5558 <__addsf3x+0x34>
    5572:	46 95       	lsr	r20
    5574:	37 95       	ror	r19
    5576:	27 95       	ror	r18
    5578:	a7 95       	ror	r26
    557a:	f0 40       	sbci	r31, 0x00	; 0
    557c:	53 95       	inc	r21
    557e:	c9 f7       	brne	.-14     	; 0x5572 <__addsf3x+0x4e>
    5580:	7e f4       	brtc	.+30     	; 0x55a0 <__addsf3x+0x7c>
    5582:	1f 16       	cp	r1, r31
    5584:	ba 0b       	sbc	r27, r26
    5586:	62 0b       	sbc	r22, r18
    5588:	73 0b       	sbc	r23, r19
    558a:	84 0b       	sbc	r24, r20
    558c:	ba f0       	brmi	.+46     	; 0x55bc <__addsf3x+0x98>
    558e:	91 50       	subi	r25, 0x01	; 1
    5590:	a1 f0       	breq	.+40     	; 0x55ba <__addsf3x+0x96>
    5592:	ff 0f       	add	r31, r31
    5594:	bb 1f       	adc	r27, r27
    5596:	66 1f       	adc	r22, r22
    5598:	77 1f       	adc	r23, r23
    559a:	88 1f       	adc	r24, r24
    559c:	c2 f7       	brpl	.-16     	; 0x558e <__addsf3x+0x6a>
    559e:	0e c0       	rjmp	.+28     	; 0x55bc <__addsf3x+0x98>
    55a0:	ba 0f       	add	r27, r26
    55a2:	62 1f       	adc	r22, r18
    55a4:	73 1f       	adc	r23, r19
    55a6:	84 1f       	adc	r24, r20
    55a8:	48 f4       	brcc	.+18     	; 0x55bc <__addsf3x+0x98>
    55aa:	87 95       	ror	r24
    55ac:	77 95       	ror	r23
    55ae:	67 95       	ror	r22
    55b0:	b7 95       	ror	r27
    55b2:	f7 95       	ror	r31
    55b4:	9e 3f       	cpi	r25, 0xFE	; 254
    55b6:	08 f0       	brcs	.+2      	; 0x55ba <__addsf3x+0x96>
    55b8:	b3 cf       	rjmp	.-154    	; 0x5520 <__addsf3+0x1e>
    55ba:	93 95       	inc	r25
    55bc:	88 0f       	add	r24, r24
    55be:	08 f0       	brcs	.+2      	; 0x55c2 <__addsf3x+0x9e>
    55c0:	99 27       	eor	r25, r25
    55c2:	ee 0f       	add	r30, r30
    55c4:	97 95       	ror	r25
    55c6:	87 95       	ror	r24
    55c8:	08 95       	ret

000055ca <__divsf3>:
    55ca:	0c d0       	rcall	.+24     	; 0x55e4 <__divsf3x>
    55cc:	eb c0       	rjmp	.+470    	; 0x57a4 <__fp_round>
    55ce:	e3 d0       	rcall	.+454    	; 0x5796 <__fp_pscB>
    55d0:	40 f0       	brcs	.+16     	; 0x55e2 <__divsf3+0x18>
    55d2:	da d0       	rcall	.+436    	; 0x5788 <__fp_pscA>
    55d4:	30 f0       	brcs	.+12     	; 0x55e2 <__divsf3+0x18>
    55d6:	21 f4       	brne	.+8      	; 0x55e0 <__divsf3+0x16>
    55d8:	5f 3f       	cpi	r21, 0xFF	; 255
    55da:	19 f0       	breq	.+6      	; 0x55e2 <__divsf3+0x18>
    55dc:	cc c0       	rjmp	.+408    	; 0x5776 <__fp_inf>
    55de:	51 11       	cpse	r21, r1
    55e0:	15 c1       	rjmp	.+554    	; 0x580c <__fp_szero>
    55e2:	cf c0       	rjmp	.+414    	; 0x5782 <__fp_nan>

000055e4 <__divsf3x>:
    55e4:	f0 d0       	rcall	.+480    	; 0x57c6 <__fp_split3>
    55e6:	98 f3       	brcs	.-26     	; 0x55ce <__divsf3+0x4>

000055e8 <__divsf3_pse>:
    55e8:	99 23       	and	r25, r25
    55ea:	c9 f3       	breq	.-14     	; 0x55de <__divsf3+0x14>
    55ec:	55 23       	and	r21, r21
    55ee:	b1 f3       	breq	.-20     	; 0x55dc <__divsf3+0x12>
    55f0:	95 1b       	sub	r25, r21
    55f2:	55 0b       	sbc	r21, r21
    55f4:	bb 27       	eor	r27, r27
    55f6:	aa 27       	eor	r26, r26
    55f8:	62 17       	cp	r22, r18
    55fa:	73 07       	cpc	r23, r19
    55fc:	84 07       	cpc	r24, r20
    55fe:	38 f0       	brcs	.+14     	; 0x560e <__divsf3_pse+0x26>
    5600:	9f 5f       	subi	r25, 0xFF	; 255
    5602:	5f 4f       	sbci	r21, 0xFF	; 255
    5604:	22 0f       	add	r18, r18
    5606:	33 1f       	adc	r19, r19
    5608:	44 1f       	adc	r20, r20
    560a:	aa 1f       	adc	r26, r26
    560c:	a9 f3       	breq	.-22     	; 0x55f8 <__divsf3_pse+0x10>
    560e:	33 d0       	rcall	.+102    	; 0x5676 <__divsf3_pse+0x8e>
    5610:	0e 2e       	mov	r0, r30
    5612:	3a f0       	brmi	.+14     	; 0x5622 <__divsf3_pse+0x3a>
    5614:	e0 e8       	ldi	r30, 0x80	; 128
    5616:	30 d0       	rcall	.+96     	; 0x5678 <__divsf3_pse+0x90>
    5618:	91 50       	subi	r25, 0x01	; 1
    561a:	50 40       	sbci	r21, 0x00	; 0
    561c:	e6 95       	lsr	r30
    561e:	00 1c       	adc	r0, r0
    5620:	ca f7       	brpl	.-14     	; 0x5614 <__divsf3_pse+0x2c>
    5622:	29 d0       	rcall	.+82     	; 0x5676 <__divsf3_pse+0x8e>
    5624:	fe 2f       	mov	r31, r30
    5626:	27 d0       	rcall	.+78     	; 0x5676 <__divsf3_pse+0x8e>
    5628:	66 0f       	add	r22, r22
    562a:	77 1f       	adc	r23, r23
    562c:	88 1f       	adc	r24, r24
    562e:	bb 1f       	adc	r27, r27
    5630:	26 17       	cp	r18, r22
    5632:	37 07       	cpc	r19, r23
    5634:	48 07       	cpc	r20, r24
    5636:	ab 07       	cpc	r26, r27
    5638:	b0 e8       	ldi	r27, 0x80	; 128
    563a:	09 f0       	breq	.+2      	; 0x563e <__divsf3_pse+0x56>
    563c:	bb 0b       	sbc	r27, r27
    563e:	80 2d       	mov	r24, r0
    5640:	bf 01       	movw	r22, r30
    5642:	ff 27       	eor	r31, r31
    5644:	93 58       	subi	r25, 0x83	; 131
    5646:	5f 4f       	sbci	r21, 0xFF	; 255
    5648:	2a f0       	brmi	.+10     	; 0x5654 <__divsf3_pse+0x6c>
    564a:	9e 3f       	cpi	r25, 0xFE	; 254
    564c:	51 05       	cpc	r21, r1
    564e:	68 f0       	brcs	.+26     	; 0x566a <__divsf3_pse+0x82>
    5650:	92 c0       	rjmp	.+292    	; 0x5776 <__fp_inf>
    5652:	dc c0       	rjmp	.+440    	; 0x580c <__fp_szero>
    5654:	5f 3f       	cpi	r21, 0xFF	; 255
    5656:	ec f3       	brlt	.-6      	; 0x5652 <__divsf3_pse+0x6a>
    5658:	98 3e       	cpi	r25, 0xE8	; 232
    565a:	dc f3       	brlt	.-10     	; 0x5652 <__divsf3_pse+0x6a>
    565c:	86 95       	lsr	r24
    565e:	77 95       	ror	r23
    5660:	67 95       	ror	r22
    5662:	b7 95       	ror	r27
    5664:	f7 95       	ror	r31
    5666:	9f 5f       	subi	r25, 0xFF	; 255
    5668:	c9 f7       	brne	.-14     	; 0x565c <__divsf3_pse+0x74>
    566a:	88 0f       	add	r24, r24
    566c:	91 1d       	adc	r25, r1
    566e:	96 95       	lsr	r25
    5670:	87 95       	ror	r24
    5672:	97 f9       	bld	r25, 7
    5674:	08 95       	ret
    5676:	e1 e0       	ldi	r30, 0x01	; 1
    5678:	66 0f       	add	r22, r22
    567a:	77 1f       	adc	r23, r23
    567c:	88 1f       	adc	r24, r24
    567e:	bb 1f       	adc	r27, r27
    5680:	62 17       	cp	r22, r18
    5682:	73 07       	cpc	r23, r19
    5684:	84 07       	cpc	r24, r20
    5686:	ba 07       	cpc	r27, r26
    5688:	20 f0       	brcs	.+8      	; 0x5692 <__divsf3_pse+0xaa>
    568a:	62 1b       	sub	r22, r18
    568c:	73 0b       	sbc	r23, r19
    568e:	84 0b       	sbc	r24, r20
    5690:	ba 0b       	sbc	r27, r26
    5692:	ee 1f       	adc	r30, r30
    5694:	88 f7       	brcc	.-30     	; 0x5678 <__divsf3_pse+0x90>
    5696:	e0 95       	com	r30
    5698:	08 95       	ret

0000569a <__fixsfsi>:
    569a:	04 d0       	rcall	.+8      	; 0x56a4 <__fixunssfsi>
    569c:	68 94       	set
    569e:	b1 11       	cpse	r27, r1
    56a0:	b5 c0       	rjmp	.+362    	; 0x580c <__fp_szero>
    56a2:	08 95       	ret

000056a4 <__fixunssfsi>:
    56a4:	98 d0       	rcall	.+304    	; 0x57d6 <__fp_splitA>
    56a6:	88 f0       	brcs	.+34     	; 0x56ca <__fixunssfsi+0x26>
    56a8:	9f 57       	subi	r25, 0x7F	; 127
    56aa:	90 f0       	brcs	.+36     	; 0x56d0 <__fixunssfsi+0x2c>
    56ac:	b9 2f       	mov	r27, r25
    56ae:	99 27       	eor	r25, r25
    56b0:	b7 51       	subi	r27, 0x17	; 23
    56b2:	a0 f0       	brcs	.+40     	; 0x56dc <__fixunssfsi+0x38>
    56b4:	d1 f0       	breq	.+52     	; 0x56ea <__fixunssfsi+0x46>
    56b6:	66 0f       	add	r22, r22
    56b8:	77 1f       	adc	r23, r23
    56ba:	88 1f       	adc	r24, r24
    56bc:	99 1f       	adc	r25, r25
    56be:	1a f0       	brmi	.+6      	; 0x56c6 <__fixunssfsi+0x22>
    56c0:	ba 95       	dec	r27
    56c2:	c9 f7       	brne	.-14     	; 0x56b6 <__fixunssfsi+0x12>
    56c4:	12 c0       	rjmp	.+36     	; 0x56ea <__fixunssfsi+0x46>
    56c6:	b1 30       	cpi	r27, 0x01	; 1
    56c8:	81 f0       	breq	.+32     	; 0x56ea <__fixunssfsi+0x46>
    56ca:	9f d0       	rcall	.+318    	; 0x580a <__fp_zero>
    56cc:	b1 e0       	ldi	r27, 0x01	; 1
    56ce:	08 95       	ret
    56d0:	9c c0       	rjmp	.+312    	; 0x580a <__fp_zero>
    56d2:	67 2f       	mov	r22, r23
    56d4:	78 2f       	mov	r23, r24
    56d6:	88 27       	eor	r24, r24
    56d8:	b8 5f       	subi	r27, 0xF8	; 248
    56da:	39 f0       	breq	.+14     	; 0x56ea <__fixunssfsi+0x46>
    56dc:	b9 3f       	cpi	r27, 0xF9	; 249
    56de:	cc f3       	brlt	.-14     	; 0x56d2 <__fixunssfsi+0x2e>
    56e0:	86 95       	lsr	r24
    56e2:	77 95       	ror	r23
    56e4:	67 95       	ror	r22
    56e6:	b3 95       	inc	r27
    56e8:	d9 f7       	brne	.-10     	; 0x56e0 <__fixunssfsi+0x3c>
    56ea:	3e f4       	brtc	.+14     	; 0x56fa <__fixunssfsi+0x56>
    56ec:	90 95       	com	r25
    56ee:	80 95       	com	r24
    56f0:	70 95       	com	r23
    56f2:	61 95       	neg	r22
    56f4:	7f 4f       	sbci	r23, 0xFF	; 255
    56f6:	8f 4f       	sbci	r24, 0xFF	; 255
    56f8:	9f 4f       	sbci	r25, 0xFF	; 255
    56fa:	08 95       	ret

000056fc <__floatunsisf>:
    56fc:	e8 94       	clt
    56fe:	09 c0       	rjmp	.+18     	; 0x5712 <__floatsisf+0x12>

00005700 <__floatsisf>:
    5700:	97 fb       	bst	r25, 7
    5702:	3e f4       	brtc	.+14     	; 0x5712 <__floatsisf+0x12>
    5704:	90 95       	com	r25
    5706:	80 95       	com	r24
    5708:	70 95       	com	r23
    570a:	61 95       	neg	r22
    570c:	7f 4f       	sbci	r23, 0xFF	; 255
    570e:	8f 4f       	sbci	r24, 0xFF	; 255
    5710:	9f 4f       	sbci	r25, 0xFF	; 255
    5712:	99 23       	and	r25, r25
    5714:	a9 f0       	breq	.+42     	; 0x5740 <__floatsisf+0x40>
    5716:	f9 2f       	mov	r31, r25
    5718:	96 e9       	ldi	r25, 0x96	; 150
    571a:	bb 27       	eor	r27, r27
    571c:	93 95       	inc	r25
    571e:	f6 95       	lsr	r31
    5720:	87 95       	ror	r24
    5722:	77 95       	ror	r23
    5724:	67 95       	ror	r22
    5726:	b7 95       	ror	r27
    5728:	f1 11       	cpse	r31, r1
    572a:	f8 cf       	rjmp	.-16     	; 0x571c <__floatsisf+0x1c>
    572c:	fa f4       	brpl	.+62     	; 0x576c <__floatsisf+0x6c>
    572e:	bb 0f       	add	r27, r27
    5730:	11 f4       	brne	.+4      	; 0x5736 <__floatsisf+0x36>
    5732:	60 ff       	sbrs	r22, 0
    5734:	1b c0       	rjmp	.+54     	; 0x576c <__floatsisf+0x6c>
    5736:	6f 5f       	subi	r22, 0xFF	; 255
    5738:	7f 4f       	sbci	r23, 0xFF	; 255
    573a:	8f 4f       	sbci	r24, 0xFF	; 255
    573c:	9f 4f       	sbci	r25, 0xFF	; 255
    573e:	16 c0       	rjmp	.+44     	; 0x576c <__floatsisf+0x6c>
    5740:	88 23       	and	r24, r24
    5742:	11 f0       	breq	.+4      	; 0x5748 <__floatsisf+0x48>
    5744:	96 e9       	ldi	r25, 0x96	; 150
    5746:	11 c0       	rjmp	.+34     	; 0x576a <__floatsisf+0x6a>
    5748:	77 23       	and	r23, r23
    574a:	21 f0       	breq	.+8      	; 0x5754 <__floatsisf+0x54>
    574c:	9e e8       	ldi	r25, 0x8E	; 142
    574e:	87 2f       	mov	r24, r23
    5750:	76 2f       	mov	r23, r22
    5752:	05 c0       	rjmp	.+10     	; 0x575e <__floatsisf+0x5e>
    5754:	66 23       	and	r22, r22
    5756:	71 f0       	breq	.+28     	; 0x5774 <__floatsisf+0x74>
    5758:	96 e8       	ldi	r25, 0x86	; 134
    575a:	86 2f       	mov	r24, r22
    575c:	70 e0       	ldi	r23, 0x00	; 0
    575e:	60 e0       	ldi	r22, 0x00	; 0
    5760:	2a f0       	brmi	.+10     	; 0x576c <__floatsisf+0x6c>
    5762:	9a 95       	dec	r25
    5764:	66 0f       	add	r22, r22
    5766:	77 1f       	adc	r23, r23
    5768:	88 1f       	adc	r24, r24
    576a:	da f7       	brpl	.-10     	; 0x5762 <__floatsisf+0x62>
    576c:	88 0f       	add	r24, r24
    576e:	96 95       	lsr	r25
    5770:	87 95       	ror	r24
    5772:	97 f9       	bld	r25, 7
    5774:	08 95       	ret

00005776 <__fp_inf>:
    5776:	97 f9       	bld	r25, 7
    5778:	9f 67       	ori	r25, 0x7F	; 127
    577a:	80 e8       	ldi	r24, 0x80	; 128
    577c:	70 e0       	ldi	r23, 0x00	; 0
    577e:	60 e0       	ldi	r22, 0x00	; 0
    5780:	08 95       	ret

00005782 <__fp_nan>:
    5782:	9f ef       	ldi	r25, 0xFF	; 255
    5784:	80 ec       	ldi	r24, 0xC0	; 192
    5786:	08 95       	ret

00005788 <__fp_pscA>:
    5788:	00 24       	eor	r0, r0
    578a:	0a 94       	dec	r0
    578c:	16 16       	cp	r1, r22
    578e:	17 06       	cpc	r1, r23
    5790:	18 06       	cpc	r1, r24
    5792:	09 06       	cpc	r0, r25
    5794:	08 95       	ret

00005796 <__fp_pscB>:
    5796:	00 24       	eor	r0, r0
    5798:	0a 94       	dec	r0
    579a:	12 16       	cp	r1, r18
    579c:	13 06       	cpc	r1, r19
    579e:	14 06       	cpc	r1, r20
    57a0:	05 06       	cpc	r0, r21
    57a2:	08 95       	ret

000057a4 <__fp_round>:
    57a4:	09 2e       	mov	r0, r25
    57a6:	03 94       	inc	r0
    57a8:	00 0c       	add	r0, r0
    57aa:	11 f4       	brne	.+4      	; 0x57b0 <__fp_round+0xc>
    57ac:	88 23       	and	r24, r24
    57ae:	52 f0       	brmi	.+20     	; 0x57c4 <__fp_round+0x20>
    57b0:	bb 0f       	add	r27, r27
    57b2:	40 f4       	brcc	.+16     	; 0x57c4 <__fp_round+0x20>
    57b4:	bf 2b       	or	r27, r31
    57b6:	11 f4       	brne	.+4      	; 0x57bc <__fp_round+0x18>
    57b8:	60 ff       	sbrs	r22, 0
    57ba:	04 c0       	rjmp	.+8      	; 0x57c4 <__fp_round+0x20>
    57bc:	6f 5f       	subi	r22, 0xFF	; 255
    57be:	7f 4f       	sbci	r23, 0xFF	; 255
    57c0:	8f 4f       	sbci	r24, 0xFF	; 255
    57c2:	9f 4f       	sbci	r25, 0xFF	; 255
    57c4:	08 95       	ret

000057c6 <__fp_split3>:
    57c6:	57 fd       	sbrc	r21, 7
    57c8:	90 58       	subi	r25, 0x80	; 128
    57ca:	44 0f       	add	r20, r20
    57cc:	55 1f       	adc	r21, r21
    57ce:	59 f0       	breq	.+22     	; 0x57e6 <__fp_splitA+0x10>
    57d0:	5f 3f       	cpi	r21, 0xFF	; 255
    57d2:	71 f0       	breq	.+28     	; 0x57f0 <__fp_splitA+0x1a>
    57d4:	47 95       	ror	r20

000057d6 <__fp_splitA>:
    57d6:	88 0f       	add	r24, r24
    57d8:	97 fb       	bst	r25, 7
    57da:	99 1f       	adc	r25, r25
    57dc:	61 f0       	breq	.+24     	; 0x57f6 <__fp_splitA+0x20>
    57de:	9f 3f       	cpi	r25, 0xFF	; 255
    57e0:	79 f0       	breq	.+30     	; 0x5800 <__fp_splitA+0x2a>
    57e2:	87 95       	ror	r24
    57e4:	08 95       	ret
    57e6:	12 16       	cp	r1, r18
    57e8:	13 06       	cpc	r1, r19
    57ea:	14 06       	cpc	r1, r20
    57ec:	55 1f       	adc	r21, r21
    57ee:	f2 cf       	rjmp	.-28     	; 0x57d4 <__fp_split3+0xe>
    57f0:	46 95       	lsr	r20
    57f2:	f1 df       	rcall	.-30     	; 0x57d6 <__fp_splitA>
    57f4:	08 c0       	rjmp	.+16     	; 0x5806 <__fp_splitA+0x30>
    57f6:	16 16       	cp	r1, r22
    57f8:	17 06       	cpc	r1, r23
    57fa:	18 06       	cpc	r1, r24
    57fc:	99 1f       	adc	r25, r25
    57fe:	f1 cf       	rjmp	.-30     	; 0x57e2 <__fp_splitA+0xc>
    5800:	86 95       	lsr	r24
    5802:	71 05       	cpc	r23, r1
    5804:	61 05       	cpc	r22, r1
    5806:	08 94       	sec
    5808:	08 95       	ret

0000580a <__fp_zero>:
    580a:	e8 94       	clt

0000580c <__fp_szero>:
    580c:	bb 27       	eor	r27, r27
    580e:	66 27       	eor	r22, r22
    5810:	77 27       	eor	r23, r23
    5812:	cb 01       	movw	r24, r22
    5814:	97 f9       	bld	r25, 7
    5816:	08 95       	ret

00005818 <__mulsf3>:
    5818:	0b d0       	rcall	.+22     	; 0x5830 <__mulsf3x>
    581a:	c4 cf       	rjmp	.-120    	; 0x57a4 <__fp_round>
    581c:	b5 df       	rcall	.-150    	; 0x5788 <__fp_pscA>
    581e:	28 f0       	brcs	.+10     	; 0x582a <__mulsf3+0x12>
    5820:	ba df       	rcall	.-140    	; 0x5796 <__fp_pscB>
    5822:	18 f0       	brcs	.+6      	; 0x582a <__mulsf3+0x12>
    5824:	95 23       	and	r25, r21
    5826:	09 f0       	breq	.+2      	; 0x582a <__mulsf3+0x12>
    5828:	a6 cf       	rjmp	.-180    	; 0x5776 <__fp_inf>
    582a:	ab cf       	rjmp	.-170    	; 0x5782 <__fp_nan>
    582c:	11 24       	eor	r1, r1
    582e:	ee cf       	rjmp	.-36     	; 0x580c <__fp_szero>

00005830 <__mulsf3x>:
    5830:	ca df       	rcall	.-108    	; 0x57c6 <__fp_split3>
    5832:	a0 f3       	brcs	.-24     	; 0x581c <__mulsf3+0x4>

00005834 <__mulsf3_pse>:
    5834:	95 9f       	mul	r25, r21
    5836:	d1 f3       	breq	.-12     	; 0x582c <__mulsf3+0x14>
    5838:	95 0f       	add	r25, r21
    583a:	50 e0       	ldi	r21, 0x00	; 0
    583c:	55 1f       	adc	r21, r21
    583e:	62 9f       	mul	r22, r18
    5840:	f0 01       	movw	r30, r0
    5842:	72 9f       	mul	r23, r18
    5844:	bb 27       	eor	r27, r27
    5846:	f0 0d       	add	r31, r0
    5848:	b1 1d       	adc	r27, r1
    584a:	63 9f       	mul	r22, r19
    584c:	aa 27       	eor	r26, r26
    584e:	f0 0d       	add	r31, r0
    5850:	b1 1d       	adc	r27, r1
    5852:	aa 1f       	adc	r26, r26
    5854:	64 9f       	mul	r22, r20
    5856:	66 27       	eor	r22, r22
    5858:	b0 0d       	add	r27, r0
    585a:	a1 1d       	adc	r26, r1
    585c:	66 1f       	adc	r22, r22
    585e:	82 9f       	mul	r24, r18
    5860:	22 27       	eor	r18, r18
    5862:	b0 0d       	add	r27, r0
    5864:	a1 1d       	adc	r26, r1
    5866:	62 1f       	adc	r22, r18
    5868:	73 9f       	mul	r23, r19
    586a:	b0 0d       	add	r27, r0
    586c:	a1 1d       	adc	r26, r1
    586e:	62 1f       	adc	r22, r18
    5870:	83 9f       	mul	r24, r19
    5872:	a0 0d       	add	r26, r0
    5874:	61 1d       	adc	r22, r1
    5876:	22 1f       	adc	r18, r18
    5878:	74 9f       	mul	r23, r20
    587a:	33 27       	eor	r19, r19
    587c:	a0 0d       	add	r26, r0
    587e:	61 1d       	adc	r22, r1
    5880:	23 1f       	adc	r18, r19
    5882:	84 9f       	mul	r24, r20
    5884:	60 0d       	add	r22, r0
    5886:	21 1d       	adc	r18, r1
    5888:	82 2f       	mov	r24, r18
    588a:	76 2f       	mov	r23, r22
    588c:	6a 2f       	mov	r22, r26
    588e:	11 24       	eor	r1, r1
    5890:	9f 57       	subi	r25, 0x7F	; 127
    5892:	50 40       	sbci	r21, 0x00	; 0
    5894:	8a f0       	brmi	.+34     	; 0x58b8 <__mulsf3_pse+0x84>
    5896:	e1 f0       	breq	.+56     	; 0x58d0 <__mulsf3_pse+0x9c>
    5898:	88 23       	and	r24, r24
    589a:	4a f0       	brmi	.+18     	; 0x58ae <__mulsf3_pse+0x7a>
    589c:	ee 0f       	add	r30, r30
    589e:	ff 1f       	adc	r31, r31
    58a0:	bb 1f       	adc	r27, r27
    58a2:	66 1f       	adc	r22, r22
    58a4:	77 1f       	adc	r23, r23
    58a6:	88 1f       	adc	r24, r24
    58a8:	91 50       	subi	r25, 0x01	; 1
    58aa:	50 40       	sbci	r21, 0x00	; 0
    58ac:	a9 f7       	brne	.-22     	; 0x5898 <__mulsf3_pse+0x64>
    58ae:	9e 3f       	cpi	r25, 0xFE	; 254
    58b0:	51 05       	cpc	r21, r1
    58b2:	70 f0       	brcs	.+28     	; 0x58d0 <__mulsf3_pse+0x9c>
    58b4:	60 cf       	rjmp	.-320    	; 0x5776 <__fp_inf>
    58b6:	aa cf       	rjmp	.-172    	; 0x580c <__fp_szero>
    58b8:	5f 3f       	cpi	r21, 0xFF	; 255
    58ba:	ec f3       	brlt	.-6      	; 0x58b6 <__mulsf3_pse+0x82>
    58bc:	98 3e       	cpi	r25, 0xE8	; 232
    58be:	dc f3       	brlt	.-10     	; 0x58b6 <__mulsf3_pse+0x82>
    58c0:	86 95       	lsr	r24
    58c2:	77 95       	ror	r23
    58c4:	67 95       	ror	r22
    58c6:	b7 95       	ror	r27
    58c8:	f7 95       	ror	r31
    58ca:	e7 95       	ror	r30
    58cc:	9f 5f       	subi	r25, 0xFF	; 255
    58ce:	c1 f7       	brne	.-16     	; 0x58c0 <__mulsf3_pse+0x8c>
    58d0:	fe 2b       	or	r31, r30
    58d2:	88 0f       	add	r24, r24
    58d4:	91 1d       	adc	r25, r1
    58d6:	96 95       	lsr	r25
    58d8:	87 95       	ror	r24
    58da:	97 f9       	bld	r25, 7
    58dc:	08 95       	ret

000058de <__divmodhi4>:
    58de:	97 fb       	bst	r25, 7
    58e0:	07 2e       	mov	r0, r23
    58e2:	16 f4       	brtc	.+4      	; 0x58e8 <__divmodhi4+0xa>
    58e4:	00 94       	com	r0
    58e6:	06 d0       	rcall	.+12     	; 0x58f4 <__divmodhi4_neg1>
    58e8:	77 fd       	sbrc	r23, 7
    58ea:	08 d0       	rcall	.+16     	; 0x58fc <__divmodhi4_neg2>
    58ec:	44 d0       	rcall	.+136    	; 0x5976 <__udivmodhi4>
    58ee:	07 fc       	sbrc	r0, 7
    58f0:	05 d0       	rcall	.+10     	; 0x58fc <__divmodhi4_neg2>
    58f2:	3e f4       	brtc	.+14     	; 0x5902 <__divmodhi4_exit>

000058f4 <__divmodhi4_neg1>:
    58f4:	90 95       	com	r25
    58f6:	81 95       	neg	r24
    58f8:	9f 4f       	sbci	r25, 0xFF	; 255
    58fa:	08 95       	ret

000058fc <__divmodhi4_neg2>:
    58fc:	70 95       	com	r23
    58fe:	61 95       	neg	r22
    5900:	7f 4f       	sbci	r23, 0xFF	; 255

00005902 <__divmodhi4_exit>:
    5902:	08 95       	ret

00005904 <__udivmodsi4>:
    5904:	a1 e2       	ldi	r26, 0x21	; 33
    5906:	1a 2e       	mov	r1, r26
    5908:	aa 1b       	sub	r26, r26
    590a:	bb 1b       	sub	r27, r27
    590c:	fd 01       	movw	r30, r26
    590e:	0d c0       	rjmp	.+26     	; 0x592a <__udivmodsi4_ep>

00005910 <__udivmodsi4_loop>:
    5910:	aa 1f       	adc	r26, r26
    5912:	bb 1f       	adc	r27, r27
    5914:	ee 1f       	adc	r30, r30
    5916:	ff 1f       	adc	r31, r31
    5918:	a2 17       	cp	r26, r18
    591a:	b3 07       	cpc	r27, r19
    591c:	e4 07       	cpc	r30, r20
    591e:	f5 07       	cpc	r31, r21
    5920:	20 f0       	brcs	.+8      	; 0x592a <__udivmodsi4_ep>
    5922:	a2 1b       	sub	r26, r18
    5924:	b3 0b       	sbc	r27, r19
    5926:	e4 0b       	sbc	r30, r20
    5928:	f5 0b       	sbc	r31, r21

0000592a <__udivmodsi4_ep>:
    592a:	66 1f       	adc	r22, r22
    592c:	77 1f       	adc	r23, r23
    592e:	88 1f       	adc	r24, r24
    5930:	99 1f       	adc	r25, r25
    5932:	1a 94       	dec	r1
    5934:	69 f7       	brne	.-38     	; 0x5910 <__udivmodsi4_loop>
    5936:	60 95       	com	r22
    5938:	70 95       	com	r23
    593a:	80 95       	com	r24
    593c:	90 95       	com	r25
    593e:	9b 01       	movw	r18, r22
    5940:	ac 01       	movw	r20, r24
    5942:	bd 01       	movw	r22, r26
    5944:	cf 01       	movw	r24, r30
    5946:	08 95       	ret

00005948 <__tablejump2__>:
    5948:	ee 0f       	add	r30, r30
    594a:	ff 1f       	adc	r31, r31
    594c:	88 1f       	adc	r24, r24
    594e:	8b bf       	out	0x3b, r24	; 59
    5950:	07 90       	elpm	r0, Z+
    5952:	f6 91       	elpm	r31, Z
    5954:	e0 2d       	mov	r30, r0
    5956:	19 94       	eijmp

00005958 <__umulhisi3>:
    5958:	a2 9f       	mul	r26, r18
    595a:	b0 01       	movw	r22, r0
    595c:	b3 9f       	mul	r27, r19
    595e:	c0 01       	movw	r24, r0
    5960:	a3 9f       	mul	r26, r19
    5962:	70 0d       	add	r23, r0
    5964:	81 1d       	adc	r24, r1
    5966:	11 24       	eor	r1, r1
    5968:	91 1d       	adc	r25, r1
    596a:	b2 9f       	mul	r27, r18
    596c:	70 0d       	add	r23, r0
    596e:	81 1d       	adc	r24, r1
    5970:	11 24       	eor	r1, r1
    5972:	91 1d       	adc	r25, r1
    5974:	08 95       	ret

00005976 <__udivmodhi4>:
    5976:	aa 1b       	sub	r26, r26
    5978:	bb 1b       	sub	r27, r27
    597a:	51 e1       	ldi	r21, 0x11	; 17
    597c:	07 c0       	rjmp	.+14     	; 0x598c <__udivmodhi4_ep>

0000597e <__udivmodhi4_loop>:
    597e:	aa 1f       	adc	r26, r26
    5980:	bb 1f       	adc	r27, r27
    5982:	a6 17       	cp	r26, r22
    5984:	b7 07       	cpc	r27, r23
    5986:	10 f0       	brcs	.+4      	; 0x598c <__udivmodhi4_ep>
    5988:	a6 1b       	sub	r26, r22
    598a:	b7 0b       	sbc	r27, r23

0000598c <__udivmodhi4_ep>:
    598c:	88 1f       	adc	r24, r24
    598e:	99 1f       	adc	r25, r25
    5990:	5a 95       	dec	r21
    5992:	a9 f7       	brne	.-22     	; 0x597e <__udivmodhi4_loop>
    5994:	80 95       	com	r24
    5996:	90 95       	com	r25
    5998:	bc 01       	movw	r22, r24
    599a:	cd 01       	movw	r24, r26
    599c:	08 95       	ret

0000599e <malloc>:
    599e:	0f 93       	push	r16
    59a0:	1f 93       	push	r17
    59a2:	cf 93       	push	r28
    59a4:	df 93       	push	r29
    59a6:	82 30       	cpi	r24, 0x02	; 2
    59a8:	91 05       	cpc	r25, r1
    59aa:	10 f4       	brcc	.+4      	; 0x59b0 <malloc+0x12>
    59ac:	82 e0       	ldi	r24, 0x02	; 2
    59ae:	90 e0       	ldi	r25, 0x00	; 0
    59b0:	e0 91 78 14 	lds	r30, 0x1478	; 0x801478 <__flp>
    59b4:	f0 91 79 14 	lds	r31, 0x1479	; 0x801479 <__flp+0x1>
    59b8:	20 e0       	ldi	r18, 0x00	; 0
    59ba:	30 e0       	ldi	r19, 0x00	; 0
    59bc:	a0 e0       	ldi	r26, 0x00	; 0
    59be:	b0 e0       	ldi	r27, 0x00	; 0
    59c0:	30 97       	sbiw	r30, 0x00	; 0
    59c2:	19 f1       	breq	.+70     	; 0x5a0a <malloc+0x6c>
    59c4:	40 81       	ld	r20, Z
    59c6:	51 81       	ldd	r21, Z+1	; 0x01
    59c8:	02 81       	ldd	r16, Z+2	; 0x02
    59ca:	13 81       	ldd	r17, Z+3	; 0x03
    59cc:	48 17       	cp	r20, r24
    59ce:	59 07       	cpc	r21, r25
    59d0:	c8 f0       	brcs	.+50     	; 0x5a04 <malloc+0x66>
    59d2:	84 17       	cp	r24, r20
    59d4:	95 07       	cpc	r25, r21
    59d6:	69 f4       	brne	.+26     	; 0x59f2 <malloc+0x54>
    59d8:	10 97       	sbiw	r26, 0x00	; 0
    59da:	31 f0       	breq	.+12     	; 0x59e8 <malloc+0x4a>
    59dc:	12 96       	adiw	r26, 0x02	; 2
    59de:	0c 93       	st	X, r16
    59e0:	12 97       	sbiw	r26, 0x02	; 2
    59e2:	13 96       	adiw	r26, 0x03	; 3
    59e4:	1c 93       	st	X, r17
    59e6:	27 c0       	rjmp	.+78     	; 0x5a36 <malloc+0x98>
    59e8:	00 93 78 14 	sts	0x1478, r16	; 0x801478 <__flp>
    59ec:	10 93 79 14 	sts	0x1479, r17	; 0x801479 <__flp+0x1>
    59f0:	22 c0       	rjmp	.+68     	; 0x5a36 <malloc+0x98>
    59f2:	21 15       	cp	r18, r1
    59f4:	31 05       	cpc	r19, r1
    59f6:	19 f0       	breq	.+6      	; 0x59fe <malloc+0x60>
    59f8:	42 17       	cp	r20, r18
    59fa:	53 07       	cpc	r21, r19
    59fc:	18 f4       	brcc	.+6      	; 0x5a04 <malloc+0x66>
    59fe:	9a 01       	movw	r18, r20
    5a00:	bd 01       	movw	r22, r26
    5a02:	ef 01       	movw	r28, r30
    5a04:	df 01       	movw	r26, r30
    5a06:	f8 01       	movw	r30, r16
    5a08:	db cf       	rjmp	.-74     	; 0x59c0 <malloc+0x22>
    5a0a:	21 15       	cp	r18, r1
    5a0c:	31 05       	cpc	r19, r1
    5a0e:	f9 f0       	breq	.+62     	; 0x5a4e <malloc+0xb0>
    5a10:	28 1b       	sub	r18, r24
    5a12:	39 0b       	sbc	r19, r25
    5a14:	24 30       	cpi	r18, 0x04	; 4
    5a16:	31 05       	cpc	r19, r1
    5a18:	80 f4       	brcc	.+32     	; 0x5a3a <malloc+0x9c>
    5a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    5a1c:	9b 81       	ldd	r25, Y+3	; 0x03
    5a1e:	61 15       	cp	r22, r1
    5a20:	71 05       	cpc	r23, r1
    5a22:	21 f0       	breq	.+8      	; 0x5a2c <malloc+0x8e>
    5a24:	fb 01       	movw	r30, r22
    5a26:	93 83       	std	Z+3, r25	; 0x03
    5a28:	82 83       	std	Z+2, r24	; 0x02
    5a2a:	04 c0       	rjmp	.+8      	; 0x5a34 <malloc+0x96>
    5a2c:	90 93 79 14 	sts	0x1479, r25	; 0x801479 <__flp+0x1>
    5a30:	80 93 78 14 	sts	0x1478, r24	; 0x801478 <__flp>
    5a34:	fe 01       	movw	r30, r28
    5a36:	32 96       	adiw	r30, 0x02	; 2
    5a38:	44 c0       	rjmp	.+136    	; 0x5ac2 <malloc+0x124>
    5a3a:	fe 01       	movw	r30, r28
    5a3c:	e2 0f       	add	r30, r18
    5a3e:	f3 1f       	adc	r31, r19
    5a40:	81 93       	st	Z+, r24
    5a42:	91 93       	st	Z+, r25
    5a44:	22 50       	subi	r18, 0x02	; 2
    5a46:	31 09       	sbc	r19, r1
    5a48:	39 83       	std	Y+1, r19	; 0x01
    5a4a:	28 83       	st	Y, r18
    5a4c:	3a c0       	rjmp	.+116    	; 0x5ac2 <malloc+0x124>
    5a4e:	20 91 76 14 	lds	r18, 0x1476	; 0x801476 <__brkval>
    5a52:	30 91 77 14 	lds	r19, 0x1477	; 0x801477 <__brkval+0x1>
    5a56:	23 2b       	or	r18, r19
    5a58:	41 f4       	brne	.+16     	; 0x5a6a <malloc+0xcc>
    5a5a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5a5e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5a62:	30 93 77 14 	sts	0x1477, r19	; 0x801477 <__brkval+0x1>
    5a66:	20 93 76 14 	sts	0x1476, r18	; 0x801476 <__brkval>
    5a6a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5a6e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5a72:	21 15       	cp	r18, r1
    5a74:	31 05       	cpc	r19, r1
    5a76:	41 f4       	brne	.+16     	; 0x5a88 <malloc+0xea>
    5a78:	2d b7       	in	r18, 0x3d	; 61
    5a7a:	3e b7       	in	r19, 0x3e	; 62
    5a7c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5a80:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5a84:	24 1b       	sub	r18, r20
    5a86:	35 0b       	sbc	r19, r21
    5a88:	e0 91 76 14 	lds	r30, 0x1476	; 0x801476 <__brkval>
    5a8c:	f0 91 77 14 	lds	r31, 0x1477	; 0x801477 <__brkval+0x1>
    5a90:	e2 17       	cp	r30, r18
    5a92:	f3 07       	cpc	r31, r19
    5a94:	a0 f4       	brcc	.+40     	; 0x5abe <malloc+0x120>
    5a96:	2e 1b       	sub	r18, r30
    5a98:	3f 0b       	sbc	r19, r31
    5a9a:	28 17       	cp	r18, r24
    5a9c:	39 07       	cpc	r19, r25
    5a9e:	78 f0       	brcs	.+30     	; 0x5abe <malloc+0x120>
    5aa0:	ac 01       	movw	r20, r24
    5aa2:	4e 5f       	subi	r20, 0xFE	; 254
    5aa4:	5f 4f       	sbci	r21, 0xFF	; 255
    5aa6:	24 17       	cp	r18, r20
    5aa8:	35 07       	cpc	r19, r21
    5aaa:	48 f0       	brcs	.+18     	; 0x5abe <malloc+0x120>
    5aac:	4e 0f       	add	r20, r30
    5aae:	5f 1f       	adc	r21, r31
    5ab0:	50 93 77 14 	sts	0x1477, r21	; 0x801477 <__brkval+0x1>
    5ab4:	40 93 76 14 	sts	0x1476, r20	; 0x801476 <__brkval>
    5ab8:	81 93       	st	Z+, r24
    5aba:	91 93       	st	Z+, r25
    5abc:	02 c0       	rjmp	.+4      	; 0x5ac2 <malloc+0x124>
    5abe:	e0 e0       	ldi	r30, 0x00	; 0
    5ac0:	f0 e0       	ldi	r31, 0x00	; 0
    5ac2:	cf 01       	movw	r24, r30
    5ac4:	df 91       	pop	r29
    5ac6:	cf 91       	pop	r28
    5ac8:	1f 91       	pop	r17
    5aca:	0f 91       	pop	r16
    5acc:	08 95       	ret

00005ace <free>:
    5ace:	cf 93       	push	r28
    5ad0:	df 93       	push	r29
    5ad2:	00 97       	sbiw	r24, 0x00	; 0
    5ad4:	09 f4       	brne	.+2      	; 0x5ad8 <free+0xa>
    5ad6:	81 c0       	rjmp	.+258    	; 0x5bda <free+0x10c>
    5ad8:	fc 01       	movw	r30, r24
    5ada:	32 97       	sbiw	r30, 0x02	; 2
    5adc:	13 82       	std	Z+3, r1	; 0x03
    5ade:	12 82       	std	Z+2, r1	; 0x02
    5ae0:	a0 91 78 14 	lds	r26, 0x1478	; 0x801478 <__flp>
    5ae4:	b0 91 79 14 	lds	r27, 0x1479	; 0x801479 <__flp+0x1>
    5ae8:	10 97       	sbiw	r26, 0x00	; 0
    5aea:	81 f4       	brne	.+32     	; 0x5b0c <free+0x3e>
    5aec:	20 81       	ld	r18, Z
    5aee:	31 81       	ldd	r19, Z+1	; 0x01
    5af0:	82 0f       	add	r24, r18
    5af2:	93 1f       	adc	r25, r19
    5af4:	20 91 76 14 	lds	r18, 0x1476	; 0x801476 <__brkval>
    5af8:	30 91 77 14 	lds	r19, 0x1477	; 0x801477 <__brkval+0x1>
    5afc:	28 17       	cp	r18, r24
    5afe:	39 07       	cpc	r19, r25
    5b00:	51 f5       	brne	.+84     	; 0x5b56 <free+0x88>
    5b02:	f0 93 77 14 	sts	0x1477, r31	; 0x801477 <__brkval+0x1>
    5b06:	e0 93 76 14 	sts	0x1476, r30	; 0x801476 <__brkval>
    5b0a:	67 c0       	rjmp	.+206    	; 0x5bda <free+0x10c>
    5b0c:	ed 01       	movw	r28, r26
    5b0e:	20 e0       	ldi	r18, 0x00	; 0
    5b10:	30 e0       	ldi	r19, 0x00	; 0
    5b12:	ce 17       	cp	r28, r30
    5b14:	df 07       	cpc	r29, r31
    5b16:	40 f4       	brcc	.+16     	; 0x5b28 <free+0x5a>
    5b18:	4a 81       	ldd	r20, Y+2	; 0x02
    5b1a:	5b 81       	ldd	r21, Y+3	; 0x03
    5b1c:	9e 01       	movw	r18, r28
    5b1e:	41 15       	cp	r20, r1
    5b20:	51 05       	cpc	r21, r1
    5b22:	f1 f0       	breq	.+60     	; 0x5b60 <free+0x92>
    5b24:	ea 01       	movw	r28, r20
    5b26:	f5 cf       	rjmp	.-22     	; 0x5b12 <free+0x44>
    5b28:	d3 83       	std	Z+3, r29	; 0x03
    5b2a:	c2 83       	std	Z+2, r28	; 0x02
    5b2c:	40 81       	ld	r20, Z
    5b2e:	51 81       	ldd	r21, Z+1	; 0x01
    5b30:	84 0f       	add	r24, r20
    5b32:	95 1f       	adc	r25, r21
    5b34:	c8 17       	cp	r28, r24
    5b36:	d9 07       	cpc	r29, r25
    5b38:	59 f4       	brne	.+22     	; 0x5b50 <free+0x82>
    5b3a:	88 81       	ld	r24, Y
    5b3c:	99 81       	ldd	r25, Y+1	; 0x01
    5b3e:	84 0f       	add	r24, r20
    5b40:	95 1f       	adc	r25, r21
    5b42:	02 96       	adiw	r24, 0x02	; 2
    5b44:	91 83       	std	Z+1, r25	; 0x01
    5b46:	80 83       	st	Z, r24
    5b48:	8a 81       	ldd	r24, Y+2	; 0x02
    5b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    5b4c:	93 83       	std	Z+3, r25	; 0x03
    5b4e:	82 83       	std	Z+2, r24	; 0x02
    5b50:	21 15       	cp	r18, r1
    5b52:	31 05       	cpc	r19, r1
    5b54:	29 f4       	brne	.+10     	; 0x5b60 <free+0x92>
    5b56:	f0 93 79 14 	sts	0x1479, r31	; 0x801479 <__flp+0x1>
    5b5a:	e0 93 78 14 	sts	0x1478, r30	; 0x801478 <__flp>
    5b5e:	3d c0       	rjmp	.+122    	; 0x5bda <free+0x10c>
    5b60:	e9 01       	movw	r28, r18
    5b62:	fb 83       	std	Y+3, r31	; 0x03
    5b64:	ea 83       	std	Y+2, r30	; 0x02
    5b66:	49 91       	ld	r20, Y+
    5b68:	59 91       	ld	r21, Y+
    5b6a:	c4 0f       	add	r28, r20
    5b6c:	d5 1f       	adc	r29, r21
    5b6e:	ec 17       	cp	r30, r28
    5b70:	fd 07       	cpc	r31, r29
    5b72:	61 f4       	brne	.+24     	; 0x5b8c <free+0xbe>
    5b74:	80 81       	ld	r24, Z
    5b76:	91 81       	ldd	r25, Z+1	; 0x01
    5b78:	84 0f       	add	r24, r20
    5b7a:	95 1f       	adc	r25, r21
    5b7c:	02 96       	adiw	r24, 0x02	; 2
    5b7e:	e9 01       	movw	r28, r18
    5b80:	99 83       	std	Y+1, r25	; 0x01
    5b82:	88 83       	st	Y, r24
    5b84:	82 81       	ldd	r24, Z+2	; 0x02
    5b86:	93 81       	ldd	r25, Z+3	; 0x03
    5b88:	9b 83       	std	Y+3, r25	; 0x03
    5b8a:	8a 83       	std	Y+2, r24	; 0x02
    5b8c:	e0 e0       	ldi	r30, 0x00	; 0
    5b8e:	f0 e0       	ldi	r31, 0x00	; 0
    5b90:	12 96       	adiw	r26, 0x02	; 2
    5b92:	8d 91       	ld	r24, X+
    5b94:	9c 91       	ld	r25, X
    5b96:	13 97       	sbiw	r26, 0x03	; 3
    5b98:	00 97       	sbiw	r24, 0x00	; 0
    5b9a:	19 f0       	breq	.+6      	; 0x5ba2 <free+0xd4>
    5b9c:	fd 01       	movw	r30, r26
    5b9e:	dc 01       	movw	r26, r24
    5ba0:	f7 cf       	rjmp	.-18     	; 0x5b90 <free+0xc2>
    5ba2:	8d 91       	ld	r24, X+
    5ba4:	9c 91       	ld	r25, X
    5ba6:	11 97       	sbiw	r26, 0x01	; 1
    5ba8:	9d 01       	movw	r18, r26
    5baa:	2e 5f       	subi	r18, 0xFE	; 254
    5bac:	3f 4f       	sbci	r19, 0xFF	; 255
    5bae:	82 0f       	add	r24, r18
    5bb0:	93 1f       	adc	r25, r19
    5bb2:	20 91 76 14 	lds	r18, 0x1476	; 0x801476 <__brkval>
    5bb6:	30 91 77 14 	lds	r19, 0x1477	; 0x801477 <__brkval+0x1>
    5bba:	28 17       	cp	r18, r24
    5bbc:	39 07       	cpc	r19, r25
    5bbe:	69 f4       	brne	.+26     	; 0x5bda <free+0x10c>
    5bc0:	30 97       	sbiw	r30, 0x00	; 0
    5bc2:	29 f4       	brne	.+10     	; 0x5bce <free+0x100>
    5bc4:	10 92 79 14 	sts	0x1479, r1	; 0x801479 <__flp+0x1>
    5bc8:	10 92 78 14 	sts	0x1478, r1	; 0x801478 <__flp>
    5bcc:	02 c0       	rjmp	.+4      	; 0x5bd2 <free+0x104>
    5bce:	13 82       	std	Z+3, r1	; 0x03
    5bd0:	12 82       	std	Z+2, r1	; 0x02
    5bd2:	b0 93 77 14 	sts	0x1477, r27	; 0x801477 <__brkval+0x1>
    5bd6:	a0 93 76 14 	sts	0x1476, r26	; 0x801476 <__brkval>
    5bda:	df 91       	pop	r29
    5bdc:	cf 91       	pop	r28
    5bde:	08 95       	ret

00005be0 <abort>:
    5be0:	81 e0       	ldi	r24, 0x01	; 1
    5be2:	90 e0       	ldi	r25, 0x00	; 0
    5be4:	f8 94       	cli
    5be6:	7d c3       	rjmp	.+1786   	; 0x62e2 <_exit>

00005be8 <memcpy>:
    5be8:	fb 01       	movw	r30, r22
    5bea:	dc 01       	movw	r26, r24
    5bec:	02 c0       	rjmp	.+4      	; 0x5bf2 <memcpy+0xa>
    5bee:	01 90       	ld	r0, Z+
    5bf0:	0d 92       	st	X+, r0
    5bf2:	41 50       	subi	r20, 0x01	; 1
    5bf4:	50 40       	sbci	r21, 0x00	; 0
    5bf6:	d8 f7       	brcc	.-10     	; 0x5bee <memcpy+0x6>
    5bf8:	08 95       	ret

00005bfa <memset>:
    5bfa:	dc 01       	movw	r26, r24
    5bfc:	01 c0       	rjmp	.+2      	; 0x5c00 <memset+0x6>
    5bfe:	6d 93       	st	X+, r22
    5c00:	41 50       	subi	r20, 0x01	; 1
    5c02:	50 40       	sbci	r21, 0x00	; 0
    5c04:	e0 f7       	brcc	.-8      	; 0x5bfe <memset+0x4>
    5c06:	08 95       	ret

00005c08 <strcasestr>:
    5c08:	fb 01       	movw	r30, r22
    5c0a:	51 91       	ld	r21, Z+
    5c0c:	55 23       	and	r21, r21
    5c0e:	b1 f0       	breq	.+44     	; 0x5c3c <strcasestr+0x34>
    5c10:	bf 01       	movw	r22, r30
    5c12:	dc 01       	movw	r26, r24
    5c14:	05 2e       	mov	r0, r21
    5c16:	4d 91       	ld	r20, X+
    5c18:	44 23       	and	r20, r20
    5c1a:	69 f0       	breq	.+26     	; 0x5c36 <strcasestr+0x2e>
    5c1c:	10 d0       	rcall	.+32     	; 0x5c3e <strcasestr+0x36>
    5c1e:	d9 f7       	brne	.-10     	; 0x5c16 <strcasestr+0xe>
    5c20:	cd 01       	movw	r24, r26
    5c22:	01 90       	ld	r0, Z+
    5c24:	00 20       	and	r0, r0
    5c26:	49 f0       	breq	.+18     	; 0x5c3a <strcasestr+0x32>
    5c28:	4d 91       	ld	r20, X+
    5c2a:	41 11       	cpse	r20, r1
    5c2c:	08 d0       	rcall	.+16     	; 0x5c3e <strcasestr+0x36>
    5c2e:	c9 f3       	breq	.-14     	; 0x5c22 <strcasestr+0x1a>
    5c30:	fb 01       	movw	r30, r22
    5c32:	41 11       	cpse	r20, r1
    5c34:	ee cf       	rjmp	.-36     	; 0x5c12 <strcasestr+0xa>
    5c36:	81 e0       	ldi	r24, 0x01	; 1
    5c38:	90 e0       	ldi	r25, 0x00	; 0
    5c3a:	01 97       	sbiw	r24, 0x01	; 1
    5c3c:	08 95       	ret
    5c3e:	40 25       	eor	r20, r0
    5c40:	39 f0       	breq	.+14     	; 0x5c50 <strcasestr+0x48>
    5c42:	40 32       	cpi	r20, 0x20	; 32
    5c44:	29 f4       	brne	.+10     	; 0x5c50 <strcasestr+0x48>
    5c46:	40 29       	or	r20, r0
    5c48:	4b 57       	subi	r20, 0x7B	; 123
    5c4a:	46 5e       	subi	r20, 0xE6	; 230
    5c4c:	08 f0       	brcs	.+2      	; 0x5c50 <strcasestr+0x48>
    5c4e:	18 94       	sez
    5c50:	08 95       	ret

00005c52 <strcat>:
    5c52:	fb 01       	movw	r30, r22
    5c54:	dc 01       	movw	r26, r24
    5c56:	0d 90       	ld	r0, X+
    5c58:	00 20       	and	r0, r0
    5c5a:	e9 f7       	brne	.-6      	; 0x5c56 <strcat+0x4>
    5c5c:	11 97       	sbiw	r26, 0x01	; 1
    5c5e:	01 90       	ld	r0, Z+
    5c60:	0d 92       	st	X+, r0
    5c62:	00 20       	and	r0, r0
    5c64:	e1 f7       	brne	.-8      	; 0x5c5e <strcat+0xc>
    5c66:	08 95       	ret

00005c68 <strcpy>:
    5c68:	fb 01       	movw	r30, r22
    5c6a:	dc 01       	movw	r26, r24
    5c6c:	01 90       	ld	r0, Z+
    5c6e:	0d 92       	st	X+, r0
    5c70:	00 20       	and	r0, r0
    5c72:	e1 f7       	brne	.-8      	; 0x5c6c <strcpy+0x4>
    5c74:	08 95       	ret

00005c76 <strncasecmp>:
    5c76:	fb 01       	movw	r30, r22
    5c78:	dc 01       	movw	r26, r24
    5c7a:	41 50       	subi	r20, 0x01	; 1
    5c7c:	50 40       	sbci	r21, 0x00	; 0
    5c7e:	88 f0       	brcs	.+34     	; 0x5ca2 <strncasecmp+0x2c>
    5c80:	8d 91       	ld	r24, X+
    5c82:	81 34       	cpi	r24, 0x41	; 65
    5c84:	1c f0       	brlt	.+6      	; 0x5c8c <strncasecmp+0x16>
    5c86:	8b 35       	cpi	r24, 0x5B	; 91
    5c88:	0c f4       	brge	.+2      	; 0x5c8c <strncasecmp+0x16>
    5c8a:	80 5e       	subi	r24, 0xE0	; 224
    5c8c:	61 91       	ld	r22, Z+
    5c8e:	61 34       	cpi	r22, 0x41	; 65
    5c90:	1c f0       	brlt	.+6      	; 0x5c98 <strncasecmp+0x22>
    5c92:	6b 35       	cpi	r22, 0x5B	; 91
    5c94:	0c f4       	brge	.+2      	; 0x5c98 <strncasecmp+0x22>
    5c96:	60 5e       	subi	r22, 0xE0	; 224
    5c98:	86 1b       	sub	r24, r22
    5c9a:	61 11       	cpse	r22, r1
    5c9c:	71 f3       	breq	.-36     	; 0x5c7a <strncasecmp+0x4>
    5c9e:	99 0b       	sbc	r25, r25
    5ca0:	08 95       	ret
    5ca2:	88 1b       	sub	r24, r24
    5ca4:	fc cf       	rjmp	.-8      	; 0x5c9e <strncasecmp+0x28>

00005ca6 <printf>:
    5ca6:	cf 93       	push	r28
    5ca8:	df 93       	push	r29
    5caa:	cd b7       	in	r28, 0x3d	; 61
    5cac:	de b7       	in	r29, 0x3e	; 62
    5cae:	ae 01       	movw	r20, r28
    5cb0:	4a 5f       	subi	r20, 0xFA	; 250
    5cb2:	5f 4f       	sbci	r21, 0xFF	; 255
    5cb4:	fa 01       	movw	r30, r20
    5cb6:	61 91       	ld	r22, Z+
    5cb8:	71 91       	ld	r23, Z+
    5cba:	af 01       	movw	r20, r30
    5cbc:	80 91 7c 14 	lds	r24, 0x147C	; 0x80147c <__iob+0x2>
    5cc0:	90 91 7d 14 	lds	r25, 0x147D	; 0x80147d <__iob+0x3>
    5cc4:	61 d0       	rcall	.+194    	; 0x5d88 <vfprintf>
    5cc6:	df 91       	pop	r29
    5cc8:	cf 91       	pop	r28
    5cca:	08 95       	ret

00005ccc <puts>:
    5ccc:	0f 93       	push	r16
    5cce:	1f 93       	push	r17
    5cd0:	cf 93       	push	r28
    5cd2:	df 93       	push	r29
    5cd4:	e0 91 7c 14 	lds	r30, 0x147C	; 0x80147c <__iob+0x2>
    5cd8:	f0 91 7d 14 	lds	r31, 0x147D	; 0x80147d <__iob+0x3>
    5cdc:	23 81       	ldd	r18, Z+3	; 0x03
    5cde:	21 ff       	sbrs	r18, 1
    5ce0:	1b c0       	rjmp	.+54     	; 0x5d18 <puts+0x4c>
    5ce2:	8c 01       	movw	r16, r24
    5ce4:	d0 e0       	ldi	r29, 0x00	; 0
    5ce6:	c0 e0       	ldi	r28, 0x00	; 0
    5ce8:	f8 01       	movw	r30, r16
    5cea:	81 91       	ld	r24, Z+
    5cec:	8f 01       	movw	r16, r30
    5cee:	60 91 7c 14 	lds	r22, 0x147C	; 0x80147c <__iob+0x2>
    5cf2:	70 91 7d 14 	lds	r23, 0x147D	; 0x80147d <__iob+0x3>
    5cf6:	db 01       	movw	r26, r22
    5cf8:	18 96       	adiw	r26, 0x08	; 8
    5cfa:	ed 91       	ld	r30, X+
    5cfc:	fc 91       	ld	r31, X
    5cfe:	19 97       	sbiw	r26, 0x09	; 9
    5d00:	88 23       	and	r24, r24
    5d02:	31 f0       	breq	.+12     	; 0x5d10 <puts+0x44>
    5d04:	19 95       	eicall
    5d06:	89 2b       	or	r24, r25
    5d08:	79 f3       	breq	.-34     	; 0x5ce8 <puts+0x1c>
    5d0a:	df ef       	ldi	r29, 0xFF	; 255
    5d0c:	cf ef       	ldi	r28, 0xFF	; 255
    5d0e:	ec cf       	rjmp	.-40     	; 0x5ce8 <puts+0x1c>
    5d10:	8a e0       	ldi	r24, 0x0A	; 10
    5d12:	19 95       	eicall
    5d14:	89 2b       	or	r24, r25
    5d16:	19 f0       	breq	.+6      	; 0x5d1e <puts+0x52>
    5d18:	8f ef       	ldi	r24, 0xFF	; 255
    5d1a:	9f ef       	ldi	r25, 0xFF	; 255
    5d1c:	02 c0       	rjmp	.+4      	; 0x5d22 <puts+0x56>
    5d1e:	8d 2f       	mov	r24, r29
    5d20:	9c 2f       	mov	r25, r28
    5d22:	df 91       	pop	r29
    5d24:	cf 91       	pop	r28
    5d26:	1f 91       	pop	r17
    5d28:	0f 91       	pop	r16
    5d2a:	08 95       	ret

00005d2c <sprintf>:
    5d2c:	0f 93       	push	r16
    5d2e:	1f 93       	push	r17
    5d30:	cf 93       	push	r28
    5d32:	df 93       	push	r29
    5d34:	cd b7       	in	r28, 0x3d	; 61
    5d36:	de b7       	in	r29, 0x3e	; 62
    5d38:	2e 97       	sbiw	r28, 0x0e	; 14
    5d3a:	0f b6       	in	r0, 0x3f	; 63
    5d3c:	f8 94       	cli
    5d3e:	de bf       	out	0x3e, r29	; 62
    5d40:	0f be       	out	0x3f, r0	; 63
    5d42:	cd bf       	out	0x3d, r28	; 61
    5d44:	0e 89       	ldd	r16, Y+22	; 0x16
    5d46:	1f 89       	ldd	r17, Y+23	; 0x17
    5d48:	86 e0       	ldi	r24, 0x06	; 6
    5d4a:	8c 83       	std	Y+4, r24	; 0x04
    5d4c:	1a 83       	std	Y+2, r17	; 0x02
    5d4e:	09 83       	std	Y+1, r16	; 0x01
    5d50:	8f ef       	ldi	r24, 0xFF	; 255
    5d52:	9f e7       	ldi	r25, 0x7F	; 127
    5d54:	9e 83       	std	Y+6, r25	; 0x06
    5d56:	8d 83       	std	Y+5, r24	; 0x05
    5d58:	ae 01       	movw	r20, r28
    5d5a:	46 5e       	subi	r20, 0xE6	; 230
    5d5c:	5f 4f       	sbci	r21, 0xFF	; 255
    5d5e:	68 8d       	ldd	r22, Y+24	; 0x18
    5d60:	79 8d       	ldd	r23, Y+25	; 0x19
    5d62:	ce 01       	movw	r24, r28
    5d64:	01 96       	adiw	r24, 0x01	; 1
    5d66:	10 d0       	rcall	.+32     	; 0x5d88 <vfprintf>
    5d68:	ef 81       	ldd	r30, Y+7	; 0x07
    5d6a:	f8 85       	ldd	r31, Y+8	; 0x08
    5d6c:	e0 0f       	add	r30, r16
    5d6e:	f1 1f       	adc	r31, r17
    5d70:	10 82       	st	Z, r1
    5d72:	2e 96       	adiw	r28, 0x0e	; 14
    5d74:	0f b6       	in	r0, 0x3f	; 63
    5d76:	f8 94       	cli
    5d78:	de bf       	out	0x3e, r29	; 62
    5d7a:	0f be       	out	0x3f, r0	; 63
    5d7c:	cd bf       	out	0x3d, r28	; 61
    5d7e:	df 91       	pop	r29
    5d80:	cf 91       	pop	r28
    5d82:	1f 91       	pop	r17
    5d84:	0f 91       	pop	r16
    5d86:	08 95       	ret

00005d88 <vfprintf>:
    5d88:	2f 92       	push	r2
    5d8a:	3f 92       	push	r3
    5d8c:	4f 92       	push	r4
    5d8e:	5f 92       	push	r5
    5d90:	6f 92       	push	r6
    5d92:	7f 92       	push	r7
    5d94:	8f 92       	push	r8
    5d96:	9f 92       	push	r9
    5d98:	af 92       	push	r10
    5d9a:	bf 92       	push	r11
    5d9c:	cf 92       	push	r12
    5d9e:	df 92       	push	r13
    5da0:	ef 92       	push	r14
    5da2:	ff 92       	push	r15
    5da4:	0f 93       	push	r16
    5da6:	1f 93       	push	r17
    5da8:	cf 93       	push	r28
    5daa:	df 93       	push	r29
    5dac:	cd b7       	in	r28, 0x3d	; 61
    5dae:	de b7       	in	r29, 0x3e	; 62
    5db0:	2b 97       	sbiw	r28, 0x0b	; 11
    5db2:	0f b6       	in	r0, 0x3f	; 63
    5db4:	f8 94       	cli
    5db6:	de bf       	out	0x3e, r29	; 62
    5db8:	0f be       	out	0x3f, r0	; 63
    5dba:	cd bf       	out	0x3d, r28	; 61
    5dbc:	6c 01       	movw	r12, r24
    5dbe:	7b 01       	movw	r14, r22
    5dc0:	8a 01       	movw	r16, r20
    5dc2:	fc 01       	movw	r30, r24
    5dc4:	17 82       	std	Z+7, r1	; 0x07
    5dc6:	16 82       	std	Z+6, r1	; 0x06
    5dc8:	83 81       	ldd	r24, Z+3	; 0x03
    5dca:	81 ff       	sbrs	r24, 1
    5dcc:	bf c1       	rjmp	.+894    	; 0x614c <vfprintf+0x3c4>
    5dce:	ce 01       	movw	r24, r28
    5dd0:	01 96       	adiw	r24, 0x01	; 1
    5dd2:	3c 01       	movw	r6, r24
    5dd4:	f6 01       	movw	r30, r12
    5dd6:	93 81       	ldd	r25, Z+3	; 0x03
    5dd8:	f7 01       	movw	r30, r14
    5dda:	93 fd       	sbrc	r25, 3
    5ddc:	85 91       	lpm	r24, Z+
    5dde:	93 ff       	sbrs	r25, 3
    5de0:	81 91       	ld	r24, Z+
    5de2:	7f 01       	movw	r14, r30
    5de4:	88 23       	and	r24, r24
    5de6:	09 f4       	brne	.+2      	; 0x5dea <vfprintf+0x62>
    5de8:	ad c1       	rjmp	.+858    	; 0x6144 <vfprintf+0x3bc>
    5dea:	85 32       	cpi	r24, 0x25	; 37
    5dec:	39 f4       	brne	.+14     	; 0x5dfc <vfprintf+0x74>
    5dee:	93 fd       	sbrc	r25, 3
    5df0:	85 91       	lpm	r24, Z+
    5df2:	93 ff       	sbrs	r25, 3
    5df4:	81 91       	ld	r24, Z+
    5df6:	7f 01       	movw	r14, r30
    5df8:	85 32       	cpi	r24, 0x25	; 37
    5dfa:	21 f4       	brne	.+8      	; 0x5e04 <vfprintf+0x7c>
    5dfc:	b6 01       	movw	r22, r12
    5dfe:	90 e0       	ldi	r25, 0x00	; 0
    5e00:	d6 d1       	rcall	.+940    	; 0x61ae <fputc>
    5e02:	e8 cf       	rjmp	.-48     	; 0x5dd4 <vfprintf+0x4c>
    5e04:	91 2c       	mov	r9, r1
    5e06:	21 2c       	mov	r2, r1
    5e08:	31 2c       	mov	r3, r1
    5e0a:	ff e1       	ldi	r31, 0x1F	; 31
    5e0c:	f3 15       	cp	r31, r3
    5e0e:	d8 f0       	brcs	.+54     	; 0x5e46 <vfprintf+0xbe>
    5e10:	8b 32       	cpi	r24, 0x2B	; 43
    5e12:	79 f0       	breq	.+30     	; 0x5e32 <vfprintf+0xaa>
    5e14:	38 f4       	brcc	.+14     	; 0x5e24 <vfprintf+0x9c>
    5e16:	80 32       	cpi	r24, 0x20	; 32
    5e18:	79 f0       	breq	.+30     	; 0x5e38 <vfprintf+0xb0>
    5e1a:	83 32       	cpi	r24, 0x23	; 35
    5e1c:	a1 f4       	brne	.+40     	; 0x5e46 <vfprintf+0xbe>
    5e1e:	23 2d       	mov	r18, r3
    5e20:	20 61       	ori	r18, 0x10	; 16
    5e22:	1d c0       	rjmp	.+58     	; 0x5e5e <vfprintf+0xd6>
    5e24:	8d 32       	cpi	r24, 0x2D	; 45
    5e26:	61 f0       	breq	.+24     	; 0x5e40 <vfprintf+0xb8>
    5e28:	80 33       	cpi	r24, 0x30	; 48
    5e2a:	69 f4       	brne	.+26     	; 0x5e46 <vfprintf+0xbe>
    5e2c:	23 2d       	mov	r18, r3
    5e2e:	21 60       	ori	r18, 0x01	; 1
    5e30:	16 c0       	rjmp	.+44     	; 0x5e5e <vfprintf+0xd6>
    5e32:	83 2d       	mov	r24, r3
    5e34:	82 60       	ori	r24, 0x02	; 2
    5e36:	38 2e       	mov	r3, r24
    5e38:	e3 2d       	mov	r30, r3
    5e3a:	e4 60       	ori	r30, 0x04	; 4
    5e3c:	3e 2e       	mov	r3, r30
    5e3e:	2a c0       	rjmp	.+84     	; 0x5e94 <vfprintf+0x10c>
    5e40:	f3 2d       	mov	r31, r3
    5e42:	f8 60       	ori	r31, 0x08	; 8
    5e44:	1d c0       	rjmp	.+58     	; 0x5e80 <vfprintf+0xf8>
    5e46:	37 fc       	sbrc	r3, 7
    5e48:	2d c0       	rjmp	.+90     	; 0x5ea4 <vfprintf+0x11c>
    5e4a:	20 ed       	ldi	r18, 0xD0	; 208
    5e4c:	28 0f       	add	r18, r24
    5e4e:	2a 30       	cpi	r18, 0x0A	; 10
    5e50:	40 f0       	brcs	.+16     	; 0x5e62 <vfprintf+0xda>
    5e52:	8e 32       	cpi	r24, 0x2E	; 46
    5e54:	b9 f4       	brne	.+46     	; 0x5e84 <vfprintf+0xfc>
    5e56:	36 fc       	sbrc	r3, 6
    5e58:	75 c1       	rjmp	.+746    	; 0x6144 <vfprintf+0x3bc>
    5e5a:	23 2d       	mov	r18, r3
    5e5c:	20 64       	ori	r18, 0x40	; 64
    5e5e:	32 2e       	mov	r3, r18
    5e60:	19 c0       	rjmp	.+50     	; 0x5e94 <vfprintf+0x10c>
    5e62:	36 fe       	sbrs	r3, 6
    5e64:	06 c0       	rjmp	.+12     	; 0x5e72 <vfprintf+0xea>
    5e66:	8a e0       	ldi	r24, 0x0A	; 10
    5e68:	98 9e       	mul	r9, r24
    5e6a:	20 0d       	add	r18, r0
    5e6c:	11 24       	eor	r1, r1
    5e6e:	92 2e       	mov	r9, r18
    5e70:	11 c0       	rjmp	.+34     	; 0x5e94 <vfprintf+0x10c>
    5e72:	ea e0       	ldi	r30, 0x0A	; 10
    5e74:	2e 9e       	mul	r2, r30
    5e76:	20 0d       	add	r18, r0
    5e78:	11 24       	eor	r1, r1
    5e7a:	22 2e       	mov	r2, r18
    5e7c:	f3 2d       	mov	r31, r3
    5e7e:	f0 62       	ori	r31, 0x20	; 32
    5e80:	3f 2e       	mov	r3, r31
    5e82:	08 c0       	rjmp	.+16     	; 0x5e94 <vfprintf+0x10c>
    5e84:	8c 36       	cpi	r24, 0x6C	; 108
    5e86:	21 f4       	brne	.+8      	; 0x5e90 <vfprintf+0x108>
    5e88:	83 2d       	mov	r24, r3
    5e8a:	80 68       	ori	r24, 0x80	; 128
    5e8c:	38 2e       	mov	r3, r24
    5e8e:	02 c0       	rjmp	.+4      	; 0x5e94 <vfprintf+0x10c>
    5e90:	88 36       	cpi	r24, 0x68	; 104
    5e92:	41 f4       	brne	.+16     	; 0x5ea4 <vfprintf+0x11c>
    5e94:	f7 01       	movw	r30, r14
    5e96:	93 fd       	sbrc	r25, 3
    5e98:	85 91       	lpm	r24, Z+
    5e9a:	93 ff       	sbrs	r25, 3
    5e9c:	81 91       	ld	r24, Z+
    5e9e:	7f 01       	movw	r14, r30
    5ea0:	81 11       	cpse	r24, r1
    5ea2:	b3 cf       	rjmp	.-154    	; 0x5e0a <vfprintf+0x82>
    5ea4:	98 2f       	mov	r25, r24
    5ea6:	9f 7d       	andi	r25, 0xDF	; 223
    5ea8:	95 54       	subi	r25, 0x45	; 69
    5eaa:	93 30       	cpi	r25, 0x03	; 3
    5eac:	28 f4       	brcc	.+10     	; 0x5eb8 <vfprintf+0x130>
    5eae:	0c 5f       	subi	r16, 0xFC	; 252
    5eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    5eb2:	9f e3       	ldi	r25, 0x3F	; 63
    5eb4:	99 83       	std	Y+1, r25	; 0x01
    5eb6:	0d c0       	rjmp	.+26     	; 0x5ed2 <vfprintf+0x14a>
    5eb8:	83 36       	cpi	r24, 0x63	; 99
    5eba:	31 f0       	breq	.+12     	; 0x5ec8 <vfprintf+0x140>
    5ebc:	83 37       	cpi	r24, 0x73	; 115
    5ebe:	71 f0       	breq	.+28     	; 0x5edc <vfprintf+0x154>
    5ec0:	83 35       	cpi	r24, 0x53	; 83
    5ec2:	09 f0       	breq	.+2      	; 0x5ec6 <vfprintf+0x13e>
    5ec4:	55 c0       	rjmp	.+170    	; 0x5f70 <vfprintf+0x1e8>
    5ec6:	20 c0       	rjmp	.+64     	; 0x5f08 <vfprintf+0x180>
    5ec8:	f8 01       	movw	r30, r16
    5eca:	80 81       	ld	r24, Z
    5ecc:	89 83       	std	Y+1, r24	; 0x01
    5ece:	0e 5f       	subi	r16, 0xFE	; 254
    5ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    5ed2:	88 24       	eor	r8, r8
    5ed4:	83 94       	inc	r8
    5ed6:	91 2c       	mov	r9, r1
    5ed8:	53 01       	movw	r10, r6
    5eda:	12 c0       	rjmp	.+36     	; 0x5f00 <vfprintf+0x178>
    5edc:	28 01       	movw	r4, r16
    5ede:	f2 e0       	ldi	r31, 0x02	; 2
    5ee0:	4f 0e       	add	r4, r31
    5ee2:	51 1c       	adc	r5, r1
    5ee4:	f8 01       	movw	r30, r16
    5ee6:	a0 80       	ld	r10, Z
    5ee8:	b1 80       	ldd	r11, Z+1	; 0x01
    5eea:	36 fe       	sbrs	r3, 6
    5eec:	03 c0       	rjmp	.+6      	; 0x5ef4 <vfprintf+0x16c>
    5eee:	69 2d       	mov	r22, r9
    5ef0:	70 e0       	ldi	r23, 0x00	; 0
    5ef2:	02 c0       	rjmp	.+4      	; 0x5ef8 <vfprintf+0x170>
    5ef4:	6f ef       	ldi	r22, 0xFF	; 255
    5ef6:	7f ef       	ldi	r23, 0xFF	; 255
    5ef8:	c5 01       	movw	r24, r10
    5efa:	4e d1       	rcall	.+668    	; 0x6198 <strnlen>
    5efc:	4c 01       	movw	r8, r24
    5efe:	82 01       	movw	r16, r4
    5f00:	f3 2d       	mov	r31, r3
    5f02:	ff 77       	andi	r31, 0x7F	; 127
    5f04:	3f 2e       	mov	r3, r31
    5f06:	15 c0       	rjmp	.+42     	; 0x5f32 <vfprintf+0x1aa>
    5f08:	28 01       	movw	r4, r16
    5f0a:	22 e0       	ldi	r18, 0x02	; 2
    5f0c:	42 0e       	add	r4, r18
    5f0e:	51 1c       	adc	r5, r1
    5f10:	f8 01       	movw	r30, r16
    5f12:	a0 80       	ld	r10, Z
    5f14:	b1 80       	ldd	r11, Z+1	; 0x01
    5f16:	36 fe       	sbrs	r3, 6
    5f18:	03 c0       	rjmp	.+6      	; 0x5f20 <vfprintf+0x198>
    5f1a:	69 2d       	mov	r22, r9
    5f1c:	70 e0       	ldi	r23, 0x00	; 0
    5f1e:	02 c0       	rjmp	.+4      	; 0x5f24 <vfprintf+0x19c>
    5f20:	6f ef       	ldi	r22, 0xFF	; 255
    5f22:	7f ef       	ldi	r23, 0xFF	; 255
    5f24:	c5 01       	movw	r24, r10
    5f26:	2d d1       	rcall	.+602    	; 0x6182 <strnlen_P>
    5f28:	4c 01       	movw	r8, r24
    5f2a:	f3 2d       	mov	r31, r3
    5f2c:	f0 68       	ori	r31, 0x80	; 128
    5f2e:	3f 2e       	mov	r3, r31
    5f30:	82 01       	movw	r16, r4
    5f32:	33 fc       	sbrc	r3, 3
    5f34:	19 c0       	rjmp	.+50     	; 0x5f68 <vfprintf+0x1e0>
    5f36:	82 2d       	mov	r24, r2
    5f38:	90 e0       	ldi	r25, 0x00	; 0
    5f3a:	88 16       	cp	r8, r24
    5f3c:	99 06       	cpc	r9, r25
    5f3e:	a0 f4       	brcc	.+40     	; 0x5f68 <vfprintf+0x1e0>
    5f40:	b6 01       	movw	r22, r12
    5f42:	80 e2       	ldi	r24, 0x20	; 32
    5f44:	90 e0       	ldi	r25, 0x00	; 0
    5f46:	33 d1       	rcall	.+614    	; 0x61ae <fputc>
    5f48:	2a 94       	dec	r2
    5f4a:	f5 cf       	rjmp	.-22     	; 0x5f36 <vfprintf+0x1ae>
    5f4c:	f5 01       	movw	r30, r10
    5f4e:	37 fc       	sbrc	r3, 7
    5f50:	85 91       	lpm	r24, Z+
    5f52:	37 fe       	sbrs	r3, 7
    5f54:	81 91       	ld	r24, Z+
    5f56:	5f 01       	movw	r10, r30
    5f58:	b6 01       	movw	r22, r12
    5f5a:	90 e0       	ldi	r25, 0x00	; 0
    5f5c:	28 d1       	rcall	.+592    	; 0x61ae <fputc>
    5f5e:	21 10       	cpse	r2, r1
    5f60:	2a 94       	dec	r2
    5f62:	21 e0       	ldi	r18, 0x01	; 1
    5f64:	82 1a       	sub	r8, r18
    5f66:	91 08       	sbc	r9, r1
    5f68:	81 14       	cp	r8, r1
    5f6a:	91 04       	cpc	r9, r1
    5f6c:	79 f7       	brne	.-34     	; 0x5f4c <vfprintf+0x1c4>
    5f6e:	e1 c0       	rjmp	.+450    	; 0x6132 <vfprintf+0x3aa>
    5f70:	84 36       	cpi	r24, 0x64	; 100
    5f72:	11 f0       	breq	.+4      	; 0x5f78 <vfprintf+0x1f0>
    5f74:	89 36       	cpi	r24, 0x69	; 105
    5f76:	39 f5       	brne	.+78     	; 0x5fc6 <vfprintf+0x23e>
    5f78:	f8 01       	movw	r30, r16
    5f7a:	37 fe       	sbrs	r3, 7
    5f7c:	07 c0       	rjmp	.+14     	; 0x5f8c <vfprintf+0x204>
    5f7e:	60 81       	ld	r22, Z
    5f80:	71 81       	ldd	r23, Z+1	; 0x01
    5f82:	82 81       	ldd	r24, Z+2	; 0x02
    5f84:	93 81       	ldd	r25, Z+3	; 0x03
    5f86:	0c 5f       	subi	r16, 0xFC	; 252
    5f88:	1f 4f       	sbci	r17, 0xFF	; 255
    5f8a:	08 c0       	rjmp	.+16     	; 0x5f9c <vfprintf+0x214>
    5f8c:	60 81       	ld	r22, Z
    5f8e:	71 81       	ldd	r23, Z+1	; 0x01
    5f90:	07 2e       	mov	r0, r23
    5f92:	00 0c       	add	r0, r0
    5f94:	88 0b       	sbc	r24, r24
    5f96:	99 0b       	sbc	r25, r25
    5f98:	0e 5f       	subi	r16, 0xFE	; 254
    5f9a:	1f 4f       	sbci	r17, 0xFF	; 255
    5f9c:	f3 2d       	mov	r31, r3
    5f9e:	ff 76       	andi	r31, 0x6F	; 111
    5fa0:	3f 2e       	mov	r3, r31
    5fa2:	97 ff       	sbrs	r25, 7
    5fa4:	09 c0       	rjmp	.+18     	; 0x5fb8 <vfprintf+0x230>
    5fa6:	90 95       	com	r25
    5fa8:	80 95       	com	r24
    5faa:	70 95       	com	r23
    5fac:	61 95       	neg	r22
    5fae:	7f 4f       	sbci	r23, 0xFF	; 255
    5fb0:	8f 4f       	sbci	r24, 0xFF	; 255
    5fb2:	9f 4f       	sbci	r25, 0xFF	; 255
    5fb4:	f0 68       	ori	r31, 0x80	; 128
    5fb6:	3f 2e       	mov	r3, r31
    5fb8:	2a e0       	ldi	r18, 0x0A	; 10
    5fba:	30 e0       	ldi	r19, 0x00	; 0
    5fbc:	a3 01       	movw	r20, r6
    5fbe:	33 d1       	rcall	.+614    	; 0x6226 <__ultoa_invert>
    5fc0:	88 2e       	mov	r8, r24
    5fc2:	86 18       	sub	r8, r6
    5fc4:	44 c0       	rjmp	.+136    	; 0x604e <vfprintf+0x2c6>
    5fc6:	85 37       	cpi	r24, 0x75	; 117
    5fc8:	31 f4       	brne	.+12     	; 0x5fd6 <vfprintf+0x24e>
    5fca:	23 2d       	mov	r18, r3
    5fcc:	2f 7e       	andi	r18, 0xEF	; 239
    5fce:	b2 2e       	mov	r11, r18
    5fd0:	2a e0       	ldi	r18, 0x0A	; 10
    5fd2:	30 e0       	ldi	r19, 0x00	; 0
    5fd4:	25 c0       	rjmp	.+74     	; 0x6020 <vfprintf+0x298>
    5fd6:	93 2d       	mov	r25, r3
    5fd8:	99 7f       	andi	r25, 0xF9	; 249
    5fda:	b9 2e       	mov	r11, r25
    5fdc:	8f 36       	cpi	r24, 0x6F	; 111
    5fde:	c1 f0       	breq	.+48     	; 0x6010 <vfprintf+0x288>
    5fe0:	18 f4       	brcc	.+6      	; 0x5fe8 <vfprintf+0x260>
    5fe2:	88 35       	cpi	r24, 0x58	; 88
    5fe4:	79 f0       	breq	.+30     	; 0x6004 <vfprintf+0x27c>
    5fe6:	ae c0       	rjmp	.+348    	; 0x6144 <vfprintf+0x3bc>
    5fe8:	80 37       	cpi	r24, 0x70	; 112
    5fea:	19 f0       	breq	.+6      	; 0x5ff2 <vfprintf+0x26a>
    5fec:	88 37       	cpi	r24, 0x78	; 120
    5fee:	21 f0       	breq	.+8      	; 0x5ff8 <vfprintf+0x270>
    5ff0:	a9 c0       	rjmp	.+338    	; 0x6144 <vfprintf+0x3bc>
    5ff2:	e9 2f       	mov	r30, r25
    5ff4:	e0 61       	ori	r30, 0x10	; 16
    5ff6:	be 2e       	mov	r11, r30
    5ff8:	b4 fe       	sbrs	r11, 4
    5ffa:	0d c0       	rjmp	.+26     	; 0x6016 <vfprintf+0x28e>
    5ffc:	fb 2d       	mov	r31, r11
    5ffe:	f4 60       	ori	r31, 0x04	; 4
    6000:	bf 2e       	mov	r11, r31
    6002:	09 c0       	rjmp	.+18     	; 0x6016 <vfprintf+0x28e>
    6004:	34 fe       	sbrs	r3, 4
    6006:	0a c0       	rjmp	.+20     	; 0x601c <vfprintf+0x294>
    6008:	29 2f       	mov	r18, r25
    600a:	26 60       	ori	r18, 0x06	; 6
    600c:	b2 2e       	mov	r11, r18
    600e:	06 c0       	rjmp	.+12     	; 0x601c <vfprintf+0x294>
    6010:	28 e0       	ldi	r18, 0x08	; 8
    6012:	30 e0       	ldi	r19, 0x00	; 0
    6014:	05 c0       	rjmp	.+10     	; 0x6020 <vfprintf+0x298>
    6016:	20 e1       	ldi	r18, 0x10	; 16
    6018:	30 e0       	ldi	r19, 0x00	; 0
    601a:	02 c0       	rjmp	.+4      	; 0x6020 <vfprintf+0x298>
    601c:	20 e1       	ldi	r18, 0x10	; 16
    601e:	32 e0       	ldi	r19, 0x02	; 2
    6020:	f8 01       	movw	r30, r16
    6022:	b7 fe       	sbrs	r11, 7
    6024:	07 c0       	rjmp	.+14     	; 0x6034 <vfprintf+0x2ac>
    6026:	60 81       	ld	r22, Z
    6028:	71 81       	ldd	r23, Z+1	; 0x01
    602a:	82 81       	ldd	r24, Z+2	; 0x02
    602c:	93 81       	ldd	r25, Z+3	; 0x03
    602e:	0c 5f       	subi	r16, 0xFC	; 252
    6030:	1f 4f       	sbci	r17, 0xFF	; 255
    6032:	06 c0       	rjmp	.+12     	; 0x6040 <vfprintf+0x2b8>
    6034:	60 81       	ld	r22, Z
    6036:	71 81       	ldd	r23, Z+1	; 0x01
    6038:	80 e0       	ldi	r24, 0x00	; 0
    603a:	90 e0       	ldi	r25, 0x00	; 0
    603c:	0e 5f       	subi	r16, 0xFE	; 254
    603e:	1f 4f       	sbci	r17, 0xFF	; 255
    6040:	a3 01       	movw	r20, r6
    6042:	f1 d0       	rcall	.+482    	; 0x6226 <__ultoa_invert>
    6044:	88 2e       	mov	r8, r24
    6046:	86 18       	sub	r8, r6
    6048:	fb 2d       	mov	r31, r11
    604a:	ff 77       	andi	r31, 0x7F	; 127
    604c:	3f 2e       	mov	r3, r31
    604e:	36 fe       	sbrs	r3, 6
    6050:	0d c0       	rjmp	.+26     	; 0x606c <vfprintf+0x2e4>
    6052:	23 2d       	mov	r18, r3
    6054:	2e 7f       	andi	r18, 0xFE	; 254
    6056:	a2 2e       	mov	r10, r18
    6058:	89 14       	cp	r8, r9
    605a:	58 f4       	brcc	.+22     	; 0x6072 <vfprintf+0x2ea>
    605c:	34 fe       	sbrs	r3, 4
    605e:	0b c0       	rjmp	.+22     	; 0x6076 <vfprintf+0x2ee>
    6060:	32 fc       	sbrc	r3, 2
    6062:	09 c0       	rjmp	.+18     	; 0x6076 <vfprintf+0x2ee>
    6064:	83 2d       	mov	r24, r3
    6066:	8e 7e       	andi	r24, 0xEE	; 238
    6068:	a8 2e       	mov	r10, r24
    606a:	05 c0       	rjmp	.+10     	; 0x6076 <vfprintf+0x2ee>
    606c:	b8 2c       	mov	r11, r8
    606e:	a3 2c       	mov	r10, r3
    6070:	03 c0       	rjmp	.+6      	; 0x6078 <vfprintf+0x2f0>
    6072:	b8 2c       	mov	r11, r8
    6074:	01 c0       	rjmp	.+2      	; 0x6078 <vfprintf+0x2f0>
    6076:	b9 2c       	mov	r11, r9
    6078:	a4 fe       	sbrs	r10, 4
    607a:	0f c0       	rjmp	.+30     	; 0x609a <vfprintf+0x312>
    607c:	fe 01       	movw	r30, r28
    607e:	e8 0d       	add	r30, r8
    6080:	f1 1d       	adc	r31, r1
    6082:	80 81       	ld	r24, Z
    6084:	80 33       	cpi	r24, 0x30	; 48
    6086:	21 f4       	brne	.+8      	; 0x6090 <vfprintf+0x308>
    6088:	9a 2d       	mov	r25, r10
    608a:	99 7e       	andi	r25, 0xE9	; 233
    608c:	a9 2e       	mov	r10, r25
    608e:	09 c0       	rjmp	.+18     	; 0x60a2 <vfprintf+0x31a>
    6090:	a2 fe       	sbrs	r10, 2
    6092:	06 c0       	rjmp	.+12     	; 0x60a0 <vfprintf+0x318>
    6094:	b3 94       	inc	r11
    6096:	b3 94       	inc	r11
    6098:	04 c0       	rjmp	.+8      	; 0x60a2 <vfprintf+0x31a>
    609a:	8a 2d       	mov	r24, r10
    609c:	86 78       	andi	r24, 0x86	; 134
    609e:	09 f0       	breq	.+2      	; 0x60a2 <vfprintf+0x31a>
    60a0:	b3 94       	inc	r11
    60a2:	a3 fc       	sbrc	r10, 3
    60a4:	10 c0       	rjmp	.+32     	; 0x60c6 <vfprintf+0x33e>
    60a6:	a0 fe       	sbrs	r10, 0
    60a8:	06 c0       	rjmp	.+12     	; 0x60b6 <vfprintf+0x32e>
    60aa:	b2 14       	cp	r11, r2
    60ac:	80 f4       	brcc	.+32     	; 0x60ce <vfprintf+0x346>
    60ae:	28 0c       	add	r2, r8
    60b0:	92 2c       	mov	r9, r2
    60b2:	9b 18       	sub	r9, r11
    60b4:	0d c0       	rjmp	.+26     	; 0x60d0 <vfprintf+0x348>
    60b6:	b2 14       	cp	r11, r2
    60b8:	58 f4       	brcc	.+22     	; 0x60d0 <vfprintf+0x348>
    60ba:	b6 01       	movw	r22, r12
    60bc:	80 e2       	ldi	r24, 0x20	; 32
    60be:	90 e0       	ldi	r25, 0x00	; 0
    60c0:	76 d0       	rcall	.+236    	; 0x61ae <fputc>
    60c2:	b3 94       	inc	r11
    60c4:	f8 cf       	rjmp	.-16     	; 0x60b6 <vfprintf+0x32e>
    60c6:	b2 14       	cp	r11, r2
    60c8:	18 f4       	brcc	.+6      	; 0x60d0 <vfprintf+0x348>
    60ca:	2b 18       	sub	r2, r11
    60cc:	02 c0       	rjmp	.+4      	; 0x60d2 <vfprintf+0x34a>
    60ce:	98 2c       	mov	r9, r8
    60d0:	21 2c       	mov	r2, r1
    60d2:	a4 fe       	sbrs	r10, 4
    60d4:	0f c0       	rjmp	.+30     	; 0x60f4 <vfprintf+0x36c>
    60d6:	b6 01       	movw	r22, r12
    60d8:	80 e3       	ldi	r24, 0x30	; 48
    60da:	90 e0       	ldi	r25, 0x00	; 0
    60dc:	68 d0       	rcall	.+208    	; 0x61ae <fputc>
    60de:	a2 fe       	sbrs	r10, 2
    60e0:	16 c0       	rjmp	.+44     	; 0x610e <vfprintf+0x386>
    60e2:	a1 fc       	sbrc	r10, 1
    60e4:	03 c0       	rjmp	.+6      	; 0x60ec <vfprintf+0x364>
    60e6:	88 e7       	ldi	r24, 0x78	; 120
    60e8:	90 e0       	ldi	r25, 0x00	; 0
    60ea:	02 c0       	rjmp	.+4      	; 0x60f0 <vfprintf+0x368>
    60ec:	88 e5       	ldi	r24, 0x58	; 88
    60ee:	90 e0       	ldi	r25, 0x00	; 0
    60f0:	b6 01       	movw	r22, r12
    60f2:	0c c0       	rjmp	.+24     	; 0x610c <vfprintf+0x384>
    60f4:	8a 2d       	mov	r24, r10
    60f6:	86 78       	andi	r24, 0x86	; 134
    60f8:	51 f0       	breq	.+20     	; 0x610e <vfprintf+0x386>
    60fa:	a1 fe       	sbrs	r10, 1
    60fc:	02 c0       	rjmp	.+4      	; 0x6102 <vfprintf+0x37a>
    60fe:	8b e2       	ldi	r24, 0x2B	; 43
    6100:	01 c0       	rjmp	.+2      	; 0x6104 <vfprintf+0x37c>
    6102:	80 e2       	ldi	r24, 0x20	; 32
    6104:	a7 fc       	sbrc	r10, 7
    6106:	8d e2       	ldi	r24, 0x2D	; 45
    6108:	b6 01       	movw	r22, r12
    610a:	90 e0       	ldi	r25, 0x00	; 0
    610c:	50 d0       	rcall	.+160    	; 0x61ae <fputc>
    610e:	89 14       	cp	r8, r9
    6110:	30 f4       	brcc	.+12     	; 0x611e <vfprintf+0x396>
    6112:	b6 01       	movw	r22, r12
    6114:	80 e3       	ldi	r24, 0x30	; 48
    6116:	90 e0       	ldi	r25, 0x00	; 0
    6118:	4a d0       	rcall	.+148    	; 0x61ae <fputc>
    611a:	9a 94       	dec	r9
    611c:	f8 cf       	rjmp	.-16     	; 0x610e <vfprintf+0x386>
    611e:	8a 94       	dec	r8
    6120:	f3 01       	movw	r30, r6
    6122:	e8 0d       	add	r30, r8
    6124:	f1 1d       	adc	r31, r1
    6126:	80 81       	ld	r24, Z
    6128:	b6 01       	movw	r22, r12
    612a:	90 e0       	ldi	r25, 0x00	; 0
    612c:	40 d0       	rcall	.+128    	; 0x61ae <fputc>
    612e:	81 10       	cpse	r8, r1
    6130:	f6 cf       	rjmp	.-20     	; 0x611e <vfprintf+0x396>
    6132:	22 20       	and	r2, r2
    6134:	09 f4       	brne	.+2      	; 0x6138 <vfprintf+0x3b0>
    6136:	4e ce       	rjmp	.-868    	; 0x5dd4 <vfprintf+0x4c>
    6138:	b6 01       	movw	r22, r12
    613a:	80 e2       	ldi	r24, 0x20	; 32
    613c:	90 e0       	ldi	r25, 0x00	; 0
    613e:	37 d0       	rcall	.+110    	; 0x61ae <fputc>
    6140:	2a 94       	dec	r2
    6142:	f7 cf       	rjmp	.-18     	; 0x6132 <vfprintf+0x3aa>
    6144:	f6 01       	movw	r30, r12
    6146:	86 81       	ldd	r24, Z+6	; 0x06
    6148:	97 81       	ldd	r25, Z+7	; 0x07
    614a:	02 c0       	rjmp	.+4      	; 0x6150 <vfprintf+0x3c8>
    614c:	8f ef       	ldi	r24, 0xFF	; 255
    614e:	9f ef       	ldi	r25, 0xFF	; 255
    6150:	2b 96       	adiw	r28, 0x0b	; 11
    6152:	0f b6       	in	r0, 0x3f	; 63
    6154:	f8 94       	cli
    6156:	de bf       	out	0x3e, r29	; 62
    6158:	0f be       	out	0x3f, r0	; 63
    615a:	cd bf       	out	0x3d, r28	; 61
    615c:	df 91       	pop	r29
    615e:	cf 91       	pop	r28
    6160:	1f 91       	pop	r17
    6162:	0f 91       	pop	r16
    6164:	ff 90       	pop	r15
    6166:	ef 90       	pop	r14
    6168:	df 90       	pop	r13
    616a:	cf 90       	pop	r12
    616c:	bf 90       	pop	r11
    616e:	af 90       	pop	r10
    6170:	9f 90       	pop	r9
    6172:	8f 90       	pop	r8
    6174:	7f 90       	pop	r7
    6176:	6f 90       	pop	r6
    6178:	5f 90       	pop	r5
    617a:	4f 90       	pop	r4
    617c:	3f 90       	pop	r3
    617e:	2f 90       	pop	r2
    6180:	08 95       	ret

00006182 <strnlen_P>:
    6182:	fc 01       	movw	r30, r24
    6184:	05 90       	lpm	r0, Z+
    6186:	61 50       	subi	r22, 0x01	; 1
    6188:	70 40       	sbci	r23, 0x00	; 0
    618a:	01 10       	cpse	r0, r1
    618c:	d8 f7       	brcc	.-10     	; 0x6184 <strnlen_P+0x2>
    618e:	80 95       	com	r24
    6190:	90 95       	com	r25
    6192:	8e 0f       	add	r24, r30
    6194:	9f 1f       	adc	r25, r31
    6196:	08 95       	ret

00006198 <strnlen>:
    6198:	fc 01       	movw	r30, r24
    619a:	61 50       	subi	r22, 0x01	; 1
    619c:	70 40       	sbci	r23, 0x00	; 0
    619e:	01 90       	ld	r0, Z+
    61a0:	01 10       	cpse	r0, r1
    61a2:	d8 f7       	brcc	.-10     	; 0x619a <strnlen+0x2>
    61a4:	80 95       	com	r24
    61a6:	90 95       	com	r25
    61a8:	8e 0f       	add	r24, r30
    61aa:	9f 1f       	adc	r25, r31
    61ac:	08 95       	ret

000061ae <fputc>:
    61ae:	0f 93       	push	r16
    61b0:	1f 93       	push	r17
    61b2:	cf 93       	push	r28
    61b4:	df 93       	push	r29
    61b6:	fb 01       	movw	r30, r22
    61b8:	23 81       	ldd	r18, Z+3	; 0x03
    61ba:	21 fd       	sbrc	r18, 1
    61bc:	03 c0       	rjmp	.+6      	; 0x61c4 <fputc+0x16>
    61be:	8f ef       	ldi	r24, 0xFF	; 255
    61c0:	9f ef       	ldi	r25, 0xFF	; 255
    61c2:	2c c0       	rjmp	.+88     	; 0x621c <fputc+0x6e>
    61c4:	22 ff       	sbrs	r18, 2
    61c6:	16 c0       	rjmp	.+44     	; 0x61f4 <fputc+0x46>
    61c8:	46 81       	ldd	r20, Z+6	; 0x06
    61ca:	57 81       	ldd	r21, Z+7	; 0x07
    61cc:	24 81       	ldd	r18, Z+4	; 0x04
    61ce:	35 81       	ldd	r19, Z+5	; 0x05
    61d0:	42 17       	cp	r20, r18
    61d2:	53 07       	cpc	r21, r19
    61d4:	44 f4       	brge	.+16     	; 0x61e6 <fputc+0x38>
    61d6:	a0 81       	ld	r26, Z
    61d8:	b1 81       	ldd	r27, Z+1	; 0x01
    61da:	9d 01       	movw	r18, r26
    61dc:	2f 5f       	subi	r18, 0xFF	; 255
    61de:	3f 4f       	sbci	r19, 0xFF	; 255
    61e0:	31 83       	std	Z+1, r19	; 0x01
    61e2:	20 83       	st	Z, r18
    61e4:	8c 93       	st	X, r24
    61e6:	26 81       	ldd	r18, Z+6	; 0x06
    61e8:	37 81       	ldd	r19, Z+7	; 0x07
    61ea:	2f 5f       	subi	r18, 0xFF	; 255
    61ec:	3f 4f       	sbci	r19, 0xFF	; 255
    61ee:	37 83       	std	Z+7, r19	; 0x07
    61f0:	26 83       	std	Z+6, r18	; 0x06
    61f2:	14 c0       	rjmp	.+40     	; 0x621c <fputc+0x6e>
    61f4:	8b 01       	movw	r16, r22
    61f6:	ec 01       	movw	r28, r24
    61f8:	fb 01       	movw	r30, r22
    61fa:	00 84       	ldd	r0, Z+8	; 0x08
    61fc:	f1 85       	ldd	r31, Z+9	; 0x09
    61fe:	e0 2d       	mov	r30, r0
    6200:	19 95       	eicall
    6202:	89 2b       	or	r24, r25
    6204:	e1 f6       	brne	.-72     	; 0x61be <fputc+0x10>
    6206:	d8 01       	movw	r26, r16
    6208:	16 96       	adiw	r26, 0x06	; 6
    620a:	8d 91       	ld	r24, X+
    620c:	9c 91       	ld	r25, X
    620e:	17 97       	sbiw	r26, 0x07	; 7
    6210:	01 96       	adiw	r24, 0x01	; 1
    6212:	17 96       	adiw	r26, 0x07	; 7
    6214:	9c 93       	st	X, r25
    6216:	8e 93       	st	-X, r24
    6218:	16 97       	sbiw	r26, 0x06	; 6
    621a:	ce 01       	movw	r24, r28
    621c:	df 91       	pop	r29
    621e:	cf 91       	pop	r28
    6220:	1f 91       	pop	r17
    6222:	0f 91       	pop	r16
    6224:	08 95       	ret

00006226 <__ultoa_invert>:
    6226:	fa 01       	movw	r30, r20
    6228:	aa 27       	eor	r26, r26
    622a:	28 30       	cpi	r18, 0x08	; 8
    622c:	51 f1       	breq	.+84     	; 0x6282 <__ultoa_invert+0x5c>
    622e:	20 31       	cpi	r18, 0x10	; 16
    6230:	81 f1       	breq	.+96     	; 0x6292 <__ultoa_invert+0x6c>
    6232:	e8 94       	clt
    6234:	6f 93       	push	r22
    6236:	6e 7f       	andi	r22, 0xFE	; 254
    6238:	6e 5f       	subi	r22, 0xFE	; 254
    623a:	7f 4f       	sbci	r23, 0xFF	; 255
    623c:	8f 4f       	sbci	r24, 0xFF	; 255
    623e:	9f 4f       	sbci	r25, 0xFF	; 255
    6240:	af 4f       	sbci	r26, 0xFF	; 255
    6242:	b1 e0       	ldi	r27, 0x01	; 1
    6244:	3e d0       	rcall	.+124    	; 0x62c2 <__ultoa_invert+0x9c>
    6246:	b4 e0       	ldi	r27, 0x04	; 4
    6248:	3c d0       	rcall	.+120    	; 0x62c2 <__ultoa_invert+0x9c>
    624a:	67 0f       	add	r22, r23
    624c:	78 1f       	adc	r23, r24
    624e:	89 1f       	adc	r24, r25
    6250:	9a 1f       	adc	r25, r26
    6252:	a1 1d       	adc	r26, r1
    6254:	68 0f       	add	r22, r24
    6256:	79 1f       	adc	r23, r25
    6258:	8a 1f       	adc	r24, r26
    625a:	91 1d       	adc	r25, r1
    625c:	a1 1d       	adc	r26, r1
    625e:	6a 0f       	add	r22, r26
    6260:	71 1d       	adc	r23, r1
    6262:	81 1d       	adc	r24, r1
    6264:	91 1d       	adc	r25, r1
    6266:	a1 1d       	adc	r26, r1
    6268:	20 d0       	rcall	.+64     	; 0x62aa <__ultoa_invert+0x84>
    626a:	09 f4       	brne	.+2      	; 0x626e <__ultoa_invert+0x48>
    626c:	68 94       	set
    626e:	3f 91       	pop	r19
    6270:	2a e0       	ldi	r18, 0x0A	; 10
    6272:	26 9f       	mul	r18, r22
    6274:	11 24       	eor	r1, r1
    6276:	30 19       	sub	r19, r0
    6278:	30 5d       	subi	r19, 0xD0	; 208
    627a:	31 93       	st	Z+, r19
    627c:	de f6       	brtc	.-74     	; 0x6234 <__ultoa_invert+0xe>
    627e:	cf 01       	movw	r24, r30
    6280:	08 95       	ret
    6282:	46 2f       	mov	r20, r22
    6284:	47 70       	andi	r20, 0x07	; 7
    6286:	40 5d       	subi	r20, 0xD0	; 208
    6288:	41 93       	st	Z+, r20
    628a:	b3 e0       	ldi	r27, 0x03	; 3
    628c:	0f d0       	rcall	.+30     	; 0x62ac <__ultoa_invert+0x86>
    628e:	c9 f7       	brne	.-14     	; 0x6282 <__ultoa_invert+0x5c>
    6290:	f6 cf       	rjmp	.-20     	; 0x627e <__ultoa_invert+0x58>
    6292:	46 2f       	mov	r20, r22
    6294:	4f 70       	andi	r20, 0x0F	; 15
    6296:	40 5d       	subi	r20, 0xD0	; 208
    6298:	4a 33       	cpi	r20, 0x3A	; 58
    629a:	18 f0       	brcs	.+6      	; 0x62a2 <__ultoa_invert+0x7c>
    629c:	49 5d       	subi	r20, 0xD9	; 217
    629e:	31 fd       	sbrc	r19, 1
    62a0:	40 52       	subi	r20, 0x20	; 32
    62a2:	41 93       	st	Z+, r20
    62a4:	02 d0       	rcall	.+4      	; 0x62aa <__ultoa_invert+0x84>
    62a6:	a9 f7       	brne	.-22     	; 0x6292 <__ultoa_invert+0x6c>
    62a8:	ea cf       	rjmp	.-44     	; 0x627e <__ultoa_invert+0x58>
    62aa:	b4 e0       	ldi	r27, 0x04	; 4
    62ac:	a6 95       	lsr	r26
    62ae:	97 95       	ror	r25
    62b0:	87 95       	ror	r24
    62b2:	77 95       	ror	r23
    62b4:	67 95       	ror	r22
    62b6:	ba 95       	dec	r27
    62b8:	c9 f7       	brne	.-14     	; 0x62ac <__ultoa_invert+0x86>
    62ba:	00 97       	sbiw	r24, 0x00	; 0
    62bc:	61 05       	cpc	r22, r1
    62be:	71 05       	cpc	r23, r1
    62c0:	08 95       	ret
    62c2:	9b 01       	movw	r18, r22
    62c4:	ac 01       	movw	r20, r24
    62c6:	0a 2e       	mov	r0, r26
    62c8:	06 94       	lsr	r0
    62ca:	57 95       	ror	r21
    62cc:	47 95       	ror	r20
    62ce:	37 95       	ror	r19
    62d0:	27 95       	ror	r18
    62d2:	ba 95       	dec	r27
    62d4:	c9 f7       	brne	.-14     	; 0x62c8 <__ultoa_invert+0xa2>
    62d6:	62 0f       	add	r22, r18
    62d8:	73 1f       	adc	r23, r19
    62da:	84 1f       	adc	r24, r20
    62dc:	95 1f       	adc	r25, r21
    62de:	a0 1d       	adc	r26, r0
    62e0:	08 95       	ret

000062e2 <_exit>:
    62e2:	f8 94       	cli

000062e4 <__stop_program>:
    62e4:	ff cf       	rjmp	.-2      	; 0x62e4 <__stop_program>

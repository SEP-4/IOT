
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000068e  00800200  00006e9e  00006f32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006e9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f6e  0080088e  0080088e  000075c0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000075c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000761c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b88  00000000  00000000  0000765c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dff0  00000000  00000000  000081e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003937  00000000  00000000  000161d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006f5f  00000000  00000000  00019b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000028f0  00000000  00000000  00020a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000451e  00000000  00000000  0002335c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c8aa  00000000  00000000  0002787a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000aa8  00000000  00000000  00034124  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	92 c7       	rjmp	.+3876   	; 0xf56 <__vector_12>
      32:	00 00       	nop
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 eb 27 	jmp	0x4fd6	; 0x4fd6 <__vector_25>
      68:	0c 94 3d 28 	jmp	0x507a	; 0x507a <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 81 28 	jmp	0x5102	; 0x5102 <__vector_36>
      94:	0c 94 d3 28 	jmp	0x51a6	; 0x51a6 <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 1f 2d 	jmp	0x5a3e	; 0x5a3e <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 17 29 	jmp	0x522e	; 0x522e <__vector_51>
      d0:	0c 94 69 29 	jmp	0x52d2	; 0x52d2 <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 ad 29 	jmp	0x535a	; 0x535a <__vector_54>
      dc:	0c 94 ff 29 	jmp	0x53fe	; 0x53fe <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	85 1d       	adc	r24, r5
      e6:	85 1d       	adc	r24, r5
      e8:	85 1d       	adc	r24, r5
      ea:	bc 1d       	adc	r27, r12
      ec:	c4 1d       	adc	r28, r4
      ee:	d9 1d       	adc	r29, r9
      f0:	85 1d       	adc	r24, r5
      f2:	85 1d       	adc	r24, r5
      f4:	bc 1d       	adc	r27, r12
      f6:	c4 1d       	adc	r28, r4
      f8:	41 2d       	mov	r20, r1
      fa:	b1 2d       	mov	r27, r1
      fc:	b1 2d       	mov	r27, r1
      fe:	b1 2d       	mov	r27, r1
     100:	b1 2d       	mov	r27, r1
     102:	b1 2d       	mov	r27, r1
     104:	b1 2d       	mov	r27, r1
     106:	b1 2d       	mov	r27, r1
     108:	41 2d       	mov	r20, r1
     10a:	b1 2d       	mov	r27, r1
     10c:	b1 2d       	mov	r27, r1
     10e:	b1 2d       	mov	r27, r1
     110:	b1 2d       	mov	r27, r1
     112:	b1 2d       	mov	r27, r1
     114:	b1 2d       	mov	r27, r1
     116:	b1 2d       	mov	r27, r1
     118:	43 2d       	mov	r20, r3
     11a:	b1 2d       	mov	r27, r1
     11c:	b1 2d       	mov	r27, r1
     11e:	b1 2d       	mov	r27, r1
     120:	b1 2d       	mov	r27, r1
     122:	b1 2d       	mov	r27, r1
     124:	b1 2d       	mov	r27, r1
     126:	b1 2d       	mov	r27, r1
     128:	b1 2d       	mov	r27, r1
     12a:	b1 2d       	mov	r27, r1
     12c:	b1 2d       	mov	r27, r1
     12e:	b1 2d       	mov	r27, r1
     130:	b1 2d       	mov	r27, r1
     132:	b1 2d       	mov	r27, r1
     134:	b1 2d       	mov	r27, r1
     136:	b1 2d       	mov	r27, r1
     138:	43 2d       	mov	r20, r3
     13a:	b1 2d       	mov	r27, r1
     13c:	b1 2d       	mov	r27, r1
     13e:	b1 2d       	mov	r27, r1
     140:	b1 2d       	mov	r27, r1
     142:	b1 2d       	mov	r27, r1
     144:	b1 2d       	mov	r27, r1
     146:	b1 2d       	mov	r27, r1
     148:	b1 2d       	mov	r27, r1
     14a:	b1 2d       	mov	r27, r1
     14c:	b1 2d       	mov	r27, r1
     14e:	b1 2d       	mov	r27, r1
     150:	b1 2d       	mov	r27, r1
     152:	b1 2d       	mov	r27, r1
     154:	b1 2d       	mov	r27, r1
     156:	b1 2d       	mov	r27, r1
     158:	ad 2d       	mov	r26, r13
     15a:	b1 2d       	mov	r27, r1
     15c:	b1 2d       	mov	r27, r1
     15e:	b1 2d       	mov	r27, r1
     160:	b1 2d       	mov	r27, r1
     162:	b1 2d       	mov	r27, r1
     164:	b1 2d       	mov	r27, r1
     166:	b1 2d       	mov	r27, r1
     168:	78 2d       	mov	r23, r8
     16a:	b1 2d       	mov	r27, r1
     16c:	b1 2d       	mov	r27, r1
     16e:	b1 2d       	mov	r27, r1
     170:	b1 2d       	mov	r27, r1
     172:	b1 2d       	mov	r27, r1
     174:	b1 2d       	mov	r27, r1
     176:	b1 2d       	mov	r27, r1
     178:	b1 2d       	mov	r27, r1
     17a:	b1 2d       	mov	r27, r1
     17c:	b1 2d       	mov	r27, r1
     17e:	b1 2d       	mov	r27, r1
     180:	b1 2d       	mov	r27, r1
     182:	b1 2d       	mov	r27, r1
     184:	b1 2d       	mov	r27, r1
     186:	b1 2d       	mov	r27, r1
     188:	6c 2d       	mov	r22, r12
     18a:	b1 2d       	mov	r27, r1
     18c:	b1 2d       	mov	r27, r1
     18e:	b1 2d       	mov	r27, r1
     190:	b1 2d       	mov	r27, r1
     192:	b1 2d       	mov	r27, r1
     194:	b1 2d       	mov	r27, r1
     196:	b1 2d       	mov	r27, r1
     198:	90 2d       	mov	r25, r0

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <prvCheckTasksWaitingTermination>
     2a0:	80 91 87 15 	lds	r24, 0x1587	; 0x801587 <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	90 d5       	rcall	.+2848   	; 0xdca <vPortYield>
     2aa:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 02 1b 	call	0x3604	; 0x3604 <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <prvProcessTimerOrBlockTask>
     2c8:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	18 e0       	ldi	r17, 0x08	; 8
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	ee e9       	ldi	r30, 0x9E	; 158
     2e6:	fe e6       	ldi	r31, 0x6E	; 110
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	ae 38       	cpi	r26, 0x8E	; 142
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	27 e1       	ldi	r18, 0x17	; 23
     2fa:	ae e8       	ldi	r26, 0x8E	; 142
     2fc:	b8 e0       	ldi	r27, 0x08	; 8
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	ac 3f       	cpi	r26, 0xFC	; 252
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <main>
     30c:	0c 94 4d 37 	jmp	0x6e9a	; 0x6e9a <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <Application_getEventGroup>:
// Declare a variable to hold the created event group.
EventGroupHandle_t xCreatedEventGroup;

EventGroupHandle_t Application_getEventGroup(){
	return xCreatedEventGroup;
}
     312:	80 91 e2 17 	lds	r24, 0x17E2	; 0x8017e2 <xCreatedEventGroup>
     316:	90 91 e3 17 	lds	r25, 0x17E3	; 0x8017e3 <xCreatedEventGroup+0x1>
     31a:	08 95       	ret

0000031c <Application_aFunctionToClearBits>:
void Application_aFunctionToClearBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Clear bit 0 and bit 4 in xEventGroup. */
  uxBits = xEventGroupClearBits(
     31c:	41 e1       	ldi	r20, 0x11	; 17
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	80 c2       	rjmp	.+1280   	; 0x826 <xEventGroupClearBits>
     326:	08 95       	ret

00000328 <Application_aFunctionToWaitBits>:
EventGroupHandle_t Application_getEventGroup(){
	return xCreatedEventGroup;
}

void Application_aFunctionToWaitBits( EventGroupHandle_t xEventGroup )
{
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	ec 01       	movw	r28, r24
EventBits_t uxBits;
const TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;

  /* Wait a maximum of 100ms for either bit 0 or bit 4 to be set within
  the event group.  Clear the bits before exiting. */
  uxBits = xEventGroupWaitBits(
     338:	0f 2e       	mov	r0, r31
     33a:	f6 e0       	ldi	r31, 0x06	; 6
     33c:	cf 2e       	mov	r12, r31
     33e:	d1 2c       	mov	r13, r1
     340:	e1 2c       	mov	r14, r1
     342:	f1 2c       	mov	r15, r1
     344:	f0 2d       	mov	r31, r0
     346:	01 e0       	ldi	r16, 0x01	; 1
     348:	20 e0       	ldi	r18, 0x00	; 0
     34a:	41 e1       	ldi	r20, 0x11	; 17
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	c9 d1       	rcall	.+914    	; 0x6e6 <xEventGroupWaitBits>
            BIT_0 | BIT_4, /* The bits within the event group to wait for. */
            pdFALSE,        /* BIT_0 & BIT_4 should not be cleared before returning. */
            pdTRUE,       /* Wait for both bits, either bit will do. */
            xTicksToWait );/* Wait a maximum of 100ms for either bit to be set. */

  if( ( uxBits & ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )
     354:	dc 01       	movw	r26, r24
     356:	cb 01       	movw	r24, r22
     358:	81 71       	andi	r24, 0x11	; 17
     35a:	99 27       	eor	r25, r25
     35c:	aa 27       	eor	r26, r26
     35e:	bb 27       	eor	r27, r27
     360:	41 97       	sbiw	r24, 0x11	; 17
     362:	a1 05       	cpc	r26, r1
     364:	b1 05       	cpc	r27, r1
     366:	a9 f4       	brne	.+42     	; 0x392 <Application_aFunctionToWaitBits+0x6a>
  {
      /* xEventGroupWaitBits() returned because both bits were set. */
	  printf("setting the bits, they are set");
     368:	8f e6       	ldi	r24, 0x6F	; 111
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	9f 93       	push	r25
     36e:	8f 93       	push	r24
     370:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
	  SensorDataPackageHandler_SetHumidity(hih820_getHumidityInUint16());
     374:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <hih820_getHumidityInUint16>
     378:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <SensorDataPackageHandler_SetHumidity>
	  SensorDataPackageHandler_SetTemperature(hih820_getTemperatureInUint16());
     37c:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <hih820_getTemperatureInUint16>
     380:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <SensorDataPackageHandler_SetTemperature>
	  SensorDataPackageHandler_SetCO2(CO2Sensor_getCO2InUint16());
     384:	5f d0       	rcall	.+190    	; 0x444 <CO2Sensor_getCO2InUint16>
     386:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <SensorDataPackageHandler_SetCO2>
	  Application_aFunctionToClearBits( xEventGroup );
     38a:	ce 01       	movw	r24, r28
     38c:	c7 df       	rcall	.-114    	; 0x31c <Application_aFunctionToClearBits>
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
  else
  {
      /* xEventGroupWaitBits() returned because xTicksToWait ticks passed
      without either BIT_0 or BIT_4 becoming set. */
  }
}
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	0f 91       	pop	r16
     398:	ff 90       	pop	r15
     39a:	ef 90       	pop	r14
     39c:	df 90       	pop	r13
     39e:	cf 90       	pop	r12
     3a0:	08 95       	ret

000003a2 <Application_handler_task>:
	,  Application_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void Application_handler_task(void *pvParameters)
{
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	00 d0       	rcall	.+0      	; 0x3a8 <Application_handler_task+0x6>
     3a8:	1f 92       	push	r1
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
	printf("startApplication");
     3ae:	8e e8       	ldi	r24, 0x8E	; 142
     3b0:	92 e0       	ldi	r25, 0x02	; 2
     3b2:	9f 93       	push	r25
     3b4:	8f 93       	push	r24
     3b6:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
	(void)pvParameters;
	xCreatedEventGroup = xEventGroupCreate();
     3ba:	82 d1       	rcall	.+772    	; 0x6c0 <xEventGroupCreate>
     3bc:	90 93 e3 17 	sts	0x17E3, r25	; 0x8017e3 <xCreatedEventGroup+0x1>
     3c0:	80 93 e2 17 	sts	0x17E2, r24	; 0x8017e2 <xCreatedEventGroup>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300UL); // Upload message every 1 minutes (300 ms)
	xLastWakeTime = xTaskGetTickCount();
     3c4:	0e 94 17 11 	call	0x222e	; 0x222e <xTaskGetTickCount>
     3c8:	69 83       	std	Y+1, r22	; 0x01
     3ca:	7a 83       	std	Y+2, r23	; 0x02
     3cc:	8b 83       	std	Y+3, r24	; 0x03
     3ce:	9c 83       	std	Y+4, r25	; 0x04
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     3d4:	42 e1       	ldi	r20, 0x12	; 18
     3d6:	50 e0       	ldi	r21, 0x00	; 0
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	ce 01       	movw	r24, r28
     3de:	01 96       	adiw	r24, 0x01	; 1
     3e0:	0e 94 2d 13 	call	0x265a	; 0x265a <xTaskDelayUntil>
		// Was the event group created successfully?
		if( xCreatedEventGroup == NULL )
     3e4:	80 91 e2 17 	lds	r24, 0x17E2	; 0x8017e2 <xCreatedEventGroup>
     3e8:	90 91 e3 17 	lds	r25, 0x17E3	; 0x8017e3 <xCreatedEventGroup+0x1>
     3ec:	00 97       	sbiw	r24, 0x00	; 0
		// The event group was not created because there was insufficient
		// FreeRTOS heap available.
		}
		else
		{
			Application_aFunctionToWaitBits( xCreatedEventGroup);
     3ee:	91 f3       	breq	.-28     	; 0x3d4 <Application_handler_task+0x32>
     3f0:	9b df       	rcall	.-202    	; 0x328 <Application_aFunctionToWaitBits>
     3f2:	f0 cf       	rjmp	.-32     	; 0x3d4 <Application_handler_task+0x32>

000003f4 <Application_handler_initialise>:

/*-----------------------------------------------------------*/

void Application_handler_task( void *pvParameters );

void Application_handler_initialise(UBaseType_t Application_task_priority){
     3f4:	ef 92       	push	r14
     3f6:	ff 92       	push	r15
     3f8:	0f 93       	push	r16
	xTaskCreate(
     3fa:	e1 2c       	mov	r14, r1
     3fc:	f1 2c       	mov	r15, r1
     3fe:	08 2f       	mov	r16, r24
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	40 ec       	ldi	r20, 0xC0	; 192
     406:	50 e0       	ldi	r21, 0x00	; 0
     408:	6f e9       	ldi	r22, 0x9F	; 159
     40a:	72 e0       	ldi	r23, 0x02	; 2
     40c:	81 ed       	ldi	r24, 0xD1	; 209
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	0e 94 8d 10 	call	0x211a	; 0x211a <xTaskCreate>
	,  "ApplicationHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  Application_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     414:	0f 91       	pop	r16
     416:	ff 90       	pop	r15
     418:	ef 90       	pop	r14
     41a:	08 95       	ret

0000041c <CO2Sensor_handler_initialise>:
mh_z19_returnCode_t getCO2return;


void CO2Sensor_handler_task( void *pvParameters );

void CO2Sensor_handler_initialise(UBaseType_t CO2_task_priority){
     41c:	ef 92       	push	r14
     41e:	ff 92       	push	r15
     420:	0f 93       	push	r16
	
	xTaskCreate(
     422:	e1 2c       	mov	r14, r1
     424:	f1 2c       	mov	r15, r1
     426:	08 2f       	mov	r16, r24
     428:	20 e0       	ldi	r18, 0x00	; 0
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	40 ec       	ldi	r20, 0xC0	; 192
     42e:	50 e0       	ldi	r21, 0x00	; 0
     430:	6f ea       	ldi	r22, 0xAF	; 175
     432:	72 e0       	ldi	r23, 0x02	; 2
     434:	8d e2       	ldi	r24, 0x2D	; 45
     436:	92 e0       	ldi	r25, 0x02	; 2
     438:	0e 94 8d 10 	call	0x211a	; 0x211a <xTaskCreate>
	,  "CO2Hand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  CO2_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     43c:	0f 91       	pop	r16
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	08 95       	ret

00000444 <CO2Sensor_getCO2InUint16>:
}


uint16_t CO2Sensor_getCO2InUint16(){
	return CO2ppm;
}
     444:	80 91 e6 17 	lds	r24, 0x17E6	; 0x8017e6 <CO2ppm>
     448:	90 91 e7 17 	lds	r25, 0x17E7	; 0x8017e7 <CO2ppm+0x1>
     44c:	08 95       	ret

0000044e <CO2Sensor_aFunctionToSetBits>:
void CO2Sensor_aFunctionToSetBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Set bit 0  in xEventGroup. */
  uxBits = xEventGroupSetBits(
     44e:	41 e0       	ldi	r20, 0x01	; 1
     450:	50 e0       	ldi	r21, 0x00	; 0
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	04 c2       	rjmp	.+1032   	; 0x860 <xEventGroupSetBits>
     458:	08 95       	ret

0000045a <CO2Sensor_handler_task>:
	,  CO2_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void CO2Sensor_handler_task(void *pvParameters)
{
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	00 d0       	rcall	.+0      	; 0x460 <CO2Sensor_handler_task+0x6>
     460:	1f 92       	push	r1
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
	printf("startCO2");
     466:	87 eb       	ldi	r24, 0xB7	; 183
     468:	92 e0       	ldi	r25, 0x02	; 2
     46a:	9f 93       	push	r25
     46c:	8f 93       	push	r24
     46e:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
	(void)pvParameters;
	mh_z19_injectCallBack(NULL);
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 30 26 	call	0x4c60	; 0x4c60 <mh_z19_injectCallBack>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     47a:	0e 94 17 11 	call	0x222e	; 0x222e <xTaskGetTickCount>
     47e:	69 83       	std	Y+1, r22	; 0x01
     480:	7a 83       	std	Y+2, r23	; 0x02
     482:	8b 83       	std	Y+3, r24	; 0x03
     484:	9c 83       	std	Y+4, r25	; 0x04
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     48a:	48 ea       	ldi	r20, 0xA8	; 168
     48c:	58 e4       	ldi	r21, 0x48	; 72
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	ce 01       	movw	r24, r28
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	0e 94 2d 13 	call	0x265a	; 0x265a <xTaskDelayUntil>
		rc = mh_z19_takeMeassuring();
     49a:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <mh_z19_takeMeassuring>
     49e:	80 93 e4 17 	sts	0x17E4, r24	; 0x8017e4 <rc>
		if (rc == MHZ19_OK)
     4a2:	81 11       	cpse	r24, r1
     4a4:	f2 cf       	rjmp	.-28     	; 0x48a <CO2Sensor_handler_task+0x30>
		{
			vTaskDelay(50);
     4a6:	62 e3       	ldi	r22, 0x32	; 50
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0e 94 92 13 	call	0x2724	; 0x2724 <vTaskDelay>
			if(getCO2return == MHZ19_OK){
     4b2:	80 91 e5 17 	lds	r24, 0x17E5	; 0x8017e5 <getCO2return>
     4b6:	81 11       	cpse	r24, r1
     4b8:	09 c0       	rjmp	.+18     	; 0x4cc <CO2Sensor_handler_task+0x72>
				getCO2return = mh_z19_getCo2Ppm(&CO2ppm);
     4ba:	86 ee       	ldi	r24, 0xE6	; 230
     4bc:	97 e1       	ldi	r25, 0x17	; 23
     4be:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <mh_z19_getCo2Ppm>
     4c2:	80 93 e5 17 	sts	0x17E5, r24	; 0x8017e5 <getCO2return>
				CO2Sensor_aFunctionToSetBits(Application_getEventGroup());
     4c6:	25 df       	rcall	.-438    	; 0x312 <Application_getEventGroup>
     4c8:	c2 df       	rcall	.-124    	; 0x44e <CO2Sensor_aFunctionToSetBits>
     4ca:	df cf       	rjmp	.-66     	; 0x48a <CO2Sensor_handler_task+0x30>
			}
			else if(getCO2return == MHZ19_NO_MEASSURING_AVAILABLE){
     4cc:	81 30       	cpi	r24, 0x01	; 1
     4ce:	e9 f6       	brne	.-70     	; 0x48a <CO2Sensor_handler_task+0x30>
				printf("Didn't get the measurements");
     4d0:	80 ec       	ldi	r24, 0xC0	; 192
     4d2:	92 e0       	ldi	r25, 0x02	; 2
     4d4:	9f 93       	push	r25
     4d6:	8f 93       	push	r24
     4d8:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	d4 cf       	rjmp	.-88     	; 0x48a <CO2Sensor_handler_task+0x30>

000004e2 <configuration_create>:
	}
}

uint8_t configuration_get_humidity_data(){
	return humidity_setting;
}
     4e2:	0f 93       	push	r16
     4e4:	80 91 8e 08 	lds	r24, 0x088E	; 0x80088e <__data_end>
     4e8:	90 91 8f 08 	lds	r25, 0x088F	; 0x80088f <__data_end+0x1>
     4ec:	89 2b       	or	r24, r25
     4ee:	89 f4       	brne	.+34     	; 0x512 <configuration_create+0x30>
     4f0:	43 e0       	ldi	r20, 0x03	; 3
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	5e d6       	rcall	.+3260   	; 0x11b4 <xQueueGenericCreate>
     4f8:	90 93 8f 08 	sts	0x088F, r25	; 0x80088f <__data_end+0x1>
     4fc:	80 93 8e 08 	sts	0x088E, r24	; 0x80088e <__data_end>
     500:	00 97       	sbiw	r24, 0x00	; 0
     502:	39 f0       	breq	.+14     	; 0x512 <configuration_create+0x30>
     504:	00 e0       	ldi	r16, 0x00	; 0
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	a9 01       	movw	r20, r18
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	74 d6       	rcall	.+3304   	; 0x11fa <xQueueGenericSend>
     512:	0f 91       	pop	r16
     514:	08 95       	ret

00000516 <configuration_set_windows_data>:
     516:	cf 93       	push	r28
     518:	c8 2f       	mov	r28, r24
     51a:	1f 92       	push	r1
     51c:	8f 93       	push	r24
     51e:	8c ed       	ldi	r24, 0xDC	; 220
     520:	92 e0       	ldi	r25, 0x02	; 2
     522:	9f 93       	push	r25
     524:	8f 93       	push	r24
     526:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	c1 11       	cpse	r28, r1
     534:	04 c0       	rjmp	.+8      	; 0x53e <configuration_set_windows_data+0x28>
     536:	8c e9       	ldi	r24, 0x9C	; 156
     538:	80 93 e9 17 	sts	0x17E9, r24	; 0x8017e9 <windows_settings>
     53c:	03 c0       	rjmp	.+6      	; 0x544 <configuration_set_windows_data+0x2e>
     53e:	84 e6       	ldi	r24, 0x64	; 100
     540:	80 93 e9 17 	sts	0x17E9, r24	; 0x8017e9 <windows_settings>
     544:	cf 91       	pop	r28
     546:	08 95       	ret

00000548 <configuration_set_humidity_data>:

void configuration_set_humidity_data(uint8_t value){
     548:	cf 93       	push	r28
     54a:	c8 2f       	mov	r28, r24
	printf("%d : set Humidity value \n",value);
     54c:	1f 92       	push	r1
     54e:	8f 93       	push	r24
     550:	85 ef       	ldi	r24, 0xF5	; 245
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	9f 93       	push	r25
     556:	8f 93       	push	r24
     558:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
	if(value == 0){
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	c1 11       	cpse	r28, r1
     566:	04 c0       	rjmp	.+8      	; 0x570 <configuration_set_humidity_data+0x28>
		humidity_setting = -100;
     568:	8c e9       	ldi	r24, 0x9C	; 156
     56a:	80 93 e8 17 	sts	0x17E8, r24	; 0x8017e8 <humidity_setting>
     56e:	03 c0       	rjmp	.+6      	; 0x576 <configuration_set_humidity_data+0x2e>
	}else{
		humidity_setting = 100;
     570:	84 e6       	ldi	r24, 0x64	; 100
     572:	80 93 e8 17 	sts	0x17E8, r24	; 0x8017e8 <humidity_setting>
	}
}
     576:	cf 91       	pop	r28
     578:	08 95       	ret

0000057a <get_mutex>:

SemaphoreHandle_t get_mutex(){
	return _configurationSemaphore ;
     57a:	80 91 8e 08 	lds	r24, 0x088E	; 0x80088e <__data_end>
     57e:	90 91 8f 08 	lds	r25, 0x088F	; 0x80088f <__data_end+0x1>
     582:	08 95       	ret

00000584 <DownLinkHandler_lora_handler_task>:
	,  NULL );
}

void DownLinkHandler_lora_handler_task( void *pvParameters )
{
	configuration_create();
     584:	ae df       	rcall	.-164    	; 0x4e2 <configuration_create>
	SemaphoreHandle_t semaphore_mutex = get_mutex();
     586:	f9 df       	rcall	.-14     	; 0x57a <get_mutex>
     588:	7c 01       	movw	r14, r24
     58a:	00 e0       	ldi	r16, 0x00	; 0
	xSemaphoreGive(semaphore_mutex);
     58c:	20 e0       	ldi	r18, 0x00	; 0
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	a9 01       	movw	r20, r18
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	31 d6       	rcall	.+3170   	; 0x11fa <xQueueGenericSend>
     598:	8f e0       	ldi	r24, 0x0F	; 15
	
	for(;;)
	{
		printf("startLoraDownlinkTask\n");
     59a:	93 e0       	ldi	r25, 0x03	; 3
     59c:	0e 94 91 36 	call	0x6d22	; 0x6d22 <puts>
     5a0:	83 e0       	ldi	r24, 0x03	; 3
		status_leds_shortPuls(led_ST4);  // OPTIONAL
     5a2:	0e 94 2c 2c 	call	0x5858	; 0x5858 <status_leds_shortPuls>
     5a6:	0f ef       	ldi	r16, 0xFF	; 255
		xMessageBufferReceive(_downLinkMessageBufferHandle, &_downlink_payload, sizeof(lora_driver_payload_t), portMAX_DELAY);
     5a8:	1f ef       	ldi	r17, 0xFF	; 255
     5aa:	98 01       	movw	r18, r16
     5ac:	46 e1       	ldi	r20, 0x16	; 22
     5ae:	50 e0       	ldi	r21, 0x00	; 0
     5b0:	60 e9       	ldi	r22, 0x90	; 144
     5b2:	78 e0       	ldi	r23, 0x08	; 8
     5b4:	80 91 ec 17 	lds	r24, 0x17EC	; 0x8017ec <_downLinkMessageBufferHandle>
     5b8:	90 91 ed 17 	lds	r25, 0x17ED	; 0x8017ed <_downLinkMessageBufferHandle+0x1>
     5bc:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <xStreamBufferReceive>
     5c0:	c0 e9       	ldi	r28, 0x90	; 144
		printf("DOWN LINK: from port: %d with %d bytes received!", _downlink_payload.portNo, _downlink_payload.len); // Just for Debug
     5c2:	d8 e0       	ldi	r29, 0x08	; 8
     5c4:	99 81       	ldd	r25, Y+1	; 0x01
     5c6:	88 81       	ld	r24, Y
     5c8:	1f 92       	push	r1
     5ca:	9f 93       	push	r25
     5cc:	1f 92       	push	r1
     5ce:	8f 93       	push	r24
     5d0:	85 e2       	ldi	r24, 0x25	; 37
     5d2:	93 e0       	ldi	r25, 0x03	; 3
     5d4:	9f 93       	push	r25
     5d6:	8f 93       	push	r24
     5d8:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
		if (4 == _downlink_payload.len) // Check that we have got the expected 4 bytes
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	84 30       	cpi	r24, 0x04	; 4
     5ec:	a9 f6       	brne	.-86     	; 0x598 <DownLinkHandler_lora_handler_task+0x14>
     5ee:	9c 81       	ldd	r25, Y+4	; 0x04
		{
			// decode the payload into our variables
			humDataSetting  = (_downlink_payload.bytes[2]);
     5f0:	90 93 eb 17 	sts	0x17EB, r25	; 0x8017eb <humDataSetting>
     5f4:	8d 81       	ldd	r24, Y+5	; 0x05
			windowDataSetting = (_downlink_payload.bytes[3]);	
     5f6:	80 93 ea 17 	sts	0x17EA, r24	; 0x8017ea <windowDataSetting>
     5fa:	1f 92       	push	r1
			printf("%d : Window Setting \n%d : Humidity Setting",windowDataSetting,humDataSetting);
     5fc:	9f 93       	push	r25
     5fe:	28 2f       	mov	r18, r24
     600:	08 2e       	mov	r0, r24
     602:	00 0c       	add	r0, r0
     604:	33 0b       	sbc	r19, r19
     606:	3f 93       	push	r19
     608:	8f 93       	push	r24
     60a:	86 e5       	ldi	r24, 0x56	; 86
     60c:	93 e0       	ldi	r25, 0x03	; 3
     60e:	9f 93       	push	r25
     610:	8f 93       	push	r24
     612:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
     620:	0f 90       	pop	r0
     622:	4f ef       	ldi	r20, 0xFF	; 255
			for(;;){
				if(xSemaphoreTake(semaphore_mutex, portMAX_DELAY)){
     624:	5f ef       	ldi	r21, 0xFF	; 255
     626:	ba 01       	movw	r22, r20
     628:	c7 01       	movw	r24, r14
     62a:	61 d7       	rcall	.+3778   	; 0x14ee <xQueueSemaphoreTake>
     62c:	88 23       	and	r24, r24
     62e:	c9 f3       	breq	.-14     	; 0x622 <DownLinkHandler_lora_handler_task+0x9e>
					configuration_set_windows_data(windowDataSetting);
     630:	80 91 ea 17 	lds	r24, 0x17EA	; 0x8017ea <windowDataSetting>
     634:	70 df       	rcall	.-288    	; 0x516 <configuration_set_windows_data>
					configuration_set_humidity_data(humDataSetting);
     636:	80 91 eb 17 	lds	r24, 0x17EB	; 0x8017eb <humDataSetting>
     63a:	86 df       	rcall	.-244    	; 0x548 <configuration_set_humidity_data>
     63c:	00 e0       	ldi	r16, 0x00	; 0
					xSemaphoreGive(semaphore_mutex);
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	a9 01       	movw	r20, r18
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	c7 01       	movw	r24, r14
     64a:	d7 d5       	rcall	.+2990   	; 0x11fa <xQueueGenericSend>
     64c:	a5 cf       	rjmp	.-182    	; 0x598 <DownLinkHandler_lora_handler_task+0x14>

0000064e <DownLinkHandler_lora_handler_initialise>:
					break;
     64e:	ef 92       	push	r14
MessageBufferHandle_t _downLinkMessageBufferHandle;



void DownLinkHandler_lora_handler_initialise(UBaseType_t DownLinkHandler_lora_handler_task_priority, MessageBufferHandle_t downLinkMessageBufferHandle)
{
     650:	ff 92       	push	r15
     652:	0f 93       	push	r16
	_downLinkMessageBufferHandle = downLinkMessageBufferHandle;
     654:	70 93 ed 17 	sts	0x17ED, r23	; 0x8017ed <_downLinkMessageBufferHandle+0x1>
     658:	60 93 ec 17 	sts	0x17EC, r22	; 0x8017ec <_downLinkMessageBufferHandle>
	xTaskCreate(
     65c:	e1 2c       	mov	r14, r1
     65e:	f1 2c       	mov	r15, r1
     660:	08 2f       	mov	r16, r24
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	48 e8       	ldi	r20, 0x88	; 136
     668:	51 e0       	ldi	r21, 0x01	; 1
     66a:	61 e8       	ldi	r22, 0x81	; 129
     66c:	73 e0       	ldi	r23, 0x03	; 3
     66e:	82 ec       	ldi	r24, 0xC2	; 194
     670:	92 e0       	ldi	r25, 0x02	; 2
     672:	0e 94 8d 10 	call	0x211a	; 0x211a <xTaskCreate>
	,  "DownLinkHandler"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  DownLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     676:	0f 91       	pop	r16
     678:	ff 90       	pop	r15
     67a:	ef 90       	pop	r14
     67c:	08 95       	ret

0000067e <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     67e:	0f 93       	push	r16
     680:	01 11       	cpse	r16, r1
     682:	0c c0       	rjmp	.+24     	; 0x69c <prvTestWaitCondition+0x1e>
     684:	dc 01       	movw	r26, r24
     686:	cb 01       	movw	r24, r22
     688:	82 23       	and	r24, r18
     68a:	93 23       	and	r25, r19
     68c:	a4 23       	and	r26, r20
     68e:	b5 23       	and	r27, r21
     690:	89 2b       	or	r24, r25
     692:	8a 2b       	or	r24, r26
     694:	8b 2b       	or	r24, r27
     696:	79 f4       	brne	.+30     	; 0x6b6 <prvTestWaitCondition+0x38>
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	10 c0       	rjmp	.+32     	; 0x6bc <prvTestWaitCondition+0x3e>
     69c:	dc 01       	movw	r26, r24
     69e:	cb 01       	movw	r24, r22
     6a0:	82 23       	and	r24, r18
     6a2:	93 23       	and	r25, r19
     6a4:	a4 23       	and	r26, r20
     6a6:	b5 23       	and	r27, r21
     6a8:	28 17       	cp	r18, r24
     6aa:	39 07       	cpc	r19, r25
     6ac:	4a 07       	cpc	r20, r26
     6ae:	5b 07       	cpc	r21, r27
     6b0:	21 f0       	breq	.+8      	; 0x6ba <prvTestWaitCondition+0x3c>
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	03 c0       	rjmp	.+6      	; 0x6bc <prvTestWaitCondition+0x3e>
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	01 c0       	rjmp	.+2      	; 0x6bc <prvTestWaitCondition+0x3e>
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	0f 91       	pop	r16
     6be:	08 95       	ret

000006c0 <xEventGroupCreate>:
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	8f e0       	ldi	r24, 0x0F	; 15
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	cc d1       	rcall	.+920    	; 0xa62 <pvPortMalloc>
     6ca:	ec 01       	movw	r28, r24
     6cc:	00 97       	sbiw	r24, 0x00	; 0
     6ce:	39 f0       	breq	.+14     	; 0x6de <xEventGroupCreate+0x1e>
     6d0:	fc 01       	movw	r30, r24
     6d2:	11 92       	st	Z+, r1
     6d4:	11 92       	st	Z+, r1
     6d6:	11 92       	st	Z+, r1
     6d8:	11 92       	st	Z+, r1
     6da:	cf 01       	movw	r24, r30
     6dc:	a8 d2       	rcall	.+1360   	; 0xc2e <vListInitialise>
     6de:	ce 01       	movw	r24, r28
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <xEventGroupWaitBits>:
     6e6:	2f 92       	push	r2
     6e8:	3f 92       	push	r3
     6ea:	4f 92       	push	r4
     6ec:	5f 92       	push	r5
     6ee:	6f 92       	push	r6
     6f0:	7f 92       	push	r7
     6f2:	8f 92       	push	r8
     6f4:	9f 92       	push	r9
     6f6:	af 92       	push	r10
     6f8:	bf 92       	push	r11
     6fa:	cf 92       	push	r12
     6fc:	df 92       	push	r13
     6fe:	ef 92       	push	r14
     700:	ff 92       	push	r15
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	ec 01       	movw	r28, r24
     70c:	4a 01       	movw	r8, r20
     70e:	5b 01       	movw	r10, r22
     710:	62 2e       	mov	r6, r18
     712:	70 2e       	mov	r7, r16
     714:	0e 94 11 11 	call	0x2222	; 0x2222 <vTaskSuspendAll>
     718:	28 80       	ld	r2, Y
     71a:	39 80       	ldd	r3, Y+1	; 0x01
     71c:	4a 80       	ldd	r4, Y+2	; 0x02
     71e:	5b 80       	ldd	r5, Y+3	; 0x03
     720:	a5 01       	movw	r20, r10
     722:	94 01       	movw	r18, r8
     724:	c2 01       	movw	r24, r4
     726:	b1 01       	movw	r22, r2
     728:	aa df       	rcall	.-172    	; 0x67e <prvTestWaitCondition>
     72a:	88 23       	and	r24, r24
     72c:	a1 f0       	breq	.+40     	; 0x756 <xEventGroupWaitBits+0x70>
     72e:	66 20       	and	r6, r6
     730:	89 f1       	breq	.+98     	; 0x794 <xEventGroupWaitBits+0xae>
     732:	d5 01       	movw	r26, r10
     734:	c4 01       	movw	r24, r8
     736:	80 95       	com	r24
     738:	90 95       	com	r25
     73a:	a0 95       	com	r26
     73c:	b0 95       	com	r27
     73e:	82 21       	and	r24, r2
     740:	93 21       	and	r25, r3
     742:	a4 21       	and	r26, r4
     744:	b5 21       	and	r27, r5
     746:	88 83       	st	Y, r24
     748:	99 83       	std	Y+1, r25	; 0x01
     74a:	aa 83       	std	Y+2, r26	; 0x02
     74c:	bb 83       	std	Y+3, r27	; 0x03
     74e:	c1 2c       	mov	r12, r1
     750:	d1 2c       	mov	r13, r1
     752:	76 01       	movw	r14, r12
     754:	22 c0       	rjmp	.+68     	; 0x79a <xEventGroupWaitBits+0xb4>
     756:	c1 14       	cp	r12, r1
     758:	d1 04       	cpc	r13, r1
     75a:	e1 04       	cpc	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	e9 f0       	breq	.+58     	; 0x79a <xEventGroupWaitBits+0xb4>
     760:	61 10       	cpse	r6, r1
     762:	04 c0       	rjmp	.+8      	; 0x76c <xEventGroupWaitBits+0x86>
     764:	40 e0       	ldi	r20, 0x00	; 0
     766:	50 e0       	ldi	r21, 0x00	; 0
     768:	ba 01       	movw	r22, r20
     76a:	04 c0       	rjmp	.+8      	; 0x774 <xEventGroupWaitBits+0x8e>
     76c:	40 e0       	ldi	r20, 0x00	; 0
     76e:	50 e0       	ldi	r21, 0x00	; 0
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	71 e0       	ldi	r23, 0x01	; 1
     774:	71 10       	cpse	r7, r1
     776:	74 60       	ori	r23, 0x04	; 4
     778:	48 29       	or	r20, r8
     77a:	59 29       	or	r21, r9
     77c:	6a 29       	or	r22, r10
     77e:	7b 29       	or	r23, r11
     780:	97 01       	movw	r18, r14
     782:	86 01       	movw	r16, r12
     784:	ce 01       	movw	r24, r28
     786:	04 96       	adiw	r24, 0x04	; 4
     788:	0e 94 29 14 	call	0x2852	; 0x2852 <vTaskPlaceOnUnorderedEventList>
     78c:	21 2c       	mov	r2, r1
     78e:	31 2c       	mov	r3, r1
     790:	21 01       	movw	r4, r2
     792:	03 c0       	rjmp	.+6      	; 0x79a <xEventGroupWaitBits+0xb4>
     794:	c1 2c       	mov	r12, r1
     796:	d1 2c       	mov	r13, r1
     798:	76 01       	movw	r14, r12
     79a:	0e 94 51 12 	call	0x24a2	; 0x24a2 <xTaskResumeAll>
     79e:	cd 28       	or	r12, r13
     7a0:	ce 28       	or	r12, r14
     7a2:	cf 28       	or	r12, r15
     7a4:	59 f1       	breq	.+86     	; 0x7fc <xEventGroupWaitBits+0x116>
     7a6:	81 11       	cpse	r24, r1
     7a8:	01 c0       	rjmp	.+2      	; 0x7ac <xEventGroupWaitBits+0xc6>
     7aa:	0f d3       	rcall	.+1566   	; 0xdca <vPortYield>
     7ac:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <uxTaskResetEventItemValue>
     7b0:	6b 01       	movw	r12, r22
     7b2:	7c 01       	movw	r14, r24
     7b4:	91 fd       	sbrc	r25, 1
     7b6:	1f c0       	rjmp	.+62     	; 0x7f6 <xEventGroupWaitBits+0x110>
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	f8 94       	cli
     7bc:	0f 92       	push	r0
     7be:	c8 80       	ld	r12, Y
     7c0:	d9 80       	ldd	r13, Y+1	; 0x01
     7c2:	ea 80       	ldd	r14, Y+2	; 0x02
     7c4:	fb 80       	ldd	r15, Y+3	; 0x03
     7c6:	07 2d       	mov	r16, r7
     7c8:	a5 01       	movw	r20, r10
     7ca:	94 01       	movw	r18, r8
     7cc:	c7 01       	movw	r24, r14
     7ce:	b6 01       	movw	r22, r12
     7d0:	56 df       	rcall	.-340    	; 0x67e <prvTestWaitCondition>
     7d2:	88 23       	and	r24, r24
     7d4:	71 f0       	breq	.+28     	; 0x7f2 <xEventGroupWaitBits+0x10c>
     7d6:	66 20       	and	r6, r6
     7d8:	61 f0       	breq	.+24     	; 0x7f2 <xEventGroupWaitBits+0x10c>
     7da:	80 94       	com	r8
     7dc:	90 94       	com	r9
     7de:	a0 94       	com	r10
     7e0:	b0 94       	com	r11
     7e2:	8c 20       	and	r8, r12
     7e4:	9d 20       	and	r9, r13
     7e6:	ae 20       	and	r10, r14
     7e8:	bf 20       	and	r11, r15
     7ea:	88 82       	st	Y, r8
     7ec:	99 82       	std	Y+1, r9	; 0x01
     7ee:	aa 82       	std	Y+2, r10	; 0x02
     7f0:	bb 82       	std	Y+3, r11	; 0x03
     7f2:	0f 90       	pop	r0
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	16 01       	movw	r2, r12
     7f8:	27 01       	movw	r4, r14
     7fa:	55 24       	eor	r5, r5
     7fc:	c2 01       	movw	r24, r4
     7fe:	b1 01       	movw	r22, r2
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	ff 90       	pop	r15
     80a:	ef 90       	pop	r14
     80c:	df 90       	pop	r13
     80e:	cf 90       	pop	r12
     810:	bf 90       	pop	r11
     812:	af 90       	pop	r10
     814:	9f 90       	pop	r9
     816:	8f 90       	pop	r8
     818:	7f 90       	pop	r7
     81a:	6f 90       	pop	r6
     81c:	5f 90       	pop	r5
     81e:	4f 90       	pop	r4
     820:	3f 90       	pop	r3
     822:	2f 90       	pop	r2
     824:	08 95       	ret

00000826 <xEventGroupClearBits>:
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	0f 92       	push	r0
     830:	fc 01       	movw	r30, r24
     832:	00 81       	ld	r16, Z
     834:	11 81       	ldd	r17, Z+1	; 0x01
     836:	22 81       	ldd	r18, Z+2	; 0x02
     838:	33 81       	ldd	r19, Z+3	; 0x03
     83a:	40 95       	com	r20
     83c:	50 95       	com	r21
     83e:	60 95       	com	r22
     840:	70 95       	com	r23
     842:	40 23       	and	r20, r16
     844:	51 23       	and	r21, r17
     846:	62 23       	and	r22, r18
     848:	73 23       	and	r23, r19
     84a:	40 83       	st	Z, r20
     84c:	51 83       	std	Z+1, r21	; 0x01
     84e:	62 83       	std	Z+2, r22	; 0x02
     850:	73 83       	std	Z+3, r23	; 0x03
     852:	0f 90       	pop	r0
     854:	0f be       	out	0x3f, r0	; 63
     856:	c9 01       	movw	r24, r18
     858:	b8 01       	movw	r22, r16
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	08 95       	ret

00000860 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     860:	4f 92       	push	r4
     862:	5f 92       	push	r5
     864:	6f 92       	push	r6
     866:	7f 92       	push	r7
     868:	af 92       	push	r10
     86a:	bf 92       	push	r11
     86c:	cf 92       	push	r12
     86e:	df 92       	push	r13
     870:	ef 92       	push	r14
     872:	ff 92       	push	r15
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	ec 01       	movw	r28, r24
     87e:	6a 01       	movw	r12, r20
     880:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     882:	8c 01       	movw	r16, r24
     884:	09 5f       	subi	r16, 0xF9	; 249
     886:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     888:	0e 94 11 11 	call	0x2222	; 0x2222 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     88c:	eb 85       	ldd	r30, Y+11	; 0x0b
     88e:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     890:	88 81       	ld	r24, Y
     892:	99 81       	ldd	r25, Y+1	; 0x01
     894:	aa 81       	ldd	r26, Y+2	; 0x02
     896:	bb 81       	ldd	r27, Y+3	; 0x03
     898:	c8 2a       	or	r12, r24
     89a:	d9 2a       	or	r13, r25
     89c:	ea 2a       	or	r14, r26
     89e:	fb 2a       	or	r15, r27
     8a0:	c8 82       	st	Y, r12
     8a2:	d9 82       	std	Y+1, r13	; 0x01
     8a4:	ea 82       	std	Y+2, r14	; 0x02
     8a6:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     8a8:	c1 2c       	mov	r12, r1
     8aa:	d1 2c       	mov	r13, r1
     8ac:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     8ae:	3d c0       	rjmp	.+122    	; 0x92a <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     8b0:	a4 80       	ldd	r10, Z+4	; 0x04
     8b2:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     8b4:	80 81       	ld	r24, Z
     8b6:	91 81       	ldd	r25, Z+1	; 0x01
     8b8:	a2 81       	ldd	r26, Z+2	; 0x02
     8ba:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     8bc:	ac 01       	movw	r20, r24
     8be:	bd 01       	movw	r22, r26
     8c0:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     8c2:	b2 fd       	sbrc	r27, 2
     8c4:	0e c0       	rjmp	.+28     	; 0x8e2 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     8c6:	48 80       	ld	r4, Y
     8c8:	59 80       	ldd	r5, Y+1	; 0x01
     8ca:	6a 80       	ldd	r6, Y+2	; 0x02
     8cc:	7b 80       	ldd	r7, Y+3	; 0x03
     8ce:	44 22       	and	r4, r20
     8d0:	55 22       	and	r5, r21
     8d2:	66 22       	and	r6, r22
     8d4:	77 22       	and	r7, r23
     8d6:	45 28       	or	r4, r5
     8d8:	46 28       	or	r4, r6
     8da:	47 28       	or	r4, r7
     8dc:	89 f4       	brne	.+34     	; 0x900 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	12 c0       	rjmp	.+36     	; 0x906 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     8e2:	48 80       	ld	r4, Y
     8e4:	59 80       	ldd	r5, Y+1	; 0x01
     8e6:	6a 80       	ldd	r6, Y+2	; 0x02
     8e8:	7b 80       	ldd	r7, Y+3	; 0x03
     8ea:	44 22       	and	r4, r20
     8ec:	55 22       	and	r5, r21
     8ee:	66 22       	and	r6, r22
     8f0:	77 22       	and	r7, r23
     8f2:	44 15       	cp	r20, r4
     8f4:	55 05       	cpc	r21, r5
     8f6:	66 05       	cpc	r22, r6
     8f8:	77 05       	cpc	r23, r7
     8fa:	21 f0       	breq	.+8      	; 0x904 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	03 c0       	rjmp	.+6      	; 0x906 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     900:	21 e0       	ldi	r18, 0x01	; 1
     902:	01 c0       	rjmp	.+2      	; 0x906 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     904:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     906:	22 23       	and	r18, r18
     908:	71 f0       	breq	.+28     	; 0x926 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     90a:	b0 ff       	sbrs	r27, 0
     90c:	04 c0       	rjmp	.+8      	; 0x916 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     90e:	c4 2a       	or	r12, r20
     910:	d5 2a       	or	r13, r21
     912:	e6 2a       	or	r14, r22
     914:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     916:	48 81       	ld	r20, Y
     918:	59 81       	ldd	r21, Y+1	; 0x01
     91a:	6a 81       	ldd	r22, Y+2	; 0x02
     91c:	7b 81       	ldd	r23, Y+3	; 0x03
     91e:	72 60       	ori	r23, 0x02	; 2
     920:	cf 01       	movw	r24, r30
     922:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     926:	ea 2d       	mov	r30, r10
     928:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     92a:	e0 17       	cp	r30, r16
     92c:	f1 07       	cpc	r31, r17
     92e:	09 f0       	breq	.+2      	; 0x932 <xEventGroupSetBits+0xd2>
     930:	bf cf       	rjmp	.-130    	; 0x8b0 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     932:	c0 94       	com	r12
     934:	d0 94       	com	r13
     936:	e0 94       	com	r14
     938:	f0 94       	com	r15
     93a:	88 81       	ld	r24, Y
     93c:	99 81       	ldd	r25, Y+1	; 0x01
     93e:	aa 81       	ldd	r26, Y+2	; 0x02
     940:	bb 81       	ldd	r27, Y+3	; 0x03
     942:	c8 22       	and	r12, r24
     944:	d9 22       	and	r13, r25
     946:	ea 22       	and	r14, r26
     948:	fb 22       	and	r15, r27
     94a:	c8 82       	st	Y, r12
     94c:	d9 82       	std	Y+1, r13	; 0x01
     94e:	ea 82       	std	Y+2, r14	; 0x02
     950:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     952:	0e 94 51 12 	call	0x24a2	; 0x24a2 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     956:	68 81       	ld	r22, Y
     958:	79 81       	ldd	r23, Y+1	; 0x01
     95a:	8a 81       	ldd	r24, Y+2	; 0x02
     95c:	9b 81       	ldd	r25, Y+3	; 0x03
}
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	ff 90       	pop	r15
     968:	ef 90       	pop	r14
     96a:	df 90       	pop	r13
     96c:	cf 90       	pop	r12
     96e:	bf 90       	pop	r11
     970:	af 90       	pop	r10
     972:	7f 90       	pop	r7
     974:	6f 90       	pop	r6
     976:	5f 90       	pop	r5
     978:	4f 90       	pop	r4
     97a:	08 95       	ret

0000097c <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     97c:	e2 eb       	ldi	r30, 0xB2	; 178
     97e:	f8 e0       	ldi	r31, 0x08	; 8
     980:	a6 eb       	ldi	r26, 0xB6	; 182
     982:	b8 e0       	ldi	r27, 0x08	; 8
     984:	b1 83       	std	Z+1, r27	; 0x01
     986:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     988:	13 82       	std	Z+3, r1	; 0x03
     98a:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     98c:	e2 e3       	ldi	r30, 0x32	; 50
     98e:	f5 e1       	ldi	r31, 0x15	; 21
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     990:	f0 93 b1 08 	sts	0x08B1, r31	; 0x8008b1 <pxEnd+0x1>
     994:	e0 93 b0 08 	sts	0x08B0, r30	; 0x8008b0 <pxEnd>
    pxEnd->xBlockSize = 0;
     998:	13 82       	std	Z+3, r1	; 0x03
     99a:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     99c:	11 82       	std	Z+1, r1	; 0x01
     99e:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     9a0:	8c e7       	ldi	r24, 0x7C	; 124
     9a2:	9c e0       	ldi	r25, 0x0C	; 12
     9a4:	13 96       	adiw	r26, 0x03	; 3
     9a6:	9c 93       	st	X, r25
     9a8:	8e 93       	st	-X, r24
     9aa:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     9ac:	ed 93       	st	X+, r30
     9ae:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     9b0:	90 93 ad 08 	sts	0x08AD, r25	; 0x8008ad <xMinimumEverFreeBytesRemaining+0x1>
     9b4:	80 93 ac 08 	sts	0x08AC, r24	; 0x8008ac <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     9b8:	90 93 af 08 	sts	0x08AF, r25	; 0x8008af <xFreeBytesRemaining+0x1>
     9bc:	80 93 ae 08 	sts	0x08AE, r24	; 0x8008ae <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	90 e8       	ldi	r25, 0x80	; 128
     9c4:	90 93 a7 08 	sts	0x08A7, r25	; 0x8008a7 <xBlockAllocatedBit+0x1>
     9c8:	80 93 a6 08 	sts	0x08A6, r24	; 0x8008a6 <xBlockAllocatedBit>
     9cc:	08 95       	ret

000009ce <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     9d4:	a2 eb       	ldi	r26, 0xB2	; 178
     9d6:	b8 e0       	ldi	r27, 0x08	; 8
     9d8:	01 c0       	rjmp	.+2      	; 0x9dc <prvInsertBlockIntoFreeList+0xe>
     9da:	df 01       	movw	r26, r30
     9dc:	ed 91       	ld	r30, X+
     9de:	fc 91       	ld	r31, X
     9e0:	11 97       	sbiw	r26, 0x01	; 1
     9e2:	ec 17       	cp	r30, r28
     9e4:	fd 07       	cpc	r31, r29
     9e6:	c8 f3       	brcs	.-14     	; 0x9da <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     9e8:	12 96       	adiw	r26, 0x02	; 2
     9ea:	8d 91       	ld	r24, X+
     9ec:	9c 91       	ld	r25, X
     9ee:	13 97       	sbiw	r26, 0x03	; 3
     9f0:	9d 01       	movw	r18, r26
     9f2:	28 0f       	add	r18, r24
     9f4:	39 1f       	adc	r19, r25
     9f6:	c2 17       	cp	r28, r18
     9f8:	d3 07       	cpc	r29, r19
     9fa:	49 f4       	brne	.+18     	; 0xa0e <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     9fc:	2a 81       	ldd	r18, Y+2	; 0x02
     9fe:	3b 81       	ldd	r19, Y+3	; 0x03
     a00:	82 0f       	add	r24, r18
     a02:	93 1f       	adc	r25, r19
     a04:	13 96       	adiw	r26, 0x03	; 3
     a06:	9c 93       	st	X, r25
     a08:	8e 93       	st	-X, r24
     a0a:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     a0c:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     a0e:	8a 81       	ldd	r24, Y+2	; 0x02
     a10:	9b 81       	ldd	r25, Y+3	; 0x03
     a12:	9e 01       	movw	r18, r28
     a14:	28 0f       	add	r18, r24
     a16:	39 1f       	adc	r19, r25
     a18:	e2 17       	cp	r30, r18
     a1a:	f3 07       	cpc	r31, r19
     a1c:	c1 f4       	brne	.+48     	; 0xa4e <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     a1e:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <pxEnd>
     a22:	30 91 b1 08 	lds	r19, 0x08B1	; 0x8008b1 <pxEnd+0x1>
     a26:	e2 17       	cp	r30, r18
     a28:	f3 07       	cpc	r31, r19
     a2a:	71 f0       	breq	.+28     	; 0xa48 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     a2c:	22 81       	ldd	r18, Z+2	; 0x02
     a2e:	33 81       	ldd	r19, Z+3	; 0x03
     a30:	82 0f       	add	r24, r18
     a32:	93 1f       	adc	r25, r19
     a34:	9b 83       	std	Y+3, r25	; 0x03
     a36:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     a38:	ed 91       	ld	r30, X+
     a3a:	fc 91       	ld	r31, X
     a3c:	11 97       	sbiw	r26, 0x01	; 1
     a3e:	80 81       	ld	r24, Z
     a40:	91 81       	ldd	r25, Z+1	; 0x01
     a42:	99 83       	std	Y+1, r25	; 0x01
     a44:	88 83       	st	Y, r24
     a46:	05 c0       	rjmp	.+10     	; 0xa52 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     a48:	39 83       	std	Y+1, r19	; 0x01
     a4a:	28 83       	st	Y, r18
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     a4e:	f9 83       	std	Y+1, r31	; 0x01
     a50:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     a52:	ca 17       	cp	r28, r26
     a54:	db 07       	cpc	r29, r27
     a56:	11 f0       	breq	.+4      	; 0xa5c <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     a58:	cd 93       	st	X+, r28
     a5a:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	08 95       	ret

00000a62 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     a62:	ef 92       	push	r14
     a64:	ff 92       	push	r15
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     a70:	0e 94 11 11 	call	0x2222	; 0x2222 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     a74:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <pxEnd>
     a78:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <pxEnd+0x1>
     a7c:	89 2b       	or	r24, r25
     a7e:	09 f4       	brne	.+2      	; 0xa82 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     a80:	7d df       	rcall	.-262    	; 0x97c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     a82:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <xBlockAllocatedBit>
     a86:	90 91 a7 08 	lds	r25, 0x08A7	; 0x8008a7 <xBlockAllocatedBit+0x1>
     a8a:	80 23       	and	r24, r16
     a8c:	91 23       	and	r25, r17
     a8e:	89 2b       	or	r24, r25
     a90:	09 f0       	breq	.+2      	; 0xa94 <pvPortMalloc+0x32>
     a92:	76 c0       	rjmp	.+236    	; 0xb80 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     a94:	01 15       	cp	r16, r1
     a96:	11 05       	cpc	r17, r1
     a98:	49 f0       	breq	.+18     	; 0xaac <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     a9a:	c8 01       	movw	r24, r16
     a9c:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     a9e:	08 17       	cp	r16, r24
     aa0:	19 07       	cpc	r17, r25
     aa2:	18 f0       	brcs	.+6      	; 0xaaa <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     aa4:	00 e0       	ldi	r16, 0x00	; 0
     aa6:	10 e0       	ldi	r17, 0x00	; 0
     aa8:	01 c0       	rjmp	.+2      	; 0xaac <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     aaa:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     aac:	01 15       	cp	r16, r1
     aae:	11 05       	cpc	r17, r1
     ab0:	09 f4       	brne	.+2      	; 0xab4 <pvPortMalloc+0x52>
     ab2:	69 c0       	rjmp	.+210    	; 0xb86 <pvPortMalloc+0x124>
     ab4:	80 91 ae 08 	lds	r24, 0x08AE	; 0x8008ae <xFreeBytesRemaining>
     ab8:	90 91 af 08 	lds	r25, 0x08AF	; 0x8008af <xFreeBytesRemaining+0x1>
     abc:	80 17       	cp	r24, r16
     abe:	91 07       	cpc	r25, r17
     ac0:	08 f4       	brcc	.+2      	; 0xac4 <pvPortMalloc+0x62>
     ac2:	64 c0       	rjmp	.+200    	; 0xb8c <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     ac4:	c0 91 b2 08 	lds	r28, 0x08B2	; 0x8008b2 <xStart>
     ac8:	d0 91 b3 08 	lds	r29, 0x08B3	; 0x8008b3 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     acc:	e2 eb       	ldi	r30, 0xB2	; 178
     ace:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     ad0:	02 c0       	rjmp	.+4      	; 0xad6 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     ad2:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     ad4:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     ad6:	8a 81       	ldd	r24, Y+2	; 0x02
     ad8:	9b 81       	ldd	r25, Y+3	; 0x03
     ada:	80 17       	cp	r24, r16
     adc:	91 07       	cpc	r25, r17
     ade:	20 f4       	brcc	.+8      	; 0xae8 <pvPortMalloc+0x86>
     ae0:	88 81       	ld	r24, Y
     ae2:	99 81       	ldd	r25, Y+1	; 0x01
     ae4:	00 97       	sbiw	r24, 0x00	; 0
     ae6:	a9 f7       	brne	.-22     	; 0xad2 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     ae8:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <pxEnd>
     aec:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <pxEnd+0x1>
     af0:	c8 17       	cp	r28, r24
     af2:	d9 07       	cpc	r29, r25
     af4:	09 f4       	brne	.+2      	; 0xaf8 <pvPortMalloc+0x96>
     af6:	4d c0       	rjmp	.+154    	; 0xb92 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     af8:	e0 80       	ld	r14, Z
     afa:	f1 80       	ldd	r15, Z+1	; 0x01
     afc:	84 e0       	ldi	r24, 0x04	; 4
     afe:	e8 0e       	add	r14, r24
     b00:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     b02:	88 81       	ld	r24, Y
     b04:	99 81       	ldd	r25, Y+1	; 0x01
     b06:	91 83       	std	Z+1, r25	; 0x01
     b08:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     b0a:	2a 81       	ldd	r18, Y+2	; 0x02
     b0c:	3b 81       	ldd	r19, Y+3	; 0x03
     b0e:	20 1b       	sub	r18, r16
     b10:	31 0b       	sbc	r19, r17
     b12:	29 30       	cpi	r18, 0x09	; 9
     b14:	31 05       	cpc	r19, r1
     b16:	48 f0       	brcs	.+18     	; 0xb2a <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     b18:	ce 01       	movw	r24, r28
     b1a:	80 0f       	add	r24, r16
     b1c:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     b1e:	fc 01       	movw	r30, r24
     b20:	33 83       	std	Z+3, r19	; 0x03
     b22:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     b24:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     b26:	0a 83       	std	Y+2, r16	; 0x02
     b28:	52 df       	rcall	.-348    	; 0x9ce <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     b2a:	2a 81       	ldd	r18, Y+2	; 0x02
     b2c:	3b 81       	ldd	r19, Y+3	; 0x03
     b2e:	80 91 ae 08 	lds	r24, 0x08AE	; 0x8008ae <xFreeBytesRemaining>
     b32:	90 91 af 08 	lds	r25, 0x08AF	; 0x8008af <xFreeBytesRemaining+0x1>
     b36:	82 1b       	sub	r24, r18
     b38:	93 0b       	sbc	r25, r19
     b3a:	90 93 af 08 	sts	0x08AF, r25	; 0x8008af <xFreeBytesRemaining+0x1>
     b3e:	80 93 ae 08 	sts	0x08AE, r24	; 0x8008ae <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     b42:	40 91 ac 08 	lds	r20, 0x08AC	; 0x8008ac <xMinimumEverFreeBytesRemaining>
     b46:	50 91 ad 08 	lds	r21, 0x08AD	; 0x8008ad <xMinimumEverFreeBytesRemaining+0x1>
     b4a:	84 17       	cp	r24, r20
     b4c:	95 07       	cpc	r25, r21
     b4e:	20 f4       	brcc	.+8      	; 0xb58 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     b50:	90 93 ad 08 	sts	0x08AD, r25	; 0x8008ad <xMinimumEverFreeBytesRemaining+0x1>
     b54:	80 93 ac 08 	sts	0x08AC, r24	; 0x8008ac <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     b58:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <xBlockAllocatedBit>
     b5c:	90 91 a7 08 	lds	r25, 0x08A7	; 0x8008a7 <xBlockAllocatedBit+0x1>
     b60:	28 2b       	or	r18, r24
     b62:	39 2b       	or	r19, r25
     b64:	3b 83       	std	Y+3, r19	; 0x03
     b66:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     b68:	19 82       	std	Y+1, r1	; 0x01
     b6a:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     b6c:	80 91 aa 08 	lds	r24, 0x08AA	; 0x8008aa <xNumberOfSuccessfulAllocations>
     b70:	90 91 ab 08 	lds	r25, 0x08AB	; 0x8008ab <xNumberOfSuccessfulAllocations+0x1>
     b74:	01 96       	adiw	r24, 0x01	; 1
     b76:	90 93 ab 08 	sts	0x08AB, r25	; 0x8008ab <xNumberOfSuccessfulAllocations+0x1>
     b7a:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <xNumberOfSuccessfulAllocations>
     b7e:	0b c0       	rjmp	.+22     	; 0xb96 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     b80:	e1 2c       	mov	r14, r1
     b82:	f1 2c       	mov	r15, r1
     b84:	08 c0       	rjmp	.+16     	; 0xb96 <pvPortMalloc+0x134>
     b86:	e1 2c       	mov	r14, r1
     b88:	f1 2c       	mov	r15, r1
     b8a:	05 c0       	rjmp	.+10     	; 0xb96 <pvPortMalloc+0x134>
     b8c:	e1 2c       	mov	r14, r1
     b8e:	f1 2c       	mov	r15, r1
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <pvPortMalloc+0x134>
     b92:	e1 2c       	mov	r14, r1
     b94:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     b96:	0e 94 51 12 	call	0x24a2	; 0x24a2 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     b9a:	e1 14       	cp	r14, r1
     b9c:	f1 04       	cpc	r15, r1
     b9e:	11 f4       	brne	.+4      	; 0xba4 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     ba0:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     ba4:	c7 01       	movw	r24, r14
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	1f 91       	pop	r17
     bac:	0f 91       	pop	r16
     bae:	ff 90       	pop	r15
     bb0:	ef 90       	pop	r14
     bb2:	08 95       	ret

00000bb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     bbc:	00 97       	sbiw	r24, 0x00	; 0
     bbe:	91 f1       	breq	.+100    	; 0xc24 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     bc0:	ec 01       	movw	r28, r24
     bc2:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     bc4:	4a 81       	ldd	r20, Y+2	; 0x02
     bc6:	5b 81       	ldd	r21, Y+3	; 0x03
     bc8:	20 91 a6 08 	lds	r18, 0x08A6	; 0x8008a6 <xBlockAllocatedBit>
     bcc:	30 91 a7 08 	lds	r19, 0x08A7	; 0x8008a7 <xBlockAllocatedBit+0x1>
     bd0:	ba 01       	movw	r22, r20
     bd2:	62 23       	and	r22, r18
     bd4:	73 23       	and	r23, r19
     bd6:	67 2b       	or	r22, r23
     bd8:	29 f1       	breq	.+74     	; 0xc24 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     bda:	68 81       	ld	r22, Y
     bdc:	79 81       	ldd	r23, Y+1	; 0x01
     bde:	67 2b       	or	r22, r23
     be0:	09 f5       	brne	.+66     	; 0xc24 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     be2:	20 95       	com	r18
     be4:	30 95       	com	r19
     be6:	24 23       	and	r18, r20
     be8:	35 23       	and	r19, r21
     bea:	3b 83       	std	Y+3, r19	; 0x03
     bec:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     bee:	0e 94 11 11 	call	0x2222	; 0x2222 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     bf2:	8a 81       	ldd	r24, Y+2	; 0x02
     bf4:	9b 81       	ldd	r25, Y+3	; 0x03
     bf6:	20 91 ae 08 	lds	r18, 0x08AE	; 0x8008ae <xFreeBytesRemaining>
     bfa:	30 91 af 08 	lds	r19, 0x08AF	; 0x8008af <xFreeBytesRemaining+0x1>
     bfe:	82 0f       	add	r24, r18
     c00:	93 1f       	adc	r25, r19
     c02:	90 93 af 08 	sts	0x08AF, r25	; 0x8008af <xFreeBytesRemaining+0x1>
     c06:	80 93 ae 08 	sts	0x08AE, r24	; 0x8008ae <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     c0a:	ce 01       	movw	r24, r28
     c0c:	e0 de       	rcall	.-576    	; 0x9ce <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     c0e:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <xNumberOfSuccessfulFrees>
     c12:	90 91 a9 08 	lds	r25, 0x08A9	; 0x8008a9 <xNumberOfSuccessfulFrees+0x1>
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	90 93 a9 08 	sts	0x08A9, r25	; 0x8008a9 <xNumberOfSuccessfulFrees+0x1>
     c1c:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     c20:	0e 94 51 12 	call	0x24a2	; 0x24a2 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	1f 91       	pop	r17
     c2a:	0f 91       	pop	r16
     c2c:	08 95       	ret

00000c2e <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     c2e:	fc 01       	movw	r30, r24
     c30:	03 96       	adiw	r24, 0x03	; 3
     c32:	92 83       	std	Z+2, r25	; 0x02
     c34:	81 83       	std	Z+1, r24	; 0x01
     c36:	4f ef       	ldi	r20, 0xFF	; 255
     c38:	5f ef       	ldi	r21, 0xFF	; 255
     c3a:	ba 01       	movw	r22, r20
     c3c:	43 83       	std	Z+3, r20	; 0x03
     c3e:	54 83       	std	Z+4, r21	; 0x04
     c40:	65 83       	std	Z+5, r22	; 0x05
     c42:	76 83       	std	Z+6, r23	; 0x06
     c44:	90 87       	std	Z+8, r25	; 0x08
     c46:	87 83       	std	Z+7, r24	; 0x07
     c48:	92 87       	std	Z+10, r25	; 0x0a
     c4a:	81 87       	std	Z+9, r24	; 0x09
     c4c:	10 82       	st	Z, r1
     c4e:	08 95       	ret

00000c50 <vListInitialiseItem>:
     c50:	fc 01       	movw	r30, r24
     c52:	13 86       	std	Z+11, r1	; 0x0b
     c54:	12 86       	std	Z+10, r1	; 0x0a
     c56:	08 95       	ret

00000c58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     c62:	08 81       	ld	r16, Y
     c64:	19 81       	ldd	r17, Y+1	; 0x01
     c66:	2a 81       	ldd	r18, Y+2	; 0x02
     c68:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     c6a:	0f 3f       	cpi	r16, 0xFF	; 255
     c6c:	4f ef       	ldi	r20, 0xFF	; 255
     c6e:	14 07       	cpc	r17, r20
     c70:	24 07       	cpc	r18, r20
     c72:	34 07       	cpc	r19, r20
     c74:	21 f4       	brne	.+8      	; 0xc7e <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     c76:	fc 01       	movw	r30, r24
     c78:	a1 85       	ldd	r26, Z+9	; 0x09
     c7a:	b2 85       	ldd	r27, Z+10	; 0x0a
     c7c:	11 c0       	rjmp	.+34     	; 0xca0 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     c7e:	dc 01       	movw	r26, r24
     c80:	13 96       	adiw	r26, 0x03	; 3
     c82:	01 c0       	rjmp	.+2      	; 0xc86 <vListInsert+0x2e>
     c84:	df 01       	movw	r26, r30
     c86:	14 96       	adiw	r26, 0x04	; 4
     c88:	ed 91       	ld	r30, X+
     c8a:	fc 91       	ld	r31, X
     c8c:	15 97       	sbiw	r26, 0x05	; 5
     c8e:	40 81       	ld	r20, Z
     c90:	51 81       	ldd	r21, Z+1	; 0x01
     c92:	62 81       	ldd	r22, Z+2	; 0x02
     c94:	73 81       	ldd	r23, Z+3	; 0x03
     c96:	04 17       	cp	r16, r20
     c98:	15 07       	cpc	r17, r21
     c9a:	26 07       	cpc	r18, r22
     c9c:	37 07       	cpc	r19, r23
     c9e:	90 f7       	brcc	.-28     	; 0xc84 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     ca0:	14 96       	adiw	r26, 0x04	; 4
     ca2:	ed 91       	ld	r30, X+
     ca4:	fc 91       	ld	r31, X
     ca6:	15 97       	sbiw	r26, 0x05	; 5
     ca8:	fd 83       	std	Y+5, r31	; 0x05
     caa:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     cac:	d7 83       	std	Z+7, r29	; 0x07
     cae:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     cb0:	bf 83       	std	Y+7, r27	; 0x07
     cb2:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     cb4:	15 96       	adiw	r26, 0x05	; 5
     cb6:	dc 93       	st	X, r29
     cb8:	ce 93       	st	-X, r28
     cba:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     cbc:	9b 87       	std	Y+11, r25	; 0x0b
     cbe:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     cc0:	fc 01       	movw	r30, r24
     cc2:	20 81       	ld	r18, Z
     cc4:	2f 5f       	subi	r18, 0xFF	; 255
     cc6:	20 83       	st	Z, r18
}
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	1f 91       	pop	r17
     cce:	0f 91       	pop	r16
     cd0:	08 95       	ret

00000cd2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     cd8:	a2 85       	ldd	r26, Z+10	; 0x0a
     cda:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     cdc:	c4 81       	ldd	r28, Z+4	; 0x04
     cde:	d5 81       	ldd	r29, Z+5	; 0x05
     ce0:	86 81       	ldd	r24, Z+6	; 0x06
     ce2:	97 81       	ldd	r25, Z+7	; 0x07
     ce4:	9f 83       	std	Y+7, r25	; 0x07
     ce6:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     ce8:	c6 81       	ldd	r28, Z+6	; 0x06
     cea:	d7 81       	ldd	r29, Z+7	; 0x07
     cec:	84 81       	ldd	r24, Z+4	; 0x04
     cee:	95 81       	ldd	r25, Z+5	; 0x05
     cf0:	9d 83       	std	Y+5, r25	; 0x05
     cf2:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     cf4:	11 96       	adiw	r26, 0x01	; 1
     cf6:	8d 91       	ld	r24, X+
     cf8:	9c 91       	ld	r25, X
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	e8 17       	cp	r30, r24
     cfe:	f9 07       	cpc	r31, r25
     d00:	31 f4       	brne	.+12     	; 0xd0e <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     d02:	86 81       	ldd	r24, Z+6	; 0x06
     d04:	97 81       	ldd	r25, Z+7	; 0x07
     d06:	12 96       	adiw	r26, 0x02	; 2
     d08:	9c 93       	st	X, r25
     d0a:	8e 93       	st	-X, r24
     d0c:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     d0e:	13 86       	std	Z+11, r1	; 0x0b
     d10:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     d12:	8c 91       	ld	r24, X
     d14:	81 50       	subi	r24, 0x01	; 1
     d16:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     d18:	8c 91       	ld	r24, X
}
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	08 95       	ret

00000d20 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     d20:	a8 95       	wdr
     d22:	90 ec       	ldi	r25, 0xC0	; 192
     d24:	88 e1       	ldi	r24, 0x18	; 24
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	a8 95       	wdr
     d2c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     d36:	08 95       	ret

00000d38 <pxPortInitialiseStack>:
     d38:	fc 01       	movw	r30, r24
     d3a:	60 83       	st	Z, r22
     d3c:	31 97       	sbiw	r30, 0x01	; 1
     d3e:	70 83       	st	Z, r23
     d40:	31 97       	sbiw	r30, 0x01	; 1
     d42:	10 82       	st	Z, r1
     d44:	31 97       	sbiw	r30, 0x01	; 1
     d46:	10 82       	st	Z, r1
     d48:	31 97       	sbiw	r30, 0x01	; 1
     d4a:	20 e8       	ldi	r18, 0x80	; 128
     d4c:	20 83       	st	Z, r18
     d4e:	31 97       	sbiw	r30, 0x01	; 1
     d50:	10 82       	st	Z, r1
     d52:	31 97       	sbiw	r30, 0x01	; 1
     d54:	10 82       	st	Z, r1
     d56:	31 97       	sbiw	r30, 0x01	; 1
     d58:	10 82       	st	Z, r1
     d5a:	77 97       	sbiw	r30, 0x17	; 23
     d5c:	40 83       	st	Z, r20
     d5e:	31 97       	sbiw	r30, 0x01	; 1
     d60:	50 83       	st	Z, r21
     d62:	86 97       	sbiw	r24, 0x26	; 38
     d64:	08 95       	ret

00000d66 <xPortStartScheduler>:
     d66:	dc df       	rcall	.-72     	; 0xd20 <prvSetupTimerInterrupt>
     d68:	a0 91 f5 15 	lds	r26, 0x15F5	; 0x8015f5 <pxCurrentTCB>
     d6c:	b0 91 f6 15 	lds	r27, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
     d70:	cd 91       	ld	r28, X+
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	dd 91       	ld	r29, X+
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	ff 91       	pop	r31
     d7a:	ef 91       	pop	r30
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	bf 91       	pop	r27
     d82:	af 91       	pop	r26
     d84:	9f 91       	pop	r25
     d86:	8f 91       	pop	r24
     d88:	7f 91       	pop	r23
     d8a:	6f 91       	pop	r22
     d8c:	5f 91       	pop	r21
     d8e:	4f 91       	pop	r20
     d90:	3f 91       	pop	r19
     d92:	2f 91       	pop	r18
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	ff 90       	pop	r15
     d9a:	ef 90       	pop	r14
     d9c:	df 90       	pop	r13
     d9e:	cf 90       	pop	r12
     da0:	bf 90       	pop	r11
     da2:	af 90       	pop	r10
     da4:	9f 90       	pop	r9
     da6:	8f 90       	pop	r8
     da8:	7f 90       	pop	r7
     daa:	6f 90       	pop	r6
     dac:	5f 90       	pop	r5
     dae:	4f 90       	pop	r4
     db0:	3f 90       	pop	r3
     db2:	2f 90       	pop	r2
     db4:	1f 90       	pop	r1
     db6:	0f 90       	pop	r0
     db8:	0c be       	out	0x3c, r0	; 60
     dba:	0f 90       	pop	r0
     dbc:	0b be       	out	0x3b, r0	; 59
     dbe:	0f 90       	pop	r0
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	0f 90       	pop	r0
     dc4:	08 95       	ret
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	08 95       	ret

00000dca <vPortYield>:
     dca:	0f 92       	push	r0
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	0f 92       	push	r0
     dd2:	0b b6       	in	r0, 0x3b	; 59
     dd4:	0f 92       	push	r0
     dd6:	0c b6       	in	r0, 0x3c	; 60
     dd8:	0f 92       	push	r0
     dda:	1f 92       	push	r1
     ddc:	11 24       	eor	r1, r1
     dde:	2f 92       	push	r2
     de0:	3f 92       	push	r3
     de2:	4f 92       	push	r4
     de4:	5f 92       	push	r5
     de6:	6f 92       	push	r6
     de8:	7f 92       	push	r7
     dea:	8f 92       	push	r8
     dec:	9f 92       	push	r9
     dee:	af 92       	push	r10
     df0:	bf 92       	push	r11
     df2:	cf 92       	push	r12
     df4:	df 92       	push	r13
     df6:	ef 92       	push	r14
     df8:	ff 92       	push	r15
     dfa:	0f 93       	push	r16
     dfc:	1f 93       	push	r17
     dfe:	2f 93       	push	r18
     e00:	3f 93       	push	r19
     e02:	4f 93       	push	r20
     e04:	5f 93       	push	r21
     e06:	6f 93       	push	r22
     e08:	7f 93       	push	r23
     e0a:	8f 93       	push	r24
     e0c:	9f 93       	push	r25
     e0e:	af 93       	push	r26
     e10:	bf 93       	push	r27
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	ef 93       	push	r30
     e18:	ff 93       	push	r31
     e1a:	a0 91 f5 15 	lds	r26, 0x15F5	; 0x8015f5 <pxCurrentTCB>
     e1e:	b0 91 f6 15 	lds	r27, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
     e22:	0d b6       	in	r0, 0x3d	; 61
     e24:	0d 92       	st	X+, r0
     e26:	0e b6       	in	r0, 0x3e	; 62
     e28:	0d 92       	st	X+, r0
     e2a:	0e 94 ad 13 	call	0x275a	; 0x275a <vTaskSwitchContext>
     e2e:	a0 91 f5 15 	lds	r26, 0x15F5	; 0x8015f5 <pxCurrentTCB>
     e32:	b0 91 f6 15 	lds	r27, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
     e36:	cd 91       	ld	r28, X+
     e38:	cd bf       	out	0x3d, r28	; 61
     e3a:	dd 91       	ld	r29, X+
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	ff 91       	pop	r31
     e40:	ef 91       	pop	r30
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	bf 91       	pop	r27
     e48:	af 91       	pop	r26
     e4a:	9f 91       	pop	r25
     e4c:	8f 91       	pop	r24
     e4e:	7f 91       	pop	r23
     e50:	6f 91       	pop	r22
     e52:	5f 91       	pop	r21
     e54:	4f 91       	pop	r20
     e56:	3f 91       	pop	r19
     e58:	2f 91       	pop	r18
     e5a:	1f 91       	pop	r17
     e5c:	0f 91       	pop	r16
     e5e:	ff 90       	pop	r15
     e60:	ef 90       	pop	r14
     e62:	df 90       	pop	r13
     e64:	cf 90       	pop	r12
     e66:	bf 90       	pop	r11
     e68:	af 90       	pop	r10
     e6a:	9f 90       	pop	r9
     e6c:	8f 90       	pop	r8
     e6e:	7f 90       	pop	r7
     e70:	6f 90       	pop	r6
     e72:	5f 90       	pop	r5
     e74:	4f 90       	pop	r4
     e76:	3f 90       	pop	r3
     e78:	2f 90       	pop	r2
     e7a:	1f 90       	pop	r1
     e7c:	0f 90       	pop	r0
     e7e:	0c be       	out	0x3c, r0	; 60
     e80:	0f 90       	pop	r0
     e82:	0b be       	out	0x3b, r0	; 59
     e84:	0f 90       	pop	r0
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	0f 90       	pop	r0
     e8a:	08 95       	ret

00000e8c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     e8c:	0f 92       	push	r0
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	0f 92       	push	r0
     e94:	0b b6       	in	r0, 0x3b	; 59
     e96:	0f 92       	push	r0
     e98:	0c b6       	in	r0, 0x3c	; 60
     e9a:	0f 92       	push	r0
     e9c:	1f 92       	push	r1
     e9e:	11 24       	eor	r1, r1
     ea0:	2f 92       	push	r2
     ea2:	3f 92       	push	r3
     ea4:	4f 92       	push	r4
     ea6:	5f 92       	push	r5
     ea8:	6f 92       	push	r6
     eaa:	7f 92       	push	r7
     eac:	8f 92       	push	r8
     eae:	9f 92       	push	r9
     eb0:	af 92       	push	r10
     eb2:	bf 92       	push	r11
     eb4:	cf 92       	push	r12
     eb6:	df 92       	push	r13
     eb8:	ef 92       	push	r14
     eba:	ff 92       	push	r15
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	2f 93       	push	r18
     ec2:	3f 93       	push	r19
     ec4:	4f 93       	push	r20
     ec6:	5f 93       	push	r21
     ec8:	6f 93       	push	r22
     eca:	7f 93       	push	r23
     ecc:	8f 93       	push	r24
     ece:	9f 93       	push	r25
     ed0:	af 93       	push	r26
     ed2:	bf 93       	push	r27
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	ef 93       	push	r30
     eda:	ff 93       	push	r31
     edc:	a0 91 f5 15 	lds	r26, 0x15F5	; 0x8015f5 <pxCurrentTCB>
     ee0:	b0 91 f6 15 	lds	r27, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
     ee4:	0d b6       	in	r0, 0x3d	; 61
     ee6:	0d 92       	st	X+, r0
     ee8:	0e b6       	in	r0, 0x3e	; 62
     eea:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     eec:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     eee:	0e 94 25 11 	call	0x224a	; 0x224a <xTaskIncrementTick>
     ef2:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     ef4:	0e 94 ad 13 	call	0x275a	; 0x275a <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     ef8:	a0 91 f5 15 	lds	r26, 0x15F5	; 0x8015f5 <pxCurrentTCB>
     efc:	b0 91 f6 15 	lds	r27, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
     f00:	cd 91       	ld	r28, X+
     f02:	cd bf       	out	0x3d, r28	; 61
     f04:	dd 91       	ld	r29, X+
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	ff 91       	pop	r31
     f0a:	ef 91       	pop	r30
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	bf 91       	pop	r27
     f12:	af 91       	pop	r26
     f14:	9f 91       	pop	r25
     f16:	8f 91       	pop	r24
     f18:	7f 91       	pop	r23
     f1a:	6f 91       	pop	r22
     f1c:	5f 91       	pop	r21
     f1e:	4f 91       	pop	r20
     f20:	3f 91       	pop	r19
     f22:	2f 91       	pop	r18
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	ff 90       	pop	r15
     f2a:	ef 90       	pop	r14
     f2c:	df 90       	pop	r13
     f2e:	cf 90       	pop	r12
     f30:	bf 90       	pop	r11
     f32:	af 90       	pop	r10
     f34:	9f 90       	pop	r9
     f36:	8f 90       	pop	r8
     f38:	7f 90       	pop	r7
     f3a:	6f 90       	pop	r6
     f3c:	5f 90       	pop	r5
     f3e:	4f 90       	pop	r4
     f40:	3f 90       	pop	r3
     f42:	2f 90       	pop	r2
     f44:	1f 90       	pop	r1
     f46:	0f 90       	pop	r0
     f48:	0c be       	out	0x3c, r0	; 60
     f4a:	0f 90       	pop	r0
     f4c:	0b be       	out	0x3b, r0	; 59
     f4e:	0f 90       	pop	r0
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     f54:	08 95       	ret

00000f56 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     f56:	9a df       	rcall	.-204    	; 0xe8c <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     f58:	18 95       	reti

00000f5a <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     f5a:	dc 01       	movw	r26, r24
     f5c:	53 96       	adiw	r26, 0x13	; 19
     f5e:	2c 91       	ld	r18, X
     f60:	53 97       	sbiw	r26, 0x13	; 19
     f62:	22 23       	and	r18, r18
     f64:	41 f0       	breq	.+16     	; 0xf76 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     f66:	5a 96       	adiw	r26, 0x1a	; 26
     f68:	ed 91       	ld	r30, X+
     f6a:	fc 91       	ld	r31, X
     f6c:	5b 97       	sbiw	r26, 0x1b	; 27
     f6e:	90 81       	ld	r25, Z
     f70:	8a e0       	ldi	r24, 0x0A	; 10
     f72:	89 1b       	sub	r24, r25
     f74:	08 95       	ret
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	08 95       	ret

00000f7a <prvIsQueueEmpty>:
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	f8 94       	cli
     f7e:	0f 92       	push	r0
     f80:	fc 01       	movw	r30, r24
     f82:	86 8d       	ldd	r24, Z+30	; 0x1e
     f84:	81 11       	cpse	r24, r1
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <prvIsQueueEmpty+0x12>
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	01 c0       	rjmp	.+2      	; 0xf8e <prvIsQueueEmpty+0x14>
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	0f 90       	pop	r0
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	08 95       	ret

00000f94 <prvIsQueueFull>:
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	0f 92       	push	r0
     f9a:	fc 01       	movw	r30, r24
     f9c:	26 8d       	ldd	r18, Z+30	; 0x1e
     f9e:	87 8d       	ldd	r24, Z+31	; 0x1f
     fa0:	28 13       	cpse	r18, r24
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <prvIsQueueFull+0x14>
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	01 c0       	rjmp	.+2      	; 0xfaa <prvIsQueueFull+0x16>
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	0f 90       	pop	r0
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	08 95       	ret

00000fb0 <prvCopyDataToQueue>:
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	ec 01       	movw	r28, r24
     fba:	04 2f       	mov	r16, r20
     fbc:	1e 8d       	ldd	r17, Y+30	; 0x1e
     fbe:	48 a1       	ldd	r20, Y+32	; 0x20
     fc0:	41 11       	cpse	r20, r1
     fc2:	0c c0       	rjmp	.+24     	; 0xfdc <prvCopyDataToQueue+0x2c>
     fc4:	88 81       	ld	r24, Y
     fc6:	99 81       	ldd	r25, Y+1	; 0x01
     fc8:	89 2b       	or	r24, r25
     fca:	09 f0       	breq	.+2      	; 0xfce <prvCopyDataToQueue+0x1e>
     fcc:	42 c0       	rjmp	.+132    	; 0x1052 <__EEPROM_REGION_LENGTH__+0x52>
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
     fd0:	9d 81       	ldd	r25, Y+5	; 0x05
     fd2:	0e 94 29 17 	call	0x2e52	; 0x2e52 <xTaskPriorityDisinherit>
     fd6:	1d 82       	std	Y+5, r1	; 0x05
     fd8:	1c 82       	std	Y+4, r1	; 0x04
     fda:	42 c0       	rjmp	.+132    	; 0x1060 <__EEPROM_REGION_LENGTH__+0x60>
     fdc:	01 11       	cpse	r16, r1
     fde:	17 c0       	rjmp	.+46     	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	9b 81       	ldd	r25, Y+3	; 0x03
     fe6:	0e 94 d8 35 	call	0x6bb0	; 0x6bb0 <memcpy>
     fea:	28 a1       	ldd	r18, Y+32	; 0x20
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	9b 81       	ldd	r25, Y+3	; 0x03
     ff0:	82 0f       	add	r24, r18
     ff2:	91 1d       	adc	r25, r1
     ff4:	9b 83       	std	Y+3, r25	; 0x03
     ff6:	8a 83       	std	Y+2, r24	; 0x02
     ff8:	2c 81       	ldd	r18, Y+4	; 0x04
     ffa:	3d 81       	ldd	r19, Y+5	; 0x05
     ffc:	82 17       	cp	r24, r18
     ffe:	93 07       	cpc	r25, r19
    1000:	50 f1       	brcs	.+84     	; 0x1056 <__EEPROM_REGION_LENGTH__+0x56>
    1002:	88 81       	ld	r24, Y
    1004:	99 81       	ldd	r25, Y+1	; 0x01
    1006:	9b 83       	std	Y+3, r25	; 0x03
    1008:	8a 83       	std	Y+2, r24	; 0x02
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	29 c0       	rjmp	.+82     	; 0x1060 <__EEPROM_REGION_LENGTH__+0x60>
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	8e 81       	ldd	r24, Y+6	; 0x06
    1012:	9f 81       	ldd	r25, Y+7	; 0x07
    1014:	0e 94 d8 35 	call	0x6bb0	; 0x6bb0 <memcpy>
    1018:	88 a1       	ldd	r24, Y+32	; 0x20
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	91 95       	neg	r25
    101e:	81 95       	neg	r24
    1020:	91 09       	sbc	r25, r1
    1022:	2e 81       	ldd	r18, Y+6	; 0x06
    1024:	3f 81       	ldd	r19, Y+7	; 0x07
    1026:	28 0f       	add	r18, r24
    1028:	39 1f       	adc	r19, r25
    102a:	3f 83       	std	Y+7, r19	; 0x07
    102c:	2e 83       	std	Y+6, r18	; 0x06
    102e:	48 81       	ld	r20, Y
    1030:	59 81       	ldd	r21, Y+1	; 0x01
    1032:	24 17       	cp	r18, r20
    1034:	35 07       	cpc	r19, r21
    1036:	30 f4       	brcc	.+12     	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
    1038:	2c 81       	ldd	r18, Y+4	; 0x04
    103a:	3d 81       	ldd	r19, Y+5	; 0x05
    103c:	82 0f       	add	r24, r18
    103e:	93 1f       	adc	r25, r19
    1040:	9f 83       	std	Y+7, r25	; 0x07
    1042:	8e 83       	std	Y+6, r24	; 0x06
    1044:	02 30       	cpi	r16, 0x02	; 2
    1046:	49 f4       	brne	.+18     	; 0x105a <__EEPROM_REGION_LENGTH__+0x5a>
    1048:	11 23       	and	r17, r17
    104a:	49 f0       	breq	.+18     	; 0x105e <__EEPROM_REGION_LENGTH__+0x5e>
    104c:	11 50       	subi	r17, 0x01	; 1
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	07 c0       	rjmp	.+14     	; 0x1060 <__EEPROM_REGION_LENGTH__+0x60>
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	05 c0       	rjmp	.+10     	; 0x1060 <__EEPROM_REGION_LENGTH__+0x60>
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	03 c0       	rjmp	.+6      	; 0x1060 <__EEPROM_REGION_LENGTH__+0x60>
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	01 c0       	rjmp	.+2      	; 0x1060 <__EEPROM_REGION_LENGTH__+0x60>
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	1f 5f       	subi	r17, 0xFF	; 255
    1062:	1e 8f       	std	Y+30, r17	; 0x1e
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	08 95       	ret

0000106e <prvCopyDataFromQueue>:
    106e:	fc 01       	movw	r30, r24
    1070:	40 a1       	ldd	r20, Z+32	; 0x20
    1072:	44 23       	and	r20, r20
    1074:	a9 f0       	breq	.+42     	; 0x10a0 <prvCopyDataFromQueue+0x32>
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	26 81       	ldd	r18, Z+6	; 0x06
    107a:	37 81       	ldd	r19, Z+7	; 0x07
    107c:	24 0f       	add	r18, r20
    107e:	35 1f       	adc	r19, r21
    1080:	37 83       	std	Z+7, r19	; 0x07
    1082:	26 83       	std	Z+6, r18	; 0x06
    1084:	84 81       	ldd	r24, Z+4	; 0x04
    1086:	95 81       	ldd	r25, Z+5	; 0x05
    1088:	28 17       	cp	r18, r24
    108a:	39 07       	cpc	r19, r25
    108c:	20 f0       	brcs	.+8      	; 0x1096 <prvCopyDataFromQueue+0x28>
    108e:	80 81       	ld	r24, Z
    1090:	91 81       	ldd	r25, Z+1	; 0x01
    1092:	97 83       	std	Z+7, r25	; 0x07
    1094:	86 83       	std	Z+6, r24	; 0x06
    1096:	cb 01       	movw	r24, r22
    1098:	66 81       	ldd	r22, Z+6	; 0x06
    109a:	77 81       	ldd	r23, Z+7	; 0x07
    109c:	0c 94 d8 35 	jmp	0x6bb0	; 0x6bb0 <memcpy>
    10a0:	08 95       	ret

000010a2 <prvUnlockQueue>:
    10a2:	1f 93       	push	r17
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	ec 01       	movw	r28, r24
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	0f 92       	push	r0
    10b0:	1a a1       	ldd	r17, Y+34	; 0x22
    10b2:	0b c0       	rjmp	.+22     	; 0x10ca <prvUnlockQueue+0x28>
    10b4:	8b 89       	ldd	r24, Y+19	; 0x13
    10b6:	88 23       	and	r24, r24
    10b8:	51 f0       	breq	.+20     	; 0x10ce <prvUnlockQueue+0x2c>
    10ba:	ce 01       	movw	r24, r28
    10bc:	43 96       	adiw	r24, 0x13	; 19
    10be:	0e 94 b5 14 	call	0x296a	; 0x296a <xTaskRemoveFromEventList>
    10c2:	81 11       	cpse	r24, r1
    10c4:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskMissedYield>
    10c8:	11 50       	subi	r17, 0x01	; 1
    10ca:	11 16       	cp	r1, r17
    10cc:	9c f3       	brlt	.-26     	; 0x10b4 <prvUnlockQueue+0x12>
    10ce:	8f ef       	ldi	r24, 0xFF	; 255
    10d0:	8a a3       	std	Y+34, r24	; 0x22
    10d2:	0f 90       	pop	r0
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	0f 92       	push	r0
    10dc:	19 a1       	ldd	r17, Y+33	; 0x21
    10de:	0b c0       	rjmp	.+22     	; 0x10f6 <prvUnlockQueue+0x54>
    10e0:	88 85       	ldd	r24, Y+8	; 0x08
    10e2:	88 23       	and	r24, r24
    10e4:	51 f0       	breq	.+20     	; 0x10fa <prvUnlockQueue+0x58>
    10e6:	ce 01       	movw	r24, r28
    10e8:	08 96       	adiw	r24, 0x08	; 8
    10ea:	0e 94 b5 14 	call	0x296a	; 0x296a <xTaskRemoveFromEventList>
    10ee:	81 11       	cpse	r24, r1
    10f0:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <vTaskMissedYield>
    10f4:	11 50       	subi	r17, 0x01	; 1
    10f6:	11 16       	cp	r1, r17
    10f8:	9c f3       	brlt	.-26     	; 0x10e0 <prvUnlockQueue+0x3e>
    10fa:	8f ef       	ldi	r24, 0xFF	; 255
    10fc:	89 a3       	std	Y+33, r24	; 0x21
    10fe:	0f 90       	pop	r0
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	1f 91       	pop	r17
    1108:	08 95       	ret

0000110a <xQueueGenericReset>:
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	ec 01       	movw	r28, r24
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	0f 92       	push	r0
    1116:	e8 81       	ld	r30, Y
    1118:	f9 81       	ldd	r31, Y+1	; 0x01
    111a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    111c:	28 a1       	ldd	r18, Y+32	; 0x20
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	82 9f       	mul	r24, r18
    1124:	a0 01       	movw	r20, r0
    1126:	83 9f       	mul	r24, r19
    1128:	50 0d       	add	r21, r0
    112a:	92 9f       	mul	r25, r18
    112c:	50 0d       	add	r21, r0
    112e:	11 24       	eor	r1, r1
    1130:	4e 0f       	add	r20, r30
    1132:	5f 1f       	adc	r21, r31
    1134:	5d 83       	std	Y+5, r21	; 0x05
    1136:	4c 83       	std	Y+4, r20	; 0x04
    1138:	1e 8e       	std	Y+30, r1	; 0x1e
    113a:	fb 83       	std	Y+3, r31	; 0x03
    113c:	ea 83       	std	Y+2, r30	; 0x02
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	28 9f       	mul	r18, r24
    1142:	a0 01       	movw	r20, r0
    1144:	29 9f       	mul	r18, r25
    1146:	50 0d       	add	r21, r0
    1148:	38 9f       	mul	r19, r24
    114a:	50 0d       	add	r21, r0
    114c:	11 24       	eor	r1, r1
    114e:	cf 01       	movw	r24, r30
    1150:	84 0f       	add	r24, r20
    1152:	95 1f       	adc	r25, r21
    1154:	9f 83       	std	Y+7, r25	; 0x07
    1156:	8e 83       	std	Y+6, r24	; 0x06
    1158:	8f ef       	ldi	r24, 0xFF	; 255
    115a:	89 a3       	std	Y+33, r24	; 0x21
    115c:	8a a3       	std	Y+34, r24	; 0x22
    115e:	61 11       	cpse	r22, r1
    1160:	0b c0       	rjmp	.+22     	; 0x1178 <xQueueGenericReset+0x6e>
    1162:	88 85       	ldd	r24, Y+8	; 0x08
    1164:	88 23       	and	r24, r24
    1166:	71 f0       	breq	.+28     	; 0x1184 <xQueueGenericReset+0x7a>
    1168:	ce 01       	movw	r24, r28
    116a:	08 96       	adiw	r24, 0x08	; 8
    116c:	0e 94 b5 14 	call	0x296a	; 0x296a <xTaskRemoveFromEventList>
    1170:	88 23       	and	r24, r24
    1172:	41 f0       	breq	.+16     	; 0x1184 <xQueueGenericReset+0x7a>
    1174:	2a de       	rcall	.-940    	; 0xdca <vPortYield>
    1176:	06 c0       	rjmp	.+12     	; 0x1184 <xQueueGenericReset+0x7a>
    1178:	ce 01       	movw	r24, r28
    117a:	08 96       	adiw	r24, 0x08	; 8
    117c:	58 dd       	rcall	.-1360   	; 0xc2e <vListInitialise>
    117e:	ce 01       	movw	r24, r28
    1180:	43 96       	adiw	r24, 0x13	; 19
    1182:	55 dd       	rcall	.-1366   	; 0xc2e <vListInitialise>
    1184:	0f 90       	pop	r0
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	08 95       	ret

00001190 <prvInitialiseNewQueue>:
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	f8 01       	movw	r30, r16
    1196:	61 11       	cpse	r22, r1
    1198:	03 c0       	rjmp	.+6      	; 0x11a0 <prvInitialiseNewQueue+0x10>
    119a:	11 83       	std	Z+1, r17	; 0x01
    119c:	00 83       	st	Z, r16
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <prvInitialiseNewQueue+0x14>
    11a0:	51 83       	std	Z+1, r21	; 0x01
    11a2:	40 83       	st	Z, r20
    11a4:	87 8f       	std	Z+31, r24	; 0x1f
    11a6:	60 a3       	std	Z+32, r22	; 0x20
    11a8:	61 e0       	ldi	r22, 0x01	; 1
    11aa:	cf 01       	movw	r24, r30
    11ac:	ae df       	rcall	.-164    	; 0x110a <xQueueGenericReset>
    11ae:	1f 91       	pop	r17
    11b0:	0f 91       	pop	r16
    11b2:	08 95       	ret

000011b4 <xQueueGenericCreate>:
    11b4:	df 92       	push	r13
    11b6:	ef 92       	push	r14
    11b8:	ff 92       	push	r15
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	f8 2e       	mov	r15, r24
    11c4:	e6 2e       	mov	r14, r22
    11c6:	d4 2e       	mov	r13, r20
    11c8:	86 9f       	mul	r24, r22
    11ca:	c0 01       	movw	r24, r0
    11cc:	11 24       	eor	r1, r1
    11ce:	83 96       	adiw	r24, 0x23	; 35
    11d0:	48 dc       	rcall	.-1904   	; 0xa62 <pvPortMalloc>
    11d2:	ec 01       	movw	r28, r24
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	41 f0       	breq	.+16     	; 0x11e8 <xQueueGenericCreate+0x34>
    11d8:	8c 01       	movw	r16, r24
    11da:	2d 2d       	mov	r18, r13
    11dc:	ac 01       	movw	r20, r24
    11de:	4d 5d       	subi	r20, 0xDD	; 221
    11e0:	5f 4f       	sbci	r21, 0xFF	; 255
    11e2:	6e 2d       	mov	r22, r14
    11e4:	8f 2d       	mov	r24, r15
    11e6:	d4 df       	rcall	.-88     	; 0x1190 <prvInitialiseNewQueue>
    11e8:	ce 01       	movw	r24, r28
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	ff 90       	pop	r15
    11f4:	ef 90       	pop	r14
    11f6:	df 90       	pop	r13
    11f8:	08 95       	ret

000011fa <xQueueGenericSend>:
    11fa:	cf 92       	push	r12
    11fc:	df 92       	push	r13
    11fe:	ef 92       	push	r14
    1200:	ff 92       	push	r15
    1202:	0f 93       	push	r16
    1204:	1f 93       	push	r17
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	29 97       	sbiw	r28, 0x09	; 9
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	7c 01       	movw	r14, r24
    121c:	6b 01       	movw	r12, r22
    121e:	2e 83       	std	Y+6, r18	; 0x06
    1220:	3f 83       	std	Y+7, r19	; 0x07
    1222:	48 87       	std	Y+8, r20	; 0x08
    1224:	59 87       	std	Y+9, r21	; 0x09
    1226:	10 e0       	ldi	r17, 0x00	; 0
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	0f 92       	push	r0
    122e:	f7 01       	movw	r30, r14
    1230:	96 8d       	ldd	r25, Z+30	; 0x1e
    1232:	87 8d       	ldd	r24, Z+31	; 0x1f
    1234:	98 17       	cp	r25, r24
    1236:	10 f0       	brcs	.+4      	; 0x123c <xQueueGenericSend+0x42>
    1238:	02 30       	cpi	r16, 0x02	; 2
    123a:	b1 f4       	brne	.+44     	; 0x1268 <xQueueGenericSend+0x6e>
    123c:	40 2f       	mov	r20, r16
    123e:	b6 01       	movw	r22, r12
    1240:	c7 01       	movw	r24, r14
    1242:	b6 de       	rcall	.-660    	; 0xfb0 <prvCopyDataToQueue>
    1244:	f7 01       	movw	r30, r14
    1246:	93 89       	ldd	r25, Z+19	; 0x13
    1248:	99 23       	and	r25, r25
    124a:	41 f0       	breq	.+16     	; 0x125c <xQueueGenericSend+0x62>
    124c:	c7 01       	movw	r24, r14
    124e:	43 96       	adiw	r24, 0x13	; 19
    1250:	0e 94 b5 14 	call	0x296a	; 0x296a <xTaskRemoveFromEventList>
    1254:	88 23       	and	r24, r24
    1256:	21 f0       	breq	.+8      	; 0x1260 <xQueueGenericSend+0x66>
    1258:	b8 dd       	rcall	.-1168   	; 0xdca <vPortYield>
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <xQueueGenericSend+0x66>
    125c:	81 11       	cpse	r24, r1
    125e:	b5 dd       	rcall	.-1174   	; 0xdca <vPortYield>
    1260:	0f 90       	pop	r0
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	4c c0       	rjmp	.+152    	; 0x1300 <xQueueGenericSend+0x106>
    1268:	8e 81       	ldd	r24, Y+6	; 0x06
    126a:	9f 81       	ldd	r25, Y+7	; 0x07
    126c:	a8 85       	ldd	r26, Y+8	; 0x08
    126e:	b9 85       	ldd	r27, Y+9	; 0x09
    1270:	89 2b       	or	r24, r25
    1272:	8a 2b       	or	r24, r26
    1274:	8b 2b       	or	r24, r27
    1276:	21 f4       	brne	.+8      	; 0x1280 <xQueueGenericSend+0x86>
    1278:	0f 90       	pop	r0
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	40 c0       	rjmp	.+128    	; 0x1300 <xQueueGenericSend+0x106>
    1280:	11 11       	cpse	r17, r1
    1282:	05 c0       	rjmp	.+10     	; 0x128e <xQueueGenericSend+0x94>
    1284:	ce 01       	movw	r24, r28
    1286:	01 96       	adiw	r24, 0x01	; 1
    1288:	0e 94 14 16 	call	0x2c28	; 0x2c28 <vTaskInternalSetTimeOutState>
    128c:	11 e0       	ldi	r17, 0x01	; 1
    128e:	0f 90       	pop	r0
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	c7 d7       	rcall	.+3982   	; 0x2222 <vTaskSuspendAll>
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	0f 92       	push	r0
    129a:	f7 01       	movw	r30, r14
    129c:	81 a1       	ldd	r24, Z+33	; 0x21
    129e:	8f 3f       	cpi	r24, 0xFF	; 255
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <xQueueGenericSend+0xaa>
    12a2:	11 a2       	std	Z+33, r1	; 0x21
    12a4:	f7 01       	movw	r30, r14
    12a6:	82 a1       	ldd	r24, Z+34	; 0x22
    12a8:	8f 3f       	cpi	r24, 0xFF	; 255
    12aa:	09 f4       	brne	.+2      	; 0x12ae <xQueueGenericSend+0xb4>
    12ac:	12 a2       	std	Z+34, r1	; 0x22
    12ae:	0f 90       	pop	r0
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	be 01       	movw	r22, r28
    12b4:	6a 5f       	subi	r22, 0xFA	; 250
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	ce 01       	movw	r24, r28
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <xTaskCheckForTimeOut>
    12c0:	81 11       	cpse	r24, r1
    12c2:	19 c0       	rjmp	.+50     	; 0x12f6 <xQueueGenericSend+0xfc>
    12c4:	c7 01       	movw	r24, r14
    12c6:	66 de       	rcall	.-820    	; 0xf94 <prvIsQueueFull>
    12c8:	88 23       	and	r24, r24
    12ca:	81 f0       	breq	.+32     	; 0x12ec <xQueueGenericSend+0xf2>
    12cc:	4e 81       	ldd	r20, Y+6	; 0x06
    12ce:	5f 81       	ldd	r21, Y+7	; 0x07
    12d0:	68 85       	ldd	r22, Y+8	; 0x08
    12d2:	79 85       	ldd	r23, Y+9	; 0x09
    12d4:	c7 01       	movw	r24, r14
    12d6:	08 96       	adiw	r24, 0x08	; 8
    12d8:	0e 94 12 14 	call	0x2824	; 0x2824 <vTaskPlaceOnEventList>
    12dc:	c7 01       	movw	r24, r14
    12de:	e1 de       	rcall	.-574    	; 0x10a2 <prvUnlockQueue>
    12e0:	0e 94 51 12 	call	0x24a2	; 0x24a2 <xTaskResumeAll>
    12e4:	81 11       	cpse	r24, r1
    12e6:	a0 cf       	rjmp	.-192    	; 0x1228 <xQueueGenericSend+0x2e>
    12e8:	70 dd       	rcall	.-1312   	; 0xdca <vPortYield>
    12ea:	9e cf       	rjmp	.-196    	; 0x1228 <xQueueGenericSend+0x2e>
    12ec:	c7 01       	movw	r24, r14
    12ee:	d9 de       	rcall	.-590    	; 0x10a2 <prvUnlockQueue>
    12f0:	0e 94 51 12 	call	0x24a2	; 0x24a2 <xTaskResumeAll>
    12f4:	99 cf       	rjmp	.-206    	; 0x1228 <xQueueGenericSend+0x2e>
    12f6:	c7 01       	movw	r24, r14
    12f8:	d4 de       	rcall	.-600    	; 0x10a2 <prvUnlockQueue>
    12fa:	0e 94 51 12 	call	0x24a2	; 0x24a2 <xTaskResumeAll>
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	29 96       	adiw	r28, 0x09	; 9
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	de bf       	out	0x3e, r29	; 62
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	cd bf       	out	0x3d, r28	; 61
    130c:	df 91       	pop	r29
    130e:	cf 91       	pop	r28
    1310:	1f 91       	pop	r17
    1312:	0f 91       	pop	r16
    1314:	ff 90       	pop	r15
    1316:	ef 90       	pop	r14
    1318:	df 90       	pop	r13
    131a:	cf 90       	pop	r12
    131c:	08 95       	ret

0000131e <prvInitialiseMutex>:
    131e:	0f 93       	push	r16
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	69 f0       	breq	.+26     	; 0x133e <prvInitialiseMutex+0x20>
    1324:	fc 01       	movw	r30, r24
    1326:	15 82       	std	Z+5, r1	; 0x05
    1328:	14 82       	std	Z+4, r1	; 0x04
    132a:	11 82       	std	Z+1, r1	; 0x01
    132c:	10 82       	st	Z, r1
    132e:	16 82       	std	Z+6, r1	; 0x06
    1330:	00 e0       	ldi	r16, 0x00	; 0
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	a9 01       	movw	r20, r18
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	5e df       	rcall	.-324    	; 0x11fa <xQueueGenericSend>
    133e:	0f 91       	pop	r16
    1340:	08 95       	ret

00001342 <xQueueCreateMutex>:
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	48 2f       	mov	r20, r24
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	33 df       	rcall	.-410    	; 0x11b4 <xQueueGenericCreate>
    134e:	ec 01       	movw	r28, r24
    1350:	e6 df       	rcall	.-52     	; 0x131e <prvInitialiseMutex>
    1352:	ce 01       	movw	r24, r28
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	08 95       	ret

0000135a <xQueueGenericSendFromISR>:
    135a:	ef 92       	push	r14
    135c:	ff 92       	push	r15
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	8a 01       	movw	r16, r20
    1368:	fc 01       	movw	r30, r24
    136a:	56 8d       	ldd	r21, Z+30	; 0x1e
    136c:	37 8d       	ldd	r19, Z+31	; 0x1f
    136e:	53 17       	cp	r21, r19
    1370:	10 f0       	brcs	.+4      	; 0x1376 <xQueueGenericSendFromISR+0x1c>
    1372:	22 30       	cpi	r18, 0x02	; 2
    1374:	f9 f4       	brne	.+62     	; 0x13b4 <xQueueGenericSendFromISR+0x5a>
    1376:	42 2f       	mov	r20, r18
    1378:	78 01       	movw	r14, r16
    137a:	ec 01       	movw	r28, r24
    137c:	1a a1       	ldd	r17, Y+34	; 0x22
    137e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1380:	ce 01       	movw	r24, r28
    1382:	16 de       	rcall	.-980    	; 0xfb0 <prvCopyDataToQueue>
    1384:	1f 3f       	cpi	r17, 0xFF	; 255
    1386:	81 f4       	brne	.+32     	; 0x13a8 <xQueueGenericSendFromISR+0x4e>
    1388:	8b 89       	ldd	r24, Y+19	; 0x13
    138a:	88 23       	and	r24, r24
    138c:	a9 f0       	breq	.+42     	; 0x13b8 <xQueueGenericSendFromISR+0x5e>
    138e:	ce 01       	movw	r24, r28
    1390:	43 96       	adiw	r24, 0x13	; 19
    1392:	0e 94 b5 14 	call	0x296a	; 0x296a <xTaskRemoveFromEventList>
    1396:	88 23       	and	r24, r24
    1398:	89 f0       	breq	.+34     	; 0x13bc <xQueueGenericSendFromISR+0x62>
    139a:	e1 14       	cp	r14, r1
    139c:	f1 04       	cpc	r15, r1
    139e:	81 f0       	breq	.+32     	; 0x13c0 <xQueueGenericSendFromISR+0x66>
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	f7 01       	movw	r30, r14
    13a4:	80 83       	st	Z, r24
    13a6:	0d c0       	rjmp	.+26     	; 0x13c2 <xQueueGenericSendFromISR+0x68>
    13a8:	ff 24       	eor	r15, r15
    13aa:	f3 94       	inc	r15
    13ac:	f1 0e       	add	r15, r17
    13ae:	fa a2       	std	Y+34, r15	; 0x22
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	07 c0       	rjmp	.+14     	; 0x13c2 <xQueueGenericSendFromISR+0x68>
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	05 c0       	rjmp	.+10     	; 0x13c2 <xQueueGenericSendFromISR+0x68>
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	03 c0       	rjmp	.+6      	; 0x13c2 <xQueueGenericSendFromISR+0x68>
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	01 c0       	rjmp	.+2      	; 0x13c2 <xQueueGenericSendFromISR+0x68>
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	ff 90       	pop	r15
    13cc:	ef 90       	pop	r14
    13ce:	08 95       	ret

000013d0 <xQueueReceive>:
    13d0:	cf 92       	push	r12
    13d2:	df 92       	push	r13
    13d4:	ef 92       	push	r14
    13d6:	ff 92       	push	r15
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	29 97       	sbiw	r28, 0x09	; 9
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	f8 94       	cli
    13ea:	de bf       	out	0x3e, r29	; 62
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	cd bf       	out	0x3d, r28	; 61
    13f0:	8c 01       	movw	r16, r24
    13f2:	6b 01       	movw	r12, r22
    13f4:	2e 83       	std	Y+6, r18	; 0x06
    13f6:	3f 83       	std	Y+7, r19	; 0x07
    13f8:	48 87       	std	Y+8, r20	; 0x08
    13fa:	59 87       	std	Y+9, r21	; 0x09
    13fc:	e1 2c       	mov	r14, r1
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	f8 94       	cli
    1402:	0f 92       	push	r0
    1404:	f8 01       	movw	r30, r16
    1406:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1408:	ff 20       	and	r15, r15
    140a:	99 f0       	breq	.+38     	; 0x1432 <xQueueReceive+0x62>
    140c:	b6 01       	movw	r22, r12
    140e:	c8 01       	movw	r24, r16
    1410:	2e de       	rcall	.-932    	; 0x106e <prvCopyDataFromQueue>
    1412:	fa 94       	dec	r15
    1414:	f8 01       	movw	r30, r16
    1416:	f6 8e       	std	Z+30, r15	; 0x1e
    1418:	80 85       	ldd	r24, Z+8	; 0x08
    141a:	88 23       	and	r24, r24
    141c:	31 f0       	breq	.+12     	; 0x142a <xQueueReceive+0x5a>
    141e:	c8 01       	movw	r24, r16
    1420:	08 96       	adiw	r24, 0x08	; 8
    1422:	0e 94 b5 14 	call	0x296a	; 0x296a <xTaskRemoveFromEventList>
    1426:	81 11       	cpse	r24, r1
    1428:	d0 dc       	rcall	.-1632   	; 0xdca <vPortYield>
    142a:	0f 90       	pop	r0
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	4f c0       	rjmp	.+158    	; 0x14d0 <xQueueReceive+0x100>
    1432:	8e 81       	ldd	r24, Y+6	; 0x06
    1434:	9f 81       	ldd	r25, Y+7	; 0x07
    1436:	a8 85       	ldd	r26, Y+8	; 0x08
    1438:	b9 85       	ldd	r27, Y+9	; 0x09
    143a:	89 2b       	or	r24, r25
    143c:	8a 2b       	or	r24, r26
    143e:	8b 2b       	or	r24, r27
    1440:	21 f4       	brne	.+8      	; 0x144a <xQueueReceive+0x7a>
    1442:	0f 90       	pop	r0
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	43 c0       	rjmp	.+134    	; 0x14d0 <xQueueReceive+0x100>
    144a:	e1 10       	cpse	r14, r1
    144c:	06 c0       	rjmp	.+12     	; 0x145a <xQueueReceive+0x8a>
    144e:	ce 01       	movw	r24, r28
    1450:	01 96       	adiw	r24, 0x01	; 1
    1452:	0e 94 14 16 	call	0x2c28	; 0x2c28 <vTaskInternalSetTimeOutState>
    1456:	ee 24       	eor	r14, r14
    1458:	e3 94       	inc	r14
    145a:	0f 90       	pop	r0
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	e1 d6       	rcall	.+3522   	; 0x2222 <vTaskSuspendAll>
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	0f 92       	push	r0
    1466:	f8 01       	movw	r30, r16
    1468:	81 a1       	ldd	r24, Z+33	; 0x21
    146a:	8f 3f       	cpi	r24, 0xFF	; 255
    146c:	09 f4       	brne	.+2      	; 0x1470 <xQueueReceive+0xa0>
    146e:	11 a2       	std	Z+33, r1	; 0x21
    1470:	f8 01       	movw	r30, r16
    1472:	82 a1       	ldd	r24, Z+34	; 0x22
    1474:	8f 3f       	cpi	r24, 0xFF	; 255
    1476:	09 f4       	brne	.+2      	; 0x147a <xQueueReceive+0xaa>
    1478:	12 a2       	std	Z+34, r1	; 0x22
    147a:	0f 90       	pop	r0
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	be 01       	movw	r22, r28
    1480:	6a 5f       	subi	r22, 0xFA	; 250
    1482:	7f 4f       	sbci	r23, 0xFF	; 255
    1484:	ce 01       	movw	r24, r28
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <xTaskCheckForTimeOut>
    148c:	81 11       	cpse	r24, r1
    148e:	17 c0       	rjmp	.+46     	; 0x14be <xQueueReceive+0xee>
    1490:	c8 01       	movw	r24, r16
    1492:	73 dd       	rcall	.-1306   	; 0xf7a <prvIsQueueEmpty>
    1494:	88 23       	and	r24, r24
    1496:	79 f0       	breq	.+30     	; 0x14b6 <xQueueReceive+0xe6>
    1498:	4e 81       	ldd	r20, Y+6	; 0x06
    149a:	5f 81       	ldd	r21, Y+7	; 0x07
    149c:	68 85       	ldd	r22, Y+8	; 0x08
    149e:	79 85       	ldd	r23, Y+9	; 0x09
    14a0:	c8 01       	movw	r24, r16
    14a2:	43 96       	adiw	r24, 0x13	; 19
    14a4:	0e 94 12 14 	call	0x2824	; 0x2824 <vTaskPlaceOnEventList>
    14a8:	c8 01       	movw	r24, r16
    14aa:	fb dd       	rcall	.-1034   	; 0x10a2 <prvUnlockQueue>
    14ac:	fa d7       	rcall	.+4084   	; 0x24a2 <xTaskResumeAll>
    14ae:	81 11       	cpse	r24, r1
    14b0:	a6 cf       	rjmp	.-180    	; 0x13fe <xQueueReceive+0x2e>
    14b2:	8b dc       	rcall	.-1770   	; 0xdca <vPortYield>
    14b4:	a4 cf       	rjmp	.-184    	; 0x13fe <xQueueReceive+0x2e>
    14b6:	c8 01       	movw	r24, r16
    14b8:	f4 dd       	rcall	.-1048   	; 0x10a2 <prvUnlockQueue>
    14ba:	f3 d7       	rcall	.+4070   	; 0x24a2 <xTaskResumeAll>
    14bc:	a0 cf       	rjmp	.-192    	; 0x13fe <xQueueReceive+0x2e>
    14be:	c8 01       	movw	r24, r16
    14c0:	f0 dd       	rcall	.-1056   	; 0x10a2 <prvUnlockQueue>
    14c2:	ef d7       	rcall	.+4062   	; 0x24a2 <xTaskResumeAll>
    14c4:	c8 01       	movw	r24, r16
    14c6:	59 dd       	rcall	.-1358   	; 0xf7a <prvIsQueueEmpty>
    14c8:	88 23       	and	r24, r24
    14ca:	09 f4       	brne	.+2      	; 0x14ce <xQueueReceive+0xfe>
    14cc:	98 cf       	rjmp	.-208    	; 0x13fe <xQueueReceive+0x2e>
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	29 96       	adiw	r28, 0x09	; 9
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	de bf       	out	0x3e, r29	; 62
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	cd bf       	out	0x3d, r28	; 61
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	1f 91       	pop	r17
    14e2:	0f 91       	pop	r16
    14e4:	ff 90       	pop	r15
    14e6:	ef 90       	pop	r14
    14e8:	df 90       	pop	r13
    14ea:	cf 90       	pop	r12
    14ec:	08 95       	ret

000014ee <xQueueSemaphoreTake>:
    14ee:	ef 92       	push	r14
    14f0:	ff 92       	push	r15
    14f2:	0f 93       	push	r16
    14f4:	1f 93       	push	r17
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	29 97       	sbiw	r28, 0x09	; 9
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	f8 94       	cli
    1504:	de bf       	out	0x3e, r29	; 62
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	cd bf       	out	0x3d, r28	; 61
    150a:	8c 01       	movw	r16, r24
    150c:	4e 83       	std	Y+6, r20	; 0x06
    150e:	5f 83       	std	Y+7, r21	; 0x07
    1510:	68 87       	std	Y+8, r22	; 0x08
    1512:	79 87       	std	Y+9, r23	; 0x09
    1514:	e1 2c       	mov	r14, r1
    1516:	f1 2c       	mov	r15, r1
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	0f 92       	push	r0
    151e:	f8 01       	movw	r30, r16
    1520:	86 8d       	ldd	r24, Z+30	; 0x1e
    1522:	88 23       	and	r24, r24
    1524:	c9 f0       	breq	.+50     	; 0x1558 <xQueueSemaphoreTake+0x6a>
    1526:	81 50       	subi	r24, 0x01	; 1
    1528:	86 8f       	std	Z+30, r24	; 0x1e
    152a:	80 81       	ld	r24, Z
    152c:	91 81       	ldd	r25, Z+1	; 0x01
    152e:	89 2b       	or	r24, r25
    1530:	29 f4       	brne	.+10     	; 0x153c <xQueueSemaphoreTake+0x4e>
    1532:	0e 94 15 18 	call	0x302a	; 0x302a <pvTaskIncrementMutexHeldCount>
    1536:	f8 01       	movw	r30, r16
    1538:	95 83       	std	Z+5, r25	; 0x05
    153a:	84 83       	std	Z+4, r24	; 0x04
    153c:	f8 01       	movw	r30, r16
    153e:	80 85       	ldd	r24, Z+8	; 0x08
    1540:	88 23       	and	r24, r24
    1542:	31 f0       	breq	.+12     	; 0x1550 <xQueueSemaphoreTake+0x62>
    1544:	c8 01       	movw	r24, r16
    1546:	08 96       	adiw	r24, 0x08	; 8
    1548:	0e 94 b5 14 	call	0x296a	; 0x296a <xTaskRemoveFromEventList>
    154c:	81 11       	cpse	r24, r1
    154e:	3d dc       	rcall	.-1926   	; 0xdca <vPortYield>
    1550:	0f 90       	pop	r0
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	6f c0       	rjmp	.+222    	; 0x1636 <xQueueSemaphoreTake+0x148>
    1558:	8e 81       	ldd	r24, Y+6	; 0x06
    155a:	9f 81       	ldd	r25, Y+7	; 0x07
    155c:	a8 85       	ldd	r26, Y+8	; 0x08
    155e:	b9 85       	ldd	r27, Y+9	; 0x09
    1560:	89 2b       	or	r24, r25
    1562:	8a 2b       	or	r24, r26
    1564:	8b 2b       	or	r24, r27
    1566:	21 f4       	brne	.+8      	; 0x1570 <xQueueSemaphoreTake+0x82>
    1568:	0f 90       	pop	r0
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	63 c0       	rjmp	.+198    	; 0x1636 <xQueueSemaphoreTake+0x148>
    1570:	f1 10       	cpse	r15, r1
    1572:	06 c0       	rjmp	.+12     	; 0x1580 <xQueueSemaphoreTake+0x92>
    1574:	ce 01       	movw	r24, r28
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	0e 94 14 16 	call	0x2c28	; 0x2c28 <vTaskInternalSetTimeOutState>
    157c:	ff 24       	eor	r15, r15
    157e:	f3 94       	inc	r15
    1580:	0f 90       	pop	r0
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	4e d6       	rcall	.+3228   	; 0x2222 <vTaskSuspendAll>
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	0f 92       	push	r0
    158c:	f8 01       	movw	r30, r16
    158e:	81 a1       	ldd	r24, Z+33	; 0x21
    1590:	8f 3f       	cpi	r24, 0xFF	; 255
    1592:	09 f4       	brne	.+2      	; 0x1596 <xQueueSemaphoreTake+0xa8>
    1594:	11 a2       	std	Z+33, r1	; 0x21
    1596:	f8 01       	movw	r30, r16
    1598:	82 a1       	ldd	r24, Z+34	; 0x22
    159a:	8f 3f       	cpi	r24, 0xFF	; 255
    159c:	09 f4       	brne	.+2      	; 0x15a0 <xQueueSemaphoreTake+0xb2>
    159e:	12 a2       	std	Z+34, r1	; 0x22
    15a0:	0f 90       	pop	r0
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	be 01       	movw	r22, r28
    15a6:	6a 5f       	subi	r22, 0xFA	; 250
    15a8:	7f 4f       	sbci	r23, 0xFF	; 255
    15aa:	ce 01       	movw	r24, r28
    15ac:	01 96       	adiw	r24, 0x01	; 1
    15ae:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <xTaskCheckForTimeOut>
    15b2:	81 11       	cpse	r24, r1
    15b4:	26 c0       	rjmp	.+76     	; 0x1602 <xQueueSemaphoreTake+0x114>
    15b6:	c8 01       	movw	r24, r16
    15b8:	e0 dc       	rcall	.-1600   	; 0xf7a <prvIsQueueEmpty>
    15ba:	88 23       	and	r24, r24
    15bc:	f1 f0       	breq	.+60     	; 0x15fa <xQueueSemaphoreTake+0x10c>
    15be:	f8 01       	movw	r30, r16
    15c0:	80 81       	ld	r24, Z
    15c2:	91 81       	ldd	r25, Z+1	; 0x01
    15c4:	89 2b       	or	r24, r25
    15c6:	51 f4       	brne	.+20     	; 0x15dc <xQueueSemaphoreTake+0xee>
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	f8 94       	cli
    15cc:	0f 92       	push	r0
    15ce:	84 81       	ldd	r24, Z+4	; 0x04
    15d0:	95 81       	ldd	r25, Z+5	; 0x05
    15d2:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <xTaskPriorityInherit>
    15d6:	e8 2e       	mov	r14, r24
    15d8:	0f 90       	pop	r0
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	4e 81       	ldd	r20, Y+6	; 0x06
    15de:	5f 81       	ldd	r21, Y+7	; 0x07
    15e0:	68 85       	ldd	r22, Y+8	; 0x08
    15e2:	79 85       	ldd	r23, Y+9	; 0x09
    15e4:	c8 01       	movw	r24, r16
    15e6:	43 96       	adiw	r24, 0x13	; 19
    15e8:	0e 94 12 14 	call	0x2824	; 0x2824 <vTaskPlaceOnEventList>
    15ec:	c8 01       	movw	r24, r16
    15ee:	59 dd       	rcall	.-1358   	; 0x10a2 <prvUnlockQueue>
    15f0:	58 d7       	rcall	.+3760   	; 0x24a2 <xTaskResumeAll>
    15f2:	81 11       	cpse	r24, r1
    15f4:	91 cf       	rjmp	.-222    	; 0x1518 <xQueueSemaphoreTake+0x2a>
    15f6:	e9 db       	rcall	.-2094   	; 0xdca <vPortYield>
    15f8:	8f cf       	rjmp	.-226    	; 0x1518 <xQueueSemaphoreTake+0x2a>
    15fa:	c8 01       	movw	r24, r16
    15fc:	52 dd       	rcall	.-1372   	; 0x10a2 <prvUnlockQueue>
    15fe:	51 d7       	rcall	.+3746   	; 0x24a2 <xTaskResumeAll>
    1600:	8b cf       	rjmp	.-234    	; 0x1518 <xQueueSemaphoreTake+0x2a>
    1602:	c8 01       	movw	r24, r16
    1604:	4e dd       	rcall	.-1380   	; 0x10a2 <prvUnlockQueue>
    1606:	4d d7       	rcall	.+3738   	; 0x24a2 <xTaskResumeAll>
    1608:	c8 01       	movw	r24, r16
    160a:	b7 dc       	rcall	.-1682   	; 0xf7a <prvIsQueueEmpty>
    160c:	88 23       	and	r24, r24
    160e:	09 f4       	brne	.+2      	; 0x1612 <xQueueSemaphoreTake+0x124>
    1610:	83 cf       	rjmp	.-250    	; 0x1518 <xQueueSemaphoreTake+0x2a>
    1612:	ee 20       	and	r14, r14
    1614:	79 f0       	breq	.+30     	; 0x1634 <xQueueSemaphoreTake+0x146>
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	0f 92       	push	r0
    161c:	c8 01       	movw	r24, r16
    161e:	9d dc       	rcall	.-1734   	; 0xf5a <prvGetDisinheritPriorityAfterTimeout>
    1620:	68 2f       	mov	r22, r24
    1622:	f8 01       	movw	r30, r16
    1624:	84 81       	ldd	r24, Z+4	; 0x04
    1626:	95 81       	ldd	r25, Z+5	; 0x05
    1628:	0e 94 84 17 	call	0x2f08	; 0x2f08 <vTaskPriorityDisinheritAfterTimeout>
    162c:	0f 90       	pop	r0
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	01 c0       	rjmp	.+2      	; 0x1636 <xQueueSemaphoreTake+0x148>
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	29 96       	adiw	r28, 0x09	; 9
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	ff 90       	pop	r15
    164c:	ef 90       	pop	r14
    164e:	08 95       	ret

00001650 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1650:	cf 93       	push	r28
    1652:	df 93       	push	r29
    1654:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	0f 92       	push	r0
    165c:	89 a1       	ldd	r24, Y+33	; 0x21
    165e:	8f 3f       	cpi	r24, 0xFF	; 255
    1660:	09 f4       	brne	.+2      	; 0x1664 <vQueueWaitForMessageRestricted+0x14>
    1662:	19 a2       	std	Y+33, r1	; 0x21
    1664:	8a a1       	ldd	r24, Y+34	; 0x22
    1666:	8f 3f       	cpi	r24, 0xFF	; 255
    1668:	09 f4       	brne	.+2      	; 0x166c <vQueueWaitForMessageRestricted+0x1c>
    166a:	1a a2       	std	Y+34, r1	; 0x22
    166c:	0f 90       	pop	r0
    166e:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1670:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1672:	81 11       	cpse	r24, r1
    1674:	04 c0       	rjmp	.+8      	; 0x167e <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1676:	ce 01       	movw	r24, r28
    1678:	43 96       	adiw	r24, 0x13	; 19
    167a:	0e 94 73 14 	call	0x28e6	; 0x28e6 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    167e:	ce 01       	movw	r24, r28
    1680:	10 dd       	rcall	.-1504   	; 0x10a2 <prvUnlockQueue>
    }
    1682:	df 91       	pop	r29
    1684:	cf 91       	pop	r28
    1686:	08 95       	ret

00001688 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1688:	fc 01       	movw	r30, r24
    168a:	44 81       	ldd	r20, Z+4	; 0x04
    168c:	55 81       	ldd	r21, Z+5	; 0x05
    168e:	22 81       	ldd	r18, Z+2	; 0x02
    1690:	33 81       	ldd	r19, Z+3	; 0x03
    1692:	24 0f       	add	r18, r20
    1694:	35 1f       	adc	r19, r21
    1696:	80 81       	ld	r24, Z
    1698:	91 81       	ldd	r25, Z+1	; 0x01
    169a:	b9 01       	movw	r22, r18
    169c:	68 1b       	sub	r22, r24
    169e:	79 0b       	sbc	r23, r25
    16a0:	cb 01       	movw	r24, r22
    16a2:	64 17       	cp	r22, r20
    16a4:	75 07       	cpc	r23, r21
    16a6:	10 f0       	brcs	.+4      	; 0x16ac <prvBytesInBuffer+0x24>
    16a8:	84 1b       	sub	r24, r20
    16aa:	95 0b       	sbc	r25, r21
    16ac:	08 95       	ret

000016ae <prvInitialiseNewStreamBuffer>:
    16ae:	0f 93       	push	r16
    16b0:	fc 01       	movw	r30, r24
    16b2:	8f e0       	ldi	r24, 0x0F	; 15
    16b4:	df 01       	movw	r26, r30
    16b6:	1d 92       	st	X+, r1
    16b8:	8a 95       	dec	r24
    16ba:	e9 f7       	brne	.-6      	; 0x16b6 <prvInitialiseNewStreamBuffer+0x8>
    16bc:	75 87       	std	Z+13, r23	; 0x0d
    16be:	64 87       	std	Z+12, r22	; 0x0c
    16c0:	55 83       	std	Z+5, r21	; 0x05
    16c2:	44 83       	std	Z+4, r20	; 0x04
    16c4:	37 83       	std	Z+7, r19	; 0x07
    16c6:	26 83       	std	Z+6, r18	; 0x06
    16c8:	06 87       	std	Z+14, r16	; 0x0e
    16ca:	0f 91       	pop	r16
    16cc:	08 95       	ret

000016ce <prvWriteBytesToBuffer>:
    16ce:	af 92       	push	r10
    16d0:	bf 92       	push	r11
    16d2:	cf 92       	push	r12
    16d4:	df 92       	push	r13
    16d6:	ef 92       	push	r14
    16d8:	ff 92       	push	r15
    16da:	0f 93       	push	r16
    16dc:	1f 93       	push	r17
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	6c 01       	movw	r12, r24
    16e4:	5b 01       	movw	r10, r22
    16e6:	7a 01       	movw	r14, r20
    16e8:	fc 01       	movw	r30, r24
    16ea:	c2 81       	ldd	r28, Z+2	; 0x02
    16ec:	d3 81       	ldd	r29, Z+3	; 0x03
    16ee:	04 81       	ldd	r16, Z+4	; 0x04
    16f0:	15 81       	ldd	r17, Z+5	; 0x05
    16f2:	0c 1b       	sub	r16, r28
    16f4:	1d 0b       	sbc	r17, r29
    16f6:	40 17       	cp	r20, r16
    16f8:	51 07       	cpc	r21, r17
    16fa:	08 f4       	brcc	.+2      	; 0x16fe <prvWriteBytesToBuffer+0x30>
    16fc:	8a 01       	movw	r16, r20
    16fe:	f6 01       	movw	r30, r12
    1700:	84 85       	ldd	r24, Z+12	; 0x0c
    1702:	95 85       	ldd	r25, Z+13	; 0x0d
    1704:	a8 01       	movw	r20, r16
    1706:	b5 01       	movw	r22, r10
    1708:	8c 0f       	add	r24, r28
    170a:	9d 1f       	adc	r25, r29
    170c:	0e 94 d8 35 	call	0x6bb0	; 0x6bb0 <memcpy>
    1710:	0e 15       	cp	r16, r14
    1712:	1f 05       	cpc	r17, r15
    1714:	58 f4       	brcc	.+22     	; 0x172c <prvWriteBytesToBuffer+0x5e>
    1716:	a7 01       	movw	r20, r14
    1718:	40 1b       	sub	r20, r16
    171a:	51 0b       	sbc	r21, r17
    171c:	b5 01       	movw	r22, r10
    171e:	60 0f       	add	r22, r16
    1720:	71 1f       	adc	r23, r17
    1722:	f6 01       	movw	r30, r12
    1724:	84 85       	ldd	r24, Z+12	; 0x0c
    1726:	95 85       	ldd	r25, Z+13	; 0x0d
    1728:	0e 94 d8 35 	call	0x6bb0	; 0x6bb0 <memcpy>
    172c:	ce 01       	movw	r24, r28
    172e:	8e 0d       	add	r24, r14
    1730:	9f 1d       	adc	r25, r15
    1732:	f6 01       	movw	r30, r12
    1734:	24 81       	ldd	r18, Z+4	; 0x04
    1736:	35 81       	ldd	r19, Z+5	; 0x05
    1738:	82 17       	cp	r24, r18
    173a:	93 07       	cpc	r25, r19
    173c:	10 f0       	brcs	.+4      	; 0x1742 <prvWriteBytesToBuffer+0x74>
    173e:	82 1b       	sub	r24, r18
    1740:	93 0b       	sbc	r25, r19
    1742:	f6 01       	movw	r30, r12
    1744:	93 83       	std	Z+3, r25	; 0x03
    1746:	82 83       	std	Z+2, r24	; 0x02
    1748:	c7 01       	movw	r24, r14
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	1f 91       	pop	r17
    1750:	0f 91       	pop	r16
    1752:	ff 90       	pop	r15
    1754:	ef 90       	pop	r14
    1756:	df 90       	pop	r13
    1758:	cf 90       	pop	r12
    175a:	bf 90       	pop	r11
    175c:	af 90       	pop	r10
    175e:	08 95       	ret

00001760 <prvWriteMessageToBuffer>:
    1760:	cf 92       	push	r12
    1762:	df 92       	push	r13
    1764:	ef 92       	push	r14
    1766:	ff 92       	push	r15
    1768:	0f 93       	push	r16
    176a:	1f 93       	push	r17
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
    1770:	1f 92       	push	r1
    1772:	1f 92       	push	r1
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	7c 01       	movw	r14, r24
    177a:	6b 01       	movw	r12, r22
    177c:	5a 83       	std	Y+2, r21	; 0x02
    177e:	49 83       	std	Y+1, r20	; 0x01
    1780:	21 15       	cp	r18, r1
    1782:	31 05       	cpc	r19, r1
    1784:	c1 f0       	breq	.+48     	; 0x17b6 <prvWriteMessageToBuffer+0x56>
    1786:	fc 01       	movw	r30, r24
    1788:	86 85       	ldd	r24, Z+14	; 0x0e
    178a:	80 fd       	sbrc	r24, 0
    178c:	08 c0       	rjmp	.+16     	; 0x179e <prvWriteMessageToBuffer+0x3e>
    178e:	42 17       	cp	r20, r18
    1790:	53 07       	cpc	r21, r19
    1792:	08 f4       	brcc	.+2      	; 0x1796 <prvWriteMessageToBuffer+0x36>
    1794:	9a 01       	movw	r18, r20
    1796:	3a 83       	std	Y+2, r19	; 0x02
    1798:	29 83       	std	Y+1, r18	; 0x01
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	0f c0       	rjmp	.+30     	; 0x17bc <prvWriteMessageToBuffer+0x5c>
    179e:	20 17       	cp	r18, r16
    17a0:	31 07       	cpc	r19, r17
    17a2:	58 f0       	brcs	.+22     	; 0x17ba <prvWriteMessageToBuffer+0x5a>
    17a4:	42 e0       	ldi	r20, 0x02	; 2
    17a6:	50 e0       	ldi	r21, 0x00	; 0
    17a8:	be 01       	movw	r22, r28
    17aa:	6f 5f       	subi	r22, 0xFF	; 255
    17ac:	7f 4f       	sbci	r23, 0xFF	; 255
    17ae:	c7 01       	movw	r24, r14
    17b0:	8e df       	rcall	.-228    	; 0x16ce <prvWriteBytesToBuffer>
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	03 c0       	rjmp	.+6      	; 0x17bc <prvWriteMessageToBuffer+0x5c>
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	01 c0       	rjmp	.+2      	; 0x17bc <prvWriteMessageToBuffer+0x5c>
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	88 23       	and	r24, r24
    17be:	31 f0       	breq	.+12     	; 0x17cc <prvWriteMessageToBuffer+0x6c>
    17c0:	49 81       	ldd	r20, Y+1	; 0x01
    17c2:	5a 81       	ldd	r21, Y+2	; 0x02
    17c4:	b6 01       	movw	r22, r12
    17c6:	c7 01       	movw	r24, r14
    17c8:	82 df       	rcall	.-252    	; 0x16ce <prvWriteBytesToBuffer>
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <prvWriteMessageToBuffer+0x70>
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	1f 91       	pop	r17
    17da:	0f 91       	pop	r16
    17dc:	ff 90       	pop	r15
    17de:	ef 90       	pop	r14
    17e0:	df 90       	pop	r13
    17e2:	cf 90       	pop	r12
    17e4:	08 95       	ret

000017e6 <prvReadBytesFromBuffer>:
    17e6:	af 92       	push	r10
    17e8:	bf 92       	push	r11
    17ea:	cf 92       	push	r12
    17ec:	df 92       	push	r13
    17ee:	ef 92       	push	r14
    17f0:	ff 92       	push	r15
    17f2:	0f 93       	push	r16
    17f4:	1f 93       	push	r17
    17f6:	cf 93       	push	r28
    17f8:	df 93       	push	r29
    17fa:	7c 01       	movw	r14, r24
    17fc:	5b 01       	movw	r10, r22
    17fe:	e9 01       	movw	r28, r18
    1800:	42 17       	cp	r20, r18
    1802:	53 07       	cpc	r21, r19
    1804:	08 f4       	brcc	.+2      	; 0x1808 <prvReadBytesFromBuffer+0x22>
    1806:	ea 01       	movw	r28, r20
    1808:	20 97       	sbiw	r28, 0x00	; 0
    180a:	81 f1       	breq	.+96     	; 0x186c <prvReadBytesFromBuffer+0x86>
    180c:	f7 01       	movw	r30, r14
    180e:	00 81       	ld	r16, Z
    1810:	11 81       	ldd	r17, Z+1	; 0x01
    1812:	84 81       	ldd	r24, Z+4	; 0x04
    1814:	95 81       	ldd	r25, Z+5	; 0x05
    1816:	80 1b       	sub	r24, r16
    1818:	91 0b       	sbc	r25, r17
    181a:	6e 01       	movw	r12, r28
    181c:	8c 17       	cp	r24, r28
    181e:	9d 07       	cpc	r25, r29
    1820:	08 f4       	brcc	.+2      	; 0x1824 <prvReadBytesFromBuffer+0x3e>
    1822:	6c 01       	movw	r12, r24
    1824:	f7 01       	movw	r30, r14
    1826:	64 85       	ldd	r22, Z+12	; 0x0c
    1828:	75 85       	ldd	r23, Z+13	; 0x0d
    182a:	60 0f       	add	r22, r16
    182c:	71 1f       	adc	r23, r17
    182e:	a6 01       	movw	r20, r12
    1830:	c5 01       	movw	r24, r10
    1832:	0e 94 d8 35 	call	0x6bb0	; 0x6bb0 <memcpy>
    1836:	cc 16       	cp	r12, r28
    1838:	dd 06       	cpc	r13, r29
    183a:	58 f4       	brcc	.+22     	; 0x1852 <prvReadBytesFromBuffer+0x6c>
    183c:	ae 01       	movw	r20, r28
    183e:	4c 19       	sub	r20, r12
    1840:	5d 09       	sbc	r21, r13
    1842:	f7 01       	movw	r30, r14
    1844:	64 85       	ldd	r22, Z+12	; 0x0c
    1846:	75 85       	ldd	r23, Z+13	; 0x0d
    1848:	c5 01       	movw	r24, r10
    184a:	8c 0d       	add	r24, r12
    184c:	9d 1d       	adc	r25, r13
    184e:	0e 94 d8 35 	call	0x6bb0	; 0x6bb0 <memcpy>
    1852:	0c 0f       	add	r16, r28
    1854:	1d 1f       	adc	r17, r29
    1856:	f7 01       	movw	r30, r14
    1858:	84 81       	ldd	r24, Z+4	; 0x04
    185a:	95 81       	ldd	r25, Z+5	; 0x05
    185c:	08 17       	cp	r16, r24
    185e:	19 07       	cpc	r17, r25
    1860:	10 f0       	brcs	.+4      	; 0x1866 <prvReadBytesFromBuffer+0x80>
    1862:	08 1b       	sub	r16, r24
    1864:	19 0b       	sbc	r17, r25
    1866:	f7 01       	movw	r30, r14
    1868:	11 83       	std	Z+1, r17	; 0x01
    186a:	00 83       	st	Z, r16
    186c:	ce 01       	movw	r24, r28
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	1f 91       	pop	r17
    1874:	0f 91       	pop	r16
    1876:	ff 90       	pop	r15
    1878:	ef 90       	pop	r14
    187a:	df 90       	pop	r13
    187c:	cf 90       	pop	r12
    187e:	bf 90       	pop	r11
    1880:	af 90       	pop	r10
    1882:	08 95       	ret

00001884 <prvReadMessageFromBuffer>:
    1884:	6f 92       	push	r6
    1886:	7f 92       	push	r7
    1888:	8f 92       	push	r8
    188a:	9f 92       	push	r9
    188c:	af 92       	push	r10
    188e:	bf 92       	push	r11
    1890:	cf 92       	push	r12
    1892:	df 92       	push	r13
    1894:	ef 92       	push	r14
    1896:	ff 92       	push	r15
    1898:	0f 93       	push	r16
    189a:	1f 93       	push	r17
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	1f 92       	push	r1
    18a2:	1f 92       	push	r1
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	6c 01       	movw	r12, r24
    18aa:	4b 01       	movw	r8, r22
    18ac:	5a 01       	movw	r10, r20
    18ae:	79 01       	movw	r14, r18
    18b0:	01 15       	cp	r16, r1
    18b2:	11 05       	cpc	r17, r1
    18b4:	b1 f0       	breq	.+44     	; 0x18e2 <prvReadMessageFromBuffer+0x5e>
    18b6:	fc 01       	movw	r30, r24
    18b8:	60 80       	ld	r6, Z
    18ba:	71 80       	ldd	r7, Z+1	; 0x01
    18bc:	a8 01       	movw	r20, r16
    18be:	be 01       	movw	r22, r28
    18c0:	6f 5f       	subi	r22, 0xFF	; 255
    18c2:	7f 4f       	sbci	r23, 0xFF	; 255
    18c4:	90 df       	rcall	.-224    	; 0x17e6 <prvReadBytesFromBuffer>
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ca:	e0 1a       	sub	r14, r16
    18cc:	f1 0a       	sbc	r15, r17
    18ce:	a8 16       	cp	r10, r24
    18d0:	b9 06       	cpc	r11, r25
    18d2:	30 f4       	brcc	.+12     	; 0x18e0 <prvReadMessageFromBuffer+0x5c>
    18d4:	f6 01       	movw	r30, r12
    18d6:	71 82       	std	Z+1, r7	; 0x01
    18d8:	60 82       	st	Z, r6
    18da:	a1 2c       	mov	r10, r1
    18dc:	b1 2c       	mov	r11, r1
    18de:	01 c0       	rjmp	.+2      	; 0x18e2 <prvReadMessageFromBuffer+0x5e>
    18e0:	5c 01       	movw	r10, r24
    18e2:	97 01       	movw	r18, r14
    18e4:	a5 01       	movw	r20, r10
    18e6:	b4 01       	movw	r22, r8
    18e8:	c6 01       	movw	r24, r12
    18ea:	7d df       	rcall	.-262    	; 0x17e6 <prvReadBytesFromBuffer>
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	1f 91       	pop	r17
    18f6:	0f 91       	pop	r16
    18f8:	ff 90       	pop	r15
    18fa:	ef 90       	pop	r14
    18fc:	df 90       	pop	r13
    18fe:	cf 90       	pop	r12
    1900:	bf 90       	pop	r11
    1902:	af 90       	pop	r10
    1904:	9f 90       	pop	r9
    1906:	8f 90       	pop	r8
    1908:	7f 90       	pop	r7
    190a:	6f 90       	pop	r6
    190c:	08 95       	ret

0000190e <xStreamBufferGenericCreate>:
    190e:	cf 92       	push	r12
    1910:	df 92       	push	r13
    1912:	ef 92       	push	r14
    1914:	ff 92       	push	r15
    1916:	0f 93       	push	r16
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	ec 01       	movw	r28, r24
    191e:	6b 01       	movw	r12, r22
    1920:	41 30       	cpi	r20, 0x01	; 1
    1922:	11 f4       	brne	.+4      	; 0x1928 <xStreamBufferGenericCreate+0x1a>
    1924:	01 e0       	ldi	r16, 0x01	; 1
    1926:	01 c0       	rjmp	.+2      	; 0x192a <xStreamBufferGenericCreate+0x1c>
    1928:	00 e0       	ldi	r16, 0x00	; 0
    192a:	c1 14       	cp	r12, r1
    192c:	d1 04       	cpc	r13, r1
    192e:	19 f4       	brne	.+6      	; 0x1936 <xStreamBufferGenericCreate+0x28>
    1930:	cc 24       	eor	r12, r12
    1932:	c3 94       	inc	r12
    1934:	d1 2c       	mov	r13, r1
    1936:	ce 01       	movw	r24, r28
    1938:	40 96       	adiw	r24, 0x10	; 16
    193a:	c8 17       	cp	r28, r24
    193c:	d9 07       	cpc	r29, r25
    193e:	20 f4       	brcc	.+8      	; 0x1948 <xStreamBufferGenericCreate+0x3a>
    1940:	21 96       	adiw	r28, 0x01	; 1
    1942:	8f d8       	rcall	.-3810   	; 0xa62 <pvPortMalloc>
    1944:	7c 01       	movw	r14, r24
    1946:	02 c0       	rjmp	.+4      	; 0x194c <xStreamBufferGenericCreate+0x3e>
    1948:	e1 2c       	mov	r14, r1
    194a:	f1 2c       	mov	r15, r1
    194c:	e1 14       	cp	r14, r1
    194e:	f1 04       	cpc	r15, r1
    1950:	39 f0       	breq	.+14     	; 0x1960 <xStreamBufferGenericCreate+0x52>
    1952:	96 01       	movw	r18, r12
    1954:	ae 01       	movw	r20, r28
    1956:	b7 01       	movw	r22, r14
    1958:	61 5f       	subi	r22, 0xF1	; 241
    195a:	7f 4f       	sbci	r23, 0xFF	; 255
    195c:	c7 01       	movw	r24, r14
    195e:	a7 de       	rcall	.-690    	; 0x16ae <prvInitialiseNewStreamBuffer>
    1960:	c7 01       	movw	r24, r14
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	0f 91       	pop	r16
    1968:	ff 90       	pop	r15
    196a:	ef 90       	pop	r14
    196c:	df 90       	pop	r13
    196e:	cf 90       	pop	r12
    1970:	08 95       	ret

00001972 <xStreamBufferReset>:
    1972:	0f 93       	push	r16
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	f8 94       	cli
    1978:	0f 92       	push	r0
    197a:	fc 01       	movw	r30, r24
    197c:	20 85       	ldd	r18, Z+8	; 0x08
    197e:	31 85       	ldd	r19, Z+9	; 0x09
    1980:	23 2b       	or	r18, r19
    1982:	71 f4       	brne	.+28     	; 0x19a0 <xStreamBufferReset+0x2e>
    1984:	22 85       	ldd	r18, Z+10	; 0x0a
    1986:	33 85       	ldd	r19, Z+11	; 0x0b
    1988:	23 2b       	or	r18, r19
    198a:	61 f4       	brne	.+24     	; 0x19a4 <xStreamBufferReset+0x32>
    198c:	26 81       	ldd	r18, Z+6	; 0x06
    198e:	37 81       	ldd	r19, Z+7	; 0x07
    1990:	44 81       	ldd	r20, Z+4	; 0x04
    1992:	55 81       	ldd	r21, Z+5	; 0x05
    1994:	64 85       	ldd	r22, Z+12	; 0x0c
    1996:	75 85       	ldd	r23, Z+13	; 0x0d
    1998:	06 85       	ldd	r16, Z+14	; 0x0e
    199a:	89 de       	rcall	.-750    	; 0x16ae <prvInitialiseNewStreamBuffer>
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	03 c0       	rjmp	.+6      	; 0x19a6 <xStreamBufferReset+0x34>
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	01 c0       	rjmp	.+2      	; 0x19a6 <xStreamBufferReset+0x34>
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	0f 90       	pop	r0
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	0f 91       	pop	r16
    19ac:	08 95       	ret

000019ae <xStreamBufferSpacesAvailable>:
    19ae:	fc 01       	movw	r30, r24
    19b0:	24 81       	ldd	r18, Z+4	; 0x04
    19b2:	35 81       	ldd	r19, Z+5	; 0x05
    19b4:	80 81       	ld	r24, Z
    19b6:	91 81       	ldd	r25, Z+1	; 0x01
    19b8:	82 0f       	add	r24, r18
    19ba:	93 1f       	adc	r25, r19
    19bc:	42 81       	ldd	r20, Z+2	; 0x02
    19be:	53 81       	ldd	r21, Z+3	; 0x03
    19c0:	84 1b       	sub	r24, r20
    19c2:	95 0b       	sbc	r25, r21
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	82 17       	cp	r24, r18
    19c8:	93 07       	cpc	r25, r19
    19ca:	10 f0       	brcs	.+4      	; 0x19d0 <xStreamBufferSpacesAvailable+0x22>
    19cc:	82 1b       	sub	r24, r18
    19ce:	93 0b       	sbc	r25, r19
    19d0:	08 95       	ret

000019d2 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    19d2:	2f 92       	push	r2
    19d4:	3f 92       	push	r3
    19d6:	4f 92       	push	r4
    19d8:	5f 92       	push	r5
    19da:	6f 92       	push	r6
    19dc:	7f 92       	push	r7
    19de:	8f 92       	push	r8
    19e0:	9f 92       	push	r9
    19e2:	af 92       	push	r10
    19e4:	bf 92       	push	r11
    19e6:	cf 92       	push	r12
    19e8:	df 92       	push	r13
    19ea:	ef 92       	push	r14
    19ec:	ff 92       	push	r15
    19ee:	0f 93       	push	r16
    19f0:	1f 93       	push	r17
    19f2:	cf 93       	push	r28
    19f4:	df 93       	push	r29
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	2b 97       	sbiw	r28, 0x0b	; 11
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	4c 01       	movw	r8, r24
    1a08:	7b 87       	std	Y+11, r23	; 0x0b
    1a0a:	6a 87       	std	Y+10, r22	; 0x0a
    1a0c:	1a 01       	movw	r2, r20
    1a0e:	0e 83       	std	Y+6, r16	; 0x06
    1a10:	1f 83       	std	Y+7, r17	; 0x07
    1a12:	28 87       	std	Y+8, r18	; 0x08
    1a14:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1a16:	fc 01       	movw	r30, r24
    1a18:	84 81       	ldd	r24, Z+4	; 0x04
    1a1a:	95 81       	ldd	r25, Z+5	; 0x05
    1a1c:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1a1e:	26 85       	ldd	r18, Z+14	; 0x0e
    1a20:	20 ff       	sbrs	r18, 0
    1a22:	0c c0       	rjmp	.+24     	; 0x1a3c <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1a24:	2a 01       	movw	r4, r20
    1a26:	f2 e0       	ldi	r31, 0x02	; 2
    1a28:	4f 0e       	add	r4, r31
    1a2a:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1a2c:	84 15       	cp	r24, r4
    1a2e:	95 05       	cpc	r25, r5
    1a30:	58 f4       	brcc	.+22     	; 0x1a48 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1a32:	1e 82       	std	Y+6, r1	; 0x06
    1a34:	1f 82       	std	Y+7, r1	; 0x07
    1a36:	18 86       	std	Y+8, r1	; 0x08
    1a38:	19 86       	std	Y+9, r1	; 0x09
    1a3a:	06 c0       	rjmp	.+12     	; 0x1a48 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1a3c:	84 17       	cp	r24, r20
    1a3e:	95 07       	cpc	r25, r21
    1a40:	10 f0       	brcs	.+4      	; 0x1a46 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1a42:	2a 01       	movw	r4, r20
    1a44:	01 c0       	rjmp	.+2      	; 0x1a48 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1a46:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1a48:	8e 81       	ldd	r24, Y+6	; 0x06
    1a4a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a4c:	a8 85       	ldd	r26, Y+8	; 0x08
    1a4e:	b9 85       	ldd	r27, Y+9	; 0x09
    1a50:	89 2b       	or	r24, r25
    1a52:	8a 2b       	or	r24, r26
    1a54:	8b 2b       	or	r24, r27
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <xStreamBufferSend+0x88>
    1a58:	38 c0       	rjmp	.+112    	; 0x1aca <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	01 96       	adiw	r24, 0x01	; 1
    1a5e:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	f8 94       	cli
    1a66:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1a68:	c4 01       	movw	r24, r8
    1a6a:	a1 df       	rcall	.-190    	; 0x19ae <xStreamBufferSpacesAvailable>
    1a6c:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1a6e:	84 15       	cp	r24, r4
    1a70:	95 05       	cpc	r25, r5
    1a72:	40 f5       	brcc	.+80     	; 0x1ac4 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1a74:	60 e0       	ldi	r22, 0x00	; 0
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1a7e:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <xTaskGetCurrentTaskHandle>
    1a82:	f4 01       	movw	r30, r8
    1a84:	93 87       	std	Z+11, r25	; 0x0b
    1a86:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1a88:	0f 90       	pop	r0
    1a8a:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1a8c:	ae 80       	ldd	r10, Y+6	; 0x06
    1a8e:	bf 80       	ldd	r11, Y+7	; 0x07
    1a90:	c8 84       	ldd	r12, Y+8	; 0x08
    1a92:	d9 84       	ldd	r13, Y+9	; 0x09
    1a94:	e1 2c       	mov	r14, r1
    1a96:	f1 2c       	mov	r15, r1
    1a98:	00 e0       	ldi	r16, 0x00	; 0
    1a9a:	10 e0       	ldi	r17, 0x00	; 0
    1a9c:	98 01       	movw	r18, r16
    1a9e:	40 e0       	ldi	r20, 0x00	; 0
    1aa0:	50 e0       	ldi	r21, 0x00	; 0
    1aa2:	ba 01       	movw	r22, r20
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	0e 94 27 18 	call	0x304e	; 0x304e <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1aaa:	f4 01       	movw	r30, r8
    1aac:	13 86       	std	Z+11, r1	; 0x0b
    1aae:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1ab0:	be 01       	movw	r22, r28
    1ab2:	6a 5f       	subi	r22, 0xFA	; 250
    1ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	01 96       	adiw	r24, 0x01	; 1
    1aba:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <xTaskCheckForTimeOut>
    1abe:	88 23       	and	r24, r24
    1ac0:	81 f2       	breq	.-96     	; 0x1a62 <xStreamBufferSend+0x90>
    1ac2:	05 c0       	rjmp	.+10     	; 0x1ace <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1ac4:	0f 90       	pop	r0
    1ac6:	0f be       	out	0x3f, r0	; 63
                    break;
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1aca:	61 2c       	mov	r6, r1
    1acc:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1ace:	61 14       	cp	r6, r1
    1ad0:	71 04       	cpc	r7, r1
    1ad2:	19 f4       	brne	.+6      	; 0x1ada <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1ad4:	c4 01       	movw	r24, r8
    1ad6:	6b df       	rcall	.-298    	; 0x19ae <xStreamBufferSpacesAvailable>
    1ad8:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1ada:	82 01       	movw	r16, r4
    1adc:	93 01       	movw	r18, r6
    1ade:	a1 01       	movw	r20, r2
    1ae0:	6a 85       	ldd	r22, Y+10	; 0x0a
    1ae2:	7b 85       	ldd	r23, Y+11	; 0x0b
    1ae4:	c4 01       	movw	r24, r8
    1ae6:	3c de       	rcall	.-904    	; 0x1760 <prvWriteMessageToBuffer>
    1ae8:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1aea:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1aec:	e9 f0       	breq	.+58     	; 0x1b28 <xStreamBufferSend+0x156>
    1aee:	c4 01       	movw	r24, r8
    1af0:	cb dd       	rcall	.-1130   	; 0x1688 <prvBytesInBuffer>
    1af2:	f4 01       	movw	r30, r8
    1af4:	26 81       	ldd	r18, Z+6	; 0x06
    1af6:	37 81       	ldd	r19, Z+7	; 0x07
    1af8:	82 17       	cp	r24, r18
    1afa:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1afc:	a8 f0       	brcs	.+42     	; 0x1b28 <xStreamBufferSend+0x156>
    1afe:	91 d3       	rcall	.+1826   	; 0x2222 <vTaskSuspendAll>
    1b00:	f4 01       	movw	r30, r8
    1b02:	80 85       	ldd	r24, Z+8	; 0x08
    1b04:	91 85       	ldd	r25, Z+9	; 0x09
    1b06:	89 2b       	or	r24, r25
    1b08:	71 f0       	breq	.+28     	; 0x1b26 <xStreamBufferSend+0x154>
    1b0a:	80 85       	ldd	r24, Z+8	; 0x08
    1b0c:	91 85       	ldd	r25, Z+9	; 0x09
    1b0e:	e1 2c       	mov	r14, r1
    1b10:	f1 2c       	mov	r15, r1
    1b12:	00 e0       	ldi	r16, 0x00	; 0
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	a9 01       	movw	r20, r18
    1b1a:	60 e0       	ldi	r22, 0x00	; 0
    1b1c:	0e 94 cf 18 	call	0x319e	; 0x319e <xTaskGenericNotify>
    1b20:	f4 01       	movw	r30, r8
    1b22:	11 86       	std	Z+9, r1	; 0x09
    1b24:	10 86       	std	Z+8, r1	; 0x08
    1b26:	bd d4       	rcall	.+2426   	; 0x24a2 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1b28:	c6 01       	movw	r24, r12
    1b2a:	2b 96       	adiw	r28, 0x0b	; 11
    1b2c:	0f b6       	in	r0, 0x3f	; 63
    1b2e:	f8 94       	cli
    1b30:	de bf       	out	0x3e, r29	; 62
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	cd bf       	out	0x3d, r28	; 61
    1b36:	df 91       	pop	r29
    1b38:	cf 91       	pop	r28
    1b3a:	1f 91       	pop	r17
    1b3c:	0f 91       	pop	r16
    1b3e:	ff 90       	pop	r15
    1b40:	ef 90       	pop	r14
    1b42:	df 90       	pop	r13
    1b44:	cf 90       	pop	r12
    1b46:	bf 90       	pop	r11
    1b48:	af 90       	pop	r10
    1b4a:	9f 90       	pop	r9
    1b4c:	8f 90       	pop	r8
    1b4e:	7f 90       	pop	r7
    1b50:	6f 90       	pop	r6
    1b52:	5f 90       	pop	r5
    1b54:	4f 90       	pop	r4
    1b56:	3f 90       	pop	r3
    1b58:	2f 90       	pop	r2
    1b5a:	08 95       	ret

00001b5c <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1b5c:	af 92       	push	r10
    1b5e:	bf 92       	push	r11
    1b60:	cf 92       	push	r12
    1b62:	df 92       	push	r13
    1b64:	ef 92       	push	r14
    1b66:	ff 92       	push	r15
    1b68:	0f 93       	push	r16
    1b6a:	1f 93       	push	r17
    1b6c:	cf 93       	push	r28
    1b6e:	df 93       	push	r29
    1b70:	ec 01       	movw	r28, r24
    1b72:	7b 01       	movw	r14, r22
    1b74:	5a 01       	movw	r10, r20
    1b76:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1b78:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b7a:	80 ff       	sbrs	r24, 0
    1b7c:	04 c0       	rjmp	.+8      	; 0x1b86 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1b7e:	8a 01       	movw	r16, r20
    1b80:	0e 5f       	subi	r16, 0xFE	; 254
    1b82:	1f 4f       	sbci	r17, 0xFF	; 255
    1b84:	01 c0       	rjmp	.+2      	; 0x1b88 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1b86:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1b88:	ce 01       	movw	r24, r28
    1b8a:	11 df       	rcall	.-478    	; 0x19ae <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1b8c:	9c 01       	movw	r18, r24
    1b8e:	a5 01       	movw	r20, r10
    1b90:	b7 01       	movw	r22, r14
    1b92:	ce 01       	movw	r24, r28
    1b94:	e5 dd       	rcall	.-1078   	; 0x1760 <prvWriteMessageToBuffer>
    1b96:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1b98:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1b9a:	c1 f0       	breq	.+48     	; 0x1bcc <xStreamBufferSendFromISR+0x70>
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	74 dd       	rcall	.-1304   	; 0x1688 <prvBytesInBuffer>
    1ba0:	2e 81       	ldd	r18, Y+6	; 0x06
    1ba2:	3f 81       	ldd	r19, Y+7	; 0x07
    1ba4:	82 17       	cp	r24, r18
    1ba6:	93 07       	cpc	r25, r19
    1ba8:	88 f0       	brcs	.+34     	; 0x1bcc <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1baa:	88 85       	ldd	r24, Y+8	; 0x08
    1bac:	99 85       	ldd	r25, Y+9	; 0x09
    1bae:	89 2b       	or	r24, r25
    1bb0:	69 f0       	breq	.+26     	; 0x1bcc <xStreamBufferSendFromISR+0x70>
    1bb2:	88 85       	ldd	r24, Y+8	; 0x08
    1bb4:	99 85       	ldd	r25, Y+9	; 0x09
    1bb6:	e1 2c       	mov	r14, r1
    1bb8:	f1 2c       	mov	r15, r1
    1bba:	00 e0       	ldi	r16, 0x00	; 0
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	a9 01       	movw	r20, r18
    1bc2:	60 e0       	ldi	r22, 0x00	; 0
    1bc4:	0e 94 c6 19 	call	0x338c	; 0x338c <xTaskGenericNotifyFromISR>
    1bc8:	19 86       	std	Y+9, r1	; 0x09
    1bca:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1bcc:	c5 01       	movw	r24, r10
    1bce:	df 91       	pop	r29
    1bd0:	cf 91       	pop	r28
    1bd2:	1f 91       	pop	r17
    1bd4:	0f 91       	pop	r16
    1bd6:	ff 90       	pop	r15
    1bd8:	ef 90       	pop	r14
    1bda:	df 90       	pop	r13
    1bdc:	cf 90       	pop	r12
    1bde:	bf 90       	pop	r11
    1be0:	af 90       	pop	r10
    1be2:	08 95       	ret

00001be4 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1be4:	4f 92       	push	r4
    1be6:	5f 92       	push	r5
    1be8:	6f 92       	push	r6
    1bea:	7f 92       	push	r7
    1bec:	8f 92       	push	r8
    1bee:	9f 92       	push	r9
    1bf0:	af 92       	push	r10
    1bf2:	bf 92       	push	r11
    1bf4:	cf 92       	push	r12
    1bf6:	df 92       	push	r13
    1bf8:	ef 92       	push	r14
    1bfa:	ff 92       	push	r15
    1bfc:	0f 93       	push	r16
    1bfe:	1f 93       	push	r17
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
    1c04:	ec 01       	movw	r28, r24
    1c06:	2b 01       	movw	r4, r22
    1c08:	3a 01       	movw	r6, r20
    1c0a:	58 01       	movw	r10, r16
    1c0c:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1c0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c10:	80 ff       	sbrs	r24, 0
    1c12:	05 c0       	rjmp	.+10     	; 0x1c1e <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1c14:	68 94       	set
    1c16:	88 24       	eor	r8, r8
    1c18:	81 f8       	bld	r8, 1
    1c1a:	91 2c       	mov	r9, r1
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1c1e:	81 2c       	mov	r8, r1
    1c20:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1c22:	a1 14       	cp	r10, r1
    1c24:	b1 04       	cpc	r11, r1
    1c26:	c1 04       	cpc	r12, r1
    1c28:	d1 04       	cpc	r13, r1
    1c2a:	41 f1       	breq	.+80     	; 0x1c7c <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	f8 94       	cli
    1c30:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1c32:	ce 01       	movw	r24, r28
    1c34:	29 dd       	rcall	.-1454   	; 0x1688 <prvBytesInBuffer>
    1c36:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1c38:	88 16       	cp	r8, r24
    1c3a:	99 06       	cpc	r9, r25
    1c3c:	48 f0       	brcs	.+18     	; 0x1c50 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1c48:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <xTaskGetCurrentTaskHandle>
    1c4c:	99 87       	std	Y+9, r25	; 0x09
    1c4e:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1c50:	0f 90       	pop	r0
    1c52:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1c54:	8e 14       	cp	r8, r14
    1c56:	9f 04       	cpc	r9, r15
    1c58:	a0 f0       	brcs	.+40     	; 0x1c82 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1c5a:	e1 2c       	mov	r14, r1
    1c5c:	f1 2c       	mov	r15, r1
    1c5e:	00 e0       	ldi	r16, 0x00	; 0
    1c60:	10 e0       	ldi	r17, 0x00	; 0
    1c62:	98 01       	movw	r18, r16
    1c64:	40 e0       	ldi	r20, 0x00	; 0
    1c66:	50 e0       	ldi	r21, 0x00	; 0
    1c68:	ba 01       	movw	r22, r20
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	0e 94 27 18 	call	0x304e	; 0x304e <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1c70:	19 86       	std	Y+9, r1	; 0x09
    1c72:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1c74:	ce 01       	movw	r24, r28
    1c76:	08 dd       	rcall	.-1520   	; 0x1688 <prvBytesInBuffer>
    1c78:	7c 01       	movw	r14, r24
    1c7a:	03 c0       	rjmp	.+6      	; 0x1c82 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	04 dd       	rcall	.-1528   	; 0x1688 <prvBytesInBuffer>
    1c80:	7c 01       	movw	r14, r24
    1c82:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1c84:	9f 04       	cpc	r9, r15
    1c86:	e8 f4       	brcc	.+58     	; 0x1cc2 <xStreamBufferReceive+0xde>
    1c88:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1c8a:	97 01       	movw	r18, r14
    1c8c:	a3 01       	movw	r20, r6
    1c8e:	b2 01       	movw	r22, r4
    1c90:	ce 01       	movw	r24, r28
    1c92:	f8 dd       	rcall	.-1040   	; 0x1884 <prvReadMessageFromBuffer>
    1c94:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1c96:	89 2b       	or	r24, r25
    1c98:	b1 f0       	breq	.+44     	; 0x1cc6 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1c9a:	c3 d2       	rcall	.+1414   	; 0x2222 <vTaskSuspendAll>
    1c9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ca0:	89 2b       	or	r24, r25
    1ca2:	69 f0       	breq	.+26     	; 0x1cbe <xStreamBufferReceive+0xda>
    1ca4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ca6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ca8:	e1 2c       	mov	r14, r1
    1caa:	f1 2c       	mov	r15, r1
    1cac:	00 e0       	ldi	r16, 0x00	; 0
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	a9 01       	movw	r20, r18
    1cb4:	60 e0       	ldi	r22, 0x00	; 0
    1cb6:	0e 94 cf 18 	call	0x319e	; 0x319e <xTaskGenericNotify>
    1cba:	1b 86       	std	Y+11, r1	; 0x0b
    1cbc:	1a 86       	std	Y+10, r1	; 0x0a
    1cbe:	f1 d3       	rcall	.+2018   	; 0x24a2 <xTaskResumeAll>
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <xStreamBufferReceive+0xe2>
    1cc2:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1cc4:	d1 2c       	mov	r13, r1
    1cc6:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1cc8:	df 91       	pop	r29
    1cca:	cf 91       	pop	r28
    1ccc:	1f 91       	pop	r17
    1cce:	0f 91       	pop	r16
    1cd0:	ff 90       	pop	r15
    1cd2:	ef 90       	pop	r14
    1cd4:	df 90       	pop	r13
    1cd6:	cf 90       	pop	r12
    1cd8:	bf 90       	pop	r11
    1cda:	af 90       	pop	r10
    1cdc:	9f 90       	pop	r9
    1cde:	8f 90       	pop	r8
    1ce0:	7f 90       	pop	r7
    1ce2:	6f 90       	pop	r6
    1ce4:	5f 90       	pop	r5
    1ce6:	4f 90       	pop	r4
    1ce8:	08 95       	ret

00001cea <prvResetNextTaskUnblockTime>:
    1cea:	e0 91 6f 15 	lds	r30, 0x156F	; 0x80156f <pxDelayedTaskList>
    1cee:	f0 91 70 15 	lds	r31, 0x1570	; 0x801570 <pxDelayedTaskList+0x1>
    1cf2:	80 81       	ld	r24, Z
    1cf4:	81 11       	cpse	r24, r1
    1cf6:	0c c0       	rjmp	.+24     	; 0x1d10 <prvResetNextTaskUnblockTime+0x26>
    1cf8:	8f ef       	ldi	r24, 0xFF	; 255
    1cfa:	9f ef       	ldi	r25, 0xFF	; 255
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	80 93 39 15 	sts	0x1539, r24	; 0x801539 <xNextTaskUnblockTime>
    1d02:	90 93 3a 15 	sts	0x153A, r25	; 0x80153a <xNextTaskUnblockTime+0x1>
    1d06:	a0 93 3b 15 	sts	0x153B, r26	; 0x80153b <xNextTaskUnblockTime+0x2>
    1d0a:	b0 93 3c 15 	sts	0x153C, r27	; 0x80153c <xNextTaskUnblockTime+0x3>
    1d0e:	08 95       	ret
    1d10:	e0 91 6f 15 	lds	r30, 0x156F	; 0x80156f <pxDelayedTaskList>
    1d14:	f0 91 70 15 	lds	r31, 0x1570	; 0x801570 <pxDelayedTaskList+0x1>
    1d18:	07 80       	ldd	r0, Z+7	; 0x07
    1d1a:	f0 85       	ldd	r31, Z+8	; 0x08
    1d1c:	e0 2d       	mov	r30, r0
    1d1e:	80 81       	ld	r24, Z
    1d20:	91 81       	ldd	r25, Z+1	; 0x01
    1d22:	a2 81       	ldd	r26, Z+2	; 0x02
    1d24:	b3 81       	ldd	r27, Z+3	; 0x03
    1d26:	80 93 39 15 	sts	0x1539, r24	; 0x801539 <xNextTaskUnblockTime>
    1d2a:	90 93 3a 15 	sts	0x153A, r25	; 0x80153a <xNextTaskUnblockTime+0x1>
    1d2e:	a0 93 3b 15 	sts	0x153B, r26	; 0x80153b <xNextTaskUnblockTime+0x2>
    1d32:	b0 93 3c 15 	sts	0x153C, r27	; 0x80153c <xNextTaskUnblockTime+0x3>
    1d36:	08 95       	ret

00001d38 <prvDeleteTCB>:
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	ec 01       	movw	r28, r24
    1d3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d42:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vPortFree>
    1d46:	ce 01       	movw	r24, r28
    1d48:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vPortFree>
    1d4c:	df 91       	pop	r29
    1d4e:	cf 91       	pop	r28
    1d50:	08 95       	ret

00001d52 <prvInitialiseNewTask>:
    1d52:	4f 92       	push	r4
    1d54:	5f 92       	push	r5
    1d56:	6f 92       	push	r6
    1d58:	7f 92       	push	r7
    1d5a:	8f 92       	push	r8
    1d5c:	9f 92       	push	r9
    1d5e:	af 92       	push	r10
    1d60:	bf 92       	push	r11
    1d62:	cf 92       	push	r12
    1d64:	df 92       	push	r13
    1d66:	ef 92       	push	r14
    1d68:	ff 92       	push	r15
    1d6a:	0f 93       	push	r16
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
    1d70:	2c 01       	movw	r4, r24
    1d72:	5b 01       	movw	r10, r22
    1d74:	4a 01       	movw	r8, r20
    1d76:	39 01       	movw	r6, r18
    1d78:	e6 01       	movw	r28, r12
    1d7a:	65 ea       	ldi	r22, 0xA5	; 165
    1d7c:	70 e0       	ldi	r23, 0x00	; 0
    1d7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d82:	0e 94 e1 35 	call	0x6bc2	; 0x6bc2 <memset>
    1d86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d8a:	21 e0       	ldi	r18, 0x01	; 1
    1d8c:	82 1a       	sub	r8, r18
    1d8e:	91 08       	sbc	r9, r1
    1d90:	88 0e       	add	r8, r24
    1d92:	99 1e       	adc	r9, r25
    1d94:	a1 14       	cp	r10, r1
    1d96:	b1 04       	cpc	r11, r1
    1d98:	89 f4       	brne	.+34     	; 0x1dbc <prvInitialiseNewTask+0x6a>
    1d9a:	15 c0       	rjmp	.+42     	; 0x1dc6 <prvInitialiseNewTask+0x74>
    1d9c:	82 2f       	mov	r24, r18
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	f5 01       	movw	r30, r10
    1da2:	e8 0f       	add	r30, r24
    1da4:	f9 1f       	adc	r31, r25
    1da6:	30 81       	ld	r19, Z
    1da8:	de 01       	movw	r26, r28
    1daa:	a8 0f       	add	r26, r24
    1dac:	b9 1f       	adc	r27, r25
    1dae:	5d 96       	adiw	r26, 0x1d	; 29
    1db0:	3c 93       	st	X, r19
    1db2:	80 81       	ld	r24, Z
    1db4:	88 23       	and	r24, r24
    1db6:	29 f0       	breq	.+10     	; 0x1dc2 <prvInitialiseNewTask+0x70>
    1db8:	2f 5f       	subi	r18, 0xFF	; 255
    1dba:	01 c0       	rjmp	.+2      	; 0x1dbe <prvInitialiseNewTask+0x6c>
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	20 31       	cpi	r18, 0x10	; 16
    1dc0:	68 f3       	brcs	.-38     	; 0x1d9c <prvInitialiseNewTask+0x4a>
    1dc2:	1c a6       	std	Y+44, r1	; 0x2c
    1dc4:	01 c0       	rjmp	.+2      	; 0x1dc8 <prvInitialiseNewTask+0x76>
    1dc6:	1d 8e       	std	Y+29, r1	; 0x1d
    1dc8:	0a 30       	cpi	r16, 0x0A	; 10
    1dca:	08 f0       	brcs	.+2      	; 0x1dce <prvInitialiseNewTask+0x7c>
    1dcc:	09 e0       	ldi	r16, 0x09	; 9
    1dce:	0a 8f       	std	Y+26, r16	; 0x1a
    1dd0:	0d a7       	std	Y+45, r16	; 0x2d
    1dd2:	1e a6       	std	Y+46, r1	; 0x2e
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	02 96       	adiw	r24, 0x02	; 2
    1dd8:	0e 94 28 06 	call	0xc50	; 0xc50 <vListInitialiseItem>
    1ddc:	ce 01       	movw	r24, r28
    1dde:	0e 96       	adiw	r24, 0x0e	; 14
    1de0:	0e 94 28 06 	call	0xc50	; 0xc50 <vListInitialiseItem>
    1de4:	db 87       	std	Y+11, r29	; 0x0b
    1de6:	ca 87       	std	Y+10, r28	; 0x0a
    1de8:	8a e0       	ldi	r24, 0x0A	; 10
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	a0 e0       	ldi	r26, 0x00	; 0
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	80 1b       	sub	r24, r16
    1df2:	91 09       	sbc	r25, r1
    1df4:	a1 09       	sbc	r26, r1
    1df6:	b1 09       	sbc	r27, r1
    1df8:	8e 87       	std	Y+14, r24	; 0x0e
    1dfa:	9f 87       	std	Y+15, r25	; 0x0f
    1dfc:	a8 8b       	std	Y+16, r26	; 0x10
    1dfe:	b9 8b       	std	Y+17, r27	; 0x11
    1e00:	df 8b       	std	Y+23, r29	; 0x17
    1e02:	ce 8b       	std	Y+22, r28	; 0x16
    1e04:	84 e0       	ldi	r24, 0x04	; 4
    1e06:	fe 01       	movw	r30, r28
    1e08:	bf 96       	adiw	r30, 0x2f	; 47
    1e0a:	df 01       	movw	r26, r30
    1e0c:	1d 92       	st	X+, r1
    1e0e:	8a 95       	dec	r24
    1e10:	e9 f7       	brne	.-6      	; 0x1e0c <prvInitialiseNewTask+0xba>
    1e12:	1b aa       	std	Y+51, r1	; 0x33
    1e14:	a3 01       	movw	r20, r6
    1e16:	b2 01       	movw	r22, r4
    1e18:	c4 01       	movw	r24, r8
    1e1a:	0e 94 9c 06 	call	0xd38	; 0xd38 <pxPortInitialiseStack>
    1e1e:	99 83       	std	Y+1, r25	; 0x01
    1e20:	88 83       	st	Y, r24
    1e22:	e1 14       	cp	r14, r1
    1e24:	f1 04       	cpc	r15, r1
    1e26:	19 f0       	breq	.+6      	; 0x1e2e <prvInitialiseNewTask+0xdc>
    1e28:	f7 01       	movw	r30, r14
    1e2a:	d1 83       	std	Z+1, r29	; 0x01
    1e2c:	c0 83       	st	Z, r28
    1e2e:	df 91       	pop	r29
    1e30:	cf 91       	pop	r28
    1e32:	0f 91       	pop	r16
    1e34:	ff 90       	pop	r15
    1e36:	ef 90       	pop	r14
    1e38:	df 90       	pop	r13
    1e3a:	cf 90       	pop	r12
    1e3c:	bf 90       	pop	r11
    1e3e:	af 90       	pop	r10
    1e40:	9f 90       	pop	r9
    1e42:	8f 90       	pop	r8
    1e44:	7f 90       	pop	r7
    1e46:	6f 90       	pop	r6
    1e48:	5f 90       	pop	r5
    1e4a:	4f 90       	pop	r4
    1e4c:	08 95       	ret

00001e4e <prvInitialiseTaskLists>:
    1e4e:	cf 93       	push	r28
    1e50:	c0 e0       	ldi	r28, 0x00	; 0
    1e52:	09 c0       	rjmp	.+18     	; 0x1e66 <prvInitialiseTaskLists+0x18>
    1e54:	2b e0       	ldi	r18, 0x0B	; 11
    1e56:	c2 9f       	mul	r28, r18
    1e58:	c0 01       	movw	r24, r0
    1e5a:	11 24       	eor	r1, r1
    1e5c:	89 57       	subi	r24, 0x79	; 121
    1e5e:	9a 4e       	sbci	r25, 0xEA	; 234
    1e60:	0e 94 17 06 	call	0xc2e	; 0xc2e <vListInitialise>
    1e64:	cf 5f       	subi	r28, 0xFF	; 255
    1e66:	ca 30       	cpi	r28, 0x0A	; 10
    1e68:	a8 f3       	brcs	.-22     	; 0x1e54 <prvInitialiseTaskLists+0x6>
    1e6a:	8c e7       	ldi	r24, 0x7C	; 124
    1e6c:	95 e1       	ldi	r25, 0x15	; 21
    1e6e:	0e 94 17 06 	call	0xc2e	; 0xc2e <vListInitialise>
    1e72:	81 e7       	ldi	r24, 0x71	; 113
    1e74:	95 e1       	ldi	r25, 0x15	; 21
    1e76:	0e 94 17 06 	call	0xc2e	; 0xc2e <vListInitialise>
    1e7a:	82 e6       	ldi	r24, 0x62	; 98
    1e7c:	95 e1       	ldi	r25, 0x15	; 21
    1e7e:	0e 94 17 06 	call	0xc2e	; 0xc2e <vListInitialise>
    1e82:	87 e5       	ldi	r24, 0x57	; 87
    1e84:	95 e1       	ldi	r25, 0x15	; 21
    1e86:	0e 94 17 06 	call	0xc2e	; 0xc2e <vListInitialise>
    1e8a:	8b e4       	ldi	r24, 0x4B	; 75
    1e8c:	95 e1       	ldi	r25, 0x15	; 21
    1e8e:	0e 94 17 06 	call	0xc2e	; 0xc2e <vListInitialise>
    1e92:	8c e7       	ldi	r24, 0x7C	; 124
    1e94:	95 e1       	ldi	r25, 0x15	; 21
    1e96:	90 93 70 15 	sts	0x1570, r25	; 0x801570 <pxDelayedTaskList+0x1>
    1e9a:	80 93 6f 15 	sts	0x156F, r24	; 0x80156f <pxDelayedTaskList>
    1e9e:	81 e7       	ldi	r24, 0x71	; 113
    1ea0:	95 e1       	ldi	r25, 0x15	; 21
    1ea2:	90 93 6e 15 	sts	0x156E, r25	; 0x80156e <pxOverflowDelayedTaskList+0x1>
    1ea6:	80 93 6d 15 	sts	0x156D, r24	; 0x80156d <pxOverflowDelayedTaskList>
    1eaa:	cf 91       	pop	r28
    1eac:	08 95       	ret

00001eae <prvAddNewTaskToReadyList>:
    1eae:	cf 93       	push	r28
    1eb0:	df 93       	push	r29
    1eb2:	ec 01       	movw	r28, r24
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	0f 92       	push	r0
    1eba:	80 91 4a 15 	lds	r24, 0x154A	; 0x80154a <uxCurrentNumberOfTasks>
    1ebe:	8f 5f       	subi	r24, 0xFF	; 255
    1ec0:	80 93 4a 15 	sts	0x154A, r24	; 0x80154a <uxCurrentNumberOfTasks>
    1ec4:	80 91 f5 15 	lds	r24, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    1ec8:	90 91 f6 15 	lds	r25, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    1ecc:	89 2b       	or	r24, r25
    1ece:	51 f4       	brne	.+20     	; 0x1ee4 <prvAddNewTaskToReadyList+0x36>
    1ed0:	d0 93 f6 15 	sts	0x15F6, r29	; 0x8015f6 <pxCurrentTCB+0x1>
    1ed4:	c0 93 f5 15 	sts	0x15F5, r28	; 0x8015f5 <pxCurrentTCB>
    1ed8:	80 91 4a 15 	lds	r24, 0x154A	; 0x80154a <uxCurrentNumberOfTasks>
    1edc:	81 30       	cpi	r24, 0x01	; 1
    1ede:	91 f4       	brne	.+36     	; 0x1f04 <prvAddNewTaskToReadyList+0x56>
    1ee0:	b6 df       	rcall	.-148    	; 0x1e4e <prvInitialiseTaskLists>
    1ee2:	10 c0       	rjmp	.+32     	; 0x1f04 <prvAddNewTaskToReadyList+0x56>
    1ee4:	80 91 44 15 	lds	r24, 0x1544	; 0x801544 <xSchedulerRunning>
    1ee8:	81 11       	cpse	r24, r1
    1eea:	0c c0       	rjmp	.+24     	; 0x1f04 <prvAddNewTaskToReadyList+0x56>
    1eec:	e0 91 f5 15 	lds	r30, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    1ef0:	f0 91 f6 15 	lds	r31, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    1ef4:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ef6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ef8:	89 17       	cp	r24, r25
    1efa:	20 f0       	brcs	.+8      	; 0x1f04 <prvAddNewTaskToReadyList+0x56>
    1efc:	d0 93 f6 15 	sts	0x15F6, r29	; 0x8015f6 <pxCurrentTCB+0x1>
    1f00:	c0 93 f5 15 	sts	0x15F5, r28	; 0x8015f5 <pxCurrentTCB>
    1f04:	80 91 3d 15 	lds	r24, 0x153D	; 0x80153d <uxTaskNumber>
    1f08:	8f 5f       	subi	r24, 0xFF	; 255
    1f0a:	80 93 3d 15 	sts	0x153D, r24	; 0x80153d <uxTaskNumber>
    1f0e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1f10:	80 91 45 15 	lds	r24, 0x1545	; 0x801545 <uxTopReadyPriority>
    1f14:	8e 17       	cp	r24, r30
    1f16:	10 f4       	brcc	.+4      	; 0x1f1c <prvAddNewTaskToReadyList+0x6e>
    1f18:	e0 93 45 15 	sts	0x1545, r30	; 0x801545 <uxTopReadyPriority>
    1f1c:	8b e0       	ldi	r24, 0x0B	; 11
    1f1e:	8e 9f       	mul	r24, r30
    1f20:	f0 01       	movw	r30, r0
    1f22:	11 24       	eor	r1, r1
    1f24:	e9 57       	subi	r30, 0x79	; 121
    1f26:	fa 4e       	sbci	r31, 0xEA	; 234
    1f28:	01 80       	ldd	r0, Z+1	; 0x01
    1f2a:	f2 81       	ldd	r31, Z+2	; 0x02
    1f2c:	e0 2d       	mov	r30, r0
    1f2e:	ff 83       	std	Y+7, r31	; 0x07
    1f30:	ee 83       	std	Y+6, r30	; 0x06
    1f32:	26 81       	ldd	r18, Z+6	; 0x06
    1f34:	37 81       	ldd	r19, Z+7	; 0x07
    1f36:	39 87       	std	Y+9, r19	; 0x09
    1f38:	28 87       	std	Y+8, r18	; 0x08
    1f3a:	a6 81       	ldd	r26, Z+6	; 0x06
    1f3c:	b7 81       	ldd	r27, Z+7	; 0x07
    1f3e:	9e 01       	movw	r18, r28
    1f40:	2e 5f       	subi	r18, 0xFE	; 254
    1f42:	3f 4f       	sbci	r19, 0xFF	; 255
    1f44:	15 96       	adiw	r26, 0x05	; 5
    1f46:	3c 93       	st	X, r19
    1f48:	2e 93       	st	-X, r18
    1f4a:	14 97       	sbiw	r26, 0x04	; 4
    1f4c:	37 83       	std	Z+7, r19	; 0x07
    1f4e:	26 83       	std	Z+6, r18	; 0x06
    1f50:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1f52:	8e 9f       	mul	r24, r30
    1f54:	f0 01       	movw	r30, r0
    1f56:	11 24       	eor	r1, r1
    1f58:	e9 57       	subi	r30, 0x79	; 121
    1f5a:	fa 4e       	sbci	r31, 0xEA	; 234
    1f5c:	fd 87       	std	Y+13, r31	; 0x0d
    1f5e:	ec 87       	std	Y+12, r30	; 0x0c
    1f60:	80 81       	ld	r24, Z
    1f62:	8f 5f       	subi	r24, 0xFF	; 255
    1f64:	80 83       	st	Z, r24
    1f66:	0f 90       	pop	r0
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	80 91 44 15 	lds	r24, 0x1544	; 0x801544 <xSchedulerRunning>
    1f6e:	88 23       	and	r24, r24
    1f70:	51 f0       	breq	.+20     	; 0x1f86 <prvAddNewTaskToReadyList+0xd8>
    1f72:	e0 91 f5 15 	lds	r30, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    1f76:	f0 91 f6 15 	lds	r31, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    1f7a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f7c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f7e:	98 17       	cp	r25, r24
    1f80:	10 f4       	brcc	.+4      	; 0x1f86 <prvAddNewTaskToReadyList+0xd8>
    1f82:	0e 94 e5 06 	call	0xdca	; 0xdca <vPortYield>
    1f86:	df 91       	pop	r29
    1f88:	cf 91       	pop	r28
    1f8a:	08 95       	ret

00001f8c <prvCheckTasksWaitingTermination>:
    1f8c:	cf 93       	push	r28
    1f8e:	df 93       	push	r29
    1f90:	1b c0       	rjmp	.+54     	; 0x1fc8 <prvCheckTasksWaitingTermination+0x3c>
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	0f 92       	push	r0
    1f98:	e0 91 5e 15 	lds	r30, 0x155E	; 0x80155e <xTasksWaitingTermination+0x7>
    1f9c:	f0 91 5f 15 	lds	r31, 0x155F	; 0x80155f <xTasksWaitingTermination+0x8>
    1fa0:	c0 85       	ldd	r28, Z+8	; 0x08
    1fa2:	d1 85       	ldd	r29, Z+9	; 0x09
    1fa4:	ce 01       	movw	r24, r28
    1fa6:	02 96       	adiw	r24, 0x02	; 2
    1fa8:	0e 94 69 06 	call	0xcd2	; 0xcd2 <uxListRemove>
    1fac:	80 91 4a 15 	lds	r24, 0x154A	; 0x80154a <uxCurrentNumberOfTasks>
    1fb0:	81 50       	subi	r24, 0x01	; 1
    1fb2:	80 93 4a 15 	sts	0x154A, r24	; 0x80154a <uxCurrentNumberOfTasks>
    1fb6:	80 91 56 15 	lds	r24, 0x1556	; 0x801556 <uxDeletedTasksWaitingCleanUp>
    1fba:	81 50       	subi	r24, 0x01	; 1
    1fbc:	80 93 56 15 	sts	0x1556, r24	; 0x801556 <uxDeletedTasksWaitingCleanUp>
    1fc0:	0f 90       	pop	r0
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	ce 01       	movw	r24, r28
    1fc6:	b8 de       	rcall	.-656    	; 0x1d38 <prvDeleteTCB>
    1fc8:	80 91 56 15 	lds	r24, 0x1556	; 0x801556 <uxDeletedTasksWaitingCleanUp>
    1fcc:	81 11       	cpse	r24, r1
    1fce:	e1 cf       	rjmp	.-62     	; 0x1f92 <prvCheckTasksWaitingTermination+0x6>
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	08 95       	ret

00001fd6 <prvAddCurrentTaskToDelayedList>:
    1fd6:	8f 92       	push	r8
    1fd8:	9f 92       	push	r9
    1fda:	af 92       	push	r10
    1fdc:	bf 92       	push	r11
    1fde:	cf 92       	push	r12
    1fe0:	df 92       	push	r13
    1fe2:	ef 92       	push	r14
    1fe4:	ff 92       	push	r15
    1fe6:	cf 93       	push	r28
    1fe8:	df 93       	push	r29
    1fea:	6b 01       	movw	r12, r22
    1fec:	7c 01       	movw	r14, r24
    1fee:	c4 2f       	mov	r28, r20
    1ff0:	80 90 46 15 	lds	r8, 0x1546	; 0x801546 <xTickCount>
    1ff4:	90 90 47 15 	lds	r9, 0x1547	; 0x801547 <xTickCount+0x1>
    1ff8:	a0 90 48 15 	lds	r10, 0x1548	; 0x801548 <xTickCount+0x2>
    1ffc:	b0 90 49 15 	lds	r11, 0x1549	; 0x801549 <xTickCount+0x3>
    2000:	80 91 f5 15 	lds	r24, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2004:	90 91 f6 15 	lds	r25, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2008:	02 96       	adiw	r24, 0x02	; 2
    200a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <uxListRemove>
    200e:	8f ef       	ldi	r24, 0xFF	; 255
    2010:	c8 16       	cp	r12, r24
    2012:	d8 06       	cpc	r13, r24
    2014:	e8 06       	cpc	r14, r24
    2016:	f8 06       	cpc	r15, r24
    2018:	b1 f5       	brne	.+108    	; 0x2086 <__DATA_REGION_LENGTH__+0x86>
    201a:	cc 23       	and	r28, r28
    201c:	a1 f1       	breq	.+104    	; 0x2086 <__DATA_REGION_LENGTH__+0x86>
    201e:	eb e4       	ldi	r30, 0x4B	; 75
    2020:	f5 e1       	ldi	r31, 0x15	; 21
    2022:	a1 81       	ldd	r26, Z+1	; 0x01
    2024:	b2 81       	ldd	r27, Z+2	; 0x02
    2026:	c0 91 f5 15 	lds	r28, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    202a:	d0 91 f6 15 	lds	r29, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    202e:	bf 83       	std	Y+7, r27	; 0x07
    2030:	ae 83       	std	Y+6, r26	; 0x06
    2032:	c0 91 f5 15 	lds	r28, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2036:	d0 91 f6 15 	lds	r29, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    203a:	16 96       	adiw	r26, 0x06	; 6
    203c:	8d 91       	ld	r24, X+
    203e:	9c 91       	ld	r25, X
    2040:	17 97       	sbiw	r26, 0x07	; 7
    2042:	99 87       	std	Y+9, r25	; 0x09
    2044:	88 87       	std	Y+8, r24	; 0x08
    2046:	16 96       	adiw	r26, 0x06	; 6
    2048:	cd 91       	ld	r28, X+
    204a:	dc 91       	ld	r29, X
    204c:	17 97       	sbiw	r26, 0x07	; 7
    204e:	80 91 f5 15 	lds	r24, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2052:	90 91 f6 15 	lds	r25, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2056:	02 96       	adiw	r24, 0x02	; 2
    2058:	9d 83       	std	Y+5, r25	; 0x05
    205a:	8c 83       	std	Y+4, r24	; 0x04
    205c:	80 91 f5 15 	lds	r24, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2060:	90 91 f6 15 	lds	r25, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2064:	02 96       	adiw	r24, 0x02	; 2
    2066:	17 96       	adiw	r26, 0x07	; 7
    2068:	9c 93       	st	X, r25
    206a:	8e 93       	st	-X, r24
    206c:	16 97       	sbiw	r26, 0x06	; 6
    206e:	a0 91 f5 15 	lds	r26, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2072:	b0 91 f6 15 	lds	r27, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2076:	1d 96       	adiw	r26, 0x0d	; 13
    2078:	fc 93       	st	X, r31
    207a:	ee 93       	st	-X, r30
    207c:	1c 97       	sbiw	r26, 0x0c	; 12
    207e:	80 81       	ld	r24, Z
    2080:	8f 5f       	subi	r24, 0xFF	; 255
    2082:	80 83       	st	Z, r24
    2084:	3f c0       	rjmp	.+126    	; 0x2104 <__DATA_REGION_LENGTH__+0x104>
    2086:	c8 0c       	add	r12, r8
    2088:	d9 1c       	adc	r13, r9
    208a:	ea 1c       	adc	r14, r10
    208c:	fb 1c       	adc	r15, r11
    208e:	e0 91 f5 15 	lds	r30, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2092:	f0 91 f6 15 	lds	r31, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2096:	c2 82       	std	Z+2, r12	; 0x02
    2098:	d3 82       	std	Z+3, r13	; 0x03
    209a:	e4 82       	std	Z+4, r14	; 0x04
    209c:	f5 82       	std	Z+5, r15	; 0x05
    209e:	c8 14       	cp	r12, r8
    20a0:	d9 04       	cpc	r13, r9
    20a2:	ea 04       	cpc	r14, r10
    20a4:	fb 04       	cpc	r15, r11
    20a6:	68 f4       	brcc	.+26     	; 0x20c2 <__DATA_REGION_LENGTH__+0xc2>
    20a8:	60 91 f5 15 	lds	r22, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    20ac:	70 91 f6 15 	lds	r23, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    20b0:	80 91 6d 15 	lds	r24, 0x156D	; 0x80156d <pxOverflowDelayedTaskList>
    20b4:	90 91 6e 15 	lds	r25, 0x156E	; 0x80156e <pxOverflowDelayedTaskList+0x1>
    20b8:	6e 5f       	subi	r22, 0xFE	; 254
    20ba:	7f 4f       	sbci	r23, 0xFF	; 255
    20bc:	0e 94 2c 06 	call	0xc58	; 0xc58 <vListInsert>
    20c0:	21 c0       	rjmp	.+66     	; 0x2104 <__DATA_REGION_LENGTH__+0x104>
    20c2:	60 91 f5 15 	lds	r22, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    20c6:	70 91 f6 15 	lds	r23, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    20ca:	80 91 6f 15 	lds	r24, 0x156F	; 0x80156f <pxDelayedTaskList>
    20ce:	90 91 70 15 	lds	r25, 0x1570	; 0x801570 <pxDelayedTaskList+0x1>
    20d2:	6e 5f       	subi	r22, 0xFE	; 254
    20d4:	7f 4f       	sbci	r23, 0xFF	; 255
    20d6:	0e 94 2c 06 	call	0xc58	; 0xc58 <vListInsert>
    20da:	80 91 39 15 	lds	r24, 0x1539	; 0x801539 <xNextTaskUnblockTime>
    20de:	90 91 3a 15 	lds	r25, 0x153A	; 0x80153a <xNextTaskUnblockTime+0x1>
    20e2:	a0 91 3b 15 	lds	r26, 0x153B	; 0x80153b <xNextTaskUnblockTime+0x2>
    20e6:	b0 91 3c 15 	lds	r27, 0x153C	; 0x80153c <xNextTaskUnblockTime+0x3>
    20ea:	c8 16       	cp	r12, r24
    20ec:	d9 06       	cpc	r13, r25
    20ee:	ea 06       	cpc	r14, r26
    20f0:	fb 06       	cpc	r15, r27
    20f2:	40 f4       	brcc	.+16     	; 0x2104 <__DATA_REGION_LENGTH__+0x104>
    20f4:	c0 92 39 15 	sts	0x1539, r12	; 0x801539 <xNextTaskUnblockTime>
    20f8:	d0 92 3a 15 	sts	0x153A, r13	; 0x80153a <xNextTaskUnblockTime+0x1>
    20fc:	e0 92 3b 15 	sts	0x153B, r14	; 0x80153b <xNextTaskUnblockTime+0x2>
    2100:	f0 92 3c 15 	sts	0x153C, r15	; 0x80153c <xNextTaskUnblockTime+0x3>
    2104:	df 91       	pop	r29
    2106:	cf 91       	pop	r28
    2108:	ff 90       	pop	r15
    210a:	ef 90       	pop	r14
    210c:	df 90       	pop	r13
    210e:	cf 90       	pop	r12
    2110:	bf 90       	pop	r11
    2112:	af 90       	pop	r10
    2114:	9f 90       	pop	r9
    2116:	8f 90       	pop	r8
    2118:	08 95       	ret

0000211a <xTaskCreate>:
    211a:	2f 92       	push	r2
    211c:	3f 92       	push	r3
    211e:	4f 92       	push	r4
    2120:	5f 92       	push	r5
    2122:	6f 92       	push	r6
    2124:	7f 92       	push	r7
    2126:	8f 92       	push	r8
    2128:	9f 92       	push	r9
    212a:	af 92       	push	r10
    212c:	bf 92       	push	r11
    212e:	cf 92       	push	r12
    2130:	df 92       	push	r13
    2132:	ef 92       	push	r14
    2134:	ff 92       	push	r15
    2136:	0f 93       	push	r16
    2138:	cf 93       	push	r28
    213a:	df 93       	push	r29
    213c:	3c 01       	movw	r6, r24
    213e:	1b 01       	movw	r2, r22
    2140:	4a 01       	movw	r8, r20
    2142:	29 01       	movw	r4, r18
    2144:	ca 01       	movw	r24, r20
    2146:	0e 94 31 05 	call	0xa62	; 0xa62 <pvPortMalloc>
    214a:	6c 01       	movw	r12, r24
    214c:	89 2b       	or	r24, r25
    214e:	71 f0       	breq	.+28     	; 0x216c <xTaskCreate+0x52>
    2150:	84 e3       	ldi	r24, 0x34	; 52
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	0e 94 31 05 	call	0xa62	; 0xa62 <pvPortMalloc>
    2158:	ec 01       	movw	r28, r24
    215a:	89 2b       	or	r24, r25
    215c:	19 f0       	breq	.+6      	; 0x2164 <xTaskCreate+0x4a>
    215e:	dc 8e       	std	Y+28, r13	; 0x1c
    2160:	cb 8e       	std	Y+27, r12	; 0x1b
    2162:	06 c0       	rjmp	.+12     	; 0x2170 <xTaskCreate+0x56>
    2164:	c6 01       	movw	r24, r12
    2166:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vPortFree>
    216a:	02 c0       	rjmp	.+4      	; 0x2170 <xTaskCreate+0x56>
    216c:	c0 e0       	ldi	r28, 0x00	; 0
    216e:	d0 e0       	ldi	r29, 0x00	; 0
    2170:	20 97       	sbiw	r28, 0x00	; 0
    2172:	61 f0       	breq	.+24     	; 0x218c <xTaskCreate+0x72>
    2174:	a1 2c       	mov	r10, r1
    2176:	b1 2c       	mov	r11, r1
    2178:	6e 01       	movw	r12, r28
    217a:	92 01       	movw	r18, r4
    217c:	a4 01       	movw	r20, r8
    217e:	b1 01       	movw	r22, r2
    2180:	c3 01       	movw	r24, r6
    2182:	e7 dd       	rcall	.-1074   	; 0x1d52 <prvInitialiseNewTask>
    2184:	ce 01       	movw	r24, r28
    2186:	93 de       	rcall	.-730    	; 0x1eae <prvAddNewTaskToReadyList>
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	01 c0       	rjmp	.+2      	; 0x218e <xTaskCreate+0x74>
    218c:	8f ef       	ldi	r24, 0xFF	; 255
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	0f 91       	pop	r16
    2194:	ff 90       	pop	r15
    2196:	ef 90       	pop	r14
    2198:	df 90       	pop	r13
    219a:	cf 90       	pop	r12
    219c:	bf 90       	pop	r11
    219e:	af 90       	pop	r10
    21a0:	9f 90       	pop	r9
    21a2:	8f 90       	pop	r8
    21a4:	7f 90       	pop	r7
    21a6:	6f 90       	pop	r6
    21a8:	5f 90       	pop	r5
    21aa:	4f 90       	pop	r4
    21ac:	3f 90       	pop	r3
    21ae:	2f 90       	pop	r2
    21b0:	08 95       	ret

000021b2 <vTaskStartScheduler>:
    21b2:	ef 92       	push	r14
    21b4:	ff 92       	push	r15
    21b6:	0f 93       	push	r16
    21b8:	0f 2e       	mov	r0, r31
    21ba:	f7 e3       	ldi	r31, 0x37	; 55
    21bc:	ef 2e       	mov	r14, r31
    21be:	f5 e1       	ldi	r31, 0x15	; 21
    21c0:	ff 2e       	mov	r15, r31
    21c2:	f0 2d       	mov	r31, r0
    21c4:	00 e0       	ldi	r16, 0x00	; 0
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 ec       	ldi	r20, 0xC0	; 192
    21cc:	50 e0       	ldi	r21, 0x00	; 0
    21ce:	61 e9       	ldi	r22, 0x91	; 145
    21d0:	73 e0       	ldi	r23, 0x03	; 3
    21d2:	8e e4       	ldi	r24, 0x4E	; 78
    21d4:	91 e0       	ldi	r25, 0x01	; 1
    21d6:	a1 df       	rcall	.-190    	; 0x211a <xTaskCreate>
    21d8:	81 30       	cpi	r24, 0x01	; 1
    21da:	11 f4       	brne	.+4      	; 0x21e0 <vTaskStartScheduler+0x2e>
    21dc:	0e 94 8c 1b 	call	0x3718	; 0x3718 <xTimerCreateTimerTask>
    21e0:	81 30       	cpi	r24, 0x01	; 1
    21e2:	c9 f4       	brne	.+50     	; 0x2216 <__stack+0x17>
    21e4:	f8 94       	cli
    21e6:	8f ef       	ldi	r24, 0xFF	; 255
    21e8:	9f ef       	ldi	r25, 0xFF	; 255
    21ea:	dc 01       	movw	r26, r24
    21ec:	80 93 39 15 	sts	0x1539, r24	; 0x801539 <xNextTaskUnblockTime>
    21f0:	90 93 3a 15 	sts	0x153A, r25	; 0x80153a <xNextTaskUnblockTime+0x1>
    21f4:	a0 93 3b 15 	sts	0x153B, r26	; 0x80153b <xNextTaskUnblockTime+0x2>
    21f8:	b0 93 3c 15 	sts	0x153C, r27	; 0x80153c <xNextTaskUnblockTime+0x3>
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	80 93 44 15 	sts	0x1544, r24	; 0x801544 <xSchedulerRunning>
    2202:	10 92 46 15 	sts	0x1546, r1	; 0x801546 <xTickCount>
    2206:	10 92 47 15 	sts	0x1547, r1	; 0x801547 <xTickCount+0x1>
    220a:	10 92 48 15 	sts	0x1548, r1	; 0x801548 <xTickCount+0x2>
    220e:	10 92 49 15 	sts	0x1549, r1	; 0x801549 <xTickCount+0x3>
    2212:	0e 94 b3 06 	call	0xd66	; 0xd66 <xPortStartScheduler>
    2216:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    221a:	0f 91       	pop	r16
    221c:	ff 90       	pop	r15
    221e:	ef 90       	pop	r14
    2220:	08 95       	ret

00002222 <vTaskSuspendAll>:
    2222:	80 91 36 15 	lds	r24, 0x1536	; 0x801536 <uxSchedulerSuspended>
    2226:	8f 5f       	subi	r24, 0xFF	; 255
    2228:	80 93 36 15 	sts	0x1536, r24	; 0x801536 <uxSchedulerSuspended>
    222c:	08 95       	ret

0000222e <xTaskGetTickCount>:
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	0f 92       	push	r0
    2234:	60 91 46 15 	lds	r22, 0x1546	; 0x801546 <xTickCount>
    2238:	70 91 47 15 	lds	r23, 0x1547	; 0x801547 <xTickCount+0x1>
    223c:	80 91 48 15 	lds	r24, 0x1548	; 0x801548 <xTickCount+0x2>
    2240:	90 91 49 15 	lds	r25, 0x1549	; 0x801549 <xTickCount+0x3>
    2244:	0f 90       	pop	r0
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	08 95       	ret

0000224a <xTaskIncrementTick>:
    224a:	cf 92       	push	r12
    224c:	df 92       	push	r13
    224e:	ef 92       	push	r14
    2250:	ff 92       	push	r15
    2252:	cf 93       	push	r28
    2254:	df 93       	push	r29
    2256:	80 91 36 15 	lds	r24, 0x1536	; 0x801536 <uxSchedulerSuspended>
    225a:	81 11       	cpse	r24, r1
    225c:	05 c1       	rjmp	.+522    	; 0x2468 <xTaskIncrementTick+0x21e>
    225e:	c0 90 46 15 	lds	r12, 0x1546	; 0x801546 <xTickCount>
    2262:	d0 90 47 15 	lds	r13, 0x1547	; 0x801547 <xTickCount+0x1>
    2266:	e0 90 48 15 	lds	r14, 0x1548	; 0x801548 <xTickCount+0x2>
    226a:	f0 90 49 15 	lds	r15, 0x1549	; 0x801549 <xTickCount+0x3>
    226e:	8f ef       	ldi	r24, 0xFF	; 255
    2270:	c8 1a       	sub	r12, r24
    2272:	d8 0a       	sbc	r13, r24
    2274:	e8 0a       	sbc	r14, r24
    2276:	f8 0a       	sbc	r15, r24
    2278:	c0 92 46 15 	sts	0x1546, r12	; 0x801546 <xTickCount>
    227c:	d0 92 47 15 	sts	0x1547, r13	; 0x801547 <xTickCount+0x1>
    2280:	e0 92 48 15 	sts	0x1548, r14	; 0x801548 <xTickCount+0x2>
    2284:	f0 92 49 15 	sts	0x1549, r15	; 0x801549 <xTickCount+0x3>
    2288:	c1 14       	cp	r12, r1
    228a:	d1 04       	cpc	r13, r1
    228c:	e1 04       	cpc	r14, r1
    228e:	f1 04       	cpc	r15, r1
    2290:	b1 f4       	brne	.+44     	; 0x22be <xTaskIncrementTick+0x74>
    2292:	80 91 6f 15 	lds	r24, 0x156F	; 0x80156f <pxDelayedTaskList>
    2296:	90 91 70 15 	lds	r25, 0x1570	; 0x801570 <pxDelayedTaskList+0x1>
    229a:	20 91 6d 15 	lds	r18, 0x156D	; 0x80156d <pxOverflowDelayedTaskList>
    229e:	30 91 6e 15 	lds	r19, 0x156E	; 0x80156e <pxOverflowDelayedTaskList+0x1>
    22a2:	30 93 70 15 	sts	0x1570, r19	; 0x801570 <pxDelayedTaskList+0x1>
    22a6:	20 93 6f 15 	sts	0x156F, r18	; 0x80156f <pxDelayedTaskList>
    22aa:	90 93 6e 15 	sts	0x156E, r25	; 0x80156e <pxOverflowDelayedTaskList+0x1>
    22ae:	80 93 6d 15 	sts	0x156D, r24	; 0x80156d <pxOverflowDelayedTaskList>
    22b2:	80 91 3e 15 	lds	r24, 0x153E	; 0x80153e <xNumOfOverflows>
    22b6:	8f 5f       	subi	r24, 0xFF	; 255
    22b8:	80 93 3e 15 	sts	0x153E, r24	; 0x80153e <xNumOfOverflows>
    22bc:	16 dd       	rcall	.-1492   	; 0x1cea <prvResetNextTaskUnblockTime>
    22be:	80 91 39 15 	lds	r24, 0x1539	; 0x801539 <xNextTaskUnblockTime>
    22c2:	90 91 3a 15 	lds	r25, 0x153A	; 0x80153a <xNextTaskUnblockTime+0x1>
    22c6:	a0 91 3b 15 	lds	r26, 0x153B	; 0x80153b <xNextTaskUnblockTime+0x2>
    22ca:	b0 91 3c 15 	lds	r27, 0x153C	; 0x80153c <xNextTaskUnblockTime+0x3>
    22ce:	c8 16       	cp	r12, r24
    22d0:	d9 06       	cpc	r13, r25
    22d2:	ea 06       	cpc	r14, r26
    22d4:	fb 06       	cpc	r15, r27
    22d6:	20 f4       	brcc	.+8      	; 0x22e0 <xTaskIncrementTick+0x96>
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	b2 c0       	rjmp	.+356    	; 0x2440 <xTaskIncrementTick+0x1f6>
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	01 c0       	rjmp	.+2      	; 0x22e2 <xTaskIncrementTick+0x98>
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	e0 91 6f 15 	lds	r30, 0x156F	; 0x80156f <pxDelayedTaskList>
    22e6:	f0 91 70 15 	lds	r31, 0x1570	; 0x801570 <pxDelayedTaskList+0x1>
    22ea:	90 81       	ld	r25, Z
    22ec:	91 11       	cpse	r25, r1
    22ee:	0c c0       	rjmp	.+24     	; 0x2308 <xTaskIncrementTick+0xbe>
    22f0:	4f ef       	ldi	r20, 0xFF	; 255
    22f2:	5f ef       	ldi	r21, 0xFF	; 255
    22f4:	ba 01       	movw	r22, r20
    22f6:	40 93 39 15 	sts	0x1539, r20	; 0x801539 <xNextTaskUnblockTime>
    22fa:	50 93 3a 15 	sts	0x153A, r21	; 0x80153a <xNextTaskUnblockTime+0x1>
    22fe:	60 93 3b 15 	sts	0x153B, r22	; 0x80153b <xNextTaskUnblockTime+0x2>
    2302:	70 93 3c 15 	sts	0x153C, r23	; 0x80153c <xNextTaskUnblockTime+0x3>
    2306:	9c c0       	rjmp	.+312    	; 0x2440 <xTaskIncrementTick+0x1f6>
    2308:	e0 91 6f 15 	lds	r30, 0x156F	; 0x80156f <pxDelayedTaskList>
    230c:	f0 91 70 15 	lds	r31, 0x1570	; 0x801570 <pxDelayedTaskList+0x1>
    2310:	07 80       	ldd	r0, Z+7	; 0x07
    2312:	f0 85       	ldd	r31, Z+8	; 0x08
    2314:	e0 2d       	mov	r30, r0
    2316:	00 84       	ldd	r0, Z+8	; 0x08
    2318:	f1 85       	ldd	r31, Z+9	; 0x09
    231a:	e0 2d       	mov	r30, r0
    231c:	42 81       	ldd	r20, Z+2	; 0x02
    231e:	53 81       	ldd	r21, Z+3	; 0x03
    2320:	64 81       	ldd	r22, Z+4	; 0x04
    2322:	75 81       	ldd	r23, Z+5	; 0x05
    2324:	c4 16       	cp	r12, r20
    2326:	d5 06       	cpc	r13, r21
    2328:	e6 06       	cpc	r14, r22
    232a:	f7 06       	cpc	r15, r23
    232c:	48 f4       	brcc	.+18     	; 0x2340 <xTaskIncrementTick+0xf6>
    232e:	40 93 39 15 	sts	0x1539, r20	; 0x801539 <xNextTaskUnblockTime>
    2332:	50 93 3a 15 	sts	0x153A, r21	; 0x80153a <xNextTaskUnblockTime+0x1>
    2336:	60 93 3b 15 	sts	0x153B, r22	; 0x80153b <xNextTaskUnblockTime+0x2>
    233a:	70 93 3c 15 	sts	0x153C, r23	; 0x80153c <xNextTaskUnblockTime+0x3>
    233e:	80 c0       	rjmp	.+256    	; 0x2440 <xTaskIncrementTick+0x1f6>
    2340:	a4 85       	ldd	r26, Z+12	; 0x0c
    2342:	b5 85       	ldd	r27, Z+13	; 0x0d
    2344:	c6 81       	ldd	r28, Z+6	; 0x06
    2346:	d7 81       	ldd	r29, Z+7	; 0x07
    2348:	20 85       	ldd	r18, Z+8	; 0x08
    234a:	31 85       	ldd	r19, Z+9	; 0x09
    234c:	3f 83       	std	Y+7, r19	; 0x07
    234e:	2e 83       	std	Y+6, r18	; 0x06
    2350:	c0 85       	ldd	r28, Z+8	; 0x08
    2352:	d1 85       	ldd	r29, Z+9	; 0x09
    2354:	26 81       	ldd	r18, Z+6	; 0x06
    2356:	37 81       	ldd	r19, Z+7	; 0x07
    2358:	3d 83       	std	Y+5, r19	; 0x05
    235a:	2c 83       	std	Y+4, r18	; 0x04
    235c:	11 96       	adiw	r26, 0x01	; 1
    235e:	4d 91       	ld	r20, X+
    2360:	5c 91       	ld	r21, X
    2362:	12 97       	sbiw	r26, 0x02	; 2
    2364:	9f 01       	movw	r18, r30
    2366:	2e 5f       	subi	r18, 0xFE	; 254
    2368:	3f 4f       	sbci	r19, 0xFF	; 255
    236a:	42 17       	cp	r20, r18
    236c:	53 07       	cpc	r21, r19
    236e:	31 f4       	brne	.+12     	; 0x237c <xTaskIncrementTick+0x132>
    2370:	40 85       	ldd	r20, Z+8	; 0x08
    2372:	51 85       	ldd	r21, Z+9	; 0x09
    2374:	12 96       	adiw	r26, 0x02	; 2
    2376:	5c 93       	st	X, r21
    2378:	4e 93       	st	-X, r20
    237a:	11 97       	sbiw	r26, 0x01	; 1
    237c:	15 86       	std	Z+13, r1	; 0x0d
    237e:	14 86       	std	Z+12, r1	; 0x0c
    2380:	9c 91       	ld	r25, X
    2382:	91 50       	subi	r25, 0x01	; 1
    2384:	9c 93       	st	X, r25
    2386:	a0 8d       	ldd	r26, Z+24	; 0x18
    2388:	b1 8d       	ldd	r27, Z+25	; 0x19
    238a:	10 97       	sbiw	r26, 0x00	; 0
    238c:	09 f1       	breq	.+66     	; 0x23d0 <xTaskIncrementTick+0x186>
    238e:	c2 89       	ldd	r28, Z+18	; 0x12
    2390:	d3 89       	ldd	r29, Z+19	; 0x13
    2392:	44 89       	ldd	r20, Z+20	; 0x14
    2394:	55 89       	ldd	r21, Z+21	; 0x15
    2396:	5f 83       	std	Y+7, r21	; 0x07
    2398:	4e 83       	std	Y+6, r20	; 0x06
    239a:	c4 89       	ldd	r28, Z+20	; 0x14
    239c:	d5 89       	ldd	r29, Z+21	; 0x15
    239e:	42 89       	ldd	r20, Z+18	; 0x12
    23a0:	53 89       	ldd	r21, Z+19	; 0x13
    23a2:	5d 83       	std	Y+5, r21	; 0x05
    23a4:	4c 83       	std	Y+4, r20	; 0x04
    23a6:	11 96       	adiw	r26, 0x01	; 1
    23a8:	6d 91       	ld	r22, X+
    23aa:	7c 91       	ld	r23, X
    23ac:	12 97       	sbiw	r26, 0x02	; 2
    23ae:	af 01       	movw	r20, r30
    23b0:	42 5f       	subi	r20, 0xF2	; 242
    23b2:	5f 4f       	sbci	r21, 0xFF	; 255
    23b4:	64 17       	cp	r22, r20
    23b6:	75 07       	cpc	r23, r21
    23b8:	31 f4       	brne	.+12     	; 0x23c6 <xTaskIncrementTick+0x17c>
    23ba:	44 89       	ldd	r20, Z+20	; 0x14
    23bc:	55 89       	ldd	r21, Z+21	; 0x15
    23be:	12 96       	adiw	r26, 0x02	; 2
    23c0:	5c 93       	st	X, r21
    23c2:	4e 93       	st	-X, r20
    23c4:	11 97       	sbiw	r26, 0x01	; 1
    23c6:	11 8e       	std	Z+25, r1	; 0x19
    23c8:	10 8e       	std	Z+24, r1	; 0x18
    23ca:	9c 91       	ld	r25, X
    23cc:	91 50       	subi	r25, 0x01	; 1
    23ce:	9c 93       	st	X, r25
    23d0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    23d2:	90 91 45 15 	lds	r25, 0x1545	; 0x801545 <uxTopReadyPriority>
    23d6:	9a 17       	cp	r25, r26
    23d8:	10 f4       	brcc	.+4      	; 0x23de <xTaskIncrementTick+0x194>
    23da:	a0 93 45 15 	sts	0x1545, r26	; 0x801545 <uxTopReadyPriority>
    23de:	9b e0       	ldi	r25, 0x0B	; 11
    23e0:	9a 9f       	mul	r25, r26
    23e2:	d0 01       	movw	r26, r0
    23e4:	11 24       	eor	r1, r1
    23e6:	a9 57       	subi	r26, 0x79	; 121
    23e8:	ba 4e       	sbci	r27, 0xEA	; 234
    23ea:	11 96       	adiw	r26, 0x01	; 1
    23ec:	0d 90       	ld	r0, X+
    23ee:	bc 91       	ld	r27, X
    23f0:	a0 2d       	mov	r26, r0
    23f2:	b7 83       	std	Z+7, r27	; 0x07
    23f4:	a6 83       	std	Z+6, r26	; 0x06
    23f6:	16 96       	adiw	r26, 0x06	; 6
    23f8:	4d 91       	ld	r20, X+
    23fa:	5c 91       	ld	r21, X
    23fc:	17 97       	sbiw	r26, 0x07	; 7
    23fe:	51 87       	std	Z+9, r21	; 0x09
    2400:	40 87       	std	Z+8, r20	; 0x08
    2402:	16 96       	adiw	r26, 0x06	; 6
    2404:	cd 91       	ld	r28, X+
    2406:	dc 91       	ld	r29, X
    2408:	17 97       	sbiw	r26, 0x07	; 7
    240a:	3d 83       	std	Y+5, r19	; 0x05
    240c:	2c 83       	std	Y+4, r18	; 0x04
    240e:	17 96       	adiw	r26, 0x07	; 7
    2410:	3c 93       	st	X, r19
    2412:	2e 93       	st	-X, r18
    2414:	16 97       	sbiw	r26, 0x06	; 6
    2416:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2418:	9a 9f       	mul	r25, r26
    241a:	d0 01       	movw	r26, r0
    241c:	11 24       	eor	r1, r1
    241e:	a9 57       	subi	r26, 0x79	; 121
    2420:	ba 4e       	sbci	r27, 0xEA	; 234
    2422:	b5 87       	std	Z+13, r27	; 0x0d
    2424:	a4 87       	std	Z+12, r26	; 0x0c
    2426:	9c 91       	ld	r25, X
    2428:	9f 5f       	subi	r25, 0xFF	; 255
    242a:	9c 93       	st	X, r25
    242c:	22 8d       	ldd	r18, Z+26	; 0x1a
    242e:	e0 91 f5 15 	lds	r30, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2432:	f0 91 f6 15 	lds	r31, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2436:	92 8d       	ldd	r25, Z+26	; 0x1a
    2438:	29 17       	cp	r18, r25
    243a:	08 f0       	brcs	.+2      	; 0x243e <xTaskIncrementTick+0x1f4>
    243c:	4f cf       	rjmp	.-354    	; 0x22dc <xTaskIncrementTick+0x92>
    243e:	51 cf       	rjmp	.-350    	; 0x22e2 <xTaskIncrementTick+0x98>
    2440:	e0 91 f5 15 	lds	r30, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2444:	f0 91 f6 15 	lds	r31, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2448:	e2 8d       	ldd	r30, Z+26	; 0x1a
    244a:	9b e0       	ldi	r25, 0x0B	; 11
    244c:	e9 9f       	mul	r30, r25
    244e:	f0 01       	movw	r30, r0
    2450:	11 24       	eor	r1, r1
    2452:	e9 57       	subi	r30, 0x79	; 121
    2454:	fa 4e       	sbci	r31, 0xEA	; 234
    2456:	90 81       	ld	r25, Z
    2458:	92 30       	cpi	r25, 0x02	; 2
    245a:	08 f0       	brcs	.+2      	; 0x245e <xTaskIncrementTick+0x214>
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	90 91 3f 15 	lds	r25, 0x153F	; 0x80153f <xYieldPending>
    2462:	91 11       	cpse	r25, r1
    2464:	16 c0       	rjmp	.+44     	; 0x2492 <xTaskIncrementTick+0x248>
    2466:	16 c0       	rjmp	.+44     	; 0x2494 <xTaskIncrementTick+0x24a>
    2468:	80 91 40 15 	lds	r24, 0x1540	; 0x801540 <xPendedTicks>
    246c:	90 91 41 15 	lds	r25, 0x1541	; 0x801541 <xPendedTicks+0x1>
    2470:	a0 91 42 15 	lds	r26, 0x1542	; 0x801542 <xPendedTicks+0x2>
    2474:	b0 91 43 15 	lds	r27, 0x1543	; 0x801543 <xPendedTicks+0x3>
    2478:	01 96       	adiw	r24, 0x01	; 1
    247a:	a1 1d       	adc	r26, r1
    247c:	b1 1d       	adc	r27, r1
    247e:	80 93 40 15 	sts	0x1540, r24	; 0x801540 <xPendedTicks>
    2482:	90 93 41 15 	sts	0x1541, r25	; 0x801541 <xPendedTicks+0x1>
    2486:	a0 93 42 15 	sts	0x1542, r26	; 0x801542 <xPendedTicks+0x2>
    248a:	b0 93 43 15 	sts	0x1543, r27	; 0x801543 <xPendedTicks+0x3>
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	01 c0       	rjmp	.+2      	; 0x2494 <xTaskIncrementTick+0x24a>
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	df 91       	pop	r29
    2496:	cf 91       	pop	r28
    2498:	ff 90       	pop	r15
    249a:	ef 90       	pop	r14
    249c:	df 90       	pop	r13
    249e:	cf 90       	pop	r12
    24a0:	08 95       	ret

000024a2 <xTaskResumeAll>:
    24a2:	cf 92       	push	r12
    24a4:	df 92       	push	r13
    24a6:	ef 92       	push	r14
    24a8:	ff 92       	push	r15
    24aa:	cf 93       	push	r28
    24ac:	df 93       	push	r29
    24ae:	0f b6       	in	r0, 0x3f	; 63
    24b0:	f8 94       	cli
    24b2:	0f 92       	push	r0
    24b4:	80 91 36 15 	lds	r24, 0x1536	; 0x801536 <uxSchedulerSuspended>
    24b8:	81 50       	subi	r24, 0x01	; 1
    24ba:	80 93 36 15 	sts	0x1536, r24	; 0x801536 <uxSchedulerSuspended>
    24be:	80 91 36 15 	lds	r24, 0x1536	; 0x801536 <uxSchedulerSuspended>
    24c2:	81 11       	cpse	r24, r1
    24c4:	be c0       	rjmp	.+380    	; 0x2642 <xTaskResumeAll+0x1a0>
    24c6:	80 91 4a 15 	lds	r24, 0x154A	; 0x80154a <uxCurrentNumberOfTasks>
    24ca:	81 11       	cpse	r24, r1
    24cc:	88 c0       	rjmp	.+272    	; 0x25de <xTaskResumeAll+0x13c>
    24ce:	bc c0       	rjmp	.+376    	; 0x2648 <xTaskResumeAll+0x1a6>
    24d0:	e0 91 69 15 	lds	r30, 0x1569	; 0x801569 <xPendingReadyList+0x7>
    24d4:	f0 91 6a 15 	lds	r31, 0x156A	; 0x80156a <xPendingReadyList+0x8>
    24d8:	00 84       	ldd	r0, Z+8	; 0x08
    24da:	f1 85       	ldd	r31, Z+9	; 0x09
    24dc:	e0 2d       	mov	r30, r0
    24de:	a0 8d       	ldd	r26, Z+24	; 0x18
    24e0:	b1 8d       	ldd	r27, Z+25	; 0x19
    24e2:	c2 89       	ldd	r28, Z+18	; 0x12
    24e4:	d3 89       	ldd	r29, Z+19	; 0x13
    24e6:	84 89       	ldd	r24, Z+20	; 0x14
    24e8:	95 89       	ldd	r25, Z+21	; 0x15
    24ea:	9f 83       	std	Y+7, r25	; 0x07
    24ec:	8e 83       	std	Y+6, r24	; 0x06
    24ee:	c4 89       	ldd	r28, Z+20	; 0x14
    24f0:	d5 89       	ldd	r29, Z+21	; 0x15
    24f2:	82 89       	ldd	r24, Z+18	; 0x12
    24f4:	93 89       	ldd	r25, Z+19	; 0x13
    24f6:	9d 83       	std	Y+5, r25	; 0x05
    24f8:	8c 83       	std	Y+4, r24	; 0x04
    24fa:	11 96       	adiw	r26, 0x01	; 1
    24fc:	2d 91       	ld	r18, X+
    24fe:	3c 91       	ld	r19, X
    2500:	12 97       	sbiw	r26, 0x02	; 2
    2502:	cf 01       	movw	r24, r30
    2504:	0e 96       	adiw	r24, 0x0e	; 14
    2506:	28 17       	cp	r18, r24
    2508:	39 07       	cpc	r19, r25
    250a:	31 f4       	brne	.+12     	; 0x2518 <xTaskResumeAll+0x76>
    250c:	84 89       	ldd	r24, Z+20	; 0x14
    250e:	95 89       	ldd	r25, Z+21	; 0x15
    2510:	12 96       	adiw	r26, 0x02	; 2
    2512:	9c 93       	st	X, r25
    2514:	8e 93       	st	-X, r24
    2516:	11 97       	sbiw	r26, 0x01	; 1
    2518:	11 8e       	std	Z+25, r1	; 0x19
    251a:	10 8e       	std	Z+24, r1	; 0x18
    251c:	8c 91       	ld	r24, X
    251e:	81 50       	subi	r24, 0x01	; 1
    2520:	8c 93       	st	X, r24
    2522:	a4 85       	ldd	r26, Z+12	; 0x0c
    2524:	b5 85       	ldd	r27, Z+13	; 0x0d
    2526:	c6 81       	ldd	r28, Z+6	; 0x06
    2528:	d7 81       	ldd	r29, Z+7	; 0x07
    252a:	80 85       	ldd	r24, Z+8	; 0x08
    252c:	91 85       	ldd	r25, Z+9	; 0x09
    252e:	9f 83       	std	Y+7, r25	; 0x07
    2530:	8e 83       	std	Y+6, r24	; 0x06
    2532:	c0 85       	ldd	r28, Z+8	; 0x08
    2534:	d1 85       	ldd	r29, Z+9	; 0x09
    2536:	86 81       	ldd	r24, Z+6	; 0x06
    2538:	97 81       	ldd	r25, Z+7	; 0x07
    253a:	9d 83       	std	Y+5, r25	; 0x05
    253c:	8c 83       	std	Y+4, r24	; 0x04
    253e:	11 96       	adiw	r26, 0x01	; 1
    2540:	8d 91       	ld	r24, X+
    2542:	9c 91       	ld	r25, X
    2544:	12 97       	sbiw	r26, 0x02	; 2
    2546:	9f 01       	movw	r18, r30
    2548:	2e 5f       	subi	r18, 0xFE	; 254
    254a:	3f 4f       	sbci	r19, 0xFF	; 255
    254c:	82 17       	cp	r24, r18
    254e:	93 07       	cpc	r25, r19
    2550:	31 f4       	brne	.+12     	; 0x255e <xTaskResumeAll+0xbc>
    2552:	80 85       	ldd	r24, Z+8	; 0x08
    2554:	91 85       	ldd	r25, Z+9	; 0x09
    2556:	12 96       	adiw	r26, 0x02	; 2
    2558:	9c 93       	st	X, r25
    255a:	8e 93       	st	-X, r24
    255c:	11 97       	sbiw	r26, 0x01	; 1
    255e:	15 86       	std	Z+13, r1	; 0x0d
    2560:	14 86       	std	Z+12, r1	; 0x0c
    2562:	8c 91       	ld	r24, X
    2564:	81 50       	subi	r24, 0x01	; 1
    2566:	8c 93       	st	X, r24
    2568:	a2 8d       	ldd	r26, Z+26	; 0x1a
    256a:	80 91 45 15 	lds	r24, 0x1545	; 0x801545 <uxTopReadyPriority>
    256e:	8a 17       	cp	r24, r26
    2570:	10 f4       	brcc	.+4      	; 0x2576 <xTaskResumeAll+0xd4>
    2572:	a0 93 45 15 	sts	0x1545, r26	; 0x801545 <uxTopReadyPriority>
    2576:	8b e0       	ldi	r24, 0x0B	; 11
    2578:	8a 9f       	mul	r24, r26
    257a:	d0 01       	movw	r26, r0
    257c:	11 24       	eor	r1, r1
    257e:	a9 57       	subi	r26, 0x79	; 121
    2580:	ba 4e       	sbci	r27, 0xEA	; 234
    2582:	11 96       	adiw	r26, 0x01	; 1
    2584:	0d 90       	ld	r0, X+
    2586:	bc 91       	ld	r27, X
    2588:	a0 2d       	mov	r26, r0
    258a:	b7 83       	std	Z+7, r27	; 0x07
    258c:	a6 83       	std	Z+6, r26	; 0x06
    258e:	16 96       	adiw	r26, 0x06	; 6
    2590:	4d 91       	ld	r20, X+
    2592:	5c 91       	ld	r21, X
    2594:	17 97       	sbiw	r26, 0x07	; 7
    2596:	51 87       	std	Z+9, r21	; 0x09
    2598:	40 87       	std	Z+8, r20	; 0x08
    259a:	16 96       	adiw	r26, 0x06	; 6
    259c:	cd 91       	ld	r28, X+
    259e:	dc 91       	ld	r29, X
    25a0:	17 97       	sbiw	r26, 0x07	; 7
    25a2:	3d 83       	std	Y+5, r19	; 0x05
    25a4:	2c 83       	std	Y+4, r18	; 0x04
    25a6:	17 96       	adiw	r26, 0x07	; 7
    25a8:	3c 93       	st	X, r19
    25aa:	2e 93       	st	-X, r18
    25ac:	16 97       	sbiw	r26, 0x06	; 6
    25ae:	a2 8d       	ldd	r26, Z+26	; 0x1a
    25b0:	8a 9f       	mul	r24, r26
    25b2:	d0 01       	movw	r26, r0
    25b4:	11 24       	eor	r1, r1
    25b6:	a9 57       	subi	r26, 0x79	; 121
    25b8:	ba 4e       	sbci	r27, 0xEA	; 234
    25ba:	b5 87       	std	Z+13, r27	; 0x0d
    25bc:	a4 87       	std	Z+12, r26	; 0x0c
    25be:	8c 91       	ld	r24, X
    25c0:	8f 5f       	subi	r24, 0xFF	; 255
    25c2:	8c 93       	st	X, r24
    25c4:	92 8d       	ldd	r25, Z+26	; 0x1a
    25c6:	a0 91 f5 15 	lds	r26, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    25ca:	b0 91 f6 15 	lds	r27, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    25ce:	5a 96       	adiw	r26, 0x1a	; 26
    25d0:	8c 91       	ld	r24, X
    25d2:	98 17       	cp	r25, r24
    25d4:	30 f0       	brcs	.+12     	; 0x25e2 <xTaskResumeAll+0x140>
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	80 93 3f 15 	sts	0x153F, r24	; 0x80153f <xYieldPending>
    25dc:	02 c0       	rjmp	.+4      	; 0x25e2 <xTaskResumeAll+0x140>
    25de:	e0 e0       	ldi	r30, 0x00	; 0
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	80 91 62 15 	lds	r24, 0x1562	; 0x801562 <xPendingReadyList>
    25e6:	81 11       	cpse	r24, r1
    25e8:	73 cf       	rjmp	.-282    	; 0x24d0 <xTaskResumeAll+0x2e>
    25ea:	ef 2b       	or	r30, r31
    25ec:	09 f0       	breq	.+2      	; 0x25f0 <xTaskResumeAll+0x14e>
    25ee:	7d db       	rcall	.-2310   	; 0x1cea <prvResetNextTaskUnblockTime>
    25f0:	c0 90 40 15 	lds	r12, 0x1540	; 0x801540 <xPendedTicks>
    25f4:	d0 90 41 15 	lds	r13, 0x1541	; 0x801541 <xPendedTicks+0x1>
    25f8:	e0 90 42 15 	lds	r14, 0x1542	; 0x801542 <xPendedTicks+0x2>
    25fc:	f0 90 43 15 	lds	r15, 0x1543	; 0x801543 <xPendedTicks+0x3>
    2600:	c1 14       	cp	r12, r1
    2602:	d1 04       	cpc	r13, r1
    2604:	e1 04       	cpc	r14, r1
    2606:	f1 04       	cpc	r15, r1
    2608:	a1 f0       	breq	.+40     	; 0x2632 <xTaskResumeAll+0x190>
    260a:	1f de       	rcall	.-962    	; 0x224a <xTaskIncrementTick>
    260c:	88 23       	and	r24, r24
    260e:	19 f0       	breq	.+6      	; 0x2616 <xTaskResumeAll+0x174>
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	80 93 3f 15 	sts	0x153F, r24	; 0x80153f <xYieldPending>
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	c8 1a       	sub	r12, r24
    261a:	d1 08       	sbc	r13, r1
    261c:	e1 08       	sbc	r14, r1
    261e:	f1 08       	sbc	r15, r1
    2620:	a1 f7       	brne	.-24     	; 0x260a <xTaskResumeAll+0x168>
    2622:	10 92 40 15 	sts	0x1540, r1	; 0x801540 <xPendedTicks>
    2626:	10 92 41 15 	sts	0x1541, r1	; 0x801541 <xPendedTicks+0x1>
    262a:	10 92 42 15 	sts	0x1542, r1	; 0x801542 <xPendedTicks+0x2>
    262e:	10 92 43 15 	sts	0x1543, r1	; 0x801543 <xPendedTicks+0x3>
    2632:	80 91 3f 15 	lds	r24, 0x153F	; 0x80153f <xYieldPending>
    2636:	88 23       	and	r24, r24
    2638:	31 f0       	breq	.+12     	; 0x2646 <xTaskResumeAll+0x1a4>
    263a:	0e 94 e5 06 	call	0xdca	; 0xdca <vPortYield>
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	03 c0       	rjmp	.+6      	; 0x2648 <xTaskResumeAll+0x1a6>
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	01 c0       	rjmp	.+2      	; 0x2648 <xTaskResumeAll+0x1a6>
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	0f 90       	pop	r0
    264a:	0f be       	out	0x3f, r0	; 63
    264c:	df 91       	pop	r29
    264e:	cf 91       	pop	r28
    2650:	ff 90       	pop	r15
    2652:	ef 90       	pop	r14
    2654:	df 90       	pop	r13
    2656:	cf 90       	pop	r12
    2658:	08 95       	ret

0000265a <xTaskDelayUntil>:
    265a:	8f 92       	push	r8
    265c:	9f 92       	push	r9
    265e:	af 92       	push	r10
    2660:	bf 92       	push	r11
    2662:	cf 92       	push	r12
    2664:	df 92       	push	r13
    2666:	ef 92       	push	r14
    2668:	ff 92       	push	r15
    266a:	1f 93       	push	r17
    266c:	cf 93       	push	r28
    266e:	df 93       	push	r29
    2670:	ec 01       	movw	r28, r24
    2672:	6a 01       	movw	r12, r20
    2674:	7b 01       	movw	r14, r22
    2676:	d5 dd       	rcall	.-1110   	; 0x2222 <vTaskSuspendAll>
    2678:	80 90 46 15 	lds	r8, 0x1546	; 0x801546 <xTickCount>
    267c:	90 90 47 15 	lds	r9, 0x1547	; 0x801547 <xTickCount+0x1>
    2680:	a0 90 48 15 	lds	r10, 0x1548	; 0x801548 <xTickCount+0x2>
    2684:	b0 90 49 15 	lds	r11, 0x1549	; 0x801549 <xTickCount+0x3>
    2688:	88 81       	ld	r24, Y
    268a:	99 81       	ldd	r25, Y+1	; 0x01
    268c:	aa 81       	ldd	r26, Y+2	; 0x02
    268e:	bb 81       	ldd	r27, Y+3	; 0x03
    2690:	ac 01       	movw	r20, r24
    2692:	bd 01       	movw	r22, r26
    2694:	4c 0d       	add	r20, r12
    2696:	5d 1d       	adc	r21, r13
    2698:	6e 1d       	adc	r22, r14
    269a:	7f 1d       	adc	r23, r15
    269c:	88 16       	cp	r8, r24
    269e:	99 06       	cpc	r9, r25
    26a0:	aa 06       	cpc	r10, r26
    26a2:	bb 06       	cpc	r11, r27
    26a4:	60 f4       	brcc	.+24     	; 0x26be <xTaskDelayUntil+0x64>
    26a6:	48 17       	cp	r20, r24
    26a8:	59 07       	cpc	r21, r25
    26aa:	6a 07       	cpc	r22, r26
    26ac:	7b 07       	cpc	r23, r27
    26ae:	98 f4       	brcc	.+38     	; 0x26d6 <xTaskDelayUntil+0x7c>
    26b0:	84 16       	cp	r8, r20
    26b2:	95 06       	cpc	r9, r21
    26b4:	a6 06       	cpc	r10, r22
    26b6:	b7 06       	cpc	r11, r23
    26b8:	80 f0       	brcs	.+32     	; 0x26da <xTaskDelayUntil+0x80>
    26ba:	10 e0       	ldi	r17, 0x00	; 0
    26bc:	13 c0       	rjmp	.+38     	; 0x26e4 <xTaskDelayUntil+0x8a>
    26be:	48 17       	cp	r20, r24
    26c0:	59 07       	cpc	r21, r25
    26c2:	6a 07       	cpc	r22, r26
    26c4:	7b 07       	cpc	r23, r27
    26c6:	58 f0       	brcs	.+22     	; 0x26de <xTaskDelayUntil+0x84>
    26c8:	84 16       	cp	r8, r20
    26ca:	95 06       	cpc	r9, r21
    26cc:	a6 06       	cpc	r10, r22
    26ce:	b7 06       	cpc	r11, r23
    26d0:	40 f0       	brcs	.+16     	; 0x26e2 <xTaskDelayUntil+0x88>
    26d2:	10 e0       	ldi	r17, 0x00	; 0
    26d4:	07 c0       	rjmp	.+14     	; 0x26e4 <xTaskDelayUntil+0x8a>
    26d6:	10 e0       	ldi	r17, 0x00	; 0
    26d8:	05 c0       	rjmp	.+10     	; 0x26e4 <xTaskDelayUntil+0x8a>
    26da:	11 e0       	ldi	r17, 0x01	; 1
    26dc:	03 c0       	rjmp	.+6      	; 0x26e4 <xTaskDelayUntil+0x8a>
    26de:	11 e0       	ldi	r17, 0x01	; 1
    26e0:	01 c0       	rjmp	.+2      	; 0x26e4 <xTaskDelayUntil+0x8a>
    26e2:	11 e0       	ldi	r17, 0x01	; 1
    26e4:	48 83       	st	Y, r20
    26e6:	59 83       	std	Y+1, r21	; 0x01
    26e8:	6a 83       	std	Y+2, r22	; 0x02
    26ea:	7b 83       	std	Y+3, r23	; 0x03
    26ec:	11 23       	and	r17, r17
    26ee:	41 f0       	breq	.+16     	; 0x2700 <xTaskDelayUntil+0xa6>
    26f0:	cb 01       	movw	r24, r22
    26f2:	ba 01       	movw	r22, r20
    26f4:	68 19       	sub	r22, r8
    26f6:	79 09       	sbc	r23, r9
    26f8:	8a 09       	sbc	r24, r10
    26fa:	9b 09       	sbc	r25, r11
    26fc:	40 e0       	ldi	r20, 0x00	; 0
    26fe:	6b dc       	rcall	.-1834   	; 0x1fd6 <prvAddCurrentTaskToDelayedList>
    2700:	d0 de       	rcall	.-608    	; 0x24a2 <xTaskResumeAll>
    2702:	81 11       	cpse	r24, r1
    2704:	02 c0       	rjmp	.+4      	; 0x270a <xTaskDelayUntil+0xb0>
    2706:	0e 94 e5 06 	call	0xdca	; 0xdca <vPortYield>
    270a:	81 2f       	mov	r24, r17
    270c:	df 91       	pop	r29
    270e:	cf 91       	pop	r28
    2710:	1f 91       	pop	r17
    2712:	ff 90       	pop	r15
    2714:	ef 90       	pop	r14
    2716:	df 90       	pop	r13
    2718:	cf 90       	pop	r12
    271a:	bf 90       	pop	r11
    271c:	af 90       	pop	r10
    271e:	9f 90       	pop	r9
    2720:	8f 90       	pop	r8
    2722:	08 95       	ret

00002724 <vTaskDelay>:
    2724:	cf 92       	push	r12
    2726:	df 92       	push	r13
    2728:	ef 92       	push	r14
    272a:	ff 92       	push	r15
    272c:	6b 01       	movw	r12, r22
    272e:	7c 01       	movw	r14, r24
    2730:	67 2b       	or	r22, r23
    2732:	68 2b       	or	r22, r24
    2734:	69 2b       	or	r22, r25
    2736:	39 f0       	breq	.+14     	; 0x2746 <vTaskDelay+0x22>
    2738:	74 dd       	rcall	.-1304   	; 0x2222 <vTaskSuspendAll>
    273a:	40 e0       	ldi	r20, 0x00	; 0
    273c:	c7 01       	movw	r24, r14
    273e:	b6 01       	movw	r22, r12
    2740:	4a dc       	rcall	.-1900   	; 0x1fd6 <prvAddCurrentTaskToDelayedList>
    2742:	af de       	rcall	.-674    	; 0x24a2 <xTaskResumeAll>
    2744:	01 c0       	rjmp	.+2      	; 0x2748 <vTaskDelay+0x24>
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	81 11       	cpse	r24, r1
    274a:	02 c0       	rjmp	.+4      	; 0x2750 <vTaskDelay+0x2c>
    274c:	0e 94 e5 06 	call	0xdca	; 0xdca <vPortYield>
    2750:	ff 90       	pop	r15
    2752:	ef 90       	pop	r14
    2754:	df 90       	pop	r13
    2756:	cf 90       	pop	r12
    2758:	08 95       	ret

0000275a <vTaskSwitchContext>:
    275a:	80 91 36 15 	lds	r24, 0x1536	; 0x801536 <uxSchedulerSuspended>
    275e:	88 23       	and	r24, r24
    2760:	21 f0       	breq	.+8      	; 0x276a <vTaskSwitchContext+0x10>
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	80 93 3f 15 	sts	0x153F, r24	; 0x80153f <xYieldPending>
    2768:	08 95       	ret
    276a:	10 92 3f 15 	sts	0x153F, r1	; 0x80153f <xYieldPending>
    276e:	e0 91 f5 15 	lds	r30, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2772:	f0 91 f6 15 	lds	r31, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2776:	20 81       	ld	r18, Z
    2778:	31 81       	ldd	r19, Z+1	; 0x01
    277a:	e0 91 f5 15 	lds	r30, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    277e:	f0 91 f6 15 	lds	r31, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2782:	83 8d       	ldd	r24, Z+27	; 0x1b
    2784:	94 8d       	ldd	r25, Z+28	; 0x1c
    2786:	82 17       	cp	r24, r18
    2788:	93 07       	cpc	r25, r19
    278a:	60 f0       	brcs	.+24     	; 0x27a4 <vTaskSwitchContext+0x4a>
    278c:	60 91 f5 15 	lds	r22, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2790:	70 91 f6 15 	lds	r23, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2794:	63 5e       	subi	r22, 0xE3	; 227
    2796:	7f 4f       	sbci	r23, 0xFF	; 255
    2798:	80 91 f5 15 	lds	r24, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    279c:	90 91 f6 15 	lds	r25, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    27a0:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <vApplicationStackOverflowHook>
    27a4:	80 91 45 15 	lds	r24, 0x1545	; 0x801545 <uxTopReadyPriority>
    27a8:	01 c0       	rjmp	.+2      	; 0x27ac <vTaskSwitchContext+0x52>
    27aa:	81 50       	subi	r24, 0x01	; 1
    27ac:	28 2f       	mov	r18, r24
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	9b e0       	ldi	r25, 0x0B	; 11
    27b2:	92 9f       	mul	r25, r18
    27b4:	f0 01       	movw	r30, r0
    27b6:	93 9f       	mul	r25, r19
    27b8:	f0 0d       	add	r31, r0
    27ba:	11 24       	eor	r1, r1
    27bc:	e9 57       	subi	r30, 0x79	; 121
    27be:	fa 4e       	sbci	r31, 0xEA	; 234
    27c0:	90 81       	ld	r25, Z
    27c2:	99 23       	and	r25, r25
    27c4:	91 f3       	breq	.-28     	; 0x27aa <vTaskSwitchContext+0x50>
    27c6:	9b e0       	ldi	r25, 0x0B	; 11
    27c8:	92 9f       	mul	r25, r18
    27ca:	a0 01       	movw	r20, r0
    27cc:	93 9f       	mul	r25, r19
    27ce:	50 0d       	add	r21, r0
    27d0:	11 24       	eor	r1, r1
    27d2:	df 01       	movw	r26, r30
    27d4:	01 80       	ldd	r0, Z+1	; 0x01
    27d6:	f2 81       	ldd	r31, Z+2	; 0x02
    27d8:	e0 2d       	mov	r30, r0
    27da:	04 80       	ldd	r0, Z+4	; 0x04
    27dc:	f5 81       	ldd	r31, Z+5	; 0x05
    27de:	e0 2d       	mov	r30, r0
    27e0:	12 96       	adiw	r26, 0x02	; 2
    27e2:	fc 93       	st	X, r31
    27e4:	ee 93       	st	-X, r30
    27e6:	11 97       	sbiw	r26, 0x01	; 1
    27e8:	46 57       	subi	r20, 0x76	; 118
    27ea:	5a 4e       	sbci	r21, 0xEA	; 234
    27ec:	e4 17       	cp	r30, r20
    27ee:	f5 07       	cpc	r31, r21
    27f0:	29 f4       	brne	.+10     	; 0x27fc <vTaskSwitchContext+0xa2>
    27f2:	44 81       	ldd	r20, Z+4	; 0x04
    27f4:	55 81       	ldd	r21, Z+5	; 0x05
    27f6:	fd 01       	movw	r30, r26
    27f8:	52 83       	std	Z+2, r21	; 0x02
    27fa:	41 83       	std	Z+1, r20	; 0x01
    27fc:	9b e0       	ldi	r25, 0x0B	; 11
    27fe:	92 9f       	mul	r25, r18
    2800:	f0 01       	movw	r30, r0
    2802:	93 9f       	mul	r25, r19
    2804:	f0 0d       	add	r31, r0
    2806:	11 24       	eor	r1, r1
    2808:	e9 57       	subi	r30, 0x79	; 121
    280a:	fa 4e       	sbci	r31, 0xEA	; 234
    280c:	01 80       	ldd	r0, Z+1	; 0x01
    280e:	f2 81       	ldd	r31, Z+2	; 0x02
    2810:	e0 2d       	mov	r30, r0
    2812:	20 85       	ldd	r18, Z+8	; 0x08
    2814:	31 85       	ldd	r19, Z+9	; 0x09
    2816:	30 93 f6 15 	sts	0x15F6, r19	; 0x8015f6 <pxCurrentTCB+0x1>
    281a:	20 93 f5 15 	sts	0x15F5, r18	; 0x8015f5 <pxCurrentTCB>
    281e:	80 93 45 15 	sts	0x1545, r24	; 0x801545 <uxTopReadyPriority>
    2822:	08 95       	ret

00002824 <vTaskPlaceOnEventList>:
    2824:	cf 92       	push	r12
    2826:	df 92       	push	r13
    2828:	ef 92       	push	r14
    282a:	ff 92       	push	r15
    282c:	6a 01       	movw	r12, r20
    282e:	7b 01       	movw	r14, r22
    2830:	60 91 f5 15 	lds	r22, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2834:	70 91 f6 15 	lds	r23, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2838:	62 5f       	subi	r22, 0xF2	; 242
    283a:	7f 4f       	sbci	r23, 0xFF	; 255
    283c:	0e 94 2c 06 	call	0xc58	; 0xc58 <vListInsert>
    2840:	41 e0       	ldi	r20, 0x01	; 1
    2842:	c7 01       	movw	r24, r14
    2844:	b6 01       	movw	r22, r12
    2846:	c7 db       	rcall	.-2162   	; 0x1fd6 <prvAddCurrentTaskToDelayedList>
    2848:	ff 90       	pop	r15
    284a:	ef 90       	pop	r14
    284c:	df 90       	pop	r13
    284e:	cf 90       	pop	r12
    2850:	08 95       	ret

00002852 <vTaskPlaceOnUnorderedEventList>:
    2852:	0f 93       	push	r16
    2854:	1f 93       	push	r17
    2856:	cf 93       	push	r28
    2858:	df 93       	push	r29
    285a:	fc 01       	movw	r30, r24
    285c:	a0 91 f5 15 	lds	r26, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2860:	b0 91 f6 15 	lds	r27, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2864:	70 68       	ori	r23, 0x80	; 128
    2866:	1e 96       	adiw	r26, 0x0e	; 14
    2868:	4d 93       	st	X+, r20
    286a:	5d 93       	st	X+, r21
    286c:	6d 93       	st	X+, r22
    286e:	7c 93       	st	X, r23
    2870:	51 97       	sbiw	r26, 0x11	; 17
    2872:	a1 81       	ldd	r26, Z+1	; 0x01
    2874:	b2 81       	ldd	r27, Z+2	; 0x02
    2876:	c0 91 f5 15 	lds	r28, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    287a:	d0 91 f6 15 	lds	r29, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    287e:	bb 8b       	std	Y+19, r27	; 0x13
    2880:	aa 8b       	std	Y+18, r26	; 0x12
    2882:	c0 91 f5 15 	lds	r28, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2886:	d0 91 f6 15 	lds	r29, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    288a:	16 96       	adiw	r26, 0x06	; 6
    288c:	8d 91       	ld	r24, X+
    288e:	9c 91       	ld	r25, X
    2890:	17 97       	sbiw	r26, 0x07	; 7
    2892:	9d 8b       	std	Y+21, r25	; 0x15
    2894:	8c 8b       	std	Y+20, r24	; 0x14
    2896:	16 96       	adiw	r26, 0x06	; 6
    2898:	cd 91       	ld	r28, X+
    289a:	dc 91       	ld	r29, X
    289c:	17 97       	sbiw	r26, 0x07	; 7
    289e:	80 91 f5 15 	lds	r24, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    28a2:	90 91 f6 15 	lds	r25, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    28a6:	0e 96       	adiw	r24, 0x0e	; 14
    28a8:	9d 83       	std	Y+5, r25	; 0x05
    28aa:	8c 83       	std	Y+4, r24	; 0x04
    28ac:	80 91 f5 15 	lds	r24, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    28b0:	90 91 f6 15 	lds	r25, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    28b4:	0e 96       	adiw	r24, 0x0e	; 14
    28b6:	17 96       	adiw	r26, 0x07	; 7
    28b8:	9c 93       	st	X, r25
    28ba:	8e 93       	st	-X, r24
    28bc:	16 97       	sbiw	r26, 0x06	; 6
    28be:	a0 91 f5 15 	lds	r26, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    28c2:	b0 91 f6 15 	lds	r27, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    28c6:	59 96       	adiw	r26, 0x19	; 25
    28c8:	fc 93       	st	X, r31
    28ca:	ee 93       	st	-X, r30
    28cc:	58 97       	sbiw	r26, 0x18	; 24
    28ce:	80 81       	ld	r24, Z
    28d0:	8f 5f       	subi	r24, 0xFF	; 255
    28d2:	80 83       	st	Z, r24
    28d4:	41 e0       	ldi	r20, 0x01	; 1
    28d6:	c9 01       	movw	r24, r18
    28d8:	b8 01       	movw	r22, r16
    28da:	7d db       	rcall	.-2310   	; 0x1fd6 <prvAddCurrentTaskToDelayedList>
    28dc:	df 91       	pop	r29
    28de:	cf 91       	pop	r28
    28e0:	1f 91       	pop	r17
    28e2:	0f 91       	pop	r16
    28e4:	08 95       	ret

000028e6 <vTaskPlaceOnEventListRestricted>:
    28e6:	cf 93       	push	r28
    28e8:	df 93       	push	r29
    28ea:	fc 01       	movw	r30, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	ba 01       	movw	r22, r20
    28f0:	a1 81       	ldd	r26, Z+1	; 0x01
    28f2:	b2 81       	ldd	r27, Z+2	; 0x02
    28f4:	c0 91 f5 15 	lds	r28, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    28f8:	d0 91 f6 15 	lds	r29, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    28fc:	bb 8b       	std	Y+19, r27	; 0x13
    28fe:	aa 8b       	std	Y+18, r26	; 0x12
    2900:	c0 91 f5 15 	lds	r28, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2904:	d0 91 f6 15 	lds	r29, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2908:	16 96       	adiw	r26, 0x06	; 6
    290a:	4d 91       	ld	r20, X+
    290c:	5c 91       	ld	r21, X
    290e:	17 97       	sbiw	r26, 0x07	; 7
    2910:	5d 8b       	std	Y+21, r21	; 0x15
    2912:	4c 8b       	std	Y+20, r20	; 0x14
    2914:	16 96       	adiw	r26, 0x06	; 6
    2916:	cd 91       	ld	r28, X+
    2918:	dc 91       	ld	r29, X
    291a:	17 97       	sbiw	r26, 0x07	; 7
    291c:	40 91 f5 15 	lds	r20, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2920:	50 91 f6 15 	lds	r21, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2924:	42 5f       	subi	r20, 0xF2	; 242
    2926:	5f 4f       	sbci	r21, 0xFF	; 255
    2928:	5d 83       	std	Y+5, r21	; 0x05
    292a:	4c 83       	std	Y+4, r20	; 0x04
    292c:	40 91 f5 15 	lds	r20, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2930:	50 91 f6 15 	lds	r21, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2934:	42 5f       	subi	r20, 0xF2	; 242
    2936:	5f 4f       	sbci	r21, 0xFF	; 255
    2938:	17 96       	adiw	r26, 0x07	; 7
    293a:	5c 93       	st	X, r21
    293c:	4e 93       	st	-X, r20
    293e:	16 97       	sbiw	r26, 0x06	; 6
    2940:	a0 91 f5 15 	lds	r26, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2944:	b0 91 f6 15 	lds	r27, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2948:	59 96       	adiw	r26, 0x19	; 25
    294a:	fc 93       	st	X, r31
    294c:	ee 93       	st	-X, r30
    294e:	58 97       	sbiw	r26, 0x18	; 24
    2950:	30 81       	ld	r19, Z
    2952:	3f 5f       	subi	r19, 0xFF	; 255
    2954:	30 83       	st	Z, r19
    2956:	22 23       	and	r18, r18
    2958:	19 f0       	breq	.+6      	; 0x2960 <vTaskPlaceOnEventListRestricted+0x7a>
    295a:	6f ef       	ldi	r22, 0xFF	; 255
    295c:	7f ef       	ldi	r23, 0xFF	; 255
    295e:	cb 01       	movw	r24, r22
    2960:	42 2f       	mov	r20, r18
    2962:	39 db       	rcall	.-2446   	; 0x1fd6 <prvAddCurrentTaskToDelayedList>
    2964:	df 91       	pop	r29
    2966:	cf 91       	pop	r28
    2968:	08 95       	ret

0000296a <xTaskRemoveFromEventList>:
    296a:	cf 93       	push	r28
    296c:	df 93       	push	r29
    296e:	dc 01       	movw	r26, r24
    2970:	17 96       	adiw	r26, 0x07	; 7
    2972:	ed 91       	ld	r30, X+
    2974:	fc 91       	ld	r31, X
    2976:	18 97       	sbiw	r26, 0x08	; 8
    2978:	00 84       	ldd	r0, Z+8	; 0x08
    297a:	f1 85       	ldd	r31, Z+9	; 0x09
    297c:	e0 2d       	mov	r30, r0
    297e:	a0 8d       	ldd	r26, Z+24	; 0x18
    2980:	b1 8d       	ldd	r27, Z+25	; 0x19
    2982:	c2 89       	ldd	r28, Z+18	; 0x12
    2984:	d3 89       	ldd	r29, Z+19	; 0x13
    2986:	84 89       	ldd	r24, Z+20	; 0x14
    2988:	95 89       	ldd	r25, Z+21	; 0x15
    298a:	9f 83       	std	Y+7, r25	; 0x07
    298c:	8e 83       	std	Y+6, r24	; 0x06
    298e:	c4 89       	ldd	r28, Z+20	; 0x14
    2990:	d5 89       	ldd	r29, Z+21	; 0x15
    2992:	82 89       	ldd	r24, Z+18	; 0x12
    2994:	93 89       	ldd	r25, Z+19	; 0x13
    2996:	9d 83       	std	Y+5, r25	; 0x05
    2998:	8c 83       	std	Y+4, r24	; 0x04
    299a:	11 96       	adiw	r26, 0x01	; 1
    299c:	8d 91       	ld	r24, X+
    299e:	9c 91       	ld	r25, X
    29a0:	12 97       	sbiw	r26, 0x02	; 2
    29a2:	9f 01       	movw	r18, r30
    29a4:	22 5f       	subi	r18, 0xF2	; 242
    29a6:	3f 4f       	sbci	r19, 0xFF	; 255
    29a8:	82 17       	cp	r24, r18
    29aa:	93 07       	cpc	r25, r19
    29ac:	31 f4       	brne	.+12     	; 0x29ba <xTaskRemoveFromEventList+0x50>
    29ae:	84 89       	ldd	r24, Z+20	; 0x14
    29b0:	95 89       	ldd	r25, Z+21	; 0x15
    29b2:	12 96       	adiw	r26, 0x02	; 2
    29b4:	9c 93       	st	X, r25
    29b6:	8e 93       	st	-X, r24
    29b8:	11 97       	sbiw	r26, 0x01	; 1
    29ba:	11 8e       	std	Z+25, r1	; 0x19
    29bc:	10 8e       	std	Z+24, r1	; 0x18
    29be:	8c 91       	ld	r24, X
    29c0:	81 50       	subi	r24, 0x01	; 1
    29c2:	8c 93       	st	X, r24
    29c4:	80 91 36 15 	lds	r24, 0x1536	; 0x801536 <uxSchedulerSuspended>
    29c8:	81 11       	cpse	r24, r1
    29ca:	52 c0       	rjmp	.+164    	; 0x2a70 <xTaskRemoveFromEventList+0x106>
    29cc:	a4 85       	ldd	r26, Z+12	; 0x0c
    29ce:	b5 85       	ldd	r27, Z+13	; 0x0d
    29d0:	c6 81       	ldd	r28, Z+6	; 0x06
    29d2:	d7 81       	ldd	r29, Z+7	; 0x07
    29d4:	80 85       	ldd	r24, Z+8	; 0x08
    29d6:	91 85       	ldd	r25, Z+9	; 0x09
    29d8:	9f 83       	std	Y+7, r25	; 0x07
    29da:	8e 83       	std	Y+6, r24	; 0x06
    29dc:	c0 85       	ldd	r28, Z+8	; 0x08
    29de:	d1 85       	ldd	r29, Z+9	; 0x09
    29e0:	86 81       	ldd	r24, Z+6	; 0x06
    29e2:	97 81       	ldd	r25, Z+7	; 0x07
    29e4:	9d 83       	std	Y+5, r25	; 0x05
    29e6:	8c 83       	std	Y+4, r24	; 0x04
    29e8:	11 96       	adiw	r26, 0x01	; 1
    29ea:	8d 91       	ld	r24, X+
    29ec:	9c 91       	ld	r25, X
    29ee:	12 97       	sbiw	r26, 0x02	; 2
    29f0:	9f 01       	movw	r18, r30
    29f2:	2e 5f       	subi	r18, 0xFE	; 254
    29f4:	3f 4f       	sbci	r19, 0xFF	; 255
    29f6:	82 17       	cp	r24, r18
    29f8:	93 07       	cpc	r25, r19
    29fa:	31 f4       	brne	.+12     	; 0x2a08 <xTaskRemoveFromEventList+0x9e>
    29fc:	80 85       	ldd	r24, Z+8	; 0x08
    29fe:	91 85       	ldd	r25, Z+9	; 0x09
    2a00:	12 96       	adiw	r26, 0x02	; 2
    2a02:	9c 93       	st	X, r25
    2a04:	8e 93       	st	-X, r24
    2a06:	11 97       	sbiw	r26, 0x01	; 1
    2a08:	15 86       	std	Z+13, r1	; 0x0d
    2a0a:	14 86       	std	Z+12, r1	; 0x0c
    2a0c:	8c 91       	ld	r24, X
    2a0e:	81 50       	subi	r24, 0x01	; 1
    2a10:	8c 93       	st	X, r24
    2a12:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a14:	80 91 45 15 	lds	r24, 0x1545	; 0x801545 <uxTopReadyPriority>
    2a18:	8a 17       	cp	r24, r26
    2a1a:	10 f4       	brcc	.+4      	; 0x2a20 <xTaskRemoveFromEventList+0xb6>
    2a1c:	a0 93 45 15 	sts	0x1545, r26	; 0x801545 <uxTopReadyPriority>
    2a20:	8b e0       	ldi	r24, 0x0B	; 11
    2a22:	8a 9f       	mul	r24, r26
    2a24:	d0 01       	movw	r26, r0
    2a26:	11 24       	eor	r1, r1
    2a28:	a9 57       	subi	r26, 0x79	; 121
    2a2a:	ba 4e       	sbci	r27, 0xEA	; 234
    2a2c:	11 96       	adiw	r26, 0x01	; 1
    2a2e:	0d 90       	ld	r0, X+
    2a30:	bc 91       	ld	r27, X
    2a32:	a0 2d       	mov	r26, r0
    2a34:	b7 83       	std	Z+7, r27	; 0x07
    2a36:	a6 83       	std	Z+6, r26	; 0x06
    2a38:	16 96       	adiw	r26, 0x06	; 6
    2a3a:	4d 91       	ld	r20, X+
    2a3c:	5c 91       	ld	r21, X
    2a3e:	17 97       	sbiw	r26, 0x07	; 7
    2a40:	51 87       	std	Z+9, r21	; 0x09
    2a42:	40 87       	std	Z+8, r20	; 0x08
    2a44:	16 96       	adiw	r26, 0x06	; 6
    2a46:	cd 91       	ld	r28, X+
    2a48:	dc 91       	ld	r29, X
    2a4a:	17 97       	sbiw	r26, 0x07	; 7
    2a4c:	3d 83       	std	Y+5, r19	; 0x05
    2a4e:	2c 83       	std	Y+4, r18	; 0x04
    2a50:	17 96       	adiw	r26, 0x07	; 7
    2a52:	3c 93       	st	X, r19
    2a54:	2e 93       	st	-X, r18
    2a56:	16 97       	sbiw	r26, 0x06	; 6
    2a58:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a5a:	8a 9f       	mul	r24, r26
    2a5c:	d0 01       	movw	r26, r0
    2a5e:	11 24       	eor	r1, r1
    2a60:	a9 57       	subi	r26, 0x79	; 121
    2a62:	ba 4e       	sbci	r27, 0xEA	; 234
    2a64:	b5 87       	std	Z+13, r27	; 0x0d
    2a66:	a4 87       	std	Z+12, r26	; 0x0c
    2a68:	8c 91       	ld	r24, X
    2a6a:	8f 5f       	subi	r24, 0xFF	; 255
    2a6c:	8c 93       	st	X, r24
    2a6e:	1c c0       	rjmp	.+56     	; 0x2aa8 <xTaskRemoveFromEventList+0x13e>
    2a70:	42 e6       	ldi	r20, 0x62	; 98
    2a72:	55 e1       	ldi	r21, 0x15	; 21
    2a74:	da 01       	movw	r26, r20
    2a76:	11 96       	adiw	r26, 0x01	; 1
    2a78:	cd 91       	ld	r28, X+
    2a7a:	dc 91       	ld	r29, X
    2a7c:	12 97       	sbiw	r26, 0x02	; 2
    2a7e:	d3 8b       	std	Z+19, r29	; 0x13
    2a80:	c2 8b       	std	Z+18, r28	; 0x12
    2a82:	8e 81       	ldd	r24, Y+6	; 0x06
    2a84:	9f 81       	ldd	r25, Y+7	; 0x07
    2a86:	95 8b       	std	Z+21, r25	; 0x15
    2a88:	84 8b       	std	Z+20, r24	; 0x14
    2a8a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a8c:	9f 81       	ldd	r25, Y+7	; 0x07
    2a8e:	dc 01       	movw	r26, r24
    2a90:	15 96       	adiw	r26, 0x05	; 5
    2a92:	3c 93       	st	X, r19
    2a94:	2e 93       	st	-X, r18
    2a96:	14 97       	sbiw	r26, 0x04	; 4
    2a98:	3f 83       	std	Y+7, r19	; 0x07
    2a9a:	2e 83       	std	Y+6, r18	; 0x06
    2a9c:	51 8f       	std	Z+25, r21	; 0x19
    2a9e:	40 8f       	std	Z+24, r20	; 0x18
    2aa0:	da 01       	movw	r26, r20
    2aa2:	8c 91       	ld	r24, X
    2aa4:	8f 5f       	subi	r24, 0xFF	; 255
    2aa6:	8c 93       	st	X, r24
    2aa8:	92 8d       	ldd	r25, Z+26	; 0x1a
    2aaa:	e0 91 f5 15 	lds	r30, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2aae:	f0 91 f6 15 	lds	r31, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2ab2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ab4:	89 17       	cp	r24, r25
    2ab6:	20 f4       	brcc	.+8      	; 0x2ac0 <xTaskRemoveFromEventList+0x156>
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	80 93 3f 15 	sts	0x153F, r24	; 0x80153f <xYieldPending>
    2abe:	01 c0       	rjmp	.+2      	; 0x2ac2 <xTaskRemoveFromEventList+0x158>
    2ac0:	80 e0       	ldi	r24, 0x00	; 0
    2ac2:	df 91       	pop	r29
    2ac4:	cf 91       	pop	r28
    2ac6:	08 95       	ret

00002ac8 <vTaskRemoveFromUnorderedEventList>:
    2ac8:	cf 93       	push	r28
    2aca:	df 93       	push	r29
    2acc:	dc 01       	movw	r26, r24
    2ace:	70 68       	ori	r23, 0x80	; 128
    2ad0:	4d 93       	st	X+, r20
    2ad2:	5d 93       	st	X+, r21
    2ad4:	6d 93       	st	X+, r22
    2ad6:	7c 93       	st	X, r23
    2ad8:	13 97       	sbiw	r26, 0x03	; 3
    2ada:	18 96       	adiw	r26, 0x08	; 8
    2adc:	ed 91       	ld	r30, X+
    2ade:	fc 91       	ld	r31, X
    2ae0:	19 97       	sbiw	r26, 0x09	; 9
    2ae2:	1a 96       	adiw	r26, 0x0a	; 10
    2ae4:	4d 91       	ld	r20, X+
    2ae6:	5c 91       	ld	r21, X
    2ae8:	1b 97       	sbiw	r26, 0x0b	; 11
    2aea:	14 96       	adiw	r26, 0x04	; 4
    2aec:	8d 91       	ld	r24, X+
    2aee:	9c 91       	ld	r25, X
    2af0:	15 97       	sbiw	r26, 0x05	; 5
    2af2:	16 96       	adiw	r26, 0x06	; 6
    2af4:	2d 91       	ld	r18, X+
    2af6:	3c 91       	ld	r19, X
    2af8:	17 97       	sbiw	r26, 0x07	; 7
    2afa:	ec 01       	movw	r28, r24
    2afc:	3f 83       	std	Y+7, r19	; 0x07
    2afe:	2e 83       	std	Y+6, r18	; 0x06
    2b00:	16 96       	adiw	r26, 0x06	; 6
    2b02:	8d 91       	ld	r24, X+
    2b04:	9c 91       	ld	r25, X
    2b06:	17 97       	sbiw	r26, 0x07	; 7
    2b08:	14 96       	adiw	r26, 0x04	; 4
    2b0a:	2d 91       	ld	r18, X+
    2b0c:	3c 91       	ld	r19, X
    2b0e:	15 97       	sbiw	r26, 0x05	; 5
    2b10:	ec 01       	movw	r28, r24
    2b12:	3d 83       	std	Y+5, r19	; 0x05
    2b14:	2c 83       	std	Y+4, r18	; 0x04
    2b16:	ea 01       	movw	r28, r20
    2b18:	89 81       	ldd	r24, Y+1	; 0x01
    2b1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1c:	a8 17       	cp	r26, r24
    2b1e:	b9 07       	cpc	r27, r25
    2b20:	31 f4       	brne	.+12     	; 0x2b2e <vTaskRemoveFromUnorderedEventList+0x66>
    2b22:	16 96       	adiw	r26, 0x06	; 6
    2b24:	8d 91       	ld	r24, X+
    2b26:	9c 91       	ld	r25, X
    2b28:	17 97       	sbiw	r26, 0x07	; 7
    2b2a:	9a 83       	std	Y+2, r25	; 0x02
    2b2c:	89 83       	std	Y+1, r24	; 0x01
    2b2e:	1b 96       	adiw	r26, 0x0b	; 11
    2b30:	1c 92       	st	X, r1
    2b32:	1e 92       	st	-X, r1
    2b34:	1a 97       	sbiw	r26, 0x0a	; 10
    2b36:	da 01       	movw	r26, r20
    2b38:	8c 91       	ld	r24, X
    2b3a:	81 50       	subi	r24, 0x01	; 1
    2b3c:	8c 93       	st	X, r24
    2b3e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2b40:	b5 85       	ldd	r27, Z+13	; 0x0d
    2b42:	c6 81       	ldd	r28, Z+6	; 0x06
    2b44:	d7 81       	ldd	r29, Z+7	; 0x07
    2b46:	80 85       	ldd	r24, Z+8	; 0x08
    2b48:	91 85       	ldd	r25, Z+9	; 0x09
    2b4a:	9f 83       	std	Y+7, r25	; 0x07
    2b4c:	8e 83       	std	Y+6, r24	; 0x06
    2b4e:	c0 85       	ldd	r28, Z+8	; 0x08
    2b50:	d1 85       	ldd	r29, Z+9	; 0x09
    2b52:	86 81       	ldd	r24, Z+6	; 0x06
    2b54:	97 81       	ldd	r25, Z+7	; 0x07
    2b56:	9d 83       	std	Y+5, r25	; 0x05
    2b58:	8c 83       	std	Y+4, r24	; 0x04
    2b5a:	11 96       	adiw	r26, 0x01	; 1
    2b5c:	8d 91       	ld	r24, X+
    2b5e:	9c 91       	ld	r25, X
    2b60:	12 97       	sbiw	r26, 0x02	; 2
    2b62:	9f 01       	movw	r18, r30
    2b64:	2e 5f       	subi	r18, 0xFE	; 254
    2b66:	3f 4f       	sbci	r19, 0xFF	; 255
    2b68:	82 17       	cp	r24, r18
    2b6a:	93 07       	cpc	r25, r19
    2b6c:	31 f4       	brne	.+12     	; 0x2b7a <vTaskRemoveFromUnorderedEventList+0xb2>
    2b6e:	80 85       	ldd	r24, Z+8	; 0x08
    2b70:	91 85       	ldd	r25, Z+9	; 0x09
    2b72:	12 96       	adiw	r26, 0x02	; 2
    2b74:	9c 93       	st	X, r25
    2b76:	8e 93       	st	-X, r24
    2b78:	11 97       	sbiw	r26, 0x01	; 1
    2b7a:	15 86       	std	Z+13, r1	; 0x0d
    2b7c:	14 86       	std	Z+12, r1	; 0x0c
    2b7e:	8c 91       	ld	r24, X
    2b80:	81 50       	subi	r24, 0x01	; 1
    2b82:	8c 93       	st	X, r24
    2b84:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2b86:	80 91 45 15 	lds	r24, 0x1545	; 0x801545 <uxTopReadyPriority>
    2b8a:	8a 17       	cp	r24, r26
    2b8c:	10 f4       	brcc	.+4      	; 0x2b92 <vTaskRemoveFromUnorderedEventList+0xca>
    2b8e:	a0 93 45 15 	sts	0x1545, r26	; 0x801545 <uxTopReadyPriority>
    2b92:	8b e0       	ldi	r24, 0x0B	; 11
    2b94:	8a 9f       	mul	r24, r26
    2b96:	d0 01       	movw	r26, r0
    2b98:	11 24       	eor	r1, r1
    2b9a:	a9 57       	subi	r26, 0x79	; 121
    2b9c:	ba 4e       	sbci	r27, 0xEA	; 234
    2b9e:	11 96       	adiw	r26, 0x01	; 1
    2ba0:	0d 90       	ld	r0, X+
    2ba2:	bc 91       	ld	r27, X
    2ba4:	a0 2d       	mov	r26, r0
    2ba6:	b7 83       	std	Z+7, r27	; 0x07
    2ba8:	a6 83       	std	Z+6, r26	; 0x06
    2baa:	16 96       	adiw	r26, 0x06	; 6
    2bac:	4d 91       	ld	r20, X+
    2bae:	5c 91       	ld	r21, X
    2bb0:	17 97       	sbiw	r26, 0x07	; 7
    2bb2:	51 87       	std	Z+9, r21	; 0x09
    2bb4:	40 87       	std	Z+8, r20	; 0x08
    2bb6:	16 96       	adiw	r26, 0x06	; 6
    2bb8:	cd 91       	ld	r28, X+
    2bba:	dc 91       	ld	r29, X
    2bbc:	17 97       	sbiw	r26, 0x07	; 7
    2bbe:	3d 83       	std	Y+5, r19	; 0x05
    2bc0:	2c 83       	std	Y+4, r18	; 0x04
    2bc2:	17 96       	adiw	r26, 0x07	; 7
    2bc4:	3c 93       	st	X, r19
    2bc6:	2e 93       	st	-X, r18
    2bc8:	16 97       	sbiw	r26, 0x06	; 6
    2bca:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2bcc:	8a 9f       	mul	r24, r26
    2bce:	d0 01       	movw	r26, r0
    2bd0:	11 24       	eor	r1, r1
    2bd2:	a9 57       	subi	r26, 0x79	; 121
    2bd4:	ba 4e       	sbci	r27, 0xEA	; 234
    2bd6:	b5 87       	std	Z+13, r27	; 0x0d
    2bd8:	a4 87       	std	Z+12, r26	; 0x0c
    2bda:	8c 91       	ld	r24, X
    2bdc:	8f 5f       	subi	r24, 0xFF	; 255
    2bde:	8c 93       	st	X, r24
    2be0:	92 8d       	ldd	r25, Z+26	; 0x1a
    2be2:	e0 91 f5 15 	lds	r30, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2be6:	f0 91 f6 15 	lds	r31, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2bea:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bec:	89 17       	cp	r24, r25
    2bee:	18 f4       	brcc	.+6      	; 0x2bf6 <vTaskRemoveFromUnorderedEventList+0x12e>
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	80 93 3f 15 	sts	0x153F, r24	; 0x80153f <xYieldPending>
    2bf6:	df 91       	pop	r29
    2bf8:	cf 91       	pop	r28
    2bfa:	08 95       	ret

00002bfc <vTaskSetTimeOutState>:
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	f8 94       	cli
    2c00:	0f 92       	push	r0
    2c02:	20 91 3e 15 	lds	r18, 0x153E	; 0x80153e <xNumOfOverflows>
    2c06:	fc 01       	movw	r30, r24
    2c08:	20 83       	st	Z, r18
    2c0a:	40 91 46 15 	lds	r20, 0x1546	; 0x801546 <xTickCount>
    2c0e:	50 91 47 15 	lds	r21, 0x1547	; 0x801547 <xTickCount+0x1>
    2c12:	60 91 48 15 	lds	r22, 0x1548	; 0x801548 <xTickCount+0x2>
    2c16:	70 91 49 15 	lds	r23, 0x1549	; 0x801549 <xTickCount+0x3>
    2c1a:	41 83       	std	Z+1, r20	; 0x01
    2c1c:	52 83       	std	Z+2, r21	; 0x02
    2c1e:	63 83       	std	Z+3, r22	; 0x03
    2c20:	74 83       	std	Z+4, r23	; 0x04
    2c22:	0f 90       	pop	r0
    2c24:	0f be       	out	0x3f, r0	; 63
    2c26:	08 95       	ret

00002c28 <vTaskInternalSetTimeOutState>:
    2c28:	20 91 3e 15 	lds	r18, 0x153E	; 0x80153e <xNumOfOverflows>
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	20 83       	st	Z, r18
    2c30:	40 91 46 15 	lds	r20, 0x1546	; 0x801546 <xTickCount>
    2c34:	50 91 47 15 	lds	r21, 0x1547	; 0x801547 <xTickCount+0x1>
    2c38:	60 91 48 15 	lds	r22, 0x1548	; 0x801548 <xTickCount+0x2>
    2c3c:	70 91 49 15 	lds	r23, 0x1549	; 0x801549 <xTickCount+0x3>
    2c40:	41 83       	std	Z+1, r20	; 0x01
    2c42:	52 83       	std	Z+2, r21	; 0x02
    2c44:	63 83       	std	Z+3, r22	; 0x03
    2c46:	74 83       	std	Z+4, r23	; 0x04
    2c48:	08 95       	ret

00002c4a <xTaskCheckForTimeOut>:
    2c4a:	8f 92       	push	r8
    2c4c:	9f 92       	push	r9
    2c4e:	af 92       	push	r10
    2c50:	bf 92       	push	r11
    2c52:	cf 92       	push	r12
    2c54:	df 92       	push	r13
    2c56:	ef 92       	push	r14
    2c58:	ff 92       	push	r15
    2c5a:	0f 93       	push	r16
    2c5c:	1f 93       	push	r17
    2c5e:	cf 93       	push	r28
    2c60:	df 93       	push	r29
    2c62:	fb 01       	movw	r30, r22
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	0f 92       	push	r0
    2c6a:	c0 90 46 15 	lds	r12, 0x1546	; 0x801546 <xTickCount>
    2c6e:	d0 90 47 15 	lds	r13, 0x1547	; 0x801547 <xTickCount+0x1>
    2c72:	e0 90 48 15 	lds	r14, 0x1548	; 0x801548 <xTickCount+0x2>
    2c76:	f0 90 49 15 	lds	r15, 0x1549	; 0x801549 <xTickCount+0x3>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	11 96       	adiw	r26, 0x01	; 1
    2c7e:	0d 91       	ld	r16, X+
    2c80:	1d 91       	ld	r17, X+
    2c82:	2d 91       	ld	r18, X+
    2c84:	3c 91       	ld	r19, X
    2c86:	14 97       	sbiw	r26, 0x04	; 4
    2c88:	46 01       	movw	r8, r12
    2c8a:	57 01       	movw	r10, r14
    2c8c:	80 1a       	sub	r8, r16
    2c8e:	91 0a       	sbc	r9, r17
    2c90:	a2 0a       	sbc	r10, r18
    2c92:	b3 0a       	sbc	r11, r19
    2c94:	40 81       	ld	r20, Z
    2c96:	51 81       	ldd	r21, Z+1	; 0x01
    2c98:	62 81       	ldd	r22, Z+2	; 0x02
    2c9a:	73 81       	ldd	r23, Z+3	; 0x03
    2c9c:	4f 3f       	cpi	r20, 0xFF	; 255
    2c9e:	bf ef       	ldi	r27, 0xFF	; 255
    2ca0:	5b 07       	cpc	r21, r27
    2ca2:	6b 07       	cpc	r22, r27
    2ca4:	7b 07       	cpc	r23, r27
    2ca6:	39 f1       	breq	.+78     	; 0x2cf6 <xTaskCheckForTimeOut+0xac>
    2ca8:	ec 01       	movw	r28, r24
    2caa:	b8 81       	ld	r27, Y
    2cac:	a0 91 3e 15 	lds	r26, 0x153E	; 0x80153e <xNumOfOverflows>
    2cb0:	ba 17       	cp	r27, r26
    2cb2:	59 f0       	breq	.+22     	; 0x2cca <xTaskCheckForTimeOut+0x80>
    2cb4:	c0 16       	cp	r12, r16
    2cb6:	d1 06       	cpc	r13, r17
    2cb8:	e2 06       	cpc	r14, r18
    2cba:	f3 06       	cpc	r15, r19
    2cbc:	30 f0       	brcs	.+12     	; 0x2cca <xTaskCheckForTimeOut+0x80>
    2cbe:	10 82       	st	Z, r1
    2cc0:	11 82       	std	Z+1, r1	; 0x01
    2cc2:	12 82       	std	Z+2, r1	; 0x02
    2cc4:	13 82       	std	Z+3, r1	; 0x03
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	17 c0       	rjmp	.+46     	; 0x2cf8 <xTaskCheckForTimeOut+0xae>
    2cca:	84 16       	cp	r8, r20
    2ccc:	95 06       	cpc	r9, r21
    2cce:	a6 06       	cpc	r10, r22
    2cd0:	b7 06       	cpc	r11, r23
    2cd2:	58 f4       	brcc	.+22     	; 0x2cea <xTaskCheckForTimeOut+0xa0>
    2cd4:	48 19       	sub	r20, r8
    2cd6:	59 09       	sbc	r21, r9
    2cd8:	6a 09       	sbc	r22, r10
    2cda:	7b 09       	sbc	r23, r11
    2cdc:	40 83       	st	Z, r20
    2cde:	51 83       	std	Z+1, r21	; 0x01
    2ce0:	62 83       	std	Z+2, r22	; 0x02
    2ce2:	73 83       	std	Z+3, r23	; 0x03
    2ce4:	a1 df       	rcall	.-190    	; 0x2c28 <vTaskInternalSetTimeOutState>
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
    2ce8:	07 c0       	rjmp	.+14     	; 0x2cf8 <xTaskCheckForTimeOut+0xae>
    2cea:	10 82       	st	Z, r1
    2cec:	11 82       	std	Z+1, r1	; 0x01
    2cee:	12 82       	std	Z+2, r1	; 0x02
    2cf0:	13 82       	std	Z+3, r1	; 0x03
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	01 c0       	rjmp	.+2      	; 0x2cf8 <xTaskCheckForTimeOut+0xae>
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	0f 90       	pop	r0
    2cfa:	0f be       	out	0x3f, r0	; 63
    2cfc:	df 91       	pop	r29
    2cfe:	cf 91       	pop	r28
    2d00:	1f 91       	pop	r17
    2d02:	0f 91       	pop	r16
    2d04:	ff 90       	pop	r15
    2d06:	ef 90       	pop	r14
    2d08:	df 90       	pop	r13
    2d0a:	cf 90       	pop	r12
    2d0c:	bf 90       	pop	r11
    2d0e:	af 90       	pop	r10
    2d10:	9f 90       	pop	r9
    2d12:	8f 90       	pop	r8
    2d14:	08 95       	ret

00002d16 <vTaskMissedYield>:
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	80 93 3f 15 	sts	0x153F, r24	; 0x80153f <xYieldPending>
    2d1c:	08 95       	ret

00002d1e <xTaskGetCurrentTaskHandle>:
    2d1e:	80 91 f5 15 	lds	r24, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2d22:	90 91 f6 15 	lds	r25, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2d26:	08 95       	ret

00002d28 <xTaskGetSchedulerState>:
    2d28:	80 91 44 15 	lds	r24, 0x1544	; 0x801544 <xSchedulerRunning>
    2d2c:	88 23       	and	r24, r24
    2d2e:	31 f0       	breq	.+12     	; 0x2d3c <xTaskGetSchedulerState+0x14>
    2d30:	80 91 36 15 	lds	r24, 0x1536	; 0x801536 <uxSchedulerSuspended>
    2d34:	81 11       	cpse	r24, r1
    2d36:	04 c0       	rjmp	.+8      	; 0x2d40 <xTaskGetSchedulerState+0x18>
    2d38:	82 e0       	ldi	r24, 0x02	; 2
    2d3a:	08 95       	ret
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	08 95       	ret
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	08 95       	ret

00002d44 <xTaskPriorityInherit>:
    2d44:	0f 93       	push	r16
    2d46:	1f 93       	push	r17
    2d48:	cf 93       	push	r28
    2d4a:	df 93       	push	r29
    2d4c:	fc 01       	movw	r30, r24
    2d4e:	89 2b       	or	r24, r25
    2d50:	09 f4       	brne	.+2      	; 0x2d54 <xTaskPriorityInherit+0x10>
    2d52:	77 c0       	rjmp	.+238    	; 0x2e42 <xTaskPriorityInherit+0xfe>
    2d54:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d56:	a0 91 f5 15 	lds	r26, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2d5a:	b0 91 f6 15 	lds	r27, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2d5e:	5a 96       	adiw	r26, 0x1a	; 26
    2d60:	9c 91       	ld	r25, X
    2d62:	89 17       	cp	r24, r25
    2d64:	08 f0       	brcs	.+2      	; 0x2d68 <xTaskPriorityInherit+0x24>
    2d66:	63 c0       	rjmp	.+198    	; 0x2e2e <xTaskPriorityInherit+0xea>
    2d68:	46 85       	ldd	r20, Z+14	; 0x0e
    2d6a:	57 85       	ldd	r21, Z+15	; 0x0f
    2d6c:	60 89       	ldd	r22, Z+16	; 0x10
    2d6e:	71 89       	ldd	r23, Z+17	; 0x11
    2d70:	77 23       	and	r23, r23
    2d72:	94 f0       	brlt	.+36     	; 0x2d98 <xTaskPriorityInherit+0x54>
    2d74:	a0 91 f5 15 	lds	r26, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2d78:	b0 91 f6 15 	lds	r27, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2d7c:	5a 96       	adiw	r26, 0x1a	; 26
    2d7e:	9c 91       	ld	r25, X
    2d80:	4a e0       	ldi	r20, 0x0A	; 10
    2d82:	50 e0       	ldi	r21, 0x00	; 0
    2d84:	60 e0       	ldi	r22, 0x00	; 0
    2d86:	70 e0       	ldi	r23, 0x00	; 0
    2d88:	49 1b       	sub	r20, r25
    2d8a:	51 09       	sbc	r21, r1
    2d8c:	61 09       	sbc	r22, r1
    2d8e:	71 09       	sbc	r23, r1
    2d90:	46 87       	std	Z+14, r20	; 0x0e
    2d92:	57 87       	std	Z+15, r21	; 0x0f
    2d94:	60 8b       	std	Z+16, r22	; 0x10
    2d96:	71 8b       	std	Z+17, r23	; 0x11
    2d98:	24 85       	ldd	r18, Z+12	; 0x0c
    2d9a:	35 85       	ldd	r19, Z+13	; 0x0d
    2d9c:	4b e0       	ldi	r20, 0x0B	; 11
    2d9e:	84 9f       	mul	r24, r20
    2da0:	c0 01       	movw	r24, r0
    2da2:	11 24       	eor	r1, r1
    2da4:	89 57       	subi	r24, 0x79	; 121
    2da6:	9a 4e       	sbci	r25, 0xEA	; 234
    2da8:	28 17       	cp	r18, r24
    2daa:	39 07       	cpc	r19, r25
    2dac:	b9 f5       	brne	.+110    	; 0x2e1c <xTaskPriorityInherit+0xd8>
    2dae:	ef 01       	movw	r28, r30
    2db0:	8f 01       	movw	r16, r30
    2db2:	0e 5f       	subi	r16, 0xFE	; 254
    2db4:	1f 4f       	sbci	r17, 0xFF	; 255
    2db6:	c8 01       	movw	r24, r16
    2db8:	0e 94 69 06 	call	0xcd2	; 0xcd2 <uxListRemove>
    2dbc:	e0 91 f5 15 	lds	r30, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2dc0:	f0 91 f6 15 	lds	r31, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2dc4:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2dc6:	ea 8f       	std	Y+26, r30	; 0x1a
    2dc8:	80 91 45 15 	lds	r24, 0x1545	; 0x801545 <uxTopReadyPriority>
    2dcc:	8e 17       	cp	r24, r30
    2dce:	10 f4       	brcc	.+4      	; 0x2dd4 <xTaskPriorityInherit+0x90>
    2dd0:	e0 93 45 15 	sts	0x1545, r30	; 0x801545 <uxTopReadyPriority>
    2dd4:	8b e0       	ldi	r24, 0x0B	; 11
    2dd6:	8e 9f       	mul	r24, r30
    2dd8:	f0 01       	movw	r30, r0
    2dda:	11 24       	eor	r1, r1
    2ddc:	e9 57       	subi	r30, 0x79	; 121
    2dde:	fa 4e       	sbci	r31, 0xEA	; 234
    2de0:	01 80       	ldd	r0, Z+1	; 0x01
    2de2:	f2 81       	ldd	r31, Z+2	; 0x02
    2de4:	e0 2d       	mov	r30, r0
    2de6:	ff 83       	std	Y+7, r31	; 0x07
    2de8:	ee 83       	std	Y+6, r30	; 0x06
    2dea:	26 81       	ldd	r18, Z+6	; 0x06
    2dec:	37 81       	ldd	r19, Z+7	; 0x07
    2dee:	39 87       	std	Y+9, r19	; 0x09
    2df0:	28 87       	std	Y+8, r18	; 0x08
    2df2:	a6 81       	ldd	r26, Z+6	; 0x06
    2df4:	b7 81       	ldd	r27, Z+7	; 0x07
    2df6:	15 96       	adiw	r26, 0x05	; 5
    2df8:	1c 93       	st	X, r17
    2dfa:	0e 93       	st	-X, r16
    2dfc:	14 97       	sbiw	r26, 0x04	; 4
    2dfe:	17 83       	std	Z+7, r17	; 0x07
    2e00:	06 83       	std	Z+6, r16	; 0x06
    2e02:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2e04:	8e 9f       	mul	r24, r30
    2e06:	f0 01       	movw	r30, r0
    2e08:	11 24       	eor	r1, r1
    2e0a:	e9 57       	subi	r30, 0x79	; 121
    2e0c:	fa 4e       	sbci	r31, 0xEA	; 234
    2e0e:	fd 87       	std	Y+13, r31	; 0x0d
    2e10:	ec 87       	std	Y+12, r30	; 0x0c
    2e12:	80 81       	ld	r24, Z
    2e14:	8f 5f       	subi	r24, 0xFF	; 255
    2e16:	80 83       	st	Z, r24
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	16 c0       	rjmp	.+44     	; 0x2e48 <xTaskPriorityInherit+0x104>
    2e1c:	a0 91 f5 15 	lds	r26, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2e20:	b0 91 f6 15 	lds	r27, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2e24:	5a 96       	adiw	r26, 0x1a	; 26
    2e26:	8c 91       	ld	r24, X
    2e28:	82 8f       	std	Z+26, r24	; 0x1a
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	0d c0       	rjmp	.+26     	; 0x2e48 <xTaskPriorityInherit+0x104>
    2e2e:	95 a5       	ldd	r25, Z+45	; 0x2d
    2e30:	e0 91 f5 15 	lds	r30, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2e34:	f0 91 f6 15 	lds	r31, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2e38:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e3a:	98 17       	cp	r25, r24
    2e3c:	20 f0       	brcs	.+8      	; 0x2e46 <xTaskPriorityInherit+0x102>
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	03 c0       	rjmp	.+6      	; 0x2e48 <xTaskPriorityInherit+0x104>
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	01 c0       	rjmp	.+2      	; 0x2e48 <xTaskPriorityInherit+0x104>
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	df 91       	pop	r29
    2e4a:	cf 91       	pop	r28
    2e4c:	1f 91       	pop	r17
    2e4e:	0f 91       	pop	r16
    2e50:	08 95       	ret

00002e52 <xTaskPriorityDisinherit>:
    2e52:	0f 93       	push	r16
    2e54:	1f 93       	push	r17
    2e56:	cf 93       	push	r28
    2e58:	df 93       	push	r29
    2e5a:	fc 01       	movw	r30, r24
    2e5c:	89 2b       	or	r24, r25
    2e5e:	09 f4       	brne	.+2      	; 0x2e62 <xTaskPriorityDisinherit+0x10>
    2e60:	49 c0       	rjmp	.+146    	; 0x2ef4 <xTaskPriorityDisinherit+0xa2>
    2e62:	86 a5       	ldd	r24, Z+46	; 0x2e
    2e64:	81 50       	subi	r24, 0x01	; 1
    2e66:	86 a7       	std	Z+46, r24	; 0x2e
    2e68:	22 8d       	ldd	r18, Z+26	; 0x1a
    2e6a:	95 a5       	ldd	r25, Z+45	; 0x2d
    2e6c:	29 17       	cp	r18, r25
    2e6e:	09 f4       	brne	.+2      	; 0x2e72 <xTaskPriorityDisinherit+0x20>
    2e70:	43 c0       	rjmp	.+134    	; 0x2ef8 <xTaskPriorityDisinherit+0xa6>
    2e72:	81 11       	cpse	r24, r1
    2e74:	43 c0       	rjmp	.+134    	; 0x2efc <xTaskPriorityDisinherit+0xaa>
    2e76:	ef 01       	movw	r28, r30
    2e78:	8f 01       	movw	r16, r30
    2e7a:	0e 5f       	subi	r16, 0xFE	; 254
    2e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e7e:	c8 01       	movw	r24, r16
    2e80:	0e 94 69 06 	call	0xcd2	; 0xcd2 <uxListRemove>
    2e84:	ed a5       	ldd	r30, Y+45	; 0x2d
    2e86:	ea 8f       	std	Y+26, r30	; 0x1a
    2e88:	8a e0       	ldi	r24, 0x0A	; 10
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	a0 e0       	ldi	r26, 0x00	; 0
    2e8e:	b0 e0       	ldi	r27, 0x00	; 0
    2e90:	8e 1b       	sub	r24, r30
    2e92:	91 09       	sbc	r25, r1
    2e94:	a1 09       	sbc	r26, r1
    2e96:	b1 09       	sbc	r27, r1
    2e98:	8e 87       	std	Y+14, r24	; 0x0e
    2e9a:	9f 87       	std	Y+15, r25	; 0x0f
    2e9c:	a8 8b       	std	Y+16, r26	; 0x10
    2e9e:	b9 8b       	std	Y+17, r27	; 0x11
    2ea0:	80 91 45 15 	lds	r24, 0x1545	; 0x801545 <uxTopReadyPriority>
    2ea4:	8e 17       	cp	r24, r30
    2ea6:	10 f4       	brcc	.+4      	; 0x2eac <xTaskPriorityDisinherit+0x5a>
    2ea8:	e0 93 45 15 	sts	0x1545, r30	; 0x801545 <uxTopReadyPriority>
    2eac:	8b e0       	ldi	r24, 0x0B	; 11
    2eae:	8e 9f       	mul	r24, r30
    2eb0:	f0 01       	movw	r30, r0
    2eb2:	11 24       	eor	r1, r1
    2eb4:	e9 57       	subi	r30, 0x79	; 121
    2eb6:	fa 4e       	sbci	r31, 0xEA	; 234
    2eb8:	01 80       	ldd	r0, Z+1	; 0x01
    2eba:	f2 81       	ldd	r31, Z+2	; 0x02
    2ebc:	e0 2d       	mov	r30, r0
    2ebe:	ff 83       	std	Y+7, r31	; 0x07
    2ec0:	ee 83       	std	Y+6, r30	; 0x06
    2ec2:	26 81       	ldd	r18, Z+6	; 0x06
    2ec4:	37 81       	ldd	r19, Z+7	; 0x07
    2ec6:	39 87       	std	Y+9, r19	; 0x09
    2ec8:	28 87       	std	Y+8, r18	; 0x08
    2eca:	a6 81       	ldd	r26, Z+6	; 0x06
    2ecc:	b7 81       	ldd	r27, Z+7	; 0x07
    2ece:	15 96       	adiw	r26, 0x05	; 5
    2ed0:	1c 93       	st	X, r17
    2ed2:	0e 93       	st	-X, r16
    2ed4:	14 97       	sbiw	r26, 0x04	; 4
    2ed6:	17 83       	std	Z+7, r17	; 0x07
    2ed8:	06 83       	std	Z+6, r16	; 0x06
    2eda:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2edc:	8e 9f       	mul	r24, r30
    2ede:	f0 01       	movw	r30, r0
    2ee0:	11 24       	eor	r1, r1
    2ee2:	e9 57       	subi	r30, 0x79	; 121
    2ee4:	fa 4e       	sbci	r31, 0xEA	; 234
    2ee6:	fd 87       	std	Y+13, r31	; 0x0d
    2ee8:	ec 87       	std	Y+12, r30	; 0x0c
    2eea:	80 81       	ld	r24, Z
    2eec:	8f 5f       	subi	r24, 0xFF	; 255
    2eee:	80 83       	st	Z, r24
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	05 c0       	rjmp	.+10     	; 0x2efe <xTaskPriorityDisinherit+0xac>
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    2ef6:	03 c0       	rjmp	.+6      	; 0x2efe <xTaskPriorityDisinherit+0xac>
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	01 c0       	rjmp	.+2      	; 0x2efe <xTaskPriorityDisinherit+0xac>
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	df 91       	pop	r29
    2f00:	cf 91       	pop	r28
    2f02:	1f 91       	pop	r17
    2f04:	0f 91       	pop	r16
    2f06:	08 95       	ret

00002f08 <vTaskPriorityDisinheritAfterTimeout>:
    2f08:	0f 93       	push	r16
    2f0a:	1f 93       	push	r17
    2f0c:	cf 93       	push	r28
    2f0e:	df 93       	push	r29
    2f10:	fc 01       	movw	r30, r24
    2f12:	89 2b       	or	r24, r25
    2f14:	09 f4       	brne	.+2      	; 0x2f18 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2f16:	5a c0       	rjmp	.+180    	; 0x2fcc <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2f18:	85 a5       	ldd	r24, Z+45	; 0x2d
    2f1a:	86 17       	cp	r24, r22
    2f1c:	08 f4       	brcc	.+2      	; 0x2f20 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2f1e:	86 2f       	mov	r24, r22
    2f20:	92 8d       	ldd	r25, Z+26	; 0x1a
    2f22:	89 17       	cp	r24, r25
    2f24:	09 f4       	brne	.+2      	; 0x2f28 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2f26:	52 c0       	rjmp	.+164    	; 0x2fcc <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2f28:	26 a5       	ldd	r18, Z+46	; 0x2e
    2f2a:	21 30       	cpi	r18, 0x01	; 1
    2f2c:	09 f0       	breq	.+2      	; 0x2f30 <vTaskPriorityDisinheritAfterTimeout+0x28>
    2f2e:	4e c0       	rjmp	.+156    	; 0x2fcc <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2f30:	82 8f       	std	Z+26, r24	; 0x1a
    2f32:	46 85       	ldd	r20, Z+14	; 0x0e
    2f34:	57 85       	ldd	r21, Z+15	; 0x0f
    2f36:	60 89       	ldd	r22, Z+16	; 0x10
    2f38:	71 89       	ldd	r23, Z+17	; 0x11
    2f3a:	77 23       	and	r23, r23
    2f3c:	64 f0       	brlt	.+24     	; 0x2f56 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2f3e:	4a e0       	ldi	r20, 0x0A	; 10
    2f40:	50 e0       	ldi	r21, 0x00	; 0
    2f42:	60 e0       	ldi	r22, 0x00	; 0
    2f44:	70 e0       	ldi	r23, 0x00	; 0
    2f46:	48 1b       	sub	r20, r24
    2f48:	51 09       	sbc	r21, r1
    2f4a:	61 09       	sbc	r22, r1
    2f4c:	71 09       	sbc	r23, r1
    2f4e:	46 87       	std	Z+14, r20	; 0x0e
    2f50:	57 87       	std	Z+15, r21	; 0x0f
    2f52:	60 8b       	std	Z+16, r22	; 0x10
    2f54:	71 8b       	std	Z+17, r23	; 0x11
    2f56:	24 85       	ldd	r18, Z+12	; 0x0c
    2f58:	35 85       	ldd	r19, Z+13	; 0x0d
    2f5a:	4b e0       	ldi	r20, 0x0B	; 11
    2f5c:	94 9f       	mul	r25, r20
    2f5e:	c0 01       	movw	r24, r0
    2f60:	11 24       	eor	r1, r1
    2f62:	89 57       	subi	r24, 0x79	; 121
    2f64:	9a 4e       	sbci	r25, 0xEA	; 234
    2f66:	28 17       	cp	r18, r24
    2f68:	39 07       	cpc	r19, r25
    2f6a:	81 f5       	brne	.+96     	; 0x2fcc <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2f6c:	ef 01       	movw	r28, r30
    2f6e:	8f 01       	movw	r16, r30
    2f70:	0e 5f       	subi	r16, 0xFE	; 254
    2f72:	1f 4f       	sbci	r17, 0xFF	; 255
    2f74:	c8 01       	movw	r24, r16
    2f76:	0e 94 69 06 	call	0xcd2	; 0xcd2 <uxListRemove>
    2f7a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2f7c:	80 91 45 15 	lds	r24, 0x1545	; 0x801545 <uxTopReadyPriority>
    2f80:	8e 17       	cp	r24, r30
    2f82:	10 f4       	brcc	.+4      	; 0x2f88 <vTaskPriorityDisinheritAfterTimeout+0x80>
    2f84:	e0 93 45 15 	sts	0x1545, r30	; 0x801545 <uxTopReadyPriority>
    2f88:	8b e0       	ldi	r24, 0x0B	; 11
    2f8a:	8e 9f       	mul	r24, r30
    2f8c:	f0 01       	movw	r30, r0
    2f8e:	11 24       	eor	r1, r1
    2f90:	e9 57       	subi	r30, 0x79	; 121
    2f92:	fa 4e       	sbci	r31, 0xEA	; 234
    2f94:	01 80       	ldd	r0, Z+1	; 0x01
    2f96:	f2 81       	ldd	r31, Z+2	; 0x02
    2f98:	e0 2d       	mov	r30, r0
    2f9a:	ff 83       	std	Y+7, r31	; 0x07
    2f9c:	ee 83       	std	Y+6, r30	; 0x06
    2f9e:	26 81       	ldd	r18, Z+6	; 0x06
    2fa0:	37 81       	ldd	r19, Z+7	; 0x07
    2fa2:	39 87       	std	Y+9, r19	; 0x09
    2fa4:	28 87       	std	Y+8, r18	; 0x08
    2fa6:	a6 81       	ldd	r26, Z+6	; 0x06
    2fa8:	b7 81       	ldd	r27, Z+7	; 0x07
    2faa:	15 96       	adiw	r26, 0x05	; 5
    2fac:	1c 93       	st	X, r17
    2fae:	0e 93       	st	-X, r16
    2fb0:	14 97       	sbiw	r26, 0x04	; 4
    2fb2:	17 83       	std	Z+7, r17	; 0x07
    2fb4:	06 83       	std	Z+6, r16	; 0x06
    2fb6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2fb8:	8e 9f       	mul	r24, r30
    2fba:	f0 01       	movw	r30, r0
    2fbc:	11 24       	eor	r1, r1
    2fbe:	e9 57       	subi	r30, 0x79	; 121
    2fc0:	fa 4e       	sbci	r31, 0xEA	; 234
    2fc2:	fd 87       	std	Y+13, r31	; 0x0d
    2fc4:	ec 87       	std	Y+12, r30	; 0x0c
    2fc6:	80 81       	ld	r24, Z
    2fc8:	8f 5f       	subi	r24, 0xFF	; 255
    2fca:	80 83       	st	Z, r24
    2fcc:	df 91       	pop	r29
    2fce:	cf 91       	pop	r28
    2fd0:	1f 91       	pop	r17
    2fd2:	0f 91       	pop	r16
    2fd4:	08 95       	ret

00002fd6 <uxTaskResetEventItemValue>:
    2fd6:	cf 92       	push	r12
    2fd8:	df 92       	push	r13
    2fda:	ef 92       	push	r14
    2fdc:	ff 92       	push	r15
    2fde:	e0 91 f5 15 	lds	r30, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2fe2:	f0 91 f6 15 	lds	r31, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2fe6:	66 85       	ldd	r22, Z+14	; 0x0e
    2fe8:	77 85       	ldd	r23, Z+15	; 0x0f
    2fea:	80 89       	ldd	r24, Z+16	; 0x10
    2fec:	91 89       	ldd	r25, Z+17	; 0x11
    2fee:	e0 91 f5 15 	lds	r30, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2ff2:	f0 91 f6 15 	lds	r31, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2ff6:	a0 91 f5 15 	lds	r26, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    2ffa:	b0 91 f6 15 	lds	r27, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    2ffe:	5a 96       	adiw	r26, 0x1a	; 26
    3000:	2c 91       	ld	r18, X
    3002:	0f 2e       	mov	r0, r31
    3004:	fa e0       	ldi	r31, 0x0A	; 10
    3006:	cf 2e       	mov	r12, r31
    3008:	d1 2c       	mov	r13, r1
    300a:	e1 2c       	mov	r14, r1
    300c:	f1 2c       	mov	r15, r1
    300e:	f0 2d       	mov	r31, r0
    3010:	c2 1a       	sub	r12, r18
    3012:	d1 08       	sbc	r13, r1
    3014:	e1 08       	sbc	r14, r1
    3016:	f1 08       	sbc	r15, r1
    3018:	c6 86       	std	Z+14, r12	; 0x0e
    301a:	d7 86       	std	Z+15, r13	; 0x0f
    301c:	e0 8a       	std	Z+16, r14	; 0x10
    301e:	f1 8a       	std	Z+17, r15	; 0x11
    3020:	ff 90       	pop	r15
    3022:	ef 90       	pop	r14
    3024:	df 90       	pop	r13
    3026:	cf 90       	pop	r12
    3028:	08 95       	ret

0000302a <pvTaskIncrementMutexHeldCount>:
    302a:	80 91 f5 15 	lds	r24, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    302e:	90 91 f6 15 	lds	r25, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    3032:	89 2b       	or	r24, r25
    3034:	39 f0       	breq	.+14     	; 0x3044 <pvTaskIncrementMutexHeldCount+0x1a>
    3036:	e0 91 f5 15 	lds	r30, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    303a:	f0 91 f6 15 	lds	r31, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    303e:	86 a5       	ldd	r24, Z+46	; 0x2e
    3040:	8f 5f       	subi	r24, 0xFF	; 255
    3042:	86 a7       	std	Z+46, r24	; 0x2e
    3044:	80 91 f5 15 	lds	r24, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    3048:	90 91 f6 15 	lds	r25, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    304c:	08 95       	ret

0000304e <xTaskGenericNotifyWait>:
    304e:	4f 92       	push	r4
    3050:	5f 92       	push	r5
    3052:	6f 92       	push	r6
    3054:	7f 92       	push	r7
    3056:	af 92       	push	r10
    3058:	bf 92       	push	r11
    305a:	cf 92       	push	r12
    305c:	df 92       	push	r13
    305e:	ef 92       	push	r14
    3060:	ff 92       	push	r15
    3062:	0f 93       	push	r16
    3064:	1f 93       	push	r17
    3066:	cf 93       	push	r28
    3068:	df 93       	push	r29
    306a:	28 01       	movw	r4, r16
    306c:	39 01       	movw	r6, r18
    306e:	0f b6       	in	r0, 0x3f	; 63
    3070:	f8 94       	cli
    3072:	0f 92       	push	r0
    3074:	e0 91 f5 15 	lds	r30, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    3078:	f0 91 f6 15 	lds	r31, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    307c:	c8 2f       	mov	r28, r24
    307e:	d0 e0       	ldi	r29, 0x00	; 0
    3080:	ec 0f       	add	r30, r28
    3082:	fd 1f       	adc	r31, r29
    3084:	83 a9       	ldd	r24, Z+51	; 0x33
    3086:	82 30       	cpi	r24, 0x02	; 2
    3088:	79 f1       	breq	.+94     	; 0x30e8 <xTaskGenericNotifyWait+0x9a>
    308a:	e0 91 f5 15 	lds	r30, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    308e:	f0 91 f6 15 	lds	r31, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    3092:	ce 01       	movw	r24, r28
    3094:	88 0f       	add	r24, r24
    3096:	99 1f       	adc	r25, r25
    3098:	88 0f       	add	r24, r24
    309a:	99 1f       	adc	r25, r25
    309c:	e8 0f       	add	r30, r24
    309e:	f9 1f       	adc	r31, r25
    30a0:	87 a5       	ldd	r24, Z+47	; 0x2f
    30a2:	90 a9       	ldd	r25, Z+48	; 0x30
    30a4:	a1 a9       	ldd	r26, Z+49	; 0x31
    30a6:	b2 a9       	ldd	r27, Z+50	; 0x32
    30a8:	40 95       	com	r20
    30aa:	50 95       	com	r21
    30ac:	60 95       	com	r22
    30ae:	70 95       	com	r23
    30b0:	48 23       	and	r20, r24
    30b2:	59 23       	and	r21, r25
    30b4:	6a 23       	and	r22, r26
    30b6:	7b 23       	and	r23, r27
    30b8:	47 a7       	std	Z+47, r20	; 0x2f
    30ba:	50 ab       	std	Z+48, r21	; 0x30
    30bc:	61 ab       	std	Z+49, r22	; 0x31
    30be:	72 ab       	std	Z+50, r23	; 0x32
    30c0:	e0 91 f5 15 	lds	r30, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    30c4:	f0 91 f6 15 	lds	r31, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    30c8:	ec 0f       	add	r30, r28
    30ca:	fd 1f       	adc	r31, r29
    30cc:	81 e0       	ldi	r24, 0x01	; 1
    30ce:	83 ab       	std	Z+51, r24	; 0x33
    30d0:	a1 14       	cp	r10, r1
    30d2:	b1 04       	cpc	r11, r1
    30d4:	c1 04       	cpc	r12, r1
    30d6:	d1 04       	cpc	r13, r1
    30d8:	39 f0       	breq	.+14     	; 0x30e8 <xTaskGenericNotifyWait+0x9a>
    30da:	41 e0       	ldi	r20, 0x01	; 1
    30dc:	c6 01       	movw	r24, r12
    30de:	b5 01       	movw	r22, r10
    30e0:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <prvAddCurrentTaskToDelayedList>
    30e4:	0e 94 e5 06 	call	0xdca	; 0xdca <vPortYield>
    30e8:	0f 90       	pop	r0
    30ea:	0f be       	out	0x3f, r0	; 63
    30ec:	0f b6       	in	r0, 0x3f	; 63
    30ee:	f8 94       	cli
    30f0:	0f 92       	push	r0
    30f2:	e1 14       	cp	r14, r1
    30f4:	f1 04       	cpc	r15, r1
    30f6:	a1 f0       	breq	.+40     	; 0x3120 <xTaskGenericNotifyWait+0xd2>
    30f8:	e0 91 f5 15 	lds	r30, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    30fc:	f0 91 f6 15 	lds	r31, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    3100:	ce 01       	movw	r24, r28
    3102:	88 0f       	add	r24, r24
    3104:	99 1f       	adc	r25, r25
    3106:	88 0f       	add	r24, r24
    3108:	99 1f       	adc	r25, r25
    310a:	e8 0f       	add	r30, r24
    310c:	f9 1f       	adc	r31, r25
    310e:	87 a5       	ldd	r24, Z+47	; 0x2f
    3110:	90 a9       	ldd	r25, Z+48	; 0x30
    3112:	a1 a9       	ldd	r26, Z+49	; 0x31
    3114:	b2 a9       	ldd	r27, Z+50	; 0x32
    3116:	f7 01       	movw	r30, r14
    3118:	80 83       	st	Z, r24
    311a:	91 83       	std	Z+1, r25	; 0x01
    311c:	a2 83       	std	Z+2, r26	; 0x02
    311e:	b3 83       	std	Z+3, r27	; 0x03
    3120:	e0 91 f5 15 	lds	r30, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    3124:	f0 91 f6 15 	lds	r31, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    3128:	ec 0f       	add	r30, r28
    312a:	fd 1f       	adc	r31, r29
    312c:	83 a9       	ldd	r24, Z+51	; 0x33
    312e:	82 30       	cpi	r24, 0x02	; 2
    3130:	e9 f4       	brne	.+58     	; 0x316c <xTaskGenericNotifyWait+0x11e>
    3132:	e0 91 f5 15 	lds	r30, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    3136:	f0 91 f6 15 	lds	r31, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    313a:	ce 01       	movw	r24, r28
    313c:	88 0f       	add	r24, r24
    313e:	99 1f       	adc	r25, r25
    3140:	88 0f       	add	r24, r24
    3142:	99 1f       	adc	r25, r25
    3144:	e8 0f       	add	r30, r24
    3146:	f9 1f       	adc	r31, r25
    3148:	87 a5       	ldd	r24, Z+47	; 0x2f
    314a:	90 a9       	ldd	r25, Z+48	; 0x30
    314c:	a1 a9       	ldd	r26, Z+49	; 0x31
    314e:	b2 a9       	ldd	r27, Z+50	; 0x32
    3150:	40 94       	com	r4
    3152:	50 94       	com	r5
    3154:	60 94       	com	r6
    3156:	70 94       	com	r7
    3158:	48 22       	and	r4, r24
    315a:	59 22       	and	r5, r25
    315c:	6a 22       	and	r6, r26
    315e:	7b 22       	and	r7, r27
    3160:	47 a6       	std	Z+47, r4	; 0x2f
    3162:	50 aa       	std	Z+48, r5	; 0x30
    3164:	61 aa       	std	Z+49, r6	; 0x31
    3166:	72 aa       	std	Z+50, r7	; 0x32
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	01 c0       	rjmp	.+2      	; 0x316e <xTaskGenericNotifyWait+0x120>
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	20 91 f5 15 	lds	r18, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    3172:	30 91 f6 15 	lds	r19, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    3176:	c2 0f       	add	r28, r18
    3178:	d3 1f       	adc	r29, r19
    317a:	1b aa       	std	Y+51, r1	; 0x33
    317c:	0f 90       	pop	r0
    317e:	0f be       	out	0x3f, r0	; 63
    3180:	df 91       	pop	r29
    3182:	cf 91       	pop	r28
    3184:	1f 91       	pop	r17
    3186:	0f 91       	pop	r16
    3188:	ff 90       	pop	r15
    318a:	ef 90       	pop	r14
    318c:	df 90       	pop	r13
    318e:	cf 90       	pop	r12
    3190:	bf 90       	pop	r11
    3192:	af 90       	pop	r10
    3194:	7f 90       	pop	r7
    3196:	6f 90       	pop	r6
    3198:	5f 90       	pop	r5
    319a:	4f 90       	pop	r4
    319c:	08 95       	ret

0000319e <xTaskGenericNotify>:
    319e:	8f 92       	push	r8
    31a0:	9f 92       	push	r9
    31a2:	af 92       	push	r10
    31a4:	bf 92       	push	r11
    31a6:	ef 92       	push	r14
    31a8:	ff 92       	push	r15
    31aa:	0f 93       	push	r16
    31ac:	cf 93       	push	r28
    31ae:	df 93       	push	r29
    31b0:	dc 01       	movw	r26, r24
    31b2:	0f b6       	in	r0, 0x3f	; 63
    31b4:	f8 94       	cli
    31b6:	0f 92       	push	r0
    31b8:	e1 14       	cp	r14, r1
    31ba:	f1 04       	cpc	r15, r1
    31bc:	89 f0       	breq	.+34     	; 0x31e0 <xTaskGenericNotify+0x42>
    31be:	e6 2f       	mov	r30, r22
    31c0:	f0 e0       	ldi	r31, 0x00	; 0
    31c2:	ee 0f       	add	r30, r30
    31c4:	ff 1f       	adc	r31, r31
    31c6:	ee 0f       	add	r30, r30
    31c8:	ff 1f       	adc	r31, r31
    31ca:	e8 0f       	add	r30, r24
    31cc:	f9 1f       	adc	r31, r25
    31ce:	87 a4       	ldd	r8, Z+47	; 0x2f
    31d0:	90 a8       	ldd	r9, Z+48	; 0x30
    31d2:	a1 a8       	ldd	r10, Z+49	; 0x31
    31d4:	b2 a8       	ldd	r11, Z+50	; 0x32
    31d6:	f7 01       	movw	r30, r14
    31d8:	80 82       	st	Z, r8
    31da:	91 82       	std	Z+1, r9	; 0x01
    31dc:	a2 82       	std	Z+2, r10	; 0x02
    31de:	b3 82       	std	Z+3, r11	; 0x03
    31e0:	70 e0       	ldi	r23, 0x00	; 0
    31e2:	fd 01       	movw	r30, r26
    31e4:	e6 0f       	add	r30, r22
    31e6:	f7 1f       	adc	r31, r23
    31e8:	83 a9       	ldd	r24, Z+51	; 0x33
    31ea:	92 e0       	ldi	r25, 0x02	; 2
    31ec:	93 ab       	std	Z+51, r25	; 0x33
    31ee:	02 30       	cpi	r16, 0x02	; 2
    31f0:	01 f1       	breq	.+64     	; 0x3232 <xTaskGenericNotify+0x94>
    31f2:	18 f4       	brcc	.+6      	; 0x31fa <xTaskGenericNotify+0x5c>
    31f4:	01 30       	cpi	r16, 0x01	; 1
    31f6:	31 f0       	breq	.+12     	; 0x3204 <xTaskGenericNotify+0x66>
    31f8:	4d c0       	rjmp	.+154    	; 0x3294 <xTaskGenericNotify+0xf6>
    31fa:	03 30       	cpi	r16, 0x03	; 3
    31fc:	79 f1       	breq	.+94     	; 0x325c <xTaskGenericNotify+0xbe>
    31fe:	04 30       	cpi	r16, 0x04	; 4
    3200:	d1 f1       	breq	.+116    	; 0x3276 <xTaskGenericNotify+0xd8>
    3202:	48 c0       	rjmp	.+144    	; 0x3294 <xTaskGenericNotify+0xf6>
    3204:	66 0f       	add	r22, r22
    3206:	77 1f       	adc	r23, r23
    3208:	66 0f       	add	r22, r22
    320a:	77 1f       	adc	r23, r23
    320c:	fd 01       	movw	r30, r26
    320e:	e6 0f       	add	r30, r22
    3210:	f7 1f       	adc	r31, r23
    3212:	87 a4       	ldd	r8, Z+47	; 0x2f
    3214:	90 a8       	ldd	r9, Z+48	; 0x30
    3216:	a1 a8       	ldd	r10, Z+49	; 0x31
    3218:	b2 a8       	ldd	r11, Z+50	; 0x32
    321a:	ba 01       	movw	r22, r20
    321c:	a9 01       	movw	r20, r18
    321e:	48 29       	or	r20, r8
    3220:	59 29       	or	r21, r9
    3222:	6a 29       	or	r22, r10
    3224:	7b 29       	or	r23, r11
    3226:	47 a7       	std	Z+47, r20	; 0x2f
    3228:	50 ab       	std	Z+48, r21	; 0x30
    322a:	61 ab       	std	Z+49, r22	; 0x31
    322c:	72 ab       	std	Z+50, r23	; 0x32
    322e:	01 e0       	ldi	r16, 0x01	; 1
    3230:	34 c0       	rjmp	.+104    	; 0x329a <xTaskGenericNotify+0xfc>
    3232:	66 0f       	add	r22, r22
    3234:	77 1f       	adc	r23, r23
    3236:	66 0f       	add	r22, r22
    3238:	77 1f       	adc	r23, r23
    323a:	fd 01       	movw	r30, r26
    323c:	e6 0f       	add	r30, r22
    323e:	f7 1f       	adc	r31, r23
    3240:	47 a5       	ldd	r20, Z+47	; 0x2f
    3242:	50 a9       	ldd	r21, Z+48	; 0x30
    3244:	61 a9       	ldd	r22, Z+49	; 0x31
    3246:	72 a9       	ldd	r23, Z+50	; 0x32
    3248:	4f 5f       	subi	r20, 0xFF	; 255
    324a:	5f 4f       	sbci	r21, 0xFF	; 255
    324c:	6f 4f       	sbci	r22, 0xFF	; 255
    324e:	7f 4f       	sbci	r23, 0xFF	; 255
    3250:	47 a7       	std	Z+47, r20	; 0x2f
    3252:	50 ab       	std	Z+48, r21	; 0x30
    3254:	61 ab       	std	Z+49, r22	; 0x31
    3256:	72 ab       	std	Z+50, r23	; 0x32
    3258:	01 e0       	ldi	r16, 0x01	; 1
    325a:	1f c0       	rjmp	.+62     	; 0x329a <xTaskGenericNotify+0xfc>
    325c:	66 0f       	add	r22, r22
    325e:	77 1f       	adc	r23, r23
    3260:	66 0f       	add	r22, r22
    3262:	77 1f       	adc	r23, r23
    3264:	fd 01       	movw	r30, r26
    3266:	e6 0f       	add	r30, r22
    3268:	f7 1f       	adc	r31, r23
    326a:	27 a7       	std	Z+47, r18	; 0x2f
    326c:	30 ab       	std	Z+48, r19	; 0x30
    326e:	41 ab       	std	Z+49, r20	; 0x31
    3270:	52 ab       	std	Z+50, r21	; 0x32
    3272:	01 e0       	ldi	r16, 0x01	; 1
    3274:	12 c0       	rjmp	.+36     	; 0x329a <xTaskGenericNotify+0xfc>
    3276:	82 30       	cpi	r24, 0x02	; 2
    3278:	79 f0       	breq	.+30     	; 0x3298 <xTaskGenericNotify+0xfa>
    327a:	66 0f       	add	r22, r22
    327c:	77 1f       	adc	r23, r23
    327e:	66 0f       	add	r22, r22
    3280:	77 1f       	adc	r23, r23
    3282:	fd 01       	movw	r30, r26
    3284:	e6 0f       	add	r30, r22
    3286:	f7 1f       	adc	r31, r23
    3288:	27 a7       	std	Z+47, r18	; 0x2f
    328a:	30 ab       	std	Z+48, r19	; 0x30
    328c:	41 ab       	std	Z+49, r20	; 0x31
    328e:	52 ab       	std	Z+50, r21	; 0x32
    3290:	01 e0       	ldi	r16, 0x01	; 1
    3292:	03 c0       	rjmp	.+6      	; 0x329a <xTaskGenericNotify+0xfc>
    3294:	01 e0       	ldi	r16, 0x01	; 1
    3296:	01 c0       	rjmp	.+2      	; 0x329a <xTaskGenericNotify+0xfc>
    3298:	00 e0       	ldi	r16, 0x00	; 0
    329a:	81 30       	cpi	r24, 0x01	; 1
    329c:	09 f0       	breq	.+2      	; 0x32a0 <xTaskGenericNotify+0x102>
    329e:	69 c0       	rjmp	.+210    	; 0x3372 <xTaskGenericNotify+0x1d4>
    32a0:	1c 96       	adiw	r26, 0x0c	; 12
    32a2:	ed 91       	ld	r30, X+
    32a4:	fc 91       	ld	r31, X
    32a6:	1d 97       	sbiw	r26, 0x0d	; 13
    32a8:	16 96       	adiw	r26, 0x06	; 6
    32aa:	cd 91       	ld	r28, X+
    32ac:	dc 91       	ld	r29, X
    32ae:	17 97       	sbiw	r26, 0x07	; 7
    32b0:	18 96       	adiw	r26, 0x08	; 8
    32b2:	8d 91       	ld	r24, X+
    32b4:	9c 91       	ld	r25, X
    32b6:	19 97       	sbiw	r26, 0x09	; 9
    32b8:	9f 83       	std	Y+7, r25	; 0x07
    32ba:	8e 83       	std	Y+6, r24	; 0x06
    32bc:	18 96       	adiw	r26, 0x08	; 8
    32be:	cd 91       	ld	r28, X+
    32c0:	dc 91       	ld	r29, X
    32c2:	19 97       	sbiw	r26, 0x09	; 9
    32c4:	16 96       	adiw	r26, 0x06	; 6
    32c6:	8d 91       	ld	r24, X+
    32c8:	9c 91       	ld	r25, X
    32ca:	17 97       	sbiw	r26, 0x07	; 7
    32cc:	9d 83       	std	Y+5, r25	; 0x05
    32ce:	8c 83       	std	Y+4, r24	; 0x04
    32d0:	81 81       	ldd	r24, Z+1	; 0x01
    32d2:	92 81       	ldd	r25, Z+2	; 0x02
    32d4:	9d 01       	movw	r18, r26
    32d6:	2e 5f       	subi	r18, 0xFE	; 254
    32d8:	3f 4f       	sbci	r19, 0xFF	; 255
    32da:	82 17       	cp	r24, r18
    32dc:	93 07       	cpc	r25, r19
    32de:	31 f4       	brne	.+12     	; 0x32ec <xTaskGenericNotify+0x14e>
    32e0:	18 96       	adiw	r26, 0x08	; 8
    32e2:	8d 91       	ld	r24, X+
    32e4:	9c 91       	ld	r25, X
    32e6:	19 97       	sbiw	r26, 0x09	; 9
    32e8:	92 83       	std	Z+2, r25	; 0x02
    32ea:	81 83       	std	Z+1, r24	; 0x01
    32ec:	1d 96       	adiw	r26, 0x0d	; 13
    32ee:	1c 92       	st	X, r1
    32f0:	1e 92       	st	-X, r1
    32f2:	1c 97       	sbiw	r26, 0x0c	; 12
    32f4:	80 81       	ld	r24, Z
    32f6:	81 50       	subi	r24, 0x01	; 1
    32f8:	80 83       	st	Z, r24
    32fa:	5a 96       	adiw	r26, 0x1a	; 26
    32fc:	ec 91       	ld	r30, X
    32fe:	5a 97       	sbiw	r26, 0x1a	; 26
    3300:	80 91 45 15 	lds	r24, 0x1545	; 0x801545 <uxTopReadyPriority>
    3304:	8e 17       	cp	r24, r30
    3306:	10 f4       	brcc	.+4      	; 0x330c <xTaskGenericNotify+0x16e>
    3308:	e0 93 45 15 	sts	0x1545, r30	; 0x801545 <uxTopReadyPriority>
    330c:	8b e0       	ldi	r24, 0x0B	; 11
    330e:	8e 9f       	mul	r24, r30
    3310:	f0 01       	movw	r30, r0
    3312:	11 24       	eor	r1, r1
    3314:	e9 57       	subi	r30, 0x79	; 121
    3316:	fa 4e       	sbci	r31, 0xEA	; 234
    3318:	01 80       	ldd	r0, Z+1	; 0x01
    331a:	f2 81       	ldd	r31, Z+2	; 0x02
    331c:	e0 2d       	mov	r30, r0
    331e:	17 96       	adiw	r26, 0x07	; 7
    3320:	fc 93       	st	X, r31
    3322:	ee 93       	st	-X, r30
    3324:	16 97       	sbiw	r26, 0x06	; 6
    3326:	46 81       	ldd	r20, Z+6	; 0x06
    3328:	57 81       	ldd	r21, Z+7	; 0x07
    332a:	19 96       	adiw	r26, 0x09	; 9
    332c:	5c 93       	st	X, r21
    332e:	4e 93       	st	-X, r20
    3330:	18 97       	sbiw	r26, 0x08	; 8
    3332:	c6 81       	ldd	r28, Z+6	; 0x06
    3334:	d7 81       	ldd	r29, Z+7	; 0x07
    3336:	3d 83       	std	Y+5, r19	; 0x05
    3338:	2c 83       	std	Y+4, r18	; 0x04
    333a:	37 83       	std	Z+7, r19	; 0x07
    333c:	26 83       	std	Z+6, r18	; 0x06
    333e:	5a 96       	adiw	r26, 0x1a	; 26
    3340:	ec 91       	ld	r30, X
    3342:	5a 97       	sbiw	r26, 0x1a	; 26
    3344:	8e 9f       	mul	r24, r30
    3346:	f0 01       	movw	r30, r0
    3348:	11 24       	eor	r1, r1
    334a:	e9 57       	subi	r30, 0x79	; 121
    334c:	fa 4e       	sbci	r31, 0xEA	; 234
    334e:	1d 96       	adiw	r26, 0x0d	; 13
    3350:	fc 93       	st	X, r31
    3352:	ee 93       	st	-X, r30
    3354:	1c 97       	sbiw	r26, 0x0c	; 12
    3356:	80 81       	ld	r24, Z
    3358:	8f 5f       	subi	r24, 0xFF	; 255
    335a:	80 83       	st	Z, r24
    335c:	5a 96       	adiw	r26, 0x1a	; 26
    335e:	9c 91       	ld	r25, X
    3360:	e0 91 f5 15 	lds	r30, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    3364:	f0 91 f6 15 	lds	r31, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    3368:	82 8d       	ldd	r24, Z+26	; 0x1a
    336a:	89 17       	cp	r24, r25
    336c:	10 f4       	brcc	.+4      	; 0x3372 <xTaskGenericNotify+0x1d4>
    336e:	0e 94 e5 06 	call	0xdca	; 0xdca <vPortYield>
    3372:	0f 90       	pop	r0
    3374:	0f be       	out	0x3f, r0	; 63
    3376:	80 2f       	mov	r24, r16
    3378:	df 91       	pop	r29
    337a:	cf 91       	pop	r28
    337c:	0f 91       	pop	r16
    337e:	ff 90       	pop	r15
    3380:	ef 90       	pop	r14
    3382:	bf 90       	pop	r11
    3384:	af 90       	pop	r10
    3386:	9f 90       	pop	r9
    3388:	8f 90       	pop	r8
    338a:	08 95       	ret

0000338c <xTaskGenericNotifyFromISR>:
    338c:	8f 92       	push	r8
    338e:	9f 92       	push	r9
    3390:	af 92       	push	r10
    3392:	bf 92       	push	r11
    3394:	cf 92       	push	r12
    3396:	df 92       	push	r13
    3398:	ef 92       	push	r14
    339a:	ff 92       	push	r15
    339c:	0f 93       	push	r16
    339e:	cf 93       	push	r28
    33a0:	df 93       	push	r29
    33a2:	dc 01       	movw	r26, r24
    33a4:	e1 14       	cp	r14, r1
    33a6:	f1 04       	cpc	r15, r1
    33a8:	89 f0       	breq	.+34     	; 0x33cc <xTaskGenericNotifyFromISR+0x40>
    33aa:	e6 2f       	mov	r30, r22
    33ac:	f0 e0       	ldi	r31, 0x00	; 0
    33ae:	ee 0f       	add	r30, r30
    33b0:	ff 1f       	adc	r31, r31
    33b2:	ee 0f       	add	r30, r30
    33b4:	ff 1f       	adc	r31, r31
    33b6:	e8 0f       	add	r30, r24
    33b8:	f9 1f       	adc	r31, r25
    33ba:	87 a4       	ldd	r8, Z+47	; 0x2f
    33bc:	90 a8       	ldd	r9, Z+48	; 0x30
    33be:	a1 a8       	ldd	r10, Z+49	; 0x31
    33c0:	b2 a8       	ldd	r11, Z+50	; 0x32
    33c2:	f7 01       	movw	r30, r14
    33c4:	80 82       	st	Z, r8
    33c6:	91 82       	std	Z+1, r9	; 0x01
    33c8:	a2 82       	std	Z+2, r10	; 0x02
    33ca:	b3 82       	std	Z+3, r11	; 0x03
    33cc:	70 e0       	ldi	r23, 0x00	; 0
    33ce:	fd 01       	movw	r30, r26
    33d0:	e6 0f       	add	r30, r22
    33d2:	f7 1f       	adc	r31, r23
    33d4:	93 a9       	ldd	r25, Z+51	; 0x33
    33d6:	82 e0       	ldi	r24, 0x02	; 2
    33d8:	83 ab       	std	Z+51, r24	; 0x33
    33da:	02 30       	cpi	r16, 0x02	; 2
    33dc:	01 f1       	breq	.+64     	; 0x341e <xTaskGenericNotifyFromISR+0x92>
    33de:	18 f4       	brcc	.+6      	; 0x33e6 <xTaskGenericNotifyFromISR+0x5a>
    33e0:	01 30       	cpi	r16, 0x01	; 1
    33e2:	31 f0       	breq	.+12     	; 0x33f0 <xTaskGenericNotifyFromISR+0x64>
    33e4:	4d c0       	rjmp	.+154    	; 0x3480 <xTaskGenericNotifyFromISR+0xf4>
    33e6:	03 30       	cpi	r16, 0x03	; 3
    33e8:	79 f1       	breq	.+94     	; 0x3448 <xTaskGenericNotifyFromISR+0xbc>
    33ea:	04 30       	cpi	r16, 0x04	; 4
    33ec:	d1 f1       	breq	.+116    	; 0x3462 <xTaskGenericNotifyFromISR+0xd6>
    33ee:	48 c0       	rjmp	.+144    	; 0x3480 <xTaskGenericNotifyFromISR+0xf4>
    33f0:	66 0f       	add	r22, r22
    33f2:	77 1f       	adc	r23, r23
    33f4:	66 0f       	add	r22, r22
    33f6:	77 1f       	adc	r23, r23
    33f8:	fd 01       	movw	r30, r26
    33fa:	e6 0f       	add	r30, r22
    33fc:	f7 1f       	adc	r31, r23
    33fe:	87 a4       	ldd	r8, Z+47	; 0x2f
    3400:	90 a8       	ldd	r9, Z+48	; 0x30
    3402:	a1 a8       	ldd	r10, Z+49	; 0x31
    3404:	b2 a8       	ldd	r11, Z+50	; 0x32
    3406:	ba 01       	movw	r22, r20
    3408:	a9 01       	movw	r20, r18
    340a:	48 29       	or	r20, r8
    340c:	59 29       	or	r21, r9
    340e:	6a 29       	or	r22, r10
    3410:	7b 29       	or	r23, r11
    3412:	47 a7       	std	Z+47, r20	; 0x2f
    3414:	50 ab       	std	Z+48, r21	; 0x30
    3416:	61 ab       	std	Z+49, r22	; 0x31
    3418:	72 ab       	std	Z+50, r23	; 0x32
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	34 c0       	rjmp	.+104    	; 0x3486 <xTaskGenericNotifyFromISR+0xfa>
    341e:	66 0f       	add	r22, r22
    3420:	77 1f       	adc	r23, r23
    3422:	66 0f       	add	r22, r22
    3424:	77 1f       	adc	r23, r23
    3426:	fd 01       	movw	r30, r26
    3428:	e6 0f       	add	r30, r22
    342a:	f7 1f       	adc	r31, r23
    342c:	47 a5       	ldd	r20, Z+47	; 0x2f
    342e:	50 a9       	ldd	r21, Z+48	; 0x30
    3430:	61 a9       	ldd	r22, Z+49	; 0x31
    3432:	72 a9       	ldd	r23, Z+50	; 0x32
    3434:	4f 5f       	subi	r20, 0xFF	; 255
    3436:	5f 4f       	sbci	r21, 0xFF	; 255
    3438:	6f 4f       	sbci	r22, 0xFF	; 255
    343a:	7f 4f       	sbci	r23, 0xFF	; 255
    343c:	47 a7       	std	Z+47, r20	; 0x2f
    343e:	50 ab       	std	Z+48, r21	; 0x30
    3440:	61 ab       	std	Z+49, r22	; 0x31
    3442:	72 ab       	std	Z+50, r23	; 0x32
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	1f c0       	rjmp	.+62     	; 0x3486 <xTaskGenericNotifyFromISR+0xfa>
    3448:	66 0f       	add	r22, r22
    344a:	77 1f       	adc	r23, r23
    344c:	66 0f       	add	r22, r22
    344e:	77 1f       	adc	r23, r23
    3450:	fd 01       	movw	r30, r26
    3452:	e6 0f       	add	r30, r22
    3454:	f7 1f       	adc	r31, r23
    3456:	27 a7       	std	Z+47, r18	; 0x2f
    3458:	30 ab       	std	Z+48, r19	; 0x30
    345a:	41 ab       	std	Z+49, r20	; 0x31
    345c:	52 ab       	std	Z+50, r21	; 0x32
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	12 c0       	rjmp	.+36     	; 0x3486 <xTaskGenericNotifyFromISR+0xfa>
    3462:	92 30       	cpi	r25, 0x02	; 2
    3464:	79 f0       	breq	.+30     	; 0x3484 <xTaskGenericNotifyFromISR+0xf8>
    3466:	66 0f       	add	r22, r22
    3468:	77 1f       	adc	r23, r23
    346a:	66 0f       	add	r22, r22
    346c:	77 1f       	adc	r23, r23
    346e:	fd 01       	movw	r30, r26
    3470:	e6 0f       	add	r30, r22
    3472:	f7 1f       	adc	r31, r23
    3474:	27 a7       	std	Z+47, r18	; 0x2f
    3476:	30 ab       	std	Z+48, r19	; 0x30
    3478:	41 ab       	std	Z+49, r20	; 0x31
    347a:	52 ab       	std	Z+50, r21	; 0x32
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	03 c0       	rjmp	.+6      	; 0x3486 <xTaskGenericNotifyFromISR+0xfa>
    3480:	81 e0       	ldi	r24, 0x01	; 1
    3482:	01 c0       	rjmp	.+2      	; 0x3486 <xTaskGenericNotifyFromISR+0xfa>
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	91 30       	cpi	r25, 0x01	; 1
    3488:	09 f0       	breq	.+2      	; 0x348c <xTaskGenericNotifyFromISR+0x100>
    348a:	96 c0       	rjmp	.+300    	; 0x35b8 <xTaskGenericNotifyFromISR+0x22c>
    348c:	90 91 36 15 	lds	r25, 0x1536	; 0x801536 <uxSchedulerSuspended>
    3490:	91 11       	cpse	r25, r1
    3492:	5f c0       	rjmp	.+190    	; 0x3552 <xTaskGenericNotifyFromISR+0x1c6>
    3494:	1c 96       	adiw	r26, 0x0c	; 12
    3496:	ed 91       	ld	r30, X+
    3498:	fc 91       	ld	r31, X
    349a:	1d 97       	sbiw	r26, 0x0d	; 13
    349c:	16 96       	adiw	r26, 0x06	; 6
    349e:	cd 91       	ld	r28, X+
    34a0:	dc 91       	ld	r29, X
    34a2:	17 97       	sbiw	r26, 0x07	; 7
    34a4:	18 96       	adiw	r26, 0x08	; 8
    34a6:	2d 91       	ld	r18, X+
    34a8:	3c 91       	ld	r19, X
    34aa:	19 97       	sbiw	r26, 0x09	; 9
    34ac:	3f 83       	std	Y+7, r19	; 0x07
    34ae:	2e 83       	std	Y+6, r18	; 0x06
    34b0:	18 96       	adiw	r26, 0x08	; 8
    34b2:	cd 91       	ld	r28, X+
    34b4:	dc 91       	ld	r29, X
    34b6:	19 97       	sbiw	r26, 0x09	; 9
    34b8:	16 96       	adiw	r26, 0x06	; 6
    34ba:	2d 91       	ld	r18, X+
    34bc:	3c 91       	ld	r19, X
    34be:	17 97       	sbiw	r26, 0x07	; 7
    34c0:	3d 83       	std	Y+5, r19	; 0x05
    34c2:	2c 83       	std	Y+4, r18	; 0x04
    34c4:	41 81       	ldd	r20, Z+1	; 0x01
    34c6:	52 81       	ldd	r21, Z+2	; 0x02
    34c8:	9d 01       	movw	r18, r26
    34ca:	2e 5f       	subi	r18, 0xFE	; 254
    34cc:	3f 4f       	sbci	r19, 0xFF	; 255
    34ce:	42 17       	cp	r20, r18
    34d0:	53 07       	cpc	r21, r19
    34d2:	31 f4       	brne	.+12     	; 0x34e0 <xTaskGenericNotifyFromISR+0x154>
    34d4:	18 96       	adiw	r26, 0x08	; 8
    34d6:	4d 91       	ld	r20, X+
    34d8:	5c 91       	ld	r21, X
    34da:	19 97       	sbiw	r26, 0x09	; 9
    34dc:	52 83       	std	Z+2, r21	; 0x02
    34de:	41 83       	std	Z+1, r20	; 0x01
    34e0:	1d 96       	adiw	r26, 0x0d	; 13
    34e2:	1c 92       	st	X, r1
    34e4:	1e 92       	st	-X, r1
    34e6:	1c 97       	sbiw	r26, 0x0c	; 12
    34e8:	90 81       	ld	r25, Z
    34ea:	91 50       	subi	r25, 0x01	; 1
    34ec:	90 83       	st	Z, r25
    34ee:	5a 96       	adiw	r26, 0x1a	; 26
    34f0:	ec 91       	ld	r30, X
    34f2:	5a 97       	sbiw	r26, 0x1a	; 26
    34f4:	90 91 45 15 	lds	r25, 0x1545	; 0x801545 <uxTopReadyPriority>
    34f8:	9e 17       	cp	r25, r30
    34fa:	10 f4       	brcc	.+4      	; 0x3500 <xTaskGenericNotifyFromISR+0x174>
    34fc:	e0 93 45 15 	sts	0x1545, r30	; 0x801545 <uxTopReadyPriority>
    3500:	9b e0       	ldi	r25, 0x0B	; 11
    3502:	9e 9f       	mul	r25, r30
    3504:	f0 01       	movw	r30, r0
    3506:	11 24       	eor	r1, r1
    3508:	e9 57       	subi	r30, 0x79	; 121
    350a:	fa 4e       	sbci	r31, 0xEA	; 234
    350c:	01 80       	ldd	r0, Z+1	; 0x01
    350e:	f2 81       	ldd	r31, Z+2	; 0x02
    3510:	e0 2d       	mov	r30, r0
    3512:	17 96       	adiw	r26, 0x07	; 7
    3514:	fc 93       	st	X, r31
    3516:	ee 93       	st	-X, r30
    3518:	16 97       	sbiw	r26, 0x06	; 6
    351a:	46 81       	ldd	r20, Z+6	; 0x06
    351c:	57 81       	ldd	r21, Z+7	; 0x07
    351e:	19 96       	adiw	r26, 0x09	; 9
    3520:	5c 93       	st	X, r21
    3522:	4e 93       	st	-X, r20
    3524:	18 97       	sbiw	r26, 0x08	; 8
    3526:	c6 81       	ldd	r28, Z+6	; 0x06
    3528:	d7 81       	ldd	r29, Z+7	; 0x07
    352a:	3d 83       	std	Y+5, r19	; 0x05
    352c:	2c 83       	std	Y+4, r18	; 0x04
    352e:	37 83       	std	Z+7, r19	; 0x07
    3530:	26 83       	std	Z+6, r18	; 0x06
    3532:	5a 96       	adiw	r26, 0x1a	; 26
    3534:	ec 91       	ld	r30, X
    3536:	5a 97       	sbiw	r26, 0x1a	; 26
    3538:	9e 9f       	mul	r25, r30
    353a:	f0 01       	movw	r30, r0
    353c:	11 24       	eor	r1, r1
    353e:	e9 57       	subi	r30, 0x79	; 121
    3540:	fa 4e       	sbci	r31, 0xEA	; 234
    3542:	1d 96       	adiw	r26, 0x0d	; 13
    3544:	fc 93       	st	X, r31
    3546:	ee 93       	st	-X, r30
    3548:	1c 97       	sbiw	r26, 0x0c	; 12
    354a:	90 81       	ld	r25, Z
    354c:	9f 5f       	subi	r25, 0xFF	; 255
    354e:	90 83       	st	Z, r25
    3550:	21 c0       	rjmp	.+66     	; 0x3594 <xTaskGenericNotifyFromISR+0x208>
    3552:	62 e6       	ldi	r22, 0x62	; 98
    3554:	75 e1       	ldi	r23, 0x15	; 21
    3556:	fb 01       	movw	r30, r22
    3558:	c1 81       	ldd	r28, Z+1	; 0x01
    355a:	d2 81       	ldd	r29, Z+2	; 0x02
    355c:	53 96       	adiw	r26, 0x13	; 19
    355e:	dc 93       	st	X, r29
    3560:	ce 93       	st	-X, r28
    3562:	52 97       	sbiw	r26, 0x12	; 18
    3564:	2e 81       	ldd	r18, Y+6	; 0x06
    3566:	3f 81       	ldd	r19, Y+7	; 0x07
    3568:	55 96       	adiw	r26, 0x15	; 21
    356a:	3c 93       	st	X, r19
    356c:	2e 93       	st	-X, r18
    356e:	54 97       	sbiw	r26, 0x14	; 20
    3570:	4e 81       	ldd	r20, Y+6	; 0x06
    3572:	5f 81       	ldd	r21, Y+7	; 0x07
    3574:	9d 01       	movw	r18, r26
    3576:	22 5f       	subi	r18, 0xF2	; 242
    3578:	3f 4f       	sbci	r19, 0xFF	; 255
    357a:	fa 01       	movw	r30, r20
    357c:	35 83       	std	Z+5, r19	; 0x05
    357e:	24 83       	std	Z+4, r18	; 0x04
    3580:	3f 83       	std	Y+7, r19	; 0x07
    3582:	2e 83       	std	Y+6, r18	; 0x06
    3584:	59 96       	adiw	r26, 0x19	; 25
    3586:	7c 93       	st	X, r23
    3588:	6e 93       	st	-X, r22
    358a:	58 97       	sbiw	r26, 0x18	; 24
    358c:	fb 01       	movw	r30, r22
    358e:	90 81       	ld	r25, Z
    3590:	9f 5f       	subi	r25, 0xFF	; 255
    3592:	90 83       	st	Z, r25
    3594:	5a 96       	adiw	r26, 0x1a	; 26
    3596:	2c 91       	ld	r18, X
    3598:	e0 91 f5 15 	lds	r30, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    359c:	f0 91 f6 15 	lds	r31, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>
    35a0:	92 8d       	ldd	r25, Z+26	; 0x1a
    35a2:	92 17       	cp	r25, r18
    35a4:	48 f4       	brcc	.+18     	; 0x35b8 <xTaskGenericNotifyFromISR+0x22c>
    35a6:	c1 14       	cp	r12, r1
    35a8:	d1 04       	cpc	r13, r1
    35aa:	19 f0       	breq	.+6      	; 0x35b2 <xTaskGenericNotifyFromISR+0x226>
    35ac:	91 e0       	ldi	r25, 0x01	; 1
    35ae:	f6 01       	movw	r30, r12
    35b0:	90 83       	st	Z, r25
    35b2:	91 e0       	ldi	r25, 0x01	; 1
    35b4:	90 93 3f 15 	sts	0x153F, r25	; 0x80153f <xYieldPending>
    35b8:	df 91       	pop	r29
    35ba:	cf 91       	pop	r28
    35bc:	0f 91       	pop	r16
    35be:	ff 90       	pop	r15
    35c0:	ef 90       	pop	r14
    35c2:	df 90       	pop	r13
    35c4:	cf 90       	pop	r12
    35c6:	bf 90       	pop	r11
    35c8:	af 90       	pop	r10
    35ca:	9f 90       	pop	r9
    35cc:	8f 90       	pop	r8
    35ce:	08 95       	ret

000035d0 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    35d0:	00 97       	sbiw	r24, 0x00	; 0
    35d2:	21 f4       	brne	.+8      	; 0x35dc <xTaskGenericNotifyStateClear+0xc>
    35d4:	80 91 f5 15 	lds	r24, 0x15F5	; 0x8015f5 <pxCurrentTCB>
    35d8:	90 91 f6 15 	lds	r25, 0x15F6	; 0x8015f6 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    35dc:	0f b6       	in	r0, 0x3f	; 63
    35de:	f8 94       	cli
    35e0:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    35e2:	70 e0       	ldi	r23, 0x00	; 0
    35e4:	fc 01       	movw	r30, r24
    35e6:	e6 0f       	add	r30, r22
    35e8:	f7 1f       	adc	r31, r23
    35ea:	23 a9       	ldd	r18, Z+51	; 0x33
    35ec:	22 30       	cpi	r18, 0x02	; 2
    35ee:	31 f4       	brne	.+12     	; 0x35fc <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    35f0:	fc 01       	movw	r30, r24
    35f2:	e6 0f       	add	r30, r22
    35f4:	f7 1f       	adc	r31, r23
    35f6:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    35f8:	81 e0       	ldi	r24, 0x01	; 1
    35fa:	01 c0       	rjmp	.+2      	; 0x35fe <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    35fc:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    35fe:	0f 90       	pop	r0
    3600:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3602:	08 95       	ret

00003604 <prvGetNextExpireTime>:
    3604:	dc 01       	movw	r26, r24
    3606:	e0 91 01 16 	lds	r30, 0x1601	; 0x801601 <pxCurrentTimerList>
    360a:	f0 91 02 16 	lds	r31, 0x1602	; 0x801602 <pxCurrentTimerList+0x1>
    360e:	80 81       	ld	r24, Z
    3610:	91 e0       	ldi	r25, 0x01	; 1
    3612:	81 11       	cpse	r24, r1
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	9c 93       	st	X, r25
    3618:	91 11       	cpse	r25, r1
    361a:	08 c0       	rjmp	.+16     	; 0x362c <prvGetNextExpireTime+0x28>
    361c:	07 80       	ldd	r0, Z+7	; 0x07
    361e:	f0 85       	ldd	r31, Z+8	; 0x08
    3620:	e0 2d       	mov	r30, r0
    3622:	60 81       	ld	r22, Z
    3624:	71 81       	ldd	r23, Z+1	; 0x01
    3626:	82 81       	ldd	r24, Z+2	; 0x02
    3628:	93 81       	ldd	r25, Z+3	; 0x03
    362a:	08 95       	ret
    362c:	60 e0       	ldi	r22, 0x00	; 0
    362e:	70 e0       	ldi	r23, 0x00	; 0
    3630:	cb 01       	movw	r24, r22
    3632:	08 95       	ret

00003634 <prvInsertTimerInActiveList>:
    3634:	cf 92       	push	r12
    3636:	df 92       	push	r13
    3638:	ef 92       	push	r14
    363a:	ff 92       	push	r15
    363c:	0f 93       	push	r16
    363e:	1f 93       	push	r17
    3640:	fc 01       	movw	r30, r24
    3642:	42 83       	std	Z+2, r20	; 0x02
    3644:	53 83       	std	Z+3, r21	; 0x03
    3646:	64 83       	std	Z+4, r22	; 0x04
    3648:	75 83       	std	Z+5, r23	; 0x05
    364a:	93 87       	std	Z+11, r25	; 0x0b
    364c:	82 87       	std	Z+10, r24	; 0x0a
    364e:	04 17       	cp	r16, r20
    3650:	15 07       	cpc	r17, r21
    3652:	26 07       	cpc	r18, r22
    3654:	37 07       	cpc	r19, r23
    3656:	c0 f0       	brcs	.+48     	; 0x3688 <prvInsertTimerInActiveList+0x54>
    3658:	0c 19       	sub	r16, r12
    365a:	1d 09       	sbc	r17, r13
    365c:	2e 09       	sbc	r18, r14
    365e:	3f 09       	sbc	r19, r15
    3660:	86 85       	ldd	r24, Z+14	; 0x0e
    3662:	97 85       	ldd	r25, Z+15	; 0x0f
    3664:	a0 89       	ldd	r26, Z+16	; 0x10
    3666:	b1 89       	ldd	r27, Z+17	; 0x11
    3668:	08 17       	cp	r16, r24
    366a:	19 07       	cpc	r17, r25
    366c:	2a 07       	cpc	r18, r26
    366e:	3b 07       	cpc	r19, r27
    3670:	00 f5       	brcc	.+64     	; 0x36b2 <prvInsertTimerInActiveList+0x7e>
    3672:	bf 01       	movw	r22, r30
    3674:	6e 5f       	subi	r22, 0xFE	; 254
    3676:	7f 4f       	sbci	r23, 0xFF	; 255
    3678:	80 91 ff 15 	lds	r24, 0x15FF	; 0x8015ff <pxOverflowTimerList>
    367c:	90 91 00 16 	lds	r25, 0x1600	; 0x801600 <pxOverflowTimerList+0x1>
    3680:	0e 94 2c 06 	call	0xc58	; 0xc58 <vListInsert>
    3684:	80 e0       	ldi	r24, 0x00	; 0
    3686:	18 c0       	rjmp	.+48     	; 0x36b8 <prvInsertTimerInActiveList+0x84>
    3688:	0c 15       	cp	r16, r12
    368a:	1d 05       	cpc	r17, r13
    368c:	2e 05       	cpc	r18, r14
    368e:	3f 05       	cpc	r19, r15
    3690:	28 f4       	brcc	.+10     	; 0x369c <prvInsertTimerInActiveList+0x68>
    3692:	4c 15       	cp	r20, r12
    3694:	5d 05       	cpc	r21, r13
    3696:	6e 05       	cpc	r22, r14
    3698:	7f 05       	cpc	r23, r15
    369a:	68 f4       	brcc	.+26     	; 0x36b6 <prvInsertTimerInActiveList+0x82>
    369c:	bf 01       	movw	r22, r30
    369e:	6e 5f       	subi	r22, 0xFE	; 254
    36a0:	7f 4f       	sbci	r23, 0xFF	; 255
    36a2:	80 91 01 16 	lds	r24, 0x1601	; 0x801601 <pxCurrentTimerList>
    36a6:	90 91 02 16 	lds	r25, 0x1602	; 0x801602 <pxCurrentTimerList+0x1>
    36aa:	0e 94 2c 06 	call	0xc58	; 0xc58 <vListInsert>
    36ae:	80 e0       	ldi	r24, 0x00	; 0
    36b0:	03 c0       	rjmp	.+6      	; 0x36b8 <prvInsertTimerInActiveList+0x84>
    36b2:	81 e0       	ldi	r24, 0x01	; 1
    36b4:	01 c0       	rjmp	.+2      	; 0x36b8 <prvInsertTimerInActiveList+0x84>
    36b6:	81 e0       	ldi	r24, 0x01	; 1
    36b8:	1f 91       	pop	r17
    36ba:	0f 91       	pop	r16
    36bc:	ff 90       	pop	r15
    36be:	ef 90       	pop	r14
    36c0:	df 90       	pop	r13
    36c2:	cf 90       	pop	r12
    36c4:	08 95       	ret

000036c6 <prvCheckForValidListAndQueue>:
    36c6:	0f b6       	in	r0, 0x3f	; 63
    36c8:	f8 94       	cli
    36ca:	0f 92       	push	r0
    36cc:	80 91 fd 15 	lds	r24, 0x15FD	; 0x8015fd <xTimerQueue>
    36d0:	90 91 fe 15 	lds	r25, 0x15FE	; 0x8015fe <xTimerQueue+0x1>
    36d4:	89 2b       	or	r24, r25
    36d6:	e9 f4       	brne	.+58     	; 0x3712 <prvCheckForValidListAndQueue+0x4c>
    36d8:	8e e0       	ldi	r24, 0x0E	; 14
    36da:	96 e1       	ldi	r25, 0x16	; 22
    36dc:	0e 94 17 06 	call	0xc2e	; 0xc2e <vListInitialise>
    36e0:	83 e0       	ldi	r24, 0x03	; 3
    36e2:	96 e1       	ldi	r25, 0x16	; 22
    36e4:	0e 94 17 06 	call	0xc2e	; 0xc2e <vListInitialise>
    36e8:	8e e0       	ldi	r24, 0x0E	; 14
    36ea:	96 e1       	ldi	r25, 0x16	; 22
    36ec:	90 93 02 16 	sts	0x1602, r25	; 0x801602 <pxCurrentTimerList+0x1>
    36f0:	80 93 01 16 	sts	0x1601, r24	; 0x801601 <pxCurrentTimerList>
    36f4:	83 e0       	ldi	r24, 0x03	; 3
    36f6:	96 e1       	ldi	r25, 0x16	; 22
    36f8:	90 93 00 16 	sts	0x1600, r25	; 0x801600 <pxOverflowTimerList+0x1>
    36fc:	80 93 ff 15 	sts	0x15FF, r24	; 0x8015ff <pxOverflowTimerList>
    3700:	40 e0       	ldi	r20, 0x00	; 0
    3702:	67 e0       	ldi	r22, 0x07	; 7
    3704:	8a e0       	ldi	r24, 0x0A	; 10
    3706:	0e 94 da 08 	call	0x11b4	; 0x11b4 <xQueueGenericCreate>
    370a:	90 93 fe 15 	sts	0x15FE, r25	; 0x8015fe <xTimerQueue+0x1>
    370e:	80 93 fd 15 	sts	0x15FD, r24	; 0x8015fd <xTimerQueue>
    3712:	0f 90       	pop	r0
    3714:	0f be       	out	0x3f, r0	; 63
    3716:	08 95       	ret

00003718 <xTimerCreateTimerTask>:
    3718:	ef 92       	push	r14
    371a:	ff 92       	push	r15
    371c:	0f 93       	push	r16
    371e:	d3 df       	rcall	.-90     	; 0x36c6 <prvCheckForValidListAndQueue>
    3720:	80 91 fd 15 	lds	r24, 0x15FD	; 0x8015fd <xTimerQueue>
    3724:	90 91 fe 15 	lds	r25, 0x15FE	; 0x8015fe <xTimerQueue+0x1>
    3728:	89 2b       	or	r24, r25
    372a:	91 f0       	breq	.+36     	; 0x3750 <xTimerCreateTimerTask+0x38>
    372c:	0f 2e       	mov	r0, r31
    372e:	fb ef       	ldi	r31, 0xFB	; 251
    3730:	ef 2e       	mov	r14, r31
    3732:	f5 e1       	ldi	r31, 0x15	; 21
    3734:	ff 2e       	mov	r15, r31
    3736:	f0 2d       	mov	r31, r0
    3738:	03 e0       	ldi	r16, 0x03	; 3
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	40 ec       	ldi	r20, 0xC0	; 192
    3740:	50 e0       	ldi	r21, 0x00	; 0
    3742:	66 e9       	ldi	r22, 0x96	; 150
    3744:	73 e0       	ldi	r23, 0x03	; 3
    3746:	88 e5       	ldi	r24, 0x58	; 88
    3748:	91 e0       	ldi	r25, 0x01	; 1
    374a:	0e 94 8d 10 	call	0x211a	; 0x211a <xTaskCreate>
    374e:	01 c0       	rjmp	.+2      	; 0x3752 <xTimerCreateTimerTask+0x3a>
    3750:	80 e0       	ldi	r24, 0x00	; 0
    3752:	0f 91       	pop	r16
    3754:	ff 90       	pop	r15
    3756:	ef 90       	pop	r14
    3758:	08 95       	ret

0000375a <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    375a:	8f 92       	push	r8
    375c:	9f 92       	push	r9
    375e:	af 92       	push	r10
    3760:	bf 92       	push	r11
    3762:	cf 92       	push	r12
    3764:	df 92       	push	r13
    3766:	ef 92       	push	r14
    3768:	ff 92       	push	r15
    376a:	0f 93       	push	r16
    376c:	1f 93       	push	r17
    376e:	cf 93       	push	r28
    3770:	df 93       	push	r29
    3772:	cd b7       	in	r28, 0x3d	; 61
    3774:	de b7       	in	r29, 0x3e	; 62
    3776:	27 97       	sbiw	r28, 0x07	; 7
    3778:	0f b6       	in	r0, 0x3f	; 63
    377a:	f8 94       	cli
    377c:	de bf       	out	0x3e, r29	; 62
    377e:	0f be       	out	0x3f, r0	; 63
    3780:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3782:	e0 91 fd 15 	lds	r30, 0x15FD	; 0x8015fd <xTimerQueue>
    3786:	f0 91 fe 15 	lds	r31, 0x15FE	; 0x8015fe <xTimerQueue+0x1>
    378a:	30 97       	sbiw	r30, 0x00	; 0
    378c:	81 f1       	breq	.+96     	; 0x37ee <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    378e:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3790:	2a 83       	std	Y+2, r18	; 0x02
    3792:	3b 83       	std	Y+3, r19	; 0x03
    3794:	4c 83       	std	Y+4, r20	; 0x04
    3796:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3798:	9f 83       	std	Y+7, r25	; 0x07
    379a:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    379c:	66 30       	cpi	r22, 0x06	; 6
    379e:	f4 f4       	brge	.+60     	; 0x37dc <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    37a0:	c3 da       	rcall	.-2682   	; 0x2d28 <xTaskGetSchedulerState>
    37a2:	82 30       	cpi	r24, 0x02	; 2
    37a4:	69 f4       	brne	.+26     	; 0x37c0 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    37a6:	00 e0       	ldi	r16, 0x00	; 0
    37a8:	a7 01       	movw	r20, r14
    37aa:	96 01       	movw	r18, r12
    37ac:	be 01       	movw	r22, r28
    37ae:	6f 5f       	subi	r22, 0xFF	; 255
    37b0:	7f 4f       	sbci	r23, 0xFF	; 255
    37b2:	80 91 fd 15 	lds	r24, 0x15FD	; 0x8015fd <xTimerQueue>
    37b6:	90 91 fe 15 	lds	r25, 0x15FE	; 0x8015fe <xTimerQueue+0x1>
    37ba:	0e 94 fd 08 	call	0x11fa	; 0x11fa <xQueueGenericSend>
    37be:	18 c0       	rjmp	.+48     	; 0x37f0 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    37c0:	00 e0       	ldi	r16, 0x00	; 0
    37c2:	20 e0       	ldi	r18, 0x00	; 0
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	a9 01       	movw	r20, r18
    37c8:	be 01       	movw	r22, r28
    37ca:	6f 5f       	subi	r22, 0xFF	; 255
    37cc:	7f 4f       	sbci	r23, 0xFF	; 255
    37ce:	80 91 fd 15 	lds	r24, 0x15FD	; 0x8015fd <xTimerQueue>
    37d2:	90 91 fe 15 	lds	r25, 0x15FE	; 0x8015fe <xTimerQueue+0x1>
    37d6:	0e 94 fd 08 	call	0x11fa	; 0x11fa <xQueueGenericSend>
    37da:	0a c0       	rjmp	.+20     	; 0x37f0 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    37dc:	20 e0       	ldi	r18, 0x00	; 0
    37de:	a8 01       	movw	r20, r16
    37e0:	be 01       	movw	r22, r28
    37e2:	6f 5f       	subi	r22, 0xFF	; 255
    37e4:	7f 4f       	sbci	r23, 0xFF	; 255
    37e6:	cf 01       	movw	r24, r30
    37e8:	0e 94 ad 09 	call	0x135a	; 0x135a <xQueueGenericSendFromISR>
    37ec:	01 c0       	rjmp	.+2      	; 0x37f0 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    37ee:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    37f0:	27 96       	adiw	r28, 0x07	; 7
    37f2:	0f b6       	in	r0, 0x3f	; 63
    37f4:	f8 94       	cli
    37f6:	de bf       	out	0x3e, r29	; 62
    37f8:	0f be       	out	0x3f, r0	; 63
    37fa:	cd bf       	out	0x3d, r28	; 61
    37fc:	df 91       	pop	r29
    37fe:	cf 91       	pop	r28
    3800:	1f 91       	pop	r17
    3802:	0f 91       	pop	r16
    3804:	ff 90       	pop	r15
    3806:	ef 90       	pop	r14
    3808:	df 90       	pop	r13
    380a:	cf 90       	pop	r12
    380c:	bf 90       	pop	r11
    380e:	af 90       	pop	r10
    3810:	9f 90       	pop	r9
    3812:	8f 90       	pop	r8
    3814:	08 95       	ret

00003816 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    3816:	8f 92       	push	r8
    3818:	9f 92       	push	r9
    381a:	af 92       	push	r10
    381c:	bf 92       	push	r11
    381e:	cf 92       	push	r12
    3820:	df 92       	push	r13
    3822:	ef 92       	push	r14
    3824:	ff 92       	push	r15
    3826:	0f 93       	push	r16
    3828:	1f 93       	push	r17
    382a:	cf 93       	push	r28
    382c:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    382e:	3b c0       	rjmp	.+118    	; 0x38a6 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3830:	07 80       	ldd	r0, Z+7	; 0x07
    3832:	f0 85       	ldd	r31, Z+8	; 0x08
    3834:	e0 2d       	mov	r30, r0
    3836:	80 80       	ld	r8, Z
    3838:	91 80       	ldd	r9, Z+1	; 0x01
    383a:	a2 80       	ldd	r10, Z+2	; 0x02
    383c:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    383e:	c0 85       	ldd	r28, Z+8	; 0x08
    3840:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3842:	8e 01       	movw	r16, r28
    3844:	0e 5f       	subi	r16, 0xFE	; 254
    3846:	1f 4f       	sbci	r17, 0xFF	; 255
    3848:	c8 01       	movw	r24, r16
    384a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    384e:	ec 89       	ldd	r30, Y+20	; 0x14
    3850:	fd 89       	ldd	r31, Y+21	; 0x15
    3852:	ce 01       	movw	r24, r28
    3854:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3856:	8e 89       	ldd	r24, Y+22	; 0x16
    3858:	82 ff       	sbrs	r24, 2
    385a:	25 c0       	rjmp	.+74     	; 0x38a6 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    385c:	8e 85       	ldd	r24, Y+14	; 0x0e
    385e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3860:	a8 89       	ldd	r26, Y+16	; 0x10
    3862:	b9 89       	ldd	r27, Y+17	; 0x11
    3864:	88 0d       	add	r24, r8
    3866:	99 1d       	adc	r25, r9
    3868:	aa 1d       	adc	r26, r10
    386a:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    386c:	88 16       	cp	r8, r24
    386e:	99 06       	cpc	r9, r25
    3870:	aa 06       	cpc	r10, r26
    3872:	bb 06       	cpc	r11, r27
    3874:	70 f4       	brcc	.+28     	; 0x3892 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3876:	8a 83       	std	Y+2, r24	; 0x02
    3878:	9b 83       	std	Y+3, r25	; 0x03
    387a:	ac 83       	std	Y+4, r26	; 0x04
    387c:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    387e:	db 87       	std	Y+11, r29	; 0x0b
    3880:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3882:	b8 01       	movw	r22, r16
    3884:	80 91 01 16 	lds	r24, 0x1601	; 0x801601 <pxCurrentTimerList>
    3888:	90 91 02 16 	lds	r25, 0x1602	; 0x801602 <pxCurrentTimerList+0x1>
    388c:	0e 94 2c 06 	call	0xc58	; 0xc58 <vListInsert>
    3890:	0a c0       	rjmp	.+20     	; 0x38a6 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3892:	c1 2c       	mov	r12, r1
    3894:	d1 2c       	mov	r13, r1
    3896:	76 01       	movw	r14, r12
    3898:	00 e0       	ldi	r16, 0x00	; 0
    389a:	10 e0       	ldi	r17, 0x00	; 0
    389c:	a5 01       	movw	r20, r10
    389e:	94 01       	movw	r18, r8
    38a0:	60 e0       	ldi	r22, 0x00	; 0
    38a2:	ce 01       	movw	r24, r28
    38a4:	5a df       	rcall	.-332    	; 0x375a <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    38a6:	e0 91 01 16 	lds	r30, 0x1601	; 0x801601 <pxCurrentTimerList>
    38aa:	f0 91 02 16 	lds	r31, 0x1602	; 0x801602 <pxCurrentTimerList+0x1>
    38ae:	80 81       	ld	r24, Z
    38b0:	81 11       	cpse	r24, r1
    38b2:	be cf       	rjmp	.-132    	; 0x3830 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    38b4:	80 91 ff 15 	lds	r24, 0x15FF	; 0x8015ff <pxOverflowTimerList>
    38b8:	90 91 00 16 	lds	r25, 0x1600	; 0x801600 <pxOverflowTimerList+0x1>
    38bc:	90 93 02 16 	sts	0x1602, r25	; 0x801602 <pxCurrentTimerList+0x1>
    38c0:	80 93 01 16 	sts	0x1601, r24	; 0x801601 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    38c4:	f0 93 00 16 	sts	0x1600, r31	; 0x801600 <pxOverflowTimerList+0x1>
    38c8:	e0 93 ff 15 	sts	0x15FF, r30	; 0x8015ff <pxOverflowTimerList>
    }
    38cc:	df 91       	pop	r29
    38ce:	cf 91       	pop	r28
    38d0:	1f 91       	pop	r17
    38d2:	0f 91       	pop	r16
    38d4:	ff 90       	pop	r15
    38d6:	ef 90       	pop	r14
    38d8:	df 90       	pop	r13
    38da:	cf 90       	pop	r12
    38dc:	bf 90       	pop	r11
    38de:	af 90       	pop	r10
    38e0:	9f 90       	pop	r9
    38e2:	8f 90       	pop	r8
    38e4:	08 95       	ret

000038e6 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    38e6:	cf 92       	push	r12
    38e8:	df 92       	push	r13
    38ea:	ef 92       	push	r14
    38ec:	ff 92       	push	r15
    38ee:	cf 93       	push	r28
    38f0:	df 93       	push	r29
    38f2:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    38f4:	0e 94 17 11 	call	0x222e	; 0x222e <xTaskGetTickCount>
    38f8:	6b 01       	movw	r12, r22
    38fa:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    38fc:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <xLastTime.2436>
    3900:	90 91 f8 15 	lds	r25, 0x15F8	; 0x8015f8 <xLastTime.2436+0x1>
    3904:	a0 91 f9 15 	lds	r26, 0x15F9	; 0x8015f9 <xLastTime.2436+0x2>
    3908:	b0 91 fa 15 	lds	r27, 0x15FA	; 0x8015fa <xLastTime.2436+0x3>
    390c:	c8 16       	cp	r12, r24
    390e:	d9 06       	cpc	r13, r25
    3910:	ea 06       	cpc	r14, r26
    3912:	fb 06       	cpc	r15, r27
    3914:	20 f4       	brcc	.+8      	; 0x391e <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    3916:	7f df       	rcall	.-258    	; 0x3816 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	88 83       	st	Y, r24
    391c:	01 c0       	rjmp	.+2      	; 0x3920 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    391e:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3920:	c0 92 f7 15 	sts	0x15F7, r12	; 0x8015f7 <xLastTime.2436>
    3924:	d0 92 f8 15 	sts	0x15F8, r13	; 0x8015f8 <xLastTime.2436+0x1>
    3928:	e0 92 f9 15 	sts	0x15F9, r14	; 0x8015f9 <xLastTime.2436+0x2>
    392c:	f0 92 fa 15 	sts	0x15FA, r15	; 0x8015fa <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3930:	c7 01       	movw	r24, r14
    3932:	b6 01       	movw	r22, r12
    3934:	df 91       	pop	r29
    3936:	cf 91       	pop	r28
    3938:	ff 90       	pop	r15
    393a:	ef 90       	pop	r14
    393c:	df 90       	pop	r13
    393e:	cf 90       	pop	r12
    3940:	08 95       	ret

00003942 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3942:	4f 92       	push	r4
    3944:	5f 92       	push	r5
    3946:	6f 92       	push	r6
    3948:	7f 92       	push	r7
    394a:	8f 92       	push	r8
    394c:	9f 92       	push	r9
    394e:	af 92       	push	r10
    3950:	bf 92       	push	r11
    3952:	cf 92       	push	r12
    3954:	df 92       	push	r13
    3956:	ef 92       	push	r14
    3958:	ff 92       	push	r15
    395a:	0f 93       	push	r16
    395c:	1f 93       	push	r17
    395e:	cf 93       	push	r28
    3960:	df 93       	push	r29
    3962:	4b 01       	movw	r8, r22
    3964:	5c 01       	movw	r10, r24
    3966:	29 01       	movw	r4, r18
    3968:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    396a:	e0 91 01 16 	lds	r30, 0x1601	; 0x801601 <pxCurrentTimerList>
    396e:	f0 91 02 16 	lds	r31, 0x1602	; 0x801602 <pxCurrentTimerList+0x1>
    3972:	07 80       	ldd	r0, Z+7	; 0x07
    3974:	f0 85       	ldd	r31, Z+8	; 0x08
    3976:	e0 2d       	mov	r30, r0
    3978:	c0 85       	ldd	r28, Z+8	; 0x08
    397a:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    397c:	ce 01       	movw	r24, r28
    397e:	02 96       	adiw	r24, 0x02	; 2
    3980:	0e 94 69 06 	call	0xcd2	; 0xcd2 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3984:	8e 89       	ldd	r24, Y+22	; 0x16
    3986:	82 ff       	sbrs	r24, 2
    3988:	1b c0       	rjmp	.+54     	; 0x39c0 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    398a:	4e 85       	ldd	r20, Y+14	; 0x0e
    398c:	5f 85       	ldd	r21, Y+15	; 0x0f
    398e:	68 89       	ldd	r22, Y+16	; 0x10
    3990:	79 89       	ldd	r23, Y+17	; 0x11
    3992:	48 0d       	add	r20, r8
    3994:	59 1d       	adc	r21, r9
    3996:	6a 1d       	adc	r22, r10
    3998:	7b 1d       	adc	r23, r11
    399a:	75 01       	movw	r14, r10
    399c:	64 01       	movw	r12, r8
    399e:	93 01       	movw	r18, r6
    39a0:	82 01       	movw	r16, r4
    39a2:	ce 01       	movw	r24, r28
    39a4:	47 de       	rcall	.-882    	; 0x3634 <prvInsertTimerInActiveList>
    39a6:	88 23       	and	r24, r24
    39a8:	69 f0       	breq	.+26     	; 0x39c4 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    39aa:	c1 2c       	mov	r12, r1
    39ac:	d1 2c       	mov	r13, r1
    39ae:	76 01       	movw	r14, r12
    39b0:	00 e0       	ldi	r16, 0x00	; 0
    39b2:	10 e0       	ldi	r17, 0x00	; 0
    39b4:	a5 01       	movw	r20, r10
    39b6:	94 01       	movw	r18, r8
    39b8:	60 e0       	ldi	r22, 0x00	; 0
    39ba:	ce 01       	movw	r24, r28
    39bc:	ce de       	rcall	.-612    	; 0x375a <xTimerGenericCommand>
    39be:	02 c0       	rjmp	.+4      	; 0x39c4 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    39c0:	8e 7f       	andi	r24, 0xFE	; 254
    39c2:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    39c4:	ec 89       	ldd	r30, Y+20	; 0x14
    39c6:	fd 89       	ldd	r31, Y+21	; 0x15
    39c8:	ce 01       	movw	r24, r28
    39ca:	19 95       	eicall
    }
    39cc:	df 91       	pop	r29
    39ce:	cf 91       	pop	r28
    39d0:	1f 91       	pop	r17
    39d2:	0f 91       	pop	r16
    39d4:	ff 90       	pop	r15
    39d6:	ef 90       	pop	r14
    39d8:	df 90       	pop	r13
    39da:	cf 90       	pop	r12
    39dc:	bf 90       	pop	r11
    39de:	af 90       	pop	r10
    39e0:	9f 90       	pop	r9
    39e2:	8f 90       	pop	r8
    39e4:	7f 90       	pop	r7
    39e6:	6f 90       	pop	r6
    39e8:	5f 90       	pop	r5
    39ea:	4f 90       	pop	r4
    39ec:	08 95       	ret

000039ee <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    39ee:	8f 92       	push	r8
    39f0:	9f 92       	push	r9
    39f2:	af 92       	push	r10
    39f4:	bf 92       	push	r11
    39f6:	cf 92       	push	r12
    39f8:	df 92       	push	r13
    39fa:	ef 92       	push	r14
    39fc:	ff 92       	push	r15
    39fe:	1f 93       	push	r17
    3a00:	cf 93       	push	r28
    3a02:	df 93       	push	r29
    3a04:	1f 92       	push	r1
    3a06:	cd b7       	in	r28, 0x3d	; 61
    3a08:	de b7       	in	r29, 0x3e	; 62
    3a0a:	6b 01       	movw	r12, r22
    3a0c:	7c 01       	movw	r14, r24
    3a0e:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3a10:	0e 94 11 11 	call	0x2222	; 0x2222 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3a14:	ce 01       	movw	r24, r28
    3a16:	01 96       	adiw	r24, 0x01	; 1
    3a18:	66 df       	rcall	.-308    	; 0x38e6 <prvSampleTimeNow>
    3a1a:	4b 01       	movw	r8, r22
    3a1c:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3a1e:	89 81       	ldd	r24, Y+1	; 0x01
    3a20:	81 11       	cpse	r24, r1
    3a22:	2d c0       	rjmp	.+90     	; 0x3a7e <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3a24:	11 11       	cpse	r17, r1
    3a26:	0d c0       	rjmp	.+26     	; 0x3a42 <prvProcessTimerOrBlockTask+0x54>
    3a28:	8c 14       	cp	r8, r12
    3a2a:	9d 04       	cpc	r9, r13
    3a2c:	ae 04       	cpc	r10, r14
    3a2e:	bf 04       	cpc	r11, r15
    3a30:	40 f0       	brcs	.+16     	; 0x3a42 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3a32:	0e 94 51 12 	call	0x24a2	; 0x24a2 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3a36:	a5 01       	movw	r20, r10
    3a38:	94 01       	movw	r18, r8
    3a3a:	c7 01       	movw	r24, r14
    3a3c:	b6 01       	movw	r22, r12
    3a3e:	81 df       	rcall	.-254    	; 0x3942 <prvProcessExpiredTimer>
    3a40:	20 c0       	rjmp	.+64     	; 0x3a82 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3a42:	11 23       	and	r17, r17
    3a44:	41 f0       	breq	.+16     	; 0x3a56 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3a46:	e0 91 ff 15 	lds	r30, 0x15FF	; 0x8015ff <pxOverflowTimerList>
    3a4a:	f0 91 00 16 	lds	r31, 0x1600	; 0x801600 <pxOverflowTimerList+0x1>
    3a4e:	80 81       	ld	r24, Z
    3a50:	11 e0       	ldi	r17, 0x01	; 1
    3a52:	81 11       	cpse	r24, r1
    3a54:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3a56:	b7 01       	movw	r22, r14
    3a58:	a6 01       	movw	r20, r12
    3a5a:	48 19       	sub	r20, r8
    3a5c:	59 09       	sbc	r21, r9
    3a5e:	6a 09       	sbc	r22, r10
    3a60:	7b 09       	sbc	r23, r11
    3a62:	21 2f       	mov	r18, r17
    3a64:	80 91 fd 15 	lds	r24, 0x15FD	; 0x8015fd <xTimerQueue>
    3a68:	90 91 fe 15 	lds	r25, 0x15FE	; 0x8015fe <xTimerQueue+0x1>
    3a6c:	0e 94 28 0b 	call	0x1650	; 0x1650 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3a70:	0e 94 51 12 	call	0x24a2	; 0x24a2 <xTaskResumeAll>
    3a74:	81 11       	cpse	r24, r1
    3a76:	05 c0       	rjmp	.+10     	; 0x3a82 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3a78:	0e 94 e5 06 	call	0xdca	; 0xdca <vPortYield>
    3a7c:	02 c0       	rjmp	.+4      	; 0x3a82 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3a7e:	0e 94 51 12 	call	0x24a2	; 0x24a2 <xTaskResumeAll>
            }
        }
    }
    3a82:	0f 90       	pop	r0
    3a84:	df 91       	pop	r29
    3a86:	cf 91       	pop	r28
    3a88:	1f 91       	pop	r17
    3a8a:	ff 90       	pop	r15
    3a8c:	ef 90       	pop	r14
    3a8e:	df 90       	pop	r13
    3a90:	cf 90       	pop	r12
    3a92:	bf 90       	pop	r11
    3a94:	af 90       	pop	r10
    3a96:	9f 90       	pop	r9
    3a98:	8f 90       	pop	r8
    3a9a:	08 95       	ret

00003a9c <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3a9c:	af 92       	push	r10
    3a9e:	bf 92       	push	r11
    3aa0:	cf 92       	push	r12
    3aa2:	df 92       	push	r13
    3aa4:	ef 92       	push	r14
    3aa6:	ff 92       	push	r15
    3aa8:	0f 93       	push	r16
    3aaa:	1f 93       	push	r17
    3aac:	cf 93       	push	r28
    3aae:	df 93       	push	r29
    3ab0:	cd b7       	in	r28, 0x3d	; 61
    3ab2:	de b7       	in	r29, 0x3e	; 62
    3ab4:	28 97       	sbiw	r28, 0x08	; 8
    3ab6:	0f b6       	in	r0, 0x3f	; 63
    3ab8:	f8 94       	cli
    3aba:	de bf       	out	0x3e, r29	; 62
    3abc:	0f be       	out	0x3f, r0	; 63
    3abe:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3ac0:	82 c0       	rjmp	.+260    	; 0x3bc6 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3ac2:	89 81       	ldd	r24, Y+1	; 0x01
    3ac4:	88 23       	and	r24, r24
    3ac6:	0c f4       	brge	.+2      	; 0x3aca <prvProcessReceivedCommands+0x2e>
    3ac8:	7e c0       	rjmp	.+252    	; 0x3bc6 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3aca:	ae 80       	ldd	r10, Y+6	; 0x06
    3acc:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3ace:	d5 01       	movw	r26, r10
    3ad0:	1c 96       	adiw	r26, 0x0c	; 12
    3ad2:	8d 91       	ld	r24, X+
    3ad4:	9c 91       	ld	r25, X
    3ad6:	1d 97       	sbiw	r26, 0x0d	; 13
    3ad8:	89 2b       	or	r24, r25
    3ada:	21 f0       	breq	.+8      	; 0x3ae4 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3adc:	c5 01       	movw	r24, r10
    3ade:	02 96       	adiw	r24, 0x02	; 2
    3ae0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3ae4:	ce 01       	movw	r24, r28
    3ae6:	08 96       	adiw	r24, 0x08	; 8
    3ae8:	fe de       	rcall	.-516    	; 0x38e6 <prvSampleTimeNow>
    3aea:	8b 01       	movw	r16, r22
    3aec:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3aee:	e9 81       	ldd	r30, Y+1	; 0x01
    3af0:	0e 2e       	mov	r0, r30
    3af2:	00 0c       	add	r0, r0
    3af4:	ff 0b       	sbc	r31, r31
    3af6:	ea 30       	cpi	r30, 0x0A	; 10
    3af8:	f1 05       	cpc	r31, r1
    3afa:	08 f0       	brcs	.+2      	; 0x3afe <prvProcessReceivedCommands+0x62>
    3afc:	64 c0       	rjmp	.+200    	; 0x3bc6 <prvProcessReceivedCommands+0x12a>
    3afe:	88 27       	eor	r24, r24
    3b00:	ee 58       	subi	r30, 0x8E	; 142
    3b02:	ff 4f       	sbci	r31, 0xFF	; 255
    3b04:	8f 4f       	sbci	r24, 0xFF	; 255
    3b06:	0c 94 a5 33 	jmp	0x674a	; 0x674a <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3b0a:	f5 01       	movw	r30, r10
    3b0c:	86 89       	ldd	r24, Z+22	; 0x16
    3b0e:	81 60       	ori	r24, 0x01	; 1
    3b10:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3b12:	ca 80       	ldd	r12, Y+2	; 0x02
    3b14:	db 80       	ldd	r13, Y+3	; 0x03
    3b16:	ec 80       	ldd	r14, Y+4	; 0x04
    3b18:	fd 80       	ldd	r15, Y+5	; 0x05
    3b1a:	46 85       	ldd	r20, Z+14	; 0x0e
    3b1c:	57 85       	ldd	r21, Z+15	; 0x0f
    3b1e:	60 89       	ldd	r22, Z+16	; 0x10
    3b20:	71 89       	ldd	r23, Z+17	; 0x11
    3b22:	4c 0d       	add	r20, r12
    3b24:	5d 1d       	adc	r21, r13
    3b26:	6e 1d       	adc	r22, r14
    3b28:	7f 1d       	adc	r23, r15
    3b2a:	c5 01       	movw	r24, r10
    3b2c:	83 dd       	rcall	.-1274   	; 0x3634 <prvInsertTimerInActiveList>
    3b2e:	88 23       	and	r24, r24
    3b30:	09 f4       	brne	.+2      	; 0x3b34 <prvProcessReceivedCommands+0x98>
    3b32:	49 c0       	rjmp	.+146    	; 0x3bc6 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3b34:	d5 01       	movw	r26, r10
    3b36:	54 96       	adiw	r26, 0x14	; 20
    3b38:	ed 91       	ld	r30, X+
    3b3a:	fc 91       	ld	r31, X
    3b3c:	55 97       	sbiw	r26, 0x15	; 21
    3b3e:	c5 01       	movw	r24, r10
    3b40:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3b42:	f5 01       	movw	r30, r10
    3b44:	86 89       	ldd	r24, Z+22	; 0x16
    3b46:	82 ff       	sbrs	r24, 2
    3b48:	3e c0       	rjmp	.+124    	; 0x3bc6 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3b4a:	4a 81       	ldd	r20, Y+2	; 0x02
    3b4c:	5b 81       	ldd	r21, Y+3	; 0x03
    3b4e:	6c 81       	ldd	r22, Y+4	; 0x04
    3b50:	7d 81       	ldd	r23, Y+5	; 0x05
    3b52:	86 85       	ldd	r24, Z+14	; 0x0e
    3b54:	97 85       	ldd	r25, Z+15	; 0x0f
    3b56:	a0 89       	ldd	r26, Z+16	; 0x10
    3b58:	b1 89       	ldd	r27, Z+17	; 0x11
    3b5a:	9a 01       	movw	r18, r20
    3b5c:	ab 01       	movw	r20, r22
    3b5e:	28 0f       	add	r18, r24
    3b60:	39 1f       	adc	r19, r25
    3b62:	4a 1f       	adc	r20, r26
    3b64:	5b 1f       	adc	r21, r27
    3b66:	c1 2c       	mov	r12, r1
    3b68:	d1 2c       	mov	r13, r1
    3b6a:	76 01       	movw	r14, r12
    3b6c:	00 e0       	ldi	r16, 0x00	; 0
    3b6e:	10 e0       	ldi	r17, 0x00	; 0
    3b70:	60 e0       	ldi	r22, 0x00	; 0
    3b72:	c5 01       	movw	r24, r10
    3b74:	f2 dd       	rcall	.-1052   	; 0x375a <xTimerGenericCommand>
    3b76:	27 c0       	rjmp	.+78     	; 0x3bc6 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3b78:	d5 01       	movw	r26, r10
    3b7a:	56 96       	adiw	r26, 0x16	; 22
    3b7c:	8c 91       	ld	r24, X
    3b7e:	56 97       	sbiw	r26, 0x16	; 22
    3b80:	8e 7f       	andi	r24, 0xFE	; 254
    3b82:	56 96       	adiw	r26, 0x16	; 22
    3b84:	8c 93       	st	X, r24
                        break;
    3b86:	1f c0       	rjmp	.+62     	; 0x3bc6 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3b88:	f5 01       	movw	r30, r10
    3b8a:	86 89       	ldd	r24, Z+22	; 0x16
    3b8c:	81 60       	ori	r24, 0x01	; 1
    3b8e:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3b90:	4a 81       	ldd	r20, Y+2	; 0x02
    3b92:	5b 81       	ldd	r21, Y+3	; 0x03
    3b94:	6c 81       	ldd	r22, Y+4	; 0x04
    3b96:	7d 81       	ldd	r23, Y+5	; 0x05
    3b98:	46 87       	std	Z+14, r20	; 0x0e
    3b9a:	57 87       	std	Z+15, r21	; 0x0f
    3b9c:	60 8b       	std	Z+16, r22	; 0x10
    3b9e:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3ba0:	40 0f       	add	r20, r16
    3ba2:	51 1f       	adc	r21, r17
    3ba4:	62 1f       	adc	r22, r18
    3ba6:	73 1f       	adc	r23, r19
    3ba8:	68 01       	movw	r12, r16
    3baa:	79 01       	movw	r14, r18
    3bac:	c5 01       	movw	r24, r10
    3bae:	42 dd       	rcall	.-1404   	; 0x3634 <prvInsertTimerInActiveList>
                        break;
    3bb0:	0a c0       	rjmp	.+20     	; 0x3bc6 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3bb2:	f5 01       	movw	r30, r10
    3bb4:	86 89       	ldd	r24, Z+22	; 0x16
    3bb6:	81 fd       	sbrc	r24, 1
    3bb8:	04 c0       	rjmp	.+8      	; 0x3bc2 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3bba:	c5 01       	movw	r24, r10
    3bbc:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vPortFree>
    3bc0:	02 c0       	rjmp	.+4      	; 0x3bc6 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3bc2:	8e 7f       	andi	r24, 0xFE	; 254
    3bc4:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3bc6:	20 e0       	ldi	r18, 0x00	; 0
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	a9 01       	movw	r20, r18
    3bcc:	be 01       	movw	r22, r28
    3bce:	6f 5f       	subi	r22, 0xFF	; 255
    3bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    3bd2:	80 91 fd 15 	lds	r24, 0x15FD	; 0x8015fd <xTimerQueue>
    3bd6:	90 91 fe 15 	lds	r25, 0x15FE	; 0x8015fe <xTimerQueue+0x1>
    3bda:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <xQueueReceive>
    3bde:	81 11       	cpse	r24, r1
    3be0:	70 cf       	rjmp	.-288    	; 0x3ac2 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3be2:	28 96       	adiw	r28, 0x08	; 8
    3be4:	0f b6       	in	r0, 0x3f	; 63
    3be6:	f8 94       	cli
    3be8:	de bf       	out	0x3e, r29	; 62
    3bea:	0f be       	out	0x3f, r0	; 63
    3bec:	cd bf       	out	0x3d, r28	; 61
    3bee:	df 91       	pop	r29
    3bf0:	cf 91       	pop	r28
    3bf2:	1f 91       	pop	r17
    3bf4:	0f 91       	pop	r16
    3bf6:	ff 90       	pop	r15
    3bf8:	ef 90       	pop	r14
    3bfa:	df 90       	pop	r13
    3bfc:	cf 90       	pop	r12
    3bfe:	bf 90       	pop	r11
    3c00:	af 90       	pop	r10
    3c02:	08 95       	ret

00003c04 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3c04:	08 95       	ret

00003c06 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3c06:	84 b1       	in	r24, 0x04	; 4
    3c08:	80 68       	ori	r24, 0x80	; 128
    3c0a:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3c0c:	85 b1       	in	r24, 0x05	; 5
    3c0e:	80 68       	ori	r24, 0x80	; 128
    3c10:	85 b9       	out	0x05, r24	; 5
    3c12:	08 95       	ret

00003c14 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3c14:	83 b1       	in	r24, 0x03	; 3
    3c16:	80 68       	ori	r24, 0x80	; 128
    3c18:	83 b9       	out	0x03, r24	; 3
    3c1a:	08 95       	ret

00003c1c <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3c1c:	f4 df       	rcall	.-24     	; 0x3c06 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3c1e:	2f ef       	ldi	r18, 0xFF	; 255
    3c20:	80 e7       	ldi	r24, 0x70	; 112
    3c22:	92 e0       	ldi	r25, 0x02	; 2
    3c24:	21 50       	subi	r18, 0x01	; 1
    3c26:	80 40       	sbci	r24, 0x00	; 0
    3c28:	90 40       	sbci	r25, 0x00	; 0
    3c2a:	e1 f7       	brne	.-8      	; 0x3c24 <vApplicationMallocFailedHook+0x8>
    3c2c:	00 c0       	rjmp	.+0      	; 0x3c2e <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3c2e:	00 00       	nop
    3c30:	f1 df       	rcall	.-30     	; 0x3c14 <prvBlinkMainLed>
    3c32:	f5 cf       	rjmp	.-22     	; 0x3c1e <vApplicationMallocFailedHook+0x2>

00003c34 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3c34:	e8 df       	rcall	.-48     	; 0x3c06 <prvSetMainLedOn>
    3c36:	2f ef       	ldi	r18, 0xFF	; 255
    3c38:	87 ea       	ldi	r24, 0xA7	; 167
    3c3a:	91 e6       	ldi	r25, 0x61	; 97
    3c3c:	21 50       	subi	r18, 0x01	; 1
    3c3e:	80 40       	sbci	r24, 0x00	; 0
    3c40:	90 40       	sbci	r25, 0x00	; 0
    3c42:	e1 f7       	brne	.-8      	; 0x3c3c <vApplicationStackOverflowHook+0x8>
    3c44:	00 c0       	rjmp	.+0      	; 0x3c46 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3c46:	00 00       	nop
    3c48:	e5 df       	rcall	.-54     	; 0x3c14 <prvBlinkMainLed>
    3c4a:	f5 cf       	rjmp	.-22     	; 0x3c36 <vApplicationStackOverflowHook+0x2>

00003c4c <hih8120_handler_initialise>:
int16_t temperatureIn16 = 0;


void hih820_handler_task( void *pvParameters );

void hih8120_handler_initialise(UBaseType_t hih8120_task_priority){
    3c4c:	ef 92       	push	r14
    3c4e:	ff 92       	push	r15
    3c50:	0f 93       	push	r16
    3c52:	08 2f       	mov	r16, r24
	if ( HIH8120_OK == hih8120_initialise() ){
    3c54:	96 d2       	rcall	.+1324   	; 0x4182 <hih8120_initialise>
    3c56:	81 11       	cpse	r24, r1
    3c58:	0c c0       	rjmp	.+24     	; 0x3c72 <hih8120_handler_initialise+0x26>
			printf("%d\n",HIH8120_OK);
    3c5a:	1f 92       	push	r1
    3c5c:	1f 92       	push	r1
    3c5e:	8e e9       	ldi	r24, 0x9E	; 158
    3c60:	93 e0       	ldi	r25, 0x03	; 3
    3c62:	9f 93       	push	r25
    3c64:	8f 93       	push	r24
    3c66:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
    3c6a:	0f 90       	pop	r0
    3c6c:	0f 90       	pop	r0
    3c6e:	0f 90       	pop	r0
    3c70:	0f 90       	pop	r0
	}
	xTaskCreate(
    3c72:	e1 2c       	mov	r14, r1
    3c74:	f1 2c       	mov	r15, r1
    3c76:	20 e0       	ldi	r18, 0x00	; 0
    3c78:	30 e0       	ldi	r19, 0x00	; 0
    3c7a:	40 ec       	ldi	r20, 0xC0	; 192
    3c7c:	50 e0       	ldi	r21, 0x00	; 0
    3c7e:	62 ea       	ldi	r22, 0xA2	; 162
    3c80:	73 e0       	ldi	r23, 0x03	; 3
    3c82:	89 e6       	ldi	r24, 0x69	; 105
    3c84:	9e e1       	ldi	r25, 0x1E	; 30
    3c86:	0e 94 8d 10 	call	0x211a	; 0x211a <xTaskCreate>
	,  "Hih820Hand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  hih8120_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3c8a:	0f 91       	pop	r16
    3c8c:	ff 90       	pop	r15
    3c8e:	ef 90       	pop	r14
    3c90:	08 95       	ret

00003c92 <hih820_getHumidityInUint16>:
		}
	}
}

uint16_t hih820_getHumidityInUint16(){
	return humidityIn16/10;
    3c92:	20 91 1b 16 	lds	r18, 0x161B	; 0x80161b <humidityIn16>
    3c96:	30 91 1c 16 	lds	r19, 0x161C	; 0x80161c <humidityIn16+0x1>
    3c9a:	ad ec       	ldi	r26, 0xCD	; 205
    3c9c:	bc ec       	ldi	r27, 0xCC	; 204
    3c9e:	0e 94 ad 33 	call	0x675a	; 0x675a <__umulhisi3>
}
    3ca2:	96 95       	lsr	r25
    3ca4:	87 95       	ror	r24
    3ca6:	96 95       	lsr	r25
    3ca8:	87 95       	ror	r24
    3caa:	96 95       	lsr	r25
    3cac:	87 95       	ror	r24
    3cae:	08 95       	ret

00003cb0 <hih820_getTemperatureInUint16>:

int16_t hih820_getTemperatureInUint16(){
	return temperatureIn16/10;
    3cb0:	80 91 19 16 	lds	r24, 0x1619	; 0x801619 <temperatureIn16>
    3cb4:	90 91 1a 16 	lds	r25, 0x161A	; 0x80161a <temperatureIn16+0x1>
    3cb8:	6a e0       	ldi	r22, 0x0A	; 10
    3cba:	70 e0       	ldi	r23, 0x00	; 0
    3cbc:	0e 94 70 33 	call	0x66e0	; 0x66e0 <__divmodhi4>
    3cc0:	cb 01       	movw	r24, r22
}
    3cc2:	08 95       	ret

00003cc4 <hih820_aFunctionToSetBits>:
void hih820_aFunctionToSetBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Set bit 0 and bit 4 in xEventGroup. */
  uxBits = xEventGroupSetBits(
    3cc4:	40 e1       	ldi	r20, 0x10	; 16
    3cc6:	50 e0       	ldi	r21, 0x00	; 0
    3cc8:	60 e0       	ldi	r22, 0x00	; 0
    3cca:	70 e0       	ldi	r23, 0x00	; 0
    3ccc:	0c 94 30 04 	jmp	0x860	; 0x860 <xEventGroupSetBits>
    3cd0:	08 95       	ret

00003cd2 <hih820_handler_task>:
	,  hih8120_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void hih820_handler_task(void *pvParameters)
{
    3cd2:	cf 93       	push	r28
    3cd4:	df 93       	push	r29
    3cd6:	00 d0       	rcall	.+0      	; 0x3cd8 <hih820_handler_task+0x6>
    3cd8:	1f 92       	push	r1
    3cda:	cd b7       	in	r28, 0x3d	; 61
    3cdc:	de b7       	in	r29, 0x3e	; 62
	printf("start1");
    3cde:	8d ea       	ldi	r24, 0xAD	; 173
    3ce0:	93 e0       	ldi	r25, 0x03	; 3
    3ce2:	9f 93       	push	r25
    3ce4:	8f 93       	push	r24
    3ce6:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
	(void)pvParameters;
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    3cea:	0e 94 17 11 	call	0x222e	; 0x222e <xTaskGetTickCount>
    3cee:	69 83       	std	Y+1, r22	; 0x01
    3cf0:	7a 83       	std	Y+2, r23	; 0x02
    3cf2:	8b 83       	std	Y+3, r24	; 0x03
    3cf4:	9c 83       	std	Y+4, r25	; 0x04
    3cf6:	0f 90       	pop	r0
    3cf8:	0f 90       	pop	r0
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3cfa:	48 ea       	ldi	r20, 0xA8	; 168
    3cfc:	58 e4       	ldi	r21, 0x48	; 72
    3cfe:	60 e0       	ldi	r22, 0x00	; 0
    3d00:	70 e0       	ldi	r23, 0x00	; 0
    3d02:	ce 01       	movw	r24, r28
    3d04:	01 96       	adiw	r24, 0x01	; 1
    3d06:	0e 94 2d 13 	call	0x265a	; 0x265a <xTaskDelayUntil>
		printf("start2");
    3d0a:	84 eb       	ldi	r24, 0xB4	; 180
    3d0c:	93 e0       	ldi	r25, 0x03	; 3
    3d0e:	9f 93       	push	r25
    3d10:	8f 93       	push	r24
    3d12:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
		if (HIH8120_OK == hih8120_wakeup())
    3d16:	4d d2       	rcall	.+1178   	; 0x41b2 <hih8120_wakeup>
    3d18:	0f 90       	pop	r0
    3d1a:	0f 90       	pop	r0
    3d1c:	81 11       	cpse	r24, r1
    3d1e:	ed cf       	rjmp	.-38     	; 0x3cfa <hih820_handler_task+0x28>
		{
			printf("start4");
    3d20:	8b eb       	ldi	r24, 0xBB	; 187
    3d22:	93 e0       	ldi	r25, 0x03	; 3
    3d24:	9f 93       	push	r25
    3d26:	8f 93       	push	r24
    3d28:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
			vTaskDelay(50);
    3d2c:	62 e3       	ldi	r22, 0x32	; 50
    3d2e:	70 e0       	ldi	r23, 0x00	; 0
    3d30:	80 e0       	ldi	r24, 0x00	; 0
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	0e 94 92 13 	call	0x2724	; 0x2724 <vTaskDelay>
			if (HIH8120_OK == hih8120_measure())
    3d38:	51 d2       	rcall	.+1186   	; 0x41dc <hih8120_measure>
    3d3a:	0f 90       	pop	r0
    3d3c:	0f 90       	pop	r0
    3d3e:	81 11       	cpse	r24, r1
    3d40:	dc cf       	rjmp	.-72     	; 0x3cfa <hih820_handler_task+0x28>
			{
				printf("start5");
    3d42:	82 ec       	ldi	r24, 0xC2	; 194
    3d44:	93 e0       	ldi	r25, 0x03	; 3
    3d46:	9f 93       	push	r25
    3d48:	8f 93       	push	r24
    3d4a:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
				vTaskDelay(1);
    3d4e:	61 e0       	ldi	r22, 0x01	; 1
    3d50:	70 e0       	ldi	r23, 0x00	; 0
    3d52:	80 e0       	ldi	r24, 0x00	; 0
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	0e 94 92 13 	call	0x2724	; 0x2724 <vTaskDelay>
				humidityIn16 = hih8120_getHumidityPercent_x10();
    3d5a:	66 d2       	rcall	.+1228   	; 0x4228 <hih8120_getHumidityPercent_x10>
    3d5c:	90 93 1c 16 	sts	0x161C, r25	; 0x80161c <humidityIn16+0x1>
    3d60:	80 93 1b 16 	sts	0x161B, r24	; 0x80161b <humidityIn16>
				temperatureIn16 = hih8120_getTemperature_x10();
    3d64:	87 d2       	rcall	.+1294   	; 0x4274 <hih8120_getTemperature_x10>
    3d66:	90 93 1a 16 	sts	0x161A, r25	; 0x80161a <temperatureIn16+0x1>
    3d6a:	80 93 19 16 	sts	0x1619, r24	; 0x801619 <temperatureIn16>
				printf("Arrived here");
    3d6e:	89 ec       	ldi	r24, 0xC9	; 201
    3d70:	93 e0       	ldi	r25, 0x03	; 3
    3d72:	9f 93       	push	r25
    3d74:	8f 93       	push	r24
    3d76:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
				hih820_aFunctionToSetBits(Application_getEventGroup());
    3d7a:	0e 94 89 01 	call	0x312	; 0x312 <Application_getEventGroup>
    3d7e:	a2 df       	rcall	.-188    	; 0x3cc4 <hih820_aFunctionToSetBits>
    3d80:	0f 90       	pop	r0
    3d82:	0f 90       	pop	r0
    3d84:	0f 90       	pop	r0
    3d86:	0f 90       	pop	r0
    3d88:	b8 cf       	rjmp	.-144    	; 0x3cfa <hih820_handler_task+0x28>

00003d8a <create_semaphores>:
void hih8120_handler_initialise(UBaseType_t hih8120_handler_task_priority);
// Prototype for Application handler
void Application_handler_initialise(UBaseType_t Application_task_priority);

void create_semaphores(void)
{
    3d8a:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    3d8c:	80 91 f0 17 	lds	r24, 0x17F0	; 0x8017f0 <xTestSemaphore>
    3d90:	90 91 f1 17 	lds	r25, 0x17F1	; 0x8017f1 <xTestSemaphore+0x1>
    3d94:	89 2b       	or	r24, r25
    3d96:	89 f4       	brne	.+34     	; 0x3dba <create_semaphores+0x30>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    3d98:	81 e0       	ldi	r24, 0x01	; 1
    3d9a:	0e 94 a1 09 	call	0x1342	; 0x1342 <xQueueCreateMutex>
    3d9e:	90 93 f1 17 	sts	0x17F1, r25	; 0x8017f1 <xTestSemaphore+0x1>
    3da2:	80 93 f0 17 	sts	0x17F0, r24	; 0x8017f0 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    3da6:	00 97       	sbiw	r24, 0x00	; 0
    3da8:	41 f0       	breq	.+16     	; 0x3dba <create_semaphores+0x30>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    3daa:	00 e0       	ldi	r16, 0x00	; 0
    3dac:	20 e0       	ldi	r18, 0x00	; 0
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	a9 01       	movw	r20, r18
    3db2:	60 e0       	ldi	r22, 0x00	; 0
    3db4:	70 e0       	ldi	r23, 0x00	; 0
    3db6:	0e 94 fd 08 	call	0x11fa	; 0x11fa <xQueueGenericSend>
		}
	}
}
    3dba:	0f 91       	pop	r16
    3dbc:	08 95       	ret

00003dbe <main>:
/*-----------------------------------------------------------*/
int main(void)
{
	// Must be done as the very first thing!!
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3dbe:	80 e0       	ldi	r24, 0x00	; 0
    3dc0:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <stdio_initialise>
	// Let's create some semaphores
	create_semaphores();
    3dc4:	e2 df       	rcall	.-60     	; 0x3d8a <create_semaphores>
	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(6); // Priority 5 for internal task
    3dc6:	86 e0       	ldi	r24, 0x06	; 6
    3dc8:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <status_leds_initialise>
	//Initialize Application
	Application_handler_initialise(5);
    3dcc:	85 e0       	ldi	r24, 0x05	; 5
    3dce:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Application_handler_initialise>
	//initialize CO2Sensor
	mh_z19_initialise(ser_USART3);
    3dd2:	83 e0       	ldi	r24, 0x03	; 3
    3dd4:	20 d7       	rcall	.+3648   	; 0x4c16 <mh_z19_initialise>
	//create CO2 task
	CO2Sensor_handler_initialise(4);
    3dd6:	84 e0       	ldi	r24, 0x04	; 4
    3dd8:	0e 94 0e 02 	call	0x41c	; 0x41c <CO2Sensor_handler_initialise>
	//Create humidity temperature task and start with priority 3
	hih8120_handler_initialise(3);
    3ddc:	83 e0       	ldi	r24, 0x03	; 3
	//initialize rc_servo
	rc_servo_initialise();
    3dde:	36 df       	rcall	.-404    	; 0x3c4c <hih8120_handler_initialise>
    3de0:	9c d7       	rcall	.+3896   	; 0x4d1a <rc_servo_initialise>
	// Initialise the LoRaWAN driver with down-link buffer
	downLinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    3de2:	41 e0       	ldi	r20, 0x01	; 1
    3de4:	60 e0       	ldi	r22, 0x00	; 0
    3de6:	70 e0       	ldi	r23, 0x00	; 0
    3de8:	8c e2       	ldi	r24, 0x2C	; 44
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	0e 94 87 0c 	call	0x190e	; 0x190e <xStreamBufferGenericCreate>
    3df0:	90 93 ef 17 	sts	0x17EF, r25	; 0x8017ef <downLinkMessageBufferHandle+0x1>
    3df4:	80 93 ee 17 	sts	0x17EE, r24	; 0x8017ee <downLinkMessageBufferHandle>
	lora_driver_initialise(1, downLinkMessageBufferHandle);
    3df8:	bc 01       	movw	r22, r24
    3dfa:	81 e0       	ldi	r24, 0x01	; 1
	// Create LoRaWAN task and start it up with priority 2
	UpLinkHandler_lora_handler_initialise(2);
    3dfc:	65 d3       	rcall	.+1738   	; 0x44c8 <lora_driver_initialise>
    3dfe:	82 e0       	ldi	r24, 0x02	; 2
    3e00:	7f d1       	rcall	.+766    	; 0x4100 <UpLinkHandler_lora_handler_initialise>
	//Create LoRaWAN task and start with priority 1
	DownLinkHandler_lora_handler_initialise(1,downLinkMessageBufferHandle);
    3e02:	60 91 ee 17 	lds	r22, 0x17EE	; 0x8017ee <downLinkMessageBufferHandle>
    3e06:	70 91 ef 17 	lds	r23, 0x17EF	; 0x8017ef <downLinkMessageBufferHandle+0x1>
    3e0a:	81 e0       	ldi	r24, 0x01	; 1
    3e0c:	0e 94 27 03 	call	0x64e	; 0x64e <DownLinkHandler_lora_handler_initialise>
	
	printf("Program Started!!\n");
    3e10:	86 ed       	ldi	r24, 0xD6	; 214
    3e12:	93 e0       	ldi	r25, 0x03	; 3
    3e14:	0e 94 91 36 	call	0x6d22	; 0x6d22 <puts>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    3e18:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <vTaskStartScheduler>
    3e1c:	ff cf       	rjmp	.-2      	; 0x3e1c <main+0x5e>

00003e1e <SensorDataPackageHandler_SetCO2>:
int16_t tempIn16 = 0.0;
uint16_t co2_ppmIn16 = 0.0;
static lora_driver_payload_t _uplink_payload;

void SensorDataPackageHandler_SetCO2(uint16_t co2){
	co2_ppmIn16 = co2;
    3e1e:	90 93 34 16 	sts	0x1634, r25	; 0x801634 <co2_ppmIn16+0x1>
    3e22:	80 93 33 16 	sts	0x1633, r24	; 0x801633 <co2_ppmIn16>
    3e26:	08 95       	ret

00003e28 <SensorDataPackageHandler_SetHumidity>:
}

void SensorDataPackageHandler_SetHumidity(uint16_t humidity){
	humIn16 = humidity;
    3e28:	90 93 38 16 	sts	0x1638, r25	; 0x801638 <humIn16+0x1>
    3e2c:	80 93 37 16 	sts	0x1637, r24	; 0x801637 <humIn16>
    3e30:	08 95       	ret

00003e32 <SensorDataPackageHandler_SetTemperature>:
}

void SensorDataPackageHandler_SetTemperature(int16_t temperature){
	tempIn16 = temperature;
    3e32:	90 93 36 16 	sts	0x1636, r25	; 0x801636 <tempIn16+0x1>
    3e36:	80 93 35 16 	sts	0x1635, r24	; 0x801635 <tempIn16>
    3e3a:	08 95       	ret

00003e3c <SensorDataPackageHandler_getLoRaPayload>:
}

lora_driver_payload_t SensorDataPackageHandler_getLoRaPayload(){
    3e3c:	cf 93       	push	r28
    3e3e:	df 93       	push	r29
    3e40:	ec 01       	movw	r28, r24
	printf("STARTEDSensorDataPackageHandler");
    3e42:	88 ee       	ldi	r24, 0xE8	; 232
    3e44:	93 e0       	ldi	r25, 0x03	; 3
    3e46:	9f 93       	push	r25
    3e48:	8f 93       	push	r24
    3e4a:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
	printf("and this is the changed hum %u\n", humIn16);
    3e4e:	80 91 38 16 	lds	r24, 0x1638	; 0x801638 <humIn16+0x1>
    3e52:	8f 93       	push	r24
    3e54:	80 91 37 16 	lds	r24, 0x1637	; 0x801637 <humIn16>
    3e58:	8f 93       	push	r24
    3e5a:	88 e0       	ldi	r24, 0x08	; 8
    3e5c:	94 e0       	ldi	r25, 0x04	; 4
    3e5e:	9f 93       	push	r25
    3e60:	8f 93       	push	r24
    3e62:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
	printf("and also the changed temp %u\n", tempIn16);
    3e66:	80 91 36 16 	lds	r24, 0x1636	; 0x801636 <tempIn16+0x1>
    3e6a:	8f 93       	push	r24
    3e6c:	80 91 35 16 	lds	r24, 0x1635	; 0x801635 <tempIn16>
    3e70:	8f 93       	push	r24
    3e72:	88 e2       	ldi	r24, 0x28	; 40
    3e74:	94 e0       	ldi	r25, 0x04	; 4
    3e76:	9f 93       	push	r25
    3e78:	8f 93       	push	r24
    3e7a:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
	printf("and also the changed CO2 %u\n", co2_ppmIn16);
    3e7e:	80 91 34 16 	lds	r24, 0x1634	; 0x801634 <co2_ppmIn16+0x1>
    3e82:	8f 93       	push	r24
    3e84:	80 91 33 16 	lds	r24, 0x1633	; 0x801633 <co2_ppmIn16>
    3e88:	8f 93       	push	r24
    3e8a:	86 e4       	ldi	r24, 0x46	; 70
    3e8c:	94 e0       	ldi	r25, 0x04	; 4
    3e8e:	9f 93       	push	r25
    3e90:	8f 93       	push	r24
    3e92:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
	
	_uplink_payload.len = 6;
    3e96:	ed e1       	ldi	r30, 0x1D	; 29
    3e98:	f6 e1       	ldi	r31, 0x16	; 22
    3e9a:	86 e0       	ldi	r24, 0x06	; 6
    3e9c:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.portNo = 2;
    3e9e:	82 e0       	ldi	r24, 0x02	; 2
    3ea0:	80 83       	st	Z, r24
	_uplink_payload.bytes[0] = humIn16 >> 8;
    3ea2:	80 91 37 16 	lds	r24, 0x1637	; 0x801637 <humIn16>
    3ea6:	90 91 38 16 	lds	r25, 0x1638	; 0x801638 <humIn16+0x1>
    3eaa:	92 83       	std	Z+2, r25	; 0x02
	_uplink_payload.bytes[1] = humIn16 & 0xFF;
    3eac:	83 83       	std	Z+3, r24	; 0x03
	_uplink_payload.bytes[2] = tempIn16 >> 8;
    3eae:	80 91 35 16 	lds	r24, 0x1635	; 0x801635 <tempIn16>
    3eb2:	90 91 36 16 	lds	r25, 0x1636	; 0x801636 <tempIn16+0x1>
    3eb6:	94 83       	std	Z+4, r25	; 0x04
	_uplink_payload.bytes[3] = tempIn16 & 0xFF;
    3eb8:	85 83       	std	Z+5, r24	; 0x05
	_uplink_payload.bytes[4] = co2_ppmIn16 >> 8;
    3eba:	80 91 33 16 	lds	r24, 0x1633	; 0x801633 <co2_ppmIn16>
    3ebe:	90 91 34 16 	lds	r25, 0x1634	; 0x801634 <co2_ppmIn16+0x1>
    3ec2:	96 83       	std	Z+6, r25	; 0x06
	_uplink_payload.bytes[5] = co2_ppmIn16 & 0xFF;
    3ec4:	87 83       	std	Z+7, r24	; 0x07
	return _uplink_payload;
    3ec6:	86 e1       	ldi	r24, 0x16	; 22
    3ec8:	de 01       	movw	r26, r28
    3eca:	01 90       	ld	r0, Z+
    3ecc:	0d 92       	st	X+, r0
    3ece:	8a 95       	dec	r24
    3ed0:	e1 f7       	brne	.-8      	; 0x3eca <SensorDataPackageHandler_getLoRaPayload+0x8e>
    3ed2:	8d b7       	in	r24, 0x3d	; 61
    3ed4:	9e b7       	in	r25, 0x3e	; 62
    3ed6:	0e 96       	adiw	r24, 0x0e	; 14
    3ed8:	0f b6       	in	r0, 0x3f	; 63
    3eda:	f8 94       	cli
    3edc:	9e bf       	out	0x3e, r25	; 62
    3ede:	0f be       	out	0x3f, r0	; 63
    3ee0:	8d bf       	out	0x3d, r24	; 61
    3ee2:	ce 01       	movw	r24, r28
    3ee4:	df 91       	pop	r29
    3ee6:	cf 91       	pop	r28
    3ee8:	08 95       	ret

00003eea <_lora_setup>:
	,  UpLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    3eea:	cf 93       	push	r28
    3eec:	df 93       	push	r29
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3eee:	81 e0       	ldi	r24, 0x01	; 1
    3ef0:	0e 94 b6 2b 	call	0x576c	; 0x576c <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3ef4:	37 d3       	rcall	.+1646   	; 0x4564 <lora_driver_rn2483FactoryReset>
    3ef6:	b3 d5       	rcall	.+2918   	; 0x4a5e <lora_driver_mapReturnCodeToText>
    3ef8:	9f 93       	push	r25
    3efa:	8f 93       	push	r24
    3efc:	83 e6       	ldi	r24, 0x63	; 99
    3efe:	94 e0       	ldi	r25, 0x04	; 4
    3f00:	9f 93       	push	r25
    3f02:	8f 93       	push	r24
    3f04:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3f08:	ab d4       	rcall	.+2390   	; 0x4860 <lora_driver_configureToEu868>
    3f0a:	a9 d5       	rcall	.+2898   	; 0x4a5e <lora_driver_mapReturnCodeToText>
    3f0c:	9f 93       	push	r25
    3f0e:	8f 93       	push	r24
    3f10:	86 e7       	ldi	r24, 0x76	; 118
    3f12:	94 e0       	ldi	r25, 0x04	; 4
    3f14:	9f 93       	push	r25
    3f16:	8f 93       	push	r24
    3f18:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
    3f1c:	8f e4       	ldi	r24, 0x4F	; 79

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3f1e:	96 e1       	ldi	r25, 0x16	; 22
    3f20:	33 d3       	rcall	.+1638   	; 0x4588 <lora_driver_getRn2483Hweui>
    3f22:	9d d5       	rcall	.+2874   	; 0x4a5e <lora_driver_mapReturnCodeToText>
    3f24:	cf e4       	ldi	r28, 0x4F	; 79
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3f26:	d6 e1       	ldi	r29, 0x16	; 22
    3f28:	df 93       	push	r29
    3f2a:	cf 93       	push	r28
    3f2c:	9f 93       	push	r25
    3f2e:	8f 93       	push	r24
    3f30:	8f e8       	ldi	r24, 0x8F	; 143
    3f32:	94 e0       	ldi	r25, 0x04	; 4
    3f34:	9f 93       	push	r25
    3f36:	8f 93       	push	r24
    3f38:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
    3f3c:	ce 01       	movw	r24, r28

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3f3e:	40 d3       	rcall	.+1664   	; 0x45c0 <lora_driver_setDeviceIdentifier>
    3f40:	8e d5       	rcall	.+2844   	; 0x4a5e <lora_driver_mapReturnCodeToText>
    3f42:	9f 93       	push	r25
    3f44:	8f 93       	push	r24
    3f46:	df 93       	push	r29
    3f48:	cf 93       	push	r28
    3f4a:	83 ea       	ldi	r24, 0xA3	; 163
    3f4c:	94 e0       	ldi	r25, 0x04	; 4
    3f4e:	9f 93       	push	r25
    3f50:	8f 93       	push	r24
    3f52:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
    3f56:	ae 01       	movw	r20, r28

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3f58:	68 eb       	ldi	r22, 0xB8	; 184
    3f5a:	74 e0       	ldi	r23, 0x04	; 4
    3f5c:	89 ed       	ldi	r24, 0xD9	; 217
    3f5e:	94 e0       	ldi	r25, 0x04	; 4
    3f60:	5d d5       	rcall	.+2746   	; 0x4a1c <lora_driver_setOtaaIdentity>
    3f62:	7d d5       	rcall	.+2810   	; 0x4a5e <lora_driver_mapReturnCodeToText>
    3f64:	9f 93       	push	r25
    3f66:	8f 93       	push	r24
    3f68:	df 93       	push	r29
    3f6a:	cf 93       	push	r28
    3f6c:	88 eb       	ldi	r24, 0xB8	; 184
    3f6e:	94 e0       	ldi	r25, 0x04	; 4
    3f70:	9f 93       	push	r25
    3f72:	8f 93       	push	r24
    3f74:	89 ed       	ldi	r24, 0xD9	; 217
    3f76:	94 e0       	ldi	r25, 0x04	; 4
    3f78:	9f 93       	push	r25
    3f7a:	8f 93       	push	r24
    3f7c:	8a ee       	ldi	r24, 0xEA	; 234
    3f7e:	94 e0       	ldi	r25, 0x04	; 4
    3f80:	9f 93       	push	r25
    3f82:	8f 93       	push	r24
    3f84:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
    3f88:	4e d3       	rcall	.+1692   	; 0x4626 <lora_driver_saveMac>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3f8a:	69 d5       	rcall	.+2770   	; 0x4a5e <lora_driver_mapReturnCodeToText>
    3f8c:	9f 93       	push	r25
    3f8e:	8f 93       	push	r24
    3f90:	80 e2       	ldi	r24, 0x20	; 32
    3f92:	95 e0       	ldi	r25, 0x05	; 5
    3f94:	9f 93       	push	r25
    3f96:	8f 93       	push	r24
    3f98:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
    3f9c:	8d b7       	in	r24, 0x3d	; 61

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3f9e:	9e b7       	in	r25, 0x3e	; 62
    3fa0:	82 96       	adiw	r24, 0x22	; 34
    3fa2:	0f b6       	in	r0, 0x3f	; 63
    3fa4:	f8 94       	cli
    3fa6:	9e bf       	out	0x3e, r25	; 62
    3fa8:	0f be       	out	0x3f, r0	; 63
    3faa:	8d bf       	out	0x3d, r24	; 61
    3fac:	81 e0       	ldi	r24, 0x01	; 1
    3fae:	35 d4       	rcall	.+2154   	; 0x481a <lora_driver_setAdaptiveDataRate>
    3fb0:	56 d5       	rcall	.+2732   	; 0x4a5e <lora_driver_mapReturnCodeToText>
    3fb2:	9f 93       	push	r25
    3fb4:	8f 93       	push	r24
    3fb6:	8f e2       	ldi	r24, 0x2F	; 47
    3fb8:	95 e0       	ldi	r25, 0x05	; 5
    3fba:	9f 93       	push	r25
    3fbc:	8f 93       	push	r24
    3fbe:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
    3fc2:	84 ef       	ldi	r24, 0xF4	; 244

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3fc4:	91 e0       	ldi	r25, 0x01	; 1
    3fc6:	34 d4       	rcall	.+2152   	; 0x4830 <lora_driver_setReceiveDelay>
    3fc8:	4a d5       	rcall	.+2708   	; 0x4a5e <lora_driver_mapReturnCodeToText>
    3fca:	9f 93       	push	r25
    3fcc:	8f 93       	push	r24
    3fce:	81 e0       	ldi	r24, 0x01	; 1
    3fd0:	8f 93       	push	r24
    3fd2:	84 ef       	ldi	r24, 0xF4	; 244
    3fd4:	8f 93       	push	r24
    3fd6:	80 e5       	ldi	r24, 0x50	; 80
    3fd8:	95 e0       	ldi	r25, 0x05	; 5
    3fda:	9f 93       	push	r25
    3fdc:	8f 93       	push	r24
    3fde:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
    3fe2:	8d b7       	in	r24, 0x3d	; 61
    3fe4:	9e b7       	in	r25, 0x3e	; 62
    3fe6:	0a 96       	adiw	r24, 0x0a	; 10
    3fe8:	0f b6       	in	r0, 0x3f	; 63
    3fea:	f8 94       	cli
    3fec:	9e bf       	out	0x3e, r25	; 62
    3fee:	0f be       	out	0x3f, r0	; 63
    3ff0:	8d bf       	out	0x3d, r24	; 61
    3ff2:	ca e0       	ldi	r28, 0x0A	; 10

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3ff4:	80 e0       	ldi	r24, 0x00	; 0
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3ff6:	1d d3       	rcall	.+1594   	; 0x4632 <lora_driver_join>
    3ff8:	d8 2f       	mov	r29, r24
    3ffa:	31 d5       	rcall	.+2658   	; 0x4a5e <lora_driver_mapReturnCodeToText>
    3ffc:	9f 93       	push	r25
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3ffe:	8f 93       	push	r24
    4000:	1f 92       	push	r1
    4002:	cf 93       	push	r28
    4004:	80 e7       	ldi	r24, 0x70	; 112
    4006:	95 e0       	ldi	r25, 0x05	; 5
    4008:	9f 93       	push	r25
    400a:	8f 93       	push	r24
    400c:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
    4010:	0f 90       	pop	r0
    4012:	0f 90       	pop	r0
    4014:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    4016:	0f 90       	pop	r0
    4018:	0f 90       	pop	r0
    401a:	0f 90       	pop	r0
    401c:	d8 30       	cpi	r29, 0x08	; 8
    401e:	59 f0       	breq	.+22     	; 0x4036 <_lora_setup+0x14c>
    4020:	80 e0       	ldi	r24, 0x00	; 0
    4022:	0e 94 1a 2c 	call	0x5834	; 0x5834 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    4026:	66 e3       	ldi	r22, 0x36	; 54
    4028:	71 e0       	ldi	r23, 0x01	; 1
    402a:	80 e0       	ldi	r24, 0x00	; 0
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	0e 94 92 13 	call	0x2724	; 0x2724 <vTaskDelay>
    4032:	c1 50       	subi	r28, 0x01	; 1
    4034:	f9 f6       	brne	.-66     	; 0x3ff4 <_lora_setup+0x10a>
    4036:	d8 30       	cpi	r29, 0x08	; 8
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    4038:	21 f4       	brne	.+8      	; 0x4042 <_lora_setup+0x158>
    403a:	81 e0       	ldi	r24, 0x01	; 1

	if (rc == LORA_ACCEPTED)
    403c:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    4040:	09 c0       	rjmp	.+18     	; 0x4054 <_lora_setup+0x16a>
    4042:	81 e0       	ldi	r24, 0x01	; 1
    4044:	0e 94 0b 2c 	call	0x5816	; 0x5816 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    4048:	80 e0       	ldi	r24, 0x00	; 0
    404a:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    404e:	0e 94 e5 06 	call	0xdca	; 0xdca <vPortYield>
    4052:	fd cf       	rjmp	.-6      	; 0x404e <_lora_setup+0x164>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    4054:	df 91       	pop	r29
    4056:	cf 91       	pop	r28
    4058:	08 95       	ret

0000405a <UpLinkHandler_lora_handler_task>:
		}
	}
}
    405a:	cf 93       	push	r28
    405c:	df 93       	push	r29
    405e:	cd b7       	in	r28, 0x3d	; 61

/*-----------------------------------------------------------*/
void UpLinkHandler_lora_handler_task( void *pvParameters )
{
    4060:	de b7       	in	r29, 0x3e	; 62
    4062:	6a 97       	sbiw	r28, 0x1a	; 26
    4064:	0f b6       	in	r0, 0x3f	; 63
    4066:	f8 94       	cli
    4068:	de bf       	out	0x3e, r29	; 62
    406a:	0f be       	out	0x3f, r0	; 63
    406c:	cd bf       	out	0x3d, r28	; 61
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    406e:	81 e0       	ldi	r24, 0x01	; 1
    4070:	6b d2       	rcall	.+1238   	; 0x4548 <lora_driver_resetRn2483>
	vTaskDelay(2);
    4072:	62 e0       	ldi	r22, 0x02	; 2
    4074:	70 e0       	ldi	r23, 0x00	; 0
    4076:	80 e0       	ldi	r24, 0x00	; 0
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	0e 94 92 13 	call	0x2724	; 0x2724 <vTaskDelay>
	lora_driver_resetRn2483(0);
    407e:	80 e0       	ldi	r24, 0x00	; 0
    4080:	63 d2       	rcall	.+1222   	; 0x4548 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    4082:	66 e9       	ldi	r22, 0x96	; 150
    4084:	70 e0       	ldi	r23, 0x00	; 0
    4086:	80 e0       	ldi	r24, 0x00	; 0
    4088:	90 e0       	ldi	r25, 0x00	; 0
    408a:	0e 94 92 13 	call	0x2724	; 0x2724 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    408e:	15 d2       	rcall	.+1066   	; 0x44ba <lora_driver_flushBuffers>

	_lora_setup();
    4090:	2c df       	rcall	.-424    	; 0x3eea <_lora_setup>
    4092:	0e 94 17 11 	call	0x222e	; 0x222e <xTaskGetTickCount>


	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    4096:	69 83       	std	Y+1, r22	; 0x01
    4098:	7a 83       	std	Y+2, r23	; 0x02
    409a:	8b 83       	std	Y+3, r24	; 0x03
    409c:	9c 83       	std	Y+4, r25	; 0x04
    409e:	48 ea       	ldi	r20, 0xA8	; 168
	
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    40a0:	58 e4       	ldi	r21, 0x48	; 72
    40a2:	60 e0       	ldi	r22, 0x00	; 0
    40a4:	70 e0       	ldi	r23, 0x00	; 0
    40a6:	ce 01       	movw	r24, r28
    40a8:	01 96       	adiw	r24, 0x01	; 1
    40aa:	0e 94 2d 13 	call	0x265a	; 0x265a <xTaskDelayUntil>
    40ae:	80 e9       	ldi	r24, 0x90	; 144
		printf("startLoraTask");
    40b0:	95 e0       	ldi	r25, 0x05	; 5
    40b2:	9f 93       	push	r25
    40b4:	8f 93       	push	r24
    40b6:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
		_uplink_payload = SensorDataPackageHandler_getLoRaPayload();
    40ba:	ce 01       	movw	r24, r28
    40bc:	05 96       	adiw	r24, 0x05	; 5
    40be:	be de       	rcall	.-644    	; 0x3e3c <SensorDataPackageHandler_getLoRaPayload>
    40c0:	86 e1       	ldi	r24, 0x16	; 22
    40c2:	fe 01       	movw	r30, r28
    40c4:	35 96       	adiw	r30, 0x05	; 5
    40c6:	a9 e3       	ldi	r26, 0x39	; 57
    40c8:	b6 e1       	ldi	r27, 0x16	; 22
    40ca:	01 90       	ld	r0, Z+
    40cc:	0d 92       	st	X+, r0
    40ce:	8a 95       	dec	r24
    40d0:	e1 f7       	brne	.-8      	; 0x40ca <UpLinkHandler_lora_handler_task+0x70>
    40d2:	83 e0       	ldi	r24, 0x03	; 3
		status_leds_shortPuls(led_ST4);  // OPTIONAL
    40d4:	0e 94 2c 2c 	call	0x5858	; 0x5858 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    40d8:	69 e3       	ldi	r22, 0x39	; 57
    40da:	76 e1       	ldi	r23, 0x16	; 22
    40dc:	80 e0       	ldi	r24, 0x00	; 0
    40de:	d2 d2       	rcall	.+1444   	; 0x4684 <lora_driver_sendUploadMessage>
    40e0:	be d4       	rcall	.+2428   	; 0x4a5e <lora_driver_mapReturnCodeToText>
    40e2:	9f 93       	push	r25
    40e4:	8f 93       	push	r24
    40e6:	8e e9       	ldi	r24, 0x9E	; 158
    40e8:	95 e0       	ldi	r25, 0x05	; 5
    40ea:	9f 93       	push	r25
    40ec:	8f 93       	push	r24
    40ee:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <printf>
    40f2:	0f 90       	pop	r0
    40f4:	0f 90       	pop	r0
    40f6:	0f 90       	pop	r0
    40f8:	0f 90       	pop	r0
    40fa:	0f 90       	pop	r0
    40fc:	0f 90       	pop	r0
    40fe:	cf cf       	rjmp	.-98     	; 0x409e <UpLinkHandler_lora_handler_task+0x44>

00004100 <UpLinkHandler_lora_handler_initialise>:
    4100:	ef 92       	push	r14
    4102:	ff 92       	push	r15

static lora_driver_payload_t _uplink_payload;


void UpLinkHandler_lora_handler_initialise(UBaseType_t UpLinkHandler_lora_handler_task_priority)
{
    4104:	0f 93       	push	r16
	xTaskCreate(
    4106:	e1 2c       	mov	r14, r1
    4108:	f1 2c       	mov	r15, r1
    410a:	08 2f       	mov	r16, r24
    410c:	20 e0       	ldi	r18, 0x00	; 0
    410e:	30 e0       	ldi	r19, 0x00	; 0
    4110:	48 e8       	ldi	r20, 0x88	; 136
    4112:	51 e0       	ldi	r21, 0x01	; 1
    4114:	63 eb       	ldi	r22, 0xB3	; 179
    4116:	75 e0       	ldi	r23, 0x05	; 5
    4118:	8d e2       	ldi	r24, 0x2D	; 45
    411a:	90 e2       	ldi	r25, 0x20	; 32
    411c:	0e 94 8d 10 	call	0x211a	; 0x211a <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  UpLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    4120:	0f 91       	pop	r16
    4122:	ff 90       	pop	r15
    4124:	ef 90       	pop	r14
    4126:	08 95       	ret

00004128 <_hihTwiCallback>:
    4128:	65 30       	cpi	r22, 0x05	; 5
    412a:	f1 f4       	brne	.+60     	; 0x4168 <_hihTwiCallback+0x40>
    412c:	fa 01       	movw	r30, r20
    412e:	80 81       	ld	r24, Z
    4130:	8f 73       	andi	r24, 0x3F	; 63
    4132:	90 e0       	ldi	r25, 0x00	; 0
    4134:	98 2f       	mov	r25, r24
    4136:	88 27       	eor	r24, r24
    4138:	21 81       	ldd	r18, Z+1	; 0x01
    413a:	82 2b       	or	r24, r18
    413c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4140:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4144:	82 81       	ldd	r24, Z+2	; 0x02
    4146:	f0 e4       	ldi	r31, 0x40	; 64
    4148:	8f 9f       	mul	r24, r31
    414a:	c0 01       	movw	r24, r0
    414c:	11 24       	eor	r1, r1
    414e:	fa 01       	movw	r30, r20
    4150:	23 81       	ldd	r18, Z+3	; 0x03
    4152:	26 95       	lsr	r18
    4154:	26 95       	lsr	r18
    4156:	82 2b       	or	r24, r18
    4158:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    415c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4160:	81 e0       	ldi	r24, 0x01	; 1
    4162:	80 93 b3 16 	sts	0x16B3, r24	; 0x8016b3 <_measuringIsReady>
    4166:	08 95       	ret
    4168:	64 30       	cpi	r22, 0x04	; 4
    416a:	51 f0       	breq	.+20     	; 0x4180 <_hihTwiCallback+0x58>
    416c:	80 e0       	ldi	r24, 0x00	; 0
    416e:	90 e4       	ldi	r25, 0x40	; 64
    4170:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4174:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4178:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    417c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4180:	08 95       	ret

00004182 <hih8120_initialise>:
    4182:	0f 93       	push	r16
    4184:	1f 93       	push	r17
    4186:	04 e9       	ldi	r16, 0x94	; 148
    4188:	10 e2       	ldi	r17, 0x20	; 32
    418a:	20 e0       	ldi	r18, 0x00	; 0
    418c:	34 e2       	ldi	r19, 0x24	; 36
    418e:	44 ef       	ldi	r20, 0xF4	; 244
    4190:	50 e0       	ldi	r21, 0x00	; 0
    4192:	60 e0       	ldi	r22, 0x00	; 0
    4194:	87 e2       	ldi	r24, 0x27	; 39
    4196:	0e 94 4f 2c 	call	0x589e	; 0x589e <twiCreate>
    419a:	90 93 b5 16 	sts	0x16B5, r25	; 0x8016b5 <_hih8120Handler+0x1>
    419e:	80 93 b4 16 	sts	0x16B4, r24	; 0x8016b4 <_hih8120Handler>
    41a2:	21 e0       	ldi	r18, 0x01	; 1
    41a4:	89 2b       	or	r24, r25
    41a6:	09 f0       	breq	.+2      	; 0x41aa <hih8120_initialise+0x28>
    41a8:	20 e0       	ldi	r18, 0x00	; 0
    41aa:	82 2f       	mov	r24, r18
    41ac:	1f 91       	pop	r17
    41ae:	0f 91       	pop	r16
    41b0:	08 95       	ret

000041b2 <hih8120_wakeup>:
    41b2:	80 91 b4 16 	lds	r24, 0x16B4	; 0x8016b4 <_hih8120Handler>
    41b6:	90 91 b5 16 	lds	r25, 0x16B5	; 0x8016b5 <_hih8120Handler+0x1>
    41ba:	00 97       	sbiw	r24, 0x00	; 0
    41bc:	59 f0       	breq	.+22     	; 0x41d4 <hih8120_wakeup+0x22>
    41be:	40 e0       	ldi	r20, 0x00	; 0
    41c0:	60 e0       	ldi	r22, 0x00	; 0
    41c2:	70 e0       	ldi	r23, 0x00	; 0
    41c4:	0e 94 a0 2c 	call	0x5940	; 0x5940 <twiTransmit>
    41c8:	84 30       	cpi	r24, 0x04	; 4
    41ca:	31 f4       	brne	.+12     	; 0x41d8 <hih8120_wakeup+0x26>
    41cc:	10 92 b3 16 	sts	0x16B3, r1	; 0x8016b3 <_measuringIsReady>
    41d0:	80 e0       	ldi	r24, 0x00	; 0
    41d2:	08 95       	ret
    41d4:	82 e0       	ldi	r24, 0x02	; 2
    41d6:	08 95       	ret
    41d8:	83 e0       	ldi	r24, 0x03	; 3
    41da:	08 95       	ret

000041dc <hih8120_measure>:
    41dc:	80 91 b4 16 	lds	r24, 0x16B4	; 0x8016b4 <_hih8120Handler>
    41e0:	90 91 b5 16 	lds	r25, 0x16B5	; 0x8016b5 <_hih8120Handler+0x1>
    41e4:	00 97       	sbiw	r24, 0x00	; 0
    41e6:	39 f0       	breq	.+14     	; 0x41f6 <hih8120_measure+0x1a>
    41e8:	64 e0       	ldi	r22, 0x04	; 4
    41ea:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <twiReceive>
    41ee:	85 30       	cpi	r24, 0x05	; 5
    41f0:	21 f0       	breq	.+8      	; 0x41fa <hih8120_measure+0x1e>
    41f2:	83 e0       	ldi	r24, 0x03	; 3
    41f4:	08 95       	ret
    41f6:	82 e0       	ldi	r24, 0x02	; 2
    41f8:	08 95       	ret
    41fa:	80 e0       	ldi	r24, 0x00	; 0
    41fc:	08 95       	ret

000041fe <hih8120_getHumidity>:
    41fe:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    4202:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    4206:	80 e0       	ldi	r24, 0x00	; 0
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__floatunsisf>
    420e:	20 e0       	ldi	r18, 0x00	; 0
    4210:	30 e0       	ldi	r19, 0x00	; 0
    4212:	48 ec       	ldi	r20, 0xC8	; 200
    4214:	52 e4       	ldi	r21, 0x42	; 66
    4216:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__mulsf3>
    421a:	20 e0       	ldi	r18, 0x00	; 0
    421c:	38 ef       	ldi	r19, 0xF8	; 248
    421e:	4f e7       	ldi	r20, 0x7F	; 127
    4220:	56 e4       	ldi	r21, 0x46	; 70
    4222:	0c 94 5d 2e 	jmp	0x5cba	; 0x5cba <__divsf3>
    4226:	08 95       	ret

00004228 <hih8120_getHumidityPercent_x10>:
    4228:	ea df       	rcall	.-44     	; 0x41fe <hih8120_getHumidity>
    422a:	20 e0       	ldi	r18, 0x00	; 0
    422c:	30 e0       	ldi	r19, 0x00	; 0
    422e:	40 e2       	ldi	r20, 0x20	; 32
    4230:	51 e4       	ldi	r21, 0x41	; 65
    4232:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__mulsf3>
    4236:	0e 94 ca 2e 	call	0x5d94	; 0x5d94 <__fixunssfsi>
    423a:	cb 01       	movw	r24, r22
    423c:	08 95       	ret

0000423e <hih8120_getTemperature>:
    423e:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    4242:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    4246:	80 e0       	ldi	r24, 0x00	; 0
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__floatunsisf>
    424e:	20 e0       	ldi	r18, 0x00	; 0
    4250:	30 e0       	ldi	r19, 0x00	; 0
    4252:	45 e2       	ldi	r20, 0x25	; 37
    4254:	53 e4       	ldi	r21, 0x43	; 67
    4256:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__mulsf3>
    425a:	20 e0       	ldi	r18, 0x00	; 0
    425c:	38 ef       	ldi	r19, 0xF8	; 248
    425e:	4f e7       	ldi	r20, 0x7F	; 127
    4260:	56 e4       	ldi	r21, 0x46	; 70
    4262:	0e 94 5d 2e 	call	0x5cba	; 0x5cba <__divsf3>
    4266:	20 e0       	ldi	r18, 0x00	; 0
    4268:	30 e0       	ldi	r19, 0x00	; 0
    426a:	40 e2       	ldi	r20, 0x20	; 32
    426c:	52 e4       	ldi	r21, 0x42	; 66
    426e:	0c 94 f8 2d 	jmp	0x5bf0	; 0x5bf0 <__subsf3>
    4272:	08 95       	ret

00004274 <hih8120_getTemperature_x10>:
    4274:	e4 df       	rcall	.-56     	; 0x423e <hih8120_getTemperature>
    4276:	20 e0       	ldi	r18, 0x00	; 0
    4278:	30 e0       	ldi	r19, 0x00	; 0
    427a:	40 e2       	ldi	r20, 0x20	; 32
    427c:	51 e4       	ldi	r21, 0x41	; 65
    427e:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__mulsf3>
    4282:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__fixsfsi>
    4286:	cb 01       	movw	r24, r22
    4288:	08 95       	ret

0000428a <_serialCallBack>:
    428a:	0f 93       	push	r16
    428c:	1f 93       	push	r17
    428e:	cf 93       	push	r28
    4290:	df 93       	push	r29
    4292:	1f 92       	push	r1
    4294:	1f 92       	push	r1
    4296:	cd b7       	in	r28, 0x3d	; 61
    4298:	de b7       	in	r29, 0x3e	; 62
    429a:	8c 01       	movw	r16, r24
    429c:	19 82       	std	Y+1, r1	; 0x01
    429e:	2d c0       	rjmp	.+90     	; 0x42fa <_serialCallBack+0x70>
    42a0:	e0 91 ed 16 	lds	r30, 0x16ED	; 0x8016ed <rec_buf_inp.2878>
    42a4:	ec 32       	cpi	r30, 0x2C	; 44
    42a6:	50 f4       	brcc	.+20     	; 0x42bc <_serialCallBack+0x32>
    42a8:	81 e0       	ldi	r24, 0x01	; 1
    42aa:	8e 0f       	add	r24, r30
    42ac:	80 93 ed 16 	sts	0x16ED, r24	; 0x8016ed <rec_buf_inp.2878>
    42b0:	f0 e0       	ldi	r31, 0x00	; 0
    42b2:	e1 5e       	subi	r30, 0xE1	; 225
    42b4:	f8 4e       	sbci	r31, 0xE8	; 232
    42b6:	8a 81       	ldd	r24, Y+2	; 0x02
    42b8:	80 83       	st	Z, r24
    42ba:	02 c0       	rjmp	.+4      	; 0x42c0 <_serialCallBack+0x36>
    42bc:	10 92 ed 16 	sts	0x16ED, r1	; 0x8016ed <rec_buf_inp.2878>
    42c0:	8a 81       	ldd	r24, Y+2	; 0x02
    42c2:	8a 30       	cpi	r24, 0x0A	; 10
    42c4:	d1 f4       	brne	.+52     	; 0x42fa <_serialCallBack+0x70>
    42c6:	40 91 ed 16 	lds	r20, 0x16ED	; 0x8016ed <rec_buf_inp.2878>
    42ca:	50 e0       	ldi	r21, 0x00	; 0
    42cc:	fa 01       	movw	r30, r20
    42ce:	e3 5e       	subi	r30, 0xE3	; 227
    42d0:	f8 4e       	sbci	r31, 0xE8	; 232
    42d2:	10 82       	st	Z, r1
    42d4:	41 50       	subi	r20, 0x01	; 1
    42d6:	51 09       	sbc	r21, r1
    42d8:	9e 01       	movw	r18, r28
    42da:	2f 5f       	subi	r18, 0xFF	; 255
    42dc:	3f 4f       	sbci	r19, 0xFF	; 255
    42de:	6f e1       	ldi	r22, 0x1F	; 31
    42e0:	77 e1       	ldi	r23, 0x17	; 23
    42e2:	80 91 f0 16 	lds	r24, 0x16F0	; 0x8016f0 <_serialReplyBufferHandle>
    42e6:	90 91 f1 16 	lds	r25, 0x16F1	; 0x8016f1 <_serialReplyBufferHandle+0x1>
    42ea:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <xStreamBufferSendFromISR>
    42ee:	89 81       	ldd	r24, Y+1	; 0x01
    42f0:	81 11       	cpse	r24, r1
    42f2:	0e 94 e5 06 	call	0xdca	; 0xdca <vPortYield>
    42f6:	10 92 ed 16 	sts	0x16ED, r1	; 0x8016ed <rec_buf_inp.2878>
    42fa:	be 01       	movw	r22, r28
    42fc:	6e 5f       	subi	r22, 0xFE	; 254
    42fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4300:	c8 01       	movw	r24, r16
    4302:	49 d6       	rcall	.+3218   	; 0x4f96 <serial_getByte>
    4304:	88 23       	and	r24, r24
    4306:	61 f2       	breq	.-104    	; 0x42a0 <_serialCallBack+0x16>
    4308:	0f 90       	pop	r0
    430a:	0f 90       	pop	r0
    430c:	df 91       	pop	r29
    430e:	cf 91       	pop	r28
    4310:	1f 91       	pop	r17
    4312:	0f 91       	pop	r16
    4314:	08 95       	ret

00004316 <_uploadMessage>:
    4316:	0f 93       	push	r16
    4318:	1f 93       	push	r17
    431a:	cf 93       	push	r28
    431c:	df 93       	push	r29
    431e:	8c 01       	movw	r16, r24
    4320:	eb 01       	movw	r28, r22
    4322:	80 91 f0 16 	lds	r24, 0x16F0	; 0x8016f0 <_serialReplyBufferHandle>
    4326:	90 91 f1 16 	lds	r25, 0x16F1	; 0x8016f1 <_serialReplyBufferHandle+0x1>
    432a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <xStreamBufferReset>
    432e:	b8 01       	movw	r22, r16
    4330:	86 eb       	ldi	r24, 0xB6	; 182
    4332:	96 e1       	ldi	r25, 0x16	; 22
    4334:	0e 94 18 36 	call	0x6c30	; 0x6c30 <strcpy>
    4338:	20 97       	sbiw	r28, 0x00	; 0
    433a:	79 f0       	breq	.+30     	; 0x435a <_uploadMessage+0x44>
    433c:	e6 eb       	ldi	r30, 0xB6	; 182
    433e:	f6 e1       	ldi	r31, 0x16	; 22
    4340:	01 90       	ld	r0, Z+
    4342:	00 20       	and	r0, r0
    4344:	e9 f7       	brne	.-6      	; 0x4340 <_uploadMessage+0x2a>
    4346:	31 97       	sbiw	r30, 0x01	; 1
    4348:	80 e2       	ldi	r24, 0x20	; 32
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	91 83       	std	Z+1, r25	; 0x01
    434e:	80 83       	st	Z, r24
    4350:	be 01       	movw	r22, r28
    4352:	86 eb       	ldi	r24, 0xB6	; 182
    4354:	96 e1       	ldi	r25, 0x16	; 22
    4356:	0e 94 0d 36 	call	0x6c1a	; 0x6c1a <strcat>
    435a:	e6 eb       	ldi	r30, 0xB6	; 182
    435c:	f6 e1       	ldi	r31, 0x16	; 22
    435e:	df 01       	movw	r26, r30
    4360:	0d 90       	ld	r0, X+
    4362:	00 20       	and	r0, r0
    4364:	e9 f7       	brne	.-6      	; 0x4360 <_uploadMessage+0x4a>
    4366:	11 97       	sbiw	r26, 0x01	; 1
    4368:	8d e0       	ldi	r24, 0x0D	; 13
    436a:	9a e0       	ldi	r25, 0x0A	; 10
    436c:	11 96       	adiw	r26, 0x01	; 1
    436e:	9c 93       	st	X, r25
    4370:	8e 93       	st	-X, r24
    4372:	12 96       	adiw	r26, 0x02	; 2
    4374:	1c 92       	st	X, r1
    4376:	01 90       	ld	r0, Z+
    4378:	00 20       	and	r0, r0
    437a:	e9 f7       	brne	.-6      	; 0x4376 <_uploadMessage+0x60>
    437c:	31 97       	sbiw	r30, 0x01	; 1
    437e:	e6 5b       	subi	r30, 0xB6	; 182
    4380:	f6 41       	sbci	r31, 0x16	; 22
    4382:	ae 2f       	mov	r26, r30
    4384:	86 eb       	ldi	r24, 0xB6	; 182
    4386:	96 e1       	ldi	r25, 0x16	; 22
    4388:	ac 01       	movw	r20, r24
    438a:	6a 2f       	mov	r22, r26
    438c:	80 91 f2 16 	lds	r24, 0x16F2	; 0x8016f2 <_rn2483_serial>
    4390:	90 91 f3 16 	lds	r25, 0x16F3	; 0x8016f3 <_rn2483_serial+0x1>
    4394:	ab d5       	rcall	.+2902   	; 0x4eec <serial_sendBytes>
    4396:	81 11       	cpse	r24, r1
    4398:	11 c0       	rjmp	.+34     	; 0x43bc <_uploadMessage+0xa6>
    439a:	08 e2       	ldi	r16, 0x28	; 40
    439c:	15 e0       	ldi	r17, 0x05	; 5
    439e:	20 e0       	ldi	r18, 0x00	; 0
    43a0:	30 e0       	ldi	r19, 0x00	; 0
    43a2:	4d e2       	ldi	r20, 0x2D	; 45
    43a4:	50 e0       	ldi	r21, 0x00	; 0
    43a6:	69 e7       	ldi	r22, 0x79	; 121
    43a8:	77 e1       	ldi	r23, 0x17	; 23
    43aa:	80 91 f0 16 	lds	r24, 0x16F0	; 0x8016f0 <_serialReplyBufferHandle>
    43ae:	90 91 f1 16 	lds	r25, 0x16F1	; 0x8016f1 <_serialReplyBufferHandle+0x1>
    43b2:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <xStreamBufferReceive>
    43b6:	89 e7       	ldi	r24, 0x79	; 121
    43b8:	97 e1       	ldi	r25, 0x17	; 23
    43ba:	02 c0       	rjmp	.+4      	; 0x43c0 <_uploadMessage+0xaa>
    43bc:	80 e0       	ldi	r24, 0x00	; 0
    43be:	90 e0       	ldi	r25, 0x00	; 0
    43c0:	df 91       	pop	r29
    43c2:	cf 91       	pop	r28
    43c4:	1f 91       	pop	r17
    43c6:	0f 91       	pop	r16
    43c8:	08 95       	ret

000043ca <_reply2ReturnCode>:
    43ca:	2f 92       	push	r2
    43cc:	3f 92       	push	r3
    43ce:	4f 92       	push	r4
    43d0:	5f 92       	push	r5
    43d2:	6f 92       	push	r6
    43d4:	7f 92       	push	r7
    43d6:	8f 92       	push	r8
    43d8:	9f 92       	push	r9
    43da:	af 92       	push	r10
    43dc:	bf 92       	push	r11
    43de:	cf 92       	push	r12
    43e0:	df 92       	push	r13
    43e2:	ef 92       	push	r14
    43e4:	ff 92       	push	r15
    43e6:	0f 93       	push	r16
    43e8:	1f 93       	push	r17
    43ea:	cf 93       	push	r28
    43ec:	df 93       	push	r29
    43ee:	5c 01       	movw	r10, r24
    43f0:	fc 01       	movw	r30, r24
    43f2:	01 90       	ld	r0, Z+
    43f4:	00 20       	and	r0, r0
    43f6:	e9 f7       	brne	.-6      	; 0x43f2 <_reply2ReturnCode+0x28>
    43f8:	31 97       	sbiw	r30, 0x01	; 1
    43fa:	6f 01       	movw	r12, r30
    43fc:	c8 1a       	sub	r12, r24
    43fe:	d9 0a       	sbc	r13, r25
    4400:	5c 2c       	mov	r5, r12
    4402:	0f 2e       	mov	r0, r31
    4404:	f3 e5       	ldi	r31, 0x53	; 83
    4406:	8f 2e       	mov	r8, r31
    4408:	f8 e0       	ldi	r31, 0x08	; 8
    440a:	9f 2e       	mov	r9, r31
    440c:	f0 2d       	mov	r31, r0
    440e:	e1 2c       	mov	r14, r1
    4410:	f1 2c       	mov	r15, r1
    4412:	4c 2c       	mov	r4, r12
    4414:	37 01       	movw	r6, r14
    4416:	f4 01       	movw	r30, r8
    4418:	01 81       	ldd	r16, Z+1	; 0x01
    441a:	12 81       	ldd	r17, Z+2	; 0x02
    441c:	e8 01       	movw	r28, r16
    441e:	09 90       	ld	r0, Y+
    4420:	00 20       	and	r0, r0
    4422:	e9 f7       	brne	.-6      	; 0x441e <_reply2ReturnCode+0x54>
    4424:	21 97       	sbiw	r28, 0x01	; 1
    4426:	c0 1b       	sub	r28, r16
    4428:	d1 0b       	sbc	r29, r17
    442a:	3c 2e       	mov	r3, r28
    442c:	f9 e0       	ldi	r31, 0x09	; 9
    442e:	cf 16       	cp	r12, r31
    4430:	d1 04       	cpc	r13, r1
    4432:	58 f0       	brcs	.+22     	; 0x444a <_reply2ReturnCode+0x80>
    4434:	f4 01       	movw	r30, r8
    4436:	20 80       	ld	r2, Z
    4438:	fe e0       	ldi	r31, 0x0E	; 14
    443a:	2f 12       	cpse	r2, r31
    443c:	06 c0       	rjmp	.+12     	; 0x444a <_reply2ReturnCode+0x80>
    443e:	b8 01       	movw	r22, r16
    4440:	c5 01       	movw	r24, r10
    4442:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <strcasestr>
    4446:	89 2b       	or	r24, r25
    4448:	09 f5       	brne	.+66     	; 0x448c <_reply2ReturnCode+0xc2>
    444a:	44 2d       	mov	r20, r4
    444c:	35 14       	cp	r3, r5
    444e:	08 f4       	brcc	.+2      	; 0x4452 <_reply2ReturnCode+0x88>
    4450:	4c 2f       	mov	r20, r28
    4452:	50 e0       	ldi	r21, 0x00	; 0
    4454:	b8 01       	movw	r22, r16
    4456:	c5 01       	movw	r24, r10
    4458:	0e 94 1f 36 	call	0x6c3e	; 0x6c3e <strncasecmp>
    445c:	89 2b       	or	r24, r25
    445e:	49 f4       	brne	.+18     	; 0x4472 <_reply2ReturnCode+0xa8>
    4460:	f3 01       	movw	r30, r6
    4462:	ee 0f       	add	r30, r30
    4464:	ff 1f       	adc	r31, r31
    4466:	e6 0d       	add	r30, r6
    4468:	f7 1d       	adc	r31, r7
    446a:	ed 5a       	subi	r30, 0xAD	; 173
    446c:	f7 4f       	sbci	r31, 0xF7	; 247
    446e:	20 80       	ld	r2, Z
    4470:	0d c0       	rjmp	.+26     	; 0x448c <_reply2ReturnCode+0xc2>
    4472:	8f ef       	ldi	r24, 0xFF	; 255
    4474:	e8 1a       	sub	r14, r24
    4476:	f8 0a       	sbc	r15, r24
    4478:	e3 e0       	ldi	r30, 0x03	; 3
    447a:	8e 0e       	add	r8, r30
    447c:	91 1c       	adc	r9, r1
    447e:	f1 e1       	ldi	r31, 0x11	; 17
    4480:	ef 16       	cp	r14, r31
    4482:	f1 04       	cpc	r15, r1
    4484:	39 f6       	brne	.-114    	; 0x4414 <_reply2ReturnCode+0x4a>
    4486:	68 94       	set
    4488:	22 24       	eor	r2, r2
    448a:	24 f8       	bld	r2, 4
    448c:	82 2d       	mov	r24, r2
    448e:	df 91       	pop	r29
    4490:	cf 91       	pop	r28
    4492:	1f 91       	pop	r17
    4494:	0f 91       	pop	r16
    4496:	ff 90       	pop	r15
    4498:	ef 90       	pop	r14
    449a:	df 90       	pop	r13
    449c:	cf 90       	pop	r12
    449e:	bf 90       	pop	r11
    44a0:	af 90       	pop	r10
    44a2:	9f 90       	pop	r9
    44a4:	8f 90       	pop	r8
    44a6:	7f 90       	pop	r7
    44a8:	6f 90       	pop	r6
    44aa:	5f 90       	pop	r5
    44ac:	4f 90       	pop	r4
    44ae:	3f 90       	pop	r3
    44b0:	2f 90       	pop	r2
    44b2:	08 95       	ret

000044b4 <_uploadMessageRc>:
    44b4:	30 df       	rcall	.-416    	; 0x4316 <_uploadMessage>
    44b6:	89 cf       	rjmp	.-238    	; 0x43ca <_reply2ReturnCode>
    44b8:	08 95       	ret

000044ba <lora_driver_flushBuffers>:
    44ba:	80 91 f0 16 	lds	r24, 0x16F0	; 0x8016f0 <_serialReplyBufferHandle>
    44be:	90 91 f1 16 	lds	r25, 0x16F1	; 0x8016f1 <_serialReplyBufferHandle+0x1>
    44c2:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <xStreamBufferReset>
    44c6:	08 95       	ret

000044c8 <lora_driver_initialise>:
    44c8:	8f 92       	push	r8
    44ca:	9f 92       	push	r9
    44cc:	af 92       	push	r10
    44ce:	cf 92       	push	r12
    44d0:	ef 92       	push	r14
    44d2:	0f 93       	push	r16
    44d4:	1f 93       	push	r17
    44d6:	cf 93       	push	r28
    44d8:	c8 2f       	mov	r28, r24
    44da:	8b 01       	movw	r16, r22
    44dc:	41 e0       	ldi	r20, 0x01	; 1
    44de:	60 e0       	ldi	r22, 0x00	; 0
    44e0:	70 e0       	ldi	r23, 0x00	; 0
    44e2:	88 ec       	ldi	r24, 0xC8	; 200
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	0e 94 87 0c 	call	0x190e	; 0x190e <xStreamBufferGenericCreate>
    44ea:	90 93 f1 16 	sts	0x16F1, r25	; 0x8016f1 <_serialReplyBufferHandle+0x1>
    44ee:	80 93 f0 16 	sts	0x16F0, r24	; 0x8016f0 <_serialReplyBufferHandle>
    44f2:	10 93 ef 16 	sts	0x16EF, r17	; 0x8016ef <_downlinkMessageBuffer+0x1>
    44f6:	00 93 ee 16 	sts	0x16EE, r16	; 0x8016ee <_downlinkMessageBuffer>
    44fa:	0f 2e       	mov	r0, r31
    44fc:	f5 e4       	ldi	r31, 0x45	; 69
    44fe:	8f 2e       	mov	r8, r31
    4500:	f1 e2       	ldi	r31, 0x21	; 33
    4502:	9f 2e       	mov	r9, r31
    4504:	f0 2d       	mov	r31, r0
    4506:	68 94       	set
    4508:	aa 24       	eor	r10, r10
    450a:	a6 f8       	bld	r10, 6
    450c:	68 94       	set
    450e:	cc 24       	eor	r12, r12
    4510:	c6 f8       	bld	r12, 6
    4512:	e1 2c       	mov	r14, r1
    4514:	00 e0       	ldi	r16, 0x00	; 0
    4516:	23 e0       	ldi	r18, 0x03	; 3
    4518:	40 e0       	ldi	r20, 0x00	; 0
    451a:	51 ee       	ldi	r21, 0xE1	; 225
    451c:	60 e0       	ldi	r22, 0x00	; 0
    451e:	70 e0       	ldi	r23, 0x00	; 0
    4520:	8c 2f       	mov	r24, r28
    4522:	17 d4       	rcall	.+2094   	; 0x4d52 <serial_create>
    4524:	90 93 f3 16 	sts	0x16F3, r25	; 0x8016f3 <_rn2483_serial+0x1>
    4528:	80 93 f2 16 	sts	0x16F2, r24	; 0x8016f2 <_rn2483_serial>
    452c:	e7 e0       	ldi	r30, 0x07	; 7
    452e:	f1 e0       	ldi	r31, 0x01	; 1
    4530:	80 81       	ld	r24, Z
    4532:	80 61       	ori	r24, 0x10	; 16
    4534:	80 83       	st	Z, r24
    4536:	cf 91       	pop	r28
    4538:	1f 91       	pop	r17
    453a:	0f 91       	pop	r16
    453c:	ef 90       	pop	r14
    453e:	cf 90       	pop	r12
    4540:	af 90       	pop	r10
    4542:	9f 90       	pop	r9
    4544:	8f 90       	pop	r8
    4546:	08 95       	ret

00004548 <lora_driver_resetRn2483>:
    4548:	88 23       	and	r24, r24
    454a:	31 f0       	breq	.+12     	; 0x4558 <lora_driver_resetRn2483+0x10>
    454c:	e8 e0       	ldi	r30, 0x08	; 8
    454e:	f1 e0       	ldi	r31, 0x01	; 1
    4550:	80 81       	ld	r24, Z
    4552:	8f 7e       	andi	r24, 0xEF	; 239
    4554:	80 83       	st	Z, r24
    4556:	08 95       	ret
    4558:	e8 e0       	ldi	r30, 0x08	; 8
    455a:	f1 e0       	ldi	r31, 0x01	; 1
    455c:	80 81       	ld	r24, Z
    455e:	80 61       	ori	r24, 0x10	; 16
    4560:	80 83       	st	Z, r24
    4562:	08 95       	ret

00004564 <lora_driver_rn2483FactoryReset>:
    4564:	60 e0       	ldi	r22, 0x00	; 0
    4566:	70 e0       	ldi	r23, 0x00	; 0
    4568:	89 ed       	ldi	r24, 0xD9	; 217
    456a:	95 e0       	ldi	r25, 0x05	; 5
    456c:	d4 de       	rcall	.-600    	; 0x4316 <_uploadMessage>
    456e:	e9 e7       	ldi	r30, 0x79	; 121
    4570:	f7 e1       	ldi	r31, 0x17	; 23
    4572:	01 90       	ld	r0, Z+
    4574:	00 20       	and	r0, r0
    4576:	e9 f7       	brne	.-6      	; 0x4572 <lora_driver_rn2483FactoryReset+0xe>
    4578:	31 97       	sbiw	r30, 0x01	; 1
    457a:	e9 57       	subi	r30, 0x79	; 121
    457c:	f7 41       	sbci	r31, 0x17	; 23
    457e:	81 e0       	ldi	r24, 0x01	; 1
    4580:	75 97       	sbiw	r30, 0x15	; 21
    4582:	08 f0       	brcs	.+2      	; 0x4586 <lora_driver_rn2483FactoryReset+0x22>
    4584:	80 e0       	ldi	r24, 0x00	; 0
    4586:	08 95       	ret

00004588 <lora_driver_getRn2483Hweui>:
    4588:	cf 93       	push	r28
    458a:	df 93       	push	r29
    458c:	ec 01       	movw	r28, r24
    458e:	60 e0       	ldi	r22, 0x00	; 0
    4590:	70 e0       	ldi	r23, 0x00	; 0
    4592:	8a ee       	ldi	r24, 0xEA	; 234
    4594:	95 e0       	ldi	r25, 0x05	; 5
    4596:	bf de       	rcall	.-642    	; 0x4316 <_uploadMessage>
    4598:	e9 e7       	ldi	r30, 0x79	; 121
    459a:	f7 e1       	ldi	r31, 0x17	; 23
    459c:	01 90       	ld	r0, Z+
    459e:	00 20       	and	r0, r0
    45a0:	e9 f7       	brne	.-6      	; 0x459c <lora_driver_getRn2483Hweui+0x14>
    45a2:	ea 58       	subi	r30, 0x8A	; 138
    45a4:	f7 41       	sbci	r31, 0x17	; 23
    45a6:	39 f4       	brne	.+14     	; 0x45b6 <lora_driver_getRn2483Hweui+0x2e>
    45a8:	69 e7       	ldi	r22, 0x79	; 121
    45aa:	77 e1       	ldi	r23, 0x17	; 23
    45ac:	ce 01       	movw	r24, r28
    45ae:	0e 94 18 36 	call	0x6c30	; 0x6c30 <strcpy>
    45b2:	80 e0       	ldi	r24, 0x00	; 0
    45b4:	02 c0       	rjmp	.+4      	; 0x45ba <lora_driver_getRn2483Hweui+0x32>
    45b6:	18 82       	st	Y, r1
    45b8:	81 e0       	ldi	r24, 0x01	; 1
    45ba:	df 91       	pop	r29
    45bc:	cf 91       	pop	r28
    45be:	08 95       	ret

000045c0 <lora_driver_setDeviceIdentifier>:
    45c0:	fc 01       	movw	r30, r24
    45c2:	01 90       	ld	r0, Z+
    45c4:	00 20       	and	r0, r0
    45c6:	e9 f7       	brne	.-6      	; 0x45c2 <lora_driver_setDeviceIdentifier+0x2>
    45c8:	9f 01       	movw	r18, r30
    45ca:	21 51       	subi	r18, 0x11	; 17
    45cc:	31 09       	sbc	r19, r1
    45ce:	28 17       	cp	r18, r24
    45d0:	39 07       	cpc	r19, r25
    45d2:	29 f4       	brne	.+10     	; 0x45de <lora_driver_setDeviceIdentifier+0x1e>
    45d4:	bc 01       	movw	r22, r24
    45d6:	88 e1       	ldi	r24, 0x18	; 24
    45d8:	96 e0       	ldi	r25, 0x06	; 6
    45da:	6c cf       	rjmp	.-296    	; 0x44b4 <_uploadMessageRc>
    45dc:	08 95       	ret
    45de:	89 e0       	ldi	r24, 0x09	; 9
    45e0:	08 95       	ret

000045e2 <lora_driver_setApplicationIdentifier>:
    45e2:	fc 01       	movw	r30, r24
    45e4:	01 90       	ld	r0, Z+
    45e6:	00 20       	and	r0, r0
    45e8:	e9 f7       	brne	.-6      	; 0x45e4 <lora_driver_setApplicationIdentifier+0x2>
    45ea:	9f 01       	movw	r18, r30
    45ec:	21 51       	subi	r18, 0x11	; 17
    45ee:	31 09       	sbc	r19, r1
    45f0:	28 17       	cp	r18, r24
    45f2:	39 07       	cpc	r19, r25
    45f4:	29 f4       	brne	.+10     	; 0x4600 <lora_driver_setApplicationIdentifier+0x1e>
    45f6:	bc 01       	movw	r22, r24
    45f8:	87 e2       	ldi	r24, 0x27	; 39
    45fa:	96 e0       	ldi	r25, 0x06	; 6
    45fc:	5b cf       	rjmp	.-330    	; 0x44b4 <_uploadMessageRc>
    45fe:	08 95       	ret
    4600:	89 e0       	ldi	r24, 0x09	; 9
    4602:	08 95       	ret

00004604 <lora_driver_setApplicationKey>:
    4604:	fc 01       	movw	r30, r24
    4606:	01 90       	ld	r0, Z+
    4608:	00 20       	and	r0, r0
    460a:	e9 f7       	brne	.-6      	; 0x4606 <lora_driver_setApplicationKey+0x2>
    460c:	9f 01       	movw	r18, r30
    460e:	21 52       	subi	r18, 0x21	; 33
    4610:	31 09       	sbc	r19, r1
    4612:	28 17       	cp	r18, r24
    4614:	39 07       	cpc	r19, r25
    4616:	29 f4       	brne	.+10     	; 0x4622 <lora_driver_setApplicationKey+0x1e>
    4618:	bc 01       	movw	r22, r24
    461a:	86 e3       	ldi	r24, 0x36	; 54
    461c:	96 e0       	ldi	r25, 0x06	; 6
    461e:	4a cf       	rjmp	.-364    	; 0x44b4 <_uploadMessageRc>
    4620:	08 95       	ret
    4622:	89 e0       	ldi	r24, 0x09	; 9
    4624:	08 95       	ret

00004626 <lora_driver_saveMac>:
    4626:	60 e0       	ldi	r22, 0x00	; 0
    4628:	70 e0       	ldi	r23, 0x00	; 0
    462a:	85 e7       	ldi	r24, 0x75	; 117
    462c:	96 e0       	ldi	r25, 0x06	; 6
    462e:	42 cf       	rjmp	.-380    	; 0x44b4 <_uploadMessageRc>
    4630:	08 95       	ret

00004632 <lora_driver_join>:
    4632:	0f 93       	push	r16
    4634:	1f 93       	push	r17
    4636:	e8 2f       	mov	r30, r24
    4638:	f0 e0       	ldi	r31, 0x00	; 0
    463a:	ee 0f       	add	r30, r30
    463c:	ff 1f       	adc	r31, r31
    463e:	e1 5b       	subi	r30, 0xB1	; 177
    4640:	f7 4f       	sbci	r31, 0xF7	; 247
    4642:	60 81       	ld	r22, Z
    4644:	71 81       	ldd	r23, Z+1	; 0x01
    4646:	8e e7       	ldi	r24, 0x7E	; 126
    4648:	96 e0       	ldi	r25, 0x06	; 6
    464a:	34 df       	rcall	.-408    	; 0x44b4 <_uploadMessageRc>
    464c:	81 11       	cpse	r24, r1
    464e:	14 c0       	rjmp	.+40     	; 0x4678 <lora_driver_join+0x46>
    4650:	08 e2       	ldi	r16, 0x28	; 40
    4652:	15 e0       	ldi	r17, 0x05	; 5
    4654:	20 e0       	ldi	r18, 0x00	; 0
    4656:	30 e0       	ldi	r19, 0x00	; 0
    4658:	4d e2       	ldi	r20, 0x2D	; 45
    465a:	50 e0       	ldi	r21, 0x00	; 0
    465c:	69 e7       	ldi	r22, 0x79	; 121
    465e:	77 e1       	ldi	r23, 0x17	; 23
    4660:	80 91 f0 16 	lds	r24, 0x16F0	; 0x8016f0 <_serialReplyBufferHandle>
    4664:	90 91 f1 16 	lds	r25, 0x16F1	; 0x8016f1 <_serialReplyBufferHandle+0x1>
    4668:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <xStreamBufferReceive>
    466c:	88 23       	and	r24, r24
    466e:	21 f0       	breq	.+8      	; 0x4678 <lora_driver_join+0x46>
    4670:	89 e7       	ldi	r24, 0x79	; 121
    4672:	97 e1       	ldi	r25, 0x17	; 23
    4674:	aa de       	rcall	.-684    	; 0x43ca <_reply2ReturnCode>
    4676:	03 c0       	rjmp	.+6      	; 0x467e <lora_driver_join+0x4c>
    4678:	89 e7       	ldi	r24, 0x79	; 121
    467a:	97 e1       	ldi	r25, 0x17	; 23
    467c:	a6 de       	rcall	.-692    	; 0x43ca <_reply2ReturnCode>
    467e:	1f 91       	pop	r17
    4680:	0f 91       	pop	r16
    4682:	08 95       	ret

00004684 <lora_driver_sendUploadMessage>:
    4684:	0f 93       	push	r16
    4686:	1f 93       	push	r17
    4688:	cf 93       	push	r28
    468a:	df 93       	push	r29
    468c:	1f 92       	push	r1
    468e:	cd b7       	in	r28, 0x3d	; 61
    4690:	de b7       	in	r29, 0x3e	; 62
    4692:	db 01       	movw	r26, r22
    4694:	11 96       	adiw	r26, 0x01	; 1
    4696:	9c 91       	ld	r25, X
    4698:	11 97       	sbiw	r26, 0x01	; 1
    469a:	95 31       	cpi	r25, 0x15	; 21
    469c:	08 f0       	brcs	.+2      	; 0x46a0 <lora_driver_sendUploadMessage+0x1c>
    469e:	b4 c0       	rjmp	.+360    	; 0x4808 <lora_driver_sendUploadMessage+0x184>
    46a0:	99 23       	and	r25, r25
    46a2:	81 f1       	breq	.+96     	; 0x4704 <lora_driver_sendUploadMessage+0x80>
    46a4:	60 e0       	ldi	r22, 0x00	; 0
    46a6:	70 e0       	ldi	r23, 0x00	; 0
    46a8:	27 2f       	mov	r18, r23
    46aa:	30 e0       	ldi	r19, 0x00	; 0
    46ac:	46 2f       	mov	r20, r22
    46ae:	50 e0       	ldi	r21, 0x00	; 0
    46b0:	fd 01       	movw	r30, r26
    46b2:	e4 0f       	add	r30, r20
    46b4:	f5 1f       	adc	r31, r21
    46b6:	92 81       	ldd	r25, Z+2	; 0x02
    46b8:	92 95       	swap	r25
    46ba:	9f 70       	andi	r25, 0x0F	; 15
    46bc:	9a 30       	cpi	r25, 0x0A	; 10
    46be:	10 f0       	brcs	.+4      	; 0x46c4 <lora_driver_sendUploadMessage+0x40>
    46c0:	99 5c       	subi	r25, 0xC9	; 201
    46c2:	01 c0       	rjmp	.+2      	; 0x46c6 <lora_driver_sendUploadMessage+0x42>
    46c4:	90 5d       	subi	r25, 0xD0	; 208
    46c6:	f9 01       	movw	r30, r18
    46c8:	e6 5f       	subi	r30, 0xF6	; 246
    46ca:	f8 4e       	sbci	r31, 0xE8	; 232
    46cc:	90 83       	st	Z, r25
    46ce:	2f 5f       	subi	r18, 0xFF	; 255
    46d0:	3f 4f       	sbci	r19, 0xFF	; 255
    46d2:	fd 01       	movw	r30, r26
    46d4:	e4 0f       	add	r30, r20
    46d6:	f5 1f       	adc	r31, r21
    46d8:	92 81       	ldd	r25, Z+2	; 0x02
    46da:	9f 70       	andi	r25, 0x0F	; 15
    46dc:	49 2f       	mov	r20, r25
    46de:	50 e0       	ldi	r21, 0x00	; 0
    46e0:	4a 30       	cpi	r20, 0x0A	; 10
    46e2:	51 05       	cpc	r21, r1
    46e4:	14 f0       	brlt	.+4      	; 0x46ea <lora_driver_sendUploadMessage+0x66>
    46e6:	99 5c       	subi	r25, 0xC9	; 201
    46e8:	01 c0       	rjmp	.+2      	; 0x46ec <lora_driver_sendUploadMessage+0x68>
    46ea:	90 5d       	subi	r25, 0xD0	; 208
    46ec:	f9 01       	movw	r30, r18
    46ee:	e6 5f       	subi	r30, 0xF6	; 246
    46f0:	f8 4e       	sbci	r31, 0xE8	; 232
    46f2:	90 83       	st	Z, r25
    46f4:	7e 5f       	subi	r23, 0xFE	; 254
    46f6:	6f 5f       	subi	r22, 0xFF	; 255
    46f8:	11 96       	adiw	r26, 0x01	; 1
    46fa:	9c 91       	ld	r25, X
    46fc:	11 97       	sbiw	r26, 0x01	; 1
    46fe:	69 17       	cp	r22, r25
    4700:	98 f2       	brcs	.-90     	; 0x46a8 <lora_driver_sendUploadMessage+0x24>
    4702:	01 c0       	rjmp	.+2      	; 0x4706 <lora_driver_sendUploadMessage+0x82>
    4704:	70 e0       	ldi	r23, 0x00	; 0
    4706:	e7 2f       	mov	r30, r23
    4708:	f0 e0       	ldi	r31, 0x00	; 0
    470a:	e6 5f       	subi	r30, 0xF6	; 246
    470c:	f8 4e       	sbci	r31, 0xE8	; 232
    470e:	10 82       	st	Z, r1
    4710:	4c 91       	ld	r20, X
    4712:	81 11       	cpse	r24, r1
    4714:	03 c0       	rjmp	.+6      	; 0x471c <lora_driver_sendUploadMessage+0x98>
    4716:	87 e8       	ldi	r24, 0x87	; 135
    4718:	96 e0       	ldi	r25, 0x06	; 6
    471a:	02 c0       	rjmp	.+4      	; 0x4720 <lora_driver_sendUploadMessage+0x9c>
    471c:	89 e8       	ldi	r24, 0x89	; 137
    471e:	96 e0       	ldi	r25, 0x06	; 6
    4720:	2a e0       	ldi	r18, 0x0A	; 10
    4722:	37 e1       	ldi	r19, 0x17	; 23
    4724:	3f 93       	push	r19
    4726:	2f 93       	push	r18
    4728:	1f 92       	push	r1
    472a:	4f 93       	push	r20
    472c:	9f 93       	push	r25
    472e:	8f 93       	push	r24
    4730:	8d e8       	ldi	r24, 0x8D	; 141
    4732:	96 e0       	ldi	r25, 0x06	; 6
    4734:	9f 93       	push	r25
    4736:	8f 93       	push	r24
    4738:	8c e4       	ldi	r24, 0x4C	; 76
    473a:	97 e1       	ldi	r25, 0x17	; 23
    473c:	9f 93       	push	r25
    473e:	8f 93       	push	r24
    4740:	0e 94 c1 36 	call	0x6d82	; 0x6d82 <sprintf>
    4744:	60 e0       	ldi	r22, 0x00	; 0
    4746:	70 e0       	ldi	r23, 0x00	; 0
    4748:	8c e4       	ldi	r24, 0x4C	; 76
    474a:	97 e1       	ldi	r25, 0x17	; 23
    474c:	b3 de       	rcall	.-666    	; 0x44b4 <_uploadMessageRc>
    474e:	0f b6       	in	r0, 0x3f	; 63
    4750:	f8 94       	cli
    4752:	de bf       	out	0x3e, r29	; 62
    4754:	0f be       	out	0x3f, r0	; 63
    4756:	cd bf       	out	0x3d, r28	; 61
    4758:	81 11       	cpse	r24, r1
    475a:	59 c0       	rjmp	.+178    	; 0x480e <lora_driver_sendUploadMessage+0x18a>
    475c:	08 e2       	ldi	r16, 0x28	; 40
    475e:	15 e0       	ldi	r17, 0x05	; 5
    4760:	20 e0       	ldi	r18, 0x00	; 0
    4762:	30 e0       	ldi	r19, 0x00	; 0
    4764:	4d e2       	ldi	r20, 0x2D	; 45
    4766:	50 e0       	ldi	r21, 0x00	; 0
    4768:	69 e7       	ldi	r22, 0x79	; 121
    476a:	77 e1       	ldi	r23, 0x17	; 23
    476c:	80 91 f0 16 	lds	r24, 0x16F0	; 0x8016f0 <_serialReplyBufferHandle>
    4770:	90 91 f1 16 	lds	r25, 0x16F1	; 0x8016f1 <_serialReplyBufferHandle+0x1>
    4774:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <xStreamBufferReceive>
    4778:	88 23       	and	r24, r24
    477a:	09 f4       	brne	.+2      	; 0x477e <lora_driver_sendUploadMessage+0xfa>
    477c:	47 c0       	rjmp	.+142    	; 0x480c <lora_driver_sendUploadMessage+0x188>
    477e:	89 e7       	ldi	r24, 0x79	; 121
    4780:	97 e1       	ldi	r25, 0x17	; 23
    4782:	23 de       	rcall	.-954    	; 0x43ca <_reply2ReturnCode>
    4784:	8e 30       	cpi	r24, 0x0E	; 14
    4786:	09 f0       	breq	.+2      	; 0x478a <lora_driver_sendUploadMessage+0x106>
    4788:	42 c0       	rjmp	.+132    	; 0x480e <lora_driver_sendUploadMessage+0x18a>
    478a:	87 e0       	ldi	r24, 0x07	; 7
    478c:	89 83       	std	Y+1, r24	; 0x01
    478e:	80 91 ee 16 	lds	r24, 0x16EE	; 0x8016ee <_downlinkMessageBuffer>
    4792:	90 91 ef 16 	lds	r25, 0x16EF	; 0x8016ef <_downlinkMessageBuffer+0x1>
    4796:	89 2b       	or	r24, r25
    4798:	a9 f1       	breq	.+106    	; 0x4804 <lora_driver_sendUploadMessage+0x180>
    479a:	be 01       	movw	r22, r28
    479c:	6f 5f       	subi	r22, 0xFF	; 255
    479e:	7f 4f       	sbci	r23, 0xFF	; 255
    47a0:	89 e7       	ldi	r24, 0x79	; 121
    47a2:	97 e1       	ldi	r25, 0x17	; 23
    47a4:	68 d1       	rcall	.+720    	; 0x4a76 <decode_port_no>
    47a6:	80 93 f4 16 	sts	0x16F4, r24	; 0x8016f4 <_downlinkPayload>
    47aa:	e9 81       	ldd	r30, Y+1	; 0x01
    47ac:	f0 e0       	ldi	r31, 0x00	; 0
    47ae:	e7 58       	subi	r30, 0x87	; 135
    47b0:	f8 4e       	sbci	r31, 0xE8	; 232
    47b2:	df 01       	movw	r26, r30
    47b4:	0d 90       	ld	r0, X+
    47b6:	00 20       	and	r0, r0
    47b8:	e9 f7       	brne	.-6      	; 0x47b4 <lora_driver_sendUploadMessage+0x130>
    47ba:	11 97       	sbiw	r26, 0x01	; 1
    47bc:	ae 1b       	sub	r26, r30
    47be:	bf 0b       	sbc	r27, r31
    47c0:	aa 23       	and	r26, r26
    47c2:	91 f0       	breq	.+36     	; 0x47e8 <lora_driver_sendUploadMessage+0x164>
    47c4:	bb 27       	eor	r27, r27
    47c6:	cd 01       	movw	r24, r26
    47c8:	01 97       	sbiw	r24, 0x01	; 1
    47ca:	9c 01       	movw	r18, r24
    47cc:	12 f4       	brpl	.+4      	; 0x47d2 <lora_driver_sendUploadMessage+0x14e>
    47ce:	2f 5f       	subi	r18, 0xFF	; 255
    47d0:	3f 4f       	sbci	r19, 0xFF	; 255
    47d2:	35 95       	asr	r19
    47d4:	27 95       	ror	r18
    47d6:	20 93 f5 16 	sts	0x16F5, r18	; 0x8016f5 <_downlinkPayload+0x1>
    47da:	af 01       	movw	r20, r30
    47dc:	4f 5f       	subi	r20, 0xFF	; 255
    47de:	5f 4f       	sbci	r21, 0xFF	; 255
    47e0:	64 e1       	ldi	r22, 0x14	; 20
    47e2:	86 ef       	ldi	r24, 0xF6	; 246
    47e4:	96 e1       	ldi	r25, 0x16	; 22
    47e6:	73 d1       	rcall	.+742    	; 0x4ace <decode_hexadecimal_string_bytes>
    47e8:	01 e0       	ldi	r16, 0x01	; 1
    47ea:	10 e0       	ldi	r17, 0x00	; 0
    47ec:	20 e0       	ldi	r18, 0x00	; 0
    47ee:	30 e0       	ldi	r19, 0x00	; 0
    47f0:	46 e1       	ldi	r20, 0x16	; 22
    47f2:	50 e0       	ldi	r21, 0x00	; 0
    47f4:	64 ef       	ldi	r22, 0xF4	; 244
    47f6:	76 e1       	ldi	r23, 0x16	; 22
    47f8:	80 91 ee 16 	lds	r24, 0x16EE	; 0x8016ee <_downlinkMessageBuffer>
    47fc:	90 91 ef 16 	lds	r25, 0x16EF	; 0x8016ef <_downlinkMessageBuffer+0x1>
    4800:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <xStreamBufferSend>
    4804:	8e e0       	ldi	r24, 0x0E	; 14
    4806:	03 c0       	rjmp	.+6      	; 0x480e <lora_driver_sendUploadMessage+0x18a>
    4808:	84 e1       	ldi	r24, 0x14	; 20
    480a:	01 c0       	rjmp	.+2      	; 0x480e <lora_driver_sendUploadMessage+0x18a>
    480c:	80 e0       	ldi	r24, 0x00	; 0
    480e:	0f 90       	pop	r0
    4810:	df 91       	pop	r29
    4812:	cf 91       	pop	r28
    4814:	1f 91       	pop	r17
    4816:	0f 91       	pop	r16
    4818:	08 95       	ret

0000481a <lora_driver_setAdaptiveDataRate>:
    481a:	81 30       	cpi	r24, 0x01	; 1
    481c:	19 f0       	breq	.+6      	; 0x4824 <lora_driver_setAdaptiveDataRate+0xa>
    481e:	6d e9       	ldi	r22, 0x9D	; 157
    4820:	76 e0       	ldi	r23, 0x06	; 6
    4822:	02 c0       	rjmp	.+4      	; 0x4828 <lora_driver_setAdaptiveDataRate+0xe>
    4824:	66 e7       	ldi	r22, 0x76	; 118
    4826:	77 e0       	ldi	r23, 0x07	; 7
    4828:	81 ea       	ldi	r24, 0xA1	; 161
    482a:	96 e0       	ldi	r25, 0x06	; 6
    482c:	43 ce       	rjmp	.-890    	; 0x44b4 <_uploadMessageRc>
    482e:	08 95       	ret

00004830 <lora_driver_setReceiveDelay>:
    4830:	9f 93       	push	r25
    4832:	8f 93       	push	r24
    4834:	82 ed       	ldi	r24, 0xD2	; 210
    4836:	96 e0       	ldi	r25, 0x06	; 6
    4838:	9f 93       	push	r25
    483a:	8f 93       	push	r24
    483c:	8c e4       	ldi	r24, 0x4C	; 76
    483e:	97 e1       	ldi	r25, 0x17	; 23
    4840:	9f 93       	push	r25
    4842:	8f 93       	push	r24
    4844:	0e 94 c1 36 	call	0x6d82	; 0x6d82 <sprintf>
    4848:	60 e0       	ldi	r22, 0x00	; 0
    484a:	70 e0       	ldi	r23, 0x00	; 0
    484c:	8c e4       	ldi	r24, 0x4C	; 76
    484e:	97 e1       	ldi	r25, 0x17	; 23
    4850:	31 de       	rcall	.-926    	; 0x44b4 <_uploadMessageRc>
    4852:	0f 90       	pop	r0
    4854:	0f 90       	pop	r0
    4856:	0f 90       	pop	r0
    4858:	0f 90       	pop	r0
    485a:	0f 90       	pop	r0
    485c:	0f 90       	pop	r0
    485e:	08 95       	ret

00004860 <lora_driver_configureToEu868>:
    4860:	2f 92       	push	r2
    4862:	3f 92       	push	r3
    4864:	4f 92       	push	r4
    4866:	5f 92       	push	r5
    4868:	6f 92       	push	r6
    486a:	7f 92       	push	r7
    486c:	8f 92       	push	r8
    486e:	9f 92       	push	r9
    4870:	af 92       	push	r10
    4872:	bf 92       	push	r11
    4874:	cf 92       	push	r12
    4876:	df 92       	push	r13
    4878:	ef 92       	push	r14
    487a:	ff 92       	push	r15
    487c:	0f 93       	push	r16
    487e:	1f 93       	push	r17
    4880:	cf 93       	push	r28
    4882:	df 93       	push	r29
    4884:	cd b7       	in	r28, 0x3d	; 61
    4886:	de b7       	in	r29, 0x3e	; 62
    4888:	a0 97       	sbiw	r28, 0x20	; 32
    488a:	0f b6       	in	r0, 0x3f	; 63
    488c:	f8 94       	cli
    488e:	de bf       	out	0x3e, r29	; 62
    4890:	0f be       	out	0x3f, r0	; 63
    4892:	cd bf       	out	0x3d, r28	; 61
    4894:	6f ef       	ldi	r22, 0xFF	; 255
    4896:	76 e0       	ldi	r23, 0x06	; 6
    4898:	8b e0       	ldi	r24, 0x0B	; 11
    489a:	97 e0       	ldi	r25, 0x07	; 7
    489c:	3c dd       	rcall	.-1416   	; 0x4316 <_uploadMessage>
    489e:	95 dd       	rcall	.-1238   	; 0x43ca <_reply2ReturnCode>
    48a0:	81 11       	cpse	r24, r1
    48a2:	a3 c0       	rjmp	.+326    	; 0x49ea <lora_driver_configureToEu868+0x18a>
    48a4:	80 e2       	ldi	r24, 0x20	; 32
    48a6:	e2 e2       	ldi	r30, 0x22	; 34
    48a8:	f2 e0       	ldi	r31, 0x02	; 2
    48aa:	de 01       	movw	r26, r28
    48ac:	11 96       	adiw	r26, 0x01	; 1
    48ae:	01 90       	ld	r0, Z+
    48b0:	0d 92       	st	X+, r0
    48b2:	8a 95       	dec	r24
    48b4:	e1 f7       	brne	.-8      	; 0x48ae <lora_driver_configureToEu868+0x4e>
    48b6:	9e 01       	movw	r18, r28
    48b8:	2f 5f       	subi	r18, 0xFF	; 255
    48ba:	3f 4f       	sbci	r19, 0xFF	; 255
    48bc:	69 01       	movw	r12, r18
    48be:	e1 2c       	mov	r14, r1
    48c0:	f1 2c       	mov	r15, r1
    48c2:	0f 2e       	mov	r0, r31
    48c4:	f7 e1       	ldi	r31, 0x17	; 23
    48c6:	af 2e       	mov	r10, r31
    48c8:	f7 e0       	ldi	r31, 0x07	; 7
    48ca:	bf 2e       	mov	r11, r31
    48cc:	f0 2d       	mov	r31, r0
    48ce:	0c e4       	ldi	r16, 0x4C	; 76
    48d0:	17 e1       	ldi	r17, 0x17	; 23
    48d2:	0f 2e       	mov	r0, r31
    48d4:	f0 e3       	ldi	r31, 0x30	; 48
    48d6:	4f 2e       	mov	r4, r31
    48d8:	f7 e0       	ldi	r31, 0x07	; 7
    48da:	5f 2e       	mov	r5, r31
    48dc:	f0 2d       	mov	r31, r0
    48de:	0f 2e       	mov	r0, r31
    48e0:	f7 e4       	ldi	r31, 0x47	; 71
    48e2:	8f 2e       	mov	r8, r31
    48e4:	f7 e0       	ldi	r31, 0x07	; 7
    48e6:	9f 2e       	mov	r9, r31
    48e8:	f0 2d       	mov	r31, r0
    48ea:	0f 2e       	mov	r0, r31
    48ec:	f1 e6       	ldi	r31, 0x61	; 97
    48ee:	6f 2e       	mov	r6, r31
    48f0:	f7 e0       	ldi	r31, 0x07	; 7
    48f2:	7f 2e       	mov	r7, r31
    48f4:	f0 2d       	mov	r31, r0
    48f6:	3e 2c       	mov	r3, r14
    48f8:	2f 2c       	mov	r2, r15
    48fa:	ff 92       	push	r15
    48fc:	ef 92       	push	r14
    48fe:	bf 92       	push	r11
    4900:	af 92       	push	r10
    4902:	1f 93       	push	r17
    4904:	0f 93       	push	r16
    4906:	0e 94 c1 36 	call	0x6d82	; 0x6d82 <sprintf>
    490a:	60 e0       	ldi	r22, 0x00	; 0
    490c:	70 e0       	ldi	r23, 0x00	; 0
    490e:	c8 01       	movw	r24, r16
    4910:	02 dd       	rcall	.-1532   	; 0x4316 <_uploadMessage>
    4912:	5b dd       	rcall	.-1354   	; 0x43ca <_reply2ReturnCode>
    4914:	0f 90       	pop	r0
    4916:	0f 90       	pop	r0
    4918:	0f 90       	pop	r0
    491a:	0f 90       	pop	r0
    491c:	0f 90       	pop	r0
    491e:	0f 90       	pop	r0
    4920:	81 11       	cpse	r24, r1
    4922:	63 c0       	rjmp	.+198    	; 0x49ea <lora_driver_configureToEu868+0x18a>
    4924:	32 e0       	ldi	r19, 0x02	; 2
    4926:	3e 15       	cp	r19, r14
    4928:	e8 f4       	brcc	.+58     	; 0x4964 <lora_driver_configureToEu868+0x104>
    492a:	f6 01       	movw	r30, r12
    492c:	83 81       	ldd	r24, Z+3	; 0x03
    492e:	8f 93       	push	r24
    4930:	82 81       	ldd	r24, Z+2	; 0x02
    4932:	8f 93       	push	r24
    4934:	81 81       	ldd	r24, Z+1	; 0x01
    4936:	8f 93       	push	r24
    4938:	80 81       	ld	r24, Z
    493a:	8f 93       	push	r24
    493c:	ff 92       	push	r15
    493e:	ef 92       	push	r14
    4940:	5f 92       	push	r5
    4942:	4f 92       	push	r4
    4944:	1f 93       	push	r17
    4946:	0f 93       	push	r16
    4948:	0e 94 c1 36 	call	0x6d82	; 0x6d82 <sprintf>
    494c:	60 e0       	ldi	r22, 0x00	; 0
    494e:	70 e0       	ldi	r23, 0x00	; 0
    4950:	c8 01       	movw	r24, r16
    4952:	e1 dc       	rcall	.-1598   	; 0x4316 <_uploadMessage>
    4954:	3a dd       	rcall	.-1420   	; 0x43ca <_reply2ReturnCode>
    4956:	0f b6       	in	r0, 0x3f	; 63
    4958:	f8 94       	cli
    495a:	de bf       	out	0x3e, r29	; 62
    495c:	0f be       	out	0x3f, r0	; 63
    495e:	cd bf       	out	0x3d, r28	; 61
    4960:	81 11       	cpse	r24, r1
    4962:	43 c0       	rjmp	.+134    	; 0x49ea <lora_driver_configureToEu868+0x18a>
    4964:	2f 92       	push	r2
    4966:	3f 92       	push	r3
    4968:	9f 92       	push	r9
    496a:	8f 92       	push	r8
    496c:	1f 93       	push	r17
    496e:	0f 93       	push	r16
    4970:	0e 94 c1 36 	call	0x6d82	; 0x6d82 <sprintf>
    4974:	60 e0       	ldi	r22, 0x00	; 0
    4976:	70 e0       	ldi	r23, 0x00	; 0
    4978:	c8 01       	movw	r24, r16
    497a:	cd dc       	rcall	.-1638   	; 0x4316 <_uploadMessage>
    497c:	26 dd       	rcall	.-1460   	; 0x43ca <_reply2ReturnCode>
    497e:	0f 90       	pop	r0
    4980:	0f 90       	pop	r0
    4982:	0f 90       	pop	r0
    4984:	0f 90       	pop	r0
    4986:	0f 90       	pop	r0
    4988:	0f 90       	pop	r0
    498a:	81 11       	cpse	r24, r1
    498c:	2e c0       	rjmp	.+92     	; 0x49ea <lora_driver_configureToEu868+0x18a>
    498e:	2f 92       	push	r2
    4990:	3f 92       	push	r3
    4992:	7f 92       	push	r7
    4994:	6f 92       	push	r6
    4996:	1f 93       	push	r17
    4998:	0f 93       	push	r16
    499a:	0e 94 c1 36 	call	0x6d82	; 0x6d82 <sprintf>
    499e:	60 e0       	ldi	r22, 0x00	; 0
    49a0:	70 e0       	ldi	r23, 0x00	; 0
    49a2:	c8 01       	movw	r24, r16
    49a4:	b8 dc       	rcall	.-1680   	; 0x4316 <_uploadMessage>
    49a6:	11 dd       	rcall	.-1502   	; 0x43ca <_reply2ReturnCode>
    49a8:	0f 90       	pop	r0
    49aa:	0f 90       	pop	r0
    49ac:	0f 90       	pop	r0
    49ae:	0f 90       	pop	r0
    49b0:	0f 90       	pop	r0
    49b2:	0f 90       	pop	r0
    49b4:	81 11       	cpse	r24, r1
    49b6:	19 c0       	rjmp	.+50     	; 0x49ea <lora_driver_configureToEu868+0x18a>
    49b8:	3f ef       	ldi	r19, 0xFF	; 255
    49ba:	e3 1a       	sub	r14, r19
    49bc:	f3 0a       	sbc	r15, r19
    49be:	84 e0       	ldi	r24, 0x04	; 4
    49c0:	c8 0e       	add	r12, r24
    49c2:	d1 1c       	adc	r13, r1
    49c4:	98 e0       	ldi	r25, 0x08	; 8
    49c6:	e9 16       	cp	r14, r25
    49c8:	f1 04       	cpc	r15, r1
    49ca:	09 f0       	breq	.+2      	; 0x49ce <lora_driver_configureToEu868+0x16e>
    49cc:	94 cf       	rjmp	.-216    	; 0x48f6 <lora_driver_configureToEu868+0x96>
    49ce:	60 e0       	ldi	r22, 0x00	; 0
    49d0:	70 e0       	ldi	r23, 0x00	; 0
    49d2:	89 e7       	ldi	r24, 0x79	; 121
    49d4:	97 e0       	ldi	r25, 0x07	; 7
    49d6:	9f dc       	rcall	.-1730   	; 0x4316 <_uploadMessage>
    49d8:	f8 dc       	rcall	.-1552   	; 0x43ca <_reply2ReturnCode>
    49da:	81 11       	cpse	r24, r1
    49dc:	06 c0       	rjmp	.+12     	; 0x49ea <lora_driver_configureToEu868+0x18a>
    49de:	60 e0       	ldi	r22, 0x00	; 0
    49e0:	70 e0       	ldi	r23, 0x00	; 0
    49e2:	8a e8       	ldi	r24, 0x8A	; 138
    49e4:	97 e0       	ldi	r25, 0x07	; 7
    49e6:	97 dc       	rcall	.-1746   	; 0x4316 <_uploadMessage>
    49e8:	f0 dc       	rcall	.-1568   	; 0x43ca <_reply2ReturnCode>
    49ea:	a0 96       	adiw	r28, 0x20	; 32
    49ec:	0f b6       	in	r0, 0x3f	; 63
    49ee:	f8 94       	cli
    49f0:	de bf       	out	0x3e, r29	; 62
    49f2:	0f be       	out	0x3f, r0	; 63
    49f4:	cd bf       	out	0x3d, r28	; 61
    49f6:	df 91       	pop	r29
    49f8:	cf 91       	pop	r28
    49fa:	1f 91       	pop	r17
    49fc:	0f 91       	pop	r16
    49fe:	ff 90       	pop	r15
    4a00:	ef 90       	pop	r14
    4a02:	df 90       	pop	r13
    4a04:	cf 90       	pop	r12
    4a06:	bf 90       	pop	r11
    4a08:	af 90       	pop	r10
    4a0a:	9f 90       	pop	r9
    4a0c:	8f 90       	pop	r8
    4a0e:	7f 90       	pop	r7
    4a10:	6f 90       	pop	r6
    4a12:	5f 90       	pop	r5
    4a14:	4f 90       	pop	r4
    4a16:	3f 90       	pop	r3
    4a18:	2f 90       	pop	r2
    4a1a:	08 95       	ret

00004a1c <lora_driver_setOtaaIdentity>:
    4a1c:	ef 92       	push	r14
    4a1e:	ff 92       	push	r15
    4a20:	0f 93       	push	r16
    4a22:	1f 93       	push	r17
    4a24:	cf 93       	push	r28
    4a26:	df 93       	push	r29
    4a28:	ec 01       	movw	r28, r24
    4a2a:	8b 01       	movw	r16, r22
    4a2c:	7a 01       	movw	r14, r20
    4a2e:	81 e0       	ldi	r24, 0x01	; 1
    4a30:	f4 de       	rcall	.-536    	; 0x481a <lora_driver_setAdaptiveDataRate>
    4a32:	81 11       	cpse	r24, r1
    4a34:	0d c0       	rjmp	.+26     	; 0x4a50 <lora_driver_setOtaaIdentity+0x34>
    4a36:	ce 01       	movw	r24, r28
    4a38:	d4 dd       	rcall	.-1112   	; 0x45e2 <lora_driver_setApplicationIdentifier>
    4a3a:	81 11       	cpse	r24, r1
    4a3c:	09 c0       	rjmp	.+18     	; 0x4a50 <lora_driver_setOtaaIdentity+0x34>
    4a3e:	c8 01       	movw	r24, r16
    4a40:	e1 dd       	rcall	.-1086   	; 0x4604 <lora_driver_setApplicationKey>
    4a42:	81 11       	cpse	r24, r1
    4a44:	05 c0       	rjmp	.+10     	; 0x4a50 <lora_driver_setOtaaIdentity+0x34>
    4a46:	c7 01       	movw	r24, r14
    4a48:	bb dd       	rcall	.-1162   	; 0x45c0 <lora_driver_setDeviceIdentifier>
    4a4a:	81 11       	cpse	r24, r1
    4a4c:	01 c0       	rjmp	.+2      	; 0x4a50 <lora_driver_setOtaaIdentity+0x34>
    4a4e:	eb dd       	rcall	.-1066   	; 0x4626 <lora_driver_saveMac>
    4a50:	df 91       	pop	r29
    4a52:	cf 91       	pop	r28
    4a54:	1f 91       	pop	r17
    4a56:	0f 91       	pop	r16
    4a58:	ff 90       	pop	r15
    4a5a:	ef 90       	pop	r14
    4a5c:	08 95       	ret

00004a5e <lora_driver_mapReturnCodeToText>:
    4a5e:	90 e0       	ldi	r25, 0x00	; 0
    4a60:	fc 01       	movw	r30, r24
    4a62:	ee 0f       	add	r30, r30
    4a64:	ff 1f       	adc	r31, r31
    4a66:	8e 0f       	add	r24, r30
    4a68:	9f 1f       	adc	r25, r31
    4a6a:	fc 01       	movw	r30, r24
    4a6c:	ed 5a       	subi	r30, 0xAD	; 173
    4a6e:	f7 4f       	sbci	r31, 0xF7	; 247
    4a70:	81 81       	ldd	r24, Z+1	; 0x01
    4a72:	92 81       	ldd	r25, Z+2	; 0x02
    4a74:	08 95       	ret

00004a76 <decode_port_no>:
    4a76:	dc 01       	movw	r26, r24
    4a78:	00 97       	sbiw	r24, 0x00	; 0
    4a7a:	29 f1       	breq	.+74     	; 0x4ac6 <decode_port_no+0x50>
    4a7c:	fb 01       	movw	r30, r22
    4a7e:	20 81       	ld	r18, Z
    4a80:	fc 01       	movw	r30, r24
    4a82:	01 90       	ld	r0, Z+
    4a84:	00 20       	and	r0, r0
    4a86:	e9 f7       	brne	.-6      	; 0x4a82 <decode_port_no+0xc>
    4a88:	31 97       	sbiw	r30, 0x01	; 1
    4a8a:	e8 1b       	sub	r30, r24
    4a8c:	f9 0b       	sbc	r31, r25
    4a8e:	82 2f       	mov	r24, r18
    4a90:	90 e0       	ldi	r25, 0x00	; 0
    4a92:	e8 17       	cp	r30, r24
    4a94:	f9 07       	cpc	r31, r25
    4a96:	c8 f0       	brcs	.+50     	; 0x4aca <decode_port_no+0x54>
    4a98:	80 e0       	ldi	r24, 0x00	; 0
    4a9a:	08 c0       	rjmp	.+16     	; 0x4aac <decode_port_no+0x36>
    4a9c:	88 0f       	add	r24, r24
    4a9e:	38 2f       	mov	r19, r24
    4aa0:	33 0f       	add	r19, r19
    4aa2:	33 0f       	add	r19, r19
    4aa4:	83 0f       	add	r24, r19
    4aa6:	80 53       	subi	r24, 0x30	; 48
    4aa8:	89 0f       	add	r24, r25
    4aaa:	2f 5f       	subi	r18, 0xFF	; 255
    4aac:	fd 01       	movw	r30, r26
    4aae:	e2 0f       	add	r30, r18
    4ab0:	f1 1d       	adc	r31, r1
    4ab2:	90 81       	ld	r25, Z
    4ab4:	30 ed       	ldi	r19, 0xD0	; 208
    4ab6:	39 0f       	add	r19, r25
    4ab8:	3a 30       	cpi	r19, 0x0A	; 10
    4aba:	10 f4       	brcc	.+4      	; 0x4ac0 <decode_port_no+0x4a>
    4abc:	91 11       	cpse	r25, r1
    4abe:	ee cf       	rjmp	.-36     	; 0x4a9c <decode_port_no+0x26>
    4ac0:	fb 01       	movw	r30, r22
    4ac2:	20 83       	st	Z, r18
    4ac4:	08 95       	ret
    4ac6:	80 e0       	ldi	r24, 0x00	; 0
    4ac8:	08 95       	ret
    4aca:	80 e0       	ldi	r24, 0x00	; 0
    4acc:	08 95       	ret

00004ace <decode_hexadecimal_string_bytes>:
    4ace:	0f 93       	push	r16
    4ad0:	1f 93       	push	r17
    4ad2:	cf 93       	push	r28
    4ad4:	df 93       	push	r29
    4ad6:	dc 01       	movw	r26, r24
    4ad8:	ea 01       	movw	r28, r20
    4ada:	20 97       	sbiw	r28, 0x00	; 0
    4adc:	e1 f1       	breq	.+120    	; 0x4b56 <decode_hexadecimal_string_bytes+0x88>
    4ade:	fa 01       	movw	r30, r20
    4ae0:	01 90       	ld	r0, Z+
    4ae2:	00 20       	and	r0, r0
    4ae4:	e9 f7       	brne	.-6      	; 0x4ae0 <decode_hexadecimal_string_bytes+0x12>
    4ae6:	31 97       	sbiw	r30, 0x01	; 1
    4ae8:	e4 1b       	sub	r30, r20
    4aea:	f5 0b       	sbc	r31, r21
    4aec:	32 97       	sbiw	r30, 0x02	; 2
    4aee:	10 f5       	brcc	.+68     	; 0x4b34 <decode_hexadecimal_string_bytes+0x66>
    4af0:	32 c0       	rjmp	.+100    	; 0x4b56 <decode_hexadecimal_string_bytes+0x88>
    4af2:	8d 01       	movw	r16, r26
    4af4:	04 0f       	add	r16, r20
    4af6:	15 1f       	adc	r17, r21
    4af8:	30 e0       	ldi	r19, 0x00	; 0
    4afa:	ae 01       	movw	r20, r28
    4afc:	42 0f       	add	r20, r18
    4afe:	53 1f       	adc	r21, r19
    4b00:	fa 01       	movw	r30, r20
    4b02:	90 81       	ld	r25, Z
    4b04:	91 34       	cpi	r25, 0x41	; 65
    4b06:	28 f0       	brcs	.+10     	; 0x4b12 <decode_hexadecimal_string_bytes+0x44>
    4b08:	97 53       	subi	r25, 0x37	; 55
    4b0a:	59 2f       	mov	r21, r25
    4b0c:	52 95       	swap	r21
    4b0e:	50 7f       	andi	r21, 0xF0	; 240
    4b10:	03 c0       	rjmp	.+6      	; 0x4b18 <decode_hexadecimal_string_bytes+0x4a>
    4b12:	59 2f       	mov	r21, r25
    4b14:	52 95       	swap	r21
    4b16:	50 7f       	andi	r21, 0xF0	; 240
    4b18:	2c 0f       	add	r18, r28
    4b1a:	3d 1f       	adc	r19, r29
    4b1c:	f9 01       	movw	r30, r18
    4b1e:	91 81       	ldd	r25, Z+1	; 0x01
    4b20:	91 34       	cpi	r25, 0x41	; 65
    4b22:	10 f0       	brcs	.+4      	; 0x4b28 <decode_hexadecimal_string_bytes+0x5a>
    4b24:	97 53       	subi	r25, 0x37	; 55
    4b26:	01 c0       	rjmp	.+2      	; 0x4b2a <decode_hexadecimal_string_bytes+0x5c>
    4b28:	90 53       	subi	r25, 0x30	; 48
    4b2a:	95 0f       	add	r25, r21
    4b2c:	f8 01       	movw	r30, r16
    4b2e:	90 83       	st	Z, r25
    4b30:	8f 5f       	subi	r24, 0xFF	; 255
    4b32:	01 c0       	rjmp	.+2      	; 0x4b36 <decode_hexadecimal_string_bytes+0x68>
    4b34:	80 e0       	ldi	r24, 0x00	; 0
    4b36:	28 2f       	mov	r18, r24
    4b38:	22 0f       	add	r18, r18
    4b3a:	48 2f       	mov	r20, r24
    4b3c:	50 e0       	ldi	r21, 0x00	; 0
    4b3e:	fe 01       	movw	r30, r28
    4b40:	01 90       	ld	r0, Z+
    4b42:	00 20       	and	r0, r0
    4b44:	e9 f7       	brne	.-6      	; 0x4b40 <decode_hexadecimal_string_bytes+0x72>
    4b46:	31 97       	sbiw	r30, 0x01	; 1
    4b48:	ec 1b       	sub	r30, r28
    4b4a:	fd 0b       	sbc	r31, r29
    4b4c:	4e 17       	cp	r20, r30
    4b4e:	5f 07       	cpc	r21, r31
    4b50:	10 f4       	brcc	.+4      	; 0x4b56 <decode_hexadecimal_string_bytes+0x88>
    4b52:	86 13       	cpse	r24, r22
    4b54:	ce cf       	rjmp	.-100    	; 0x4af2 <decode_hexadecimal_string_bytes+0x24>
    4b56:	df 91       	pop	r29
    4b58:	cf 91       	pop	r28
    4b5a:	1f 91       	pop	r17
    4b5c:	0f 91       	pop	r16
    4b5e:	08 95       	ret

00004b60 <_serialCallBack>:
    4b60:	80 91 a9 17 	lds	r24, 0x17A9	; 0x8017a9 <crc_sum.1945>
    4b64:	86 0f       	add	r24, r22
    4b66:	80 93 a9 17 	sts	0x17A9, r24	; 0x8017a9 <crc_sum.1945>
    4b6a:	90 91 ac 17 	lds	r25, 0x17AC	; 0x8017ac <_mh_state>
    4b6e:	91 30       	cpi	r25, 0x01	; 1
    4b70:	79 f0       	breq	.+30     	; 0x4b90 <_serialCallBack+0x30>
    4b72:	28 f0       	brcs	.+10     	; 0x4b7e <_serialCallBack+0x1e>
    4b74:	92 30       	cpi	r25, 0x02	; 2
    4b76:	a9 f0       	breq	.+42     	; 0x4ba2 <_serialCallBack+0x42>
    4b78:	93 30       	cpi	r25, 0x03	; 3
    4b7a:	19 f1       	breq	.+70     	; 0x4bc2 <_serialCallBack+0x62>
    4b7c:	08 95       	ret
    4b7e:	6f 3f       	cpi	r22, 0xFF	; 255
    4b80:	09 f0       	breq	.+2      	; 0x4b84 <_serialCallBack+0x24>
    4b82:	48 c0       	rjmp	.+144    	; 0x4c14 <_serialCallBack+0xb4>
    4b84:	10 92 a9 17 	sts	0x17A9, r1	; 0x8017a9 <crc_sum.1945>
    4b88:	81 e0       	ldi	r24, 0x01	; 1
    4b8a:	80 93 ac 17 	sts	0x17AC, r24	; 0x8017ac <_mh_state>
    4b8e:	08 95       	ret
    4b90:	66 38       	cpi	r22, 0x86	; 134
    4b92:	09 f0       	breq	.+2      	; 0x4b96 <_serialCallBack+0x36>
    4b94:	3f c0       	rjmp	.+126    	; 0x4c14 <_serialCallBack+0xb4>
    4b96:	10 92 a8 17 	sts	0x17A8, r1	; 0x8017a8 <inDex.1943>
    4b9a:	82 e0       	ldi	r24, 0x02	; 2
    4b9c:	80 93 ac 17 	sts	0x17AC, r24	; 0x8017ac <_mh_state>
    4ba0:	08 95       	ret
    4ba2:	e0 91 a8 17 	lds	r30, 0x17A8	; 0x8017a8 <inDex.1943>
    4ba6:	81 e0       	ldi	r24, 0x01	; 1
    4ba8:	8e 0f       	add	r24, r30
    4baa:	80 93 a8 17 	sts	0x17A8, r24	; 0x8017a8 <inDex.1943>
    4bae:	f0 e0       	ldi	r31, 0x00	; 0
    4bb0:	ea 55       	subi	r30, 0x5A	; 90
    4bb2:	f8 4e       	sbci	r31, 0xE8	; 232
    4bb4:	60 83       	st	Z, r22
    4bb6:	82 30       	cpi	r24, 0x02	; 2
    4bb8:	69 f5       	brne	.+90     	; 0x4c14 <_serialCallBack+0xb4>
    4bba:	83 e0       	ldi	r24, 0x03	; 3
    4bbc:	80 93 ac 17 	sts	0x17AC, r24	; 0x8017ac <_mh_state>
    4bc0:	08 95       	ret
    4bc2:	90 91 a8 17 	lds	r25, 0x17A8	; 0x8017a8 <inDex.1943>
    4bc6:	21 e0       	ldi	r18, 0x01	; 1
    4bc8:	29 0f       	add	r18, r25
    4bca:	20 93 a8 17 	sts	0x17A8, r18	; 0x8017a8 <inDex.1943>
    4bce:	96 30       	cpi	r25, 0x06	; 6
    4bd0:	09 f5       	brne	.+66     	; 0x4c14 <_serialCallBack+0xb4>
    4bd2:	81 11       	cpse	r24, r1
    4bd4:	0e c0       	rjmp	.+28     	; 0x4bf2 <_serialCallBack+0x92>
    4bd6:	e6 ea       	ldi	r30, 0xA6	; 166
    4bd8:	f7 e1       	ldi	r31, 0x17	; 23
    4bda:	80 81       	ld	r24, Z
    4bdc:	90 e0       	ldi	r25, 0x00	; 0
    4bde:	98 2f       	mov	r25, r24
    4be0:	88 27       	eor	r24, r24
    4be2:	21 81       	ldd	r18, Z+1	; 0x01
    4be4:	82 0f       	add	r24, r18
    4be6:	91 1d       	adc	r25, r1
    4be8:	90 93 ae 17 	sts	0x17AE, r25	; 0x8017ae <_ppm+0x1>
    4bec:	80 93 ad 17 	sts	0x17AD, r24	; 0x8017ad <_ppm>
    4bf0:	04 c0       	rjmp	.+8      	; 0x4bfa <_serialCallBack+0x9a>
    4bf2:	10 92 ae 17 	sts	0x17AE, r1	; 0x8017ae <_ppm+0x1>
    4bf6:	10 92 ad 17 	sts	0x17AD, r1	; 0x8017ad <_ppm>
    4bfa:	10 92 ac 17 	sts	0x17AC, r1	; 0x8017ac <_mh_state>
    4bfe:	e0 91 aa 17 	lds	r30, 0x17AA	; 0x8017aa <_appCallBack>
    4c02:	f0 91 ab 17 	lds	r31, 0x17AB	; 0x8017ab <_appCallBack+0x1>
    4c06:	30 97       	sbiw	r30, 0x00	; 0
    4c08:	29 f0       	breq	.+10     	; 0x4c14 <_serialCallBack+0xb4>
    4c0a:	80 91 ad 17 	lds	r24, 0x17AD	; 0x8017ad <_ppm>
    4c0e:	90 91 ae 17 	lds	r25, 0x17AE	; 0x8017ae <_ppm+0x1>
    4c12:	19 95       	eicall
    4c14:	08 95       	ret

00004c16 <mh_z19_initialise>:
    4c16:	8f 92       	push	r8
    4c18:	9f 92       	push	r9
    4c1a:	af 92       	push	r10
    4c1c:	cf 92       	push	r12
    4c1e:	ef 92       	push	r14
    4c20:	0f 93       	push	r16
    4c22:	0f 2e       	mov	r0, r31
    4c24:	f0 eb       	ldi	r31, 0xB0	; 176
    4c26:	8f 2e       	mov	r8, r31
    4c28:	f5 e2       	ldi	r31, 0x25	; 37
    4c2a:	9f 2e       	mov	r9, r31
    4c2c:	f0 2d       	mov	r31, r0
    4c2e:	68 94       	set
    4c30:	aa 24       	eor	r10, r10
    4c32:	a4 f8       	bld	r10, 4
    4c34:	68 94       	set
    4c36:	cc 24       	eor	r12, r12
    4c38:	c4 f8       	bld	r12, 4
    4c3a:	e1 2c       	mov	r14, r1
    4c3c:	00 e0       	ldi	r16, 0x00	; 0
    4c3e:	23 e0       	ldi	r18, 0x03	; 3
    4c40:	40 e8       	ldi	r20, 0x80	; 128
    4c42:	55 e2       	ldi	r21, 0x25	; 37
    4c44:	60 e0       	ldi	r22, 0x00	; 0
    4c46:	70 e0       	ldi	r23, 0x00	; 0
    4c48:	84 d0       	rcall	.+264    	; 0x4d52 <serial_create>
    4c4a:	90 93 b0 17 	sts	0x17B0, r25	; 0x8017b0 <_serial+0x1>
    4c4e:	80 93 af 17 	sts	0x17AF, r24	; 0x8017af <_serial>
    4c52:	0f 91       	pop	r16
    4c54:	ef 90       	pop	r14
    4c56:	cf 90       	pop	r12
    4c58:	af 90       	pop	r10
    4c5a:	9f 90       	pop	r9
    4c5c:	8f 90       	pop	r8
    4c5e:	08 95       	ret

00004c60 <mh_z19_injectCallBack>:
    4c60:	90 93 ab 17 	sts	0x17AB, r25	; 0x8017ab <_appCallBack+0x1>
    4c64:	80 93 aa 17 	sts	0x17AA, r24	; 0x8017aa <_appCallBack>
    4c68:	08 95       	ret

00004c6a <mh_z19_takeMeassuring>:
    4c6a:	cf 93       	push	r28
    4c6c:	df 93       	push	r29
    4c6e:	cd b7       	in	r28, 0x3d	; 61
    4c70:	de b7       	in	r29, 0x3e	; 62
    4c72:	29 97       	sbiw	r28, 0x09	; 9
    4c74:	0f b6       	in	r0, 0x3f	; 63
    4c76:	f8 94       	cli
    4c78:	de bf       	out	0x3e, r29	; 62
    4c7a:	0f be       	out	0x3f, r0	; 63
    4c7c:	cd bf       	out	0x3d, r28	; 61
    4c7e:	89 e0       	ldi	r24, 0x09	; 9
    4c80:	e2 e4       	ldi	r30, 0x42	; 66
    4c82:	f2 e0       	ldi	r31, 0x02	; 2
    4c84:	9e 01       	movw	r18, r28
    4c86:	2f 5f       	subi	r18, 0xFF	; 255
    4c88:	3f 4f       	sbci	r19, 0xFF	; 255
    4c8a:	d9 01       	movw	r26, r18
    4c8c:	01 90       	ld	r0, Z+
    4c8e:	0d 92       	st	X+, r0
    4c90:	8a 95       	dec	r24
    4c92:	e1 f7       	brne	.-8      	; 0x4c8c <mh_z19_takeMeassuring+0x22>
    4c94:	10 92 ae 17 	sts	0x17AE, r1	; 0x8017ae <_ppm+0x1>
    4c98:	10 92 ad 17 	sts	0x17AD, r1	; 0x8017ad <_ppm>
    4c9c:	80 91 af 17 	lds	r24, 0x17AF	; 0x8017af <_serial>
    4ca0:	90 91 b0 17 	lds	r25, 0x17B0	; 0x8017b0 <_serial+0x1>
    4ca4:	00 97       	sbiw	r24, 0x00	; 0
    4ca6:	31 f0       	breq	.+12     	; 0x4cb4 <mh_z19_takeMeassuring+0x4a>
    4ca8:	42 2f       	mov	r20, r18
    4caa:	53 2f       	mov	r21, r19
    4cac:	69 e0       	ldi	r22, 0x09	; 9
    4cae:	1e d1       	rcall	.+572    	; 0x4eec <serial_sendBytes>
    4cb0:	80 e0       	ldi	r24, 0x00	; 0
    4cb2:	01 c0       	rjmp	.+2      	; 0x4cb6 <mh_z19_takeMeassuring+0x4c>
    4cb4:	82 e0       	ldi	r24, 0x02	; 2
    4cb6:	29 96       	adiw	r28, 0x09	; 9
    4cb8:	0f b6       	in	r0, 0x3f	; 63
    4cba:	f8 94       	cli
    4cbc:	de bf       	out	0x3e, r29	; 62
    4cbe:	0f be       	out	0x3f, r0	; 63
    4cc0:	cd bf       	out	0x3d, r28	; 61
    4cc2:	df 91       	pop	r29
    4cc4:	cf 91       	pop	r28
    4cc6:	08 95       	ret

00004cc8 <mh_z19_getCo2Ppm>:
    4cc8:	20 91 ad 17 	lds	r18, 0x17AD	; 0x8017ad <_ppm>
    4ccc:	30 91 ae 17 	lds	r19, 0x17AE	; 0x8017ae <_ppm+0x1>
    4cd0:	21 15       	cp	r18, r1
    4cd2:	31 05       	cpc	r19, r1
    4cd4:	29 f4       	brne	.+10     	; 0x4ce0 <mh_z19_getCo2Ppm+0x18>
    4cd6:	fc 01       	movw	r30, r24
    4cd8:	11 82       	std	Z+1, r1	; 0x01
    4cda:	10 82       	st	Z, r1
    4cdc:	81 e0       	ldi	r24, 0x01	; 1
    4cde:	08 95       	ret
    4ce0:	fc 01       	movw	r30, r24
    4ce2:	31 83       	std	Z+1, r19	; 0x01
    4ce4:	20 83       	st	Z, r18
    4ce6:	80 e0       	ldi	r24, 0x00	; 0
    4ce8:	08 95       	ret

00004cea <rc_servo_setPosition>:
    4cea:	65 36       	cpi	r22, 0x65	; 101
    4cec:	0c f0       	brlt	.+2      	; 0x4cf0 <rc_servo_setPosition+0x6>
    4cee:	64 e6       	ldi	r22, 0x64	; 100
    4cf0:	6c 39       	cpi	r22, 0x9C	; 156
    4cf2:	0c f4       	brge	.+2      	; 0x4cf6 <rc_servo_setPosition+0xc>
    4cf4:	6c e9       	ldi	r22, 0x9C	; 156
    4cf6:	96 ef       	ldi	r25, 0xF6	; 246
    4cf8:	69 02       	muls	r22, r25
    4cfa:	b0 01       	movw	r22, r0
    4cfc:	11 24       	eor	r1, r1
    4cfe:	68 54       	subi	r22, 0x48	; 72
    4d00:	74 4f       	sbci	r23, 0xF4	; 244
    4d02:	81 11       	cpse	r24, r1
    4d04:	05 c0       	rjmp	.+10     	; 0x4d10 <rc_servo_setPosition+0x26>
    4d06:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4d0a:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    4d0e:	08 95       	ret
    4d10:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    4d14:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    4d18:	08 95       	ret

00004d1a <rc_servo_initialise>:
    4d1a:	ea e0       	ldi	r30, 0x0A	; 10
    4d1c:	f1 e0       	ldi	r31, 0x01	; 1
    4d1e:	80 81       	ld	r24, Z
    4d20:	88 61       	ori	r24, 0x18	; 24
    4d22:	80 83       	st	Z, r24
    4d24:	8f e3       	ldi	r24, 0x3F	; 63
    4d26:	9c e9       	ldi	r25, 0x9C	; 156
    4d28:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    4d2c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    4d30:	60 e0       	ldi	r22, 0x00	; 0
    4d32:	80 e0       	ldi	r24, 0x00	; 0
    4d34:	da df       	rcall	.-76     	; 0x4cea <rc_servo_setPosition>
    4d36:	60 e0       	ldi	r22, 0x00	; 0
    4d38:	81 e0       	ldi	r24, 0x01	; 1
    4d3a:	d7 df       	rcall	.-82     	; 0x4cea <rc_servo_setPosition>
    4d3c:	e0 e2       	ldi	r30, 0x20	; 32
    4d3e:	f1 e0       	ldi	r31, 0x01	; 1
    4d40:	80 81       	ld	r24, Z
    4d42:	82 6a       	ori	r24, 0xA2	; 162
    4d44:	80 83       	st	Z, r24
    4d46:	e1 e2       	ldi	r30, 0x21	; 33
    4d48:	f1 e0       	ldi	r31, 0x01	; 1
    4d4a:	80 81       	ld	r24, Z
    4d4c:	8a 61       	ori	r24, 0x1A	; 26
    4d4e:	80 83       	st	Z, r24
    4d50:	08 95       	ret

00004d52 <serial_create>:
    4d52:	2f 92       	push	r2
    4d54:	3f 92       	push	r3
    4d56:	4f 92       	push	r4
    4d58:	5f 92       	push	r5
    4d5a:	6f 92       	push	r6
    4d5c:	7f 92       	push	r7
    4d5e:	8f 92       	push	r8
    4d60:	9f 92       	push	r9
    4d62:	af 92       	push	r10
    4d64:	cf 92       	push	r12
    4d66:	ef 92       	push	r14
    4d68:	ff 92       	push	r15
    4d6a:	0f 93       	push	r16
    4d6c:	1f 93       	push	r17
    4d6e:	cf 93       	push	r28
    4d70:	df 93       	push	r29
    4d72:	cd b7       	in	r28, 0x3d	; 61
    4d74:	de b7       	in	r29, 0x3e	; 62
    4d76:	f8 2e       	mov	r15, r24
    4d78:	2a 01       	movw	r4, r20
    4d7a:	3b 01       	movw	r6, r22
    4d7c:	88 e0       	ldi	r24, 0x08	; 8
    4d7e:	90 e0       	ldi	r25, 0x00	; 0
    4d80:	0e 94 d0 33 	call	0x67a0	; 0x67a0 <malloc>
    4d84:	8c 01       	movw	r16, r24
    4d86:	8f 2d       	mov	r24, r15
    4d88:	90 e0       	ldi	r25, 0x00	; 0
    4d8a:	fc 01       	movw	r30, r24
    4d8c:	ee 0f       	add	r30, r30
    4d8e:	ff 1f       	adc	r31, r31
    4d90:	ef 54       	subi	r30, 0x4F	; 79
    4d92:	f8 4e       	sbci	r31, 0xE8	; 232
    4d94:	11 83       	std	Z+1, r17	; 0x01
    4d96:	00 83       	st	Z, r16
    4d98:	01 15       	cp	r16, r1
    4d9a:	11 05       	cpc	r17, r1
    4d9c:	09 f4       	brne	.+2      	; 0x4da0 <serial_create+0x4e>
    4d9e:	69 c0       	rjmp	.+210    	; 0x4e72 <serial_create+0x120>
    4da0:	88 0f       	add	r24, r24
    4da2:	99 1f       	adc	r25, r25
    4da4:	fc 01       	movw	r30, r24
    4da6:	e5 5f       	subi	r30, 0xF5	; 245
    4da8:	fd 4f       	sbci	r31, 0xFD	; 253
    4daa:	80 81       	ld	r24, Z
    4dac:	91 81       	ldd	r25, Z+1	; 0x01
    4dae:	d8 01       	movw	r26, r16
    4db0:	8d 93       	st	X+, r24
    4db2:	9c 93       	st	X, r25
    4db4:	8c 2d       	mov	r24, r12
    4db6:	90 e0       	ldi	r25, 0x00	; 0
    4db8:	88 0f       	add	r24, r24
    4dba:	99 1f       	adc	r25, r25
    4dbc:	88 0f       	add	r24, r24
    4dbe:	99 1f       	adc	r25, r25
    4dc0:	0e 94 d0 33 	call	0x67a0	; 0x67a0 <malloc>
    4dc4:	1c 01       	movw	r2, r24
    4dc6:	86 e0       	ldi	r24, 0x06	; 6
    4dc8:	90 e0       	ldi	r25, 0x00	; 0
    4dca:	0e 94 d0 33 	call	0x67a0	; 0x67a0 <malloc>
    4dce:	7c 01       	movw	r14, r24
    4dd0:	4c 2d       	mov	r20, r12
    4dd2:	b1 01       	movw	r22, r2
    4dd4:	f1 d6       	rcall	.+3554   	; 0x5bb8 <fifo_init>
    4dd6:	f8 01       	movw	r30, r16
    4dd8:	f5 82       	std	Z+5, r15	; 0x05
    4dda:	e4 82       	std	Z+4, r14	; 0x04
    4ddc:	8a 2d       	mov	r24, r10
    4dde:	90 e0       	ldi	r25, 0x00	; 0
    4de0:	88 0f       	add	r24, r24
    4de2:	99 1f       	adc	r25, r25
    4de4:	88 0f       	add	r24, r24
    4de6:	99 1f       	adc	r25, r25
    4de8:	0e 94 d0 33 	call	0x67a0	; 0x67a0 <malloc>
    4dec:	1c 01       	movw	r2, r24
    4dee:	86 e0       	ldi	r24, 0x06	; 6
    4df0:	90 e0       	ldi	r25, 0x00	; 0
    4df2:	0e 94 d0 33 	call	0x67a0	; 0x67a0 <malloc>
    4df6:	7c 01       	movw	r14, r24
    4df8:	4a 2d       	mov	r20, r10
    4dfa:	b1 01       	movw	r22, r2
    4dfc:	dd d6       	rcall	.+3514   	; 0x5bb8 <fifo_init>
    4dfe:	d8 01       	movw	r26, r16
    4e00:	13 96       	adiw	r26, 0x03	; 3
    4e02:	fc 92       	st	X, r15
    4e04:	ee 92       	st	-X, r14
    4e06:	12 97       	sbiw	r26, 0x02	; 2
    4e08:	17 96       	adiw	r26, 0x07	; 7
    4e0a:	9c 92       	st	X, r9
    4e0c:	8e 92       	st	-X, r8
    4e0e:	16 97       	sbiw	r26, 0x06	; 6
    4e10:	ff b6       	in	r15, 0x3f	; 63
    4e12:	f8 94       	cli
    4e14:	ed 91       	ld	r30, X+
    4e16:	fc 91       	ld	r31, X
    4e18:	11 97       	sbiw	r26, 0x01	; 1
    4e1a:	36 97       	sbiw	r30, 0x06	; 6
    4e1c:	80 81       	ld	r24, Z
    4e1e:	82 60       	ori	r24, 0x02	; 2
    4e20:	80 83       	st	Z, r24
    4e22:	8d 90       	ld	r8, X+
    4e24:	9c 90       	ld	r9, X
    4e26:	c3 01       	movw	r24, r6
    4e28:	b2 01       	movw	r22, r4
    4e2a:	e0 d7       	rcall	.+4032   	; 0x5dec <__floatunsisf>
    4e2c:	20 e0       	ldi	r18, 0x00	; 0
    4e2e:	30 e0       	ldi	r19, 0x00	; 0
    4e30:	40 e0       	ldi	r20, 0x00	; 0
    4e32:	51 e4       	ldi	r21, 0x41	; 65
    4e34:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__mulsf3>
    4e38:	9b 01       	movw	r18, r22
    4e3a:	ac 01       	movw	r20, r24
    4e3c:	60 e0       	ldi	r22, 0x00	; 0
    4e3e:	74 e2       	ldi	r23, 0x24	; 36
    4e40:	84 e7       	ldi	r24, 0x74	; 116
    4e42:	9b e4       	ldi	r25, 0x4B	; 75
    4e44:	3a d7       	rcall	.+3700   	; 0x5cba <__divsf3>
    4e46:	20 e0       	ldi	r18, 0x00	; 0
    4e48:	30 e0       	ldi	r19, 0x00	; 0
    4e4a:	40 e8       	ldi	r20, 0x80	; 128
    4e4c:	5f e3       	ldi	r21, 0x3F	; 63
    4e4e:	d0 d6       	rcall	.+3488   	; 0x5bf0 <__subsf3>
    4e50:	a1 d7       	rcall	.+3906   	; 0x5d94 <__fixunssfsi>
    4e52:	f4 01       	movw	r30, r8
    4e54:	32 97       	sbiw	r30, 0x02	; 2
    4e56:	60 83       	st	Z, r22
    4e58:	d8 01       	movw	r26, r16
    4e5a:	ed 91       	ld	r30, X+
    4e5c:	fc 91       	ld	r31, X
    4e5e:	11 97       	sbiw	r26, 0x01	; 1
    4e60:	35 97       	sbiw	r30, 0x05	; 5
    4e62:	88 e9       	ldi	r24, 0x98	; 152
    4e64:	80 83       	st	Z, r24
    4e66:	ed 91       	ld	r30, X+
    4e68:	fc 91       	ld	r31, X
    4e6a:	34 97       	sbiw	r30, 0x04	; 4
    4e6c:	86 e0       	ldi	r24, 0x06	; 6
    4e6e:	80 83       	st	Z, r24
    4e70:	ff be       	out	0x3f, r15	; 63
    4e72:	c8 01       	movw	r24, r16
    4e74:	df 91       	pop	r29
    4e76:	cf 91       	pop	r28
    4e78:	1f 91       	pop	r17
    4e7a:	0f 91       	pop	r16
    4e7c:	ff 90       	pop	r15
    4e7e:	ef 90       	pop	r14
    4e80:	cf 90       	pop	r12
    4e82:	af 90       	pop	r10
    4e84:	9f 90       	pop	r9
    4e86:	8f 90       	pop	r8
    4e88:	7f 90       	pop	r7
    4e8a:	6f 90       	pop	r6
    4e8c:	5f 90       	pop	r5
    4e8e:	4f 90       	pop	r4
    4e90:	3f 90       	pop	r3
    4e92:	2f 90       	pop	r2
    4e94:	08 95       	ret

00004e96 <serial_sendByte>:
    4e96:	cf 93       	push	r28
    4e98:	df 93       	push	r29
    4e9a:	dc 01       	movw	r26, r24
    4e9c:	89 2b       	or	r24, r25
    4e9e:	01 f1       	breq	.+64     	; 0x4ee0 <serial_sendByte+0x4a>
    4ea0:	12 96       	adiw	r26, 0x02	; 2
    4ea2:	ed 91       	ld	r30, X+
    4ea4:	fc 91       	ld	r31, X
    4ea6:	13 97       	sbiw	r26, 0x03	; 3
    4ea8:	93 81       	ldd	r25, Z+3	; 0x03
    4eaa:	82 81       	ldd	r24, Z+2	; 0x02
    4eac:	25 81       	ldd	r18, Z+5	; 0x05
    4eae:	98 1b       	sub	r25, r24
    4eb0:	92 23       	and	r25, r18
    4eb2:	84 81       	ldd	r24, Z+4	; 0x04
    4eb4:	98 17       	cp	r25, r24
    4eb6:	b1 f0       	breq	.+44     	; 0x4ee4 <serial_sendByte+0x4e>
    4eb8:	83 81       	ldd	r24, Z+3	; 0x03
    4eba:	26 95       	lsr	r18
    4ebc:	28 23       	and	r18, r24
    4ebe:	c0 81       	ld	r28, Z
    4ec0:	d1 81       	ldd	r29, Z+1	; 0x01
    4ec2:	c2 0f       	add	r28, r18
    4ec4:	d1 1d       	adc	r29, r1
    4ec6:	68 83       	st	Y, r22
    4ec8:	8f 5f       	subi	r24, 0xFF	; 255
    4eca:	95 81       	ldd	r25, Z+5	; 0x05
    4ecc:	89 23       	and	r24, r25
    4ece:	83 83       	std	Z+3, r24	; 0x03
    4ed0:	ed 91       	ld	r30, X+
    4ed2:	fc 91       	ld	r31, X
    4ed4:	35 97       	sbiw	r30, 0x05	; 5
    4ed6:	80 81       	ld	r24, Z
    4ed8:	80 62       	ori	r24, 0x20	; 32
    4eda:	80 83       	st	Z, r24
    4edc:	80 e0       	ldi	r24, 0x00	; 0
    4ede:	03 c0       	rjmp	.+6      	; 0x4ee6 <serial_sendByte+0x50>
    4ee0:	81 e0       	ldi	r24, 0x01	; 1
    4ee2:	01 c0       	rjmp	.+2      	; 0x4ee6 <serial_sendByte+0x50>
    4ee4:	82 e0       	ldi	r24, 0x02	; 2
    4ee6:	df 91       	pop	r29
    4ee8:	cf 91       	pop	r28
    4eea:	08 95       	ret

00004eec <serial_sendBytes>:
    4eec:	ef 92       	push	r14
    4eee:	ff 92       	push	r15
    4ef0:	0f 93       	push	r16
    4ef2:	1f 93       	push	r17
    4ef4:	cf 93       	push	r28
    4ef6:	df 93       	push	r29
    4ef8:	7c 01       	movw	r14, r24
    4efa:	00 97       	sbiw	r24, 0x00	; 0
    4efc:	09 f4       	brne	.+2      	; 0x4f00 <serial_sendBytes+0x14>
    4efe:	41 c0       	rjmp	.+130    	; 0x4f82 <serial_sendBytes+0x96>
    4f00:	dc 01       	movw	r26, r24
    4f02:	12 96       	adiw	r26, 0x02	; 2
    4f04:	ed 91       	ld	r30, X+
    4f06:	fc 91       	ld	r31, X
    4f08:	13 97       	sbiw	r26, 0x03	; 3
    4f0a:	93 81       	ldd	r25, Z+3	; 0x03
    4f0c:	82 81       	ldd	r24, Z+2	; 0x02
    4f0e:	98 1b       	sub	r25, r24
    4f10:	85 81       	ldd	r24, Z+5	; 0x05
    4f12:	98 23       	and	r25, r24
    4f14:	84 81       	ldd	r24, Z+4	; 0x04
    4f16:	89 1b       	sub	r24, r25
    4f18:	86 17       	cp	r24, r22
    4f1a:	a8 f1       	brcs	.+106    	; 0x4f86 <serial_sendBytes+0x9a>
    4f1c:	66 23       	and	r22, r22
    4f1e:	41 f1       	breq	.+80     	; 0x4f70 <serial_sendBytes+0x84>
    4f20:	84 2f       	mov	r24, r20
    4f22:	95 2f       	mov	r25, r21
    4f24:	dc 01       	movw	r26, r24
    4f26:	61 50       	subi	r22, 0x01	; 1
    4f28:	46 2f       	mov	r20, r22
    4f2a:	50 e0       	ldi	r21, 0x00	; 0
    4f2c:	4f 5f       	subi	r20, 0xFF	; 255
    4f2e:	5f 4f       	sbci	r21, 0xFF	; 255
    4f30:	48 0f       	add	r20, r24
    4f32:	59 1f       	adc	r21, r25
    4f34:	e7 01       	movw	r28, r14
    4f36:	ea 81       	ldd	r30, Y+2	; 0x02
    4f38:	fb 81       	ldd	r31, Y+3	; 0x03
    4f3a:	93 81       	ldd	r25, Z+3	; 0x03
    4f3c:	82 81       	ldd	r24, Z+2	; 0x02
    4f3e:	25 81       	ldd	r18, Z+5	; 0x05
    4f40:	98 1b       	sub	r25, r24
    4f42:	92 23       	and	r25, r18
    4f44:	84 81       	ldd	r24, Z+4	; 0x04
    4f46:	98 17       	cp	r25, r24
    4f48:	79 f0       	breq	.+30     	; 0x4f68 <serial_sendBytes+0x7c>
    4f4a:	8c 91       	ld	r24, X
    4f4c:	93 81       	ldd	r25, Z+3	; 0x03
    4f4e:	26 95       	lsr	r18
    4f50:	29 23       	and	r18, r25
    4f52:	60 81       	ld	r22, Z
    4f54:	71 81       	ldd	r23, Z+1	; 0x01
    4f56:	8b 01       	movw	r16, r22
    4f58:	02 0f       	add	r16, r18
    4f5a:	11 1d       	adc	r17, r1
    4f5c:	e8 01       	movw	r28, r16
    4f5e:	88 83       	st	Y, r24
    4f60:	9f 5f       	subi	r25, 0xFF	; 255
    4f62:	85 81       	ldd	r24, Z+5	; 0x05
    4f64:	98 23       	and	r25, r24
    4f66:	93 83       	std	Z+3, r25	; 0x03
    4f68:	11 96       	adiw	r26, 0x01	; 1
    4f6a:	a4 17       	cp	r26, r20
    4f6c:	b5 07       	cpc	r27, r21
    4f6e:	11 f7       	brne	.-60     	; 0x4f34 <serial_sendBytes+0x48>
    4f70:	d7 01       	movw	r26, r14
    4f72:	ed 91       	ld	r30, X+
    4f74:	fc 91       	ld	r31, X
    4f76:	35 97       	sbiw	r30, 0x05	; 5
    4f78:	80 81       	ld	r24, Z
    4f7a:	80 62       	ori	r24, 0x20	; 32
    4f7c:	80 83       	st	Z, r24
    4f7e:	80 e0       	ldi	r24, 0x00	; 0
    4f80:	03 c0       	rjmp	.+6      	; 0x4f88 <serial_sendBytes+0x9c>
    4f82:	81 e0       	ldi	r24, 0x01	; 1
    4f84:	01 c0       	rjmp	.+2      	; 0x4f88 <serial_sendBytes+0x9c>
    4f86:	82 e0       	ldi	r24, 0x02	; 2
    4f88:	df 91       	pop	r29
    4f8a:	cf 91       	pop	r28
    4f8c:	1f 91       	pop	r17
    4f8e:	0f 91       	pop	r16
    4f90:	ff 90       	pop	r15
    4f92:	ef 90       	pop	r14
    4f94:	08 95       	ret

00004f96 <serial_getByte>:
    4f96:	00 97       	sbiw	r24, 0x00	; 0
    4f98:	d1 f0       	breq	.+52     	; 0x4fce <serial_getByte+0x38>
    4f9a:	dc 01       	movw	r26, r24
    4f9c:	14 96       	adiw	r26, 0x04	; 4
    4f9e:	ed 91       	ld	r30, X+
    4fa0:	fc 91       	ld	r31, X
    4fa2:	15 97       	sbiw	r26, 0x05	; 5
    4fa4:	93 81       	ldd	r25, Z+3	; 0x03
    4fa6:	82 81       	ldd	r24, Z+2	; 0x02
    4fa8:	98 17       	cp	r25, r24
    4faa:	99 f0       	breq	.+38     	; 0x4fd2 <serial_getByte+0x3c>
    4fac:	92 81       	ldd	r25, Z+2	; 0x02
    4fae:	85 81       	ldd	r24, Z+5	; 0x05
    4fb0:	86 95       	lsr	r24
    4fb2:	89 23       	and	r24, r25
    4fb4:	a0 81       	ld	r26, Z
    4fb6:	b1 81       	ldd	r27, Z+1	; 0x01
    4fb8:	a8 0f       	add	r26, r24
    4fba:	b1 1d       	adc	r27, r1
    4fbc:	8c 91       	ld	r24, X
    4fbe:	db 01       	movw	r26, r22
    4fc0:	8c 93       	st	X, r24
    4fc2:	9f 5f       	subi	r25, 0xFF	; 255
    4fc4:	85 81       	ldd	r24, Z+5	; 0x05
    4fc6:	98 23       	and	r25, r24
    4fc8:	92 83       	std	Z+2, r25	; 0x02
    4fca:	80 e0       	ldi	r24, 0x00	; 0
    4fcc:	08 95       	ret
    4fce:	81 e0       	ldi	r24, 0x01	; 1
    4fd0:	08 95       	ret
    4fd2:	83 e0       	ldi	r24, 0x03	; 3
    4fd4:	08 95       	ret

00004fd6 <__vector_25>:
    4fd6:	1f 92       	push	r1
    4fd8:	0f 92       	push	r0
    4fda:	0f b6       	in	r0, 0x3f	; 63
    4fdc:	0f 92       	push	r0
    4fde:	11 24       	eor	r1, r1
    4fe0:	0b b6       	in	r0, 0x3b	; 59
    4fe2:	0f 92       	push	r0
    4fe4:	2f 93       	push	r18
    4fe6:	3f 93       	push	r19
    4fe8:	4f 93       	push	r20
    4fea:	5f 93       	push	r21
    4fec:	6f 93       	push	r22
    4fee:	7f 93       	push	r23
    4ff0:	8f 93       	push	r24
    4ff2:	9f 93       	push	r25
    4ff4:	af 93       	push	r26
    4ff6:	bf 93       	push	r27
    4ff8:	cf 93       	push	r28
    4ffa:	df 93       	push	r29
    4ffc:	ef 93       	push	r30
    4ffe:	ff 93       	push	r31
    5000:	a0 91 b1 17 	lds	r26, 0x17B1	; 0x8017b1 <_ser_handle>
    5004:	b0 91 b2 17 	lds	r27, 0x17B2	; 0x8017b2 <_ser_handle+0x1>
    5008:	10 97       	sbiw	r26, 0x00	; 0
    500a:	11 f1       	breq	.+68     	; 0x5050 <__vector_25+0x7a>
    500c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    5010:	14 96       	adiw	r26, 0x04	; 4
    5012:	ed 91       	ld	r30, X+
    5014:	fc 91       	ld	r31, X
    5016:	15 97       	sbiw	r26, 0x05	; 5
    5018:	93 81       	ldd	r25, Z+3	; 0x03
    501a:	82 81       	ldd	r24, Z+2	; 0x02
    501c:	25 81       	ldd	r18, Z+5	; 0x05
    501e:	98 1b       	sub	r25, r24
    5020:	92 23       	and	r25, r18
    5022:	84 81       	ldd	r24, Z+4	; 0x04
    5024:	98 17       	cp	r25, r24
    5026:	61 f0       	breq	.+24     	; 0x5040 <__vector_25+0x6a>
    5028:	83 81       	ldd	r24, Z+3	; 0x03
    502a:	26 95       	lsr	r18
    502c:	28 23       	and	r18, r24
    502e:	c0 81       	ld	r28, Z
    5030:	d1 81       	ldd	r29, Z+1	; 0x01
    5032:	c2 0f       	add	r28, r18
    5034:	d1 1d       	adc	r29, r1
    5036:	68 83       	st	Y, r22
    5038:	8f 5f       	subi	r24, 0xFF	; 255
    503a:	95 81       	ldd	r25, Z+5	; 0x05
    503c:	89 23       	and	r24, r25
    503e:	83 83       	std	Z+3, r24	; 0x03
    5040:	16 96       	adiw	r26, 0x06	; 6
    5042:	ed 91       	ld	r30, X+
    5044:	fc 91       	ld	r31, X
    5046:	17 97       	sbiw	r26, 0x07	; 7
    5048:	30 97       	sbiw	r30, 0x00	; 0
    504a:	11 f0       	breq	.+4      	; 0x5050 <__vector_25+0x7a>
    504c:	cd 01       	movw	r24, r26
    504e:	19 95       	eicall
    5050:	ff 91       	pop	r31
    5052:	ef 91       	pop	r30
    5054:	df 91       	pop	r29
    5056:	cf 91       	pop	r28
    5058:	bf 91       	pop	r27
    505a:	af 91       	pop	r26
    505c:	9f 91       	pop	r25
    505e:	8f 91       	pop	r24
    5060:	7f 91       	pop	r23
    5062:	6f 91       	pop	r22
    5064:	5f 91       	pop	r21
    5066:	4f 91       	pop	r20
    5068:	3f 91       	pop	r19
    506a:	2f 91       	pop	r18
    506c:	0f 90       	pop	r0
    506e:	0b be       	out	0x3b, r0	; 59
    5070:	0f 90       	pop	r0
    5072:	0f be       	out	0x3f, r0	; 63
    5074:	0f 90       	pop	r0
    5076:	1f 90       	pop	r1
    5078:	18 95       	reti

0000507a <__vector_26>:
    507a:	1f 92       	push	r1
    507c:	0f 92       	push	r0
    507e:	0f b6       	in	r0, 0x3f	; 63
    5080:	0f 92       	push	r0
    5082:	11 24       	eor	r1, r1
    5084:	0b b6       	in	r0, 0x3b	; 59
    5086:	0f 92       	push	r0
    5088:	2f 93       	push	r18
    508a:	8f 93       	push	r24
    508c:	9f 93       	push	r25
    508e:	af 93       	push	r26
    5090:	bf 93       	push	r27
    5092:	ef 93       	push	r30
    5094:	ff 93       	push	r31
    5096:	e0 91 b1 17 	lds	r30, 0x17B1	; 0x8017b1 <_ser_handle>
    509a:	f0 91 b2 17 	lds	r31, 0x17B2	; 0x8017b2 <_ser_handle+0x1>
    509e:	30 97       	sbiw	r30, 0x00	; 0
    50a0:	b9 f0       	breq	.+46     	; 0x50d0 <__vector_26+0x56>
    50a2:	02 80       	ldd	r0, Z+2	; 0x02
    50a4:	f3 81       	ldd	r31, Z+3	; 0x03
    50a6:	e0 2d       	mov	r30, r0
    50a8:	93 81       	ldd	r25, Z+3	; 0x03
    50aa:	82 81       	ldd	r24, Z+2	; 0x02
    50ac:	98 17       	cp	r25, r24
    50ae:	b1 f0       	breq	.+44     	; 0x50dc <__vector_26+0x62>
    50b0:	92 81       	ldd	r25, Z+2	; 0x02
    50b2:	85 81       	ldd	r24, Z+5	; 0x05
    50b4:	28 2f       	mov	r18, r24
    50b6:	26 95       	lsr	r18
    50b8:	29 23       	and	r18, r25
    50ba:	a0 81       	ld	r26, Z
    50bc:	b1 81       	ldd	r27, Z+1	; 0x01
    50be:	a2 0f       	add	r26, r18
    50c0:	b1 1d       	adc	r27, r1
    50c2:	2c 91       	ld	r18, X
    50c4:	9f 5f       	subi	r25, 0xFF	; 255
    50c6:	89 23       	and	r24, r25
    50c8:	82 83       	std	Z+2, r24	; 0x02
    50ca:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    50ce:	0b c0       	rjmp	.+22     	; 0x50e6 <__vector_26+0x6c>
    50d0:	e1 ec       	ldi	r30, 0xC1	; 193
    50d2:	f0 e0       	ldi	r31, 0x00	; 0
    50d4:	80 81       	ld	r24, Z
    50d6:	8f 7d       	andi	r24, 0xDF	; 223
    50d8:	80 83       	st	Z, r24
    50da:	05 c0       	rjmp	.+10     	; 0x50e6 <__vector_26+0x6c>
    50dc:	e1 ec       	ldi	r30, 0xC1	; 193
    50de:	f0 e0       	ldi	r31, 0x00	; 0
    50e0:	80 81       	ld	r24, Z
    50e2:	8f 7d       	andi	r24, 0xDF	; 223
    50e4:	80 83       	st	Z, r24
    50e6:	ff 91       	pop	r31
    50e8:	ef 91       	pop	r30
    50ea:	bf 91       	pop	r27
    50ec:	af 91       	pop	r26
    50ee:	9f 91       	pop	r25
    50f0:	8f 91       	pop	r24
    50f2:	2f 91       	pop	r18
    50f4:	0f 90       	pop	r0
    50f6:	0b be       	out	0x3b, r0	; 59
    50f8:	0f 90       	pop	r0
    50fa:	0f be       	out	0x3f, r0	; 63
    50fc:	0f 90       	pop	r0
    50fe:	1f 90       	pop	r1
    5100:	18 95       	reti

00005102 <__vector_36>:
    5102:	1f 92       	push	r1
    5104:	0f 92       	push	r0
    5106:	0f b6       	in	r0, 0x3f	; 63
    5108:	0f 92       	push	r0
    510a:	11 24       	eor	r1, r1
    510c:	0b b6       	in	r0, 0x3b	; 59
    510e:	0f 92       	push	r0
    5110:	2f 93       	push	r18
    5112:	3f 93       	push	r19
    5114:	4f 93       	push	r20
    5116:	5f 93       	push	r21
    5118:	6f 93       	push	r22
    511a:	7f 93       	push	r23
    511c:	8f 93       	push	r24
    511e:	9f 93       	push	r25
    5120:	af 93       	push	r26
    5122:	bf 93       	push	r27
    5124:	cf 93       	push	r28
    5126:	df 93       	push	r29
    5128:	ef 93       	push	r30
    512a:	ff 93       	push	r31
    512c:	a0 91 b3 17 	lds	r26, 0x17B3	; 0x8017b3 <_ser_handle+0x2>
    5130:	b0 91 b4 17 	lds	r27, 0x17B4	; 0x8017b4 <_ser_handle+0x3>
    5134:	10 97       	sbiw	r26, 0x00	; 0
    5136:	11 f1       	breq	.+68     	; 0x517c <__vector_36+0x7a>
    5138:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    513c:	14 96       	adiw	r26, 0x04	; 4
    513e:	ed 91       	ld	r30, X+
    5140:	fc 91       	ld	r31, X
    5142:	15 97       	sbiw	r26, 0x05	; 5
    5144:	93 81       	ldd	r25, Z+3	; 0x03
    5146:	82 81       	ldd	r24, Z+2	; 0x02
    5148:	25 81       	ldd	r18, Z+5	; 0x05
    514a:	98 1b       	sub	r25, r24
    514c:	92 23       	and	r25, r18
    514e:	84 81       	ldd	r24, Z+4	; 0x04
    5150:	98 17       	cp	r25, r24
    5152:	61 f0       	breq	.+24     	; 0x516c <__vector_36+0x6a>
    5154:	83 81       	ldd	r24, Z+3	; 0x03
    5156:	26 95       	lsr	r18
    5158:	28 23       	and	r18, r24
    515a:	c0 81       	ld	r28, Z
    515c:	d1 81       	ldd	r29, Z+1	; 0x01
    515e:	c2 0f       	add	r28, r18
    5160:	d1 1d       	adc	r29, r1
    5162:	68 83       	st	Y, r22
    5164:	8f 5f       	subi	r24, 0xFF	; 255
    5166:	95 81       	ldd	r25, Z+5	; 0x05
    5168:	89 23       	and	r24, r25
    516a:	83 83       	std	Z+3, r24	; 0x03
    516c:	16 96       	adiw	r26, 0x06	; 6
    516e:	ed 91       	ld	r30, X+
    5170:	fc 91       	ld	r31, X
    5172:	17 97       	sbiw	r26, 0x07	; 7
    5174:	30 97       	sbiw	r30, 0x00	; 0
    5176:	11 f0       	breq	.+4      	; 0x517c <__vector_36+0x7a>
    5178:	cd 01       	movw	r24, r26
    517a:	19 95       	eicall
    517c:	ff 91       	pop	r31
    517e:	ef 91       	pop	r30
    5180:	df 91       	pop	r29
    5182:	cf 91       	pop	r28
    5184:	bf 91       	pop	r27
    5186:	af 91       	pop	r26
    5188:	9f 91       	pop	r25
    518a:	8f 91       	pop	r24
    518c:	7f 91       	pop	r23
    518e:	6f 91       	pop	r22
    5190:	5f 91       	pop	r21
    5192:	4f 91       	pop	r20
    5194:	3f 91       	pop	r19
    5196:	2f 91       	pop	r18
    5198:	0f 90       	pop	r0
    519a:	0b be       	out	0x3b, r0	; 59
    519c:	0f 90       	pop	r0
    519e:	0f be       	out	0x3f, r0	; 63
    51a0:	0f 90       	pop	r0
    51a2:	1f 90       	pop	r1
    51a4:	18 95       	reti

000051a6 <__vector_37>:
    51a6:	1f 92       	push	r1
    51a8:	0f 92       	push	r0
    51aa:	0f b6       	in	r0, 0x3f	; 63
    51ac:	0f 92       	push	r0
    51ae:	11 24       	eor	r1, r1
    51b0:	0b b6       	in	r0, 0x3b	; 59
    51b2:	0f 92       	push	r0
    51b4:	2f 93       	push	r18
    51b6:	8f 93       	push	r24
    51b8:	9f 93       	push	r25
    51ba:	af 93       	push	r26
    51bc:	bf 93       	push	r27
    51be:	ef 93       	push	r30
    51c0:	ff 93       	push	r31
    51c2:	e0 91 b3 17 	lds	r30, 0x17B3	; 0x8017b3 <_ser_handle+0x2>
    51c6:	f0 91 b4 17 	lds	r31, 0x17B4	; 0x8017b4 <_ser_handle+0x3>
    51ca:	30 97       	sbiw	r30, 0x00	; 0
    51cc:	b9 f0       	breq	.+46     	; 0x51fc <__vector_37+0x56>
    51ce:	02 80       	ldd	r0, Z+2	; 0x02
    51d0:	f3 81       	ldd	r31, Z+3	; 0x03
    51d2:	e0 2d       	mov	r30, r0
    51d4:	93 81       	ldd	r25, Z+3	; 0x03
    51d6:	82 81       	ldd	r24, Z+2	; 0x02
    51d8:	98 17       	cp	r25, r24
    51da:	b1 f0       	breq	.+44     	; 0x5208 <__vector_37+0x62>
    51dc:	92 81       	ldd	r25, Z+2	; 0x02
    51de:	85 81       	ldd	r24, Z+5	; 0x05
    51e0:	28 2f       	mov	r18, r24
    51e2:	26 95       	lsr	r18
    51e4:	29 23       	and	r18, r25
    51e6:	a0 81       	ld	r26, Z
    51e8:	b1 81       	ldd	r27, Z+1	; 0x01
    51ea:	a2 0f       	add	r26, r18
    51ec:	b1 1d       	adc	r27, r1
    51ee:	2c 91       	ld	r18, X
    51f0:	9f 5f       	subi	r25, 0xFF	; 255
    51f2:	89 23       	and	r24, r25
    51f4:	82 83       	std	Z+2, r24	; 0x02
    51f6:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    51fa:	0b c0       	rjmp	.+22     	; 0x5212 <__vector_37+0x6c>
    51fc:	e9 ec       	ldi	r30, 0xC9	; 201
    51fe:	f0 e0       	ldi	r31, 0x00	; 0
    5200:	80 81       	ld	r24, Z
    5202:	8f 7d       	andi	r24, 0xDF	; 223
    5204:	80 83       	st	Z, r24
    5206:	05 c0       	rjmp	.+10     	; 0x5212 <__vector_37+0x6c>
    5208:	e9 ec       	ldi	r30, 0xC9	; 201
    520a:	f0 e0       	ldi	r31, 0x00	; 0
    520c:	80 81       	ld	r24, Z
    520e:	8f 7d       	andi	r24, 0xDF	; 223
    5210:	80 83       	st	Z, r24
    5212:	ff 91       	pop	r31
    5214:	ef 91       	pop	r30
    5216:	bf 91       	pop	r27
    5218:	af 91       	pop	r26
    521a:	9f 91       	pop	r25
    521c:	8f 91       	pop	r24
    521e:	2f 91       	pop	r18
    5220:	0f 90       	pop	r0
    5222:	0b be       	out	0x3b, r0	; 59
    5224:	0f 90       	pop	r0
    5226:	0f be       	out	0x3f, r0	; 63
    5228:	0f 90       	pop	r0
    522a:	1f 90       	pop	r1
    522c:	18 95       	reti

0000522e <__vector_51>:
    522e:	1f 92       	push	r1
    5230:	0f 92       	push	r0
    5232:	0f b6       	in	r0, 0x3f	; 63
    5234:	0f 92       	push	r0
    5236:	11 24       	eor	r1, r1
    5238:	0b b6       	in	r0, 0x3b	; 59
    523a:	0f 92       	push	r0
    523c:	2f 93       	push	r18
    523e:	3f 93       	push	r19
    5240:	4f 93       	push	r20
    5242:	5f 93       	push	r21
    5244:	6f 93       	push	r22
    5246:	7f 93       	push	r23
    5248:	8f 93       	push	r24
    524a:	9f 93       	push	r25
    524c:	af 93       	push	r26
    524e:	bf 93       	push	r27
    5250:	cf 93       	push	r28
    5252:	df 93       	push	r29
    5254:	ef 93       	push	r30
    5256:	ff 93       	push	r31
    5258:	a0 91 b5 17 	lds	r26, 0x17B5	; 0x8017b5 <_ser_handle+0x4>
    525c:	b0 91 b6 17 	lds	r27, 0x17B6	; 0x8017b6 <_ser_handle+0x5>
    5260:	10 97       	sbiw	r26, 0x00	; 0
    5262:	11 f1       	breq	.+68     	; 0x52a8 <__vector_51+0x7a>
    5264:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5268:	14 96       	adiw	r26, 0x04	; 4
    526a:	ed 91       	ld	r30, X+
    526c:	fc 91       	ld	r31, X
    526e:	15 97       	sbiw	r26, 0x05	; 5
    5270:	93 81       	ldd	r25, Z+3	; 0x03
    5272:	82 81       	ldd	r24, Z+2	; 0x02
    5274:	25 81       	ldd	r18, Z+5	; 0x05
    5276:	98 1b       	sub	r25, r24
    5278:	92 23       	and	r25, r18
    527a:	84 81       	ldd	r24, Z+4	; 0x04
    527c:	98 17       	cp	r25, r24
    527e:	61 f0       	breq	.+24     	; 0x5298 <__vector_51+0x6a>
    5280:	83 81       	ldd	r24, Z+3	; 0x03
    5282:	26 95       	lsr	r18
    5284:	28 23       	and	r18, r24
    5286:	c0 81       	ld	r28, Z
    5288:	d1 81       	ldd	r29, Z+1	; 0x01
    528a:	c2 0f       	add	r28, r18
    528c:	d1 1d       	adc	r29, r1
    528e:	68 83       	st	Y, r22
    5290:	8f 5f       	subi	r24, 0xFF	; 255
    5292:	95 81       	ldd	r25, Z+5	; 0x05
    5294:	89 23       	and	r24, r25
    5296:	83 83       	std	Z+3, r24	; 0x03
    5298:	16 96       	adiw	r26, 0x06	; 6
    529a:	ed 91       	ld	r30, X+
    529c:	fc 91       	ld	r31, X
    529e:	17 97       	sbiw	r26, 0x07	; 7
    52a0:	30 97       	sbiw	r30, 0x00	; 0
    52a2:	11 f0       	breq	.+4      	; 0x52a8 <__vector_51+0x7a>
    52a4:	cd 01       	movw	r24, r26
    52a6:	19 95       	eicall
    52a8:	ff 91       	pop	r31
    52aa:	ef 91       	pop	r30
    52ac:	df 91       	pop	r29
    52ae:	cf 91       	pop	r28
    52b0:	bf 91       	pop	r27
    52b2:	af 91       	pop	r26
    52b4:	9f 91       	pop	r25
    52b6:	8f 91       	pop	r24
    52b8:	7f 91       	pop	r23
    52ba:	6f 91       	pop	r22
    52bc:	5f 91       	pop	r21
    52be:	4f 91       	pop	r20
    52c0:	3f 91       	pop	r19
    52c2:	2f 91       	pop	r18
    52c4:	0f 90       	pop	r0
    52c6:	0b be       	out	0x3b, r0	; 59
    52c8:	0f 90       	pop	r0
    52ca:	0f be       	out	0x3f, r0	; 63
    52cc:	0f 90       	pop	r0
    52ce:	1f 90       	pop	r1
    52d0:	18 95       	reti

000052d2 <__vector_52>:
    52d2:	1f 92       	push	r1
    52d4:	0f 92       	push	r0
    52d6:	0f b6       	in	r0, 0x3f	; 63
    52d8:	0f 92       	push	r0
    52da:	11 24       	eor	r1, r1
    52dc:	0b b6       	in	r0, 0x3b	; 59
    52de:	0f 92       	push	r0
    52e0:	2f 93       	push	r18
    52e2:	8f 93       	push	r24
    52e4:	9f 93       	push	r25
    52e6:	af 93       	push	r26
    52e8:	bf 93       	push	r27
    52ea:	ef 93       	push	r30
    52ec:	ff 93       	push	r31
    52ee:	e0 91 b5 17 	lds	r30, 0x17B5	; 0x8017b5 <_ser_handle+0x4>
    52f2:	f0 91 b6 17 	lds	r31, 0x17B6	; 0x8017b6 <_ser_handle+0x5>
    52f6:	30 97       	sbiw	r30, 0x00	; 0
    52f8:	b9 f0       	breq	.+46     	; 0x5328 <__vector_52+0x56>
    52fa:	02 80       	ldd	r0, Z+2	; 0x02
    52fc:	f3 81       	ldd	r31, Z+3	; 0x03
    52fe:	e0 2d       	mov	r30, r0
    5300:	93 81       	ldd	r25, Z+3	; 0x03
    5302:	82 81       	ldd	r24, Z+2	; 0x02
    5304:	98 17       	cp	r25, r24
    5306:	b1 f0       	breq	.+44     	; 0x5334 <__vector_52+0x62>
    5308:	92 81       	ldd	r25, Z+2	; 0x02
    530a:	85 81       	ldd	r24, Z+5	; 0x05
    530c:	28 2f       	mov	r18, r24
    530e:	26 95       	lsr	r18
    5310:	29 23       	and	r18, r25
    5312:	a0 81       	ld	r26, Z
    5314:	b1 81       	ldd	r27, Z+1	; 0x01
    5316:	a2 0f       	add	r26, r18
    5318:	b1 1d       	adc	r27, r1
    531a:	2c 91       	ld	r18, X
    531c:	9f 5f       	subi	r25, 0xFF	; 255
    531e:	89 23       	and	r24, r25
    5320:	82 83       	std	Z+2, r24	; 0x02
    5322:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5326:	0b c0       	rjmp	.+22     	; 0x533e <__vector_52+0x6c>
    5328:	e1 ed       	ldi	r30, 0xD1	; 209
    532a:	f0 e0       	ldi	r31, 0x00	; 0
    532c:	80 81       	ld	r24, Z
    532e:	8f 7d       	andi	r24, 0xDF	; 223
    5330:	80 83       	st	Z, r24
    5332:	05 c0       	rjmp	.+10     	; 0x533e <__vector_52+0x6c>
    5334:	e1 ed       	ldi	r30, 0xD1	; 209
    5336:	f0 e0       	ldi	r31, 0x00	; 0
    5338:	80 81       	ld	r24, Z
    533a:	8f 7d       	andi	r24, 0xDF	; 223
    533c:	80 83       	st	Z, r24
    533e:	ff 91       	pop	r31
    5340:	ef 91       	pop	r30
    5342:	bf 91       	pop	r27
    5344:	af 91       	pop	r26
    5346:	9f 91       	pop	r25
    5348:	8f 91       	pop	r24
    534a:	2f 91       	pop	r18
    534c:	0f 90       	pop	r0
    534e:	0b be       	out	0x3b, r0	; 59
    5350:	0f 90       	pop	r0
    5352:	0f be       	out	0x3f, r0	; 63
    5354:	0f 90       	pop	r0
    5356:	1f 90       	pop	r1
    5358:	18 95       	reti

0000535a <__vector_54>:
    535a:	1f 92       	push	r1
    535c:	0f 92       	push	r0
    535e:	0f b6       	in	r0, 0x3f	; 63
    5360:	0f 92       	push	r0
    5362:	11 24       	eor	r1, r1
    5364:	0b b6       	in	r0, 0x3b	; 59
    5366:	0f 92       	push	r0
    5368:	2f 93       	push	r18
    536a:	3f 93       	push	r19
    536c:	4f 93       	push	r20
    536e:	5f 93       	push	r21
    5370:	6f 93       	push	r22
    5372:	7f 93       	push	r23
    5374:	8f 93       	push	r24
    5376:	9f 93       	push	r25
    5378:	af 93       	push	r26
    537a:	bf 93       	push	r27
    537c:	cf 93       	push	r28
    537e:	df 93       	push	r29
    5380:	ef 93       	push	r30
    5382:	ff 93       	push	r31
    5384:	a0 91 b7 17 	lds	r26, 0x17B7	; 0x8017b7 <_ser_handle+0x6>
    5388:	b0 91 b8 17 	lds	r27, 0x17B8	; 0x8017b8 <_ser_handle+0x7>
    538c:	10 97       	sbiw	r26, 0x00	; 0
    538e:	11 f1       	breq	.+68     	; 0x53d4 <__vector_54+0x7a>
    5390:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5394:	14 96       	adiw	r26, 0x04	; 4
    5396:	ed 91       	ld	r30, X+
    5398:	fc 91       	ld	r31, X
    539a:	15 97       	sbiw	r26, 0x05	; 5
    539c:	93 81       	ldd	r25, Z+3	; 0x03
    539e:	82 81       	ldd	r24, Z+2	; 0x02
    53a0:	25 81       	ldd	r18, Z+5	; 0x05
    53a2:	98 1b       	sub	r25, r24
    53a4:	92 23       	and	r25, r18
    53a6:	84 81       	ldd	r24, Z+4	; 0x04
    53a8:	98 17       	cp	r25, r24
    53aa:	61 f0       	breq	.+24     	; 0x53c4 <__vector_54+0x6a>
    53ac:	83 81       	ldd	r24, Z+3	; 0x03
    53ae:	26 95       	lsr	r18
    53b0:	28 23       	and	r18, r24
    53b2:	c0 81       	ld	r28, Z
    53b4:	d1 81       	ldd	r29, Z+1	; 0x01
    53b6:	c2 0f       	add	r28, r18
    53b8:	d1 1d       	adc	r29, r1
    53ba:	68 83       	st	Y, r22
    53bc:	8f 5f       	subi	r24, 0xFF	; 255
    53be:	95 81       	ldd	r25, Z+5	; 0x05
    53c0:	89 23       	and	r24, r25
    53c2:	83 83       	std	Z+3, r24	; 0x03
    53c4:	16 96       	adiw	r26, 0x06	; 6
    53c6:	ed 91       	ld	r30, X+
    53c8:	fc 91       	ld	r31, X
    53ca:	17 97       	sbiw	r26, 0x07	; 7
    53cc:	30 97       	sbiw	r30, 0x00	; 0
    53ce:	11 f0       	breq	.+4      	; 0x53d4 <__vector_54+0x7a>
    53d0:	cd 01       	movw	r24, r26
    53d2:	19 95       	eicall
    53d4:	ff 91       	pop	r31
    53d6:	ef 91       	pop	r30
    53d8:	df 91       	pop	r29
    53da:	cf 91       	pop	r28
    53dc:	bf 91       	pop	r27
    53de:	af 91       	pop	r26
    53e0:	9f 91       	pop	r25
    53e2:	8f 91       	pop	r24
    53e4:	7f 91       	pop	r23
    53e6:	6f 91       	pop	r22
    53e8:	5f 91       	pop	r21
    53ea:	4f 91       	pop	r20
    53ec:	3f 91       	pop	r19
    53ee:	2f 91       	pop	r18
    53f0:	0f 90       	pop	r0
    53f2:	0b be       	out	0x3b, r0	; 59
    53f4:	0f 90       	pop	r0
    53f6:	0f be       	out	0x3f, r0	; 63
    53f8:	0f 90       	pop	r0
    53fa:	1f 90       	pop	r1
    53fc:	18 95       	reti

000053fe <__vector_55>:
    53fe:	1f 92       	push	r1
    5400:	0f 92       	push	r0
    5402:	0f b6       	in	r0, 0x3f	; 63
    5404:	0f 92       	push	r0
    5406:	11 24       	eor	r1, r1
    5408:	0b b6       	in	r0, 0x3b	; 59
    540a:	0f 92       	push	r0
    540c:	2f 93       	push	r18
    540e:	8f 93       	push	r24
    5410:	9f 93       	push	r25
    5412:	af 93       	push	r26
    5414:	bf 93       	push	r27
    5416:	ef 93       	push	r30
    5418:	ff 93       	push	r31
    541a:	e0 91 b7 17 	lds	r30, 0x17B7	; 0x8017b7 <_ser_handle+0x6>
    541e:	f0 91 b8 17 	lds	r31, 0x17B8	; 0x8017b8 <_ser_handle+0x7>
    5422:	30 97       	sbiw	r30, 0x00	; 0
    5424:	b9 f0       	breq	.+46     	; 0x5454 <__vector_55+0x56>
    5426:	02 80       	ldd	r0, Z+2	; 0x02
    5428:	f3 81       	ldd	r31, Z+3	; 0x03
    542a:	e0 2d       	mov	r30, r0
    542c:	93 81       	ldd	r25, Z+3	; 0x03
    542e:	82 81       	ldd	r24, Z+2	; 0x02
    5430:	98 17       	cp	r25, r24
    5432:	b1 f0       	breq	.+44     	; 0x5460 <__vector_55+0x62>
    5434:	92 81       	ldd	r25, Z+2	; 0x02
    5436:	85 81       	ldd	r24, Z+5	; 0x05
    5438:	28 2f       	mov	r18, r24
    543a:	26 95       	lsr	r18
    543c:	29 23       	and	r18, r25
    543e:	a0 81       	ld	r26, Z
    5440:	b1 81       	ldd	r27, Z+1	; 0x01
    5442:	a2 0f       	add	r26, r18
    5444:	b1 1d       	adc	r27, r1
    5446:	2c 91       	ld	r18, X
    5448:	9f 5f       	subi	r25, 0xFF	; 255
    544a:	89 23       	and	r24, r25
    544c:	82 83       	std	Z+2, r24	; 0x02
    544e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5452:	0b c0       	rjmp	.+22     	; 0x546a <__vector_55+0x6c>
    5454:	e1 e3       	ldi	r30, 0x31	; 49
    5456:	f1 e0       	ldi	r31, 0x01	; 1
    5458:	80 81       	ld	r24, Z
    545a:	8f 7d       	andi	r24, 0xDF	; 223
    545c:	80 83       	st	Z, r24
    545e:	05 c0       	rjmp	.+10     	; 0x546a <__vector_55+0x6c>
    5460:	e1 e3       	ldi	r30, 0x31	; 49
    5462:	f1 e0       	ldi	r31, 0x01	; 1
    5464:	80 81       	ld	r24, Z
    5466:	8f 7d       	andi	r24, 0xDF	; 223
    5468:	80 83       	st	Z, r24
    546a:	ff 91       	pop	r31
    546c:	ef 91       	pop	r30
    546e:	bf 91       	pop	r27
    5470:	af 91       	pop	r26
    5472:	9f 91       	pop	r25
    5474:	8f 91       	pop	r24
    5476:	2f 91       	pop	r18
    5478:	0f 90       	pop	r0
    547a:	0b be       	out	0x3b, r0	; 59
    547c:	0f 90       	pop	r0
    547e:	0f be       	out	0x3f, r0	; 63
    5480:	0f 90       	pop	r0
    5482:	1f 90       	pop	r1
    5484:	18 95       	reti

00005486 <usart_getchar>:
    5486:	cf 93       	push	r28
    5488:	df 93       	push	r29
    548a:	1f 92       	push	r1
    548c:	cd b7       	in	r28, 0x3d	; 61
    548e:	de b7       	in	r29, 0x3e	; 62
    5490:	be 01       	movw	r22, r28
    5492:	6f 5f       	subi	r22, 0xFF	; 255
    5494:	7f 4f       	sbci	r23, 0xFF	; 255
    5496:	80 91 b9 17 	lds	r24, 0x17B9	; 0x8017b9 <_com_serial_instance>
    549a:	90 91 ba 17 	lds	r25, 0x17BA	; 0x8017ba <_com_serial_instance+0x1>
    549e:	7b dd       	rcall	.-1290   	; 0x4f96 <serial_getByte>
    54a0:	81 11       	cpse	r24, r1
    54a2:	f6 cf       	rjmp	.-20     	; 0x5490 <usart_getchar+0xa>
    54a4:	89 81       	ldd	r24, Y+1	; 0x01
    54a6:	90 e0       	ldi	r25, 0x00	; 0
    54a8:	0f 90       	pop	r0
    54aa:	df 91       	pop	r29
    54ac:	cf 91       	pop	r28
    54ae:	08 95       	ret

000054b0 <usart_putchar>:
    54b0:	68 2f       	mov	r22, r24
    54b2:	80 91 b9 17 	lds	r24, 0x17B9	; 0x8017b9 <_com_serial_instance>
    54b6:	90 91 ba 17 	lds	r25, 0x17BA	; 0x8017ba <_com_serial_instance+0x1>
    54ba:	ed dc       	rcall	.-1574   	; 0x4e96 <serial_sendByte>
    54bc:	80 e0       	ldi	r24, 0x00	; 0
    54be:	90 e0       	ldi	r25, 0x00	; 0
    54c0:	08 95       	ret

000054c2 <stdio_initialise>:
    54c2:	8f 92       	push	r8
    54c4:	9f 92       	push	r9
    54c6:	af 92       	push	r10
    54c8:	cf 92       	push	r12
    54ca:	ef 92       	push	r14
    54cc:	0f 93       	push	r16
    54ce:	81 2c       	mov	r8, r1
    54d0:	91 2c       	mov	r9, r1
    54d2:	68 94       	set
    54d4:	aa 24       	eor	r10, r10
    54d6:	a7 f8       	bld	r10, 7
    54d8:	68 94       	set
    54da:	cc 24       	eor	r12, r12
    54dc:	c7 f8       	bld	r12, 7
    54de:	e1 2c       	mov	r14, r1
    54e0:	00 e0       	ldi	r16, 0x00	; 0
    54e2:	23 e0       	ldi	r18, 0x03	; 3
    54e4:	40 e0       	ldi	r20, 0x00	; 0
    54e6:	51 ee       	ldi	r21, 0xE1	; 225
    54e8:	60 e0       	ldi	r22, 0x00	; 0
    54ea:	70 e0       	ldi	r23, 0x00	; 0
    54ec:	32 dc       	rcall	.-1948   	; 0x4d52 <serial_create>
    54ee:	90 93 ba 17 	sts	0x17BA, r25	; 0x8017ba <_com_serial_instance+0x1>
    54f2:	80 93 b9 17 	sts	0x17B9, r24	; 0x8017b9 <_com_serial_instance>
    54f6:	e6 ef       	ldi	r30, 0xF6	; 246
    54f8:	f7 e1       	ldi	r31, 0x17	; 23
    54fa:	83 e1       	ldi	r24, 0x13	; 19
    54fc:	92 e0       	ldi	r25, 0x02	; 2
    54fe:	91 83       	std	Z+1, r25	; 0x01
    5500:	80 83       	st	Z, r24
    5502:	93 83       	std	Z+3, r25	; 0x03
    5504:	82 83       	std	Z+2, r24	; 0x02
    5506:	0f 91       	pop	r16
    5508:	ef 90       	pop	r14
    550a:	cf 90       	pop	r12
    550c:	af 90       	pop	r10
    550e:	9f 90       	pop	r9
    5510:	8f 90       	pop	r8
    5512:	08 95       	ret

00005514 <_turn_off>:
    5514:	90 e0       	ldi	r25, 0x00	; 0
    5516:	fc 01       	movw	r30, r24
    5518:	ee 0f       	add	r30, r30
    551a:	ff 1f       	adc	r31, r31
    551c:	e8 0f       	add	r30, r24
    551e:	f9 1f       	adc	r31, r25
    5520:	ee 0f       	add	r30, r30
    5522:	ff 1f       	adc	r31, r31
    5524:	e5 54       	subi	r30, 0x45	; 69
    5526:	f8 4e       	sbci	r31, 0xE8	; 232
    5528:	23 81       	ldd	r18, Z+3	; 0x03
    552a:	21 11       	cpse	r18, r1
    552c:	1f c0       	rjmp	.+62     	; 0x556c <_turn_off+0x58>
    552e:	9c 01       	movw	r18, r24
    5530:	22 0f       	add	r18, r18
    5532:	33 1f       	adc	r19, r19
    5534:	f9 01       	movw	r30, r18
    5536:	e8 0f       	add	r30, r24
    5538:	f9 1f       	adc	r31, r25
    553a:	ee 0f       	add	r30, r30
    553c:	ff 1f       	adc	r31, r31
    553e:	e5 54       	subi	r30, 0x45	; 69
    5540:	f8 4e       	sbci	r31, 0xE8	; 232
    5542:	a0 81       	ld	r26, Z
    5544:	b1 81       	ldd	r27, Z+1	; 0x01
    5546:	4c 91       	ld	r20, X
    5548:	f9 01       	movw	r30, r18
    554a:	e8 0f       	add	r30, r24
    554c:	f9 1f       	adc	r31, r25
    554e:	ee 0f       	add	r30, r30
    5550:	ff 1f       	adc	r31, r31
    5552:	e5 54       	subi	r30, 0x45	; 69
    5554:	f8 4e       	sbci	r31, 0xE8	; 232
    5556:	81 e0       	ldi	r24, 0x01	; 1
    5558:	90 e0       	ldi	r25, 0x00	; 0
    555a:	02 80       	ldd	r0, Z+2	; 0x02
    555c:	02 c0       	rjmp	.+4      	; 0x5562 <_turn_off+0x4e>
    555e:	88 0f       	add	r24, r24
    5560:	99 1f       	adc	r25, r25
    5562:	0a 94       	dec	r0
    5564:	e2 f7       	brpl	.-8      	; 0x555e <_turn_off+0x4a>
    5566:	84 2b       	or	r24, r20
    5568:	8c 93       	st	X, r24
    556a:	08 95       	ret
    556c:	fc 01       	movw	r30, r24
    556e:	ee 0f       	add	r30, r30
    5570:	ff 1f       	adc	r31, r31
    5572:	df 01       	movw	r26, r30
    5574:	a8 0f       	add	r26, r24
    5576:	b9 1f       	adc	r27, r25
    5578:	aa 0f       	add	r26, r26
    557a:	bb 1f       	adc	r27, r27
    557c:	a5 54       	subi	r26, 0x45	; 69
    557e:	b8 4e       	sbci	r27, 0xE8	; 232
    5580:	0d 90       	ld	r0, X+
    5582:	bc 91       	ld	r27, X
    5584:	a0 2d       	mov	r26, r0
    5586:	2c 91       	ld	r18, X
    5588:	e8 0f       	add	r30, r24
    558a:	f9 1f       	adc	r31, r25
    558c:	ee 0f       	add	r30, r30
    558e:	ff 1f       	adc	r31, r31
    5590:	e5 54       	subi	r30, 0x45	; 69
    5592:	f8 4e       	sbci	r31, 0xE8	; 232
    5594:	81 e0       	ldi	r24, 0x01	; 1
    5596:	90 e0       	ldi	r25, 0x00	; 0
    5598:	02 80       	ldd	r0, Z+2	; 0x02
    559a:	02 c0       	rjmp	.+4      	; 0x55a0 <_turn_off+0x8c>
    559c:	88 0f       	add	r24, r24
    559e:	99 1f       	adc	r25, r25
    55a0:	0a 94       	dec	r0
    55a2:	e2 f7       	brpl	.-8      	; 0x559c <_turn_off+0x88>
    55a4:	80 95       	com	r24
    55a6:	82 23       	and	r24, r18
    55a8:	8c 93       	st	X, r24
    55aa:	08 95       	ret

000055ac <_turn_on>:
    55ac:	90 e0       	ldi	r25, 0x00	; 0
    55ae:	fc 01       	movw	r30, r24
    55b0:	ee 0f       	add	r30, r30
    55b2:	ff 1f       	adc	r31, r31
    55b4:	e8 0f       	add	r30, r24
    55b6:	f9 1f       	adc	r31, r25
    55b8:	ee 0f       	add	r30, r30
    55ba:	ff 1f       	adc	r31, r31
    55bc:	e5 54       	subi	r30, 0x45	; 69
    55be:	f8 4e       	sbci	r31, 0xE8	; 232
    55c0:	23 81       	ldd	r18, Z+3	; 0x03
    55c2:	21 11       	cpse	r18, r1
    55c4:	20 c0       	rjmp	.+64     	; 0x5606 <_turn_on+0x5a>
    55c6:	9c 01       	movw	r18, r24
    55c8:	22 0f       	add	r18, r18
    55ca:	33 1f       	adc	r19, r19
    55cc:	f9 01       	movw	r30, r18
    55ce:	e8 0f       	add	r30, r24
    55d0:	f9 1f       	adc	r31, r25
    55d2:	ee 0f       	add	r30, r30
    55d4:	ff 1f       	adc	r31, r31
    55d6:	e5 54       	subi	r30, 0x45	; 69
    55d8:	f8 4e       	sbci	r31, 0xE8	; 232
    55da:	a0 81       	ld	r26, Z
    55dc:	b1 81       	ldd	r27, Z+1	; 0x01
    55de:	4c 91       	ld	r20, X
    55e0:	f9 01       	movw	r30, r18
    55e2:	e8 0f       	add	r30, r24
    55e4:	f9 1f       	adc	r31, r25
    55e6:	ee 0f       	add	r30, r30
    55e8:	ff 1f       	adc	r31, r31
    55ea:	e5 54       	subi	r30, 0x45	; 69
    55ec:	f8 4e       	sbci	r31, 0xE8	; 232
    55ee:	81 e0       	ldi	r24, 0x01	; 1
    55f0:	90 e0       	ldi	r25, 0x00	; 0
    55f2:	02 80       	ldd	r0, Z+2	; 0x02
    55f4:	02 c0       	rjmp	.+4      	; 0x55fa <_turn_on+0x4e>
    55f6:	88 0f       	add	r24, r24
    55f8:	99 1f       	adc	r25, r25
    55fa:	0a 94       	dec	r0
    55fc:	e2 f7       	brpl	.-8      	; 0x55f6 <_turn_on+0x4a>
    55fe:	80 95       	com	r24
    5600:	84 23       	and	r24, r20
    5602:	8c 93       	st	X, r24
    5604:	08 95       	ret
    5606:	fc 01       	movw	r30, r24
    5608:	ee 0f       	add	r30, r30
    560a:	ff 1f       	adc	r31, r31
    560c:	df 01       	movw	r26, r30
    560e:	a8 0f       	add	r26, r24
    5610:	b9 1f       	adc	r27, r25
    5612:	aa 0f       	add	r26, r26
    5614:	bb 1f       	adc	r27, r27
    5616:	a5 54       	subi	r26, 0x45	; 69
    5618:	b8 4e       	sbci	r27, 0xE8	; 232
    561a:	0d 90       	ld	r0, X+
    561c:	bc 91       	ld	r27, X
    561e:	a0 2d       	mov	r26, r0
    5620:	2c 91       	ld	r18, X
    5622:	e8 0f       	add	r30, r24
    5624:	f9 1f       	adc	r31, r25
    5626:	ee 0f       	add	r30, r30
    5628:	ff 1f       	adc	r31, r31
    562a:	e5 54       	subi	r30, 0x45	; 69
    562c:	f8 4e       	sbci	r31, 0xE8	; 232
    562e:	81 e0       	ldi	r24, 0x01	; 1
    5630:	90 e0       	ldi	r25, 0x00	; 0
    5632:	02 80       	ldd	r0, Z+2	; 0x02
    5634:	02 c0       	rjmp	.+4      	; 0x563a <_turn_on+0x8e>
    5636:	88 0f       	add	r24, r24
    5638:	99 1f       	adc	r25, r25
    563a:	0a 94       	dec	r0
    563c:	e2 f7       	brpl	.-8      	; 0x5636 <_turn_on+0x8a>
    563e:	82 2b       	or	r24, r18
    5640:	8c 93       	st	X, r24
    5642:	08 95       	ret

00005644 <_hal_led_task>:
    5644:	cc 24       	eor	r12, r12
    5646:	c3 94       	inc	r12
    5648:	d1 2c       	mov	r13, r1
    564a:	68 94       	set
    564c:	bb 24       	eor	r11, r11
    564e:	b2 f8       	bld	r11, 2
    5650:	cb eb       	ldi	r28, 0xBB	; 187
    5652:	d7 e1       	ldi	r29, 0x17	; 23
    5654:	10 e0       	ldi	r17, 0x00	; 0
    5656:	8c 81       	ldd	r24, Y+4	; 0x04
    5658:	81 30       	cpi	r24, 0x01	; 1
    565a:	81 f0       	breq	.+32     	; 0x567c <_hal_led_task+0x38>
    565c:	18 f1       	brcs	.+70     	; 0x56a4 <_hal_led_task+0x60>
    565e:	82 30       	cpi	r24, 0x02	; 2
    5660:	61 f5       	brne	.+88     	; 0x56ba <_hal_led_task+0x76>
    5662:	e8 81       	ld	r30, Y
    5664:	f9 81       	ldd	r31, Y+1	; 0x01
    5666:	20 81       	ld	r18, Z
    5668:	c6 01       	movw	r24, r12
    566a:	0a 80       	ldd	r0, Y+2	; 0x02
    566c:	02 c0       	rjmp	.+4      	; 0x5672 <_hal_led_task+0x2e>
    566e:	88 0f       	add	r24, r24
    5670:	99 1f       	adc	r25, r25
    5672:	0a 94       	dec	r0
    5674:	e2 f7       	brpl	.-8      	; 0x566e <_hal_led_task+0x2a>
    5676:	82 27       	eor	r24, r18
    5678:	80 83       	st	Z, r24
    567a:	1f c0       	rjmp	.+62     	; 0x56ba <_hal_led_task+0x76>
    567c:	8d 81       	ldd	r24, Y+5	; 0x05
    567e:	8f 5f       	subi	r24, 0xFF	; 255
    5680:	8a 30       	cpi	r24, 0x0A	; 10
    5682:	10 f4       	brcc	.+4      	; 0x5688 <_hal_led_task+0x44>
    5684:	8d 83       	std	Y+5, r24	; 0x05
    5686:	19 c0       	rjmp	.+50     	; 0x56ba <_hal_led_task+0x76>
    5688:	1d 82       	std	Y+5, r1	; 0x05
    568a:	e8 81       	ld	r30, Y
    568c:	f9 81       	ldd	r31, Y+1	; 0x01
    568e:	20 81       	ld	r18, Z
    5690:	c6 01       	movw	r24, r12
    5692:	0a 80       	ldd	r0, Y+2	; 0x02
    5694:	02 c0       	rjmp	.+4      	; 0x569a <_hal_led_task+0x56>
    5696:	88 0f       	add	r24, r24
    5698:	99 1f       	adc	r25, r25
    569a:	0a 94       	dec	r0
    569c:	e2 f7       	brpl	.-8      	; 0x5696 <_hal_led_task+0x52>
    569e:	82 27       	eor	r24, r18
    56a0:	80 83       	st	Z, r24
    56a2:	0b c0       	rjmp	.+22     	; 0x56ba <_hal_led_task+0x76>
    56a4:	0d 81       	ldd	r16, Y+5	; 0x05
    56a6:	00 23       	and	r16, r16
    56a8:	29 f0       	breq	.+10     	; 0x56b4 <_hal_led_task+0x70>
    56aa:	81 2f       	mov	r24, r17
    56ac:	7f df       	rcall	.-258    	; 0x55ac <_turn_on>
    56ae:	01 50       	subi	r16, 0x01	; 1
    56b0:	0d 83       	std	Y+5, r16	; 0x05
    56b2:	03 c0       	rjmp	.+6      	; 0x56ba <_hal_led_task+0x76>
    56b4:	bc 82       	std	Y+4, r11	; 0x04
    56b6:	81 2f       	mov	r24, r17
    56b8:	2d df       	rcall	.-422    	; 0x5514 <_turn_off>
    56ba:	1f 5f       	subi	r17, 0xFF	; 255
    56bc:	26 96       	adiw	r28, 0x06	; 6
    56be:	14 30       	cpi	r17, 0x04	; 4
    56c0:	51 f6       	brne	.-108    	; 0x5656 <_hal_led_task+0x12>
    56c2:	65 e0       	ldi	r22, 0x05	; 5
    56c4:	70 e0       	ldi	r23, 0x00	; 0
    56c6:	80 e0       	ldi	r24, 0x00	; 0
    56c8:	90 e0       	ldi	r25, 0x00	; 0
    56ca:	0e 94 92 13 	call	0x2724	; 0x2724 <vTaskDelay>
    56ce:	c0 cf       	rjmp	.-128    	; 0x5650 <_hal_led_task+0xc>

000056d0 <status_leds_initialise>:
    56d0:	ef 92       	push	r14
    56d2:	ff 92       	push	r15
    56d4:	0f 93       	push	r16
    56d6:	1f 93       	push	r17
    56d8:	cf 93       	push	r28
    56da:	df 93       	push	r29
    56dc:	08 2f       	mov	r16, r24
    56de:	80 e4       	ldi	r24, 0x40	; 64
    56e0:	87 b9       	out	0x07, r24	; 7
    56e2:	cb eb       	ldi	r28, 0xBB	; 187
    56e4:	d7 e1       	ldi	r29, 0x17	; 23
    56e6:	0f 2e       	mov	r0, r31
    56e8:	f8 e2       	ldi	r31, 0x28	; 40
    56ea:	ef 2e       	mov	r14, r31
    56ec:	f1 2c       	mov	r15, r1
    56ee:	f0 2d       	mov	r31, r0
    56f0:	f9 82       	std	Y+1, r15	; 0x01
    56f2:	e8 82       	st	Y, r14
    56f4:	86 e0       	ldi	r24, 0x06	; 6
    56f6:	8a 83       	std	Y+2, r24	; 0x02
    56f8:	1b 82       	std	Y+3, r1	; 0x03
    56fa:	14 e0       	ldi	r17, 0x04	; 4
    56fc:	1c 83       	std	Y+4, r17	; 0x04
    56fe:	80 e0       	ldi	r24, 0x00	; 0
    5700:	09 df       	rcall	.-494    	; 0x5514 <_turn_off>
    5702:	80 e8       	ldi	r24, 0x80	; 128
    5704:	87 b9       	out	0x07, r24	; 7
    5706:	ff 82       	std	Y+7, r15	; 0x07
    5708:	ee 82       	std	Y+6, r14	; 0x06
    570a:	87 e0       	ldi	r24, 0x07	; 7
    570c:	88 87       	std	Y+8, r24	; 0x08
    570e:	19 86       	std	Y+9, r1	; 0x09
    5710:	1a 87       	std	Y+10, r17	; 0x0a
    5712:	81 e0       	ldi	r24, 0x01	; 1
    5714:	ff de       	rcall	.-514    	; 0x5514 <_turn_off>
    5716:	80 e2       	ldi	r24, 0x20	; 32
    5718:	83 bb       	out	0x13, r24	; 19
    571a:	84 e3       	ldi	r24, 0x34	; 52
    571c:	90 e0       	ldi	r25, 0x00	; 0
    571e:	9d 87       	std	Y+13, r25	; 0x0d
    5720:	8c 87       	std	Y+12, r24	; 0x0c
    5722:	85 e0       	ldi	r24, 0x05	; 5
    5724:	8e 87       	std	Y+14, r24	; 0x0e
    5726:	1f 86       	std	Y+15, r1	; 0x0f
    5728:	18 8b       	std	Y+16, r17	; 0x10
    572a:	82 e0       	ldi	r24, 0x02	; 2
    572c:	f3 de       	rcall	.-538    	; 0x5514 <_turn_off>
    572e:	80 e1       	ldi	r24, 0x10	; 16
    5730:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    5734:	82 e0       	ldi	r24, 0x02	; 2
    5736:	91 e0       	ldi	r25, 0x01	; 1
    5738:	9b 8b       	std	Y+19, r25	; 0x13
    573a:	8a 8b       	std	Y+18, r24	; 0x12
    573c:	1c 8b       	std	Y+20, r17	; 0x14
    573e:	1d 8a       	std	Y+21, r1	; 0x15
    5740:	1e 8b       	std	Y+22, r17	; 0x16
    5742:	83 e0       	ldi	r24, 0x03	; 3
    5744:	e7 de       	rcall	.-562    	; 0x5514 <_turn_off>
    5746:	e1 2c       	mov	r14, r1
    5748:	f1 2c       	mov	r15, r1
    574a:	20 e0       	ldi	r18, 0x00	; 0
    574c:	30 e0       	ldi	r19, 0x00	; 0
    574e:	40 ec       	ldi	r20, 0xC0	; 192
    5750:	50 e0       	ldi	r21, 0x00	; 0
    5752:	66 e8       	ldi	r22, 0x86	; 134
    5754:	78 e0       	ldi	r23, 0x08	; 8
    5756:	82 e2       	ldi	r24, 0x22	; 34
    5758:	9b e2       	ldi	r25, 0x2B	; 43
    575a:	0e 94 8d 10 	call	0x211a	; 0x211a <xTaskCreate>
    575e:	df 91       	pop	r29
    5760:	cf 91       	pop	r28
    5762:	1f 91       	pop	r17
    5764:	0f 91       	pop	r16
    5766:	ff 90       	pop	r15
    5768:	ef 90       	pop	r14
    576a:	08 95       	ret

0000576c <status_leds_slowBlink>:
    576c:	cf 93       	push	r28
    576e:	df 93       	push	r29
    5770:	90 e0       	ldi	r25, 0x00	; 0
    5772:	fc 01       	movw	r30, r24
    5774:	ee 0f       	add	r30, r30
    5776:	ff 1f       	adc	r31, r31
    5778:	df 01       	movw	r26, r30
    577a:	a8 0f       	add	r26, r24
    577c:	b9 1f       	adc	r27, r25
    577e:	aa 0f       	add	r26, r26
    5780:	bb 1f       	adc	r27, r27
    5782:	a5 54       	subi	r26, 0x45	; 69
    5784:	b8 4e       	sbci	r27, 0xE8	; 232
    5786:	cd 91       	ld	r28, X+
    5788:	dc 91       	ld	r29, X
    578a:	11 97       	sbiw	r26, 0x01	; 1
    578c:	48 81       	ld	r20, Y
    578e:	21 e0       	ldi	r18, 0x01	; 1
    5790:	30 e0       	ldi	r19, 0x00	; 0
    5792:	12 96       	adiw	r26, 0x02	; 2
    5794:	0c 90       	ld	r0, X
    5796:	12 97       	sbiw	r26, 0x02	; 2
    5798:	02 c0       	rjmp	.+4      	; 0x579e <status_leds_slowBlink+0x32>
    579a:	22 0f       	add	r18, r18
    579c:	33 1f       	adc	r19, r19
    579e:	0a 94       	dec	r0
    57a0:	e2 f7       	brpl	.-8      	; 0x579a <status_leds_slowBlink+0x2e>
    57a2:	24 27       	eor	r18, r20
    57a4:	28 83       	st	Y, r18
    57a6:	fd 01       	movw	r30, r26
    57a8:	81 e0       	ldi	r24, 0x01	; 1
    57aa:	84 83       	std	Z+4, r24	; 0x04
    57ac:	df 91       	pop	r29
    57ae:	cf 91       	pop	r28
    57b0:	08 95       	ret

000057b2 <status_leds_fastBlink>:
    57b2:	cf 93       	push	r28
    57b4:	df 93       	push	r29
    57b6:	90 e0       	ldi	r25, 0x00	; 0
    57b8:	fc 01       	movw	r30, r24
    57ba:	ee 0f       	add	r30, r30
    57bc:	ff 1f       	adc	r31, r31
    57be:	df 01       	movw	r26, r30
    57c0:	a8 0f       	add	r26, r24
    57c2:	b9 1f       	adc	r27, r25
    57c4:	aa 0f       	add	r26, r26
    57c6:	bb 1f       	adc	r27, r27
    57c8:	a5 54       	subi	r26, 0x45	; 69
    57ca:	b8 4e       	sbci	r27, 0xE8	; 232
    57cc:	cd 91       	ld	r28, X+
    57ce:	dc 91       	ld	r29, X
    57d0:	11 97       	sbiw	r26, 0x01	; 1
    57d2:	48 81       	ld	r20, Y
    57d4:	21 e0       	ldi	r18, 0x01	; 1
    57d6:	30 e0       	ldi	r19, 0x00	; 0
    57d8:	12 96       	adiw	r26, 0x02	; 2
    57da:	0c 90       	ld	r0, X
    57dc:	12 97       	sbiw	r26, 0x02	; 2
    57de:	02 c0       	rjmp	.+4      	; 0x57e4 <status_leds_fastBlink+0x32>
    57e0:	22 0f       	add	r18, r18
    57e2:	33 1f       	adc	r19, r19
    57e4:	0a 94       	dec	r0
    57e6:	e2 f7       	brpl	.-8      	; 0x57e0 <status_leds_fastBlink+0x2e>
    57e8:	24 27       	eor	r18, r20
    57ea:	28 83       	st	Y, r18
    57ec:	fd 01       	movw	r30, r26
    57ee:	82 e0       	ldi	r24, 0x02	; 2
    57f0:	84 83       	std	Z+4, r24	; 0x04
    57f2:	df 91       	pop	r29
    57f4:	cf 91       	pop	r28
    57f6:	08 95       	ret

000057f8 <status_leds_ledOn>:
    57f8:	28 2f       	mov	r18, r24
    57fa:	30 e0       	ldi	r19, 0x00	; 0
    57fc:	f9 01       	movw	r30, r18
    57fe:	ee 0f       	add	r30, r30
    5800:	ff 1f       	adc	r31, r31
    5802:	e2 0f       	add	r30, r18
    5804:	f3 1f       	adc	r31, r19
    5806:	ee 0f       	add	r30, r30
    5808:	ff 1f       	adc	r31, r31
    580a:	e5 54       	subi	r30, 0x45	; 69
    580c:	f8 4e       	sbci	r31, 0xE8	; 232
    580e:	93 e0       	ldi	r25, 0x03	; 3
    5810:	94 83       	std	Z+4, r25	; 0x04
    5812:	cc ce       	rjmp	.-616    	; 0x55ac <_turn_on>
    5814:	08 95       	ret

00005816 <status_leds_ledOff>:
    5816:	28 2f       	mov	r18, r24
    5818:	30 e0       	ldi	r19, 0x00	; 0
    581a:	f9 01       	movw	r30, r18
    581c:	ee 0f       	add	r30, r30
    581e:	ff 1f       	adc	r31, r31
    5820:	e2 0f       	add	r30, r18
    5822:	f3 1f       	adc	r31, r19
    5824:	ee 0f       	add	r30, r30
    5826:	ff 1f       	adc	r31, r31
    5828:	e5 54       	subi	r30, 0x45	; 69
    582a:	f8 4e       	sbci	r31, 0xE8	; 232
    582c:	94 e0       	ldi	r25, 0x04	; 4
    582e:	94 83       	std	Z+4, r25	; 0x04
    5830:	71 ce       	rjmp	.-798    	; 0x5514 <_turn_off>
    5832:	08 95       	ret

00005834 <status_leds_longPuls>:
    5834:	90 e0       	ldi	r25, 0x00	; 0
    5836:	fc 01       	movw	r30, r24
    5838:	ee 0f       	add	r30, r30
    583a:	ff 1f       	adc	r31, r31
    583c:	df 01       	movw	r26, r30
    583e:	a8 0f       	add	r26, r24
    5840:	b9 1f       	adc	r27, r25
    5842:	aa 0f       	add	r26, r26
    5844:	bb 1f       	adc	r27, r27
    5846:	a5 54       	subi	r26, 0x45	; 69
    5848:	b8 4e       	sbci	r27, 0xE8	; 232
    584a:	24 e0       	ldi	r18, 0x04	; 4
    584c:	15 96       	adiw	r26, 0x05	; 5
    584e:	2c 93       	st	X, r18
    5850:	15 97       	sbiw	r26, 0x05	; 5
    5852:	fd 01       	movw	r30, r26
    5854:	14 82       	std	Z+4, r1	; 0x04
    5856:	08 95       	ret

00005858 <status_leds_shortPuls>:
    5858:	90 e0       	ldi	r25, 0x00	; 0
    585a:	fc 01       	movw	r30, r24
    585c:	ee 0f       	add	r30, r30
    585e:	ff 1f       	adc	r31, r31
    5860:	df 01       	movw	r26, r30
    5862:	a8 0f       	add	r26, r24
    5864:	b9 1f       	adc	r27, r25
    5866:	aa 0f       	add	r26, r26
    5868:	bb 1f       	adc	r27, r27
    586a:	a5 54       	subi	r26, 0x45	; 69
    586c:	b8 4e       	sbci	r27, 0xE8	; 232
    586e:	21 e0       	ldi	r18, 0x01	; 1
    5870:	15 96       	adiw	r26, 0x05	; 5
    5872:	2c 93       	st	X, r18
    5874:	15 97       	sbiw	r26, 0x05	; 5
    5876:	fd 01       	movw	r30, r26
    5878:	14 82       	std	Z+4, r1	; 0x04
    587a:	08 95       	ret

0000587c <_initTwiInterface>:
    587c:	80 91 e1 17 	lds	r24, 0x17E1	; 0x8017e1 <_twiIsInitiated>
    5880:	81 11       	cpse	r24, r1
    5882:	0c c0       	rjmp	.+24     	; 0x589c <_initTwiInterface+0x20>
    5884:	8c e0       	ldi	r24, 0x0C	; 12
    5886:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    588a:	8f ef       	ldi	r24, 0xFF	; 255
    588c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5890:	84 e0       	ldi	r24, 0x04	; 4
    5892:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5896:	81 e0       	ldi	r24, 0x01	; 1
    5898:	80 93 e1 17 	sts	0x17E1, r24	; 0x8017e1 <_twiIsInitiated>
    589c:	08 95       	ret

0000589e <twiCreate>:
    589e:	af 92       	push	r10
    58a0:	bf 92       	push	r11
    58a2:	cf 92       	push	r12
    58a4:	df 92       	push	r13
    58a6:	ef 92       	push	r14
    58a8:	ff 92       	push	r15
    58aa:	0f 93       	push	r16
    58ac:	1f 93       	push	r17
    58ae:	cf 93       	push	r28
    58b0:	df 93       	push	r29
    58b2:	a8 2e       	mov	r10, r24
    58b4:	b6 2e       	mov	r11, r22
    58b6:	69 01       	movw	r12, r18
    58b8:	7a 01       	movw	r14, r20
    58ba:	84 e0       	ldi	r24, 0x04	; 4
    58bc:	90 e0       	ldi	r25, 0x00	; 0
    58be:	70 d7       	rcall	.+3808   	; 0x67a0 <malloc>
    58c0:	ec 01       	movw	r28, r24
    58c2:	89 2b       	or	r24, r25
    58c4:	61 f1       	breq	.+88     	; 0x591e <twiCreate+0x80>
    58c6:	a8 82       	st	Y, r10
    58c8:	81 e0       	ldi	r24, 0x01	; 1
    58ca:	b8 12       	cpse	r11, r24
    58cc:	12 c0       	rjmp	.+36     	; 0x58f2 <twiCreate+0x54>
    58ce:	c7 01       	movw	r24, r14
    58d0:	b6 01       	movw	r22, r12
    58d2:	20 ea       	ldi	r18, 0xA0	; 160
    58d4:	36 e8       	ldi	r19, 0x86	; 134
    58d6:	41 e0       	ldi	r20, 0x01	; 1
    58d8:	50 e0       	ldi	r21, 0x00	; 0
    58da:	15 d7       	rcall	.+3626   	; 0x6706 <__udivmodsi4>
    58dc:	da 01       	movw	r26, r20
    58de:	c9 01       	movw	r24, r18
    58e0:	40 97       	sbiw	r24, 0x10	; 16
    58e2:	a1 09       	sbc	r26, r1
    58e4:	b1 09       	sbc	r27, r1
    58e6:	b6 95       	lsr	r27
    58e8:	a7 95       	ror	r26
    58ea:	97 95       	ror	r25
    58ec:	87 95       	ror	r24
    58ee:	89 83       	std	Y+1, r24	; 0x01
    58f0:	11 c0       	rjmp	.+34     	; 0x5914 <twiCreate+0x76>
    58f2:	c7 01       	movw	r24, r14
    58f4:	b6 01       	movw	r22, r12
    58f6:	20 e8       	ldi	r18, 0x80	; 128
    58f8:	3a e1       	ldi	r19, 0x1A	; 26
    58fa:	46 e0       	ldi	r20, 0x06	; 6
    58fc:	50 e0       	ldi	r21, 0x00	; 0
    58fe:	03 d7       	rcall	.+3590   	; 0x6706 <__udivmodsi4>
    5900:	da 01       	movw	r26, r20
    5902:	c9 01       	movw	r24, r18
    5904:	40 97       	sbiw	r24, 0x10	; 16
    5906:	a1 09       	sbc	r26, r1
    5908:	b1 09       	sbc	r27, r1
    590a:	b6 95       	lsr	r27
    590c:	a7 95       	ror	r26
    590e:	97 95       	ror	r25
    5910:	87 95       	ror	r24
    5912:	89 83       	std	Y+1, r24	; 0x01
    5914:	1b 83       	std	Y+3, r17	; 0x03
    5916:	0a 83       	std	Y+2, r16	; 0x02
    5918:	8c 2f       	mov	r24, r28
    591a:	9d 2f       	mov	r25, r29
    591c:	02 c0       	rjmp	.+4      	; 0x5922 <twiCreate+0x84>
    591e:	80 e0       	ldi	r24, 0x00	; 0
    5920:	90 e0       	ldi	r25, 0x00	; 0
    5922:	df 91       	pop	r29
    5924:	cf 91       	pop	r28
    5926:	1f 91       	pop	r17
    5928:	0f 91       	pop	r16
    592a:	ff 90       	pop	r15
    592c:	ef 90       	pop	r14
    592e:	df 90       	pop	r13
    5930:	cf 90       	pop	r12
    5932:	bf 90       	pop	r11
    5934:	af 90       	pop	r10
    5936:	08 95       	ret

00005938 <twiIsBusy>:
    5938:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    593c:	81 70       	andi	r24, 0x01	; 1
    593e:	08 95       	ret

00005940 <twiTransmit>:
    5940:	ff 92       	push	r15
    5942:	0f 93       	push	r16
    5944:	1f 93       	push	r17
    5946:	cf 93       	push	r28
    5948:	df 93       	push	r29
    594a:	00 97       	sbiw	r24, 0x00	; 0
    594c:	d1 f1       	breq	.+116    	; 0x59c2 <twiTransmit+0x82>
    594e:	4a 30       	cpi	r20, 0x0A	; 10
    5950:	d0 f5       	brcc	.+116    	; 0x59c6 <twiTransmit+0x86>
    5952:	f4 2e       	mov	r15, r20
    5954:	8b 01       	movw	r16, r22
    5956:	ec 01       	movw	r28, r24
    5958:	ef df       	rcall	.-34     	; 0x5938 <twiIsBusy>
    595a:	81 11       	cpse	r24, r1
    595c:	36 c0       	rjmp	.+108    	; 0x59ca <twiTransmit+0x8a>
    595e:	80 91 d4 17 	lds	r24, 0x17D4	; 0x8017d4 <_twiCurrentHandler>
    5962:	90 91 d5 17 	lds	r25, 0x17D5	; 0x8017d5 <_twiCurrentHandler+0x1>
    5966:	c8 17       	cp	r28, r24
    5968:	d9 07       	cpc	r29, r25
    596a:	41 f0       	breq	.+16     	; 0x597c <twiTransmit+0x3c>
    596c:	87 df       	rcall	.-242    	; 0x587c <_initTwiInterface>
    596e:	89 81       	ldd	r24, Y+1	; 0x01
    5970:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5974:	d0 93 d5 17 	sts	0x17D5, r29	; 0x8017d5 <_twiCurrentHandler+0x1>
    5978:	c0 93 d4 17 	sts	0x17D4, r28	; 0x8017d4 <_twiCurrentHandler>
    597c:	81 e0       	ldi	r24, 0x01	; 1
    597e:	8f 0d       	add	r24, r15
    5980:	80 93 d6 17 	sts	0x17D6, r24	; 0x8017d6 <_twiMessageLen>
    5984:	88 81       	ld	r24, Y
    5986:	88 0f       	add	r24, r24
    5988:	80 93 d7 17 	sts	0x17D7, r24	; 0x8017d7 <_twiMessageBuffer>
    598c:	ff 20       	and	r15, r15
    598e:	89 f0       	breq	.+34     	; 0x59b2 <twiTransmit+0x72>
    5990:	f8 01       	movw	r30, r16
    5992:	a8 ed       	ldi	r26, 0xD8	; 216
    5994:	b7 e1       	ldi	r27, 0x17	; 23
    5996:	4f ef       	ldi	r20, 0xFF	; 255
    5998:	4f 0d       	add	r20, r15
    599a:	64 2f       	mov	r22, r20
    599c:	70 e0       	ldi	r23, 0x00	; 0
    599e:	cb 01       	movw	r24, r22
    59a0:	01 96       	adiw	r24, 0x01	; 1
    59a2:	b8 01       	movw	r22, r16
    59a4:	68 0f       	add	r22, r24
    59a6:	79 1f       	adc	r23, r25
    59a8:	81 91       	ld	r24, Z+
    59aa:	8d 93       	st	X+, r24
    59ac:	e6 17       	cp	r30, r22
    59ae:	f7 07       	cpc	r31, r23
    59b0:	d9 f7       	brne	.-10     	; 0x59a8 <twiTransmit+0x68>
    59b2:	88 ef       	ldi	r24, 0xF8	; 248
    59b4:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    59b8:	85 ea       	ldi	r24, 0xA5	; 165
    59ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    59be:	84 e0       	ldi	r24, 0x04	; 4
    59c0:	05 c0       	rjmp	.+10     	; 0x59cc <twiTransmit+0x8c>
    59c2:	86 e0       	ldi	r24, 0x06	; 6
    59c4:	03 c0       	rjmp	.+6      	; 0x59cc <twiTransmit+0x8c>
    59c6:	87 e0       	ldi	r24, 0x07	; 7
    59c8:	01 c0       	rjmp	.+2      	; 0x59cc <twiTransmit+0x8c>
    59ca:	82 e0       	ldi	r24, 0x02	; 2
    59cc:	df 91       	pop	r29
    59ce:	cf 91       	pop	r28
    59d0:	1f 91       	pop	r17
    59d2:	0f 91       	pop	r16
    59d4:	ff 90       	pop	r15
    59d6:	08 95       	ret

000059d8 <twiReceive>:
    59d8:	1f 93       	push	r17
    59da:	cf 93       	push	r28
    59dc:	df 93       	push	r29
    59de:	00 97       	sbiw	r24, 0x00	; 0
    59e0:	29 f1       	breq	.+74     	; 0x5a2c <twiReceive+0x54>
    59e2:	6b 30       	cpi	r22, 0x0B	; 11
    59e4:	28 f5       	brcc	.+74     	; 0x5a30 <twiReceive+0x58>
    59e6:	16 2f       	mov	r17, r22
    59e8:	ec 01       	movw	r28, r24
    59ea:	a6 df       	rcall	.-180    	; 0x5938 <twiIsBusy>
    59ec:	81 11       	cpse	r24, r1
    59ee:	22 c0       	rjmp	.+68     	; 0x5a34 <twiReceive+0x5c>
    59f0:	80 91 d4 17 	lds	r24, 0x17D4	; 0x8017d4 <_twiCurrentHandler>
    59f4:	90 91 d5 17 	lds	r25, 0x17D5	; 0x8017d5 <_twiCurrentHandler+0x1>
    59f8:	c8 17       	cp	r28, r24
    59fa:	d9 07       	cpc	r29, r25
    59fc:	41 f0       	breq	.+16     	; 0x5a0e <twiReceive+0x36>
    59fe:	3e df       	rcall	.-388    	; 0x587c <_initTwiInterface>
    5a00:	89 81       	ldd	r24, Y+1	; 0x01
    5a02:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5a06:	d0 93 d5 17 	sts	0x17D5, r29	; 0x8017d5 <_twiCurrentHandler+0x1>
    5a0a:	c0 93 d4 17 	sts	0x17D4, r28	; 0x8017d4 <_twiCurrentHandler>
    5a0e:	10 93 d6 17 	sts	0x17D6, r17	; 0x8017d6 <_twiMessageLen>
    5a12:	88 81       	ld	r24, Y
    5a14:	88 0f       	add	r24, r24
    5a16:	81 60       	ori	r24, 0x01	; 1
    5a18:	80 93 d7 17 	sts	0x17D7, r24	; 0x8017d7 <_twiMessageBuffer>
    5a1c:	88 ef       	ldi	r24, 0xF8	; 248
    5a1e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5a22:	85 ea       	ldi	r24, 0xA5	; 165
    5a24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5a28:	85 e0       	ldi	r24, 0x05	; 5
    5a2a:	05 c0       	rjmp	.+10     	; 0x5a36 <twiReceive+0x5e>
    5a2c:	86 e0       	ldi	r24, 0x06	; 6
    5a2e:	03 c0       	rjmp	.+6      	; 0x5a36 <twiReceive+0x5e>
    5a30:	87 e0       	ldi	r24, 0x07	; 7
    5a32:	01 c0       	rjmp	.+2      	; 0x5a36 <twiReceive+0x5e>
    5a34:	82 e0       	ldi	r24, 0x02	; 2
    5a36:	df 91       	pop	r29
    5a38:	cf 91       	pop	r28
    5a3a:	1f 91       	pop	r17
    5a3c:	08 95       	ret

00005a3e <__vector_39>:
    5a3e:	1f 92       	push	r1
    5a40:	0f 92       	push	r0
    5a42:	0f b6       	in	r0, 0x3f	; 63
    5a44:	0f 92       	push	r0
    5a46:	11 24       	eor	r1, r1
    5a48:	0b b6       	in	r0, 0x3b	; 59
    5a4a:	0f 92       	push	r0
    5a4c:	2f 93       	push	r18
    5a4e:	3f 93       	push	r19
    5a50:	4f 93       	push	r20
    5a52:	5f 93       	push	r21
    5a54:	6f 93       	push	r22
    5a56:	7f 93       	push	r23
    5a58:	8f 93       	push	r24
    5a5a:	9f 93       	push	r25
    5a5c:	af 93       	push	r26
    5a5e:	bf 93       	push	r27
    5a60:	ef 93       	push	r30
    5a62:	ff 93       	push	r31
    5a64:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5a68:	8e 2f       	mov	r24, r30
    5a6a:	90 e0       	ldi	r25, 0x00	; 0
    5a6c:	fc 01       	movw	r30, r24
    5a6e:	38 97       	sbiw	r30, 0x08	; 8
    5a70:	e1 35       	cpi	r30, 0x51	; 81
    5a72:	f1 05       	cpc	r31, r1
    5a74:	08 f0       	brcs	.+2      	; 0x5a78 <__vector_39+0x3a>
    5a76:	75 c0       	rjmp	.+234    	; 0x5b62 <__vector_39+0x124>
    5a78:	88 27       	eor	r24, r24
    5a7a:	e4 58       	subi	r30, 0x84	; 132
    5a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a7e:	8f 4f       	sbci	r24, 0xFF	; 255
    5a80:	64 c6       	rjmp	.+3272   	; 0x674a <__tablejump2__>
    5a82:	10 92 d3 17 	sts	0x17D3, r1	; 0x8017d3 <_index.1885>
    5a86:	e0 91 d3 17 	lds	r30, 0x17D3	; 0x8017d3 <_index.1885>
    5a8a:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <_twiMessageLen>
    5a8e:	e8 17       	cp	r30, r24
    5a90:	70 f4       	brcc	.+28     	; 0x5aae <__vector_39+0x70>
    5a92:	81 e0       	ldi	r24, 0x01	; 1
    5a94:	8e 0f       	add	r24, r30
    5a96:	80 93 d3 17 	sts	0x17D3, r24	; 0x8017d3 <_index.1885>
    5a9a:	f0 e0       	ldi	r31, 0x00	; 0
    5a9c:	e9 52       	subi	r30, 0x29	; 41
    5a9e:	f8 4e       	sbci	r31, 0xE8	; 232
    5aa0:	80 81       	ld	r24, Z
    5aa2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5aa6:	85 e8       	ldi	r24, 0x85	; 133
    5aa8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5aac:	72 c0       	rjmp	.+228    	; 0x5b92 <__vector_39+0x154>
    5aae:	84 e9       	ldi	r24, 0x94	; 148
    5ab0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5ab4:	80 91 d4 17 	lds	r24, 0x17D4	; 0x8017d4 <_twiCurrentHandler>
    5ab8:	90 91 d5 17 	lds	r25, 0x17D5	; 0x8017d5 <_twiCurrentHandler+0x1>
    5abc:	dc 01       	movw	r26, r24
    5abe:	12 96       	adiw	r26, 0x02	; 2
    5ac0:	ed 91       	ld	r30, X+
    5ac2:	fc 91       	ld	r31, X
    5ac4:	13 97       	sbiw	r26, 0x03	; 3
    5ac6:	30 97       	sbiw	r30, 0x00	; 0
    5ac8:	09 f4       	brne	.+2      	; 0x5acc <__vector_39+0x8e>
    5aca:	63 c0       	rjmp	.+198    	; 0x5b92 <__vector_39+0x154>
    5acc:	20 e0       	ldi	r18, 0x00	; 0
    5ace:	40 e0       	ldi	r20, 0x00	; 0
    5ad0:	50 e0       	ldi	r21, 0x00	; 0
    5ad2:	64 e0       	ldi	r22, 0x04	; 4
    5ad4:	19 95       	eicall
    5ad6:	5d c0       	rjmp	.+186    	; 0x5b92 <__vector_39+0x154>
    5ad8:	e0 91 d3 17 	lds	r30, 0x17D3	; 0x8017d3 <_index.1885>
    5adc:	81 e0       	ldi	r24, 0x01	; 1
    5ade:	8e 0f       	add	r24, r30
    5ae0:	80 93 d3 17 	sts	0x17D3, r24	; 0x8017d3 <_index.1885>
    5ae4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5ae8:	f0 e0       	ldi	r31, 0x00	; 0
    5aea:	e9 52       	subi	r30, 0x29	; 41
    5aec:	f8 4e       	sbci	r31, 0xE8	; 232
    5aee:	80 83       	st	Z, r24
    5af0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5af4:	80 34       	cpi	r24, 0x40	; 64
    5af6:	11 f4       	brne	.+4      	; 0x5afc <__vector_39+0xbe>
    5af8:	10 92 d3 17 	sts	0x17D3, r1	; 0x8017d3 <_index.1885>
    5afc:	20 91 d3 17 	lds	r18, 0x17D3	; 0x8017d3 <_index.1885>
    5b00:	30 e0       	ldi	r19, 0x00	; 0
    5b02:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <_twiMessageLen>
    5b06:	90 e0       	ldi	r25, 0x00	; 0
    5b08:	01 97       	sbiw	r24, 0x01	; 1
    5b0a:	28 17       	cp	r18, r24
    5b0c:	39 07       	cpc	r19, r25
    5b0e:	24 f4       	brge	.+8      	; 0x5b18 <__vector_39+0xda>
    5b10:	85 ec       	ldi	r24, 0xC5	; 197
    5b12:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b16:	3d c0       	rjmp	.+122    	; 0x5b92 <__vector_39+0x154>
    5b18:	85 e8       	ldi	r24, 0x85	; 133
    5b1a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b1e:	39 c0       	rjmp	.+114    	; 0x5b92 <__vector_39+0x154>
    5b20:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5b24:	e0 91 d3 17 	lds	r30, 0x17D3	; 0x8017d3 <_index.1885>
    5b28:	f0 e0       	ldi	r31, 0x00	; 0
    5b2a:	e9 52       	subi	r30, 0x29	; 41
    5b2c:	f8 4e       	sbci	r31, 0xE8	; 232
    5b2e:	80 83       	st	Z, r24
    5b30:	84 e9       	ldi	r24, 0x94	; 148
    5b32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b36:	80 91 d4 17 	lds	r24, 0x17D4	; 0x8017d4 <_twiCurrentHandler>
    5b3a:	90 91 d5 17 	lds	r25, 0x17D5	; 0x8017d5 <_twiCurrentHandler+0x1>
    5b3e:	dc 01       	movw	r26, r24
    5b40:	12 96       	adiw	r26, 0x02	; 2
    5b42:	ed 91       	ld	r30, X+
    5b44:	fc 91       	ld	r31, X
    5b46:	13 97       	sbiw	r26, 0x03	; 3
    5b48:	30 97       	sbiw	r30, 0x00	; 0
    5b4a:	19 f1       	breq	.+70     	; 0x5b92 <__vector_39+0x154>
    5b4c:	20 91 d6 17 	lds	r18, 0x17D6	; 0x8017d6 <_twiMessageLen>
    5b50:	47 ed       	ldi	r20, 0xD7	; 215
    5b52:	57 e1       	ldi	r21, 0x17	; 23
    5b54:	65 e0       	ldi	r22, 0x05	; 5
    5b56:	19 95       	eicall
    5b58:	1c c0       	rjmp	.+56     	; 0x5b92 <__vector_39+0x154>
    5b5a:	85 ea       	ldi	r24, 0xA5	; 165
    5b5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b60:	18 c0       	rjmp	.+48     	; 0x5b92 <__vector_39+0x154>
    5b62:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5b66:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5b6a:	84 e0       	ldi	r24, 0x04	; 4
    5b6c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b70:	80 91 d4 17 	lds	r24, 0x17D4	; 0x8017d4 <_twiCurrentHandler>
    5b74:	90 91 d5 17 	lds	r25, 0x17D5	; 0x8017d5 <_twiCurrentHandler+0x1>
    5b78:	dc 01       	movw	r26, r24
    5b7a:	12 96       	adiw	r26, 0x02	; 2
    5b7c:	ed 91       	ld	r30, X+
    5b7e:	fc 91       	ld	r31, X
    5b80:	13 97       	sbiw	r26, 0x03	; 3
    5b82:	30 97       	sbiw	r30, 0x00	; 0
    5b84:	31 f0       	breq	.+12     	; 0x5b92 <__vector_39+0x154>
    5b86:	20 e0       	ldi	r18, 0x00	; 0
    5b88:	40 e0       	ldi	r20, 0x00	; 0
    5b8a:	50 e0       	ldi	r21, 0x00	; 0
    5b8c:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5b90:	19 95       	eicall
    5b92:	ff 91       	pop	r31
    5b94:	ef 91       	pop	r30
    5b96:	bf 91       	pop	r27
    5b98:	af 91       	pop	r26
    5b9a:	9f 91       	pop	r25
    5b9c:	8f 91       	pop	r24
    5b9e:	7f 91       	pop	r23
    5ba0:	6f 91       	pop	r22
    5ba2:	5f 91       	pop	r21
    5ba4:	4f 91       	pop	r20
    5ba6:	3f 91       	pop	r19
    5ba8:	2f 91       	pop	r18
    5baa:	0f 90       	pop	r0
    5bac:	0b be       	out	0x3b, r0	; 59
    5bae:	0f 90       	pop	r0
    5bb0:	0f be       	out	0x3f, r0	; 63
    5bb2:	0f 90       	pop	r0
    5bb4:	1f 90       	pop	r1
    5bb6:	18 95       	reti

00005bb8 <fifo_init>:
    5bb8:	fc 01       	movw	r30, r24
    5bba:	41 11       	cpse	r20, r1
    5bbc:	01 c0       	rjmp	.+2      	; 0x5bc0 <fifo_init+0x8>
    5bbe:	11 d7       	rcall	.+3618   	; 0x69e2 <abort>
    5bc0:	84 2f       	mov	r24, r20
    5bc2:	90 e0       	ldi	r25, 0x00	; 0
    5bc4:	9c 01       	movw	r18, r24
    5bc6:	21 50       	subi	r18, 0x01	; 1
    5bc8:	31 09       	sbc	r19, r1
    5bca:	82 23       	and	r24, r18
    5bcc:	93 23       	and	r25, r19
    5bce:	89 2b       	or	r24, r25
    5bd0:	09 f0       	breq	.+2      	; 0x5bd4 <fifo_init+0x1c>
    5bd2:	07 d7       	rcall	.+3598   	; 0x69e2 <abort>
    5bd4:	41 38       	cpi	r20, 0x81	; 129
    5bd6:	08 f0       	brcs	.+2      	; 0x5bda <fifo_init+0x22>
    5bd8:	04 d7       	rcall	.+3592   	; 0x69e2 <abort>
    5bda:	12 82       	std	Z+2, r1	; 0x02
    5bdc:	13 82       	std	Z+3, r1	; 0x03
    5bde:	44 83       	std	Z+4, r20	; 0x04
    5be0:	44 0f       	add	r20, r20
    5be2:	41 50       	subi	r20, 0x01	; 1
    5be4:	45 83       	std	Z+5, r20	; 0x05
    5be6:	71 83       	std	Z+1, r23	; 0x01
    5be8:	60 83       	st	Z, r22
    5bea:	80 e0       	ldi	r24, 0x00	; 0
    5bec:	90 e0       	ldi	r25, 0x00	; 0
    5bee:	08 95       	ret

00005bf0 <__subsf3>:
    5bf0:	50 58       	subi	r21, 0x80	; 128

00005bf2 <__addsf3>:
    5bf2:	bb 27       	eor	r27, r27
    5bf4:	aa 27       	eor	r26, r26
    5bf6:	0e d0       	rcall	.+28     	; 0x5c14 <__addsf3x>
    5bf8:	4d c1       	rjmp	.+666    	; 0x5e94 <__fp_round>
    5bfa:	3e d1       	rcall	.+636    	; 0x5e78 <__fp_pscA>
    5bfc:	30 f0       	brcs	.+12     	; 0x5c0a <__addsf3+0x18>
    5bfe:	43 d1       	rcall	.+646    	; 0x5e86 <__fp_pscB>
    5c00:	20 f0       	brcs	.+8      	; 0x5c0a <__addsf3+0x18>
    5c02:	31 f4       	brne	.+12     	; 0x5c10 <__addsf3+0x1e>
    5c04:	9f 3f       	cpi	r25, 0xFF	; 255
    5c06:	11 f4       	brne	.+4      	; 0x5c0c <__addsf3+0x1a>
    5c08:	1e f4       	brtc	.+6      	; 0x5c10 <__addsf3+0x1e>
    5c0a:	33 c1       	rjmp	.+614    	; 0x5e72 <__fp_nan>
    5c0c:	0e f4       	brtc	.+2      	; 0x5c10 <__addsf3+0x1e>
    5c0e:	e0 95       	com	r30
    5c10:	e7 fb       	bst	r30, 7
    5c12:	29 c1       	rjmp	.+594    	; 0x5e66 <__fp_inf>

00005c14 <__addsf3x>:
    5c14:	e9 2f       	mov	r30, r25
    5c16:	4f d1       	rcall	.+670    	; 0x5eb6 <__fp_split3>
    5c18:	80 f3       	brcs	.-32     	; 0x5bfa <__addsf3+0x8>
    5c1a:	ba 17       	cp	r27, r26
    5c1c:	62 07       	cpc	r22, r18
    5c1e:	73 07       	cpc	r23, r19
    5c20:	84 07       	cpc	r24, r20
    5c22:	95 07       	cpc	r25, r21
    5c24:	18 f0       	brcs	.+6      	; 0x5c2c <__addsf3x+0x18>
    5c26:	71 f4       	brne	.+28     	; 0x5c44 <__addsf3x+0x30>
    5c28:	9e f5       	brtc	.+102    	; 0x5c90 <__addsf3x+0x7c>
    5c2a:	67 c1       	rjmp	.+718    	; 0x5efa <__fp_zero>
    5c2c:	0e f4       	brtc	.+2      	; 0x5c30 <__addsf3x+0x1c>
    5c2e:	e0 95       	com	r30
    5c30:	0b 2e       	mov	r0, r27
    5c32:	ba 2f       	mov	r27, r26
    5c34:	a0 2d       	mov	r26, r0
    5c36:	0b 01       	movw	r0, r22
    5c38:	b9 01       	movw	r22, r18
    5c3a:	90 01       	movw	r18, r0
    5c3c:	0c 01       	movw	r0, r24
    5c3e:	ca 01       	movw	r24, r20
    5c40:	a0 01       	movw	r20, r0
    5c42:	11 24       	eor	r1, r1
    5c44:	ff 27       	eor	r31, r31
    5c46:	59 1b       	sub	r21, r25
    5c48:	99 f0       	breq	.+38     	; 0x5c70 <__addsf3x+0x5c>
    5c4a:	59 3f       	cpi	r21, 0xF9	; 249
    5c4c:	50 f4       	brcc	.+20     	; 0x5c62 <__addsf3x+0x4e>
    5c4e:	50 3e       	cpi	r21, 0xE0	; 224
    5c50:	68 f1       	brcs	.+90     	; 0x5cac <__addsf3x+0x98>
    5c52:	1a 16       	cp	r1, r26
    5c54:	f0 40       	sbci	r31, 0x00	; 0
    5c56:	a2 2f       	mov	r26, r18
    5c58:	23 2f       	mov	r18, r19
    5c5a:	34 2f       	mov	r19, r20
    5c5c:	44 27       	eor	r20, r20
    5c5e:	58 5f       	subi	r21, 0xF8	; 248
    5c60:	f3 cf       	rjmp	.-26     	; 0x5c48 <__addsf3x+0x34>
    5c62:	46 95       	lsr	r20
    5c64:	37 95       	ror	r19
    5c66:	27 95       	ror	r18
    5c68:	a7 95       	ror	r26
    5c6a:	f0 40       	sbci	r31, 0x00	; 0
    5c6c:	53 95       	inc	r21
    5c6e:	c9 f7       	brne	.-14     	; 0x5c62 <__addsf3x+0x4e>
    5c70:	7e f4       	brtc	.+30     	; 0x5c90 <__addsf3x+0x7c>
    5c72:	1f 16       	cp	r1, r31
    5c74:	ba 0b       	sbc	r27, r26
    5c76:	62 0b       	sbc	r22, r18
    5c78:	73 0b       	sbc	r23, r19
    5c7a:	84 0b       	sbc	r24, r20
    5c7c:	ba f0       	brmi	.+46     	; 0x5cac <__addsf3x+0x98>
    5c7e:	91 50       	subi	r25, 0x01	; 1
    5c80:	a1 f0       	breq	.+40     	; 0x5caa <__addsf3x+0x96>
    5c82:	ff 0f       	add	r31, r31
    5c84:	bb 1f       	adc	r27, r27
    5c86:	66 1f       	adc	r22, r22
    5c88:	77 1f       	adc	r23, r23
    5c8a:	88 1f       	adc	r24, r24
    5c8c:	c2 f7       	brpl	.-16     	; 0x5c7e <__addsf3x+0x6a>
    5c8e:	0e c0       	rjmp	.+28     	; 0x5cac <__addsf3x+0x98>
    5c90:	ba 0f       	add	r27, r26
    5c92:	62 1f       	adc	r22, r18
    5c94:	73 1f       	adc	r23, r19
    5c96:	84 1f       	adc	r24, r20
    5c98:	48 f4       	brcc	.+18     	; 0x5cac <__addsf3x+0x98>
    5c9a:	87 95       	ror	r24
    5c9c:	77 95       	ror	r23
    5c9e:	67 95       	ror	r22
    5ca0:	b7 95       	ror	r27
    5ca2:	f7 95       	ror	r31
    5ca4:	9e 3f       	cpi	r25, 0xFE	; 254
    5ca6:	08 f0       	brcs	.+2      	; 0x5caa <__addsf3x+0x96>
    5ca8:	b3 cf       	rjmp	.-154    	; 0x5c10 <__addsf3+0x1e>
    5caa:	93 95       	inc	r25
    5cac:	88 0f       	add	r24, r24
    5cae:	08 f0       	brcs	.+2      	; 0x5cb2 <__addsf3x+0x9e>
    5cb0:	99 27       	eor	r25, r25
    5cb2:	ee 0f       	add	r30, r30
    5cb4:	97 95       	ror	r25
    5cb6:	87 95       	ror	r24
    5cb8:	08 95       	ret

00005cba <__divsf3>:
    5cba:	0c d0       	rcall	.+24     	; 0x5cd4 <__divsf3x>
    5cbc:	eb c0       	rjmp	.+470    	; 0x5e94 <__fp_round>
    5cbe:	e3 d0       	rcall	.+454    	; 0x5e86 <__fp_pscB>
    5cc0:	40 f0       	brcs	.+16     	; 0x5cd2 <__divsf3+0x18>
    5cc2:	da d0       	rcall	.+436    	; 0x5e78 <__fp_pscA>
    5cc4:	30 f0       	brcs	.+12     	; 0x5cd2 <__divsf3+0x18>
    5cc6:	21 f4       	brne	.+8      	; 0x5cd0 <__divsf3+0x16>
    5cc8:	5f 3f       	cpi	r21, 0xFF	; 255
    5cca:	19 f0       	breq	.+6      	; 0x5cd2 <__divsf3+0x18>
    5ccc:	cc c0       	rjmp	.+408    	; 0x5e66 <__fp_inf>
    5cce:	51 11       	cpse	r21, r1
    5cd0:	15 c1       	rjmp	.+554    	; 0x5efc <__fp_szero>
    5cd2:	cf c0       	rjmp	.+414    	; 0x5e72 <__fp_nan>

00005cd4 <__divsf3x>:
    5cd4:	f0 d0       	rcall	.+480    	; 0x5eb6 <__fp_split3>
    5cd6:	98 f3       	brcs	.-26     	; 0x5cbe <__divsf3+0x4>

00005cd8 <__divsf3_pse>:
    5cd8:	99 23       	and	r25, r25
    5cda:	c9 f3       	breq	.-14     	; 0x5cce <__divsf3+0x14>
    5cdc:	55 23       	and	r21, r21
    5cde:	b1 f3       	breq	.-20     	; 0x5ccc <__divsf3+0x12>
    5ce0:	95 1b       	sub	r25, r21
    5ce2:	55 0b       	sbc	r21, r21
    5ce4:	bb 27       	eor	r27, r27
    5ce6:	aa 27       	eor	r26, r26
    5ce8:	62 17       	cp	r22, r18
    5cea:	73 07       	cpc	r23, r19
    5cec:	84 07       	cpc	r24, r20
    5cee:	38 f0       	brcs	.+14     	; 0x5cfe <__divsf3_pse+0x26>
    5cf0:	9f 5f       	subi	r25, 0xFF	; 255
    5cf2:	5f 4f       	sbci	r21, 0xFF	; 255
    5cf4:	22 0f       	add	r18, r18
    5cf6:	33 1f       	adc	r19, r19
    5cf8:	44 1f       	adc	r20, r20
    5cfa:	aa 1f       	adc	r26, r26
    5cfc:	a9 f3       	breq	.-22     	; 0x5ce8 <__divsf3_pse+0x10>
    5cfe:	33 d0       	rcall	.+102    	; 0x5d66 <__divsf3_pse+0x8e>
    5d00:	0e 2e       	mov	r0, r30
    5d02:	3a f0       	brmi	.+14     	; 0x5d12 <__divsf3_pse+0x3a>
    5d04:	e0 e8       	ldi	r30, 0x80	; 128
    5d06:	30 d0       	rcall	.+96     	; 0x5d68 <__divsf3_pse+0x90>
    5d08:	91 50       	subi	r25, 0x01	; 1
    5d0a:	50 40       	sbci	r21, 0x00	; 0
    5d0c:	e6 95       	lsr	r30
    5d0e:	00 1c       	adc	r0, r0
    5d10:	ca f7       	brpl	.-14     	; 0x5d04 <__divsf3_pse+0x2c>
    5d12:	29 d0       	rcall	.+82     	; 0x5d66 <__divsf3_pse+0x8e>
    5d14:	fe 2f       	mov	r31, r30
    5d16:	27 d0       	rcall	.+78     	; 0x5d66 <__divsf3_pse+0x8e>
    5d18:	66 0f       	add	r22, r22
    5d1a:	77 1f       	adc	r23, r23
    5d1c:	88 1f       	adc	r24, r24
    5d1e:	bb 1f       	adc	r27, r27
    5d20:	26 17       	cp	r18, r22
    5d22:	37 07       	cpc	r19, r23
    5d24:	48 07       	cpc	r20, r24
    5d26:	ab 07       	cpc	r26, r27
    5d28:	b0 e8       	ldi	r27, 0x80	; 128
    5d2a:	09 f0       	breq	.+2      	; 0x5d2e <__divsf3_pse+0x56>
    5d2c:	bb 0b       	sbc	r27, r27
    5d2e:	80 2d       	mov	r24, r0
    5d30:	bf 01       	movw	r22, r30
    5d32:	ff 27       	eor	r31, r31
    5d34:	93 58       	subi	r25, 0x83	; 131
    5d36:	5f 4f       	sbci	r21, 0xFF	; 255
    5d38:	2a f0       	brmi	.+10     	; 0x5d44 <__divsf3_pse+0x6c>
    5d3a:	9e 3f       	cpi	r25, 0xFE	; 254
    5d3c:	51 05       	cpc	r21, r1
    5d3e:	68 f0       	brcs	.+26     	; 0x5d5a <__divsf3_pse+0x82>
    5d40:	92 c0       	rjmp	.+292    	; 0x5e66 <__fp_inf>
    5d42:	dc c0       	rjmp	.+440    	; 0x5efc <__fp_szero>
    5d44:	5f 3f       	cpi	r21, 0xFF	; 255
    5d46:	ec f3       	brlt	.-6      	; 0x5d42 <__divsf3_pse+0x6a>
    5d48:	98 3e       	cpi	r25, 0xE8	; 232
    5d4a:	dc f3       	brlt	.-10     	; 0x5d42 <__divsf3_pse+0x6a>
    5d4c:	86 95       	lsr	r24
    5d4e:	77 95       	ror	r23
    5d50:	67 95       	ror	r22
    5d52:	b7 95       	ror	r27
    5d54:	f7 95       	ror	r31
    5d56:	9f 5f       	subi	r25, 0xFF	; 255
    5d58:	c9 f7       	brne	.-14     	; 0x5d4c <__divsf3_pse+0x74>
    5d5a:	88 0f       	add	r24, r24
    5d5c:	91 1d       	adc	r25, r1
    5d5e:	96 95       	lsr	r25
    5d60:	87 95       	ror	r24
    5d62:	97 f9       	bld	r25, 7
    5d64:	08 95       	ret
    5d66:	e1 e0       	ldi	r30, 0x01	; 1
    5d68:	66 0f       	add	r22, r22
    5d6a:	77 1f       	adc	r23, r23
    5d6c:	88 1f       	adc	r24, r24
    5d6e:	bb 1f       	adc	r27, r27
    5d70:	62 17       	cp	r22, r18
    5d72:	73 07       	cpc	r23, r19
    5d74:	84 07       	cpc	r24, r20
    5d76:	ba 07       	cpc	r27, r26
    5d78:	20 f0       	brcs	.+8      	; 0x5d82 <__divsf3_pse+0xaa>
    5d7a:	62 1b       	sub	r22, r18
    5d7c:	73 0b       	sbc	r23, r19
    5d7e:	84 0b       	sbc	r24, r20
    5d80:	ba 0b       	sbc	r27, r26
    5d82:	ee 1f       	adc	r30, r30
    5d84:	88 f7       	brcc	.-30     	; 0x5d68 <__divsf3_pse+0x90>
    5d86:	e0 95       	com	r30
    5d88:	08 95       	ret

00005d8a <__fixsfsi>:
    5d8a:	04 d0       	rcall	.+8      	; 0x5d94 <__fixunssfsi>
    5d8c:	68 94       	set
    5d8e:	b1 11       	cpse	r27, r1
    5d90:	b5 c0       	rjmp	.+362    	; 0x5efc <__fp_szero>
    5d92:	08 95       	ret

00005d94 <__fixunssfsi>:
    5d94:	98 d0       	rcall	.+304    	; 0x5ec6 <__fp_splitA>
    5d96:	88 f0       	brcs	.+34     	; 0x5dba <__fixunssfsi+0x26>
    5d98:	9f 57       	subi	r25, 0x7F	; 127
    5d9a:	90 f0       	brcs	.+36     	; 0x5dc0 <__fixunssfsi+0x2c>
    5d9c:	b9 2f       	mov	r27, r25
    5d9e:	99 27       	eor	r25, r25
    5da0:	b7 51       	subi	r27, 0x17	; 23
    5da2:	a0 f0       	brcs	.+40     	; 0x5dcc <__fixunssfsi+0x38>
    5da4:	d1 f0       	breq	.+52     	; 0x5dda <__fixunssfsi+0x46>
    5da6:	66 0f       	add	r22, r22
    5da8:	77 1f       	adc	r23, r23
    5daa:	88 1f       	adc	r24, r24
    5dac:	99 1f       	adc	r25, r25
    5dae:	1a f0       	brmi	.+6      	; 0x5db6 <__fixunssfsi+0x22>
    5db0:	ba 95       	dec	r27
    5db2:	c9 f7       	brne	.-14     	; 0x5da6 <__fixunssfsi+0x12>
    5db4:	12 c0       	rjmp	.+36     	; 0x5dda <__fixunssfsi+0x46>
    5db6:	b1 30       	cpi	r27, 0x01	; 1
    5db8:	81 f0       	breq	.+32     	; 0x5dda <__fixunssfsi+0x46>
    5dba:	9f d0       	rcall	.+318    	; 0x5efa <__fp_zero>
    5dbc:	b1 e0       	ldi	r27, 0x01	; 1
    5dbe:	08 95       	ret
    5dc0:	9c c0       	rjmp	.+312    	; 0x5efa <__fp_zero>
    5dc2:	67 2f       	mov	r22, r23
    5dc4:	78 2f       	mov	r23, r24
    5dc6:	88 27       	eor	r24, r24
    5dc8:	b8 5f       	subi	r27, 0xF8	; 248
    5dca:	39 f0       	breq	.+14     	; 0x5dda <__fixunssfsi+0x46>
    5dcc:	b9 3f       	cpi	r27, 0xF9	; 249
    5dce:	cc f3       	brlt	.-14     	; 0x5dc2 <__fixunssfsi+0x2e>
    5dd0:	86 95       	lsr	r24
    5dd2:	77 95       	ror	r23
    5dd4:	67 95       	ror	r22
    5dd6:	b3 95       	inc	r27
    5dd8:	d9 f7       	brne	.-10     	; 0x5dd0 <__fixunssfsi+0x3c>
    5dda:	3e f4       	brtc	.+14     	; 0x5dea <__fixunssfsi+0x56>
    5ddc:	90 95       	com	r25
    5dde:	80 95       	com	r24
    5de0:	70 95       	com	r23
    5de2:	61 95       	neg	r22
    5de4:	7f 4f       	sbci	r23, 0xFF	; 255
    5de6:	8f 4f       	sbci	r24, 0xFF	; 255
    5de8:	9f 4f       	sbci	r25, 0xFF	; 255
    5dea:	08 95       	ret

00005dec <__floatunsisf>:
    5dec:	e8 94       	clt
    5dee:	09 c0       	rjmp	.+18     	; 0x5e02 <__floatsisf+0x12>

00005df0 <__floatsisf>:
    5df0:	97 fb       	bst	r25, 7
    5df2:	3e f4       	brtc	.+14     	; 0x5e02 <__floatsisf+0x12>
    5df4:	90 95       	com	r25
    5df6:	80 95       	com	r24
    5df8:	70 95       	com	r23
    5dfa:	61 95       	neg	r22
    5dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    5dfe:	8f 4f       	sbci	r24, 0xFF	; 255
    5e00:	9f 4f       	sbci	r25, 0xFF	; 255
    5e02:	99 23       	and	r25, r25
    5e04:	a9 f0       	breq	.+42     	; 0x5e30 <__floatsisf+0x40>
    5e06:	f9 2f       	mov	r31, r25
    5e08:	96 e9       	ldi	r25, 0x96	; 150
    5e0a:	bb 27       	eor	r27, r27
    5e0c:	93 95       	inc	r25
    5e0e:	f6 95       	lsr	r31
    5e10:	87 95       	ror	r24
    5e12:	77 95       	ror	r23
    5e14:	67 95       	ror	r22
    5e16:	b7 95       	ror	r27
    5e18:	f1 11       	cpse	r31, r1
    5e1a:	f8 cf       	rjmp	.-16     	; 0x5e0c <__floatsisf+0x1c>
    5e1c:	fa f4       	brpl	.+62     	; 0x5e5c <__floatsisf+0x6c>
    5e1e:	bb 0f       	add	r27, r27
    5e20:	11 f4       	brne	.+4      	; 0x5e26 <__floatsisf+0x36>
    5e22:	60 ff       	sbrs	r22, 0
    5e24:	1b c0       	rjmp	.+54     	; 0x5e5c <__floatsisf+0x6c>
    5e26:	6f 5f       	subi	r22, 0xFF	; 255
    5e28:	7f 4f       	sbci	r23, 0xFF	; 255
    5e2a:	8f 4f       	sbci	r24, 0xFF	; 255
    5e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    5e2e:	16 c0       	rjmp	.+44     	; 0x5e5c <__floatsisf+0x6c>
    5e30:	88 23       	and	r24, r24
    5e32:	11 f0       	breq	.+4      	; 0x5e38 <__floatsisf+0x48>
    5e34:	96 e9       	ldi	r25, 0x96	; 150
    5e36:	11 c0       	rjmp	.+34     	; 0x5e5a <__floatsisf+0x6a>
    5e38:	77 23       	and	r23, r23
    5e3a:	21 f0       	breq	.+8      	; 0x5e44 <__floatsisf+0x54>
    5e3c:	9e e8       	ldi	r25, 0x8E	; 142
    5e3e:	87 2f       	mov	r24, r23
    5e40:	76 2f       	mov	r23, r22
    5e42:	05 c0       	rjmp	.+10     	; 0x5e4e <__floatsisf+0x5e>
    5e44:	66 23       	and	r22, r22
    5e46:	71 f0       	breq	.+28     	; 0x5e64 <__floatsisf+0x74>
    5e48:	96 e8       	ldi	r25, 0x86	; 134
    5e4a:	86 2f       	mov	r24, r22
    5e4c:	70 e0       	ldi	r23, 0x00	; 0
    5e4e:	60 e0       	ldi	r22, 0x00	; 0
    5e50:	2a f0       	brmi	.+10     	; 0x5e5c <__floatsisf+0x6c>
    5e52:	9a 95       	dec	r25
    5e54:	66 0f       	add	r22, r22
    5e56:	77 1f       	adc	r23, r23
    5e58:	88 1f       	adc	r24, r24
    5e5a:	da f7       	brpl	.-10     	; 0x5e52 <__floatsisf+0x62>
    5e5c:	88 0f       	add	r24, r24
    5e5e:	96 95       	lsr	r25
    5e60:	87 95       	ror	r24
    5e62:	97 f9       	bld	r25, 7
    5e64:	08 95       	ret

00005e66 <__fp_inf>:
    5e66:	97 f9       	bld	r25, 7
    5e68:	9f 67       	ori	r25, 0x7F	; 127
    5e6a:	80 e8       	ldi	r24, 0x80	; 128
    5e6c:	70 e0       	ldi	r23, 0x00	; 0
    5e6e:	60 e0       	ldi	r22, 0x00	; 0
    5e70:	08 95       	ret

00005e72 <__fp_nan>:
    5e72:	9f ef       	ldi	r25, 0xFF	; 255
    5e74:	80 ec       	ldi	r24, 0xC0	; 192
    5e76:	08 95       	ret

00005e78 <__fp_pscA>:
    5e78:	00 24       	eor	r0, r0
    5e7a:	0a 94       	dec	r0
    5e7c:	16 16       	cp	r1, r22
    5e7e:	17 06       	cpc	r1, r23
    5e80:	18 06       	cpc	r1, r24
    5e82:	09 06       	cpc	r0, r25
    5e84:	08 95       	ret

00005e86 <__fp_pscB>:
    5e86:	00 24       	eor	r0, r0
    5e88:	0a 94       	dec	r0
    5e8a:	12 16       	cp	r1, r18
    5e8c:	13 06       	cpc	r1, r19
    5e8e:	14 06       	cpc	r1, r20
    5e90:	05 06       	cpc	r0, r21
    5e92:	08 95       	ret

00005e94 <__fp_round>:
    5e94:	09 2e       	mov	r0, r25
    5e96:	03 94       	inc	r0
    5e98:	00 0c       	add	r0, r0
    5e9a:	11 f4       	brne	.+4      	; 0x5ea0 <__fp_round+0xc>
    5e9c:	88 23       	and	r24, r24
    5e9e:	52 f0       	brmi	.+20     	; 0x5eb4 <__fp_round+0x20>
    5ea0:	bb 0f       	add	r27, r27
    5ea2:	40 f4       	brcc	.+16     	; 0x5eb4 <__fp_round+0x20>
    5ea4:	bf 2b       	or	r27, r31
    5ea6:	11 f4       	brne	.+4      	; 0x5eac <__fp_round+0x18>
    5ea8:	60 ff       	sbrs	r22, 0
    5eaa:	04 c0       	rjmp	.+8      	; 0x5eb4 <__fp_round+0x20>
    5eac:	6f 5f       	subi	r22, 0xFF	; 255
    5eae:	7f 4f       	sbci	r23, 0xFF	; 255
    5eb0:	8f 4f       	sbci	r24, 0xFF	; 255
    5eb2:	9f 4f       	sbci	r25, 0xFF	; 255
    5eb4:	08 95       	ret

00005eb6 <__fp_split3>:
    5eb6:	57 fd       	sbrc	r21, 7
    5eb8:	90 58       	subi	r25, 0x80	; 128
    5eba:	44 0f       	add	r20, r20
    5ebc:	55 1f       	adc	r21, r21
    5ebe:	59 f0       	breq	.+22     	; 0x5ed6 <__fp_splitA+0x10>
    5ec0:	5f 3f       	cpi	r21, 0xFF	; 255
    5ec2:	71 f0       	breq	.+28     	; 0x5ee0 <__fp_splitA+0x1a>
    5ec4:	47 95       	ror	r20

00005ec6 <__fp_splitA>:
    5ec6:	88 0f       	add	r24, r24
    5ec8:	97 fb       	bst	r25, 7
    5eca:	99 1f       	adc	r25, r25
    5ecc:	61 f0       	breq	.+24     	; 0x5ee6 <__fp_splitA+0x20>
    5ece:	9f 3f       	cpi	r25, 0xFF	; 255
    5ed0:	79 f0       	breq	.+30     	; 0x5ef0 <__fp_splitA+0x2a>
    5ed2:	87 95       	ror	r24
    5ed4:	08 95       	ret
    5ed6:	12 16       	cp	r1, r18
    5ed8:	13 06       	cpc	r1, r19
    5eda:	14 06       	cpc	r1, r20
    5edc:	55 1f       	adc	r21, r21
    5ede:	f2 cf       	rjmp	.-28     	; 0x5ec4 <__fp_split3+0xe>
    5ee0:	46 95       	lsr	r20
    5ee2:	f1 df       	rcall	.-30     	; 0x5ec6 <__fp_splitA>
    5ee4:	08 c0       	rjmp	.+16     	; 0x5ef6 <__fp_splitA+0x30>
    5ee6:	16 16       	cp	r1, r22
    5ee8:	17 06       	cpc	r1, r23
    5eea:	18 06       	cpc	r1, r24
    5eec:	99 1f       	adc	r25, r25
    5eee:	f1 cf       	rjmp	.-30     	; 0x5ed2 <__fp_splitA+0xc>
    5ef0:	86 95       	lsr	r24
    5ef2:	71 05       	cpc	r23, r1
    5ef4:	61 05       	cpc	r22, r1
    5ef6:	08 94       	sec
    5ef8:	08 95       	ret

00005efa <__fp_zero>:
    5efa:	e8 94       	clt

00005efc <__fp_szero>:
    5efc:	bb 27       	eor	r27, r27
    5efe:	66 27       	eor	r22, r22
    5f00:	77 27       	eor	r23, r23
    5f02:	cb 01       	movw	r24, r22
    5f04:	97 f9       	bld	r25, 7
    5f06:	08 95       	ret

00005f08 <__mulsf3>:
    5f08:	0b d0       	rcall	.+22     	; 0x5f20 <__mulsf3x>
    5f0a:	c4 cf       	rjmp	.-120    	; 0x5e94 <__fp_round>
    5f0c:	b5 df       	rcall	.-150    	; 0x5e78 <__fp_pscA>
    5f0e:	28 f0       	brcs	.+10     	; 0x5f1a <__mulsf3+0x12>
    5f10:	ba df       	rcall	.-140    	; 0x5e86 <__fp_pscB>
    5f12:	18 f0       	brcs	.+6      	; 0x5f1a <__mulsf3+0x12>
    5f14:	95 23       	and	r25, r21
    5f16:	09 f0       	breq	.+2      	; 0x5f1a <__mulsf3+0x12>
    5f18:	a6 cf       	rjmp	.-180    	; 0x5e66 <__fp_inf>
    5f1a:	ab cf       	rjmp	.-170    	; 0x5e72 <__fp_nan>
    5f1c:	11 24       	eor	r1, r1
    5f1e:	ee cf       	rjmp	.-36     	; 0x5efc <__fp_szero>

00005f20 <__mulsf3x>:
    5f20:	ca df       	rcall	.-108    	; 0x5eb6 <__fp_split3>
    5f22:	a0 f3       	brcs	.-24     	; 0x5f0c <__mulsf3+0x4>

00005f24 <__mulsf3_pse>:
    5f24:	95 9f       	mul	r25, r21
    5f26:	d1 f3       	breq	.-12     	; 0x5f1c <__mulsf3+0x14>
    5f28:	95 0f       	add	r25, r21
    5f2a:	50 e0       	ldi	r21, 0x00	; 0
    5f2c:	55 1f       	adc	r21, r21
    5f2e:	62 9f       	mul	r22, r18
    5f30:	f0 01       	movw	r30, r0
    5f32:	72 9f       	mul	r23, r18
    5f34:	bb 27       	eor	r27, r27
    5f36:	f0 0d       	add	r31, r0
    5f38:	b1 1d       	adc	r27, r1
    5f3a:	63 9f       	mul	r22, r19
    5f3c:	aa 27       	eor	r26, r26
    5f3e:	f0 0d       	add	r31, r0
    5f40:	b1 1d       	adc	r27, r1
    5f42:	aa 1f       	adc	r26, r26
    5f44:	64 9f       	mul	r22, r20
    5f46:	66 27       	eor	r22, r22
    5f48:	b0 0d       	add	r27, r0
    5f4a:	a1 1d       	adc	r26, r1
    5f4c:	66 1f       	adc	r22, r22
    5f4e:	82 9f       	mul	r24, r18
    5f50:	22 27       	eor	r18, r18
    5f52:	b0 0d       	add	r27, r0
    5f54:	a1 1d       	adc	r26, r1
    5f56:	62 1f       	adc	r22, r18
    5f58:	73 9f       	mul	r23, r19
    5f5a:	b0 0d       	add	r27, r0
    5f5c:	a1 1d       	adc	r26, r1
    5f5e:	62 1f       	adc	r22, r18
    5f60:	83 9f       	mul	r24, r19
    5f62:	a0 0d       	add	r26, r0
    5f64:	61 1d       	adc	r22, r1
    5f66:	22 1f       	adc	r18, r18
    5f68:	74 9f       	mul	r23, r20
    5f6a:	33 27       	eor	r19, r19
    5f6c:	a0 0d       	add	r26, r0
    5f6e:	61 1d       	adc	r22, r1
    5f70:	23 1f       	adc	r18, r19
    5f72:	84 9f       	mul	r24, r20
    5f74:	60 0d       	add	r22, r0
    5f76:	21 1d       	adc	r18, r1
    5f78:	82 2f       	mov	r24, r18
    5f7a:	76 2f       	mov	r23, r22
    5f7c:	6a 2f       	mov	r22, r26
    5f7e:	11 24       	eor	r1, r1
    5f80:	9f 57       	subi	r25, 0x7F	; 127
    5f82:	50 40       	sbci	r21, 0x00	; 0
    5f84:	8a f0       	brmi	.+34     	; 0x5fa8 <__mulsf3_pse+0x84>
    5f86:	e1 f0       	breq	.+56     	; 0x5fc0 <__mulsf3_pse+0x9c>
    5f88:	88 23       	and	r24, r24
    5f8a:	4a f0       	brmi	.+18     	; 0x5f9e <__mulsf3_pse+0x7a>
    5f8c:	ee 0f       	add	r30, r30
    5f8e:	ff 1f       	adc	r31, r31
    5f90:	bb 1f       	adc	r27, r27
    5f92:	66 1f       	adc	r22, r22
    5f94:	77 1f       	adc	r23, r23
    5f96:	88 1f       	adc	r24, r24
    5f98:	91 50       	subi	r25, 0x01	; 1
    5f9a:	50 40       	sbci	r21, 0x00	; 0
    5f9c:	a9 f7       	brne	.-22     	; 0x5f88 <__mulsf3_pse+0x64>
    5f9e:	9e 3f       	cpi	r25, 0xFE	; 254
    5fa0:	51 05       	cpc	r21, r1
    5fa2:	70 f0       	brcs	.+28     	; 0x5fc0 <__mulsf3_pse+0x9c>
    5fa4:	60 cf       	rjmp	.-320    	; 0x5e66 <__fp_inf>
    5fa6:	aa cf       	rjmp	.-172    	; 0x5efc <__fp_szero>
    5fa8:	5f 3f       	cpi	r21, 0xFF	; 255
    5faa:	ec f3       	brlt	.-6      	; 0x5fa6 <__mulsf3_pse+0x82>
    5fac:	98 3e       	cpi	r25, 0xE8	; 232
    5fae:	dc f3       	brlt	.-10     	; 0x5fa6 <__mulsf3_pse+0x82>
    5fb0:	86 95       	lsr	r24
    5fb2:	77 95       	ror	r23
    5fb4:	67 95       	ror	r22
    5fb6:	b7 95       	ror	r27
    5fb8:	f7 95       	ror	r31
    5fba:	e7 95       	ror	r30
    5fbc:	9f 5f       	subi	r25, 0xFF	; 255
    5fbe:	c1 f7       	brne	.-16     	; 0x5fb0 <__mulsf3_pse+0x8c>
    5fc0:	fe 2b       	or	r31, r30
    5fc2:	88 0f       	add	r24, r24
    5fc4:	91 1d       	adc	r25, r1
    5fc6:	96 95       	lsr	r25
    5fc8:	87 95       	ror	r24
    5fca:	97 f9       	bld	r25, 7
    5fcc:	08 95       	ret

00005fce <vfprintf>:
    5fce:	2f 92       	push	r2
    5fd0:	3f 92       	push	r3
    5fd2:	4f 92       	push	r4
    5fd4:	5f 92       	push	r5
    5fd6:	6f 92       	push	r6
    5fd8:	7f 92       	push	r7
    5fda:	8f 92       	push	r8
    5fdc:	9f 92       	push	r9
    5fde:	af 92       	push	r10
    5fe0:	bf 92       	push	r11
    5fe2:	cf 92       	push	r12
    5fe4:	df 92       	push	r13
    5fe6:	ef 92       	push	r14
    5fe8:	ff 92       	push	r15
    5fea:	0f 93       	push	r16
    5fec:	1f 93       	push	r17
    5fee:	cf 93       	push	r28
    5ff0:	df 93       	push	r29
    5ff2:	cd b7       	in	r28, 0x3d	; 61
    5ff4:	de b7       	in	r29, 0x3e	; 62
    5ff6:	60 97       	sbiw	r28, 0x10	; 16
    5ff8:	0f b6       	in	r0, 0x3f	; 63
    5ffa:	f8 94       	cli
    5ffc:	de bf       	out	0x3e, r29	; 62
    5ffe:	0f be       	out	0x3f, r0	; 63
    6000:	cd bf       	out	0x3d, r28	; 61
    6002:	7c 01       	movw	r14, r24
    6004:	1b 01       	movw	r2, r22
    6006:	6a 01       	movw	r12, r20
    6008:	fc 01       	movw	r30, r24
    600a:	17 82       	std	Z+7, r1	; 0x07
    600c:	16 82       	std	Z+6, r1	; 0x06
    600e:	83 81       	ldd	r24, Z+3	; 0x03
    6010:	81 ff       	sbrs	r24, 1
    6012:	2a c3       	rjmp	.+1620   	; 0x6668 <vfprintf+0x69a>
    6014:	9e 01       	movw	r18, r28
    6016:	2f 5f       	subi	r18, 0xFF	; 255
    6018:	3f 4f       	sbci	r19, 0xFF	; 255
    601a:	39 01       	movw	r6, r18
    601c:	f7 01       	movw	r30, r14
    601e:	93 81       	ldd	r25, Z+3	; 0x03
    6020:	f1 01       	movw	r30, r2
    6022:	93 fd       	sbrc	r25, 3
    6024:	85 91       	lpm	r24, Z+
    6026:	93 ff       	sbrs	r25, 3
    6028:	81 91       	ld	r24, Z+
    602a:	1f 01       	movw	r2, r30
    602c:	88 23       	and	r24, r24
    602e:	09 f4       	brne	.+2      	; 0x6032 <vfprintf+0x64>
    6030:	17 c3       	rjmp	.+1582   	; 0x6660 <vfprintf+0x692>
    6032:	85 32       	cpi	r24, 0x25	; 37
    6034:	39 f4       	brne	.+14     	; 0x6044 <vfprintf+0x76>
    6036:	93 fd       	sbrc	r25, 3
    6038:	85 91       	lpm	r24, Z+
    603a:	93 ff       	sbrs	r25, 3
    603c:	81 91       	ld	r24, Z+
    603e:	1f 01       	movw	r2, r30
    6040:	85 32       	cpi	r24, 0x25	; 37
    6042:	31 f4       	brne	.+12     	; 0x6050 <vfprintf+0x82>
    6044:	b7 01       	movw	r22, r14
    6046:	90 e0       	ldi	r25, 0x00	; 0
    6048:	1d d6       	rcall	.+3130   	; 0x6c84 <fputc>
    604a:	56 01       	movw	r10, r12
    604c:	65 01       	movw	r12, r10
    604e:	e6 cf       	rjmp	.-52     	; 0x601c <vfprintf+0x4e>
    6050:	10 e0       	ldi	r17, 0x00	; 0
    6052:	51 2c       	mov	r5, r1
    6054:	91 2c       	mov	r9, r1
    6056:	ff e1       	ldi	r31, 0x1F	; 31
    6058:	f9 15       	cp	r31, r9
    605a:	d8 f0       	brcs	.+54     	; 0x6092 <vfprintf+0xc4>
    605c:	8b 32       	cpi	r24, 0x2B	; 43
    605e:	79 f0       	breq	.+30     	; 0x607e <vfprintf+0xb0>
    6060:	38 f4       	brcc	.+14     	; 0x6070 <vfprintf+0xa2>
    6062:	80 32       	cpi	r24, 0x20	; 32
    6064:	79 f0       	breq	.+30     	; 0x6084 <vfprintf+0xb6>
    6066:	83 32       	cpi	r24, 0x23	; 35
    6068:	a1 f4       	brne	.+40     	; 0x6092 <vfprintf+0xc4>
    606a:	f9 2d       	mov	r31, r9
    606c:	f0 61       	ori	r31, 0x10	; 16
    606e:	2e c0       	rjmp	.+92     	; 0x60cc <vfprintf+0xfe>
    6070:	8d 32       	cpi	r24, 0x2D	; 45
    6072:	61 f0       	breq	.+24     	; 0x608c <vfprintf+0xbe>
    6074:	80 33       	cpi	r24, 0x30	; 48
    6076:	69 f4       	brne	.+26     	; 0x6092 <vfprintf+0xc4>
    6078:	29 2d       	mov	r18, r9
    607a:	21 60       	ori	r18, 0x01	; 1
    607c:	2d c0       	rjmp	.+90     	; 0x60d8 <vfprintf+0x10a>
    607e:	39 2d       	mov	r19, r9
    6080:	32 60       	ori	r19, 0x02	; 2
    6082:	93 2e       	mov	r9, r19
    6084:	89 2d       	mov	r24, r9
    6086:	84 60       	ori	r24, 0x04	; 4
    6088:	98 2e       	mov	r9, r24
    608a:	2a c0       	rjmp	.+84     	; 0x60e0 <vfprintf+0x112>
    608c:	e9 2d       	mov	r30, r9
    608e:	e8 60       	ori	r30, 0x08	; 8
    6090:	15 c0       	rjmp	.+42     	; 0x60bc <vfprintf+0xee>
    6092:	97 fc       	sbrc	r9, 7
    6094:	2d c0       	rjmp	.+90     	; 0x60f0 <vfprintf+0x122>
    6096:	20 ed       	ldi	r18, 0xD0	; 208
    6098:	28 0f       	add	r18, r24
    609a:	2a 30       	cpi	r18, 0x0A	; 10
    609c:	88 f4       	brcc	.+34     	; 0x60c0 <vfprintf+0xf2>
    609e:	96 fe       	sbrs	r9, 6
    60a0:	06 c0       	rjmp	.+12     	; 0x60ae <vfprintf+0xe0>
    60a2:	3a e0       	ldi	r19, 0x0A	; 10
    60a4:	13 9f       	mul	r17, r19
    60a6:	20 0d       	add	r18, r0
    60a8:	11 24       	eor	r1, r1
    60aa:	12 2f       	mov	r17, r18
    60ac:	19 c0       	rjmp	.+50     	; 0x60e0 <vfprintf+0x112>
    60ae:	8a e0       	ldi	r24, 0x0A	; 10
    60b0:	58 9e       	mul	r5, r24
    60b2:	20 0d       	add	r18, r0
    60b4:	11 24       	eor	r1, r1
    60b6:	52 2e       	mov	r5, r18
    60b8:	e9 2d       	mov	r30, r9
    60ba:	e0 62       	ori	r30, 0x20	; 32
    60bc:	9e 2e       	mov	r9, r30
    60be:	10 c0       	rjmp	.+32     	; 0x60e0 <vfprintf+0x112>
    60c0:	8e 32       	cpi	r24, 0x2E	; 46
    60c2:	31 f4       	brne	.+12     	; 0x60d0 <vfprintf+0x102>
    60c4:	96 fc       	sbrc	r9, 6
    60c6:	cc c2       	rjmp	.+1432   	; 0x6660 <vfprintf+0x692>
    60c8:	f9 2d       	mov	r31, r9
    60ca:	f0 64       	ori	r31, 0x40	; 64
    60cc:	9f 2e       	mov	r9, r31
    60ce:	08 c0       	rjmp	.+16     	; 0x60e0 <vfprintf+0x112>
    60d0:	8c 36       	cpi	r24, 0x6C	; 108
    60d2:	21 f4       	brne	.+8      	; 0x60dc <vfprintf+0x10e>
    60d4:	29 2d       	mov	r18, r9
    60d6:	20 68       	ori	r18, 0x80	; 128
    60d8:	92 2e       	mov	r9, r18
    60da:	02 c0       	rjmp	.+4      	; 0x60e0 <vfprintf+0x112>
    60dc:	88 36       	cpi	r24, 0x68	; 104
    60de:	41 f4       	brne	.+16     	; 0x60f0 <vfprintf+0x122>
    60e0:	f1 01       	movw	r30, r2
    60e2:	93 fd       	sbrc	r25, 3
    60e4:	85 91       	lpm	r24, Z+
    60e6:	93 ff       	sbrs	r25, 3
    60e8:	81 91       	ld	r24, Z+
    60ea:	1f 01       	movw	r2, r30
    60ec:	81 11       	cpse	r24, r1
    60ee:	b3 cf       	rjmp	.-154    	; 0x6056 <vfprintf+0x88>
    60f0:	9b eb       	ldi	r25, 0xBB	; 187
    60f2:	98 0f       	add	r25, r24
    60f4:	93 30       	cpi	r25, 0x03	; 3
    60f6:	20 f4       	brcc	.+8      	; 0x6100 <vfprintf+0x132>
    60f8:	99 2d       	mov	r25, r9
    60fa:	90 61       	ori	r25, 0x10	; 16
    60fc:	80 5e       	subi	r24, 0xE0	; 224
    60fe:	07 c0       	rjmp	.+14     	; 0x610e <vfprintf+0x140>
    6100:	9b e9       	ldi	r25, 0x9B	; 155
    6102:	98 0f       	add	r25, r24
    6104:	93 30       	cpi	r25, 0x03	; 3
    6106:	08 f0       	brcs	.+2      	; 0x610a <vfprintf+0x13c>
    6108:	59 c1       	rjmp	.+690    	; 0x63bc <vfprintf+0x3ee>
    610a:	99 2d       	mov	r25, r9
    610c:	9f 7e       	andi	r25, 0xEF	; 239
    610e:	96 ff       	sbrs	r25, 6
    6110:	16 e0       	ldi	r17, 0x06	; 6
    6112:	9f 73       	andi	r25, 0x3F	; 63
    6114:	99 2e       	mov	r9, r25
    6116:	85 36       	cpi	r24, 0x65	; 101
    6118:	19 f4       	brne	.+6      	; 0x6120 <vfprintf+0x152>
    611a:	90 64       	ori	r25, 0x40	; 64
    611c:	99 2e       	mov	r9, r25
    611e:	08 c0       	rjmp	.+16     	; 0x6130 <vfprintf+0x162>
    6120:	86 36       	cpi	r24, 0x66	; 102
    6122:	21 f4       	brne	.+8      	; 0x612c <vfprintf+0x15e>
    6124:	39 2f       	mov	r19, r25
    6126:	30 68       	ori	r19, 0x80	; 128
    6128:	93 2e       	mov	r9, r19
    612a:	02 c0       	rjmp	.+4      	; 0x6130 <vfprintf+0x162>
    612c:	11 11       	cpse	r17, r1
    612e:	11 50       	subi	r17, 0x01	; 1
    6130:	97 fe       	sbrs	r9, 7
    6132:	07 c0       	rjmp	.+14     	; 0x6142 <vfprintf+0x174>
    6134:	1c 33       	cpi	r17, 0x3C	; 60
    6136:	50 f4       	brcc	.+20     	; 0x614c <vfprintf+0x17e>
    6138:	44 24       	eor	r4, r4
    613a:	43 94       	inc	r4
    613c:	41 0e       	add	r4, r17
    613e:	27 e0       	ldi	r18, 0x07	; 7
    6140:	0b c0       	rjmp	.+22     	; 0x6158 <vfprintf+0x18a>
    6142:	18 30       	cpi	r17, 0x08	; 8
    6144:	38 f0       	brcs	.+14     	; 0x6154 <vfprintf+0x186>
    6146:	27 e0       	ldi	r18, 0x07	; 7
    6148:	17 e0       	ldi	r17, 0x07	; 7
    614a:	05 c0       	rjmp	.+10     	; 0x6156 <vfprintf+0x188>
    614c:	27 e0       	ldi	r18, 0x07	; 7
    614e:	9c e3       	ldi	r25, 0x3C	; 60
    6150:	49 2e       	mov	r4, r25
    6152:	02 c0       	rjmp	.+4      	; 0x6158 <vfprintf+0x18a>
    6154:	21 2f       	mov	r18, r17
    6156:	41 2c       	mov	r4, r1
    6158:	56 01       	movw	r10, r12
    615a:	84 e0       	ldi	r24, 0x04	; 4
    615c:	a8 0e       	add	r10, r24
    615e:	b1 1c       	adc	r11, r1
    6160:	f6 01       	movw	r30, r12
    6162:	60 81       	ld	r22, Z
    6164:	71 81       	ldd	r23, Z+1	; 0x01
    6166:	82 81       	ldd	r24, Z+2	; 0x02
    6168:	93 81       	ldd	r25, Z+3	; 0x03
    616a:	04 2d       	mov	r16, r4
    616c:	a3 01       	movw	r20, r6
    616e:	3d d4       	rcall	.+2170   	; 0x69ea <__ftoa_engine>
    6170:	6c 01       	movw	r12, r24
    6172:	f9 81       	ldd	r31, Y+1	; 0x01
    6174:	fc 87       	std	Y+12, r31	; 0x0c
    6176:	f0 ff       	sbrs	r31, 0
    6178:	02 c0       	rjmp	.+4      	; 0x617e <vfprintf+0x1b0>
    617a:	f3 ff       	sbrs	r31, 3
    617c:	06 c0       	rjmp	.+12     	; 0x618a <vfprintf+0x1bc>
    617e:	91 fc       	sbrc	r9, 1
    6180:	06 c0       	rjmp	.+12     	; 0x618e <vfprintf+0x1c0>
    6182:	92 fe       	sbrs	r9, 2
    6184:	06 c0       	rjmp	.+12     	; 0x6192 <vfprintf+0x1c4>
    6186:	00 e2       	ldi	r16, 0x20	; 32
    6188:	05 c0       	rjmp	.+10     	; 0x6194 <vfprintf+0x1c6>
    618a:	0d e2       	ldi	r16, 0x2D	; 45
    618c:	03 c0       	rjmp	.+6      	; 0x6194 <vfprintf+0x1c6>
    618e:	0b e2       	ldi	r16, 0x2B	; 43
    6190:	01 c0       	rjmp	.+2      	; 0x6194 <vfprintf+0x1c6>
    6192:	00 e0       	ldi	r16, 0x00	; 0
    6194:	8c 85       	ldd	r24, Y+12	; 0x0c
    6196:	8c 70       	andi	r24, 0x0C	; 12
    6198:	19 f0       	breq	.+6      	; 0x61a0 <vfprintf+0x1d2>
    619a:	01 11       	cpse	r16, r1
    619c:	43 c2       	rjmp	.+1158   	; 0x6624 <vfprintf+0x656>
    619e:	80 c2       	rjmp	.+1280   	; 0x66a0 <vfprintf+0x6d2>
    61a0:	97 fe       	sbrs	r9, 7
    61a2:	10 c0       	rjmp	.+32     	; 0x61c4 <vfprintf+0x1f6>
    61a4:	4c 0c       	add	r4, r12
    61a6:	fc 85       	ldd	r31, Y+12	; 0x0c
    61a8:	f4 ff       	sbrs	r31, 4
    61aa:	04 c0       	rjmp	.+8      	; 0x61b4 <vfprintf+0x1e6>
    61ac:	8a 81       	ldd	r24, Y+2	; 0x02
    61ae:	81 33       	cpi	r24, 0x31	; 49
    61b0:	09 f4       	brne	.+2      	; 0x61b4 <vfprintf+0x1e6>
    61b2:	4a 94       	dec	r4
    61b4:	14 14       	cp	r1, r4
    61b6:	74 f5       	brge	.+92     	; 0x6214 <vfprintf+0x246>
    61b8:	28 e0       	ldi	r18, 0x08	; 8
    61ba:	24 15       	cp	r18, r4
    61bc:	78 f5       	brcc	.+94     	; 0x621c <vfprintf+0x24e>
    61be:	88 e0       	ldi	r24, 0x08	; 8
    61c0:	48 2e       	mov	r4, r24
    61c2:	2c c0       	rjmp	.+88     	; 0x621c <vfprintf+0x24e>
    61c4:	96 fc       	sbrc	r9, 6
    61c6:	2a c0       	rjmp	.+84     	; 0x621c <vfprintf+0x24e>
    61c8:	81 2f       	mov	r24, r17
    61ca:	90 e0       	ldi	r25, 0x00	; 0
    61cc:	8c 15       	cp	r24, r12
    61ce:	9d 05       	cpc	r25, r13
    61d0:	9c f0       	brlt	.+38     	; 0x61f8 <vfprintf+0x22a>
    61d2:	3c ef       	ldi	r19, 0xFC	; 252
    61d4:	c3 16       	cp	r12, r19
    61d6:	3f ef       	ldi	r19, 0xFF	; 255
    61d8:	d3 06       	cpc	r13, r19
    61da:	74 f0       	brlt	.+28     	; 0x61f8 <vfprintf+0x22a>
    61dc:	89 2d       	mov	r24, r9
    61de:	80 68       	ori	r24, 0x80	; 128
    61e0:	98 2e       	mov	r9, r24
    61e2:	0a c0       	rjmp	.+20     	; 0x61f8 <vfprintf+0x22a>
    61e4:	e2 e0       	ldi	r30, 0x02	; 2
    61e6:	f0 e0       	ldi	r31, 0x00	; 0
    61e8:	ec 0f       	add	r30, r28
    61ea:	fd 1f       	adc	r31, r29
    61ec:	e1 0f       	add	r30, r17
    61ee:	f1 1d       	adc	r31, r1
    61f0:	80 81       	ld	r24, Z
    61f2:	80 33       	cpi	r24, 0x30	; 48
    61f4:	19 f4       	brne	.+6      	; 0x61fc <vfprintf+0x22e>
    61f6:	11 50       	subi	r17, 0x01	; 1
    61f8:	11 11       	cpse	r17, r1
    61fa:	f4 cf       	rjmp	.-24     	; 0x61e4 <vfprintf+0x216>
    61fc:	97 fe       	sbrs	r9, 7
    61fe:	0e c0       	rjmp	.+28     	; 0x621c <vfprintf+0x24e>
    6200:	44 24       	eor	r4, r4
    6202:	43 94       	inc	r4
    6204:	41 0e       	add	r4, r17
    6206:	81 2f       	mov	r24, r17
    6208:	90 e0       	ldi	r25, 0x00	; 0
    620a:	c8 16       	cp	r12, r24
    620c:	d9 06       	cpc	r13, r25
    620e:	2c f4       	brge	.+10     	; 0x621a <vfprintf+0x24c>
    6210:	1c 19       	sub	r17, r12
    6212:	04 c0       	rjmp	.+8      	; 0x621c <vfprintf+0x24e>
    6214:	44 24       	eor	r4, r4
    6216:	43 94       	inc	r4
    6218:	01 c0       	rjmp	.+2      	; 0x621c <vfprintf+0x24e>
    621a:	10 e0       	ldi	r17, 0x00	; 0
    621c:	97 fe       	sbrs	r9, 7
    621e:	06 c0       	rjmp	.+12     	; 0x622c <vfprintf+0x25e>
    6220:	1c 14       	cp	r1, r12
    6222:	1d 04       	cpc	r1, r13
    6224:	34 f4       	brge	.+12     	; 0x6232 <vfprintf+0x264>
    6226:	c6 01       	movw	r24, r12
    6228:	01 96       	adiw	r24, 0x01	; 1
    622a:	05 c0       	rjmp	.+10     	; 0x6236 <vfprintf+0x268>
    622c:	85 e0       	ldi	r24, 0x05	; 5
    622e:	90 e0       	ldi	r25, 0x00	; 0
    6230:	02 c0       	rjmp	.+4      	; 0x6236 <vfprintf+0x268>
    6232:	81 e0       	ldi	r24, 0x01	; 1
    6234:	90 e0       	ldi	r25, 0x00	; 0
    6236:	01 11       	cpse	r16, r1
    6238:	01 96       	adiw	r24, 0x01	; 1
    623a:	11 23       	and	r17, r17
    623c:	31 f0       	breq	.+12     	; 0x624a <vfprintf+0x27c>
    623e:	21 2f       	mov	r18, r17
    6240:	30 e0       	ldi	r19, 0x00	; 0
    6242:	2f 5f       	subi	r18, 0xFF	; 255
    6244:	3f 4f       	sbci	r19, 0xFF	; 255
    6246:	82 0f       	add	r24, r18
    6248:	93 1f       	adc	r25, r19
    624a:	25 2d       	mov	r18, r5
    624c:	30 e0       	ldi	r19, 0x00	; 0
    624e:	82 17       	cp	r24, r18
    6250:	93 07       	cpc	r25, r19
    6252:	14 f4       	brge	.+4      	; 0x6258 <vfprintf+0x28a>
    6254:	58 1a       	sub	r5, r24
    6256:	01 c0       	rjmp	.+2      	; 0x625a <vfprintf+0x28c>
    6258:	51 2c       	mov	r5, r1
    625a:	89 2d       	mov	r24, r9
    625c:	89 70       	andi	r24, 0x09	; 9
    625e:	41 f4       	brne	.+16     	; 0x6270 <vfprintf+0x2a2>
    6260:	55 20       	and	r5, r5
    6262:	31 f0       	breq	.+12     	; 0x6270 <vfprintf+0x2a2>
    6264:	b7 01       	movw	r22, r14
    6266:	80 e2       	ldi	r24, 0x20	; 32
    6268:	90 e0       	ldi	r25, 0x00	; 0
    626a:	0c d5       	rcall	.+2584   	; 0x6c84 <fputc>
    626c:	5a 94       	dec	r5
    626e:	f8 cf       	rjmp	.-16     	; 0x6260 <vfprintf+0x292>
    6270:	00 23       	and	r16, r16
    6272:	21 f0       	breq	.+8      	; 0x627c <vfprintf+0x2ae>
    6274:	b7 01       	movw	r22, r14
    6276:	80 2f       	mov	r24, r16
    6278:	90 e0       	ldi	r25, 0x00	; 0
    627a:	04 d5       	rcall	.+2568   	; 0x6c84 <fputc>
    627c:	93 fc       	sbrc	r9, 3
    627e:	08 c0       	rjmp	.+16     	; 0x6290 <vfprintf+0x2c2>
    6280:	55 20       	and	r5, r5
    6282:	31 f0       	breq	.+12     	; 0x6290 <vfprintf+0x2c2>
    6284:	b7 01       	movw	r22, r14
    6286:	80 e3       	ldi	r24, 0x30	; 48
    6288:	90 e0       	ldi	r25, 0x00	; 0
    628a:	fc d4       	rcall	.+2552   	; 0x6c84 <fputc>
    628c:	5a 94       	dec	r5
    628e:	f8 cf       	rjmp	.-16     	; 0x6280 <vfprintf+0x2b2>
    6290:	97 fe       	sbrs	r9, 7
    6292:	4a c0       	rjmp	.+148    	; 0x6328 <vfprintf+0x35a>
    6294:	46 01       	movw	r8, r12
    6296:	d7 fe       	sbrs	r13, 7
    6298:	02 c0       	rjmp	.+4      	; 0x629e <vfprintf+0x2d0>
    629a:	81 2c       	mov	r8, r1
    629c:	91 2c       	mov	r9, r1
    629e:	c6 01       	movw	r24, r12
    62a0:	88 19       	sub	r24, r8
    62a2:	99 09       	sbc	r25, r9
    62a4:	f3 01       	movw	r30, r6
    62a6:	e8 0f       	add	r30, r24
    62a8:	f9 1f       	adc	r31, r25
    62aa:	fe 87       	std	Y+14, r31	; 0x0e
    62ac:	ed 87       	std	Y+13, r30	; 0x0d
    62ae:	96 01       	movw	r18, r12
    62b0:	24 19       	sub	r18, r4
    62b2:	31 09       	sbc	r19, r1
    62b4:	38 8b       	std	Y+16, r19	; 0x10
    62b6:	2f 87       	std	Y+15, r18	; 0x0f
    62b8:	01 2f       	mov	r16, r17
    62ba:	10 e0       	ldi	r17, 0x00	; 0
    62bc:	11 95       	neg	r17
    62be:	01 95       	neg	r16
    62c0:	11 09       	sbc	r17, r1
    62c2:	3f ef       	ldi	r19, 0xFF	; 255
    62c4:	83 16       	cp	r8, r19
    62c6:	93 06       	cpc	r9, r19
    62c8:	21 f4       	brne	.+8      	; 0x62d2 <vfprintf+0x304>
    62ca:	b7 01       	movw	r22, r14
    62cc:	8e e2       	ldi	r24, 0x2E	; 46
    62ce:	90 e0       	ldi	r25, 0x00	; 0
    62d0:	d9 d4       	rcall	.+2482   	; 0x6c84 <fputc>
    62d2:	c8 14       	cp	r12, r8
    62d4:	d9 04       	cpc	r13, r9
    62d6:	4c f0       	brlt	.+18     	; 0x62ea <vfprintf+0x31c>
    62d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    62da:	98 89       	ldd	r25, Y+16	; 0x10
    62dc:	88 15       	cp	r24, r8
    62de:	99 05       	cpc	r25, r9
    62e0:	24 f4       	brge	.+8      	; 0x62ea <vfprintf+0x31c>
    62e2:	ed 85       	ldd	r30, Y+13	; 0x0d
    62e4:	fe 85       	ldd	r31, Y+14	; 0x0e
    62e6:	81 81       	ldd	r24, Z+1	; 0x01
    62e8:	01 c0       	rjmp	.+2      	; 0x62ec <vfprintf+0x31e>
    62ea:	80 e3       	ldi	r24, 0x30	; 48
    62ec:	f1 e0       	ldi	r31, 0x01	; 1
    62ee:	8f 1a       	sub	r8, r31
    62f0:	91 08       	sbc	r9, r1
    62f2:	2d 85       	ldd	r18, Y+13	; 0x0d
    62f4:	3e 85       	ldd	r19, Y+14	; 0x0e
    62f6:	2f 5f       	subi	r18, 0xFF	; 255
    62f8:	3f 4f       	sbci	r19, 0xFF	; 255
    62fa:	3e 87       	std	Y+14, r19	; 0x0e
    62fc:	2d 87       	std	Y+13, r18	; 0x0d
    62fe:	80 16       	cp	r8, r16
    6300:	91 06       	cpc	r9, r17
    6302:	24 f0       	brlt	.+8      	; 0x630c <vfprintf+0x33e>
    6304:	b7 01       	movw	r22, r14
    6306:	90 e0       	ldi	r25, 0x00	; 0
    6308:	bd d4       	rcall	.+2426   	; 0x6c84 <fputc>
    630a:	db cf       	rjmp	.-74     	; 0x62c2 <vfprintf+0x2f4>
    630c:	c8 14       	cp	r12, r8
    630e:	d9 04       	cpc	r13, r9
    6310:	41 f4       	brne	.+16     	; 0x6322 <vfprintf+0x354>
    6312:	9a 81       	ldd	r25, Y+2	; 0x02
    6314:	96 33       	cpi	r25, 0x36	; 54
    6316:	20 f4       	brcc	.+8      	; 0x6320 <vfprintf+0x352>
    6318:	95 33       	cpi	r25, 0x35	; 53
    631a:	19 f4       	brne	.+6      	; 0x6322 <vfprintf+0x354>
    631c:	3c 85       	ldd	r19, Y+12	; 0x0c
    631e:	34 ff       	sbrs	r19, 4
    6320:	81 e3       	ldi	r24, 0x31	; 49
    6322:	b7 01       	movw	r22, r14
    6324:	90 e0       	ldi	r25, 0x00	; 0
    6326:	48 c0       	rjmp	.+144    	; 0x63b8 <vfprintf+0x3ea>
    6328:	8a 81       	ldd	r24, Y+2	; 0x02
    632a:	81 33       	cpi	r24, 0x31	; 49
    632c:	19 f0       	breq	.+6      	; 0x6334 <vfprintf+0x366>
    632e:	9c 85       	ldd	r25, Y+12	; 0x0c
    6330:	9f 7e       	andi	r25, 0xEF	; 239
    6332:	9c 87       	std	Y+12, r25	; 0x0c
    6334:	b7 01       	movw	r22, r14
    6336:	90 e0       	ldi	r25, 0x00	; 0
    6338:	a5 d4       	rcall	.+2378   	; 0x6c84 <fputc>
    633a:	11 11       	cpse	r17, r1
    633c:	05 c0       	rjmp	.+10     	; 0x6348 <vfprintf+0x37a>
    633e:	94 fc       	sbrc	r9, 4
    6340:	16 c0       	rjmp	.+44     	; 0x636e <vfprintf+0x3a0>
    6342:	85 e6       	ldi	r24, 0x65	; 101
    6344:	90 e0       	ldi	r25, 0x00	; 0
    6346:	15 c0       	rjmp	.+42     	; 0x6372 <vfprintf+0x3a4>
    6348:	b7 01       	movw	r22, r14
    634a:	8e e2       	ldi	r24, 0x2E	; 46
    634c:	90 e0       	ldi	r25, 0x00	; 0
    634e:	9a d4       	rcall	.+2356   	; 0x6c84 <fputc>
    6350:	1e 5f       	subi	r17, 0xFE	; 254
    6352:	82 e0       	ldi	r24, 0x02	; 2
    6354:	01 e0       	ldi	r16, 0x01	; 1
    6356:	08 0f       	add	r16, r24
    6358:	f3 01       	movw	r30, r6
    635a:	e8 0f       	add	r30, r24
    635c:	f1 1d       	adc	r31, r1
    635e:	80 81       	ld	r24, Z
    6360:	b7 01       	movw	r22, r14
    6362:	90 e0       	ldi	r25, 0x00	; 0
    6364:	8f d4       	rcall	.+2334   	; 0x6c84 <fputc>
    6366:	80 2f       	mov	r24, r16
    6368:	01 13       	cpse	r16, r17
    636a:	f4 cf       	rjmp	.-24     	; 0x6354 <vfprintf+0x386>
    636c:	e8 cf       	rjmp	.-48     	; 0x633e <vfprintf+0x370>
    636e:	85 e4       	ldi	r24, 0x45	; 69
    6370:	90 e0       	ldi	r25, 0x00	; 0
    6372:	b7 01       	movw	r22, r14
    6374:	87 d4       	rcall	.+2318   	; 0x6c84 <fputc>
    6376:	d7 fc       	sbrc	r13, 7
    6378:	06 c0       	rjmp	.+12     	; 0x6386 <vfprintf+0x3b8>
    637a:	c1 14       	cp	r12, r1
    637c:	d1 04       	cpc	r13, r1
    637e:	41 f4       	brne	.+16     	; 0x6390 <vfprintf+0x3c2>
    6380:	ec 85       	ldd	r30, Y+12	; 0x0c
    6382:	e4 ff       	sbrs	r30, 4
    6384:	05 c0       	rjmp	.+10     	; 0x6390 <vfprintf+0x3c2>
    6386:	d1 94       	neg	r13
    6388:	c1 94       	neg	r12
    638a:	d1 08       	sbc	r13, r1
    638c:	8d e2       	ldi	r24, 0x2D	; 45
    638e:	01 c0       	rjmp	.+2      	; 0x6392 <vfprintf+0x3c4>
    6390:	8b e2       	ldi	r24, 0x2B	; 43
    6392:	b7 01       	movw	r22, r14
    6394:	90 e0       	ldi	r25, 0x00	; 0
    6396:	76 d4       	rcall	.+2284   	; 0x6c84 <fputc>
    6398:	80 e3       	ldi	r24, 0x30	; 48
    639a:	2a e0       	ldi	r18, 0x0A	; 10
    639c:	c2 16       	cp	r12, r18
    639e:	d1 04       	cpc	r13, r1
    63a0:	2c f0       	brlt	.+10     	; 0x63ac <vfprintf+0x3de>
    63a2:	8f 5f       	subi	r24, 0xFF	; 255
    63a4:	fa e0       	ldi	r31, 0x0A	; 10
    63a6:	cf 1a       	sub	r12, r31
    63a8:	d1 08       	sbc	r13, r1
    63aa:	f7 cf       	rjmp	.-18     	; 0x639a <vfprintf+0x3cc>
    63ac:	b7 01       	movw	r22, r14
    63ae:	90 e0       	ldi	r25, 0x00	; 0
    63b0:	69 d4       	rcall	.+2258   	; 0x6c84 <fputc>
    63b2:	b7 01       	movw	r22, r14
    63b4:	c6 01       	movw	r24, r12
    63b6:	c0 96       	adiw	r24, 0x30	; 48
    63b8:	65 d4       	rcall	.+2250   	; 0x6c84 <fputc>
    63ba:	49 c1       	rjmp	.+658    	; 0x664e <vfprintf+0x680>
    63bc:	83 36       	cpi	r24, 0x63	; 99
    63be:	31 f0       	breq	.+12     	; 0x63cc <vfprintf+0x3fe>
    63c0:	83 37       	cpi	r24, 0x73	; 115
    63c2:	79 f0       	breq	.+30     	; 0x63e2 <vfprintf+0x414>
    63c4:	83 35       	cpi	r24, 0x53	; 83
    63c6:	09 f0       	breq	.+2      	; 0x63ca <vfprintf+0x3fc>
    63c8:	52 c0       	rjmp	.+164    	; 0x646e <vfprintf+0x4a0>
    63ca:	1f c0       	rjmp	.+62     	; 0x640a <vfprintf+0x43c>
    63cc:	56 01       	movw	r10, r12
    63ce:	32 e0       	ldi	r19, 0x02	; 2
    63d0:	a3 0e       	add	r10, r19
    63d2:	b1 1c       	adc	r11, r1
    63d4:	f6 01       	movw	r30, r12
    63d6:	80 81       	ld	r24, Z
    63d8:	89 83       	std	Y+1, r24	; 0x01
    63da:	01 e0       	ldi	r16, 0x01	; 1
    63dc:	10 e0       	ldi	r17, 0x00	; 0
    63de:	63 01       	movw	r12, r6
    63e0:	11 c0       	rjmp	.+34     	; 0x6404 <vfprintf+0x436>
    63e2:	56 01       	movw	r10, r12
    63e4:	f2 e0       	ldi	r31, 0x02	; 2
    63e6:	af 0e       	add	r10, r31
    63e8:	b1 1c       	adc	r11, r1
    63ea:	f6 01       	movw	r30, r12
    63ec:	c0 80       	ld	r12, Z
    63ee:	d1 80       	ldd	r13, Z+1	; 0x01
    63f0:	96 fe       	sbrs	r9, 6
    63f2:	03 c0       	rjmp	.+6      	; 0x63fa <vfprintf+0x42c>
    63f4:	61 2f       	mov	r22, r17
    63f6:	70 e0       	ldi	r23, 0x00	; 0
    63f8:	02 c0       	rjmp	.+4      	; 0x63fe <vfprintf+0x430>
    63fa:	6f ef       	ldi	r22, 0xFF	; 255
    63fc:	7f ef       	ldi	r23, 0xFF	; 255
    63fe:	c6 01       	movw	r24, r12
    6400:	36 d4       	rcall	.+2156   	; 0x6c6e <strnlen>
    6402:	8c 01       	movw	r16, r24
    6404:	f9 2d       	mov	r31, r9
    6406:	ff 77       	andi	r31, 0x7F	; 127
    6408:	13 c0       	rjmp	.+38     	; 0x6430 <vfprintf+0x462>
    640a:	56 01       	movw	r10, r12
    640c:	22 e0       	ldi	r18, 0x02	; 2
    640e:	a2 0e       	add	r10, r18
    6410:	b1 1c       	adc	r11, r1
    6412:	f6 01       	movw	r30, r12
    6414:	c0 80       	ld	r12, Z
    6416:	d1 80       	ldd	r13, Z+1	; 0x01
    6418:	96 fe       	sbrs	r9, 6
    641a:	03 c0       	rjmp	.+6      	; 0x6422 <vfprintf+0x454>
    641c:	61 2f       	mov	r22, r17
    641e:	70 e0       	ldi	r23, 0x00	; 0
    6420:	02 c0       	rjmp	.+4      	; 0x6426 <vfprintf+0x458>
    6422:	6f ef       	ldi	r22, 0xFF	; 255
    6424:	7f ef       	ldi	r23, 0xFF	; 255
    6426:	c6 01       	movw	r24, r12
    6428:	b8 d3       	rcall	.+1904   	; 0x6b9a <strnlen_P>
    642a:	8c 01       	movw	r16, r24
    642c:	f9 2d       	mov	r31, r9
    642e:	f0 68       	ori	r31, 0x80	; 128
    6430:	9f 2e       	mov	r9, r31
    6432:	f3 fd       	sbrc	r31, 3
    6434:	18 c0       	rjmp	.+48     	; 0x6466 <vfprintf+0x498>
    6436:	85 2d       	mov	r24, r5
    6438:	90 e0       	ldi	r25, 0x00	; 0
    643a:	08 17       	cp	r16, r24
    643c:	19 07       	cpc	r17, r25
    643e:	98 f4       	brcc	.+38     	; 0x6466 <vfprintf+0x498>
    6440:	b7 01       	movw	r22, r14
    6442:	80 e2       	ldi	r24, 0x20	; 32
    6444:	90 e0       	ldi	r25, 0x00	; 0
    6446:	1e d4       	rcall	.+2108   	; 0x6c84 <fputc>
    6448:	5a 94       	dec	r5
    644a:	f5 cf       	rjmp	.-22     	; 0x6436 <vfprintf+0x468>
    644c:	f6 01       	movw	r30, r12
    644e:	97 fc       	sbrc	r9, 7
    6450:	85 91       	lpm	r24, Z+
    6452:	97 fe       	sbrs	r9, 7
    6454:	81 91       	ld	r24, Z+
    6456:	6f 01       	movw	r12, r30
    6458:	b7 01       	movw	r22, r14
    645a:	90 e0       	ldi	r25, 0x00	; 0
    645c:	13 d4       	rcall	.+2086   	; 0x6c84 <fputc>
    645e:	51 10       	cpse	r5, r1
    6460:	5a 94       	dec	r5
    6462:	01 50       	subi	r16, 0x01	; 1
    6464:	11 09       	sbc	r17, r1
    6466:	01 15       	cp	r16, r1
    6468:	11 05       	cpc	r17, r1
    646a:	81 f7       	brne	.-32     	; 0x644c <vfprintf+0x47e>
    646c:	f0 c0       	rjmp	.+480    	; 0x664e <vfprintf+0x680>
    646e:	84 36       	cpi	r24, 0x64	; 100
    6470:	11 f0       	breq	.+4      	; 0x6476 <vfprintf+0x4a8>
    6472:	89 36       	cpi	r24, 0x69	; 105
    6474:	59 f5       	brne	.+86     	; 0x64cc <vfprintf+0x4fe>
    6476:	56 01       	movw	r10, r12
    6478:	97 fe       	sbrs	r9, 7
    647a:	09 c0       	rjmp	.+18     	; 0x648e <vfprintf+0x4c0>
    647c:	24 e0       	ldi	r18, 0x04	; 4
    647e:	a2 0e       	add	r10, r18
    6480:	b1 1c       	adc	r11, r1
    6482:	f6 01       	movw	r30, r12
    6484:	60 81       	ld	r22, Z
    6486:	71 81       	ldd	r23, Z+1	; 0x01
    6488:	82 81       	ldd	r24, Z+2	; 0x02
    648a:	93 81       	ldd	r25, Z+3	; 0x03
    648c:	0a c0       	rjmp	.+20     	; 0x64a2 <vfprintf+0x4d4>
    648e:	f2 e0       	ldi	r31, 0x02	; 2
    6490:	af 0e       	add	r10, r31
    6492:	b1 1c       	adc	r11, r1
    6494:	f6 01       	movw	r30, r12
    6496:	60 81       	ld	r22, Z
    6498:	71 81       	ldd	r23, Z+1	; 0x01
    649a:	07 2e       	mov	r0, r23
    649c:	00 0c       	add	r0, r0
    649e:	88 0b       	sbc	r24, r24
    64a0:	99 0b       	sbc	r25, r25
    64a2:	f9 2d       	mov	r31, r9
    64a4:	ff 76       	andi	r31, 0x6F	; 111
    64a6:	9f 2e       	mov	r9, r31
    64a8:	97 ff       	sbrs	r25, 7
    64aa:	09 c0       	rjmp	.+18     	; 0x64be <vfprintf+0x4f0>
    64ac:	90 95       	com	r25
    64ae:	80 95       	com	r24
    64b0:	70 95       	com	r23
    64b2:	61 95       	neg	r22
    64b4:	7f 4f       	sbci	r23, 0xFF	; 255
    64b6:	8f 4f       	sbci	r24, 0xFF	; 255
    64b8:	9f 4f       	sbci	r25, 0xFF	; 255
    64ba:	f0 68       	ori	r31, 0x80	; 128
    64bc:	9f 2e       	mov	r9, r31
    64be:	2a e0       	ldi	r18, 0x0A	; 10
    64c0:	30 e0       	ldi	r19, 0x00	; 0
    64c2:	a3 01       	movw	r20, r6
    64c4:	8c d4       	rcall	.+2328   	; 0x6dde <__ultoa_invert>
    64c6:	c8 2e       	mov	r12, r24
    64c8:	c6 18       	sub	r12, r6
    64ca:	3e c0       	rjmp	.+124    	; 0x6548 <vfprintf+0x57a>
    64cc:	09 2d       	mov	r16, r9
    64ce:	85 37       	cpi	r24, 0x75	; 117
    64d0:	21 f4       	brne	.+8      	; 0x64da <vfprintf+0x50c>
    64d2:	0f 7e       	andi	r16, 0xEF	; 239
    64d4:	2a e0       	ldi	r18, 0x0A	; 10
    64d6:	30 e0       	ldi	r19, 0x00	; 0
    64d8:	1d c0       	rjmp	.+58     	; 0x6514 <vfprintf+0x546>
    64da:	09 7f       	andi	r16, 0xF9	; 249
    64dc:	8f 36       	cpi	r24, 0x6F	; 111
    64de:	91 f0       	breq	.+36     	; 0x6504 <vfprintf+0x536>
    64e0:	18 f4       	brcc	.+6      	; 0x64e8 <vfprintf+0x51a>
    64e2:	88 35       	cpi	r24, 0x58	; 88
    64e4:	59 f0       	breq	.+22     	; 0x64fc <vfprintf+0x52e>
    64e6:	bc c0       	rjmp	.+376    	; 0x6660 <vfprintf+0x692>
    64e8:	80 37       	cpi	r24, 0x70	; 112
    64ea:	19 f0       	breq	.+6      	; 0x64f2 <vfprintf+0x524>
    64ec:	88 37       	cpi	r24, 0x78	; 120
    64ee:	11 f0       	breq	.+4      	; 0x64f4 <vfprintf+0x526>
    64f0:	b7 c0       	rjmp	.+366    	; 0x6660 <vfprintf+0x692>
    64f2:	00 61       	ori	r16, 0x10	; 16
    64f4:	04 ff       	sbrs	r16, 4
    64f6:	09 c0       	rjmp	.+18     	; 0x650a <vfprintf+0x53c>
    64f8:	04 60       	ori	r16, 0x04	; 4
    64fa:	07 c0       	rjmp	.+14     	; 0x650a <vfprintf+0x53c>
    64fc:	94 fe       	sbrs	r9, 4
    64fe:	08 c0       	rjmp	.+16     	; 0x6510 <vfprintf+0x542>
    6500:	06 60       	ori	r16, 0x06	; 6
    6502:	06 c0       	rjmp	.+12     	; 0x6510 <vfprintf+0x542>
    6504:	28 e0       	ldi	r18, 0x08	; 8
    6506:	30 e0       	ldi	r19, 0x00	; 0
    6508:	05 c0       	rjmp	.+10     	; 0x6514 <vfprintf+0x546>
    650a:	20 e1       	ldi	r18, 0x10	; 16
    650c:	30 e0       	ldi	r19, 0x00	; 0
    650e:	02 c0       	rjmp	.+4      	; 0x6514 <vfprintf+0x546>
    6510:	20 e1       	ldi	r18, 0x10	; 16
    6512:	32 e0       	ldi	r19, 0x02	; 2
    6514:	56 01       	movw	r10, r12
    6516:	07 ff       	sbrs	r16, 7
    6518:	09 c0       	rjmp	.+18     	; 0x652c <vfprintf+0x55e>
    651a:	84 e0       	ldi	r24, 0x04	; 4
    651c:	a8 0e       	add	r10, r24
    651e:	b1 1c       	adc	r11, r1
    6520:	f6 01       	movw	r30, r12
    6522:	60 81       	ld	r22, Z
    6524:	71 81       	ldd	r23, Z+1	; 0x01
    6526:	82 81       	ldd	r24, Z+2	; 0x02
    6528:	93 81       	ldd	r25, Z+3	; 0x03
    652a:	08 c0       	rjmp	.+16     	; 0x653c <vfprintf+0x56e>
    652c:	f2 e0       	ldi	r31, 0x02	; 2
    652e:	af 0e       	add	r10, r31
    6530:	b1 1c       	adc	r11, r1
    6532:	f6 01       	movw	r30, r12
    6534:	60 81       	ld	r22, Z
    6536:	71 81       	ldd	r23, Z+1	; 0x01
    6538:	80 e0       	ldi	r24, 0x00	; 0
    653a:	90 e0       	ldi	r25, 0x00	; 0
    653c:	a3 01       	movw	r20, r6
    653e:	4f d4       	rcall	.+2206   	; 0x6dde <__ultoa_invert>
    6540:	c8 2e       	mov	r12, r24
    6542:	c6 18       	sub	r12, r6
    6544:	0f 77       	andi	r16, 0x7F	; 127
    6546:	90 2e       	mov	r9, r16
    6548:	96 fe       	sbrs	r9, 6
    654a:	0b c0       	rjmp	.+22     	; 0x6562 <vfprintf+0x594>
    654c:	09 2d       	mov	r16, r9
    654e:	0e 7f       	andi	r16, 0xFE	; 254
    6550:	c1 16       	cp	r12, r17
    6552:	50 f4       	brcc	.+20     	; 0x6568 <vfprintf+0x59a>
    6554:	94 fe       	sbrs	r9, 4
    6556:	0a c0       	rjmp	.+20     	; 0x656c <vfprintf+0x59e>
    6558:	92 fc       	sbrc	r9, 2
    655a:	08 c0       	rjmp	.+16     	; 0x656c <vfprintf+0x59e>
    655c:	09 2d       	mov	r16, r9
    655e:	0e 7e       	andi	r16, 0xEE	; 238
    6560:	05 c0       	rjmp	.+10     	; 0x656c <vfprintf+0x59e>
    6562:	dc 2c       	mov	r13, r12
    6564:	09 2d       	mov	r16, r9
    6566:	03 c0       	rjmp	.+6      	; 0x656e <vfprintf+0x5a0>
    6568:	dc 2c       	mov	r13, r12
    656a:	01 c0       	rjmp	.+2      	; 0x656e <vfprintf+0x5a0>
    656c:	d1 2e       	mov	r13, r17
    656e:	04 ff       	sbrs	r16, 4
    6570:	0d c0       	rjmp	.+26     	; 0x658c <vfprintf+0x5be>
    6572:	fe 01       	movw	r30, r28
    6574:	ec 0d       	add	r30, r12
    6576:	f1 1d       	adc	r31, r1
    6578:	80 81       	ld	r24, Z
    657a:	80 33       	cpi	r24, 0x30	; 48
    657c:	11 f4       	brne	.+4      	; 0x6582 <vfprintf+0x5b4>
    657e:	09 7e       	andi	r16, 0xE9	; 233
    6580:	09 c0       	rjmp	.+18     	; 0x6594 <vfprintf+0x5c6>
    6582:	02 ff       	sbrs	r16, 2
    6584:	06 c0       	rjmp	.+12     	; 0x6592 <vfprintf+0x5c4>
    6586:	d3 94       	inc	r13
    6588:	d3 94       	inc	r13
    658a:	04 c0       	rjmp	.+8      	; 0x6594 <vfprintf+0x5c6>
    658c:	80 2f       	mov	r24, r16
    658e:	86 78       	andi	r24, 0x86	; 134
    6590:	09 f0       	breq	.+2      	; 0x6594 <vfprintf+0x5c6>
    6592:	d3 94       	inc	r13
    6594:	03 fd       	sbrc	r16, 3
    6596:	10 c0       	rjmp	.+32     	; 0x65b8 <vfprintf+0x5ea>
    6598:	00 ff       	sbrs	r16, 0
    659a:	06 c0       	rjmp	.+12     	; 0x65a8 <vfprintf+0x5da>
    659c:	1c 2d       	mov	r17, r12
    659e:	d5 14       	cp	r13, r5
    65a0:	78 f4       	brcc	.+30     	; 0x65c0 <vfprintf+0x5f2>
    65a2:	15 0d       	add	r17, r5
    65a4:	1d 19       	sub	r17, r13
    65a6:	0c c0       	rjmp	.+24     	; 0x65c0 <vfprintf+0x5f2>
    65a8:	d5 14       	cp	r13, r5
    65aa:	50 f4       	brcc	.+20     	; 0x65c0 <vfprintf+0x5f2>
    65ac:	b7 01       	movw	r22, r14
    65ae:	80 e2       	ldi	r24, 0x20	; 32
    65b0:	90 e0       	ldi	r25, 0x00	; 0
    65b2:	68 d3       	rcall	.+1744   	; 0x6c84 <fputc>
    65b4:	d3 94       	inc	r13
    65b6:	f8 cf       	rjmp	.-16     	; 0x65a8 <vfprintf+0x5da>
    65b8:	d5 14       	cp	r13, r5
    65ba:	10 f4       	brcc	.+4      	; 0x65c0 <vfprintf+0x5f2>
    65bc:	5d 18       	sub	r5, r13
    65be:	01 c0       	rjmp	.+2      	; 0x65c2 <vfprintf+0x5f4>
    65c0:	51 2c       	mov	r5, r1
    65c2:	04 ff       	sbrs	r16, 4
    65c4:	0f c0       	rjmp	.+30     	; 0x65e4 <vfprintf+0x616>
    65c6:	b7 01       	movw	r22, r14
    65c8:	80 e3       	ldi	r24, 0x30	; 48
    65ca:	90 e0       	ldi	r25, 0x00	; 0
    65cc:	5b d3       	rcall	.+1718   	; 0x6c84 <fputc>
    65ce:	02 ff       	sbrs	r16, 2
    65d0:	16 c0       	rjmp	.+44     	; 0x65fe <vfprintf+0x630>
    65d2:	01 fd       	sbrc	r16, 1
    65d4:	03 c0       	rjmp	.+6      	; 0x65dc <vfprintf+0x60e>
    65d6:	88 e7       	ldi	r24, 0x78	; 120
    65d8:	90 e0       	ldi	r25, 0x00	; 0
    65da:	02 c0       	rjmp	.+4      	; 0x65e0 <vfprintf+0x612>
    65dc:	88 e5       	ldi	r24, 0x58	; 88
    65de:	90 e0       	ldi	r25, 0x00	; 0
    65e0:	b7 01       	movw	r22, r14
    65e2:	0c c0       	rjmp	.+24     	; 0x65fc <vfprintf+0x62e>
    65e4:	80 2f       	mov	r24, r16
    65e6:	86 78       	andi	r24, 0x86	; 134
    65e8:	51 f0       	breq	.+20     	; 0x65fe <vfprintf+0x630>
    65ea:	01 ff       	sbrs	r16, 1
    65ec:	02 c0       	rjmp	.+4      	; 0x65f2 <vfprintf+0x624>
    65ee:	8b e2       	ldi	r24, 0x2B	; 43
    65f0:	01 c0       	rjmp	.+2      	; 0x65f4 <vfprintf+0x626>
    65f2:	80 e2       	ldi	r24, 0x20	; 32
    65f4:	07 fd       	sbrc	r16, 7
    65f6:	8d e2       	ldi	r24, 0x2D	; 45
    65f8:	b7 01       	movw	r22, r14
    65fa:	90 e0       	ldi	r25, 0x00	; 0
    65fc:	43 d3       	rcall	.+1670   	; 0x6c84 <fputc>
    65fe:	c1 16       	cp	r12, r17
    6600:	30 f4       	brcc	.+12     	; 0x660e <vfprintf+0x640>
    6602:	b7 01       	movw	r22, r14
    6604:	80 e3       	ldi	r24, 0x30	; 48
    6606:	90 e0       	ldi	r25, 0x00	; 0
    6608:	3d d3       	rcall	.+1658   	; 0x6c84 <fputc>
    660a:	11 50       	subi	r17, 0x01	; 1
    660c:	f8 cf       	rjmp	.-16     	; 0x65fe <vfprintf+0x630>
    660e:	ca 94       	dec	r12
    6610:	f3 01       	movw	r30, r6
    6612:	ec 0d       	add	r30, r12
    6614:	f1 1d       	adc	r31, r1
    6616:	80 81       	ld	r24, Z
    6618:	b7 01       	movw	r22, r14
    661a:	90 e0       	ldi	r25, 0x00	; 0
    661c:	33 d3       	rcall	.+1638   	; 0x6c84 <fputc>
    661e:	c1 10       	cpse	r12, r1
    6620:	f6 cf       	rjmp	.-20     	; 0x660e <vfprintf+0x640>
    6622:	15 c0       	rjmp	.+42     	; 0x664e <vfprintf+0x680>
    6624:	f4 e0       	ldi	r31, 0x04	; 4
    6626:	f5 15       	cp	r31, r5
    6628:	50 f5       	brcc	.+84     	; 0x667e <vfprintf+0x6b0>
    662a:	84 e0       	ldi	r24, 0x04	; 4
    662c:	58 1a       	sub	r5, r24
    662e:	93 fe       	sbrs	r9, 3
    6630:	1e c0       	rjmp	.+60     	; 0x666e <vfprintf+0x6a0>
    6632:	01 11       	cpse	r16, r1
    6634:	25 c0       	rjmp	.+74     	; 0x6680 <vfprintf+0x6b2>
    6636:	2c 85       	ldd	r18, Y+12	; 0x0c
    6638:	23 ff       	sbrs	r18, 3
    663a:	27 c0       	rjmp	.+78     	; 0x668a <vfprintf+0x6bc>
    663c:	0a e9       	ldi	r16, 0x9A	; 154
    663e:	11 e0       	ldi	r17, 0x01	; 1
    6640:	39 2d       	mov	r19, r9
    6642:	30 71       	andi	r19, 0x10	; 16
    6644:	93 2e       	mov	r9, r19
    6646:	f8 01       	movw	r30, r16
    6648:	84 91       	lpm	r24, Z
    664a:	81 11       	cpse	r24, r1
    664c:	21 c0       	rjmp	.+66     	; 0x6690 <vfprintf+0x6c2>
    664e:	55 20       	and	r5, r5
    6650:	09 f4       	brne	.+2      	; 0x6654 <vfprintf+0x686>
    6652:	fc cc       	rjmp	.-1544   	; 0x604c <vfprintf+0x7e>
    6654:	b7 01       	movw	r22, r14
    6656:	80 e2       	ldi	r24, 0x20	; 32
    6658:	90 e0       	ldi	r25, 0x00	; 0
    665a:	14 d3       	rcall	.+1576   	; 0x6c84 <fputc>
    665c:	5a 94       	dec	r5
    665e:	f7 cf       	rjmp	.-18     	; 0x664e <vfprintf+0x680>
    6660:	f7 01       	movw	r30, r14
    6662:	86 81       	ldd	r24, Z+6	; 0x06
    6664:	97 81       	ldd	r25, Z+7	; 0x07
    6666:	23 c0       	rjmp	.+70     	; 0x66ae <vfprintf+0x6e0>
    6668:	8f ef       	ldi	r24, 0xFF	; 255
    666a:	9f ef       	ldi	r25, 0xFF	; 255
    666c:	20 c0       	rjmp	.+64     	; 0x66ae <vfprintf+0x6e0>
    666e:	b7 01       	movw	r22, r14
    6670:	80 e2       	ldi	r24, 0x20	; 32
    6672:	90 e0       	ldi	r25, 0x00	; 0
    6674:	07 d3       	rcall	.+1550   	; 0x6c84 <fputc>
    6676:	5a 94       	dec	r5
    6678:	51 10       	cpse	r5, r1
    667a:	f9 cf       	rjmp	.-14     	; 0x666e <vfprintf+0x6a0>
    667c:	da cf       	rjmp	.-76     	; 0x6632 <vfprintf+0x664>
    667e:	51 2c       	mov	r5, r1
    6680:	b7 01       	movw	r22, r14
    6682:	80 2f       	mov	r24, r16
    6684:	90 e0       	ldi	r25, 0x00	; 0
    6686:	fe d2       	rcall	.+1532   	; 0x6c84 <fputc>
    6688:	d6 cf       	rjmp	.-84     	; 0x6636 <vfprintf+0x668>
    668a:	0e e9       	ldi	r16, 0x9E	; 158
    668c:	11 e0       	ldi	r17, 0x01	; 1
    668e:	d8 cf       	rjmp	.-80     	; 0x6640 <vfprintf+0x672>
    6690:	91 10       	cpse	r9, r1
    6692:	80 52       	subi	r24, 0x20	; 32
    6694:	b7 01       	movw	r22, r14
    6696:	90 e0       	ldi	r25, 0x00	; 0
    6698:	f5 d2       	rcall	.+1514   	; 0x6c84 <fputc>
    669a:	0f 5f       	subi	r16, 0xFF	; 255
    669c:	1f 4f       	sbci	r17, 0xFF	; 255
    669e:	d3 cf       	rjmp	.-90     	; 0x6646 <vfprintf+0x678>
    66a0:	23 e0       	ldi	r18, 0x03	; 3
    66a2:	25 15       	cp	r18, r5
    66a4:	10 f4       	brcc	.+4      	; 0x66aa <vfprintf+0x6dc>
    66a6:	83 e0       	ldi	r24, 0x03	; 3
    66a8:	c1 cf       	rjmp	.-126    	; 0x662c <vfprintf+0x65e>
    66aa:	51 2c       	mov	r5, r1
    66ac:	c4 cf       	rjmp	.-120    	; 0x6636 <vfprintf+0x668>
    66ae:	60 96       	adiw	r28, 0x10	; 16
    66b0:	0f b6       	in	r0, 0x3f	; 63
    66b2:	f8 94       	cli
    66b4:	de bf       	out	0x3e, r29	; 62
    66b6:	0f be       	out	0x3f, r0	; 63
    66b8:	cd bf       	out	0x3d, r28	; 61
    66ba:	df 91       	pop	r29
    66bc:	cf 91       	pop	r28
    66be:	1f 91       	pop	r17
    66c0:	0f 91       	pop	r16
    66c2:	ff 90       	pop	r15
    66c4:	ef 90       	pop	r14
    66c6:	df 90       	pop	r13
    66c8:	cf 90       	pop	r12
    66ca:	bf 90       	pop	r11
    66cc:	af 90       	pop	r10
    66ce:	9f 90       	pop	r9
    66d0:	8f 90       	pop	r8
    66d2:	7f 90       	pop	r7
    66d4:	6f 90       	pop	r6
    66d6:	5f 90       	pop	r5
    66d8:	4f 90       	pop	r4
    66da:	3f 90       	pop	r3
    66dc:	2f 90       	pop	r2
    66de:	08 95       	ret

000066e0 <__divmodhi4>:
    66e0:	97 fb       	bst	r25, 7
    66e2:	07 2e       	mov	r0, r23
    66e4:	16 f4       	brtc	.+4      	; 0x66ea <__divmodhi4+0xa>
    66e6:	00 94       	com	r0
    66e8:	06 d0       	rcall	.+12     	; 0x66f6 <__divmodhi4_neg1>
    66ea:	77 fd       	sbrc	r23, 7
    66ec:	08 d0       	rcall	.+16     	; 0x66fe <__divmodhi4_neg2>
    66ee:	44 d0       	rcall	.+136    	; 0x6778 <__udivmodhi4>
    66f0:	07 fc       	sbrc	r0, 7
    66f2:	05 d0       	rcall	.+10     	; 0x66fe <__divmodhi4_neg2>
    66f4:	3e f4       	brtc	.+14     	; 0x6704 <__divmodhi4_exit>

000066f6 <__divmodhi4_neg1>:
    66f6:	90 95       	com	r25
    66f8:	81 95       	neg	r24
    66fa:	9f 4f       	sbci	r25, 0xFF	; 255
    66fc:	08 95       	ret

000066fe <__divmodhi4_neg2>:
    66fe:	70 95       	com	r23
    6700:	61 95       	neg	r22
    6702:	7f 4f       	sbci	r23, 0xFF	; 255

00006704 <__divmodhi4_exit>:
    6704:	08 95       	ret

00006706 <__udivmodsi4>:
    6706:	a1 e2       	ldi	r26, 0x21	; 33
    6708:	1a 2e       	mov	r1, r26
    670a:	aa 1b       	sub	r26, r26
    670c:	bb 1b       	sub	r27, r27
    670e:	fd 01       	movw	r30, r26
    6710:	0d c0       	rjmp	.+26     	; 0x672c <__udivmodsi4_ep>

00006712 <__udivmodsi4_loop>:
    6712:	aa 1f       	adc	r26, r26
    6714:	bb 1f       	adc	r27, r27
    6716:	ee 1f       	adc	r30, r30
    6718:	ff 1f       	adc	r31, r31
    671a:	a2 17       	cp	r26, r18
    671c:	b3 07       	cpc	r27, r19
    671e:	e4 07       	cpc	r30, r20
    6720:	f5 07       	cpc	r31, r21
    6722:	20 f0       	brcs	.+8      	; 0x672c <__udivmodsi4_ep>
    6724:	a2 1b       	sub	r26, r18
    6726:	b3 0b       	sbc	r27, r19
    6728:	e4 0b       	sbc	r30, r20
    672a:	f5 0b       	sbc	r31, r21

0000672c <__udivmodsi4_ep>:
    672c:	66 1f       	adc	r22, r22
    672e:	77 1f       	adc	r23, r23
    6730:	88 1f       	adc	r24, r24
    6732:	99 1f       	adc	r25, r25
    6734:	1a 94       	dec	r1
    6736:	69 f7       	brne	.-38     	; 0x6712 <__udivmodsi4_loop>
    6738:	60 95       	com	r22
    673a:	70 95       	com	r23
    673c:	80 95       	com	r24
    673e:	90 95       	com	r25
    6740:	9b 01       	movw	r18, r22
    6742:	ac 01       	movw	r20, r24
    6744:	bd 01       	movw	r22, r26
    6746:	cf 01       	movw	r24, r30
    6748:	08 95       	ret

0000674a <__tablejump2__>:
    674a:	ee 0f       	add	r30, r30
    674c:	ff 1f       	adc	r31, r31
    674e:	88 1f       	adc	r24, r24
    6750:	8b bf       	out	0x3b, r24	; 59
    6752:	07 90       	elpm	r0, Z+
    6754:	f6 91       	elpm	r31, Z
    6756:	e0 2d       	mov	r30, r0
    6758:	19 94       	eijmp

0000675a <__umulhisi3>:
    675a:	a2 9f       	mul	r26, r18
    675c:	b0 01       	movw	r22, r0
    675e:	b3 9f       	mul	r27, r19
    6760:	c0 01       	movw	r24, r0
    6762:	a3 9f       	mul	r26, r19
    6764:	70 0d       	add	r23, r0
    6766:	81 1d       	adc	r24, r1
    6768:	11 24       	eor	r1, r1
    676a:	91 1d       	adc	r25, r1
    676c:	b2 9f       	mul	r27, r18
    676e:	70 0d       	add	r23, r0
    6770:	81 1d       	adc	r24, r1
    6772:	11 24       	eor	r1, r1
    6774:	91 1d       	adc	r25, r1
    6776:	08 95       	ret

00006778 <__udivmodhi4>:
    6778:	aa 1b       	sub	r26, r26
    677a:	bb 1b       	sub	r27, r27
    677c:	51 e1       	ldi	r21, 0x11	; 17
    677e:	07 c0       	rjmp	.+14     	; 0x678e <__udivmodhi4_ep>

00006780 <__udivmodhi4_loop>:
    6780:	aa 1f       	adc	r26, r26
    6782:	bb 1f       	adc	r27, r27
    6784:	a6 17       	cp	r26, r22
    6786:	b7 07       	cpc	r27, r23
    6788:	10 f0       	brcs	.+4      	; 0x678e <__udivmodhi4_ep>
    678a:	a6 1b       	sub	r26, r22
    678c:	b7 0b       	sbc	r27, r23

0000678e <__udivmodhi4_ep>:
    678e:	88 1f       	adc	r24, r24
    6790:	99 1f       	adc	r25, r25
    6792:	5a 95       	dec	r21
    6794:	a9 f7       	brne	.-22     	; 0x6780 <__udivmodhi4_loop>
    6796:	80 95       	com	r24
    6798:	90 95       	com	r25
    679a:	bc 01       	movw	r22, r24
    679c:	cd 01       	movw	r24, r26
    679e:	08 95       	ret

000067a0 <malloc>:
    67a0:	0f 93       	push	r16
    67a2:	1f 93       	push	r17
    67a4:	cf 93       	push	r28
    67a6:	df 93       	push	r29
    67a8:	82 30       	cpi	r24, 0x02	; 2
    67aa:	91 05       	cpc	r25, r1
    67ac:	10 f4       	brcc	.+4      	; 0x67b2 <malloc+0x12>
    67ae:	82 e0       	ldi	r24, 0x02	; 2
    67b0:	90 e0       	ldi	r25, 0x00	; 0
    67b2:	e0 91 f4 17 	lds	r30, 0x17F4	; 0x8017f4 <__flp>
    67b6:	f0 91 f5 17 	lds	r31, 0x17F5	; 0x8017f5 <__flp+0x1>
    67ba:	20 e0       	ldi	r18, 0x00	; 0
    67bc:	30 e0       	ldi	r19, 0x00	; 0
    67be:	a0 e0       	ldi	r26, 0x00	; 0
    67c0:	b0 e0       	ldi	r27, 0x00	; 0
    67c2:	30 97       	sbiw	r30, 0x00	; 0
    67c4:	19 f1       	breq	.+70     	; 0x680c <malloc+0x6c>
    67c6:	40 81       	ld	r20, Z
    67c8:	51 81       	ldd	r21, Z+1	; 0x01
    67ca:	02 81       	ldd	r16, Z+2	; 0x02
    67cc:	13 81       	ldd	r17, Z+3	; 0x03
    67ce:	48 17       	cp	r20, r24
    67d0:	59 07       	cpc	r21, r25
    67d2:	c8 f0       	brcs	.+50     	; 0x6806 <malloc+0x66>
    67d4:	84 17       	cp	r24, r20
    67d6:	95 07       	cpc	r25, r21
    67d8:	69 f4       	brne	.+26     	; 0x67f4 <malloc+0x54>
    67da:	10 97       	sbiw	r26, 0x00	; 0
    67dc:	31 f0       	breq	.+12     	; 0x67ea <malloc+0x4a>
    67de:	12 96       	adiw	r26, 0x02	; 2
    67e0:	0c 93       	st	X, r16
    67e2:	12 97       	sbiw	r26, 0x02	; 2
    67e4:	13 96       	adiw	r26, 0x03	; 3
    67e6:	1c 93       	st	X, r17
    67e8:	27 c0       	rjmp	.+78     	; 0x6838 <malloc+0x98>
    67ea:	00 93 f4 17 	sts	0x17F4, r16	; 0x8017f4 <__flp>
    67ee:	10 93 f5 17 	sts	0x17F5, r17	; 0x8017f5 <__flp+0x1>
    67f2:	22 c0       	rjmp	.+68     	; 0x6838 <malloc+0x98>
    67f4:	21 15       	cp	r18, r1
    67f6:	31 05       	cpc	r19, r1
    67f8:	19 f0       	breq	.+6      	; 0x6800 <malloc+0x60>
    67fa:	42 17       	cp	r20, r18
    67fc:	53 07       	cpc	r21, r19
    67fe:	18 f4       	brcc	.+6      	; 0x6806 <malloc+0x66>
    6800:	9a 01       	movw	r18, r20
    6802:	bd 01       	movw	r22, r26
    6804:	ef 01       	movw	r28, r30
    6806:	df 01       	movw	r26, r30
    6808:	f8 01       	movw	r30, r16
    680a:	db cf       	rjmp	.-74     	; 0x67c2 <malloc+0x22>
    680c:	21 15       	cp	r18, r1
    680e:	31 05       	cpc	r19, r1
    6810:	f9 f0       	breq	.+62     	; 0x6850 <malloc+0xb0>
    6812:	28 1b       	sub	r18, r24
    6814:	39 0b       	sbc	r19, r25
    6816:	24 30       	cpi	r18, 0x04	; 4
    6818:	31 05       	cpc	r19, r1
    681a:	80 f4       	brcc	.+32     	; 0x683c <malloc+0x9c>
    681c:	8a 81       	ldd	r24, Y+2	; 0x02
    681e:	9b 81       	ldd	r25, Y+3	; 0x03
    6820:	61 15       	cp	r22, r1
    6822:	71 05       	cpc	r23, r1
    6824:	21 f0       	breq	.+8      	; 0x682e <malloc+0x8e>
    6826:	fb 01       	movw	r30, r22
    6828:	93 83       	std	Z+3, r25	; 0x03
    682a:	82 83       	std	Z+2, r24	; 0x02
    682c:	04 c0       	rjmp	.+8      	; 0x6836 <malloc+0x96>
    682e:	90 93 f5 17 	sts	0x17F5, r25	; 0x8017f5 <__flp+0x1>
    6832:	80 93 f4 17 	sts	0x17F4, r24	; 0x8017f4 <__flp>
    6836:	fe 01       	movw	r30, r28
    6838:	32 96       	adiw	r30, 0x02	; 2
    683a:	44 c0       	rjmp	.+136    	; 0x68c4 <malloc+0x124>
    683c:	fe 01       	movw	r30, r28
    683e:	e2 0f       	add	r30, r18
    6840:	f3 1f       	adc	r31, r19
    6842:	81 93       	st	Z+, r24
    6844:	91 93       	st	Z+, r25
    6846:	22 50       	subi	r18, 0x02	; 2
    6848:	31 09       	sbc	r19, r1
    684a:	39 83       	std	Y+1, r19	; 0x01
    684c:	28 83       	st	Y, r18
    684e:	3a c0       	rjmp	.+116    	; 0x68c4 <malloc+0x124>
    6850:	20 91 f2 17 	lds	r18, 0x17F2	; 0x8017f2 <__brkval>
    6854:	30 91 f3 17 	lds	r19, 0x17F3	; 0x8017f3 <__brkval+0x1>
    6858:	23 2b       	or	r18, r19
    685a:	41 f4       	brne	.+16     	; 0x686c <malloc+0xcc>
    685c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6860:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6864:	30 93 f3 17 	sts	0x17F3, r19	; 0x8017f3 <__brkval+0x1>
    6868:	20 93 f2 17 	sts	0x17F2, r18	; 0x8017f2 <__brkval>
    686c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6870:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6874:	21 15       	cp	r18, r1
    6876:	31 05       	cpc	r19, r1
    6878:	41 f4       	brne	.+16     	; 0x688a <malloc+0xea>
    687a:	2d b7       	in	r18, 0x3d	; 61
    687c:	3e b7       	in	r19, 0x3e	; 62
    687e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6882:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6886:	24 1b       	sub	r18, r20
    6888:	35 0b       	sbc	r19, r21
    688a:	e0 91 f2 17 	lds	r30, 0x17F2	; 0x8017f2 <__brkval>
    688e:	f0 91 f3 17 	lds	r31, 0x17F3	; 0x8017f3 <__brkval+0x1>
    6892:	e2 17       	cp	r30, r18
    6894:	f3 07       	cpc	r31, r19
    6896:	a0 f4       	brcc	.+40     	; 0x68c0 <malloc+0x120>
    6898:	2e 1b       	sub	r18, r30
    689a:	3f 0b       	sbc	r19, r31
    689c:	28 17       	cp	r18, r24
    689e:	39 07       	cpc	r19, r25
    68a0:	78 f0       	brcs	.+30     	; 0x68c0 <malloc+0x120>
    68a2:	ac 01       	movw	r20, r24
    68a4:	4e 5f       	subi	r20, 0xFE	; 254
    68a6:	5f 4f       	sbci	r21, 0xFF	; 255
    68a8:	24 17       	cp	r18, r20
    68aa:	35 07       	cpc	r19, r21
    68ac:	48 f0       	brcs	.+18     	; 0x68c0 <malloc+0x120>
    68ae:	4e 0f       	add	r20, r30
    68b0:	5f 1f       	adc	r21, r31
    68b2:	50 93 f3 17 	sts	0x17F3, r21	; 0x8017f3 <__brkval+0x1>
    68b6:	40 93 f2 17 	sts	0x17F2, r20	; 0x8017f2 <__brkval>
    68ba:	81 93       	st	Z+, r24
    68bc:	91 93       	st	Z+, r25
    68be:	02 c0       	rjmp	.+4      	; 0x68c4 <malloc+0x124>
    68c0:	e0 e0       	ldi	r30, 0x00	; 0
    68c2:	f0 e0       	ldi	r31, 0x00	; 0
    68c4:	cf 01       	movw	r24, r30
    68c6:	df 91       	pop	r29
    68c8:	cf 91       	pop	r28
    68ca:	1f 91       	pop	r17
    68cc:	0f 91       	pop	r16
    68ce:	08 95       	ret

000068d0 <free>:
    68d0:	cf 93       	push	r28
    68d2:	df 93       	push	r29
    68d4:	00 97       	sbiw	r24, 0x00	; 0
    68d6:	09 f4       	brne	.+2      	; 0x68da <free+0xa>
    68d8:	81 c0       	rjmp	.+258    	; 0x69dc <free+0x10c>
    68da:	fc 01       	movw	r30, r24
    68dc:	32 97       	sbiw	r30, 0x02	; 2
    68de:	13 82       	std	Z+3, r1	; 0x03
    68e0:	12 82       	std	Z+2, r1	; 0x02
    68e2:	a0 91 f4 17 	lds	r26, 0x17F4	; 0x8017f4 <__flp>
    68e6:	b0 91 f5 17 	lds	r27, 0x17F5	; 0x8017f5 <__flp+0x1>
    68ea:	10 97       	sbiw	r26, 0x00	; 0
    68ec:	81 f4       	brne	.+32     	; 0x690e <free+0x3e>
    68ee:	20 81       	ld	r18, Z
    68f0:	31 81       	ldd	r19, Z+1	; 0x01
    68f2:	82 0f       	add	r24, r18
    68f4:	93 1f       	adc	r25, r19
    68f6:	20 91 f2 17 	lds	r18, 0x17F2	; 0x8017f2 <__brkval>
    68fa:	30 91 f3 17 	lds	r19, 0x17F3	; 0x8017f3 <__brkval+0x1>
    68fe:	28 17       	cp	r18, r24
    6900:	39 07       	cpc	r19, r25
    6902:	51 f5       	brne	.+84     	; 0x6958 <free+0x88>
    6904:	f0 93 f3 17 	sts	0x17F3, r31	; 0x8017f3 <__brkval+0x1>
    6908:	e0 93 f2 17 	sts	0x17F2, r30	; 0x8017f2 <__brkval>
    690c:	67 c0       	rjmp	.+206    	; 0x69dc <free+0x10c>
    690e:	ed 01       	movw	r28, r26
    6910:	20 e0       	ldi	r18, 0x00	; 0
    6912:	30 e0       	ldi	r19, 0x00	; 0
    6914:	ce 17       	cp	r28, r30
    6916:	df 07       	cpc	r29, r31
    6918:	40 f4       	brcc	.+16     	; 0x692a <free+0x5a>
    691a:	4a 81       	ldd	r20, Y+2	; 0x02
    691c:	5b 81       	ldd	r21, Y+3	; 0x03
    691e:	9e 01       	movw	r18, r28
    6920:	41 15       	cp	r20, r1
    6922:	51 05       	cpc	r21, r1
    6924:	f1 f0       	breq	.+60     	; 0x6962 <free+0x92>
    6926:	ea 01       	movw	r28, r20
    6928:	f5 cf       	rjmp	.-22     	; 0x6914 <free+0x44>
    692a:	d3 83       	std	Z+3, r29	; 0x03
    692c:	c2 83       	std	Z+2, r28	; 0x02
    692e:	40 81       	ld	r20, Z
    6930:	51 81       	ldd	r21, Z+1	; 0x01
    6932:	84 0f       	add	r24, r20
    6934:	95 1f       	adc	r25, r21
    6936:	c8 17       	cp	r28, r24
    6938:	d9 07       	cpc	r29, r25
    693a:	59 f4       	brne	.+22     	; 0x6952 <free+0x82>
    693c:	88 81       	ld	r24, Y
    693e:	99 81       	ldd	r25, Y+1	; 0x01
    6940:	84 0f       	add	r24, r20
    6942:	95 1f       	adc	r25, r21
    6944:	02 96       	adiw	r24, 0x02	; 2
    6946:	91 83       	std	Z+1, r25	; 0x01
    6948:	80 83       	st	Z, r24
    694a:	8a 81       	ldd	r24, Y+2	; 0x02
    694c:	9b 81       	ldd	r25, Y+3	; 0x03
    694e:	93 83       	std	Z+3, r25	; 0x03
    6950:	82 83       	std	Z+2, r24	; 0x02
    6952:	21 15       	cp	r18, r1
    6954:	31 05       	cpc	r19, r1
    6956:	29 f4       	brne	.+10     	; 0x6962 <free+0x92>
    6958:	f0 93 f5 17 	sts	0x17F5, r31	; 0x8017f5 <__flp+0x1>
    695c:	e0 93 f4 17 	sts	0x17F4, r30	; 0x8017f4 <__flp>
    6960:	3d c0       	rjmp	.+122    	; 0x69dc <free+0x10c>
    6962:	e9 01       	movw	r28, r18
    6964:	fb 83       	std	Y+3, r31	; 0x03
    6966:	ea 83       	std	Y+2, r30	; 0x02
    6968:	49 91       	ld	r20, Y+
    696a:	59 91       	ld	r21, Y+
    696c:	c4 0f       	add	r28, r20
    696e:	d5 1f       	adc	r29, r21
    6970:	ec 17       	cp	r30, r28
    6972:	fd 07       	cpc	r31, r29
    6974:	61 f4       	brne	.+24     	; 0x698e <free+0xbe>
    6976:	80 81       	ld	r24, Z
    6978:	91 81       	ldd	r25, Z+1	; 0x01
    697a:	84 0f       	add	r24, r20
    697c:	95 1f       	adc	r25, r21
    697e:	02 96       	adiw	r24, 0x02	; 2
    6980:	e9 01       	movw	r28, r18
    6982:	99 83       	std	Y+1, r25	; 0x01
    6984:	88 83       	st	Y, r24
    6986:	82 81       	ldd	r24, Z+2	; 0x02
    6988:	93 81       	ldd	r25, Z+3	; 0x03
    698a:	9b 83       	std	Y+3, r25	; 0x03
    698c:	8a 83       	std	Y+2, r24	; 0x02
    698e:	e0 e0       	ldi	r30, 0x00	; 0
    6990:	f0 e0       	ldi	r31, 0x00	; 0
    6992:	12 96       	adiw	r26, 0x02	; 2
    6994:	8d 91       	ld	r24, X+
    6996:	9c 91       	ld	r25, X
    6998:	13 97       	sbiw	r26, 0x03	; 3
    699a:	00 97       	sbiw	r24, 0x00	; 0
    699c:	19 f0       	breq	.+6      	; 0x69a4 <free+0xd4>
    699e:	fd 01       	movw	r30, r26
    69a0:	dc 01       	movw	r26, r24
    69a2:	f7 cf       	rjmp	.-18     	; 0x6992 <free+0xc2>
    69a4:	8d 91       	ld	r24, X+
    69a6:	9c 91       	ld	r25, X
    69a8:	11 97       	sbiw	r26, 0x01	; 1
    69aa:	9d 01       	movw	r18, r26
    69ac:	2e 5f       	subi	r18, 0xFE	; 254
    69ae:	3f 4f       	sbci	r19, 0xFF	; 255
    69b0:	82 0f       	add	r24, r18
    69b2:	93 1f       	adc	r25, r19
    69b4:	20 91 f2 17 	lds	r18, 0x17F2	; 0x8017f2 <__brkval>
    69b8:	30 91 f3 17 	lds	r19, 0x17F3	; 0x8017f3 <__brkval+0x1>
    69bc:	28 17       	cp	r18, r24
    69be:	39 07       	cpc	r19, r25
    69c0:	69 f4       	brne	.+26     	; 0x69dc <free+0x10c>
    69c2:	30 97       	sbiw	r30, 0x00	; 0
    69c4:	29 f4       	brne	.+10     	; 0x69d0 <free+0x100>
    69c6:	10 92 f5 17 	sts	0x17F5, r1	; 0x8017f5 <__flp+0x1>
    69ca:	10 92 f4 17 	sts	0x17F4, r1	; 0x8017f4 <__flp>
    69ce:	02 c0       	rjmp	.+4      	; 0x69d4 <free+0x104>
    69d0:	13 82       	std	Z+3, r1	; 0x03
    69d2:	12 82       	std	Z+2, r1	; 0x02
    69d4:	b0 93 f3 17 	sts	0x17F3, r27	; 0x8017f3 <__brkval+0x1>
    69d8:	a0 93 f2 17 	sts	0x17F2, r26	; 0x8017f2 <__brkval>
    69dc:	df 91       	pop	r29
    69de:	cf 91       	pop	r28
    69e0:	08 95       	ret

000069e2 <abort>:
    69e2:	81 e0       	ldi	r24, 0x01	; 1
    69e4:	90 e0       	ldi	r25, 0x00	; 0
    69e6:	f8 94       	cli
    69e8:	58 c2       	rjmp	.+1200   	; 0x6e9a <_exit>

000069ea <__ftoa_engine>:
    69ea:	28 30       	cpi	r18, 0x08	; 8
    69ec:	08 f0       	brcs	.+2      	; 0x69f0 <__ftoa_engine+0x6>
    69ee:	27 e0       	ldi	r18, 0x07	; 7
    69f0:	33 27       	eor	r19, r19
    69f2:	da 01       	movw	r26, r20
    69f4:	99 0f       	add	r25, r25
    69f6:	31 1d       	adc	r19, r1
    69f8:	87 fd       	sbrc	r24, 7
    69fa:	91 60       	ori	r25, 0x01	; 1
    69fc:	00 96       	adiw	r24, 0x00	; 0
    69fe:	61 05       	cpc	r22, r1
    6a00:	71 05       	cpc	r23, r1
    6a02:	39 f4       	brne	.+14     	; 0x6a12 <__ftoa_engine+0x28>
    6a04:	32 60       	ori	r19, 0x02	; 2
    6a06:	2e 5f       	subi	r18, 0xFE	; 254
    6a08:	3d 93       	st	X+, r19
    6a0a:	30 e3       	ldi	r19, 0x30	; 48
    6a0c:	2a 95       	dec	r18
    6a0e:	e1 f7       	brne	.-8      	; 0x6a08 <__ftoa_engine+0x1e>
    6a10:	08 95       	ret
    6a12:	9f 3f       	cpi	r25, 0xFF	; 255
    6a14:	30 f0       	brcs	.+12     	; 0x6a22 <__ftoa_engine+0x38>
    6a16:	80 38       	cpi	r24, 0x80	; 128
    6a18:	71 05       	cpc	r23, r1
    6a1a:	61 05       	cpc	r22, r1
    6a1c:	09 f0       	breq	.+2      	; 0x6a20 <__ftoa_engine+0x36>
    6a1e:	3c 5f       	subi	r19, 0xFC	; 252
    6a20:	3c 5f       	subi	r19, 0xFC	; 252
    6a22:	3d 93       	st	X+, r19
    6a24:	91 30       	cpi	r25, 0x01	; 1
    6a26:	08 f0       	brcs	.+2      	; 0x6a2a <__ftoa_engine+0x40>
    6a28:	80 68       	ori	r24, 0x80	; 128
    6a2a:	91 1d       	adc	r25, r1
    6a2c:	df 93       	push	r29
    6a2e:	cf 93       	push	r28
    6a30:	1f 93       	push	r17
    6a32:	0f 93       	push	r16
    6a34:	ff 92       	push	r15
    6a36:	ef 92       	push	r14
    6a38:	19 2f       	mov	r17, r25
    6a3a:	98 7f       	andi	r25, 0xF8	; 248
    6a3c:	96 95       	lsr	r25
    6a3e:	e9 2f       	mov	r30, r25
    6a40:	96 95       	lsr	r25
    6a42:	96 95       	lsr	r25
    6a44:	e9 0f       	add	r30, r25
    6a46:	ff 27       	eor	r31, r31
    6a48:	e4 50       	subi	r30, 0x04	; 4
    6a4a:	fe 4f       	sbci	r31, 0xFE	; 254
    6a4c:	99 27       	eor	r25, r25
    6a4e:	33 27       	eor	r19, r19
    6a50:	ee 24       	eor	r14, r14
    6a52:	ff 24       	eor	r15, r15
    6a54:	a7 01       	movw	r20, r14
    6a56:	e7 01       	movw	r28, r14
    6a58:	05 90       	lpm	r0, Z+
    6a5a:	08 94       	sec
    6a5c:	07 94       	ror	r0
    6a5e:	28 f4       	brcc	.+10     	; 0x6a6a <__ftoa_engine+0x80>
    6a60:	36 0f       	add	r19, r22
    6a62:	e7 1e       	adc	r14, r23
    6a64:	f8 1e       	adc	r15, r24
    6a66:	49 1f       	adc	r20, r25
    6a68:	51 1d       	adc	r21, r1
    6a6a:	66 0f       	add	r22, r22
    6a6c:	77 1f       	adc	r23, r23
    6a6e:	88 1f       	adc	r24, r24
    6a70:	99 1f       	adc	r25, r25
    6a72:	06 94       	lsr	r0
    6a74:	a1 f7       	brne	.-24     	; 0x6a5e <__ftoa_engine+0x74>
    6a76:	05 90       	lpm	r0, Z+
    6a78:	07 94       	ror	r0
    6a7a:	28 f4       	brcc	.+10     	; 0x6a86 <__ftoa_engine+0x9c>
    6a7c:	e7 0e       	add	r14, r23
    6a7e:	f8 1e       	adc	r15, r24
    6a80:	49 1f       	adc	r20, r25
    6a82:	56 1f       	adc	r21, r22
    6a84:	c1 1d       	adc	r28, r1
    6a86:	77 0f       	add	r23, r23
    6a88:	88 1f       	adc	r24, r24
    6a8a:	99 1f       	adc	r25, r25
    6a8c:	66 1f       	adc	r22, r22
    6a8e:	06 94       	lsr	r0
    6a90:	a1 f7       	brne	.-24     	; 0x6a7a <__ftoa_engine+0x90>
    6a92:	05 90       	lpm	r0, Z+
    6a94:	07 94       	ror	r0
    6a96:	28 f4       	brcc	.+10     	; 0x6aa2 <__ftoa_engine+0xb8>
    6a98:	f8 0e       	add	r15, r24
    6a9a:	49 1f       	adc	r20, r25
    6a9c:	56 1f       	adc	r21, r22
    6a9e:	c7 1f       	adc	r28, r23
    6aa0:	d1 1d       	adc	r29, r1
    6aa2:	88 0f       	add	r24, r24
    6aa4:	99 1f       	adc	r25, r25
    6aa6:	66 1f       	adc	r22, r22
    6aa8:	77 1f       	adc	r23, r23
    6aaa:	06 94       	lsr	r0
    6aac:	a1 f7       	brne	.-24     	; 0x6a96 <__ftoa_engine+0xac>
    6aae:	05 90       	lpm	r0, Z+
    6ab0:	07 94       	ror	r0
    6ab2:	20 f4       	brcc	.+8      	; 0x6abc <__ftoa_engine+0xd2>
    6ab4:	49 0f       	add	r20, r25
    6ab6:	56 1f       	adc	r21, r22
    6ab8:	c7 1f       	adc	r28, r23
    6aba:	d8 1f       	adc	r29, r24
    6abc:	99 0f       	add	r25, r25
    6abe:	66 1f       	adc	r22, r22
    6ac0:	77 1f       	adc	r23, r23
    6ac2:	88 1f       	adc	r24, r24
    6ac4:	06 94       	lsr	r0
    6ac6:	a9 f7       	brne	.-22     	; 0x6ab2 <__ftoa_engine+0xc8>
    6ac8:	84 91       	lpm	r24, Z
    6aca:	10 95       	com	r17
    6acc:	17 70       	andi	r17, 0x07	; 7
    6ace:	41 f0       	breq	.+16     	; 0x6ae0 <__ftoa_engine+0xf6>
    6ad0:	d6 95       	lsr	r29
    6ad2:	c7 95       	ror	r28
    6ad4:	57 95       	ror	r21
    6ad6:	47 95       	ror	r20
    6ad8:	f7 94       	ror	r15
    6ada:	e7 94       	ror	r14
    6adc:	1a 95       	dec	r17
    6ade:	c1 f7       	brne	.-16     	; 0x6ad0 <__ftoa_engine+0xe6>
    6ae0:	e2 ea       	ldi	r30, 0xA2	; 162
    6ae2:	f1 e0       	ldi	r31, 0x01	; 1
    6ae4:	68 94       	set
    6ae6:	15 90       	lpm	r1, Z+
    6ae8:	15 91       	lpm	r17, Z+
    6aea:	35 91       	lpm	r19, Z+
    6aec:	65 91       	lpm	r22, Z+
    6aee:	95 91       	lpm	r25, Z+
    6af0:	05 90       	lpm	r0, Z+
    6af2:	7f e2       	ldi	r23, 0x2F	; 47
    6af4:	73 95       	inc	r23
    6af6:	e1 18       	sub	r14, r1
    6af8:	f1 0a       	sbc	r15, r17
    6afa:	43 0b       	sbc	r20, r19
    6afc:	56 0b       	sbc	r21, r22
    6afe:	c9 0b       	sbc	r28, r25
    6b00:	d0 09       	sbc	r29, r0
    6b02:	c0 f7       	brcc	.-16     	; 0x6af4 <__ftoa_engine+0x10a>
    6b04:	e1 0c       	add	r14, r1
    6b06:	f1 1e       	adc	r15, r17
    6b08:	43 1f       	adc	r20, r19
    6b0a:	56 1f       	adc	r21, r22
    6b0c:	c9 1f       	adc	r28, r25
    6b0e:	d0 1d       	adc	r29, r0
    6b10:	7e f4       	brtc	.+30     	; 0x6b30 <__ftoa_engine+0x146>
    6b12:	70 33       	cpi	r23, 0x30	; 48
    6b14:	11 f4       	brne	.+4      	; 0x6b1a <__ftoa_engine+0x130>
    6b16:	8a 95       	dec	r24
    6b18:	e6 cf       	rjmp	.-52     	; 0x6ae6 <__ftoa_engine+0xfc>
    6b1a:	e8 94       	clt
    6b1c:	01 50       	subi	r16, 0x01	; 1
    6b1e:	30 f0       	brcs	.+12     	; 0x6b2c <__ftoa_engine+0x142>
    6b20:	08 0f       	add	r16, r24
    6b22:	0a f4       	brpl	.+2      	; 0x6b26 <__ftoa_engine+0x13c>
    6b24:	00 27       	eor	r16, r16
    6b26:	02 17       	cp	r16, r18
    6b28:	08 f4       	brcc	.+2      	; 0x6b2c <__ftoa_engine+0x142>
    6b2a:	20 2f       	mov	r18, r16
    6b2c:	23 95       	inc	r18
    6b2e:	02 2f       	mov	r16, r18
    6b30:	7a 33       	cpi	r23, 0x3A	; 58
    6b32:	28 f0       	brcs	.+10     	; 0x6b3e <__ftoa_engine+0x154>
    6b34:	79 e3       	ldi	r23, 0x39	; 57
    6b36:	7d 93       	st	X+, r23
    6b38:	2a 95       	dec	r18
    6b3a:	e9 f7       	brne	.-6      	; 0x6b36 <__ftoa_engine+0x14c>
    6b3c:	10 c0       	rjmp	.+32     	; 0x6b5e <__ftoa_engine+0x174>
    6b3e:	7d 93       	st	X+, r23
    6b40:	2a 95       	dec	r18
    6b42:	89 f6       	brne	.-94     	; 0x6ae6 <__ftoa_engine+0xfc>
    6b44:	06 94       	lsr	r0
    6b46:	97 95       	ror	r25
    6b48:	67 95       	ror	r22
    6b4a:	37 95       	ror	r19
    6b4c:	17 95       	ror	r17
    6b4e:	17 94       	ror	r1
    6b50:	e1 18       	sub	r14, r1
    6b52:	f1 0a       	sbc	r15, r17
    6b54:	43 0b       	sbc	r20, r19
    6b56:	56 0b       	sbc	r21, r22
    6b58:	c9 0b       	sbc	r28, r25
    6b5a:	d0 09       	sbc	r29, r0
    6b5c:	98 f0       	brcs	.+38     	; 0x6b84 <__ftoa_engine+0x19a>
    6b5e:	23 95       	inc	r18
    6b60:	7e 91       	ld	r23, -X
    6b62:	73 95       	inc	r23
    6b64:	7a 33       	cpi	r23, 0x3A	; 58
    6b66:	08 f0       	brcs	.+2      	; 0x6b6a <__ftoa_engine+0x180>
    6b68:	70 e3       	ldi	r23, 0x30	; 48
    6b6a:	7c 93       	st	X, r23
    6b6c:	20 13       	cpse	r18, r16
    6b6e:	b8 f7       	brcc	.-18     	; 0x6b5e <__ftoa_engine+0x174>
    6b70:	7e 91       	ld	r23, -X
    6b72:	70 61       	ori	r23, 0x10	; 16
    6b74:	7d 93       	st	X+, r23
    6b76:	30 f0       	brcs	.+12     	; 0x6b84 <__ftoa_engine+0x19a>
    6b78:	83 95       	inc	r24
    6b7a:	71 e3       	ldi	r23, 0x31	; 49
    6b7c:	7d 93       	st	X+, r23
    6b7e:	70 e3       	ldi	r23, 0x30	; 48
    6b80:	2a 95       	dec	r18
    6b82:	e1 f7       	brne	.-8      	; 0x6b7c <__ftoa_engine+0x192>
    6b84:	11 24       	eor	r1, r1
    6b86:	ef 90       	pop	r14
    6b88:	ff 90       	pop	r15
    6b8a:	0f 91       	pop	r16
    6b8c:	1f 91       	pop	r17
    6b8e:	cf 91       	pop	r28
    6b90:	df 91       	pop	r29
    6b92:	99 27       	eor	r25, r25
    6b94:	87 fd       	sbrc	r24, 7
    6b96:	90 95       	com	r25
    6b98:	08 95       	ret

00006b9a <strnlen_P>:
    6b9a:	fc 01       	movw	r30, r24
    6b9c:	05 90       	lpm	r0, Z+
    6b9e:	61 50       	subi	r22, 0x01	; 1
    6ba0:	70 40       	sbci	r23, 0x00	; 0
    6ba2:	01 10       	cpse	r0, r1
    6ba4:	d8 f7       	brcc	.-10     	; 0x6b9c <strnlen_P+0x2>
    6ba6:	80 95       	com	r24
    6ba8:	90 95       	com	r25
    6baa:	8e 0f       	add	r24, r30
    6bac:	9f 1f       	adc	r25, r31
    6bae:	08 95       	ret

00006bb0 <memcpy>:
    6bb0:	fb 01       	movw	r30, r22
    6bb2:	dc 01       	movw	r26, r24
    6bb4:	02 c0       	rjmp	.+4      	; 0x6bba <memcpy+0xa>
    6bb6:	01 90       	ld	r0, Z+
    6bb8:	0d 92       	st	X+, r0
    6bba:	41 50       	subi	r20, 0x01	; 1
    6bbc:	50 40       	sbci	r21, 0x00	; 0
    6bbe:	d8 f7       	brcc	.-10     	; 0x6bb6 <memcpy+0x6>
    6bc0:	08 95       	ret

00006bc2 <memset>:
    6bc2:	dc 01       	movw	r26, r24
    6bc4:	01 c0       	rjmp	.+2      	; 0x6bc8 <memset+0x6>
    6bc6:	6d 93       	st	X+, r22
    6bc8:	41 50       	subi	r20, 0x01	; 1
    6bca:	50 40       	sbci	r21, 0x00	; 0
    6bcc:	e0 f7       	brcc	.-8      	; 0x6bc6 <memset+0x4>
    6bce:	08 95       	ret

00006bd0 <strcasestr>:
    6bd0:	fb 01       	movw	r30, r22
    6bd2:	51 91       	ld	r21, Z+
    6bd4:	55 23       	and	r21, r21
    6bd6:	b1 f0       	breq	.+44     	; 0x6c04 <strcasestr+0x34>
    6bd8:	bf 01       	movw	r22, r30
    6bda:	dc 01       	movw	r26, r24
    6bdc:	05 2e       	mov	r0, r21
    6bde:	4d 91       	ld	r20, X+
    6be0:	44 23       	and	r20, r20
    6be2:	69 f0       	breq	.+26     	; 0x6bfe <strcasestr+0x2e>
    6be4:	10 d0       	rcall	.+32     	; 0x6c06 <strcasestr+0x36>
    6be6:	d9 f7       	brne	.-10     	; 0x6bde <strcasestr+0xe>
    6be8:	cd 01       	movw	r24, r26
    6bea:	01 90       	ld	r0, Z+
    6bec:	00 20       	and	r0, r0
    6bee:	49 f0       	breq	.+18     	; 0x6c02 <strcasestr+0x32>
    6bf0:	4d 91       	ld	r20, X+
    6bf2:	41 11       	cpse	r20, r1
    6bf4:	08 d0       	rcall	.+16     	; 0x6c06 <strcasestr+0x36>
    6bf6:	c9 f3       	breq	.-14     	; 0x6bea <strcasestr+0x1a>
    6bf8:	fb 01       	movw	r30, r22
    6bfa:	41 11       	cpse	r20, r1
    6bfc:	ee cf       	rjmp	.-36     	; 0x6bda <strcasestr+0xa>
    6bfe:	81 e0       	ldi	r24, 0x01	; 1
    6c00:	90 e0       	ldi	r25, 0x00	; 0
    6c02:	01 97       	sbiw	r24, 0x01	; 1
    6c04:	08 95       	ret
    6c06:	40 25       	eor	r20, r0
    6c08:	39 f0       	breq	.+14     	; 0x6c18 <strcasestr+0x48>
    6c0a:	40 32       	cpi	r20, 0x20	; 32
    6c0c:	29 f4       	brne	.+10     	; 0x6c18 <strcasestr+0x48>
    6c0e:	40 29       	or	r20, r0
    6c10:	4b 57       	subi	r20, 0x7B	; 123
    6c12:	46 5e       	subi	r20, 0xE6	; 230
    6c14:	08 f0       	brcs	.+2      	; 0x6c18 <strcasestr+0x48>
    6c16:	18 94       	sez
    6c18:	08 95       	ret

00006c1a <strcat>:
    6c1a:	fb 01       	movw	r30, r22
    6c1c:	dc 01       	movw	r26, r24
    6c1e:	0d 90       	ld	r0, X+
    6c20:	00 20       	and	r0, r0
    6c22:	e9 f7       	brne	.-6      	; 0x6c1e <strcat+0x4>
    6c24:	11 97       	sbiw	r26, 0x01	; 1
    6c26:	01 90       	ld	r0, Z+
    6c28:	0d 92       	st	X+, r0
    6c2a:	00 20       	and	r0, r0
    6c2c:	e1 f7       	brne	.-8      	; 0x6c26 <strcat+0xc>
    6c2e:	08 95       	ret

00006c30 <strcpy>:
    6c30:	fb 01       	movw	r30, r22
    6c32:	dc 01       	movw	r26, r24
    6c34:	01 90       	ld	r0, Z+
    6c36:	0d 92       	st	X+, r0
    6c38:	00 20       	and	r0, r0
    6c3a:	e1 f7       	brne	.-8      	; 0x6c34 <strcpy+0x4>
    6c3c:	08 95       	ret

00006c3e <strncasecmp>:
    6c3e:	fb 01       	movw	r30, r22
    6c40:	dc 01       	movw	r26, r24
    6c42:	41 50       	subi	r20, 0x01	; 1
    6c44:	50 40       	sbci	r21, 0x00	; 0
    6c46:	88 f0       	brcs	.+34     	; 0x6c6a <strncasecmp+0x2c>
    6c48:	8d 91       	ld	r24, X+
    6c4a:	81 34       	cpi	r24, 0x41	; 65
    6c4c:	1c f0       	brlt	.+6      	; 0x6c54 <strncasecmp+0x16>
    6c4e:	8b 35       	cpi	r24, 0x5B	; 91
    6c50:	0c f4       	brge	.+2      	; 0x6c54 <strncasecmp+0x16>
    6c52:	80 5e       	subi	r24, 0xE0	; 224
    6c54:	61 91       	ld	r22, Z+
    6c56:	61 34       	cpi	r22, 0x41	; 65
    6c58:	1c f0       	brlt	.+6      	; 0x6c60 <strncasecmp+0x22>
    6c5a:	6b 35       	cpi	r22, 0x5B	; 91
    6c5c:	0c f4       	brge	.+2      	; 0x6c60 <strncasecmp+0x22>
    6c5e:	60 5e       	subi	r22, 0xE0	; 224
    6c60:	86 1b       	sub	r24, r22
    6c62:	61 11       	cpse	r22, r1
    6c64:	71 f3       	breq	.-36     	; 0x6c42 <strncasecmp+0x4>
    6c66:	99 0b       	sbc	r25, r25
    6c68:	08 95       	ret
    6c6a:	88 1b       	sub	r24, r24
    6c6c:	fc cf       	rjmp	.-8      	; 0x6c66 <strncasecmp+0x28>

00006c6e <strnlen>:
    6c6e:	fc 01       	movw	r30, r24
    6c70:	61 50       	subi	r22, 0x01	; 1
    6c72:	70 40       	sbci	r23, 0x00	; 0
    6c74:	01 90       	ld	r0, Z+
    6c76:	01 10       	cpse	r0, r1
    6c78:	d8 f7       	brcc	.-10     	; 0x6c70 <strnlen+0x2>
    6c7a:	80 95       	com	r24
    6c7c:	90 95       	com	r25
    6c7e:	8e 0f       	add	r24, r30
    6c80:	9f 1f       	adc	r25, r31
    6c82:	08 95       	ret

00006c84 <fputc>:
    6c84:	0f 93       	push	r16
    6c86:	1f 93       	push	r17
    6c88:	cf 93       	push	r28
    6c8a:	df 93       	push	r29
    6c8c:	fb 01       	movw	r30, r22
    6c8e:	23 81       	ldd	r18, Z+3	; 0x03
    6c90:	21 fd       	sbrc	r18, 1
    6c92:	03 c0       	rjmp	.+6      	; 0x6c9a <fputc+0x16>
    6c94:	8f ef       	ldi	r24, 0xFF	; 255
    6c96:	9f ef       	ldi	r25, 0xFF	; 255
    6c98:	2c c0       	rjmp	.+88     	; 0x6cf2 <fputc+0x6e>
    6c9a:	22 ff       	sbrs	r18, 2
    6c9c:	16 c0       	rjmp	.+44     	; 0x6cca <fputc+0x46>
    6c9e:	46 81       	ldd	r20, Z+6	; 0x06
    6ca0:	57 81       	ldd	r21, Z+7	; 0x07
    6ca2:	24 81       	ldd	r18, Z+4	; 0x04
    6ca4:	35 81       	ldd	r19, Z+5	; 0x05
    6ca6:	42 17       	cp	r20, r18
    6ca8:	53 07       	cpc	r21, r19
    6caa:	44 f4       	brge	.+16     	; 0x6cbc <fputc+0x38>
    6cac:	a0 81       	ld	r26, Z
    6cae:	b1 81       	ldd	r27, Z+1	; 0x01
    6cb0:	9d 01       	movw	r18, r26
    6cb2:	2f 5f       	subi	r18, 0xFF	; 255
    6cb4:	3f 4f       	sbci	r19, 0xFF	; 255
    6cb6:	31 83       	std	Z+1, r19	; 0x01
    6cb8:	20 83       	st	Z, r18
    6cba:	8c 93       	st	X, r24
    6cbc:	26 81       	ldd	r18, Z+6	; 0x06
    6cbe:	37 81       	ldd	r19, Z+7	; 0x07
    6cc0:	2f 5f       	subi	r18, 0xFF	; 255
    6cc2:	3f 4f       	sbci	r19, 0xFF	; 255
    6cc4:	37 83       	std	Z+7, r19	; 0x07
    6cc6:	26 83       	std	Z+6, r18	; 0x06
    6cc8:	14 c0       	rjmp	.+40     	; 0x6cf2 <fputc+0x6e>
    6cca:	8b 01       	movw	r16, r22
    6ccc:	ec 01       	movw	r28, r24
    6cce:	fb 01       	movw	r30, r22
    6cd0:	00 84       	ldd	r0, Z+8	; 0x08
    6cd2:	f1 85       	ldd	r31, Z+9	; 0x09
    6cd4:	e0 2d       	mov	r30, r0
    6cd6:	19 95       	eicall
    6cd8:	89 2b       	or	r24, r25
    6cda:	e1 f6       	brne	.-72     	; 0x6c94 <fputc+0x10>
    6cdc:	d8 01       	movw	r26, r16
    6cde:	16 96       	adiw	r26, 0x06	; 6
    6ce0:	8d 91       	ld	r24, X+
    6ce2:	9c 91       	ld	r25, X
    6ce4:	17 97       	sbiw	r26, 0x07	; 7
    6ce6:	01 96       	adiw	r24, 0x01	; 1
    6ce8:	17 96       	adiw	r26, 0x07	; 7
    6cea:	9c 93       	st	X, r25
    6cec:	8e 93       	st	-X, r24
    6cee:	16 97       	sbiw	r26, 0x06	; 6
    6cf0:	ce 01       	movw	r24, r28
    6cf2:	df 91       	pop	r29
    6cf4:	cf 91       	pop	r28
    6cf6:	1f 91       	pop	r17
    6cf8:	0f 91       	pop	r16
    6cfa:	08 95       	ret

00006cfc <printf>:
    6cfc:	cf 93       	push	r28
    6cfe:	df 93       	push	r29
    6d00:	cd b7       	in	r28, 0x3d	; 61
    6d02:	de b7       	in	r29, 0x3e	; 62
    6d04:	ae 01       	movw	r20, r28
    6d06:	4a 5f       	subi	r20, 0xFA	; 250
    6d08:	5f 4f       	sbci	r21, 0xFF	; 255
    6d0a:	fa 01       	movw	r30, r20
    6d0c:	61 91       	ld	r22, Z+
    6d0e:	71 91       	ld	r23, Z+
    6d10:	af 01       	movw	r20, r30
    6d12:	80 91 f8 17 	lds	r24, 0x17F8	; 0x8017f8 <__iob+0x2>
    6d16:	90 91 f9 17 	lds	r25, 0x17F9	; 0x8017f9 <__iob+0x3>
    6d1a:	59 d9       	rcall	.-3406   	; 0x5fce <vfprintf>
    6d1c:	df 91       	pop	r29
    6d1e:	cf 91       	pop	r28
    6d20:	08 95       	ret

00006d22 <puts>:
    6d22:	0f 93       	push	r16
    6d24:	1f 93       	push	r17
    6d26:	cf 93       	push	r28
    6d28:	df 93       	push	r29
    6d2a:	e0 91 f8 17 	lds	r30, 0x17F8	; 0x8017f8 <__iob+0x2>
    6d2e:	f0 91 f9 17 	lds	r31, 0x17F9	; 0x8017f9 <__iob+0x3>
    6d32:	23 81       	ldd	r18, Z+3	; 0x03
    6d34:	21 ff       	sbrs	r18, 1
    6d36:	1b c0       	rjmp	.+54     	; 0x6d6e <puts+0x4c>
    6d38:	8c 01       	movw	r16, r24
    6d3a:	d0 e0       	ldi	r29, 0x00	; 0
    6d3c:	c0 e0       	ldi	r28, 0x00	; 0
    6d3e:	f8 01       	movw	r30, r16
    6d40:	81 91       	ld	r24, Z+
    6d42:	8f 01       	movw	r16, r30
    6d44:	60 91 f8 17 	lds	r22, 0x17F8	; 0x8017f8 <__iob+0x2>
    6d48:	70 91 f9 17 	lds	r23, 0x17F9	; 0x8017f9 <__iob+0x3>
    6d4c:	db 01       	movw	r26, r22
    6d4e:	18 96       	adiw	r26, 0x08	; 8
    6d50:	ed 91       	ld	r30, X+
    6d52:	fc 91       	ld	r31, X
    6d54:	19 97       	sbiw	r26, 0x09	; 9
    6d56:	88 23       	and	r24, r24
    6d58:	31 f0       	breq	.+12     	; 0x6d66 <puts+0x44>
    6d5a:	19 95       	eicall
    6d5c:	89 2b       	or	r24, r25
    6d5e:	79 f3       	breq	.-34     	; 0x6d3e <puts+0x1c>
    6d60:	df ef       	ldi	r29, 0xFF	; 255
    6d62:	cf ef       	ldi	r28, 0xFF	; 255
    6d64:	ec cf       	rjmp	.-40     	; 0x6d3e <puts+0x1c>
    6d66:	8a e0       	ldi	r24, 0x0A	; 10
    6d68:	19 95       	eicall
    6d6a:	89 2b       	or	r24, r25
    6d6c:	19 f0       	breq	.+6      	; 0x6d74 <puts+0x52>
    6d6e:	8f ef       	ldi	r24, 0xFF	; 255
    6d70:	9f ef       	ldi	r25, 0xFF	; 255
    6d72:	02 c0       	rjmp	.+4      	; 0x6d78 <puts+0x56>
    6d74:	8d 2f       	mov	r24, r29
    6d76:	9c 2f       	mov	r25, r28
    6d78:	df 91       	pop	r29
    6d7a:	cf 91       	pop	r28
    6d7c:	1f 91       	pop	r17
    6d7e:	0f 91       	pop	r16
    6d80:	08 95       	ret

00006d82 <sprintf>:
    6d82:	0f 93       	push	r16
    6d84:	1f 93       	push	r17
    6d86:	cf 93       	push	r28
    6d88:	df 93       	push	r29
    6d8a:	cd b7       	in	r28, 0x3d	; 61
    6d8c:	de b7       	in	r29, 0x3e	; 62
    6d8e:	2e 97       	sbiw	r28, 0x0e	; 14
    6d90:	0f b6       	in	r0, 0x3f	; 63
    6d92:	f8 94       	cli
    6d94:	de bf       	out	0x3e, r29	; 62
    6d96:	0f be       	out	0x3f, r0	; 63
    6d98:	cd bf       	out	0x3d, r28	; 61
    6d9a:	0e 89       	ldd	r16, Y+22	; 0x16
    6d9c:	1f 89       	ldd	r17, Y+23	; 0x17
    6d9e:	86 e0       	ldi	r24, 0x06	; 6
    6da0:	8c 83       	std	Y+4, r24	; 0x04
    6da2:	1a 83       	std	Y+2, r17	; 0x02
    6da4:	09 83       	std	Y+1, r16	; 0x01
    6da6:	8f ef       	ldi	r24, 0xFF	; 255
    6da8:	9f e7       	ldi	r25, 0x7F	; 127
    6daa:	9e 83       	std	Y+6, r25	; 0x06
    6dac:	8d 83       	std	Y+5, r24	; 0x05
    6dae:	ae 01       	movw	r20, r28
    6db0:	46 5e       	subi	r20, 0xE6	; 230
    6db2:	5f 4f       	sbci	r21, 0xFF	; 255
    6db4:	68 8d       	ldd	r22, Y+24	; 0x18
    6db6:	79 8d       	ldd	r23, Y+25	; 0x19
    6db8:	ce 01       	movw	r24, r28
    6dba:	01 96       	adiw	r24, 0x01	; 1
    6dbc:	08 d9       	rcall	.-3568   	; 0x5fce <vfprintf>
    6dbe:	ef 81       	ldd	r30, Y+7	; 0x07
    6dc0:	f8 85       	ldd	r31, Y+8	; 0x08
    6dc2:	e0 0f       	add	r30, r16
    6dc4:	f1 1f       	adc	r31, r17
    6dc6:	10 82       	st	Z, r1
    6dc8:	2e 96       	adiw	r28, 0x0e	; 14
    6dca:	0f b6       	in	r0, 0x3f	; 63
    6dcc:	f8 94       	cli
    6dce:	de bf       	out	0x3e, r29	; 62
    6dd0:	0f be       	out	0x3f, r0	; 63
    6dd2:	cd bf       	out	0x3d, r28	; 61
    6dd4:	df 91       	pop	r29
    6dd6:	cf 91       	pop	r28
    6dd8:	1f 91       	pop	r17
    6dda:	0f 91       	pop	r16
    6ddc:	08 95       	ret

00006dde <__ultoa_invert>:
    6dde:	fa 01       	movw	r30, r20
    6de0:	aa 27       	eor	r26, r26
    6de2:	28 30       	cpi	r18, 0x08	; 8
    6de4:	51 f1       	breq	.+84     	; 0x6e3a <__ultoa_invert+0x5c>
    6de6:	20 31       	cpi	r18, 0x10	; 16
    6de8:	81 f1       	breq	.+96     	; 0x6e4a <__ultoa_invert+0x6c>
    6dea:	e8 94       	clt
    6dec:	6f 93       	push	r22
    6dee:	6e 7f       	andi	r22, 0xFE	; 254
    6df0:	6e 5f       	subi	r22, 0xFE	; 254
    6df2:	7f 4f       	sbci	r23, 0xFF	; 255
    6df4:	8f 4f       	sbci	r24, 0xFF	; 255
    6df6:	9f 4f       	sbci	r25, 0xFF	; 255
    6df8:	af 4f       	sbci	r26, 0xFF	; 255
    6dfa:	b1 e0       	ldi	r27, 0x01	; 1
    6dfc:	3e d0       	rcall	.+124    	; 0x6e7a <__ultoa_invert+0x9c>
    6dfe:	b4 e0       	ldi	r27, 0x04	; 4
    6e00:	3c d0       	rcall	.+120    	; 0x6e7a <__ultoa_invert+0x9c>
    6e02:	67 0f       	add	r22, r23
    6e04:	78 1f       	adc	r23, r24
    6e06:	89 1f       	adc	r24, r25
    6e08:	9a 1f       	adc	r25, r26
    6e0a:	a1 1d       	adc	r26, r1
    6e0c:	68 0f       	add	r22, r24
    6e0e:	79 1f       	adc	r23, r25
    6e10:	8a 1f       	adc	r24, r26
    6e12:	91 1d       	adc	r25, r1
    6e14:	a1 1d       	adc	r26, r1
    6e16:	6a 0f       	add	r22, r26
    6e18:	71 1d       	adc	r23, r1
    6e1a:	81 1d       	adc	r24, r1
    6e1c:	91 1d       	adc	r25, r1
    6e1e:	a1 1d       	adc	r26, r1
    6e20:	20 d0       	rcall	.+64     	; 0x6e62 <__ultoa_invert+0x84>
    6e22:	09 f4       	brne	.+2      	; 0x6e26 <__ultoa_invert+0x48>
    6e24:	68 94       	set
    6e26:	3f 91       	pop	r19
    6e28:	2a e0       	ldi	r18, 0x0A	; 10
    6e2a:	26 9f       	mul	r18, r22
    6e2c:	11 24       	eor	r1, r1
    6e2e:	30 19       	sub	r19, r0
    6e30:	30 5d       	subi	r19, 0xD0	; 208
    6e32:	31 93       	st	Z+, r19
    6e34:	de f6       	brtc	.-74     	; 0x6dec <__ultoa_invert+0xe>
    6e36:	cf 01       	movw	r24, r30
    6e38:	08 95       	ret
    6e3a:	46 2f       	mov	r20, r22
    6e3c:	47 70       	andi	r20, 0x07	; 7
    6e3e:	40 5d       	subi	r20, 0xD0	; 208
    6e40:	41 93       	st	Z+, r20
    6e42:	b3 e0       	ldi	r27, 0x03	; 3
    6e44:	0f d0       	rcall	.+30     	; 0x6e64 <__ultoa_invert+0x86>
    6e46:	c9 f7       	brne	.-14     	; 0x6e3a <__ultoa_invert+0x5c>
    6e48:	f6 cf       	rjmp	.-20     	; 0x6e36 <__ultoa_invert+0x58>
    6e4a:	46 2f       	mov	r20, r22
    6e4c:	4f 70       	andi	r20, 0x0F	; 15
    6e4e:	40 5d       	subi	r20, 0xD0	; 208
    6e50:	4a 33       	cpi	r20, 0x3A	; 58
    6e52:	18 f0       	brcs	.+6      	; 0x6e5a <__ultoa_invert+0x7c>
    6e54:	49 5d       	subi	r20, 0xD9	; 217
    6e56:	31 fd       	sbrc	r19, 1
    6e58:	40 52       	subi	r20, 0x20	; 32
    6e5a:	41 93       	st	Z+, r20
    6e5c:	02 d0       	rcall	.+4      	; 0x6e62 <__ultoa_invert+0x84>
    6e5e:	a9 f7       	brne	.-22     	; 0x6e4a <__ultoa_invert+0x6c>
    6e60:	ea cf       	rjmp	.-44     	; 0x6e36 <__ultoa_invert+0x58>
    6e62:	b4 e0       	ldi	r27, 0x04	; 4
    6e64:	a6 95       	lsr	r26
    6e66:	97 95       	ror	r25
    6e68:	87 95       	ror	r24
    6e6a:	77 95       	ror	r23
    6e6c:	67 95       	ror	r22
    6e6e:	ba 95       	dec	r27
    6e70:	c9 f7       	brne	.-14     	; 0x6e64 <__ultoa_invert+0x86>
    6e72:	00 97       	sbiw	r24, 0x00	; 0
    6e74:	61 05       	cpc	r22, r1
    6e76:	71 05       	cpc	r23, r1
    6e78:	08 95       	ret
    6e7a:	9b 01       	movw	r18, r22
    6e7c:	ac 01       	movw	r20, r24
    6e7e:	0a 2e       	mov	r0, r26
    6e80:	06 94       	lsr	r0
    6e82:	57 95       	ror	r21
    6e84:	47 95       	ror	r20
    6e86:	37 95       	ror	r19
    6e88:	27 95       	ror	r18
    6e8a:	ba 95       	dec	r27
    6e8c:	c9 f7       	brne	.-14     	; 0x6e80 <__ultoa_invert+0xa2>
    6e8e:	62 0f       	add	r22, r18
    6e90:	73 1f       	adc	r23, r19
    6e92:	84 1f       	adc	r24, r20
    6e94:	95 1f       	adc	r25, r21
    6e96:	a0 1d       	adc	r26, r0
    6e98:	08 95       	ret

00006e9a <_exit>:
    6e9a:	f8 94       	cli

00006e9c <__stop_program>:
    6e9c:	ff cf       	rjmp	.-2      	; 0x6e9c <__stop_program>

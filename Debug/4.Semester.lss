
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000062c  00800200  00006a88  00006b1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006a88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ed1  0080082c  0080082c  00007148  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007148  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000071a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b40  00000000  00000000  000071e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ddf4  00000000  00000000  00007d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000038df  00000000  00000000  00015b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006d2f  00000000  00000000  000193f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002828  00000000  00000000  00020128  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004385  00000000  00000000  00022950  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c6cd  00000000  00000000  00026cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a70  00000000  00000000  000333a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	34 c7       	rjmp	.+3688   	; 0xe9a <__vector_12>
      32:	00 00       	nop
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 c6 25 	jmp	0x4b8c	; 0x4b8c <__vector_25>
      68:	0c 94 18 26 	jmp	0x4c30	; 0x4c30 <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 5c 26 	jmp	0x4cb8	; 0x4cb8 <__vector_36>
      94:	0c 94 ae 26 	jmp	0x4d5c	; 0x4d5c <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 fa 2a 	jmp	0x55f4	; 0x55f4 <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 f2 26 	jmp	0x4de4	; 0x4de4 <__vector_51>
      d0:	0c 94 44 27 	jmp	0x4e88	; 0x4e88 <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 88 27 	jmp	0x4f10	; 0x4f10 <__vector_54>
      dc:	0c 94 da 27 	jmp	0x4fb4	; 0x4fb4 <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	64 1b       	sub	r22, r20
      e6:	64 1b       	sub	r22, r20
      e8:	64 1b       	sub	r22, r20
      ea:	9b 1b       	sub	r25, r27
      ec:	a3 1b       	sub	r26, r19
      ee:	b8 1b       	sub	r27, r24
      f0:	64 1b       	sub	r22, r20
      f2:	64 1b       	sub	r22, r20
      f4:	9b 1b       	sub	r25, r27
      f6:	a3 1b       	sub	r26, r19
      f8:	1c 2b       	or	r17, r28
      fa:	8c 2b       	or	r24, r28
      fc:	8c 2b       	or	r24, r28
      fe:	8c 2b       	or	r24, r28
     100:	8c 2b       	or	r24, r28
     102:	8c 2b       	or	r24, r28
     104:	8c 2b       	or	r24, r28
     106:	8c 2b       	or	r24, r28
     108:	1c 2b       	or	r17, r28
     10a:	8c 2b       	or	r24, r28
     10c:	8c 2b       	or	r24, r28
     10e:	8c 2b       	or	r24, r28
     110:	8c 2b       	or	r24, r28
     112:	8c 2b       	or	r24, r28
     114:	8c 2b       	or	r24, r28
     116:	8c 2b       	or	r24, r28
     118:	1e 2b       	or	r17, r30
     11a:	8c 2b       	or	r24, r28
     11c:	8c 2b       	or	r24, r28
     11e:	8c 2b       	or	r24, r28
     120:	8c 2b       	or	r24, r28
     122:	8c 2b       	or	r24, r28
     124:	8c 2b       	or	r24, r28
     126:	8c 2b       	or	r24, r28
     128:	8c 2b       	or	r24, r28
     12a:	8c 2b       	or	r24, r28
     12c:	8c 2b       	or	r24, r28
     12e:	8c 2b       	or	r24, r28
     130:	8c 2b       	or	r24, r28
     132:	8c 2b       	or	r24, r28
     134:	8c 2b       	or	r24, r28
     136:	8c 2b       	or	r24, r28
     138:	1e 2b       	or	r17, r30
     13a:	8c 2b       	or	r24, r28
     13c:	8c 2b       	or	r24, r28
     13e:	8c 2b       	or	r24, r28
     140:	8c 2b       	or	r24, r28
     142:	8c 2b       	or	r24, r28
     144:	8c 2b       	or	r24, r28
     146:	8c 2b       	or	r24, r28
     148:	8c 2b       	or	r24, r28
     14a:	8c 2b       	or	r24, r28
     14c:	8c 2b       	or	r24, r28
     14e:	8c 2b       	or	r24, r28
     150:	8c 2b       	or	r24, r28
     152:	8c 2b       	or	r24, r28
     154:	8c 2b       	or	r24, r28
     156:	8c 2b       	or	r24, r28
     158:	88 2b       	or	r24, r24
     15a:	8c 2b       	or	r24, r28
     15c:	8c 2b       	or	r24, r28
     15e:	8c 2b       	or	r24, r28
     160:	8c 2b       	or	r24, r28
     162:	8c 2b       	or	r24, r28
     164:	8c 2b       	or	r24, r28
     166:	8c 2b       	or	r24, r28
     168:	53 2b       	or	r21, r19
     16a:	8c 2b       	or	r24, r28
     16c:	8c 2b       	or	r24, r28
     16e:	8c 2b       	or	r24, r28
     170:	8c 2b       	or	r24, r28
     172:	8c 2b       	or	r24, r28
     174:	8c 2b       	or	r24, r28
     176:	8c 2b       	or	r24, r28
     178:	8c 2b       	or	r24, r28
     17a:	8c 2b       	or	r24, r28
     17c:	8c 2b       	or	r24, r28
     17e:	8c 2b       	or	r24, r28
     180:	8c 2b       	or	r24, r28
     182:	8c 2b       	or	r24, r28
     184:	8c 2b       	or	r24, r28
     186:	8c 2b       	or	r24, r28
     188:	47 2b       	or	r20, r23
     18a:	8c 2b       	or	r24, r28
     18c:	8c 2b       	or	r24, r28
     18e:	8c 2b       	or	r24, r28
     190:	8c 2b       	or	r24, r28
     192:	8c 2b       	or	r24, r28
     194:	8c 2b       	or	r24, r28
     196:	8c 2b       	or	r24, r28
     198:	6b 2b       	or	r22, r27

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <prvCheckTasksWaitingTermination>
     2a0:	80 91 5b 14 	lds	r24, 0x145B	; 0x80145b <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	32 d5       	rcall	.+2660   	; 0xd0e <vPortYield>
     2aa:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <prvProcessTimerOrBlockTask>
     2c8:	0e 94 2d 1b 	call	0x365a	; 0x365a <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	18 e0       	ldi	r17, 0x08	; 8
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	e8 e8       	ldi	r30, 0x88	; 136
     2e6:	fa e6       	ldi	r31, 0x6A	; 106
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	ac 32       	cpi	r26, 0x2C	; 44
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	26 e1       	ldi	r18, 0x16	; 22
     2fa:	ac e2       	ldi	r26, 0x2C	; 44
     2fc:	b8 e0       	ldi	r27, 0x08	; 8
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	ad 3f       	cpi	r26, 0xFD	; 253
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 b8 1c 	call	0x3970	; 0x3970 <main>
     30c:	0c 94 42 35 	jmp	0x6a84	; 0x6a84 <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <Application_getEventGroup>:
// Declare a variable to hold the created event group.
EventGroupHandle_t xCreatedEventGroup;

EventGroupHandle_t Application_getEventGroup(){
	return xCreatedEventGroup;
}
     312:	80 91 e3 16 	lds	r24, 0x16E3	; 0x8016e3 <xCreatedEventGroup>
     316:	90 91 e4 16 	lds	r25, 0x16E4	; 0x8016e4 <xCreatedEventGroup+0x1>
     31a:	08 95       	ret

0000031c <aFunctionToClearBits>:
void aFunctionToClearBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Clear bit 0 and bit 4 in xEventGroup. */
  uxBits = xEventGroupClearBits(
     31c:	41 e1       	ldi	r20, 0x11	; 17
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	22 c2       	rjmp	.+1092   	; 0x76a <xEventGroupClearBits>
     326:	08 95       	ret

00000328 <aFunctionToWaitBits>:
EventGroupHandle_t Application_getEventGroup(){
	return xCreatedEventGroup;
}

void aFunctionToWaitBits( EventGroupHandle_t xEventGroup )
{
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	ec 01       	movw	r28, r24
EventBits_t uxBits;
const TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;

  /* Wait a maximum of 100ms for either bit 0 or bit 4 to be set within
  the event group.  Clear the bits before exiting. */
  uxBits = xEventGroupWaitBits(
     338:	0f 2e       	mov	r0, r31
     33a:	f6 e0       	ldi	r31, 0x06	; 6
     33c:	cf 2e       	mov	r12, r31
     33e:	d1 2c       	mov	r13, r1
     340:	e1 2c       	mov	r14, r1
     342:	f1 2c       	mov	r15, r1
     344:	f0 2d       	mov	r31, r0
     346:	01 e0       	ldi	r16, 0x01	; 1
     348:	20 e0       	ldi	r18, 0x00	; 0
     34a:	41 e1       	ldi	r20, 0x11	; 17
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	6b d1       	rcall	.+726    	; 0x62a <xEventGroupWaitBits>
            BIT_0 | BIT_4, /* The bits within the event group to wait for. */
            pdFALSE,        /* BIT_0 & BIT_4 should not be cleared before returning. */
            pdTRUE,       /* Wait for both bits, either bit will do. */
            xTicksToWait );/* Wait a maximum of 100ms for either bit to be set. */

  if( ( uxBits & ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )
     354:	dc 01       	movw	r26, r24
     356:	cb 01       	movw	r24, r22
     358:	81 71       	andi	r24, 0x11	; 17
     35a:	99 27       	eor	r25, r25
     35c:	aa 27       	eor	r26, r26
     35e:	bb 27       	eor	r27, r27
     360:	41 97       	sbiw	r24, 0x11	; 17
     362:	a1 05       	cpc	r26, r1
     364:	b1 05       	cpc	r27, r1
     366:	a9 f4       	brne	.+42     	; 0x392 <aFunctionToWaitBits+0x6a>
  {
      /* xEventGroupWaitBits() returned because both bits were set. */
	  printf("setting the bits, they are set");
     368:	8f e6       	ldi	r24, 0x6F	; 111
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	9f 93       	push	r25
     36e:	8f 93       	push	r24
     370:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
	  SensorDataPackageHandler_SetHumidity(hih820_getHumidityInUint16());
     374:	0e 94 22 1c 	call	0x3844	; 0x3844 <hih820_getHumidityInUint16>
     378:	0e 94 ef 1c 	call	0x39de	; 0x39de <SensorDataPackageHandler_SetHumidity>
	  SensorDataPackageHandler_SetTemperature(hih820_getTemperatureInUint16());
     37c:	0e 94 31 1c 	call	0x3862	; 0x3862 <hih820_getTemperatureInUint16>
     380:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <SensorDataPackageHandler_SetTemperature>
	  SensorDataPackageHandler_SetCO2(CO2_getCO2InUint16());
     384:	5f d0       	rcall	.+190    	; 0x444 <CO2_getCO2InUint16>
     386:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <SensorDataPackageHandler_SetCO2>
	  aFunctionToClearBits( xEventGroup );
     38a:	ce 01       	movw	r24, r28
     38c:	c7 df       	rcall	.-114    	; 0x31c <aFunctionToClearBits>
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
  else
  {
      /* xEventGroupWaitBits() returned because xTicksToWait ticks passed
      without either BIT_0 or BIT_4 becoming set. */
  }
}
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	0f 91       	pop	r16
     398:	ff 90       	pop	r15
     39a:	ef 90       	pop	r14
     39c:	df 90       	pop	r13
     39e:	cf 90       	pop	r12
     3a0:	08 95       	ret

000003a2 <Application_handler_task>:
	,  Application_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void Application_handler_task(void *pvParameters)
{
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	00 d0       	rcall	.+0      	; 0x3a8 <Application_handler_task+0x6>
     3a8:	1f 92       	push	r1
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
	printf("startApplication");
     3ae:	8e e8       	ldi	r24, 0x8E	; 142
     3b0:	92 e0       	ldi	r25, 0x02	; 2
     3b2:	9f 93       	push	r25
     3b4:	8f 93       	push	r24
     3b6:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
	(void)pvParameters;
	xCreatedEventGroup = xEventGroupCreate();
     3ba:	24 d1       	rcall	.+584    	; 0x604 <xEventGroupCreate>
     3bc:	90 93 e4 16 	sts	0x16E4, r25	; 0x8016e4 <xCreatedEventGroup+0x1>
     3c0:	80 93 e3 16 	sts	0x16E3, r24	; 0x8016e3 <xCreatedEventGroup>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300UL); // Upload message every 1 minutes (300 ms)
	xLastWakeTime = xTaskGetTickCount();
     3c4:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <xTaskGetTickCount>
     3c8:	69 83       	std	Y+1, r22	; 0x01
     3ca:	7a 83       	std	Y+2, r23	; 0x02
     3cc:	8b 83       	std	Y+3, r24	; 0x03
     3ce:	9c 83       	std	Y+4, r25	; 0x04
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     3d4:	42 e1       	ldi	r20, 0x12	; 18
     3d6:	50 e0       	ldi	r21, 0x00	; 0
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	ce 01       	movw	r24, r28
     3de:	01 96       	adiw	r24, 0x01	; 1
     3e0:	0e 94 0d 12 	call	0x241a	; 0x241a <xTaskDelayUntil>
		// Was the event group created successfully?
		if( xCreatedEventGroup == NULL )
     3e4:	80 91 e3 16 	lds	r24, 0x16E3	; 0x8016e3 <xCreatedEventGroup>
     3e8:	90 91 e4 16 	lds	r25, 0x16E4	; 0x8016e4 <xCreatedEventGroup+0x1>
     3ec:	00 97       	sbiw	r24, 0x00	; 0
		// The event group was not created because there was insufficient
		// FreeRTOS heap available.
		}
		else
		{
			aFunctionToWaitBits( xCreatedEventGroup);
     3ee:	91 f3       	breq	.-28     	; 0x3d4 <Application_handler_task+0x32>
     3f0:	9b df       	rcall	.-202    	; 0x328 <aFunctionToWaitBits>
     3f2:	f0 cf       	rjmp	.-32     	; 0x3d4 <Application_handler_task+0x32>

000003f4 <Application_handler_initialise>:

static char _out_buf[100];

void Application_handler_task( void *pvParameters );

void Application_handler_initialise(UBaseType_t Application_task_priority){
     3f4:	ef 92       	push	r14
     3f6:	ff 92       	push	r15
     3f8:	0f 93       	push	r16
	xTaskCreate(
     3fa:	e1 2c       	mov	r14, r1
     3fc:	f1 2c       	mov	r15, r1
     3fe:	08 2f       	mov	r16, r24
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	40 ec       	ldi	r20, 0xC0	; 192
     406:	50 e0       	ldi	r21, 0x00	; 0
     408:	6f e9       	ldi	r22, 0x9F	; 159
     40a:	72 e0       	ldi	r23, 0x02	; 2
     40c:	81 ed       	ldi	r24, 0xD1	; 209
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <xTaskCreate>
	,  "ApplicationHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  Application_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     414:	0f 91       	pop	r16
     416:	ff 90       	pop	r15
     418:	ef 90       	pop	r14
     41a:	08 95       	ret

0000041c <CO2Sensor_handler_initialise>:
mh_z19_returnCode_t getCO2return;


void CO2Sensor_handler_task( void *pvParameters );

void CO2Sensor_handler_initialise(UBaseType_t CO2_task_priority){
     41c:	ef 92       	push	r14
     41e:	ff 92       	push	r15
     420:	0f 93       	push	r16
	
	xTaskCreate(
     422:	e1 2c       	mov	r14, r1
     424:	f1 2c       	mov	r15, r1
     426:	08 2f       	mov	r16, r24
     428:	20 e0       	ldi	r18, 0x00	; 0
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	40 ec       	ldi	r20, 0xC0	; 192
     42e:	50 e0       	ldi	r21, 0x00	; 0
     430:	6f ea       	ldi	r22, 0xAF	; 175
     432:	72 e0       	ldi	r23, 0x02	; 2
     434:	8d e2       	ldi	r24, 0x2D	; 45
     436:	92 e0       	ldi	r25, 0x02	; 2
     438:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <xTaskCreate>
	,  "CO2Hand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  CO2_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     43c:	0f 91       	pop	r16
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	08 95       	ret

00000444 <CO2_getCO2InUint16>:
}


uint16_t CO2_getCO2InUint16(){
	return CO2ppm;
}
     444:	80 91 e7 16 	lds	r24, 0x16E7	; 0x8016e7 <CO2ppm>
     448:	90 91 e8 16 	lds	r25, 0x16E8	; 0x8016e8 <CO2ppm+0x1>
     44c:	08 95       	ret

0000044e <CO2_aFunctionToSetBits>:
void CO2_aFunctionToSetBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Set bit 0  in xEventGroup. */
  uxBits = xEventGroupSetBits(
     44e:	41 e0       	ldi	r20, 0x01	; 1
     450:	50 e0       	ldi	r21, 0x00	; 0
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	a6 c1       	rjmp	.+844    	; 0x7a4 <xEventGroupSetBits>
     458:	08 95       	ret

0000045a <CO2Sensor_handler_task>:
	,  CO2_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void CO2Sensor_handler_task(void *pvParameters)
{
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	00 d0       	rcall	.+0      	; 0x460 <CO2Sensor_handler_task+0x6>
     460:	1f 92       	push	r1
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
	printf("startCO2");
     466:	87 eb       	ldi	r24, 0xB7	; 183
     468:	92 e0       	ldi	r25, 0x02	; 2
     46a:	9f 93       	push	r25
     46c:	8f 93       	push	r24
     46e:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
	(void)pvParameters;
	mh_z19_injectCallBack(NULL);
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 0b 24 	call	0x4816	; 0x4816 <mh_z19_injectCallBack>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     47a:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <xTaskGetTickCount>
     47e:	69 83       	std	Y+1, r22	; 0x01
     480:	7a 83       	std	Y+2, r23	; 0x02
     482:	8b 83       	std	Y+3, r24	; 0x03
     484:	9c 83       	std	Y+4, r25	; 0x04
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     48a:	48 ea       	ldi	r20, 0xA8	; 168
     48c:	58 e4       	ldi	r21, 0x48	; 72
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	ce 01       	movw	r24, r28
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	0e 94 0d 12 	call	0x241a	; 0x241a <xTaskDelayUntil>
		rc = mh_z19_takeMeassuring();
     49a:	0e 94 10 24 	call	0x4820	; 0x4820 <mh_z19_takeMeassuring>
     49e:	80 93 e5 16 	sts	0x16E5, r24	; 0x8016e5 <rc>
		if (rc == MHZ19_OK)
     4a2:	81 11       	cpse	r24, r1
     4a4:	f2 cf       	rjmp	.-28     	; 0x48a <CO2Sensor_handler_task+0x30>
		{
			vTaskDelay(50);
     4a6:	62 e3       	ldi	r22, 0x32	; 50
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0e 94 72 12 	call	0x24e4	; 0x24e4 <vTaskDelay>
			if(getCO2return == MHZ19_OK){
     4b2:	80 91 e6 16 	lds	r24, 0x16E6	; 0x8016e6 <getCO2return>
     4b6:	81 11       	cpse	r24, r1
     4b8:	09 c0       	rjmp	.+18     	; 0x4cc <CO2Sensor_handler_task+0x72>
				getCO2return = mh_z19_getCo2Ppm(&CO2ppm);
     4ba:	87 ee       	ldi	r24, 0xE7	; 231
     4bc:	96 e1       	ldi	r25, 0x16	; 22
     4be:	0e 94 3f 24 	call	0x487e	; 0x487e <mh_z19_getCo2Ppm>
     4c2:	80 93 e6 16 	sts	0x16E6, r24	; 0x8016e6 <getCO2return>
				CO2_aFunctionToSetBits(Application_getEventGroup());
     4c6:	25 df       	rcall	.-438    	; 0x312 <Application_getEventGroup>
     4c8:	c2 df       	rcall	.-124    	; 0x44e <CO2_aFunctionToSetBits>
     4ca:	df cf       	rjmp	.-66     	; 0x48a <CO2Sensor_handler_task+0x30>
			}
			else if(getCO2return == MHZ19_NO_MEASSURING_AVAILABLE){
     4cc:	81 30       	cpi	r24, 0x01	; 1
     4ce:	e9 f6       	brne	.-70     	; 0x48a <CO2Sensor_handler_task+0x30>
				printf("Didn't get the measurements");
     4d0:	80 ec       	ldi	r24, 0xC0	; 192
     4d2:	92 e0       	ldi	r25, 0x02	; 2
     4d4:	9f 93       	push	r25
     4d6:	8f 93       	push	r24
     4d8:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	d4 cf       	rjmp	.-88     	; 0x48a <CO2Sensor_handler_task+0x30>

000004e2 <DownLinkHandler_lora_handler_task>:
	,  DownLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void DownLinkHandler_lora_handler_task( void *pvParameters )
{
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <DownLinkHandler_lora_handler_task+0x6>
     4e8:	1f 92       	push	r1
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     4ee:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <xTaskGetTickCount>
     4f2:	69 83       	std	Y+1, r22	; 0x01
     4f4:	7a 83       	std	Y+2, r23	; 0x02
     4f6:	8b 83       	std	Y+3, r24	; 0x03
     4f8:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     4fa:	48 ea       	ldi	r20, 0xA8	; 168
     4fc:	58 e4       	ldi	r21, 0x48	; 72
     4fe:	60 e0       	ldi	r22, 0x00	; 0
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	ce 01       	movw	r24, r28
     504:	01 96       	adiw	r24, 0x01	; 1
     506:	0e 94 0d 12 	call	0x241a	; 0x241a <xTaskDelayUntil>
		printf("startLoraDownlinkTask\n");
     50a:	8c ed       	ldi	r24, 0xDC	; 220
     50c:	92 e0       	ldi	r25, 0x02	; 2
     50e:	0e 94 86 34 	call	0x690c	; 0x690c <puts>
		status_leds_shortPuls(led_ST4);  // OPTIONAL
     512:	83 e0       	ldi	r24, 0x03	; 3
     514:	0e 94 07 2a 	call	0x540e	; 0x540e <status_leds_shortPuls>
		xMessageBufferReceive(_downLinkMessageBufferHandle, &_downlink_payload, sizeof(lora_driver_payload_t), portMAX_DELAY);
     518:	0f ef       	ldi	r16, 0xFF	; 255
     51a:	1f ef       	ldi	r17, 0xFF	; 255
     51c:	98 01       	movw	r18, r16
     51e:	46 e1       	ldi	r20, 0x16	; 22
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	6c e2       	ldi	r22, 0x2C	; 44
     524:	78 e0       	ldi	r23, 0x08	; 8
     526:	80 91 ed 16 	lds	r24, 0x16ED	; 0x8016ed <_downLinkMessageBufferHandle>
     52a:	90 91 ee 16 	lds	r25, 0x16EE	; 0x8016ee <_downLinkMessageBufferHandle+0x1>
     52e:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <xStreamBufferReceive>
		printf("DOWN LINK: from port: %d with %d bytes received!", _downlink_payload.portNo, _downlink_payload.len); // Just for Debug
     532:	0c e2       	ldi	r16, 0x2C	; 44
     534:	18 e0       	ldi	r17, 0x08	; 8
     536:	f8 01       	movw	r30, r16
     538:	91 81       	ldd	r25, Z+1	; 0x01
     53a:	80 81       	ld	r24, Z
     53c:	1f 92       	push	r1
     53e:	9f 93       	push	r25
     540:	1f 92       	push	r1
     542:	8f 93       	push	r24
     544:	82 ef       	ldi	r24, 0xF2	; 242
     546:	92 e0       	ldi	r25, 0x02	; 2
     548:	9f 93       	push	r25
     54a:	8f 93       	push	r24
     54c:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
		if (4 == _downlink_payload.len) // Check that we have got the expected 4 bytes
     550:	f8 01       	movw	r30, r16
     552:	81 81       	ldd	r24, Z+1	; 0x01
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	84 30       	cpi	r24, 0x04	; 4
     562:	59 f6       	brne	.-106    	; 0x4fa <DownLinkHandler_lora_handler_task+0x18>
		{
			// decode the payload into our variables
			maxHumSetting = (_downlink_payload.bytes[0] << 8) + _downlink_payload.bytes[1];
     564:	82 81       	ldd	r24, Z+2	; 0x02
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	98 2f       	mov	r25, r24
     56a:	88 27       	eor	r24, r24
     56c:	23 81       	ldd	r18, Z+3	; 0x03
     56e:	82 0f       	add	r24, r18
     570:	91 1d       	adc	r25, r1
     572:	90 93 ea 16 	sts	0x16EA, r25	; 0x8016ea <maxHumSetting+0x1>
     576:	80 93 e9 16 	sts	0x16E9, r24	; 0x8016e9 <maxHumSetting>
			maxTempSetting = (_downlink_payload.bytes[2] << 8) + _downlink_payload.bytes[3];
     57a:	84 81       	ldd	r24, Z+4	; 0x04
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	98 2f       	mov	r25, r24
     580:	88 27       	eor	r24, r24
     582:	25 81       	ldd	r18, Z+5	; 0x05
     584:	82 0f       	add	r24, r18
     586:	91 1d       	adc	r25, r1
     588:	90 93 ec 16 	sts	0x16EC, r25	; 0x8016ec <maxTempSetting+0x1>
     58c:	80 93 eb 16 	sts	0x16EB, r24	; 0x8016eb <maxTempSetting>
     590:	b4 cf       	rjmp	.-152    	; 0x4fa <DownLinkHandler_lora_handler_task+0x18>

00000592 <DownLinkHandler_lora_handler_initialise>:
int16_t maxTempSetting; // Max Temperature
MessageBufferHandle_t _downLinkMessageBufferHandle;


void DownLinkHandler_lora_handler_initialise(UBaseType_t DownLinkHandler_lora_handler_task_priority, MessageBufferHandle_t downLinkMessageBufferHandle)
{
     592:	ef 92       	push	r14
     594:	ff 92       	push	r15
     596:	0f 93       	push	r16
	_downLinkMessageBufferHandle = downLinkMessageBufferHandle;
     598:	70 93 ee 16 	sts	0x16EE, r23	; 0x8016ee <_downLinkMessageBufferHandle+0x1>
     59c:	60 93 ed 16 	sts	0x16ED, r22	; 0x8016ed <_downLinkMessageBufferHandle>
	xTaskCreate(
     5a0:	e1 2c       	mov	r14, r1
     5a2:	f1 2c       	mov	r15, r1
     5a4:	08 2f       	mov	r16, r24
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	48 e8       	ldi	r20, 0x88	; 136
     5ac:	51 e0       	ldi	r21, 0x01	; 1
     5ae:	63 e2       	ldi	r22, 0x23	; 35
     5b0:	73 e0       	ldi	r23, 0x03	; 3
     5b2:	81 e7       	ldi	r24, 0x71	; 113
     5b4:	92 e0       	ldi	r25, 0x02	; 2
     5b6:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <xTaskCreate>
	,  "DownLinkHandler"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  DownLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     5ba:	0f 91       	pop	r16
     5bc:	ff 90       	pop	r15
     5be:	ef 90       	pop	r14
     5c0:	08 95       	ret

000005c2 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     5c2:	0f 93       	push	r16
     5c4:	01 11       	cpse	r16, r1
     5c6:	0c c0       	rjmp	.+24     	; 0x5e0 <prvTestWaitCondition+0x1e>
     5c8:	dc 01       	movw	r26, r24
     5ca:	cb 01       	movw	r24, r22
     5cc:	82 23       	and	r24, r18
     5ce:	93 23       	and	r25, r19
     5d0:	a4 23       	and	r26, r20
     5d2:	b5 23       	and	r27, r21
     5d4:	89 2b       	or	r24, r25
     5d6:	8a 2b       	or	r24, r26
     5d8:	8b 2b       	or	r24, r27
     5da:	79 f4       	brne	.+30     	; 0x5fa <prvTestWaitCondition+0x38>
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	10 c0       	rjmp	.+32     	; 0x600 <prvTestWaitCondition+0x3e>
     5e0:	dc 01       	movw	r26, r24
     5e2:	cb 01       	movw	r24, r22
     5e4:	82 23       	and	r24, r18
     5e6:	93 23       	and	r25, r19
     5e8:	a4 23       	and	r26, r20
     5ea:	b5 23       	and	r27, r21
     5ec:	28 17       	cp	r18, r24
     5ee:	39 07       	cpc	r19, r25
     5f0:	4a 07       	cpc	r20, r26
     5f2:	5b 07       	cpc	r21, r27
     5f4:	21 f0       	breq	.+8      	; 0x5fe <prvTestWaitCondition+0x3c>
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	03 c0       	rjmp	.+6      	; 0x600 <prvTestWaitCondition+0x3e>
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	01 c0       	rjmp	.+2      	; 0x600 <prvTestWaitCondition+0x3e>
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	0f 91       	pop	r16
     602:	08 95       	ret

00000604 <xEventGroupCreate>:
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	8f e0       	ldi	r24, 0x0F	; 15
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	cc d1       	rcall	.+920    	; 0x9a6 <pvPortMalloc>
     60e:	ec 01       	movw	r28, r24
     610:	00 97       	sbiw	r24, 0x00	; 0
     612:	39 f0       	breq	.+14     	; 0x622 <xEventGroupCreate+0x1e>
     614:	fc 01       	movw	r30, r24
     616:	11 92       	st	Z+, r1
     618:	11 92       	st	Z+, r1
     61a:	11 92       	st	Z+, r1
     61c:	11 92       	st	Z+, r1
     61e:	cf 01       	movw	r24, r30
     620:	a8 d2       	rcall	.+1360   	; 0xb72 <vListInitialise>
     622:	ce 01       	movw	r24, r28
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	08 95       	ret

0000062a <xEventGroupWaitBits>:
     62a:	2f 92       	push	r2
     62c:	3f 92       	push	r3
     62e:	4f 92       	push	r4
     630:	5f 92       	push	r5
     632:	6f 92       	push	r6
     634:	7f 92       	push	r7
     636:	8f 92       	push	r8
     638:	9f 92       	push	r9
     63a:	af 92       	push	r10
     63c:	bf 92       	push	r11
     63e:	cf 92       	push	r12
     640:	df 92       	push	r13
     642:	ef 92       	push	r14
     644:	ff 92       	push	r15
     646:	0f 93       	push	r16
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	ec 01       	movw	r28, r24
     650:	4a 01       	movw	r8, r20
     652:	5b 01       	movw	r10, r22
     654:	62 2e       	mov	r6, r18
     656:	70 2e       	mov	r7, r16
     658:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <vTaskSuspendAll>
     65c:	28 80       	ld	r2, Y
     65e:	39 80       	ldd	r3, Y+1	; 0x01
     660:	4a 80       	ldd	r4, Y+2	; 0x02
     662:	5b 80       	ldd	r5, Y+3	; 0x03
     664:	a5 01       	movw	r20, r10
     666:	94 01       	movw	r18, r8
     668:	c2 01       	movw	r24, r4
     66a:	b1 01       	movw	r22, r2
     66c:	aa df       	rcall	.-172    	; 0x5c2 <prvTestWaitCondition>
     66e:	88 23       	and	r24, r24
     670:	a1 f0       	breq	.+40     	; 0x69a <xEventGroupWaitBits+0x70>
     672:	66 20       	and	r6, r6
     674:	89 f1       	breq	.+98     	; 0x6d8 <xEventGroupWaitBits+0xae>
     676:	d5 01       	movw	r26, r10
     678:	c4 01       	movw	r24, r8
     67a:	80 95       	com	r24
     67c:	90 95       	com	r25
     67e:	a0 95       	com	r26
     680:	b0 95       	com	r27
     682:	82 21       	and	r24, r2
     684:	93 21       	and	r25, r3
     686:	a4 21       	and	r26, r4
     688:	b5 21       	and	r27, r5
     68a:	88 83       	st	Y, r24
     68c:	99 83       	std	Y+1, r25	; 0x01
     68e:	aa 83       	std	Y+2, r26	; 0x02
     690:	bb 83       	std	Y+3, r27	; 0x03
     692:	c1 2c       	mov	r12, r1
     694:	d1 2c       	mov	r13, r1
     696:	76 01       	movw	r14, r12
     698:	22 c0       	rjmp	.+68     	; 0x6de <xEventGroupWaitBits+0xb4>
     69a:	c1 14       	cp	r12, r1
     69c:	d1 04       	cpc	r13, r1
     69e:	e1 04       	cpc	r14, r1
     6a0:	f1 04       	cpc	r15, r1
     6a2:	e9 f0       	breq	.+58     	; 0x6de <xEventGroupWaitBits+0xb4>
     6a4:	61 10       	cpse	r6, r1
     6a6:	04 c0       	rjmp	.+8      	; 0x6b0 <xEventGroupWaitBits+0x86>
     6a8:	40 e0       	ldi	r20, 0x00	; 0
     6aa:	50 e0       	ldi	r21, 0x00	; 0
     6ac:	ba 01       	movw	r22, r20
     6ae:	04 c0       	rjmp	.+8      	; 0x6b8 <xEventGroupWaitBits+0x8e>
     6b0:	40 e0       	ldi	r20, 0x00	; 0
     6b2:	50 e0       	ldi	r21, 0x00	; 0
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	71 e0       	ldi	r23, 0x01	; 1
     6b8:	71 10       	cpse	r7, r1
     6ba:	74 60       	ori	r23, 0x04	; 4
     6bc:	48 29       	or	r20, r8
     6be:	59 29       	or	r21, r9
     6c0:	6a 29       	or	r22, r10
     6c2:	7b 29       	or	r23, r11
     6c4:	97 01       	movw	r18, r14
     6c6:	86 01       	movw	r16, r12
     6c8:	ce 01       	movw	r24, r28
     6ca:	04 96       	adiw	r24, 0x04	; 4
     6cc:	0e 94 09 13 	call	0x2612	; 0x2612 <vTaskPlaceOnUnorderedEventList>
     6d0:	21 2c       	mov	r2, r1
     6d2:	31 2c       	mov	r3, r1
     6d4:	21 01       	movw	r4, r2
     6d6:	03 c0       	rjmp	.+6      	; 0x6de <xEventGroupWaitBits+0xb4>
     6d8:	c1 2c       	mov	r12, r1
     6da:	d1 2c       	mov	r13, r1
     6dc:	76 01       	movw	r14, r12
     6de:	0e 94 31 11 	call	0x2262	; 0x2262 <xTaskResumeAll>
     6e2:	cd 28       	or	r12, r13
     6e4:	ce 28       	or	r12, r14
     6e6:	cf 28       	or	r12, r15
     6e8:	59 f1       	breq	.+86     	; 0x740 <xEventGroupWaitBits+0x116>
     6ea:	81 11       	cpse	r24, r1
     6ec:	01 c0       	rjmp	.+2      	; 0x6f0 <xEventGroupWaitBits+0xc6>
     6ee:	0f d3       	rcall	.+1566   	; 0xd0e <vPortYield>
     6f0:	0e 94 dd 15 	call	0x2bba	; 0x2bba <uxTaskResetEventItemValue>
     6f4:	6b 01       	movw	r12, r22
     6f6:	7c 01       	movw	r14, r24
     6f8:	91 fd       	sbrc	r25, 1
     6fa:	1f c0       	rjmp	.+62     	; 0x73a <xEventGroupWaitBits+0x110>
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	f8 94       	cli
     700:	0f 92       	push	r0
     702:	c8 80       	ld	r12, Y
     704:	d9 80       	ldd	r13, Y+1	; 0x01
     706:	ea 80       	ldd	r14, Y+2	; 0x02
     708:	fb 80       	ldd	r15, Y+3	; 0x03
     70a:	07 2d       	mov	r16, r7
     70c:	a5 01       	movw	r20, r10
     70e:	94 01       	movw	r18, r8
     710:	c7 01       	movw	r24, r14
     712:	b6 01       	movw	r22, r12
     714:	56 df       	rcall	.-340    	; 0x5c2 <prvTestWaitCondition>
     716:	88 23       	and	r24, r24
     718:	71 f0       	breq	.+28     	; 0x736 <xEventGroupWaitBits+0x10c>
     71a:	66 20       	and	r6, r6
     71c:	61 f0       	breq	.+24     	; 0x736 <xEventGroupWaitBits+0x10c>
     71e:	80 94       	com	r8
     720:	90 94       	com	r9
     722:	a0 94       	com	r10
     724:	b0 94       	com	r11
     726:	8c 20       	and	r8, r12
     728:	9d 20       	and	r9, r13
     72a:	ae 20       	and	r10, r14
     72c:	bf 20       	and	r11, r15
     72e:	88 82       	st	Y, r8
     730:	99 82       	std	Y+1, r9	; 0x01
     732:	aa 82       	std	Y+2, r10	; 0x02
     734:	bb 82       	std	Y+3, r11	; 0x03
     736:	0f 90       	pop	r0
     738:	0f be       	out	0x3f, r0	; 63
     73a:	16 01       	movw	r2, r12
     73c:	27 01       	movw	r4, r14
     73e:	55 24       	eor	r5, r5
     740:	c2 01       	movw	r24, r4
     742:	b1 01       	movw	r22, r2
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	ff 90       	pop	r15
     74e:	ef 90       	pop	r14
     750:	df 90       	pop	r13
     752:	cf 90       	pop	r12
     754:	bf 90       	pop	r11
     756:	af 90       	pop	r10
     758:	9f 90       	pop	r9
     75a:	8f 90       	pop	r8
     75c:	7f 90       	pop	r7
     75e:	6f 90       	pop	r6
     760:	5f 90       	pop	r5
     762:	4f 90       	pop	r4
     764:	3f 90       	pop	r3
     766:	2f 90       	pop	r2
     768:	08 95       	ret

0000076a <xEventGroupClearBits>:
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	0f 92       	push	r0
     774:	fc 01       	movw	r30, r24
     776:	00 81       	ld	r16, Z
     778:	11 81       	ldd	r17, Z+1	; 0x01
     77a:	22 81       	ldd	r18, Z+2	; 0x02
     77c:	33 81       	ldd	r19, Z+3	; 0x03
     77e:	40 95       	com	r20
     780:	50 95       	com	r21
     782:	60 95       	com	r22
     784:	70 95       	com	r23
     786:	40 23       	and	r20, r16
     788:	51 23       	and	r21, r17
     78a:	62 23       	and	r22, r18
     78c:	73 23       	and	r23, r19
     78e:	40 83       	st	Z, r20
     790:	51 83       	std	Z+1, r21	; 0x01
     792:	62 83       	std	Z+2, r22	; 0x02
     794:	73 83       	std	Z+3, r23	; 0x03
     796:	0f 90       	pop	r0
     798:	0f be       	out	0x3f, r0	; 63
     79a:	c9 01       	movw	r24, r18
     79c:	b8 01       	movw	r22, r16
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	08 95       	ret

000007a4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     7a4:	4f 92       	push	r4
     7a6:	5f 92       	push	r5
     7a8:	6f 92       	push	r6
     7aa:	7f 92       	push	r7
     7ac:	af 92       	push	r10
     7ae:	bf 92       	push	r11
     7b0:	cf 92       	push	r12
     7b2:	df 92       	push	r13
     7b4:	ef 92       	push	r14
     7b6:	ff 92       	push	r15
     7b8:	0f 93       	push	r16
     7ba:	1f 93       	push	r17
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	ec 01       	movw	r28, r24
     7c2:	6a 01       	movw	r12, r20
     7c4:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     7c6:	8c 01       	movw	r16, r24
     7c8:	09 5f       	subi	r16, 0xF9	; 249
     7ca:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     7cc:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     7d0:	eb 85       	ldd	r30, Y+11	; 0x0b
     7d2:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     7d4:	88 81       	ld	r24, Y
     7d6:	99 81       	ldd	r25, Y+1	; 0x01
     7d8:	aa 81       	ldd	r26, Y+2	; 0x02
     7da:	bb 81       	ldd	r27, Y+3	; 0x03
     7dc:	c8 2a       	or	r12, r24
     7de:	d9 2a       	or	r13, r25
     7e0:	ea 2a       	or	r14, r26
     7e2:	fb 2a       	or	r15, r27
     7e4:	c8 82       	st	Y, r12
     7e6:	d9 82       	std	Y+1, r13	; 0x01
     7e8:	ea 82       	std	Y+2, r14	; 0x02
     7ea:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     7ec:	c1 2c       	mov	r12, r1
     7ee:	d1 2c       	mov	r13, r1
     7f0:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     7f2:	3d c0       	rjmp	.+122    	; 0x86e <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     7f4:	a4 80       	ldd	r10, Z+4	; 0x04
     7f6:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     7f8:	80 81       	ld	r24, Z
     7fa:	91 81       	ldd	r25, Z+1	; 0x01
     7fc:	a2 81       	ldd	r26, Z+2	; 0x02
     7fe:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     800:	ac 01       	movw	r20, r24
     802:	bd 01       	movw	r22, r26
     804:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     806:	b2 fd       	sbrc	r27, 2
     808:	0e c0       	rjmp	.+28     	; 0x826 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     80a:	48 80       	ld	r4, Y
     80c:	59 80       	ldd	r5, Y+1	; 0x01
     80e:	6a 80       	ldd	r6, Y+2	; 0x02
     810:	7b 80       	ldd	r7, Y+3	; 0x03
     812:	44 22       	and	r4, r20
     814:	55 22       	and	r5, r21
     816:	66 22       	and	r6, r22
     818:	77 22       	and	r7, r23
     81a:	45 28       	or	r4, r5
     81c:	46 28       	or	r4, r6
     81e:	47 28       	or	r4, r7
     820:	89 f4       	brne	.+34     	; 0x844 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	12 c0       	rjmp	.+36     	; 0x84a <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     826:	48 80       	ld	r4, Y
     828:	59 80       	ldd	r5, Y+1	; 0x01
     82a:	6a 80       	ldd	r6, Y+2	; 0x02
     82c:	7b 80       	ldd	r7, Y+3	; 0x03
     82e:	44 22       	and	r4, r20
     830:	55 22       	and	r5, r21
     832:	66 22       	and	r6, r22
     834:	77 22       	and	r7, r23
     836:	44 15       	cp	r20, r4
     838:	55 05       	cpc	r21, r5
     83a:	66 05       	cpc	r22, r6
     83c:	77 05       	cpc	r23, r7
     83e:	21 f0       	breq	.+8      	; 0x848 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	03 c0       	rjmp	.+6      	; 0x84a <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     844:	21 e0       	ldi	r18, 0x01	; 1
     846:	01 c0       	rjmp	.+2      	; 0x84a <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     848:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     84a:	22 23       	and	r18, r18
     84c:	71 f0       	breq	.+28     	; 0x86a <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     84e:	b0 ff       	sbrs	r27, 0
     850:	04 c0       	rjmp	.+8      	; 0x85a <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     852:	c4 2a       	or	r12, r20
     854:	d5 2a       	or	r13, r21
     856:	e6 2a       	or	r14, r22
     858:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     85a:	48 81       	ld	r20, Y
     85c:	59 81       	ldd	r21, Y+1	; 0x01
     85e:	6a 81       	ldd	r22, Y+2	; 0x02
     860:	7b 81       	ldd	r23, Y+3	; 0x03
     862:	72 60       	ori	r23, 0x02	; 2
     864:	cf 01       	movw	r24, r30
     866:	0e 94 44 14 	call	0x2888	; 0x2888 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     86a:	ea 2d       	mov	r30, r10
     86c:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     86e:	e0 17       	cp	r30, r16
     870:	f1 07       	cpc	r31, r17
     872:	09 f0       	breq	.+2      	; 0x876 <xEventGroupSetBits+0xd2>
     874:	bf cf       	rjmp	.-130    	; 0x7f4 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     876:	c0 94       	com	r12
     878:	d0 94       	com	r13
     87a:	e0 94       	com	r14
     87c:	f0 94       	com	r15
     87e:	88 81       	ld	r24, Y
     880:	99 81       	ldd	r25, Y+1	; 0x01
     882:	aa 81       	ldd	r26, Y+2	; 0x02
     884:	bb 81       	ldd	r27, Y+3	; 0x03
     886:	c8 22       	and	r12, r24
     888:	d9 22       	and	r13, r25
     88a:	ea 22       	and	r14, r26
     88c:	fb 22       	and	r15, r27
     88e:	c8 82       	st	Y, r12
     890:	d9 82       	std	Y+1, r13	; 0x01
     892:	ea 82       	std	Y+2, r14	; 0x02
     894:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     896:	0e 94 31 11 	call	0x2262	; 0x2262 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     89a:	68 81       	ld	r22, Y
     89c:	79 81       	ldd	r23, Y+1	; 0x01
     89e:	8a 81       	ldd	r24, Y+2	; 0x02
     8a0:	9b 81       	ldd	r25, Y+3	; 0x03
}
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	ff 90       	pop	r15
     8ac:	ef 90       	pop	r14
     8ae:	df 90       	pop	r13
     8b0:	cf 90       	pop	r12
     8b2:	bf 90       	pop	r11
     8b4:	af 90       	pop	r10
     8b6:	7f 90       	pop	r7
     8b8:	6f 90       	pop	r6
     8ba:	5f 90       	pop	r5
     8bc:	4f 90       	pop	r4
     8be:	08 95       	ret

000008c0 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     8c0:	ee e4       	ldi	r30, 0x4E	; 78
     8c2:	f8 e0       	ldi	r31, 0x08	; 8
     8c4:	a2 e5       	ldi	r26, 0x52	; 82
     8c6:	b8 e0       	ldi	r27, 0x08	; 8
     8c8:	b1 83       	std	Z+1, r27	; 0x01
     8ca:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     8cc:	13 82       	std	Z+3, r1	; 0x03
     8ce:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     8d0:	e6 e0       	ldi	r30, 0x06	; 6
     8d2:	f4 e1       	ldi	r31, 0x14	; 20
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     8d4:	f0 93 4d 08 	sts	0x084D, r31	; 0x80084d <pxEnd+0x1>
     8d8:	e0 93 4c 08 	sts	0x084C, r30	; 0x80084c <pxEnd>
    pxEnd->xBlockSize = 0;
     8dc:	13 82       	std	Z+3, r1	; 0x03
     8de:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     8e0:	11 82       	std	Z+1, r1	; 0x01
     8e2:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     8e4:	84 eb       	ldi	r24, 0xB4	; 180
     8e6:	9b e0       	ldi	r25, 0x0B	; 11
     8e8:	13 96       	adiw	r26, 0x03	; 3
     8ea:	9c 93       	st	X, r25
     8ec:	8e 93       	st	-X, r24
     8ee:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     8f0:	ed 93       	st	X+, r30
     8f2:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     8f4:	90 93 49 08 	sts	0x0849, r25	; 0x800849 <xMinimumEverFreeBytesRemaining+0x1>
     8f8:	80 93 48 08 	sts	0x0848, r24	; 0x800848 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     8fc:	90 93 4b 08 	sts	0x084B, r25	; 0x80084b <xFreeBytesRemaining+0x1>
     900:	80 93 4a 08 	sts	0x084A, r24	; 0x80084a <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e8       	ldi	r25, 0x80	; 128
     908:	90 93 43 08 	sts	0x0843, r25	; 0x800843 <xBlockAllocatedBit+0x1>
     90c:	80 93 42 08 	sts	0x0842, r24	; 0x800842 <xBlockAllocatedBit>
     910:	08 95       	ret

00000912 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     918:	ae e4       	ldi	r26, 0x4E	; 78
     91a:	b8 e0       	ldi	r27, 0x08	; 8
     91c:	01 c0       	rjmp	.+2      	; 0x920 <prvInsertBlockIntoFreeList+0xe>
     91e:	df 01       	movw	r26, r30
     920:	ed 91       	ld	r30, X+
     922:	fc 91       	ld	r31, X
     924:	11 97       	sbiw	r26, 0x01	; 1
     926:	ec 17       	cp	r30, r28
     928:	fd 07       	cpc	r31, r29
     92a:	c8 f3       	brcs	.-14     	; 0x91e <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     92c:	12 96       	adiw	r26, 0x02	; 2
     92e:	8d 91       	ld	r24, X+
     930:	9c 91       	ld	r25, X
     932:	13 97       	sbiw	r26, 0x03	; 3
     934:	9d 01       	movw	r18, r26
     936:	28 0f       	add	r18, r24
     938:	39 1f       	adc	r19, r25
     93a:	c2 17       	cp	r28, r18
     93c:	d3 07       	cpc	r29, r19
     93e:	49 f4       	brne	.+18     	; 0x952 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     940:	2a 81       	ldd	r18, Y+2	; 0x02
     942:	3b 81       	ldd	r19, Y+3	; 0x03
     944:	82 0f       	add	r24, r18
     946:	93 1f       	adc	r25, r19
     948:	13 96       	adiw	r26, 0x03	; 3
     94a:	9c 93       	st	X, r25
     94c:	8e 93       	st	-X, r24
     94e:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     950:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     952:	8a 81       	ldd	r24, Y+2	; 0x02
     954:	9b 81       	ldd	r25, Y+3	; 0x03
     956:	9e 01       	movw	r18, r28
     958:	28 0f       	add	r18, r24
     95a:	39 1f       	adc	r19, r25
     95c:	e2 17       	cp	r30, r18
     95e:	f3 07       	cpc	r31, r19
     960:	c1 f4       	brne	.+48     	; 0x992 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     962:	20 91 4c 08 	lds	r18, 0x084C	; 0x80084c <pxEnd>
     966:	30 91 4d 08 	lds	r19, 0x084D	; 0x80084d <pxEnd+0x1>
     96a:	e2 17       	cp	r30, r18
     96c:	f3 07       	cpc	r31, r19
     96e:	71 f0       	breq	.+28     	; 0x98c <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     970:	22 81       	ldd	r18, Z+2	; 0x02
     972:	33 81       	ldd	r19, Z+3	; 0x03
     974:	82 0f       	add	r24, r18
     976:	93 1f       	adc	r25, r19
     978:	9b 83       	std	Y+3, r25	; 0x03
     97a:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     97c:	ed 91       	ld	r30, X+
     97e:	fc 91       	ld	r31, X
     980:	11 97       	sbiw	r26, 0x01	; 1
     982:	80 81       	ld	r24, Z
     984:	91 81       	ldd	r25, Z+1	; 0x01
     986:	99 83       	std	Y+1, r25	; 0x01
     988:	88 83       	st	Y, r24
     98a:	05 c0       	rjmp	.+10     	; 0x996 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     98c:	39 83       	std	Y+1, r19	; 0x01
     98e:	28 83       	st	Y, r18
     990:	02 c0       	rjmp	.+4      	; 0x996 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     992:	f9 83       	std	Y+1, r31	; 0x01
     994:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     996:	ca 17       	cp	r28, r26
     998:	db 07       	cpc	r29, r27
     99a:	11 f0       	breq	.+4      	; 0x9a0 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     99c:	cd 93       	st	X+, r28
     99e:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	08 95       	ret

000009a6 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     9a6:	ef 92       	push	r14
     9a8:	ff 92       	push	r15
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     9b4:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     9b8:	80 91 4c 08 	lds	r24, 0x084C	; 0x80084c <pxEnd>
     9bc:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <pxEnd+0x1>
     9c0:	89 2b       	or	r24, r25
     9c2:	09 f4       	brne	.+2      	; 0x9c6 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     9c4:	7d df       	rcall	.-262    	; 0x8c0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     9c6:	80 91 42 08 	lds	r24, 0x0842	; 0x800842 <xBlockAllocatedBit>
     9ca:	90 91 43 08 	lds	r25, 0x0843	; 0x800843 <xBlockAllocatedBit+0x1>
     9ce:	80 23       	and	r24, r16
     9d0:	91 23       	and	r25, r17
     9d2:	89 2b       	or	r24, r25
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <pvPortMalloc+0x32>
     9d6:	76 c0       	rjmp	.+236    	; 0xac4 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     9d8:	01 15       	cp	r16, r1
     9da:	11 05       	cpc	r17, r1
     9dc:	49 f0       	breq	.+18     	; 0x9f0 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     9de:	c8 01       	movw	r24, r16
     9e0:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     9e2:	08 17       	cp	r16, r24
     9e4:	19 07       	cpc	r17, r25
     9e6:	18 f0       	brcs	.+6      	; 0x9ee <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     9e8:	00 e0       	ldi	r16, 0x00	; 0
     9ea:	10 e0       	ldi	r17, 0x00	; 0
     9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     9ee:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     9f0:	01 15       	cp	r16, r1
     9f2:	11 05       	cpc	r17, r1
     9f4:	09 f4       	brne	.+2      	; 0x9f8 <pvPortMalloc+0x52>
     9f6:	69 c0       	rjmp	.+210    	; 0xaca <pvPortMalloc+0x124>
     9f8:	80 91 4a 08 	lds	r24, 0x084A	; 0x80084a <xFreeBytesRemaining>
     9fc:	90 91 4b 08 	lds	r25, 0x084B	; 0x80084b <xFreeBytesRemaining+0x1>
     a00:	80 17       	cp	r24, r16
     a02:	91 07       	cpc	r25, r17
     a04:	08 f4       	brcc	.+2      	; 0xa08 <pvPortMalloc+0x62>
     a06:	64 c0       	rjmp	.+200    	; 0xad0 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     a08:	c0 91 4e 08 	lds	r28, 0x084E	; 0x80084e <xStart>
     a0c:	d0 91 4f 08 	lds	r29, 0x084F	; 0x80084f <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     a10:	ee e4       	ldi	r30, 0x4E	; 78
     a12:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     a16:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     a18:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a1a:	8a 81       	ldd	r24, Y+2	; 0x02
     a1c:	9b 81       	ldd	r25, Y+3	; 0x03
     a1e:	80 17       	cp	r24, r16
     a20:	91 07       	cpc	r25, r17
     a22:	20 f4       	brcc	.+8      	; 0xa2c <pvPortMalloc+0x86>
     a24:	88 81       	ld	r24, Y
     a26:	99 81       	ldd	r25, Y+1	; 0x01
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	a9 f7       	brne	.-22     	; 0xa16 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     a2c:	80 91 4c 08 	lds	r24, 0x084C	; 0x80084c <pxEnd>
     a30:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <pxEnd+0x1>
     a34:	c8 17       	cp	r28, r24
     a36:	d9 07       	cpc	r29, r25
     a38:	09 f4       	brne	.+2      	; 0xa3c <pvPortMalloc+0x96>
     a3a:	4d c0       	rjmp	.+154    	; 0xad6 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     a3c:	e0 80       	ld	r14, Z
     a3e:	f1 80       	ldd	r15, Z+1	; 0x01
     a40:	84 e0       	ldi	r24, 0x04	; 4
     a42:	e8 0e       	add	r14, r24
     a44:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     a46:	88 81       	ld	r24, Y
     a48:	99 81       	ldd	r25, Y+1	; 0x01
     a4a:	91 83       	std	Z+1, r25	; 0x01
     a4c:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     a4e:	2a 81       	ldd	r18, Y+2	; 0x02
     a50:	3b 81       	ldd	r19, Y+3	; 0x03
     a52:	20 1b       	sub	r18, r16
     a54:	31 0b       	sbc	r19, r17
     a56:	29 30       	cpi	r18, 0x09	; 9
     a58:	31 05       	cpc	r19, r1
     a5a:	48 f0       	brcs	.+18     	; 0xa6e <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     a5c:	ce 01       	movw	r24, r28
     a5e:	80 0f       	add	r24, r16
     a60:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     a62:	fc 01       	movw	r30, r24
     a64:	33 83       	std	Z+3, r19	; 0x03
     a66:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     a68:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     a6a:	0a 83       	std	Y+2, r16	; 0x02
     a6c:	52 df       	rcall	.-348    	; 0x912 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     a6e:	2a 81       	ldd	r18, Y+2	; 0x02
     a70:	3b 81       	ldd	r19, Y+3	; 0x03
     a72:	80 91 4a 08 	lds	r24, 0x084A	; 0x80084a <xFreeBytesRemaining>
     a76:	90 91 4b 08 	lds	r25, 0x084B	; 0x80084b <xFreeBytesRemaining+0x1>
     a7a:	82 1b       	sub	r24, r18
     a7c:	93 0b       	sbc	r25, r19
     a7e:	90 93 4b 08 	sts	0x084B, r25	; 0x80084b <xFreeBytesRemaining+0x1>
     a82:	80 93 4a 08 	sts	0x084A, r24	; 0x80084a <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     a86:	40 91 48 08 	lds	r20, 0x0848	; 0x800848 <xMinimumEverFreeBytesRemaining>
     a8a:	50 91 49 08 	lds	r21, 0x0849	; 0x800849 <xMinimumEverFreeBytesRemaining+0x1>
     a8e:	84 17       	cp	r24, r20
     a90:	95 07       	cpc	r25, r21
     a92:	20 f4       	brcc	.+8      	; 0xa9c <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     a94:	90 93 49 08 	sts	0x0849, r25	; 0x800849 <xMinimumEverFreeBytesRemaining+0x1>
     a98:	80 93 48 08 	sts	0x0848, r24	; 0x800848 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     a9c:	80 91 42 08 	lds	r24, 0x0842	; 0x800842 <xBlockAllocatedBit>
     aa0:	90 91 43 08 	lds	r25, 0x0843	; 0x800843 <xBlockAllocatedBit+0x1>
     aa4:	28 2b       	or	r18, r24
     aa6:	39 2b       	or	r19, r25
     aa8:	3b 83       	std	Y+3, r19	; 0x03
     aaa:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     aac:	19 82       	std	Y+1, r1	; 0x01
     aae:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     ab0:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <xNumberOfSuccessfulAllocations>
     ab4:	90 91 47 08 	lds	r25, 0x0847	; 0x800847 <xNumberOfSuccessfulAllocations+0x1>
     ab8:	01 96       	adiw	r24, 0x01	; 1
     aba:	90 93 47 08 	sts	0x0847, r25	; 0x800847 <xNumberOfSuccessfulAllocations+0x1>
     abe:	80 93 46 08 	sts	0x0846, r24	; 0x800846 <xNumberOfSuccessfulAllocations>
     ac2:	0b c0       	rjmp	.+22     	; 0xada <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     ac4:	e1 2c       	mov	r14, r1
     ac6:	f1 2c       	mov	r15, r1
     ac8:	08 c0       	rjmp	.+16     	; 0xada <pvPortMalloc+0x134>
     aca:	e1 2c       	mov	r14, r1
     acc:	f1 2c       	mov	r15, r1
     ace:	05 c0       	rjmp	.+10     	; 0xada <pvPortMalloc+0x134>
     ad0:	e1 2c       	mov	r14, r1
     ad2:	f1 2c       	mov	r15, r1
     ad4:	02 c0       	rjmp	.+4      	; 0xada <pvPortMalloc+0x134>
     ad6:	e1 2c       	mov	r14, r1
     ad8:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     ada:	0e 94 31 11 	call	0x2262	; 0x2262 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     ade:	e1 14       	cp	r14, r1
     ae0:	f1 04       	cpc	r15, r1
     ae2:	11 f4       	brne	.+4      	; 0xae8 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     ae4:	0e 94 ed 1b 	call	0x37da	; 0x37da <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     ae8:	c7 01       	movw	r24, r14
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	ff 90       	pop	r15
     af4:	ef 90       	pop	r14
     af6:	08 95       	ret

00000af8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     af8:	0f 93       	push	r16
     afa:	1f 93       	push	r17
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     b00:	00 97       	sbiw	r24, 0x00	; 0
     b02:	91 f1       	breq	.+100    	; 0xb68 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     b04:	ec 01       	movw	r28, r24
     b06:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     b08:	4a 81       	ldd	r20, Y+2	; 0x02
     b0a:	5b 81       	ldd	r21, Y+3	; 0x03
     b0c:	20 91 42 08 	lds	r18, 0x0842	; 0x800842 <xBlockAllocatedBit>
     b10:	30 91 43 08 	lds	r19, 0x0843	; 0x800843 <xBlockAllocatedBit+0x1>
     b14:	ba 01       	movw	r22, r20
     b16:	62 23       	and	r22, r18
     b18:	73 23       	and	r23, r19
     b1a:	67 2b       	or	r22, r23
     b1c:	29 f1       	breq	.+74     	; 0xb68 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     b1e:	68 81       	ld	r22, Y
     b20:	79 81       	ldd	r23, Y+1	; 0x01
     b22:	67 2b       	or	r22, r23
     b24:	09 f5       	brne	.+66     	; 0xb68 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     b26:	20 95       	com	r18
     b28:	30 95       	com	r19
     b2a:	24 23       	and	r18, r20
     b2c:	35 23       	and	r19, r21
     b2e:	3b 83       	std	Y+3, r19	; 0x03
     b30:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     b32:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     b36:	8a 81       	ldd	r24, Y+2	; 0x02
     b38:	9b 81       	ldd	r25, Y+3	; 0x03
     b3a:	20 91 4a 08 	lds	r18, 0x084A	; 0x80084a <xFreeBytesRemaining>
     b3e:	30 91 4b 08 	lds	r19, 0x084B	; 0x80084b <xFreeBytesRemaining+0x1>
     b42:	82 0f       	add	r24, r18
     b44:	93 1f       	adc	r25, r19
     b46:	90 93 4b 08 	sts	0x084B, r25	; 0x80084b <xFreeBytesRemaining+0x1>
     b4a:	80 93 4a 08 	sts	0x084A, r24	; 0x80084a <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     b4e:	ce 01       	movw	r24, r28
     b50:	e0 de       	rcall	.-576    	; 0x912 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     b52:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <xNumberOfSuccessfulFrees>
     b56:	90 91 45 08 	lds	r25, 0x0845	; 0x800845 <xNumberOfSuccessfulFrees+0x1>
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	90 93 45 08 	sts	0x0845, r25	; 0x800845 <xNumberOfSuccessfulFrees+0x1>
     b60:	80 93 44 08 	sts	0x0844, r24	; 0x800844 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     b64:	0e 94 31 11 	call	0x2262	; 0x2262 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	08 95       	ret

00000b72 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     b72:	fc 01       	movw	r30, r24
     b74:	03 96       	adiw	r24, 0x03	; 3
     b76:	92 83       	std	Z+2, r25	; 0x02
     b78:	81 83       	std	Z+1, r24	; 0x01
     b7a:	4f ef       	ldi	r20, 0xFF	; 255
     b7c:	5f ef       	ldi	r21, 0xFF	; 255
     b7e:	ba 01       	movw	r22, r20
     b80:	43 83       	std	Z+3, r20	; 0x03
     b82:	54 83       	std	Z+4, r21	; 0x04
     b84:	65 83       	std	Z+5, r22	; 0x05
     b86:	76 83       	std	Z+6, r23	; 0x06
     b88:	90 87       	std	Z+8, r25	; 0x08
     b8a:	87 83       	std	Z+7, r24	; 0x07
     b8c:	92 87       	std	Z+10, r25	; 0x0a
     b8e:	81 87       	std	Z+9, r24	; 0x09
     b90:	10 82       	st	Z, r1
     b92:	08 95       	ret

00000b94 <vListInitialiseItem>:
     b94:	fc 01       	movw	r30, r24
     b96:	13 86       	std	Z+11, r1	; 0x0b
     b98:	12 86       	std	Z+10, r1	; 0x0a
     b9a:	08 95       	ret

00000b9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     ba6:	08 81       	ld	r16, Y
     ba8:	19 81       	ldd	r17, Y+1	; 0x01
     baa:	2a 81       	ldd	r18, Y+2	; 0x02
     bac:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     bae:	0f 3f       	cpi	r16, 0xFF	; 255
     bb0:	4f ef       	ldi	r20, 0xFF	; 255
     bb2:	14 07       	cpc	r17, r20
     bb4:	24 07       	cpc	r18, r20
     bb6:	34 07       	cpc	r19, r20
     bb8:	21 f4       	brne	.+8      	; 0xbc2 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     bba:	fc 01       	movw	r30, r24
     bbc:	a1 85       	ldd	r26, Z+9	; 0x09
     bbe:	b2 85       	ldd	r27, Z+10	; 0x0a
     bc0:	11 c0       	rjmp	.+34     	; 0xbe4 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     bc2:	dc 01       	movw	r26, r24
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	01 c0       	rjmp	.+2      	; 0xbca <vListInsert+0x2e>
     bc8:	df 01       	movw	r26, r30
     bca:	14 96       	adiw	r26, 0x04	; 4
     bcc:	ed 91       	ld	r30, X+
     bce:	fc 91       	ld	r31, X
     bd0:	15 97       	sbiw	r26, 0x05	; 5
     bd2:	40 81       	ld	r20, Z
     bd4:	51 81       	ldd	r21, Z+1	; 0x01
     bd6:	62 81       	ldd	r22, Z+2	; 0x02
     bd8:	73 81       	ldd	r23, Z+3	; 0x03
     bda:	04 17       	cp	r16, r20
     bdc:	15 07       	cpc	r17, r21
     bde:	26 07       	cpc	r18, r22
     be0:	37 07       	cpc	r19, r23
     be2:	90 f7       	brcc	.-28     	; 0xbc8 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     be4:	14 96       	adiw	r26, 0x04	; 4
     be6:	ed 91       	ld	r30, X+
     be8:	fc 91       	ld	r31, X
     bea:	15 97       	sbiw	r26, 0x05	; 5
     bec:	fd 83       	std	Y+5, r31	; 0x05
     bee:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     bf0:	d7 83       	std	Z+7, r29	; 0x07
     bf2:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     bf4:	bf 83       	std	Y+7, r27	; 0x07
     bf6:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     bf8:	15 96       	adiw	r26, 0x05	; 5
     bfa:	dc 93       	st	X, r29
     bfc:	ce 93       	st	-X, r28
     bfe:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     c00:	9b 87       	std	Y+11, r25	; 0x0b
     c02:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     c04:	fc 01       	movw	r30, r24
     c06:	20 81       	ld	r18, Z
     c08:	2f 5f       	subi	r18, 0xFF	; 255
     c0a:	20 83       	st	Z, r18
}
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	08 95       	ret

00000c16 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     c1c:	a2 85       	ldd	r26, Z+10	; 0x0a
     c1e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     c20:	c4 81       	ldd	r28, Z+4	; 0x04
     c22:	d5 81       	ldd	r29, Z+5	; 0x05
     c24:	86 81       	ldd	r24, Z+6	; 0x06
     c26:	97 81       	ldd	r25, Z+7	; 0x07
     c28:	9f 83       	std	Y+7, r25	; 0x07
     c2a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     c2c:	c6 81       	ldd	r28, Z+6	; 0x06
     c2e:	d7 81       	ldd	r29, Z+7	; 0x07
     c30:	84 81       	ldd	r24, Z+4	; 0x04
     c32:	95 81       	ldd	r25, Z+5	; 0x05
     c34:	9d 83       	std	Y+5, r25	; 0x05
     c36:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     c38:	11 96       	adiw	r26, 0x01	; 1
     c3a:	8d 91       	ld	r24, X+
     c3c:	9c 91       	ld	r25, X
     c3e:	12 97       	sbiw	r26, 0x02	; 2
     c40:	e8 17       	cp	r30, r24
     c42:	f9 07       	cpc	r31, r25
     c44:	31 f4       	brne	.+12     	; 0xc52 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     c46:	86 81       	ldd	r24, Z+6	; 0x06
     c48:	97 81       	ldd	r25, Z+7	; 0x07
     c4a:	12 96       	adiw	r26, 0x02	; 2
     c4c:	9c 93       	st	X, r25
     c4e:	8e 93       	st	-X, r24
     c50:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     c52:	13 86       	std	Z+11, r1	; 0x0b
     c54:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     c56:	8c 91       	ld	r24, X
     c58:	81 50       	subi	r24, 0x01	; 1
     c5a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     c5c:	8c 91       	ld	r24, X
}
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	08 95       	ret

00000c64 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     c64:	a8 95       	wdr
     c66:	90 ec       	ldi	r25, 0xC0	; 192
     c68:	88 e1       	ldi	r24, 0x18	; 24
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	a8 95       	wdr
     c70:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     c7a:	08 95       	ret

00000c7c <pxPortInitialiseStack>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	60 83       	st	Z, r22
     c80:	31 97       	sbiw	r30, 0x01	; 1
     c82:	70 83       	st	Z, r23
     c84:	31 97       	sbiw	r30, 0x01	; 1
     c86:	10 82       	st	Z, r1
     c88:	31 97       	sbiw	r30, 0x01	; 1
     c8a:	10 82       	st	Z, r1
     c8c:	31 97       	sbiw	r30, 0x01	; 1
     c8e:	20 e8       	ldi	r18, 0x80	; 128
     c90:	20 83       	st	Z, r18
     c92:	31 97       	sbiw	r30, 0x01	; 1
     c94:	10 82       	st	Z, r1
     c96:	31 97       	sbiw	r30, 0x01	; 1
     c98:	10 82       	st	Z, r1
     c9a:	31 97       	sbiw	r30, 0x01	; 1
     c9c:	10 82       	st	Z, r1
     c9e:	77 97       	sbiw	r30, 0x17	; 23
     ca0:	40 83       	st	Z, r20
     ca2:	31 97       	sbiw	r30, 0x01	; 1
     ca4:	50 83       	st	Z, r21
     ca6:	86 97       	sbiw	r24, 0x26	; 38
     ca8:	08 95       	ret

00000caa <xPortStartScheduler>:
     caa:	dc df       	rcall	.-72     	; 0xc64 <prvSetupTimerInterrupt>
     cac:	a0 91 c9 14 	lds	r26, 0x14C9	; 0x8014c9 <pxCurrentTCB>
     cb0:	b0 91 ca 14 	lds	r27, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
     cb4:	cd 91       	ld	r28, X+
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	dd 91       	ld	r29, X+
     cba:	de bf       	out	0x3e, r29	; 62
     cbc:	ff 91       	pop	r31
     cbe:	ef 91       	pop	r30
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	bf 91       	pop	r27
     cc6:	af 91       	pop	r26
     cc8:	9f 91       	pop	r25
     cca:	8f 91       	pop	r24
     ccc:	7f 91       	pop	r23
     cce:	6f 91       	pop	r22
     cd0:	5f 91       	pop	r21
     cd2:	4f 91       	pop	r20
     cd4:	3f 91       	pop	r19
     cd6:	2f 91       	pop	r18
     cd8:	1f 91       	pop	r17
     cda:	0f 91       	pop	r16
     cdc:	ff 90       	pop	r15
     cde:	ef 90       	pop	r14
     ce0:	df 90       	pop	r13
     ce2:	cf 90       	pop	r12
     ce4:	bf 90       	pop	r11
     ce6:	af 90       	pop	r10
     ce8:	9f 90       	pop	r9
     cea:	8f 90       	pop	r8
     cec:	7f 90       	pop	r7
     cee:	6f 90       	pop	r6
     cf0:	5f 90       	pop	r5
     cf2:	4f 90       	pop	r4
     cf4:	3f 90       	pop	r3
     cf6:	2f 90       	pop	r2
     cf8:	1f 90       	pop	r1
     cfa:	0f 90       	pop	r0
     cfc:	0c be       	out	0x3c, r0	; 60
     cfe:	0f 90       	pop	r0
     d00:	0b be       	out	0x3b, r0	; 59
     d02:	0f 90       	pop	r0
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	0f 90       	pop	r0
     d08:	08 95       	ret
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	08 95       	ret

00000d0e <vPortYield>:
     d0e:	0f 92       	push	r0
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	f8 94       	cli
     d14:	0f 92       	push	r0
     d16:	0b b6       	in	r0, 0x3b	; 59
     d18:	0f 92       	push	r0
     d1a:	0c b6       	in	r0, 0x3c	; 60
     d1c:	0f 92       	push	r0
     d1e:	1f 92       	push	r1
     d20:	11 24       	eor	r1, r1
     d22:	2f 92       	push	r2
     d24:	3f 92       	push	r3
     d26:	4f 92       	push	r4
     d28:	5f 92       	push	r5
     d2a:	6f 92       	push	r6
     d2c:	7f 92       	push	r7
     d2e:	8f 92       	push	r8
     d30:	9f 92       	push	r9
     d32:	af 92       	push	r10
     d34:	bf 92       	push	r11
     d36:	cf 92       	push	r12
     d38:	df 92       	push	r13
     d3a:	ef 92       	push	r14
     d3c:	ff 92       	push	r15
     d3e:	0f 93       	push	r16
     d40:	1f 93       	push	r17
     d42:	2f 93       	push	r18
     d44:	3f 93       	push	r19
     d46:	4f 93       	push	r20
     d48:	5f 93       	push	r21
     d4a:	6f 93       	push	r22
     d4c:	7f 93       	push	r23
     d4e:	8f 93       	push	r24
     d50:	9f 93       	push	r25
     d52:	af 93       	push	r26
     d54:	bf 93       	push	r27
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	ef 93       	push	r30
     d5c:	ff 93       	push	r31
     d5e:	a0 91 c9 14 	lds	r26, 0x14C9	; 0x8014c9 <pxCurrentTCB>
     d62:	b0 91 ca 14 	lds	r27, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
     d66:	0d b6       	in	r0, 0x3d	; 61
     d68:	0d 92       	st	X+, r0
     d6a:	0e b6       	in	r0, 0x3e	; 62
     d6c:	0d 92       	st	X+, r0
     d6e:	0e 94 8d 12 	call	0x251a	; 0x251a <vTaskSwitchContext>
     d72:	a0 91 c9 14 	lds	r26, 0x14C9	; 0x8014c9 <pxCurrentTCB>
     d76:	b0 91 ca 14 	lds	r27, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
     d7a:	cd 91       	ld	r28, X+
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	dd 91       	ld	r29, X+
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	ff 91       	pop	r31
     d84:	ef 91       	pop	r30
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	bf 91       	pop	r27
     d8c:	af 91       	pop	r26
     d8e:	9f 91       	pop	r25
     d90:	8f 91       	pop	r24
     d92:	7f 91       	pop	r23
     d94:	6f 91       	pop	r22
     d96:	5f 91       	pop	r21
     d98:	4f 91       	pop	r20
     d9a:	3f 91       	pop	r19
     d9c:	2f 91       	pop	r18
     d9e:	1f 91       	pop	r17
     da0:	0f 91       	pop	r16
     da2:	ff 90       	pop	r15
     da4:	ef 90       	pop	r14
     da6:	df 90       	pop	r13
     da8:	cf 90       	pop	r12
     daa:	bf 90       	pop	r11
     dac:	af 90       	pop	r10
     dae:	9f 90       	pop	r9
     db0:	8f 90       	pop	r8
     db2:	7f 90       	pop	r7
     db4:	6f 90       	pop	r6
     db6:	5f 90       	pop	r5
     db8:	4f 90       	pop	r4
     dba:	3f 90       	pop	r3
     dbc:	2f 90       	pop	r2
     dbe:	1f 90       	pop	r1
     dc0:	0f 90       	pop	r0
     dc2:	0c be       	out	0x3c, r0	; 60
     dc4:	0f 90       	pop	r0
     dc6:	0b be       	out	0x3b, r0	; 59
     dc8:	0f 90       	pop	r0
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	0f 90       	pop	r0
     dce:	08 95       	ret

00000dd0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     dd0:	0f 92       	push	r0
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	0f 92       	push	r0
     dd8:	0b b6       	in	r0, 0x3b	; 59
     dda:	0f 92       	push	r0
     ddc:	0c b6       	in	r0, 0x3c	; 60
     dde:	0f 92       	push	r0
     de0:	1f 92       	push	r1
     de2:	11 24       	eor	r1, r1
     de4:	2f 92       	push	r2
     de6:	3f 92       	push	r3
     de8:	4f 92       	push	r4
     dea:	5f 92       	push	r5
     dec:	6f 92       	push	r6
     dee:	7f 92       	push	r7
     df0:	8f 92       	push	r8
     df2:	9f 92       	push	r9
     df4:	af 92       	push	r10
     df6:	bf 92       	push	r11
     df8:	cf 92       	push	r12
     dfa:	df 92       	push	r13
     dfc:	ef 92       	push	r14
     dfe:	ff 92       	push	r15
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	2f 93       	push	r18
     e06:	3f 93       	push	r19
     e08:	4f 93       	push	r20
     e0a:	5f 93       	push	r21
     e0c:	6f 93       	push	r22
     e0e:	7f 93       	push	r23
     e10:	8f 93       	push	r24
     e12:	9f 93       	push	r25
     e14:	af 93       	push	r26
     e16:	bf 93       	push	r27
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	ef 93       	push	r30
     e1e:	ff 93       	push	r31
     e20:	a0 91 c9 14 	lds	r26, 0x14C9	; 0x8014c9 <pxCurrentTCB>
     e24:	b0 91 ca 14 	lds	r27, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
     e28:	0d b6       	in	r0, 0x3d	; 61
     e2a:	0d 92       	st	X+, r0
     e2c:	0e b6       	in	r0, 0x3e	; 62
     e2e:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     e30:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     e32:	0e 94 05 10 	call	0x200a	; 0x200a <xTaskIncrementTick>
     e36:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     e38:	0e 94 8d 12 	call	0x251a	; 0x251a <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     e3c:	a0 91 c9 14 	lds	r26, 0x14C9	; 0x8014c9 <pxCurrentTCB>
     e40:	b0 91 ca 14 	lds	r27, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
     e44:	cd 91       	ld	r28, X+
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	dd 91       	ld	r29, X+
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	ff 91       	pop	r31
     e4e:	ef 91       	pop	r30
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	bf 91       	pop	r27
     e56:	af 91       	pop	r26
     e58:	9f 91       	pop	r25
     e5a:	8f 91       	pop	r24
     e5c:	7f 91       	pop	r23
     e5e:	6f 91       	pop	r22
     e60:	5f 91       	pop	r21
     e62:	4f 91       	pop	r20
     e64:	3f 91       	pop	r19
     e66:	2f 91       	pop	r18
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	df 90       	pop	r13
     e72:	cf 90       	pop	r12
     e74:	bf 90       	pop	r11
     e76:	af 90       	pop	r10
     e78:	9f 90       	pop	r9
     e7a:	8f 90       	pop	r8
     e7c:	7f 90       	pop	r7
     e7e:	6f 90       	pop	r6
     e80:	5f 90       	pop	r5
     e82:	4f 90       	pop	r4
     e84:	3f 90       	pop	r3
     e86:	2f 90       	pop	r2
     e88:	1f 90       	pop	r1
     e8a:	0f 90       	pop	r0
     e8c:	0c be       	out	0x3c, r0	; 60
     e8e:	0f 90       	pop	r0
     e90:	0b be       	out	0x3b, r0	; 59
     e92:	0f 90       	pop	r0
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     e98:	08 95       	ret

00000e9a <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     e9a:	9a df       	rcall	.-204    	; 0xdd0 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     e9c:	18 95       	reti

00000e9e <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	0f 92       	push	r0
     ea4:	fc 01       	movw	r30, r24
     ea6:	86 8d       	ldd	r24, Z+30	; 0x1e
     ea8:	81 11       	cpse	r24, r1
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <prvIsQueueEmpty+0x12>
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <prvIsQueueEmpty+0x14>
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	0f 90       	pop	r0
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	08 95       	ret

00000eb8 <prvIsQueueFull>:
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	0f 92       	push	r0
     ebe:	fc 01       	movw	r30, r24
     ec0:	26 8d       	ldd	r18, Z+30	; 0x1e
     ec2:	87 8d       	ldd	r24, Z+31	; 0x1f
     ec4:	28 13       	cpse	r18, r24
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <prvIsQueueFull+0x14>
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	01 c0       	rjmp	.+2      	; 0xece <prvIsQueueFull+0x16>
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	0f 90       	pop	r0
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	08 95       	ret

00000ed4 <prvCopyDataToQueue>:
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	ec 01       	movw	r28, r24
     ede:	04 2f       	mov	r16, r20
     ee0:	1e 8d       	ldd	r17, Y+30	; 0x1e
     ee2:	48 a1       	ldd	r20, Y+32	; 0x20
     ee4:	41 11       	cpse	r20, r1
     ee6:	0c c0       	rjmp	.+24     	; 0xf00 <prvCopyDataToQueue+0x2c>
     ee8:	88 81       	ld	r24, Y
     eea:	99 81       	ldd	r25, Y+1	; 0x01
     eec:	89 2b       	or	r24, r25
     eee:	09 f0       	breq	.+2      	; 0xef2 <prvCopyDataToQueue+0x1e>
     ef0:	42 c0       	rjmp	.+132    	; 0xf76 <prvCopyDataToQueue+0xa2>
     ef2:	8c 81       	ldd	r24, Y+4	; 0x04
     ef4:	9d 81       	ldd	r25, Y+5	; 0x05
     ef6:	0e 94 82 15 	call	0x2b04	; 0x2b04 <xTaskPriorityDisinherit>
     efa:	1d 82       	std	Y+5, r1	; 0x05
     efc:	1c 82       	std	Y+4, r1	; 0x04
     efe:	42 c0       	rjmp	.+132    	; 0xf84 <prvCopyDataToQueue+0xb0>
     f00:	01 11       	cpse	r16, r1
     f02:	17 c0       	rjmp	.+46     	; 0xf32 <prvCopyDataToQueue+0x5e>
     f04:	50 e0       	ldi	r21, 0x00	; 0
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	9b 81       	ldd	r25, Y+3	; 0x03
     f0a:	0e 94 cd 33 	call	0x679a	; 0x679a <memcpy>
     f0e:	28 a1       	ldd	r18, Y+32	; 0x20
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	9b 81       	ldd	r25, Y+3	; 0x03
     f14:	82 0f       	add	r24, r18
     f16:	91 1d       	adc	r25, r1
     f18:	9b 83       	std	Y+3, r25	; 0x03
     f1a:	8a 83       	std	Y+2, r24	; 0x02
     f1c:	2c 81       	ldd	r18, Y+4	; 0x04
     f1e:	3d 81       	ldd	r19, Y+5	; 0x05
     f20:	82 17       	cp	r24, r18
     f22:	93 07       	cpc	r25, r19
     f24:	50 f1       	brcs	.+84     	; 0xf7a <prvCopyDataToQueue+0xa6>
     f26:	88 81       	ld	r24, Y
     f28:	99 81       	ldd	r25, Y+1	; 0x01
     f2a:	9b 83       	std	Y+3, r25	; 0x03
     f2c:	8a 83       	std	Y+2, r24	; 0x02
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	29 c0       	rjmp	.+82     	; 0xf84 <prvCopyDataToQueue+0xb0>
     f32:	50 e0       	ldi	r21, 0x00	; 0
     f34:	8e 81       	ldd	r24, Y+6	; 0x06
     f36:	9f 81       	ldd	r25, Y+7	; 0x07
     f38:	0e 94 cd 33 	call	0x679a	; 0x679a <memcpy>
     f3c:	88 a1       	ldd	r24, Y+32	; 0x20
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	91 95       	neg	r25
     f42:	81 95       	neg	r24
     f44:	91 09       	sbc	r25, r1
     f46:	2e 81       	ldd	r18, Y+6	; 0x06
     f48:	3f 81       	ldd	r19, Y+7	; 0x07
     f4a:	28 0f       	add	r18, r24
     f4c:	39 1f       	adc	r19, r25
     f4e:	3f 83       	std	Y+7, r19	; 0x07
     f50:	2e 83       	std	Y+6, r18	; 0x06
     f52:	48 81       	ld	r20, Y
     f54:	59 81       	ldd	r21, Y+1	; 0x01
     f56:	24 17       	cp	r18, r20
     f58:	35 07       	cpc	r19, r21
     f5a:	30 f4       	brcc	.+12     	; 0xf68 <prvCopyDataToQueue+0x94>
     f5c:	2c 81       	ldd	r18, Y+4	; 0x04
     f5e:	3d 81       	ldd	r19, Y+5	; 0x05
     f60:	82 0f       	add	r24, r18
     f62:	93 1f       	adc	r25, r19
     f64:	9f 83       	std	Y+7, r25	; 0x07
     f66:	8e 83       	std	Y+6, r24	; 0x06
     f68:	02 30       	cpi	r16, 0x02	; 2
     f6a:	49 f4       	brne	.+18     	; 0xf7e <prvCopyDataToQueue+0xaa>
     f6c:	11 23       	and	r17, r17
     f6e:	49 f0       	breq	.+18     	; 0xf82 <prvCopyDataToQueue+0xae>
     f70:	11 50       	subi	r17, 0x01	; 1
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	07 c0       	rjmp	.+14     	; 0xf84 <prvCopyDataToQueue+0xb0>
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	05 c0       	rjmp	.+10     	; 0xf84 <prvCopyDataToQueue+0xb0>
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	03 c0       	rjmp	.+6      	; 0xf84 <prvCopyDataToQueue+0xb0>
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	01 c0       	rjmp	.+2      	; 0xf84 <prvCopyDataToQueue+0xb0>
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	1f 5f       	subi	r17, 0xFF	; 255
     f86:	1e 8f       	std	Y+30, r17	; 0x1e
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	1f 91       	pop	r17
     f8e:	0f 91       	pop	r16
     f90:	08 95       	ret

00000f92 <prvCopyDataFromQueue>:
     f92:	fc 01       	movw	r30, r24
     f94:	40 a1       	ldd	r20, Z+32	; 0x20
     f96:	44 23       	and	r20, r20
     f98:	a9 f0       	breq	.+42     	; 0xfc4 <prvCopyDataFromQueue+0x32>
     f9a:	50 e0       	ldi	r21, 0x00	; 0
     f9c:	26 81       	ldd	r18, Z+6	; 0x06
     f9e:	37 81       	ldd	r19, Z+7	; 0x07
     fa0:	24 0f       	add	r18, r20
     fa2:	35 1f       	adc	r19, r21
     fa4:	37 83       	std	Z+7, r19	; 0x07
     fa6:	26 83       	std	Z+6, r18	; 0x06
     fa8:	84 81       	ldd	r24, Z+4	; 0x04
     faa:	95 81       	ldd	r25, Z+5	; 0x05
     fac:	28 17       	cp	r18, r24
     fae:	39 07       	cpc	r19, r25
     fb0:	20 f0       	brcs	.+8      	; 0xfba <prvCopyDataFromQueue+0x28>
     fb2:	80 81       	ld	r24, Z
     fb4:	91 81       	ldd	r25, Z+1	; 0x01
     fb6:	97 83       	std	Z+7, r25	; 0x07
     fb8:	86 83       	std	Z+6, r24	; 0x06
     fba:	cb 01       	movw	r24, r22
     fbc:	66 81       	ldd	r22, Z+6	; 0x06
     fbe:	77 81       	ldd	r23, Z+7	; 0x07
     fc0:	0c 94 cd 33 	jmp	0x679a	; 0x679a <memcpy>
     fc4:	08 95       	ret

00000fc6 <prvUnlockQueue>:
     fc6:	1f 93       	push	r17
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	ec 01       	movw	r28, r24
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	0f 92       	push	r0
     fd4:	1a a1       	ldd	r17, Y+34	; 0x22
     fd6:	0b c0       	rjmp	.+22     	; 0xfee <prvUnlockQueue+0x28>
     fd8:	8b 89       	ldd	r24, Y+19	; 0x13
     fda:	88 23       	and	r24, r24
     fdc:	51 f0       	breq	.+20     	; 0xff2 <prvUnlockQueue+0x2c>
     fde:	ce 01       	movw	r24, r28
     fe0:	43 96       	adiw	r24, 0x13	; 19
     fe2:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskRemoveFromEventList>
     fe6:	81 11       	cpse	r24, r1
     fe8:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <vTaskMissedYield>
     fec:	11 50       	subi	r17, 0x01	; 1
     fee:	11 16       	cp	r1, r17
     ff0:	9c f3       	brlt	.-26     	; 0xfd8 <prvUnlockQueue+0x12>
     ff2:	8f ef       	ldi	r24, 0xFF	; 255
     ff4:	8a a3       	std	Y+34, r24	; 0x22
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	0f 92       	push	r0
    1000:	19 a1       	ldd	r17, Y+33	; 0x21
    1002:	0b c0       	rjmp	.+22     	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
    1004:	88 85       	ldd	r24, Y+8	; 0x08
    1006:	88 23       	and	r24, r24
    1008:	51 f0       	breq	.+20     	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
    100a:	ce 01       	movw	r24, r28
    100c:	08 96       	adiw	r24, 0x08	; 8
    100e:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskRemoveFromEventList>
    1012:	81 11       	cpse	r24, r1
    1014:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <vTaskMissedYield>
    1018:	11 50       	subi	r17, 0x01	; 1
    101a:	11 16       	cp	r1, r17
    101c:	9c f3       	brlt	.-26     	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
    101e:	8f ef       	ldi	r24, 0xFF	; 255
    1020:	89 a3       	std	Y+33, r24	; 0x21
    1022:	0f 90       	pop	r0
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	08 95       	ret

0000102e <xQueueGenericReset>:
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	ec 01       	movw	r28, r24
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	0f 92       	push	r0
    103a:	e8 81       	ld	r30, Y
    103c:	f9 81       	ldd	r31, Y+1	; 0x01
    103e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1040:	28 a1       	ldd	r18, Y+32	; 0x20
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	82 9f       	mul	r24, r18
    1048:	a0 01       	movw	r20, r0
    104a:	83 9f       	mul	r24, r19
    104c:	50 0d       	add	r21, r0
    104e:	92 9f       	mul	r25, r18
    1050:	50 0d       	add	r21, r0
    1052:	11 24       	eor	r1, r1
    1054:	4e 0f       	add	r20, r30
    1056:	5f 1f       	adc	r21, r31
    1058:	5d 83       	std	Y+5, r21	; 0x05
    105a:	4c 83       	std	Y+4, r20	; 0x04
    105c:	1e 8e       	std	Y+30, r1	; 0x1e
    105e:	fb 83       	std	Y+3, r31	; 0x03
    1060:	ea 83       	std	Y+2, r30	; 0x02
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	28 9f       	mul	r18, r24
    1066:	a0 01       	movw	r20, r0
    1068:	29 9f       	mul	r18, r25
    106a:	50 0d       	add	r21, r0
    106c:	38 9f       	mul	r19, r24
    106e:	50 0d       	add	r21, r0
    1070:	11 24       	eor	r1, r1
    1072:	cf 01       	movw	r24, r30
    1074:	84 0f       	add	r24, r20
    1076:	95 1f       	adc	r25, r21
    1078:	9f 83       	std	Y+7, r25	; 0x07
    107a:	8e 83       	std	Y+6, r24	; 0x06
    107c:	8f ef       	ldi	r24, 0xFF	; 255
    107e:	89 a3       	std	Y+33, r24	; 0x21
    1080:	8a a3       	std	Y+34, r24	; 0x22
    1082:	61 11       	cpse	r22, r1
    1084:	0b c0       	rjmp	.+22     	; 0x109c <xQueueGenericReset+0x6e>
    1086:	88 85       	ldd	r24, Y+8	; 0x08
    1088:	88 23       	and	r24, r24
    108a:	71 f0       	breq	.+28     	; 0x10a8 <xQueueGenericReset+0x7a>
    108c:	ce 01       	movw	r24, r28
    108e:	08 96       	adiw	r24, 0x08	; 8
    1090:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskRemoveFromEventList>
    1094:	88 23       	and	r24, r24
    1096:	41 f0       	breq	.+16     	; 0x10a8 <xQueueGenericReset+0x7a>
    1098:	3a de       	rcall	.-908    	; 0xd0e <vPortYield>
    109a:	06 c0       	rjmp	.+12     	; 0x10a8 <xQueueGenericReset+0x7a>
    109c:	ce 01       	movw	r24, r28
    109e:	08 96       	adiw	r24, 0x08	; 8
    10a0:	68 dd       	rcall	.-1328   	; 0xb72 <vListInitialise>
    10a2:	ce 01       	movw	r24, r28
    10a4:	43 96       	adiw	r24, 0x13	; 19
    10a6:	65 dd       	rcall	.-1334   	; 0xb72 <vListInitialise>
    10a8:	0f 90       	pop	r0
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	08 95       	ret

000010b4 <prvInitialiseNewQueue>:
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	f8 01       	movw	r30, r16
    10ba:	61 11       	cpse	r22, r1
    10bc:	03 c0       	rjmp	.+6      	; 0x10c4 <prvInitialiseNewQueue+0x10>
    10be:	11 83       	std	Z+1, r17	; 0x01
    10c0:	00 83       	st	Z, r16
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <prvInitialiseNewQueue+0x14>
    10c4:	51 83       	std	Z+1, r21	; 0x01
    10c6:	40 83       	st	Z, r20
    10c8:	87 8f       	std	Z+31, r24	; 0x1f
    10ca:	60 a3       	std	Z+32, r22	; 0x20
    10cc:	61 e0       	ldi	r22, 0x01	; 1
    10ce:	cf 01       	movw	r24, r30
    10d0:	ae df       	rcall	.-164    	; 0x102e <xQueueGenericReset>
    10d2:	1f 91       	pop	r17
    10d4:	0f 91       	pop	r16
    10d6:	08 95       	ret

000010d8 <xQueueGenericCreate>:
    10d8:	df 92       	push	r13
    10da:	ef 92       	push	r14
    10dc:	ff 92       	push	r15
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	f8 2e       	mov	r15, r24
    10e8:	e6 2e       	mov	r14, r22
    10ea:	d4 2e       	mov	r13, r20
    10ec:	86 9f       	mul	r24, r22
    10ee:	c0 01       	movw	r24, r0
    10f0:	11 24       	eor	r1, r1
    10f2:	83 96       	adiw	r24, 0x23	; 35
    10f4:	58 dc       	rcall	.-1872   	; 0x9a6 <pvPortMalloc>
    10f6:	ec 01       	movw	r28, r24
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	41 f0       	breq	.+16     	; 0x110c <xQueueGenericCreate+0x34>
    10fc:	8c 01       	movw	r16, r24
    10fe:	2d 2d       	mov	r18, r13
    1100:	ac 01       	movw	r20, r24
    1102:	4d 5d       	subi	r20, 0xDD	; 221
    1104:	5f 4f       	sbci	r21, 0xFF	; 255
    1106:	6e 2d       	mov	r22, r14
    1108:	8f 2d       	mov	r24, r15
    110a:	d4 df       	rcall	.-88     	; 0x10b4 <prvInitialiseNewQueue>
    110c:	ce 01       	movw	r24, r28
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	ff 90       	pop	r15
    1118:	ef 90       	pop	r14
    111a:	df 90       	pop	r13
    111c:	08 95       	ret

0000111e <xQueueGenericSend>:
    111e:	cf 92       	push	r12
    1120:	df 92       	push	r13
    1122:	ef 92       	push	r14
    1124:	ff 92       	push	r15
    1126:	0f 93       	push	r16
    1128:	1f 93       	push	r17
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	29 97       	sbiw	r28, 0x09	; 9
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	7c 01       	movw	r14, r24
    1140:	6b 01       	movw	r12, r22
    1142:	2e 83       	std	Y+6, r18	; 0x06
    1144:	3f 83       	std	Y+7, r19	; 0x07
    1146:	48 87       	std	Y+8, r20	; 0x08
    1148:	59 87       	std	Y+9, r21	; 0x09
    114a:	10 e0       	ldi	r17, 0x00	; 0
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	0f 92       	push	r0
    1152:	f7 01       	movw	r30, r14
    1154:	96 8d       	ldd	r25, Z+30	; 0x1e
    1156:	87 8d       	ldd	r24, Z+31	; 0x1f
    1158:	98 17       	cp	r25, r24
    115a:	10 f0       	brcs	.+4      	; 0x1160 <xQueueGenericSend+0x42>
    115c:	02 30       	cpi	r16, 0x02	; 2
    115e:	b1 f4       	brne	.+44     	; 0x118c <xQueueGenericSend+0x6e>
    1160:	40 2f       	mov	r20, r16
    1162:	b6 01       	movw	r22, r12
    1164:	c7 01       	movw	r24, r14
    1166:	b6 de       	rcall	.-660    	; 0xed4 <prvCopyDataToQueue>
    1168:	f7 01       	movw	r30, r14
    116a:	93 89       	ldd	r25, Z+19	; 0x13
    116c:	99 23       	and	r25, r25
    116e:	41 f0       	breq	.+16     	; 0x1180 <xQueueGenericSend+0x62>
    1170:	c7 01       	movw	r24, r14
    1172:	43 96       	adiw	r24, 0x13	; 19
    1174:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskRemoveFromEventList>
    1178:	88 23       	and	r24, r24
    117a:	21 f0       	breq	.+8      	; 0x1184 <xQueueGenericSend+0x66>
    117c:	c8 dd       	rcall	.-1136   	; 0xd0e <vPortYield>
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <xQueueGenericSend+0x66>
    1180:	81 11       	cpse	r24, r1
    1182:	c5 dd       	rcall	.-1142   	; 0xd0e <vPortYield>
    1184:	0f 90       	pop	r0
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	4c c0       	rjmp	.+152    	; 0x1224 <xQueueGenericSend+0x106>
    118c:	8e 81       	ldd	r24, Y+6	; 0x06
    118e:	9f 81       	ldd	r25, Y+7	; 0x07
    1190:	a8 85       	ldd	r26, Y+8	; 0x08
    1192:	b9 85       	ldd	r27, Y+9	; 0x09
    1194:	89 2b       	or	r24, r25
    1196:	8a 2b       	or	r24, r26
    1198:	8b 2b       	or	r24, r27
    119a:	21 f4       	brne	.+8      	; 0x11a4 <xQueueGenericSend+0x86>
    119c:	0f 90       	pop	r0
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	40 c0       	rjmp	.+128    	; 0x1224 <xQueueGenericSend+0x106>
    11a4:	11 11       	cpse	r17, r1
    11a6:	05 c0       	rjmp	.+10     	; 0x11b2 <xQueueGenericSend+0x94>
    11a8:	ce 01       	movw	r24, r28
    11aa:	01 96       	adiw	r24, 0x01	; 1
    11ac:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <vTaskInternalSetTimeOutState>
    11b0:	11 e0       	ldi	r17, 0x01	; 1
    11b2:	0f 90       	pop	r0
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	15 d7       	rcall	.+3626   	; 0x1fe2 <vTaskSuspendAll>
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	0f 92       	push	r0
    11be:	f7 01       	movw	r30, r14
    11c0:	81 a1       	ldd	r24, Z+33	; 0x21
    11c2:	8f 3f       	cpi	r24, 0xFF	; 255
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <xQueueGenericSend+0xaa>
    11c6:	11 a2       	std	Z+33, r1	; 0x21
    11c8:	f7 01       	movw	r30, r14
    11ca:	82 a1       	ldd	r24, Z+34	; 0x22
    11cc:	8f 3f       	cpi	r24, 0xFF	; 255
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <xQueueGenericSend+0xb4>
    11d0:	12 a2       	std	Z+34, r1	; 0x22
    11d2:	0f 90       	pop	r0
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	be 01       	movw	r22, r28
    11d8:	6a 5f       	subi	r22, 0xFA	; 250
    11da:	7f 4f       	sbci	r23, 0xFF	; 255
    11dc:	ce 01       	movw	r24, r28
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <xTaskCheckForTimeOut>
    11e4:	81 11       	cpse	r24, r1
    11e6:	19 c0       	rjmp	.+50     	; 0x121a <xQueueGenericSend+0xfc>
    11e8:	c7 01       	movw	r24, r14
    11ea:	66 de       	rcall	.-820    	; 0xeb8 <prvIsQueueFull>
    11ec:	88 23       	and	r24, r24
    11ee:	81 f0       	breq	.+32     	; 0x1210 <xQueueGenericSend+0xf2>
    11f0:	4e 81       	ldd	r20, Y+6	; 0x06
    11f2:	5f 81       	ldd	r21, Y+7	; 0x07
    11f4:	68 85       	ldd	r22, Y+8	; 0x08
    11f6:	79 85       	ldd	r23, Y+9	; 0x09
    11f8:	c7 01       	movw	r24, r14
    11fa:	08 96       	adiw	r24, 0x08	; 8
    11fc:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <vTaskPlaceOnEventList>
    1200:	c7 01       	movw	r24, r14
    1202:	e1 de       	rcall	.-574    	; 0xfc6 <prvUnlockQueue>
    1204:	0e 94 31 11 	call	0x2262	; 0x2262 <xTaskResumeAll>
    1208:	81 11       	cpse	r24, r1
    120a:	a0 cf       	rjmp	.-192    	; 0x114c <xQueueGenericSend+0x2e>
    120c:	80 dd       	rcall	.-1280   	; 0xd0e <vPortYield>
    120e:	9e cf       	rjmp	.-196    	; 0x114c <xQueueGenericSend+0x2e>
    1210:	c7 01       	movw	r24, r14
    1212:	d9 de       	rcall	.-590    	; 0xfc6 <prvUnlockQueue>
    1214:	0e 94 31 11 	call	0x2262	; 0x2262 <xTaskResumeAll>
    1218:	99 cf       	rjmp	.-206    	; 0x114c <xQueueGenericSend+0x2e>
    121a:	c7 01       	movw	r24, r14
    121c:	d4 de       	rcall	.-600    	; 0xfc6 <prvUnlockQueue>
    121e:	0e 94 31 11 	call	0x2262	; 0x2262 <xTaskResumeAll>
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	29 96       	adiw	r28, 0x09	; 9
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
    1238:	ff 90       	pop	r15
    123a:	ef 90       	pop	r14
    123c:	df 90       	pop	r13
    123e:	cf 90       	pop	r12
    1240:	08 95       	ret

00001242 <prvInitialiseMutex>:
    1242:	0f 93       	push	r16
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	69 f0       	breq	.+26     	; 0x1262 <prvInitialiseMutex+0x20>
    1248:	fc 01       	movw	r30, r24
    124a:	15 82       	std	Z+5, r1	; 0x05
    124c:	14 82       	std	Z+4, r1	; 0x04
    124e:	11 82       	std	Z+1, r1	; 0x01
    1250:	10 82       	st	Z, r1
    1252:	16 82       	std	Z+6, r1	; 0x06
    1254:	00 e0       	ldi	r16, 0x00	; 0
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	a9 01       	movw	r20, r18
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	5e df       	rcall	.-324    	; 0x111e <xQueueGenericSend>
    1262:	0f 91       	pop	r16
    1264:	08 95       	ret

00001266 <xQueueCreateMutex>:
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	48 2f       	mov	r20, r24
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	33 df       	rcall	.-410    	; 0x10d8 <xQueueGenericCreate>
    1272:	ec 01       	movw	r28, r24
    1274:	e6 df       	rcall	.-52     	; 0x1242 <prvInitialiseMutex>
    1276:	ce 01       	movw	r24, r28
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	08 95       	ret

0000127e <xQueueGenericSendFromISR>:
    127e:	ef 92       	push	r14
    1280:	ff 92       	push	r15
    1282:	0f 93       	push	r16
    1284:	1f 93       	push	r17
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	8a 01       	movw	r16, r20
    128c:	fc 01       	movw	r30, r24
    128e:	56 8d       	ldd	r21, Z+30	; 0x1e
    1290:	37 8d       	ldd	r19, Z+31	; 0x1f
    1292:	53 17       	cp	r21, r19
    1294:	10 f0       	brcs	.+4      	; 0x129a <xQueueGenericSendFromISR+0x1c>
    1296:	22 30       	cpi	r18, 0x02	; 2
    1298:	f9 f4       	brne	.+62     	; 0x12d8 <xQueueGenericSendFromISR+0x5a>
    129a:	42 2f       	mov	r20, r18
    129c:	78 01       	movw	r14, r16
    129e:	ec 01       	movw	r28, r24
    12a0:	1a a1       	ldd	r17, Y+34	; 0x22
    12a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12a4:	ce 01       	movw	r24, r28
    12a6:	16 de       	rcall	.-980    	; 0xed4 <prvCopyDataToQueue>
    12a8:	1f 3f       	cpi	r17, 0xFF	; 255
    12aa:	81 f4       	brne	.+32     	; 0x12cc <xQueueGenericSendFromISR+0x4e>
    12ac:	8b 89       	ldd	r24, Y+19	; 0x13
    12ae:	88 23       	and	r24, r24
    12b0:	a9 f0       	breq	.+42     	; 0x12dc <xQueueGenericSendFromISR+0x5e>
    12b2:	ce 01       	movw	r24, r28
    12b4:	43 96       	adiw	r24, 0x13	; 19
    12b6:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskRemoveFromEventList>
    12ba:	88 23       	and	r24, r24
    12bc:	89 f0       	breq	.+34     	; 0x12e0 <xQueueGenericSendFromISR+0x62>
    12be:	e1 14       	cp	r14, r1
    12c0:	f1 04       	cpc	r15, r1
    12c2:	81 f0       	breq	.+32     	; 0x12e4 <xQueueGenericSendFromISR+0x66>
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	f7 01       	movw	r30, r14
    12c8:	80 83       	st	Z, r24
    12ca:	0d c0       	rjmp	.+26     	; 0x12e6 <xQueueGenericSendFromISR+0x68>
    12cc:	ff 24       	eor	r15, r15
    12ce:	f3 94       	inc	r15
    12d0:	f1 0e       	add	r15, r17
    12d2:	fa a2       	std	Y+34, r15	; 0x22
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	07 c0       	rjmp	.+14     	; 0x12e6 <xQueueGenericSendFromISR+0x68>
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	05 c0       	rjmp	.+10     	; 0x12e6 <xQueueGenericSendFromISR+0x68>
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	03 c0       	rjmp	.+6      	; 0x12e6 <xQueueGenericSendFromISR+0x68>
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	01 c0       	rjmp	.+2      	; 0x12e6 <xQueueGenericSendFromISR+0x68>
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	ff 90       	pop	r15
    12f0:	ef 90       	pop	r14
    12f2:	08 95       	ret

000012f4 <xQueueReceive>:
    12f4:	cf 92       	push	r12
    12f6:	df 92       	push	r13
    12f8:	ef 92       	push	r14
    12fa:	ff 92       	push	r15
    12fc:	0f 93       	push	r16
    12fe:	1f 93       	push	r17
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	29 97       	sbiw	r28, 0x09	; 9
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	8c 01       	movw	r16, r24
    1316:	6b 01       	movw	r12, r22
    1318:	2e 83       	std	Y+6, r18	; 0x06
    131a:	3f 83       	std	Y+7, r19	; 0x07
    131c:	48 87       	std	Y+8, r20	; 0x08
    131e:	59 87       	std	Y+9, r21	; 0x09
    1320:	e1 2c       	mov	r14, r1
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	0f 92       	push	r0
    1328:	f8 01       	movw	r30, r16
    132a:	f6 8c       	ldd	r15, Z+30	; 0x1e
    132c:	ff 20       	and	r15, r15
    132e:	99 f0       	breq	.+38     	; 0x1356 <xQueueReceive+0x62>
    1330:	b6 01       	movw	r22, r12
    1332:	c8 01       	movw	r24, r16
    1334:	2e de       	rcall	.-932    	; 0xf92 <prvCopyDataFromQueue>
    1336:	fa 94       	dec	r15
    1338:	f8 01       	movw	r30, r16
    133a:	f6 8e       	std	Z+30, r15	; 0x1e
    133c:	80 85       	ldd	r24, Z+8	; 0x08
    133e:	88 23       	and	r24, r24
    1340:	31 f0       	breq	.+12     	; 0x134e <xQueueReceive+0x5a>
    1342:	c8 01       	movw	r24, r16
    1344:	08 96       	adiw	r24, 0x08	; 8
    1346:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskRemoveFromEventList>
    134a:	81 11       	cpse	r24, r1
    134c:	e0 dc       	rcall	.-1600   	; 0xd0e <vPortYield>
    134e:	0f 90       	pop	r0
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	4f c0       	rjmp	.+158    	; 0x13f4 <xQueueReceive+0x100>
    1356:	8e 81       	ldd	r24, Y+6	; 0x06
    1358:	9f 81       	ldd	r25, Y+7	; 0x07
    135a:	a8 85       	ldd	r26, Y+8	; 0x08
    135c:	b9 85       	ldd	r27, Y+9	; 0x09
    135e:	89 2b       	or	r24, r25
    1360:	8a 2b       	or	r24, r26
    1362:	8b 2b       	or	r24, r27
    1364:	21 f4       	brne	.+8      	; 0x136e <xQueueReceive+0x7a>
    1366:	0f 90       	pop	r0
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	43 c0       	rjmp	.+134    	; 0x13f4 <xQueueReceive+0x100>
    136e:	e1 10       	cpse	r14, r1
    1370:	06 c0       	rjmp	.+12     	; 0x137e <xQueueReceive+0x8a>
    1372:	ce 01       	movw	r24, r28
    1374:	01 96       	adiw	r24, 0x01	; 1
    1376:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <vTaskInternalSetTimeOutState>
    137a:	ee 24       	eor	r14, r14
    137c:	e3 94       	inc	r14
    137e:	0f 90       	pop	r0
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	2f d6       	rcall	.+3166   	; 0x1fe2 <vTaskSuspendAll>
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	0f 92       	push	r0
    138a:	f8 01       	movw	r30, r16
    138c:	81 a1       	ldd	r24, Z+33	; 0x21
    138e:	8f 3f       	cpi	r24, 0xFF	; 255
    1390:	09 f4       	brne	.+2      	; 0x1394 <xQueueReceive+0xa0>
    1392:	11 a2       	std	Z+33, r1	; 0x21
    1394:	f8 01       	movw	r30, r16
    1396:	82 a1       	ldd	r24, Z+34	; 0x22
    1398:	8f 3f       	cpi	r24, 0xFF	; 255
    139a:	09 f4       	brne	.+2      	; 0x139e <xQueueReceive+0xaa>
    139c:	12 a2       	std	Z+34, r1	; 0x22
    139e:	0f 90       	pop	r0
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	be 01       	movw	r22, r28
    13a4:	6a 5f       	subi	r22, 0xFA	; 250
    13a6:	7f 4f       	sbci	r23, 0xFF	; 255
    13a8:	ce 01       	movw	r24, r28
    13aa:	01 96       	adiw	r24, 0x01	; 1
    13ac:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <xTaskCheckForTimeOut>
    13b0:	81 11       	cpse	r24, r1
    13b2:	17 c0       	rjmp	.+46     	; 0x13e2 <xQueueReceive+0xee>
    13b4:	c8 01       	movw	r24, r16
    13b6:	73 dd       	rcall	.-1306   	; 0xe9e <prvIsQueueEmpty>
    13b8:	88 23       	and	r24, r24
    13ba:	79 f0       	breq	.+30     	; 0x13da <xQueueReceive+0xe6>
    13bc:	4e 81       	ldd	r20, Y+6	; 0x06
    13be:	5f 81       	ldd	r21, Y+7	; 0x07
    13c0:	68 85       	ldd	r22, Y+8	; 0x08
    13c2:	79 85       	ldd	r23, Y+9	; 0x09
    13c4:	c8 01       	movw	r24, r16
    13c6:	43 96       	adiw	r24, 0x13	; 19
    13c8:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <vTaskPlaceOnEventList>
    13cc:	c8 01       	movw	r24, r16
    13ce:	fb dd       	rcall	.-1034   	; 0xfc6 <prvUnlockQueue>
    13d0:	48 d7       	rcall	.+3728   	; 0x2262 <xTaskResumeAll>
    13d2:	81 11       	cpse	r24, r1
    13d4:	a6 cf       	rjmp	.-180    	; 0x1322 <xQueueReceive+0x2e>
    13d6:	9b dc       	rcall	.-1738   	; 0xd0e <vPortYield>
    13d8:	a4 cf       	rjmp	.-184    	; 0x1322 <xQueueReceive+0x2e>
    13da:	c8 01       	movw	r24, r16
    13dc:	f4 dd       	rcall	.-1048   	; 0xfc6 <prvUnlockQueue>
    13de:	41 d7       	rcall	.+3714   	; 0x2262 <xTaskResumeAll>
    13e0:	a0 cf       	rjmp	.-192    	; 0x1322 <xQueueReceive+0x2e>
    13e2:	c8 01       	movw	r24, r16
    13e4:	f0 dd       	rcall	.-1056   	; 0xfc6 <prvUnlockQueue>
    13e6:	3d d7       	rcall	.+3706   	; 0x2262 <xTaskResumeAll>
    13e8:	c8 01       	movw	r24, r16
    13ea:	59 dd       	rcall	.-1358   	; 0xe9e <prvIsQueueEmpty>
    13ec:	88 23       	and	r24, r24
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <xQueueReceive+0xfe>
    13f0:	98 cf       	rjmp	.-208    	; 0x1322 <xQueueReceive+0x2e>
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	29 96       	adiw	r28, 0x09	; 9
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	ff 90       	pop	r15
    140a:	ef 90       	pop	r14
    140c:	df 90       	pop	r13
    140e:	cf 90       	pop	r12
    1410:	08 95       	ret

00001412 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
    1416:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	0f 92       	push	r0
    141e:	89 a1       	ldd	r24, Y+33	; 0x21
    1420:	8f 3f       	cpi	r24, 0xFF	; 255
    1422:	09 f4       	brne	.+2      	; 0x1426 <vQueueWaitForMessageRestricted+0x14>
    1424:	19 a2       	std	Y+33, r1	; 0x21
    1426:	8a a1       	ldd	r24, Y+34	; 0x22
    1428:	8f 3f       	cpi	r24, 0xFF	; 255
    142a:	09 f4       	brne	.+2      	; 0x142e <vQueueWaitForMessageRestricted+0x1c>
    142c:	1a a2       	std	Y+34, r1	; 0x22
    142e:	0f 90       	pop	r0
    1430:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1432:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1434:	81 11       	cpse	r24, r1
    1436:	04 c0       	rjmp	.+8      	; 0x1440 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1438:	ce 01       	movw	r24, r28
    143a:	43 96       	adiw	r24, 0x13	; 19
    143c:	0e 94 53 13 	call	0x26a6	; 0x26a6 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1440:	ce 01       	movw	r24, r28
    1442:	c1 dd       	rcall	.-1150   	; 0xfc6 <prvUnlockQueue>
    }
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	08 95       	ret

0000144a <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    144a:	fc 01       	movw	r30, r24
    144c:	44 81       	ldd	r20, Z+4	; 0x04
    144e:	55 81       	ldd	r21, Z+5	; 0x05
    1450:	22 81       	ldd	r18, Z+2	; 0x02
    1452:	33 81       	ldd	r19, Z+3	; 0x03
    1454:	24 0f       	add	r18, r20
    1456:	35 1f       	adc	r19, r21
    1458:	80 81       	ld	r24, Z
    145a:	91 81       	ldd	r25, Z+1	; 0x01
    145c:	b9 01       	movw	r22, r18
    145e:	68 1b       	sub	r22, r24
    1460:	79 0b       	sbc	r23, r25
    1462:	cb 01       	movw	r24, r22
    1464:	64 17       	cp	r22, r20
    1466:	75 07       	cpc	r23, r21
    1468:	10 f0       	brcs	.+4      	; 0x146e <prvBytesInBuffer+0x24>
    146a:	84 1b       	sub	r24, r20
    146c:	95 0b       	sbc	r25, r21
    146e:	08 95       	ret

00001470 <prvInitialiseNewStreamBuffer>:
    1470:	0f 93       	push	r16
    1472:	fc 01       	movw	r30, r24
    1474:	8f e0       	ldi	r24, 0x0F	; 15
    1476:	df 01       	movw	r26, r30
    1478:	1d 92       	st	X+, r1
    147a:	8a 95       	dec	r24
    147c:	e9 f7       	brne	.-6      	; 0x1478 <prvInitialiseNewStreamBuffer+0x8>
    147e:	75 87       	std	Z+13, r23	; 0x0d
    1480:	64 87       	std	Z+12, r22	; 0x0c
    1482:	55 83       	std	Z+5, r21	; 0x05
    1484:	44 83       	std	Z+4, r20	; 0x04
    1486:	37 83       	std	Z+7, r19	; 0x07
    1488:	26 83       	std	Z+6, r18	; 0x06
    148a:	06 87       	std	Z+14, r16	; 0x0e
    148c:	0f 91       	pop	r16
    148e:	08 95       	ret

00001490 <prvWriteBytesToBuffer>:
    1490:	af 92       	push	r10
    1492:	bf 92       	push	r11
    1494:	cf 92       	push	r12
    1496:	df 92       	push	r13
    1498:	ef 92       	push	r14
    149a:	ff 92       	push	r15
    149c:	0f 93       	push	r16
    149e:	1f 93       	push	r17
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
    14a4:	6c 01       	movw	r12, r24
    14a6:	5b 01       	movw	r10, r22
    14a8:	7a 01       	movw	r14, r20
    14aa:	fc 01       	movw	r30, r24
    14ac:	c2 81       	ldd	r28, Z+2	; 0x02
    14ae:	d3 81       	ldd	r29, Z+3	; 0x03
    14b0:	04 81       	ldd	r16, Z+4	; 0x04
    14b2:	15 81       	ldd	r17, Z+5	; 0x05
    14b4:	0c 1b       	sub	r16, r28
    14b6:	1d 0b       	sbc	r17, r29
    14b8:	40 17       	cp	r20, r16
    14ba:	51 07       	cpc	r21, r17
    14bc:	08 f4       	brcc	.+2      	; 0x14c0 <prvWriteBytesToBuffer+0x30>
    14be:	8a 01       	movw	r16, r20
    14c0:	f6 01       	movw	r30, r12
    14c2:	84 85       	ldd	r24, Z+12	; 0x0c
    14c4:	95 85       	ldd	r25, Z+13	; 0x0d
    14c6:	a8 01       	movw	r20, r16
    14c8:	b5 01       	movw	r22, r10
    14ca:	8c 0f       	add	r24, r28
    14cc:	9d 1f       	adc	r25, r29
    14ce:	0e 94 cd 33 	call	0x679a	; 0x679a <memcpy>
    14d2:	0e 15       	cp	r16, r14
    14d4:	1f 05       	cpc	r17, r15
    14d6:	58 f4       	brcc	.+22     	; 0x14ee <prvWriteBytesToBuffer+0x5e>
    14d8:	a7 01       	movw	r20, r14
    14da:	40 1b       	sub	r20, r16
    14dc:	51 0b       	sbc	r21, r17
    14de:	b5 01       	movw	r22, r10
    14e0:	60 0f       	add	r22, r16
    14e2:	71 1f       	adc	r23, r17
    14e4:	f6 01       	movw	r30, r12
    14e6:	84 85       	ldd	r24, Z+12	; 0x0c
    14e8:	95 85       	ldd	r25, Z+13	; 0x0d
    14ea:	0e 94 cd 33 	call	0x679a	; 0x679a <memcpy>
    14ee:	ce 01       	movw	r24, r28
    14f0:	8e 0d       	add	r24, r14
    14f2:	9f 1d       	adc	r25, r15
    14f4:	f6 01       	movw	r30, r12
    14f6:	24 81       	ldd	r18, Z+4	; 0x04
    14f8:	35 81       	ldd	r19, Z+5	; 0x05
    14fa:	82 17       	cp	r24, r18
    14fc:	93 07       	cpc	r25, r19
    14fe:	10 f0       	brcs	.+4      	; 0x1504 <prvWriteBytesToBuffer+0x74>
    1500:	82 1b       	sub	r24, r18
    1502:	93 0b       	sbc	r25, r19
    1504:	f6 01       	movw	r30, r12
    1506:	93 83       	std	Z+3, r25	; 0x03
    1508:	82 83       	std	Z+2, r24	; 0x02
    150a:	c7 01       	movw	r24, r14
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	1f 91       	pop	r17
    1512:	0f 91       	pop	r16
    1514:	ff 90       	pop	r15
    1516:	ef 90       	pop	r14
    1518:	df 90       	pop	r13
    151a:	cf 90       	pop	r12
    151c:	bf 90       	pop	r11
    151e:	af 90       	pop	r10
    1520:	08 95       	ret

00001522 <prvWriteMessageToBuffer>:
    1522:	cf 92       	push	r12
    1524:	df 92       	push	r13
    1526:	ef 92       	push	r14
    1528:	ff 92       	push	r15
    152a:	0f 93       	push	r16
    152c:	1f 93       	push	r17
    152e:	cf 93       	push	r28
    1530:	df 93       	push	r29
    1532:	1f 92       	push	r1
    1534:	1f 92       	push	r1
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	7c 01       	movw	r14, r24
    153c:	6b 01       	movw	r12, r22
    153e:	5a 83       	std	Y+2, r21	; 0x02
    1540:	49 83       	std	Y+1, r20	; 0x01
    1542:	21 15       	cp	r18, r1
    1544:	31 05       	cpc	r19, r1
    1546:	c1 f0       	breq	.+48     	; 0x1578 <prvWriteMessageToBuffer+0x56>
    1548:	fc 01       	movw	r30, r24
    154a:	86 85       	ldd	r24, Z+14	; 0x0e
    154c:	80 fd       	sbrc	r24, 0
    154e:	08 c0       	rjmp	.+16     	; 0x1560 <prvWriteMessageToBuffer+0x3e>
    1550:	42 17       	cp	r20, r18
    1552:	53 07       	cpc	r21, r19
    1554:	08 f4       	brcc	.+2      	; 0x1558 <prvWriteMessageToBuffer+0x36>
    1556:	9a 01       	movw	r18, r20
    1558:	3a 83       	std	Y+2, r19	; 0x02
    155a:	29 83       	std	Y+1, r18	; 0x01
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	0f c0       	rjmp	.+30     	; 0x157e <prvWriteMessageToBuffer+0x5c>
    1560:	20 17       	cp	r18, r16
    1562:	31 07       	cpc	r19, r17
    1564:	58 f0       	brcs	.+22     	; 0x157c <prvWriteMessageToBuffer+0x5a>
    1566:	42 e0       	ldi	r20, 0x02	; 2
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	be 01       	movw	r22, r28
    156c:	6f 5f       	subi	r22, 0xFF	; 255
    156e:	7f 4f       	sbci	r23, 0xFF	; 255
    1570:	c7 01       	movw	r24, r14
    1572:	8e df       	rcall	.-228    	; 0x1490 <prvWriteBytesToBuffer>
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	03 c0       	rjmp	.+6      	; 0x157e <prvWriteMessageToBuffer+0x5c>
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	01 c0       	rjmp	.+2      	; 0x157e <prvWriteMessageToBuffer+0x5c>
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	88 23       	and	r24, r24
    1580:	31 f0       	breq	.+12     	; 0x158e <prvWriteMessageToBuffer+0x6c>
    1582:	49 81       	ldd	r20, Y+1	; 0x01
    1584:	5a 81       	ldd	r21, Y+2	; 0x02
    1586:	b6 01       	movw	r22, r12
    1588:	c7 01       	movw	r24, r14
    158a:	82 df       	rcall	.-252    	; 0x1490 <prvWriteBytesToBuffer>
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <prvWriteMessageToBuffer+0x70>
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	1f 91       	pop	r17
    159c:	0f 91       	pop	r16
    159e:	ff 90       	pop	r15
    15a0:	ef 90       	pop	r14
    15a2:	df 90       	pop	r13
    15a4:	cf 90       	pop	r12
    15a6:	08 95       	ret

000015a8 <prvReadBytesFromBuffer>:
    15a8:	af 92       	push	r10
    15aa:	bf 92       	push	r11
    15ac:	cf 92       	push	r12
    15ae:	df 92       	push	r13
    15b0:	ef 92       	push	r14
    15b2:	ff 92       	push	r15
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	7c 01       	movw	r14, r24
    15be:	5b 01       	movw	r10, r22
    15c0:	e9 01       	movw	r28, r18
    15c2:	42 17       	cp	r20, r18
    15c4:	53 07       	cpc	r21, r19
    15c6:	08 f4       	brcc	.+2      	; 0x15ca <prvReadBytesFromBuffer+0x22>
    15c8:	ea 01       	movw	r28, r20
    15ca:	20 97       	sbiw	r28, 0x00	; 0
    15cc:	81 f1       	breq	.+96     	; 0x162e <prvReadBytesFromBuffer+0x86>
    15ce:	f7 01       	movw	r30, r14
    15d0:	00 81       	ld	r16, Z
    15d2:	11 81       	ldd	r17, Z+1	; 0x01
    15d4:	84 81       	ldd	r24, Z+4	; 0x04
    15d6:	95 81       	ldd	r25, Z+5	; 0x05
    15d8:	80 1b       	sub	r24, r16
    15da:	91 0b       	sbc	r25, r17
    15dc:	6e 01       	movw	r12, r28
    15de:	8c 17       	cp	r24, r28
    15e0:	9d 07       	cpc	r25, r29
    15e2:	08 f4       	brcc	.+2      	; 0x15e6 <prvReadBytesFromBuffer+0x3e>
    15e4:	6c 01       	movw	r12, r24
    15e6:	f7 01       	movw	r30, r14
    15e8:	64 85       	ldd	r22, Z+12	; 0x0c
    15ea:	75 85       	ldd	r23, Z+13	; 0x0d
    15ec:	60 0f       	add	r22, r16
    15ee:	71 1f       	adc	r23, r17
    15f0:	a6 01       	movw	r20, r12
    15f2:	c5 01       	movw	r24, r10
    15f4:	0e 94 cd 33 	call	0x679a	; 0x679a <memcpy>
    15f8:	cc 16       	cp	r12, r28
    15fa:	dd 06       	cpc	r13, r29
    15fc:	58 f4       	brcc	.+22     	; 0x1614 <prvReadBytesFromBuffer+0x6c>
    15fe:	ae 01       	movw	r20, r28
    1600:	4c 19       	sub	r20, r12
    1602:	5d 09       	sbc	r21, r13
    1604:	f7 01       	movw	r30, r14
    1606:	64 85       	ldd	r22, Z+12	; 0x0c
    1608:	75 85       	ldd	r23, Z+13	; 0x0d
    160a:	c5 01       	movw	r24, r10
    160c:	8c 0d       	add	r24, r12
    160e:	9d 1d       	adc	r25, r13
    1610:	0e 94 cd 33 	call	0x679a	; 0x679a <memcpy>
    1614:	0c 0f       	add	r16, r28
    1616:	1d 1f       	adc	r17, r29
    1618:	f7 01       	movw	r30, r14
    161a:	84 81       	ldd	r24, Z+4	; 0x04
    161c:	95 81       	ldd	r25, Z+5	; 0x05
    161e:	08 17       	cp	r16, r24
    1620:	19 07       	cpc	r17, r25
    1622:	10 f0       	brcs	.+4      	; 0x1628 <prvReadBytesFromBuffer+0x80>
    1624:	08 1b       	sub	r16, r24
    1626:	19 0b       	sbc	r17, r25
    1628:	f7 01       	movw	r30, r14
    162a:	11 83       	std	Z+1, r17	; 0x01
    162c:	00 83       	st	Z, r16
    162e:	ce 01       	movw	r24, r28
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	1f 91       	pop	r17
    1636:	0f 91       	pop	r16
    1638:	ff 90       	pop	r15
    163a:	ef 90       	pop	r14
    163c:	df 90       	pop	r13
    163e:	cf 90       	pop	r12
    1640:	bf 90       	pop	r11
    1642:	af 90       	pop	r10
    1644:	08 95       	ret

00001646 <prvReadMessageFromBuffer>:
    1646:	6f 92       	push	r6
    1648:	7f 92       	push	r7
    164a:	8f 92       	push	r8
    164c:	9f 92       	push	r9
    164e:	af 92       	push	r10
    1650:	bf 92       	push	r11
    1652:	cf 92       	push	r12
    1654:	df 92       	push	r13
    1656:	ef 92       	push	r14
    1658:	ff 92       	push	r15
    165a:	0f 93       	push	r16
    165c:	1f 93       	push	r17
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	1f 92       	push	r1
    1664:	1f 92       	push	r1
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	6c 01       	movw	r12, r24
    166c:	4b 01       	movw	r8, r22
    166e:	5a 01       	movw	r10, r20
    1670:	79 01       	movw	r14, r18
    1672:	01 15       	cp	r16, r1
    1674:	11 05       	cpc	r17, r1
    1676:	b1 f0       	breq	.+44     	; 0x16a4 <prvReadMessageFromBuffer+0x5e>
    1678:	fc 01       	movw	r30, r24
    167a:	60 80       	ld	r6, Z
    167c:	71 80       	ldd	r7, Z+1	; 0x01
    167e:	a8 01       	movw	r20, r16
    1680:	be 01       	movw	r22, r28
    1682:	6f 5f       	subi	r22, 0xFF	; 255
    1684:	7f 4f       	sbci	r23, 0xFF	; 255
    1686:	90 df       	rcall	.-224    	; 0x15a8 <prvReadBytesFromBuffer>
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	9a 81       	ldd	r25, Y+2	; 0x02
    168c:	e0 1a       	sub	r14, r16
    168e:	f1 0a       	sbc	r15, r17
    1690:	a8 16       	cp	r10, r24
    1692:	b9 06       	cpc	r11, r25
    1694:	30 f4       	brcc	.+12     	; 0x16a2 <prvReadMessageFromBuffer+0x5c>
    1696:	f6 01       	movw	r30, r12
    1698:	71 82       	std	Z+1, r7	; 0x01
    169a:	60 82       	st	Z, r6
    169c:	a1 2c       	mov	r10, r1
    169e:	b1 2c       	mov	r11, r1
    16a0:	01 c0       	rjmp	.+2      	; 0x16a4 <prvReadMessageFromBuffer+0x5e>
    16a2:	5c 01       	movw	r10, r24
    16a4:	97 01       	movw	r18, r14
    16a6:	a5 01       	movw	r20, r10
    16a8:	b4 01       	movw	r22, r8
    16aa:	c6 01       	movw	r24, r12
    16ac:	7d df       	rcall	.-262    	; 0x15a8 <prvReadBytesFromBuffer>
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	1f 91       	pop	r17
    16b8:	0f 91       	pop	r16
    16ba:	ff 90       	pop	r15
    16bc:	ef 90       	pop	r14
    16be:	df 90       	pop	r13
    16c0:	cf 90       	pop	r12
    16c2:	bf 90       	pop	r11
    16c4:	af 90       	pop	r10
    16c6:	9f 90       	pop	r9
    16c8:	8f 90       	pop	r8
    16ca:	7f 90       	pop	r7
    16cc:	6f 90       	pop	r6
    16ce:	08 95       	ret

000016d0 <xStreamBufferGenericCreate>:
    16d0:	cf 92       	push	r12
    16d2:	df 92       	push	r13
    16d4:	ef 92       	push	r14
    16d6:	ff 92       	push	r15
    16d8:	0f 93       	push	r16
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	ec 01       	movw	r28, r24
    16e0:	6b 01       	movw	r12, r22
    16e2:	41 30       	cpi	r20, 0x01	; 1
    16e4:	11 f4       	brne	.+4      	; 0x16ea <xStreamBufferGenericCreate+0x1a>
    16e6:	01 e0       	ldi	r16, 0x01	; 1
    16e8:	01 c0       	rjmp	.+2      	; 0x16ec <xStreamBufferGenericCreate+0x1c>
    16ea:	00 e0       	ldi	r16, 0x00	; 0
    16ec:	c1 14       	cp	r12, r1
    16ee:	d1 04       	cpc	r13, r1
    16f0:	19 f4       	brne	.+6      	; 0x16f8 <xStreamBufferGenericCreate+0x28>
    16f2:	cc 24       	eor	r12, r12
    16f4:	c3 94       	inc	r12
    16f6:	d1 2c       	mov	r13, r1
    16f8:	ce 01       	movw	r24, r28
    16fa:	40 96       	adiw	r24, 0x10	; 16
    16fc:	c8 17       	cp	r28, r24
    16fe:	d9 07       	cpc	r29, r25
    1700:	20 f4       	brcc	.+8      	; 0x170a <xStreamBufferGenericCreate+0x3a>
    1702:	21 96       	adiw	r28, 0x01	; 1
    1704:	50 d9       	rcall	.-3424   	; 0x9a6 <pvPortMalloc>
    1706:	7c 01       	movw	r14, r24
    1708:	02 c0       	rjmp	.+4      	; 0x170e <xStreamBufferGenericCreate+0x3e>
    170a:	e1 2c       	mov	r14, r1
    170c:	f1 2c       	mov	r15, r1
    170e:	e1 14       	cp	r14, r1
    1710:	f1 04       	cpc	r15, r1
    1712:	39 f0       	breq	.+14     	; 0x1722 <xStreamBufferGenericCreate+0x52>
    1714:	96 01       	movw	r18, r12
    1716:	ae 01       	movw	r20, r28
    1718:	b7 01       	movw	r22, r14
    171a:	61 5f       	subi	r22, 0xF1	; 241
    171c:	7f 4f       	sbci	r23, 0xFF	; 255
    171e:	c7 01       	movw	r24, r14
    1720:	a7 de       	rcall	.-690    	; 0x1470 <prvInitialiseNewStreamBuffer>
    1722:	c7 01       	movw	r24, r14
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	0f 91       	pop	r16
    172a:	ff 90       	pop	r15
    172c:	ef 90       	pop	r14
    172e:	df 90       	pop	r13
    1730:	cf 90       	pop	r12
    1732:	08 95       	ret

00001734 <xStreamBufferReset>:
    1734:	0f 93       	push	r16
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	0f 92       	push	r0
    173c:	fc 01       	movw	r30, r24
    173e:	20 85       	ldd	r18, Z+8	; 0x08
    1740:	31 85       	ldd	r19, Z+9	; 0x09
    1742:	23 2b       	or	r18, r19
    1744:	71 f4       	brne	.+28     	; 0x1762 <xStreamBufferReset+0x2e>
    1746:	22 85       	ldd	r18, Z+10	; 0x0a
    1748:	33 85       	ldd	r19, Z+11	; 0x0b
    174a:	23 2b       	or	r18, r19
    174c:	61 f4       	brne	.+24     	; 0x1766 <xStreamBufferReset+0x32>
    174e:	26 81       	ldd	r18, Z+6	; 0x06
    1750:	37 81       	ldd	r19, Z+7	; 0x07
    1752:	44 81       	ldd	r20, Z+4	; 0x04
    1754:	55 81       	ldd	r21, Z+5	; 0x05
    1756:	64 85       	ldd	r22, Z+12	; 0x0c
    1758:	75 85       	ldd	r23, Z+13	; 0x0d
    175a:	06 85       	ldd	r16, Z+14	; 0x0e
    175c:	89 de       	rcall	.-750    	; 0x1470 <prvInitialiseNewStreamBuffer>
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	03 c0       	rjmp	.+6      	; 0x1768 <xStreamBufferReset+0x34>
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <xStreamBufferReset+0x34>
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	0f 90       	pop	r0
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	0f 91       	pop	r16
    176e:	08 95       	ret

00001770 <xStreamBufferSpacesAvailable>:
    1770:	fc 01       	movw	r30, r24
    1772:	24 81       	ldd	r18, Z+4	; 0x04
    1774:	35 81       	ldd	r19, Z+5	; 0x05
    1776:	80 81       	ld	r24, Z
    1778:	91 81       	ldd	r25, Z+1	; 0x01
    177a:	82 0f       	add	r24, r18
    177c:	93 1f       	adc	r25, r19
    177e:	42 81       	ldd	r20, Z+2	; 0x02
    1780:	53 81       	ldd	r21, Z+3	; 0x03
    1782:	84 1b       	sub	r24, r20
    1784:	95 0b       	sbc	r25, r21
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	82 17       	cp	r24, r18
    178a:	93 07       	cpc	r25, r19
    178c:	10 f0       	brcs	.+4      	; 0x1792 <xStreamBufferSpacesAvailable+0x22>
    178e:	82 1b       	sub	r24, r18
    1790:	93 0b       	sbc	r25, r19
    1792:	08 95       	ret

00001794 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1794:	2f 92       	push	r2
    1796:	3f 92       	push	r3
    1798:	4f 92       	push	r4
    179a:	5f 92       	push	r5
    179c:	6f 92       	push	r6
    179e:	7f 92       	push	r7
    17a0:	8f 92       	push	r8
    17a2:	9f 92       	push	r9
    17a4:	af 92       	push	r10
    17a6:	bf 92       	push	r11
    17a8:	cf 92       	push	r12
    17aa:	df 92       	push	r13
    17ac:	ef 92       	push	r14
    17ae:	ff 92       	push	r15
    17b0:	0f 93       	push	r16
    17b2:	1f 93       	push	r17
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	2b 97       	sbiw	r28, 0x0b	; 11
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	cd bf       	out	0x3d, r28	; 61
    17c8:	4c 01       	movw	r8, r24
    17ca:	7b 87       	std	Y+11, r23	; 0x0b
    17cc:	6a 87       	std	Y+10, r22	; 0x0a
    17ce:	1a 01       	movw	r2, r20
    17d0:	0e 83       	std	Y+6, r16	; 0x06
    17d2:	1f 83       	std	Y+7, r17	; 0x07
    17d4:	28 87       	std	Y+8, r18	; 0x08
    17d6:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    17d8:	fc 01       	movw	r30, r24
    17da:	84 81       	ldd	r24, Z+4	; 0x04
    17dc:	95 81       	ldd	r25, Z+5	; 0x05
    17de:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    17e0:	26 85       	ldd	r18, Z+14	; 0x0e
    17e2:	20 ff       	sbrs	r18, 0
    17e4:	0c c0       	rjmp	.+24     	; 0x17fe <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    17e6:	2a 01       	movw	r4, r20
    17e8:	f2 e0       	ldi	r31, 0x02	; 2
    17ea:	4f 0e       	add	r4, r31
    17ec:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    17ee:	84 15       	cp	r24, r4
    17f0:	95 05       	cpc	r25, r5
    17f2:	58 f4       	brcc	.+22     	; 0x180a <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    17f4:	1e 82       	std	Y+6, r1	; 0x06
    17f6:	1f 82       	std	Y+7, r1	; 0x07
    17f8:	18 86       	std	Y+8, r1	; 0x08
    17fa:	19 86       	std	Y+9, r1	; 0x09
    17fc:	06 c0       	rjmp	.+12     	; 0x180a <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    17fe:	84 17       	cp	r24, r20
    1800:	95 07       	cpc	r25, r21
    1802:	10 f0       	brcs	.+4      	; 0x1808 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1804:	2a 01       	movw	r4, r20
    1806:	01 c0       	rjmp	.+2      	; 0x180a <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1808:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    180a:	8e 81       	ldd	r24, Y+6	; 0x06
    180c:	9f 81       	ldd	r25, Y+7	; 0x07
    180e:	a8 85       	ldd	r26, Y+8	; 0x08
    1810:	b9 85       	ldd	r27, Y+9	; 0x09
    1812:	89 2b       	or	r24, r25
    1814:	8a 2b       	or	r24, r26
    1816:	8b 2b       	or	r24, r27
    1818:	09 f4       	brne	.+2      	; 0x181c <xStreamBufferSend+0x88>
    181a:	38 c0       	rjmp	.+112    	; 0x188c <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    181c:	ce 01       	movw	r24, r28
    181e:	01 96       	adiw	r24, 0x01	; 1
    1820:	0e 94 de 14 	call	0x29bc	; 0x29bc <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    182a:	c4 01       	movw	r24, r8
    182c:	a1 df       	rcall	.-190    	; 0x1770 <xStreamBufferSpacesAvailable>
    182e:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1830:	84 15       	cp	r24, r4
    1832:	95 05       	cpc	r25, r5
    1834:	40 f5       	brcc	.+80     	; 0x1886 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1836:	60 e0       	ldi	r22, 0x00	; 0
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	0e 94 c7 18 	call	0x318e	; 0x318e <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1840:	0e 94 6f 15 	call	0x2ade	; 0x2ade <xTaskGetCurrentTaskHandle>
    1844:	f4 01       	movw	r30, r8
    1846:	93 87       	std	Z+11, r25	; 0x0b
    1848:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    184a:	0f 90       	pop	r0
    184c:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    184e:	ae 80       	ldd	r10, Y+6	; 0x06
    1850:	bf 80       	ldd	r11, Y+7	; 0x07
    1852:	c8 84       	ldd	r12, Y+8	; 0x08
    1854:	d9 84       	ldd	r13, Y+9	; 0x09
    1856:	e1 2c       	mov	r14, r1
    1858:	f1 2c       	mov	r15, r1
    185a:	00 e0       	ldi	r16, 0x00	; 0
    185c:	10 e0       	ldi	r17, 0x00	; 0
    185e:	98 01       	movw	r18, r16
    1860:	40 e0       	ldi	r20, 0x00	; 0
    1862:	50 e0       	ldi	r21, 0x00	; 0
    1864:	ba 01       	movw	r22, r20
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    186c:	f4 01       	movw	r30, r8
    186e:	13 86       	std	Z+11, r1	; 0x0b
    1870:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1872:	be 01       	movw	r22, r28
    1874:	6a 5f       	subi	r22, 0xFA	; 250
    1876:	7f 4f       	sbci	r23, 0xFF	; 255
    1878:	ce 01       	movw	r24, r28
    187a:	01 96       	adiw	r24, 0x01	; 1
    187c:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <xTaskCheckForTimeOut>
    1880:	88 23       	and	r24, r24
    1882:	81 f2       	breq	.-96     	; 0x1824 <xStreamBufferSend+0x90>
    1884:	05 c0       	rjmp	.+10     	; 0x1890 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1886:	0f 90       	pop	r0
    1888:	0f be       	out	0x3f, r0	; 63
                    break;
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    188c:	61 2c       	mov	r6, r1
    188e:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1890:	61 14       	cp	r6, r1
    1892:	71 04       	cpc	r7, r1
    1894:	19 f4       	brne	.+6      	; 0x189c <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1896:	c4 01       	movw	r24, r8
    1898:	6b df       	rcall	.-298    	; 0x1770 <xStreamBufferSpacesAvailable>
    189a:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    189c:	82 01       	movw	r16, r4
    189e:	93 01       	movw	r18, r6
    18a0:	a1 01       	movw	r20, r2
    18a2:	6a 85       	ldd	r22, Y+10	; 0x0a
    18a4:	7b 85       	ldd	r23, Y+11	; 0x0b
    18a6:	c4 01       	movw	r24, r8
    18a8:	3c de       	rcall	.-904    	; 0x1522 <prvWriteMessageToBuffer>
    18aa:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    18ac:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    18ae:	e9 f0       	breq	.+58     	; 0x18ea <xStreamBufferSend+0x156>
    18b0:	c4 01       	movw	r24, r8
    18b2:	cb dd       	rcall	.-1130   	; 0x144a <prvBytesInBuffer>
    18b4:	f4 01       	movw	r30, r8
    18b6:	26 81       	ldd	r18, Z+6	; 0x06
    18b8:	37 81       	ldd	r19, Z+7	; 0x07
    18ba:	82 17       	cp	r24, r18
    18bc:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    18be:	a8 f0       	brcs	.+42     	; 0x18ea <xStreamBufferSend+0x156>
    18c0:	90 d3       	rcall	.+1824   	; 0x1fe2 <vTaskSuspendAll>
    18c2:	f4 01       	movw	r30, r8
    18c4:	80 85       	ldd	r24, Z+8	; 0x08
    18c6:	91 85       	ldd	r25, Z+9	; 0x09
    18c8:	89 2b       	or	r24, r25
    18ca:	71 f0       	breq	.+28     	; 0x18e8 <xStreamBufferSend+0x154>
    18cc:	80 85       	ldd	r24, Z+8	; 0x08
    18ce:	91 85       	ldd	r25, Z+9	; 0x09
    18d0:	e1 2c       	mov	r14, r1
    18d2:	f1 2c       	mov	r15, r1
    18d4:	00 e0       	ldi	r16, 0x00	; 0
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	a9 01       	movw	r20, r18
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <xTaskGenericNotify>
    18e2:	f4 01       	movw	r30, r8
    18e4:	11 86       	std	Z+9, r1	; 0x09
    18e6:	10 86       	std	Z+8, r1	; 0x08
    18e8:	bc d4       	rcall	.+2424   	; 0x2262 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    18ea:	c6 01       	movw	r24, r12
    18ec:	2b 96       	adiw	r28, 0x0b	; 11
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	1f 91       	pop	r17
    18fe:	0f 91       	pop	r16
    1900:	ff 90       	pop	r15
    1902:	ef 90       	pop	r14
    1904:	df 90       	pop	r13
    1906:	cf 90       	pop	r12
    1908:	bf 90       	pop	r11
    190a:	af 90       	pop	r10
    190c:	9f 90       	pop	r9
    190e:	8f 90       	pop	r8
    1910:	7f 90       	pop	r7
    1912:	6f 90       	pop	r6
    1914:	5f 90       	pop	r5
    1916:	4f 90       	pop	r4
    1918:	3f 90       	pop	r3
    191a:	2f 90       	pop	r2
    191c:	08 95       	ret

0000191e <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    191e:	af 92       	push	r10
    1920:	bf 92       	push	r11
    1922:	cf 92       	push	r12
    1924:	df 92       	push	r13
    1926:	ef 92       	push	r14
    1928:	ff 92       	push	r15
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	ec 01       	movw	r28, r24
    1934:	7b 01       	movw	r14, r22
    1936:	5a 01       	movw	r10, r20
    1938:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    193a:	8e 85       	ldd	r24, Y+14	; 0x0e
    193c:	80 ff       	sbrs	r24, 0
    193e:	04 c0       	rjmp	.+8      	; 0x1948 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1940:	8a 01       	movw	r16, r20
    1942:	0e 5f       	subi	r16, 0xFE	; 254
    1944:	1f 4f       	sbci	r17, 0xFF	; 255
    1946:	01 c0       	rjmp	.+2      	; 0x194a <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1948:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    194a:	ce 01       	movw	r24, r28
    194c:	11 df       	rcall	.-478    	; 0x1770 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    194e:	9c 01       	movw	r18, r24
    1950:	a5 01       	movw	r20, r10
    1952:	b7 01       	movw	r22, r14
    1954:	ce 01       	movw	r24, r28
    1956:	e5 dd       	rcall	.-1078   	; 0x1522 <prvWriteMessageToBuffer>
    1958:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    195a:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    195c:	c1 f0       	breq	.+48     	; 0x198e <xStreamBufferSendFromISR+0x70>
    195e:	ce 01       	movw	r24, r28
    1960:	74 dd       	rcall	.-1304   	; 0x144a <prvBytesInBuffer>
    1962:	2e 81       	ldd	r18, Y+6	; 0x06
    1964:	3f 81       	ldd	r19, Y+7	; 0x07
    1966:	82 17       	cp	r24, r18
    1968:	93 07       	cpc	r25, r19
    196a:	88 f0       	brcs	.+34     	; 0x198e <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    196c:	88 85       	ldd	r24, Y+8	; 0x08
    196e:	99 85       	ldd	r25, Y+9	; 0x09
    1970:	89 2b       	or	r24, r25
    1972:	69 f0       	breq	.+26     	; 0x198e <xStreamBufferSendFromISR+0x70>
    1974:	88 85       	ldd	r24, Y+8	; 0x08
    1976:	99 85       	ldd	r25, Y+9	; 0x09
    1978:	e1 2c       	mov	r14, r1
    197a:	f1 2c       	mov	r15, r1
    197c:	00 e0       	ldi	r16, 0x00	; 0
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	a9 01       	movw	r20, r18
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <xTaskGenericNotifyFromISR>
    198a:	19 86       	std	Y+9, r1	; 0x09
    198c:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    198e:	c5 01       	movw	r24, r10
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	1f 91       	pop	r17
    1996:	0f 91       	pop	r16
    1998:	ff 90       	pop	r15
    199a:	ef 90       	pop	r14
    199c:	df 90       	pop	r13
    199e:	cf 90       	pop	r12
    19a0:	bf 90       	pop	r11
    19a2:	af 90       	pop	r10
    19a4:	08 95       	ret

000019a6 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    19a6:	4f 92       	push	r4
    19a8:	5f 92       	push	r5
    19aa:	6f 92       	push	r6
    19ac:	7f 92       	push	r7
    19ae:	8f 92       	push	r8
    19b0:	9f 92       	push	r9
    19b2:	af 92       	push	r10
    19b4:	bf 92       	push	r11
    19b6:	cf 92       	push	r12
    19b8:	df 92       	push	r13
    19ba:	ef 92       	push	r14
    19bc:	ff 92       	push	r15
    19be:	0f 93       	push	r16
    19c0:	1f 93       	push	r17
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	ec 01       	movw	r28, r24
    19c8:	2b 01       	movw	r4, r22
    19ca:	3a 01       	movw	r6, r20
    19cc:	58 01       	movw	r10, r16
    19ce:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    19d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    19d2:	80 ff       	sbrs	r24, 0
    19d4:	05 c0       	rjmp	.+10     	; 0x19e0 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    19d6:	68 94       	set
    19d8:	88 24       	eor	r8, r8
    19da:	81 f8       	bld	r8, 1
    19dc:	91 2c       	mov	r9, r1
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    19e0:	81 2c       	mov	r8, r1
    19e2:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    19e4:	a1 14       	cp	r10, r1
    19e6:	b1 04       	cpc	r11, r1
    19e8:	c1 04       	cpc	r12, r1
    19ea:	d1 04       	cpc	r13, r1
    19ec:	41 f1       	breq	.+80     	; 0x1a3e <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    19f4:	ce 01       	movw	r24, r28
    19f6:	29 dd       	rcall	.-1454   	; 0x144a <prvBytesInBuffer>
    19f8:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    19fa:	88 16       	cp	r8, r24
    19fc:	99 06       	cpc	r9, r25
    19fe:	48 f0       	brcs	.+18     	; 0x1a12 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1a00:	60 e0       	ldi	r22, 0x00	; 0
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 94 c7 18 	call	0x318e	; 0x318e <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1a0a:	0e 94 6f 15 	call	0x2ade	; 0x2ade <xTaskGetCurrentTaskHandle>
    1a0e:	99 87       	std	Y+9, r25	; 0x09
    1a10:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1a12:	0f 90       	pop	r0
    1a14:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1a16:	8e 14       	cp	r8, r14
    1a18:	9f 04       	cpc	r9, r15
    1a1a:	a0 f0       	brcs	.+40     	; 0x1a44 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1a1c:	e1 2c       	mov	r14, r1
    1a1e:	f1 2c       	mov	r15, r1
    1a20:	00 e0       	ldi	r16, 0x00	; 0
    1a22:	10 e0       	ldi	r17, 0x00	; 0
    1a24:	98 01       	movw	r18, r16
    1a26:	40 e0       	ldi	r20, 0x00	; 0
    1a28:	50 e0       	ldi	r21, 0x00	; 0
    1a2a:	ba 01       	movw	r22, r20
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1a32:	19 86       	std	Y+9, r1	; 0x09
    1a34:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1a36:	ce 01       	movw	r24, r28
    1a38:	08 dd       	rcall	.-1520   	; 0x144a <prvBytesInBuffer>
    1a3a:	7c 01       	movw	r14, r24
    1a3c:	03 c0       	rjmp	.+6      	; 0x1a44 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1a3e:	ce 01       	movw	r24, r28
    1a40:	04 dd       	rcall	.-1528   	; 0x144a <prvBytesInBuffer>
    1a42:	7c 01       	movw	r14, r24
    1a44:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1a46:	9f 04       	cpc	r9, r15
    1a48:	e8 f4       	brcc	.+58     	; 0x1a84 <xStreamBufferReceive+0xde>
    1a4a:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1a4c:	97 01       	movw	r18, r14
    1a4e:	a3 01       	movw	r20, r6
    1a50:	b2 01       	movw	r22, r4
    1a52:	ce 01       	movw	r24, r28
    1a54:	f8 dd       	rcall	.-1040   	; 0x1646 <prvReadMessageFromBuffer>
    1a56:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1a58:	89 2b       	or	r24, r25
    1a5a:	b1 f0       	breq	.+44     	; 0x1a88 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1a5c:	c2 d2       	rcall	.+1412   	; 0x1fe2 <vTaskSuspendAll>
    1a5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a60:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a62:	89 2b       	or	r24, r25
    1a64:	69 f0       	breq	.+26     	; 0x1a80 <xStreamBufferReceive+0xda>
    1a66:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a68:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a6a:	e1 2c       	mov	r14, r1
    1a6c:	f1 2c       	mov	r15, r1
    1a6e:	00 e0       	ldi	r16, 0x00	; 0
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	a9 01       	movw	r20, r18
    1a76:	60 e0       	ldi	r22, 0x00	; 0
    1a78:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <xTaskGenericNotify>
    1a7c:	1b 86       	std	Y+11, r1	; 0x0b
    1a7e:	1a 86       	std	Y+10, r1	; 0x0a
    1a80:	f0 d3       	rcall	.+2016   	; 0x2262 <xTaskResumeAll>
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <xStreamBufferReceive+0xe2>
    1a84:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1a86:	d1 2c       	mov	r13, r1
    1a88:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1a8a:	df 91       	pop	r29
    1a8c:	cf 91       	pop	r28
    1a8e:	1f 91       	pop	r17
    1a90:	0f 91       	pop	r16
    1a92:	ff 90       	pop	r15
    1a94:	ef 90       	pop	r14
    1a96:	df 90       	pop	r13
    1a98:	cf 90       	pop	r12
    1a9a:	bf 90       	pop	r11
    1a9c:	af 90       	pop	r10
    1a9e:	9f 90       	pop	r9
    1aa0:	8f 90       	pop	r8
    1aa2:	7f 90       	pop	r7
    1aa4:	6f 90       	pop	r6
    1aa6:	5f 90       	pop	r5
    1aa8:	4f 90       	pop	r4
    1aaa:	08 95       	ret

00001aac <prvResetNextTaskUnblockTime>:
    1aac:	e0 91 43 14 	lds	r30, 0x1443	; 0x801443 <pxDelayedTaskList>
    1ab0:	f0 91 44 14 	lds	r31, 0x1444	; 0x801444 <pxDelayedTaskList+0x1>
    1ab4:	80 81       	ld	r24, Z
    1ab6:	81 11       	cpse	r24, r1
    1ab8:	0c c0       	rjmp	.+24     	; 0x1ad2 <prvResetNextTaskUnblockTime+0x26>
    1aba:	8f ef       	ldi	r24, 0xFF	; 255
    1abc:	9f ef       	ldi	r25, 0xFF	; 255
    1abe:	dc 01       	movw	r26, r24
    1ac0:	80 93 0d 14 	sts	0x140D, r24	; 0x80140d <xNextTaskUnblockTime>
    1ac4:	90 93 0e 14 	sts	0x140E, r25	; 0x80140e <xNextTaskUnblockTime+0x1>
    1ac8:	a0 93 0f 14 	sts	0x140F, r26	; 0x80140f <xNextTaskUnblockTime+0x2>
    1acc:	b0 93 10 14 	sts	0x1410, r27	; 0x801410 <xNextTaskUnblockTime+0x3>
    1ad0:	08 95       	ret
    1ad2:	e0 91 43 14 	lds	r30, 0x1443	; 0x801443 <pxDelayedTaskList>
    1ad6:	f0 91 44 14 	lds	r31, 0x1444	; 0x801444 <pxDelayedTaskList+0x1>
    1ada:	07 80       	ldd	r0, Z+7	; 0x07
    1adc:	f0 85       	ldd	r31, Z+8	; 0x08
    1ade:	e0 2d       	mov	r30, r0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	91 81       	ldd	r25, Z+1	; 0x01
    1ae4:	a2 81       	ldd	r26, Z+2	; 0x02
    1ae6:	b3 81       	ldd	r27, Z+3	; 0x03
    1ae8:	80 93 0d 14 	sts	0x140D, r24	; 0x80140d <xNextTaskUnblockTime>
    1aec:	90 93 0e 14 	sts	0x140E, r25	; 0x80140e <xNextTaskUnblockTime+0x1>
    1af0:	a0 93 0f 14 	sts	0x140F, r26	; 0x80140f <xNextTaskUnblockTime+0x2>
    1af4:	b0 93 10 14 	sts	0x1410, r27	; 0x801410 <xNextTaskUnblockTime+0x3>
    1af8:	08 95       	ret

00001afa <prvDeleteTCB>:
    1afa:	cf 93       	push	r28
    1afc:	df 93       	push	r29
    1afe:	ec 01       	movw	r28, r24
    1b00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b04:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <vPortFree>
    1b08:	ce 01       	movw	r24, r28
    1b0a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <vPortFree>
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	08 95       	ret

00001b14 <prvInitialiseNewTask>:
    1b14:	4f 92       	push	r4
    1b16:	5f 92       	push	r5
    1b18:	6f 92       	push	r6
    1b1a:	7f 92       	push	r7
    1b1c:	8f 92       	push	r8
    1b1e:	9f 92       	push	r9
    1b20:	af 92       	push	r10
    1b22:	bf 92       	push	r11
    1b24:	cf 92       	push	r12
    1b26:	df 92       	push	r13
    1b28:	ef 92       	push	r14
    1b2a:	ff 92       	push	r15
    1b2c:	0f 93       	push	r16
    1b2e:	cf 93       	push	r28
    1b30:	df 93       	push	r29
    1b32:	2c 01       	movw	r4, r24
    1b34:	5b 01       	movw	r10, r22
    1b36:	4a 01       	movw	r8, r20
    1b38:	39 01       	movw	r6, r18
    1b3a:	e6 01       	movw	r28, r12
    1b3c:	65 ea       	ldi	r22, 0xA5	; 165
    1b3e:	70 e0       	ldi	r23, 0x00	; 0
    1b40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b44:	0e 94 d6 33 	call	0x67ac	; 0x67ac <memset>
    1b48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b4c:	21 e0       	ldi	r18, 0x01	; 1
    1b4e:	82 1a       	sub	r8, r18
    1b50:	91 08       	sbc	r9, r1
    1b52:	88 0e       	add	r8, r24
    1b54:	99 1e       	adc	r9, r25
    1b56:	a1 14       	cp	r10, r1
    1b58:	b1 04       	cpc	r11, r1
    1b5a:	89 f4       	brne	.+34     	; 0x1b7e <prvInitialiseNewTask+0x6a>
    1b5c:	15 c0       	rjmp	.+42     	; 0x1b88 <prvInitialiseNewTask+0x74>
    1b5e:	82 2f       	mov	r24, r18
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	f5 01       	movw	r30, r10
    1b64:	e8 0f       	add	r30, r24
    1b66:	f9 1f       	adc	r31, r25
    1b68:	30 81       	ld	r19, Z
    1b6a:	de 01       	movw	r26, r28
    1b6c:	a8 0f       	add	r26, r24
    1b6e:	b9 1f       	adc	r27, r25
    1b70:	5d 96       	adiw	r26, 0x1d	; 29
    1b72:	3c 93       	st	X, r19
    1b74:	80 81       	ld	r24, Z
    1b76:	88 23       	and	r24, r24
    1b78:	29 f0       	breq	.+10     	; 0x1b84 <prvInitialiseNewTask+0x70>
    1b7a:	2f 5f       	subi	r18, 0xFF	; 255
    1b7c:	01 c0       	rjmp	.+2      	; 0x1b80 <prvInitialiseNewTask+0x6c>
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	20 31       	cpi	r18, 0x10	; 16
    1b82:	68 f3       	brcs	.-38     	; 0x1b5e <prvInitialiseNewTask+0x4a>
    1b84:	1c a6       	std	Y+44, r1	; 0x2c
    1b86:	01 c0       	rjmp	.+2      	; 0x1b8a <prvInitialiseNewTask+0x76>
    1b88:	1d 8e       	std	Y+29, r1	; 0x1d
    1b8a:	0a 30       	cpi	r16, 0x0A	; 10
    1b8c:	08 f0       	brcs	.+2      	; 0x1b90 <prvInitialiseNewTask+0x7c>
    1b8e:	09 e0       	ldi	r16, 0x09	; 9
    1b90:	0a 8f       	std	Y+26, r16	; 0x1a
    1b92:	0d a7       	std	Y+45, r16	; 0x2d
    1b94:	1e a6       	std	Y+46, r1	; 0x2e
    1b96:	ce 01       	movw	r24, r28
    1b98:	02 96       	adiw	r24, 0x02	; 2
    1b9a:	0e 94 ca 05 	call	0xb94	; 0xb94 <vListInitialiseItem>
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	0e 96       	adiw	r24, 0x0e	; 14
    1ba2:	0e 94 ca 05 	call	0xb94	; 0xb94 <vListInitialiseItem>
    1ba6:	db 87       	std	Y+11, r29	; 0x0b
    1ba8:	ca 87       	std	Y+10, r28	; 0x0a
    1baa:	8a e0       	ldi	r24, 0x0A	; 10
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	a0 e0       	ldi	r26, 0x00	; 0
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	80 1b       	sub	r24, r16
    1bb4:	91 09       	sbc	r25, r1
    1bb6:	a1 09       	sbc	r26, r1
    1bb8:	b1 09       	sbc	r27, r1
    1bba:	8e 87       	std	Y+14, r24	; 0x0e
    1bbc:	9f 87       	std	Y+15, r25	; 0x0f
    1bbe:	a8 8b       	std	Y+16, r26	; 0x10
    1bc0:	b9 8b       	std	Y+17, r27	; 0x11
    1bc2:	df 8b       	std	Y+23, r29	; 0x17
    1bc4:	ce 8b       	std	Y+22, r28	; 0x16
    1bc6:	84 e0       	ldi	r24, 0x04	; 4
    1bc8:	fe 01       	movw	r30, r28
    1bca:	bf 96       	adiw	r30, 0x2f	; 47
    1bcc:	df 01       	movw	r26, r30
    1bce:	1d 92       	st	X+, r1
    1bd0:	8a 95       	dec	r24
    1bd2:	e9 f7       	brne	.-6      	; 0x1bce <prvInitialiseNewTask+0xba>
    1bd4:	1b aa       	std	Y+51, r1	; 0x33
    1bd6:	a3 01       	movw	r20, r6
    1bd8:	b2 01       	movw	r22, r4
    1bda:	c4 01       	movw	r24, r8
    1bdc:	4f d8       	rcall	.-3938   	; 0xc7c <pxPortInitialiseStack>
    1bde:	99 83       	std	Y+1, r25	; 0x01
    1be0:	88 83       	st	Y, r24
    1be2:	e1 14       	cp	r14, r1
    1be4:	f1 04       	cpc	r15, r1
    1be6:	19 f0       	breq	.+6      	; 0x1bee <prvInitialiseNewTask+0xda>
    1be8:	f7 01       	movw	r30, r14
    1bea:	d1 83       	std	Z+1, r29	; 0x01
    1bec:	c0 83       	st	Z, r28
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	0f 91       	pop	r16
    1bf4:	ff 90       	pop	r15
    1bf6:	ef 90       	pop	r14
    1bf8:	df 90       	pop	r13
    1bfa:	cf 90       	pop	r12
    1bfc:	bf 90       	pop	r11
    1bfe:	af 90       	pop	r10
    1c00:	9f 90       	pop	r9
    1c02:	8f 90       	pop	r8
    1c04:	7f 90       	pop	r7
    1c06:	6f 90       	pop	r6
    1c08:	5f 90       	pop	r5
    1c0a:	4f 90       	pop	r4
    1c0c:	08 95       	ret

00001c0e <prvInitialiseTaskLists>:
    1c0e:	cf 93       	push	r28
    1c10:	c0 e0       	ldi	r28, 0x00	; 0
    1c12:	09 c0       	rjmp	.+18     	; 0x1c26 <prvInitialiseTaskLists+0x18>
    1c14:	2b e0       	ldi	r18, 0x0B	; 11
    1c16:	c2 9f       	mul	r28, r18
    1c18:	c0 01       	movw	r24, r0
    1c1a:	11 24       	eor	r1, r1
    1c1c:	85 5a       	subi	r24, 0xA5	; 165
    1c1e:	9b 4e       	sbci	r25, 0xEB	; 235
    1c20:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInitialise>
    1c24:	cf 5f       	subi	r28, 0xFF	; 255
    1c26:	ca 30       	cpi	r28, 0x0A	; 10
    1c28:	a8 f3       	brcs	.-22     	; 0x1c14 <prvInitialiseTaskLists+0x6>
    1c2a:	80 e5       	ldi	r24, 0x50	; 80
    1c2c:	94 e1       	ldi	r25, 0x14	; 20
    1c2e:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInitialise>
    1c32:	85 e4       	ldi	r24, 0x45	; 69
    1c34:	94 e1       	ldi	r25, 0x14	; 20
    1c36:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInitialise>
    1c3a:	86 e3       	ldi	r24, 0x36	; 54
    1c3c:	94 e1       	ldi	r25, 0x14	; 20
    1c3e:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInitialise>
    1c42:	8b e2       	ldi	r24, 0x2B	; 43
    1c44:	94 e1       	ldi	r25, 0x14	; 20
    1c46:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInitialise>
    1c4a:	8f e1       	ldi	r24, 0x1F	; 31
    1c4c:	94 e1       	ldi	r25, 0x14	; 20
    1c4e:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInitialise>
    1c52:	80 e5       	ldi	r24, 0x50	; 80
    1c54:	94 e1       	ldi	r25, 0x14	; 20
    1c56:	90 93 44 14 	sts	0x1444, r25	; 0x801444 <pxDelayedTaskList+0x1>
    1c5a:	80 93 43 14 	sts	0x1443, r24	; 0x801443 <pxDelayedTaskList>
    1c5e:	85 e4       	ldi	r24, 0x45	; 69
    1c60:	94 e1       	ldi	r25, 0x14	; 20
    1c62:	90 93 42 14 	sts	0x1442, r25	; 0x801442 <pxOverflowDelayedTaskList+0x1>
    1c66:	80 93 41 14 	sts	0x1441, r24	; 0x801441 <pxOverflowDelayedTaskList>
    1c6a:	cf 91       	pop	r28
    1c6c:	08 95       	ret

00001c6e <prvAddNewTaskToReadyList>:
    1c6e:	cf 93       	push	r28
    1c70:	df 93       	push	r29
    1c72:	ec 01       	movw	r28, r24
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	0f 92       	push	r0
    1c7a:	80 91 1e 14 	lds	r24, 0x141E	; 0x80141e <uxCurrentNumberOfTasks>
    1c7e:	8f 5f       	subi	r24, 0xFF	; 255
    1c80:	80 93 1e 14 	sts	0x141E, r24	; 0x80141e <uxCurrentNumberOfTasks>
    1c84:	80 91 c9 14 	lds	r24, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    1c88:	90 91 ca 14 	lds	r25, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    1c8c:	89 2b       	or	r24, r25
    1c8e:	51 f4       	brne	.+20     	; 0x1ca4 <prvAddNewTaskToReadyList+0x36>
    1c90:	d0 93 ca 14 	sts	0x14CA, r29	; 0x8014ca <pxCurrentTCB+0x1>
    1c94:	c0 93 c9 14 	sts	0x14C9, r28	; 0x8014c9 <pxCurrentTCB>
    1c98:	80 91 1e 14 	lds	r24, 0x141E	; 0x80141e <uxCurrentNumberOfTasks>
    1c9c:	81 30       	cpi	r24, 0x01	; 1
    1c9e:	91 f4       	brne	.+36     	; 0x1cc4 <prvAddNewTaskToReadyList+0x56>
    1ca0:	b6 df       	rcall	.-148    	; 0x1c0e <prvInitialiseTaskLists>
    1ca2:	10 c0       	rjmp	.+32     	; 0x1cc4 <prvAddNewTaskToReadyList+0x56>
    1ca4:	80 91 18 14 	lds	r24, 0x1418	; 0x801418 <xSchedulerRunning>
    1ca8:	81 11       	cpse	r24, r1
    1caa:	0c c0       	rjmp	.+24     	; 0x1cc4 <prvAddNewTaskToReadyList+0x56>
    1cac:	e0 91 c9 14 	lds	r30, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    1cb0:	f0 91 ca 14 	lds	r31, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    1cb4:	92 8d       	ldd	r25, Z+26	; 0x1a
    1cb6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cb8:	89 17       	cp	r24, r25
    1cba:	20 f0       	brcs	.+8      	; 0x1cc4 <prvAddNewTaskToReadyList+0x56>
    1cbc:	d0 93 ca 14 	sts	0x14CA, r29	; 0x8014ca <pxCurrentTCB+0x1>
    1cc0:	c0 93 c9 14 	sts	0x14C9, r28	; 0x8014c9 <pxCurrentTCB>
    1cc4:	80 91 11 14 	lds	r24, 0x1411	; 0x801411 <uxTaskNumber>
    1cc8:	8f 5f       	subi	r24, 0xFF	; 255
    1cca:	80 93 11 14 	sts	0x1411, r24	; 0x801411 <uxTaskNumber>
    1cce:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1cd0:	80 91 19 14 	lds	r24, 0x1419	; 0x801419 <uxTopReadyPriority>
    1cd4:	8e 17       	cp	r24, r30
    1cd6:	10 f4       	brcc	.+4      	; 0x1cdc <prvAddNewTaskToReadyList+0x6e>
    1cd8:	e0 93 19 14 	sts	0x1419, r30	; 0x801419 <uxTopReadyPriority>
    1cdc:	8b e0       	ldi	r24, 0x0B	; 11
    1cde:	8e 9f       	mul	r24, r30
    1ce0:	f0 01       	movw	r30, r0
    1ce2:	11 24       	eor	r1, r1
    1ce4:	e5 5a       	subi	r30, 0xA5	; 165
    1ce6:	fb 4e       	sbci	r31, 0xEB	; 235
    1ce8:	01 80       	ldd	r0, Z+1	; 0x01
    1cea:	f2 81       	ldd	r31, Z+2	; 0x02
    1cec:	e0 2d       	mov	r30, r0
    1cee:	ff 83       	std	Y+7, r31	; 0x07
    1cf0:	ee 83       	std	Y+6, r30	; 0x06
    1cf2:	26 81       	ldd	r18, Z+6	; 0x06
    1cf4:	37 81       	ldd	r19, Z+7	; 0x07
    1cf6:	39 87       	std	Y+9, r19	; 0x09
    1cf8:	28 87       	std	Y+8, r18	; 0x08
    1cfa:	a6 81       	ldd	r26, Z+6	; 0x06
    1cfc:	b7 81       	ldd	r27, Z+7	; 0x07
    1cfe:	9e 01       	movw	r18, r28
    1d00:	2e 5f       	subi	r18, 0xFE	; 254
    1d02:	3f 4f       	sbci	r19, 0xFF	; 255
    1d04:	15 96       	adiw	r26, 0x05	; 5
    1d06:	3c 93       	st	X, r19
    1d08:	2e 93       	st	-X, r18
    1d0a:	14 97       	sbiw	r26, 0x04	; 4
    1d0c:	37 83       	std	Z+7, r19	; 0x07
    1d0e:	26 83       	std	Z+6, r18	; 0x06
    1d10:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1d12:	8e 9f       	mul	r24, r30
    1d14:	f0 01       	movw	r30, r0
    1d16:	11 24       	eor	r1, r1
    1d18:	e5 5a       	subi	r30, 0xA5	; 165
    1d1a:	fb 4e       	sbci	r31, 0xEB	; 235
    1d1c:	fd 87       	std	Y+13, r31	; 0x0d
    1d1e:	ec 87       	std	Y+12, r30	; 0x0c
    1d20:	80 81       	ld	r24, Z
    1d22:	8f 5f       	subi	r24, 0xFF	; 255
    1d24:	80 83       	st	Z, r24
    1d26:	0f 90       	pop	r0
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	80 91 18 14 	lds	r24, 0x1418	; 0x801418 <xSchedulerRunning>
    1d2e:	88 23       	and	r24, r24
    1d30:	51 f0       	breq	.+20     	; 0x1d46 <prvAddNewTaskToReadyList+0xd8>
    1d32:	e0 91 c9 14 	lds	r30, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    1d36:	f0 91 ca 14 	lds	r31, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    1d3a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d3e:	98 17       	cp	r25, r24
    1d40:	10 f4       	brcc	.+4      	; 0x1d46 <prvAddNewTaskToReadyList+0xd8>
    1d42:	0e 94 87 06 	call	0xd0e	; 0xd0e <vPortYield>
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	08 95       	ret

00001d4c <prvCheckTasksWaitingTermination>:
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	1b c0       	rjmp	.+54     	; 0x1d88 <prvCheckTasksWaitingTermination+0x3c>
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	0f 92       	push	r0
    1d58:	e0 91 32 14 	lds	r30, 0x1432	; 0x801432 <xTasksWaitingTermination+0x7>
    1d5c:	f0 91 33 14 	lds	r31, 0x1433	; 0x801433 <xTasksWaitingTermination+0x8>
    1d60:	c0 85       	ldd	r28, Z+8	; 0x08
    1d62:	d1 85       	ldd	r29, Z+9	; 0x09
    1d64:	ce 01       	movw	r24, r28
    1d66:	02 96       	adiw	r24, 0x02	; 2
    1d68:	0e 94 0b 06 	call	0xc16	; 0xc16 <uxListRemove>
    1d6c:	80 91 1e 14 	lds	r24, 0x141E	; 0x80141e <uxCurrentNumberOfTasks>
    1d70:	81 50       	subi	r24, 0x01	; 1
    1d72:	80 93 1e 14 	sts	0x141E, r24	; 0x80141e <uxCurrentNumberOfTasks>
    1d76:	80 91 2a 14 	lds	r24, 0x142A	; 0x80142a <uxDeletedTasksWaitingCleanUp>
    1d7a:	81 50       	subi	r24, 0x01	; 1
    1d7c:	80 93 2a 14 	sts	0x142A, r24	; 0x80142a <uxDeletedTasksWaitingCleanUp>
    1d80:	0f 90       	pop	r0
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	ce 01       	movw	r24, r28
    1d86:	b9 de       	rcall	.-654    	; 0x1afa <prvDeleteTCB>
    1d88:	80 91 2a 14 	lds	r24, 0x142A	; 0x80142a <uxDeletedTasksWaitingCleanUp>
    1d8c:	81 11       	cpse	r24, r1
    1d8e:	e1 cf       	rjmp	.-62     	; 0x1d52 <prvCheckTasksWaitingTermination+0x6>
    1d90:	df 91       	pop	r29
    1d92:	cf 91       	pop	r28
    1d94:	08 95       	ret

00001d96 <prvAddCurrentTaskToDelayedList>:
    1d96:	8f 92       	push	r8
    1d98:	9f 92       	push	r9
    1d9a:	af 92       	push	r10
    1d9c:	bf 92       	push	r11
    1d9e:	cf 92       	push	r12
    1da0:	df 92       	push	r13
    1da2:	ef 92       	push	r14
    1da4:	ff 92       	push	r15
    1da6:	cf 93       	push	r28
    1da8:	df 93       	push	r29
    1daa:	6b 01       	movw	r12, r22
    1dac:	7c 01       	movw	r14, r24
    1dae:	c4 2f       	mov	r28, r20
    1db0:	80 90 1a 14 	lds	r8, 0x141A	; 0x80141a <xTickCount>
    1db4:	90 90 1b 14 	lds	r9, 0x141B	; 0x80141b <xTickCount+0x1>
    1db8:	a0 90 1c 14 	lds	r10, 0x141C	; 0x80141c <xTickCount+0x2>
    1dbc:	b0 90 1d 14 	lds	r11, 0x141D	; 0x80141d <xTickCount+0x3>
    1dc0:	80 91 c9 14 	lds	r24, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    1dc4:	90 91 ca 14 	lds	r25, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    1dc8:	02 96       	adiw	r24, 0x02	; 2
    1dca:	0e 94 0b 06 	call	0xc16	; 0xc16 <uxListRemove>
    1dce:	8f ef       	ldi	r24, 0xFF	; 255
    1dd0:	c8 16       	cp	r12, r24
    1dd2:	d8 06       	cpc	r13, r24
    1dd4:	e8 06       	cpc	r14, r24
    1dd6:	f8 06       	cpc	r15, r24
    1dd8:	b1 f5       	brne	.+108    	; 0x1e46 <prvAddCurrentTaskToDelayedList+0xb0>
    1dda:	cc 23       	and	r28, r28
    1ddc:	a1 f1       	breq	.+104    	; 0x1e46 <prvAddCurrentTaskToDelayedList+0xb0>
    1dde:	ef e1       	ldi	r30, 0x1F	; 31
    1de0:	f4 e1       	ldi	r31, 0x14	; 20
    1de2:	a1 81       	ldd	r26, Z+1	; 0x01
    1de4:	b2 81       	ldd	r27, Z+2	; 0x02
    1de6:	c0 91 c9 14 	lds	r28, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    1dea:	d0 91 ca 14 	lds	r29, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    1dee:	bf 83       	std	Y+7, r27	; 0x07
    1df0:	ae 83       	std	Y+6, r26	; 0x06
    1df2:	c0 91 c9 14 	lds	r28, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    1df6:	d0 91 ca 14 	lds	r29, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    1dfa:	16 96       	adiw	r26, 0x06	; 6
    1dfc:	8d 91       	ld	r24, X+
    1dfe:	9c 91       	ld	r25, X
    1e00:	17 97       	sbiw	r26, 0x07	; 7
    1e02:	99 87       	std	Y+9, r25	; 0x09
    1e04:	88 87       	std	Y+8, r24	; 0x08
    1e06:	16 96       	adiw	r26, 0x06	; 6
    1e08:	cd 91       	ld	r28, X+
    1e0a:	dc 91       	ld	r29, X
    1e0c:	17 97       	sbiw	r26, 0x07	; 7
    1e0e:	80 91 c9 14 	lds	r24, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    1e12:	90 91 ca 14 	lds	r25, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    1e16:	02 96       	adiw	r24, 0x02	; 2
    1e18:	9d 83       	std	Y+5, r25	; 0x05
    1e1a:	8c 83       	std	Y+4, r24	; 0x04
    1e1c:	80 91 c9 14 	lds	r24, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    1e20:	90 91 ca 14 	lds	r25, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    1e24:	02 96       	adiw	r24, 0x02	; 2
    1e26:	17 96       	adiw	r26, 0x07	; 7
    1e28:	9c 93       	st	X, r25
    1e2a:	8e 93       	st	-X, r24
    1e2c:	16 97       	sbiw	r26, 0x06	; 6
    1e2e:	a0 91 c9 14 	lds	r26, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    1e32:	b0 91 ca 14 	lds	r27, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    1e36:	1d 96       	adiw	r26, 0x0d	; 13
    1e38:	fc 93       	st	X, r31
    1e3a:	ee 93       	st	-X, r30
    1e3c:	1c 97       	sbiw	r26, 0x0c	; 12
    1e3e:	80 81       	ld	r24, Z
    1e40:	8f 5f       	subi	r24, 0xFF	; 255
    1e42:	80 83       	st	Z, r24
    1e44:	3f c0       	rjmp	.+126    	; 0x1ec4 <prvAddCurrentTaskToDelayedList+0x12e>
    1e46:	c8 0c       	add	r12, r8
    1e48:	d9 1c       	adc	r13, r9
    1e4a:	ea 1c       	adc	r14, r10
    1e4c:	fb 1c       	adc	r15, r11
    1e4e:	e0 91 c9 14 	lds	r30, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    1e52:	f0 91 ca 14 	lds	r31, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    1e56:	c2 82       	std	Z+2, r12	; 0x02
    1e58:	d3 82       	std	Z+3, r13	; 0x03
    1e5a:	e4 82       	std	Z+4, r14	; 0x04
    1e5c:	f5 82       	std	Z+5, r15	; 0x05
    1e5e:	c8 14       	cp	r12, r8
    1e60:	d9 04       	cpc	r13, r9
    1e62:	ea 04       	cpc	r14, r10
    1e64:	fb 04       	cpc	r15, r11
    1e66:	68 f4       	brcc	.+26     	; 0x1e82 <prvAddCurrentTaskToDelayedList+0xec>
    1e68:	60 91 c9 14 	lds	r22, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    1e6c:	70 91 ca 14 	lds	r23, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    1e70:	80 91 41 14 	lds	r24, 0x1441	; 0x801441 <pxOverflowDelayedTaskList>
    1e74:	90 91 42 14 	lds	r25, 0x1442	; 0x801442 <pxOverflowDelayedTaskList+0x1>
    1e78:	6e 5f       	subi	r22, 0xFE	; 254
    1e7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vListInsert>
    1e80:	21 c0       	rjmp	.+66     	; 0x1ec4 <prvAddCurrentTaskToDelayedList+0x12e>
    1e82:	60 91 c9 14 	lds	r22, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    1e86:	70 91 ca 14 	lds	r23, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    1e8a:	80 91 43 14 	lds	r24, 0x1443	; 0x801443 <pxDelayedTaskList>
    1e8e:	90 91 44 14 	lds	r25, 0x1444	; 0x801444 <pxDelayedTaskList+0x1>
    1e92:	6e 5f       	subi	r22, 0xFE	; 254
    1e94:	7f 4f       	sbci	r23, 0xFF	; 255
    1e96:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vListInsert>
    1e9a:	80 91 0d 14 	lds	r24, 0x140D	; 0x80140d <xNextTaskUnblockTime>
    1e9e:	90 91 0e 14 	lds	r25, 0x140E	; 0x80140e <xNextTaskUnblockTime+0x1>
    1ea2:	a0 91 0f 14 	lds	r26, 0x140F	; 0x80140f <xNextTaskUnblockTime+0x2>
    1ea6:	b0 91 10 14 	lds	r27, 0x1410	; 0x801410 <xNextTaskUnblockTime+0x3>
    1eaa:	c8 16       	cp	r12, r24
    1eac:	d9 06       	cpc	r13, r25
    1eae:	ea 06       	cpc	r14, r26
    1eb0:	fb 06       	cpc	r15, r27
    1eb2:	40 f4       	brcc	.+16     	; 0x1ec4 <prvAddCurrentTaskToDelayedList+0x12e>
    1eb4:	c0 92 0d 14 	sts	0x140D, r12	; 0x80140d <xNextTaskUnblockTime>
    1eb8:	d0 92 0e 14 	sts	0x140E, r13	; 0x80140e <xNextTaskUnblockTime+0x1>
    1ebc:	e0 92 0f 14 	sts	0x140F, r14	; 0x80140f <xNextTaskUnblockTime+0x2>
    1ec0:	f0 92 10 14 	sts	0x1410, r15	; 0x801410 <xNextTaskUnblockTime+0x3>
    1ec4:	df 91       	pop	r29
    1ec6:	cf 91       	pop	r28
    1ec8:	ff 90       	pop	r15
    1eca:	ef 90       	pop	r14
    1ecc:	df 90       	pop	r13
    1ece:	cf 90       	pop	r12
    1ed0:	bf 90       	pop	r11
    1ed2:	af 90       	pop	r10
    1ed4:	9f 90       	pop	r9
    1ed6:	8f 90       	pop	r8
    1ed8:	08 95       	ret

00001eda <xTaskCreate>:
    1eda:	2f 92       	push	r2
    1edc:	3f 92       	push	r3
    1ede:	4f 92       	push	r4
    1ee0:	5f 92       	push	r5
    1ee2:	6f 92       	push	r6
    1ee4:	7f 92       	push	r7
    1ee6:	8f 92       	push	r8
    1ee8:	9f 92       	push	r9
    1eea:	af 92       	push	r10
    1eec:	bf 92       	push	r11
    1eee:	cf 92       	push	r12
    1ef0:	df 92       	push	r13
    1ef2:	ef 92       	push	r14
    1ef4:	ff 92       	push	r15
    1ef6:	0f 93       	push	r16
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	3c 01       	movw	r6, r24
    1efe:	1b 01       	movw	r2, r22
    1f00:	4a 01       	movw	r8, r20
    1f02:	29 01       	movw	r4, r18
    1f04:	ca 01       	movw	r24, r20
    1f06:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <pvPortMalloc>
    1f0a:	6c 01       	movw	r12, r24
    1f0c:	89 2b       	or	r24, r25
    1f0e:	71 f0       	breq	.+28     	; 0x1f2c <xTaskCreate+0x52>
    1f10:	84 e3       	ldi	r24, 0x34	; 52
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <pvPortMalloc>
    1f18:	ec 01       	movw	r28, r24
    1f1a:	89 2b       	or	r24, r25
    1f1c:	19 f0       	breq	.+6      	; 0x1f24 <xTaskCreate+0x4a>
    1f1e:	dc 8e       	std	Y+28, r13	; 0x1c
    1f20:	cb 8e       	std	Y+27, r12	; 0x1b
    1f22:	06 c0       	rjmp	.+12     	; 0x1f30 <xTaskCreate+0x56>
    1f24:	c6 01       	movw	r24, r12
    1f26:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <vPortFree>
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <xTaskCreate+0x56>
    1f2c:	c0 e0       	ldi	r28, 0x00	; 0
    1f2e:	d0 e0       	ldi	r29, 0x00	; 0
    1f30:	20 97       	sbiw	r28, 0x00	; 0
    1f32:	61 f0       	breq	.+24     	; 0x1f4c <xTaskCreate+0x72>
    1f34:	a1 2c       	mov	r10, r1
    1f36:	b1 2c       	mov	r11, r1
    1f38:	6e 01       	movw	r12, r28
    1f3a:	92 01       	movw	r18, r4
    1f3c:	a4 01       	movw	r20, r8
    1f3e:	b1 01       	movw	r22, r2
    1f40:	c3 01       	movw	r24, r6
    1f42:	e8 dd       	rcall	.-1072   	; 0x1b14 <prvInitialiseNewTask>
    1f44:	ce 01       	movw	r24, r28
    1f46:	93 de       	rcall	.-730    	; 0x1c6e <prvAddNewTaskToReadyList>
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	01 c0       	rjmp	.+2      	; 0x1f4e <xTaskCreate+0x74>
    1f4c:	8f ef       	ldi	r24, 0xFF	; 255
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	0f 91       	pop	r16
    1f54:	ff 90       	pop	r15
    1f56:	ef 90       	pop	r14
    1f58:	df 90       	pop	r13
    1f5a:	cf 90       	pop	r12
    1f5c:	bf 90       	pop	r11
    1f5e:	af 90       	pop	r10
    1f60:	9f 90       	pop	r9
    1f62:	8f 90       	pop	r8
    1f64:	7f 90       	pop	r7
    1f66:	6f 90       	pop	r6
    1f68:	5f 90       	pop	r5
    1f6a:	4f 90       	pop	r4
    1f6c:	3f 90       	pop	r3
    1f6e:	2f 90       	pop	r2
    1f70:	08 95       	ret

00001f72 <vTaskStartScheduler>:
    1f72:	ef 92       	push	r14
    1f74:	ff 92       	push	r15
    1f76:	0f 93       	push	r16
    1f78:	0f 2e       	mov	r0, r31
    1f7a:	fb e0       	ldi	r31, 0x0B	; 11
    1f7c:	ef 2e       	mov	r14, r31
    1f7e:	f4 e1       	ldi	r31, 0x14	; 20
    1f80:	ff 2e       	mov	r15, r31
    1f82:	f0 2d       	mov	r31, r0
    1f84:	00 e0       	ldi	r16, 0x00	; 0
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 ec       	ldi	r20, 0xC0	; 192
    1f8c:	50 e0       	ldi	r21, 0x00	; 0
    1f8e:	63 e3       	ldi	r22, 0x33	; 51
    1f90:	73 e0       	ldi	r23, 0x03	; 3
    1f92:	8e e4       	ldi	r24, 0x4E	; 78
    1f94:	91 e0       	ldi	r25, 0x01	; 1
    1f96:	a1 df       	rcall	.-190    	; 0x1eda <xTaskCreate>
    1f98:	81 30       	cpi	r24, 0x01	; 1
    1f9a:	11 f4       	brne	.+4      	; 0x1fa0 <vTaskStartScheduler+0x2e>
    1f9c:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <xTimerCreateTimerTask>
    1fa0:	81 30       	cpi	r24, 0x01	; 1
    1fa2:	c9 f4       	brne	.+50     	; 0x1fd6 <vTaskStartScheduler+0x64>
    1fa4:	f8 94       	cli
    1fa6:	8f ef       	ldi	r24, 0xFF	; 255
    1fa8:	9f ef       	ldi	r25, 0xFF	; 255
    1faa:	dc 01       	movw	r26, r24
    1fac:	80 93 0d 14 	sts	0x140D, r24	; 0x80140d <xNextTaskUnblockTime>
    1fb0:	90 93 0e 14 	sts	0x140E, r25	; 0x80140e <xNextTaskUnblockTime+0x1>
    1fb4:	a0 93 0f 14 	sts	0x140F, r26	; 0x80140f <xNextTaskUnblockTime+0x2>
    1fb8:	b0 93 10 14 	sts	0x1410, r27	; 0x801410 <xNextTaskUnblockTime+0x3>
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	80 93 18 14 	sts	0x1418, r24	; 0x801418 <xSchedulerRunning>
    1fc2:	10 92 1a 14 	sts	0x141A, r1	; 0x80141a <xTickCount>
    1fc6:	10 92 1b 14 	sts	0x141B, r1	; 0x80141b <xTickCount+0x1>
    1fca:	10 92 1c 14 	sts	0x141C, r1	; 0x80141c <xTickCount+0x2>
    1fce:	10 92 1d 14 	sts	0x141D, r1	; 0x80141d <xTickCount+0x3>
    1fd2:	0e 94 55 06 	call	0xcaa	; 0xcaa <xPortStartScheduler>
    1fd6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1fda:	0f 91       	pop	r16
    1fdc:	ff 90       	pop	r15
    1fde:	ef 90       	pop	r14
    1fe0:	08 95       	ret

00001fe2 <vTaskSuspendAll>:
    1fe2:	80 91 0a 14 	lds	r24, 0x140A	; 0x80140a <uxSchedulerSuspended>
    1fe6:	8f 5f       	subi	r24, 0xFF	; 255
    1fe8:	80 93 0a 14 	sts	0x140A, r24	; 0x80140a <uxSchedulerSuspended>
    1fec:	08 95       	ret

00001fee <xTaskGetTickCount>:
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	0f 92       	push	r0
    1ff4:	60 91 1a 14 	lds	r22, 0x141A	; 0x80141a <xTickCount>
    1ff8:	70 91 1b 14 	lds	r23, 0x141B	; 0x80141b <xTickCount+0x1>
    1ffc:	80 91 1c 14 	lds	r24, 0x141C	; 0x80141c <xTickCount+0x2>
    2000:	90 91 1d 14 	lds	r25, 0x141D	; 0x80141d <xTickCount+0x3>
    2004:	0f 90       	pop	r0
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	08 95       	ret

0000200a <xTaskIncrementTick>:
    200a:	cf 92       	push	r12
    200c:	df 92       	push	r13
    200e:	ef 92       	push	r14
    2010:	ff 92       	push	r15
    2012:	cf 93       	push	r28
    2014:	df 93       	push	r29
    2016:	80 91 0a 14 	lds	r24, 0x140A	; 0x80140a <uxSchedulerSuspended>
    201a:	81 11       	cpse	r24, r1
    201c:	05 c1       	rjmp	.+522    	; 0x2228 <__stack+0x29>
    201e:	c0 90 1a 14 	lds	r12, 0x141A	; 0x80141a <xTickCount>
    2022:	d0 90 1b 14 	lds	r13, 0x141B	; 0x80141b <xTickCount+0x1>
    2026:	e0 90 1c 14 	lds	r14, 0x141C	; 0x80141c <xTickCount+0x2>
    202a:	f0 90 1d 14 	lds	r15, 0x141D	; 0x80141d <xTickCount+0x3>
    202e:	8f ef       	ldi	r24, 0xFF	; 255
    2030:	c8 1a       	sub	r12, r24
    2032:	d8 0a       	sbc	r13, r24
    2034:	e8 0a       	sbc	r14, r24
    2036:	f8 0a       	sbc	r15, r24
    2038:	c0 92 1a 14 	sts	0x141A, r12	; 0x80141a <xTickCount>
    203c:	d0 92 1b 14 	sts	0x141B, r13	; 0x80141b <xTickCount+0x1>
    2040:	e0 92 1c 14 	sts	0x141C, r14	; 0x80141c <xTickCount+0x2>
    2044:	f0 92 1d 14 	sts	0x141D, r15	; 0x80141d <xTickCount+0x3>
    2048:	c1 14       	cp	r12, r1
    204a:	d1 04       	cpc	r13, r1
    204c:	e1 04       	cpc	r14, r1
    204e:	f1 04       	cpc	r15, r1
    2050:	b1 f4       	brne	.+44     	; 0x207e <xTaskIncrementTick+0x74>
    2052:	80 91 43 14 	lds	r24, 0x1443	; 0x801443 <pxDelayedTaskList>
    2056:	90 91 44 14 	lds	r25, 0x1444	; 0x801444 <pxDelayedTaskList+0x1>
    205a:	20 91 41 14 	lds	r18, 0x1441	; 0x801441 <pxOverflowDelayedTaskList>
    205e:	30 91 42 14 	lds	r19, 0x1442	; 0x801442 <pxOverflowDelayedTaskList+0x1>
    2062:	30 93 44 14 	sts	0x1444, r19	; 0x801444 <pxDelayedTaskList+0x1>
    2066:	20 93 43 14 	sts	0x1443, r18	; 0x801443 <pxDelayedTaskList>
    206a:	90 93 42 14 	sts	0x1442, r25	; 0x801442 <pxOverflowDelayedTaskList+0x1>
    206e:	80 93 41 14 	sts	0x1441, r24	; 0x801441 <pxOverflowDelayedTaskList>
    2072:	80 91 12 14 	lds	r24, 0x1412	; 0x801412 <xNumOfOverflows>
    2076:	8f 5f       	subi	r24, 0xFF	; 255
    2078:	80 93 12 14 	sts	0x1412, r24	; 0x801412 <xNumOfOverflows>
    207c:	17 dd       	rcall	.-1490   	; 0x1aac <prvResetNextTaskUnblockTime>
    207e:	80 91 0d 14 	lds	r24, 0x140D	; 0x80140d <xNextTaskUnblockTime>
    2082:	90 91 0e 14 	lds	r25, 0x140E	; 0x80140e <xNextTaskUnblockTime+0x1>
    2086:	a0 91 0f 14 	lds	r26, 0x140F	; 0x80140f <xNextTaskUnblockTime+0x2>
    208a:	b0 91 10 14 	lds	r27, 0x1410	; 0x801410 <xNextTaskUnblockTime+0x3>
    208e:	c8 16       	cp	r12, r24
    2090:	d9 06       	cpc	r13, r25
    2092:	ea 06       	cpc	r14, r26
    2094:	fb 06       	cpc	r15, r27
    2096:	20 f4       	brcc	.+8      	; 0x20a0 <xTaskIncrementTick+0x96>
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	b2 c0       	rjmp	.+356    	; 0x2200 <__stack+0x1>
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	01 c0       	rjmp	.+2      	; 0x20a2 <xTaskIncrementTick+0x98>
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	e0 91 43 14 	lds	r30, 0x1443	; 0x801443 <pxDelayedTaskList>
    20a6:	f0 91 44 14 	lds	r31, 0x1444	; 0x801444 <pxDelayedTaskList+0x1>
    20aa:	90 81       	ld	r25, Z
    20ac:	91 11       	cpse	r25, r1
    20ae:	0c c0       	rjmp	.+24     	; 0x20c8 <xTaskIncrementTick+0xbe>
    20b0:	4f ef       	ldi	r20, 0xFF	; 255
    20b2:	5f ef       	ldi	r21, 0xFF	; 255
    20b4:	ba 01       	movw	r22, r20
    20b6:	40 93 0d 14 	sts	0x140D, r20	; 0x80140d <xNextTaskUnblockTime>
    20ba:	50 93 0e 14 	sts	0x140E, r21	; 0x80140e <xNextTaskUnblockTime+0x1>
    20be:	60 93 0f 14 	sts	0x140F, r22	; 0x80140f <xNextTaskUnblockTime+0x2>
    20c2:	70 93 10 14 	sts	0x1410, r23	; 0x801410 <xNextTaskUnblockTime+0x3>
    20c6:	9c c0       	rjmp	.+312    	; 0x2200 <__stack+0x1>
    20c8:	e0 91 43 14 	lds	r30, 0x1443	; 0x801443 <pxDelayedTaskList>
    20cc:	f0 91 44 14 	lds	r31, 0x1444	; 0x801444 <pxDelayedTaskList+0x1>
    20d0:	07 80       	ldd	r0, Z+7	; 0x07
    20d2:	f0 85       	ldd	r31, Z+8	; 0x08
    20d4:	e0 2d       	mov	r30, r0
    20d6:	00 84       	ldd	r0, Z+8	; 0x08
    20d8:	f1 85       	ldd	r31, Z+9	; 0x09
    20da:	e0 2d       	mov	r30, r0
    20dc:	42 81       	ldd	r20, Z+2	; 0x02
    20de:	53 81       	ldd	r21, Z+3	; 0x03
    20e0:	64 81       	ldd	r22, Z+4	; 0x04
    20e2:	75 81       	ldd	r23, Z+5	; 0x05
    20e4:	c4 16       	cp	r12, r20
    20e6:	d5 06       	cpc	r13, r21
    20e8:	e6 06       	cpc	r14, r22
    20ea:	f7 06       	cpc	r15, r23
    20ec:	48 f4       	brcc	.+18     	; 0x2100 <xTaskIncrementTick+0xf6>
    20ee:	40 93 0d 14 	sts	0x140D, r20	; 0x80140d <xNextTaskUnblockTime>
    20f2:	50 93 0e 14 	sts	0x140E, r21	; 0x80140e <xNextTaskUnblockTime+0x1>
    20f6:	60 93 0f 14 	sts	0x140F, r22	; 0x80140f <xNextTaskUnblockTime+0x2>
    20fa:	70 93 10 14 	sts	0x1410, r23	; 0x801410 <xNextTaskUnblockTime+0x3>
    20fe:	80 c0       	rjmp	.+256    	; 0x2200 <__stack+0x1>
    2100:	a4 85       	ldd	r26, Z+12	; 0x0c
    2102:	b5 85       	ldd	r27, Z+13	; 0x0d
    2104:	c6 81       	ldd	r28, Z+6	; 0x06
    2106:	d7 81       	ldd	r29, Z+7	; 0x07
    2108:	20 85       	ldd	r18, Z+8	; 0x08
    210a:	31 85       	ldd	r19, Z+9	; 0x09
    210c:	3f 83       	std	Y+7, r19	; 0x07
    210e:	2e 83       	std	Y+6, r18	; 0x06
    2110:	c0 85       	ldd	r28, Z+8	; 0x08
    2112:	d1 85       	ldd	r29, Z+9	; 0x09
    2114:	26 81       	ldd	r18, Z+6	; 0x06
    2116:	37 81       	ldd	r19, Z+7	; 0x07
    2118:	3d 83       	std	Y+5, r19	; 0x05
    211a:	2c 83       	std	Y+4, r18	; 0x04
    211c:	11 96       	adiw	r26, 0x01	; 1
    211e:	4d 91       	ld	r20, X+
    2120:	5c 91       	ld	r21, X
    2122:	12 97       	sbiw	r26, 0x02	; 2
    2124:	9f 01       	movw	r18, r30
    2126:	2e 5f       	subi	r18, 0xFE	; 254
    2128:	3f 4f       	sbci	r19, 0xFF	; 255
    212a:	42 17       	cp	r20, r18
    212c:	53 07       	cpc	r21, r19
    212e:	31 f4       	brne	.+12     	; 0x213c <xTaskIncrementTick+0x132>
    2130:	40 85       	ldd	r20, Z+8	; 0x08
    2132:	51 85       	ldd	r21, Z+9	; 0x09
    2134:	12 96       	adiw	r26, 0x02	; 2
    2136:	5c 93       	st	X, r21
    2138:	4e 93       	st	-X, r20
    213a:	11 97       	sbiw	r26, 0x01	; 1
    213c:	15 86       	std	Z+13, r1	; 0x0d
    213e:	14 86       	std	Z+12, r1	; 0x0c
    2140:	9c 91       	ld	r25, X
    2142:	91 50       	subi	r25, 0x01	; 1
    2144:	9c 93       	st	X, r25
    2146:	a0 8d       	ldd	r26, Z+24	; 0x18
    2148:	b1 8d       	ldd	r27, Z+25	; 0x19
    214a:	10 97       	sbiw	r26, 0x00	; 0
    214c:	09 f1       	breq	.+66     	; 0x2190 <xTaskIncrementTick+0x186>
    214e:	c2 89       	ldd	r28, Z+18	; 0x12
    2150:	d3 89       	ldd	r29, Z+19	; 0x13
    2152:	44 89       	ldd	r20, Z+20	; 0x14
    2154:	55 89       	ldd	r21, Z+21	; 0x15
    2156:	5f 83       	std	Y+7, r21	; 0x07
    2158:	4e 83       	std	Y+6, r20	; 0x06
    215a:	c4 89       	ldd	r28, Z+20	; 0x14
    215c:	d5 89       	ldd	r29, Z+21	; 0x15
    215e:	42 89       	ldd	r20, Z+18	; 0x12
    2160:	53 89       	ldd	r21, Z+19	; 0x13
    2162:	5d 83       	std	Y+5, r21	; 0x05
    2164:	4c 83       	std	Y+4, r20	; 0x04
    2166:	11 96       	adiw	r26, 0x01	; 1
    2168:	6d 91       	ld	r22, X+
    216a:	7c 91       	ld	r23, X
    216c:	12 97       	sbiw	r26, 0x02	; 2
    216e:	af 01       	movw	r20, r30
    2170:	42 5f       	subi	r20, 0xF2	; 242
    2172:	5f 4f       	sbci	r21, 0xFF	; 255
    2174:	64 17       	cp	r22, r20
    2176:	75 07       	cpc	r23, r21
    2178:	31 f4       	brne	.+12     	; 0x2186 <xTaskIncrementTick+0x17c>
    217a:	44 89       	ldd	r20, Z+20	; 0x14
    217c:	55 89       	ldd	r21, Z+21	; 0x15
    217e:	12 96       	adiw	r26, 0x02	; 2
    2180:	5c 93       	st	X, r21
    2182:	4e 93       	st	-X, r20
    2184:	11 97       	sbiw	r26, 0x01	; 1
    2186:	11 8e       	std	Z+25, r1	; 0x19
    2188:	10 8e       	std	Z+24, r1	; 0x18
    218a:	9c 91       	ld	r25, X
    218c:	91 50       	subi	r25, 0x01	; 1
    218e:	9c 93       	st	X, r25
    2190:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2192:	90 91 19 14 	lds	r25, 0x1419	; 0x801419 <uxTopReadyPriority>
    2196:	9a 17       	cp	r25, r26
    2198:	10 f4       	brcc	.+4      	; 0x219e <xTaskIncrementTick+0x194>
    219a:	a0 93 19 14 	sts	0x1419, r26	; 0x801419 <uxTopReadyPriority>
    219e:	9b e0       	ldi	r25, 0x0B	; 11
    21a0:	9a 9f       	mul	r25, r26
    21a2:	d0 01       	movw	r26, r0
    21a4:	11 24       	eor	r1, r1
    21a6:	a5 5a       	subi	r26, 0xA5	; 165
    21a8:	bb 4e       	sbci	r27, 0xEB	; 235
    21aa:	11 96       	adiw	r26, 0x01	; 1
    21ac:	0d 90       	ld	r0, X+
    21ae:	bc 91       	ld	r27, X
    21b0:	a0 2d       	mov	r26, r0
    21b2:	b7 83       	std	Z+7, r27	; 0x07
    21b4:	a6 83       	std	Z+6, r26	; 0x06
    21b6:	16 96       	adiw	r26, 0x06	; 6
    21b8:	4d 91       	ld	r20, X+
    21ba:	5c 91       	ld	r21, X
    21bc:	17 97       	sbiw	r26, 0x07	; 7
    21be:	51 87       	std	Z+9, r21	; 0x09
    21c0:	40 87       	std	Z+8, r20	; 0x08
    21c2:	16 96       	adiw	r26, 0x06	; 6
    21c4:	cd 91       	ld	r28, X+
    21c6:	dc 91       	ld	r29, X
    21c8:	17 97       	sbiw	r26, 0x07	; 7
    21ca:	3d 83       	std	Y+5, r19	; 0x05
    21cc:	2c 83       	std	Y+4, r18	; 0x04
    21ce:	17 96       	adiw	r26, 0x07	; 7
    21d0:	3c 93       	st	X, r19
    21d2:	2e 93       	st	-X, r18
    21d4:	16 97       	sbiw	r26, 0x06	; 6
    21d6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    21d8:	9a 9f       	mul	r25, r26
    21da:	d0 01       	movw	r26, r0
    21dc:	11 24       	eor	r1, r1
    21de:	a5 5a       	subi	r26, 0xA5	; 165
    21e0:	bb 4e       	sbci	r27, 0xEB	; 235
    21e2:	b5 87       	std	Z+13, r27	; 0x0d
    21e4:	a4 87       	std	Z+12, r26	; 0x0c
    21e6:	9c 91       	ld	r25, X
    21e8:	9f 5f       	subi	r25, 0xFF	; 255
    21ea:	9c 93       	st	X, r25
    21ec:	22 8d       	ldd	r18, Z+26	; 0x1a
    21ee:	e0 91 c9 14 	lds	r30, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    21f2:	f0 91 ca 14 	lds	r31, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    21f6:	92 8d       	ldd	r25, Z+26	; 0x1a
    21f8:	29 17       	cp	r18, r25
    21fa:	08 f0       	brcs	.+2      	; 0x21fe <xTaskIncrementTick+0x1f4>
    21fc:	4f cf       	rjmp	.-354    	; 0x209c <xTaskIncrementTick+0x92>
    21fe:	51 cf       	rjmp	.-350    	; 0x20a2 <xTaskIncrementTick+0x98>
    2200:	e0 91 c9 14 	lds	r30, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    2204:	f0 91 ca 14 	lds	r31, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    2208:	e2 8d       	ldd	r30, Z+26	; 0x1a
    220a:	9b e0       	ldi	r25, 0x0B	; 11
    220c:	e9 9f       	mul	r30, r25
    220e:	f0 01       	movw	r30, r0
    2210:	11 24       	eor	r1, r1
    2212:	e5 5a       	subi	r30, 0xA5	; 165
    2214:	fb 4e       	sbci	r31, 0xEB	; 235
    2216:	90 81       	ld	r25, Z
    2218:	92 30       	cpi	r25, 0x02	; 2
    221a:	08 f0       	brcs	.+2      	; 0x221e <__stack+0x1f>
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	90 91 13 14 	lds	r25, 0x1413	; 0x801413 <xYieldPending>
    2222:	91 11       	cpse	r25, r1
    2224:	16 c0       	rjmp	.+44     	; 0x2252 <__stack+0x53>
    2226:	16 c0       	rjmp	.+44     	; 0x2254 <__stack+0x55>
    2228:	80 91 14 14 	lds	r24, 0x1414	; 0x801414 <xPendedTicks>
    222c:	90 91 15 14 	lds	r25, 0x1415	; 0x801415 <xPendedTicks+0x1>
    2230:	a0 91 16 14 	lds	r26, 0x1416	; 0x801416 <xPendedTicks+0x2>
    2234:	b0 91 17 14 	lds	r27, 0x1417	; 0x801417 <xPendedTicks+0x3>
    2238:	01 96       	adiw	r24, 0x01	; 1
    223a:	a1 1d       	adc	r26, r1
    223c:	b1 1d       	adc	r27, r1
    223e:	80 93 14 14 	sts	0x1414, r24	; 0x801414 <xPendedTicks>
    2242:	90 93 15 14 	sts	0x1415, r25	; 0x801415 <xPendedTicks+0x1>
    2246:	a0 93 16 14 	sts	0x1416, r26	; 0x801416 <xPendedTicks+0x2>
    224a:	b0 93 17 14 	sts	0x1417, r27	; 0x801417 <xPendedTicks+0x3>
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	01 c0       	rjmp	.+2      	; 0x2254 <__stack+0x55>
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	ff 90       	pop	r15
    225a:	ef 90       	pop	r14
    225c:	df 90       	pop	r13
    225e:	cf 90       	pop	r12
    2260:	08 95       	ret

00002262 <xTaskResumeAll>:
    2262:	cf 92       	push	r12
    2264:	df 92       	push	r13
    2266:	ef 92       	push	r14
    2268:	ff 92       	push	r15
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	0f 92       	push	r0
    2274:	80 91 0a 14 	lds	r24, 0x140A	; 0x80140a <uxSchedulerSuspended>
    2278:	81 50       	subi	r24, 0x01	; 1
    227a:	80 93 0a 14 	sts	0x140A, r24	; 0x80140a <uxSchedulerSuspended>
    227e:	80 91 0a 14 	lds	r24, 0x140A	; 0x80140a <uxSchedulerSuspended>
    2282:	81 11       	cpse	r24, r1
    2284:	be c0       	rjmp	.+380    	; 0x2402 <xTaskResumeAll+0x1a0>
    2286:	80 91 1e 14 	lds	r24, 0x141E	; 0x80141e <uxCurrentNumberOfTasks>
    228a:	81 11       	cpse	r24, r1
    228c:	88 c0       	rjmp	.+272    	; 0x239e <xTaskResumeAll+0x13c>
    228e:	bc c0       	rjmp	.+376    	; 0x2408 <xTaskResumeAll+0x1a6>
    2290:	e0 91 3d 14 	lds	r30, 0x143D	; 0x80143d <xPendingReadyList+0x7>
    2294:	f0 91 3e 14 	lds	r31, 0x143E	; 0x80143e <xPendingReadyList+0x8>
    2298:	00 84       	ldd	r0, Z+8	; 0x08
    229a:	f1 85       	ldd	r31, Z+9	; 0x09
    229c:	e0 2d       	mov	r30, r0
    229e:	a0 8d       	ldd	r26, Z+24	; 0x18
    22a0:	b1 8d       	ldd	r27, Z+25	; 0x19
    22a2:	c2 89       	ldd	r28, Z+18	; 0x12
    22a4:	d3 89       	ldd	r29, Z+19	; 0x13
    22a6:	84 89       	ldd	r24, Z+20	; 0x14
    22a8:	95 89       	ldd	r25, Z+21	; 0x15
    22aa:	9f 83       	std	Y+7, r25	; 0x07
    22ac:	8e 83       	std	Y+6, r24	; 0x06
    22ae:	c4 89       	ldd	r28, Z+20	; 0x14
    22b0:	d5 89       	ldd	r29, Z+21	; 0x15
    22b2:	82 89       	ldd	r24, Z+18	; 0x12
    22b4:	93 89       	ldd	r25, Z+19	; 0x13
    22b6:	9d 83       	std	Y+5, r25	; 0x05
    22b8:	8c 83       	std	Y+4, r24	; 0x04
    22ba:	11 96       	adiw	r26, 0x01	; 1
    22bc:	2d 91       	ld	r18, X+
    22be:	3c 91       	ld	r19, X
    22c0:	12 97       	sbiw	r26, 0x02	; 2
    22c2:	cf 01       	movw	r24, r30
    22c4:	0e 96       	adiw	r24, 0x0e	; 14
    22c6:	28 17       	cp	r18, r24
    22c8:	39 07       	cpc	r19, r25
    22ca:	31 f4       	brne	.+12     	; 0x22d8 <xTaskResumeAll+0x76>
    22cc:	84 89       	ldd	r24, Z+20	; 0x14
    22ce:	95 89       	ldd	r25, Z+21	; 0x15
    22d0:	12 96       	adiw	r26, 0x02	; 2
    22d2:	9c 93       	st	X, r25
    22d4:	8e 93       	st	-X, r24
    22d6:	11 97       	sbiw	r26, 0x01	; 1
    22d8:	11 8e       	std	Z+25, r1	; 0x19
    22da:	10 8e       	std	Z+24, r1	; 0x18
    22dc:	8c 91       	ld	r24, X
    22de:	81 50       	subi	r24, 0x01	; 1
    22e0:	8c 93       	st	X, r24
    22e2:	a4 85       	ldd	r26, Z+12	; 0x0c
    22e4:	b5 85       	ldd	r27, Z+13	; 0x0d
    22e6:	c6 81       	ldd	r28, Z+6	; 0x06
    22e8:	d7 81       	ldd	r29, Z+7	; 0x07
    22ea:	80 85       	ldd	r24, Z+8	; 0x08
    22ec:	91 85       	ldd	r25, Z+9	; 0x09
    22ee:	9f 83       	std	Y+7, r25	; 0x07
    22f0:	8e 83       	std	Y+6, r24	; 0x06
    22f2:	c0 85       	ldd	r28, Z+8	; 0x08
    22f4:	d1 85       	ldd	r29, Z+9	; 0x09
    22f6:	86 81       	ldd	r24, Z+6	; 0x06
    22f8:	97 81       	ldd	r25, Z+7	; 0x07
    22fa:	9d 83       	std	Y+5, r25	; 0x05
    22fc:	8c 83       	std	Y+4, r24	; 0x04
    22fe:	11 96       	adiw	r26, 0x01	; 1
    2300:	8d 91       	ld	r24, X+
    2302:	9c 91       	ld	r25, X
    2304:	12 97       	sbiw	r26, 0x02	; 2
    2306:	9f 01       	movw	r18, r30
    2308:	2e 5f       	subi	r18, 0xFE	; 254
    230a:	3f 4f       	sbci	r19, 0xFF	; 255
    230c:	82 17       	cp	r24, r18
    230e:	93 07       	cpc	r25, r19
    2310:	31 f4       	brne	.+12     	; 0x231e <xTaskResumeAll+0xbc>
    2312:	80 85       	ldd	r24, Z+8	; 0x08
    2314:	91 85       	ldd	r25, Z+9	; 0x09
    2316:	12 96       	adiw	r26, 0x02	; 2
    2318:	9c 93       	st	X, r25
    231a:	8e 93       	st	-X, r24
    231c:	11 97       	sbiw	r26, 0x01	; 1
    231e:	15 86       	std	Z+13, r1	; 0x0d
    2320:	14 86       	std	Z+12, r1	; 0x0c
    2322:	8c 91       	ld	r24, X
    2324:	81 50       	subi	r24, 0x01	; 1
    2326:	8c 93       	st	X, r24
    2328:	a2 8d       	ldd	r26, Z+26	; 0x1a
    232a:	80 91 19 14 	lds	r24, 0x1419	; 0x801419 <uxTopReadyPriority>
    232e:	8a 17       	cp	r24, r26
    2330:	10 f4       	brcc	.+4      	; 0x2336 <xTaskResumeAll+0xd4>
    2332:	a0 93 19 14 	sts	0x1419, r26	; 0x801419 <uxTopReadyPriority>
    2336:	8b e0       	ldi	r24, 0x0B	; 11
    2338:	8a 9f       	mul	r24, r26
    233a:	d0 01       	movw	r26, r0
    233c:	11 24       	eor	r1, r1
    233e:	a5 5a       	subi	r26, 0xA5	; 165
    2340:	bb 4e       	sbci	r27, 0xEB	; 235
    2342:	11 96       	adiw	r26, 0x01	; 1
    2344:	0d 90       	ld	r0, X+
    2346:	bc 91       	ld	r27, X
    2348:	a0 2d       	mov	r26, r0
    234a:	b7 83       	std	Z+7, r27	; 0x07
    234c:	a6 83       	std	Z+6, r26	; 0x06
    234e:	16 96       	adiw	r26, 0x06	; 6
    2350:	4d 91       	ld	r20, X+
    2352:	5c 91       	ld	r21, X
    2354:	17 97       	sbiw	r26, 0x07	; 7
    2356:	51 87       	std	Z+9, r21	; 0x09
    2358:	40 87       	std	Z+8, r20	; 0x08
    235a:	16 96       	adiw	r26, 0x06	; 6
    235c:	cd 91       	ld	r28, X+
    235e:	dc 91       	ld	r29, X
    2360:	17 97       	sbiw	r26, 0x07	; 7
    2362:	3d 83       	std	Y+5, r19	; 0x05
    2364:	2c 83       	std	Y+4, r18	; 0x04
    2366:	17 96       	adiw	r26, 0x07	; 7
    2368:	3c 93       	st	X, r19
    236a:	2e 93       	st	-X, r18
    236c:	16 97       	sbiw	r26, 0x06	; 6
    236e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2370:	8a 9f       	mul	r24, r26
    2372:	d0 01       	movw	r26, r0
    2374:	11 24       	eor	r1, r1
    2376:	a5 5a       	subi	r26, 0xA5	; 165
    2378:	bb 4e       	sbci	r27, 0xEB	; 235
    237a:	b5 87       	std	Z+13, r27	; 0x0d
    237c:	a4 87       	std	Z+12, r26	; 0x0c
    237e:	8c 91       	ld	r24, X
    2380:	8f 5f       	subi	r24, 0xFF	; 255
    2382:	8c 93       	st	X, r24
    2384:	92 8d       	ldd	r25, Z+26	; 0x1a
    2386:	a0 91 c9 14 	lds	r26, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    238a:	b0 91 ca 14 	lds	r27, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    238e:	5a 96       	adiw	r26, 0x1a	; 26
    2390:	8c 91       	ld	r24, X
    2392:	98 17       	cp	r25, r24
    2394:	30 f0       	brcs	.+12     	; 0x23a2 <xTaskResumeAll+0x140>
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	80 93 13 14 	sts	0x1413, r24	; 0x801413 <xYieldPending>
    239c:	02 c0       	rjmp	.+4      	; 0x23a2 <xTaskResumeAll+0x140>
    239e:	e0 e0       	ldi	r30, 0x00	; 0
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 91 36 14 	lds	r24, 0x1436	; 0x801436 <xPendingReadyList>
    23a6:	81 11       	cpse	r24, r1
    23a8:	73 cf       	rjmp	.-282    	; 0x2290 <xTaskResumeAll+0x2e>
    23aa:	ef 2b       	or	r30, r31
    23ac:	09 f0       	breq	.+2      	; 0x23b0 <xTaskResumeAll+0x14e>
    23ae:	7e db       	rcall	.-2308   	; 0x1aac <prvResetNextTaskUnblockTime>
    23b0:	c0 90 14 14 	lds	r12, 0x1414	; 0x801414 <xPendedTicks>
    23b4:	d0 90 15 14 	lds	r13, 0x1415	; 0x801415 <xPendedTicks+0x1>
    23b8:	e0 90 16 14 	lds	r14, 0x1416	; 0x801416 <xPendedTicks+0x2>
    23bc:	f0 90 17 14 	lds	r15, 0x1417	; 0x801417 <xPendedTicks+0x3>
    23c0:	c1 14       	cp	r12, r1
    23c2:	d1 04       	cpc	r13, r1
    23c4:	e1 04       	cpc	r14, r1
    23c6:	f1 04       	cpc	r15, r1
    23c8:	a1 f0       	breq	.+40     	; 0x23f2 <xTaskResumeAll+0x190>
    23ca:	1f de       	rcall	.-962    	; 0x200a <xTaskIncrementTick>
    23cc:	88 23       	and	r24, r24
    23ce:	19 f0       	breq	.+6      	; 0x23d6 <xTaskResumeAll+0x174>
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	80 93 13 14 	sts	0x1413, r24	; 0x801413 <xYieldPending>
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	c8 1a       	sub	r12, r24
    23da:	d1 08       	sbc	r13, r1
    23dc:	e1 08       	sbc	r14, r1
    23de:	f1 08       	sbc	r15, r1
    23e0:	a1 f7       	brne	.-24     	; 0x23ca <xTaskResumeAll+0x168>
    23e2:	10 92 14 14 	sts	0x1414, r1	; 0x801414 <xPendedTicks>
    23e6:	10 92 15 14 	sts	0x1415, r1	; 0x801415 <xPendedTicks+0x1>
    23ea:	10 92 16 14 	sts	0x1416, r1	; 0x801416 <xPendedTicks+0x2>
    23ee:	10 92 17 14 	sts	0x1417, r1	; 0x801417 <xPendedTicks+0x3>
    23f2:	80 91 13 14 	lds	r24, 0x1413	; 0x801413 <xYieldPending>
    23f6:	88 23       	and	r24, r24
    23f8:	31 f0       	breq	.+12     	; 0x2406 <xTaskResumeAll+0x1a4>
    23fa:	0e 94 87 06 	call	0xd0e	; 0xd0e <vPortYield>
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	03 c0       	rjmp	.+6      	; 0x2408 <xTaskResumeAll+0x1a6>
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	01 c0       	rjmp	.+2      	; 0x2408 <xTaskResumeAll+0x1a6>
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	0f 90       	pop	r0
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	df 91       	pop	r29
    240e:	cf 91       	pop	r28
    2410:	ff 90       	pop	r15
    2412:	ef 90       	pop	r14
    2414:	df 90       	pop	r13
    2416:	cf 90       	pop	r12
    2418:	08 95       	ret

0000241a <xTaskDelayUntil>:
    241a:	8f 92       	push	r8
    241c:	9f 92       	push	r9
    241e:	af 92       	push	r10
    2420:	bf 92       	push	r11
    2422:	cf 92       	push	r12
    2424:	df 92       	push	r13
    2426:	ef 92       	push	r14
    2428:	ff 92       	push	r15
    242a:	1f 93       	push	r17
    242c:	cf 93       	push	r28
    242e:	df 93       	push	r29
    2430:	ec 01       	movw	r28, r24
    2432:	6a 01       	movw	r12, r20
    2434:	7b 01       	movw	r14, r22
    2436:	d5 dd       	rcall	.-1110   	; 0x1fe2 <vTaskSuspendAll>
    2438:	80 90 1a 14 	lds	r8, 0x141A	; 0x80141a <xTickCount>
    243c:	90 90 1b 14 	lds	r9, 0x141B	; 0x80141b <xTickCount+0x1>
    2440:	a0 90 1c 14 	lds	r10, 0x141C	; 0x80141c <xTickCount+0x2>
    2444:	b0 90 1d 14 	lds	r11, 0x141D	; 0x80141d <xTickCount+0x3>
    2448:	88 81       	ld	r24, Y
    244a:	99 81       	ldd	r25, Y+1	; 0x01
    244c:	aa 81       	ldd	r26, Y+2	; 0x02
    244e:	bb 81       	ldd	r27, Y+3	; 0x03
    2450:	ac 01       	movw	r20, r24
    2452:	bd 01       	movw	r22, r26
    2454:	4c 0d       	add	r20, r12
    2456:	5d 1d       	adc	r21, r13
    2458:	6e 1d       	adc	r22, r14
    245a:	7f 1d       	adc	r23, r15
    245c:	88 16       	cp	r8, r24
    245e:	99 06       	cpc	r9, r25
    2460:	aa 06       	cpc	r10, r26
    2462:	bb 06       	cpc	r11, r27
    2464:	60 f4       	brcc	.+24     	; 0x247e <xTaskDelayUntil+0x64>
    2466:	48 17       	cp	r20, r24
    2468:	59 07       	cpc	r21, r25
    246a:	6a 07       	cpc	r22, r26
    246c:	7b 07       	cpc	r23, r27
    246e:	98 f4       	brcc	.+38     	; 0x2496 <xTaskDelayUntil+0x7c>
    2470:	84 16       	cp	r8, r20
    2472:	95 06       	cpc	r9, r21
    2474:	a6 06       	cpc	r10, r22
    2476:	b7 06       	cpc	r11, r23
    2478:	80 f0       	brcs	.+32     	; 0x249a <xTaskDelayUntil+0x80>
    247a:	10 e0       	ldi	r17, 0x00	; 0
    247c:	13 c0       	rjmp	.+38     	; 0x24a4 <xTaskDelayUntil+0x8a>
    247e:	48 17       	cp	r20, r24
    2480:	59 07       	cpc	r21, r25
    2482:	6a 07       	cpc	r22, r26
    2484:	7b 07       	cpc	r23, r27
    2486:	58 f0       	brcs	.+22     	; 0x249e <xTaskDelayUntil+0x84>
    2488:	84 16       	cp	r8, r20
    248a:	95 06       	cpc	r9, r21
    248c:	a6 06       	cpc	r10, r22
    248e:	b7 06       	cpc	r11, r23
    2490:	40 f0       	brcs	.+16     	; 0x24a2 <xTaskDelayUntil+0x88>
    2492:	10 e0       	ldi	r17, 0x00	; 0
    2494:	07 c0       	rjmp	.+14     	; 0x24a4 <xTaskDelayUntil+0x8a>
    2496:	10 e0       	ldi	r17, 0x00	; 0
    2498:	05 c0       	rjmp	.+10     	; 0x24a4 <xTaskDelayUntil+0x8a>
    249a:	11 e0       	ldi	r17, 0x01	; 1
    249c:	03 c0       	rjmp	.+6      	; 0x24a4 <xTaskDelayUntil+0x8a>
    249e:	11 e0       	ldi	r17, 0x01	; 1
    24a0:	01 c0       	rjmp	.+2      	; 0x24a4 <xTaskDelayUntil+0x8a>
    24a2:	11 e0       	ldi	r17, 0x01	; 1
    24a4:	48 83       	st	Y, r20
    24a6:	59 83       	std	Y+1, r21	; 0x01
    24a8:	6a 83       	std	Y+2, r22	; 0x02
    24aa:	7b 83       	std	Y+3, r23	; 0x03
    24ac:	11 23       	and	r17, r17
    24ae:	41 f0       	breq	.+16     	; 0x24c0 <xTaskDelayUntil+0xa6>
    24b0:	cb 01       	movw	r24, r22
    24b2:	ba 01       	movw	r22, r20
    24b4:	68 19       	sub	r22, r8
    24b6:	79 09       	sbc	r23, r9
    24b8:	8a 09       	sbc	r24, r10
    24ba:	9b 09       	sbc	r25, r11
    24bc:	40 e0       	ldi	r20, 0x00	; 0
    24be:	6b dc       	rcall	.-1834   	; 0x1d96 <prvAddCurrentTaskToDelayedList>
    24c0:	d0 de       	rcall	.-608    	; 0x2262 <xTaskResumeAll>
    24c2:	81 11       	cpse	r24, r1
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <xTaskDelayUntil+0xb0>
    24c6:	0e 94 87 06 	call	0xd0e	; 0xd0e <vPortYield>
    24ca:	81 2f       	mov	r24, r17
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	1f 91       	pop	r17
    24d2:	ff 90       	pop	r15
    24d4:	ef 90       	pop	r14
    24d6:	df 90       	pop	r13
    24d8:	cf 90       	pop	r12
    24da:	bf 90       	pop	r11
    24dc:	af 90       	pop	r10
    24de:	9f 90       	pop	r9
    24e0:	8f 90       	pop	r8
    24e2:	08 95       	ret

000024e4 <vTaskDelay>:
    24e4:	cf 92       	push	r12
    24e6:	df 92       	push	r13
    24e8:	ef 92       	push	r14
    24ea:	ff 92       	push	r15
    24ec:	6b 01       	movw	r12, r22
    24ee:	7c 01       	movw	r14, r24
    24f0:	67 2b       	or	r22, r23
    24f2:	68 2b       	or	r22, r24
    24f4:	69 2b       	or	r22, r25
    24f6:	39 f0       	breq	.+14     	; 0x2506 <vTaskDelay+0x22>
    24f8:	74 dd       	rcall	.-1304   	; 0x1fe2 <vTaskSuspendAll>
    24fa:	40 e0       	ldi	r20, 0x00	; 0
    24fc:	c7 01       	movw	r24, r14
    24fe:	b6 01       	movw	r22, r12
    2500:	4a dc       	rcall	.-1900   	; 0x1d96 <prvAddCurrentTaskToDelayedList>
    2502:	af de       	rcall	.-674    	; 0x2262 <xTaskResumeAll>
    2504:	01 c0       	rjmp	.+2      	; 0x2508 <vTaskDelay+0x24>
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	81 11       	cpse	r24, r1
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <vTaskDelay+0x2c>
    250c:	0e 94 87 06 	call	0xd0e	; 0xd0e <vPortYield>
    2510:	ff 90       	pop	r15
    2512:	ef 90       	pop	r14
    2514:	df 90       	pop	r13
    2516:	cf 90       	pop	r12
    2518:	08 95       	ret

0000251a <vTaskSwitchContext>:
    251a:	80 91 0a 14 	lds	r24, 0x140A	; 0x80140a <uxSchedulerSuspended>
    251e:	88 23       	and	r24, r24
    2520:	21 f0       	breq	.+8      	; 0x252a <vTaskSwitchContext+0x10>
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	80 93 13 14 	sts	0x1413, r24	; 0x801413 <xYieldPending>
    2528:	08 95       	ret
    252a:	10 92 13 14 	sts	0x1413, r1	; 0x801413 <xYieldPending>
    252e:	e0 91 c9 14 	lds	r30, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    2532:	f0 91 ca 14 	lds	r31, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    2536:	20 81       	ld	r18, Z
    2538:	31 81       	ldd	r19, Z+1	; 0x01
    253a:	e0 91 c9 14 	lds	r30, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    253e:	f0 91 ca 14 	lds	r31, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    2542:	83 8d       	ldd	r24, Z+27	; 0x1b
    2544:	94 8d       	ldd	r25, Z+28	; 0x1c
    2546:	82 17       	cp	r24, r18
    2548:	93 07       	cpc	r25, r19
    254a:	60 f0       	brcs	.+24     	; 0x2564 <vTaskSwitchContext+0x4a>
    254c:	60 91 c9 14 	lds	r22, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    2550:	70 91 ca 14 	lds	r23, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    2554:	63 5e       	subi	r22, 0xE3	; 227
    2556:	7f 4f       	sbci	r23, 0xFF	; 255
    2558:	80 91 c9 14 	lds	r24, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    255c:	90 91 ca 14 	lds	r25, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    2560:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <vApplicationStackOverflowHook>
    2564:	80 91 19 14 	lds	r24, 0x1419	; 0x801419 <uxTopReadyPriority>
    2568:	01 c0       	rjmp	.+2      	; 0x256c <vTaskSwitchContext+0x52>
    256a:	81 50       	subi	r24, 0x01	; 1
    256c:	28 2f       	mov	r18, r24
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	9b e0       	ldi	r25, 0x0B	; 11
    2572:	92 9f       	mul	r25, r18
    2574:	f0 01       	movw	r30, r0
    2576:	93 9f       	mul	r25, r19
    2578:	f0 0d       	add	r31, r0
    257a:	11 24       	eor	r1, r1
    257c:	e5 5a       	subi	r30, 0xA5	; 165
    257e:	fb 4e       	sbci	r31, 0xEB	; 235
    2580:	90 81       	ld	r25, Z
    2582:	99 23       	and	r25, r25
    2584:	91 f3       	breq	.-28     	; 0x256a <vTaskSwitchContext+0x50>
    2586:	9b e0       	ldi	r25, 0x0B	; 11
    2588:	92 9f       	mul	r25, r18
    258a:	a0 01       	movw	r20, r0
    258c:	93 9f       	mul	r25, r19
    258e:	50 0d       	add	r21, r0
    2590:	11 24       	eor	r1, r1
    2592:	df 01       	movw	r26, r30
    2594:	01 80       	ldd	r0, Z+1	; 0x01
    2596:	f2 81       	ldd	r31, Z+2	; 0x02
    2598:	e0 2d       	mov	r30, r0
    259a:	04 80       	ldd	r0, Z+4	; 0x04
    259c:	f5 81       	ldd	r31, Z+5	; 0x05
    259e:	e0 2d       	mov	r30, r0
    25a0:	12 96       	adiw	r26, 0x02	; 2
    25a2:	fc 93       	st	X, r31
    25a4:	ee 93       	st	-X, r30
    25a6:	11 97       	sbiw	r26, 0x01	; 1
    25a8:	42 5a       	subi	r20, 0xA2	; 162
    25aa:	5b 4e       	sbci	r21, 0xEB	; 235
    25ac:	e4 17       	cp	r30, r20
    25ae:	f5 07       	cpc	r31, r21
    25b0:	29 f4       	brne	.+10     	; 0x25bc <vTaskSwitchContext+0xa2>
    25b2:	44 81       	ldd	r20, Z+4	; 0x04
    25b4:	55 81       	ldd	r21, Z+5	; 0x05
    25b6:	fd 01       	movw	r30, r26
    25b8:	52 83       	std	Z+2, r21	; 0x02
    25ba:	41 83       	std	Z+1, r20	; 0x01
    25bc:	9b e0       	ldi	r25, 0x0B	; 11
    25be:	92 9f       	mul	r25, r18
    25c0:	f0 01       	movw	r30, r0
    25c2:	93 9f       	mul	r25, r19
    25c4:	f0 0d       	add	r31, r0
    25c6:	11 24       	eor	r1, r1
    25c8:	e5 5a       	subi	r30, 0xA5	; 165
    25ca:	fb 4e       	sbci	r31, 0xEB	; 235
    25cc:	01 80       	ldd	r0, Z+1	; 0x01
    25ce:	f2 81       	ldd	r31, Z+2	; 0x02
    25d0:	e0 2d       	mov	r30, r0
    25d2:	20 85       	ldd	r18, Z+8	; 0x08
    25d4:	31 85       	ldd	r19, Z+9	; 0x09
    25d6:	30 93 ca 14 	sts	0x14CA, r19	; 0x8014ca <pxCurrentTCB+0x1>
    25da:	20 93 c9 14 	sts	0x14C9, r18	; 0x8014c9 <pxCurrentTCB>
    25de:	80 93 19 14 	sts	0x1419, r24	; 0x801419 <uxTopReadyPriority>
    25e2:	08 95       	ret

000025e4 <vTaskPlaceOnEventList>:
    25e4:	cf 92       	push	r12
    25e6:	df 92       	push	r13
    25e8:	ef 92       	push	r14
    25ea:	ff 92       	push	r15
    25ec:	6a 01       	movw	r12, r20
    25ee:	7b 01       	movw	r14, r22
    25f0:	60 91 c9 14 	lds	r22, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    25f4:	70 91 ca 14 	lds	r23, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    25f8:	62 5f       	subi	r22, 0xF2	; 242
    25fa:	7f 4f       	sbci	r23, 0xFF	; 255
    25fc:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vListInsert>
    2600:	41 e0       	ldi	r20, 0x01	; 1
    2602:	c7 01       	movw	r24, r14
    2604:	b6 01       	movw	r22, r12
    2606:	c7 db       	rcall	.-2162   	; 0x1d96 <prvAddCurrentTaskToDelayedList>
    2608:	ff 90       	pop	r15
    260a:	ef 90       	pop	r14
    260c:	df 90       	pop	r13
    260e:	cf 90       	pop	r12
    2610:	08 95       	ret

00002612 <vTaskPlaceOnUnorderedEventList>:
    2612:	0f 93       	push	r16
    2614:	1f 93       	push	r17
    2616:	cf 93       	push	r28
    2618:	df 93       	push	r29
    261a:	fc 01       	movw	r30, r24
    261c:	a0 91 c9 14 	lds	r26, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    2620:	b0 91 ca 14 	lds	r27, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    2624:	70 68       	ori	r23, 0x80	; 128
    2626:	1e 96       	adiw	r26, 0x0e	; 14
    2628:	4d 93       	st	X+, r20
    262a:	5d 93       	st	X+, r21
    262c:	6d 93       	st	X+, r22
    262e:	7c 93       	st	X, r23
    2630:	51 97       	sbiw	r26, 0x11	; 17
    2632:	a1 81       	ldd	r26, Z+1	; 0x01
    2634:	b2 81       	ldd	r27, Z+2	; 0x02
    2636:	c0 91 c9 14 	lds	r28, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    263a:	d0 91 ca 14 	lds	r29, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    263e:	bb 8b       	std	Y+19, r27	; 0x13
    2640:	aa 8b       	std	Y+18, r26	; 0x12
    2642:	c0 91 c9 14 	lds	r28, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    2646:	d0 91 ca 14 	lds	r29, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    264a:	16 96       	adiw	r26, 0x06	; 6
    264c:	8d 91       	ld	r24, X+
    264e:	9c 91       	ld	r25, X
    2650:	17 97       	sbiw	r26, 0x07	; 7
    2652:	9d 8b       	std	Y+21, r25	; 0x15
    2654:	8c 8b       	std	Y+20, r24	; 0x14
    2656:	16 96       	adiw	r26, 0x06	; 6
    2658:	cd 91       	ld	r28, X+
    265a:	dc 91       	ld	r29, X
    265c:	17 97       	sbiw	r26, 0x07	; 7
    265e:	80 91 c9 14 	lds	r24, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    2662:	90 91 ca 14 	lds	r25, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    2666:	0e 96       	adiw	r24, 0x0e	; 14
    2668:	9d 83       	std	Y+5, r25	; 0x05
    266a:	8c 83       	std	Y+4, r24	; 0x04
    266c:	80 91 c9 14 	lds	r24, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    2670:	90 91 ca 14 	lds	r25, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    2674:	0e 96       	adiw	r24, 0x0e	; 14
    2676:	17 96       	adiw	r26, 0x07	; 7
    2678:	9c 93       	st	X, r25
    267a:	8e 93       	st	-X, r24
    267c:	16 97       	sbiw	r26, 0x06	; 6
    267e:	a0 91 c9 14 	lds	r26, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    2682:	b0 91 ca 14 	lds	r27, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    2686:	59 96       	adiw	r26, 0x19	; 25
    2688:	fc 93       	st	X, r31
    268a:	ee 93       	st	-X, r30
    268c:	58 97       	sbiw	r26, 0x18	; 24
    268e:	80 81       	ld	r24, Z
    2690:	8f 5f       	subi	r24, 0xFF	; 255
    2692:	80 83       	st	Z, r24
    2694:	41 e0       	ldi	r20, 0x01	; 1
    2696:	c9 01       	movw	r24, r18
    2698:	b8 01       	movw	r22, r16
    269a:	7d db       	rcall	.-2310   	; 0x1d96 <prvAddCurrentTaskToDelayedList>
    269c:	df 91       	pop	r29
    269e:	cf 91       	pop	r28
    26a0:	1f 91       	pop	r17
    26a2:	0f 91       	pop	r16
    26a4:	08 95       	ret

000026a6 <vTaskPlaceOnEventListRestricted>:
    26a6:	cf 93       	push	r28
    26a8:	df 93       	push	r29
    26aa:	fc 01       	movw	r30, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	ba 01       	movw	r22, r20
    26b0:	a1 81       	ldd	r26, Z+1	; 0x01
    26b2:	b2 81       	ldd	r27, Z+2	; 0x02
    26b4:	c0 91 c9 14 	lds	r28, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    26b8:	d0 91 ca 14 	lds	r29, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    26bc:	bb 8b       	std	Y+19, r27	; 0x13
    26be:	aa 8b       	std	Y+18, r26	; 0x12
    26c0:	c0 91 c9 14 	lds	r28, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    26c4:	d0 91 ca 14 	lds	r29, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    26c8:	16 96       	adiw	r26, 0x06	; 6
    26ca:	4d 91       	ld	r20, X+
    26cc:	5c 91       	ld	r21, X
    26ce:	17 97       	sbiw	r26, 0x07	; 7
    26d0:	5d 8b       	std	Y+21, r21	; 0x15
    26d2:	4c 8b       	std	Y+20, r20	; 0x14
    26d4:	16 96       	adiw	r26, 0x06	; 6
    26d6:	cd 91       	ld	r28, X+
    26d8:	dc 91       	ld	r29, X
    26da:	17 97       	sbiw	r26, 0x07	; 7
    26dc:	40 91 c9 14 	lds	r20, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    26e0:	50 91 ca 14 	lds	r21, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    26e4:	42 5f       	subi	r20, 0xF2	; 242
    26e6:	5f 4f       	sbci	r21, 0xFF	; 255
    26e8:	5d 83       	std	Y+5, r21	; 0x05
    26ea:	4c 83       	std	Y+4, r20	; 0x04
    26ec:	40 91 c9 14 	lds	r20, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    26f0:	50 91 ca 14 	lds	r21, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    26f4:	42 5f       	subi	r20, 0xF2	; 242
    26f6:	5f 4f       	sbci	r21, 0xFF	; 255
    26f8:	17 96       	adiw	r26, 0x07	; 7
    26fa:	5c 93       	st	X, r21
    26fc:	4e 93       	st	-X, r20
    26fe:	16 97       	sbiw	r26, 0x06	; 6
    2700:	a0 91 c9 14 	lds	r26, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    2704:	b0 91 ca 14 	lds	r27, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    2708:	59 96       	adiw	r26, 0x19	; 25
    270a:	fc 93       	st	X, r31
    270c:	ee 93       	st	-X, r30
    270e:	58 97       	sbiw	r26, 0x18	; 24
    2710:	30 81       	ld	r19, Z
    2712:	3f 5f       	subi	r19, 0xFF	; 255
    2714:	30 83       	st	Z, r19
    2716:	22 23       	and	r18, r18
    2718:	19 f0       	breq	.+6      	; 0x2720 <vTaskPlaceOnEventListRestricted+0x7a>
    271a:	6f ef       	ldi	r22, 0xFF	; 255
    271c:	7f ef       	ldi	r23, 0xFF	; 255
    271e:	cb 01       	movw	r24, r22
    2720:	42 2f       	mov	r20, r18
    2722:	39 db       	rcall	.-2446   	; 0x1d96 <prvAddCurrentTaskToDelayedList>
    2724:	df 91       	pop	r29
    2726:	cf 91       	pop	r28
    2728:	08 95       	ret

0000272a <xTaskRemoveFromEventList>:
    272a:	cf 93       	push	r28
    272c:	df 93       	push	r29
    272e:	dc 01       	movw	r26, r24
    2730:	17 96       	adiw	r26, 0x07	; 7
    2732:	ed 91       	ld	r30, X+
    2734:	fc 91       	ld	r31, X
    2736:	18 97       	sbiw	r26, 0x08	; 8
    2738:	00 84       	ldd	r0, Z+8	; 0x08
    273a:	f1 85       	ldd	r31, Z+9	; 0x09
    273c:	e0 2d       	mov	r30, r0
    273e:	a0 8d       	ldd	r26, Z+24	; 0x18
    2740:	b1 8d       	ldd	r27, Z+25	; 0x19
    2742:	c2 89       	ldd	r28, Z+18	; 0x12
    2744:	d3 89       	ldd	r29, Z+19	; 0x13
    2746:	84 89       	ldd	r24, Z+20	; 0x14
    2748:	95 89       	ldd	r25, Z+21	; 0x15
    274a:	9f 83       	std	Y+7, r25	; 0x07
    274c:	8e 83       	std	Y+6, r24	; 0x06
    274e:	c4 89       	ldd	r28, Z+20	; 0x14
    2750:	d5 89       	ldd	r29, Z+21	; 0x15
    2752:	82 89       	ldd	r24, Z+18	; 0x12
    2754:	93 89       	ldd	r25, Z+19	; 0x13
    2756:	9d 83       	std	Y+5, r25	; 0x05
    2758:	8c 83       	std	Y+4, r24	; 0x04
    275a:	11 96       	adiw	r26, 0x01	; 1
    275c:	8d 91       	ld	r24, X+
    275e:	9c 91       	ld	r25, X
    2760:	12 97       	sbiw	r26, 0x02	; 2
    2762:	9f 01       	movw	r18, r30
    2764:	22 5f       	subi	r18, 0xF2	; 242
    2766:	3f 4f       	sbci	r19, 0xFF	; 255
    2768:	82 17       	cp	r24, r18
    276a:	93 07       	cpc	r25, r19
    276c:	31 f4       	brne	.+12     	; 0x277a <xTaskRemoveFromEventList+0x50>
    276e:	84 89       	ldd	r24, Z+20	; 0x14
    2770:	95 89       	ldd	r25, Z+21	; 0x15
    2772:	12 96       	adiw	r26, 0x02	; 2
    2774:	9c 93       	st	X, r25
    2776:	8e 93       	st	-X, r24
    2778:	11 97       	sbiw	r26, 0x01	; 1
    277a:	11 8e       	std	Z+25, r1	; 0x19
    277c:	10 8e       	std	Z+24, r1	; 0x18
    277e:	8c 91       	ld	r24, X
    2780:	81 50       	subi	r24, 0x01	; 1
    2782:	8c 93       	st	X, r24
    2784:	80 91 0a 14 	lds	r24, 0x140A	; 0x80140a <uxSchedulerSuspended>
    2788:	81 11       	cpse	r24, r1
    278a:	52 c0       	rjmp	.+164    	; 0x2830 <xTaskRemoveFromEventList+0x106>
    278c:	a4 85       	ldd	r26, Z+12	; 0x0c
    278e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2790:	c6 81       	ldd	r28, Z+6	; 0x06
    2792:	d7 81       	ldd	r29, Z+7	; 0x07
    2794:	80 85       	ldd	r24, Z+8	; 0x08
    2796:	91 85       	ldd	r25, Z+9	; 0x09
    2798:	9f 83       	std	Y+7, r25	; 0x07
    279a:	8e 83       	std	Y+6, r24	; 0x06
    279c:	c0 85       	ldd	r28, Z+8	; 0x08
    279e:	d1 85       	ldd	r29, Z+9	; 0x09
    27a0:	86 81       	ldd	r24, Z+6	; 0x06
    27a2:	97 81       	ldd	r25, Z+7	; 0x07
    27a4:	9d 83       	std	Y+5, r25	; 0x05
    27a6:	8c 83       	std	Y+4, r24	; 0x04
    27a8:	11 96       	adiw	r26, 0x01	; 1
    27aa:	8d 91       	ld	r24, X+
    27ac:	9c 91       	ld	r25, X
    27ae:	12 97       	sbiw	r26, 0x02	; 2
    27b0:	9f 01       	movw	r18, r30
    27b2:	2e 5f       	subi	r18, 0xFE	; 254
    27b4:	3f 4f       	sbci	r19, 0xFF	; 255
    27b6:	82 17       	cp	r24, r18
    27b8:	93 07       	cpc	r25, r19
    27ba:	31 f4       	brne	.+12     	; 0x27c8 <xTaskRemoveFromEventList+0x9e>
    27bc:	80 85       	ldd	r24, Z+8	; 0x08
    27be:	91 85       	ldd	r25, Z+9	; 0x09
    27c0:	12 96       	adiw	r26, 0x02	; 2
    27c2:	9c 93       	st	X, r25
    27c4:	8e 93       	st	-X, r24
    27c6:	11 97       	sbiw	r26, 0x01	; 1
    27c8:	15 86       	std	Z+13, r1	; 0x0d
    27ca:	14 86       	std	Z+12, r1	; 0x0c
    27cc:	8c 91       	ld	r24, X
    27ce:	81 50       	subi	r24, 0x01	; 1
    27d0:	8c 93       	st	X, r24
    27d2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    27d4:	80 91 19 14 	lds	r24, 0x1419	; 0x801419 <uxTopReadyPriority>
    27d8:	8a 17       	cp	r24, r26
    27da:	10 f4       	brcc	.+4      	; 0x27e0 <xTaskRemoveFromEventList+0xb6>
    27dc:	a0 93 19 14 	sts	0x1419, r26	; 0x801419 <uxTopReadyPriority>
    27e0:	8b e0       	ldi	r24, 0x0B	; 11
    27e2:	8a 9f       	mul	r24, r26
    27e4:	d0 01       	movw	r26, r0
    27e6:	11 24       	eor	r1, r1
    27e8:	a5 5a       	subi	r26, 0xA5	; 165
    27ea:	bb 4e       	sbci	r27, 0xEB	; 235
    27ec:	11 96       	adiw	r26, 0x01	; 1
    27ee:	0d 90       	ld	r0, X+
    27f0:	bc 91       	ld	r27, X
    27f2:	a0 2d       	mov	r26, r0
    27f4:	b7 83       	std	Z+7, r27	; 0x07
    27f6:	a6 83       	std	Z+6, r26	; 0x06
    27f8:	16 96       	adiw	r26, 0x06	; 6
    27fa:	4d 91       	ld	r20, X+
    27fc:	5c 91       	ld	r21, X
    27fe:	17 97       	sbiw	r26, 0x07	; 7
    2800:	51 87       	std	Z+9, r21	; 0x09
    2802:	40 87       	std	Z+8, r20	; 0x08
    2804:	16 96       	adiw	r26, 0x06	; 6
    2806:	cd 91       	ld	r28, X+
    2808:	dc 91       	ld	r29, X
    280a:	17 97       	sbiw	r26, 0x07	; 7
    280c:	3d 83       	std	Y+5, r19	; 0x05
    280e:	2c 83       	std	Y+4, r18	; 0x04
    2810:	17 96       	adiw	r26, 0x07	; 7
    2812:	3c 93       	st	X, r19
    2814:	2e 93       	st	-X, r18
    2816:	16 97       	sbiw	r26, 0x06	; 6
    2818:	a2 8d       	ldd	r26, Z+26	; 0x1a
    281a:	8a 9f       	mul	r24, r26
    281c:	d0 01       	movw	r26, r0
    281e:	11 24       	eor	r1, r1
    2820:	a5 5a       	subi	r26, 0xA5	; 165
    2822:	bb 4e       	sbci	r27, 0xEB	; 235
    2824:	b5 87       	std	Z+13, r27	; 0x0d
    2826:	a4 87       	std	Z+12, r26	; 0x0c
    2828:	8c 91       	ld	r24, X
    282a:	8f 5f       	subi	r24, 0xFF	; 255
    282c:	8c 93       	st	X, r24
    282e:	1c c0       	rjmp	.+56     	; 0x2868 <xTaskRemoveFromEventList+0x13e>
    2830:	46 e3       	ldi	r20, 0x36	; 54
    2832:	54 e1       	ldi	r21, 0x14	; 20
    2834:	da 01       	movw	r26, r20
    2836:	11 96       	adiw	r26, 0x01	; 1
    2838:	cd 91       	ld	r28, X+
    283a:	dc 91       	ld	r29, X
    283c:	12 97       	sbiw	r26, 0x02	; 2
    283e:	d3 8b       	std	Z+19, r29	; 0x13
    2840:	c2 8b       	std	Z+18, r28	; 0x12
    2842:	8e 81       	ldd	r24, Y+6	; 0x06
    2844:	9f 81       	ldd	r25, Y+7	; 0x07
    2846:	95 8b       	std	Z+21, r25	; 0x15
    2848:	84 8b       	std	Z+20, r24	; 0x14
    284a:	8e 81       	ldd	r24, Y+6	; 0x06
    284c:	9f 81       	ldd	r25, Y+7	; 0x07
    284e:	dc 01       	movw	r26, r24
    2850:	15 96       	adiw	r26, 0x05	; 5
    2852:	3c 93       	st	X, r19
    2854:	2e 93       	st	-X, r18
    2856:	14 97       	sbiw	r26, 0x04	; 4
    2858:	3f 83       	std	Y+7, r19	; 0x07
    285a:	2e 83       	std	Y+6, r18	; 0x06
    285c:	51 8f       	std	Z+25, r21	; 0x19
    285e:	40 8f       	std	Z+24, r20	; 0x18
    2860:	da 01       	movw	r26, r20
    2862:	8c 91       	ld	r24, X
    2864:	8f 5f       	subi	r24, 0xFF	; 255
    2866:	8c 93       	st	X, r24
    2868:	92 8d       	ldd	r25, Z+26	; 0x1a
    286a:	e0 91 c9 14 	lds	r30, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    286e:	f0 91 ca 14 	lds	r31, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    2872:	82 8d       	ldd	r24, Z+26	; 0x1a
    2874:	89 17       	cp	r24, r25
    2876:	20 f4       	brcc	.+8      	; 0x2880 <xTaskRemoveFromEventList+0x156>
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	80 93 13 14 	sts	0x1413, r24	; 0x801413 <xYieldPending>
    287e:	01 c0       	rjmp	.+2      	; 0x2882 <xTaskRemoveFromEventList+0x158>
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	df 91       	pop	r29
    2884:	cf 91       	pop	r28
    2886:	08 95       	ret

00002888 <vTaskRemoveFromUnorderedEventList>:
    2888:	cf 93       	push	r28
    288a:	df 93       	push	r29
    288c:	dc 01       	movw	r26, r24
    288e:	70 68       	ori	r23, 0x80	; 128
    2890:	4d 93       	st	X+, r20
    2892:	5d 93       	st	X+, r21
    2894:	6d 93       	st	X+, r22
    2896:	7c 93       	st	X, r23
    2898:	13 97       	sbiw	r26, 0x03	; 3
    289a:	18 96       	adiw	r26, 0x08	; 8
    289c:	ed 91       	ld	r30, X+
    289e:	fc 91       	ld	r31, X
    28a0:	19 97       	sbiw	r26, 0x09	; 9
    28a2:	1a 96       	adiw	r26, 0x0a	; 10
    28a4:	4d 91       	ld	r20, X+
    28a6:	5c 91       	ld	r21, X
    28a8:	1b 97       	sbiw	r26, 0x0b	; 11
    28aa:	14 96       	adiw	r26, 0x04	; 4
    28ac:	8d 91       	ld	r24, X+
    28ae:	9c 91       	ld	r25, X
    28b0:	15 97       	sbiw	r26, 0x05	; 5
    28b2:	16 96       	adiw	r26, 0x06	; 6
    28b4:	2d 91       	ld	r18, X+
    28b6:	3c 91       	ld	r19, X
    28b8:	17 97       	sbiw	r26, 0x07	; 7
    28ba:	ec 01       	movw	r28, r24
    28bc:	3f 83       	std	Y+7, r19	; 0x07
    28be:	2e 83       	std	Y+6, r18	; 0x06
    28c0:	16 96       	adiw	r26, 0x06	; 6
    28c2:	8d 91       	ld	r24, X+
    28c4:	9c 91       	ld	r25, X
    28c6:	17 97       	sbiw	r26, 0x07	; 7
    28c8:	14 96       	adiw	r26, 0x04	; 4
    28ca:	2d 91       	ld	r18, X+
    28cc:	3c 91       	ld	r19, X
    28ce:	15 97       	sbiw	r26, 0x05	; 5
    28d0:	ec 01       	movw	r28, r24
    28d2:	3d 83       	std	Y+5, r19	; 0x05
    28d4:	2c 83       	std	Y+4, r18	; 0x04
    28d6:	ea 01       	movw	r28, r20
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	9a 81       	ldd	r25, Y+2	; 0x02
    28dc:	a8 17       	cp	r26, r24
    28de:	b9 07       	cpc	r27, r25
    28e0:	31 f4       	brne	.+12     	; 0x28ee <vTaskRemoveFromUnorderedEventList+0x66>
    28e2:	16 96       	adiw	r26, 0x06	; 6
    28e4:	8d 91       	ld	r24, X+
    28e6:	9c 91       	ld	r25, X
    28e8:	17 97       	sbiw	r26, 0x07	; 7
    28ea:	9a 83       	std	Y+2, r25	; 0x02
    28ec:	89 83       	std	Y+1, r24	; 0x01
    28ee:	1b 96       	adiw	r26, 0x0b	; 11
    28f0:	1c 92       	st	X, r1
    28f2:	1e 92       	st	-X, r1
    28f4:	1a 97       	sbiw	r26, 0x0a	; 10
    28f6:	da 01       	movw	r26, r20
    28f8:	8c 91       	ld	r24, X
    28fa:	81 50       	subi	r24, 0x01	; 1
    28fc:	8c 93       	st	X, r24
    28fe:	a4 85       	ldd	r26, Z+12	; 0x0c
    2900:	b5 85       	ldd	r27, Z+13	; 0x0d
    2902:	c6 81       	ldd	r28, Z+6	; 0x06
    2904:	d7 81       	ldd	r29, Z+7	; 0x07
    2906:	80 85       	ldd	r24, Z+8	; 0x08
    2908:	91 85       	ldd	r25, Z+9	; 0x09
    290a:	9f 83       	std	Y+7, r25	; 0x07
    290c:	8e 83       	std	Y+6, r24	; 0x06
    290e:	c0 85       	ldd	r28, Z+8	; 0x08
    2910:	d1 85       	ldd	r29, Z+9	; 0x09
    2912:	86 81       	ldd	r24, Z+6	; 0x06
    2914:	97 81       	ldd	r25, Z+7	; 0x07
    2916:	9d 83       	std	Y+5, r25	; 0x05
    2918:	8c 83       	std	Y+4, r24	; 0x04
    291a:	11 96       	adiw	r26, 0x01	; 1
    291c:	8d 91       	ld	r24, X+
    291e:	9c 91       	ld	r25, X
    2920:	12 97       	sbiw	r26, 0x02	; 2
    2922:	9f 01       	movw	r18, r30
    2924:	2e 5f       	subi	r18, 0xFE	; 254
    2926:	3f 4f       	sbci	r19, 0xFF	; 255
    2928:	82 17       	cp	r24, r18
    292a:	93 07       	cpc	r25, r19
    292c:	31 f4       	brne	.+12     	; 0x293a <vTaskRemoveFromUnorderedEventList+0xb2>
    292e:	80 85       	ldd	r24, Z+8	; 0x08
    2930:	91 85       	ldd	r25, Z+9	; 0x09
    2932:	12 96       	adiw	r26, 0x02	; 2
    2934:	9c 93       	st	X, r25
    2936:	8e 93       	st	-X, r24
    2938:	11 97       	sbiw	r26, 0x01	; 1
    293a:	15 86       	std	Z+13, r1	; 0x0d
    293c:	14 86       	std	Z+12, r1	; 0x0c
    293e:	8c 91       	ld	r24, X
    2940:	81 50       	subi	r24, 0x01	; 1
    2942:	8c 93       	st	X, r24
    2944:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2946:	80 91 19 14 	lds	r24, 0x1419	; 0x801419 <uxTopReadyPriority>
    294a:	8a 17       	cp	r24, r26
    294c:	10 f4       	brcc	.+4      	; 0x2952 <vTaskRemoveFromUnorderedEventList+0xca>
    294e:	a0 93 19 14 	sts	0x1419, r26	; 0x801419 <uxTopReadyPriority>
    2952:	8b e0       	ldi	r24, 0x0B	; 11
    2954:	8a 9f       	mul	r24, r26
    2956:	d0 01       	movw	r26, r0
    2958:	11 24       	eor	r1, r1
    295a:	a5 5a       	subi	r26, 0xA5	; 165
    295c:	bb 4e       	sbci	r27, 0xEB	; 235
    295e:	11 96       	adiw	r26, 0x01	; 1
    2960:	0d 90       	ld	r0, X+
    2962:	bc 91       	ld	r27, X
    2964:	a0 2d       	mov	r26, r0
    2966:	b7 83       	std	Z+7, r27	; 0x07
    2968:	a6 83       	std	Z+6, r26	; 0x06
    296a:	16 96       	adiw	r26, 0x06	; 6
    296c:	4d 91       	ld	r20, X+
    296e:	5c 91       	ld	r21, X
    2970:	17 97       	sbiw	r26, 0x07	; 7
    2972:	51 87       	std	Z+9, r21	; 0x09
    2974:	40 87       	std	Z+8, r20	; 0x08
    2976:	16 96       	adiw	r26, 0x06	; 6
    2978:	cd 91       	ld	r28, X+
    297a:	dc 91       	ld	r29, X
    297c:	17 97       	sbiw	r26, 0x07	; 7
    297e:	3d 83       	std	Y+5, r19	; 0x05
    2980:	2c 83       	std	Y+4, r18	; 0x04
    2982:	17 96       	adiw	r26, 0x07	; 7
    2984:	3c 93       	st	X, r19
    2986:	2e 93       	st	-X, r18
    2988:	16 97       	sbiw	r26, 0x06	; 6
    298a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    298c:	8a 9f       	mul	r24, r26
    298e:	d0 01       	movw	r26, r0
    2990:	11 24       	eor	r1, r1
    2992:	a5 5a       	subi	r26, 0xA5	; 165
    2994:	bb 4e       	sbci	r27, 0xEB	; 235
    2996:	b5 87       	std	Z+13, r27	; 0x0d
    2998:	a4 87       	std	Z+12, r26	; 0x0c
    299a:	8c 91       	ld	r24, X
    299c:	8f 5f       	subi	r24, 0xFF	; 255
    299e:	8c 93       	st	X, r24
    29a0:	92 8d       	ldd	r25, Z+26	; 0x1a
    29a2:	e0 91 c9 14 	lds	r30, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    29a6:	f0 91 ca 14 	lds	r31, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    29aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    29ac:	89 17       	cp	r24, r25
    29ae:	18 f4       	brcc	.+6      	; 0x29b6 <vTaskRemoveFromUnorderedEventList+0x12e>
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	80 93 13 14 	sts	0x1413, r24	; 0x801413 <xYieldPending>
    29b6:	df 91       	pop	r29
    29b8:	cf 91       	pop	r28
    29ba:	08 95       	ret

000029bc <vTaskSetTimeOutState>:
    29bc:	0f b6       	in	r0, 0x3f	; 63
    29be:	f8 94       	cli
    29c0:	0f 92       	push	r0
    29c2:	20 91 12 14 	lds	r18, 0x1412	; 0x801412 <xNumOfOverflows>
    29c6:	fc 01       	movw	r30, r24
    29c8:	20 83       	st	Z, r18
    29ca:	40 91 1a 14 	lds	r20, 0x141A	; 0x80141a <xTickCount>
    29ce:	50 91 1b 14 	lds	r21, 0x141B	; 0x80141b <xTickCount+0x1>
    29d2:	60 91 1c 14 	lds	r22, 0x141C	; 0x80141c <xTickCount+0x2>
    29d6:	70 91 1d 14 	lds	r23, 0x141D	; 0x80141d <xTickCount+0x3>
    29da:	41 83       	std	Z+1, r20	; 0x01
    29dc:	52 83       	std	Z+2, r21	; 0x02
    29de:	63 83       	std	Z+3, r22	; 0x03
    29e0:	74 83       	std	Z+4, r23	; 0x04
    29e2:	0f 90       	pop	r0
    29e4:	0f be       	out	0x3f, r0	; 63
    29e6:	08 95       	ret

000029e8 <vTaskInternalSetTimeOutState>:
    29e8:	20 91 12 14 	lds	r18, 0x1412	; 0x801412 <xNumOfOverflows>
    29ec:	fc 01       	movw	r30, r24
    29ee:	20 83       	st	Z, r18
    29f0:	40 91 1a 14 	lds	r20, 0x141A	; 0x80141a <xTickCount>
    29f4:	50 91 1b 14 	lds	r21, 0x141B	; 0x80141b <xTickCount+0x1>
    29f8:	60 91 1c 14 	lds	r22, 0x141C	; 0x80141c <xTickCount+0x2>
    29fc:	70 91 1d 14 	lds	r23, 0x141D	; 0x80141d <xTickCount+0x3>
    2a00:	41 83       	std	Z+1, r20	; 0x01
    2a02:	52 83       	std	Z+2, r21	; 0x02
    2a04:	63 83       	std	Z+3, r22	; 0x03
    2a06:	74 83       	std	Z+4, r23	; 0x04
    2a08:	08 95       	ret

00002a0a <xTaskCheckForTimeOut>:
    2a0a:	8f 92       	push	r8
    2a0c:	9f 92       	push	r9
    2a0e:	af 92       	push	r10
    2a10:	bf 92       	push	r11
    2a12:	cf 92       	push	r12
    2a14:	df 92       	push	r13
    2a16:	ef 92       	push	r14
    2a18:	ff 92       	push	r15
    2a1a:	0f 93       	push	r16
    2a1c:	1f 93       	push	r17
    2a1e:	cf 93       	push	r28
    2a20:	df 93       	push	r29
    2a22:	fb 01       	movw	r30, r22
    2a24:	0f b6       	in	r0, 0x3f	; 63
    2a26:	f8 94       	cli
    2a28:	0f 92       	push	r0
    2a2a:	c0 90 1a 14 	lds	r12, 0x141A	; 0x80141a <xTickCount>
    2a2e:	d0 90 1b 14 	lds	r13, 0x141B	; 0x80141b <xTickCount+0x1>
    2a32:	e0 90 1c 14 	lds	r14, 0x141C	; 0x80141c <xTickCount+0x2>
    2a36:	f0 90 1d 14 	lds	r15, 0x141D	; 0x80141d <xTickCount+0x3>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	11 96       	adiw	r26, 0x01	; 1
    2a3e:	0d 91       	ld	r16, X+
    2a40:	1d 91       	ld	r17, X+
    2a42:	2d 91       	ld	r18, X+
    2a44:	3c 91       	ld	r19, X
    2a46:	14 97       	sbiw	r26, 0x04	; 4
    2a48:	46 01       	movw	r8, r12
    2a4a:	57 01       	movw	r10, r14
    2a4c:	80 1a       	sub	r8, r16
    2a4e:	91 0a       	sbc	r9, r17
    2a50:	a2 0a       	sbc	r10, r18
    2a52:	b3 0a       	sbc	r11, r19
    2a54:	40 81       	ld	r20, Z
    2a56:	51 81       	ldd	r21, Z+1	; 0x01
    2a58:	62 81       	ldd	r22, Z+2	; 0x02
    2a5a:	73 81       	ldd	r23, Z+3	; 0x03
    2a5c:	4f 3f       	cpi	r20, 0xFF	; 255
    2a5e:	bf ef       	ldi	r27, 0xFF	; 255
    2a60:	5b 07       	cpc	r21, r27
    2a62:	6b 07       	cpc	r22, r27
    2a64:	7b 07       	cpc	r23, r27
    2a66:	39 f1       	breq	.+78     	; 0x2ab6 <xTaskCheckForTimeOut+0xac>
    2a68:	ec 01       	movw	r28, r24
    2a6a:	b8 81       	ld	r27, Y
    2a6c:	a0 91 12 14 	lds	r26, 0x1412	; 0x801412 <xNumOfOverflows>
    2a70:	ba 17       	cp	r27, r26
    2a72:	59 f0       	breq	.+22     	; 0x2a8a <xTaskCheckForTimeOut+0x80>
    2a74:	c0 16       	cp	r12, r16
    2a76:	d1 06       	cpc	r13, r17
    2a78:	e2 06       	cpc	r14, r18
    2a7a:	f3 06       	cpc	r15, r19
    2a7c:	30 f0       	brcs	.+12     	; 0x2a8a <xTaskCheckForTimeOut+0x80>
    2a7e:	10 82       	st	Z, r1
    2a80:	11 82       	std	Z+1, r1	; 0x01
    2a82:	12 82       	std	Z+2, r1	; 0x02
    2a84:	13 82       	std	Z+3, r1	; 0x03
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	17 c0       	rjmp	.+46     	; 0x2ab8 <xTaskCheckForTimeOut+0xae>
    2a8a:	84 16       	cp	r8, r20
    2a8c:	95 06       	cpc	r9, r21
    2a8e:	a6 06       	cpc	r10, r22
    2a90:	b7 06       	cpc	r11, r23
    2a92:	58 f4       	brcc	.+22     	; 0x2aaa <xTaskCheckForTimeOut+0xa0>
    2a94:	48 19       	sub	r20, r8
    2a96:	59 09       	sbc	r21, r9
    2a98:	6a 09       	sbc	r22, r10
    2a9a:	7b 09       	sbc	r23, r11
    2a9c:	40 83       	st	Z, r20
    2a9e:	51 83       	std	Z+1, r21	; 0x01
    2aa0:	62 83       	std	Z+2, r22	; 0x02
    2aa2:	73 83       	std	Z+3, r23	; 0x03
    2aa4:	a1 df       	rcall	.-190    	; 0x29e8 <vTaskInternalSetTimeOutState>
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	07 c0       	rjmp	.+14     	; 0x2ab8 <xTaskCheckForTimeOut+0xae>
    2aaa:	10 82       	st	Z, r1
    2aac:	11 82       	std	Z+1, r1	; 0x01
    2aae:	12 82       	std	Z+2, r1	; 0x02
    2ab0:	13 82       	std	Z+3, r1	; 0x03
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	01 c0       	rjmp	.+2      	; 0x2ab8 <xTaskCheckForTimeOut+0xae>
    2ab6:	80 e0       	ldi	r24, 0x00	; 0
    2ab8:	0f 90       	pop	r0
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	df 91       	pop	r29
    2abe:	cf 91       	pop	r28
    2ac0:	1f 91       	pop	r17
    2ac2:	0f 91       	pop	r16
    2ac4:	ff 90       	pop	r15
    2ac6:	ef 90       	pop	r14
    2ac8:	df 90       	pop	r13
    2aca:	cf 90       	pop	r12
    2acc:	bf 90       	pop	r11
    2ace:	af 90       	pop	r10
    2ad0:	9f 90       	pop	r9
    2ad2:	8f 90       	pop	r8
    2ad4:	08 95       	ret

00002ad6 <vTaskMissedYield>:
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	80 93 13 14 	sts	0x1413, r24	; 0x801413 <xYieldPending>
    2adc:	08 95       	ret

00002ade <xTaskGetCurrentTaskHandle>:
    2ade:	80 91 c9 14 	lds	r24, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    2ae2:	90 91 ca 14 	lds	r25, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    2ae6:	08 95       	ret

00002ae8 <xTaskGetSchedulerState>:
    2ae8:	80 91 18 14 	lds	r24, 0x1418	; 0x801418 <xSchedulerRunning>
    2aec:	88 23       	and	r24, r24
    2aee:	31 f0       	breq	.+12     	; 0x2afc <xTaskGetSchedulerState+0x14>
    2af0:	80 91 0a 14 	lds	r24, 0x140A	; 0x80140a <uxSchedulerSuspended>
    2af4:	81 11       	cpse	r24, r1
    2af6:	04 c0       	rjmp	.+8      	; 0x2b00 <xTaskGetSchedulerState+0x18>
    2af8:	82 e0       	ldi	r24, 0x02	; 2
    2afa:	08 95       	ret
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	08 95       	ret
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	08 95       	ret

00002b04 <xTaskPriorityDisinherit>:
    2b04:	0f 93       	push	r16
    2b06:	1f 93       	push	r17
    2b08:	cf 93       	push	r28
    2b0a:	df 93       	push	r29
    2b0c:	fc 01       	movw	r30, r24
    2b0e:	89 2b       	or	r24, r25
    2b10:	09 f4       	brne	.+2      	; 0x2b14 <xTaskPriorityDisinherit+0x10>
    2b12:	49 c0       	rjmp	.+146    	; 0x2ba6 <xTaskPriorityDisinherit+0xa2>
    2b14:	86 a5       	ldd	r24, Z+46	; 0x2e
    2b16:	81 50       	subi	r24, 0x01	; 1
    2b18:	86 a7       	std	Z+46, r24	; 0x2e
    2b1a:	22 8d       	ldd	r18, Z+26	; 0x1a
    2b1c:	95 a5       	ldd	r25, Z+45	; 0x2d
    2b1e:	29 17       	cp	r18, r25
    2b20:	09 f4       	brne	.+2      	; 0x2b24 <xTaskPriorityDisinherit+0x20>
    2b22:	43 c0       	rjmp	.+134    	; 0x2baa <xTaskPriorityDisinherit+0xa6>
    2b24:	81 11       	cpse	r24, r1
    2b26:	43 c0       	rjmp	.+134    	; 0x2bae <xTaskPriorityDisinherit+0xaa>
    2b28:	ef 01       	movw	r28, r30
    2b2a:	8f 01       	movw	r16, r30
    2b2c:	0e 5f       	subi	r16, 0xFE	; 254
    2b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b30:	c8 01       	movw	r24, r16
    2b32:	0e 94 0b 06 	call	0xc16	; 0xc16 <uxListRemove>
    2b36:	ed a5       	ldd	r30, Y+45	; 0x2d
    2b38:	ea 8f       	std	Y+26, r30	; 0x1a
    2b3a:	8a e0       	ldi	r24, 0x0A	; 10
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	a0 e0       	ldi	r26, 0x00	; 0
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	8e 1b       	sub	r24, r30
    2b44:	91 09       	sbc	r25, r1
    2b46:	a1 09       	sbc	r26, r1
    2b48:	b1 09       	sbc	r27, r1
    2b4a:	8e 87       	std	Y+14, r24	; 0x0e
    2b4c:	9f 87       	std	Y+15, r25	; 0x0f
    2b4e:	a8 8b       	std	Y+16, r26	; 0x10
    2b50:	b9 8b       	std	Y+17, r27	; 0x11
    2b52:	80 91 19 14 	lds	r24, 0x1419	; 0x801419 <uxTopReadyPriority>
    2b56:	8e 17       	cp	r24, r30
    2b58:	10 f4       	brcc	.+4      	; 0x2b5e <xTaskPriorityDisinherit+0x5a>
    2b5a:	e0 93 19 14 	sts	0x1419, r30	; 0x801419 <uxTopReadyPriority>
    2b5e:	8b e0       	ldi	r24, 0x0B	; 11
    2b60:	8e 9f       	mul	r24, r30
    2b62:	f0 01       	movw	r30, r0
    2b64:	11 24       	eor	r1, r1
    2b66:	e5 5a       	subi	r30, 0xA5	; 165
    2b68:	fb 4e       	sbci	r31, 0xEB	; 235
    2b6a:	01 80       	ldd	r0, Z+1	; 0x01
    2b6c:	f2 81       	ldd	r31, Z+2	; 0x02
    2b6e:	e0 2d       	mov	r30, r0
    2b70:	ff 83       	std	Y+7, r31	; 0x07
    2b72:	ee 83       	std	Y+6, r30	; 0x06
    2b74:	26 81       	ldd	r18, Z+6	; 0x06
    2b76:	37 81       	ldd	r19, Z+7	; 0x07
    2b78:	39 87       	std	Y+9, r19	; 0x09
    2b7a:	28 87       	std	Y+8, r18	; 0x08
    2b7c:	a6 81       	ldd	r26, Z+6	; 0x06
    2b7e:	b7 81       	ldd	r27, Z+7	; 0x07
    2b80:	15 96       	adiw	r26, 0x05	; 5
    2b82:	1c 93       	st	X, r17
    2b84:	0e 93       	st	-X, r16
    2b86:	14 97       	sbiw	r26, 0x04	; 4
    2b88:	17 83       	std	Z+7, r17	; 0x07
    2b8a:	06 83       	std	Z+6, r16	; 0x06
    2b8c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2b8e:	8e 9f       	mul	r24, r30
    2b90:	f0 01       	movw	r30, r0
    2b92:	11 24       	eor	r1, r1
    2b94:	e5 5a       	subi	r30, 0xA5	; 165
    2b96:	fb 4e       	sbci	r31, 0xEB	; 235
    2b98:	fd 87       	std	Y+13, r31	; 0x0d
    2b9a:	ec 87       	std	Y+12, r30	; 0x0c
    2b9c:	80 81       	ld	r24, Z
    2b9e:	8f 5f       	subi	r24, 0xFF	; 255
    2ba0:	80 83       	st	Z, r24
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	05 c0       	rjmp	.+10     	; 0x2bb0 <xTaskPriorityDisinherit+0xac>
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	03 c0       	rjmp	.+6      	; 0x2bb0 <xTaskPriorityDisinherit+0xac>
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	01 c0       	rjmp	.+2      	; 0x2bb0 <xTaskPriorityDisinherit+0xac>
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	df 91       	pop	r29
    2bb2:	cf 91       	pop	r28
    2bb4:	1f 91       	pop	r17
    2bb6:	0f 91       	pop	r16
    2bb8:	08 95       	ret

00002bba <uxTaskResetEventItemValue>:
    2bba:	cf 92       	push	r12
    2bbc:	df 92       	push	r13
    2bbe:	ef 92       	push	r14
    2bc0:	ff 92       	push	r15
    2bc2:	e0 91 c9 14 	lds	r30, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    2bc6:	f0 91 ca 14 	lds	r31, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    2bca:	66 85       	ldd	r22, Z+14	; 0x0e
    2bcc:	77 85       	ldd	r23, Z+15	; 0x0f
    2bce:	80 89       	ldd	r24, Z+16	; 0x10
    2bd0:	91 89       	ldd	r25, Z+17	; 0x11
    2bd2:	e0 91 c9 14 	lds	r30, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    2bd6:	f0 91 ca 14 	lds	r31, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    2bda:	a0 91 c9 14 	lds	r26, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    2bde:	b0 91 ca 14 	lds	r27, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    2be2:	5a 96       	adiw	r26, 0x1a	; 26
    2be4:	2c 91       	ld	r18, X
    2be6:	0f 2e       	mov	r0, r31
    2be8:	fa e0       	ldi	r31, 0x0A	; 10
    2bea:	cf 2e       	mov	r12, r31
    2bec:	d1 2c       	mov	r13, r1
    2bee:	e1 2c       	mov	r14, r1
    2bf0:	f1 2c       	mov	r15, r1
    2bf2:	f0 2d       	mov	r31, r0
    2bf4:	c2 1a       	sub	r12, r18
    2bf6:	d1 08       	sbc	r13, r1
    2bf8:	e1 08       	sbc	r14, r1
    2bfa:	f1 08       	sbc	r15, r1
    2bfc:	c6 86       	std	Z+14, r12	; 0x0e
    2bfe:	d7 86       	std	Z+15, r13	; 0x0f
    2c00:	e0 8a       	std	Z+16, r14	; 0x10
    2c02:	f1 8a       	std	Z+17, r15	; 0x11
    2c04:	ff 90       	pop	r15
    2c06:	ef 90       	pop	r14
    2c08:	df 90       	pop	r13
    2c0a:	cf 90       	pop	r12
    2c0c:	08 95       	ret

00002c0e <xTaskGenericNotifyWait>:
    2c0e:	4f 92       	push	r4
    2c10:	5f 92       	push	r5
    2c12:	6f 92       	push	r6
    2c14:	7f 92       	push	r7
    2c16:	af 92       	push	r10
    2c18:	bf 92       	push	r11
    2c1a:	cf 92       	push	r12
    2c1c:	df 92       	push	r13
    2c1e:	ef 92       	push	r14
    2c20:	ff 92       	push	r15
    2c22:	0f 93       	push	r16
    2c24:	1f 93       	push	r17
    2c26:	cf 93       	push	r28
    2c28:	df 93       	push	r29
    2c2a:	28 01       	movw	r4, r16
    2c2c:	39 01       	movw	r6, r18
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	f8 94       	cli
    2c32:	0f 92       	push	r0
    2c34:	e0 91 c9 14 	lds	r30, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    2c38:	f0 91 ca 14 	lds	r31, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    2c3c:	c8 2f       	mov	r28, r24
    2c3e:	d0 e0       	ldi	r29, 0x00	; 0
    2c40:	ec 0f       	add	r30, r28
    2c42:	fd 1f       	adc	r31, r29
    2c44:	83 a9       	ldd	r24, Z+51	; 0x33
    2c46:	82 30       	cpi	r24, 0x02	; 2
    2c48:	71 f1       	breq	.+92     	; 0x2ca6 <xTaskGenericNotifyWait+0x98>
    2c4a:	e0 91 c9 14 	lds	r30, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    2c4e:	f0 91 ca 14 	lds	r31, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    2c52:	ce 01       	movw	r24, r28
    2c54:	88 0f       	add	r24, r24
    2c56:	99 1f       	adc	r25, r25
    2c58:	88 0f       	add	r24, r24
    2c5a:	99 1f       	adc	r25, r25
    2c5c:	e8 0f       	add	r30, r24
    2c5e:	f9 1f       	adc	r31, r25
    2c60:	87 a5       	ldd	r24, Z+47	; 0x2f
    2c62:	90 a9       	ldd	r25, Z+48	; 0x30
    2c64:	a1 a9       	ldd	r26, Z+49	; 0x31
    2c66:	b2 a9       	ldd	r27, Z+50	; 0x32
    2c68:	40 95       	com	r20
    2c6a:	50 95       	com	r21
    2c6c:	60 95       	com	r22
    2c6e:	70 95       	com	r23
    2c70:	48 23       	and	r20, r24
    2c72:	59 23       	and	r21, r25
    2c74:	6a 23       	and	r22, r26
    2c76:	7b 23       	and	r23, r27
    2c78:	47 a7       	std	Z+47, r20	; 0x2f
    2c7a:	50 ab       	std	Z+48, r21	; 0x30
    2c7c:	61 ab       	std	Z+49, r22	; 0x31
    2c7e:	72 ab       	std	Z+50, r23	; 0x32
    2c80:	e0 91 c9 14 	lds	r30, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    2c84:	f0 91 ca 14 	lds	r31, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    2c88:	ec 0f       	add	r30, r28
    2c8a:	fd 1f       	adc	r31, r29
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	83 ab       	std	Z+51, r24	; 0x33
    2c90:	a1 14       	cp	r10, r1
    2c92:	b1 04       	cpc	r11, r1
    2c94:	c1 04       	cpc	r12, r1
    2c96:	d1 04       	cpc	r13, r1
    2c98:	31 f0       	breq	.+12     	; 0x2ca6 <xTaskGenericNotifyWait+0x98>
    2c9a:	41 e0       	ldi	r20, 0x01	; 1
    2c9c:	c6 01       	movw	r24, r12
    2c9e:	b5 01       	movw	r22, r10
    2ca0:	7a d8       	rcall	.-3852   	; 0x1d96 <prvAddCurrentTaskToDelayedList>
    2ca2:	0e 94 87 06 	call	0xd0e	; 0xd0e <vPortYield>
    2ca6:	0f 90       	pop	r0
    2ca8:	0f be       	out	0x3f, r0	; 63
    2caa:	0f b6       	in	r0, 0x3f	; 63
    2cac:	f8 94       	cli
    2cae:	0f 92       	push	r0
    2cb0:	e1 14       	cp	r14, r1
    2cb2:	f1 04       	cpc	r15, r1
    2cb4:	a1 f0       	breq	.+40     	; 0x2cde <xTaskGenericNotifyWait+0xd0>
    2cb6:	e0 91 c9 14 	lds	r30, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    2cba:	f0 91 ca 14 	lds	r31, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    2cbe:	ce 01       	movw	r24, r28
    2cc0:	88 0f       	add	r24, r24
    2cc2:	99 1f       	adc	r25, r25
    2cc4:	88 0f       	add	r24, r24
    2cc6:	99 1f       	adc	r25, r25
    2cc8:	e8 0f       	add	r30, r24
    2cca:	f9 1f       	adc	r31, r25
    2ccc:	87 a5       	ldd	r24, Z+47	; 0x2f
    2cce:	90 a9       	ldd	r25, Z+48	; 0x30
    2cd0:	a1 a9       	ldd	r26, Z+49	; 0x31
    2cd2:	b2 a9       	ldd	r27, Z+50	; 0x32
    2cd4:	f7 01       	movw	r30, r14
    2cd6:	80 83       	st	Z, r24
    2cd8:	91 83       	std	Z+1, r25	; 0x01
    2cda:	a2 83       	std	Z+2, r26	; 0x02
    2cdc:	b3 83       	std	Z+3, r27	; 0x03
    2cde:	e0 91 c9 14 	lds	r30, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    2ce2:	f0 91 ca 14 	lds	r31, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    2ce6:	ec 0f       	add	r30, r28
    2ce8:	fd 1f       	adc	r31, r29
    2cea:	83 a9       	ldd	r24, Z+51	; 0x33
    2cec:	82 30       	cpi	r24, 0x02	; 2
    2cee:	e9 f4       	brne	.+58     	; 0x2d2a <xTaskGenericNotifyWait+0x11c>
    2cf0:	e0 91 c9 14 	lds	r30, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    2cf4:	f0 91 ca 14 	lds	r31, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    2cf8:	ce 01       	movw	r24, r28
    2cfa:	88 0f       	add	r24, r24
    2cfc:	99 1f       	adc	r25, r25
    2cfe:	88 0f       	add	r24, r24
    2d00:	99 1f       	adc	r25, r25
    2d02:	e8 0f       	add	r30, r24
    2d04:	f9 1f       	adc	r31, r25
    2d06:	87 a5       	ldd	r24, Z+47	; 0x2f
    2d08:	90 a9       	ldd	r25, Z+48	; 0x30
    2d0a:	a1 a9       	ldd	r26, Z+49	; 0x31
    2d0c:	b2 a9       	ldd	r27, Z+50	; 0x32
    2d0e:	40 94       	com	r4
    2d10:	50 94       	com	r5
    2d12:	60 94       	com	r6
    2d14:	70 94       	com	r7
    2d16:	48 22       	and	r4, r24
    2d18:	59 22       	and	r5, r25
    2d1a:	6a 22       	and	r6, r26
    2d1c:	7b 22       	and	r7, r27
    2d1e:	47 a6       	std	Z+47, r4	; 0x2f
    2d20:	50 aa       	std	Z+48, r5	; 0x30
    2d22:	61 aa       	std	Z+49, r6	; 0x31
    2d24:	72 aa       	std	Z+50, r7	; 0x32
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	01 c0       	rjmp	.+2      	; 0x2d2c <xTaskGenericNotifyWait+0x11e>
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
    2d2c:	20 91 c9 14 	lds	r18, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    2d30:	30 91 ca 14 	lds	r19, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    2d34:	c2 0f       	add	r28, r18
    2d36:	d3 1f       	adc	r29, r19
    2d38:	1b aa       	std	Y+51, r1	; 0x33
    2d3a:	0f 90       	pop	r0
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	df 91       	pop	r29
    2d40:	cf 91       	pop	r28
    2d42:	1f 91       	pop	r17
    2d44:	0f 91       	pop	r16
    2d46:	ff 90       	pop	r15
    2d48:	ef 90       	pop	r14
    2d4a:	df 90       	pop	r13
    2d4c:	cf 90       	pop	r12
    2d4e:	bf 90       	pop	r11
    2d50:	af 90       	pop	r10
    2d52:	7f 90       	pop	r7
    2d54:	6f 90       	pop	r6
    2d56:	5f 90       	pop	r5
    2d58:	4f 90       	pop	r4
    2d5a:	08 95       	ret

00002d5c <xTaskGenericNotify>:
    2d5c:	8f 92       	push	r8
    2d5e:	9f 92       	push	r9
    2d60:	af 92       	push	r10
    2d62:	bf 92       	push	r11
    2d64:	ef 92       	push	r14
    2d66:	ff 92       	push	r15
    2d68:	0f 93       	push	r16
    2d6a:	cf 93       	push	r28
    2d6c:	df 93       	push	r29
    2d6e:	dc 01       	movw	r26, r24
    2d70:	0f b6       	in	r0, 0x3f	; 63
    2d72:	f8 94       	cli
    2d74:	0f 92       	push	r0
    2d76:	e1 14       	cp	r14, r1
    2d78:	f1 04       	cpc	r15, r1
    2d7a:	89 f0       	breq	.+34     	; 0x2d9e <xTaskGenericNotify+0x42>
    2d7c:	e6 2f       	mov	r30, r22
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	ee 0f       	add	r30, r30
    2d82:	ff 1f       	adc	r31, r31
    2d84:	ee 0f       	add	r30, r30
    2d86:	ff 1f       	adc	r31, r31
    2d88:	e8 0f       	add	r30, r24
    2d8a:	f9 1f       	adc	r31, r25
    2d8c:	87 a4       	ldd	r8, Z+47	; 0x2f
    2d8e:	90 a8       	ldd	r9, Z+48	; 0x30
    2d90:	a1 a8       	ldd	r10, Z+49	; 0x31
    2d92:	b2 a8       	ldd	r11, Z+50	; 0x32
    2d94:	f7 01       	movw	r30, r14
    2d96:	80 82       	st	Z, r8
    2d98:	91 82       	std	Z+1, r9	; 0x01
    2d9a:	a2 82       	std	Z+2, r10	; 0x02
    2d9c:	b3 82       	std	Z+3, r11	; 0x03
    2d9e:	70 e0       	ldi	r23, 0x00	; 0
    2da0:	fd 01       	movw	r30, r26
    2da2:	e6 0f       	add	r30, r22
    2da4:	f7 1f       	adc	r31, r23
    2da6:	83 a9       	ldd	r24, Z+51	; 0x33
    2da8:	92 e0       	ldi	r25, 0x02	; 2
    2daa:	93 ab       	std	Z+51, r25	; 0x33
    2dac:	02 30       	cpi	r16, 0x02	; 2
    2dae:	01 f1       	breq	.+64     	; 0x2df0 <xTaskGenericNotify+0x94>
    2db0:	18 f4       	brcc	.+6      	; 0x2db8 <xTaskGenericNotify+0x5c>
    2db2:	01 30       	cpi	r16, 0x01	; 1
    2db4:	31 f0       	breq	.+12     	; 0x2dc2 <xTaskGenericNotify+0x66>
    2db6:	4d c0       	rjmp	.+154    	; 0x2e52 <xTaskGenericNotify+0xf6>
    2db8:	03 30       	cpi	r16, 0x03	; 3
    2dba:	79 f1       	breq	.+94     	; 0x2e1a <xTaskGenericNotify+0xbe>
    2dbc:	04 30       	cpi	r16, 0x04	; 4
    2dbe:	d1 f1       	breq	.+116    	; 0x2e34 <xTaskGenericNotify+0xd8>
    2dc0:	48 c0       	rjmp	.+144    	; 0x2e52 <xTaskGenericNotify+0xf6>
    2dc2:	66 0f       	add	r22, r22
    2dc4:	77 1f       	adc	r23, r23
    2dc6:	66 0f       	add	r22, r22
    2dc8:	77 1f       	adc	r23, r23
    2dca:	fd 01       	movw	r30, r26
    2dcc:	e6 0f       	add	r30, r22
    2dce:	f7 1f       	adc	r31, r23
    2dd0:	87 a4       	ldd	r8, Z+47	; 0x2f
    2dd2:	90 a8       	ldd	r9, Z+48	; 0x30
    2dd4:	a1 a8       	ldd	r10, Z+49	; 0x31
    2dd6:	b2 a8       	ldd	r11, Z+50	; 0x32
    2dd8:	ba 01       	movw	r22, r20
    2dda:	a9 01       	movw	r20, r18
    2ddc:	48 29       	or	r20, r8
    2dde:	59 29       	or	r21, r9
    2de0:	6a 29       	or	r22, r10
    2de2:	7b 29       	or	r23, r11
    2de4:	47 a7       	std	Z+47, r20	; 0x2f
    2de6:	50 ab       	std	Z+48, r21	; 0x30
    2de8:	61 ab       	std	Z+49, r22	; 0x31
    2dea:	72 ab       	std	Z+50, r23	; 0x32
    2dec:	01 e0       	ldi	r16, 0x01	; 1
    2dee:	34 c0       	rjmp	.+104    	; 0x2e58 <xTaskGenericNotify+0xfc>
    2df0:	66 0f       	add	r22, r22
    2df2:	77 1f       	adc	r23, r23
    2df4:	66 0f       	add	r22, r22
    2df6:	77 1f       	adc	r23, r23
    2df8:	fd 01       	movw	r30, r26
    2dfa:	e6 0f       	add	r30, r22
    2dfc:	f7 1f       	adc	r31, r23
    2dfe:	47 a5       	ldd	r20, Z+47	; 0x2f
    2e00:	50 a9       	ldd	r21, Z+48	; 0x30
    2e02:	61 a9       	ldd	r22, Z+49	; 0x31
    2e04:	72 a9       	ldd	r23, Z+50	; 0x32
    2e06:	4f 5f       	subi	r20, 0xFF	; 255
    2e08:	5f 4f       	sbci	r21, 0xFF	; 255
    2e0a:	6f 4f       	sbci	r22, 0xFF	; 255
    2e0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e0e:	47 a7       	std	Z+47, r20	; 0x2f
    2e10:	50 ab       	std	Z+48, r21	; 0x30
    2e12:	61 ab       	std	Z+49, r22	; 0x31
    2e14:	72 ab       	std	Z+50, r23	; 0x32
    2e16:	01 e0       	ldi	r16, 0x01	; 1
    2e18:	1f c0       	rjmp	.+62     	; 0x2e58 <xTaskGenericNotify+0xfc>
    2e1a:	66 0f       	add	r22, r22
    2e1c:	77 1f       	adc	r23, r23
    2e1e:	66 0f       	add	r22, r22
    2e20:	77 1f       	adc	r23, r23
    2e22:	fd 01       	movw	r30, r26
    2e24:	e6 0f       	add	r30, r22
    2e26:	f7 1f       	adc	r31, r23
    2e28:	27 a7       	std	Z+47, r18	; 0x2f
    2e2a:	30 ab       	std	Z+48, r19	; 0x30
    2e2c:	41 ab       	std	Z+49, r20	; 0x31
    2e2e:	52 ab       	std	Z+50, r21	; 0x32
    2e30:	01 e0       	ldi	r16, 0x01	; 1
    2e32:	12 c0       	rjmp	.+36     	; 0x2e58 <xTaskGenericNotify+0xfc>
    2e34:	82 30       	cpi	r24, 0x02	; 2
    2e36:	79 f0       	breq	.+30     	; 0x2e56 <xTaskGenericNotify+0xfa>
    2e38:	66 0f       	add	r22, r22
    2e3a:	77 1f       	adc	r23, r23
    2e3c:	66 0f       	add	r22, r22
    2e3e:	77 1f       	adc	r23, r23
    2e40:	fd 01       	movw	r30, r26
    2e42:	e6 0f       	add	r30, r22
    2e44:	f7 1f       	adc	r31, r23
    2e46:	27 a7       	std	Z+47, r18	; 0x2f
    2e48:	30 ab       	std	Z+48, r19	; 0x30
    2e4a:	41 ab       	std	Z+49, r20	; 0x31
    2e4c:	52 ab       	std	Z+50, r21	; 0x32
    2e4e:	01 e0       	ldi	r16, 0x01	; 1
    2e50:	03 c0       	rjmp	.+6      	; 0x2e58 <xTaskGenericNotify+0xfc>
    2e52:	01 e0       	ldi	r16, 0x01	; 1
    2e54:	01 c0       	rjmp	.+2      	; 0x2e58 <xTaskGenericNotify+0xfc>
    2e56:	00 e0       	ldi	r16, 0x00	; 0
    2e58:	81 30       	cpi	r24, 0x01	; 1
    2e5a:	09 f0       	breq	.+2      	; 0x2e5e <xTaskGenericNotify+0x102>
    2e5c:	69 c0       	rjmp	.+210    	; 0x2f30 <xTaskGenericNotify+0x1d4>
    2e5e:	1c 96       	adiw	r26, 0x0c	; 12
    2e60:	ed 91       	ld	r30, X+
    2e62:	fc 91       	ld	r31, X
    2e64:	1d 97       	sbiw	r26, 0x0d	; 13
    2e66:	16 96       	adiw	r26, 0x06	; 6
    2e68:	cd 91       	ld	r28, X+
    2e6a:	dc 91       	ld	r29, X
    2e6c:	17 97       	sbiw	r26, 0x07	; 7
    2e6e:	18 96       	adiw	r26, 0x08	; 8
    2e70:	8d 91       	ld	r24, X+
    2e72:	9c 91       	ld	r25, X
    2e74:	19 97       	sbiw	r26, 0x09	; 9
    2e76:	9f 83       	std	Y+7, r25	; 0x07
    2e78:	8e 83       	std	Y+6, r24	; 0x06
    2e7a:	18 96       	adiw	r26, 0x08	; 8
    2e7c:	cd 91       	ld	r28, X+
    2e7e:	dc 91       	ld	r29, X
    2e80:	19 97       	sbiw	r26, 0x09	; 9
    2e82:	16 96       	adiw	r26, 0x06	; 6
    2e84:	8d 91       	ld	r24, X+
    2e86:	9c 91       	ld	r25, X
    2e88:	17 97       	sbiw	r26, 0x07	; 7
    2e8a:	9d 83       	std	Y+5, r25	; 0x05
    2e8c:	8c 83       	std	Y+4, r24	; 0x04
    2e8e:	81 81       	ldd	r24, Z+1	; 0x01
    2e90:	92 81       	ldd	r25, Z+2	; 0x02
    2e92:	9d 01       	movw	r18, r26
    2e94:	2e 5f       	subi	r18, 0xFE	; 254
    2e96:	3f 4f       	sbci	r19, 0xFF	; 255
    2e98:	82 17       	cp	r24, r18
    2e9a:	93 07       	cpc	r25, r19
    2e9c:	31 f4       	brne	.+12     	; 0x2eaa <xTaskGenericNotify+0x14e>
    2e9e:	18 96       	adiw	r26, 0x08	; 8
    2ea0:	8d 91       	ld	r24, X+
    2ea2:	9c 91       	ld	r25, X
    2ea4:	19 97       	sbiw	r26, 0x09	; 9
    2ea6:	92 83       	std	Z+2, r25	; 0x02
    2ea8:	81 83       	std	Z+1, r24	; 0x01
    2eaa:	1d 96       	adiw	r26, 0x0d	; 13
    2eac:	1c 92       	st	X, r1
    2eae:	1e 92       	st	-X, r1
    2eb0:	1c 97       	sbiw	r26, 0x0c	; 12
    2eb2:	80 81       	ld	r24, Z
    2eb4:	81 50       	subi	r24, 0x01	; 1
    2eb6:	80 83       	st	Z, r24
    2eb8:	5a 96       	adiw	r26, 0x1a	; 26
    2eba:	ec 91       	ld	r30, X
    2ebc:	5a 97       	sbiw	r26, 0x1a	; 26
    2ebe:	80 91 19 14 	lds	r24, 0x1419	; 0x801419 <uxTopReadyPriority>
    2ec2:	8e 17       	cp	r24, r30
    2ec4:	10 f4       	brcc	.+4      	; 0x2eca <xTaskGenericNotify+0x16e>
    2ec6:	e0 93 19 14 	sts	0x1419, r30	; 0x801419 <uxTopReadyPriority>
    2eca:	8b e0       	ldi	r24, 0x0B	; 11
    2ecc:	8e 9f       	mul	r24, r30
    2ece:	f0 01       	movw	r30, r0
    2ed0:	11 24       	eor	r1, r1
    2ed2:	e5 5a       	subi	r30, 0xA5	; 165
    2ed4:	fb 4e       	sbci	r31, 0xEB	; 235
    2ed6:	01 80       	ldd	r0, Z+1	; 0x01
    2ed8:	f2 81       	ldd	r31, Z+2	; 0x02
    2eda:	e0 2d       	mov	r30, r0
    2edc:	17 96       	adiw	r26, 0x07	; 7
    2ede:	fc 93       	st	X, r31
    2ee0:	ee 93       	st	-X, r30
    2ee2:	16 97       	sbiw	r26, 0x06	; 6
    2ee4:	46 81       	ldd	r20, Z+6	; 0x06
    2ee6:	57 81       	ldd	r21, Z+7	; 0x07
    2ee8:	19 96       	adiw	r26, 0x09	; 9
    2eea:	5c 93       	st	X, r21
    2eec:	4e 93       	st	-X, r20
    2eee:	18 97       	sbiw	r26, 0x08	; 8
    2ef0:	c6 81       	ldd	r28, Z+6	; 0x06
    2ef2:	d7 81       	ldd	r29, Z+7	; 0x07
    2ef4:	3d 83       	std	Y+5, r19	; 0x05
    2ef6:	2c 83       	std	Y+4, r18	; 0x04
    2ef8:	37 83       	std	Z+7, r19	; 0x07
    2efa:	26 83       	std	Z+6, r18	; 0x06
    2efc:	5a 96       	adiw	r26, 0x1a	; 26
    2efe:	ec 91       	ld	r30, X
    2f00:	5a 97       	sbiw	r26, 0x1a	; 26
    2f02:	8e 9f       	mul	r24, r30
    2f04:	f0 01       	movw	r30, r0
    2f06:	11 24       	eor	r1, r1
    2f08:	e5 5a       	subi	r30, 0xA5	; 165
    2f0a:	fb 4e       	sbci	r31, 0xEB	; 235
    2f0c:	1d 96       	adiw	r26, 0x0d	; 13
    2f0e:	fc 93       	st	X, r31
    2f10:	ee 93       	st	-X, r30
    2f12:	1c 97       	sbiw	r26, 0x0c	; 12
    2f14:	80 81       	ld	r24, Z
    2f16:	8f 5f       	subi	r24, 0xFF	; 255
    2f18:	80 83       	st	Z, r24
    2f1a:	5a 96       	adiw	r26, 0x1a	; 26
    2f1c:	9c 91       	ld	r25, X
    2f1e:	e0 91 c9 14 	lds	r30, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    2f22:	f0 91 ca 14 	lds	r31, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    2f26:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f28:	89 17       	cp	r24, r25
    2f2a:	10 f4       	brcc	.+4      	; 0x2f30 <xTaskGenericNotify+0x1d4>
    2f2c:	0e 94 87 06 	call	0xd0e	; 0xd0e <vPortYield>
    2f30:	0f 90       	pop	r0
    2f32:	0f be       	out	0x3f, r0	; 63
    2f34:	80 2f       	mov	r24, r16
    2f36:	df 91       	pop	r29
    2f38:	cf 91       	pop	r28
    2f3a:	0f 91       	pop	r16
    2f3c:	ff 90       	pop	r15
    2f3e:	ef 90       	pop	r14
    2f40:	bf 90       	pop	r11
    2f42:	af 90       	pop	r10
    2f44:	9f 90       	pop	r9
    2f46:	8f 90       	pop	r8
    2f48:	08 95       	ret

00002f4a <xTaskGenericNotifyFromISR>:
    2f4a:	8f 92       	push	r8
    2f4c:	9f 92       	push	r9
    2f4e:	af 92       	push	r10
    2f50:	bf 92       	push	r11
    2f52:	cf 92       	push	r12
    2f54:	df 92       	push	r13
    2f56:	ef 92       	push	r14
    2f58:	ff 92       	push	r15
    2f5a:	0f 93       	push	r16
    2f5c:	cf 93       	push	r28
    2f5e:	df 93       	push	r29
    2f60:	dc 01       	movw	r26, r24
    2f62:	e1 14       	cp	r14, r1
    2f64:	f1 04       	cpc	r15, r1
    2f66:	89 f0       	breq	.+34     	; 0x2f8a <xTaskGenericNotifyFromISR+0x40>
    2f68:	e6 2f       	mov	r30, r22
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	ee 0f       	add	r30, r30
    2f6e:	ff 1f       	adc	r31, r31
    2f70:	ee 0f       	add	r30, r30
    2f72:	ff 1f       	adc	r31, r31
    2f74:	e8 0f       	add	r30, r24
    2f76:	f9 1f       	adc	r31, r25
    2f78:	87 a4       	ldd	r8, Z+47	; 0x2f
    2f7a:	90 a8       	ldd	r9, Z+48	; 0x30
    2f7c:	a1 a8       	ldd	r10, Z+49	; 0x31
    2f7e:	b2 a8       	ldd	r11, Z+50	; 0x32
    2f80:	f7 01       	movw	r30, r14
    2f82:	80 82       	st	Z, r8
    2f84:	91 82       	std	Z+1, r9	; 0x01
    2f86:	a2 82       	std	Z+2, r10	; 0x02
    2f88:	b3 82       	std	Z+3, r11	; 0x03
    2f8a:	70 e0       	ldi	r23, 0x00	; 0
    2f8c:	fd 01       	movw	r30, r26
    2f8e:	e6 0f       	add	r30, r22
    2f90:	f7 1f       	adc	r31, r23
    2f92:	93 a9       	ldd	r25, Z+51	; 0x33
    2f94:	82 e0       	ldi	r24, 0x02	; 2
    2f96:	83 ab       	std	Z+51, r24	; 0x33
    2f98:	02 30       	cpi	r16, 0x02	; 2
    2f9a:	01 f1       	breq	.+64     	; 0x2fdc <xTaskGenericNotifyFromISR+0x92>
    2f9c:	18 f4       	brcc	.+6      	; 0x2fa4 <xTaskGenericNotifyFromISR+0x5a>
    2f9e:	01 30       	cpi	r16, 0x01	; 1
    2fa0:	31 f0       	breq	.+12     	; 0x2fae <xTaskGenericNotifyFromISR+0x64>
    2fa2:	4d c0       	rjmp	.+154    	; 0x303e <xTaskGenericNotifyFromISR+0xf4>
    2fa4:	03 30       	cpi	r16, 0x03	; 3
    2fa6:	79 f1       	breq	.+94     	; 0x3006 <xTaskGenericNotifyFromISR+0xbc>
    2fa8:	04 30       	cpi	r16, 0x04	; 4
    2faa:	d1 f1       	breq	.+116    	; 0x3020 <xTaskGenericNotifyFromISR+0xd6>
    2fac:	48 c0       	rjmp	.+144    	; 0x303e <xTaskGenericNotifyFromISR+0xf4>
    2fae:	66 0f       	add	r22, r22
    2fb0:	77 1f       	adc	r23, r23
    2fb2:	66 0f       	add	r22, r22
    2fb4:	77 1f       	adc	r23, r23
    2fb6:	fd 01       	movw	r30, r26
    2fb8:	e6 0f       	add	r30, r22
    2fba:	f7 1f       	adc	r31, r23
    2fbc:	87 a4       	ldd	r8, Z+47	; 0x2f
    2fbe:	90 a8       	ldd	r9, Z+48	; 0x30
    2fc0:	a1 a8       	ldd	r10, Z+49	; 0x31
    2fc2:	b2 a8       	ldd	r11, Z+50	; 0x32
    2fc4:	ba 01       	movw	r22, r20
    2fc6:	a9 01       	movw	r20, r18
    2fc8:	48 29       	or	r20, r8
    2fca:	59 29       	or	r21, r9
    2fcc:	6a 29       	or	r22, r10
    2fce:	7b 29       	or	r23, r11
    2fd0:	47 a7       	std	Z+47, r20	; 0x2f
    2fd2:	50 ab       	std	Z+48, r21	; 0x30
    2fd4:	61 ab       	std	Z+49, r22	; 0x31
    2fd6:	72 ab       	std	Z+50, r23	; 0x32
    2fd8:	81 e0       	ldi	r24, 0x01	; 1
    2fda:	34 c0       	rjmp	.+104    	; 0x3044 <xTaskGenericNotifyFromISR+0xfa>
    2fdc:	66 0f       	add	r22, r22
    2fde:	77 1f       	adc	r23, r23
    2fe0:	66 0f       	add	r22, r22
    2fe2:	77 1f       	adc	r23, r23
    2fe4:	fd 01       	movw	r30, r26
    2fe6:	e6 0f       	add	r30, r22
    2fe8:	f7 1f       	adc	r31, r23
    2fea:	47 a5       	ldd	r20, Z+47	; 0x2f
    2fec:	50 a9       	ldd	r21, Z+48	; 0x30
    2fee:	61 a9       	ldd	r22, Z+49	; 0x31
    2ff0:	72 a9       	ldd	r23, Z+50	; 0x32
    2ff2:	4f 5f       	subi	r20, 0xFF	; 255
    2ff4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ff6:	6f 4f       	sbci	r22, 0xFF	; 255
    2ff8:	7f 4f       	sbci	r23, 0xFF	; 255
    2ffa:	47 a7       	std	Z+47, r20	; 0x2f
    2ffc:	50 ab       	std	Z+48, r21	; 0x30
    2ffe:	61 ab       	std	Z+49, r22	; 0x31
    3000:	72 ab       	std	Z+50, r23	; 0x32
    3002:	81 e0       	ldi	r24, 0x01	; 1
    3004:	1f c0       	rjmp	.+62     	; 0x3044 <xTaskGenericNotifyFromISR+0xfa>
    3006:	66 0f       	add	r22, r22
    3008:	77 1f       	adc	r23, r23
    300a:	66 0f       	add	r22, r22
    300c:	77 1f       	adc	r23, r23
    300e:	fd 01       	movw	r30, r26
    3010:	e6 0f       	add	r30, r22
    3012:	f7 1f       	adc	r31, r23
    3014:	27 a7       	std	Z+47, r18	; 0x2f
    3016:	30 ab       	std	Z+48, r19	; 0x30
    3018:	41 ab       	std	Z+49, r20	; 0x31
    301a:	52 ab       	std	Z+50, r21	; 0x32
    301c:	81 e0       	ldi	r24, 0x01	; 1
    301e:	12 c0       	rjmp	.+36     	; 0x3044 <xTaskGenericNotifyFromISR+0xfa>
    3020:	92 30       	cpi	r25, 0x02	; 2
    3022:	79 f0       	breq	.+30     	; 0x3042 <xTaskGenericNotifyFromISR+0xf8>
    3024:	66 0f       	add	r22, r22
    3026:	77 1f       	adc	r23, r23
    3028:	66 0f       	add	r22, r22
    302a:	77 1f       	adc	r23, r23
    302c:	fd 01       	movw	r30, r26
    302e:	e6 0f       	add	r30, r22
    3030:	f7 1f       	adc	r31, r23
    3032:	27 a7       	std	Z+47, r18	; 0x2f
    3034:	30 ab       	std	Z+48, r19	; 0x30
    3036:	41 ab       	std	Z+49, r20	; 0x31
    3038:	52 ab       	std	Z+50, r21	; 0x32
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	03 c0       	rjmp	.+6      	; 0x3044 <xTaskGenericNotifyFromISR+0xfa>
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	01 c0       	rjmp	.+2      	; 0x3044 <xTaskGenericNotifyFromISR+0xfa>
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	91 30       	cpi	r25, 0x01	; 1
    3046:	09 f0       	breq	.+2      	; 0x304a <xTaskGenericNotifyFromISR+0x100>
    3048:	96 c0       	rjmp	.+300    	; 0x3176 <xTaskGenericNotifyFromISR+0x22c>
    304a:	90 91 0a 14 	lds	r25, 0x140A	; 0x80140a <uxSchedulerSuspended>
    304e:	91 11       	cpse	r25, r1
    3050:	5f c0       	rjmp	.+190    	; 0x3110 <xTaskGenericNotifyFromISR+0x1c6>
    3052:	1c 96       	adiw	r26, 0x0c	; 12
    3054:	ed 91       	ld	r30, X+
    3056:	fc 91       	ld	r31, X
    3058:	1d 97       	sbiw	r26, 0x0d	; 13
    305a:	16 96       	adiw	r26, 0x06	; 6
    305c:	cd 91       	ld	r28, X+
    305e:	dc 91       	ld	r29, X
    3060:	17 97       	sbiw	r26, 0x07	; 7
    3062:	18 96       	adiw	r26, 0x08	; 8
    3064:	2d 91       	ld	r18, X+
    3066:	3c 91       	ld	r19, X
    3068:	19 97       	sbiw	r26, 0x09	; 9
    306a:	3f 83       	std	Y+7, r19	; 0x07
    306c:	2e 83       	std	Y+6, r18	; 0x06
    306e:	18 96       	adiw	r26, 0x08	; 8
    3070:	cd 91       	ld	r28, X+
    3072:	dc 91       	ld	r29, X
    3074:	19 97       	sbiw	r26, 0x09	; 9
    3076:	16 96       	adiw	r26, 0x06	; 6
    3078:	2d 91       	ld	r18, X+
    307a:	3c 91       	ld	r19, X
    307c:	17 97       	sbiw	r26, 0x07	; 7
    307e:	3d 83       	std	Y+5, r19	; 0x05
    3080:	2c 83       	std	Y+4, r18	; 0x04
    3082:	41 81       	ldd	r20, Z+1	; 0x01
    3084:	52 81       	ldd	r21, Z+2	; 0x02
    3086:	9d 01       	movw	r18, r26
    3088:	2e 5f       	subi	r18, 0xFE	; 254
    308a:	3f 4f       	sbci	r19, 0xFF	; 255
    308c:	42 17       	cp	r20, r18
    308e:	53 07       	cpc	r21, r19
    3090:	31 f4       	brne	.+12     	; 0x309e <xTaskGenericNotifyFromISR+0x154>
    3092:	18 96       	adiw	r26, 0x08	; 8
    3094:	4d 91       	ld	r20, X+
    3096:	5c 91       	ld	r21, X
    3098:	19 97       	sbiw	r26, 0x09	; 9
    309a:	52 83       	std	Z+2, r21	; 0x02
    309c:	41 83       	std	Z+1, r20	; 0x01
    309e:	1d 96       	adiw	r26, 0x0d	; 13
    30a0:	1c 92       	st	X, r1
    30a2:	1e 92       	st	-X, r1
    30a4:	1c 97       	sbiw	r26, 0x0c	; 12
    30a6:	90 81       	ld	r25, Z
    30a8:	91 50       	subi	r25, 0x01	; 1
    30aa:	90 83       	st	Z, r25
    30ac:	5a 96       	adiw	r26, 0x1a	; 26
    30ae:	ec 91       	ld	r30, X
    30b0:	5a 97       	sbiw	r26, 0x1a	; 26
    30b2:	90 91 19 14 	lds	r25, 0x1419	; 0x801419 <uxTopReadyPriority>
    30b6:	9e 17       	cp	r25, r30
    30b8:	10 f4       	brcc	.+4      	; 0x30be <xTaskGenericNotifyFromISR+0x174>
    30ba:	e0 93 19 14 	sts	0x1419, r30	; 0x801419 <uxTopReadyPriority>
    30be:	9b e0       	ldi	r25, 0x0B	; 11
    30c0:	9e 9f       	mul	r25, r30
    30c2:	f0 01       	movw	r30, r0
    30c4:	11 24       	eor	r1, r1
    30c6:	e5 5a       	subi	r30, 0xA5	; 165
    30c8:	fb 4e       	sbci	r31, 0xEB	; 235
    30ca:	01 80       	ldd	r0, Z+1	; 0x01
    30cc:	f2 81       	ldd	r31, Z+2	; 0x02
    30ce:	e0 2d       	mov	r30, r0
    30d0:	17 96       	adiw	r26, 0x07	; 7
    30d2:	fc 93       	st	X, r31
    30d4:	ee 93       	st	-X, r30
    30d6:	16 97       	sbiw	r26, 0x06	; 6
    30d8:	46 81       	ldd	r20, Z+6	; 0x06
    30da:	57 81       	ldd	r21, Z+7	; 0x07
    30dc:	19 96       	adiw	r26, 0x09	; 9
    30de:	5c 93       	st	X, r21
    30e0:	4e 93       	st	-X, r20
    30e2:	18 97       	sbiw	r26, 0x08	; 8
    30e4:	c6 81       	ldd	r28, Z+6	; 0x06
    30e6:	d7 81       	ldd	r29, Z+7	; 0x07
    30e8:	3d 83       	std	Y+5, r19	; 0x05
    30ea:	2c 83       	std	Y+4, r18	; 0x04
    30ec:	37 83       	std	Z+7, r19	; 0x07
    30ee:	26 83       	std	Z+6, r18	; 0x06
    30f0:	5a 96       	adiw	r26, 0x1a	; 26
    30f2:	ec 91       	ld	r30, X
    30f4:	5a 97       	sbiw	r26, 0x1a	; 26
    30f6:	9e 9f       	mul	r25, r30
    30f8:	f0 01       	movw	r30, r0
    30fa:	11 24       	eor	r1, r1
    30fc:	e5 5a       	subi	r30, 0xA5	; 165
    30fe:	fb 4e       	sbci	r31, 0xEB	; 235
    3100:	1d 96       	adiw	r26, 0x0d	; 13
    3102:	fc 93       	st	X, r31
    3104:	ee 93       	st	-X, r30
    3106:	1c 97       	sbiw	r26, 0x0c	; 12
    3108:	90 81       	ld	r25, Z
    310a:	9f 5f       	subi	r25, 0xFF	; 255
    310c:	90 83       	st	Z, r25
    310e:	21 c0       	rjmp	.+66     	; 0x3152 <xTaskGenericNotifyFromISR+0x208>
    3110:	66 e3       	ldi	r22, 0x36	; 54
    3112:	74 e1       	ldi	r23, 0x14	; 20
    3114:	fb 01       	movw	r30, r22
    3116:	c1 81       	ldd	r28, Z+1	; 0x01
    3118:	d2 81       	ldd	r29, Z+2	; 0x02
    311a:	53 96       	adiw	r26, 0x13	; 19
    311c:	dc 93       	st	X, r29
    311e:	ce 93       	st	-X, r28
    3120:	52 97       	sbiw	r26, 0x12	; 18
    3122:	2e 81       	ldd	r18, Y+6	; 0x06
    3124:	3f 81       	ldd	r19, Y+7	; 0x07
    3126:	55 96       	adiw	r26, 0x15	; 21
    3128:	3c 93       	st	X, r19
    312a:	2e 93       	st	-X, r18
    312c:	54 97       	sbiw	r26, 0x14	; 20
    312e:	4e 81       	ldd	r20, Y+6	; 0x06
    3130:	5f 81       	ldd	r21, Y+7	; 0x07
    3132:	9d 01       	movw	r18, r26
    3134:	22 5f       	subi	r18, 0xF2	; 242
    3136:	3f 4f       	sbci	r19, 0xFF	; 255
    3138:	fa 01       	movw	r30, r20
    313a:	35 83       	std	Z+5, r19	; 0x05
    313c:	24 83       	std	Z+4, r18	; 0x04
    313e:	3f 83       	std	Y+7, r19	; 0x07
    3140:	2e 83       	std	Y+6, r18	; 0x06
    3142:	59 96       	adiw	r26, 0x19	; 25
    3144:	7c 93       	st	X, r23
    3146:	6e 93       	st	-X, r22
    3148:	58 97       	sbiw	r26, 0x18	; 24
    314a:	fb 01       	movw	r30, r22
    314c:	90 81       	ld	r25, Z
    314e:	9f 5f       	subi	r25, 0xFF	; 255
    3150:	90 83       	st	Z, r25
    3152:	5a 96       	adiw	r26, 0x1a	; 26
    3154:	2c 91       	ld	r18, X
    3156:	e0 91 c9 14 	lds	r30, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    315a:	f0 91 ca 14 	lds	r31, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>
    315e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3160:	92 17       	cp	r25, r18
    3162:	48 f4       	brcc	.+18     	; 0x3176 <xTaskGenericNotifyFromISR+0x22c>
    3164:	c1 14       	cp	r12, r1
    3166:	d1 04       	cpc	r13, r1
    3168:	19 f0       	breq	.+6      	; 0x3170 <xTaskGenericNotifyFromISR+0x226>
    316a:	91 e0       	ldi	r25, 0x01	; 1
    316c:	f6 01       	movw	r30, r12
    316e:	90 83       	st	Z, r25
    3170:	91 e0       	ldi	r25, 0x01	; 1
    3172:	90 93 13 14 	sts	0x1413, r25	; 0x801413 <xYieldPending>
    3176:	df 91       	pop	r29
    3178:	cf 91       	pop	r28
    317a:	0f 91       	pop	r16
    317c:	ff 90       	pop	r15
    317e:	ef 90       	pop	r14
    3180:	df 90       	pop	r13
    3182:	cf 90       	pop	r12
    3184:	bf 90       	pop	r11
    3186:	af 90       	pop	r10
    3188:	9f 90       	pop	r9
    318a:	8f 90       	pop	r8
    318c:	08 95       	ret

0000318e <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    318e:	00 97       	sbiw	r24, 0x00	; 0
    3190:	21 f4       	brne	.+8      	; 0x319a <xTaskGenericNotifyStateClear+0xc>
    3192:	80 91 c9 14 	lds	r24, 0x14C9	; 0x8014c9 <pxCurrentTCB>
    3196:	90 91 ca 14 	lds	r25, 0x14CA	; 0x8014ca <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    319a:	0f b6       	in	r0, 0x3f	; 63
    319c:	f8 94       	cli
    319e:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    31a0:	70 e0       	ldi	r23, 0x00	; 0
    31a2:	fc 01       	movw	r30, r24
    31a4:	e6 0f       	add	r30, r22
    31a6:	f7 1f       	adc	r31, r23
    31a8:	23 a9       	ldd	r18, Z+51	; 0x33
    31aa:	22 30       	cpi	r18, 0x02	; 2
    31ac:	31 f4       	brne	.+12     	; 0x31ba <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    31ae:	fc 01       	movw	r30, r24
    31b0:	e6 0f       	add	r30, r22
    31b2:	f7 1f       	adc	r31, r23
    31b4:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    31b6:	81 e0       	ldi	r24, 0x01	; 1
    31b8:	01 c0       	rjmp	.+2      	; 0x31bc <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    31ba:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    31bc:	0f 90       	pop	r0
    31be:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    31c0:	08 95       	ret

000031c2 <prvGetNextExpireTime>:
    31c2:	dc 01       	movw	r26, r24
    31c4:	e0 91 d5 14 	lds	r30, 0x14D5	; 0x8014d5 <pxCurrentTimerList>
    31c8:	f0 91 d6 14 	lds	r31, 0x14D6	; 0x8014d6 <pxCurrentTimerList+0x1>
    31cc:	80 81       	ld	r24, Z
    31ce:	91 e0       	ldi	r25, 0x01	; 1
    31d0:	81 11       	cpse	r24, r1
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	9c 93       	st	X, r25
    31d6:	91 11       	cpse	r25, r1
    31d8:	08 c0       	rjmp	.+16     	; 0x31ea <prvGetNextExpireTime+0x28>
    31da:	07 80       	ldd	r0, Z+7	; 0x07
    31dc:	f0 85       	ldd	r31, Z+8	; 0x08
    31de:	e0 2d       	mov	r30, r0
    31e0:	60 81       	ld	r22, Z
    31e2:	71 81       	ldd	r23, Z+1	; 0x01
    31e4:	82 81       	ldd	r24, Z+2	; 0x02
    31e6:	93 81       	ldd	r25, Z+3	; 0x03
    31e8:	08 95       	ret
    31ea:	60 e0       	ldi	r22, 0x00	; 0
    31ec:	70 e0       	ldi	r23, 0x00	; 0
    31ee:	cb 01       	movw	r24, r22
    31f0:	08 95       	ret

000031f2 <prvInsertTimerInActiveList>:
    31f2:	cf 92       	push	r12
    31f4:	df 92       	push	r13
    31f6:	ef 92       	push	r14
    31f8:	ff 92       	push	r15
    31fa:	0f 93       	push	r16
    31fc:	1f 93       	push	r17
    31fe:	fc 01       	movw	r30, r24
    3200:	42 83       	std	Z+2, r20	; 0x02
    3202:	53 83       	std	Z+3, r21	; 0x03
    3204:	64 83       	std	Z+4, r22	; 0x04
    3206:	75 83       	std	Z+5, r23	; 0x05
    3208:	93 87       	std	Z+11, r25	; 0x0b
    320a:	82 87       	std	Z+10, r24	; 0x0a
    320c:	04 17       	cp	r16, r20
    320e:	15 07       	cpc	r17, r21
    3210:	26 07       	cpc	r18, r22
    3212:	37 07       	cpc	r19, r23
    3214:	c0 f0       	brcs	.+48     	; 0x3246 <prvInsertTimerInActiveList+0x54>
    3216:	0c 19       	sub	r16, r12
    3218:	1d 09       	sbc	r17, r13
    321a:	2e 09       	sbc	r18, r14
    321c:	3f 09       	sbc	r19, r15
    321e:	86 85       	ldd	r24, Z+14	; 0x0e
    3220:	97 85       	ldd	r25, Z+15	; 0x0f
    3222:	a0 89       	ldd	r26, Z+16	; 0x10
    3224:	b1 89       	ldd	r27, Z+17	; 0x11
    3226:	08 17       	cp	r16, r24
    3228:	19 07       	cpc	r17, r25
    322a:	2a 07       	cpc	r18, r26
    322c:	3b 07       	cpc	r19, r27
    322e:	00 f5       	brcc	.+64     	; 0x3270 <prvInsertTimerInActiveList+0x7e>
    3230:	bf 01       	movw	r22, r30
    3232:	6e 5f       	subi	r22, 0xFE	; 254
    3234:	7f 4f       	sbci	r23, 0xFF	; 255
    3236:	80 91 d3 14 	lds	r24, 0x14D3	; 0x8014d3 <pxOverflowTimerList>
    323a:	90 91 d4 14 	lds	r25, 0x14D4	; 0x8014d4 <pxOverflowTimerList+0x1>
    323e:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vListInsert>
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	18 c0       	rjmp	.+48     	; 0x3276 <prvInsertTimerInActiveList+0x84>
    3246:	0c 15       	cp	r16, r12
    3248:	1d 05       	cpc	r17, r13
    324a:	2e 05       	cpc	r18, r14
    324c:	3f 05       	cpc	r19, r15
    324e:	28 f4       	brcc	.+10     	; 0x325a <prvInsertTimerInActiveList+0x68>
    3250:	4c 15       	cp	r20, r12
    3252:	5d 05       	cpc	r21, r13
    3254:	6e 05       	cpc	r22, r14
    3256:	7f 05       	cpc	r23, r15
    3258:	68 f4       	brcc	.+26     	; 0x3274 <prvInsertTimerInActiveList+0x82>
    325a:	bf 01       	movw	r22, r30
    325c:	6e 5f       	subi	r22, 0xFE	; 254
    325e:	7f 4f       	sbci	r23, 0xFF	; 255
    3260:	80 91 d5 14 	lds	r24, 0x14D5	; 0x8014d5 <pxCurrentTimerList>
    3264:	90 91 d6 14 	lds	r25, 0x14D6	; 0x8014d6 <pxCurrentTimerList+0x1>
    3268:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vListInsert>
    326c:	80 e0       	ldi	r24, 0x00	; 0
    326e:	03 c0       	rjmp	.+6      	; 0x3276 <prvInsertTimerInActiveList+0x84>
    3270:	81 e0       	ldi	r24, 0x01	; 1
    3272:	01 c0       	rjmp	.+2      	; 0x3276 <prvInsertTimerInActiveList+0x84>
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	1f 91       	pop	r17
    3278:	0f 91       	pop	r16
    327a:	ff 90       	pop	r15
    327c:	ef 90       	pop	r14
    327e:	df 90       	pop	r13
    3280:	cf 90       	pop	r12
    3282:	08 95       	ret

00003284 <prvCheckForValidListAndQueue>:
    3284:	0f b6       	in	r0, 0x3f	; 63
    3286:	f8 94       	cli
    3288:	0f 92       	push	r0
    328a:	80 91 d1 14 	lds	r24, 0x14D1	; 0x8014d1 <xTimerQueue>
    328e:	90 91 d2 14 	lds	r25, 0x14D2	; 0x8014d2 <xTimerQueue+0x1>
    3292:	89 2b       	or	r24, r25
    3294:	e9 f4       	brne	.+58     	; 0x32d0 <prvCheckForValidListAndQueue+0x4c>
    3296:	82 ee       	ldi	r24, 0xE2	; 226
    3298:	94 e1       	ldi	r25, 0x14	; 20
    329a:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInitialise>
    329e:	87 ed       	ldi	r24, 0xD7	; 215
    32a0:	94 e1       	ldi	r25, 0x14	; 20
    32a2:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInitialise>
    32a6:	82 ee       	ldi	r24, 0xE2	; 226
    32a8:	94 e1       	ldi	r25, 0x14	; 20
    32aa:	90 93 d6 14 	sts	0x14D6, r25	; 0x8014d6 <pxCurrentTimerList+0x1>
    32ae:	80 93 d5 14 	sts	0x14D5, r24	; 0x8014d5 <pxCurrentTimerList>
    32b2:	87 ed       	ldi	r24, 0xD7	; 215
    32b4:	94 e1       	ldi	r25, 0x14	; 20
    32b6:	90 93 d4 14 	sts	0x14D4, r25	; 0x8014d4 <pxOverflowTimerList+0x1>
    32ba:	80 93 d3 14 	sts	0x14D3, r24	; 0x8014d3 <pxOverflowTimerList>
    32be:	40 e0       	ldi	r20, 0x00	; 0
    32c0:	67 e0       	ldi	r22, 0x07	; 7
    32c2:	8a e0       	ldi	r24, 0x0A	; 10
    32c4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <xQueueGenericCreate>
    32c8:	90 93 d2 14 	sts	0x14D2, r25	; 0x8014d2 <xTimerQueue+0x1>
    32cc:	80 93 d1 14 	sts	0x14D1, r24	; 0x8014d1 <xTimerQueue>
    32d0:	0f 90       	pop	r0
    32d2:	0f be       	out	0x3f, r0	; 63
    32d4:	08 95       	ret

000032d6 <xTimerCreateTimerTask>:
    32d6:	ef 92       	push	r14
    32d8:	ff 92       	push	r15
    32da:	0f 93       	push	r16
    32dc:	d3 df       	rcall	.-90     	; 0x3284 <prvCheckForValidListAndQueue>
    32de:	80 91 d1 14 	lds	r24, 0x14D1	; 0x8014d1 <xTimerQueue>
    32e2:	90 91 d2 14 	lds	r25, 0x14D2	; 0x8014d2 <xTimerQueue+0x1>
    32e6:	89 2b       	or	r24, r25
    32e8:	91 f0       	breq	.+36     	; 0x330e <xTimerCreateTimerTask+0x38>
    32ea:	0f 2e       	mov	r0, r31
    32ec:	ff ec       	ldi	r31, 0xCF	; 207
    32ee:	ef 2e       	mov	r14, r31
    32f0:	f4 e1       	ldi	r31, 0x14	; 20
    32f2:	ff 2e       	mov	r15, r31
    32f4:	f0 2d       	mov	r31, r0
    32f6:	03 e0       	ldi	r16, 0x03	; 3
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	40 ec       	ldi	r20, 0xC0	; 192
    32fe:	50 e0       	ldi	r21, 0x00	; 0
    3300:	68 e3       	ldi	r22, 0x38	; 56
    3302:	73 e0       	ldi	r23, 0x03	; 3
    3304:	88 e5       	ldi	r24, 0x58	; 88
    3306:	91 e0       	ldi	r25, 0x01	; 1
    3308:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <xTaskCreate>
    330c:	01 c0       	rjmp	.+2      	; 0x3310 <xTimerCreateTimerTask+0x3a>
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	0f 91       	pop	r16
    3312:	ff 90       	pop	r15
    3314:	ef 90       	pop	r14
    3316:	08 95       	ret

00003318 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3318:	8f 92       	push	r8
    331a:	9f 92       	push	r9
    331c:	af 92       	push	r10
    331e:	bf 92       	push	r11
    3320:	cf 92       	push	r12
    3322:	df 92       	push	r13
    3324:	ef 92       	push	r14
    3326:	ff 92       	push	r15
    3328:	0f 93       	push	r16
    332a:	1f 93       	push	r17
    332c:	cf 93       	push	r28
    332e:	df 93       	push	r29
    3330:	cd b7       	in	r28, 0x3d	; 61
    3332:	de b7       	in	r29, 0x3e	; 62
    3334:	27 97       	sbiw	r28, 0x07	; 7
    3336:	0f b6       	in	r0, 0x3f	; 63
    3338:	f8 94       	cli
    333a:	de bf       	out	0x3e, r29	; 62
    333c:	0f be       	out	0x3f, r0	; 63
    333e:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3340:	e0 91 d1 14 	lds	r30, 0x14D1	; 0x8014d1 <xTimerQueue>
    3344:	f0 91 d2 14 	lds	r31, 0x14D2	; 0x8014d2 <xTimerQueue+0x1>
    3348:	30 97       	sbiw	r30, 0x00	; 0
    334a:	81 f1       	breq	.+96     	; 0x33ac <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    334c:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    334e:	2a 83       	std	Y+2, r18	; 0x02
    3350:	3b 83       	std	Y+3, r19	; 0x03
    3352:	4c 83       	std	Y+4, r20	; 0x04
    3354:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3356:	9f 83       	std	Y+7, r25	; 0x07
    3358:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    335a:	66 30       	cpi	r22, 0x06	; 6
    335c:	f4 f4       	brge	.+60     	; 0x339a <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    335e:	c4 db       	rcall	.-2168   	; 0x2ae8 <xTaskGetSchedulerState>
    3360:	82 30       	cpi	r24, 0x02	; 2
    3362:	69 f4       	brne	.+26     	; 0x337e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3364:	00 e0       	ldi	r16, 0x00	; 0
    3366:	a7 01       	movw	r20, r14
    3368:	96 01       	movw	r18, r12
    336a:	be 01       	movw	r22, r28
    336c:	6f 5f       	subi	r22, 0xFF	; 255
    336e:	7f 4f       	sbci	r23, 0xFF	; 255
    3370:	80 91 d1 14 	lds	r24, 0x14D1	; 0x8014d1 <xTimerQueue>
    3374:	90 91 d2 14 	lds	r25, 0x14D2	; 0x8014d2 <xTimerQueue+0x1>
    3378:	0e 94 8f 08 	call	0x111e	; 0x111e <xQueueGenericSend>
    337c:	18 c0       	rjmp	.+48     	; 0x33ae <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    337e:	00 e0       	ldi	r16, 0x00	; 0
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	a9 01       	movw	r20, r18
    3386:	be 01       	movw	r22, r28
    3388:	6f 5f       	subi	r22, 0xFF	; 255
    338a:	7f 4f       	sbci	r23, 0xFF	; 255
    338c:	80 91 d1 14 	lds	r24, 0x14D1	; 0x8014d1 <xTimerQueue>
    3390:	90 91 d2 14 	lds	r25, 0x14D2	; 0x8014d2 <xTimerQueue+0x1>
    3394:	0e 94 8f 08 	call	0x111e	; 0x111e <xQueueGenericSend>
    3398:	0a c0       	rjmp	.+20     	; 0x33ae <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    339a:	20 e0       	ldi	r18, 0x00	; 0
    339c:	a8 01       	movw	r20, r16
    339e:	be 01       	movw	r22, r28
    33a0:	6f 5f       	subi	r22, 0xFF	; 255
    33a2:	7f 4f       	sbci	r23, 0xFF	; 255
    33a4:	cf 01       	movw	r24, r30
    33a6:	0e 94 3f 09 	call	0x127e	; 0x127e <xQueueGenericSendFromISR>
    33aa:	01 c0       	rjmp	.+2      	; 0x33ae <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    33ac:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    33ae:	27 96       	adiw	r28, 0x07	; 7
    33b0:	0f b6       	in	r0, 0x3f	; 63
    33b2:	f8 94       	cli
    33b4:	de bf       	out	0x3e, r29	; 62
    33b6:	0f be       	out	0x3f, r0	; 63
    33b8:	cd bf       	out	0x3d, r28	; 61
    33ba:	df 91       	pop	r29
    33bc:	cf 91       	pop	r28
    33be:	1f 91       	pop	r17
    33c0:	0f 91       	pop	r16
    33c2:	ff 90       	pop	r15
    33c4:	ef 90       	pop	r14
    33c6:	df 90       	pop	r13
    33c8:	cf 90       	pop	r12
    33ca:	bf 90       	pop	r11
    33cc:	af 90       	pop	r10
    33ce:	9f 90       	pop	r9
    33d0:	8f 90       	pop	r8
    33d2:	08 95       	ret

000033d4 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    33d4:	8f 92       	push	r8
    33d6:	9f 92       	push	r9
    33d8:	af 92       	push	r10
    33da:	bf 92       	push	r11
    33dc:	cf 92       	push	r12
    33de:	df 92       	push	r13
    33e0:	ef 92       	push	r14
    33e2:	ff 92       	push	r15
    33e4:	0f 93       	push	r16
    33e6:	1f 93       	push	r17
    33e8:	cf 93       	push	r28
    33ea:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    33ec:	3b c0       	rjmp	.+118    	; 0x3464 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    33ee:	07 80       	ldd	r0, Z+7	; 0x07
    33f0:	f0 85       	ldd	r31, Z+8	; 0x08
    33f2:	e0 2d       	mov	r30, r0
    33f4:	80 80       	ld	r8, Z
    33f6:	91 80       	ldd	r9, Z+1	; 0x01
    33f8:	a2 80       	ldd	r10, Z+2	; 0x02
    33fa:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    33fc:	c0 85       	ldd	r28, Z+8	; 0x08
    33fe:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3400:	8e 01       	movw	r16, r28
    3402:	0e 5f       	subi	r16, 0xFE	; 254
    3404:	1f 4f       	sbci	r17, 0xFF	; 255
    3406:	c8 01       	movw	r24, r16
    3408:	0e 94 0b 06 	call	0xc16	; 0xc16 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    340c:	ec 89       	ldd	r30, Y+20	; 0x14
    340e:	fd 89       	ldd	r31, Y+21	; 0x15
    3410:	ce 01       	movw	r24, r28
    3412:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3414:	8e 89       	ldd	r24, Y+22	; 0x16
    3416:	82 ff       	sbrs	r24, 2
    3418:	25 c0       	rjmp	.+74     	; 0x3464 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    341a:	8e 85       	ldd	r24, Y+14	; 0x0e
    341c:	9f 85       	ldd	r25, Y+15	; 0x0f
    341e:	a8 89       	ldd	r26, Y+16	; 0x10
    3420:	b9 89       	ldd	r27, Y+17	; 0x11
    3422:	88 0d       	add	r24, r8
    3424:	99 1d       	adc	r25, r9
    3426:	aa 1d       	adc	r26, r10
    3428:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    342a:	88 16       	cp	r8, r24
    342c:	99 06       	cpc	r9, r25
    342e:	aa 06       	cpc	r10, r26
    3430:	bb 06       	cpc	r11, r27
    3432:	70 f4       	brcc	.+28     	; 0x3450 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3434:	8a 83       	std	Y+2, r24	; 0x02
    3436:	9b 83       	std	Y+3, r25	; 0x03
    3438:	ac 83       	std	Y+4, r26	; 0x04
    343a:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    343c:	db 87       	std	Y+11, r29	; 0x0b
    343e:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3440:	b8 01       	movw	r22, r16
    3442:	80 91 d5 14 	lds	r24, 0x14D5	; 0x8014d5 <pxCurrentTimerList>
    3446:	90 91 d6 14 	lds	r25, 0x14D6	; 0x8014d6 <pxCurrentTimerList+0x1>
    344a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vListInsert>
    344e:	0a c0       	rjmp	.+20     	; 0x3464 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3450:	c1 2c       	mov	r12, r1
    3452:	d1 2c       	mov	r13, r1
    3454:	76 01       	movw	r14, r12
    3456:	00 e0       	ldi	r16, 0x00	; 0
    3458:	10 e0       	ldi	r17, 0x00	; 0
    345a:	a5 01       	movw	r20, r10
    345c:	94 01       	movw	r18, r8
    345e:	60 e0       	ldi	r22, 0x00	; 0
    3460:	ce 01       	movw	r24, r28
    3462:	5a df       	rcall	.-332    	; 0x3318 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3464:	e0 91 d5 14 	lds	r30, 0x14D5	; 0x8014d5 <pxCurrentTimerList>
    3468:	f0 91 d6 14 	lds	r31, 0x14D6	; 0x8014d6 <pxCurrentTimerList+0x1>
    346c:	80 81       	ld	r24, Z
    346e:	81 11       	cpse	r24, r1
    3470:	be cf       	rjmp	.-132    	; 0x33ee <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3472:	80 91 d3 14 	lds	r24, 0x14D3	; 0x8014d3 <pxOverflowTimerList>
    3476:	90 91 d4 14 	lds	r25, 0x14D4	; 0x8014d4 <pxOverflowTimerList+0x1>
    347a:	90 93 d6 14 	sts	0x14D6, r25	; 0x8014d6 <pxCurrentTimerList+0x1>
    347e:	80 93 d5 14 	sts	0x14D5, r24	; 0x8014d5 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3482:	f0 93 d4 14 	sts	0x14D4, r31	; 0x8014d4 <pxOverflowTimerList+0x1>
    3486:	e0 93 d3 14 	sts	0x14D3, r30	; 0x8014d3 <pxOverflowTimerList>
    }
    348a:	df 91       	pop	r29
    348c:	cf 91       	pop	r28
    348e:	1f 91       	pop	r17
    3490:	0f 91       	pop	r16
    3492:	ff 90       	pop	r15
    3494:	ef 90       	pop	r14
    3496:	df 90       	pop	r13
    3498:	cf 90       	pop	r12
    349a:	bf 90       	pop	r11
    349c:	af 90       	pop	r10
    349e:	9f 90       	pop	r9
    34a0:	8f 90       	pop	r8
    34a2:	08 95       	ret

000034a4 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    34a4:	cf 92       	push	r12
    34a6:	df 92       	push	r13
    34a8:	ef 92       	push	r14
    34aa:	ff 92       	push	r15
    34ac:	cf 93       	push	r28
    34ae:	df 93       	push	r29
    34b0:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    34b2:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <xTaskGetTickCount>
    34b6:	6b 01       	movw	r12, r22
    34b8:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    34ba:	80 91 cb 14 	lds	r24, 0x14CB	; 0x8014cb <xLastTime.2436>
    34be:	90 91 cc 14 	lds	r25, 0x14CC	; 0x8014cc <xLastTime.2436+0x1>
    34c2:	a0 91 cd 14 	lds	r26, 0x14CD	; 0x8014cd <xLastTime.2436+0x2>
    34c6:	b0 91 ce 14 	lds	r27, 0x14CE	; 0x8014ce <xLastTime.2436+0x3>
    34ca:	c8 16       	cp	r12, r24
    34cc:	d9 06       	cpc	r13, r25
    34ce:	ea 06       	cpc	r14, r26
    34d0:	fb 06       	cpc	r15, r27
    34d2:	20 f4       	brcc	.+8      	; 0x34dc <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    34d4:	7f df       	rcall	.-258    	; 0x33d4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	88 83       	st	Y, r24
    34da:	01 c0       	rjmp	.+2      	; 0x34de <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    34dc:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    34de:	c0 92 cb 14 	sts	0x14CB, r12	; 0x8014cb <xLastTime.2436>
    34e2:	d0 92 cc 14 	sts	0x14CC, r13	; 0x8014cc <xLastTime.2436+0x1>
    34e6:	e0 92 cd 14 	sts	0x14CD, r14	; 0x8014cd <xLastTime.2436+0x2>
    34ea:	f0 92 ce 14 	sts	0x14CE, r15	; 0x8014ce <xLastTime.2436+0x3>

        return xTimeNow;
    }
    34ee:	c7 01       	movw	r24, r14
    34f0:	b6 01       	movw	r22, r12
    34f2:	df 91       	pop	r29
    34f4:	cf 91       	pop	r28
    34f6:	ff 90       	pop	r15
    34f8:	ef 90       	pop	r14
    34fa:	df 90       	pop	r13
    34fc:	cf 90       	pop	r12
    34fe:	08 95       	ret

00003500 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3500:	4f 92       	push	r4
    3502:	5f 92       	push	r5
    3504:	6f 92       	push	r6
    3506:	7f 92       	push	r7
    3508:	8f 92       	push	r8
    350a:	9f 92       	push	r9
    350c:	af 92       	push	r10
    350e:	bf 92       	push	r11
    3510:	cf 92       	push	r12
    3512:	df 92       	push	r13
    3514:	ef 92       	push	r14
    3516:	ff 92       	push	r15
    3518:	0f 93       	push	r16
    351a:	1f 93       	push	r17
    351c:	cf 93       	push	r28
    351e:	df 93       	push	r29
    3520:	4b 01       	movw	r8, r22
    3522:	5c 01       	movw	r10, r24
    3524:	29 01       	movw	r4, r18
    3526:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3528:	e0 91 d5 14 	lds	r30, 0x14D5	; 0x8014d5 <pxCurrentTimerList>
    352c:	f0 91 d6 14 	lds	r31, 0x14D6	; 0x8014d6 <pxCurrentTimerList+0x1>
    3530:	07 80       	ldd	r0, Z+7	; 0x07
    3532:	f0 85       	ldd	r31, Z+8	; 0x08
    3534:	e0 2d       	mov	r30, r0
    3536:	c0 85       	ldd	r28, Z+8	; 0x08
    3538:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    353a:	ce 01       	movw	r24, r28
    353c:	02 96       	adiw	r24, 0x02	; 2
    353e:	0e 94 0b 06 	call	0xc16	; 0xc16 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3542:	8e 89       	ldd	r24, Y+22	; 0x16
    3544:	82 ff       	sbrs	r24, 2
    3546:	1b c0       	rjmp	.+54     	; 0x357e <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3548:	4e 85       	ldd	r20, Y+14	; 0x0e
    354a:	5f 85       	ldd	r21, Y+15	; 0x0f
    354c:	68 89       	ldd	r22, Y+16	; 0x10
    354e:	79 89       	ldd	r23, Y+17	; 0x11
    3550:	48 0d       	add	r20, r8
    3552:	59 1d       	adc	r21, r9
    3554:	6a 1d       	adc	r22, r10
    3556:	7b 1d       	adc	r23, r11
    3558:	75 01       	movw	r14, r10
    355a:	64 01       	movw	r12, r8
    355c:	93 01       	movw	r18, r6
    355e:	82 01       	movw	r16, r4
    3560:	ce 01       	movw	r24, r28
    3562:	47 de       	rcall	.-882    	; 0x31f2 <prvInsertTimerInActiveList>
    3564:	88 23       	and	r24, r24
    3566:	69 f0       	breq	.+26     	; 0x3582 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3568:	c1 2c       	mov	r12, r1
    356a:	d1 2c       	mov	r13, r1
    356c:	76 01       	movw	r14, r12
    356e:	00 e0       	ldi	r16, 0x00	; 0
    3570:	10 e0       	ldi	r17, 0x00	; 0
    3572:	a5 01       	movw	r20, r10
    3574:	94 01       	movw	r18, r8
    3576:	60 e0       	ldi	r22, 0x00	; 0
    3578:	ce 01       	movw	r24, r28
    357a:	ce de       	rcall	.-612    	; 0x3318 <xTimerGenericCommand>
    357c:	02 c0       	rjmp	.+4      	; 0x3582 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    357e:	8e 7f       	andi	r24, 0xFE	; 254
    3580:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3582:	ec 89       	ldd	r30, Y+20	; 0x14
    3584:	fd 89       	ldd	r31, Y+21	; 0x15
    3586:	ce 01       	movw	r24, r28
    3588:	19 95       	eicall
    }
    358a:	df 91       	pop	r29
    358c:	cf 91       	pop	r28
    358e:	1f 91       	pop	r17
    3590:	0f 91       	pop	r16
    3592:	ff 90       	pop	r15
    3594:	ef 90       	pop	r14
    3596:	df 90       	pop	r13
    3598:	cf 90       	pop	r12
    359a:	bf 90       	pop	r11
    359c:	af 90       	pop	r10
    359e:	9f 90       	pop	r9
    35a0:	8f 90       	pop	r8
    35a2:	7f 90       	pop	r7
    35a4:	6f 90       	pop	r6
    35a6:	5f 90       	pop	r5
    35a8:	4f 90       	pop	r4
    35aa:	08 95       	ret

000035ac <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    35ac:	8f 92       	push	r8
    35ae:	9f 92       	push	r9
    35b0:	af 92       	push	r10
    35b2:	bf 92       	push	r11
    35b4:	cf 92       	push	r12
    35b6:	df 92       	push	r13
    35b8:	ef 92       	push	r14
    35ba:	ff 92       	push	r15
    35bc:	1f 93       	push	r17
    35be:	cf 93       	push	r28
    35c0:	df 93       	push	r29
    35c2:	1f 92       	push	r1
    35c4:	cd b7       	in	r28, 0x3d	; 61
    35c6:	de b7       	in	r29, 0x3e	; 62
    35c8:	6b 01       	movw	r12, r22
    35ca:	7c 01       	movw	r14, r24
    35cc:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    35ce:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    35d2:	ce 01       	movw	r24, r28
    35d4:	01 96       	adiw	r24, 0x01	; 1
    35d6:	66 df       	rcall	.-308    	; 0x34a4 <prvSampleTimeNow>
    35d8:	4b 01       	movw	r8, r22
    35da:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    35dc:	89 81       	ldd	r24, Y+1	; 0x01
    35de:	81 11       	cpse	r24, r1
    35e0:	2d c0       	rjmp	.+90     	; 0x363c <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    35e2:	11 11       	cpse	r17, r1
    35e4:	0d c0       	rjmp	.+26     	; 0x3600 <prvProcessTimerOrBlockTask+0x54>
    35e6:	8c 14       	cp	r8, r12
    35e8:	9d 04       	cpc	r9, r13
    35ea:	ae 04       	cpc	r10, r14
    35ec:	bf 04       	cpc	r11, r15
    35ee:	40 f0       	brcs	.+16     	; 0x3600 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    35f0:	0e 94 31 11 	call	0x2262	; 0x2262 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    35f4:	a5 01       	movw	r20, r10
    35f6:	94 01       	movw	r18, r8
    35f8:	c7 01       	movw	r24, r14
    35fa:	b6 01       	movw	r22, r12
    35fc:	81 df       	rcall	.-254    	; 0x3500 <prvProcessExpiredTimer>
    35fe:	20 c0       	rjmp	.+64     	; 0x3640 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3600:	11 23       	and	r17, r17
    3602:	41 f0       	breq	.+16     	; 0x3614 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3604:	e0 91 d3 14 	lds	r30, 0x14D3	; 0x8014d3 <pxOverflowTimerList>
    3608:	f0 91 d4 14 	lds	r31, 0x14D4	; 0x8014d4 <pxOverflowTimerList+0x1>
    360c:	80 81       	ld	r24, Z
    360e:	11 e0       	ldi	r17, 0x01	; 1
    3610:	81 11       	cpse	r24, r1
    3612:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3614:	b7 01       	movw	r22, r14
    3616:	a6 01       	movw	r20, r12
    3618:	48 19       	sub	r20, r8
    361a:	59 09       	sbc	r21, r9
    361c:	6a 09       	sbc	r22, r10
    361e:	7b 09       	sbc	r23, r11
    3620:	21 2f       	mov	r18, r17
    3622:	80 91 d1 14 	lds	r24, 0x14D1	; 0x8014d1 <xTimerQueue>
    3626:	90 91 d2 14 	lds	r25, 0x14D2	; 0x8014d2 <xTimerQueue+0x1>
    362a:	0e 94 09 0a 	call	0x1412	; 0x1412 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    362e:	0e 94 31 11 	call	0x2262	; 0x2262 <xTaskResumeAll>
    3632:	81 11       	cpse	r24, r1
    3634:	05 c0       	rjmp	.+10     	; 0x3640 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3636:	0e 94 87 06 	call	0xd0e	; 0xd0e <vPortYield>
    363a:	02 c0       	rjmp	.+4      	; 0x3640 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    363c:	0e 94 31 11 	call	0x2262	; 0x2262 <xTaskResumeAll>
            }
        }
    }
    3640:	0f 90       	pop	r0
    3642:	df 91       	pop	r29
    3644:	cf 91       	pop	r28
    3646:	1f 91       	pop	r17
    3648:	ff 90       	pop	r15
    364a:	ef 90       	pop	r14
    364c:	df 90       	pop	r13
    364e:	cf 90       	pop	r12
    3650:	bf 90       	pop	r11
    3652:	af 90       	pop	r10
    3654:	9f 90       	pop	r9
    3656:	8f 90       	pop	r8
    3658:	08 95       	ret

0000365a <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    365a:	af 92       	push	r10
    365c:	bf 92       	push	r11
    365e:	cf 92       	push	r12
    3660:	df 92       	push	r13
    3662:	ef 92       	push	r14
    3664:	ff 92       	push	r15
    3666:	0f 93       	push	r16
    3668:	1f 93       	push	r17
    366a:	cf 93       	push	r28
    366c:	df 93       	push	r29
    366e:	cd b7       	in	r28, 0x3d	; 61
    3670:	de b7       	in	r29, 0x3e	; 62
    3672:	28 97       	sbiw	r28, 0x08	; 8
    3674:	0f b6       	in	r0, 0x3f	; 63
    3676:	f8 94       	cli
    3678:	de bf       	out	0x3e, r29	; 62
    367a:	0f be       	out	0x3f, r0	; 63
    367c:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    367e:	82 c0       	rjmp	.+260    	; 0x3784 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3680:	89 81       	ldd	r24, Y+1	; 0x01
    3682:	88 23       	and	r24, r24
    3684:	0c f4       	brge	.+2      	; 0x3688 <prvProcessReceivedCommands+0x2e>
    3686:	7e c0       	rjmp	.+252    	; 0x3784 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3688:	ae 80       	ldd	r10, Y+6	; 0x06
    368a:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    368c:	d5 01       	movw	r26, r10
    368e:	1c 96       	adiw	r26, 0x0c	; 12
    3690:	8d 91       	ld	r24, X+
    3692:	9c 91       	ld	r25, X
    3694:	1d 97       	sbiw	r26, 0x0d	; 13
    3696:	89 2b       	or	r24, r25
    3698:	21 f0       	breq	.+8      	; 0x36a2 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    369a:	c5 01       	movw	r24, r10
    369c:	02 96       	adiw	r24, 0x02	; 2
    369e:	0e 94 0b 06 	call	0xc16	; 0xc16 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    36a2:	ce 01       	movw	r24, r28
    36a4:	08 96       	adiw	r24, 0x08	; 8
    36a6:	fe de       	rcall	.-516    	; 0x34a4 <prvSampleTimeNow>
    36a8:	8b 01       	movw	r16, r22
    36aa:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    36ac:	e9 81       	ldd	r30, Y+1	; 0x01
    36ae:	0e 2e       	mov	r0, r30
    36b0:	00 0c       	add	r0, r0
    36b2:	ff 0b       	sbc	r31, r31
    36b4:	ea 30       	cpi	r30, 0x0A	; 10
    36b6:	f1 05       	cpc	r31, r1
    36b8:	08 f0       	brcs	.+2      	; 0x36bc <prvProcessReceivedCommands+0x62>
    36ba:	64 c0       	rjmp	.+200    	; 0x3784 <prvProcessReceivedCommands+0x12a>
    36bc:	88 27       	eor	r24, r24
    36be:	ee 58       	subi	r30, 0x8E	; 142
    36c0:	ff 4f       	sbci	r31, 0xFF	; 255
    36c2:	8f 4f       	sbci	r24, 0xFF	; 255
    36c4:	0c 94 80 31 	jmp	0x6300	; 0x6300 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    36c8:	f5 01       	movw	r30, r10
    36ca:	86 89       	ldd	r24, Z+22	; 0x16
    36cc:	81 60       	ori	r24, 0x01	; 1
    36ce:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    36d0:	ca 80       	ldd	r12, Y+2	; 0x02
    36d2:	db 80       	ldd	r13, Y+3	; 0x03
    36d4:	ec 80       	ldd	r14, Y+4	; 0x04
    36d6:	fd 80       	ldd	r15, Y+5	; 0x05
    36d8:	46 85       	ldd	r20, Z+14	; 0x0e
    36da:	57 85       	ldd	r21, Z+15	; 0x0f
    36dc:	60 89       	ldd	r22, Z+16	; 0x10
    36de:	71 89       	ldd	r23, Z+17	; 0x11
    36e0:	4c 0d       	add	r20, r12
    36e2:	5d 1d       	adc	r21, r13
    36e4:	6e 1d       	adc	r22, r14
    36e6:	7f 1d       	adc	r23, r15
    36e8:	c5 01       	movw	r24, r10
    36ea:	83 dd       	rcall	.-1274   	; 0x31f2 <prvInsertTimerInActiveList>
    36ec:	88 23       	and	r24, r24
    36ee:	09 f4       	brne	.+2      	; 0x36f2 <prvProcessReceivedCommands+0x98>
    36f0:	49 c0       	rjmp	.+146    	; 0x3784 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    36f2:	d5 01       	movw	r26, r10
    36f4:	54 96       	adiw	r26, 0x14	; 20
    36f6:	ed 91       	ld	r30, X+
    36f8:	fc 91       	ld	r31, X
    36fa:	55 97       	sbiw	r26, 0x15	; 21
    36fc:	c5 01       	movw	r24, r10
    36fe:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3700:	f5 01       	movw	r30, r10
    3702:	86 89       	ldd	r24, Z+22	; 0x16
    3704:	82 ff       	sbrs	r24, 2
    3706:	3e c0       	rjmp	.+124    	; 0x3784 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3708:	4a 81       	ldd	r20, Y+2	; 0x02
    370a:	5b 81       	ldd	r21, Y+3	; 0x03
    370c:	6c 81       	ldd	r22, Y+4	; 0x04
    370e:	7d 81       	ldd	r23, Y+5	; 0x05
    3710:	86 85       	ldd	r24, Z+14	; 0x0e
    3712:	97 85       	ldd	r25, Z+15	; 0x0f
    3714:	a0 89       	ldd	r26, Z+16	; 0x10
    3716:	b1 89       	ldd	r27, Z+17	; 0x11
    3718:	9a 01       	movw	r18, r20
    371a:	ab 01       	movw	r20, r22
    371c:	28 0f       	add	r18, r24
    371e:	39 1f       	adc	r19, r25
    3720:	4a 1f       	adc	r20, r26
    3722:	5b 1f       	adc	r21, r27
    3724:	c1 2c       	mov	r12, r1
    3726:	d1 2c       	mov	r13, r1
    3728:	76 01       	movw	r14, r12
    372a:	00 e0       	ldi	r16, 0x00	; 0
    372c:	10 e0       	ldi	r17, 0x00	; 0
    372e:	60 e0       	ldi	r22, 0x00	; 0
    3730:	c5 01       	movw	r24, r10
    3732:	f2 dd       	rcall	.-1052   	; 0x3318 <xTimerGenericCommand>
    3734:	27 c0       	rjmp	.+78     	; 0x3784 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3736:	d5 01       	movw	r26, r10
    3738:	56 96       	adiw	r26, 0x16	; 22
    373a:	8c 91       	ld	r24, X
    373c:	56 97       	sbiw	r26, 0x16	; 22
    373e:	8e 7f       	andi	r24, 0xFE	; 254
    3740:	56 96       	adiw	r26, 0x16	; 22
    3742:	8c 93       	st	X, r24
                        break;
    3744:	1f c0       	rjmp	.+62     	; 0x3784 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3746:	f5 01       	movw	r30, r10
    3748:	86 89       	ldd	r24, Z+22	; 0x16
    374a:	81 60       	ori	r24, 0x01	; 1
    374c:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    374e:	4a 81       	ldd	r20, Y+2	; 0x02
    3750:	5b 81       	ldd	r21, Y+3	; 0x03
    3752:	6c 81       	ldd	r22, Y+4	; 0x04
    3754:	7d 81       	ldd	r23, Y+5	; 0x05
    3756:	46 87       	std	Z+14, r20	; 0x0e
    3758:	57 87       	std	Z+15, r21	; 0x0f
    375a:	60 8b       	std	Z+16, r22	; 0x10
    375c:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    375e:	40 0f       	add	r20, r16
    3760:	51 1f       	adc	r21, r17
    3762:	62 1f       	adc	r22, r18
    3764:	73 1f       	adc	r23, r19
    3766:	68 01       	movw	r12, r16
    3768:	79 01       	movw	r14, r18
    376a:	c5 01       	movw	r24, r10
    376c:	42 dd       	rcall	.-1404   	; 0x31f2 <prvInsertTimerInActiveList>
                        break;
    376e:	0a c0       	rjmp	.+20     	; 0x3784 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3770:	f5 01       	movw	r30, r10
    3772:	86 89       	ldd	r24, Z+22	; 0x16
    3774:	81 fd       	sbrc	r24, 1
    3776:	04 c0       	rjmp	.+8      	; 0x3780 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3778:	c5 01       	movw	r24, r10
    377a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <vPortFree>
    377e:	02 c0       	rjmp	.+4      	; 0x3784 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3780:	8e 7f       	andi	r24, 0xFE	; 254
    3782:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3784:	20 e0       	ldi	r18, 0x00	; 0
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	a9 01       	movw	r20, r18
    378a:	be 01       	movw	r22, r28
    378c:	6f 5f       	subi	r22, 0xFF	; 255
    378e:	7f 4f       	sbci	r23, 0xFF	; 255
    3790:	80 91 d1 14 	lds	r24, 0x14D1	; 0x8014d1 <xTimerQueue>
    3794:	90 91 d2 14 	lds	r25, 0x14D2	; 0x8014d2 <xTimerQueue+0x1>
    3798:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <xQueueReceive>
    379c:	81 11       	cpse	r24, r1
    379e:	70 cf       	rjmp	.-288    	; 0x3680 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    37a0:	28 96       	adiw	r28, 0x08	; 8
    37a2:	0f b6       	in	r0, 0x3f	; 63
    37a4:	f8 94       	cli
    37a6:	de bf       	out	0x3e, r29	; 62
    37a8:	0f be       	out	0x3f, r0	; 63
    37aa:	cd bf       	out	0x3d, r28	; 61
    37ac:	df 91       	pop	r29
    37ae:	cf 91       	pop	r28
    37b0:	1f 91       	pop	r17
    37b2:	0f 91       	pop	r16
    37b4:	ff 90       	pop	r15
    37b6:	ef 90       	pop	r14
    37b8:	df 90       	pop	r13
    37ba:	cf 90       	pop	r12
    37bc:	bf 90       	pop	r11
    37be:	af 90       	pop	r10
    37c0:	08 95       	ret

000037c2 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    37c2:	08 95       	ret

000037c4 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    37c4:	84 b1       	in	r24, 0x04	; 4
    37c6:	80 68       	ori	r24, 0x80	; 128
    37c8:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    37ca:	85 b1       	in	r24, 0x05	; 5
    37cc:	80 68       	ori	r24, 0x80	; 128
    37ce:	85 b9       	out	0x05, r24	; 5
    37d0:	08 95       	ret

000037d2 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    37d2:	83 b1       	in	r24, 0x03	; 3
    37d4:	80 68       	ori	r24, 0x80	; 128
    37d6:	83 b9       	out	0x03, r24	; 3
    37d8:	08 95       	ret

000037da <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    37da:	f4 df       	rcall	.-24     	; 0x37c4 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    37dc:	2f ef       	ldi	r18, 0xFF	; 255
    37de:	80 e7       	ldi	r24, 0x70	; 112
    37e0:	92 e0       	ldi	r25, 0x02	; 2
    37e2:	21 50       	subi	r18, 0x01	; 1
    37e4:	80 40       	sbci	r24, 0x00	; 0
    37e6:	90 40       	sbci	r25, 0x00	; 0
    37e8:	e1 f7       	brne	.-8      	; 0x37e2 <vApplicationMallocFailedHook+0x8>
    37ea:	00 c0       	rjmp	.+0      	; 0x37ec <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    37ec:	00 00       	nop
    37ee:	f1 df       	rcall	.-30     	; 0x37d2 <prvBlinkMainLed>
    37f0:	f5 cf       	rjmp	.-22     	; 0x37dc <vApplicationMallocFailedHook+0x2>

000037f2 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    37f2:	e8 df       	rcall	.-48     	; 0x37c4 <prvSetMainLedOn>
    37f4:	2f ef       	ldi	r18, 0xFF	; 255
    37f6:	87 ea       	ldi	r24, 0xA7	; 167
    37f8:	91 e6       	ldi	r25, 0x61	; 97
    37fa:	21 50       	subi	r18, 0x01	; 1
    37fc:	80 40       	sbci	r24, 0x00	; 0
    37fe:	90 40       	sbci	r25, 0x00	; 0
    3800:	e1 f7       	brne	.-8      	; 0x37fa <vApplicationStackOverflowHook+0x8>
    3802:	00 c0       	rjmp	.+0      	; 0x3804 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3804:	00 00       	nop
    3806:	e5 df       	rcall	.-54     	; 0x37d2 <prvBlinkMainLed>
    3808:	f5 cf       	rjmp	.-22     	; 0x37f4 <vApplicationStackOverflowHook+0x2>

0000380a <hih8120_handler_initialise>:
int16_t temperatureIn16 = 0;


void hih820_handler_task( void *pvParameters );

void hih8120_handler_initialise(UBaseType_t hih8120_task_priority){
    380a:	ef 92       	push	r14
    380c:	ff 92       	push	r15
    380e:	0f 93       	push	r16
    3810:	08 2f       	mov	r16, r24
	if ( HIH8120_OK == hih8120_initialise() ){
    3812:	92 d2       	rcall	.+1316   	; 0x3d38 <hih8120_initialise>
    3814:	81 11       	cpse	r24, r1
    3816:	06 c0       	rjmp	.+12     	; 0x3824 <hih8120_handler_initialise+0x1a>
			printf(HIH8120_OK);
    3818:	1f 92       	push	r1
    381a:	1f 92       	push	r1
    381c:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
    3820:	0f 90       	pop	r0
    3822:	0f 90       	pop	r0
	}
	xTaskCreate(
    3824:	e1 2c       	mov	r14, r1
    3826:	f1 2c       	mov	r15, r1
    3828:	20 e0       	ldi	r18, 0x00	; 0
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	40 ec       	ldi	r20, 0xC0	; 192
    382e:	50 e0       	ldi	r21, 0x00	; 0
    3830:	60 e4       	ldi	r22, 0x40	; 64
    3832:	73 e0       	ldi	r23, 0x03	; 3
    3834:	82 e4       	ldi	r24, 0x42	; 66
    3836:	9c e1       	ldi	r25, 0x1C	; 28
    3838:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <xTaskCreate>
	,  "Hih820Hand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  hih8120_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    383c:	0f 91       	pop	r16
    383e:	ff 90       	pop	r15
    3840:	ef 90       	pop	r14
    3842:	08 95       	ret

00003844 <hih820_getHumidityInUint16>:
		}
	}
}

uint16_t hih820_getHumidityInUint16(){
	return humidityIn16/10;
    3844:	20 91 ef 14 	lds	r18, 0x14EF	; 0x8014ef <humidityIn16>
    3848:	30 91 f0 14 	lds	r19, 0x14F0	; 0x8014f0 <humidityIn16+0x1>
    384c:	ad ec       	ldi	r26, 0xCD	; 205
    384e:	bc ec       	ldi	r27, 0xCC	; 204
    3850:	0e 94 88 31 	call	0x6310	; 0x6310 <__umulhisi3>
}
    3854:	96 95       	lsr	r25
    3856:	87 95       	ror	r24
    3858:	96 95       	lsr	r25
    385a:	87 95       	ror	r24
    385c:	96 95       	lsr	r25
    385e:	87 95       	ror	r24
    3860:	08 95       	ret

00003862 <hih820_getTemperatureInUint16>:

int16_t hih820_getTemperatureInUint16(){
	return temperatureIn16/10;
    3862:	80 91 ed 14 	lds	r24, 0x14ED	; 0x8014ed <temperatureIn16>
    3866:	90 91 ee 14 	lds	r25, 0x14EE	; 0x8014ee <temperatureIn16+0x1>
    386a:	6a e0       	ldi	r22, 0x0A	; 10
    386c:	70 e0       	ldi	r23, 0x00	; 0
    386e:	0e 94 4b 31 	call	0x6296	; 0x6296 <__divmodhi4>
    3872:	cb 01       	movw	r24, r22
}
    3874:	08 95       	ret

00003876 <aFunctionToSetBits>:
void aFunctionToSetBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Set bit 0 and bit 4 in xEventGroup. */
  uxBits = xEventGroupSetBits(
    3876:	40 e1       	ldi	r20, 0x10	; 16
    3878:	50 e0       	ldi	r21, 0x00	; 0
    387a:	60 e0       	ldi	r22, 0x00	; 0
    387c:	70 e0       	ldi	r23, 0x00	; 0
    387e:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <xEventGroupSetBits>
    3882:	08 95       	ret

00003884 <hih820_handler_task>:
	,  hih8120_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void hih820_handler_task(void *pvParameters)
{
    3884:	cf 93       	push	r28
    3886:	df 93       	push	r29
    3888:	00 d0       	rcall	.+0      	; 0x388a <hih820_handler_task+0x6>
    388a:	1f 92       	push	r1
    388c:	cd b7       	in	r28, 0x3d	; 61
    388e:	de b7       	in	r29, 0x3e	; 62
	printf("start1");
    3890:	8b e4       	ldi	r24, 0x4B	; 75
    3892:	93 e0       	ldi	r25, 0x03	; 3
    3894:	9f 93       	push	r25
    3896:	8f 93       	push	r24
    3898:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
	(void)pvParameters;
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    389c:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <xTaskGetTickCount>
    38a0:	69 83       	std	Y+1, r22	; 0x01
    38a2:	7a 83       	std	Y+2, r23	; 0x02
    38a4:	8b 83       	std	Y+3, r24	; 0x03
    38a6:	9c 83       	std	Y+4, r25	; 0x04
    38a8:	0f 90       	pop	r0
    38aa:	0f 90       	pop	r0
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    38ac:	48 ea       	ldi	r20, 0xA8	; 168
    38ae:	58 e4       	ldi	r21, 0x48	; 72
    38b0:	60 e0       	ldi	r22, 0x00	; 0
    38b2:	70 e0       	ldi	r23, 0x00	; 0
    38b4:	ce 01       	movw	r24, r28
    38b6:	01 96       	adiw	r24, 0x01	; 1
    38b8:	0e 94 0d 12 	call	0x241a	; 0x241a <xTaskDelayUntil>
		printf("start2");
    38bc:	82 e5       	ldi	r24, 0x52	; 82
    38be:	93 e0       	ldi	r25, 0x03	; 3
    38c0:	9f 93       	push	r25
    38c2:	8f 93       	push	r24
    38c4:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
		if (HIH8120_OK == hih8120_wakeup())
    38c8:	4f d2       	rcall	.+1182   	; 0x3d68 <hih8120_wakeup>
    38ca:	0f 90       	pop	r0
    38cc:	0f 90       	pop	r0
    38ce:	81 11       	cpse	r24, r1
    38d0:	ed cf       	rjmp	.-38     	; 0x38ac <hih820_handler_task+0x28>
		{
			printf("start4");
    38d2:	89 e5       	ldi	r24, 0x59	; 89
    38d4:	93 e0       	ldi	r25, 0x03	; 3
    38d6:	9f 93       	push	r25
    38d8:	8f 93       	push	r24
    38da:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
			vTaskDelay(50);
    38de:	62 e3       	ldi	r22, 0x32	; 50
    38e0:	70 e0       	ldi	r23, 0x00	; 0
    38e2:	80 e0       	ldi	r24, 0x00	; 0
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	0e 94 72 12 	call	0x24e4	; 0x24e4 <vTaskDelay>
			if (HIH8120_OK == hih8120_measure())
    38ea:	53 d2       	rcall	.+1190   	; 0x3d92 <hih8120_measure>
    38ec:	0f 90       	pop	r0
    38ee:	0f 90       	pop	r0
    38f0:	81 11       	cpse	r24, r1
    38f2:	dc cf       	rjmp	.-72     	; 0x38ac <hih820_handler_task+0x28>
			{
				printf("start5");
    38f4:	80 e6       	ldi	r24, 0x60	; 96
    38f6:	93 e0       	ldi	r25, 0x03	; 3
    38f8:	9f 93       	push	r25
    38fa:	8f 93       	push	r24
    38fc:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
				vTaskDelay(1);
    3900:	61 e0       	ldi	r22, 0x01	; 1
    3902:	70 e0       	ldi	r23, 0x00	; 0
    3904:	80 e0       	ldi	r24, 0x00	; 0
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	0e 94 72 12 	call	0x24e4	; 0x24e4 <vTaskDelay>
				humidityIn16 = hih8120_getHumidityPercent_x10();
    390c:	68 d2       	rcall	.+1232   	; 0x3dde <hih8120_getHumidityPercent_x10>
    390e:	90 93 f0 14 	sts	0x14F0, r25	; 0x8014f0 <humidityIn16+0x1>
    3912:	80 93 ef 14 	sts	0x14EF, r24	; 0x8014ef <humidityIn16>
				temperatureIn16 = hih8120_getTemperature_x10();
    3916:	89 d2       	rcall	.+1298   	; 0x3e2a <hih8120_getTemperature_x10>
    3918:	90 93 ee 14 	sts	0x14EE, r25	; 0x8014ee <temperatureIn16+0x1>
    391c:	80 93 ed 14 	sts	0x14ED, r24	; 0x8014ed <temperatureIn16>
				printf("Arrived here");
    3920:	87 e6       	ldi	r24, 0x67	; 103
    3922:	93 e0       	ldi	r25, 0x03	; 3
    3924:	9f 93       	push	r25
    3926:	8f 93       	push	r24
    3928:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
				aFunctionToSetBits(Application_getEventGroup());
    392c:	0e 94 89 01 	call	0x312	; 0x312 <Application_getEventGroup>
    3930:	a2 df       	rcall	.-188    	; 0x3876 <aFunctionToSetBits>
    3932:	0f 90       	pop	r0
    3934:	0f 90       	pop	r0
    3936:	0f 90       	pop	r0
    3938:	0f 90       	pop	r0
    393a:	b8 cf       	rjmp	.-144    	; 0x38ac <hih820_handler_task+0x28>

0000393c <create_semaphores>:
void hih8120_handler_initialise(UBaseType_t hih8120_handler_task_priority);
// Prototype for Application handler
void Application_handler_initialise(UBaseType_t Application_task_priority);

void create_semaphores(void)
{
    393c:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    393e:	80 91 f1 16 	lds	r24, 0x16F1	; 0x8016f1 <xTestSemaphore>
    3942:	90 91 f2 16 	lds	r25, 0x16F2	; 0x8016f2 <xTestSemaphore+0x1>
    3946:	89 2b       	or	r24, r25
    3948:	89 f4       	brne	.+34     	; 0x396c <create_semaphores+0x30>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    394a:	81 e0       	ldi	r24, 0x01	; 1
    394c:	0e 94 33 09 	call	0x1266	; 0x1266 <xQueueCreateMutex>
    3950:	90 93 f2 16 	sts	0x16F2, r25	; 0x8016f2 <xTestSemaphore+0x1>
    3954:	80 93 f1 16 	sts	0x16F1, r24	; 0x8016f1 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    3958:	00 97       	sbiw	r24, 0x00	; 0
    395a:	41 f0       	breq	.+16     	; 0x396c <create_semaphores+0x30>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    395c:	00 e0       	ldi	r16, 0x00	; 0
    395e:	20 e0       	ldi	r18, 0x00	; 0
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	a9 01       	movw	r20, r18
    3964:	60 e0       	ldi	r22, 0x00	; 0
    3966:	70 e0       	ldi	r23, 0x00	; 0
    3968:	0e 94 8f 08 	call	0x111e	; 0x111e <xQueueGenericSend>
		}
	}
}
    396c:	0f 91       	pop	r16
    396e:	08 95       	ret

00003970 <main>:
/*-----------------------------------------------------------*/
int main(void)
{
	// Must be done as the very first thing!!
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3970:	80 e0       	ldi	r24, 0x00	; 0
    3972:	0e 94 3c 28 	call	0x5078	; 0x5078 <stdio_initialise>
	// Let's create some semaphores
	create_semaphores();
    3976:	e2 df       	rcall	.-60     	; 0x393c <create_semaphores>
	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(6); // Priority 5 for internal task
    3978:	86 e0       	ldi	r24, 0x06	; 6
    397a:	0e 94 43 29 	call	0x5286	; 0x5286 <status_leds_initialise>
	//Initialize Application
	Application_handler_initialise(5);
    397e:	85 e0       	ldi	r24, 0x05	; 5
    3980:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Application_handler_initialise>
	//initialize CO2Sensor
	mh_z19_initialise(ser_USART3);
    3984:	83 e0       	ldi	r24, 0x03	; 3
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	21 d7       	rcall	.+3650   	; 0x47cc <mh_z19_initialise>
	//create CO2 task
	CO2Sensor_handler_initialise(4);
    398a:	84 e0       	ldi	r24, 0x04	; 4
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	0e 94 0e 02 	call	0x41c	; 0x41c <CO2Sensor_handler_initialise>
	//Create humidity temperature task and start with priority 3
	hih8120_handler_initialise(3);
    3992:	83 e0       	ldi	r24, 0x03	; 3
	//initialize rc_servo
	rc_servo_initialise();
    3994:	3a df       	rcall	.-396    	; 0x380a <hih8120_handler_initialise>
    3996:	9c d7       	rcall	.+3896   	; 0x48d0 <rc_servo_initialise>
	// Initialise the LoRaWAN driver with down-link buffer
	downLinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    3998:	41 e0       	ldi	r20, 0x01	; 1
    399a:	60 e0       	ldi	r22, 0x00	; 0
    399c:	70 e0       	ldi	r23, 0x00	; 0
    399e:	8c e2       	ldi	r24, 0x2C	; 44
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <xStreamBufferGenericCreate>
    39a6:	90 93 f0 16 	sts	0x16F0, r25	; 0x8016f0 <downLinkMessageBufferHandle+0x1>
    39aa:	80 93 ef 16 	sts	0x16EF, r24	; 0x8016ef <downLinkMessageBufferHandle>
	lora_driver_initialise(1, downLinkMessageBufferHandle);
    39ae:	bc 01       	movw	r22, r24
    39b0:	81 e0       	ldi	r24, 0x01	; 1
	// Create LoRaWAN task and start it up with priority 2
	lora_handler_initialise(2);
    39b2:	65 d3       	rcall	.+1738   	; 0x407e <lora_driver_initialise>
    39b4:	82 e0       	ldi	r24, 0x02	; 2
    39b6:	7f d1       	rcall	.+766    	; 0x3cb6 <lora_handler_initialise>
	//Create LoRaWAN task and start with priority 1
	DownLinkHandler_lora_handler_initialise(1,downLinkMessageBufferHandle);
    39b8:	60 91 ef 16 	lds	r22, 0x16EF	; 0x8016ef <downLinkMessageBufferHandle>
    39bc:	70 91 f0 16 	lds	r23, 0x16F0	; 0x8016f0 <downLinkMessageBufferHandle+0x1>
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	0e 94 c9 02 	call	0x592	; 0x592 <DownLinkHandler_lora_handler_initialise>
	
	printf("Program Started!!\n");
    39c6:	84 e7       	ldi	r24, 0x74	; 116
    39c8:	93 e0       	ldi	r25, 0x03	; 3
    39ca:	0e 94 86 34 	call	0x690c	; 0x690c <puts>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    39ce:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <vTaskStartScheduler>
    39d2:	ff cf       	rjmp	.-2      	; 0x39d2 <main+0x62>

000039d4 <SensorDataPackageHandler_SetCO2>:
int16_t tempIn16 = 0.0;
uint16_t co2_ppmIn16 = 0.0;
static lora_driver_payload_t _uplink_payload;

void SensorDataPackageHandler_SetCO2(uint16_t co2){
	co2_ppmIn16 = co2;
    39d4:	90 93 08 15 	sts	0x1508, r25	; 0x801508 <co2_ppmIn16+0x1>
    39d8:	80 93 07 15 	sts	0x1507, r24	; 0x801507 <co2_ppmIn16>
    39dc:	08 95       	ret

000039de <SensorDataPackageHandler_SetHumidity>:
}

void SensorDataPackageHandler_SetHumidity(uint16_t humidity){
	humIn16 = humidity;
    39de:	90 93 0c 15 	sts	0x150C, r25	; 0x80150c <humIn16+0x1>
    39e2:	80 93 0b 15 	sts	0x150B, r24	; 0x80150b <humIn16>
    39e6:	08 95       	ret

000039e8 <SensorDataPackageHandler_SetTemperature>:
}

void SensorDataPackageHandler_SetTemperature(int16_t temperature){
	tempIn16 = temperature;
    39e8:	90 93 0a 15 	sts	0x150A, r25	; 0x80150a <tempIn16+0x1>
    39ec:	80 93 09 15 	sts	0x1509, r24	; 0x801509 <tempIn16>
    39f0:	08 95       	ret

000039f2 <SensorDataPackageHandler_getLoRaPayload>:
}

lora_driver_payload_t SensorDataPackageHandler_getLoRaPayload(){
    39f2:	cf 93       	push	r28
    39f4:	df 93       	push	r29
    39f6:	ec 01       	movw	r28, r24
	printf("STARTEDSensorDataPackageHandler");
    39f8:	86 e8       	ldi	r24, 0x86	; 134
    39fa:	93 e0       	ldi	r25, 0x03	; 3
    39fc:	9f 93       	push	r25
    39fe:	8f 93       	push	r24
    3a00:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
	printf("and this is the changed hum %u\n", humIn16);
    3a04:	80 91 0c 15 	lds	r24, 0x150C	; 0x80150c <humIn16+0x1>
    3a08:	8f 93       	push	r24
    3a0a:	80 91 0b 15 	lds	r24, 0x150B	; 0x80150b <humIn16>
    3a0e:	8f 93       	push	r24
    3a10:	86 ea       	ldi	r24, 0xA6	; 166
    3a12:	93 e0       	ldi	r25, 0x03	; 3
    3a14:	9f 93       	push	r25
    3a16:	8f 93       	push	r24
    3a18:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
	printf("and also the changed temp %u\n", tempIn16);
    3a1c:	80 91 0a 15 	lds	r24, 0x150A	; 0x80150a <tempIn16+0x1>
    3a20:	8f 93       	push	r24
    3a22:	80 91 09 15 	lds	r24, 0x1509	; 0x801509 <tempIn16>
    3a26:	8f 93       	push	r24
    3a28:	86 ec       	ldi	r24, 0xC6	; 198
    3a2a:	93 e0       	ldi	r25, 0x03	; 3
    3a2c:	9f 93       	push	r25
    3a2e:	8f 93       	push	r24
    3a30:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
	printf("and also the changed CO2 %u\n", co2_ppmIn16);
    3a34:	80 91 08 15 	lds	r24, 0x1508	; 0x801508 <co2_ppmIn16+0x1>
    3a38:	8f 93       	push	r24
    3a3a:	80 91 07 15 	lds	r24, 0x1507	; 0x801507 <co2_ppmIn16>
    3a3e:	8f 93       	push	r24
    3a40:	84 ee       	ldi	r24, 0xE4	; 228
    3a42:	93 e0       	ldi	r25, 0x03	; 3
    3a44:	9f 93       	push	r25
    3a46:	8f 93       	push	r24
    3a48:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
	
	_uplink_payload.len = 6;
    3a4c:	e1 ef       	ldi	r30, 0xF1	; 241
    3a4e:	f4 e1       	ldi	r31, 0x14	; 20
    3a50:	86 e0       	ldi	r24, 0x06	; 6
    3a52:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.portNo = 2;
    3a54:	82 e0       	ldi	r24, 0x02	; 2
    3a56:	80 83       	st	Z, r24
	_uplink_payload.bytes[0] = humIn16 >> 8;
    3a58:	80 91 0b 15 	lds	r24, 0x150B	; 0x80150b <humIn16>
    3a5c:	90 91 0c 15 	lds	r25, 0x150C	; 0x80150c <humIn16+0x1>
    3a60:	92 83       	std	Z+2, r25	; 0x02
	_uplink_payload.bytes[1] = humIn16 & 0xFF;
    3a62:	83 83       	std	Z+3, r24	; 0x03
	_uplink_payload.bytes[2] = tempIn16 >> 8;
    3a64:	80 91 09 15 	lds	r24, 0x1509	; 0x801509 <tempIn16>
    3a68:	90 91 0a 15 	lds	r25, 0x150A	; 0x80150a <tempIn16+0x1>
    3a6c:	94 83       	std	Z+4, r25	; 0x04
	_uplink_payload.bytes[3] = tempIn16 & 0xFF;
    3a6e:	85 83       	std	Z+5, r24	; 0x05
	_uplink_payload.bytes[4] = co2_ppmIn16 >> 8;
    3a70:	80 91 07 15 	lds	r24, 0x1507	; 0x801507 <co2_ppmIn16>
    3a74:	90 91 08 15 	lds	r25, 0x1508	; 0x801508 <co2_ppmIn16+0x1>
    3a78:	96 83       	std	Z+6, r25	; 0x06
	_uplink_payload.bytes[5] = co2_ppmIn16 & 0xFF;
    3a7a:	87 83       	std	Z+7, r24	; 0x07
	return _uplink_payload;
    3a7c:	86 e1       	ldi	r24, 0x16	; 22
    3a7e:	de 01       	movw	r26, r28
    3a80:	01 90       	ld	r0, Z+
    3a82:	0d 92       	st	X+, r0
    3a84:	8a 95       	dec	r24
    3a86:	e1 f7       	brne	.-8      	; 0x3a80 <SensorDataPackageHandler_getLoRaPayload+0x8e>
    3a88:	8d b7       	in	r24, 0x3d	; 61
    3a8a:	9e b7       	in	r25, 0x3e	; 62
    3a8c:	0e 96       	adiw	r24, 0x0e	; 14
    3a8e:	0f b6       	in	r0, 0x3f	; 63
    3a90:	f8 94       	cli
    3a92:	9e bf       	out	0x3e, r25	; 62
    3a94:	0f be       	out	0x3f, r0	; 63
    3a96:	8d bf       	out	0x3d, r24	; 61
    3a98:	ce 01       	movw	r24, r28
    3a9a:	df 91       	pop	r29
    3a9c:	cf 91       	pop	r28
    3a9e:	08 95       	ret

00003aa0 <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    3aa0:	cf 93       	push	r28
    3aa2:	df 93       	push	r29
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	0e 94 91 29 	call	0x5322	; 0x5322 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3aaa:	37 d3       	rcall	.+1646   	; 0x411a <lora_driver_rn2483FactoryReset>
    3aac:	b3 d5       	rcall	.+2918   	; 0x4614 <lora_driver_mapReturnCodeToText>
    3aae:	9f 93       	push	r25
    3ab0:	8f 93       	push	r24
    3ab2:	81 e0       	ldi	r24, 0x01	; 1
    3ab4:	94 e0       	ldi	r25, 0x04	; 4
    3ab6:	9f 93       	push	r25
    3ab8:	8f 93       	push	r24
    3aba:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3abe:	ab d4       	rcall	.+2390   	; 0x4416 <lora_driver_configureToEu868>
    3ac0:	a9 d5       	rcall	.+2898   	; 0x4614 <lora_driver_mapReturnCodeToText>
    3ac2:	9f 93       	push	r25
    3ac4:	8f 93       	push	r24
    3ac6:	84 e1       	ldi	r24, 0x14	; 20
    3ac8:	94 e0       	ldi	r25, 0x04	; 4
    3aca:	9f 93       	push	r25
    3acc:	8f 93       	push	r24
    3ace:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
    3ad2:	83 e2       	ldi	r24, 0x23	; 35

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3ad4:	95 e1       	ldi	r25, 0x15	; 21
    3ad6:	33 d3       	rcall	.+1638   	; 0x413e <lora_driver_getRn2483Hweui>
    3ad8:	9d d5       	rcall	.+2874   	; 0x4614 <lora_driver_mapReturnCodeToText>
    3ada:	c3 e2       	ldi	r28, 0x23	; 35
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3adc:	d5 e1       	ldi	r29, 0x15	; 21
    3ade:	df 93       	push	r29
    3ae0:	cf 93       	push	r28
    3ae2:	9f 93       	push	r25
    3ae4:	8f 93       	push	r24
    3ae6:	8d e2       	ldi	r24, 0x2D	; 45
    3ae8:	94 e0       	ldi	r25, 0x04	; 4
    3aea:	9f 93       	push	r25
    3aec:	8f 93       	push	r24
    3aee:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
    3af2:	ce 01       	movw	r24, r28

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3af4:	40 d3       	rcall	.+1664   	; 0x4176 <lora_driver_setDeviceIdentifier>
    3af6:	8e d5       	rcall	.+2844   	; 0x4614 <lora_driver_mapReturnCodeToText>
    3af8:	9f 93       	push	r25
    3afa:	8f 93       	push	r24
    3afc:	df 93       	push	r29
    3afe:	cf 93       	push	r28
    3b00:	81 e4       	ldi	r24, 0x41	; 65
    3b02:	94 e0       	ldi	r25, 0x04	; 4
    3b04:	9f 93       	push	r25
    3b06:	8f 93       	push	r24
    3b08:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
    3b0c:	ae 01       	movw	r20, r28

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3b0e:	66 e5       	ldi	r22, 0x56	; 86
    3b10:	74 e0       	ldi	r23, 0x04	; 4
    3b12:	87 e7       	ldi	r24, 0x77	; 119
    3b14:	94 e0       	ldi	r25, 0x04	; 4
    3b16:	5d d5       	rcall	.+2746   	; 0x45d2 <lora_driver_setOtaaIdentity>
    3b18:	7d d5       	rcall	.+2810   	; 0x4614 <lora_driver_mapReturnCodeToText>
    3b1a:	9f 93       	push	r25
    3b1c:	8f 93       	push	r24
    3b1e:	df 93       	push	r29
    3b20:	cf 93       	push	r28
    3b22:	86 e5       	ldi	r24, 0x56	; 86
    3b24:	94 e0       	ldi	r25, 0x04	; 4
    3b26:	9f 93       	push	r25
    3b28:	8f 93       	push	r24
    3b2a:	87 e7       	ldi	r24, 0x77	; 119
    3b2c:	94 e0       	ldi	r25, 0x04	; 4
    3b2e:	9f 93       	push	r25
    3b30:	8f 93       	push	r24
    3b32:	88 e8       	ldi	r24, 0x88	; 136
    3b34:	94 e0       	ldi	r25, 0x04	; 4
    3b36:	9f 93       	push	r25
    3b38:	8f 93       	push	r24
    3b3a:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
    3b3e:	4e d3       	rcall	.+1692   	; 0x41dc <lora_driver_saveMac>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3b40:	69 d5       	rcall	.+2770   	; 0x4614 <lora_driver_mapReturnCodeToText>
    3b42:	9f 93       	push	r25
    3b44:	8f 93       	push	r24
    3b46:	8e eb       	ldi	r24, 0xBE	; 190
    3b48:	94 e0       	ldi	r25, 0x04	; 4
    3b4a:	9f 93       	push	r25
    3b4c:	8f 93       	push	r24
    3b4e:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
    3b52:	8d b7       	in	r24, 0x3d	; 61

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3b54:	9e b7       	in	r25, 0x3e	; 62
    3b56:	82 96       	adiw	r24, 0x22	; 34
    3b58:	0f b6       	in	r0, 0x3f	; 63
    3b5a:	f8 94       	cli
    3b5c:	9e bf       	out	0x3e, r25	; 62
    3b5e:	0f be       	out	0x3f, r0	; 63
    3b60:	8d bf       	out	0x3d, r24	; 61
    3b62:	81 e0       	ldi	r24, 0x01	; 1
    3b64:	35 d4       	rcall	.+2154   	; 0x43d0 <lora_driver_setAdaptiveDataRate>
    3b66:	56 d5       	rcall	.+2732   	; 0x4614 <lora_driver_mapReturnCodeToText>
    3b68:	9f 93       	push	r25
    3b6a:	8f 93       	push	r24
    3b6c:	8d ec       	ldi	r24, 0xCD	; 205
    3b6e:	94 e0       	ldi	r25, 0x04	; 4
    3b70:	9f 93       	push	r25
    3b72:	8f 93       	push	r24
    3b74:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
    3b78:	84 ef       	ldi	r24, 0xF4	; 244

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3b7a:	91 e0       	ldi	r25, 0x01	; 1
    3b7c:	34 d4       	rcall	.+2152   	; 0x43e6 <lora_driver_setReceiveDelay>
    3b7e:	4a d5       	rcall	.+2708   	; 0x4614 <lora_driver_mapReturnCodeToText>
    3b80:	9f 93       	push	r25
    3b82:	8f 93       	push	r24
    3b84:	81 e0       	ldi	r24, 0x01	; 1
    3b86:	8f 93       	push	r24
    3b88:	84 ef       	ldi	r24, 0xF4	; 244
    3b8a:	8f 93       	push	r24
    3b8c:	8e ee       	ldi	r24, 0xEE	; 238
    3b8e:	94 e0       	ldi	r25, 0x04	; 4
    3b90:	9f 93       	push	r25
    3b92:	8f 93       	push	r24
    3b94:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
    3b98:	8d b7       	in	r24, 0x3d	; 61
    3b9a:	9e b7       	in	r25, 0x3e	; 62
    3b9c:	0a 96       	adiw	r24, 0x0a	; 10
    3b9e:	0f b6       	in	r0, 0x3f	; 63
    3ba0:	f8 94       	cli
    3ba2:	9e bf       	out	0x3e, r25	; 62
    3ba4:	0f be       	out	0x3f, r0	; 63
    3ba6:	8d bf       	out	0x3d, r24	; 61
    3ba8:	ca e0       	ldi	r28, 0x0A	; 10

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3baa:	80 e0       	ldi	r24, 0x00	; 0
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3bac:	1d d3       	rcall	.+1594   	; 0x41e8 <lora_driver_join>
    3bae:	d8 2f       	mov	r29, r24
    3bb0:	31 d5       	rcall	.+2658   	; 0x4614 <lora_driver_mapReturnCodeToText>
    3bb2:	9f 93       	push	r25
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3bb4:	8f 93       	push	r24
    3bb6:	1f 92       	push	r1
    3bb8:	cf 93       	push	r28
    3bba:	8e e0       	ldi	r24, 0x0E	; 14
    3bbc:	95 e0       	ldi	r25, 0x05	; 5
    3bbe:	9f 93       	push	r25
    3bc0:	8f 93       	push	r24
    3bc2:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
    3bc6:	0f 90       	pop	r0
    3bc8:	0f 90       	pop	r0
    3bca:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3bcc:	0f 90       	pop	r0
    3bce:	0f 90       	pop	r0
    3bd0:	0f 90       	pop	r0
    3bd2:	d8 30       	cpi	r29, 0x08	; 8
    3bd4:	59 f0       	breq	.+22     	; 0x3bec <_lora_setup+0x14c>
    3bd6:	80 e0       	ldi	r24, 0x00	; 0
    3bd8:	0e 94 f5 29 	call	0x53ea	; 0x53ea <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3bdc:	66 e3       	ldi	r22, 0x36	; 54
    3bde:	71 e0       	ldi	r23, 0x01	; 1
    3be0:	80 e0       	ldi	r24, 0x00	; 0
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	0e 94 72 12 	call	0x24e4	; 0x24e4 <vTaskDelay>
    3be8:	c1 50       	subi	r28, 0x01	; 1
    3bea:	f9 f6       	brne	.-66     	; 0x3baa <_lora_setup+0x10a>
    3bec:	d8 30       	cpi	r29, 0x08	; 8
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3bee:	21 f4       	brne	.+8      	; 0x3bf8 <_lora_setup+0x158>
    3bf0:	81 e0       	ldi	r24, 0x01	; 1

	if (rc == LORA_ACCEPTED)
    3bf2:	0e 94 d7 29 	call	0x53ae	; 0x53ae <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3bf6:	09 c0       	rjmp	.+18     	; 0x3c0a <_lora_setup+0x16a>
    3bf8:	81 e0       	ldi	r24, 0x01	; 1
    3bfa:	0e 94 e6 29 	call	0x53cc	; 0x53cc <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3bfe:	80 e0       	ldi	r24, 0x00	; 0
    3c00:	0e 94 b4 29 	call	0x5368	; 0x5368 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3c04:	0e 94 87 06 	call	0xd0e	; 0xd0e <vPortYield>
    3c08:	fd cf       	rjmp	.-6      	; 0x3c04 <_lora_setup+0x164>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3c0a:	df 91       	pop	r29
    3c0c:	cf 91       	pop	r28
    3c0e:	08 95       	ret

00003c10 <lora_handler_task>:
		}
	}
}
    3c10:	cf 93       	push	r28
    3c12:	df 93       	push	r29
    3c14:	cd b7       	in	r28, 0x3d	; 61

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    3c16:	de b7       	in	r29, 0x3e	; 62
    3c18:	6a 97       	sbiw	r28, 0x1a	; 26
    3c1a:	0f b6       	in	r0, 0x3f	; 63
    3c1c:	f8 94       	cli
    3c1e:	de bf       	out	0x3e, r29	; 62
    3c20:	0f be       	out	0x3f, r0	; 63
    3c22:	cd bf       	out	0x3d, r28	; 61
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3c24:	81 e0       	ldi	r24, 0x01	; 1
    3c26:	6b d2       	rcall	.+1238   	; 0x40fe <lora_driver_resetRn2483>
	vTaskDelay(2);
    3c28:	62 e0       	ldi	r22, 0x02	; 2
    3c2a:	70 e0       	ldi	r23, 0x00	; 0
    3c2c:	80 e0       	ldi	r24, 0x00	; 0
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	0e 94 72 12 	call	0x24e4	; 0x24e4 <vTaskDelay>
	lora_driver_resetRn2483(0);
    3c34:	80 e0       	ldi	r24, 0x00	; 0
    3c36:	63 d2       	rcall	.+1222   	; 0x40fe <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3c38:	66 e9       	ldi	r22, 0x96	; 150
    3c3a:	70 e0       	ldi	r23, 0x00	; 0
    3c3c:	80 e0       	ldi	r24, 0x00	; 0
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	0e 94 72 12 	call	0x24e4	; 0x24e4 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3c44:	15 d2       	rcall	.+1066   	; 0x4070 <lora_driver_flushBuffers>

	_lora_setup();
    3c46:	2c df       	rcall	.-424    	; 0x3aa0 <_lora_setup>
    3c48:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <xTaskGetTickCount>


	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    3c4c:	69 83       	std	Y+1, r22	; 0x01
    3c4e:	7a 83       	std	Y+2, r23	; 0x02
    3c50:	8b 83       	std	Y+3, r24	; 0x03
    3c52:	9c 83       	std	Y+4, r25	; 0x04
    3c54:	48 ea       	ldi	r20, 0xA8	; 168
	
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3c56:	58 e4       	ldi	r21, 0x48	; 72
    3c58:	60 e0       	ldi	r22, 0x00	; 0
    3c5a:	70 e0       	ldi	r23, 0x00	; 0
    3c5c:	ce 01       	movw	r24, r28
    3c5e:	01 96       	adiw	r24, 0x01	; 1
    3c60:	0e 94 0d 12 	call	0x241a	; 0x241a <xTaskDelayUntil>
    3c64:	8e e2       	ldi	r24, 0x2E	; 46
		printf("startLoraTask");
    3c66:	95 e0       	ldi	r25, 0x05	; 5
    3c68:	9f 93       	push	r25
    3c6a:	8f 93       	push	r24
    3c6c:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
		_uplink_payload = SensorDataPackageHandler_getLoRaPayload();
    3c70:	ce 01       	movw	r24, r28
    3c72:	05 96       	adiw	r24, 0x05	; 5
    3c74:	be de       	rcall	.-644    	; 0x39f2 <SensorDataPackageHandler_getLoRaPayload>
    3c76:	86 e1       	ldi	r24, 0x16	; 22
    3c78:	fe 01       	movw	r30, r28
    3c7a:	35 96       	adiw	r30, 0x05	; 5
    3c7c:	ad e0       	ldi	r26, 0x0D	; 13
    3c7e:	b5 e1       	ldi	r27, 0x15	; 21
    3c80:	01 90       	ld	r0, Z+
    3c82:	0d 92       	st	X+, r0
    3c84:	8a 95       	dec	r24
    3c86:	e1 f7       	brne	.-8      	; 0x3c80 <lora_handler_task+0x70>
    3c88:	83 e0       	ldi	r24, 0x03	; 3
		status_leds_shortPuls(led_ST4);  // OPTIONAL
    3c8a:	0e 94 07 2a 	call	0x540e	; 0x540e <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3c8e:	6d e0       	ldi	r22, 0x0D	; 13
    3c90:	75 e1       	ldi	r23, 0x15	; 21
    3c92:	80 e0       	ldi	r24, 0x00	; 0
    3c94:	d2 d2       	rcall	.+1444   	; 0x423a <lora_driver_sendUploadMessage>
    3c96:	be d4       	rcall	.+2428   	; 0x4614 <lora_driver_mapReturnCodeToText>
    3c98:	9f 93       	push	r25
    3c9a:	8f 93       	push	r24
    3c9c:	8c e3       	ldi	r24, 0x3C	; 60
    3c9e:	95 e0       	ldi	r25, 0x05	; 5
    3ca0:	9f 93       	push	r25
    3ca2:	8f 93       	push	r24
    3ca4:	0e 94 73 34 	call	0x68e6	; 0x68e6 <printf>
    3ca8:	0f 90       	pop	r0
    3caa:	0f 90       	pop	r0
    3cac:	0f 90       	pop	r0
    3cae:	0f 90       	pop	r0
    3cb0:	0f 90       	pop	r0
    3cb2:	0f 90       	pop	r0
    3cb4:	cf cf       	rjmp	.-98     	; 0x3c54 <lora_handler_task+0x44>

00003cb6 <lora_handler_initialise>:
    3cb6:	ef 92       	push	r14
    3cb8:	ff 92       	push	r15

static lora_driver_payload_t _uplink_payload;


void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    3cba:	0f 93       	push	r16
	xTaskCreate(
    3cbc:	e1 2c       	mov	r14, r1
    3cbe:	f1 2c       	mov	r15, r1
    3cc0:	08 2f       	mov	r16, r24
    3cc2:	20 e0       	ldi	r18, 0x00	; 0
    3cc4:	30 e0       	ldi	r19, 0x00	; 0
    3cc6:	48 e8       	ldi	r20, 0x88	; 136
    3cc8:	51 e0       	ldi	r21, 0x01	; 1
    3cca:	61 e5       	ldi	r22, 0x51	; 81
    3ccc:	75 e0       	ldi	r23, 0x05	; 5
    3cce:	88 e0       	ldi	r24, 0x08	; 8
    3cd0:	9e e1       	ldi	r25, 0x1E	; 30
    3cd2:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3cd6:	0f 91       	pop	r16
    3cd8:	ff 90       	pop	r15
    3cda:	ef 90       	pop	r14
    3cdc:	08 95       	ret

00003cde <_hihTwiCallback>:
    3cde:	65 30       	cpi	r22, 0x05	; 5
    3ce0:	f1 f4       	brne	.+60     	; 0x3d1e <_hihTwiCallback+0x40>
    3ce2:	fa 01       	movw	r30, r20
    3ce4:	80 81       	ld	r24, Z
    3ce6:	8f 73       	andi	r24, 0x3F	; 63
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	98 2f       	mov	r25, r24
    3cec:	88 27       	eor	r24, r24
    3cee:	21 81       	ldd	r18, Z+1	; 0x01
    3cf0:	82 2b       	or	r24, r18
    3cf2:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3cf6:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3cfa:	82 81       	ldd	r24, Z+2	; 0x02
    3cfc:	f0 e4       	ldi	r31, 0x40	; 64
    3cfe:	8f 9f       	mul	r24, r31
    3d00:	c0 01       	movw	r24, r0
    3d02:	11 24       	eor	r1, r1
    3d04:	fa 01       	movw	r30, r20
    3d06:	23 81       	ldd	r18, Z+3	; 0x03
    3d08:	26 95       	lsr	r18
    3d0a:	26 95       	lsr	r18
    3d0c:	82 2b       	or	r24, r18
    3d0e:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3d12:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3d16:	81 e0       	ldi	r24, 0x01	; 1
    3d18:	80 93 87 15 	sts	0x1587, r24	; 0x801587 <_measuringIsReady>
    3d1c:	08 95       	ret
    3d1e:	64 30       	cpi	r22, 0x04	; 4
    3d20:	51 f0       	breq	.+20     	; 0x3d36 <_hihTwiCallback+0x58>
    3d22:	80 e0       	ldi	r24, 0x00	; 0
    3d24:	90 e4       	ldi	r25, 0x40	; 64
    3d26:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3d2a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3d2e:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3d32:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3d36:	08 95       	ret

00003d38 <hih8120_initialise>:
    3d38:	0f 93       	push	r16
    3d3a:	1f 93       	push	r17
    3d3c:	0f e6       	ldi	r16, 0x6F	; 111
    3d3e:	1e e1       	ldi	r17, 0x1E	; 30
    3d40:	20 e0       	ldi	r18, 0x00	; 0
    3d42:	34 e2       	ldi	r19, 0x24	; 36
    3d44:	44 ef       	ldi	r20, 0xF4	; 244
    3d46:	50 e0       	ldi	r21, 0x00	; 0
    3d48:	60 e0       	ldi	r22, 0x00	; 0
    3d4a:	87 e2       	ldi	r24, 0x27	; 39
    3d4c:	0e 94 2a 2a 	call	0x5454	; 0x5454 <twiCreate>
    3d50:	90 93 89 15 	sts	0x1589, r25	; 0x801589 <_hih8120Handler+0x1>
    3d54:	80 93 88 15 	sts	0x1588, r24	; 0x801588 <_hih8120Handler>
    3d58:	21 e0       	ldi	r18, 0x01	; 1
    3d5a:	89 2b       	or	r24, r25
    3d5c:	09 f0       	breq	.+2      	; 0x3d60 <hih8120_initialise+0x28>
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	82 2f       	mov	r24, r18
    3d62:	1f 91       	pop	r17
    3d64:	0f 91       	pop	r16
    3d66:	08 95       	ret

00003d68 <hih8120_wakeup>:
    3d68:	80 91 88 15 	lds	r24, 0x1588	; 0x801588 <_hih8120Handler>
    3d6c:	90 91 89 15 	lds	r25, 0x1589	; 0x801589 <_hih8120Handler+0x1>
    3d70:	00 97       	sbiw	r24, 0x00	; 0
    3d72:	59 f0       	breq	.+22     	; 0x3d8a <hih8120_wakeup+0x22>
    3d74:	40 e0       	ldi	r20, 0x00	; 0
    3d76:	60 e0       	ldi	r22, 0x00	; 0
    3d78:	70 e0       	ldi	r23, 0x00	; 0
    3d7a:	0e 94 7b 2a 	call	0x54f6	; 0x54f6 <twiTransmit>
    3d7e:	84 30       	cpi	r24, 0x04	; 4
    3d80:	31 f4       	brne	.+12     	; 0x3d8e <hih8120_wakeup+0x26>
    3d82:	10 92 87 15 	sts	0x1587, r1	; 0x801587 <_measuringIsReady>
    3d86:	80 e0       	ldi	r24, 0x00	; 0
    3d88:	08 95       	ret
    3d8a:	82 e0       	ldi	r24, 0x02	; 2
    3d8c:	08 95       	ret
    3d8e:	83 e0       	ldi	r24, 0x03	; 3
    3d90:	08 95       	ret

00003d92 <hih8120_measure>:
    3d92:	80 91 88 15 	lds	r24, 0x1588	; 0x801588 <_hih8120Handler>
    3d96:	90 91 89 15 	lds	r25, 0x1589	; 0x801589 <_hih8120Handler+0x1>
    3d9a:	00 97       	sbiw	r24, 0x00	; 0
    3d9c:	39 f0       	breq	.+14     	; 0x3dac <hih8120_measure+0x1a>
    3d9e:	64 e0       	ldi	r22, 0x04	; 4
    3da0:	0e 94 c7 2a 	call	0x558e	; 0x558e <twiReceive>
    3da4:	85 30       	cpi	r24, 0x05	; 5
    3da6:	21 f0       	breq	.+8      	; 0x3db0 <hih8120_measure+0x1e>
    3da8:	83 e0       	ldi	r24, 0x03	; 3
    3daa:	08 95       	ret
    3dac:	82 e0       	ldi	r24, 0x02	; 2
    3dae:	08 95       	ret
    3db0:	80 e0       	ldi	r24, 0x00	; 0
    3db2:	08 95       	ret

00003db4 <hih8120_getHumidity>:
    3db4:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3db8:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3dbc:	80 e0       	ldi	r24, 0x00	; 0
    3dbe:	90 e0       	ldi	r25, 0x00	; 0
    3dc0:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__floatunsisf>
    3dc4:	20 e0       	ldi	r18, 0x00	; 0
    3dc6:	30 e0       	ldi	r19, 0x00	; 0
    3dc8:	48 ec       	ldi	r20, 0xC8	; 200
    3dca:	52 e4       	ldi	r21, 0x42	; 66
    3dcc:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <__mulsf3>
    3dd0:	20 e0       	ldi	r18, 0x00	; 0
    3dd2:	38 ef       	ldi	r19, 0xF8	; 248
    3dd4:	4f e7       	ldi	r20, 0x7F	; 127
    3dd6:	56 e4       	ldi	r21, 0x46	; 70
    3dd8:	0c 94 38 2c 	jmp	0x5870	; 0x5870 <__divsf3>
    3ddc:	08 95       	ret

00003dde <hih8120_getHumidityPercent_x10>:
    3dde:	ea df       	rcall	.-44     	; 0x3db4 <hih8120_getHumidity>
    3de0:	20 e0       	ldi	r18, 0x00	; 0
    3de2:	30 e0       	ldi	r19, 0x00	; 0
    3de4:	40 e2       	ldi	r20, 0x20	; 32
    3de6:	51 e4       	ldi	r21, 0x41	; 65
    3de8:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <__mulsf3>
    3dec:	0e 94 a5 2c 	call	0x594a	; 0x594a <__fixunssfsi>
    3df0:	cb 01       	movw	r24, r22
    3df2:	08 95       	ret

00003df4 <hih8120_getTemperature>:
    3df4:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3df8:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3dfc:	80 e0       	ldi	r24, 0x00	; 0
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__floatunsisf>
    3e04:	20 e0       	ldi	r18, 0x00	; 0
    3e06:	30 e0       	ldi	r19, 0x00	; 0
    3e08:	45 e2       	ldi	r20, 0x25	; 37
    3e0a:	53 e4       	ldi	r21, 0x43	; 67
    3e0c:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <__mulsf3>
    3e10:	20 e0       	ldi	r18, 0x00	; 0
    3e12:	38 ef       	ldi	r19, 0xF8	; 248
    3e14:	4f e7       	ldi	r20, 0x7F	; 127
    3e16:	56 e4       	ldi	r21, 0x46	; 70
    3e18:	0e 94 38 2c 	call	0x5870	; 0x5870 <__divsf3>
    3e1c:	20 e0       	ldi	r18, 0x00	; 0
    3e1e:	30 e0       	ldi	r19, 0x00	; 0
    3e20:	40 e2       	ldi	r20, 0x20	; 32
    3e22:	52 e4       	ldi	r21, 0x42	; 66
    3e24:	0c 94 d3 2b 	jmp	0x57a6	; 0x57a6 <__subsf3>
    3e28:	08 95       	ret

00003e2a <hih8120_getTemperature_x10>:
    3e2a:	e4 df       	rcall	.-56     	; 0x3df4 <hih8120_getTemperature>
    3e2c:	20 e0       	ldi	r18, 0x00	; 0
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
    3e30:	40 e2       	ldi	r20, 0x20	; 32
    3e32:	51 e4       	ldi	r21, 0x41	; 65
    3e34:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <__mulsf3>
    3e38:	0e 94 a0 2c 	call	0x5940	; 0x5940 <__fixsfsi>
    3e3c:	cb 01       	movw	r24, r22
    3e3e:	08 95       	ret

00003e40 <_serialCallBack>:
    3e40:	0f 93       	push	r16
    3e42:	1f 93       	push	r17
    3e44:	cf 93       	push	r28
    3e46:	df 93       	push	r29
    3e48:	1f 92       	push	r1
    3e4a:	1f 92       	push	r1
    3e4c:	cd b7       	in	r28, 0x3d	; 61
    3e4e:	de b7       	in	r29, 0x3e	; 62
    3e50:	8c 01       	movw	r16, r24
    3e52:	19 82       	std	Y+1, r1	; 0x01
    3e54:	2d c0       	rjmp	.+90     	; 0x3eb0 <_serialCallBack+0x70>
    3e56:	e0 91 ee 15 	lds	r30, 0x15EE	; 0x8015ee <rec_buf_inp.2878>
    3e5a:	ec 32       	cpi	r30, 0x2C	; 44
    3e5c:	50 f4       	brcc	.+20     	; 0x3e72 <_serialCallBack+0x32>
    3e5e:	81 e0       	ldi	r24, 0x01	; 1
    3e60:	8e 0f       	add	r24, r30
    3e62:	80 93 ee 15 	sts	0x15EE, r24	; 0x8015ee <rec_buf_inp.2878>
    3e66:	f0 e0       	ldi	r31, 0x00	; 0
    3e68:	e0 5e       	subi	r30, 0xE0	; 224
    3e6a:	f9 4e       	sbci	r31, 0xE9	; 233
    3e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e6e:	80 83       	st	Z, r24
    3e70:	02 c0       	rjmp	.+4      	; 0x3e76 <_serialCallBack+0x36>
    3e72:	10 92 ee 15 	sts	0x15EE, r1	; 0x8015ee <rec_buf_inp.2878>
    3e76:	8a 81       	ldd	r24, Y+2	; 0x02
    3e78:	8a 30       	cpi	r24, 0x0A	; 10
    3e7a:	d1 f4       	brne	.+52     	; 0x3eb0 <_serialCallBack+0x70>
    3e7c:	40 91 ee 15 	lds	r20, 0x15EE	; 0x8015ee <rec_buf_inp.2878>
    3e80:	50 e0       	ldi	r21, 0x00	; 0
    3e82:	fa 01       	movw	r30, r20
    3e84:	e2 5e       	subi	r30, 0xE2	; 226
    3e86:	f9 4e       	sbci	r31, 0xE9	; 233
    3e88:	10 82       	st	Z, r1
    3e8a:	41 50       	subi	r20, 0x01	; 1
    3e8c:	51 09       	sbc	r21, r1
    3e8e:	9e 01       	movw	r18, r28
    3e90:	2f 5f       	subi	r18, 0xFF	; 255
    3e92:	3f 4f       	sbci	r19, 0xFF	; 255
    3e94:	60 e2       	ldi	r22, 0x20	; 32
    3e96:	76 e1       	ldi	r23, 0x16	; 22
    3e98:	80 91 f1 15 	lds	r24, 0x15F1	; 0x8015f1 <_serialReplyBufferHandle>
    3e9c:	90 91 f2 15 	lds	r25, 0x15F2	; 0x8015f2 <_serialReplyBufferHandle+0x1>
    3ea0:	0e 94 8f 0c 	call	0x191e	; 0x191e <xStreamBufferSendFromISR>
    3ea4:	89 81       	ldd	r24, Y+1	; 0x01
    3ea6:	81 11       	cpse	r24, r1
    3ea8:	0e 94 87 06 	call	0xd0e	; 0xd0e <vPortYield>
    3eac:	10 92 ee 15 	sts	0x15EE, r1	; 0x8015ee <rec_buf_inp.2878>
    3eb0:	be 01       	movw	r22, r28
    3eb2:	6e 5f       	subi	r22, 0xFE	; 254
    3eb4:	7f 4f       	sbci	r23, 0xFF	; 255
    3eb6:	c8 01       	movw	r24, r16
    3eb8:	49 d6       	rcall	.+3218   	; 0x4b4c <serial_getByte>
    3eba:	88 23       	and	r24, r24
    3ebc:	61 f2       	breq	.-104    	; 0x3e56 <_serialCallBack+0x16>
    3ebe:	0f 90       	pop	r0
    3ec0:	0f 90       	pop	r0
    3ec2:	df 91       	pop	r29
    3ec4:	cf 91       	pop	r28
    3ec6:	1f 91       	pop	r17
    3ec8:	0f 91       	pop	r16
    3eca:	08 95       	ret

00003ecc <_uploadMessage>:
    3ecc:	0f 93       	push	r16
    3ece:	1f 93       	push	r17
    3ed0:	cf 93       	push	r28
    3ed2:	df 93       	push	r29
    3ed4:	8c 01       	movw	r16, r24
    3ed6:	eb 01       	movw	r28, r22
    3ed8:	80 91 f1 15 	lds	r24, 0x15F1	; 0x8015f1 <_serialReplyBufferHandle>
    3edc:	90 91 f2 15 	lds	r25, 0x15F2	; 0x8015f2 <_serialReplyBufferHandle+0x1>
    3ee0:	0e 94 9a 0b 	call	0x1734	; 0x1734 <xStreamBufferReset>
    3ee4:	b8 01       	movw	r22, r16
    3ee6:	8a e8       	ldi	r24, 0x8A	; 138
    3ee8:	95 e1       	ldi	r25, 0x15	; 21
    3eea:	0e 94 0d 34 	call	0x681a	; 0x681a <strcpy>
    3eee:	20 97       	sbiw	r28, 0x00	; 0
    3ef0:	79 f0       	breq	.+30     	; 0x3f10 <_uploadMessage+0x44>
    3ef2:	ea e8       	ldi	r30, 0x8A	; 138
    3ef4:	f5 e1       	ldi	r31, 0x15	; 21
    3ef6:	01 90       	ld	r0, Z+
    3ef8:	00 20       	and	r0, r0
    3efa:	e9 f7       	brne	.-6      	; 0x3ef6 <_uploadMessage+0x2a>
    3efc:	31 97       	sbiw	r30, 0x01	; 1
    3efe:	80 e2       	ldi	r24, 0x20	; 32
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	91 83       	std	Z+1, r25	; 0x01
    3f04:	80 83       	st	Z, r24
    3f06:	be 01       	movw	r22, r28
    3f08:	8a e8       	ldi	r24, 0x8A	; 138
    3f0a:	95 e1       	ldi	r25, 0x15	; 21
    3f0c:	0e 94 02 34 	call	0x6804	; 0x6804 <strcat>
    3f10:	ea e8       	ldi	r30, 0x8A	; 138
    3f12:	f5 e1       	ldi	r31, 0x15	; 21
    3f14:	df 01       	movw	r26, r30
    3f16:	0d 90       	ld	r0, X+
    3f18:	00 20       	and	r0, r0
    3f1a:	e9 f7       	brne	.-6      	; 0x3f16 <_uploadMessage+0x4a>
    3f1c:	11 97       	sbiw	r26, 0x01	; 1
    3f1e:	8d e0       	ldi	r24, 0x0D	; 13
    3f20:	9a e0       	ldi	r25, 0x0A	; 10
    3f22:	11 96       	adiw	r26, 0x01	; 1
    3f24:	9c 93       	st	X, r25
    3f26:	8e 93       	st	-X, r24
    3f28:	12 96       	adiw	r26, 0x02	; 2
    3f2a:	1c 92       	st	X, r1
    3f2c:	01 90       	ld	r0, Z+
    3f2e:	00 20       	and	r0, r0
    3f30:	e9 f7       	brne	.-6      	; 0x3f2c <_uploadMessage+0x60>
    3f32:	31 97       	sbiw	r30, 0x01	; 1
    3f34:	ea 58       	subi	r30, 0x8A	; 138
    3f36:	f5 41       	sbci	r31, 0x15	; 21
    3f38:	ae 2f       	mov	r26, r30
    3f3a:	8a e8       	ldi	r24, 0x8A	; 138
    3f3c:	95 e1       	ldi	r25, 0x15	; 21
    3f3e:	ac 01       	movw	r20, r24
    3f40:	6a 2f       	mov	r22, r26
    3f42:	80 91 f3 15 	lds	r24, 0x15F3	; 0x8015f3 <_rn2483_serial>
    3f46:	90 91 f4 15 	lds	r25, 0x15F4	; 0x8015f4 <_rn2483_serial+0x1>
    3f4a:	ab d5       	rcall	.+2902   	; 0x4aa2 <serial_sendBytes>
    3f4c:	81 11       	cpse	r24, r1
    3f4e:	11 c0       	rjmp	.+34     	; 0x3f72 <_uploadMessage+0xa6>
    3f50:	08 e2       	ldi	r16, 0x28	; 40
    3f52:	15 e0       	ldi	r17, 0x05	; 5
    3f54:	20 e0       	ldi	r18, 0x00	; 0
    3f56:	30 e0       	ldi	r19, 0x00	; 0
    3f58:	4d e2       	ldi	r20, 0x2D	; 45
    3f5a:	50 e0       	ldi	r21, 0x00	; 0
    3f5c:	6a e7       	ldi	r22, 0x7A	; 122
    3f5e:	76 e1       	ldi	r23, 0x16	; 22
    3f60:	80 91 f1 15 	lds	r24, 0x15F1	; 0x8015f1 <_serialReplyBufferHandle>
    3f64:	90 91 f2 15 	lds	r25, 0x15F2	; 0x8015f2 <_serialReplyBufferHandle+0x1>
    3f68:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <xStreamBufferReceive>
    3f6c:	8a e7       	ldi	r24, 0x7A	; 122
    3f6e:	96 e1       	ldi	r25, 0x16	; 22
    3f70:	02 c0       	rjmp	.+4      	; 0x3f76 <_uploadMessage+0xaa>
    3f72:	80 e0       	ldi	r24, 0x00	; 0
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	df 91       	pop	r29
    3f78:	cf 91       	pop	r28
    3f7a:	1f 91       	pop	r17
    3f7c:	0f 91       	pop	r16
    3f7e:	08 95       	ret

00003f80 <_reply2ReturnCode>:
    3f80:	2f 92       	push	r2
    3f82:	3f 92       	push	r3
    3f84:	4f 92       	push	r4
    3f86:	5f 92       	push	r5
    3f88:	6f 92       	push	r6
    3f8a:	7f 92       	push	r7
    3f8c:	8f 92       	push	r8
    3f8e:	9f 92       	push	r9
    3f90:	af 92       	push	r10
    3f92:	bf 92       	push	r11
    3f94:	cf 92       	push	r12
    3f96:	df 92       	push	r13
    3f98:	ef 92       	push	r14
    3f9a:	ff 92       	push	r15
    3f9c:	0f 93       	push	r16
    3f9e:	1f 93       	push	r17
    3fa0:	cf 93       	push	r28
    3fa2:	df 93       	push	r29
    3fa4:	5c 01       	movw	r10, r24
    3fa6:	fc 01       	movw	r30, r24
    3fa8:	01 90       	ld	r0, Z+
    3faa:	00 20       	and	r0, r0
    3fac:	e9 f7       	brne	.-6      	; 0x3fa8 <_reply2ReturnCode+0x28>
    3fae:	31 97       	sbiw	r30, 0x01	; 1
    3fb0:	6f 01       	movw	r12, r30
    3fb2:	c8 1a       	sub	r12, r24
    3fb4:	d9 0a       	sbc	r13, r25
    3fb6:	5c 2c       	mov	r5, r12
    3fb8:	0f 2e       	mov	r0, r31
    3fba:	f1 ef       	ldi	r31, 0xF1	; 241
    3fbc:	8f 2e       	mov	r8, r31
    3fbe:	f7 e0       	ldi	r31, 0x07	; 7
    3fc0:	9f 2e       	mov	r9, r31
    3fc2:	f0 2d       	mov	r31, r0
    3fc4:	e1 2c       	mov	r14, r1
    3fc6:	f1 2c       	mov	r15, r1
    3fc8:	4c 2c       	mov	r4, r12
    3fca:	37 01       	movw	r6, r14
    3fcc:	f4 01       	movw	r30, r8
    3fce:	01 81       	ldd	r16, Z+1	; 0x01
    3fd0:	12 81       	ldd	r17, Z+2	; 0x02
    3fd2:	e8 01       	movw	r28, r16
    3fd4:	09 90       	ld	r0, Y+
    3fd6:	00 20       	and	r0, r0
    3fd8:	e9 f7       	brne	.-6      	; 0x3fd4 <_reply2ReturnCode+0x54>
    3fda:	21 97       	sbiw	r28, 0x01	; 1
    3fdc:	c0 1b       	sub	r28, r16
    3fde:	d1 0b       	sbc	r29, r17
    3fe0:	3c 2e       	mov	r3, r28
    3fe2:	f9 e0       	ldi	r31, 0x09	; 9
    3fe4:	cf 16       	cp	r12, r31
    3fe6:	d1 04       	cpc	r13, r1
    3fe8:	58 f0       	brcs	.+22     	; 0x4000 <_reply2ReturnCode+0x80>
    3fea:	f4 01       	movw	r30, r8
    3fec:	20 80       	ld	r2, Z
    3fee:	fe e0       	ldi	r31, 0x0E	; 14
    3ff0:	2f 12       	cpse	r2, r31
    3ff2:	06 c0       	rjmp	.+12     	; 0x4000 <_reply2ReturnCode+0x80>
    3ff4:	b8 01       	movw	r22, r16
    3ff6:	c5 01       	movw	r24, r10
    3ff8:	0e 94 dd 33 	call	0x67ba	; 0x67ba <strcasestr>
    3ffc:	89 2b       	or	r24, r25
    3ffe:	09 f5       	brne	.+66     	; 0x4042 <_reply2ReturnCode+0xc2>
    4000:	44 2d       	mov	r20, r4
    4002:	35 14       	cp	r3, r5
    4004:	08 f4       	brcc	.+2      	; 0x4008 <_reply2ReturnCode+0x88>
    4006:	4c 2f       	mov	r20, r28
    4008:	50 e0       	ldi	r21, 0x00	; 0
    400a:	b8 01       	movw	r22, r16
    400c:	c5 01       	movw	r24, r10
    400e:	0e 94 14 34 	call	0x6828	; 0x6828 <strncasecmp>
    4012:	89 2b       	or	r24, r25
    4014:	49 f4       	brne	.+18     	; 0x4028 <_reply2ReturnCode+0xa8>
    4016:	f3 01       	movw	r30, r6
    4018:	ee 0f       	add	r30, r30
    401a:	ff 1f       	adc	r31, r31
    401c:	e6 0d       	add	r30, r6
    401e:	f7 1d       	adc	r31, r7
    4020:	ef 50       	subi	r30, 0x0F	; 15
    4022:	f8 4f       	sbci	r31, 0xF8	; 248
    4024:	20 80       	ld	r2, Z
    4026:	0d c0       	rjmp	.+26     	; 0x4042 <_reply2ReturnCode+0xc2>
    4028:	8f ef       	ldi	r24, 0xFF	; 255
    402a:	e8 1a       	sub	r14, r24
    402c:	f8 0a       	sbc	r15, r24
    402e:	e3 e0       	ldi	r30, 0x03	; 3
    4030:	8e 0e       	add	r8, r30
    4032:	91 1c       	adc	r9, r1
    4034:	f1 e1       	ldi	r31, 0x11	; 17
    4036:	ef 16       	cp	r14, r31
    4038:	f1 04       	cpc	r15, r1
    403a:	39 f6       	brne	.-114    	; 0x3fca <_reply2ReturnCode+0x4a>
    403c:	68 94       	set
    403e:	22 24       	eor	r2, r2
    4040:	24 f8       	bld	r2, 4
    4042:	82 2d       	mov	r24, r2
    4044:	df 91       	pop	r29
    4046:	cf 91       	pop	r28
    4048:	1f 91       	pop	r17
    404a:	0f 91       	pop	r16
    404c:	ff 90       	pop	r15
    404e:	ef 90       	pop	r14
    4050:	df 90       	pop	r13
    4052:	cf 90       	pop	r12
    4054:	bf 90       	pop	r11
    4056:	af 90       	pop	r10
    4058:	9f 90       	pop	r9
    405a:	8f 90       	pop	r8
    405c:	7f 90       	pop	r7
    405e:	6f 90       	pop	r6
    4060:	5f 90       	pop	r5
    4062:	4f 90       	pop	r4
    4064:	3f 90       	pop	r3
    4066:	2f 90       	pop	r2
    4068:	08 95       	ret

0000406a <_uploadMessageRc>:
    406a:	30 df       	rcall	.-416    	; 0x3ecc <_uploadMessage>
    406c:	89 cf       	rjmp	.-238    	; 0x3f80 <_reply2ReturnCode>
    406e:	08 95       	ret

00004070 <lora_driver_flushBuffers>:
    4070:	80 91 f1 15 	lds	r24, 0x15F1	; 0x8015f1 <_serialReplyBufferHandle>
    4074:	90 91 f2 15 	lds	r25, 0x15F2	; 0x8015f2 <_serialReplyBufferHandle+0x1>
    4078:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <xStreamBufferReset>
    407c:	08 95       	ret

0000407e <lora_driver_initialise>:
    407e:	8f 92       	push	r8
    4080:	9f 92       	push	r9
    4082:	af 92       	push	r10
    4084:	cf 92       	push	r12
    4086:	ef 92       	push	r14
    4088:	0f 93       	push	r16
    408a:	1f 93       	push	r17
    408c:	cf 93       	push	r28
    408e:	c8 2f       	mov	r28, r24
    4090:	8b 01       	movw	r16, r22
    4092:	41 e0       	ldi	r20, 0x01	; 1
    4094:	60 e0       	ldi	r22, 0x00	; 0
    4096:	70 e0       	ldi	r23, 0x00	; 0
    4098:	88 ec       	ldi	r24, 0xC8	; 200
    409a:	90 e0       	ldi	r25, 0x00	; 0
    409c:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <xStreamBufferGenericCreate>
    40a0:	90 93 f2 15 	sts	0x15F2, r25	; 0x8015f2 <_serialReplyBufferHandle+0x1>
    40a4:	80 93 f1 15 	sts	0x15F1, r24	; 0x8015f1 <_serialReplyBufferHandle>
    40a8:	10 93 f0 15 	sts	0x15F0, r17	; 0x8015f0 <_downlinkMessageBuffer+0x1>
    40ac:	00 93 ef 15 	sts	0x15EF, r16	; 0x8015ef <_downlinkMessageBuffer>
    40b0:	0f 2e       	mov	r0, r31
    40b2:	f0 e2       	ldi	r31, 0x20	; 32
    40b4:	8f 2e       	mov	r8, r31
    40b6:	ff e1       	ldi	r31, 0x1F	; 31
    40b8:	9f 2e       	mov	r9, r31
    40ba:	f0 2d       	mov	r31, r0
    40bc:	68 94       	set
    40be:	aa 24       	eor	r10, r10
    40c0:	a6 f8       	bld	r10, 6
    40c2:	68 94       	set
    40c4:	cc 24       	eor	r12, r12
    40c6:	c6 f8       	bld	r12, 6
    40c8:	e1 2c       	mov	r14, r1
    40ca:	00 e0       	ldi	r16, 0x00	; 0
    40cc:	23 e0       	ldi	r18, 0x03	; 3
    40ce:	40 e0       	ldi	r20, 0x00	; 0
    40d0:	51 ee       	ldi	r21, 0xE1	; 225
    40d2:	60 e0       	ldi	r22, 0x00	; 0
    40d4:	70 e0       	ldi	r23, 0x00	; 0
    40d6:	8c 2f       	mov	r24, r28
    40d8:	17 d4       	rcall	.+2094   	; 0x4908 <serial_create>
    40da:	90 93 f4 15 	sts	0x15F4, r25	; 0x8015f4 <_rn2483_serial+0x1>
    40de:	80 93 f3 15 	sts	0x15F3, r24	; 0x8015f3 <_rn2483_serial>
    40e2:	e7 e0       	ldi	r30, 0x07	; 7
    40e4:	f1 e0       	ldi	r31, 0x01	; 1
    40e6:	80 81       	ld	r24, Z
    40e8:	80 61       	ori	r24, 0x10	; 16
    40ea:	80 83       	st	Z, r24
    40ec:	cf 91       	pop	r28
    40ee:	1f 91       	pop	r17
    40f0:	0f 91       	pop	r16
    40f2:	ef 90       	pop	r14
    40f4:	cf 90       	pop	r12
    40f6:	af 90       	pop	r10
    40f8:	9f 90       	pop	r9
    40fa:	8f 90       	pop	r8
    40fc:	08 95       	ret

000040fe <lora_driver_resetRn2483>:
    40fe:	88 23       	and	r24, r24
    4100:	31 f0       	breq	.+12     	; 0x410e <lora_driver_resetRn2483+0x10>
    4102:	e8 e0       	ldi	r30, 0x08	; 8
    4104:	f1 e0       	ldi	r31, 0x01	; 1
    4106:	80 81       	ld	r24, Z
    4108:	8f 7e       	andi	r24, 0xEF	; 239
    410a:	80 83       	st	Z, r24
    410c:	08 95       	ret
    410e:	e8 e0       	ldi	r30, 0x08	; 8
    4110:	f1 e0       	ldi	r31, 0x01	; 1
    4112:	80 81       	ld	r24, Z
    4114:	80 61       	ori	r24, 0x10	; 16
    4116:	80 83       	st	Z, r24
    4118:	08 95       	ret

0000411a <lora_driver_rn2483FactoryReset>:
    411a:	60 e0       	ldi	r22, 0x00	; 0
    411c:	70 e0       	ldi	r23, 0x00	; 0
    411e:	87 e7       	ldi	r24, 0x77	; 119
    4120:	95 e0       	ldi	r25, 0x05	; 5
    4122:	d4 de       	rcall	.-600    	; 0x3ecc <_uploadMessage>
    4124:	ea e7       	ldi	r30, 0x7A	; 122
    4126:	f6 e1       	ldi	r31, 0x16	; 22
    4128:	01 90       	ld	r0, Z+
    412a:	00 20       	and	r0, r0
    412c:	e9 f7       	brne	.-6      	; 0x4128 <lora_driver_rn2483FactoryReset+0xe>
    412e:	31 97       	sbiw	r30, 0x01	; 1
    4130:	ea 57       	subi	r30, 0x7A	; 122
    4132:	f6 41       	sbci	r31, 0x16	; 22
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	75 97       	sbiw	r30, 0x15	; 21
    4138:	08 f0       	brcs	.+2      	; 0x413c <lora_driver_rn2483FactoryReset+0x22>
    413a:	80 e0       	ldi	r24, 0x00	; 0
    413c:	08 95       	ret

0000413e <lora_driver_getRn2483Hweui>:
    413e:	cf 93       	push	r28
    4140:	df 93       	push	r29
    4142:	ec 01       	movw	r28, r24
    4144:	60 e0       	ldi	r22, 0x00	; 0
    4146:	70 e0       	ldi	r23, 0x00	; 0
    4148:	88 e8       	ldi	r24, 0x88	; 136
    414a:	95 e0       	ldi	r25, 0x05	; 5
    414c:	bf de       	rcall	.-642    	; 0x3ecc <_uploadMessage>
    414e:	ea e7       	ldi	r30, 0x7A	; 122
    4150:	f6 e1       	ldi	r31, 0x16	; 22
    4152:	01 90       	ld	r0, Z+
    4154:	00 20       	and	r0, r0
    4156:	e9 f7       	brne	.-6      	; 0x4152 <lora_driver_getRn2483Hweui+0x14>
    4158:	eb 58       	subi	r30, 0x8B	; 139
    415a:	f6 41       	sbci	r31, 0x16	; 22
    415c:	39 f4       	brne	.+14     	; 0x416c <lora_driver_getRn2483Hweui+0x2e>
    415e:	6a e7       	ldi	r22, 0x7A	; 122
    4160:	76 e1       	ldi	r23, 0x16	; 22
    4162:	ce 01       	movw	r24, r28
    4164:	0e 94 0d 34 	call	0x681a	; 0x681a <strcpy>
    4168:	80 e0       	ldi	r24, 0x00	; 0
    416a:	02 c0       	rjmp	.+4      	; 0x4170 <lora_driver_getRn2483Hweui+0x32>
    416c:	18 82       	st	Y, r1
    416e:	81 e0       	ldi	r24, 0x01	; 1
    4170:	df 91       	pop	r29
    4172:	cf 91       	pop	r28
    4174:	08 95       	ret

00004176 <lora_driver_setDeviceIdentifier>:
    4176:	fc 01       	movw	r30, r24
    4178:	01 90       	ld	r0, Z+
    417a:	00 20       	and	r0, r0
    417c:	e9 f7       	brne	.-6      	; 0x4178 <lora_driver_setDeviceIdentifier+0x2>
    417e:	9f 01       	movw	r18, r30
    4180:	21 51       	subi	r18, 0x11	; 17
    4182:	31 09       	sbc	r19, r1
    4184:	28 17       	cp	r18, r24
    4186:	39 07       	cpc	r19, r25
    4188:	29 f4       	brne	.+10     	; 0x4194 <lora_driver_setDeviceIdentifier+0x1e>
    418a:	bc 01       	movw	r22, r24
    418c:	86 eb       	ldi	r24, 0xB6	; 182
    418e:	95 e0       	ldi	r25, 0x05	; 5
    4190:	6c cf       	rjmp	.-296    	; 0x406a <_uploadMessageRc>
    4192:	08 95       	ret
    4194:	89 e0       	ldi	r24, 0x09	; 9
    4196:	08 95       	ret

00004198 <lora_driver_setApplicationIdentifier>:
    4198:	fc 01       	movw	r30, r24
    419a:	01 90       	ld	r0, Z+
    419c:	00 20       	and	r0, r0
    419e:	e9 f7       	brne	.-6      	; 0x419a <lora_driver_setApplicationIdentifier+0x2>
    41a0:	9f 01       	movw	r18, r30
    41a2:	21 51       	subi	r18, 0x11	; 17
    41a4:	31 09       	sbc	r19, r1
    41a6:	28 17       	cp	r18, r24
    41a8:	39 07       	cpc	r19, r25
    41aa:	29 f4       	brne	.+10     	; 0x41b6 <lora_driver_setApplicationIdentifier+0x1e>
    41ac:	bc 01       	movw	r22, r24
    41ae:	85 ec       	ldi	r24, 0xC5	; 197
    41b0:	95 e0       	ldi	r25, 0x05	; 5
    41b2:	5b cf       	rjmp	.-330    	; 0x406a <_uploadMessageRc>
    41b4:	08 95       	ret
    41b6:	89 e0       	ldi	r24, 0x09	; 9
    41b8:	08 95       	ret

000041ba <lora_driver_setApplicationKey>:
    41ba:	fc 01       	movw	r30, r24
    41bc:	01 90       	ld	r0, Z+
    41be:	00 20       	and	r0, r0
    41c0:	e9 f7       	brne	.-6      	; 0x41bc <lora_driver_setApplicationKey+0x2>
    41c2:	9f 01       	movw	r18, r30
    41c4:	21 52       	subi	r18, 0x21	; 33
    41c6:	31 09       	sbc	r19, r1
    41c8:	28 17       	cp	r18, r24
    41ca:	39 07       	cpc	r19, r25
    41cc:	29 f4       	brne	.+10     	; 0x41d8 <lora_driver_setApplicationKey+0x1e>
    41ce:	bc 01       	movw	r22, r24
    41d0:	84 ed       	ldi	r24, 0xD4	; 212
    41d2:	95 e0       	ldi	r25, 0x05	; 5
    41d4:	4a cf       	rjmp	.-364    	; 0x406a <_uploadMessageRc>
    41d6:	08 95       	ret
    41d8:	89 e0       	ldi	r24, 0x09	; 9
    41da:	08 95       	ret

000041dc <lora_driver_saveMac>:
    41dc:	60 e0       	ldi	r22, 0x00	; 0
    41de:	70 e0       	ldi	r23, 0x00	; 0
    41e0:	83 e1       	ldi	r24, 0x13	; 19
    41e2:	96 e0       	ldi	r25, 0x06	; 6
    41e4:	42 cf       	rjmp	.-380    	; 0x406a <_uploadMessageRc>
    41e6:	08 95       	ret

000041e8 <lora_driver_join>:
    41e8:	0f 93       	push	r16
    41ea:	1f 93       	push	r17
    41ec:	e8 2f       	mov	r30, r24
    41ee:	f0 e0       	ldi	r31, 0x00	; 0
    41f0:	ee 0f       	add	r30, r30
    41f2:	ff 1f       	adc	r31, r31
    41f4:	e3 51       	subi	r30, 0x13	; 19
    41f6:	f8 4f       	sbci	r31, 0xF8	; 248
    41f8:	60 81       	ld	r22, Z
    41fa:	71 81       	ldd	r23, Z+1	; 0x01
    41fc:	8c e1       	ldi	r24, 0x1C	; 28
    41fe:	96 e0       	ldi	r25, 0x06	; 6
    4200:	34 df       	rcall	.-408    	; 0x406a <_uploadMessageRc>
    4202:	81 11       	cpse	r24, r1
    4204:	14 c0       	rjmp	.+40     	; 0x422e <lora_driver_join+0x46>
    4206:	08 e2       	ldi	r16, 0x28	; 40
    4208:	15 e0       	ldi	r17, 0x05	; 5
    420a:	20 e0       	ldi	r18, 0x00	; 0
    420c:	30 e0       	ldi	r19, 0x00	; 0
    420e:	4d e2       	ldi	r20, 0x2D	; 45
    4210:	50 e0       	ldi	r21, 0x00	; 0
    4212:	6a e7       	ldi	r22, 0x7A	; 122
    4214:	76 e1       	ldi	r23, 0x16	; 22
    4216:	80 91 f1 15 	lds	r24, 0x15F1	; 0x8015f1 <_serialReplyBufferHandle>
    421a:	90 91 f2 15 	lds	r25, 0x15F2	; 0x8015f2 <_serialReplyBufferHandle+0x1>
    421e:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <xStreamBufferReceive>
    4222:	88 23       	and	r24, r24
    4224:	21 f0       	breq	.+8      	; 0x422e <lora_driver_join+0x46>
    4226:	8a e7       	ldi	r24, 0x7A	; 122
    4228:	96 e1       	ldi	r25, 0x16	; 22
    422a:	aa de       	rcall	.-684    	; 0x3f80 <_reply2ReturnCode>
    422c:	03 c0       	rjmp	.+6      	; 0x4234 <lora_driver_join+0x4c>
    422e:	8a e7       	ldi	r24, 0x7A	; 122
    4230:	96 e1       	ldi	r25, 0x16	; 22
    4232:	a6 de       	rcall	.-692    	; 0x3f80 <_reply2ReturnCode>
    4234:	1f 91       	pop	r17
    4236:	0f 91       	pop	r16
    4238:	08 95       	ret

0000423a <lora_driver_sendUploadMessage>:
    423a:	0f 93       	push	r16
    423c:	1f 93       	push	r17
    423e:	cf 93       	push	r28
    4240:	df 93       	push	r29
    4242:	1f 92       	push	r1
    4244:	cd b7       	in	r28, 0x3d	; 61
    4246:	de b7       	in	r29, 0x3e	; 62
    4248:	db 01       	movw	r26, r22
    424a:	11 96       	adiw	r26, 0x01	; 1
    424c:	9c 91       	ld	r25, X
    424e:	11 97       	sbiw	r26, 0x01	; 1
    4250:	95 31       	cpi	r25, 0x15	; 21
    4252:	08 f0       	brcs	.+2      	; 0x4256 <lora_driver_sendUploadMessage+0x1c>
    4254:	b4 c0       	rjmp	.+360    	; 0x43be <lora_driver_sendUploadMessage+0x184>
    4256:	99 23       	and	r25, r25
    4258:	81 f1       	breq	.+96     	; 0x42ba <lora_driver_sendUploadMessage+0x80>
    425a:	60 e0       	ldi	r22, 0x00	; 0
    425c:	70 e0       	ldi	r23, 0x00	; 0
    425e:	27 2f       	mov	r18, r23
    4260:	30 e0       	ldi	r19, 0x00	; 0
    4262:	46 2f       	mov	r20, r22
    4264:	50 e0       	ldi	r21, 0x00	; 0
    4266:	fd 01       	movw	r30, r26
    4268:	e4 0f       	add	r30, r20
    426a:	f5 1f       	adc	r31, r21
    426c:	92 81       	ldd	r25, Z+2	; 0x02
    426e:	92 95       	swap	r25
    4270:	9f 70       	andi	r25, 0x0F	; 15
    4272:	9a 30       	cpi	r25, 0x0A	; 10
    4274:	10 f0       	brcs	.+4      	; 0x427a <lora_driver_sendUploadMessage+0x40>
    4276:	99 5c       	subi	r25, 0xC9	; 201
    4278:	01 c0       	rjmp	.+2      	; 0x427c <lora_driver_sendUploadMessage+0x42>
    427a:	90 5d       	subi	r25, 0xD0	; 208
    427c:	f9 01       	movw	r30, r18
    427e:	e5 5f       	subi	r30, 0xF5	; 245
    4280:	f9 4e       	sbci	r31, 0xE9	; 233
    4282:	90 83       	st	Z, r25
    4284:	2f 5f       	subi	r18, 0xFF	; 255
    4286:	3f 4f       	sbci	r19, 0xFF	; 255
    4288:	fd 01       	movw	r30, r26
    428a:	e4 0f       	add	r30, r20
    428c:	f5 1f       	adc	r31, r21
    428e:	92 81       	ldd	r25, Z+2	; 0x02
    4290:	9f 70       	andi	r25, 0x0F	; 15
    4292:	49 2f       	mov	r20, r25
    4294:	50 e0       	ldi	r21, 0x00	; 0
    4296:	4a 30       	cpi	r20, 0x0A	; 10
    4298:	51 05       	cpc	r21, r1
    429a:	14 f0       	brlt	.+4      	; 0x42a0 <lora_driver_sendUploadMessage+0x66>
    429c:	99 5c       	subi	r25, 0xC9	; 201
    429e:	01 c0       	rjmp	.+2      	; 0x42a2 <lora_driver_sendUploadMessage+0x68>
    42a0:	90 5d       	subi	r25, 0xD0	; 208
    42a2:	f9 01       	movw	r30, r18
    42a4:	e5 5f       	subi	r30, 0xF5	; 245
    42a6:	f9 4e       	sbci	r31, 0xE9	; 233
    42a8:	90 83       	st	Z, r25
    42aa:	7e 5f       	subi	r23, 0xFE	; 254
    42ac:	6f 5f       	subi	r22, 0xFF	; 255
    42ae:	11 96       	adiw	r26, 0x01	; 1
    42b0:	9c 91       	ld	r25, X
    42b2:	11 97       	sbiw	r26, 0x01	; 1
    42b4:	69 17       	cp	r22, r25
    42b6:	98 f2       	brcs	.-90     	; 0x425e <lora_driver_sendUploadMessage+0x24>
    42b8:	01 c0       	rjmp	.+2      	; 0x42bc <lora_driver_sendUploadMessage+0x82>
    42ba:	70 e0       	ldi	r23, 0x00	; 0
    42bc:	e7 2f       	mov	r30, r23
    42be:	f0 e0       	ldi	r31, 0x00	; 0
    42c0:	e5 5f       	subi	r30, 0xF5	; 245
    42c2:	f9 4e       	sbci	r31, 0xE9	; 233
    42c4:	10 82       	st	Z, r1
    42c6:	4c 91       	ld	r20, X
    42c8:	81 11       	cpse	r24, r1
    42ca:	03 c0       	rjmp	.+6      	; 0x42d2 <lora_driver_sendUploadMessage+0x98>
    42cc:	85 e2       	ldi	r24, 0x25	; 37
    42ce:	96 e0       	ldi	r25, 0x06	; 6
    42d0:	02 c0       	rjmp	.+4      	; 0x42d6 <lora_driver_sendUploadMessage+0x9c>
    42d2:	87 e2       	ldi	r24, 0x27	; 39
    42d4:	96 e0       	ldi	r25, 0x06	; 6
    42d6:	2b e0       	ldi	r18, 0x0B	; 11
    42d8:	36 e1       	ldi	r19, 0x16	; 22
    42da:	3f 93       	push	r19
    42dc:	2f 93       	push	r18
    42de:	1f 92       	push	r1
    42e0:	4f 93       	push	r20
    42e2:	9f 93       	push	r25
    42e4:	8f 93       	push	r24
    42e6:	8b e2       	ldi	r24, 0x2B	; 43
    42e8:	96 e0       	ldi	r25, 0x06	; 6
    42ea:	9f 93       	push	r25
    42ec:	8f 93       	push	r24
    42ee:	8d e4       	ldi	r24, 0x4D	; 77
    42f0:	96 e1       	ldi	r25, 0x16	; 22
    42f2:	9f 93       	push	r25
    42f4:	8f 93       	push	r24
    42f6:	0e 94 b6 34 	call	0x696c	; 0x696c <sprintf>
    42fa:	60 e0       	ldi	r22, 0x00	; 0
    42fc:	70 e0       	ldi	r23, 0x00	; 0
    42fe:	8d e4       	ldi	r24, 0x4D	; 77
    4300:	96 e1       	ldi	r25, 0x16	; 22
    4302:	b3 de       	rcall	.-666    	; 0x406a <_uploadMessageRc>
    4304:	0f b6       	in	r0, 0x3f	; 63
    4306:	f8 94       	cli
    4308:	de bf       	out	0x3e, r29	; 62
    430a:	0f be       	out	0x3f, r0	; 63
    430c:	cd bf       	out	0x3d, r28	; 61
    430e:	81 11       	cpse	r24, r1
    4310:	59 c0       	rjmp	.+178    	; 0x43c4 <lora_driver_sendUploadMessage+0x18a>
    4312:	08 e2       	ldi	r16, 0x28	; 40
    4314:	15 e0       	ldi	r17, 0x05	; 5
    4316:	20 e0       	ldi	r18, 0x00	; 0
    4318:	30 e0       	ldi	r19, 0x00	; 0
    431a:	4d e2       	ldi	r20, 0x2D	; 45
    431c:	50 e0       	ldi	r21, 0x00	; 0
    431e:	6a e7       	ldi	r22, 0x7A	; 122
    4320:	76 e1       	ldi	r23, 0x16	; 22
    4322:	80 91 f1 15 	lds	r24, 0x15F1	; 0x8015f1 <_serialReplyBufferHandle>
    4326:	90 91 f2 15 	lds	r25, 0x15F2	; 0x8015f2 <_serialReplyBufferHandle+0x1>
    432a:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <xStreamBufferReceive>
    432e:	88 23       	and	r24, r24
    4330:	09 f4       	brne	.+2      	; 0x4334 <lora_driver_sendUploadMessage+0xfa>
    4332:	47 c0       	rjmp	.+142    	; 0x43c2 <lora_driver_sendUploadMessage+0x188>
    4334:	8a e7       	ldi	r24, 0x7A	; 122
    4336:	96 e1       	ldi	r25, 0x16	; 22
    4338:	23 de       	rcall	.-954    	; 0x3f80 <_reply2ReturnCode>
    433a:	8e 30       	cpi	r24, 0x0E	; 14
    433c:	09 f0       	breq	.+2      	; 0x4340 <lora_driver_sendUploadMessage+0x106>
    433e:	42 c0       	rjmp	.+132    	; 0x43c4 <lora_driver_sendUploadMessage+0x18a>
    4340:	87 e0       	ldi	r24, 0x07	; 7
    4342:	89 83       	std	Y+1, r24	; 0x01
    4344:	80 91 ef 15 	lds	r24, 0x15EF	; 0x8015ef <_downlinkMessageBuffer>
    4348:	90 91 f0 15 	lds	r25, 0x15F0	; 0x8015f0 <_downlinkMessageBuffer+0x1>
    434c:	89 2b       	or	r24, r25
    434e:	a9 f1       	breq	.+106    	; 0x43ba <lora_driver_sendUploadMessage+0x180>
    4350:	be 01       	movw	r22, r28
    4352:	6f 5f       	subi	r22, 0xFF	; 255
    4354:	7f 4f       	sbci	r23, 0xFF	; 255
    4356:	8a e7       	ldi	r24, 0x7A	; 122
    4358:	96 e1       	ldi	r25, 0x16	; 22
    435a:	68 d1       	rcall	.+720    	; 0x462c <decode_port_no>
    435c:	80 93 f5 15 	sts	0x15F5, r24	; 0x8015f5 <_downlinkPayload>
    4360:	e9 81       	ldd	r30, Y+1	; 0x01
    4362:	f0 e0       	ldi	r31, 0x00	; 0
    4364:	e6 58       	subi	r30, 0x86	; 134
    4366:	f9 4e       	sbci	r31, 0xE9	; 233
    4368:	df 01       	movw	r26, r30
    436a:	0d 90       	ld	r0, X+
    436c:	00 20       	and	r0, r0
    436e:	e9 f7       	brne	.-6      	; 0x436a <lora_driver_sendUploadMessage+0x130>
    4370:	11 97       	sbiw	r26, 0x01	; 1
    4372:	ae 1b       	sub	r26, r30
    4374:	bf 0b       	sbc	r27, r31
    4376:	aa 23       	and	r26, r26
    4378:	91 f0       	breq	.+36     	; 0x439e <lora_driver_sendUploadMessage+0x164>
    437a:	bb 27       	eor	r27, r27
    437c:	cd 01       	movw	r24, r26
    437e:	01 97       	sbiw	r24, 0x01	; 1
    4380:	9c 01       	movw	r18, r24
    4382:	12 f4       	brpl	.+4      	; 0x4388 <lora_driver_sendUploadMessage+0x14e>
    4384:	2f 5f       	subi	r18, 0xFF	; 255
    4386:	3f 4f       	sbci	r19, 0xFF	; 255
    4388:	35 95       	asr	r19
    438a:	27 95       	ror	r18
    438c:	20 93 f6 15 	sts	0x15F6, r18	; 0x8015f6 <_downlinkPayload+0x1>
    4390:	af 01       	movw	r20, r30
    4392:	4f 5f       	subi	r20, 0xFF	; 255
    4394:	5f 4f       	sbci	r21, 0xFF	; 255
    4396:	64 e1       	ldi	r22, 0x14	; 20
    4398:	87 ef       	ldi	r24, 0xF7	; 247
    439a:	95 e1       	ldi	r25, 0x15	; 21
    439c:	73 d1       	rcall	.+742    	; 0x4684 <decode_hexadecimal_string_bytes>
    439e:	01 e0       	ldi	r16, 0x01	; 1
    43a0:	10 e0       	ldi	r17, 0x00	; 0
    43a2:	20 e0       	ldi	r18, 0x00	; 0
    43a4:	30 e0       	ldi	r19, 0x00	; 0
    43a6:	46 e1       	ldi	r20, 0x16	; 22
    43a8:	50 e0       	ldi	r21, 0x00	; 0
    43aa:	65 ef       	ldi	r22, 0xF5	; 245
    43ac:	75 e1       	ldi	r23, 0x15	; 21
    43ae:	80 91 ef 15 	lds	r24, 0x15EF	; 0x8015ef <_downlinkMessageBuffer>
    43b2:	90 91 f0 15 	lds	r25, 0x15F0	; 0x8015f0 <_downlinkMessageBuffer+0x1>
    43b6:	0e 94 ca 0b 	call	0x1794	; 0x1794 <xStreamBufferSend>
    43ba:	8e e0       	ldi	r24, 0x0E	; 14
    43bc:	03 c0       	rjmp	.+6      	; 0x43c4 <lora_driver_sendUploadMessage+0x18a>
    43be:	84 e1       	ldi	r24, 0x14	; 20
    43c0:	01 c0       	rjmp	.+2      	; 0x43c4 <lora_driver_sendUploadMessage+0x18a>
    43c2:	80 e0       	ldi	r24, 0x00	; 0
    43c4:	0f 90       	pop	r0
    43c6:	df 91       	pop	r29
    43c8:	cf 91       	pop	r28
    43ca:	1f 91       	pop	r17
    43cc:	0f 91       	pop	r16
    43ce:	08 95       	ret

000043d0 <lora_driver_setAdaptiveDataRate>:
    43d0:	81 30       	cpi	r24, 0x01	; 1
    43d2:	19 f0       	breq	.+6      	; 0x43da <lora_driver_setAdaptiveDataRate+0xa>
    43d4:	6b e3       	ldi	r22, 0x3B	; 59
    43d6:	76 e0       	ldi	r23, 0x06	; 6
    43d8:	02 c0       	rjmp	.+4      	; 0x43de <lora_driver_setAdaptiveDataRate+0xe>
    43da:	64 e1       	ldi	r22, 0x14	; 20
    43dc:	77 e0       	ldi	r23, 0x07	; 7
    43de:	8f e3       	ldi	r24, 0x3F	; 63
    43e0:	96 e0       	ldi	r25, 0x06	; 6
    43e2:	43 ce       	rjmp	.-890    	; 0x406a <_uploadMessageRc>
    43e4:	08 95       	ret

000043e6 <lora_driver_setReceiveDelay>:
    43e6:	9f 93       	push	r25
    43e8:	8f 93       	push	r24
    43ea:	80 e7       	ldi	r24, 0x70	; 112
    43ec:	96 e0       	ldi	r25, 0x06	; 6
    43ee:	9f 93       	push	r25
    43f0:	8f 93       	push	r24
    43f2:	8d e4       	ldi	r24, 0x4D	; 77
    43f4:	96 e1       	ldi	r25, 0x16	; 22
    43f6:	9f 93       	push	r25
    43f8:	8f 93       	push	r24
    43fa:	0e 94 b6 34 	call	0x696c	; 0x696c <sprintf>
    43fe:	60 e0       	ldi	r22, 0x00	; 0
    4400:	70 e0       	ldi	r23, 0x00	; 0
    4402:	8d e4       	ldi	r24, 0x4D	; 77
    4404:	96 e1       	ldi	r25, 0x16	; 22
    4406:	31 de       	rcall	.-926    	; 0x406a <_uploadMessageRc>
    4408:	0f 90       	pop	r0
    440a:	0f 90       	pop	r0
    440c:	0f 90       	pop	r0
    440e:	0f 90       	pop	r0
    4410:	0f 90       	pop	r0
    4412:	0f 90       	pop	r0
    4414:	08 95       	ret

00004416 <lora_driver_configureToEu868>:
    4416:	2f 92       	push	r2
    4418:	3f 92       	push	r3
    441a:	4f 92       	push	r4
    441c:	5f 92       	push	r5
    441e:	6f 92       	push	r6
    4420:	7f 92       	push	r7
    4422:	8f 92       	push	r8
    4424:	9f 92       	push	r9
    4426:	af 92       	push	r10
    4428:	bf 92       	push	r11
    442a:	cf 92       	push	r12
    442c:	df 92       	push	r13
    442e:	ef 92       	push	r14
    4430:	ff 92       	push	r15
    4432:	0f 93       	push	r16
    4434:	1f 93       	push	r17
    4436:	cf 93       	push	r28
    4438:	df 93       	push	r29
    443a:	cd b7       	in	r28, 0x3d	; 61
    443c:	de b7       	in	r29, 0x3e	; 62
    443e:	a0 97       	sbiw	r28, 0x20	; 32
    4440:	0f b6       	in	r0, 0x3f	; 63
    4442:	f8 94       	cli
    4444:	de bf       	out	0x3e, r29	; 62
    4446:	0f be       	out	0x3f, r0	; 63
    4448:	cd bf       	out	0x3d, r28	; 61
    444a:	6d e9       	ldi	r22, 0x9D	; 157
    444c:	76 e0       	ldi	r23, 0x06	; 6
    444e:	89 ea       	ldi	r24, 0xA9	; 169
    4450:	96 e0       	ldi	r25, 0x06	; 6
    4452:	3c dd       	rcall	.-1416   	; 0x3ecc <_uploadMessage>
    4454:	95 dd       	rcall	.-1238   	; 0x3f80 <_reply2ReturnCode>
    4456:	81 11       	cpse	r24, r1
    4458:	a3 c0       	rjmp	.+326    	; 0x45a0 <lora_driver_configureToEu868+0x18a>
    445a:	80 e2       	ldi	r24, 0x20	; 32
    445c:	e2 e2       	ldi	r30, 0x22	; 34
    445e:	f2 e0       	ldi	r31, 0x02	; 2
    4460:	de 01       	movw	r26, r28
    4462:	11 96       	adiw	r26, 0x01	; 1
    4464:	01 90       	ld	r0, Z+
    4466:	0d 92       	st	X+, r0
    4468:	8a 95       	dec	r24
    446a:	e1 f7       	brne	.-8      	; 0x4464 <lora_driver_configureToEu868+0x4e>
    446c:	9e 01       	movw	r18, r28
    446e:	2f 5f       	subi	r18, 0xFF	; 255
    4470:	3f 4f       	sbci	r19, 0xFF	; 255
    4472:	69 01       	movw	r12, r18
    4474:	e1 2c       	mov	r14, r1
    4476:	f1 2c       	mov	r15, r1
    4478:	0f 2e       	mov	r0, r31
    447a:	f5 eb       	ldi	r31, 0xB5	; 181
    447c:	af 2e       	mov	r10, r31
    447e:	f6 e0       	ldi	r31, 0x06	; 6
    4480:	bf 2e       	mov	r11, r31
    4482:	f0 2d       	mov	r31, r0
    4484:	0d e4       	ldi	r16, 0x4D	; 77
    4486:	16 e1       	ldi	r17, 0x16	; 22
    4488:	0f 2e       	mov	r0, r31
    448a:	fe ec       	ldi	r31, 0xCE	; 206
    448c:	4f 2e       	mov	r4, r31
    448e:	f6 e0       	ldi	r31, 0x06	; 6
    4490:	5f 2e       	mov	r5, r31
    4492:	f0 2d       	mov	r31, r0
    4494:	0f 2e       	mov	r0, r31
    4496:	f5 ee       	ldi	r31, 0xE5	; 229
    4498:	8f 2e       	mov	r8, r31
    449a:	f6 e0       	ldi	r31, 0x06	; 6
    449c:	9f 2e       	mov	r9, r31
    449e:	f0 2d       	mov	r31, r0
    44a0:	0f 2e       	mov	r0, r31
    44a2:	ff ef       	ldi	r31, 0xFF	; 255
    44a4:	6f 2e       	mov	r6, r31
    44a6:	f6 e0       	ldi	r31, 0x06	; 6
    44a8:	7f 2e       	mov	r7, r31
    44aa:	f0 2d       	mov	r31, r0
    44ac:	3e 2c       	mov	r3, r14
    44ae:	2f 2c       	mov	r2, r15
    44b0:	ff 92       	push	r15
    44b2:	ef 92       	push	r14
    44b4:	bf 92       	push	r11
    44b6:	af 92       	push	r10
    44b8:	1f 93       	push	r17
    44ba:	0f 93       	push	r16
    44bc:	0e 94 b6 34 	call	0x696c	; 0x696c <sprintf>
    44c0:	60 e0       	ldi	r22, 0x00	; 0
    44c2:	70 e0       	ldi	r23, 0x00	; 0
    44c4:	c8 01       	movw	r24, r16
    44c6:	02 dd       	rcall	.-1532   	; 0x3ecc <_uploadMessage>
    44c8:	5b dd       	rcall	.-1354   	; 0x3f80 <_reply2ReturnCode>
    44ca:	0f 90       	pop	r0
    44cc:	0f 90       	pop	r0
    44ce:	0f 90       	pop	r0
    44d0:	0f 90       	pop	r0
    44d2:	0f 90       	pop	r0
    44d4:	0f 90       	pop	r0
    44d6:	81 11       	cpse	r24, r1
    44d8:	63 c0       	rjmp	.+198    	; 0x45a0 <lora_driver_configureToEu868+0x18a>
    44da:	32 e0       	ldi	r19, 0x02	; 2
    44dc:	3e 15       	cp	r19, r14
    44de:	e8 f4       	brcc	.+58     	; 0x451a <lora_driver_configureToEu868+0x104>
    44e0:	f6 01       	movw	r30, r12
    44e2:	83 81       	ldd	r24, Z+3	; 0x03
    44e4:	8f 93       	push	r24
    44e6:	82 81       	ldd	r24, Z+2	; 0x02
    44e8:	8f 93       	push	r24
    44ea:	81 81       	ldd	r24, Z+1	; 0x01
    44ec:	8f 93       	push	r24
    44ee:	80 81       	ld	r24, Z
    44f0:	8f 93       	push	r24
    44f2:	ff 92       	push	r15
    44f4:	ef 92       	push	r14
    44f6:	5f 92       	push	r5
    44f8:	4f 92       	push	r4
    44fa:	1f 93       	push	r17
    44fc:	0f 93       	push	r16
    44fe:	0e 94 b6 34 	call	0x696c	; 0x696c <sprintf>
    4502:	60 e0       	ldi	r22, 0x00	; 0
    4504:	70 e0       	ldi	r23, 0x00	; 0
    4506:	c8 01       	movw	r24, r16
    4508:	e1 dc       	rcall	.-1598   	; 0x3ecc <_uploadMessage>
    450a:	3a dd       	rcall	.-1420   	; 0x3f80 <_reply2ReturnCode>
    450c:	0f b6       	in	r0, 0x3f	; 63
    450e:	f8 94       	cli
    4510:	de bf       	out	0x3e, r29	; 62
    4512:	0f be       	out	0x3f, r0	; 63
    4514:	cd bf       	out	0x3d, r28	; 61
    4516:	81 11       	cpse	r24, r1
    4518:	43 c0       	rjmp	.+134    	; 0x45a0 <lora_driver_configureToEu868+0x18a>
    451a:	2f 92       	push	r2
    451c:	3f 92       	push	r3
    451e:	9f 92       	push	r9
    4520:	8f 92       	push	r8
    4522:	1f 93       	push	r17
    4524:	0f 93       	push	r16
    4526:	0e 94 b6 34 	call	0x696c	; 0x696c <sprintf>
    452a:	60 e0       	ldi	r22, 0x00	; 0
    452c:	70 e0       	ldi	r23, 0x00	; 0
    452e:	c8 01       	movw	r24, r16
    4530:	cd dc       	rcall	.-1638   	; 0x3ecc <_uploadMessage>
    4532:	26 dd       	rcall	.-1460   	; 0x3f80 <_reply2ReturnCode>
    4534:	0f 90       	pop	r0
    4536:	0f 90       	pop	r0
    4538:	0f 90       	pop	r0
    453a:	0f 90       	pop	r0
    453c:	0f 90       	pop	r0
    453e:	0f 90       	pop	r0
    4540:	81 11       	cpse	r24, r1
    4542:	2e c0       	rjmp	.+92     	; 0x45a0 <lora_driver_configureToEu868+0x18a>
    4544:	2f 92       	push	r2
    4546:	3f 92       	push	r3
    4548:	7f 92       	push	r7
    454a:	6f 92       	push	r6
    454c:	1f 93       	push	r17
    454e:	0f 93       	push	r16
    4550:	0e 94 b6 34 	call	0x696c	; 0x696c <sprintf>
    4554:	60 e0       	ldi	r22, 0x00	; 0
    4556:	70 e0       	ldi	r23, 0x00	; 0
    4558:	c8 01       	movw	r24, r16
    455a:	b8 dc       	rcall	.-1680   	; 0x3ecc <_uploadMessage>
    455c:	11 dd       	rcall	.-1502   	; 0x3f80 <_reply2ReturnCode>
    455e:	0f 90       	pop	r0
    4560:	0f 90       	pop	r0
    4562:	0f 90       	pop	r0
    4564:	0f 90       	pop	r0
    4566:	0f 90       	pop	r0
    4568:	0f 90       	pop	r0
    456a:	81 11       	cpse	r24, r1
    456c:	19 c0       	rjmp	.+50     	; 0x45a0 <lora_driver_configureToEu868+0x18a>
    456e:	3f ef       	ldi	r19, 0xFF	; 255
    4570:	e3 1a       	sub	r14, r19
    4572:	f3 0a       	sbc	r15, r19
    4574:	84 e0       	ldi	r24, 0x04	; 4
    4576:	c8 0e       	add	r12, r24
    4578:	d1 1c       	adc	r13, r1
    457a:	98 e0       	ldi	r25, 0x08	; 8
    457c:	e9 16       	cp	r14, r25
    457e:	f1 04       	cpc	r15, r1
    4580:	09 f0       	breq	.+2      	; 0x4584 <lora_driver_configureToEu868+0x16e>
    4582:	94 cf       	rjmp	.-216    	; 0x44ac <lora_driver_configureToEu868+0x96>
    4584:	60 e0       	ldi	r22, 0x00	; 0
    4586:	70 e0       	ldi	r23, 0x00	; 0
    4588:	87 e1       	ldi	r24, 0x17	; 23
    458a:	97 e0       	ldi	r25, 0x07	; 7
    458c:	9f dc       	rcall	.-1730   	; 0x3ecc <_uploadMessage>
    458e:	f8 dc       	rcall	.-1552   	; 0x3f80 <_reply2ReturnCode>
    4590:	81 11       	cpse	r24, r1
    4592:	06 c0       	rjmp	.+12     	; 0x45a0 <lora_driver_configureToEu868+0x18a>
    4594:	60 e0       	ldi	r22, 0x00	; 0
    4596:	70 e0       	ldi	r23, 0x00	; 0
    4598:	88 e2       	ldi	r24, 0x28	; 40
    459a:	97 e0       	ldi	r25, 0x07	; 7
    459c:	97 dc       	rcall	.-1746   	; 0x3ecc <_uploadMessage>
    459e:	f0 dc       	rcall	.-1568   	; 0x3f80 <_reply2ReturnCode>
    45a0:	a0 96       	adiw	r28, 0x20	; 32
    45a2:	0f b6       	in	r0, 0x3f	; 63
    45a4:	f8 94       	cli
    45a6:	de bf       	out	0x3e, r29	; 62
    45a8:	0f be       	out	0x3f, r0	; 63
    45aa:	cd bf       	out	0x3d, r28	; 61
    45ac:	df 91       	pop	r29
    45ae:	cf 91       	pop	r28
    45b0:	1f 91       	pop	r17
    45b2:	0f 91       	pop	r16
    45b4:	ff 90       	pop	r15
    45b6:	ef 90       	pop	r14
    45b8:	df 90       	pop	r13
    45ba:	cf 90       	pop	r12
    45bc:	bf 90       	pop	r11
    45be:	af 90       	pop	r10
    45c0:	9f 90       	pop	r9
    45c2:	8f 90       	pop	r8
    45c4:	7f 90       	pop	r7
    45c6:	6f 90       	pop	r6
    45c8:	5f 90       	pop	r5
    45ca:	4f 90       	pop	r4
    45cc:	3f 90       	pop	r3
    45ce:	2f 90       	pop	r2
    45d0:	08 95       	ret

000045d2 <lora_driver_setOtaaIdentity>:
    45d2:	ef 92       	push	r14
    45d4:	ff 92       	push	r15
    45d6:	0f 93       	push	r16
    45d8:	1f 93       	push	r17
    45da:	cf 93       	push	r28
    45dc:	df 93       	push	r29
    45de:	ec 01       	movw	r28, r24
    45e0:	8b 01       	movw	r16, r22
    45e2:	7a 01       	movw	r14, r20
    45e4:	81 e0       	ldi	r24, 0x01	; 1
    45e6:	f4 de       	rcall	.-536    	; 0x43d0 <lora_driver_setAdaptiveDataRate>
    45e8:	81 11       	cpse	r24, r1
    45ea:	0d c0       	rjmp	.+26     	; 0x4606 <lora_driver_setOtaaIdentity+0x34>
    45ec:	ce 01       	movw	r24, r28
    45ee:	d4 dd       	rcall	.-1112   	; 0x4198 <lora_driver_setApplicationIdentifier>
    45f0:	81 11       	cpse	r24, r1
    45f2:	09 c0       	rjmp	.+18     	; 0x4606 <lora_driver_setOtaaIdentity+0x34>
    45f4:	c8 01       	movw	r24, r16
    45f6:	e1 dd       	rcall	.-1086   	; 0x41ba <lora_driver_setApplicationKey>
    45f8:	81 11       	cpse	r24, r1
    45fa:	05 c0       	rjmp	.+10     	; 0x4606 <lora_driver_setOtaaIdentity+0x34>
    45fc:	c7 01       	movw	r24, r14
    45fe:	bb dd       	rcall	.-1162   	; 0x4176 <lora_driver_setDeviceIdentifier>
    4600:	81 11       	cpse	r24, r1
    4602:	01 c0       	rjmp	.+2      	; 0x4606 <lora_driver_setOtaaIdentity+0x34>
    4604:	eb dd       	rcall	.-1066   	; 0x41dc <lora_driver_saveMac>
    4606:	df 91       	pop	r29
    4608:	cf 91       	pop	r28
    460a:	1f 91       	pop	r17
    460c:	0f 91       	pop	r16
    460e:	ff 90       	pop	r15
    4610:	ef 90       	pop	r14
    4612:	08 95       	ret

00004614 <lora_driver_mapReturnCodeToText>:
    4614:	90 e0       	ldi	r25, 0x00	; 0
    4616:	fc 01       	movw	r30, r24
    4618:	ee 0f       	add	r30, r30
    461a:	ff 1f       	adc	r31, r31
    461c:	8e 0f       	add	r24, r30
    461e:	9f 1f       	adc	r25, r31
    4620:	fc 01       	movw	r30, r24
    4622:	ef 50       	subi	r30, 0x0F	; 15
    4624:	f8 4f       	sbci	r31, 0xF8	; 248
    4626:	81 81       	ldd	r24, Z+1	; 0x01
    4628:	92 81       	ldd	r25, Z+2	; 0x02
    462a:	08 95       	ret

0000462c <decode_port_no>:
    462c:	dc 01       	movw	r26, r24
    462e:	00 97       	sbiw	r24, 0x00	; 0
    4630:	29 f1       	breq	.+74     	; 0x467c <decode_port_no+0x50>
    4632:	fb 01       	movw	r30, r22
    4634:	20 81       	ld	r18, Z
    4636:	fc 01       	movw	r30, r24
    4638:	01 90       	ld	r0, Z+
    463a:	00 20       	and	r0, r0
    463c:	e9 f7       	brne	.-6      	; 0x4638 <decode_port_no+0xc>
    463e:	31 97       	sbiw	r30, 0x01	; 1
    4640:	e8 1b       	sub	r30, r24
    4642:	f9 0b       	sbc	r31, r25
    4644:	82 2f       	mov	r24, r18
    4646:	90 e0       	ldi	r25, 0x00	; 0
    4648:	e8 17       	cp	r30, r24
    464a:	f9 07       	cpc	r31, r25
    464c:	c8 f0       	brcs	.+50     	; 0x4680 <decode_port_no+0x54>
    464e:	80 e0       	ldi	r24, 0x00	; 0
    4650:	08 c0       	rjmp	.+16     	; 0x4662 <decode_port_no+0x36>
    4652:	88 0f       	add	r24, r24
    4654:	38 2f       	mov	r19, r24
    4656:	33 0f       	add	r19, r19
    4658:	33 0f       	add	r19, r19
    465a:	83 0f       	add	r24, r19
    465c:	80 53       	subi	r24, 0x30	; 48
    465e:	89 0f       	add	r24, r25
    4660:	2f 5f       	subi	r18, 0xFF	; 255
    4662:	fd 01       	movw	r30, r26
    4664:	e2 0f       	add	r30, r18
    4666:	f1 1d       	adc	r31, r1
    4668:	90 81       	ld	r25, Z
    466a:	30 ed       	ldi	r19, 0xD0	; 208
    466c:	39 0f       	add	r19, r25
    466e:	3a 30       	cpi	r19, 0x0A	; 10
    4670:	10 f4       	brcc	.+4      	; 0x4676 <decode_port_no+0x4a>
    4672:	91 11       	cpse	r25, r1
    4674:	ee cf       	rjmp	.-36     	; 0x4652 <decode_port_no+0x26>
    4676:	fb 01       	movw	r30, r22
    4678:	20 83       	st	Z, r18
    467a:	08 95       	ret
    467c:	80 e0       	ldi	r24, 0x00	; 0
    467e:	08 95       	ret
    4680:	80 e0       	ldi	r24, 0x00	; 0
    4682:	08 95       	ret

00004684 <decode_hexadecimal_string_bytes>:
    4684:	0f 93       	push	r16
    4686:	1f 93       	push	r17
    4688:	cf 93       	push	r28
    468a:	df 93       	push	r29
    468c:	dc 01       	movw	r26, r24
    468e:	ea 01       	movw	r28, r20
    4690:	20 97       	sbiw	r28, 0x00	; 0
    4692:	e1 f1       	breq	.+120    	; 0x470c <decode_hexadecimal_string_bytes+0x88>
    4694:	fa 01       	movw	r30, r20
    4696:	01 90       	ld	r0, Z+
    4698:	00 20       	and	r0, r0
    469a:	e9 f7       	brne	.-6      	; 0x4696 <decode_hexadecimal_string_bytes+0x12>
    469c:	31 97       	sbiw	r30, 0x01	; 1
    469e:	e4 1b       	sub	r30, r20
    46a0:	f5 0b       	sbc	r31, r21
    46a2:	32 97       	sbiw	r30, 0x02	; 2
    46a4:	10 f5       	brcc	.+68     	; 0x46ea <decode_hexadecimal_string_bytes+0x66>
    46a6:	32 c0       	rjmp	.+100    	; 0x470c <decode_hexadecimal_string_bytes+0x88>
    46a8:	8d 01       	movw	r16, r26
    46aa:	04 0f       	add	r16, r20
    46ac:	15 1f       	adc	r17, r21
    46ae:	30 e0       	ldi	r19, 0x00	; 0
    46b0:	ae 01       	movw	r20, r28
    46b2:	42 0f       	add	r20, r18
    46b4:	53 1f       	adc	r21, r19
    46b6:	fa 01       	movw	r30, r20
    46b8:	90 81       	ld	r25, Z
    46ba:	91 34       	cpi	r25, 0x41	; 65
    46bc:	28 f0       	brcs	.+10     	; 0x46c8 <decode_hexadecimal_string_bytes+0x44>
    46be:	97 53       	subi	r25, 0x37	; 55
    46c0:	59 2f       	mov	r21, r25
    46c2:	52 95       	swap	r21
    46c4:	50 7f       	andi	r21, 0xF0	; 240
    46c6:	03 c0       	rjmp	.+6      	; 0x46ce <decode_hexadecimal_string_bytes+0x4a>
    46c8:	59 2f       	mov	r21, r25
    46ca:	52 95       	swap	r21
    46cc:	50 7f       	andi	r21, 0xF0	; 240
    46ce:	2c 0f       	add	r18, r28
    46d0:	3d 1f       	adc	r19, r29
    46d2:	f9 01       	movw	r30, r18
    46d4:	91 81       	ldd	r25, Z+1	; 0x01
    46d6:	91 34       	cpi	r25, 0x41	; 65
    46d8:	10 f0       	brcs	.+4      	; 0x46de <decode_hexadecimal_string_bytes+0x5a>
    46da:	97 53       	subi	r25, 0x37	; 55
    46dc:	01 c0       	rjmp	.+2      	; 0x46e0 <decode_hexadecimal_string_bytes+0x5c>
    46de:	90 53       	subi	r25, 0x30	; 48
    46e0:	95 0f       	add	r25, r21
    46e2:	f8 01       	movw	r30, r16
    46e4:	90 83       	st	Z, r25
    46e6:	8f 5f       	subi	r24, 0xFF	; 255
    46e8:	01 c0       	rjmp	.+2      	; 0x46ec <decode_hexadecimal_string_bytes+0x68>
    46ea:	80 e0       	ldi	r24, 0x00	; 0
    46ec:	28 2f       	mov	r18, r24
    46ee:	22 0f       	add	r18, r18
    46f0:	48 2f       	mov	r20, r24
    46f2:	50 e0       	ldi	r21, 0x00	; 0
    46f4:	fe 01       	movw	r30, r28
    46f6:	01 90       	ld	r0, Z+
    46f8:	00 20       	and	r0, r0
    46fa:	e9 f7       	brne	.-6      	; 0x46f6 <decode_hexadecimal_string_bytes+0x72>
    46fc:	31 97       	sbiw	r30, 0x01	; 1
    46fe:	ec 1b       	sub	r30, r28
    4700:	fd 0b       	sbc	r31, r29
    4702:	4e 17       	cp	r20, r30
    4704:	5f 07       	cpc	r21, r31
    4706:	10 f4       	brcc	.+4      	; 0x470c <decode_hexadecimal_string_bytes+0x88>
    4708:	86 13       	cpse	r24, r22
    470a:	ce cf       	rjmp	.-100    	; 0x46a8 <decode_hexadecimal_string_bytes+0x24>
    470c:	df 91       	pop	r29
    470e:	cf 91       	pop	r28
    4710:	1f 91       	pop	r17
    4712:	0f 91       	pop	r16
    4714:	08 95       	ret

00004716 <_serialCallBack>:
    4716:	80 91 aa 16 	lds	r24, 0x16AA	; 0x8016aa <crc_sum.1945>
    471a:	86 0f       	add	r24, r22
    471c:	80 93 aa 16 	sts	0x16AA, r24	; 0x8016aa <crc_sum.1945>
    4720:	90 91 ad 16 	lds	r25, 0x16AD	; 0x8016ad <_mh_state>
    4724:	91 30       	cpi	r25, 0x01	; 1
    4726:	79 f0       	breq	.+30     	; 0x4746 <_serialCallBack+0x30>
    4728:	28 f0       	brcs	.+10     	; 0x4734 <_serialCallBack+0x1e>
    472a:	92 30       	cpi	r25, 0x02	; 2
    472c:	a9 f0       	breq	.+42     	; 0x4758 <_serialCallBack+0x42>
    472e:	93 30       	cpi	r25, 0x03	; 3
    4730:	19 f1       	breq	.+70     	; 0x4778 <_serialCallBack+0x62>
    4732:	08 95       	ret
    4734:	6f 3f       	cpi	r22, 0xFF	; 255
    4736:	09 f0       	breq	.+2      	; 0x473a <_serialCallBack+0x24>
    4738:	48 c0       	rjmp	.+144    	; 0x47ca <_serialCallBack+0xb4>
    473a:	10 92 aa 16 	sts	0x16AA, r1	; 0x8016aa <crc_sum.1945>
    473e:	81 e0       	ldi	r24, 0x01	; 1
    4740:	80 93 ad 16 	sts	0x16AD, r24	; 0x8016ad <_mh_state>
    4744:	08 95       	ret
    4746:	66 38       	cpi	r22, 0x86	; 134
    4748:	09 f0       	breq	.+2      	; 0x474c <_serialCallBack+0x36>
    474a:	3f c0       	rjmp	.+126    	; 0x47ca <_serialCallBack+0xb4>
    474c:	10 92 a9 16 	sts	0x16A9, r1	; 0x8016a9 <inDex.1943>
    4750:	82 e0       	ldi	r24, 0x02	; 2
    4752:	80 93 ad 16 	sts	0x16AD, r24	; 0x8016ad <_mh_state>
    4756:	08 95       	ret
    4758:	e0 91 a9 16 	lds	r30, 0x16A9	; 0x8016a9 <inDex.1943>
    475c:	81 e0       	ldi	r24, 0x01	; 1
    475e:	8e 0f       	add	r24, r30
    4760:	80 93 a9 16 	sts	0x16A9, r24	; 0x8016a9 <inDex.1943>
    4764:	f0 e0       	ldi	r31, 0x00	; 0
    4766:	e9 55       	subi	r30, 0x59	; 89
    4768:	f9 4e       	sbci	r31, 0xE9	; 233
    476a:	60 83       	st	Z, r22
    476c:	82 30       	cpi	r24, 0x02	; 2
    476e:	69 f5       	brne	.+90     	; 0x47ca <_serialCallBack+0xb4>
    4770:	83 e0       	ldi	r24, 0x03	; 3
    4772:	80 93 ad 16 	sts	0x16AD, r24	; 0x8016ad <_mh_state>
    4776:	08 95       	ret
    4778:	90 91 a9 16 	lds	r25, 0x16A9	; 0x8016a9 <inDex.1943>
    477c:	21 e0       	ldi	r18, 0x01	; 1
    477e:	29 0f       	add	r18, r25
    4780:	20 93 a9 16 	sts	0x16A9, r18	; 0x8016a9 <inDex.1943>
    4784:	96 30       	cpi	r25, 0x06	; 6
    4786:	09 f5       	brne	.+66     	; 0x47ca <_serialCallBack+0xb4>
    4788:	81 11       	cpse	r24, r1
    478a:	0e c0       	rjmp	.+28     	; 0x47a8 <_serialCallBack+0x92>
    478c:	e7 ea       	ldi	r30, 0xA7	; 167
    478e:	f6 e1       	ldi	r31, 0x16	; 22
    4790:	80 81       	ld	r24, Z
    4792:	90 e0       	ldi	r25, 0x00	; 0
    4794:	98 2f       	mov	r25, r24
    4796:	88 27       	eor	r24, r24
    4798:	21 81       	ldd	r18, Z+1	; 0x01
    479a:	82 0f       	add	r24, r18
    479c:	91 1d       	adc	r25, r1
    479e:	90 93 af 16 	sts	0x16AF, r25	; 0x8016af <_ppm+0x1>
    47a2:	80 93 ae 16 	sts	0x16AE, r24	; 0x8016ae <_ppm>
    47a6:	04 c0       	rjmp	.+8      	; 0x47b0 <_serialCallBack+0x9a>
    47a8:	10 92 af 16 	sts	0x16AF, r1	; 0x8016af <_ppm+0x1>
    47ac:	10 92 ae 16 	sts	0x16AE, r1	; 0x8016ae <_ppm>
    47b0:	10 92 ad 16 	sts	0x16AD, r1	; 0x8016ad <_mh_state>
    47b4:	e0 91 ab 16 	lds	r30, 0x16AB	; 0x8016ab <_appCallBack>
    47b8:	f0 91 ac 16 	lds	r31, 0x16AC	; 0x8016ac <_appCallBack+0x1>
    47bc:	30 97       	sbiw	r30, 0x00	; 0
    47be:	29 f0       	breq	.+10     	; 0x47ca <_serialCallBack+0xb4>
    47c0:	80 91 ae 16 	lds	r24, 0x16AE	; 0x8016ae <_ppm>
    47c4:	90 91 af 16 	lds	r25, 0x16AF	; 0x8016af <_ppm+0x1>
    47c8:	19 95       	eicall
    47ca:	08 95       	ret

000047cc <mh_z19_initialise>:
    47cc:	8f 92       	push	r8
    47ce:	9f 92       	push	r9
    47d0:	af 92       	push	r10
    47d2:	cf 92       	push	r12
    47d4:	ef 92       	push	r14
    47d6:	0f 93       	push	r16
    47d8:	0f 2e       	mov	r0, r31
    47da:	fb e8       	ldi	r31, 0x8B	; 139
    47dc:	8f 2e       	mov	r8, r31
    47de:	f3 e2       	ldi	r31, 0x23	; 35
    47e0:	9f 2e       	mov	r9, r31
    47e2:	f0 2d       	mov	r31, r0
    47e4:	68 94       	set
    47e6:	aa 24       	eor	r10, r10
    47e8:	a4 f8       	bld	r10, 4
    47ea:	68 94       	set
    47ec:	cc 24       	eor	r12, r12
    47ee:	c4 f8       	bld	r12, 4
    47f0:	e1 2c       	mov	r14, r1
    47f2:	00 e0       	ldi	r16, 0x00	; 0
    47f4:	23 e0       	ldi	r18, 0x03	; 3
    47f6:	40 e8       	ldi	r20, 0x80	; 128
    47f8:	55 e2       	ldi	r21, 0x25	; 37
    47fa:	60 e0       	ldi	r22, 0x00	; 0
    47fc:	70 e0       	ldi	r23, 0x00	; 0
    47fe:	84 d0       	rcall	.+264    	; 0x4908 <serial_create>
    4800:	90 93 b1 16 	sts	0x16B1, r25	; 0x8016b1 <_serial+0x1>
    4804:	80 93 b0 16 	sts	0x16B0, r24	; 0x8016b0 <_serial>
    4808:	0f 91       	pop	r16
    480a:	ef 90       	pop	r14
    480c:	cf 90       	pop	r12
    480e:	af 90       	pop	r10
    4810:	9f 90       	pop	r9
    4812:	8f 90       	pop	r8
    4814:	08 95       	ret

00004816 <mh_z19_injectCallBack>:
    4816:	90 93 ac 16 	sts	0x16AC, r25	; 0x8016ac <_appCallBack+0x1>
    481a:	80 93 ab 16 	sts	0x16AB, r24	; 0x8016ab <_appCallBack>
    481e:	08 95       	ret

00004820 <mh_z19_takeMeassuring>:
    4820:	cf 93       	push	r28
    4822:	df 93       	push	r29
    4824:	cd b7       	in	r28, 0x3d	; 61
    4826:	de b7       	in	r29, 0x3e	; 62
    4828:	29 97       	sbiw	r28, 0x09	; 9
    482a:	0f b6       	in	r0, 0x3f	; 63
    482c:	f8 94       	cli
    482e:	de bf       	out	0x3e, r29	; 62
    4830:	0f be       	out	0x3f, r0	; 63
    4832:	cd bf       	out	0x3d, r28	; 61
    4834:	89 e0       	ldi	r24, 0x09	; 9
    4836:	e2 e4       	ldi	r30, 0x42	; 66
    4838:	f2 e0       	ldi	r31, 0x02	; 2
    483a:	9e 01       	movw	r18, r28
    483c:	2f 5f       	subi	r18, 0xFF	; 255
    483e:	3f 4f       	sbci	r19, 0xFF	; 255
    4840:	d9 01       	movw	r26, r18
    4842:	01 90       	ld	r0, Z+
    4844:	0d 92       	st	X+, r0
    4846:	8a 95       	dec	r24
    4848:	e1 f7       	brne	.-8      	; 0x4842 <mh_z19_takeMeassuring+0x22>
    484a:	10 92 af 16 	sts	0x16AF, r1	; 0x8016af <_ppm+0x1>
    484e:	10 92 ae 16 	sts	0x16AE, r1	; 0x8016ae <_ppm>
    4852:	80 91 b0 16 	lds	r24, 0x16B0	; 0x8016b0 <_serial>
    4856:	90 91 b1 16 	lds	r25, 0x16B1	; 0x8016b1 <_serial+0x1>
    485a:	00 97       	sbiw	r24, 0x00	; 0
    485c:	31 f0       	breq	.+12     	; 0x486a <mh_z19_takeMeassuring+0x4a>
    485e:	42 2f       	mov	r20, r18
    4860:	53 2f       	mov	r21, r19
    4862:	69 e0       	ldi	r22, 0x09	; 9
    4864:	1e d1       	rcall	.+572    	; 0x4aa2 <serial_sendBytes>
    4866:	80 e0       	ldi	r24, 0x00	; 0
    4868:	01 c0       	rjmp	.+2      	; 0x486c <mh_z19_takeMeassuring+0x4c>
    486a:	82 e0       	ldi	r24, 0x02	; 2
    486c:	29 96       	adiw	r28, 0x09	; 9
    486e:	0f b6       	in	r0, 0x3f	; 63
    4870:	f8 94       	cli
    4872:	de bf       	out	0x3e, r29	; 62
    4874:	0f be       	out	0x3f, r0	; 63
    4876:	cd bf       	out	0x3d, r28	; 61
    4878:	df 91       	pop	r29
    487a:	cf 91       	pop	r28
    487c:	08 95       	ret

0000487e <mh_z19_getCo2Ppm>:
    487e:	20 91 ae 16 	lds	r18, 0x16AE	; 0x8016ae <_ppm>
    4882:	30 91 af 16 	lds	r19, 0x16AF	; 0x8016af <_ppm+0x1>
    4886:	21 15       	cp	r18, r1
    4888:	31 05       	cpc	r19, r1
    488a:	29 f4       	brne	.+10     	; 0x4896 <mh_z19_getCo2Ppm+0x18>
    488c:	fc 01       	movw	r30, r24
    488e:	11 82       	std	Z+1, r1	; 0x01
    4890:	10 82       	st	Z, r1
    4892:	81 e0       	ldi	r24, 0x01	; 1
    4894:	08 95       	ret
    4896:	fc 01       	movw	r30, r24
    4898:	31 83       	std	Z+1, r19	; 0x01
    489a:	20 83       	st	Z, r18
    489c:	80 e0       	ldi	r24, 0x00	; 0
    489e:	08 95       	ret

000048a0 <rc_servo_setPosition>:
    48a0:	65 36       	cpi	r22, 0x65	; 101
    48a2:	0c f0       	brlt	.+2      	; 0x48a6 <rc_servo_setPosition+0x6>
    48a4:	64 e6       	ldi	r22, 0x64	; 100
    48a6:	6c 39       	cpi	r22, 0x9C	; 156
    48a8:	0c f4       	brge	.+2      	; 0x48ac <rc_servo_setPosition+0xc>
    48aa:	6c e9       	ldi	r22, 0x9C	; 156
    48ac:	96 ef       	ldi	r25, 0xF6	; 246
    48ae:	69 02       	muls	r22, r25
    48b0:	b0 01       	movw	r22, r0
    48b2:	11 24       	eor	r1, r1
    48b4:	68 54       	subi	r22, 0x48	; 72
    48b6:	74 4f       	sbci	r23, 0xF4	; 244
    48b8:	81 11       	cpse	r24, r1
    48ba:	05 c0       	rjmp	.+10     	; 0x48c6 <rc_servo_setPosition+0x26>
    48bc:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    48c0:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    48c4:	08 95       	ret
    48c6:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    48ca:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    48ce:	08 95       	ret

000048d0 <rc_servo_initialise>:
    48d0:	ea e0       	ldi	r30, 0x0A	; 10
    48d2:	f1 e0       	ldi	r31, 0x01	; 1
    48d4:	80 81       	ld	r24, Z
    48d6:	88 61       	ori	r24, 0x18	; 24
    48d8:	80 83       	st	Z, r24
    48da:	8f e3       	ldi	r24, 0x3F	; 63
    48dc:	9c e9       	ldi	r25, 0x9C	; 156
    48de:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    48e2:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    48e6:	60 e0       	ldi	r22, 0x00	; 0
    48e8:	80 e0       	ldi	r24, 0x00	; 0
    48ea:	da df       	rcall	.-76     	; 0x48a0 <rc_servo_setPosition>
    48ec:	60 e0       	ldi	r22, 0x00	; 0
    48ee:	81 e0       	ldi	r24, 0x01	; 1
    48f0:	d7 df       	rcall	.-82     	; 0x48a0 <rc_servo_setPosition>
    48f2:	e0 e2       	ldi	r30, 0x20	; 32
    48f4:	f1 e0       	ldi	r31, 0x01	; 1
    48f6:	80 81       	ld	r24, Z
    48f8:	82 6a       	ori	r24, 0xA2	; 162
    48fa:	80 83       	st	Z, r24
    48fc:	e1 e2       	ldi	r30, 0x21	; 33
    48fe:	f1 e0       	ldi	r31, 0x01	; 1
    4900:	80 81       	ld	r24, Z
    4902:	8a 61       	ori	r24, 0x1A	; 26
    4904:	80 83       	st	Z, r24
    4906:	08 95       	ret

00004908 <serial_create>:
    4908:	2f 92       	push	r2
    490a:	3f 92       	push	r3
    490c:	4f 92       	push	r4
    490e:	5f 92       	push	r5
    4910:	6f 92       	push	r6
    4912:	7f 92       	push	r7
    4914:	8f 92       	push	r8
    4916:	9f 92       	push	r9
    4918:	af 92       	push	r10
    491a:	cf 92       	push	r12
    491c:	ef 92       	push	r14
    491e:	ff 92       	push	r15
    4920:	0f 93       	push	r16
    4922:	1f 93       	push	r17
    4924:	cf 93       	push	r28
    4926:	df 93       	push	r29
    4928:	cd b7       	in	r28, 0x3d	; 61
    492a:	de b7       	in	r29, 0x3e	; 62
    492c:	f8 2e       	mov	r15, r24
    492e:	2a 01       	movw	r4, r20
    4930:	3b 01       	movw	r6, r22
    4932:	88 e0       	ldi	r24, 0x08	; 8
    4934:	90 e0       	ldi	r25, 0x00	; 0
    4936:	0e 94 c5 31 	call	0x638a	; 0x638a <malloc>
    493a:	8c 01       	movw	r16, r24
    493c:	8f 2d       	mov	r24, r15
    493e:	90 e0       	ldi	r25, 0x00	; 0
    4940:	fc 01       	movw	r30, r24
    4942:	ee 0f       	add	r30, r30
    4944:	ff 1f       	adc	r31, r31
    4946:	ee 54       	subi	r30, 0x4E	; 78
    4948:	f9 4e       	sbci	r31, 0xE9	; 233
    494a:	11 83       	std	Z+1, r17	; 0x01
    494c:	00 83       	st	Z, r16
    494e:	01 15       	cp	r16, r1
    4950:	11 05       	cpc	r17, r1
    4952:	09 f4       	brne	.+2      	; 0x4956 <serial_create+0x4e>
    4954:	69 c0       	rjmp	.+210    	; 0x4a28 <serial_create+0x120>
    4956:	88 0f       	add	r24, r24
    4958:	99 1f       	adc	r25, r25
    495a:	fc 01       	movw	r30, r24
    495c:	e5 5f       	subi	r30, 0xF5	; 245
    495e:	fd 4f       	sbci	r31, 0xFD	; 253
    4960:	80 81       	ld	r24, Z
    4962:	91 81       	ldd	r25, Z+1	; 0x01
    4964:	d8 01       	movw	r26, r16
    4966:	8d 93       	st	X+, r24
    4968:	9c 93       	st	X, r25
    496a:	6c 2d       	mov	r22, r12
    496c:	70 e0       	ldi	r23, 0x00	; 0
    496e:	84 e0       	ldi	r24, 0x04	; 4
    4970:	90 e0       	ldi	r25, 0x00	; 0
    4972:	0e 94 ab 31 	call	0x6356	; 0x6356 <calloc>
    4976:	1c 01       	movw	r2, r24
    4978:	61 e0       	ldi	r22, 0x01	; 1
    497a:	70 e0       	ldi	r23, 0x00	; 0
    497c:	86 e0       	ldi	r24, 0x06	; 6
    497e:	90 e0       	ldi	r25, 0x00	; 0
    4980:	0e 94 ab 31 	call	0x6356	; 0x6356 <calloc>
    4984:	7c 01       	movw	r14, r24
    4986:	4c 2d       	mov	r20, r12
    4988:	b1 01       	movw	r22, r2
    498a:	f1 d6       	rcall	.+3554   	; 0x576e <fifo_init>
    498c:	f8 01       	movw	r30, r16
    498e:	f5 82       	std	Z+5, r15	; 0x05
    4990:	e4 82       	std	Z+4, r14	; 0x04
    4992:	6a 2d       	mov	r22, r10
    4994:	70 e0       	ldi	r23, 0x00	; 0
    4996:	84 e0       	ldi	r24, 0x04	; 4
    4998:	90 e0       	ldi	r25, 0x00	; 0
    499a:	0e 94 ab 31 	call	0x6356	; 0x6356 <calloc>
    499e:	1c 01       	movw	r2, r24
    49a0:	61 e0       	ldi	r22, 0x01	; 1
    49a2:	70 e0       	ldi	r23, 0x00	; 0
    49a4:	86 e0       	ldi	r24, 0x06	; 6
    49a6:	90 e0       	ldi	r25, 0x00	; 0
    49a8:	0e 94 ab 31 	call	0x6356	; 0x6356 <calloc>
    49ac:	7c 01       	movw	r14, r24
    49ae:	4a 2d       	mov	r20, r10
    49b0:	b1 01       	movw	r22, r2
    49b2:	dd d6       	rcall	.+3514   	; 0x576e <fifo_init>
    49b4:	d8 01       	movw	r26, r16
    49b6:	13 96       	adiw	r26, 0x03	; 3
    49b8:	fc 92       	st	X, r15
    49ba:	ee 92       	st	-X, r14
    49bc:	12 97       	sbiw	r26, 0x02	; 2
    49be:	17 96       	adiw	r26, 0x07	; 7
    49c0:	9c 92       	st	X, r9
    49c2:	8e 92       	st	-X, r8
    49c4:	16 97       	sbiw	r26, 0x06	; 6
    49c6:	ff b6       	in	r15, 0x3f	; 63
    49c8:	f8 94       	cli
    49ca:	ed 91       	ld	r30, X+
    49cc:	fc 91       	ld	r31, X
    49ce:	11 97       	sbiw	r26, 0x01	; 1
    49d0:	36 97       	sbiw	r30, 0x06	; 6
    49d2:	80 81       	ld	r24, Z
    49d4:	82 60       	ori	r24, 0x02	; 2
    49d6:	80 83       	st	Z, r24
    49d8:	8d 90       	ld	r8, X+
    49da:	9c 90       	ld	r9, X
    49dc:	c3 01       	movw	r24, r6
    49de:	b2 01       	movw	r22, r4
    49e0:	e0 d7       	rcall	.+4032   	; 0x59a2 <__floatunsisf>
    49e2:	20 e0       	ldi	r18, 0x00	; 0
    49e4:	30 e0       	ldi	r19, 0x00	; 0
    49e6:	40 e0       	ldi	r20, 0x00	; 0
    49e8:	51 e4       	ldi	r21, 0x41	; 65
    49ea:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <__mulsf3>
    49ee:	9b 01       	movw	r18, r22
    49f0:	ac 01       	movw	r20, r24
    49f2:	60 e0       	ldi	r22, 0x00	; 0
    49f4:	74 e2       	ldi	r23, 0x24	; 36
    49f6:	84 e7       	ldi	r24, 0x74	; 116
    49f8:	9b e4       	ldi	r25, 0x4B	; 75
    49fa:	3a d7       	rcall	.+3700   	; 0x5870 <__divsf3>
    49fc:	20 e0       	ldi	r18, 0x00	; 0
    49fe:	30 e0       	ldi	r19, 0x00	; 0
    4a00:	40 e8       	ldi	r20, 0x80	; 128
    4a02:	5f e3       	ldi	r21, 0x3F	; 63
    4a04:	d0 d6       	rcall	.+3488   	; 0x57a6 <__subsf3>
    4a06:	a1 d7       	rcall	.+3906   	; 0x594a <__fixunssfsi>
    4a08:	f4 01       	movw	r30, r8
    4a0a:	32 97       	sbiw	r30, 0x02	; 2
    4a0c:	60 83       	st	Z, r22
    4a0e:	d8 01       	movw	r26, r16
    4a10:	ed 91       	ld	r30, X+
    4a12:	fc 91       	ld	r31, X
    4a14:	11 97       	sbiw	r26, 0x01	; 1
    4a16:	35 97       	sbiw	r30, 0x05	; 5
    4a18:	88 e9       	ldi	r24, 0x98	; 152
    4a1a:	80 83       	st	Z, r24
    4a1c:	ed 91       	ld	r30, X+
    4a1e:	fc 91       	ld	r31, X
    4a20:	34 97       	sbiw	r30, 0x04	; 4
    4a22:	86 e0       	ldi	r24, 0x06	; 6
    4a24:	80 83       	st	Z, r24
    4a26:	ff be       	out	0x3f, r15	; 63
    4a28:	c8 01       	movw	r24, r16
    4a2a:	df 91       	pop	r29
    4a2c:	cf 91       	pop	r28
    4a2e:	1f 91       	pop	r17
    4a30:	0f 91       	pop	r16
    4a32:	ff 90       	pop	r15
    4a34:	ef 90       	pop	r14
    4a36:	cf 90       	pop	r12
    4a38:	af 90       	pop	r10
    4a3a:	9f 90       	pop	r9
    4a3c:	8f 90       	pop	r8
    4a3e:	7f 90       	pop	r7
    4a40:	6f 90       	pop	r6
    4a42:	5f 90       	pop	r5
    4a44:	4f 90       	pop	r4
    4a46:	3f 90       	pop	r3
    4a48:	2f 90       	pop	r2
    4a4a:	08 95       	ret

00004a4c <serial_sendByte>:
    4a4c:	cf 93       	push	r28
    4a4e:	df 93       	push	r29
    4a50:	dc 01       	movw	r26, r24
    4a52:	89 2b       	or	r24, r25
    4a54:	01 f1       	breq	.+64     	; 0x4a96 <serial_sendByte+0x4a>
    4a56:	12 96       	adiw	r26, 0x02	; 2
    4a58:	ed 91       	ld	r30, X+
    4a5a:	fc 91       	ld	r31, X
    4a5c:	13 97       	sbiw	r26, 0x03	; 3
    4a5e:	93 81       	ldd	r25, Z+3	; 0x03
    4a60:	82 81       	ldd	r24, Z+2	; 0x02
    4a62:	25 81       	ldd	r18, Z+5	; 0x05
    4a64:	98 1b       	sub	r25, r24
    4a66:	92 23       	and	r25, r18
    4a68:	84 81       	ldd	r24, Z+4	; 0x04
    4a6a:	98 17       	cp	r25, r24
    4a6c:	b1 f0       	breq	.+44     	; 0x4a9a <serial_sendByte+0x4e>
    4a6e:	83 81       	ldd	r24, Z+3	; 0x03
    4a70:	26 95       	lsr	r18
    4a72:	28 23       	and	r18, r24
    4a74:	c0 81       	ld	r28, Z
    4a76:	d1 81       	ldd	r29, Z+1	; 0x01
    4a78:	c2 0f       	add	r28, r18
    4a7a:	d1 1d       	adc	r29, r1
    4a7c:	68 83       	st	Y, r22
    4a7e:	8f 5f       	subi	r24, 0xFF	; 255
    4a80:	95 81       	ldd	r25, Z+5	; 0x05
    4a82:	89 23       	and	r24, r25
    4a84:	83 83       	std	Z+3, r24	; 0x03
    4a86:	ed 91       	ld	r30, X+
    4a88:	fc 91       	ld	r31, X
    4a8a:	35 97       	sbiw	r30, 0x05	; 5
    4a8c:	80 81       	ld	r24, Z
    4a8e:	80 62       	ori	r24, 0x20	; 32
    4a90:	80 83       	st	Z, r24
    4a92:	80 e0       	ldi	r24, 0x00	; 0
    4a94:	03 c0       	rjmp	.+6      	; 0x4a9c <serial_sendByte+0x50>
    4a96:	81 e0       	ldi	r24, 0x01	; 1
    4a98:	01 c0       	rjmp	.+2      	; 0x4a9c <serial_sendByte+0x50>
    4a9a:	82 e0       	ldi	r24, 0x02	; 2
    4a9c:	df 91       	pop	r29
    4a9e:	cf 91       	pop	r28
    4aa0:	08 95       	ret

00004aa2 <serial_sendBytes>:
    4aa2:	ef 92       	push	r14
    4aa4:	ff 92       	push	r15
    4aa6:	0f 93       	push	r16
    4aa8:	1f 93       	push	r17
    4aaa:	cf 93       	push	r28
    4aac:	df 93       	push	r29
    4aae:	7c 01       	movw	r14, r24
    4ab0:	00 97       	sbiw	r24, 0x00	; 0
    4ab2:	09 f4       	brne	.+2      	; 0x4ab6 <serial_sendBytes+0x14>
    4ab4:	41 c0       	rjmp	.+130    	; 0x4b38 <serial_sendBytes+0x96>
    4ab6:	dc 01       	movw	r26, r24
    4ab8:	12 96       	adiw	r26, 0x02	; 2
    4aba:	ed 91       	ld	r30, X+
    4abc:	fc 91       	ld	r31, X
    4abe:	13 97       	sbiw	r26, 0x03	; 3
    4ac0:	93 81       	ldd	r25, Z+3	; 0x03
    4ac2:	82 81       	ldd	r24, Z+2	; 0x02
    4ac4:	98 1b       	sub	r25, r24
    4ac6:	85 81       	ldd	r24, Z+5	; 0x05
    4ac8:	98 23       	and	r25, r24
    4aca:	84 81       	ldd	r24, Z+4	; 0x04
    4acc:	89 1b       	sub	r24, r25
    4ace:	86 17       	cp	r24, r22
    4ad0:	a8 f1       	brcs	.+106    	; 0x4b3c <serial_sendBytes+0x9a>
    4ad2:	66 23       	and	r22, r22
    4ad4:	41 f1       	breq	.+80     	; 0x4b26 <serial_sendBytes+0x84>
    4ad6:	84 2f       	mov	r24, r20
    4ad8:	95 2f       	mov	r25, r21
    4ada:	dc 01       	movw	r26, r24
    4adc:	61 50       	subi	r22, 0x01	; 1
    4ade:	46 2f       	mov	r20, r22
    4ae0:	50 e0       	ldi	r21, 0x00	; 0
    4ae2:	4f 5f       	subi	r20, 0xFF	; 255
    4ae4:	5f 4f       	sbci	r21, 0xFF	; 255
    4ae6:	48 0f       	add	r20, r24
    4ae8:	59 1f       	adc	r21, r25
    4aea:	e7 01       	movw	r28, r14
    4aec:	ea 81       	ldd	r30, Y+2	; 0x02
    4aee:	fb 81       	ldd	r31, Y+3	; 0x03
    4af0:	93 81       	ldd	r25, Z+3	; 0x03
    4af2:	82 81       	ldd	r24, Z+2	; 0x02
    4af4:	25 81       	ldd	r18, Z+5	; 0x05
    4af6:	98 1b       	sub	r25, r24
    4af8:	92 23       	and	r25, r18
    4afa:	84 81       	ldd	r24, Z+4	; 0x04
    4afc:	98 17       	cp	r25, r24
    4afe:	79 f0       	breq	.+30     	; 0x4b1e <serial_sendBytes+0x7c>
    4b00:	8c 91       	ld	r24, X
    4b02:	93 81       	ldd	r25, Z+3	; 0x03
    4b04:	26 95       	lsr	r18
    4b06:	29 23       	and	r18, r25
    4b08:	60 81       	ld	r22, Z
    4b0a:	71 81       	ldd	r23, Z+1	; 0x01
    4b0c:	8b 01       	movw	r16, r22
    4b0e:	02 0f       	add	r16, r18
    4b10:	11 1d       	adc	r17, r1
    4b12:	e8 01       	movw	r28, r16
    4b14:	88 83       	st	Y, r24
    4b16:	9f 5f       	subi	r25, 0xFF	; 255
    4b18:	85 81       	ldd	r24, Z+5	; 0x05
    4b1a:	98 23       	and	r25, r24
    4b1c:	93 83       	std	Z+3, r25	; 0x03
    4b1e:	11 96       	adiw	r26, 0x01	; 1
    4b20:	a4 17       	cp	r26, r20
    4b22:	b5 07       	cpc	r27, r21
    4b24:	11 f7       	brne	.-60     	; 0x4aea <serial_sendBytes+0x48>
    4b26:	d7 01       	movw	r26, r14
    4b28:	ed 91       	ld	r30, X+
    4b2a:	fc 91       	ld	r31, X
    4b2c:	35 97       	sbiw	r30, 0x05	; 5
    4b2e:	80 81       	ld	r24, Z
    4b30:	80 62       	ori	r24, 0x20	; 32
    4b32:	80 83       	st	Z, r24
    4b34:	80 e0       	ldi	r24, 0x00	; 0
    4b36:	03 c0       	rjmp	.+6      	; 0x4b3e <serial_sendBytes+0x9c>
    4b38:	81 e0       	ldi	r24, 0x01	; 1
    4b3a:	01 c0       	rjmp	.+2      	; 0x4b3e <serial_sendBytes+0x9c>
    4b3c:	82 e0       	ldi	r24, 0x02	; 2
    4b3e:	df 91       	pop	r29
    4b40:	cf 91       	pop	r28
    4b42:	1f 91       	pop	r17
    4b44:	0f 91       	pop	r16
    4b46:	ff 90       	pop	r15
    4b48:	ef 90       	pop	r14
    4b4a:	08 95       	ret

00004b4c <serial_getByte>:
    4b4c:	00 97       	sbiw	r24, 0x00	; 0
    4b4e:	d1 f0       	breq	.+52     	; 0x4b84 <serial_getByte+0x38>
    4b50:	dc 01       	movw	r26, r24
    4b52:	14 96       	adiw	r26, 0x04	; 4
    4b54:	ed 91       	ld	r30, X+
    4b56:	fc 91       	ld	r31, X
    4b58:	15 97       	sbiw	r26, 0x05	; 5
    4b5a:	93 81       	ldd	r25, Z+3	; 0x03
    4b5c:	82 81       	ldd	r24, Z+2	; 0x02
    4b5e:	98 17       	cp	r25, r24
    4b60:	99 f0       	breq	.+38     	; 0x4b88 <serial_getByte+0x3c>
    4b62:	92 81       	ldd	r25, Z+2	; 0x02
    4b64:	85 81       	ldd	r24, Z+5	; 0x05
    4b66:	86 95       	lsr	r24
    4b68:	89 23       	and	r24, r25
    4b6a:	a0 81       	ld	r26, Z
    4b6c:	b1 81       	ldd	r27, Z+1	; 0x01
    4b6e:	a8 0f       	add	r26, r24
    4b70:	b1 1d       	adc	r27, r1
    4b72:	8c 91       	ld	r24, X
    4b74:	db 01       	movw	r26, r22
    4b76:	8c 93       	st	X, r24
    4b78:	9f 5f       	subi	r25, 0xFF	; 255
    4b7a:	85 81       	ldd	r24, Z+5	; 0x05
    4b7c:	98 23       	and	r25, r24
    4b7e:	92 83       	std	Z+2, r25	; 0x02
    4b80:	80 e0       	ldi	r24, 0x00	; 0
    4b82:	08 95       	ret
    4b84:	81 e0       	ldi	r24, 0x01	; 1
    4b86:	08 95       	ret
    4b88:	83 e0       	ldi	r24, 0x03	; 3
    4b8a:	08 95       	ret

00004b8c <__vector_25>:
    4b8c:	1f 92       	push	r1
    4b8e:	0f 92       	push	r0
    4b90:	0f b6       	in	r0, 0x3f	; 63
    4b92:	0f 92       	push	r0
    4b94:	11 24       	eor	r1, r1
    4b96:	0b b6       	in	r0, 0x3b	; 59
    4b98:	0f 92       	push	r0
    4b9a:	2f 93       	push	r18
    4b9c:	3f 93       	push	r19
    4b9e:	4f 93       	push	r20
    4ba0:	5f 93       	push	r21
    4ba2:	6f 93       	push	r22
    4ba4:	7f 93       	push	r23
    4ba6:	8f 93       	push	r24
    4ba8:	9f 93       	push	r25
    4baa:	af 93       	push	r26
    4bac:	bf 93       	push	r27
    4bae:	cf 93       	push	r28
    4bb0:	df 93       	push	r29
    4bb2:	ef 93       	push	r30
    4bb4:	ff 93       	push	r31
    4bb6:	a0 91 b2 16 	lds	r26, 0x16B2	; 0x8016b2 <_ser_handle>
    4bba:	b0 91 b3 16 	lds	r27, 0x16B3	; 0x8016b3 <_ser_handle+0x1>
    4bbe:	10 97       	sbiw	r26, 0x00	; 0
    4bc0:	11 f1       	breq	.+68     	; 0x4c06 <__vector_25+0x7a>
    4bc2:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4bc6:	14 96       	adiw	r26, 0x04	; 4
    4bc8:	ed 91       	ld	r30, X+
    4bca:	fc 91       	ld	r31, X
    4bcc:	15 97       	sbiw	r26, 0x05	; 5
    4bce:	93 81       	ldd	r25, Z+3	; 0x03
    4bd0:	82 81       	ldd	r24, Z+2	; 0x02
    4bd2:	25 81       	ldd	r18, Z+5	; 0x05
    4bd4:	98 1b       	sub	r25, r24
    4bd6:	92 23       	and	r25, r18
    4bd8:	84 81       	ldd	r24, Z+4	; 0x04
    4bda:	98 17       	cp	r25, r24
    4bdc:	61 f0       	breq	.+24     	; 0x4bf6 <__vector_25+0x6a>
    4bde:	83 81       	ldd	r24, Z+3	; 0x03
    4be0:	26 95       	lsr	r18
    4be2:	28 23       	and	r18, r24
    4be4:	c0 81       	ld	r28, Z
    4be6:	d1 81       	ldd	r29, Z+1	; 0x01
    4be8:	c2 0f       	add	r28, r18
    4bea:	d1 1d       	adc	r29, r1
    4bec:	68 83       	st	Y, r22
    4bee:	8f 5f       	subi	r24, 0xFF	; 255
    4bf0:	95 81       	ldd	r25, Z+5	; 0x05
    4bf2:	89 23       	and	r24, r25
    4bf4:	83 83       	std	Z+3, r24	; 0x03
    4bf6:	16 96       	adiw	r26, 0x06	; 6
    4bf8:	ed 91       	ld	r30, X+
    4bfa:	fc 91       	ld	r31, X
    4bfc:	17 97       	sbiw	r26, 0x07	; 7
    4bfe:	30 97       	sbiw	r30, 0x00	; 0
    4c00:	11 f0       	breq	.+4      	; 0x4c06 <__vector_25+0x7a>
    4c02:	cd 01       	movw	r24, r26
    4c04:	19 95       	eicall
    4c06:	ff 91       	pop	r31
    4c08:	ef 91       	pop	r30
    4c0a:	df 91       	pop	r29
    4c0c:	cf 91       	pop	r28
    4c0e:	bf 91       	pop	r27
    4c10:	af 91       	pop	r26
    4c12:	9f 91       	pop	r25
    4c14:	8f 91       	pop	r24
    4c16:	7f 91       	pop	r23
    4c18:	6f 91       	pop	r22
    4c1a:	5f 91       	pop	r21
    4c1c:	4f 91       	pop	r20
    4c1e:	3f 91       	pop	r19
    4c20:	2f 91       	pop	r18
    4c22:	0f 90       	pop	r0
    4c24:	0b be       	out	0x3b, r0	; 59
    4c26:	0f 90       	pop	r0
    4c28:	0f be       	out	0x3f, r0	; 63
    4c2a:	0f 90       	pop	r0
    4c2c:	1f 90       	pop	r1
    4c2e:	18 95       	reti

00004c30 <__vector_26>:
    4c30:	1f 92       	push	r1
    4c32:	0f 92       	push	r0
    4c34:	0f b6       	in	r0, 0x3f	; 63
    4c36:	0f 92       	push	r0
    4c38:	11 24       	eor	r1, r1
    4c3a:	0b b6       	in	r0, 0x3b	; 59
    4c3c:	0f 92       	push	r0
    4c3e:	2f 93       	push	r18
    4c40:	8f 93       	push	r24
    4c42:	9f 93       	push	r25
    4c44:	af 93       	push	r26
    4c46:	bf 93       	push	r27
    4c48:	ef 93       	push	r30
    4c4a:	ff 93       	push	r31
    4c4c:	e0 91 b2 16 	lds	r30, 0x16B2	; 0x8016b2 <_ser_handle>
    4c50:	f0 91 b3 16 	lds	r31, 0x16B3	; 0x8016b3 <_ser_handle+0x1>
    4c54:	30 97       	sbiw	r30, 0x00	; 0
    4c56:	b9 f0       	breq	.+46     	; 0x4c86 <__vector_26+0x56>
    4c58:	02 80       	ldd	r0, Z+2	; 0x02
    4c5a:	f3 81       	ldd	r31, Z+3	; 0x03
    4c5c:	e0 2d       	mov	r30, r0
    4c5e:	93 81       	ldd	r25, Z+3	; 0x03
    4c60:	82 81       	ldd	r24, Z+2	; 0x02
    4c62:	98 17       	cp	r25, r24
    4c64:	b1 f0       	breq	.+44     	; 0x4c92 <__vector_26+0x62>
    4c66:	92 81       	ldd	r25, Z+2	; 0x02
    4c68:	85 81       	ldd	r24, Z+5	; 0x05
    4c6a:	28 2f       	mov	r18, r24
    4c6c:	26 95       	lsr	r18
    4c6e:	29 23       	and	r18, r25
    4c70:	a0 81       	ld	r26, Z
    4c72:	b1 81       	ldd	r27, Z+1	; 0x01
    4c74:	a2 0f       	add	r26, r18
    4c76:	b1 1d       	adc	r27, r1
    4c78:	2c 91       	ld	r18, X
    4c7a:	9f 5f       	subi	r25, 0xFF	; 255
    4c7c:	89 23       	and	r24, r25
    4c7e:	82 83       	std	Z+2, r24	; 0x02
    4c80:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4c84:	0b c0       	rjmp	.+22     	; 0x4c9c <__vector_26+0x6c>
    4c86:	e1 ec       	ldi	r30, 0xC1	; 193
    4c88:	f0 e0       	ldi	r31, 0x00	; 0
    4c8a:	80 81       	ld	r24, Z
    4c8c:	8f 7d       	andi	r24, 0xDF	; 223
    4c8e:	80 83       	st	Z, r24
    4c90:	05 c0       	rjmp	.+10     	; 0x4c9c <__vector_26+0x6c>
    4c92:	e1 ec       	ldi	r30, 0xC1	; 193
    4c94:	f0 e0       	ldi	r31, 0x00	; 0
    4c96:	80 81       	ld	r24, Z
    4c98:	8f 7d       	andi	r24, 0xDF	; 223
    4c9a:	80 83       	st	Z, r24
    4c9c:	ff 91       	pop	r31
    4c9e:	ef 91       	pop	r30
    4ca0:	bf 91       	pop	r27
    4ca2:	af 91       	pop	r26
    4ca4:	9f 91       	pop	r25
    4ca6:	8f 91       	pop	r24
    4ca8:	2f 91       	pop	r18
    4caa:	0f 90       	pop	r0
    4cac:	0b be       	out	0x3b, r0	; 59
    4cae:	0f 90       	pop	r0
    4cb0:	0f be       	out	0x3f, r0	; 63
    4cb2:	0f 90       	pop	r0
    4cb4:	1f 90       	pop	r1
    4cb6:	18 95       	reti

00004cb8 <__vector_36>:
    4cb8:	1f 92       	push	r1
    4cba:	0f 92       	push	r0
    4cbc:	0f b6       	in	r0, 0x3f	; 63
    4cbe:	0f 92       	push	r0
    4cc0:	11 24       	eor	r1, r1
    4cc2:	0b b6       	in	r0, 0x3b	; 59
    4cc4:	0f 92       	push	r0
    4cc6:	2f 93       	push	r18
    4cc8:	3f 93       	push	r19
    4cca:	4f 93       	push	r20
    4ccc:	5f 93       	push	r21
    4cce:	6f 93       	push	r22
    4cd0:	7f 93       	push	r23
    4cd2:	8f 93       	push	r24
    4cd4:	9f 93       	push	r25
    4cd6:	af 93       	push	r26
    4cd8:	bf 93       	push	r27
    4cda:	cf 93       	push	r28
    4cdc:	df 93       	push	r29
    4cde:	ef 93       	push	r30
    4ce0:	ff 93       	push	r31
    4ce2:	a0 91 b4 16 	lds	r26, 0x16B4	; 0x8016b4 <_ser_handle+0x2>
    4ce6:	b0 91 b5 16 	lds	r27, 0x16B5	; 0x8016b5 <_ser_handle+0x3>
    4cea:	10 97       	sbiw	r26, 0x00	; 0
    4cec:	11 f1       	breq	.+68     	; 0x4d32 <__vector_36+0x7a>
    4cee:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4cf2:	14 96       	adiw	r26, 0x04	; 4
    4cf4:	ed 91       	ld	r30, X+
    4cf6:	fc 91       	ld	r31, X
    4cf8:	15 97       	sbiw	r26, 0x05	; 5
    4cfa:	93 81       	ldd	r25, Z+3	; 0x03
    4cfc:	82 81       	ldd	r24, Z+2	; 0x02
    4cfe:	25 81       	ldd	r18, Z+5	; 0x05
    4d00:	98 1b       	sub	r25, r24
    4d02:	92 23       	and	r25, r18
    4d04:	84 81       	ldd	r24, Z+4	; 0x04
    4d06:	98 17       	cp	r25, r24
    4d08:	61 f0       	breq	.+24     	; 0x4d22 <__vector_36+0x6a>
    4d0a:	83 81       	ldd	r24, Z+3	; 0x03
    4d0c:	26 95       	lsr	r18
    4d0e:	28 23       	and	r18, r24
    4d10:	c0 81       	ld	r28, Z
    4d12:	d1 81       	ldd	r29, Z+1	; 0x01
    4d14:	c2 0f       	add	r28, r18
    4d16:	d1 1d       	adc	r29, r1
    4d18:	68 83       	st	Y, r22
    4d1a:	8f 5f       	subi	r24, 0xFF	; 255
    4d1c:	95 81       	ldd	r25, Z+5	; 0x05
    4d1e:	89 23       	and	r24, r25
    4d20:	83 83       	std	Z+3, r24	; 0x03
    4d22:	16 96       	adiw	r26, 0x06	; 6
    4d24:	ed 91       	ld	r30, X+
    4d26:	fc 91       	ld	r31, X
    4d28:	17 97       	sbiw	r26, 0x07	; 7
    4d2a:	30 97       	sbiw	r30, 0x00	; 0
    4d2c:	11 f0       	breq	.+4      	; 0x4d32 <__vector_36+0x7a>
    4d2e:	cd 01       	movw	r24, r26
    4d30:	19 95       	eicall
    4d32:	ff 91       	pop	r31
    4d34:	ef 91       	pop	r30
    4d36:	df 91       	pop	r29
    4d38:	cf 91       	pop	r28
    4d3a:	bf 91       	pop	r27
    4d3c:	af 91       	pop	r26
    4d3e:	9f 91       	pop	r25
    4d40:	8f 91       	pop	r24
    4d42:	7f 91       	pop	r23
    4d44:	6f 91       	pop	r22
    4d46:	5f 91       	pop	r21
    4d48:	4f 91       	pop	r20
    4d4a:	3f 91       	pop	r19
    4d4c:	2f 91       	pop	r18
    4d4e:	0f 90       	pop	r0
    4d50:	0b be       	out	0x3b, r0	; 59
    4d52:	0f 90       	pop	r0
    4d54:	0f be       	out	0x3f, r0	; 63
    4d56:	0f 90       	pop	r0
    4d58:	1f 90       	pop	r1
    4d5a:	18 95       	reti

00004d5c <__vector_37>:
    4d5c:	1f 92       	push	r1
    4d5e:	0f 92       	push	r0
    4d60:	0f b6       	in	r0, 0x3f	; 63
    4d62:	0f 92       	push	r0
    4d64:	11 24       	eor	r1, r1
    4d66:	0b b6       	in	r0, 0x3b	; 59
    4d68:	0f 92       	push	r0
    4d6a:	2f 93       	push	r18
    4d6c:	8f 93       	push	r24
    4d6e:	9f 93       	push	r25
    4d70:	af 93       	push	r26
    4d72:	bf 93       	push	r27
    4d74:	ef 93       	push	r30
    4d76:	ff 93       	push	r31
    4d78:	e0 91 b4 16 	lds	r30, 0x16B4	; 0x8016b4 <_ser_handle+0x2>
    4d7c:	f0 91 b5 16 	lds	r31, 0x16B5	; 0x8016b5 <_ser_handle+0x3>
    4d80:	30 97       	sbiw	r30, 0x00	; 0
    4d82:	b9 f0       	breq	.+46     	; 0x4db2 <__vector_37+0x56>
    4d84:	02 80       	ldd	r0, Z+2	; 0x02
    4d86:	f3 81       	ldd	r31, Z+3	; 0x03
    4d88:	e0 2d       	mov	r30, r0
    4d8a:	93 81       	ldd	r25, Z+3	; 0x03
    4d8c:	82 81       	ldd	r24, Z+2	; 0x02
    4d8e:	98 17       	cp	r25, r24
    4d90:	b1 f0       	breq	.+44     	; 0x4dbe <__vector_37+0x62>
    4d92:	92 81       	ldd	r25, Z+2	; 0x02
    4d94:	85 81       	ldd	r24, Z+5	; 0x05
    4d96:	28 2f       	mov	r18, r24
    4d98:	26 95       	lsr	r18
    4d9a:	29 23       	and	r18, r25
    4d9c:	a0 81       	ld	r26, Z
    4d9e:	b1 81       	ldd	r27, Z+1	; 0x01
    4da0:	a2 0f       	add	r26, r18
    4da2:	b1 1d       	adc	r27, r1
    4da4:	2c 91       	ld	r18, X
    4da6:	9f 5f       	subi	r25, 0xFF	; 255
    4da8:	89 23       	and	r24, r25
    4daa:	82 83       	std	Z+2, r24	; 0x02
    4dac:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4db0:	0b c0       	rjmp	.+22     	; 0x4dc8 <__vector_37+0x6c>
    4db2:	e9 ec       	ldi	r30, 0xC9	; 201
    4db4:	f0 e0       	ldi	r31, 0x00	; 0
    4db6:	80 81       	ld	r24, Z
    4db8:	8f 7d       	andi	r24, 0xDF	; 223
    4dba:	80 83       	st	Z, r24
    4dbc:	05 c0       	rjmp	.+10     	; 0x4dc8 <__vector_37+0x6c>
    4dbe:	e9 ec       	ldi	r30, 0xC9	; 201
    4dc0:	f0 e0       	ldi	r31, 0x00	; 0
    4dc2:	80 81       	ld	r24, Z
    4dc4:	8f 7d       	andi	r24, 0xDF	; 223
    4dc6:	80 83       	st	Z, r24
    4dc8:	ff 91       	pop	r31
    4dca:	ef 91       	pop	r30
    4dcc:	bf 91       	pop	r27
    4dce:	af 91       	pop	r26
    4dd0:	9f 91       	pop	r25
    4dd2:	8f 91       	pop	r24
    4dd4:	2f 91       	pop	r18
    4dd6:	0f 90       	pop	r0
    4dd8:	0b be       	out	0x3b, r0	; 59
    4dda:	0f 90       	pop	r0
    4ddc:	0f be       	out	0x3f, r0	; 63
    4dde:	0f 90       	pop	r0
    4de0:	1f 90       	pop	r1
    4de2:	18 95       	reti

00004de4 <__vector_51>:
    4de4:	1f 92       	push	r1
    4de6:	0f 92       	push	r0
    4de8:	0f b6       	in	r0, 0x3f	; 63
    4dea:	0f 92       	push	r0
    4dec:	11 24       	eor	r1, r1
    4dee:	0b b6       	in	r0, 0x3b	; 59
    4df0:	0f 92       	push	r0
    4df2:	2f 93       	push	r18
    4df4:	3f 93       	push	r19
    4df6:	4f 93       	push	r20
    4df8:	5f 93       	push	r21
    4dfa:	6f 93       	push	r22
    4dfc:	7f 93       	push	r23
    4dfe:	8f 93       	push	r24
    4e00:	9f 93       	push	r25
    4e02:	af 93       	push	r26
    4e04:	bf 93       	push	r27
    4e06:	cf 93       	push	r28
    4e08:	df 93       	push	r29
    4e0a:	ef 93       	push	r30
    4e0c:	ff 93       	push	r31
    4e0e:	a0 91 b6 16 	lds	r26, 0x16B6	; 0x8016b6 <_ser_handle+0x4>
    4e12:	b0 91 b7 16 	lds	r27, 0x16B7	; 0x8016b7 <_ser_handle+0x5>
    4e16:	10 97       	sbiw	r26, 0x00	; 0
    4e18:	11 f1       	breq	.+68     	; 0x4e5e <__vector_51+0x7a>
    4e1a:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4e1e:	14 96       	adiw	r26, 0x04	; 4
    4e20:	ed 91       	ld	r30, X+
    4e22:	fc 91       	ld	r31, X
    4e24:	15 97       	sbiw	r26, 0x05	; 5
    4e26:	93 81       	ldd	r25, Z+3	; 0x03
    4e28:	82 81       	ldd	r24, Z+2	; 0x02
    4e2a:	25 81       	ldd	r18, Z+5	; 0x05
    4e2c:	98 1b       	sub	r25, r24
    4e2e:	92 23       	and	r25, r18
    4e30:	84 81       	ldd	r24, Z+4	; 0x04
    4e32:	98 17       	cp	r25, r24
    4e34:	61 f0       	breq	.+24     	; 0x4e4e <__vector_51+0x6a>
    4e36:	83 81       	ldd	r24, Z+3	; 0x03
    4e38:	26 95       	lsr	r18
    4e3a:	28 23       	and	r18, r24
    4e3c:	c0 81       	ld	r28, Z
    4e3e:	d1 81       	ldd	r29, Z+1	; 0x01
    4e40:	c2 0f       	add	r28, r18
    4e42:	d1 1d       	adc	r29, r1
    4e44:	68 83       	st	Y, r22
    4e46:	8f 5f       	subi	r24, 0xFF	; 255
    4e48:	95 81       	ldd	r25, Z+5	; 0x05
    4e4a:	89 23       	and	r24, r25
    4e4c:	83 83       	std	Z+3, r24	; 0x03
    4e4e:	16 96       	adiw	r26, 0x06	; 6
    4e50:	ed 91       	ld	r30, X+
    4e52:	fc 91       	ld	r31, X
    4e54:	17 97       	sbiw	r26, 0x07	; 7
    4e56:	30 97       	sbiw	r30, 0x00	; 0
    4e58:	11 f0       	breq	.+4      	; 0x4e5e <__vector_51+0x7a>
    4e5a:	cd 01       	movw	r24, r26
    4e5c:	19 95       	eicall
    4e5e:	ff 91       	pop	r31
    4e60:	ef 91       	pop	r30
    4e62:	df 91       	pop	r29
    4e64:	cf 91       	pop	r28
    4e66:	bf 91       	pop	r27
    4e68:	af 91       	pop	r26
    4e6a:	9f 91       	pop	r25
    4e6c:	8f 91       	pop	r24
    4e6e:	7f 91       	pop	r23
    4e70:	6f 91       	pop	r22
    4e72:	5f 91       	pop	r21
    4e74:	4f 91       	pop	r20
    4e76:	3f 91       	pop	r19
    4e78:	2f 91       	pop	r18
    4e7a:	0f 90       	pop	r0
    4e7c:	0b be       	out	0x3b, r0	; 59
    4e7e:	0f 90       	pop	r0
    4e80:	0f be       	out	0x3f, r0	; 63
    4e82:	0f 90       	pop	r0
    4e84:	1f 90       	pop	r1
    4e86:	18 95       	reti

00004e88 <__vector_52>:
    4e88:	1f 92       	push	r1
    4e8a:	0f 92       	push	r0
    4e8c:	0f b6       	in	r0, 0x3f	; 63
    4e8e:	0f 92       	push	r0
    4e90:	11 24       	eor	r1, r1
    4e92:	0b b6       	in	r0, 0x3b	; 59
    4e94:	0f 92       	push	r0
    4e96:	2f 93       	push	r18
    4e98:	8f 93       	push	r24
    4e9a:	9f 93       	push	r25
    4e9c:	af 93       	push	r26
    4e9e:	bf 93       	push	r27
    4ea0:	ef 93       	push	r30
    4ea2:	ff 93       	push	r31
    4ea4:	e0 91 b6 16 	lds	r30, 0x16B6	; 0x8016b6 <_ser_handle+0x4>
    4ea8:	f0 91 b7 16 	lds	r31, 0x16B7	; 0x8016b7 <_ser_handle+0x5>
    4eac:	30 97       	sbiw	r30, 0x00	; 0
    4eae:	b9 f0       	breq	.+46     	; 0x4ede <__vector_52+0x56>
    4eb0:	02 80       	ldd	r0, Z+2	; 0x02
    4eb2:	f3 81       	ldd	r31, Z+3	; 0x03
    4eb4:	e0 2d       	mov	r30, r0
    4eb6:	93 81       	ldd	r25, Z+3	; 0x03
    4eb8:	82 81       	ldd	r24, Z+2	; 0x02
    4eba:	98 17       	cp	r25, r24
    4ebc:	b1 f0       	breq	.+44     	; 0x4eea <__vector_52+0x62>
    4ebe:	92 81       	ldd	r25, Z+2	; 0x02
    4ec0:	85 81       	ldd	r24, Z+5	; 0x05
    4ec2:	28 2f       	mov	r18, r24
    4ec4:	26 95       	lsr	r18
    4ec6:	29 23       	and	r18, r25
    4ec8:	a0 81       	ld	r26, Z
    4eca:	b1 81       	ldd	r27, Z+1	; 0x01
    4ecc:	a2 0f       	add	r26, r18
    4ece:	b1 1d       	adc	r27, r1
    4ed0:	2c 91       	ld	r18, X
    4ed2:	9f 5f       	subi	r25, 0xFF	; 255
    4ed4:	89 23       	and	r24, r25
    4ed6:	82 83       	std	Z+2, r24	; 0x02
    4ed8:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4edc:	0b c0       	rjmp	.+22     	; 0x4ef4 <__vector_52+0x6c>
    4ede:	e1 ed       	ldi	r30, 0xD1	; 209
    4ee0:	f0 e0       	ldi	r31, 0x00	; 0
    4ee2:	80 81       	ld	r24, Z
    4ee4:	8f 7d       	andi	r24, 0xDF	; 223
    4ee6:	80 83       	st	Z, r24
    4ee8:	05 c0       	rjmp	.+10     	; 0x4ef4 <__vector_52+0x6c>
    4eea:	e1 ed       	ldi	r30, 0xD1	; 209
    4eec:	f0 e0       	ldi	r31, 0x00	; 0
    4eee:	80 81       	ld	r24, Z
    4ef0:	8f 7d       	andi	r24, 0xDF	; 223
    4ef2:	80 83       	st	Z, r24
    4ef4:	ff 91       	pop	r31
    4ef6:	ef 91       	pop	r30
    4ef8:	bf 91       	pop	r27
    4efa:	af 91       	pop	r26
    4efc:	9f 91       	pop	r25
    4efe:	8f 91       	pop	r24
    4f00:	2f 91       	pop	r18
    4f02:	0f 90       	pop	r0
    4f04:	0b be       	out	0x3b, r0	; 59
    4f06:	0f 90       	pop	r0
    4f08:	0f be       	out	0x3f, r0	; 63
    4f0a:	0f 90       	pop	r0
    4f0c:	1f 90       	pop	r1
    4f0e:	18 95       	reti

00004f10 <__vector_54>:
    4f10:	1f 92       	push	r1
    4f12:	0f 92       	push	r0
    4f14:	0f b6       	in	r0, 0x3f	; 63
    4f16:	0f 92       	push	r0
    4f18:	11 24       	eor	r1, r1
    4f1a:	0b b6       	in	r0, 0x3b	; 59
    4f1c:	0f 92       	push	r0
    4f1e:	2f 93       	push	r18
    4f20:	3f 93       	push	r19
    4f22:	4f 93       	push	r20
    4f24:	5f 93       	push	r21
    4f26:	6f 93       	push	r22
    4f28:	7f 93       	push	r23
    4f2a:	8f 93       	push	r24
    4f2c:	9f 93       	push	r25
    4f2e:	af 93       	push	r26
    4f30:	bf 93       	push	r27
    4f32:	cf 93       	push	r28
    4f34:	df 93       	push	r29
    4f36:	ef 93       	push	r30
    4f38:	ff 93       	push	r31
    4f3a:	a0 91 b8 16 	lds	r26, 0x16B8	; 0x8016b8 <_ser_handle+0x6>
    4f3e:	b0 91 b9 16 	lds	r27, 0x16B9	; 0x8016b9 <_ser_handle+0x7>
    4f42:	10 97       	sbiw	r26, 0x00	; 0
    4f44:	11 f1       	breq	.+68     	; 0x4f8a <__vector_54+0x7a>
    4f46:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4f4a:	14 96       	adiw	r26, 0x04	; 4
    4f4c:	ed 91       	ld	r30, X+
    4f4e:	fc 91       	ld	r31, X
    4f50:	15 97       	sbiw	r26, 0x05	; 5
    4f52:	93 81       	ldd	r25, Z+3	; 0x03
    4f54:	82 81       	ldd	r24, Z+2	; 0x02
    4f56:	25 81       	ldd	r18, Z+5	; 0x05
    4f58:	98 1b       	sub	r25, r24
    4f5a:	92 23       	and	r25, r18
    4f5c:	84 81       	ldd	r24, Z+4	; 0x04
    4f5e:	98 17       	cp	r25, r24
    4f60:	61 f0       	breq	.+24     	; 0x4f7a <__vector_54+0x6a>
    4f62:	83 81       	ldd	r24, Z+3	; 0x03
    4f64:	26 95       	lsr	r18
    4f66:	28 23       	and	r18, r24
    4f68:	c0 81       	ld	r28, Z
    4f6a:	d1 81       	ldd	r29, Z+1	; 0x01
    4f6c:	c2 0f       	add	r28, r18
    4f6e:	d1 1d       	adc	r29, r1
    4f70:	68 83       	st	Y, r22
    4f72:	8f 5f       	subi	r24, 0xFF	; 255
    4f74:	95 81       	ldd	r25, Z+5	; 0x05
    4f76:	89 23       	and	r24, r25
    4f78:	83 83       	std	Z+3, r24	; 0x03
    4f7a:	16 96       	adiw	r26, 0x06	; 6
    4f7c:	ed 91       	ld	r30, X+
    4f7e:	fc 91       	ld	r31, X
    4f80:	17 97       	sbiw	r26, 0x07	; 7
    4f82:	30 97       	sbiw	r30, 0x00	; 0
    4f84:	11 f0       	breq	.+4      	; 0x4f8a <__vector_54+0x7a>
    4f86:	cd 01       	movw	r24, r26
    4f88:	19 95       	eicall
    4f8a:	ff 91       	pop	r31
    4f8c:	ef 91       	pop	r30
    4f8e:	df 91       	pop	r29
    4f90:	cf 91       	pop	r28
    4f92:	bf 91       	pop	r27
    4f94:	af 91       	pop	r26
    4f96:	9f 91       	pop	r25
    4f98:	8f 91       	pop	r24
    4f9a:	7f 91       	pop	r23
    4f9c:	6f 91       	pop	r22
    4f9e:	5f 91       	pop	r21
    4fa0:	4f 91       	pop	r20
    4fa2:	3f 91       	pop	r19
    4fa4:	2f 91       	pop	r18
    4fa6:	0f 90       	pop	r0
    4fa8:	0b be       	out	0x3b, r0	; 59
    4faa:	0f 90       	pop	r0
    4fac:	0f be       	out	0x3f, r0	; 63
    4fae:	0f 90       	pop	r0
    4fb0:	1f 90       	pop	r1
    4fb2:	18 95       	reti

00004fb4 <__vector_55>:
    4fb4:	1f 92       	push	r1
    4fb6:	0f 92       	push	r0
    4fb8:	0f b6       	in	r0, 0x3f	; 63
    4fba:	0f 92       	push	r0
    4fbc:	11 24       	eor	r1, r1
    4fbe:	0b b6       	in	r0, 0x3b	; 59
    4fc0:	0f 92       	push	r0
    4fc2:	2f 93       	push	r18
    4fc4:	8f 93       	push	r24
    4fc6:	9f 93       	push	r25
    4fc8:	af 93       	push	r26
    4fca:	bf 93       	push	r27
    4fcc:	ef 93       	push	r30
    4fce:	ff 93       	push	r31
    4fd0:	e0 91 b8 16 	lds	r30, 0x16B8	; 0x8016b8 <_ser_handle+0x6>
    4fd4:	f0 91 b9 16 	lds	r31, 0x16B9	; 0x8016b9 <_ser_handle+0x7>
    4fd8:	30 97       	sbiw	r30, 0x00	; 0
    4fda:	b9 f0       	breq	.+46     	; 0x500a <__vector_55+0x56>
    4fdc:	02 80       	ldd	r0, Z+2	; 0x02
    4fde:	f3 81       	ldd	r31, Z+3	; 0x03
    4fe0:	e0 2d       	mov	r30, r0
    4fe2:	93 81       	ldd	r25, Z+3	; 0x03
    4fe4:	82 81       	ldd	r24, Z+2	; 0x02
    4fe6:	98 17       	cp	r25, r24
    4fe8:	b1 f0       	breq	.+44     	; 0x5016 <__vector_55+0x62>
    4fea:	92 81       	ldd	r25, Z+2	; 0x02
    4fec:	85 81       	ldd	r24, Z+5	; 0x05
    4fee:	28 2f       	mov	r18, r24
    4ff0:	26 95       	lsr	r18
    4ff2:	29 23       	and	r18, r25
    4ff4:	a0 81       	ld	r26, Z
    4ff6:	b1 81       	ldd	r27, Z+1	; 0x01
    4ff8:	a2 0f       	add	r26, r18
    4ffa:	b1 1d       	adc	r27, r1
    4ffc:	2c 91       	ld	r18, X
    4ffe:	9f 5f       	subi	r25, 0xFF	; 255
    5000:	89 23       	and	r24, r25
    5002:	82 83       	std	Z+2, r24	; 0x02
    5004:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5008:	0b c0       	rjmp	.+22     	; 0x5020 <__vector_55+0x6c>
    500a:	e1 e3       	ldi	r30, 0x31	; 49
    500c:	f1 e0       	ldi	r31, 0x01	; 1
    500e:	80 81       	ld	r24, Z
    5010:	8f 7d       	andi	r24, 0xDF	; 223
    5012:	80 83       	st	Z, r24
    5014:	05 c0       	rjmp	.+10     	; 0x5020 <__vector_55+0x6c>
    5016:	e1 e3       	ldi	r30, 0x31	; 49
    5018:	f1 e0       	ldi	r31, 0x01	; 1
    501a:	80 81       	ld	r24, Z
    501c:	8f 7d       	andi	r24, 0xDF	; 223
    501e:	80 83       	st	Z, r24
    5020:	ff 91       	pop	r31
    5022:	ef 91       	pop	r30
    5024:	bf 91       	pop	r27
    5026:	af 91       	pop	r26
    5028:	9f 91       	pop	r25
    502a:	8f 91       	pop	r24
    502c:	2f 91       	pop	r18
    502e:	0f 90       	pop	r0
    5030:	0b be       	out	0x3b, r0	; 59
    5032:	0f 90       	pop	r0
    5034:	0f be       	out	0x3f, r0	; 63
    5036:	0f 90       	pop	r0
    5038:	1f 90       	pop	r1
    503a:	18 95       	reti

0000503c <usart_getchar>:
    503c:	cf 93       	push	r28
    503e:	df 93       	push	r29
    5040:	1f 92       	push	r1
    5042:	cd b7       	in	r28, 0x3d	; 61
    5044:	de b7       	in	r29, 0x3e	; 62
    5046:	be 01       	movw	r22, r28
    5048:	6f 5f       	subi	r22, 0xFF	; 255
    504a:	7f 4f       	sbci	r23, 0xFF	; 255
    504c:	80 91 ba 16 	lds	r24, 0x16BA	; 0x8016ba <_com_serial_instance>
    5050:	90 91 bb 16 	lds	r25, 0x16BB	; 0x8016bb <_com_serial_instance+0x1>
    5054:	7b dd       	rcall	.-1290   	; 0x4b4c <serial_getByte>
    5056:	81 11       	cpse	r24, r1
    5058:	f6 cf       	rjmp	.-20     	; 0x5046 <usart_getchar+0xa>
    505a:	89 81       	ldd	r24, Y+1	; 0x01
    505c:	90 e0       	ldi	r25, 0x00	; 0
    505e:	0f 90       	pop	r0
    5060:	df 91       	pop	r29
    5062:	cf 91       	pop	r28
    5064:	08 95       	ret

00005066 <usart_putchar>:
    5066:	68 2f       	mov	r22, r24
    5068:	80 91 ba 16 	lds	r24, 0x16BA	; 0x8016ba <_com_serial_instance>
    506c:	90 91 bb 16 	lds	r25, 0x16BB	; 0x8016bb <_com_serial_instance+0x1>
    5070:	ed dc       	rcall	.-1574   	; 0x4a4c <serial_sendByte>
    5072:	80 e0       	ldi	r24, 0x00	; 0
    5074:	90 e0       	ldi	r25, 0x00	; 0
    5076:	08 95       	ret

00005078 <stdio_initialise>:
    5078:	8f 92       	push	r8
    507a:	9f 92       	push	r9
    507c:	af 92       	push	r10
    507e:	cf 92       	push	r12
    5080:	ef 92       	push	r14
    5082:	0f 93       	push	r16
    5084:	81 2c       	mov	r8, r1
    5086:	91 2c       	mov	r9, r1
    5088:	68 94       	set
    508a:	aa 24       	eor	r10, r10
    508c:	a7 f8       	bld	r10, 7
    508e:	68 94       	set
    5090:	cc 24       	eor	r12, r12
    5092:	c7 f8       	bld	r12, 7
    5094:	e1 2c       	mov	r14, r1
    5096:	00 e0       	ldi	r16, 0x00	; 0
    5098:	23 e0       	ldi	r18, 0x03	; 3
    509a:	40 e0       	ldi	r20, 0x00	; 0
    509c:	51 ee       	ldi	r21, 0xE1	; 225
    509e:	60 e0       	ldi	r22, 0x00	; 0
    50a0:	70 e0       	ldi	r23, 0x00	; 0
    50a2:	32 dc       	rcall	.-1948   	; 0x4908 <serial_create>
    50a4:	90 93 bb 16 	sts	0x16BB, r25	; 0x8016bb <_com_serial_instance+0x1>
    50a8:	80 93 ba 16 	sts	0x16BA, r24	; 0x8016ba <_com_serial_instance>
    50ac:	e7 ef       	ldi	r30, 0xF7	; 247
    50ae:	f6 e1       	ldi	r31, 0x16	; 22
    50b0:	83 e1       	ldi	r24, 0x13	; 19
    50b2:	92 e0       	ldi	r25, 0x02	; 2
    50b4:	91 83       	std	Z+1, r25	; 0x01
    50b6:	80 83       	st	Z, r24
    50b8:	93 83       	std	Z+3, r25	; 0x03
    50ba:	82 83       	std	Z+2, r24	; 0x02
    50bc:	0f 91       	pop	r16
    50be:	ef 90       	pop	r14
    50c0:	cf 90       	pop	r12
    50c2:	af 90       	pop	r10
    50c4:	9f 90       	pop	r9
    50c6:	8f 90       	pop	r8
    50c8:	08 95       	ret

000050ca <_turn_off>:
    50ca:	90 e0       	ldi	r25, 0x00	; 0
    50cc:	fc 01       	movw	r30, r24
    50ce:	ee 0f       	add	r30, r30
    50d0:	ff 1f       	adc	r31, r31
    50d2:	e8 0f       	add	r30, r24
    50d4:	f9 1f       	adc	r31, r25
    50d6:	ee 0f       	add	r30, r30
    50d8:	ff 1f       	adc	r31, r31
    50da:	e4 54       	subi	r30, 0x44	; 68
    50dc:	f9 4e       	sbci	r31, 0xE9	; 233
    50de:	23 81       	ldd	r18, Z+3	; 0x03
    50e0:	21 11       	cpse	r18, r1
    50e2:	1f c0       	rjmp	.+62     	; 0x5122 <_turn_off+0x58>
    50e4:	9c 01       	movw	r18, r24
    50e6:	22 0f       	add	r18, r18
    50e8:	33 1f       	adc	r19, r19
    50ea:	f9 01       	movw	r30, r18
    50ec:	e8 0f       	add	r30, r24
    50ee:	f9 1f       	adc	r31, r25
    50f0:	ee 0f       	add	r30, r30
    50f2:	ff 1f       	adc	r31, r31
    50f4:	e4 54       	subi	r30, 0x44	; 68
    50f6:	f9 4e       	sbci	r31, 0xE9	; 233
    50f8:	a0 81       	ld	r26, Z
    50fa:	b1 81       	ldd	r27, Z+1	; 0x01
    50fc:	4c 91       	ld	r20, X
    50fe:	f9 01       	movw	r30, r18
    5100:	e8 0f       	add	r30, r24
    5102:	f9 1f       	adc	r31, r25
    5104:	ee 0f       	add	r30, r30
    5106:	ff 1f       	adc	r31, r31
    5108:	e4 54       	subi	r30, 0x44	; 68
    510a:	f9 4e       	sbci	r31, 0xE9	; 233
    510c:	81 e0       	ldi	r24, 0x01	; 1
    510e:	90 e0       	ldi	r25, 0x00	; 0
    5110:	02 80       	ldd	r0, Z+2	; 0x02
    5112:	02 c0       	rjmp	.+4      	; 0x5118 <_turn_off+0x4e>
    5114:	88 0f       	add	r24, r24
    5116:	99 1f       	adc	r25, r25
    5118:	0a 94       	dec	r0
    511a:	e2 f7       	brpl	.-8      	; 0x5114 <_turn_off+0x4a>
    511c:	84 2b       	or	r24, r20
    511e:	8c 93       	st	X, r24
    5120:	08 95       	ret
    5122:	fc 01       	movw	r30, r24
    5124:	ee 0f       	add	r30, r30
    5126:	ff 1f       	adc	r31, r31
    5128:	df 01       	movw	r26, r30
    512a:	a8 0f       	add	r26, r24
    512c:	b9 1f       	adc	r27, r25
    512e:	aa 0f       	add	r26, r26
    5130:	bb 1f       	adc	r27, r27
    5132:	a4 54       	subi	r26, 0x44	; 68
    5134:	b9 4e       	sbci	r27, 0xE9	; 233
    5136:	0d 90       	ld	r0, X+
    5138:	bc 91       	ld	r27, X
    513a:	a0 2d       	mov	r26, r0
    513c:	2c 91       	ld	r18, X
    513e:	e8 0f       	add	r30, r24
    5140:	f9 1f       	adc	r31, r25
    5142:	ee 0f       	add	r30, r30
    5144:	ff 1f       	adc	r31, r31
    5146:	e4 54       	subi	r30, 0x44	; 68
    5148:	f9 4e       	sbci	r31, 0xE9	; 233
    514a:	81 e0       	ldi	r24, 0x01	; 1
    514c:	90 e0       	ldi	r25, 0x00	; 0
    514e:	02 80       	ldd	r0, Z+2	; 0x02
    5150:	02 c0       	rjmp	.+4      	; 0x5156 <_turn_off+0x8c>
    5152:	88 0f       	add	r24, r24
    5154:	99 1f       	adc	r25, r25
    5156:	0a 94       	dec	r0
    5158:	e2 f7       	brpl	.-8      	; 0x5152 <_turn_off+0x88>
    515a:	80 95       	com	r24
    515c:	82 23       	and	r24, r18
    515e:	8c 93       	st	X, r24
    5160:	08 95       	ret

00005162 <_turn_on>:
    5162:	90 e0       	ldi	r25, 0x00	; 0
    5164:	fc 01       	movw	r30, r24
    5166:	ee 0f       	add	r30, r30
    5168:	ff 1f       	adc	r31, r31
    516a:	e8 0f       	add	r30, r24
    516c:	f9 1f       	adc	r31, r25
    516e:	ee 0f       	add	r30, r30
    5170:	ff 1f       	adc	r31, r31
    5172:	e4 54       	subi	r30, 0x44	; 68
    5174:	f9 4e       	sbci	r31, 0xE9	; 233
    5176:	23 81       	ldd	r18, Z+3	; 0x03
    5178:	21 11       	cpse	r18, r1
    517a:	20 c0       	rjmp	.+64     	; 0x51bc <_turn_on+0x5a>
    517c:	9c 01       	movw	r18, r24
    517e:	22 0f       	add	r18, r18
    5180:	33 1f       	adc	r19, r19
    5182:	f9 01       	movw	r30, r18
    5184:	e8 0f       	add	r30, r24
    5186:	f9 1f       	adc	r31, r25
    5188:	ee 0f       	add	r30, r30
    518a:	ff 1f       	adc	r31, r31
    518c:	e4 54       	subi	r30, 0x44	; 68
    518e:	f9 4e       	sbci	r31, 0xE9	; 233
    5190:	a0 81       	ld	r26, Z
    5192:	b1 81       	ldd	r27, Z+1	; 0x01
    5194:	4c 91       	ld	r20, X
    5196:	f9 01       	movw	r30, r18
    5198:	e8 0f       	add	r30, r24
    519a:	f9 1f       	adc	r31, r25
    519c:	ee 0f       	add	r30, r30
    519e:	ff 1f       	adc	r31, r31
    51a0:	e4 54       	subi	r30, 0x44	; 68
    51a2:	f9 4e       	sbci	r31, 0xE9	; 233
    51a4:	81 e0       	ldi	r24, 0x01	; 1
    51a6:	90 e0       	ldi	r25, 0x00	; 0
    51a8:	02 80       	ldd	r0, Z+2	; 0x02
    51aa:	02 c0       	rjmp	.+4      	; 0x51b0 <_turn_on+0x4e>
    51ac:	88 0f       	add	r24, r24
    51ae:	99 1f       	adc	r25, r25
    51b0:	0a 94       	dec	r0
    51b2:	e2 f7       	brpl	.-8      	; 0x51ac <_turn_on+0x4a>
    51b4:	80 95       	com	r24
    51b6:	84 23       	and	r24, r20
    51b8:	8c 93       	st	X, r24
    51ba:	08 95       	ret
    51bc:	fc 01       	movw	r30, r24
    51be:	ee 0f       	add	r30, r30
    51c0:	ff 1f       	adc	r31, r31
    51c2:	df 01       	movw	r26, r30
    51c4:	a8 0f       	add	r26, r24
    51c6:	b9 1f       	adc	r27, r25
    51c8:	aa 0f       	add	r26, r26
    51ca:	bb 1f       	adc	r27, r27
    51cc:	a4 54       	subi	r26, 0x44	; 68
    51ce:	b9 4e       	sbci	r27, 0xE9	; 233
    51d0:	0d 90       	ld	r0, X+
    51d2:	bc 91       	ld	r27, X
    51d4:	a0 2d       	mov	r26, r0
    51d6:	2c 91       	ld	r18, X
    51d8:	e8 0f       	add	r30, r24
    51da:	f9 1f       	adc	r31, r25
    51dc:	ee 0f       	add	r30, r30
    51de:	ff 1f       	adc	r31, r31
    51e0:	e4 54       	subi	r30, 0x44	; 68
    51e2:	f9 4e       	sbci	r31, 0xE9	; 233
    51e4:	81 e0       	ldi	r24, 0x01	; 1
    51e6:	90 e0       	ldi	r25, 0x00	; 0
    51e8:	02 80       	ldd	r0, Z+2	; 0x02
    51ea:	02 c0       	rjmp	.+4      	; 0x51f0 <_turn_on+0x8e>
    51ec:	88 0f       	add	r24, r24
    51ee:	99 1f       	adc	r25, r25
    51f0:	0a 94       	dec	r0
    51f2:	e2 f7       	brpl	.-8      	; 0x51ec <_turn_on+0x8a>
    51f4:	82 2b       	or	r24, r18
    51f6:	8c 93       	st	X, r24
    51f8:	08 95       	ret

000051fa <_hal_led_task>:
    51fa:	cc 24       	eor	r12, r12
    51fc:	c3 94       	inc	r12
    51fe:	d1 2c       	mov	r13, r1
    5200:	68 94       	set
    5202:	bb 24       	eor	r11, r11
    5204:	b2 f8       	bld	r11, 2
    5206:	cc eb       	ldi	r28, 0xBC	; 188
    5208:	d6 e1       	ldi	r29, 0x16	; 22
    520a:	10 e0       	ldi	r17, 0x00	; 0
    520c:	8c 81       	ldd	r24, Y+4	; 0x04
    520e:	81 30       	cpi	r24, 0x01	; 1
    5210:	81 f0       	breq	.+32     	; 0x5232 <_hal_led_task+0x38>
    5212:	18 f1       	brcs	.+70     	; 0x525a <_hal_led_task+0x60>
    5214:	82 30       	cpi	r24, 0x02	; 2
    5216:	61 f5       	brne	.+88     	; 0x5270 <_hal_led_task+0x76>
    5218:	e8 81       	ld	r30, Y
    521a:	f9 81       	ldd	r31, Y+1	; 0x01
    521c:	20 81       	ld	r18, Z
    521e:	c6 01       	movw	r24, r12
    5220:	0a 80       	ldd	r0, Y+2	; 0x02
    5222:	02 c0       	rjmp	.+4      	; 0x5228 <_hal_led_task+0x2e>
    5224:	88 0f       	add	r24, r24
    5226:	99 1f       	adc	r25, r25
    5228:	0a 94       	dec	r0
    522a:	e2 f7       	brpl	.-8      	; 0x5224 <_hal_led_task+0x2a>
    522c:	82 27       	eor	r24, r18
    522e:	80 83       	st	Z, r24
    5230:	1f c0       	rjmp	.+62     	; 0x5270 <_hal_led_task+0x76>
    5232:	8d 81       	ldd	r24, Y+5	; 0x05
    5234:	8f 5f       	subi	r24, 0xFF	; 255
    5236:	8a 30       	cpi	r24, 0x0A	; 10
    5238:	10 f4       	brcc	.+4      	; 0x523e <_hal_led_task+0x44>
    523a:	8d 83       	std	Y+5, r24	; 0x05
    523c:	19 c0       	rjmp	.+50     	; 0x5270 <_hal_led_task+0x76>
    523e:	1d 82       	std	Y+5, r1	; 0x05
    5240:	e8 81       	ld	r30, Y
    5242:	f9 81       	ldd	r31, Y+1	; 0x01
    5244:	20 81       	ld	r18, Z
    5246:	c6 01       	movw	r24, r12
    5248:	0a 80       	ldd	r0, Y+2	; 0x02
    524a:	02 c0       	rjmp	.+4      	; 0x5250 <_hal_led_task+0x56>
    524c:	88 0f       	add	r24, r24
    524e:	99 1f       	adc	r25, r25
    5250:	0a 94       	dec	r0
    5252:	e2 f7       	brpl	.-8      	; 0x524c <_hal_led_task+0x52>
    5254:	82 27       	eor	r24, r18
    5256:	80 83       	st	Z, r24
    5258:	0b c0       	rjmp	.+22     	; 0x5270 <_hal_led_task+0x76>
    525a:	0d 81       	ldd	r16, Y+5	; 0x05
    525c:	00 23       	and	r16, r16
    525e:	29 f0       	breq	.+10     	; 0x526a <_hal_led_task+0x70>
    5260:	81 2f       	mov	r24, r17
    5262:	7f df       	rcall	.-258    	; 0x5162 <_turn_on>
    5264:	01 50       	subi	r16, 0x01	; 1
    5266:	0d 83       	std	Y+5, r16	; 0x05
    5268:	03 c0       	rjmp	.+6      	; 0x5270 <_hal_led_task+0x76>
    526a:	bc 82       	std	Y+4, r11	; 0x04
    526c:	81 2f       	mov	r24, r17
    526e:	2d df       	rcall	.-422    	; 0x50ca <_turn_off>
    5270:	1f 5f       	subi	r17, 0xFF	; 255
    5272:	26 96       	adiw	r28, 0x06	; 6
    5274:	14 30       	cpi	r17, 0x04	; 4
    5276:	51 f6       	brne	.-108    	; 0x520c <_hal_led_task+0x12>
    5278:	65 e0       	ldi	r22, 0x05	; 5
    527a:	70 e0       	ldi	r23, 0x00	; 0
    527c:	80 e0       	ldi	r24, 0x00	; 0
    527e:	90 e0       	ldi	r25, 0x00	; 0
    5280:	0e 94 72 12 	call	0x24e4	; 0x24e4 <vTaskDelay>
    5284:	c0 cf       	rjmp	.-128    	; 0x5206 <_hal_led_task+0xc>

00005286 <status_leds_initialise>:
    5286:	ef 92       	push	r14
    5288:	ff 92       	push	r15
    528a:	0f 93       	push	r16
    528c:	1f 93       	push	r17
    528e:	cf 93       	push	r28
    5290:	df 93       	push	r29
    5292:	08 2f       	mov	r16, r24
    5294:	80 e4       	ldi	r24, 0x40	; 64
    5296:	87 b9       	out	0x07, r24	; 7
    5298:	cc eb       	ldi	r28, 0xBC	; 188
    529a:	d6 e1       	ldi	r29, 0x16	; 22
    529c:	0f 2e       	mov	r0, r31
    529e:	f8 e2       	ldi	r31, 0x28	; 40
    52a0:	ef 2e       	mov	r14, r31
    52a2:	f1 2c       	mov	r15, r1
    52a4:	f0 2d       	mov	r31, r0
    52a6:	f9 82       	std	Y+1, r15	; 0x01
    52a8:	e8 82       	st	Y, r14
    52aa:	86 e0       	ldi	r24, 0x06	; 6
    52ac:	8a 83       	std	Y+2, r24	; 0x02
    52ae:	1b 82       	std	Y+3, r1	; 0x03
    52b0:	14 e0       	ldi	r17, 0x04	; 4
    52b2:	1c 83       	std	Y+4, r17	; 0x04
    52b4:	80 e0       	ldi	r24, 0x00	; 0
    52b6:	09 df       	rcall	.-494    	; 0x50ca <_turn_off>
    52b8:	80 e8       	ldi	r24, 0x80	; 128
    52ba:	87 b9       	out	0x07, r24	; 7
    52bc:	ff 82       	std	Y+7, r15	; 0x07
    52be:	ee 82       	std	Y+6, r14	; 0x06
    52c0:	87 e0       	ldi	r24, 0x07	; 7
    52c2:	88 87       	std	Y+8, r24	; 0x08
    52c4:	19 86       	std	Y+9, r1	; 0x09
    52c6:	1a 87       	std	Y+10, r17	; 0x0a
    52c8:	81 e0       	ldi	r24, 0x01	; 1
    52ca:	ff de       	rcall	.-514    	; 0x50ca <_turn_off>
    52cc:	80 e2       	ldi	r24, 0x20	; 32
    52ce:	83 bb       	out	0x13, r24	; 19
    52d0:	84 e3       	ldi	r24, 0x34	; 52
    52d2:	90 e0       	ldi	r25, 0x00	; 0
    52d4:	9d 87       	std	Y+13, r25	; 0x0d
    52d6:	8c 87       	std	Y+12, r24	; 0x0c
    52d8:	85 e0       	ldi	r24, 0x05	; 5
    52da:	8e 87       	std	Y+14, r24	; 0x0e
    52dc:	1f 86       	std	Y+15, r1	; 0x0f
    52de:	18 8b       	std	Y+16, r17	; 0x10
    52e0:	82 e0       	ldi	r24, 0x02	; 2
    52e2:	f3 de       	rcall	.-538    	; 0x50ca <_turn_off>
    52e4:	80 e1       	ldi	r24, 0x10	; 16
    52e6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    52ea:	82 e0       	ldi	r24, 0x02	; 2
    52ec:	91 e0       	ldi	r25, 0x01	; 1
    52ee:	9b 8b       	std	Y+19, r25	; 0x13
    52f0:	8a 8b       	std	Y+18, r24	; 0x12
    52f2:	1c 8b       	std	Y+20, r17	; 0x14
    52f4:	1d 8a       	std	Y+21, r1	; 0x15
    52f6:	1e 8b       	std	Y+22, r17	; 0x16
    52f8:	83 e0       	ldi	r24, 0x03	; 3
    52fa:	e7 de       	rcall	.-562    	; 0x50ca <_turn_off>
    52fc:	e1 2c       	mov	r14, r1
    52fe:	f1 2c       	mov	r15, r1
    5300:	20 e0       	ldi	r18, 0x00	; 0
    5302:	30 e0       	ldi	r19, 0x00	; 0
    5304:	40 ec       	ldi	r20, 0xC0	; 192
    5306:	50 e0       	ldi	r21, 0x00	; 0
    5308:	64 e2       	ldi	r22, 0x24	; 36
    530a:	78 e0       	ldi	r23, 0x08	; 8
    530c:	8d ef       	ldi	r24, 0xFD	; 253
    530e:	98 e2       	ldi	r25, 0x28	; 40
    5310:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <xTaskCreate>
    5314:	df 91       	pop	r29
    5316:	cf 91       	pop	r28
    5318:	1f 91       	pop	r17
    531a:	0f 91       	pop	r16
    531c:	ff 90       	pop	r15
    531e:	ef 90       	pop	r14
    5320:	08 95       	ret

00005322 <status_leds_slowBlink>:
    5322:	cf 93       	push	r28
    5324:	df 93       	push	r29
    5326:	90 e0       	ldi	r25, 0x00	; 0
    5328:	fc 01       	movw	r30, r24
    532a:	ee 0f       	add	r30, r30
    532c:	ff 1f       	adc	r31, r31
    532e:	df 01       	movw	r26, r30
    5330:	a8 0f       	add	r26, r24
    5332:	b9 1f       	adc	r27, r25
    5334:	aa 0f       	add	r26, r26
    5336:	bb 1f       	adc	r27, r27
    5338:	a4 54       	subi	r26, 0x44	; 68
    533a:	b9 4e       	sbci	r27, 0xE9	; 233
    533c:	cd 91       	ld	r28, X+
    533e:	dc 91       	ld	r29, X
    5340:	11 97       	sbiw	r26, 0x01	; 1
    5342:	48 81       	ld	r20, Y
    5344:	21 e0       	ldi	r18, 0x01	; 1
    5346:	30 e0       	ldi	r19, 0x00	; 0
    5348:	12 96       	adiw	r26, 0x02	; 2
    534a:	0c 90       	ld	r0, X
    534c:	12 97       	sbiw	r26, 0x02	; 2
    534e:	02 c0       	rjmp	.+4      	; 0x5354 <status_leds_slowBlink+0x32>
    5350:	22 0f       	add	r18, r18
    5352:	33 1f       	adc	r19, r19
    5354:	0a 94       	dec	r0
    5356:	e2 f7       	brpl	.-8      	; 0x5350 <status_leds_slowBlink+0x2e>
    5358:	24 27       	eor	r18, r20
    535a:	28 83       	st	Y, r18
    535c:	fd 01       	movw	r30, r26
    535e:	81 e0       	ldi	r24, 0x01	; 1
    5360:	84 83       	std	Z+4, r24	; 0x04
    5362:	df 91       	pop	r29
    5364:	cf 91       	pop	r28
    5366:	08 95       	ret

00005368 <status_leds_fastBlink>:
    5368:	cf 93       	push	r28
    536a:	df 93       	push	r29
    536c:	90 e0       	ldi	r25, 0x00	; 0
    536e:	fc 01       	movw	r30, r24
    5370:	ee 0f       	add	r30, r30
    5372:	ff 1f       	adc	r31, r31
    5374:	df 01       	movw	r26, r30
    5376:	a8 0f       	add	r26, r24
    5378:	b9 1f       	adc	r27, r25
    537a:	aa 0f       	add	r26, r26
    537c:	bb 1f       	adc	r27, r27
    537e:	a4 54       	subi	r26, 0x44	; 68
    5380:	b9 4e       	sbci	r27, 0xE9	; 233
    5382:	cd 91       	ld	r28, X+
    5384:	dc 91       	ld	r29, X
    5386:	11 97       	sbiw	r26, 0x01	; 1
    5388:	48 81       	ld	r20, Y
    538a:	21 e0       	ldi	r18, 0x01	; 1
    538c:	30 e0       	ldi	r19, 0x00	; 0
    538e:	12 96       	adiw	r26, 0x02	; 2
    5390:	0c 90       	ld	r0, X
    5392:	12 97       	sbiw	r26, 0x02	; 2
    5394:	02 c0       	rjmp	.+4      	; 0x539a <status_leds_fastBlink+0x32>
    5396:	22 0f       	add	r18, r18
    5398:	33 1f       	adc	r19, r19
    539a:	0a 94       	dec	r0
    539c:	e2 f7       	brpl	.-8      	; 0x5396 <status_leds_fastBlink+0x2e>
    539e:	24 27       	eor	r18, r20
    53a0:	28 83       	st	Y, r18
    53a2:	fd 01       	movw	r30, r26
    53a4:	82 e0       	ldi	r24, 0x02	; 2
    53a6:	84 83       	std	Z+4, r24	; 0x04
    53a8:	df 91       	pop	r29
    53aa:	cf 91       	pop	r28
    53ac:	08 95       	ret

000053ae <status_leds_ledOn>:
    53ae:	28 2f       	mov	r18, r24
    53b0:	30 e0       	ldi	r19, 0x00	; 0
    53b2:	f9 01       	movw	r30, r18
    53b4:	ee 0f       	add	r30, r30
    53b6:	ff 1f       	adc	r31, r31
    53b8:	e2 0f       	add	r30, r18
    53ba:	f3 1f       	adc	r31, r19
    53bc:	ee 0f       	add	r30, r30
    53be:	ff 1f       	adc	r31, r31
    53c0:	e4 54       	subi	r30, 0x44	; 68
    53c2:	f9 4e       	sbci	r31, 0xE9	; 233
    53c4:	93 e0       	ldi	r25, 0x03	; 3
    53c6:	94 83       	std	Z+4, r25	; 0x04
    53c8:	cc ce       	rjmp	.-616    	; 0x5162 <_turn_on>
    53ca:	08 95       	ret

000053cc <status_leds_ledOff>:
    53cc:	28 2f       	mov	r18, r24
    53ce:	30 e0       	ldi	r19, 0x00	; 0
    53d0:	f9 01       	movw	r30, r18
    53d2:	ee 0f       	add	r30, r30
    53d4:	ff 1f       	adc	r31, r31
    53d6:	e2 0f       	add	r30, r18
    53d8:	f3 1f       	adc	r31, r19
    53da:	ee 0f       	add	r30, r30
    53dc:	ff 1f       	adc	r31, r31
    53de:	e4 54       	subi	r30, 0x44	; 68
    53e0:	f9 4e       	sbci	r31, 0xE9	; 233
    53e2:	94 e0       	ldi	r25, 0x04	; 4
    53e4:	94 83       	std	Z+4, r25	; 0x04
    53e6:	71 ce       	rjmp	.-798    	; 0x50ca <_turn_off>
    53e8:	08 95       	ret

000053ea <status_leds_longPuls>:
    53ea:	90 e0       	ldi	r25, 0x00	; 0
    53ec:	fc 01       	movw	r30, r24
    53ee:	ee 0f       	add	r30, r30
    53f0:	ff 1f       	adc	r31, r31
    53f2:	df 01       	movw	r26, r30
    53f4:	a8 0f       	add	r26, r24
    53f6:	b9 1f       	adc	r27, r25
    53f8:	aa 0f       	add	r26, r26
    53fa:	bb 1f       	adc	r27, r27
    53fc:	a4 54       	subi	r26, 0x44	; 68
    53fe:	b9 4e       	sbci	r27, 0xE9	; 233
    5400:	24 e0       	ldi	r18, 0x04	; 4
    5402:	15 96       	adiw	r26, 0x05	; 5
    5404:	2c 93       	st	X, r18
    5406:	15 97       	sbiw	r26, 0x05	; 5
    5408:	fd 01       	movw	r30, r26
    540a:	14 82       	std	Z+4, r1	; 0x04
    540c:	08 95       	ret

0000540e <status_leds_shortPuls>:
    540e:	90 e0       	ldi	r25, 0x00	; 0
    5410:	fc 01       	movw	r30, r24
    5412:	ee 0f       	add	r30, r30
    5414:	ff 1f       	adc	r31, r31
    5416:	df 01       	movw	r26, r30
    5418:	a8 0f       	add	r26, r24
    541a:	b9 1f       	adc	r27, r25
    541c:	aa 0f       	add	r26, r26
    541e:	bb 1f       	adc	r27, r27
    5420:	a4 54       	subi	r26, 0x44	; 68
    5422:	b9 4e       	sbci	r27, 0xE9	; 233
    5424:	21 e0       	ldi	r18, 0x01	; 1
    5426:	15 96       	adiw	r26, 0x05	; 5
    5428:	2c 93       	st	X, r18
    542a:	15 97       	sbiw	r26, 0x05	; 5
    542c:	fd 01       	movw	r30, r26
    542e:	14 82       	std	Z+4, r1	; 0x04
    5430:	08 95       	ret

00005432 <_initTwiInterface>:
    5432:	80 91 e2 16 	lds	r24, 0x16E2	; 0x8016e2 <_twiIsInitiated>
    5436:	81 11       	cpse	r24, r1
    5438:	0c c0       	rjmp	.+24     	; 0x5452 <_initTwiInterface+0x20>
    543a:	8c e0       	ldi	r24, 0x0C	; 12
    543c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5440:	8f ef       	ldi	r24, 0xFF	; 255
    5442:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5446:	84 e0       	ldi	r24, 0x04	; 4
    5448:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    544c:	81 e0       	ldi	r24, 0x01	; 1
    544e:	80 93 e2 16 	sts	0x16E2, r24	; 0x8016e2 <_twiIsInitiated>
    5452:	08 95       	ret

00005454 <twiCreate>:
    5454:	af 92       	push	r10
    5456:	bf 92       	push	r11
    5458:	cf 92       	push	r12
    545a:	df 92       	push	r13
    545c:	ef 92       	push	r14
    545e:	ff 92       	push	r15
    5460:	0f 93       	push	r16
    5462:	1f 93       	push	r17
    5464:	cf 93       	push	r28
    5466:	df 93       	push	r29
    5468:	a8 2e       	mov	r10, r24
    546a:	b6 2e       	mov	r11, r22
    546c:	69 01       	movw	r12, r18
    546e:	7a 01       	movw	r14, r20
    5470:	84 e0       	ldi	r24, 0x04	; 4
    5472:	90 e0       	ldi	r25, 0x00	; 0
    5474:	8a d7       	rcall	.+3860   	; 0x638a <malloc>
    5476:	ec 01       	movw	r28, r24
    5478:	89 2b       	or	r24, r25
    547a:	61 f1       	breq	.+88     	; 0x54d4 <twiCreate+0x80>
    547c:	a8 82       	st	Y, r10
    547e:	81 e0       	ldi	r24, 0x01	; 1
    5480:	b8 12       	cpse	r11, r24
    5482:	12 c0       	rjmp	.+36     	; 0x54a8 <twiCreate+0x54>
    5484:	c7 01       	movw	r24, r14
    5486:	b6 01       	movw	r22, r12
    5488:	20 ea       	ldi	r18, 0xA0	; 160
    548a:	36 e8       	ldi	r19, 0x86	; 134
    548c:	41 e0       	ldi	r20, 0x01	; 1
    548e:	50 e0       	ldi	r21, 0x00	; 0
    5490:	15 d7       	rcall	.+3626   	; 0x62bc <__udivmodsi4>
    5492:	da 01       	movw	r26, r20
    5494:	c9 01       	movw	r24, r18
    5496:	40 97       	sbiw	r24, 0x10	; 16
    5498:	a1 09       	sbc	r26, r1
    549a:	b1 09       	sbc	r27, r1
    549c:	b6 95       	lsr	r27
    549e:	a7 95       	ror	r26
    54a0:	97 95       	ror	r25
    54a2:	87 95       	ror	r24
    54a4:	89 83       	std	Y+1, r24	; 0x01
    54a6:	11 c0       	rjmp	.+34     	; 0x54ca <twiCreate+0x76>
    54a8:	c7 01       	movw	r24, r14
    54aa:	b6 01       	movw	r22, r12
    54ac:	20 e8       	ldi	r18, 0x80	; 128
    54ae:	3a e1       	ldi	r19, 0x1A	; 26
    54b0:	46 e0       	ldi	r20, 0x06	; 6
    54b2:	50 e0       	ldi	r21, 0x00	; 0
    54b4:	03 d7       	rcall	.+3590   	; 0x62bc <__udivmodsi4>
    54b6:	da 01       	movw	r26, r20
    54b8:	c9 01       	movw	r24, r18
    54ba:	40 97       	sbiw	r24, 0x10	; 16
    54bc:	a1 09       	sbc	r26, r1
    54be:	b1 09       	sbc	r27, r1
    54c0:	b6 95       	lsr	r27
    54c2:	a7 95       	ror	r26
    54c4:	97 95       	ror	r25
    54c6:	87 95       	ror	r24
    54c8:	89 83       	std	Y+1, r24	; 0x01
    54ca:	1b 83       	std	Y+3, r17	; 0x03
    54cc:	0a 83       	std	Y+2, r16	; 0x02
    54ce:	8c 2f       	mov	r24, r28
    54d0:	9d 2f       	mov	r25, r29
    54d2:	02 c0       	rjmp	.+4      	; 0x54d8 <twiCreate+0x84>
    54d4:	80 e0       	ldi	r24, 0x00	; 0
    54d6:	90 e0       	ldi	r25, 0x00	; 0
    54d8:	df 91       	pop	r29
    54da:	cf 91       	pop	r28
    54dc:	1f 91       	pop	r17
    54de:	0f 91       	pop	r16
    54e0:	ff 90       	pop	r15
    54e2:	ef 90       	pop	r14
    54e4:	df 90       	pop	r13
    54e6:	cf 90       	pop	r12
    54e8:	bf 90       	pop	r11
    54ea:	af 90       	pop	r10
    54ec:	08 95       	ret

000054ee <twiIsBusy>:
    54ee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54f2:	81 70       	andi	r24, 0x01	; 1
    54f4:	08 95       	ret

000054f6 <twiTransmit>:
    54f6:	ff 92       	push	r15
    54f8:	0f 93       	push	r16
    54fa:	1f 93       	push	r17
    54fc:	cf 93       	push	r28
    54fe:	df 93       	push	r29
    5500:	00 97       	sbiw	r24, 0x00	; 0
    5502:	d1 f1       	breq	.+116    	; 0x5578 <twiTransmit+0x82>
    5504:	4a 30       	cpi	r20, 0x0A	; 10
    5506:	d0 f5       	brcc	.+116    	; 0x557c <twiTransmit+0x86>
    5508:	f4 2e       	mov	r15, r20
    550a:	8b 01       	movw	r16, r22
    550c:	ec 01       	movw	r28, r24
    550e:	ef df       	rcall	.-34     	; 0x54ee <twiIsBusy>
    5510:	81 11       	cpse	r24, r1
    5512:	36 c0       	rjmp	.+108    	; 0x5580 <twiTransmit+0x8a>
    5514:	80 91 d5 16 	lds	r24, 0x16D5	; 0x8016d5 <_twiCurrentHandler>
    5518:	90 91 d6 16 	lds	r25, 0x16D6	; 0x8016d6 <_twiCurrentHandler+0x1>
    551c:	c8 17       	cp	r28, r24
    551e:	d9 07       	cpc	r29, r25
    5520:	41 f0       	breq	.+16     	; 0x5532 <twiTransmit+0x3c>
    5522:	87 df       	rcall	.-242    	; 0x5432 <_initTwiInterface>
    5524:	89 81       	ldd	r24, Y+1	; 0x01
    5526:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    552a:	d0 93 d6 16 	sts	0x16D6, r29	; 0x8016d6 <_twiCurrentHandler+0x1>
    552e:	c0 93 d5 16 	sts	0x16D5, r28	; 0x8016d5 <_twiCurrentHandler>
    5532:	81 e0       	ldi	r24, 0x01	; 1
    5534:	8f 0d       	add	r24, r15
    5536:	80 93 d7 16 	sts	0x16D7, r24	; 0x8016d7 <_twiMessageLen>
    553a:	88 81       	ld	r24, Y
    553c:	88 0f       	add	r24, r24
    553e:	80 93 d8 16 	sts	0x16D8, r24	; 0x8016d8 <_twiMessageBuffer>
    5542:	ff 20       	and	r15, r15
    5544:	89 f0       	breq	.+34     	; 0x5568 <twiTransmit+0x72>
    5546:	f8 01       	movw	r30, r16
    5548:	a9 ed       	ldi	r26, 0xD9	; 217
    554a:	b6 e1       	ldi	r27, 0x16	; 22
    554c:	4f ef       	ldi	r20, 0xFF	; 255
    554e:	4f 0d       	add	r20, r15
    5550:	64 2f       	mov	r22, r20
    5552:	70 e0       	ldi	r23, 0x00	; 0
    5554:	cb 01       	movw	r24, r22
    5556:	01 96       	adiw	r24, 0x01	; 1
    5558:	b8 01       	movw	r22, r16
    555a:	68 0f       	add	r22, r24
    555c:	79 1f       	adc	r23, r25
    555e:	81 91       	ld	r24, Z+
    5560:	8d 93       	st	X+, r24
    5562:	e6 17       	cp	r30, r22
    5564:	f7 07       	cpc	r31, r23
    5566:	d9 f7       	brne	.-10     	; 0x555e <twiTransmit+0x68>
    5568:	88 ef       	ldi	r24, 0xF8	; 248
    556a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    556e:	85 ea       	ldi	r24, 0xA5	; 165
    5570:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5574:	84 e0       	ldi	r24, 0x04	; 4
    5576:	05 c0       	rjmp	.+10     	; 0x5582 <twiTransmit+0x8c>
    5578:	86 e0       	ldi	r24, 0x06	; 6
    557a:	03 c0       	rjmp	.+6      	; 0x5582 <twiTransmit+0x8c>
    557c:	87 e0       	ldi	r24, 0x07	; 7
    557e:	01 c0       	rjmp	.+2      	; 0x5582 <twiTransmit+0x8c>
    5580:	82 e0       	ldi	r24, 0x02	; 2
    5582:	df 91       	pop	r29
    5584:	cf 91       	pop	r28
    5586:	1f 91       	pop	r17
    5588:	0f 91       	pop	r16
    558a:	ff 90       	pop	r15
    558c:	08 95       	ret

0000558e <twiReceive>:
    558e:	1f 93       	push	r17
    5590:	cf 93       	push	r28
    5592:	df 93       	push	r29
    5594:	00 97       	sbiw	r24, 0x00	; 0
    5596:	29 f1       	breq	.+74     	; 0x55e2 <twiReceive+0x54>
    5598:	6b 30       	cpi	r22, 0x0B	; 11
    559a:	28 f5       	brcc	.+74     	; 0x55e6 <twiReceive+0x58>
    559c:	16 2f       	mov	r17, r22
    559e:	ec 01       	movw	r28, r24
    55a0:	a6 df       	rcall	.-180    	; 0x54ee <twiIsBusy>
    55a2:	81 11       	cpse	r24, r1
    55a4:	22 c0       	rjmp	.+68     	; 0x55ea <twiReceive+0x5c>
    55a6:	80 91 d5 16 	lds	r24, 0x16D5	; 0x8016d5 <_twiCurrentHandler>
    55aa:	90 91 d6 16 	lds	r25, 0x16D6	; 0x8016d6 <_twiCurrentHandler+0x1>
    55ae:	c8 17       	cp	r28, r24
    55b0:	d9 07       	cpc	r29, r25
    55b2:	41 f0       	breq	.+16     	; 0x55c4 <twiReceive+0x36>
    55b4:	3e df       	rcall	.-388    	; 0x5432 <_initTwiInterface>
    55b6:	89 81       	ldd	r24, Y+1	; 0x01
    55b8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    55bc:	d0 93 d6 16 	sts	0x16D6, r29	; 0x8016d6 <_twiCurrentHandler+0x1>
    55c0:	c0 93 d5 16 	sts	0x16D5, r28	; 0x8016d5 <_twiCurrentHandler>
    55c4:	10 93 d7 16 	sts	0x16D7, r17	; 0x8016d7 <_twiMessageLen>
    55c8:	88 81       	ld	r24, Y
    55ca:	88 0f       	add	r24, r24
    55cc:	81 60       	ori	r24, 0x01	; 1
    55ce:	80 93 d8 16 	sts	0x16D8, r24	; 0x8016d8 <_twiMessageBuffer>
    55d2:	88 ef       	ldi	r24, 0xF8	; 248
    55d4:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    55d8:	85 ea       	ldi	r24, 0xA5	; 165
    55da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55de:	85 e0       	ldi	r24, 0x05	; 5
    55e0:	05 c0       	rjmp	.+10     	; 0x55ec <twiReceive+0x5e>
    55e2:	86 e0       	ldi	r24, 0x06	; 6
    55e4:	03 c0       	rjmp	.+6      	; 0x55ec <twiReceive+0x5e>
    55e6:	87 e0       	ldi	r24, 0x07	; 7
    55e8:	01 c0       	rjmp	.+2      	; 0x55ec <twiReceive+0x5e>
    55ea:	82 e0       	ldi	r24, 0x02	; 2
    55ec:	df 91       	pop	r29
    55ee:	cf 91       	pop	r28
    55f0:	1f 91       	pop	r17
    55f2:	08 95       	ret

000055f4 <__vector_39>:
    55f4:	1f 92       	push	r1
    55f6:	0f 92       	push	r0
    55f8:	0f b6       	in	r0, 0x3f	; 63
    55fa:	0f 92       	push	r0
    55fc:	11 24       	eor	r1, r1
    55fe:	0b b6       	in	r0, 0x3b	; 59
    5600:	0f 92       	push	r0
    5602:	2f 93       	push	r18
    5604:	3f 93       	push	r19
    5606:	4f 93       	push	r20
    5608:	5f 93       	push	r21
    560a:	6f 93       	push	r22
    560c:	7f 93       	push	r23
    560e:	8f 93       	push	r24
    5610:	9f 93       	push	r25
    5612:	af 93       	push	r26
    5614:	bf 93       	push	r27
    5616:	ef 93       	push	r30
    5618:	ff 93       	push	r31
    561a:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    561e:	8e 2f       	mov	r24, r30
    5620:	90 e0       	ldi	r25, 0x00	; 0
    5622:	fc 01       	movw	r30, r24
    5624:	38 97       	sbiw	r30, 0x08	; 8
    5626:	e1 35       	cpi	r30, 0x51	; 81
    5628:	f1 05       	cpc	r31, r1
    562a:	08 f0       	brcs	.+2      	; 0x562e <__vector_39+0x3a>
    562c:	75 c0       	rjmp	.+234    	; 0x5718 <__vector_39+0x124>
    562e:	88 27       	eor	r24, r24
    5630:	e4 58       	subi	r30, 0x84	; 132
    5632:	ff 4f       	sbci	r31, 0xFF	; 255
    5634:	8f 4f       	sbci	r24, 0xFF	; 255
    5636:	64 c6       	rjmp	.+3272   	; 0x6300 <__tablejump2__>
    5638:	10 92 d4 16 	sts	0x16D4, r1	; 0x8016d4 <_index.1885>
    563c:	e0 91 d4 16 	lds	r30, 0x16D4	; 0x8016d4 <_index.1885>
    5640:	80 91 d7 16 	lds	r24, 0x16D7	; 0x8016d7 <_twiMessageLen>
    5644:	e8 17       	cp	r30, r24
    5646:	70 f4       	brcc	.+28     	; 0x5664 <__vector_39+0x70>
    5648:	81 e0       	ldi	r24, 0x01	; 1
    564a:	8e 0f       	add	r24, r30
    564c:	80 93 d4 16 	sts	0x16D4, r24	; 0x8016d4 <_index.1885>
    5650:	f0 e0       	ldi	r31, 0x00	; 0
    5652:	e8 52       	subi	r30, 0x28	; 40
    5654:	f9 4e       	sbci	r31, 0xE9	; 233
    5656:	80 81       	ld	r24, Z
    5658:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    565c:	85 e8       	ldi	r24, 0x85	; 133
    565e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5662:	72 c0       	rjmp	.+228    	; 0x5748 <__vector_39+0x154>
    5664:	84 e9       	ldi	r24, 0x94	; 148
    5666:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    566a:	80 91 d5 16 	lds	r24, 0x16D5	; 0x8016d5 <_twiCurrentHandler>
    566e:	90 91 d6 16 	lds	r25, 0x16D6	; 0x8016d6 <_twiCurrentHandler+0x1>
    5672:	dc 01       	movw	r26, r24
    5674:	12 96       	adiw	r26, 0x02	; 2
    5676:	ed 91       	ld	r30, X+
    5678:	fc 91       	ld	r31, X
    567a:	13 97       	sbiw	r26, 0x03	; 3
    567c:	30 97       	sbiw	r30, 0x00	; 0
    567e:	09 f4       	brne	.+2      	; 0x5682 <__vector_39+0x8e>
    5680:	63 c0       	rjmp	.+198    	; 0x5748 <__vector_39+0x154>
    5682:	20 e0       	ldi	r18, 0x00	; 0
    5684:	40 e0       	ldi	r20, 0x00	; 0
    5686:	50 e0       	ldi	r21, 0x00	; 0
    5688:	64 e0       	ldi	r22, 0x04	; 4
    568a:	19 95       	eicall
    568c:	5d c0       	rjmp	.+186    	; 0x5748 <__vector_39+0x154>
    568e:	e0 91 d4 16 	lds	r30, 0x16D4	; 0x8016d4 <_index.1885>
    5692:	81 e0       	ldi	r24, 0x01	; 1
    5694:	8e 0f       	add	r24, r30
    5696:	80 93 d4 16 	sts	0x16D4, r24	; 0x8016d4 <_index.1885>
    569a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    569e:	f0 e0       	ldi	r31, 0x00	; 0
    56a0:	e8 52       	subi	r30, 0x28	; 40
    56a2:	f9 4e       	sbci	r31, 0xE9	; 233
    56a4:	80 83       	st	Z, r24
    56a6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    56aa:	80 34       	cpi	r24, 0x40	; 64
    56ac:	11 f4       	brne	.+4      	; 0x56b2 <__vector_39+0xbe>
    56ae:	10 92 d4 16 	sts	0x16D4, r1	; 0x8016d4 <_index.1885>
    56b2:	20 91 d4 16 	lds	r18, 0x16D4	; 0x8016d4 <_index.1885>
    56b6:	30 e0       	ldi	r19, 0x00	; 0
    56b8:	80 91 d7 16 	lds	r24, 0x16D7	; 0x8016d7 <_twiMessageLen>
    56bc:	90 e0       	ldi	r25, 0x00	; 0
    56be:	01 97       	sbiw	r24, 0x01	; 1
    56c0:	28 17       	cp	r18, r24
    56c2:	39 07       	cpc	r19, r25
    56c4:	24 f4       	brge	.+8      	; 0x56ce <__vector_39+0xda>
    56c6:	85 ec       	ldi	r24, 0xC5	; 197
    56c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    56cc:	3d c0       	rjmp	.+122    	; 0x5748 <__vector_39+0x154>
    56ce:	85 e8       	ldi	r24, 0x85	; 133
    56d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    56d4:	39 c0       	rjmp	.+114    	; 0x5748 <__vector_39+0x154>
    56d6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    56da:	e0 91 d4 16 	lds	r30, 0x16D4	; 0x8016d4 <_index.1885>
    56de:	f0 e0       	ldi	r31, 0x00	; 0
    56e0:	e8 52       	subi	r30, 0x28	; 40
    56e2:	f9 4e       	sbci	r31, 0xE9	; 233
    56e4:	80 83       	st	Z, r24
    56e6:	84 e9       	ldi	r24, 0x94	; 148
    56e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    56ec:	80 91 d5 16 	lds	r24, 0x16D5	; 0x8016d5 <_twiCurrentHandler>
    56f0:	90 91 d6 16 	lds	r25, 0x16D6	; 0x8016d6 <_twiCurrentHandler+0x1>
    56f4:	dc 01       	movw	r26, r24
    56f6:	12 96       	adiw	r26, 0x02	; 2
    56f8:	ed 91       	ld	r30, X+
    56fa:	fc 91       	ld	r31, X
    56fc:	13 97       	sbiw	r26, 0x03	; 3
    56fe:	30 97       	sbiw	r30, 0x00	; 0
    5700:	19 f1       	breq	.+70     	; 0x5748 <__vector_39+0x154>
    5702:	20 91 d7 16 	lds	r18, 0x16D7	; 0x8016d7 <_twiMessageLen>
    5706:	48 ed       	ldi	r20, 0xD8	; 216
    5708:	56 e1       	ldi	r21, 0x16	; 22
    570a:	65 e0       	ldi	r22, 0x05	; 5
    570c:	19 95       	eicall
    570e:	1c c0       	rjmp	.+56     	; 0x5748 <__vector_39+0x154>
    5710:	85 ea       	ldi	r24, 0xA5	; 165
    5712:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5716:	18 c0       	rjmp	.+48     	; 0x5748 <__vector_39+0x154>
    5718:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    571c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5720:	84 e0       	ldi	r24, 0x04	; 4
    5722:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5726:	80 91 d5 16 	lds	r24, 0x16D5	; 0x8016d5 <_twiCurrentHandler>
    572a:	90 91 d6 16 	lds	r25, 0x16D6	; 0x8016d6 <_twiCurrentHandler+0x1>
    572e:	dc 01       	movw	r26, r24
    5730:	12 96       	adiw	r26, 0x02	; 2
    5732:	ed 91       	ld	r30, X+
    5734:	fc 91       	ld	r31, X
    5736:	13 97       	sbiw	r26, 0x03	; 3
    5738:	30 97       	sbiw	r30, 0x00	; 0
    573a:	31 f0       	breq	.+12     	; 0x5748 <__vector_39+0x154>
    573c:	20 e0       	ldi	r18, 0x00	; 0
    573e:	40 e0       	ldi	r20, 0x00	; 0
    5740:	50 e0       	ldi	r21, 0x00	; 0
    5742:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5746:	19 95       	eicall
    5748:	ff 91       	pop	r31
    574a:	ef 91       	pop	r30
    574c:	bf 91       	pop	r27
    574e:	af 91       	pop	r26
    5750:	9f 91       	pop	r25
    5752:	8f 91       	pop	r24
    5754:	7f 91       	pop	r23
    5756:	6f 91       	pop	r22
    5758:	5f 91       	pop	r21
    575a:	4f 91       	pop	r20
    575c:	3f 91       	pop	r19
    575e:	2f 91       	pop	r18
    5760:	0f 90       	pop	r0
    5762:	0b be       	out	0x3b, r0	; 59
    5764:	0f 90       	pop	r0
    5766:	0f be       	out	0x3f, r0	; 63
    5768:	0f 90       	pop	r0
    576a:	1f 90       	pop	r1
    576c:	18 95       	reti

0000576e <fifo_init>:
    576e:	fc 01       	movw	r30, r24
    5770:	41 11       	cpse	r20, r1
    5772:	01 c0       	rjmp	.+2      	; 0x5776 <fifo_init+0x8>
    5774:	2b d7       	rcall	.+3670   	; 0x65cc <abort>
    5776:	84 2f       	mov	r24, r20
    5778:	90 e0       	ldi	r25, 0x00	; 0
    577a:	9c 01       	movw	r18, r24
    577c:	21 50       	subi	r18, 0x01	; 1
    577e:	31 09       	sbc	r19, r1
    5780:	82 23       	and	r24, r18
    5782:	93 23       	and	r25, r19
    5784:	89 2b       	or	r24, r25
    5786:	09 f0       	breq	.+2      	; 0x578a <fifo_init+0x1c>
    5788:	21 d7       	rcall	.+3650   	; 0x65cc <abort>
    578a:	41 38       	cpi	r20, 0x81	; 129
    578c:	08 f0       	brcs	.+2      	; 0x5790 <fifo_init+0x22>
    578e:	1e d7       	rcall	.+3644   	; 0x65cc <abort>
    5790:	12 82       	std	Z+2, r1	; 0x02
    5792:	13 82       	std	Z+3, r1	; 0x03
    5794:	44 83       	std	Z+4, r20	; 0x04
    5796:	44 0f       	add	r20, r20
    5798:	41 50       	subi	r20, 0x01	; 1
    579a:	45 83       	std	Z+5, r20	; 0x05
    579c:	71 83       	std	Z+1, r23	; 0x01
    579e:	60 83       	st	Z, r22
    57a0:	80 e0       	ldi	r24, 0x00	; 0
    57a2:	90 e0       	ldi	r25, 0x00	; 0
    57a4:	08 95       	ret

000057a6 <__subsf3>:
    57a6:	50 58       	subi	r21, 0x80	; 128

000057a8 <__addsf3>:
    57a8:	bb 27       	eor	r27, r27
    57aa:	aa 27       	eor	r26, r26
    57ac:	0e d0       	rcall	.+28     	; 0x57ca <__addsf3x>
    57ae:	4d c1       	rjmp	.+666    	; 0x5a4a <__fp_round>
    57b0:	3e d1       	rcall	.+636    	; 0x5a2e <__fp_pscA>
    57b2:	30 f0       	brcs	.+12     	; 0x57c0 <__addsf3+0x18>
    57b4:	43 d1       	rcall	.+646    	; 0x5a3c <__fp_pscB>
    57b6:	20 f0       	brcs	.+8      	; 0x57c0 <__addsf3+0x18>
    57b8:	31 f4       	brne	.+12     	; 0x57c6 <__addsf3+0x1e>
    57ba:	9f 3f       	cpi	r25, 0xFF	; 255
    57bc:	11 f4       	brne	.+4      	; 0x57c2 <__addsf3+0x1a>
    57be:	1e f4       	brtc	.+6      	; 0x57c6 <__addsf3+0x1e>
    57c0:	33 c1       	rjmp	.+614    	; 0x5a28 <__fp_nan>
    57c2:	0e f4       	brtc	.+2      	; 0x57c6 <__addsf3+0x1e>
    57c4:	e0 95       	com	r30
    57c6:	e7 fb       	bst	r30, 7
    57c8:	29 c1       	rjmp	.+594    	; 0x5a1c <__fp_inf>

000057ca <__addsf3x>:
    57ca:	e9 2f       	mov	r30, r25
    57cc:	4f d1       	rcall	.+670    	; 0x5a6c <__fp_split3>
    57ce:	80 f3       	brcs	.-32     	; 0x57b0 <__addsf3+0x8>
    57d0:	ba 17       	cp	r27, r26
    57d2:	62 07       	cpc	r22, r18
    57d4:	73 07       	cpc	r23, r19
    57d6:	84 07       	cpc	r24, r20
    57d8:	95 07       	cpc	r25, r21
    57da:	18 f0       	brcs	.+6      	; 0x57e2 <__addsf3x+0x18>
    57dc:	71 f4       	brne	.+28     	; 0x57fa <__addsf3x+0x30>
    57de:	9e f5       	brtc	.+102    	; 0x5846 <__addsf3x+0x7c>
    57e0:	67 c1       	rjmp	.+718    	; 0x5ab0 <__fp_zero>
    57e2:	0e f4       	brtc	.+2      	; 0x57e6 <__addsf3x+0x1c>
    57e4:	e0 95       	com	r30
    57e6:	0b 2e       	mov	r0, r27
    57e8:	ba 2f       	mov	r27, r26
    57ea:	a0 2d       	mov	r26, r0
    57ec:	0b 01       	movw	r0, r22
    57ee:	b9 01       	movw	r22, r18
    57f0:	90 01       	movw	r18, r0
    57f2:	0c 01       	movw	r0, r24
    57f4:	ca 01       	movw	r24, r20
    57f6:	a0 01       	movw	r20, r0
    57f8:	11 24       	eor	r1, r1
    57fa:	ff 27       	eor	r31, r31
    57fc:	59 1b       	sub	r21, r25
    57fe:	99 f0       	breq	.+38     	; 0x5826 <__addsf3x+0x5c>
    5800:	59 3f       	cpi	r21, 0xF9	; 249
    5802:	50 f4       	brcc	.+20     	; 0x5818 <__addsf3x+0x4e>
    5804:	50 3e       	cpi	r21, 0xE0	; 224
    5806:	68 f1       	brcs	.+90     	; 0x5862 <__addsf3x+0x98>
    5808:	1a 16       	cp	r1, r26
    580a:	f0 40       	sbci	r31, 0x00	; 0
    580c:	a2 2f       	mov	r26, r18
    580e:	23 2f       	mov	r18, r19
    5810:	34 2f       	mov	r19, r20
    5812:	44 27       	eor	r20, r20
    5814:	58 5f       	subi	r21, 0xF8	; 248
    5816:	f3 cf       	rjmp	.-26     	; 0x57fe <__addsf3x+0x34>
    5818:	46 95       	lsr	r20
    581a:	37 95       	ror	r19
    581c:	27 95       	ror	r18
    581e:	a7 95       	ror	r26
    5820:	f0 40       	sbci	r31, 0x00	; 0
    5822:	53 95       	inc	r21
    5824:	c9 f7       	brne	.-14     	; 0x5818 <__addsf3x+0x4e>
    5826:	7e f4       	brtc	.+30     	; 0x5846 <__addsf3x+0x7c>
    5828:	1f 16       	cp	r1, r31
    582a:	ba 0b       	sbc	r27, r26
    582c:	62 0b       	sbc	r22, r18
    582e:	73 0b       	sbc	r23, r19
    5830:	84 0b       	sbc	r24, r20
    5832:	ba f0       	brmi	.+46     	; 0x5862 <__addsf3x+0x98>
    5834:	91 50       	subi	r25, 0x01	; 1
    5836:	a1 f0       	breq	.+40     	; 0x5860 <__addsf3x+0x96>
    5838:	ff 0f       	add	r31, r31
    583a:	bb 1f       	adc	r27, r27
    583c:	66 1f       	adc	r22, r22
    583e:	77 1f       	adc	r23, r23
    5840:	88 1f       	adc	r24, r24
    5842:	c2 f7       	brpl	.-16     	; 0x5834 <__addsf3x+0x6a>
    5844:	0e c0       	rjmp	.+28     	; 0x5862 <__addsf3x+0x98>
    5846:	ba 0f       	add	r27, r26
    5848:	62 1f       	adc	r22, r18
    584a:	73 1f       	adc	r23, r19
    584c:	84 1f       	adc	r24, r20
    584e:	48 f4       	brcc	.+18     	; 0x5862 <__addsf3x+0x98>
    5850:	87 95       	ror	r24
    5852:	77 95       	ror	r23
    5854:	67 95       	ror	r22
    5856:	b7 95       	ror	r27
    5858:	f7 95       	ror	r31
    585a:	9e 3f       	cpi	r25, 0xFE	; 254
    585c:	08 f0       	brcs	.+2      	; 0x5860 <__addsf3x+0x96>
    585e:	b3 cf       	rjmp	.-154    	; 0x57c6 <__addsf3+0x1e>
    5860:	93 95       	inc	r25
    5862:	88 0f       	add	r24, r24
    5864:	08 f0       	brcs	.+2      	; 0x5868 <__addsf3x+0x9e>
    5866:	99 27       	eor	r25, r25
    5868:	ee 0f       	add	r30, r30
    586a:	97 95       	ror	r25
    586c:	87 95       	ror	r24
    586e:	08 95       	ret

00005870 <__divsf3>:
    5870:	0c d0       	rcall	.+24     	; 0x588a <__divsf3x>
    5872:	eb c0       	rjmp	.+470    	; 0x5a4a <__fp_round>
    5874:	e3 d0       	rcall	.+454    	; 0x5a3c <__fp_pscB>
    5876:	40 f0       	brcs	.+16     	; 0x5888 <__divsf3+0x18>
    5878:	da d0       	rcall	.+436    	; 0x5a2e <__fp_pscA>
    587a:	30 f0       	brcs	.+12     	; 0x5888 <__divsf3+0x18>
    587c:	21 f4       	brne	.+8      	; 0x5886 <__divsf3+0x16>
    587e:	5f 3f       	cpi	r21, 0xFF	; 255
    5880:	19 f0       	breq	.+6      	; 0x5888 <__divsf3+0x18>
    5882:	cc c0       	rjmp	.+408    	; 0x5a1c <__fp_inf>
    5884:	51 11       	cpse	r21, r1
    5886:	15 c1       	rjmp	.+554    	; 0x5ab2 <__fp_szero>
    5888:	cf c0       	rjmp	.+414    	; 0x5a28 <__fp_nan>

0000588a <__divsf3x>:
    588a:	f0 d0       	rcall	.+480    	; 0x5a6c <__fp_split3>
    588c:	98 f3       	brcs	.-26     	; 0x5874 <__divsf3+0x4>

0000588e <__divsf3_pse>:
    588e:	99 23       	and	r25, r25
    5890:	c9 f3       	breq	.-14     	; 0x5884 <__divsf3+0x14>
    5892:	55 23       	and	r21, r21
    5894:	b1 f3       	breq	.-20     	; 0x5882 <__divsf3+0x12>
    5896:	95 1b       	sub	r25, r21
    5898:	55 0b       	sbc	r21, r21
    589a:	bb 27       	eor	r27, r27
    589c:	aa 27       	eor	r26, r26
    589e:	62 17       	cp	r22, r18
    58a0:	73 07       	cpc	r23, r19
    58a2:	84 07       	cpc	r24, r20
    58a4:	38 f0       	brcs	.+14     	; 0x58b4 <__divsf3_pse+0x26>
    58a6:	9f 5f       	subi	r25, 0xFF	; 255
    58a8:	5f 4f       	sbci	r21, 0xFF	; 255
    58aa:	22 0f       	add	r18, r18
    58ac:	33 1f       	adc	r19, r19
    58ae:	44 1f       	adc	r20, r20
    58b0:	aa 1f       	adc	r26, r26
    58b2:	a9 f3       	breq	.-22     	; 0x589e <__divsf3_pse+0x10>
    58b4:	33 d0       	rcall	.+102    	; 0x591c <__divsf3_pse+0x8e>
    58b6:	0e 2e       	mov	r0, r30
    58b8:	3a f0       	brmi	.+14     	; 0x58c8 <__divsf3_pse+0x3a>
    58ba:	e0 e8       	ldi	r30, 0x80	; 128
    58bc:	30 d0       	rcall	.+96     	; 0x591e <__divsf3_pse+0x90>
    58be:	91 50       	subi	r25, 0x01	; 1
    58c0:	50 40       	sbci	r21, 0x00	; 0
    58c2:	e6 95       	lsr	r30
    58c4:	00 1c       	adc	r0, r0
    58c6:	ca f7       	brpl	.-14     	; 0x58ba <__divsf3_pse+0x2c>
    58c8:	29 d0       	rcall	.+82     	; 0x591c <__divsf3_pse+0x8e>
    58ca:	fe 2f       	mov	r31, r30
    58cc:	27 d0       	rcall	.+78     	; 0x591c <__divsf3_pse+0x8e>
    58ce:	66 0f       	add	r22, r22
    58d0:	77 1f       	adc	r23, r23
    58d2:	88 1f       	adc	r24, r24
    58d4:	bb 1f       	adc	r27, r27
    58d6:	26 17       	cp	r18, r22
    58d8:	37 07       	cpc	r19, r23
    58da:	48 07       	cpc	r20, r24
    58dc:	ab 07       	cpc	r26, r27
    58de:	b0 e8       	ldi	r27, 0x80	; 128
    58e0:	09 f0       	breq	.+2      	; 0x58e4 <__divsf3_pse+0x56>
    58e2:	bb 0b       	sbc	r27, r27
    58e4:	80 2d       	mov	r24, r0
    58e6:	bf 01       	movw	r22, r30
    58e8:	ff 27       	eor	r31, r31
    58ea:	93 58       	subi	r25, 0x83	; 131
    58ec:	5f 4f       	sbci	r21, 0xFF	; 255
    58ee:	2a f0       	brmi	.+10     	; 0x58fa <__divsf3_pse+0x6c>
    58f0:	9e 3f       	cpi	r25, 0xFE	; 254
    58f2:	51 05       	cpc	r21, r1
    58f4:	68 f0       	brcs	.+26     	; 0x5910 <__divsf3_pse+0x82>
    58f6:	92 c0       	rjmp	.+292    	; 0x5a1c <__fp_inf>
    58f8:	dc c0       	rjmp	.+440    	; 0x5ab2 <__fp_szero>
    58fa:	5f 3f       	cpi	r21, 0xFF	; 255
    58fc:	ec f3       	brlt	.-6      	; 0x58f8 <__divsf3_pse+0x6a>
    58fe:	98 3e       	cpi	r25, 0xE8	; 232
    5900:	dc f3       	brlt	.-10     	; 0x58f8 <__divsf3_pse+0x6a>
    5902:	86 95       	lsr	r24
    5904:	77 95       	ror	r23
    5906:	67 95       	ror	r22
    5908:	b7 95       	ror	r27
    590a:	f7 95       	ror	r31
    590c:	9f 5f       	subi	r25, 0xFF	; 255
    590e:	c9 f7       	brne	.-14     	; 0x5902 <__divsf3_pse+0x74>
    5910:	88 0f       	add	r24, r24
    5912:	91 1d       	adc	r25, r1
    5914:	96 95       	lsr	r25
    5916:	87 95       	ror	r24
    5918:	97 f9       	bld	r25, 7
    591a:	08 95       	ret
    591c:	e1 e0       	ldi	r30, 0x01	; 1
    591e:	66 0f       	add	r22, r22
    5920:	77 1f       	adc	r23, r23
    5922:	88 1f       	adc	r24, r24
    5924:	bb 1f       	adc	r27, r27
    5926:	62 17       	cp	r22, r18
    5928:	73 07       	cpc	r23, r19
    592a:	84 07       	cpc	r24, r20
    592c:	ba 07       	cpc	r27, r26
    592e:	20 f0       	brcs	.+8      	; 0x5938 <__divsf3_pse+0xaa>
    5930:	62 1b       	sub	r22, r18
    5932:	73 0b       	sbc	r23, r19
    5934:	84 0b       	sbc	r24, r20
    5936:	ba 0b       	sbc	r27, r26
    5938:	ee 1f       	adc	r30, r30
    593a:	88 f7       	brcc	.-30     	; 0x591e <__divsf3_pse+0x90>
    593c:	e0 95       	com	r30
    593e:	08 95       	ret

00005940 <__fixsfsi>:
    5940:	04 d0       	rcall	.+8      	; 0x594a <__fixunssfsi>
    5942:	68 94       	set
    5944:	b1 11       	cpse	r27, r1
    5946:	b5 c0       	rjmp	.+362    	; 0x5ab2 <__fp_szero>
    5948:	08 95       	ret

0000594a <__fixunssfsi>:
    594a:	98 d0       	rcall	.+304    	; 0x5a7c <__fp_splitA>
    594c:	88 f0       	brcs	.+34     	; 0x5970 <__fixunssfsi+0x26>
    594e:	9f 57       	subi	r25, 0x7F	; 127
    5950:	90 f0       	brcs	.+36     	; 0x5976 <__fixunssfsi+0x2c>
    5952:	b9 2f       	mov	r27, r25
    5954:	99 27       	eor	r25, r25
    5956:	b7 51       	subi	r27, 0x17	; 23
    5958:	a0 f0       	brcs	.+40     	; 0x5982 <__fixunssfsi+0x38>
    595a:	d1 f0       	breq	.+52     	; 0x5990 <__fixunssfsi+0x46>
    595c:	66 0f       	add	r22, r22
    595e:	77 1f       	adc	r23, r23
    5960:	88 1f       	adc	r24, r24
    5962:	99 1f       	adc	r25, r25
    5964:	1a f0       	brmi	.+6      	; 0x596c <__fixunssfsi+0x22>
    5966:	ba 95       	dec	r27
    5968:	c9 f7       	brne	.-14     	; 0x595c <__fixunssfsi+0x12>
    596a:	12 c0       	rjmp	.+36     	; 0x5990 <__fixunssfsi+0x46>
    596c:	b1 30       	cpi	r27, 0x01	; 1
    596e:	81 f0       	breq	.+32     	; 0x5990 <__fixunssfsi+0x46>
    5970:	9f d0       	rcall	.+318    	; 0x5ab0 <__fp_zero>
    5972:	b1 e0       	ldi	r27, 0x01	; 1
    5974:	08 95       	ret
    5976:	9c c0       	rjmp	.+312    	; 0x5ab0 <__fp_zero>
    5978:	67 2f       	mov	r22, r23
    597a:	78 2f       	mov	r23, r24
    597c:	88 27       	eor	r24, r24
    597e:	b8 5f       	subi	r27, 0xF8	; 248
    5980:	39 f0       	breq	.+14     	; 0x5990 <__fixunssfsi+0x46>
    5982:	b9 3f       	cpi	r27, 0xF9	; 249
    5984:	cc f3       	brlt	.-14     	; 0x5978 <__fixunssfsi+0x2e>
    5986:	86 95       	lsr	r24
    5988:	77 95       	ror	r23
    598a:	67 95       	ror	r22
    598c:	b3 95       	inc	r27
    598e:	d9 f7       	brne	.-10     	; 0x5986 <__fixunssfsi+0x3c>
    5990:	3e f4       	brtc	.+14     	; 0x59a0 <__fixunssfsi+0x56>
    5992:	90 95       	com	r25
    5994:	80 95       	com	r24
    5996:	70 95       	com	r23
    5998:	61 95       	neg	r22
    599a:	7f 4f       	sbci	r23, 0xFF	; 255
    599c:	8f 4f       	sbci	r24, 0xFF	; 255
    599e:	9f 4f       	sbci	r25, 0xFF	; 255
    59a0:	08 95       	ret

000059a2 <__floatunsisf>:
    59a2:	e8 94       	clt
    59a4:	09 c0       	rjmp	.+18     	; 0x59b8 <__floatsisf+0x12>

000059a6 <__floatsisf>:
    59a6:	97 fb       	bst	r25, 7
    59a8:	3e f4       	brtc	.+14     	; 0x59b8 <__floatsisf+0x12>
    59aa:	90 95       	com	r25
    59ac:	80 95       	com	r24
    59ae:	70 95       	com	r23
    59b0:	61 95       	neg	r22
    59b2:	7f 4f       	sbci	r23, 0xFF	; 255
    59b4:	8f 4f       	sbci	r24, 0xFF	; 255
    59b6:	9f 4f       	sbci	r25, 0xFF	; 255
    59b8:	99 23       	and	r25, r25
    59ba:	a9 f0       	breq	.+42     	; 0x59e6 <__floatsisf+0x40>
    59bc:	f9 2f       	mov	r31, r25
    59be:	96 e9       	ldi	r25, 0x96	; 150
    59c0:	bb 27       	eor	r27, r27
    59c2:	93 95       	inc	r25
    59c4:	f6 95       	lsr	r31
    59c6:	87 95       	ror	r24
    59c8:	77 95       	ror	r23
    59ca:	67 95       	ror	r22
    59cc:	b7 95       	ror	r27
    59ce:	f1 11       	cpse	r31, r1
    59d0:	f8 cf       	rjmp	.-16     	; 0x59c2 <__floatsisf+0x1c>
    59d2:	fa f4       	brpl	.+62     	; 0x5a12 <__floatsisf+0x6c>
    59d4:	bb 0f       	add	r27, r27
    59d6:	11 f4       	brne	.+4      	; 0x59dc <__floatsisf+0x36>
    59d8:	60 ff       	sbrs	r22, 0
    59da:	1b c0       	rjmp	.+54     	; 0x5a12 <__floatsisf+0x6c>
    59dc:	6f 5f       	subi	r22, 0xFF	; 255
    59de:	7f 4f       	sbci	r23, 0xFF	; 255
    59e0:	8f 4f       	sbci	r24, 0xFF	; 255
    59e2:	9f 4f       	sbci	r25, 0xFF	; 255
    59e4:	16 c0       	rjmp	.+44     	; 0x5a12 <__floatsisf+0x6c>
    59e6:	88 23       	and	r24, r24
    59e8:	11 f0       	breq	.+4      	; 0x59ee <__floatsisf+0x48>
    59ea:	96 e9       	ldi	r25, 0x96	; 150
    59ec:	11 c0       	rjmp	.+34     	; 0x5a10 <__floatsisf+0x6a>
    59ee:	77 23       	and	r23, r23
    59f0:	21 f0       	breq	.+8      	; 0x59fa <__floatsisf+0x54>
    59f2:	9e e8       	ldi	r25, 0x8E	; 142
    59f4:	87 2f       	mov	r24, r23
    59f6:	76 2f       	mov	r23, r22
    59f8:	05 c0       	rjmp	.+10     	; 0x5a04 <__floatsisf+0x5e>
    59fa:	66 23       	and	r22, r22
    59fc:	71 f0       	breq	.+28     	; 0x5a1a <__floatsisf+0x74>
    59fe:	96 e8       	ldi	r25, 0x86	; 134
    5a00:	86 2f       	mov	r24, r22
    5a02:	70 e0       	ldi	r23, 0x00	; 0
    5a04:	60 e0       	ldi	r22, 0x00	; 0
    5a06:	2a f0       	brmi	.+10     	; 0x5a12 <__floatsisf+0x6c>
    5a08:	9a 95       	dec	r25
    5a0a:	66 0f       	add	r22, r22
    5a0c:	77 1f       	adc	r23, r23
    5a0e:	88 1f       	adc	r24, r24
    5a10:	da f7       	brpl	.-10     	; 0x5a08 <__floatsisf+0x62>
    5a12:	88 0f       	add	r24, r24
    5a14:	96 95       	lsr	r25
    5a16:	87 95       	ror	r24
    5a18:	97 f9       	bld	r25, 7
    5a1a:	08 95       	ret

00005a1c <__fp_inf>:
    5a1c:	97 f9       	bld	r25, 7
    5a1e:	9f 67       	ori	r25, 0x7F	; 127
    5a20:	80 e8       	ldi	r24, 0x80	; 128
    5a22:	70 e0       	ldi	r23, 0x00	; 0
    5a24:	60 e0       	ldi	r22, 0x00	; 0
    5a26:	08 95       	ret

00005a28 <__fp_nan>:
    5a28:	9f ef       	ldi	r25, 0xFF	; 255
    5a2a:	80 ec       	ldi	r24, 0xC0	; 192
    5a2c:	08 95       	ret

00005a2e <__fp_pscA>:
    5a2e:	00 24       	eor	r0, r0
    5a30:	0a 94       	dec	r0
    5a32:	16 16       	cp	r1, r22
    5a34:	17 06       	cpc	r1, r23
    5a36:	18 06       	cpc	r1, r24
    5a38:	09 06       	cpc	r0, r25
    5a3a:	08 95       	ret

00005a3c <__fp_pscB>:
    5a3c:	00 24       	eor	r0, r0
    5a3e:	0a 94       	dec	r0
    5a40:	12 16       	cp	r1, r18
    5a42:	13 06       	cpc	r1, r19
    5a44:	14 06       	cpc	r1, r20
    5a46:	05 06       	cpc	r0, r21
    5a48:	08 95       	ret

00005a4a <__fp_round>:
    5a4a:	09 2e       	mov	r0, r25
    5a4c:	03 94       	inc	r0
    5a4e:	00 0c       	add	r0, r0
    5a50:	11 f4       	brne	.+4      	; 0x5a56 <__fp_round+0xc>
    5a52:	88 23       	and	r24, r24
    5a54:	52 f0       	brmi	.+20     	; 0x5a6a <__fp_round+0x20>
    5a56:	bb 0f       	add	r27, r27
    5a58:	40 f4       	brcc	.+16     	; 0x5a6a <__fp_round+0x20>
    5a5a:	bf 2b       	or	r27, r31
    5a5c:	11 f4       	brne	.+4      	; 0x5a62 <__fp_round+0x18>
    5a5e:	60 ff       	sbrs	r22, 0
    5a60:	04 c0       	rjmp	.+8      	; 0x5a6a <__fp_round+0x20>
    5a62:	6f 5f       	subi	r22, 0xFF	; 255
    5a64:	7f 4f       	sbci	r23, 0xFF	; 255
    5a66:	8f 4f       	sbci	r24, 0xFF	; 255
    5a68:	9f 4f       	sbci	r25, 0xFF	; 255
    5a6a:	08 95       	ret

00005a6c <__fp_split3>:
    5a6c:	57 fd       	sbrc	r21, 7
    5a6e:	90 58       	subi	r25, 0x80	; 128
    5a70:	44 0f       	add	r20, r20
    5a72:	55 1f       	adc	r21, r21
    5a74:	59 f0       	breq	.+22     	; 0x5a8c <__fp_splitA+0x10>
    5a76:	5f 3f       	cpi	r21, 0xFF	; 255
    5a78:	71 f0       	breq	.+28     	; 0x5a96 <__fp_splitA+0x1a>
    5a7a:	47 95       	ror	r20

00005a7c <__fp_splitA>:
    5a7c:	88 0f       	add	r24, r24
    5a7e:	97 fb       	bst	r25, 7
    5a80:	99 1f       	adc	r25, r25
    5a82:	61 f0       	breq	.+24     	; 0x5a9c <__fp_splitA+0x20>
    5a84:	9f 3f       	cpi	r25, 0xFF	; 255
    5a86:	79 f0       	breq	.+30     	; 0x5aa6 <__fp_splitA+0x2a>
    5a88:	87 95       	ror	r24
    5a8a:	08 95       	ret
    5a8c:	12 16       	cp	r1, r18
    5a8e:	13 06       	cpc	r1, r19
    5a90:	14 06       	cpc	r1, r20
    5a92:	55 1f       	adc	r21, r21
    5a94:	f2 cf       	rjmp	.-28     	; 0x5a7a <__fp_split3+0xe>
    5a96:	46 95       	lsr	r20
    5a98:	f1 df       	rcall	.-30     	; 0x5a7c <__fp_splitA>
    5a9a:	08 c0       	rjmp	.+16     	; 0x5aac <__fp_splitA+0x30>
    5a9c:	16 16       	cp	r1, r22
    5a9e:	17 06       	cpc	r1, r23
    5aa0:	18 06       	cpc	r1, r24
    5aa2:	99 1f       	adc	r25, r25
    5aa4:	f1 cf       	rjmp	.-30     	; 0x5a88 <__fp_splitA+0xc>
    5aa6:	86 95       	lsr	r24
    5aa8:	71 05       	cpc	r23, r1
    5aaa:	61 05       	cpc	r22, r1
    5aac:	08 94       	sec
    5aae:	08 95       	ret

00005ab0 <__fp_zero>:
    5ab0:	e8 94       	clt

00005ab2 <__fp_szero>:
    5ab2:	bb 27       	eor	r27, r27
    5ab4:	66 27       	eor	r22, r22
    5ab6:	77 27       	eor	r23, r23
    5ab8:	cb 01       	movw	r24, r22
    5aba:	97 f9       	bld	r25, 7
    5abc:	08 95       	ret

00005abe <__mulsf3>:
    5abe:	0b d0       	rcall	.+22     	; 0x5ad6 <__mulsf3x>
    5ac0:	c4 cf       	rjmp	.-120    	; 0x5a4a <__fp_round>
    5ac2:	b5 df       	rcall	.-150    	; 0x5a2e <__fp_pscA>
    5ac4:	28 f0       	brcs	.+10     	; 0x5ad0 <__mulsf3+0x12>
    5ac6:	ba df       	rcall	.-140    	; 0x5a3c <__fp_pscB>
    5ac8:	18 f0       	brcs	.+6      	; 0x5ad0 <__mulsf3+0x12>
    5aca:	95 23       	and	r25, r21
    5acc:	09 f0       	breq	.+2      	; 0x5ad0 <__mulsf3+0x12>
    5ace:	a6 cf       	rjmp	.-180    	; 0x5a1c <__fp_inf>
    5ad0:	ab cf       	rjmp	.-170    	; 0x5a28 <__fp_nan>
    5ad2:	11 24       	eor	r1, r1
    5ad4:	ee cf       	rjmp	.-36     	; 0x5ab2 <__fp_szero>

00005ad6 <__mulsf3x>:
    5ad6:	ca df       	rcall	.-108    	; 0x5a6c <__fp_split3>
    5ad8:	a0 f3       	brcs	.-24     	; 0x5ac2 <__mulsf3+0x4>

00005ada <__mulsf3_pse>:
    5ada:	95 9f       	mul	r25, r21
    5adc:	d1 f3       	breq	.-12     	; 0x5ad2 <__mulsf3+0x14>
    5ade:	95 0f       	add	r25, r21
    5ae0:	50 e0       	ldi	r21, 0x00	; 0
    5ae2:	55 1f       	adc	r21, r21
    5ae4:	62 9f       	mul	r22, r18
    5ae6:	f0 01       	movw	r30, r0
    5ae8:	72 9f       	mul	r23, r18
    5aea:	bb 27       	eor	r27, r27
    5aec:	f0 0d       	add	r31, r0
    5aee:	b1 1d       	adc	r27, r1
    5af0:	63 9f       	mul	r22, r19
    5af2:	aa 27       	eor	r26, r26
    5af4:	f0 0d       	add	r31, r0
    5af6:	b1 1d       	adc	r27, r1
    5af8:	aa 1f       	adc	r26, r26
    5afa:	64 9f       	mul	r22, r20
    5afc:	66 27       	eor	r22, r22
    5afe:	b0 0d       	add	r27, r0
    5b00:	a1 1d       	adc	r26, r1
    5b02:	66 1f       	adc	r22, r22
    5b04:	82 9f       	mul	r24, r18
    5b06:	22 27       	eor	r18, r18
    5b08:	b0 0d       	add	r27, r0
    5b0a:	a1 1d       	adc	r26, r1
    5b0c:	62 1f       	adc	r22, r18
    5b0e:	73 9f       	mul	r23, r19
    5b10:	b0 0d       	add	r27, r0
    5b12:	a1 1d       	adc	r26, r1
    5b14:	62 1f       	adc	r22, r18
    5b16:	83 9f       	mul	r24, r19
    5b18:	a0 0d       	add	r26, r0
    5b1a:	61 1d       	adc	r22, r1
    5b1c:	22 1f       	adc	r18, r18
    5b1e:	74 9f       	mul	r23, r20
    5b20:	33 27       	eor	r19, r19
    5b22:	a0 0d       	add	r26, r0
    5b24:	61 1d       	adc	r22, r1
    5b26:	23 1f       	adc	r18, r19
    5b28:	84 9f       	mul	r24, r20
    5b2a:	60 0d       	add	r22, r0
    5b2c:	21 1d       	adc	r18, r1
    5b2e:	82 2f       	mov	r24, r18
    5b30:	76 2f       	mov	r23, r22
    5b32:	6a 2f       	mov	r22, r26
    5b34:	11 24       	eor	r1, r1
    5b36:	9f 57       	subi	r25, 0x7F	; 127
    5b38:	50 40       	sbci	r21, 0x00	; 0
    5b3a:	8a f0       	brmi	.+34     	; 0x5b5e <__mulsf3_pse+0x84>
    5b3c:	e1 f0       	breq	.+56     	; 0x5b76 <__mulsf3_pse+0x9c>
    5b3e:	88 23       	and	r24, r24
    5b40:	4a f0       	brmi	.+18     	; 0x5b54 <__mulsf3_pse+0x7a>
    5b42:	ee 0f       	add	r30, r30
    5b44:	ff 1f       	adc	r31, r31
    5b46:	bb 1f       	adc	r27, r27
    5b48:	66 1f       	adc	r22, r22
    5b4a:	77 1f       	adc	r23, r23
    5b4c:	88 1f       	adc	r24, r24
    5b4e:	91 50       	subi	r25, 0x01	; 1
    5b50:	50 40       	sbci	r21, 0x00	; 0
    5b52:	a9 f7       	brne	.-22     	; 0x5b3e <__mulsf3_pse+0x64>
    5b54:	9e 3f       	cpi	r25, 0xFE	; 254
    5b56:	51 05       	cpc	r21, r1
    5b58:	70 f0       	brcs	.+28     	; 0x5b76 <__mulsf3_pse+0x9c>
    5b5a:	60 cf       	rjmp	.-320    	; 0x5a1c <__fp_inf>
    5b5c:	aa cf       	rjmp	.-172    	; 0x5ab2 <__fp_szero>
    5b5e:	5f 3f       	cpi	r21, 0xFF	; 255
    5b60:	ec f3       	brlt	.-6      	; 0x5b5c <__mulsf3_pse+0x82>
    5b62:	98 3e       	cpi	r25, 0xE8	; 232
    5b64:	dc f3       	brlt	.-10     	; 0x5b5c <__mulsf3_pse+0x82>
    5b66:	86 95       	lsr	r24
    5b68:	77 95       	ror	r23
    5b6a:	67 95       	ror	r22
    5b6c:	b7 95       	ror	r27
    5b6e:	f7 95       	ror	r31
    5b70:	e7 95       	ror	r30
    5b72:	9f 5f       	subi	r25, 0xFF	; 255
    5b74:	c1 f7       	brne	.-16     	; 0x5b66 <__mulsf3_pse+0x8c>
    5b76:	fe 2b       	or	r31, r30
    5b78:	88 0f       	add	r24, r24
    5b7a:	91 1d       	adc	r25, r1
    5b7c:	96 95       	lsr	r25
    5b7e:	87 95       	ror	r24
    5b80:	97 f9       	bld	r25, 7
    5b82:	08 95       	ret

00005b84 <vfprintf>:
    5b84:	2f 92       	push	r2
    5b86:	3f 92       	push	r3
    5b88:	4f 92       	push	r4
    5b8a:	5f 92       	push	r5
    5b8c:	6f 92       	push	r6
    5b8e:	7f 92       	push	r7
    5b90:	8f 92       	push	r8
    5b92:	9f 92       	push	r9
    5b94:	af 92       	push	r10
    5b96:	bf 92       	push	r11
    5b98:	cf 92       	push	r12
    5b9a:	df 92       	push	r13
    5b9c:	ef 92       	push	r14
    5b9e:	ff 92       	push	r15
    5ba0:	0f 93       	push	r16
    5ba2:	1f 93       	push	r17
    5ba4:	cf 93       	push	r28
    5ba6:	df 93       	push	r29
    5ba8:	cd b7       	in	r28, 0x3d	; 61
    5baa:	de b7       	in	r29, 0x3e	; 62
    5bac:	60 97       	sbiw	r28, 0x10	; 16
    5bae:	0f b6       	in	r0, 0x3f	; 63
    5bb0:	f8 94       	cli
    5bb2:	de bf       	out	0x3e, r29	; 62
    5bb4:	0f be       	out	0x3f, r0	; 63
    5bb6:	cd bf       	out	0x3d, r28	; 61
    5bb8:	7c 01       	movw	r14, r24
    5bba:	1b 01       	movw	r2, r22
    5bbc:	6a 01       	movw	r12, r20
    5bbe:	fc 01       	movw	r30, r24
    5bc0:	17 82       	std	Z+7, r1	; 0x07
    5bc2:	16 82       	std	Z+6, r1	; 0x06
    5bc4:	83 81       	ldd	r24, Z+3	; 0x03
    5bc6:	81 ff       	sbrs	r24, 1
    5bc8:	2a c3       	rjmp	.+1620   	; 0x621e <vfprintf+0x69a>
    5bca:	9e 01       	movw	r18, r28
    5bcc:	2f 5f       	subi	r18, 0xFF	; 255
    5bce:	3f 4f       	sbci	r19, 0xFF	; 255
    5bd0:	39 01       	movw	r6, r18
    5bd2:	f7 01       	movw	r30, r14
    5bd4:	93 81       	ldd	r25, Z+3	; 0x03
    5bd6:	f1 01       	movw	r30, r2
    5bd8:	93 fd       	sbrc	r25, 3
    5bda:	85 91       	lpm	r24, Z+
    5bdc:	93 ff       	sbrs	r25, 3
    5bde:	81 91       	ld	r24, Z+
    5be0:	1f 01       	movw	r2, r30
    5be2:	88 23       	and	r24, r24
    5be4:	09 f4       	brne	.+2      	; 0x5be8 <vfprintf+0x64>
    5be6:	17 c3       	rjmp	.+1582   	; 0x6216 <vfprintf+0x692>
    5be8:	85 32       	cpi	r24, 0x25	; 37
    5bea:	39 f4       	brne	.+14     	; 0x5bfa <vfprintf+0x76>
    5bec:	93 fd       	sbrc	r25, 3
    5bee:	85 91       	lpm	r24, Z+
    5bf0:	93 ff       	sbrs	r25, 3
    5bf2:	81 91       	ld	r24, Z+
    5bf4:	1f 01       	movw	r2, r30
    5bf6:	85 32       	cpi	r24, 0x25	; 37
    5bf8:	31 f4       	brne	.+12     	; 0x5c06 <vfprintf+0x82>
    5bfa:	b7 01       	movw	r22, r14
    5bfc:	90 e0       	ldi	r25, 0x00	; 0
    5bfe:	37 d6       	rcall	.+3182   	; 0x686e <fputc>
    5c00:	56 01       	movw	r10, r12
    5c02:	65 01       	movw	r12, r10
    5c04:	e6 cf       	rjmp	.-52     	; 0x5bd2 <vfprintf+0x4e>
    5c06:	10 e0       	ldi	r17, 0x00	; 0
    5c08:	51 2c       	mov	r5, r1
    5c0a:	91 2c       	mov	r9, r1
    5c0c:	ff e1       	ldi	r31, 0x1F	; 31
    5c0e:	f9 15       	cp	r31, r9
    5c10:	d8 f0       	brcs	.+54     	; 0x5c48 <vfprintf+0xc4>
    5c12:	8b 32       	cpi	r24, 0x2B	; 43
    5c14:	79 f0       	breq	.+30     	; 0x5c34 <vfprintf+0xb0>
    5c16:	38 f4       	brcc	.+14     	; 0x5c26 <vfprintf+0xa2>
    5c18:	80 32       	cpi	r24, 0x20	; 32
    5c1a:	79 f0       	breq	.+30     	; 0x5c3a <vfprintf+0xb6>
    5c1c:	83 32       	cpi	r24, 0x23	; 35
    5c1e:	a1 f4       	brne	.+40     	; 0x5c48 <vfprintf+0xc4>
    5c20:	f9 2d       	mov	r31, r9
    5c22:	f0 61       	ori	r31, 0x10	; 16
    5c24:	2e c0       	rjmp	.+92     	; 0x5c82 <vfprintf+0xfe>
    5c26:	8d 32       	cpi	r24, 0x2D	; 45
    5c28:	61 f0       	breq	.+24     	; 0x5c42 <vfprintf+0xbe>
    5c2a:	80 33       	cpi	r24, 0x30	; 48
    5c2c:	69 f4       	brne	.+26     	; 0x5c48 <vfprintf+0xc4>
    5c2e:	29 2d       	mov	r18, r9
    5c30:	21 60       	ori	r18, 0x01	; 1
    5c32:	2d c0       	rjmp	.+90     	; 0x5c8e <vfprintf+0x10a>
    5c34:	39 2d       	mov	r19, r9
    5c36:	32 60       	ori	r19, 0x02	; 2
    5c38:	93 2e       	mov	r9, r19
    5c3a:	89 2d       	mov	r24, r9
    5c3c:	84 60       	ori	r24, 0x04	; 4
    5c3e:	98 2e       	mov	r9, r24
    5c40:	2a c0       	rjmp	.+84     	; 0x5c96 <vfprintf+0x112>
    5c42:	e9 2d       	mov	r30, r9
    5c44:	e8 60       	ori	r30, 0x08	; 8
    5c46:	15 c0       	rjmp	.+42     	; 0x5c72 <vfprintf+0xee>
    5c48:	97 fc       	sbrc	r9, 7
    5c4a:	2d c0       	rjmp	.+90     	; 0x5ca6 <vfprintf+0x122>
    5c4c:	20 ed       	ldi	r18, 0xD0	; 208
    5c4e:	28 0f       	add	r18, r24
    5c50:	2a 30       	cpi	r18, 0x0A	; 10
    5c52:	88 f4       	brcc	.+34     	; 0x5c76 <vfprintf+0xf2>
    5c54:	96 fe       	sbrs	r9, 6
    5c56:	06 c0       	rjmp	.+12     	; 0x5c64 <vfprintf+0xe0>
    5c58:	3a e0       	ldi	r19, 0x0A	; 10
    5c5a:	13 9f       	mul	r17, r19
    5c5c:	20 0d       	add	r18, r0
    5c5e:	11 24       	eor	r1, r1
    5c60:	12 2f       	mov	r17, r18
    5c62:	19 c0       	rjmp	.+50     	; 0x5c96 <vfprintf+0x112>
    5c64:	8a e0       	ldi	r24, 0x0A	; 10
    5c66:	58 9e       	mul	r5, r24
    5c68:	20 0d       	add	r18, r0
    5c6a:	11 24       	eor	r1, r1
    5c6c:	52 2e       	mov	r5, r18
    5c6e:	e9 2d       	mov	r30, r9
    5c70:	e0 62       	ori	r30, 0x20	; 32
    5c72:	9e 2e       	mov	r9, r30
    5c74:	10 c0       	rjmp	.+32     	; 0x5c96 <vfprintf+0x112>
    5c76:	8e 32       	cpi	r24, 0x2E	; 46
    5c78:	31 f4       	brne	.+12     	; 0x5c86 <vfprintf+0x102>
    5c7a:	96 fc       	sbrc	r9, 6
    5c7c:	cc c2       	rjmp	.+1432   	; 0x6216 <vfprintf+0x692>
    5c7e:	f9 2d       	mov	r31, r9
    5c80:	f0 64       	ori	r31, 0x40	; 64
    5c82:	9f 2e       	mov	r9, r31
    5c84:	08 c0       	rjmp	.+16     	; 0x5c96 <vfprintf+0x112>
    5c86:	8c 36       	cpi	r24, 0x6C	; 108
    5c88:	21 f4       	brne	.+8      	; 0x5c92 <vfprintf+0x10e>
    5c8a:	29 2d       	mov	r18, r9
    5c8c:	20 68       	ori	r18, 0x80	; 128
    5c8e:	92 2e       	mov	r9, r18
    5c90:	02 c0       	rjmp	.+4      	; 0x5c96 <vfprintf+0x112>
    5c92:	88 36       	cpi	r24, 0x68	; 104
    5c94:	41 f4       	brne	.+16     	; 0x5ca6 <vfprintf+0x122>
    5c96:	f1 01       	movw	r30, r2
    5c98:	93 fd       	sbrc	r25, 3
    5c9a:	85 91       	lpm	r24, Z+
    5c9c:	93 ff       	sbrs	r25, 3
    5c9e:	81 91       	ld	r24, Z+
    5ca0:	1f 01       	movw	r2, r30
    5ca2:	81 11       	cpse	r24, r1
    5ca4:	b3 cf       	rjmp	.-154    	; 0x5c0c <vfprintf+0x88>
    5ca6:	9b eb       	ldi	r25, 0xBB	; 187
    5ca8:	98 0f       	add	r25, r24
    5caa:	93 30       	cpi	r25, 0x03	; 3
    5cac:	20 f4       	brcc	.+8      	; 0x5cb6 <vfprintf+0x132>
    5cae:	99 2d       	mov	r25, r9
    5cb0:	90 61       	ori	r25, 0x10	; 16
    5cb2:	80 5e       	subi	r24, 0xE0	; 224
    5cb4:	07 c0       	rjmp	.+14     	; 0x5cc4 <vfprintf+0x140>
    5cb6:	9b e9       	ldi	r25, 0x9B	; 155
    5cb8:	98 0f       	add	r25, r24
    5cba:	93 30       	cpi	r25, 0x03	; 3
    5cbc:	08 f0       	brcs	.+2      	; 0x5cc0 <vfprintf+0x13c>
    5cbe:	59 c1       	rjmp	.+690    	; 0x5f72 <vfprintf+0x3ee>
    5cc0:	99 2d       	mov	r25, r9
    5cc2:	9f 7e       	andi	r25, 0xEF	; 239
    5cc4:	96 ff       	sbrs	r25, 6
    5cc6:	16 e0       	ldi	r17, 0x06	; 6
    5cc8:	9f 73       	andi	r25, 0x3F	; 63
    5cca:	99 2e       	mov	r9, r25
    5ccc:	85 36       	cpi	r24, 0x65	; 101
    5cce:	19 f4       	brne	.+6      	; 0x5cd6 <vfprintf+0x152>
    5cd0:	90 64       	ori	r25, 0x40	; 64
    5cd2:	99 2e       	mov	r9, r25
    5cd4:	08 c0       	rjmp	.+16     	; 0x5ce6 <vfprintf+0x162>
    5cd6:	86 36       	cpi	r24, 0x66	; 102
    5cd8:	21 f4       	brne	.+8      	; 0x5ce2 <vfprintf+0x15e>
    5cda:	39 2f       	mov	r19, r25
    5cdc:	30 68       	ori	r19, 0x80	; 128
    5cde:	93 2e       	mov	r9, r19
    5ce0:	02 c0       	rjmp	.+4      	; 0x5ce6 <vfprintf+0x162>
    5ce2:	11 11       	cpse	r17, r1
    5ce4:	11 50       	subi	r17, 0x01	; 1
    5ce6:	97 fe       	sbrs	r9, 7
    5ce8:	07 c0       	rjmp	.+14     	; 0x5cf8 <vfprintf+0x174>
    5cea:	1c 33       	cpi	r17, 0x3C	; 60
    5cec:	50 f4       	brcc	.+20     	; 0x5d02 <vfprintf+0x17e>
    5cee:	44 24       	eor	r4, r4
    5cf0:	43 94       	inc	r4
    5cf2:	41 0e       	add	r4, r17
    5cf4:	27 e0       	ldi	r18, 0x07	; 7
    5cf6:	0b c0       	rjmp	.+22     	; 0x5d0e <vfprintf+0x18a>
    5cf8:	18 30       	cpi	r17, 0x08	; 8
    5cfa:	38 f0       	brcs	.+14     	; 0x5d0a <vfprintf+0x186>
    5cfc:	27 e0       	ldi	r18, 0x07	; 7
    5cfe:	17 e0       	ldi	r17, 0x07	; 7
    5d00:	05 c0       	rjmp	.+10     	; 0x5d0c <vfprintf+0x188>
    5d02:	27 e0       	ldi	r18, 0x07	; 7
    5d04:	9c e3       	ldi	r25, 0x3C	; 60
    5d06:	49 2e       	mov	r4, r25
    5d08:	02 c0       	rjmp	.+4      	; 0x5d0e <vfprintf+0x18a>
    5d0a:	21 2f       	mov	r18, r17
    5d0c:	41 2c       	mov	r4, r1
    5d0e:	56 01       	movw	r10, r12
    5d10:	84 e0       	ldi	r24, 0x04	; 4
    5d12:	a8 0e       	add	r10, r24
    5d14:	b1 1c       	adc	r11, r1
    5d16:	f6 01       	movw	r30, r12
    5d18:	60 81       	ld	r22, Z
    5d1a:	71 81       	ldd	r23, Z+1	; 0x01
    5d1c:	82 81       	ldd	r24, Z+2	; 0x02
    5d1e:	93 81       	ldd	r25, Z+3	; 0x03
    5d20:	04 2d       	mov	r16, r4
    5d22:	a3 01       	movw	r20, r6
    5d24:	57 d4       	rcall	.+2222   	; 0x65d4 <__ftoa_engine>
    5d26:	6c 01       	movw	r12, r24
    5d28:	f9 81       	ldd	r31, Y+1	; 0x01
    5d2a:	fc 87       	std	Y+12, r31	; 0x0c
    5d2c:	f0 ff       	sbrs	r31, 0
    5d2e:	02 c0       	rjmp	.+4      	; 0x5d34 <vfprintf+0x1b0>
    5d30:	f3 ff       	sbrs	r31, 3
    5d32:	06 c0       	rjmp	.+12     	; 0x5d40 <vfprintf+0x1bc>
    5d34:	91 fc       	sbrc	r9, 1
    5d36:	06 c0       	rjmp	.+12     	; 0x5d44 <vfprintf+0x1c0>
    5d38:	92 fe       	sbrs	r9, 2
    5d3a:	06 c0       	rjmp	.+12     	; 0x5d48 <vfprintf+0x1c4>
    5d3c:	00 e2       	ldi	r16, 0x20	; 32
    5d3e:	05 c0       	rjmp	.+10     	; 0x5d4a <vfprintf+0x1c6>
    5d40:	0d e2       	ldi	r16, 0x2D	; 45
    5d42:	03 c0       	rjmp	.+6      	; 0x5d4a <vfprintf+0x1c6>
    5d44:	0b e2       	ldi	r16, 0x2B	; 43
    5d46:	01 c0       	rjmp	.+2      	; 0x5d4a <vfprintf+0x1c6>
    5d48:	00 e0       	ldi	r16, 0x00	; 0
    5d4a:	8c 85       	ldd	r24, Y+12	; 0x0c
    5d4c:	8c 70       	andi	r24, 0x0C	; 12
    5d4e:	19 f0       	breq	.+6      	; 0x5d56 <vfprintf+0x1d2>
    5d50:	01 11       	cpse	r16, r1
    5d52:	43 c2       	rjmp	.+1158   	; 0x61da <vfprintf+0x656>
    5d54:	80 c2       	rjmp	.+1280   	; 0x6256 <vfprintf+0x6d2>
    5d56:	97 fe       	sbrs	r9, 7
    5d58:	10 c0       	rjmp	.+32     	; 0x5d7a <vfprintf+0x1f6>
    5d5a:	4c 0c       	add	r4, r12
    5d5c:	fc 85       	ldd	r31, Y+12	; 0x0c
    5d5e:	f4 ff       	sbrs	r31, 4
    5d60:	04 c0       	rjmp	.+8      	; 0x5d6a <vfprintf+0x1e6>
    5d62:	8a 81       	ldd	r24, Y+2	; 0x02
    5d64:	81 33       	cpi	r24, 0x31	; 49
    5d66:	09 f4       	brne	.+2      	; 0x5d6a <vfprintf+0x1e6>
    5d68:	4a 94       	dec	r4
    5d6a:	14 14       	cp	r1, r4
    5d6c:	74 f5       	brge	.+92     	; 0x5dca <vfprintf+0x246>
    5d6e:	28 e0       	ldi	r18, 0x08	; 8
    5d70:	24 15       	cp	r18, r4
    5d72:	78 f5       	brcc	.+94     	; 0x5dd2 <vfprintf+0x24e>
    5d74:	88 e0       	ldi	r24, 0x08	; 8
    5d76:	48 2e       	mov	r4, r24
    5d78:	2c c0       	rjmp	.+88     	; 0x5dd2 <vfprintf+0x24e>
    5d7a:	96 fc       	sbrc	r9, 6
    5d7c:	2a c0       	rjmp	.+84     	; 0x5dd2 <vfprintf+0x24e>
    5d7e:	81 2f       	mov	r24, r17
    5d80:	90 e0       	ldi	r25, 0x00	; 0
    5d82:	8c 15       	cp	r24, r12
    5d84:	9d 05       	cpc	r25, r13
    5d86:	9c f0       	brlt	.+38     	; 0x5dae <vfprintf+0x22a>
    5d88:	3c ef       	ldi	r19, 0xFC	; 252
    5d8a:	c3 16       	cp	r12, r19
    5d8c:	3f ef       	ldi	r19, 0xFF	; 255
    5d8e:	d3 06       	cpc	r13, r19
    5d90:	74 f0       	brlt	.+28     	; 0x5dae <vfprintf+0x22a>
    5d92:	89 2d       	mov	r24, r9
    5d94:	80 68       	ori	r24, 0x80	; 128
    5d96:	98 2e       	mov	r9, r24
    5d98:	0a c0       	rjmp	.+20     	; 0x5dae <vfprintf+0x22a>
    5d9a:	e2 e0       	ldi	r30, 0x02	; 2
    5d9c:	f0 e0       	ldi	r31, 0x00	; 0
    5d9e:	ec 0f       	add	r30, r28
    5da0:	fd 1f       	adc	r31, r29
    5da2:	e1 0f       	add	r30, r17
    5da4:	f1 1d       	adc	r31, r1
    5da6:	80 81       	ld	r24, Z
    5da8:	80 33       	cpi	r24, 0x30	; 48
    5daa:	19 f4       	brne	.+6      	; 0x5db2 <vfprintf+0x22e>
    5dac:	11 50       	subi	r17, 0x01	; 1
    5dae:	11 11       	cpse	r17, r1
    5db0:	f4 cf       	rjmp	.-24     	; 0x5d9a <vfprintf+0x216>
    5db2:	97 fe       	sbrs	r9, 7
    5db4:	0e c0       	rjmp	.+28     	; 0x5dd2 <vfprintf+0x24e>
    5db6:	44 24       	eor	r4, r4
    5db8:	43 94       	inc	r4
    5dba:	41 0e       	add	r4, r17
    5dbc:	81 2f       	mov	r24, r17
    5dbe:	90 e0       	ldi	r25, 0x00	; 0
    5dc0:	c8 16       	cp	r12, r24
    5dc2:	d9 06       	cpc	r13, r25
    5dc4:	2c f4       	brge	.+10     	; 0x5dd0 <vfprintf+0x24c>
    5dc6:	1c 19       	sub	r17, r12
    5dc8:	04 c0       	rjmp	.+8      	; 0x5dd2 <vfprintf+0x24e>
    5dca:	44 24       	eor	r4, r4
    5dcc:	43 94       	inc	r4
    5dce:	01 c0       	rjmp	.+2      	; 0x5dd2 <vfprintf+0x24e>
    5dd0:	10 e0       	ldi	r17, 0x00	; 0
    5dd2:	97 fe       	sbrs	r9, 7
    5dd4:	06 c0       	rjmp	.+12     	; 0x5de2 <vfprintf+0x25e>
    5dd6:	1c 14       	cp	r1, r12
    5dd8:	1d 04       	cpc	r1, r13
    5dda:	34 f4       	brge	.+12     	; 0x5de8 <vfprintf+0x264>
    5ddc:	c6 01       	movw	r24, r12
    5dde:	01 96       	adiw	r24, 0x01	; 1
    5de0:	05 c0       	rjmp	.+10     	; 0x5dec <vfprintf+0x268>
    5de2:	85 e0       	ldi	r24, 0x05	; 5
    5de4:	90 e0       	ldi	r25, 0x00	; 0
    5de6:	02 c0       	rjmp	.+4      	; 0x5dec <vfprintf+0x268>
    5de8:	81 e0       	ldi	r24, 0x01	; 1
    5dea:	90 e0       	ldi	r25, 0x00	; 0
    5dec:	01 11       	cpse	r16, r1
    5dee:	01 96       	adiw	r24, 0x01	; 1
    5df0:	11 23       	and	r17, r17
    5df2:	31 f0       	breq	.+12     	; 0x5e00 <vfprintf+0x27c>
    5df4:	21 2f       	mov	r18, r17
    5df6:	30 e0       	ldi	r19, 0x00	; 0
    5df8:	2f 5f       	subi	r18, 0xFF	; 255
    5dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    5dfc:	82 0f       	add	r24, r18
    5dfe:	93 1f       	adc	r25, r19
    5e00:	25 2d       	mov	r18, r5
    5e02:	30 e0       	ldi	r19, 0x00	; 0
    5e04:	82 17       	cp	r24, r18
    5e06:	93 07       	cpc	r25, r19
    5e08:	14 f4       	brge	.+4      	; 0x5e0e <vfprintf+0x28a>
    5e0a:	58 1a       	sub	r5, r24
    5e0c:	01 c0       	rjmp	.+2      	; 0x5e10 <vfprintf+0x28c>
    5e0e:	51 2c       	mov	r5, r1
    5e10:	89 2d       	mov	r24, r9
    5e12:	89 70       	andi	r24, 0x09	; 9
    5e14:	41 f4       	brne	.+16     	; 0x5e26 <vfprintf+0x2a2>
    5e16:	55 20       	and	r5, r5
    5e18:	31 f0       	breq	.+12     	; 0x5e26 <vfprintf+0x2a2>
    5e1a:	b7 01       	movw	r22, r14
    5e1c:	80 e2       	ldi	r24, 0x20	; 32
    5e1e:	90 e0       	ldi	r25, 0x00	; 0
    5e20:	26 d5       	rcall	.+2636   	; 0x686e <fputc>
    5e22:	5a 94       	dec	r5
    5e24:	f8 cf       	rjmp	.-16     	; 0x5e16 <vfprintf+0x292>
    5e26:	00 23       	and	r16, r16
    5e28:	21 f0       	breq	.+8      	; 0x5e32 <vfprintf+0x2ae>
    5e2a:	b7 01       	movw	r22, r14
    5e2c:	80 2f       	mov	r24, r16
    5e2e:	90 e0       	ldi	r25, 0x00	; 0
    5e30:	1e d5       	rcall	.+2620   	; 0x686e <fputc>
    5e32:	93 fc       	sbrc	r9, 3
    5e34:	08 c0       	rjmp	.+16     	; 0x5e46 <vfprintf+0x2c2>
    5e36:	55 20       	and	r5, r5
    5e38:	31 f0       	breq	.+12     	; 0x5e46 <vfprintf+0x2c2>
    5e3a:	b7 01       	movw	r22, r14
    5e3c:	80 e3       	ldi	r24, 0x30	; 48
    5e3e:	90 e0       	ldi	r25, 0x00	; 0
    5e40:	16 d5       	rcall	.+2604   	; 0x686e <fputc>
    5e42:	5a 94       	dec	r5
    5e44:	f8 cf       	rjmp	.-16     	; 0x5e36 <vfprintf+0x2b2>
    5e46:	97 fe       	sbrs	r9, 7
    5e48:	4a c0       	rjmp	.+148    	; 0x5ede <vfprintf+0x35a>
    5e4a:	46 01       	movw	r8, r12
    5e4c:	d7 fe       	sbrs	r13, 7
    5e4e:	02 c0       	rjmp	.+4      	; 0x5e54 <vfprintf+0x2d0>
    5e50:	81 2c       	mov	r8, r1
    5e52:	91 2c       	mov	r9, r1
    5e54:	c6 01       	movw	r24, r12
    5e56:	88 19       	sub	r24, r8
    5e58:	99 09       	sbc	r25, r9
    5e5a:	f3 01       	movw	r30, r6
    5e5c:	e8 0f       	add	r30, r24
    5e5e:	f9 1f       	adc	r31, r25
    5e60:	fe 87       	std	Y+14, r31	; 0x0e
    5e62:	ed 87       	std	Y+13, r30	; 0x0d
    5e64:	96 01       	movw	r18, r12
    5e66:	24 19       	sub	r18, r4
    5e68:	31 09       	sbc	r19, r1
    5e6a:	38 8b       	std	Y+16, r19	; 0x10
    5e6c:	2f 87       	std	Y+15, r18	; 0x0f
    5e6e:	01 2f       	mov	r16, r17
    5e70:	10 e0       	ldi	r17, 0x00	; 0
    5e72:	11 95       	neg	r17
    5e74:	01 95       	neg	r16
    5e76:	11 09       	sbc	r17, r1
    5e78:	3f ef       	ldi	r19, 0xFF	; 255
    5e7a:	83 16       	cp	r8, r19
    5e7c:	93 06       	cpc	r9, r19
    5e7e:	21 f4       	brne	.+8      	; 0x5e88 <vfprintf+0x304>
    5e80:	b7 01       	movw	r22, r14
    5e82:	8e e2       	ldi	r24, 0x2E	; 46
    5e84:	90 e0       	ldi	r25, 0x00	; 0
    5e86:	f3 d4       	rcall	.+2534   	; 0x686e <fputc>
    5e88:	c8 14       	cp	r12, r8
    5e8a:	d9 04       	cpc	r13, r9
    5e8c:	4c f0       	brlt	.+18     	; 0x5ea0 <vfprintf+0x31c>
    5e8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e90:	98 89       	ldd	r25, Y+16	; 0x10
    5e92:	88 15       	cp	r24, r8
    5e94:	99 05       	cpc	r25, r9
    5e96:	24 f4       	brge	.+8      	; 0x5ea0 <vfprintf+0x31c>
    5e98:	ed 85       	ldd	r30, Y+13	; 0x0d
    5e9a:	fe 85       	ldd	r31, Y+14	; 0x0e
    5e9c:	81 81       	ldd	r24, Z+1	; 0x01
    5e9e:	01 c0       	rjmp	.+2      	; 0x5ea2 <vfprintf+0x31e>
    5ea0:	80 e3       	ldi	r24, 0x30	; 48
    5ea2:	f1 e0       	ldi	r31, 0x01	; 1
    5ea4:	8f 1a       	sub	r8, r31
    5ea6:	91 08       	sbc	r9, r1
    5ea8:	2d 85       	ldd	r18, Y+13	; 0x0d
    5eaa:	3e 85       	ldd	r19, Y+14	; 0x0e
    5eac:	2f 5f       	subi	r18, 0xFF	; 255
    5eae:	3f 4f       	sbci	r19, 0xFF	; 255
    5eb0:	3e 87       	std	Y+14, r19	; 0x0e
    5eb2:	2d 87       	std	Y+13, r18	; 0x0d
    5eb4:	80 16       	cp	r8, r16
    5eb6:	91 06       	cpc	r9, r17
    5eb8:	24 f0       	brlt	.+8      	; 0x5ec2 <vfprintf+0x33e>
    5eba:	b7 01       	movw	r22, r14
    5ebc:	90 e0       	ldi	r25, 0x00	; 0
    5ebe:	d7 d4       	rcall	.+2478   	; 0x686e <fputc>
    5ec0:	db cf       	rjmp	.-74     	; 0x5e78 <vfprintf+0x2f4>
    5ec2:	c8 14       	cp	r12, r8
    5ec4:	d9 04       	cpc	r13, r9
    5ec6:	41 f4       	brne	.+16     	; 0x5ed8 <vfprintf+0x354>
    5ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    5eca:	96 33       	cpi	r25, 0x36	; 54
    5ecc:	20 f4       	brcc	.+8      	; 0x5ed6 <vfprintf+0x352>
    5ece:	95 33       	cpi	r25, 0x35	; 53
    5ed0:	19 f4       	brne	.+6      	; 0x5ed8 <vfprintf+0x354>
    5ed2:	3c 85       	ldd	r19, Y+12	; 0x0c
    5ed4:	34 ff       	sbrs	r19, 4
    5ed6:	81 e3       	ldi	r24, 0x31	; 49
    5ed8:	b7 01       	movw	r22, r14
    5eda:	90 e0       	ldi	r25, 0x00	; 0
    5edc:	48 c0       	rjmp	.+144    	; 0x5f6e <vfprintf+0x3ea>
    5ede:	8a 81       	ldd	r24, Y+2	; 0x02
    5ee0:	81 33       	cpi	r24, 0x31	; 49
    5ee2:	19 f0       	breq	.+6      	; 0x5eea <vfprintf+0x366>
    5ee4:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ee6:	9f 7e       	andi	r25, 0xEF	; 239
    5ee8:	9c 87       	std	Y+12, r25	; 0x0c
    5eea:	b7 01       	movw	r22, r14
    5eec:	90 e0       	ldi	r25, 0x00	; 0
    5eee:	bf d4       	rcall	.+2430   	; 0x686e <fputc>
    5ef0:	11 11       	cpse	r17, r1
    5ef2:	05 c0       	rjmp	.+10     	; 0x5efe <vfprintf+0x37a>
    5ef4:	94 fc       	sbrc	r9, 4
    5ef6:	16 c0       	rjmp	.+44     	; 0x5f24 <vfprintf+0x3a0>
    5ef8:	85 e6       	ldi	r24, 0x65	; 101
    5efa:	90 e0       	ldi	r25, 0x00	; 0
    5efc:	15 c0       	rjmp	.+42     	; 0x5f28 <vfprintf+0x3a4>
    5efe:	b7 01       	movw	r22, r14
    5f00:	8e e2       	ldi	r24, 0x2E	; 46
    5f02:	90 e0       	ldi	r25, 0x00	; 0
    5f04:	b4 d4       	rcall	.+2408   	; 0x686e <fputc>
    5f06:	1e 5f       	subi	r17, 0xFE	; 254
    5f08:	82 e0       	ldi	r24, 0x02	; 2
    5f0a:	01 e0       	ldi	r16, 0x01	; 1
    5f0c:	08 0f       	add	r16, r24
    5f0e:	f3 01       	movw	r30, r6
    5f10:	e8 0f       	add	r30, r24
    5f12:	f1 1d       	adc	r31, r1
    5f14:	80 81       	ld	r24, Z
    5f16:	b7 01       	movw	r22, r14
    5f18:	90 e0       	ldi	r25, 0x00	; 0
    5f1a:	a9 d4       	rcall	.+2386   	; 0x686e <fputc>
    5f1c:	80 2f       	mov	r24, r16
    5f1e:	01 13       	cpse	r16, r17
    5f20:	f4 cf       	rjmp	.-24     	; 0x5f0a <vfprintf+0x386>
    5f22:	e8 cf       	rjmp	.-48     	; 0x5ef4 <vfprintf+0x370>
    5f24:	85 e4       	ldi	r24, 0x45	; 69
    5f26:	90 e0       	ldi	r25, 0x00	; 0
    5f28:	b7 01       	movw	r22, r14
    5f2a:	a1 d4       	rcall	.+2370   	; 0x686e <fputc>
    5f2c:	d7 fc       	sbrc	r13, 7
    5f2e:	06 c0       	rjmp	.+12     	; 0x5f3c <vfprintf+0x3b8>
    5f30:	c1 14       	cp	r12, r1
    5f32:	d1 04       	cpc	r13, r1
    5f34:	41 f4       	brne	.+16     	; 0x5f46 <vfprintf+0x3c2>
    5f36:	ec 85       	ldd	r30, Y+12	; 0x0c
    5f38:	e4 ff       	sbrs	r30, 4
    5f3a:	05 c0       	rjmp	.+10     	; 0x5f46 <vfprintf+0x3c2>
    5f3c:	d1 94       	neg	r13
    5f3e:	c1 94       	neg	r12
    5f40:	d1 08       	sbc	r13, r1
    5f42:	8d e2       	ldi	r24, 0x2D	; 45
    5f44:	01 c0       	rjmp	.+2      	; 0x5f48 <vfprintf+0x3c4>
    5f46:	8b e2       	ldi	r24, 0x2B	; 43
    5f48:	b7 01       	movw	r22, r14
    5f4a:	90 e0       	ldi	r25, 0x00	; 0
    5f4c:	90 d4       	rcall	.+2336   	; 0x686e <fputc>
    5f4e:	80 e3       	ldi	r24, 0x30	; 48
    5f50:	2a e0       	ldi	r18, 0x0A	; 10
    5f52:	c2 16       	cp	r12, r18
    5f54:	d1 04       	cpc	r13, r1
    5f56:	2c f0       	brlt	.+10     	; 0x5f62 <vfprintf+0x3de>
    5f58:	8f 5f       	subi	r24, 0xFF	; 255
    5f5a:	fa e0       	ldi	r31, 0x0A	; 10
    5f5c:	cf 1a       	sub	r12, r31
    5f5e:	d1 08       	sbc	r13, r1
    5f60:	f7 cf       	rjmp	.-18     	; 0x5f50 <vfprintf+0x3cc>
    5f62:	b7 01       	movw	r22, r14
    5f64:	90 e0       	ldi	r25, 0x00	; 0
    5f66:	83 d4       	rcall	.+2310   	; 0x686e <fputc>
    5f68:	b7 01       	movw	r22, r14
    5f6a:	c6 01       	movw	r24, r12
    5f6c:	c0 96       	adiw	r24, 0x30	; 48
    5f6e:	7f d4       	rcall	.+2302   	; 0x686e <fputc>
    5f70:	49 c1       	rjmp	.+658    	; 0x6204 <vfprintf+0x680>
    5f72:	83 36       	cpi	r24, 0x63	; 99
    5f74:	31 f0       	breq	.+12     	; 0x5f82 <vfprintf+0x3fe>
    5f76:	83 37       	cpi	r24, 0x73	; 115
    5f78:	79 f0       	breq	.+30     	; 0x5f98 <vfprintf+0x414>
    5f7a:	83 35       	cpi	r24, 0x53	; 83
    5f7c:	09 f0       	breq	.+2      	; 0x5f80 <vfprintf+0x3fc>
    5f7e:	52 c0       	rjmp	.+164    	; 0x6024 <vfprintf+0x4a0>
    5f80:	1f c0       	rjmp	.+62     	; 0x5fc0 <vfprintf+0x43c>
    5f82:	56 01       	movw	r10, r12
    5f84:	32 e0       	ldi	r19, 0x02	; 2
    5f86:	a3 0e       	add	r10, r19
    5f88:	b1 1c       	adc	r11, r1
    5f8a:	f6 01       	movw	r30, r12
    5f8c:	80 81       	ld	r24, Z
    5f8e:	89 83       	std	Y+1, r24	; 0x01
    5f90:	01 e0       	ldi	r16, 0x01	; 1
    5f92:	10 e0       	ldi	r17, 0x00	; 0
    5f94:	63 01       	movw	r12, r6
    5f96:	11 c0       	rjmp	.+34     	; 0x5fba <vfprintf+0x436>
    5f98:	56 01       	movw	r10, r12
    5f9a:	f2 e0       	ldi	r31, 0x02	; 2
    5f9c:	af 0e       	add	r10, r31
    5f9e:	b1 1c       	adc	r11, r1
    5fa0:	f6 01       	movw	r30, r12
    5fa2:	c0 80       	ld	r12, Z
    5fa4:	d1 80       	ldd	r13, Z+1	; 0x01
    5fa6:	96 fe       	sbrs	r9, 6
    5fa8:	03 c0       	rjmp	.+6      	; 0x5fb0 <vfprintf+0x42c>
    5faa:	61 2f       	mov	r22, r17
    5fac:	70 e0       	ldi	r23, 0x00	; 0
    5fae:	02 c0       	rjmp	.+4      	; 0x5fb4 <vfprintf+0x430>
    5fb0:	6f ef       	ldi	r22, 0xFF	; 255
    5fb2:	7f ef       	ldi	r23, 0xFF	; 255
    5fb4:	c6 01       	movw	r24, r12
    5fb6:	50 d4       	rcall	.+2208   	; 0x6858 <strnlen>
    5fb8:	8c 01       	movw	r16, r24
    5fba:	f9 2d       	mov	r31, r9
    5fbc:	ff 77       	andi	r31, 0x7F	; 127
    5fbe:	13 c0       	rjmp	.+38     	; 0x5fe6 <vfprintf+0x462>
    5fc0:	56 01       	movw	r10, r12
    5fc2:	22 e0       	ldi	r18, 0x02	; 2
    5fc4:	a2 0e       	add	r10, r18
    5fc6:	b1 1c       	adc	r11, r1
    5fc8:	f6 01       	movw	r30, r12
    5fca:	c0 80       	ld	r12, Z
    5fcc:	d1 80       	ldd	r13, Z+1	; 0x01
    5fce:	96 fe       	sbrs	r9, 6
    5fd0:	03 c0       	rjmp	.+6      	; 0x5fd8 <vfprintf+0x454>
    5fd2:	61 2f       	mov	r22, r17
    5fd4:	70 e0       	ldi	r23, 0x00	; 0
    5fd6:	02 c0       	rjmp	.+4      	; 0x5fdc <vfprintf+0x458>
    5fd8:	6f ef       	ldi	r22, 0xFF	; 255
    5fda:	7f ef       	ldi	r23, 0xFF	; 255
    5fdc:	c6 01       	movw	r24, r12
    5fde:	d2 d3       	rcall	.+1956   	; 0x6784 <strnlen_P>
    5fe0:	8c 01       	movw	r16, r24
    5fe2:	f9 2d       	mov	r31, r9
    5fe4:	f0 68       	ori	r31, 0x80	; 128
    5fe6:	9f 2e       	mov	r9, r31
    5fe8:	f3 fd       	sbrc	r31, 3
    5fea:	18 c0       	rjmp	.+48     	; 0x601c <vfprintf+0x498>
    5fec:	85 2d       	mov	r24, r5
    5fee:	90 e0       	ldi	r25, 0x00	; 0
    5ff0:	08 17       	cp	r16, r24
    5ff2:	19 07       	cpc	r17, r25
    5ff4:	98 f4       	brcc	.+38     	; 0x601c <vfprintf+0x498>
    5ff6:	b7 01       	movw	r22, r14
    5ff8:	80 e2       	ldi	r24, 0x20	; 32
    5ffa:	90 e0       	ldi	r25, 0x00	; 0
    5ffc:	38 d4       	rcall	.+2160   	; 0x686e <fputc>
    5ffe:	5a 94       	dec	r5
    6000:	f5 cf       	rjmp	.-22     	; 0x5fec <vfprintf+0x468>
    6002:	f6 01       	movw	r30, r12
    6004:	97 fc       	sbrc	r9, 7
    6006:	85 91       	lpm	r24, Z+
    6008:	97 fe       	sbrs	r9, 7
    600a:	81 91       	ld	r24, Z+
    600c:	6f 01       	movw	r12, r30
    600e:	b7 01       	movw	r22, r14
    6010:	90 e0       	ldi	r25, 0x00	; 0
    6012:	2d d4       	rcall	.+2138   	; 0x686e <fputc>
    6014:	51 10       	cpse	r5, r1
    6016:	5a 94       	dec	r5
    6018:	01 50       	subi	r16, 0x01	; 1
    601a:	11 09       	sbc	r17, r1
    601c:	01 15       	cp	r16, r1
    601e:	11 05       	cpc	r17, r1
    6020:	81 f7       	brne	.-32     	; 0x6002 <vfprintf+0x47e>
    6022:	f0 c0       	rjmp	.+480    	; 0x6204 <vfprintf+0x680>
    6024:	84 36       	cpi	r24, 0x64	; 100
    6026:	11 f0       	breq	.+4      	; 0x602c <vfprintf+0x4a8>
    6028:	89 36       	cpi	r24, 0x69	; 105
    602a:	59 f5       	brne	.+86     	; 0x6082 <vfprintf+0x4fe>
    602c:	56 01       	movw	r10, r12
    602e:	97 fe       	sbrs	r9, 7
    6030:	09 c0       	rjmp	.+18     	; 0x6044 <vfprintf+0x4c0>
    6032:	24 e0       	ldi	r18, 0x04	; 4
    6034:	a2 0e       	add	r10, r18
    6036:	b1 1c       	adc	r11, r1
    6038:	f6 01       	movw	r30, r12
    603a:	60 81       	ld	r22, Z
    603c:	71 81       	ldd	r23, Z+1	; 0x01
    603e:	82 81       	ldd	r24, Z+2	; 0x02
    6040:	93 81       	ldd	r25, Z+3	; 0x03
    6042:	0a c0       	rjmp	.+20     	; 0x6058 <vfprintf+0x4d4>
    6044:	f2 e0       	ldi	r31, 0x02	; 2
    6046:	af 0e       	add	r10, r31
    6048:	b1 1c       	adc	r11, r1
    604a:	f6 01       	movw	r30, r12
    604c:	60 81       	ld	r22, Z
    604e:	71 81       	ldd	r23, Z+1	; 0x01
    6050:	07 2e       	mov	r0, r23
    6052:	00 0c       	add	r0, r0
    6054:	88 0b       	sbc	r24, r24
    6056:	99 0b       	sbc	r25, r25
    6058:	f9 2d       	mov	r31, r9
    605a:	ff 76       	andi	r31, 0x6F	; 111
    605c:	9f 2e       	mov	r9, r31
    605e:	97 ff       	sbrs	r25, 7
    6060:	09 c0       	rjmp	.+18     	; 0x6074 <vfprintf+0x4f0>
    6062:	90 95       	com	r25
    6064:	80 95       	com	r24
    6066:	70 95       	com	r23
    6068:	61 95       	neg	r22
    606a:	7f 4f       	sbci	r23, 0xFF	; 255
    606c:	8f 4f       	sbci	r24, 0xFF	; 255
    606e:	9f 4f       	sbci	r25, 0xFF	; 255
    6070:	f0 68       	ori	r31, 0x80	; 128
    6072:	9f 2e       	mov	r9, r31
    6074:	2a e0       	ldi	r18, 0x0A	; 10
    6076:	30 e0       	ldi	r19, 0x00	; 0
    6078:	a3 01       	movw	r20, r6
    607a:	a6 d4       	rcall	.+2380   	; 0x69c8 <__ultoa_invert>
    607c:	c8 2e       	mov	r12, r24
    607e:	c6 18       	sub	r12, r6
    6080:	3e c0       	rjmp	.+124    	; 0x60fe <vfprintf+0x57a>
    6082:	09 2d       	mov	r16, r9
    6084:	85 37       	cpi	r24, 0x75	; 117
    6086:	21 f4       	brne	.+8      	; 0x6090 <vfprintf+0x50c>
    6088:	0f 7e       	andi	r16, 0xEF	; 239
    608a:	2a e0       	ldi	r18, 0x0A	; 10
    608c:	30 e0       	ldi	r19, 0x00	; 0
    608e:	1d c0       	rjmp	.+58     	; 0x60ca <vfprintf+0x546>
    6090:	09 7f       	andi	r16, 0xF9	; 249
    6092:	8f 36       	cpi	r24, 0x6F	; 111
    6094:	91 f0       	breq	.+36     	; 0x60ba <vfprintf+0x536>
    6096:	18 f4       	brcc	.+6      	; 0x609e <vfprintf+0x51a>
    6098:	88 35       	cpi	r24, 0x58	; 88
    609a:	59 f0       	breq	.+22     	; 0x60b2 <vfprintf+0x52e>
    609c:	bc c0       	rjmp	.+376    	; 0x6216 <vfprintf+0x692>
    609e:	80 37       	cpi	r24, 0x70	; 112
    60a0:	19 f0       	breq	.+6      	; 0x60a8 <vfprintf+0x524>
    60a2:	88 37       	cpi	r24, 0x78	; 120
    60a4:	11 f0       	breq	.+4      	; 0x60aa <vfprintf+0x526>
    60a6:	b7 c0       	rjmp	.+366    	; 0x6216 <vfprintf+0x692>
    60a8:	00 61       	ori	r16, 0x10	; 16
    60aa:	04 ff       	sbrs	r16, 4
    60ac:	09 c0       	rjmp	.+18     	; 0x60c0 <vfprintf+0x53c>
    60ae:	04 60       	ori	r16, 0x04	; 4
    60b0:	07 c0       	rjmp	.+14     	; 0x60c0 <vfprintf+0x53c>
    60b2:	94 fe       	sbrs	r9, 4
    60b4:	08 c0       	rjmp	.+16     	; 0x60c6 <vfprintf+0x542>
    60b6:	06 60       	ori	r16, 0x06	; 6
    60b8:	06 c0       	rjmp	.+12     	; 0x60c6 <vfprintf+0x542>
    60ba:	28 e0       	ldi	r18, 0x08	; 8
    60bc:	30 e0       	ldi	r19, 0x00	; 0
    60be:	05 c0       	rjmp	.+10     	; 0x60ca <vfprintf+0x546>
    60c0:	20 e1       	ldi	r18, 0x10	; 16
    60c2:	30 e0       	ldi	r19, 0x00	; 0
    60c4:	02 c0       	rjmp	.+4      	; 0x60ca <vfprintf+0x546>
    60c6:	20 e1       	ldi	r18, 0x10	; 16
    60c8:	32 e0       	ldi	r19, 0x02	; 2
    60ca:	56 01       	movw	r10, r12
    60cc:	07 ff       	sbrs	r16, 7
    60ce:	09 c0       	rjmp	.+18     	; 0x60e2 <vfprintf+0x55e>
    60d0:	84 e0       	ldi	r24, 0x04	; 4
    60d2:	a8 0e       	add	r10, r24
    60d4:	b1 1c       	adc	r11, r1
    60d6:	f6 01       	movw	r30, r12
    60d8:	60 81       	ld	r22, Z
    60da:	71 81       	ldd	r23, Z+1	; 0x01
    60dc:	82 81       	ldd	r24, Z+2	; 0x02
    60de:	93 81       	ldd	r25, Z+3	; 0x03
    60e0:	08 c0       	rjmp	.+16     	; 0x60f2 <vfprintf+0x56e>
    60e2:	f2 e0       	ldi	r31, 0x02	; 2
    60e4:	af 0e       	add	r10, r31
    60e6:	b1 1c       	adc	r11, r1
    60e8:	f6 01       	movw	r30, r12
    60ea:	60 81       	ld	r22, Z
    60ec:	71 81       	ldd	r23, Z+1	; 0x01
    60ee:	80 e0       	ldi	r24, 0x00	; 0
    60f0:	90 e0       	ldi	r25, 0x00	; 0
    60f2:	a3 01       	movw	r20, r6
    60f4:	69 d4       	rcall	.+2258   	; 0x69c8 <__ultoa_invert>
    60f6:	c8 2e       	mov	r12, r24
    60f8:	c6 18       	sub	r12, r6
    60fa:	0f 77       	andi	r16, 0x7F	; 127
    60fc:	90 2e       	mov	r9, r16
    60fe:	96 fe       	sbrs	r9, 6
    6100:	0b c0       	rjmp	.+22     	; 0x6118 <vfprintf+0x594>
    6102:	09 2d       	mov	r16, r9
    6104:	0e 7f       	andi	r16, 0xFE	; 254
    6106:	c1 16       	cp	r12, r17
    6108:	50 f4       	brcc	.+20     	; 0x611e <vfprintf+0x59a>
    610a:	94 fe       	sbrs	r9, 4
    610c:	0a c0       	rjmp	.+20     	; 0x6122 <vfprintf+0x59e>
    610e:	92 fc       	sbrc	r9, 2
    6110:	08 c0       	rjmp	.+16     	; 0x6122 <vfprintf+0x59e>
    6112:	09 2d       	mov	r16, r9
    6114:	0e 7e       	andi	r16, 0xEE	; 238
    6116:	05 c0       	rjmp	.+10     	; 0x6122 <vfprintf+0x59e>
    6118:	dc 2c       	mov	r13, r12
    611a:	09 2d       	mov	r16, r9
    611c:	03 c0       	rjmp	.+6      	; 0x6124 <vfprintf+0x5a0>
    611e:	dc 2c       	mov	r13, r12
    6120:	01 c0       	rjmp	.+2      	; 0x6124 <vfprintf+0x5a0>
    6122:	d1 2e       	mov	r13, r17
    6124:	04 ff       	sbrs	r16, 4
    6126:	0d c0       	rjmp	.+26     	; 0x6142 <vfprintf+0x5be>
    6128:	fe 01       	movw	r30, r28
    612a:	ec 0d       	add	r30, r12
    612c:	f1 1d       	adc	r31, r1
    612e:	80 81       	ld	r24, Z
    6130:	80 33       	cpi	r24, 0x30	; 48
    6132:	11 f4       	brne	.+4      	; 0x6138 <vfprintf+0x5b4>
    6134:	09 7e       	andi	r16, 0xE9	; 233
    6136:	09 c0       	rjmp	.+18     	; 0x614a <vfprintf+0x5c6>
    6138:	02 ff       	sbrs	r16, 2
    613a:	06 c0       	rjmp	.+12     	; 0x6148 <vfprintf+0x5c4>
    613c:	d3 94       	inc	r13
    613e:	d3 94       	inc	r13
    6140:	04 c0       	rjmp	.+8      	; 0x614a <vfprintf+0x5c6>
    6142:	80 2f       	mov	r24, r16
    6144:	86 78       	andi	r24, 0x86	; 134
    6146:	09 f0       	breq	.+2      	; 0x614a <vfprintf+0x5c6>
    6148:	d3 94       	inc	r13
    614a:	03 fd       	sbrc	r16, 3
    614c:	10 c0       	rjmp	.+32     	; 0x616e <vfprintf+0x5ea>
    614e:	00 ff       	sbrs	r16, 0
    6150:	06 c0       	rjmp	.+12     	; 0x615e <vfprintf+0x5da>
    6152:	1c 2d       	mov	r17, r12
    6154:	d5 14       	cp	r13, r5
    6156:	78 f4       	brcc	.+30     	; 0x6176 <vfprintf+0x5f2>
    6158:	15 0d       	add	r17, r5
    615a:	1d 19       	sub	r17, r13
    615c:	0c c0       	rjmp	.+24     	; 0x6176 <vfprintf+0x5f2>
    615e:	d5 14       	cp	r13, r5
    6160:	50 f4       	brcc	.+20     	; 0x6176 <vfprintf+0x5f2>
    6162:	b7 01       	movw	r22, r14
    6164:	80 e2       	ldi	r24, 0x20	; 32
    6166:	90 e0       	ldi	r25, 0x00	; 0
    6168:	82 d3       	rcall	.+1796   	; 0x686e <fputc>
    616a:	d3 94       	inc	r13
    616c:	f8 cf       	rjmp	.-16     	; 0x615e <vfprintf+0x5da>
    616e:	d5 14       	cp	r13, r5
    6170:	10 f4       	brcc	.+4      	; 0x6176 <vfprintf+0x5f2>
    6172:	5d 18       	sub	r5, r13
    6174:	01 c0       	rjmp	.+2      	; 0x6178 <vfprintf+0x5f4>
    6176:	51 2c       	mov	r5, r1
    6178:	04 ff       	sbrs	r16, 4
    617a:	0f c0       	rjmp	.+30     	; 0x619a <vfprintf+0x616>
    617c:	b7 01       	movw	r22, r14
    617e:	80 e3       	ldi	r24, 0x30	; 48
    6180:	90 e0       	ldi	r25, 0x00	; 0
    6182:	75 d3       	rcall	.+1770   	; 0x686e <fputc>
    6184:	02 ff       	sbrs	r16, 2
    6186:	16 c0       	rjmp	.+44     	; 0x61b4 <vfprintf+0x630>
    6188:	01 fd       	sbrc	r16, 1
    618a:	03 c0       	rjmp	.+6      	; 0x6192 <vfprintf+0x60e>
    618c:	88 e7       	ldi	r24, 0x78	; 120
    618e:	90 e0       	ldi	r25, 0x00	; 0
    6190:	02 c0       	rjmp	.+4      	; 0x6196 <vfprintf+0x612>
    6192:	88 e5       	ldi	r24, 0x58	; 88
    6194:	90 e0       	ldi	r25, 0x00	; 0
    6196:	b7 01       	movw	r22, r14
    6198:	0c c0       	rjmp	.+24     	; 0x61b2 <vfprintf+0x62e>
    619a:	80 2f       	mov	r24, r16
    619c:	86 78       	andi	r24, 0x86	; 134
    619e:	51 f0       	breq	.+20     	; 0x61b4 <vfprintf+0x630>
    61a0:	01 ff       	sbrs	r16, 1
    61a2:	02 c0       	rjmp	.+4      	; 0x61a8 <vfprintf+0x624>
    61a4:	8b e2       	ldi	r24, 0x2B	; 43
    61a6:	01 c0       	rjmp	.+2      	; 0x61aa <vfprintf+0x626>
    61a8:	80 e2       	ldi	r24, 0x20	; 32
    61aa:	07 fd       	sbrc	r16, 7
    61ac:	8d e2       	ldi	r24, 0x2D	; 45
    61ae:	b7 01       	movw	r22, r14
    61b0:	90 e0       	ldi	r25, 0x00	; 0
    61b2:	5d d3       	rcall	.+1722   	; 0x686e <fputc>
    61b4:	c1 16       	cp	r12, r17
    61b6:	30 f4       	brcc	.+12     	; 0x61c4 <vfprintf+0x640>
    61b8:	b7 01       	movw	r22, r14
    61ba:	80 e3       	ldi	r24, 0x30	; 48
    61bc:	90 e0       	ldi	r25, 0x00	; 0
    61be:	57 d3       	rcall	.+1710   	; 0x686e <fputc>
    61c0:	11 50       	subi	r17, 0x01	; 1
    61c2:	f8 cf       	rjmp	.-16     	; 0x61b4 <vfprintf+0x630>
    61c4:	ca 94       	dec	r12
    61c6:	f3 01       	movw	r30, r6
    61c8:	ec 0d       	add	r30, r12
    61ca:	f1 1d       	adc	r31, r1
    61cc:	80 81       	ld	r24, Z
    61ce:	b7 01       	movw	r22, r14
    61d0:	90 e0       	ldi	r25, 0x00	; 0
    61d2:	4d d3       	rcall	.+1690   	; 0x686e <fputc>
    61d4:	c1 10       	cpse	r12, r1
    61d6:	f6 cf       	rjmp	.-20     	; 0x61c4 <vfprintf+0x640>
    61d8:	15 c0       	rjmp	.+42     	; 0x6204 <vfprintf+0x680>
    61da:	f4 e0       	ldi	r31, 0x04	; 4
    61dc:	f5 15       	cp	r31, r5
    61de:	50 f5       	brcc	.+84     	; 0x6234 <vfprintf+0x6b0>
    61e0:	84 e0       	ldi	r24, 0x04	; 4
    61e2:	58 1a       	sub	r5, r24
    61e4:	93 fe       	sbrs	r9, 3
    61e6:	1e c0       	rjmp	.+60     	; 0x6224 <vfprintf+0x6a0>
    61e8:	01 11       	cpse	r16, r1
    61ea:	25 c0       	rjmp	.+74     	; 0x6236 <vfprintf+0x6b2>
    61ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    61ee:	23 ff       	sbrs	r18, 3
    61f0:	27 c0       	rjmp	.+78     	; 0x6240 <vfprintf+0x6bc>
    61f2:	0a e9       	ldi	r16, 0x9A	; 154
    61f4:	11 e0       	ldi	r17, 0x01	; 1
    61f6:	39 2d       	mov	r19, r9
    61f8:	30 71       	andi	r19, 0x10	; 16
    61fa:	93 2e       	mov	r9, r19
    61fc:	f8 01       	movw	r30, r16
    61fe:	84 91       	lpm	r24, Z
    6200:	81 11       	cpse	r24, r1
    6202:	21 c0       	rjmp	.+66     	; 0x6246 <vfprintf+0x6c2>
    6204:	55 20       	and	r5, r5
    6206:	09 f4       	brne	.+2      	; 0x620a <vfprintf+0x686>
    6208:	fc cc       	rjmp	.-1544   	; 0x5c02 <vfprintf+0x7e>
    620a:	b7 01       	movw	r22, r14
    620c:	80 e2       	ldi	r24, 0x20	; 32
    620e:	90 e0       	ldi	r25, 0x00	; 0
    6210:	2e d3       	rcall	.+1628   	; 0x686e <fputc>
    6212:	5a 94       	dec	r5
    6214:	f7 cf       	rjmp	.-18     	; 0x6204 <vfprintf+0x680>
    6216:	f7 01       	movw	r30, r14
    6218:	86 81       	ldd	r24, Z+6	; 0x06
    621a:	97 81       	ldd	r25, Z+7	; 0x07
    621c:	23 c0       	rjmp	.+70     	; 0x6264 <vfprintf+0x6e0>
    621e:	8f ef       	ldi	r24, 0xFF	; 255
    6220:	9f ef       	ldi	r25, 0xFF	; 255
    6222:	20 c0       	rjmp	.+64     	; 0x6264 <vfprintf+0x6e0>
    6224:	b7 01       	movw	r22, r14
    6226:	80 e2       	ldi	r24, 0x20	; 32
    6228:	90 e0       	ldi	r25, 0x00	; 0
    622a:	21 d3       	rcall	.+1602   	; 0x686e <fputc>
    622c:	5a 94       	dec	r5
    622e:	51 10       	cpse	r5, r1
    6230:	f9 cf       	rjmp	.-14     	; 0x6224 <vfprintf+0x6a0>
    6232:	da cf       	rjmp	.-76     	; 0x61e8 <vfprintf+0x664>
    6234:	51 2c       	mov	r5, r1
    6236:	b7 01       	movw	r22, r14
    6238:	80 2f       	mov	r24, r16
    623a:	90 e0       	ldi	r25, 0x00	; 0
    623c:	18 d3       	rcall	.+1584   	; 0x686e <fputc>
    623e:	d6 cf       	rjmp	.-84     	; 0x61ec <vfprintf+0x668>
    6240:	0e e9       	ldi	r16, 0x9E	; 158
    6242:	11 e0       	ldi	r17, 0x01	; 1
    6244:	d8 cf       	rjmp	.-80     	; 0x61f6 <vfprintf+0x672>
    6246:	91 10       	cpse	r9, r1
    6248:	80 52       	subi	r24, 0x20	; 32
    624a:	b7 01       	movw	r22, r14
    624c:	90 e0       	ldi	r25, 0x00	; 0
    624e:	0f d3       	rcall	.+1566   	; 0x686e <fputc>
    6250:	0f 5f       	subi	r16, 0xFF	; 255
    6252:	1f 4f       	sbci	r17, 0xFF	; 255
    6254:	d3 cf       	rjmp	.-90     	; 0x61fc <vfprintf+0x678>
    6256:	23 e0       	ldi	r18, 0x03	; 3
    6258:	25 15       	cp	r18, r5
    625a:	10 f4       	brcc	.+4      	; 0x6260 <vfprintf+0x6dc>
    625c:	83 e0       	ldi	r24, 0x03	; 3
    625e:	c1 cf       	rjmp	.-126    	; 0x61e2 <vfprintf+0x65e>
    6260:	51 2c       	mov	r5, r1
    6262:	c4 cf       	rjmp	.-120    	; 0x61ec <vfprintf+0x668>
    6264:	60 96       	adiw	r28, 0x10	; 16
    6266:	0f b6       	in	r0, 0x3f	; 63
    6268:	f8 94       	cli
    626a:	de bf       	out	0x3e, r29	; 62
    626c:	0f be       	out	0x3f, r0	; 63
    626e:	cd bf       	out	0x3d, r28	; 61
    6270:	df 91       	pop	r29
    6272:	cf 91       	pop	r28
    6274:	1f 91       	pop	r17
    6276:	0f 91       	pop	r16
    6278:	ff 90       	pop	r15
    627a:	ef 90       	pop	r14
    627c:	df 90       	pop	r13
    627e:	cf 90       	pop	r12
    6280:	bf 90       	pop	r11
    6282:	af 90       	pop	r10
    6284:	9f 90       	pop	r9
    6286:	8f 90       	pop	r8
    6288:	7f 90       	pop	r7
    628a:	6f 90       	pop	r6
    628c:	5f 90       	pop	r5
    628e:	4f 90       	pop	r4
    6290:	3f 90       	pop	r3
    6292:	2f 90       	pop	r2
    6294:	08 95       	ret

00006296 <__divmodhi4>:
    6296:	97 fb       	bst	r25, 7
    6298:	07 2e       	mov	r0, r23
    629a:	16 f4       	brtc	.+4      	; 0x62a0 <__divmodhi4+0xa>
    629c:	00 94       	com	r0
    629e:	06 d0       	rcall	.+12     	; 0x62ac <__divmodhi4_neg1>
    62a0:	77 fd       	sbrc	r23, 7
    62a2:	08 d0       	rcall	.+16     	; 0x62b4 <__divmodhi4_neg2>
    62a4:	44 d0       	rcall	.+136    	; 0x632e <__udivmodhi4>
    62a6:	07 fc       	sbrc	r0, 7
    62a8:	05 d0       	rcall	.+10     	; 0x62b4 <__divmodhi4_neg2>
    62aa:	3e f4       	brtc	.+14     	; 0x62ba <__divmodhi4_exit>

000062ac <__divmodhi4_neg1>:
    62ac:	90 95       	com	r25
    62ae:	81 95       	neg	r24
    62b0:	9f 4f       	sbci	r25, 0xFF	; 255
    62b2:	08 95       	ret

000062b4 <__divmodhi4_neg2>:
    62b4:	70 95       	com	r23
    62b6:	61 95       	neg	r22
    62b8:	7f 4f       	sbci	r23, 0xFF	; 255

000062ba <__divmodhi4_exit>:
    62ba:	08 95       	ret

000062bc <__udivmodsi4>:
    62bc:	a1 e2       	ldi	r26, 0x21	; 33
    62be:	1a 2e       	mov	r1, r26
    62c0:	aa 1b       	sub	r26, r26
    62c2:	bb 1b       	sub	r27, r27
    62c4:	fd 01       	movw	r30, r26
    62c6:	0d c0       	rjmp	.+26     	; 0x62e2 <__udivmodsi4_ep>

000062c8 <__udivmodsi4_loop>:
    62c8:	aa 1f       	adc	r26, r26
    62ca:	bb 1f       	adc	r27, r27
    62cc:	ee 1f       	adc	r30, r30
    62ce:	ff 1f       	adc	r31, r31
    62d0:	a2 17       	cp	r26, r18
    62d2:	b3 07       	cpc	r27, r19
    62d4:	e4 07       	cpc	r30, r20
    62d6:	f5 07       	cpc	r31, r21
    62d8:	20 f0       	brcs	.+8      	; 0x62e2 <__udivmodsi4_ep>
    62da:	a2 1b       	sub	r26, r18
    62dc:	b3 0b       	sbc	r27, r19
    62de:	e4 0b       	sbc	r30, r20
    62e0:	f5 0b       	sbc	r31, r21

000062e2 <__udivmodsi4_ep>:
    62e2:	66 1f       	adc	r22, r22
    62e4:	77 1f       	adc	r23, r23
    62e6:	88 1f       	adc	r24, r24
    62e8:	99 1f       	adc	r25, r25
    62ea:	1a 94       	dec	r1
    62ec:	69 f7       	brne	.-38     	; 0x62c8 <__udivmodsi4_loop>
    62ee:	60 95       	com	r22
    62f0:	70 95       	com	r23
    62f2:	80 95       	com	r24
    62f4:	90 95       	com	r25
    62f6:	9b 01       	movw	r18, r22
    62f8:	ac 01       	movw	r20, r24
    62fa:	bd 01       	movw	r22, r26
    62fc:	cf 01       	movw	r24, r30
    62fe:	08 95       	ret

00006300 <__tablejump2__>:
    6300:	ee 0f       	add	r30, r30
    6302:	ff 1f       	adc	r31, r31
    6304:	88 1f       	adc	r24, r24
    6306:	8b bf       	out	0x3b, r24	; 59
    6308:	07 90       	elpm	r0, Z+
    630a:	f6 91       	elpm	r31, Z
    630c:	e0 2d       	mov	r30, r0
    630e:	19 94       	eijmp

00006310 <__umulhisi3>:
    6310:	a2 9f       	mul	r26, r18
    6312:	b0 01       	movw	r22, r0
    6314:	b3 9f       	mul	r27, r19
    6316:	c0 01       	movw	r24, r0
    6318:	a3 9f       	mul	r26, r19
    631a:	70 0d       	add	r23, r0
    631c:	81 1d       	adc	r24, r1
    631e:	11 24       	eor	r1, r1
    6320:	91 1d       	adc	r25, r1
    6322:	b2 9f       	mul	r27, r18
    6324:	70 0d       	add	r23, r0
    6326:	81 1d       	adc	r24, r1
    6328:	11 24       	eor	r1, r1
    632a:	91 1d       	adc	r25, r1
    632c:	08 95       	ret

0000632e <__udivmodhi4>:
    632e:	aa 1b       	sub	r26, r26
    6330:	bb 1b       	sub	r27, r27
    6332:	51 e1       	ldi	r21, 0x11	; 17
    6334:	07 c0       	rjmp	.+14     	; 0x6344 <__udivmodhi4_ep>

00006336 <__udivmodhi4_loop>:
    6336:	aa 1f       	adc	r26, r26
    6338:	bb 1f       	adc	r27, r27
    633a:	a6 17       	cp	r26, r22
    633c:	b7 07       	cpc	r27, r23
    633e:	10 f0       	brcs	.+4      	; 0x6344 <__udivmodhi4_ep>
    6340:	a6 1b       	sub	r26, r22
    6342:	b7 0b       	sbc	r27, r23

00006344 <__udivmodhi4_ep>:
    6344:	88 1f       	adc	r24, r24
    6346:	99 1f       	adc	r25, r25
    6348:	5a 95       	dec	r21
    634a:	a9 f7       	brne	.-22     	; 0x6336 <__udivmodhi4_loop>
    634c:	80 95       	com	r24
    634e:	90 95       	com	r25
    6350:	bc 01       	movw	r22, r24
    6352:	cd 01       	movw	r24, r26
    6354:	08 95       	ret

00006356 <calloc>:
    6356:	0f 93       	push	r16
    6358:	1f 93       	push	r17
    635a:	cf 93       	push	r28
    635c:	df 93       	push	r29
    635e:	86 9f       	mul	r24, r22
    6360:	80 01       	movw	r16, r0
    6362:	87 9f       	mul	r24, r23
    6364:	10 0d       	add	r17, r0
    6366:	96 9f       	mul	r25, r22
    6368:	10 0d       	add	r17, r0
    636a:	11 24       	eor	r1, r1
    636c:	c8 01       	movw	r24, r16
    636e:	0d d0       	rcall	.+26     	; 0x638a <malloc>
    6370:	ec 01       	movw	r28, r24
    6372:	00 97       	sbiw	r24, 0x00	; 0
    6374:	21 f0       	breq	.+8      	; 0x637e <calloc+0x28>
    6376:	a8 01       	movw	r20, r16
    6378:	60 e0       	ldi	r22, 0x00	; 0
    637a:	70 e0       	ldi	r23, 0x00	; 0
    637c:	17 d2       	rcall	.+1070   	; 0x67ac <memset>
    637e:	ce 01       	movw	r24, r28
    6380:	df 91       	pop	r29
    6382:	cf 91       	pop	r28
    6384:	1f 91       	pop	r17
    6386:	0f 91       	pop	r16
    6388:	08 95       	ret

0000638a <malloc>:
    638a:	0f 93       	push	r16
    638c:	1f 93       	push	r17
    638e:	cf 93       	push	r28
    6390:	df 93       	push	r29
    6392:	82 30       	cpi	r24, 0x02	; 2
    6394:	91 05       	cpc	r25, r1
    6396:	10 f4       	brcc	.+4      	; 0x639c <malloc+0x12>
    6398:	82 e0       	ldi	r24, 0x02	; 2
    639a:	90 e0       	ldi	r25, 0x00	; 0
    639c:	e0 91 f5 16 	lds	r30, 0x16F5	; 0x8016f5 <__flp>
    63a0:	f0 91 f6 16 	lds	r31, 0x16F6	; 0x8016f6 <__flp+0x1>
    63a4:	20 e0       	ldi	r18, 0x00	; 0
    63a6:	30 e0       	ldi	r19, 0x00	; 0
    63a8:	a0 e0       	ldi	r26, 0x00	; 0
    63aa:	b0 e0       	ldi	r27, 0x00	; 0
    63ac:	30 97       	sbiw	r30, 0x00	; 0
    63ae:	19 f1       	breq	.+70     	; 0x63f6 <malloc+0x6c>
    63b0:	40 81       	ld	r20, Z
    63b2:	51 81       	ldd	r21, Z+1	; 0x01
    63b4:	02 81       	ldd	r16, Z+2	; 0x02
    63b6:	13 81       	ldd	r17, Z+3	; 0x03
    63b8:	48 17       	cp	r20, r24
    63ba:	59 07       	cpc	r21, r25
    63bc:	c8 f0       	brcs	.+50     	; 0x63f0 <malloc+0x66>
    63be:	84 17       	cp	r24, r20
    63c0:	95 07       	cpc	r25, r21
    63c2:	69 f4       	brne	.+26     	; 0x63de <malloc+0x54>
    63c4:	10 97       	sbiw	r26, 0x00	; 0
    63c6:	31 f0       	breq	.+12     	; 0x63d4 <malloc+0x4a>
    63c8:	12 96       	adiw	r26, 0x02	; 2
    63ca:	0c 93       	st	X, r16
    63cc:	12 97       	sbiw	r26, 0x02	; 2
    63ce:	13 96       	adiw	r26, 0x03	; 3
    63d0:	1c 93       	st	X, r17
    63d2:	27 c0       	rjmp	.+78     	; 0x6422 <malloc+0x98>
    63d4:	00 93 f5 16 	sts	0x16F5, r16	; 0x8016f5 <__flp>
    63d8:	10 93 f6 16 	sts	0x16F6, r17	; 0x8016f6 <__flp+0x1>
    63dc:	22 c0       	rjmp	.+68     	; 0x6422 <malloc+0x98>
    63de:	21 15       	cp	r18, r1
    63e0:	31 05       	cpc	r19, r1
    63e2:	19 f0       	breq	.+6      	; 0x63ea <malloc+0x60>
    63e4:	42 17       	cp	r20, r18
    63e6:	53 07       	cpc	r21, r19
    63e8:	18 f4       	brcc	.+6      	; 0x63f0 <malloc+0x66>
    63ea:	9a 01       	movw	r18, r20
    63ec:	bd 01       	movw	r22, r26
    63ee:	ef 01       	movw	r28, r30
    63f0:	df 01       	movw	r26, r30
    63f2:	f8 01       	movw	r30, r16
    63f4:	db cf       	rjmp	.-74     	; 0x63ac <malloc+0x22>
    63f6:	21 15       	cp	r18, r1
    63f8:	31 05       	cpc	r19, r1
    63fa:	f9 f0       	breq	.+62     	; 0x643a <malloc+0xb0>
    63fc:	28 1b       	sub	r18, r24
    63fe:	39 0b       	sbc	r19, r25
    6400:	24 30       	cpi	r18, 0x04	; 4
    6402:	31 05       	cpc	r19, r1
    6404:	80 f4       	brcc	.+32     	; 0x6426 <malloc+0x9c>
    6406:	8a 81       	ldd	r24, Y+2	; 0x02
    6408:	9b 81       	ldd	r25, Y+3	; 0x03
    640a:	61 15       	cp	r22, r1
    640c:	71 05       	cpc	r23, r1
    640e:	21 f0       	breq	.+8      	; 0x6418 <malloc+0x8e>
    6410:	fb 01       	movw	r30, r22
    6412:	93 83       	std	Z+3, r25	; 0x03
    6414:	82 83       	std	Z+2, r24	; 0x02
    6416:	04 c0       	rjmp	.+8      	; 0x6420 <malloc+0x96>
    6418:	90 93 f6 16 	sts	0x16F6, r25	; 0x8016f6 <__flp+0x1>
    641c:	80 93 f5 16 	sts	0x16F5, r24	; 0x8016f5 <__flp>
    6420:	fe 01       	movw	r30, r28
    6422:	32 96       	adiw	r30, 0x02	; 2
    6424:	44 c0       	rjmp	.+136    	; 0x64ae <malloc+0x124>
    6426:	fe 01       	movw	r30, r28
    6428:	e2 0f       	add	r30, r18
    642a:	f3 1f       	adc	r31, r19
    642c:	81 93       	st	Z+, r24
    642e:	91 93       	st	Z+, r25
    6430:	22 50       	subi	r18, 0x02	; 2
    6432:	31 09       	sbc	r19, r1
    6434:	39 83       	std	Y+1, r19	; 0x01
    6436:	28 83       	st	Y, r18
    6438:	3a c0       	rjmp	.+116    	; 0x64ae <malloc+0x124>
    643a:	20 91 f3 16 	lds	r18, 0x16F3	; 0x8016f3 <__brkval>
    643e:	30 91 f4 16 	lds	r19, 0x16F4	; 0x8016f4 <__brkval+0x1>
    6442:	23 2b       	or	r18, r19
    6444:	41 f4       	brne	.+16     	; 0x6456 <malloc+0xcc>
    6446:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    644a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    644e:	30 93 f4 16 	sts	0x16F4, r19	; 0x8016f4 <__brkval+0x1>
    6452:	20 93 f3 16 	sts	0x16F3, r18	; 0x8016f3 <__brkval>
    6456:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    645a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    645e:	21 15       	cp	r18, r1
    6460:	31 05       	cpc	r19, r1
    6462:	41 f4       	brne	.+16     	; 0x6474 <malloc+0xea>
    6464:	2d b7       	in	r18, 0x3d	; 61
    6466:	3e b7       	in	r19, 0x3e	; 62
    6468:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    646c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6470:	24 1b       	sub	r18, r20
    6472:	35 0b       	sbc	r19, r21
    6474:	e0 91 f3 16 	lds	r30, 0x16F3	; 0x8016f3 <__brkval>
    6478:	f0 91 f4 16 	lds	r31, 0x16F4	; 0x8016f4 <__brkval+0x1>
    647c:	e2 17       	cp	r30, r18
    647e:	f3 07       	cpc	r31, r19
    6480:	a0 f4       	brcc	.+40     	; 0x64aa <malloc+0x120>
    6482:	2e 1b       	sub	r18, r30
    6484:	3f 0b       	sbc	r19, r31
    6486:	28 17       	cp	r18, r24
    6488:	39 07       	cpc	r19, r25
    648a:	78 f0       	brcs	.+30     	; 0x64aa <malloc+0x120>
    648c:	ac 01       	movw	r20, r24
    648e:	4e 5f       	subi	r20, 0xFE	; 254
    6490:	5f 4f       	sbci	r21, 0xFF	; 255
    6492:	24 17       	cp	r18, r20
    6494:	35 07       	cpc	r19, r21
    6496:	48 f0       	brcs	.+18     	; 0x64aa <malloc+0x120>
    6498:	4e 0f       	add	r20, r30
    649a:	5f 1f       	adc	r21, r31
    649c:	50 93 f4 16 	sts	0x16F4, r21	; 0x8016f4 <__brkval+0x1>
    64a0:	40 93 f3 16 	sts	0x16F3, r20	; 0x8016f3 <__brkval>
    64a4:	81 93       	st	Z+, r24
    64a6:	91 93       	st	Z+, r25
    64a8:	02 c0       	rjmp	.+4      	; 0x64ae <malloc+0x124>
    64aa:	e0 e0       	ldi	r30, 0x00	; 0
    64ac:	f0 e0       	ldi	r31, 0x00	; 0
    64ae:	cf 01       	movw	r24, r30
    64b0:	df 91       	pop	r29
    64b2:	cf 91       	pop	r28
    64b4:	1f 91       	pop	r17
    64b6:	0f 91       	pop	r16
    64b8:	08 95       	ret

000064ba <free>:
    64ba:	cf 93       	push	r28
    64bc:	df 93       	push	r29
    64be:	00 97       	sbiw	r24, 0x00	; 0
    64c0:	09 f4       	brne	.+2      	; 0x64c4 <free+0xa>
    64c2:	81 c0       	rjmp	.+258    	; 0x65c6 <free+0x10c>
    64c4:	fc 01       	movw	r30, r24
    64c6:	32 97       	sbiw	r30, 0x02	; 2
    64c8:	13 82       	std	Z+3, r1	; 0x03
    64ca:	12 82       	std	Z+2, r1	; 0x02
    64cc:	a0 91 f5 16 	lds	r26, 0x16F5	; 0x8016f5 <__flp>
    64d0:	b0 91 f6 16 	lds	r27, 0x16F6	; 0x8016f6 <__flp+0x1>
    64d4:	10 97       	sbiw	r26, 0x00	; 0
    64d6:	81 f4       	brne	.+32     	; 0x64f8 <free+0x3e>
    64d8:	20 81       	ld	r18, Z
    64da:	31 81       	ldd	r19, Z+1	; 0x01
    64dc:	82 0f       	add	r24, r18
    64de:	93 1f       	adc	r25, r19
    64e0:	20 91 f3 16 	lds	r18, 0x16F3	; 0x8016f3 <__brkval>
    64e4:	30 91 f4 16 	lds	r19, 0x16F4	; 0x8016f4 <__brkval+0x1>
    64e8:	28 17       	cp	r18, r24
    64ea:	39 07       	cpc	r19, r25
    64ec:	51 f5       	brne	.+84     	; 0x6542 <free+0x88>
    64ee:	f0 93 f4 16 	sts	0x16F4, r31	; 0x8016f4 <__brkval+0x1>
    64f2:	e0 93 f3 16 	sts	0x16F3, r30	; 0x8016f3 <__brkval>
    64f6:	67 c0       	rjmp	.+206    	; 0x65c6 <free+0x10c>
    64f8:	ed 01       	movw	r28, r26
    64fa:	20 e0       	ldi	r18, 0x00	; 0
    64fc:	30 e0       	ldi	r19, 0x00	; 0
    64fe:	ce 17       	cp	r28, r30
    6500:	df 07       	cpc	r29, r31
    6502:	40 f4       	brcc	.+16     	; 0x6514 <free+0x5a>
    6504:	4a 81       	ldd	r20, Y+2	; 0x02
    6506:	5b 81       	ldd	r21, Y+3	; 0x03
    6508:	9e 01       	movw	r18, r28
    650a:	41 15       	cp	r20, r1
    650c:	51 05       	cpc	r21, r1
    650e:	f1 f0       	breq	.+60     	; 0x654c <free+0x92>
    6510:	ea 01       	movw	r28, r20
    6512:	f5 cf       	rjmp	.-22     	; 0x64fe <free+0x44>
    6514:	d3 83       	std	Z+3, r29	; 0x03
    6516:	c2 83       	std	Z+2, r28	; 0x02
    6518:	40 81       	ld	r20, Z
    651a:	51 81       	ldd	r21, Z+1	; 0x01
    651c:	84 0f       	add	r24, r20
    651e:	95 1f       	adc	r25, r21
    6520:	c8 17       	cp	r28, r24
    6522:	d9 07       	cpc	r29, r25
    6524:	59 f4       	brne	.+22     	; 0x653c <free+0x82>
    6526:	88 81       	ld	r24, Y
    6528:	99 81       	ldd	r25, Y+1	; 0x01
    652a:	84 0f       	add	r24, r20
    652c:	95 1f       	adc	r25, r21
    652e:	02 96       	adiw	r24, 0x02	; 2
    6530:	91 83       	std	Z+1, r25	; 0x01
    6532:	80 83       	st	Z, r24
    6534:	8a 81       	ldd	r24, Y+2	; 0x02
    6536:	9b 81       	ldd	r25, Y+3	; 0x03
    6538:	93 83       	std	Z+3, r25	; 0x03
    653a:	82 83       	std	Z+2, r24	; 0x02
    653c:	21 15       	cp	r18, r1
    653e:	31 05       	cpc	r19, r1
    6540:	29 f4       	brne	.+10     	; 0x654c <free+0x92>
    6542:	f0 93 f6 16 	sts	0x16F6, r31	; 0x8016f6 <__flp+0x1>
    6546:	e0 93 f5 16 	sts	0x16F5, r30	; 0x8016f5 <__flp>
    654a:	3d c0       	rjmp	.+122    	; 0x65c6 <free+0x10c>
    654c:	e9 01       	movw	r28, r18
    654e:	fb 83       	std	Y+3, r31	; 0x03
    6550:	ea 83       	std	Y+2, r30	; 0x02
    6552:	49 91       	ld	r20, Y+
    6554:	59 91       	ld	r21, Y+
    6556:	c4 0f       	add	r28, r20
    6558:	d5 1f       	adc	r29, r21
    655a:	ec 17       	cp	r30, r28
    655c:	fd 07       	cpc	r31, r29
    655e:	61 f4       	brne	.+24     	; 0x6578 <free+0xbe>
    6560:	80 81       	ld	r24, Z
    6562:	91 81       	ldd	r25, Z+1	; 0x01
    6564:	84 0f       	add	r24, r20
    6566:	95 1f       	adc	r25, r21
    6568:	02 96       	adiw	r24, 0x02	; 2
    656a:	e9 01       	movw	r28, r18
    656c:	99 83       	std	Y+1, r25	; 0x01
    656e:	88 83       	st	Y, r24
    6570:	82 81       	ldd	r24, Z+2	; 0x02
    6572:	93 81       	ldd	r25, Z+3	; 0x03
    6574:	9b 83       	std	Y+3, r25	; 0x03
    6576:	8a 83       	std	Y+2, r24	; 0x02
    6578:	e0 e0       	ldi	r30, 0x00	; 0
    657a:	f0 e0       	ldi	r31, 0x00	; 0
    657c:	12 96       	adiw	r26, 0x02	; 2
    657e:	8d 91       	ld	r24, X+
    6580:	9c 91       	ld	r25, X
    6582:	13 97       	sbiw	r26, 0x03	; 3
    6584:	00 97       	sbiw	r24, 0x00	; 0
    6586:	19 f0       	breq	.+6      	; 0x658e <free+0xd4>
    6588:	fd 01       	movw	r30, r26
    658a:	dc 01       	movw	r26, r24
    658c:	f7 cf       	rjmp	.-18     	; 0x657c <free+0xc2>
    658e:	8d 91       	ld	r24, X+
    6590:	9c 91       	ld	r25, X
    6592:	11 97       	sbiw	r26, 0x01	; 1
    6594:	9d 01       	movw	r18, r26
    6596:	2e 5f       	subi	r18, 0xFE	; 254
    6598:	3f 4f       	sbci	r19, 0xFF	; 255
    659a:	82 0f       	add	r24, r18
    659c:	93 1f       	adc	r25, r19
    659e:	20 91 f3 16 	lds	r18, 0x16F3	; 0x8016f3 <__brkval>
    65a2:	30 91 f4 16 	lds	r19, 0x16F4	; 0x8016f4 <__brkval+0x1>
    65a6:	28 17       	cp	r18, r24
    65a8:	39 07       	cpc	r19, r25
    65aa:	69 f4       	brne	.+26     	; 0x65c6 <free+0x10c>
    65ac:	30 97       	sbiw	r30, 0x00	; 0
    65ae:	29 f4       	brne	.+10     	; 0x65ba <free+0x100>
    65b0:	10 92 f6 16 	sts	0x16F6, r1	; 0x8016f6 <__flp+0x1>
    65b4:	10 92 f5 16 	sts	0x16F5, r1	; 0x8016f5 <__flp>
    65b8:	02 c0       	rjmp	.+4      	; 0x65be <free+0x104>
    65ba:	13 82       	std	Z+3, r1	; 0x03
    65bc:	12 82       	std	Z+2, r1	; 0x02
    65be:	b0 93 f4 16 	sts	0x16F4, r27	; 0x8016f4 <__brkval+0x1>
    65c2:	a0 93 f3 16 	sts	0x16F3, r26	; 0x8016f3 <__brkval>
    65c6:	df 91       	pop	r29
    65c8:	cf 91       	pop	r28
    65ca:	08 95       	ret

000065cc <abort>:
    65cc:	81 e0       	ldi	r24, 0x01	; 1
    65ce:	90 e0       	ldi	r25, 0x00	; 0
    65d0:	f8 94       	cli
    65d2:	58 c2       	rjmp	.+1200   	; 0x6a84 <_exit>

000065d4 <__ftoa_engine>:
    65d4:	28 30       	cpi	r18, 0x08	; 8
    65d6:	08 f0       	brcs	.+2      	; 0x65da <__ftoa_engine+0x6>
    65d8:	27 e0       	ldi	r18, 0x07	; 7
    65da:	33 27       	eor	r19, r19
    65dc:	da 01       	movw	r26, r20
    65de:	99 0f       	add	r25, r25
    65e0:	31 1d       	adc	r19, r1
    65e2:	87 fd       	sbrc	r24, 7
    65e4:	91 60       	ori	r25, 0x01	; 1
    65e6:	00 96       	adiw	r24, 0x00	; 0
    65e8:	61 05       	cpc	r22, r1
    65ea:	71 05       	cpc	r23, r1
    65ec:	39 f4       	brne	.+14     	; 0x65fc <__ftoa_engine+0x28>
    65ee:	32 60       	ori	r19, 0x02	; 2
    65f0:	2e 5f       	subi	r18, 0xFE	; 254
    65f2:	3d 93       	st	X+, r19
    65f4:	30 e3       	ldi	r19, 0x30	; 48
    65f6:	2a 95       	dec	r18
    65f8:	e1 f7       	brne	.-8      	; 0x65f2 <__ftoa_engine+0x1e>
    65fa:	08 95       	ret
    65fc:	9f 3f       	cpi	r25, 0xFF	; 255
    65fe:	30 f0       	brcs	.+12     	; 0x660c <__ftoa_engine+0x38>
    6600:	80 38       	cpi	r24, 0x80	; 128
    6602:	71 05       	cpc	r23, r1
    6604:	61 05       	cpc	r22, r1
    6606:	09 f0       	breq	.+2      	; 0x660a <__ftoa_engine+0x36>
    6608:	3c 5f       	subi	r19, 0xFC	; 252
    660a:	3c 5f       	subi	r19, 0xFC	; 252
    660c:	3d 93       	st	X+, r19
    660e:	91 30       	cpi	r25, 0x01	; 1
    6610:	08 f0       	brcs	.+2      	; 0x6614 <__ftoa_engine+0x40>
    6612:	80 68       	ori	r24, 0x80	; 128
    6614:	91 1d       	adc	r25, r1
    6616:	df 93       	push	r29
    6618:	cf 93       	push	r28
    661a:	1f 93       	push	r17
    661c:	0f 93       	push	r16
    661e:	ff 92       	push	r15
    6620:	ef 92       	push	r14
    6622:	19 2f       	mov	r17, r25
    6624:	98 7f       	andi	r25, 0xF8	; 248
    6626:	96 95       	lsr	r25
    6628:	e9 2f       	mov	r30, r25
    662a:	96 95       	lsr	r25
    662c:	96 95       	lsr	r25
    662e:	e9 0f       	add	r30, r25
    6630:	ff 27       	eor	r31, r31
    6632:	e4 50       	subi	r30, 0x04	; 4
    6634:	fe 4f       	sbci	r31, 0xFE	; 254
    6636:	99 27       	eor	r25, r25
    6638:	33 27       	eor	r19, r19
    663a:	ee 24       	eor	r14, r14
    663c:	ff 24       	eor	r15, r15
    663e:	a7 01       	movw	r20, r14
    6640:	e7 01       	movw	r28, r14
    6642:	05 90       	lpm	r0, Z+
    6644:	08 94       	sec
    6646:	07 94       	ror	r0
    6648:	28 f4       	brcc	.+10     	; 0x6654 <__ftoa_engine+0x80>
    664a:	36 0f       	add	r19, r22
    664c:	e7 1e       	adc	r14, r23
    664e:	f8 1e       	adc	r15, r24
    6650:	49 1f       	adc	r20, r25
    6652:	51 1d       	adc	r21, r1
    6654:	66 0f       	add	r22, r22
    6656:	77 1f       	adc	r23, r23
    6658:	88 1f       	adc	r24, r24
    665a:	99 1f       	adc	r25, r25
    665c:	06 94       	lsr	r0
    665e:	a1 f7       	brne	.-24     	; 0x6648 <__ftoa_engine+0x74>
    6660:	05 90       	lpm	r0, Z+
    6662:	07 94       	ror	r0
    6664:	28 f4       	brcc	.+10     	; 0x6670 <__ftoa_engine+0x9c>
    6666:	e7 0e       	add	r14, r23
    6668:	f8 1e       	adc	r15, r24
    666a:	49 1f       	adc	r20, r25
    666c:	56 1f       	adc	r21, r22
    666e:	c1 1d       	adc	r28, r1
    6670:	77 0f       	add	r23, r23
    6672:	88 1f       	adc	r24, r24
    6674:	99 1f       	adc	r25, r25
    6676:	66 1f       	adc	r22, r22
    6678:	06 94       	lsr	r0
    667a:	a1 f7       	brne	.-24     	; 0x6664 <__ftoa_engine+0x90>
    667c:	05 90       	lpm	r0, Z+
    667e:	07 94       	ror	r0
    6680:	28 f4       	brcc	.+10     	; 0x668c <__ftoa_engine+0xb8>
    6682:	f8 0e       	add	r15, r24
    6684:	49 1f       	adc	r20, r25
    6686:	56 1f       	adc	r21, r22
    6688:	c7 1f       	adc	r28, r23
    668a:	d1 1d       	adc	r29, r1
    668c:	88 0f       	add	r24, r24
    668e:	99 1f       	adc	r25, r25
    6690:	66 1f       	adc	r22, r22
    6692:	77 1f       	adc	r23, r23
    6694:	06 94       	lsr	r0
    6696:	a1 f7       	brne	.-24     	; 0x6680 <__ftoa_engine+0xac>
    6698:	05 90       	lpm	r0, Z+
    669a:	07 94       	ror	r0
    669c:	20 f4       	brcc	.+8      	; 0x66a6 <__ftoa_engine+0xd2>
    669e:	49 0f       	add	r20, r25
    66a0:	56 1f       	adc	r21, r22
    66a2:	c7 1f       	adc	r28, r23
    66a4:	d8 1f       	adc	r29, r24
    66a6:	99 0f       	add	r25, r25
    66a8:	66 1f       	adc	r22, r22
    66aa:	77 1f       	adc	r23, r23
    66ac:	88 1f       	adc	r24, r24
    66ae:	06 94       	lsr	r0
    66b0:	a9 f7       	brne	.-22     	; 0x669c <__ftoa_engine+0xc8>
    66b2:	84 91       	lpm	r24, Z
    66b4:	10 95       	com	r17
    66b6:	17 70       	andi	r17, 0x07	; 7
    66b8:	41 f0       	breq	.+16     	; 0x66ca <__ftoa_engine+0xf6>
    66ba:	d6 95       	lsr	r29
    66bc:	c7 95       	ror	r28
    66be:	57 95       	ror	r21
    66c0:	47 95       	ror	r20
    66c2:	f7 94       	ror	r15
    66c4:	e7 94       	ror	r14
    66c6:	1a 95       	dec	r17
    66c8:	c1 f7       	brne	.-16     	; 0x66ba <__ftoa_engine+0xe6>
    66ca:	e2 ea       	ldi	r30, 0xA2	; 162
    66cc:	f1 e0       	ldi	r31, 0x01	; 1
    66ce:	68 94       	set
    66d0:	15 90       	lpm	r1, Z+
    66d2:	15 91       	lpm	r17, Z+
    66d4:	35 91       	lpm	r19, Z+
    66d6:	65 91       	lpm	r22, Z+
    66d8:	95 91       	lpm	r25, Z+
    66da:	05 90       	lpm	r0, Z+
    66dc:	7f e2       	ldi	r23, 0x2F	; 47
    66de:	73 95       	inc	r23
    66e0:	e1 18       	sub	r14, r1
    66e2:	f1 0a       	sbc	r15, r17
    66e4:	43 0b       	sbc	r20, r19
    66e6:	56 0b       	sbc	r21, r22
    66e8:	c9 0b       	sbc	r28, r25
    66ea:	d0 09       	sbc	r29, r0
    66ec:	c0 f7       	brcc	.-16     	; 0x66de <__ftoa_engine+0x10a>
    66ee:	e1 0c       	add	r14, r1
    66f0:	f1 1e       	adc	r15, r17
    66f2:	43 1f       	adc	r20, r19
    66f4:	56 1f       	adc	r21, r22
    66f6:	c9 1f       	adc	r28, r25
    66f8:	d0 1d       	adc	r29, r0
    66fa:	7e f4       	brtc	.+30     	; 0x671a <__ftoa_engine+0x146>
    66fc:	70 33       	cpi	r23, 0x30	; 48
    66fe:	11 f4       	brne	.+4      	; 0x6704 <__ftoa_engine+0x130>
    6700:	8a 95       	dec	r24
    6702:	e6 cf       	rjmp	.-52     	; 0x66d0 <__ftoa_engine+0xfc>
    6704:	e8 94       	clt
    6706:	01 50       	subi	r16, 0x01	; 1
    6708:	30 f0       	brcs	.+12     	; 0x6716 <__ftoa_engine+0x142>
    670a:	08 0f       	add	r16, r24
    670c:	0a f4       	brpl	.+2      	; 0x6710 <__ftoa_engine+0x13c>
    670e:	00 27       	eor	r16, r16
    6710:	02 17       	cp	r16, r18
    6712:	08 f4       	brcc	.+2      	; 0x6716 <__ftoa_engine+0x142>
    6714:	20 2f       	mov	r18, r16
    6716:	23 95       	inc	r18
    6718:	02 2f       	mov	r16, r18
    671a:	7a 33       	cpi	r23, 0x3A	; 58
    671c:	28 f0       	brcs	.+10     	; 0x6728 <__ftoa_engine+0x154>
    671e:	79 e3       	ldi	r23, 0x39	; 57
    6720:	7d 93       	st	X+, r23
    6722:	2a 95       	dec	r18
    6724:	e9 f7       	brne	.-6      	; 0x6720 <__ftoa_engine+0x14c>
    6726:	10 c0       	rjmp	.+32     	; 0x6748 <__ftoa_engine+0x174>
    6728:	7d 93       	st	X+, r23
    672a:	2a 95       	dec	r18
    672c:	89 f6       	brne	.-94     	; 0x66d0 <__ftoa_engine+0xfc>
    672e:	06 94       	lsr	r0
    6730:	97 95       	ror	r25
    6732:	67 95       	ror	r22
    6734:	37 95       	ror	r19
    6736:	17 95       	ror	r17
    6738:	17 94       	ror	r1
    673a:	e1 18       	sub	r14, r1
    673c:	f1 0a       	sbc	r15, r17
    673e:	43 0b       	sbc	r20, r19
    6740:	56 0b       	sbc	r21, r22
    6742:	c9 0b       	sbc	r28, r25
    6744:	d0 09       	sbc	r29, r0
    6746:	98 f0       	brcs	.+38     	; 0x676e <__ftoa_engine+0x19a>
    6748:	23 95       	inc	r18
    674a:	7e 91       	ld	r23, -X
    674c:	73 95       	inc	r23
    674e:	7a 33       	cpi	r23, 0x3A	; 58
    6750:	08 f0       	brcs	.+2      	; 0x6754 <__ftoa_engine+0x180>
    6752:	70 e3       	ldi	r23, 0x30	; 48
    6754:	7c 93       	st	X, r23
    6756:	20 13       	cpse	r18, r16
    6758:	b8 f7       	brcc	.-18     	; 0x6748 <__ftoa_engine+0x174>
    675a:	7e 91       	ld	r23, -X
    675c:	70 61       	ori	r23, 0x10	; 16
    675e:	7d 93       	st	X+, r23
    6760:	30 f0       	brcs	.+12     	; 0x676e <__ftoa_engine+0x19a>
    6762:	83 95       	inc	r24
    6764:	71 e3       	ldi	r23, 0x31	; 49
    6766:	7d 93       	st	X+, r23
    6768:	70 e3       	ldi	r23, 0x30	; 48
    676a:	2a 95       	dec	r18
    676c:	e1 f7       	brne	.-8      	; 0x6766 <__ftoa_engine+0x192>
    676e:	11 24       	eor	r1, r1
    6770:	ef 90       	pop	r14
    6772:	ff 90       	pop	r15
    6774:	0f 91       	pop	r16
    6776:	1f 91       	pop	r17
    6778:	cf 91       	pop	r28
    677a:	df 91       	pop	r29
    677c:	99 27       	eor	r25, r25
    677e:	87 fd       	sbrc	r24, 7
    6780:	90 95       	com	r25
    6782:	08 95       	ret

00006784 <strnlen_P>:
    6784:	fc 01       	movw	r30, r24
    6786:	05 90       	lpm	r0, Z+
    6788:	61 50       	subi	r22, 0x01	; 1
    678a:	70 40       	sbci	r23, 0x00	; 0
    678c:	01 10       	cpse	r0, r1
    678e:	d8 f7       	brcc	.-10     	; 0x6786 <strnlen_P+0x2>
    6790:	80 95       	com	r24
    6792:	90 95       	com	r25
    6794:	8e 0f       	add	r24, r30
    6796:	9f 1f       	adc	r25, r31
    6798:	08 95       	ret

0000679a <memcpy>:
    679a:	fb 01       	movw	r30, r22
    679c:	dc 01       	movw	r26, r24
    679e:	02 c0       	rjmp	.+4      	; 0x67a4 <memcpy+0xa>
    67a0:	01 90       	ld	r0, Z+
    67a2:	0d 92       	st	X+, r0
    67a4:	41 50       	subi	r20, 0x01	; 1
    67a6:	50 40       	sbci	r21, 0x00	; 0
    67a8:	d8 f7       	brcc	.-10     	; 0x67a0 <memcpy+0x6>
    67aa:	08 95       	ret

000067ac <memset>:
    67ac:	dc 01       	movw	r26, r24
    67ae:	01 c0       	rjmp	.+2      	; 0x67b2 <memset+0x6>
    67b0:	6d 93       	st	X+, r22
    67b2:	41 50       	subi	r20, 0x01	; 1
    67b4:	50 40       	sbci	r21, 0x00	; 0
    67b6:	e0 f7       	brcc	.-8      	; 0x67b0 <memset+0x4>
    67b8:	08 95       	ret

000067ba <strcasestr>:
    67ba:	fb 01       	movw	r30, r22
    67bc:	51 91       	ld	r21, Z+
    67be:	55 23       	and	r21, r21
    67c0:	b1 f0       	breq	.+44     	; 0x67ee <strcasestr+0x34>
    67c2:	bf 01       	movw	r22, r30
    67c4:	dc 01       	movw	r26, r24
    67c6:	05 2e       	mov	r0, r21
    67c8:	4d 91       	ld	r20, X+
    67ca:	44 23       	and	r20, r20
    67cc:	69 f0       	breq	.+26     	; 0x67e8 <strcasestr+0x2e>
    67ce:	10 d0       	rcall	.+32     	; 0x67f0 <strcasestr+0x36>
    67d0:	d9 f7       	brne	.-10     	; 0x67c8 <strcasestr+0xe>
    67d2:	cd 01       	movw	r24, r26
    67d4:	01 90       	ld	r0, Z+
    67d6:	00 20       	and	r0, r0
    67d8:	49 f0       	breq	.+18     	; 0x67ec <strcasestr+0x32>
    67da:	4d 91       	ld	r20, X+
    67dc:	41 11       	cpse	r20, r1
    67de:	08 d0       	rcall	.+16     	; 0x67f0 <strcasestr+0x36>
    67e0:	c9 f3       	breq	.-14     	; 0x67d4 <strcasestr+0x1a>
    67e2:	fb 01       	movw	r30, r22
    67e4:	41 11       	cpse	r20, r1
    67e6:	ee cf       	rjmp	.-36     	; 0x67c4 <strcasestr+0xa>
    67e8:	81 e0       	ldi	r24, 0x01	; 1
    67ea:	90 e0       	ldi	r25, 0x00	; 0
    67ec:	01 97       	sbiw	r24, 0x01	; 1
    67ee:	08 95       	ret
    67f0:	40 25       	eor	r20, r0
    67f2:	39 f0       	breq	.+14     	; 0x6802 <strcasestr+0x48>
    67f4:	40 32       	cpi	r20, 0x20	; 32
    67f6:	29 f4       	brne	.+10     	; 0x6802 <strcasestr+0x48>
    67f8:	40 29       	or	r20, r0
    67fa:	4b 57       	subi	r20, 0x7B	; 123
    67fc:	46 5e       	subi	r20, 0xE6	; 230
    67fe:	08 f0       	brcs	.+2      	; 0x6802 <strcasestr+0x48>
    6800:	18 94       	sez
    6802:	08 95       	ret

00006804 <strcat>:
    6804:	fb 01       	movw	r30, r22
    6806:	dc 01       	movw	r26, r24
    6808:	0d 90       	ld	r0, X+
    680a:	00 20       	and	r0, r0
    680c:	e9 f7       	brne	.-6      	; 0x6808 <strcat+0x4>
    680e:	11 97       	sbiw	r26, 0x01	; 1
    6810:	01 90       	ld	r0, Z+
    6812:	0d 92       	st	X+, r0
    6814:	00 20       	and	r0, r0
    6816:	e1 f7       	brne	.-8      	; 0x6810 <strcat+0xc>
    6818:	08 95       	ret

0000681a <strcpy>:
    681a:	fb 01       	movw	r30, r22
    681c:	dc 01       	movw	r26, r24
    681e:	01 90       	ld	r0, Z+
    6820:	0d 92       	st	X+, r0
    6822:	00 20       	and	r0, r0
    6824:	e1 f7       	brne	.-8      	; 0x681e <strcpy+0x4>
    6826:	08 95       	ret

00006828 <strncasecmp>:
    6828:	fb 01       	movw	r30, r22
    682a:	dc 01       	movw	r26, r24
    682c:	41 50       	subi	r20, 0x01	; 1
    682e:	50 40       	sbci	r21, 0x00	; 0
    6830:	88 f0       	brcs	.+34     	; 0x6854 <strncasecmp+0x2c>
    6832:	8d 91       	ld	r24, X+
    6834:	81 34       	cpi	r24, 0x41	; 65
    6836:	1c f0       	brlt	.+6      	; 0x683e <strncasecmp+0x16>
    6838:	8b 35       	cpi	r24, 0x5B	; 91
    683a:	0c f4       	brge	.+2      	; 0x683e <strncasecmp+0x16>
    683c:	80 5e       	subi	r24, 0xE0	; 224
    683e:	61 91       	ld	r22, Z+
    6840:	61 34       	cpi	r22, 0x41	; 65
    6842:	1c f0       	brlt	.+6      	; 0x684a <strncasecmp+0x22>
    6844:	6b 35       	cpi	r22, 0x5B	; 91
    6846:	0c f4       	brge	.+2      	; 0x684a <strncasecmp+0x22>
    6848:	60 5e       	subi	r22, 0xE0	; 224
    684a:	86 1b       	sub	r24, r22
    684c:	61 11       	cpse	r22, r1
    684e:	71 f3       	breq	.-36     	; 0x682c <strncasecmp+0x4>
    6850:	99 0b       	sbc	r25, r25
    6852:	08 95       	ret
    6854:	88 1b       	sub	r24, r24
    6856:	fc cf       	rjmp	.-8      	; 0x6850 <strncasecmp+0x28>

00006858 <strnlen>:
    6858:	fc 01       	movw	r30, r24
    685a:	61 50       	subi	r22, 0x01	; 1
    685c:	70 40       	sbci	r23, 0x00	; 0
    685e:	01 90       	ld	r0, Z+
    6860:	01 10       	cpse	r0, r1
    6862:	d8 f7       	brcc	.-10     	; 0x685a <strnlen+0x2>
    6864:	80 95       	com	r24
    6866:	90 95       	com	r25
    6868:	8e 0f       	add	r24, r30
    686a:	9f 1f       	adc	r25, r31
    686c:	08 95       	ret

0000686e <fputc>:
    686e:	0f 93       	push	r16
    6870:	1f 93       	push	r17
    6872:	cf 93       	push	r28
    6874:	df 93       	push	r29
    6876:	fb 01       	movw	r30, r22
    6878:	23 81       	ldd	r18, Z+3	; 0x03
    687a:	21 fd       	sbrc	r18, 1
    687c:	03 c0       	rjmp	.+6      	; 0x6884 <fputc+0x16>
    687e:	8f ef       	ldi	r24, 0xFF	; 255
    6880:	9f ef       	ldi	r25, 0xFF	; 255
    6882:	2c c0       	rjmp	.+88     	; 0x68dc <fputc+0x6e>
    6884:	22 ff       	sbrs	r18, 2
    6886:	16 c0       	rjmp	.+44     	; 0x68b4 <fputc+0x46>
    6888:	46 81       	ldd	r20, Z+6	; 0x06
    688a:	57 81       	ldd	r21, Z+7	; 0x07
    688c:	24 81       	ldd	r18, Z+4	; 0x04
    688e:	35 81       	ldd	r19, Z+5	; 0x05
    6890:	42 17       	cp	r20, r18
    6892:	53 07       	cpc	r21, r19
    6894:	44 f4       	brge	.+16     	; 0x68a6 <fputc+0x38>
    6896:	a0 81       	ld	r26, Z
    6898:	b1 81       	ldd	r27, Z+1	; 0x01
    689a:	9d 01       	movw	r18, r26
    689c:	2f 5f       	subi	r18, 0xFF	; 255
    689e:	3f 4f       	sbci	r19, 0xFF	; 255
    68a0:	31 83       	std	Z+1, r19	; 0x01
    68a2:	20 83       	st	Z, r18
    68a4:	8c 93       	st	X, r24
    68a6:	26 81       	ldd	r18, Z+6	; 0x06
    68a8:	37 81       	ldd	r19, Z+7	; 0x07
    68aa:	2f 5f       	subi	r18, 0xFF	; 255
    68ac:	3f 4f       	sbci	r19, 0xFF	; 255
    68ae:	37 83       	std	Z+7, r19	; 0x07
    68b0:	26 83       	std	Z+6, r18	; 0x06
    68b2:	14 c0       	rjmp	.+40     	; 0x68dc <fputc+0x6e>
    68b4:	8b 01       	movw	r16, r22
    68b6:	ec 01       	movw	r28, r24
    68b8:	fb 01       	movw	r30, r22
    68ba:	00 84       	ldd	r0, Z+8	; 0x08
    68bc:	f1 85       	ldd	r31, Z+9	; 0x09
    68be:	e0 2d       	mov	r30, r0
    68c0:	19 95       	eicall
    68c2:	89 2b       	or	r24, r25
    68c4:	e1 f6       	brne	.-72     	; 0x687e <fputc+0x10>
    68c6:	d8 01       	movw	r26, r16
    68c8:	16 96       	adiw	r26, 0x06	; 6
    68ca:	8d 91       	ld	r24, X+
    68cc:	9c 91       	ld	r25, X
    68ce:	17 97       	sbiw	r26, 0x07	; 7
    68d0:	01 96       	adiw	r24, 0x01	; 1
    68d2:	17 96       	adiw	r26, 0x07	; 7
    68d4:	9c 93       	st	X, r25
    68d6:	8e 93       	st	-X, r24
    68d8:	16 97       	sbiw	r26, 0x06	; 6
    68da:	ce 01       	movw	r24, r28
    68dc:	df 91       	pop	r29
    68de:	cf 91       	pop	r28
    68e0:	1f 91       	pop	r17
    68e2:	0f 91       	pop	r16
    68e4:	08 95       	ret

000068e6 <printf>:
    68e6:	cf 93       	push	r28
    68e8:	df 93       	push	r29
    68ea:	cd b7       	in	r28, 0x3d	; 61
    68ec:	de b7       	in	r29, 0x3e	; 62
    68ee:	ae 01       	movw	r20, r28
    68f0:	4a 5f       	subi	r20, 0xFA	; 250
    68f2:	5f 4f       	sbci	r21, 0xFF	; 255
    68f4:	fa 01       	movw	r30, r20
    68f6:	61 91       	ld	r22, Z+
    68f8:	71 91       	ld	r23, Z+
    68fa:	af 01       	movw	r20, r30
    68fc:	80 91 f9 16 	lds	r24, 0x16F9	; 0x8016f9 <__iob+0x2>
    6900:	90 91 fa 16 	lds	r25, 0x16FA	; 0x8016fa <__iob+0x3>
    6904:	3f d9       	rcall	.-3458   	; 0x5b84 <vfprintf>
    6906:	df 91       	pop	r29
    6908:	cf 91       	pop	r28
    690a:	08 95       	ret

0000690c <puts>:
    690c:	0f 93       	push	r16
    690e:	1f 93       	push	r17
    6910:	cf 93       	push	r28
    6912:	df 93       	push	r29
    6914:	e0 91 f9 16 	lds	r30, 0x16F9	; 0x8016f9 <__iob+0x2>
    6918:	f0 91 fa 16 	lds	r31, 0x16FA	; 0x8016fa <__iob+0x3>
    691c:	23 81       	ldd	r18, Z+3	; 0x03
    691e:	21 ff       	sbrs	r18, 1
    6920:	1b c0       	rjmp	.+54     	; 0x6958 <puts+0x4c>
    6922:	8c 01       	movw	r16, r24
    6924:	d0 e0       	ldi	r29, 0x00	; 0
    6926:	c0 e0       	ldi	r28, 0x00	; 0
    6928:	f8 01       	movw	r30, r16
    692a:	81 91       	ld	r24, Z+
    692c:	8f 01       	movw	r16, r30
    692e:	60 91 f9 16 	lds	r22, 0x16F9	; 0x8016f9 <__iob+0x2>
    6932:	70 91 fa 16 	lds	r23, 0x16FA	; 0x8016fa <__iob+0x3>
    6936:	db 01       	movw	r26, r22
    6938:	18 96       	adiw	r26, 0x08	; 8
    693a:	ed 91       	ld	r30, X+
    693c:	fc 91       	ld	r31, X
    693e:	19 97       	sbiw	r26, 0x09	; 9
    6940:	88 23       	and	r24, r24
    6942:	31 f0       	breq	.+12     	; 0x6950 <puts+0x44>
    6944:	19 95       	eicall
    6946:	89 2b       	or	r24, r25
    6948:	79 f3       	breq	.-34     	; 0x6928 <puts+0x1c>
    694a:	df ef       	ldi	r29, 0xFF	; 255
    694c:	cf ef       	ldi	r28, 0xFF	; 255
    694e:	ec cf       	rjmp	.-40     	; 0x6928 <puts+0x1c>
    6950:	8a e0       	ldi	r24, 0x0A	; 10
    6952:	19 95       	eicall
    6954:	89 2b       	or	r24, r25
    6956:	19 f0       	breq	.+6      	; 0x695e <puts+0x52>
    6958:	8f ef       	ldi	r24, 0xFF	; 255
    695a:	9f ef       	ldi	r25, 0xFF	; 255
    695c:	02 c0       	rjmp	.+4      	; 0x6962 <puts+0x56>
    695e:	8d 2f       	mov	r24, r29
    6960:	9c 2f       	mov	r25, r28
    6962:	df 91       	pop	r29
    6964:	cf 91       	pop	r28
    6966:	1f 91       	pop	r17
    6968:	0f 91       	pop	r16
    696a:	08 95       	ret

0000696c <sprintf>:
    696c:	0f 93       	push	r16
    696e:	1f 93       	push	r17
    6970:	cf 93       	push	r28
    6972:	df 93       	push	r29
    6974:	cd b7       	in	r28, 0x3d	; 61
    6976:	de b7       	in	r29, 0x3e	; 62
    6978:	2e 97       	sbiw	r28, 0x0e	; 14
    697a:	0f b6       	in	r0, 0x3f	; 63
    697c:	f8 94       	cli
    697e:	de bf       	out	0x3e, r29	; 62
    6980:	0f be       	out	0x3f, r0	; 63
    6982:	cd bf       	out	0x3d, r28	; 61
    6984:	0e 89       	ldd	r16, Y+22	; 0x16
    6986:	1f 89       	ldd	r17, Y+23	; 0x17
    6988:	86 e0       	ldi	r24, 0x06	; 6
    698a:	8c 83       	std	Y+4, r24	; 0x04
    698c:	1a 83       	std	Y+2, r17	; 0x02
    698e:	09 83       	std	Y+1, r16	; 0x01
    6990:	8f ef       	ldi	r24, 0xFF	; 255
    6992:	9f e7       	ldi	r25, 0x7F	; 127
    6994:	9e 83       	std	Y+6, r25	; 0x06
    6996:	8d 83       	std	Y+5, r24	; 0x05
    6998:	ae 01       	movw	r20, r28
    699a:	46 5e       	subi	r20, 0xE6	; 230
    699c:	5f 4f       	sbci	r21, 0xFF	; 255
    699e:	68 8d       	ldd	r22, Y+24	; 0x18
    69a0:	79 8d       	ldd	r23, Y+25	; 0x19
    69a2:	ce 01       	movw	r24, r28
    69a4:	01 96       	adiw	r24, 0x01	; 1
    69a6:	ee d8       	rcall	.-3620   	; 0x5b84 <vfprintf>
    69a8:	ef 81       	ldd	r30, Y+7	; 0x07
    69aa:	f8 85       	ldd	r31, Y+8	; 0x08
    69ac:	e0 0f       	add	r30, r16
    69ae:	f1 1f       	adc	r31, r17
    69b0:	10 82       	st	Z, r1
    69b2:	2e 96       	adiw	r28, 0x0e	; 14
    69b4:	0f b6       	in	r0, 0x3f	; 63
    69b6:	f8 94       	cli
    69b8:	de bf       	out	0x3e, r29	; 62
    69ba:	0f be       	out	0x3f, r0	; 63
    69bc:	cd bf       	out	0x3d, r28	; 61
    69be:	df 91       	pop	r29
    69c0:	cf 91       	pop	r28
    69c2:	1f 91       	pop	r17
    69c4:	0f 91       	pop	r16
    69c6:	08 95       	ret

000069c8 <__ultoa_invert>:
    69c8:	fa 01       	movw	r30, r20
    69ca:	aa 27       	eor	r26, r26
    69cc:	28 30       	cpi	r18, 0x08	; 8
    69ce:	51 f1       	breq	.+84     	; 0x6a24 <__ultoa_invert+0x5c>
    69d0:	20 31       	cpi	r18, 0x10	; 16
    69d2:	81 f1       	breq	.+96     	; 0x6a34 <__ultoa_invert+0x6c>
    69d4:	e8 94       	clt
    69d6:	6f 93       	push	r22
    69d8:	6e 7f       	andi	r22, 0xFE	; 254
    69da:	6e 5f       	subi	r22, 0xFE	; 254
    69dc:	7f 4f       	sbci	r23, 0xFF	; 255
    69de:	8f 4f       	sbci	r24, 0xFF	; 255
    69e0:	9f 4f       	sbci	r25, 0xFF	; 255
    69e2:	af 4f       	sbci	r26, 0xFF	; 255
    69e4:	b1 e0       	ldi	r27, 0x01	; 1
    69e6:	3e d0       	rcall	.+124    	; 0x6a64 <__ultoa_invert+0x9c>
    69e8:	b4 e0       	ldi	r27, 0x04	; 4
    69ea:	3c d0       	rcall	.+120    	; 0x6a64 <__ultoa_invert+0x9c>
    69ec:	67 0f       	add	r22, r23
    69ee:	78 1f       	adc	r23, r24
    69f0:	89 1f       	adc	r24, r25
    69f2:	9a 1f       	adc	r25, r26
    69f4:	a1 1d       	adc	r26, r1
    69f6:	68 0f       	add	r22, r24
    69f8:	79 1f       	adc	r23, r25
    69fa:	8a 1f       	adc	r24, r26
    69fc:	91 1d       	adc	r25, r1
    69fe:	a1 1d       	adc	r26, r1
    6a00:	6a 0f       	add	r22, r26
    6a02:	71 1d       	adc	r23, r1
    6a04:	81 1d       	adc	r24, r1
    6a06:	91 1d       	adc	r25, r1
    6a08:	a1 1d       	adc	r26, r1
    6a0a:	20 d0       	rcall	.+64     	; 0x6a4c <__ultoa_invert+0x84>
    6a0c:	09 f4       	brne	.+2      	; 0x6a10 <__ultoa_invert+0x48>
    6a0e:	68 94       	set
    6a10:	3f 91       	pop	r19
    6a12:	2a e0       	ldi	r18, 0x0A	; 10
    6a14:	26 9f       	mul	r18, r22
    6a16:	11 24       	eor	r1, r1
    6a18:	30 19       	sub	r19, r0
    6a1a:	30 5d       	subi	r19, 0xD0	; 208
    6a1c:	31 93       	st	Z+, r19
    6a1e:	de f6       	brtc	.-74     	; 0x69d6 <__ultoa_invert+0xe>
    6a20:	cf 01       	movw	r24, r30
    6a22:	08 95       	ret
    6a24:	46 2f       	mov	r20, r22
    6a26:	47 70       	andi	r20, 0x07	; 7
    6a28:	40 5d       	subi	r20, 0xD0	; 208
    6a2a:	41 93       	st	Z+, r20
    6a2c:	b3 e0       	ldi	r27, 0x03	; 3
    6a2e:	0f d0       	rcall	.+30     	; 0x6a4e <__ultoa_invert+0x86>
    6a30:	c9 f7       	brne	.-14     	; 0x6a24 <__ultoa_invert+0x5c>
    6a32:	f6 cf       	rjmp	.-20     	; 0x6a20 <__ultoa_invert+0x58>
    6a34:	46 2f       	mov	r20, r22
    6a36:	4f 70       	andi	r20, 0x0F	; 15
    6a38:	40 5d       	subi	r20, 0xD0	; 208
    6a3a:	4a 33       	cpi	r20, 0x3A	; 58
    6a3c:	18 f0       	brcs	.+6      	; 0x6a44 <__ultoa_invert+0x7c>
    6a3e:	49 5d       	subi	r20, 0xD9	; 217
    6a40:	31 fd       	sbrc	r19, 1
    6a42:	40 52       	subi	r20, 0x20	; 32
    6a44:	41 93       	st	Z+, r20
    6a46:	02 d0       	rcall	.+4      	; 0x6a4c <__ultoa_invert+0x84>
    6a48:	a9 f7       	brne	.-22     	; 0x6a34 <__ultoa_invert+0x6c>
    6a4a:	ea cf       	rjmp	.-44     	; 0x6a20 <__ultoa_invert+0x58>
    6a4c:	b4 e0       	ldi	r27, 0x04	; 4
    6a4e:	a6 95       	lsr	r26
    6a50:	97 95       	ror	r25
    6a52:	87 95       	ror	r24
    6a54:	77 95       	ror	r23
    6a56:	67 95       	ror	r22
    6a58:	ba 95       	dec	r27
    6a5a:	c9 f7       	brne	.-14     	; 0x6a4e <__ultoa_invert+0x86>
    6a5c:	00 97       	sbiw	r24, 0x00	; 0
    6a5e:	61 05       	cpc	r22, r1
    6a60:	71 05       	cpc	r23, r1
    6a62:	08 95       	ret
    6a64:	9b 01       	movw	r18, r22
    6a66:	ac 01       	movw	r20, r24
    6a68:	0a 2e       	mov	r0, r26
    6a6a:	06 94       	lsr	r0
    6a6c:	57 95       	ror	r21
    6a6e:	47 95       	ror	r20
    6a70:	37 95       	ror	r19
    6a72:	27 95       	ror	r18
    6a74:	ba 95       	dec	r27
    6a76:	c9 f7       	brne	.-14     	; 0x6a6a <__ultoa_invert+0xa2>
    6a78:	62 0f       	add	r22, r18
    6a7a:	73 1f       	adc	r23, r19
    6a7c:	84 1f       	adc	r24, r20
    6a7e:	95 1f       	adc	r25, r21
    6a80:	a0 1d       	adc	r26, r0
    6a82:	08 95       	ret

00006a84 <_exit>:
    6a84:	f8 94       	cli

00006a86 <__stop_program>:
    6a86:	ff cf       	rjmp	.-2      	; 0x6a86 <__stop_program>


4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000065c  00800200  00006a9c  00006b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006a9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f72  0080085c  0080085c  0000718c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000718c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000071e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b88  00000000  00000000  00007228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dfa6  00000000  00000000  00007db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003973  00000000  00000000  00015d56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006f36  00000000  00000000  000196c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000028e0  00000000  00000000  00020600  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004537  00000000  00000000  00022ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c888  00000000  00000000  00027417  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000aa8  00000000  00000000  00033c9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7e c7       	rjmp	.+3836   	; 0xf2e <__vector_12>
      32:	00 00       	nop
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 ea 25 	jmp	0x4bd4	; 0x4bd4 <__vector_25>
      68:	0c 94 3c 26 	jmp	0x4c78	; 0x4c78 <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 80 26 	jmp	0x4d00	; 0x4d00 <__vector_36>
      94:	0c 94 d2 26 	jmp	0x4da4	; 0x4da4 <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 1e 2b 	jmp	0x563c	; 0x563c <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 16 27 	jmp	0x4e2c	; 0x4e2c <__vector_51>
      d0:	0c 94 68 27 	jmp	0x4ed0	; 0x4ed0 <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 ac 27 	jmp	0x4f58	; 0x4f58 <__vector_54>
      dc:	0c 94 fe 27 	jmp	0x4ffc	; 0x4ffc <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ae 1b       	sub	r26, r30
      e6:	ae 1b       	sub	r26, r30
      e8:	ae 1b       	sub	r26, r30
      ea:	e5 1b       	sub	r30, r21
      ec:	ed 1b       	sub	r30, r29
      ee:	02 1c       	adc	r0, r2
      f0:	ae 1b       	sub	r26, r30
      f2:	ae 1b       	sub	r26, r30
      f4:	e5 1b       	sub	r30, r21
      f6:	ed 1b       	sub	r30, r29
      f8:	40 2b       	or	r20, r16
      fa:	b0 2b       	or	r27, r16
      fc:	b0 2b       	or	r27, r16
      fe:	b0 2b       	or	r27, r16
     100:	b0 2b       	or	r27, r16
     102:	b0 2b       	or	r27, r16
     104:	b0 2b       	or	r27, r16
     106:	b0 2b       	or	r27, r16
     108:	40 2b       	or	r20, r16
     10a:	b0 2b       	or	r27, r16
     10c:	b0 2b       	or	r27, r16
     10e:	b0 2b       	or	r27, r16
     110:	b0 2b       	or	r27, r16
     112:	b0 2b       	or	r27, r16
     114:	b0 2b       	or	r27, r16
     116:	b0 2b       	or	r27, r16
     118:	42 2b       	or	r20, r18
     11a:	b0 2b       	or	r27, r16
     11c:	b0 2b       	or	r27, r16
     11e:	b0 2b       	or	r27, r16
     120:	b0 2b       	or	r27, r16
     122:	b0 2b       	or	r27, r16
     124:	b0 2b       	or	r27, r16
     126:	b0 2b       	or	r27, r16
     128:	b0 2b       	or	r27, r16
     12a:	b0 2b       	or	r27, r16
     12c:	b0 2b       	or	r27, r16
     12e:	b0 2b       	or	r27, r16
     130:	b0 2b       	or	r27, r16
     132:	b0 2b       	or	r27, r16
     134:	b0 2b       	or	r27, r16
     136:	b0 2b       	or	r27, r16
     138:	42 2b       	or	r20, r18
     13a:	b0 2b       	or	r27, r16
     13c:	b0 2b       	or	r27, r16
     13e:	b0 2b       	or	r27, r16
     140:	b0 2b       	or	r27, r16
     142:	b0 2b       	or	r27, r16
     144:	b0 2b       	or	r27, r16
     146:	b0 2b       	or	r27, r16
     148:	b0 2b       	or	r27, r16
     14a:	b0 2b       	or	r27, r16
     14c:	b0 2b       	or	r27, r16
     14e:	b0 2b       	or	r27, r16
     150:	b0 2b       	or	r27, r16
     152:	b0 2b       	or	r27, r16
     154:	b0 2b       	or	r27, r16
     156:	b0 2b       	or	r27, r16
     158:	ac 2b       	or	r26, r28
     15a:	b0 2b       	or	r27, r16
     15c:	b0 2b       	or	r27, r16
     15e:	b0 2b       	or	r27, r16
     160:	b0 2b       	or	r27, r16
     162:	b0 2b       	or	r27, r16
     164:	b0 2b       	or	r27, r16
     166:	b0 2b       	or	r27, r16
     168:	77 2b       	or	r23, r23
     16a:	b0 2b       	or	r27, r16
     16c:	b0 2b       	or	r27, r16
     16e:	b0 2b       	or	r27, r16
     170:	b0 2b       	or	r27, r16
     172:	b0 2b       	or	r27, r16
     174:	b0 2b       	or	r27, r16
     176:	b0 2b       	or	r27, r16
     178:	b0 2b       	or	r27, r16
     17a:	b0 2b       	or	r27, r16
     17c:	b0 2b       	or	r27, r16
     17e:	b0 2b       	or	r27, r16
     180:	b0 2b       	or	r27, r16
     182:	b0 2b       	or	r27, r16
     184:	b0 2b       	or	r27, r16
     186:	b0 2b       	or	r27, r16
     188:	6b 2b       	or	r22, r27
     18a:	b0 2b       	or	r27, r16
     18c:	b0 2b       	or	r27, r16
     18e:	b0 2b       	or	r27, r16
     190:	b0 2b       	or	r27, r16
     192:	b0 2b       	or	r27, r16
     194:	b0 2b       	or	r27, r16
     196:	b0 2b       	or	r27, r16
     198:	8f 2b       	or	r24, r31

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <prvCheckTasksWaitingTermination>
     2a0:	80 91 55 15 	lds	r24, 0x1555	; 0x801555 <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	7c d5       	rcall	.+2808   	; 0xda2 <vPortYield>
     2aa:	0e 94 2b 1c 	call	0x3856	; 0x3856 <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 2b 19 	call	0x3256	; 0x3256 <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 20 1b 	call	0x3640	; 0x3640 <prvProcessTimerOrBlockTask>
     2c8:	0e 94 77 1b 	call	0x36ee	; 0x36ee <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	18 e0       	ldi	r17, 0x08	; 8
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	ec e9       	ldi	r30, 0x9C	; 156
     2e6:	fa e6       	ldi	r31, 0x6A	; 106
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	ac 35       	cpi	r26, 0x5C	; 92
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	27 e1       	ldi	r18, 0x17	; 23
     2fa:	ac e5       	ldi	r26, 0x5C	; 92
     2fc:	b8 e0       	ldi	r27, 0x08	; 8
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	ae 3c       	cpi	r26, 0xCE	; 206
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 de 1c 	call	0x39bc	; 0x39bc <main>
     30c:	0c 94 4c 35 	jmp	0x6a98	; 0x6a98 <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <Application_getEventGroup>:
// Declare a variable to hold the created event group.
EventGroupHandle_t xCreatedEventGroup;

EventGroupHandle_t Application_getEventGroup(){
	return xCreatedEventGroup;
}
     312:	80 91 b0 17 	lds	r24, 0x17B0	; 0x8017b0 <xCreatedEventGroup>
     316:	90 91 b1 17 	lds	r25, 0x17B1	; 0x8017b1 <xCreatedEventGroup+0x1>
     31a:	08 95       	ret

0000031c <Application_aFunctionToClearBits>:
void Application_aFunctionToClearBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Clear bit 0 and bit 4 in xEventGroup. */
  uxBits = xEventGroupClearBits(
     31c:	41 e1       	ldi	r20, 0x11	; 17
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	6c c2       	rjmp	.+1240   	; 0x7fe <xEventGroupClearBits>
     326:	08 95       	ret

00000328 <Application_aFunctionToWaitBits>:
EventGroupHandle_t Application_getEventGroup(){
	return xCreatedEventGroup;
}

void Application_aFunctionToWaitBits( EventGroupHandle_t xEventGroup )
{
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	ec 01       	movw	r28, r24
EventBits_t uxBits;
const TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;

  /* Wait a maximum of 100ms for either bit 0 or bit 4 to be set within
  the event group.  Clear the bits before exiting. */
  uxBits = xEventGroupWaitBits(
     338:	0f 2e       	mov	r0, r31
     33a:	f6 e0       	ldi	r31, 0x06	; 6
     33c:	cf 2e       	mov	r12, r31
     33e:	d1 2c       	mov	r13, r1
     340:	e1 2c       	mov	r14, r1
     342:	f1 2c       	mov	r15, r1
     344:	f0 2d       	mov	r31, r0
     346:	01 e0       	ldi	r16, 0x01	; 1
     348:	20 e0       	ldi	r18, 0x00	; 0
     34a:	41 e1       	ldi	r20, 0x11	; 17
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	b5 d1       	rcall	.+874    	; 0x6be <xEventGroupWaitBits>
            BIT_0 | BIT_4, /* The bits within the event group to wait for. */
            pdFALSE,        /* BIT_0 & BIT_4 should not be cleared before returning. */
            pdTRUE,       /* Wait for both bits, either bit will do. */
            xTicksToWait );/* Wait a maximum of 100ms for either bit to be set. */

  if( ( uxBits & ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )
     354:	dc 01       	movw	r26, r24
     356:	cb 01       	movw	r24, r22
     358:	81 71       	andi	r24, 0x11	; 17
     35a:	99 27       	eor	r25, r25
     35c:	aa 27       	eor	r26, r26
     35e:	bb 27       	eor	r27, r27
     360:	41 97       	sbiw	r24, 0x11	; 17
     362:	a1 05       	cpc	r26, r1
     364:	b1 05       	cpc	r27, r1
     366:	a9 f4       	brne	.+42     	; 0x392 <Application_aFunctionToWaitBits+0x6a>
  {
      /* xEventGroupWaitBits() returned because both bits were set. */
	  printf("setting the bits, they are set");
     368:	8f e6       	ldi	r24, 0x6F	; 111
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	9f 93       	push	r25
     36e:	8f 93       	push	r24
     370:	0e 94 7d 34 	call	0x68fa	; 0x68fa <printf>
	  SensorDataPackageHandler_SetHumidity(hih820_getHumidityInUint16());
     374:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <hih820_getHumidityInUint16>
     378:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <SensorDataPackageHandler_SetHumidity>
	  SensorDataPackageHandler_SetTemperature(hih820_getTemperatureInUint16());
     37c:	0e 94 81 1c 	call	0x3902	; 0x3902 <hih820_getTemperatureInUint16>
     380:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <SensorDataPackageHandler_SetTemperature>
	  SensorDataPackageHandler_SetCO2(CO2Sensor_getCO2InUint16());
     384:	5f d0       	rcall	.+190    	; 0x444 <CO2Sensor_getCO2InUint16>
     386:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <SensorDataPackageHandler_SetCO2>
	  Application_aFunctionToClearBits( xEventGroup );
     38a:	ce 01       	movw	r24, r28
     38c:	c7 df       	rcall	.-114    	; 0x31c <Application_aFunctionToClearBits>
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
  else
  {
      /* xEventGroupWaitBits() returned because xTicksToWait ticks passed
      without either BIT_0 or BIT_4 becoming set. */
  }
}
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	0f 91       	pop	r16
     398:	ff 90       	pop	r15
     39a:	ef 90       	pop	r14
     39c:	df 90       	pop	r13
     39e:	cf 90       	pop	r12
     3a0:	08 95       	ret

000003a2 <Application_handler_task>:
	,  Application_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void Application_handler_task(void *pvParameters)
{
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	00 d0       	rcall	.+0      	; 0x3a8 <Application_handler_task+0x6>
     3a8:	1f 92       	push	r1
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
	printf("startApplication");
     3ae:	8e e8       	ldi	r24, 0x8E	; 142
     3b0:	92 e0       	ldi	r25, 0x02	; 2
     3b2:	9f 93       	push	r25
     3b4:	8f 93       	push	r24
     3b6:	0e 94 7d 34 	call	0x68fa	; 0x68fa <printf>
	(void)pvParameters;
	xCreatedEventGroup = xEventGroupCreate();
     3ba:	6e d1       	rcall	.+732    	; 0x698 <xEventGroupCreate>
     3bc:	90 93 b1 17 	sts	0x17B1, r25	; 0x8017b1 <xCreatedEventGroup+0x1>
     3c0:	80 93 b0 17 	sts	0x17B0, r24	; 0x8017b0 <xCreatedEventGroup>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300UL); // Upload message every 1 minutes (300 ms)
	xLastWakeTime = xTaskGetTickCount();
     3c4:	0e 94 41 10 	call	0x2082	; 0x2082 <xTaskGetTickCount>
     3c8:	69 83       	std	Y+1, r22	; 0x01
     3ca:	7a 83       	std	Y+2, r23	; 0x02
     3cc:	8b 83       	std	Y+3, r24	; 0x03
     3ce:	9c 83       	std	Y+4, r25	; 0x04
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     3d4:	42 e1       	ldi	r20, 0x12	; 18
     3d6:	50 e0       	ldi	r21, 0x00	; 0
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	ce 01       	movw	r24, r28
     3de:	01 96       	adiw	r24, 0x01	; 1
     3e0:	0e 94 57 12 	call	0x24ae	; 0x24ae <xTaskDelayUntil>
		// Was the event group created successfully?
		if( xCreatedEventGroup == NULL )
     3e4:	80 91 b0 17 	lds	r24, 0x17B0	; 0x8017b0 <xCreatedEventGroup>
     3e8:	90 91 b1 17 	lds	r25, 0x17B1	; 0x8017b1 <xCreatedEventGroup+0x1>
     3ec:	00 97       	sbiw	r24, 0x00	; 0
		// The event group was not created because there was insufficient
		// FreeRTOS heap available.
		}
		else
		{
			Application_aFunctionToWaitBits( xCreatedEventGroup);
     3ee:	91 f3       	breq	.-28     	; 0x3d4 <Application_handler_task+0x32>
     3f0:	9b df       	rcall	.-202    	; 0x328 <Application_aFunctionToWaitBits>
     3f2:	f0 cf       	rjmp	.-32     	; 0x3d4 <Application_handler_task+0x32>

000003f4 <Application_handler_initialise>:

/*-----------------------------------------------------------*/

void Application_handler_task( void *pvParameters );

void Application_handler_initialise(UBaseType_t Application_task_priority){
     3f4:	ef 92       	push	r14
     3f6:	ff 92       	push	r15
     3f8:	0f 93       	push	r16
	xTaskCreate(
     3fa:	e1 2c       	mov	r14, r1
     3fc:	f1 2c       	mov	r15, r1
     3fe:	08 2f       	mov	r16, r24
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	40 ec       	ldi	r20, 0xC0	; 192
     406:	50 e0       	ldi	r21, 0x00	; 0
     408:	6f e9       	ldi	r22, 0x9F	; 159
     40a:	72 e0       	ldi	r23, 0x02	; 2
     40c:	81 ed       	ldi	r24, 0xD1	; 209
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <xTaskCreate>
	,  "ApplicationHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  Application_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     414:	0f 91       	pop	r16
     416:	ff 90       	pop	r15
     418:	ef 90       	pop	r14
     41a:	08 95       	ret

0000041c <CO2Sensor_handler_initialise>:
mh_z19_returnCode_t getCO2return;


void CO2Sensor_handler_task( void *pvParameters );

void CO2Sensor_handler_initialise(UBaseType_t CO2_task_priority){
     41c:	ef 92       	push	r14
     41e:	ff 92       	push	r15
     420:	0f 93       	push	r16
	
	xTaskCreate(
     422:	e1 2c       	mov	r14, r1
     424:	f1 2c       	mov	r15, r1
     426:	08 2f       	mov	r16, r24
     428:	20 e0       	ldi	r18, 0x00	; 0
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	40 ec       	ldi	r20, 0xC0	; 192
     42e:	50 e0       	ldi	r21, 0x00	; 0
     430:	6f ea       	ldi	r22, 0xAF	; 175
     432:	72 e0       	ldi	r23, 0x02	; 2
     434:	8d e2       	ldi	r24, 0x2D	; 45
     436:	92 e0       	ldi	r25, 0x02	; 2
     438:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <xTaskCreate>
	,  "CO2Hand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  CO2_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     43c:	0f 91       	pop	r16
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	08 95       	ret

00000444 <CO2Sensor_getCO2InUint16>:
}


uint16_t CO2Sensor_getCO2InUint16(){
	return CO2ppm;
}
     444:	80 91 b4 17 	lds	r24, 0x17B4	; 0x8017b4 <CO2ppm>
     448:	90 91 b5 17 	lds	r25, 0x17B5	; 0x8017b5 <CO2ppm+0x1>
     44c:	08 95       	ret

0000044e <CO2Sensor_aFunctionToSetBits>:
void CO2Sensor_aFunctionToSetBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Set bit 0  in xEventGroup. */
  uxBits = xEventGroupSetBits(
     44e:	41 e0       	ldi	r20, 0x01	; 1
     450:	50 e0       	ldi	r21, 0x00	; 0
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	f0 c1       	rjmp	.+992    	; 0x838 <xEventGroupSetBits>
     458:	08 95       	ret

0000045a <CO2Sensor_handler_task>:
	,  NULL
	,  CO2_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
void CO2Sensor_handler_task(void *pvParameters)
{
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	00 d0       	rcall	.+0      	; 0x460 <CO2Sensor_handler_task+0x6>
     460:	1f 92       	push	r1
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
	(void)pvParameters;
	mh_z19_injectCallBack(NULL);
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 2f 24 	call	0x485e	; 0x485e <mh_z19_injectCallBack>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     46e:	0e 94 41 10 	call	0x2082	; 0x2082 <xTaskGetTickCount>
     472:	69 83       	std	Y+1, r22	; 0x01
     474:	7a 83       	std	Y+2, r23	; 0x02
     476:	8b 83       	std	Y+3, r24	; 0x03
     478:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     47a:	48 ea       	ldi	r20, 0xA8	; 168
     47c:	58 e4       	ldi	r21, 0x48	; 72
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	ce 01       	movw	r24, r28
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	0e 94 57 12 	call	0x24ae	; 0x24ae <xTaskDelayUntil>
		rc = mh_z19_takeMeassuring();
     48a:	0e 94 34 24 	call	0x4868	; 0x4868 <mh_z19_takeMeassuring>
     48e:	80 93 b2 17 	sts	0x17B2, r24	; 0x8017b2 <rc>
		if (rc == MHZ19_OK)
     492:	81 11       	cpse	r24, r1
     494:	f2 cf       	rjmp	.-28     	; 0x47a <CO2Sensor_handler_task+0x20>
		{
			vTaskDelay(50);
     496:	62 e3       	ldi	r22, 0x32	; 50
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 bc 12 	call	0x2578	; 0x2578 <vTaskDelay>
			if(getCO2return == MHZ19_OK){
     4a2:	80 91 b3 17 	lds	r24, 0x17B3	; 0x8017b3 <getCO2return>
     4a6:	81 11       	cpse	r24, r1
     4a8:	09 c0       	rjmp	.+18     	; 0x4bc <CO2Sensor_handler_task+0x62>
				getCO2return = mh_z19_getCo2Ppm(&CO2ppm);
     4aa:	84 eb       	ldi	r24, 0xB4	; 180
     4ac:	97 e1       	ldi	r25, 0x17	; 23
     4ae:	0e 94 63 24 	call	0x48c6	; 0x48c6 <mh_z19_getCo2Ppm>
     4b2:	80 93 b3 17 	sts	0x17B3, r24	; 0x8017b3 <getCO2return>
				CO2Sensor_aFunctionToSetBits(Application_getEventGroup());
     4b6:	2d df       	rcall	.-422    	; 0x312 <Application_getEventGroup>
     4b8:	ca df       	rcall	.-108    	; 0x44e <CO2Sensor_aFunctionToSetBits>
     4ba:	df cf       	rjmp	.-66     	; 0x47a <CO2Sensor_handler_task+0x20>
			}
			else if(getCO2return == MHZ19_NO_MEASSURING_AVAILABLE){
     4bc:	81 30       	cpi	r24, 0x01	; 1
     4be:	e9 f6       	brne	.-70     	; 0x47a <CO2Sensor_handler_task+0x20>
				printf("Didn't get the measurements");
     4c0:	87 eb       	ldi	r24, 0xB7	; 183
     4c2:	92 e0       	ldi	r25, 0x02	; 2
     4c4:	9f 93       	push	r25
     4c6:	8f 93       	push	r24
     4c8:	0e 94 7d 34 	call	0x68fa	; 0x68fa <printf>
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	d4 cf       	rjmp	.-88     	; 0x47a <CO2Sensor_handler_task+0x20>

000004d2 <configuration_create>:
	}
}

uint8_t configuration_get_humidity_data(){
	return humidity_setting;
}
     4d2:	0f 93       	push	r16
     4d4:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
     4d8:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
     4dc:	89 2b       	or	r24, r25
     4de:	89 f4       	brne	.+34     	; 0x502 <configuration_create+0x30>
     4e0:	43 e0       	ldi	r20, 0x03	; 3
     4e2:	60 e0       	ldi	r22, 0x00	; 0
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	42 d6       	rcall	.+3204   	; 0x116c <xQueueGenericCreate>
     4e8:	90 93 5d 08 	sts	0x085D, r25	; 0x80085d <__data_end+0x1>
     4ec:	80 93 5c 08 	sts	0x085C, r24	; 0x80085c <__data_end>
     4f0:	00 97       	sbiw	r24, 0x00	; 0
     4f2:	39 f0       	breq	.+14     	; 0x502 <configuration_create+0x30>
     4f4:	00 e0       	ldi	r16, 0x00	; 0
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	a9 01       	movw	r20, r18
     4fc:	60 e0       	ldi	r22, 0x00	; 0
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	58 d6       	rcall	.+3248   	; 0x11b2 <xQueueGenericSend>
     502:	0f 91       	pop	r16
     504:	08 95       	ret

00000506 <configuration_set_windows_data>:
     506:	cf 93       	push	r28
     508:	c8 2f       	mov	r28, r24
     50a:	1f 92       	push	r1
     50c:	8f 93       	push	r24
     50e:	83 ed       	ldi	r24, 0xD3	; 211
     510:	92 e0       	ldi	r25, 0x02	; 2
     512:	9f 93       	push	r25
     514:	8f 93       	push	r24
     516:	0e 94 7d 34 	call	0x68fa	; 0x68fa <printf>
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	c1 11       	cpse	r28, r1
     524:	04 c0       	rjmp	.+8      	; 0x52e <configuration_set_windows_data+0x28>
     526:	8c e9       	ldi	r24, 0x9C	; 156
     528:	80 93 b7 17 	sts	0x17B7, r24	; 0x8017b7 <windows_settings>
     52c:	03 c0       	rjmp	.+6      	; 0x534 <configuration_set_windows_data+0x2e>
     52e:	84 e6       	ldi	r24, 0x64	; 100
     530:	80 93 b7 17 	sts	0x17B7, r24	; 0x8017b7 <windows_settings>
     534:	cf 91       	pop	r28
     536:	08 95       	ret

00000538 <configuration_set_humidity_data>:

void configuration_set_humidity_data(uint8_t value){
     538:	cf 93       	push	r28
     53a:	c8 2f       	mov	r28, r24
	printf("%d : set Humidity value \n",value);
     53c:	1f 92       	push	r1
     53e:	8f 93       	push	r24
     540:	8c ee       	ldi	r24, 0xEC	; 236
     542:	92 e0       	ldi	r25, 0x02	; 2
     544:	9f 93       	push	r25
     546:	8f 93       	push	r24
     548:	0e 94 7d 34 	call	0x68fa	; 0x68fa <printf>
	if(value == 0){
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	c1 11       	cpse	r28, r1
     556:	04 c0       	rjmp	.+8      	; 0x560 <configuration_set_humidity_data+0x28>
		humidity_setting = -100;
     558:	8c e9       	ldi	r24, 0x9C	; 156
     55a:	80 93 b6 17 	sts	0x17B6, r24	; 0x8017b6 <humidity_setting>
     55e:	03 c0       	rjmp	.+6      	; 0x566 <configuration_set_humidity_data+0x2e>
	}else{
		humidity_setting = 100;
     560:	84 e6       	ldi	r24, 0x64	; 100
     562:	80 93 b6 17 	sts	0x17B6, r24	; 0x8017b6 <humidity_setting>
	}
}
     566:	cf 91       	pop	r28
     568:	08 95       	ret

0000056a <get_mutex>:

SemaphoreHandle_t get_mutex(){
	return _configurationSemaphore ;
     56a:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
     56e:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
     572:	08 95       	ret

00000574 <DownLinkHandler_lora_handler_task>:
	,  NULL );
}

void DownLinkHandler_lora_handler_task( void *pvParameters )
{
	configuration_create();
     574:	ae df       	rcall	.-164    	; 0x4d2 <configuration_create>
	SemaphoreHandle_t semaphore_mutex = get_mutex();
     576:	f9 df       	rcall	.-14     	; 0x56a <get_mutex>
     578:	7c 01       	movw	r14, r24
     57a:	86 e0       	ldi	r24, 0x06	; 6
	for(;;)
	{
		printf("startLoraDownlinkTask\n");
     57c:	93 e0       	ldi	r25, 0x03	; 3
     57e:	0e 94 90 34 	call	0x6920	; 0x6920 <puts>
     582:	83 e0       	ldi	r24, 0x03	; 3
		status_leds_shortPuls(led_ST4);  // OPTIONAL
     584:	0e 94 2b 2a 	call	0x5456	; 0x5456 <status_leds_shortPuls>
     588:	0f ef       	ldi	r16, 0xFF	; 255
		xMessageBufferReceive(_downLinkMessageBufferHandle, &_downlink_payload, sizeof(lora_driver_payload_t), portMAX_DELAY);
     58a:	1f ef       	ldi	r17, 0xFF	; 255
     58c:	98 01       	movw	r18, r16
     58e:	46 e1       	ldi	r20, 0x16	; 22
     590:	50 e0       	ldi	r21, 0x00	; 0
     592:	6e e5       	ldi	r22, 0x5E	; 94
     594:	78 e0       	ldi	r23, 0x08	; 8
     596:	80 91 ba 17 	lds	r24, 0x17BA	; 0x8017ba <_downLinkMessageBufferHandle>
     59a:	90 91 bb 17 	lds	r25, 0x17BB	; 0x8017bb <_downLinkMessageBufferHandle+0x1>
     59e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <xStreamBufferReceive>
     5a2:	ce e5       	ldi	r28, 0x5E	; 94
		printf("DOWN LINK: from port: %d with %d bytes received!", _downlink_payload.portNo, _downlink_payload.len); // Just for Debug
     5a4:	d8 e0       	ldi	r29, 0x08	; 8
     5a6:	99 81       	ldd	r25, Y+1	; 0x01
     5a8:	88 81       	ld	r24, Y
     5aa:	1f 92       	push	r1
     5ac:	9f 93       	push	r25
     5ae:	1f 92       	push	r1
     5b0:	8f 93       	push	r24
     5b2:	8c e1       	ldi	r24, 0x1C	; 28
     5b4:	93 e0       	ldi	r25, 0x03	; 3
     5b6:	9f 93       	push	r25
     5b8:	8f 93       	push	r24
     5ba:	0e 94 7d 34 	call	0x68fa	; 0x68fa <printf>
     5be:	89 81       	ldd	r24, Y+1	; 0x01
		if (4 == _downlink_payload.len) // Check that we have got the expected 4 bytes
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	0f 90       	pop	r0
     5cc:	84 30       	cpi	r24, 0x04	; 4
     5ce:	11 f5       	brne	.+68     	; 0x614 <DownLinkHandler_lora_handler_task+0xa0>
     5d0:	8c 81       	ldd	r24, Y+4	; 0x04
		{
			// decode the payload into our variables
			humDataSetting  = (_downlink_payload.bytes[2]);
     5d2:	80 93 b9 17 	sts	0x17B9, r24	; 0x8017b9 <humDataSetting>
     5d6:	8d 81       	ldd	r24, Y+5	; 0x05
			windowDataSetting = (_downlink_payload.bytes[3]);	
     5d8:	80 93 b8 17 	sts	0x17B8, r24	; 0x8017b8 <windowDataSetting>
			configuration_set_windows_data(windowDataSetting);
     5dc:	94 df       	rcall	.-216    	; 0x506 <configuration_set_windows_data>
			configuration_set_humidity_data(humDataSetting);
     5de:	80 91 b9 17 	lds	r24, 0x17B9	; 0x8017b9 <humDataSetting>
     5e2:	aa df       	rcall	.-172    	; 0x538 <configuration_set_humidity_data>
     5e4:	80 91 b9 17 	lds	r24, 0x17B9	; 0x8017b9 <humDataSetting>
			printf("%d : Window Setting \n%d : Humidity Setting",windowDataSetting,humDataSetting);	
     5e8:	1f 92       	push	r1
     5ea:	8f 93       	push	r24
     5ec:	80 91 b8 17 	lds	r24, 0x17B8	; 0x8017b8 <windowDataSetting>
     5f0:	28 2f       	mov	r18, r24
     5f2:	08 2e       	mov	r0, r24
     5f4:	00 0c       	add	r0, r0
     5f6:	33 0b       	sbc	r19, r19
     5f8:	3f 93       	push	r19
     5fa:	8f 93       	push	r24
     5fc:	8d e4       	ldi	r24, 0x4D	; 77
     5fe:	93 e0       	ldi	r25, 0x03	; 3
     600:	9f 93       	push	r25
     602:	8f 93       	push	r24
     604:	0e 94 7d 34 	call	0x68fa	; 0x68fa <printf>
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	00 e0       	ldi	r16, 0x00	; 0
		}
		xSemaphoreGive(semaphore_mutex);
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	a9 01       	movw	r20, r18
     61c:	60 e0       	ldi	r22, 0x00	; 0
     61e:	70 e0       	ldi	r23, 0x00	; 0
     620:	c7 01       	movw	r24, r14
     622:	c7 d5       	rcall	.+2958   	; 0x11b2 <xQueueGenericSend>
     624:	aa cf       	rjmp	.-172    	; 0x57a <DownLinkHandler_lora_handler_task+0x6>

00000626 <DownLinkHandler_lora_handler_initialise>:
	}
     626:	ef 92       	push	r14
MessageBufferHandle_t _downLinkMessageBufferHandle;



void DownLinkHandler_lora_handler_initialise(UBaseType_t DownLinkHandler_lora_handler_task_priority, MessageBufferHandle_t downLinkMessageBufferHandle)
{
     628:	ff 92       	push	r15
     62a:	0f 93       	push	r16
	_downLinkMessageBufferHandle = downLinkMessageBufferHandle;
     62c:	70 93 bb 17 	sts	0x17BB, r23	; 0x8017bb <_downLinkMessageBufferHandle+0x1>
     630:	60 93 ba 17 	sts	0x17BA, r22	; 0x8017ba <_downLinkMessageBufferHandle>
	xTaskCreate(
     634:	e1 2c       	mov	r14, r1
     636:	f1 2c       	mov	r15, r1
     638:	08 2f       	mov	r16, r24
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	48 e8       	ldi	r20, 0x88	; 136
     640:	51 e0       	ldi	r21, 0x01	; 1
     642:	68 e7       	ldi	r22, 0x78	; 120
     644:	73 e0       	ldi	r23, 0x03	; 3
     646:	8a eb       	ldi	r24, 0xBA	; 186
     648:	92 e0       	ldi	r25, 0x02	; 2
     64a:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <xTaskCreate>
	,  "DownLinkHandler"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  DownLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     64e:	0f 91       	pop	r16
     650:	ff 90       	pop	r15
     652:	ef 90       	pop	r14
     654:	08 95       	ret

00000656 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     656:	0f 93       	push	r16
     658:	01 11       	cpse	r16, r1
     65a:	0c c0       	rjmp	.+24     	; 0x674 <prvTestWaitCondition+0x1e>
     65c:	dc 01       	movw	r26, r24
     65e:	cb 01       	movw	r24, r22
     660:	82 23       	and	r24, r18
     662:	93 23       	and	r25, r19
     664:	a4 23       	and	r26, r20
     666:	b5 23       	and	r27, r21
     668:	89 2b       	or	r24, r25
     66a:	8a 2b       	or	r24, r26
     66c:	8b 2b       	or	r24, r27
     66e:	79 f4       	brne	.+30     	; 0x68e <prvTestWaitCondition+0x38>
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	10 c0       	rjmp	.+32     	; 0x694 <prvTestWaitCondition+0x3e>
     674:	dc 01       	movw	r26, r24
     676:	cb 01       	movw	r24, r22
     678:	82 23       	and	r24, r18
     67a:	93 23       	and	r25, r19
     67c:	a4 23       	and	r26, r20
     67e:	b5 23       	and	r27, r21
     680:	28 17       	cp	r18, r24
     682:	39 07       	cpc	r19, r25
     684:	4a 07       	cpc	r20, r26
     686:	5b 07       	cpc	r21, r27
     688:	21 f0       	breq	.+8      	; 0x692 <prvTestWaitCondition+0x3c>
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	03 c0       	rjmp	.+6      	; 0x694 <prvTestWaitCondition+0x3e>
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	01 c0       	rjmp	.+2      	; 0x694 <prvTestWaitCondition+0x3e>
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	0f 91       	pop	r16
     696:	08 95       	ret

00000698 <xEventGroupCreate>:
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	8f e0       	ldi	r24, 0x0F	; 15
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	cc d1       	rcall	.+920    	; 0xa3a <pvPortMalloc>
     6a2:	ec 01       	movw	r28, r24
     6a4:	00 97       	sbiw	r24, 0x00	; 0
     6a6:	39 f0       	breq	.+14     	; 0x6b6 <xEventGroupCreate+0x1e>
     6a8:	fc 01       	movw	r30, r24
     6aa:	11 92       	st	Z+, r1
     6ac:	11 92       	st	Z+, r1
     6ae:	11 92       	st	Z+, r1
     6b0:	11 92       	st	Z+, r1
     6b2:	cf 01       	movw	r24, r30
     6b4:	a8 d2       	rcall	.+1360   	; 0xc06 <vListInitialise>
     6b6:	ce 01       	movw	r24, r28
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	08 95       	ret

000006be <xEventGroupWaitBits>:
     6be:	2f 92       	push	r2
     6c0:	3f 92       	push	r3
     6c2:	4f 92       	push	r4
     6c4:	5f 92       	push	r5
     6c6:	6f 92       	push	r6
     6c8:	7f 92       	push	r7
     6ca:	8f 92       	push	r8
     6cc:	9f 92       	push	r9
     6ce:	af 92       	push	r10
     6d0:	bf 92       	push	r11
     6d2:	cf 92       	push	r12
     6d4:	df 92       	push	r13
     6d6:	ef 92       	push	r14
     6d8:	ff 92       	push	r15
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	ec 01       	movw	r28, r24
     6e4:	4a 01       	movw	r8, r20
     6e6:	5b 01       	movw	r10, r22
     6e8:	62 2e       	mov	r6, r18
     6ea:	70 2e       	mov	r7, r16
     6ec:	0e 94 3b 10 	call	0x2076	; 0x2076 <vTaskSuspendAll>
     6f0:	28 80       	ld	r2, Y
     6f2:	39 80       	ldd	r3, Y+1	; 0x01
     6f4:	4a 80       	ldd	r4, Y+2	; 0x02
     6f6:	5b 80       	ldd	r5, Y+3	; 0x03
     6f8:	a5 01       	movw	r20, r10
     6fa:	94 01       	movw	r18, r8
     6fc:	c2 01       	movw	r24, r4
     6fe:	b1 01       	movw	r22, r2
     700:	aa df       	rcall	.-172    	; 0x656 <prvTestWaitCondition>
     702:	88 23       	and	r24, r24
     704:	a1 f0       	breq	.+40     	; 0x72e <xEventGroupWaitBits+0x70>
     706:	66 20       	and	r6, r6
     708:	89 f1       	breq	.+98     	; 0x76c <xEventGroupWaitBits+0xae>
     70a:	d5 01       	movw	r26, r10
     70c:	c4 01       	movw	r24, r8
     70e:	80 95       	com	r24
     710:	90 95       	com	r25
     712:	a0 95       	com	r26
     714:	b0 95       	com	r27
     716:	82 21       	and	r24, r2
     718:	93 21       	and	r25, r3
     71a:	a4 21       	and	r26, r4
     71c:	b5 21       	and	r27, r5
     71e:	88 83       	st	Y, r24
     720:	99 83       	std	Y+1, r25	; 0x01
     722:	aa 83       	std	Y+2, r26	; 0x02
     724:	bb 83       	std	Y+3, r27	; 0x03
     726:	c1 2c       	mov	r12, r1
     728:	d1 2c       	mov	r13, r1
     72a:	76 01       	movw	r14, r12
     72c:	22 c0       	rjmp	.+68     	; 0x772 <xEventGroupWaitBits+0xb4>
     72e:	c1 14       	cp	r12, r1
     730:	d1 04       	cpc	r13, r1
     732:	e1 04       	cpc	r14, r1
     734:	f1 04       	cpc	r15, r1
     736:	e9 f0       	breq	.+58     	; 0x772 <xEventGroupWaitBits+0xb4>
     738:	61 10       	cpse	r6, r1
     73a:	04 c0       	rjmp	.+8      	; 0x744 <xEventGroupWaitBits+0x86>
     73c:	40 e0       	ldi	r20, 0x00	; 0
     73e:	50 e0       	ldi	r21, 0x00	; 0
     740:	ba 01       	movw	r22, r20
     742:	04 c0       	rjmp	.+8      	; 0x74c <xEventGroupWaitBits+0x8e>
     744:	40 e0       	ldi	r20, 0x00	; 0
     746:	50 e0       	ldi	r21, 0x00	; 0
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	71 e0       	ldi	r23, 0x01	; 1
     74c:	71 10       	cpse	r7, r1
     74e:	74 60       	ori	r23, 0x04	; 4
     750:	48 29       	or	r20, r8
     752:	59 29       	or	r21, r9
     754:	6a 29       	or	r22, r10
     756:	7b 29       	or	r23, r11
     758:	97 01       	movw	r18, r14
     75a:	86 01       	movw	r16, r12
     75c:	ce 01       	movw	r24, r28
     75e:	04 96       	adiw	r24, 0x04	; 4
     760:	0e 94 53 13 	call	0x26a6	; 0x26a6 <vTaskPlaceOnUnorderedEventList>
     764:	21 2c       	mov	r2, r1
     766:	31 2c       	mov	r3, r1
     768:	21 01       	movw	r4, r2
     76a:	03 c0       	rjmp	.+6      	; 0x772 <xEventGroupWaitBits+0xb4>
     76c:	c1 2c       	mov	r12, r1
     76e:	d1 2c       	mov	r13, r1
     770:	76 01       	movw	r14, r12
     772:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <xTaskResumeAll>
     776:	cd 28       	or	r12, r13
     778:	ce 28       	or	r12, r14
     77a:	cf 28       	or	r12, r15
     77c:	59 f1       	breq	.+86     	; 0x7d4 <xEventGroupWaitBits+0x116>
     77e:	81 11       	cpse	r24, r1
     780:	01 c0       	rjmp	.+2      	; 0x784 <xEventGroupWaitBits+0xc6>
     782:	0f d3       	rcall	.+1566   	; 0xda2 <vPortYield>
     784:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <uxTaskResetEventItemValue>
     788:	6b 01       	movw	r12, r22
     78a:	7c 01       	movw	r14, r24
     78c:	91 fd       	sbrc	r25, 1
     78e:	1f c0       	rjmp	.+62     	; 0x7ce <xEventGroupWaitBits+0x110>
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	0f 92       	push	r0
     796:	c8 80       	ld	r12, Y
     798:	d9 80       	ldd	r13, Y+1	; 0x01
     79a:	ea 80       	ldd	r14, Y+2	; 0x02
     79c:	fb 80       	ldd	r15, Y+3	; 0x03
     79e:	07 2d       	mov	r16, r7
     7a0:	a5 01       	movw	r20, r10
     7a2:	94 01       	movw	r18, r8
     7a4:	c7 01       	movw	r24, r14
     7a6:	b6 01       	movw	r22, r12
     7a8:	56 df       	rcall	.-340    	; 0x656 <prvTestWaitCondition>
     7aa:	88 23       	and	r24, r24
     7ac:	71 f0       	breq	.+28     	; 0x7ca <xEventGroupWaitBits+0x10c>
     7ae:	66 20       	and	r6, r6
     7b0:	61 f0       	breq	.+24     	; 0x7ca <xEventGroupWaitBits+0x10c>
     7b2:	80 94       	com	r8
     7b4:	90 94       	com	r9
     7b6:	a0 94       	com	r10
     7b8:	b0 94       	com	r11
     7ba:	8c 20       	and	r8, r12
     7bc:	9d 20       	and	r9, r13
     7be:	ae 20       	and	r10, r14
     7c0:	bf 20       	and	r11, r15
     7c2:	88 82       	st	Y, r8
     7c4:	99 82       	std	Y+1, r9	; 0x01
     7c6:	aa 82       	std	Y+2, r10	; 0x02
     7c8:	bb 82       	std	Y+3, r11	; 0x03
     7ca:	0f 90       	pop	r0
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	16 01       	movw	r2, r12
     7d0:	27 01       	movw	r4, r14
     7d2:	55 24       	eor	r5, r5
     7d4:	c2 01       	movw	r24, r4
     7d6:	b1 01       	movw	r22, r2
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	ff 90       	pop	r15
     7e2:	ef 90       	pop	r14
     7e4:	df 90       	pop	r13
     7e6:	cf 90       	pop	r12
     7e8:	bf 90       	pop	r11
     7ea:	af 90       	pop	r10
     7ec:	9f 90       	pop	r9
     7ee:	8f 90       	pop	r8
     7f0:	7f 90       	pop	r7
     7f2:	6f 90       	pop	r6
     7f4:	5f 90       	pop	r5
     7f6:	4f 90       	pop	r4
     7f8:	3f 90       	pop	r3
     7fa:	2f 90       	pop	r2
     7fc:	08 95       	ret

000007fe <xEventGroupClearBits>:
     7fe:	0f 93       	push	r16
     800:	1f 93       	push	r17
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	f8 94       	cli
     806:	0f 92       	push	r0
     808:	fc 01       	movw	r30, r24
     80a:	00 81       	ld	r16, Z
     80c:	11 81       	ldd	r17, Z+1	; 0x01
     80e:	22 81       	ldd	r18, Z+2	; 0x02
     810:	33 81       	ldd	r19, Z+3	; 0x03
     812:	40 95       	com	r20
     814:	50 95       	com	r21
     816:	60 95       	com	r22
     818:	70 95       	com	r23
     81a:	40 23       	and	r20, r16
     81c:	51 23       	and	r21, r17
     81e:	62 23       	and	r22, r18
     820:	73 23       	and	r23, r19
     822:	40 83       	st	Z, r20
     824:	51 83       	std	Z+1, r21	; 0x01
     826:	62 83       	std	Z+2, r22	; 0x02
     828:	73 83       	std	Z+3, r23	; 0x03
     82a:	0f 90       	pop	r0
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	c9 01       	movw	r24, r18
     830:	b8 01       	movw	r22, r16
     832:	1f 91       	pop	r17
     834:	0f 91       	pop	r16
     836:	08 95       	ret

00000838 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     838:	4f 92       	push	r4
     83a:	5f 92       	push	r5
     83c:	6f 92       	push	r6
     83e:	7f 92       	push	r7
     840:	af 92       	push	r10
     842:	bf 92       	push	r11
     844:	cf 92       	push	r12
     846:	df 92       	push	r13
     848:	ef 92       	push	r14
     84a:	ff 92       	push	r15
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	ec 01       	movw	r28, r24
     856:	6a 01       	movw	r12, r20
     858:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     85a:	8c 01       	movw	r16, r24
     85c:	09 5f       	subi	r16, 0xF9	; 249
     85e:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     860:	0e 94 3b 10 	call	0x2076	; 0x2076 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     864:	eb 85       	ldd	r30, Y+11	; 0x0b
     866:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     868:	88 81       	ld	r24, Y
     86a:	99 81       	ldd	r25, Y+1	; 0x01
     86c:	aa 81       	ldd	r26, Y+2	; 0x02
     86e:	bb 81       	ldd	r27, Y+3	; 0x03
     870:	c8 2a       	or	r12, r24
     872:	d9 2a       	or	r13, r25
     874:	ea 2a       	or	r14, r26
     876:	fb 2a       	or	r15, r27
     878:	c8 82       	st	Y, r12
     87a:	d9 82       	std	Y+1, r13	; 0x01
     87c:	ea 82       	std	Y+2, r14	; 0x02
     87e:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     880:	c1 2c       	mov	r12, r1
     882:	d1 2c       	mov	r13, r1
     884:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     886:	3d c0       	rjmp	.+122    	; 0x902 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     888:	a4 80       	ldd	r10, Z+4	; 0x04
     88a:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     88c:	80 81       	ld	r24, Z
     88e:	91 81       	ldd	r25, Z+1	; 0x01
     890:	a2 81       	ldd	r26, Z+2	; 0x02
     892:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     894:	ac 01       	movw	r20, r24
     896:	bd 01       	movw	r22, r26
     898:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     89a:	b2 fd       	sbrc	r27, 2
     89c:	0e c0       	rjmp	.+28     	; 0x8ba <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     89e:	48 80       	ld	r4, Y
     8a0:	59 80       	ldd	r5, Y+1	; 0x01
     8a2:	6a 80       	ldd	r6, Y+2	; 0x02
     8a4:	7b 80       	ldd	r7, Y+3	; 0x03
     8a6:	44 22       	and	r4, r20
     8a8:	55 22       	and	r5, r21
     8aa:	66 22       	and	r6, r22
     8ac:	77 22       	and	r7, r23
     8ae:	45 28       	or	r4, r5
     8b0:	46 28       	or	r4, r6
     8b2:	47 28       	or	r4, r7
     8b4:	89 f4       	brne	.+34     	; 0x8d8 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	12 c0       	rjmp	.+36     	; 0x8de <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     8ba:	48 80       	ld	r4, Y
     8bc:	59 80       	ldd	r5, Y+1	; 0x01
     8be:	6a 80       	ldd	r6, Y+2	; 0x02
     8c0:	7b 80       	ldd	r7, Y+3	; 0x03
     8c2:	44 22       	and	r4, r20
     8c4:	55 22       	and	r5, r21
     8c6:	66 22       	and	r6, r22
     8c8:	77 22       	and	r7, r23
     8ca:	44 15       	cp	r20, r4
     8cc:	55 05       	cpc	r21, r5
     8ce:	66 05       	cpc	r22, r6
     8d0:	77 05       	cpc	r23, r7
     8d2:	21 f0       	breq	.+8      	; 0x8dc <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	03 c0       	rjmp	.+6      	; 0x8de <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     8d8:	21 e0       	ldi	r18, 0x01	; 1
     8da:	01 c0       	rjmp	.+2      	; 0x8de <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     8dc:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     8de:	22 23       	and	r18, r18
     8e0:	71 f0       	breq	.+28     	; 0x8fe <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     8e2:	b0 ff       	sbrs	r27, 0
     8e4:	04 c0       	rjmp	.+8      	; 0x8ee <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     8e6:	c4 2a       	or	r12, r20
     8e8:	d5 2a       	or	r13, r21
     8ea:	e6 2a       	or	r14, r22
     8ec:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     8ee:	48 81       	ld	r20, Y
     8f0:	59 81       	ldd	r21, Y+1	; 0x01
     8f2:	6a 81       	ldd	r22, Y+2	; 0x02
     8f4:	7b 81       	ldd	r23, Y+3	; 0x03
     8f6:	72 60       	ori	r23, 0x02	; 2
     8f8:	cf 01       	movw	r24, r30
     8fa:	0e 94 8e 14 	call	0x291c	; 0x291c <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     8fe:	ea 2d       	mov	r30, r10
     900:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     902:	e0 17       	cp	r30, r16
     904:	f1 07       	cpc	r31, r17
     906:	09 f0       	breq	.+2      	; 0x90a <xEventGroupSetBits+0xd2>
     908:	bf cf       	rjmp	.-130    	; 0x888 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     90a:	c0 94       	com	r12
     90c:	d0 94       	com	r13
     90e:	e0 94       	com	r14
     910:	f0 94       	com	r15
     912:	88 81       	ld	r24, Y
     914:	99 81       	ldd	r25, Y+1	; 0x01
     916:	aa 81       	ldd	r26, Y+2	; 0x02
     918:	bb 81       	ldd	r27, Y+3	; 0x03
     91a:	c8 22       	and	r12, r24
     91c:	d9 22       	and	r13, r25
     91e:	ea 22       	and	r14, r26
     920:	fb 22       	and	r15, r27
     922:	c8 82       	st	Y, r12
     924:	d9 82       	std	Y+1, r13	; 0x01
     926:	ea 82       	std	Y+2, r14	; 0x02
     928:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     92a:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     92e:	68 81       	ld	r22, Y
     930:	79 81       	ldd	r23, Y+1	; 0x01
     932:	8a 81       	ldd	r24, Y+2	; 0x02
     934:	9b 81       	ldd	r25, Y+3	; 0x03
}
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	df 90       	pop	r13
     944:	cf 90       	pop	r12
     946:	bf 90       	pop	r11
     948:	af 90       	pop	r10
     94a:	7f 90       	pop	r7
     94c:	6f 90       	pop	r6
     94e:	5f 90       	pop	r5
     950:	4f 90       	pop	r4
     952:	08 95       	ret

00000954 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     954:	e0 e8       	ldi	r30, 0x80	; 128
     956:	f8 e0       	ldi	r31, 0x08	; 8
     958:	a4 e8       	ldi	r26, 0x84	; 132
     95a:	b8 e0       	ldi	r27, 0x08	; 8
     95c:	b1 83       	std	Z+1, r27	; 0x01
     95e:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     960:	13 82       	std	Z+3, r1	; 0x03
     962:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     964:	e0 e0       	ldi	r30, 0x00	; 0
     966:	f5 e1       	ldi	r31, 0x15	; 21
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     968:	f0 93 7f 08 	sts	0x087F, r31	; 0x80087f <pxEnd+0x1>
     96c:	e0 93 7e 08 	sts	0x087E, r30	; 0x80087e <pxEnd>
    pxEnd->xBlockSize = 0;
     970:	13 82       	std	Z+3, r1	; 0x03
     972:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     974:	11 82       	std	Z+1, r1	; 0x01
     976:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     978:	8c e7       	ldi	r24, 0x7C	; 124
     97a:	9c e0       	ldi	r25, 0x0C	; 12
     97c:	13 96       	adiw	r26, 0x03	; 3
     97e:	9c 93       	st	X, r25
     980:	8e 93       	st	-X, r24
     982:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     984:	ed 93       	st	X+, r30
     986:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     988:	90 93 7b 08 	sts	0x087B, r25	; 0x80087b <xMinimumEverFreeBytesRemaining+0x1>
     98c:	80 93 7a 08 	sts	0x087A, r24	; 0x80087a <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     990:	90 93 7d 08 	sts	0x087D, r25	; 0x80087d <xFreeBytesRemaining+0x1>
     994:	80 93 7c 08 	sts	0x087C, r24	; 0x80087c <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	90 e8       	ldi	r25, 0x80	; 128
     99c:	90 93 75 08 	sts	0x0875, r25	; 0x800875 <xBlockAllocatedBit+0x1>
     9a0:	80 93 74 08 	sts	0x0874, r24	; 0x800874 <xBlockAllocatedBit>
     9a4:	08 95       	ret

000009a6 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     9ac:	a0 e8       	ldi	r26, 0x80	; 128
     9ae:	b8 e0       	ldi	r27, 0x08	; 8
     9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <prvInsertBlockIntoFreeList+0xe>
     9b2:	df 01       	movw	r26, r30
     9b4:	ed 91       	ld	r30, X+
     9b6:	fc 91       	ld	r31, X
     9b8:	11 97       	sbiw	r26, 0x01	; 1
     9ba:	ec 17       	cp	r30, r28
     9bc:	fd 07       	cpc	r31, r29
     9be:	c8 f3       	brcs	.-14     	; 0x9b2 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     9c0:	12 96       	adiw	r26, 0x02	; 2
     9c2:	8d 91       	ld	r24, X+
     9c4:	9c 91       	ld	r25, X
     9c6:	13 97       	sbiw	r26, 0x03	; 3
     9c8:	9d 01       	movw	r18, r26
     9ca:	28 0f       	add	r18, r24
     9cc:	39 1f       	adc	r19, r25
     9ce:	c2 17       	cp	r28, r18
     9d0:	d3 07       	cpc	r29, r19
     9d2:	49 f4       	brne	.+18     	; 0x9e6 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     9d4:	2a 81       	ldd	r18, Y+2	; 0x02
     9d6:	3b 81       	ldd	r19, Y+3	; 0x03
     9d8:	82 0f       	add	r24, r18
     9da:	93 1f       	adc	r25, r19
     9dc:	13 96       	adiw	r26, 0x03	; 3
     9de:	9c 93       	st	X, r25
     9e0:	8e 93       	st	-X, r24
     9e2:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     9e4:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     9e6:	8a 81       	ldd	r24, Y+2	; 0x02
     9e8:	9b 81       	ldd	r25, Y+3	; 0x03
     9ea:	9e 01       	movw	r18, r28
     9ec:	28 0f       	add	r18, r24
     9ee:	39 1f       	adc	r19, r25
     9f0:	e2 17       	cp	r30, r18
     9f2:	f3 07       	cpc	r31, r19
     9f4:	c1 f4       	brne	.+48     	; 0xa26 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     9f6:	20 91 7e 08 	lds	r18, 0x087E	; 0x80087e <pxEnd>
     9fa:	30 91 7f 08 	lds	r19, 0x087F	; 0x80087f <pxEnd+0x1>
     9fe:	e2 17       	cp	r30, r18
     a00:	f3 07       	cpc	r31, r19
     a02:	71 f0       	breq	.+28     	; 0xa20 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     a04:	22 81       	ldd	r18, Z+2	; 0x02
     a06:	33 81       	ldd	r19, Z+3	; 0x03
     a08:	82 0f       	add	r24, r18
     a0a:	93 1f       	adc	r25, r19
     a0c:	9b 83       	std	Y+3, r25	; 0x03
     a0e:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     a10:	ed 91       	ld	r30, X+
     a12:	fc 91       	ld	r31, X
     a14:	11 97       	sbiw	r26, 0x01	; 1
     a16:	80 81       	ld	r24, Z
     a18:	91 81       	ldd	r25, Z+1	; 0x01
     a1a:	99 83       	std	Y+1, r25	; 0x01
     a1c:	88 83       	st	Y, r24
     a1e:	05 c0       	rjmp	.+10     	; 0xa2a <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     a20:	39 83       	std	Y+1, r19	; 0x01
     a22:	28 83       	st	Y, r18
     a24:	02 c0       	rjmp	.+4      	; 0xa2a <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     a26:	f9 83       	std	Y+1, r31	; 0x01
     a28:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     a2a:	ca 17       	cp	r28, r26
     a2c:	db 07       	cpc	r29, r27
     a2e:	11 f0       	breq	.+4      	; 0xa34 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     a30:	cd 93       	st	X+, r28
     a32:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	08 95       	ret

00000a3a <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     a48:	0e 94 3b 10 	call	0x2076	; 0x2076 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     a4c:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <pxEnd>
     a50:	90 91 7f 08 	lds	r25, 0x087F	; 0x80087f <pxEnd+0x1>
     a54:	89 2b       	or	r24, r25
     a56:	09 f4       	brne	.+2      	; 0xa5a <pvPortMalloc+0x20>
        {
            prvHeapInit();
     a58:	7d df       	rcall	.-262    	; 0x954 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     a5a:	80 91 74 08 	lds	r24, 0x0874	; 0x800874 <xBlockAllocatedBit>
     a5e:	90 91 75 08 	lds	r25, 0x0875	; 0x800875 <xBlockAllocatedBit+0x1>
     a62:	80 23       	and	r24, r16
     a64:	91 23       	and	r25, r17
     a66:	89 2b       	or	r24, r25
     a68:	09 f0       	breq	.+2      	; 0xa6c <pvPortMalloc+0x32>
     a6a:	76 c0       	rjmp	.+236    	; 0xb58 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     a6c:	01 15       	cp	r16, r1
     a6e:	11 05       	cpc	r17, r1
     a70:	49 f0       	breq	.+18     	; 0xa84 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     a72:	c8 01       	movw	r24, r16
     a74:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     a76:	08 17       	cp	r16, r24
     a78:	19 07       	cpc	r17, r25
     a7a:	18 f0       	brcs	.+6      	; 0xa82 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     a7c:	00 e0       	ldi	r16, 0x00	; 0
     a7e:	10 e0       	ldi	r17, 0x00	; 0
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     a82:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     a84:	01 15       	cp	r16, r1
     a86:	11 05       	cpc	r17, r1
     a88:	09 f4       	brne	.+2      	; 0xa8c <pvPortMalloc+0x52>
     a8a:	69 c0       	rjmp	.+210    	; 0xb5e <pvPortMalloc+0x124>
     a8c:	80 91 7c 08 	lds	r24, 0x087C	; 0x80087c <xFreeBytesRemaining>
     a90:	90 91 7d 08 	lds	r25, 0x087D	; 0x80087d <xFreeBytesRemaining+0x1>
     a94:	80 17       	cp	r24, r16
     a96:	91 07       	cpc	r25, r17
     a98:	08 f4       	brcc	.+2      	; 0xa9c <pvPortMalloc+0x62>
     a9a:	64 c0       	rjmp	.+200    	; 0xb64 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     a9c:	c0 91 80 08 	lds	r28, 0x0880	; 0x800880 <xStart>
     aa0:	d0 91 81 08 	lds	r29, 0x0881	; 0x800881 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     aa4:	e0 e8       	ldi	r30, 0x80	; 128
     aa6:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     aa8:	02 c0       	rjmp	.+4      	; 0xaae <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     aaa:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     aac:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     aae:	8a 81       	ldd	r24, Y+2	; 0x02
     ab0:	9b 81       	ldd	r25, Y+3	; 0x03
     ab2:	80 17       	cp	r24, r16
     ab4:	91 07       	cpc	r25, r17
     ab6:	20 f4       	brcc	.+8      	; 0xac0 <pvPortMalloc+0x86>
     ab8:	88 81       	ld	r24, Y
     aba:	99 81       	ldd	r25, Y+1	; 0x01
     abc:	00 97       	sbiw	r24, 0x00	; 0
     abe:	a9 f7       	brne	.-22     	; 0xaaa <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     ac0:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <pxEnd>
     ac4:	90 91 7f 08 	lds	r25, 0x087F	; 0x80087f <pxEnd+0x1>
     ac8:	c8 17       	cp	r28, r24
     aca:	d9 07       	cpc	r29, r25
     acc:	09 f4       	brne	.+2      	; 0xad0 <pvPortMalloc+0x96>
     ace:	4d c0       	rjmp	.+154    	; 0xb6a <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     ad0:	e0 80       	ld	r14, Z
     ad2:	f1 80       	ldd	r15, Z+1	; 0x01
     ad4:	84 e0       	ldi	r24, 0x04	; 4
     ad6:	e8 0e       	add	r14, r24
     ad8:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     ada:	88 81       	ld	r24, Y
     adc:	99 81       	ldd	r25, Y+1	; 0x01
     ade:	91 83       	std	Z+1, r25	; 0x01
     ae0:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     ae2:	2a 81       	ldd	r18, Y+2	; 0x02
     ae4:	3b 81       	ldd	r19, Y+3	; 0x03
     ae6:	20 1b       	sub	r18, r16
     ae8:	31 0b       	sbc	r19, r17
     aea:	29 30       	cpi	r18, 0x09	; 9
     aec:	31 05       	cpc	r19, r1
     aee:	48 f0       	brcs	.+18     	; 0xb02 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     af0:	ce 01       	movw	r24, r28
     af2:	80 0f       	add	r24, r16
     af4:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     af6:	fc 01       	movw	r30, r24
     af8:	33 83       	std	Z+3, r19	; 0x03
     afa:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     afc:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     afe:	0a 83       	std	Y+2, r16	; 0x02
     b00:	52 df       	rcall	.-348    	; 0x9a6 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     b02:	2a 81       	ldd	r18, Y+2	; 0x02
     b04:	3b 81       	ldd	r19, Y+3	; 0x03
     b06:	80 91 7c 08 	lds	r24, 0x087C	; 0x80087c <xFreeBytesRemaining>
     b0a:	90 91 7d 08 	lds	r25, 0x087D	; 0x80087d <xFreeBytesRemaining+0x1>
     b0e:	82 1b       	sub	r24, r18
     b10:	93 0b       	sbc	r25, r19
     b12:	90 93 7d 08 	sts	0x087D, r25	; 0x80087d <xFreeBytesRemaining+0x1>
     b16:	80 93 7c 08 	sts	0x087C, r24	; 0x80087c <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     b1a:	40 91 7a 08 	lds	r20, 0x087A	; 0x80087a <xMinimumEverFreeBytesRemaining>
     b1e:	50 91 7b 08 	lds	r21, 0x087B	; 0x80087b <xMinimumEverFreeBytesRemaining+0x1>
     b22:	84 17       	cp	r24, r20
     b24:	95 07       	cpc	r25, r21
     b26:	20 f4       	brcc	.+8      	; 0xb30 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     b28:	90 93 7b 08 	sts	0x087B, r25	; 0x80087b <xMinimumEverFreeBytesRemaining+0x1>
     b2c:	80 93 7a 08 	sts	0x087A, r24	; 0x80087a <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     b30:	80 91 74 08 	lds	r24, 0x0874	; 0x800874 <xBlockAllocatedBit>
     b34:	90 91 75 08 	lds	r25, 0x0875	; 0x800875 <xBlockAllocatedBit+0x1>
     b38:	28 2b       	or	r18, r24
     b3a:	39 2b       	or	r19, r25
     b3c:	3b 83       	std	Y+3, r19	; 0x03
     b3e:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     b40:	19 82       	std	Y+1, r1	; 0x01
     b42:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     b44:	80 91 78 08 	lds	r24, 0x0878	; 0x800878 <xNumberOfSuccessfulAllocations>
     b48:	90 91 79 08 	lds	r25, 0x0879	; 0x800879 <xNumberOfSuccessfulAllocations+0x1>
     b4c:	01 96       	adiw	r24, 0x01	; 1
     b4e:	90 93 79 08 	sts	0x0879, r25	; 0x800879 <xNumberOfSuccessfulAllocations+0x1>
     b52:	80 93 78 08 	sts	0x0878, r24	; 0x800878 <xNumberOfSuccessfulAllocations>
     b56:	0b c0       	rjmp	.+22     	; 0xb6e <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     b58:	e1 2c       	mov	r14, r1
     b5a:	f1 2c       	mov	r15, r1
     b5c:	08 c0       	rjmp	.+16     	; 0xb6e <pvPortMalloc+0x134>
     b5e:	e1 2c       	mov	r14, r1
     b60:	f1 2c       	mov	r15, r1
     b62:	05 c0       	rjmp	.+10     	; 0xb6e <pvPortMalloc+0x134>
     b64:	e1 2c       	mov	r14, r1
     b66:	f1 2c       	mov	r15, r1
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <pvPortMalloc+0x134>
     b6a:	e1 2c       	mov	r14, r1
     b6c:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     b6e:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     b72:	e1 14       	cp	r14, r1
     b74:	f1 04       	cpc	r15, r1
     b76:	11 f4       	brne	.+4      	; 0xb7c <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     b78:	0e 94 37 1c 	call	0x386e	; 0x386e <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     b7c:	c7 01       	movw	r24, r14
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	1f 91       	pop	r17
     b84:	0f 91       	pop	r16
     b86:	ff 90       	pop	r15
     b88:	ef 90       	pop	r14
     b8a:	08 95       	ret

00000b8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	91 f1       	breq	.+100    	; 0xbfc <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     b98:	ec 01       	movw	r28, r24
     b9a:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     b9c:	4a 81       	ldd	r20, Y+2	; 0x02
     b9e:	5b 81       	ldd	r21, Y+3	; 0x03
     ba0:	20 91 74 08 	lds	r18, 0x0874	; 0x800874 <xBlockAllocatedBit>
     ba4:	30 91 75 08 	lds	r19, 0x0875	; 0x800875 <xBlockAllocatedBit+0x1>
     ba8:	ba 01       	movw	r22, r20
     baa:	62 23       	and	r22, r18
     bac:	73 23       	and	r23, r19
     bae:	67 2b       	or	r22, r23
     bb0:	29 f1       	breq	.+74     	; 0xbfc <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     bb2:	68 81       	ld	r22, Y
     bb4:	79 81       	ldd	r23, Y+1	; 0x01
     bb6:	67 2b       	or	r22, r23
     bb8:	09 f5       	brne	.+66     	; 0xbfc <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     bba:	20 95       	com	r18
     bbc:	30 95       	com	r19
     bbe:	24 23       	and	r18, r20
     bc0:	35 23       	and	r19, r21
     bc2:	3b 83       	std	Y+3, r19	; 0x03
     bc4:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     bc6:	0e 94 3b 10 	call	0x2076	; 0x2076 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     bca:	8a 81       	ldd	r24, Y+2	; 0x02
     bcc:	9b 81       	ldd	r25, Y+3	; 0x03
     bce:	20 91 7c 08 	lds	r18, 0x087C	; 0x80087c <xFreeBytesRemaining>
     bd2:	30 91 7d 08 	lds	r19, 0x087D	; 0x80087d <xFreeBytesRemaining+0x1>
     bd6:	82 0f       	add	r24, r18
     bd8:	93 1f       	adc	r25, r19
     bda:	90 93 7d 08 	sts	0x087D, r25	; 0x80087d <xFreeBytesRemaining+0x1>
     bde:	80 93 7c 08 	sts	0x087C, r24	; 0x80087c <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     be2:	ce 01       	movw	r24, r28
     be4:	e0 de       	rcall	.-576    	; 0x9a6 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     be6:	80 91 76 08 	lds	r24, 0x0876	; 0x800876 <xNumberOfSuccessfulFrees>
     bea:	90 91 77 08 	lds	r25, 0x0877	; 0x800877 <xNumberOfSuccessfulFrees+0x1>
     bee:	01 96       	adiw	r24, 0x01	; 1
     bf0:	90 93 77 08 	sts	0x0877, r25	; 0x800877 <xNumberOfSuccessfulFrees+0x1>
     bf4:	80 93 76 08 	sts	0x0876, r24	; 0x800876 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     bf8:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	08 95       	ret

00000c06 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     c06:	fc 01       	movw	r30, r24
     c08:	03 96       	adiw	r24, 0x03	; 3
     c0a:	92 83       	std	Z+2, r25	; 0x02
     c0c:	81 83       	std	Z+1, r24	; 0x01
     c0e:	4f ef       	ldi	r20, 0xFF	; 255
     c10:	5f ef       	ldi	r21, 0xFF	; 255
     c12:	ba 01       	movw	r22, r20
     c14:	43 83       	std	Z+3, r20	; 0x03
     c16:	54 83       	std	Z+4, r21	; 0x04
     c18:	65 83       	std	Z+5, r22	; 0x05
     c1a:	76 83       	std	Z+6, r23	; 0x06
     c1c:	90 87       	std	Z+8, r25	; 0x08
     c1e:	87 83       	std	Z+7, r24	; 0x07
     c20:	92 87       	std	Z+10, r25	; 0x0a
     c22:	81 87       	std	Z+9, r24	; 0x09
     c24:	10 82       	st	Z, r1
     c26:	08 95       	ret

00000c28 <vListInitialiseItem>:
     c28:	fc 01       	movw	r30, r24
     c2a:	13 86       	std	Z+11, r1	; 0x0b
     c2c:	12 86       	std	Z+10, r1	; 0x0a
     c2e:	08 95       	ret

00000c30 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     c3a:	08 81       	ld	r16, Y
     c3c:	19 81       	ldd	r17, Y+1	; 0x01
     c3e:	2a 81       	ldd	r18, Y+2	; 0x02
     c40:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     c42:	0f 3f       	cpi	r16, 0xFF	; 255
     c44:	4f ef       	ldi	r20, 0xFF	; 255
     c46:	14 07       	cpc	r17, r20
     c48:	24 07       	cpc	r18, r20
     c4a:	34 07       	cpc	r19, r20
     c4c:	21 f4       	brne	.+8      	; 0xc56 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     c4e:	fc 01       	movw	r30, r24
     c50:	a1 85       	ldd	r26, Z+9	; 0x09
     c52:	b2 85       	ldd	r27, Z+10	; 0x0a
     c54:	11 c0       	rjmp	.+34     	; 0xc78 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     c56:	dc 01       	movw	r26, r24
     c58:	13 96       	adiw	r26, 0x03	; 3
     c5a:	01 c0       	rjmp	.+2      	; 0xc5e <vListInsert+0x2e>
     c5c:	df 01       	movw	r26, r30
     c5e:	14 96       	adiw	r26, 0x04	; 4
     c60:	ed 91       	ld	r30, X+
     c62:	fc 91       	ld	r31, X
     c64:	15 97       	sbiw	r26, 0x05	; 5
     c66:	40 81       	ld	r20, Z
     c68:	51 81       	ldd	r21, Z+1	; 0x01
     c6a:	62 81       	ldd	r22, Z+2	; 0x02
     c6c:	73 81       	ldd	r23, Z+3	; 0x03
     c6e:	04 17       	cp	r16, r20
     c70:	15 07       	cpc	r17, r21
     c72:	26 07       	cpc	r18, r22
     c74:	37 07       	cpc	r19, r23
     c76:	90 f7       	brcc	.-28     	; 0xc5c <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     c78:	14 96       	adiw	r26, 0x04	; 4
     c7a:	ed 91       	ld	r30, X+
     c7c:	fc 91       	ld	r31, X
     c7e:	15 97       	sbiw	r26, 0x05	; 5
     c80:	fd 83       	std	Y+5, r31	; 0x05
     c82:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     c84:	d7 83       	std	Z+7, r29	; 0x07
     c86:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     c88:	bf 83       	std	Y+7, r27	; 0x07
     c8a:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     c8c:	15 96       	adiw	r26, 0x05	; 5
     c8e:	dc 93       	st	X, r29
     c90:	ce 93       	st	-X, r28
     c92:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     c94:	9b 87       	std	Y+11, r25	; 0x0b
     c96:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     c98:	fc 01       	movw	r30, r24
     c9a:	20 81       	ld	r18, Z
     c9c:	2f 5f       	subi	r18, 0xFF	; 255
     c9e:	20 83       	st	Z, r18
}
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	1f 91       	pop	r17
     ca6:	0f 91       	pop	r16
     ca8:	08 95       	ret

00000caa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     cb0:	a2 85       	ldd	r26, Z+10	; 0x0a
     cb2:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     cb4:	c4 81       	ldd	r28, Z+4	; 0x04
     cb6:	d5 81       	ldd	r29, Z+5	; 0x05
     cb8:	86 81       	ldd	r24, Z+6	; 0x06
     cba:	97 81       	ldd	r25, Z+7	; 0x07
     cbc:	9f 83       	std	Y+7, r25	; 0x07
     cbe:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     cc0:	c6 81       	ldd	r28, Z+6	; 0x06
     cc2:	d7 81       	ldd	r29, Z+7	; 0x07
     cc4:	84 81       	ldd	r24, Z+4	; 0x04
     cc6:	95 81       	ldd	r25, Z+5	; 0x05
     cc8:	9d 83       	std	Y+5, r25	; 0x05
     cca:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     ccc:	11 96       	adiw	r26, 0x01	; 1
     cce:	8d 91       	ld	r24, X+
     cd0:	9c 91       	ld	r25, X
     cd2:	12 97       	sbiw	r26, 0x02	; 2
     cd4:	e8 17       	cp	r30, r24
     cd6:	f9 07       	cpc	r31, r25
     cd8:	31 f4       	brne	.+12     	; 0xce6 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     cda:	86 81       	ldd	r24, Z+6	; 0x06
     cdc:	97 81       	ldd	r25, Z+7	; 0x07
     cde:	12 96       	adiw	r26, 0x02	; 2
     ce0:	9c 93       	st	X, r25
     ce2:	8e 93       	st	-X, r24
     ce4:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     ce6:	13 86       	std	Z+11, r1	; 0x0b
     ce8:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     cea:	8c 91       	ld	r24, X
     cec:	81 50       	subi	r24, 0x01	; 1
     cee:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     cf0:	8c 91       	ld	r24, X
}
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	08 95       	ret

00000cf8 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     cf8:	a8 95       	wdr
     cfa:	90 ec       	ldi	r25, 0xC0	; 192
     cfc:	88 e1       	ldi	r24, 0x18	; 24
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	f8 94       	cli
     d02:	a8 95       	wdr
     d04:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     d0e:	08 95       	ret

00000d10 <pxPortInitialiseStack>:
     d10:	fc 01       	movw	r30, r24
     d12:	60 83       	st	Z, r22
     d14:	31 97       	sbiw	r30, 0x01	; 1
     d16:	70 83       	st	Z, r23
     d18:	31 97       	sbiw	r30, 0x01	; 1
     d1a:	10 82       	st	Z, r1
     d1c:	31 97       	sbiw	r30, 0x01	; 1
     d1e:	10 82       	st	Z, r1
     d20:	31 97       	sbiw	r30, 0x01	; 1
     d22:	20 e8       	ldi	r18, 0x80	; 128
     d24:	20 83       	st	Z, r18
     d26:	31 97       	sbiw	r30, 0x01	; 1
     d28:	10 82       	st	Z, r1
     d2a:	31 97       	sbiw	r30, 0x01	; 1
     d2c:	10 82       	st	Z, r1
     d2e:	31 97       	sbiw	r30, 0x01	; 1
     d30:	10 82       	st	Z, r1
     d32:	77 97       	sbiw	r30, 0x17	; 23
     d34:	40 83       	st	Z, r20
     d36:	31 97       	sbiw	r30, 0x01	; 1
     d38:	50 83       	st	Z, r21
     d3a:	86 97       	sbiw	r24, 0x26	; 38
     d3c:	08 95       	ret

00000d3e <xPortStartScheduler>:
     d3e:	dc df       	rcall	.-72     	; 0xcf8 <prvSetupTimerInterrupt>
     d40:	a0 91 c3 15 	lds	r26, 0x15C3	; 0x8015c3 <pxCurrentTCB>
     d44:	b0 91 c4 15 	lds	r27, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
     d48:	cd 91       	ld	r28, X+
     d4a:	cd bf       	out	0x3d, r28	; 61
     d4c:	dd 91       	ld	r29, X+
     d4e:	de bf       	out	0x3e, r29	; 62
     d50:	ff 91       	pop	r31
     d52:	ef 91       	pop	r30
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	bf 91       	pop	r27
     d5a:	af 91       	pop	r26
     d5c:	9f 91       	pop	r25
     d5e:	8f 91       	pop	r24
     d60:	7f 91       	pop	r23
     d62:	6f 91       	pop	r22
     d64:	5f 91       	pop	r21
     d66:	4f 91       	pop	r20
     d68:	3f 91       	pop	r19
     d6a:	2f 91       	pop	r18
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	ff 90       	pop	r15
     d72:	ef 90       	pop	r14
     d74:	df 90       	pop	r13
     d76:	cf 90       	pop	r12
     d78:	bf 90       	pop	r11
     d7a:	af 90       	pop	r10
     d7c:	9f 90       	pop	r9
     d7e:	8f 90       	pop	r8
     d80:	7f 90       	pop	r7
     d82:	6f 90       	pop	r6
     d84:	5f 90       	pop	r5
     d86:	4f 90       	pop	r4
     d88:	3f 90       	pop	r3
     d8a:	2f 90       	pop	r2
     d8c:	1f 90       	pop	r1
     d8e:	0f 90       	pop	r0
     d90:	0c be       	out	0x3c, r0	; 60
     d92:	0f 90       	pop	r0
     d94:	0b be       	out	0x3b, r0	; 59
     d96:	0f 90       	pop	r0
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	0f 90       	pop	r0
     d9c:	08 95       	ret
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	08 95       	ret

00000da2 <vPortYield>:
     da2:	0f 92       	push	r0
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	0f 92       	push	r0
     daa:	0b b6       	in	r0, 0x3b	; 59
     dac:	0f 92       	push	r0
     dae:	0c b6       	in	r0, 0x3c	; 60
     db0:	0f 92       	push	r0
     db2:	1f 92       	push	r1
     db4:	11 24       	eor	r1, r1
     db6:	2f 92       	push	r2
     db8:	3f 92       	push	r3
     dba:	4f 92       	push	r4
     dbc:	5f 92       	push	r5
     dbe:	6f 92       	push	r6
     dc0:	7f 92       	push	r7
     dc2:	8f 92       	push	r8
     dc4:	9f 92       	push	r9
     dc6:	af 92       	push	r10
     dc8:	bf 92       	push	r11
     dca:	cf 92       	push	r12
     dcc:	df 92       	push	r13
     dce:	ef 92       	push	r14
     dd0:	ff 92       	push	r15
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
     dd6:	2f 93       	push	r18
     dd8:	3f 93       	push	r19
     dda:	4f 93       	push	r20
     ddc:	5f 93       	push	r21
     dde:	6f 93       	push	r22
     de0:	7f 93       	push	r23
     de2:	8f 93       	push	r24
     de4:	9f 93       	push	r25
     de6:	af 93       	push	r26
     de8:	bf 93       	push	r27
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	ef 93       	push	r30
     df0:	ff 93       	push	r31
     df2:	a0 91 c3 15 	lds	r26, 0x15C3	; 0x8015c3 <pxCurrentTCB>
     df6:	b0 91 c4 15 	lds	r27, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
     dfa:	0d b6       	in	r0, 0x3d	; 61
     dfc:	0d 92       	st	X+, r0
     dfe:	0e b6       	in	r0, 0x3e	; 62
     e00:	0d 92       	st	X+, r0
     e02:	0e 94 d7 12 	call	0x25ae	; 0x25ae <vTaskSwitchContext>
     e06:	a0 91 c3 15 	lds	r26, 0x15C3	; 0x8015c3 <pxCurrentTCB>
     e0a:	b0 91 c4 15 	lds	r27, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
     e0e:	cd 91       	ld	r28, X+
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	dd 91       	ld	r29, X+
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	ff 91       	pop	r31
     e18:	ef 91       	pop	r30
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	bf 91       	pop	r27
     e20:	af 91       	pop	r26
     e22:	9f 91       	pop	r25
     e24:	8f 91       	pop	r24
     e26:	7f 91       	pop	r23
     e28:	6f 91       	pop	r22
     e2a:	5f 91       	pop	r21
     e2c:	4f 91       	pop	r20
     e2e:	3f 91       	pop	r19
     e30:	2f 91       	pop	r18
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	ff 90       	pop	r15
     e38:	ef 90       	pop	r14
     e3a:	df 90       	pop	r13
     e3c:	cf 90       	pop	r12
     e3e:	bf 90       	pop	r11
     e40:	af 90       	pop	r10
     e42:	9f 90       	pop	r9
     e44:	8f 90       	pop	r8
     e46:	7f 90       	pop	r7
     e48:	6f 90       	pop	r6
     e4a:	5f 90       	pop	r5
     e4c:	4f 90       	pop	r4
     e4e:	3f 90       	pop	r3
     e50:	2f 90       	pop	r2
     e52:	1f 90       	pop	r1
     e54:	0f 90       	pop	r0
     e56:	0c be       	out	0x3c, r0	; 60
     e58:	0f 90       	pop	r0
     e5a:	0b be       	out	0x3b, r0	; 59
     e5c:	0f 90       	pop	r0
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	0f 90       	pop	r0
     e62:	08 95       	ret

00000e64 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     e64:	0f 92       	push	r0
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	0f 92       	push	r0
     e6c:	0b b6       	in	r0, 0x3b	; 59
     e6e:	0f 92       	push	r0
     e70:	0c b6       	in	r0, 0x3c	; 60
     e72:	0f 92       	push	r0
     e74:	1f 92       	push	r1
     e76:	11 24       	eor	r1, r1
     e78:	2f 92       	push	r2
     e7a:	3f 92       	push	r3
     e7c:	4f 92       	push	r4
     e7e:	5f 92       	push	r5
     e80:	6f 92       	push	r6
     e82:	7f 92       	push	r7
     e84:	8f 92       	push	r8
     e86:	9f 92       	push	r9
     e88:	af 92       	push	r10
     e8a:	bf 92       	push	r11
     e8c:	cf 92       	push	r12
     e8e:	df 92       	push	r13
     e90:	ef 92       	push	r14
     e92:	ff 92       	push	r15
     e94:	0f 93       	push	r16
     e96:	1f 93       	push	r17
     e98:	2f 93       	push	r18
     e9a:	3f 93       	push	r19
     e9c:	4f 93       	push	r20
     e9e:	5f 93       	push	r21
     ea0:	6f 93       	push	r22
     ea2:	7f 93       	push	r23
     ea4:	8f 93       	push	r24
     ea6:	9f 93       	push	r25
     ea8:	af 93       	push	r26
     eaa:	bf 93       	push	r27
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	ef 93       	push	r30
     eb2:	ff 93       	push	r31
     eb4:	a0 91 c3 15 	lds	r26, 0x15C3	; 0x8015c3 <pxCurrentTCB>
     eb8:	b0 91 c4 15 	lds	r27, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
     ebc:	0d b6       	in	r0, 0x3d	; 61
     ebe:	0d 92       	st	X+, r0
     ec0:	0e b6       	in	r0, 0x3e	; 62
     ec2:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     ec4:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     ec6:	0e 94 4f 10 	call	0x209e	; 0x209e <xTaskIncrementTick>
     eca:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     ecc:	0e 94 d7 12 	call	0x25ae	; 0x25ae <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     ed0:	a0 91 c3 15 	lds	r26, 0x15C3	; 0x8015c3 <pxCurrentTCB>
     ed4:	b0 91 c4 15 	lds	r27, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
     ed8:	cd 91       	ld	r28, X+
     eda:	cd bf       	out	0x3d, r28	; 61
     edc:	dd 91       	ld	r29, X+
     ede:	de bf       	out	0x3e, r29	; 62
     ee0:	ff 91       	pop	r31
     ee2:	ef 91       	pop	r30
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	bf 91       	pop	r27
     eea:	af 91       	pop	r26
     eec:	9f 91       	pop	r25
     eee:	8f 91       	pop	r24
     ef0:	7f 91       	pop	r23
     ef2:	6f 91       	pop	r22
     ef4:	5f 91       	pop	r21
     ef6:	4f 91       	pop	r20
     ef8:	3f 91       	pop	r19
     efa:	2f 91       	pop	r18
     efc:	1f 91       	pop	r17
     efe:	0f 91       	pop	r16
     f00:	ff 90       	pop	r15
     f02:	ef 90       	pop	r14
     f04:	df 90       	pop	r13
     f06:	cf 90       	pop	r12
     f08:	bf 90       	pop	r11
     f0a:	af 90       	pop	r10
     f0c:	9f 90       	pop	r9
     f0e:	8f 90       	pop	r8
     f10:	7f 90       	pop	r7
     f12:	6f 90       	pop	r6
     f14:	5f 90       	pop	r5
     f16:	4f 90       	pop	r4
     f18:	3f 90       	pop	r3
     f1a:	2f 90       	pop	r2
     f1c:	1f 90       	pop	r1
     f1e:	0f 90       	pop	r0
     f20:	0c be       	out	0x3c, r0	; 60
     f22:	0f 90       	pop	r0
     f24:	0b be       	out	0x3b, r0	; 59
     f26:	0f 90       	pop	r0
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     f2c:	08 95       	ret

00000f2e <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     f2e:	9a df       	rcall	.-204    	; 0xe64 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     f30:	18 95       	reti

00000f32 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	f8 94       	cli
     f36:	0f 92       	push	r0
     f38:	fc 01       	movw	r30, r24
     f3a:	86 8d       	ldd	r24, Z+30	; 0x1e
     f3c:	81 11       	cpse	r24, r1
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <prvIsQueueEmpty+0x12>
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	01 c0       	rjmp	.+2      	; 0xf46 <prvIsQueueEmpty+0x14>
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	0f 90       	pop	r0
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	08 95       	ret

00000f4c <prvIsQueueFull>:
     f4c:	0f b6       	in	r0, 0x3f	; 63
     f4e:	f8 94       	cli
     f50:	0f 92       	push	r0
     f52:	fc 01       	movw	r30, r24
     f54:	26 8d       	ldd	r18, Z+30	; 0x1e
     f56:	87 8d       	ldd	r24, Z+31	; 0x1f
     f58:	28 13       	cpse	r18, r24
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <prvIsQueueFull+0x14>
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	01 c0       	rjmp	.+2      	; 0xf62 <prvIsQueueFull+0x16>
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	0f 90       	pop	r0
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	08 95       	ret

00000f68 <prvCopyDataToQueue>:
     f68:	0f 93       	push	r16
     f6a:	1f 93       	push	r17
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	ec 01       	movw	r28, r24
     f72:	04 2f       	mov	r16, r20
     f74:	1e 8d       	ldd	r17, Y+30	; 0x1e
     f76:	48 a1       	ldd	r20, Y+32	; 0x20
     f78:	41 11       	cpse	r20, r1
     f7a:	0c c0       	rjmp	.+24     	; 0xf94 <prvCopyDataToQueue+0x2c>
     f7c:	88 81       	ld	r24, Y
     f7e:	99 81       	ldd	r25, Y+1	; 0x01
     f80:	89 2b       	or	r24, r25
     f82:	09 f0       	breq	.+2      	; 0xf86 <prvCopyDataToQueue+0x1e>
     f84:	42 c0       	rjmp	.+132    	; 0x100a <__EEPROM_REGION_LENGTH__+0xa>
     f86:	8c 81       	ldd	r24, Y+4	; 0x04
     f88:	9d 81       	ldd	r25, Y+5	; 0x05
     f8a:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <xTaskPriorityDisinherit>
     f8e:	1d 82       	std	Y+5, r1	; 0x05
     f90:	1c 82       	std	Y+4, r1	; 0x04
     f92:	42 c0       	rjmp	.+132    	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
     f94:	01 11       	cpse	r16, r1
     f96:	17 c0       	rjmp	.+46     	; 0xfc6 <prvCopyDataToQueue+0x5e>
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	9b 81       	ldd	r25, Y+3	; 0x03
     f9e:	0e 94 d7 33 	call	0x67ae	; 0x67ae <memcpy>
     fa2:	28 a1       	ldd	r18, Y+32	; 0x20
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	9b 81       	ldd	r25, Y+3	; 0x03
     fa8:	82 0f       	add	r24, r18
     faa:	91 1d       	adc	r25, r1
     fac:	9b 83       	std	Y+3, r25	; 0x03
     fae:	8a 83       	std	Y+2, r24	; 0x02
     fb0:	2c 81       	ldd	r18, Y+4	; 0x04
     fb2:	3d 81       	ldd	r19, Y+5	; 0x05
     fb4:	82 17       	cp	r24, r18
     fb6:	93 07       	cpc	r25, r19
     fb8:	50 f1       	brcs	.+84     	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
     fba:	88 81       	ld	r24, Y
     fbc:	99 81       	ldd	r25, Y+1	; 0x01
     fbe:	9b 83       	std	Y+3, r25	; 0x03
     fc0:	8a 83       	std	Y+2, r24	; 0x02
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	29 c0       	rjmp	.+82     	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	8e 81       	ldd	r24, Y+6	; 0x06
     fca:	9f 81       	ldd	r25, Y+7	; 0x07
     fcc:	0e 94 d7 33 	call	0x67ae	; 0x67ae <memcpy>
     fd0:	88 a1       	ldd	r24, Y+32	; 0x20
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	91 95       	neg	r25
     fd6:	81 95       	neg	r24
     fd8:	91 09       	sbc	r25, r1
     fda:	2e 81       	ldd	r18, Y+6	; 0x06
     fdc:	3f 81       	ldd	r19, Y+7	; 0x07
     fde:	28 0f       	add	r18, r24
     fe0:	39 1f       	adc	r19, r25
     fe2:	3f 83       	std	Y+7, r19	; 0x07
     fe4:	2e 83       	std	Y+6, r18	; 0x06
     fe6:	48 81       	ld	r20, Y
     fe8:	59 81       	ldd	r21, Y+1	; 0x01
     fea:	24 17       	cp	r18, r20
     fec:	35 07       	cpc	r19, r21
     fee:	30 f4       	brcc	.+12     	; 0xffc <prvCopyDataToQueue+0x94>
     ff0:	2c 81       	ldd	r18, Y+4	; 0x04
     ff2:	3d 81       	ldd	r19, Y+5	; 0x05
     ff4:	82 0f       	add	r24, r18
     ff6:	93 1f       	adc	r25, r19
     ff8:	9f 83       	std	Y+7, r25	; 0x07
     ffa:	8e 83       	std	Y+6, r24	; 0x06
     ffc:	02 30       	cpi	r16, 0x02	; 2
     ffe:	49 f4       	brne	.+18     	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
    1000:	11 23       	and	r17, r17
    1002:	49 f0       	breq	.+18     	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
    1004:	11 50       	subi	r17, 0x01	; 1
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	07 c0       	rjmp	.+14     	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	05 c0       	rjmp	.+10     	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	1f 5f       	subi	r17, 0xFF	; 255
    101a:	1e 8f       	std	Y+30, r17	; 0x1e
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	08 95       	ret

00001026 <prvCopyDataFromQueue>:
    1026:	fc 01       	movw	r30, r24
    1028:	40 a1       	ldd	r20, Z+32	; 0x20
    102a:	44 23       	and	r20, r20
    102c:	a9 f0       	breq	.+42     	; 0x1058 <prvCopyDataFromQueue+0x32>
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	26 81       	ldd	r18, Z+6	; 0x06
    1032:	37 81       	ldd	r19, Z+7	; 0x07
    1034:	24 0f       	add	r18, r20
    1036:	35 1f       	adc	r19, r21
    1038:	37 83       	std	Z+7, r19	; 0x07
    103a:	26 83       	std	Z+6, r18	; 0x06
    103c:	84 81       	ldd	r24, Z+4	; 0x04
    103e:	95 81       	ldd	r25, Z+5	; 0x05
    1040:	28 17       	cp	r18, r24
    1042:	39 07       	cpc	r19, r25
    1044:	20 f0       	brcs	.+8      	; 0x104e <prvCopyDataFromQueue+0x28>
    1046:	80 81       	ld	r24, Z
    1048:	91 81       	ldd	r25, Z+1	; 0x01
    104a:	97 83       	std	Z+7, r25	; 0x07
    104c:	86 83       	std	Z+6, r24	; 0x06
    104e:	cb 01       	movw	r24, r22
    1050:	66 81       	ldd	r22, Z+6	; 0x06
    1052:	77 81       	ldd	r23, Z+7	; 0x07
    1054:	0c 94 d7 33 	jmp	0x67ae	; 0x67ae <memcpy>
    1058:	08 95       	ret

0000105a <prvUnlockQueue>:
    105a:	1f 93       	push	r17
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	ec 01       	movw	r28, r24
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	0f 92       	push	r0
    1068:	1a a1       	ldd	r17, Y+34	; 0x22
    106a:	0b c0       	rjmp	.+22     	; 0x1082 <prvUnlockQueue+0x28>
    106c:	8b 89       	ldd	r24, Y+19	; 0x13
    106e:	88 23       	and	r24, r24
    1070:	51 f0       	breq	.+20     	; 0x1086 <prvUnlockQueue+0x2c>
    1072:	ce 01       	movw	r24, r28
    1074:	43 96       	adiw	r24, 0x13	; 19
    1076:	0e 94 df 13 	call	0x27be	; 0x27be <xTaskRemoveFromEventList>
    107a:	81 11       	cpse	r24, r1
    107c:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <vTaskMissedYield>
    1080:	11 50       	subi	r17, 0x01	; 1
    1082:	11 16       	cp	r1, r17
    1084:	9c f3       	brlt	.-26     	; 0x106c <prvUnlockQueue+0x12>
    1086:	8f ef       	ldi	r24, 0xFF	; 255
    1088:	8a a3       	std	Y+34, r24	; 0x22
    108a:	0f 90       	pop	r0
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	0f 92       	push	r0
    1094:	19 a1       	ldd	r17, Y+33	; 0x21
    1096:	0b c0       	rjmp	.+22     	; 0x10ae <prvUnlockQueue+0x54>
    1098:	88 85       	ldd	r24, Y+8	; 0x08
    109a:	88 23       	and	r24, r24
    109c:	51 f0       	breq	.+20     	; 0x10b2 <prvUnlockQueue+0x58>
    109e:	ce 01       	movw	r24, r28
    10a0:	08 96       	adiw	r24, 0x08	; 8
    10a2:	0e 94 df 13 	call	0x27be	; 0x27be <xTaskRemoveFromEventList>
    10a6:	81 11       	cpse	r24, r1
    10a8:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <vTaskMissedYield>
    10ac:	11 50       	subi	r17, 0x01	; 1
    10ae:	11 16       	cp	r1, r17
    10b0:	9c f3       	brlt	.-26     	; 0x1098 <prvUnlockQueue+0x3e>
    10b2:	8f ef       	ldi	r24, 0xFF	; 255
    10b4:	89 a3       	std	Y+33, r24	; 0x21
    10b6:	0f 90       	pop	r0
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	08 95       	ret

000010c2 <xQueueGenericReset>:
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	ec 01       	movw	r28, r24
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	0f 92       	push	r0
    10ce:	e8 81       	ld	r30, Y
    10d0:	f9 81       	ldd	r31, Y+1	; 0x01
    10d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10d4:	28 a1       	ldd	r18, Y+32	; 0x20
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	82 9f       	mul	r24, r18
    10dc:	a0 01       	movw	r20, r0
    10de:	83 9f       	mul	r24, r19
    10e0:	50 0d       	add	r21, r0
    10e2:	92 9f       	mul	r25, r18
    10e4:	50 0d       	add	r21, r0
    10e6:	11 24       	eor	r1, r1
    10e8:	4e 0f       	add	r20, r30
    10ea:	5f 1f       	adc	r21, r31
    10ec:	5d 83       	std	Y+5, r21	; 0x05
    10ee:	4c 83       	std	Y+4, r20	; 0x04
    10f0:	1e 8e       	std	Y+30, r1	; 0x1e
    10f2:	fb 83       	std	Y+3, r31	; 0x03
    10f4:	ea 83       	std	Y+2, r30	; 0x02
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	28 9f       	mul	r18, r24
    10fa:	a0 01       	movw	r20, r0
    10fc:	29 9f       	mul	r18, r25
    10fe:	50 0d       	add	r21, r0
    1100:	38 9f       	mul	r19, r24
    1102:	50 0d       	add	r21, r0
    1104:	11 24       	eor	r1, r1
    1106:	cf 01       	movw	r24, r30
    1108:	84 0f       	add	r24, r20
    110a:	95 1f       	adc	r25, r21
    110c:	9f 83       	std	Y+7, r25	; 0x07
    110e:	8e 83       	std	Y+6, r24	; 0x06
    1110:	8f ef       	ldi	r24, 0xFF	; 255
    1112:	89 a3       	std	Y+33, r24	; 0x21
    1114:	8a a3       	std	Y+34, r24	; 0x22
    1116:	61 11       	cpse	r22, r1
    1118:	0b c0       	rjmp	.+22     	; 0x1130 <xQueueGenericReset+0x6e>
    111a:	88 85       	ldd	r24, Y+8	; 0x08
    111c:	88 23       	and	r24, r24
    111e:	71 f0       	breq	.+28     	; 0x113c <xQueueGenericReset+0x7a>
    1120:	ce 01       	movw	r24, r28
    1122:	08 96       	adiw	r24, 0x08	; 8
    1124:	0e 94 df 13 	call	0x27be	; 0x27be <xTaskRemoveFromEventList>
    1128:	88 23       	and	r24, r24
    112a:	41 f0       	breq	.+16     	; 0x113c <xQueueGenericReset+0x7a>
    112c:	3a de       	rcall	.-908    	; 0xda2 <vPortYield>
    112e:	06 c0       	rjmp	.+12     	; 0x113c <xQueueGenericReset+0x7a>
    1130:	ce 01       	movw	r24, r28
    1132:	08 96       	adiw	r24, 0x08	; 8
    1134:	68 dd       	rcall	.-1328   	; 0xc06 <vListInitialise>
    1136:	ce 01       	movw	r24, r28
    1138:	43 96       	adiw	r24, 0x13	; 19
    113a:	65 dd       	rcall	.-1334   	; 0xc06 <vListInitialise>
    113c:	0f 90       	pop	r0
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	08 95       	ret

00001148 <prvInitialiseNewQueue>:
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
    114c:	f8 01       	movw	r30, r16
    114e:	61 11       	cpse	r22, r1
    1150:	03 c0       	rjmp	.+6      	; 0x1158 <prvInitialiseNewQueue+0x10>
    1152:	11 83       	std	Z+1, r17	; 0x01
    1154:	00 83       	st	Z, r16
    1156:	02 c0       	rjmp	.+4      	; 0x115c <prvInitialiseNewQueue+0x14>
    1158:	51 83       	std	Z+1, r21	; 0x01
    115a:	40 83       	st	Z, r20
    115c:	87 8f       	std	Z+31, r24	; 0x1f
    115e:	60 a3       	std	Z+32, r22	; 0x20
    1160:	61 e0       	ldi	r22, 0x01	; 1
    1162:	cf 01       	movw	r24, r30
    1164:	ae df       	rcall	.-164    	; 0x10c2 <xQueueGenericReset>
    1166:	1f 91       	pop	r17
    1168:	0f 91       	pop	r16
    116a:	08 95       	ret

0000116c <xQueueGenericCreate>:
    116c:	df 92       	push	r13
    116e:	ef 92       	push	r14
    1170:	ff 92       	push	r15
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	f8 2e       	mov	r15, r24
    117c:	e6 2e       	mov	r14, r22
    117e:	d4 2e       	mov	r13, r20
    1180:	86 9f       	mul	r24, r22
    1182:	c0 01       	movw	r24, r0
    1184:	11 24       	eor	r1, r1
    1186:	83 96       	adiw	r24, 0x23	; 35
    1188:	58 dc       	rcall	.-1872   	; 0xa3a <pvPortMalloc>
    118a:	ec 01       	movw	r28, r24
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	41 f0       	breq	.+16     	; 0x11a0 <xQueueGenericCreate+0x34>
    1190:	8c 01       	movw	r16, r24
    1192:	2d 2d       	mov	r18, r13
    1194:	ac 01       	movw	r20, r24
    1196:	4d 5d       	subi	r20, 0xDD	; 221
    1198:	5f 4f       	sbci	r21, 0xFF	; 255
    119a:	6e 2d       	mov	r22, r14
    119c:	8f 2d       	mov	r24, r15
    119e:	d4 df       	rcall	.-88     	; 0x1148 <prvInitialiseNewQueue>
    11a0:	ce 01       	movw	r24, r28
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	df 90       	pop	r13
    11b0:	08 95       	ret

000011b2 <xQueueGenericSend>:
    11b2:	cf 92       	push	r12
    11b4:	df 92       	push	r13
    11b6:	ef 92       	push	r14
    11b8:	ff 92       	push	r15
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	29 97       	sbiw	r28, 0x09	; 9
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	de bf       	out	0x3e, r29	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	cd bf       	out	0x3d, r28	; 61
    11d2:	7c 01       	movw	r14, r24
    11d4:	6b 01       	movw	r12, r22
    11d6:	2e 83       	std	Y+6, r18	; 0x06
    11d8:	3f 83       	std	Y+7, r19	; 0x07
    11da:	48 87       	std	Y+8, r20	; 0x08
    11dc:	59 87       	std	Y+9, r21	; 0x09
    11de:	10 e0       	ldi	r17, 0x00	; 0
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	0f 92       	push	r0
    11e6:	f7 01       	movw	r30, r14
    11e8:	96 8d       	ldd	r25, Z+30	; 0x1e
    11ea:	87 8d       	ldd	r24, Z+31	; 0x1f
    11ec:	98 17       	cp	r25, r24
    11ee:	10 f0       	brcs	.+4      	; 0x11f4 <xQueueGenericSend+0x42>
    11f0:	02 30       	cpi	r16, 0x02	; 2
    11f2:	b1 f4       	brne	.+44     	; 0x1220 <xQueueGenericSend+0x6e>
    11f4:	40 2f       	mov	r20, r16
    11f6:	b6 01       	movw	r22, r12
    11f8:	c7 01       	movw	r24, r14
    11fa:	b6 de       	rcall	.-660    	; 0xf68 <prvCopyDataToQueue>
    11fc:	f7 01       	movw	r30, r14
    11fe:	93 89       	ldd	r25, Z+19	; 0x13
    1200:	99 23       	and	r25, r25
    1202:	41 f0       	breq	.+16     	; 0x1214 <xQueueGenericSend+0x62>
    1204:	c7 01       	movw	r24, r14
    1206:	43 96       	adiw	r24, 0x13	; 19
    1208:	0e 94 df 13 	call	0x27be	; 0x27be <xTaskRemoveFromEventList>
    120c:	88 23       	and	r24, r24
    120e:	21 f0       	breq	.+8      	; 0x1218 <xQueueGenericSend+0x66>
    1210:	c8 dd       	rcall	.-1136   	; 0xda2 <vPortYield>
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <xQueueGenericSend+0x66>
    1214:	81 11       	cpse	r24, r1
    1216:	c5 dd       	rcall	.-1142   	; 0xda2 <vPortYield>
    1218:	0f 90       	pop	r0
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	4c c0       	rjmp	.+152    	; 0x12b8 <xQueueGenericSend+0x106>
    1220:	8e 81       	ldd	r24, Y+6	; 0x06
    1222:	9f 81       	ldd	r25, Y+7	; 0x07
    1224:	a8 85       	ldd	r26, Y+8	; 0x08
    1226:	b9 85       	ldd	r27, Y+9	; 0x09
    1228:	89 2b       	or	r24, r25
    122a:	8a 2b       	or	r24, r26
    122c:	8b 2b       	or	r24, r27
    122e:	21 f4       	brne	.+8      	; 0x1238 <xQueueGenericSend+0x86>
    1230:	0f 90       	pop	r0
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	40 c0       	rjmp	.+128    	; 0x12b8 <xQueueGenericSend+0x106>
    1238:	11 11       	cpse	r17, r1
    123a:	05 c0       	rjmp	.+10     	; 0x1246 <xQueueGenericSend+0x94>
    123c:	ce 01       	movw	r24, r28
    123e:	01 96       	adiw	r24, 0x01	; 1
    1240:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <vTaskInternalSetTimeOutState>
    1244:	11 e0       	ldi	r17, 0x01	; 1
    1246:	0f 90       	pop	r0
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	15 d7       	rcall	.+3626   	; 0x2076 <vTaskSuspendAll>
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	0f 92       	push	r0
    1252:	f7 01       	movw	r30, r14
    1254:	81 a1       	ldd	r24, Z+33	; 0x21
    1256:	8f 3f       	cpi	r24, 0xFF	; 255
    1258:	09 f4       	brne	.+2      	; 0x125c <xQueueGenericSend+0xaa>
    125a:	11 a2       	std	Z+33, r1	; 0x21
    125c:	f7 01       	movw	r30, r14
    125e:	82 a1       	ldd	r24, Z+34	; 0x22
    1260:	8f 3f       	cpi	r24, 0xFF	; 255
    1262:	09 f4       	brne	.+2      	; 0x1266 <xQueueGenericSend+0xb4>
    1264:	12 a2       	std	Z+34, r1	; 0x22
    1266:	0f 90       	pop	r0
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	be 01       	movw	r22, r28
    126c:	6a 5f       	subi	r22, 0xFA	; 250
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	ce 01       	movw	r24, r28
    1272:	01 96       	adiw	r24, 0x01	; 1
    1274:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <xTaskCheckForTimeOut>
    1278:	81 11       	cpse	r24, r1
    127a:	19 c0       	rjmp	.+50     	; 0x12ae <xQueueGenericSend+0xfc>
    127c:	c7 01       	movw	r24, r14
    127e:	66 de       	rcall	.-820    	; 0xf4c <prvIsQueueFull>
    1280:	88 23       	and	r24, r24
    1282:	81 f0       	breq	.+32     	; 0x12a4 <xQueueGenericSend+0xf2>
    1284:	4e 81       	ldd	r20, Y+6	; 0x06
    1286:	5f 81       	ldd	r21, Y+7	; 0x07
    1288:	68 85       	ldd	r22, Y+8	; 0x08
    128a:	79 85       	ldd	r23, Y+9	; 0x09
    128c:	c7 01       	movw	r24, r14
    128e:	08 96       	adiw	r24, 0x08	; 8
    1290:	0e 94 3c 13 	call	0x2678	; 0x2678 <vTaskPlaceOnEventList>
    1294:	c7 01       	movw	r24, r14
    1296:	e1 de       	rcall	.-574    	; 0x105a <prvUnlockQueue>
    1298:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <xTaskResumeAll>
    129c:	81 11       	cpse	r24, r1
    129e:	a0 cf       	rjmp	.-192    	; 0x11e0 <xQueueGenericSend+0x2e>
    12a0:	80 dd       	rcall	.-1280   	; 0xda2 <vPortYield>
    12a2:	9e cf       	rjmp	.-196    	; 0x11e0 <xQueueGenericSend+0x2e>
    12a4:	c7 01       	movw	r24, r14
    12a6:	d9 de       	rcall	.-590    	; 0x105a <prvUnlockQueue>
    12a8:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <xTaskResumeAll>
    12ac:	99 cf       	rjmp	.-206    	; 0x11e0 <xQueueGenericSend+0x2e>
    12ae:	c7 01       	movw	r24, r14
    12b0:	d4 de       	rcall	.-600    	; 0x105a <prvUnlockQueue>
    12b2:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <xTaskResumeAll>
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	29 96       	adiw	r28, 0x09	; 9
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	ff 90       	pop	r15
    12ce:	ef 90       	pop	r14
    12d0:	df 90       	pop	r13
    12d2:	cf 90       	pop	r12
    12d4:	08 95       	ret

000012d6 <prvInitialiseMutex>:
    12d6:	0f 93       	push	r16
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	69 f0       	breq	.+26     	; 0x12f6 <prvInitialiseMutex+0x20>
    12dc:	fc 01       	movw	r30, r24
    12de:	15 82       	std	Z+5, r1	; 0x05
    12e0:	14 82       	std	Z+4, r1	; 0x04
    12e2:	11 82       	std	Z+1, r1	; 0x01
    12e4:	10 82       	st	Z, r1
    12e6:	16 82       	std	Z+6, r1	; 0x06
    12e8:	00 e0       	ldi	r16, 0x00	; 0
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	a9 01       	movw	r20, r18
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	5e df       	rcall	.-324    	; 0x11b2 <xQueueGenericSend>
    12f6:	0f 91       	pop	r16
    12f8:	08 95       	ret

000012fa <xQueueCreateMutex>:
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	48 2f       	mov	r20, r24
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	33 df       	rcall	.-410    	; 0x116c <xQueueGenericCreate>
    1306:	ec 01       	movw	r28, r24
    1308:	e6 df       	rcall	.-52     	; 0x12d6 <prvInitialiseMutex>
    130a:	ce 01       	movw	r24, r28
    130c:	df 91       	pop	r29
    130e:	cf 91       	pop	r28
    1310:	08 95       	ret

00001312 <xQueueGenericSendFromISR>:
    1312:	ef 92       	push	r14
    1314:	ff 92       	push	r15
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	8a 01       	movw	r16, r20
    1320:	fc 01       	movw	r30, r24
    1322:	56 8d       	ldd	r21, Z+30	; 0x1e
    1324:	37 8d       	ldd	r19, Z+31	; 0x1f
    1326:	53 17       	cp	r21, r19
    1328:	10 f0       	brcs	.+4      	; 0x132e <xQueueGenericSendFromISR+0x1c>
    132a:	22 30       	cpi	r18, 0x02	; 2
    132c:	f9 f4       	brne	.+62     	; 0x136c <xQueueGenericSendFromISR+0x5a>
    132e:	42 2f       	mov	r20, r18
    1330:	78 01       	movw	r14, r16
    1332:	ec 01       	movw	r28, r24
    1334:	1a a1       	ldd	r17, Y+34	; 0x22
    1336:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1338:	ce 01       	movw	r24, r28
    133a:	16 de       	rcall	.-980    	; 0xf68 <prvCopyDataToQueue>
    133c:	1f 3f       	cpi	r17, 0xFF	; 255
    133e:	81 f4       	brne	.+32     	; 0x1360 <xQueueGenericSendFromISR+0x4e>
    1340:	8b 89       	ldd	r24, Y+19	; 0x13
    1342:	88 23       	and	r24, r24
    1344:	a9 f0       	breq	.+42     	; 0x1370 <xQueueGenericSendFromISR+0x5e>
    1346:	ce 01       	movw	r24, r28
    1348:	43 96       	adiw	r24, 0x13	; 19
    134a:	0e 94 df 13 	call	0x27be	; 0x27be <xTaskRemoveFromEventList>
    134e:	88 23       	and	r24, r24
    1350:	89 f0       	breq	.+34     	; 0x1374 <xQueueGenericSendFromISR+0x62>
    1352:	e1 14       	cp	r14, r1
    1354:	f1 04       	cpc	r15, r1
    1356:	81 f0       	breq	.+32     	; 0x1378 <xQueueGenericSendFromISR+0x66>
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	f7 01       	movw	r30, r14
    135c:	80 83       	st	Z, r24
    135e:	0d c0       	rjmp	.+26     	; 0x137a <xQueueGenericSendFromISR+0x68>
    1360:	ff 24       	eor	r15, r15
    1362:	f3 94       	inc	r15
    1364:	f1 0e       	add	r15, r17
    1366:	fa a2       	std	Y+34, r15	; 0x22
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	07 c0       	rjmp	.+14     	; 0x137a <xQueueGenericSendFromISR+0x68>
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	05 c0       	rjmp	.+10     	; 0x137a <xQueueGenericSendFromISR+0x68>
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	03 c0       	rjmp	.+6      	; 0x137a <xQueueGenericSendFromISR+0x68>
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	01 c0       	rjmp	.+2      	; 0x137a <xQueueGenericSendFromISR+0x68>
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	1f 91       	pop	r17
    1380:	0f 91       	pop	r16
    1382:	ff 90       	pop	r15
    1384:	ef 90       	pop	r14
    1386:	08 95       	ret

00001388 <xQueueReceive>:
    1388:	cf 92       	push	r12
    138a:	df 92       	push	r13
    138c:	ef 92       	push	r14
    138e:	ff 92       	push	r15
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	29 97       	sbiw	r28, 0x09	; 9
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	cd bf       	out	0x3d, r28	; 61
    13a8:	8c 01       	movw	r16, r24
    13aa:	6b 01       	movw	r12, r22
    13ac:	2e 83       	std	Y+6, r18	; 0x06
    13ae:	3f 83       	std	Y+7, r19	; 0x07
    13b0:	48 87       	std	Y+8, r20	; 0x08
    13b2:	59 87       	std	Y+9, r21	; 0x09
    13b4:	e1 2c       	mov	r14, r1
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	0f 92       	push	r0
    13bc:	f8 01       	movw	r30, r16
    13be:	f6 8c       	ldd	r15, Z+30	; 0x1e
    13c0:	ff 20       	and	r15, r15
    13c2:	99 f0       	breq	.+38     	; 0x13ea <xQueueReceive+0x62>
    13c4:	b6 01       	movw	r22, r12
    13c6:	c8 01       	movw	r24, r16
    13c8:	2e de       	rcall	.-932    	; 0x1026 <prvCopyDataFromQueue>
    13ca:	fa 94       	dec	r15
    13cc:	f8 01       	movw	r30, r16
    13ce:	f6 8e       	std	Z+30, r15	; 0x1e
    13d0:	80 85       	ldd	r24, Z+8	; 0x08
    13d2:	88 23       	and	r24, r24
    13d4:	31 f0       	breq	.+12     	; 0x13e2 <xQueueReceive+0x5a>
    13d6:	c8 01       	movw	r24, r16
    13d8:	08 96       	adiw	r24, 0x08	; 8
    13da:	0e 94 df 13 	call	0x27be	; 0x27be <xTaskRemoveFromEventList>
    13de:	81 11       	cpse	r24, r1
    13e0:	e0 dc       	rcall	.-1600   	; 0xda2 <vPortYield>
    13e2:	0f 90       	pop	r0
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	4f c0       	rjmp	.+158    	; 0x1488 <xQueueReceive+0x100>
    13ea:	8e 81       	ldd	r24, Y+6	; 0x06
    13ec:	9f 81       	ldd	r25, Y+7	; 0x07
    13ee:	a8 85       	ldd	r26, Y+8	; 0x08
    13f0:	b9 85       	ldd	r27, Y+9	; 0x09
    13f2:	89 2b       	or	r24, r25
    13f4:	8a 2b       	or	r24, r26
    13f6:	8b 2b       	or	r24, r27
    13f8:	21 f4       	brne	.+8      	; 0x1402 <xQueueReceive+0x7a>
    13fa:	0f 90       	pop	r0
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	43 c0       	rjmp	.+134    	; 0x1488 <xQueueReceive+0x100>
    1402:	e1 10       	cpse	r14, r1
    1404:	06 c0       	rjmp	.+12     	; 0x1412 <xQueueReceive+0x8a>
    1406:	ce 01       	movw	r24, r28
    1408:	01 96       	adiw	r24, 0x01	; 1
    140a:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <vTaskInternalSetTimeOutState>
    140e:	ee 24       	eor	r14, r14
    1410:	e3 94       	inc	r14
    1412:	0f 90       	pop	r0
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	2f d6       	rcall	.+3166   	; 0x2076 <vTaskSuspendAll>
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	0f 92       	push	r0
    141e:	f8 01       	movw	r30, r16
    1420:	81 a1       	ldd	r24, Z+33	; 0x21
    1422:	8f 3f       	cpi	r24, 0xFF	; 255
    1424:	09 f4       	brne	.+2      	; 0x1428 <xQueueReceive+0xa0>
    1426:	11 a2       	std	Z+33, r1	; 0x21
    1428:	f8 01       	movw	r30, r16
    142a:	82 a1       	ldd	r24, Z+34	; 0x22
    142c:	8f 3f       	cpi	r24, 0xFF	; 255
    142e:	09 f4       	brne	.+2      	; 0x1432 <xQueueReceive+0xaa>
    1430:	12 a2       	std	Z+34, r1	; 0x22
    1432:	0f 90       	pop	r0
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	be 01       	movw	r22, r28
    1438:	6a 5f       	subi	r22, 0xFA	; 250
    143a:	7f 4f       	sbci	r23, 0xFF	; 255
    143c:	ce 01       	movw	r24, r28
    143e:	01 96       	adiw	r24, 0x01	; 1
    1440:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <xTaskCheckForTimeOut>
    1444:	81 11       	cpse	r24, r1
    1446:	17 c0       	rjmp	.+46     	; 0x1476 <xQueueReceive+0xee>
    1448:	c8 01       	movw	r24, r16
    144a:	73 dd       	rcall	.-1306   	; 0xf32 <prvIsQueueEmpty>
    144c:	88 23       	and	r24, r24
    144e:	79 f0       	breq	.+30     	; 0x146e <xQueueReceive+0xe6>
    1450:	4e 81       	ldd	r20, Y+6	; 0x06
    1452:	5f 81       	ldd	r21, Y+7	; 0x07
    1454:	68 85       	ldd	r22, Y+8	; 0x08
    1456:	79 85       	ldd	r23, Y+9	; 0x09
    1458:	c8 01       	movw	r24, r16
    145a:	43 96       	adiw	r24, 0x13	; 19
    145c:	0e 94 3c 13 	call	0x2678	; 0x2678 <vTaskPlaceOnEventList>
    1460:	c8 01       	movw	r24, r16
    1462:	fb dd       	rcall	.-1034   	; 0x105a <prvUnlockQueue>
    1464:	48 d7       	rcall	.+3728   	; 0x22f6 <xTaskResumeAll>
    1466:	81 11       	cpse	r24, r1
    1468:	a6 cf       	rjmp	.-180    	; 0x13b6 <xQueueReceive+0x2e>
    146a:	9b dc       	rcall	.-1738   	; 0xda2 <vPortYield>
    146c:	a4 cf       	rjmp	.-184    	; 0x13b6 <xQueueReceive+0x2e>
    146e:	c8 01       	movw	r24, r16
    1470:	f4 dd       	rcall	.-1048   	; 0x105a <prvUnlockQueue>
    1472:	41 d7       	rcall	.+3714   	; 0x22f6 <xTaskResumeAll>
    1474:	a0 cf       	rjmp	.-192    	; 0x13b6 <xQueueReceive+0x2e>
    1476:	c8 01       	movw	r24, r16
    1478:	f0 dd       	rcall	.-1056   	; 0x105a <prvUnlockQueue>
    147a:	3d d7       	rcall	.+3706   	; 0x22f6 <xTaskResumeAll>
    147c:	c8 01       	movw	r24, r16
    147e:	59 dd       	rcall	.-1358   	; 0xf32 <prvIsQueueEmpty>
    1480:	88 23       	and	r24, r24
    1482:	09 f4       	brne	.+2      	; 0x1486 <xQueueReceive+0xfe>
    1484:	98 cf       	rjmp	.-208    	; 0x13b6 <xQueueReceive+0x2e>
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	29 96       	adiw	r28, 0x09	; 9
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	1f 91       	pop	r17
    149a:	0f 91       	pop	r16
    149c:	ff 90       	pop	r15
    149e:	ef 90       	pop	r14
    14a0:	df 90       	pop	r13
    14a2:	cf 90       	pop	r12
    14a4:	08 95       	ret

000014a6 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	0f 92       	push	r0
    14b2:	89 a1       	ldd	r24, Y+33	; 0x21
    14b4:	8f 3f       	cpi	r24, 0xFF	; 255
    14b6:	09 f4       	brne	.+2      	; 0x14ba <vQueueWaitForMessageRestricted+0x14>
    14b8:	19 a2       	std	Y+33, r1	; 0x21
    14ba:	8a a1       	ldd	r24, Y+34	; 0x22
    14bc:	8f 3f       	cpi	r24, 0xFF	; 255
    14be:	09 f4       	brne	.+2      	; 0x14c2 <vQueueWaitForMessageRestricted+0x1c>
    14c0:	1a a2       	std	Y+34, r1	; 0x22
    14c2:	0f 90       	pop	r0
    14c4:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    14c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14c8:	81 11       	cpse	r24, r1
    14ca:	04 c0       	rjmp	.+8      	; 0x14d4 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    14cc:	ce 01       	movw	r24, r28
    14ce:	43 96       	adiw	r24, 0x13	; 19
    14d0:	0e 94 9d 13 	call	0x273a	; 0x273a <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    14d4:	ce 01       	movw	r24, r28
    14d6:	c1 dd       	rcall	.-1150   	; 0x105a <prvUnlockQueue>
    }
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	08 95       	ret

000014de <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    14de:	fc 01       	movw	r30, r24
    14e0:	44 81       	ldd	r20, Z+4	; 0x04
    14e2:	55 81       	ldd	r21, Z+5	; 0x05
    14e4:	22 81       	ldd	r18, Z+2	; 0x02
    14e6:	33 81       	ldd	r19, Z+3	; 0x03
    14e8:	24 0f       	add	r18, r20
    14ea:	35 1f       	adc	r19, r21
    14ec:	80 81       	ld	r24, Z
    14ee:	91 81       	ldd	r25, Z+1	; 0x01
    14f0:	b9 01       	movw	r22, r18
    14f2:	68 1b       	sub	r22, r24
    14f4:	79 0b       	sbc	r23, r25
    14f6:	cb 01       	movw	r24, r22
    14f8:	64 17       	cp	r22, r20
    14fa:	75 07       	cpc	r23, r21
    14fc:	10 f0       	brcs	.+4      	; 0x1502 <prvBytesInBuffer+0x24>
    14fe:	84 1b       	sub	r24, r20
    1500:	95 0b       	sbc	r25, r21
    1502:	08 95       	ret

00001504 <prvInitialiseNewStreamBuffer>:
    1504:	0f 93       	push	r16
    1506:	fc 01       	movw	r30, r24
    1508:	8f e0       	ldi	r24, 0x0F	; 15
    150a:	df 01       	movw	r26, r30
    150c:	1d 92       	st	X+, r1
    150e:	8a 95       	dec	r24
    1510:	e9 f7       	brne	.-6      	; 0x150c <prvInitialiseNewStreamBuffer+0x8>
    1512:	75 87       	std	Z+13, r23	; 0x0d
    1514:	64 87       	std	Z+12, r22	; 0x0c
    1516:	55 83       	std	Z+5, r21	; 0x05
    1518:	44 83       	std	Z+4, r20	; 0x04
    151a:	37 83       	std	Z+7, r19	; 0x07
    151c:	26 83       	std	Z+6, r18	; 0x06
    151e:	06 87       	std	Z+14, r16	; 0x0e
    1520:	0f 91       	pop	r16
    1522:	08 95       	ret

00001524 <prvWriteBytesToBuffer>:
    1524:	af 92       	push	r10
    1526:	bf 92       	push	r11
    1528:	cf 92       	push	r12
    152a:	df 92       	push	r13
    152c:	ef 92       	push	r14
    152e:	ff 92       	push	r15
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	6c 01       	movw	r12, r24
    153a:	5b 01       	movw	r10, r22
    153c:	7a 01       	movw	r14, r20
    153e:	fc 01       	movw	r30, r24
    1540:	c2 81       	ldd	r28, Z+2	; 0x02
    1542:	d3 81       	ldd	r29, Z+3	; 0x03
    1544:	04 81       	ldd	r16, Z+4	; 0x04
    1546:	15 81       	ldd	r17, Z+5	; 0x05
    1548:	0c 1b       	sub	r16, r28
    154a:	1d 0b       	sbc	r17, r29
    154c:	40 17       	cp	r20, r16
    154e:	51 07       	cpc	r21, r17
    1550:	08 f4       	brcc	.+2      	; 0x1554 <prvWriteBytesToBuffer+0x30>
    1552:	8a 01       	movw	r16, r20
    1554:	f6 01       	movw	r30, r12
    1556:	84 85       	ldd	r24, Z+12	; 0x0c
    1558:	95 85       	ldd	r25, Z+13	; 0x0d
    155a:	a8 01       	movw	r20, r16
    155c:	b5 01       	movw	r22, r10
    155e:	8c 0f       	add	r24, r28
    1560:	9d 1f       	adc	r25, r29
    1562:	0e 94 d7 33 	call	0x67ae	; 0x67ae <memcpy>
    1566:	0e 15       	cp	r16, r14
    1568:	1f 05       	cpc	r17, r15
    156a:	58 f4       	brcc	.+22     	; 0x1582 <prvWriteBytesToBuffer+0x5e>
    156c:	a7 01       	movw	r20, r14
    156e:	40 1b       	sub	r20, r16
    1570:	51 0b       	sbc	r21, r17
    1572:	b5 01       	movw	r22, r10
    1574:	60 0f       	add	r22, r16
    1576:	71 1f       	adc	r23, r17
    1578:	f6 01       	movw	r30, r12
    157a:	84 85       	ldd	r24, Z+12	; 0x0c
    157c:	95 85       	ldd	r25, Z+13	; 0x0d
    157e:	0e 94 d7 33 	call	0x67ae	; 0x67ae <memcpy>
    1582:	ce 01       	movw	r24, r28
    1584:	8e 0d       	add	r24, r14
    1586:	9f 1d       	adc	r25, r15
    1588:	f6 01       	movw	r30, r12
    158a:	24 81       	ldd	r18, Z+4	; 0x04
    158c:	35 81       	ldd	r19, Z+5	; 0x05
    158e:	82 17       	cp	r24, r18
    1590:	93 07       	cpc	r25, r19
    1592:	10 f0       	brcs	.+4      	; 0x1598 <prvWriteBytesToBuffer+0x74>
    1594:	82 1b       	sub	r24, r18
    1596:	93 0b       	sbc	r25, r19
    1598:	f6 01       	movw	r30, r12
    159a:	93 83       	std	Z+3, r25	; 0x03
    159c:	82 83       	std	Z+2, r24	; 0x02
    159e:	c7 01       	movw	r24, r14
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	1f 91       	pop	r17
    15a6:	0f 91       	pop	r16
    15a8:	ff 90       	pop	r15
    15aa:	ef 90       	pop	r14
    15ac:	df 90       	pop	r13
    15ae:	cf 90       	pop	r12
    15b0:	bf 90       	pop	r11
    15b2:	af 90       	pop	r10
    15b4:	08 95       	ret

000015b6 <prvWriteMessageToBuffer>:
    15b6:	cf 92       	push	r12
    15b8:	df 92       	push	r13
    15ba:	ef 92       	push	r14
    15bc:	ff 92       	push	r15
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	1f 92       	push	r1
    15c8:	1f 92       	push	r1
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
    15ce:	7c 01       	movw	r14, r24
    15d0:	6b 01       	movw	r12, r22
    15d2:	5a 83       	std	Y+2, r21	; 0x02
    15d4:	49 83       	std	Y+1, r20	; 0x01
    15d6:	21 15       	cp	r18, r1
    15d8:	31 05       	cpc	r19, r1
    15da:	c1 f0       	breq	.+48     	; 0x160c <prvWriteMessageToBuffer+0x56>
    15dc:	fc 01       	movw	r30, r24
    15de:	86 85       	ldd	r24, Z+14	; 0x0e
    15e0:	80 fd       	sbrc	r24, 0
    15e2:	08 c0       	rjmp	.+16     	; 0x15f4 <prvWriteMessageToBuffer+0x3e>
    15e4:	42 17       	cp	r20, r18
    15e6:	53 07       	cpc	r21, r19
    15e8:	08 f4       	brcc	.+2      	; 0x15ec <prvWriteMessageToBuffer+0x36>
    15ea:	9a 01       	movw	r18, r20
    15ec:	3a 83       	std	Y+2, r19	; 0x02
    15ee:	29 83       	std	Y+1, r18	; 0x01
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	0f c0       	rjmp	.+30     	; 0x1612 <prvWriteMessageToBuffer+0x5c>
    15f4:	20 17       	cp	r18, r16
    15f6:	31 07       	cpc	r19, r17
    15f8:	58 f0       	brcs	.+22     	; 0x1610 <prvWriteMessageToBuffer+0x5a>
    15fa:	42 e0       	ldi	r20, 0x02	; 2
    15fc:	50 e0       	ldi	r21, 0x00	; 0
    15fe:	be 01       	movw	r22, r28
    1600:	6f 5f       	subi	r22, 0xFF	; 255
    1602:	7f 4f       	sbci	r23, 0xFF	; 255
    1604:	c7 01       	movw	r24, r14
    1606:	8e df       	rcall	.-228    	; 0x1524 <prvWriteBytesToBuffer>
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	03 c0       	rjmp	.+6      	; 0x1612 <prvWriteMessageToBuffer+0x5c>
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	01 c0       	rjmp	.+2      	; 0x1612 <prvWriteMessageToBuffer+0x5c>
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	88 23       	and	r24, r24
    1614:	31 f0       	breq	.+12     	; 0x1622 <prvWriteMessageToBuffer+0x6c>
    1616:	49 81       	ldd	r20, Y+1	; 0x01
    1618:	5a 81       	ldd	r21, Y+2	; 0x02
    161a:	b6 01       	movw	r22, r12
    161c:	c7 01       	movw	r24, r14
    161e:	82 df       	rcall	.-252    	; 0x1524 <prvWriteBytesToBuffer>
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <prvWriteMessageToBuffer+0x70>
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	ff 90       	pop	r15
    1634:	ef 90       	pop	r14
    1636:	df 90       	pop	r13
    1638:	cf 90       	pop	r12
    163a:	08 95       	ret

0000163c <prvReadBytesFromBuffer>:
    163c:	af 92       	push	r10
    163e:	bf 92       	push	r11
    1640:	cf 92       	push	r12
    1642:	df 92       	push	r13
    1644:	ef 92       	push	r14
    1646:	ff 92       	push	r15
    1648:	0f 93       	push	r16
    164a:	1f 93       	push	r17
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	7c 01       	movw	r14, r24
    1652:	5b 01       	movw	r10, r22
    1654:	e9 01       	movw	r28, r18
    1656:	42 17       	cp	r20, r18
    1658:	53 07       	cpc	r21, r19
    165a:	08 f4       	brcc	.+2      	; 0x165e <prvReadBytesFromBuffer+0x22>
    165c:	ea 01       	movw	r28, r20
    165e:	20 97       	sbiw	r28, 0x00	; 0
    1660:	81 f1       	breq	.+96     	; 0x16c2 <prvReadBytesFromBuffer+0x86>
    1662:	f7 01       	movw	r30, r14
    1664:	00 81       	ld	r16, Z
    1666:	11 81       	ldd	r17, Z+1	; 0x01
    1668:	84 81       	ldd	r24, Z+4	; 0x04
    166a:	95 81       	ldd	r25, Z+5	; 0x05
    166c:	80 1b       	sub	r24, r16
    166e:	91 0b       	sbc	r25, r17
    1670:	6e 01       	movw	r12, r28
    1672:	8c 17       	cp	r24, r28
    1674:	9d 07       	cpc	r25, r29
    1676:	08 f4       	brcc	.+2      	; 0x167a <prvReadBytesFromBuffer+0x3e>
    1678:	6c 01       	movw	r12, r24
    167a:	f7 01       	movw	r30, r14
    167c:	64 85       	ldd	r22, Z+12	; 0x0c
    167e:	75 85       	ldd	r23, Z+13	; 0x0d
    1680:	60 0f       	add	r22, r16
    1682:	71 1f       	adc	r23, r17
    1684:	a6 01       	movw	r20, r12
    1686:	c5 01       	movw	r24, r10
    1688:	0e 94 d7 33 	call	0x67ae	; 0x67ae <memcpy>
    168c:	cc 16       	cp	r12, r28
    168e:	dd 06       	cpc	r13, r29
    1690:	58 f4       	brcc	.+22     	; 0x16a8 <prvReadBytesFromBuffer+0x6c>
    1692:	ae 01       	movw	r20, r28
    1694:	4c 19       	sub	r20, r12
    1696:	5d 09       	sbc	r21, r13
    1698:	f7 01       	movw	r30, r14
    169a:	64 85       	ldd	r22, Z+12	; 0x0c
    169c:	75 85       	ldd	r23, Z+13	; 0x0d
    169e:	c5 01       	movw	r24, r10
    16a0:	8c 0d       	add	r24, r12
    16a2:	9d 1d       	adc	r25, r13
    16a4:	0e 94 d7 33 	call	0x67ae	; 0x67ae <memcpy>
    16a8:	0c 0f       	add	r16, r28
    16aa:	1d 1f       	adc	r17, r29
    16ac:	f7 01       	movw	r30, r14
    16ae:	84 81       	ldd	r24, Z+4	; 0x04
    16b0:	95 81       	ldd	r25, Z+5	; 0x05
    16b2:	08 17       	cp	r16, r24
    16b4:	19 07       	cpc	r17, r25
    16b6:	10 f0       	brcs	.+4      	; 0x16bc <prvReadBytesFromBuffer+0x80>
    16b8:	08 1b       	sub	r16, r24
    16ba:	19 0b       	sbc	r17, r25
    16bc:	f7 01       	movw	r30, r14
    16be:	11 83       	std	Z+1, r17	; 0x01
    16c0:	00 83       	st	Z, r16
    16c2:	ce 01       	movw	r24, r28
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	1f 91       	pop	r17
    16ca:	0f 91       	pop	r16
    16cc:	ff 90       	pop	r15
    16ce:	ef 90       	pop	r14
    16d0:	df 90       	pop	r13
    16d2:	cf 90       	pop	r12
    16d4:	bf 90       	pop	r11
    16d6:	af 90       	pop	r10
    16d8:	08 95       	ret

000016da <prvReadMessageFromBuffer>:
    16da:	6f 92       	push	r6
    16dc:	7f 92       	push	r7
    16de:	8f 92       	push	r8
    16e0:	9f 92       	push	r9
    16e2:	af 92       	push	r10
    16e4:	bf 92       	push	r11
    16e6:	cf 92       	push	r12
    16e8:	df 92       	push	r13
    16ea:	ef 92       	push	r14
    16ec:	ff 92       	push	r15
    16ee:	0f 93       	push	r16
    16f0:	1f 93       	push	r17
    16f2:	cf 93       	push	r28
    16f4:	df 93       	push	r29
    16f6:	1f 92       	push	r1
    16f8:	1f 92       	push	r1
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	6c 01       	movw	r12, r24
    1700:	4b 01       	movw	r8, r22
    1702:	5a 01       	movw	r10, r20
    1704:	79 01       	movw	r14, r18
    1706:	01 15       	cp	r16, r1
    1708:	11 05       	cpc	r17, r1
    170a:	b1 f0       	breq	.+44     	; 0x1738 <prvReadMessageFromBuffer+0x5e>
    170c:	fc 01       	movw	r30, r24
    170e:	60 80       	ld	r6, Z
    1710:	71 80       	ldd	r7, Z+1	; 0x01
    1712:	a8 01       	movw	r20, r16
    1714:	be 01       	movw	r22, r28
    1716:	6f 5f       	subi	r22, 0xFF	; 255
    1718:	7f 4f       	sbci	r23, 0xFF	; 255
    171a:	90 df       	rcall	.-224    	; 0x163c <prvReadBytesFromBuffer>
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	9a 81       	ldd	r25, Y+2	; 0x02
    1720:	e0 1a       	sub	r14, r16
    1722:	f1 0a       	sbc	r15, r17
    1724:	a8 16       	cp	r10, r24
    1726:	b9 06       	cpc	r11, r25
    1728:	30 f4       	brcc	.+12     	; 0x1736 <prvReadMessageFromBuffer+0x5c>
    172a:	f6 01       	movw	r30, r12
    172c:	71 82       	std	Z+1, r7	; 0x01
    172e:	60 82       	st	Z, r6
    1730:	a1 2c       	mov	r10, r1
    1732:	b1 2c       	mov	r11, r1
    1734:	01 c0       	rjmp	.+2      	; 0x1738 <prvReadMessageFromBuffer+0x5e>
    1736:	5c 01       	movw	r10, r24
    1738:	97 01       	movw	r18, r14
    173a:	a5 01       	movw	r20, r10
    173c:	b4 01       	movw	r22, r8
    173e:	c6 01       	movw	r24, r12
    1740:	7d df       	rcall	.-262    	; 0x163c <prvReadBytesFromBuffer>
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	1f 91       	pop	r17
    174c:	0f 91       	pop	r16
    174e:	ff 90       	pop	r15
    1750:	ef 90       	pop	r14
    1752:	df 90       	pop	r13
    1754:	cf 90       	pop	r12
    1756:	bf 90       	pop	r11
    1758:	af 90       	pop	r10
    175a:	9f 90       	pop	r9
    175c:	8f 90       	pop	r8
    175e:	7f 90       	pop	r7
    1760:	6f 90       	pop	r6
    1762:	08 95       	ret

00001764 <xStreamBufferGenericCreate>:
    1764:	cf 92       	push	r12
    1766:	df 92       	push	r13
    1768:	ef 92       	push	r14
    176a:	ff 92       	push	r15
    176c:	0f 93       	push	r16
    176e:	cf 93       	push	r28
    1770:	df 93       	push	r29
    1772:	ec 01       	movw	r28, r24
    1774:	6b 01       	movw	r12, r22
    1776:	41 30       	cpi	r20, 0x01	; 1
    1778:	11 f4       	brne	.+4      	; 0x177e <xStreamBufferGenericCreate+0x1a>
    177a:	01 e0       	ldi	r16, 0x01	; 1
    177c:	01 c0       	rjmp	.+2      	; 0x1780 <xStreamBufferGenericCreate+0x1c>
    177e:	00 e0       	ldi	r16, 0x00	; 0
    1780:	c1 14       	cp	r12, r1
    1782:	d1 04       	cpc	r13, r1
    1784:	19 f4       	brne	.+6      	; 0x178c <xStreamBufferGenericCreate+0x28>
    1786:	cc 24       	eor	r12, r12
    1788:	c3 94       	inc	r12
    178a:	d1 2c       	mov	r13, r1
    178c:	ce 01       	movw	r24, r28
    178e:	40 96       	adiw	r24, 0x10	; 16
    1790:	c8 17       	cp	r28, r24
    1792:	d9 07       	cpc	r29, r25
    1794:	20 f4       	brcc	.+8      	; 0x179e <xStreamBufferGenericCreate+0x3a>
    1796:	21 96       	adiw	r28, 0x01	; 1
    1798:	50 d9       	rcall	.-3424   	; 0xa3a <pvPortMalloc>
    179a:	7c 01       	movw	r14, r24
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <xStreamBufferGenericCreate+0x3e>
    179e:	e1 2c       	mov	r14, r1
    17a0:	f1 2c       	mov	r15, r1
    17a2:	e1 14       	cp	r14, r1
    17a4:	f1 04       	cpc	r15, r1
    17a6:	39 f0       	breq	.+14     	; 0x17b6 <xStreamBufferGenericCreate+0x52>
    17a8:	96 01       	movw	r18, r12
    17aa:	ae 01       	movw	r20, r28
    17ac:	b7 01       	movw	r22, r14
    17ae:	61 5f       	subi	r22, 0xF1	; 241
    17b0:	7f 4f       	sbci	r23, 0xFF	; 255
    17b2:	c7 01       	movw	r24, r14
    17b4:	a7 de       	rcall	.-690    	; 0x1504 <prvInitialiseNewStreamBuffer>
    17b6:	c7 01       	movw	r24, r14
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	0f 91       	pop	r16
    17be:	ff 90       	pop	r15
    17c0:	ef 90       	pop	r14
    17c2:	df 90       	pop	r13
    17c4:	cf 90       	pop	r12
    17c6:	08 95       	ret

000017c8 <xStreamBufferReset>:
    17c8:	0f 93       	push	r16
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	0f 92       	push	r0
    17d0:	fc 01       	movw	r30, r24
    17d2:	20 85       	ldd	r18, Z+8	; 0x08
    17d4:	31 85       	ldd	r19, Z+9	; 0x09
    17d6:	23 2b       	or	r18, r19
    17d8:	71 f4       	brne	.+28     	; 0x17f6 <xStreamBufferReset+0x2e>
    17da:	22 85       	ldd	r18, Z+10	; 0x0a
    17dc:	33 85       	ldd	r19, Z+11	; 0x0b
    17de:	23 2b       	or	r18, r19
    17e0:	61 f4       	brne	.+24     	; 0x17fa <xStreamBufferReset+0x32>
    17e2:	26 81       	ldd	r18, Z+6	; 0x06
    17e4:	37 81       	ldd	r19, Z+7	; 0x07
    17e6:	44 81       	ldd	r20, Z+4	; 0x04
    17e8:	55 81       	ldd	r21, Z+5	; 0x05
    17ea:	64 85       	ldd	r22, Z+12	; 0x0c
    17ec:	75 85       	ldd	r23, Z+13	; 0x0d
    17ee:	06 85       	ldd	r16, Z+14	; 0x0e
    17f0:	89 de       	rcall	.-750    	; 0x1504 <prvInitialiseNewStreamBuffer>
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	03 c0       	rjmp	.+6      	; 0x17fc <xStreamBufferReset+0x34>
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	01 c0       	rjmp	.+2      	; 0x17fc <xStreamBufferReset+0x34>
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	0f 90       	pop	r0
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	0f 91       	pop	r16
    1802:	08 95       	ret

00001804 <xStreamBufferSpacesAvailable>:
    1804:	fc 01       	movw	r30, r24
    1806:	24 81       	ldd	r18, Z+4	; 0x04
    1808:	35 81       	ldd	r19, Z+5	; 0x05
    180a:	80 81       	ld	r24, Z
    180c:	91 81       	ldd	r25, Z+1	; 0x01
    180e:	82 0f       	add	r24, r18
    1810:	93 1f       	adc	r25, r19
    1812:	42 81       	ldd	r20, Z+2	; 0x02
    1814:	53 81       	ldd	r21, Z+3	; 0x03
    1816:	84 1b       	sub	r24, r20
    1818:	95 0b       	sbc	r25, r21
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	82 17       	cp	r24, r18
    181e:	93 07       	cpc	r25, r19
    1820:	10 f0       	brcs	.+4      	; 0x1826 <xStreamBufferSpacesAvailable+0x22>
    1822:	82 1b       	sub	r24, r18
    1824:	93 0b       	sbc	r25, r19
    1826:	08 95       	ret

00001828 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1828:	2f 92       	push	r2
    182a:	3f 92       	push	r3
    182c:	4f 92       	push	r4
    182e:	5f 92       	push	r5
    1830:	6f 92       	push	r6
    1832:	7f 92       	push	r7
    1834:	8f 92       	push	r8
    1836:	9f 92       	push	r9
    1838:	af 92       	push	r10
    183a:	bf 92       	push	r11
    183c:	cf 92       	push	r12
    183e:	df 92       	push	r13
    1840:	ef 92       	push	r14
    1842:	ff 92       	push	r15
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	2b 97       	sbiw	r28, 0x0b	; 11
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	de bf       	out	0x3e, r29	; 62
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	cd bf       	out	0x3d, r28	; 61
    185c:	4c 01       	movw	r8, r24
    185e:	7b 87       	std	Y+11, r23	; 0x0b
    1860:	6a 87       	std	Y+10, r22	; 0x0a
    1862:	1a 01       	movw	r2, r20
    1864:	0e 83       	std	Y+6, r16	; 0x06
    1866:	1f 83       	std	Y+7, r17	; 0x07
    1868:	28 87       	std	Y+8, r18	; 0x08
    186a:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    186c:	fc 01       	movw	r30, r24
    186e:	84 81       	ldd	r24, Z+4	; 0x04
    1870:	95 81       	ldd	r25, Z+5	; 0x05
    1872:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1874:	26 85       	ldd	r18, Z+14	; 0x0e
    1876:	20 ff       	sbrs	r18, 0
    1878:	0c c0       	rjmp	.+24     	; 0x1892 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    187a:	2a 01       	movw	r4, r20
    187c:	f2 e0       	ldi	r31, 0x02	; 2
    187e:	4f 0e       	add	r4, r31
    1880:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1882:	84 15       	cp	r24, r4
    1884:	95 05       	cpc	r25, r5
    1886:	58 f4       	brcc	.+22     	; 0x189e <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1888:	1e 82       	std	Y+6, r1	; 0x06
    188a:	1f 82       	std	Y+7, r1	; 0x07
    188c:	18 86       	std	Y+8, r1	; 0x08
    188e:	19 86       	std	Y+9, r1	; 0x09
    1890:	06 c0       	rjmp	.+12     	; 0x189e <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1892:	84 17       	cp	r24, r20
    1894:	95 07       	cpc	r25, r21
    1896:	10 f0       	brcs	.+4      	; 0x189c <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1898:	2a 01       	movw	r4, r20
    189a:	01 c0       	rjmp	.+2      	; 0x189e <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    189c:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    189e:	8e 81       	ldd	r24, Y+6	; 0x06
    18a0:	9f 81       	ldd	r25, Y+7	; 0x07
    18a2:	a8 85       	ldd	r26, Y+8	; 0x08
    18a4:	b9 85       	ldd	r27, Y+9	; 0x09
    18a6:	89 2b       	or	r24, r25
    18a8:	8a 2b       	or	r24, r26
    18aa:	8b 2b       	or	r24, r27
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <xStreamBufferSend+0x88>
    18ae:	38 c0       	rjmp	.+112    	; 0x1920 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    18b0:	ce 01       	movw	r24, r28
    18b2:	01 96       	adiw	r24, 0x01	; 1
    18b4:	0e 94 28 15 	call	0x2a50	; 0x2a50 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    18be:	c4 01       	movw	r24, r8
    18c0:	a1 df       	rcall	.-190    	; 0x1804 <xStreamBufferSpacesAvailable>
    18c2:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    18c4:	84 15       	cp	r24, r4
    18c6:	95 05       	cpc	r25, r5
    18c8:	40 f5       	brcc	.+80     	; 0x191a <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    18ca:	60 e0       	ldi	r22, 0x00	; 0
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	0e 94 11 19 	call	0x3222	; 0x3222 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    18d4:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <xTaskGetCurrentTaskHandle>
    18d8:	f4 01       	movw	r30, r8
    18da:	93 87       	std	Z+11, r25	; 0x0b
    18dc:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    18de:	0f 90       	pop	r0
    18e0:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    18e2:	ae 80       	ldd	r10, Y+6	; 0x06
    18e4:	bf 80       	ldd	r11, Y+7	; 0x07
    18e6:	c8 84       	ldd	r12, Y+8	; 0x08
    18e8:	d9 84       	ldd	r13, Y+9	; 0x09
    18ea:	e1 2c       	mov	r14, r1
    18ec:	f1 2c       	mov	r15, r1
    18ee:	00 e0       	ldi	r16, 0x00	; 0
    18f0:	10 e0       	ldi	r17, 0x00	; 0
    18f2:	98 01       	movw	r18, r16
    18f4:	40 e0       	ldi	r20, 0x00	; 0
    18f6:	50 e0       	ldi	r21, 0x00	; 0
    18f8:	ba 01       	movw	r22, r20
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1900:	f4 01       	movw	r30, r8
    1902:	13 86       	std	Z+11, r1	; 0x0b
    1904:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1906:	be 01       	movw	r22, r28
    1908:	6a 5f       	subi	r22, 0xFA	; 250
    190a:	7f 4f       	sbci	r23, 0xFF	; 255
    190c:	ce 01       	movw	r24, r28
    190e:	01 96       	adiw	r24, 0x01	; 1
    1910:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <xTaskCheckForTimeOut>
    1914:	88 23       	and	r24, r24
    1916:	81 f2       	breq	.-96     	; 0x18b8 <xStreamBufferSend+0x90>
    1918:	05 c0       	rjmp	.+10     	; 0x1924 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    191a:	0f 90       	pop	r0
    191c:	0f be       	out	0x3f, r0	; 63
                    break;
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1920:	61 2c       	mov	r6, r1
    1922:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1924:	61 14       	cp	r6, r1
    1926:	71 04       	cpc	r7, r1
    1928:	19 f4       	brne	.+6      	; 0x1930 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    192a:	c4 01       	movw	r24, r8
    192c:	6b df       	rcall	.-298    	; 0x1804 <xStreamBufferSpacesAvailable>
    192e:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1930:	82 01       	movw	r16, r4
    1932:	93 01       	movw	r18, r6
    1934:	a1 01       	movw	r20, r2
    1936:	6a 85       	ldd	r22, Y+10	; 0x0a
    1938:	7b 85       	ldd	r23, Y+11	; 0x0b
    193a:	c4 01       	movw	r24, r8
    193c:	3c de       	rcall	.-904    	; 0x15b6 <prvWriteMessageToBuffer>
    193e:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1940:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1942:	e9 f0       	breq	.+58     	; 0x197e <xStreamBufferSend+0x156>
    1944:	c4 01       	movw	r24, r8
    1946:	cb dd       	rcall	.-1130   	; 0x14de <prvBytesInBuffer>
    1948:	f4 01       	movw	r30, r8
    194a:	26 81       	ldd	r18, Z+6	; 0x06
    194c:	37 81       	ldd	r19, Z+7	; 0x07
    194e:	82 17       	cp	r24, r18
    1950:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1952:	a8 f0       	brcs	.+42     	; 0x197e <xStreamBufferSend+0x156>
    1954:	90 d3       	rcall	.+1824   	; 0x2076 <vTaskSuspendAll>
    1956:	f4 01       	movw	r30, r8
    1958:	80 85       	ldd	r24, Z+8	; 0x08
    195a:	91 85       	ldd	r25, Z+9	; 0x09
    195c:	89 2b       	or	r24, r25
    195e:	71 f0       	breq	.+28     	; 0x197c <xStreamBufferSend+0x154>
    1960:	80 85       	ldd	r24, Z+8	; 0x08
    1962:	91 85       	ldd	r25, Z+9	; 0x09
    1964:	e1 2c       	mov	r14, r1
    1966:	f1 2c       	mov	r15, r1
    1968:	00 e0       	ldi	r16, 0x00	; 0
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	a9 01       	movw	r20, r18
    1970:	60 e0       	ldi	r22, 0x00	; 0
    1972:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <xTaskGenericNotify>
    1976:	f4 01       	movw	r30, r8
    1978:	11 86       	std	Z+9, r1	; 0x09
    197a:	10 86       	std	Z+8, r1	; 0x08
    197c:	bc d4       	rcall	.+2424   	; 0x22f6 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    197e:	c6 01       	movw	r24, r12
    1980:	2b 96       	adiw	r28, 0x0b	; 11
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	df 91       	pop	r29
    198e:	cf 91       	pop	r28
    1990:	1f 91       	pop	r17
    1992:	0f 91       	pop	r16
    1994:	ff 90       	pop	r15
    1996:	ef 90       	pop	r14
    1998:	df 90       	pop	r13
    199a:	cf 90       	pop	r12
    199c:	bf 90       	pop	r11
    199e:	af 90       	pop	r10
    19a0:	9f 90       	pop	r9
    19a2:	8f 90       	pop	r8
    19a4:	7f 90       	pop	r7
    19a6:	6f 90       	pop	r6
    19a8:	5f 90       	pop	r5
    19aa:	4f 90       	pop	r4
    19ac:	3f 90       	pop	r3
    19ae:	2f 90       	pop	r2
    19b0:	08 95       	ret

000019b2 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    19b2:	af 92       	push	r10
    19b4:	bf 92       	push	r11
    19b6:	cf 92       	push	r12
    19b8:	df 92       	push	r13
    19ba:	ef 92       	push	r14
    19bc:	ff 92       	push	r15
    19be:	0f 93       	push	r16
    19c0:	1f 93       	push	r17
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	ec 01       	movw	r28, r24
    19c8:	7b 01       	movw	r14, r22
    19ca:	5a 01       	movw	r10, r20
    19cc:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    19ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    19d0:	80 ff       	sbrs	r24, 0
    19d2:	04 c0       	rjmp	.+8      	; 0x19dc <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    19d4:	8a 01       	movw	r16, r20
    19d6:	0e 5f       	subi	r16, 0xFE	; 254
    19d8:	1f 4f       	sbci	r17, 0xFF	; 255
    19da:	01 c0       	rjmp	.+2      	; 0x19de <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    19dc:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    19de:	ce 01       	movw	r24, r28
    19e0:	11 df       	rcall	.-478    	; 0x1804 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    19e2:	9c 01       	movw	r18, r24
    19e4:	a5 01       	movw	r20, r10
    19e6:	b7 01       	movw	r22, r14
    19e8:	ce 01       	movw	r24, r28
    19ea:	e5 dd       	rcall	.-1078   	; 0x15b6 <prvWriteMessageToBuffer>
    19ec:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    19ee:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    19f0:	c1 f0       	breq	.+48     	; 0x1a22 <xStreamBufferSendFromISR+0x70>
    19f2:	ce 01       	movw	r24, r28
    19f4:	74 dd       	rcall	.-1304   	; 0x14de <prvBytesInBuffer>
    19f6:	2e 81       	ldd	r18, Y+6	; 0x06
    19f8:	3f 81       	ldd	r19, Y+7	; 0x07
    19fa:	82 17       	cp	r24, r18
    19fc:	93 07       	cpc	r25, r19
    19fe:	88 f0       	brcs	.+34     	; 0x1a22 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1a00:	88 85       	ldd	r24, Y+8	; 0x08
    1a02:	99 85       	ldd	r25, Y+9	; 0x09
    1a04:	89 2b       	or	r24, r25
    1a06:	69 f0       	breq	.+26     	; 0x1a22 <xStreamBufferSendFromISR+0x70>
    1a08:	88 85       	ldd	r24, Y+8	; 0x08
    1a0a:	99 85       	ldd	r25, Y+9	; 0x09
    1a0c:	e1 2c       	mov	r14, r1
    1a0e:	f1 2c       	mov	r15, r1
    1a10:	00 e0       	ldi	r16, 0x00	; 0
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	a9 01       	movw	r20, r18
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	0e 94 ef 17 	call	0x2fde	; 0x2fde <xTaskGenericNotifyFromISR>
    1a1e:	19 86       	std	Y+9, r1	; 0x09
    1a20:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1a22:	c5 01       	movw	r24, r10
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	1f 91       	pop	r17
    1a2a:	0f 91       	pop	r16
    1a2c:	ff 90       	pop	r15
    1a2e:	ef 90       	pop	r14
    1a30:	df 90       	pop	r13
    1a32:	cf 90       	pop	r12
    1a34:	bf 90       	pop	r11
    1a36:	af 90       	pop	r10
    1a38:	08 95       	ret

00001a3a <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1a3a:	4f 92       	push	r4
    1a3c:	5f 92       	push	r5
    1a3e:	6f 92       	push	r6
    1a40:	7f 92       	push	r7
    1a42:	8f 92       	push	r8
    1a44:	9f 92       	push	r9
    1a46:	af 92       	push	r10
    1a48:	bf 92       	push	r11
    1a4a:	cf 92       	push	r12
    1a4c:	df 92       	push	r13
    1a4e:	ef 92       	push	r14
    1a50:	ff 92       	push	r15
    1a52:	0f 93       	push	r16
    1a54:	1f 93       	push	r17
    1a56:	cf 93       	push	r28
    1a58:	df 93       	push	r29
    1a5a:	ec 01       	movw	r28, r24
    1a5c:	2b 01       	movw	r4, r22
    1a5e:	3a 01       	movw	r6, r20
    1a60:	58 01       	movw	r10, r16
    1a62:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1a64:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a66:	80 ff       	sbrs	r24, 0
    1a68:	05 c0       	rjmp	.+10     	; 0x1a74 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1a6a:	68 94       	set
    1a6c:	88 24       	eor	r8, r8
    1a6e:	81 f8       	bld	r8, 1
    1a70:	91 2c       	mov	r9, r1
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1a74:	81 2c       	mov	r8, r1
    1a76:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1a78:	a1 14       	cp	r10, r1
    1a7a:	b1 04       	cpc	r11, r1
    1a7c:	c1 04       	cpc	r12, r1
    1a7e:	d1 04       	cpc	r13, r1
    1a80:	41 f1       	breq	.+80     	; 0x1ad2 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1a88:	ce 01       	movw	r24, r28
    1a8a:	29 dd       	rcall	.-1454   	; 0x14de <prvBytesInBuffer>
    1a8c:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1a8e:	88 16       	cp	r8, r24
    1a90:	99 06       	cpc	r9, r25
    1a92:	48 f0       	brcs	.+18     	; 0x1aa6 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1a94:	60 e0       	ldi	r22, 0x00	; 0
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	0e 94 11 19 	call	0x3222	; 0x3222 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1a9e:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <xTaskGetCurrentTaskHandle>
    1aa2:	99 87       	std	Y+9, r25	; 0x09
    1aa4:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1aa6:	0f 90       	pop	r0
    1aa8:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1aaa:	8e 14       	cp	r8, r14
    1aac:	9f 04       	cpc	r9, r15
    1aae:	a0 f0       	brcs	.+40     	; 0x1ad8 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1ab0:	e1 2c       	mov	r14, r1
    1ab2:	f1 2c       	mov	r15, r1
    1ab4:	00 e0       	ldi	r16, 0x00	; 0
    1ab6:	10 e0       	ldi	r17, 0x00	; 0
    1ab8:	98 01       	movw	r18, r16
    1aba:	40 e0       	ldi	r20, 0x00	; 0
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	ba 01       	movw	r22, r20
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1ac6:	19 86       	std	Y+9, r1	; 0x09
    1ac8:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1aca:	ce 01       	movw	r24, r28
    1acc:	08 dd       	rcall	.-1520   	; 0x14de <prvBytesInBuffer>
    1ace:	7c 01       	movw	r14, r24
    1ad0:	03 c0       	rjmp	.+6      	; 0x1ad8 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1ad2:	ce 01       	movw	r24, r28
    1ad4:	04 dd       	rcall	.-1528   	; 0x14de <prvBytesInBuffer>
    1ad6:	7c 01       	movw	r14, r24
    1ad8:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1ada:	9f 04       	cpc	r9, r15
    1adc:	e8 f4       	brcc	.+58     	; 0x1b18 <xStreamBufferReceive+0xde>
    1ade:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1ae0:	97 01       	movw	r18, r14
    1ae2:	a3 01       	movw	r20, r6
    1ae4:	b2 01       	movw	r22, r4
    1ae6:	ce 01       	movw	r24, r28
    1ae8:	f8 dd       	rcall	.-1040   	; 0x16da <prvReadMessageFromBuffer>
    1aea:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1aec:	89 2b       	or	r24, r25
    1aee:	b1 f0       	breq	.+44     	; 0x1b1c <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1af0:	c2 d2       	rcall	.+1412   	; 0x2076 <vTaskSuspendAll>
    1af2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1af4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1af6:	89 2b       	or	r24, r25
    1af8:	69 f0       	breq	.+26     	; 0x1b14 <xStreamBufferReceive+0xda>
    1afa:	8a 85       	ldd	r24, Y+10	; 0x0a
    1afc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1afe:	e1 2c       	mov	r14, r1
    1b00:	f1 2c       	mov	r15, r1
    1b02:	00 e0       	ldi	r16, 0x00	; 0
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	a9 01       	movw	r20, r18
    1b0a:	60 e0       	ldi	r22, 0x00	; 0
    1b0c:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <xTaskGenericNotify>
    1b10:	1b 86       	std	Y+11, r1	; 0x0b
    1b12:	1a 86       	std	Y+10, r1	; 0x0a
    1b14:	f0 d3       	rcall	.+2016   	; 0x22f6 <xTaskResumeAll>
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <xStreamBufferReceive+0xe2>
    1b18:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1b1a:	d1 2c       	mov	r13, r1
    1b1c:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1b1e:	df 91       	pop	r29
    1b20:	cf 91       	pop	r28
    1b22:	1f 91       	pop	r17
    1b24:	0f 91       	pop	r16
    1b26:	ff 90       	pop	r15
    1b28:	ef 90       	pop	r14
    1b2a:	df 90       	pop	r13
    1b2c:	cf 90       	pop	r12
    1b2e:	bf 90       	pop	r11
    1b30:	af 90       	pop	r10
    1b32:	9f 90       	pop	r9
    1b34:	8f 90       	pop	r8
    1b36:	7f 90       	pop	r7
    1b38:	6f 90       	pop	r6
    1b3a:	5f 90       	pop	r5
    1b3c:	4f 90       	pop	r4
    1b3e:	08 95       	ret

00001b40 <prvResetNextTaskUnblockTime>:
    1b40:	e0 91 3d 15 	lds	r30, 0x153D	; 0x80153d <pxDelayedTaskList>
    1b44:	f0 91 3e 15 	lds	r31, 0x153E	; 0x80153e <pxDelayedTaskList+0x1>
    1b48:	80 81       	ld	r24, Z
    1b4a:	81 11       	cpse	r24, r1
    1b4c:	0c c0       	rjmp	.+24     	; 0x1b66 <prvResetNextTaskUnblockTime+0x26>
    1b4e:	8f ef       	ldi	r24, 0xFF	; 255
    1b50:	9f ef       	ldi	r25, 0xFF	; 255
    1b52:	dc 01       	movw	r26, r24
    1b54:	80 93 07 15 	sts	0x1507, r24	; 0x801507 <xNextTaskUnblockTime>
    1b58:	90 93 08 15 	sts	0x1508, r25	; 0x801508 <xNextTaskUnblockTime+0x1>
    1b5c:	a0 93 09 15 	sts	0x1509, r26	; 0x801509 <xNextTaskUnblockTime+0x2>
    1b60:	b0 93 0a 15 	sts	0x150A, r27	; 0x80150a <xNextTaskUnblockTime+0x3>
    1b64:	08 95       	ret
    1b66:	e0 91 3d 15 	lds	r30, 0x153D	; 0x80153d <pxDelayedTaskList>
    1b6a:	f0 91 3e 15 	lds	r31, 0x153E	; 0x80153e <pxDelayedTaskList+0x1>
    1b6e:	07 80       	ldd	r0, Z+7	; 0x07
    1b70:	f0 85       	ldd	r31, Z+8	; 0x08
    1b72:	e0 2d       	mov	r30, r0
    1b74:	80 81       	ld	r24, Z
    1b76:	91 81       	ldd	r25, Z+1	; 0x01
    1b78:	a2 81       	ldd	r26, Z+2	; 0x02
    1b7a:	b3 81       	ldd	r27, Z+3	; 0x03
    1b7c:	80 93 07 15 	sts	0x1507, r24	; 0x801507 <xNextTaskUnblockTime>
    1b80:	90 93 08 15 	sts	0x1508, r25	; 0x801508 <xNextTaskUnblockTime+0x1>
    1b84:	a0 93 09 15 	sts	0x1509, r26	; 0x801509 <xNextTaskUnblockTime+0x2>
    1b88:	b0 93 0a 15 	sts	0x150A, r27	; 0x80150a <xNextTaskUnblockTime+0x3>
    1b8c:	08 95       	ret

00001b8e <prvDeleteTCB>:
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	ec 01       	movw	r28, r24
    1b94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b98:	0e 94 c6 05 	call	0xb8c	; 0xb8c <vPortFree>
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <vPortFree>
    1ba2:	df 91       	pop	r29
    1ba4:	cf 91       	pop	r28
    1ba6:	08 95       	ret

00001ba8 <prvInitialiseNewTask>:
    1ba8:	4f 92       	push	r4
    1baa:	5f 92       	push	r5
    1bac:	6f 92       	push	r6
    1bae:	7f 92       	push	r7
    1bb0:	8f 92       	push	r8
    1bb2:	9f 92       	push	r9
    1bb4:	af 92       	push	r10
    1bb6:	bf 92       	push	r11
    1bb8:	cf 92       	push	r12
    1bba:	df 92       	push	r13
    1bbc:	ef 92       	push	r14
    1bbe:	ff 92       	push	r15
    1bc0:	0f 93       	push	r16
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	2c 01       	movw	r4, r24
    1bc8:	5b 01       	movw	r10, r22
    1bca:	4a 01       	movw	r8, r20
    1bcc:	39 01       	movw	r6, r18
    1bce:	e6 01       	movw	r28, r12
    1bd0:	65 ea       	ldi	r22, 0xA5	; 165
    1bd2:	70 e0       	ldi	r23, 0x00	; 0
    1bd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd8:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <memset>
    1bdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bde:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1be0:	21 e0       	ldi	r18, 0x01	; 1
    1be2:	82 1a       	sub	r8, r18
    1be4:	91 08       	sbc	r9, r1
    1be6:	88 0e       	add	r8, r24
    1be8:	99 1e       	adc	r9, r25
    1bea:	a1 14       	cp	r10, r1
    1bec:	b1 04       	cpc	r11, r1
    1bee:	89 f4       	brne	.+34     	; 0x1c12 <prvInitialiseNewTask+0x6a>
    1bf0:	15 c0       	rjmp	.+42     	; 0x1c1c <prvInitialiseNewTask+0x74>
    1bf2:	82 2f       	mov	r24, r18
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	f5 01       	movw	r30, r10
    1bf8:	e8 0f       	add	r30, r24
    1bfa:	f9 1f       	adc	r31, r25
    1bfc:	30 81       	ld	r19, Z
    1bfe:	de 01       	movw	r26, r28
    1c00:	a8 0f       	add	r26, r24
    1c02:	b9 1f       	adc	r27, r25
    1c04:	5d 96       	adiw	r26, 0x1d	; 29
    1c06:	3c 93       	st	X, r19
    1c08:	80 81       	ld	r24, Z
    1c0a:	88 23       	and	r24, r24
    1c0c:	29 f0       	breq	.+10     	; 0x1c18 <prvInitialiseNewTask+0x70>
    1c0e:	2f 5f       	subi	r18, 0xFF	; 255
    1c10:	01 c0       	rjmp	.+2      	; 0x1c14 <prvInitialiseNewTask+0x6c>
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	20 31       	cpi	r18, 0x10	; 16
    1c16:	68 f3       	brcs	.-38     	; 0x1bf2 <prvInitialiseNewTask+0x4a>
    1c18:	1c a6       	std	Y+44, r1	; 0x2c
    1c1a:	01 c0       	rjmp	.+2      	; 0x1c1e <prvInitialiseNewTask+0x76>
    1c1c:	1d 8e       	std	Y+29, r1	; 0x1d
    1c1e:	0a 30       	cpi	r16, 0x0A	; 10
    1c20:	08 f0       	brcs	.+2      	; 0x1c24 <prvInitialiseNewTask+0x7c>
    1c22:	09 e0       	ldi	r16, 0x09	; 9
    1c24:	0a 8f       	std	Y+26, r16	; 0x1a
    1c26:	0d a7       	std	Y+45, r16	; 0x2d
    1c28:	1e a6       	std	Y+46, r1	; 0x2e
    1c2a:	ce 01       	movw	r24, r28
    1c2c:	02 96       	adiw	r24, 0x02	; 2
    1c2e:	0e 94 14 06 	call	0xc28	; 0xc28 <vListInitialiseItem>
    1c32:	ce 01       	movw	r24, r28
    1c34:	0e 96       	adiw	r24, 0x0e	; 14
    1c36:	0e 94 14 06 	call	0xc28	; 0xc28 <vListInitialiseItem>
    1c3a:	db 87       	std	Y+11, r29	; 0x0b
    1c3c:	ca 87       	std	Y+10, r28	; 0x0a
    1c3e:	8a e0       	ldi	r24, 0x0A	; 10
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	a0 e0       	ldi	r26, 0x00	; 0
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	80 1b       	sub	r24, r16
    1c48:	91 09       	sbc	r25, r1
    1c4a:	a1 09       	sbc	r26, r1
    1c4c:	b1 09       	sbc	r27, r1
    1c4e:	8e 87       	std	Y+14, r24	; 0x0e
    1c50:	9f 87       	std	Y+15, r25	; 0x0f
    1c52:	a8 8b       	std	Y+16, r26	; 0x10
    1c54:	b9 8b       	std	Y+17, r27	; 0x11
    1c56:	df 8b       	std	Y+23, r29	; 0x17
    1c58:	ce 8b       	std	Y+22, r28	; 0x16
    1c5a:	84 e0       	ldi	r24, 0x04	; 4
    1c5c:	fe 01       	movw	r30, r28
    1c5e:	bf 96       	adiw	r30, 0x2f	; 47
    1c60:	df 01       	movw	r26, r30
    1c62:	1d 92       	st	X+, r1
    1c64:	8a 95       	dec	r24
    1c66:	e9 f7       	brne	.-6      	; 0x1c62 <prvInitialiseNewTask+0xba>
    1c68:	1b aa       	std	Y+51, r1	; 0x33
    1c6a:	a3 01       	movw	r20, r6
    1c6c:	b2 01       	movw	r22, r4
    1c6e:	c4 01       	movw	r24, r8
    1c70:	4f d8       	rcall	.-3938   	; 0xd10 <pxPortInitialiseStack>
    1c72:	99 83       	std	Y+1, r25	; 0x01
    1c74:	88 83       	st	Y, r24
    1c76:	e1 14       	cp	r14, r1
    1c78:	f1 04       	cpc	r15, r1
    1c7a:	19 f0       	breq	.+6      	; 0x1c82 <prvInitialiseNewTask+0xda>
    1c7c:	f7 01       	movw	r30, r14
    1c7e:	d1 83       	std	Z+1, r29	; 0x01
    1c80:	c0 83       	st	Z, r28
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	0f 91       	pop	r16
    1c88:	ff 90       	pop	r15
    1c8a:	ef 90       	pop	r14
    1c8c:	df 90       	pop	r13
    1c8e:	cf 90       	pop	r12
    1c90:	bf 90       	pop	r11
    1c92:	af 90       	pop	r10
    1c94:	9f 90       	pop	r9
    1c96:	8f 90       	pop	r8
    1c98:	7f 90       	pop	r7
    1c9a:	6f 90       	pop	r6
    1c9c:	5f 90       	pop	r5
    1c9e:	4f 90       	pop	r4
    1ca0:	08 95       	ret

00001ca2 <prvInitialiseTaskLists>:
    1ca2:	cf 93       	push	r28
    1ca4:	c0 e0       	ldi	r28, 0x00	; 0
    1ca6:	09 c0       	rjmp	.+18     	; 0x1cba <prvInitialiseTaskLists+0x18>
    1ca8:	2b e0       	ldi	r18, 0x0B	; 11
    1caa:	c2 9f       	mul	r28, r18
    1cac:	c0 01       	movw	r24, r0
    1cae:	11 24       	eor	r1, r1
    1cb0:	8b 5a       	subi	r24, 0xAB	; 171
    1cb2:	9a 4e       	sbci	r25, 0xEA	; 234
    1cb4:	0e 94 03 06 	call	0xc06	; 0xc06 <vListInitialise>
    1cb8:	cf 5f       	subi	r28, 0xFF	; 255
    1cba:	ca 30       	cpi	r28, 0x0A	; 10
    1cbc:	a8 f3       	brcs	.-22     	; 0x1ca8 <prvInitialiseTaskLists+0x6>
    1cbe:	8a e4       	ldi	r24, 0x4A	; 74
    1cc0:	95 e1       	ldi	r25, 0x15	; 21
    1cc2:	0e 94 03 06 	call	0xc06	; 0xc06 <vListInitialise>
    1cc6:	8f e3       	ldi	r24, 0x3F	; 63
    1cc8:	95 e1       	ldi	r25, 0x15	; 21
    1cca:	0e 94 03 06 	call	0xc06	; 0xc06 <vListInitialise>
    1cce:	80 e3       	ldi	r24, 0x30	; 48
    1cd0:	95 e1       	ldi	r25, 0x15	; 21
    1cd2:	0e 94 03 06 	call	0xc06	; 0xc06 <vListInitialise>
    1cd6:	85 e2       	ldi	r24, 0x25	; 37
    1cd8:	95 e1       	ldi	r25, 0x15	; 21
    1cda:	0e 94 03 06 	call	0xc06	; 0xc06 <vListInitialise>
    1cde:	89 e1       	ldi	r24, 0x19	; 25
    1ce0:	95 e1       	ldi	r25, 0x15	; 21
    1ce2:	0e 94 03 06 	call	0xc06	; 0xc06 <vListInitialise>
    1ce6:	8a e4       	ldi	r24, 0x4A	; 74
    1ce8:	95 e1       	ldi	r25, 0x15	; 21
    1cea:	90 93 3e 15 	sts	0x153E, r25	; 0x80153e <pxDelayedTaskList+0x1>
    1cee:	80 93 3d 15 	sts	0x153D, r24	; 0x80153d <pxDelayedTaskList>
    1cf2:	8f e3       	ldi	r24, 0x3F	; 63
    1cf4:	95 e1       	ldi	r25, 0x15	; 21
    1cf6:	90 93 3c 15 	sts	0x153C, r25	; 0x80153c <pxOverflowDelayedTaskList+0x1>
    1cfa:	80 93 3b 15 	sts	0x153B, r24	; 0x80153b <pxOverflowDelayedTaskList>
    1cfe:	cf 91       	pop	r28
    1d00:	08 95       	ret

00001d02 <prvAddNewTaskToReadyList>:
    1d02:	cf 93       	push	r28
    1d04:	df 93       	push	r29
    1d06:	ec 01       	movw	r28, r24
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	f8 94       	cli
    1d0c:	0f 92       	push	r0
    1d0e:	80 91 18 15 	lds	r24, 0x1518	; 0x801518 <uxCurrentNumberOfTasks>
    1d12:	8f 5f       	subi	r24, 0xFF	; 255
    1d14:	80 93 18 15 	sts	0x1518, r24	; 0x801518 <uxCurrentNumberOfTasks>
    1d18:	80 91 c3 15 	lds	r24, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    1d1c:	90 91 c4 15 	lds	r25, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    1d20:	89 2b       	or	r24, r25
    1d22:	51 f4       	brne	.+20     	; 0x1d38 <prvAddNewTaskToReadyList+0x36>
    1d24:	d0 93 c4 15 	sts	0x15C4, r29	; 0x8015c4 <pxCurrentTCB+0x1>
    1d28:	c0 93 c3 15 	sts	0x15C3, r28	; 0x8015c3 <pxCurrentTCB>
    1d2c:	80 91 18 15 	lds	r24, 0x1518	; 0x801518 <uxCurrentNumberOfTasks>
    1d30:	81 30       	cpi	r24, 0x01	; 1
    1d32:	91 f4       	brne	.+36     	; 0x1d58 <prvAddNewTaskToReadyList+0x56>
    1d34:	b6 df       	rcall	.-148    	; 0x1ca2 <prvInitialiseTaskLists>
    1d36:	10 c0       	rjmp	.+32     	; 0x1d58 <prvAddNewTaskToReadyList+0x56>
    1d38:	80 91 12 15 	lds	r24, 0x1512	; 0x801512 <xSchedulerRunning>
    1d3c:	81 11       	cpse	r24, r1
    1d3e:	0c c0       	rjmp	.+24     	; 0x1d58 <prvAddNewTaskToReadyList+0x56>
    1d40:	e0 91 c3 15 	lds	r30, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    1d44:	f0 91 c4 15 	lds	r31, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    1d48:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d4a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d4c:	89 17       	cp	r24, r25
    1d4e:	20 f0       	brcs	.+8      	; 0x1d58 <prvAddNewTaskToReadyList+0x56>
    1d50:	d0 93 c4 15 	sts	0x15C4, r29	; 0x8015c4 <pxCurrentTCB+0x1>
    1d54:	c0 93 c3 15 	sts	0x15C3, r28	; 0x8015c3 <pxCurrentTCB>
    1d58:	80 91 0b 15 	lds	r24, 0x150B	; 0x80150b <uxTaskNumber>
    1d5c:	8f 5f       	subi	r24, 0xFF	; 255
    1d5e:	80 93 0b 15 	sts	0x150B, r24	; 0x80150b <uxTaskNumber>
    1d62:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1d64:	80 91 13 15 	lds	r24, 0x1513	; 0x801513 <uxTopReadyPriority>
    1d68:	8e 17       	cp	r24, r30
    1d6a:	10 f4       	brcc	.+4      	; 0x1d70 <prvAddNewTaskToReadyList+0x6e>
    1d6c:	e0 93 13 15 	sts	0x1513, r30	; 0x801513 <uxTopReadyPriority>
    1d70:	8b e0       	ldi	r24, 0x0B	; 11
    1d72:	8e 9f       	mul	r24, r30
    1d74:	f0 01       	movw	r30, r0
    1d76:	11 24       	eor	r1, r1
    1d78:	eb 5a       	subi	r30, 0xAB	; 171
    1d7a:	fa 4e       	sbci	r31, 0xEA	; 234
    1d7c:	01 80       	ldd	r0, Z+1	; 0x01
    1d7e:	f2 81       	ldd	r31, Z+2	; 0x02
    1d80:	e0 2d       	mov	r30, r0
    1d82:	ff 83       	std	Y+7, r31	; 0x07
    1d84:	ee 83       	std	Y+6, r30	; 0x06
    1d86:	26 81       	ldd	r18, Z+6	; 0x06
    1d88:	37 81       	ldd	r19, Z+7	; 0x07
    1d8a:	39 87       	std	Y+9, r19	; 0x09
    1d8c:	28 87       	std	Y+8, r18	; 0x08
    1d8e:	a6 81       	ldd	r26, Z+6	; 0x06
    1d90:	b7 81       	ldd	r27, Z+7	; 0x07
    1d92:	9e 01       	movw	r18, r28
    1d94:	2e 5f       	subi	r18, 0xFE	; 254
    1d96:	3f 4f       	sbci	r19, 0xFF	; 255
    1d98:	15 96       	adiw	r26, 0x05	; 5
    1d9a:	3c 93       	st	X, r19
    1d9c:	2e 93       	st	-X, r18
    1d9e:	14 97       	sbiw	r26, 0x04	; 4
    1da0:	37 83       	std	Z+7, r19	; 0x07
    1da2:	26 83       	std	Z+6, r18	; 0x06
    1da4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1da6:	8e 9f       	mul	r24, r30
    1da8:	f0 01       	movw	r30, r0
    1daa:	11 24       	eor	r1, r1
    1dac:	eb 5a       	subi	r30, 0xAB	; 171
    1dae:	fa 4e       	sbci	r31, 0xEA	; 234
    1db0:	fd 87       	std	Y+13, r31	; 0x0d
    1db2:	ec 87       	std	Y+12, r30	; 0x0c
    1db4:	80 81       	ld	r24, Z
    1db6:	8f 5f       	subi	r24, 0xFF	; 255
    1db8:	80 83       	st	Z, r24
    1dba:	0f 90       	pop	r0
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	80 91 12 15 	lds	r24, 0x1512	; 0x801512 <xSchedulerRunning>
    1dc2:	88 23       	and	r24, r24
    1dc4:	51 f0       	breq	.+20     	; 0x1dda <prvAddNewTaskToReadyList+0xd8>
    1dc6:	e0 91 c3 15 	lds	r30, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    1dca:	f0 91 c4 15 	lds	r31, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    1dce:	92 8d       	ldd	r25, Z+26	; 0x1a
    1dd0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1dd2:	98 17       	cp	r25, r24
    1dd4:	10 f4       	brcc	.+4      	; 0x1dda <prvAddNewTaskToReadyList+0xd8>
    1dd6:	0e 94 d1 06 	call	0xda2	; 0xda2 <vPortYield>
    1dda:	df 91       	pop	r29
    1ddc:	cf 91       	pop	r28
    1dde:	08 95       	ret

00001de0 <prvCheckTasksWaitingTermination>:
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	1b c0       	rjmp	.+54     	; 0x1e1c <prvCheckTasksWaitingTermination+0x3c>
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	0f 92       	push	r0
    1dec:	e0 91 2c 15 	lds	r30, 0x152C	; 0x80152c <xTasksWaitingTermination+0x7>
    1df0:	f0 91 2d 15 	lds	r31, 0x152D	; 0x80152d <xTasksWaitingTermination+0x8>
    1df4:	c0 85       	ldd	r28, Z+8	; 0x08
    1df6:	d1 85       	ldd	r29, Z+9	; 0x09
    1df8:	ce 01       	movw	r24, r28
    1dfa:	02 96       	adiw	r24, 0x02	; 2
    1dfc:	0e 94 55 06 	call	0xcaa	; 0xcaa <uxListRemove>
    1e00:	80 91 18 15 	lds	r24, 0x1518	; 0x801518 <uxCurrentNumberOfTasks>
    1e04:	81 50       	subi	r24, 0x01	; 1
    1e06:	80 93 18 15 	sts	0x1518, r24	; 0x801518 <uxCurrentNumberOfTasks>
    1e0a:	80 91 24 15 	lds	r24, 0x1524	; 0x801524 <uxDeletedTasksWaitingCleanUp>
    1e0e:	81 50       	subi	r24, 0x01	; 1
    1e10:	80 93 24 15 	sts	0x1524, r24	; 0x801524 <uxDeletedTasksWaitingCleanUp>
    1e14:	0f 90       	pop	r0
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	ce 01       	movw	r24, r28
    1e1a:	b9 de       	rcall	.-654    	; 0x1b8e <prvDeleteTCB>
    1e1c:	80 91 24 15 	lds	r24, 0x1524	; 0x801524 <uxDeletedTasksWaitingCleanUp>
    1e20:	81 11       	cpse	r24, r1
    1e22:	e1 cf       	rjmp	.-62     	; 0x1de6 <prvCheckTasksWaitingTermination+0x6>
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	08 95       	ret

00001e2a <prvAddCurrentTaskToDelayedList>:
    1e2a:	8f 92       	push	r8
    1e2c:	9f 92       	push	r9
    1e2e:	af 92       	push	r10
    1e30:	bf 92       	push	r11
    1e32:	cf 92       	push	r12
    1e34:	df 92       	push	r13
    1e36:	ef 92       	push	r14
    1e38:	ff 92       	push	r15
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	6b 01       	movw	r12, r22
    1e40:	7c 01       	movw	r14, r24
    1e42:	c4 2f       	mov	r28, r20
    1e44:	80 90 14 15 	lds	r8, 0x1514	; 0x801514 <xTickCount>
    1e48:	90 90 15 15 	lds	r9, 0x1515	; 0x801515 <xTickCount+0x1>
    1e4c:	a0 90 16 15 	lds	r10, 0x1516	; 0x801516 <xTickCount+0x2>
    1e50:	b0 90 17 15 	lds	r11, 0x1517	; 0x801517 <xTickCount+0x3>
    1e54:	80 91 c3 15 	lds	r24, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    1e58:	90 91 c4 15 	lds	r25, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    1e5c:	02 96       	adiw	r24, 0x02	; 2
    1e5e:	0e 94 55 06 	call	0xcaa	; 0xcaa <uxListRemove>
    1e62:	8f ef       	ldi	r24, 0xFF	; 255
    1e64:	c8 16       	cp	r12, r24
    1e66:	d8 06       	cpc	r13, r24
    1e68:	e8 06       	cpc	r14, r24
    1e6a:	f8 06       	cpc	r15, r24
    1e6c:	b1 f5       	brne	.+108    	; 0x1eda <prvAddCurrentTaskToDelayedList+0xb0>
    1e6e:	cc 23       	and	r28, r28
    1e70:	a1 f1       	breq	.+104    	; 0x1eda <prvAddCurrentTaskToDelayedList+0xb0>
    1e72:	e9 e1       	ldi	r30, 0x19	; 25
    1e74:	f5 e1       	ldi	r31, 0x15	; 21
    1e76:	a1 81       	ldd	r26, Z+1	; 0x01
    1e78:	b2 81       	ldd	r27, Z+2	; 0x02
    1e7a:	c0 91 c3 15 	lds	r28, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    1e7e:	d0 91 c4 15 	lds	r29, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    1e82:	bf 83       	std	Y+7, r27	; 0x07
    1e84:	ae 83       	std	Y+6, r26	; 0x06
    1e86:	c0 91 c3 15 	lds	r28, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    1e8a:	d0 91 c4 15 	lds	r29, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    1e8e:	16 96       	adiw	r26, 0x06	; 6
    1e90:	8d 91       	ld	r24, X+
    1e92:	9c 91       	ld	r25, X
    1e94:	17 97       	sbiw	r26, 0x07	; 7
    1e96:	99 87       	std	Y+9, r25	; 0x09
    1e98:	88 87       	std	Y+8, r24	; 0x08
    1e9a:	16 96       	adiw	r26, 0x06	; 6
    1e9c:	cd 91       	ld	r28, X+
    1e9e:	dc 91       	ld	r29, X
    1ea0:	17 97       	sbiw	r26, 0x07	; 7
    1ea2:	80 91 c3 15 	lds	r24, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    1ea6:	90 91 c4 15 	lds	r25, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    1eaa:	02 96       	adiw	r24, 0x02	; 2
    1eac:	9d 83       	std	Y+5, r25	; 0x05
    1eae:	8c 83       	std	Y+4, r24	; 0x04
    1eb0:	80 91 c3 15 	lds	r24, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    1eb4:	90 91 c4 15 	lds	r25, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    1eb8:	02 96       	adiw	r24, 0x02	; 2
    1eba:	17 96       	adiw	r26, 0x07	; 7
    1ebc:	9c 93       	st	X, r25
    1ebe:	8e 93       	st	-X, r24
    1ec0:	16 97       	sbiw	r26, 0x06	; 6
    1ec2:	a0 91 c3 15 	lds	r26, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    1ec6:	b0 91 c4 15 	lds	r27, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    1eca:	1d 96       	adiw	r26, 0x0d	; 13
    1ecc:	fc 93       	st	X, r31
    1ece:	ee 93       	st	-X, r30
    1ed0:	1c 97       	sbiw	r26, 0x0c	; 12
    1ed2:	80 81       	ld	r24, Z
    1ed4:	8f 5f       	subi	r24, 0xFF	; 255
    1ed6:	80 83       	st	Z, r24
    1ed8:	3f c0       	rjmp	.+126    	; 0x1f58 <prvAddCurrentTaskToDelayedList+0x12e>
    1eda:	c8 0c       	add	r12, r8
    1edc:	d9 1c       	adc	r13, r9
    1ede:	ea 1c       	adc	r14, r10
    1ee0:	fb 1c       	adc	r15, r11
    1ee2:	e0 91 c3 15 	lds	r30, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    1ee6:	f0 91 c4 15 	lds	r31, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    1eea:	c2 82       	std	Z+2, r12	; 0x02
    1eec:	d3 82       	std	Z+3, r13	; 0x03
    1eee:	e4 82       	std	Z+4, r14	; 0x04
    1ef0:	f5 82       	std	Z+5, r15	; 0x05
    1ef2:	c8 14       	cp	r12, r8
    1ef4:	d9 04       	cpc	r13, r9
    1ef6:	ea 04       	cpc	r14, r10
    1ef8:	fb 04       	cpc	r15, r11
    1efa:	68 f4       	brcc	.+26     	; 0x1f16 <prvAddCurrentTaskToDelayedList+0xec>
    1efc:	60 91 c3 15 	lds	r22, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    1f00:	70 91 c4 15 	lds	r23, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    1f04:	80 91 3b 15 	lds	r24, 0x153B	; 0x80153b <pxOverflowDelayedTaskList>
    1f08:	90 91 3c 15 	lds	r25, 0x153C	; 0x80153c <pxOverflowDelayedTaskList+0x1>
    1f0c:	6e 5f       	subi	r22, 0xFE	; 254
    1f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f10:	0e 94 18 06 	call	0xc30	; 0xc30 <vListInsert>
    1f14:	21 c0       	rjmp	.+66     	; 0x1f58 <prvAddCurrentTaskToDelayedList+0x12e>
    1f16:	60 91 c3 15 	lds	r22, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    1f1a:	70 91 c4 15 	lds	r23, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    1f1e:	80 91 3d 15 	lds	r24, 0x153D	; 0x80153d <pxDelayedTaskList>
    1f22:	90 91 3e 15 	lds	r25, 0x153E	; 0x80153e <pxDelayedTaskList+0x1>
    1f26:	6e 5f       	subi	r22, 0xFE	; 254
    1f28:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2a:	0e 94 18 06 	call	0xc30	; 0xc30 <vListInsert>
    1f2e:	80 91 07 15 	lds	r24, 0x1507	; 0x801507 <xNextTaskUnblockTime>
    1f32:	90 91 08 15 	lds	r25, 0x1508	; 0x801508 <xNextTaskUnblockTime+0x1>
    1f36:	a0 91 09 15 	lds	r26, 0x1509	; 0x801509 <xNextTaskUnblockTime+0x2>
    1f3a:	b0 91 0a 15 	lds	r27, 0x150A	; 0x80150a <xNextTaskUnblockTime+0x3>
    1f3e:	c8 16       	cp	r12, r24
    1f40:	d9 06       	cpc	r13, r25
    1f42:	ea 06       	cpc	r14, r26
    1f44:	fb 06       	cpc	r15, r27
    1f46:	40 f4       	brcc	.+16     	; 0x1f58 <prvAddCurrentTaskToDelayedList+0x12e>
    1f48:	c0 92 07 15 	sts	0x1507, r12	; 0x801507 <xNextTaskUnblockTime>
    1f4c:	d0 92 08 15 	sts	0x1508, r13	; 0x801508 <xNextTaskUnblockTime+0x1>
    1f50:	e0 92 09 15 	sts	0x1509, r14	; 0x801509 <xNextTaskUnblockTime+0x2>
    1f54:	f0 92 0a 15 	sts	0x150A, r15	; 0x80150a <xNextTaskUnblockTime+0x3>
    1f58:	df 91       	pop	r29
    1f5a:	cf 91       	pop	r28
    1f5c:	ff 90       	pop	r15
    1f5e:	ef 90       	pop	r14
    1f60:	df 90       	pop	r13
    1f62:	cf 90       	pop	r12
    1f64:	bf 90       	pop	r11
    1f66:	af 90       	pop	r10
    1f68:	9f 90       	pop	r9
    1f6a:	8f 90       	pop	r8
    1f6c:	08 95       	ret

00001f6e <xTaskCreate>:
    1f6e:	2f 92       	push	r2
    1f70:	3f 92       	push	r3
    1f72:	4f 92       	push	r4
    1f74:	5f 92       	push	r5
    1f76:	6f 92       	push	r6
    1f78:	7f 92       	push	r7
    1f7a:	8f 92       	push	r8
    1f7c:	9f 92       	push	r9
    1f7e:	af 92       	push	r10
    1f80:	bf 92       	push	r11
    1f82:	cf 92       	push	r12
    1f84:	df 92       	push	r13
    1f86:	ef 92       	push	r14
    1f88:	ff 92       	push	r15
    1f8a:	0f 93       	push	r16
    1f8c:	cf 93       	push	r28
    1f8e:	df 93       	push	r29
    1f90:	3c 01       	movw	r6, r24
    1f92:	1b 01       	movw	r2, r22
    1f94:	4a 01       	movw	r8, r20
    1f96:	29 01       	movw	r4, r18
    1f98:	ca 01       	movw	r24, r20
    1f9a:	0e 94 1d 05 	call	0xa3a	; 0xa3a <pvPortMalloc>
    1f9e:	6c 01       	movw	r12, r24
    1fa0:	89 2b       	or	r24, r25
    1fa2:	71 f0       	breq	.+28     	; 0x1fc0 <xTaskCreate+0x52>
    1fa4:	84 e3       	ldi	r24, 0x34	; 52
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	0e 94 1d 05 	call	0xa3a	; 0xa3a <pvPortMalloc>
    1fac:	ec 01       	movw	r28, r24
    1fae:	89 2b       	or	r24, r25
    1fb0:	19 f0       	breq	.+6      	; 0x1fb8 <xTaskCreate+0x4a>
    1fb2:	dc 8e       	std	Y+28, r13	; 0x1c
    1fb4:	cb 8e       	std	Y+27, r12	; 0x1b
    1fb6:	06 c0       	rjmp	.+12     	; 0x1fc4 <xTaskCreate+0x56>
    1fb8:	c6 01       	movw	r24, r12
    1fba:	0e 94 c6 05 	call	0xb8c	; 0xb8c <vPortFree>
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <xTaskCreate+0x56>
    1fc0:	c0 e0       	ldi	r28, 0x00	; 0
    1fc2:	d0 e0       	ldi	r29, 0x00	; 0
    1fc4:	20 97       	sbiw	r28, 0x00	; 0
    1fc6:	61 f0       	breq	.+24     	; 0x1fe0 <xTaskCreate+0x72>
    1fc8:	a1 2c       	mov	r10, r1
    1fca:	b1 2c       	mov	r11, r1
    1fcc:	6e 01       	movw	r12, r28
    1fce:	92 01       	movw	r18, r4
    1fd0:	a4 01       	movw	r20, r8
    1fd2:	b1 01       	movw	r22, r2
    1fd4:	c3 01       	movw	r24, r6
    1fd6:	e8 dd       	rcall	.-1072   	; 0x1ba8 <prvInitialiseNewTask>
    1fd8:	ce 01       	movw	r24, r28
    1fda:	93 de       	rcall	.-730    	; 0x1d02 <prvAddNewTaskToReadyList>
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	01 c0       	rjmp	.+2      	; 0x1fe2 <xTaskCreate+0x74>
    1fe0:	8f ef       	ldi	r24, 0xFF	; 255
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	0f 91       	pop	r16
    1fe8:	ff 90       	pop	r15
    1fea:	ef 90       	pop	r14
    1fec:	df 90       	pop	r13
    1fee:	cf 90       	pop	r12
    1ff0:	bf 90       	pop	r11
    1ff2:	af 90       	pop	r10
    1ff4:	9f 90       	pop	r9
    1ff6:	8f 90       	pop	r8
    1ff8:	7f 90       	pop	r7
    1ffa:	6f 90       	pop	r6
    1ffc:	5f 90       	pop	r5
    1ffe:	4f 90       	pop	r4
    2000:	3f 90       	pop	r3
    2002:	2f 90       	pop	r2
    2004:	08 95       	ret

00002006 <vTaskStartScheduler>:
    2006:	ef 92       	push	r14
    2008:	ff 92       	push	r15
    200a:	0f 93       	push	r16
    200c:	0f 2e       	mov	r0, r31
    200e:	f5 e0       	ldi	r31, 0x05	; 5
    2010:	ef 2e       	mov	r14, r31
    2012:	f5 e1       	ldi	r31, 0x15	; 21
    2014:	ff 2e       	mov	r15, r31
    2016:	f0 2d       	mov	r31, r0
    2018:	00 e0       	ldi	r16, 0x00	; 0
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 ec       	ldi	r20, 0xC0	; 192
    2020:	50 e0       	ldi	r21, 0x00	; 0
    2022:	68 e8       	ldi	r22, 0x88	; 136
    2024:	73 e0       	ldi	r23, 0x03	; 3
    2026:	8e e4       	ldi	r24, 0x4E	; 78
    2028:	91 e0       	ldi	r25, 0x01	; 1
    202a:	a1 df       	rcall	.-190    	; 0x1f6e <xTaskCreate>
    202c:	81 30       	cpi	r24, 0x01	; 1
    202e:	11 f4       	brne	.+4      	; 0x2034 <vTaskStartScheduler+0x2e>
    2030:	0e 94 b5 19 	call	0x336a	; 0x336a <xTimerCreateTimerTask>
    2034:	81 30       	cpi	r24, 0x01	; 1
    2036:	c9 f4       	brne	.+50     	; 0x206a <vTaskStartScheduler+0x64>
    2038:	f8 94       	cli
    203a:	8f ef       	ldi	r24, 0xFF	; 255
    203c:	9f ef       	ldi	r25, 0xFF	; 255
    203e:	dc 01       	movw	r26, r24
    2040:	80 93 07 15 	sts	0x1507, r24	; 0x801507 <xNextTaskUnblockTime>
    2044:	90 93 08 15 	sts	0x1508, r25	; 0x801508 <xNextTaskUnblockTime+0x1>
    2048:	a0 93 09 15 	sts	0x1509, r26	; 0x801509 <xNextTaskUnblockTime+0x2>
    204c:	b0 93 0a 15 	sts	0x150A, r27	; 0x80150a <xNextTaskUnblockTime+0x3>
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	80 93 12 15 	sts	0x1512, r24	; 0x801512 <xSchedulerRunning>
    2056:	10 92 14 15 	sts	0x1514, r1	; 0x801514 <xTickCount>
    205a:	10 92 15 15 	sts	0x1515, r1	; 0x801515 <xTickCount+0x1>
    205e:	10 92 16 15 	sts	0x1516, r1	; 0x801516 <xTickCount+0x2>
    2062:	10 92 17 15 	sts	0x1517, r1	; 0x801517 <xTickCount+0x3>
    2066:	0e 94 9f 06 	call	0xd3e	; 0xd3e <xPortStartScheduler>
    206a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    206e:	0f 91       	pop	r16
    2070:	ff 90       	pop	r15
    2072:	ef 90       	pop	r14
    2074:	08 95       	ret

00002076 <vTaskSuspendAll>:
    2076:	80 91 04 15 	lds	r24, 0x1504	; 0x801504 <uxSchedulerSuspended>
    207a:	8f 5f       	subi	r24, 0xFF	; 255
    207c:	80 93 04 15 	sts	0x1504, r24	; 0x801504 <uxSchedulerSuspended>
    2080:	08 95       	ret

00002082 <xTaskGetTickCount>:
    2082:	0f b6       	in	r0, 0x3f	; 63
    2084:	f8 94       	cli
    2086:	0f 92       	push	r0
    2088:	60 91 14 15 	lds	r22, 0x1514	; 0x801514 <xTickCount>
    208c:	70 91 15 15 	lds	r23, 0x1515	; 0x801515 <xTickCount+0x1>
    2090:	80 91 16 15 	lds	r24, 0x1516	; 0x801516 <xTickCount+0x2>
    2094:	90 91 17 15 	lds	r25, 0x1517	; 0x801517 <xTickCount+0x3>
    2098:	0f 90       	pop	r0
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	08 95       	ret

0000209e <xTaskIncrementTick>:
    209e:	cf 92       	push	r12
    20a0:	df 92       	push	r13
    20a2:	ef 92       	push	r14
    20a4:	ff 92       	push	r15
    20a6:	cf 93       	push	r28
    20a8:	df 93       	push	r29
    20aa:	80 91 04 15 	lds	r24, 0x1504	; 0x801504 <uxSchedulerSuspended>
    20ae:	81 11       	cpse	r24, r1
    20b0:	05 c1       	rjmp	.+522    	; 0x22bc <__stack+0xbd>
    20b2:	c0 90 14 15 	lds	r12, 0x1514	; 0x801514 <xTickCount>
    20b6:	d0 90 15 15 	lds	r13, 0x1515	; 0x801515 <xTickCount+0x1>
    20ba:	e0 90 16 15 	lds	r14, 0x1516	; 0x801516 <xTickCount+0x2>
    20be:	f0 90 17 15 	lds	r15, 0x1517	; 0x801517 <xTickCount+0x3>
    20c2:	8f ef       	ldi	r24, 0xFF	; 255
    20c4:	c8 1a       	sub	r12, r24
    20c6:	d8 0a       	sbc	r13, r24
    20c8:	e8 0a       	sbc	r14, r24
    20ca:	f8 0a       	sbc	r15, r24
    20cc:	c0 92 14 15 	sts	0x1514, r12	; 0x801514 <xTickCount>
    20d0:	d0 92 15 15 	sts	0x1515, r13	; 0x801515 <xTickCount+0x1>
    20d4:	e0 92 16 15 	sts	0x1516, r14	; 0x801516 <xTickCount+0x2>
    20d8:	f0 92 17 15 	sts	0x1517, r15	; 0x801517 <xTickCount+0x3>
    20dc:	c1 14       	cp	r12, r1
    20de:	d1 04       	cpc	r13, r1
    20e0:	e1 04       	cpc	r14, r1
    20e2:	f1 04       	cpc	r15, r1
    20e4:	b1 f4       	brne	.+44     	; 0x2112 <xTaskIncrementTick+0x74>
    20e6:	80 91 3d 15 	lds	r24, 0x153D	; 0x80153d <pxDelayedTaskList>
    20ea:	90 91 3e 15 	lds	r25, 0x153E	; 0x80153e <pxDelayedTaskList+0x1>
    20ee:	20 91 3b 15 	lds	r18, 0x153B	; 0x80153b <pxOverflowDelayedTaskList>
    20f2:	30 91 3c 15 	lds	r19, 0x153C	; 0x80153c <pxOverflowDelayedTaskList+0x1>
    20f6:	30 93 3e 15 	sts	0x153E, r19	; 0x80153e <pxDelayedTaskList+0x1>
    20fa:	20 93 3d 15 	sts	0x153D, r18	; 0x80153d <pxDelayedTaskList>
    20fe:	90 93 3c 15 	sts	0x153C, r25	; 0x80153c <pxOverflowDelayedTaskList+0x1>
    2102:	80 93 3b 15 	sts	0x153B, r24	; 0x80153b <pxOverflowDelayedTaskList>
    2106:	80 91 0c 15 	lds	r24, 0x150C	; 0x80150c <xNumOfOverflows>
    210a:	8f 5f       	subi	r24, 0xFF	; 255
    210c:	80 93 0c 15 	sts	0x150C, r24	; 0x80150c <xNumOfOverflows>
    2110:	17 dd       	rcall	.-1490   	; 0x1b40 <prvResetNextTaskUnblockTime>
    2112:	80 91 07 15 	lds	r24, 0x1507	; 0x801507 <xNextTaskUnblockTime>
    2116:	90 91 08 15 	lds	r25, 0x1508	; 0x801508 <xNextTaskUnblockTime+0x1>
    211a:	a0 91 09 15 	lds	r26, 0x1509	; 0x801509 <xNextTaskUnblockTime+0x2>
    211e:	b0 91 0a 15 	lds	r27, 0x150A	; 0x80150a <xNextTaskUnblockTime+0x3>
    2122:	c8 16       	cp	r12, r24
    2124:	d9 06       	cpc	r13, r25
    2126:	ea 06       	cpc	r14, r26
    2128:	fb 06       	cpc	r15, r27
    212a:	20 f4       	brcc	.+8      	; 0x2134 <xTaskIncrementTick+0x96>
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	b2 c0       	rjmp	.+356    	; 0x2294 <__stack+0x95>
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	01 c0       	rjmp	.+2      	; 0x2136 <xTaskIncrementTick+0x98>
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	e0 91 3d 15 	lds	r30, 0x153D	; 0x80153d <pxDelayedTaskList>
    213a:	f0 91 3e 15 	lds	r31, 0x153E	; 0x80153e <pxDelayedTaskList+0x1>
    213e:	90 81       	ld	r25, Z
    2140:	91 11       	cpse	r25, r1
    2142:	0c c0       	rjmp	.+24     	; 0x215c <xTaskIncrementTick+0xbe>
    2144:	4f ef       	ldi	r20, 0xFF	; 255
    2146:	5f ef       	ldi	r21, 0xFF	; 255
    2148:	ba 01       	movw	r22, r20
    214a:	40 93 07 15 	sts	0x1507, r20	; 0x801507 <xNextTaskUnblockTime>
    214e:	50 93 08 15 	sts	0x1508, r21	; 0x801508 <xNextTaskUnblockTime+0x1>
    2152:	60 93 09 15 	sts	0x1509, r22	; 0x801509 <xNextTaskUnblockTime+0x2>
    2156:	70 93 0a 15 	sts	0x150A, r23	; 0x80150a <xNextTaskUnblockTime+0x3>
    215a:	9c c0       	rjmp	.+312    	; 0x2294 <__stack+0x95>
    215c:	e0 91 3d 15 	lds	r30, 0x153D	; 0x80153d <pxDelayedTaskList>
    2160:	f0 91 3e 15 	lds	r31, 0x153E	; 0x80153e <pxDelayedTaskList+0x1>
    2164:	07 80       	ldd	r0, Z+7	; 0x07
    2166:	f0 85       	ldd	r31, Z+8	; 0x08
    2168:	e0 2d       	mov	r30, r0
    216a:	00 84       	ldd	r0, Z+8	; 0x08
    216c:	f1 85       	ldd	r31, Z+9	; 0x09
    216e:	e0 2d       	mov	r30, r0
    2170:	42 81       	ldd	r20, Z+2	; 0x02
    2172:	53 81       	ldd	r21, Z+3	; 0x03
    2174:	64 81       	ldd	r22, Z+4	; 0x04
    2176:	75 81       	ldd	r23, Z+5	; 0x05
    2178:	c4 16       	cp	r12, r20
    217a:	d5 06       	cpc	r13, r21
    217c:	e6 06       	cpc	r14, r22
    217e:	f7 06       	cpc	r15, r23
    2180:	48 f4       	brcc	.+18     	; 0x2194 <xTaskIncrementTick+0xf6>
    2182:	40 93 07 15 	sts	0x1507, r20	; 0x801507 <xNextTaskUnblockTime>
    2186:	50 93 08 15 	sts	0x1508, r21	; 0x801508 <xNextTaskUnblockTime+0x1>
    218a:	60 93 09 15 	sts	0x1509, r22	; 0x801509 <xNextTaskUnblockTime+0x2>
    218e:	70 93 0a 15 	sts	0x150A, r23	; 0x80150a <xNextTaskUnblockTime+0x3>
    2192:	80 c0       	rjmp	.+256    	; 0x2294 <__stack+0x95>
    2194:	a4 85       	ldd	r26, Z+12	; 0x0c
    2196:	b5 85       	ldd	r27, Z+13	; 0x0d
    2198:	c6 81       	ldd	r28, Z+6	; 0x06
    219a:	d7 81       	ldd	r29, Z+7	; 0x07
    219c:	20 85       	ldd	r18, Z+8	; 0x08
    219e:	31 85       	ldd	r19, Z+9	; 0x09
    21a0:	3f 83       	std	Y+7, r19	; 0x07
    21a2:	2e 83       	std	Y+6, r18	; 0x06
    21a4:	c0 85       	ldd	r28, Z+8	; 0x08
    21a6:	d1 85       	ldd	r29, Z+9	; 0x09
    21a8:	26 81       	ldd	r18, Z+6	; 0x06
    21aa:	37 81       	ldd	r19, Z+7	; 0x07
    21ac:	3d 83       	std	Y+5, r19	; 0x05
    21ae:	2c 83       	std	Y+4, r18	; 0x04
    21b0:	11 96       	adiw	r26, 0x01	; 1
    21b2:	4d 91       	ld	r20, X+
    21b4:	5c 91       	ld	r21, X
    21b6:	12 97       	sbiw	r26, 0x02	; 2
    21b8:	9f 01       	movw	r18, r30
    21ba:	2e 5f       	subi	r18, 0xFE	; 254
    21bc:	3f 4f       	sbci	r19, 0xFF	; 255
    21be:	42 17       	cp	r20, r18
    21c0:	53 07       	cpc	r21, r19
    21c2:	31 f4       	brne	.+12     	; 0x21d0 <xTaskIncrementTick+0x132>
    21c4:	40 85       	ldd	r20, Z+8	; 0x08
    21c6:	51 85       	ldd	r21, Z+9	; 0x09
    21c8:	12 96       	adiw	r26, 0x02	; 2
    21ca:	5c 93       	st	X, r21
    21cc:	4e 93       	st	-X, r20
    21ce:	11 97       	sbiw	r26, 0x01	; 1
    21d0:	15 86       	std	Z+13, r1	; 0x0d
    21d2:	14 86       	std	Z+12, r1	; 0x0c
    21d4:	9c 91       	ld	r25, X
    21d6:	91 50       	subi	r25, 0x01	; 1
    21d8:	9c 93       	st	X, r25
    21da:	a0 8d       	ldd	r26, Z+24	; 0x18
    21dc:	b1 8d       	ldd	r27, Z+25	; 0x19
    21de:	10 97       	sbiw	r26, 0x00	; 0
    21e0:	09 f1       	breq	.+66     	; 0x2224 <__stack+0x25>
    21e2:	c2 89       	ldd	r28, Z+18	; 0x12
    21e4:	d3 89       	ldd	r29, Z+19	; 0x13
    21e6:	44 89       	ldd	r20, Z+20	; 0x14
    21e8:	55 89       	ldd	r21, Z+21	; 0x15
    21ea:	5f 83       	std	Y+7, r21	; 0x07
    21ec:	4e 83       	std	Y+6, r20	; 0x06
    21ee:	c4 89       	ldd	r28, Z+20	; 0x14
    21f0:	d5 89       	ldd	r29, Z+21	; 0x15
    21f2:	42 89       	ldd	r20, Z+18	; 0x12
    21f4:	53 89       	ldd	r21, Z+19	; 0x13
    21f6:	5d 83       	std	Y+5, r21	; 0x05
    21f8:	4c 83       	std	Y+4, r20	; 0x04
    21fa:	11 96       	adiw	r26, 0x01	; 1
    21fc:	6d 91       	ld	r22, X+
    21fe:	7c 91       	ld	r23, X
    2200:	12 97       	sbiw	r26, 0x02	; 2
    2202:	af 01       	movw	r20, r30
    2204:	42 5f       	subi	r20, 0xF2	; 242
    2206:	5f 4f       	sbci	r21, 0xFF	; 255
    2208:	64 17       	cp	r22, r20
    220a:	75 07       	cpc	r23, r21
    220c:	31 f4       	brne	.+12     	; 0x221a <__stack+0x1b>
    220e:	44 89       	ldd	r20, Z+20	; 0x14
    2210:	55 89       	ldd	r21, Z+21	; 0x15
    2212:	12 96       	adiw	r26, 0x02	; 2
    2214:	5c 93       	st	X, r21
    2216:	4e 93       	st	-X, r20
    2218:	11 97       	sbiw	r26, 0x01	; 1
    221a:	11 8e       	std	Z+25, r1	; 0x19
    221c:	10 8e       	std	Z+24, r1	; 0x18
    221e:	9c 91       	ld	r25, X
    2220:	91 50       	subi	r25, 0x01	; 1
    2222:	9c 93       	st	X, r25
    2224:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2226:	90 91 13 15 	lds	r25, 0x1513	; 0x801513 <uxTopReadyPriority>
    222a:	9a 17       	cp	r25, r26
    222c:	10 f4       	brcc	.+4      	; 0x2232 <__stack+0x33>
    222e:	a0 93 13 15 	sts	0x1513, r26	; 0x801513 <uxTopReadyPriority>
    2232:	9b e0       	ldi	r25, 0x0B	; 11
    2234:	9a 9f       	mul	r25, r26
    2236:	d0 01       	movw	r26, r0
    2238:	11 24       	eor	r1, r1
    223a:	ab 5a       	subi	r26, 0xAB	; 171
    223c:	ba 4e       	sbci	r27, 0xEA	; 234
    223e:	11 96       	adiw	r26, 0x01	; 1
    2240:	0d 90       	ld	r0, X+
    2242:	bc 91       	ld	r27, X
    2244:	a0 2d       	mov	r26, r0
    2246:	b7 83       	std	Z+7, r27	; 0x07
    2248:	a6 83       	std	Z+6, r26	; 0x06
    224a:	16 96       	adiw	r26, 0x06	; 6
    224c:	4d 91       	ld	r20, X+
    224e:	5c 91       	ld	r21, X
    2250:	17 97       	sbiw	r26, 0x07	; 7
    2252:	51 87       	std	Z+9, r21	; 0x09
    2254:	40 87       	std	Z+8, r20	; 0x08
    2256:	16 96       	adiw	r26, 0x06	; 6
    2258:	cd 91       	ld	r28, X+
    225a:	dc 91       	ld	r29, X
    225c:	17 97       	sbiw	r26, 0x07	; 7
    225e:	3d 83       	std	Y+5, r19	; 0x05
    2260:	2c 83       	std	Y+4, r18	; 0x04
    2262:	17 96       	adiw	r26, 0x07	; 7
    2264:	3c 93       	st	X, r19
    2266:	2e 93       	st	-X, r18
    2268:	16 97       	sbiw	r26, 0x06	; 6
    226a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    226c:	9a 9f       	mul	r25, r26
    226e:	d0 01       	movw	r26, r0
    2270:	11 24       	eor	r1, r1
    2272:	ab 5a       	subi	r26, 0xAB	; 171
    2274:	ba 4e       	sbci	r27, 0xEA	; 234
    2276:	b5 87       	std	Z+13, r27	; 0x0d
    2278:	a4 87       	std	Z+12, r26	; 0x0c
    227a:	9c 91       	ld	r25, X
    227c:	9f 5f       	subi	r25, 0xFF	; 255
    227e:	9c 93       	st	X, r25
    2280:	22 8d       	ldd	r18, Z+26	; 0x1a
    2282:	e0 91 c3 15 	lds	r30, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    2286:	f0 91 c4 15 	lds	r31, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    228a:	92 8d       	ldd	r25, Z+26	; 0x1a
    228c:	29 17       	cp	r18, r25
    228e:	08 f0       	brcs	.+2      	; 0x2292 <__stack+0x93>
    2290:	4f cf       	rjmp	.-354    	; 0x2130 <xTaskIncrementTick+0x92>
    2292:	51 cf       	rjmp	.-350    	; 0x2136 <xTaskIncrementTick+0x98>
    2294:	e0 91 c3 15 	lds	r30, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    2298:	f0 91 c4 15 	lds	r31, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    229c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    229e:	9b e0       	ldi	r25, 0x0B	; 11
    22a0:	e9 9f       	mul	r30, r25
    22a2:	f0 01       	movw	r30, r0
    22a4:	11 24       	eor	r1, r1
    22a6:	eb 5a       	subi	r30, 0xAB	; 171
    22a8:	fa 4e       	sbci	r31, 0xEA	; 234
    22aa:	90 81       	ld	r25, Z
    22ac:	92 30       	cpi	r25, 0x02	; 2
    22ae:	08 f0       	brcs	.+2      	; 0x22b2 <__stack+0xb3>
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	90 91 0d 15 	lds	r25, 0x150D	; 0x80150d <xYieldPending>
    22b6:	91 11       	cpse	r25, r1
    22b8:	16 c0       	rjmp	.+44     	; 0x22e6 <__stack+0xe7>
    22ba:	16 c0       	rjmp	.+44     	; 0x22e8 <__stack+0xe9>
    22bc:	80 91 0e 15 	lds	r24, 0x150E	; 0x80150e <xPendedTicks>
    22c0:	90 91 0f 15 	lds	r25, 0x150F	; 0x80150f <xPendedTicks+0x1>
    22c4:	a0 91 10 15 	lds	r26, 0x1510	; 0x801510 <xPendedTicks+0x2>
    22c8:	b0 91 11 15 	lds	r27, 0x1511	; 0x801511 <xPendedTicks+0x3>
    22cc:	01 96       	adiw	r24, 0x01	; 1
    22ce:	a1 1d       	adc	r26, r1
    22d0:	b1 1d       	adc	r27, r1
    22d2:	80 93 0e 15 	sts	0x150E, r24	; 0x80150e <xPendedTicks>
    22d6:	90 93 0f 15 	sts	0x150F, r25	; 0x80150f <xPendedTicks+0x1>
    22da:	a0 93 10 15 	sts	0x1510, r26	; 0x801510 <xPendedTicks+0x2>
    22de:	b0 93 11 15 	sts	0x1511, r27	; 0x801511 <xPendedTicks+0x3>
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	01 c0       	rjmp	.+2      	; 0x22e8 <__stack+0xe9>
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	df 91       	pop	r29
    22ea:	cf 91       	pop	r28
    22ec:	ff 90       	pop	r15
    22ee:	ef 90       	pop	r14
    22f0:	df 90       	pop	r13
    22f2:	cf 90       	pop	r12
    22f4:	08 95       	ret

000022f6 <xTaskResumeAll>:
    22f6:	cf 92       	push	r12
    22f8:	df 92       	push	r13
    22fa:	ef 92       	push	r14
    22fc:	ff 92       	push	r15
    22fe:	cf 93       	push	r28
    2300:	df 93       	push	r29
    2302:	0f b6       	in	r0, 0x3f	; 63
    2304:	f8 94       	cli
    2306:	0f 92       	push	r0
    2308:	80 91 04 15 	lds	r24, 0x1504	; 0x801504 <uxSchedulerSuspended>
    230c:	81 50       	subi	r24, 0x01	; 1
    230e:	80 93 04 15 	sts	0x1504, r24	; 0x801504 <uxSchedulerSuspended>
    2312:	80 91 04 15 	lds	r24, 0x1504	; 0x801504 <uxSchedulerSuspended>
    2316:	81 11       	cpse	r24, r1
    2318:	be c0       	rjmp	.+380    	; 0x2496 <xTaskResumeAll+0x1a0>
    231a:	80 91 18 15 	lds	r24, 0x1518	; 0x801518 <uxCurrentNumberOfTasks>
    231e:	81 11       	cpse	r24, r1
    2320:	88 c0       	rjmp	.+272    	; 0x2432 <xTaskResumeAll+0x13c>
    2322:	bc c0       	rjmp	.+376    	; 0x249c <xTaskResumeAll+0x1a6>
    2324:	e0 91 37 15 	lds	r30, 0x1537	; 0x801537 <xPendingReadyList+0x7>
    2328:	f0 91 38 15 	lds	r31, 0x1538	; 0x801538 <xPendingReadyList+0x8>
    232c:	00 84       	ldd	r0, Z+8	; 0x08
    232e:	f1 85       	ldd	r31, Z+9	; 0x09
    2330:	e0 2d       	mov	r30, r0
    2332:	a0 8d       	ldd	r26, Z+24	; 0x18
    2334:	b1 8d       	ldd	r27, Z+25	; 0x19
    2336:	c2 89       	ldd	r28, Z+18	; 0x12
    2338:	d3 89       	ldd	r29, Z+19	; 0x13
    233a:	84 89       	ldd	r24, Z+20	; 0x14
    233c:	95 89       	ldd	r25, Z+21	; 0x15
    233e:	9f 83       	std	Y+7, r25	; 0x07
    2340:	8e 83       	std	Y+6, r24	; 0x06
    2342:	c4 89       	ldd	r28, Z+20	; 0x14
    2344:	d5 89       	ldd	r29, Z+21	; 0x15
    2346:	82 89       	ldd	r24, Z+18	; 0x12
    2348:	93 89       	ldd	r25, Z+19	; 0x13
    234a:	9d 83       	std	Y+5, r25	; 0x05
    234c:	8c 83       	std	Y+4, r24	; 0x04
    234e:	11 96       	adiw	r26, 0x01	; 1
    2350:	2d 91       	ld	r18, X+
    2352:	3c 91       	ld	r19, X
    2354:	12 97       	sbiw	r26, 0x02	; 2
    2356:	cf 01       	movw	r24, r30
    2358:	0e 96       	adiw	r24, 0x0e	; 14
    235a:	28 17       	cp	r18, r24
    235c:	39 07       	cpc	r19, r25
    235e:	31 f4       	brne	.+12     	; 0x236c <xTaskResumeAll+0x76>
    2360:	84 89       	ldd	r24, Z+20	; 0x14
    2362:	95 89       	ldd	r25, Z+21	; 0x15
    2364:	12 96       	adiw	r26, 0x02	; 2
    2366:	9c 93       	st	X, r25
    2368:	8e 93       	st	-X, r24
    236a:	11 97       	sbiw	r26, 0x01	; 1
    236c:	11 8e       	std	Z+25, r1	; 0x19
    236e:	10 8e       	std	Z+24, r1	; 0x18
    2370:	8c 91       	ld	r24, X
    2372:	81 50       	subi	r24, 0x01	; 1
    2374:	8c 93       	st	X, r24
    2376:	a4 85       	ldd	r26, Z+12	; 0x0c
    2378:	b5 85       	ldd	r27, Z+13	; 0x0d
    237a:	c6 81       	ldd	r28, Z+6	; 0x06
    237c:	d7 81       	ldd	r29, Z+7	; 0x07
    237e:	80 85       	ldd	r24, Z+8	; 0x08
    2380:	91 85       	ldd	r25, Z+9	; 0x09
    2382:	9f 83       	std	Y+7, r25	; 0x07
    2384:	8e 83       	std	Y+6, r24	; 0x06
    2386:	c0 85       	ldd	r28, Z+8	; 0x08
    2388:	d1 85       	ldd	r29, Z+9	; 0x09
    238a:	86 81       	ldd	r24, Z+6	; 0x06
    238c:	97 81       	ldd	r25, Z+7	; 0x07
    238e:	9d 83       	std	Y+5, r25	; 0x05
    2390:	8c 83       	std	Y+4, r24	; 0x04
    2392:	11 96       	adiw	r26, 0x01	; 1
    2394:	8d 91       	ld	r24, X+
    2396:	9c 91       	ld	r25, X
    2398:	12 97       	sbiw	r26, 0x02	; 2
    239a:	9f 01       	movw	r18, r30
    239c:	2e 5f       	subi	r18, 0xFE	; 254
    239e:	3f 4f       	sbci	r19, 0xFF	; 255
    23a0:	82 17       	cp	r24, r18
    23a2:	93 07       	cpc	r25, r19
    23a4:	31 f4       	brne	.+12     	; 0x23b2 <xTaskResumeAll+0xbc>
    23a6:	80 85       	ldd	r24, Z+8	; 0x08
    23a8:	91 85       	ldd	r25, Z+9	; 0x09
    23aa:	12 96       	adiw	r26, 0x02	; 2
    23ac:	9c 93       	st	X, r25
    23ae:	8e 93       	st	-X, r24
    23b0:	11 97       	sbiw	r26, 0x01	; 1
    23b2:	15 86       	std	Z+13, r1	; 0x0d
    23b4:	14 86       	std	Z+12, r1	; 0x0c
    23b6:	8c 91       	ld	r24, X
    23b8:	81 50       	subi	r24, 0x01	; 1
    23ba:	8c 93       	st	X, r24
    23bc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    23be:	80 91 13 15 	lds	r24, 0x1513	; 0x801513 <uxTopReadyPriority>
    23c2:	8a 17       	cp	r24, r26
    23c4:	10 f4       	brcc	.+4      	; 0x23ca <xTaskResumeAll+0xd4>
    23c6:	a0 93 13 15 	sts	0x1513, r26	; 0x801513 <uxTopReadyPriority>
    23ca:	8b e0       	ldi	r24, 0x0B	; 11
    23cc:	8a 9f       	mul	r24, r26
    23ce:	d0 01       	movw	r26, r0
    23d0:	11 24       	eor	r1, r1
    23d2:	ab 5a       	subi	r26, 0xAB	; 171
    23d4:	ba 4e       	sbci	r27, 0xEA	; 234
    23d6:	11 96       	adiw	r26, 0x01	; 1
    23d8:	0d 90       	ld	r0, X+
    23da:	bc 91       	ld	r27, X
    23dc:	a0 2d       	mov	r26, r0
    23de:	b7 83       	std	Z+7, r27	; 0x07
    23e0:	a6 83       	std	Z+6, r26	; 0x06
    23e2:	16 96       	adiw	r26, 0x06	; 6
    23e4:	4d 91       	ld	r20, X+
    23e6:	5c 91       	ld	r21, X
    23e8:	17 97       	sbiw	r26, 0x07	; 7
    23ea:	51 87       	std	Z+9, r21	; 0x09
    23ec:	40 87       	std	Z+8, r20	; 0x08
    23ee:	16 96       	adiw	r26, 0x06	; 6
    23f0:	cd 91       	ld	r28, X+
    23f2:	dc 91       	ld	r29, X
    23f4:	17 97       	sbiw	r26, 0x07	; 7
    23f6:	3d 83       	std	Y+5, r19	; 0x05
    23f8:	2c 83       	std	Y+4, r18	; 0x04
    23fa:	17 96       	adiw	r26, 0x07	; 7
    23fc:	3c 93       	st	X, r19
    23fe:	2e 93       	st	-X, r18
    2400:	16 97       	sbiw	r26, 0x06	; 6
    2402:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2404:	8a 9f       	mul	r24, r26
    2406:	d0 01       	movw	r26, r0
    2408:	11 24       	eor	r1, r1
    240a:	ab 5a       	subi	r26, 0xAB	; 171
    240c:	ba 4e       	sbci	r27, 0xEA	; 234
    240e:	b5 87       	std	Z+13, r27	; 0x0d
    2410:	a4 87       	std	Z+12, r26	; 0x0c
    2412:	8c 91       	ld	r24, X
    2414:	8f 5f       	subi	r24, 0xFF	; 255
    2416:	8c 93       	st	X, r24
    2418:	92 8d       	ldd	r25, Z+26	; 0x1a
    241a:	a0 91 c3 15 	lds	r26, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    241e:	b0 91 c4 15 	lds	r27, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    2422:	5a 96       	adiw	r26, 0x1a	; 26
    2424:	8c 91       	ld	r24, X
    2426:	98 17       	cp	r25, r24
    2428:	30 f0       	brcs	.+12     	; 0x2436 <xTaskResumeAll+0x140>
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	80 93 0d 15 	sts	0x150D, r24	; 0x80150d <xYieldPending>
    2430:	02 c0       	rjmp	.+4      	; 0x2436 <xTaskResumeAll+0x140>
    2432:	e0 e0       	ldi	r30, 0x00	; 0
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 91 30 15 	lds	r24, 0x1530	; 0x801530 <xPendingReadyList>
    243a:	81 11       	cpse	r24, r1
    243c:	73 cf       	rjmp	.-282    	; 0x2324 <xTaskResumeAll+0x2e>
    243e:	ef 2b       	or	r30, r31
    2440:	09 f0       	breq	.+2      	; 0x2444 <xTaskResumeAll+0x14e>
    2442:	7e db       	rcall	.-2308   	; 0x1b40 <prvResetNextTaskUnblockTime>
    2444:	c0 90 0e 15 	lds	r12, 0x150E	; 0x80150e <xPendedTicks>
    2448:	d0 90 0f 15 	lds	r13, 0x150F	; 0x80150f <xPendedTicks+0x1>
    244c:	e0 90 10 15 	lds	r14, 0x1510	; 0x801510 <xPendedTicks+0x2>
    2450:	f0 90 11 15 	lds	r15, 0x1511	; 0x801511 <xPendedTicks+0x3>
    2454:	c1 14       	cp	r12, r1
    2456:	d1 04       	cpc	r13, r1
    2458:	e1 04       	cpc	r14, r1
    245a:	f1 04       	cpc	r15, r1
    245c:	a1 f0       	breq	.+40     	; 0x2486 <xTaskResumeAll+0x190>
    245e:	1f de       	rcall	.-962    	; 0x209e <xTaskIncrementTick>
    2460:	88 23       	and	r24, r24
    2462:	19 f0       	breq	.+6      	; 0x246a <xTaskResumeAll+0x174>
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	80 93 0d 15 	sts	0x150D, r24	; 0x80150d <xYieldPending>
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	c8 1a       	sub	r12, r24
    246e:	d1 08       	sbc	r13, r1
    2470:	e1 08       	sbc	r14, r1
    2472:	f1 08       	sbc	r15, r1
    2474:	a1 f7       	brne	.-24     	; 0x245e <xTaskResumeAll+0x168>
    2476:	10 92 0e 15 	sts	0x150E, r1	; 0x80150e <xPendedTicks>
    247a:	10 92 0f 15 	sts	0x150F, r1	; 0x80150f <xPendedTicks+0x1>
    247e:	10 92 10 15 	sts	0x1510, r1	; 0x801510 <xPendedTicks+0x2>
    2482:	10 92 11 15 	sts	0x1511, r1	; 0x801511 <xPendedTicks+0x3>
    2486:	80 91 0d 15 	lds	r24, 0x150D	; 0x80150d <xYieldPending>
    248a:	88 23       	and	r24, r24
    248c:	31 f0       	breq	.+12     	; 0x249a <xTaskResumeAll+0x1a4>
    248e:	0e 94 d1 06 	call	0xda2	; 0xda2 <vPortYield>
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	03 c0       	rjmp	.+6      	; 0x249c <xTaskResumeAll+0x1a6>
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	01 c0       	rjmp	.+2      	; 0x249c <xTaskResumeAll+0x1a6>
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	0f 90       	pop	r0
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	df 91       	pop	r29
    24a2:	cf 91       	pop	r28
    24a4:	ff 90       	pop	r15
    24a6:	ef 90       	pop	r14
    24a8:	df 90       	pop	r13
    24aa:	cf 90       	pop	r12
    24ac:	08 95       	ret

000024ae <xTaskDelayUntil>:
    24ae:	8f 92       	push	r8
    24b0:	9f 92       	push	r9
    24b2:	af 92       	push	r10
    24b4:	bf 92       	push	r11
    24b6:	cf 92       	push	r12
    24b8:	df 92       	push	r13
    24ba:	ef 92       	push	r14
    24bc:	ff 92       	push	r15
    24be:	1f 93       	push	r17
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	ec 01       	movw	r28, r24
    24c6:	6a 01       	movw	r12, r20
    24c8:	7b 01       	movw	r14, r22
    24ca:	d5 dd       	rcall	.-1110   	; 0x2076 <vTaskSuspendAll>
    24cc:	80 90 14 15 	lds	r8, 0x1514	; 0x801514 <xTickCount>
    24d0:	90 90 15 15 	lds	r9, 0x1515	; 0x801515 <xTickCount+0x1>
    24d4:	a0 90 16 15 	lds	r10, 0x1516	; 0x801516 <xTickCount+0x2>
    24d8:	b0 90 17 15 	lds	r11, 0x1517	; 0x801517 <xTickCount+0x3>
    24dc:	88 81       	ld	r24, Y
    24de:	99 81       	ldd	r25, Y+1	; 0x01
    24e0:	aa 81       	ldd	r26, Y+2	; 0x02
    24e2:	bb 81       	ldd	r27, Y+3	; 0x03
    24e4:	ac 01       	movw	r20, r24
    24e6:	bd 01       	movw	r22, r26
    24e8:	4c 0d       	add	r20, r12
    24ea:	5d 1d       	adc	r21, r13
    24ec:	6e 1d       	adc	r22, r14
    24ee:	7f 1d       	adc	r23, r15
    24f0:	88 16       	cp	r8, r24
    24f2:	99 06       	cpc	r9, r25
    24f4:	aa 06       	cpc	r10, r26
    24f6:	bb 06       	cpc	r11, r27
    24f8:	60 f4       	brcc	.+24     	; 0x2512 <xTaskDelayUntil+0x64>
    24fa:	48 17       	cp	r20, r24
    24fc:	59 07       	cpc	r21, r25
    24fe:	6a 07       	cpc	r22, r26
    2500:	7b 07       	cpc	r23, r27
    2502:	98 f4       	brcc	.+38     	; 0x252a <xTaskDelayUntil+0x7c>
    2504:	84 16       	cp	r8, r20
    2506:	95 06       	cpc	r9, r21
    2508:	a6 06       	cpc	r10, r22
    250a:	b7 06       	cpc	r11, r23
    250c:	80 f0       	brcs	.+32     	; 0x252e <xTaskDelayUntil+0x80>
    250e:	10 e0       	ldi	r17, 0x00	; 0
    2510:	13 c0       	rjmp	.+38     	; 0x2538 <xTaskDelayUntil+0x8a>
    2512:	48 17       	cp	r20, r24
    2514:	59 07       	cpc	r21, r25
    2516:	6a 07       	cpc	r22, r26
    2518:	7b 07       	cpc	r23, r27
    251a:	58 f0       	brcs	.+22     	; 0x2532 <xTaskDelayUntil+0x84>
    251c:	84 16       	cp	r8, r20
    251e:	95 06       	cpc	r9, r21
    2520:	a6 06       	cpc	r10, r22
    2522:	b7 06       	cpc	r11, r23
    2524:	40 f0       	brcs	.+16     	; 0x2536 <xTaskDelayUntil+0x88>
    2526:	10 e0       	ldi	r17, 0x00	; 0
    2528:	07 c0       	rjmp	.+14     	; 0x2538 <xTaskDelayUntil+0x8a>
    252a:	10 e0       	ldi	r17, 0x00	; 0
    252c:	05 c0       	rjmp	.+10     	; 0x2538 <xTaskDelayUntil+0x8a>
    252e:	11 e0       	ldi	r17, 0x01	; 1
    2530:	03 c0       	rjmp	.+6      	; 0x2538 <xTaskDelayUntil+0x8a>
    2532:	11 e0       	ldi	r17, 0x01	; 1
    2534:	01 c0       	rjmp	.+2      	; 0x2538 <xTaskDelayUntil+0x8a>
    2536:	11 e0       	ldi	r17, 0x01	; 1
    2538:	48 83       	st	Y, r20
    253a:	59 83       	std	Y+1, r21	; 0x01
    253c:	6a 83       	std	Y+2, r22	; 0x02
    253e:	7b 83       	std	Y+3, r23	; 0x03
    2540:	11 23       	and	r17, r17
    2542:	41 f0       	breq	.+16     	; 0x2554 <xTaskDelayUntil+0xa6>
    2544:	cb 01       	movw	r24, r22
    2546:	ba 01       	movw	r22, r20
    2548:	68 19       	sub	r22, r8
    254a:	79 09       	sbc	r23, r9
    254c:	8a 09       	sbc	r24, r10
    254e:	9b 09       	sbc	r25, r11
    2550:	40 e0       	ldi	r20, 0x00	; 0
    2552:	6b dc       	rcall	.-1834   	; 0x1e2a <prvAddCurrentTaskToDelayedList>
    2554:	d0 de       	rcall	.-608    	; 0x22f6 <xTaskResumeAll>
    2556:	81 11       	cpse	r24, r1
    2558:	02 c0       	rjmp	.+4      	; 0x255e <xTaskDelayUntil+0xb0>
    255a:	0e 94 d1 06 	call	0xda2	; 0xda2 <vPortYield>
    255e:	81 2f       	mov	r24, r17
    2560:	df 91       	pop	r29
    2562:	cf 91       	pop	r28
    2564:	1f 91       	pop	r17
    2566:	ff 90       	pop	r15
    2568:	ef 90       	pop	r14
    256a:	df 90       	pop	r13
    256c:	cf 90       	pop	r12
    256e:	bf 90       	pop	r11
    2570:	af 90       	pop	r10
    2572:	9f 90       	pop	r9
    2574:	8f 90       	pop	r8
    2576:	08 95       	ret

00002578 <vTaskDelay>:
    2578:	cf 92       	push	r12
    257a:	df 92       	push	r13
    257c:	ef 92       	push	r14
    257e:	ff 92       	push	r15
    2580:	6b 01       	movw	r12, r22
    2582:	7c 01       	movw	r14, r24
    2584:	67 2b       	or	r22, r23
    2586:	68 2b       	or	r22, r24
    2588:	69 2b       	or	r22, r25
    258a:	39 f0       	breq	.+14     	; 0x259a <vTaskDelay+0x22>
    258c:	74 dd       	rcall	.-1304   	; 0x2076 <vTaskSuspendAll>
    258e:	40 e0       	ldi	r20, 0x00	; 0
    2590:	c7 01       	movw	r24, r14
    2592:	b6 01       	movw	r22, r12
    2594:	4a dc       	rcall	.-1900   	; 0x1e2a <prvAddCurrentTaskToDelayedList>
    2596:	af de       	rcall	.-674    	; 0x22f6 <xTaskResumeAll>
    2598:	01 c0       	rjmp	.+2      	; 0x259c <vTaskDelay+0x24>
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	81 11       	cpse	r24, r1
    259e:	02 c0       	rjmp	.+4      	; 0x25a4 <vTaskDelay+0x2c>
    25a0:	0e 94 d1 06 	call	0xda2	; 0xda2 <vPortYield>
    25a4:	ff 90       	pop	r15
    25a6:	ef 90       	pop	r14
    25a8:	df 90       	pop	r13
    25aa:	cf 90       	pop	r12
    25ac:	08 95       	ret

000025ae <vTaskSwitchContext>:
    25ae:	80 91 04 15 	lds	r24, 0x1504	; 0x801504 <uxSchedulerSuspended>
    25b2:	88 23       	and	r24, r24
    25b4:	21 f0       	breq	.+8      	; 0x25be <vTaskSwitchContext+0x10>
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	80 93 0d 15 	sts	0x150D, r24	; 0x80150d <xYieldPending>
    25bc:	08 95       	ret
    25be:	10 92 0d 15 	sts	0x150D, r1	; 0x80150d <xYieldPending>
    25c2:	e0 91 c3 15 	lds	r30, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    25c6:	f0 91 c4 15 	lds	r31, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    25ca:	20 81       	ld	r18, Z
    25cc:	31 81       	ldd	r19, Z+1	; 0x01
    25ce:	e0 91 c3 15 	lds	r30, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    25d2:	f0 91 c4 15 	lds	r31, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    25d6:	83 8d       	ldd	r24, Z+27	; 0x1b
    25d8:	94 8d       	ldd	r25, Z+28	; 0x1c
    25da:	82 17       	cp	r24, r18
    25dc:	93 07       	cpc	r25, r19
    25de:	60 f0       	brcs	.+24     	; 0x25f8 <vTaskSwitchContext+0x4a>
    25e0:	60 91 c3 15 	lds	r22, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    25e4:	70 91 c4 15 	lds	r23, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    25e8:	63 5e       	subi	r22, 0xE3	; 227
    25ea:	7f 4f       	sbci	r23, 0xFF	; 255
    25ec:	80 91 c3 15 	lds	r24, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    25f0:	90 91 c4 15 	lds	r25, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    25f4:	0e 94 43 1c 	call	0x3886	; 0x3886 <vApplicationStackOverflowHook>
    25f8:	80 91 13 15 	lds	r24, 0x1513	; 0x801513 <uxTopReadyPriority>
    25fc:	01 c0       	rjmp	.+2      	; 0x2600 <vTaskSwitchContext+0x52>
    25fe:	81 50       	subi	r24, 0x01	; 1
    2600:	28 2f       	mov	r18, r24
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	9b e0       	ldi	r25, 0x0B	; 11
    2606:	92 9f       	mul	r25, r18
    2608:	f0 01       	movw	r30, r0
    260a:	93 9f       	mul	r25, r19
    260c:	f0 0d       	add	r31, r0
    260e:	11 24       	eor	r1, r1
    2610:	eb 5a       	subi	r30, 0xAB	; 171
    2612:	fa 4e       	sbci	r31, 0xEA	; 234
    2614:	90 81       	ld	r25, Z
    2616:	99 23       	and	r25, r25
    2618:	91 f3       	breq	.-28     	; 0x25fe <vTaskSwitchContext+0x50>
    261a:	9b e0       	ldi	r25, 0x0B	; 11
    261c:	92 9f       	mul	r25, r18
    261e:	a0 01       	movw	r20, r0
    2620:	93 9f       	mul	r25, r19
    2622:	50 0d       	add	r21, r0
    2624:	11 24       	eor	r1, r1
    2626:	df 01       	movw	r26, r30
    2628:	01 80       	ldd	r0, Z+1	; 0x01
    262a:	f2 81       	ldd	r31, Z+2	; 0x02
    262c:	e0 2d       	mov	r30, r0
    262e:	04 80       	ldd	r0, Z+4	; 0x04
    2630:	f5 81       	ldd	r31, Z+5	; 0x05
    2632:	e0 2d       	mov	r30, r0
    2634:	12 96       	adiw	r26, 0x02	; 2
    2636:	fc 93       	st	X, r31
    2638:	ee 93       	st	-X, r30
    263a:	11 97       	sbiw	r26, 0x01	; 1
    263c:	48 5a       	subi	r20, 0xA8	; 168
    263e:	5a 4e       	sbci	r21, 0xEA	; 234
    2640:	e4 17       	cp	r30, r20
    2642:	f5 07       	cpc	r31, r21
    2644:	29 f4       	brne	.+10     	; 0x2650 <vTaskSwitchContext+0xa2>
    2646:	44 81       	ldd	r20, Z+4	; 0x04
    2648:	55 81       	ldd	r21, Z+5	; 0x05
    264a:	fd 01       	movw	r30, r26
    264c:	52 83       	std	Z+2, r21	; 0x02
    264e:	41 83       	std	Z+1, r20	; 0x01
    2650:	9b e0       	ldi	r25, 0x0B	; 11
    2652:	92 9f       	mul	r25, r18
    2654:	f0 01       	movw	r30, r0
    2656:	93 9f       	mul	r25, r19
    2658:	f0 0d       	add	r31, r0
    265a:	11 24       	eor	r1, r1
    265c:	eb 5a       	subi	r30, 0xAB	; 171
    265e:	fa 4e       	sbci	r31, 0xEA	; 234
    2660:	01 80       	ldd	r0, Z+1	; 0x01
    2662:	f2 81       	ldd	r31, Z+2	; 0x02
    2664:	e0 2d       	mov	r30, r0
    2666:	20 85       	ldd	r18, Z+8	; 0x08
    2668:	31 85       	ldd	r19, Z+9	; 0x09
    266a:	30 93 c4 15 	sts	0x15C4, r19	; 0x8015c4 <pxCurrentTCB+0x1>
    266e:	20 93 c3 15 	sts	0x15C3, r18	; 0x8015c3 <pxCurrentTCB>
    2672:	80 93 13 15 	sts	0x1513, r24	; 0x801513 <uxTopReadyPriority>
    2676:	08 95       	ret

00002678 <vTaskPlaceOnEventList>:
    2678:	cf 92       	push	r12
    267a:	df 92       	push	r13
    267c:	ef 92       	push	r14
    267e:	ff 92       	push	r15
    2680:	6a 01       	movw	r12, r20
    2682:	7b 01       	movw	r14, r22
    2684:	60 91 c3 15 	lds	r22, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    2688:	70 91 c4 15 	lds	r23, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    268c:	62 5f       	subi	r22, 0xF2	; 242
    268e:	7f 4f       	sbci	r23, 0xFF	; 255
    2690:	0e 94 18 06 	call	0xc30	; 0xc30 <vListInsert>
    2694:	41 e0       	ldi	r20, 0x01	; 1
    2696:	c7 01       	movw	r24, r14
    2698:	b6 01       	movw	r22, r12
    269a:	c7 db       	rcall	.-2162   	; 0x1e2a <prvAddCurrentTaskToDelayedList>
    269c:	ff 90       	pop	r15
    269e:	ef 90       	pop	r14
    26a0:	df 90       	pop	r13
    26a2:	cf 90       	pop	r12
    26a4:	08 95       	ret

000026a6 <vTaskPlaceOnUnorderedEventList>:
    26a6:	0f 93       	push	r16
    26a8:	1f 93       	push	r17
    26aa:	cf 93       	push	r28
    26ac:	df 93       	push	r29
    26ae:	fc 01       	movw	r30, r24
    26b0:	a0 91 c3 15 	lds	r26, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    26b4:	b0 91 c4 15 	lds	r27, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    26b8:	70 68       	ori	r23, 0x80	; 128
    26ba:	1e 96       	adiw	r26, 0x0e	; 14
    26bc:	4d 93       	st	X+, r20
    26be:	5d 93       	st	X+, r21
    26c0:	6d 93       	st	X+, r22
    26c2:	7c 93       	st	X, r23
    26c4:	51 97       	sbiw	r26, 0x11	; 17
    26c6:	a1 81       	ldd	r26, Z+1	; 0x01
    26c8:	b2 81       	ldd	r27, Z+2	; 0x02
    26ca:	c0 91 c3 15 	lds	r28, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    26ce:	d0 91 c4 15 	lds	r29, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    26d2:	bb 8b       	std	Y+19, r27	; 0x13
    26d4:	aa 8b       	std	Y+18, r26	; 0x12
    26d6:	c0 91 c3 15 	lds	r28, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    26da:	d0 91 c4 15 	lds	r29, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    26de:	16 96       	adiw	r26, 0x06	; 6
    26e0:	8d 91       	ld	r24, X+
    26e2:	9c 91       	ld	r25, X
    26e4:	17 97       	sbiw	r26, 0x07	; 7
    26e6:	9d 8b       	std	Y+21, r25	; 0x15
    26e8:	8c 8b       	std	Y+20, r24	; 0x14
    26ea:	16 96       	adiw	r26, 0x06	; 6
    26ec:	cd 91       	ld	r28, X+
    26ee:	dc 91       	ld	r29, X
    26f0:	17 97       	sbiw	r26, 0x07	; 7
    26f2:	80 91 c3 15 	lds	r24, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    26f6:	90 91 c4 15 	lds	r25, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    26fa:	0e 96       	adiw	r24, 0x0e	; 14
    26fc:	9d 83       	std	Y+5, r25	; 0x05
    26fe:	8c 83       	std	Y+4, r24	; 0x04
    2700:	80 91 c3 15 	lds	r24, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    2704:	90 91 c4 15 	lds	r25, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    2708:	0e 96       	adiw	r24, 0x0e	; 14
    270a:	17 96       	adiw	r26, 0x07	; 7
    270c:	9c 93       	st	X, r25
    270e:	8e 93       	st	-X, r24
    2710:	16 97       	sbiw	r26, 0x06	; 6
    2712:	a0 91 c3 15 	lds	r26, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    2716:	b0 91 c4 15 	lds	r27, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    271a:	59 96       	adiw	r26, 0x19	; 25
    271c:	fc 93       	st	X, r31
    271e:	ee 93       	st	-X, r30
    2720:	58 97       	sbiw	r26, 0x18	; 24
    2722:	80 81       	ld	r24, Z
    2724:	8f 5f       	subi	r24, 0xFF	; 255
    2726:	80 83       	st	Z, r24
    2728:	41 e0       	ldi	r20, 0x01	; 1
    272a:	c9 01       	movw	r24, r18
    272c:	b8 01       	movw	r22, r16
    272e:	7d db       	rcall	.-2310   	; 0x1e2a <prvAddCurrentTaskToDelayedList>
    2730:	df 91       	pop	r29
    2732:	cf 91       	pop	r28
    2734:	1f 91       	pop	r17
    2736:	0f 91       	pop	r16
    2738:	08 95       	ret

0000273a <vTaskPlaceOnEventListRestricted>:
    273a:	cf 93       	push	r28
    273c:	df 93       	push	r29
    273e:	fc 01       	movw	r30, r24
    2740:	cb 01       	movw	r24, r22
    2742:	ba 01       	movw	r22, r20
    2744:	a1 81       	ldd	r26, Z+1	; 0x01
    2746:	b2 81       	ldd	r27, Z+2	; 0x02
    2748:	c0 91 c3 15 	lds	r28, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    274c:	d0 91 c4 15 	lds	r29, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    2750:	bb 8b       	std	Y+19, r27	; 0x13
    2752:	aa 8b       	std	Y+18, r26	; 0x12
    2754:	c0 91 c3 15 	lds	r28, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    2758:	d0 91 c4 15 	lds	r29, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    275c:	16 96       	adiw	r26, 0x06	; 6
    275e:	4d 91       	ld	r20, X+
    2760:	5c 91       	ld	r21, X
    2762:	17 97       	sbiw	r26, 0x07	; 7
    2764:	5d 8b       	std	Y+21, r21	; 0x15
    2766:	4c 8b       	std	Y+20, r20	; 0x14
    2768:	16 96       	adiw	r26, 0x06	; 6
    276a:	cd 91       	ld	r28, X+
    276c:	dc 91       	ld	r29, X
    276e:	17 97       	sbiw	r26, 0x07	; 7
    2770:	40 91 c3 15 	lds	r20, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    2774:	50 91 c4 15 	lds	r21, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    2778:	42 5f       	subi	r20, 0xF2	; 242
    277a:	5f 4f       	sbci	r21, 0xFF	; 255
    277c:	5d 83       	std	Y+5, r21	; 0x05
    277e:	4c 83       	std	Y+4, r20	; 0x04
    2780:	40 91 c3 15 	lds	r20, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    2784:	50 91 c4 15 	lds	r21, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    2788:	42 5f       	subi	r20, 0xF2	; 242
    278a:	5f 4f       	sbci	r21, 0xFF	; 255
    278c:	17 96       	adiw	r26, 0x07	; 7
    278e:	5c 93       	st	X, r21
    2790:	4e 93       	st	-X, r20
    2792:	16 97       	sbiw	r26, 0x06	; 6
    2794:	a0 91 c3 15 	lds	r26, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    2798:	b0 91 c4 15 	lds	r27, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    279c:	59 96       	adiw	r26, 0x19	; 25
    279e:	fc 93       	st	X, r31
    27a0:	ee 93       	st	-X, r30
    27a2:	58 97       	sbiw	r26, 0x18	; 24
    27a4:	30 81       	ld	r19, Z
    27a6:	3f 5f       	subi	r19, 0xFF	; 255
    27a8:	30 83       	st	Z, r19
    27aa:	22 23       	and	r18, r18
    27ac:	19 f0       	breq	.+6      	; 0x27b4 <vTaskPlaceOnEventListRestricted+0x7a>
    27ae:	6f ef       	ldi	r22, 0xFF	; 255
    27b0:	7f ef       	ldi	r23, 0xFF	; 255
    27b2:	cb 01       	movw	r24, r22
    27b4:	42 2f       	mov	r20, r18
    27b6:	39 db       	rcall	.-2446   	; 0x1e2a <prvAddCurrentTaskToDelayedList>
    27b8:	df 91       	pop	r29
    27ba:	cf 91       	pop	r28
    27bc:	08 95       	ret

000027be <xTaskRemoveFromEventList>:
    27be:	cf 93       	push	r28
    27c0:	df 93       	push	r29
    27c2:	dc 01       	movw	r26, r24
    27c4:	17 96       	adiw	r26, 0x07	; 7
    27c6:	ed 91       	ld	r30, X+
    27c8:	fc 91       	ld	r31, X
    27ca:	18 97       	sbiw	r26, 0x08	; 8
    27cc:	00 84       	ldd	r0, Z+8	; 0x08
    27ce:	f1 85       	ldd	r31, Z+9	; 0x09
    27d0:	e0 2d       	mov	r30, r0
    27d2:	a0 8d       	ldd	r26, Z+24	; 0x18
    27d4:	b1 8d       	ldd	r27, Z+25	; 0x19
    27d6:	c2 89       	ldd	r28, Z+18	; 0x12
    27d8:	d3 89       	ldd	r29, Z+19	; 0x13
    27da:	84 89       	ldd	r24, Z+20	; 0x14
    27dc:	95 89       	ldd	r25, Z+21	; 0x15
    27de:	9f 83       	std	Y+7, r25	; 0x07
    27e0:	8e 83       	std	Y+6, r24	; 0x06
    27e2:	c4 89       	ldd	r28, Z+20	; 0x14
    27e4:	d5 89       	ldd	r29, Z+21	; 0x15
    27e6:	82 89       	ldd	r24, Z+18	; 0x12
    27e8:	93 89       	ldd	r25, Z+19	; 0x13
    27ea:	9d 83       	std	Y+5, r25	; 0x05
    27ec:	8c 83       	std	Y+4, r24	; 0x04
    27ee:	11 96       	adiw	r26, 0x01	; 1
    27f0:	8d 91       	ld	r24, X+
    27f2:	9c 91       	ld	r25, X
    27f4:	12 97       	sbiw	r26, 0x02	; 2
    27f6:	9f 01       	movw	r18, r30
    27f8:	22 5f       	subi	r18, 0xF2	; 242
    27fa:	3f 4f       	sbci	r19, 0xFF	; 255
    27fc:	82 17       	cp	r24, r18
    27fe:	93 07       	cpc	r25, r19
    2800:	31 f4       	brne	.+12     	; 0x280e <xTaskRemoveFromEventList+0x50>
    2802:	84 89       	ldd	r24, Z+20	; 0x14
    2804:	95 89       	ldd	r25, Z+21	; 0x15
    2806:	12 96       	adiw	r26, 0x02	; 2
    2808:	9c 93       	st	X, r25
    280a:	8e 93       	st	-X, r24
    280c:	11 97       	sbiw	r26, 0x01	; 1
    280e:	11 8e       	std	Z+25, r1	; 0x19
    2810:	10 8e       	std	Z+24, r1	; 0x18
    2812:	8c 91       	ld	r24, X
    2814:	81 50       	subi	r24, 0x01	; 1
    2816:	8c 93       	st	X, r24
    2818:	80 91 04 15 	lds	r24, 0x1504	; 0x801504 <uxSchedulerSuspended>
    281c:	81 11       	cpse	r24, r1
    281e:	52 c0       	rjmp	.+164    	; 0x28c4 <xTaskRemoveFromEventList+0x106>
    2820:	a4 85       	ldd	r26, Z+12	; 0x0c
    2822:	b5 85       	ldd	r27, Z+13	; 0x0d
    2824:	c6 81       	ldd	r28, Z+6	; 0x06
    2826:	d7 81       	ldd	r29, Z+7	; 0x07
    2828:	80 85       	ldd	r24, Z+8	; 0x08
    282a:	91 85       	ldd	r25, Z+9	; 0x09
    282c:	9f 83       	std	Y+7, r25	; 0x07
    282e:	8e 83       	std	Y+6, r24	; 0x06
    2830:	c0 85       	ldd	r28, Z+8	; 0x08
    2832:	d1 85       	ldd	r29, Z+9	; 0x09
    2834:	86 81       	ldd	r24, Z+6	; 0x06
    2836:	97 81       	ldd	r25, Z+7	; 0x07
    2838:	9d 83       	std	Y+5, r25	; 0x05
    283a:	8c 83       	std	Y+4, r24	; 0x04
    283c:	11 96       	adiw	r26, 0x01	; 1
    283e:	8d 91       	ld	r24, X+
    2840:	9c 91       	ld	r25, X
    2842:	12 97       	sbiw	r26, 0x02	; 2
    2844:	9f 01       	movw	r18, r30
    2846:	2e 5f       	subi	r18, 0xFE	; 254
    2848:	3f 4f       	sbci	r19, 0xFF	; 255
    284a:	82 17       	cp	r24, r18
    284c:	93 07       	cpc	r25, r19
    284e:	31 f4       	brne	.+12     	; 0x285c <xTaskRemoveFromEventList+0x9e>
    2850:	80 85       	ldd	r24, Z+8	; 0x08
    2852:	91 85       	ldd	r25, Z+9	; 0x09
    2854:	12 96       	adiw	r26, 0x02	; 2
    2856:	9c 93       	st	X, r25
    2858:	8e 93       	st	-X, r24
    285a:	11 97       	sbiw	r26, 0x01	; 1
    285c:	15 86       	std	Z+13, r1	; 0x0d
    285e:	14 86       	std	Z+12, r1	; 0x0c
    2860:	8c 91       	ld	r24, X
    2862:	81 50       	subi	r24, 0x01	; 1
    2864:	8c 93       	st	X, r24
    2866:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2868:	80 91 13 15 	lds	r24, 0x1513	; 0x801513 <uxTopReadyPriority>
    286c:	8a 17       	cp	r24, r26
    286e:	10 f4       	brcc	.+4      	; 0x2874 <xTaskRemoveFromEventList+0xb6>
    2870:	a0 93 13 15 	sts	0x1513, r26	; 0x801513 <uxTopReadyPriority>
    2874:	8b e0       	ldi	r24, 0x0B	; 11
    2876:	8a 9f       	mul	r24, r26
    2878:	d0 01       	movw	r26, r0
    287a:	11 24       	eor	r1, r1
    287c:	ab 5a       	subi	r26, 0xAB	; 171
    287e:	ba 4e       	sbci	r27, 0xEA	; 234
    2880:	11 96       	adiw	r26, 0x01	; 1
    2882:	0d 90       	ld	r0, X+
    2884:	bc 91       	ld	r27, X
    2886:	a0 2d       	mov	r26, r0
    2888:	b7 83       	std	Z+7, r27	; 0x07
    288a:	a6 83       	std	Z+6, r26	; 0x06
    288c:	16 96       	adiw	r26, 0x06	; 6
    288e:	4d 91       	ld	r20, X+
    2890:	5c 91       	ld	r21, X
    2892:	17 97       	sbiw	r26, 0x07	; 7
    2894:	51 87       	std	Z+9, r21	; 0x09
    2896:	40 87       	std	Z+8, r20	; 0x08
    2898:	16 96       	adiw	r26, 0x06	; 6
    289a:	cd 91       	ld	r28, X+
    289c:	dc 91       	ld	r29, X
    289e:	17 97       	sbiw	r26, 0x07	; 7
    28a0:	3d 83       	std	Y+5, r19	; 0x05
    28a2:	2c 83       	std	Y+4, r18	; 0x04
    28a4:	17 96       	adiw	r26, 0x07	; 7
    28a6:	3c 93       	st	X, r19
    28a8:	2e 93       	st	-X, r18
    28aa:	16 97       	sbiw	r26, 0x06	; 6
    28ac:	a2 8d       	ldd	r26, Z+26	; 0x1a
    28ae:	8a 9f       	mul	r24, r26
    28b0:	d0 01       	movw	r26, r0
    28b2:	11 24       	eor	r1, r1
    28b4:	ab 5a       	subi	r26, 0xAB	; 171
    28b6:	ba 4e       	sbci	r27, 0xEA	; 234
    28b8:	b5 87       	std	Z+13, r27	; 0x0d
    28ba:	a4 87       	std	Z+12, r26	; 0x0c
    28bc:	8c 91       	ld	r24, X
    28be:	8f 5f       	subi	r24, 0xFF	; 255
    28c0:	8c 93       	st	X, r24
    28c2:	1c c0       	rjmp	.+56     	; 0x28fc <xTaskRemoveFromEventList+0x13e>
    28c4:	40 e3       	ldi	r20, 0x30	; 48
    28c6:	55 e1       	ldi	r21, 0x15	; 21
    28c8:	da 01       	movw	r26, r20
    28ca:	11 96       	adiw	r26, 0x01	; 1
    28cc:	cd 91       	ld	r28, X+
    28ce:	dc 91       	ld	r29, X
    28d0:	12 97       	sbiw	r26, 0x02	; 2
    28d2:	d3 8b       	std	Z+19, r29	; 0x13
    28d4:	c2 8b       	std	Z+18, r28	; 0x12
    28d6:	8e 81       	ldd	r24, Y+6	; 0x06
    28d8:	9f 81       	ldd	r25, Y+7	; 0x07
    28da:	95 8b       	std	Z+21, r25	; 0x15
    28dc:	84 8b       	std	Z+20, r24	; 0x14
    28de:	8e 81       	ldd	r24, Y+6	; 0x06
    28e0:	9f 81       	ldd	r25, Y+7	; 0x07
    28e2:	dc 01       	movw	r26, r24
    28e4:	15 96       	adiw	r26, 0x05	; 5
    28e6:	3c 93       	st	X, r19
    28e8:	2e 93       	st	-X, r18
    28ea:	14 97       	sbiw	r26, 0x04	; 4
    28ec:	3f 83       	std	Y+7, r19	; 0x07
    28ee:	2e 83       	std	Y+6, r18	; 0x06
    28f0:	51 8f       	std	Z+25, r21	; 0x19
    28f2:	40 8f       	std	Z+24, r20	; 0x18
    28f4:	da 01       	movw	r26, r20
    28f6:	8c 91       	ld	r24, X
    28f8:	8f 5f       	subi	r24, 0xFF	; 255
    28fa:	8c 93       	st	X, r24
    28fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    28fe:	e0 91 c3 15 	lds	r30, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    2902:	f0 91 c4 15 	lds	r31, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    2906:	82 8d       	ldd	r24, Z+26	; 0x1a
    2908:	89 17       	cp	r24, r25
    290a:	20 f4       	brcc	.+8      	; 0x2914 <xTaskRemoveFromEventList+0x156>
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	80 93 0d 15 	sts	0x150D, r24	; 0x80150d <xYieldPending>
    2912:	01 c0       	rjmp	.+2      	; 0x2916 <xTaskRemoveFromEventList+0x158>
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	df 91       	pop	r29
    2918:	cf 91       	pop	r28
    291a:	08 95       	ret

0000291c <vTaskRemoveFromUnorderedEventList>:
    291c:	cf 93       	push	r28
    291e:	df 93       	push	r29
    2920:	dc 01       	movw	r26, r24
    2922:	70 68       	ori	r23, 0x80	; 128
    2924:	4d 93       	st	X+, r20
    2926:	5d 93       	st	X+, r21
    2928:	6d 93       	st	X+, r22
    292a:	7c 93       	st	X, r23
    292c:	13 97       	sbiw	r26, 0x03	; 3
    292e:	18 96       	adiw	r26, 0x08	; 8
    2930:	ed 91       	ld	r30, X+
    2932:	fc 91       	ld	r31, X
    2934:	19 97       	sbiw	r26, 0x09	; 9
    2936:	1a 96       	adiw	r26, 0x0a	; 10
    2938:	4d 91       	ld	r20, X+
    293a:	5c 91       	ld	r21, X
    293c:	1b 97       	sbiw	r26, 0x0b	; 11
    293e:	14 96       	adiw	r26, 0x04	; 4
    2940:	8d 91       	ld	r24, X+
    2942:	9c 91       	ld	r25, X
    2944:	15 97       	sbiw	r26, 0x05	; 5
    2946:	16 96       	adiw	r26, 0x06	; 6
    2948:	2d 91       	ld	r18, X+
    294a:	3c 91       	ld	r19, X
    294c:	17 97       	sbiw	r26, 0x07	; 7
    294e:	ec 01       	movw	r28, r24
    2950:	3f 83       	std	Y+7, r19	; 0x07
    2952:	2e 83       	std	Y+6, r18	; 0x06
    2954:	16 96       	adiw	r26, 0x06	; 6
    2956:	8d 91       	ld	r24, X+
    2958:	9c 91       	ld	r25, X
    295a:	17 97       	sbiw	r26, 0x07	; 7
    295c:	14 96       	adiw	r26, 0x04	; 4
    295e:	2d 91       	ld	r18, X+
    2960:	3c 91       	ld	r19, X
    2962:	15 97       	sbiw	r26, 0x05	; 5
    2964:	ec 01       	movw	r28, r24
    2966:	3d 83       	std	Y+5, r19	; 0x05
    2968:	2c 83       	std	Y+4, r18	; 0x04
    296a:	ea 01       	movw	r28, r20
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	9a 81       	ldd	r25, Y+2	; 0x02
    2970:	a8 17       	cp	r26, r24
    2972:	b9 07       	cpc	r27, r25
    2974:	31 f4       	brne	.+12     	; 0x2982 <vTaskRemoveFromUnorderedEventList+0x66>
    2976:	16 96       	adiw	r26, 0x06	; 6
    2978:	8d 91       	ld	r24, X+
    297a:	9c 91       	ld	r25, X
    297c:	17 97       	sbiw	r26, 0x07	; 7
    297e:	9a 83       	std	Y+2, r25	; 0x02
    2980:	89 83       	std	Y+1, r24	; 0x01
    2982:	1b 96       	adiw	r26, 0x0b	; 11
    2984:	1c 92       	st	X, r1
    2986:	1e 92       	st	-X, r1
    2988:	1a 97       	sbiw	r26, 0x0a	; 10
    298a:	da 01       	movw	r26, r20
    298c:	8c 91       	ld	r24, X
    298e:	81 50       	subi	r24, 0x01	; 1
    2990:	8c 93       	st	X, r24
    2992:	a4 85       	ldd	r26, Z+12	; 0x0c
    2994:	b5 85       	ldd	r27, Z+13	; 0x0d
    2996:	c6 81       	ldd	r28, Z+6	; 0x06
    2998:	d7 81       	ldd	r29, Z+7	; 0x07
    299a:	80 85       	ldd	r24, Z+8	; 0x08
    299c:	91 85       	ldd	r25, Z+9	; 0x09
    299e:	9f 83       	std	Y+7, r25	; 0x07
    29a0:	8e 83       	std	Y+6, r24	; 0x06
    29a2:	c0 85       	ldd	r28, Z+8	; 0x08
    29a4:	d1 85       	ldd	r29, Z+9	; 0x09
    29a6:	86 81       	ldd	r24, Z+6	; 0x06
    29a8:	97 81       	ldd	r25, Z+7	; 0x07
    29aa:	9d 83       	std	Y+5, r25	; 0x05
    29ac:	8c 83       	std	Y+4, r24	; 0x04
    29ae:	11 96       	adiw	r26, 0x01	; 1
    29b0:	8d 91       	ld	r24, X+
    29b2:	9c 91       	ld	r25, X
    29b4:	12 97       	sbiw	r26, 0x02	; 2
    29b6:	9f 01       	movw	r18, r30
    29b8:	2e 5f       	subi	r18, 0xFE	; 254
    29ba:	3f 4f       	sbci	r19, 0xFF	; 255
    29bc:	82 17       	cp	r24, r18
    29be:	93 07       	cpc	r25, r19
    29c0:	31 f4       	brne	.+12     	; 0x29ce <vTaskRemoveFromUnorderedEventList+0xb2>
    29c2:	80 85       	ldd	r24, Z+8	; 0x08
    29c4:	91 85       	ldd	r25, Z+9	; 0x09
    29c6:	12 96       	adiw	r26, 0x02	; 2
    29c8:	9c 93       	st	X, r25
    29ca:	8e 93       	st	-X, r24
    29cc:	11 97       	sbiw	r26, 0x01	; 1
    29ce:	15 86       	std	Z+13, r1	; 0x0d
    29d0:	14 86       	std	Z+12, r1	; 0x0c
    29d2:	8c 91       	ld	r24, X
    29d4:	81 50       	subi	r24, 0x01	; 1
    29d6:	8c 93       	st	X, r24
    29d8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    29da:	80 91 13 15 	lds	r24, 0x1513	; 0x801513 <uxTopReadyPriority>
    29de:	8a 17       	cp	r24, r26
    29e0:	10 f4       	brcc	.+4      	; 0x29e6 <vTaskRemoveFromUnorderedEventList+0xca>
    29e2:	a0 93 13 15 	sts	0x1513, r26	; 0x801513 <uxTopReadyPriority>
    29e6:	8b e0       	ldi	r24, 0x0B	; 11
    29e8:	8a 9f       	mul	r24, r26
    29ea:	d0 01       	movw	r26, r0
    29ec:	11 24       	eor	r1, r1
    29ee:	ab 5a       	subi	r26, 0xAB	; 171
    29f0:	ba 4e       	sbci	r27, 0xEA	; 234
    29f2:	11 96       	adiw	r26, 0x01	; 1
    29f4:	0d 90       	ld	r0, X+
    29f6:	bc 91       	ld	r27, X
    29f8:	a0 2d       	mov	r26, r0
    29fa:	b7 83       	std	Z+7, r27	; 0x07
    29fc:	a6 83       	std	Z+6, r26	; 0x06
    29fe:	16 96       	adiw	r26, 0x06	; 6
    2a00:	4d 91       	ld	r20, X+
    2a02:	5c 91       	ld	r21, X
    2a04:	17 97       	sbiw	r26, 0x07	; 7
    2a06:	51 87       	std	Z+9, r21	; 0x09
    2a08:	40 87       	std	Z+8, r20	; 0x08
    2a0a:	16 96       	adiw	r26, 0x06	; 6
    2a0c:	cd 91       	ld	r28, X+
    2a0e:	dc 91       	ld	r29, X
    2a10:	17 97       	sbiw	r26, 0x07	; 7
    2a12:	3d 83       	std	Y+5, r19	; 0x05
    2a14:	2c 83       	std	Y+4, r18	; 0x04
    2a16:	17 96       	adiw	r26, 0x07	; 7
    2a18:	3c 93       	st	X, r19
    2a1a:	2e 93       	st	-X, r18
    2a1c:	16 97       	sbiw	r26, 0x06	; 6
    2a1e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a20:	8a 9f       	mul	r24, r26
    2a22:	d0 01       	movw	r26, r0
    2a24:	11 24       	eor	r1, r1
    2a26:	ab 5a       	subi	r26, 0xAB	; 171
    2a28:	ba 4e       	sbci	r27, 0xEA	; 234
    2a2a:	b5 87       	std	Z+13, r27	; 0x0d
    2a2c:	a4 87       	std	Z+12, r26	; 0x0c
    2a2e:	8c 91       	ld	r24, X
    2a30:	8f 5f       	subi	r24, 0xFF	; 255
    2a32:	8c 93       	st	X, r24
    2a34:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a36:	e0 91 c3 15 	lds	r30, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    2a3a:	f0 91 c4 15 	lds	r31, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    2a3e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a40:	89 17       	cp	r24, r25
    2a42:	18 f4       	brcc	.+6      	; 0x2a4a <vTaskRemoveFromUnorderedEventList+0x12e>
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	80 93 0d 15 	sts	0x150D, r24	; 0x80150d <xYieldPending>
    2a4a:	df 91       	pop	r29
    2a4c:	cf 91       	pop	r28
    2a4e:	08 95       	ret

00002a50 <vTaskSetTimeOutState>:
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	0f 92       	push	r0
    2a56:	20 91 0c 15 	lds	r18, 0x150C	; 0x80150c <xNumOfOverflows>
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	20 83       	st	Z, r18
    2a5e:	40 91 14 15 	lds	r20, 0x1514	; 0x801514 <xTickCount>
    2a62:	50 91 15 15 	lds	r21, 0x1515	; 0x801515 <xTickCount+0x1>
    2a66:	60 91 16 15 	lds	r22, 0x1516	; 0x801516 <xTickCount+0x2>
    2a6a:	70 91 17 15 	lds	r23, 0x1517	; 0x801517 <xTickCount+0x3>
    2a6e:	41 83       	std	Z+1, r20	; 0x01
    2a70:	52 83       	std	Z+2, r21	; 0x02
    2a72:	63 83       	std	Z+3, r22	; 0x03
    2a74:	74 83       	std	Z+4, r23	; 0x04
    2a76:	0f 90       	pop	r0
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	08 95       	ret

00002a7c <vTaskInternalSetTimeOutState>:
    2a7c:	20 91 0c 15 	lds	r18, 0x150C	; 0x80150c <xNumOfOverflows>
    2a80:	fc 01       	movw	r30, r24
    2a82:	20 83       	st	Z, r18
    2a84:	40 91 14 15 	lds	r20, 0x1514	; 0x801514 <xTickCount>
    2a88:	50 91 15 15 	lds	r21, 0x1515	; 0x801515 <xTickCount+0x1>
    2a8c:	60 91 16 15 	lds	r22, 0x1516	; 0x801516 <xTickCount+0x2>
    2a90:	70 91 17 15 	lds	r23, 0x1517	; 0x801517 <xTickCount+0x3>
    2a94:	41 83       	std	Z+1, r20	; 0x01
    2a96:	52 83       	std	Z+2, r21	; 0x02
    2a98:	63 83       	std	Z+3, r22	; 0x03
    2a9a:	74 83       	std	Z+4, r23	; 0x04
    2a9c:	08 95       	ret

00002a9e <xTaskCheckForTimeOut>:
    2a9e:	8f 92       	push	r8
    2aa0:	9f 92       	push	r9
    2aa2:	af 92       	push	r10
    2aa4:	bf 92       	push	r11
    2aa6:	cf 92       	push	r12
    2aa8:	df 92       	push	r13
    2aaa:	ef 92       	push	r14
    2aac:	ff 92       	push	r15
    2aae:	0f 93       	push	r16
    2ab0:	1f 93       	push	r17
    2ab2:	cf 93       	push	r28
    2ab4:	df 93       	push	r29
    2ab6:	fb 01       	movw	r30, r22
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	0f 92       	push	r0
    2abe:	c0 90 14 15 	lds	r12, 0x1514	; 0x801514 <xTickCount>
    2ac2:	d0 90 15 15 	lds	r13, 0x1515	; 0x801515 <xTickCount+0x1>
    2ac6:	e0 90 16 15 	lds	r14, 0x1516	; 0x801516 <xTickCount+0x2>
    2aca:	f0 90 17 15 	lds	r15, 0x1517	; 0x801517 <xTickCount+0x3>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	11 96       	adiw	r26, 0x01	; 1
    2ad2:	0d 91       	ld	r16, X+
    2ad4:	1d 91       	ld	r17, X+
    2ad6:	2d 91       	ld	r18, X+
    2ad8:	3c 91       	ld	r19, X
    2ada:	14 97       	sbiw	r26, 0x04	; 4
    2adc:	46 01       	movw	r8, r12
    2ade:	57 01       	movw	r10, r14
    2ae0:	80 1a       	sub	r8, r16
    2ae2:	91 0a       	sbc	r9, r17
    2ae4:	a2 0a       	sbc	r10, r18
    2ae6:	b3 0a       	sbc	r11, r19
    2ae8:	40 81       	ld	r20, Z
    2aea:	51 81       	ldd	r21, Z+1	; 0x01
    2aec:	62 81       	ldd	r22, Z+2	; 0x02
    2aee:	73 81       	ldd	r23, Z+3	; 0x03
    2af0:	4f 3f       	cpi	r20, 0xFF	; 255
    2af2:	bf ef       	ldi	r27, 0xFF	; 255
    2af4:	5b 07       	cpc	r21, r27
    2af6:	6b 07       	cpc	r22, r27
    2af8:	7b 07       	cpc	r23, r27
    2afa:	39 f1       	breq	.+78     	; 0x2b4a <xTaskCheckForTimeOut+0xac>
    2afc:	ec 01       	movw	r28, r24
    2afe:	b8 81       	ld	r27, Y
    2b00:	a0 91 0c 15 	lds	r26, 0x150C	; 0x80150c <xNumOfOverflows>
    2b04:	ba 17       	cp	r27, r26
    2b06:	59 f0       	breq	.+22     	; 0x2b1e <xTaskCheckForTimeOut+0x80>
    2b08:	c0 16       	cp	r12, r16
    2b0a:	d1 06       	cpc	r13, r17
    2b0c:	e2 06       	cpc	r14, r18
    2b0e:	f3 06       	cpc	r15, r19
    2b10:	30 f0       	brcs	.+12     	; 0x2b1e <xTaskCheckForTimeOut+0x80>
    2b12:	10 82       	st	Z, r1
    2b14:	11 82       	std	Z+1, r1	; 0x01
    2b16:	12 82       	std	Z+2, r1	; 0x02
    2b18:	13 82       	std	Z+3, r1	; 0x03
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	17 c0       	rjmp	.+46     	; 0x2b4c <xTaskCheckForTimeOut+0xae>
    2b1e:	84 16       	cp	r8, r20
    2b20:	95 06       	cpc	r9, r21
    2b22:	a6 06       	cpc	r10, r22
    2b24:	b7 06       	cpc	r11, r23
    2b26:	58 f4       	brcc	.+22     	; 0x2b3e <xTaskCheckForTimeOut+0xa0>
    2b28:	48 19       	sub	r20, r8
    2b2a:	59 09       	sbc	r21, r9
    2b2c:	6a 09       	sbc	r22, r10
    2b2e:	7b 09       	sbc	r23, r11
    2b30:	40 83       	st	Z, r20
    2b32:	51 83       	std	Z+1, r21	; 0x01
    2b34:	62 83       	std	Z+2, r22	; 0x02
    2b36:	73 83       	std	Z+3, r23	; 0x03
    2b38:	a1 df       	rcall	.-190    	; 0x2a7c <vTaskInternalSetTimeOutState>
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	07 c0       	rjmp	.+14     	; 0x2b4c <xTaskCheckForTimeOut+0xae>
    2b3e:	10 82       	st	Z, r1
    2b40:	11 82       	std	Z+1, r1	; 0x01
    2b42:	12 82       	std	Z+2, r1	; 0x02
    2b44:	13 82       	std	Z+3, r1	; 0x03
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	01 c0       	rjmp	.+2      	; 0x2b4c <xTaskCheckForTimeOut+0xae>
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	0f 90       	pop	r0
    2b4e:	0f be       	out	0x3f, r0	; 63
    2b50:	df 91       	pop	r29
    2b52:	cf 91       	pop	r28
    2b54:	1f 91       	pop	r17
    2b56:	0f 91       	pop	r16
    2b58:	ff 90       	pop	r15
    2b5a:	ef 90       	pop	r14
    2b5c:	df 90       	pop	r13
    2b5e:	cf 90       	pop	r12
    2b60:	bf 90       	pop	r11
    2b62:	af 90       	pop	r10
    2b64:	9f 90       	pop	r9
    2b66:	8f 90       	pop	r8
    2b68:	08 95       	ret

00002b6a <vTaskMissedYield>:
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	80 93 0d 15 	sts	0x150D, r24	; 0x80150d <xYieldPending>
    2b70:	08 95       	ret

00002b72 <xTaskGetCurrentTaskHandle>:
    2b72:	80 91 c3 15 	lds	r24, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    2b76:	90 91 c4 15 	lds	r25, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    2b7a:	08 95       	ret

00002b7c <xTaskGetSchedulerState>:
    2b7c:	80 91 12 15 	lds	r24, 0x1512	; 0x801512 <xSchedulerRunning>
    2b80:	88 23       	and	r24, r24
    2b82:	31 f0       	breq	.+12     	; 0x2b90 <xTaskGetSchedulerState+0x14>
    2b84:	80 91 04 15 	lds	r24, 0x1504	; 0x801504 <uxSchedulerSuspended>
    2b88:	81 11       	cpse	r24, r1
    2b8a:	04 c0       	rjmp	.+8      	; 0x2b94 <xTaskGetSchedulerState+0x18>
    2b8c:	82 e0       	ldi	r24, 0x02	; 2
    2b8e:	08 95       	ret
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	08 95       	ret
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	08 95       	ret

00002b98 <xTaskPriorityDisinherit>:
    2b98:	0f 93       	push	r16
    2b9a:	1f 93       	push	r17
    2b9c:	cf 93       	push	r28
    2b9e:	df 93       	push	r29
    2ba0:	fc 01       	movw	r30, r24
    2ba2:	89 2b       	or	r24, r25
    2ba4:	09 f4       	brne	.+2      	; 0x2ba8 <xTaskPriorityDisinherit+0x10>
    2ba6:	49 c0       	rjmp	.+146    	; 0x2c3a <xTaskPriorityDisinherit+0xa2>
    2ba8:	86 a5       	ldd	r24, Z+46	; 0x2e
    2baa:	81 50       	subi	r24, 0x01	; 1
    2bac:	86 a7       	std	Z+46, r24	; 0x2e
    2bae:	22 8d       	ldd	r18, Z+26	; 0x1a
    2bb0:	95 a5       	ldd	r25, Z+45	; 0x2d
    2bb2:	29 17       	cp	r18, r25
    2bb4:	09 f4       	brne	.+2      	; 0x2bb8 <xTaskPriorityDisinherit+0x20>
    2bb6:	43 c0       	rjmp	.+134    	; 0x2c3e <xTaskPriorityDisinherit+0xa6>
    2bb8:	81 11       	cpse	r24, r1
    2bba:	43 c0       	rjmp	.+134    	; 0x2c42 <xTaskPriorityDisinherit+0xaa>
    2bbc:	ef 01       	movw	r28, r30
    2bbe:	8f 01       	movw	r16, r30
    2bc0:	0e 5f       	subi	r16, 0xFE	; 254
    2bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc4:	c8 01       	movw	r24, r16
    2bc6:	0e 94 55 06 	call	0xcaa	; 0xcaa <uxListRemove>
    2bca:	ed a5       	ldd	r30, Y+45	; 0x2d
    2bcc:	ea 8f       	std	Y+26, r30	; 0x1a
    2bce:	8a e0       	ldi	r24, 0x0A	; 10
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	a0 e0       	ldi	r26, 0x00	; 0
    2bd4:	b0 e0       	ldi	r27, 0x00	; 0
    2bd6:	8e 1b       	sub	r24, r30
    2bd8:	91 09       	sbc	r25, r1
    2bda:	a1 09       	sbc	r26, r1
    2bdc:	b1 09       	sbc	r27, r1
    2bde:	8e 87       	std	Y+14, r24	; 0x0e
    2be0:	9f 87       	std	Y+15, r25	; 0x0f
    2be2:	a8 8b       	std	Y+16, r26	; 0x10
    2be4:	b9 8b       	std	Y+17, r27	; 0x11
    2be6:	80 91 13 15 	lds	r24, 0x1513	; 0x801513 <uxTopReadyPriority>
    2bea:	8e 17       	cp	r24, r30
    2bec:	10 f4       	brcc	.+4      	; 0x2bf2 <xTaskPriorityDisinherit+0x5a>
    2bee:	e0 93 13 15 	sts	0x1513, r30	; 0x801513 <uxTopReadyPriority>
    2bf2:	8b e0       	ldi	r24, 0x0B	; 11
    2bf4:	8e 9f       	mul	r24, r30
    2bf6:	f0 01       	movw	r30, r0
    2bf8:	11 24       	eor	r1, r1
    2bfa:	eb 5a       	subi	r30, 0xAB	; 171
    2bfc:	fa 4e       	sbci	r31, 0xEA	; 234
    2bfe:	01 80       	ldd	r0, Z+1	; 0x01
    2c00:	f2 81       	ldd	r31, Z+2	; 0x02
    2c02:	e0 2d       	mov	r30, r0
    2c04:	ff 83       	std	Y+7, r31	; 0x07
    2c06:	ee 83       	std	Y+6, r30	; 0x06
    2c08:	26 81       	ldd	r18, Z+6	; 0x06
    2c0a:	37 81       	ldd	r19, Z+7	; 0x07
    2c0c:	39 87       	std	Y+9, r19	; 0x09
    2c0e:	28 87       	std	Y+8, r18	; 0x08
    2c10:	a6 81       	ldd	r26, Z+6	; 0x06
    2c12:	b7 81       	ldd	r27, Z+7	; 0x07
    2c14:	15 96       	adiw	r26, 0x05	; 5
    2c16:	1c 93       	st	X, r17
    2c18:	0e 93       	st	-X, r16
    2c1a:	14 97       	sbiw	r26, 0x04	; 4
    2c1c:	17 83       	std	Z+7, r17	; 0x07
    2c1e:	06 83       	std	Z+6, r16	; 0x06
    2c20:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2c22:	8e 9f       	mul	r24, r30
    2c24:	f0 01       	movw	r30, r0
    2c26:	11 24       	eor	r1, r1
    2c28:	eb 5a       	subi	r30, 0xAB	; 171
    2c2a:	fa 4e       	sbci	r31, 0xEA	; 234
    2c2c:	fd 87       	std	Y+13, r31	; 0x0d
    2c2e:	ec 87       	std	Y+12, r30	; 0x0c
    2c30:	80 81       	ld	r24, Z
    2c32:	8f 5f       	subi	r24, 0xFF	; 255
    2c34:	80 83       	st	Z, r24
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	05 c0       	rjmp	.+10     	; 0x2c44 <xTaskPriorityDisinherit+0xac>
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
    2c3c:	03 c0       	rjmp	.+6      	; 0x2c44 <xTaskPriorityDisinherit+0xac>
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	01 c0       	rjmp	.+2      	; 0x2c44 <xTaskPriorityDisinherit+0xac>
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	df 91       	pop	r29
    2c46:	cf 91       	pop	r28
    2c48:	1f 91       	pop	r17
    2c4a:	0f 91       	pop	r16
    2c4c:	08 95       	ret

00002c4e <uxTaskResetEventItemValue>:
    2c4e:	cf 92       	push	r12
    2c50:	df 92       	push	r13
    2c52:	ef 92       	push	r14
    2c54:	ff 92       	push	r15
    2c56:	e0 91 c3 15 	lds	r30, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    2c5a:	f0 91 c4 15 	lds	r31, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    2c5e:	66 85       	ldd	r22, Z+14	; 0x0e
    2c60:	77 85       	ldd	r23, Z+15	; 0x0f
    2c62:	80 89       	ldd	r24, Z+16	; 0x10
    2c64:	91 89       	ldd	r25, Z+17	; 0x11
    2c66:	e0 91 c3 15 	lds	r30, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    2c6a:	f0 91 c4 15 	lds	r31, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    2c6e:	a0 91 c3 15 	lds	r26, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    2c72:	b0 91 c4 15 	lds	r27, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    2c76:	5a 96       	adiw	r26, 0x1a	; 26
    2c78:	2c 91       	ld	r18, X
    2c7a:	0f 2e       	mov	r0, r31
    2c7c:	fa e0       	ldi	r31, 0x0A	; 10
    2c7e:	cf 2e       	mov	r12, r31
    2c80:	d1 2c       	mov	r13, r1
    2c82:	e1 2c       	mov	r14, r1
    2c84:	f1 2c       	mov	r15, r1
    2c86:	f0 2d       	mov	r31, r0
    2c88:	c2 1a       	sub	r12, r18
    2c8a:	d1 08       	sbc	r13, r1
    2c8c:	e1 08       	sbc	r14, r1
    2c8e:	f1 08       	sbc	r15, r1
    2c90:	c6 86       	std	Z+14, r12	; 0x0e
    2c92:	d7 86       	std	Z+15, r13	; 0x0f
    2c94:	e0 8a       	std	Z+16, r14	; 0x10
    2c96:	f1 8a       	std	Z+17, r15	; 0x11
    2c98:	ff 90       	pop	r15
    2c9a:	ef 90       	pop	r14
    2c9c:	df 90       	pop	r13
    2c9e:	cf 90       	pop	r12
    2ca0:	08 95       	ret

00002ca2 <xTaskGenericNotifyWait>:
    2ca2:	4f 92       	push	r4
    2ca4:	5f 92       	push	r5
    2ca6:	6f 92       	push	r6
    2ca8:	7f 92       	push	r7
    2caa:	af 92       	push	r10
    2cac:	bf 92       	push	r11
    2cae:	cf 92       	push	r12
    2cb0:	df 92       	push	r13
    2cb2:	ef 92       	push	r14
    2cb4:	ff 92       	push	r15
    2cb6:	0f 93       	push	r16
    2cb8:	1f 93       	push	r17
    2cba:	cf 93       	push	r28
    2cbc:	df 93       	push	r29
    2cbe:	28 01       	movw	r4, r16
    2cc0:	39 01       	movw	r6, r18
    2cc2:	0f b6       	in	r0, 0x3f	; 63
    2cc4:	f8 94       	cli
    2cc6:	0f 92       	push	r0
    2cc8:	e0 91 c3 15 	lds	r30, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    2ccc:	f0 91 c4 15 	lds	r31, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    2cd0:	c8 2f       	mov	r28, r24
    2cd2:	d0 e0       	ldi	r29, 0x00	; 0
    2cd4:	ec 0f       	add	r30, r28
    2cd6:	fd 1f       	adc	r31, r29
    2cd8:	83 a9       	ldd	r24, Z+51	; 0x33
    2cda:	82 30       	cpi	r24, 0x02	; 2
    2cdc:	71 f1       	breq	.+92     	; 0x2d3a <xTaskGenericNotifyWait+0x98>
    2cde:	e0 91 c3 15 	lds	r30, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    2ce2:	f0 91 c4 15 	lds	r31, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    2ce6:	ce 01       	movw	r24, r28
    2ce8:	88 0f       	add	r24, r24
    2cea:	99 1f       	adc	r25, r25
    2cec:	88 0f       	add	r24, r24
    2cee:	99 1f       	adc	r25, r25
    2cf0:	e8 0f       	add	r30, r24
    2cf2:	f9 1f       	adc	r31, r25
    2cf4:	87 a5       	ldd	r24, Z+47	; 0x2f
    2cf6:	90 a9       	ldd	r25, Z+48	; 0x30
    2cf8:	a1 a9       	ldd	r26, Z+49	; 0x31
    2cfa:	b2 a9       	ldd	r27, Z+50	; 0x32
    2cfc:	40 95       	com	r20
    2cfe:	50 95       	com	r21
    2d00:	60 95       	com	r22
    2d02:	70 95       	com	r23
    2d04:	48 23       	and	r20, r24
    2d06:	59 23       	and	r21, r25
    2d08:	6a 23       	and	r22, r26
    2d0a:	7b 23       	and	r23, r27
    2d0c:	47 a7       	std	Z+47, r20	; 0x2f
    2d0e:	50 ab       	std	Z+48, r21	; 0x30
    2d10:	61 ab       	std	Z+49, r22	; 0x31
    2d12:	72 ab       	std	Z+50, r23	; 0x32
    2d14:	e0 91 c3 15 	lds	r30, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    2d18:	f0 91 c4 15 	lds	r31, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    2d1c:	ec 0f       	add	r30, r28
    2d1e:	fd 1f       	adc	r31, r29
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	83 ab       	std	Z+51, r24	; 0x33
    2d24:	a1 14       	cp	r10, r1
    2d26:	b1 04       	cpc	r11, r1
    2d28:	c1 04       	cpc	r12, r1
    2d2a:	d1 04       	cpc	r13, r1
    2d2c:	31 f0       	breq	.+12     	; 0x2d3a <xTaskGenericNotifyWait+0x98>
    2d2e:	41 e0       	ldi	r20, 0x01	; 1
    2d30:	c6 01       	movw	r24, r12
    2d32:	b5 01       	movw	r22, r10
    2d34:	7a d8       	rcall	.-3852   	; 0x1e2a <prvAddCurrentTaskToDelayedList>
    2d36:	0e 94 d1 06 	call	0xda2	; 0xda2 <vPortYield>
    2d3a:	0f 90       	pop	r0
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	0f b6       	in	r0, 0x3f	; 63
    2d40:	f8 94       	cli
    2d42:	0f 92       	push	r0
    2d44:	e1 14       	cp	r14, r1
    2d46:	f1 04       	cpc	r15, r1
    2d48:	a1 f0       	breq	.+40     	; 0x2d72 <xTaskGenericNotifyWait+0xd0>
    2d4a:	e0 91 c3 15 	lds	r30, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    2d4e:	f0 91 c4 15 	lds	r31, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    2d52:	ce 01       	movw	r24, r28
    2d54:	88 0f       	add	r24, r24
    2d56:	99 1f       	adc	r25, r25
    2d58:	88 0f       	add	r24, r24
    2d5a:	99 1f       	adc	r25, r25
    2d5c:	e8 0f       	add	r30, r24
    2d5e:	f9 1f       	adc	r31, r25
    2d60:	87 a5       	ldd	r24, Z+47	; 0x2f
    2d62:	90 a9       	ldd	r25, Z+48	; 0x30
    2d64:	a1 a9       	ldd	r26, Z+49	; 0x31
    2d66:	b2 a9       	ldd	r27, Z+50	; 0x32
    2d68:	f7 01       	movw	r30, r14
    2d6a:	80 83       	st	Z, r24
    2d6c:	91 83       	std	Z+1, r25	; 0x01
    2d6e:	a2 83       	std	Z+2, r26	; 0x02
    2d70:	b3 83       	std	Z+3, r27	; 0x03
    2d72:	e0 91 c3 15 	lds	r30, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    2d76:	f0 91 c4 15 	lds	r31, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    2d7a:	ec 0f       	add	r30, r28
    2d7c:	fd 1f       	adc	r31, r29
    2d7e:	83 a9       	ldd	r24, Z+51	; 0x33
    2d80:	82 30       	cpi	r24, 0x02	; 2
    2d82:	e9 f4       	brne	.+58     	; 0x2dbe <xTaskGenericNotifyWait+0x11c>
    2d84:	e0 91 c3 15 	lds	r30, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    2d88:	f0 91 c4 15 	lds	r31, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    2d8c:	ce 01       	movw	r24, r28
    2d8e:	88 0f       	add	r24, r24
    2d90:	99 1f       	adc	r25, r25
    2d92:	88 0f       	add	r24, r24
    2d94:	99 1f       	adc	r25, r25
    2d96:	e8 0f       	add	r30, r24
    2d98:	f9 1f       	adc	r31, r25
    2d9a:	87 a5       	ldd	r24, Z+47	; 0x2f
    2d9c:	90 a9       	ldd	r25, Z+48	; 0x30
    2d9e:	a1 a9       	ldd	r26, Z+49	; 0x31
    2da0:	b2 a9       	ldd	r27, Z+50	; 0x32
    2da2:	40 94       	com	r4
    2da4:	50 94       	com	r5
    2da6:	60 94       	com	r6
    2da8:	70 94       	com	r7
    2daa:	48 22       	and	r4, r24
    2dac:	59 22       	and	r5, r25
    2dae:	6a 22       	and	r6, r26
    2db0:	7b 22       	and	r7, r27
    2db2:	47 a6       	std	Z+47, r4	; 0x2f
    2db4:	50 aa       	std	Z+48, r5	; 0x30
    2db6:	61 aa       	std	Z+49, r6	; 0x31
    2db8:	72 aa       	std	Z+50, r7	; 0x32
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	01 c0       	rjmp	.+2      	; 0x2dc0 <xTaskGenericNotifyWait+0x11e>
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	20 91 c3 15 	lds	r18, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    2dc4:	30 91 c4 15 	lds	r19, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    2dc8:	c2 0f       	add	r28, r18
    2dca:	d3 1f       	adc	r29, r19
    2dcc:	1b aa       	std	Y+51, r1	; 0x33
    2dce:	0f 90       	pop	r0
    2dd0:	0f be       	out	0x3f, r0	; 63
    2dd2:	df 91       	pop	r29
    2dd4:	cf 91       	pop	r28
    2dd6:	1f 91       	pop	r17
    2dd8:	0f 91       	pop	r16
    2dda:	ff 90       	pop	r15
    2ddc:	ef 90       	pop	r14
    2dde:	df 90       	pop	r13
    2de0:	cf 90       	pop	r12
    2de2:	bf 90       	pop	r11
    2de4:	af 90       	pop	r10
    2de6:	7f 90       	pop	r7
    2de8:	6f 90       	pop	r6
    2dea:	5f 90       	pop	r5
    2dec:	4f 90       	pop	r4
    2dee:	08 95       	ret

00002df0 <xTaskGenericNotify>:
    2df0:	8f 92       	push	r8
    2df2:	9f 92       	push	r9
    2df4:	af 92       	push	r10
    2df6:	bf 92       	push	r11
    2df8:	ef 92       	push	r14
    2dfa:	ff 92       	push	r15
    2dfc:	0f 93       	push	r16
    2dfe:	cf 93       	push	r28
    2e00:	df 93       	push	r29
    2e02:	dc 01       	movw	r26, r24
    2e04:	0f b6       	in	r0, 0x3f	; 63
    2e06:	f8 94       	cli
    2e08:	0f 92       	push	r0
    2e0a:	e1 14       	cp	r14, r1
    2e0c:	f1 04       	cpc	r15, r1
    2e0e:	89 f0       	breq	.+34     	; 0x2e32 <xTaskGenericNotify+0x42>
    2e10:	e6 2f       	mov	r30, r22
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	ee 0f       	add	r30, r30
    2e16:	ff 1f       	adc	r31, r31
    2e18:	ee 0f       	add	r30, r30
    2e1a:	ff 1f       	adc	r31, r31
    2e1c:	e8 0f       	add	r30, r24
    2e1e:	f9 1f       	adc	r31, r25
    2e20:	87 a4       	ldd	r8, Z+47	; 0x2f
    2e22:	90 a8       	ldd	r9, Z+48	; 0x30
    2e24:	a1 a8       	ldd	r10, Z+49	; 0x31
    2e26:	b2 a8       	ldd	r11, Z+50	; 0x32
    2e28:	f7 01       	movw	r30, r14
    2e2a:	80 82       	st	Z, r8
    2e2c:	91 82       	std	Z+1, r9	; 0x01
    2e2e:	a2 82       	std	Z+2, r10	; 0x02
    2e30:	b3 82       	std	Z+3, r11	; 0x03
    2e32:	70 e0       	ldi	r23, 0x00	; 0
    2e34:	fd 01       	movw	r30, r26
    2e36:	e6 0f       	add	r30, r22
    2e38:	f7 1f       	adc	r31, r23
    2e3a:	83 a9       	ldd	r24, Z+51	; 0x33
    2e3c:	92 e0       	ldi	r25, 0x02	; 2
    2e3e:	93 ab       	std	Z+51, r25	; 0x33
    2e40:	02 30       	cpi	r16, 0x02	; 2
    2e42:	01 f1       	breq	.+64     	; 0x2e84 <xTaskGenericNotify+0x94>
    2e44:	18 f4       	brcc	.+6      	; 0x2e4c <xTaskGenericNotify+0x5c>
    2e46:	01 30       	cpi	r16, 0x01	; 1
    2e48:	31 f0       	breq	.+12     	; 0x2e56 <xTaskGenericNotify+0x66>
    2e4a:	4d c0       	rjmp	.+154    	; 0x2ee6 <xTaskGenericNotify+0xf6>
    2e4c:	03 30       	cpi	r16, 0x03	; 3
    2e4e:	79 f1       	breq	.+94     	; 0x2eae <xTaskGenericNotify+0xbe>
    2e50:	04 30       	cpi	r16, 0x04	; 4
    2e52:	d1 f1       	breq	.+116    	; 0x2ec8 <xTaskGenericNotify+0xd8>
    2e54:	48 c0       	rjmp	.+144    	; 0x2ee6 <xTaskGenericNotify+0xf6>
    2e56:	66 0f       	add	r22, r22
    2e58:	77 1f       	adc	r23, r23
    2e5a:	66 0f       	add	r22, r22
    2e5c:	77 1f       	adc	r23, r23
    2e5e:	fd 01       	movw	r30, r26
    2e60:	e6 0f       	add	r30, r22
    2e62:	f7 1f       	adc	r31, r23
    2e64:	87 a4       	ldd	r8, Z+47	; 0x2f
    2e66:	90 a8       	ldd	r9, Z+48	; 0x30
    2e68:	a1 a8       	ldd	r10, Z+49	; 0x31
    2e6a:	b2 a8       	ldd	r11, Z+50	; 0x32
    2e6c:	ba 01       	movw	r22, r20
    2e6e:	a9 01       	movw	r20, r18
    2e70:	48 29       	or	r20, r8
    2e72:	59 29       	or	r21, r9
    2e74:	6a 29       	or	r22, r10
    2e76:	7b 29       	or	r23, r11
    2e78:	47 a7       	std	Z+47, r20	; 0x2f
    2e7a:	50 ab       	std	Z+48, r21	; 0x30
    2e7c:	61 ab       	std	Z+49, r22	; 0x31
    2e7e:	72 ab       	std	Z+50, r23	; 0x32
    2e80:	01 e0       	ldi	r16, 0x01	; 1
    2e82:	34 c0       	rjmp	.+104    	; 0x2eec <xTaskGenericNotify+0xfc>
    2e84:	66 0f       	add	r22, r22
    2e86:	77 1f       	adc	r23, r23
    2e88:	66 0f       	add	r22, r22
    2e8a:	77 1f       	adc	r23, r23
    2e8c:	fd 01       	movw	r30, r26
    2e8e:	e6 0f       	add	r30, r22
    2e90:	f7 1f       	adc	r31, r23
    2e92:	47 a5       	ldd	r20, Z+47	; 0x2f
    2e94:	50 a9       	ldd	r21, Z+48	; 0x30
    2e96:	61 a9       	ldd	r22, Z+49	; 0x31
    2e98:	72 a9       	ldd	r23, Z+50	; 0x32
    2e9a:	4f 5f       	subi	r20, 0xFF	; 255
    2e9c:	5f 4f       	sbci	r21, 0xFF	; 255
    2e9e:	6f 4f       	sbci	r22, 0xFF	; 255
    2ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ea2:	47 a7       	std	Z+47, r20	; 0x2f
    2ea4:	50 ab       	std	Z+48, r21	; 0x30
    2ea6:	61 ab       	std	Z+49, r22	; 0x31
    2ea8:	72 ab       	std	Z+50, r23	; 0x32
    2eaa:	01 e0       	ldi	r16, 0x01	; 1
    2eac:	1f c0       	rjmp	.+62     	; 0x2eec <xTaskGenericNotify+0xfc>
    2eae:	66 0f       	add	r22, r22
    2eb0:	77 1f       	adc	r23, r23
    2eb2:	66 0f       	add	r22, r22
    2eb4:	77 1f       	adc	r23, r23
    2eb6:	fd 01       	movw	r30, r26
    2eb8:	e6 0f       	add	r30, r22
    2eba:	f7 1f       	adc	r31, r23
    2ebc:	27 a7       	std	Z+47, r18	; 0x2f
    2ebe:	30 ab       	std	Z+48, r19	; 0x30
    2ec0:	41 ab       	std	Z+49, r20	; 0x31
    2ec2:	52 ab       	std	Z+50, r21	; 0x32
    2ec4:	01 e0       	ldi	r16, 0x01	; 1
    2ec6:	12 c0       	rjmp	.+36     	; 0x2eec <xTaskGenericNotify+0xfc>
    2ec8:	82 30       	cpi	r24, 0x02	; 2
    2eca:	79 f0       	breq	.+30     	; 0x2eea <xTaskGenericNotify+0xfa>
    2ecc:	66 0f       	add	r22, r22
    2ece:	77 1f       	adc	r23, r23
    2ed0:	66 0f       	add	r22, r22
    2ed2:	77 1f       	adc	r23, r23
    2ed4:	fd 01       	movw	r30, r26
    2ed6:	e6 0f       	add	r30, r22
    2ed8:	f7 1f       	adc	r31, r23
    2eda:	27 a7       	std	Z+47, r18	; 0x2f
    2edc:	30 ab       	std	Z+48, r19	; 0x30
    2ede:	41 ab       	std	Z+49, r20	; 0x31
    2ee0:	52 ab       	std	Z+50, r21	; 0x32
    2ee2:	01 e0       	ldi	r16, 0x01	; 1
    2ee4:	03 c0       	rjmp	.+6      	; 0x2eec <xTaskGenericNotify+0xfc>
    2ee6:	01 e0       	ldi	r16, 0x01	; 1
    2ee8:	01 c0       	rjmp	.+2      	; 0x2eec <xTaskGenericNotify+0xfc>
    2eea:	00 e0       	ldi	r16, 0x00	; 0
    2eec:	81 30       	cpi	r24, 0x01	; 1
    2eee:	09 f0       	breq	.+2      	; 0x2ef2 <xTaskGenericNotify+0x102>
    2ef0:	69 c0       	rjmp	.+210    	; 0x2fc4 <xTaskGenericNotify+0x1d4>
    2ef2:	1c 96       	adiw	r26, 0x0c	; 12
    2ef4:	ed 91       	ld	r30, X+
    2ef6:	fc 91       	ld	r31, X
    2ef8:	1d 97       	sbiw	r26, 0x0d	; 13
    2efa:	16 96       	adiw	r26, 0x06	; 6
    2efc:	cd 91       	ld	r28, X+
    2efe:	dc 91       	ld	r29, X
    2f00:	17 97       	sbiw	r26, 0x07	; 7
    2f02:	18 96       	adiw	r26, 0x08	; 8
    2f04:	8d 91       	ld	r24, X+
    2f06:	9c 91       	ld	r25, X
    2f08:	19 97       	sbiw	r26, 0x09	; 9
    2f0a:	9f 83       	std	Y+7, r25	; 0x07
    2f0c:	8e 83       	std	Y+6, r24	; 0x06
    2f0e:	18 96       	adiw	r26, 0x08	; 8
    2f10:	cd 91       	ld	r28, X+
    2f12:	dc 91       	ld	r29, X
    2f14:	19 97       	sbiw	r26, 0x09	; 9
    2f16:	16 96       	adiw	r26, 0x06	; 6
    2f18:	8d 91       	ld	r24, X+
    2f1a:	9c 91       	ld	r25, X
    2f1c:	17 97       	sbiw	r26, 0x07	; 7
    2f1e:	9d 83       	std	Y+5, r25	; 0x05
    2f20:	8c 83       	std	Y+4, r24	; 0x04
    2f22:	81 81       	ldd	r24, Z+1	; 0x01
    2f24:	92 81       	ldd	r25, Z+2	; 0x02
    2f26:	9d 01       	movw	r18, r26
    2f28:	2e 5f       	subi	r18, 0xFE	; 254
    2f2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f2c:	82 17       	cp	r24, r18
    2f2e:	93 07       	cpc	r25, r19
    2f30:	31 f4       	brne	.+12     	; 0x2f3e <xTaskGenericNotify+0x14e>
    2f32:	18 96       	adiw	r26, 0x08	; 8
    2f34:	8d 91       	ld	r24, X+
    2f36:	9c 91       	ld	r25, X
    2f38:	19 97       	sbiw	r26, 0x09	; 9
    2f3a:	92 83       	std	Z+2, r25	; 0x02
    2f3c:	81 83       	std	Z+1, r24	; 0x01
    2f3e:	1d 96       	adiw	r26, 0x0d	; 13
    2f40:	1c 92       	st	X, r1
    2f42:	1e 92       	st	-X, r1
    2f44:	1c 97       	sbiw	r26, 0x0c	; 12
    2f46:	80 81       	ld	r24, Z
    2f48:	81 50       	subi	r24, 0x01	; 1
    2f4a:	80 83       	st	Z, r24
    2f4c:	5a 96       	adiw	r26, 0x1a	; 26
    2f4e:	ec 91       	ld	r30, X
    2f50:	5a 97       	sbiw	r26, 0x1a	; 26
    2f52:	80 91 13 15 	lds	r24, 0x1513	; 0x801513 <uxTopReadyPriority>
    2f56:	8e 17       	cp	r24, r30
    2f58:	10 f4       	brcc	.+4      	; 0x2f5e <xTaskGenericNotify+0x16e>
    2f5a:	e0 93 13 15 	sts	0x1513, r30	; 0x801513 <uxTopReadyPriority>
    2f5e:	8b e0       	ldi	r24, 0x0B	; 11
    2f60:	8e 9f       	mul	r24, r30
    2f62:	f0 01       	movw	r30, r0
    2f64:	11 24       	eor	r1, r1
    2f66:	eb 5a       	subi	r30, 0xAB	; 171
    2f68:	fa 4e       	sbci	r31, 0xEA	; 234
    2f6a:	01 80       	ldd	r0, Z+1	; 0x01
    2f6c:	f2 81       	ldd	r31, Z+2	; 0x02
    2f6e:	e0 2d       	mov	r30, r0
    2f70:	17 96       	adiw	r26, 0x07	; 7
    2f72:	fc 93       	st	X, r31
    2f74:	ee 93       	st	-X, r30
    2f76:	16 97       	sbiw	r26, 0x06	; 6
    2f78:	46 81       	ldd	r20, Z+6	; 0x06
    2f7a:	57 81       	ldd	r21, Z+7	; 0x07
    2f7c:	19 96       	adiw	r26, 0x09	; 9
    2f7e:	5c 93       	st	X, r21
    2f80:	4e 93       	st	-X, r20
    2f82:	18 97       	sbiw	r26, 0x08	; 8
    2f84:	c6 81       	ldd	r28, Z+6	; 0x06
    2f86:	d7 81       	ldd	r29, Z+7	; 0x07
    2f88:	3d 83       	std	Y+5, r19	; 0x05
    2f8a:	2c 83       	std	Y+4, r18	; 0x04
    2f8c:	37 83       	std	Z+7, r19	; 0x07
    2f8e:	26 83       	std	Z+6, r18	; 0x06
    2f90:	5a 96       	adiw	r26, 0x1a	; 26
    2f92:	ec 91       	ld	r30, X
    2f94:	5a 97       	sbiw	r26, 0x1a	; 26
    2f96:	8e 9f       	mul	r24, r30
    2f98:	f0 01       	movw	r30, r0
    2f9a:	11 24       	eor	r1, r1
    2f9c:	eb 5a       	subi	r30, 0xAB	; 171
    2f9e:	fa 4e       	sbci	r31, 0xEA	; 234
    2fa0:	1d 96       	adiw	r26, 0x0d	; 13
    2fa2:	fc 93       	st	X, r31
    2fa4:	ee 93       	st	-X, r30
    2fa6:	1c 97       	sbiw	r26, 0x0c	; 12
    2fa8:	80 81       	ld	r24, Z
    2faa:	8f 5f       	subi	r24, 0xFF	; 255
    2fac:	80 83       	st	Z, r24
    2fae:	5a 96       	adiw	r26, 0x1a	; 26
    2fb0:	9c 91       	ld	r25, X
    2fb2:	e0 91 c3 15 	lds	r30, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    2fb6:	f0 91 c4 15 	lds	r31, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    2fba:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fbc:	89 17       	cp	r24, r25
    2fbe:	10 f4       	brcc	.+4      	; 0x2fc4 <xTaskGenericNotify+0x1d4>
    2fc0:	0e 94 d1 06 	call	0xda2	; 0xda2 <vPortYield>
    2fc4:	0f 90       	pop	r0
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	80 2f       	mov	r24, r16
    2fca:	df 91       	pop	r29
    2fcc:	cf 91       	pop	r28
    2fce:	0f 91       	pop	r16
    2fd0:	ff 90       	pop	r15
    2fd2:	ef 90       	pop	r14
    2fd4:	bf 90       	pop	r11
    2fd6:	af 90       	pop	r10
    2fd8:	9f 90       	pop	r9
    2fda:	8f 90       	pop	r8
    2fdc:	08 95       	ret

00002fde <xTaskGenericNotifyFromISR>:
    2fde:	8f 92       	push	r8
    2fe0:	9f 92       	push	r9
    2fe2:	af 92       	push	r10
    2fe4:	bf 92       	push	r11
    2fe6:	cf 92       	push	r12
    2fe8:	df 92       	push	r13
    2fea:	ef 92       	push	r14
    2fec:	ff 92       	push	r15
    2fee:	0f 93       	push	r16
    2ff0:	cf 93       	push	r28
    2ff2:	df 93       	push	r29
    2ff4:	dc 01       	movw	r26, r24
    2ff6:	e1 14       	cp	r14, r1
    2ff8:	f1 04       	cpc	r15, r1
    2ffa:	89 f0       	breq	.+34     	; 0x301e <xTaskGenericNotifyFromISR+0x40>
    2ffc:	e6 2f       	mov	r30, r22
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	ee 0f       	add	r30, r30
    3002:	ff 1f       	adc	r31, r31
    3004:	ee 0f       	add	r30, r30
    3006:	ff 1f       	adc	r31, r31
    3008:	e8 0f       	add	r30, r24
    300a:	f9 1f       	adc	r31, r25
    300c:	87 a4       	ldd	r8, Z+47	; 0x2f
    300e:	90 a8       	ldd	r9, Z+48	; 0x30
    3010:	a1 a8       	ldd	r10, Z+49	; 0x31
    3012:	b2 a8       	ldd	r11, Z+50	; 0x32
    3014:	f7 01       	movw	r30, r14
    3016:	80 82       	st	Z, r8
    3018:	91 82       	std	Z+1, r9	; 0x01
    301a:	a2 82       	std	Z+2, r10	; 0x02
    301c:	b3 82       	std	Z+3, r11	; 0x03
    301e:	70 e0       	ldi	r23, 0x00	; 0
    3020:	fd 01       	movw	r30, r26
    3022:	e6 0f       	add	r30, r22
    3024:	f7 1f       	adc	r31, r23
    3026:	93 a9       	ldd	r25, Z+51	; 0x33
    3028:	82 e0       	ldi	r24, 0x02	; 2
    302a:	83 ab       	std	Z+51, r24	; 0x33
    302c:	02 30       	cpi	r16, 0x02	; 2
    302e:	01 f1       	breq	.+64     	; 0x3070 <xTaskGenericNotifyFromISR+0x92>
    3030:	18 f4       	brcc	.+6      	; 0x3038 <xTaskGenericNotifyFromISR+0x5a>
    3032:	01 30       	cpi	r16, 0x01	; 1
    3034:	31 f0       	breq	.+12     	; 0x3042 <xTaskGenericNotifyFromISR+0x64>
    3036:	4d c0       	rjmp	.+154    	; 0x30d2 <xTaskGenericNotifyFromISR+0xf4>
    3038:	03 30       	cpi	r16, 0x03	; 3
    303a:	79 f1       	breq	.+94     	; 0x309a <xTaskGenericNotifyFromISR+0xbc>
    303c:	04 30       	cpi	r16, 0x04	; 4
    303e:	d1 f1       	breq	.+116    	; 0x30b4 <xTaskGenericNotifyFromISR+0xd6>
    3040:	48 c0       	rjmp	.+144    	; 0x30d2 <xTaskGenericNotifyFromISR+0xf4>
    3042:	66 0f       	add	r22, r22
    3044:	77 1f       	adc	r23, r23
    3046:	66 0f       	add	r22, r22
    3048:	77 1f       	adc	r23, r23
    304a:	fd 01       	movw	r30, r26
    304c:	e6 0f       	add	r30, r22
    304e:	f7 1f       	adc	r31, r23
    3050:	87 a4       	ldd	r8, Z+47	; 0x2f
    3052:	90 a8       	ldd	r9, Z+48	; 0x30
    3054:	a1 a8       	ldd	r10, Z+49	; 0x31
    3056:	b2 a8       	ldd	r11, Z+50	; 0x32
    3058:	ba 01       	movw	r22, r20
    305a:	a9 01       	movw	r20, r18
    305c:	48 29       	or	r20, r8
    305e:	59 29       	or	r21, r9
    3060:	6a 29       	or	r22, r10
    3062:	7b 29       	or	r23, r11
    3064:	47 a7       	std	Z+47, r20	; 0x2f
    3066:	50 ab       	std	Z+48, r21	; 0x30
    3068:	61 ab       	std	Z+49, r22	; 0x31
    306a:	72 ab       	std	Z+50, r23	; 0x32
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	34 c0       	rjmp	.+104    	; 0x30d8 <xTaskGenericNotifyFromISR+0xfa>
    3070:	66 0f       	add	r22, r22
    3072:	77 1f       	adc	r23, r23
    3074:	66 0f       	add	r22, r22
    3076:	77 1f       	adc	r23, r23
    3078:	fd 01       	movw	r30, r26
    307a:	e6 0f       	add	r30, r22
    307c:	f7 1f       	adc	r31, r23
    307e:	47 a5       	ldd	r20, Z+47	; 0x2f
    3080:	50 a9       	ldd	r21, Z+48	; 0x30
    3082:	61 a9       	ldd	r22, Z+49	; 0x31
    3084:	72 a9       	ldd	r23, Z+50	; 0x32
    3086:	4f 5f       	subi	r20, 0xFF	; 255
    3088:	5f 4f       	sbci	r21, 0xFF	; 255
    308a:	6f 4f       	sbci	r22, 0xFF	; 255
    308c:	7f 4f       	sbci	r23, 0xFF	; 255
    308e:	47 a7       	std	Z+47, r20	; 0x2f
    3090:	50 ab       	std	Z+48, r21	; 0x30
    3092:	61 ab       	std	Z+49, r22	; 0x31
    3094:	72 ab       	std	Z+50, r23	; 0x32
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	1f c0       	rjmp	.+62     	; 0x30d8 <xTaskGenericNotifyFromISR+0xfa>
    309a:	66 0f       	add	r22, r22
    309c:	77 1f       	adc	r23, r23
    309e:	66 0f       	add	r22, r22
    30a0:	77 1f       	adc	r23, r23
    30a2:	fd 01       	movw	r30, r26
    30a4:	e6 0f       	add	r30, r22
    30a6:	f7 1f       	adc	r31, r23
    30a8:	27 a7       	std	Z+47, r18	; 0x2f
    30aa:	30 ab       	std	Z+48, r19	; 0x30
    30ac:	41 ab       	std	Z+49, r20	; 0x31
    30ae:	52 ab       	std	Z+50, r21	; 0x32
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	12 c0       	rjmp	.+36     	; 0x30d8 <xTaskGenericNotifyFromISR+0xfa>
    30b4:	92 30       	cpi	r25, 0x02	; 2
    30b6:	79 f0       	breq	.+30     	; 0x30d6 <xTaskGenericNotifyFromISR+0xf8>
    30b8:	66 0f       	add	r22, r22
    30ba:	77 1f       	adc	r23, r23
    30bc:	66 0f       	add	r22, r22
    30be:	77 1f       	adc	r23, r23
    30c0:	fd 01       	movw	r30, r26
    30c2:	e6 0f       	add	r30, r22
    30c4:	f7 1f       	adc	r31, r23
    30c6:	27 a7       	std	Z+47, r18	; 0x2f
    30c8:	30 ab       	std	Z+48, r19	; 0x30
    30ca:	41 ab       	std	Z+49, r20	; 0x31
    30cc:	52 ab       	std	Z+50, r21	; 0x32
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	03 c0       	rjmp	.+6      	; 0x30d8 <xTaskGenericNotifyFromISR+0xfa>
    30d2:	81 e0       	ldi	r24, 0x01	; 1
    30d4:	01 c0       	rjmp	.+2      	; 0x30d8 <xTaskGenericNotifyFromISR+0xfa>
    30d6:	80 e0       	ldi	r24, 0x00	; 0
    30d8:	91 30       	cpi	r25, 0x01	; 1
    30da:	09 f0       	breq	.+2      	; 0x30de <xTaskGenericNotifyFromISR+0x100>
    30dc:	96 c0       	rjmp	.+300    	; 0x320a <xTaskGenericNotifyFromISR+0x22c>
    30de:	90 91 04 15 	lds	r25, 0x1504	; 0x801504 <uxSchedulerSuspended>
    30e2:	91 11       	cpse	r25, r1
    30e4:	5f c0       	rjmp	.+190    	; 0x31a4 <xTaskGenericNotifyFromISR+0x1c6>
    30e6:	1c 96       	adiw	r26, 0x0c	; 12
    30e8:	ed 91       	ld	r30, X+
    30ea:	fc 91       	ld	r31, X
    30ec:	1d 97       	sbiw	r26, 0x0d	; 13
    30ee:	16 96       	adiw	r26, 0x06	; 6
    30f0:	cd 91       	ld	r28, X+
    30f2:	dc 91       	ld	r29, X
    30f4:	17 97       	sbiw	r26, 0x07	; 7
    30f6:	18 96       	adiw	r26, 0x08	; 8
    30f8:	2d 91       	ld	r18, X+
    30fa:	3c 91       	ld	r19, X
    30fc:	19 97       	sbiw	r26, 0x09	; 9
    30fe:	3f 83       	std	Y+7, r19	; 0x07
    3100:	2e 83       	std	Y+6, r18	; 0x06
    3102:	18 96       	adiw	r26, 0x08	; 8
    3104:	cd 91       	ld	r28, X+
    3106:	dc 91       	ld	r29, X
    3108:	19 97       	sbiw	r26, 0x09	; 9
    310a:	16 96       	adiw	r26, 0x06	; 6
    310c:	2d 91       	ld	r18, X+
    310e:	3c 91       	ld	r19, X
    3110:	17 97       	sbiw	r26, 0x07	; 7
    3112:	3d 83       	std	Y+5, r19	; 0x05
    3114:	2c 83       	std	Y+4, r18	; 0x04
    3116:	41 81       	ldd	r20, Z+1	; 0x01
    3118:	52 81       	ldd	r21, Z+2	; 0x02
    311a:	9d 01       	movw	r18, r26
    311c:	2e 5f       	subi	r18, 0xFE	; 254
    311e:	3f 4f       	sbci	r19, 0xFF	; 255
    3120:	42 17       	cp	r20, r18
    3122:	53 07       	cpc	r21, r19
    3124:	31 f4       	brne	.+12     	; 0x3132 <xTaskGenericNotifyFromISR+0x154>
    3126:	18 96       	adiw	r26, 0x08	; 8
    3128:	4d 91       	ld	r20, X+
    312a:	5c 91       	ld	r21, X
    312c:	19 97       	sbiw	r26, 0x09	; 9
    312e:	52 83       	std	Z+2, r21	; 0x02
    3130:	41 83       	std	Z+1, r20	; 0x01
    3132:	1d 96       	adiw	r26, 0x0d	; 13
    3134:	1c 92       	st	X, r1
    3136:	1e 92       	st	-X, r1
    3138:	1c 97       	sbiw	r26, 0x0c	; 12
    313a:	90 81       	ld	r25, Z
    313c:	91 50       	subi	r25, 0x01	; 1
    313e:	90 83       	st	Z, r25
    3140:	5a 96       	adiw	r26, 0x1a	; 26
    3142:	ec 91       	ld	r30, X
    3144:	5a 97       	sbiw	r26, 0x1a	; 26
    3146:	90 91 13 15 	lds	r25, 0x1513	; 0x801513 <uxTopReadyPriority>
    314a:	9e 17       	cp	r25, r30
    314c:	10 f4       	brcc	.+4      	; 0x3152 <xTaskGenericNotifyFromISR+0x174>
    314e:	e0 93 13 15 	sts	0x1513, r30	; 0x801513 <uxTopReadyPriority>
    3152:	9b e0       	ldi	r25, 0x0B	; 11
    3154:	9e 9f       	mul	r25, r30
    3156:	f0 01       	movw	r30, r0
    3158:	11 24       	eor	r1, r1
    315a:	eb 5a       	subi	r30, 0xAB	; 171
    315c:	fa 4e       	sbci	r31, 0xEA	; 234
    315e:	01 80       	ldd	r0, Z+1	; 0x01
    3160:	f2 81       	ldd	r31, Z+2	; 0x02
    3162:	e0 2d       	mov	r30, r0
    3164:	17 96       	adiw	r26, 0x07	; 7
    3166:	fc 93       	st	X, r31
    3168:	ee 93       	st	-X, r30
    316a:	16 97       	sbiw	r26, 0x06	; 6
    316c:	46 81       	ldd	r20, Z+6	; 0x06
    316e:	57 81       	ldd	r21, Z+7	; 0x07
    3170:	19 96       	adiw	r26, 0x09	; 9
    3172:	5c 93       	st	X, r21
    3174:	4e 93       	st	-X, r20
    3176:	18 97       	sbiw	r26, 0x08	; 8
    3178:	c6 81       	ldd	r28, Z+6	; 0x06
    317a:	d7 81       	ldd	r29, Z+7	; 0x07
    317c:	3d 83       	std	Y+5, r19	; 0x05
    317e:	2c 83       	std	Y+4, r18	; 0x04
    3180:	37 83       	std	Z+7, r19	; 0x07
    3182:	26 83       	std	Z+6, r18	; 0x06
    3184:	5a 96       	adiw	r26, 0x1a	; 26
    3186:	ec 91       	ld	r30, X
    3188:	5a 97       	sbiw	r26, 0x1a	; 26
    318a:	9e 9f       	mul	r25, r30
    318c:	f0 01       	movw	r30, r0
    318e:	11 24       	eor	r1, r1
    3190:	eb 5a       	subi	r30, 0xAB	; 171
    3192:	fa 4e       	sbci	r31, 0xEA	; 234
    3194:	1d 96       	adiw	r26, 0x0d	; 13
    3196:	fc 93       	st	X, r31
    3198:	ee 93       	st	-X, r30
    319a:	1c 97       	sbiw	r26, 0x0c	; 12
    319c:	90 81       	ld	r25, Z
    319e:	9f 5f       	subi	r25, 0xFF	; 255
    31a0:	90 83       	st	Z, r25
    31a2:	21 c0       	rjmp	.+66     	; 0x31e6 <xTaskGenericNotifyFromISR+0x208>
    31a4:	60 e3       	ldi	r22, 0x30	; 48
    31a6:	75 e1       	ldi	r23, 0x15	; 21
    31a8:	fb 01       	movw	r30, r22
    31aa:	c1 81       	ldd	r28, Z+1	; 0x01
    31ac:	d2 81       	ldd	r29, Z+2	; 0x02
    31ae:	53 96       	adiw	r26, 0x13	; 19
    31b0:	dc 93       	st	X, r29
    31b2:	ce 93       	st	-X, r28
    31b4:	52 97       	sbiw	r26, 0x12	; 18
    31b6:	2e 81       	ldd	r18, Y+6	; 0x06
    31b8:	3f 81       	ldd	r19, Y+7	; 0x07
    31ba:	55 96       	adiw	r26, 0x15	; 21
    31bc:	3c 93       	st	X, r19
    31be:	2e 93       	st	-X, r18
    31c0:	54 97       	sbiw	r26, 0x14	; 20
    31c2:	4e 81       	ldd	r20, Y+6	; 0x06
    31c4:	5f 81       	ldd	r21, Y+7	; 0x07
    31c6:	9d 01       	movw	r18, r26
    31c8:	22 5f       	subi	r18, 0xF2	; 242
    31ca:	3f 4f       	sbci	r19, 0xFF	; 255
    31cc:	fa 01       	movw	r30, r20
    31ce:	35 83       	std	Z+5, r19	; 0x05
    31d0:	24 83       	std	Z+4, r18	; 0x04
    31d2:	3f 83       	std	Y+7, r19	; 0x07
    31d4:	2e 83       	std	Y+6, r18	; 0x06
    31d6:	59 96       	adiw	r26, 0x19	; 25
    31d8:	7c 93       	st	X, r23
    31da:	6e 93       	st	-X, r22
    31dc:	58 97       	sbiw	r26, 0x18	; 24
    31de:	fb 01       	movw	r30, r22
    31e0:	90 81       	ld	r25, Z
    31e2:	9f 5f       	subi	r25, 0xFF	; 255
    31e4:	90 83       	st	Z, r25
    31e6:	5a 96       	adiw	r26, 0x1a	; 26
    31e8:	2c 91       	ld	r18, X
    31ea:	e0 91 c3 15 	lds	r30, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    31ee:	f0 91 c4 15 	lds	r31, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>
    31f2:	92 8d       	ldd	r25, Z+26	; 0x1a
    31f4:	92 17       	cp	r25, r18
    31f6:	48 f4       	brcc	.+18     	; 0x320a <xTaskGenericNotifyFromISR+0x22c>
    31f8:	c1 14       	cp	r12, r1
    31fa:	d1 04       	cpc	r13, r1
    31fc:	19 f0       	breq	.+6      	; 0x3204 <xTaskGenericNotifyFromISR+0x226>
    31fe:	91 e0       	ldi	r25, 0x01	; 1
    3200:	f6 01       	movw	r30, r12
    3202:	90 83       	st	Z, r25
    3204:	91 e0       	ldi	r25, 0x01	; 1
    3206:	90 93 0d 15 	sts	0x150D, r25	; 0x80150d <xYieldPending>
    320a:	df 91       	pop	r29
    320c:	cf 91       	pop	r28
    320e:	0f 91       	pop	r16
    3210:	ff 90       	pop	r15
    3212:	ef 90       	pop	r14
    3214:	df 90       	pop	r13
    3216:	cf 90       	pop	r12
    3218:	bf 90       	pop	r11
    321a:	af 90       	pop	r10
    321c:	9f 90       	pop	r9
    321e:	8f 90       	pop	r8
    3220:	08 95       	ret

00003222 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3222:	00 97       	sbiw	r24, 0x00	; 0
    3224:	21 f4       	brne	.+8      	; 0x322e <xTaskGenericNotifyStateClear+0xc>
    3226:	80 91 c3 15 	lds	r24, 0x15C3	; 0x8015c3 <pxCurrentTCB>
    322a:	90 91 c4 15 	lds	r25, 0x15C4	; 0x8015c4 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    322e:	0f b6       	in	r0, 0x3f	; 63
    3230:	f8 94       	cli
    3232:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3234:	70 e0       	ldi	r23, 0x00	; 0
    3236:	fc 01       	movw	r30, r24
    3238:	e6 0f       	add	r30, r22
    323a:	f7 1f       	adc	r31, r23
    323c:	23 a9       	ldd	r18, Z+51	; 0x33
    323e:	22 30       	cpi	r18, 0x02	; 2
    3240:	31 f4       	brne	.+12     	; 0x324e <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3242:	fc 01       	movw	r30, r24
    3244:	e6 0f       	add	r30, r22
    3246:	f7 1f       	adc	r31, r23
    3248:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	01 c0       	rjmp	.+2      	; 0x3250 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    324e:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3250:	0f 90       	pop	r0
    3252:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3254:	08 95       	ret

00003256 <prvGetNextExpireTime>:
    3256:	dc 01       	movw	r26, r24
    3258:	e0 91 cf 15 	lds	r30, 0x15CF	; 0x8015cf <pxCurrentTimerList>
    325c:	f0 91 d0 15 	lds	r31, 0x15D0	; 0x8015d0 <pxCurrentTimerList+0x1>
    3260:	80 81       	ld	r24, Z
    3262:	91 e0       	ldi	r25, 0x01	; 1
    3264:	81 11       	cpse	r24, r1
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	9c 93       	st	X, r25
    326a:	91 11       	cpse	r25, r1
    326c:	08 c0       	rjmp	.+16     	; 0x327e <prvGetNextExpireTime+0x28>
    326e:	07 80       	ldd	r0, Z+7	; 0x07
    3270:	f0 85       	ldd	r31, Z+8	; 0x08
    3272:	e0 2d       	mov	r30, r0
    3274:	60 81       	ld	r22, Z
    3276:	71 81       	ldd	r23, Z+1	; 0x01
    3278:	82 81       	ldd	r24, Z+2	; 0x02
    327a:	93 81       	ldd	r25, Z+3	; 0x03
    327c:	08 95       	ret
    327e:	60 e0       	ldi	r22, 0x00	; 0
    3280:	70 e0       	ldi	r23, 0x00	; 0
    3282:	cb 01       	movw	r24, r22
    3284:	08 95       	ret

00003286 <prvInsertTimerInActiveList>:
    3286:	cf 92       	push	r12
    3288:	df 92       	push	r13
    328a:	ef 92       	push	r14
    328c:	ff 92       	push	r15
    328e:	0f 93       	push	r16
    3290:	1f 93       	push	r17
    3292:	fc 01       	movw	r30, r24
    3294:	42 83       	std	Z+2, r20	; 0x02
    3296:	53 83       	std	Z+3, r21	; 0x03
    3298:	64 83       	std	Z+4, r22	; 0x04
    329a:	75 83       	std	Z+5, r23	; 0x05
    329c:	93 87       	std	Z+11, r25	; 0x0b
    329e:	82 87       	std	Z+10, r24	; 0x0a
    32a0:	04 17       	cp	r16, r20
    32a2:	15 07       	cpc	r17, r21
    32a4:	26 07       	cpc	r18, r22
    32a6:	37 07       	cpc	r19, r23
    32a8:	c0 f0       	brcs	.+48     	; 0x32da <prvInsertTimerInActiveList+0x54>
    32aa:	0c 19       	sub	r16, r12
    32ac:	1d 09       	sbc	r17, r13
    32ae:	2e 09       	sbc	r18, r14
    32b0:	3f 09       	sbc	r19, r15
    32b2:	86 85       	ldd	r24, Z+14	; 0x0e
    32b4:	97 85       	ldd	r25, Z+15	; 0x0f
    32b6:	a0 89       	ldd	r26, Z+16	; 0x10
    32b8:	b1 89       	ldd	r27, Z+17	; 0x11
    32ba:	08 17       	cp	r16, r24
    32bc:	19 07       	cpc	r17, r25
    32be:	2a 07       	cpc	r18, r26
    32c0:	3b 07       	cpc	r19, r27
    32c2:	00 f5       	brcc	.+64     	; 0x3304 <prvInsertTimerInActiveList+0x7e>
    32c4:	bf 01       	movw	r22, r30
    32c6:	6e 5f       	subi	r22, 0xFE	; 254
    32c8:	7f 4f       	sbci	r23, 0xFF	; 255
    32ca:	80 91 cd 15 	lds	r24, 0x15CD	; 0x8015cd <pxOverflowTimerList>
    32ce:	90 91 ce 15 	lds	r25, 0x15CE	; 0x8015ce <pxOverflowTimerList+0x1>
    32d2:	0e 94 18 06 	call	0xc30	; 0xc30 <vListInsert>
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	18 c0       	rjmp	.+48     	; 0x330a <prvInsertTimerInActiveList+0x84>
    32da:	0c 15       	cp	r16, r12
    32dc:	1d 05       	cpc	r17, r13
    32de:	2e 05       	cpc	r18, r14
    32e0:	3f 05       	cpc	r19, r15
    32e2:	28 f4       	brcc	.+10     	; 0x32ee <prvInsertTimerInActiveList+0x68>
    32e4:	4c 15       	cp	r20, r12
    32e6:	5d 05       	cpc	r21, r13
    32e8:	6e 05       	cpc	r22, r14
    32ea:	7f 05       	cpc	r23, r15
    32ec:	68 f4       	brcc	.+26     	; 0x3308 <prvInsertTimerInActiveList+0x82>
    32ee:	bf 01       	movw	r22, r30
    32f0:	6e 5f       	subi	r22, 0xFE	; 254
    32f2:	7f 4f       	sbci	r23, 0xFF	; 255
    32f4:	80 91 cf 15 	lds	r24, 0x15CF	; 0x8015cf <pxCurrentTimerList>
    32f8:	90 91 d0 15 	lds	r25, 0x15D0	; 0x8015d0 <pxCurrentTimerList+0x1>
    32fc:	0e 94 18 06 	call	0xc30	; 0xc30 <vListInsert>
    3300:	80 e0       	ldi	r24, 0x00	; 0
    3302:	03 c0       	rjmp	.+6      	; 0x330a <prvInsertTimerInActiveList+0x84>
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	01 c0       	rjmp	.+2      	; 0x330a <prvInsertTimerInActiveList+0x84>
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	1f 91       	pop	r17
    330c:	0f 91       	pop	r16
    330e:	ff 90       	pop	r15
    3310:	ef 90       	pop	r14
    3312:	df 90       	pop	r13
    3314:	cf 90       	pop	r12
    3316:	08 95       	ret

00003318 <prvCheckForValidListAndQueue>:
    3318:	0f b6       	in	r0, 0x3f	; 63
    331a:	f8 94       	cli
    331c:	0f 92       	push	r0
    331e:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <xTimerQueue>
    3322:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <xTimerQueue+0x1>
    3326:	89 2b       	or	r24, r25
    3328:	e9 f4       	brne	.+58     	; 0x3364 <prvCheckForValidListAndQueue+0x4c>
    332a:	8c ed       	ldi	r24, 0xDC	; 220
    332c:	95 e1       	ldi	r25, 0x15	; 21
    332e:	0e 94 03 06 	call	0xc06	; 0xc06 <vListInitialise>
    3332:	81 ed       	ldi	r24, 0xD1	; 209
    3334:	95 e1       	ldi	r25, 0x15	; 21
    3336:	0e 94 03 06 	call	0xc06	; 0xc06 <vListInitialise>
    333a:	8c ed       	ldi	r24, 0xDC	; 220
    333c:	95 e1       	ldi	r25, 0x15	; 21
    333e:	90 93 d0 15 	sts	0x15D0, r25	; 0x8015d0 <pxCurrentTimerList+0x1>
    3342:	80 93 cf 15 	sts	0x15CF, r24	; 0x8015cf <pxCurrentTimerList>
    3346:	81 ed       	ldi	r24, 0xD1	; 209
    3348:	95 e1       	ldi	r25, 0x15	; 21
    334a:	90 93 ce 15 	sts	0x15CE, r25	; 0x8015ce <pxOverflowTimerList+0x1>
    334e:	80 93 cd 15 	sts	0x15CD, r24	; 0x8015cd <pxOverflowTimerList>
    3352:	40 e0       	ldi	r20, 0x00	; 0
    3354:	67 e0       	ldi	r22, 0x07	; 7
    3356:	8a e0       	ldi	r24, 0x0A	; 10
    3358:	0e 94 b6 08 	call	0x116c	; 0x116c <xQueueGenericCreate>
    335c:	90 93 cc 15 	sts	0x15CC, r25	; 0x8015cc <xTimerQueue+0x1>
    3360:	80 93 cb 15 	sts	0x15CB, r24	; 0x8015cb <xTimerQueue>
    3364:	0f 90       	pop	r0
    3366:	0f be       	out	0x3f, r0	; 63
    3368:	08 95       	ret

0000336a <xTimerCreateTimerTask>:
    336a:	ef 92       	push	r14
    336c:	ff 92       	push	r15
    336e:	0f 93       	push	r16
    3370:	d3 df       	rcall	.-90     	; 0x3318 <prvCheckForValidListAndQueue>
    3372:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <xTimerQueue>
    3376:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <xTimerQueue+0x1>
    337a:	89 2b       	or	r24, r25
    337c:	91 f0       	breq	.+36     	; 0x33a2 <xTimerCreateTimerTask+0x38>
    337e:	0f 2e       	mov	r0, r31
    3380:	f9 ec       	ldi	r31, 0xC9	; 201
    3382:	ef 2e       	mov	r14, r31
    3384:	f5 e1       	ldi	r31, 0x15	; 21
    3386:	ff 2e       	mov	r15, r31
    3388:	f0 2d       	mov	r31, r0
    338a:	03 e0       	ldi	r16, 0x03	; 3
    338c:	20 e0       	ldi	r18, 0x00	; 0
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	40 ec       	ldi	r20, 0xC0	; 192
    3392:	50 e0       	ldi	r21, 0x00	; 0
    3394:	6d e8       	ldi	r22, 0x8D	; 141
    3396:	73 e0       	ldi	r23, 0x03	; 3
    3398:	88 e5       	ldi	r24, 0x58	; 88
    339a:	91 e0       	ldi	r25, 0x01	; 1
    339c:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <xTaskCreate>
    33a0:	01 c0       	rjmp	.+2      	; 0x33a4 <xTimerCreateTimerTask+0x3a>
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	0f 91       	pop	r16
    33a6:	ff 90       	pop	r15
    33a8:	ef 90       	pop	r14
    33aa:	08 95       	ret

000033ac <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    33ac:	8f 92       	push	r8
    33ae:	9f 92       	push	r9
    33b0:	af 92       	push	r10
    33b2:	bf 92       	push	r11
    33b4:	cf 92       	push	r12
    33b6:	df 92       	push	r13
    33b8:	ef 92       	push	r14
    33ba:	ff 92       	push	r15
    33bc:	0f 93       	push	r16
    33be:	1f 93       	push	r17
    33c0:	cf 93       	push	r28
    33c2:	df 93       	push	r29
    33c4:	cd b7       	in	r28, 0x3d	; 61
    33c6:	de b7       	in	r29, 0x3e	; 62
    33c8:	27 97       	sbiw	r28, 0x07	; 7
    33ca:	0f b6       	in	r0, 0x3f	; 63
    33cc:	f8 94       	cli
    33ce:	de bf       	out	0x3e, r29	; 62
    33d0:	0f be       	out	0x3f, r0	; 63
    33d2:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    33d4:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <xTimerQueue>
    33d8:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <xTimerQueue+0x1>
    33dc:	30 97       	sbiw	r30, 0x00	; 0
    33de:	81 f1       	breq	.+96     	; 0x3440 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    33e0:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    33e2:	2a 83       	std	Y+2, r18	; 0x02
    33e4:	3b 83       	std	Y+3, r19	; 0x03
    33e6:	4c 83       	std	Y+4, r20	; 0x04
    33e8:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    33ea:	9f 83       	std	Y+7, r25	; 0x07
    33ec:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    33ee:	66 30       	cpi	r22, 0x06	; 6
    33f0:	f4 f4       	brge	.+60     	; 0x342e <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    33f2:	c4 db       	rcall	.-2168   	; 0x2b7c <xTaskGetSchedulerState>
    33f4:	82 30       	cpi	r24, 0x02	; 2
    33f6:	69 f4       	brne	.+26     	; 0x3412 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    33f8:	00 e0       	ldi	r16, 0x00	; 0
    33fa:	a7 01       	movw	r20, r14
    33fc:	96 01       	movw	r18, r12
    33fe:	be 01       	movw	r22, r28
    3400:	6f 5f       	subi	r22, 0xFF	; 255
    3402:	7f 4f       	sbci	r23, 0xFF	; 255
    3404:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <xTimerQueue>
    3408:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <xTimerQueue+0x1>
    340c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <xQueueGenericSend>
    3410:	18 c0       	rjmp	.+48     	; 0x3442 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3412:	00 e0       	ldi	r16, 0x00	; 0
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	a9 01       	movw	r20, r18
    341a:	be 01       	movw	r22, r28
    341c:	6f 5f       	subi	r22, 0xFF	; 255
    341e:	7f 4f       	sbci	r23, 0xFF	; 255
    3420:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <xTimerQueue>
    3424:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <xTimerQueue+0x1>
    3428:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <xQueueGenericSend>
    342c:	0a c0       	rjmp	.+20     	; 0x3442 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	a8 01       	movw	r20, r16
    3432:	be 01       	movw	r22, r28
    3434:	6f 5f       	subi	r22, 0xFF	; 255
    3436:	7f 4f       	sbci	r23, 0xFF	; 255
    3438:	cf 01       	movw	r24, r30
    343a:	0e 94 89 09 	call	0x1312	; 0x1312 <xQueueGenericSendFromISR>
    343e:	01 c0       	rjmp	.+2      	; 0x3442 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3440:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3442:	27 96       	adiw	r28, 0x07	; 7
    3444:	0f b6       	in	r0, 0x3f	; 63
    3446:	f8 94       	cli
    3448:	de bf       	out	0x3e, r29	; 62
    344a:	0f be       	out	0x3f, r0	; 63
    344c:	cd bf       	out	0x3d, r28	; 61
    344e:	df 91       	pop	r29
    3450:	cf 91       	pop	r28
    3452:	1f 91       	pop	r17
    3454:	0f 91       	pop	r16
    3456:	ff 90       	pop	r15
    3458:	ef 90       	pop	r14
    345a:	df 90       	pop	r13
    345c:	cf 90       	pop	r12
    345e:	bf 90       	pop	r11
    3460:	af 90       	pop	r10
    3462:	9f 90       	pop	r9
    3464:	8f 90       	pop	r8
    3466:	08 95       	ret

00003468 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    3468:	8f 92       	push	r8
    346a:	9f 92       	push	r9
    346c:	af 92       	push	r10
    346e:	bf 92       	push	r11
    3470:	cf 92       	push	r12
    3472:	df 92       	push	r13
    3474:	ef 92       	push	r14
    3476:	ff 92       	push	r15
    3478:	0f 93       	push	r16
    347a:	1f 93       	push	r17
    347c:	cf 93       	push	r28
    347e:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3480:	3b c0       	rjmp	.+118    	; 0x34f8 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3482:	07 80       	ldd	r0, Z+7	; 0x07
    3484:	f0 85       	ldd	r31, Z+8	; 0x08
    3486:	e0 2d       	mov	r30, r0
    3488:	80 80       	ld	r8, Z
    348a:	91 80       	ldd	r9, Z+1	; 0x01
    348c:	a2 80       	ldd	r10, Z+2	; 0x02
    348e:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3490:	c0 85       	ldd	r28, Z+8	; 0x08
    3492:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3494:	8e 01       	movw	r16, r28
    3496:	0e 5f       	subi	r16, 0xFE	; 254
    3498:	1f 4f       	sbci	r17, 0xFF	; 255
    349a:	c8 01       	movw	r24, r16
    349c:	0e 94 55 06 	call	0xcaa	; 0xcaa <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    34a0:	ec 89       	ldd	r30, Y+20	; 0x14
    34a2:	fd 89       	ldd	r31, Y+21	; 0x15
    34a4:	ce 01       	movw	r24, r28
    34a6:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    34a8:	8e 89       	ldd	r24, Y+22	; 0x16
    34aa:	82 ff       	sbrs	r24, 2
    34ac:	25 c0       	rjmp	.+74     	; 0x34f8 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    34ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    34b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    34b2:	a8 89       	ldd	r26, Y+16	; 0x10
    34b4:	b9 89       	ldd	r27, Y+17	; 0x11
    34b6:	88 0d       	add	r24, r8
    34b8:	99 1d       	adc	r25, r9
    34ba:	aa 1d       	adc	r26, r10
    34bc:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    34be:	88 16       	cp	r8, r24
    34c0:	99 06       	cpc	r9, r25
    34c2:	aa 06       	cpc	r10, r26
    34c4:	bb 06       	cpc	r11, r27
    34c6:	70 f4       	brcc	.+28     	; 0x34e4 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    34c8:	8a 83       	std	Y+2, r24	; 0x02
    34ca:	9b 83       	std	Y+3, r25	; 0x03
    34cc:	ac 83       	std	Y+4, r26	; 0x04
    34ce:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    34d0:	db 87       	std	Y+11, r29	; 0x0b
    34d2:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    34d4:	b8 01       	movw	r22, r16
    34d6:	80 91 cf 15 	lds	r24, 0x15CF	; 0x8015cf <pxCurrentTimerList>
    34da:	90 91 d0 15 	lds	r25, 0x15D0	; 0x8015d0 <pxCurrentTimerList+0x1>
    34de:	0e 94 18 06 	call	0xc30	; 0xc30 <vListInsert>
    34e2:	0a c0       	rjmp	.+20     	; 0x34f8 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    34e4:	c1 2c       	mov	r12, r1
    34e6:	d1 2c       	mov	r13, r1
    34e8:	76 01       	movw	r14, r12
    34ea:	00 e0       	ldi	r16, 0x00	; 0
    34ec:	10 e0       	ldi	r17, 0x00	; 0
    34ee:	a5 01       	movw	r20, r10
    34f0:	94 01       	movw	r18, r8
    34f2:	60 e0       	ldi	r22, 0x00	; 0
    34f4:	ce 01       	movw	r24, r28
    34f6:	5a df       	rcall	.-332    	; 0x33ac <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    34f8:	e0 91 cf 15 	lds	r30, 0x15CF	; 0x8015cf <pxCurrentTimerList>
    34fc:	f0 91 d0 15 	lds	r31, 0x15D0	; 0x8015d0 <pxCurrentTimerList+0x1>
    3500:	80 81       	ld	r24, Z
    3502:	81 11       	cpse	r24, r1
    3504:	be cf       	rjmp	.-132    	; 0x3482 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3506:	80 91 cd 15 	lds	r24, 0x15CD	; 0x8015cd <pxOverflowTimerList>
    350a:	90 91 ce 15 	lds	r25, 0x15CE	; 0x8015ce <pxOverflowTimerList+0x1>
    350e:	90 93 d0 15 	sts	0x15D0, r25	; 0x8015d0 <pxCurrentTimerList+0x1>
    3512:	80 93 cf 15 	sts	0x15CF, r24	; 0x8015cf <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3516:	f0 93 ce 15 	sts	0x15CE, r31	; 0x8015ce <pxOverflowTimerList+0x1>
    351a:	e0 93 cd 15 	sts	0x15CD, r30	; 0x8015cd <pxOverflowTimerList>
    }
    351e:	df 91       	pop	r29
    3520:	cf 91       	pop	r28
    3522:	1f 91       	pop	r17
    3524:	0f 91       	pop	r16
    3526:	ff 90       	pop	r15
    3528:	ef 90       	pop	r14
    352a:	df 90       	pop	r13
    352c:	cf 90       	pop	r12
    352e:	bf 90       	pop	r11
    3530:	af 90       	pop	r10
    3532:	9f 90       	pop	r9
    3534:	8f 90       	pop	r8
    3536:	08 95       	ret

00003538 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3538:	cf 92       	push	r12
    353a:	df 92       	push	r13
    353c:	ef 92       	push	r14
    353e:	ff 92       	push	r15
    3540:	cf 93       	push	r28
    3542:	df 93       	push	r29
    3544:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3546:	0e 94 41 10 	call	0x2082	; 0x2082 <xTaskGetTickCount>
    354a:	6b 01       	movw	r12, r22
    354c:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    354e:	80 91 c5 15 	lds	r24, 0x15C5	; 0x8015c5 <xLastTime.2436>
    3552:	90 91 c6 15 	lds	r25, 0x15C6	; 0x8015c6 <xLastTime.2436+0x1>
    3556:	a0 91 c7 15 	lds	r26, 0x15C7	; 0x8015c7 <xLastTime.2436+0x2>
    355a:	b0 91 c8 15 	lds	r27, 0x15C8	; 0x8015c8 <xLastTime.2436+0x3>
    355e:	c8 16       	cp	r12, r24
    3560:	d9 06       	cpc	r13, r25
    3562:	ea 06       	cpc	r14, r26
    3564:	fb 06       	cpc	r15, r27
    3566:	20 f4       	brcc	.+8      	; 0x3570 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    3568:	7f df       	rcall	.-258    	; 0x3468 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    356a:	81 e0       	ldi	r24, 0x01	; 1
    356c:	88 83       	st	Y, r24
    356e:	01 c0       	rjmp	.+2      	; 0x3572 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3570:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3572:	c0 92 c5 15 	sts	0x15C5, r12	; 0x8015c5 <xLastTime.2436>
    3576:	d0 92 c6 15 	sts	0x15C6, r13	; 0x8015c6 <xLastTime.2436+0x1>
    357a:	e0 92 c7 15 	sts	0x15C7, r14	; 0x8015c7 <xLastTime.2436+0x2>
    357e:	f0 92 c8 15 	sts	0x15C8, r15	; 0x8015c8 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3582:	c7 01       	movw	r24, r14
    3584:	b6 01       	movw	r22, r12
    3586:	df 91       	pop	r29
    3588:	cf 91       	pop	r28
    358a:	ff 90       	pop	r15
    358c:	ef 90       	pop	r14
    358e:	df 90       	pop	r13
    3590:	cf 90       	pop	r12
    3592:	08 95       	ret

00003594 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3594:	4f 92       	push	r4
    3596:	5f 92       	push	r5
    3598:	6f 92       	push	r6
    359a:	7f 92       	push	r7
    359c:	8f 92       	push	r8
    359e:	9f 92       	push	r9
    35a0:	af 92       	push	r10
    35a2:	bf 92       	push	r11
    35a4:	cf 92       	push	r12
    35a6:	df 92       	push	r13
    35a8:	ef 92       	push	r14
    35aa:	ff 92       	push	r15
    35ac:	0f 93       	push	r16
    35ae:	1f 93       	push	r17
    35b0:	cf 93       	push	r28
    35b2:	df 93       	push	r29
    35b4:	4b 01       	movw	r8, r22
    35b6:	5c 01       	movw	r10, r24
    35b8:	29 01       	movw	r4, r18
    35ba:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    35bc:	e0 91 cf 15 	lds	r30, 0x15CF	; 0x8015cf <pxCurrentTimerList>
    35c0:	f0 91 d0 15 	lds	r31, 0x15D0	; 0x8015d0 <pxCurrentTimerList+0x1>
    35c4:	07 80       	ldd	r0, Z+7	; 0x07
    35c6:	f0 85       	ldd	r31, Z+8	; 0x08
    35c8:	e0 2d       	mov	r30, r0
    35ca:	c0 85       	ldd	r28, Z+8	; 0x08
    35cc:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    35ce:	ce 01       	movw	r24, r28
    35d0:	02 96       	adiw	r24, 0x02	; 2
    35d2:	0e 94 55 06 	call	0xcaa	; 0xcaa <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    35d6:	8e 89       	ldd	r24, Y+22	; 0x16
    35d8:	82 ff       	sbrs	r24, 2
    35da:	1b c0       	rjmp	.+54     	; 0x3612 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    35dc:	4e 85       	ldd	r20, Y+14	; 0x0e
    35de:	5f 85       	ldd	r21, Y+15	; 0x0f
    35e0:	68 89       	ldd	r22, Y+16	; 0x10
    35e2:	79 89       	ldd	r23, Y+17	; 0x11
    35e4:	48 0d       	add	r20, r8
    35e6:	59 1d       	adc	r21, r9
    35e8:	6a 1d       	adc	r22, r10
    35ea:	7b 1d       	adc	r23, r11
    35ec:	75 01       	movw	r14, r10
    35ee:	64 01       	movw	r12, r8
    35f0:	93 01       	movw	r18, r6
    35f2:	82 01       	movw	r16, r4
    35f4:	ce 01       	movw	r24, r28
    35f6:	47 de       	rcall	.-882    	; 0x3286 <prvInsertTimerInActiveList>
    35f8:	88 23       	and	r24, r24
    35fa:	69 f0       	breq	.+26     	; 0x3616 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    35fc:	c1 2c       	mov	r12, r1
    35fe:	d1 2c       	mov	r13, r1
    3600:	76 01       	movw	r14, r12
    3602:	00 e0       	ldi	r16, 0x00	; 0
    3604:	10 e0       	ldi	r17, 0x00	; 0
    3606:	a5 01       	movw	r20, r10
    3608:	94 01       	movw	r18, r8
    360a:	60 e0       	ldi	r22, 0x00	; 0
    360c:	ce 01       	movw	r24, r28
    360e:	ce de       	rcall	.-612    	; 0x33ac <xTimerGenericCommand>
    3610:	02 c0       	rjmp	.+4      	; 0x3616 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3612:	8e 7f       	andi	r24, 0xFE	; 254
    3614:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3616:	ec 89       	ldd	r30, Y+20	; 0x14
    3618:	fd 89       	ldd	r31, Y+21	; 0x15
    361a:	ce 01       	movw	r24, r28
    361c:	19 95       	eicall
    }
    361e:	df 91       	pop	r29
    3620:	cf 91       	pop	r28
    3622:	1f 91       	pop	r17
    3624:	0f 91       	pop	r16
    3626:	ff 90       	pop	r15
    3628:	ef 90       	pop	r14
    362a:	df 90       	pop	r13
    362c:	cf 90       	pop	r12
    362e:	bf 90       	pop	r11
    3630:	af 90       	pop	r10
    3632:	9f 90       	pop	r9
    3634:	8f 90       	pop	r8
    3636:	7f 90       	pop	r7
    3638:	6f 90       	pop	r6
    363a:	5f 90       	pop	r5
    363c:	4f 90       	pop	r4
    363e:	08 95       	ret

00003640 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3640:	8f 92       	push	r8
    3642:	9f 92       	push	r9
    3644:	af 92       	push	r10
    3646:	bf 92       	push	r11
    3648:	cf 92       	push	r12
    364a:	df 92       	push	r13
    364c:	ef 92       	push	r14
    364e:	ff 92       	push	r15
    3650:	1f 93       	push	r17
    3652:	cf 93       	push	r28
    3654:	df 93       	push	r29
    3656:	1f 92       	push	r1
    3658:	cd b7       	in	r28, 0x3d	; 61
    365a:	de b7       	in	r29, 0x3e	; 62
    365c:	6b 01       	movw	r12, r22
    365e:	7c 01       	movw	r14, r24
    3660:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3662:	0e 94 3b 10 	call	0x2076	; 0x2076 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3666:	ce 01       	movw	r24, r28
    3668:	01 96       	adiw	r24, 0x01	; 1
    366a:	66 df       	rcall	.-308    	; 0x3538 <prvSampleTimeNow>
    366c:	4b 01       	movw	r8, r22
    366e:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3670:	89 81       	ldd	r24, Y+1	; 0x01
    3672:	81 11       	cpse	r24, r1
    3674:	2d c0       	rjmp	.+90     	; 0x36d0 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3676:	11 11       	cpse	r17, r1
    3678:	0d c0       	rjmp	.+26     	; 0x3694 <prvProcessTimerOrBlockTask+0x54>
    367a:	8c 14       	cp	r8, r12
    367c:	9d 04       	cpc	r9, r13
    367e:	ae 04       	cpc	r10, r14
    3680:	bf 04       	cpc	r11, r15
    3682:	40 f0       	brcs	.+16     	; 0x3694 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3684:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3688:	a5 01       	movw	r20, r10
    368a:	94 01       	movw	r18, r8
    368c:	c7 01       	movw	r24, r14
    368e:	b6 01       	movw	r22, r12
    3690:	81 df       	rcall	.-254    	; 0x3594 <prvProcessExpiredTimer>
    3692:	20 c0       	rjmp	.+64     	; 0x36d4 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3694:	11 23       	and	r17, r17
    3696:	41 f0       	breq	.+16     	; 0x36a8 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3698:	e0 91 cd 15 	lds	r30, 0x15CD	; 0x8015cd <pxOverflowTimerList>
    369c:	f0 91 ce 15 	lds	r31, 0x15CE	; 0x8015ce <pxOverflowTimerList+0x1>
    36a0:	80 81       	ld	r24, Z
    36a2:	11 e0       	ldi	r17, 0x01	; 1
    36a4:	81 11       	cpse	r24, r1
    36a6:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    36a8:	b7 01       	movw	r22, r14
    36aa:	a6 01       	movw	r20, r12
    36ac:	48 19       	sub	r20, r8
    36ae:	59 09       	sbc	r21, r9
    36b0:	6a 09       	sbc	r22, r10
    36b2:	7b 09       	sbc	r23, r11
    36b4:	21 2f       	mov	r18, r17
    36b6:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <xTimerQueue>
    36ba:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <xTimerQueue+0x1>
    36be:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    36c2:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <xTaskResumeAll>
    36c6:	81 11       	cpse	r24, r1
    36c8:	05 c0       	rjmp	.+10     	; 0x36d4 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    36ca:	0e 94 d1 06 	call	0xda2	; 0xda2 <vPortYield>
    36ce:	02 c0       	rjmp	.+4      	; 0x36d4 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    36d0:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <xTaskResumeAll>
            }
        }
    }
    36d4:	0f 90       	pop	r0
    36d6:	df 91       	pop	r29
    36d8:	cf 91       	pop	r28
    36da:	1f 91       	pop	r17
    36dc:	ff 90       	pop	r15
    36de:	ef 90       	pop	r14
    36e0:	df 90       	pop	r13
    36e2:	cf 90       	pop	r12
    36e4:	bf 90       	pop	r11
    36e6:	af 90       	pop	r10
    36e8:	9f 90       	pop	r9
    36ea:	8f 90       	pop	r8
    36ec:	08 95       	ret

000036ee <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    36ee:	af 92       	push	r10
    36f0:	bf 92       	push	r11
    36f2:	cf 92       	push	r12
    36f4:	df 92       	push	r13
    36f6:	ef 92       	push	r14
    36f8:	ff 92       	push	r15
    36fa:	0f 93       	push	r16
    36fc:	1f 93       	push	r17
    36fe:	cf 93       	push	r28
    3700:	df 93       	push	r29
    3702:	cd b7       	in	r28, 0x3d	; 61
    3704:	de b7       	in	r29, 0x3e	; 62
    3706:	28 97       	sbiw	r28, 0x08	; 8
    3708:	0f b6       	in	r0, 0x3f	; 63
    370a:	f8 94       	cli
    370c:	de bf       	out	0x3e, r29	; 62
    370e:	0f be       	out	0x3f, r0	; 63
    3710:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3712:	82 c0       	rjmp	.+260    	; 0x3818 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3714:	89 81       	ldd	r24, Y+1	; 0x01
    3716:	88 23       	and	r24, r24
    3718:	0c f4       	brge	.+2      	; 0x371c <prvProcessReceivedCommands+0x2e>
    371a:	7e c0       	rjmp	.+252    	; 0x3818 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    371c:	ae 80       	ldd	r10, Y+6	; 0x06
    371e:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3720:	d5 01       	movw	r26, r10
    3722:	1c 96       	adiw	r26, 0x0c	; 12
    3724:	8d 91       	ld	r24, X+
    3726:	9c 91       	ld	r25, X
    3728:	1d 97       	sbiw	r26, 0x0d	; 13
    372a:	89 2b       	or	r24, r25
    372c:	21 f0       	breq	.+8      	; 0x3736 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    372e:	c5 01       	movw	r24, r10
    3730:	02 96       	adiw	r24, 0x02	; 2
    3732:	0e 94 55 06 	call	0xcaa	; 0xcaa <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3736:	ce 01       	movw	r24, r28
    3738:	08 96       	adiw	r24, 0x08	; 8
    373a:	fe de       	rcall	.-516    	; 0x3538 <prvSampleTimeNow>
    373c:	8b 01       	movw	r16, r22
    373e:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3740:	e9 81       	ldd	r30, Y+1	; 0x01
    3742:	0e 2e       	mov	r0, r30
    3744:	00 0c       	add	r0, r0
    3746:	ff 0b       	sbc	r31, r31
    3748:	ea 30       	cpi	r30, 0x0A	; 10
    374a:	f1 05       	cpc	r31, r1
    374c:	08 f0       	brcs	.+2      	; 0x3750 <prvProcessReceivedCommands+0x62>
    374e:	64 c0       	rjmp	.+200    	; 0x3818 <prvProcessReceivedCommands+0x12a>
    3750:	88 27       	eor	r24, r24
    3752:	ee 58       	subi	r30, 0x8E	; 142
    3754:	ff 4f       	sbci	r31, 0xFF	; 255
    3756:	8f 4f       	sbci	r24, 0xFF	; 255
    3758:	0c 94 a4 31 	jmp	0x6348	; 0x6348 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    375c:	f5 01       	movw	r30, r10
    375e:	86 89       	ldd	r24, Z+22	; 0x16
    3760:	81 60       	ori	r24, 0x01	; 1
    3762:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3764:	ca 80       	ldd	r12, Y+2	; 0x02
    3766:	db 80       	ldd	r13, Y+3	; 0x03
    3768:	ec 80       	ldd	r14, Y+4	; 0x04
    376a:	fd 80       	ldd	r15, Y+5	; 0x05
    376c:	46 85       	ldd	r20, Z+14	; 0x0e
    376e:	57 85       	ldd	r21, Z+15	; 0x0f
    3770:	60 89       	ldd	r22, Z+16	; 0x10
    3772:	71 89       	ldd	r23, Z+17	; 0x11
    3774:	4c 0d       	add	r20, r12
    3776:	5d 1d       	adc	r21, r13
    3778:	6e 1d       	adc	r22, r14
    377a:	7f 1d       	adc	r23, r15
    377c:	c5 01       	movw	r24, r10
    377e:	83 dd       	rcall	.-1274   	; 0x3286 <prvInsertTimerInActiveList>
    3780:	88 23       	and	r24, r24
    3782:	09 f4       	brne	.+2      	; 0x3786 <prvProcessReceivedCommands+0x98>
    3784:	49 c0       	rjmp	.+146    	; 0x3818 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3786:	d5 01       	movw	r26, r10
    3788:	54 96       	adiw	r26, 0x14	; 20
    378a:	ed 91       	ld	r30, X+
    378c:	fc 91       	ld	r31, X
    378e:	55 97       	sbiw	r26, 0x15	; 21
    3790:	c5 01       	movw	r24, r10
    3792:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3794:	f5 01       	movw	r30, r10
    3796:	86 89       	ldd	r24, Z+22	; 0x16
    3798:	82 ff       	sbrs	r24, 2
    379a:	3e c0       	rjmp	.+124    	; 0x3818 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    379c:	4a 81       	ldd	r20, Y+2	; 0x02
    379e:	5b 81       	ldd	r21, Y+3	; 0x03
    37a0:	6c 81       	ldd	r22, Y+4	; 0x04
    37a2:	7d 81       	ldd	r23, Y+5	; 0x05
    37a4:	86 85       	ldd	r24, Z+14	; 0x0e
    37a6:	97 85       	ldd	r25, Z+15	; 0x0f
    37a8:	a0 89       	ldd	r26, Z+16	; 0x10
    37aa:	b1 89       	ldd	r27, Z+17	; 0x11
    37ac:	9a 01       	movw	r18, r20
    37ae:	ab 01       	movw	r20, r22
    37b0:	28 0f       	add	r18, r24
    37b2:	39 1f       	adc	r19, r25
    37b4:	4a 1f       	adc	r20, r26
    37b6:	5b 1f       	adc	r21, r27
    37b8:	c1 2c       	mov	r12, r1
    37ba:	d1 2c       	mov	r13, r1
    37bc:	76 01       	movw	r14, r12
    37be:	00 e0       	ldi	r16, 0x00	; 0
    37c0:	10 e0       	ldi	r17, 0x00	; 0
    37c2:	60 e0       	ldi	r22, 0x00	; 0
    37c4:	c5 01       	movw	r24, r10
    37c6:	f2 dd       	rcall	.-1052   	; 0x33ac <xTimerGenericCommand>
    37c8:	27 c0       	rjmp	.+78     	; 0x3818 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    37ca:	d5 01       	movw	r26, r10
    37cc:	56 96       	adiw	r26, 0x16	; 22
    37ce:	8c 91       	ld	r24, X
    37d0:	56 97       	sbiw	r26, 0x16	; 22
    37d2:	8e 7f       	andi	r24, 0xFE	; 254
    37d4:	56 96       	adiw	r26, 0x16	; 22
    37d6:	8c 93       	st	X, r24
                        break;
    37d8:	1f c0       	rjmp	.+62     	; 0x3818 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    37da:	f5 01       	movw	r30, r10
    37dc:	86 89       	ldd	r24, Z+22	; 0x16
    37de:	81 60       	ori	r24, 0x01	; 1
    37e0:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    37e2:	4a 81       	ldd	r20, Y+2	; 0x02
    37e4:	5b 81       	ldd	r21, Y+3	; 0x03
    37e6:	6c 81       	ldd	r22, Y+4	; 0x04
    37e8:	7d 81       	ldd	r23, Y+5	; 0x05
    37ea:	46 87       	std	Z+14, r20	; 0x0e
    37ec:	57 87       	std	Z+15, r21	; 0x0f
    37ee:	60 8b       	std	Z+16, r22	; 0x10
    37f0:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    37f2:	40 0f       	add	r20, r16
    37f4:	51 1f       	adc	r21, r17
    37f6:	62 1f       	adc	r22, r18
    37f8:	73 1f       	adc	r23, r19
    37fa:	68 01       	movw	r12, r16
    37fc:	79 01       	movw	r14, r18
    37fe:	c5 01       	movw	r24, r10
    3800:	42 dd       	rcall	.-1404   	; 0x3286 <prvInsertTimerInActiveList>
                        break;
    3802:	0a c0       	rjmp	.+20     	; 0x3818 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3804:	f5 01       	movw	r30, r10
    3806:	86 89       	ldd	r24, Z+22	; 0x16
    3808:	81 fd       	sbrc	r24, 1
    380a:	04 c0       	rjmp	.+8      	; 0x3814 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    380c:	c5 01       	movw	r24, r10
    380e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <vPortFree>
    3812:	02 c0       	rjmp	.+4      	; 0x3818 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3814:	8e 7f       	andi	r24, 0xFE	; 254
    3816:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	a9 01       	movw	r20, r18
    381e:	be 01       	movw	r22, r28
    3820:	6f 5f       	subi	r22, 0xFF	; 255
    3822:	7f 4f       	sbci	r23, 0xFF	; 255
    3824:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <xTimerQueue>
    3828:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <xTimerQueue+0x1>
    382c:	0e 94 c4 09 	call	0x1388	; 0x1388 <xQueueReceive>
    3830:	81 11       	cpse	r24, r1
    3832:	70 cf       	rjmp	.-288    	; 0x3714 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3834:	28 96       	adiw	r28, 0x08	; 8
    3836:	0f b6       	in	r0, 0x3f	; 63
    3838:	f8 94       	cli
    383a:	de bf       	out	0x3e, r29	; 62
    383c:	0f be       	out	0x3f, r0	; 63
    383e:	cd bf       	out	0x3d, r28	; 61
    3840:	df 91       	pop	r29
    3842:	cf 91       	pop	r28
    3844:	1f 91       	pop	r17
    3846:	0f 91       	pop	r16
    3848:	ff 90       	pop	r15
    384a:	ef 90       	pop	r14
    384c:	df 90       	pop	r13
    384e:	cf 90       	pop	r12
    3850:	bf 90       	pop	r11
    3852:	af 90       	pop	r10
    3854:	08 95       	ret

00003856 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3856:	08 95       	ret

00003858 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3858:	84 b1       	in	r24, 0x04	; 4
    385a:	80 68       	ori	r24, 0x80	; 128
    385c:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    385e:	85 b1       	in	r24, 0x05	; 5
    3860:	80 68       	ori	r24, 0x80	; 128
    3862:	85 b9       	out	0x05, r24	; 5
    3864:	08 95       	ret

00003866 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3866:	83 b1       	in	r24, 0x03	; 3
    3868:	80 68       	ori	r24, 0x80	; 128
    386a:	83 b9       	out	0x03, r24	; 3
    386c:	08 95       	ret

0000386e <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    386e:	f4 df       	rcall	.-24     	; 0x3858 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3870:	2f ef       	ldi	r18, 0xFF	; 255
    3872:	80 e7       	ldi	r24, 0x70	; 112
    3874:	92 e0       	ldi	r25, 0x02	; 2
    3876:	21 50       	subi	r18, 0x01	; 1
    3878:	80 40       	sbci	r24, 0x00	; 0
    387a:	90 40       	sbci	r25, 0x00	; 0
    387c:	e1 f7       	brne	.-8      	; 0x3876 <vApplicationMallocFailedHook+0x8>
    387e:	00 c0       	rjmp	.+0      	; 0x3880 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3880:	00 00       	nop
    3882:	f1 df       	rcall	.-30     	; 0x3866 <prvBlinkMainLed>
    3884:	f5 cf       	rjmp	.-22     	; 0x3870 <vApplicationMallocFailedHook+0x2>

00003886 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3886:	e8 df       	rcall	.-48     	; 0x3858 <prvSetMainLedOn>
    3888:	2f ef       	ldi	r18, 0xFF	; 255
    388a:	87 ea       	ldi	r24, 0xA7	; 167
    388c:	91 e6       	ldi	r25, 0x61	; 97
    388e:	21 50       	subi	r18, 0x01	; 1
    3890:	80 40       	sbci	r24, 0x00	; 0
    3892:	90 40       	sbci	r25, 0x00	; 0
    3894:	e1 f7       	brne	.-8      	; 0x388e <vApplicationStackOverflowHook+0x8>
    3896:	00 c0       	rjmp	.+0      	; 0x3898 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3898:	00 00       	nop
    389a:	e5 df       	rcall	.-54     	; 0x3866 <prvBlinkMainLed>
    389c:	f5 cf       	rjmp	.-22     	; 0x3888 <vApplicationStackOverflowHook+0x2>

0000389e <hih8120_handler_initialise>:
const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)


void hih820_handler_task( void *pvParameters );

void hih8120_handler_initialise(UBaseType_t hih8120_task_priority){
    389e:	ef 92       	push	r14
    38a0:	ff 92       	push	r15
    38a2:	0f 93       	push	r16
    38a4:	08 2f       	mov	r16, r24
	if ( HIH8120_OK == hih8120_initialise() ){
    38a6:	6c d2       	rcall	.+1240   	; 0x3d80 <hih8120_initialise>
    38a8:	81 11       	cpse	r24, r1
    38aa:	0c c0       	rjmp	.+24     	; 0x38c4 <hih8120_handler_initialise+0x26>
			printf("%d\n",HIH8120_OK);
    38ac:	1f 92       	push	r1
    38ae:	1f 92       	push	r1
    38b0:	85 e9       	ldi	r24, 0x95	; 149
    38b2:	93 e0       	ldi	r25, 0x03	; 3
    38b4:	9f 93       	push	r25
    38b6:	8f 93       	push	r24
    38b8:	0e 94 7d 34 	call	0x68fa	; 0x68fa <printf>
    38bc:	0f 90       	pop	r0
    38be:	0f 90       	pop	r0
    38c0:	0f 90       	pop	r0
    38c2:	0f 90       	pop	r0
	}
	xTaskCreate(
    38c4:	e1 2c       	mov	r14, r1
    38c6:	f1 2c       	mov	r15, r1
    38c8:	20 e0       	ldi	r18, 0x00	; 0
    38ca:	30 e0       	ldi	r19, 0x00	; 0
    38cc:	40 ec       	ldi	r20, 0xC0	; 192
    38ce:	50 e0       	ldi	r21, 0x00	; 0
    38d0:	69 e9       	ldi	r22, 0x99	; 153
    38d2:	73 e0       	ldi	r23, 0x03	; 3
    38d4:	82 e9       	ldi	r24, 0x92	; 146
    38d6:	9c e1       	ldi	r25, 0x1C	; 28
    38d8:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <xTaskCreate>
	,  "Hih820Hand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  hih8120_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    38dc:	0f 91       	pop	r16
    38de:	ff 90       	pop	r15
    38e0:	ef 90       	pop	r14
    38e2:	08 95       	ret

000038e4 <hih820_getHumidityInUint16>:
		hih8120_run();
	}
}

uint16_t hih820_getHumidityInUint16(){
	return humidityIn16/10;
    38e4:	20 91 e9 15 	lds	r18, 0x15E9	; 0x8015e9 <humidityIn16>
    38e8:	30 91 ea 15 	lds	r19, 0x15EA	; 0x8015ea <humidityIn16+0x1>
    38ec:	ad ec       	ldi	r26, 0xCD	; 205
    38ee:	bc ec       	ldi	r27, 0xCC	; 204
    38f0:	0e 94 ac 31 	call	0x6358	; 0x6358 <__umulhisi3>
}
    38f4:	96 95       	lsr	r25
    38f6:	87 95       	ror	r24
    38f8:	96 95       	lsr	r25
    38fa:	87 95       	ror	r24
    38fc:	96 95       	lsr	r25
    38fe:	87 95       	ror	r24
    3900:	08 95       	ret

00003902 <hih820_getTemperatureInUint16>:

int16_t hih820_getTemperatureInUint16(){
	return temperatureIn16/10;
    3902:	80 91 e7 15 	lds	r24, 0x15E7	; 0x8015e7 <temperatureIn16>
    3906:	90 91 e8 15 	lds	r25, 0x15E8	; 0x8015e8 <temperatureIn16+0x1>
    390a:	6a e0       	ldi	r22, 0x0A	; 10
    390c:	70 e0       	ldi	r23, 0x00	; 0
    390e:	0e 94 6f 31 	call	0x62de	; 0x62de <__divmodhi4>
    3912:	cb 01       	movw	r24, r22
}
    3914:	08 95       	ret

00003916 <hih820_aFunctionToSetBits>:
void hih820_aFunctionToSetBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Set bit 0 and bit 4 in xEventGroup. */
  uxBits = xEventGroupSetBits(
    3916:	40 e1       	ldi	r20, 0x10	; 16
    3918:	50 e0       	ldi	r21, 0x00	; 0
    391a:	60 e0       	ldi	r22, 0x00	; 0
    391c:	70 e0       	ldi	r23, 0x00	; 0
    391e:	0c 94 1c 04 	jmp	0x838	; 0x838 <xEventGroupSetBits>
    3922:	08 95       	ret

00003924 <hih820_handler_task>:
	,  NULL );
}

inline void hih8120_init(void *pvParameters){
	(void)pvParameters;
	xLastWakeTime = xTaskGetTickCount();
    3924:	0e 94 41 10 	call	0x2082	; 0x2082 <xTaskGetTickCount>
    3928:	60 93 bc 17 	sts	0x17BC, r22	; 0x8017bc <xLastWakeTime>
    392c:	70 93 bd 17 	sts	0x17BD, r23	; 0x8017bd <xLastWakeTime+0x1>
    3930:	80 93 be 17 	sts	0x17BE, r24	; 0x8017be <xLastWakeTime+0x2>
    3934:	90 93 bf 17 	sts	0x17BF, r25	; 0x8017bf <xLastWakeTime+0x3>
}

inline void hih8120_run(void){
	xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3938:	48 ea       	ldi	r20, 0xA8	; 168
    393a:	58 e4       	ldi	r21, 0x48	; 72
    393c:	60 e0       	ldi	r22, 0x00	; 0
    393e:	70 e0       	ldi	r23, 0x00	; 0
    3940:	8c eb       	ldi	r24, 0xBC	; 188
    3942:	97 e1       	ldi	r25, 0x17	; 23
    3944:	0e 94 57 12 	call	0x24ae	; 0x24ae <xTaskDelayUntil>
	if (HIH8120_OK == hih8120_wakeup())
    3948:	33 d2       	rcall	.+1126   	; 0x3db0 <hih8120_wakeup>
    394a:	81 11       	cpse	r24, r1
    394c:	f5 cf       	rjmp	.-22     	; 0x3938 <hih820_handler_task+0x14>
	{
		vTaskDelay(50);
    394e:	62 e3       	ldi	r22, 0x32	; 50
    3950:	70 e0       	ldi	r23, 0x00	; 0
    3952:	80 e0       	ldi	r24, 0x00	; 0
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	0e 94 bc 12 	call	0x2578	; 0x2578 <vTaskDelay>
		if (HIH8120_OK == hih8120_measure())
    395a:	3f d2       	rcall	.+1150   	; 0x3dda <hih8120_measure>
    395c:	81 11       	cpse	r24, r1
    395e:	ec cf       	rjmp	.-40     	; 0x3938 <hih820_handler_task+0x14>
		{
			vTaskDelay(1);
    3960:	61 e0       	ldi	r22, 0x01	; 1
    3962:	70 e0       	ldi	r23, 0x00	; 0
    3964:	80 e0       	ldi	r24, 0x00	; 0
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	0e 94 bc 12 	call	0x2578	; 0x2578 <vTaskDelay>
			humidityIn16 = hih8120_getHumidityPercent_x10();
    396c:	5c d2       	rcall	.+1208   	; 0x3e26 <hih8120_getHumidityPercent_x10>
    396e:	90 93 ea 15 	sts	0x15EA, r25	; 0x8015ea <humidityIn16+0x1>
    3972:	80 93 e9 15 	sts	0x15E9, r24	; 0x8015e9 <humidityIn16>
			temperatureIn16 = hih8120_getTemperature_x10();
    3976:	7d d2       	rcall	.+1274   	; 0x3e72 <hih8120_getTemperature_x10>
    3978:	90 93 e8 15 	sts	0x15E8, r25	; 0x8015e8 <temperatureIn16+0x1>
    397c:	80 93 e7 15 	sts	0x15E7, r24	; 0x8015e7 <temperatureIn16>
			hih820_aFunctionToSetBits(Application_getEventGroup());
    3980:	0e 94 89 01 	call	0x312	; 0x312 <Application_getEventGroup>
    3984:	c8 df       	rcall	.-112    	; 0x3916 <hih820_aFunctionToSetBits>
    3986:	d8 cf       	rjmp	.-80     	; 0x3938 <hih820_handler_task+0x14>

00003988 <create_semaphores>:
void hih8120_handler_initialise(UBaseType_t hih8120_handler_task_priority);
// Prototype for Application handler
void Application_handler_initialise(UBaseType_t Application_task_priority);

void create_semaphores(void)
{
    3988:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    398a:	80 91 c2 17 	lds	r24, 0x17C2	; 0x8017c2 <xTestSemaphore>
    398e:	90 91 c3 17 	lds	r25, 0x17C3	; 0x8017c3 <xTestSemaphore+0x1>
    3992:	89 2b       	or	r24, r25
    3994:	89 f4       	brne	.+34     	; 0x39b8 <create_semaphores+0x30>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	0e 94 7d 09 	call	0x12fa	; 0x12fa <xQueueCreateMutex>
    399c:	90 93 c3 17 	sts	0x17C3, r25	; 0x8017c3 <xTestSemaphore+0x1>
    39a0:	80 93 c2 17 	sts	0x17C2, r24	; 0x8017c2 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    39a4:	00 97       	sbiw	r24, 0x00	; 0
    39a6:	41 f0       	breq	.+16     	; 0x39b8 <create_semaphores+0x30>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    39a8:	00 e0       	ldi	r16, 0x00	; 0
    39aa:	20 e0       	ldi	r18, 0x00	; 0
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	a9 01       	movw	r20, r18
    39b0:	60 e0       	ldi	r22, 0x00	; 0
    39b2:	70 e0       	ldi	r23, 0x00	; 0
    39b4:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <xQueueGenericSend>
		}
	}
}
    39b8:	0f 91       	pop	r16
    39ba:	08 95       	ret

000039bc <main>:
/*-----------------------------------------------------------*/
int main(void)
{
	// Must be done as the very first thing!!
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    39bc:	80 e0       	ldi	r24, 0x00	; 0
    39be:	0e 94 60 28 	call	0x50c0	; 0x50c0 <stdio_initialise>
	// Let's create some semaphores
	create_semaphores();
    39c2:	e2 df       	rcall	.-60     	; 0x3988 <create_semaphores>
	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(6); // Priority 5 for internal task
    39c4:	86 e0       	ldi	r24, 0x06	; 6
    39c6:	0e 94 67 29 	call	0x52ce	; 0x52ce <status_leds_initialise>
	//Initialize Application
	Application_handler_initialise(5);
    39ca:	85 e0       	ldi	r24, 0x05	; 5
    39cc:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Application_handler_initialise>
	//initialize CO2Sensor
	mh_z19_initialise(ser_USART3);
    39d0:	83 e0       	ldi	r24, 0x03	; 3
    39d2:	20 d7       	rcall	.+3648   	; 0x4814 <mh_z19_initialise>
	//create CO2 task
	CO2Sensor_handler_initialise(4);
    39d4:	84 e0       	ldi	r24, 0x04	; 4
    39d6:	0e 94 0e 02 	call	0x41c	; 0x41c <CO2Sensor_handler_initialise>
	//Create humidity temperature task and start with priority 3
	hih8120_handler_initialise(3);
    39da:	83 e0       	ldi	r24, 0x03	; 3
	//initialize rc_servo
	rc_servo_initialise();
    39dc:	60 df       	rcall	.-320    	; 0x389e <hih8120_handler_initialise>
    39de:	9c d7       	rcall	.+3896   	; 0x4918 <rc_servo_initialise>
	// Initialise the LoRaWAN driver with down-link buffer
	downLinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    39e0:	41 e0       	ldi	r20, 0x01	; 1
    39e2:	60 e0       	ldi	r22, 0x00	; 0
    39e4:	70 e0       	ldi	r23, 0x00	; 0
    39e6:	8c e2       	ldi	r24, 0x2C	; 44
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	0e 94 b2 0b 	call	0x1764	; 0x1764 <xStreamBufferGenericCreate>
    39ee:	90 93 c1 17 	sts	0x17C1, r25	; 0x8017c1 <downLinkMessageBufferHandle+0x1>
    39f2:	80 93 c0 17 	sts	0x17C0, r24	; 0x8017c0 <downLinkMessageBufferHandle>
	lora_driver_initialise(1, downLinkMessageBufferHandle);
    39f6:	bc 01       	movw	r22, r24
    39f8:	81 e0       	ldi	r24, 0x01	; 1
	// Create LoRaWAN task and start it up with priority 2
	UpLinkHandler_lora_handler_initialise(2);
    39fa:	65 d3       	rcall	.+1738   	; 0x40c6 <lora_driver_initialise>
    39fc:	82 e0       	ldi	r24, 0x02	; 2
    39fe:	7f d1       	rcall	.+766    	; 0x3cfe <UpLinkHandler_lora_handler_initialise>
	//Create LoRaWAN task and start with priority 1
	DownLinkHandler_lora_handler_initialise(1,downLinkMessageBufferHandle);
    3a00:	60 91 c0 17 	lds	r22, 0x17C0	; 0x8017c0 <downLinkMessageBufferHandle>
    3a04:	70 91 c1 17 	lds	r23, 0x17C1	; 0x8017c1 <downLinkMessageBufferHandle+0x1>
    3a08:	81 e0       	ldi	r24, 0x01	; 1
    3a0a:	0e 94 13 03 	call	0x626	; 0x626 <DownLinkHandler_lora_handler_initialise>
	
	printf("Program Started!!\n");
    3a0e:	84 ea       	ldi	r24, 0xA4	; 164
    3a10:	93 e0       	ldi	r25, 0x03	; 3
    3a12:	0e 94 90 34 	call	0x6920	; 0x6920 <puts>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    3a16:	0e 94 03 10 	call	0x2006	; 0x2006 <vTaskStartScheduler>
    3a1a:	ff cf       	rjmp	.-2      	; 0x3a1a <main+0x5e>

00003a1c <SensorDataPackageHandler_SetCO2>:
int16_t tempIn16 = 0.0;
uint16_t co2_ppmIn16 = 0.0;
static lora_driver_payload_t _uplink_payload;

void SensorDataPackageHandler_SetCO2(uint16_t co2){
	co2_ppmIn16 = co2;
    3a1c:	90 93 02 16 	sts	0x1602, r25	; 0x801602 <co2_ppmIn16+0x1>
    3a20:	80 93 01 16 	sts	0x1601, r24	; 0x801601 <co2_ppmIn16>
    3a24:	08 95       	ret

00003a26 <SensorDataPackageHandler_SetHumidity>:
}

void SensorDataPackageHandler_SetHumidity(uint16_t humidity){
	humIn16 = humidity;
    3a26:	90 93 06 16 	sts	0x1606, r25	; 0x801606 <humIn16+0x1>
    3a2a:	80 93 05 16 	sts	0x1605, r24	; 0x801605 <humIn16>
    3a2e:	08 95       	ret

00003a30 <SensorDataPackageHandler_SetTemperature>:
}

void SensorDataPackageHandler_SetTemperature(int16_t temperature){
	tempIn16 = temperature;
    3a30:	90 93 04 16 	sts	0x1604, r25	; 0x801604 <tempIn16+0x1>
    3a34:	80 93 03 16 	sts	0x1603, r24	; 0x801603 <tempIn16>
    3a38:	08 95       	ret

00003a3a <SensorDataPackageHandler_getLoRaPayload>:
}

lora_driver_payload_t SensorDataPackageHandler_getLoRaPayload(){
    3a3a:	cf 93       	push	r28
    3a3c:	df 93       	push	r29
    3a3e:	ec 01       	movw	r28, r24
	printf("STARTEDSensorDataPackageHandler");
    3a40:	86 eb       	ldi	r24, 0xB6	; 182
    3a42:	93 e0       	ldi	r25, 0x03	; 3
    3a44:	9f 93       	push	r25
    3a46:	8f 93       	push	r24
    3a48:	0e 94 7d 34 	call	0x68fa	; 0x68fa <printf>
	printf("and this is the changed hum %u\n", humIn16);
    3a4c:	80 91 06 16 	lds	r24, 0x1606	; 0x801606 <humIn16+0x1>
    3a50:	8f 93       	push	r24
    3a52:	80 91 05 16 	lds	r24, 0x1605	; 0x801605 <humIn16>
    3a56:	8f 93       	push	r24
    3a58:	86 ed       	ldi	r24, 0xD6	; 214
    3a5a:	93 e0       	ldi	r25, 0x03	; 3
    3a5c:	9f 93       	push	r25
    3a5e:	8f 93       	push	r24
    3a60:	0e 94 7d 34 	call	0x68fa	; 0x68fa <printf>
	printf("and also the changed temp %u\n", tempIn16);
    3a64:	80 91 04 16 	lds	r24, 0x1604	; 0x801604 <tempIn16+0x1>
    3a68:	8f 93       	push	r24
    3a6a:	80 91 03 16 	lds	r24, 0x1603	; 0x801603 <tempIn16>
    3a6e:	8f 93       	push	r24
    3a70:	86 ef       	ldi	r24, 0xF6	; 246
    3a72:	93 e0       	ldi	r25, 0x03	; 3
    3a74:	9f 93       	push	r25
    3a76:	8f 93       	push	r24
    3a78:	0e 94 7d 34 	call	0x68fa	; 0x68fa <printf>
	printf("and also the changed CO2 %u\n", co2_ppmIn16);
    3a7c:	80 91 02 16 	lds	r24, 0x1602	; 0x801602 <co2_ppmIn16+0x1>
    3a80:	8f 93       	push	r24
    3a82:	80 91 01 16 	lds	r24, 0x1601	; 0x801601 <co2_ppmIn16>
    3a86:	8f 93       	push	r24
    3a88:	84 e1       	ldi	r24, 0x14	; 20
    3a8a:	94 e0       	ldi	r25, 0x04	; 4
    3a8c:	9f 93       	push	r25
    3a8e:	8f 93       	push	r24
    3a90:	0e 94 7d 34 	call	0x68fa	; 0x68fa <printf>
	
	_uplink_payload.len = 6;
    3a94:	eb ee       	ldi	r30, 0xEB	; 235
    3a96:	f5 e1       	ldi	r31, 0x15	; 21
    3a98:	86 e0       	ldi	r24, 0x06	; 6
    3a9a:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.portNo = 2;
    3a9c:	82 e0       	ldi	r24, 0x02	; 2
    3a9e:	80 83       	st	Z, r24
	_uplink_payload.bytes[0] = humIn16 >> 8;
    3aa0:	80 91 05 16 	lds	r24, 0x1605	; 0x801605 <humIn16>
    3aa4:	90 91 06 16 	lds	r25, 0x1606	; 0x801606 <humIn16+0x1>
    3aa8:	92 83       	std	Z+2, r25	; 0x02
	_uplink_payload.bytes[1] = humIn16 & 0xFF;
    3aaa:	83 83       	std	Z+3, r24	; 0x03
	_uplink_payload.bytes[2] = tempIn16 >> 8;
    3aac:	80 91 03 16 	lds	r24, 0x1603	; 0x801603 <tempIn16>
    3ab0:	90 91 04 16 	lds	r25, 0x1604	; 0x801604 <tempIn16+0x1>
    3ab4:	94 83       	std	Z+4, r25	; 0x04
	_uplink_payload.bytes[3] = tempIn16 & 0xFF;
    3ab6:	85 83       	std	Z+5, r24	; 0x05
	_uplink_payload.bytes[4] = co2_ppmIn16 >> 8;
    3ab8:	80 91 01 16 	lds	r24, 0x1601	; 0x801601 <co2_ppmIn16>
    3abc:	90 91 02 16 	lds	r25, 0x1602	; 0x801602 <co2_ppmIn16+0x1>
    3ac0:	96 83       	std	Z+6, r25	; 0x06
	_uplink_payload.bytes[5] = co2_ppmIn16 & 0xFF;
    3ac2:	87 83       	std	Z+7, r24	; 0x07
	return _uplink_payload;
    3ac4:	86 e1       	ldi	r24, 0x16	; 22
    3ac6:	de 01       	movw	r26, r28
    3ac8:	01 90       	ld	r0, Z+
    3aca:	0d 92       	st	X+, r0
    3acc:	8a 95       	dec	r24
    3ace:	e1 f7       	brne	.-8      	; 0x3ac8 <SensorDataPackageHandler_getLoRaPayload+0x8e>
    3ad0:	8d b7       	in	r24, 0x3d	; 61
    3ad2:	9e b7       	in	r25, 0x3e	; 62
    3ad4:	0e 96       	adiw	r24, 0x0e	; 14
    3ad6:	0f b6       	in	r0, 0x3f	; 63
    3ad8:	f8 94       	cli
    3ada:	9e bf       	out	0x3e, r25	; 62
    3adc:	0f be       	out	0x3f, r0	; 63
    3ade:	8d bf       	out	0x3d, r24	; 61
    3ae0:	ce 01       	movw	r24, r28
    3ae2:	df 91       	pop	r29
    3ae4:	cf 91       	pop	r28
    3ae6:	08 95       	ret

00003ae8 <_lora_setup>:
	,  UpLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    3ae8:	cf 93       	push	r28
    3aea:	df 93       	push	r29
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3aec:	81 e0       	ldi	r24, 0x01	; 1
    3aee:	0e 94 b5 29 	call	0x536a	; 0x536a <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3af2:	37 d3       	rcall	.+1646   	; 0x4162 <lora_driver_rn2483FactoryReset>
    3af4:	b3 d5       	rcall	.+2918   	; 0x465c <lora_driver_mapReturnCodeToText>
    3af6:	9f 93       	push	r25
    3af8:	8f 93       	push	r24
    3afa:	81 e3       	ldi	r24, 0x31	; 49
    3afc:	94 e0       	ldi	r25, 0x04	; 4
    3afe:	9f 93       	push	r25
    3b00:	8f 93       	push	r24
    3b02:	0e 94 7d 34 	call	0x68fa	; 0x68fa <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3b06:	ab d4       	rcall	.+2390   	; 0x445e <lora_driver_configureToEu868>
    3b08:	a9 d5       	rcall	.+2898   	; 0x465c <lora_driver_mapReturnCodeToText>
    3b0a:	9f 93       	push	r25
    3b0c:	8f 93       	push	r24
    3b0e:	84 e4       	ldi	r24, 0x44	; 68
    3b10:	94 e0       	ldi	r25, 0x04	; 4
    3b12:	9f 93       	push	r25
    3b14:	8f 93       	push	r24
    3b16:	0e 94 7d 34 	call	0x68fa	; 0x68fa <printf>
    3b1a:	8d e1       	ldi	r24, 0x1D	; 29

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3b1c:	96 e1       	ldi	r25, 0x16	; 22
    3b1e:	33 d3       	rcall	.+1638   	; 0x4186 <lora_driver_getRn2483Hweui>
    3b20:	9d d5       	rcall	.+2874   	; 0x465c <lora_driver_mapReturnCodeToText>
    3b22:	cd e1       	ldi	r28, 0x1D	; 29
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3b24:	d6 e1       	ldi	r29, 0x16	; 22
    3b26:	df 93       	push	r29
    3b28:	cf 93       	push	r28
    3b2a:	9f 93       	push	r25
    3b2c:	8f 93       	push	r24
    3b2e:	8d e5       	ldi	r24, 0x5D	; 93
    3b30:	94 e0       	ldi	r25, 0x04	; 4
    3b32:	9f 93       	push	r25
    3b34:	8f 93       	push	r24
    3b36:	0e 94 7d 34 	call	0x68fa	; 0x68fa <printf>
    3b3a:	ce 01       	movw	r24, r28

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3b3c:	40 d3       	rcall	.+1664   	; 0x41be <lora_driver_setDeviceIdentifier>
    3b3e:	8e d5       	rcall	.+2844   	; 0x465c <lora_driver_mapReturnCodeToText>
    3b40:	9f 93       	push	r25
    3b42:	8f 93       	push	r24
    3b44:	df 93       	push	r29
    3b46:	cf 93       	push	r28
    3b48:	81 e7       	ldi	r24, 0x71	; 113
    3b4a:	94 e0       	ldi	r25, 0x04	; 4
    3b4c:	9f 93       	push	r25
    3b4e:	8f 93       	push	r24
    3b50:	0e 94 7d 34 	call	0x68fa	; 0x68fa <printf>
    3b54:	ae 01       	movw	r20, r28

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3b56:	66 e8       	ldi	r22, 0x86	; 134
    3b58:	74 e0       	ldi	r23, 0x04	; 4
    3b5a:	87 ea       	ldi	r24, 0xA7	; 167
    3b5c:	94 e0       	ldi	r25, 0x04	; 4
    3b5e:	5d d5       	rcall	.+2746   	; 0x461a <lora_driver_setOtaaIdentity>
    3b60:	7d d5       	rcall	.+2810   	; 0x465c <lora_driver_mapReturnCodeToText>
    3b62:	9f 93       	push	r25
    3b64:	8f 93       	push	r24
    3b66:	df 93       	push	r29
    3b68:	cf 93       	push	r28
    3b6a:	86 e8       	ldi	r24, 0x86	; 134
    3b6c:	94 e0       	ldi	r25, 0x04	; 4
    3b6e:	9f 93       	push	r25
    3b70:	8f 93       	push	r24
    3b72:	87 ea       	ldi	r24, 0xA7	; 167
    3b74:	94 e0       	ldi	r25, 0x04	; 4
    3b76:	9f 93       	push	r25
    3b78:	8f 93       	push	r24
    3b7a:	88 eb       	ldi	r24, 0xB8	; 184
    3b7c:	94 e0       	ldi	r25, 0x04	; 4
    3b7e:	9f 93       	push	r25
    3b80:	8f 93       	push	r24
    3b82:	0e 94 7d 34 	call	0x68fa	; 0x68fa <printf>
    3b86:	4e d3       	rcall	.+1692   	; 0x4224 <lora_driver_saveMac>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3b88:	69 d5       	rcall	.+2770   	; 0x465c <lora_driver_mapReturnCodeToText>
    3b8a:	9f 93       	push	r25
    3b8c:	8f 93       	push	r24
    3b8e:	8e ee       	ldi	r24, 0xEE	; 238
    3b90:	94 e0       	ldi	r25, 0x04	; 4
    3b92:	9f 93       	push	r25
    3b94:	8f 93       	push	r24
    3b96:	0e 94 7d 34 	call	0x68fa	; 0x68fa <printf>
    3b9a:	8d b7       	in	r24, 0x3d	; 61

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3b9c:	9e b7       	in	r25, 0x3e	; 62
    3b9e:	82 96       	adiw	r24, 0x22	; 34
    3ba0:	0f b6       	in	r0, 0x3f	; 63
    3ba2:	f8 94       	cli
    3ba4:	9e bf       	out	0x3e, r25	; 62
    3ba6:	0f be       	out	0x3f, r0	; 63
    3ba8:	8d bf       	out	0x3d, r24	; 61
    3baa:	81 e0       	ldi	r24, 0x01	; 1
    3bac:	35 d4       	rcall	.+2154   	; 0x4418 <lora_driver_setAdaptiveDataRate>
    3bae:	56 d5       	rcall	.+2732   	; 0x465c <lora_driver_mapReturnCodeToText>
    3bb0:	9f 93       	push	r25
    3bb2:	8f 93       	push	r24
    3bb4:	8d ef       	ldi	r24, 0xFD	; 253
    3bb6:	94 e0       	ldi	r25, 0x04	; 4
    3bb8:	9f 93       	push	r25
    3bba:	8f 93       	push	r24
    3bbc:	0e 94 7d 34 	call	0x68fa	; 0x68fa <printf>
    3bc0:	84 ef       	ldi	r24, 0xF4	; 244

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3bc2:	91 e0       	ldi	r25, 0x01	; 1
    3bc4:	34 d4       	rcall	.+2152   	; 0x442e <lora_driver_setReceiveDelay>
    3bc6:	4a d5       	rcall	.+2708   	; 0x465c <lora_driver_mapReturnCodeToText>
    3bc8:	9f 93       	push	r25
    3bca:	8f 93       	push	r24
    3bcc:	81 e0       	ldi	r24, 0x01	; 1
    3bce:	8f 93       	push	r24
    3bd0:	84 ef       	ldi	r24, 0xF4	; 244
    3bd2:	8f 93       	push	r24
    3bd4:	8e e1       	ldi	r24, 0x1E	; 30
    3bd6:	95 e0       	ldi	r25, 0x05	; 5
    3bd8:	9f 93       	push	r25
    3bda:	8f 93       	push	r24
    3bdc:	0e 94 7d 34 	call	0x68fa	; 0x68fa <printf>
    3be0:	8d b7       	in	r24, 0x3d	; 61
    3be2:	9e b7       	in	r25, 0x3e	; 62
    3be4:	0a 96       	adiw	r24, 0x0a	; 10
    3be6:	0f b6       	in	r0, 0x3f	; 63
    3be8:	f8 94       	cli
    3bea:	9e bf       	out	0x3e, r25	; 62
    3bec:	0f be       	out	0x3f, r0	; 63
    3bee:	8d bf       	out	0x3d, r24	; 61
    3bf0:	ca e0       	ldi	r28, 0x0A	; 10

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3bf2:	80 e0       	ldi	r24, 0x00	; 0
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3bf4:	1d d3       	rcall	.+1594   	; 0x4230 <lora_driver_join>
    3bf6:	d8 2f       	mov	r29, r24
    3bf8:	31 d5       	rcall	.+2658   	; 0x465c <lora_driver_mapReturnCodeToText>
    3bfa:	9f 93       	push	r25
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3bfc:	8f 93       	push	r24
    3bfe:	1f 92       	push	r1
    3c00:	cf 93       	push	r28
    3c02:	8e e3       	ldi	r24, 0x3E	; 62
    3c04:	95 e0       	ldi	r25, 0x05	; 5
    3c06:	9f 93       	push	r25
    3c08:	8f 93       	push	r24
    3c0a:	0e 94 7d 34 	call	0x68fa	; 0x68fa <printf>
    3c0e:	0f 90       	pop	r0
    3c10:	0f 90       	pop	r0
    3c12:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3c14:	0f 90       	pop	r0
    3c16:	0f 90       	pop	r0
    3c18:	0f 90       	pop	r0
    3c1a:	d8 30       	cpi	r29, 0x08	; 8
    3c1c:	59 f0       	breq	.+22     	; 0x3c34 <_lora_setup+0x14c>
    3c1e:	80 e0       	ldi	r24, 0x00	; 0
    3c20:	0e 94 19 2a 	call	0x5432	; 0x5432 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3c24:	66 e3       	ldi	r22, 0x36	; 54
    3c26:	71 e0       	ldi	r23, 0x01	; 1
    3c28:	80 e0       	ldi	r24, 0x00	; 0
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	0e 94 bc 12 	call	0x2578	; 0x2578 <vTaskDelay>
    3c30:	c1 50       	subi	r28, 0x01	; 1
    3c32:	f9 f6       	brne	.-66     	; 0x3bf2 <_lora_setup+0x10a>
    3c34:	d8 30       	cpi	r29, 0x08	; 8
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3c36:	21 f4       	brne	.+8      	; 0x3c40 <_lora_setup+0x158>
    3c38:	81 e0       	ldi	r24, 0x01	; 1

	if (rc == LORA_ACCEPTED)
    3c3a:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3c3e:	09 c0       	rjmp	.+18     	; 0x3c52 <_lora_setup+0x16a>
    3c40:	81 e0       	ldi	r24, 0x01	; 1
    3c42:	0e 94 0a 2a 	call	0x5414	; 0x5414 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3c46:	80 e0       	ldi	r24, 0x00	; 0
    3c48:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3c4c:	0e 94 d1 06 	call	0xda2	; 0xda2 <vPortYield>
    3c50:	fd cf       	rjmp	.-6      	; 0x3c4c <_lora_setup+0x164>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3c52:	df 91       	pop	r29
    3c54:	cf 91       	pop	r28
    3c56:	08 95       	ret

00003c58 <UpLinkHandler_lora_handler_task>:
		}
	}
}
    3c58:	cf 93       	push	r28
    3c5a:	df 93       	push	r29
    3c5c:	cd b7       	in	r28, 0x3d	; 61

/*-----------------------------------------------------------*/
void UpLinkHandler_lora_handler_task( void *pvParameters )
{
    3c5e:	de b7       	in	r29, 0x3e	; 62
    3c60:	6a 97       	sbiw	r28, 0x1a	; 26
    3c62:	0f b6       	in	r0, 0x3f	; 63
    3c64:	f8 94       	cli
    3c66:	de bf       	out	0x3e, r29	; 62
    3c68:	0f be       	out	0x3f, r0	; 63
    3c6a:	cd bf       	out	0x3d, r28	; 61
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3c6c:	81 e0       	ldi	r24, 0x01	; 1
    3c6e:	6b d2       	rcall	.+1238   	; 0x4146 <lora_driver_resetRn2483>
	vTaskDelay(2);
    3c70:	62 e0       	ldi	r22, 0x02	; 2
    3c72:	70 e0       	ldi	r23, 0x00	; 0
    3c74:	80 e0       	ldi	r24, 0x00	; 0
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	0e 94 bc 12 	call	0x2578	; 0x2578 <vTaskDelay>
	lora_driver_resetRn2483(0);
    3c7c:	80 e0       	ldi	r24, 0x00	; 0
    3c7e:	63 d2       	rcall	.+1222   	; 0x4146 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3c80:	66 e9       	ldi	r22, 0x96	; 150
    3c82:	70 e0       	ldi	r23, 0x00	; 0
    3c84:	80 e0       	ldi	r24, 0x00	; 0
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	0e 94 bc 12 	call	0x2578	; 0x2578 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3c8c:	15 d2       	rcall	.+1066   	; 0x40b8 <lora_driver_flushBuffers>

	_lora_setup();
    3c8e:	2c df       	rcall	.-424    	; 0x3ae8 <_lora_setup>
    3c90:	0e 94 41 10 	call	0x2082	; 0x2082 <xTaskGetTickCount>


	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    3c94:	69 83       	std	Y+1, r22	; 0x01
    3c96:	7a 83       	std	Y+2, r23	; 0x02
    3c98:	8b 83       	std	Y+3, r24	; 0x03
    3c9a:	9c 83       	std	Y+4, r25	; 0x04
    3c9c:	48 ea       	ldi	r20, 0xA8	; 168
	
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3c9e:	58 e4       	ldi	r21, 0x48	; 72
    3ca0:	60 e0       	ldi	r22, 0x00	; 0
    3ca2:	70 e0       	ldi	r23, 0x00	; 0
    3ca4:	ce 01       	movw	r24, r28
    3ca6:	01 96       	adiw	r24, 0x01	; 1
    3ca8:	0e 94 57 12 	call	0x24ae	; 0x24ae <xTaskDelayUntil>
    3cac:	8e e5       	ldi	r24, 0x5E	; 94
		printf("startLoraTask");
    3cae:	95 e0       	ldi	r25, 0x05	; 5
    3cb0:	9f 93       	push	r25
    3cb2:	8f 93       	push	r24
    3cb4:	0e 94 7d 34 	call	0x68fa	; 0x68fa <printf>
		_uplink_payload = SensorDataPackageHandler_getLoRaPayload();
    3cb8:	ce 01       	movw	r24, r28
    3cba:	05 96       	adiw	r24, 0x05	; 5
    3cbc:	be de       	rcall	.-644    	; 0x3a3a <SensorDataPackageHandler_getLoRaPayload>
    3cbe:	86 e1       	ldi	r24, 0x16	; 22
    3cc0:	fe 01       	movw	r30, r28
    3cc2:	35 96       	adiw	r30, 0x05	; 5
    3cc4:	a7 e0       	ldi	r26, 0x07	; 7
    3cc6:	b6 e1       	ldi	r27, 0x16	; 22
    3cc8:	01 90       	ld	r0, Z+
    3cca:	0d 92       	st	X+, r0
    3ccc:	8a 95       	dec	r24
    3cce:	e1 f7       	brne	.-8      	; 0x3cc8 <UpLinkHandler_lora_handler_task+0x70>
    3cd0:	83 e0       	ldi	r24, 0x03	; 3
		status_leds_shortPuls(led_ST4);  // OPTIONAL
    3cd2:	0e 94 2b 2a 	call	0x5456	; 0x5456 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3cd6:	67 e0       	ldi	r22, 0x07	; 7
    3cd8:	76 e1       	ldi	r23, 0x16	; 22
    3cda:	80 e0       	ldi	r24, 0x00	; 0
    3cdc:	d2 d2       	rcall	.+1444   	; 0x4282 <lora_driver_sendUploadMessage>
    3cde:	be d4       	rcall	.+2428   	; 0x465c <lora_driver_mapReturnCodeToText>
    3ce0:	9f 93       	push	r25
    3ce2:	8f 93       	push	r24
    3ce4:	8c e6       	ldi	r24, 0x6C	; 108
    3ce6:	95 e0       	ldi	r25, 0x05	; 5
    3ce8:	9f 93       	push	r25
    3cea:	8f 93       	push	r24
    3cec:	0e 94 7d 34 	call	0x68fa	; 0x68fa <printf>
    3cf0:	0f 90       	pop	r0
    3cf2:	0f 90       	pop	r0
    3cf4:	0f 90       	pop	r0
    3cf6:	0f 90       	pop	r0
    3cf8:	0f 90       	pop	r0
    3cfa:	0f 90       	pop	r0
    3cfc:	cf cf       	rjmp	.-98     	; 0x3c9c <UpLinkHandler_lora_handler_task+0x44>

00003cfe <UpLinkHandler_lora_handler_initialise>:
    3cfe:	ef 92       	push	r14
    3d00:	ff 92       	push	r15

static lora_driver_payload_t _uplink_payload;


void UpLinkHandler_lora_handler_initialise(UBaseType_t UpLinkHandler_lora_handler_task_priority)
{
    3d02:	0f 93       	push	r16
	xTaskCreate(
    3d04:	e1 2c       	mov	r14, r1
    3d06:	f1 2c       	mov	r15, r1
    3d08:	08 2f       	mov	r16, r24
    3d0a:	20 e0       	ldi	r18, 0x00	; 0
    3d0c:	30 e0       	ldi	r19, 0x00	; 0
    3d0e:	48 e8       	ldi	r20, 0x88	; 136
    3d10:	51 e0       	ldi	r21, 0x01	; 1
    3d12:	61 e8       	ldi	r22, 0x81	; 129
    3d14:	75 e0       	ldi	r23, 0x05	; 5
    3d16:	8c e2       	ldi	r24, 0x2C	; 44
    3d18:	9e e1       	ldi	r25, 0x1E	; 30
    3d1a:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  UpLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3d1e:	0f 91       	pop	r16
    3d20:	ff 90       	pop	r15
    3d22:	ef 90       	pop	r14
    3d24:	08 95       	ret

00003d26 <_hihTwiCallback>:
    3d26:	65 30       	cpi	r22, 0x05	; 5
    3d28:	f1 f4       	brne	.+60     	; 0x3d66 <_hihTwiCallback+0x40>
    3d2a:	fa 01       	movw	r30, r20
    3d2c:	80 81       	ld	r24, Z
    3d2e:	8f 73       	andi	r24, 0x3F	; 63
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	98 2f       	mov	r25, r24
    3d34:	88 27       	eor	r24, r24
    3d36:	21 81       	ldd	r18, Z+1	; 0x01
    3d38:	82 2b       	or	r24, r18
    3d3a:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3d3e:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3d42:	82 81       	ldd	r24, Z+2	; 0x02
    3d44:	f0 e4       	ldi	r31, 0x40	; 64
    3d46:	8f 9f       	mul	r24, r31
    3d48:	c0 01       	movw	r24, r0
    3d4a:	11 24       	eor	r1, r1
    3d4c:	fa 01       	movw	r30, r20
    3d4e:	23 81       	ldd	r18, Z+3	; 0x03
    3d50:	26 95       	lsr	r18
    3d52:	26 95       	lsr	r18
    3d54:	82 2b       	or	r24, r18
    3d56:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3d5a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3d5e:	81 e0       	ldi	r24, 0x01	; 1
    3d60:	80 93 81 16 	sts	0x1681, r24	; 0x801681 <_measuringIsReady>
    3d64:	08 95       	ret
    3d66:	64 30       	cpi	r22, 0x04	; 4
    3d68:	51 f0       	breq	.+20     	; 0x3d7e <_hihTwiCallback+0x58>
    3d6a:	80 e0       	ldi	r24, 0x00	; 0
    3d6c:	90 e4       	ldi	r25, 0x40	; 64
    3d6e:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3d72:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3d76:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3d7a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3d7e:	08 95       	ret

00003d80 <hih8120_initialise>:
    3d80:	0f 93       	push	r16
    3d82:	1f 93       	push	r17
    3d84:	03 e9       	ldi	r16, 0x93	; 147
    3d86:	1e e1       	ldi	r17, 0x1E	; 30
    3d88:	20 e0       	ldi	r18, 0x00	; 0
    3d8a:	34 e2       	ldi	r19, 0x24	; 36
    3d8c:	44 ef       	ldi	r20, 0xF4	; 244
    3d8e:	50 e0       	ldi	r21, 0x00	; 0
    3d90:	60 e0       	ldi	r22, 0x00	; 0
    3d92:	87 e2       	ldi	r24, 0x27	; 39
    3d94:	0e 94 4e 2a 	call	0x549c	; 0x549c <twiCreate>
    3d98:	90 93 83 16 	sts	0x1683, r25	; 0x801683 <_hih8120Handler+0x1>
    3d9c:	80 93 82 16 	sts	0x1682, r24	; 0x801682 <_hih8120Handler>
    3da0:	21 e0       	ldi	r18, 0x01	; 1
    3da2:	89 2b       	or	r24, r25
    3da4:	09 f0       	breq	.+2      	; 0x3da8 <hih8120_initialise+0x28>
    3da6:	20 e0       	ldi	r18, 0x00	; 0
    3da8:	82 2f       	mov	r24, r18
    3daa:	1f 91       	pop	r17
    3dac:	0f 91       	pop	r16
    3dae:	08 95       	ret

00003db0 <hih8120_wakeup>:
    3db0:	80 91 82 16 	lds	r24, 0x1682	; 0x801682 <_hih8120Handler>
    3db4:	90 91 83 16 	lds	r25, 0x1683	; 0x801683 <_hih8120Handler+0x1>
    3db8:	00 97       	sbiw	r24, 0x00	; 0
    3dba:	59 f0       	breq	.+22     	; 0x3dd2 <hih8120_wakeup+0x22>
    3dbc:	40 e0       	ldi	r20, 0x00	; 0
    3dbe:	60 e0       	ldi	r22, 0x00	; 0
    3dc0:	70 e0       	ldi	r23, 0x00	; 0
    3dc2:	0e 94 9f 2a 	call	0x553e	; 0x553e <twiTransmit>
    3dc6:	84 30       	cpi	r24, 0x04	; 4
    3dc8:	31 f4       	brne	.+12     	; 0x3dd6 <hih8120_wakeup+0x26>
    3dca:	10 92 81 16 	sts	0x1681, r1	; 0x801681 <_measuringIsReady>
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	08 95       	ret
    3dd2:	82 e0       	ldi	r24, 0x02	; 2
    3dd4:	08 95       	ret
    3dd6:	83 e0       	ldi	r24, 0x03	; 3
    3dd8:	08 95       	ret

00003dda <hih8120_measure>:
    3dda:	80 91 82 16 	lds	r24, 0x1682	; 0x801682 <_hih8120Handler>
    3dde:	90 91 83 16 	lds	r25, 0x1683	; 0x801683 <_hih8120Handler+0x1>
    3de2:	00 97       	sbiw	r24, 0x00	; 0
    3de4:	39 f0       	breq	.+14     	; 0x3df4 <hih8120_measure+0x1a>
    3de6:	64 e0       	ldi	r22, 0x04	; 4
    3de8:	0e 94 eb 2a 	call	0x55d6	; 0x55d6 <twiReceive>
    3dec:	85 30       	cpi	r24, 0x05	; 5
    3dee:	21 f0       	breq	.+8      	; 0x3df8 <hih8120_measure+0x1e>
    3df0:	83 e0       	ldi	r24, 0x03	; 3
    3df2:	08 95       	ret
    3df4:	82 e0       	ldi	r24, 0x02	; 2
    3df6:	08 95       	ret
    3df8:	80 e0       	ldi	r24, 0x00	; 0
    3dfa:	08 95       	ret

00003dfc <hih8120_getHumidity>:
    3dfc:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3e00:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3e04:	80 e0       	ldi	r24, 0x00	; 0
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <__floatunsisf>
    3e0c:	20 e0       	ldi	r18, 0x00	; 0
    3e0e:	30 e0       	ldi	r19, 0x00	; 0
    3e10:	48 ec       	ldi	r20, 0xC8	; 200
    3e12:	52 e4       	ldi	r21, 0x42	; 66
    3e14:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <__mulsf3>
    3e18:	20 e0       	ldi	r18, 0x00	; 0
    3e1a:	38 ef       	ldi	r19, 0xF8	; 248
    3e1c:	4f e7       	ldi	r20, 0x7F	; 127
    3e1e:	56 e4       	ldi	r21, 0x46	; 70
    3e20:	0c 94 5c 2c 	jmp	0x58b8	; 0x58b8 <__divsf3>
    3e24:	08 95       	ret

00003e26 <hih8120_getHumidityPercent_x10>:
    3e26:	ea df       	rcall	.-44     	; 0x3dfc <hih8120_getHumidity>
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	30 e0       	ldi	r19, 0x00	; 0
    3e2c:	40 e2       	ldi	r20, 0x20	; 32
    3e2e:	51 e4       	ldi	r21, 0x41	; 65
    3e30:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <__mulsf3>
    3e34:	0e 94 c9 2c 	call	0x5992	; 0x5992 <__fixunssfsi>
    3e38:	cb 01       	movw	r24, r22
    3e3a:	08 95       	ret

00003e3c <hih8120_getTemperature>:
    3e3c:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3e40:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3e44:	80 e0       	ldi	r24, 0x00	; 0
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <__floatunsisf>
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	45 e2       	ldi	r20, 0x25	; 37
    3e52:	53 e4       	ldi	r21, 0x43	; 67
    3e54:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <__mulsf3>
    3e58:	20 e0       	ldi	r18, 0x00	; 0
    3e5a:	38 ef       	ldi	r19, 0xF8	; 248
    3e5c:	4f e7       	ldi	r20, 0x7F	; 127
    3e5e:	56 e4       	ldi	r21, 0x46	; 70
    3e60:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__divsf3>
    3e64:	20 e0       	ldi	r18, 0x00	; 0
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	40 e2       	ldi	r20, 0x20	; 32
    3e6a:	52 e4       	ldi	r21, 0x42	; 66
    3e6c:	0c 94 f7 2b 	jmp	0x57ee	; 0x57ee <__subsf3>
    3e70:	08 95       	ret

00003e72 <hih8120_getTemperature_x10>:
    3e72:	e4 df       	rcall	.-56     	; 0x3e3c <hih8120_getTemperature>
    3e74:	20 e0       	ldi	r18, 0x00	; 0
    3e76:	30 e0       	ldi	r19, 0x00	; 0
    3e78:	40 e2       	ldi	r20, 0x20	; 32
    3e7a:	51 e4       	ldi	r21, 0x41	; 65
    3e7c:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <__mulsf3>
    3e80:	0e 94 c4 2c 	call	0x5988	; 0x5988 <__fixsfsi>
    3e84:	cb 01       	movw	r24, r22
    3e86:	08 95       	ret

00003e88 <_serialCallBack>:
    3e88:	0f 93       	push	r16
    3e8a:	1f 93       	push	r17
    3e8c:	cf 93       	push	r28
    3e8e:	df 93       	push	r29
    3e90:	1f 92       	push	r1
    3e92:	1f 92       	push	r1
    3e94:	cd b7       	in	r28, 0x3d	; 61
    3e96:	de b7       	in	r29, 0x3e	; 62
    3e98:	8c 01       	movw	r16, r24
    3e9a:	19 82       	std	Y+1, r1	; 0x01
    3e9c:	2d c0       	rjmp	.+90     	; 0x3ef8 <_serialCallBack+0x70>
    3e9e:	e0 91 bb 16 	lds	r30, 0x16BB	; 0x8016bb <rec_buf_inp.2878>
    3ea2:	ec 32       	cpi	r30, 0x2C	; 44
    3ea4:	50 f4       	brcc	.+20     	; 0x3eba <_serialCallBack+0x32>
    3ea6:	81 e0       	ldi	r24, 0x01	; 1
    3ea8:	8e 0f       	add	r24, r30
    3eaa:	80 93 bb 16 	sts	0x16BB, r24	; 0x8016bb <rec_buf_inp.2878>
    3eae:	f0 e0       	ldi	r31, 0x00	; 0
    3eb0:	e3 51       	subi	r30, 0x13	; 19
    3eb2:	f9 4e       	sbci	r31, 0xE9	; 233
    3eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb6:	80 83       	st	Z, r24
    3eb8:	02 c0       	rjmp	.+4      	; 0x3ebe <_serialCallBack+0x36>
    3eba:	10 92 bb 16 	sts	0x16BB, r1	; 0x8016bb <rec_buf_inp.2878>
    3ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec0:	8a 30       	cpi	r24, 0x0A	; 10
    3ec2:	d1 f4       	brne	.+52     	; 0x3ef8 <_serialCallBack+0x70>
    3ec4:	40 91 bb 16 	lds	r20, 0x16BB	; 0x8016bb <rec_buf_inp.2878>
    3ec8:	50 e0       	ldi	r21, 0x00	; 0
    3eca:	fa 01       	movw	r30, r20
    3ecc:	e5 51       	subi	r30, 0x15	; 21
    3ece:	f9 4e       	sbci	r31, 0xE9	; 233
    3ed0:	10 82       	st	Z, r1
    3ed2:	41 50       	subi	r20, 0x01	; 1
    3ed4:	51 09       	sbc	r21, r1
    3ed6:	9e 01       	movw	r18, r28
    3ed8:	2f 5f       	subi	r18, 0xFF	; 255
    3eda:	3f 4f       	sbci	r19, 0xFF	; 255
    3edc:	6d ee       	ldi	r22, 0xED	; 237
    3ede:	76 e1       	ldi	r23, 0x16	; 22
    3ee0:	80 91 be 16 	lds	r24, 0x16BE	; 0x8016be <_serialReplyBufferHandle>
    3ee4:	90 91 bf 16 	lds	r25, 0x16BF	; 0x8016bf <_serialReplyBufferHandle+0x1>
    3ee8:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <xStreamBufferSendFromISR>
    3eec:	89 81       	ldd	r24, Y+1	; 0x01
    3eee:	81 11       	cpse	r24, r1
    3ef0:	0e 94 d1 06 	call	0xda2	; 0xda2 <vPortYield>
    3ef4:	10 92 bb 16 	sts	0x16BB, r1	; 0x8016bb <rec_buf_inp.2878>
    3ef8:	be 01       	movw	r22, r28
    3efa:	6e 5f       	subi	r22, 0xFE	; 254
    3efc:	7f 4f       	sbci	r23, 0xFF	; 255
    3efe:	c8 01       	movw	r24, r16
    3f00:	49 d6       	rcall	.+3218   	; 0x4b94 <serial_getByte>
    3f02:	88 23       	and	r24, r24
    3f04:	61 f2       	breq	.-104    	; 0x3e9e <_serialCallBack+0x16>
    3f06:	0f 90       	pop	r0
    3f08:	0f 90       	pop	r0
    3f0a:	df 91       	pop	r29
    3f0c:	cf 91       	pop	r28
    3f0e:	1f 91       	pop	r17
    3f10:	0f 91       	pop	r16
    3f12:	08 95       	ret

00003f14 <_uploadMessage>:
    3f14:	0f 93       	push	r16
    3f16:	1f 93       	push	r17
    3f18:	cf 93       	push	r28
    3f1a:	df 93       	push	r29
    3f1c:	8c 01       	movw	r16, r24
    3f1e:	eb 01       	movw	r28, r22
    3f20:	80 91 be 16 	lds	r24, 0x16BE	; 0x8016be <_serialReplyBufferHandle>
    3f24:	90 91 bf 16 	lds	r25, 0x16BF	; 0x8016bf <_serialReplyBufferHandle+0x1>
    3f28:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <xStreamBufferReset>
    3f2c:	b8 01       	movw	r22, r16
    3f2e:	84 e8       	ldi	r24, 0x84	; 132
    3f30:	96 e1       	ldi	r25, 0x16	; 22
    3f32:	0e 94 17 34 	call	0x682e	; 0x682e <strcpy>
    3f36:	20 97       	sbiw	r28, 0x00	; 0
    3f38:	79 f0       	breq	.+30     	; 0x3f58 <_uploadMessage+0x44>
    3f3a:	e4 e8       	ldi	r30, 0x84	; 132
    3f3c:	f6 e1       	ldi	r31, 0x16	; 22
    3f3e:	01 90       	ld	r0, Z+
    3f40:	00 20       	and	r0, r0
    3f42:	e9 f7       	brne	.-6      	; 0x3f3e <_uploadMessage+0x2a>
    3f44:	31 97       	sbiw	r30, 0x01	; 1
    3f46:	80 e2       	ldi	r24, 0x20	; 32
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	91 83       	std	Z+1, r25	; 0x01
    3f4c:	80 83       	st	Z, r24
    3f4e:	be 01       	movw	r22, r28
    3f50:	84 e8       	ldi	r24, 0x84	; 132
    3f52:	96 e1       	ldi	r25, 0x16	; 22
    3f54:	0e 94 0c 34 	call	0x6818	; 0x6818 <strcat>
    3f58:	e4 e8       	ldi	r30, 0x84	; 132
    3f5a:	f6 e1       	ldi	r31, 0x16	; 22
    3f5c:	df 01       	movw	r26, r30
    3f5e:	0d 90       	ld	r0, X+
    3f60:	00 20       	and	r0, r0
    3f62:	e9 f7       	brne	.-6      	; 0x3f5e <_uploadMessage+0x4a>
    3f64:	11 97       	sbiw	r26, 0x01	; 1
    3f66:	8d e0       	ldi	r24, 0x0D	; 13
    3f68:	9a e0       	ldi	r25, 0x0A	; 10
    3f6a:	11 96       	adiw	r26, 0x01	; 1
    3f6c:	9c 93       	st	X, r25
    3f6e:	8e 93       	st	-X, r24
    3f70:	12 96       	adiw	r26, 0x02	; 2
    3f72:	1c 92       	st	X, r1
    3f74:	01 90       	ld	r0, Z+
    3f76:	00 20       	and	r0, r0
    3f78:	e9 f7       	brne	.-6      	; 0x3f74 <_uploadMessage+0x60>
    3f7a:	31 97       	sbiw	r30, 0x01	; 1
    3f7c:	e4 58       	subi	r30, 0x84	; 132
    3f7e:	f6 41       	sbci	r31, 0x16	; 22
    3f80:	ae 2f       	mov	r26, r30
    3f82:	84 e8       	ldi	r24, 0x84	; 132
    3f84:	96 e1       	ldi	r25, 0x16	; 22
    3f86:	ac 01       	movw	r20, r24
    3f88:	6a 2f       	mov	r22, r26
    3f8a:	80 91 c0 16 	lds	r24, 0x16C0	; 0x8016c0 <_rn2483_serial>
    3f8e:	90 91 c1 16 	lds	r25, 0x16C1	; 0x8016c1 <_rn2483_serial+0x1>
    3f92:	ab d5       	rcall	.+2902   	; 0x4aea <serial_sendBytes>
    3f94:	81 11       	cpse	r24, r1
    3f96:	11 c0       	rjmp	.+34     	; 0x3fba <_uploadMessage+0xa6>
    3f98:	08 e2       	ldi	r16, 0x28	; 40
    3f9a:	15 e0       	ldi	r17, 0x05	; 5
    3f9c:	20 e0       	ldi	r18, 0x00	; 0
    3f9e:	30 e0       	ldi	r19, 0x00	; 0
    3fa0:	4d e2       	ldi	r20, 0x2D	; 45
    3fa2:	50 e0       	ldi	r21, 0x00	; 0
    3fa4:	67 e4       	ldi	r22, 0x47	; 71
    3fa6:	77 e1       	ldi	r23, 0x17	; 23
    3fa8:	80 91 be 16 	lds	r24, 0x16BE	; 0x8016be <_serialReplyBufferHandle>
    3fac:	90 91 bf 16 	lds	r25, 0x16BF	; 0x8016bf <_serialReplyBufferHandle+0x1>
    3fb0:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <xStreamBufferReceive>
    3fb4:	87 e4       	ldi	r24, 0x47	; 71
    3fb6:	97 e1       	ldi	r25, 0x17	; 23
    3fb8:	02 c0       	rjmp	.+4      	; 0x3fbe <_uploadMessage+0xaa>
    3fba:	80 e0       	ldi	r24, 0x00	; 0
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	df 91       	pop	r29
    3fc0:	cf 91       	pop	r28
    3fc2:	1f 91       	pop	r17
    3fc4:	0f 91       	pop	r16
    3fc6:	08 95       	ret

00003fc8 <_reply2ReturnCode>:
    3fc8:	2f 92       	push	r2
    3fca:	3f 92       	push	r3
    3fcc:	4f 92       	push	r4
    3fce:	5f 92       	push	r5
    3fd0:	6f 92       	push	r6
    3fd2:	7f 92       	push	r7
    3fd4:	8f 92       	push	r8
    3fd6:	9f 92       	push	r9
    3fd8:	af 92       	push	r10
    3fda:	bf 92       	push	r11
    3fdc:	cf 92       	push	r12
    3fde:	df 92       	push	r13
    3fe0:	ef 92       	push	r14
    3fe2:	ff 92       	push	r15
    3fe4:	0f 93       	push	r16
    3fe6:	1f 93       	push	r17
    3fe8:	cf 93       	push	r28
    3fea:	df 93       	push	r29
    3fec:	5c 01       	movw	r10, r24
    3fee:	fc 01       	movw	r30, r24
    3ff0:	01 90       	ld	r0, Z+
    3ff2:	00 20       	and	r0, r0
    3ff4:	e9 f7       	brne	.-6      	; 0x3ff0 <_reply2ReturnCode+0x28>
    3ff6:	31 97       	sbiw	r30, 0x01	; 1
    3ff8:	6f 01       	movw	r12, r30
    3ffa:	c8 1a       	sub	r12, r24
    3ffc:	d9 0a       	sbc	r13, r25
    3ffe:	5c 2c       	mov	r5, r12
    4000:	0f 2e       	mov	r0, r31
    4002:	f1 e2       	ldi	r31, 0x21	; 33
    4004:	8f 2e       	mov	r8, r31
    4006:	f8 e0       	ldi	r31, 0x08	; 8
    4008:	9f 2e       	mov	r9, r31
    400a:	f0 2d       	mov	r31, r0
    400c:	e1 2c       	mov	r14, r1
    400e:	f1 2c       	mov	r15, r1
    4010:	4c 2c       	mov	r4, r12
    4012:	37 01       	movw	r6, r14
    4014:	f4 01       	movw	r30, r8
    4016:	01 81       	ldd	r16, Z+1	; 0x01
    4018:	12 81       	ldd	r17, Z+2	; 0x02
    401a:	e8 01       	movw	r28, r16
    401c:	09 90       	ld	r0, Y+
    401e:	00 20       	and	r0, r0
    4020:	e9 f7       	brne	.-6      	; 0x401c <_reply2ReturnCode+0x54>
    4022:	21 97       	sbiw	r28, 0x01	; 1
    4024:	c0 1b       	sub	r28, r16
    4026:	d1 0b       	sbc	r29, r17
    4028:	3c 2e       	mov	r3, r28
    402a:	f9 e0       	ldi	r31, 0x09	; 9
    402c:	cf 16       	cp	r12, r31
    402e:	d1 04       	cpc	r13, r1
    4030:	58 f0       	brcs	.+22     	; 0x4048 <_reply2ReturnCode+0x80>
    4032:	f4 01       	movw	r30, r8
    4034:	20 80       	ld	r2, Z
    4036:	fe e0       	ldi	r31, 0x0E	; 14
    4038:	2f 12       	cpse	r2, r31
    403a:	06 c0       	rjmp	.+12     	; 0x4048 <_reply2ReturnCode+0x80>
    403c:	b8 01       	movw	r22, r16
    403e:	c5 01       	movw	r24, r10
    4040:	0e 94 e7 33 	call	0x67ce	; 0x67ce <strcasestr>
    4044:	89 2b       	or	r24, r25
    4046:	09 f5       	brne	.+66     	; 0x408a <_reply2ReturnCode+0xc2>
    4048:	44 2d       	mov	r20, r4
    404a:	35 14       	cp	r3, r5
    404c:	08 f4       	brcc	.+2      	; 0x4050 <_reply2ReturnCode+0x88>
    404e:	4c 2f       	mov	r20, r28
    4050:	50 e0       	ldi	r21, 0x00	; 0
    4052:	b8 01       	movw	r22, r16
    4054:	c5 01       	movw	r24, r10
    4056:	0e 94 1e 34 	call	0x683c	; 0x683c <strncasecmp>
    405a:	89 2b       	or	r24, r25
    405c:	49 f4       	brne	.+18     	; 0x4070 <_reply2ReturnCode+0xa8>
    405e:	f3 01       	movw	r30, r6
    4060:	ee 0f       	add	r30, r30
    4062:	ff 1f       	adc	r31, r31
    4064:	e6 0d       	add	r30, r6
    4066:	f7 1d       	adc	r31, r7
    4068:	ef 5d       	subi	r30, 0xDF	; 223
    406a:	f7 4f       	sbci	r31, 0xF7	; 247
    406c:	20 80       	ld	r2, Z
    406e:	0d c0       	rjmp	.+26     	; 0x408a <_reply2ReturnCode+0xc2>
    4070:	8f ef       	ldi	r24, 0xFF	; 255
    4072:	e8 1a       	sub	r14, r24
    4074:	f8 0a       	sbc	r15, r24
    4076:	e3 e0       	ldi	r30, 0x03	; 3
    4078:	8e 0e       	add	r8, r30
    407a:	91 1c       	adc	r9, r1
    407c:	f1 e1       	ldi	r31, 0x11	; 17
    407e:	ef 16       	cp	r14, r31
    4080:	f1 04       	cpc	r15, r1
    4082:	39 f6       	brne	.-114    	; 0x4012 <_reply2ReturnCode+0x4a>
    4084:	68 94       	set
    4086:	22 24       	eor	r2, r2
    4088:	24 f8       	bld	r2, 4
    408a:	82 2d       	mov	r24, r2
    408c:	df 91       	pop	r29
    408e:	cf 91       	pop	r28
    4090:	1f 91       	pop	r17
    4092:	0f 91       	pop	r16
    4094:	ff 90       	pop	r15
    4096:	ef 90       	pop	r14
    4098:	df 90       	pop	r13
    409a:	cf 90       	pop	r12
    409c:	bf 90       	pop	r11
    409e:	af 90       	pop	r10
    40a0:	9f 90       	pop	r9
    40a2:	8f 90       	pop	r8
    40a4:	7f 90       	pop	r7
    40a6:	6f 90       	pop	r6
    40a8:	5f 90       	pop	r5
    40aa:	4f 90       	pop	r4
    40ac:	3f 90       	pop	r3
    40ae:	2f 90       	pop	r2
    40b0:	08 95       	ret

000040b2 <_uploadMessageRc>:
    40b2:	30 df       	rcall	.-416    	; 0x3f14 <_uploadMessage>
    40b4:	89 cf       	rjmp	.-238    	; 0x3fc8 <_reply2ReturnCode>
    40b6:	08 95       	ret

000040b8 <lora_driver_flushBuffers>:
    40b8:	80 91 be 16 	lds	r24, 0x16BE	; 0x8016be <_serialReplyBufferHandle>
    40bc:	90 91 bf 16 	lds	r25, 0x16BF	; 0x8016bf <_serialReplyBufferHandle+0x1>
    40c0:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <xStreamBufferReset>
    40c4:	08 95       	ret

000040c6 <lora_driver_initialise>:
    40c6:	8f 92       	push	r8
    40c8:	9f 92       	push	r9
    40ca:	af 92       	push	r10
    40cc:	cf 92       	push	r12
    40ce:	ef 92       	push	r14
    40d0:	0f 93       	push	r16
    40d2:	1f 93       	push	r17
    40d4:	cf 93       	push	r28
    40d6:	c8 2f       	mov	r28, r24
    40d8:	8b 01       	movw	r16, r22
    40da:	41 e0       	ldi	r20, 0x01	; 1
    40dc:	60 e0       	ldi	r22, 0x00	; 0
    40de:	70 e0       	ldi	r23, 0x00	; 0
    40e0:	88 ec       	ldi	r24, 0xC8	; 200
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	0e 94 b2 0b 	call	0x1764	; 0x1764 <xStreamBufferGenericCreate>
    40e8:	90 93 bf 16 	sts	0x16BF, r25	; 0x8016bf <_serialReplyBufferHandle+0x1>
    40ec:	80 93 be 16 	sts	0x16BE, r24	; 0x8016be <_serialReplyBufferHandle>
    40f0:	10 93 bd 16 	sts	0x16BD, r17	; 0x8016bd <_downlinkMessageBuffer+0x1>
    40f4:	00 93 bc 16 	sts	0x16BC, r16	; 0x8016bc <_downlinkMessageBuffer>
    40f8:	0f 2e       	mov	r0, r31
    40fa:	f4 e4       	ldi	r31, 0x44	; 68
    40fc:	8f 2e       	mov	r8, r31
    40fe:	ff e1       	ldi	r31, 0x1F	; 31
    4100:	9f 2e       	mov	r9, r31
    4102:	f0 2d       	mov	r31, r0
    4104:	68 94       	set
    4106:	aa 24       	eor	r10, r10
    4108:	a6 f8       	bld	r10, 6
    410a:	68 94       	set
    410c:	cc 24       	eor	r12, r12
    410e:	c6 f8       	bld	r12, 6
    4110:	e1 2c       	mov	r14, r1
    4112:	00 e0       	ldi	r16, 0x00	; 0
    4114:	23 e0       	ldi	r18, 0x03	; 3
    4116:	40 e0       	ldi	r20, 0x00	; 0
    4118:	51 ee       	ldi	r21, 0xE1	; 225
    411a:	60 e0       	ldi	r22, 0x00	; 0
    411c:	70 e0       	ldi	r23, 0x00	; 0
    411e:	8c 2f       	mov	r24, r28
    4120:	17 d4       	rcall	.+2094   	; 0x4950 <serial_create>
    4122:	90 93 c1 16 	sts	0x16C1, r25	; 0x8016c1 <_rn2483_serial+0x1>
    4126:	80 93 c0 16 	sts	0x16C0, r24	; 0x8016c0 <_rn2483_serial>
    412a:	e7 e0       	ldi	r30, 0x07	; 7
    412c:	f1 e0       	ldi	r31, 0x01	; 1
    412e:	80 81       	ld	r24, Z
    4130:	80 61       	ori	r24, 0x10	; 16
    4132:	80 83       	st	Z, r24
    4134:	cf 91       	pop	r28
    4136:	1f 91       	pop	r17
    4138:	0f 91       	pop	r16
    413a:	ef 90       	pop	r14
    413c:	cf 90       	pop	r12
    413e:	af 90       	pop	r10
    4140:	9f 90       	pop	r9
    4142:	8f 90       	pop	r8
    4144:	08 95       	ret

00004146 <lora_driver_resetRn2483>:
    4146:	88 23       	and	r24, r24
    4148:	31 f0       	breq	.+12     	; 0x4156 <lora_driver_resetRn2483+0x10>
    414a:	e8 e0       	ldi	r30, 0x08	; 8
    414c:	f1 e0       	ldi	r31, 0x01	; 1
    414e:	80 81       	ld	r24, Z
    4150:	8f 7e       	andi	r24, 0xEF	; 239
    4152:	80 83       	st	Z, r24
    4154:	08 95       	ret
    4156:	e8 e0       	ldi	r30, 0x08	; 8
    4158:	f1 e0       	ldi	r31, 0x01	; 1
    415a:	80 81       	ld	r24, Z
    415c:	80 61       	ori	r24, 0x10	; 16
    415e:	80 83       	st	Z, r24
    4160:	08 95       	ret

00004162 <lora_driver_rn2483FactoryReset>:
    4162:	60 e0       	ldi	r22, 0x00	; 0
    4164:	70 e0       	ldi	r23, 0x00	; 0
    4166:	87 ea       	ldi	r24, 0xA7	; 167
    4168:	95 e0       	ldi	r25, 0x05	; 5
    416a:	d4 de       	rcall	.-600    	; 0x3f14 <_uploadMessage>
    416c:	e7 e4       	ldi	r30, 0x47	; 71
    416e:	f7 e1       	ldi	r31, 0x17	; 23
    4170:	01 90       	ld	r0, Z+
    4172:	00 20       	and	r0, r0
    4174:	e9 f7       	brne	.-6      	; 0x4170 <lora_driver_rn2483FactoryReset+0xe>
    4176:	31 97       	sbiw	r30, 0x01	; 1
    4178:	e7 54       	subi	r30, 0x47	; 71
    417a:	f7 41       	sbci	r31, 0x17	; 23
    417c:	81 e0       	ldi	r24, 0x01	; 1
    417e:	75 97       	sbiw	r30, 0x15	; 21
    4180:	08 f0       	brcs	.+2      	; 0x4184 <lora_driver_rn2483FactoryReset+0x22>
    4182:	80 e0       	ldi	r24, 0x00	; 0
    4184:	08 95       	ret

00004186 <lora_driver_getRn2483Hweui>:
    4186:	cf 93       	push	r28
    4188:	df 93       	push	r29
    418a:	ec 01       	movw	r28, r24
    418c:	60 e0       	ldi	r22, 0x00	; 0
    418e:	70 e0       	ldi	r23, 0x00	; 0
    4190:	88 eb       	ldi	r24, 0xB8	; 184
    4192:	95 e0       	ldi	r25, 0x05	; 5
    4194:	bf de       	rcall	.-642    	; 0x3f14 <_uploadMessage>
    4196:	e7 e4       	ldi	r30, 0x47	; 71
    4198:	f7 e1       	ldi	r31, 0x17	; 23
    419a:	01 90       	ld	r0, Z+
    419c:	00 20       	and	r0, r0
    419e:	e9 f7       	brne	.-6      	; 0x419a <lora_driver_getRn2483Hweui+0x14>
    41a0:	e8 55       	subi	r30, 0x58	; 88
    41a2:	f7 41       	sbci	r31, 0x17	; 23
    41a4:	39 f4       	brne	.+14     	; 0x41b4 <lora_driver_getRn2483Hweui+0x2e>
    41a6:	67 e4       	ldi	r22, 0x47	; 71
    41a8:	77 e1       	ldi	r23, 0x17	; 23
    41aa:	ce 01       	movw	r24, r28
    41ac:	0e 94 17 34 	call	0x682e	; 0x682e <strcpy>
    41b0:	80 e0       	ldi	r24, 0x00	; 0
    41b2:	02 c0       	rjmp	.+4      	; 0x41b8 <lora_driver_getRn2483Hweui+0x32>
    41b4:	18 82       	st	Y, r1
    41b6:	81 e0       	ldi	r24, 0x01	; 1
    41b8:	df 91       	pop	r29
    41ba:	cf 91       	pop	r28
    41bc:	08 95       	ret

000041be <lora_driver_setDeviceIdentifier>:
    41be:	fc 01       	movw	r30, r24
    41c0:	01 90       	ld	r0, Z+
    41c2:	00 20       	and	r0, r0
    41c4:	e9 f7       	brne	.-6      	; 0x41c0 <lora_driver_setDeviceIdentifier+0x2>
    41c6:	9f 01       	movw	r18, r30
    41c8:	21 51       	subi	r18, 0x11	; 17
    41ca:	31 09       	sbc	r19, r1
    41cc:	28 17       	cp	r18, r24
    41ce:	39 07       	cpc	r19, r25
    41d0:	29 f4       	brne	.+10     	; 0x41dc <lora_driver_setDeviceIdentifier+0x1e>
    41d2:	bc 01       	movw	r22, r24
    41d4:	86 ee       	ldi	r24, 0xE6	; 230
    41d6:	95 e0       	ldi	r25, 0x05	; 5
    41d8:	6c cf       	rjmp	.-296    	; 0x40b2 <_uploadMessageRc>
    41da:	08 95       	ret
    41dc:	89 e0       	ldi	r24, 0x09	; 9
    41de:	08 95       	ret

000041e0 <lora_driver_setApplicationIdentifier>:
    41e0:	fc 01       	movw	r30, r24
    41e2:	01 90       	ld	r0, Z+
    41e4:	00 20       	and	r0, r0
    41e6:	e9 f7       	brne	.-6      	; 0x41e2 <lora_driver_setApplicationIdentifier+0x2>
    41e8:	9f 01       	movw	r18, r30
    41ea:	21 51       	subi	r18, 0x11	; 17
    41ec:	31 09       	sbc	r19, r1
    41ee:	28 17       	cp	r18, r24
    41f0:	39 07       	cpc	r19, r25
    41f2:	29 f4       	brne	.+10     	; 0x41fe <lora_driver_setApplicationIdentifier+0x1e>
    41f4:	bc 01       	movw	r22, r24
    41f6:	85 ef       	ldi	r24, 0xF5	; 245
    41f8:	95 e0       	ldi	r25, 0x05	; 5
    41fa:	5b cf       	rjmp	.-330    	; 0x40b2 <_uploadMessageRc>
    41fc:	08 95       	ret
    41fe:	89 e0       	ldi	r24, 0x09	; 9
    4200:	08 95       	ret

00004202 <lora_driver_setApplicationKey>:
    4202:	fc 01       	movw	r30, r24
    4204:	01 90       	ld	r0, Z+
    4206:	00 20       	and	r0, r0
    4208:	e9 f7       	brne	.-6      	; 0x4204 <lora_driver_setApplicationKey+0x2>
    420a:	9f 01       	movw	r18, r30
    420c:	21 52       	subi	r18, 0x21	; 33
    420e:	31 09       	sbc	r19, r1
    4210:	28 17       	cp	r18, r24
    4212:	39 07       	cpc	r19, r25
    4214:	29 f4       	brne	.+10     	; 0x4220 <lora_driver_setApplicationKey+0x1e>
    4216:	bc 01       	movw	r22, r24
    4218:	84 e0       	ldi	r24, 0x04	; 4
    421a:	96 e0       	ldi	r25, 0x06	; 6
    421c:	4a cf       	rjmp	.-364    	; 0x40b2 <_uploadMessageRc>
    421e:	08 95       	ret
    4220:	89 e0       	ldi	r24, 0x09	; 9
    4222:	08 95       	ret

00004224 <lora_driver_saveMac>:
    4224:	60 e0       	ldi	r22, 0x00	; 0
    4226:	70 e0       	ldi	r23, 0x00	; 0
    4228:	83 e4       	ldi	r24, 0x43	; 67
    422a:	96 e0       	ldi	r25, 0x06	; 6
    422c:	42 cf       	rjmp	.-380    	; 0x40b2 <_uploadMessageRc>
    422e:	08 95       	ret

00004230 <lora_driver_join>:
    4230:	0f 93       	push	r16
    4232:	1f 93       	push	r17
    4234:	e8 2f       	mov	r30, r24
    4236:	f0 e0       	ldi	r31, 0x00	; 0
    4238:	ee 0f       	add	r30, r30
    423a:	ff 1f       	adc	r31, r31
    423c:	e3 5e       	subi	r30, 0xE3	; 227
    423e:	f7 4f       	sbci	r31, 0xF7	; 247
    4240:	60 81       	ld	r22, Z
    4242:	71 81       	ldd	r23, Z+1	; 0x01
    4244:	8c e4       	ldi	r24, 0x4C	; 76
    4246:	96 e0       	ldi	r25, 0x06	; 6
    4248:	34 df       	rcall	.-408    	; 0x40b2 <_uploadMessageRc>
    424a:	81 11       	cpse	r24, r1
    424c:	14 c0       	rjmp	.+40     	; 0x4276 <lora_driver_join+0x46>
    424e:	08 e2       	ldi	r16, 0x28	; 40
    4250:	15 e0       	ldi	r17, 0x05	; 5
    4252:	20 e0       	ldi	r18, 0x00	; 0
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	4d e2       	ldi	r20, 0x2D	; 45
    4258:	50 e0       	ldi	r21, 0x00	; 0
    425a:	67 e4       	ldi	r22, 0x47	; 71
    425c:	77 e1       	ldi	r23, 0x17	; 23
    425e:	80 91 be 16 	lds	r24, 0x16BE	; 0x8016be <_serialReplyBufferHandle>
    4262:	90 91 bf 16 	lds	r25, 0x16BF	; 0x8016bf <_serialReplyBufferHandle+0x1>
    4266:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <xStreamBufferReceive>
    426a:	88 23       	and	r24, r24
    426c:	21 f0       	breq	.+8      	; 0x4276 <lora_driver_join+0x46>
    426e:	87 e4       	ldi	r24, 0x47	; 71
    4270:	97 e1       	ldi	r25, 0x17	; 23
    4272:	aa de       	rcall	.-684    	; 0x3fc8 <_reply2ReturnCode>
    4274:	03 c0       	rjmp	.+6      	; 0x427c <lora_driver_join+0x4c>
    4276:	87 e4       	ldi	r24, 0x47	; 71
    4278:	97 e1       	ldi	r25, 0x17	; 23
    427a:	a6 de       	rcall	.-692    	; 0x3fc8 <_reply2ReturnCode>
    427c:	1f 91       	pop	r17
    427e:	0f 91       	pop	r16
    4280:	08 95       	ret

00004282 <lora_driver_sendUploadMessage>:
    4282:	0f 93       	push	r16
    4284:	1f 93       	push	r17
    4286:	cf 93       	push	r28
    4288:	df 93       	push	r29
    428a:	1f 92       	push	r1
    428c:	cd b7       	in	r28, 0x3d	; 61
    428e:	de b7       	in	r29, 0x3e	; 62
    4290:	db 01       	movw	r26, r22
    4292:	11 96       	adiw	r26, 0x01	; 1
    4294:	9c 91       	ld	r25, X
    4296:	11 97       	sbiw	r26, 0x01	; 1
    4298:	95 31       	cpi	r25, 0x15	; 21
    429a:	08 f0       	brcs	.+2      	; 0x429e <lora_driver_sendUploadMessage+0x1c>
    429c:	b4 c0       	rjmp	.+360    	; 0x4406 <lora_driver_sendUploadMessage+0x184>
    429e:	99 23       	and	r25, r25
    42a0:	81 f1       	breq	.+96     	; 0x4302 <lora_driver_sendUploadMessage+0x80>
    42a2:	60 e0       	ldi	r22, 0x00	; 0
    42a4:	70 e0       	ldi	r23, 0x00	; 0
    42a6:	27 2f       	mov	r18, r23
    42a8:	30 e0       	ldi	r19, 0x00	; 0
    42aa:	46 2f       	mov	r20, r22
    42ac:	50 e0       	ldi	r21, 0x00	; 0
    42ae:	fd 01       	movw	r30, r26
    42b0:	e4 0f       	add	r30, r20
    42b2:	f5 1f       	adc	r31, r21
    42b4:	92 81       	ldd	r25, Z+2	; 0x02
    42b6:	92 95       	swap	r25
    42b8:	9f 70       	andi	r25, 0x0F	; 15
    42ba:	9a 30       	cpi	r25, 0x0A	; 10
    42bc:	10 f0       	brcs	.+4      	; 0x42c2 <lora_driver_sendUploadMessage+0x40>
    42be:	99 5c       	subi	r25, 0xC9	; 201
    42c0:	01 c0       	rjmp	.+2      	; 0x42c4 <lora_driver_sendUploadMessage+0x42>
    42c2:	90 5d       	subi	r25, 0xD0	; 208
    42c4:	f9 01       	movw	r30, r18
    42c6:	e8 52       	subi	r30, 0x28	; 40
    42c8:	f9 4e       	sbci	r31, 0xE9	; 233
    42ca:	90 83       	st	Z, r25
    42cc:	2f 5f       	subi	r18, 0xFF	; 255
    42ce:	3f 4f       	sbci	r19, 0xFF	; 255
    42d0:	fd 01       	movw	r30, r26
    42d2:	e4 0f       	add	r30, r20
    42d4:	f5 1f       	adc	r31, r21
    42d6:	92 81       	ldd	r25, Z+2	; 0x02
    42d8:	9f 70       	andi	r25, 0x0F	; 15
    42da:	49 2f       	mov	r20, r25
    42dc:	50 e0       	ldi	r21, 0x00	; 0
    42de:	4a 30       	cpi	r20, 0x0A	; 10
    42e0:	51 05       	cpc	r21, r1
    42e2:	14 f0       	brlt	.+4      	; 0x42e8 <lora_driver_sendUploadMessage+0x66>
    42e4:	99 5c       	subi	r25, 0xC9	; 201
    42e6:	01 c0       	rjmp	.+2      	; 0x42ea <lora_driver_sendUploadMessage+0x68>
    42e8:	90 5d       	subi	r25, 0xD0	; 208
    42ea:	f9 01       	movw	r30, r18
    42ec:	e8 52       	subi	r30, 0x28	; 40
    42ee:	f9 4e       	sbci	r31, 0xE9	; 233
    42f0:	90 83       	st	Z, r25
    42f2:	7e 5f       	subi	r23, 0xFE	; 254
    42f4:	6f 5f       	subi	r22, 0xFF	; 255
    42f6:	11 96       	adiw	r26, 0x01	; 1
    42f8:	9c 91       	ld	r25, X
    42fa:	11 97       	sbiw	r26, 0x01	; 1
    42fc:	69 17       	cp	r22, r25
    42fe:	98 f2       	brcs	.-90     	; 0x42a6 <lora_driver_sendUploadMessage+0x24>
    4300:	01 c0       	rjmp	.+2      	; 0x4304 <lora_driver_sendUploadMessage+0x82>
    4302:	70 e0       	ldi	r23, 0x00	; 0
    4304:	e7 2f       	mov	r30, r23
    4306:	f0 e0       	ldi	r31, 0x00	; 0
    4308:	e8 52       	subi	r30, 0x28	; 40
    430a:	f9 4e       	sbci	r31, 0xE9	; 233
    430c:	10 82       	st	Z, r1
    430e:	4c 91       	ld	r20, X
    4310:	81 11       	cpse	r24, r1
    4312:	03 c0       	rjmp	.+6      	; 0x431a <lora_driver_sendUploadMessage+0x98>
    4314:	85 e5       	ldi	r24, 0x55	; 85
    4316:	96 e0       	ldi	r25, 0x06	; 6
    4318:	02 c0       	rjmp	.+4      	; 0x431e <lora_driver_sendUploadMessage+0x9c>
    431a:	87 e5       	ldi	r24, 0x57	; 87
    431c:	96 e0       	ldi	r25, 0x06	; 6
    431e:	28 ed       	ldi	r18, 0xD8	; 216
    4320:	36 e1       	ldi	r19, 0x16	; 22
    4322:	3f 93       	push	r19
    4324:	2f 93       	push	r18
    4326:	1f 92       	push	r1
    4328:	4f 93       	push	r20
    432a:	9f 93       	push	r25
    432c:	8f 93       	push	r24
    432e:	8b e5       	ldi	r24, 0x5B	; 91
    4330:	96 e0       	ldi	r25, 0x06	; 6
    4332:	9f 93       	push	r25
    4334:	8f 93       	push	r24
    4336:	8a e1       	ldi	r24, 0x1A	; 26
    4338:	97 e1       	ldi	r25, 0x17	; 23
    433a:	9f 93       	push	r25
    433c:	8f 93       	push	r24
    433e:	0e 94 c0 34 	call	0x6980	; 0x6980 <sprintf>
    4342:	60 e0       	ldi	r22, 0x00	; 0
    4344:	70 e0       	ldi	r23, 0x00	; 0
    4346:	8a e1       	ldi	r24, 0x1A	; 26
    4348:	97 e1       	ldi	r25, 0x17	; 23
    434a:	b3 de       	rcall	.-666    	; 0x40b2 <_uploadMessageRc>
    434c:	0f b6       	in	r0, 0x3f	; 63
    434e:	f8 94       	cli
    4350:	de bf       	out	0x3e, r29	; 62
    4352:	0f be       	out	0x3f, r0	; 63
    4354:	cd bf       	out	0x3d, r28	; 61
    4356:	81 11       	cpse	r24, r1
    4358:	59 c0       	rjmp	.+178    	; 0x440c <lora_driver_sendUploadMessage+0x18a>
    435a:	08 e2       	ldi	r16, 0x28	; 40
    435c:	15 e0       	ldi	r17, 0x05	; 5
    435e:	20 e0       	ldi	r18, 0x00	; 0
    4360:	30 e0       	ldi	r19, 0x00	; 0
    4362:	4d e2       	ldi	r20, 0x2D	; 45
    4364:	50 e0       	ldi	r21, 0x00	; 0
    4366:	67 e4       	ldi	r22, 0x47	; 71
    4368:	77 e1       	ldi	r23, 0x17	; 23
    436a:	80 91 be 16 	lds	r24, 0x16BE	; 0x8016be <_serialReplyBufferHandle>
    436e:	90 91 bf 16 	lds	r25, 0x16BF	; 0x8016bf <_serialReplyBufferHandle+0x1>
    4372:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <xStreamBufferReceive>
    4376:	88 23       	and	r24, r24
    4378:	09 f4       	brne	.+2      	; 0x437c <lora_driver_sendUploadMessage+0xfa>
    437a:	47 c0       	rjmp	.+142    	; 0x440a <lora_driver_sendUploadMessage+0x188>
    437c:	87 e4       	ldi	r24, 0x47	; 71
    437e:	97 e1       	ldi	r25, 0x17	; 23
    4380:	23 de       	rcall	.-954    	; 0x3fc8 <_reply2ReturnCode>
    4382:	8e 30       	cpi	r24, 0x0E	; 14
    4384:	09 f0       	breq	.+2      	; 0x4388 <lora_driver_sendUploadMessage+0x106>
    4386:	42 c0       	rjmp	.+132    	; 0x440c <lora_driver_sendUploadMessage+0x18a>
    4388:	87 e0       	ldi	r24, 0x07	; 7
    438a:	89 83       	std	Y+1, r24	; 0x01
    438c:	80 91 bc 16 	lds	r24, 0x16BC	; 0x8016bc <_downlinkMessageBuffer>
    4390:	90 91 bd 16 	lds	r25, 0x16BD	; 0x8016bd <_downlinkMessageBuffer+0x1>
    4394:	89 2b       	or	r24, r25
    4396:	a9 f1       	breq	.+106    	; 0x4402 <lora_driver_sendUploadMessage+0x180>
    4398:	be 01       	movw	r22, r28
    439a:	6f 5f       	subi	r22, 0xFF	; 255
    439c:	7f 4f       	sbci	r23, 0xFF	; 255
    439e:	87 e4       	ldi	r24, 0x47	; 71
    43a0:	97 e1       	ldi	r25, 0x17	; 23
    43a2:	68 d1       	rcall	.+720    	; 0x4674 <decode_port_no>
    43a4:	80 93 c2 16 	sts	0x16C2, r24	; 0x8016c2 <_downlinkPayload>
    43a8:	e9 81       	ldd	r30, Y+1	; 0x01
    43aa:	f0 e0       	ldi	r31, 0x00	; 0
    43ac:	e9 5b       	subi	r30, 0xB9	; 185
    43ae:	f8 4e       	sbci	r31, 0xE8	; 232
    43b0:	df 01       	movw	r26, r30
    43b2:	0d 90       	ld	r0, X+
    43b4:	00 20       	and	r0, r0
    43b6:	e9 f7       	brne	.-6      	; 0x43b2 <lora_driver_sendUploadMessage+0x130>
    43b8:	11 97       	sbiw	r26, 0x01	; 1
    43ba:	ae 1b       	sub	r26, r30
    43bc:	bf 0b       	sbc	r27, r31
    43be:	aa 23       	and	r26, r26
    43c0:	91 f0       	breq	.+36     	; 0x43e6 <lora_driver_sendUploadMessage+0x164>
    43c2:	bb 27       	eor	r27, r27
    43c4:	cd 01       	movw	r24, r26
    43c6:	01 97       	sbiw	r24, 0x01	; 1
    43c8:	9c 01       	movw	r18, r24
    43ca:	12 f4       	brpl	.+4      	; 0x43d0 <lora_driver_sendUploadMessage+0x14e>
    43cc:	2f 5f       	subi	r18, 0xFF	; 255
    43ce:	3f 4f       	sbci	r19, 0xFF	; 255
    43d0:	35 95       	asr	r19
    43d2:	27 95       	ror	r18
    43d4:	20 93 c3 16 	sts	0x16C3, r18	; 0x8016c3 <_downlinkPayload+0x1>
    43d8:	af 01       	movw	r20, r30
    43da:	4f 5f       	subi	r20, 0xFF	; 255
    43dc:	5f 4f       	sbci	r21, 0xFF	; 255
    43de:	64 e1       	ldi	r22, 0x14	; 20
    43e0:	84 ec       	ldi	r24, 0xC4	; 196
    43e2:	96 e1       	ldi	r25, 0x16	; 22
    43e4:	73 d1       	rcall	.+742    	; 0x46cc <decode_hexadecimal_string_bytes>
    43e6:	01 e0       	ldi	r16, 0x01	; 1
    43e8:	10 e0       	ldi	r17, 0x00	; 0
    43ea:	20 e0       	ldi	r18, 0x00	; 0
    43ec:	30 e0       	ldi	r19, 0x00	; 0
    43ee:	46 e1       	ldi	r20, 0x16	; 22
    43f0:	50 e0       	ldi	r21, 0x00	; 0
    43f2:	62 ec       	ldi	r22, 0xC2	; 194
    43f4:	76 e1       	ldi	r23, 0x16	; 22
    43f6:	80 91 bc 16 	lds	r24, 0x16BC	; 0x8016bc <_downlinkMessageBuffer>
    43fa:	90 91 bd 16 	lds	r25, 0x16BD	; 0x8016bd <_downlinkMessageBuffer+0x1>
    43fe:	0e 94 14 0c 	call	0x1828	; 0x1828 <xStreamBufferSend>
    4402:	8e e0       	ldi	r24, 0x0E	; 14
    4404:	03 c0       	rjmp	.+6      	; 0x440c <lora_driver_sendUploadMessage+0x18a>
    4406:	84 e1       	ldi	r24, 0x14	; 20
    4408:	01 c0       	rjmp	.+2      	; 0x440c <lora_driver_sendUploadMessage+0x18a>
    440a:	80 e0       	ldi	r24, 0x00	; 0
    440c:	0f 90       	pop	r0
    440e:	df 91       	pop	r29
    4410:	cf 91       	pop	r28
    4412:	1f 91       	pop	r17
    4414:	0f 91       	pop	r16
    4416:	08 95       	ret

00004418 <lora_driver_setAdaptiveDataRate>:
    4418:	81 30       	cpi	r24, 0x01	; 1
    441a:	19 f0       	breq	.+6      	; 0x4422 <lora_driver_setAdaptiveDataRate+0xa>
    441c:	6b e6       	ldi	r22, 0x6B	; 107
    441e:	76 e0       	ldi	r23, 0x06	; 6
    4420:	02 c0       	rjmp	.+4      	; 0x4426 <lora_driver_setAdaptiveDataRate+0xe>
    4422:	64 e4       	ldi	r22, 0x44	; 68
    4424:	77 e0       	ldi	r23, 0x07	; 7
    4426:	8f e6       	ldi	r24, 0x6F	; 111
    4428:	96 e0       	ldi	r25, 0x06	; 6
    442a:	43 ce       	rjmp	.-890    	; 0x40b2 <_uploadMessageRc>
    442c:	08 95       	ret

0000442e <lora_driver_setReceiveDelay>:
    442e:	9f 93       	push	r25
    4430:	8f 93       	push	r24
    4432:	80 ea       	ldi	r24, 0xA0	; 160
    4434:	96 e0       	ldi	r25, 0x06	; 6
    4436:	9f 93       	push	r25
    4438:	8f 93       	push	r24
    443a:	8a e1       	ldi	r24, 0x1A	; 26
    443c:	97 e1       	ldi	r25, 0x17	; 23
    443e:	9f 93       	push	r25
    4440:	8f 93       	push	r24
    4442:	0e 94 c0 34 	call	0x6980	; 0x6980 <sprintf>
    4446:	60 e0       	ldi	r22, 0x00	; 0
    4448:	70 e0       	ldi	r23, 0x00	; 0
    444a:	8a e1       	ldi	r24, 0x1A	; 26
    444c:	97 e1       	ldi	r25, 0x17	; 23
    444e:	31 de       	rcall	.-926    	; 0x40b2 <_uploadMessageRc>
    4450:	0f 90       	pop	r0
    4452:	0f 90       	pop	r0
    4454:	0f 90       	pop	r0
    4456:	0f 90       	pop	r0
    4458:	0f 90       	pop	r0
    445a:	0f 90       	pop	r0
    445c:	08 95       	ret

0000445e <lora_driver_configureToEu868>:
    445e:	2f 92       	push	r2
    4460:	3f 92       	push	r3
    4462:	4f 92       	push	r4
    4464:	5f 92       	push	r5
    4466:	6f 92       	push	r6
    4468:	7f 92       	push	r7
    446a:	8f 92       	push	r8
    446c:	9f 92       	push	r9
    446e:	af 92       	push	r10
    4470:	bf 92       	push	r11
    4472:	cf 92       	push	r12
    4474:	df 92       	push	r13
    4476:	ef 92       	push	r14
    4478:	ff 92       	push	r15
    447a:	0f 93       	push	r16
    447c:	1f 93       	push	r17
    447e:	cf 93       	push	r28
    4480:	df 93       	push	r29
    4482:	cd b7       	in	r28, 0x3d	; 61
    4484:	de b7       	in	r29, 0x3e	; 62
    4486:	a0 97       	sbiw	r28, 0x20	; 32
    4488:	0f b6       	in	r0, 0x3f	; 63
    448a:	f8 94       	cli
    448c:	de bf       	out	0x3e, r29	; 62
    448e:	0f be       	out	0x3f, r0	; 63
    4490:	cd bf       	out	0x3d, r28	; 61
    4492:	6d ec       	ldi	r22, 0xCD	; 205
    4494:	76 e0       	ldi	r23, 0x06	; 6
    4496:	89 ed       	ldi	r24, 0xD9	; 217
    4498:	96 e0       	ldi	r25, 0x06	; 6
    449a:	3c dd       	rcall	.-1416   	; 0x3f14 <_uploadMessage>
    449c:	95 dd       	rcall	.-1238   	; 0x3fc8 <_reply2ReturnCode>
    449e:	81 11       	cpse	r24, r1
    44a0:	a3 c0       	rjmp	.+326    	; 0x45e8 <lora_driver_configureToEu868+0x18a>
    44a2:	80 e2       	ldi	r24, 0x20	; 32
    44a4:	e2 e2       	ldi	r30, 0x22	; 34
    44a6:	f2 e0       	ldi	r31, 0x02	; 2
    44a8:	de 01       	movw	r26, r28
    44aa:	11 96       	adiw	r26, 0x01	; 1
    44ac:	01 90       	ld	r0, Z+
    44ae:	0d 92       	st	X+, r0
    44b0:	8a 95       	dec	r24
    44b2:	e1 f7       	brne	.-8      	; 0x44ac <lora_driver_configureToEu868+0x4e>
    44b4:	9e 01       	movw	r18, r28
    44b6:	2f 5f       	subi	r18, 0xFF	; 255
    44b8:	3f 4f       	sbci	r19, 0xFF	; 255
    44ba:	69 01       	movw	r12, r18
    44bc:	e1 2c       	mov	r14, r1
    44be:	f1 2c       	mov	r15, r1
    44c0:	0f 2e       	mov	r0, r31
    44c2:	f5 ee       	ldi	r31, 0xE5	; 229
    44c4:	af 2e       	mov	r10, r31
    44c6:	f6 e0       	ldi	r31, 0x06	; 6
    44c8:	bf 2e       	mov	r11, r31
    44ca:	f0 2d       	mov	r31, r0
    44cc:	0a e1       	ldi	r16, 0x1A	; 26
    44ce:	17 e1       	ldi	r17, 0x17	; 23
    44d0:	0f 2e       	mov	r0, r31
    44d2:	fe ef       	ldi	r31, 0xFE	; 254
    44d4:	4f 2e       	mov	r4, r31
    44d6:	f6 e0       	ldi	r31, 0x06	; 6
    44d8:	5f 2e       	mov	r5, r31
    44da:	f0 2d       	mov	r31, r0
    44dc:	0f 2e       	mov	r0, r31
    44de:	f5 e1       	ldi	r31, 0x15	; 21
    44e0:	8f 2e       	mov	r8, r31
    44e2:	f7 e0       	ldi	r31, 0x07	; 7
    44e4:	9f 2e       	mov	r9, r31
    44e6:	f0 2d       	mov	r31, r0
    44e8:	0f 2e       	mov	r0, r31
    44ea:	ff e2       	ldi	r31, 0x2F	; 47
    44ec:	6f 2e       	mov	r6, r31
    44ee:	f7 e0       	ldi	r31, 0x07	; 7
    44f0:	7f 2e       	mov	r7, r31
    44f2:	f0 2d       	mov	r31, r0
    44f4:	3e 2c       	mov	r3, r14
    44f6:	2f 2c       	mov	r2, r15
    44f8:	ff 92       	push	r15
    44fa:	ef 92       	push	r14
    44fc:	bf 92       	push	r11
    44fe:	af 92       	push	r10
    4500:	1f 93       	push	r17
    4502:	0f 93       	push	r16
    4504:	0e 94 c0 34 	call	0x6980	; 0x6980 <sprintf>
    4508:	60 e0       	ldi	r22, 0x00	; 0
    450a:	70 e0       	ldi	r23, 0x00	; 0
    450c:	c8 01       	movw	r24, r16
    450e:	02 dd       	rcall	.-1532   	; 0x3f14 <_uploadMessage>
    4510:	5b dd       	rcall	.-1354   	; 0x3fc8 <_reply2ReturnCode>
    4512:	0f 90       	pop	r0
    4514:	0f 90       	pop	r0
    4516:	0f 90       	pop	r0
    4518:	0f 90       	pop	r0
    451a:	0f 90       	pop	r0
    451c:	0f 90       	pop	r0
    451e:	81 11       	cpse	r24, r1
    4520:	63 c0       	rjmp	.+198    	; 0x45e8 <lora_driver_configureToEu868+0x18a>
    4522:	32 e0       	ldi	r19, 0x02	; 2
    4524:	3e 15       	cp	r19, r14
    4526:	e8 f4       	brcc	.+58     	; 0x4562 <lora_driver_configureToEu868+0x104>
    4528:	f6 01       	movw	r30, r12
    452a:	83 81       	ldd	r24, Z+3	; 0x03
    452c:	8f 93       	push	r24
    452e:	82 81       	ldd	r24, Z+2	; 0x02
    4530:	8f 93       	push	r24
    4532:	81 81       	ldd	r24, Z+1	; 0x01
    4534:	8f 93       	push	r24
    4536:	80 81       	ld	r24, Z
    4538:	8f 93       	push	r24
    453a:	ff 92       	push	r15
    453c:	ef 92       	push	r14
    453e:	5f 92       	push	r5
    4540:	4f 92       	push	r4
    4542:	1f 93       	push	r17
    4544:	0f 93       	push	r16
    4546:	0e 94 c0 34 	call	0x6980	; 0x6980 <sprintf>
    454a:	60 e0       	ldi	r22, 0x00	; 0
    454c:	70 e0       	ldi	r23, 0x00	; 0
    454e:	c8 01       	movw	r24, r16
    4550:	e1 dc       	rcall	.-1598   	; 0x3f14 <_uploadMessage>
    4552:	3a dd       	rcall	.-1420   	; 0x3fc8 <_reply2ReturnCode>
    4554:	0f b6       	in	r0, 0x3f	; 63
    4556:	f8 94       	cli
    4558:	de bf       	out	0x3e, r29	; 62
    455a:	0f be       	out	0x3f, r0	; 63
    455c:	cd bf       	out	0x3d, r28	; 61
    455e:	81 11       	cpse	r24, r1
    4560:	43 c0       	rjmp	.+134    	; 0x45e8 <lora_driver_configureToEu868+0x18a>
    4562:	2f 92       	push	r2
    4564:	3f 92       	push	r3
    4566:	9f 92       	push	r9
    4568:	8f 92       	push	r8
    456a:	1f 93       	push	r17
    456c:	0f 93       	push	r16
    456e:	0e 94 c0 34 	call	0x6980	; 0x6980 <sprintf>
    4572:	60 e0       	ldi	r22, 0x00	; 0
    4574:	70 e0       	ldi	r23, 0x00	; 0
    4576:	c8 01       	movw	r24, r16
    4578:	cd dc       	rcall	.-1638   	; 0x3f14 <_uploadMessage>
    457a:	26 dd       	rcall	.-1460   	; 0x3fc8 <_reply2ReturnCode>
    457c:	0f 90       	pop	r0
    457e:	0f 90       	pop	r0
    4580:	0f 90       	pop	r0
    4582:	0f 90       	pop	r0
    4584:	0f 90       	pop	r0
    4586:	0f 90       	pop	r0
    4588:	81 11       	cpse	r24, r1
    458a:	2e c0       	rjmp	.+92     	; 0x45e8 <lora_driver_configureToEu868+0x18a>
    458c:	2f 92       	push	r2
    458e:	3f 92       	push	r3
    4590:	7f 92       	push	r7
    4592:	6f 92       	push	r6
    4594:	1f 93       	push	r17
    4596:	0f 93       	push	r16
    4598:	0e 94 c0 34 	call	0x6980	; 0x6980 <sprintf>
    459c:	60 e0       	ldi	r22, 0x00	; 0
    459e:	70 e0       	ldi	r23, 0x00	; 0
    45a0:	c8 01       	movw	r24, r16
    45a2:	b8 dc       	rcall	.-1680   	; 0x3f14 <_uploadMessage>
    45a4:	11 dd       	rcall	.-1502   	; 0x3fc8 <_reply2ReturnCode>
    45a6:	0f 90       	pop	r0
    45a8:	0f 90       	pop	r0
    45aa:	0f 90       	pop	r0
    45ac:	0f 90       	pop	r0
    45ae:	0f 90       	pop	r0
    45b0:	0f 90       	pop	r0
    45b2:	81 11       	cpse	r24, r1
    45b4:	19 c0       	rjmp	.+50     	; 0x45e8 <lora_driver_configureToEu868+0x18a>
    45b6:	3f ef       	ldi	r19, 0xFF	; 255
    45b8:	e3 1a       	sub	r14, r19
    45ba:	f3 0a       	sbc	r15, r19
    45bc:	84 e0       	ldi	r24, 0x04	; 4
    45be:	c8 0e       	add	r12, r24
    45c0:	d1 1c       	adc	r13, r1
    45c2:	98 e0       	ldi	r25, 0x08	; 8
    45c4:	e9 16       	cp	r14, r25
    45c6:	f1 04       	cpc	r15, r1
    45c8:	09 f0       	breq	.+2      	; 0x45cc <lora_driver_configureToEu868+0x16e>
    45ca:	94 cf       	rjmp	.-216    	; 0x44f4 <lora_driver_configureToEu868+0x96>
    45cc:	60 e0       	ldi	r22, 0x00	; 0
    45ce:	70 e0       	ldi	r23, 0x00	; 0
    45d0:	87 e4       	ldi	r24, 0x47	; 71
    45d2:	97 e0       	ldi	r25, 0x07	; 7
    45d4:	9f dc       	rcall	.-1730   	; 0x3f14 <_uploadMessage>
    45d6:	f8 dc       	rcall	.-1552   	; 0x3fc8 <_reply2ReturnCode>
    45d8:	81 11       	cpse	r24, r1
    45da:	06 c0       	rjmp	.+12     	; 0x45e8 <lora_driver_configureToEu868+0x18a>
    45dc:	60 e0       	ldi	r22, 0x00	; 0
    45de:	70 e0       	ldi	r23, 0x00	; 0
    45e0:	88 e5       	ldi	r24, 0x58	; 88
    45e2:	97 e0       	ldi	r25, 0x07	; 7
    45e4:	97 dc       	rcall	.-1746   	; 0x3f14 <_uploadMessage>
    45e6:	f0 dc       	rcall	.-1568   	; 0x3fc8 <_reply2ReturnCode>
    45e8:	a0 96       	adiw	r28, 0x20	; 32
    45ea:	0f b6       	in	r0, 0x3f	; 63
    45ec:	f8 94       	cli
    45ee:	de bf       	out	0x3e, r29	; 62
    45f0:	0f be       	out	0x3f, r0	; 63
    45f2:	cd bf       	out	0x3d, r28	; 61
    45f4:	df 91       	pop	r29
    45f6:	cf 91       	pop	r28
    45f8:	1f 91       	pop	r17
    45fa:	0f 91       	pop	r16
    45fc:	ff 90       	pop	r15
    45fe:	ef 90       	pop	r14
    4600:	df 90       	pop	r13
    4602:	cf 90       	pop	r12
    4604:	bf 90       	pop	r11
    4606:	af 90       	pop	r10
    4608:	9f 90       	pop	r9
    460a:	8f 90       	pop	r8
    460c:	7f 90       	pop	r7
    460e:	6f 90       	pop	r6
    4610:	5f 90       	pop	r5
    4612:	4f 90       	pop	r4
    4614:	3f 90       	pop	r3
    4616:	2f 90       	pop	r2
    4618:	08 95       	ret

0000461a <lora_driver_setOtaaIdentity>:
    461a:	ef 92       	push	r14
    461c:	ff 92       	push	r15
    461e:	0f 93       	push	r16
    4620:	1f 93       	push	r17
    4622:	cf 93       	push	r28
    4624:	df 93       	push	r29
    4626:	ec 01       	movw	r28, r24
    4628:	8b 01       	movw	r16, r22
    462a:	7a 01       	movw	r14, r20
    462c:	81 e0       	ldi	r24, 0x01	; 1
    462e:	f4 de       	rcall	.-536    	; 0x4418 <lora_driver_setAdaptiveDataRate>
    4630:	81 11       	cpse	r24, r1
    4632:	0d c0       	rjmp	.+26     	; 0x464e <lora_driver_setOtaaIdentity+0x34>
    4634:	ce 01       	movw	r24, r28
    4636:	d4 dd       	rcall	.-1112   	; 0x41e0 <lora_driver_setApplicationIdentifier>
    4638:	81 11       	cpse	r24, r1
    463a:	09 c0       	rjmp	.+18     	; 0x464e <lora_driver_setOtaaIdentity+0x34>
    463c:	c8 01       	movw	r24, r16
    463e:	e1 dd       	rcall	.-1086   	; 0x4202 <lora_driver_setApplicationKey>
    4640:	81 11       	cpse	r24, r1
    4642:	05 c0       	rjmp	.+10     	; 0x464e <lora_driver_setOtaaIdentity+0x34>
    4644:	c7 01       	movw	r24, r14
    4646:	bb dd       	rcall	.-1162   	; 0x41be <lora_driver_setDeviceIdentifier>
    4648:	81 11       	cpse	r24, r1
    464a:	01 c0       	rjmp	.+2      	; 0x464e <lora_driver_setOtaaIdentity+0x34>
    464c:	eb dd       	rcall	.-1066   	; 0x4224 <lora_driver_saveMac>
    464e:	df 91       	pop	r29
    4650:	cf 91       	pop	r28
    4652:	1f 91       	pop	r17
    4654:	0f 91       	pop	r16
    4656:	ff 90       	pop	r15
    4658:	ef 90       	pop	r14
    465a:	08 95       	ret

0000465c <lora_driver_mapReturnCodeToText>:
    465c:	90 e0       	ldi	r25, 0x00	; 0
    465e:	fc 01       	movw	r30, r24
    4660:	ee 0f       	add	r30, r30
    4662:	ff 1f       	adc	r31, r31
    4664:	8e 0f       	add	r24, r30
    4666:	9f 1f       	adc	r25, r31
    4668:	fc 01       	movw	r30, r24
    466a:	ef 5d       	subi	r30, 0xDF	; 223
    466c:	f7 4f       	sbci	r31, 0xF7	; 247
    466e:	81 81       	ldd	r24, Z+1	; 0x01
    4670:	92 81       	ldd	r25, Z+2	; 0x02
    4672:	08 95       	ret

00004674 <decode_port_no>:
    4674:	dc 01       	movw	r26, r24
    4676:	00 97       	sbiw	r24, 0x00	; 0
    4678:	29 f1       	breq	.+74     	; 0x46c4 <decode_port_no+0x50>
    467a:	fb 01       	movw	r30, r22
    467c:	20 81       	ld	r18, Z
    467e:	fc 01       	movw	r30, r24
    4680:	01 90       	ld	r0, Z+
    4682:	00 20       	and	r0, r0
    4684:	e9 f7       	brne	.-6      	; 0x4680 <decode_port_no+0xc>
    4686:	31 97       	sbiw	r30, 0x01	; 1
    4688:	e8 1b       	sub	r30, r24
    468a:	f9 0b       	sbc	r31, r25
    468c:	82 2f       	mov	r24, r18
    468e:	90 e0       	ldi	r25, 0x00	; 0
    4690:	e8 17       	cp	r30, r24
    4692:	f9 07       	cpc	r31, r25
    4694:	c8 f0       	brcs	.+50     	; 0x46c8 <decode_port_no+0x54>
    4696:	80 e0       	ldi	r24, 0x00	; 0
    4698:	08 c0       	rjmp	.+16     	; 0x46aa <decode_port_no+0x36>
    469a:	88 0f       	add	r24, r24
    469c:	38 2f       	mov	r19, r24
    469e:	33 0f       	add	r19, r19
    46a0:	33 0f       	add	r19, r19
    46a2:	83 0f       	add	r24, r19
    46a4:	80 53       	subi	r24, 0x30	; 48
    46a6:	89 0f       	add	r24, r25
    46a8:	2f 5f       	subi	r18, 0xFF	; 255
    46aa:	fd 01       	movw	r30, r26
    46ac:	e2 0f       	add	r30, r18
    46ae:	f1 1d       	adc	r31, r1
    46b0:	90 81       	ld	r25, Z
    46b2:	30 ed       	ldi	r19, 0xD0	; 208
    46b4:	39 0f       	add	r19, r25
    46b6:	3a 30       	cpi	r19, 0x0A	; 10
    46b8:	10 f4       	brcc	.+4      	; 0x46be <decode_port_no+0x4a>
    46ba:	91 11       	cpse	r25, r1
    46bc:	ee cf       	rjmp	.-36     	; 0x469a <decode_port_no+0x26>
    46be:	fb 01       	movw	r30, r22
    46c0:	20 83       	st	Z, r18
    46c2:	08 95       	ret
    46c4:	80 e0       	ldi	r24, 0x00	; 0
    46c6:	08 95       	ret
    46c8:	80 e0       	ldi	r24, 0x00	; 0
    46ca:	08 95       	ret

000046cc <decode_hexadecimal_string_bytes>:
    46cc:	0f 93       	push	r16
    46ce:	1f 93       	push	r17
    46d0:	cf 93       	push	r28
    46d2:	df 93       	push	r29
    46d4:	dc 01       	movw	r26, r24
    46d6:	ea 01       	movw	r28, r20
    46d8:	20 97       	sbiw	r28, 0x00	; 0
    46da:	e1 f1       	breq	.+120    	; 0x4754 <decode_hexadecimal_string_bytes+0x88>
    46dc:	fa 01       	movw	r30, r20
    46de:	01 90       	ld	r0, Z+
    46e0:	00 20       	and	r0, r0
    46e2:	e9 f7       	brne	.-6      	; 0x46de <decode_hexadecimal_string_bytes+0x12>
    46e4:	31 97       	sbiw	r30, 0x01	; 1
    46e6:	e4 1b       	sub	r30, r20
    46e8:	f5 0b       	sbc	r31, r21
    46ea:	32 97       	sbiw	r30, 0x02	; 2
    46ec:	10 f5       	brcc	.+68     	; 0x4732 <decode_hexadecimal_string_bytes+0x66>
    46ee:	32 c0       	rjmp	.+100    	; 0x4754 <decode_hexadecimal_string_bytes+0x88>
    46f0:	8d 01       	movw	r16, r26
    46f2:	04 0f       	add	r16, r20
    46f4:	15 1f       	adc	r17, r21
    46f6:	30 e0       	ldi	r19, 0x00	; 0
    46f8:	ae 01       	movw	r20, r28
    46fa:	42 0f       	add	r20, r18
    46fc:	53 1f       	adc	r21, r19
    46fe:	fa 01       	movw	r30, r20
    4700:	90 81       	ld	r25, Z
    4702:	91 34       	cpi	r25, 0x41	; 65
    4704:	28 f0       	brcs	.+10     	; 0x4710 <decode_hexadecimal_string_bytes+0x44>
    4706:	97 53       	subi	r25, 0x37	; 55
    4708:	59 2f       	mov	r21, r25
    470a:	52 95       	swap	r21
    470c:	50 7f       	andi	r21, 0xF0	; 240
    470e:	03 c0       	rjmp	.+6      	; 0x4716 <decode_hexadecimal_string_bytes+0x4a>
    4710:	59 2f       	mov	r21, r25
    4712:	52 95       	swap	r21
    4714:	50 7f       	andi	r21, 0xF0	; 240
    4716:	2c 0f       	add	r18, r28
    4718:	3d 1f       	adc	r19, r29
    471a:	f9 01       	movw	r30, r18
    471c:	91 81       	ldd	r25, Z+1	; 0x01
    471e:	91 34       	cpi	r25, 0x41	; 65
    4720:	10 f0       	brcs	.+4      	; 0x4726 <decode_hexadecimal_string_bytes+0x5a>
    4722:	97 53       	subi	r25, 0x37	; 55
    4724:	01 c0       	rjmp	.+2      	; 0x4728 <decode_hexadecimal_string_bytes+0x5c>
    4726:	90 53       	subi	r25, 0x30	; 48
    4728:	95 0f       	add	r25, r21
    472a:	f8 01       	movw	r30, r16
    472c:	90 83       	st	Z, r25
    472e:	8f 5f       	subi	r24, 0xFF	; 255
    4730:	01 c0       	rjmp	.+2      	; 0x4734 <decode_hexadecimal_string_bytes+0x68>
    4732:	80 e0       	ldi	r24, 0x00	; 0
    4734:	28 2f       	mov	r18, r24
    4736:	22 0f       	add	r18, r18
    4738:	48 2f       	mov	r20, r24
    473a:	50 e0       	ldi	r21, 0x00	; 0
    473c:	fe 01       	movw	r30, r28
    473e:	01 90       	ld	r0, Z+
    4740:	00 20       	and	r0, r0
    4742:	e9 f7       	brne	.-6      	; 0x473e <decode_hexadecimal_string_bytes+0x72>
    4744:	31 97       	sbiw	r30, 0x01	; 1
    4746:	ec 1b       	sub	r30, r28
    4748:	fd 0b       	sbc	r31, r29
    474a:	4e 17       	cp	r20, r30
    474c:	5f 07       	cpc	r21, r31
    474e:	10 f4       	brcc	.+4      	; 0x4754 <decode_hexadecimal_string_bytes+0x88>
    4750:	86 13       	cpse	r24, r22
    4752:	ce cf       	rjmp	.-100    	; 0x46f0 <decode_hexadecimal_string_bytes+0x24>
    4754:	df 91       	pop	r29
    4756:	cf 91       	pop	r28
    4758:	1f 91       	pop	r17
    475a:	0f 91       	pop	r16
    475c:	08 95       	ret

0000475e <_serialCallBack>:
    475e:	80 91 77 17 	lds	r24, 0x1777	; 0x801777 <crc_sum.1945>
    4762:	86 0f       	add	r24, r22
    4764:	80 93 77 17 	sts	0x1777, r24	; 0x801777 <crc_sum.1945>
    4768:	90 91 7a 17 	lds	r25, 0x177A	; 0x80177a <_mh_state>
    476c:	91 30       	cpi	r25, 0x01	; 1
    476e:	79 f0       	breq	.+30     	; 0x478e <_serialCallBack+0x30>
    4770:	28 f0       	brcs	.+10     	; 0x477c <_serialCallBack+0x1e>
    4772:	92 30       	cpi	r25, 0x02	; 2
    4774:	a9 f0       	breq	.+42     	; 0x47a0 <_serialCallBack+0x42>
    4776:	93 30       	cpi	r25, 0x03	; 3
    4778:	19 f1       	breq	.+70     	; 0x47c0 <_serialCallBack+0x62>
    477a:	08 95       	ret
    477c:	6f 3f       	cpi	r22, 0xFF	; 255
    477e:	09 f0       	breq	.+2      	; 0x4782 <_serialCallBack+0x24>
    4780:	48 c0       	rjmp	.+144    	; 0x4812 <_serialCallBack+0xb4>
    4782:	10 92 77 17 	sts	0x1777, r1	; 0x801777 <crc_sum.1945>
    4786:	81 e0       	ldi	r24, 0x01	; 1
    4788:	80 93 7a 17 	sts	0x177A, r24	; 0x80177a <_mh_state>
    478c:	08 95       	ret
    478e:	66 38       	cpi	r22, 0x86	; 134
    4790:	09 f0       	breq	.+2      	; 0x4794 <_serialCallBack+0x36>
    4792:	3f c0       	rjmp	.+126    	; 0x4812 <_serialCallBack+0xb4>
    4794:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <inDex.1943>
    4798:	82 e0       	ldi	r24, 0x02	; 2
    479a:	80 93 7a 17 	sts	0x177A, r24	; 0x80177a <_mh_state>
    479e:	08 95       	ret
    47a0:	e0 91 76 17 	lds	r30, 0x1776	; 0x801776 <inDex.1943>
    47a4:	81 e0       	ldi	r24, 0x01	; 1
    47a6:	8e 0f       	add	r24, r30
    47a8:	80 93 76 17 	sts	0x1776, r24	; 0x801776 <inDex.1943>
    47ac:	f0 e0       	ldi	r31, 0x00	; 0
    47ae:	ec 58       	subi	r30, 0x8C	; 140
    47b0:	f8 4e       	sbci	r31, 0xE8	; 232
    47b2:	60 83       	st	Z, r22
    47b4:	82 30       	cpi	r24, 0x02	; 2
    47b6:	69 f5       	brne	.+90     	; 0x4812 <_serialCallBack+0xb4>
    47b8:	83 e0       	ldi	r24, 0x03	; 3
    47ba:	80 93 7a 17 	sts	0x177A, r24	; 0x80177a <_mh_state>
    47be:	08 95       	ret
    47c0:	90 91 76 17 	lds	r25, 0x1776	; 0x801776 <inDex.1943>
    47c4:	21 e0       	ldi	r18, 0x01	; 1
    47c6:	29 0f       	add	r18, r25
    47c8:	20 93 76 17 	sts	0x1776, r18	; 0x801776 <inDex.1943>
    47cc:	96 30       	cpi	r25, 0x06	; 6
    47ce:	09 f5       	brne	.+66     	; 0x4812 <_serialCallBack+0xb4>
    47d0:	81 11       	cpse	r24, r1
    47d2:	0e c0       	rjmp	.+28     	; 0x47f0 <_serialCallBack+0x92>
    47d4:	e4 e7       	ldi	r30, 0x74	; 116
    47d6:	f7 e1       	ldi	r31, 0x17	; 23
    47d8:	80 81       	ld	r24, Z
    47da:	90 e0       	ldi	r25, 0x00	; 0
    47dc:	98 2f       	mov	r25, r24
    47de:	88 27       	eor	r24, r24
    47e0:	21 81       	ldd	r18, Z+1	; 0x01
    47e2:	82 0f       	add	r24, r18
    47e4:	91 1d       	adc	r25, r1
    47e6:	90 93 7c 17 	sts	0x177C, r25	; 0x80177c <_ppm+0x1>
    47ea:	80 93 7b 17 	sts	0x177B, r24	; 0x80177b <_ppm>
    47ee:	04 c0       	rjmp	.+8      	; 0x47f8 <_serialCallBack+0x9a>
    47f0:	10 92 7c 17 	sts	0x177C, r1	; 0x80177c <_ppm+0x1>
    47f4:	10 92 7b 17 	sts	0x177B, r1	; 0x80177b <_ppm>
    47f8:	10 92 7a 17 	sts	0x177A, r1	; 0x80177a <_mh_state>
    47fc:	e0 91 78 17 	lds	r30, 0x1778	; 0x801778 <_appCallBack>
    4800:	f0 91 79 17 	lds	r31, 0x1779	; 0x801779 <_appCallBack+0x1>
    4804:	30 97       	sbiw	r30, 0x00	; 0
    4806:	29 f0       	breq	.+10     	; 0x4812 <_serialCallBack+0xb4>
    4808:	80 91 7b 17 	lds	r24, 0x177B	; 0x80177b <_ppm>
    480c:	90 91 7c 17 	lds	r25, 0x177C	; 0x80177c <_ppm+0x1>
    4810:	19 95       	eicall
    4812:	08 95       	ret

00004814 <mh_z19_initialise>:
    4814:	8f 92       	push	r8
    4816:	9f 92       	push	r9
    4818:	af 92       	push	r10
    481a:	cf 92       	push	r12
    481c:	ef 92       	push	r14
    481e:	0f 93       	push	r16
    4820:	0f 2e       	mov	r0, r31
    4822:	ff ea       	ldi	r31, 0xAF	; 175
    4824:	8f 2e       	mov	r8, r31
    4826:	f3 e2       	ldi	r31, 0x23	; 35
    4828:	9f 2e       	mov	r9, r31
    482a:	f0 2d       	mov	r31, r0
    482c:	68 94       	set
    482e:	aa 24       	eor	r10, r10
    4830:	a4 f8       	bld	r10, 4
    4832:	68 94       	set
    4834:	cc 24       	eor	r12, r12
    4836:	c4 f8       	bld	r12, 4
    4838:	e1 2c       	mov	r14, r1
    483a:	00 e0       	ldi	r16, 0x00	; 0
    483c:	23 e0       	ldi	r18, 0x03	; 3
    483e:	40 e8       	ldi	r20, 0x80	; 128
    4840:	55 e2       	ldi	r21, 0x25	; 37
    4842:	60 e0       	ldi	r22, 0x00	; 0
    4844:	70 e0       	ldi	r23, 0x00	; 0
    4846:	84 d0       	rcall	.+264    	; 0x4950 <serial_create>
    4848:	90 93 7e 17 	sts	0x177E, r25	; 0x80177e <_serial+0x1>
    484c:	80 93 7d 17 	sts	0x177D, r24	; 0x80177d <_serial>
    4850:	0f 91       	pop	r16
    4852:	ef 90       	pop	r14
    4854:	cf 90       	pop	r12
    4856:	af 90       	pop	r10
    4858:	9f 90       	pop	r9
    485a:	8f 90       	pop	r8
    485c:	08 95       	ret

0000485e <mh_z19_injectCallBack>:
    485e:	90 93 79 17 	sts	0x1779, r25	; 0x801779 <_appCallBack+0x1>
    4862:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <_appCallBack>
    4866:	08 95       	ret

00004868 <mh_z19_takeMeassuring>:
    4868:	cf 93       	push	r28
    486a:	df 93       	push	r29
    486c:	cd b7       	in	r28, 0x3d	; 61
    486e:	de b7       	in	r29, 0x3e	; 62
    4870:	29 97       	sbiw	r28, 0x09	; 9
    4872:	0f b6       	in	r0, 0x3f	; 63
    4874:	f8 94       	cli
    4876:	de bf       	out	0x3e, r29	; 62
    4878:	0f be       	out	0x3f, r0	; 63
    487a:	cd bf       	out	0x3d, r28	; 61
    487c:	89 e0       	ldi	r24, 0x09	; 9
    487e:	e2 e4       	ldi	r30, 0x42	; 66
    4880:	f2 e0       	ldi	r31, 0x02	; 2
    4882:	9e 01       	movw	r18, r28
    4884:	2f 5f       	subi	r18, 0xFF	; 255
    4886:	3f 4f       	sbci	r19, 0xFF	; 255
    4888:	d9 01       	movw	r26, r18
    488a:	01 90       	ld	r0, Z+
    488c:	0d 92       	st	X+, r0
    488e:	8a 95       	dec	r24
    4890:	e1 f7       	brne	.-8      	; 0x488a <mh_z19_takeMeassuring+0x22>
    4892:	10 92 7c 17 	sts	0x177C, r1	; 0x80177c <_ppm+0x1>
    4896:	10 92 7b 17 	sts	0x177B, r1	; 0x80177b <_ppm>
    489a:	80 91 7d 17 	lds	r24, 0x177D	; 0x80177d <_serial>
    489e:	90 91 7e 17 	lds	r25, 0x177E	; 0x80177e <_serial+0x1>
    48a2:	00 97       	sbiw	r24, 0x00	; 0
    48a4:	31 f0       	breq	.+12     	; 0x48b2 <mh_z19_takeMeassuring+0x4a>
    48a6:	42 2f       	mov	r20, r18
    48a8:	53 2f       	mov	r21, r19
    48aa:	69 e0       	ldi	r22, 0x09	; 9
    48ac:	1e d1       	rcall	.+572    	; 0x4aea <serial_sendBytes>
    48ae:	80 e0       	ldi	r24, 0x00	; 0
    48b0:	01 c0       	rjmp	.+2      	; 0x48b4 <mh_z19_takeMeassuring+0x4c>
    48b2:	82 e0       	ldi	r24, 0x02	; 2
    48b4:	29 96       	adiw	r28, 0x09	; 9
    48b6:	0f b6       	in	r0, 0x3f	; 63
    48b8:	f8 94       	cli
    48ba:	de bf       	out	0x3e, r29	; 62
    48bc:	0f be       	out	0x3f, r0	; 63
    48be:	cd bf       	out	0x3d, r28	; 61
    48c0:	df 91       	pop	r29
    48c2:	cf 91       	pop	r28
    48c4:	08 95       	ret

000048c6 <mh_z19_getCo2Ppm>:
    48c6:	20 91 7b 17 	lds	r18, 0x177B	; 0x80177b <_ppm>
    48ca:	30 91 7c 17 	lds	r19, 0x177C	; 0x80177c <_ppm+0x1>
    48ce:	21 15       	cp	r18, r1
    48d0:	31 05       	cpc	r19, r1
    48d2:	29 f4       	brne	.+10     	; 0x48de <mh_z19_getCo2Ppm+0x18>
    48d4:	fc 01       	movw	r30, r24
    48d6:	11 82       	std	Z+1, r1	; 0x01
    48d8:	10 82       	st	Z, r1
    48da:	81 e0       	ldi	r24, 0x01	; 1
    48dc:	08 95       	ret
    48de:	fc 01       	movw	r30, r24
    48e0:	31 83       	std	Z+1, r19	; 0x01
    48e2:	20 83       	st	Z, r18
    48e4:	80 e0       	ldi	r24, 0x00	; 0
    48e6:	08 95       	ret

000048e8 <rc_servo_setPosition>:
    48e8:	65 36       	cpi	r22, 0x65	; 101
    48ea:	0c f0       	brlt	.+2      	; 0x48ee <rc_servo_setPosition+0x6>
    48ec:	64 e6       	ldi	r22, 0x64	; 100
    48ee:	6c 39       	cpi	r22, 0x9C	; 156
    48f0:	0c f4       	brge	.+2      	; 0x48f4 <rc_servo_setPosition+0xc>
    48f2:	6c e9       	ldi	r22, 0x9C	; 156
    48f4:	96 ef       	ldi	r25, 0xF6	; 246
    48f6:	69 02       	muls	r22, r25
    48f8:	b0 01       	movw	r22, r0
    48fa:	11 24       	eor	r1, r1
    48fc:	68 54       	subi	r22, 0x48	; 72
    48fe:	74 4f       	sbci	r23, 0xF4	; 244
    4900:	81 11       	cpse	r24, r1
    4902:	05 c0       	rjmp	.+10     	; 0x490e <rc_servo_setPosition+0x26>
    4904:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4908:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    490c:	08 95       	ret
    490e:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    4912:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    4916:	08 95       	ret

00004918 <rc_servo_initialise>:
    4918:	ea e0       	ldi	r30, 0x0A	; 10
    491a:	f1 e0       	ldi	r31, 0x01	; 1
    491c:	80 81       	ld	r24, Z
    491e:	88 61       	ori	r24, 0x18	; 24
    4920:	80 83       	st	Z, r24
    4922:	8f e3       	ldi	r24, 0x3F	; 63
    4924:	9c e9       	ldi	r25, 0x9C	; 156
    4926:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    492a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    492e:	60 e0       	ldi	r22, 0x00	; 0
    4930:	80 e0       	ldi	r24, 0x00	; 0
    4932:	da df       	rcall	.-76     	; 0x48e8 <rc_servo_setPosition>
    4934:	60 e0       	ldi	r22, 0x00	; 0
    4936:	81 e0       	ldi	r24, 0x01	; 1
    4938:	d7 df       	rcall	.-82     	; 0x48e8 <rc_servo_setPosition>
    493a:	e0 e2       	ldi	r30, 0x20	; 32
    493c:	f1 e0       	ldi	r31, 0x01	; 1
    493e:	80 81       	ld	r24, Z
    4940:	82 6a       	ori	r24, 0xA2	; 162
    4942:	80 83       	st	Z, r24
    4944:	e1 e2       	ldi	r30, 0x21	; 33
    4946:	f1 e0       	ldi	r31, 0x01	; 1
    4948:	80 81       	ld	r24, Z
    494a:	8a 61       	ori	r24, 0x1A	; 26
    494c:	80 83       	st	Z, r24
    494e:	08 95       	ret

00004950 <serial_create>:
    4950:	2f 92       	push	r2
    4952:	3f 92       	push	r3
    4954:	4f 92       	push	r4
    4956:	5f 92       	push	r5
    4958:	6f 92       	push	r6
    495a:	7f 92       	push	r7
    495c:	8f 92       	push	r8
    495e:	9f 92       	push	r9
    4960:	af 92       	push	r10
    4962:	cf 92       	push	r12
    4964:	ef 92       	push	r14
    4966:	ff 92       	push	r15
    4968:	0f 93       	push	r16
    496a:	1f 93       	push	r17
    496c:	cf 93       	push	r28
    496e:	df 93       	push	r29
    4970:	cd b7       	in	r28, 0x3d	; 61
    4972:	de b7       	in	r29, 0x3e	; 62
    4974:	f8 2e       	mov	r15, r24
    4976:	2a 01       	movw	r4, r20
    4978:	3b 01       	movw	r6, r22
    497a:	88 e0       	ldi	r24, 0x08	; 8
    497c:	90 e0       	ldi	r25, 0x00	; 0
    497e:	0e 94 cf 31 	call	0x639e	; 0x639e <malloc>
    4982:	8c 01       	movw	r16, r24
    4984:	8f 2d       	mov	r24, r15
    4986:	90 e0       	ldi	r25, 0x00	; 0
    4988:	fc 01       	movw	r30, r24
    498a:	ee 0f       	add	r30, r30
    498c:	ff 1f       	adc	r31, r31
    498e:	e1 58       	subi	r30, 0x81	; 129
    4990:	f8 4e       	sbci	r31, 0xE8	; 232
    4992:	11 83       	std	Z+1, r17	; 0x01
    4994:	00 83       	st	Z, r16
    4996:	01 15       	cp	r16, r1
    4998:	11 05       	cpc	r17, r1
    499a:	09 f4       	brne	.+2      	; 0x499e <serial_create+0x4e>
    499c:	69 c0       	rjmp	.+210    	; 0x4a70 <serial_create+0x120>
    499e:	88 0f       	add	r24, r24
    49a0:	99 1f       	adc	r25, r25
    49a2:	fc 01       	movw	r30, r24
    49a4:	e5 5f       	subi	r30, 0xF5	; 245
    49a6:	fd 4f       	sbci	r31, 0xFD	; 253
    49a8:	80 81       	ld	r24, Z
    49aa:	91 81       	ldd	r25, Z+1	; 0x01
    49ac:	d8 01       	movw	r26, r16
    49ae:	8d 93       	st	X+, r24
    49b0:	9c 93       	st	X, r25
    49b2:	8c 2d       	mov	r24, r12
    49b4:	90 e0       	ldi	r25, 0x00	; 0
    49b6:	88 0f       	add	r24, r24
    49b8:	99 1f       	adc	r25, r25
    49ba:	88 0f       	add	r24, r24
    49bc:	99 1f       	adc	r25, r25
    49be:	0e 94 cf 31 	call	0x639e	; 0x639e <malloc>
    49c2:	1c 01       	movw	r2, r24
    49c4:	86 e0       	ldi	r24, 0x06	; 6
    49c6:	90 e0       	ldi	r25, 0x00	; 0
    49c8:	0e 94 cf 31 	call	0x639e	; 0x639e <malloc>
    49cc:	7c 01       	movw	r14, r24
    49ce:	4c 2d       	mov	r20, r12
    49d0:	b1 01       	movw	r22, r2
    49d2:	f1 d6       	rcall	.+3554   	; 0x57b6 <fifo_init>
    49d4:	f8 01       	movw	r30, r16
    49d6:	f5 82       	std	Z+5, r15	; 0x05
    49d8:	e4 82       	std	Z+4, r14	; 0x04
    49da:	8a 2d       	mov	r24, r10
    49dc:	90 e0       	ldi	r25, 0x00	; 0
    49de:	88 0f       	add	r24, r24
    49e0:	99 1f       	adc	r25, r25
    49e2:	88 0f       	add	r24, r24
    49e4:	99 1f       	adc	r25, r25
    49e6:	0e 94 cf 31 	call	0x639e	; 0x639e <malloc>
    49ea:	1c 01       	movw	r2, r24
    49ec:	86 e0       	ldi	r24, 0x06	; 6
    49ee:	90 e0       	ldi	r25, 0x00	; 0
    49f0:	0e 94 cf 31 	call	0x639e	; 0x639e <malloc>
    49f4:	7c 01       	movw	r14, r24
    49f6:	4a 2d       	mov	r20, r10
    49f8:	b1 01       	movw	r22, r2
    49fa:	dd d6       	rcall	.+3514   	; 0x57b6 <fifo_init>
    49fc:	d8 01       	movw	r26, r16
    49fe:	13 96       	adiw	r26, 0x03	; 3
    4a00:	fc 92       	st	X, r15
    4a02:	ee 92       	st	-X, r14
    4a04:	12 97       	sbiw	r26, 0x02	; 2
    4a06:	17 96       	adiw	r26, 0x07	; 7
    4a08:	9c 92       	st	X, r9
    4a0a:	8e 92       	st	-X, r8
    4a0c:	16 97       	sbiw	r26, 0x06	; 6
    4a0e:	ff b6       	in	r15, 0x3f	; 63
    4a10:	f8 94       	cli
    4a12:	ed 91       	ld	r30, X+
    4a14:	fc 91       	ld	r31, X
    4a16:	11 97       	sbiw	r26, 0x01	; 1
    4a18:	36 97       	sbiw	r30, 0x06	; 6
    4a1a:	80 81       	ld	r24, Z
    4a1c:	82 60       	ori	r24, 0x02	; 2
    4a1e:	80 83       	st	Z, r24
    4a20:	8d 90       	ld	r8, X+
    4a22:	9c 90       	ld	r9, X
    4a24:	c3 01       	movw	r24, r6
    4a26:	b2 01       	movw	r22, r4
    4a28:	e0 d7       	rcall	.+4032   	; 0x59ea <__floatunsisf>
    4a2a:	20 e0       	ldi	r18, 0x00	; 0
    4a2c:	30 e0       	ldi	r19, 0x00	; 0
    4a2e:	40 e0       	ldi	r20, 0x00	; 0
    4a30:	51 e4       	ldi	r21, 0x41	; 65
    4a32:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <__mulsf3>
    4a36:	9b 01       	movw	r18, r22
    4a38:	ac 01       	movw	r20, r24
    4a3a:	60 e0       	ldi	r22, 0x00	; 0
    4a3c:	74 e2       	ldi	r23, 0x24	; 36
    4a3e:	84 e7       	ldi	r24, 0x74	; 116
    4a40:	9b e4       	ldi	r25, 0x4B	; 75
    4a42:	3a d7       	rcall	.+3700   	; 0x58b8 <__divsf3>
    4a44:	20 e0       	ldi	r18, 0x00	; 0
    4a46:	30 e0       	ldi	r19, 0x00	; 0
    4a48:	40 e8       	ldi	r20, 0x80	; 128
    4a4a:	5f e3       	ldi	r21, 0x3F	; 63
    4a4c:	d0 d6       	rcall	.+3488   	; 0x57ee <__subsf3>
    4a4e:	a1 d7       	rcall	.+3906   	; 0x5992 <__fixunssfsi>
    4a50:	f4 01       	movw	r30, r8
    4a52:	32 97       	sbiw	r30, 0x02	; 2
    4a54:	60 83       	st	Z, r22
    4a56:	d8 01       	movw	r26, r16
    4a58:	ed 91       	ld	r30, X+
    4a5a:	fc 91       	ld	r31, X
    4a5c:	11 97       	sbiw	r26, 0x01	; 1
    4a5e:	35 97       	sbiw	r30, 0x05	; 5
    4a60:	88 e9       	ldi	r24, 0x98	; 152
    4a62:	80 83       	st	Z, r24
    4a64:	ed 91       	ld	r30, X+
    4a66:	fc 91       	ld	r31, X
    4a68:	34 97       	sbiw	r30, 0x04	; 4
    4a6a:	86 e0       	ldi	r24, 0x06	; 6
    4a6c:	80 83       	st	Z, r24
    4a6e:	ff be       	out	0x3f, r15	; 63
    4a70:	c8 01       	movw	r24, r16
    4a72:	df 91       	pop	r29
    4a74:	cf 91       	pop	r28
    4a76:	1f 91       	pop	r17
    4a78:	0f 91       	pop	r16
    4a7a:	ff 90       	pop	r15
    4a7c:	ef 90       	pop	r14
    4a7e:	cf 90       	pop	r12
    4a80:	af 90       	pop	r10
    4a82:	9f 90       	pop	r9
    4a84:	8f 90       	pop	r8
    4a86:	7f 90       	pop	r7
    4a88:	6f 90       	pop	r6
    4a8a:	5f 90       	pop	r5
    4a8c:	4f 90       	pop	r4
    4a8e:	3f 90       	pop	r3
    4a90:	2f 90       	pop	r2
    4a92:	08 95       	ret

00004a94 <serial_sendByte>:
    4a94:	cf 93       	push	r28
    4a96:	df 93       	push	r29
    4a98:	dc 01       	movw	r26, r24
    4a9a:	89 2b       	or	r24, r25
    4a9c:	01 f1       	breq	.+64     	; 0x4ade <serial_sendByte+0x4a>
    4a9e:	12 96       	adiw	r26, 0x02	; 2
    4aa0:	ed 91       	ld	r30, X+
    4aa2:	fc 91       	ld	r31, X
    4aa4:	13 97       	sbiw	r26, 0x03	; 3
    4aa6:	93 81       	ldd	r25, Z+3	; 0x03
    4aa8:	82 81       	ldd	r24, Z+2	; 0x02
    4aaa:	25 81       	ldd	r18, Z+5	; 0x05
    4aac:	98 1b       	sub	r25, r24
    4aae:	92 23       	and	r25, r18
    4ab0:	84 81       	ldd	r24, Z+4	; 0x04
    4ab2:	98 17       	cp	r25, r24
    4ab4:	b1 f0       	breq	.+44     	; 0x4ae2 <serial_sendByte+0x4e>
    4ab6:	83 81       	ldd	r24, Z+3	; 0x03
    4ab8:	26 95       	lsr	r18
    4aba:	28 23       	and	r18, r24
    4abc:	c0 81       	ld	r28, Z
    4abe:	d1 81       	ldd	r29, Z+1	; 0x01
    4ac0:	c2 0f       	add	r28, r18
    4ac2:	d1 1d       	adc	r29, r1
    4ac4:	68 83       	st	Y, r22
    4ac6:	8f 5f       	subi	r24, 0xFF	; 255
    4ac8:	95 81       	ldd	r25, Z+5	; 0x05
    4aca:	89 23       	and	r24, r25
    4acc:	83 83       	std	Z+3, r24	; 0x03
    4ace:	ed 91       	ld	r30, X+
    4ad0:	fc 91       	ld	r31, X
    4ad2:	35 97       	sbiw	r30, 0x05	; 5
    4ad4:	80 81       	ld	r24, Z
    4ad6:	80 62       	ori	r24, 0x20	; 32
    4ad8:	80 83       	st	Z, r24
    4ada:	80 e0       	ldi	r24, 0x00	; 0
    4adc:	03 c0       	rjmp	.+6      	; 0x4ae4 <serial_sendByte+0x50>
    4ade:	81 e0       	ldi	r24, 0x01	; 1
    4ae0:	01 c0       	rjmp	.+2      	; 0x4ae4 <serial_sendByte+0x50>
    4ae2:	82 e0       	ldi	r24, 0x02	; 2
    4ae4:	df 91       	pop	r29
    4ae6:	cf 91       	pop	r28
    4ae8:	08 95       	ret

00004aea <serial_sendBytes>:
    4aea:	ef 92       	push	r14
    4aec:	ff 92       	push	r15
    4aee:	0f 93       	push	r16
    4af0:	1f 93       	push	r17
    4af2:	cf 93       	push	r28
    4af4:	df 93       	push	r29
    4af6:	7c 01       	movw	r14, r24
    4af8:	00 97       	sbiw	r24, 0x00	; 0
    4afa:	09 f4       	brne	.+2      	; 0x4afe <serial_sendBytes+0x14>
    4afc:	41 c0       	rjmp	.+130    	; 0x4b80 <serial_sendBytes+0x96>
    4afe:	dc 01       	movw	r26, r24
    4b00:	12 96       	adiw	r26, 0x02	; 2
    4b02:	ed 91       	ld	r30, X+
    4b04:	fc 91       	ld	r31, X
    4b06:	13 97       	sbiw	r26, 0x03	; 3
    4b08:	93 81       	ldd	r25, Z+3	; 0x03
    4b0a:	82 81       	ldd	r24, Z+2	; 0x02
    4b0c:	98 1b       	sub	r25, r24
    4b0e:	85 81       	ldd	r24, Z+5	; 0x05
    4b10:	98 23       	and	r25, r24
    4b12:	84 81       	ldd	r24, Z+4	; 0x04
    4b14:	89 1b       	sub	r24, r25
    4b16:	86 17       	cp	r24, r22
    4b18:	a8 f1       	brcs	.+106    	; 0x4b84 <serial_sendBytes+0x9a>
    4b1a:	66 23       	and	r22, r22
    4b1c:	41 f1       	breq	.+80     	; 0x4b6e <serial_sendBytes+0x84>
    4b1e:	84 2f       	mov	r24, r20
    4b20:	95 2f       	mov	r25, r21
    4b22:	dc 01       	movw	r26, r24
    4b24:	61 50       	subi	r22, 0x01	; 1
    4b26:	46 2f       	mov	r20, r22
    4b28:	50 e0       	ldi	r21, 0x00	; 0
    4b2a:	4f 5f       	subi	r20, 0xFF	; 255
    4b2c:	5f 4f       	sbci	r21, 0xFF	; 255
    4b2e:	48 0f       	add	r20, r24
    4b30:	59 1f       	adc	r21, r25
    4b32:	e7 01       	movw	r28, r14
    4b34:	ea 81       	ldd	r30, Y+2	; 0x02
    4b36:	fb 81       	ldd	r31, Y+3	; 0x03
    4b38:	93 81       	ldd	r25, Z+3	; 0x03
    4b3a:	82 81       	ldd	r24, Z+2	; 0x02
    4b3c:	25 81       	ldd	r18, Z+5	; 0x05
    4b3e:	98 1b       	sub	r25, r24
    4b40:	92 23       	and	r25, r18
    4b42:	84 81       	ldd	r24, Z+4	; 0x04
    4b44:	98 17       	cp	r25, r24
    4b46:	79 f0       	breq	.+30     	; 0x4b66 <serial_sendBytes+0x7c>
    4b48:	8c 91       	ld	r24, X
    4b4a:	93 81       	ldd	r25, Z+3	; 0x03
    4b4c:	26 95       	lsr	r18
    4b4e:	29 23       	and	r18, r25
    4b50:	60 81       	ld	r22, Z
    4b52:	71 81       	ldd	r23, Z+1	; 0x01
    4b54:	8b 01       	movw	r16, r22
    4b56:	02 0f       	add	r16, r18
    4b58:	11 1d       	adc	r17, r1
    4b5a:	e8 01       	movw	r28, r16
    4b5c:	88 83       	st	Y, r24
    4b5e:	9f 5f       	subi	r25, 0xFF	; 255
    4b60:	85 81       	ldd	r24, Z+5	; 0x05
    4b62:	98 23       	and	r25, r24
    4b64:	93 83       	std	Z+3, r25	; 0x03
    4b66:	11 96       	adiw	r26, 0x01	; 1
    4b68:	a4 17       	cp	r26, r20
    4b6a:	b5 07       	cpc	r27, r21
    4b6c:	11 f7       	brne	.-60     	; 0x4b32 <serial_sendBytes+0x48>
    4b6e:	d7 01       	movw	r26, r14
    4b70:	ed 91       	ld	r30, X+
    4b72:	fc 91       	ld	r31, X
    4b74:	35 97       	sbiw	r30, 0x05	; 5
    4b76:	80 81       	ld	r24, Z
    4b78:	80 62       	ori	r24, 0x20	; 32
    4b7a:	80 83       	st	Z, r24
    4b7c:	80 e0       	ldi	r24, 0x00	; 0
    4b7e:	03 c0       	rjmp	.+6      	; 0x4b86 <serial_sendBytes+0x9c>
    4b80:	81 e0       	ldi	r24, 0x01	; 1
    4b82:	01 c0       	rjmp	.+2      	; 0x4b86 <serial_sendBytes+0x9c>
    4b84:	82 e0       	ldi	r24, 0x02	; 2
    4b86:	df 91       	pop	r29
    4b88:	cf 91       	pop	r28
    4b8a:	1f 91       	pop	r17
    4b8c:	0f 91       	pop	r16
    4b8e:	ff 90       	pop	r15
    4b90:	ef 90       	pop	r14
    4b92:	08 95       	ret

00004b94 <serial_getByte>:
    4b94:	00 97       	sbiw	r24, 0x00	; 0
    4b96:	d1 f0       	breq	.+52     	; 0x4bcc <serial_getByte+0x38>
    4b98:	dc 01       	movw	r26, r24
    4b9a:	14 96       	adiw	r26, 0x04	; 4
    4b9c:	ed 91       	ld	r30, X+
    4b9e:	fc 91       	ld	r31, X
    4ba0:	15 97       	sbiw	r26, 0x05	; 5
    4ba2:	93 81       	ldd	r25, Z+3	; 0x03
    4ba4:	82 81       	ldd	r24, Z+2	; 0x02
    4ba6:	98 17       	cp	r25, r24
    4ba8:	99 f0       	breq	.+38     	; 0x4bd0 <serial_getByte+0x3c>
    4baa:	92 81       	ldd	r25, Z+2	; 0x02
    4bac:	85 81       	ldd	r24, Z+5	; 0x05
    4bae:	86 95       	lsr	r24
    4bb0:	89 23       	and	r24, r25
    4bb2:	a0 81       	ld	r26, Z
    4bb4:	b1 81       	ldd	r27, Z+1	; 0x01
    4bb6:	a8 0f       	add	r26, r24
    4bb8:	b1 1d       	adc	r27, r1
    4bba:	8c 91       	ld	r24, X
    4bbc:	db 01       	movw	r26, r22
    4bbe:	8c 93       	st	X, r24
    4bc0:	9f 5f       	subi	r25, 0xFF	; 255
    4bc2:	85 81       	ldd	r24, Z+5	; 0x05
    4bc4:	98 23       	and	r25, r24
    4bc6:	92 83       	std	Z+2, r25	; 0x02
    4bc8:	80 e0       	ldi	r24, 0x00	; 0
    4bca:	08 95       	ret
    4bcc:	81 e0       	ldi	r24, 0x01	; 1
    4bce:	08 95       	ret
    4bd0:	83 e0       	ldi	r24, 0x03	; 3
    4bd2:	08 95       	ret

00004bd4 <__vector_25>:
    4bd4:	1f 92       	push	r1
    4bd6:	0f 92       	push	r0
    4bd8:	0f b6       	in	r0, 0x3f	; 63
    4bda:	0f 92       	push	r0
    4bdc:	11 24       	eor	r1, r1
    4bde:	0b b6       	in	r0, 0x3b	; 59
    4be0:	0f 92       	push	r0
    4be2:	2f 93       	push	r18
    4be4:	3f 93       	push	r19
    4be6:	4f 93       	push	r20
    4be8:	5f 93       	push	r21
    4bea:	6f 93       	push	r22
    4bec:	7f 93       	push	r23
    4bee:	8f 93       	push	r24
    4bf0:	9f 93       	push	r25
    4bf2:	af 93       	push	r26
    4bf4:	bf 93       	push	r27
    4bf6:	cf 93       	push	r28
    4bf8:	df 93       	push	r29
    4bfa:	ef 93       	push	r30
    4bfc:	ff 93       	push	r31
    4bfe:	a0 91 7f 17 	lds	r26, 0x177F	; 0x80177f <_ser_handle>
    4c02:	b0 91 80 17 	lds	r27, 0x1780	; 0x801780 <_ser_handle+0x1>
    4c06:	10 97       	sbiw	r26, 0x00	; 0
    4c08:	11 f1       	breq	.+68     	; 0x4c4e <__vector_25+0x7a>
    4c0a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4c0e:	14 96       	adiw	r26, 0x04	; 4
    4c10:	ed 91       	ld	r30, X+
    4c12:	fc 91       	ld	r31, X
    4c14:	15 97       	sbiw	r26, 0x05	; 5
    4c16:	93 81       	ldd	r25, Z+3	; 0x03
    4c18:	82 81       	ldd	r24, Z+2	; 0x02
    4c1a:	25 81       	ldd	r18, Z+5	; 0x05
    4c1c:	98 1b       	sub	r25, r24
    4c1e:	92 23       	and	r25, r18
    4c20:	84 81       	ldd	r24, Z+4	; 0x04
    4c22:	98 17       	cp	r25, r24
    4c24:	61 f0       	breq	.+24     	; 0x4c3e <__vector_25+0x6a>
    4c26:	83 81       	ldd	r24, Z+3	; 0x03
    4c28:	26 95       	lsr	r18
    4c2a:	28 23       	and	r18, r24
    4c2c:	c0 81       	ld	r28, Z
    4c2e:	d1 81       	ldd	r29, Z+1	; 0x01
    4c30:	c2 0f       	add	r28, r18
    4c32:	d1 1d       	adc	r29, r1
    4c34:	68 83       	st	Y, r22
    4c36:	8f 5f       	subi	r24, 0xFF	; 255
    4c38:	95 81       	ldd	r25, Z+5	; 0x05
    4c3a:	89 23       	and	r24, r25
    4c3c:	83 83       	std	Z+3, r24	; 0x03
    4c3e:	16 96       	adiw	r26, 0x06	; 6
    4c40:	ed 91       	ld	r30, X+
    4c42:	fc 91       	ld	r31, X
    4c44:	17 97       	sbiw	r26, 0x07	; 7
    4c46:	30 97       	sbiw	r30, 0x00	; 0
    4c48:	11 f0       	breq	.+4      	; 0x4c4e <__vector_25+0x7a>
    4c4a:	cd 01       	movw	r24, r26
    4c4c:	19 95       	eicall
    4c4e:	ff 91       	pop	r31
    4c50:	ef 91       	pop	r30
    4c52:	df 91       	pop	r29
    4c54:	cf 91       	pop	r28
    4c56:	bf 91       	pop	r27
    4c58:	af 91       	pop	r26
    4c5a:	9f 91       	pop	r25
    4c5c:	8f 91       	pop	r24
    4c5e:	7f 91       	pop	r23
    4c60:	6f 91       	pop	r22
    4c62:	5f 91       	pop	r21
    4c64:	4f 91       	pop	r20
    4c66:	3f 91       	pop	r19
    4c68:	2f 91       	pop	r18
    4c6a:	0f 90       	pop	r0
    4c6c:	0b be       	out	0x3b, r0	; 59
    4c6e:	0f 90       	pop	r0
    4c70:	0f be       	out	0x3f, r0	; 63
    4c72:	0f 90       	pop	r0
    4c74:	1f 90       	pop	r1
    4c76:	18 95       	reti

00004c78 <__vector_26>:
    4c78:	1f 92       	push	r1
    4c7a:	0f 92       	push	r0
    4c7c:	0f b6       	in	r0, 0x3f	; 63
    4c7e:	0f 92       	push	r0
    4c80:	11 24       	eor	r1, r1
    4c82:	0b b6       	in	r0, 0x3b	; 59
    4c84:	0f 92       	push	r0
    4c86:	2f 93       	push	r18
    4c88:	8f 93       	push	r24
    4c8a:	9f 93       	push	r25
    4c8c:	af 93       	push	r26
    4c8e:	bf 93       	push	r27
    4c90:	ef 93       	push	r30
    4c92:	ff 93       	push	r31
    4c94:	e0 91 7f 17 	lds	r30, 0x177F	; 0x80177f <_ser_handle>
    4c98:	f0 91 80 17 	lds	r31, 0x1780	; 0x801780 <_ser_handle+0x1>
    4c9c:	30 97       	sbiw	r30, 0x00	; 0
    4c9e:	b9 f0       	breq	.+46     	; 0x4cce <__vector_26+0x56>
    4ca0:	02 80       	ldd	r0, Z+2	; 0x02
    4ca2:	f3 81       	ldd	r31, Z+3	; 0x03
    4ca4:	e0 2d       	mov	r30, r0
    4ca6:	93 81       	ldd	r25, Z+3	; 0x03
    4ca8:	82 81       	ldd	r24, Z+2	; 0x02
    4caa:	98 17       	cp	r25, r24
    4cac:	b1 f0       	breq	.+44     	; 0x4cda <__vector_26+0x62>
    4cae:	92 81       	ldd	r25, Z+2	; 0x02
    4cb0:	85 81       	ldd	r24, Z+5	; 0x05
    4cb2:	28 2f       	mov	r18, r24
    4cb4:	26 95       	lsr	r18
    4cb6:	29 23       	and	r18, r25
    4cb8:	a0 81       	ld	r26, Z
    4cba:	b1 81       	ldd	r27, Z+1	; 0x01
    4cbc:	a2 0f       	add	r26, r18
    4cbe:	b1 1d       	adc	r27, r1
    4cc0:	2c 91       	ld	r18, X
    4cc2:	9f 5f       	subi	r25, 0xFF	; 255
    4cc4:	89 23       	and	r24, r25
    4cc6:	82 83       	std	Z+2, r24	; 0x02
    4cc8:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4ccc:	0b c0       	rjmp	.+22     	; 0x4ce4 <__vector_26+0x6c>
    4cce:	e1 ec       	ldi	r30, 0xC1	; 193
    4cd0:	f0 e0       	ldi	r31, 0x00	; 0
    4cd2:	80 81       	ld	r24, Z
    4cd4:	8f 7d       	andi	r24, 0xDF	; 223
    4cd6:	80 83       	st	Z, r24
    4cd8:	05 c0       	rjmp	.+10     	; 0x4ce4 <__vector_26+0x6c>
    4cda:	e1 ec       	ldi	r30, 0xC1	; 193
    4cdc:	f0 e0       	ldi	r31, 0x00	; 0
    4cde:	80 81       	ld	r24, Z
    4ce0:	8f 7d       	andi	r24, 0xDF	; 223
    4ce2:	80 83       	st	Z, r24
    4ce4:	ff 91       	pop	r31
    4ce6:	ef 91       	pop	r30
    4ce8:	bf 91       	pop	r27
    4cea:	af 91       	pop	r26
    4cec:	9f 91       	pop	r25
    4cee:	8f 91       	pop	r24
    4cf0:	2f 91       	pop	r18
    4cf2:	0f 90       	pop	r0
    4cf4:	0b be       	out	0x3b, r0	; 59
    4cf6:	0f 90       	pop	r0
    4cf8:	0f be       	out	0x3f, r0	; 63
    4cfa:	0f 90       	pop	r0
    4cfc:	1f 90       	pop	r1
    4cfe:	18 95       	reti

00004d00 <__vector_36>:
    4d00:	1f 92       	push	r1
    4d02:	0f 92       	push	r0
    4d04:	0f b6       	in	r0, 0x3f	; 63
    4d06:	0f 92       	push	r0
    4d08:	11 24       	eor	r1, r1
    4d0a:	0b b6       	in	r0, 0x3b	; 59
    4d0c:	0f 92       	push	r0
    4d0e:	2f 93       	push	r18
    4d10:	3f 93       	push	r19
    4d12:	4f 93       	push	r20
    4d14:	5f 93       	push	r21
    4d16:	6f 93       	push	r22
    4d18:	7f 93       	push	r23
    4d1a:	8f 93       	push	r24
    4d1c:	9f 93       	push	r25
    4d1e:	af 93       	push	r26
    4d20:	bf 93       	push	r27
    4d22:	cf 93       	push	r28
    4d24:	df 93       	push	r29
    4d26:	ef 93       	push	r30
    4d28:	ff 93       	push	r31
    4d2a:	a0 91 81 17 	lds	r26, 0x1781	; 0x801781 <_ser_handle+0x2>
    4d2e:	b0 91 82 17 	lds	r27, 0x1782	; 0x801782 <_ser_handle+0x3>
    4d32:	10 97       	sbiw	r26, 0x00	; 0
    4d34:	11 f1       	breq	.+68     	; 0x4d7a <__vector_36+0x7a>
    4d36:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4d3a:	14 96       	adiw	r26, 0x04	; 4
    4d3c:	ed 91       	ld	r30, X+
    4d3e:	fc 91       	ld	r31, X
    4d40:	15 97       	sbiw	r26, 0x05	; 5
    4d42:	93 81       	ldd	r25, Z+3	; 0x03
    4d44:	82 81       	ldd	r24, Z+2	; 0x02
    4d46:	25 81       	ldd	r18, Z+5	; 0x05
    4d48:	98 1b       	sub	r25, r24
    4d4a:	92 23       	and	r25, r18
    4d4c:	84 81       	ldd	r24, Z+4	; 0x04
    4d4e:	98 17       	cp	r25, r24
    4d50:	61 f0       	breq	.+24     	; 0x4d6a <__vector_36+0x6a>
    4d52:	83 81       	ldd	r24, Z+3	; 0x03
    4d54:	26 95       	lsr	r18
    4d56:	28 23       	and	r18, r24
    4d58:	c0 81       	ld	r28, Z
    4d5a:	d1 81       	ldd	r29, Z+1	; 0x01
    4d5c:	c2 0f       	add	r28, r18
    4d5e:	d1 1d       	adc	r29, r1
    4d60:	68 83       	st	Y, r22
    4d62:	8f 5f       	subi	r24, 0xFF	; 255
    4d64:	95 81       	ldd	r25, Z+5	; 0x05
    4d66:	89 23       	and	r24, r25
    4d68:	83 83       	std	Z+3, r24	; 0x03
    4d6a:	16 96       	adiw	r26, 0x06	; 6
    4d6c:	ed 91       	ld	r30, X+
    4d6e:	fc 91       	ld	r31, X
    4d70:	17 97       	sbiw	r26, 0x07	; 7
    4d72:	30 97       	sbiw	r30, 0x00	; 0
    4d74:	11 f0       	breq	.+4      	; 0x4d7a <__vector_36+0x7a>
    4d76:	cd 01       	movw	r24, r26
    4d78:	19 95       	eicall
    4d7a:	ff 91       	pop	r31
    4d7c:	ef 91       	pop	r30
    4d7e:	df 91       	pop	r29
    4d80:	cf 91       	pop	r28
    4d82:	bf 91       	pop	r27
    4d84:	af 91       	pop	r26
    4d86:	9f 91       	pop	r25
    4d88:	8f 91       	pop	r24
    4d8a:	7f 91       	pop	r23
    4d8c:	6f 91       	pop	r22
    4d8e:	5f 91       	pop	r21
    4d90:	4f 91       	pop	r20
    4d92:	3f 91       	pop	r19
    4d94:	2f 91       	pop	r18
    4d96:	0f 90       	pop	r0
    4d98:	0b be       	out	0x3b, r0	; 59
    4d9a:	0f 90       	pop	r0
    4d9c:	0f be       	out	0x3f, r0	; 63
    4d9e:	0f 90       	pop	r0
    4da0:	1f 90       	pop	r1
    4da2:	18 95       	reti

00004da4 <__vector_37>:
    4da4:	1f 92       	push	r1
    4da6:	0f 92       	push	r0
    4da8:	0f b6       	in	r0, 0x3f	; 63
    4daa:	0f 92       	push	r0
    4dac:	11 24       	eor	r1, r1
    4dae:	0b b6       	in	r0, 0x3b	; 59
    4db0:	0f 92       	push	r0
    4db2:	2f 93       	push	r18
    4db4:	8f 93       	push	r24
    4db6:	9f 93       	push	r25
    4db8:	af 93       	push	r26
    4dba:	bf 93       	push	r27
    4dbc:	ef 93       	push	r30
    4dbe:	ff 93       	push	r31
    4dc0:	e0 91 81 17 	lds	r30, 0x1781	; 0x801781 <_ser_handle+0x2>
    4dc4:	f0 91 82 17 	lds	r31, 0x1782	; 0x801782 <_ser_handle+0x3>
    4dc8:	30 97       	sbiw	r30, 0x00	; 0
    4dca:	b9 f0       	breq	.+46     	; 0x4dfa <__vector_37+0x56>
    4dcc:	02 80       	ldd	r0, Z+2	; 0x02
    4dce:	f3 81       	ldd	r31, Z+3	; 0x03
    4dd0:	e0 2d       	mov	r30, r0
    4dd2:	93 81       	ldd	r25, Z+3	; 0x03
    4dd4:	82 81       	ldd	r24, Z+2	; 0x02
    4dd6:	98 17       	cp	r25, r24
    4dd8:	b1 f0       	breq	.+44     	; 0x4e06 <__vector_37+0x62>
    4dda:	92 81       	ldd	r25, Z+2	; 0x02
    4ddc:	85 81       	ldd	r24, Z+5	; 0x05
    4dde:	28 2f       	mov	r18, r24
    4de0:	26 95       	lsr	r18
    4de2:	29 23       	and	r18, r25
    4de4:	a0 81       	ld	r26, Z
    4de6:	b1 81       	ldd	r27, Z+1	; 0x01
    4de8:	a2 0f       	add	r26, r18
    4dea:	b1 1d       	adc	r27, r1
    4dec:	2c 91       	ld	r18, X
    4dee:	9f 5f       	subi	r25, 0xFF	; 255
    4df0:	89 23       	and	r24, r25
    4df2:	82 83       	std	Z+2, r24	; 0x02
    4df4:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4df8:	0b c0       	rjmp	.+22     	; 0x4e10 <__vector_37+0x6c>
    4dfa:	e9 ec       	ldi	r30, 0xC9	; 201
    4dfc:	f0 e0       	ldi	r31, 0x00	; 0
    4dfe:	80 81       	ld	r24, Z
    4e00:	8f 7d       	andi	r24, 0xDF	; 223
    4e02:	80 83       	st	Z, r24
    4e04:	05 c0       	rjmp	.+10     	; 0x4e10 <__vector_37+0x6c>
    4e06:	e9 ec       	ldi	r30, 0xC9	; 201
    4e08:	f0 e0       	ldi	r31, 0x00	; 0
    4e0a:	80 81       	ld	r24, Z
    4e0c:	8f 7d       	andi	r24, 0xDF	; 223
    4e0e:	80 83       	st	Z, r24
    4e10:	ff 91       	pop	r31
    4e12:	ef 91       	pop	r30
    4e14:	bf 91       	pop	r27
    4e16:	af 91       	pop	r26
    4e18:	9f 91       	pop	r25
    4e1a:	8f 91       	pop	r24
    4e1c:	2f 91       	pop	r18
    4e1e:	0f 90       	pop	r0
    4e20:	0b be       	out	0x3b, r0	; 59
    4e22:	0f 90       	pop	r0
    4e24:	0f be       	out	0x3f, r0	; 63
    4e26:	0f 90       	pop	r0
    4e28:	1f 90       	pop	r1
    4e2a:	18 95       	reti

00004e2c <__vector_51>:
    4e2c:	1f 92       	push	r1
    4e2e:	0f 92       	push	r0
    4e30:	0f b6       	in	r0, 0x3f	; 63
    4e32:	0f 92       	push	r0
    4e34:	11 24       	eor	r1, r1
    4e36:	0b b6       	in	r0, 0x3b	; 59
    4e38:	0f 92       	push	r0
    4e3a:	2f 93       	push	r18
    4e3c:	3f 93       	push	r19
    4e3e:	4f 93       	push	r20
    4e40:	5f 93       	push	r21
    4e42:	6f 93       	push	r22
    4e44:	7f 93       	push	r23
    4e46:	8f 93       	push	r24
    4e48:	9f 93       	push	r25
    4e4a:	af 93       	push	r26
    4e4c:	bf 93       	push	r27
    4e4e:	cf 93       	push	r28
    4e50:	df 93       	push	r29
    4e52:	ef 93       	push	r30
    4e54:	ff 93       	push	r31
    4e56:	a0 91 83 17 	lds	r26, 0x1783	; 0x801783 <_ser_handle+0x4>
    4e5a:	b0 91 84 17 	lds	r27, 0x1784	; 0x801784 <_ser_handle+0x5>
    4e5e:	10 97       	sbiw	r26, 0x00	; 0
    4e60:	11 f1       	breq	.+68     	; 0x4ea6 <__vector_51+0x7a>
    4e62:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4e66:	14 96       	adiw	r26, 0x04	; 4
    4e68:	ed 91       	ld	r30, X+
    4e6a:	fc 91       	ld	r31, X
    4e6c:	15 97       	sbiw	r26, 0x05	; 5
    4e6e:	93 81       	ldd	r25, Z+3	; 0x03
    4e70:	82 81       	ldd	r24, Z+2	; 0x02
    4e72:	25 81       	ldd	r18, Z+5	; 0x05
    4e74:	98 1b       	sub	r25, r24
    4e76:	92 23       	and	r25, r18
    4e78:	84 81       	ldd	r24, Z+4	; 0x04
    4e7a:	98 17       	cp	r25, r24
    4e7c:	61 f0       	breq	.+24     	; 0x4e96 <__vector_51+0x6a>
    4e7e:	83 81       	ldd	r24, Z+3	; 0x03
    4e80:	26 95       	lsr	r18
    4e82:	28 23       	and	r18, r24
    4e84:	c0 81       	ld	r28, Z
    4e86:	d1 81       	ldd	r29, Z+1	; 0x01
    4e88:	c2 0f       	add	r28, r18
    4e8a:	d1 1d       	adc	r29, r1
    4e8c:	68 83       	st	Y, r22
    4e8e:	8f 5f       	subi	r24, 0xFF	; 255
    4e90:	95 81       	ldd	r25, Z+5	; 0x05
    4e92:	89 23       	and	r24, r25
    4e94:	83 83       	std	Z+3, r24	; 0x03
    4e96:	16 96       	adiw	r26, 0x06	; 6
    4e98:	ed 91       	ld	r30, X+
    4e9a:	fc 91       	ld	r31, X
    4e9c:	17 97       	sbiw	r26, 0x07	; 7
    4e9e:	30 97       	sbiw	r30, 0x00	; 0
    4ea0:	11 f0       	breq	.+4      	; 0x4ea6 <__vector_51+0x7a>
    4ea2:	cd 01       	movw	r24, r26
    4ea4:	19 95       	eicall
    4ea6:	ff 91       	pop	r31
    4ea8:	ef 91       	pop	r30
    4eaa:	df 91       	pop	r29
    4eac:	cf 91       	pop	r28
    4eae:	bf 91       	pop	r27
    4eb0:	af 91       	pop	r26
    4eb2:	9f 91       	pop	r25
    4eb4:	8f 91       	pop	r24
    4eb6:	7f 91       	pop	r23
    4eb8:	6f 91       	pop	r22
    4eba:	5f 91       	pop	r21
    4ebc:	4f 91       	pop	r20
    4ebe:	3f 91       	pop	r19
    4ec0:	2f 91       	pop	r18
    4ec2:	0f 90       	pop	r0
    4ec4:	0b be       	out	0x3b, r0	; 59
    4ec6:	0f 90       	pop	r0
    4ec8:	0f be       	out	0x3f, r0	; 63
    4eca:	0f 90       	pop	r0
    4ecc:	1f 90       	pop	r1
    4ece:	18 95       	reti

00004ed0 <__vector_52>:
    4ed0:	1f 92       	push	r1
    4ed2:	0f 92       	push	r0
    4ed4:	0f b6       	in	r0, 0x3f	; 63
    4ed6:	0f 92       	push	r0
    4ed8:	11 24       	eor	r1, r1
    4eda:	0b b6       	in	r0, 0x3b	; 59
    4edc:	0f 92       	push	r0
    4ede:	2f 93       	push	r18
    4ee0:	8f 93       	push	r24
    4ee2:	9f 93       	push	r25
    4ee4:	af 93       	push	r26
    4ee6:	bf 93       	push	r27
    4ee8:	ef 93       	push	r30
    4eea:	ff 93       	push	r31
    4eec:	e0 91 83 17 	lds	r30, 0x1783	; 0x801783 <_ser_handle+0x4>
    4ef0:	f0 91 84 17 	lds	r31, 0x1784	; 0x801784 <_ser_handle+0x5>
    4ef4:	30 97       	sbiw	r30, 0x00	; 0
    4ef6:	b9 f0       	breq	.+46     	; 0x4f26 <__vector_52+0x56>
    4ef8:	02 80       	ldd	r0, Z+2	; 0x02
    4efa:	f3 81       	ldd	r31, Z+3	; 0x03
    4efc:	e0 2d       	mov	r30, r0
    4efe:	93 81       	ldd	r25, Z+3	; 0x03
    4f00:	82 81       	ldd	r24, Z+2	; 0x02
    4f02:	98 17       	cp	r25, r24
    4f04:	b1 f0       	breq	.+44     	; 0x4f32 <__vector_52+0x62>
    4f06:	92 81       	ldd	r25, Z+2	; 0x02
    4f08:	85 81       	ldd	r24, Z+5	; 0x05
    4f0a:	28 2f       	mov	r18, r24
    4f0c:	26 95       	lsr	r18
    4f0e:	29 23       	and	r18, r25
    4f10:	a0 81       	ld	r26, Z
    4f12:	b1 81       	ldd	r27, Z+1	; 0x01
    4f14:	a2 0f       	add	r26, r18
    4f16:	b1 1d       	adc	r27, r1
    4f18:	2c 91       	ld	r18, X
    4f1a:	9f 5f       	subi	r25, 0xFF	; 255
    4f1c:	89 23       	and	r24, r25
    4f1e:	82 83       	std	Z+2, r24	; 0x02
    4f20:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4f24:	0b c0       	rjmp	.+22     	; 0x4f3c <__vector_52+0x6c>
    4f26:	e1 ed       	ldi	r30, 0xD1	; 209
    4f28:	f0 e0       	ldi	r31, 0x00	; 0
    4f2a:	80 81       	ld	r24, Z
    4f2c:	8f 7d       	andi	r24, 0xDF	; 223
    4f2e:	80 83       	st	Z, r24
    4f30:	05 c0       	rjmp	.+10     	; 0x4f3c <__vector_52+0x6c>
    4f32:	e1 ed       	ldi	r30, 0xD1	; 209
    4f34:	f0 e0       	ldi	r31, 0x00	; 0
    4f36:	80 81       	ld	r24, Z
    4f38:	8f 7d       	andi	r24, 0xDF	; 223
    4f3a:	80 83       	st	Z, r24
    4f3c:	ff 91       	pop	r31
    4f3e:	ef 91       	pop	r30
    4f40:	bf 91       	pop	r27
    4f42:	af 91       	pop	r26
    4f44:	9f 91       	pop	r25
    4f46:	8f 91       	pop	r24
    4f48:	2f 91       	pop	r18
    4f4a:	0f 90       	pop	r0
    4f4c:	0b be       	out	0x3b, r0	; 59
    4f4e:	0f 90       	pop	r0
    4f50:	0f be       	out	0x3f, r0	; 63
    4f52:	0f 90       	pop	r0
    4f54:	1f 90       	pop	r1
    4f56:	18 95       	reti

00004f58 <__vector_54>:
    4f58:	1f 92       	push	r1
    4f5a:	0f 92       	push	r0
    4f5c:	0f b6       	in	r0, 0x3f	; 63
    4f5e:	0f 92       	push	r0
    4f60:	11 24       	eor	r1, r1
    4f62:	0b b6       	in	r0, 0x3b	; 59
    4f64:	0f 92       	push	r0
    4f66:	2f 93       	push	r18
    4f68:	3f 93       	push	r19
    4f6a:	4f 93       	push	r20
    4f6c:	5f 93       	push	r21
    4f6e:	6f 93       	push	r22
    4f70:	7f 93       	push	r23
    4f72:	8f 93       	push	r24
    4f74:	9f 93       	push	r25
    4f76:	af 93       	push	r26
    4f78:	bf 93       	push	r27
    4f7a:	cf 93       	push	r28
    4f7c:	df 93       	push	r29
    4f7e:	ef 93       	push	r30
    4f80:	ff 93       	push	r31
    4f82:	a0 91 85 17 	lds	r26, 0x1785	; 0x801785 <_ser_handle+0x6>
    4f86:	b0 91 86 17 	lds	r27, 0x1786	; 0x801786 <_ser_handle+0x7>
    4f8a:	10 97       	sbiw	r26, 0x00	; 0
    4f8c:	11 f1       	breq	.+68     	; 0x4fd2 <__vector_54+0x7a>
    4f8e:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4f92:	14 96       	adiw	r26, 0x04	; 4
    4f94:	ed 91       	ld	r30, X+
    4f96:	fc 91       	ld	r31, X
    4f98:	15 97       	sbiw	r26, 0x05	; 5
    4f9a:	93 81       	ldd	r25, Z+3	; 0x03
    4f9c:	82 81       	ldd	r24, Z+2	; 0x02
    4f9e:	25 81       	ldd	r18, Z+5	; 0x05
    4fa0:	98 1b       	sub	r25, r24
    4fa2:	92 23       	and	r25, r18
    4fa4:	84 81       	ldd	r24, Z+4	; 0x04
    4fa6:	98 17       	cp	r25, r24
    4fa8:	61 f0       	breq	.+24     	; 0x4fc2 <__vector_54+0x6a>
    4faa:	83 81       	ldd	r24, Z+3	; 0x03
    4fac:	26 95       	lsr	r18
    4fae:	28 23       	and	r18, r24
    4fb0:	c0 81       	ld	r28, Z
    4fb2:	d1 81       	ldd	r29, Z+1	; 0x01
    4fb4:	c2 0f       	add	r28, r18
    4fb6:	d1 1d       	adc	r29, r1
    4fb8:	68 83       	st	Y, r22
    4fba:	8f 5f       	subi	r24, 0xFF	; 255
    4fbc:	95 81       	ldd	r25, Z+5	; 0x05
    4fbe:	89 23       	and	r24, r25
    4fc0:	83 83       	std	Z+3, r24	; 0x03
    4fc2:	16 96       	adiw	r26, 0x06	; 6
    4fc4:	ed 91       	ld	r30, X+
    4fc6:	fc 91       	ld	r31, X
    4fc8:	17 97       	sbiw	r26, 0x07	; 7
    4fca:	30 97       	sbiw	r30, 0x00	; 0
    4fcc:	11 f0       	breq	.+4      	; 0x4fd2 <__vector_54+0x7a>
    4fce:	cd 01       	movw	r24, r26
    4fd0:	19 95       	eicall
    4fd2:	ff 91       	pop	r31
    4fd4:	ef 91       	pop	r30
    4fd6:	df 91       	pop	r29
    4fd8:	cf 91       	pop	r28
    4fda:	bf 91       	pop	r27
    4fdc:	af 91       	pop	r26
    4fde:	9f 91       	pop	r25
    4fe0:	8f 91       	pop	r24
    4fe2:	7f 91       	pop	r23
    4fe4:	6f 91       	pop	r22
    4fe6:	5f 91       	pop	r21
    4fe8:	4f 91       	pop	r20
    4fea:	3f 91       	pop	r19
    4fec:	2f 91       	pop	r18
    4fee:	0f 90       	pop	r0
    4ff0:	0b be       	out	0x3b, r0	; 59
    4ff2:	0f 90       	pop	r0
    4ff4:	0f be       	out	0x3f, r0	; 63
    4ff6:	0f 90       	pop	r0
    4ff8:	1f 90       	pop	r1
    4ffa:	18 95       	reti

00004ffc <__vector_55>:
    4ffc:	1f 92       	push	r1
    4ffe:	0f 92       	push	r0
    5000:	0f b6       	in	r0, 0x3f	; 63
    5002:	0f 92       	push	r0
    5004:	11 24       	eor	r1, r1
    5006:	0b b6       	in	r0, 0x3b	; 59
    5008:	0f 92       	push	r0
    500a:	2f 93       	push	r18
    500c:	8f 93       	push	r24
    500e:	9f 93       	push	r25
    5010:	af 93       	push	r26
    5012:	bf 93       	push	r27
    5014:	ef 93       	push	r30
    5016:	ff 93       	push	r31
    5018:	e0 91 85 17 	lds	r30, 0x1785	; 0x801785 <_ser_handle+0x6>
    501c:	f0 91 86 17 	lds	r31, 0x1786	; 0x801786 <_ser_handle+0x7>
    5020:	30 97       	sbiw	r30, 0x00	; 0
    5022:	b9 f0       	breq	.+46     	; 0x5052 <__vector_55+0x56>
    5024:	02 80       	ldd	r0, Z+2	; 0x02
    5026:	f3 81       	ldd	r31, Z+3	; 0x03
    5028:	e0 2d       	mov	r30, r0
    502a:	93 81       	ldd	r25, Z+3	; 0x03
    502c:	82 81       	ldd	r24, Z+2	; 0x02
    502e:	98 17       	cp	r25, r24
    5030:	b1 f0       	breq	.+44     	; 0x505e <__vector_55+0x62>
    5032:	92 81       	ldd	r25, Z+2	; 0x02
    5034:	85 81       	ldd	r24, Z+5	; 0x05
    5036:	28 2f       	mov	r18, r24
    5038:	26 95       	lsr	r18
    503a:	29 23       	and	r18, r25
    503c:	a0 81       	ld	r26, Z
    503e:	b1 81       	ldd	r27, Z+1	; 0x01
    5040:	a2 0f       	add	r26, r18
    5042:	b1 1d       	adc	r27, r1
    5044:	2c 91       	ld	r18, X
    5046:	9f 5f       	subi	r25, 0xFF	; 255
    5048:	89 23       	and	r24, r25
    504a:	82 83       	std	Z+2, r24	; 0x02
    504c:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5050:	0b c0       	rjmp	.+22     	; 0x5068 <__vector_55+0x6c>
    5052:	e1 e3       	ldi	r30, 0x31	; 49
    5054:	f1 e0       	ldi	r31, 0x01	; 1
    5056:	80 81       	ld	r24, Z
    5058:	8f 7d       	andi	r24, 0xDF	; 223
    505a:	80 83       	st	Z, r24
    505c:	05 c0       	rjmp	.+10     	; 0x5068 <__vector_55+0x6c>
    505e:	e1 e3       	ldi	r30, 0x31	; 49
    5060:	f1 e0       	ldi	r31, 0x01	; 1
    5062:	80 81       	ld	r24, Z
    5064:	8f 7d       	andi	r24, 0xDF	; 223
    5066:	80 83       	st	Z, r24
    5068:	ff 91       	pop	r31
    506a:	ef 91       	pop	r30
    506c:	bf 91       	pop	r27
    506e:	af 91       	pop	r26
    5070:	9f 91       	pop	r25
    5072:	8f 91       	pop	r24
    5074:	2f 91       	pop	r18
    5076:	0f 90       	pop	r0
    5078:	0b be       	out	0x3b, r0	; 59
    507a:	0f 90       	pop	r0
    507c:	0f be       	out	0x3f, r0	; 63
    507e:	0f 90       	pop	r0
    5080:	1f 90       	pop	r1
    5082:	18 95       	reti

00005084 <usart_getchar>:
    5084:	cf 93       	push	r28
    5086:	df 93       	push	r29
    5088:	1f 92       	push	r1
    508a:	cd b7       	in	r28, 0x3d	; 61
    508c:	de b7       	in	r29, 0x3e	; 62
    508e:	be 01       	movw	r22, r28
    5090:	6f 5f       	subi	r22, 0xFF	; 255
    5092:	7f 4f       	sbci	r23, 0xFF	; 255
    5094:	80 91 87 17 	lds	r24, 0x1787	; 0x801787 <_com_serial_instance>
    5098:	90 91 88 17 	lds	r25, 0x1788	; 0x801788 <_com_serial_instance+0x1>
    509c:	7b dd       	rcall	.-1290   	; 0x4b94 <serial_getByte>
    509e:	81 11       	cpse	r24, r1
    50a0:	f6 cf       	rjmp	.-20     	; 0x508e <usart_getchar+0xa>
    50a2:	89 81       	ldd	r24, Y+1	; 0x01
    50a4:	90 e0       	ldi	r25, 0x00	; 0
    50a6:	0f 90       	pop	r0
    50a8:	df 91       	pop	r29
    50aa:	cf 91       	pop	r28
    50ac:	08 95       	ret

000050ae <usart_putchar>:
    50ae:	68 2f       	mov	r22, r24
    50b0:	80 91 87 17 	lds	r24, 0x1787	; 0x801787 <_com_serial_instance>
    50b4:	90 91 88 17 	lds	r25, 0x1788	; 0x801788 <_com_serial_instance+0x1>
    50b8:	ed dc       	rcall	.-1574   	; 0x4a94 <serial_sendByte>
    50ba:	80 e0       	ldi	r24, 0x00	; 0
    50bc:	90 e0       	ldi	r25, 0x00	; 0
    50be:	08 95       	ret

000050c0 <stdio_initialise>:
    50c0:	8f 92       	push	r8
    50c2:	9f 92       	push	r9
    50c4:	af 92       	push	r10
    50c6:	cf 92       	push	r12
    50c8:	ef 92       	push	r14
    50ca:	0f 93       	push	r16
    50cc:	81 2c       	mov	r8, r1
    50ce:	91 2c       	mov	r9, r1
    50d0:	68 94       	set
    50d2:	aa 24       	eor	r10, r10
    50d4:	a7 f8       	bld	r10, 7
    50d6:	68 94       	set
    50d8:	cc 24       	eor	r12, r12
    50da:	c7 f8       	bld	r12, 7
    50dc:	e1 2c       	mov	r14, r1
    50de:	00 e0       	ldi	r16, 0x00	; 0
    50e0:	23 e0       	ldi	r18, 0x03	; 3
    50e2:	40 e0       	ldi	r20, 0x00	; 0
    50e4:	51 ee       	ldi	r21, 0xE1	; 225
    50e6:	60 e0       	ldi	r22, 0x00	; 0
    50e8:	70 e0       	ldi	r23, 0x00	; 0
    50ea:	32 dc       	rcall	.-1948   	; 0x4950 <serial_create>
    50ec:	90 93 88 17 	sts	0x1788, r25	; 0x801788 <_com_serial_instance+0x1>
    50f0:	80 93 87 17 	sts	0x1787, r24	; 0x801787 <_com_serial_instance>
    50f4:	e8 ec       	ldi	r30, 0xC8	; 200
    50f6:	f7 e1       	ldi	r31, 0x17	; 23
    50f8:	83 e1       	ldi	r24, 0x13	; 19
    50fa:	92 e0       	ldi	r25, 0x02	; 2
    50fc:	91 83       	std	Z+1, r25	; 0x01
    50fe:	80 83       	st	Z, r24
    5100:	93 83       	std	Z+3, r25	; 0x03
    5102:	82 83       	std	Z+2, r24	; 0x02
    5104:	0f 91       	pop	r16
    5106:	ef 90       	pop	r14
    5108:	cf 90       	pop	r12
    510a:	af 90       	pop	r10
    510c:	9f 90       	pop	r9
    510e:	8f 90       	pop	r8
    5110:	08 95       	ret

00005112 <_turn_off>:
    5112:	90 e0       	ldi	r25, 0x00	; 0
    5114:	fc 01       	movw	r30, r24
    5116:	ee 0f       	add	r30, r30
    5118:	ff 1f       	adc	r31, r31
    511a:	e8 0f       	add	r30, r24
    511c:	f9 1f       	adc	r31, r25
    511e:	ee 0f       	add	r30, r30
    5120:	ff 1f       	adc	r31, r31
    5122:	e7 57       	subi	r30, 0x77	; 119
    5124:	f8 4e       	sbci	r31, 0xE8	; 232
    5126:	23 81       	ldd	r18, Z+3	; 0x03
    5128:	21 11       	cpse	r18, r1
    512a:	1f c0       	rjmp	.+62     	; 0x516a <_turn_off+0x58>
    512c:	9c 01       	movw	r18, r24
    512e:	22 0f       	add	r18, r18
    5130:	33 1f       	adc	r19, r19
    5132:	f9 01       	movw	r30, r18
    5134:	e8 0f       	add	r30, r24
    5136:	f9 1f       	adc	r31, r25
    5138:	ee 0f       	add	r30, r30
    513a:	ff 1f       	adc	r31, r31
    513c:	e7 57       	subi	r30, 0x77	; 119
    513e:	f8 4e       	sbci	r31, 0xE8	; 232
    5140:	a0 81       	ld	r26, Z
    5142:	b1 81       	ldd	r27, Z+1	; 0x01
    5144:	4c 91       	ld	r20, X
    5146:	f9 01       	movw	r30, r18
    5148:	e8 0f       	add	r30, r24
    514a:	f9 1f       	adc	r31, r25
    514c:	ee 0f       	add	r30, r30
    514e:	ff 1f       	adc	r31, r31
    5150:	e7 57       	subi	r30, 0x77	; 119
    5152:	f8 4e       	sbci	r31, 0xE8	; 232
    5154:	81 e0       	ldi	r24, 0x01	; 1
    5156:	90 e0       	ldi	r25, 0x00	; 0
    5158:	02 80       	ldd	r0, Z+2	; 0x02
    515a:	02 c0       	rjmp	.+4      	; 0x5160 <_turn_off+0x4e>
    515c:	88 0f       	add	r24, r24
    515e:	99 1f       	adc	r25, r25
    5160:	0a 94       	dec	r0
    5162:	e2 f7       	brpl	.-8      	; 0x515c <_turn_off+0x4a>
    5164:	84 2b       	or	r24, r20
    5166:	8c 93       	st	X, r24
    5168:	08 95       	ret
    516a:	fc 01       	movw	r30, r24
    516c:	ee 0f       	add	r30, r30
    516e:	ff 1f       	adc	r31, r31
    5170:	df 01       	movw	r26, r30
    5172:	a8 0f       	add	r26, r24
    5174:	b9 1f       	adc	r27, r25
    5176:	aa 0f       	add	r26, r26
    5178:	bb 1f       	adc	r27, r27
    517a:	a7 57       	subi	r26, 0x77	; 119
    517c:	b8 4e       	sbci	r27, 0xE8	; 232
    517e:	0d 90       	ld	r0, X+
    5180:	bc 91       	ld	r27, X
    5182:	a0 2d       	mov	r26, r0
    5184:	2c 91       	ld	r18, X
    5186:	e8 0f       	add	r30, r24
    5188:	f9 1f       	adc	r31, r25
    518a:	ee 0f       	add	r30, r30
    518c:	ff 1f       	adc	r31, r31
    518e:	e7 57       	subi	r30, 0x77	; 119
    5190:	f8 4e       	sbci	r31, 0xE8	; 232
    5192:	81 e0       	ldi	r24, 0x01	; 1
    5194:	90 e0       	ldi	r25, 0x00	; 0
    5196:	02 80       	ldd	r0, Z+2	; 0x02
    5198:	02 c0       	rjmp	.+4      	; 0x519e <_turn_off+0x8c>
    519a:	88 0f       	add	r24, r24
    519c:	99 1f       	adc	r25, r25
    519e:	0a 94       	dec	r0
    51a0:	e2 f7       	brpl	.-8      	; 0x519a <_turn_off+0x88>
    51a2:	80 95       	com	r24
    51a4:	82 23       	and	r24, r18
    51a6:	8c 93       	st	X, r24
    51a8:	08 95       	ret

000051aa <_turn_on>:
    51aa:	90 e0       	ldi	r25, 0x00	; 0
    51ac:	fc 01       	movw	r30, r24
    51ae:	ee 0f       	add	r30, r30
    51b0:	ff 1f       	adc	r31, r31
    51b2:	e8 0f       	add	r30, r24
    51b4:	f9 1f       	adc	r31, r25
    51b6:	ee 0f       	add	r30, r30
    51b8:	ff 1f       	adc	r31, r31
    51ba:	e7 57       	subi	r30, 0x77	; 119
    51bc:	f8 4e       	sbci	r31, 0xE8	; 232
    51be:	23 81       	ldd	r18, Z+3	; 0x03
    51c0:	21 11       	cpse	r18, r1
    51c2:	20 c0       	rjmp	.+64     	; 0x5204 <_turn_on+0x5a>
    51c4:	9c 01       	movw	r18, r24
    51c6:	22 0f       	add	r18, r18
    51c8:	33 1f       	adc	r19, r19
    51ca:	f9 01       	movw	r30, r18
    51cc:	e8 0f       	add	r30, r24
    51ce:	f9 1f       	adc	r31, r25
    51d0:	ee 0f       	add	r30, r30
    51d2:	ff 1f       	adc	r31, r31
    51d4:	e7 57       	subi	r30, 0x77	; 119
    51d6:	f8 4e       	sbci	r31, 0xE8	; 232
    51d8:	a0 81       	ld	r26, Z
    51da:	b1 81       	ldd	r27, Z+1	; 0x01
    51dc:	4c 91       	ld	r20, X
    51de:	f9 01       	movw	r30, r18
    51e0:	e8 0f       	add	r30, r24
    51e2:	f9 1f       	adc	r31, r25
    51e4:	ee 0f       	add	r30, r30
    51e6:	ff 1f       	adc	r31, r31
    51e8:	e7 57       	subi	r30, 0x77	; 119
    51ea:	f8 4e       	sbci	r31, 0xE8	; 232
    51ec:	81 e0       	ldi	r24, 0x01	; 1
    51ee:	90 e0       	ldi	r25, 0x00	; 0
    51f0:	02 80       	ldd	r0, Z+2	; 0x02
    51f2:	02 c0       	rjmp	.+4      	; 0x51f8 <_turn_on+0x4e>
    51f4:	88 0f       	add	r24, r24
    51f6:	99 1f       	adc	r25, r25
    51f8:	0a 94       	dec	r0
    51fa:	e2 f7       	brpl	.-8      	; 0x51f4 <_turn_on+0x4a>
    51fc:	80 95       	com	r24
    51fe:	84 23       	and	r24, r20
    5200:	8c 93       	st	X, r24
    5202:	08 95       	ret
    5204:	fc 01       	movw	r30, r24
    5206:	ee 0f       	add	r30, r30
    5208:	ff 1f       	adc	r31, r31
    520a:	df 01       	movw	r26, r30
    520c:	a8 0f       	add	r26, r24
    520e:	b9 1f       	adc	r27, r25
    5210:	aa 0f       	add	r26, r26
    5212:	bb 1f       	adc	r27, r27
    5214:	a7 57       	subi	r26, 0x77	; 119
    5216:	b8 4e       	sbci	r27, 0xE8	; 232
    5218:	0d 90       	ld	r0, X+
    521a:	bc 91       	ld	r27, X
    521c:	a0 2d       	mov	r26, r0
    521e:	2c 91       	ld	r18, X
    5220:	e8 0f       	add	r30, r24
    5222:	f9 1f       	adc	r31, r25
    5224:	ee 0f       	add	r30, r30
    5226:	ff 1f       	adc	r31, r31
    5228:	e7 57       	subi	r30, 0x77	; 119
    522a:	f8 4e       	sbci	r31, 0xE8	; 232
    522c:	81 e0       	ldi	r24, 0x01	; 1
    522e:	90 e0       	ldi	r25, 0x00	; 0
    5230:	02 80       	ldd	r0, Z+2	; 0x02
    5232:	02 c0       	rjmp	.+4      	; 0x5238 <_turn_on+0x8e>
    5234:	88 0f       	add	r24, r24
    5236:	99 1f       	adc	r25, r25
    5238:	0a 94       	dec	r0
    523a:	e2 f7       	brpl	.-8      	; 0x5234 <_turn_on+0x8a>
    523c:	82 2b       	or	r24, r18
    523e:	8c 93       	st	X, r24
    5240:	08 95       	ret

00005242 <_hal_led_task>:
    5242:	cc 24       	eor	r12, r12
    5244:	c3 94       	inc	r12
    5246:	d1 2c       	mov	r13, r1
    5248:	68 94       	set
    524a:	bb 24       	eor	r11, r11
    524c:	b2 f8       	bld	r11, 2
    524e:	c9 e8       	ldi	r28, 0x89	; 137
    5250:	d7 e1       	ldi	r29, 0x17	; 23
    5252:	10 e0       	ldi	r17, 0x00	; 0
    5254:	8c 81       	ldd	r24, Y+4	; 0x04
    5256:	81 30       	cpi	r24, 0x01	; 1
    5258:	81 f0       	breq	.+32     	; 0x527a <_hal_led_task+0x38>
    525a:	18 f1       	brcs	.+70     	; 0x52a2 <_hal_led_task+0x60>
    525c:	82 30       	cpi	r24, 0x02	; 2
    525e:	61 f5       	brne	.+88     	; 0x52b8 <_hal_led_task+0x76>
    5260:	e8 81       	ld	r30, Y
    5262:	f9 81       	ldd	r31, Y+1	; 0x01
    5264:	20 81       	ld	r18, Z
    5266:	c6 01       	movw	r24, r12
    5268:	0a 80       	ldd	r0, Y+2	; 0x02
    526a:	02 c0       	rjmp	.+4      	; 0x5270 <_hal_led_task+0x2e>
    526c:	88 0f       	add	r24, r24
    526e:	99 1f       	adc	r25, r25
    5270:	0a 94       	dec	r0
    5272:	e2 f7       	brpl	.-8      	; 0x526c <_hal_led_task+0x2a>
    5274:	82 27       	eor	r24, r18
    5276:	80 83       	st	Z, r24
    5278:	1f c0       	rjmp	.+62     	; 0x52b8 <_hal_led_task+0x76>
    527a:	8d 81       	ldd	r24, Y+5	; 0x05
    527c:	8f 5f       	subi	r24, 0xFF	; 255
    527e:	8a 30       	cpi	r24, 0x0A	; 10
    5280:	10 f4       	brcc	.+4      	; 0x5286 <_hal_led_task+0x44>
    5282:	8d 83       	std	Y+5, r24	; 0x05
    5284:	19 c0       	rjmp	.+50     	; 0x52b8 <_hal_led_task+0x76>
    5286:	1d 82       	std	Y+5, r1	; 0x05
    5288:	e8 81       	ld	r30, Y
    528a:	f9 81       	ldd	r31, Y+1	; 0x01
    528c:	20 81       	ld	r18, Z
    528e:	c6 01       	movw	r24, r12
    5290:	0a 80       	ldd	r0, Y+2	; 0x02
    5292:	02 c0       	rjmp	.+4      	; 0x5298 <_hal_led_task+0x56>
    5294:	88 0f       	add	r24, r24
    5296:	99 1f       	adc	r25, r25
    5298:	0a 94       	dec	r0
    529a:	e2 f7       	brpl	.-8      	; 0x5294 <_hal_led_task+0x52>
    529c:	82 27       	eor	r24, r18
    529e:	80 83       	st	Z, r24
    52a0:	0b c0       	rjmp	.+22     	; 0x52b8 <_hal_led_task+0x76>
    52a2:	0d 81       	ldd	r16, Y+5	; 0x05
    52a4:	00 23       	and	r16, r16
    52a6:	29 f0       	breq	.+10     	; 0x52b2 <_hal_led_task+0x70>
    52a8:	81 2f       	mov	r24, r17
    52aa:	7f df       	rcall	.-258    	; 0x51aa <_turn_on>
    52ac:	01 50       	subi	r16, 0x01	; 1
    52ae:	0d 83       	std	Y+5, r16	; 0x05
    52b0:	03 c0       	rjmp	.+6      	; 0x52b8 <_hal_led_task+0x76>
    52b2:	bc 82       	std	Y+4, r11	; 0x04
    52b4:	81 2f       	mov	r24, r17
    52b6:	2d df       	rcall	.-422    	; 0x5112 <_turn_off>
    52b8:	1f 5f       	subi	r17, 0xFF	; 255
    52ba:	26 96       	adiw	r28, 0x06	; 6
    52bc:	14 30       	cpi	r17, 0x04	; 4
    52be:	51 f6       	brne	.-108    	; 0x5254 <_hal_led_task+0x12>
    52c0:	65 e0       	ldi	r22, 0x05	; 5
    52c2:	70 e0       	ldi	r23, 0x00	; 0
    52c4:	80 e0       	ldi	r24, 0x00	; 0
    52c6:	90 e0       	ldi	r25, 0x00	; 0
    52c8:	0e 94 bc 12 	call	0x2578	; 0x2578 <vTaskDelay>
    52cc:	c0 cf       	rjmp	.-128    	; 0x524e <_hal_led_task+0xc>

000052ce <status_leds_initialise>:
    52ce:	ef 92       	push	r14
    52d0:	ff 92       	push	r15
    52d2:	0f 93       	push	r16
    52d4:	1f 93       	push	r17
    52d6:	cf 93       	push	r28
    52d8:	df 93       	push	r29
    52da:	08 2f       	mov	r16, r24
    52dc:	80 e4       	ldi	r24, 0x40	; 64
    52de:	87 b9       	out	0x07, r24	; 7
    52e0:	c9 e8       	ldi	r28, 0x89	; 137
    52e2:	d7 e1       	ldi	r29, 0x17	; 23
    52e4:	0f 2e       	mov	r0, r31
    52e6:	f8 e2       	ldi	r31, 0x28	; 40
    52e8:	ef 2e       	mov	r14, r31
    52ea:	f1 2c       	mov	r15, r1
    52ec:	f0 2d       	mov	r31, r0
    52ee:	f9 82       	std	Y+1, r15	; 0x01
    52f0:	e8 82       	st	Y, r14
    52f2:	86 e0       	ldi	r24, 0x06	; 6
    52f4:	8a 83       	std	Y+2, r24	; 0x02
    52f6:	1b 82       	std	Y+3, r1	; 0x03
    52f8:	14 e0       	ldi	r17, 0x04	; 4
    52fa:	1c 83       	std	Y+4, r17	; 0x04
    52fc:	80 e0       	ldi	r24, 0x00	; 0
    52fe:	09 df       	rcall	.-494    	; 0x5112 <_turn_off>
    5300:	80 e8       	ldi	r24, 0x80	; 128
    5302:	87 b9       	out	0x07, r24	; 7
    5304:	ff 82       	std	Y+7, r15	; 0x07
    5306:	ee 82       	std	Y+6, r14	; 0x06
    5308:	87 e0       	ldi	r24, 0x07	; 7
    530a:	88 87       	std	Y+8, r24	; 0x08
    530c:	19 86       	std	Y+9, r1	; 0x09
    530e:	1a 87       	std	Y+10, r17	; 0x0a
    5310:	81 e0       	ldi	r24, 0x01	; 1
    5312:	ff de       	rcall	.-514    	; 0x5112 <_turn_off>
    5314:	80 e2       	ldi	r24, 0x20	; 32
    5316:	83 bb       	out	0x13, r24	; 19
    5318:	84 e3       	ldi	r24, 0x34	; 52
    531a:	90 e0       	ldi	r25, 0x00	; 0
    531c:	9d 87       	std	Y+13, r25	; 0x0d
    531e:	8c 87       	std	Y+12, r24	; 0x0c
    5320:	85 e0       	ldi	r24, 0x05	; 5
    5322:	8e 87       	std	Y+14, r24	; 0x0e
    5324:	1f 86       	std	Y+15, r1	; 0x0f
    5326:	18 8b       	std	Y+16, r17	; 0x10
    5328:	82 e0       	ldi	r24, 0x02	; 2
    532a:	f3 de       	rcall	.-538    	; 0x5112 <_turn_off>
    532c:	80 e1       	ldi	r24, 0x10	; 16
    532e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    5332:	82 e0       	ldi	r24, 0x02	; 2
    5334:	91 e0       	ldi	r25, 0x01	; 1
    5336:	9b 8b       	std	Y+19, r25	; 0x13
    5338:	8a 8b       	std	Y+18, r24	; 0x12
    533a:	1c 8b       	std	Y+20, r17	; 0x14
    533c:	1d 8a       	std	Y+21, r1	; 0x15
    533e:	1e 8b       	std	Y+22, r17	; 0x16
    5340:	83 e0       	ldi	r24, 0x03	; 3
    5342:	e7 de       	rcall	.-562    	; 0x5112 <_turn_off>
    5344:	e1 2c       	mov	r14, r1
    5346:	f1 2c       	mov	r15, r1
    5348:	20 e0       	ldi	r18, 0x00	; 0
    534a:	30 e0       	ldi	r19, 0x00	; 0
    534c:	40 ec       	ldi	r20, 0xC0	; 192
    534e:	50 e0       	ldi	r21, 0x00	; 0
    5350:	64 e5       	ldi	r22, 0x54	; 84
    5352:	78 e0       	ldi	r23, 0x08	; 8
    5354:	81 e2       	ldi	r24, 0x21	; 33
    5356:	99 e2       	ldi	r25, 0x29	; 41
    5358:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <xTaskCreate>
    535c:	df 91       	pop	r29
    535e:	cf 91       	pop	r28
    5360:	1f 91       	pop	r17
    5362:	0f 91       	pop	r16
    5364:	ff 90       	pop	r15
    5366:	ef 90       	pop	r14
    5368:	08 95       	ret

0000536a <status_leds_slowBlink>:
    536a:	cf 93       	push	r28
    536c:	df 93       	push	r29
    536e:	90 e0       	ldi	r25, 0x00	; 0
    5370:	fc 01       	movw	r30, r24
    5372:	ee 0f       	add	r30, r30
    5374:	ff 1f       	adc	r31, r31
    5376:	df 01       	movw	r26, r30
    5378:	a8 0f       	add	r26, r24
    537a:	b9 1f       	adc	r27, r25
    537c:	aa 0f       	add	r26, r26
    537e:	bb 1f       	adc	r27, r27
    5380:	a7 57       	subi	r26, 0x77	; 119
    5382:	b8 4e       	sbci	r27, 0xE8	; 232
    5384:	cd 91       	ld	r28, X+
    5386:	dc 91       	ld	r29, X
    5388:	11 97       	sbiw	r26, 0x01	; 1
    538a:	48 81       	ld	r20, Y
    538c:	21 e0       	ldi	r18, 0x01	; 1
    538e:	30 e0       	ldi	r19, 0x00	; 0
    5390:	12 96       	adiw	r26, 0x02	; 2
    5392:	0c 90       	ld	r0, X
    5394:	12 97       	sbiw	r26, 0x02	; 2
    5396:	02 c0       	rjmp	.+4      	; 0x539c <status_leds_slowBlink+0x32>
    5398:	22 0f       	add	r18, r18
    539a:	33 1f       	adc	r19, r19
    539c:	0a 94       	dec	r0
    539e:	e2 f7       	brpl	.-8      	; 0x5398 <status_leds_slowBlink+0x2e>
    53a0:	24 27       	eor	r18, r20
    53a2:	28 83       	st	Y, r18
    53a4:	fd 01       	movw	r30, r26
    53a6:	81 e0       	ldi	r24, 0x01	; 1
    53a8:	84 83       	std	Z+4, r24	; 0x04
    53aa:	df 91       	pop	r29
    53ac:	cf 91       	pop	r28
    53ae:	08 95       	ret

000053b0 <status_leds_fastBlink>:
    53b0:	cf 93       	push	r28
    53b2:	df 93       	push	r29
    53b4:	90 e0       	ldi	r25, 0x00	; 0
    53b6:	fc 01       	movw	r30, r24
    53b8:	ee 0f       	add	r30, r30
    53ba:	ff 1f       	adc	r31, r31
    53bc:	df 01       	movw	r26, r30
    53be:	a8 0f       	add	r26, r24
    53c0:	b9 1f       	adc	r27, r25
    53c2:	aa 0f       	add	r26, r26
    53c4:	bb 1f       	adc	r27, r27
    53c6:	a7 57       	subi	r26, 0x77	; 119
    53c8:	b8 4e       	sbci	r27, 0xE8	; 232
    53ca:	cd 91       	ld	r28, X+
    53cc:	dc 91       	ld	r29, X
    53ce:	11 97       	sbiw	r26, 0x01	; 1
    53d0:	48 81       	ld	r20, Y
    53d2:	21 e0       	ldi	r18, 0x01	; 1
    53d4:	30 e0       	ldi	r19, 0x00	; 0
    53d6:	12 96       	adiw	r26, 0x02	; 2
    53d8:	0c 90       	ld	r0, X
    53da:	12 97       	sbiw	r26, 0x02	; 2
    53dc:	02 c0       	rjmp	.+4      	; 0x53e2 <status_leds_fastBlink+0x32>
    53de:	22 0f       	add	r18, r18
    53e0:	33 1f       	adc	r19, r19
    53e2:	0a 94       	dec	r0
    53e4:	e2 f7       	brpl	.-8      	; 0x53de <status_leds_fastBlink+0x2e>
    53e6:	24 27       	eor	r18, r20
    53e8:	28 83       	st	Y, r18
    53ea:	fd 01       	movw	r30, r26
    53ec:	82 e0       	ldi	r24, 0x02	; 2
    53ee:	84 83       	std	Z+4, r24	; 0x04
    53f0:	df 91       	pop	r29
    53f2:	cf 91       	pop	r28
    53f4:	08 95       	ret

000053f6 <status_leds_ledOn>:
    53f6:	28 2f       	mov	r18, r24
    53f8:	30 e0       	ldi	r19, 0x00	; 0
    53fa:	f9 01       	movw	r30, r18
    53fc:	ee 0f       	add	r30, r30
    53fe:	ff 1f       	adc	r31, r31
    5400:	e2 0f       	add	r30, r18
    5402:	f3 1f       	adc	r31, r19
    5404:	ee 0f       	add	r30, r30
    5406:	ff 1f       	adc	r31, r31
    5408:	e7 57       	subi	r30, 0x77	; 119
    540a:	f8 4e       	sbci	r31, 0xE8	; 232
    540c:	93 e0       	ldi	r25, 0x03	; 3
    540e:	94 83       	std	Z+4, r25	; 0x04
    5410:	cc ce       	rjmp	.-616    	; 0x51aa <_turn_on>
    5412:	08 95       	ret

00005414 <status_leds_ledOff>:
    5414:	28 2f       	mov	r18, r24
    5416:	30 e0       	ldi	r19, 0x00	; 0
    5418:	f9 01       	movw	r30, r18
    541a:	ee 0f       	add	r30, r30
    541c:	ff 1f       	adc	r31, r31
    541e:	e2 0f       	add	r30, r18
    5420:	f3 1f       	adc	r31, r19
    5422:	ee 0f       	add	r30, r30
    5424:	ff 1f       	adc	r31, r31
    5426:	e7 57       	subi	r30, 0x77	; 119
    5428:	f8 4e       	sbci	r31, 0xE8	; 232
    542a:	94 e0       	ldi	r25, 0x04	; 4
    542c:	94 83       	std	Z+4, r25	; 0x04
    542e:	71 ce       	rjmp	.-798    	; 0x5112 <_turn_off>
    5430:	08 95       	ret

00005432 <status_leds_longPuls>:
    5432:	90 e0       	ldi	r25, 0x00	; 0
    5434:	fc 01       	movw	r30, r24
    5436:	ee 0f       	add	r30, r30
    5438:	ff 1f       	adc	r31, r31
    543a:	df 01       	movw	r26, r30
    543c:	a8 0f       	add	r26, r24
    543e:	b9 1f       	adc	r27, r25
    5440:	aa 0f       	add	r26, r26
    5442:	bb 1f       	adc	r27, r27
    5444:	a7 57       	subi	r26, 0x77	; 119
    5446:	b8 4e       	sbci	r27, 0xE8	; 232
    5448:	24 e0       	ldi	r18, 0x04	; 4
    544a:	15 96       	adiw	r26, 0x05	; 5
    544c:	2c 93       	st	X, r18
    544e:	15 97       	sbiw	r26, 0x05	; 5
    5450:	fd 01       	movw	r30, r26
    5452:	14 82       	std	Z+4, r1	; 0x04
    5454:	08 95       	ret

00005456 <status_leds_shortPuls>:
    5456:	90 e0       	ldi	r25, 0x00	; 0
    5458:	fc 01       	movw	r30, r24
    545a:	ee 0f       	add	r30, r30
    545c:	ff 1f       	adc	r31, r31
    545e:	df 01       	movw	r26, r30
    5460:	a8 0f       	add	r26, r24
    5462:	b9 1f       	adc	r27, r25
    5464:	aa 0f       	add	r26, r26
    5466:	bb 1f       	adc	r27, r27
    5468:	a7 57       	subi	r26, 0x77	; 119
    546a:	b8 4e       	sbci	r27, 0xE8	; 232
    546c:	21 e0       	ldi	r18, 0x01	; 1
    546e:	15 96       	adiw	r26, 0x05	; 5
    5470:	2c 93       	st	X, r18
    5472:	15 97       	sbiw	r26, 0x05	; 5
    5474:	fd 01       	movw	r30, r26
    5476:	14 82       	std	Z+4, r1	; 0x04
    5478:	08 95       	ret

0000547a <_initTwiInterface>:
    547a:	80 91 af 17 	lds	r24, 0x17AF	; 0x8017af <_twiIsInitiated>
    547e:	81 11       	cpse	r24, r1
    5480:	0c c0       	rjmp	.+24     	; 0x549a <_initTwiInterface+0x20>
    5482:	8c e0       	ldi	r24, 0x0C	; 12
    5484:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5488:	8f ef       	ldi	r24, 0xFF	; 255
    548a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    548e:	84 e0       	ldi	r24, 0x04	; 4
    5490:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5494:	81 e0       	ldi	r24, 0x01	; 1
    5496:	80 93 af 17 	sts	0x17AF, r24	; 0x8017af <_twiIsInitiated>
    549a:	08 95       	ret

0000549c <twiCreate>:
    549c:	af 92       	push	r10
    549e:	bf 92       	push	r11
    54a0:	cf 92       	push	r12
    54a2:	df 92       	push	r13
    54a4:	ef 92       	push	r14
    54a6:	ff 92       	push	r15
    54a8:	0f 93       	push	r16
    54aa:	1f 93       	push	r17
    54ac:	cf 93       	push	r28
    54ae:	df 93       	push	r29
    54b0:	a8 2e       	mov	r10, r24
    54b2:	b6 2e       	mov	r11, r22
    54b4:	69 01       	movw	r12, r18
    54b6:	7a 01       	movw	r14, r20
    54b8:	84 e0       	ldi	r24, 0x04	; 4
    54ba:	90 e0       	ldi	r25, 0x00	; 0
    54bc:	70 d7       	rcall	.+3808   	; 0x639e <malloc>
    54be:	ec 01       	movw	r28, r24
    54c0:	89 2b       	or	r24, r25
    54c2:	61 f1       	breq	.+88     	; 0x551c <twiCreate+0x80>
    54c4:	a8 82       	st	Y, r10
    54c6:	81 e0       	ldi	r24, 0x01	; 1
    54c8:	b8 12       	cpse	r11, r24
    54ca:	12 c0       	rjmp	.+36     	; 0x54f0 <twiCreate+0x54>
    54cc:	c7 01       	movw	r24, r14
    54ce:	b6 01       	movw	r22, r12
    54d0:	20 ea       	ldi	r18, 0xA0	; 160
    54d2:	36 e8       	ldi	r19, 0x86	; 134
    54d4:	41 e0       	ldi	r20, 0x01	; 1
    54d6:	50 e0       	ldi	r21, 0x00	; 0
    54d8:	15 d7       	rcall	.+3626   	; 0x6304 <__udivmodsi4>
    54da:	da 01       	movw	r26, r20
    54dc:	c9 01       	movw	r24, r18
    54de:	40 97       	sbiw	r24, 0x10	; 16
    54e0:	a1 09       	sbc	r26, r1
    54e2:	b1 09       	sbc	r27, r1
    54e4:	b6 95       	lsr	r27
    54e6:	a7 95       	ror	r26
    54e8:	97 95       	ror	r25
    54ea:	87 95       	ror	r24
    54ec:	89 83       	std	Y+1, r24	; 0x01
    54ee:	11 c0       	rjmp	.+34     	; 0x5512 <twiCreate+0x76>
    54f0:	c7 01       	movw	r24, r14
    54f2:	b6 01       	movw	r22, r12
    54f4:	20 e8       	ldi	r18, 0x80	; 128
    54f6:	3a e1       	ldi	r19, 0x1A	; 26
    54f8:	46 e0       	ldi	r20, 0x06	; 6
    54fa:	50 e0       	ldi	r21, 0x00	; 0
    54fc:	03 d7       	rcall	.+3590   	; 0x6304 <__udivmodsi4>
    54fe:	da 01       	movw	r26, r20
    5500:	c9 01       	movw	r24, r18
    5502:	40 97       	sbiw	r24, 0x10	; 16
    5504:	a1 09       	sbc	r26, r1
    5506:	b1 09       	sbc	r27, r1
    5508:	b6 95       	lsr	r27
    550a:	a7 95       	ror	r26
    550c:	97 95       	ror	r25
    550e:	87 95       	ror	r24
    5510:	89 83       	std	Y+1, r24	; 0x01
    5512:	1b 83       	std	Y+3, r17	; 0x03
    5514:	0a 83       	std	Y+2, r16	; 0x02
    5516:	8c 2f       	mov	r24, r28
    5518:	9d 2f       	mov	r25, r29
    551a:	02 c0       	rjmp	.+4      	; 0x5520 <twiCreate+0x84>
    551c:	80 e0       	ldi	r24, 0x00	; 0
    551e:	90 e0       	ldi	r25, 0x00	; 0
    5520:	df 91       	pop	r29
    5522:	cf 91       	pop	r28
    5524:	1f 91       	pop	r17
    5526:	0f 91       	pop	r16
    5528:	ff 90       	pop	r15
    552a:	ef 90       	pop	r14
    552c:	df 90       	pop	r13
    552e:	cf 90       	pop	r12
    5530:	bf 90       	pop	r11
    5532:	af 90       	pop	r10
    5534:	08 95       	ret

00005536 <twiIsBusy>:
    5536:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    553a:	81 70       	andi	r24, 0x01	; 1
    553c:	08 95       	ret

0000553e <twiTransmit>:
    553e:	ff 92       	push	r15
    5540:	0f 93       	push	r16
    5542:	1f 93       	push	r17
    5544:	cf 93       	push	r28
    5546:	df 93       	push	r29
    5548:	00 97       	sbiw	r24, 0x00	; 0
    554a:	d1 f1       	breq	.+116    	; 0x55c0 <twiTransmit+0x82>
    554c:	4a 30       	cpi	r20, 0x0A	; 10
    554e:	d0 f5       	brcc	.+116    	; 0x55c4 <twiTransmit+0x86>
    5550:	f4 2e       	mov	r15, r20
    5552:	8b 01       	movw	r16, r22
    5554:	ec 01       	movw	r28, r24
    5556:	ef df       	rcall	.-34     	; 0x5536 <twiIsBusy>
    5558:	81 11       	cpse	r24, r1
    555a:	36 c0       	rjmp	.+108    	; 0x55c8 <twiTransmit+0x8a>
    555c:	80 91 a2 17 	lds	r24, 0x17A2	; 0x8017a2 <_twiCurrentHandler>
    5560:	90 91 a3 17 	lds	r25, 0x17A3	; 0x8017a3 <_twiCurrentHandler+0x1>
    5564:	c8 17       	cp	r28, r24
    5566:	d9 07       	cpc	r29, r25
    5568:	41 f0       	breq	.+16     	; 0x557a <twiTransmit+0x3c>
    556a:	87 df       	rcall	.-242    	; 0x547a <_initTwiInterface>
    556c:	89 81       	ldd	r24, Y+1	; 0x01
    556e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5572:	d0 93 a3 17 	sts	0x17A3, r29	; 0x8017a3 <_twiCurrentHandler+0x1>
    5576:	c0 93 a2 17 	sts	0x17A2, r28	; 0x8017a2 <_twiCurrentHandler>
    557a:	81 e0       	ldi	r24, 0x01	; 1
    557c:	8f 0d       	add	r24, r15
    557e:	80 93 a4 17 	sts	0x17A4, r24	; 0x8017a4 <_twiMessageLen>
    5582:	88 81       	ld	r24, Y
    5584:	88 0f       	add	r24, r24
    5586:	80 93 a5 17 	sts	0x17A5, r24	; 0x8017a5 <_twiMessageBuffer>
    558a:	ff 20       	and	r15, r15
    558c:	89 f0       	breq	.+34     	; 0x55b0 <twiTransmit+0x72>
    558e:	f8 01       	movw	r30, r16
    5590:	a6 ea       	ldi	r26, 0xA6	; 166
    5592:	b7 e1       	ldi	r27, 0x17	; 23
    5594:	4f ef       	ldi	r20, 0xFF	; 255
    5596:	4f 0d       	add	r20, r15
    5598:	64 2f       	mov	r22, r20
    559a:	70 e0       	ldi	r23, 0x00	; 0
    559c:	cb 01       	movw	r24, r22
    559e:	01 96       	adiw	r24, 0x01	; 1
    55a0:	b8 01       	movw	r22, r16
    55a2:	68 0f       	add	r22, r24
    55a4:	79 1f       	adc	r23, r25
    55a6:	81 91       	ld	r24, Z+
    55a8:	8d 93       	st	X+, r24
    55aa:	e6 17       	cp	r30, r22
    55ac:	f7 07       	cpc	r31, r23
    55ae:	d9 f7       	brne	.-10     	; 0x55a6 <twiTransmit+0x68>
    55b0:	88 ef       	ldi	r24, 0xF8	; 248
    55b2:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    55b6:	85 ea       	ldi	r24, 0xA5	; 165
    55b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55bc:	84 e0       	ldi	r24, 0x04	; 4
    55be:	05 c0       	rjmp	.+10     	; 0x55ca <twiTransmit+0x8c>
    55c0:	86 e0       	ldi	r24, 0x06	; 6
    55c2:	03 c0       	rjmp	.+6      	; 0x55ca <twiTransmit+0x8c>
    55c4:	87 e0       	ldi	r24, 0x07	; 7
    55c6:	01 c0       	rjmp	.+2      	; 0x55ca <twiTransmit+0x8c>
    55c8:	82 e0       	ldi	r24, 0x02	; 2
    55ca:	df 91       	pop	r29
    55cc:	cf 91       	pop	r28
    55ce:	1f 91       	pop	r17
    55d0:	0f 91       	pop	r16
    55d2:	ff 90       	pop	r15
    55d4:	08 95       	ret

000055d6 <twiReceive>:
    55d6:	1f 93       	push	r17
    55d8:	cf 93       	push	r28
    55da:	df 93       	push	r29
    55dc:	00 97       	sbiw	r24, 0x00	; 0
    55de:	29 f1       	breq	.+74     	; 0x562a <twiReceive+0x54>
    55e0:	6b 30       	cpi	r22, 0x0B	; 11
    55e2:	28 f5       	brcc	.+74     	; 0x562e <twiReceive+0x58>
    55e4:	16 2f       	mov	r17, r22
    55e6:	ec 01       	movw	r28, r24
    55e8:	a6 df       	rcall	.-180    	; 0x5536 <twiIsBusy>
    55ea:	81 11       	cpse	r24, r1
    55ec:	22 c0       	rjmp	.+68     	; 0x5632 <twiReceive+0x5c>
    55ee:	80 91 a2 17 	lds	r24, 0x17A2	; 0x8017a2 <_twiCurrentHandler>
    55f2:	90 91 a3 17 	lds	r25, 0x17A3	; 0x8017a3 <_twiCurrentHandler+0x1>
    55f6:	c8 17       	cp	r28, r24
    55f8:	d9 07       	cpc	r29, r25
    55fa:	41 f0       	breq	.+16     	; 0x560c <twiReceive+0x36>
    55fc:	3e df       	rcall	.-388    	; 0x547a <_initTwiInterface>
    55fe:	89 81       	ldd	r24, Y+1	; 0x01
    5600:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5604:	d0 93 a3 17 	sts	0x17A3, r29	; 0x8017a3 <_twiCurrentHandler+0x1>
    5608:	c0 93 a2 17 	sts	0x17A2, r28	; 0x8017a2 <_twiCurrentHandler>
    560c:	10 93 a4 17 	sts	0x17A4, r17	; 0x8017a4 <_twiMessageLen>
    5610:	88 81       	ld	r24, Y
    5612:	88 0f       	add	r24, r24
    5614:	81 60       	ori	r24, 0x01	; 1
    5616:	80 93 a5 17 	sts	0x17A5, r24	; 0x8017a5 <_twiMessageBuffer>
    561a:	88 ef       	ldi	r24, 0xF8	; 248
    561c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5620:	85 ea       	ldi	r24, 0xA5	; 165
    5622:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5626:	85 e0       	ldi	r24, 0x05	; 5
    5628:	05 c0       	rjmp	.+10     	; 0x5634 <twiReceive+0x5e>
    562a:	86 e0       	ldi	r24, 0x06	; 6
    562c:	03 c0       	rjmp	.+6      	; 0x5634 <twiReceive+0x5e>
    562e:	87 e0       	ldi	r24, 0x07	; 7
    5630:	01 c0       	rjmp	.+2      	; 0x5634 <twiReceive+0x5e>
    5632:	82 e0       	ldi	r24, 0x02	; 2
    5634:	df 91       	pop	r29
    5636:	cf 91       	pop	r28
    5638:	1f 91       	pop	r17
    563a:	08 95       	ret

0000563c <__vector_39>:
    563c:	1f 92       	push	r1
    563e:	0f 92       	push	r0
    5640:	0f b6       	in	r0, 0x3f	; 63
    5642:	0f 92       	push	r0
    5644:	11 24       	eor	r1, r1
    5646:	0b b6       	in	r0, 0x3b	; 59
    5648:	0f 92       	push	r0
    564a:	2f 93       	push	r18
    564c:	3f 93       	push	r19
    564e:	4f 93       	push	r20
    5650:	5f 93       	push	r21
    5652:	6f 93       	push	r22
    5654:	7f 93       	push	r23
    5656:	8f 93       	push	r24
    5658:	9f 93       	push	r25
    565a:	af 93       	push	r26
    565c:	bf 93       	push	r27
    565e:	ef 93       	push	r30
    5660:	ff 93       	push	r31
    5662:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5666:	8e 2f       	mov	r24, r30
    5668:	90 e0       	ldi	r25, 0x00	; 0
    566a:	fc 01       	movw	r30, r24
    566c:	38 97       	sbiw	r30, 0x08	; 8
    566e:	e1 35       	cpi	r30, 0x51	; 81
    5670:	f1 05       	cpc	r31, r1
    5672:	08 f0       	brcs	.+2      	; 0x5676 <__vector_39+0x3a>
    5674:	75 c0       	rjmp	.+234    	; 0x5760 <__vector_39+0x124>
    5676:	88 27       	eor	r24, r24
    5678:	e4 58       	subi	r30, 0x84	; 132
    567a:	ff 4f       	sbci	r31, 0xFF	; 255
    567c:	8f 4f       	sbci	r24, 0xFF	; 255
    567e:	64 c6       	rjmp	.+3272   	; 0x6348 <__tablejump2__>
    5680:	10 92 a1 17 	sts	0x17A1, r1	; 0x8017a1 <_index.1885>
    5684:	e0 91 a1 17 	lds	r30, 0x17A1	; 0x8017a1 <_index.1885>
    5688:	80 91 a4 17 	lds	r24, 0x17A4	; 0x8017a4 <_twiMessageLen>
    568c:	e8 17       	cp	r30, r24
    568e:	70 f4       	brcc	.+28     	; 0x56ac <__vector_39+0x70>
    5690:	81 e0       	ldi	r24, 0x01	; 1
    5692:	8e 0f       	add	r24, r30
    5694:	80 93 a1 17 	sts	0x17A1, r24	; 0x8017a1 <_index.1885>
    5698:	f0 e0       	ldi	r31, 0x00	; 0
    569a:	eb 55       	subi	r30, 0x5B	; 91
    569c:	f8 4e       	sbci	r31, 0xE8	; 232
    569e:	80 81       	ld	r24, Z
    56a0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    56a4:	85 e8       	ldi	r24, 0x85	; 133
    56a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    56aa:	72 c0       	rjmp	.+228    	; 0x5790 <__vector_39+0x154>
    56ac:	84 e9       	ldi	r24, 0x94	; 148
    56ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    56b2:	80 91 a2 17 	lds	r24, 0x17A2	; 0x8017a2 <_twiCurrentHandler>
    56b6:	90 91 a3 17 	lds	r25, 0x17A3	; 0x8017a3 <_twiCurrentHandler+0x1>
    56ba:	dc 01       	movw	r26, r24
    56bc:	12 96       	adiw	r26, 0x02	; 2
    56be:	ed 91       	ld	r30, X+
    56c0:	fc 91       	ld	r31, X
    56c2:	13 97       	sbiw	r26, 0x03	; 3
    56c4:	30 97       	sbiw	r30, 0x00	; 0
    56c6:	09 f4       	brne	.+2      	; 0x56ca <__vector_39+0x8e>
    56c8:	63 c0       	rjmp	.+198    	; 0x5790 <__vector_39+0x154>
    56ca:	20 e0       	ldi	r18, 0x00	; 0
    56cc:	40 e0       	ldi	r20, 0x00	; 0
    56ce:	50 e0       	ldi	r21, 0x00	; 0
    56d0:	64 e0       	ldi	r22, 0x04	; 4
    56d2:	19 95       	eicall
    56d4:	5d c0       	rjmp	.+186    	; 0x5790 <__vector_39+0x154>
    56d6:	e0 91 a1 17 	lds	r30, 0x17A1	; 0x8017a1 <_index.1885>
    56da:	81 e0       	ldi	r24, 0x01	; 1
    56dc:	8e 0f       	add	r24, r30
    56de:	80 93 a1 17 	sts	0x17A1, r24	; 0x8017a1 <_index.1885>
    56e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    56e6:	f0 e0       	ldi	r31, 0x00	; 0
    56e8:	eb 55       	subi	r30, 0x5B	; 91
    56ea:	f8 4e       	sbci	r31, 0xE8	; 232
    56ec:	80 83       	st	Z, r24
    56ee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    56f2:	80 34       	cpi	r24, 0x40	; 64
    56f4:	11 f4       	brne	.+4      	; 0x56fa <__vector_39+0xbe>
    56f6:	10 92 a1 17 	sts	0x17A1, r1	; 0x8017a1 <_index.1885>
    56fa:	20 91 a1 17 	lds	r18, 0x17A1	; 0x8017a1 <_index.1885>
    56fe:	30 e0       	ldi	r19, 0x00	; 0
    5700:	80 91 a4 17 	lds	r24, 0x17A4	; 0x8017a4 <_twiMessageLen>
    5704:	90 e0       	ldi	r25, 0x00	; 0
    5706:	01 97       	sbiw	r24, 0x01	; 1
    5708:	28 17       	cp	r18, r24
    570a:	39 07       	cpc	r19, r25
    570c:	24 f4       	brge	.+8      	; 0x5716 <__vector_39+0xda>
    570e:	85 ec       	ldi	r24, 0xC5	; 197
    5710:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5714:	3d c0       	rjmp	.+122    	; 0x5790 <__vector_39+0x154>
    5716:	85 e8       	ldi	r24, 0x85	; 133
    5718:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    571c:	39 c0       	rjmp	.+114    	; 0x5790 <__vector_39+0x154>
    571e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5722:	e0 91 a1 17 	lds	r30, 0x17A1	; 0x8017a1 <_index.1885>
    5726:	f0 e0       	ldi	r31, 0x00	; 0
    5728:	eb 55       	subi	r30, 0x5B	; 91
    572a:	f8 4e       	sbci	r31, 0xE8	; 232
    572c:	80 83       	st	Z, r24
    572e:	84 e9       	ldi	r24, 0x94	; 148
    5730:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5734:	80 91 a2 17 	lds	r24, 0x17A2	; 0x8017a2 <_twiCurrentHandler>
    5738:	90 91 a3 17 	lds	r25, 0x17A3	; 0x8017a3 <_twiCurrentHandler+0x1>
    573c:	dc 01       	movw	r26, r24
    573e:	12 96       	adiw	r26, 0x02	; 2
    5740:	ed 91       	ld	r30, X+
    5742:	fc 91       	ld	r31, X
    5744:	13 97       	sbiw	r26, 0x03	; 3
    5746:	30 97       	sbiw	r30, 0x00	; 0
    5748:	19 f1       	breq	.+70     	; 0x5790 <__vector_39+0x154>
    574a:	20 91 a4 17 	lds	r18, 0x17A4	; 0x8017a4 <_twiMessageLen>
    574e:	45 ea       	ldi	r20, 0xA5	; 165
    5750:	57 e1       	ldi	r21, 0x17	; 23
    5752:	65 e0       	ldi	r22, 0x05	; 5
    5754:	19 95       	eicall
    5756:	1c c0       	rjmp	.+56     	; 0x5790 <__vector_39+0x154>
    5758:	85 ea       	ldi	r24, 0xA5	; 165
    575a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    575e:	18 c0       	rjmp	.+48     	; 0x5790 <__vector_39+0x154>
    5760:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5764:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5768:	84 e0       	ldi	r24, 0x04	; 4
    576a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    576e:	80 91 a2 17 	lds	r24, 0x17A2	; 0x8017a2 <_twiCurrentHandler>
    5772:	90 91 a3 17 	lds	r25, 0x17A3	; 0x8017a3 <_twiCurrentHandler+0x1>
    5776:	dc 01       	movw	r26, r24
    5778:	12 96       	adiw	r26, 0x02	; 2
    577a:	ed 91       	ld	r30, X+
    577c:	fc 91       	ld	r31, X
    577e:	13 97       	sbiw	r26, 0x03	; 3
    5780:	30 97       	sbiw	r30, 0x00	; 0
    5782:	31 f0       	breq	.+12     	; 0x5790 <__vector_39+0x154>
    5784:	20 e0       	ldi	r18, 0x00	; 0
    5786:	40 e0       	ldi	r20, 0x00	; 0
    5788:	50 e0       	ldi	r21, 0x00	; 0
    578a:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    578e:	19 95       	eicall
    5790:	ff 91       	pop	r31
    5792:	ef 91       	pop	r30
    5794:	bf 91       	pop	r27
    5796:	af 91       	pop	r26
    5798:	9f 91       	pop	r25
    579a:	8f 91       	pop	r24
    579c:	7f 91       	pop	r23
    579e:	6f 91       	pop	r22
    57a0:	5f 91       	pop	r21
    57a2:	4f 91       	pop	r20
    57a4:	3f 91       	pop	r19
    57a6:	2f 91       	pop	r18
    57a8:	0f 90       	pop	r0
    57aa:	0b be       	out	0x3b, r0	; 59
    57ac:	0f 90       	pop	r0
    57ae:	0f be       	out	0x3f, r0	; 63
    57b0:	0f 90       	pop	r0
    57b2:	1f 90       	pop	r1
    57b4:	18 95       	reti

000057b6 <fifo_init>:
    57b6:	fc 01       	movw	r30, r24
    57b8:	41 11       	cpse	r20, r1
    57ba:	01 c0       	rjmp	.+2      	; 0x57be <fifo_init+0x8>
    57bc:	11 d7       	rcall	.+3618   	; 0x65e0 <abort>
    57be:	84 2f       	mov	r24, r20
    57c0:	90 e0       	ldi	r25, 0x00	; 0
    57c2:	9c 01       	movw	r18, r24
    57c4:	21 50       	subi	r18, 0x01	; 1
    57c6:	31 09       	sbc	r19, r1
    57c8:	82 23       	and	r24, r18
    57ca:	93 23       	and	r25, r19
    57cc:	89 2b       	or	r24, r25
    57ce:	09 f0       	breq	.+2      	; 0x57d2 <fifo_init+0x1c>
    57d0:	07 d7       	rcall	.+3598   	; 0x65e0 <abort>
    57d2:	41 38       	cpi	r20, 0x81	; 129
    57d4:	08 f0       	brcs	.+2      	; 0x57d8 <fifo_init+0x22>
    57d6:	04 d7       	rcall	.+3592   	; 0x65e0 <abort>
    57d8:	12 82       	std	Z+2, r1	; 0x02
    57da:	13 82       	std	Z+3, r1	; 0x03
    57dc:	44 83       	std	Z+4, r20	; 0x04
    57de:	44 0f       	add	r20, r20
    57e0:	41 50       	subi	r20, 0x01	; 1
    57e2:	45 83       	std	Z+5, r20	; 0x05
    57e4:	71 83       	std	Z+1, r23	; 0x01
    57e6:	60 83       	st	Z, r22
    57e8:	80 e0       	ldi	r24, 0x00	; 0
    57ea:	90 e0       	ldi	r25, 0x00	; 0
    57ec:	08 95       	ret

000057ee <__subsf3>:
    57ee:	50 58       	subi	r21, 0x80	; 128

000057f0 <__addsf3>:
    57f0:	bb 27       	eor	r27, r27
    57f2:	aa 27       	eor	r26, r26
    57f4:	0e d0       	rcall	.+28     	; 0x5812 <__addsf3x>
    57f6:	4d c1       	rjmp	.+666    	; 0x5a92 <__fp_round>
    57f8:	3e d1       	rcall	.+636    	; 0x5a76 <__fp_pscA>
    57fa:	30 f0       	brcs	.+12     	; 0x5808 <__addsf3+0x18>
    57fc:	43 d1       	rcall	.+646    	; 0x5a84 <__fp_pscB>
    57fe:	20 f0       	brcs	.+8      	; 0x5808 <__addsf3+0x18>
    5800:	31 f4       	brne	.+12     	; 0x580e <__addsf3+0x1e>
    5802:	9f 3f       	cpi	r25, 0xFF	; 255
    5804:	11 f4       	brne	.+4      	; 0x580a <__addsf3+0x1a>
    5806:	1e f4       	brtc	.+6      	; 0x580e <__addsf3+0x1e>
    5808:	33 c1       	rjmp	.+614    	; 0x5a70 <__fp_nan>
    580a:	0e f4       	brtc	.+2      	; 0x580e <__addsf3+0x1e>
    580c:	e0 95       	com	r30
    580e:	e7 fb       	bst	r30, 7
    5810:	29 c1       	rjmp	.+594    	; 0x5a64 <__fp_inf>

00005812 <__addsf3x>:
    5812:	e9 2f       	mov	r30, r25
    5814:	4f d1       	rcall	.+670    	; 0x5ab4 <__fp_split3>
    5816:	80 f3       	brcs	.-32     	; 0x57f8 <__addsf3+0x8>
    5818:	ba 17       	cp	r27, r26
    581a:	62 07       	cpc	r22, r18
    581c:	73 07       	cpc	r23, r19
    581e:	84 07       	cpc	r24, r20
    5820:	95 07       	cpc	r25, r21
    5822:	18 f0       	brcs	.+6      	; 0x582a <__addsf3x+0x18>
    5824:	71 f4       	brne	.+28     	; 0x5842 <__addsf3x+0x30>
    5826:	9e f5       	brtc	.+102    	; 0x588e <__addsf3x+0x7c>
    5828:	67 c1       	rjmp	.+718    	; 0x5af8 <__fp_zero>
    582a:	0e f4       	brtc	.+2      	; 0x582e <__addsf3x+0x1c>
    582c:	e0 95       	com	r30
    582e:	0b 2e       	mov	r0, r27
    5830:	ba 2f       	mov	r27, r26
    5832:	a0 2d       	mov	r26, r0
    5834:	0b 01       	movw	r0, r22
    5836:	b9 01       	movw	r22, r18
    5838:	90 01       	movw	r18, r0
    583a:	0c 01       	movw	r0, r24
    583c:	ca 01       	movw	r24, r20
    583e:	a0 01       	movw	r20, r0
    5840:	11 24       	eor	r1, r1
    5842:	ff 27       	eor	r31, r31
    5844:	59 1b       	sub	r21, r25
    5846:	99 f0       	breq	.+38     	; 0x586e <__addsf3x+0x5c>
    5848:	59 3f       	cpi	r21, 0xF9	; 249
    584a:	50 f4       	brcc	.+20     	; 0x5860 <__addsf3x+0x4e>
    584c:	50 3e       	cpi	r21, 0xE0	; 224
    584e:	68 f1       	brcs	.+90     	; 0x58aa <__addsf3x+0x98>
    5850:	1a 16       	cp	r1, r26
    5852:	f0 40       	sbci	r31, 0x00	; 0
    5854:	a2 2f       	mov	r26, r18
    5856:	23 2f       	mov	r18, r19
    5858:	34 2f       	mov	r19, r20
    585a:	44 27       	eor	r20, r20
    585c:	58 5f       	subi	r21, 0xF8	; 248
    585e:	f3 cf       	rjmp	.-26     	; 0x5846 <__addsf3x+0x34>
    5860:	46 95       	lsr	r20
    5862:	37 95       	ror	r19
    5864:	27 95       	ror	r18
    5866:	a7 95       	ror	r26
    5868:	f0 40       	sbci	r31, 0x00	; 0
    586a:	53 95       	inc	r21
    586c:	c9 f7       	brne	.-14     	; 0x5860 <__addsf3x+0x4e>
    586e:	7e f4       	brtc	.+30     	; 0x588e <__addsf3x+0x7c>
    5870:	1f 16       	cp	r1, r31
    5872:	ba 0b       	sbc	r27, r26
    5874:	62 0b       	sbc	r22, r18
    5876:	73 0b       	sbc	r23, r19
    5878:	84 0b       	sbc	r24, r20
    587a:	ba f0       	brmi	.+46     	; 0x58aa <__addsf3x+0x98>
    587c:	91 50       	subi	r25, 0x01	; 1
    587e:	a1 f0       	breq	.+40     	; 0x58a8 <__addsf3x+0x96>
    5880:	ff 0f       	add	r31, r31
    5882:	bb 1f       	adc	r27, r27
    5884:	66 1f       	adc	r22, r22
    5886:	77 1f       	adc	r23, r23
    5888:	88 1f       	adc	r24, r24
    588a:	c2 f7       	brpl	.-16     	; 0x587c <__addsf3x+0x6a>
    588c:	0e c0       	rjmp	.+28     	; 0x58aa <__addsf3x+0x98>
    588e:	ba 0f       	add	r27, r26
    5890:	62 1f       	adc	r22, r18
    5892:	73 1f       	adc	r23, r19
    5894:	84 1f       	adc	r24, r20
    5896:	48 f4       	brcc	.+18     	; 0x58aa <__addsf3x+0x98>
    5898:	87 95       	ror	r24
    589a:	77 95       	ror	r23
    589c:	67 95       	ror	r22
    589e:	b7 95       	ror	r27
    58a0:	f7 95       	ror	r31
    58a2:	9e 3f       	cpi	r25, 0xFE	; 254
    58a4:	08 f0       	brcs	.+2      	; 0x58a8 <__addsf3x+0x96>
    58a6:	b3 cf       	rjmp	.-154    	; 0x580e <__addsf3+0x1e>
    58a8:	93 95       	inc	r25
    58aa:	88 0f       	add	r24, r24
    58ac:	08 f0       	brcs	.+2      	; 0x58b0 <__addsf3x+0x9e>
    58ae:	99 27       	eor	r25, r25
    58b0:	ee 0f       	add	r30, r30
    58b2:	97 95       	ror	r25
    58b4:	87 95       	ror	r24
    58b6:	08 95       	ret

000058b8 <__divsf3>:
    58b8:	0c d0       	rcall	.+24     	; 0x58d2 <__divsf3x>
    58ba:	eb c0       	rjmp	.+470    	; 0x5a92 <__fp_round>
    58bc:	e3 d0       	rcall	.+454    	; 0x5a84 <__fp_pscB>
    58be:	40 f0       	brcs	.+16     	; 0x58d0 <__divsf3+0x18>
    58c0:	da d0       	rcall	.+436    	; 0x5a76 <__fp_pscA>
    58c2:	30 f0       	brcs	.+12     	; 0x58d0 <__divsf3+0x18>
    58c4:	21 f4       	brne	.+8      	; 0x58ce <__divsf3+0x16>
    58c6:	5f 3f       	cpi	r21, 0xFF	; 255
    58c8:	19 f0       	breq	.+6      	; 0x58d0 <__divsf3+0x18>
    58ca:	cc c0       	rjmp	.+408    	; 0x5a64 <__fp_inf>
    58cc:	51 11       	cpse	r21, r1
    58ce:	15 c1       	rjmp	.+554    	; 0x5afa <__fp_szero>
    58d0:	cf c0       	rjmp	.+414    	; 0x5a70 <__fp_nan>

000058d2 <__divsf3x>:
    58d2:	f0 d0       	rcall	.+480    	; 0x5ab4 <__fp_split3>
    58d4:	98 f3       	brcs	.-26     	; 0x58bc <__divsf3+0x4>

000058d6 <__divsf3_pse>:
    58d6:	99 23       	and	r25, r25
    58d8:	c9 f3       	breq	.-14     	; 0x58cc <__divsf3+0x14>
    58da:	55 23       	and	r21, r21
    58dc:	b1 f3       	breq	.-20     	; 0x58ca <__divsf3+0x12>
    58de:	95 1b       	sub	r25, r21
    58e0:	55 0b       	sbc	r21, r21
    58e2:	bb 27       	eor	r27, r27
    58e4:	aa 27       	eor	r26, r26
    58e6:	62 17       	cp	r22, r18
    58e8:	73 07       	cpc	r23, r19
    58ea:	84 07       	cpc	r24, r20
    58ec:	38 f0       	brcs	.+14     	; 0x58fc <__divsf3_pse+0x26>
    58ee:	9f 5f       	subi	r25, 0xFF	; 255
    58f0:	5f 4f       	sbci	r21, 0xFF	; 255
    58f2:	22 0f       	add	r18, r18
    58f4:	33 1f       	adc	r19, r19
    58f6:	44 1f       	adc	r20, r20
    58f8:	aa 1f       	adc	r26, r26
    58fa:	a9 f3       	breq	.-22     	; 0x58e6 <__divsf3_pse+0x10>
    58fc:	33 d0       	rcall	.+102    	; 0x5964 <__divsf3_pse+0x8e>
    58fe:	0e 2e       	mov	r0, r30
    5900:	3a f0       	brmi	.+14     	; 0x5910 <__divsf3_pse+0x3a>
    5902:	e0 e8       	ldi	r30, 0x80	; 128
    5904:	30 d0       	rcall	.+96     	; 0x5966 <__divsf3_pse+0x90>
    5906:	91 50       	subi	r25, 0x01	; 1
    5908:	50 40       	sbci	r21, 0x00	; 0
    590a:	e6 95       	lsr	r30
    590c:	00 1c       	adc	r0, r0
    590e:	ca f7       	brpl	.-14     	; 0x5902 <__divsf3_pse+0x2c>
    5910:	29 d0       	rcall	.+82     	; 0x5964 <__divsf3_pse+0x8e>
    5912:	fe 2f       	mov	r31, r30
    5914:	27 d0       	rcall	.+78     	; 0x5964 <__divsf3_pse+0x8e>
    5916:	66 0f       	add	r22, r22
    5918:	77 1f       	adc	r23, r23
    591a:	88 1f       	adc	r24, r24
    591c:	bb 1f       	adc	r27, r27
    591e:	26 17       	cp	r18, r22
    5920:	37 07       	cpc	r19, r23
    5922:	48 07       	cpc	r20, r24
    5924:	ab 07       	cpc	r26, r27
    5926:	b0 e8       	ldi	r27, 0x80	; 128
    5928:	09 f0       	breq	.+2      	; 0x592c <__divsf3_pse+0x56>
    592a:	bb 0b       	sbc	r27, r27
    592c:	80 2d       	mov	r24, r0
    592e:	bf 01       	movw	r22, r30
    5930:	ff 27       	eor	r31, r31
    5932:	93 58       	subi	r25, 0x83	; 131
    5934:	5f 4f       	sbci	r21, 0xFF	; 255
    5936:	2a f0       	brmi	.+10     	; 0x5942 <__divsf3_pse+0x6c>
    5938:	9e 3f       	cpi	r25, 0xFE	; 254
    593a:	51 05       	cpc	r21, r1
    593c:	68 f0       	brcs	.+26     	; 0x5958 <__divsf3_pse+0x82>
    593e:	92 c0       	rjmp	.+292    	; 0x5a64 <__fp_inf>
    5940:	dc c0       	rjmp	.+440    	; 0x5afa <__fp_szero>
    5942:	5f 3f       	cpi	r21, 0xFF	; 255
    5944:	ec f3       	brlt	.-6      	; 0x5940 <__divsf3_pse+0x6a>
    5946:	98 3e       	cpi	r25, 0xE8	; 232
    5948:	dc f3       	brlt	.-10     	; 0x5940 <__divsf3_pse+0x6a>
    594a:	86 95       	lsr	r24
    594c:	77 95       	ror	r23
    594e:	67 95       	ror	r22
    5950:	b7 95       	ror	r27
    5952:	f7 95       	ror	r31
    5954:	9f 5f       	subi	r25, 0xFF	; 255
    5956:	c9 f7       	brne	.-14     	; 0x594a <__divsf3_pse+0x74>
    5958:	88 0f       	add	r24, r24
    595a:	91 1d       	adc	r25, r1
    595c:	96 95       	lsr	r25
    595e:	87 95       	ror	r24
    5960:	97 f9       	bld	r25, 7
    5962:	08 95       	ret
    5964:	e1 e0       	ldi	r30, 0x01	; 1
    5966:	66 0f       	add	r22, r22
    5968:	77 1f       	adc	r23, r23
    596a:	88 1f       	adc	r24, r24
    596c:	bb 1f       	adc	r27, r27
    596e:	62 17       	cp	r22, r18
    5970:	73 07       	cpc	r23, r19
    5972:	84 07       	cpc	r24, r20
    5974:	ba 07       	cpc	r27, r26
    5976:	20 f0       	brcs	.+8      	; 0x5980 <__divsf3_pse+0xaa>
    5978:	62 1b       	sub	r22, r18
    597a:	73 0b       	sbc	r23, r19
    597c:	84 0b       	sbc	r24, r20
    597e:	ba 0b       	sbc	r27, r26
    5980:	ee 1f       	adc	r30, r30
    5982:	88 f7       	brcc	.-30     	; 0x5966 <__divsf3_pse+0x90>
    5984:	e0 95       	com	r30
    5986:	08 95       	ret

00005988 <__fixsfsi>:
    5988:	04 d0       	rcall	.+8      	; 0x5992 <__fixunssfsi>
    598a:	68 94       	set
    598c:	b1 11       	cpse	r27, r1
    598e:	b5 c0       	rjmp	.+362    	; 0x5afa <__fp_szero>
    5990:	08 95       	ret

00005992 <__fixunssfsi>:
    5992:	98 d0       	rcall	.+304    	; 0x5ac4 <__fp_splitA>
    5994:	88 f0       	brcs	.+34     	; 0x59b8 <__fixunssfsi+0x26>
    5996:	9f 57       	subi	r25, 0x7F	; 127
    5998:	90 f0       	brcs	.+36     	; 0x59be <__fixunssfsi+0x2c>
    599a:	b9 2f       	mov	r27, r25
    599c:	99 27       	eor	r25, r25
    599e:	b7 51       	subi	r27, 0x17	; 23
    59a0:	a0 f0       	brcs	.+40     	; 0x59ca <__fixunssfsi+0x38>
    59a2:	d1 f0       	breq	.+52     	; 0x59d8 <__fixunssfsi+0x46>
    59a4:	66 0f       	add	r22, r22
    59a6:	77 1f       	adc	r23, r23
    59a8:	88 1f       	adc	r24, r24
    59aa:	99 1f       	adc	r25, r25
    59ac:	1a f0       	brmi	.+6      	; 0x59b4 <__fixunssfsi+0x22>
    59ae:	ba 95       	dec	r27
    59b0:	c9 f7       	brne	.-14     	; 0x59a4 <__fixunssfsi+0x12>
    59b2:	12 c0       	rjmp	.+36     	; 0x59d8 <__fixunssfsi+0x46>
    59b4:	b1 30       	cpi	r27, 0x01	; 1
    59b6:	81 f0       	breq	.+32     	; 0x59d8 <__fixunssfsi+0x46>
    59b8:	9f d0       	rcall	.+318    	; 0x5af8 <__fp_zero>
    59ba:	b1 e0       	ldi	r27, 0x01	; 1
    59bc:	08 95       	ret
    59be:	9c c0       	rjmp	.+312    	; 0x5af8 <__fp_zero>
    59c0:	67 2f       	mov	r22, r23
    59c2:	78 2f       	mov	r23, r24
    59c4:	88 27       	eor	r24, r24
    59c6:	b8 5f       	subi	r27, 0xF8	; 248
    59c8:	39 f0       	breq	.+14     	; 0x59d8 <__fixunssfsi+0x46>
    59ca:	b9 3f       	cpi	r27, 0xF9	; 249
    59cc:	cc f3       	brlt	.-14     	; 0x59c0 <__fixunssfsi+0x2e>
    59ce:	86 95       	lsr	r24
    59d0:	77 95       	ror	r23
    59d2:	67 95       	ror	r22
    59d4:	b3 95       	inc	r27
    59d6:	d9 f7       	brne	.-10     	; 0x59ce <__fixunssfsi+0x3c>
    59d8:	3e f4       	brtc	.+14     	; 0x59e8 <__fixunssfsi+0x56>
    59da:	90 95       	com	r25
    59dc:	80 95       	com	r24
    59de:	70 95       	com	r23
    59e0:	61 95       	neg	r22
    59e2:	7f 4f       	sbci	r23, 0xFF	; 255
    59e4:	8f 4f       	sbci	r24, 0xFF	; 255
    59e6:	9f 4f       	sbci	r25, 0xFF	; 255
    59e8:	08 95       	ret

000059ea <__floatunsisf>:
    59ea:	e8 94       	clt
    59ec:	09 c0       	rjmp	.+18     	; 0x5a00 <__floatsisf+0x12>

000059ee <__floatsisf>:
    59ee:	97 fb       	bst	r25, 7
    59f0:	3e f4       	brtc	.+14     	; 0x5a00 <__floatsisf+0x12>
    59f2:	90 95       	com	r25
    59f4:	80 95       	com	r24
    59f6:	70 95       	com	r23
    59f8:	61 95       	neg	r22
    59fa:	7f 4f       	sbci	r23, 0xFF	; 255
    59fc:	8f 4f       	sbci	r24, 0xFF	; 255
    59fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5a00:	99 23       	and	r25, r25
    5a02:	a9 f0       	breq	.+42     	; 0x5a2e <__floatsisf+0x40>
    5a04:	f9 2f       	mov	r31, r25
    5a06:	96 e9       	ldi	r25, 0x96	; 150
    5a08:	bb 27       	eor	r27, r27
    5a0a:	93 95       	inc	r25
    5a0c:	f6 95       	lsr	r31
    5a0e:	87 95       	ror	r24
    5a10:	77 95       	ror	r23
    5a12:	67 95       	ror	r22
    5a14:	b7 95       	ror	r27
    5a16:	f1 11       	cpse	r31, r1
    5a18:	f8 cf       	rjmp	.-16     	; 0x5a0a <__floatsisf+0x1c>
    5a1a:	fa f4       	brpl	.+62     	; 0x5a5a <__floatsisf+0x6c>
    5a1c:	bb 0f       	add	r27, r27
    5a1e:	11 f4       	brne	.+4      	; 0x5a24 <__floatsisf+0x36>
    5a20:	60 ff       	sbrs	r22, 0
    5a22:	1b c0       	rjmp	.+54     	; 0x5a5a <__floatsisf+0x6c>
    5a24:	6f 5f       	subi	r22, 0xFF	; 255
    5a26:	7f 4f       	sbci	r23, 0xFF	; 255
    5a28:	8f 4f       	sbci	r24, 0xFF	; 255
    5a2a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a2c:	16 c0       	rjmp	.+44     	; 0x5a5a <__floatsisf+0x6c>
    5a2e:	88 23       	and	r24, r24
    5a30:	11 f0       	breq	.+4      	; 0x5a36 <__floatsisf+0x48>
    5a32:	96 e9       	ldi	r25, 0x96	; 150
    5a34:	11 c0       	rjmp	.+34     	; 0x5a58 <__floatsisf+0x6a>
    5a36:	77 23       	and	r23, r23
    5a38:	21 f0       	breq	.+8      	; 0x5a42 <__floatsisf+0x54>
    5a3a:	9e e8       	ldi	r25, 0x8E	; 142
    5a3c:	87 2f       	mov	r24, r23
    5a3e:	76 2f       	mov	r23, r22
    5a40:	05 c0       	rjmp	.+10     	; 0x5a4c <__floatsisf+0x5e>
    5a42:	66 23       	and	r22, r22
    5a44:	71 f0       	breq	.+28     	; 0x5a62 <__floatsisf+0x74>
    5a46:	96 e8       	ldi	r25, 0x86	; 134
    5a48:	86 2f       	mov	r24, r22
    5a4a:	70 e0       	ldi	r23, 0x00	; 0
    5a4c:	60 e0       	ldi	r22, 0x00	; 0
    5a4e:	2a f0       	brmi	.+10     	; 0x5a5a <__floatsisf+0x6c>
    5a50:	9a 95       	dec	r25
    5a52:	66 0f       	add	r22, r22
    5a54:	77 1f       	adc	r23, r23
    5a56:	88 1f       	adc	r24, r24
    5a58:	da f7       	brpl	.-10     	; 0x5a50 <__floatsisf+0x62>
    5a5a:	88 0f       	add	r24, r24
    5a5c:	96 95       	lsr	r25
    5a5e:	87 95       	ror	r24
    5a60:	97 f9       	bld	r25, 7
    5a62:	08 95       	ret

00005a64 <__fp_inf>:
    5a64:	97 f9       	bld	r25, 7
    5a66:	9f 67       	ori	r25, 0x7F	; 127
    5a68:	80 e8       	ldi	r24, 0x80	; 128
    5a6a:	70 e0       	ldi	r23, 0x00	; 0
    5a6c:	60 e0       	ldi	r22, 0x00	; 0
    5a6e:	08 95       	ret

00005a70 <__fp_nan>:
    5a70:	9f ef       	ldi	r25, 0xFF	; 255
    5a72:	80 ec       	ldi	r24, 0xC0	; 192
    5a74:	08 95       	ret

00005a76 <__fp_pscA>:
    5a76:	00 24       	eor	r0, r0
    5a78:	0a 94       	dec	r0
    5a7a:	16 16       	cp	r1, r22
    5a7c:	17 06       	cpc	r1, r23
    5a7e:	18 06       	cpc	r1, r24
    5a80:	09 06       	cpc	r0, r25
    5a82:	08 95       	ret

00005a84 <__fp_pscB>:
    5a84:	00 24       	eor	r0, r0
    5a86:	0a 94       	dec	r0
    5a88:	12 16       	cp	r1, r18
    5a8a:	13 06       	cpc	r1, r19
    5a8c:	14 06       	cpc	r1, r20
    5a8e:	05 06       	cpc	r0, r21
    5a90:	08 95       	ret

00005a92 <__fp_round>:
    5a92:	09 2e       	mov	r0, r25
    5a94:	03 94       	inc	r0
    5a96:	00 0c       	add	r0, r0
    5a98:	11 f4       	brne	.+4      	; 0x5a9e <__fp_round+0xc>
    5a9a:	88 23       	and	r24, r24
    5a9c:	52 f0       	brmi	.+20     	; 0x5ab2 <__fp_round+0x20>
    5a9e:	bb 0f       	add	r27, r27
    5aa0:	40 f4       	brcc	.+16     	; 0x5ab2 <__fp_round+0x20>
    5aa2:	bf 2b       	or	r27, r31
    5aa4:	11 f4       	brne	.+4      	; 0x5aaa <__fp_round+0x18>
    5aa6:	60 ff       	sbrs	r22, 0
    5aa8:	04 c0       	rjmp	.+8      	; 0x5ab2 <__fp_round+0x20>
    5aaa:	6f 5f       	subi	r22, 0xFF	; 255
    5aac:	7f 4f       	sbci	r23, 0xFF	; 255
    5aae:	8f 4f       	sbci	r24, 0xFF	; 255
    5ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ab2:	08 95       	ret

00005ab4 <__fp_split3>:
    5ab4:	57 fd       	sbrc	r21, 7
    5ab6:	90 58       	subi	r25, 0x80	; 128
    5ab8:	44 0f       	add	r20, r20
    5aba:	55 1f       	adc	r21, r21
    5abc:	59 f0       	breq	.+22     	; 0x5ad4 <__fp_splitA+0x10>
    5abe:	5f 3f       	cpi	r21, 0xFF	; 255
    5ac0:	71 f0       	breq	.+28     	; 0x5ade <__fp_splitA+0x1a>
    5ac2:	47 95       	ror	r20

00005ac4 <__fp_splitA>:
    5ac4:	88 0f       	add	r24, r24
    5ac6:	97 fb       	bst	r25, 7
    5ac8:	99 1f       	adc	r25, r25
    5aca:	61 f0       	breq	.+24     	; 0x5ae4 <__fp_splitA+0x20>
    5acc:	9f 3f       	cpi	r25, 0xFF	; 255
    5ace:	79 f0       	breq	.+30     	; 0x5aee <__fp_splitA+0x2a>
    5ad0:	87 95       	ror	r24
    5ad2:	08 95       	ret
    5ad4:	12 16       	cp	r1, r18
    5ad6:	13 06       	cpc	r1, r19
    5ad8:	14 06       	cpc	r1, r20
    5ada:	55 1f       	adc	r21, r21
    5adc:	f2 cf       	rjmp	.-28     	; 0x5ac2 <__fp_split3+0xe>
    5ade:	46 95       	lsr	r20
    5ae0:	f1 df       	rcall	.-30     	; 0x5ac4 <__fp_splitA>
    5ae2:	08 c0       	rjmp	.+16     	; 0x5af4 <__fp_splitA+0x30>
    5ae4:	16 16       	cp	r1, r22
    5ae6:	17 06       	cpc	r1, r23
    5ae8:	18 06       	cpc	r1, r24
    5aea:	99 1f       	adc	r25, r25
    5aec:	f1 cf       	rjmp	.-30     	; 0x5ad0 <__fp_splitA+0xc>
    5aee:	86 95       	lsr	r24
    5af0:	71 05       	cpc	r23, r1
    5af2:	61 05       	cpc	r22, r1
    5af4:	08 94       	sec
    5af6:	08 95       	ret

00005af8 <__fp_zero>:
    5af8:	e8 94       	clt

00005afa <__fp_szero>:
    5afa:	bb 27       	eor	r27, r27
    5afc:	66 27       	eor	r22, r22
    5afe:	77 27       	eor	r23, r23
    5b00:	cb 01       	movw	r24, r22
    5b02:	97 f9       	bld	r25, 7
    5b04:	08 95       	ret

00005b06 <__mulsf3>:
    5b06:	0b d0       	rcall	.+22     	; 0x5b1e <__mulsf3x>
    5b08:	c4 cf       	rjmp	.-120    	; 0x5a92 <__fp_round>
    5b0a:	b5 df       	rcall	.-150    	; 0x5a76 <__fp_pscA>
    5b0c:	28 f0       	brcs	.+10     	; 0x5b18 <__mulsf3+0x12>
    5b0e:	ba df       	rcall	.-140    	; 0x5a84 <__fp_pscB>
    5b10:	18 f0       	brcs	.+6      	; 0x5b18 <__mulsf3+0x12>
    5b12:	95 23       	and	r25, r21
    5b14:	09 f0       	breq	.+2      	; 0x5b18 <__mulsf3+0x12>
    5b16:	a6 cf       	rjmp	.-180    	; 0x5a64 <__fp_inf>
    5b18:	ab cf       	rjmp	.-170    	; 0x5a70 <__fp_nan>
    5b1a:	11 24       	eor	r1, r1
    5b1c:	ee cf       	rjmp	.-36     	; 0x5afa <__fp_szero>

00005b1e <__mulsf3x>:
    5b1e:	ca df       	rcall	.-108    	; 0x5ab4 <__fp_split3>
    5b20:	a0 f3       	brcs	.-24     	; 0x5b0a <__mulsf3+0x4>

00005b22 <__mulsf3_pse>:
    5b22:	95 9f       	mul	r25, r21
    5b24:	d1 f3       	breq	.-12     	; 0x5b1a <__mulsf3+0x14>
    5b26:	95 0f       	add	r25, r21
    5b28:	50 e0       	ldi	r21, 0x00	; 0
    5b2a:	55 1f       	adc	r21, r21
    5b2c:	62 9f       	mul	r22, r18
    5b2e:	f0 01       	movw	r30, r0
    5b30:	72 9f       	mul	r23, r18
    5b32:	bb 27       	eor	r27, r27
    5b34:	f0 0d       	add	r31, r0
    5b36:	b1 1d       	adc	r27, r1
    5b38:	63 9f       	mul	r22, r19
    5b3a:	aa 27       	eor	r26, r26
    5b3c:	f0 0d       	add	r31, r0
    5b3e:	b1 1d       	adc	r27, r1
    5b40:	aa 1f       	adc	r26, r26
    5b42:	64 9f       	mul	r22, r20
    5b44:	66 27       	eor	r22, r22
    5b46:	b0 0d       	add	r27, r0
    5b48:	a1 1d       	adc	r26, r1
    5b4a:	66 1f       	adc	r22, r22
    5b4c:	82 9f       	mul	r24, r18
    5b4e:	22 27       	eor	r18, r18
    5b50:	b0 0d       	add	r27, r0
    5b52:	a1 1d       	adc	r26, r1
    5b54:	62 1f       	adc	r22, r18
    5b56:	73 9f       	mul	r23, r19
    5b58:	b0 0d       	add	r27, r0
    5b5a:	a1 1d       	adc	r26, r1
    5b5c:	62 1f       	adc	r22, r18
    5b5e:	83 9f       	mul	r24, r19
    5b60:	a0 0d       	add	r26, r0
    5b62:	61 1d       	adc	r22, r1
    5b64:	22 1f       	adc	r18, r18
    5b66:	74 9f       	mul	r23, r20
    5b68:	33 27       	eor	r19, r19
    5b6a:	a0 0d       	add	r26, r0
    5b6c:	61 1d       	adc	r22, r1
    5b6e:	23 1f       	adc	r18, r19
    5b70:	84 9f       	mul	r24, r20
    5b72:	60 0d       	add	r22, r0
    5b74:	21 1d       	adc	r18, r1
    5b76:	82 2f       	mov	r24, r18
    5b78:	76 2f       	mov	r23, r22
    5b7a:	6a 2f       	mov	r22, r26
    5b7c:	11 24       	eor	r1, r1
    5b7e:	9f 57       	subi	r25, 0x7F	; 127
    5b80:	50 40       	sbci	r21, 0x00	; 0
    5b82:	8a f0       	brmi	.+34     	; 0x5ba6 <__mulsf3_pse+0x84>
    5b84:	e1 f0       	breq	.+56     	; 0x5bbe <__mulsf3_pse+0x9c>
    5b86:	88 23       	and	r24, r24
    5b88:	4a f0       	brmi	.+18     	; 0x5b9c <__mulsf3_pse+0x7a>
    5b8a:	ee 0f       	add	r30, r30
    5b8c:	ff 1f       	adc	r31, r31
    5b8e:	bb 1f       	adc	r27, r27
    5b90:	66 1f       	adc	r22, r22
    5b92:	77 1f       	adc	r23, r23
    5b94:	88 1f       	adc	r24, r24
    5b96:	91 50       	subi	r25, 0x01	; 1
    5b98:	50 40       	sbci	r21, 0x00	; 0
    5b9a:	a9 f7       	brne	.-22     	; 0x5b86 <__mulsf3_pse+0x64>
    5b9c:	9e 3f       	cpi	r25, 0xFE	; 254
    5b9e:	51 05       	cpc	r21, r1
    5ba0:	70 f0       	brcs	.+28     	; 0x5bbe <__mulsf3_pse+0x9c>
    5ba2:	60 cf       	rjmp	.-320    	; 0x5a64 <__fp_inf>
    5ba4:	aa cf       	rjmp	.-172    	; 0x5afa <__fp_szero>
    5ba6:	5f 3f       	cpi	r21, 0xFF	; 255
    5ba8:	ec f3       	brlt	.-6      	; 0x5ba4 <__mulsf3_pse+0x82>
    5baa:	98 3e       	cpi	r25, 0xE8	; 232
    5bac:	dc f3       	brlt	.-10     	; 0x5ba4 <__mulsf3_pse+0x82>
    5bae:	86 95       	lsr	r24
    5bb0:	77 95       	ror	r23
    5bb2:	67 95       	ror	r22
    5bb4:	b7 95       	ror	r27
    5bb6:	f7 95       	ror	r31
    5bb8:	e7 95       	ror	r30
    5bba:	9f 5f       	subi	r25, 0xFF	; 255
    5bbc:	c1 f7       	brne	.-16     	; 0x5bae <__mulsf3_pse+0x8c>
    5bbe:	fe 2b       	or	r31, r30
    5bc0:	88 0f       	add	r24, r24
    5bc2:	91 1d       	adc	r25, r1
    5bc4:	96 95       	lsr	r25
    5bc6:	87 95       	ror	r24
    5bc8:	97 f9       	bld	r25, 7
    5bca:	08 95       	ret

00005bcc <vfprintf>:
    5bcc:	2f 92       	push	r2
    5bce:	3f 92       	push	r3
    5bd0:	4f 92       	push	r4
    5bd2:	5f 92       	push	r5
    5bd4:	6f 92       	push	r6
    5bd6:	7f 92       	push	r7
    5bd8:	8f 92       	push	r8
    5bda:	9f 92       	push	r9
    5bdc:	af 92       	push	r10
    5bde:	bf 92       	push	r11
    5be0:	cf 92       	push	r12
    5be2:	df 92       	push	r13
    5be4:	ef 92       	push	r14
    5be6:	ff 92       	push	r15
    5be8:	0f 93       	push	r16
    5bea:	1f 93       	push	r17
    5bec:	cf 93       	push	r28
    5bee:	df 93       	push	r29
    5bf0:	cd b7       	in	r28, 0x3d	; 61
    5bf2:	de b7       	in	r29, 0x3e	; 62
    5bf4:	60 97       	sbiw	r28, 0x10	; 16
    5bf6:	0f b6       	in	r0, 0x3f	; 63
    5bf8:	f8 94       	cli
    5bfa:	de bf       	out	0x3e, r29	; 62
    5bfc:	0f be       	out	0x3f, r0	; 63
    5bfe:	cd bf       	out	0x3d, r28	; 61
    5c00:	7c 01       	movw	r14, r24
    5c02:	1b 01       	movw	r2, r22
    5c04:	6a 01       	movw	r12, r20
    5c06:	fc 01       	movw	r30, r24
    5c08:	17 82       	std	Z+7, r1	; 0x07
    5c0a:	16 82       	std	Z+6, r1	; 0x06
    5c0c:	83 81       	ldd	r24, Z+3	; 0x03
    5c0e:	81 ff       	sbrs	r24, 1
    5c10:	2a c3       	rjmp	.+1620   	; 0x6266 <vfprintf+0x69a>
    5c12:	9e 01       	movw	r18, r28
    5c14:	2f 5f       	subi	r18, 0xFF	; 255
    5c16:	3f 4f       	sbci	r19, 0xFF	; 255
    5c18:	39 01       	movw	r6, r18
    5c1a:	f7 01       	movw	r30, r14
    5c1c:	93 81       	ldd	r25, Z+3	; 0x03
    5c1e:	f1 01       	movw	r30, r2
    5c20:	93 fd       	sbrc	r25, 3
    5c22:	85 91       	lpm	r24, Z+
    5c24:	93 ff       	sbrs	r25, 3
    5c26:	81 91       	ld	r24, Z+
    5c28:	1f 01       	movw	r2, r30
    5c2a:	88 23       	and	r24, r24
    5c2c:	09 f4       	brne	.+2      	; 0x5c30 <vfprintf+0x64>
    5c2e:	17 c3       	rjmp	.+1582   	; 0x625e <vfprintf+0x692>
    5c30:	85 32       	cpi	r24, 0x25	; 37
    5c32:	39 f4       	brne	.+14     	; 0x5c42 <vfprintf+0x76>
    5c34:	93 fd       	sbrc	r25, 3
    5c36:	85 91       	lpm	r24, Z+
    5c38:	93 ff       	sbrs	r25, 3
    5c3a:	81 91       	ld	r24, Z+
    5c3c:	1f 01       	movw	r2, r30
    5c3e:	85 32       	cpi	r24, 0x25	; 37
    5c40:	31 f4       	brne	.+12     	; 0x5c4e <vfprintf+0x82>
    5c42:	b7 01       	movw	r22, r14
    5c44:	90 e0       	ldi	r25, 0x00	; 0
    5c46:	1d d6       	rcall	.+3130   	; 0x6882 <fputc>
    5c48:	56 01       	movw	r10, r12
    5c4a:	65 01       	movw	r12, r10
    5c4c:	e6 cf       	rjmp	.-52     	; 0x5c1a <vfprintf+0x4e>
    5c4e:	10 e0       	ldi	r17, 0x00	; 0
    5c50:	51 2c       	mov	r5, r1
    5c52:	91 2c       	mov	r9, r1
    5c54:	ff e1       	ldi	r31, 0x1F	; 31
    5c56:	f9 15       	cp	r31, r9
    5c58:	d8 f0       	brcs	.+54     	; 0x5c90 <vfprintf+0xc4>
    5c5a:	8b 32       	cpi	r24, 0x2B	; 43
    5c5c:	79 f0       	breq	.+30     	; 0x5c7c <vfprintf+0xb0>
    5c5e:	38 f4       	brcc	.+14     	; 0x5c6e <vfprintf+0xa2>
    5c60:	80 32       	cpi	r24, 0x20	; 32
    5c62:	79 f0       	breq	.+30     	; 0x5c82 <vfprintf+0xb6>
    5c64:	83 32       	cpi	r24, 0x23	; 35
    5c66:	a1 f4       	brne	.+40     	; 0x5c90 <vfprintf+0xc4>
    5c68:	f9 2d       	mov	r31, r9
    5c6a:	f0 61       	ori	r31, 0x10	; 16
    5c6c:	2e c0       	rjmp	.+92     	; 0x5cca <vfprintf+0xfe>
    5c6e:	8d 32       	cpi	r24, 0x2D	; 45
    5c70:	61 f0       	breq	.+24     	; 0x5c8a <vfprintf+0xbe>
    5c72:	80 33       	cpi	r24, 0x30	; 48
    5c74:	69 f4       	brne	.+26     	; 0x5c90 <vfprintf+0xc4>
    5c76:	29 2d       	mov	r18, r9
    5c78:	21 60       	ori	r18, 0x01	; 1
    5c7a:	2d c0       	rjmp	.+90     	; 0x5cd6 <vfprintf+0x10a>
    5c7c:	39 2d       	mov	r19, r9
    5c7e:	32 60       	ori	r19, 0x02	; 2
    5c80:	93 2e       	mov	r9, r19
    5c82:	89 2d       	mov	r24, r9
    5c84:	84 60       	ori	r24, 0x04	; 4
    5c86:	98 2e       	mov	r9, r24
    5c88:	2a c0       	rjmp	.+84     	; 0x5cde <vfprintf+0x112>
    5c8a:	e9 2d       	mov	r30, r9
    5c8c:	e8 60       	ori	r30, 0x08	; 8
    5c8e:	15 c0       	rjmp	.+42     	; 0x5cba <vfprintf+0xee>
    5c90:	97 fc       	sbrc	r9, 7
    5c92:	2d c0       	rjmp	.+90     	; 0x5cee <vfprintf+0x122>
    5c94:	20 ed       	ldi	r18, 0xD0	; 208
    5c96:	28 0f       	add	r18, r24
    5c98:	2a 30       	cpi	r18, 0x0A	; 10
    5c9a:	88 f4       	brcc	.+34     	; 0x5cbe <vfprintf+0xf2>
    5c9c:	96 fe       	sbrs	r9, 6
    5c9e:	06 c0       	rjmp	.+12     	; 0x5cac <vfprintf+0xe0>
    5ca0:	3a e0       	ldi	r19, 0x0A	; 10
    5ca2:	13 9f       	mul	r17, r19
    5ca4:	20 0d       	add	r18, r0
    5ca6:	11 24       	eor	r1, r1
    5ca8:	12 2f       	mov	r17, r18
    5caa:	19 c0       	rjmp	.+50     	; 0x5cde <vfprintf+0x112>
    5cac:	8a e0       	ldi	r24, 0x0A	; 10
    5cae:	58 9e       	mul	r5, r24
    5cb0:	20 0d       	add	r18, r0
    5cb2:	11 24       	eor	r1, r1
    5cb4:	52 2e       	mov	r5, r18
    5cb6:	e9 2d       	mov	r30, r9
    5cb8:	e0 62       	ori	r30, 0x20	; 32
    5cba:	9e 2e       	mov	r9, r30
    5cbc:	10 c0       	rjmp	.+32     	; 0x5cde <vfprintf+0x112>
    5cbe:	8e 32       	cpi	r24, 0x2E	; 46
    5cc0:	31 f4       	brne	.+12     	; 0x5cce <vfprintf+0x102>
    5cc2:	96 fc       	sbrc	r9, 6
    5cc4:	cc c2       	rjmp	.+1432   	; 0x625e <vfprintf+0x692>
    5cc6:	f9 2d       	mov	r31, r9
    5cc8:	f0 64       	ori	r31, 0x40	; 64
    5cca:	9f 2e       	mov	r9, r31
    5ccc:	08 c0       	rjmp	.+16     	; 0x5cde <vfprintf+0x112>
    5cce:	8c 36       	cpi	r24, 0x6C	; 108
    5cd0:	21 f4       	brne	.+8      	; 0x5cda <vfprintf+0x10e>
    5cd2:	29 2d       	mov	r18, r9
    5cd4:	20 68       	ori	r18, 0x80	; 128
    5cd6:	92 2e       	mov	r9, r18
    5cd8:	02 c0       	rjmp	.+4      	; 0x5cde <vfprintf+0x112>
    5cda:	88 36       	cpi	r24, 0x68	; 104
    5cdc:	41 f4       	brne	.+16     	; 0x5cee <vfprintf+0x122>
    5cde:	f1 01       	movw	r30, r2
    5ce0:	93 fd       	sbrc	r25, 3
    5ce2:	85 91       	lpm	r24, Z+
    5ce4:	93 ff       	sbrs	r25, 3
    5ce6:	81 91       	ld	r24, Z+
    5ce8:	1f 01       	movw	r2, r30
    5cea:	81 11       	cpse	r24, r1
    5cec:	b3 cf       	rjmp	.-154    	; 0x5c54 <vfprintf+0x88>
    5cee:	9b eb       	ldi	r25, 0xBB	; 187
    5cf0:	98 0f       	add	r25, r24
    5cf2:	93 30       	cpi	r25, 0x03	; 3
    5cf4:	20 f4       	brcc	.+8      	; 0x5cfe <vfprintf+0x132>
    5cf6:	99 2d       	mov	r25, r9
    5cf8:	90 61       	ori	r25, 0x10	; 16
    5cfa:	80 5e       	subi	r24, 0xE0	; 224
    5cfc:	07 c0       	rjmp	.+14     	; 0x5d0c <vfprintf+0x140>
    5cfe:	9b e9       	ldi	r25, 0x9B	; 155
    5d00:	98 0f       	add	r25, r24
    5d02:	93 30       	cpi	r25, 0x03	; 3
    5d04:	08 f0       	brcs	.+2      	; 0x5d08 <vfprintf+0x13c>
    5d06:	59 c1       	rjmp	.+690    	; 0x5fba <vfprintf+0x3ee>
    5d08:	99 2d       	mov	r25, r9
    5d0a:	9f 7e       	andi	r25, 0xEF	; 239
    5d0c:	96 ff       	sbrs	r25, 6
    5d0e:	16 e0       	ldi	r17, 0x06	; 6
    5d10:	9f 73       	andi	r25, 0x3F	; 63
    5d12:	99 2e       	mov	r9, r25
    5d14:	85 36       	cpi	r24, 0x65	; 101
    5d16:	19 f4       	brne	.+6      	; 0x5d1e <vfprintf+0x152>
    5d18:	90 64       	ori	r25, 0x40	; 64
    5d1a:	99 2e       	mov	r9, r25
    5d1c:	08 c0       	rjmp	.+16     	; 0x5d2e <vfprintf+0x162>
    5d1e:	86 36       	cpi	r24, 0x66	; 102
    5d20:	21 f4       	brne	.+8      	; 0x5d2a <vfprintf+0x15e>
    5d22:	39 2f       	mov	r19, r25
    5d24:	30 68       	ori	r19, 0x80	; 128
    5d26:	93 2e       	mov	r9, r19
    5d28:	02 c0       	rjmp	.+4      	; 0x5d2e <vfprintf+0x162>
    5d2a:	11 11       	cpse	r17, r1
    5d2c:	11 50       	subi	r17, 0x01	; 1
    5d2e:	97 fe       	sbrs	r9, 7
    5d30:	07 c0       	rjmp	.+14     	; 0x5d40 <vfprintf+0x174>
    5d32:	1c 33       	cpi	r17, 0x3C	; 60
    5d34:	50 f4       	brcc	.+20     	; 0x5d4a <vfprintf+0x17e>
    5d36:	44 24       	eor	r4, r4
    5d38:	43 94       	inc	r4
    5d3a:	41 0e       	add	r4, r17
    5d3c:	27 e0       	ldi	r18, 0x07	; 7
    5d3e:	0b c0       	rjmp	.+22     	; 0x5d56 <vfprintf+0x18a>
    5d40:	18 30       	cpi	r17, 0x08	; 8
    5d42:	38 f0       	brcs	.+14     	; 0x5d52 <vfprintf+0x186>
    5d44:	27 e0       	ldi	r18, 0x07	; 7
    5d46:	17 e0       	ldi	r17, 0x07	; 7
    5d48:	05 c0       	rjmp	.+10     	; 0x5d54 <vfprintf+0x188>
    5d4a:	27 e0       	ldi	r18, 0x07	; 7
    5d4c:	9c e3       	ldi	r25, 0x3C	; 60
    5d4e:	49 2e       	mov	r4, r25
    5d50:	02 c0       	rjmp	.+4      	; 0x5d56 <vfprintf+0x18a>
    5d52:	21 2f       	mov	r18, r17
    5d54:	41 2c       	mov	r4, r1
    5d56:	56 01       	movw	r10, r12
    5d58:	84 e0       	ldi	r24, 0x04	; 4
    5d5a:	a8 0e       	add	r10, r24
    5d5c:	b1 1c       	adc	r11, r1
    5d5e:	f6 01       	movw	r30, r12
    5d60:	60 81       	ld	r22, Z
    5d62:	71 81       	ldd	r23, Z+1	; 0x01
    5d64:	82 81       	ldd	r24, Z+2	; 0x02
    5d66:	93 81       	ldd	r25, Z+3	; 0x03
    5d68:	04 2d       	mov	r16, r4
    5d6a:	a3 01       	movw	r20, r6
    5d6c:	3d d4       	rcall	.+2170   	; 0x65e8 <__ftoa_engine>
    5d6e:	6c 01       	movw	r12, r24
    5d70:	f9 81       	ldd	r31, Y+1	; 0x01
    5d72:	fc 87       	std	Y+12, r31	; 0x0c
    5d74:	f0 ff       	sbrs	r31, 0
    5d76:	02 c0       	rjmp	.+4      	; 0x5d7c <vfprintf+0x1b0>
    5d78:	f3 ff       	sbrs	r31, 3
    5d7a:	06 c0       	rjmp	.+12     	; 0x5d88 <vfprintf+0x1bc>
    5d7c:	91 fc       	sbrc	r9, 1
    5d7e:	06 c0       	rjmp	.+12     	; 0x5d8c <vfprintf+0x1c0>
    5d80:	92 fe       	sbrs	r9, 2
    5d82:	06 c0       	rjmp	.+12     	; 0x5d90 <vfprintf+0x1c4>
    5d84:	00 e2       	ldi	r16, 0x20	; 32
    5d86:	05 c0       	rjmp	.+10     	; 0x5d92 <vfprintf+0x1c6>
    5d88:	0d e2       	ldi	r16, 0x2D	; 45
    5d8a:	03 c0       	rjmp	.+6      	; 0x5d92 <vfprintf+0x1c6>
    5d8c:	0b e2       	ldi	r16, 0x2B	; 43
    5d8e:	01 c0       	rjmp	.+2      	; 0x5d92 <vfprintf+0x1c6>
    5d90:	00 e0       	ldi	r16, 0x00	; 0
    5d92:	8c 85       	ldd	r24, Y+12	; 0x0c
    5d94:	8c 70       	andi	r24, 0x0C	; 12
    5d96:	19 f0       	breq	.+6      	; 0x5d9e <vfprintf+0x1d2>
    5d98:	01 11       	cpse	r16, r1
    5d9a:	43 c2       	rjmp	.+1158   	; 0x6222 <vfprintf+0x656>
    5d9c:	80 c2       	rjmp	.+1280   	; 0x629e <vfprintf+0x6d2>
    5d9e:	97 fe       	sbrs	r9, 7
    5da0:	10 c0       	rjmp	.+32     	; 0x5dc2 <vfprintf+0x1f6>
    5da2:	4c 0c       	add	r4, r12
    5da4:	fc 85       	ldd	r31, Y+12	; 0x0c
    5da6:	f4 ff       	sbrs	r31, 4
    5da8:	04 c0       	rjmp	.+8      	; 0x5db2 <vfprintf+0x1e6>
    5daa:	8a 81       	ldd	r24, Y+2	; 0x02
    5dac:	81 33       	cpi	r24, 0x31	; 49
    5dae:	09 f4       	brne	.+2      	; 0x5db2 <vfprintf+0x1e6>
    5db0:	4a 94       	dec	r4
    5db2:	14 14       	cp	r1, r4
    5db4:	74 f5       	brge	.+92     	; 0x5e12 <vfprintf+0x246>
    5db6:	28 e0       	ldi	r18, 0x08	; 8
    5db8:	24 15       	cp	r18, r4
    5dba:	78 f5       	brcc	.+94     	; 0x5e1a <vfprintf+0x24e>
    5dbc:	88 e0       	ldi	r24, 0x08	; 8
    5dbe:	48 2e       	mov	r4, r24
    5dc0:	2c c0       	rjmp	.+88     	; 0x5e1a <vfprintf+0x24e>
    5dc2:	96 fc       	sbrc	r9, 6
    5dc4:	2a c0       	rjmp	.+84     	; 0x5e1a <vfprintf+0x24e>
    5dc6:	81 2f       	mov	r24, r17
    5dc8:	90 e0       	ldi	r25, 0x00	; 0
    5dca:	8c 15       	cp	r24, r12
    5dcc:	9d 05       	cpc	r25, r13
    5dce:	9c f0       	brlt	.+38     	; 0x5df6 <vfprintf+0x22a>
    5dd0:	3c ef       	ldi	r19, 0xFC	; 252
    5dd2:	c3 16       	cp	r12, r19
    5dd4:	3f ef       	ldi	r19, 0xFF	; 255
    5dd6:	d3 06       	cpc	r13, r19
    5dd8:	74 f0       	brlt	.+28     	; 0x5df6 <vfprintf+0x22a>
    5dda:	89 2d       	mov	r24, r9
    5ddc:	80 68       	ori	r24, 0x80	; 128
    5dde:	98 2e       	mov	r9, r24
    5de0:	0a c0       	rjmp	.+20     	; 0x5df6 <vfprintf+0x22a>
    5de2:	e2 e0       	ldi	r30, 0x02	; 2
    5de4:	f0 e0       	ldi	r31, 0x00	; 0
    5de6:	ec 0f       	add	r30, r28
    5de8:	fd 1f       	adc	r31, r29
    5dea:	e1 0f       	add	r30, r17
    5dec:	f1 1d       	adc	r31, r1
    5dee:	80 81       	ld	r24, Z
    5df0:	80 33       	cpi	r24, 0x30	; 48
    5df2:	19 f4       	brne	.+6      	; 0x5dfa <vfprintf+0x22e>
    5df4:	11 50       	subi	r17, 0x01	; 1
    5df6:	11 11       	cpse	r17, r1
    5df8:	f4 cf       	rjmp	.-24     	; 0x5de2 <vfprintf+0x216>
    5dfa:	97 fe       	sbrs	r9, 7
    5dfc:	0e c0       	rjmp	.+28     	; 0x5e1a <vfprintf+0x24e>
    5dfe:	44 24       	eor	r4, r4
    5e00:	43 94       	inc	r4
    5e02:	41 0e       	add	r4, r17
    5e04:	81 2f       	mov	r24, r17
    5e06:	90 e0       	ldi	r25, 0x00	; 0
    5e08:	c8 16       	cp	r12, r24
    5e0a:	d9 06       	cpc	r13, r25
    5e0c:	2c f4       	brge	.+10     	; 0x5e18 <vfprintf+0x24c>
    5e0e:	1c 19       	sub	r17, r12
    5e10:	04 c0       	rjmp	.+8      	; 0x5e1a <vfprintf+0x24e>
    5e12:	44 24       	eor	r4, r4
    5e14:	43 94       	inc	r4
    5e16:	01 c0       	rjmp	.+2      	; 0x5e1a <vfprintf+0x24e>
    5e18:	10 e0       	ldi	r17, 0x00	; 0
    5e1a:	97 fe       	sbrs	r9, 7
    5e1c:	06 c0       	rjmp	.+12     	; 0x5e2a <vfprintf+0x25e>
    5e1e:	1c 14       	cp	r1, r12
    5e20:	1d 04       	cpc	r1, r13
    5e22:	34 f4       	brge	.+12     	; 0x5e30 <vfprintf+0x264>
    5e24:	c6 01       	movw	r24, r12
    5e26:	01 96       	adiw	r24, 0x01	; 1
    5e28:	05 c0       	rjmp	.+10     	; 0x5e34 <vfprintf+0x268>
    5e2a:	85 e0       	ldi	r24, 0x05	; 5
    5e2c:	90 e0       	ldi	r25, 0x00	; 0
    5e2e:	02 c0       	rjmp	.+4      	; 0x5e34 <vfprintf+0x268>
    5e30:	81 e0       	ldi	r24, 0x01	; 1
    5e32:	90 e0       	ldi	r25, 0x00	; 0
    5e34:	01 11       	cpse	r16, r1
    5e36:	01 96       	adiw	r24, 0x01	; 1
    5e38:	11 23       	and	r17, r17
    5e3a:	31 f0       	breq	.+12     	; 0x5e48 <vfprintf+0x27c>
    5e3c:	21 2f       	mov	r18, r17
    5e3e:	30 e0       	ldi	r19, 0x00	; 0
    5e40:	2f 5f       	subi	r18, 0xFF	; 255
    5e42:	3f 4f       	sbci	r19, 0xFF	; 255
    5e44:	82 0f       	add	r24, r18
    5e46:	93 1f       	adc	r25, r19
    5e48:	25 2d       	mov	r18, r5
    5e4a:	30 e0       	ldi	r19, 0x00	; 0
    5e4c:	82 17       	cp	r24, r18
    5e4e:	93 07       	cpc	r25, r19
    5e50:	14 f4       	brge	.+4      	; 0x5e56 <vfprintf+0x28a>
    5e52:	58 1a       	sub	r5, r24
    5e54:	01 c0       	rjmp	.+2      	; 0x5e58 <vfprintf+0x28c>
    5e56:	51 2c       	mov	r5, r1
    5e58:	89 2d       	mov	r24, r9
    5e5a:	89 70       	andi	r24, 0x09	; 9
    5e5c:	41 f4       	brne	.+16     	; 0x5e6e <vfprintf+0x2a2>
    5e5e:	55 20       	and	r5, r5
    5e60:	31 f0       	breq	.+12     	; 0x5e6e <vfprintf+0x2a2>
    5e62:	b7 01       	movw	r22, r14
    5e64:	80 e2       	ldi	r24, 0x20	; 32
    5e66:	90 e0       	ldi	r25, 0x00	; 0
    5e68:	0c d5       	rcall	.+2584   	; 0x6882 <fputc>
    5e6a:	5a 94       	dec	r5
    5e6c:	f8 cf       	rjmp	.-16     	; 0x5e5e <vfprintf+0x292>
    5e6e:	00 23       	and	r16, r16
    5e70:	21 f0       	breq	.+8      	; 0x5e7a <vfprintf+0x2ae>
    5e72:	b7 01       	movw	r22, r14
    5e74:	80 2f       	mov	r24, r16
    5e76:	90 e0       	ldi	r25, 0x00	; 0
    5e78:	04 d5       	rcall	.+2568   	; 0x6882 <fputc>
    5e7a:	93 fc       	sbrc	r9, 3
    5e7c:	08 c0       	rjmp	.+16     	; 0x5e8e <vfprintf+0x2c2>
    5e7e:	55 20       	and	r5, r5
    5e80:	31 f0       	breq	.+12     	; 0x5e8e <vfprintf+0x2c2>
    5e82:	b7 01       	movw	r22, r14
    5e84:	80 e3       	ldi	r24, 0x30	; 48
    5e86:	90 e0       	ldi	r25, 0x00	; 0
    5e88:	fc d4       	rcall	.+2552   	; 0x6882 <fputc>
    5e8a:	5a 94       	dec	r5
    5e8c:	f8 cf       	rjmp	.-16     	; 0x5e7e <vfprintf+0x2b2>
    5e8e:	97 fe       	sbrs	r9, 7
    5e90:	4a c0       	rjmp	.+148    	; 0x5f26 <vfprintf+0x35a>
    5e92:	46 01       	movw	r8, r12
    5e94:	d7 fe       	sbrs	r13, 7
    5e96:	02 c0       	rjmp	.+4      	; 0x5e9c <vfprintf+0x2d0>
    5e98:	81 2c       	mov	r8, r1
    5e9a:	91 2c       	mov	r9, r1
    5e9c:	c6 01       	movw	r24, r12
    5e9e:	88 19       	sub	r24, r8
    5ea0:	99 09       	sbc	r25, r9
    5ea2:	f3 01       	movw	r30, r6
    5ea4:	e8 0f       	add	r30, r24
    5ea6:	f9 1f       	adc	r31, r25
    5ea8:	fe 87       	std	Y+14, r31	; 0x0e
    5eaa:	ed 87       	std	Y+13, r30	; 0x0d
    5eac:	96 01       	movw	r18, r12
    5eae:	24 19       	sub	r18, r4
    5eb0:	31 09       	sbc	r19, r1
    5eb2:	38 8b       	std	Y+16, r19	; 0x10
    5eb4:	2f 87       	std	Y+15, r18	; 0x0f
    5eb6:	01 2f       	mov	r16, r17
    5eb8:	10 e0       	ldi	r17, 0x00	; 0
    5eba:	11 95       	neg	r17
    5ebc:	01 95       	neg	r16
    5ebe:	11 09       	sbc	r17, r1
    5ec0:	3f ef       	ldi	r19, 0xFF	; 255
    5ec2:	83 16       	cp	r8, r19
    5ec4:	93 06       	cpc	r9, r19
    5ec6:	21 f4       	brne	.+8      	; 0x5ed0 <vfprintf+0x304>
    5ec8:	b7 01       	movw	r22, r14
    5eca:	8e e2       	ldi	r24, 0x2E	; 46
    5ecc:	90 e0       	ldi	r25, 0x00	; 0
    5ece:	d9 d4       	rcall	.+2482   	; 0x6882 <fputc>
    5ed0:	c8 14       	cp	r12, r8
    5ed2:	d9 04       	cpc	r13, r9
    5ed4:	4c f0       	brlt	.+18     	; 0x5ee8 <vfprintf+0x31c>
    5ed6:	8f 85       	ldd	r24, Y+15	; 0x0f
    5ed8:	98 89       	ldd	r25, Y+16	; 0x10
    5eda:	88 15       	cp	r24, r8
    5edc:	99 05       	cpc	r25, r9
    5ede:	24 f4       	brge	.+8      	; 0x5ee8 <vfprintf+0x31c>
    5ee0:	ed 85       	ldd	r30, Y+13	; 0x0d
    5ee2:	fe 85       	ldd	r31, Y+14	; 0x0e
    5ee4:	81 81       	ldd	r24, Z+1	; 0x01
    5ee6:	01 c0       	rjmp	.+2      	; 0x5eea <vfprintf+0x31e>
    5ee8:	80 e3       	ldi	r24, 0x30	; 48
    5eea:	f1 e0       	ldi	r31, 0x01	; 1
    5eec:	8f 1a       	sub	r8, r31
    5eee:	91 08       	sbc	r9, r1
    5ef0:	2d 85       	ldd	r18, Y+13	; 0x0d
    5ef2:	3e 85       	ldd	r19, Y+14	; 0x0e
    5ef4:	2f 5f       	subi	r18, 0xFF	; 255
    5ef6:	3f 4f       	sbci	r19, 0xFF	; 255
    5ef8:	3e 87       	std	Y+14, r19	; 0x0e
    5efa:	2d 87       	std	Y+13, r18	; 0x0d
    5efc:	80 16       	cp	r8, r16
    5efe:	91 06       	cpc	r9, r17
    5f00:	24 f0       	brlt	.+8      	; 0x5f0a <vfprintf+0x33e>
    5f02:	b7 01       	movw	r22, r14
    5f04:	90 e0       	ldi	r25, 0x00	; 0
    5f06:	bd d4       	rcall	.+2426   	; 0x6882 <fputc>
    5f08:	db cf       	rjmp	.-74     	; 0x5ec0 <vfprintf+0x2f4>
    5f0a:	c8 14       	cp	r12, r8
    5f0c:	d9 04       	cpc	r13, r9
    5f0e:	41 f4       	brne	.+16     	; 0x5f20 <vfprintf+0x354>
    5f10:	9a 81       	ldd	r25, Y+2	; 0x02
    5f12:	96 33       	cpi	r25, 0x36	; 54
    5f14:	20 f4       	brcc	.+8      	; 0x5f1e <vfprintf+0x352>
    5f16:	95 33       	cpi	r25, 0x35	; 53
    5f18:	19 f4       	brne	.+6      	; 0x5f20 <vfprintf+0x354>
    5f1a:	3c 85       	ldd	r19, Y+12	; 0x0c
    5f1c:	34 ff       	sbrs	r19, 4
    5f1e:	81 e3       	ldi	r24, 0x31	; 49
    5f20:	b7 01       	movw	r22, r14
    5f22:	90 e0       	ldi	r25, 0x00	; 0
    5f24:	48 c0       	rjmp	.+144    	; 0x5fb6 <vfprintf+0x3ea>
    5f26:	8a 81       	ldd	r24, Y+2	; 0x02
    5f28:	81 33       	cpi	r24, 0x31	; 49
    5f2a:	19 f0       	breq	.+6      	; 0x5f32 <vfprintf+0x366>
    5f2c:	9c 85       	ldd	r25, Y+12	; 0x0c
    5f2e:	9f 7e       	andi	r25, 0xEF	; 239
    5f30:	9c 87       	std	Y+12, r25	; 0x0c
    5f32:	b7 01       	movw	r22, r14
    5f34:	90 e0       	ldi	r25, 0x00	; 0
    5f36:	a5 d4       	rcall	.+2378   	; 0x6882 <fputc>
    5f38:	11 11       	cpse	r17, r1
    5f3a:	05 c0       	rjmp	.+10     	; 0x5f46 <vfprintf+0x37a>
    5f3c:	94 fc       	sbrc	r9, 4
    5f3e:	16 c0       	rjmp	.+44     	; 0x5f6c <vfprintf+0x3a0>
    5f40:	85 e6       	ldi	r24, 0x65	; 101
    5f42:	90 e0       	ldi	r25, 0x00	; 0
    5f44:	15 c0       	rjmp	.+42     	; 0x5f70 <vfprintf+0x3a4>
    5f46:	b7 01       	movw	r22, r14
    5f48:	8e e2       	ldi	r24, 0x2E	; 46
    5f4a:	90 e0       	ldi	r25, 0x00	; 0
    5f4c:	9a d4       	rcall	.+2356   	; 0x6882 <fputc>
    5f4e:	1e 5f       	subi	r17, 0xFE	; 254
    5f50:	82 e0       	ldi	r24, 0x02	; 2
    5f52:	01 e0       	ldi	r16, 0x01	; 1
    5f54:	08 0f       	add	r16, r24
    5f56:	f3 01       	movw	r30, r6
    5f58:	e8 0f       	add	r30, r24
    5f5a:	f1 1d       	adc	r31, r1
    5f5c:	80 81       	ld	r24, Z
    5f5e:	b7 01       	movw	r22, r14
    5f60:	90 e0       	ldi	r25, 0x00	; 0
    5f62:	8f d4       	rcall	.+2334   	; 0x6882 <fputc>
    5f64:	80 2f       	mov	r24, r16
    5f66:	01 13       	cpse	r16, r17
    5f68:	f4 cf       	rjmp	.-24     	; 0x5f52 <vfprintf+0x386>
    5f6a:	e8 cf       	rjmp	.-48     	; 0x5f3c <vfprintf+0x370>
    5f6c:	85 e4       	ldi	r24, 0x45	; 69
    5f6e:	90 e0       	ldi	r25, 0x00	; 0
    5f70:	b7 01       	movw	r22, r14
    5f72:	87 d4       	rcall	.+2318   	; 0x6882 <fputc>
    5f74:	d7 fc       	sbrc	r13, 7
    5f76:	06 c0       	rjmp	.+12     	; 0x5f84 <vfprintf+0x3b8>
    5f78:	c1 14       	cp	r12, r1
    5f7a:	d1 04       	cpc	r13, r1
    5f7c:	41 f4       	brne	.+16     	; 0x5f8e <vfprintf+0x3c2>
    5f7e:	ec 85       	ldd	r30, Y+12	; 0x0c
    5f80:	e4 ff       	sbrs	r30, 4
    5f82:	05 c0       	rjmp	.+10     	; 0x5f8e <vfprintf+0x3c2>
    5f84:	d1 94       	neg	r13
    5f86:	c1 94       	neg	r12
    5f88:	d1 08       	sbc	r13, r1
    5f8a:	8d e2       	ldi	r24, 0x2D	; 45
    5f8c:	01 c0       	rjmp	.+2      	; 0x5f90 <vfprintf+0x3c4>
    5f8e:	8b e2       	ldi	r24, 0x2B	; 43
    5f90:	b7 01       	movw	r22, r14
    5f92:	90 e0       	ldi	r25, 0x00	; 0
    5f94:	76 d4       	rcall	.+2284   	; 0x6882 <fputc>
    5f96:	80 e3       	ldi	r24, 0x30	; 48
    5f98:	2a e0       	ldi	r18, 0x0A	; 10
    5f9a:	c2 16       	cp	r12, r18
    5f9c:	d1 04       	cpc	r13, r1
    5f9e:	2c f0       	brlt	.+10     	; 0x5faa <vfprintf+0x3de>
    5fa0:	8f 5f       	subi	r24, 0xFF	; 255
    5fa2:	fa e0       	ldi	r31, 0x0A	; 10
    5fa4:	cf 1a       	sub	r12, r31
    5fa6:	d1 08       	sbc	r13, r1
    5fa8:	f7 cf       	rjmp	.-18     	; 0x5f98 <vfprintf+0x3cc>
    5faa:	b7 01       	movw	r22, r14
    5fac:	90 e0       	ldi	r25, 0x00	; 0
    5fae:	69 d4       	rcall	.+2258   	; 0x6882 <fputc>
    5fb0:	b7 01       	movw	r22, r14
    5fb2:	c6 01       	movw	r24, r12
    5fb4:	c0 96       	adiw	r24, 0x30	; 48
    5fb6:	65 d4       	rcall	.+2250   	; 0x6882 <fputc>
    5fb8:	49 c1       	rjmp	.+658    	; 0x624c <vfprintf+0x680>
    5fba:	83 36       	cpi	r24, 0x63	; 99
    5fbc:	31 f0       	breq	.+12     	; 0x5fca <vfprintf+0x3fe>
    5fbe:	83 37       	cpi	r24, 0x73	; 115
    5fc0:	79 f0       	breq	.+30     	; 0x5fe0 <vfprintf+0x414>
    5fc2:	83 35       	cpi	r24, 0x53	; 83
    5fc4:	09 f0       	breq	.+2      	; 0x5fc8 <vfprintf+0x3fc>
    5fc6:	52 c0       	rjmp	.+164    	; 0x606c <vfprintf+0x4a0>
    5fc8:	1f c0       	rjmp	.+62     	; 0x6008 <vfprintf+0x43c>
    5fca:	56 01       	movw	r10, r12
    5fcc:	32 e0       	ldi	r19, 0x02	; 2
    5fce:	a3 0e       	add	r10, r19
    5fd0:	b1 1c       	adc	r11, r1
    5fd2:	f6 01       	movw	r30, r12
    5fd4:	80 81       	ld	r24, Z
    5fd6:	89 83       	std	Y+1, r24	; 0x01
    5fd8:	01 e0       	ldi	r16, 0x01	; 1
    5fda:	10 e0       	ldi	r17, 0x00	; 0
    5fdc:	63 01       	movw	r12, r6
    5fde:	11 c0       	rjmp	.+34     	; 0x6002 <vfprintf+0x436>
    5fe0:	56 01       	movw	r10, r12
    5fe2:	f2 e0       	ldi	r31, 0x02	; 2
    5fe4:	af 0e       	add	r10, r31
    5fe6:	b1 1c       	adc	r11, r1
    5fe8:	f6 01       	movw	r30, r12
    5fea:	c0 80       	ld	r12, Z
    5fec:	d1 80       	ldd	r13, Z+1	; 0x01
    5fee:	96 fe       	sbrs	r9, 6
    5ff0:	03 c0       	rjmp	.+6      	; 0x5ff8 <vfprintf+0x42c>
    5ff2:	61 2f       	mov	r22, r17
    5ff4:	70 e0       	ldi	r23, 0x00	; 0
    5ff6:	02 c0       	rjmp	.+4      	; 0x5ffc <vfprintf+0x430>
    5ff8:	6f ef       	ldi	r22, 0xFF	; 255
    5ffa:	7f ef       	ldi	r23, 0xFF	; 255
    5ffc:	c6 01       	movw	r24, r12
    5ffe:	36 d4       	rcall	.+2156   	; 0x686c <strnlen>
    6000:	8c 01       	movw	r16, r24
    6002:	f9 2d       	mov	r31, r9
    6004:	ff 77       	andi	r31, 0x7F	; 127
    6006:	13 c0       	rjmp	.+38     	; 0x602e <vfprintf+0x462>
    6008:	56 01       	movw	r10, r12
    600a:	22 e0       	ldi	r18, 0x02	; 2
    600c:	a2 0e       	add	r10, r18
    600e:	b1 1c       	adc	r11, r1
    6010:	f6 01       	movw	r30, r12
    6012:	c0 80       	ld	r12, Z
    6014:	d1 80       	ldd	r13, Z+1	; 0x01
    6016:	96 fe       	sbrs	r9, 6
    6018:	03 c0       	rjmp	.+6      	; 0x6020 <vfprintf+0x454>
    601a:	61 2f       	mov	r22, r17
    601c:	70 e0       	ldi	r23, 0x00	; 0
    601e:	02 c0       	rjmp	.+4      	; 0x6024 <vfprintf+0x458>
    6020:	6f ef       	ldi	r22, 0xFF	; 255
    6022:	7f ef       	ldi	r23, 0xFF	; 255
    6024:	c6 01       	movw	r24, r12
    6026:	b8 d3       	rcall	.+1904   	; 0x6798 <strnlen_P>
    6028:	8c 01       	movw	r16, r24
    602a:	f9 2d       	mov	r31, r9
    602c:	f0 68       	ori	r31, 0x80	; 128
    602e:	9f 2e       	mov	r9, r31
    6030:	f3 fd       	sbrc	r31, 3
    6032:	18 c0       	rjmp	.+48     	; 0x6064 <vfprintf+0x498>
    6034:	85 2d       	mov	r24, r5
    6036:	90 e0       	ldi	r25, 0x00	; 0
    6038:	08 17       	cp	r16, r24
    603a:	19 07       	cpc	r17, r25
    603c:	98 f4       	brcc	.+38     	; 0x6064 <vfprintf+0x498>
    603e:	b7 01       	movw	r22, r14
    6040:	80 e2       	ldi	r24, 0x20	; 32
    6042:	90 e0       	ldi	r25, 0x00	; 0
    6044:	1e d4       	rcall	.+2108   	; 0x6882 <fputc>
    6046:	5a 94       	dec	r5
    6048:	f5 cf       	rjmp	.-22     	; 0x6034 <vfprintf+0x468>
    604a:	f6 01       	movw	r30, r12
    604c:	97 fc       	sbrc	r9, 7
    604e:	85 91       	lpm	r24, Z+
    6050:	97 fe       	sbrs	r9, 7
    6052:	81 91       	ld	r24, Z+
    6054:	6f 01       	movw	r12, r30
    6056:	b7 01       	movw	r22, r14
    6058:	90 e0       	ldi	r25, 0x00	; 0
    605a:	13 d4       	rcall	.+2086   	; 0x6882 <fputc>
    605c:	51 10       	cpse	r5, r1
    605e:	5a 94       	dec	r5
    6060:	01 50       	subi	r16, 0x01	; 1
    6062:	11 09       	sbc	r17, r1
    6064:	01 15       	cp	r16, r1
    6066:	11 05       	cpc	r17, r1
    6068:	81 f7       	brne	.-32     	; 0x604a <vfprintf+0x47e>
    606a:	f0 c0       	rjmp	.+480    	; 0x624c <vfprintf+0x680>
    606c:	84 36       	cpi	r24, 0x64	; 100
    606e:	11 f0       	breq	.+4      	; 0x6074 <vfprintf+0x4a8>
    6070:	89 36       	cpi	r24, 0x69	; 105
    6072:	59 f5       	brne	.+86     	; 0x60ca <vfprintf+0x4fe>
    6074:	56 01       	movw	r10, r12
    6076:	97 fe       	sbrs	r9, 7
    6078:	09 c0       	rjmp	.+18     	; 0x608c <vfprintf+0x4c0>
    607a:	24 e0       	ldi	r18, 0x04	; 4
    607c:	a2 0e       	add	r10, r18
    607e:	b1 1c       	adc	r11, r1
    6080:	f6 01       	movw	r30, r12
    6082:	60 81       	ld	r22, Z
    6084:	71 81       	ldd	r23, Z+1	; 0x01
    6086:	82 81       	ldd	r24, Z+2	; 0x02
    6088:	93 81       	ldd	r25, Z+3	; 0x03
    608a:	0a c0       	rjmp	.+20     	; 0x60a0 <vfprintf+0x4d4>
    608c:	f2 e0       	ldi	r31, 0x02	; 2
    608e:	af 0e       	add	r10, r31
    6090:	b1 1c       	adc	r11, r1
    6092:	f6 01       	movw	r30, r12
    6094:	60 81       	ld	r22, Z
    6096:	71 81       	ldd	r23, Z+1	; 0x01
    6098:	07 2e       	mov	r0, r23
    609a:	00 0c       	add	r0, r0
    609c:	88 0b       	sbc	r24, r24
    609e:	99 0b       	sbc	r25, r25
    60a0:	f9 2d       	mov	r31, r9
    60a2:	ff 76       	andi	r31, 0x6F	; 111
    60a4:	9f 2e       	mov	r9, r31
    60a6:	97 ff       	sbrs	r25, 7
    60a8:	09 c0       	rjmp	.+18     	; 0x60bc <vfprintf+0x4f0>
    60aa:	90 95       	com	r25
    60ac:	80 95       	com	r24
    60ae:	70 95       	com	r23
    60b0:	61 95       	neg	r22
    60b2:	7f 4f       	sbci	r23, 0xFF	; 255
    60b4:	8f 4f       	sbci	r24, 0xFF	; 255
    60b6:	9f 4f       	sbci	r25, 0xFF	; 255
    60b8:	f0 68       	ori	r31, 0x80	; 128
    60ba:	9f 2e       	mov	r9, r31
    60bc:	2a e0       	ldi	r18, 0x0A	; 10
    60be:	30 e0       	ldi	r19, 0x00	; 0
    60c0:	a3 01       	movw	r20, r6
    60c2:	8c d4       	rcall	.+2328   	; 0x69dc <__ultoa_invert>
    60c4:	c8 2e       	mov	r12, r24
    60c6:	c6 18       	sub	r12, r6
    60c8:	3e c0       	rjmp	.+124    	; 0x6146 <vfprintf+0x57a>
    60ca:	09 2d       	mov	r16, r9
    60cc:	85 37       	cpi	r24, 0x75	; 117
    60ce:	21 f4       	brne	.+8      	; 0x60d8 <vfprintf+0x50c>
    60d0:	0f 7e       	andi	r16, 0xEF	; 239
    60d2:	2a e0       	ldi	r18, 0x0A	; 10
    60d4:	30 e0       	ldi	r19, 0x00	; 0
    60d6:	1d c0       	rjmp	.+58     	; 0x6112 <vfprintf+0x546>
    60d8:	09 7f       	andi	r16, 0xF9	; 249
    60da:	8f 36       	cpi	r24, 0x6F	; 111
    60dc:	91 f0       	breq	.+36     	; 0x6102 <vfprintf+0x536>
    60de:	18 f4       	brcc	.+6      	; 0x60e6 <vfprintf+0x51a>
    60e0:	88 35       	cpi	r24, 0x58	; 88
    60e2:	59 f0       	breq	.+22     	; 0x60fa <vfprintf+0x52e>
    60e4:	bc c0       	rjmp	.+376    	; 0x625e <vfprintf+0x692>
    60e6:	80 37       	cpi	r24, 0x70	; 112
    60e8:	19 f0       	breq	.+6      	; 0x60f0 <vfprintf+0x524>
    60ea:	88 37       	cpi	r24, 0x78	; 120
    60ec:	11 f0       	breq	.+4      	; 0x60f2 <vfprintf+0x526>
    60ee:	b7 c0       	rjmp	.+366    	; 0x625e <vfprintf+0x692>
    60f0:	00 61       	ori	r16, 0x10	; 16
    60f2:	04 ff       	sbrs	r16, 4
    60f4:	09 c0       	rjmp	.+18     	; 0x6108 <vfprintf+0x53c>
    60f6:	04 60       	ori	r16, 0x04	; 4
    60f8:	07 c0       	rjmp	.+14     	; 0x6108 <vfprintf+0x53c>
    60fa:	94 fe       	sbrs	r9, 4
    60fc:	08 c0       	rjmp	.+16     	; 0x610e <vfprintf+0x542>
    60fe:	06 60       	ori	r16, 0x06	; 6
    6100:	06 c0       	rjmp	.+12     	; 0x610e <vfprintf+0x542>
    6102:	28 e0       	ldi	r18, 0x08	; 8
    6104:	30 e0       	ldi	r19, 0x00	; 0
    6106:	05 c0       	rjmp	.+10     	; 0x6112 <vfprintf+0x546>
    6108:	20 e1       	ldi	r18, 0x10	; 16
    610a:	30 e0       	ldi	r19, 0x00	; 0
    610c:	02 c0       	rjmp	.+4      	; 0x6112 <vfprintf+0x546>
    610e:	20 e1       	ldi	r18, 0x10	; 16
    6110:	32 e0       	ldi	r19, 0x02	; 2
    6112:	56 01       	movw	r10, r12
    6114:	07 ff       	sbrs	r16, 7
    6116:	09 c0       	rjmp	.+18     	; 0x612a <vfprintf+0x55e>
    6118:	84 e0       	ldi	r24, 0x04	; 4
    611a:	a8 0e       	add	r10, r24
    611c:	b1 1c       	adc	r11, r1
    611e:	f6 01       	movw	r30, r12
    6120:	60 81       	ld	r22, Z
    6122:	71 81       	ldd	r23, Z+1	; 0x01
    6124:	82 81       	ldd	r24, Z+2	; 0x02
    6126:	93 81       	ldd	r25, Z+3	; 0x03
    6128:	08 c0       	rjmp	.+16     	; 0x613a <vfprintf+0x56e>
    612a:	f2 e0       	ldi	r31, 0x02	; 2
    612c:	af 0e       	add	r10, r31
    612e:	b1 1c       	adc	r11, r1
    6130:	f6 01       	movw	r30, r12
    6132:	60 81       	ld	r22, Z
    6134:	71 81       	ldd	r23, Z+1	; 0x01
    6136:	80 e0       	ldi	r24, 0x00	; 0
    6138:	90 e0       	ldi	r25, 0x00	; 0
    613a:	a3 01       	movw	r20, r6
    613c:	4f d4       	rcall	.+2206   	; 0x69dc <__ultoa_invert>
    613e:	c8 2e       	mov	r12, r24
    6140:	c6 18       	sub	r12, r6
    6142:	0f 77       	andi	r16, 0x7F	; 127
    6144:	90 2e       	mov	r9, r16
    6146:	96 fe       	sbrs	r9, 6
    6148:	0b c0       	rjmp	.+22     	; 0x6160 <vfprintf+0x594>
    614a:	09 2d       	mov	r16, r9
    614c:	0e 7f       	andi	r16, 0xFE	; 254
    614e:	c1 16       	cp	r12, r17
    6150:	50 f4       	brcc	.+20     	; 0x6166 <vfprintf+0x59a>
    6152:	94 fe       	sbrs	r9, 4
    6154:	0a c0       	rjmp	.+20     	; 0x616a <vfprintf+0x59e>
    6156:	92 fc       	sbrc	r9, 2
    6158:	08 c0       	rjmp	.+16     	; 0x616a <vfprintf+0x59e>
    615a:	09 2d       	mov	r16, r9
    615c:	0e 7e       	andi	r16, 0xEE	; 238
    615e:	05 c0       	rjmp	.+10     	; 0x616a <vfprintf+0x59e>
    6160:	dc 2c       	mov	r13, r12
    6162:	09 2d       	mov	r16, r9
    6164:	03 c0       	rjmp	.+6      	; 0x616c <vfprintf+0x5a0>
    6166:	dc 2c       	mov	r13, r12
    6168:	01 c0       	rjmp	.+2      	; 0x616c <vfprintf+0x5a0>
    616a:	d1 2e       	mov	r13, r17
    616c:	04 ff       	sbrs	r16, 4
    616e:	0d c0       	rjmp	.+26     	; 0x618a <vfprintf+0x5be>
    6170:	fe 01       	movw	r30, r28
    6172:	ec 0d       	add	r30, r12
    6174:	f1 1d       	adc	r31, r1
    6176:	80 81       	ld	r24, Z
    6178:	80 33       	cpi	r24, 0x30	; 48
    617a:	11 f4       	brne	.+4      	; 0x6180 <vfprintf+0x5b4>
    617c:	09 7e       	andi	r16, 0xE9	; 233
    617e:	09 c0       	rjmp	.+18     	; 0x6192 <vfprintf+0x5c6>
    6180:	02 ff       	sbrs	r16, 2
    6182:	06 c0       	rjmp	.+12     	; 0x6190 <vfprintf+0x5c4>
    6184:	d3 94       	inc	r13
    6186:	d3 94       	inc	r13
    6188:	04 c0       	rjmp	.+8      	; 0x6192 <vfprintf+0x5c6>
    618a:	80 2f       	mov	r24, r16
    618c:	86 78       	andi	r24, 0x86	; 134
    618e:	09 f0       	breq	.+2      	; 0x6192 <vfprintf+0x5c6>
    6190:	d3 94       	inc	r13
    6192:	03 fd       	sbrc	r16, 3
    6194:	10 c0       	rjmp	.+32     	; 0x61b6 <vfprintf+0x5ea>
    6196:	00 ff       	sbrs	r16, 0
    6198:	06 c0       	rjmp	.+12     	; 0x61a6 <vfprintf+0x5da>
    619a:	1c 2d       	mov	r17, r12
    619c:	d5 14       	cp	r13, r5
    619e:	78 f4       	brcc	.+30     	; 0x61be <vfprintf+0x5f2>
    61a0:	15 0d       	add	r17, r5
    61a2:	1d 19       	sub	r17, r13
    61a4:	0c c0       	rjmp	.+24     	; 0x61be <vfprintf+0x5f2>
    61a6:	d5 14       	cp	r13, r5
    61a8:	50 f4       	brcc	.+20     	; 0x61be <vfprintf+0x5f2>
    61aa:	b7 01       	movw	r22, r14
    61ac:	80 e2       	ldi	r24, 0x20	; 32
    61ae:	90 e0       	ldi	r25, 0x00	; 0
    61b0:	68 d3       	rcall	.+1744   	; 0x6882 <fputc>
    61b2:	d3 94       	inc	r13
    61b4:	f8 cf       	rjmp	.-16     	; 0x61a6 <vfprintf+0x5da>
    61b6:	d5 14       	cp	r13, r5
    61b8:	10 f4       	brcc	.+4      	; 0x61be <vfprintf+0x5f2>
    61ba:	5d 18       	sub	r5, r13
    61bc:	01 c0       	rjmp	.+2      	; 0x61c0 <vfprintf+0x5f4>
    61be:	51 2c       	mov	r5, r1
    61c0:	04 ff       	sbrs	r16, 4
    61c2:	0f c0       	rjmp	.+30     	; 0x61e2 <vfprintf+0x616>
    61c4:	b7 01       	movw	r22, r14
    61c6:	80 e3       	ldi	r24, 0x30	; 48
    61c8:	90 e0       	ldi	r25, 0x00	; 0
    61ca:	5b d3       	rcall	.+1718   	; 0x6882 <fputc>
    61cc:	02 ff       	sbrs	r16, 2
    61ce:	16 c0       	rjmp	.+44     	; 0x61fc <vfprintf+0x630>
    61d0:	01 fd       	sbrc	r16, 1
    61d2:	03 c0       	rjmp	.+6      	; 0x61da <vfprintf+0x60e>
    61d4:	88 e7       	ldi	r24, 0x78	; 120
    61d6:	90 e0       	ldi	r25, 0x00	; 0
    61d8:	02 c0       	rjmp	.+4      	; 0x61de <vfprintf+0x612>
    61da:	88 e5       	ldi	r24, 0x58	; 88
    61dc:	90 e0       	ldi	r25, 0x00	; 0
    61de:	b7 01       	movw	r22, r14
    61e0:	0c c0       	rjmp	.+24     	; 0x61fa <vfprintf+0x62e>
    61e2:	80 2f       	mov	r24, r16
    61e4:	86 78       	andi	r24, 0x86	; 134
    61e6:	51 f0       	breq	.+20     	; 0x61fc <vfprintf+0x630>
    61e8:	01 ff       	sbrs	r16, 1
    61ea:	02 c0       	rjmp	.+4      	; 0x61f0 <vfprintf+0x624>
    61ec:	8b e2       	ldi	r24, 0x2B	; 43
    61ee:	01 c0       	rjmp	.+2      	; 0x61f2 <vfprintf+0x626>
    61f0:	80 e2       	ldi	r24, 0x20	; 32
    61f2:	07 fd       	sbrc	r16, 7
    61f4:	8d e2       	ldi	r24, 0x2D	; 45
    61f6:	b7 01       	movw	r22, r14
    61f8:	90 e0       	ldi	r25, 0x00	; 0
    61fa:	43 d3       	rcall	.+1670   	; 0x6882 <fputc>
    61fc:	c1 16       	cp	r12, r17
    61fe:	30 f4       	brcc	.+12     	; 0x620c <vfprintf+0x640>
    6200:	b7 01       	movw	r22, r14
    6202:	80 e3       	ldi	r24, 0x30	; 48
    6204:	90 e0       	ldi	r25, 0x00	; 0
    6206:	3d d3       	rcall	.+1658   	; 0x6882 <fputc>
    6208:	11 50       	subi	r17, 0x01	; 1
    620a:	f8 cf       	rjmp	.-16     	; 0x61fc <vfprintf+0x630>
    620c:	ca 94       	dec	r12
    620e:	f3 01       	movw	r30, r6
    6210:	ec 0d       	add	r30, r12
    6212:	f1 1d       	adc	r31, r1
    6214:	80 81       	ld	r24, Z
    6216:	b7 01       	movw	r22, r14
    6218:	90 e0       	ldi	r25, 0x00	; 0
    621a:	33 d3       	rcall	.+1638   	; 0x6882 <fputc>
    621c:	c1 10       	cpse	r12, r1
    621e:	f6 cf       	rjmp	.-20     	; 0x620c <vfprintf+0x640>
    6220:	15 c0       	rjmp	.+42     	; 0x624c <vfprintf+0x680>
    6222:	f4 e0       	ldi	r31, 0x04	; 4
    6224:	f5 15       	cp	r31, r5
    6226:	50 f5       	brcc	.+84     	; 0x627c <vfprintf+0x6b0>
    6228:	84 e0       	ldi	r24, 0x04	; 4
    622a:	58 1a       	sub	r5, r24
    622c:	93 fe       	sbrs	r9, 3
    622e:	1e c0       	rjmp	.+60     	; 0x626c <vfprintf+0x6a0>
    6230:	01 11       	cpse	r16, r1
    6232:	25 c0       	rjmp	.+74     	; 0x627e <vfprintf+0x6b2>
    6234:	2c 85       	ldd	r18, Y+12	; 0x0c
    6236:	23 ff       	sbrs	r18, 3
    6238:	27 c0       	rjmp	.+78     	; 0x6288 <vfprintf+0x6bc>
    623a:	0a e9       	ldi	r16, 0x9A	; 154
    623c:	11 e0       	ldi	r17, 0x01	; 1
    623e:	39 2d       	mov	r19, r9
    6240:	30 71       	andi	r19, 0x10	; 16
    6242:	93 2e       	mov	r9, r19
    6244:	f8 01       	movw	r30, r16
    6246:	84 91       	lpm	r24, Z
    6248:	81 11       	cpse	r24, r1
    624a:	21 c0       	rjmp	.+66     	; 0x628e <vfprintf+0x6c2>
    624c:	55 20       	and	r5, r5
    624e:	09 f4       	brne	.+2      	; 0x6252 <vfprintf+0x686>
    6250:	fc cc       	rjmp	.-1544   	; 0x5c4a <vfprintf+0x7e>
    6252:	b7 01       	movw	r22, r14
    6254:	80 e2       	ldi	r24, 0x20	; 32
    6256:	90 e0       	ldi	r25, 0x00	; 0
    6258:	14 d3       	rcall	.+1576   	; 0x6882 <fputc>
    625a:	5a 94       	dec	r5
    625c:	f7 cf       	rjmp	.-18     	; 0x624c <vfprintf+0x680>
    625e:	f7 01       	movw	r30, r14
    6260:	86 81       	ldd	r24, Z+6	; 0x06
    6262:	97 81       	ldd	r25, Z+7	; 0x07
    6264:	23 c0       	rjmp	.+70     	; 0x62ac <vfprintf+0x6e0>
    6266:	8f ef       	ldi	r24, 0xFF	; 255
    6268:	9f ef       	ldi	r25, 0xFF	; 255
    626a:	20 c0       	rjmp	.+64     	; 0x62ac <vfprintf+0x6e0>
    626c:	b7 01       	movw	r22, r14
    626e:	80 e2       	ldi	r24, 0x20	; 32
    6270:	90 e0       	ldi	r25, 0x00	; 0
    6272:	07 d3       	rcall	.+1550   	; 0x6882 <fputc>
    6274:	5a 94       	dec	r5
    6276:	51 10       	cpse	r5, r1
    6278:	f9 cf       	rjmp	.-14     	; 0x626c <vfprintf+0x6a0>
    627a:	da cf       	rjmp	.-76     	; 0x6230 <vfprintf+0x664>
    627c:	51 2c       	mov	r5, r1
    627e:	b7 01       	movw	r22, r14
    6280:	80 2f       	mov	r24, r16
    6282:	90 e0       	ldi	r25, 0x00	; 0
    6284:	fe d2       	rcall	.+1532   	; 0x6882 <fputc>
    6286:	d6 cf       	rjmp	.-84     	; 0x6234 <vfprintf+0x668>
    6288:	0e e9       	ldi	r16, 0x9E	; 158
    628a:	11 e0       	ldi	r17, 0x01	; 1
    628c:	d8 cf       	rjmp	.-80     	; 0x623e <vfprintf+0x672>
    628e:	91 10       	cpse	r9, r1
    6290:	80 52       	subi	r24, 0x20	; 32
    6292:	b7 01       	movw	r22, r14
    6294:	90 e0       	ldi	r25, 0x00	; 0
    6296:	f5 d2       	rcall	.+1514   	; 0x6882 <fputc>
    6298:	0f 5f       	subi	r16, 0xFF	; 255
    629a:	1f 4f       	sbci	r17, 0xFF	; 255
    629c:	d3 cf       	rjmp	.-90     	; 0x6244 <vfprintf+0x678>
    629e:	23 e0       	ldi	r18, 0x03	; 3
    62a0:	25 15       	cp	r18, r5
    62a2:	10 f4       	brcc	.+4      	; 0x62a8 <vfprintf+0x6dc>
    62a4:	83 e0       	ldi	r24, 0x03	; 3
    62a6:	c1 cf       	rjmp	.-126    	; 0x622a <vfprintf+0x65e>
    62a8:	51 2c       	mov	r5, r1
    62aa:	c4 cf       	rjmp	.-120    	; 0x6234 <vfprintf+0x668>
    62ac:	60 96       	adiw	r28, 0x10	; 16
    62ae:	0f b6       	in	r0, 0x3f	; 63
    62b0:	f8 94       	cli
    62b2:	de bf       	out	0x3e, r29	; 62
    62b4:	0f be       	out	0x3f, r0	; 63
    62b6:	cd bf       	out	0x3d, r28	; 61
    62b8:	df 91       	pop	r29
    62ba:	cf 91       	pop	r28
    62bc:	1f 91       	pop	r17
    62be:	0f 91       	pop	r16
    62c0:	ff 90       	pop	r15
    62c2:	ef 90       	pop	r14
    62c4:	df 90       	pop	r13
    62c6:	cf 90       	pop	r12
    62c8:	bf 90       	pop	r11
    62ca:	af 90       	pop	r10
    62cc:	9f 90       	pop	r9
    62ce:	8f 90       	pop	r8
    62d0:	7f 90       	pop	r7
    62d2:	6f 90       	pop	r6
    62d4:	5f 90       	pop	r5
    62d6:	4f 90       	pop	r4
    62d8:	3f 90       	pop	r3
    62da:	2f 90       	pop	r2
    62dc:	08 95       	ret

000062de <__divmodhi4>:
    62de:	97 fb       	bst	r25, 7
    62e0:	07 2e       	mov	r0, r23
    62e2:	16 f4       	brtc	.+4      	; 0x62e8 <__divmodhi4+0xa>
    62e4:	00 94       	com	r0
    62e6:	06 d0       	rcall	.+12     	; 0x62f4 <__divmodhi4_neg1>
    62e8:	77 fd       	sbrc	r23, 7
    62ea:	08 d0       	rcall	.+16     	; 0x62fc <__divmodhi4_neg2>
    62ec:	44 d0       	rcall	.+136    	; 0x6376 <__udivmodhi4>
    62ee:	07 fc       	sbrc	r0, 7
    62f0:	05 d0       	rcall	.+10     	; 0x62fc <__divmodhi4_neg2>
    62f2:	3e f4       	brtc	.+14     	; 0x6302 <__divmodhi4_exit>

000062f4 <__divmodhi4_neg1>:
    62f4:	90 95       	com	r25
    62f6:	81 95       	neg	r24
    62f8:	9f 4f       	sbci	r25, 0xFF	; 255
    62fa:	08 95       	ret

000062fc <__divmodhi4_neg2>:
    62fc:	70 95       	com	r23
    62fe:	61 95       	neg	r22
    6300:	7f 4f       	sbci	r23, 0xFF	; 255

00006302 <__divmodhi4_exit>:
    6302:	08 95       	ret

00006304 <__udivmodsi4>:
    6304:	a1 e2       	ldi	r26, 0x21	; 33
    6306:	1a 2e       	mov	r1, r26
    6308:	aa 1b       	sub	r26, r26
    630a:	bb 1b       	sub	r27, r27
    630c:	fd 01       	movw	r30, r26
    630e:	0d c0       	rjmp	.+26     	; 0x632a <__udivmodsi4_ep>

00006310 <__udivmodsi4_loop>:
    6310:	aa 1f       	adc	r26, r26
    6312:	bb 1f       	adc	r27, r27
    6314:	ee 1f       	adc	r30, r30
    6316:	ff 1f       	adc	r31, r31
    6318:	a2 17       	cp	r26, r18
    631a:	b3 07       	cpc	r27, r19
    631c:	e4 07       	cpc	r30, r20
    631e:	f5 07       	cpc	r31, r21
    6320:	20 f0       	brcs	.+8      	; 0x632a <__udivmodsi4_ep>
    6322:	a2 1b       	sub	r26, r18
    6324:	b3 0b       	sbc	r27, r19
    6326:	e4 0b       	sbc	r30, r20
    6328:	f5 0b       	sbc	r31, r21

0000632a <__udivmodsi4_ep>:
    632a:	66 1f       	adc	r22, r22
    632c:	77 1f       	adc	r23, r23
    632e:	88 1f       	adc	r24, r24
    6330:	99 1f       	adc	r25, r25
    6332:	1a 94       	dec	r1
    6334:	69 f7       	brne	.-38     	; 0x6310 <__udivmodsi4_loop>
    6336:	60 95       	com	r22
    6338:	70 95       	com	r23
    633a:	80 95       	com	r24
    633c:	90 95       	com	r25
    633e:	9b 01       	movw	r18, r22
    6340:	ac 01       	movw	r20, r24
    6342:	bd 01       	movw	r22, r26
    6344:	cf 01       	movw	r24, r30
    6346:	08 95       	ret

00006348 <__tablejump2__>:
    6348:	ee 0f       	add	r30, r30
    634a:	ff 1f       	adc	r31, r31
    634c:	88 1f       	adc	r24, r24
    634e:	8b bf       	out	0x3b, r24	; 59
    6350:	07 90       	elpm	r0, Z+
    6352:	f6 91       	elpm	r31, Z
    6354:	e0 2d       	mov	r30, r0
    6356:	19 94       	eijmp

00006358 <__umulhisi3>:
    6358:	a2 9f       	mul	r26, r18
    635a:	b0 01       	movw	r22, r0
    635c:	b3 9f       	mul	r27, r19
    635e:	c0 01       	movw	r24, r0
    6360:	a3 9f       	mul	r26, r19
    6362:	70 0d       	add	r23, r0
    6364:	81 1d       	adc	r24, r1
    6366:	11 24       	eor	r1, r1
    6368:	91 1d       	adc	r25, r1
    636a:	b2 9f       	mul	r27, r18
    636c:	70 0d       	add	r23, r0
    636e:	81 1d       	adc	r24, r1
    6370:	11 24       	eor	r1, r1
    6372:	91 1d       	adc	r25, r1
    6374:	08 95       	ret

00006376 <__udivmodhi4>:
    6376:	aa 1b       	sub	r26, r26
    6378:	bb 1b       	sub	r27, r27
    637a:	51 e1       	ldi	r21, 0x11	; 17
    637c:	07 c0       	rjmp	.+14     	; 0x638c <__udivmodhi4_ep>

0000637e <__udivmodhi4_loop>:
    637e:	aa 1f       	adc	r26, r26
    6380:	bb 1f       	adc	r27, r27
    6382:	a6 17       	cp	r26, r22
    6384:	b7 07       	cpc	r27, r23
    6386:	10 f0       	brcs	.+4      	; 0x638c <__udivmodhi4_ep>
    6388:	a6 1b       	sub	r26, r22
    638a:	b7 0b       	sbc	r27, r23

0000638c <__udivmodhi4_ep>:
    638c:	88 1f       	adc	r24, r24
    638e:	99 1f       	adc	r25, r25
    6390:	5a 95       	dec	r21
    6392:	a9 f7       	brne	.-22     	; 0x637e <__udivmodhi4_loop>
    6394:	80 95       	com	r24
    6396:	90 95       	com	r25
    6398:	bc 01       	movw	r22, r24
    639a:	cd 01       	movw	r24, r26
    639c:	08 95       	ret

0000639e <malloc>:
    639e:	0f 93       	push	r16
    63a0:	1f 93       	push	r17
    63a2:	cf 93       	push	r28
    63a4:	df 93       	push	r29
    63a6:	82 30       	cpi	r24, 0x02	; 2
    63a8:	91 05       	cpc	r25, r1
    63aa:	10 f4       	brcc	.+4      	; 0x63b0 <malloc+0x12>
    63ac:	82 e0       	ldi	r24, 0x02	; 2
    63ae:	90 e0       	ldi	r25, 0x00	; 0
    63b0:	e0 91 c6 17 	lds	r30, 0x17C6	; 0x8017c6 <__flp>
    63b4:	f0 91 c7 17 	lds	r31, 0x17C7	; 0x8017c7 <__flp+0x1>
    63b8:	20 e0       	ldi	r18, 0x00	; 0
    63ba:	30 e0       	ldi	r19, 0x00	; 0
    63bc:	a0 e0       	ldi	r26, 0x00	; 0
    63be:	b0 e0       	ldi	r27, 0x00	; 0
    63c0:	30 97       	sbiw	r30, 0x00	; 0
    63c2:	19 f1       	breq	.+70     	; 0x640a <malloc+0x6c>
    63c4:	40 81       	ld	r20, Z
    63c6:	51 81       	ldd	r21, Z+1	; 0x01
    63c8:	02 81       	ldd	r16, Z+2	; 0x02
    63ca:	13 81       	ldd	r17, Z+3	; 0x03
    63cc:	48 17       	cp	r20, r24
    63ce:	59 07       	cpc	r21, r25
    63d0:	c8 f0       	brcs	.+50     	; 0x6404 <malloc+0x66>
    63d2:	84 17       	cp	r24, r20
    63d4:	95 07       	cpc	r25, r21
    63d6:	69 f4       	brne	.+26     	; 0x63f2 <malloc+0x54>
    63d8:	10 97       	sbiw	r26, 0x00	; 0
    63da:	31 f0       	breq	.+12     	; 0x63e8 <malloc+0x4a>
    63dc:	12 96       	adiw	r26, 0x02	; 2
    63de:	0c 93       	st	X, r16
    63e0:	12 97       	sbiw	r26, 0x02	; 2
    63e2:	13 96       	adiw	r26, 0x03	; 3
    63e4:	1c 93       	st	X, r17
    63e6:	27 c0       	rjmp	.+78     	; 0x6436 <malloc+0x98>
    63e8:	00 93 c6 17 	sts	0x17C6, r16	; 0x8017c6 <__flp>
    63ec:	10 93 c7 17 	sts	0x17C7, r17	; 0x8017c7 <__flp+0x1>
    63f0:	22 c0       	rjmp	.+68     	; 0x6436 <malloc+0x98>
    63f2:	21 15       	cp	r18, r1
    63f4:	31 05       	cpc	r19, r1
    63f6:	19 f0       	breq	.+6      	; 0x63fe <malloc+0x60>
    63f8:	42 17       	cp	r20, r18
    63fa:	53 07       	cpc	r21, r19
    63fc:	18 f4       	brcc	.+6      	; 0x6404 <malloc+0x66>
    63fe:	9a 01       	movw	r18, r20
    6400:	bd 01       	movw	r22, r26
    6402:	ef 01       	movw	r28, r30
    6404:	df 01       	movw	r26, r30
    6406:	f8 01       	movw	r30, r16
    6408:	db cf       	rjmp	.-74     	; 0x63c0 <malloc+0x22>
    640a:	21 15       	cp	r18, r1
    640c:	31 05       	cpc	r19, r1
    640e:	f9 f0       	breq	.+62     	; 0x644e <malloc+0xb0>
    6410:	28 1b       	sub	r18, r24
    6412:	39 0b       	sbc	r19, r25
    6414:	24 30       	cpi	r18, 0x04	; 4
    6416:	31 05       	cpc	r19, r1
    6418:	80 f4       	brcc	.+32     	; 0x643a <malloc+0x9c>
    641a:	8a 81       	ldd	r24, Y+2	; 0x02
    641c:	9b 81       	ldd	r25, Y+3	; 0x03
    641e:	61 15       	cp	r22, r1
    6420:	71 05       	cpc	r23, r1
    6422:	21 f0       	breq	.+8      	; 0x642c <malloc+0x8e>
    6424:	fb 01       	movw	r30, r22
    6426:	93 83       	std	Z+3, r25	; 0x03
    6428:	82 83       	std	Z+2, r24	; 0x02
    642a:	04 c0       	rjmp	.+8      	; 0x6434 <malloc+0x96>
    642c:	90 93 c7 17 	sts	0x17C7, r25	; 0x8017c7 <__flp+0x1>
    6430:	80 93 c6 17 	sts	0x17C6, r24	; 0x8017c6 <__flp>
    6434:	fe 01       	movw	r30, r28
    6436:	32 96       	adiw	r30, 0x02	; 2
    6438:	44 c0       	rjmp	.+136    	; 0x64c2 <malloc+0x124>
    643a:	fe 01       	movw	r30, r28
    643c:	e2 0f       	add	r30, r18
    643e:	f3 1f       	adc	r31, r19
    6440:	81 93       	st	Z+, r24
    6442:	91 93       	st	Z+, r25
    6444:	22 50       	subi	r18, 0x02	; 2
    6446:	31 09       	sbc	r19, r1
    6448:	39 83       	std	Y+1, r19	; 0x01
    644a:	28 83       	st	Y, r18
    644c:	3a c0       	rjmp	.+116    	; 0x64c2 <malloc+0x124>
    644e:	20 91 c4 17 	lds	r18, 0x17C4	; 0x8017c4 <__brkval>
    6452:	30 91 c5 17 	lds	r19, 0x17C5	; 0x8017c5 <__brkval+0x1>
    6456:	23 2b       	or	r18, r19
    6458:	41 f4       	brne	.+16     	; 0x646a <malloc+0xcc>
    645a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    645e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6462:	30 93 c5 17 	sts	0x17C5, r19	; 0x8017c5 <__brkval+0x1>
    6466:	20 93 c4 17 	sts	0x17C4, r18	; 0x8017c4 <__brkval>
    646a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    646e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6472:	21 15       	cp	r18, r1
    6474:	31 05       	cpc	r19, r1
    6476:	41 f4       	brne	.+16     	; 0x6488 <malloc+0xea>
    6478:	2d b7       	in	r18, 0x3d	; 61
    647a:	3e b7       	in	r19, 0x3e	; 62
    647c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6480:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6484:	24 1b       	sub	r18, r20
    6486:	35 0b       	sbc	r19, r21
    6488:	e0 91 c4 17 	lds	r30, 0x17C4	; 0x8017c4 <__brkval>
    648c:	f0 91 c5 17 	lds	r31, 0x17C5	; 0x8017c5 <__brkval+0x1>
    6490:	e2 17       	cp	r30, r18
    6492:	f3 07       	cpc	r31, r19
    6494:	a0 f4       	brcc	.+40     	; 0x64be <malloc+0x120>
    6496:	2e 1b       	sub	r18, r30
    6498:	3f 0b       	sbc	r19, r31
    649a:	28 17       	cp	r18, r24
    649c:	39 07       	cpc	r19, r25
    649e:	78 f0       	brcs	.+30     	; 0x64be <malloc+0x120>
    64a0:	ac 01       	movw	r20, r24
    64a2:	4e 5f       	subi	r20, 0xFE	; 254
    64a4:	5f 4f       	sbci	r21, 0xFF	; 255
    64a6:	24 17       	cp	r18, r20
    64a8:	35 07       	cpc	r19, r21
    64aa:	48 f0       	brcs	.+18     	; 0x64be <malloc+0x120>
    64ac:	4e 0f       	add	r20, r30
    64ae:	5f 1f       	adc	r21, r31
    64b0:	50 93 c5 17 	sts	0x17C5, r21	; 0x8017c5 <__brkval+0x1>
    64b4:	40 93 c4 17 	sts	0x17C4, r20	; 0x8017c4 <__brkval>
    64b8:	81 93       	st	Z+, r24
    64ba:	91 93       	st	Z+, r25
    64bc:	02 c0       	rjmp	.+4      	; 0x64c2 <malloc+0x124>
    64be:	e0 e0       	ldi	r30, 0x00	; 0
    64c0:	f0 e0       	ldi	r31, 0x00	; 0
    64c2:	cf 01       	movw	r24, r30
    64c4:	df 91       	pop	r29
    64c6:	cf 91       	pop	r28
    64c8:	1f 91       	pop	r17
    64ca:	0f 91       	pop	r16
    64cc:	08 95       	ret

000064ce <free>:
    64ce:	cf 93       	push	r28
    64d0:	df 93       	push	r29
    64d2:	00 97       	sbiw	r24, 0x00	; 0
    64d4:	09 f4       	brne	.+2      	; 0x64d8 <free+0xa>
    64d6:	81 c0       	rjmp	.+258    	; 0x65da <free+0x10c>
    64d8:	fc 01       	movw	r30, r24
    64da:	32 97       	sbiw	r30, 0x02	; 2
    64dc:	13 82       	std	Z+3, r1	; 0x03
    64de:	12 82       	std	Z+2, r1	; 0x02
    64e0:	a0 91 c6 17 	lds	r26, 0x17C6	; 0x8017c6 <__flp>
    64e4:	b0 91 c7 17 	lds	r27, 0x17C7	; 0x8017c7 <__flp+0x1>
    64e8:	10 97       	sbiw	r26, 0x00	; 0
    64ea:	81 f4       	brne	.+32     	; 0x650c <free+0x3e>
    64ec:	20 81       	ld	r18, Z
    64ee:	31 81       	ldd	r19, Z+1	; 0x01
    64f0:	82 0f       	add	r24, r18
    64f2:	93 1f       	adc	r25, r19
    64f4:	20 91 c4 17 	lds	r18, 0x17C4	; 0x8017c4 <__brkval>
    64f8:	30 91 c5 17 	lds	r19, 0x17C5	; 0x8017c5 <__brkval+0x1>
    64fc:	28 17       	cp	r18, r24
    64fe:	39 07       	cpc	r19, r25
    6500:	51 f5       	brne	.+84     	; 0x6556 <free+0x88>
    6502:	f0 93 c5 17 	sts	0x17C5, r31	; 0x8017c5 <__brkval+0x1>
    6506:	e0 93 c4 17 	sts	0x17C4, r30	; 0x8017c4 <__brkval>
    650a:	67 c0       	rjmp	.+206    	; 0x65da <free+0x10c>
    650c:	ed 01       	movw	r28, r26
    650e:	20 e0       	ldi	r18, 0x00	; 0
    6510:	30 e0       	ldi	r19, 0x00	; 0
    6512:	ce 17       	cp	r28, r30
    6514:	df 07       	cpc	r29, r31
    6516:	40 f4       	brcc	.+16     	; 0x6528 <free+0x5a>
    6518:	4a 81       	ldd	r20, Y+2	; 0x02
    651a:	5b 81       	ldd	r21, Y+3	; 0x03
    651c:	9e 01       	movw	r18, r28
    651e:	41 15       	cp	r20, r1
    6520:	51 05       	cpc	r21, r1
    6522:	f1 f0       	breq	.+60     	; 0x6560 <free+0x92>
    6524:	ea 01       	movw	r28, r20
    6526:	f5 cf       	rjmp	.-22     	; 0x6512 <free+0x44>
    6528:	d3 83       	std	Z+3, r29	; 0x03
    652a:	c2 83       	std	Z+2, r28	; 0x02
    652c:	40 81       	ld	r20, Z
    652e:	51 81       	ldd	r21, Z+1	; 0x01
    6530:	84 0f       	add	r24, r20
    6532:	95 1f       	adc	r25, r21
    6534:	c8 17       	cp	r28, r24
    6536:	d9 07       	cpc	r29, r25
    6538:	59 f4       	brne	.+22     	; 0x6550 <free+0x82>
    653a:	88 81       	ld	r24, Y
    653c:	99 81       	ldd	r25, Y+1	; 0x01
    653e:	84 0f       	add	r24, r20
    6540:	95 1f       	adc	r25, r21
    6542:	02 96       	adiw	r24, 0x02	; 2
    6544:	91 83       	std	Z+1, r25	; 0x01
    6546:	80 83       	st	Z, r24
    6548:	8a 81       	ldd	r24, Y+2	; 0x02
    654a:	9b 81       	ldd	r25, Y+3	; 0x03
    654c:	93 83       	std	Z+3, r25	; 0x03
    654e:	82 83       	std	Z+2, r24	; 0x02
    6550:	21 15       	cp	r18, r1
    6552:	31 05       	cpc	r19, r1
    6554:	29 f4       	brne	.+10     	; 0x6560 <free+0x92>
    6556:	f0 93 c7 17 	sts	0x17C7, r31	; 0x8017c7 <__flp+0x1>
    655a:	e0 93 c6 17 	sts	0x17C6, r30	; 0x8017c6 <__flp>
    655e:	3d c0       	rjmp	.+122    	; 0x65da <free+0x10c>
    6560:	e9 01       	movw	r28, r18
    6562:	fb 83       	std	Y+3, r31	; 0x03
    6564:	ea 83       	std	Y+2, r30	; 0x02
    6566:	49 91       	ld	r20, Y+
    6568:	59 91       	ld	r21, Y+
    656a:	c4 0f       	add	r28, r20
    656c:	d5 1f       	adc	r29, r21
    656e:	ec 17       	cp	r30, r28
    6570:	fd 07       	cpc	r31, r29
    6572:	61 f4       	brne	.+24     	; 0x658c <free+0xbe>
    6574:	80 81       	ld	r24, Z
    6576:	91 81       	ldd	r25, Z+1	; 0x01
    6578:	84 0f       	add	r24, r20
    657a:	95 1f       	adc	r25, r21
    657c:	02 96       	adiw	r24, 0x02	; 2
    657e:	e9 01       	movw	r28, r18
    6580:	99 83       	std	Y+1, r25	; 0x01
    6582:	88 83       	st	Y, r24
    6584:	82 81       	ldd	r24, Z+2	; 0x02
    6586:	93 81       	ldd	r25, Z+3	; 0x03
    6588:	9b 83       	std	Y+3, r25	; 0x03
    658a:	8a 83       	std	Y+2, r24	; 0x02
    658c:	e0 e0       	ldi	r30, 0x00	; 0
    658e:	f0 e0       	ldi	r31, 0x00	; 0
    6590:	12 96       	adiw	r26, 0x02	; 2
    6592:	8d 91       	ld	r24, X+
    6594:	9c 91       	ld	r25, X
    6596:	13 97       	sbiw	r26, 0x03	; 3
    6598:	00 97       	sbiw	r24, 0x00	; 0
    659a:	19 f0       	breq	.+6      	; 0x65a2 <free+0xd4>
    659c:	fd 01       	movw	r30, r26
    659e:	dc 01       	movw	r26, r24
    65a0:	f7 cf       	rjmp	.-18     	; 0x6590 <free+0xc2>
    65a2:	8d 91       	ld	r24, X+
    65a4:	9c 91       	ld	r25, X
    65a6:	11 97       	sbiw	r26, 0x01	; 1
    65a8:	9d 01       	movw	r18, r26
    65aa:	2e 5f       	subi	r18, 0xFE	; 254
    65ac:	3f 4f       	sbci	r19, 0xFF	; 255
    65ae:	82 0f       	add	r24, r18
    65b0:	93 1f       	adc	r25, r19
    65b2:	20 91 c4 17 	lds	r18, 0x17C4	; 0x8017c4 <__brkval>
    65b6:	30 91 c5 17 	lds	r19, 0x17C5	; 0x8017c5 <__brkval+0x1>
    65ba:	28 17       	cp	r18, r24
    65bc:	39 07       	cpc	r19, r25
    65be:	69 f4       	brne	.+26     	; 0x65da <free+0x10c>
    65c0:	30 97       	sbiw	r30, 0x00	; 0
    65c2:	29 f4       	brne	.+10     	; 0x65ce <free+0x100>
    65c4:	10 92 c7 17 	sts	0x17C7, r1	; 0x8017c7 <__flp+0x1>
    65c8:	10 92 c6 17 	sts	0x17C6, r1	; 0x8017c6 <__flp>
    65cc:	02 c0       	rjmp	.+4      	; 0x65d2 <free+0x104>
    65ce:	13 82       	std	Z+3, r1	; 0x03
    65d0:	12 82       	std	Z+2, r1	; 0x02
    65d2:	b0 93 c5 17 	sts	0x17C5, r27	; 0x8017c5 <__brkval+0x1>
    65d6:	a0 93 c4 17 	sts	0x17C4, r26	; 0x8017c4 <__brkval>
    65da:	df 91       	pop	r29
    65dc:	cf 91       	pop	r28
    65de:	08 95       	ret

000065e0 <abort>:
    65e0:	81 e0       	ldi	r24, 0x01	; 1
    65e2:	90 e0       	ldi	r25, 0x00	; 0
    65e4:	f8 94       	cli
    65e6:	58 c2       	rjmp	.+1200   	; 0x6a98 <_exit>

000065e8 <__ftoa_engine>:
    65e8:	28 30       	cpi	r18, 0x08	; 8
    65ea:	08 f0       	brcs	.+2      	; 0x65ee <__ftoa_engine+0x6>
    65ec:	27 e0       	ldi	r18, 0x07	; 7
    65ee:	33 27       	eor	r19, r19
    65f0:	da 01       	movw	r26, r20
    65f2:	99 0f       	add	r25, r25
    65f4:	31 1d       	adc	r19, r1
    65f6:	87 fd       	sbrc	r24, 7
    65f8:	91 60       	ori	r25, 0x01	; 1
    65fa:	00 96       	adiw	r24, 0x00	; 0
    65fc:	61 05       	cpc	r22, r1
    65fe:	71 05       	cpc	r23, r1
    6600:	39 f4       	brne	.+14     	; 0x6610 <__ftoa_engine+0x28>
    6602:	32 60       	ori	r19, 0x02	; 2
    6604:	2e 5f       	subi	r18, 0xFE	; 254
    6606:	3d 93       	st	X+, r19
    6608:	30 e3       	ldi	r19, 0x30	; 48
    660a:	2a 95       	dec	r18
    660c:	e1 f7       	brne	.-8      	; 0x6606 <__ftoa_engine+0x1e>
    660e:	08 95       	ret
    6610:	9f 3f       	cpi	r25, 0xFF	; 255
    6612:	30 f0       	brcs	.+12     	; 0x6620 <__ftoa_engine+0x38>
    6614:	80 38       	cpi	r24, 0x80	; 128
    6616:	71 05       	cpc	r23, r1
    6618:	61 05       	cpc	r22, r1
    661a:	09 f0       	breq	.+2      	; 0x661e <__ftoa_engine+0x36>
    661c:	3c 5f       	subi	r19, 0xFC	; 252
    661e:	3c 5f       	subi	r19, 0xFC	; 252
    6620:	3d 93       	st	X+, r19
    6622:	91 30       	cpi	r25, 0x01	; 1
    6624:	08 f0       	brcs	.+2      	; 0x6628 <__ftoa_engine+0x40>
    6626:	80 68       	ori	r24, 0x80	; 128
    6628:	91 1d       	adc	r25, r1
    662a:	df 93       	push	r29
    662c:	cf 93       	push	r28
    662e:	1f 93       	push	r17
    6630:	0f 93       	push	r16
    6632:	ff 92       	push	r15
    6634:	ef 92       	push	r14
    6636:	19 2f       	mov	r17, r25
    6638:	98 7f       	andi	r25, 0xF8	; 248
    663a:	96 95       	lsr	r25
    663c:	e9 2f       	mov	r30, r25
    663e:	96 95       	lsr	r25
    6640:	96 95       	lsr	r25
    6642:	e9 0f       	add	r30, r25
    6644:	ff 27       	eor	r31, r31
    6646:	e4 50       	subi	r30, 0x04	; 4
    6648:	fe 4f       	sbci	r31, 0xFE	; 254
    664a:	99 27       	eor	r25, r25
    664c:	33 27       	eor	r19, r19
    664e:	ee 24       	eor	r14, r14
    6650:	ff 24       	eor	r15, r15
    6652:	a7 01       	movw	r20, r14
    6654:	e7 01       	movw	r28, r14
    6656:	05 90       	lpm	r0, Z+
    6658:	08 94       	sec
    665a:	07 94       	ror	r0
    665c:	28 f4       	brcc	.+10     	; 0x6668 <__ftoa_engine+0x80>
    665e:	36 0f       	add	r19, r22
    6660:	e7 1e       	adc	r14, r23
    6662:	f8 1e       	adc	r15, r24
    6664:	49 1f       	adc	r20, r25
    6666:	51 1d       	adc	r21, r1
    6668:	66 0f       	add	r22, r22
    666a:	77 1f       	adc	r23, r23
    666c:	88 1f       	adc	r24, r24
    666e:	99 1f       	adc	r25, r25
    6670:	06 94       	lsr	r0
    6672:	a1 f7       	brne	.-24     	; 0x665c <__ftoa_engine+0x74>
    6674:	05 90       	lpm	r0, Z+
    6676:	07 94       	ror	r0
    6678:	28 f4       	brcc	.+10     	; 0x6684 <__ftoa_engine+0x9c>
    667a:	e7 0e       	add	r14, r23
    667c:	f8 1e       	adc	r15, r24
    667e:	49 1f       	adc	r20, r25
    6680:	56 1f       	adc	r21, r22
    6682:	c1 1d       	adc	r28, r1
    6684:	77 0f       	add	r23, r23
    6686:	88 1f       	adc	r24, r24
    6688:	99 1f       	adc	r25, r25
    668a:	66 1f       	adc	r22, r22
    668c:	06 94       	lsr	r0
    668e:	a1 f7       	brne	.-24     	; 0x6678 <__ftoa_engine+0x90>
    6690:	05 90       	lpm	r0, Z+
    6692:	07 94       	ror	r0
    6694:	28 f4       	brcc	.+10     	; 0x66a0 <__ftoa_engine+0xb8>
    6696:	f8 0e       	add	r15, r24
    6698:	49 1f       	adc	r20, r25
    669a:	56 1f       	adc	r21, r22
    669c:	c7 1f       	adc	r28, r23
    669e:	d1 1d       	adc	r29, r1
    66a0:	88 0f       	add	r24, r24
    66a2:	99 1f       	adc	r25, r25
    66a4:	66 1f       	adc	r22, r22
    66a6:	77 1f       	adc	r23, r23
    66a8:	06 94       	lsr	r0
    66aa:	a1 f7       	brne	.-24     	; 0x6694 <__ftoa_engine+0xac>
    66ac:	05 90       	lpm	r0, Z+
    66ae:	07 94       	ror	r0
    66b0:	20 f4       	brcc	.+8      	; 0x66ba <__ftoa_engine+0xd2>
    66b2:	49 0f       	add	r20, r25
    66b4:	56 1f       	adc	r21, r22
    66b6:	c7 1f       	adc	r28, r23
    66b8:	d8 1f       	adc	r29, r24
    66ba:	99 0f       	add	r25, r25
    66bc:	66 1f       	adc	r22, r22
    66be:	77 1f       	adc	r23, r23
    66c0:	88 1f       	adc	r24, r24
    66c2:	06 94       	lsr	r0
    66c4:	a9 f7       	brne	.-22     	; 0x66b0 <__ftoa_engine+0xc8>
    66c6:	84 91       	lpm	r24, Z
    66c8:	10 95       	com	r17
    66ca:	17 70       	andi	r17, 0x07	; 7
    66cc:	41 f0       	breq	.+16     	; 0x66de <__ftoa_engine+0xf6>
    66ce:	d6 95       	lsr	r29
    66d0:	c7 95       	ror	r28
    66d2:	57 95       	ror	r21
    66d4:	47 95       	ror	r20
    66d6:	f7 94       	ror	r15
    66d8:	e7 94       	ror	r14
    66da:	1a 95       	dec	r17
    66dc:	c1 f7       	brne	.-16     	; 0x66ce <__ftoa_engine+0xe6>
    66de:	e2 ea       	ldi	r30, 0xA2	; 162
    66e0:	f1 e0       	ldi	r31, 0x01	; 1
    66e2:	68 94       	set
    66e4:	15 90       	lpm	r1, Z+
    66e6:	15 91       	lpm	r17, Z+
    66e8:	35 91       	lpm	r19, Z+
    66ea:	65 91       	lpm	r22, Z+
    66ec:	95 91       	lpm	r25, Z+
    66ee:	05 90       	lpm	r0, Z+
    66f0:	7f e2       	ldi	r23, 0x2F	; 47
    66f2:	73 95       	inc	r23
    66f4:	e1 18       	sub	r14, r1
    66f6:	f1 0a       	sbc	r15, r17
    66f8:	43 0b       	sbc	r20, r19
    66fa:	56 0b       	sbc	r21, r22
    66fc:	c9 0b       	sbc	r28, r25
    66fe:	d0 09       	sbc	r29, r0
    6700:	c0 f7       	brcc	.-16     	; 0x66f2 <__ftoa_engine+0x10a>
    6702:	e1 0c       	add	r14, r1
    6704:	f1 1e       	adc	r15, r17
    6706:	43 1f       	adc	r20, r19
    6708:	56 1f       	adc	r21, r22
    670a:	c9 1f       	adc	r28, r25
    670c:	d0 1d       	adc	r29, r0
    670e:	7e f4       	brtc	.+30     	; 0x672e <__ftoa_engine+0x146>
    6710:	70 33       	cpi	r23, 0x30	; 48
    6712:	11 f4       	brne	.+4      	; 0x6718 <__ftoa_engine+0x130>
    6714:	8a 95       	dec	r24
    6716:	e6 cf       	rjmp	.-52     	; 0x66e4 <__ftoa_engine+0xfc>
    6718:	e8 94       	clt
    671a:	01 50       	subi	r16, 0x01	; 1
    671c:	30 f0       	brcs	.+12     	; 0x672a <__ftoa_engine+0x142>
    671e:	08 0f       	add	r16, r24
    6720:	0a f4       	brpl	.+2      	; 0x6724 <__ftoa_engine+0x13c>
    6722:	00 27       	eor	r16, r16
    6724:	02 17       	cp	r16, r18
    6726:	08 f4       	brcc	.+2      	; 0x672a <__ftoa_engine+0x142>
    6728:	20 2f       	mov	r18, r16
    672a:	23 95       	inc	r18
    672c:	02 2f       	mov	r16, r18
    672e:	7a 33       	cpi	r23, 0x3A	; 58
    6730:	28 f0       	brcs	.+10     	; 0x673c <__ftoa_engine+0x154>
    6732:	79 e3       	ldi	r23, 0x39	; 57
    6734:	7d 93       	st	X+, r23
    6736:	2a 95       	dec	r18
    6738:	e9 f7       	brne	.-6      	; 0x6734 <__ftoa_engine+0x14c>
    673a:	10 c0       	rjmp	.+32     	; 0x675c <__ftoa_engine+0x174>
    673c:	7d 93       	st	X+, r23
    673e:	2a 95       	dec	r18
    6740:	89 f6       	brne	.-94     	; 0x66e4 <__ftoa_engine+0xfc>
    6742:	06 94       	lsr	r0
    6744:	97 95       	ror	r25
    6746:	67 95       	ror	r22
    6748:	37 95       	ror	r19
    674a:	17 95       	ror	r17
    674c:	17 94       	ror	r1
    674e:	e1 18       	sub	r14, r1
    6750:	f1 0a       	sbc	r15, r17
    6752:	43 0b       	sbc	r20, r19
    6754:	56 0b       	sbc	r21, r22
    6756:	c9 0b       	sbc	r28, r25
    6758:	d0 09       	sbc	r29, r0
    675a:	98 f0       	brcs	.+38     	; 0x6782 <__ftoa_engine+0x19a>
    675c:	23 95       	inc	r18
    675e:	7e 91       	ld	r23, -X
    6760:	73 95       	inc	r23
    6762:	7a 33       	cpi	r23, 0x3A	; 58
    6764:	08 f0       	brcs	.+2      	; 0x6768 <__ftoa_engine+0x180>
    6766:	70 e3       	ldi	r23, 0x30	; 48
    6768:	7c 93       	st	X, r23
    676a:	20 13       	cpse	r18, r16
    676c:	b8 f7       	brcc	.-18     	; 0x675c <__ftoa_engine+0x174>
    676e:	7e 91       	ld	r23, -X
    6770:	70 61       	ori	r23, 0x10	; 16
    6772:	7d 93       	st	X+, r23
    6774:	30 f0       	brcs	.+12     	; 0x6782 <__ftoa_engine+0x19a>
    6776:	83 95       	inc	r24
    6778:	71 e3       	ldi	r23, 0x31	; 49
    677a:	7d 93       	st	X+, r23
    677c:	70 e3       	ldi	r23, 0x30	; 48
    677e:	2a 95       	dec	r18
    6780:	e1 f7       	brne	.-8      	; 0x677a <__ftoa_engine+0x192>
    6782:	11 24       	eor	r1, r1
    6784:	ef 90       	pop	r14
    6786:	ff 90       	pop	r15
    6788:	0f 91       	pop	r16
    678a:	1f 91       	pop	r17
    678c:	cf 91       	pop	r28
    678e:	df 91       	pop	r29
    6790:	99 27       	eor	r25, r25
    6792:	87 fd       	sbrc	r24, 7
    6794:	90 95       	com	r25
    6796:	08 95       	ret

00006798 <strnlen_P>:
    6798:	fc 01       	movw	r30, r24
    679a:	05 90       	lpm	r0, Z+
    679c:	61 50       	subi	r22, 0x01	; 1
    679e:	70 40       	sbci	r23, 0x00	; 0
    67a0:	01 10       	cpse	r0, r1
    67a2:	d8 f7       	brcc	.-10     	; 0x679a <strnlen_P+0x2>
    67a4:	80 95       	com	r24
    67a6:	90 95       	com	r25
    67a8:	8e 0f       	add	r24, r30
    67aa:	9f 1f       	adc	r25, r31
    67ac:	08 95       	ret

000067ae <memcpy>:
    67ae:	fb 01       	movw	r30, r22
    67b0:	dc 01       	movw	r26, r24
    67b2:	02 c0       	rjmp	.+4      	; 0x67b8 <memcpy+0xa>
    67b4:	01 90       	ld	r0, Z+
    67b6:	0d 92       	st	X+, r0
    67b8:	41 50       	subi	r20, 0x01	; 1
    67ba:	50 40       	sbci	r21, 0x00	; 0
    67bc:	d8 f7       	brcc	.-10     	; 0x67b4 <memcpy+0x6>
    67be:	08 95       	ret

000067c0 <memset>:
    67c0:	dc 01       	movw	r26, r24
    67c2:	01 c0       	rjmp	.+2      	; 0x67c6 <memset+0x6>
    67c4:	6d 93       	st	X+, r22
    67c6:	41 50       	subi	r20, 0x01	; 1
    67c8:	50 40       	sbci	r21, 0x00	; 0
    67ca:	e0 f7       	brcc	.-8      	; 0x67c4 <memset+0x4>
    67cc:	08 95       	ret

000067ce <strcasestr>:
    67ce:	fb 01       	movw	r30, r22
    67d0:	51 91       	ld	r21, Z+
    67d2:	55 23       	and	r21, r21
    67d4:	b1 f0       	breq	.+44     	; 0x6802 <strcasestr+0x34>
    67d6:	bf 01       	movw	r22, r30
    67d8:	dc 01       	movw	r26, r24
    67da:	05 2e       	mov	r0, r21
    67dc:	4d 91       	ld	r20, X+
    67de:	44 23       	and	r20, r20
    67e0:	69 f0       	breq	.+26     	; 0x67fc <strcasestr+0x2e>
    67e2:	10 d0       	rcall	.+32     	; 0x6804 <strcasestr+0x36>
    67e4:	d9 f7       	brne	.-10     	; 0x67dc <strcasestr+0xe>
    67e6:	cd 01       	movw	r24, r26
    67e8:	01 90       	ld	r0, Z+
    67ea:	00 20       	and	r0, r0
    67ec:	49 f0       	breq	.+18     	; 0x6800 <strcasestr+0x32>
    67ee:	4d 91       	ld	r20, X+
    67f0:	41 11       	cpse	r20, r1
    67f2:	08 d0       	rcall	.+16     	; 0x6804 <strcasestr+0x36>
    67f4:	c9 f3       	breq	.-14     	; 0x67e8 <strcasestr+0x1a>
    67f6:	fb 01       	movw	r30, r22
    67f8:	41 11       	cpse	r20, r1
    67fa:	ee cf       	rjmp	.-36     	; 0x67d8 <strcasestr+0xa>
    67fc:	81 e0       	ldi	r24, 0x01	; 1
    67fe:	90 e0       	ldi	r25, 0x00	; 0
    6800:	01 97       	sbiw	r24, 0x01	; 1
    6802:	08 95       	ret
    6804:	40 25       	eor	r20, r0
    6806:	39 f0       	breq	.+14     	; 0x6816 <strcasestr+0x48>
    6808:	40 32       	cpi	r20, 0x20	; 32
    680a:	29 f4       	brne	.+10     	; 0x6816 <strcasestr+0x48>
    680c:	40 29       	or	r20, r0
    680e:	4b 57       	subi	r20, 0x7B	; 123
    6810:	46 5e       	subi	r20, 0xE6	; 230
    6812:	08 f0       	brcs	.+2      	; 0x6816 <strcasestr+0x48>
    6814:	18 94       	sez
    6816:	08 95       	ret

00006818 <strcat>:
    6818:	fb 01       	movw	r30, r22
    681a:	dc 01       	movw	r26, r24
    681c:	0d 90       	ld	r0, X+
    681e:	00 20       	and	r0, r0
    6820:	e9 f7       	brne	.-6      	; 0x681c <strcat+0x4>
    6822:	11 97       	sbiw	r26, 0x01	; 1
    6824:	01 90       	ld	r0, Z+
    6826:	0d 92       	st	X+, r0
    6828:	00 20       	and	r0, r0
    682a:	e1 f7       	brne	.-8      	; 0x6824 <strcat+0xc>
    682c:	08 95       	ret

0000682e <strcpy>:
    682e:	fb 01       	movw	r30, r22
    6830:	dc 01       	movw	r26, r24
    6832:	01 90       	ld	r0, Z+
    6834:	0d 92       	st	X+, r0
    6836:	00 20       	and	r0, r0
    6838:	e1 f7       	brne	.-8      	; 0x6832 <strcpy+0x4>
    683a:	08 95       	ret

0000683c <strncasecmp>:
    683c:	fb 01       	movw	r30, r22
    683e:	dc 01       	movw	r26, r24
    6840:	41 50       	subi	r20, 0x01	; 1
    6842:	50 40       	sbci	r21, 0x00	; 0
    6844:	88 f0       	brcs	.+34     	; 0x6868 <strncasecmp+0x2c>
    6846:	8d 91       	ld	r24, X+
    6848:	81 34       	cpi	r24, 0x41	; 65
    684a:	1c f0       	brlt	.+6      	; 0x6852 <strncasecmp+0x16>
    684c:	8b 35       	cpi	r24, 0x5B	; 91
    684e:	0c f4       	brge	.+2      	; 0x6852 <strncasecmp+0x16>
    6850:	80 5e       	subi	r24, 0xE0	; 224
    6852:	61 91       	ld	r22, Z+
    6854:	61 34       	cpi	r22, 0x41	; 65
    6856:	1c f0       	brlt	.+6      	; 0x685e <strncasecmp+0x22>
    6858:	6b 35       	cpi	r22, 0x5B	; 91
    685a:	0c f4       	brge	.+2      	; 0x685e <strncasecmp+0x22>
    685c:	60 5e       	subi	r22, 0xE0	; 224
    685e:	86 1b       	sub	r24, r22
    6860:	61 11       	cpse	r22, r1
    6862:	71 f3       	breq	.-36     	; 0x6840 <strncasecmp+0x4>
    6864:	99 0b       	sbc	r25, r25
    6866:	08 95       	ret
    6868:	88 1b       	sub	r24, r24
    686a:	fc cf       	rjmp	.-8      	; 0x6864 <strncasecmp+0x28>

0000686c <strnlen>:
    686c:	fc 01       	movw	r30, r24
    686e:	61 50       	subi	r22, 0x01	; 1
    6870:	70 40       	sbci	r23, 0x00	; 0
    6872:	01 90       	ld	r0, Z+
    6874:	01 10       	cpse	r0, r1
    6876:	d8 f7       	brcc	.-10     	; 0x686e <strnlen+0x2>
    6878:	80 95       	com	r24
    687a:	90 95       	com	r25
    687c:	8e 0f       	add	r24, r30
    687e:	9f 1f       	adc	r25, r31
    6880:	08 95       	ret

00006882 <fputc>:
    6882:	0f 93       	push	r16
    6884:	1f 93       	push	r17
    6886:	cf 93       	push	r28
    6888:	df 93       	push	r29
    688a:	fb 01       	movw	r30, r22
    688c:	23 81       	ldd	r18, Z+3	; 0x03
    688e:	21 fd       	sbrc	r18, 1
    6890:	03 c0       	rjmp	.+6      	; 0x6898 <fputc+0x16>
    6892:	8f ef       	ldi	r24, 0xFF	; 255
    6894:	9f ef       	ldi	r25, 0xFF	; 255
    6896:	2c c0       	rjmp	.+88     	; 0x68f0 <fputc+0x6e>
    6898:	22 ff       	sbrs	r18, 2
    689a:	16 c0       	rjmp	.+44     	; 0x68c8 <fputc+0x46>
    689c:	46 81       	ldd	r20, Z+6	; 0x06
    689e:	57 81       	ldd	r21, Z+7	; 0x07
    68a0:	24 81       	ldd	r18, Z+4	; 0x04
    68a2:	35 81       	ldd	r19, Z+5	; 0x05
    68a4:	42 17       	cp	r20, r18
    68a6:	53 07       	cpc	r21, r19
    68a8:	44 f4       	brge	.+16     	; 0x68ba <fputc+0x38>
    68aa:	a0 81       	ld	r26, Z
    68ac:	b1 81       	ldd	r27, Z+1	; 0x01
    68ae:	9d 01       	movw	r18, r26
    68b0:	2f 5f       	subi	r18, 0xFF	; 255
    68b2:	3f 4f       	sbci	r19, 0xFF	; 255
    68b4:	31 83       	std	Z+1, r19	; 0x01
    68b6:	20 83       	st	Z, r18
    68b8:	8c 93       	st	X, r24
    68ba:	26 81       	ldd	r18, Z+6	; 0x06
    68bc:	37 81       	ldd	r19, Z+7	; 0x07
    68be:	2f 5f       	subi	r18, 0xFF	; 255
    68c0:	3f 4f       	sbci	r19, 0xFF	; 255
    68c2:	37 83       	std	Z+7, r19	; 0x07
    68c4:	26 83       	std	Z+6, r18	; 0x06
    68c6:	14 c0       	rjmp	.+40     	; 0x68f0 <fputc+0x6e>
    68c8:	8b 01       	movw	r16, r22
    68ca:	ec 01       	movw	r28, r24
    68cc:	fb 01       	movw	r30, r22
    68ce:	00 84       	ldd	r0, Z+8	; 0x08
    68d0:	f1 85       	ldd	r31, Z+9	; 0x09
    68d2:	e0 2d       	mov	r30, r0
    68d4:	19 95       	eicall
    68d6:	89 2b       	or	r24, r25
    68d8:	e1 f6       	brne	.-72     	; 0x6892 <fputc+0x10>
    68da:	d8 01       	movw	r26, r16
    68dc:	16 96       	adiw	r26, 0x06	; 6
    68de:	8d 91       	ld	r24, X+
    68e0:	9c 91       	ld	r25, X
    68e2:	17 97       	sbiw	r26, 0x07	; 7
    68e4:	01 96       	adiw	r24, 0x01	; 1
    68e6:	17 96       	adiw	r26, 0x07	; 7
    68e8:	9c 93       	st	X, r25
    68ea:	8e 93       	st	-X, r24
    68ec:	16 97       	sbiw	r26, 0x06	; 6
    68ee:	ce 01       	movw	r24, r28
    68f0:	df 91       	pop	r29
    68f2:	cf 91       	pop	r28
    68f4:	1f 91       	pop	r17
    68f6:	0f 91       	pop	r16
    68f8:	08 95       	ret

000068fa <printf>:
    68fa:	cf 93       	push	r28
    68fc:	df 93       	push	r29
    68fe:	cd b7       	in	r28, 0x3d	; 61
    6900:	de b7       	in	r29, 0x3e	; 62
    6902:	ae 01       	movw	r20, r28
    6904:	4a 5f       	subi	r20, 0xFA	; 250
    6906:	5f 4f       	sbci	r21, 0xFF	; 255
    6908:	fa 01       	movw	r30, r20
    690a:	61 91       	ld	r22, Z+
    690c:	71 91       	ld	r23, Z+
    690e:	af 01       	movw	r20, r30
    6910:	80 91 ca 17 	lds	r24, 0x17CA	; 0x8017ca <__iob+0x2>
    6914:	90 91 cb 17 	lds	r25, 0x17CB	; 0x8017cb <__iob+0x3>
    6918:	59 d9       	rcall	.-3406   	; 0x5bcc <vfprintf>
    691a:	df 91       	pop	r29
    691c:	cf 91       	pop	r28
    691e:	08 95       	ret

00006920 <puts>:
    6920:	0f 93       	push	r16
    6922:	1f 93       	push	r17
    6924:	cf 93       	push	r28
    6926:	df 93       	push	r29
    6928:	e0 91 ca 17 	lds	r30, 0x17CA	; 0x8017ca <__iob+0x2>
    692c:	f0 91 cb 17 	lds	r31, 0x17CB	; 0x8017cb <__iob+0x3>
    6930:	23 81       	ldd	r18, Z+3	; 0x03
    6932:	21 ff       	sbrs	r18, 1
    6934:	1b c0       	rjmp	.+54     	; 0x696c <puts+0x4c>
    6936:	8c 01       	movw	r16, r24
    6938:	d0 e0       	ldi	r29, 0x00	; 0
    693a:	c0 e0       	ldi	r28, 0x00	; 0
    693c:	f8 01       	movw	r30, r16
    693e:	81 91       	ld	r24, Z+
    6940:	8f 01       	movw	r16, r30
    6942:	60 91 ca 17 	lds	r22, 0x17CA	; 0x8017ca <__iob+0x2>
    6946:	70 91 cb 17 	lds	r23, 0x17CB	; 0x8017cb <__iob+0x3>
    694a:	db 01       	movw	r26, r22
    694c:	18 96       	adiw	r26, 0x08	; 8
    694e:	ed 91       	ld	r30, X+
    6950:	fc 91       	ld	r31, X
    6952:	19 97       	sbiw	r26, 0x09	; 9
    6954:	88 23       	and	r24, r24
    6956:	31 f0       	breq	.+12     	; 0x6964 <puts+0x44>
    6958:	19 95       	eicall
    695a:	89 2b       	or	r24, r25
    695c:	79 f3       	breq	.-34     	; 0x693c <puts+0x1c>
    695e:	df ef       	ldi	r29, 0xFF	; 255
    6960:	cf ef       	ldi	r28, 0xFF	; 255
    6962:	ec cf       	rjmp	.-40     	; 0x693c <puts+0x1c>
    6964:	8a e0       	ldi	r24, 0x0A	; 10
    6966:	19 95       	eicall
    6968:	89 2b       	or	r24, r25
    696a:	19 f0       	breq	.+6      	; 0x6972 <puts+0x52>
    696c:	8f ef       	ldi	r24, 0xFF	; 255
    696e:	9f ef       	ldi	r25, 0xFF	; 255
    6970:	02 c0       	rjmp	.+4      	; 0x6976 <puts+0x56>
    6972:	8d 2f       	mov	r24, r29
    6974:	9c 2f       	mov	r25, r28
    6976:	df 91       	pop	r29
    6978:	cf 91       	pop	r28
    697a:	1f 91       	pop	r17
    697c:	0f 91       	pop	r16
    697e:	08 95       	ret

00006980 <sprintf>:
    6980:	0f 93       	push	r16
    6982:	1f 93       	push	r17
    6984:	cf 93       	push	r28
    6986:	df 93       	push	r29
    6988:	cd b7       	in	r28, 0x3d	; 61
    698a:	de b7       	in	r29, 0x3e	; 62
    698c:	2e 97       	sbiw	r28, 0x0e	; 14
    698e:	0f b6       	in	r0, 0x3f	; 63
    6990:	f8 94       	cli
    6992:	de bf       	out	0x3e, r29	; 62
    6994:	0f be       	out	0x3f, r0	; 63
    6996:	cd bf       	out	0x3d, r28	; 61
    6998:	0e 89       	ldd	r16, Y+22	; 0x16
    699a:	1f 89       	ldd	r17, Y+23	; 0x17
    699c:	86 e0       	ldi	r24, 0x06	; 6
    699e:	8c 83       	std	Y+4, r24	; 0x04
    69a0:	1a 83       	std	Y+2, r17	; 0x02
    69a2:	09 83       	std	Y+1, r16	; 0x01
    69a4:	8f ef       	ldi	r24, 0xFF	; 255
    69a6:	9f e7       	ldi	r25, 0x7F	; 127
    69a8:	9e 83       	std	Y+6, r25	; 0x06
    69aa:	8d 83       	std	Y+5, r24	; 0x05
    69ac:	ae 01       	movw	r20, r28
    69ae:	46 5e       	subi	r20, 0xE6	; 230
    69b0:	5f 4f       	sbci	r21, 0xFF	; 255
    69b2:	68 8d       	ldd	r22, Y+24	; 0x18
    69b4:	79 8d       	ldd	r23, Y+25	; 0x19
    69b6:	ce 01       	movw	r24, r28
    69b8:	01 96       	adiw	r24, 0x01	; 1
    69ba:	08 d9       	rcall	.-3568   	; 0x5bcc <vfprintf>
    69bc:	ef 81       	ldd	r30, Y+7	; 0x07
    69be:	f8 85       	ldd	r31, Y+8	; 0x08
    69c0:	e0 0f       	add	r30, r16
    69c2:	f1 1f       	adc	r31, r17
    69c4:	10 82       	st	Z, r1
    69c6:	2e 96       	adiw	r28, 0x0e	; 14
    69c8:	0f b6       	in	r0, 0x3f	; 63
    69ca:	f8 94       	cli
    69cc:	de bf       	out	0x3e, r29	; 62
    69ce:	0f be       	out	0x3f, r0	; 63
    69d0:	cd bf       	out	0x3d, r28	; 61
    69d2:	df 91       	pop	r29
    69d4:	cf 91       	pop	r28
    69d6:	1f 91       	pop	r17
    69d8:	0f 91       	pop	r16
    69da:	08 95       	ret

000069dc <__ultoa_invert>:
    69dc:	fa 01       	movw	r30, r20
    69de:	aa 27       	eor	r26, r26
    69e0:	28 30       	cpi	r18, 0x08	; 8
    69e2:	51 f1       	breq	.+84     	; 0x6a38 <__ultoa_invert+0x5c>
    69e4:	20 31       	cpi	r18, 0x10	; 16
    69e6:	81 f1       	breq	.+96     	; 0x6a48 <__ultoa_invert+0x6c>
    69e8:	e8 94       	clt
    69ea:	6f 93       	push	r22
    69ec:	6e 7f       	andi	r22, 0xFE	; 254
    69ee:	6e 5f       	subi	r22, 0xFE	; 254
    69f0:	7f 4f       	sbci	r23, 0xFF	; 255
    69f2:	8f 4f       	sbci	r24, 0xFF	; 255
    69f4:	9f 4f       	sbci	r25, 0xFF	; 255
    69f6:	af 4f       	sbci	r26, 0xFF	; 255
    69f8:	b1 e0       	ldi	r27, 0x01	; 1
    69fa:	3e d0       	rcall	.+124    	; 0x6a78 <__ultoa_invert+0x9c>
    69fc:	b4 e0       	ldi	r27, 0x04	; 4
    69fe:	3c d0       	rcall	.+120    	; 0x6a78 <__ultoa_invert+0x9c>
    6a00:	67 0f       	add	r22, r23
    6a02:	78 1f       	adc	r23, r24
    6a04:	89 1f       	adc	r24, r25
    6a06:	9a 1f       	adc	r25, r26
    6a08:	a1 1d       	adc	r26, r1
    6a0a:	68 0f       	add	r22, r24
    6a0c:	79 1f       	adc	r23, r25
    6a0e:	8a 1f       	adc	r24, r26
    6a10:	91 1d       	adc	r25, r1
    6a12:	a1 1d       	adc	r26, r1
    6a14:	6a 0f       	add	r22, r26
    6a16:	71 1d       	adc	r23, r1
    6a18:	81 1d       	adc	r24, r1
    6a1a:	91 1d       	adc	r25, r1
    6a1c:	a1 1d       	adc	r26, r1
    6a1e:	20 d0       	rcall	.+64     	; 0x6a60 <__ultoa_invert+0x84>
    6a20:	09 f4       	brne	.+2      	; 0x6a24 <__ultoa_invert+0x48>
    6a22:	68 94       	set
    6a24:	3f 91       	pop	r19
    6a26:	2a e0       	ldi	r18, 0x0A	; 10
    6a28:	26 9f       	mul	r18, r22
    6a2a:	11 24       	eor	r1, r1
    6a2c:	30 19       	sub	r19, r0
    6a2e:	30 5d       	subi	r19, 0xD0	; 208
    6a30:	31 93       	st	Z+, r19
    6a32:	de f6       	brtc	.-74     	; 0x69ea <__ultoa_invert+0xe>
    6a34:	cf 01       	movw	r24, r30
    6a36:	08 95       	ret
    6a38:	46 2f       	mov	r20, r22
    6a3a:	47 70       	andi	r20, 0x07	; 7
    6a3c:	40 5d       	subi	r20, 0xD0	; 208
    6a3e:	41 93       	st	Z+, r20
    6a40:	b3 e0       	ldi	r27, 0x03	; 3
    6a42:	0f d0       	rcall	.+30     	; 0x6a62 <__ultoa_invert+0x86>
    6a44:	c9 f7       	brne	.-14     	; 0x6a38 <__ultoa_invert+0x5c>
    6a46:	f6 cf       	rjmp	.-20     	; 0x6a34 <__ultoa_invert+0x58>
    6a48:	46 2f       	mov	r20, r22
    6a4a:	4f 70       	andi	r20, 0x0F	; 15
    6a4c:	40 5d       	subi	r20, 0xD0	; 208
    6a4e:	4a 33       	cpi	r20, 0x3A	; 58
    6a50:	18 f0       	brcs	.+6      	; 0x6a58 <__ultoa_invert+0x7c>
    6a52:	49 5d       	subi	r20, 0xD9	; 217
    6a54:	31 fd       	sbrc	r19, 1
    6a56:	40 52       	subi	r20, 0x20	; 32
    6a58:	41 93       	st	Z+, r20
    6a5a:	02 d0       	rcall	.+4      	; 0x6a60 <__ultoa_invert+0x84>
    6a5c:	a9 f7       	brne	.-22     	; 0x6a48 <__ultoa_invert+0x6c>
    6a5e:	ea cf       	rjmp	.-44     	; 0x6a34 <__ultoa_invert+0x58>
    6a60:	b4 e0       	ldi	r27, 0x04	; 4
    6a62:	a6 95       	lsr	r26
    6a64:	97 95       	ror	r25
    6a66:	87 95       	ror	r24
    6a68:	77 95       	ror	r23
    6a6a:	67 95       	ror	r22
    6a6c:	ba 95       	dec	r27
    6a6e:	c9 f7       	brne	.-14     	; 0x6a62 <__ultoa_invert+0x86>
    6a70:	00 97       	sbiw	r24, 0x00	; 0
    6a72:	61 05       	cpc	r22, r1
    6a74:	71 05       	cpc	r23, r1
    6a76:	08 95       	ret
    6a78:	9b 01       	movw	r18, r22
    6a7a:	ac 01       	movw	r20, r24
    6a7c:	0a 2e       	mov	r0, r26
    6a7e:	06 94       	lsr	r0
    6a80:	57 95       	ror	r21
    6a82:	47 95       	ror	r20
    6a84:	37 95       	ror	r19
    6a86:	27 95       	ror	r18
    6a88:	ba 95       	dec	r27
    6a8a:	c9 f7       	brne	.-14     	; 0x6a7e <__ultoa_invert+0xa2>
    6a8c:	62 0f       	add	r22, r18
    6a8e:	73 1f       	adc	r23, r19
    6a90:	84 1f       	adc	r24, r20
    6a92:	95 1f       	adc	r25, r21
    6a94:	a0 1d       	adc	r26, r0
    6a96:	08 95       	ret

00006a98 <_exit>:
    6a98:	f8 94       	cli

00006a9a <__stop_program>:
    6a9a:	ff cf       	rjmp	.-2      	; 0x6a9a <__stop_program>

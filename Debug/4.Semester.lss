
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000662  00800200  00006e4a  00006ede  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006e4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f73  00800862  00800862  00007540  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007540  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000759c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000bb8  00000000  00000000  000075dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e38b  00000000  00000000  00008194  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b44  00000000  00000000  0001651f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000070cc  00000000  00000000  0001a063  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002910  00000000  00000000  00021130  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004619  00000000  00000000  00023a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c8ba  00000000  00000000  00028059  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ac8  00000000  00000000  00034913  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	62 c7       	rjmp	.+3780   	; 0xef6 <__vector_12>
      32:	00 00       	nop
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 c1 27 	jmp	0x4f82	; 0x4f82 <__vector_25>
      68:	0c 94 13 28 	jmp	0x5026	; 0x5026 <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 57 28 	jmp	0x50ae	; 0x50ae <__vector_36>
      94:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 f5 2c 	jmp	0x59ea	; 0x59ea <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 ed 28 	jmp	0x51da	; 0x51da <__vector_51>
      d0:	0c 94 3f 29 	jmp	0x527e	; 0x527e <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 83 29 	jmp	0x5306	; 0x5306 <__vector_54>
      dc:	0c 94 d5 29 	jmp	0x53aa	; 0x53aa <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	55 1d       	adc	r21, r5
      e6:	55 1d       	adc	r21, r5
      e8:	55 1d       	adc	r21, r5
      ea:	8c 1d       	adc	r24, r12
      ec:	94 1d       	adc	r25, r4
      ee:	a9 1d       	adc	r26, r9
      f0:	55 1d       	adc	r21, r5
      f2:	55 1d       	adc	r21, r5
      f4:	8c 1d       	adc	r24, r12
      f6:	94 1d       	adc	r25, r4
      f8:	17 2d       	mov	r17, r7
      fa:	87 2d       	mov	r24, r7
      fc:	87 2d       	mov	r24, r7
      fe:	87 2d       	mov	r24, r7
     100:	87 2d       	mov	r24, r7
     102:	87 2d       	mov	r24, r7
     104:	87 2d       	mov	r24, r7
     106:	87 2d       	mov	r24, r7
     108:	17 2d       	mov	r17, r7
     10a:	87 2d       	mov	r24, r7
     10c:	87 2d       	mov	r24, r7
     10e:	87 2d       	mov	r24, r7
     110:	87 2d       	mov	r24, r7
     112:	87 2d       	mov	r24, r7
     114:	87 2d       	mov	r24, r7
     116:	87 2d       	mov	r24, r7
     118:	19 2d       	mov	r17, r9
     11a:	87 2d       	mov	r24, r7
     11c:	87 2d       	mov	r24, r7
     11e:	87 2d       	mov	r24, r7
     120:	87 2d       	mov	r24, r7
     122:	87 2d       	mov	r24, r7
     124:	87 2d       	mov	r24, r7
     126:	87 2d       	mov	r24, r7
     128:	87 2d       	mov	r24, r7
     12a:	87 2d       	mov	r24, r7
     12c:	87 2d       	mov	r24, r7
     12e:	87 2d       	mov	r24, r7
     130:	87 2d       	mov	r24, r7
     132:	87 2d       	mov	r24, r7
     134:	87 2d       	mov	r24, r7
     136:	87 2d       	mov	r24, r7
     138:	19 2d       	mov	r17, r9
     13a:	87 2d       	mov	r24, r7
     13c:	87 2d       	mov	r24, r7
     13e:	87 2d       	mov	r24, r7
     140:	87 2d       	mov	r24, r7
     142:	87 2d       	mov	r24, r7
     144:	87 2d       	mov	r24, r7
     146:	87 2d       	mov	r24, r7
     148:	87 2d       	mov	r24, r7
     14a:	87 2d       	mov	r24, r7
     14c:	87 2d       	mov	r24, r7
     14e:	87 2d       	mov	r24, r7
     150:	87 2d       	mov	r24, r7
     152:	87 2d       	mov	r24, r7
     154:	87 2d       	mov	r24, r7
     156:	87 2d       	mov	r24, r7
     158:	83 2d       	mov	r24, r3
     15a:	87 2d       	mov	r24, r7
     15c:	87 2d       	mov	r24, r7
     15e:	87 2d       	mov	r24, r7
     160:	87 2d       	mov	r24, r7
     162:	87 2d       	mov	r24, r7
     164:	87 2d       	mov	r24, r7
     166:	87 2d       	mov	r24, r7
     168:	4e 2d       	mov	r20, r14
     16a:	87 2d       	mov	r24, r7
     16c:	87 2d       	mov	r24, r7
     16e:	87 2d       	mov	r24, r7
     170:	87 2d       	mov	r24, r7
     172:	87 2d       	mov	r24, r7
     174:	87 2d       	mov	r24, r7
     176:	87 2d       	mov	r24, r7
     178:	87 2d       	mov	r24, r7
     17a:	87 2d       	mov	r24, r7
     17c:	87 2d       	mov	r24, r7
     17e:	87 2d       	mov	r24, r7
     180:	87 2d       	mov	r24, r7
     182:	87 2d       	mov	r24, r7
     184:	87 2d       	mov	r24, r7
     186:	87 2d       	mov	r24, r7
     188:	42 2d       	mov	r20, r2
     18a:	87 2d       	mov	r24, r7
     18c:	87 2d       	mov	r24, r7
     18e:	87 2d       	mov	r24, r7
     190:	87 2d       	mov	r24, r7
     192:	87 2d       	mov	r24, r7
     194:	87 2d       	mov	r24, r7
     196:	87 2d       	mov	r24, r7
     198:	66 2d       	mov	r22, r6

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <prvCheckTasksWaitingTermination>
     2a0:	80 91 5d 15 	lds	r24, 0x155D	; 0x80155d <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	60 d5       	rcall	.+2752   	; 0xd6a <vPortYield>
     2aa:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 c7 1c 	call	0x398e	; 0x398e <prvProcessTimerOrBlockTask>
     2c8:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	18 e0       	ldi	r17, 0x08	; 8
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	ea e4       	ldi	r30, 0x4A	; 74
     2e6:	fe e6       	ldi	r31, 0x6E	; 110
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	a2 36       	cpi	r26, 0x62	; 98
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	27 e1       	ldi	r18, 0x17	; 23
     2fa:	a2 e6       	ldi	r26, 0x62	; 98
     2fc:	b8 e0       	ldi	r27, 0x08	; 8
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	a5 3d       	cpi	r26, 0xD5	; 213
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <main>
     30c:	0c 94 23 37 	jmp	0x6e46	; 0x6e46 <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <Application_getEventGroup>:
// Declare a variable to hold the created event group.
EventGroupHandle_t xCreatedEventGroup;

EventGroupHandle_t Application_getEventGroup(){
	return xCreatedEventGroup;
}
     312:	80 91 bb 17 	lds	r24, 0x17BB	; 0x8017bb <xCreatedEventGroup>
     316:	90 91 bc 17 	lds	r25, 0x17BC	; 0x8017bc <xCreatedEventGroup+0x1>
     31a:	08 95       	ret

0000031c <Application_aFunctionToClearBits>:
void Application_aFunctionToClearBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Clear bit 0 and bit 4 in xEventGroup. */
  uxBits = xEventGroupClearBits(
     31c:	41 e1       	ldi	r20, 0x11	; 17
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	50 c2       	rjmp	.+1184   	; 0x7c6 <xEventGroupClearBits>
     326:	08 95       	ret

00000328 <Application_aFunctionToWaitBits>:
EventGroupHandle_t Application_getEventGroup(){
	return xCreatedEventGroup;
}

void Application_aFunctionToWaitBits( EventGroupHandle_t xEventGroup )
{
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	ec 01       	movw	r28, r24
EventBits_t uxBits;
const TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;

  /* Wait a maximum of 100ms for either bit 0 or bit 4 to be set within
  the event group.  Clear the bits before exiting. */
  uxBits = xEventGroupWaitBits(
     338:	0f 2e       	mov	r0, r31
     33a:	f6 e0       	ldi	r31, 0x06	; 6
     33c:	cf 2e       	mov	r12, r31
     33e:	d1 2c       	mov	r13, r1
     340:	e1 2c       	mov	r14, r1
     342:	f1 2c       	mov	r15, r1
     344:	f0 2d       	mov	r31, r0
     346:	01 e0       	ldi	r16, 0x01	; 1
     348:	20 e0       	ldi	r18, 0x00	; 0
     34a:	41 e1       	ldi	r20, 0x11	; 17
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	99 d1       	rcall	.+818    	; 0x686 <xEventGroupWaitBits>
            CO2_READY_BIT | TEMP_HUM_READY_BIT, /* The bits within the event group to wait for. */
            pdFALSE,        /* BIT_0 & BIT_4 should not be cleared before returning. */
            pdTRUE,       /* Wait for both bits, either bit will do. */
            xTicksToWait );/* Wait a maximum of 100ms for either bit to be set. */

  if( ( uxBits & ( CO2_READY_BIT | TEMP_HUM_READY_BIT ) ) == ( CO2_READY_BIT | TEMP_HUM_READY_BIT ) )
     354:	dc 01       	movw	r26, r24
     356:	cb 01       	movw	r24, r22
     358:	81 71       	andi	r24, 0x11	; 17
     35a:	99 27       	eor	r25, r25
     35c:	aa 27       	eor	r26, r26
     35e:	bb 27       	eor	r27, r27
     360:	41 97       	sbiw	r24, 0x11	; 17
     362:	a1 05       	cpc	r26, r1
     364:	b1 05       	cpc	r27, r1
     366:	89 f4       	brne	.+34     	; 0x38a <Application_aFunctionToWaitBits+0x62>
  {
      /* xEventGroupWaitBits() returned because both bits were set. */
	  printf("setting the bits, they are set \n");
     368:	8f e6       	ldi	r24, 0x6F	; 111
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	0e 94 67 36 	call	0x6cce	; 0x6cce <puts>
	  SensorDataPackageHandler_SetHumidity(hih820_getHumidityInUint16());
     370:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <hih820_getHumidityInUint16>
     374:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <SensorDataPackageHandler_SetHumidity>
	  SensorDataPackageHandler_SetTemperature(hih820_getTemperatureInUint16());
     378:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <hih820_getTemperatureInUint16>
     37c:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <SensorDataPackageHandler_SetTemperature>
	  SensorDataPackageHandler_SetCO2(CO2Sensor_getCO2InUint16());
     380:	59 d0       	rcall	.+178    	; 0x434 <CO2Sensor_getCO2InUint16>
     382:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <SensorDataPackageHandler_SetCO2>
	  Application_aFunctionToClearBits( xEventGroup );
     386:	ce 01       	movw	r24, r28
     388:	c9 df       	rcall	.-110    	; 0x31c <Application_aFunctionToClearBits>
  else
  {
      /* xEventGroupWaitBits() returned because xTicksToWait ticks passed
      without either BIT_0 or BIT_4 becoming set. */
  }
}
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	0f 91       	pop	r16
     390:	ff 90       	pop	r15
     392:	ef 90       	pop	r14
     394:	df 90       	pop	r13
     396:	cf 90       	pop	r12
     398:	08 95       	ret

0000039a <Application_handler_task>:
	,  Application_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void Application_handler_task(void *pvParameters)
{
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <Application_handler_task+0x6>
     3a0:	1f 92       	push	r1
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
	printf("startApplication \n");
     3a6:	8f e8       	ldi	r24, 0x8F	; 143
     3a8:	92 e0       	ldi	r25, 0x02	; 2
     3aa:	0e 94 67 36 	call	0x6cce	; 0x6cce <puts>
	(void)pvParameters;
	xCreatedEventGroup = xEventGroupCreate();
     3ae:	58 d1       	rcall	.+688    	; 0x660 <xEventGroupCreate>
     3b0:	90 93 bc 17 	sts	0x17BC, r25	; 0x8017bc <xCreatedEventGroup+0x1>
     3b4:	80 93 bb 17 	sts	0x17BB, r24	; 0x8017bb <xCreatedEventGroup>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300UL); // Upload message every 1 minutes (300 ms)
	xLastWakeTime = xTaskGetTickCount();
     3b8:	0e 94 e7 10 	call	0x21ce	; 0x21ce <xTaskGetTickCount>
     3bc:	69 83       	std	Y+1, r22	; 0x01
     3be:	7a 83       	std	Y+2, r23	; 0x02
     3c0:	8b 83       	std	Y+3, r24	; 0x03
     3c2:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     3c4:	42 e1       	ldi	r20, 0x12	; 18
     3c6:	50 e0       	ldi	r21, 0x00	; 0
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	ce 01       	movw	r24, r28
     3ce:	01 96       	adiw	r24, 0x01	; 1
     3d0:	0e 94 fd 12 	call	0x25fa	; 0x25fa <xTaskDelayUntil>
		// Was the event group created successfully?
		if( xCreatedEventGroup == NULL )
     3d4:	80 91 bb 17 	lds	r24, 0x17BB	; 0x8017bb <xCreatedEventGroup>
     3d8:	90 91 bc 17 	lds	r25, 0x17BC	; 0x8017bc <xCreatedEventGroup+0x1>
     3dc:	00 97       	sbiw	r24, 0x00	; 0
		// The event group was not created because there was insufficient
		// FreeRTOS heap available.
		}
		else
		{
			Application_aFunctionToWaitBits( xCreatedEventGroup);
     3de:	91 f3       	breq	.-28     	; 0x3c4 <Application_handler_task+0x2a>
     3e0:	a3 df       	rcall	.-186    	; 0x328 <Application_aFunctionToWaitBits>
     3e2:	f0 cf       	rjmp	.-32     	; 0x3c4 <Application_handler_task+0x2a>

000003e4 <Application_handler_initialise>:

/*-----------------------------------------------------------*/

void Application_handler_task( void *pvParameters );

void Application_handler_initialise(UBaseType_t Application_task_priority){
     3e4:	ef 92       	push	r14
     3e6:	ff 92       	push	r15
     3e8:	0f 93       	push	r16
	xTaskCreate(
     3ea:	e1 2c       	mov	r14, r1
     3ec:	f1 2c       	mov	r15, r1
     3ee:	08 2f       	mov	r16, r24
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	40 ec       	ldi	r20, 0xC0	; 192
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	61 ea       	ldi	r22, 0xA1	; 161
     3fa:	72 e0       	ldi	r23, 0x02	; 2
     3fc:	8d ec       	ldi	r24, 0xCD	; 205
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	0e 94 5d 10 	call	0x20ba	; 0x20ba <xTaskCreate>
	,  "ApplicationHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  Application_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     404:	0f 91       	pop	r16
     406:	ff 90       	pop	r15
     408:	ef 90       	pop	r14
     40a:	08 95       	ret

0000040c <CO2Sensor_handler_initialise>:
const TickType_t xFrequency_CO2 = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)


void CO2Sensor_handler_task( void *pvParameters );

void CO2Sensor_handler_initialise(UBaseType_t CO2_task_priority){
     40c:	ef 92       	push	r14
     40e:	ff 92       	push	r15
     410:	0f 93       	push	r16
	
	xTaskCreate(
     412:	e1 2c       	mov	r14, r1
     414:	f1 2c       	mov	r15, r1
     416:	08 2f       	mov	r16, r24
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	40 ec       	ldi	r20, 0xC0	; 192
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	61 eb       	ldi	r22, 0xB1	; 177
     422:	72 e0       	ldi	r23, 0x02	; 2
     424:	85 e2       	ldi	r24, 0x25	; 37
     426:	92 e0       	ldi	r25, 0x02	; 2
     428:	0e 94 5d 10 	call	0x20ba	; 0x20ba <xTaskCreate>
	,  "CO2Hand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  CO2_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     42c:	0f 91       	pop	r16
     42e:	ff 90       	pop	r15
     430:	ef 90       	pop	r14
     432:	08 95       	ret

00000434 <CO2Sensor_getCO2InUint16>:
}


uint16_t CO2Sensor_getCO2InUint16(){
	return CO2ppm;
}
     434:	80 91 c3 17 	lds	r24, 0x17C3	; 0x8017c3 <CO2ppm>
     438:	90 91 c4 17 	lds	r25, 0x17C4	; 0x8017c4 <CO2ppm+0x1>
     43c:	08 95       	ret

0000043e <CO2Sensor_aFunctionToSetBits>:
void CO2Sensor_aFunctionToSetBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Set bit 0  in xEventGroup. */
  uxBits = xEventGroupSetBits(
     43e:	41 e0       	ldi	r20, 0x01	; 1
     440:	50 e0       	ldi	r21, 0x00	; 0
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	dc c1       	rjmp	.+952    	; 0x800 <xEventGroupSetBits>
     448:	08 95       	ret

0000044a <CO2Sensor_handler_task>:
	,  NULL );
}

inline void CO2Sensor_init(void *pvParameters){
	(void)pvParameters;
	mh_z19_injectCallBack(NULL);
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <mh_z19_injectCallBack>
	xLastWakeTime = xTaskGetTickCount();
     452:	0e 94 e7 10 	call	0x21ce	; 0x21ce <xTaskGetTickCount>
     456:	60 93 be 17 	sts	0x17BE, r22	; 0x8017be <xLastWakeTime>
     45a:	70 93 bf 17 	sts	0x17BF, r23	; 0x8017bf <xLastWakeTime+0x1>
     45e:	80 93 c0 17 	sts	0x17C0, r24	; 0x8017c0 <xLastWakeTime+0x2>
     462:	90 93 c1 17 	sts	0x17C1, r25	; 0x8017c1 <xLastWakeTime+0x3>
}

inline void CO2Sensor_run(){
	xTaskDelayUntil( &xLastWakeTime, xFrequency_CO2 );
     466:	48 ea       	ldi	r20, 0xA8	; 168
     468:	58 e4       	ldi	r21, 0x48	; 72
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	8e eb       	ldi	r24, 0xBE	; 190
     470:	97 e1       	ldi	r25, 0x17	; 23
     472:	0e 94 fd 12 	call	0x25fa	; 0x25fa <xTaskDelayUntil>
	rc = mh_z19_takeMeassuring();
     476:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <mh_z19_takeMeassuring>
     47a:	80 93 bd 17 	sts	0x17BD, r24	; 0x8017bd <rc>
	if (rc == MHZ19_OK)
     47e:	81 11       	cpse	r24, r1
     480:	f2 cf       	rjmp	.-28     	; 0x466 <CO2Sensor_handler_task+0x1c>
	{
		vTaskDelay(50);
     482:	62 e3       	ldi	r22, 0x32	; 50
     484:	70 e0       	ldi	r23, 0x00	; 0
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 62 13 	call	0x26c4	; 0x26c4 <vTaskDelay>
		if(getCO2return == MHZ19_OK){
     48e:	80 91 c2 17 	lds	r24, 0x17C2	; 0x8017c2 <getCO2return>
     492:	81 11       	cpse	r24, r1
     494:	09 c0       	rjmp	.+18     	; 0x4a8 <CO2Sensor_handler_task+0x5e>
			getCO2return = mh_z19_getCo2Ppm(&CO2ppm);
     496:	83 ec       	ldi	r24, 0xC3	; 195
     498:	97 e1       	ldi	r25, 0x17	; 23
     49a:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <mh_z19_getCo2Ppm>
     49e:	80 93 c2 17 	sts	0x17C2, r24	; 0x8017c2 <getCO2return>
			CO2Sensor_aFunctionToSetBits(Application_getEventGroup());
     4a2:	37 df       	rcall	.-402    	; 0x312 <Application_getEventGroup>
     4a4:	cc df       	rcall	.-104    	; 0x43e <CO2Sensor_aFunctionToSetBits>
     4a6:	df cf       	rjmp	.-66     	; 0x466 <CO2Sensor_handler_task+0x1c>
		}
		else if(getCO2return == MHZ19_NO_MEASSURING_AVAILABLE){
     4a8:	81 30       	cpi	r24, 0x01	; 1
     4aa:	e9 f6       	brne	.-70     	; 0x466 <CO2Sensor_handler_task+0x1c>
			printf("Didn't get the measurements");
     4ac:	89 eb       	ldi	r24, 0xB9	; 185
     4ae:	92 e0       	ldi	r25, 0x02	; 2
     4b0:	9f 93       	push	r25
     4b2:	8f 93       	push	r24
     4b4:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <printf>
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	d4 cf       	rjmp	.-88     	; 0x466 <CO2Sensor_handler_task+0x1c>

000004be <configuration_create>:
	}
}

uint8_t configuration_get_humidity_data(){
	return humidity_setting;
}
     4be:	80 91 62 08 	lds	r24, 0x0862	; 0x800862 <__data_end>
     4c2:	90 91 63 08 	lds	r25, 0x0863	; 0x800863 <__data_end+0x1>
     4c6:	89 2b       	or	r24, r25
     4c8:	31 f4       	brne	.+12     	; 0x4d6 <configuration_create+0x18>
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	0a d7       	rcall	.+3604   	; 0x12e2 <xQueueCreateMutex>
     4ce:	90 93 63 08 	sts	0x0863, r25	; 0x800863 <__data_end+0x1>
     4d2:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__data_end>
     4d6:	08 95       	ret

000004d8 <configuration_get_windows_data>:
     4d8:	80 91 c6 17 	lds	r24, 0x17C6	; 0x8017c6 <windows_settings>
     4dc:	08 95       	ret

000004de <configuration_set_windows_data>:
     4de:	cf 93       	push	r28
     4e0:	c8 2f       	mov	r28, r24
     4e2:	1f 92       	push	r1
     4e4:	8f 93       	push	r24
     4e6:	85 ed       	ldi	r24, 0xD5	; 213
     4e8:	92 e0       	ldi	r25, 0x02	; 2
     4ea:	9f 93       	push	r25
     4ec:	8f 93       	push	r24
     4ee:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <printf>
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	c1 11       	cpse	r28, r1
     4fc:	04 c0       	rjmp	.+8      	; 0x506 <configuration_set_windows_data+0x28>
     4fe:	8c e9       	ldi	r24, 0x9C	; 156
     500:	80 93 c6 17 	sts	0x17C6, r24	; 0x8017c6 <windows_settings>
     504:	03 c0       	rjmp	.+6      	; 0x50c <configuration_set_windows_data+0x2e>
     506:	84 e6       	ldi	r24, 0x64	; 100
     508:	80 93 c6 17 	sts	0x17C6, r24	; 0x8017c6 <windows_settings>
     50c:	cf 91       	pop	r28
     50e:	08 95       	ret

00000510 <configuration_set_humidity_data>:

void configuration_set_humidity_data(uint8_t value){
     510:	cf 93       	push	r28
     512:	c8 2f       	mov	r28, r24
	printf("Setting humidity data to: %d\n",value);
     514:	1f 92       	push	r1
     516:	8f 93       	push	r24
     518:	8d ee       	ldi	r24, 0xED	; 237
     51a:	92 e0       	ldi	r25, 0x02	; 2
     51c:	9f 93       	push	r25
     51e:	8f 93       	push	r24
     520:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <printf>
	if(value == 0){
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
     52a:	0f 90       	pop	r0
     52c:	c1 11       	cpse	r28, r1
     52e:	04 c0       	rjmp	.+8      	; 0x538 <configuration_set_humidity_data+0x28>
		humidity_setting = -100;
     530:	8c e9       	ldi	r24, 0x9C	; 156
     532:	80 93 c5 17 	sts	0x17C5, r24	; 0x8017c5 <humidity_setting>
     536:	03 c0       	rjmp	.+6      	; 0x53e <configuration_set_humidity_data+0x2e>
	}else{
		humidity_setting = 100;
     538:	84 e6       	ldi	r24, 0x64	; 100
     53a:	80 93 c5 17 	sts	0x17C5, r24	; 0x8017c5 <humidity_setting>
	}
}
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <get_mutex>:

SemaphoreHandle_t get_mutex(){
	return _configurationSemaphore ;
     542:	80 91 62 08 	lds	r24, 0x0862	; 0x800862 <__data_end>
     546:	90 91 63 08 	lds	r25, 0x0863	; 0x800863 <__data_end+0x1>
     54a:	08 95       	ret

0000054c <DownLinkHandler_lora_handler_task>:
	,  NULL );
}

void DownLinkHandler_lora_handler_task( void *pvParameters )
{
	configuration_create();
     54c:	b8 df       	rcall	.-144    	; 0x4be <configuration_create>
	SemaphoreHandle_t semaphore_mutex = get_mutex();
     54e:	f9 df       	rcall	.-14     	; 0x542 <get_mutex>
     550:	7c 01       	movw	r14, r24
     552:	00 e0       	ldi	r16, 0x00	; 0
	xSemaphoreGive(semaphore_mutex);
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	a9 01       	movw	r20, r18
     55a:	60 e0       	ldi	r22, 0x00	; 0
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	1d d6       	rcall	.+3130   	; 0x119a <xQueueGenericSend>
     560:	8b e0       	ldi	r24, 0x0B	; 11
	
	for(;;)
	{
		printf("start LoraDownlink Task\n");
     562:	93 e0       	ldi	r25, 0x03	; 3
     564:	0e 94 67 36 	call	0x6cce	; 0x6cce <puts>
     568:	83 e0       	ldi	r24, 0x03	; 3
		status_leds_shortPuls(led_ST4);  // OPTIONAL
     56a:	0e 94 02 2c 	call	0x5804	; 0x5804 <status_leds_shortPuls>
     56e:	0f ef       	ldi	r16, 0xFF	; 255
		xMessageBufferReceive(_downLinkMessageBufferHandle, &_downlink_payload, sizeof(lora_driver_payload_t), portMAX_DELAY);
     570:	1f ef       	ldi	r17, 0xFF	; 255
     572:	98 01       	movw	r18, r16
     574:	46 e1       	ldi	r20, 0x16	; 22
     576:	50 e0       	ldi	r21, 0x00	; 0
     578:	66 e6       	ldi	r22, 0x66	; 102
     57a:	78 e0       	ldi	r23, 0x08	; 8
     57c:	80 91 c7 17 	lds	r24, 0x17C7	; 0x8017c7 <_downLinkMessageBufferHandle>
     580:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <_downLinkMessageBufferHandle+0x1>
     584:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <xStreamBufferReceive>
     588:	c6 e6       	ldi	r28, 0x66	; 102
		printf("DOWN LINK: from port: %d with %d bytes received!\n", _downlink_payload.portNo, _downlink_payload.len); // Just for Debug
     58a:	d8 e0       	ldi	r29, 0x08	; 8
     58c:	99 81       	ldd	r25, Y+1	; 0x01
     58e:	88 81       	ld	r24, Y
     590:	1f 92       	push	r1
     592:	9f 93       	push	r25
     594:	1f 92       	push	r1
     596:	8f 93       	push	r24
     598:	83 e2       	ldi	r24, 0x23	; 35
     59a:	93 e0       	ldi	r25, 0x03	; 3
     59c:	9f 93       	push	r25
     59e:	8f 93       	push	r24
     5a0:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <printf>
     5a4:	89 81       	ldd	r24, Y+1	; 0x01
		if (4 == _downlink_payload.len) // Check that we have got the expected 4 bytes
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	84 30       	cpi	r24, 0x04	; 4
     5b4:	a9 f6       	brne	.-86     	; 0x560 <DownLinkHandler_lora_handler_task+0x14>
     5b6:	8c 81       	ldd	r24, Y+4	; 0x04
		{
			// decode the payload into our variables
			humDataSetting  = (_downlink_payload.bytes[2]);
     5b8:	80 93 64 08 	sts	0x0864, r24	; 0x800864 <humDataSetting>
     5bc:	8d 81       	ldd	r24, Y+5	; 0x05
			windowDataSetting = (_downlink_payload.bytes[3]);	
     5be:	80 93 65 08 	sts	0x0865, r24	; 0x800865 <windowDataSetting>
     5c2:	4f ef       	ldi	r20, 0xFF	; 255
			for(;;){
				if(xSemaphoreTake(semaphore_mutex, portMAX_DELAY)){
     5c4:	5f ef       	ldi	r21, 0xFF	; 255
     5c6:	ba 01       	movw	r22, r20
     5c8:	c7 01       	movw	r24, r14
     5ca:	61 d7       	rcall	.+3778   	; 0x148e <xQueueSemaphoreTake>
     5cc:	88 23       	and	r24, r24
     5ce:	c9 f3       	breq	.-14     	; 0x5c2 <DownLinkHandler_lora_handler_task+0x76>
					configuration_set_windows_data(windowDataSetting);
     5d0:	80 91 65 08 	lds	r24, 0x0865	; 0x800865 <windowDataSetting>
     5d4:	84 df       	rcall	.-248    	; 0x4de <configuration_set_windows_data>
					configuration_set_humidity_data(humDataSetting);
     5d6:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <humDataSetting>
     5da:	9a df       	rcall	.-204    	; 0x510 <configuration_set_humidity_data>
     5dc:	00 e0       	ldi	r16, 0x00	; 0
					xSemaphoreGive(semaphore_mutex);
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	a9 01       	movw	r20, r18
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	c7 01       	movw	r24, r14
     5ea:	d7 d5       	rcall	.+2990   	; 0x119a <xQueueGenericSend>
     5ec:	b9 cf       	rjmp	.-142    	; 0x560 <DownLinkHandler_lora_handler_task+0x14>

000005ee <DownLinkHandler_lora_handler_initialise>:
					break;
     5ee:	ef 92       	push	r14
MessageBufferHandle_t _downLinkMessageBufferHandle;



void DownLinkHandler_lora_handler_initialise(UBaseType_t DownLinkHandler_lora_handler_task_priority, MessageBufferHandle_t downLinkMessageBufferHandle)
{
     5f0:	ff 92       	push	r15
     5f2:	0f 93       	push	r16
	_downLinkMessageBufferHandle = downLinkMessageBufferHandle;
     5f4:	70 93 c8 17 	sts	0x17C8, r23	; 0x8017c8 <_downLinkMessageBufferHandle+0x1>
     5f8:	60 93 c7 17 	sts	0x17C7, r22	; 0x8017c7 <_downLinkMessageBufferHandle>
	xTaskCreate(
     5fc:	e1 2c       	mov	r14, r1
     5fe:	f1 2c       	mov	r15, r1
     600:	08 2f       	mov	r16, r24
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	48 e8       	ldi	r20, 0x88	; 136
     608:	51 e0       	ldi	r21, 0x01	; 1
     60a:	65 e5       	ldi	r22, 0x55	; 85
     60c:	73 e0       	ldi	r23, 0x03	; 3
     60e:	86 ea       	ldi	r24, 0xA6	; 166
     610:	92 e0       	ldi	r25, 0x02	; 2
     612:	0e 94 5d 10 	call	0x20ba	; 0x20ba <xTaskCreate>
	,  "DownLinkHandler"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  DownLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     616:	0f 91       	pop	r16
     618:	ff 90       	pop	r15
     61a:	ef 90       	pop	r14
     61c:	08 95       	ret

0000061e <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     61e:	0f 93       	push	r16
     620:	01 11       	cpse	r16, r1
     622:	0c c0       	rjmp	.+24     	; 0x63c <prvTestWaitCondition+0x1e>
     624:	dc 01       	movw	r26, r24
     626:	cb 01       	movw	r24, r22
     628:	82 23       	and	r24, r18
     62a:	93 23       	and	r25, r19
     62c:	a4 23       	and	r26, r20
     62e:	b5 23       	and	r27, r21
     630:	89 2b       	or	r24, r25
     632:	8a 2b       	or	r24, r26
     634:	8b 2b       	or	r24, r27
     636:	79 f4       	brne	.+30     	; 0x656 <prvTestWaitCondition+0x38>
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	10 c0       	rjmp	.+32     	; 0x65c <prvTestWaitCondition+0x3e>
     63c:	dc 01       	movw	r26, r24
     63e:	cb 01       	movw	r24, r22
     640:	82 23       	and	r24, r18
     642:	93 23       	and	r25, r19
     644:	a4 23       	and	r26, r20
     646:	b5 23       	and	r27, r21
     648:	28 17       	cp	r18, r24
     64a:	39 07       	cpc	r19, r25
     64c:	4a 07       	cpc	r20, r26
     64e:	5b 07       	cpc	r21, r27
     650:	21 f0       	breq	.+8      	; 0x65a <prvTestWaitCondition+0x3c>
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	03 c0       	rjmp	.+6      	; 0x65c <prvTestWaitCondition+0x3e>
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	01 c0       	rjmp	.+2      	; 0x65c <prvTestWaitCondition+0x3e>
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	0f 91       	pop	r16
     65e:	08 95       	ret

00000660 <xEventGroupCreate>:
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	8f e0       	ldi	r24, 0x0F	; 15
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	cc d1       	rcall	.+920    	; 0xa02 <pvPortMalloc>
     66a:	ec 01       	movw	r28, r24
     66c:	00 97       	sbiw	r24, 0x00	; 0
     66e:	39 f0       	breq	.+14     	; 0x67e <xEventGroupCreate+0x1e>
     670:	fc 01       	movw	r30, r24
     672:	11 92       	st	Z+, r1
     674:	11 92       	st	Z+, r1
     676:	11 92       	st	Z+, r1
     678:	11 92       	st	Z+, r1
     67a:	cf 01       	movw	r24, r30
     67c:	a8 d2       	rcall	.+1360   	; 0xbce <vListInitialise>
     67e:	ce 01       	movw	r24, r28
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	08 95       	ret

00000686 <xEventGroupWaitBits>:
     686:	2f 92       	push	r2
     688:	3f 92       	push	r3
     68a:	4f 92       	push	r4
     68c:	5f 92       	push	r5
     68e:	6f 92       	push	r6
     690:	7f 92       	push	r7
     692:	8f 92       	push	r8
     694:	9f 92       	push	r9
     696:	af 92       	push	r10
     698:	bf 92       	push	r11
     69a:	cf 92       	push	r12
     69c:	df 92       	push	r13
     69e:	ef 92       	push	r14
     6a0:	ff 92       	push	r15
     6a2:	0f 93       	push	r16
     6a4:	1f 93       	push	r17
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	ec 01       	movw	r28, r24
     6ac:	4a 01       	movw	r8, r20
     6ae:	5b 01       	movw	r10, r22
     6b0:	62 2e       	mov	r6, r18
     6b2:	70 2e       	mov	r7, r16
     6b4:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <vTaskSuspendAll>
     6b8:	28 80       	ld	r2, Y
     6ba:	39 80       	ldd	r3, Y+1	; 0x01
     6bc:	4a 80       	ldd	r4, Y+2	; 0x02
     6be:	5b 80       	ldd	r5, Y+3	; 0x03
     6c0:	a5 01       	movw	r20, r10
     6c2:	94 01       	movw	r18, r8
     6c4:	c2 01       	movw	r24, r4
     6c6:	b1 01       	movw	r22, r2
     6c8:	aa df       	rcall	.-172    	; 0x61e <prvTestWaitCondition>
     6ca:	88 23       	and	r24, r24
     6cc:	a1 f0       	breq	.+40     	; 0x6f6 <xEventGroupWaitBits+0x70>
     6ce:	66 20       	and	r6, r6
     6d0:	89 f1       	breq	.+98     	; 0x734 <xEventGroupWaitBits+0xae>
     6d2:	d5 01       	movw	r26, r10
     6d4:	c4 01       	movw	r24, r8
     6d6:	80 95       	com	r24
     6d8:	90 95       	com	r25
     6da:	a0 95       	com	r26
     6dc:	b0 95       	com	r27
     6de:	82 21       	and	r24, r2
     6e0:	93 21       	and	r25, r3
     6e2:	a4 21       	and	r26, r4
     6e4:	b5 21       	and	r27, r5
     6e6:	88 83       	st	Y, r24
     6e8:	99 83       	std	Y+1, r25	; 0x01
     6ea:	aa 83       	std	Y+2, r26	; 0x02
     6ec:	bb 83       	std	Y+3, r27	; 0x03
     6ee:	c1 2c       	mov	r12, r1
     6f0:	d1 2c       	mov	r13, r1
     6f2:	76 01       	movw	r14, r12
     6f4:	22 c0       	rjmp	.+68     	; 0x73a <xEventGroupWaitBits+0xb4>
     6f6:	c1 14       	cp	r12, r1
     6f8:	d1 04       	cpc	r13, r1
     6fa:	e1 04       	cpc	r14, r1
     6fc:	f1 04       	cpc	r15, r1
     6fe:	e9 f0       	breq	.+58     	; 0x73a <xEventGroupWaitBits+0xb4>
     700:	61 10       	cpse	r6, r1
     702:	04 c0       	rjmp	.+8      	; 0x70c <xEventGroupWaitBits+0x86>
     704:	40 e0       	ldi	r20, 0x00	; 0
     706:	50 e0       	ldi	r21, 0x00	; 0
     708:	ba 01       	movw	r22, r20
     70a:	04 c0       	rjmp	.+8      	; 0x714 <xEventGroupWaitBits+0x8e>
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	71 e0       	ldi	r23, 0x01	; 1
     714:	71 10       	cpse	r7, r1
     716:	74 60       	ori	r23, 0x04	; 4
     718:	48 29       	or	r20, r8
     71a:	59 29       	or	r21, r9
     71c:	6a 29       	or	r22, r10
     71e:	7b 29       	or	r23, r11
     720:	97 01       	movw	r18, r14
     722:	86 01       	movw	r16, r12
     724:	ce 01       	movw	r24, r28
     726:	04 96       	adiw	r24, 0x04	; 4
     728:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <vTaskPlaceOnUnorderedEventList>
     72c:	21 2c       	mov	r2, r1
     72e:	31 2c       	mov	r3, r1
     730:	21 01       	movw	r4, r2
     732:	03 c0       	rjmp	.+6      	; 0x73a <xEventGroupWaitBits+0xb4>
     734:	c1 2c       	mov	r12, r1
     736:	d1 2c       	mov	r13, r1
     738:	76 01       	movw	r14, r12
     73a:	0e 94 21 12 	call	0x2442	; 0x2442 <xTaskResumeAll>
     73e:	cd 28       	or	r12, r13
     740:	ce 28       	or	r12, r14
     742:	cf 28       	or	r12, r15
     744:	59 f1       	breq	.+86     	; 0x79c <xEventGroupWaitBits+0x116>
     746:	81 11       	cpse	r24, r1
     748:	01 c0       	rjmp	.+2      	; 0x74c <xEventGroupWaitBits+0xc6>
     74a:	0f d3       	rcall	.+1566   	; 0xd6a <vPortYield>
     74c:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uxTaskResetEventItemValue>
     750:	6b 01       	movw	r12, r22
     752:	7c 01       	movw	r14, r24
     754:	91 fd       	sbrc	r25, 1
     756:	1f c0       	rjmp	.+62     	; 0x796 <xEventGroupWaitBits+0x110>
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	0f 92       	push	r0
     75e:	c8 80       	ld	r12, Y
     760:	d9 80       	ldd	r13, Y+1	; 0x01
     762:	ea 80       	ldd	r14, Y+2	; 0x02
     764:	fb 80       	ldd	r15, Y+3	; 0x03
     766:	07 2d       	mov	r16, r7
     768:	a5 01       	movw	r20, r10
     76a:	94 01       	movw	r18, r8
     76c:	c7 01       	movw	r24, r14
     76e:	b6 01       	movw	r22, r12
     770:	56 df       	rcall	.-340    	; 0x61e <prvTestWaitCondition>
     772:	88 23       	and	r24, r24
     774:	71 f0       	breq	.+28     	; 0x792 <xEventGroupWaitBits+0x10c>
     776:	66 20       	and	r6, r6
     778:	61 f0       	breq	.+24     	; 0x792 <xEventGroupWaitBits+0x10c>
     77a:	80 94       	com	r8
     77c:	90 94       	com	r9
     77e:	a0 94       	com	r10
     780:	b0 94       	com	r11
     782:	8c 20       	and	r8, r12
     784:	9d 20       	and	r9, r13
     786:	ae 20       	and	r10, r14
     788:	bf 20       	and	r11, r15
     78a:	88 82       	st	Y, r8
     78c:	99 82       	std	Y+1, r9	; 0x01
     78e:	aa 82       	std	Y+2, r10	; 0x02
     790:	bb 82       	std	Y+3, r11	; 0x03
     792:	0f 90       	pop	r0
     794:	0f be       	out	0x3f, r0	; 63
     796:	16 01       	movw	r2, r12
     798:	27 01       	movw	r4, r14
     79a:	55 24       	eor	r5, r5
     79c:	c2 01       	movw	r24, r4
     79e:	b1 01       	movw	r22, r2
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	ff 90       	pop	r15
     7aa:	ef 90       	pop	r14
     7ac:	df 90       	pop	r13
     7ae:	cf 90       	pop	r12
     7b0:	bf 90       	pop	r11
     7b2:	af 90       	pop	r10
     7b4:	9f 90       	pop	r9
     7b6:	8f 90       	pop	r8
     7b8:	7f 90       	pop	r7
     7ba:	6f 90       	pop	r6
     7bc:	5f 90       	pop	r5
     7be:	4f 90       	pop	r4
     7c0:	3f 90       	pop	r3
     7c2:	2f 90       	pop	r2
     7c4:	08 95       	ret

000007c6 <xEventGroupClearBits>:
     7c6:	0f 93       	push	r16
     7c8:	1f 93       	push	r17
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	f8 94       	cli
     7ce:	0f 92       	push	r0
     7d0:	fc 01       	movw	r30, r24
     7d2:	00 81       	ld	r16, Z
     7d4:	11 81       	ldd	r17, Z+1	; 0x01
     7d6:	22 81       	ldd	r18, Z+2	; 0x02
     7d8:	33 81       	ldd	r19, Z+3	; 0x03
     7da:	40 95       	com	r20
     7dc:	50 95       	com	r21
     7de:	60 95       	com	r22
     7e0:	70 95       	com	r23
     7e2:	40 23       	and	r20, r16
     7e4:	51 23       	and	r21, r17
     7e6:	62 23       	and	r22, r18
     7e8:	73 23       	and	r23, r19
     7ea:	40 83       	st	Z, r20
     7ec:	51 83       	std	Z+1, r21	; 0x01
     7ee:	62 83       	std	Z+2, r22	; 0x02
     7f0:	73 83       	std	Z+3, r23	; 0x03
     7f2:	0f 90       	pop	r0
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	c9 01       	movw	r24, r18
     7f8:	b8 01       	movw	r22, r16
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	08 95       	ret

00000800 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     800:	4f 92       	push	r4
     802:	5f 92       	push	r5
     804:	6f 92       	push	r6
     806:	7f 92       	push	r7
     808:	af 92       	push	r10
     80a:	bf 92       	push	r11
     80c:	cf 92       	push	r12
     80e:	df 92       	push	r13
     810:	ef 92       	push	r14
     812:	ff 92       	push	r15
     814:	0f 93       	push	r16
     816:	1f 93       	push	r17
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	ec 01       	movw	r28, r24
     81e:	6a 01       	movw	r12, r20
     820:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     822:	8c 01       	movw	r16, r24
     824:	09 5f       	subi	r16, 0xF9	; 249
     826:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     828:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     82c:	eb 85       	ldd	r30, Y+11	; 0x0b
     82e:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     830:	88 81       	ld	r24, Y
     832:	99 81       	ldd	r25, Y+1	; 0x01
     834:	aa 81       	ldd	r26, Y+2	; 0x02
     836:	bb 81       	ldd	r27, Y+3	; 0x03
     838:	c8 2a       	or	r12, r24
     83a:	d9 2a       	or	r13, r25
     83c:	ea 2a       	or	r14, r26
     83e:	fb 2a       	or	r15, r27
     840:	c8 82       	st	Y, r12
     842:	d9 82       	std	Y+1, r13	; 0x01
     844:	ea 82       	std	Y+2, r14	; 0x02
     846:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     848:	c1 2c       	mov	r12, r1
     84a:	d1 2c       	mov	r13, r1
     84c:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     84e:	3d c0       	rjmp	.+122    	; 0x8ca <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     850:	a4 80       	ldd	r10, Z+4	; 0x04
     852:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     854:	80 81       	ld	r24, Z
     856:	91 81       	ldd	r25, Z+1	; 0x01
     858:	a2 81       	ldd	r26, Z+2	; 0x02
     85a:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     85c:	ac 01       	movw	r20, r24
     85e:	bd 01       	movw	r22, r26
     860:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     862:	b2 fd       	sbrc	r27, 2
     864:	0e c0       	rjmp	.+28     	; 0x882 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     866:	48 80       	ld	r4, Y
     868:	59 80       	ldd	r5, Y+1	; 0x01
     86a:	6a 80       	ldd	r6, Y+2	; 0x02
     86c:	7b 80       	ldd	r7, Y+3	; 0x03
     86e:	44 22       	and	r4, r20
     870:	55 22       	and	r5, r21
     872:	66 22       	and	r6, r22
     874:	77 22       	and	r7, r23
     876:	45 28       	or	r4, r5
     878:	46 28       	or	r4, r6
     87a:	47 28       	or	r4, r7
     87c:	89 f4       	brne	.+34     	; 0x8a0 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	12 c0       	rjmp	.+36     	; 0x8a6 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     882:	48 80       	ld	r4, Y
     884:	59 80       	ldd	r5, Y+1	; 0x01
     886:	6a 80       	ldd	r6, Y+2	; 0x02
     888:	7b 80       	ldd	r7, Y+3	; 0x03
     88a:	44 22       	and	r4, r20
     88c:	55 22       	and	r5, r21
     88e:	66 22       	and	r6, r22
     890:	77 22       	and	r7, r23
     892:	44 15       	cp	r20, r4
     894:	55 05       	cpc	r21, r5
     896:	66 05       	cpc	r22, r6
     898:	77 05       	cpc	r23, r7
     89a:	21 f0       	breq	.+8      	; 0x8a4 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     89c:	20 e0       	ldi	r18, 0x00	; 0
     89e:	03 c0       	rjmp	.+6      	; 0x8a6 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     8a0:	21 e0       	ldi	r18, 0x01	; 1
     8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     8a4:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     8a6:	22 23       	and	r18, r18
     8a8:	71 f0       	breq	.+28     	; 0x8c6 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     8aa:	b0 ff       	sbrs	r27, 0
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     8ae:	c4 2a       	or	r12, r20
     8b0:	d5 2a       	or	r13, r21
     8b2:	e6 2a       	or	r14, r22
     8b4:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     8b6:	48 81       	ld	r20, Y
     8b8:	59 81       	ldd	r21, Y+1	; 0x01
     8ba:	6a 81       	ldd	r22, Y+2	; 0x02
     8bc:	7b 81       	ldd	r23, Y+3	; 0x03
     8be:	72 60       	ori	r23, 0x02	; 2
     8c0:	cf 01       	movw	r24, r30
     8c2:	0e 94 34 15 	call	0x2a68	; 0x2a68 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     8c6:	ea 2d       	mov	r30, r10
     8c8:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     8ca:	e0 17       	cp	r30, r16
     8cc:	f1 07       	cpc	r31, r17
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <xEventGroupSetBits+0xd2>
     8d0:	bf cf       	rjmp	.-130    	; 0x850 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     8d2:	c0 94       	com	r12
     8d4:	d0 94       	com	r13
     8d6:	e0 94       	com	r14
     8d8:	f0 94       	com	r15
     8da:	88 81       	ld	r24, Y
     8dc:	99 81       	ldd	r25, Y+1	; 0x01
     8de:	aa 81       	ldd	r26, Y+2	; 0x02
     8e0:	bb 81       	ldd	r27, Y+3	; 0x03
     8e2:	c8 22       	and	r12, r24
     8e4:	d9 22       	and	r13, r25
     8e6:	ea 22       	and	r14, r26
     8e8:	fb 22       	and	r15, r27
     8ea:	c8 82       	st	Y, r12
     8ec:	d9 82       	std	Y+1, r13	; 0x01
     8ee:	ea 82       	std	Y+2, r14	; 0x02
     8f0:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     8f2:	0e 94 21 12 	call	0x2442	; 0x2442 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     8f6:	68 81       	ld	r22, Y
     8f8:	79 81       	ldd	r23, Y+1	; 0x01
     8fa:	8a 81       	ldd	r24, Y+2	; 0x02
     8fc:	9b 81       	ldd	r25, Y+3	; 0x03
}
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	ff 90       	pop	r15
     908:	ef 90       	pop	r14
     90a:	df 90       	pop	r13
     90c:	cf 90       	pop	r12
     90e:	bf 90       	pop	r11
     910:	af 90       	pop	r10
     912:	7f 90       	pop	r7
     914:	6f 90       	pop	r6
     916:	5f 90       	pop	r5
     918:	4f 90       	pop	r4
     91a:	08 95       	ret

0000091c <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     91c:	e8 e8       	ldi	r30, 0x88	; 136
     91e:	f8 e0       	ldi	r31, 0x08	; 8
     920:	ac e8       	ldi	r26, 0x8C	; 140
     922:	b8 e0       	ldi	r27, 0x08	; 8
     924:	b1 83       	std	Z+1, r27	; 0x01
     926:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     928:	13 82       	std	Z+3, r1	; 0x03
     92a:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     92c:	e8 e0       	ldi	r30, 0x08	; 8
     92e:	f5 e1       	ldi	r31, 0x15	; 21
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     930:	f0 93 87 08 	sts	0x0887, r31	; 0x800887 <pxEnd+0x1>
     934:	e0 93 86 08 	sts	0x0886, r30	; 0x800886 <pxEnd>
    pxEnd->xBlockSize = 0;
     938:	13 82       	std	Z+3, r1	; 0x03
     93a:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     93c:	11 82       	std	Z+1, r1	; 0x01
     93e:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     940:	8c e7       	ldi	r24, 0x7C	; 124
     942:	9c e0       	ldi	r25, 0x0C	; 12
     944:	13 96       	adiw	r26, 0x03	; 3
     946:	9c 93       	st	X, r25
     948:	8e 93       	st	-X, r24
     94a:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     94c:	ed 93       	st	X+, r30
     94e:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     950:	90 93 83 08 	sts	0x0883, r25	; 0x800883 <xMinimumEverFreeBytesRemaining+0x1>
     954:	80 93 82 08 	sts	0x0882, r24	; 0x800882 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     958:	90 93 85 08 	sts	0x0885, r25	; 0x800885 <xFreeBytesRemaining+0x1>
     95c:	80 93 84 08 	sts	0x0884, r24	; 0x800884 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e8       	ldi	r25, 0x80	; 128
     964:	90 93 7d 08 	sts	0x087D, r25	; 0x80087d <xBlockAllocatedBit+0x1>
     968:	80 93 7c 08 	sts	0x087C, r24	; 0x80087c <xBlockAllocatedBit>
     96c:	08 95       	ret

0000096e <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     974:	a8 e8       	ldi	r26, 0x88	; 136
     976:	b8 e0       	ldi	r27, 0x08	; 8
     978:	01 c0       	rjmp	.+2      	; 0x97c <prvInsertBlockIntoFreeList+0xe>
     97a:	df 01       	movw	r26, r30
     97c:	ed 91       	ld	r30, X+
     97e:	fc 91       	ld	r31, X
     980:	11 97       	sbiw	r26, 0x01	; 1
     982:	ec 17       	cp	r30, r28
     984:	fd 07       	cpc	r31, r29
     986:	c8 f3       	brcs	.-14     	; 0x97a <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     988:	12 96       	adiw	r26, 0x02	; 2
     98a:	8d 91       	ld	r24, X+
     98c:	9c 91       	ld	r25, X
     98e:	13 97       	sbiw	r26, 0x03	; 3
     990:	9d 01       	movw	r18, r26
     992:	28 0f       	add	r18, r24
     994:	39 1f       	adc	r19, r25
     996:	c2 17       	cp	r28, r18
     998:	d3 07       	cpc	r29, r19
     99a:	49 f4       	brne	.+18     	; 0x9ae <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     99c:	2a 81       	ldd	r18, Y+2	; 0x02
     99e:	3b 81       	ldd	r19, Y+3	; 0x03
     9a0:	82 0f       	add	r24, r18
     9a2:	93 1f       	adc	r25, r19
     9a4:	13 96       	adiw	r26, 0x03	; 3
     9a6:	9c 93       	st	X, r25
     9a8:	8e 93       	st	-X, r24
     9aa:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     9ac:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     9ae:	8a 81       	ldd	r24, Y+2	; 0x02
     9b0:	9b 81       	ldd	r25, Y+3	; 0x03
     9b2:	9e 01       	movw	r18, r28
     9b4:	28 0f       	add	r18, r24
     9b6:	39 1f       	adc	r19, r25
     9b8:	e2 17       	cp	r30, r18
     9ba:	f3 07       	cpc	r31, r19
     9bc:	c1 f4       	brne	.+48     	; 0x9ee <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     9be:	20 91 86 08 	lds	r18, 0x0886	; 0x800886 <pxEnd>
     9c2:	30 91 87 08 	lds	r19, 0x0887	; 0x800887 <pxEnd+0x1>
     9c6:	e2 17       	cp	r30, r18
     9c8:	f3 07       	cpc	r31, r19
     9ca:	71 f0       	breq	.+28     	; 0x9e8 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     9cc:	22 81       	ldd	r18, Z+2	; 0x02
     9ce:	33 81       	ldd	r19, Z+3	; 0x03
     9d0:	82 0f       	add	r24, r18
     9d2:	93 1f       	adc	r25, r19
     9d4:	9b 83       	std	Y+3, r25	; 0x03
     9d6:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     9d8:	ed 91       	ld	r30, X+
     9da:	fc 91       	ld	r31, X
     9dc:	11 97       	sbiw	r26, 0x01	; 1
     9de:	80 81       	ld	r24, Z
     9e0:	91 81       	ldd	r25, Z+1	; 0x01
     9e2:	99 83       	std	Y+1, r25	; 0x01
     9e4:	88 83       	st	Y, r24
     9e6:	05 c0       	rjmp	.+10     	; 0x9f2 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     9e8:	39 83       	std	Y+1, r19	; 0x01
     9ea:	28 83       	st	Y, r18
     9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     9ee:	f9 83       	std	Y+1, r31	; 0x01
     9f0:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     9f2:	ca 17       	cp	r28, r26
     9f4:	db 07       	cpc	r29, r27
     9f6:	11 f0       	breq	.+4      	; 0x9fc <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     9f8:	cd 93       	st	X+, r28
     9fa:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	08 95       	ret

00000a02 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     a02:	ef 92       	push	r14
     a04:	ff 92       	push	r15
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     a10:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     a14:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <pxEnd>
     a18:	90 91 87 08 	lds	r25, 0x0887	; 0x800887 <pxEnd+0x1>
     a1c:	89 2b       	or	r24, r25
     a1e:	09 f4       	brne	.+2      	; 0xa22 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     a20:	7d df       	rcall	.-262    	; 0x91c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     a22:	80 91 7c 08 	lds	r24, 0x087C	; 0x80087c <xBlockAllocatedBit>
     a26:	90 91 7d 08 	lds	r25, 0x087D	; 0x80087d <xBlockAllocatedBit+0x1>
     a2a:	80 23       	and	r24, r16
     a2c:	91 23       	and	r25, r17
     a2e:	89 2b       	or	r24, r25
     a30:	09 f0       	breq	.+2      	; 0xa34 <pvPortMalloc+0x32>
     a32:	76 c0       	rjmp	.+236    	; 0xb20 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     a34:	01 15       	cp	r16, r1
     a36:	11 05       	cpc	r17, r1
     a38:	49 f0       	breq	.+18     	; 0xa4c <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     a3a:	c8 01       	movw	r24, r16
     a3c:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     a3e:	08 17       	cp	r16, r24
     a40:	19 07       	cpc	r17, r25
     a42:	18 f0       	brcs	.+6      	; 0xa4a <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     a44:	00 e0       	ldi	r16, 0x00	; 0
     a46:	10 e0       	ldi	r17, 0x00	; 0
     a48:	01 c0       	rjmp	.+2      	; 0xa4c <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     a4a:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     a4c:	01 15       	cp	r16, r1
     a4e:	11 05       	cpc	r17, r1
     a50:	09 f4       	brne	.+2      	; 0xa54 <pvPortMalloc+0x52>
     a52:	69 c0       	rjmp	.+210    	; 0xb26 <pvPortMalloc+0x124>
     a54:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <xFreeBytesRemaining>
     a58:	90 91 85 08 	lds	r25, 0x0885	; 0x800885 <xFreeBytesRemaining+0x1>
     a5c:	80 17       	cp	r24, r16
     a5e:	91 07       	cpc	r25, r17
     a60:	08 f4       	brcc	.+2      	; 0xa64 <pvPortMalloc+0x62>
     a62:	64 c0       	rjmp	.+200    	; 0xb2c <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     a64:	c0 91 88 08 	lds	r28, 0x0888	; 0x800888 <xStart>
     a68:	d0 91 89 08 	lds	r29, 0x0889	; 0x800889 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     a6c:	e8 e8       	ldi	r30, 0x88	; 136
     a6e:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a70:	02 c0       	rjmp	.+4      	; 0xa76 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     a72:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     a74:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a76:	8a 81       	ldd	r24, Y+2	; 0x02
     a78:	9b 81       	ldd	r25, Y+3	; 0x03
     a7a:	80 17       	cp	r24, r16
     a7c:	91 07       	cpc	r25, r17
     a7e:	20 f4       	brcc	.+8      	; 0xa88 <pvPortMalloc+0x86>
     a80:	88 81       	ld	r24, Y
     a82:	99 81       	ldd	r25, Y+1	; 0x01
     a84:	00 97       	sbiw	r24, 0x00	; 0
     a86:	a9 f7       	brne	.-22     	; 0xa72 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     a88:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <pxEnd>
     a8c:	90 91 87 08 	lds	r25, 0x0887	; 0x800887 <pxEnd+0x1>
     a90:	c8 17       	cp	r28, r24
     a92:	d9 07       	cpc	r29, r25
     a94:	09 f4       	brne	.+2      	; 0xa98 <pvPortMalloc+0x96>
     a96:	4d c0       	rjmp	.+154    	; 0xb32 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     a98:	e0 80       	ld	r14, Z
     a9a:	f1 80       	ldd	r15, Z+1	; 0x01
     a9c:	84 e0       	ldi	r24, 0x04	; 4
     a9e:	e8 0e       	add	r14, r24
     aa0:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     aa2:	88 81       	ld	r24, Y
     aa4:	99 81       	ldd	r25, Y+1	; 0x01
     aa6:	91 83       	std	Z+1, r25	; 0x01
     aa8:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     aaa:	2a 81       	ldd	r18, Y+2	; 0x02
     aac:	3b 81       	ldd	r19, Y+3	; 0x03
     aae:	20 1b       	sub	r18, r16
     ab0:	31 0b       	sbc	r19, r17
     ab2:	29 30       	cpi	r18, 0x09	; 9
     ab4:	31 05       	cpc	r19, r1
     ab6:	48 f0       	brcs	.+18     	; 0xaca <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     ab8:	ce 01       	movw	r24, r28
     aba:	80 0f       	add	r24, r16
     abc:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     abe:	fc 01       	movw	r30, r24
     ac0:	33 83       	std	Z+3, r19	; 0x03
     ac2:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     ac4:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     ac6:	0a 83       	std	Y+2, r16	; 0x02
     ac8:	52 df       	rcall	.-348    	; 0x96e <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     aca:	2a 81       	ldd	r18, Y+2	; 0x02
     acc:	3b 81       	ldd	r19, Y+3	; 0x03
     ace:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <xFreeBytesRemaining>
     ad2:	90 91 85 08 	lds	r25, 0x0885	; 0x800885 <xFreeBytesRemaining+0x1>
     ad6:	82 1b       	sub	r24, r18
     ad8:	93 0b       	sbc	r25, r19
     ada:	90 93 85 08 	sts	0x0885, r25	; 0x800885 <xFreeBytesRemaining+0x1>
     ade:	80 93 84 08 	sts	0x0884, r24	; 0x800884 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     ae2:	40 91 82 08 	lds	r20, 0x0882	; 0x800882 <xMinimumEverFreeBytesRemaining>
     ae6:	50 91 83 08 	lds	r21, 0x0883	; 0x800883 <xMinimumEverFreeBytesRemaining+0x1>
     aea:	84 17       	cp	r24, r20
     aec:	95 07       	cpc	r25, r21
     aee:	20 f4       	brcc	.+8      	; 0xaf8 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     af0:	90 93 83 08 	sts	0x0883, r25	; 0x800883 <xMinimumEverFreeBytesRemaining+0x1>
     af4:	80 93 82 08 	sts	0x0882, r24	; 0x800882 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     af8:	80 91 7c 08 	lds	r24, 0x087C	; 0x80087c <xBlockAllocatedBit>
     afc:	90 91 7d 08 	lds	r25, 0x087D	; 0x80087d <xBlockAllocatedBit+0x1>
     b00:	28 2b       	or	r18, r24
     b02:	39 2b       	or	r19, r25
     b04:	3b 83       	std	Y+3, r19	; 0x03
     b06:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     b08:	19 82       	std	Y+1, r1	; 0x01
     b0a:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     b0c:	80 91 80 08 	lds	r24, 0x0880	; 0x800880 <xNumberOfSuccessfulAllocations>
     b10:	90 91 81 08 	lds	r25, 0x0881	; 0x800881 <xNumberOfSuccessfulAllocations+0x1>
     b14:	01 96       	adiw	r24, 0x01	; 1
     b16:	90 93 81 08 	sts	0x0881, r25	; 0x800881 <xNumberOfSuccessfulAllocations+0x1>
     b1a:	80 93 80 08 	sts	0x0880, r24	; 0x800880 <xNumberOfSuccessfulAllocations>
     b1e:	0b c0       	rjmp	.+22     	; 0xb36 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     b20:	e1 2c       	mov	r14, r1
     b22:	f1 2c       	mov	r15, r1
     b24:	08 c0       	rjmp	.+16     	; 0xb36 <pvPortMalloc+0x134>
     b26:	e1 2c       	mov	r14, r1
     b28:	f1 2c       	mov	r15, r1
     b2a:	05 c0       	rjmp	.+10     	; 0xb36 <pvPortMalloc+0x134>
     b2c:	e1 2c       	mov	r14, r1
     b2e:	f1 2c       	mov	r15, r1
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <pvPortMalloc+0x134>
     b32:	e1 2c       	mov	r14, r1
     b34:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     b36:	0e 94 21 12 	call	0x2442	; 0x2442 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     b3a:	e1 14       	cp	r14, r1
     b3c:	f1 04       	cpc	r15, r1
     b3e:	11 f4       	brne	.+4      	; 0xb44 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     b40:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     b44:	c7 01       	movw	r24, r14
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	1f 91       	pop	r17
     b4c:	0f 91       	pop	r16
     b4e:	ff 90       	pop	r15
     b50:	ef 90       	pop	r14
     b52:	08 95       	ret

00000b54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	91 f1       	breq	.+100    	; 0xbc4 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     b60:	ec 01       	movw	r28, r24
     b62:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     b64:	4a 81       	ldd	r20, Y+2	; 0x02
     b66:	5b 81       	ldd	r21, Y+3	; 0x03
     b68:	20 91 7c 08 	lds	r18, 0x087C	; 0x80087c <xBlockAllocatedBit>
     b6c:	30 91 7d 08 	lds	r19, 0x087D	; 0x80087d <xBlockAllocatedBit+0x1>
     b70:	ba 01       	movw	r22, r20
     b72:	62 23       	and	r22, r18
     b74:	73 23       	and	r23, r19
     b76:	67 2b       	or	r22, r23
     b78:	29 f1       	breq	.+74     	; 0xbc4 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     b7a:	68 81       	ld	r22, Y
     b7c:	79 81       	ldd	r23, Y+1	; 0x01
     b7e:	67 2b       	or	r22, r23
     b80:	09 f5       	brne	.+66     	; 0xbc4 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     b82:	20 95       	com	r18
     b84:	30 95       	com	r19
     b86:	24 23       	and	r18, r20
     b88:	35 23       	and	r19, r21
     b8a:	3b 83       	std	Y+3, r19	; 0x03
     b8c:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     b8e:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     b92:	8a 81       	ldd	r24, Y+2	; 0x02
     b94:	9b 81       	ldd	r25, Y+3	; 0x03
     b96:	20 91 84 08 	lds	r18, 0x0884	; 0x800884 <xFreeBytesRemaining>
     b9a:	30 91 85 08 	lds	r19, 0x0885	; 0x800885 <xFreeBytesRemaining+0x1>
     b9e:	82 0f       	add	r24, r18
     ba0:	93 1f       	adc	r25, r19
     ba2:	90 93 85 08 	sts	0x0885, r25	; 0x800885 <xFreeBytesRemaining+0x1>
     ba6:	80 93 84 08 	sts	0x0884, r24	; 0x800884 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     baa:	ce 01       	movw	r24, r28
     bac:	e0 de       	rcall	.-576    	; 0x96e <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     bae:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <xNumberOfSuccessfulFrees>
     bb2:	90 91 7f 08 	lds	r25, 0x087F	; 0x80087f <xNumberOfSuccessfulFrees+0x1>
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	90 93 7f 08 	sts	0x087F, r25	; 0x80087f <xNumberOfSuccessfulFrees+0x1>
     bbc:	80 93 7e 08 	sts	0x087E, r24	; 0x80087e <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     bc0:	0e 94 21 12 	call	0x2442	; 0x2442 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	1f 91       	pop	r17
     bca:	0f 91       	pop	r16
     bcc:	08 95       	ret

00000bce <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     bce:	fc 01       	movw	r30, r24
     bd0:	03 96       	adiw	r24, 0x03	; 3
     bd2:	92 83       	std	Z+2, r25	; 0x02
     bd4:	81 83       	std	Z+1, r24	; 0x01
     bd6:	4f ef       	ldi	r20, 0xFF	; 255
     bd8:	5f ef       	ldi	r21, 0xFF	; 255
     bda:	ba 01       	movw	r22, r20
     bdc:	43 83       	std	Z+3, r20	; 0x03
     bde:	54 83       	std	Z+4, r21	; 0x04
     be0:	65 83       	std	Z+5, r22	; 0x05
     be2:	76 83       	std	Z+6, r23	; 0x06
     be4:	90 87       	std	Z+8, r25	; 0x08
     be6:	87 83       	std	Z+7, r24	; 0x07
     be8:	92 87       	std	Z+10, r25	; 0x0a
     bea:	81 87       	std	Z+9, r24	; 0x09
     bec:	10 82       	st	Z, r1
     bee:	08 95       	ret

00000bf0 <vListInitialiseItem>:
     bf0:	fc 01       	movw	r30, r24
     bf2:	13 86       	std	Z+11, r1	; 0x0b
     bf4:	12 86       	std	Z+10, r1	; 0x0a
     bf6:	08 95       	ret

00000bf8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     c02:	08 81       	ld	r16, Y
     c04:	19 81       	ldd	r17, Y+1	; 0x01
     c06:	2a 81       	ldd	r18, Y+2	; 0x02
     c08:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     c0a:	0f 3f       	cpi	r16, 0xFF	; 255
     c0c:	4f ef       	ldi	r20, 0xFF	; 255
     c0e:	14 07       	cpc	r17, r20
     c10:	24 07       	cpc	r18, r20
     c12:	34 07       	cpc	r19, r20
     c14:	21 f4       	brne	.+8      	; 0xc1e <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     c16:	fc 01       	movw	r30, r24
     c18:	a1 85       	ldd	r26, Z+9	; 0x09
     c1a:	b2 85       	ldd	r27, Z+10	; 0x0a
     c1c:	11 c0       	rjmp	.+34     	; 0xc40 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     c1e:	dc 01       	movw	r26, r24
     c20:	13 96       	adiw	r26, 0x03	; 3
     c22:	01 c0       	rjmp	.+2      	; 0xc26 <vListInsert+0x2e>
     c24:	df 01       	movw	r26, r30
     c26:	14 96       	adiw	r26, 0x04	; 4
     c28:	ed 91       	ld	r30, X+
     c2a:	fc 91       	ld	r31, X
     c2c:	15 97       	sbiw	r26, 0x05	; 5
     c2e:	40 81       	ld	r20, Z
     c30:	51 81       	ldd	r21, Z+1	; 0x01
     c32:	62 81       	ldd	r22, Z+2	; 0x02
     c34:	73 81       	ldd	r23, Z+3	; 0x03
     c36:	04 17       	cp	r16, r20
     c38:	15 07       	cpc	r17, r21
     c3a:	26 07       	cpc	r18, r22
     c3c:	37 07       	cpc	r19, r23
     c3e:	90 f7       	brcc	.-28     	; 0xc24 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     c40:	14 96       	adiw	r26, 0x04	; 4
     c42:	ed 91       	ld	r30, X+
     c44:	fc 91       	ld	r31, X
     c46:	15 97       	sbiw	r26, 0x05	; 5
     c48:	fd 83       	std	Y+5, r31	; 0x05
     c4a:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     c4c:	d7 83       	std	Z+7, r29	; 0x07
     c4e:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     c50:	bf 83       	std	Y+7, r27	; 0x07
     c52:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     c54:	15 96       	adiw	r26, 0x05	; 5
     c56:	dc 93       	st	X, r29
     c58:	ce 93       	st	-X, r28
     c5a:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     c5c:	9b 87       	std	Y+11, r25	; 0x0b
     c5e:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     c60:	fc 01       	movw	r30, r24
     c62:	20 81       	ld	r18, Z
     c64:	2f 5f       	subi	r18, 0xFF	; 255
     c66:	20 83       	st	Z, r18
}
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	08 95       	ret

00000c72 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     c78:	a2 85       	ldd	r26, Z+10	; 0x0a
     c7a:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     c7c:	c4 81       	ldd	r28, Z+4	; 0x04
     c7e:	d5 81       	ldd	r29, Z+5	; 0x05
     c80:	86 81       	ldd	r24, Z+6	; 0x06
     c82:	97 81       	ldd	r25, Z+7	; 0x07
     c84:	9f 83       	std	Y+7, r25	; 0x07
     c86:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     c88:	c6 81       	ldd	r28, Z+6	; 0x06
     c8a:	d7 81       	ldd	r29, Z+7	; 0x07
     c8c:	84 81       	ldd	r24, Z+4	; 0x04
     c8e:	95 81       	ldd	r25, Z+5	; 0x05
     c90:	9d 83       	std	Y+5, r25	; 0x05
     c92:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     c94:	11 96       	adiw	r26, 0x01	; 1
     c96:	8d 91       	ld	r24, X+
     c98:	9c 91       	ld	r25, X
     c9a:	12 97       	sbiw	r26, 0x02	; 2
     c9c:	e8 17       	cp	r30, r24
     c9e:	f9 07       	cpc	r31, r25
     ca0:	31 f4       	brne	.+12     	; 0xcae <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     ca2:	86 81       	ldd	r24, Z+6	; 0x06
     ca4:	97 81       	ldd	r25, Z+7	; 0x07
     ca6:	12 96       	adiw	r26, 0x02	; 2
     ca8:	9c 93       	st	X, r25
     caa:	8e 93       	st	-X, r24
     cac:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     cae:	13 86       	std	Z+11, r1	; 0x0b
     cb0:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     cb2:	8c 91       	ld	r24, X
     cb4:	81 50       	subi	r24, 0x01	; 1
     cb6:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     cb8:	8c 91       	ld	r24, X
}
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	08 95       	ret

00000cc0 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     cc0:	a8 95       	wdr
     cc2:	90 ec       	ldi	r25, 0xC0	; 192
     cc4:	88 e1       	ldi	r24, 0x18	; 24
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	a8 95       	wdr
     ccc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     cd6:	08 95       	ret

00000cd8 <pxPortInitialiseStack>:
     cd8:	fc 01       	movw	r30, r24
     cda:	60 83       	st	Z, r22
     cdc:	31 97       	sbiw	r30, 0x01	; 1
     cde:	70 83       	st	Z, r23
     ce0:	31 97       	sbiw	r30, 0x01	; 1
     ce2:	10 82       	st	Z, r1
     ce4:	31 97       	sbiw	r30, 0x01	; 1
     ce6:	10 82       	st	Z, r1
     ce8:	31 97       	sbiw	r30, 0x01	; 1
     cea:	20 e8       	ldi	r18, 0x80	; 128
     cec:	20 83       	st	Z, r18
     cee:	31 97       	sbiw	r30, 0x01	; 1
     cf0:	10 82       	st	Z, r1
     cf2:	31 97       	sbiw	r30, 0x01	; 1
     cf4:	10 82       	st	Z, r1
     cf6:	31 97       	sbiw	r30, 0x01	; 1
     cf8:	10 82       	st	Z, r1
     cfa:	77 97       	sbiw	r30, 0x17	; 23
     cfc:	40 83       	st	Z, r20
     cfe:	31 97       	sbiw	r30, 0x01	; 1
     d00:	50 83       	st	Z, r21
     d02:	86 97       	sbiw	r24, 0x26	; 38
     d04:	08 95       	ret

00000d06 <xPortStartScheduler>:
     d06:	dc df       	rcall	.-72     	; 0xcc0 <prvSetupTimerInterrupt>
     d08:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
     d0c:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
     d10:	cd 91       	ld	r28, X+
     d12:	cd bf       	out	0x3d, r28	; 61
     d14:	dd 91       	ld	r29, X+
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	ff 91       	pop	r31
     d1a:	ef 91       	pop	r30
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	bf 91       	pop	r27
     d22:	af 91       	pop	r26
     d24:	9f 91       	pop	r25
     d26:	8f 91       	pop	r24
     d28:	7f 91       	pop	r23
     d2a:	6f 91       	pop	r22
     d2c:	5f 91       	pop	r21
     d2e:	4f 91       	pop	r20
     d30:	3f 91       	pop	r19
     d32:	2f 91       	pop	r18
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	ff 90       	pop	r15
     d3a:	ef 90       	pop	r14
     d3c:	df 90       	pop	r13
     d3e:	cf 90       	pop	r12
     d40:	bf 90       	pop	r11
     d42:	af 90       	pop	r10
     d44:	9f 90       	pop	r9
     d46:	8f 90       	pop	r8
     d48:	7f 90       	pop	r7
     d4a:	6f 90       	pop	r6
     d4c:	5f 90       	pop	r5
     d4e:	4f 90       	pop	r4
     d50:	3f 90       	pop	r3
     d52:	2f 90       	pop	r2
     d54:	1f 90       	pop	r1
     d56:	0f 90       	pop	r0
     d58:	0c be       	out	0x3c, r0	; 60
     d5a:	0f 90       	pop	r0
     d5c:	0b be       	out	0x3b, r0	; 59
     d5e:	0f 90       	pop	r0
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	0f 90       	pop	r0
     d64:	08 95       	ret
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	08 95       	ret

00000d6a <vPortYield>:
     d6a:	0f 92       	push	r0
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	0f 92       	push	r0
     d72:	0b b6       	in	r0, 0x3b	; 59
     d74:	0f 92       	push	r0
     d76:	0c b6       	in	r0, 0x3c	; 60
     d78:	0f 92       	push	r0
     d7a:	1f 92       	push	r1
     d7c:	11 24       	eor	r1, r1
     d7e:	2f 92       	push	r2
     d80:	3f 92       	push	r3
     d82:	4f 92       	push	r4
     d84:	5f 92       	push	r5
     d86:	6f 92       	push	r6
     d88:	7f 92       	push	r7
     d8a:	8f 92       	push	r8
     d8c:	9f 92       	push	r9
     d8e:	af 92       	push	r10
     d90:	bf 92       	push	r11
     d92:	cf 92       	push	r12
     d94:	df 92       	push	r13
     d96:	ef 92       	push	r14
     d98:	ff 92       	push	r15
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	2f 93       	push	r18
     da0:	3f 93       	push	r19
     da2:	4f 93       	push	r20
     da4:	5f 93       	push	r21
     da6:	6f 93       	push	r22
     da8:	7f 93       	push	r23
     daa:	8f 93       	push	r24
     dac:	9f 93       	push	r25
     dae:	af 93       	push	r26
     db0:	bf 93       	push	r27
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	ef 93       	push	r30
     db8:	ff 93       	push	r31
     dba:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
     dbe:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
     dc2:	0d b6       	in	r0, 0x3d	; 61
     dc4:	0d 92       	st	X+, r0
     dc6:	0e b6       	in	r0, 0x3e	; 62
     dc8:	0d 92       	st	X+, r0
     dca:	0e 94 7d 13 	call	0x26fa	; 0x26fa <vTaskSwitchContext>
     dce:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
     dd2:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
     dd6:	cd 91       	ld	r28, X+
     dd8:	cd bf       	out	0x3d, r28	; 61
     dda:	dd 91       	ld	r29, X+
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	ff 91       	pop	r31
     de0:	ef 91       	pop	r30
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	bf 91       	pop	r27
     de8:	af 91       	pop	r26
     dea:	9f 91       	pop	r25
     dec:	8f 91       	pop	r24
     dee:	7f 91       	pop	r23
     df0:	6f 91       	pop	r22
     df2:	5f 91       	pop	r21
     df4:	4f 91       	pop	r20
     df6:	3f 91       	pop	r19
     df8:	2f 91       	pop	r18
     dfa:	1f 91       	pop	r17
     dfc:	0f 91       	pop	r16
     dfe:	ff 90       	pop	r15
     e00:	ef 90       	pop	r14
     e02:	df 90       	pop	r13
     e04:	cf 90       	pop	r12
     e06:	bf 90       	pop	r11
     e08:	af 90       	pop	r10
     e0a:	9f 90       	pop	r9
     e0c:	8f 90       	pop	r8
     e0e:	7f 90       	pop	r7
     e10:	6f 90       	pop	r6
     e12:	5f 90       	pop	r5
     e14:	4f 90       	pop	r4
     e16:	3f 90       	pop	r3
     e18:	2f 90       	pop	r2
     e1a:	1f 90       	pop	r1
     e1c:	0f 90       	pop	r0
     e1e:	0c be       	out	0x3c, r0	; 60
     e20:	0f 90       	pop	r0
     e22:	0b be       	out	0x3b, r0	; 59
     e24:	0f 90       	pop	r0
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	0f 90       	pop	r0
     e2a:	08 95       	ret

00000e2c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     e2c:	0f 92       	push	r0
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	f8 94       	cli
     e32:	0f 92       	push	r0
     e34:	0b b6       	in	r0, 0x3b	; 59
     e36:	0f 92       	push	r0
     e38:	0c b6       	in	r0, 0x3c	; 60
     e3a:	0f 92       	push	r0
     e3c:	1f 92       	push	r1
     e3e:	11 24       	eor	r1, r1
     e40:	2f 92       	push	r2
     e42:	3f 92       	push	r3
     e44:	4f 92       	push	r4
     e46:	5f 92       	push	r5
     e48:	6f 92       	push	r6
     e4a:	7f 92       	push	r7
     e4c:	8f 92       	push	r8
     e4e:	9f 92       	push	r9
     e50:	af 92       	push	r10
     e52:	bf 92       	push	r11
     e54:	cf 92       	push	r12
     e56:	df 92       	push	r13
     e58:	ef 92       	push	r14
     e5a:	ff 92       	push	r15
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	2f 93       	push	r18
     e62:	3f 93       	push	r19
     e64:	4f 93       	push	r20
     e66:	5f 93       	push	r21
     e68:	6f 93       	push	r22
     e6a:	7f 93       	push	r23
     e6c:	8f 93       	push	r24
     e6e:	9f 93       	push	r25
     e70:	af 93       	push	r26
     e72:	bf 93       	push	r27
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
     e78:	ef 93       	push	r30
     e7a:	ff 93       	push	r31
     e7c:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
     e80:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
     e84:	0d b6       	in	r0, 0x3d	; 61
     e86:	0d 92       	st	X+, r0
     e88:	0e b6       	in	r0, 0x3e	; 62
     e8a:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     e8c:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     e8e:	0e 94 f5 10 	call	0x21ea	; 0x21ea <xTaskIncrementTick>
     e92:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     e94:	0e 94 7d 13 	call	0x26fa	; 0x26fa <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     e98:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
     e9c:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
     ea0:	cd 91       	ld	r28, X+
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	dd 91       	ld	r29, X+
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	ff 91       	pop	r31
     eaa:	ef 91       	pop	r30
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	bf 91       	pop	r27
     eb2:	af 91       	pop	r26
     eb4:	9f 91       	pop	r25
     eb6:	8f 91       	pop	r24
     eb8:	7f 91       	pop	r23
     eba:	6f 91       	pop	r22
     ebc:	5f 91       	pop	r21
     ebe:	4f 91       	pop	r20
     ec0:	3f 91       	pop	r19
     ec2:	2f 91       	pop	r18
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	ff 90       	pop	r15
     eca:	ef 90       	pop	r14
     ecc:	df 90       	pop	r13
     ece:	cf 90       	pop	r12
     ed0:	bf 90       	pop	r11
     ed2:	af 90       	pop	r10
     ed4:	9f 90       	pop	r9
     ed6:	8f 90       	pop	r8
     ed8:	7f 90       	pop	r7
     eda:	6f 90       	pop	r6
     edc:	5f 90       	pop	r5
     ede:	4f 90       	pop	r4
     ee0:	3f 90       	pop	r3
     ee2:	2f 90       	pop	r2
     ee4:	1f 90       	pop	r1
     ee6:	0f 90       	pop	r0
     ee8:	0c be       	out	0x3c, r0	; 60
     eea:	0f 90       	pop	r0
     eec:	0b be       	out	0x3b, r0	; 59
     eee:	0f 90       	pop	r0
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     ef4:	08 95       	ret

00000ef6 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     ef6:	9a df       	rcall	.-204    	; 0xe2c <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     ef8:	18 95       	reti

00000efa <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     efa:	dc 01       	movw	r26, r24
     efc:	53 96       	adiw	r26, 0x13	; 19
     efe:	2c 91       	ld	r18, X
     f00:	53 97       	sbiw	r26, 0x13	; 19
     f02:	22 23       	and	r18, r18
     f04:	41 f0       	breq	.+16     	; 0xf16 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     f06:	5a 96       	adiw	r26, 0x1a	; 26
     f08:	ed 91       	ld	r30, X+
     f0a:	fc 91       	ld	r31, X
     f0c:	5b 97       	sbiw	r26, 0x1b	; 27
     f0e:	90 81       	ld	r25, Z
     f10:	8a e0       	ldi	r24, 0x0A	; 10
     f12:	89 1b       	sub	r24, r25
     f14:	08 95       	ret
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	08 95       	ret

00000f1a <prvIsQueueEmpty>:
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	0f 92       	push	r0
     f20:	fc 01       	movw	r30, r24
     f22:	86 8d       	ldd	r24, Z+30	; 0x1e
     f24:	81 11       	cpse	r24, r1
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <prvIsQueueEmpty+0x12>
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	01 c0       	rjmp	.+2      	; 0xf2e <prvIsQueueEmpty+0x14>
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	0f 90       	pop	r0
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	08 95       	ret

00000f34 <prvIsQueueFull>:
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	0f 92       	push	r0
     f3a:	fc 01       	movw	r30, r24
     f3c:	26 8d       	ldd	r18, Z+30	; 0x1e
     f3e:	87 8d       	ldd	r24, Z+31	; 0x1f
     f40:	28 13       	cpse	r18, r24
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <prvIsQueueFull+0x14>
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	01 c0       	rjmp	.+2      	; 0xf4a <prvIsQueueFull+0x16>
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	0f 90       	pop	r0
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	08 95       	ret

00000f50 <prvCopyDataToQueue>:
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	ec 01       	movw	r28, r24
     f5a:	04 2f       	mov	r16, r20
     f5c:	1e 8d       	ldd	r17, Y+30	; 0x1e
     f5e:	48 a1       	ldd	r20, Y+32	; 0x20
     f60:	41 11       	cpse	r20, r1
     f62:	0c c0       	rjmp	.+24     	; 0xf7c <prvCopyDataToQueue+0x2c>
     f64:	88 81       	ld	r24, Y
     f66:	99 81       	ldd	r25, Y+1	; 0x01
     f68:	89 2b       	or	r24, r25
     f6a:	09 f0       	breq	.+2      	; 0xf6e <prvCopyDataToQueue+0x1e>
     f6c:	42 c0       	rjmp	.+132    	; 0xff2 <prvCopyDataToQueue+0xa2>
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	9d 81       	ldd	r25, Y+5	; 0x05
     f72:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <xTaskPriorityDisinherit>
     f76:	1d 82       	std	Y+5, r1	; 0x05
     f78:	1c 82       	std	Y+4, r1	; 0x04
     f7a:	42 c0       	rjmp	.+132    	; 0x1000 <__EEPROM_REGION_LENGTH__>
     f7c:	01 11       	cpse	r16, r1
     f7e:	17 c0       	rjmp	.+46     	; 0xfae <prvCopyDataToQueue+0x5e>
     f80:	50 e0       	ldi	r21, 0x00	; 0
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	9b 81       	ldd	r25, Y+3	; 0x03
     f86:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <memcpy>
     f8a:	28 a1       	ldd	r18, Y+32	; 0x20
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	9b 81       	ldd	r25, Y+3	; 0x03
     f90:	82 0f       	add	r24, r18
     f92:	91 1d       	adc	r25, r1
     f94:	9b 83       	std	Y+3, r25	; 0x03
     f96:	8a 83       	std	Y+2, r24	; 0x02
     f98:	2c 81       	ldd	r18, Y+4	; 0x04
     f9a:	3d 81       	ldd	r19, Y+5	; 0x05
     f9c:	82 17       	cp	r24, r18
     f9e:	93 07       	cpc	r25, r19
     fa0:	50 f1       	brcs	.+84     	; 0xff6 <prvCopyDataToQueue+0xa6>
     fa2:	88 81       	ld	r24, Y
     fa4:	99 81       	ldd	r25, Y+1	; 0x01
     fa6:	9b 83       	std	Y+3, r25	; 0x03
     fa8:	8a 83       	std	Y+2, r24	; 0x02
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	29 c0       	rjmp	.+82     	; 0x1000 <__EEPROM_REGION_LENGTH__>
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	8e 81       	ldd	r24, Y+6	; 0x06
     fb2:	9f 81       	ldd	r25, Y+7	; 0x07
     fb4:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <memcpy>
     fb8:	88 a1       	ldd	r24, Y+32	; 0x20
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	91 95       	neg	r25
     fbe:	81 95       	neg	r24
     fc0:	91 09       	sbc	r25, r1
     fc2:	2e 81       	ldd	r18, Y+6	; 0x06
     fc4:	3f 81       	ldd	r19, Y+7	; 0x07
     fc6:	28 0f       	add	r18, r24
     fc8:	39 1f       	adc	r19, r25
     fca:	3f 83       	std	Y+7, r19	; 0x07
     fcc:	2e 83       	std	Y+6, r18	; 0x06
     fce:	48 81       	ld	r20, Y
     fd0:	59 81       	ldd	r21, Y+1	; 0x01
     fd2:	24 17       	cp	r18, r20
     fd4:	35 07       	cpc	r19, r21
     fd6:	30 f4       	brcc	.+12     	; 0xfe4 <prvCopyDataToQueue+0x94>
     fd8:	2c 81       	ldd	r18, Y+4	; 0x04
     fda:	3d 81       	ldd	r19, Y+5	; 0x05
     fdc:	82 0f       	add	r24, r18
     fde:	93 1f       	adc	r25, r19
     fe0:	9f 83       	std	Y+7, r25	; 0x07
     fe2:	8e 83       	std	Y+6, r24	; 0x06
     fe4:	02 30       	cpi	r16, 0x02	; 2
     fe6:	49 f4       	brne	.+18     	; 0xffa <prvCopyDataToQueue+0xaa>
     fe8:	11 23       	and	r17, r17
     fea:	49 f0       	breq	.+18     	; 0xffe <prvCopyDataToQueue+0xae>
     fec:	11 50       	subi	r17, 0x01	; 1
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	07 c0       	rjmp	.+14     	; 0x1000 <__EEPROM_REGION_LENGTH__>
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	05 c0       	rjmp	.+10     	; 0x1000 <__EEPROM_REGION_LENGTH__>
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	03 c0       	rjmp	.+6      	; 0x1000 <__EEPROM_REGION_LENGTH__>
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	01 c0       	rjmp	.+2      	; 0x1000 <__EEPROM_REGION_LENGTH__>
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	1f 5f       	subi	r17, 0xFF	; 255
    1002:	1e 8f       	std	Y+30, r17	; 0x1e
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	08 95       	ret

0000100e <prvCopyDataFromQueue>:
    100e:	fc 01       	movw	r30, r24
    1010:	40 a1       	ldd	r20, Z+32	; 0x20
    1012:	44 23       	and	r20, r20
    1014:	a9 f0       	breq	.+42     	; 0x1040 <prvCopyDataFromQueue+0x32>
    1016:	50 e0       	ldi	r21, 0x00	; 0
    1018:	26 81       	ldd	r18, Z+6	; 0x06
    101a:	37 81       	ldd	r19, Z+7	; 0x07
    101c:	24 0f       	add	r18, r20
    101e:	35 1f       	adc	r19, r21
    1020:	37 83       	std	Z+7, r19	; 0x07
    1022:	26 83       	std	Z+6, r18	; 0x06
    1024:	84 81       	ldd	r24, Z+4	; 0x04
    1026:	95 81       	ldd	r25, Z+5	; 0x05
    1028:	28 17       	cp	r18, r24
    102a:	39 07       	cpc	r19, r25
    102c:	20 f0       	brcs	.+8      	; 0x1036 <prvCopyDataFromQueue+0x28>
    102e:	80 81       	ld	r24, Z
    1030:	91 81       	ldd	r25, Z+1	; 0x01
    1032:	97 83       	std	Z+7, r25	; 0x07
    1034:	86 83       	std	Z+6, r24	; 0x06
    1036:	cb 01       	movw	r24, r22
    1038:	66 81       	ldd	r22, Z+6	; 0x06
    103a:	77 81       	ldd	r23, Z+7	; 0x07
    103c:	0c 94 ae 35 	jmp	0x6b5c	; 0x6b5c <memcpy>
    1040:	08 95       	ret

00001042 <prvUnlockQueue>:
    1042:	1f 93       	push	r17
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	ec 01       	movw	r28, r24
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	0f 92       	push	r0
    1050:	1a a1       	ldd	r17, Y+34	; 0x22
    1052:	0b c0       	rjmp	.+22     	; 0x106a <prvUnlockQueue+0x28>
    1054:	8b 89       	ldd	r24, Y+19	; 0x13
    1056:	88 23       	and	r24, r24
    1058:	51 f0       	breq	.+20     	; 0x106e <prvUnlockQueue+0x2c>
    105a:	ce 01       	movw	r24, r28
    105c:	43 96       	adiw	r24, 0x13	; 19
    105e:	0e 94 85 14 	call	0x290a	; 0x290a <xTaskRemoveFromEventList>
    1062:	81 11       	cpse	r24, r1
    1064:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <vTaskMissedYield>
    1068:	11 50       	subi	r17, 0x01	; 1
    106a:	11 16       	cp	r1, r17
    106c:	9c f3       	brlt	.-26     	; 0x1054 <prvUnlockQueue+0x12>
    106e:	8f ef       	ldi	r24, 0xFF	; 255
    1070:	8a a3       	std	Y+34, r24	; 0x22
    1072:	0f 90       	pop	r0
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	0f 92       	push	r0
    107c:	19 a1       	ldd	r17, Y+33	; 0x21
    107e:	0b c0       	rjmp	.+22     	; 0x1096 <prvUnlockQueue+0x54>
    1080:	88 85       	ldd	r24, Y+8	; 0x08
    1082:	88 23       	and	r24, r24
    1084:	51 f0       	breq	.+20     	; 0x109a <prvUnlockQueue+0x58>
    1086:	ce 01       	movw	r24, r28
    1088:	08 96       	adiw	r24, 0x08	; 8
    108a:	0e 94 85 14 	call	0x290a	; 0x290a <xTaskRemoveFromEventList>
    108e:	81 11       	cpse	r24, r1
    1090:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <vTaskMissedYield>
    1094:	11 50       	subi	r17, 0x01	; 1
    1096:	11 16       	cp	r1, r17
    1098:	9c f3       	brlt	.-26     	; 0x1080 <prvUnlockQueue+0x3e>
    109a:	8f ef       	ldi	r24, 0xFF	; 255
    109c:	89 a3       	std	Y+33, r24	; 0x21
    109e:	0f 90       	pop	r0
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	08 95       	ret

000010aa <xQueueGenericReset>:
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	ec 01       	movw	r28, r24
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	0f 92       	push	r0
    10b6:	e8 81       	ld	r30, Y
    10b8:	f9 81       	ldd	r31, Y+1	; 0x01
    10ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10bc:	28 a1       	ldd	r18, Y+32	; 0x20
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	82 9f       	mul	r24, r18
    10c4:	a0 01       	movw	r20, r0
    10c6:	83 9f       	mul	r24, r19
    10c8:	50 0d       	add	r21, r0
    10ca:	92 9f       	mul	r25, r18
    10cc:	50 0d       	add	r21, r0
    10ce:	11 24       	eor	r1, r1
    10d0:	4e 0f       	add	r20, r30
    10d2:	5f 1f       	adc	r21, r31
    10d4:	5d 83       	std	Y+5, r21	; 0x05
    10d6:	4c 83       	std	Y+4, r20	; 0x04
    10d8:	1e 8e       	std	Y+30, r1	; 0x1e
    10da:	fb 83       	std	Y+3, r31	; 0x03
    10dc:	ea 83       	std	Y+2, r30	; 0x02
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	28 9f       	mul	r18, r24
    10e2:	a0 01       	movw	r20, r0
    10e4:	29 9f       	mul	r18, r25
    10e6:	50 0d       	add	r21, r0
    10e8:	38 9f       	mul	r19, r24
    10ea:	50 0d       	add	r21, r0
    10ec:	11 24       	eor	r1, r1
    10ee:	cf 01       	movw	r24, r30
    10f0:	84 0f       	add	r24, r20
    10f2:	95 1f       	adc	r25, r21
    10f4:	9f 83       	std	Y+7, r25	; 0x07
    10f6:	8e 83       	std	Y+6, r24	; 0x06
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
    10fa:	89 a3       	std	Y+33, r24	; 0x21
    10fc:	8a a3       	std	Y+34, r24	; 0x22
    10fe:	61 11       	cpse	r22, r1
    1100:	0b c0       	rjmp	.+22     	; 0x1118 <xQueueGenericReset+0x6e>
    1102:	88 85       	ldd	r24, Y+8	; 0x08
    1104:	88 23       	and	r24, r24
    1106:	71 f0       	breq	.+28     	; 0x1124 <xQueueGenericReset+0x7a>
    1108:	ce 01       	movw	r24, r28
    110a:	08 96       	adiw	r24, 0x08	; 8
    110c:	0e 94 85 14 	call	0x290a	; 0x290a <xTaskRemoveFromEventList>
    1110:	88 23       	and	r24, r24
    1112:	41 f0       	breq	.+16     	; 0x1124 <xQueueGenericReset+0x7a>
    1114:	2a de       	rcall	.-940    	; 0xd6a <vPortYield>
    1116:	06 c0       	rjmp	.+12     	; 0x1124 <xQueueGenericReset+0x7a>
    1118:	ce 01       	movw	r24, r28
    111a:	08 96       	adiw	r24, 0x08	; 8
    111c:	58 dd       	rcall	.-1360   	; 0xbce <vListInitialise>
    111e:	ce 01       	movw	r24, r28
    1120:	43 96       	adiw	r24, 0x13	; 19
    1122:	55 dd       	rcall	.-1366   	; 0xbce <vListInitialise>
    1124:	0f 90       	pop	r0
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	df 91       	pop	r29
    112c:	cf 91       	pop	r28
    112e:	08 95       	ret

00001130 <prvInitialiseNewQueue>:
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	f8 01       	movw	r30, r16
    1136:	61 11       	cpse	r22, r1
    1138:	03 c0       	rjmp	.+6      	; 0x1140 <prvInitialiseNewQueue+0x10>
    113a:	11 83       	std	Z+1, r17	; 0x01
    113c:	00 83       	st	Z, r16
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <prvInitialiseNewQueue+0x14>
    1140:	51 83       	std	Z+1, r21	; 0x01
    1142:	40 83       	st	Z, r20
    1144:	87 8f       	std	Z+31, r24	; 0x1f
    1146:	60 a3       	std	Z+32, r22	; 0x20
    1148:	61 e0       	ldi	r22, 0x01	; 1
    114a:	cf 01       	movw	r24, r30
    114c:	ae df       	rcall	.-164    	; 0x10aa <xQueueGenericReset>
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	08 95       	ret

00001154 <xQueueGenericCreate>:
    1154:	df 92       	push	r13
    1156:	ef 92       	push	r14
    1158:	ff 92       	push	r15
    115a:	0f 93       	push	r16
    115c:	1f 93       	push	r17
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	f8 2e       	mov	r15, r24
    1164:	e6 2e       	mov	r14, r22
    1166:	d4 2e       	mov	r13, r20
    1168:	86 9f       	mul	r24, r22
    116a:	c0 01       	movw	r24, r0
    116c:	11 24       	eor	r1, r1
    116e:	83 96       	adiw	r24, 0x23	; 35
    1170:	48 dc       	rcall	.-1904   	; 0xa02 <pvPortMalloc>
    1172:	ec 01       	movw	r28, r24
    1174:	00 97       	sbiw	r24, 0x00	; 0
    1176:	41 f0       	breq	.+16     	; 0x1188 <xQueueGenericCreate+0x34>
    1178:	8c 01       	movw	r16, r24
    117a:	2d 2d       	mov	r18, r13
    117c:	ac 01       	movw	r20, r24
    117e:	4d 5d       	subi	r20, 0xDD	; 221
    1180:	5f 4f       	sbci	r21, 0xFF	; 255
    1182:	6e 2d       	mov	r22, r14
    1184:	8f 2d       	mov	r24, r15
    1186:	d4 df       	rcall	.-88     	; 0x1130 <prvInitialiseNewQueue>
    1188:	ce 01       	movw	r24, r28
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	ff 90       	pop	r15
    1194:	ef 90       	pop	r14
    1196:	df 90       	pop	r13
    1198:	08 95       	ret

0000119a <xQueueGenericSend>:
    119a:	cf 92       	push	r12
    119c:	df 92       	push	r13
    119e:	ef 92       	push	r14
    11a0:	ff 92       	push	r15
    11a2:	0f 93       	push	r16
    11a4:	1f 93       	push	r17
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	29 97       	sbiw	r28, 0x09	; 9
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	7c 01       	movw	r14, r24
    11bc:	6b 01       	movw	r12, r22
    11be:	2e 83       	std	Y+6, r18	; 0x06
    11c0:	3f 83       	std	Y+7, r19	; 0x07
    11c2:	48 87       	std	Y+8, r20	; 0x08
    11c4:	59 87       	std	Y+9, r21	; 0x09
    11c6:	10 e0       	ldi	r17, 0x00	; 0
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	0f 92       	push	r0
    11ce:	f7 01       	movw	r30, r14
    11d0:	96 8d       	ldd	r25, Z+30	; 0x1e
    11d2:	87 8d       	ldd	r24, Z+31	; 0x1f
    11d4:	98 17       	cp	r25, r24
    11d6:	10 f0       	brcs	.+4      	; 0x11dc <xQueueGenericSend+0x42>
    11d8:	02 30       	cpi	r16, 0x02	; 2
    11da:	b1 f4       	brne	.+44     	; 0x1208 <xQueueGenericSend+0x6e>
    11dc:	40 2f       	mov	r20, r16
    11de:	b6 01       	movw	r22, r12
    11e0:	c7 01       	movw	r24, r14
    11e2:	b6 de       	rcall	.-660    	; 0xf50 <prvCopyDataToQueue>
    11e4:	f7 01       	movw	r30, r14
    11e6:	93 89       	ldd	r25, Z+19	; 0x13
    11e8:	99 23       	and	r25, r25
    11ea:	41 f0       	breq	.+16     	; 0x11fc <xQueueGenericSend+0x62>
    11ec:	c7 01       	movw	r24, r14
    11ee:	43 96       	adiw	r24, 0x13	; 19
    11f0:	0e 94 85 14 	call	0x290a	; 0x290a <xTaskRemoveFromEventList>
    11f4:	88 23       	and	r24, r24
    11f6:	21 f0       	breq	.+8      	; 0x1200 <xQueueGenericSend+0x66>
    11f8:	b8 dd       	rcall	.-1168   	; 0xd6a <vPortYield>
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <xQueueGenericSend+0x66>
    11fc:	81 11       	cpse	r24, r1
    11fe:	b5 dd       	rcall	.-1174   	; 0xd6a <vPortYield>
    1200:	0f 90       	pop	r0
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	4c c0       	rjmp	.+152    	; 0x12a0 <xQueueGenericSend+0x106>
    1208:	8e 81       	ldd	r24, Y+6	; 0x06
    120a:	9f 81       	ldd	r25, Y+7	; 0x07
    120c:	a8 85       	ldd	r26, Y+8	; 0x08
    120e:	b9 85       	ldd	r27, Y+9	; 0x09
    1210:	89 2b       	or	r24, r25
    1212:	8a 2b       	or	r24, r26
    1214:	8b 2b       	or	r24, r27
    1216:	21 f4       	brne	.+8      	; 0x1220 <xQueueGenericSend+0x86>
    1218:	0f 90       	pop	r0
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	40 c0       	rjmp	.+128    	; 0x12a0 <xQueueGenericSend+0x106>
    1220:	11 11       	cpse	r17, r1
    1222:	05 c0       	rjmp	.+10     	; 0x122e <xQueueGenericSend+0x94>
    1224:	ce 01       	movw	r24, r28
    1226:	01 96       	adiw	r24, 0x01	; 1
    1228:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <vTaskInternalSetTimeOutState>
    122c:	11 e0       	ldi	r17, 0x01	; 1
    122e:	0f 90       	pop	r0
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	c7 d7       	rcall	.+3982   	; 0x21c2 <vTaskSuspendAll>
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	0f 92       	push	r0
    123a:	f7 01       	movw	r30, r14
    123c:	81 a1       	ldd	r24, Z+33	; 0x21
    123e:	8f 3f       	cpi	r24, 0xFF	; 255
    1240:	09 f4       	brne	.+2      	; 0x1244 <xQueueGenericSend+0xaa>
    1242:	11 a2       	std	Z+33, r1	; 0x21
    1244:	f7 01       	movw	r30, r14
    1246:	82 a1       	ldd	r24, Z+34	; 0x22
    1248:	8f 3f       	cpi	r24, 0xFF	; 255
    124a:	09 f4       	brne	.+2      	; 0x124e <xQueueGenericSend+0xb4>
    124c:	12 a2       	std	Z+34, r1	; 0x22
    124e:	0f 90       	pop	r0
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	be 01       	movw	r22, r28
    1254:	6a 5f       	subi	r22, 0xFA	; 250
    1256:	7f 4f       	sbci	r23, 0xFF	; 255
    1258:	ce 01       	movw	r24, r28
    125a:	01 96       	adiw	r24, 0x01	; 1
    125c:	0e 94 f5 15 	call	0x2bea	; 0x2bea <xTaskCheckForTimeOut>
    1260:	81 11       	cpse	r24, r1
    1262:	19 c0       	rjmp	.+50     	; 0x1296 <xQueueGenericSend+0xfc>
    1264:	c7 01       	movw	r24, r14
    1266:	66 de       	rcall	.-820    	; 0xf34 <prvIsQueueFull>
    1268:	88 23       	and	r24, r24
    126a:	81 f0       	breq	.+32     	; 0x128c <xQueueGenericSend+0xf2>
    126c:	4e 81       	ldd	r20, Y+6	; 0x06
    126e:	5f 81       	ldd	r21, Y+7	; 0x07
    1270:	68 85       	ldd	r22, Y+8	; 0x08
    1272:	79 85       	ldd	r23, Y+9	; 0x09
    1274:	c7 01       	movw	r24, r14
    1276:	08 96       	adiw	r24, 0x08	; 8
    1278:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vTaskPlaceOnEventList>
    127c:	c7 01       	movw	r24, r14
    127e:	e1 de       	rcall	.-574    	; 0x1042 <prvUnlockQueue>
    1280:	0e 94 21 12 	call	0x2442	; 0x2442 <xTaskResumeAll>
    1284:	81 11       	cpse	r24, r1
    1286:	a0 cf       	rjmp	.-192    	; 0x11c8 <xQueueGenericSend+0x2e>
    1288:	70 dd       	rcall	.-1312   	; 0xd6a <vPortYield>
    128a:	9e cf       	rjmp	.-196    	; 0x11c8 <xQueueGenericSend+0x2e>
    128c:	c7 01       	movw	r24, r14
    128e:	d9 de       	rcall	.-590    	; 0x1042 <prvUnlockQueue>
    1290:	0e 94 21 12 	call	0x2442	; 0x2442 <xTaskResumeAll>
    1294:	99 cf       	rjmp	.-206    	; 0x11c8 <xQueueGenericSend+0x2e>
    1296:	c7 01       	movw	r24, r14
    1298:	d4 de       	rcall	.-600    	; 0x1042 <prvUnlockQueue>
    129a:	0e 94 21 12 	call	0x2442	; 0x2442 <xTaskResumeAll>
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	29 96       	adiw	r28, 0x09	; 9
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	de bf       	out	0x3e, r29	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	cd bf       	out	0x3d, r28	; 61
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	ff 90       	pop	r15
    12b6:	ef 90       	pop	r14
    12b8:	df 90       	pop	r13
    12ba:	cf 90       	pop	r12
    12bc:	08 95       	ret

000012be <prvInitialiseMutex>:
    12be:	0f 93       	push	r16
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	69 f0       	breq	.+26     	; 0x12de <prvInitialiseMutex+0x20>
    12c4:	fc 01       	movw	r30, r24
    12c6:	15 82       	std	Z+5, r1	; 0x05
    12c8:	14 82       	std	Z+4, r1	; 0x04
    12ca:	11 82       	std	Z+1, r1	; 0x01
    12cc:	10 82       	st	Z, r1
    12ce:	16 82       	std	Z+6, r1	; 0x06
    12d0:	00 e0       	ldi	r16, 0x00	; 0
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	a9 01       	movw	r20, r18
    12d8:	60 e0       	ldi	r22, 0x00	; 0
    12da:	70 e0       	ldi	r23, 0x00	; 0
    12dc:	5e df       	rcall	.-324    	; 0x119a <xQueueGenericSend>
    12de:	0f 91       	pop	r16
    12e0:	08 95       	ret

000012e2 <xQueueCreateMutex>:
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	48 2f       	mov	r20, r24
    12e8:	60 e0       	ldi	r22, 0x00	; 0
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	33 df       	rcall	.-410    	; 0x1154 <xQueueGenericCreate>
    12ee:	ec 01       	movw	r28, r24
    12f0:	e6 df       	rcall	.-52     	; 0x12be <prvInitialiseMutex>
    12f2:	ce 01       	movw	r24, r28
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	08 95       	ret

000012fa <xQueueGenericSendFromISR>:
    12fa:	ef 92       	push	r14
    12fc:	ff 92       	push	r15
    12fe:	0f 93       	push	r16
    1300:	1f 93       	push	r17
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	8a 01       	movw	r16, r20
    1308:	fc 01       	movw	r30, r24
    130a:	56 8d       	ldd	r21, Z+30	; 0x1e
    130c:	37 8d       	ldd	r19, Z+31	; 0x1f
    130e:	53 17       	cp	r21, r19
    1310:	10 f0       	brcs	.+4      	; 0x1316 <xQueueGenericSendFromISR+0x1c>
    1312:	22 30       	cpi	r18, 0x02	; 2
    1314:	f9 f4       	brne	.+62     	; 0x1354 <xQueueGenericSendFromISR+0x5a>
    1316:	42 2f       	mov	r20, r18
    1318:	78 01       	movw	r14, r16
    131a:	ec 01       	movw	r28, r24
    131c:	1a a1       	ldd	r17, Y+34	; 0x22
    131e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1320:	ce 01       	movw	r24, r28
    1322:	16 de       	rcall	.-980    	; 0xf50 <prvCopyDataToQueue>
    1324:	1f 3f       	cpi	r17, 0xFF	; 255
    1326:	81 f4       	brne	.+32     	; 0x1348 <xQueueGenericSendFromISR+0x4e>
    1328:	8b 89       	ldd	r24, Y+19	; 0x13
    132a:	88 23       	and	r24, r24
    132c:	a9 f0       	breq	.+42     	; 0x1358 <xQueueGenericSendFromISR+0x5e>
    132e:	ce 01       	movw	r24, r28
    1330:	43 96       	adiw	r24, 0x13	; 19
    1332:	0e 94 85 14 	call	0x290a	; 0x290a <xTaskRemoveFromEventList>
    1336:	88 23       	and	r24, r24
    1338:	89 f0       	breq	.+34     	; 0x135c <xQueueGenericSendFromISR+0x62>
    133a:	e1 14       	cp	r14, r1
    133c:	f1 04       	cpc	r15, r1
    133e:	81 f0       	breq	.+32     	; 0x1360 <xQueueGenericSendFromISR+0x66>
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	f7 01       	movw	r30, r14
    1344:	80 83       	st	Z, r24
    1346:	0d c0       	rjmp	.+26     	; 0x1362 <xQueueGenericSendFromISR+0x68>
    1348:	ff 24       	eor	r15, r15
    134a:	f3 94       	inc	r15
    134c:	f1 0e       	add	r15, r17
    134e:	fa a2       	std	Y+34, r15	; 0x22
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	07 c0       	rjmp	.+14     	; 0x1362 <xQueueGenericSendFromISR+0x68>
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	05 c0       	rjmp	.+10     	; 0x1362 <xQueueGenericSendFromISR+0x68>
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	03 c0       	rjmp	.+6      	; 0x1362 <xQueueGenericSendFromISR+0x68>
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <xQueueGenericSendFromISR+0x68>
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	ff 90       	pop	r15
    136c:	ef 90       	pop	r14
    136e:	08 95       	ret

00001370 <xQueueReceive>:
    1370:	cf 92       	push	r12
    1372:	df 92       	push	r13
    1374:	ef 92       	push	r14
    1376:	ff 92       	push	r15
    1378:	0f 93       	push	r16
    137a:	1f 93       	push	r17
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	29 97       	sbiw	r28, 0x09	; 9
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	8c 01       	movw	r16, r24
    1392:	6b 01       	movw	r12, r22
    1394:	2e 83       	std	Y+6, r18	; 0x06
    1396:	3f 83       	std	Y+7, r19	; 0x07
    1398:	48 87       	std	Y+8, r20	; 0x08
    139a:	59 87       	std	Y+9, r21	; 0x09
    139c:	e1 2c       	mov	r14, r1
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	0f 92       	push	r0
    13a4:	f8 01       	movw	r30, r16
    13a6:	f6 8c       	ldd	r15, Z+30	; 0x1e
    13a8:	ff 20       	and	r15, r15
    13aa:	99 f0       	breq	.+38     	; 0x13d2 <xQueueReceive+0x62>
    13ac:	b6 01       	movw	r22, r12
    13ae:	c8 01       	movw	r24, r16
    13b0:	2e de       	rcall	.-932    	; 0x100e <prvCopyDataFromQueue>
    13b2:	fa 94       	dec	r15
    13b4:	f8 01       	movw	r30, r16
    13b6:	f6 8e       	std	Z+30, r15	; 0x1e
    13b8:	80 85       	ldd	r24, Z+8	; 0x08
    13ba:	88 23       	and	r24, r24
    13bc:	31 f0       	breq	.+12     	; 0x13ca <xQueueReceive+0x5a>
    13be:	c8 01       	movw	r24, r16
    13c0:	08 96       	adiw	r24, 0x08	; 8
    13c2:	0e 94 85 14 	call	0x290a	; 0x290a <xTaskRemoveFromEventList>
    13c6:	81 11       	cpse	r24, r1
    13c8:	d0 dc       	rcall	.-1632   	; 0xd6a <vPortYield>
    13ca:	0f 90       	pop	r0
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	4f c0       	rjmp	.+158    	; 0x1470 <xQueueReceive+0x100>
    13d2:	8e 81       	ldd	r24, Y+6	; 0x06
    13d4:	9f 81       	ldd	r25, Y+7	; 0x07
    13d6:	a8 85       	ldd	r26, Y+8	; 0x08
    13d8:	b9 85       	ldd	r27, Y+9	; 0x09
    13da:	89 2b       	or	r24, r25
    13dc:	8a 2b       	or	r24, r26
    13de:	8b 2b       	or	r24, r27
    13e0:	21 f4       	brne	.+8      	; 0x13ea <xQueueReceive+0x7a>
    13e2:	0f 90       	pop	r0
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	43 c0       	rjmp	.+134    	; 0x1470 <xQueueReceive+0x100>
    13ea:	e1 10       	cpse	r14, r1
    13ec:	06 c0       	rjmp	.+12     	; 0x13fa <xQueueReceive+0x8a>
    13ee:	ce 01       	movw	r24, r28
    13f0:	01 96       	adiw	r24, 0x01	; 1
    13f2:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <vTaskInternalSetTimeOutState>
    13f6:	ee 24       	eor	r14, r14
    13f8:	e3 94       	inc	r14
    13fa:	0f 90       	pop	r0
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	e1 d6       	rcall	.+3522   	; 0x21c2 <vTaskSuspendAll>
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	0f 92       	push	r0
    1406:	f8 01       	movw	r30, r16
    1408:	81 a1       	ldd	r24, Z+33	; 0x21
    140a:	8f 3f       	cpi	r24, 0xFF	; 255
    140c:	09 f4       	brne	.+2      	; 0x1410 <xQueueReceive+0xa0>
    140e:	11 a2       	std	Z+33, r1	; 0x21
    1410:	f8 01       	movw	r30, r16
    1412:	82 a1       	ldd	r24, Z+34	; 0x22
    1414:	8f 3f       	cpi	r24, 0xFF	; 255
    1416:	09 f4       	brne	.+2      	; 0x141a <xQueueReceive+0xaa>
    1418:	12 a2       	std	Z+34, r1	; 0x22
    141a:	0f 90       	pop	r0
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	be 01       	movw	r22, r28
    1420:	6a 5f       	subi	r22, 0xFA	; 250
    1422:	7f 4f       	sbci	r23, 0xFF	; 255
    1424:	ce 01       	movw	r24, r28
    1426:	01 96       	adiw	r24, 0x01	; 1
    1428:	0e 94 f5 15 	call	0x2bea	; 0x2bea <xTaskCheckForTimeOut>
    142c:	81 11       	cpse	r24, r1
    142e:	17 c0       	rjmp	.+46     	; 0x145e <xQueueReceive+0xee>
    1430:	c8 01       	movw	r24, r16
    1432:	73 dd       	rcall	.-1306   	; 0xf1a <prvIsQueueEmpty>
    1434:	88 23       	and	r24, r24
    1436:	79 f0       	breq	.+30     	; 0x1456 <xQueueReceive+0xe6>
    1438:	4e 81       	ldd	r20, Y+6	; 0x06
    143a:	5f 81       	ldd	r21, Y+7	; 0x07
    143c:	68 85       	ldd	r22, Y+8	; 0x08
    143e:	79 85       	ldd	r23, Y+9	; 0x09
    1440:	c8 01       	movw	r24, r16
    1442:	43 96       	adiw	r24, 0x13	; 19
    1444:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vTaskPlaceOnEventList>
    1448:	c8 01       	movw	r24, r16
    144a:	fb dd       	rcall	.-1034   	; 0x1042 <prvUnlockQueue>
    144c:	fa d7       	rcall	.+4084   	; 0x2442 <xTaskResumeAll>
    144e:	81 11       	cpse	r24, r1
    1450:	a6 cf       	rjmp	.-180    	; 0x139e <xQueueReceive+0x2e>
    1452:	8b dc       	rcall	.-1770   	; 0xd6a <vPortYield>
    1454:	a4 cf       	rjmp	.-184    	; 0x139e <xQueueReceive+0x2e>
    1456:	c8 01       	movw	r24, r16
    1458:	f4 dd       	rcall	.-1048   	; 0x1042 <prvUnlockQueue>
    145a:	f3 d7       	rcall	.+4070   	; 0x2442 <xTaskResumeAll>
    145c:	a0 cf       	rjmp	.-192    	; 0x139e <xQueueReceive+0x2e>
    145e:	c8 01       	movw	r24, r16
    1460:	f0 dd       	rcall	.-1056   	; 0x1042 <prvUnlockQueue>
    1462:	ef d7       	rcall	.+4062   	; 0x2442 <xTaskResumeAll>
    1464:	c8 01       	movw	r24, r16
    1466:	59 dd       	rcall	.-1358   	; 0xf1a <prvIsQueueEmpty>
    1468:	88 23       	and	r24, r24
    146a:	09 f4       	brne	.+2      	; 0x146e <xQueueReceive+0xfe>
    146c:	98 cf       	rjmp	.-208    	; 0x139e <xQueueReceive+0x2e>
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	29 96       	adiw	r28, 0x09	; 9
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	1f 91       	pop	r17
    1482:	0f 91       	pop	r16
    1484:	ff 90       	pop	r15
    1486:	ef 90       	pop	r14
    1488:	df 90       	pop	r13
    148a:	cf 90       	pop	r12
    148c:	08 95       	ret

0000148e <xQueueSemaphoreTake>:
    148e:	ef 92       	push	r14
    1490:	ff 92       	push	r15
    1492:	0f 93       	push	r16
    1494:	1f 93       	push	r17
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	29 97       	sbiw	r28, 0x09	; 9
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	8c 01       	movw	r16, r24
    14ac:	4e 83       	std	Y+6, r20	; 0x06
    14ae:	5f 83       	std	Y+7, r21	; 0x07
    14b0:	68 87       	std	Y+8, r22	; 0x08
    14b2:	79 87       	std	Y+9, r23	; 0x09
    14b4:	e1 2c       	mov	r14, r1
    14b6:	f1 2c       	mov	r15, r1
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	f8 94       	cli
    14bc:	0f 92       	push	r0
    14be:	f8 01       	movw	r30, r16
    14c0:	86 8d       	ldd	r24, Z+30	; 0x1e
    14c2:	88 23       	and	r24, r24
    14c4:	c9 f0       	breq	.+50     	; 0x14f8 <xQueueSemaphoreTake+0x6a>
    14c6:	81 50       	subi	r24, 0x01	; 1
    14c8:	86 8f       	std	Z+30, r24	; 0x1e
    14ca:	80 81       	ld	r24, Z
    14cc:	91 81       	ldd	r25, Z+1	; 0x01
    14ce:	89 2b       	or	r24, r25
    14d0:	29 f4       	brne	.+10     	; 0x14dc <xQueueSemaphoreTake+0x4e>
    14d2:	0e 94 e5 17 	call	0x2fca	; 0x2fca <pvTaskIncrementMutexHeldCount>
    14d6:	f8 01       	movw	r30, r16
    14d8:	95 83       	std	Z+5, r25	; 0x05
    14da:	84 83       	std	Z+4, r24	; 0x04
    14dc:	f8 01       	movw	r30, r16
    14de:	80 85       	ldd	r24, Z+8	; 0x08
    14e0:	88 23       	and	r24, r24
    14e2:	31 f0       	breq	.+12     	; 0x14f0 <xQueueSemaphoreTake+0x62>
    14e4:	c8 01       	movw	r24, r16
    14e6:	08 96       	adiw	r24, 0x08	; 8
    14e8:	0e 94 85 14 	call	0x290a	; 0x290a <xTaskRemoveFromEventList>
    14ec:	81 11       	cpse	r24, r1
    14ee:	3d dc       	rcall	.-1926   	; 0xd6a <vPortYield>
    14f0:	0f 90       	pop	r0
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	6f c0       	rjmp	.+222    	; 0x15d6 <xQueueSemaphoreTake+0x148>
    14f8:	8e 81       	ldd	r24, Y+6	; 0x06
    14fa:	9f 81       	ldd	r25, Y+7	; 0x07
    14fc:	a8 85       	ldd	r26, Y+8	; 0x08
    14fe:	b9 85       	ldd	r27, Y+9	; 0x09
    1500:	89 2b       	or	r24, r25
    1502:	8a 2b       	or	r24, r26
    1504:	8b 2b       	or	r24, r27
    1506:	21 f4       	brne	.+8      	; 0x1510 <xQueueSemaphoreTake+0x82>
    1508:	0f 90       	pop	r0
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	63 c0       	rjmp	.+198    	; 0x15d6 <xQueueSemaphoreTake+0x148>
    1510:	f1 10       	cpse	r15, r1
    1512:	06 c0       	rjmp	.+12     	; 0x1520 <xQueueSemaphoreTake+0x92>
    1514:	ce 01       	movw	r24, r28
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <vTaskInternalSetTimeOutState>
    151c:	ff 24       	eor	r15, r15
    151e:	f3 94       	inc	r15
    1520:	0f 90       	pop	r0
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	4e d6       	rcall	.+3228   	; 0x21c2 <vTaskSuspendAll>
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	0f 92       	push	r0
    152c:	f8 01       	movw	r30, r16
    152e:	81 a1       	ldd	r24, Z+33	; 0x21
    1530:	8f 3f       	cpi	r24, 0xFF	; 255
    1532:	09 f4       	brne	.+2      	; 0x1536 <xQueueSemaphoreTake+0xa8>
    1534:	11 a2       	std	Z+33, r1	; 0x21
    1536:	f8 01       	movw	r30, r16
    1538:	82 a1       	ldd	r24, Z+34	; 0x22
    153a:	8f 3f       	cpi	r24, 0xFF	; 255
    153c:	09 f4       	brne	.+2      	; 0x1540 <xQueueSemaphoreTake+0xb2>
    153e:	12 a2       	std	Z+34, r1	; 0x22
    1540:	0f 90       	pop	r0
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	be 01       	movw	r22, r28
    1546:	6a 5f       	subi	r22, 0xFA	; 250
    1548:	7f 4f       	sbci	r23, 0xFF	; 255
    154a:	ce 01       	movw	r24, r28
    154c:	01 96       	adiw	r24, 0x01	; 1
    154e:	0e 94 f5 15 	call	0x2bea	; 0x2bea <xTaskCheckForTimeOut>
    1552:	81 11       	cpse	r24, r1
    1554:	26 c0       	rjmp	.+76     	; 0x15a2 <xQueueSemaphoreTake+0x114>
    1556:	c8 01       	movw	r24, r16
    1558:	e0 dc       	rcall	.-1600   	; 0xf1a <prvIsQueueEmpty>
    155a:	88 23       	and	r24, r24
    155c:	f1 f0       	breq	.+60     	; 0x159a <xQueueSemaphoreTake+0x10c>
    155e:	f8 01       	movw	r30, r16
    1560:	80 81       	ld	r24, Z
    1562:	91 81       	ldd	r25, Z+1	; 0x01
    1564:	89 2b       	or	r24, r25
    1566:	51 f4       	brne	.+20     	; 0x157c <xQueueSemaphoreTake+0xee>
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	0f 92       	push	r0
    156e:	84 81       	ldd	r24, Z+4	; 0x04
    1570:	95 81       	ldd	r25, Z+5	; 0x05
    1572:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <xTaskPriorityInherit>
    1576:	e8 2e       	mov	r14, r24
    1578:	0f 90       	pop	r0
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	4e 81       	ldd	r20, Y+6	; 0x06
    157e:	5f 81       	ldd	r21, Y+7	; 0x07
    1580:	68 85       	ldd	r22, Y+8	; 0x08
    1582:	79 85       	ldd	r23, Y+9	; 0x09
    1584:	c8 01       	movw	r24, r16
    1586:	43 96       	adiw	r24, 0x13	; 19
    1588:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vTaskPlaceOnEventList>
    158c:	c8 01       	movw	r24, r16
    158e:	59 dd       	rcall	.-1358   	; 0x1042 <prvUnlockQueue>
    1590:	58 d7       	rcall	.+3760   	; 0x2442 <xTaskResumeAll>
    1592:	81 11       	cpse	r24, r1
    1594:	91 cf       	rjmp	.-222    	; 0x14b8 <xQueueSemaphoreTake+0x2a>
    1596:	e9 db       	rcall	.-2094   	; 0xd6a <vPortYield>
    1598:	8f cf       	rjmp	.-226    	; 0x14b8 <xQueueSemaphoreTake+0x2a>
    159a:	c8 01       	movw	r24, r16
    159c:	52 dd       	rcall	.-1372   	; 0x1042 <prvUnlockQueue>
    159e:	51 d7       	rcall	.+3746   	; 0x2442 <xTaskResumeAll>
    15a0:	8b cf       	rjmp	.-234    	; 0x14b8 <xQueueSemaphoreTake+0x2a>
    15a2:	c8 01       	movw	r24, r16
    15a4:	4e dd       	rcall	.-1380   	; 0x1042 <prvUnlockQueue>
    15a6:	4d d7       	rcall	.+3738   	; 0x2442 <xTaskResumeAll>
    15a8:	c8 01       	movw	r24, r16
    15aa:	b7 dc       	rcall	.-1682   	; 0xf1a <prvIsQueueEmpty>
    15ac:	88 23       	and	r24, r24
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <xQueueSemaphoreTake+0x124>
    15b0:	83 cf       	rjmp	.-250    	; 0x14b8 <xQueueSemaphoreTake+0x2a>
    15b2:	ee 20       	and	r14, r14
    15b4:	79 f0       	breq	.+30     	; 0x15d4 <xQueueSemaphoreTake+0x146>
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	0f 92       	push	r0
    15bc:	c8 01       	movw	r24, r16
    15be:	9d dc       	rcall	.-1734   	; 0xefa <prvGetDisinheritPriorityAfterTimeout>
    15c0:	68 2f       	mov	r22, r24
    15c2:	f8 01       	movw	r30, r16
    15c4:	84 81       	ldd	r24, Z+4	; 0x04
    15c6:	95 81       	ldd	r25, Z+5	; 0x05
    15c8:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <vTaskPriorityDisinheritAfterTimeout>
    15cc:	0f 90       	pop	r0
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	01 c0       	rjmp	.+2      	; 0x15d6 <xQueueSemaphoreTake+0x148>
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	29 96       	adiw	r28, 0x09	; 9
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	1f 91       	pop	r17
    15e8:	0f 91       	pop	r16
    15ea:	ff 90       	pop	r15
    15ec:	ef 90       	pop	r14
    15ee:	08 95       	ret

000015f0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	0f 92       	push	r0
    15fc:	89 a1       	ldd	r24, Y+33	; 0x21
    15fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1600:	09 f4       	brne	.+2      	; 0x1604 <vQueueWaitForMessageRestricted+0x14>
    1602:	19 a2       	std	Y+33, r1	; 0x21
    1604:	8a a1       	ldd	r24, Y+34	; 0x22
    1606:	8f 3f       	cpi	r24, 0xFF	; 255
    1608:	09 f4       	brne	.+2      	; 0x160c <vQueueWaitForMessageRestricted+0x1c>
    160a:	1a a2       	std	Y+34, r1	; 0x22
    160c:	0f 90       	pop	r0
    160e:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1610:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1612:	81 11       	cpse	r24, r1
    1614:	04 c0       	rjmp	.+8      	; 0x161e <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1616:	ce 01       	movw	r24, r28
    1618:	43 96       	adiw	r24, 0x13	; 19
    161a:	0e 94 43 14 	call	0x2886	; 0x2886 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    161e:	ce 01       	movw	r24, r28
    1620:	10 dd       	rcall	.-1504   	; 0x1042 <prvUnlockQueue>
    }
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	08 95       	ret

00001628 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1628:	fc 01       	movw	r30, r24
    162a:	44 81       	ldd	r20, Z+4	; 0x04
    162c:	55 81       	ldd	r21, Z+5	; 0x05
    162e:	22 81       	ldd	r18, Z+2	; 0x02
    1630:	33 81       	ldd	r19, Z+3	; 0x03
    1632:	24 0f       	add	r18, r20
    1634:	35 1f       	adc	r19, r21
    1636:	80 81       	ld	r24, Z
    1638:	91 81       	ldd	r25, Z+1	; 0x01
    163a:	b9 01       	movw	r22, r18
    163c:	68 1b       	sub	r22, r24
    163e:	79 0b       	sbc	r23, r25
    1640:	cb 01       	movw	r24, r22
    1642:	64 17       	cp	r22, r20
    1644:	75 07       	cpc	r23, r21
    1646:	10 f0       	brcs	.+4      	; 0x164c <prvBytesInBuffer+0x24>
    1648:	84 1b       	sub	r24, r20
    164a:	95 0b       	sbc	r25, r21
    164c:	08 95       	ret

0000164e <prvInitialiseNewStreamBuffer>:
    164e:	0f 93       	push	r16
    1650:	fc 01       	movw	r30, r24
    1652:	8f e0       	ldi	r24, 0x0F	; 15
    1654:	df 01       	movw	r26, r30
    1656:	1d 92       	st	X+, r1
    1658:	8a 95       	dec	r24
    165a:	e9 f7       	brne	.-6      	; 0x1656 <prvInitialiseNewStreamBuffer+0x8>
    165c:	75 87       	std	Z+13, r23	; 0x0d
    165e:	64 87       	std	Z+12, r22	; 0x0c
    1660:	55 83       	std	Z+5, r21	; 0x05
    1662:	44 83       	std	Z+4, r20	; 0x04
    1664:	37 83       	std	Z+7, r19	; 0x07
    1666:	26 83       	std	Z+6, r18	; 0x06
    1668:	06 87       	std	Z+14, r16	; 0x0e
    166a:	0f 91       	pop	r16
    166c:	08 95       	ret

0000166e <prvWriteBytesToBuffer>:
    166e:	af 92       	push	r10
    1670:	bf 92       	push	r11
    1672:	cf 92       	push	r12
    1674:	df 92       	push	r13
    1676:	ef 92       	push	r14
    1678:	ff 92       	push	r15
    167a:	0f 93       	push	r16
    167c:	1f 93       	push	r17
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	6c 01       	movw	r12, r24
    1684:	5b 01       	movw	r10, r22
    1686:	7a 01       	movw	r14, r20
    1688:	fc 01       	movw	r30, r24
    168a:	c2 81       	ldd	r28, Z+2	; 0x02
    168c:	d3 81       	ldd	r29, Z+3	; 0x03
    168e:	04 81       	ldd	r16, Z+4	; 0x04
    1690:	15 81       	ldd	r17, Z+5	; 0x05
    1692:	0c 1b       	sub	r16, r28
    1694:	1d 0b       	sbc	r17, r29
    1696:	40 17       	cp	r20, r16
    1698:	51 07       	cpc	r21, r17
    169a:	08 f4       	brcc	.+2      	; 0x169e <prvWriteBytesToBuffer+0x30>
    169c:	8a 01       	movw	r16, r20
    169e:	f6 01       	movw	r30, r12
    16a0:	84 85       	ldd	r24, Z+12	; 0x0c
    16a2:	95 85       	ldd	r25, Z+13	; 0x0d
    16a4:	a8 01       	movw	r20, r16
    16a6:	b5 01       	movw	r22, r10
    16a8:	8c 0f       	add	r24, r28
    16aa:	9d 1f       	adc	r25, r29
    16ac:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <memcpy>
    16b0:	0e 15       	cp	r16, r14
    16b2:	1f 05       	cpc	r17, r15
    16b4:	58 f4       	brcc	.+22     	; 0x16cc <prvWriteBytesToBuffer+0x5e>
    16b6:	a7 01       	movw	r20, r14
    16b8:	40 1b       	sub	r20, r16
    16ba:	51 0b       	sbc	r21, r17
    16bc:	b5 01       	movw	r22, r10
    16be:	60 0f       	add	r22, r16
    16c0:	71 1f       	adc	r23, r17
    16c2:	f6 01       	movw	r30, r12
    16c4:	84 85       	ldd	r24, Z+12	; 0x0c
    16c6:	95 85       	ldd	r25, Z+13	; 0x0d
    16c8:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <memcpy>
    16cc:	ce 01       	movw	r24, r28
    16ce:	8e 0d       	add	r24, r14
    16d0:	9f 1d       	adc	r25, r15
    16d2:	f6 01       	movw	r30, r12
    16d4:	24 81       	ldd	r18, Z+4	; 0x04
    16d6:	35 81       	ldd	r19, Z+5	; 0x05
    16d8:	82 17       	cp	r24, r18
    16da:	93 07       	cpc	r25, r19
    16dc:	10 f0       	brcs	.+4      	; 0x16e2 <prvWriteBytesToBuffer+0x74>
    16de:	82 1b       	sub	r24, r18
    16e0:	93 0b       	sbc	r25, r19
    16e2:	f6 01       	movw	r30, r12
    16e4:	93 83       	std	Z+3, r25	; 0x03
    16e6:	82 83       	std	Z+2, r24	; 0x02
    16e8:	c7 01       	movw	r24, r14
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	ff 90       	pop	r15
    16f4:	ef 90       	pop	r14
    16f6:	df 90       	pop	r13
    16f8:	cf 90       	pop	r12
    16fa:	bf 90       	pop	r11
    16fc:	af 90       	pop	r10
    16fe:	08 95       	ret

00001700 <prvWriteMessageToBuffer>:
    1700:	cf 92       	push	r12
    1702:	df 92       	push	r13
    1704:	ef 92       	push	r14
    1706:	ff 92       	push	r15
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	1f 92       	push	r1
    1712:	1f 92       	push	r1
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	7c 01       	movw	r14, r24
    171a:	6b 01       	movw	r12, r22
    171c:	5a 83       	std	Y+2, r21	; 0x02
    171e:	49 83       	std	Y+1, r20	; 0x01
    1720:	21 15       	cp	r18, r1
    1722:	31 05       	cpc	r19, r1
    1724:	c1 f0       	breq	.+48     	; 0x1756 <prvWriteMessageToBuffer+0x56>
    1726:	fc 01       	movw	r30, r24
    1728:	86 85       	ldd	r24, Z+14	; 0x0e
    172a:	80 fd       	sbrc	r24, 0
    172c:	08 c0       	rjmp	.+16     	; 0x173e <prvWriteMessageToBuffer+0x3e>
    172e:	42 17       	cp	r20, r18
    1730:	53 07       	cpc	r21, r19
    1732:	08 f4       	brcc	.+2      	; 0x1736 <prvWriteMessageToBuffer+0x36>
    1734:	9a 01       	movw	r18, r20
    1736:	3a 83       	std	Y+2, r19	; 0x02
    1738:	29 83       	std	Y+1, r18	; 0x01
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	0f c0       	rjmp	.+30     	; 0x175c <prvWriteMessageToBuffer+0x5c>
    173e:	20 17       	cp	r18, r16
    1740:	31 07       	cpc	r19, r17
    1742:	58 f0       	brcs	.+22     	; 0x175a <prvWriteMessageToBuffer+0x5a>
    1744:	42 e0       	ldi	r20, 0x02	; 2
    1746:	50 e0       	ldi	r21, 0x00	; 0
    1748:	be 01       	movw	r22, r28
    174a:	6f 5f       	subi	r22, 0xFF	; 255
    174c:	7f 4f       	sbci	r23, 0xFF	; 255
    174e:	c7 01       	movw	r24, r14
    1750:	8e df       	rcall	.-228    	; 0x166e <prvWriteBytesToBuffer>
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	03 c0       	rjmp	.+6      	; 0x175c <prvWriteMessageToBuffer+0x5c>
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	01 c0       	rjmp	.+2      	; 0x175c <prvWriteMessageToBuffer+0x5c>
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	88 23       	and	r24, r24
    175e:	31 f0       	breq	.+12     	; 0x176c <prvWriteMessageToBuffer+0x6c>
    1760:	49 81       	ldd	r20, Y+1	; 0x01
    1762:	5a 81       	ldd	r21, Y+2	; 0x02
    1764:	b6 01       	movw	r22, r12
    1766:	c7 01       	movw	r24, r14
    1768:	82 df       	rcall	.-252    	; 0x166e <prvWriteBytesToBuffer>
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <prvWriteMessageToBuffer+0x70>
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	1f 91       	pop	r17
    177a:	0f 91       	pop	r16
    177c:	ff 90       	pop	r15
    177e:	ef 90       	pop	r14
    1780:	df 90       	pop	r13
    1782:	cf 90       	pop	r12
    1784:	08 95       	ret

00001786 <prvReadBytesFromBuffer>:
    1786:	af 92       	push	r10
    1788:	bf 92       	push	r11
    178a:	cf 92       	push	r12
    178c:	df 92       	push	r13
    178e:	ef 92       	push	r14
    1790:	ff 92       	push	r15
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
    179a:	7c 01       	movw	r14, r24
    179c:	5b 01       	movw	r10, r22
    179e:	e9 01       	movw	r28, r18
    17a0:	42 17       	cp	r20, r18
    17a2:	53 07       	cpc	r21, r19
    17a4:	08 f4       	brcc	.+2      	; 0x17a8 <prvReadBytesFromBuffer+0x22>
    17a6:	ea 01       	movw	r28, r20
    17a8:	20 97       	sbiw	r28, 0x00	; 0
    17aa:	81 f1       	breq	.+96     	; 0x180c <prvReadBytesFromBuffer+0x86>
    17ac:	f7 01       	movw	r30, r14
    17ae:	00 81       	ld	r16, Z
    17b0:	11 81       	ldd	r17, Z+1	; 0x01
    17b2:	84 81       	ldd	r24, Z+4	; 0x04
    17b4:	95 81       	ldd	r25, Z+5	; 0x05
    17b6:	80 1b       	sub	r24, r16
    17b8:	91 0b       	sbc	r25, r17
    17ba:	6e 01       	movw	r12, r28
    17bc:	8c 17       	cp	r24, r28
    17be:	9d 07       	cpc	r25, r29
    17c0:	08 f4       	brcc	.+2      	; 0x17c4 <prvReadBytesFromBuffer+0x3e>
    17c2:	6c 01       	movw	r12, r24
    17c4:	f7 01       	movw	r30, r14
    17c6:	64 85       	ldd	r22, Z+12	; 0x0c
    17c8:	75 85       	ldd	r23, Z+13	; 0x0d
    17ca:	60 0f       	add	r22, r16
    17cc:	71 1f       	adc	r23, r17
    17ce:	a6 01       	movw	r20, r12
    17d0:	c5 01       	movw	r24, r10
    17d2:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <memcpy>
    17d6:	cc 16       	cp	r12, r28
    17d8:	dd 06       	cpc	r13, r29
    17da:	58 f4       	brcc	.+22     	; 0x17f2 <prvReadBytesFromBuffer+0x6c>
    17dc:	ae 01       	movw	r20, r28
    17de:	4c 19       	sub	r20, r12
    17e0:	5d 09       	sbc	r21, r13
    17e2:	f7 01       	movw	r30, r14
    17e4:	64 85       	ldd	r22, Z+12	; 0x0c
    17e6:	75 85       	ldd	r23, Z+13	; 0x0d
    17e8:	c5 01       	movw	r24, r10
    17ea:	8c 0d       	add	r24, r12
    17ec:	9d 1d       	adc	r25, r13
    17ee:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <memcpy>
    17f2:	0c 0f       	add	r16, r28
    17f4:	1d 1f       	adc	r17, r29
    17f6:	f7 01       	movw	r30, r14
    17f8:	84 81       	ldd	r24, Z+4	; 0x04
    17fa:	95 81       	ldd	r25, Z+5	; 0x05
    17fc:	08 17       	cp	r16, r24
    17fe:	19 07       	cpc	r17, r25
    1800:	10 f0       	brcs	.+4      	; 0x1806 <prvReadBytesFromBuffer+0x80>
    1802:	08 1b       	sub	r16, r24
    1804:	19 0b       	sbc	r17, r25
    1806:	f7 01       	movw	r30, r14
    1808:	11 83       	std	Z+1, r17	; 0x01
    180a:	00 83       	st	Z, r16
    180c:	ce 01       	movw	r24, r28
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	1f 91       	pop	r17
    1814:	0f 91       	pop	r16
    1816:	ff 90       	pop	r15
    1818:	ef 90       	pop	r14
    181a:	df 90       	pop	r13
    181c:	cf 90       	pop	r12
    181e:	bf 90       	pop	r11
    1820:	af 90       	pop	r10
    1822:	08 95       	ret

00001824 <prvReadMessageFromBuffer>:
    1824:	6f 92       	push	r6
    1826:	7f 92       	push	r7
    1828:	8f 92       	push	r8
    182a:	9f 92       	push	r9
    182c:	af 92       	push	r10
    182e:	bf 92       	push	r11
    1830:	cf 92       	push	r12
    1832:	df 92       	push	r13
    1834:	ef 92       	push	r14
    1836:	ff 92       	push	r15
    1838:	0f 93       	push	r16
    183a:	1f 93       	push	r17
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	1f 92       	push	r1
    1842:	1f 92       	push	r1
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	6c 01       	movw	r12, r24
    184a:	4b 01       	movw	r8, r22
    184c:	5a 01       	movw	r10, r20
    184e:	79 01       	movw	r14, r18
    1850:	01 15       	cp	r16, r1
    1852:	11 05       	cpc	r17, r1
    1854:	b1 f0       	breq	.+44     	; 0x1882 <prvReadMessageFromBuffer+0x5e>
    1856:	fc 01       	movw	r30, r24
    1858:	60 80       	ld	r6, Z
    185a:	71 80       	ldd	r7, Z+1	; 0x01
    185c:	a8 01       	movw	r20, r16
    185e:	be 01       	movw	r22, r28
    1860:	6f 5f       	subi	r22, 0xFF	; 255
    1862:	7f 4f       	sbci	r23, 0xFF	; 255
    1864:	90 df       	rcall	.-224    	; 0x1786 <prvReadBytesFromBuffer>
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	9a 81       	ldd	r25, Y+2	; 0x02
    186a:	e0 1a       	sub	r14, r16
    186c:	f1 0a       	sbc	r15, r17
    186e:	a8 16       	cp	r10, r24
    1870:	b9 06       	cpc	r11, r25
    1872:	30 f4       	brcc	.+12     	; 0x1880 <prvReadMessageFromBuffer+0x5c>
    1874:	f6 01       	movw	r30, r12
    1876:	71 82       	std	Z+1, r7	; 0x01
    1878:	60 82       	st	Z, r6
    187a:	a1 2c       	mov	r10, r1
    187c:	b1 2c       	mov	r11, r1
    187e:	01 c0       	rjmp	.+2      	; 0x1882 <prvReadMessageFromBuffer+0x5e>
    1880:	5c 01       	movw	r10, r24
    1882:	97 01       	movw	r18, r14
    1884:	a5 01       	movw	r20, r10
    1886:	b4 01       	movw	r22, r8
    1888:	c6 01       	movw	r24, r12
    188a:	7d df       	rcall	.-262    	; 0x1786 <prvReadBytesFromBuffer>
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	1f 91       	pop	r17
    1896:	0f 91       	pop	r16
    1898:	ff 90       	pop	r15
    189a:	ef 90       	pop	r14
    189c:	df 90       	pop	r13
    189e:	cf 90       	pop	r12
    18a0:	bf 90       	pop	r11
    18a2:	af 90       	pop	r10
    18a4:	9f 90       	pop	r9
    18a6:	8f 90       	pop	r8
    18a8:	7f 90       	pop	r7
    18aa:	6f 90       	pop	r6
    18ac:	08 95       	ret

000018ae <xStreamBufferGenericCreate>:
    18ae:	cf 92       	push	r12
    18b0:	df 92       	push	r13
    18b2:	ef 92       	push	r14
    18b4:	ff 92       	push	r15
    18b6:	0f 93       	push	r16
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	ec 01       	movw	r28, r24
    18be:	6b 01       	movw	r12, r22
    18c0:	41 30       	cpi	r20, 0x01	; 1
    18c2:	11 f4       	brne	.+4      	; 0x18c8 <xStreamBufferGenericCreate+0x1a>
    18c4:	01 e0       	ldi	r16, 0x01	; 1
    18c6:	01 c0       	rjmp	.+2      	; 0x18ca <xStreamBufferGenericCreate+0x1c>
    18c8:	00 e0       	ldi	r16, 0x00	; 0
    18ca:	c1 14       	cp	r12, r1
    18cc:	d1 04       	cpc	r13, r1
    18ce:	19 f4       	brne	.+6      	; 0x18d6 <xStreamBufferGenericCreate+0x28>
    18d0:	cc 24       	eor	r12, r12
    18d2:	c3 94       	inc	r12
    18d4:	d1 2c       	mov	r13, r1
    18d6:	ce 01       	movw	r24, r28
    18d8:	40 96       	adiw	r24, 0x10	; 16
    18da:	c8 17       	cp	r28, r24
    18dc:	d9 07       	cpc	r29, r25
    18de:	20 f4       	brcc	.+8      	; 0x18e8 <xStreamBufferGenericCreate+0x3a>
    18e0:	21 96       	adiw	r28, 0x01	; 1
    18e2:	8f d8       	rcall	.-3810   	; 0xa02 <pvPortMalloc>
    18e4:	7c 01       	movw	r14, r24
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <xStreamBufferGenericCreate+0x3e>
    18e8:	e1 2c       	mov	r14, r1
    18ea:	f1 2c       	mov	r15, r1
    18ec:	e1 14       	cp	r14, r1
    18ee:	f1 04       	cpc	r15, r1
    18f0:	39 f0       	breq	.+14     	; 0x1900 <xStreamBufferGenericCreate+0x52>
    18f2:	96 01       	movw	r18, r12
    18f4:	ae 01       	movw	r20, r28
    18f6:	b7 01       	movw	r22, r14
    18f8:	61 5f       	subi	r22, 0xF1	; 241
    18fa:	7f 4f       	sbci	r23, 0xFF	; 255
    18fc:	c7 01       	movw	r24, r14
    18fe:	a7 de       	rcall	.-690    	; 0x164e <prvInitialiseNewStreamBuffer>
    1900:	c7 01       	movw	r24, r14
    1902:	df 91       	pop	r29
    1904:	cf 91       	pop	r28
    1906:	0f 91       	pop	r16
    1908:	ff 90       	pop	r15
    190a:	ef 90       	pop	r14
    190c:	df 90       	pop	r13
    190e:	cf 90       	pop	r12
    1910:	08 95       	ret

00001912 <xStreamBufferReset>:
    1912:	0f 93       	push	r16
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	0f 92       	push	r0
    191a:	fc 01       	movw	r30, r24
    191c:	20 85       	ldd	r18, Z+8	; 0x08
    191e:	31 85       	ldd	r19, Z+9	; 0x09
    1920:	23 2b       	or	r18, r19
    1922:	71 f4       	brne	.+28     	; 0x1940 <xStreamBufferReset+0x2e>
    1924:	22 85       	ldd	r18, Z+10	; 0x0a
    1926:	33 85       	ldd	r19, Z+11	; 0x0b
    1928:	23 2b       	or	r18, r19
    192a:	61 f4       	brne	.+24     	; 0x1944 <xStreamBufferReset+0x32>
    192c:	26 81       	ldd	r18, Z+6	; 0x06
    192e:	37 81       	ldd	r19, Z+7	; 0x07
    1930:	44 81       	ldd	r20, Z+4	; 0x04
    1932:	55 81       	ldd	r21, Z+5	; 0x05
    1934:	64 85       	ldd	r22, Z+12	; 0x0c
    1936:	75 85       	ldd	r23, Z+13	; 0x0d
    1938:	06 85       	ldd	r16, Z+14	; 0x0e
    193a:	89 de       	rcall	.-750    	; 0x164e <prvInitialiseNewStreamBuffer>
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	03 c0       	rjmp	.+6      	; 0x1946 <xStreamBufferReset+0x34>
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	01 c0       	rjmp	.+2      	; 0x1946 <xStreamBufferReset+0x34>
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	0f 90       	pop	r0
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	0f 91       	pop	r16
    194c:	08 95       	ret

0000194e <xStreamBufferSpacesAvailable>:
    194e:	fc 01       	movw	r30, r24
    1950:	24 81       	ldd	r18, Z+4	; 0x04
    1952:	35 81       	ldd	r19, Z+5	; 0x05
    1954:	80 81       	ld	r24, Z
    1956:	91 81       	ldd	r25, Z+1	; 0x01
    1958:	82 0f       	add	r24, r18
    195a:	93 1f       	adc	r25, r19
    195c:	42 81       	ldd	r20, Z+2	; 0x02
    195e:	53 81       	ldd	r21, Z+3	; 0x03
    1960:	84 1b       	sub	r24, r20
    1962:	95 0b       	sbc	r25, r21
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	82 17       	cp	r24, r18
    1968:	93 07       	cpc	r25, r19
    196a:	10 f0       	brcs	.+4      	; 0x1970 <xStreamBufferSpacesAvailable+0x22>
    196c:	82 1b       	sub	r24, r18
    196e:	93 0b       	sbc	r25, r19
    1970:	08 95       	ret

00001972 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1972:	2f 92       	push	r2
    1974:	3f 92       	push	r3
    1976:	4f 92       	push	r4
    1978:	5f 92       	push	r5
    197a:	6f 92       	push	r6
    197c:	7f 92       	push	r7
    197e:	8f 92       	push	r8
    1980:	9f 92       	push	r9
    1982:	af 92       	push	r10
    1984:	bf 92       	push	r11
    1986:	cf 92       	push	r12
    1988:	df 92       	push	r13
    198a:	ef 92       	push	r14
    198c:	ff 92       	push	r15
    198e:	0f 93       	push	r16
    1990:	1f 93       	push	r17
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	2b 97       	sbiw	r28, 0x0b	; 11
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	cd bf       	out	0x3d, r28	; 61
    19a6:	4c 01       	movw	r8, r24
    19a8:	7b 87       	std	Y+11, r23	; 0x0b
    19aa:	6a 87       	std	Y+10, r22	; 0x0a
    19ac:	1a 01       	movw	r2, r20
    19ae:	0e 83       	std	Y+6, r16	; 0x06
    19b0:	1f 83       	std	Y+7, r17	; 0x07
    19b2:	28 87       	std	Y+8, r18	; 0x08
    19b4:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    19b6:	fc 01       	movw	r30, r24
    19b8:	84 81       	ldd	r24, Z+4	; 0x04
    19ba:	95 81       	ldd	r25, Z+5	; 0x05
    19bc:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    19be:	26 85       	ldd	r18, Z+14	; 0x0e
    19c0:	20 ff       	sbrs	r18, 0
    19c2:	0c c0       	rjmp	.+24     	; 0x19dc <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    19c4:	2a 01       	movw	r4, r20
    19c6:	f2 e0       	ldi	r31, 0x02	; 2
    19c8:	4f 0e       	add	r4, r31
    19ca:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    19cc:	84 15       	cp	r24, r4
    19ce:	95 05       	cpc	r25, r5
    19d0:	58 f4       	brcc	.+22     	; 0x19e8 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    19d2:	1e 82       	std	Y+6, r1	; 0x06
    19d4:	1f 82       	std	Y+7, r1	; 0x07
    19d6:	18 86       	std	Y+8, r1	; 0x08
    19d8:	19 86       	std	Y+9, r1	; 0x09
    19da:	06 c0       	rjmp	.+12     	; 0x19e8 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    19dc:	84 17       	cp	r24, r20
    19de:	95 07       	cpc	r25, r21
    19e0:	10 f0       	brcs	.+4      	; 0x19e6 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    19e2:	2a 01       	movw	r4, r20
    19e4:	01 c0       	rjmp	.+2      	; 0x19e8 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    19e6:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    19e8:	8e 81       	ldd	r24, Y+6	; 0x06
    19ea:	9f 81       	ldd	r25, Y+7	; 0x07
    19ec:	a8 85       	ldd	r26, Y+8	; 0x08
    19ee:	b9 85       	ldd	r27, Y+9	; 0x09
    19f0:	89 2b       	or	r24, r25
    19f2:	8a 2b       	or	r24, r26
    19f4:	8b 2b       	or	r24, r27
    19f6:	09 f4       	brne	.+2      	; 0x19fa <xStreamBufferSend+0x88>
    19f8:	38 c0       	rjmp	.+112    	; 0x1a6a <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    19fa:	ce 01       	movw	r24, r28
    19fc:	01 96       	adiw	r24, 0x01	; 1
    19fe:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1a08:	c4 01       	movw	r24, r8
    1a0a:	a1 df       	rcall	.-190    	; 0x194e <xStreamBufferSpacesAvailable>
    1a0c:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1a0e:	84 15       	cp	r24, r4
    1a10:	95 05       	cpc	r25, r5
    1a12:	40 f5       	brcc	.+80     	; 0x1a64 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1a14:	60 e0       	ldi	r22, 0x00	; 0
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	0e 94 b8 1a 	call	0x3570	; 0x3570 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1a1e:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <xTaskGetCurrentTaskHandle>
    1a22:	f4 01       	movw	r30, r8
    1a24:	93 87       	std	Z+11, r25	; 0x0b
    1a26:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1a28:	0f 90       	pop	r0
    1a2a:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1a2c:	ae 80       	ldd	r10, Y+6	; 0x06
    1a2e:	bf 80       	ldd	r11, Y+7	; 0x07
    1a30:	c8 84       	ldd	r12, Y+8	; 0x08
    1a32:	d9 84       	ldd	r13, Y+9	; 0x09
    1a34:	e1 2c       	mov	r14, r1
    1a36:	f1 2c       	mov	r15, r1
    1a38:	00 e0       	ldi	r16, 0x00	; 0
    1a3a:	10 e0       	ldi	r17, 0x00	; 0
    1a3c:	98 01       	movw	r18, r16
    1a3e:	40 e0       	ldi	r20, 0x00	; 0
    1a40:	50 e0       	ldi	r21, 0x00	; 0
    1a42:	ba 01       	movw	r22, r20
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	0e 94 f7 17 	call	0x2fee	; 0x2fee <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1a4a:	f4 01       	movw	r30, r8
    1a4c:	13 86       	std	Z+11, r1	; 0x0b
    1a4e:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1a50:	be 01       	movw	r22, r28
    1a52:	6a 5f       	subi	r22, 0xFA	; 250
    1a54:	7f 4f       	sbci	r23, 0xFF	; 255
    1a56:	ce 01       	movw	r24, r28
    1a58:	01 96       	adiw	r24, 0x01	; 1
    1a5a:	0e 94 f5 15 	call	0x2bea	; 0x2bea <xTaskCheckForTimeOut>
    1a5e:	88 23       	and	r24, r24
    1a60:	81 f2       	breq	.-96     	; 0x1a02 <xStreamBufferSend+0x90>
    1a62:	05 c0       	rjmp	.+10     	; 0x1a6e <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1a64:	0f 90       	pop	r0
    1a66:	0f be       	out	0x3f, r0	; 63
                    break;
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1a6a:	61 2c       	mov	r6, r1
    1a6c:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1a6e:	61 14       	cp	r6, r1
    1a70:	71 04       	cpc	r7, r1
    1a72:	19 f4       	brne	.+6      	; 0x1a7a <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1a74:	c4 01       	movw	r24, r8
    1a76:	6b df       	rcall	.-298    	; 0x194e <xStreamBufferSpacesAvailable>
    1a78:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1a7a:	82 01       	movw	r16, r4
    1a7c:	93 01       	movw	r18, r6
    1a7e:	a1 01       	movw	r20, r2
    1a80:	6a 85       	ldd	r22, Y+10	; 0x0a
    1a82:	7b 85       	ldd	r23, Y+11	; 0x0b
    1a84:	c4 01       	movw	r24, r8
    1a86:	3c de       	rcall	.-904    	; 0x1700 <prvWriteMessageToBuffer>
    1a88:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1a8a:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1a8c:	e9 f0       	breq	.+58     	; 0x1ac8 <xStreamBufferSend+0x156>
    1a8e:	c4 01       	movw	r24, r8
    1a90:	cb dd       	rcall	.-1130   	; 0x1628 <prvBytesInBuffer>
    1a92:	f4 01       	movw	r30, r8
    1a94:	26 81       	ldd	r18, Z+6	; 0x06
    1a96:	37 81       	ldd	r19, Z+7	; 0x07
    1a98:	82 17       	cp	r24, r18
    1a9a:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1a9c:	a8 f0       	brcs	.+42     	; 0x1ac8 <xStreamBufferSend+0x156>
    1a9e:	91 d3       	rcall	.+1826   	; 0x21c2 <vTaskSuspendAll>
    1aa0:	f4 01       	movw	r30, r8
    1aa2:	80 85       	ldd	r24, Z+8	; 0x08
    1aa4:	91 85       	ldd	r25, Z+9	; 0x09
    1aa6:	89 2b       	or	r24, r25
    1aa8:	71 f0       	breq	.+28     	; 0x1ac6 <xStreamBufferSend+0x154>
    1aaa:	80 85       	ldd	r24, Z+8	; 0x08
    1aac:	91 85       	ldd	r25, Z+9	; 0x09
    1aae:	e1 2c       	mov	r14, r1
    1ab0:	f1 2c       	mov	r15, r1
    1ab2:	00 e0       	ldi	r16, 0x00	; 0
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	a9 01       	movw	r20, r18
    1aba:	60 e0       	ldi	r22, 0x00	; 0
    1abc:	0e 94 9f 18 	call	0x313e	; 0x313e <xTaskGenericNotify>
    1ac0:	f4 01       	movw	r30, r8
    1ac2:	11 86       	std	Z+9, r1	; 0x09
    1ac4:	10 86       	std	Z+8, r1	; 0x08
    1ac6:	bd d4       	rcall	.+2426   	; 0x2442 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1ac8:	c6 01       	movw	r24, r12
    1aca:	2b 96       	adiw	r28, 0x0b	; 11
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	f8 94       	cli
    1ad0:	de bf       	out	0x3e, r29	; 62
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	cd bf       	out	0x3d, r28	; 61
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	1f 91       	pop	r17
    1adc:	0f 91       	pop	r16
    1ade:	ff 90       	pop	r15
    1ae0:	ef 90       	pop	r14
    1ae2:	df 90       	pop	r13
    1ae4:	cf 90       	pop	r12
    1ae6:	bf 90       	pop	r11
    1ae8:	af 90       	pop	r10
    1aea:	9f 90       	pop	r9
    1aec:	8f 90       	pop	r8
    1aee:	7f 90       	pop	r7
    1af0:	6f 90       	pop	r6
    1af2:	5f 90       	pop	r5
    1af4:	4f 90       	pop	r4
    1af6:	3f 90       	pop	r3
    1af8:	2f 90       	pop	r2
    1afa:	08 95       	ret

00001afc <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1afc:	af 92       	push	r10
    1afe:	bf 92       	push	r11
    1b00:	cf 92       	push	r12
    1b02:	df 92       	push	r13
    1b04:	ef 92       	push	r14
    1b06:	ff 92       	push	r15
    1b08:	0f 93       	push	r16
    1b0a:	1f 93       	push	r17
    1b0c:	cf 93       	push	r28
    1b0e:	df 93       	push	r29
    1b10:	ec 01       	movw	r28, r24
    1b12:	7b 01       	movw	r14, r22
    1b14:	5a 01       	movw	r10, r20
    1b16:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1b18:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b1a:	80 ff       	sbrs	r24, 0
    1b1c:	04 c0       	rjmp	.+8      	; 0x1b26 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1b1e:	8a 01       	movw	r16, r20
    1b20:	0e 5f       	subi	r16, 0xFE	; 254
    1b22:	1f 4f       	sbci	r17, 0xFF	; 255
    1b24:	01 c0       	rjmp	.+2      	; 0x1b28 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1b26:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1b28:	ce 01       	movw	r24, r28
    1b2a:	11 df       	rcall	.-478    	; 0x194e <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1b2c:	9c 01       	movw	r18, r24
    1b2e:	a5 01       	movw	r20, r10
    1b30:	b7 01       	movw	r22, r14
    1b32:	ce 01       	movw	r24, r28
    1b34:	e5 dd       	rcall	.-1078   	; 0x1700 <prvWriteMessageToBuffer>
    1b36:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1b38:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1b3a:	c1 f0       	breq	.+48     	; 0x1b6c <xStreamBufferSendFromISR+0x70>
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	74 dd       	rcall	.-1304   	; 0x1628 <prvBytesInBuffer>
    1b40:	2e 81       	ldd	r18, Y+6	; 0x06
    1b42:	3f 81       	ldd	r19, Y+7	; 0x07
    1b44:	82 17       	cp	r24, r18
    1b46:	93 07       	cpc	r25, r19
    1b48:	88 f0       	brcs	.+34     	; 0x1b6c <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1b4a:	88 85       	ldd	r24, Y+8	; 0x08
    1b4c:	99 85       	ldd	r25, Y+9	; 0x09
    1b4e:	89 2b       	or	r24, r25
    1b50:	69 f0       	breq	.+26     	; 0x1b6c <xStreamBufferSendFromISR+0x70>
    1b52:	88 85       	ldd	r24, Y+8	; 0x08
    1b54:	99 85       	ldd	r25, Y+9	; 0x09
    1b56:	e1 2c       	mov	r14, r1
    1b58:	f1 2c       	mov	r15, r1
    1b5a:	00 e0       	ldi	r16, 0x00	; 0
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	a9 01       	movw	r20, r18
    1b62:	60 e0       	ldi	r22, 0x00	; 0
    1b64:	0e 94 96 19 	call	0x332c	; 0x332c <xTaskGenericNotifyFromISR>
    1b68:	19 86       	std	Y+9, r1	; 0x09
    1b6a:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1b6c:	c5 01       	movw	r24, r10
    1b6e:	df 91       	pop	r29
    1b70:	cf 91       	pop	r28
    1b72:	1f 91       	pop	r17
    1b74:	0f 91       	pop	r16
    1b76:	ff 90       	pop	r15
    1b78:	ef 90       	pop	r14
    1b7a:	df 90       	pop	r13
    1b7c:	cf 90       	pop	r12
    1b7e:	bf 90       	pop	r11
    1b80:	af 90       	pop	r10
    1b82:	08 95       	ret

00001b84 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1b84:	4f 92       	push	r4
    1b86:	5f 92       	push	r5
    1b88:	6f 92       	push	r6
    1b8a:	7f 92       	push	r7
    1b8c:	8f 92       	push	r8
    1b8e:	9f 92       	push	r9
    1b90:	af 92       	push	r10
    1b92:	bf 92       	push	r11
    1b94:	cf 92       	push	r12
    1b96:	df 92       	push	r13
    1b98:	ef 92       	push	r14
    1b9a:	ff 92       	push	r15
    1b9c:	0f 93       	push	r16
    1b9e:	1f 93       	push	r17
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
    1ba4:	ec 01       	movw	r28, r24
    1ba6:	2b 01       	movw	r4, r22
    1ba8:	3a 01       	movw	r6, r20
    1baa:	58 01       	movw	r10, r16
    1bac:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1bae:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bb0:	80 ff       	sbrs	r24, 0
    1bb2:	05 c0       	rjmp	.+10     	; 0x1bbe <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1bb4:	68 94       	set
    1bb6:	88 24       	eor	r8, r8
    1bb8:	81 f8       	bld	r8, 1
    1bba:	91 2c       	mov	r9, r1
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1bbe:	81 2c       	mov	r8, r1
    1bc0:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1bc2:	a1 14       	cp	r10, r1
    1bc4:	b1 04       	cpc	r11, r1
    1bc6:	c1 04       	cpc	r12, r1
    1bc8:	d1 04       	cpc	r13, r1
    1bca:	41 f1       	breq	.+80     	; 0x1c1c <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	29 dd       	rcall	.-1454   	; 0x1628 <prvBytesInBuffer>
    1bd6:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1bd8:	88 16       	cp	r8, r24
    1bda:	99 06       	cpc	r9, r25
    1bdc:	48 f0       	brcs	.+18     	; 0x1bf0 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1bde:	60 e0       	ldi	r22, 0x00	; 0
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	0e 94 b8 1a 	call	0x3570	; 0x3570 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1be8:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <xTaskGetCurrentTaskHandle>
    1bec:	99 87       	std	Y+9, r25	; 0x09
    1bee:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1bf0:	0f 90       	pop	r0
    1bf2:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1bf4:	8e 14       	cp	r8, r14
    1bf6:	9f 04       	cpc	r9, r15
    1bf8:	a0 f0       	brcs	.+40     	; 0x1c22 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1bfa:	e1 2c       	mov	r14, r1
    1bfc:	f1 2c       	mov	r15, r1
    1bfe:	00 e0       	ldi	r16, 0x00	; 0
    1c00:	10 e0       	ldi	r17, 0x00	; 0
    1c02:	98 01       	movw	r18, r16
    1c04:	40 e0       	ldi	r20, 0x00	; 0
    1c06:	50 e0       	ldi	r21, 0x00	; 0
    1c08:	ba 01       	movw	r22, r20
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	0e 94 f7 17 	call	0x2fee	; 0x2fee <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1c10:	19 86       	std	Y+9, r1	; 0x09
    1c12:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1c14:	ce 01       	movw	r24, r28
    1c16:	08 dd       	rcall	.-1520   	; 0x1628 <prvBytesInBuffer>
    1c18:	7c 01       	movw	r14, r24
    1c1a:	03 c0       	rjmp	.+6      	; 0x1c22 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1c1c:	ce 01       	movw	r24, r28
    1c1e:	04 dd       	rcall	.-1528   	; 0x1628 <prvBytesInBuffer>
    1c20:	7c 01       	movw	r14, r24
    1c22:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1c24:	9f 04       	cpc	r9, r15
    1c26:	e8 f4       	brcc	.+58     	; 0x1c62 <xStreamBufferReceive+0xde>
    1c28:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1c2a:	97 01       	movw	r18, r14
    1c2c:	a3 01       	movw	r20, r6
    1c2e:	b2 01       	movw	r22, r4
    1c30:	ce 01       	movw	r24, r28
    1c32:	f8 dd       	rcall	.-1040   	; 0x1824 <prvReadMessageFromBuffer>
    1c34:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1c36:	89 2b       	or	r24, r25
    1c38:	b1 f0       	breq	.+44     	; 0x1c66 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1c3a:	c3 d2       	rcall	.+1414   	; 0x21c2 <vTaskSuspendAll>
    1c3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c40:	89 2b       	or	r24, r25
    1c42:	69 f0       	breq	.+26     	; 0x1c5e <xStreamBufferReceive+0xda>
    1c44:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c46:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c48:	e1 2c       	mov	r14, r1
    1c4a:	f1 2c       	mov	r15, r1
    1c4c:	00 e0       	ldi	r16, 0x00	; 0
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	a9 01       	movw	r20, r18
    1c54:	60 e0       	ldi	r22, 0x00	; 0
    1c56:	0e 94 9f 18 	call	0x313e	; 0x313e <xTaskGenericNotify>
    1c5a:	1b 86       	std	Y+11, r1	; 0x0b
    1c5c:	1a 86       	std	Y+10, r1	; 0x0a
    1c5e:	f1 d3       	rcall	.+2018   	; 0x2442 <xTaskResumeAll>
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <xStreamBufferReceive+0xe2>
    1c62:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1c64:	d1 2c       	mov	r13, r1
    1c66:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1c68:	df 91       	pop	r29
    1c6a:	cf 91       	pop	r28
    1c6c:	1f 91       	pop	r17
    1c6e:	0f 91       	pop	r16
    1c70:	ff 90       	pop	r15
    1c72:	ef 90       	pop	r14
    1c74:	df 90       	pop	r13
    1c76:	cf 90       	pop	r12
    1c78:	bf 90       	pop	r11
    1c7a:	af 90       	pop	r10
    1c7c:	9f 90       	pop	r9
    1c7e:	8f 90       	pop	r8
    1c80:	7f 90       	pop	r7
    1c82:	6f 90       	pop	r6
    1c84:	5f 90       	pop	r5
    1c86:	4f 90       	pop	r4
    1c88:	08 95       	ret

00001c8a <prvResetNextTaskUnblockTime>:
    1c8a:	e0 91 45 15 	lds	r30, 0x1545	; 0x801545 <pxDelayedTaskList>
    1c8e:	f0 91 46 15 	lds	r31, 0x1546	; 0x801546 <pxDelayedTaskList+0x1>
    1c92:	80 81       	ld	r24, Z
    1c94:	81 11       	cpse	r24, r1
    1c96:	0c c0       	rjmp	.+24     	; 0x1cb0 <prvResetNextTaskUnblockTime+0x26>
    1c98:	8f ef       	ldi	r24, 0xFF	; 255
    1c9a:	9f ef       	ldi	r25, 0xFF	; 255
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	80 93 0f 15 	sts	0x150F, r24	; 0x80150f <xNextTaskUnblockTime>
    1ca2:	90 93 10 15 	sts	0x1510, r25	; 0x801510 <xNextTaskUnblockTime+0x1>
    1ca6:	a0 93 11 15 	sts	0x1511, r26	; 0x801511 <xNextTaskUnblockTime+0x2>
    1caa:	b0 93 12 15 	sts	0x1512, r27	; 0x801512 <xNextTaskUnblockTime+0x3>
    1cae:	08 95       	ret
    1cb0:	e0 91 45 15 	lds	r30, 0x1545	; 0x801545 <pxDelayedTaskList>
    1cb4:	f0 91 46 15 	lds	r31, 0x1546	; 0x801546 <pxDelayedTaskList+0x1>
    1cb8:	07 80       	ldd	r0, Z+7	; 0x07
    1cba:	f0 85       	ldd	r31, Z+8	; 0x08
    1cbc:	e0 2d       	mov	r30, r0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	91 81       	ldd	r25, Z+1	; 0x01
    1cc2:	a2 81       	ldd	r26, Z+2	; 0x02
    1cc4:	b3 81       	ldd	r27, Z+3	; 0x03
    1cc6:	80 93 0f 15 	sts	0x150F, r24	; 0x80150f <xNextTaskUnblockTime>
    1cca:	90 93 10 15 	sts	0x1510, r25	; 0x801510 <xNextTaskUnblockTime+0x1>
    1cce:	a0 93 11 15 	sts	0x1511, r26	; 0x801511 <xNextTaskUnblockTime+0x2>
    1cd2:	b0 93 12 15 	sts	0x1512, r27	; 0x801512 <xNextTaskUnblockTime+0x3>
    1cd6:	08 95       	ret

00001cd8 <prvDeleteTCB>:
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	ec 01       	movw	r28, r24
    1cde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ce0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ce2:	0e 94 aa 05 	call	0xb54	; 0xb54 <vPortFree>
    1ce6:	ce 01       	movw	r24, r28
    1ce8:	0e 94 aa 05 	call	0xb54	; 0xb54 <vPortFree>
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	08 95       	ret

00001cf2 <prvInitialiseNewTask>:
    1cf2:	4f 92       	push	r4
    1cf4:	5f 92       	push	r5
    1cf6:	6f 92       	push	r6
    1cf8:	7f 92       	push	r7
    1cfa:	8f 92       	push	r8
    1cfc:	9f 92       	push	r9
    1cfe:	af 92       	push	r10
    1d00:	bf 92       	push	r11
    1d02:	cf 92       	push	r12
    1d04:	df 92       	push	r13
    1d06:	ef 92       	push	r14
    1d08:	ff 92       	push	r15
    1d0a:	0f 93       	push	r16
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
    1d10:	2c 01       	movw	r4, r24
    1d12:	5b 01       	movw	r10, r22
    1d14:	4a 01       	movw	r8, r20
    1d16:	39 01       	movw	r6, r18
    1d18:	e6 01       	movw	r28, r12
    1d1a:	65 ea       	ldi	r22, 0xA5	; 165
    1d1c:	70 e0       	ldi	r23, 0x00	; 0
    1d1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d22:	0e 94 b7 35 	call	0x6b6e	; 0x6b6e <memset>
    1d26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d2a:	21 e0       	ldi	r18, 0x01	; 1
    1d2c:	82 1a       	sub	r8, r18
    1d2e:	91 08       	sbc	r9, r1
    1d30:	88 0e       	add	r8, r24
    1d32:	99 1e       	adc	r9, r25
    1d34:	a1 14       	cp	r10, r1
    1d36:	b1 04       	cpc	r11, r1
    1d38:	89 f4       	brne	.+34     	; 0x1d5c <prvInitialiseNewTask+0x6a>
    1d3a:	15 c0       	rjmp	.+42     	; 0x1d66 <prvInitialiseNewTask+0x74>
    1d3c:	82 2f       	mov	r24, r18
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	f5 01       	movw	r30, r10
    1d42:	e8 0f       	add	r30, r24
    1d44:	f9 1f       	adc	r31, r25
    1d46:	30 81       	ld	r19, Z
    1d48:	de 01       	movw	r26, r28
    1d4a:	a8 0f       	add	r26, r24
    1d4c:	b9 1f       	adc	r27, r25
    1d4e:	5d 96       	adiw	r26, 0x1d	; 29
    1d50:	3c 93       	st	X, r19
    1d52:	80 81       	ld	r24, Z
    1d54:	88 23       	and	r24, r24
    1d56:	29 f0       	breq	.+10     	; 0x1d62 <prvInitialiseNewTask+0x70>
    1d58:	2f 5f       	subi	r18, 0xFF	; 255
    1d5a:	01 c0       	rjmp	.+2      	; 0x1d5e <prvInitialiseNewTask+0x6c>
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	20 31       	cpi	r18, 0x10	; 16
    1d60:	68 f3       	brcs	.-38     	; 0x1d3c <prvInitialiseNewTask+0x4a>
    1d62:	1c a6       	std	Y+44, r1	; 0x2c
    1d64:	01 c0       	rjmp	.+2      	; 0x1d68 <prvInitialiseNewTask+0x76>
    1d66:	1d 8e       	std	Y+29, r1	; 0x1d
    1d68:	0a 30       	cpi	r16, 0x0A	; 10
    1d6a:	08 f0       	brcs	.+2      	; 0x1d6e <prvInitialiseNewTask+0x7c>
    1d6c:	09 e0       	ldi	r16, 0x09	; 9
    1d6e:	0a 8f       	std	Y+26, r16	; 0x1a
    1d70:	0d a7       	std	Y+45, r16	; 0x2d
    1d72:	1e a6       	std	Y+46, r1	; 0x2e
    1d74:	ce 01       	movw	r24, r28
    1d76:	02 96       	adiw	r24, 0x02	; 2
    1d78:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <vListInitialiseItem>
    1d7c:	ce 01       	movw	r24, r28
    1d7e:	0e 96       	adiw	r24, 0x0e	; 14
    1d80:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <vListInitialiseItem>
    1d84:	db 87       	std	Y+11, r29	; 0x0b
    1d86:	ca 87       	std	Y+10, r28	; 0x0a
    1d88:	8a e0       	ldi	r24, 0x0A	; 10
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	a0 e0       	ldi	r26, 0x00	; 0
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	80 1b       	sub	r24, r16
    1d92:	91 09       	sbc	r25, r1
    1d94:	a1 09       	sbc	r26, r1
    1d96:	b1 09       	sbc	r27, r1
    1d98:	8e 87       	std	Y+14, r24	; 0x0e
    1d9a:	9f 87       	std	Y+15, r25	; 0x0f
    1d9c:	a8 8b       	std	Y+16, r26	; 0x10
    1d9e:	b9 8b       	std	Y+17, r27	; 0x11
    1da0:	df 8b       	std	Y+23, r29	; 0x17
    1da2:	ce 8b       	std	Y+22, r28	; 0x16
    1da4:	84 e0       	ldi	r24, 0x04	; 4
    1da6:	fe 01       	movw	r30, r28
    1da8:	bf 96       	adiw	r30, 0x2f	; 47
    1daa:	df 01       	movw	r26, r30
    1dac:	1d 92       	st	X+, r1
    1dae:	8a 95       	dec	r24
    1db0:	e9 f7       	brne	.-6      	; 0x1dac <prvInitialiseNewTask+0xba>
    1db2:	1b aa       	std	Y+51, r1	; 0x33
    1db4:	a3 01       	movw	r20, r6
    1db6:	b2 01       	movw	r22, r4
    1db8:	c4 01       	movw	r24, r8
    1dba:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <pxPortInitialiseStack>
    1dbe:	99 83       	std	Y+1, r25	; 0x01
    1dc0:	88 83       	st	Y, r24
    1dc2:	e1 14       	cp	r14, r1
    1dc4:	f1 04       	cpc	r15, r1
    1dc6:	19 f0       	breq	.+6      	; 0x1dce <prvInitialiseNewTask+0xdc>
    1dc8:	f7 01       	movw	r30, r14
    1dca:	d1 83       	std	Z+1, r29	; 0x01
    1dcc:	c0 83       	st	Z, r28
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	0f 91       	pop	r16
    1dd4:	ff 90       	pop	r15
    1dd6:	ef 90       	pop	r14
    1dd8:	df 90       	pop	r13
    1dda:	cf 90       	pop	r12
    1ddc:	bf 90       	pop	r11
    1dde:	af 90       	pop	r10
    1de0:	9f 90       	pop	r9
    1de2:	8f 90       	pop	r8
    1de4:	7f 90       	pop	r7
    1de6:	6f 90       	pop	r6
    1de8:	5f 90       	pop	r5
    1dea:	4f 90       	pop	r4
    1dec:	08 95       	ret

00001dee <prvInitialiseTaskLists>:
    1dee:	cf 93       	push	r28
    1df0:	c0 e0       	ldi	r28, 0x00	; 0
    1df2:	09 c0       	rjmp	.+18     	; 0x1e06 <prvInitialiseTaskLists+0x18>
    1df4:	2b e0       	ldi	r18, 0x0B	; 11
    1df6:	c2 9f       	mul	r28, r18
    1df8:	c0 01       	movw	r24, r0
    1dfa:	11 24       	eor	r1, r1
    1dfc:	83 5a       	subi	r24, 0xA3	; 163
    1dfe:	9a 4e       	sbci	r25, 0xEA	; 234
    1e00:	0e 94 e7 05 	call	0xbce	; 0xbce <vListInitialise>
    1e04:	cf 5f       	subi	r28, 0xFF	; 255
    1e06:	ca 30       	cpi	r28, 0x0A	; 10
    1e08:	a8 f3       	brcs	.-22     	; 0x1df4 <prvInitialiseTaskLists+0x6>
    1e0a:	82 e5       	ldi	r24, 0x52	; 82
    1e0c:	95 e1       	ldi	r25, 0x15	; 21
    1e0e:	0e 94 e7 05 	call	0xbce	; 0xbce <vListInitialise>
    1e12:	87 e4       	ldi	r24, 0x47	; 71
    1e14:	95 e1       	ldi	r25, 0x15	; 21
    1e16:	0e 94 e7 05 	call	0xbce	; 0xbce <vListInitialise>
    1e1a:	88 e3       	ldi	r24, 0x38	; 56
    1e1c:	95 e1       	ldi	r25, 0x15	; 21
    1e1e:	0e 94 e7 05 	call	0xbce	; 0xbce <vListInitialise>
    1e22:	8d e2       	ldi	r24, 0x2D	; 45
    1e24:	95 e1       	ldi	r25, 0x15	; 21
    1e26:	0e 94 e7 05 	call	0xbce	; 0xbce <vListInitialise>
    1e2a:	81 e2       	ldi	r24, 0x21	; 33
    1e2c:	95 e1       	ldi	r25, 0x15	; 21
    1e2e:	0e 94 e7 05 	call	0xbce	; 0xbce <vListInitialise>
    1e32:	82 e5       	ldi	r24, 0x52	; 82
    1e34:	95 e1       	ldi	r25, 0x15	; 21
    1e36:	90 93 46 15 	sts	0x1546, r25	; 0x801546 <pxDelayedTaskList+0x1>
    1e3a:	80 93 45 15 	sts	0x1545, r24	; 0x801545 <pxDelayedTaskList>
    1e3e:	87 e4       	ldi	r24, 0x47	; 71
    1e40:	95 e1       	ldi	r25, 0x15	; 21
    1e42:	90 93 44 15 	sts	0x1544, r25	; 0x801544 <pxOverflowDelayedTaskList+0x1>
    1e46:	80 93 43 15 	sts	0x1543, r24	; 0x801543 <pxOverflowDelayedTaskList>
    1e4a:	cf 91       	pop	r28
    1e4c:	08 95       	ret

00001e4e <prvAddNewTaskToReadyList>:
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	ec 01       	movw	r28, r24
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	0f 92       	push	r0
    1e5a:	80 91 20 15 	lds	r24, 0x1520	; 0x801520 <uxCurrentNumberOfTasks>
    1e5e:	8f 5f       	subi	r24, 0xFF	; 255
    1e60:	80 93 20 15 	sts	0x1520, r24	; 0x801520 <uxCurrentNumberOfTasks>
    1e64:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <pxCurrentTCB>
    1e68:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    1e6c:	89 2b       	or	r24, r25
    1e6e:	51 f4       	brne	.+20     	; 0x1e84 <prvAddNewTaskToReadyList+0x36>
    1e70:	d0 93 cc 15 	sts	0x15CC, r29	; 0x8015cc <pxCurrentTCB+0x1>
    1e74:	c0 93 cb 15 	sts	0x15CB, r28	; 0x8015cb <pxCurrentTCB>
    1e78:	80 91 20 15 	lds	r24, 0x1520	; 0x801520 <uxCurrentNumberOfTasks>
    1e7c:	81 30       	cpi	r24, 0x01	; 1
    1e7e:	91 f4       	brne	.+36     	; 0x1ea4 <prvAddNewTaskToReadyList+0x56>
    1e80:	b6 df       	rcall	.-148    	; 0x1dee <prvInitialiseTaskLists>
    1e82:	10 c0       	rjmp	.+32     	; 0x1ea4 <prvAddNewTaskToReadyList+0x56>
    1e84:	80 91 1a 15 	lds	r24, 0x151A	; 0x80151a <xSchedulerRunning>
    1e88:	81 11       	cpse	r24, r1
    1e8a:	0c c0       	rjmp	.+24     	; 0x1ea4 <prvAddNewTaskToReadyList+0x56>
    1e8c:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    1e90:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    1e94:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e96:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e98:	89 17       	cp	r24, r25
    1e9a:	20 f0       	brcs	.+8      	; 0x1ea4 <prvAddNewTaskToReadyList+0x56>
    1e9c:	d0 93 cc 15 	sts	0x15CC, r29	; 0x8015cc <pxCurrentTCB+0x1>
    1ea0:	c0 93 cb 15 	sts	0x15CB, r28	; 0x8015cb <pxCurrentTCB>
    1ea4:	80 91 13 15 	lds	r24, 0x1513	; 0x801513 <uxTaskNumber>
    1ea8:	8f 5f       	subi	r24, 0xFF	; 255
    1eaa:	80 93 13 15 	sts	0x1513, r24	; 0x801513 <uxTaskNumber>
    1eae:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1eb0:	80 91 1b 15 	lds	r24, 0x151B	; 0x80151b <uxTopReadyPriority>
    1eb4:	8e 17       	cp	r24, r30
    1eb6:	10 f4       	brcc	.+4      	; 0x1ebc <prvAddNewTaskToReadyList+0x6e>
    1eb8:	e0 93 1b 15 	sts	0x151B, r30	; 0x80151b <uxTopReadyPriority>
    1ebc:	8b e0       	ldi	r24, 0x0B	; 11
    1ebe:	8e 9f       	mul	r24, r30
    1ec0:	f0 01       	movw	r30, r0
    1ec2:	11 24       	eor	r1, r1
    1ec4:	e3 5a       	subi	r30, 0xA3	; 163
    1ec6:	fa 4e       	sbci	r31, 0xEA	; 234
    1ec8:	01 80       	ldd	r0, Z+1	; 0x01
    1eca:	f2 81       	ldd	r31, Z+2	; 0x02
    1ecc:	e0 2d       	mov	r30, r0
    1ece:	ff 83       	std	Y+7, r31	; 0x07
    1ed0:	ee 83       	std	Y+6, r30	; 0x06
    1ed2:	26 81       	ldd	r18, Z+6	; 0x06
    1ed4:	37 81       	ldd	r19, Z+7	; 0x07
    1ed6:	39 87       	std	Y+9, r19	; 0x09
    1ed8:	28 87       	std	Y+8, r18	; 0x08
    1eda:	a6 81       	ldd	r26, Z+6	; 0x06
    1edc:	b7 81       	ldd	r27, Z+7	; 0x07
    1ede:	9e 01       	movw	r18, r28
    1ee0:	2e 5f       	subi	r18, 0xFE	; 254
    1ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee4:	15 96       	adiw	r26, 0x05	; 5
    1ee6:	3c 93       	st	X, r19
    1ee8:	2e 93       	st	-X, r18
    1eea:	14 97       	sbiw	r26, 0x04	; 4
    1eec:	37 83       	std	Z+7, r19	; 0x07
    1eee:	26 83       	std	Z+6, r18	; 0x06
    1ef0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1ef2:	8e 9f       	mul	r24, r30
    1ef4:	f0 01       	movw	r30, r0
    1ef6:	11 24       	eor	r1, r1
    1ef8:	e3 5a       	subi	r30, 0xA3	; 163
    1efa:	fa 4e       	sbci	r31, 0xEA	; 234
    1efc:	fd 87       	std	Y+13, r31	; 0x0d
    1efe:	ec 87       	std	Y+12, r30	; 0x0c
    1f00:	80 81       	ld	r24, Z
    1f02:	8f 5f       	subi	r24, 0xFF	; 255
    1f04:	80 83       	st	Z, r24
    1f06:	0f 90       	pop	r0
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	80 91 1a 15 	lds	r24, 0x151A	; 0x80151a <xSchedulerRunning>
    1f0e:	88 23       	and	r24, r24
    1f10:	51 f0       	breq	.+20     	; 0x1f26 <prvAddNewTaskToReadyList+0xd8>
    1f12:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    1f16:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    1f1a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f1c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f1e:	98 17       	cp	r25, r24
    1f20:	10 f4       	brcc	.+4      	; 0x1f26 <prvAddNewTaskToReadyList+0xd8>
    1f22:	0e 94 b5 06 	call	0xd6a	; 0xd6a <vPortYield>
    1f26:	df 91       	pop	r29
    1f28:	cf 91       	pop	r28
    1f2a:	08 95       	ret

00001f2c <prvCheckTasksWaitingTermination>:
    1f2c:	cf 93       	push	r28
    1f2e:	df 93       	push	r29
    1f30:	1b c0       	rjmp	.+54     	; 0x1f68 <prvCheckTasksWaitingTermination+0x3c>
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	0f 92       	push	r0
    1f38:	e0 91 34 15 	lds	r30, 0x1534	; 0x801534 <xTasksWaitingTermination+0x7>
    1f3c:	f0 91 35 15 	lds	r31, 0x1535	; 0x801535 <xTasksWaitingTermination+0x8>
    1f40:	c0 85       	ldd	r28, Z+8	; 0x08
    1f42:	d1 85       	ldd	r29, Z+9	; 0x09
    1f44:	ce 01       	movw	r24, r28
    1f46:	02 96       	adiw	r24, 0x02	; 2
    1f48:	0e 94 39 06 	call	0xc72	; 0xc72 <uxListRemove>
    1f4c:	80 91 20 15 	lds	r24, 0x1520	; 0x801520 <uxCurrentNumberOfTasks>
    1f50:	81 50       	subi	r24, 0x01	; 1
    1f52:	80 93 20 15 	sts	0x1520, r24	; 0x801520 <uxCurrentNumberOfTasks>
    1f56:	80 91 2c 15 	lds	r24, 0x152C	; 0x80152c <uxDeletedTasksWaitingCleanUp>
    1f5a:	81 50       	subi	r24, 0x01	; 1
    1f5c:	80 93 2c 15 	sts	0x152C, r24	; 0x80152c <uxDeletedTasksWaitingCleanUp>
    1f60:	0f 90       	pop	r0
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	ce 01       	movw	r24, r28
    1f66:	b8 de       	rcall	.-656    	; 0x1cd8 <prvDeleteTCB>
    1f68:	80 91 2c 15 	lds	r24, 0x152C	; 0x80152c <uxDeletedTasksWaitingCleanUp>
    1f6c:	81 11       	cpse	r24, r1
    1f6e:	e1 cf       	rjmp	.-62     	; 0x1f32 <prvCheckTasksWaitingTermination+0x6>
    1f70:	df 91       	pop	r29
    1f72:	cf 91       	pop	r28
    1f74:	08 95       	ret

00001f76 <prvAddCurrentTaskToDelayedList>:
    1f76:	8f 92       	push	r8
    1f78:	9f 92       	push	r9
    1f7a:	af 92       	push	r10
    1f7c:	bf 92       	push	r11
    1f7e:	cf 92       	push	r12
    1f80:	df 92       	push	r13
    1f82:	ef 92       	push	r14
    1f84:	ff 92       	push	r15
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
    1f8a:	6b 01       	movw	r12, r22
    1f8c:	7c 01       	movw	r14, r24
    1f8e:	c4 2f       	mov	r28, r20
    1f90:	80 90 1c 15 	lds	r8, 0x151C	; 0x80151c <xTickCount>
    1f94:	90 90 1d 15 	lds	r9, 0x151D	; 0x80151d <xTickCount+0x1>
    1f98:	a0 90 1e 15 	lds	r10, 0x151E	; 0x80151e <xTickCount+0x2>
    1f9c:	b0 90 1f 15 	lds	r11, 0x151F	; 0x80151f <xTickCount+0x3>
    1fa0:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <pxCurrentTCB>
    1fa4:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    1fa8:	02 96       	adiw	r24, 0x02	; 2
    1faa:	0e 94 39 06 	call	0xc72	; 0xc72 <uxListRemove>
    1fae:	8f ef       	ldi	r24, 0xFF	; 255
    1fb0:	c8 16       	cp	r12, r24
    1fb2:	d8 06       	cpc	r13, r24
    1fb4:	e8 06       	cpc	r14, r24
    1fb6:	f8 06       	cpc	r15, r24
    1fb8:	b1 f5       	brne	.+108    	; 0x2026 <__DATA_REGION_LENGTH__+0x26>
    1fba:	cc 23       	and	r28, r28
    1fbc:	a1 f1       	breq	.+104    	; 0x2026 <__DATA_REGION_LENGTH__+0x26>
    1fbe:	e1 e2       	ldi	r30, 0x21	; 33
    1fc0:	f5 e1       	ldi	r31, 0x15	; 21
    1fc2:	a1 81       	ldd	r26, Z+1	; 0x01
    1fc4:	b2 81       	ldd	r27, Z+2	; 0x02
    1fc6:	c0 91 cb 15 	lds	r28, 0x15CB	; 0x8015cb <pxCurrentTCB>
    1fca:	d0 91 cc 15 	lds	r29, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    1fce:	bf 83       	std	Y+7, r27	; 0x07
    1fd0:	ae 83       	std	Y+6, r26	; 0x06
    1fd2:	c0 91 cb 15 	lds	r28, 0x15CB	; 0x8015cb <pxCurrentTCB>
    1fd6:	d0 91 cc 15 	lds	r29, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    1fda:	16 96       	adiw	r26, 0x06	; 6
    1fdc:	8d 91       	ld	r24, X+
    1fde:	9c 91       	ld	r25, X
    1fe0:	17 97       	sbiw	r26, 0x07	; 7
    1fe2:	99 87       	std	Y+9, r25	; 0x09
    1fe4:	88 87       	std	Y+8, r24	; 0x08
    1fe6:	16 96       	adiw	r26, 0x06	; 6
    1fe8:	cd 91       	ld	r28, X+
    1fea:	dc 91       	ld	r29, X
    1fec:	17 97       	sbiw	r26, 0x07	; 7
    1fee:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <pxCurrentTCB>
    1ff2:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    1ff6:	02 96       	adiw	r24, 0x02	; 2
    1ff8:	9d 83       	std	Y+5, r25	; 0x05
    1ffa:	8c 83       	std	Y+4, r24	; 0x04
    1ffc:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2000:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2004:	02 96       	adiw	r24, 0x02	; 2
    2006:	17 96       	adiw	r26, 0x07	; 7
    2008:	9c 93       	st	X, r25
    200a:	8e 93       	st	-X, r24
    200c:	16 97       	sbiw	r26, 0x06	; 6
    200e:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2012:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2016:	1d 96       	adiw	r26, 0x0d	; 13
    2018:	fc 93       	st	X, r31
    201a:	ee 93       	st	-X, r30
    201c:	1c 97       	sbiw	r26, 0x0c	; 12
    201e:	80 81       	ld	r24, Z
    2020:	8f 5f       	subi	r24, 0xFF	; 255
    2022:	80 83       	st	Z, r24
    2024:	3f c0       	rjmp	.+126    	; 0x20a4 <__DATA_REGION_LENGTH__+0xa4>
    2026:	c8 0c       	add	r12, r8
    2028:	d9 1c       	adc	r13, r9
    202a:	ea 1c       	adc	r14, r10
    202c:	fb 1c       	adc	r15, r11
    202e:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2032:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2036:	c2 82       	std	Z+2, r12	; 0x02
    2038:	d3 82       	std	Z+3, r13	; 0x03
    203a:	e4 82       	std	Z+4, r14	; 0x04
    203c:	f5 82       	std	Z+5, r15	; 0x05
    203e:	c8 14       	cp	r12, r8
    2040:	d9 04       	cpc	r13, r9
    2042:	ea 04       	cpc	r14, r10
    2044:	fb 04       	cpc	r15, r11
    2046:	68 f4       	brcc	.+26     	; 0x2062 <__DATA_REGION_LENGTH__+0x62>
    2048:	60 91 cb 15 	lds	r22, 0x15CB	; 0x8015cb <pxCurrentTCB>
    204c:	70 91 cc 15 	lds	r23, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2050:	80 91 43 15 	lds	r24, 0x1543	; 0x801543 <pxOverflowDelayedTaskList>
    2054:	90 91 44 15 	lds	r25, 0x1544	; 0x801544 <pxOverflowDelayedTaskList+0x1>
    2058:	6e 5f       	subi	r22, 0xFE	; 254
    205a:	7f 4f       	sbci	r23, 0xFF	; 255
    205c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <vListInsert>
    2060:	21 c0       	rjmp	.+66     	; 0x20a4 <__DATA_REGION_LENGTH__+0xa4>
    2062:	60 91 cb 15 	lds	r22, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2066:	70 91 cc 15 	lds	r23, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    206a:	80 91 45 15 	lds	r24, 0x1545	; 0x801545 <pxDelayedTaskList>
    206e:	90 91 46 15 	lds	r25, 0x1546	; 0x801546 <pxDelayedTaskList+0x1>
    2072:	6e 5f       	subi	r22, 0xFE	; 254
    2074:	7f 4f       	sbci	r23, 0xFF	; 255
    2076:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <vListInsert>
    207a:	80 91 0f 15 	lds	r24, 0x150F	; 0x80150f <xNextTaskUnblockTime>
    207e:	90 91 10 15 	lds	r25, 0x1510	; 0x801510 <xNextTaskUnblockTime+0x1>
    2082:	a0 91 11 15 	lds	r26, 0x1511	; 0x801511 <xNextTaskUnblockTime+0x2>
    2086:	b0 91 12 15 	lds	r27, 0x1512	; 0x801512 <xNextTaskUnblockTime+0x3>
    208a:	c8 16       	cp	r12, r24
    208c:	d9 06       	cpc	r13, r25
    208e:	ea 06       	cpc	r14, r26
    2090:	fb 06       	cpc	r15, r27
    2092:	40 f4       	brcc	.+16     	; 0x20a4 <__DATA_REGION_LENGTH__+0xa4>
    2094:	c0 92 0f 15 	sts	0x150F, r12	; 0x80150f <xNextTaskUnblockTime>
    2098:	d0 92 10 15 	sts	0x1510, r13	; 0x801510 <xNextTaskUnblockTime+0x1>
    209c:	e0 92 11 15 	sts	0x1511, r14	; 0x801511 <xNextTaskUnblockTime+0x2>
    20a0:	f0 92 12 15 	sts	0x1512, r15	; 0x801512 <xNextTaskUnblockTime+0x3>
    20a4:	df 91       	pop	r29
    20a6:	cf 91       	pop	r28
    20a8:	ff 90       	pop	r15
    20aa:	ef 90       	pop	r14
    20ac:	df 90       	pop	r13
    20ae:	cf 90       	pop	r12
    20b0:	bf 90       	pop	r11
    20b2:	af 90       	pop	r10
    20b4:	9f 90       	pop	r9
    20b6:	8f 90       	pop	r8
    20b8:	08 95       	ret

000020ba <xTaskCreate>:
    20ba:	2f 92       	push	r2
    20bc:	3f 92       	push	r3
    20be:	4f 92       	push	r4
    20c0:	5f 92       	push	r5
    20c2:	6f 92       	push	r6
    20c4:	7f 92       	push	r7
    20c6:	8f 92       	push	r8
    20c8:	9f 92       	push	r9
    20ca:	af 92       	push	r10
    20cc:	bf 92       	push	r11
    20ce:	cf 92       	push	r12
    20d0:	df 92       	push	r13
    20d2:	ef 92       	push	r14
    20d4:	ff 92       	push	r15
    20d6:	0f 93       	push	r16
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
    20dc:	3c 01       	movw	r6, r24
    20de:	1b 01       	movw	r2, r22
    20e0:	4a 01       	movw	r8, r20
    20e2:	29 01       	movw	r4, r18
    20e4:	ca 01       	movw	r24, r20
    20e6:	0e 94 01 05 	call	0xa02	; 0xa02 <pvPortMalloc>
    20ea:	6c 01       	movw	r12, r24
    20ec:	89 2b       	or	r24, r25
    20ee:	71 f0       	breq	.+28     	; 0x210c <xTaskCreate+0x52>
    20f0:	84 e3       	ldi	r24, 0x34	; 52
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	0e 94 01 05 	call	0xa02	; 0xa02 <pvPortMalloc>
    20f8:	ec 01       	movw	r28, r24
    20fa:	89 2b       	or	r24, r25
    20fc:	19 f0       	breq	.+6      	; 0x2104 <xTaskCreate+0x4a>
    20fe:	dc 8e       	std	Y+28, r13	; 0x1c
    2100:	cb 8e       	std	Y+27, r12	; 0x1b
    2102:	06 c0       	rjmp	.+12     	; 0x2110 <xTaskCreate+0x56>
    2104:	c6 01       	movw	r24, r12
    2106:	0e 94 aa 05 	call	0xb54	; 0xb54 <vPortFree>
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <xTaskCreate+0x56>
    210c:	c0 e0       	ldi	r28, 0x00	; 0
    210e:	d0 e0       	ldi	r29, 0x00	; 0
    2110:	20 97       	sbiw	r28, 0x00	; 0
    2112:	61 f0       	breq	.+24     	; 0x212c <xTaskCreate+0x72>
    2114:	a1 2c       	mov	r10, r1
    2116:	b1 2c       	mov	r11, r1
    2118:	6e 01       	movw	r12, r28
    211a:	92 01       	movw	r18, r4
    211c:	a4 01       	movw	r20, r8
    211e:	b1 01       	movw	r22, r2
    2120:	c3 01       	movw	r24, r6
    2122:	e7 dd       	rcall	.-1074   	; 0x1cf2 <prvInitialiseNewTask>
    2124:	ce 01       	movw	r24, r28
    2126:	93 de       	rcall	.-730    	; 0x1e4e <prvAddNewTaskToReadyList>
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	01 c0       	rjmp	.+2      	; 0x212e <xTaskCreate+0x74>
    212c:	8f ef       	ldi	r24, 0xFF	; 255
    212e:	df 91       	pop	r29
    2130:	cf 91       	pop	r28
    2132:	0f 91       	pop	r16
    2134:	ff 90       	pop	r15
    2136:	ef 90       	pop	r14
    2138:	df 90       	pop	r13
    213a:	cf 90       	pop	r12
    213c:	bf 90       	pop	r11
    213e:	af 90       	pop	r10
    2140:	9f 90       	pop	r9
    2142:	8f 90       	pop	r8
    2144:	7f 90       	pop	r7
    2146:	6f 90       	pop	r6
    2148:	5f 90       	pop	r5
    214a:	4f 90       	pop	r4
    214c:	3f 90       	pop	r3
    214e:	2f 90       	pop	r2
    2150:	08 95       	ret

00002152 <vTaskStartScheduler>:
    2152:	ef 92       	push	r14
    2154:	ff 92       	push	r15
    2156:	0f 93       	push	r16
    2158:	0f 2e       	mov	r0, r31
    215a:	fd e0       	ldi	r31, 0x0D	; 13
    215c:	ef 2e       	mov	r14, r31
    215e:	f5 e1       	ldi	r31, 0x15	; 21
    2160:	ff 2e       	mov	r15, r31
    2162:	f0 2d       	mov	r31, r0
    2164:	00 e0       	ldi	r16, 0x00	; 0
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 ec       	ldi	r20, 0xC0	; 192
    216c:	50 e0       	ldi	r21, 0x00	; 0
    216e:	65 e6       	ldi	r22, 0x65	; 101
    2170:	73 e0       	ldi	r23, 0x03	; 3
    2172:	8e e4       	ldi	r24, 0x4E	; 78
    2174:	91 e0       	ldi	r25, 0x01	; 1
    2176:	a1 df       	rcall	.-190    	; 0x20ba <xTaskCreate>
    2178:	81 30       	cpi	r24, 0x01	; 1
    217a:	11 f4       	brne	.+4      	; 0x2180 <vTaskStartScheduler+0x2e>
    217c:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <xTimerCreateTimerTask>
    2180:	81 30       	cpi	r24, 0x01	; 1
    2182:	c9 f4       	brne	.+50     	; 0x21b6 <vTaskStartScheduler+0x64>
    2184:	f8 94       	cli
    2186:	8f ef       	ldi	r24, 0xFF	; 255
    2188:	9f ef       	ldi	r25, 0xFF	; 255
    218a:	dc 01       	movw	r26, r24
    218c:	80 93 0f 15 	sts	0x150F, r24	; 0x80150f <xNextTaskUnblockTime>
    2190:	90 93 10 15 	sts	0x1510, r25	; 0x801510 <xNextTaskUnblockTime+0x1>
    2194:	a0 93 11 15 	sts	0x1511, r26	; 0x801511 <xNextTaskUnblockTime+0x2>
    2198:	b0 93 12 15 	sts	0x1512, r27	; 0x801512 <xNextTaskUnblockTime+0x3>
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	80 93 1a 15 	sts	0x151A, r24	; 0x80151a <xSchedulerRunning>
    21a2:	10 92 1c 15 	sts	0x151C, r1	; 0x80151c <xTickCount>
    21a6:	10 92 1d 15 	sts	0x151D, r1	; 0x80151d <xTickCount+0x1>
    21aa:	10 92 1e 15 	sts	0x151E, r1	; 0x80151e <xTickCount+0x2>
    21ae:	10 92 1f 15 	sts	0x151F, r1	; 0x80151f <xTickCount+0x3>
    21b2:	0e 94 83 06 	call	0xd06	; 0xd06 <xPortStartScheduler>
    21b6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    21ba:	0f 91       	pop	r16
    21bc:	ff 90       	pop	r15
    21be:	ef 90       	pop	r14
    21c0:	08 95       	ret

000021c2 <vTaskSuspendAll>:
    21c2:	80 91 0c 15 	lds	r24, 0x150C	; 0x80150c <uxSchedulerSuspended>
    21c6:	8f 5f       	subi	r24, 0xFF	; 255
    21c8:	80 93 0c 15 	sts	0x150C, r24	; 0x80150c <uxSchedulerSuspended>
    21cc:	08 95       	ret

000021ce <xTaskGetTickCount>:
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	f8 94       	cli
    21d2:	0f 92       	push	r0
    21d4:	60 91 1c 15 	lds	r22, 0x151C	; 0x80151c <xTickCount>
    21d8:	70 91 1d 15 	lds	r23, 0x151D	; 0x80151d <xTickCount+0x1>
    21dc:	80 91 1e 15 	lds	r24, 0x151E	; 0x80151e <xTickCount+0x2>
    21e0:	90 91 1f 15 	lds	r25, 0x151F	; 0x80151f <xTickCount+0x3>
    21e4:	0f 90       	pop	r0
    21e6:	0f be       	out	0x3f, r0	; 63
    21e8:	08 95       	ret

000021ea <xTaskIncrementTick>:
    21ea:	cf 92       	push	r12
    21ec:	df 92       	push	r13
    21ee:	ef 92       	push	r14
    21f0:	ff 92       	push	r15
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	80 91 0c 15 	lds	r24, 0x150C	; 0x80150c <uxSchedulerSuspended>
    21fa:	81 11       	cpse	r24, r1
    21fc:	05 c1       	rjmp	.+522    	; 0x2408 <__stack+0x209>
    21fe:	c0 90 1c 15 	lds	r12, 0x151C	; 0x80151c <xTickCount>
    2202:	d0 90 1d 15 	lds	r13, 0x151D	; 0x80151d <xTickCount+0x1>
    2206:	e0 90 1e 15 	lds	r14, 0x151E	; 0x80151e <xTickCount+0x2>
    220a:	f0 90 1f 15 	lds	r15, 0x151F	; 0x80151f <xTickCount+0x3>
    220e:	8f ef       	ldi	r24, 0xFF	; 255
    2210:	c8 1a       	sub	r12, r24
    2212:	d8 0a       	sbc	r13, r24
    2214:	e8 0a       	sbc	r14, r24
    2216:	f8 0a       	sbc	r15, r24
    2218:	c0 92 1c 15 	sts	0x151C, r12	; 0x80151c <xTickCount>
    221c:	d0 92 1d 15 	sts	0x151D, r13	; 0x80151d <xTickCount+0x1>
    2220:	e0 92 1e 15 	sts	0x151E, r14	; 0x80151e <xTickCount+0x2>
    2224:	f0 92 1f 15 	sts	0x151F, r15	; 0x80151f <xTickCount+0x3>
    2228:	c1 14       	cp	r12, r1
    222a:	d1 04       	cpc	r13, r1
    222c:	e1 04       	cpc	r14, r1
    222e:	f1 04       	cpc	r15, r1
    2230:	b1 f4       	brne	.+44     	; 0x225e <__stack+0x5f>
    2232:	80 91 45 15 	lds	r24, 0x1545	; 0x801545 <pxDelayedTaskList>
    2236:	90 91 46 15 	lds	r25, 0x1546	; 0x801546 <pxDelayedTaskList+0x1>
    223a:	20 91 43 15 	lds	r18, 0x1543	; 0x801543 <pxOverflowDelayedTaskList>
    223e:	30 91 44 15 	lds	r19, 0x1544	; 0x801544 <pxOverflowDelayedTaskList+0x1>
    2242:	30 93 46 15 	sts	0x1546, r19	; 0x801546 <pxDelayedTaskList+0x1>
    2246:	20 93 45 15 	sts	0x1545, r18	; 0x801545 <pxDelayedTaskList>
    224a:	90 93 44 15 	sts	0x1544, r25	; 0x801544 <pxOverflowDelayedTaskList+0x1>
    224e:	80 93 43 15 	sts	0x1543, r24	; 0x801543 <pxOverflowDelayedTaskList>
    2252:	80 91 14 15 	lds	r24, 0x1514	; 0x801514 <xNumOfOverflows>
    2256:	8f 5f       	subi	r24, 0xFF	; 255
    2258:	80 93 14 15 	sts	0x1514, r24	; 0x801514 <xNumOfOverflows>
    225c:	16 dd       	rcall	.-1492   	; 0x1c8a <prvResetNextTaskUnblockTime>
    225e:	80 91 0f 15 	lds	r24, 0x150F	; 0x80150f <xNextTaskUnblockTime>
    2262:	90 91 10 15 	lds	r25, 0x1510	; 0x801510 <xNextTaskUnblockTime+0x1>
    2266:	a0 91 11 15 	lds	r26, 0x1511	; 0x801511 <xNextTaskUnblockTime+0x2>
    226a:	b0 91 12 15 	lds	r27, 0x1512	; 0x801512 <xNextTaskUnblockTime+0x3>
    226e:	c8 16       	cp	r12, r24
    2270:	d9 06       	cpc	r13, r25
    2272:	ea 06       	cpc	r14, r26
    2274:	fb 06       	cpc	r15, r27
    2276:	20 f4       	brcc	.+8      	; 0x2280 <__stack+0x81>
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	b2 c0       	rjmp	.+356    	; 0x23e0 <__stack+0x1e1>
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	01 c0       	rjmp	.+2      	; 0x2282 <__stack+0x83>
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	e0 91 45 15 	lds	r30, 0x1545	; 0x801545 <pxDelayedTaskList>
    2286:	f0 91 46 15 	lds	r31, 0x1546	; 0x801546 <pxDelayedTaskList+0x1>
    228a:	90 81       	ld	r25, Z
    228c:	91 11       	cpse	r25, r1
    228e:	0c c0       	rjmp	.+24     	; 0x22a8 <__stack+0xa9>
    2290:	4f ef       	ldi	r20, 0xFF	; 255
    2292:	5f ef       	ldi	r21, 0xFF	; 255
    2294:	ba 01       	movw	r22, r20
    2296:	40 93 0f 15 	sts	0x150F, r20	; 0x80150f <xNextTaskUnblockTime>
    229a:	50 93 10 15 	sts	0x1510, r21	; 0x801510 <xNextTaskUnblockTime+0x1>
    229e:	60 93 11 15 	sts	0x1511, r22	; 0x801511 <xNextTaskUnblockTime+0x2>
    22a2:	70 93 12 15 	sts	0x1512, r23	; 0x801512 <xNextTaskUnblockTime+0x3>
    22a6:	9c c0       	rjmp	.+312    	; 0x23e0 <__stack+0x1e1>
    22a8:	e0 91 45 15 	lds	r30, 0x1545	; 0x801545 <pxDelayedTaskList>
    22ac:	f0 91 46 15 	lds	r31, 0x1546	; 0x801546 <pxDelayedTaskList+0x1>
    22b0:	07 80       	ldd	r0, Z+7	; 0x07
    22b2:	f0 85       	ldd	r31, Z+8	; 0x08
    22b4:	e0 2d       	mov	r30, r0
    22b6:	00 84       	ldd	r0, Z+8	; 0x08
    22b8:	f1 85       	ldd	r31, Z+9	; 0x09
    22ba:	e0 2d       	mov	r30, r0
    22bc:	42 81       	ldd	r20, Z+2	; 0x02
    22be:	53 81       	ldd	r21, Z+3	; 0x03
    22c0:	64 81       	ldd	r22, Z+4	; 0x04
    22c2:	75 81       	ldd	r23, Z+5	; 0x05
    22c4:	c4 16       	cp	r12, r20
    22c6:	d5 06       	cpc	r13, r21
    22c8:	e6 06       	cpc	r14, r22
    22ca:	f7 06       	cpc	r15, r23
    22cc:	48 f4       	brcc	.+18     	; 0x22e0 <__stack+0xe1>
    22ce:	40 93 0f 15 	sts	0x150F, r20	; 0x80150f <xNextTaskUnblockTime>
    22d2:	50 93 10 15 	sts	0x1510, r21	; 0x801510 <xNextTaskUnblockTime+0x1>
    22d6:	60 93 11 15 	sts	0x1511, r22	; 0x801511 <xNextTaskUnblockTime+0x2>
    22da:	70 93 12 15 	sts	0x1512, r23	; 0x801512 <xNextTaskUnblockTime+0x3>
    22de:	80 c0       	rjmp	.+256    	; 0x23e0 <__stack+0x1e1>
    22e0:	a4 85       	ldd	r26, Z+12	; 0x0c
    22e2:	b5 85       	ldd	r27, Z+13	; 0x0d
    22e4:	c6 81       	ldd	r28, Z+6	; 0x06
    22e6:	d7 81       	ldd	r29, Z+7	; 0x07
    22e8:	20 85       	ldd	r18, Z+8	; 0x08
    22ea:	31 85       	ldd	r19, Z+9	; 0x09
    22ec:	3f 83       	std	Y+7, r19	; 0x07
    22ee:	2e 83       	std	Y+6, r18	; 0x06
    22f0:	c0 85       	ldd	r28, Z+8	; 0x08
    22f2:	d1 85       	ldd	r29, Z+9	; 0x09
    22f4:	26 81       	ldd	r18, Z+6	; 0x06
    22f6:	37 81       	ldd	r19, Z+7	; 0x07
    22f8:	3d 83       	std	Y+5, r19	; 0x05
    22fa:	2c 83       	std	Y+4, r18	; 0x04
    22fc:	11 96       	adiw	r26, 0x01	; 1
    22fe:	4d 91       	ld	r20, X+
    2300:	5c 91       	ld	r21, X
    2302:	12 97       	sbiw	r26, 0x02	; 2
    2304:	9f 01       	movw	r18, r30
    2306:	2e 5f       	subi	r18, 0xFE	; 254
    2308:	3f 4f       	sbci	r19, 0xFF	; 255
    230a:	42 17       	cp	r20, r18
    230c:	53 07       	cpc	r21, r19
    230e:	31 f4       	brne	.+12     	; 0x231c <__stack+0x11d>
    2310:	40 85       	ldd	r20, Z+8	; 0x08
    2312:	51 85       	ldd	r21, Z+9	; 0x09
    2314:	12 96       	adiw	r26, 0x02	; 2
    2316:	5c 93       	st	X, r21
    2318:	4e 93       	st	-X, r20
    231a:	11 97       	sbiw	r26, 0x01	; 1
    231c:	15 86       	std	Z+13, r1	; 0x0d
    231e:	14 86       	std	Z+12, r1	; 0x0c
    2320:	9c 91       	ld	r25, X
    2322:	91 50       	subi	r25, 0x01	; 1
    2324:	9c 93       	st	X, r25
    2326:	a0 8d       	ldd	r26, Z+24	; 0x18
    2328:	b1 8d       	ldd	r27, Z+25	; 0x19
    232a:	10 97       	sbiw	r26, 0x00	; 0
    232c:	09 f1       	breq	.+66     	; 0x2370 <__stack+0x171>
    232e:	c2 89       	ldd	r28, Z+18	; 0x12
    2330:	d3 89       	ldd	r29, Z+19	; 0x13
    2332:	44 89       	ldd	r20, Z+20	; 0x14
    2334:	55 89       	ldd	r21, Z+21	; 0x15
    2336:	5f 83       	std	Y+7, r21	; 0x07
    2338:	4e 83       	std	Y+6, r20	; 0x06
    233a:	c4 89       	ldd	r28, Z+20	; 0x14
    233c:	d5 89       	ldd	r29, Z+21	; 0x15
    233e:	42 89       	ldd	r20, Z+18	; 0x12
    2340:	53 89       	ldd	r21, Z+19	; 0x13
    2342:	5d 83       	std	Y+5, r21	; 0x05
    2344:	4c 83       	std	Y+4, r20	; 0x04
    2346:	11 96       	adiw	r26, 0x01	; 1
    2348:	6d 91       	ld	r22, X+
    234a:	7c 91       	ld	r23, X
    234c:	12 97       	sbiw	r26, 0x02	; 2
    234e:	af 01       	movw	r20, r30
    2350:	42 5f       	subi	r20, 0xF2	; 242
    2352:	5f 4f       	sbci	r21, 0xFF	; 255
    2354:	64 17       	cp	r22, r20
    2356:	75 07       	cpc	r23, r21
    2358:	31 f4       	brne	.+12     	; 0x2366 <__stack+0x167>
    235a:	44 89       	ldd	r20, Z+20	; 0x14
    235c:	55 89       	ldd	r21, Z+21	; 0x15
    235e:	12 96       	adiw	r26, 0x02	; 2
    2360:	5c 93       	st	X, r21
    2362:	4e 93       	st	-X, r20
    2364:	11 97       	sbiw	r26, 0x01	; 1
    2366:	11 8e       	std	Z+25, r1	; 0x19
    2368:	10 8e       	std	Z+24, r1	; 0x18
    236a:	9c 91       	ld	r25, X
    236c:	91 50       	subi	r25, 0x01	; 1
    236e:	9c 93       	st	X, r25
    2370:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2372:	90 91 1b 15 	lds	r25, 0x151B	; 0x80151b <uxTopReadyPriority>
    2376:	9a 17       	cp	r25, r26
    2378:	10 f4       	brcc	.+4      	; 0x237e <__stack+0x17f>
    237a:	a0 93 1b 15 	sts	0x151B, r26	; 0x80151b <uxTopReadyPriority>
    237e:	9b e0       	ldi	r25, 0x0B	; 11
    2380:	9a 9f       	mul	r25, r26
    2382:	d0 01       	movw	r26, r0
    2384:	11 24       	eor	r1, r1
    2386:	a3 5a       	subi	r26, 0xA3	; 163
    2388:	ba 4e       	sbci	r27, 0xEA	; 234
    238a:	11 96       	adiw	r26, 0x01	; 1
    238c:	0d 90       	ld	r0, X+
    238e:	bc 91       	ld	r27, X
    2390:	a0 2d       	mov	r26, r0
    2392:	b7 83       	std	Z+7, r27	; 0x07
    2394:	a6 83       	std	Z+6, r26	; 0x06
    2396:	16 96       	adiw	r26, 0x06	; 6
    2398:	4d 91       	ld	r20, X+
    239a:	5c 91       	ld	r21, X
    239c:	17 97       	sbiw	r26, 0x07	; 7
    239e:	51 87       	std	Z+9, r21	; 0x09
    23a0:	40 87       	std	Z+8, r20	; 0x08
    23a2:	16 96       	adiw	r26, 0x06	; 6
    23a4:	cd 91       	ld	r28, X+
    23a6:	dc 91       	ld	r29, X
    23a8:	17 97       	sbiw	r26, 0x07	; 7
    23aa:	3d 83       	std	Y+5, r19	; 0x05
    23ac:	2c 83       	std	Y+4, r18	; 0x04
    23ae:	17 96       	adiw	r26, 0x07	; 7
    23b0:	3c 93       	st	X, r19
    23b2:	2e 93       	st	-X, r18
    23b4:	16 97       	sbiw	r26, 0x06	; 6
    23b6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    23b8:	9a 9f       	mul	r25, r26
    23ba:	d0 01       	movw	r26, r0
    23bc:	11 24       	eor	r1, r1
    23be:	a3 5a       	subi	r26, 0xA3	; 163
    23c0:	ba 4e       	sbci	r27, 0xEA	; 234
    23c2:	b5 87       	std	Z+13, r27	; 0x0d
    23c4:	a4 87       	std	Z+12, r26	; 0x0c
    23c6:	9c 91       	ld	r25, X
    23c8:	9f 5f       	subi	r25, 0xFF	; 255
    23ca:	9c 93       	st	X, r25
    23cc:	22 8d       	ldd	r18, Z+26	; 0x1a
    23ce:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    23d2:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    23d6:	92 8d       	ldd	r25, Z+26	; 0x1a
    23d8:	29 17       	cp	r18, r25
    23da:	08 f0       	brcs	.+2      	; 0x23de <__stack+0x1df>
    23dc:	4f cf       	rjmp	.-354    	; 0x227c <__stack+0x7d>
    23de:	51 cf       	rjmp	.-350    	; 0x2282 <__stack+0x83>
    23e0:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    23e4:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    23e8:	e2 8d       	ldd	r30, Z+26	; 0x1a
    23ea:	9b e0       	ldi	r25, 0x0B	; 11
    23ec:	e9 9f       	mul	r30, r25
    23ee:	f0 01       	movw	r30, r0
    23f0:	11 24       	eor	r1, r1
    23f2:	e3 5a       	subi	r30, 0xA3	; 163
    23f4:	fa 4e       	sbci	r31, 0xEA	; 234
    23f6:	90 81       	ld	r25, Z
    23f8:	92 30       	cpi	r25, 0x02	; 2
    23fa:	08 f0       	brcs	.+2      	; 0x23fe <__stack+0x1ff>
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	90 91 15 15 	lds	r25, 0x1515	; 0x801515 <xYieldPending>
    2402:	91 11       	cpse	r25, r1
    2404:	16 c0       	rjmp	.+44     	; 0x2432 <__stack+0x233>
    2406:	16 c0       	rjmp	.+44     	; 0x2434 <__stack+0x235>
    2408:	80 91 16 15 	lds	r24, 0x1516	; 0x801516 <xPendedTicks>
    240c:	90 91 17 15 	lds	r25, 0x1517	; 0x801517 <xPendedTicks+0x1>
    2410:	a0 91 18 15 	lds	r26, 0x1518	; 0x801518 <xPendedTicks+0x2>
    2414:	b0 91 19 15 	lds	r27, 0x1519	; 0x801519 <xPendedTicks+0x3>
    2418:	01 96       	adiw	r24, 0x01	; 1
    241a:	a1 1d       	adc	r26, r1
    241c:	b1 1d       	adc	r27, r1
    241e:	80 93 16 15 	sts	0x1516, r24	; 0x801516 <xPendedTicks>
    2422:	90 93 17 15 	sts	0x1517, r25	; 0x801517 <xPendedTicks+0x1>
    2426:	a0 93 18 15 	sts	0x1518, r26	; 0x801518 <xPendedTicks+0x2>
    242a:	b0 93 19 15 	sts	0x1519, r27	; 0x801519 <xPendedTicks+0x3>
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	01 c0       	rjmp	.+2      	; 0x2434 <__stack+0x235>
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	df 91       	pop	r29
    2436:	cf 91       	pop	r28
    2438:	ff 90       	pop	r15
    243a:	ef 90       	pop	r14
    243c:	df 90       	pop	r13
    243e:	cf 90       	pop	r12
    2440:	08 95       	ret

00002442 <xTaskResumeAll>:
    2442:	cf 92       	push	r12
    2444:	df 92       	push	r13
    2446:	ef 92       	push	r14
    2448:	ff 92       	push	r15
    244a:	cf 93       	push	r28
    244c:	df 93       	push	r29
    244e:	0f b6       	in	r0, 0x3f	; 63
    2450:	f8 94       	cli
    2452:	0f 92       	push	r0
    2454:	80 91 0c 15 	lds	r24, 0x150C	; 0x80150c <uxSchedulerSuspended>
    2458:	81 50       	subi	r24, 0x01	; 1
    245a:	80 93 0c 15 	sts	0x150C, r24	; 0x80150c <uxSchedulerSuspended>
    245e:	80 91 0c 15 	lds	r24, 0x150C	; 0x80150c <uxSchedulerSuspended>
    2462:	81 11       	cpse	r24, r1
    2464:	be c0       	rjmp	.+380    	; 0x25e2 <xTaskResumeAll+0x1a0>
    2466:	80 91 20 15 	lds	r24, 0x1520	; 0x801520 <uxCurrentNumberOfTasks>
    246a:	81 11       	cpse	r24, r1
    246c:	88 c0       	rjmp	.+272    	; 0x257e <xTaskResumeAll+0x13c>
    246e:	bc c0       	rjmp	.+376    	; 0x25e8 <xTaskResumeAll+0x1a6>
    2470:	e0 91 3f 15 	lds	r30, 0x153F	; 0x80153f <xPendingReadyList+0x7>
    2474:	f0 91 40 15 	lds	r31, 0x1540	; 0x801540 <xPendingReadyList+0x8>
    2478:	00 84       	ldd	r0, Z+8	; 0x08
    247a:	f1 85       	ldd	r31, Z+9	; 0x09
    247c:	e0 2d       	mov	r30, r0
    247e:	a0 8d       	ldd	r26, Z+24	; 0x18
    2480:	b1 8d       	ldd	r27, Z+25	; 0x19
    2482:	c2 89       	ldd	r28, Z+18	; 0x12
    2484:	d3 89       	ldd	r29, Z+19	; 0x13
    2486:	84 89       	ldd	r24, Z+20	; 0x14
    2488:	95 89       	ldd	r25, Z+21	; 0x15
    248a:	9f 83       	std	Y+7, r25	; 0x07
    248c:	8e 83       	std	Y+6, r24	; 0x06
    248e:	c4 89       	ldd	r28, Z+20	; 0x14
    2490:	d5 89       	ldd	r29, Z+21	; 0x15
    2492:	82 89       	ldd	r24, Z+18	; 0x12
    2494:	93 89       	ldd	r25, Z+19	; 0x13
    2496:	9d 83       	std	Y+5, r25	; 0x05
    2498:	8c 83       	std	Y+4, r24	; 0x04
    249a:	11 96       	adiw	r26, 0x01	; 1
    249c:	2d 91       	ld	r18, X+
    249e:	3c 91       	ld	r19, X
    24a0:	12 97       	sbiw	r26, 0x02	; 2
    24a2:	cf 01       	movw	r24, r30
    24a4:	0e 96       	adiw	r24, 0x0e	; 14
    24a6:	28 17       	cp	r18, r24
    24a8:	39 07       	cpc	r19, r25
    24aa:	31 f4       	brne	.+12     	; 0x24b8 <xTaskResumeAll+0x76>
    24ac:	84 89       	ldd	r24, Z+20	; 0x14
    24ae:	95 89       	ldd	r25, Z+21	; 0x15
    24b0:	12 96       	adiw	r26, 0x02	; 2
    24b2:	9c 93       	st	X, r25
    24b4:	8e 93       	st	-X, r24
    24b6:	11 97       	sbiw	r26, 0x01	; 1
    24b8:	11 8e       	std	Z+25, r1	; 0x19
    24ba:	10 8e       	std	Z+24, r1	; 0x18
    24bc:	8c 91       	ld	r24, X
    24be:	81 50       	subi	r24, 0x01	; 1
    24c0:	8c 93       	st	X, r24
    24c2:	a4 85       	ldd	r26, Z+12	; 0x0c
    24c4:	b5 85       	ldd	r27, Z+13	; 0x0d
    24c6:	c6 81       	ldd	r28, Z+6	; 0x06
    24c8:	d7 81       	ldd	r29, Z+7	; 0x07
    24ca:	80 85       	ldd	r24, Z+8	; 0x08
    24cc:	91 85       	ldd	r25, Z+9	; 0x09
    24ce:	9f 83       	std	Y+7, r25	; 0x07
    24d0:	8e 83       	std	Y+6, r24	; 0x06
    24d2:	c0 85       	ldd	r28, Z+8	; 0x08
    24d4:	d1 85       	ldd	r29, Z+9	; 0x09
    24d6:	86 81       	ldd	r24, Z+6	; 0x06
    24d8:	97 81       	ldd	r25, Z+7	; 0x07
    24da:	9d 83       	std	Y+5, r25	; 0x05
    24dc:	8c 83       	std	Y+4, r24	; 0x04
    24de:	11 96       	adiw	r26, 0x01	; 1
    24e0:	8d 91       	ld	r24, X+
    24e2:	9c 91       	ld	r25, X
    24e4:	12 97       	sbiw	r26, 0x02	; 2
    24e6:	9f 01       	movw	r18, r30
    24e8:	2e 5f       	subi	r18, 0xFE	; 254
    24ea:	3f 4f       	sbci	r19, 0xFF	; 255
    24ec:	82 17       	cp	r24, r18
    24ee:	93 07       	cpc	r25, r19
    24f0:	31 f4       	brne	.+12     	; 0x24fe <xTaskResumeAll+0xbc>
    24f2:	80 85       	ldd	r24, Z+8	; 0x08
    24f4:	91 85       	ldd	r25, Z+9	; 0x09
    24f6:	12 96       	adiw	r26, 0x02	; 2
    24f8:	9c 93       	st	X, r25
    24fa:	8e 93       	st	-X, r24
    24fc:	11 97       	sbiw	r26, 0x01	; 1
    24fe:	15 86       	std	Z+13, r1	; 0x0d
    2500:	14 86       	std	Z+12, r1	; 0x0c
    2502:	8c 91       	ld	r24, X
    2504:	81 50       	subi	r24, 0x01	; 1
    2506:	8c 93       	st	X, r24
    2508:	a2 8d       	ldd	r26, Z+26	; 0x1a
    250a:	80 91 1b 15 	lds	r24, 0x151B	; 0x80151b <uxTopReadyPriority>
    250e:	8a 17       	cp	r24, r26
    2510:	10 f4       	brcc	.+4      	; 0x2516 <xTaskResumeAll+0xd4>
    2512:	a0 93 1b 15 	sts	0x151B, r26	; 0x80151b <uxTopReadyPriority>
    2516:	8b e0       	ldi	r24, 0x0B	; 11
    2518:	8a 9f       	mul	r24, r26
    251a:	d0 01       	movw	r26, r0
    251c:	11 24       	eor	r1, r1
    251e:	a3 5a       	subi	r26, 0xA3	; 163
    2520:	ba 4e       	sbci	r27, 0xEA	; 234
    2522:	11 96       	adiw	r26, 0x01	; 1
    2524:	0d 90       	ld	r0, X+
    2526:	bc 91       	ld	r27, X
    2528:	a0 2d       	mov	r26, r0
    252a:	b7 83       	std	Z+7, r27	; 0x07
    252c:	a6 83       	std	Z+6, r26	; 0x06
    252e:	16 96       	adiw	r26, 0x06	; 6
    2530:	4d 91       	ld	r20, X+
    2532:	5c 91       	ld	r21, X
    2534:	17 97       	sbiw	r26, 0x07	; 7
    2536:	51 87       	std	Z+9, r21	; 0x09
    2538:	40 87       	std	Z+8, r20	; 0x08
    253a:	16 96       	adiw	r26, 0x06	; 6
    253c:	cd 91       	ld	r28, X+
    253e:	dc 91       	ld	r29, X
    2540:	17 97       	sbiw	r26, 0x07	; 7
    2542:	3d 83       	std	Y+5, r19	; 0x05
    2544:	2c 83       	std	Y+4, r18	; 0x04
    2546:	17 96       	adiw	r26, 0x07	; 7
    2548:	3c 93       	st	X, r19
    254a:	2e 93       	st	-X, r18
    254c:	16 97       	sbiw	r26, 0x06	; 6
    254e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2550:	8a 9f       	mul	r24, r26
    2552:	d0 01       	movw	r26, r0
    2554:	11 24       	eor	r1, r1
    2556:	a3 5a       	subi	r26, 0xA3	; 163
    2558:	ba 4e       	sbci	r27, 0xEA	; 234
    255a:	b5 87       	std	Z+13, r27	; 0x0d
    255c:	a4 87       	std	Z+12, r26	; 0x0c
    255e:	8c 91       	ld	r24, X
    2560:	8f 5f       	subi	r24, 0xFF	; 255
    2562:	8c 93       	st	X, r24
    2564:	92 8d       	ldd	r25, Z+26	; 0x1a
    2566:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
    256a:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    256e:	5a 96       	adiw	r26, 0x1a	; 26
    2570:	8c 91       	ld	r24, X
    2572:	98 17       	cp	r25, r24
    2574:	30 f0       	brcs	.+12     	; 0x2582 <xTaskResumeAll+0x140>
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	80 93 15 15 	sts	0x1515, r24	; 0x801515 <xYieldPending>
    257c:	02 c0       	rjmp	.+4      	; 0x2582 <xTaskResumeAll+0x140>
    257e:	e0 e0       	ldi	r30, 0x00	; 0
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 91 38 15 	lds	r24, 0x1538	; 0x801538 <xPendingReadyList>
    2586:	81 11       	cpse	r24, r1
    2588:	73 cf       	rjmp	.-282    	; 0x2470 <xTaskResumeAll+0x2e>
    258a:	ef 2b       	or	r30, r31
    258c:	09 f0       	breq	.+2      	; 0x2590 <xTaskResumeAll+0x14e>
    258e:	7d db       	rcall	.-2310   	; 0x1c8a <prvResetNextTaskUnblockTime>
    2590:	c0 90 16 15 	lds	r12, 0x1516	; 0x801516 <xPendedTicks>
    2594:	d0 90 17 15 	lds	r13, 0x1517	; 0x801517 <xPendedTicks+0x1>
    2598:	e0 90 18 15 	lds	r14, 0x1518	; 0x801518 <xPendedTicks+0x2>
    259c:	f0 90 19 15 	lds	r15, 0x1519	; 0x801519 <xPendedTicks+0x3>
    25a0:	c1 14       	cp	r12, r1
    25a2:	d1 04       	cpc	r13, r1
    25a4:	e1 04       	cpc	r14, r1
    25a6:	f1 04       	cpc	r15, r1
    25a8:	a1 f0       	breq	.+40     	; 0x25d2 <xTaskResumeAll+0x190>
    25aa:	1f de       	rcall	.-962    	; 0x21ea <xTaskIncrementTick>
    25ac:	88 23       	and	r24, r24
    25ae:	19 f0       	breq	.+6      	; 0x25b6 <xTaskResumeAll+0x174>
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	80 93 15 15 	sts	0x1515, r24	; 0x801515 <xYieldPending>
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	c8 1a       	sub	r12, r24
    25ba:	d1 08       	sbc	r13, r1
    25bc:	e1 08       	sbc	r14, r1
    25be:	f1 08       	sbc	r15, r1
    25c0:	a1 f7       	brne	.-24     	; 0x25aa <xTaskResumeAll+0x168>
    25c2:	10 92 16 15 	sts	0x1516, r1	; 0x801516 <xPendedTicks>
    25c6:	10 92 17 15 	sts	0x1517, r1	; 0x801517 <xPendedTicks+0x1>
    25ca:	10 92 18 15 	sts	0x1518, r1	; 0x801518 <xPendedTicks+0x2>
    25ce:	10 92 19 15 	sts	0x1519, r1	; 0x801519 <xPendedTicks+0x3>
    25d2:	80 91 15 15 	lds	r24, 0x1515	; 0x801515 <xYieldPending>
    25d6:	88 23       	and	r24, r24
    25d8:	31 f0       	breq	.+12     	; 0x25e6 <xTaskResumeAll+0x1a4>
    25da:	0e 94 b5 06 	call	0xd6a	; 0xd6a <vPortYield>
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	03 c0       	rjmp	.+6      	; 0x25e8 <xTaskResumeAll+0x1a6>
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	01 c0       	rjmp	.+2      	; 0x25e8 <xTaskResumeAll+0x1a6>
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	0f 90       	pop	r0
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	df 91       	pop	r29
    25ee:	cf 91       	pop	r28
    25f0:	ff 90       	pop	r15
    25f2:	ef 90       	pop	r14
    25f4:	df 90       	pop	r13
    25f6:	cf 90       	pop	r12
    25f8:	08 95       	ret

000025fa <xTaskDelayUntil>:
    25fa:	8f 92       	push	r8
    25fc:	9f 92       	push	r9
    25fe:	af 92       	push	r10
    2600:	bf 92       	push	r11
    2602:	cf 92       	push	r12
    2604:	df 92       	push	r13
    2606:	ef 92       	push	r14
    2608:	ff 92       	push	r15
    260a:	1f 93       	push	r17
    260c:	cf 93       	push	r28
    260e:	df 93       	push	r29
    2610:	ec 01       	movw	r28, r24
    2612:	6a 01       	movw	r12, r20
    2614:	7b 01       	movw	r14, r22
    2616:	d5 dd       	rcall	.-1110   	; 0x21c2 <vTaskSuspendAll>
    2618:	80 90 1c 15 	lds	r8, 0x151C	; 0x80151c <xTickCount>
    261c:	90 90 1d 15 	lds	r9, 0x151D	; 0x80151d <xTickCount+0x1>
    2620:	a0 90 1e 15 	lds	r10, 0x151E	; 0x80151e <xTickCount+0x2>
    2624:	b0 90 1f 15 	lds	r11, 0x151F	; 0x80151f <xTickCount+0x3>
    2628:	88 81       	ld	r24, Y
    262a:	99 81       	ldd	r25, Y+1	; 0x01
    262c:	aa 81       	ldd	r26, Y+2	; 0x02
    262e:	bb 81       	ldd	r27, Y+3	; 0x03
    2630:	ac 01       	movw	r20, r24
    2632:	bd 01       	movw	r22, r26
    2634:	4c 0d       	add	r20, r12
    2636:	5d 1d       	adc	r21, r13
    2638:	6e 1d       	adc	r22, r14
    263a:	7f 1d       	adc	r23, r15
    263c:	88 16       	cp	r8, r24
    263e:	99 06       	cpc	r9, r25
    2640:	aa 06       	cpc	r10, r26
    2642:	bb 06       	cpc	r11, r27
    2644:	60 f4       	brcc	.+24     	; 0x265e <xTaskDelayUntil+0x64>
    2646:	48 17       	cp	r20, r24
    2648:	59 07       	cpc	r21, r25
    264a:	6a 07       	cpc	r22, r26
    264c:	7b 07       	cpc	r23, r27
    264e:	98 f4       	brcc	.+38     	; 0x2676 <xTaskDelayUntil+0x7c>
    2650:	84 16       	cp	r8, r20
    2652:	95 06       	cpc	r9, r21
    2654:	a6 06       	cpc	r10, r22
    2656:	b7 06       	cpc	r11, r23
    2658:	80 f0       	brcs	.+32     	; 0x267a <xTaskDelayUntil+0x80>
    265a:	10 e0       	ldi	r17, 0x00	; 0
    265c:	13 c0       	rjmp	.+38     	; 0x2684 <xTaskDelayUntil+0x8a>
    265e:	48 17       	cp	r20, r24
    2660:	59 07       	cpc	r21, r25
    2662:	6a 07       	cpc	r22, r26
    2664:	7b 07       	cpc	r23, r27
    2666:	58 f0       	brcs	.+22     	; 0x267e <xTaskDelayUntil+0x84>
    2668:	84 16       	cp	r8, r20
    266a:	95 06       	cpc	r9, r21
    266c:	a6 06       	cpc	r10, r22
    266e:	b7 06       	cpc	r11, r23
    2670:	40 f0       	brcs	.+16     	; 0x2682 <xTaskDelayUntil+0x88>
    2672:	10 e0       	ldi	r17, 0x00	; 0
    2674:	07 c0       	rjmp	.+14     	; 0x2684 <xTaskDelayUntil+0x8a>
    2676:	10 e0       	ldi	r17, 0x00	; 0
    2678:	05 c0       	rjmp	.+10     	; 0x2684 <xTaskDelayUntil+0x8a>
    267a:	11 e0       	ldi	r17, 0x01	; 1
    267c:	03 c0       	rjmp	.+6      	; 0x2684 <xTaskDelayUntil+0x8a>
    267e:	11 e0       	ldi	r17, 0x01	; 1
    2680:	01 c0       	rjmp	.+2      	; 0x2684 <xTaskDelayUntil+0x8a>
    2682:	11 e0       	ldi	r17, 0x01	; 1
    2684:	48 83       	st	Y, r20
    2686:	59 83       	std	Y+1, r21	; 0x01
    2688:	6a 83       	std	Y+2, r22	; 0x02
    268a:	7b 83       	std	Y+3, r23	; 0x03
    268c:	11 23       	and	r17, r17
    268e:	41 f0       	breq	.+16     	; 0x26a0 <xTaskDelayUntil+0xa6>
    2690:	cb 01       	movw	r24, r22
    2692:	ba 01       	movw	r22, r20
    2694:	68 19       	sub	r22, r8
    2696:	79 09       	sbc	r23, r9
    2698:	8a 09       	sbc	r24, r10
    269a:	9b 09       	sbc	r25, r11
    269c:	40 e0       	ldi	r20, 0x00	; 0
    269e:	6b dc       	rcall	.-1834   	; 0x1f76 <prvAddCurrentTaskToDelayedList>
    26a0:	d0 de       	rcall	.-608    	; 0x2442 <xTaskResumeAll>
    26a2:	81 11       	cpse	r24, r1
    26a4:	02 c0       	rjmp	.+4      	; 0x26aa <xTaskDelayUntil+0xb0>
    26a6:	0e 94 b5 06 	call	0xd6a	; 0xd6a <vPortYield>
    26aa:	81 2f       	mov	r24, r17
    26ac:	df 91       	pop	r29
    26ae:	cf 91       	pop	r28
    26b0:	1f 91       	pop	r17
    26b2:	ff 90       	pop	r15
    26b4:	ef 90       	pop	r14
    26b6:	df 90       	pop	r13
    26b8:	cf 90       	pop	r12
    26ba:	bf 90       	pop	r11
    26bc:	af 90       	pop	r10
    26be:	9f 90       	pop	r9
    26c0:	8f 90       	pop	r8
    26c2:	08 95       	ret

000026c4 <vTaskDelay>:
    26c4:	cf 92       	push	r12
    26c6:	df 92       	push	r13
    26c8:	ef 92       	push	r14
    26ca:	ff 92       	push	r15
    26cc:	6b 01       	movw	r12, r22
    26ce:	7c 01       	movw	r14, r24
    26d0:	67 2b       	or	r22, r23
    26d2:	68 2b       	or	r22, r24
    26d4:	69 2b       	or	r22, r25
    26d6:	39 f0       	breq	.+14     	; 0x26e6 <vTaskDelay+0x22>
    26d8:	74 dd       	rcall	.-1304   	; 0x21c2 <vTaskSuspendAll>
    26da:	40 e0       	ldi	r20, 0x00	; 0
    26dc:	c7 01       	movw	r24, r14
    26de:	b6 01       	movw	r22, r12
    26e0:	4a dc       	rcall	.-1900   	; 0x1f76 <prvAddCurrentTaskToDelayedList>
    26e2:	af de       	rcall	.-674    	; 0x2442 <xTaskResumeAll>
    26e4:	01 c0       	rjmp	.+2      	; 0x26e8 <vTaskDelay+0x24>
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	81 11       	cpse	r24, r1
    26ea:	02 c0       	rjmp	.+4      	; 0x26f0 <vTaskDelay+0x2c>
    26ec:	0e 94 b5 06 	call	0xd6a	; 0xd6a <vPortYield>
    26f0:	ff 90       	pop	r15
    26f2:	ef 90       	pop	r14
    26f4:	df 90       	pop	r13
    26f6:	cf 90       	pop	r12
    26f8:	08 95       	ret

000026fa <vTaskSwitchContext>:
    26fa:	80 91 0c 15 	lds	r24, 0x150C	; 0x80150c <uxSchedulerSuspended>
    26fe:	88 23       	and	r24, r24
    2700:	21 f0       	breq	.+8      	; 0x270a <vTaskSwitchContext+0x10>
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	80 93 15 15 	sts	0x1515, r24	; 0x801515 <xYieldPending>
    2708:	08 95       	ret
    270a:	10 92 15 15 	sts	0x1515, r1	; 0x801515 <xYieldPending>
    270e:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2712:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2716:	20 81       	ld	r18, Z
    2718:	31 81       	ldd	r19, Z+1	; 0x01
    271a:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    271e:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2722:	83 8d       	ldd	r24, Z+27	; 0x1b
    2724:	94 8d       	ldd	r25, Z+28	; 0x1c
    2726:	82 17       	cp	r24, r18
    2728:	93 07       	cpc	r25, r19
    272a:	60 f0       	brcs	.+24     	; 0x2744 <vTaskSwitchContext+0x4a>
    272c:	60 91 cb 15 	lds	r22, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2730:	70 91 cc 15 	lds	r23, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2734:	63 5e       	subi	r22, 0xE3	; 227
    2736:	7f 4f       	sbci	r23, 0xFF	; 255
    2738:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <pxCurrentTCB>
    273c:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2740:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <vApplicationStackOverflowHook>
    2744:	80 91 1b 15 	lds	r24, 0x151B	; 0x80151b <uxTopReadyPriority>
    2748:	01 c0       	rjmp	.+2      	; 0x274c <vTaskSwitchContext+0x52>
    274a:	81 50       	subi	r24, 0x01	; 1
    274c:	28 2f       	mov	r18, r24
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	9b e0       	ldi	r25, 0x0B	; 11
    2752:	92 9f       	mul	r25, r18
    2754:	f0 01       	movw	r30, r0
    2756:	93 9f       	mul	r25, r19
    2758:	f0 0d       	add	r31, r0
    275a:	11 24       	eor	r1, r1
    275c:	e3 5a       	subi	r30, 0xA3	; 163
    275e:	fa 4e       	sbci	r31, 0xEA	; 234
    2760:	90 81       	ld	r25, Z
    2762:	99 23       	and	r25, r25
    2764:	91 f3       	breq	.-28     	; 0x274a <vTaskSwitchContext+0x50>
    2766:	9b e0       	ldi	r25, 0x0B	; 11
    2768:	92 9f       	mul	r25, r18
    276a:	a0 01       	movw	r20, r0
    276c:	93 9f       	mul	r25, r19
    276e:	50 0d       	add	r21, r0
    2770:	11 24       	eor	r1, r1
    2772:	df 01       	movw	r26, r30
    2774:	01 80       	ldd	r0, Z+1	; 0x01
    2776:	f2 81       	ldd	r31, Z+2	; 0x02
    2778:	e0 2d       	mov	r30, r0
    277a:	04 80       	ldd	r0, Z+4	; 0x04
    277c:	f5 81       	ldd	r31, Z+5	; 0x05
    277e:	e0 2d       	mov	r30, r0
    2780:	12 96       	adiw	r26, 0x02	; 2
    2782:	fc 93       	st	X, r31
    2784:	ee 93       	st	-X, r30
    2786:	11 97       	sbiw	r26, 0x01	; 1
    2788:	40 5a       	subi	r20, 0xA0	; 160
    278a:	5a 4e       	sbci	r21, 0xEA	; 234
    278c:	e4 17       	cp	r30, r20
    278e:	f5 07       	cpc	r31, r21
    2790:	29 f4       	brne	.+10     	; 0x279c <vTaskSwitchContext+0xa2>
    2792:	44 81       	ldd	r20, Z+4	; 0x04
    2794:	55 81       	ldd	r21, Z+5	; 0x05
    2796:	fd 01       	movw	r30, r26
    2798:	52 83       	std	Z+2, r21	; 0x02
    279a:	41 83       	std	Z+1, r20	; 0x01
    279c:	9b e0       	ldi	r25, 0x0B	; 11
    279e:	92 9f       	mul	r25, r18
    27a0:	f0 01       	movw	r30, r0
    27a2:	93 9f       	mul	r25, r19
    27a4:	f0 0d       	add	r31, r0
    27a6:	11 24       	eor	r1, r1
    27a8:	e3 5a       	subi	r30, 0xA3	; 163
    27aa:	fa 4e       	sbci	r31, 0xEA	; 234
    27ac:	01 80       	ldd	r0, Z+1	; 0x01
    27ae:	f2 81       	ldd	r31, Z+2	; 0x02
    27b0:	e0 2d       	mov	r30, r0
    27b2:	20 85       	ldd	r18, Z+8	; 0x08
    27b4:	31 85       	ldd	r19, Z+9	; 0x09
    27b6:	30 93 cc 15 	sts	0x15CC, r19	; 0x8015cc <pxCurrentTCB+0x1>
    27ba:	20 93 cb 15 	sts	0x15CB, r18	; 0x8015cb <pxCurrentTCB>
    27be:	80 93 1b 15 	sts	0x151B, r24	; 0x80151b <uxTopReadyPriority>
    27c2:	08 95       	ret

000027c4 <vTaskPlaceOnEventList>:
    27c4:	cf 92       	push	r12
    27c6:	df 92       	push	r13
    27c8:	ef 92       	push	r14
    27ca:	ff 92       	push	r15
    27cc:	6a 01       	movw	r12, r20
    27ce:	7b 01       	movw	r14, r22
    27d0:	60 91 cb 15 	lds	r22, 0x15CB	; 0x8015cb <pxCurrentTCB>
    27d4:	70 91 cc 15 	lds	r23, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    27d8:	62 5f       	subi	r22, 0xF2	; 242
    27da:	7f 4f       	sbci	r23, 0xFF	; 255
    27dc:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <vListInsert>
    27e0:	41 e0       	ldi	r20, 0x01	; 1
    27e2:	c7 01       	movw	r24, r14
    27e4:	b6 01       	movw	r22, r12
    27e6:	c7 db       	rcall	.-2162   	; 0x1f76 <prvAddCurrentTaskToDelayedList>
    27e8:	ff 90       	pop	r15
    27ea:	ef 90       	pop	r14
    27ec:	df 90       	pop	r13
    27ee:	cf 90       	pop	r12
    27f0:	08 95       	ret

000027f2 <vTaskPlaceOnUnorderedEventList>:
    27f2:	0f 93       	push	r16
    27f4:	1f 93       	push	r17
    27f6:	cf 93       	push	r28
    27f8:	df 93       	push	r29
    27fa:	fc 01       	movw	r30, r24
    27fc:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2800:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2804:	70 68       	ori	r23, 0x80	; 128
    2806:	1e 96       	adiw	r26, 0x0e	; 14
    2808:	4d 93       	st	X+, r20
    280a:	5d 93       	st	X+, r21
    280c:	6d 93       	st	X+, r22
    280e:	7c 93       	st	X, r23
    2810:	51 97       	sbiw	r26, 0x11	; 17
    2812:	a1 81       	ldd	r26, Z+1	; 0x01
    2814:	b2 81       	ldd	r27, Z+2	; 0x02
    2816:	c0 91 cb 15 	lds	r28, 0x15CB	; 0x8015cb <pxCurrentTCB>
    281a:	d0 91 cc 15 	lds	r29, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    281e:	bb 8b       	std	Y+19, r27	; 0x13
    2820:	aa 8b       	std	Y+18, r26	; 0x12
    2822:	c0 91 cb 15 	lds	r28, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2826:	d0 91 cc 15 	lds	r29, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    282a:	16 96       	adiw	r26, 0x06	; 6
    282c:	8d 91       	ld	r24, X+
    282e:	9c 91       	ld	r25, X
    2830:	17 97       	sbiw	r26, 0x07	; 7
    2832:	9d 8b       	std	Y+21, r25	; 0x15
    2834:	8c 8b       	std	Y+20, r24	; 0x14
    2836:	16 96       	adiw	r26, 0x06	; 6
    2838:	cd 91       	ld	r28, X+
    283a:	dc 91       	ld	r29, X
    283c:	17 97       	sbiw	r26, 0x07	; 7
    283e:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2842:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2846:	0e 96       	adiw	r24, 0x0e	; 14
    2848:	9d 83       	std	Y+5, r25	; 0x05
    284a:	8c 83       	std	Y+4, r24	; 0x04
    284c:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2850:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2854:	0e 96       	adiw	r24, 0x0e	; 14
    2856:	17 96       	adiw	r26, 0x07	; 7
    2858:	9c 93       	st	X, r25
    285a:	8e 93       	st	-X, r24
    285c:	16 97       	sbiw	r26, 0x06	; 6
    285e:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2862:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2866:	59 96       	adiw	r26, 0x19	; 25
    2868:	fc 93       	st	X, r31
    286a:	ee 93       	st	-X, r30
    286c:	58 97       	sbiw	r26, 0x18	; 24
    286e:	80 81       	ld	r24, Z
    2870:	8f 5f       	subi	r24, 0xFF	; 255
    2872:	80 83       	st	Z, r24
    2874:	41 e0       	ldi	r20, 0x01	; 1
    2876:	c9 01       	movw	r24, r18
    2878:	b8 01       	movw	r22, r16
    287a:	7d db       	rcall	.-2310   	; 0x1f76 <prvAddCurrentTaskToDelayedList>
    287c:	df 91       	pop	r29
    287e:	cf 91       	pop	r28
    2880:	1f 91       	pop	r17
    2882:	0f 91       	pop	r16
    2884:	08 95       	ret

00002886 <vTaskPlaceOnEventListRestricted>:
    2886:	cf 93       	push	r28
    2888:	df 93       	push	r29
    288a:	fc 01       	movw	r30, r24
    288c:	cb 01       	movw	r24, r22
    288e:	ba 01       	movw	r22, r20
    2890:	a1 81       	ldd	r26, Z+1	; 0x01
    2892:	b2 81       	ldd	r27, Z+2	; 0x02
    2894:	c0 91 cb 15 	lds	r28, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2898:	d0 91 cc 15 	lds	r29, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    289c:	bb 8b       	std	Y+19, r27	; 0x13
    289e:	aa 8b       	std	Y+18, r26	; 0x12
    28a0:	c0 91 cb 15 	lds	r28, 0x15CB	; 0x8015cb <pxCurrentTCB>
    28a4:	d0 91 cc 15 	lds	r29, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    28a8:	16 96       	adiw	r26, 0x06	; 6
    28aa:	4d 91       	ld	r20, X+
    28ac:	5c 91       	ld	r21, X
    28ae:	17 97       	sbiw	r26, 0x07	; 7
    28b0:	5d 8b       	std	Y+21, r21	; 0x15
    28b2:	4c 8b       	std	Y+20, r20	; 0x14
    28b4:	16 96       	adiw	r26, 0x06	; 6
    28b6:	cd 91       	ld	r28, X+
    28b8:	dc 91       	ld	r29, X
    28ba:	17 97       	sbiw	r26, 0x07	; 7
    28bc:	40 91 cb 15 	lds	r20, 0x15CB	; 0x8015cb <pxCurrentTCB>
    28c0:	50 91 cc 15 	lds	r21, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    28c4:	42 5f       	subi	r20, 0xF2	; 242
    28c6:	5f 4f       	sbci	r21, 0xFF	; 255
    28c8:	5d 83       	std	Y+5, r21	; 0x05
    28ca:	4c 83       	std	Y+4, r20	; 0x04
    28cc:	40 91 cb 15 	lds	r20, 0x15CB	; 0x8015cb <pxCurrentTCB>
    28d0:	50 91 cc 15 	lds	r21, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    28d4:	42 5f       	subi	r20, 0xF2	; 242
    28d6:	5f 4f       	sbci	r21, 0xFF	; 255
    28d8:	17 96       	adiw	r26, 0x07	; 7
    28da:	5c 93       	st	X, r21
    28dc:	4e 93       	st	-X, r20
    28de:	16 97       	sbiw	r26, 0x06	; 6
    28e0:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
    28e4:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    28e8:	59 96       	adiw	r26, 0x19	; 25
    28ea:	fc 93       	st	X, r31
    28ec:	ee 93       	st	-X, r30
    28ee:	58 97       	sbiw	r26, 0x18	; 24
    28f0:	30 81       	ld	r19, Z
    28f2:	3f 5f       	subi	r19, 0xFF	; 255
    28f4:	30 83       	st	Z, r19
    28f6:	22 23       	and	r18, r18
    28f8:	19 f0       	breq	.+6      	; 0x2900 <vTaskPlaceOnEventListRestricted+0x7a>
    28fa:	6f ef       	ldi	r22, 0xFF	; 255
    28fc:	7f ef       	ldi	r23, 0xFF	; 255
    28fe:	cb 01       	movw	r24, r22
    2900:	42 2f       	mov	r20, r18
    2902:	39 db       	rcall	.-2446   	; 0x1f76 <prvAddCurrentTaskToDelayedList>
    2904:	df 91       	pop	r29
    2906:	cf 91       	pop	r28
    2908:	08 95       	ret

0000290a <xTaskRemoveFromEventList>:
    290a:	cf 93       	push	r28
    290c:	df 93       	push	r29
    290e:	dc 01       	movw	r26, r24
    2910:	17 96       	adiw	r26, 0x07	; 7
    2912:	ed 91       	ld	r30, X+
    2914:	fc 91       	ld	r31, X
    2916:	18 97       	sbiw	r26, 0x08	; 8
    2918:	00 84       	ldd	r0, Z+8	; 0x08
    291a:	f1 85       	ldd	r31, Z+9	; 0x09
    291c:	e0 2d       	mov	r30, r0
    291e:	a0 8d       	ldd	r26, Z+24	; 0x18
    2920:	b1 8d       	ldd	r27, Z+25	; 0x19
    2922:	c2 89       	ldd	r28, Z+18	; 0x12
    2924:	d3 89       	ldd	r29, Z+19	; 0x13
    2926:	84 89       	ldd	r24, Z+20	; 0x14
    2928:	95 89       	ldd	r25, Z+21	; 0x15
    292a:	9f 83       	std	Y+7, r25	; 0x07
    292c:	8e 83       	std	Y+6, r24	; 0x06
    292e:	c4 89       	ldd	r28, Z+20	; 0x14
    2930:	d5 89       	ldd	r29, Z+21	; 0x15
    2932:	82 89       	ldd	r24, Z+18	; 0x12
    2934:	93 89       	ldd	r25, Z+19	; 0x13
    2936:	9d 83       	std	Y+5, r25	; 0x05
    2938:	8c 83       	std	Y+4, r24	; 0x04
    293a:	11 96       	adiw	r26, 0x01	; 1
    293c:	8d 91       	ld	r24, X+
    293e:	9c 91       	ld	r25, X
    2940:	12 97       	sbiw	r26, 0x02	; 2
    2942:	9f 01       	movw	r18, r30
    2944:	22 5f       	subi	r18, 0xF2	; 242
    2946:	3f 4f       	sbci	r19, 0xFF	; 255
    2948:	82 17       	cp	r24, r18
    294a:	93 07       	cpc	r25, r19
    294c:	31 f4       	brne	.+12     	; 0x295a <xTaskRemoveFromEventList+0x50>
    294e:	84 89       	ldd	r24, Z+20	; 0x14
    2950:	95 89       	ldd	r25, Z+21	; 0x15
    2952:	12 96       	adiw	r26, 0x02	; 2
    2954:	9c 93       	st	X, r25
    2956:	8e 93       	st	-X, r24
    2958:	11 97       	sbiw	r26, 0x01	; 1
    295a:	11 8e       	std	Z+25, r1	; 0x19
    295c:	10 8e       	std	Z+24, r1	; 0x18
    295e:	8c 91       	ld	r24, X
    2960:	81 50       	subi	r24, 0x01	; 1
    2962:	8c 93       	st	X, r24
    2964:	80 91 0c 15 	lds	r24, 0x150C	; 0x80150c <uxSchedulerSuspended>
    2968:	81 11       	cpse	r24, r1
    296a:	52 c0       	rjmp	.+164    	; 0x2a10 <xTaskRemoveFromEventList+0x106>
    296c:	a4 85       	ldd	r26, Z+12	; 0x0c
    296e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2970:	c6 81       	ldd	r28, Z+6	; 0x06
    2972:	d7 81       	ldd	r29, Z+7	; 0x07
    2974:	80 85       	ldd	r24, Z+8	; 0x08
    2976:	91 85       	ldd	r25, Z+9	; 0x09
    2978:	9f 83       	std	Y+7, r25	; 0x07
    297a:	8e 83       	std	Y+6, r24	; 0x06
    297c:	c0 85       	ldd	r28, Z+8	; 0x08
    297e:	d1 85       	ldd	r29, Z+9	; 0x09
    2980:	86 81       	ldd	r24, Z+6	; 0x06
    2982:	97 81       	ldd	r25, Z+7	; 0x07
    2984:	9d 83       	std	Y+5, r25	; 0x05
    2986:	8c 83       	std	Y+4, r24	; 0x04
    2988:	11 96       	adiw	r26, 0x01	; 1
    298a:	8d 91       	ld	r24, X+
    298c:	9c 91       	ld	r25, X
    298e:	12 97       	sbiw	r26, 0x02	; 2
    2990:	9f 01       	movw	r18, r30
    2992:	2e 5f       	subi	r18, 0xFE	; 254
    2994:	3f 4f       	sbci	r19, 0xFF	; 255
    2996:	82 17       	cp	r24, r18
    2998:	93 07       	cpc	r25, r19
    299a:	31 f4       	brne	.+12     	; 0x29a8 <xTaskRemoveFromEventList+0x9e>
    299c:	80 85       	ldd	r24, Z+8	; 0x08
    299e:	91 85       	ldd	r25, Z+9	; 0x09
    29a0:	12 96       	adiw	r26, 0x02	; 2
    29a2:	9c 93       	st	X, r25
    29a4:	8e 93       	st	-X, r24
    29a6:	11 97       	sbiw	r26, 0x01	; 1
    29a8:	15 86       	std	Z+13, r1	; 0x0d
    29aa:	14 86       	std	Z+12, r1	; 0x0c
    29ac:	8c 91       	ld	r24, X
    29ae:	81 50       	subi	r24, 0x01	; 1
    29b0:	8c 93       	st	X, r24
    29b2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    29b4:	80 91 1b 15 	lds	r24, 0x151B	; 0x80151b <uxTopReadyPriority>
    29b8:	8a 17       	cp	r24, r26
    29ba:	10 f4       	brcc	.+4      	; 0x29c0 <xTaskRemoveFromEventList+0xb6>
    29bc:	a0 93 1b 15 	sts	0x151B, r26	; 0x80151b <uxTopReadyPriority>
    29c0:	8b e0       	ldi	r24, 0x0B	; 11
    29c2:	8a 9f       	mul	r24, r26
    29c4:	d0 01       	movw	r26, r0
    29c6:	11 24       	eor	r1, r1
    29c8:	a3 5a       	subi	r26, 0xA3	; 163
    29ca:	ba 4e       	sbci	r27, 0xEA	; 234
    29cc:	11 96       	adiw	r26, 0x01	; 1
    29ce:	0d 90       	ld	r0, X+
    29d0:	bc 91       	ld	r27, X
    29d2:	a0 2d       	mov	r26, r0
    29d4:	b7 83       	std	Z+7, r27	; 0x07
    29d6:	a6 83       	std	Z+6, r26	; 0x06
    29d8:	16 96       	adiw	r26, 0x06	; 6
    29da:	4d 91       	ld	r20, X+
    29dc:	5c 91       	ld	r21, X
    29de:	17 97       	sbiw	r26, 0x07	; 7
    29e0:	51 87       	std	Z+9, r21	; 0x09
    29e2:	40 87       	std	Z+8, r20	; 0x08
    29e4:	16 96       	adiw	r26, 0x06	; 6
    29e6:	cd 91       	ld	r28, X+
    29e8:	dc 91       	ld	r29, X
    29ea:	17 97       	sbiw	r26, 0x07	; 7
    29ec:	3d 83       	std	Y+5, r19	; 0x05
    29ee:	2c 83       	std	Y+4, r18	; 0x04
    29f0:	17 96       	adiw	r26, 0x07	; 7
    29f2:	3c 93       	st	X, r19
    29f4:	2e 93       	st	-X, r18
    29f6:	16 97       	sbiw	r26, 0x06	; 6
    29f8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    29fa:	8a 9f       	mul	r24, r26
    29fc:	d0 01       	movw	r26, r0
    29fe:	11 24       	eor	r1, r1
    2a00:	a3 5a       	subi	r26, 0xA3	; 163
    2a02:	ba 4e       	sbci	r27, 0xEA	; 234
    2a04:	b5 87       	std	Z+13, r27	; 0x0d
    2a06:	a4 87       	std	Z+12, r26	; 0x0c
    2a08:	8c 91       	ld	r24, X
    2a0a:	8f 5f       	subi	r24, 0xFF	; 255
    2a0c:	8c 93       	st	X, r24
    2a0e:	1c c0       	rjmp	.+56     	; 0x2a48 <xTaskRemoveFromEventList+0x13e>
    2a10:	48 e3       	ldi	r20, 0x38	; 56
    2a12:	55 e1       	ldi	r21, 0x15	; 21
    2a14:	da 01       	movw	r26, r20
    2a16:	11 96       	adiw	r26, 0x01	; 1
    2a18:	cd 91       	ld	r28, X+
    2a1a:	dc 91       	ld	r29, X
    2a1c:	12 97       	sbiw	r26, 0x02	; 2
    2a1e:	d3 8b       	std	Z+19, r29	; 0x13
    2a20:	c2 8b       	std	Z+18, r28	; 0x12
    2a22:	8e 81       	ldd	r24, Y+6	; 0x06
    2a24:	9f 81       	ldd	r25, Y+7	; 0x07
    2a26:	95 8b       	std	Z+21, r25	; 0x15
    2a28:	84 8b       	std	Z+20, r24	; 0x14
    2a2a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a2c:	9f 81       	ldd	r25, Y+7	; 0x07
    2a2e:	dc 01       	movw	r26, r24
    2a30:	15 96       	adiw	r26, 0x05	; 5
    2a32:	3c 93       	st	X, r19
    2a34:	2e 93       	st	-X, r18
    2a36:	14 97       	sbiw	r26, 0x04	; 4
    2a38:	3f 83       	std	Y+7, r19	; 0x07
    2a3a:	2e 83       	std	Y+6, r18	; 0x06
    2a3c:	51 8f       	std	Z+25, r21	; 0x19
    2a3e:	40 8f       	std	Z+24, r20	; 0x18
    2a40:	da 01       	movw	r26, r20
    2a42:	8c 91       	ld	r24, X
    2a44:	8f 5f       	subi	r24, 0xFF	; 255
    2a46:	8c 93       	st	X, r24
    2a48:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a4a:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2a4e:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2a52:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a54:	89 17       	cp	r24, r25
    2a56:	20 f4       	brcc	.+8      	; 0x2a60 <xTaskRemoveFromEventList+0x156>
    2a58:	81 e0       	ldi	r24, 0x01	; 1
    2a5a:	80 93 15 15 	sts	0x1515, r24	; 0x801515 <xYieldPending>
    2a5e:	01 c0       	rjmp	.+2      	; 0x2a62 <xTaskRemoveFromEventList+0x158>
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	df 91       	pop	r29
    2a64:	cf 91       	pop	r28
    2a66:	08 95       	ret

00002a68 <vTaskRemoveFromUnorderedEventList>:
    2a68:	cf 93       	push	r28
    2a6a:	df 93       	push	r29
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	70 68       	ori	r23, 0x80	; 128
    2a70:	4d 93       	st	X+, r20
    2a72:	5d 93       	st	X+, r21
    2a74:	6d 93       	st	X+, r22
    2a76:	7c 93       	st	X, r23
    2a78:	13 97       	sbiw	r26, 0x03	; 3
    2a7a:	18 96       	adiw	r26, 0x08	; 8
    2a7c:	ed 91       	ld	r30, X+
    2a7e:	fc 91       	ld	r31, X
    2a80:	19 97       	sbiw	r26, 0x09	; 9
    2a82:	1a 96       	adiw	r26, 0x0a	; 10
    2a84:	4d 91       	ld	r20, X+
    2a86:	5c 91       	ld	r21, X
    2a88:	1b 97       	sbiw	r26, 0x0b	; 11
    2a8a:	14 96       	adiw	r26, 0x04	; 4
    2a8c:	8d 91       	ld	r24, X+
    2a8e:	9c 91       	ld	r25, X
    2a90:	15 97       	sbiw	r26, 0x05	; 5
    2a92:	16 96       	adiw	r26, 0x06	; 6
    2a94:	2d 91       	ld	r18, X+
    2a96:	3c 91       	ld	r19, X
    2a98:	17 97       	sbiw	r26, 0x07	; 7
    2a9a:	ec 01       	movw	r28, r24
    2a9c:	3f 83       	std	Y+7, r19	; 0x07
    2a9e:	2e 83       	std	Y+6, r18	; 0x06
    2aa0:	16 96       	adiw	r26, 0x06	; 6
    2aa2:	8d 91       	ld	r24, X+
    2aa4:	9c 91       	ld	r25, X
    2aa6:	17 97       	sbiw	r26, 0x07	; 7
    2aa8:	14 96       	adiw	r26, 0x04	; 4
    2aaa:	2d 91       	ld	r18, X+
    2aac:	3c 91       	ld	r19, X
    2aae:	15 97       	sbiw	r26, 0x05	; 5
    2ab0:	ec 01       	movw	r28, r24
    2ab2:	3d 83       	std	Y+5, r19	; 0x05
    2ab4:	2c 83       	std	Y+4, r18	; 0x04
    2ab6:	ea 01       	movw	r28, r20
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	9a 81       	ldd	r25, Y+2	; 0x02
    2abc:	a8 17       	cp	r26, r24
    2abe:	b9 07       	cpc	r27, r25
    2ac0:	31 f4       	brne	.+12     	; 0x2ace <vTaskRemoveFromUnorderedEventList+0x66>
    2ac2:	16 96       	adiw	r26, 0x06	; 6
    2ac4:	8d 91       	ld	r24, X+
    2ac6:	9c 91       	ld	r25, X
    2ac8:	17 97       	sbiw	r26, 0x07	; 7
    2aca:	9a 83       	std	Y+2, r25	; 0x02
    2acc:	89 83       	std	Y+1, r24	; 0x01
    2ace:	1b 96       	adiw	r26, 0x0b	; 11
    2ad0:	1c 92       	st	X, r1
    2ad2:	1e 92       	st	-X, r1
    2ad4:	1a 97       	sbiw	r26, 0x0a	; 10
    2ad6:	da 01       	movw	r26, r20
    2ad8:	8c 91       	ld	r24, X
    2ada:	81 50       	subi	r24, 0x01	; 1
    2adc:	8c 93       	st	X, r24
    2ade:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ae0:	b5 85       	ldd	r27, Z+13	; 0x0d
    2ae2:	c6 81       	ldd	r28, Z+6	; 0x06
    2ae4:	d7 81       	ldd	r29, Z+7	; 0x07
    2ae6:	80 85       	ldd	r24, Z+8	; 0x08
    2ae8:	91 85       	ldd	r25, Z+9	; 0x09
    2aea:	9f 83       	std	Y+7, r25	; 0x07
    2aec:	8e 83       	std	Y+6, r24	; 0x06
    2aee:	c0 85       	ldd	r28, Z+8	; 0x08
    2af0:	d1 85       	ldd	r29, Z+9	; 0x09
    2af2:	86 81       	ldd	r24, Z+6	; 0x06
    2af4:	97 81       	ldd	r25, Z+7	; 0x07
    2af6:	9d 83       	std	Y+5, r25	; 0x05
    2af8:	8c 83       	std	Y+4, r24	; 0x04
    2afa:	11 96       	adiw	r26, 0x01	; 1
    2afc:	8d 91       	ld	r24, X+
    2afe:	9c 91       	ld	r25, X
    2b00:	12 97       	sbiw	r26, 0x02	; 2
    2b02:	9f 01       	movw	r18, r30
    2b04:	2e 5f       	subi	r18, 0xFE	; 254
    2b06:	3f 4f       	sbci	r19, 0xFF	; 255
    2b08:	82 17       	cp	r24, r18
    2b0a:	93 07       	cpc	r25, r19
    2b0c:	31 f4       	brne	.+12     	; 0x2b1a <vTaskRemoveFromUnorderedEventList+0xb2>
    2b0e:	80 85       	ldd	r24, Z+8	; 0x08
    2b10:	91 85       	ldd	r25, Z+9	; 0x09
    2b12:	12 96       	adiw	r26, 0x02	; 2
    2b14:	9c 93       	st	X, r25
    2b16:	8e 93       	st	-X, r24
    2b18:	11 97       	sbiw	r26, 0x01	; 1
    2b1a:	15 86       	std	Z+13, r1	; 0x0d
    2b1c:	14 86       	std	Z+12, r1	; 0x0c
    2b1e:	8c 91       	ld	r24, X
    2b20:	81 50       	subi	r24, 0x01	; 1
    2b22:	8c 93       	st	X, r24
    2b24:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2b26:	80 91 1b 15 	lds	r24, 0x151B	; 0x80151b <uxTopReadyPriority>
    2b2a:	8a 17       	cp	r24, r26
    2b2c:	10 f4       	brcc	.+4      	; 0x2b32 <vTaskRemoveFromUnorderedEventList+0xca>
    2b2e:	a0 93 1b 15 	sts	0x151B, r26	; 0x80151b <uxTopReadyPriority>
    2b32:	8b e0       	ldi	r24, 0x0B	; 11
    2b34:	8a 9f       	mul	r24, r26
    2b36:	d0 01       	movw	r26, r0
    2b38:	11 24       	eor	r1, r1
    2b3a:	a3 5a       	subi	r26, 0xA3	; 163
    2b3c:	ba 4e       	sbci	r27, 0xEA	; 234
    2b3e:	11 96       	adiw	r26, 0x01	; 1
    2b40:	0d 90       	ld	r0, X+
    2b42:	bc 91       	ld	r27, X
    2b44:	a0 2d       	mov	r26, r0
    2b46:	b7 83       	std	Z+7, r27	; 0x07
    2b48:	a6 83       	std	Z+6, r26	; 0x06
    2b4a:	16 96       	adiw	r26, 0x06	; 6
    2b4c:	4d 91       	ld	r20, X+
    2b4e:	5c 91       	ld	r21, X
    2b50:	17 97       	sbiw	r26, 0x07	; 7
    2b52:	51 87       	std	Z+9, r21	; 0x09
    2b54:	40 87       	std	Z+8, r20	; 0x08
    2b56:	16 96       	adiw	r26, 0x06	; 6
    2b58:	cd 91       	ld	r28, X+
    2b5a:	dc 91       	ld	r29, X
    2b5c:	17 97       	sbiw	r26, 0x07	; 7
    2b5e:	3d 83       	std	Y+5, r19	; 0x05
    2b60:	2c 83       	std	Y+4, r18	; 0x04
    2b62:	17 96       	adiw	r26, 0x07	; 7
    2b64:	3c 93       	st	X, r19
    2b66:	2e 93       	st	-X, r18
    2b68:	16 97       	sbiw	r26, 0x06	; 6
    2b6a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2b6c:	8a 9f       	mul	r24, r26
    2b6e:	d0 01       	movw	r26, r0
    2b70:	11 24       	eor	r1, r1
    2b72:	a3 5a       	subi	r26, 0xA3	; 163
    2b74:	ba 4e       	sbci	r27, 0xEA	; 234
    2b76:	b5 87       	std	Z+13, r27	; 0x0d
    2b78:	a4 87       	std	Z+12, r26	; 0x0c
    2b7a:	8c 91       	ld	r24, X
    2b7c:	8f 5f       	subi	r24, 0xFF	; 255
    2b7e:	8c 93       	st	X, r24
    2b80:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b82:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2b86:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2b8a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b8c:	89 17       	cp	r24, r25
    2b8e:	18 f4       	brcc	.+6      	; 0x2b96 <vTaskRemoveFromUnorderedEventList+0x12e>
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	80 93 15 15 	sts	0x1515, r24	; 0x801515 <xYieldPending>
    2b96:	df 91       	pop	r29
    2b98:	cf 91       	pop	r28
    2b9a:	08 95       	ret

00002b9c <vTaskSetTimeOutState>:
    2b9c:	0f b6       	in	r0, 0x3f	; 63
    2b9e:	f8 94       	cli
    2ba0:	0f 92       	push	r0
    2ba2:	20 91 14 15 	lds	r18, 0x1514	; 0x801514 <xNumOfOverflows>
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	20 83       	st	Z, r18
    2baa:	40 91 1c 15 	lds	r20, 0x151C	; 0x80151c <xTickCount>
    2bae:	50 91 1d 15 	lds	r21, 0x151D	; 0x80151d <xTickCount+0x1>
    2bb2:	60 91 1e 15 	lds	r22, 0x151E	; 0x80151e <xTickCount+0x2>
    2bb6:	70 91 1f 15 	lds	r23, 0x151F	; 0x80151f <xTickCount+0x3>
    2bba:	41 83       	std	Z+1, r20	; 0x01
    2bbc:	52 83       	std	Z+2, r21	; 0x02
    2bbe:	63 83       	std	Z+3, r22	; 0x03
    2bc0:	74 83       	std	Z+4, r23	; 0x04
    2bc2:	0f 90       	pop	r0
    2bc4:	0f be       	out	0x3f, r0	; 63
    2bc6:	08 95       	ret

00002bc8 <vTaskInternalSetTimeOutState>:
    2bc8:	20 91 14 15 	lds	r18, 0x1514	; 0x801514 <xNumOfOverflows>
    2bcc:	fc 01       	movw	r30, r24
    2bce:	20 83       	st	Z, r18
    2bd0:	40 91 1c 15 	lds	r20, 0x151C	; 0x80151c <xTickCount>
    2bd4:	50 91 1d 15 	lds	r21, 0x151D	; 0x80151d <xTickCount+0x1>
    2bd8:	60 91 1e 15 	lds	r22, 0x151E	; 0x80151e <xTickCount+0x2>
    2bdc:	70 91 1f 15 	lds	r23, 0x151F	; 0x80151f <xTickCount+0x3>
    2be0:	41 83       	std	Z+1, r20	; 0x01
    2be2:	52 83       	std	Z+2, r21	; 0x02
    2be4:	63 83       	std	Z+3, r22	; 0x03
    2be6:	74 83       	std	Z+4, r23	; 0x04
    2be8:	08 95       	ret

00002bea <xTaskCheckForTimeOut>:
    2bea:	8f 92       	push	r8
    2bec:	9f 92       	push	r9
    2bee:	af 92       	push	r10
    2bf0:	bf 92       	push	r11
    2bf2:	cf 92       	push	r12
    2bf4:	df 92       	push	r13
    2bf6:	ef 92       	push	r14
    2bf8:	ff 92       	push	r15
    2bfa:	0f 93       	push	r16
    2bfc:	1f 93       	push	r17
    2bfe:	cf 93       	push	r28
    2c00:	df 93       	push	r29
    2c02:	fb 01       	movw	r30, r22
    2c04:	0f b6       	in	r0, 0x3f	; 63
    2c06:	f8 94       	cli
    2c08:	0f 92       	push	r0
    2c0a:	c0 90 1c 15 	lds	r12, 0x151C	; 0x80151c <xTickCount>
    2c0e:	d0 90 1d 15 	lds	r13, 0x151D	; 0x80151d <xTickCount+0x1>
    2c12:	e0 90 1e 15 	lds	r14, 0x151E	; 0x80151e <xTickCount+0x2>
    2c16:	f0 90 1f 15 	lds	r15, 0x151F	; 0x80151f <xTickCount+0x3>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	11 96       	adiw	r26, 0x01	; 1
    2c1e:	0d 91       	ld	r16, X+
    2c20:	1d 91       	ld	r17, X+
    2c22:	2d 91       	ld	r18, X+
    2c24:	3c 91       	ld	r19, X
    2c26:	14 97       	sbiw	r26, 0x04	; 4
    2c28:	46 01       	movw	r8, r12
    2c2a:	57 01       	movw	r10, r14
    2c2c:	80 1a       	sub	r8, r16
    2c2e:	91 0a       	sbc	r9, r17
    2c30:	a2 0a       	sbc	r10, r18
    2c32:	b3 0a       	sbc	r11, r19
    2c34:	40 81       	ld	r20, Z
    2c36:	51 81       	ldd	r21, Z+1	; 0x01
    2c38:	62 81       	ldd	r22, Z+2	; 0x02
    2c3a:	73 81       	ldd	r23, Z+3	; 0x03
    2c3c:	4f 3f       	cpi	r20, 0xFF	; 255
    2c3e:	bf ef       	ldi	r27, 0xFF	; 255
    2c40:	5b 07       	cpc	r21, r27
    2c42:	6b 07       	cpc	r22, r27
    2c44:	7b 07       	cpc	r23, r27
    2c46:	39 f1       	breq	.+78     	; 0x2c96 <xTaskCheckForTimeOut+0xac>
    2c48:	ec 01       	movw	r28, r24
    2c4a:	b8 81       	ld	r27, Y
    2c4c:	a0 91 14 15 	lds	r26, 0x1514	; 0x801514 <xNumOfOverflows>
    2c50:	ba 17       	cp	r27, r26
    2c52:	59 f0       	breq	.+22     	; 0x2c6a <xTaskCheckForTimeOut+0x80>
    2c54:	c0 16       	cp	r12, r16
    2c56:	d1 06       	cpc	r13, r17
    2c58:	e2 06       	cpc	r14, r18
    2c5a:	f3 06       	cpc	r15, r19
    2c5c:	30 f0       	brcs	.+12     	; 0x2c6a <xTaskCheckForTimeOut+0x80>
    2c5e:	10 82       	st	Z, r1
    2c60:	11 82       	std	Z+1, r1	; 0x01
    2c62:	12 82       	std	Z+2, r1	; 0x02
    2c64:	13 82       	std	Z+3, r1	; 0x03
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	17 c0       	rjmp	.+46     	; 0x2c98 <xTaskCheckForTimeOut+0xae>
    2c6a:	84 16       	cp	r8, r20
    2c6c:	95 06       	cpc	r9, r21
    2c6e:	a6 06       	cpc	r10, r22
    2c70:	b7 06       	cpc	r11, r23
    2c72:	58 f4       	brcc	.+22     	; 0x2c8a <xTaskCheckForTimeOut+0xa0>
    2c74:	48 19       	sub	r20, r8
    2c76:	59 09       	sbc	r21, r9
    2c78:	6a 09       	sbc	r22, r10
    2c7a:	7b 09       	sbc	r23, r11
    2c7c:	40 83       	st	Z, r20
    2c7e:	51 83       	std	Z+1, r21	; 0x01
    2c80:	62 83       	std	Z+2, r22	; 0x02
    2c82:	73 83       	std	Z+3, r23	; 0x03
    2c84:	a1 df       	rcall	.-190    	; 0x2bc8 <vTaskInternalSetTimeOutState>
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	07 c0       	rjmp	.+14     	; 0x2c98 <xTaskCheckForTimeOut+0xae>
    2c8a:	10 82       	st	Z, r1
    2c8c:	11 82       	std	Z+1, r1	; 0x01
    2c8e:	12 82       	std	Z+2, r1	; 0x02
    2c90:	13 82       	std	Z+3, r1	; 0x03
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	01 c0       	rjmp	.+2      	; 0x2c98 <xTaskCheckForTimeOut+0xae>
    2c96:	80 e0       	ldi	r24, 0x00	; 0
    2c98:	0f 90       	pop	r0
    2c9a:	0f be       	out	0x3f, r0	; 63
    2c9c:	df 91       	pop	r29
    2c9e:	cf 91       	pop	r28
    2ca0:	1f 91       	pop	r17
    2ca2:	0f 91       	pop	r16
    2ca4:	ff 90       	pop	r15
    2ca6:	ef 90       	pop	r14
    2ca8:	df 90       	pop	r13
    2caa:	cf 90       	pop	r12
    2cac:	bf 90       	pop	r11
    2cae:	af 90       	pop	r10
    2cb0:	9f 90       	pop	r9
    2cb2:	8f 90       	pop	r8
    2cb4:	08 95       	ret

00002cb6 <vTaskMissedYield>:
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	80 93 15 15 	sts	0x1515, r24	; 0x801515 <xYieldPending>
    2cbc:	08 95       	ret

00002cbe <xTaskGetCurrentTaskHandle>:
    2cbe:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2cc2:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2cc6:	08 95       	ret

00002cc8 <xTaskGetSchedulerState>:
    2cc8:	80 91 1a 15 	lds	r24, 0x151A	; 0x80151a <xSchedulerRunning>
    2ccc:	88 23       	and	r24, r24
    2cce:	31 f0       	breq	.+12     	; 0x2cdc <xTaskGetSchedulerState+0x14>
    2cd0:	80 91 0c 15 	lds	r24, 0x150C	; 0x80150c <uxSchedulerSuspended>
    2cd4:	81 11       	cpse	r24, r1
    2cd6:	04 c0       	rjmp	.+8      	; 0x2ce0 <xTaskGetSchedulerState+0x18>
    2cd8:	82 e0       	ldi	r24, 0x02	; 2
    2cda:	08 95       	ret
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	08 95       	ret
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	08 95       	ret

00002ce4 <xTaskPriorityInherit>:
    2ce4:	0f 93       	push	r16
    2ce6:	1f 93       	push	r17
    2ce8:	cf 93       	push	r28
    2cea:	df 93       	push	r29
    2cec:	fc 01       	movw	r30, r24
    2cee:	89 2b       	or	r24, r25
    2cf0:	09 f4       	brne	.+2      	; 0x2cf4 <xTaskPriorityInherit+0x10>
    2cf2:	77 c0       	rjmp	.+238    	; 0x2de2 <xTaskPriorityInherit+0xfe>
    2cf4:	82 8d       	ldd	r24, Z+26	; 0x1a
    2cf6:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2cfa:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2cfe:	5a 96       	adiw	r26, 0x1a	; 26
    2d00:	9c 91       	ld	r25, X
    2d02:	89 17       	cp	r24, r25
    2d04:	08 f0       	brcs	.+2      	; 0x2d08 <xTaskPriorityInherit+0x24>
    2d06:	63 c0       	rjmp	.+198    	; 0x2dce <xTaskPriorityInherit+0xea>
    2d08:	46 85       	ldd	r20, Z+14	; 0x0e
    2d0a:	57 85       	ldd	r21, Z+15	; 0x0f
    2d0c:	60 89       	ldd	r22, Z+16	; 0x10
    2d0e:	71 89       	ldd	r23, Z+17	; 0x11
    2d10:	77 23       	and	r23, r23
    2d12:	94 f0       	brlt	.+36     	; 0x2d38 <xTaskPriorityInherit+0x54>
    2d14:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2d18:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2d1c:	5a 96       	adiw	r26, 0x1a	; 26
    2d1e:	9c 91       	ld	r25, X
    2d20:	4a e0       	ldi	r20, 0x0A	; 10
    2d22:	50 e0       	ldi	r21, 0x00	; 0
    2d24:	60 e0       	ldi	r22, 0x00	; 0
    2d26:	70 e0       	ldi	r23, 0x00	; 0
    2d28:	49 1b       	sub	r20, r25
    2d2a:	51 09       	sbc	r21, r1
    2d2c:	61 09       	sbc	r22, r1
    2d2e:	71 09       	sbc	r23, r1
    2d30:	46 87       	std	Z+14, r20	; 0x0e
    2d32:	57 87       	std	Z+15, r21	; 0x0f
    2d34:	60 8b       	std	Z+16, r22	; 0x10
    2d36:	71 8b       	std	Z+17, r23	; 0x11
    2d38:	24 85       	ldd	r18, Z+12	; 0x0c
    2d3a:	35 85       	ldd	r19, Z+13	; 0x0d
    2d3c:	4b e0       	ldi	r20, 0x0B	; 11
    2d3e:	84 9f       	mul	r24, r20
    2d40:	c0 01       	movw	r24, r0
    2d42:	11 24       	eor	r1, r1
    2d44:	83 5a       	subi	r24, 0xA3	; 163
    2d46:	9a 4e       	sbci	r25, 0xEA	; 234
    2d48:	28 17       	cp	r18, r24
    2d4a:	39 07       	cpc	r19, r25
    2d4c:	b9 f5       	brne	.+110    	; 0x2dbc <xTaskPriorityInherit+0xd8>
    2d4e:	ef 01       	movw	r28, r30
    2d50:	8f 01       	movw	r16, r30
    2d52:	0e 5f       	subi	r16, 0xFE	; 254
    2d54:	1f 4f       	sbci	r17, 0xFF	; 255
    2d56:	c8 01       	movw	r24, r16
    2d58:	0e 94 39 06 	call	0xc72	; 0xc72 <uxListRemove>
    2d5c:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2d60:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2d64:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2d66:	ea 8f       	std	Y+26, r30	; 0x1a
    2d68:	80 91 1b 15 	lds	r24, 0x151B	; 0x80151b <uxTopReadyPriority>
    2d6c:	8e 17       	cp	r24, r30
    2d6e:	10 f4       	brcc	.+4      	; 0x2d74 <xTaskPriorityInherit+0x90>
    2d70:	e0 93 1b 15 	sts	0x151B, r30	; 0x80151b <uxTopReadyPriority>
    2d74:	8b e0       	ldi	r24, 0x0B	; 11
    2d76:	8e 9f       	mul	r24, r30
    2d78:	f0 01       	movw	r30, r0
    2d7a:	11 24       	eor	r1, r1
    2d7c:	e3 5a       	subi	r30, 0xA3	; 163
    2d7e:	fa 4e       	sbci	r31, 0xEA	; 234
    2d80:	01 80       	ldd	r0, Z+1	; 0x01
    2d82:	f2 81       	ldd	r31, Z+2	; 0x02
    2d84:	e0 2d       	mov	r30, r0
    2d86:	ff 83       	std	Y+7, r31	; 0x07
    2d88:	ee 83       	std	Y+6, r30	; 0x06
    2d8a:	26 81       	ldd	r18, Z+6	; 0x06
    2d8c:	37 81       	ldd	r19, Z+7	; 0x07
    2d8e:	39 87       	std	Y+9, r19	; 0x09
    2d90:	28 87       	std	Y+8, r18	; 0x08
    2d92:	a6 81       	ldd	r26, Z+6	; 0x06
    2d94:	b7 81       	ldd	r27, Z+7	; 0x07
    2d96:	15 96       	adiw	r26, 0x05	; 5
    2d98:	1c 93       	st	X, r17
    2d9a:	0e 93       	st	-X, r16
    2d9c:	14 97       	sbiw	r26, 0x04	; 4
    2d9e:	17 83       	std	Z+7, r17	; 0x07
    2da0:	06 83       	std	Z+6, r16	; 0x06
    2da2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2da4:	8e 9f       	mul	r24, r30
    2da6:	f0 01       	movw	r30, r0
    2da8:	11 24       	eor	r1, r1
    2daa:	e3 5a       	subi	r30, 0xA3	; 163
    2dac:	fa 4e       	sbci	r31, 0xEA	; 234
    2dae:	fd 87       	std	Y+13, r31	; 0x0d
    2db0:	ec 87       	std	Y+12, r30	; 0x0c
    2db2:	80 81       	ld	r24, Z
    2db4:	8f 5f       	subi	r24, 0xFF	; 255
    2db6:	80 83       	st	Z, r24
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	16 c0       	rjmp	.+44     	; 0x2de8 <xTaskPriorityInherit+0x104>
    2dbc:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2dc0:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2dc4:	5a 96       	adiw	r26, 0x1a	; 26
    2dc6:	8c 91       	ld	r24, X
    2dc8:	82 8f       	std	Z+26, r24	; 0x1a
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	0d c0       	rjmp	.+26     	; 0x2de8 <xTaskPriorityInherit+0x104>
    2dce:	95 a5       	ldd	r25, Z+45	; 0x2d
    2dd0:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2dd4:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2dd8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2dda:	98 17       	cp	r25, r24
    2ddc:	20 f0       	brcs	.+8      	; 0x2de6 <xTaskPriorityInherit+0x102>
    2dde:	80 e0       	ldi	r24, 0x00	; 0
    2de0:	03 c0       	rjmp	.+6      	; 0x2de8 <xTaskPriorityInherit+0x104>
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	01 c0       	rjmp	.+2      	; 0x2de8 <xTaskPriorityInherit+0x104>
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	df 91       	pop	r29
    2dea:	cf 91       	pop	r28
    2dec:	1f 91       	pop	r17
    2dee:	0f 91       	pop	r16
    2df0:	08 95       	ret

00002df2 <xTaskPriorityDisinherit>:
    2df2:	0f 93       	push	r16
    2df4:	1f 93       	push	r17
    2df6:	cf 93       	push	r28
    2df8:	df 93       	push	r29
    2dfa:	fc 01       	movw	r30, r24
    2dfc:	89 2b       	or	r24, r25
    2dfe:	09 f4       	brne	.+2      	; 0x2e02 <xTaskPriorityDisinherit+0x10>
    2e00:	49 c0       	rjmp	.+146    	; 0x2e94 <xTaskPriorityDisinherit+0xa2>
    2e02:	86 a5       	ldd	r24, Z+46	; 0x2e
    2e04:	81 50       	subi	r24, 0x01	; 1
    2e06:	86 a7       	std	Z+46, r24	; 0x2e
    2e08:	22 8d       	ldd	r18, Z+26	; 0x1a
    2e0a:	95 a5       	ldd	r25, Z+45	; 0x2d
    2e0c:	29 17       	cp	r18, r25
    2e0e:	09 f4       	brne	.+2      	; 0x2e12 <xTaskPriorityDisinherit+0x20>
    2e10:	43 c0       	rjmp	.+134    	; 0x2e98 <xTaskPriorityDisinherit+0xa6>
    2e12:	81 11       	cpse	r24, r1
    2e14:	43 c0       	rjmp	.+134    	; 0x2e9c <xTaskPriorityDisinherit+0xaa>
    2e16:	ef 01       	movw	r28, r30
    2e18:	8f 01       	movw	r16, r30
    2e1a:	0e 5f       	subi	r16, 0xFE	; 254
    2e1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e1e:	c8 01       	movw	r24, r16
    2e20:	0e 94 39 06 	call	0xc72	; 0xc72 <uxListRemove>
    2e24:	ed a5       	ldd	r30, Y+45	; 0x2d
    2e26:	ea 8f       	std	Y+26, r30	; 0x1a
    2e28:	8a e0       	ldi	r24, 0x0A	; 10
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	a0 e0       	ldi	r26, 0x00	; 0
    2e2e:	b0 e0       	ldi	r27, 0x00	; 0
    2e30:	8e 1b       	sub	r24, r30
    2e32:	91 09       	sbc	r25, r1
    2e34:	a1 09       	sbc	r26, r1
    2e36:	b1 09       	sbc	r27, r1
    2e38:	8e 87       	std	Y+14, r24	; 0x0e
    2e3a:	9f 87       	std	Y+15, r25	; 0x0f
    2e3c:	a8 8b       	std	Y+16, r26	; 0x10
    2e3e:	b9 8b       	std	Y+17, r27	; 0x11
    2e40:	80 91 1b 15 	lds	r24, 0x151B	; 0x80151b <uxTopReadyPriority>
    2e44:	8e 17       	cp	r24, r30
    2e46:	10 f4       	brcc	.+4      	; 0x2e4c <xTaskPriorityDisinherit+0x5a>
    2e48:	e0 93 1b 15 	sts	0x151B, r30	; 0x80151b <uxTopReadyPriority>
    2e4c:	8b e0       	ldi	r24, 0x0B	; 11
    2e4e:	8e 9f       	mul	r24, r30
    2e50:	f0 01       	movw	r30, r0
    2e52:	11 24       	eor	r1, r1
    2e54:	e3 5a       	subi	r30, 0xA3	; 163
    2e56:	fa 4e       	sbci	r31, 0xEA	; 234
    2e58:	01 80       	ldd	r0, Z+1	; 0x01
    2e5a:	f2 81       	ldd	r31, Z+2	; 0x02
    2e5c:	e0 2d       	mov	r30, r0
    2e5e:	ff 83       	std	Y+7, r31	; 0x07
    2e60:	ee 83       	std	Y+6, r30	; 0x06
    2e62:	26 81       	ldd	r18, Z+6	; 0x06
    2e64:	37 81       	ldd	r19, Z+7	; 0x07
    2e66:	39 87       	std	Y+9, r19	; 0x09
    2e68:	28 87       	std	Y+8, r18	; 0x08
    2e6a:	a6 81       	ldd	r26, Z+6	; 0x06
    2e6c:	b7 81       	ldd	r27, Z+7	; 0x07
    2e6e:	15 96       	adiw	r26, 0x05	; 5
    2e70:	1c 93       	st	X, r17
    2e72:	0e 93       	st	-X, r16
    2e74:	14 97       	sbiw	r26, 0x04	; 4
    2e76:	17 83       	std	Z+7, r17	; 0x07
    2e78:	06 83       	std	Z+6, r16	; 0x06
    2e7a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2e7c:	8e 9f       	mul	r24, r30
    2e7e:	f0 01       	movw	r30, r0
    2e80:	11 24       	eor	r1, r1
    2e82:	e3 5a       	subi	r30, 0xA3	; 163
    2e84:	fa 4e       	sbci	r31, 0xEA	; 234
    2e86:	fd 87       	std	Y+13, r31	; 0x0d
    2e88:	ec 87       	std	Y+12, r30	; 0x0c
    2e8a:	80 81       	ld	r24, Z
    2e8c:	8f 5f       	subi	r24, 0xFF	; 255
    2e8e:	80 83       	st	Z, r24
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	05 c0       	rjmp	.+10     	; 0x2e9e <xTaskPriorityDisinherit+0xac>
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	03 c0       	rjmp	.+6      	; 0x2e9e <xTaskPriorityDisinherit+0xac>
    2e98:	80 e0       	ldi	r24, 0x00	; 0
    2e9a:	01 c0       	rjmp	.+2      	; 0x2e9e <xTaskPriorityDisinherit+0xac>
    2e9c:	80 e0       	ldi	r24, 0x00	; 0
    2e9e:	df 91       	pop	r29
    2ea0:	cf 91       	pop	r28
    2ea2:	1f 91       	pop	r17
    2ea4:	0f 91       	pop	r16
    2ea6:	08 95       	ret

00002ea8 <vTaskPriorityDisinheritAfterTimeout>:
    2ea8:	0f 93       	push	r16
    2eaa:	1f 93       	push	r17
    2eac:	cf 93       	push	r28
    2eae:	df 93       	push	r29
    2eb0:	fc 01       	movw	r30, r24
    2eb2:	89 2b       	or	r24, r25
    2eb4:	09 f4       	brne	.+2      	; 0x2eb8 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2eb6:	5a c0       	rjmp	.+180    	; 0x2f6c <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2eb8:	85 a5       	ldd	r24, Z+45	; 0x2d
    2eba:	86 17       	cp	r24, r22
    2ebc:	08 f4       	brcc	.+2      	; 0x2ec0 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2ebe:	86 2f       	mov	r24, r22
    2ec0:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ec2:	89 17       	cp	r24, r25
    2ec4:	09 f4       	brne	.+2      	; 0x2ec8 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2ec6:	52 c0       	rjmp	.+164    	; 0x2f6c <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2ec8:	26 a5       	ldd	r18, Z+46	; 0x2e
    2eca:	21 30       	cpi	r18, 0x01	; 1
    2ecc:	09 f0       	breq	.+2      	; 0x2ed0 <vTaskPriorityDisinheritAfterTimeout+0x28>
    2ece:	4e c0       	rjmp	.+156    	; 0x2f6c <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2ed0:	82 8f       	std	Z+26, r24	; 0x1a
    2ed2:	46 85       	ldd	r20, Z+14	; 0x0e
    2ed4:	57 85       	ldd	r21, Z+15	; 0x0f
    2ed6:	60 89       	ldd	r22, Z+16	; 0x10
    2ed8:	71 89       	ldd	r23, Z+17	; 0x11
    2eda:	77 23       	and	r23, r23
    2edc:	64 f0       	brlt	.+24     	; 0x2ef6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2ede:	4a e0       	ldi	r20, 0x0A	; 10
    2ee0:	50 e0       	ldi	r21, 0x00	; 0
    2ee2:	60 e0       	ldi	r22, 0x00	; 0
    2ee4:	70 e0       	ldi	r23, 0x00	; 0
    2ee6:	48 1b       	sub	r20, r24
    2ee8:	51 09       	sbc	r21, r1
    2eea:	61 09       	sbc	r22, r1
    2eec:	71 09       	sbc	r23, r1
    2eee:	46 87       	std	Z+14, r20	; 0x0e
    2ef0:	57 87       	std	Z+15, r21	; 0x0f
    2ef2:	60 8b       	std	Z+16, r22	; 0x10
    2ef4:	71 8b       	std	Z+17, r23	; 0x11
    2ef6:	24 85       	ldd	r18, Z+12	; 0x0c
    2ef8:	35 85       	ldd	r19, Z+13	; 0x0d
    2efa:	4b e0       	ldi	r20, 0x0B	; 11
    2efc:	94 9f       	mul	r25, r20
    2efe:	c0 01       	movw	r24, r0
    2f00:	11 24       	eor	r1, r1
    2f02:	83 5a       	subi	r24, 0xA3	; 163
    2f04:	9a 4e       	sbci	r25, 0xEA	; 234
    2f06:	28 17       	cp	r18, r24
    2f08:	39 07       	cpc	r19, r25
    2f0a:	81 f5       	brne	.+96     	; 0x2f6c <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2f0c:	ef 01       	movw	r28, r30
    2f0e:	8f 01       	movw	r16, r30
    2f10:	0e 5f       	subi	r16, 0xFE	; 254
    2f12:	1f 4f       	sbci	r17, 0xFF	; 255
    2f14:	c8 01       	movw	r24, r16
    2f16:	0e 94 39 06 	call	0xc72	; 0xc72 <uxListRemove>
    2f1a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2f1c:	80 91 1b 15 	lds	r24, 0x151B	; 0x80151b <uxTopReadyPriority>
    2f20:	8e 17       	cp	r24, r30
    2f22:	10 f4       	brcc	.+4      	; 0x2f28 <vTaskPriorityDisinheritAfterTimeout+0x80>
    2f24:	e0 93 1b 15 	sts	0x151B, r30	; 0x80151b <uxTopReadyPriority>
    2f28:	8b e0       	ldi	r24, 0x0B	; 11
    2f2a:	8e 9f       	mul	r24, r30
    2f2c:	f0 01       	movw	r30, r0
    2f2e:	11 24       	eor	r1, r1
    2f30:	e3 5a       	subi	r30, 0xA3	; 163
    2f32:	fa 4e       	sbci	r31, 0xEA	; 234
    2f34:	01 80       	ldd	r0, Z+1	; 0x01
    2f36:	f2 81       	ldd	r31, Z+2	; 0x02
    2f38:	e0 2d       	mov	r30, r0
    2f3a:	ff 83       	std	Y+7, r31	; 0x07
    2f3c:	ee 83       	std	Y+6, r30	; 0x06
    2f3e:	26 81       	ldd	r18, Z+6	; 0x06
    2f40:	37 81       	ldd	r19, Z+7	; 0x07
    2f42:	39 87       	std	Y+9, r19	; 0x09
    2f44:	28 87       	std	Y+8, r18	; 0x08
    2f46:	a6 81       	ldd	r26, Z+6	; 0x06
    2f48:	b7 81       	ldd	r27, Z+7	; 0x07
    2f4a:	15 96       	adiw	r26, 0x05	; 5
    2f4c:	1c 93       	st	X, r17
    2f4e:	0e 93       	st	-X, r16
    2f50:	14 97       	sbiw	r26, 0x04	; 4
    2f52:	17 83       	std	Z+7, r17	; 0x07
    2f54:	06 83       	std	Z+6, r16	; 0x06
    2f56:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2f58:	8e 9f       	mul	r24, r30
    2f5a:	f0 01       	movw	r30, r0
    2f5c:	11 24       	eor	r1, r1
    2f5e:	e3 5a       	subi	r30, 0xA3	; 163
    2f60:	fa 4e       	sbci	r31, 0xEA	; 234
    2f62:	fd 87       	std	Y+13, r31	; 0x0d
    2f64:	ec 87       	std	Y+12, r30	; 0x0c
    2f66:	80 81       	ld	r24, Z
    2f68:	8f 5f       	subi	r24, 0xFF	; 255
    2f6a:	80 83       	st	Z, r24
    2f6c:	df 91       	pop	r29
    2f6e:	cf 91       	pop	r28
    2f70:	1f 91       	pop	r17
    2f72:	0f 91       	pop	r16
    2f74:	08 95       	ret

00002f76 <uxTaskResetEventItemValue>:
    2f76:	cf 92       	push	r12
    2f78:	df 92       	push	r13
    2f7a:	ef 92       	push	r14
    2f7c:	ff 92       	push	r15
    2f7e:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2f82:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2f86:	66 85       	ldd	r22, Z+14	; 0x0e
    2f88:	77 85       	ldd	r23, Z+15	; 0x0f
    2f8a:	80 89       	ldd	r24, Z+16	; 0x10
    2f8c:	91 89       	ldd	r25, Z+17	; 0x11
    2f8e:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2f92:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2f96:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2f9a:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2f9e:	5a 96       	adiw	r26, 0x1a	; 26
    2fa0:	2c 91       	ld	r18, X
    2fa2:	0f 2e       	mov	r0, r31
    2fa4:	fa e0       	ldi	r31, 0x0A	; 10
    2fa6:	cf 2e       	mov	r12, r31
    2fa8:	d1 2c       	mov	r13, r1
    2faa:	e1 2c       	mov	r14, r1
    2fac:	f1 2c       	mov	r15, r1
    2fae:	f0 2d       	mov	r31, r0
    2fb0:	c2 1a       	sub	r12, r18
    2fb2:	d1 08       	sbc	r13, r1
    2fb4:	e1 08       	sbc	r14, r1
    2fb6:	f1 08       	sbc	r15, r1
    2fb8:	c6 86       	std	Z+14, r12	; 0x0e
    2fba:	d7 86       	std	Z+15, r13	; 0x0f
    2fbc:	e0 8a       	std	Z+16, r14	; 0x10
    2fbe:	f1 8a       	std	Z+17, r15	; 0x11
    2fc0:	ff 90       	pop	r15
    2fc2:	ef 90       	pop	r14
    2fc4:	df 90       	pop	r13
    2fc6:	cf 90       	pop	r12
    2fc8:	08 95       	ret

00002fca <pvTaskIncrementMutexHeldCount>:
    2fca:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2fce:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2fd2:	89 2b       	or	r24, r25
    2fd4:	39 f0       	breq	.+14     	; 0x2fe4 <pvTaskIncrementMutexHeldCount+0x1a>
    2fd6:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2fda:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2fde:	86 a5       	ldd	r24, Z+46	; 0x2e
    2fe0:	8f 5f       	subi	r24, 0xFF	; 255
    2fe2:	86 a7       	std	Z+46, r24	; 0x2e
    2fe4:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2fe8:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2fec:	08 95       	ret

00002fee <xTaskGenericNotifyWait>:
    2fee:	4f 92       	push	r4
    2ff0:	5f 92       	push	r5
    2ff2:	6f 92       	push	r6
    2ff4:	7f 92       	push	r7
    2ff6:	af 92       	push	r10
    2ff8:	bf 92       	push	r11
    2ffa:	cf 92       	push	r12
    2ffc:	df 92       	push	r13
    2ffe:	ef 92       	push	r14
    3000:	ff 92       	push	r15
    3002:	0f 93       	push	r16
    3004:	1f 93       	push	r17
    3006:	cf 93       	push	r28
    3008:	df 93       	push	r29
    300a:	28 01       	movw	r4, r16
    300c:	39 01       	movw	r6, r18
    300e:	0f b6       	in	r0, 0x3f	; 63
    3010:	f8 94       	cli
    3012:	0f 92       	push	r0
    3014:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    3018:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    301c:	c8 2f       	mov	r28, r24
    301e:	d0 e0       	ldi	r29, 0x00	; 0
    3020:	ec 0f       	add	r30, r28
    3022:	fd 1f       	adc	r31, r29
    3024:	83 a9       	ldd	r24, Z+51	; 0x33
    3026:	82 30       	cpi	r24, 0x02	; 2
    3028:	79 f1       	breq	.+94     	; 0x3088 <xTaskGenericNotifyWait+0x9a>
    302a:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    302e:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    3032:	ce 01       	movw	r24, r28
    3034:	88 0f       	add	r24, r24
    3036:	99 1f       	adc	r25, r25
    3038:	88 0f       	add	r24, r24
    303a:	99 1f       	adc	r25, r25
    303c:	e8 0f       	add	r30, r24
    303e:	f9 1f       	adc	r31, r25
    3040:	87 a5       	ldd	r24, Z+47	; 0x2f
    3042:	90 a9       	ldd	r25, Z+48	; 0x30
    3044:	a1 a9       	ldd	r26, Z+49	; 0x31
    3046:	b2 a9       	ldd	r27, Z+50	; 0x32
    3048:	40 95       	com	r20
    304a:	50 95       	com	r21
    304c:	60 95       	com	r22
    304e:	70 95       	com	r23
    3050:	48 23       	and	r20, r24
    3052:	59 23       	and	r21, r25
    3054:	6a 23       	and	r22, r26
    3056:	7b 23       	and	r23, r27
    3058:	47 a7       	std	Z+47, r20	; 0x2f
    305a:	50 ab       	std	Z+48, r21	; 0x30
    305c:	61 ab       	std	Z+49, r22	; 0x31
    305e:	72 ab       	std	Z+50, r23	; 0x32
    3060:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    3064:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    3068:	ec 0f       	add	r30, r28
    306a:	fd 1f       	adc	r31, r29
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	83 ab       	std	Z+51, r24	; 0x33
    3070:	a1 14       	cp	r10, r1
    3072:	b1 04       	cpc	r11, r1
    3074:	c1 04       	cpc	r12, r1
    3076:	d1 04       	cpc	r13, r1
    3078:	39 f0       	breq	.+14     	; 0x3088 <xTaskGenericNotifyWait+0x9a>
    307a:	41 e0       	ldi	r20, 0x01	; 1
    307c:	c6 01       	movw	r24, r12
    307e:	b5 01       	movw	r22, r10
    3080:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <prvAddCurrentTaskToDelayedList>
    3084:	0e 94 b5 06 	call	0xd6a	; 0xd6a <vPortYield>
    3088:	0f 90       	pop	r0
    308a:	0f be       	out	0x3f, r0	; 63
    308c:	0f b6       	in	r0, 0x3f	; 63
    308e:	f8 94       	cli
    3090:	0f 92       	push	r0
    3092:	e1 14       	cp	r14, r1
    3094:	f1 04       	cpc	r15, r1
    3096:	a1 f0       	breq	.+40     	; 0x30c0 <xTaskGenericNotifyWait+0xd2>
    3098:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    309c:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    30a0:	ce 01       	movw	r24, r28
    30a2:	88 0f       	add	r24, r24
    30a4:	99 1f       	adc	r25, r25
    30a6:	88 0f       	add	r24, r24
    30a8:	99 1f       	adc	r25, r25
    30aa:	e8 0f       	add	r30, r24
    30ac:	f9 1f       	adc	r31, r25
    30ae:	87 a5       	ldd	r24, Z+47	; 0x2f
    30b0:	90 a9       	ldd	r25, Z+48	; 0x30
    30b2:	a1 a9       	ldd	r26, Z+49	; 0x31
    30b4:	b2 a9       	ldd	r27, Z+50	; 0x32
    30b6:	f7 01       	movw	r30, r14
    30b8:	80 83       	st	Z, r24
    30ba:	91 83       	std	Z+1, r25	; 0x01
    30bc:	a2 83       	std	Z+2, r26	; 0x02
    30be:	b3 83       	std	Z+3, r27	; 0x03
    30c0:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    30c4:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    30c8:	ec 0f       	add	r30, r28
    30ca:	fd 1f       	adc	r31, r29
    30cc:	83 a9       	ldd	r24, Z+51	; 0x33
    30ce:	82 30       	cpi	r24, 0x02	; 2
    30d0:	e9 f4       	brne	.+58     	; 0x310c <xTaskGenericNotifyWait+0x11e>
    30d2:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    30d6:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    30da:	ce 01       	movw	r24, r28
    30dc:	88 0f       	add	r24, r24
    30de:	99 1f       	adc	r25, r25
    30e0:	88 0f       	add	r24, r24
    30e2:	99 1f       	adc	r25, r25
    30e4:	e8 0f       	add	r30, r24
    30e6:	f9 1f       	adc	r31, r25
    30e8:	87 a5       	ldd	r24, Z+47	; 0x2f
    30ea:	90 a9       	ldd	r25, Z+48	; 0x30
    30ec:	a1 a9       	ldd	r26, Z+49	; 0x31
    30ee:	b2 a9       	ldd	r27, Z+50	; 0x32
    30f0:	40 94       	com	r4
    30f2:	50 94       	com	r5
    30f4:	60 94       	com	r6
    30f6:	70 94       	com	r7
    30f8:	48 22       	and	r4, r24
    30fa:	59 22       	and	r5, r25
    30fc:	6a 22       	and	r6, r26
    30fe:	7b 22       	and	r7, r27
    3100:	47 a6       	std	Z+47, r4	; 0x2f
    3102:	50 aa       	std	Z+48, r5	; 0x30
    3104:	61 aa       	std	Z+49, r6	; 0x31
    3106:	72 aa       	std	Z+50, r7	; 0x32
    3108:	81 e0       	ldi	r24, 0x01	; 1
    310a:	01 c0       	rjmp	.+2      	; 0x310e <xTaskGenericNotifyWait+0x120>
    310c:	80 e0       	ldi	r24, 0x00	; 0
    310e:	20 91 cb 15 	lds	r18, 0x15CB	; 0x8015cb <pxCurrentTCB>
    3112:	30 91 cc 15 	lds	r19, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    3116:	c2 0f       	add	r28, r18
    3118:	d3 1f       	adc	r29, r19
    311a:	1b aa       	std	Y+51, r1	; 0x33
    311c:	0f 90       	pop	r0
    311e:	0f be       	out	0x3f, r0	; 63
    3120:	df 91       	pop	r29
    3122:	cf 91       	pop	r28
    3124:	1f 91       	pop	r17
    3126:	0f 91       	pop	r16
    3128:	ff 90       	pop	r15
    312a:	ef 90       	pop	r14
    312c:	df 90       	pop	r13
    312e:	cf 90       	pop	r12
    3130:	bf 90       	pop	r11
    3132:	af 90       	pop	r10
    3134:	7f 90       	pop	r7
    3136:	6f 90       	pop	r6
    3138:	5f 90       	pop	r5
    313a:	4f 90       	pop	r4
    313c:	08 95       	ret

0000313e <xTaskGenericNotify>:
    313e:	8f 92       	push	r8
    3140:	9f 92       	push	r9
    3142:	af 92       	push	r10
    3144:	bf 92       	push	r11
    3146:	ef 92       	push	r14
    3148:	ff 92       	push	r15
    314a:	0f 93       	push	r16
    314c:	cf 93       	push	r28
    314e:	df 93       	push	r29
    3150:	dc 01       	movw	r26, r24
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	f8 94       	cli
    3156:	0f 92       	push	r0
    3158:	e1 14       	cp	r14, r1
    315a:	f1 04       	cpc	r15, r1
    315c:	89 f0       	breq	.+34     	; 0x3180 <xTaskGenericNotify+0x42>
    315e:	e6 2f       	mov	r30, r22
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	ee 0f       	add	r30, r30
    3164:	ff 1f       	adc	r31, r31
    3166:	ee 0f       	add	r30, r30
    3168:	ff 1f       	adc	r31, r31
    316a:	e8 0f       	add	r30, r24
    316c:	f9 1f       	adc	r31, r25
    316e:	87 a4       	ldd	r8, Z+47	; 0x2f
    3170:	90 a8       	ldd	r9, Z+48	; 0x30
    3172:	a1 a8       	ldd	r10, Z+49	; 0x31
    3174:	b2 a8       	ldd	r11, Z+50	; 0x32
    3176:	f7 01       	movw	r30, r14
    3178:	80 82       	st	Z, r8
    317a:	91 82       	std	Z+1, r9	; 0x01
    317c:	a2 82       	std	Z+2, r10	; 0x02
    317e:	b3 82       	std	Z+3, r11	; 0x03
    3180:	70 e0       	ldi	r23, 0x00	; 0
    3182:	fd 01       	movw	r30, r26
    3184:	e6 0f       	add	r30, r22
    3186:	f7 1f       	adc	r31, r23
    3188:	83 a9       	ldd	r24, Z+51	; 0x33
    318a:	92 e0       	ldi	r25, 0x02	; 2
    318c:	93 ab       	std	Z+51, r25	; 0x33
    318e:	02 30       	cpi	r16, 0x02	; 2
    3190:	01 f1       	breq	.+64     	; 0x31d2 <xTaskGenericNotify+0x94>
    3192:	18 f4       	brcc	.+6      	; 0x319a <xTaskGenericNotify+0x5c>
    3194:	01 30       	cpi	r16, 0x01	; 1
    3196:	31 f0       	breq	.+12     	; 0x31a4 <xTaskGenericNotify+0x66>
    3198:	4d c0       	rjmp	.+154    	; 0x3234 <xTaskGenericNotify+0xf6>
    319a:	03 30       	cpi	r16, 0x03	; 3
    319c:	79 f1       	breq	.+94     	; 0x31fc <xTaskGenericNotify+0xbe>
    319e:	04 30       	cpi	r16, 0x04	; 4
    31a0:	d1 f1       	breq	.+116    	; 0x3216 <xTaskGenericNotify+0xd8>
    31a2:	48 c0       	rjmp	.+144    	; 0x3234 <xTaskGenericNotify+0xf6>
    31a4:	66 0f       	add	r22, r22
    31a6:	77 1f       	adc	r23, r23
    31a8:	66 0f       	add	r22, r22
    31aa:	77 1f       	adc	r23, r23
    31ac:	fd 01       	movw	r30, r26
    31ae:	e6 0f       	add	r30, r22
    31b0:	f7 1f       	adc	r31, r23
    31b2:	87 a4       	ldd	r8, Z+47	; 0x2f
    31b4:	90 a8       	ldd	r9, Z+48	; 0x30
    31b6:	a1 a8       	ldd	r10, Z+49	; 0x31
    31b8:	b2 a8       	ldd	r11, Z+50	; 0x32
    31ba:	ba 01       	movw	r22, r20
    31bc:	a9 01       	movw	r20, r18
    31be:	48 29       	or	r20, r8
    31c0:	59 29       	or	r21, r9
    31c2:	6a 29       	or	r22, r10
    31c4:	7b 29       	or	r23, r11
    31c6:	47 a7       	std	Z+47, r20	; 0x2f
    31c8:	50 ab       	std	Z+48, r21	; 0x30
    31ca:	61 ab       	std	Z+49, r22	; 0x31
    31cc:	72 ab       	std	Z+50, r23	; 0x32
    31ce:	01 e0       	ldi	r16, 0x01	; 1
    31d0:	34 c0       	rjmp	.+104    	; 0x323a <xTaskGenericNotify+0xfc>
    31d2:	66 0f       	add	r22, r22
    31d4:	77 1f       	adc	r23, r23
    31d6:	66 0f       	add	r22, r22
    31d8:	77 1f       	adc	r23, r23
    31da:	fd 01       	movw	r30, r26
    31dc:	e6 0f       	add	r30, r22
    31de:	f7 1f       	adc	r31, r23
    31e0:	47 a5       	ldd	r20, Z+47	; 0x2f
    31e2:	50 a9       	ldd	r21, Z+48	; 0x30
    31e4:	61 a9       	ldd	r22, Z+49	; 0x31
    31e6:	72 a9       	ldd	r23, Z+50	; 0x32
    31e8:	4f 5f       	subi	r20, 0xFF	; 255
    31ea:	5f 4f       	sbci	r21, 0xFF	; 255
    31ec:	6f 4f       	sbci	r22, 0xFF	; 255
    31ee:	7f 4f       	sbci	r23, 0xFF	; 255
    31f0:	47 a7       	std	Z+47, r20	; 0x2f
    31f2:	50 ab       	std	Z+48, r21	; 0x30
    31f4:	61 ab       	std	Z+49, r22	; 0x31
    31f6:	72 ab       	std	Z+50, r23	; 0x32
    31f8:	01 e0       	ldi	r16, 0x01	; 1
    31fa:	1f c0       	rjmp	.+62     	; 0x323a <xTaskGenericNotify+0xfc>
    31fc:	66 0f       	add	r22, r22
    31fe:	77 1f       	adc	r23, r23
    3200:	66 0f       	add	r22, r22
    3202:	77 1f       	adc	r23, r23
    3204:	fd 01       	movw	r30, r26
    3206:	e6 0f       	add	r30, r22
    3208:	f7 1f       	adc	r31, r23
    320a:	27 a7       	std	Z+47, r18	; 0x2f
    320c:	30 ab       	std	Z+48, r19	; 0x30
    320e:	41 ab       	std	Z+49, r20	; 0x31
    3210:	52 ab       	std	Z+50, r21	; 0x32
    3212:	01 e0       	ldi	r16, 0x01	; 1
    3214:	12 c0       	rjmp	.+36     	; 0x323a <xTaskGenericNotify+0xfc>
    3216:	82 30       	cpi	r24, 0x02	; 2
    3218:	79 f0       	breq	.+30     	; 0x3238 <xTaskGenericNotify+0xfa>
    321a:	66 0f       	add	r22, r22
    321c:	77 1f       	adc	r23, r23
    321e:	66 0f       	add	r22, r22
    3220:	77 1f       	adc	r23, r23
    3222:	fd 01       	movw	r30, r26
    3224:	e6 0f       	add	r30, r22
    3226:	f7 1f       	adc	r31, r23
    3228:	27 a7       	std	Z+47, r18	; 0x2f
    322a:	30 ab       	std	Z+48, r19	; 0x30
    322c:	41 ab       	std	Z+49, r20	; 0x31
    322e:	52 ab       	std	Z+50, r21	; 0x32
    3230:	01 e0       	ldi	r16, 0x01	; 1
    3232:	03 c0       	rjmp	.+6      	; 0x323a <xTaskGenericNotify+0xfc>
    3234:	01 e0       	ldi	r16, 0x01	; 1
    3236:	01 c0       	rjmp	.+2      	; 0x323a <xTaskGenericNotify+0xfc>
    3238:	00 e0       	ldi	r16, 0x00	; 0
    323a:	81 30       	cpi	r24, 0x01	; 1
    323c:	09 f0       	breq	.+2      	; 0x3240 <xTaskGenericNotify+0x102>
    323e:	69 c0       	rjmp	.+210    	; 0x3312 <xTaskGenericNotify+0x1d4>
    3240:	1c 96       	adiw	r26, 0x0c	; 12
    3242:	ed 91       	ld	r30, X+
    3244:	fc 91       	ld	r31, X
    3246:	1d 97       	sbiw	r26, 0x0d	; 13
    3248:	16 96       	adiw	r26, 0x06	; 6
    324a:	cd 91       	ld	r28, X+
    324c:	dc 91       	ld	r29, X
    324e:	17 97       	sbiw	r26, 0x07	; 7
    3250:	18 96       	adiw	r26, 0x08	; 8
    3252:	8d 91       	ld	r24, X+
    3254:	9c 91       	ld	r25, X
    3256:	19 97       	sbiw	r26, 0x09	; 9
    3258:	9f 83       	std	Y+7, r25	; 0x07
    325a:	8e 83       	std	Y+6, r24	; 0x06
    325c:	18 96       	adiw	r26, 0x08	; 8
    325e:	cd 91       	ld	r28, X+
    3260:	dc 91       	ld	r29, X
    3262:	19 97       	sbiw	r26, 0x09	; 9
    3264:	16 96       	adiw	r26, 0x06	; 6
    3266:	8d 91       	ld	r24, X+
    3268:	9c 91       	ld	r25, X
    326a:	17 97       	sbiw	r26, 0x07	; 7
    326c:	9d 83       	std	Y+5, r25	; 0x05
    326e:	8c 83       	std	Y+4, r24	; 0x04
    3270:	81 81       	ldd	r24, Z+1	; 0x01
    3272:	92 81       	ldd	r25, Z+2	; 0x02
    3274:	9d 01       	movw	r18, r26
    3276:	2e 5f       	subi	r18, 0xFE	; 254
    3278:	3f 4f       	sbci	r19, 0xFF	; 255
    327a:	82 17       	cp	r24, r18
    327c:	93 07       	cpc	r25, r19
    327e:	31 f4       	brne	.+12     	; 0x328c <xTaskGenericNotify+0x14e>
    3280:	18 96       	adiw	r26, 0x08	; 8
    3282:	8d 91       	ld	r24, X+
    3284:	9c 91       	ld	r25, X
    3286:	19 97       	sbiw	r26, 0x09	; 9
    3288:	92 83       	std	Z+2, r25	; 0x02
    328a:	81 83       	std	Z+1, r24	; 0x01
    328c:	1d 96       	adiw	r26, 0x0d	; 13
    328e:	1c 92       	st	X, r1
    3290:	1e 92       	st	-X, r1
    3292:	1c 97       	sbiw	r26, 0x0c	; 12
    3294:	80 81       	ld	r24, Z
    3296:	81 50       	subi	r24, 0x01	; 1
    3298:	80 83       	st	Z, r24
    329a:	5a 96       	adiw	r26, 0x1a	; 26
    329c:	ec 91       	ld	r30, X
    329e:	5a 97       	sbiw	r26, 0x1a	; 26
    32a0:	80 91 1b 15 	lds	r24, 0x151B	; 0x80151b <uxTopReadyPriority>
    32a4:	8e 17       	cp	r24, r30
    32a6:	10 f4       	brcc	.+4      	; 0x32ac <xTaskGenericNotify+0x16e>
    32a8:	e0 93 1b 15 	sts	0x151B, r30	; 0x80151b <uxTopReadyPriority>
    32ac:	8b e0       	ldi	r24, 0x0B	; 11
    32ae:	8e 9f       	mul	r24, r30
    32b0:	f0 01       	movw	r30, r0
    32b2:	11 24       	eor	r1, r1
    32b4:	e3 5a       	subi	r30, 0xA3	; 163
    32b6:	fa 4e       	sbci	r31, 0xEA	; 234
    32b8:	01 80       	ldd	r0, Z+1	; 0x01
    32ba:	f2 81       	ldd	r31, Z+2	; 0x02
    32bc:	e0 2d       	mov	r30, r0
    32be:	17 96       	adiw	r26, 0x07	; 7
    32c0:	fc 93       	st	X, r31
    32c2:	ee 93       	st	-X, r30
    32c4:	16 97       	sbiw	r26, 0x06	; 6
    32c6:	46 81       	ldd	r20, Z+6	; 0x06
    32c8:	57 81       	ldd	r21, Z+7	; 0x07
    32ca:	19 96       	adiw	r26, 0x09	; 9
    32cc:	5c 93       	st	X, r21
    32ce:	4e 93       	st	-X, r20
    32d0:	18 97       	sbiw	r26, 0x08	; 8
    32d2:	c6 81       	ldd	r28, Z+6	; 0x06
    32d4:	d7 81       	ldd	r29, Z+7	; 0x07
    32d6:	3d 83       	std	Y+5, r19	; 0x05
    32d8:	2c 83       	std	Y+4, r18	; 0x04
    32da:	37 83       	std	Z+7, r19	; 0x07
    32dc:	26 83       	std	Z+6, r18	; 0x06
    32de:	5a 96       	adiw	r26, 0x1a	; 26
    32e0:	ec 91       	ld	r30, X
    32e2:	5a 97       	sbiw	r26, 0x1a	; 26
    32e4:	8e 9f       	mul	r24, r30
    32e6:	f0 01       	movw	r30, r0
    32e8:	11 24       	eor	r1, r1
    32ea:	e3 5a       	subi	r30, 0xA3	; 163
    32ec:	fa 4e       	sbci	r31, 0xEA	; 234
    32ee:	1d 96       	adiw	r26, 0x0d	; 13
    32f0:	fc 93       	st	X, r31
    32f2:	ee 93       	st	-X, r30
    32f4:	1c 97       	sbiw	r26, 0x0c	; 12
    32f6:	80 81       	ld	r24, Z
    32f8:	8f 5f       	subi	r24, 0xFF	; 255
    32fa:	80 83       	st	Z, r24
    32fc:	5a 96       	adiw	r26, 0x1a	; 26
    32fe:	9c 91       	ld	r25, X
    3300:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    3304:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    3308:	82 8d       	ldd	r24, Z+26	; 0x1a
    330a:	89 17       	cp	r24, r25
    330c:	10 f4       	brcc	.+4      	; 0x3312 <xTaskGenericNotify+0x1d4>
    330e:	0e 94 b5 06 	call	0xd6a	; 0xd6a <vPortYield>
    3312:	0f 90       	pop	r0
    3314:	0f be       	out	0x3f, r0	; 63
    3316:	80 2f       	mov	r24, r16
    3318:	df 91       	pop	r29
    331a:	cf 91       	pop	r28
    331c:	0f 91       	pop	r16
    331e:	ff 90       	pop	r15
    3320:	ef 90       	pop	r14
    3322:	bf 90       	pop	r11
    3324:	af 90       	pop	r10
    3326:	9f 90       	pop	r9
    3328:	8f 90       	pop	r8
    332a:	08 95       	ret

0000332c <xTaskGenericNotifyFromISR>:
    332c:	8f 92       	push	r8
    332e:	9f 92       	push	r9
    3330:	af 92       	push	r10
    3332:	bf 92       	push	r11
    3334:	cf 92       	push	r12
    3336:	df 92       	push	r13
    3338:	ef 92       	push	r14
    333a:	ff 92       	push	r15
    333c:	0f 93       	push	r16
    333e:	cf 93       	push	r28
    3340:	df 93       	push	r29
    3342:	dc 01       	movw	r26, r24
    3344:	e1 14       	cp	r14, r1
    3346:	f1 04       	cpc	r15, r1
    3348:	89 f0       	breq	.+34     	; 0x336c <xTaskGenericNotifyFromISR+0x40>
    334a:	e6 2f       	mov	r30, r22
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	ee 0f       	add	r30, r30
    3350:	ff 1f       	adc	r31, r31
    3352:	ee 0f       	add	r30, r30
    3354:	ff 1f       	adc	r31, r31
    3356:	e8 0f       	add	r30, r24
    3358:	f9 1f       	adc	r31, r25
    335a:	87 a4       	ldd	r8, Z+47	; 0x2f
    335c:	90 a8       	ldd	r9, Z+48	; 0x30
    335e:	a1 a8       	ldd	r10, Z+49	; 0x31
    3360:	b2 a8       	ldd	r11, Z+50	; 0x32
    3362:	f7 01       	movw	r30, r14
    3364:	80 82       	st	Z, r8
    3366:	91 82       	std	Z+1, r9	; 0x01
    3368:	a2 82       	std	Z+2, r10	; 0x02
    336a:	b3 82       	std	Z+3, r11	; 0x03
    336c:	70 e0       	ldi	r23, 0x00	; 0
    336e:	fd 01       	movw	r30, r26
    3370:	e6 0f       	add	r30, r22
    3372:	f7 1f       	adc	r31, r23
    3374:	93 a9       	ldd	r25, Z+51	; 0x33
    3376:	82 e0       	ldi	r24, 0x02	; 2
    3378:	83 ab       	std	Z+51, r24	; 0x33
    337a:	02 30       	cpi	r16, 0x02	; 2
    337c:	01 f1       	breq	.+64     	; 0x33be <xTaskGenericNotifyFromISR+0x92>
    337e:	18 f4       	brcc	.+6      	; 0x3386 <xTaskGenericNotifyFromISR+0x5a>
    3380:	01 30       	cpi	r16, 0x01	; 1
    3382:	31 f0       	breq	.+12     	; 0x3390 <xTaskGenericNotifyFromISR+0x64>
    3384:	4d c0       	rjmp	.+154    	; 0x3420 <xTaskGenericNotifyFromISR+0xf4>
    3386:	03 30       	cpi	r16, 0x03	; 3
    3388:	79 f1       	breq	.+94     	; 0x33e8 <xTaskGenericNotifyFromISR+0xbc>
    338a:	04 30       	cpi	r16, 0x04	; 4
    338c:	d1 f1       	breq	.+116    	; 0x3402 <xTaskGenericNotifyFromISR+0xd6>
    338e:	48 c0       	rjmp	.+144    	; 0x3420 <xTaskGenericNotifyFromISR+0xf4>
    3390:	66 0f       	add	r22, r22
    3392:	77 1f       	adc	r23, r23
    3394:	66 0f       	add	r22, r22
    3396:	77 1f       	adc	r23, r23
    3398:	fd 01       	movw	r30, r26
    339a:	e6 0f       	add	r30, r22
    339c:	f7 1f       	adc	r31, r23
    339e:	87 a4       	ldd	r8, Z+47	; 0x2f
    33a0:	90 a8       	ldd	r9, Z+48	; 0x30
    33a2:	a1 a8       	ldd	r10, Z+49	; 0x31
    33a4:	b2 a8       	ldd	r11, Z+50	; 0x32
    33a6:	ba 01       	movw	r22, r20
    33a8:	a9 01       	movw	r20, r18
    33aa:	48 29       	or	r20, r8
    33ac:	59 29       	or	r21, r9
    33ae:	6a 29       	or	r22, r10
    33b0:	7b 29       	or	r23, r11
    33b2:	47 a7       	std	Z+47, r20	; 0x2f
    33b4:	50 ab       	std	Z+48, r21	; 0x30
    33b6:	61 ab       	std	Z+49, r22	; 0x31
    33b8:	72 ab       	std	Z+50, r23	; 0x32
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	34 c0       	rjmp	.+104    	; 0x3426 <xTaskGenericNotifyFromISR+0xfa>
    33be:	66 0f       	add	r22, r22
    33c0:	77 1f       	adc	r23, r23
    33c2:	66 0f       	add	r22, r22
    33c4:	77 1f       	adc	r23, r23
    33c6:	fd 01       	movw	r30, r26
    33c8:	e6 0f       	add	r30, r22
    33ca:	f7 1f       	adc	r31, r23
    33cc:	47 a5       	ldd	r20, Z+47	; 0x2f
    33ce:	50 a9       	ldd	r21, Z+48	; 0x30
    33d0:	61 a9       	ldd	r22, Z+49	; 0x31
    33d2:	72 a9       	ldd	r23, Z+50	; 0x32
    33d4:	4f 5f       	subi	r20, 0xFF	; 255
    33d6:	5f 4f       	sbci	r21, 0xFF	; 255
    33d8:	6f 4f       	sbci	r22, 0xFF	; 255
    33da:	7f 4f       	sbci	r23, 0xFF	; 255
    33dc:	47 a7       	std	Z+47, r20	; 0x2f
    33de:	50 ab       	std	Z+48, r21	; 0x30
    33e0:	61 ab       	std	Z+49, r22	; 0x31
    33e2:	72 ab       	std	Z+50, r23	; 0x32
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	1f c0       	rjmp	.+62     	; 0x3426 <xTaskGenericNotifyFromISR+0xfa>
    33e8:	66 0f       	add	r22, r22
    33ea:	77 1f       	adc	r23, r23
    33ec:	66 0f       	add	r22, r22
    33ee:	77 1f       	adc	r23, r23
    33f0:	fd 01       	movw	r30, r26
    33f2:	e6 0f       	add	r30, r22
    33f4:	f7 1f       	adc	r31, r23
    33f6:	27 a7       	std	Z+47, r18	; 0x2f
    33f8:	30 ab       	std	Z+48, r19	; 0x30
    33fa:	41 ab       	std	Z+49, r20	; 0x31
    33fc:	52 ab       	std	Z+50, r21	; 0x32
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	12 c0       	rjmp	.+36     	; 0x3426 <xTaskGenericNotifyFromISR+0xfa>
    3402:	92 30       	cpi	r25, 0x02	; 2
    3404:	79 f0       	breq	.+30     	; 0x3424 <xTaskGenericNotifyFromISR+0xf8>
    3406:	66 0f       	add	r22, r22
    3408:	77 1f       	adc	r23, r23
    340a:	66 0f       	add	r22, r22
    340c:	77 1f       	adc	r23, r23
    340e:	fd 01       	movw	r30, r26
    3410:	e6 0f       	add	r30, r22
    3412:	f7 1f       	adc	r31, r23
    3414:	27 a7       	std	Z+47, r18	; 0x2f
    3416:	30 ab       	std	Z+48, r19	; 0x30
    3418:	41 ab       	std	Z+49, r20	; 0x31
    341a:	52 ab       	std	Z+50, r21	; 0x32
    341c:	81 e0       	ldi	r24, 0x01	; 1
    341e:	03 c0       	rjmp	.+6      	; 0x3426 <xTaskGenericNotifyFromISR+0xfa>
    3420:	81 e0       	ldi	r24, 0x01	; 1
    3422:	01 c0       	rjmp	.+2      	; 0x3426 <xTaskGenericNotifyFromISR+0xfa>
    3424:	80 e0       	ldi	r24, 0x00	; 0
    3426:	91 30       	cpi	r25, 0x01	; 1
    3428:	09 f0       	breq	.+2      	; 0x342c <xTaskGenericNotifyFromISR+0x100>
    342a:	96 c0       	rjmp	.+300    	; 0x3558 <xTaskGenericNotifyFromISR+0x22c>
    342c:	90 91 0c 15 	lds	r25, 0x150C	; 0x80150c <uxSchedulerSuspended>
    3430:	91 11       	cpse	r25, r1
    3432:	5f c0       	rjmp	.+190    	; 0x34f2 <xTaskGenericNotifyFromISR+0x1c6>
    3434:	1c 96       	adiw	r26, 0x0c	; 12
    3436:	ed 91       	ld	r30, X+
    3438:	fc 91       	ld	r31, X
    343a:	1d 97       	sbiw	r26, 0x0d	; 13
    343c:	16 96       	adiw	r26, 0x06	; 6
    343e:	cd 91       	ld	r28, X+
    3440:	dc 91       	ld	r29, X
    3442:	17 97       	sbiw	r26, 0x07	; 7
    3444:	18 96       	adiw	r26, 0x08	; 8
    3446:	2d 91       	ld	r18, X+
    3448:	3c 91       	ld	r19, X
    344a:	19 97       	sbiw	r26, 0x09	; 9
    344c:	3f 83       	std	Y+7, r19	; 0x07
    344e:	2e 83       	std	Y+6, r18	; 0x06
    3450:	18 96       	adiw	r26, 0x08	; 8
    3452:	cd 91       	ld	r28, X+
    3454:	dc 91       	ld	r29, X
    3456:	19 97       	sbiw	r26, 0x09	; 9
    3458:	16 96       	adiw	r26, 0x06	; 6
    345a:	2d 91       	ld	r18, X+
    345c:	3c 91       	ld	r19, X
    345e:	17 97       	sbiw	r26, 0x07	; 7
    3460:	3d 83       	std	Y+5, r19	; 0x05
    3462:	2c 83       	std	Y+4, r18	; 0x04
    3464:	41 81       	ldd	r20, Z+1	; 0x01
    3466:	52 81       	ldd	r21, Z+2	; 0x02
    3468:	9d 01       	movw	r18, r26
    346a:	2e 5f       	subi	r18, 0xFE	; 254
    346c:	3f 4f       	sbci	r19, 0xFF	; 255
    346e:	42 17       	cp	r20, r18
    3470:	53 07       	cpc	r21, r19
    3472:	31 f4       	brne	.+12     	; 0x3480 <xTaskGenericNotifyFromISR+0x154>
    3474:	18 96       	adiw	r26, 0x08	; 8
    3476:	4d 91       	ld	r20, X+
    3478:	5c 91       	ld	r21, X
    347a:	19 97       	sbiw	r26, 0x09	; 9
    347c:	52 83       	std	Z+2, r21	; 0x02
    347e:	41 83       	std	Z+1, r20	; 0x01
    3480:	1d 96       	adiw	r26, 0x0d	; 13
    3482:	1c 92       	st	X, r1
    3484:	1e 92       	st	-X, r1
    3486:	1c 97       	sbiw	r26, 0x0c	; 12
    3488:	90 81       	ld	r25, Z
    348a:	91 50       	subi	r25, 0x01	; 1
    348c:	90 83       	st	Z, r25
    348e:	5a 96       	adiw	r26, 0x1a	; 26
    3490:	ec 91       	ld	r30, X
    3492:	5a 97       	sbiw	r26, 0x1a	; 26
    3494:	90 91 1b 15 	lds	r25, 0x151B	; 0x80151b <uxTopReadyPriority>
    3498:	9e 17       	cp	r25, r30
    349a:	10 f4       	brcc	.+4      	; 0x34a0 <xTaskGenericNotifyFromISR+0x174>
    349c:	e0 93 1b 15 	sts	0x151B, r30	; 0x80151b <uxTopReadyPriority>
    34a0:	9b e0       	ldi	r25, 0x0B	; 11
    34a2:	9e 9f       	mul	r25, r30
    34a4:	f0 01       	movw	r30, r0
    34a6:	11 24       	eor	r1, r1
    34a8:	e3 5a       	subi	r30, 0xA3	; 163
    34aa:	fa 4e       	sbci	r31, 0xEA	; 234
    34ac:	01 80       	ldd	r0, Z+1	; 0x01
    34ae:	f2 81       	ldd	r31, Z+2	; 0x02
    34b0:	e0 2d       	mov	r30, r0
    34b2:	17 96       	adiw	r26, 0x07	; 7
    34b4:	fc 93       	st	X, r31
    34b6:	ee 93       	st	-X, r30
    34b8:	16 97       	sbiw	r26, 0x06	; 6
    34ba:	46 81       	ldd	r20, Z+6	; 0x06
    34bc:	57 81       	ldd	r21, Z+7	; 0x07
    34be:	19 96       	adiw	r26, 0x09	; 9
    34c0:	5c 93       	st	X, r21
    34c2:	4e 93       	st	-X, r20
    34c4:	18 97       	sbiw	r26, 0x08	; 8
    34c6:	c6 81       	ldd	r28, Z+6	; 0x06
    34c8:	d7 81       	ldd	r29, Z+7	; 0x07
    34ca:	3d 83       	std	Y+5, r19	; 0x05
    34cc:	2c 83       	std	Y+4, r18	; 0x04
    34ce:	37 83       	std	Z+7, r19	; 0x07
    34d0:	26 83       	std	Z+6, r18	; 0x06
    34d2:	5a 96       	adiw	r26, 0x1a	; 26
    34d4:	ec 91       	ld	r30, X
    34d6:	5a 97       	sbiw	r26, 0x1a	; 26
    34d8:	9e 9f       	mul	r25, r30
    34da:	f0 01       	movw	r30, r0
    34dc:	11 24       	eor	r1, r1
    34de:	e3 5a       	subi	r30, 0xA3	; 163
    34e0:	fa 4e       	sbci	r31, 0xEA	; 234
    34e2:	1d 96       	adiw	r26, 0x0d	; 13
    34e4:	fc 93       	st	X, r31
    34e6:	ee 93       	st	-X, r30
    34e8:	1c 97       	sbiw	r26, 0x0c	; 12
    34ea:	90 81       	ld	r25, Z
    34ec:	9f 5f       	subi	r25, 0xFF	; 255
    34ee:	90 83       	st	Z, r25
    34f0:	21 c0       	rjmp	.+66     	; 0x3534 <xTaskGenericNotifyFromISR+0x208>
    34f2:	68 e3       	ldi	r22, 0x38	; 56
    34f4:	75 e1       	ldi	r23, 0x15	; 21
    34f6:	fb 01       	movw	r30, r22
    34f8:	c1 81       	ldd	r28, Z+1	; 0x01
    34fa:	d2 81       	ldd	r29, Z+2	; 0x02
    34fc:	53 96       	adiw	r26, 0x13	; 19
    34fe:	dc 93       	st	X, r29
    3500:	ce 93       	st	-X, r28
    3502:	52 97       	sbiw	r26, 0x12	; 18
    3504:	2e 81       	ldd	r18, Y+6	; 0x06
    3506:	3f 81       	ldd	r19, Y+7	; 0x07
    3508:	55 96       	adiw	r26, 0x15	; 21
    350a:	3c 93       	st	X, r19
    350c:	2e 93       	st	-X, r18
    350e:	54 97       	sbiw	r26, 0x14	; 20
    3510:	4e 81       	ldd	r20, Y+6	; 0x06
    3512:	5f 81       	ldd	r21, Y+7	; 0x07
    3514:	9d 01       	movw	r18, r26
    3516:	22 5f       	subi	r18, 0xF2	; 242
    3518:	3f 4f       	sbci	r19, 0xFF	; 255
    351a:	fa 01       	movw	r30, r20
    351c:	35 83       	std	Z+5, r19	; 0x05
    351e:	24 83       	std	Z+4, r18	; 0x04
    3520:	3f 83       	std	Y+7, r19	; 0x07
    3522:	2e 83       	std	Y+6, r18	; 0x06
    3524:	59 96       	adiw	r26, 0x19	; 25
    3526:	7c 93       	st	X, r23
    3528:	6e 93       	st	-X, r22
    352a:	58 97       	sbiw	r26, 0x18	; 24
    352c:	fb 01       	movw	r30, r22
    352e:	90 81       	ld	r25, Z
    3530:	9f 5f       	subi	r25, 0xFF	; 255
    3532:	90 83       	st	Z, r25
    3534:	5a 96       	adiw	r26, 0x1a	; 26
    3536:	2c 91       	ld	r18, X
    3538:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    353c:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    3540:	92 8d       	ldd	r25, Z+26	; 0x1a
    3542:	92 17       	cp	r25, r18
    3544:	48 f4       	brcc	.+18     	; 0x3558 <xTaskGenericNotifyFromISR+0x22c>
    3546:	c1 14       	cp	r12, r1
    3548:	d1 04       	cpc	r13, r1
    354a:	19 f0       	breq	.+6      	; 0x3552 <xTaskGenericNotifyFromISR+0x226>
    354c:	91 e0       	ldi	r25, 0x01	; 1
    354e:	f6 01       	movw	r30, r12
    3550:	90 83       	st	Z, r25
    3552:	91 e0       	ldi	r25, 0x01	; 1
    3554:	90 93 15 15 	sts	0x1515, r25	; 0x801515 <xYieldPending>
    3558:	df 91       	pop	r29
    355a:	cf 91       	pop	r28
    355c:	0f 91       	pop	r16
    355e:	ff 90       	pop	r15
    3560:	ef 90       	pop	r14
    3562:	df 90       	pop	r13
    3564:	cf 90       	pop	r12
    3566:	bf 90       	pop	r11
    3568:	af 90       	pop	r10
    356a:	9f 90       	pop	r9
    356c:	8f 90       	pop	r8
    356e:	08 95       	ret

00003570 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3570:	00 97       	sbiw	r24, 0x00	; 0
    3572:	21 f4       	brne	.+8      	; 0x357c <xTaskGenericNotifyStateClear+0xc>
    3574:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <pxCurrentTCB>
    3578:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    357c:	0f b6       	in	r0, 0x3f	; 63
    357e:	f8 94       	cli
    3580:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3582:	70 e0       	ldi	r23, 0x00	; 0
    3584:	fc 01       	movw	r30, r24
    3586:	e6 0f       	add	r30, r22
    3588:	f7 1f       	adc	r31, r23
    358a:	23 a9       	ldd	r18, Z+51	; 0x33
    358c:	22 30       	cpi	r18, 0x02	; 2
    358e:	31 f4       	brne	.+12     	; 0x359c <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3590:	fc 01       	movw	r30, r24
    3592:	e6 0f       	add	r30, r22
    3594:	f7 1f       	adc	r31, r23
    3596:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	01 c0       	rjmp	.+2      	; 0x359e <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    359c:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    359e:	0f 90       	pop	r0
    35a0:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    35a2:	08 95       	ret

000035a4 <prvGetNextExpireTime>:
    35a4:	dc 01       	movw	r26, r24
    35a6:	e0 91 d7 15 	lds	r30, 0x15D7	; 0x8015d7 <pxCurrentTimerList>
    35aa:	f0 91 d8 15 	lds	r31, 0x15D8	; 0x8015d8 <pxCurrentTimerList+0x1>
    35ae:	80 81       	ld	r24, Z
    35b0:	91 e0       	ldi	r25, 0x01	; 1
    35b2:	81 11       	cpse	r24, r1
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	9c 93       	st	X, r25
    35b8:	91 11       	cpse	r25, r1
    35ba:	08 c0       	rjmp	.+16     	; 0x35cc <prvGetNextExpireTime+0x28>
    35bc:	07 80       	ldd	r0, Z+7	; 0x07
    35be:	f0 85       	ldd	r31, Z+8	; 0x08
    35c0:	e0 2d       	mov	r30, r0
    35c2:	60 81       	ld	r22, Z
    35c4:	71 81       	ldd	r23, Z+1	; 0x01
    35c6:	82 81       	ldd	r24, Z+2	; 0x02
    35c8:	93 81       	ldd	r25, Z+3	; 0x03
    35ca:	08 95       	ret
    35cc:	60 e0       	ldi	r22, 0x00	; 0
    35ce:	70 e0       	ldi	r23, 0x00	; 0
    35d0:	cb 01       	movw	r24, r22
    35d2:	08 95       	ret

000035d4 <prvInsertTimerInActiveList>:
    35d4:	cf 92       	push	r12
    35d6:	df 92       	push	r13
    35d8:	ef 92       	push	r14
    35da:	ff 92       	push	r15
    35dc:	0f 93       	push	r16
    35de:	1f 93       	push	r17
    35e0:	fc 01       	movw	r30, r24
    35e2:	42 83       	std	Z+2, r20	; 0x02
    35e4:	53 83       	std	Z+3, r21	; 0x03
    35e6:	64 83       	std	Z+4, r22	; 0x04
    35e8:	75 83       	std	Z+5, r23	; 0x05
    35ea:	93 87       	std	Z+11, r25	; 0x0b
    35ec:	82 87       	std	Z+10, r24	; 0x0a
    35ee:	04 17       	cp	r16, r20
    35f0:	15 07       	cpc	r17, r21
    35f2:	26 07       	cpc	r18, r22
    35f4:	37 07       	cpc	r19, r23
    35f6:	c0 f0       	brcs	.+48     	; 0x3628 <prvInsertTimerInActiveList+0x54>
    35f8:	0c 19       	sub	r16, r12
    35fa:	1d 09       	sbc	r17, r13
    35fc:	2e 09       	sbc	r18, r14
    35fe:	3f 09       	sbc	r19, r15
    3600:	86 85       	ldd	r24, Z+14	; 0x0e
    3602:	97 85       	ldd	r25, Z+15	; 0x0f
    3604:	a0 89       	ldd	r26, Z+16	; 0x10
    3606:	b1 89       	ldd	r27, Z+17	; 0x11
    3608:	08 17       	cp	r16, r24
    360a:	19 07       	cpc	r17, r25
    360c:	2a 07       	cpc	r18, r26
    360e:	3b 07       	cpc	r19, r27
    3610:	00 f5       	brcc	.+64     	; 0x3652 <prvInsertTimerInActiveList+0x7e>
    3612:	bf 01       	movw	r22, r30
    3614:	6e 5f       	subi	r22, 0xFE	; 254
    3616:	7f 4f       	sbci	r23, 0xFF	; 255
    3618:	80 91 d5 15 	lds	r24, 0x15D5	; 0x8015d5 <pxOverflowTimerList>
    361c:	90 91 d6 15 	lds	r25, 0x15D6	; 0x8015d6 <pxOverflowTimerList+0x1>
    3620:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <vListInsert>
    3624:	80 e0       	ldi	r24, 0x00	; 0
    3626:	18 c0       	rjmp	.+48     	; 0x3658 <prvInsertTimerInActiveList+0x84>
    3628:	0c 15       	cp	r16, r12
    362a:	1d 05       	cpc	r17, r13
    362c:	2e 05       	cpc	r18, r14
    362e:	3f 05       	cpc	r19, r15
    3630:	28 f4       	brcc	.+10     	; 0x363c <prvInsertTimerInActiveList+0x68>
    3632:	4c 15       	cp	r20, r12
    3634:	5d 05       	cpc	r21, r13
    3636:	6e 05       	cpc	r22, r14
    3638:	7f 05       	cpc	r23, r15
    363a:	68 f4       	brcc	.+26     	; 0x3656 <prvInsertTimerInActiveList+0x82>
    363c:	bf 01       	movw	r22, r30
    363e:	6e 5f       	subi	r22, 0xFE	; 254
    3640:	7f 4f       	sbci	r23, 0xFF	; 255
    3642:	80 91 d7 15 	lds	r24, 0x15D7	; 0x8015d7 <pxCurrentTimerList>
    3646:	90 91 d8 15 	lds	r25, 0x15D8	; 0x8015d8 <pxCurrentTimerList+0x1>
    364a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <vListInsert>
    364e:	80 e0       	ldi	r24, 0x00	; 0
    3650:	03 c0       	rjmp	.+6      	; 0x3658 <prvInsertTimerInActiveList+0x84>
    3652:	81 e0       	ldi	r24, 0x01	; 1
    3654:	01 c0       	rjmp	.+2      	; 0x3658 <prvInsertTimerInActiveList+0x84>
    3656:	81 e0       	ldi	r24, 0x01	; 1
    3658:	1f 91       	pop	r17
    365a:	0f 91       	pop	r16
    365c:	ff 90       	pop	r15
    365e:	ef 90       	pop	r14
    3660:	df 90       	pop	r13
    3662:	cf 90       	pop	r12
    3664:	08 95       	ret

00003666 <prvCheckForValidListAndQueue>:
    3666:	0f b6       	in	r0, 0x3f	; 63
    3668:	f8 94       	cli
    366a:	0f 92       	push	r0
    366c:	80 91 d3 15 	lds	r24, 0x15D3	; 0x8015d3 <xTimerQueue>
    3670:	90 91 d4 15 	lds	r25, 0x15D4	; 0x8015d4 <xTimerQueue+0x1>
    3674:	89 2b       	or	r24, r25
    3676:	e9 f4       	brne	.+58     	; 0x36b2 <prvCheckForValidListAndQueue+0x4c>
    3678:	84 ee       	ldi	r24, 0xE4	; 228
    367a:	95 e1       	ldi	r25, 0x15	; 21
    367c:	0e 94 e7 05 	call	0xbce	; 0xbce <vListInitialise>
    3680:	89 ed       	ldi	r24, 0xD9	; 217
    3682:	95 e1       	ldi	r25, 0x15	; 21
    3684:	0e 94 e7 05 	call	0xbce	; 0xbce <vListInitialise>
    3688:	84 ee       	ldi	r24, 0xE4	; 228
    368a:	95 e1       	ldi	r25, 0x15	; 21
    368c:	90 93 d8 15 	sts	0x15D8, r25	; 0x8015d8 <pxCurrentTimerList+0x1>
    3690:	80 93 d7 15 	sts	0x15D7, r24	; 0x8015d7 <pxCurrentTimerList>
    3694:	89 ed       	ldi	r24, 0xD9	; 217
    3696:	95 e1       	ldi	r25, 0x15	; 21
    3698:	90 93 d6 15 	sts	0x15D6, r25	; 0x8015d6 <pxOverflowTimerList+0x1>
    369c:	80 93 d5 15 	sts	0x15D5, r24	; 0x8015d5 <pxOverflowTimerList>
    36a0:	40 e0       	ldi	r20, 0x00	; 0
    36a2:	67 e0       	ldi	r22, 0x07	; 7
    36a4:	8a e0       	ldi	r24, 0x0A	; 10
    36a6:	0e 94 aa 08 	call	0x1154	; 0x1154 <xQueueGenericCreate>
    36aa:	90 93 d4 15 	sts	0x15D4, r25	; 0x8015d4 <xTimerQueue+0x1>
    36ae:	80 93 d3 15 	sts	0x15D3, r24	; 0x8015d3 <xTimerQueue>
    36b2:	0f 90       	pop	r0
    36b4:	0f be       	out	0x3f, r0	; 63
    36b6:	08 95       	ret

000036b8 <xTimerCreateTimerTask>:
    36b8:	ef 92       	push	r14
    36ba:	ff 92       	push	r15
    36bc:	0f 93       	push	r16
    36be:	d3 df       	rcall	.-90     	; 0x3666 <prvCheckForValidListAndQueue>
    36c0:	80 91 d3 15 	lds	r24, 0x15D3	; 0x8015d3 <xTimerQueue>
    36c4:	90 91 d4 15 	lds	r25, 0x15D4	; 0x8015d4 <xTimerQueue+0x1>
    36c8:	89 2b       	or	r24, r25
    36ca:	91 f0       	breq	.+36     	; 0x36f0 <xTimerCreateTimerTask+0x38>
    36cc:	0f 2e       	mov	r0, r31
    36ce:	f1 ed       	ldi	r31, 0xD1	; 209
    36d0:	ef 2e       	mov	r14, r31
    36d2:	f5 e1       	ldi	r31, 0x15	; 21
    36d4:	ff 2e       	mov	r15, r31
    36d6:	f0 2d       	mov	r31, r0
    36d8:	03 e0       	ldi	r16, 0x03	; 3
    36da:	20 e0       	ldi	r18, 0x00	; 0
    36dc:	30 e0       	ldi	r19, 0x00	; 0
    36de:	40 ec       	ldi	r20, 0xC0	; 192
    36e0:	50 e0       	ldi	r21, 0x00	; 0
    36e2:	6a e6       	ldi	r22, 0x6A	; 106
    36e4:	73 e0       	ldi	r23, 0x03	; 3
    36e6:	88 e5       	ldi	r24, 0x58	; 88
    36e8:	91 e0       	ldi	r25, 0x01	; 1
    36ea:	0e 94 5d 10 	call	0x20ba	; 0x20ba <xTaskCreate>
    36ee:	01 c0       	rjmp	.+2      	; 0x36f2 <xTimerCreateTimerTask+0x3a>
    36f0:	80 e0       	ldi	r24, 0x00	; 0
    36f2:	0f 91       	pop	r16
    36f4:	ff 90       	pop	r15
    36f6:	ef 90       	pop	r14
    36f8:	08 95       	ret

000036fa <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    36fa:	8f 92       	push	r8
    36fc:	9f 92       	push	r9
    36fe:	af 92       	push	r10
    3700:	bf 92       	push	r11
    3702:	cf 92       	push	r12
    3704:	df 92       	push	r13
    3706:	ef 92       	push	r14
    3708:	ff 92       	push	r15
    370a:	0f 93       	push	r16
    370c:	1f 93       	push	r17
    370e:	cf 93       	push	r28
    3710:	df 93       	push	r29
    3712:	cd b7       	in	r28, 0x3d	; 61
    3714:	de b7       	in	r29, 0x3e	; 62
    3716:	27 97       	sbiw	r28, 0x07	; 7
    3718:	0f b6       	in	r0, 0x3f	; 63
    371a:	f8 94       	cli
    371c:	de bf       	out	0x3e, r29	; 62
    371e:	0f be       	out	0x3f, r0	; 63
    3720:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3722:	e0 91 d3 15 	lds	r30, 0x15D3	; 0x8015d3 <xTimerQueue>
    3726:	f0 91 d4 15 	lds	r31, 0x15D4	; 0x8015d4 <xTimerQueue+0x1>
    372a:	30 97       	sbiw	r30, 0x00	; 0
    372c:	81 f1       	breq	.+96     	; 0x378e <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    372e:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3730:	2a 83       	std	Y+2, r18	; 0x02
    3732:	3b 83       	std	Y+3, r19	; 0x03
    3734:	4c 83       	std	Y+4, r20	; 0x04
    3736:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3738:	9f 83       	std	Y+7, r25	; 0x07
    373a:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    373c:	66 30       	cpi	r22, 0x06	; 6
    373e:	f4 f4       	brge	.+60     	; 0x377c <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3740:	c3 da       	rcall	.-2682   	; 0x2cc8 <xTaskGetSchedulerState>
    3742:	82 30       	cpi	r24, 0x02	; 2
    3744:	69 f4       	brne	.+26     	; 0x3760 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3746:	00 e0       	ldi	r16, 0x00	; 0
    3748:	a7 01       	movw	r20, r14
    374a:	96 01       	movw	r18, r12
    374c:	be 01       	movw	r22, r28
    374e:	6f 5f       	subi	r22, 0xFF	; 255
    3750:	7f 4f       	sbci	r23, 0xFF	; 255
    3752:	80 91 d3 15 	lds	r24, 0x15D3	; 0x8015d3 <xTimerQueue>
    3756:	90 91 d4 15 	lds	r25, 0x15D4	; 0x8015d4 <xTimerQueue+0x1>
    375a:	0e 94 cd 08 	call	0x119a	; 0x119a <xQueueGenericSend>
    375e:	18 c0       	rjmp	.+48     	; 0x3790 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3760:	00 e0       	ldi	r16, 0x00	; 0
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	a9 01       	movw	r20, r18
    3768:	be 01       	movw	r22, r28
    376a:	6f 5f       	subi	r22, 0xFF	; 255
    376c:	7f 4f       	sbci	r23, 0xFF	; 255
    376e:	80 91 d3 15 	lds	r24, 0x15D3	; 0x8015d3 <xTimerQueue>
    3772:	90 91 d4 15 	lds	r25, 0x15D4	; 0x8015d4 <xTimerQueue+0x1>
    3776:	0e 94 cd 08 	call	0x119a	; 0x119a <xQueueGenericSend>
    377a:	0a c0       	rjmp	.+20     	; 0x3790 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	a8 01       	movw	r20, r16
    3780:	be 01       	movw	r22, r28
    3782:	6f 5f       	subi	r22, 0xFF	; 255
    3784:	7f 4f       	sbci	r23, 0xFF	; 255
    3786:	cf 01       	movw	r24, r30
    3788:	0e 94 7d 09 	call	0x12fa	; 0x12fa <xQueueGenericSendFromISR>
    378c:	01 c0       	rjmp	.+2      	; 0x3790 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    378e:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3790:	27 96       	adiw	r28, 0x07	; 7
    3792:	0f b6       	in	r0, 0x3f	; 63
    3794:	f8 94       	cli
    3796:	de bf       	out	0x3e, r29	; 62
    3798:	0f be       	out	0x3f, r0	; 63
    379a:	cd bf       	out	0x3d, r28	; 61
    379c:	df 91       	pop	r29
    379e:	cf 91       	pop	r28
    37a0:	1f 91       	pop	r17
    37a2:	0f 91       	pop	r16
    37a4:	ff 90       	pop	r15
    37a6:	ef 90       	pop	r14
    37a8:	df 90       	pop	r13
    37aa:	cf 90       	pop	r12
    37ac:	bf 90       	pop	r11
    37ae:	af 90       	pop	r10
    37b0:	9f 90       	pop	r9
    37b2:	8f 90       	pop	r8
    37b4:	08 95       	ret

000037b6 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    37b6:	8f 92       	push	r8
    37b8:	9f 92       	push	r9
    37ba:	af 92       	push	r10
    37bc:	bf 92       	push	r11
    37be:	cf 92       	push	r12
    37c0:	df 92       	push	r13
    37c2:	ef 92       	push	r14
    37c4:	ff 92       	push	r15
    37c6:	0f 93       	push	r16
    37c8:	1f 93       	push	r17
    37ca:	cf 93       	push	r28
    37cc:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    37ce:	3b c0       	rjmp	.+118    	; 0x3846 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    37d0:	07 80       	ldd	r0, Z+7	; 0x07
    37d2:	f0 85       	ldd	r31, Z+8	; 0x08
    37d4:	e0 2d       	mov	r30, r0
    37d6:	80 80       	ld	r8, Z
    37d8:	91 80       	ldd	r9, Z+1	; 0x01
    37da:	a2 80       	ldd	r10, Z+2	; 0x02
    37dc:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    37de:	c0 85       	ldd	r28, Z+8	; 0x08
    37e0:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    37e2:	8e 01       	movw	r16, r28
    37e4:	0e 5f       	subi	r16, 0xFE	; 254
    37e6:	1f 4f       	sbci	r17, 0xFF	; 255
    37e8:	c8 01       	movw	r24, r16
    37ea:	0e 94 39 06 	call	0xc72	; 0xc72 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    37ee:	ec 89       	ldd	r30, Y+20	; 0x14
    37f0:	fd 89       	ldd	r31, Y+21	; 0x15
    37f2:	ce 01       	movw	r24, r28
    37f4:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    37f6:	8e 89       	ldd	r24, Y+22	; 0x16
    37f8:	82 ff       	sbrs	r24, 2
    37fa:	25 c0       	rjmp	.+74     	; 0x3846 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    37fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    37fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    3800:	a8 89       	ldd	r26, Y+16	; 0x10
    3802:	b9 89       	ldd	r27, Y+17	; 0x11
    3804:	88 0d       	add	r24, r8
    3806:	99 1d       	adc	r25, r9
    3808:	aa 1d       	adc	r26, r10
    380a:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    380c:	88 16       	cp	r8, r24
    380e:	99 06       	cpc	r9, r25
    3810:	aa 06       	cpc	r10, r26
    3812:	bb 06       	cpc	r11, r27
    3814:	70 f4       	brcc	.+28     	; 0x3832 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3816:	8a 83       	std	Y+2, r24	; 0x02
    3818:	9b 83       	std	Y+3, r25	; 0x03
    381a:	ac 83       	std	Y+4, r26	; 0x04
    381c:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    381e:	db 87       	std	Y+11, r29	; 0x0b
    3820:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3822:	b8 01       	movw	r22, r16
    3824:	80 91 d7 15 	lds	r24, 0x15D7	; 0x8015d7 <pxCurrentTimerList>
    3828:	90 91 d8 15 	lds	r25, 0x15D8	; 0x8015d8 <pxCurrentTimerList+0x1>
    382c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <vListInsert>
    3830:	0a c0       	rjmp	.+20     	; 0x3846 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3832:	c1 2c       	mov	r12, r1
    3834:	d1 2c       	mov	r13, r1
    3836:	76 01       	movw	r14, r12
    3838:	00 e0       	ldi	r16, 0x00	; 0
    383a:	10 e0       	ldi	r17, 0x00	; 0
    383c:	a5 01       	movw	r20, r10
    383e:	94 01       	movw	r18, r8
    3840:	60 e0       	ldi	r22, 0x00	; 0
    3842:	ce 01       	movw	r24, r28
    3844:	5a df       	rcall	.-332    	; 0x36fa <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3846:	e0 91 d7 15 	lds	r30, 0x15D7	; 0x8015d7 <pxCurrentTimerList>
    384a:	f0 91 d8 15 	lds	r31, 0x15D8	; 0x8015d8 <pxCurrentTimerList+0x1>
    384e:	80 81       	ld	r24, Z
    3850:	81 11       	cpse	r24, r1
    3852:	be cf       	rjmp	.-132    	; 0x37d0 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3854:	80 91 d5 15 	lds	r24, 0x15D5	; 0x8015d5 <pxOverflowTimerList>
    3858:	90 91 d6 15 	lds	r25, 0x15D6	; 0x8015d6 <pxOverflowTimerList+0x1>
    385c:	90 93 d8 15 	sts	0x15D8, r25	; 0x8015d8 <pxCurrentTimerList+0x1>
    3860:	80 93 d7 15 	sts	0x15D7, r24	; 0x8015d7 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3864:	f0 93 d6 15 	sts	0x15D6, r31	; 0x8015d6 <pxOverflowTimerList+0x1>
    3868:	e0 93 d5 15 	sts	0x15D5, r30	; 0x8015d5 <pxOverflowTimerList>
    }
    386c:	df 91       	pop	r29
    386e:	cf 91       	pop	r28
    3870:	1f 91       	pop	r17
    3872:	0f 91       	pop	r16
    3874:	ff 90       	pop	r15
    3876:	ef 90       	pop	r14
    3878:	df 90       	pop	r13
    387a:	cf 90       	pop	r12
    387c:	bf 90       	pop	r11
    387e:	af 90       	pop	r10
    3880:	9f 90       	pop	r9
    3882:	8f 90       	pop	r8
    3884:	08 95       	ret

00003886 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3886:	cf 92       	push	r12
    3888:	df 92       	push	r13
    388a:	ef 92       	push	r14
    388c:	ff 92       	push	r15
    388e:	cf 93       	push	r28
    3890:	df 93       	push	r29
    3892:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3894:	0e 94 e7 10 	call	0x21ce	; 0x21ce <xTaskGetTickCount>
    3898:	6b 01       	movw	r12, r22
    389a:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    389c:	80 91 cd 15 	lds	r24, 0x15CD	; 0x8015cd <xLastTime.2436>
    38a0:	90 91 ce 15 	lds	r25, 0x15CE	; 0x8015ce <xLastTime.2436+0x1>
    38a4:	a0 91 cf 15 	lds	r26, 0x15CF	; 0x8015cf <xLastTime.2436+0x2>
    38a8:	b0 91 d0 15 	lds	r27, 0x15D0	; 0x8015d0 <xLastTime.2436+0x3>
    38ac:	c8 16       	cp	r12, r24
    38ae:	d9 06       	cpc	r13, r25
    38b0:	ea 06       	cpc	r14, r26
    38b2:	fb 06       	cpc	r15, r27
    38b4:	20 f4       	brcc	.+8      	; 0x38be <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    38b6:	7f df       	rcall	.-258    	; 0x37b6 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	88 83       	st	Y, r24
    38bc:	01 c0       	rjmp	.+2      	; 0x38c0 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    38be:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    38c0:	c0 92 cd 15 	sts	0x15CD, r12	; 0x8015cd <xLastTime.2436>
    38c4:	d0 92 ce 15 	sts	0x15CE, r13	; 0x8015ce <xLastTime.2436+0x1>
    38c8:	e0 92 cf 15 	sts	0x15CF, r14	; 0x8015cf <xLastTime.2436+0x2>
    38cc:	f0 92 d0 15 	sts	0x15D0, r15	; 0x8015d0 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    38d0:	c7 01       	movw	r24, r14
    38d2:	b6 01       	movw	r22, r12
    38d4:	df 91       	pop	r29
    38d6:	cf 91       	pop	r28
    38d8:	ff 90       	pop	r15
    38da:	ef 90       	pop	r14
    38dc:	df 90       	pop	r13
    38de:	cf 90       	pop	r12
    38e0:	08 95       	ret

000038e2 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    38e2:	4f 92       	push	r4
    38e4:	5f 92       	push	r5
    38e6:	6f 92       	push	r6
    38e8:	7f 92       	push	r7
    38ea:	8f 92       	push	r8
    38ec:	9f 92       	push	r9
    38ee:	af 92       	push	r10
    38f0:	bf 92       	push	r11
    38f2:	cf 92       	push	r12
    38f4:	df 92       	push	r13
    38f6:	ef 92       	push	r14
    38f8:	ff 92       	push	r15
    38fa:	0f 93       	push	r16
    38fc:	1f 93       	push	r17
    38fe:	cf 93       	push	r28
    3900:	df 93       	push	r29
    3902:	4b 01       	movw	r8, r22
    3904:	5c 01       	movw	r10, r24
    3906:	29 01       	movw	r4, r18
    3908:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    390a:	e0 91 d7 15 	lds	r30, 0x15D7	; 0x8015d7 <pxCurrentTimerList>
    390e:	f0 91 d8 15 	lds	r31, 0x15D8	; 0x8015d8 <pxCurrentTimerList+0x1>
    3912:	07 80       	ldd	r0, Z+7	; 0x07
    3914:	f0 85       	ldd	r31, Z+8	; 0x08
    3916:	e0 2d       	mov	r30, r0
    3918:	c0 85       	ldd	r28, Z+8	; 0x08
    391a:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    391c:	ce 01       	movw	r24, r28
    391e:	02 96       	adiw	r24, 0x02	; 2
    3920:	0e 94 39 06 	call	0xc72	; 0xc72 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3924:	8e 89       	ldd	r24, Y+22	; 0x16
    3926:	82 ff       	sbrs	r24, 2
    3928:	1b c0       	rjmp	.+54     	; 0x3960 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    392a:	4e 85       	ldd	r20, Y+14	; 0x0e
    392c:	5f 85       	ldd	r21, Y+15	; 0x0f
    392e:	68 89       	ldd	r22, Y+16	; 0x10
    3930:	79 89       	ldd	r23, Y+17	; 0x11
    3932:	48 0d       	add	r20, r8
    3934:	59 1d       	adc	r21, r9
    3936:	6a 1d       	adc	r22, r10
    3938:	7b 1d       	adc	r23, r11
    393a:	75 01       	movw	r14, r10
    393c:	64 01       	movw	r12, r8
    393e:	93 01       	movw	r18, r6
    3940:	82 01       	movw	r16, r4
    3942:	ce 01       	movw	r24, r28
    3944:	47 de       	rcall	.-882    	; 0x35d4 <prvInsertTimerInActiveList>
    3946:	88 23       	and	r24, r24
    3948:	69 f0       	breq	.+26     	; 0x3964 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    394a:	c1 2c       	mov	r12, r1
    394c:	d1 2c       	mov	r13, r1
    394e:	76 01       	movw	r14, r12
    3950:	00 e0       	ldi	r16, 0x00	; 0
    3952:	10 e0       	ldi	r17, 0x00	; 0
    3954:	a5 01       	movw	r20, r10
    3956:	94 01       	movw	r18, r8
    3958:	60 e0       	ldi	r22, 0x00	; 0
    395a:	ce 01       	movw	r24, r28
    395c:	ce de       	rcall	.-612    	; 0x36fa <xTimerGenericCommand>
    395e:	02 c0       	rjmp	.+4      	; 0x3964 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3960:	8e 7f       	andi	r24, 0xFE	; 254
    3962:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3964:	ec 89       	ldd	r30, Y+20	; 0x14
    3966:	fd 89       	ldd	r31, Y+21	; 0x15
    3968:	ce 01       	movw	r24, r28
    396a:	19 95       	eicall
    }
    396c:	df 91       	pop	r29
    396e:	cf 91       	pop	r28
    3970:	1f 91       	pop	r17
    3972:	0f 91       	pop	r16
    3974:	ff 90       	pop	r15
    3976:	ef 90       	pop	r14
    3978:	df 90       	pop	r13
    397a:	cf 90       	pop	r12
    397c:	bf 90       	pop	r11
    397e:	af 90       	pop	r10
    3980:	9f 90       	pop	r9
    3982:	8f 90       	pop	r8
    3984:	7f 90       	pop	r7
    3986:	6f 90       	pop	r6
    3988:	5f 90       	pop	r5
    398a:	4f 90       	pop	r4
    398c:	08 95       	ret

0000398e <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    398e:	8f 92       	push	r8
    3990:	9f 92       	push	r9
    3992:	af 92       	push	r10
    3994:	bf 92       	push	r11
    3996:	cf 92       	push	r12
    3998:	df 92       	push	r13
    399a:	ef 92       	push	r14
    399c:	ff 92       	push	r15
    399e:	1f 93       	push	r17
    39a0:	cf 93       	push	r28
    39a2:	df 93       	push	r29
    39a4:	1f 92       	push	r1
    39a6:	cd b7       	in	r28, 0x3d	; 61
    39a8:	de b7       	in	r29, 0x3e	; 62
    39aa:	6b 01       	movw	r12, r22
    39ac:	7c 01       	movw	r14, r24
    39ae:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    39b0:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    39b4:	ce 01       	movw	r24, r28
    39b6:	01 96       	adiw	r24, 0x01	; 1
    39b8:	66 df       	rcall	.-308    	; 0x3886 <prvSampleTimeNow>
    39ba:	4b 01       	movw	r8, r22
    39bc:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    39be:	89 81       	ldd	r24, Y+1	; 0x01
    39c0:	81 11       	cpse	r24, r1
    39c2:	2d c0       	rjmp	.+90     	; 0x3a1e <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    39c4:	11 11       	cpse	r17, r1
    39c6:	0d c0       	rjmp	.+26     	; 0x39e2 <prvProcessTimerOrBlockTask+0x54>
    39c8:	8c 14       	cp	r8, r12
    39ca:	9d 04       	cpc	r9, r13
    39cc:	ae 04       	cpc	r10, r14
    39ce:	bf 04       	cpc	r11, r15
    39d0:	40 f0       	brcs	.+16     	; 0x39e2 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    39d2:	0e 94 21 12 	call	0x2442	; 0x2442 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    39d6:	a5 01       	movw	r20, r10
    39d8:	94 01       	movw	r18, r8
    39da:	c7 01       	movw	r24, r14
    39dc:	b6 01       	movw	r22, r12
    39de:	81 df       	rcall	.-254    	; 0x38e2 <prvProcessExpiredTimer>
    39e0:	20 c0       	rjmp	.+64     	; 0x3a22 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    39e2:	11 23       	and	r17, r17
    39e4:	41 f0       	breq	.+16     	; 0x39f6 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    39e6:	e0 91 d5 15 	lds	r30, 0x15D5	; 0x8015d5 <pxOverflowTimerList>
    39ea:	f0 91 d6 15 	lds	r31, 0x15D6	; 0x8015d6 <pxOverflowTimerList+0x1>
    39ee:	80 81       	ld	r24, Z
    39f0:	11 e0       	ldi	r17, 0x01	; 1
    39f2:	81 11       	cpse	r24, r1
    39f4:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    39f6:	b7 01       	movw	r22, r14
    39f8:	a6 01       	movw	r20, r12
    39fa:	48 19       	sub	r20, r8
    39fc:	59 09       	sbc	r21, r9
    39fe:	6a 09       	sbc	r22, r10
    3a00:	7b 09       	sbc	r23, r11
    3a02:	21 2f       	mov	r18, r17
    3a04:	80 91 d3 15 	lds	r24, 0x15D3	; 0x8015d3 <xTimerQueue>
    3a08:	90 91 d4 15 	lds	r25, 0x15D4	; 0x8015d4 <xTimerQueue+0x1>
    3a0c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3a10:	0e 94 21 12 	call	0x2442	; 0x2442 <xTaskResumeAll>
    3a14:	81 11       	cpse	r24, r1
    3a16:	05 c0       	rjmp	.+10     	; 0x3a22 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3a18:	0e 94 b5 06 	call	0xd6a	; 0xd6a <vPortYield>
    3a1c:	02 c0       	rjmp	.+4      	; 0x3a22 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3a1e:	0e 94 21 12 	call	0x2442	; 0x2442 <xTaskResumeAll>
            }
        }
    }
    3a22:	0f 90       	pop	r0
    3a24:	df 91       	pop	r29
    3a26:	cf 91       	pop	r28
    3a28:	1f 91       	pop	r17
    3a2a:	ff 90       	pop	r15
    3a2c:	ef 90       	pop	r14
    3a2e:	df 90       	pop	r13
    3a30:	cf 90       	pop	r12
    3a32:	bf 90       	pop	r11
    3a34:	af 90       	pop	r10
    3a36:	9f 90       	pop	r9
    3a38:	8f 90       	pop	r8
    3a3a:	08 95       	ret

00003a3c <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3a3c:	af 92       	push	r10
    3a3e:	bf 92       	push	r11
    3a40:	cf 92       	push	r12
    3a42:	df 92       	push	r13
    3a44:	ef 92       	push	r14
    3a46:	ff 92       	push	r15
    3a48:	0f 93       	push	r16
    3a4a:	1f 93       	push	r17
    3a4c:	cf 93       	push	r28
    3a4e:	df 93       	push	r29
    3a50:	cd b7       	in	r28, 0x3d	; 61
    3a52:	de b7       	in	r29, 0x3e	; 62
    3a54:	28 97       	sbiw	r28, 0x08	; 8
    3a56:	0f b6       	in	r0, 0x3f	; 63
    3a58:	f8 94       	cli
    3a5a:	de bf       	out	0x3e, r29	; 62
    3a5c:	0f be       	out	0x3f, r0	; 63
    3a5e:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3a60:	82 c0       	rjmp	.+260    	; 0x3b66 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3a62:	89 81       	ldd	r24, Y+1	; 0x01
    3a64:	88 23       	and	r24, r24
    3a66:	0c f4       	brge	.+2      	; 0x3a6a <prvProcessReceivedCommands+0x2e>
    3a68:	7e c0       	rjmp	.+252    	; 0x3b66 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3a6a:	ae 80       	ldd	r10, Y+6	; 0x06
    3a6c:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3a6e:	d5 01       	movw	r26, r10
    3a70:	1c 96       	adiw	r26, 0x0c	; 12
    3a72:	8d 91       	ld	r24, X+
    3a74:	9c 91       	ld	r25, X
    3a76:	1d 97       	sbiw	r26, 0x0d	; 13
    3a78:	89 2b       	or	r24, r25
    3a7a:	21 f0       	breq	.+8      	; 0x3a84 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3a7c:	c5 01       	movw	r24, r10
    3a7e:	02 96       	adiw	r24, 0x02	; 2
    3a80:	0e 94 39 06 	call	0xc72	; 0xc72 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3a84:	ce 01       	movw	r24, r28
    3a86:	08 96       	adiw	r24, 0x08	; 8
    3a88:	fe de       	rcall	.-516    	; 0x3886 <prvSampleTimeNow>
    3a8a:	8b 01       	movw	r16, r22
    3a8c:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3a8e:	e9 81       	ldd	r30, Y+1	; 0x01
    3a90:	0e 2e       	mov	r0, r30
    3a92:	00 0c       	add	r0, r0
    3a94:	ff 0b       	sbc	r31, r31
    3a96:	ea 30       	cpi	r30, 0x0A	; 10
    3a98:	f1 05       	cpc	r31, r1
    3a9a:	08 f0       	brcs	.+2      	; 0x3a9e <prvProcessReceivedCommands+0x62>
    3a9c:	64 c0       	rjmp	.+200    	; 0x3b66 <prvProcessReceivedCommands+0x12a>
    3a9e:	88 27       	eor	r24, r24
    3aa0:	ee 58       	subi	r30, 0x8E	; 142
    3aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa4:	8f 4f       	sbci	r24, 0xFF	; 255
    3aa6:	0c 94 7b 33 	jmp	0x66f6	; 0x66f6 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3aaa:	f5 01       	movw	r30, r10
    3aac:	86 89       	ldd	r24, Z+22	; 0x16
    3aae:	81 60       	ori	r24, 0x01	; 1
    3ab0:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3ab2:	ca 80       	ldd	r12, Y+2	; 0x02
    3ab4:	db 80       	ldd	r13, Y+3	; 0x03
    3ab6:	ec 80       	ldd	r14, Y+4	; 0x04
    3ab8:	fd 80       	ldd	r15, Y+5	; 0x05
    3aba:	46 85       	ldd	r20, Z+14	; 0x0e
    3abc:	57 85       	ldd	r21, Z+15	; 0x0f
    3abe:	60 89       	ldd	r22, Z+16	; 0x10
    3ac0:	71 89       	ldd	r23, Z+17	; 0x11
    3ac2:	4c 0d       	add	r20, r12
    3ac4:	5d 1d       	adc	r21, r13
    3ac6:	6e 1d       	adc	r22, r14
    3ac8:	7f 1d       	adc	r23, r15
    3aca:	c5 01       	movw	r24, r10
    3acc:	83 dd       	rcall	.-1274   	; 0x35d4 <prvInsertTimerInActiveList>
    3ace:	88 23       	and	r24, r24
    3ad0:	09 f4       	brne	.+2      	; 0x3ad4 <prvProcessReceivedCommands+0x98>
    3ad2:	49 c0       	rjmp	.+146    	; 0x3b66 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3ad4:	d5 01       	movw	r26, r10
    3ad6:	54 96       	adiw	r26, 0x14	; 20
    3ad8:	ed 91       	ld	r30, X+
    3ada:	fc 91       	ld	r31, X
    3adc:	55 97       	sbiw	r26, 0x15	; 21
    3ade:	c5 01       	movw	r24, r10
    3ae0:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3ae2:	f5 01       	movw	r30, r10
    3ae4:	86 89       	ldd	r24, Z+22	; 0x16
    3ae6:	82 ff       	sbrs	r24, 2
    3ae8:	3e c0       	rjmp	.+124    	; 0x3b66 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3aea:	4a 81       	ldd	r20, Y+2	; 0x02
    3aec:	5b 81       	ldd	r21, Y+3	; 0x03
    3aee:	6c 81       	ldd	r22, Y+4	; 0x04
    3af0:	7d 81       	ldd	r23, Y+5	; 0x05
    3af2:	86 85       	ldd	r24, Z+14	; 0x0e
    3af4:	97 85       	ldd	r25, Z+15	; 0x0f
    3af6:	a0 89       	ldd	r26, Z+16	; 0x10
    3af8:	b1 89       	ldd	r27, Z+17	; 0x11
    3afa:	9a 01       	movw	r18, r20
    3afc:	ab 01       	movw	r20, r22
    3afe:	28 0f       	add	r18, r24
    3b00:	39 1f       	adc	r19, r25
    3b02:	4a 1f       	adc	r20, r26
    3b04:	5b 1f       	adc	r21, r27
    3b06:	c1 2c       	mov	r12, r1
    3b08:	d1 2c       	mov	r13, r1
    3b0a:	76 01       	movw	r14, r12
    3b0c:	00 e0       	ldi	r16, 0x00	; 0
    3b0e:	10 e0       	ldi	r17, 0x00	; 0
    3b10:	60 e0       	ldi	r22, 0x00	; 0
    3b12:	c5 01       	movw	r24, r10
    3b14:	f2 dd       	rcall	.-1052   	; 0x36fa <xTimerGenericCommand>
    3b16:	27 c0       	rjmp	.+78     	; 0x3b66 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3b18:	d5 01       	movw	r26, r10
    3b1a:	56 96       	adiw	r26, 0x16	; 22
    3b1c:	8c 91       	ld	r24, X
    3b1e:	56 97       	sbiw	r26, 0x16	; 22
    3b20:	8e 7f       	andi	r24, 0xFE	; 254
    3b22:	56 96       	adiw	r26, 0x16	; 22
    3b24:	8c 93       	st	X, r24
                        break;
    3b26:	1f c0       	rjmp	.+62     	; 0x3b66 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3b28:	f5 01       	movw	r30, r10
    3b2a:	86 89       	ldd	r24, Z+22	; 0x16
    3b2c:	81 60       	ori	r24, 0x01	; 1
    3b2e:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3b30:	4a 81       	ldd	r20, Y+2	; 0x02
    3b32:	5b 81       	ldd	r21, Y+3	; 0x03
    3b34:	6c 81       	ldd	r22, Y+4	; 0x04
    3b36:	7d 81       	ldd	r23, Y+5	; 0x05
    3b38:	46 87       	std	Z+14, r20	; 0x0e
    3b3a:	57 87       	std	Z+15, r21	; 0x0f
    3b3c:	60 8b       	std	Z+16, r22	; 0x10
    3b3e:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3b40:	40 0f       	add	r20, r16
    3b42:	51 1f       	adc	r21, r17
    3b44:	62 1f       	adc	r22, r18
    3b46:	73 1f       	adc	r23, r19
    3b48:	68 01       	movw	r12, r16
    3b4a:	79 01       	movw	r14, r18
    3b4c:	c5 01       	movw	r24, r10
    3b4e:	42 dd       	rcall	.-1404   	; 0x35d4 <prvInsertTimerInActiveList>
                        break;
    3b50:	0a c0       	rjmp	.+20     	; 0x3b66 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3b52:	f5 01       	movw	r30, r10
    3b54:	86 89       	ldd	r24, Z+22	; 0x16
    3b56:	81 fd       	sbrc	r24, 1
    3b58:	04 c0       	rjmp	.+8      	; 0x3b62 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3b5a:	c5 01       	movw	r24, r10
    3b5c:	0e 94 aa 05 	call	0xb54	; 0xb54 <vPortFree>
    3b60:	02 c0       	rjmp	.+4      	; 0x3b66 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3b62:	8e 7f       	andi	r24, 0xFE	; 254
    3b64:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3b66:	20 e0       	ldi	r18, 0x00	; 0
    3b68:	30 e0       	ldi	r19, 0x00	; 0
    3b6a:	a9 01       	movw	r20, r18
    3b6c:	be 01       	movw	r22, r28
    3b6e:	6f 5f       	subi	r22, 0xFF	; 255
    3b70:	7f 4f       	sbci	r23, 0xFF	; 255
    3b72:	80 91 d3 15 	lds	r24, 0x15D3	; 0x8015d3 <xTimerQueue>
    3b76:	90 91 d4 15 	lds	r25, 0x15D4	; 0x8015d4 <xTimerQueue+0x1>
    3b7a:	0e 94 b8 09 	call	0x1370	; 0x1370 <xQueueReceive>
    3b7e:	81 11       	cpse	r24, r1
    3b80:	70 cf       	rjmp	.-288    	; 0x3a62 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3b82:	28 96       	adiw	r28, 0x08	; 8
    3b84:	0f b6       	in	r0, 0x3f	; 63
    3b86:	f8 94       	cli
    3b88:	de bf       	out	0x3e, r29	; 62
    3b8a:	0f be       	out	0x3f, r0	; 63
    3b8c:	cd bf       	out	0x3d, r28	; 61
    3b8e:	df 91       	pop	r29
    3b90:	cf 91       	pop	r28
    3b92:	1f 91       	pop	r17
    3b94:	0f 91       	pop	r16
    3b96:	ff 90       	pop	r15
    3b98:	ef 90       	pop	r14
    3b9a:	df 90       	pop	r13
    3b9c:	cf 90       	pop	r12
    3b9e:	bf 90       	pop	r11
    3ba0:	af 90       	pop	r10
    3ba2:	08 95       	ret

00003ba4 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3ba4:	08 95       	ret

00003ba6 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3ba6:	84 b1       	in	r24, 0x04	; 4
    3ba8:	80 68       	ori	r24, 0x80	; 128
    3baa:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3bac:	85 b1       	in	r24, 0x05	; 5
    3bae:	80 68       	ori	r24, 0x80	; 128
    3bb0:	85 b9       	out	0x05, r24	; 5
    3bb2:	08 95       	ret

00003bb4 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3bb4:	83 b1       	in	r24, 0x03	; 3
    3bb6:	80 68       	ori	r24, 0x80	; 128
    3bb8:	83 b9       	out	0x03, r24	; 3
    3bba:	08 95       	ret

00003bbc <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3bbc:	f4 df       	rcall	.-24     	; 0x3ba6 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3bbe:	2f ef       	ldi	r18, 0xFF	; 255
    3bc0:	80 e7       	ldi	r24, 0x70	; 112
    3bc2:	92 e0       	ldi	r25, 0x02	; 2
    3bc4:	21 50       	subi	r18, 0x01	; 1
    3bc6:	80 40       	sbci	r24, 0x00	; 0
    3bc8:	90 40       	sbci	r25, 0x00	; 0
    3bca:	e1 f7       	brne	.-8      	; 0x3bc4 <vApplicationMallocFailedHook+0x8>
    3bcc:	00 c0       	rjmp	.+0      	; 0x3bce <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3bce:	00 00       	nop
    3bd0:	f1 df       	rcall	.-30     	; 0x3bb4 <prvBlinkMainLed>
    3bd2:	f5 cf       	rjmp	.-22     	; 0x3bbe <vApplicationMallocFailedHook+0x2>

00003bd4 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3bd4:	e8 df       	rcall	.-48     	; 0x3ba6 <prvSetMainLedOn>
    3bd6:	2f ef       	ldi	r18, 0xFF	; 255
    3bd8:	87 ea       	ldi	r24, 0xA7	; 167
    3bda:	91 e6       	ldi	r25, 0x61	; 97
    3bdc:	21 50       	subi	r18, 0x01	; 1
    3bde:	80 40       	sbci	r24, 0x00	; 0
    3be0:	90 40       	sbci	r25, 0x00	; 0
    3be2:	e1 f7       	brne	.-8      	; 0x3bdc <vApplicationStackOverflowHook+0x8>
    3be4:	00 c0       	rjmp	.+0      	; 0x3be6 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3be6:	00 00       	nop
    3be8:	e5 df       	rcall	.-54     	; 0x3bb4 <prvBlinkMainLed>
    3bea:	f5 cf       	rjmp	.-22     	; 0x3bd6 <vApplicationStackOverflowHook+0x2>

00003bec <hih8120_handler_initialise>:
const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)


void hih820_handler_task( void *pvParameters );

void hih8120_handler_initialise(UBaseType_t hih8120_task_priority){
    3bec:	ef 92       	push	r14
    3bee:	ff 92       	push	r15
    3bf0:	0f 93       	push	r16
    3bf2:	08 2f       	mov	r16, r24
	if ( HIH8120_OK == hih8120_initialise() ){
    3bf4:	9c d2       	rcall	.+1336   	; 0x412e <hih8120_initialise>
    3bf6:	81 11       	cpse	r24, r1
    3bf8:	0c c0       	rjmp	.+24     	; 0x3c12 <hih8120_handler_initialise+0x26>
			printf("%d\n",HIH8120_OK);
    3bfa:	1f 92       	push	r1
    3bfc:	1f 92       	push	r1
    3bfe:	87 e0       	ldi	r24, 0x07	; 7
    3c00:	93 e0       	ldi	r25, 0x03	; 3
    3c02:	9f 93       	push	r25
    3c04:	8f 93       	push	r24
    3c06:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <printf>
    3c0a:	0f 90       	pop	r0
    3c0c:	0f 90       	pop	r0
    3c0e:	0f 90       	pop	r0
    3c10:	0f 90       	pop	r0
	}
	xTaskCreate(
    3c12:	e1 2c       	mov	r14, r1
    3c14:	f1 2c       	mov	r15, r1
    3c16:	20 e0       	ldi	r18, 0x00	; 0
    3c18:	30 e0       	ldi	r19, 0x00	; 0
    3c1a:	40 ec       	ldi	r20, 0xC0	; 192
    3c1c:	50 e0       	ldi	r21, 0x00	; 0
    3c1e:	62 e7       	ldi	r22, 0x72	; 114
    3c20:	73 e0       	ldi	r23, 0x03	; 3
    3c22:	89 e3       	ldi	r24, 0x39	; 57
    3c24:	9e e1       	ldi	r25, 0x1E	; 30
    3c26:	0e 94 5d 10 	call	0x20ba	; 0x20ba <xTaskCreate>
	,  "Hih820Hand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  hih8120_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3c2a:	0f 91       	pop	r16
    3c2c:	ff 90       	pop	r15
    3c2e:	ef 90       	pop	r14
    3c30:	08 95       	ret

00003c32 <hih820_getHumidityInUint16>:
		hih8120_run();
	}
}

uint16_t hih820_getHumidityInUint16(){
	return humidityIn16/10;
    3c32:	20 91 f1 15 	lds	r18, 0x15F1	; 0x8015f1 <humidityIn16>
    3c36:	30 91 f2 15 	lds	r19, 0x15F2	; 0x8015f2 <humidityIn16+0x1>
    3c3a:	ad ec       	ldi	r26, 0xCD	; 205
    3c3c:	bc ec       	ldi	r27, 0xCC	; 204
    3c3e:	0e 94 83 33 	call	0x6706	; 0x6706 <__umulhisi3>
}
    3c42:	96 95       	lsr	r25
    3c44:	87 95       	ror	r24
    3c46:	96 95       	lsr	r25
    3c48:	87 95       	ror	r24
    3c4a:	96 95       	lsr	r25
    3c4c:	87 95       	ror	r24
    3c4e:	08 95       	ret

00003c50 <hih820_getTemperatureInUint16>:

int16_t hih820_getTemperatureInUint16(){
	return temperatureIn16/10;
    3c50:	80 91 ef 15 	lds	r24, 0x15EF	; 0x8015ef <temperatureIn16>
    3c54:	90 91 f0 15 	lds	r25, 0x15F0	; 0x8015f0 <temperatureIn16+0x1>
    3c58:	6a e0       	ldi	r22, 0x0A	; 10
    3c5a:	70 e0       	ldi	r23, 0x00	; 0
    3c5c:	0e 94 46 33 	call	0x668c	; 0x668c <__divmodhi4>
    3c60:	cb 01       	movw	r24, r22
}
    3c62:	08 95       	ret

00003c64 <hih820_aFunctionToSetBits>:
void hih820_aFunctionToSetBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Set bit 0 and bit 4 in xEventGroup. */
  uxBits = xEventGroupSetBits(
    3c64:	40 e1       	ldi	r20, 0x10	; 16
    3c66:	50 e0       	ldi	r21, 0x00	; 0
    3c68:	60 e0       	ldi	r22, 0x00	; 0
    3c6a:	70 e0       	ldi	r23, 0x00	; 0
    3c6c:	0c 94 00 04 	jmp	0x800	; 0x800 <xEventGroupSetBits>
    3c70:	08 95       	ret

00003c72 <hih820_handler_task>:
	,  NULL );
}

inline void hih8120_init(void *pvParameters){
	(void)pvParameters;
	xLastWakeTime = xTaskGetTickCount();
    3c72:	0e 94 e7 10 	call	0x21ce	; 0x21ce <xTaskGetTickCount>
    3c76:	60 93 be 17 	sts	0x17BE, r22	; 0x8017be <xLastWakeTime>
    3c7a:	70 93 bf 17 	sts	0x17BF, r23	; 0x8017bf <xLastWakeTime+0x1>
    3c7e:	80 93 c0 17 	sts	0x17C0, r24	; 0x8017c0 <xLastWakeTime+0x2>
    3c82:	90 93 c1 17 	sts	0x17C1, r25	; 0x8017c1 <xLastWakeTime+0x3>
}

inline void hih8120_run(void){
	xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3c86:	48 ea       	ldi	r20, 0xA8	; 168
    3c88:	58 e4       	ldi	r21, 0x48	; 72
    3c8a:	60 e0       	ldi	r22, 0x00	; 0
    3c8c:	70 e0       	ldi	r23, 0x00	; 0
    3c8e:	8e eb       	ldi	r24, 0xBE	; 190
    3c90:	97 e1       	ldi	r25, 0x17	; 23
    3c92:	0e 94 fd 12 	call	0x25fa	; 0x25fa <xTaskDelayUntil>
	if (HIH8120_OK == hih8120_wakeup())
    3c96:	63 d2       	rcall	.+1222   	; 0x415e <hih8120_wakeup>
    3c98:	81 11       	cpse	r24, r1
    3c9a:	f5 cf       	rjmp	.-22     	; 0x3c86 <hih820_handler_task+0x14>
	{
		vTaskDelay(50);
    3c9c:	62 e3       	ldi	r22, 0x32	; 50
    3c9e:	70 e0       	ldi	r23, 0x00	; 0
    3ca0:	80 e0       	ldi	r24, 0x00	; 0
    3ca2:	90 e0       	ldi	r25, 0x00	; 0
    3ca4:	0e 94 62 13 	call	0x26c4	; 0x26c4 <vTaskDelay>
		if (HIH8120_OK == hih8120_measure())
    3ca8:	6f d2       	rcall	.+1246   	; 0x4188 <hih8120_measure>
    3caa:	81 11       	cpse	r24, r1
    3cac:	ec cf       	rjmp	.-40     	; 0x3c86 <hih820_handler_task+0x14>
		{
			vTaskDelay(1);
    3cae:	61 e0       	ldi	r22, 0x01	; 1
    3cb0:	70 e0       	ldi	r23, 0x00	; 0
    3cb2:	80 e0       	ldi	r24, 0x00	; 0
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	0e 94 62 13 	call	0x26c4	; 0x26c4 <vTaskDelay>
			humidityIn16 = hih8120_getHumidityPercent_x10();
    3cba:	8c d2       	rcall	.+1304   	; 0x41d4 <hih8120_getHumidityPercent_x10>
    3cbc:	90 93 f2 15 	sts	0x15F2, r25	; 0x8015f2 <humidityIn16+0x1>
    3cc0:	80 93 f1 15 	sts	0x15F1, r24	; 0x8015f1 <humidityIn16>
			temperatureIn16 = hih8120_getTemperature_x10();
    3cc4:	ad d2       	rcall	.+1370   	; 0x4220 <hih8120_getTemperature_x10>
    3cc6:	90 93 f0 15 	sts	0x15F0, r25	; 0x8015f0 <temperatureIn16+0x1>
    3cca:	80 93 ef 15 	sts	0x15EF, r24	; 0x8015ef <temperatureIn16>
			hih820_aFunctionToSetBits(Application_getEventGroup());
    3cce:	0e 94 89 01 	call	0x312	; 0x312 <Application_getEventGroup>
    3cd2:	c8 df       	rcall	.-112    	; 0x3c64 <hih820_aFunctionToSetBits>
    3cd4:	d8 cf       	rjmp	.-80     	; 0x3c86 <hih820_handler_task+0x14>

00003cd6 <WindowController_handler_initialise>:
int8_t percent = 0;
SemaphoreHandle_t semaphore_mutex = NULL;

void WindowController_handler_task( void *pvParameters );

void WindowController_handler_initialise(UBaseType_t WindowController_task_priority){
    3cd6:	ef 92       	push	r14
    3cd8:	ff 92       	push	r15
    3cda:	0f 93       	push	r16
	
	xTaskCreate(
    3cdc:	e1 2c       	mov	r14, r1
    3cde:	f1 2c       	mov	r15, r1
    3ce0:	08 2f       	mov	r16, r24
    3ce2:	20 e0       	ldi	r18, 0x00	; 0
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	40 ec       	ldi	r20, 0xC0	; 192
    3ce8:	50 e0       	ldi	r21, 0x00	; 0
    3cea:	6d e7       	ldi	r22, 0x7D	; 125
    3cec:	73 e0       	ldi	r23, 0x03	; 3
    3cee:	84 e9       	ldi	r24, 0x94	; 148
    3cf0:	9e e1       	ldi	r25, 0x1E	; 30
    3cf2:	0e 94 5d 10 	call	0x20ba	; 0x20ba <xTaskCreate>
	,  "WindowControllerHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  WindowController_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3cf6:	0f 91       	pop	r16
    3cf8:	ff 90       	pop	r15
    3cfa:	ef 90       	pop	r14
    3cfc:	08 95       	ret

00003cfe <WindowController_init>:

inline void WindowController_init(void *pvParameters){
    3cfe:	0f 93       	push	r16
	printf("startWindowController \n");
    3d00:	82 e9       	ldi	r24, 0x92	; 146
    3d02:	93 e0       	ldi	r25, 0x03	; 3
    3d04:	0e 94 67 36 	call	0x6cce	; 0x6cce <puts>
	(void)pvParameters;
	semaphore_mutex = get_mutex();
    3d08:	0e 94 a1 02 	call	0x542	; 0x542 <get_mutex>
    3d0c:	90 93 f4 15 	sts	0x15F4, r25	; 0x8015f4 <semaphore_mutex+0x1>
    3d10:	80 93 f3 15 	sts	0x15F3, r24	; 0x8015f3 <semaphore_mutex>
	xSemaphoreGive(semaphore_mutex);
    3d14:	00 e0       	ldi	r16, 0x00	; 0
    3d16:	20 e0       	ldi	r18, 0x00	; 0
    3d18:	30 e0       	ldi	r19, 0x00	; 0
    3d1a:	a9 01       	movw	r20, r18
    3d1c:	60 e0       	ldi	r22, 0x00	; 0
    3d1e:	70 e0       	ldi	r23, 0x00	; 0
    3d20:	0e 94 cd 08 	call	0x119a	; 0x119a <xQueueGenericSend>
}
    3d24:	0f 91       	pop	r16
    3d26:	08 95       	ret

00003d28 <WindowController_handler_task>:
	}
}

void WindowController_handler_task(void *pvParameters)
{
	WindowController_init(pvParameters);
    3d28:	ea df       	rcall	.-44     	; 0x3cfe <WindowController_init>
	semaphore_mutex = get_mutex();
	xSemaphoreGive(semaphore_mutex);
}

inline void WindowController_run(){
	if(xSemaphoreTake(semaphore_mutex, portMAX_DELAY)){
    3d2a:	4f ef       	ldi	r20, 0xFF	; 255
    3d2c:	5f ef       	ldi	r21, 0xFF	; 255
    3d2e:	ba 01       	movw	r22, r20
    3d30:	80 91 f3 15 	lds	r24, 0x15F3	; 0x8015f3 <semaphore_mutex>
    3d34:	90 91 f4 15 	lds	r25, 0x15F4	; 0x8015f4 <semaphore_mutex+0x1>
    3d38:	0e 94 47 0a 	call	0x148e	; 0x148e <xQueueSemaphoreTake>
    3d3c:	88 23       	and	r24, r24
    3d3e:	a9 f3       	breq	.-22     	; 0x3d2a <WindowController_handler_task+0x2>
		rc_servo_setPosition(0, configuration_get_windows_data());
    3d40:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <configuration_get_windows_data>
    3d44:	68 2f       	mov	r22, r24
    3d46:	80 e0       	ldi	r24, 0x00	; 0
    3d48:	a6 d7       	rcall	.+3916   	; 0x4c96 <rc_servo_setPosition>
		percent = configuration_get_windows_data();
    3d4a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <configuration_get_windows_data>
    3d4e:	80 93 f5 15 	sts	0x15F5, r24	; 0x8015f5 <percent>
		xSemaphoreGive(semaphore_mutex);
    3d52:	00 e0       	ldi	r16, 0x00	; 0
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	a9 01       	movw	r20, r18
    3d5a:	60 e0       	ldi	r22, 0x00	; 0
    3d5c:	70 e0       	ldi	r23, 0x00	; 0
    3d5e:	80 91 f3 15 	lds	r24, 0x15F3	; 0x8015f3 <semaphore_mutex>
    3d62:	90 91 f4 15 	lds	r25, 0x15F4	; 0x8015f4 <semaphore_mutex+0x1>
    3d66:	0e 94 cd 08 	call	0x119a	; 0x119a <xQueueGenericSend>
    3d6a:	df cf       	rjmp	.-66     	; 0x3d2a <WindowController_handler_task+0x2>

00003d6c <main>:
/*-----------------------------------------------------------*/
int main(void)
{
	// Must be done as the very first thing!!
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3d6c:	80 e0       	ldi	r24, 0x00	; 0
    3d6e:	0e 94 37 2a 	call	0x546e	; 0x546e <stdio_initialise>
	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(6); // Priority 5 for internal task
    3d72:	86 e0       	ldi	r24, 0x06	; 6
    3d74:	0e 94 3e 2b 	call	0x567c	; 0x567c <status_leds_initialise>
	//Initialize Application
	Application_handler_initialise(5);
    3d78:	85 e0       	ldi	r24, 0x05	; 5
    3d7a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <Application_handler_initialise>
	//initialize CO2Sensor
	mh_z19_initialise(ser_USART3);
    3d7e:	83 e0       	ldi	r24, 0x03	; 3
    3d80:	20 d7       	rcall	.+3648   	; 0x4bc2 <mh_z19_initialise>
	//create CO2 task
	CO2Sensor_handler_initialise(4);
    3d82:	84 e0       	ldi	r24, 0x04	; 4
    3d84:	0e 94 06 02 	call	0x40c	; 0x40c <CO2Sensor_handler_initialise>
	//Create humidity temperature task and start with priority 3
	hih8120_handler_initialise(3);
    3d88:	83 e0       	ldi	r24, 0x03	; 3
	//initialize rc_servo
	rc_servo_initialise();
    3d8a:	30 df       	rcall	.-416    	; 0x3bec <hih8120_handler_initialise>
    3d8c:	9c d7       	rcall	.+3896   	; 0x4cc6 <rc_servo_initialise>
	// Initialise the LoRaWAN driver with down-link buffer
	downLinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    3d8e:	41 e0       	ldi	r20, 0x01	; 1
    3d90:	60 e0       	ldi	r22, 0x00	; 0
    3d92:	70 e0       	ldi	r23, 0x00	; 0
    3d94:	8c e2       	ldi	r24, 0x2C	; 44
    3d96:	90 e0       	ldi	r25, 0x00	; 0
    3d98:	0e 94 57 0c 	call	0x18ae	; 0x18ae <xStreamBufferGenericCreate>
    3d9c:	90 93 ca 17 	sts	0x17CA, r25	; 0x8017ca <downLinkMessageBufferHandle+0x1>
    3da0:	80 93 c9 17 	sts	0x17C9, r24	; 0x8017c9 <downLinkMessageBufferHandle>
	lora_driver_initialise(1, downLinkMessageBufferHandle);
    3da4:	bc 01       	movw	r22, r24
    3da6:	81 e0       	ldi	r24, 0x01	; 1
	// Create LoRaWAN task and start it up with priority 2
	UpLinkHandler_lora_handler_initialise(2);
    3da8:	65 d3       	rcall	.+1738   	; 0x4474 <lora_driver_initialise>
    3daa:	82 e0       	ldi	r24, 0x02	; 2
    3dac:	7f d1       	rcall	.+766    	; 0x40ac <UpLinkHandler_lora_handler_initialise>
	//Create LoRaWAN task and start with priority 1
	DownLinkHandler_lora_handler_initialise(1,downLinkMessageBufferHandle);
    3dae:	60 91 c9 17 	lds	r22, 0x17C9	; 0x8017c9 <downLinkMessageBufferHandle>
    3db2:	70 91 ca 17 	lds	r23, 0x17CA	; 0x8017ca <downLinkMessageBufferHandle+0x1>
    3db6:	81 e0       	ldi	r24, 0x01	; 1
    3db8:	0e 94 f7 02 	call	0x5ee	; 0x5ee <DownLinkHandler_lora_handler_initialise>
	//Create windowController and start it up with priority 3
	WindowController_handler_initialise(1);
    3dbc:	81 e0       	ldi	r24, 0x01	; 1
    3dbe:	8b df       	rcall	.-234    	; 0x3cd6 <WindowController_handler_initialise>
	
	printf("Program Started!!\n");
    3dc0:	89 ea       	ldi	r24, 0xA9	; 169
    3dc2:	93 e0       	ldi	r25, 0x03	; 3
    3dc4:	0e 94 67 36 	call	0x6cce	; 0x6cce <puts>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    3dc8:	0e 94 a9 10 	call	0x2152	; 0x2152 <vTaskStartScheduler>
    3dcc:	ff cf       	rjmp	.-2      	; 0x3dcc <main+0x60>

00003dce <SensorDataPackageHandler_SetCO2>:
int16_t tempIn16 = 0.0;
uint16_t co2_ppmIn16 = 0.0;
static lora_driver_payload_t _uplink_payload;

void SensorDataPackageHandler_SetCO2(uint16_t co2){
	co2_ppmIn16 = co2;
    3dce:	90 93 0d 16 	sts	0x160D, r25	; 0x80160d <co2_ppmIn16+0x1>
    3dd2:	80 93 0c 16 	sts	0x160C, r24	; 0x80160c <co2_ppmIn16>
    3dd6:	08 95       	ret

00003dd8 <SensorDataPackageHandler_SetHumidity>:
}

void SensorDataPackageHandler_SetHumidity(uint16_t humidity){
	humIn16 = humidity;
    3dd8:	90 93 11 16 	sts	0x1611, r25	; 0x801611 <humIn16+0x1>
    3ddc:	80 93 10 16 	sts	0x1610, r24	; 0x801610 <humIn16>
    3de0:	08 95       	ret

00003de2 <SensorDataPackageHandler_SetTemperature>:
}

void SensorDataPackageHandler_SetTemperature(int16_t temperature){
	tempIn16 = temperature;
    3de2:	90 93 0f 16 	sts	0x160F, r25	; 0x80160f <tempIn16+0x1>
    3de6:	80 93 0e 16 	sts	0x160E, r24	; 0x80160e <tempIn16>
    3dea:	08 95       	ret

00003dec <SensorDataPackageHandler_getLoRaPayload>:
}

lora_driver_payload_t SensorDataPackageHandler_getLoRaPayload(){
    3dec:	cf 93       	push	r28
    3dee:	df 93       	push	r29
    3df0:	ec 01       	movw	r28, r24
	printf("STARTEDSensorDataPackageHandler\n");
    3df2:	8b eb       	ldi	r24, 0xBB	; 187
    3df4:	93 e0       	ldi	r25, 0x03	; 3
    3df6:	0e 94 67 36 	call	0x6cce	; 0x6cce <puts>
	printf("and this is the changed hum %u\n", humIn16);
    3dfa:	80 91 11 16 	lds	r24, 0x1611	; 0x801611 <humIn16+0x1>
    3dfe:	8f 93       	push	r24
    3e00:	80 91 10 16 	lds	r24, 0x1610	; 0x801610 <humIn16>
    3e04:	8f 93       	push	r24
    3e06:	8b ed       	ldi	r24, 0xDB	; 219
    3e08:	93 e0       	ldi	r25, 0x03	; 3
    3e0a:	9f 93       	push	r25
    3e0c:	8f 93       	push	r24
    3e0e:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <printf>
	printf("and also the changed temp %u\n", tempIn16);
    3e12:	80 91 0f 16 	lds	r24, 0x160F	; 0x80160f <tempIn16+0x1>
    3e16:	8f 93       	push	r24
    3e18:	80 91 0e 16 	lds	r24, 0x160E	; 0x80160e <tempIn16>
    3e1c:	8f 93       	push	r24
    3e1e:	8b ef       	ldi	r24, 0xFB	; 251
    3e20:	93 e0       	ldi	r25, 0x03	; 3
    3e22:	9f 93       	push	r25
    3e24:	8f 93       	push	r24
    3e26:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <printf>
	printf("and also the changed CO2 %u\n", co2_ppmIn16);
    3e2a:	80 91 0d 16 	lds	r24, 0x160D	; 0x80160d <co2_ppmIn16+0x1>
    3e2e:	8f 93       	push	r24
    3e30:	80 91 0c 16 	lds	r24, 0x160C	; 0x80160c <co2_ppmIn16>
    3e34:	8f 93       	push	r24
    3e36:	89 e1       	ldi	r24, 0x19	; 25
    3e38:	94 e0       	ldi	r25, 0x04	; 4
    3e3a:	9f 93       	push	r25
    3e3c:	8f 93       	push	r24
    3e3e:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <printf>
	
	_uplink_payload.len = 6;
    3e42:	e6 ef       	ldi	r30, 0xF6	; 246
    3e44:	f5 e1       	ldi	r31, 0x15	; 21
    3e46:	86 e0       	ldi	r24, 0x06	; 6
    3e48:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.portNo = 2;
    3e4a:	82 e0       	ldi	r24, 0x02	; 2
    3e4c:	80 83       	st	Z, r24
	_uplink_payload.bytes[0] = humIn16 >> 8;
    3e4e:	80 91 10 16 	lds	r24, 0x1610	; 0x801610 <humIn16>
    3e52:	90 91 11 16 	lds	r25, 0x1611	; 0x801611 <humIn16+0x1>
    3e56:	92 83       	std	Z+2, r25	; 0x02
	_uplink_payload.bytes[1] = humIn16 & 0xFF;
    3e58:	83 83       	std	Z+3, r24	; 0x03
	_uplink_payload.bytes[2] = tempIn16 >> 8;
    3e5a:	80 91 0e 16 	lds	r24, 0x160E	; 0x80160e <tempIn16>
    3e5e:	90 91 0f 16 	lds	r25, 0x160F	; 0x80160f <tempIn16+0x1>
    3e62:	94 83       	std	Z+4, r25	; 0x04
	_uplink_payload.bytes[3] = tempIn16 & 0xFF;
    3e64:	85 83       	std	Z+5, r24	; 0x05
	_uplink_payload.bytes[4] = co2_ppmIn16 >> 8;
    3e66:	80 91 0c 16 	lds	r24, 0x160C	; 0x80160c <co2_ppmIn16>
    3e6a:	90 91 0d 16 	lds	r25, 0x160D	; 0x80160d <co2_ppmIn16+0x1>
    3e6e:	96 83       	std	Z+6, r25	; 0x06
	_uplink_payload.bytes[5] = co2_ppmIn16 & 0xFF;
    3e70:	87 83       	std	Z+7, r24	; 0x07
	return _uplink_payload;
    3e72:	86 e1       	ldi	r24, 0x16	; 22
    3e74:	de 01       	movw	r26, r28
    3e76:	01 90       	ld	r0, Z+
    3e78:	0d 92       	st	X+, r0
    3e7a:	8a 95       	dec	r24
    3e7c:	e1 f7       	brne	.-8      	; 0x3e76 <SensorDataPackageHandler_getLoRaPayload+0x8a>
    3e7e:	8d b7       	in	r24, 0x3d	; 61
    3e80:	9e b7       	in	r25, 0x3e	; 62
    3e82:	0c 96       	adiw	r24, 0x0c	; 12
    3e84:	0f b6       	in	r0, 0x3f	; 63
    3e86:	f8 94       	cli
    3e88:	9e bf       	out	0x3e, r25	; 62
    3e8a:	0f be       	out	0x3f, r0	; 63
    3e8c:	8d bf       	out	0x3d, r24	; 61
    3e8e:	ce 01       	movw	r24, r28
    3e90:	df 91       	pop	r29
    3e92:	cf 91       	pop	r28
    3e94:	08 95       	ret

00003e96 <_lora_setup>:
	,  UpLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    3e96:	cf 93       	push	r28
    3e98:	df 93       	push	r29
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3e9a:	81 e0       	ldi	r24, 0x01	; 1
    3e9c:	0e 94 8c 2b 	call	0x5718	; 0x5718 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3ea0:	37 d3       	rcall	.+1646   	; 0x4510 <lora_driver_rn2483FactoryReset>
    3ea2:	b3 d5       	rcall	.+2918   	; 0x4a0a <lora_driver_mapReturnCodeToText>
    3ea4:	9f 93       	push	r25
    3ea6:	8f 93       	push	r24
    3ea8:	86 e3       	ldi	r24, 0x36	; 54
    3eaa:	94 e0       	ldi	r25, 0x04	; 4
    3eac:	9f 93       	push	r25
    3eae:	8f 93       	push	r24
    3eb0:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3eb4:	ab d4       	rcall	.+2390   	; 0x480c <lora_driver_configureToEu868>
    3eb6:	a9 d5       	rcall	.+2898   	; 0x4a0a <lora_driver_mapReturnCodeToText>
    3eb8:	9f 93       	push	r25
    3eba:	8f 93       	push	r24
    3ebc:	89 e4       	ldi	r24, 0x49	; 73
    3ebe:	94 e0       	ldi	r25, 0x04	; 4
    3ec0:	9f 93       	push	r25
    3ec2:	8f 93       	push	r24
    3ec4:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <printf>
    3ec8:	88 e2       	ldi	r24, 0x28	; 40

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3eca:	96 e1       	ldi	r25, 0x16	; 22
    3ecc:	33 d3       	rcall	.+1638   	; 0x4534 <lora_driver_getRn2483Hweui>
    3ece:	9d d5       	rcall	.+2874   	; 0x4a0a <lora_driver_mapReturnCodeToText>
    3ed0:	c8 e2       	ldi	r28, 0x28	; 40
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3ed2:	d6 e1       	ldi	r29, 0x16	; 22
    3ed4:	df 93       	push	r29
    3ed6:	cf 93       	push	r28
    3ed8:	9f 93       	push	r25
    3eda:	8f 93       	push	r24
    3edc:	82 e6       	ldi	r24, 0x62	; 98
    3ede:	94 e0       	ldi	r25, 0x04	; 4
    3ee0:	9f 93       	push	r25
    3ee2:	8f 93       	push	r24
    3ee4:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <printf>
    3ee8:	ce 01       	movw	r24, r28

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3eea:	40 d3       	rcall	.+1664   	; 0x456c <lora_driver_setDeviceIdentifier>
    3eec:	8e d5       	rcall	.+2844   	; 0x4a0a <lora_driver_mapReturnCodeToText>
    3eee:	9f 93       	push	r25
    3ef0:	8f 93       	push	r24
    3ef2:	df 93       	push	r29
    3ef4:	cf 93       	push	r28
    3ef6:	86 e7       	ldi	r24, 0x76	; 118
    3ef8:	94 e0       	ldi	r25, 0x04	; 4
    3efa:	9f 93       	push	r25
    3efc:	8f 93       	push	r24
    3efe:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <printf>
    3f02:	ae 01       	movw	r20, r28

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3f04:	6b e8       	ldi	r22, 0x8B	; 139
    3f06:	74 e0       	ldi	r23, 0x04	; 4
    3f08:	8c ea       	ldi	r24, 0xAC	; 172
    3f0a:	94 e0       	ldi	r25, 0x04	; 4
    3f0c:	5d d5       	rcall	.+2746   	; 0x49c8 <lora_driver_setOtaaIdentity>
    3f0e:	7d d5       	rcall	.+2810   	; 0x4a0a <lora_driver_mapReturnCodeToText>
    3f10:	9f 93       	push	r25
    3f12:	8f 93       	push	r24
    3f14:	df 93       	push	r29
    3f16:	cf 93       	push	r28
    3f18:	8b e8       	ldi	r24, 0x8B	; 139
    3f1a:	94 e0       	ldi	r25, 0x04	; 4
    3f1c:	9f 93       	push	r25
    3f1e:	8f 93       	push	r24
    3f20:	8c ea       	ldi	r24, 0xAC	; 172
    3f22:	94 e0       	ldi	r25, 0x04	; 4
    3f24:	9f 93       	push	r25
    3f26:	8f 93       	push	r24
    3f28:	8d eb       	ldi	r24, 0xBD	; 189
    3f2a:	94 e0       	ldi	r25, 0x04	; 4
    3f2c:	9f 93       	push	r25
    3f2e:	8f 93       	push	r24
    3f30:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <printf>
    3f34:	4e d3       	rcall	.+1692   	; 0x45d2 <lora_driver_saveMac>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3f36:	69 d5       	rcall	.+2770   	; 0x4a0a <lora_driver_mapReturnCodeToText>
    3f38:	9f 93       	push	r25
    3f3a:	8f 93       	push	r24
    3f3c:	83 ef       	ldi	r24, 0xF3	; 243
    3f3e:	94 e0       	ldi	r25, 0x04	; 4
    3f40:	9f 93       	push	r25
    3f42:	8f 93       	push	r24
    3f44:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <printf>
    3f48:	8d b7       	in	r24, 0x3d	; 61

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3f4a:	9e b7       	in	r25, 0x3e	; 62
    3f4c:	82 96       	adiw	r24, 0x22	; 34
    3f4e:	0f b6       	in	r0, 0x3f	; 63
    3f50:	f8 94       	cli
    3f52:	9e bf       	out	0x3e, r25	; 62
    3f54:	0f be       	out	0x3f, r0	; 63
    3f56:	8d bf       	out	0x3d, r24	; 61
    3f58:	81 e0       	ldi	r24, 0x01	; 1
    3f5a:	35 d4       	rcall	.+2154   	; 0x47c6 <lora_driver_setAdaptiveDataRate>
    3f5c:	56 d5       	rcall	.+2732   	; 0x4a0a <lora_driver_mapReturnCodeToText>
    3f5e:	9f 93       	push	r25
    3f60:	8f 93       	push	r24
    3f62:	82 e0       	ldi	r24, 0x02	; 2
    3f64:	95 e0       	ldi	r25, 0x05	; 5
    3f66:	9f 93       	push	r25
    3f68:	8f 93       	push	r24
    3f6a:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <printf>
    3f6e:	84 ef       	ldi	r24, 0xF4	; 244

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3f70:	91 e0       	ldi	r25, 0x01	; 1
    3f72:	34 d4       	rcall	.+2152   	; 0x47dc <lora_driver_setReceiveDelay>
    3f74:	4a d5       	rcall	.+2708   	; 0x4a0a <lora_driver_mapReturnCodeToText>
    3f76:	9f 93       	push	r25
    3f78:	8f 93       	push	r24
    3f7a:	81 e0       	ldi	r24, 0x01	; 1
    3f7c:	8f 93       	push	r24
    3f7e:	84 ef       	ldi	r24, 0xF4	; 244
    3f80:	8f 93       	push	r24
    3f82:	83 e2       	ldi	r24, 0x23	; 35
    3f84:	95 e0       	ldi	r25, 0x05	; 5
    3f86:	9f 93       	push	r25
    3f88:	8f 93       	push	r24
    3f8a:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <printf>
    3f8e:	8d b7       	in	r24, 0x3d	; 61
    3f90:	9e b7       	in	r25, 0x3e	; 62
    3f92:	0a 96       	adiw	r24, 0x0a	; 10
    3f94:	0f b6       	in	r0, 0x3f	; 63
    3f96:	f8 94       	cli
    3f98:	9e bf       	out	0x3e, r25	; 62
    3f9a:	0f be       	out	0x3f, r0	; 63
    3f9c:	8d bf       	out	0x3d, r24	; 61
    3f9e:	ca e0       	ldi	r28, 0x0A	; 10

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3fa0:	80 e0       	ldi	r24, 0x00	; 0
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3fa2:	1d d3       	rcall	.+1594   	; 0x45de <lora_driver_join>
    3fa4:	d8 2f       	mov	r29, r24
    3fa6:	31 d5       	rcall	.+2658   	; 0x4a0a <lora_driver_mapReturnCodeToText>
    3fa8:	9f 93       	push	r25
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3faa:	8f 93       	push	r24
    3fac:	1f 92       	push	r1
    3fae:	cf 93       	push	r28
    3fb0:	83 e4       	ldi	r24, 0x43	; 67
    3fb2:	95 e0       	ldi	r25, 0x05	; 5
    3fb4:	9f 93       	push	r25
    3fb6:	8f 93       	push	r24
    3fb8:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <printf>
    3fbc:	0f 90       	pop	r0
    3fbe:	0f 90       	pop	r0
    3fc0:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3fc2:	0f 90       	pop	r0
    3fc4:	0f 90       	pop	r0
    3fc6:	0f 90       	pop	r0
    3fc8:	d8 30       	cpi	r29, 0x08	; 8
    3fca:	59 f0       	breq	.+22     	; 0x3fe2 <_lora_setup+0x14c>
    3fcc:	80 e0       	ldi	r24, 0x00	; 0
    3fce:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3fd2:	66 e3       	ldi	r22, 0x36	; 54
    3fd4:	71 e0       	ldi	r23, 0x01	; 1
    3fd6:	80 e0       	ldi	r24, 0x00	; 0
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	0e 94 62 13 	call	0x26c4	; 0x26c4 <vTaskDelay>
    3fde:	c1 50       	subi	r28, 0x01	; 1
    3fe0:	f9 f6       	brne	.-66     	; 0x3fa0 <_lora_setup+0x10a>
    3fe2:	d8 30       	cpi	r29, 0x08	; 8
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3fe4:	21 f4       	brne	.+8      	; 0x3fee <_lora_setup+0x158>
    3fe6:	81 e0       	ldi	r24, 0x01	; 1

	if (rc == LORA_ACCEPTED)
    3fe8:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3fec:	09 c0       	rjmp	.+18     	; 0x4000 <_lora_setup+0x16a>
    3fee:	81 e0       	ldi	r24, 0x01	; 1
    3ff0:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3ff4:	80 e0       	ldi	r24, 0x00	; 0
    3ff6:	0e 94 af 2b 	call	0x575e	; 0x575e <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3ffa:	0e 94 b5 06 	call	0xd6a	; 0xd6a <vPortYield>
    3ffe:	fd cf       	rjmp	.-6      	; 0x3ffa <_lora_setup+0x164>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    4000:	df 91       	pop	r29
    4002:	cf 91       	pop	r28
    4004:	08 95       	ret

00004006 <UpLinkHandler_lora_handler_task>:
		}
	}
}
    4006:	cf 93       	push	r28
    4008:	df 93       	push	r29
    400a:	cd b7       	in	r28, 0x3d	; 61
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
}

/*-----------------------------------------------------------*/
void UpLinkHandler_lora_handler_task( void *pvParameters )
{	
    400c:	de b7       	in	r29, 0x3e	; 62
    400e:	66 97       	sbiw	r28, 0x16	; 22
    4010:	0f b6       	in	r0, 0x3f	; 63
    4012:	f8 94       	cli
    4014:	de bf       	out	0x3e, r29	; 62
    4016:	0f be       	out	0x3f, r0	; 63
    4018:	cd bf       	out	0x3d, r28	; 61
	}
}

inline static void UpLinkHandler_init(){
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    401a:	81 e0       	ldi	r24, 0x01	; 1
    401c:	6b d2       	rcall	.+1238   	; 0x44f4 <lora_driver_resetRn2483>
	vTaskDelay(2);
    401e:	62 e0       	ldi	r22, 0x02	; 2
    4020:	70 e0       	ldi	r23, 0x00	; 0
    4022:	80 e0       	ldi	r24, 0x00	; 0
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	0e 94 62 13 	call	0x26c4	; 0x26c4 <vTaskDelay>
	lora_driver_resetRn2483(0);
    402a:	80 e0       	ldi	r24, 0x00	; 0
    402c:	63 d2       	rcall	.+1222   	; 0x44f4 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    402e:	66 e9       	ldi	r22, 0x96	; 150
    4030:	70 e0       	ldi	r23, 0x00	; 0
    4032:	80 e0       	ldi	r24, 0x00	; 0
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	0e 94 62 13 	call	0x26c4	; 0x26c4 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    403a:	15 d2       	rcall	.+1066   	; 0x4466 <lora_driver_flushBuffers>

	_lora_setup();
    403c:	2c df       	rcall	.-424    	; 0x3e96 <_lora_setup>
    403e:	0e 94 e7 10 	call	0x21ce	; 0x21ce <xTaskGetTickCount>

	xLastWakeTime = xTaskGetTickCount();
    4042:	60 93 be 17 	sts	0x17BE, r22	; 0x8017be <xLastWakeTime>
    4046:	70 93 bf 17 	sts	0x17BF, r23	; 0x8017bf <xLastWakeTime+0x1>
    404a:	80 93 c0 17 	sts	0x17C0, r24	; 0x8017c0 <xLastWakeTime+0x2>
    404e:	90 93 c1 17 	sts	0x17C1, r25	; 0x8017c1 <xLastWakeTime+0x3>
    4052:	48 ea       	ldi	r20, 0xA8	; 168
}

inline static void UpLinkHandler_run(void){
		xTaskDelayUntil( &xLastWakeTime, xFrequency_Up );
    4054:	58 e4       	ldi	r21, 0x48	; 72
    4056:	60 e0       	ldi	r22, 0x00	; 0
    4058:	70 e0       	ldi	r23, 0x00	; 0
    405a:	8e eb       	ldi	r24, 0xBE	; 190
    405c:	97 e1       	ldi	r25, 0x17	; 23
    405e:	0e 94 fd 12 	call	0x25fa	; 0x25fa <xTaskDelayUntil>
    4062:	83 e6       	ldi	r24, 0x63	; 99
		printf("startLoraTask\n");
    4064:	95 e0       	ldi	r25, 0x05	; 5
    4066:	0e 94 67 36 	call	0x6cce	; 0x6cce <puts>
		_uplink_payload = SensorDataPackageHandler_getLoRaPayload();
    406a:	ce 01       	movw	r24, r28
    406c:	01 96       	adiw	r24, 0x01	; 1
    406e:	be de       	rcall	.-644    	; 0x3dec <SensorDataPackageHandler_getLoRaPayload>
    4070:	86 e1       	ldi	r24, 0x16	; 22
    4072:	fe 01       	movw	r30, r28
    4074:	31 96       	adiw	r30, 0x01	; 1
    4076:	a2 e1       	ldi	r26, 0x12	; 18
    4078:	b6 e1       	ldi	r27, 0x16	; 22
    407a:	01 90       	ld	r0, Z+
    407c:	0d 92       	st	X+, r0
    407e:	8a 95       	dec	r24
    4080:	e1 f7       	brne	.-8      	; 0x407a <UpLinkHandler_lora_handler_task+0x74>
    4082:	83 e0       	ldi	r24, 0x03	; 3
		status_leds_shortPuls(led_ST4);  // OPTIONAL
    4084:	0e 94 02 2c 	call	0x5804	; 0x5804 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    4088:	62 e1       	ldi	r22, 0x12	; 18
    408a:	76 e1       	ldi	r23, 0x16	; 22
    408c:	80 e0       	ldi	r24, 0x00	; 0
    408e:	d0 d2       	rcall	.+1440   	; 0x4630 <lora_driver_sendUploadMessage>
    4090:	bc d4       	rcall	.+2424   	; 0x4a0a <lora_driver_mapReturnCodeToText>
    4092:	9f 93       	push	r25
    4094:	8f 93       	push	r24
    4096:	81 e7       	ldi	r24, 0x71	; 113
    4098:	95 e0       	ldi	r25, 0x05	; 5
    409a:	9f 93       	push	r25
    409c:	8f 93       	push	r24
    409e:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <printf>
    40a2:	0f 90       	pop	r0
    40a4:	0f 90       	pop	r0
    40a6:	0f 90       	pop	r0
    40a8:	0f 90       	pop	r0
    40aa:	d3 cf       	rjmp	.-90     	; 0x4052 <UpLinkHandler_lora_handler_task+0x4c>

000040ac <UpLinkHandler_lora_handler_initialise>:
    40ac:	ef 92       	push	r14
    40ae:	ff 92       	push	r15
static lora_driver_payload_t _uplink_payload;
const TickType_t xFrequency_Up = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)


void UpLinkHandler_lora_handler_initialise(UBaseType_t UpLinkHandler_lora_handler_task_priority)
{
    40b0:	0f 93       	push	r16
	xTaskCreate(
    40b2:	e1 2c       	mov	r14, r1
    40b4:	f1 2c       	mov	r15, r1
    40b6:	08 2f       	mov	r16, r24
    40b8:	20 e0       	ldi	r18, 0x00	; 0
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	48 e8       	ldi	r20, 0x88	; 136
    40be:	51 e0       	ldi	r21, 0x01	; 1
    40c0:	66 e8       	ldi	r22, 0x86	; 134
    40c2:	75 e0       	ldi	r23, 0x05	; 5
    40c4:	83 e0       	ldi	r24, 0x03	; 3
    40c6:	90 e2       	ldi	r25, 0x20	; 32
    40c8:	0e 94 5d 10 	call	0x20ba	; 0x20ba <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  UpLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    40cc:	0f 91       	pop	r16
    40ce:	ff 90       	pop	r15
    40d0:	ef 90       	pop	r14
    40d2:	08 95       	ret

000040d4 <_hihTwiCallback>:
    40d4:	65 30       	cpi	r22, 0x05	; 5
    40d6:	f1 f4       	brne	.+60     	; 0x4114 <_hihTwiCallback+0x40>
    40d8:	fa 01       	movw	r30, r20
    40da:	80 81       	ld	r24, Z
    40dc:	8f 73       	andi	r24, 0x3F	; 63
    40de:	90 e0       	ldi	r25, 0x00	; 0
    40e0:	98 2f       	mov	r25, r24
    40e2:	88 27       	eor	r24, r24
    40e4:	21 81       	ldd	r18, Z+1	; 0x01
    40e6:	82 2b       	or	r24, r18
    40e8:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    40ec:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    40f0:	82 81       	ldd	r24, Z+2	; 0x02
    40f2:	f0 e4       	ldi	r31, 0x40	; 64
    40f4:	8f 9f       	mul	r24, r31
    40f6:	c0 01       	movw	r24, r0
    40f8:	11 24       	eor	r1, r1
    40fa:	fa 01       	movw	r30, r20
    40fc:	23 81       	ldd	r18, Z+3	; 0x03
    40fe:	26 95       	lsr	r18
    4100:	26 95       	lsr	r18
    4102:	82 2b       	or	r24, r18
    4104:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4108:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    410c:	81 e0       	ldi	r24, 0x01	; 1
    410e:	80 93 8c 16 	sts	0x168C, r24	; 0x80168c <_measuringIsReady>
    4112:	08 95       	ret
    4114:	64 30       	cpi	r22, 0x04	; 4
    4116:	51 f0       	breq	.+20     	; 0x412c <_hihTwiCallback+0x58>
    4118:	80 e0       	ldi	r24, 0x00	; 0
    411a:	90 e4       	ldi	r25, 0x40	; 64
    411c:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4120:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4124:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4128:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    412c:	08 95       	ret

0000412e <hih8120_initialise>:
    412e:	0f 93       	push	r16
    4130:	1f 93       	push	r17
    4132:	0a e6       	ldi	r16, 0x6A	; 106
    4134:	10 e2       	ldi	r17, 0x20	; 32
    4136:	20 e0       	ldi	r18, 0x00	; 0
    4138:	34 e2       	ldi	r19, 0x24	; 36
    413a:	44 ef       	ldi	r20, 0xF4	; 244
    413c:	50 e0       	ldi	r21, 0x00	; 0
    413e:	60 e0       	ldi	r22, 0x00	; 0
    4140:	87 e2       	ldi	r24, 0x27	; 39
    4142:	0e 94 25 2c 	call	0x584a	; 0x584a <twiCreate>
    4146:	90 93 8e 16 	sts	0x168E, r25	; 0x80168e <_hih8120Handler+0x1>
    414a:	80 93 8d 16 	sts	0x168D, r24	; 0x80168d <_hih8120Handler>
    414e:	21 e0       	ldi	r18, 0x01	; 1
    4150:	89 2b       	or	r24, r25
    4152:	09 f0       	breq	.+2      	; 0x4156 <hih8120_initialise+0x28>
    4154:	20 e0       	ldi	r18, 0x00	; 0
    4156:	82 2f       	mov	r24, r18
    4158:	1f 91       	pop	r17
    415a:	0f 91       	pop	r16
    415c:	08 95       	ret

0000415e <hih8120_wakeup>:
    415e:	80 91 8d 16 	lds	r24, 0x168D	; 0x80168d <_hih8120Handler>
    4162:	90 91 8e 16 	lds	r25, 0x168E	; 0x80168e <_hih8120Handler+0x1>
    4166:	00 97       	sbiw	r24, 0x00	; 0
    4168:	59 f0       	breq	.+22     	; 0x4180 <hih8120_wakeup+0x22>
    416a:	40 e0       	ldi	r20, 0x00	; 0
    416c:	60 e0       	ldi	r22, 0x00	; 0
    416e:	70 e0       	ldi	r23, 0x00	; 0
    4170:	0e 94 76 2c 	call	0x58ec	; 0x58ec <twiTransmit>
    4174:	84 30       	cpi	r24, 0x04	; 4
    4176:	31 f4       	brne	.+12     	; 0x4184 <hih8120_wakeup+0x26>
    4178:	10 92 8c 16 	sts	0x168C, r1	; 0x80168c <_measuringIsReady>
    417c:	80 e0       	ldi	r24, 0x00	; 0
    417e:	08 95       	ret
    4180:	82 e0       	ldi	r24, 0x02	; 2
    4182:	08 95       	ret
    4184:	83 e0       	ldi	r24, 0x03	; 3
    4186:	08 95       	ret

00004188 <hih8120_measure>:
    4188:	80 91 8d 16 	lds	r24, 0x168D	; 0x80168d <_hih8120Handler>
    418c:	90 91 8e 16 	lds	r25, 0x168E	; 0x80168e <_hih8120Handler+0x1>
    4190:	00 97       	sbiw	r24, 0x00	; 0
    4192:	39 f0       	breq	.+14     	; 0x41a2 <hih8120_measure+0x1a>
    4194:	64 e0       	ldi	r22, 0x04	; 4
    4196:	0e 94 c2 2c 	call	0x5984	; 0x5984 <twiReceive>
    419a:	85 30       	cpi	r24, 0x05	; 5
    419c:	21 f0       	breq	.+8      	; 0x41a6 <hih8120_measure+0x1e>
    419e:	83 e0       	ldi	r24, 0x03	; 3
    41a0:	08 95       	ret
    41a2:	82 e0       	ldi	r24, 0x02	; 2
    41a4:	08 95       	ret
    41a6:	80 e0       	ldi	r24, 0x00	; 0
    41a8:	08 95       	ret

000041aa <hih8120_getHumidity>:
    41aa:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    41ae:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    41b2:	80 e0       	ldi	r24, 0x00	; 0
    41b4:	90 e0       	ldi	r25, 0x00	; 0
    41b6:	0e 94 cc 2e 	call	0x5d98	; 0x5d98 <__floatunsisf>
    41ba:	20 e0       	ldi	r18, 0x00	; 0
    41bc:	30 e0       	ldi	r19, 0x00	; 0
    41be:	48 ec       	ldi	r20, 0xC8	; 200
    41c0:	52 e4       	ldi	r21, 0x42	; 66
    41c2:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__mulsf3>
    41c6:	20 e0       	ldi	r18, 0x00	; 0
    41c8:	38 ef       	ldi	r19, 0xF8	; 248
    41ca:	4f e7       	ldi	r20, 0x7F	; 127
    41cc:	56 e4       	ldi	r21, 0x46	; 70
    41ce:	0c 94 33 2e 	jmp	0x5c66	; 0x5c66 <__divsf3>
    41d2:	08 95       	ret

000041d4 <hih8120_getHumidityPercent_x10>:
    41d4:	ea df       	rcall	.-44     	; 0x41aa <hih8120_getHumidity>
    41d6:	20 e0       	ldi	r18, 0x00	; 0
    41d8:	30 e0       	ldi	r19, 0x00	; 0
    41da:	40 e2       	ldi	r20, 0x20	; 32
    41dc:	51 e4       	ldi	r21, 0x41	; 65
    41de:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__mulsf3>
    41e2:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <__fixunssfsi>
    41e6:	cb 01       	movw	r24, r22
    41e8:	08 95       	ret

000041ea <hih8120_getTemperature>:
    41ea:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    41ee:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    41f2:	80 e0       	ldi	r24, 0x00	; 0
    41f4:	90 e0       	ldi	r25, 0x00	; 0
    41f6:	0e 94 cc 2e 	call	0x5d98	; 0x5d98 <__floatunsisf>
    41fa:	20 e0       	ldi	r18, 0x00	; 0
    41fc:	30 e0       	ldi	r19, 0x00	; 0
    41fe:	45 e2       	ldi	r20, 0x25	; 37
    4200:	53 e4       	ldi	r21, 0x43	; 67
    4202:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__mulsf3>
    4206:	20 e0       	ldi	r18, 0x00	; 0
    4208:	38 ef       	ldi	r19, 0xF8	; 248
    420a:	4f e7       	ldi	r20, 0x7F	; 127
    420c:	56 e4       	ldi	r21, 0x46	; 70
    420e:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <__divsf3>
    4212:	20 e0       	ldi	r18, 0x00	; 0
    4214:	30 e0       	ldi	r19, 0x00	; 0
    4216:	40 e2       	ldi	r20, 0x20	; 32
    4218:	52 e4       	ldi	r21, 0x42	; 66
    421a:	0c 94 ce 2d 	jmp	0x5b9c	; 0x5b9c <__subsf3>
    421e:	08 95       	ret

00004220 <hih8120_getTemperature_x10>:
    4220:	e4 df       	rcall	.-56     	; 0x41ea <hih8120_getTemperature>
    4222:	20 e0       	ldi	r18, 0x00	; 0
    4224:	30 e0       	ldi	r19, 0x00	; 0
    4226:	40 e2       	ldi	r20, 0x20	; 32
    4228:	51 e4       	ldi	r21, 0x41	; 65
    422a:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__mulsf3>
    422e:	0e 94 9b 2e 	call	0x5d36	; 0x5d36 <__fixsfsi>
    4232:	cb 01       	movw	r24, r22
    4234:	08 95       	ret

00004236 <_serialCallBack>:
    4236:	0f 93       	push	r16
    4238:	1f 93       	push	r17
    423a:	cf 93       	push	r28
    423c:	df 93       	push	r29
    423e:	1f 92       	push	r1
    4240:	1f 92       	push	r1
    4242:	cd b7       	in	r28, 0x3d	; 61
    4244:	de b7       	in	r29, 0x3e	; 62
    4246:	8c 01       	movw	r16, r24
    4248:	19 82       	std	Y+1, r1	; 0x01
    424a:	2d c0       	rjmp	.+90     	; 0x42a6 <_serialCallBack+0x70>
    424c:	e0 91 c6 16 	lds	r30, 0x16C6	; 0x8016c6 <rec_buf_inp.2878>
    4250:	ec 32       	cpi	r30, 0x2C	; 44
    4252:	50 f4       	brcc	.+20     	; 0x4268 <_serialCallBack+0x32>
    4254:	81 e0       	ldi	r24, 0x01	; 1
    4256:	8e 0f       	add	r24, r30
    4258:	80 93 c6 16 	sts	0x16C6, r24	; 0x8016c6 <rec_buf_inp.2878>
    425c:	f0 e0       	ldi	r31, 0x00	; 0
    425e:	e8 50       	subi	r30, 0x08	; 8
    4260:	f9 4e       	sbci	r31, 0xE9	; 233
    4262:	8a 81       	ldd	r24, Y+2	; 0x02
    4264:	80 83       	st	Z, r24
    4266:	02 c0       	rjmp	.+4      	; 0x426c <_serialCallBack+0x36>
    4268:	10 92 c6 16 	sts	0x16C6, r1	; 0x8016c6 <rec_buf_inp.2878>
    426c:	8a 81       	ldd	r24, Y+2	; 0x02
    426e:	8a 30       	cpi	r24, 0x0A	; 10
    4270:	d1 f4       	brne	.+52     	; 0x42a6 <_serialCallBack+0x70>
    4272:	40 91 c6 16 	lds	r20, 0x16C6	; 0x8016c6 <rec_buf_inp.2878>
    4276:	50 e0       	ldi	r21, 0x00	; 0
    4278:	fa 01       	movw	r30, r20
    427a:	ea 50       	subi	r30, 0x0A	; 10
    427c:	f9 4e       	sbci	r31, 0xE9	; 233
    427e:	10 82       	st	Z, r1
    4280:	41 50       	subi	r20, 0x01	; 1
    4282:	51 09       	sbc	r21, r1
    4284:	9e 01       	movw	r18, r28
    4286:	2f 5f       	subi	r18, 0xFF	; 255
    4288:	3f 4f       	sbci	r19, 0xFF	; 255
    428a:	68 ef       	ldi	r22, 0xF8	; 248
    428c:	76 e1       	ldi	r23, 0x16	; 22
    428e:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <_serialReplyBufferHandle>
    4292:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <_serialReplyBufferHandle+0x1>
    4296:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <xStreamBufferSendFromISR>
    429a:	89 81       	ldd	r24, Y+1	; 0x01
    429c:	81 11       	cpse	r24, r1
    429e:	0e 94 b5 06 	call	0xd6a	; 0xd6a <vPortYield>
    42a2:	10 92 c6 16 	sts	0x16C6, r1	; 0x8016c6 <rec_buf_inp.2878>
    42a6:	be 01       	movw	r22, r28
    42a8:	6e 5f       	subi	r22, 0xFE	; 254
    42aa:	7f 4f       	sbci	r23, 0xFF	; 255
    42ac:	c8 01       	movw	r24, r16
    42ae:	49 d6       	rcall	.+3218   	; 0x4f42 <serial_getByte>
    42b0:	88 23       	and	r24, r24
    42b2:	61 f2       	breq	.-104    	; 0x424c <_serialCallBack+0x16>
    42b4:	0f 90       	pop	r0
    42b6:	0f 90       	pop	r0
    42b8:	df 91       	pop	r29
    42ba:	cf 91       	pop	r28
    42bc:	1f 91       	pop	r17
    42be:	0f 91       	pop	r16
    42c0:	08 95       	ret

000042c2 <_uploadMessage>:
    42c2:	0f 93       	push	r16
    42c4:	1f 93       	push	r17
    42c6:	cf 93       	push	r28
    42c8:	df 93       	push	r29
    42ca:	8c 01       	movw	r16, r24
    42cc:	eb 01       	movw	r28, r22
    42ce:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <_serialReplyBufferHandle>
    42d2:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <_serialReplyBufferHandle+0x1>
    42d6:	0e 94 89 0c 	call	0x1912	; 0x1912 <xStreamBufferReset>
    42da:	b8 01       	movw	r22, r16
    42dc:	8f e8       	ldi	r24, 0x8F	; 143
    42de:	96 e1       	ldi	r25, 0x16	; 22
    42e0:	0e 94 ee 35 	call	0x6bdc	; 0x6bdc <strcpy>
    42e4:	20 97       	sbiw	r28, 0x00	; 0
    42e6:	79 f0       	breq	.+30     	; 0x4306 <_uploadMessage+0x44>
    42e8:	ef e8       	ldi	r30, 0x8F	; 143
    42ea:	f6 e1       	ldi	r31, 0x16	; 22
    42ec:	01 90       	ld	r0, Z+
    42ee:	00 20       	and	r0, r0
    42f0:	e9 f7       	brne	.-6      	; 0x42ec <_uploadMessage+0x2a>
    42f2:	31 97       	sbiw	r30, 0x01	; 1
    42f4:	80 e2       	ldi	r24, 0x20	; 32
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	91 83       	std	Z+1, r25	; 0x01
    42fa:	80 83       	st	Z, r24
    42fc:	be 01       	movw	r22, r28
    42fe:	8f e8       	ldi	r24, 0x8F	; 143
    4300:	96 e1       	ldi	r25, 0x16	; 22
    4302:	0e 94 e3 35 	call	0x6bc6	; 0x6bc6 <strcat>
    4306:	ef e8       	ldi	r30, 0x8F	; 143
    4308:	f6 e1       	ldi	r31, 0x16	; 22
    430a:	df 01       	movw	r26, r30
    430c:	0d 90       	ld	r0, X+
    430e:	00 20       	and	r0, r0
    4310:	e9 f7       	brne	.-6      	; 0x430c <_uploadMessage+0x4a>
    4312:	11 97       	sbiw	r26, 0x01	; 1
    4314:	8d e0       	ldi	r24, 0x0D	; 13
    4316:	9a e0       	ldi	r25, 0x0A	; 10
    4318:	11 96       	adiw	r26, 0x01	; 1
    431a:	9c 93       	st	X, r25
    431c:	8e 93       	st	-X, r24
    431e:	12 96       	adiw	r26, 0x02	; 2
    4320:	1c 92       	st	X, r1
    4322:	01 90       	ld	r0, Z+
    4324:	00 20       	and	r0, r0
    4326:	e9 f7       	brne	.-6      	; 0x4322 <_uploadMessage+0x60>
    4328:	31 97       	sbiw	r30, 0x01	; 1
    432a:	ef 58       	subi	r30, 0x8F	; 143
    432c:	f6 41       	sbci	r31, 0x16	; 22
    432e:	ae 2f       	mov	r26, r30
    4330:	8f e8       	ldi	r24, 0x8F	; 143
    4332:	96 e1       	ldi	r25, 0x16	; 22
    4334:	ac 01       	movw	r20, r24
    4336:	6a 2f       	mov	r22, r26
    4338:	80 91 cb 16 	lds	r24, 0x16CB	; 0x8016cb <_rn2483_serial>
    433c:	90 91 cc 16 	lds	r25, 0x16CC	; 0x8016cc <_rn2483_serial+0x1>
    4340:	ab d5       	rcall	.+2902   	; 0x4e98 <serial_sendBytes>
    4342:	81 11       	cpse	r24, r1
    4344:	11 c0       	rjmp	.+34     	; 0x4368 <_uploadMessage+0xa6>
    4346:	08 e2       	ldi	r16, 0x28	; 40
    4348:	15 e0       	ldi	r17, 0x05	; 5
    434a:	20 e0       	ldi	r18, 0x00	; 0
    434c:	30 e0       	ldi	r19, 0x00	; 0
    434e:	4d e2       	ldi	r20, 0x2D	; 45
    4350:	50 e0       	ldi	r21, 0x00	; 0
    4352:	62 e5       	ldi	r22, 0x52	; 82
    4354:	77 e1       	ldi	r23, 0x17	; 23
    4356:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <_serialReplyBufferHandle>
    435a:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <_serialReplyBufferHandle+0x1>
    435e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <xStreamBufferReceive>
    4362:	82 e5       	ldi	r24, 0x52	; 82
    4364:	97 e1       	ldi	r25, 0x17	; 23
    4366:	02 c0       	rjmp	.+4      	; 0x436c <_uploadMessage+0xaa>
    4368:	80 e0       	ldi	r24, 0x00	; 0
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	df 91       	pop	r29
    436e:	cf 91       	pop	r28
    4370:	1f 91       	pop	r17
    4372:	0f 91       	pop	r16
    4374:	08 95       	ret

00004376 <_reply2ReturnCode>:
    4376:	2f 92       	push	r2
    4378:	3f 92       	push	r3
    437a:	4f 92       	push	r4
    437c:	5f 92       	push	r5
    437e:	6f 92       	push	r6
    4380:	7f 92       	push	r7
    4382:	8f 92       	push	r8
    4384:	9f 92       	push	r9
    4386:	af 92       	push	r10
    4388:	bf 92       	push	r11
    438a:	cf 92       	push	r12
    438c:	df 92       	push	r13
    438e:	ef 92       	push	r14
    4390:	ff 92       	push	r15
    4392:	0f 93       	push	r16
    4394:	1f 93       	push	r17
    4396:	cf 93       	push	r28
    4398:	df 93       	push	r29
    439a:	5c 01       	movw	r10, r24
    439c:	fc 01       	movw	r30, r24
    439e:	01 90       	ld	r0, Z+
    43a0:	00 20       	and	r0, r0
    43a2:	e9 f7       	brne	.-6      	; 0x439e <_reply2ReturnCode+0x28>
    43a4:	31 97       	sbiw	r30, 0x01	; 1
    43a6:	6f 01       	movw	r12, r30
    43a8:	c8 1a       	sub	r12, r24
    43aa:	d9 0a       	sbc	r13, r25
    43ac:	5c 2c       	mov	r5, r12
    43ae:	0f 2e       	mov	r0, r31
    43b0:	f6 e2       	ldi	r31, 0x26	; 38
    43b2:	8f 2e       	mov	r8, r31
    43b4:	f8 e0       	ldi	r31, 0x08	; 8
    43b6:	9f 2e       	mov	r9, r31
    43b8:	f0 2d       	mov	r31, r0
    43ba:	e1 2c       	mov	r14, r1
    43bc:	f1 2c       	mov	r15, r1
    43be:	4c 2c       	mov	r4, r12
    43c0:	37 01       	movw	r6, r14
    43c2:	f4 01       	movw	r30, r8
    43c4:	01 81       	ldd	r16, Z+1	; 0x01
    43c6:	12 81       	ldd	r17, Z+2	; 0x02
    43c8:	e8 01       	movw	r28, r16
    43ca:	09 90       	ld	r0, Y+
    43cc:	00 20       	and	r0, r0
    43ce:	e9 f7       	brne	.-6      	; 0x43ca <_reply2ReturnCode+0x54>
    43d0:	21 97       	sbiw	r28, 0x01	; 1
    43d2:	c0 1b       	sub	r28, r16
    43d4:	d1 0b       	sbc	r29, r17
    43d6:	3c 2e       	mov	r3, r28
    43d8:	f9 e0       	ldi	r31, 0x09	; 9
    43da:	cf 16       	cp	r12, r31
    43dc:	d1 04       	cpc	r13, r1
    43de:	58 f0       	brcs	.+22     	; 0x43f6 <_reply2ReturnCode+0x80>
    43e0:	f4 01       	movw	r30, r8
    43e2:	20 80       	ld	r2, Z
    43e4:	fe e0       	ldi	r31, 0x0E	; 14
    43e6:	2f 12       	cpse	r2, r31
    43e8:	06 c0       	rjmp	.+12     	; 0x43f6 <_reply2ReturnCode+0x80>
    43ea:	b8 01       	movw	r22, r16
    43ec:	c5 01       	movw	r24, r10
    43ee:	0e 94 be 35 	call	0x6b7c	; 0x6b7c <strcasestr>
    43f2:	89 2b       	or	r24, r25
    43f4:	09 f5       	brne	.+66     	; 0x4438 <_reply2ReturnCode+0xc2>
    43f6:	44 2d       	mov	r20, r4
    43f8:	35 14       	cp	r3, r5
    43fa:	08 f4       	brcc	.+2      	; 0x43fe <_reply2ReturnCode+0x88>
    43fc:	4c 2f       	mov	r20, r28
    43fe:	50 e0       	ldi	r21, 0x00	; 0
    4400:	b8 01       	movw	r22, r16
    4402:	c5 01       	movw	r24, r10
    4404:	0e 94 f5 35 	call	0x6bea	; 0x6bea <strncasecmp>
    4408:	89 2b       	or	r24, r25
    440a:	49 f4       	brne	.+18     	; 0x441e <_reply2ReturnCode+0xa8>
    440c:	f3 01       	movw	r30, r6
    440e:	ee 0f       	add	r30, r30
    4410:	ff 1f       	adc	r31, r31
    4412:	e6 0d       	add	r30, r6
    4414:	f7 1d       	adc	r31, r7
    4416:	ea 5d       	subi	r30, 0xDA	; 218
    4418:	f7 4f       	sbci	r31, 0xF7	; 247
    441a:	20 80       	ld	r2, Z
    441c:	0d c0       	rjmp	.+26     	; 0x4438 <_reply2ReturnCode+0xc2>
    441e:	8f ef       	ldi	r24, 0xFF	; 255
    4420:	e8 1a       	sub	r14, r24
    4422:	f8 0a       	sbc	r15, r24
    4424:	e3 e0       	ldi	r30, 0x03	; 3
    4426:	8e 0e       	add	r8, r30
    4428:	91 1c       	adc	r9, r1
    442a:	f1 e1       	ldi	r31, 0x11	; 17
    442c:	ef 16       	cp	r14, r31
    442e:	f1 04       	cpc	r15, r1
    4430:	39 f6       	brne	.-114    	; 0x43c0 <_reply2ReturnCode+0x4a>
    4432:	68 94       	set
    4434:	22 24       	eor	r2, r2
    4436:	24 f8       	bld	r2, 4
    4438:	82 2d       	mov	r24, r2
    443a:	df 91       	pop	r29
    443c:	cf 91       	pop	r28
    443e:	1f 91       	pop	r17
    4440:	0f 91       	pop	r16
    4442:	ff 90       	pop	r15
    4444:	ef 90       	pop	r14
    4446:	df 90       	pop	r13
    4448:	cf 90       	pop	r12
    444a:	bf 90       	pop	r11
    444c:	af 90       	pop	r10
    444e:	9f 90       	pop	r9
    4450:	8f 90       	pop	r8
    4452:	7f 90       	pop	r7
    4454:	6f 90       	pop	r6
    4456:	5f 90       	pop	r5
    4458:	4f 90       	pop	r4
    445a:	3f 90       	pop	r3
    445c:	2f 90       	pop	r2
    445e:	08 95       	ret

00004460 <_uploadMessageRc>:
    4460:	30 df       	rcall	.-416    	; 0x42c2 <_uploadMessage>
    4462:	89 cf       	rjmp	.-238    	; 0x4376 <_reply2ReturnCode>
    4464:	08 95       	ret

00004466 <lora_driver_flushBuffers>:
    4466:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <_serialReplyBufferHandle>
    446a:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <_serialReplyBufferHandle+0x1>
    446e:	0c 94 89 0c 	jmp	0x1912	; 0x1912 <xStreamBufferReset>
    4472:	08 95       	ret

00004474 <lora_driver_initialise>:
    4474:	8f 92       	push	r8
    4476:	9f 92       	push	r9
    4478:	af 92       	push	r10
    447a:	cf 92       	push	r12
    447c:	ef 92       	push	r14
    447e:	0f 93       	push	r16
    4480:	1f 93       	push	r17
    4482:	cf 93       	push	r28
    4484:	c8 2f       	mov	r28, r24
    4486:	8b 01       	movw	r16, r22
    4488:	41 e0       	ldi	r20, 0x01	; 1
    448a:	60 e0       	ldi	r22, 0x00	; 0
    448c:	70 e0       	ldi	r23, 0x00	; 0
    448e:	88 ec       	ldi	r24, 0xC8	; 200
    4490:	90 e0       	ldi	r25, 0x00	; 0
    4492:	0e 94 57 0c 	call	0x18ae	; 0x18ae <xStreamBufferGenericCreate>
    4496:	90 93 ca 16 	sts	0x16CA, r25	; 0x8016ca <_serialReplyBufferHandle+0x1>
    449a:	80 93 c9 16 	sts	0x16C9, r24	; 0x8016c9 <_serialReplyBufferHandle>
    449e:	10 93 c8 16 	sts	0x16C8, r17	; 0x8016c8 <_downlinkMessageBuffer+0x1>
    44a2:	00 93 c7 16 	sts	0x16C7, r16	; 0x8016c7 <_downlinkMessageBuffer>
    44a6:	0f 2e       	mov	r0, r31
    44a8:	fb e1       	ldi	r31, 0x1B	; 27
    44aa:	8f 2e       	mov	r8, r31
    44ac:	f1 e2       	ldi	r31, 0x21	; 33
    44ae:	9f 2e       	mov	r9, r31
    44b0:	f0 2d       	mov	r31, r0
    44b2:	68 94       	set
    44b4:	aa 24       	eor	r10, r10
    44b6:	a6 f8       	bld	r10, 6
    44b8:	68 94       	set
    44ba:	cc 24       	eor	r12, r12
    44bc:	c6 f8       	bld	r12, 6
    44be:	e1 2c       	mov	r14, r1
    44c0:	00 e0       	ldi	r16, 0x00	; 0
    44c2:	23 e0       	ldi	r18, 0x03	; 3
    44c4:	40 e0       	ldi	r20, 0x00	; 0
    44c6:	51 ee       	ldi	r21, 0xE1	; 225
    44c8:	60 e0       	ldi	r22, 0x00	; 0
    44ca:	70 e0       	ldi	r23, 0x00	; 0
    44cc:	8c 2f       	mov	r24, r28
    44ce:	17 d4       	rcall	.+2094   	; 0x4cfe <serial_create>
    44d0:	90 93 cc 16 	sts	0x16CC, r25	; 0x8016cc <_rn2483_serial+0x1>
    44d4:	80 93 cb 16 	sts	0x16CB, r24	; 0x8016cb <_rn2483_serial>
    44d8:	e7 e0       	ldi	r30, 0x07	; 7
    44da:	f1 e0       	ldi	r31, 0x01	; 1
    44dc:	80 81       	ld	r24, Z
    44de:	80 61       	ori	r24, 0x10	; 16
    44e0:	80 83       	st	Z, r24
    44e2:	cf 91       	pop	r28
    44e4:	1f 91       	pop	r17
    44e6:	0f 91       	pop	r16
    44e8:	ef 90       	pop	r14
    44ea:	cf 90       	pop	r12
    44ec:	af 90       	pop	r10
    44ee:	9f 90       	pop	r9
    44f0:	8f 90       	pop	r8
    44f2:	08 95       	ret

000044f4 <lora_driver_resetRn2483>:
    44f4:	88 23       	and	r24, r24
    44f6:	31 f0       	breq	.+12     	; 0x4504 <lora_driver_resetRn2483+0x10>
    44f8:	e8 e0       	ldi	r30, 0x08	; 8
    44fa:	f1 e0       	ldi	r31, 0x01	; 1
    44fc:	80 81       	ld	r24, Z
    44fe:	8f 7e       	andi	r24, 0xEF	; 239
    4500:	80 83       	st	Z, r24
    4502:	08 95       	ret
    4504:	e8 e0       	ldi	r30, 0x08	; 8
    4506:	f1 e0       	ldi	r31, 0x01	; 1
    4508:	80 81       	ld	r24, Z
    450a:	80 61       	ori	r24, 0x10	; 16
    450c:	80 83       	st	Z, r24
    450e:	08 95       	ret

00004510 <lora_driver_rn2483FactoryReset>:
    4510:	60 e0       	ldi	r22, 0x00	; 0
    4512:	70 e0       	ldi	r23, 0x00	; 0
    4514:	8c ea       	ldi	r24, 0xAC	; 172
    4516:	95 e0       	ldi	r25, 0x05	; 5
    4518:	d4 de       	rcall	.-600    	; 0x42c2 <_uploadMessage>
    451a:	e2 e5       	ldi	r30, 0x52	; 82
    451c:	f7 e1       	ldi	r31, 0x17	; 23
    451e:	01 90       	ld	r0, Z+
    4520:	00 20       	and	r0, r0
    4522:	e9 f7       	brne	.-6      	; 0x451e <lora_driver_rn2483FactoryReset+0xe>
    4524:	31 97       	sbiw	r30, 0x01	; 1
    4526:	e2 55       	subi	r30, 0x52	; 82
    4528:	f7 41       	sbci	r31, 0x17	; 23
    452a:	81 e0       	ldi	r24, 0x01	; 1
    452c:	75 97       	sbiw	r30, 0x15	; 21
    452e:	08 f0       	brcs	.+2      	; 0x4532 <lora_driver_rn2483FactoryReset+0x22>
    4530:	80 e0       	ldi	r24, 0x00	; 0
    4532:	08 95       	ret

00004534 <lora_driver_getRn2483Hweui>:
    4534:	cf 93       	push	r28
    4536:	df 93       	push	r29
    4538:	ec 01       	movw	r28, r24
    453a:	60 e0       	ldi	r22, 0x00	; 0
    453c:	70 e0       	ldi	r23, 0x00	; 0
    453e:	8d eb       	ldi	r24, 0xBD	; 189
    4540:	95 e0       	ldi	r25, 0x05	; 5
    4542:	bf de       	rcall	.-642    	; 0x42c2 <_uploadMessage>
    4544:	e2 e5       	ldi	r30, 0x52	; 82
    4546:	f7 e1       	ldi	r31, 0x17	; 23
    4548:	01 90       	ld	r0, Z+
    454a:	00 20       	and	r0, r0
    454c:	e9 f7       	brne	.-6      	; 0x4548 <lora_driver_getRn2483Hweui+0x14>
    454e:	e3 56       	subi	r30, 0x63	; 99
    4550:	f7 41       	sbci	r31, 0x17	; 23
    4552:	39 f4       	brne	.+14     	; 0x4562 <lora_driver_getRn2483Hweui+0x2e>
    4554:	62 e5       	ldi	r22, 0x52	; 82
    4556:	77 e1       	ldi	r23, 0x17	; 23
    4558:	ce 01       	movw	r24, r28
    455a:	0e 94 ee 35 	call	0x6bdc	; 0x6bdc <strcpy>
    455e:	80 e0       	ldi	r24, 0x00	; 0
    4560:	02 c0       	rjmp	.+4      	; 0x4566 <lora_driver_getRn2483Hweui+0x32>
    4562:	18 82       	st	Y, r1
    4564:	81 e0       	ldi	r24, 0x01	; 1
    4566:	df 91       	pop	r29
    4568:	cf 91       	pop	r28
    456a:	08 95       	ret

0000456c <lora_driver_setDeviceIdentifier>:
    456c:	fc 01       	movw	r30, r24
    456e:	01 90       	ld	r0, Z+
    4570:	00 20       	and	r0, r0
    4572:	e9 f7       	brne	.-6      	; 0x456e <lora_driver_setDeviceIdentifier+0x2>
    4574:	9f 01       	movw	r18, r30
    4576:	21 51       	subi	r18, 0x11	; 17
    4578:	31 09       	sbc	r19, r1
    457a:	28 17       	cp	r18, r24
    457c:	39 07       	cpc	r19, r25
    457e:	29 f4       	brne	.+10     	; 0x458a <lora_driver_setDeviceIdentifier+0x1e>
    4580:	bc 01       	movw	r22, r24
    4582:	8b ee       	ldi	r24, 0xEB	; 235
    4584:	95 e0       	ldi	r25, 0x05	; 5
    4586:	6c cf       	rjmp	.-296    	; 0x4460 <_uploadMessageRc>
    4588:	08 95       	ret
    458a:	89 e0       	ldi	r24, 0x09	; 9
    458c:	08 95       	ret

0000458e <lora_driver_setApplicationIdentifier>:
    458e:	fc 01       	movw	r30, r24
    4590:	01 90       	ld	r0, Z+
    4592:	00 20       	and	r0, r0
    4594:	e9 f7       	brne	.-6      	; 0x4590 <lora_driver_setApplicationIdentifier+0x2>
    4596:	9f 01       	movw	r18, r30
    4598:	21 51       	subi	r18, 0x11	; 17
    459a:	31 09       	sbc	r19, r1
    459c:	28 17       	cp	r18, r24
    459e:	39 07       	cpc	r19, r25
    45a0:	29 f4       	brne	.+10     	; 0x45ac <lora_driver_setApplicationIdentifier+0x1e>
    45a2:	bc 01       	movw	r22, r24
    45a4:	8a ef       	ldi	r24, 0xFA	; 250
    45a6:	95 e0       	ldi	r25, 0x05	; 5
    45a8:	5b cf       	rjmp	.-330    	; 0x4460 <_uploadMessageRc>
    45aa:	08 95       	ret
    45ac:	89 e0       	ldi	r24, 0x09	; 9
    45ae:	08 95       	ret

000045b0 <lora_driver_setApplicationKey>:
    45b0:	fc 01       	movw	r30, r24
    45b2:	01 90       	ld	r0, Z+
    45b4:	00 20       	and	r0, r0
    45b6:	e9 f7       	brne	.-6      	; 0x45b2 <lora_driver_setApplicationKey+0x2>
    45b8:	9f 01       	movw	r18, r30
    45ba:	21 52       	subi	r18, 0x21	; 33
    45bc:	31 09       	sbc	r19, r1
    45be:	28 17       	cp	r18, r24
    45c0:	39 07       	cpc	r19, r25
    45c2:	29 f4       	brne	.+10     	; 0x45ce <lora_driver_setApplicationKey+0x1e>
    45c4:	bc 01       	movw	r22, r24
    45c6:	89 e0       	ldi	r24, 0x09	; 9
    45c8:	96 e0       	ldi	r25, 0x06	; 6
    45ca:	4a cf       	rjmp	.-364    	; 0x4460 <_uploadMessageRc>
    45cc:	08 95       	ret
    45ce:	89 e0       	ldi	r24, 0x09	; 9
    45d0:	08 95       	ret

000045d2 <lora_driver_saveMac>:
    45d2:	60 e0       	ldi	r22, 0x00	; 0
    45d4:	70 e0       	ldi	r23, 0x00	; 0
    45d6:	88 e4       	ldi	r24, 0x48	; 72
    45d8:	96 e0       	ldi	r25, 0x06	; 6
    45da:	42 cf       	rjmp	.-380    	; 0x4460 <_uploadMessageRc>
    45dc:	08 95       	ret

000045de <lora_driver_join>:
    45de:	0f 93       	push	r16
    45e0:	1f 93       	push	r17
    45e2:	e8 2f       	mov	r30, r24
    45e4:	f0 e0       	ldi	r31, 0x00	; 0
    45e6:	ee 0f       	add	r30, r30
    45e8:	ff 1f       	adc	r31, r31
    45ea:	ee 5d       	subi	r30, 0xDE	; 222
    45ec:	f7 4f       	sbci	r31, 0xF7	; 247
    45ee:	60 81       	ld	r22, Z
    45f0:	71 81       	ldd	r23, Z+1	; 0x01
    45f2:	81 e5       	ldi	r24, 0x51	; 81
    45f4:	96 e0       	ldi	r25, 0x06	; 6
    45f6:	34 df       	rcall	.-408    	; 0x4460 <_uploadMessageRc>
    45f8:	81 11       	cpse	r24, r1
    45fa:	14 c0       	rjmp	.+40     	; 0x4624 <lora_driver_join+0x46>
    45fc:	08 e2       	ldi	r16, 0x28	; 40
    45fe:	15 e0       	ldi	r17, 0x05	; 5
    4600:	20 e0       	ldi	r18, 0x00	; 0
    4602:	30 e0       	ldi	r19, 0x00	; 0
    4604:	4d e2       	ldi	r20, 0x2D	; 45
    4606:	50 e0       	ldi	r21, 0x00	; 0
    4608:	62 e5       	ldi	r22, 0x52	; 82
    460a:	77 e1       	ldi	r23, 0x17	; 23
    460c:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <_serialReplyBufferHandle>
    4610:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <_serialReplyBufferHandle+0x1>
    4614:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <xStreamBufferReceive>
    4618:	88 23       	and	r24, r24
    461a:	21 f0       	breq	.+8      	; 0x4624 <lora_driver_join+0x46>
    461c:	82 e5       	ldi	r24, 0x52	; 82
    461e:	97 e1       	ldi	r25, 0x17	; 23
    4620:	aa de       	rcall	.-684    	; 0x4376 <_reply2ReturnCode>
    4622:	03 c0       	rjmp	.+6      	; 0x462a <lora_driver_join+0x4c>
    4624:	82 e5       	ldi	r24, 0x52	; 82
    4626:	97 e1       	ldi	r25, 0x17	; 23
    4628:	a6 de       	rcall	.-692    	; 0x4376 <_reply2ReturnCode>
    462a:	1f 91       	pop	r17
    462c:	0f 91       	pop	r16
    462e:	08 95       	ret

00004630 <lora_driver_sendUploadMessage>:
    4630:	0f 93       	push	r16
    4632:	1f 93       	push	r17
    4634:	cf 93       	push	r28
    4636:	df 93       	push	r29
    4638:	1f 92       	push	r1
    463a:	cd b7       	in	r28, 0x3d	; 61
    463c:	de b7       	in	r29, 0x3e	; 62
    463e:	db 01       	movw	r26, r22
    4640:	11 96       	adiw	r26, 0x01	; 1
    4642:	9c 91       	ld	r25, X
    4644:	11 97       	sbiw	r26, 0x01	; 1
    4646:	95 31       	cpi	r25, 0x15	; 21
    4648:	08 f0       	brcs	.+2      	; 0x464c <lora_driver_sendUploadMessage+0x1c>
    464a:	b4 c0       	rjmp	.+360    	; 0x47b4 <lora_driver_sendUploadMessage+0x184>
    464c:	99 23       	and	r25, r25
    464e:	81 f1       	breq	.+96     	; 0x46b0 <lora_driver_sendUploadMessage+0x80>
    4650:	60 e0       	ldi	r22, 0x00	; 0
    4652:	70 e0       	ldi	r23, 0x00	; 0
    4654:	27 2f       	mov	r18, r23
    4656:	30 e0       	ldi	r19, 0x00	; 0
    4658:	46 2f       	mov	r20, r22
    465a:	50 e0       	ldi	r21, 0x00	; 0
    465c:	fd 01       	movw	r30, r26
    465e:	e4 0f       	add	r30, r20
    4660:	f5 1f       	adc	r31, r21
    4662:	92 81       	ldd	r25, Z+2	; 0x02
    4664:	92 95       	swap	r25
    4666:	9f 70       	andi	r25, 0x0F	; 15
    4668:	9a 30       	cpi	r25, 0x0A	; 10
    466a:	10 f0       	brcs	.+4      	; 0x4670 <lora_driver_sendUploadMessage+0x40>
    466c:	99 5c       	subi	r25, 0xC9	; 201
    466e:	01 c0       	rjmp	.+2      	; 0x4672 <lora_driver_sendUploadMessage+0x42>
    4670:	90 5d       	subi	r25, 0xD0	; 208
    4672:	f9 01       	movw	r30, r18
    4674:	ed 51       	subi	r30, 0x1D	; 29
    4676:	f9 4e       	sbci	r31, 0xE9	; 233
    4678:	90 83       	st	Z, r25
    467a:	2f 5f       	subi	r18, 0xFF	; 255
    467c:	3f 4f       	sbci	r19, 0xFF	; 255
    467e:	fd 01       	movw	r30, r26
    4680:	e4 0f       	add	r30, r20
    4682:	f5 1f       	adc	r31, r21
    4684:	92 81       	ldd	r25, Z+2	; 0x02
    4686:	9f 70       	andi	r25, 0x0F	; 15
    4688:	49 2f       	mov	r20, r25
    468a:	50 e0       	ldi	r21, 0x00	; 0
    468c:	4a 30       	cpi	r20, 0x0A	; 10
    468e:	51 05       	cpc	r21, r1
    4690:	14 f0       	brlt	.+4      	; 0x4696 <lora_driver_sendUploadMessage+0x66>
    4692:	99 5c       	subi	r25, 0xC9	; 201
    4694:	01 c0       	rjmp	.+2      	; 0x4698 <lora_driver_sendUploadMessage+0x68>
    4696:	90 5d       	subi	r25, 0xD0	; 208
    4698:	f9 01       	movw	r30, r18
    469a:	ed 51       	subi	r30, 0x1D	; 29
    469c:	f9 4e       	sbci	r31, 0xE9	; 233
    469e:	90 83       	st	Z, r25
    46a0:	7e 5f       	subi	r23, 0xFE	; 254
    46a2:	6f 5f       	subi	r22, 0xFF	; 255
    46a4:	11 96       	adiw	r26, 0x01	; 1
    46a6:	9c 91       	ld	r25, X
    46a8:	11 97       	sbiw	r26, 0x01	; 1
    46aa:	69 17       	cp	r22, r25
    46ac:	98 f2       	brcs	.-90     	; 0x4654 <lora_driver_sendUploadMessage+0x24>
    46ae:	01 c0       	rjmp	.+2      	; 0x46b2 <lora_driver_sendUploadMessage+0x82>
    46b0:	70 e0       	ldi	r23, 0x00	; 0
    46b2:	e7 2f       	mov	r30, r23
    46b4:	f0 e0       	ldi	r31, 0x00	; 0
    46b6:	ed 51       	subi	r30, 0x1D	; 29
    46b8:	f9 4e       	sbci	r31, 0xE9	; 233
    46ba:	10 82       	st	Z, r1
    46bc:	4c 91       	ld	r20, X
    46be:	81 11       	cpse	r24, r1
    46c0:	03 c0       	rjmp	.+6      	; 0x46c8 <lora_driver_sendUploadMessage+0x98>
    46c2:	8a e5       	ldi	r24, 0x5A	; 90
    46c4:	96 e0       	ldi	r25, 0x06	; 6
    46c6:	02 c0       	rjmp	.+4      	; 0x46cc <lora_driver_sendUploadMessage+0x9c>
    46c8:	8c e5       	ldi	r24, 0x5C	; 92
    46ca:	96 e0       	ldi	r25, 0x06	; 6
    46cc:	23 ee       	ldi	r18, 0xE3	; 227
    46ce:	36 e1       	ldi	r19, 0x16	; 22
    46d0:	3f 93       	push	r19
    46d2:	2f 93       	push	r18
    46d4:	1f 92       	push	r1
    46d6:	4f 93       	push	r20
    46d8:	9f 93       	push	r25
    46da:	8f 93       	push	r24
    46dc:	80 e6       	ldi	r24, 0x60	; 96
    46de:	96 e0       	ldi	r25, 0x06	; 6
    46e0:	9f 93       	push	r25
    46e2:	8f 93       	push	r24
    46e4:	85 e2       	ldi	r24, 0x25	; 37
    46e6:	97 e1       	ldi	r25, 0x17	; 23
    46e8:	9f 93       	push	r25
    46ea:	8f 93       	push	r24
    46ec:	0e 94 97 36 	call	0x6d2e	; 0x6d2e <sprintf>
    46f0:	60 e0       	ldi	r22, 0x00	; 0
    46f2:	70 e0       	ldi	r23, 0x00	; 0
    46f4:	85 e2       	ldi	r24, 0x25	; 37
    46f6:	97 e1       	ldi	r25, 0x17	; 23
    46f8:	b3 de       	rcall	.-666    	; 0x4460 <_uploadMessageRc>
    46fa:	0f b6       	in	r0, 0x3f	; 63
    46fc:	f8 94       	cli
    46fe:	de bf       	out	0x3e, r29	; 62
    4700:	0f be       	out	0x3f, r0	; 63
    4702:	cd bf       	out	0x3d, r28	; 61
    4704:	81 11       	cpse	r24, r1
    4706:	59 c0       	rjmp	.+178    	; 0x47ba <lora_driver_sendUploadMessage+0x18a>
    4708:	08 e2       	ldi	r16, 0x28	; 40
    470a:	15 e0       	ldi	r17, 0x05	; 5
    470c:	20 e0       	ldi	r18, 0x00	; 0
    470e:	30 e0       	ldi	r19, 0x00	; 0
    4710:	4d e2       	ldi	r20, 0x2D	; 45
    4712:	50 e0       	ldi	r21, 0x00	; 0
    4714:	62 e5       	ldi	r22, 0x52	; 82
    4716:	77 e1       	ldi	r23, 0x17	; 23
    4718:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <_serialReplyBufferHandle>
    471c:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <_serialReplyBufferHandle+0x1>
    4720:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <xStreamBufferReceive>
    4724:	88 23       	and	r24, r24
    4726:	09 f4       	brne	.+2      	; 0x472a <lora_driver_sendUploadMessage+0xfa>
    4728:	47 c0       	rjmp	.+142    	; 0x47b8 <lora_driver_sendUploadMessage+0x188>
    472a:	82 e5       	ldi	r24, 0x52	; 82
    472c:	97 e1       	ldi	r25, 0x17	; 23
    472e:	23 de       	rcall	.-954    	; 0x4376 <_reply2ReturnCode>
    4730:	8e 30       	cpi	r24, 0x0E	; 14
    4732:	09 f0       	breq	.+2      	; 0x4736 <lora_driver_sendUploadMessage+0x106>
    4734:	42 c0       	rjmp	.+132    	; 0x47ba <lora_driver_sendUploadMessage+0x18a>
    4736:	87 e0       	ldi	r24, 0x07	; 7
    4738:	89 83       	std	Y+1, r24	; 0x01
    473a:	80 91 c7 16 	lds	r24, 0x16C7	; 0x8016c7 <_downlinkMessageBuffer>
    473e:	90 91 c8 16 	lds	r25, 0x16C8	; 0x8016c8 <_downlinkMessageBuffer+0x1>
    4742:	89 2b       	or	r24, r25
    4744:	a9 f1       	breq	.+106    	; 0x47b0 <lora_driver_sendUploadMessage+0x180>
    4746:	be 01       	movw	r22, r28
    4748:	6f 5f       	subi	r22, 0xFF	; 255
    474a:	7f 4f       	sbci	r23, 0xFF	; 255
    474c:	82 e5       	ldi	r24, 0x52	; 82
    474e:	97 e1       	ldi	r25, 0x17	; 23
    4750:	68 d1       	rcall	.+720    	; 0x4a22 <decode_port_no>
    4752:	80 93 cd 16 	sts	0x16CD, r24	; 0x8016cd <_downlinkPayload>
    4756:	e9 81       	ldd	r30, Y+1	; 0x01
    4758:	f0 e0       	ldi	r31, 0x00	; 0
    475a:	ee 5a       	subi	r30, 0xAE	; 174
    475c:	f8 4e       	sbci	r31, 0xE8	; 232
    475e:	df 01       	movw	r26, r30
    4760:	0d 90       	ld	r0, X+
    4762:	00 20       	and	r0, r0
    4764:	e9 f7       	brne	.-6      	; 0x4760 <lora_driver_sendUploadMessage+0x130>
    4766:	11 97       	sbiw	r26, 0x01	; 1
    4768:	ae 1b       	sub	r26, r30
    476a:	bf 0b       	sbc	r27, r31
    476c:	aa 23       	and	r26, r26
    476e:	91 f0       	breq	.+36     	; 0x4794 <lora_driver_sendUploadMessage+0x164>
    4770:	bb 27       	eor	r27, r27
    4772:	cd 01       	movw	r24, r26
    4774:	01 97       	sbiw	r24, 0x01	; 1
    4776:	9c 01       	movw	r18, r24
    4778:	12 f4       	brpl	.+4      	; 0x477e <lora_driver_sendUploadMessage+0x14e>
    477a:	2f 5f       	subi	r18, 0xFF	; 255
    477c:	3f 4f       	sbci	r19, 0xFF	; 255
    477e:	35 95       	asr	r19
    4780:	27 95       	ror	r18
    4782:	20 93 ce 16 	sts	0x16CE, r18	; 0x8016ce <_downlinkPayload+0x1>
    4786:	af 01       	movw	r20, r30
    4788:	4f 5f       	subi	r20, 0xFF	; 255
    478a:	5f 4f       	sbci	r21, 0xFF	; 255
    478c:	64 e1       	ldi	r22, 0x14	; 20
    478e:	8f ec       	ldi	r24, 0xCF	; 207
    4790:	96 e1       	ldi	r25, 0x16	; 22
    4792:	73 d1       	rcall	.+742    	; 0x4a7a <decode_hexadecimal_string_bytes>
    4794:	01 e0       	ldi	r16, 0x01	; 1
    4796:	10 e0       	ldi	r17, 0x00	; 0
    4798:	20 e0       	ldi	r18, 0x00	; 0
    479a:	30 e0       	ldi	r19, 0x00	; 0
    479c:	46 e1       	ldi	r20, 0x16	; 22
    479e:	50 e0       	ldi	r21, 0x00	; 0
    47a0:	6d ec       	ldi	r22, 0xCD	; 205
    47a2:	76 e1       	ldi	r23, 0x16	; 22
    47a4:	80 91 c7 16 	lds	r24, 0x16C7	; 0x8016c7 <_downlinkMessageBuffer>
    47a8:	90 91 c8 16 	lds	r25, 0x16C8	; 0x8016c8 <_downlinkMessageBuffer+0x1>
    47ac:	0e 94 b9 0c 	call	0x1972	; 0x1972 <xStreamBufferSend>
    47b0:	8e e0       	ldi	r24, 0x0E	; 14
    47b2:	03 c0       	rjmp	.+6      	; 0x47ba <lora_driver_sendUploadMessage+0x18a>
    47b4:	84 e1       	ldi	r24, 0x14	; 20
    47b6:	01 c0       	rjmp	.+2      	; 0x47ba <lora_driver_sendUploadMessage+0x18a>
    47b8:	80 e0       	ldi	r24, 0x00	; 0
    47ba:	0f 90       	pop	r0
    47bc:	df 91       	pop	r29
    47be:	cf 91       	pop	r28
    47c0:	1f 91       	pop	r17
    47c2:	0f 91       	pop	r16
    47c4:	08 95       	ret

000047c6 <lora_driver_setAdaptiveDataRate>:
    47c6:	81 30       	cpi	r24, 0x01	; 1
    47c8:	19 f0       	breq	.+6      	; 0x47d0 <lora_driver_setAdaptiveDataRate+0xa>
    47ca:	60 e7       	ldi	r22, 0x70	; 112
    47cc:	76 e0       	ldi	r23, 0x06	; 6
    47ce:	02 c0       	rjmp	.+4      	; 0x47d4 <lora_driver_setAdaptiveDataRate+0xe>
    47d0:	69 e4       	ldi	r22, 0x49	; 73
    47d2:	77 e0       	ldi	r23, 0x07	; 7
    47d4:	84 e7       	ldi	r24, 0x74	; 116
    47d6:	96 e0       	ldi	r25, 0x06	; 6
    47d8:	43 ce       	rjmp	.-890    	; 0x4460 <_uploadMessageRc>
    47da:	08 95       	ret

000047dc <lora_driver_setReceiveDelay>:
    47dc:	9f 93       	push	r25
    47de:	8f 93       	push	r24
    47e0:	85 ea       	ldi	r24, 0xA5	; 165
    47e2:	96 e0       	ldi	r25, 0x06	; 6
    47e4:	9f 93       	push	r25
    47e6:	8f 93       	push	r24
    47e8:	85 e2       	ldi	r24, 0x25	; 37
    47ea:	97 e1       	ldi	r25, 0x17	; 23
    47ec:	9f 93       	push	r25
    47ee:	8f 93       	push	r24
    47f0:	0e 94 97 36 	call	0x6d2e	; 0x6d2e <sprintf>
    47f4:	60 e0       	ldi	r22, 0x00	; 0
    47f6:	70 e0       	ldi	r23, 0x00	; 0
    47f8:	85 e2       	ldi	r24, 0x25	; 37
    47fa:	97 e1       	ldi	r25, 0x17	; 23
    47fc:	31 de       	rcall	.-926    	; 0x4460 <_uploadMessageRc>
    47fe:	0f 90       	pop	r0
    4800:	0f 90       	pop	r0
    4802:	0f 90       	pop	r0
    4804:	0f 90       	pop	r0
    4806:	0f 90       	pop	r0
    4808:	0f 90       	pop	r0
    480a:	08 95       	ret

0000480c <lora_driver_configureToEu868>:
    480c:	2f 92       	push	r2
    480e:	3f 92       	push	r3
    4810:	4f 92       	push	r4
    4812:	5f 92       	push	r5
    4814:	6f 92       	push	r6
    4816:	7f 92       	push	r7
    4818:	8f 92       	push	r8
    481a:	9f 92       	push	r9
    481c:	af 92       	push	r10
    481e:	bf 92       	push	r11
    4820:	cf 92       	push	r12
    4822:	df 92       	push	r13
    4824:	ef 92       	push	r14
    4826:	ff 92       	push	r15
    4828:	0f 93       	push	r16
    482a:	1f 93       	push	r17
    482c:	cf 93       	push	r28
    482e:	df 93       	push	r29
    4830:	cd b7       	in	r28, 0x3d	; 61
    4832:	de b7       	in	r29, 0x3e	; 62
    4834:	a0 97       	sbiw	r28, 0x20	; 32
    4836:	0f b6       	in	r0, 0x3f	; 63
    4838:	f8 94       	cli
    483a:	de bf       	out	0x3e, r29	; 62
    483c:	0f be       	out	0x3f, r0	; 63
    483e:	cd bf       	out	0x3d, r28	; 61
    4840:	62 ed       	ldi	r22, 0xD2	; 210
    4842:	76 e0       	ldi	r23, 0x06	; 6
    4844:	8e ed       	ldi	r24, 0xDE	; 222
    4846:	96 e0       	ldi	r25, 0x06	; 6
    4848:	3c dd       	rcall	.-1416   	; 0x42c2 <_uploadMessage>
    484a:	95 dd       	rcall	.-1238   	; 0x4376 <_reply2ReturnCode>
    484c:	81 11       	cpse	r24, r1
    484e:	a3 c0       	rjmp	.+326    	; 0x4996 <lora_driver_configureToEu868+0x18a>
    4850:	80 e2       	ldi	r24, 0x20	; 32
    4852:	e2 e2       	ldi	r30, 0x22	; 34
    4854:	f2 e0       	ldi	r31, 0x02	; 2
    4856:	de 01       	movw	r26, r28
    4858:	11 96       	adiw	r26, 0x01	; 1
    485a:	01 90       	ld	r0, Z+
    485c:	0d 92       	st	X+, r0
    485e:	8a 95       	dec	r24
    4860:	e1 f7       	brne	.-8      	; 0x485a <lora_driver_configureToEu868+0x4e>
    4862:	9e 01       	movw	r18, r28
    4864:	2f 5f       	subi	r18, 0xFF	; 255
    4866:	3f 4f       	sbci	r19, 0xFF	; 255
    4868:	69 01       	movw	r12, r18
    486a:	e1 2c       	mov	r14, r1
    486c:	f1 2c       	mov	r15, r1
    486e:	0f 2e       	mov	r0, r31
    4870:	fa ee       	ldi	r31, 0xEA	; 234
    4872:	af 2e       	mov	r10, r31
    4874:	f6 e0       	ldi	r31, 0x06	; 6
    4876:	bf 2e       	mov	r11, r31
    4878:	f0 2d       	mov	r31, r0
    487a:	05 e2       	ldi	r16, 0x25	; 37
    487c:	17 e1       	ldi	r17, 0x17	; 23
    487e:	0f 2e       	mov	r0, r31
    4880:	f3 e0       	ldi	r31, 0x03	; 3
    4882:	4f 2e       	mov	r4, r31
    4884:	f7 e0       	ldi	r31, 0x07	; 7
    4886:	5f 2e       	mov	r5, r31
    4888:	f0 2d       	mov	r31, r0
    488a:	0f 2e       	mov	r0, r31
    488c:	fa e1       	ldi	r31, 0x1A	; 26
    488e:	8f 2e       	mov	r8, r31
    4890:	f7 e0       	ldi	r31, 0x07	; 7
    4892:	9f 2e       	mov	r9, r31
    4894:	f0 2d       	mov	r31, r0
    4896:	0f 2e       	mov	r0, r31
    4898:	f4 e3       	ldi	r31, 0x34	; 52
    489a:	6f 2e       	mov	r6, r31
    489c:	f7 e0       	ldi	r31, 0x07	; 7
    489e:	7f 2e       	mov	r7, r31
    48a0:	f0 2d       	mov	r31, r0
    48a2:	3e 2c       	mov	r3, r14
    48a4:	2f 2c       	mov	r2, r15
    48a6:	ff 92       	push	r15
    48a8:	ef 92       	push	r14
    48aa:	bf 92       	push	r11
    48ac:	af 92       	push	r10
    48ae:	1f 93       	push	r17
    48b0:	0f 93       	push	r16
    48b2:	0e 94 97 36 	call	0x6d2e	; 0x6d2e <sprintf>
    48b6:	60 e0       	ldi	r22, 0x00	; 0
    48b8:	70 e0       	ldi	r23, 0x00	; 0
    48ba:	c8 01       	movw	r24, r16
    48bc:	02 dd       	rcall	.-1532   	; 0x42c2 <_uploadMessage>
    48be:	5b dd       	rcall	.-1354   	; 0x4376 <_reply2ReturnCode>
    48c0:	0f 90       	pop	r0
    48c2:	0f 90       	pop	r0
    48c4:	0f 90       	pop	r0
    48c6:	0f 90       	pop	r0
    48c8:	0f 90       	pop	r0
    48ca:	0f 90       	pop	r0
    48cc:	81 11       	cpse	r24, r1
    48ce:	63 c0       	rjmp	.+198    	; 0x4996 <lora_driver_configureToEu868+0x18a>
    48d0:	32 e0       	ldi	r19, 0x02	; 2
    48d2:	3e 15       	cp	r19, r14
    48d4:	e8 f4       	brcc	.+58     	; 0x4910 <lora_driver_configureToEu868+0x104>
    48d6:	f6 01       	movw	r30, r12
    48d8:	83 81       	ldd	r24, Z+3	; 0x03
    48da:	8f 93       	push	r24
    48dc:	82 81       	ldd	r24, Z+2	; 0x02
    48de:	8f 93       	push	r24
    48e0:	81 81       	ldd	r24, Z+1	; 0x01
    48e2:	8f 93       	push	r24
    48e4:	80 81       	ld	r24, Z
    48e6:	8f 93       	push	r24
    48e8:	ff 92       	push	r15
    48ea:	ef 92       	push	r14
    48ec:	5f 92       	push	r5
    48ee:	4f 92       	push	r4
    48f0:	1f 93       	push	r17
    48f2:	0f 93       	push	r16
    48f4:	0e 94 97 36 	call	0x6d2e	; 0x6d2e <sprintf>
    48f8:	60 e0       	ldi	r22, 0x00	; 0
    48fa:	70 e0       	ldi	r23, 0x00	; 0
    48fc:	c8 01       	movw	r24, r16
    48fe:	e1 dc       	rcall	.-1598   	; 0x42c2 <_uploadMessage>
    4900:	3a dd       	rcall	.-1420   	; 0x4376 <_reply2ReturnCode>
    4902:	0f b6       	in	r0, 0x3f	; 63
    4904:	f8 94       	cli
    4906:	de bf       	out	0x3e, r29	; 62
    4908:	0f be       	out	0x3f, r0	; 63
    490a:	cd bf       	out	0x3d, r28	; 61
    490c:	81 11       	cpse	r24, r1
    490e:	43 c0       	rjmp	.+134    	; 0x4996 <lora_driver_configureToEu868+0x18a>
    4910:	2f 92       	push	r2
    4912:	3f 92       	push	r3
    4914:	9f 92       	push	r9
    4916:	8f 92       	push	r8
    4918:	1f 93       	push	r17
    491a:	0f 93       	push	r16
    491c:	0e 94 97 36 	call	0x6d2e	; 0x6d2e <sprintf>
    4920:	60 e0       	ldi	r22, 0x00	; 0
    4922:	70 e0       	ldi	r23, 0x00	; 0
    4924:	c8 01       	movw	r24, r16
    4926:	cd dc       	rcall	.-1638   	; 0x42c2 <_uploadMessage>
    4928:	26 dd       	rcall	.-1460   	; 0x4376 <_reply2ReturnCode>
    492a:	0f 90       	pop	r0
    492c:	0f 90       	pop	r0
    492e:	0f 90       	pop	r0
    4930:	0f 90       	pop	r0
    4932:	0f 90       	pop	r0
    4934:	0f 90       	pop	r0
    4936:	81 11       	cpse	r24, r1
    4938:	2e c0       	rjmp	.+92     	; 0x4996 <lora_driver_configureToEu868+0x18a>
    493a:	2f 92       	push	r2
    493c:	3f 92       	push	r3
    493e:	7f 92       	push	r7
    4940:	6f 92       	push	r6
    4942:	1f 93       	push	r17
    4944:	0f 93       	push	r16
    4946:	0e 94 97 36 	call	0x6d2e	; 0x6d2e <sprintf>
    494a:	60 e0       	ldi	r22, 0x00	; 0
    494c:	70 e0       	ldi	r23, 0x00	; 0
    494e:	c8 01       	movw	r24, r16
    4950:	b8 dc       	rcall	.-1680   	; 0x42c2 <_uploadMessage>
    4952:	11 dd       	rcall	.-1502   	; 0x4376 <_reply2ReturnCode>
    4954:	0f 90       	pop	r0
    4956:	0f 90       	pop	r0
    4958:	0f 90       	pop	r0
    495a:	0f 90       	pop	r0
    495c:	0f 90       	pop	r0
    495e:	0f 90       	pop	r0
    4960:	81 11       	cpse	r24, r1
    4962:	19 c0       	rjmp	.+50     	; 0x4996 <lora_driver_configureToEu868+0x18a>
    4964:	3f ef       	ldi	r19, 0xFF	; 255
    4966:	e3 1a       	sub	r14, r19
    4968:	f3 0a       	sbc	r15, r19
    496a:	84 e0       	ldi	r24, 0x04	; 4
    496c:	c8 0e       	add	r12, r24
    496e:	d1 1c       	adc	r13, r1
    4970:	98 e0       	ldi	r25, 0x08	; 8
    4972:	e9 16       	cp	r14, r25
    4974:	f1 04       	cpc	r15, r1
    4976:	09 f0       	breq	.+2      	; 0x497a <lora_driver_configureToEu868+0x16e>
    4978:	94 cf       	rjmp	.-216    	; 0x48a2 <lora_driver_configureToEu868+0x96>
    497a:	60 e0       	ldi	r22, 0x00	; 0
    497c:	70 e0       	ldi	r23, 0x00	; 0
    497e:	8c e4       	ldi	r24, 0x4C	; 76
    4980:	97 e0       	ldi	r25, 0x07	; 7
    4982:	9f dc       	rcall	.-1730   	; 0x42c2 <_uploadMessage>
    4984:	f8 dc       	rcall	.-1552   	; 0x4376 <_reply2ReturnCode>
    4986:	81 11       	cpse	r24, r1
    4988:	06 c0       	rjmp	.+12     	; 0x4996 <lora_driver_configureToEu868+0x18a>
    498a:	60 e0       	ldi	r22, 0x00	; 0
    498c:	70 e0       	ldi	r23, 0x00	; 0
    498e:	8d e5       	ldi	r24, 0x5D	; 93
    4990:	97 e0       	ldi	r25, 0x07	; 7
    4992:	97 dc       	rcall	.-1746   	; 0x42c2 <_uploadMessage>
    4994:	f0 dc       	rcall	.-1568   	; 0x4376 <_reply2ReturnCode>
    4996:	a0 96       	adiw	r28, 0x20	; 32
    4998:	0f b6       	in	r0, 0x3f	; 63
    499a:	f8 94       	cli
    499c:	de bf       	out	0x3e, r29	; 62
    499e:	0f be       	out	0x3f, r0	; 63
    49a0:	cd bf       	out	0x3d, r28	; 61
    49a2:	df 91       	pop	r29
    49a4:	cf 91       	pop	r28
    49a6:	1f 91       	pop	r17
    49a8:	0f 91       	pop	r16
    49aa:	ff 90       	pop	r15
    49ac:	ef 90       	pop	r14
    49ae:	df 90       	pop	r13
    49b0:	cf 90       	pop	r12
    49b2:	bf 90       	pop	r11
    49b4:	af 90       	pop	r10
    49b6:	9f 90       	pop	r9
    49b8:	8f 90       	pop	r8
    49ba:	7f 90       	pop	r7
    49bc:	6f 90       	pop	r6
    49be:	5f 90       	pop	r5
    49c0:	4f 90       	pop	r4
    49c2:	3f 90       	pop	r3
    49c4:	2f 90       	pop	r2
    49c6:	08 95       	ret

000049c8 <lora_driver_setOtaaIdentity>:
    49c8:	ef 92       	push	r14
    49ca:	ff 92       	push	r15
    49cc:	0f 93       	push	r16
    49ce:	1f 93       	push	r17
    49d0:	cf 93       	push	r28
    49d2:	df 93       	push	r29
    49d4:	ec 01       	movw	r28, r24
    49d6:	8b 01       	movw	r16, r22
    49d8:	7a 01       	movw	r14, r20
    49da:	81 e0       	ldi	r24, 0x01	; 1
    49dc:	f4 de       	rcall	.-536    	; 0x47c6 <lora_driver_setAdaptiveDataRate>
    49de:	81 11       	cpse	r24, r1
    49e0:	0d c0       	rjmp	.+26     	; 0x49fc <lora_driver_setOtaaIdentity+0x34>
    49e2:	ce 01       	movw	r24, r28
    49e4:	d4 dd       	rcall	.-1112   	; 0x458e <lora_driver_setApplicationIdentifier>
    49e6:	81 11       	cpse	r24, r1
    49e8:	09 c0       	rjmp	.+18     	; 0x49fc <lora_driver_setOtaaIdentity+0x34>
    49ea:	c8 01       	movw	r24, r16
    49ec:	e1 dd       	rcall	.-1086   	; 0x45b0 <lora_driver_setApplicationKey>
    49ee:	81 11       	cpse	r24, r1
    49f0:	05 c0       	rjmp	.+10     	; 0x49fc <lora_driver_setOtaaIdentity+0x34>
    49f2:	c7 01       	movw	r24, r14
    49f4:	bb dd       	rcall	.-1162   	; 0x456c <lora_driver_setDeviceIdentifier>
    49f6:	81 11       	cpse	r24, r1
    49f8:	01 c0       	rjmp	.+2      	; 0x49fc <lora_driver_setOtaaIdentity+0x34>
    49fa:	eb dd       	rcall	.-1066   	; 0x45d2 <lora_driver_saveMac>
    49fc:	df 91       	pop	r29
    49fe:	cf 91       	pop	r28
    4a00:	1f 91       	pop	r17
    4a02:	0f 91       	pop	r16
    4a04:	ff 90       	pop	r15
    4a06:	ef 90       	pop	r14
    4a08:	08 95       	ret

00004a0a <lora_driver_mapReturnCodeToText>:
    4a0a:	90 e0       	ldi	r25, 0x00	; 0
    4a0c:	fc 01       	movw	r30, r24
    4a0e:	ee 0f       	add	r30, r30
    4a10:	ff 1f       	adc	r31, r31
    4a12:	8e 0f       	add	r24, r30
    4a14:	9f 1f       	adc	r25, r31
    4a16:	fc 01       	movw	r30, r24
    4a18:	ea 5d       	subi	r30, 0xDA	; 218
    4a1a:	f7 4f       	sbci	r31, 0xF7	; 247
    4a1c:	81 81       	ldd	r24, Z+1	; 0x01
    4a1e:	92 81       	ldd	r25, Z+2	; 0x02
    4a20:	08 95       	ret

00004a22 <decode_port_no>:
    4a22:	dc 01       	movw	r26, r24
    4a24:	00 97       	sbiw	r24, 0x00	; 0
    4a26:	29 f1       	breq	.+74     	; 0x4a72 <decode_port_no+0x50>
    4a28:	fb 01       	movw	r30, r22
    4a2a:	20 81       	ld	r18, Z
    4a2c:	fc 01       	movw	r30, r24
    4a2e:	01 90       	ld	r0, Z+
    4a30:	00 20       	and	r0, r0
    4a32:	e9 f7       	brne	.-6      	; 0x4a2e <decode_port_no+0xc>
    4a34:	31 97       	sbiw	r30, 0x01	; 1
    4a36:	e8 1b       	sub	r30, r24
    4a38:	f9 0b       	sbc	r31, r25
    4a3a:	82 2f       	mov	r24, r18
    4a3c:	90 e0       	ldi	r25, 0x00	; 0
    4a3e:	e8 17       	cp	r30, r24
    4a40:	f9 07       	cpc	r31, r25
    4a42:	c8 f0       	brcs	.+50     	; 0x4a76 <decode_port_no+0x54>
    4a44:	80 e0       	ldi	r24, 0x00	; 0
    4a46:	08 c0       	rjmp	.+16     	; 0x4a58 <decode_port_no+0x36>
    4a48:	88 0f       	add	r24, r24
    4a4a:	38 2f       	mov	r19, r24
    4a4c:	33 0f       	add	r19, r19
    4a4e:	33 0f       	add	r19, r19
    4a50:	83 0f       	add	r24, r19
    4a52:	80 53       	subi	r24, 0x30	; 48
    4a54:	89 0f       	add	r24, r25
    4a56:	2f 5f       	subi	r18, 0xFF	; 255
    4a58:	fd 01       	movw	r30, r26
    4a5a:	e2 0f       	add	r30, r18
    4a5c:	f1 1d       	adc	r31, r1
    4a5e:	90 81       	ld	r25, Z
    4a60:	30 ed       	ldi	r19, 0xD0	; 208
    4a62:	39 0f       	add	r19, r25
    4a64:	3a 30       	cpi	r19, 0x0A	; 10
    4a66:	10 f4       	brcc	.+4      	; 0x4a6c <decode_port_no+0x4a>
    4a68:	91 11       	cpse	r25, r1
    4a6a:	ee cf       	rjmp	.-36     	; 0x4a48 <decode_port_no+0x26>
    4a6c:	fb 01       	movw	r30, r22
    4a6e:	20 83       	st	Z, r18
    4a70:	08 95       	ret
    4a72:	80 e0       	ldi	r24, 0x00	; 0
    4a74:	08 95       	ret
    4a76:	80 e0       	ldi	r24, 0x00	; 0
    4a78:	08 95       	ret

00004a7a <decode_hexadecimal_string_bytes>:
    4a7a:	0f 93       	push	r16
    4a7c:	1f 93       	push	r17
    4a7e:	cf 93       	push	r28
    4a80:	df 93       	push	r29
    4a82:	dc 01       	movw	r26, r24
    4a84:	ea 01       	movw	r28, r20
    4a86:	20 97       	sbiw	r28, 0x00	; 0
    4a88:	e1 f1       	breq	.+120    	; 0x4b02 <decode_hexadecimal_string_bytes+0x88>
    4a8a:	fa 01       	movw	r30, r20
    4a8c:	01 90       	ld	r0, Z+
    4a8e:	00 20       	and	r0, r0
    4a90:	e9 f7       	brne	.-6      	; 0x4a8c <decode_hexadecimal_string_bytes+0x12>
    4a92:	31 97       	sbiw	r30, 0x01	; 1
    4a94:	e4 1b       	sub	r30, r20
    4a96:	f5 0b       	sbc	r31, r21
    4a98:	32 97       	sbiw	r30, 0x02	; 2
    4a9a:	10 f5       	brcc	.+68     	; 0x4ae0 <decode_hexadecimal_string_bytes+0x66>
    4a9c:	32 c0       	rjmp	.+100    	; 0x4b02 <decode_hexadecimal_string_bytes+0x88>
    4a9e:	8d 01       	movw	r16, r26
    4aa0:	04 0f       	add	r16, r20
    4aa2:	15 1f       	adc	r17, r21
    4aa4:	30 e0       	ldi	r19, 0x00	; 0
    4aa6:	ae 01       	movw	r20, r28
    4aa8:	42 0f       	add	r20, r18
    4aaa:	53 1f       	adc	r21, r19
    4aac:	fa 01       	movw	r30, r20
    4aae:	90 81       	ld	r25, Z
    4ab0:	91 34       	cpi	r25, 0x41	; 65
    4ab2:	28 f0       	brcs	.+10     	; 0x4abe <decode_hexadecimal_string_bytes+0x44>
    4ab4:	97 53       	subi	r25, 0x37	; 55
    4ab6:	59 2f       	mov	r21, r25
    4ab8:	52 95       	swap	r21
    4aba:	50 7f       	andi	r21, 0xF0	; 240
    4abc:	03 c0       	rjmp	.+6      	; 0x4ac4 <decode_hexadecimal_string_bytes+0x4a>
    4abe:	59 2f       	mov	r21, r25
    4ac0:	52 95       	swap	r21
    4ac2:	50 7f       	andi	r21, 0xF0	; 240
    4ac4:	2c 0f       	add	r18, r28
    4ac6:	3d 1f       	adc	r19, r29
    4ac8:	f9 01       	movw	r30, r18
    4aca:	91 81       	ldd	r25, Z+1	; 0x01
    4acc:	91 34       	cpi	r25, 0x41	; 65
    4ace:	10 f0       	brcs	.+4      	; 0x4ad4 <decode_hexadecimal_string_bytes+0x5a>
    4ad0:	97 53       	subi	r25, 0x37	; 55
    4ad2:	01 c0       	rjmp	.+2      	; 0x4ad6 <decode_hexadecimal_string_bytes+0x5c>
    4ad4:	90 53       	subi	r25, 0x30	; 48
    4ad6:	95 0f       	add	r25, r21
    4ad8:	f8 01       	movw	r30, r16
    4ada:	90 83       	st	Z, r25
    4adc:	8f 5f       	subi	r24, 0xFF	; 255
    4ade:	01 c0       	rjmp	.+2      	; 0x4ae2 <decode_hexadecimal_string_bytes+0x68>
    4ae0:	80 e0       	ldi	r24, 0x00	; 0
    4ae2:	28 2f       	mov	r18, r24
    4ae4:	22 0f       	add	r18, r18
    4ae6:	48 2f       	mov	r20, r24
    4ae8:	50 e0       	ldi	r21, 0x00	; 0
    4aea:	fe 01       	movw	r30, r28
    4aec:	01 90       	ld	r0, Z+
    4aee:	00 20       	and	r0, r0
    4af0:	e9 f7       	brne	.-6      	; 0x4aec <decode_hexadecimal_string_bytes+0x72>
    4af2:	31 97       	sbiw	r30, 0x01	; 1
    4af4:	ec 1b       	sub	r30, r28
    4af6:	fd 0b       	sbc	r31, r29
    4af8:	4e 17       	cp	r20, r30
    4afa:	5f 07       	cpc	r21, r31
    4afc:	10 f4       	brcc	.+4      	; 0x4b02 <decode_hexadecimal_string_bytes+0x88>
    4afe:	86 13       	cpse	r24, r22
    4b00:	ce cf       	rjmp	.-100    	; 0x4a9e <decode_hexadecimal_string_bytes+0x24>
    4b02:	df 91       	pop	r29
    4b04:	cf 91       	pop	r28
    4b06:	1f 91       	pop	r17
    4b08:	0f 91       	pop	r16
    4b0a:	08 95       	ret

00004b0c <_serialCallBack>:
    4b0c:	80 91 82 17 	lds	r24, 0x1782	; 0x801782 <crc_sum.1945>
    4b10:	86 0f       	add	r24, r22
    4b12:	80 93 82 17 	sts	0x1782, r24	; 0x801782 <crc_sum.1945>
    4b16:	90 91 85 17 	lds	r25, 0x1785	; 0x801785 <_mh_state>
    4b1a:	91 30       	cpi	r25, 0x01	; 1
    4b1c:	79 f0       	breq	.+30     	; 0x4b3c <_serialCallBack+0x30>
    4b1e:	28 f0       	brcs	.+10     	; 0x4b2a <_serialCallBack+0x1e>
    4b20:	92 30       	cpi	r25, 0x02	; 2
    4b22:	a9 f0       	breq	.+42     	; 0x4b4e <_serialCallBack+0x42>
    4b24:	93 30       	cpi	r25, 0x03	; 3
    4b26:	19 f1       	breq	.+70     	; 0x4b6e <_serialCallBack+0x62>
    4b28:	08 95       	ret
    4b2a:	6f 3f       	cpi	r22, 0xFF	; 255
    4b2c:	09 f0       	breq	.+2      	; 0x4b30 <_serialCallBack+0x24>
    4b2e:	48 c0       	rjmp	.+144    	; 0x4bc0 <_serialCallBack+0xb4>
    4b30:	10 92 82 17 	sts	0x1782, r1	; 0x801782 <crc_sum.1945>
    4b34:	81 e0       	ldi	r24, 0x01	; 1
    4b36:	80 93 85 17 	sts	0x1785, r24	; 0x801785 <_mh_state>
    4b3a:	08 95       	ret
    4b3c:	66 38       	cpi	r22, 0x86	; 134
    4b3e:	09 f0       	breq	.+2      	; 0x4b42 <_serialCallBack+0x36>
    4b40:	3f c0       	rjmp	.+126    	; 0x4bc0 <_serialCallBack+0xb4>
    4b42:	10 92 81 17 	sts	0x1781, r1	; 0x801781 <inDex.1943>
    4b46:	82 e0       	ldi	r24, 0x02	; 2
    4b48:	80 93 85 17 	sts	0x1785, r24	; 0x801785 <_mh_state>
    4b4c:	08 95       	ret
    4b4e:	e0 91 81 17 	lds	r30, 0x1781	; 0x801781 <inDex.1943>
    4b52:	81 e0       	ldi	r24, 0x01	; 1
    4b54:	8e 0f       	add	r24, r30
    4b56:	80 93 81 17 	sts	0x1781, r24	; 0x801781 <inDex.1943>
    4b5a:	f0 e0       	ldi	r31, 0x00	; 0
    4b5c:	e1 58       	subi	r30, 0x81	; 129
    4b5e:	f8 4e       	sbci	r31, 0xE8	; 232
    4b60:	60 83       	st	Z, r22
    4b62:	82 30       	cpi	r24, 0x02	; 2
    4b64:	69 f5       	brne	.+90     	; 0x4bc0 <_serialCallBack+0xb4>
    4b66:	83 e0       	ldi	r24, 0x03	; 3
    4b68:	80 93 85 17 	sts	0x1785, r24	; 0x801785 <_mh_state>
    4b6c:	08 95       	ret
    4b6e:	90 91 81 17 	lds	r25, 0x1781	; 0x801781 <inDex.1943>
    4b72:	21 e0       	ldi	r18, 0x01	; 1
    4b74:	29 0f       	add	r18, r25
    4b76:	20 93 81 17 	sts	0x1781, r18	; 0x801781 <inDex.1943>
    4b7a:	96 30       	cpi	r25, 0x06	; 6
    4b7c:	09 f5       	brne	.+66     	; 0x4bc0 <_serialCallBack+0xb4>
    4b7e:	81 11       	cpse	r24, r1
    4b80:	0e c0       	rjmp	.+28     	; 0x4b9e <_serialCallBack+0x92>
    4b82:	ef e7       	ldi	r30, 0x7F	; 127
    4b84:	f7 e1       	ldi	r31, 0x17	; 23
    4b86:	80 81       	ld	r24, Z
    4b88:	90 e0       	ldi	r25, 0x00	; 0
    4b8a:	98 2f       	mov	r25, r24
    4b8c:	88 27       	eor	r24, r24
    4b8e:	21 81       	ldd	r18, Z+1	; 0x01
    4b90:	82 0f       	add	r24, r18
    4b92:	91 1d       	adc	r25, r1
    4b94:	90 93 87 17 	sts	0x1787, r25	; 0x801787 <_ppm+0x1>
    4b98:	80 93 86 17 	sts	0x1786, r24	; 0x801786 <_ppm>
    4b9c:	04 c0       	rjmp	.+8      	; 0x4ba6 <_serialCallBack+0x9a>
    4b9e:	10 92 87 17 	sts	0x1787, r1	; 0x801787 <_ppm+0x1>
    4ba2:	10 92 86 17 	sts	0x1786, r1	; 0x801786 <_ppm>
    4ba6:	10 92 85 17 	sts	0x1785, r1	; 0x801785 <_mh_state>
    4baa:	e0 91 83 17 	lds	r30, 0x1783	; 0x801783 <_appCallBack>
    4bae:	f0 91 84 17 	lds	r31, 0x1784	; 0x801784 <_appCallBack+0x1>
    4bb2:	30 97       	sbiw	r30, 0x00	; 0
    4bb4:	29 f0       	breq	.+10     	; 0x4bc0 <_serialCallBack+0xb4>
    4bb6:	80 91 86 17 	lds	r24, 0x1786	; 0x801786 <_ppm>
    4bba:	90 91 87 17 	lds	r25, 0x1787	; 0x801787 <_ppm+0x1>
    4bbe:	19 95       	eicall
    4bc0:	08 95       	ret

00004bc2 <mh_z19_initialise>:
    4bc2:	8f 92       	push	r8
    4bc4:	9f 92       	push	r9
    4bc6:	af 92       	push	r10
    4bc8:	cf 92       	push	r12
    4bca:	ef 92       	push	r14
    4bcc:	0f 93       	push	r16
    4bce:	0f 2e       	mov	r0, r31
    4bd0:	f6 e8       	ldi	r31, 0x86	; 134
    4bd2:	8f 2e       	mov	r8, r31
    4bd4:	f5 e2       	ldi	r31, 0x25	; 37
    4bd6:	9f 2e       	mov	r9, r31
    4bd8:	f0 2d       	mov	r31, r0
    4bda:	68 94       	set
    4bdc:	aa 24       	eor	r10, r10
    4bde:	a4 f8       	bld	r10, 4
    4be0:	68 94       	set
    4be2:	cc 24       	eor	r12, r12
    4be4:	c4 f8       	bld	r12, 4
    4be6:	e1 2c       	mov	r14, r1
    4be8:	00 e0       	ldi	r16, 0x00	; 0
    4bea:	23 e0       	ldi	r18, 0x03	; 3
    4bec:	40 e8       	ldi	r20, 0x80	; 128
    4bee:	55 e2       	ldi	r21, 0x25	; 37
    4bf0:	60 e0       	ldi	r22, 0x00	; 0
    4bf2:	70 e0       	ldi	r23, 0x00	; 0
    4bf4:	84 d0       	rcall	.+264    	; 0x4cfe <serial_create>
    4bf6:	90 93 89 17 	sts	0x1789, r25	; 0x801789 <_serial+0x1>
    4bfa:	80 93 88 17 	sts	0x1788, r24	; 0x801788 <_serial>
    4bfe:	0f 91       	pop	r16
    4c00:	ef 90       	pop	r14
    4c02:	cf 90       	pop	r12
    4c04:	af 90       	pop	r10
    4c06:	9f 90       	pop	r9
    4c08:	8f 90       	pop	r8
    4c0a:	08 95       	ret

00004c0c <mh_z19_injectCallBack>:
    4c0c:	90 93 84 17 	sts	0x1784, r25	; 0x801784 <_appCallBack+0x1>
    4c10:	80 93 83 17 	sts	0x1783, r24	; 0x801783 <_appCallBack>
    4c14:	08 95       	ret

00004c16 <mh_z19_takeMeassuring>:
    4c16:	cf 93       	push	r28
    4c18:	df 93       	push	r29
    4c1a:	cd b7       	in	r28, 0x3d	; 61
    4c1c:	de b7       	in	r29, 0x3e	; 62
    4c1e:	29 97       	sbiw	r28, 0x09	; 9
    4c20:	0f b6       	in	r0, 0x3f	; 63
    4c22:	f8 94       	cli
    4c24:	de bf       	out	0x3e, r29	; 62
    4c26:	0f be       	out	0x3f, r0	; 63
    4c28:	cd bf       	out	0x3d, r28	; 61
    4c2a:	89 e0       	ldi	r24, 0x09	; 9
    4c2c:	e2 e4       	ldi	r30, 0x42	; 66
    4c2e:	f2 e0       	ldi	r31, 0x02	; 2
    4c30:	9e 01       	movw	r18, r28
    4c32:	2f 5f       	subi	r18, 0xFF	; 255
    4c34:	3f 4f       	sbci	r19, 0xFF	; 255
    4c36:	d9 01       	movw	r26, r18
    4c38:	01 90       	ld	r0, Z+
    4c3a:	0d 92       	st	X+, r0
    4c3c:	8a 95       	dec	r24
    4c3e:	e1 f7       	brne	.-8      	; 0x4c38 <mh_z19_takeMeassuring+0x22>
    4c40:	10 92 87 17 	sts	0x1787, r1	; 0x801787 <_ppm+0x1>
    4c44:	10 92 86 17 	sts	0x1786, r1	; 0x801786 <_ppm>
    4c48:	80 91 88 17 	lds	r24, 0x1788	; 0x801788 <_serial>
    4c4c:	90 91 89 17 	lds	r25, 0x1789	; 0x801789 <_serial+0x1>
    4c50:	00 97       	sbiw	r24, 0x00	; 0
    4c52:	31 f0       	breq	.+12     	; 0x4c60 <mh_z19_takeMeassuring+0x4a>
    4c54:	42 2f       	mov	r20, r18
    4c56:	53 2f       	mov	r21, r19
    4c58:	69 e0       	ldi	r22, 0x09	; 9
    4c5a:	1e d1       	rcall	.+572    	; 0x4e98 <serial_sendBytes>
    4c5c:	80 e0       	ldi	r24, 0x00	; 0
    4c5e:	01 c0       	rjmp	.+2      	; 0x4c62 <mh_z19_takeMeassuring+0x4c>
    4c60:	82 e0       	ldi	r24, 0x02	; 2
    4c62:	29 96       	adiw	r28, 0x09	; 9
    4c64:	0f b6       	in	r0, 0x3f	; 63
    4c66:	f8 94       	cli
    4c68:	de bf       	out	0x3e, r29	; 62
    4c6a:	0f be       	out	0x3f, r0	; 63
    4c6c:	cd bf       	out	0x3d, r28	; 61
    4c6e:	df 91       	pop	r29
    4c70:	cf 91       	pop	r28
    4c72:	08 95       	ret

00004c74 <mh_z19_getCo2Ppm>:
    4c74:	20 91 86 17 	lds	r18, 0x1786	; 0x801786 <_ppm>
    4c78:	30 91 87 17 	lds	r19, 0x1787	; 0x801787 <_ppm+0x1>
    4c7c:	21 15       	cp	r18, r1
    4c7e:	31 05       	cpc	r19, r1
    4c80:	29 f4       	brne	.+10     	; 0x4c8c <mh_z19_getCo2Ppm+0x18>
    4c82:	fc 01       	movw	r30, r24
    4c84:	11 82       	std	Z+1, r1	; 0x01
    4c86:	10 82       	st	Z, r1
    4c88:	81 e0       	ldi	r24, 0x01	; 1
    4c8a:	08 95       	ret
    4c8c:	fc 01       	movw	r30, r24
    4c8e:	31 83       	std	Z+1, r19	; 0x01
    4c90:	20 83       	st	Z, r18
    4c92:	80 e0       	ldi	r24, 0x00	; 0
    4c94:	08 95       	ret

00004c96 <rc_servo_setPosition>:
    4c96:	65 36       	cpi	r22, 0x65	; 101
    4c98:	0c f0       	brlt	.+2      	; 0x4c9c <rc_servo_setPosition+0x6>
    4c9a:	64 e6       	ldi	r22, 0x64	; 100
    4c9c:	6c 39       	cpi	r22, 0x9C	; 156
    4c9e:	0c f4       	brge	.+2      	; 0x4ca2 <rc_servo_setPosition+0xc>
    4ca0:	6c e9       	ldi	r22, 0x9C	; 156
    4ca2:	96 ef       	ldi	r25, 0xF6	; 246
    4ca4:	69 02       	muls	r22, r25
    4ca6:	b0 01       	movw	r22, r0
    4ca8:	11 24       	eor	r1, r1
    4caa:	68 54       	subi	r22, 0x48	; 72
    4cac:	74 4f       	sbci	r23, 0xF4	; 244
    4cae:	81 11       	cpse	r24, r1
    4cb0:	05 c0       	rjmp	.+10     	; 0x4cbc <rc_servo_setPosition+0x26>
    4cb2:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4cb6:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    4cba:	08 95       	ret
    4cbc:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    4cc0:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    4cc4:	08 95       	ret

00004cc6 <rc_servo_initialise>:
    4cc6:	ea e0       	ldi	r30, 0x0A	; 10
    4cc8:	f1 e0       	ldi	r31, 0x01	; 1
    4cca:	80 81       	ld	r24, Z
    4ccc:	88 61       	ori	r24, 0x18	; 24
    4cce:	80 83       	st	Z, r24
    4cd0:	8f e3       	ldi	r24, 0x3F	; 63
    4cd2:	9c e9       	ldi	r25, 0x9C	; 156
    4cd4:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    4cd8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    4cdc:	60 e0       	ldi	r22, 0x00	; 0
    4cde:	80 e0       	ldi	r24, 0x00	; 0
    4ce0:	da df       	rcall	.-76     	; 0x4c96 <rc_servo_setPosition>
    4ce2:	60 e0       	ldi	r22, 0x00	; 0
    4ce4:	81 e0       	ldi	r24, 0x01	; 1
    4ce6:	d7 df       	rcall	.-82     	; 0x4c96 <rc_servo_setPosition>
    4ce8:	e0 e2       	ldi	r30, 0x20	; 32
    4cea:	f1 e0       	ldi	r31, 0x01	; 1
    4cec:	80 81       	ld	r24, Z
    4cee:	82 6a       	ori	r24, 0xA2	; 162
    4cf0:	80 83       	st	Z, r24
    4cf2:	e1 e2       	ldi	r30, 0x21	; 33
    4cf4:	f1 e0       	ldi	r31, 0x01	; 1
    4cf6:	80 81       	ld	r24, Z
    4cf8:	8a 61       	ori	r24, 0x1A	; 26
    4cfa:	80 83       	st	Z, r24
    4cfc:	08 95       	ret

00004cfe <serial_create>:
    4cfe:	2f 92       	push	r2
    4d00:	3f 92       	push	r3
    4d02:	4f 92       	push	r4
    4d04:	5f 92       	push	r5
    4d06:	6f 92       	push	r6
    4d08:	7f 92       	push	r7
    4d0a:	8f 92       	push	r8
    4d0c:	9f 92       	push	r9
    4d0e:	af 92       	push	r10
    4d10:	cf 92       	push	r12
    4d12:	ef 92       	push	r14
    4d14:	ff 92       	push	r15
    4d16:	0f 93       	push	r16
    4d18:	1f 93       	push	r17
    4d1a:	cf 93       	push	r28
    4d1c:	df 93       	push	r29
    4d1e:	cd b7       	in	r28, 0x3d	; 61
    4d20:	de b7       	in	r29, 0x3e	; 62
    4d22:	f8 2e       	mov	r15, r24
    4d24:	2a 01       	movw	r4, r20
    4d26:	3b 01       	movw	r6, r22
    4d28:	88 e0       	ldi	r24, 0x08	; 8
    4d2a:	90 e0       	ldi	r25, 0x00	; 0
    4d2c:	0e 94 a6 33 	call	0x674c	; 0x674c <malloc>
    4d30:	8c 01       	movw	r16, r24
    4d32:	8f 2d       	mov	r24, r15
    4d34:	90 e0       	ldi	r25, 0x00	; 0
    4d36:	fc 01       	movw	r30, r24
    4d38:	ee 0f       	add	r30, r30
    4d3a:	ff 1f       	adc	r31, r31
    4d3c:	e6 57       	subi	r30, 0x76	; 118
    4d3e:	f8 4e       	sbci	r31, 0xE8	; 232
    4d40:	11 83       	std	Z+1, r17	; 0x01
    4d42:	00 83       	st	Z, r16
    4d44:	01 15       	cp	r16, r1
    4d46:	11 05       	cpc	r17, r1
    4d48:	09 f4       	brne	.+2      	; 0x4d4c <serial_create+0x4e>
    4d4a:	69 c0       	rjmp	.+210    	; 0x4e1e <serial_create+0x120>
    4d4c:	88 0f       	add	r24, r24
    4d4e:	99 1f       	adc	r25, r25
    4d50:	fc 01       	movw	r30, r24
    4d52:	e5 5f       	subi	r30, 0xF5	; 245
    4d54:	fd 4f       	sbci	r31, 0xFD	; 253
    4d56:	80 81       	ld	r24, Z
    4d58:	91 81       	ldd	r25, Z+1	; 0x01
    4d5a:	d8 01       	movw	r26, r16
    4d5c:	8d 93       	st	X+, r24
    4d5e:	9c 93       	st	X, r25
    4d60:	8c 2d       	mov	r24, r12
    4d62:	90 e0       	ldi	r25, 0x00	; 0
    4d64:	88 0f       	add	r24, r24
    4d66:	99 1f       	adc	r25, r25
    4d68:	88 0f       	add	r24, r24
    4d6a:	99 1f       	adc	r25, r25
    4d6c:	0e 94 a6 33 	call	0x674c	; 0x674c <malloc>
    4d70:	1c 01       	movw	r2, r24
    4d72:	86 e0       	ldi	r24, 0x06	; 6
    4d74:	90 e0       	ldi	r25, 0x00	; 0
    4d76:	0e 94 a6 33 	call	0x674c	; 0x674c <malloc>
    4d7a:	7c 01       	movw	r14, r24
    4d7c:	4c 2d       	mov	r20, r12
    4d7e:	b1 01       	movw	r22, r2
    4d80:	f1 d6       	rcall	.+3554   	; 0x5b64 <fifo_init>
    4d82:	f8 01       	movw	r30, r16
    4d84:	f5 82       	std	Z+5, r15	; 0x05
    4d86:	e4 82       	std	Z+4, r14	; 0x04
    4d88:	8a 2d       	mov	r24, r10
    4d8a:	90 e0       	ldi	r25, 0x00	; 0
    4d8c:	88 0f       	add	r24, r24
    4d8e:	99 1f       	adc	r25, r25
    4d90:	88 0f       	add	r24, r24
    4d92:	99 1f       	adc	r25, r25
    4d94:	0e 94 a6 33 	call	0x674c	; 0x674c <malloc>
    4d98:	1c 01       	movw	r2, r24
    4d9a:	86 e0       	ldi	r24, 0x06	; 6
    4d9c:	90 e0       	ldi	r25, 0x00	; 0
    4d9e:	0e 94 a6 33 	call	0x674c	; 0x674c <malloc>
    4da2:	7c 01       	movw	r14, r24
    4da4:	4a 2d       	mov	r20, r10
    4da6:	b1 01       	movw	r22, r2
    4da8:	dd d6       	rcall	.+3514   	; 0x5b64 <fifo_init>
    4daa:	d8 01       	movw	r26, r16
    4dac:	13 96       	adiw	r26, 0x03	; 3
    4dae:	fc 92       	st	X, r15
    4db0:	ee 92       	st	-X, r14
    4db2:	12 97       	sbiw	r26, 0x02	; 2
    4db4:	17 96       	adiw	r26, 0x07	; 7
    4db6:	9c 92       	st	X, r9
    4db8:	8e 92       	st	-X, r8
    4dba:	16 97       	sbiw	r26, 0x06	; 6
    4dbc:	ff b6       	in	r15, 0x3f	; 63
    4dbe:	f8 94       	cli
    4dc0:	ed 91       	ld	r30, X+
    4dc2:	fc 91       	ld	r31, X
    4dc4:	11 97       	sbiw	r26, 0x01	; 1
    4dc6:	36 97       	sbiw	r30, 0x06	; 6
    4dc8:	80 81       	ld	r24, Z
    4dca:	82 60       	ori	r24, 0x02	; 2
    4dcc:	80 83       	st	Z, r24
    4dce:	8d 90       	ld	r8, X+
    4dd0:	9c 90       	ld	r9, X
    4dd2:	c3 01       	movw	r24, r6
    4dd4:	b2 01       	movw	r22, r4
    4dd6:	e0 d7       	rcall	.+4032   	; 0x5d98 <__floatunsisf>
    4dd8:	20 e0       	ldi	r18, 0x00	; 0
    4dda:	30 e0       	ldi	r19, 0x00	; 0
    4ddc:	40 e0       	ldi	r20, 0x00	; 0
    4dde:	51 e4       	ldi	r21, 0x41	; 65
    4de0:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__mulsf3>
    4de4:	9b 01       	movw	r18, r22
    4de6:	ac 01       	movw	r20, r24
    4de8:	60 e0       	ldi	r22, 0x00	; 0
    4dea:	74 e2       	ldi	r23, 0x24	; 36
    4dec:	84 e7       	ldi	r24, 0x74	; 116
    4dee:	9b e4       	ldi	r25, 0x4B	; 75
    4df0:	3a d7       	rcall	.+3700   	; 0x5c66 <__divsf3>
    4df2:	20 e0       	ldi	r18, 0x00	; 0
    4df4:	30 e0       	ldi	r19, 0x00	; 0
    4df6:	40 e8       	ldi	r20, 0x80	; 128
    4df8:	5f e3       	ldi	r21, 0x3F	; 63
    4dfa:	d0 d6       	rcall	.+3488   	; 0x5b9c <__subsf3>
    4dfc:	a1 d7       	rcall	.+3906   	; 0x5d40 <__fixunssfsi>
    4dfe:	f4 01       	movw	r30, r8
    4e00:	32 97       	sbiw	r30, 0x02	; 2
    4e02:	60 83       	st	Z, r22
    4e04:	d8 01       	movw	r26, r16
    4e06:	ed 91       	ld	r30, X+
    4e08:	fc 91       	ld	r31, X
    4e0a:	11 97       	sbiw	r26, 0x01	; 1
    4e0c:	35 97       	sbiw	r30, 0x05	; 5
    4e0e:	88 e9       	ldi	r24, 0x98	; 152
    4e10:	80 83       	st	Z, r24
    4e12:	ed 91       	ld	r30, X+
    4e14:	fc 91       	ld	r31, X
    4e16:	34 97       	sbiw	r30, 0x04	; 4
    4e18:	86 e0       	ldi	r24, 0x06	; 6
    4e1a:	80 83       	st	Z, r24
    4e1c:	ff be       	out	0x3f, r15	; 63
    4e1e:	c8 01       	movw	r24, r16
    4e20:	df 91       	pop	r29
    4e22:	cf 91       	pop	r28
    4e24:	1f 91       	pop	r17
    4e26:	0f 91       	pop	r16
    4e28:	ff 90       	pop	r15
    4e2a:	ef 90       	pop	r14
    4e2c:	cf 90       	pop	r12
    4e2e:	af 90       	pop	r10
    4e30:	9f 90       	pop	r9
    4e32:	8f 90       	pop	r8
    4e34:	7f 90       	pop	r7
    4e36:	6f 90       	pop	r6
    4e38:	5f 90       	pop	r5
    4e3a:	4f 90       	pop	r4
    4e3c:	3f 90       	pop	r3
    4e3e:	2f 90       	pop	r2
    4e40:	08 95       	ret

00004e42 <serial_sendByte>:
    4e42:	cf 93       	push	r28
    4e44:	df 93       	push	r29
    4e46:	dc 01       	movw	r26, r24
    4e48:	89 2b       	or	r24, r25
    4e4a:	01 f1       	breq	.+64     	; 0x4e8c <serial_sendByte+0x4a>
    4e4c:	12 96       	adiw	r26, 0x02	; 2
    4e4e:	ed 91       	ld	r30, X+
    4e50:	fc 91       	ld	r31, X
    4e52:	13 97       	sbiw	r26, 0x03	; 3
    4e54:	93 81       	ldd	r25, Z+3	; 0x03
    4e56:	82 81       	ldd	r24, Z+2	; 0x02
    4e58:	25 81       	ldd	r18, Z+5	; 0x05
    4e5a:	98 1b       	sub	r25, r24
    4e5c:	92 23       	and	r25, r18
    4e5e:	84 81       	ldd	r24, Z+4	; 0x04
    4e60:	98 17       	cp	r25, r24
    4e62:	b1 f0       	breq	.+44     	; 0x4e90 <serial_sendByte+0x4e>
    4e64:	83 81       	ldd	r24, Z+3	; 0x03
    4e66:	26 95       	lsr	r18
    4e68:	28 23       	and	r18, r24
    4e6a:	c0 81       	ld	r28, Z
    4e6c:	d1 81       	ldd	r29, Z+1	; 0x01
    4e6e:	c2 0f       	add	r28, r18
    4e70:	d1 1d       	adc	r29, r1
    4e72:	68 83       	st	Y, r22
    4e74:	8f 5f       	subi	r24, 0xFF	; 255
    4e76:	95 81       	ldd	r25, Z+5	; 0x05
    4e78:	89 23       	and	r24, r25
    4e7a:	83 83       	std	Z+3, r24	; 0x03
    4e7c:	ed 91       	ld	r30, X+
    4e7e:	fc 91       	ld	r31, X
    4e80:	35 97       	sbiw	r30, 0x05	; 5
    4e82:	80 81       	ld	r24, Z
    4e84:	80 62       	ori	r24, 0x20	; 32
    4e86:	80 83       	st	Z, r24
    4e88:	80 e0       	ldi	r24, 0x00	; 0
    4e8a:	03 c0       	rjmp	.+6      	; 0x4e92 <serial_sendByte+0x50>
    4e8c:	81 e0       	ldi	r24, 0x01	; 1
    4e8e:	01 c0       	rjmp	.+2      	; 0x4e92 <serial_sendByte+0x50>
    4e90:	82 e0       	ldi	r24, 0x02	; 2
    4e92:	df 91       	pop	r29
    4e94:	cf 91       	pop	r28
    4e96:	08 95       	ret

00004e98 <serial_sendBytes>:
    4e98:	ef 92       	push	r14
    4e9a:	ff 92       	push	r15
    4e9c:	0f 93       	push	r16
    4e9e:	1f 93       	push	r17
    4ea0:	cf 93       	push	r28
    4ea2:	df 93       	push	r29
    4ea4:	7c 01       	movw	r14, r24
    4ea6:	00 97       	sbiw	r24, 0x00	; 0
    4ea8:	09 f4       	brne	.+2      	; 0x4eac <serial_sendBytes+0x14>
    4eaa:	41 c0       	rjmp	.+130    	; 0x4f2e <serial_sendBytes+0x96>
    4eac:	dc 01       	movw	r26, r24
    4eae:	12 96       	adiw	r26, 0x02	; 2
    4eb0:	ed 91       	ld	r30, X+
    4eb2:	fc 91       	ld	r31, X
    4eb4:	13 97       	sbiw	r26, 0x03	; 3
    4eb6:	93 81       	ldd	r25, Z+3	; 0x03
    4eb8:	82 81       	ldd	r24, Z+2	; 0x02
    4eba:	98 1b       	sub	r25, r24
    4ebc:	85 81       	ldd	r24, Z+5	; 0x05
    4ebe:	98 23       	and	r25, r24
    4ec0:	84 81       	ldd	r24, Z+4	; 0x04
    4ec2:	89 1b       	sub	r24, r25
    4ec4:	86 17       	cp	r24, r22
    4ec6:	a8 f1       	brcs	.+106    	; 0x4f32 <serial_sendBytes+0x9a>
    4ec8:	66 23       	and	r22, r22
    4eca:	41 f1       	breq	.+80     	; 0x4f1c <serial_sendBytes+0x84>
    4ecc:	84 2f       	mov	r24, r20
    4ece:	95 2f       	mov	r25, r21
    4ed0:	dc 01       	movw	r26, r24
    4ed2:	61 50       	subi	r22, 0x01	; 1
    4ed4:	46 2f       	mov	r20, r22
    4ed6:	50 e0       	ldi	r21, 0x00	; 0
    4ed8:	4f 5f       	subi	r20, 0xFF	; 255
    4eda:	5f 4f       	sbci	r21, 0xFF	; 255
    4edc:	48 0f       	add	r20, r24
    4ede:	59 1f       	adc	r21, r25
    4ee0:	e7 01       	movw	r28, r14
    4ee2:	ea 81       	ldd	r30, Y+2	; 0x02
    4ee4:	fb 81       	ldd	r31, Y+3	; 0x03
    4ee6:	93 81       	ldd	r25, Z+3	; 0x03
    4ee8:	82 81       	ldd	r24, Z+2	; 0x02
    4eea:	25 81       	ldd	r18, Z+5	; 0x05
    4eec:	98 1b       	sub	r25, r24
    4eee:	92 23       	and	r25, r18
    4ef0:	84 81       	ldd	r24, Z+4	; 0x04
    4ef2:	98 17       	cp	r25, r24
    4ef4:	79 f0       	breq	.+30     	; 0x4f14 <serial_sendBytes+0x7c>
    4ef6:	8c 91       	ld	r24, X
    4ef8:	93 81       	ldd	r25, Z+3	; 0x03
    4efa:	26 95       	lsr	r18
    4efc:	29 23       	and	r18, r25
    4efe:	60 81       	ld	r22, Z
    4f00:	71 81       	ldd	r23, Z+1	; 0x01
    4f02:	8b 01       	movw	r16, r22
    4f04:	02 0f       	add	r16, r18
    4f06:	11 1d       	adc	r17, r1
    4f08:	e8 01       	movw	r28, r16
    4f0a:	88 83       	st	Y, r24
    4f0c:	9f 5f       	subi	r25, 0xFF	; 255
    4f0e:	85 81       	ldd	r24, Z+5	; 0x05
    4f10:	98 23       	and	r25, r24
    4f12:	93 83       	std	Z+3, r25	; 0x03
    4f14:	11 96       	adiw	r26, 0x01	; 1
    4f16:	a4 17       	cp	r26, r20
    4f18:	b5 07       	cpc	r27, r21
    4f1a:	11 f7       	brne	.-60     	; 0x4ee0 <serial_sendBytes+0x48>
    4f1c:	d7 01       	movw	r26, r14
    4f1e:	ed 91       	ld	r30, X+
    4f20:	fc 91       	ld	r31, X
    4f22:	35 97       	sbiw	r30, 0x05	; 5
    4f24:	80 81       	ld	r24, Z
    4f26:	80 62       	ori	r24, 0x20	; 32
    4f28:	80 83       	st	Z, r24
    4f2a:	80 e0       	ldi	r24, 0x00	; 0
    4f2c:	03 c0       	rjmp	.+6      	; 0x4f34 <serial_sendBytes+0x9c>
    4f2e:	81 e0       	ldi	r24, 0x01	; 1
    4f30:	01 c0       	rjmp	.+2      	; 0x4f34 <serial_sendBytes+0x9c>
    4f32:	82 e0       	ldi	r24, 0x02	; 2
    4f34:	df 91       	pop	r29
    4f36:	cf 91       	pop	r28
    4f38:	1f 91       	pop	r17
    4f3a:	0f 91       	pop	r16
    4f3c:	ff 90       	pop	r15
    4f3e:	ef 90       	pop	r14
    4f40:	08 95       	ret

00004f42 <serial_getByte>:
    4f42:	00 97       	sbiw	r24, 0x00	; 0
    4f44:	d1 f0       	breq	.+52     	; 0x4f7a <serial_getByte+0x38>
    4f46:	dc 01       	movw	r26, r24
    4f48:	14 96       	adiw	r26, 0x04	; 4
    4f4a:	ed 91       	ld	r30, X+
    4f4c:	fc 91       	ld	r31, X
    4f4e:	15 97       	sbiw	r26, 0x05	; 5
    4f50:	93 81       	ldd	r25, Z+3	; 0x03
    4f52:	82 81       	ldd	r24, Z+2	; 0x02
    4f54:	98 17       	cp	r25, r24
    4f56:	99 f0       	breq	.+38     	; 0x4f7e <serial_getByte+0x3c>
    4f58:	92 81       	ldd	r25, Z+2	; 0x02
    4f5a:	85 81       	ldd	r24, Z+5	; 0x05
    4f5c:	86 95       	lsr	r24
    4f5e:	89 23       	and	r24, r25
    4f60:	a0 81       	ld	r26, Z
    4f62:	b1 81       	ldd	r27, Z+1	; 0x01
    4f64:	a8 0f       	add	r26, r24
    4f66:	b1 1d       	adc	r27, r1
    4f68:	8c 91       	ld	r24, X
    4f6a:	db 01       	movw	r26, r22
    4f6c:	8c 93       	st	X, r24
    4f6e:	9f 5f       	subi	r25, 0xFF	; 255
    4f70:	85 81       	ldd	r24, Z+5	; 0x05
    4f72:	98 23       	and	r25, r24
    4f74:	92 83       	std	Z+2, r25	; 0x02
    4f76:	80 e0       	ldi	r24, 0x00	; 0
    4f78:	08 95       	ret
    4f7a:	81 e0       	ldi	r24, 0x01	; 1
    4f7c:	08 95       	ret
    4f7e:	83 e0       	ldi	r24, 0x03	; 3
    4f80:	08 95       	ret

00004f82 <__vector_25>:
    4f82:	1f 92       	push	r1
    4f84:	0f 92       	push	r0
    4f86:	0f b6       	in	r0, 0x3f	; 63
    4f88:	0f 92       	push	r0
    4f8a:	11 24       	eor	r1, r1
    4f8c:	0b b6       	in	r0, 0x3b	; 59
    4f8e:	0f 92       	push	r0
    4f90:	2f 93       	push	r18
    4f92:	3f 93       	push	r19
    4f94:	4f 93       	push	r20
    4f96:	5f 93       	push	r21
    4f98:	6f 93       	push	r22
    4f9a:	7f 93       	push	r23
    4f9c:	8f 93       	push	r24
    4f9e:	9f 93       	push	r25
    4fa0:	af 93       	push	r26
    4fa2:	bf 93       	push	r27
    4fa4:	cf 93       	push	r28
    4fa6:	df 93       	push	r29
    4fa8:	ef 93       	push	r30
    4faa:	ff 93       	push	r31
    4fac:	a0 91 8a 17 	lds	r26, 0x178A	; 0x80178a <_ser_handle>
    4fb0:	b0 91 8b 17 	lds	r27, 0x178B	; 0x80178b <_ser_handle+0x1>
    4fb4:	10 97       	sbiw	r26, 0x00	; 0
    4fb6:	11 f1       	breq	.+68     	; 0x4ffc <__vector_25+0x7a>
    4fb8:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4fbc:	14 96       	adiw	r26, 0x04	; 4
    4fbe:	ed 91       	ld	r30, X+
    4fc0:	fc 91       	ld	r31, X
    4fc2:	15 97       	sbiw	r26, 0x05	; 5
    4fc4:	93 81       	ldd	r25, Z+3	; 0x03
    4fc6:	82 81       	ldd	r24, Z+2	; 0x02
    4fc8:	25 81       	ldd	r18, Z+5	; 0x05
    4fca:	98 1b       	sub	r25, r24
    4fcc:	92 23       	and	r25, r18
    4fce:	84 81       	ldd	r24, Z+4	; 0x04
    4fd0:	98 17       	cp	r25, r24
    4fd2:	61 f0       	breq	.+24     	; 0x4fec <__vector_25+0x6a>
    4fd4:	83 81       	ldd	r24, Z+3	; 0x03
    4fd6:	26 95       	lsr	r18
    4fd8:	28 23       	and	r18, r24
    4fda:	c0 81       	ld	r28, Z
    4fdc:	d1 81       	ldd	r29, Z+1	; 0x01
    4fde:	c2 0f       	add	r28, r18
    4fe0:	d1 1d       	adc	r29, r1
    4fe2:	68 83       	st	Y, r22
    4fe4:	8f 5f       	subi	r24, 0xFF	; 255
    4fe6:	95 81       	ldd	r25, Z+5	; 0x05
    4fe8:	89 23       	and	r24, r25
    4fea:	83 83       	std	Z+3, r24	; 0x03
    4fec:	16 96       	adiw	r26, 0x06	; 6
    4fee:	ed 91       	ld	r30, X+
    4ff0:	fc 91       	ld	r31, X
    4ff2:	17 97       	sbiw	r26, 0x07	; 7
    4ff4:	30 97       	sbiw	r30, 0x00	; 0
    4ff6:	11 f0       	breq	.+4      	; 0x4ffc <__vector_25+0x7a>
    4ff8:	cd 01       	movw	r24, r26
    4ffa:	19 95       	eicall
    4ffc:	ff 91       	pop	r31
    4ffe:	ef 91       	pop	r30
    5000:	df 91       	pop	r29
    5002:	cf 91       	pop	r28
    5004:	bf 91       	pop	r27
    5006:	af 91       	pop	r26
    5008:	9f 91       	pop	r25
    500a:	8f 91       	pop	r24
    500c:	7f 91       	pop	r23
    500e:	6f 91       	pop	r22
    5010:	5f 91       	pop	r21
    5012:	4f 91       	pop	r20
    5014:	3f 91       	pop	r19
    5016:	2f 91       	pop	r18
    5018:	0f 90       	pop	r0
    501a:	0b be       	out	0x3b, r0	; 59
    501c:	0f 90       	pop	r0
    501e:	0f be       	out	0x3f, r0	; 63
    5020:	0f 90       	pop	r0
    5022:	1f 90       	pop	r1
    5024:	18 95       	reti

00005026 <__vector_26>:
    5026:	1f 92       	push	r1
    5028:	0f 92       	push	r0
    502a:	0f b6       	in	r0, 0x3f	; 63
    502c:	0f 92       	push	r0
    502e:	11 24       	eor	r1, r1
    5030:	0b b6       	in	r0, 0x3b	; 59
    5032:	0f 92       	push	r0
    5034:	2f 93       	push	r18
    5036:	8f 93       	push	r24
    5038:	9f 93       	push	r25
    503a:	af 93       	push	r26
    503c:	bf 93       	push	r27
    503e:	ef 93       	push	r30
    5040:	ff 93       	push	r31
    5042:	e0 91 8a 17 	lds	r30, 0x178A	; 0x80178a <_ser_handle>
    5046:	f0 91 8b 17 	lds	r31, 0x178B	; 0x80178b <_ser_handle+0x1>
    504a:	30 97       	sbiw	r30, 0x00	; 0
    504c:	b9 f0       	breq	.+46     	; 0x507c <__vector_26+0x56>
    504e:	02 80       	ldd	r0, Z+2	; 0x02
    5050:	f3 81       	ldd	r31, Z+3	; 0x03
    5052:	e0 2d       	mov	r30, r0
    5054:	93 81       	ldd	r25, Z+3	; 0x03
    5056:	82 81       	ldd	r24, Z+2	; 0x02
    5058:	98 17       	cp	r25, r24
    505a:	b1 f0       	breq	.+44     	; 0x5088 <__vector_26+0x62>
    505c:	92 81       	ldd	r25, Z+2	; 0x02
    505e:	85 81       	ldd	r24, Z+5	; 0x05
    5060:	28 2f       	mov	r18, r24
    5062:	26 95       	lsr	r18
    5064:	29 23       	and	r18, r25
    5066:	a0 81       	ld	r26, Z
    5068:	b1 81       	ldd	r27, Z+1	; 0x01
    506a:	a2 0f       	add	r26, r18
    506c:	b1 1d       	adc	r27, r1
    506e:	2c 91       	ld	r18, X
    5070:	9f 5f       	subi	r25, 0xFF	; 255
    5072:	89 23       	and	r24, r25
    5074:	82 83       	std	Z+2, r24	; 0x02
    5076:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    507a:	0b c0       	rjmp	.+22     	; 0x5092 <__vector_26+0x6c>
    507c:	e1 ec       	ldi	r30, 0xC1	; 193
    507e:	f0 e0       	ldi	r31, 0x00	; 0
    5080:	80 81       	ld	r24, Z
    5082:	8f 7d       	andi	r24, 0xDF	; 223
    5084:	80 83       	st	Z, r24
    5086:	05 c0       	rjmp	.+10     	; 0x5092 <__vector_26+0x6c>
    5088:	e1 ec       	ldi	r30, 0xC1	; 193
    508a:	f0 e0       	ldi	r31, 0x00	; 0
    508c:	80 81       	ld	r24, Z
    508e:	8f 7d       	andi	r24, 0xDF	; 223
    5090:	80 83       	st	Z, r24
    5092:	ff 91       	pop	r31
    5094:	ef 91       	pop	r30
    5096:	bf 91       	pop	r27
    5098:	af 91       	pop	r26
    509a:	9f 91       	pop	r25
    509c:	8f 91       	pop	r24
    509e:	2f 91       	pop	r18
    50a0:	0f 90       	pop	r0
    50a2:	0b be       	out	0x3b, r0	; 59
    50a4:	0f 90       	pop	r0
    50a6:	0f be       	out	0x3f, r0	; 63
    50a8:	0f 90       	pop	r0
    50aa:	1f 90       	pop	r1
    50ac:	18 95       	reti

000050ae <__vector_36>:
    50ae:	1f 92       	push	r1
    50b0:	0f 92       	push	r0
    50b2:	0f b6       	in	r0, 0x3f	; 63
    50b4:	0f 92       	push	r0
    50b6:	11 24       	eor	r1, r1
    50b8:	0b b6       	in	r0, 0x3b	; 59
    50ba:	0f 92       	push	r0
    50bc:	2f 93       	push	r18
    50be:	3f 93       	push	r19
    50c0:	4f 93       	push	r20
    50c2:	5f 93       	push	r21
    50c4:	6f 93       	push	r22
    50c6:	7f 93       	push	r23
    50c8:	8f 93       	push	r24
    50ca:	9f 93       	push	r25
    50cc:	af 93       	push	r26
    50ce:	bf 93       	push	r27
    50d0:	cf 93       	push	r28
    50d2:	df 93       	push	r29
    50d4:	ef 93       	push	r30
    50d6:	ff 93       	push	r31
    50d8:	a0 91 8c 17 	lds	r26, 0x178C	; 0x80178c <_ser_handle+0x2>
    50dc:	b0 91 8d 17 	lds	r27, 0x178D	; 0x80178d <_ser_handle+0x3>
    50e0:	10 97       	sbiw	r26, 0x00	; 0
    50e2:	11 f1       	breq	.+68     	; 0x5128 <__vector_36+0x7a>
    50e4:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    50e8:	14 96       	adiw	r26, 0x04	; 4
    50ea:	ed 91       	ld	r30, X+
    50ec:	fc 91       	ld	r31, X
    50ee:	15 97       	sbiw	r26, 0x05	; 5
    50f0:	93 81       	ldd	r25, Z+3	; 0x03
    50f2:	82 81       	ldd	r24, Z+2	; 0x02
    50f4:	25 81       	ldd	r18, Z+5	; 0x05
    50f6:	98 1b       	sub	r25, r24
    50f8:	92 23       	and	r25, r18
    50fa:	84 81       	ldd	r24, Z+4	; 0x04
    50fc:	98 17       	cp	r25, r24
    50fe:	61 f0       	breq	.+24     	; 0x5118 <__vector_36+0x6a>
    5100:	83 81       	ldd	r24, Z+3	; 0x03
    5102:	26 95       	lsr	r18
    5104:	28 23       	and	r18, r24
    5106:	c0 81       	ld	r28, Z
    5108:	d1 81       	ldd	r29, Z+1	; 0x01
    510a:	c2 0f       	add	r28, r18
    510c:	d1 1d       	adc	r29, r1
    510e:	68 83       	st	Y, r22
    5110:	8f 5f       	subi	r24, 0xFF	; 255
    5112:	95 81       	ldd	r25, Z+5	; 0x05
    5114:	89 23       	and	r24, r25
    5116:	83 83       	std	Z+3, r24	; 0x03
    5118:	16 96       	adiw	r26, 0x06	; 6
    511a:	ed 91       	ld	r30, X+
    511c:	fc 91       	ld	r31, X
    511e:	17 97       	sbiw	r26, 0x07	; 7
    5120:	30 97       	sbiw	r30, 0x00	; 0
    5122:	11 f0       	breq	.+4      	; 0x5128 <__vector_36+0x7a>
    5124:	cd 01       	movw	r24, r26
    5126:	19 95       	eicall
    5128:	ff 91       	pop	r31
    512a:	ef 91       	pop	r30
    512c:	df 91       	pop	r29
    512e:	cf 91       	pop	r28
    5130:	bf 91       	pop	r27
    5132:	af 91       	pop	r26
    5134:	9f 91       	pop	r25
    5136:	8f 91       	pop	r24
    5138:	7f 91       	pop	r23
    513a:	6f 91       	pop	r22
    513c:	5f 91       	pop	r21
    513e:	4f 91       	pop	r20
    5140:	3f 91       	pop	r19
    5142:	2f 91       	pop	r18
    5144:	0f 90       	pop	r0
    5146:	0b be       	out	0x3b, r0	; 59
    5148:	0f 90       	pop	r0
    514a:	0f be       	out	0x3f, r0	; 63
    514c:	0f 90       	pop	r0
    514e:	1f 90       	pop	r1
    5150:	18 95       	reti

00005152 <__vector_37>:
    5152:	1f 92       	push	r1
    5154:	0f 92       	push	r0
    5156:	0f b6       	in	r0, 0x3f	; 63
    5158:	0f 92       	push	r0
    515a:	11 24       	eor	r1, r1
    515c:	0b b6       	in	r0, 0x3b	; 59
    515e:	0f 92       	push	r0
    5160:	2f 93       	push	r18
    5162:	8f 93       	push	r24
    5164:	9f 93       	push	r25
    5166:	af 93       	push	r26
    5168:	bf 93       	push	r27
    516a:	ef 93       	push	r30
    516c:	ff 93       	push	r31
    516e:	e0 91 8c 17 	lds	r30, 0x178C	; 0x80178c <_ser_handle+0x2>
    5172:	f0 91 8d 17 	lds	r31, 0x178D	; 0x80178d <_ser_handle+0x3>
    5176:	30 97       	sbiw	r30, 0x00	; 0
    5178:	b9 f0       	breq	.+46     	; 0x51a8 <__vector_37+0x56>
    517a:	02 80       	ldd	r0, Z+2	; 0x02
    517c:	f3 81       	ldd	r31, Z+3	; 0x03
    517e:	e0 2d       	mov	r30, r0
    5180:	93 81       	ldd	r25, Z+3	; 0x03
    5182:	82 81       	ldd	r24, Z+2	; 0x02
    5184:	98 17       	cp	r25, r24
    5186:	b1 f0       	breq	.+44     	; 0x51b4 <__vector_37+0x62>
    5188:	92 81       	ldd	r25, Z+2	; 0x02
    518a:	85 81       	ldd	r24, Z+5	; 0x05
    518c:	28 2f       	mov	r18, r24
    518e:	26 95       	lsr	r18
    5190:	29 23       	and	r18, r25
    5192:	a0 81       	ld	r26, Z
    5194:	b1 81       	ldd	r27, Z+1	; 0x01
    5196:	a2 0f       	add	r26, r18
    5198:	b1 1d       	adc	r27, r1
    519a:	2c 91       	ld	r18, X
    519c:	9f 5f       	subi	r25, 0xFF	; 255
    519e:	89 23       	and	r24, r25
    51a0:	82 83       	std	Z+2, r24	; 0x02
    51a2:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    51a6:	0b c0       	rjmp	.+22     	; 0x51be <__vector_37+0x6c>
    51a8:	e9 ec       	ldi	r30, 0xC9	; 201
    51aa:	f0 e0       	ldi	r31, 0x00	; 0
    51ac:	80 81       	ld	r24, Z
    51ae:	8f 7d       	andi	r24, 0xDF	; 223
    51b0:	80 83       	st	Z, r24
    51b2:	05 c0       	rjmp	.+10     	; 0x51be <__vector_37+0x6c>
    51b4:	e9 ec       	ldi	r30, 0xC9	; 201
    51b6:	f0 e0       	ldi	r31, 0x00	; 0
    51b8:	80 81       	ld	r24, Z
    51ba:	8f 7d       	andi	r24, 0xDF	; 223
    51bc:	80 83       	st	Z, r24
    51be:	ff 91       	pop	r31
    51c0:	ef 91       	pop	r30
    51c2:	bf 91       	pop	r27
    51c4:	af 91       	pop	r26
    51c6:	9f 91       	pop	r25
    51c8:	8f 91       	pop	r24
    51ca:	2f 91       	pop	r18
    51cc:	0f 90       	pop	r0
    51ce:	0b be       	out	0x3b, r0	; 59
    51d0:	0f 90       	pop	r0
    51d2:	0f be       	out	0x3f, r0	; 63
    51d4:	0f 90       	pop	r0
    51d6:	1f 90       	pop	r1
    51d8:	18 95       	reti

000051da <__vector_51>:
    51da:	1f 92       	push	r1
    51dc:	0f 92       	push	r0
    51de:	0f b6       	in	r0, 0x3f	; 63
    51e0:	0f 92       	push	r0
    51e2:	11 24       	eor	r1, r1
    51e4:	0b b6       	in	r0, 0x3b	; 59
    51e6:	0f 92       	push	r0
    51e8:	2f 93       	push	r18
    51ea:	3f 93       	push	r19
    51ec:	4f 93       	push	r20
    51ee:	5f 93       	push	r21
    51f0:	6f 93       	push	r22
    51f2:	7f 93       	push	r23
    51f4:	8f 93       	push	r24
    51f6:	9f 93       	push	r25
    51f8:	af 93       	push	r26
    51fa:	bf 93       	push	r27
    51fc:	cf 93       	push	r28
    51fe:	df 93       	push	r29
    5200:	ef 93       	push	r30
    5202:	ff 93       	push	r31
    5204:	a0 91 8e 17 	lds	r26, 0x178E	; 0x80178e <_ser_handle+0x4>
    5208:	b0 91 8f 17 	lds	r27, 0x178F	; 0x80178f <_ser_handle+0x5>
    520c:	10 97       	sbiw	r26, 0x00	; 0
    520e:	11 f1       	breq	.+68     	; 0x5254 <__vector_51+0x7a>
    5210:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5214:	14 96       	adiw	r26, 0x04	; 4
    5216:	ed 91       	ld	r30, X+
    5218:	fc 91       	ld	r31, X
    521a:	15 97       	sbiw	r26, 0x05	; 5
    521c:	93 81       	ldd	r25, Z+3	; 0x03
    521e:	82 81       	ldd	r24, Z+2	; 0x02
    5220:	25 81       	ldd	r18, Z+5	; 0x05
    5222:	98 1b       	sub	r25, r24
    5224:	92 23       	and	r25, r18
    5226:	84 81       	ldd	r24, Z+4	; 0x04
    5228:	98 17       	cp	r25, r24
    522a:	61 f0       	breq	.+24     	; 0x5244 <__vector_51+0x6a>
    522c:	83 81       	ldd	r24, Z+3	; 0x03
    522e:	26 95       	lsr	r18
    5230:	28 23       	and	r18, r24
    5232:	c0 81       	ld	r28, Z
    5234:	d1 81       	ldd	r29, Z+1	; 0x01
    5236:	c2 0f       	add	r28, r18
    5238:	d1 1d       	adc	r29, r1
    523a:	68 83       	st	Y, r22
    523c:	8f 5f       	subi	r24, 0xFF	; 255
    523e:	95 81       	ldd	r25, Z+5	; 0x05
    5240:	89 23       	and	r24, r25
    5242:	83 83       	std	Z+3, r24	; 0x03
    5244:	16 96       	adiw	r26, 0x06	; 6
    5246:	ed 91       	ld	r30, X+
    5248:	fc 91       	ld	r31, X
    524a:	17 97       	sbiw	r26, 0x07	; 7
    524c:	30 97       	sbiw	r30, 0x00	; 0
    524e:	11 f0       	breq	.+4      	; 0x5254 <__vector_51+0x7a>
    5250:	cd 01       	movw	r24, r26
    5252:	19 95       	eicall
    5254:	ff 91       	pop	r31
    5256:	ef 91       	pop	r30
    5258:	df 91       	pop	r29
    525a:	cf 91       	pop	r28
    525c:	bf 91       	pop	r27
    525e:	af 91       	pop	r26
    5260:	9f 91       	pop	r25
    5262:	8f 91       	pop	r24
    5264:	7f 91       	pop	r23
    5266:	6f 91       	pop	r22
    5268:	5f 91       	pop	r21
    526a:	4f 91       	pop	r20
    526c:	3f 91       	pop	r19
    526e:	2f 91       	pop	r18
    5270:	0f 90       	pop	r0
    5272:	0b be       	out	0x3b, r0	; 59
    5274:	0f 90       	pop	r0
    5276:	0f be       	out	0x3f, r0	; 63
    5278:	0f 90       	pop	r0
    527a:	1f 90       	pop	r1
    527c:	18 95       	reti

0000527e <__vector_52>:
    527e:	1f 92       	push	r1
    5280:	0f 92       	push	r0
    5282:	0f b6       	in	r0, 0x3f	; 63
    5284:	0f 92       	push	r0
    5286:	11 24       	eor	r1, r1
    5288:	0b b6       	in	r0, 0x3b	; 59
    528a:	0f 92       	push	r0
    528c:	2f 93       	push	r18
    528e:	8f 93       	push	r24
    5290:	9f 93       	push	r25
    5292:	af 93       	push	r26
    5294:	bf 93       	push	r27
    5296:	ef 93       	push	r30
    5298:	ff 93       	push	r31
    529a:	e0 91 8e 17 	lds	r30, 0x178E	; 0x80178e <_ser_handle+0x4>
    529e:	f0 91 8f 17 	lds	r31, 0x178F	; 0x80178f <_ser_handle+0x5>
    52a2:	30 97       	sbiw	r30, 0x00	; 0
    52a4:	b9 f0       	breq	.+46     	; 0x52d4 <__vector_52+0x56>
    52a6:	02 80       	ldd	r0, Z+2	; 0x02
    52a8:	f3 81       	ldd	r31, Z+3	; 0x03
    52aa:	e0 2d       	mov	r30, r0
    52ac:	93 81       	ldd	r25, Z+3	; 0x03
    52ae:	82 81       	ldd	r24, Z+2	; 0x02
    52b0:	98 17       	cp	r25, r24
    52b2:	b1 f0       	breq	.+44     	; 0x52e0 <__vector_52+0x62>
    52b4:	92 81       	ldd	r25, Z+2	; 0x02
    52b6:	85 81       	ldd	r24, Z+5	; 0x05
    52b8:	28 2f       	mov	r18, r24
    52ba:	26 95       	lsr	r18
    52bc:	29 23       	and	r18, r25
    52be:	a0 81       	ld	r26, Z
    52c0:	b1 81       	ldd	r27, Z+1	; 0x01
    52c2:	a2 0f       	add	r26, r18
    52c4:	b1 1d       	adc	r27, r1
    52c6:	2c 91       	ld	r18, X
    52c8:	9f 5f       	subi	r25, 0xFF	; 255
    52ca:	89 23       	and	r24, r25
    52cc:	82 83       	std	Z+2, r24	; 0x02
    52ce:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    52d2:	0b c0       	rjmp	.+22     	; 0x52ea <__vector_52+0x6c>
    52d4:	e1 ed       	ldi	r30, 0xD1	; 209
    52d6:	f0 e0       	ldi	r31, 0x00	; 0
    52d8:	80 81       	ld	r24, Z
    52da:	8f 7d       	andi	r24, 0xDF	; 223
    52dc:	80 83       	st	Z, r24
    52de:	05 c0       	rjmp	.+10     	; 0x52ea <__vector_52+0x6c>
    52e0:	e1 ed       	ldi	r30, 0xD1	; 209
    52e2:	f0 e0       	ldi	r31, 0x00	; 0
    52e4:	80 81       	ld	r24, Z
    52e6:	8f 7d       	andi	r24, 0xDF	; 223
    52e8:	80 83       	st	Z, r24
    52ea:	ff 91       	pop	r31
    52ec:	ef 91       	pop	r30
    52ee:	bf 91       	pop	r27
    52f0:	af 91       	pop	r26
    52f2:	9f 91       	pop	r25
    52f4:	8f 91       	pop	r24
    52f6:	2f 91       	pop	r18
    52f8:	0f 90       	pop	r0
    52fa:	0b be       	out	0x3b, r0	; 59
    52fc:	0f 90       	pop	r0
    52fe:	0f be       	out	0x3f, r0	; 63
    5300:	0f 90       	pop	r0
    5302:	1f 90       	pop	r1
    5304:	18 95       	reti

00005306 <__vector_54>:
    5306:	1f 92       	push	r1
    5308:	0f 92       	push	r0
    530a:	0f b6       	in	r0, 0x3f	; 63
    530c:	0f 92       	push	r0
    530e:	11 24       	eor	r1, r1
    5310:	0b b6       	in	r0, 0x3b	; 59
    5312:	0f 92       	push	r0
    5314:	2f 93       	push	r18
    5316:	3f 93       	push	r19
    5318:	4f 93       	push	r20
    531a:	5f 93       	push	r21
    531c:	6f 93       	push	r22
    531e:	7f 93       	push	r23
    5320:	8f 93       	push	r24
    5322:	9f 93       	push	r25
    5324:	af 93       	push	r26
    5326:	bf 93       	push	r27
    5328:	cf 93       	push	r28
    532a:	df 93       	push	r29
    532c:	ef 93       	push	r30
    532e:	ff 93       	push	r31
    5330:	a0 91 90 17 	lds	r26, 0x1790	; 0x801790 <_ser_handle+0x6>
    5334:	b0 91 91 17 	lds	r27, 0x1791	; 0x801791 <_ser_handle+0x7>
    5338:	10 97       	sbiw	r26, 0x00	; 0
    533a:	11 f1       	breq	.+68     	; 0x5380 <__vector_54+0x7a>
    533c:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5340:	14 96       	adiw	r26, 0x04	; 4
    5342:	ed 91       	ld	r30, X+
    5344:	fc 91       	ld	r31, X
    5346:	15 97       	sbiw	r26, 0x05	; 5
    5348:	93 81       	ldd	r25, Z+3	; 0x03
    534a:	82 81       	ldd	r24, Z+2	; 0x02
    534c:	25 81       	ldd	r18, Z+5	; 0x05
    534e:	98 1b       	sub	r25, r24
    5350:	92 23       	and	r25, r18
    5352:	84 81       	ldd	r24, Z+4	; 0x04
    5354:	98 17       	cp	r25, r24
    5356:	61 f0       	breq	.+24     	; 0x5370 <__vector_54+0x6a>
    5358:	83 81       	ldd	r24, Z+3	; 0x03
    535a:	26 95       	lsr	r18
    535c:	28 23       	and	r18, r24
    535e:	c0 81       	ld	r28, Z
    5360:	d1 81       	ldd	r29, Z+1	; 0x01
    5362:	c2 0f       	add	r28, r18
    5364:	d1 1d       	adc	r29, r1
    5366:	68 83       	st	Y, r22
    5368:	8f 5f       	subi	r24, 0xFF	; 255
    536a:	95 81       	ldd	r25, Z+5	; 0x05
    536c:	89 23       	and	r24, r25
    536e:	83 83       	std	Z+3, r24	; 0x03
    5370:	16 96       	adiw	r26, 0x06	; 6
    5372:	ed 91       	ld	r30, X+
    5374:	fc 91       	ld	r31, X
    5376:	17 97       	sbiw	r26, 0x07	; 7
    5378:	30 97       	sbiw	r30, 0x00	; 0
    537a:	11 f0       	breq	.+4      	; 0x5380 <__vector_54+0x7a>
    537c:	cd 01       	movw	r24, r26
    537e:	19 95       	eicall
    5380:	ff 91       	pop	r31
    5382:	ef 91       	pop	r30
    5384:	df 91       	pop	r29
    5386:	cf 91       	pop	r28
    5388:	bf 91       	pop	r27
    538a:	af 91       	pop	r26
    538c:	9f 91       	pop	r25
    538e:	8f 91       	pop	r24
    5390:	7f 91       	pop	r23
    5392:	6f 91       	pop	r22
    5394:	5f 91       	pop	r21
    5396:	4f 91       	pop	r20
    5398:	3f 91       	pop	r19
    539a:	2f 91       	pop	r18
    539c:	0f 90       	pop	r0
    539e:	0b be       	out	0x3b, r0	; 59
    53a0:	0f 90       	pop	r0
    53a2:	0f be       	out	0x3f, r0	; 63
    53a4:	0f 90       	pop	r0
    53a6:	1f 90       	pop	r1
    53a8:	18 95       	reti

000053aa <__vector_55>:
    53aa:	1f 92       	push	r1
    53ac:	0f 92       	push	r0
    53ae:	0f b6       	in	r0, 0x3f	; 63
    53b0:	0f 92       	push	r0
    53b2:	11 24       	eor	r1, r1
    53b4:	0b b6       	in	r0, 0x3b	; 59
    53b6:	0f 92       	push	r0
    53b8:	2f 93       	push	r18
    53ba:	8f 93       	push	r24
    53bc:	9f 93       	push	r25
    53be:	af 93       	push	r26
    53c0:	bf 93       	push	r27
    53c2:	ef 93       	push	r30
    53c4:	ff 93       	push	r31
    53c6:	e0 91 90 17 	lds	r30, 0x1790	; 0x801790 <_ser_handle+0x6>
    53ca:	f0 91 91 17 	lds	r31, 0x1791	; 0x801791 <_ser_handle+0x7>
    53ce:	30 97       	sbiw	r30, 0x00	; 0
    53d0:	b9 f0       	breq	.+46     	; 0x5400 <__vector_55+0x56>
    53d2:	02 80       	ldd	r0, Z+2	; 0x02
    53d4:	f3 81       	ldd	r31, Z+3	; 0x03
    53d6:	e0 2d       	mov	r30, r0
    53d8:	93 81       	ldd	r25, Z+3	; 0x03
    53da:	82 81       	ldd	r24, Z+2	; 0x02
    53dc:	98 17       	cp	r25, r24
    53de:	b1 f0       	breq	.+44     	; 0x540c <__vector_55+0x62>
    53e0:	92 81       	ldd	r25, Z+2	; 0x02
    53e2:	85 81       	ldd	r24, Z+5	; 0x05
    53e4:	28 2f       	mov	r18, r24
    53e6:	26 95       	lsr	r18
    53e8:	29 23       	and	r18, r25
    53ea:	a0 81       	ld	r26, Z
    53ec:	b1 81       	ldd	r27, Z+1	; 0x01
    53ee:	a2 0f       	add	r26, r18
    53f0:	b1 1d       	adc	r27, r1
    53f2:	2c 91       	ld	r18, X
    53f4:	9f 5f       	subi	r25, 0xFF	; 255
    53f6:	89 23       	and	r24, r25
    53f8:	82 83       	std	Z+2, r24	; 0x02
    53fa:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    53fe:	0b c0       	rjmp	.+22     	; 0x5416 <__vector_55+0x6c>
    5400:	e1 e3       	ldi	r30, 0x31	; 49
    5402:	f1 e0       	ldi	r31, 0x01	; 1
    5404:	80 81       	ld	r24, Z
    5406:	8f 7d       	andi	r24, 0xDF	; 223
    5408:	80 83       	st	Z, r24
    540a:	05 c0       	rjmp	.+10     	; 0x5416 <__vector_55+0x6c>
    540c:	e1 e3       	ldi	r30, 0x31	; 49
    540e:	f1 e0       	ldi	r31, 0x01	; 1
    5410:	80 81       	ld	r24, Z
    5412:	8f 7d       	andi	r24, 0xDF	; 223
    5414:	80 83       	st	Z, r24
    5416:	ff 91       	pop	r31
    5418:	ef 91       	pop	r30
    541a:	bf 91       	pop	r27
    541c:	af 91       	pop	r26
    541e:	9f 91       	pop	r25
    5420:	8f 91       	pop	r24
    5422:	2f 91       	pop	r18
    5424:	0f 90       	pop	r0
    5426:	0b be       	out	0x3b, r0	; 59
    5428:	0f 90       	pop	r0
    542a:	0f be       	out	0x3f, r0	; 63
    542c:	0f 90       	pop	r0
    542e:	1f 90       	pop	r1
    5430:	18 95       	reti

00005432 <usart_getchar>:
    5432:	cf 93       	push	r28
    5434:	df 93       	push	r29
    5436:	1f 92       	push	r1
    5438:	cd b7       	in	r28, 0x3d	; 61
    543a:	de b7       	in	r29, 0x3e	; 62
    543c:	be 01       	movw	r22, r28
    543e:	6f 5f       	subi	r22, 0xFF	; 255
    5440:	7f 4f       	sbci	r23, 0xFF	; 255
    5442:	80 91 92 17 	lds	r24, 0x1792	; 0x801792 <_com_serial_instance>
    5446:	90 91 93 17 	lds	r25, 0x1793	; 0x801793 <_com_serial_instance+0x1>
    544a:	7b dd       	rcall	.-1290   	; 0x4f42 <serial_getByte>
    544c:	81 11       	cpse	r24, r1
    544e:	f6 cf       	rjmp	.-20     	; 0x543c <usart_getchar+0xa>
    5450:	89 81       	ldd	r24, Y+1	; 0x01
    5452:	90 e0       	ldi	r25, 0x00	; 0
    5454:	0f 90       	pop	r0
    5456:	df 91       	pop	r29
    5458:	cf 91       	pop	r28
    545a:	08 95       	ret

0000545c <usart_putchar>:
    545c:	68 2f       	mov	r22, r24
    545e:	80 91 92 17 	lds	r24, 0x1792	; 0x801792 <_com_serial_instance>
    5462:	90 91 93 17 	lds	r25, 0x1793	; 0x801793 <_com_serial_instance+0x1>
    5466:	ed dc       	rcall	.-1574   	; 0x4e42 <serial_sendByte>
    5468:	80 e0       	ldi	r24, 0x00	; 0
    546a:	90 e0       	ldi	r25, 0x00	; 0
    546c:	08 95       	ret

0000546e <stdio_initialise>:
    546e:	8f 92       	push	r8
    5470:	9f 92       	push	r9
    5472:	af 92       	push	r10
    5474:	cf 92       	push	r12
    5476:	ef 92       	push	r14
    5478:	0f 93       	push	r16
    547a:	81 2c       	mov	r8, r1
    547c:	91 2c       	mov	r9, r1
    547e:	68 94       	set
    5480:	aa 24       	eor	r10, r10
    5482:	a7 f8       	bld	r10, 7
    5484:	68 94       	set
    5486:	cc 24       	eor	r12, r12
    5488:	c7 f8       	bld	r12, 7
    548a:	e1 2c       	mov	r14, r1
    548c:	00 e0       	ldi	r16, 0x00	; 0
    548e:	23 e0       	ldi	r18, 0x03	; 3
    5490:	40 e0       	ldi	r20, 0x00	; 0
    5492:	51 ee       	ldi	r21, 0xE1	; 225
    5494:	60 e0       	ldi	r22, 0x00	; 0
    5496:	70 e0       	ldi	r23, 0x00	; 0
    5498:	32 dc       	rcall	.-1948   	; 0x4cfe <serial_create>
    549a:	90 93 93 17 	sts	0x1793, r25	; 0x801793 <_com_serial_instance+0x1>
    549e:	80 93 92 17 	sts	0x1792, r24	; 0x801792 <_com_serial_instance>
    54a2:	ef ec       	ldi	r30, 0xCF	; 207
    54a4:	f7 e1       	ldi	r31, 0x17	; 23
    54a6:	83 e1       	ldi	r24, 0x13	; 19
    54a8:	92 e0       	ldi	r25, 0x02	; 2
    54aa:	91 83       	std	Z+1, r25	; 0x01
    54ac:	80 83       	st	Z, r24
    54ae:	93 83       	std	Z+3, r25	; 0x03
    54b0:	82 83       	std	Z+2, r24	; 0x02
    54b2:	0f 91       	pop	r16
    54b4:	ef 90       	pop	r14
    54b6:	cf 90       	pop	r12
    54b8:	af 90       	pop	r10
    54ba:	9f 90       	pop	r9
    54bc:	8f 90       	pop	r8
    54be:	08 95       	ret

000054c0 <_turn_off>:
    54c0:	90 e0       	ldi	r25, 0x00	; 0
    54c2:	fc 01       	movw	r30, r24
    54c4:	ee 0f       	add	r30, r30
    54c6:	ff 1f       	adc	r31, r31
    54c8:	e8 0f       	add	r30, r24
    54ca:	f9 1f       	adc	r31, r25
    54cc:	ee 0f       	add	r30, r30
    54ce:	ff 1f       	adc	r31, r31
    54d0:	ec 56       	subi	r30, 0x6C	; 108
    54d2:	f8 4e       	sbci	r31, 0xE8	; 232
    54d4:	23 81       	ldd	r18, Z+3	; 0x03
    54d6:	21 11       	cpse	r18, r1
    54d8:	1f c0       	rjmp	.+62     	; 0x5518 <_turn_off+0x58>
    54da:	9c 01       	movw	r18, r24
    54dc:	22 0f       	add	r18, r18
    54de:	33 1f       	adc	r19, r19
    54e0:	f9 01       	movw	r30, r18
    54e2:	e8 0f       	add	r30, r24
    54e4:	f9 1f       	adc	r31, r25
    54e6:	ee 0f       	add	r30, r30
    54e8:	ff 1f       	adc	r31, r31
    54ea:	ec 56       	subi	r30, 0x6C	; 108
    54ec:	f8 4e       	sbci	r31, 0xE8	; 232
    54ee:	a0 81       	ld	r26, Z
    54f0:	b1 81       	ldd	r27, Z+1	; 0x01
    54f2:	4c 91       	ld	r20, X
    54f4:	f9 01       	movw	r30, r18
    54f6:	e8 0f       	add	r30, r24
    54f8:	f9 1f       	adc	r31, r25
    54fa:	ee 0f       	add	r30, r30
    54fc:	ff 1f       	adc	r31, r31
    54fe:	ec 56       	subi	r30, 0x6C	; 108
    5500:	f8 4e       	sbci	r31, 0xE8	; 232
    5502:	81 e0       	ldi	r24, 0x01	; 1
    5504:	90 e0       	ldi	r25, 0x00	; 0
    5506:	02 80       	ldd	r0, Z+2	; 0x02
    5508:	02 c0       	rjmp	.+4      	; 0x550e <_turn_off+0x4e>
    550a:	88 0f       	add	r24, r24
    550c:	99 1f       	adc	r25, r25
    550e:	0a 94       	dec	r0
    5510:	e2 f7       	brpl	.-8      	; 0x550a <_turn_off+0x4a>
    5512:	84 2b       	or	r24, r20
    5514:	8c 93       	st	X, r24
    5516:	08 95       	ret
    5518:	fc 01       	movw	r30, r24
    551a:	ee 0f       	add	r30, r30
    551c:	ff 1f       	adc	r31, r31
    551e:	df 01       	movw	r26, r30
    5520:	a8 0f       	add	r26, r24
    5522:	b9 1f       	adc	r27, r25
    5524:	aa 0f       	add	r26, r26
    5526:	bb 1f       	adc	r27, r27
    5528:	ac 56       	subi	r26, 0x6C	; 108
    552a:	b8 4e       	sbci	r27, 0xE8	; 232
    552c:	0d 90       	ld	r0, X+
    552e:	bc 91       	ld	r27, X
    5530:	a0 2d       	mov	r26, r0
    5532:	2c 91       	ld	r18, X
    5534:	e8 0f       	add	r30, r24
    5536:	f9 1f       	adc	r31, r25
    5538:	ee 0f       	add	r30, r30
    553a:	ff 1f       	adc	r31, r31
    553c:	ec 56       	subi	r30, 0x6C	; 108
    553e:	f8 4e       	sbci	r31, 0xE8	; 232
    5540:	81 e0       	ldi	r24, 0x01	; 1
    5542:	90 e0       	ldi	r25, 0x00	; 0
    5544:	02 80       	ldd	r0, Z+2	; 0x02
    5546:	02 c0       	rjmp	.+4      	; 0x554c <_turn_off+0x8c>
    5548:	88 0f       	add	r24, r24
    554a:	99 1f       	adc	r25, r25
    554c:	0a 94       	dec	r0
    554e:	e2 f7       	brpl	.-8      	; 0x5548 <_turn_off+0x88>
    5550:	80 95       	com	r24
    5552:	82 23       	and	r24, r18
    5554:	8c 93       	st	X, r24
    5556:	08 95       	ret

00005558 <_turn_on>:
    5558:	90 e0       	ldi	r25, 0x00	; 0
    555a:	fc 01       	movw	r30, r24
    555c:	ee 0f       	add	r30, r30
    555e:	ff 1f       	adc	r31, r31
    5560:	e8 0f       	add	r30, r24
    5562:	f9 1f       	adc	r31, r25
    5564:	ee 0f       	add	r30, r30
    5566:	ff 1f       	adc	r31, r31
    5568:	ec 56       	subi	r30, 0x6C	; 108
    556a:	f8 4e       	sbci	r31, 0xE8	; 232
    556c:	23 81       	ldd	r18, Z+3	; 0x03
    556e:	21 11       	cpse	r18, r1
    5570:	20 c0       	rjmp	.+64     	; 0x55b2 <_turn_on+0x5a>
    5572:	9c 01       	movw	r18, r24
    5574:	22 0f       	add	r18, r18
    5576:	33 1f       	adc	r19, r19
    5578:	f9 01       	movw	r30, r18
    557a:	e8 0f       	add	r30, r24
    557c:	f9 1f       	adc	r31, r25
    557e:	ee 0f       	add	r30, r30
    5580:	ff 1f       	adc	r31, r31
    5582:	ec 56       	subi	r30, 0x6C	; 108
    5584:	f8 4e       	sbci	r31, 0xE8	; 232
    5586:	a0 81       	ld	r26, Z
    5588:	b1 81       	ldd	r27, Z+1	; 0x01
    558a:	4c 91       	ld	r20, X
    558c:	f9 01       	movw	r30, r18
    558e:	e8 0f       	add	r30, r24
    5590:	f9 1f       	adc	r31, r25
    5592:	ee 0f       	add	r30, r30
    5594:	ff 1f       	adc	r31, r31
    5596:	ec 56       	subi	r30, 0x6C	; 108
    5598:	f8 4e       	sbci	r31, 0xE8	; 232
    559a:	81 e0       	ldi	r24, 0x01	; 1
    559c:	90 e0       	ldi	r25, 0x00	; 0
    559e:	02 80       	ldd	r0, Z+2	; 0x02
    55a0:	02 c0       	rjmp	.+4      	; 0x55a6 <_turn_on+0x4e>
    55a2:	88 0f       	add	r24, r24
    55a4:	99 1f       	adc	r25, r25
    55a6:	0a 94       	dec	r0
    55a8:	e2 f7       	brpl	.-8      	; 0x55a2 <_turn_on+0x4a>
    55aa:	80 95       	com	r24
    55ac:	84 23       	and	r24, r20
    55ae:	8c 93       	st	X, r24
    55b0:	08 95       	ret
    55b2:	fc 01       	movw	r30, r24
    55b4:	ee 0f       	add	r30, r30
    55b6:	ff 1f       	adc	r31, r31
    55b8:	df 01       	movw	r26, r30
    55ba:	a8 0f       	add	r26, r24
    55bc:	b9 1f       	adc	r27, r25
    55be:	aa 0f       	add	r26, r26
    55c0:	bb 1f       	adc	r27, r27
    55c2:	ac 56       	subi	r26, 0x6C	; 108
    55c4:	b8 4e       	sbci	r27, 0xE8	; 232
    55c6:	0d 90       	ld	r0, X+
    55c8:	bc 91       	ld	r27, X
    55ca:	a0 2d       	mov	r26, r0
    55cc:	2c 91       	ld	r18, X
    55ce:	e8 0f       	add	r30, r24
    55d0:	f9 1f       	adc	r31, r25
    55d2:	ee 0f       	add	r30, r30
    55d4:	ff 1f       	adc	r31, r31
    55d6:	ec 56       	subi	r30, 0x6C	; 108
    55d8:	f8 4e       	sbci	r31, 0xE8	; 232
    55da:	81 e0       	ldi	r24, 0x01	; 1
    55dc:	90 e0       	ldi	r25, 0x00	; 0
    55de:	02 80       	ldd	r0, Z+2	; 0x02
    55e0:	02 c0       	rjmp	.+4      	; 0x55e6 <_turn_on+0x8e>
    55e2:	88 0f       	add	r24, r24
    55e4:	99 1f       	adc	r25, r25
    55e6:	0a 94       	dec	r0
    55e8:	e2 f7       	brpl	.-8      	; 0x55e2 <_turn_on+0x8a>
    55ea:	82 2b       	or	r24, r18
    55ec:	8c 93       	st	X, r24
    55ee:	08 95       	ret

000055f0 <_hal_led_task>:
    55f0:	cc 24       	eor	r12, r12
    55f2:	c3 94       	inc	r12
    55f4:	d1 2c       	mov	r13, r1
    55f6:	68 94       	set
    55f8:	bb 24       	eor	r11, r11
    55fa:	b2 f8       	bld	r11, 2
    55fc:	c4 e9       	ldi	r28, 0x94	; 148
    55fe:	d7 e1       	ldi	r29, 0x17	; 23
    5600:	10 e0       	ldi	r17, 0x00	; 0
    5602:	8c 81       	ldd	r24, Y+4	; 0x04
    5604:	81 30       	cpi	r24, 0x01	; 1
    5606:	81 f0       	breq	.+32     	; 0x5628 <_hal_led_task+0x38>
    5608:	18 f1       	brcs	.+70     	; 0x5650 <_hal_led_task+0x60>
    560a:	82 30       	cpi	r24, 0x02	; 2
    560c:	61 f5       	brne	.+88     	; 0x5666 <_hal_led_task+0x76>
    560e:	e8 81       	ld	r30, Y
    5610:	f9 81       	ldd	r31, Y+1	; 0x01
    5612:	20 81       	ld	r18, Z
    5614:	c6 01       	movw	r24, r12
    5616:	0a 80       	ldd	r0, Y+2	; 0x02
    5618:	02 c0       	rjmp	.+4      	; 0x561e <_hal_led_task+0x2e>
    561a:	88 0f       	add	r24, r24
    561c:	99 1f       	adc	r25, r25
    561e:	0a 94       	dec	r0
    5620:	e2 f7       	brpl	.-8      	; 0x561a <_hal_led_task+0x2a>
    5622:	82 27       	eor	r24, r18
    5624:	80 83       	st	Z, r24
    5626:	1f c0       	rjmp	.+62     	; 0x5666 <_hal_led_task+0x76>
    5628:	8d 81       	ldd	r24, Y+5	; 0x05
    562a:	8f 5f       	subi	r24, 0xFF	; 255
    562c:	8a 30       	cpi	r24, 0x0A	; 10
    562e:	10 f4       	brcc	.+4      	; 0x5634 <_hal_led_task+0x44>
    5630:	8d 83       	std	Y+5, r24	; 0x05
    5632:	19 c0       	rjmp	.+50     	; 0x5666 <_hal_led_task+0x76>
    5634:	1d 82       	std	Y+5, r1	; 0x05
    5636:	e8 81       	ld	r30, Y
    5638:	f9 81       	ldd	r31, Y+1	; 0x01
    563a:	20 81       	ld	r18, Z
    563c:	c6 01       	movw	r24, r12
    563e:	0a 80       	ldd	r0, Y+2	; 0x02
    5640:	02 c0       	rjmp	.+4      	; 0x5646 <_hal_led_task+0x56>
    5642:	88 0f       	add	r24, r24
    5644:	99 1f       	adc	r25, r25
    5646:	0a 94       	dec	r0
    5648:	e2 f7       	brpl	.-8      	; 0x5642 <_hal_led_task+0x52>
    564a:	82 27       	eor	r24, r18
    564c:	80 83       	st	Z, r24
    564e:	0b c0       	rjmp	.+22     	; 0x5666 <_hal_led_task+0x76>
    5650:	0d 81       	ldd	r16, Y+5	; 0x05
    5652:	00 23       	and	r16, r16
    5654:	29 f0       	breq	.+10     	; 0x5660 <_hal_led_task+0x70>
    5656:	81 2f       	mov	r24, r17
    5658:	7f df       	rcall	.-258    	; 0x5558 <_turn_on>
    565a:	01 50       	subi	r16, 0x01	; 1
    565c:	0d 83       	std	Y+5, r16	; 0x05
    565e:	03 c0       	rjmp	.+6      	; 0x5666 <_hal_led_task+0x76>
    5660:	bc 82       	std	Y+4, r11	; 0x04
    5662:	81 2f       	mov	r24, r17
    5664:	2d df       	rcall	.-422    	; 0x54c0 <_turn_off>
    5666:	1f 5f       	subi	r17, 0xFF	; 255
    5668:	26 96       	adiw	r28, 0x06	; 6
    566a:	14 30       	cpi	r17, 0x04	; 4
    566c:	51 f6       	brne	.-108    	; 0x5602 <_hal_led_task+0x12>
    566e:	65 e0       	ldi	r22, 0x05	; 5
    5670:	70 e0       	ldi	r23, 0x00	; 0
    5672:	80 e0       	ldi	r24, 0x00	; 0
    5674:	90 e0       	ldi	r25, 0x00	; 0
    5676:	0e 94 62 13 	call	0x26c4	; 0x26c4 <vTaskDelay>
    567a:	c0 cf       	rjmp	.-128    	; 0x55fc <_hal_led_task+0xc>

0000567c <status_leds_initialise>:
    567c:	ef 92       	push	r14
    567e:	ff 92       	push	r15
    5680:	0f 93       	push	r16
    5682:	1f 93       	push	r17
    5684:	cf 93       	push	r28
    5686:	df 93       	push	r29
    5688:	08 2f       	mov	r16, r24
    568a:	80 e4       	ldi	r24, 0x40	; 64
    568c:	87 b9       	out	0x07, r24	; 7
    568e:	c4 e9       	ldi	r28, 0x94	; 148
    5690:	d7 e1       	ldi	r29, 0x17	; 23
    5692:	0f 2e       	mov	r0, r31
    5694:	f8 e2       	ldi	r31, 0x28	; 40
    5696:	ef 2e       	mov	r14, r31
    5698:	f1 2c       	mov	r15, r1
    569a:	f0 2d       	mov	r31, r0
    569c:	f9 82       	std	Y+1, r15	; 0x01
    569e:	e8 82       	st	Y, r14
    56a0:	86 e0       	ldi	r24, 0x06	; 6
    56a2:	8a 83       	std	Y+2, r24	; 0x02
    56a4:	1b 82       	std	Y+3, r1	; 0x03
    56a6:	14 e0       	ldi	r17, 0x04	; 4
    56a8:	1c 83       	std	Y+4, r17	; 0x04
    56aa:	80 e0       	ldi	r24, 0x00	; 0
    56ac:	09 df       	rcall	.-494    	; 0x54c0 <_turn_off>
    56ae:	80 e8       	ldi	r24, 0x80	; 128
    56b0:	87 b9       	out	0x07, r24	; 7
    56b2:	ff 82       	std	Y+7, r15	; 0x07
    56b4:	ee 82       	std	Y+6, r14	; 0x06
    56b6:	87 e0       	ldi	r24, 0x07	; 7
    56b8:	88 87       	std	Y+8, r24	; 0x08
    56ba:	19 86       	std	Y+9, r1	; 0x09
    56bc:	1a 87       	std	Y+10, r17	; 0x0a
    56be:	81 e0       	ldi	r24, 0x01	; 1
    56c0:	ff de       	rcall	.-514    	; 0x54c0 <_turn_off>
    56c2:	80 e2       	ldi	r24, 0x20	; 32
    56c4:	83 bb       	out	0x13, r24	; 19
    56c6:	84 e3       	ldi	r24, 0x34	; 52
    56c8:	90 e0       	ldi	r25, 0x00	; 0
    56ca:	9d 87       	std	Y+13, r25	; 0x0d
    56cc:	8c 87       	std	Y+12, r24	; 0x0c
    56ce:	85 e0       	ldi	r24, 0x05	; 5
    56d0:	8e 87       	std	Y+14, r24	; 0x0e
    56d2:	1f 86       	std	Y+15, r1	; 0x0f
    56d4:	18 8b       	std	Y+16, r17	; 0x10
    56d6:	82 e0       	ldi	r24, 0x02	; 2
    56d8:	f3 de       	rcall	.-538    	; 0x54c0 <_turn_off>
    56da:	80 e1       	ldi	r24, 0x10	; 16
    56dc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    56e0:	82 e0       	ldi	r24, 0x02	; 2
    56e2:	91 e0       	ldi	r25, 0x01	; 1
    56e4:	9b 8b       	std	Y+19, r25	; 0x13
    56e6:	8a 8b       	std	Y+18, r24	; 0x12
    56e8:	1c 8b       	std	Y+20, r17	; 0x14
    56ea:	1d 8a       	std	Y+21, r1	; 0x15
    56ec:	1e 8b       	std	Y+22, r17	; 0x16
    56ee:	83 e0       	ldi	r24, 0x03	; 3
    56f0:	e7 de       	rcall	.-562    	; 0x54c0 <_turn_off>
    56f2:	e1 2c       	mov	r14, r1
    56f4:	f1 2c       	mov	r15, r1
    56f6:	20 e0       	ldi	r18, 0x00	; 0
    56f8:	30 e0       	ldi	r19, 0x00	; 0
    56fa:	40 ec       	ldi	r20, 0xC0	; 192
    56fc:	50 e0       	ldi	r21, 0x00	; 0
    56fe:	69 e5       	ldi	r22, 0x59	; 89
    5700:	78 e0       	ldi	r23, 0x08	; 8
    5702:	88 ef       	ldi	r24, 0xF8	; 248
    5704:	9a e2       	ldi	r25, 0x2A	; 42
    5706:	0e 94 5d 10 	call	0x20ba	; 0x20ba <xTaskCreate>
    570a:	df 91       	pop	r29
    570c:	cf 91       	pop	r28
    570e:	1f 91       	pop	r17
    5710:	0f 91       	pop	r16
    5712:	ff 90       	pop	r15
    5714:	ef 90       	pop	r14
    5716:	08 95       	ret

00005718 <status_leds_slowBlink>:
    5718:	cf 93       	push	r28
    571a:	df 93       	push	r29
    571c:	90 e0       	ldi	r25, 0x00	; 0
    571e:	fc 01       	movw	r30, r24
    5720:	ee 0f       	add	r30, r30
    5722:	ff 1f       	adc	r31, r31
    5724:	df 01       	movw	r26, r30
    5726:	a8 0f       	add	r26, r24
    5728:	b9 1f       	adc	r27, r25
    572a:	aa 0f       	add	r26, r26
    572c:	bb 1f       	adc	r27, r27
    572e:	ac 56       	subi	r26, 0x6C	; 108
    5730:	b8 4e       	sbci	r27, 0xE8	; 232
    5732:	cd 91       	ld	r28, X+
    5734:	dc 91       	ld	r29, X
    5736:	11 97       	sbiw	r26, 0x01	; 1
    5738:	48 81       	ld	r20, Y
    573a:	21 e0       	ldi	r18, 0x01	; 1
    573c:	30 e0       	ldi	r19, 0x00	; 0
    573e:	12 96       	adiw	r26, 0x02	; 2
    5740:	0c 90       	ld	r0, X
    5742:	12 97       	sbiw	r26, 0x02	; 2
    5744:	02 c0       	rjmp	.+4      	; 0x574a <status_leds_slowBlink+0x32>
    5746:	22 0f       	add	r18, r18
    5748:	33 1f       	adc	r19, r19
    574a:	0a 94       	dec	r0
    574c:	e2 f7       	brpl	.-8      	; 0x5746 <status_leds_slowBlink+0x2e>
    574e:	24 27       	eor	r18, r20
    5750:	28 83       	st	Y, r18
    5752:	fd 01       	movw	r30, r26
    5754:	81 e0       	ldi	r24, 0x01	; 1
    5756:	84 83       	std	Z+4, r24	; 0x04
    5758:	df 91       	pop	r29
    575a:	cf 91       	pop	r28
    575c:	08 95       	ret

0000575e <status_leds_fastBlink>:
    575e:	cf 93       	push	r28
    5760:	df 93       	push	r29
    5762:	90 e0       	ldi	r25, 0x00	; 0
    5764:	fc 01       	movw	r30, r24
    5766:	ee 0f       	add	r30, r30
    5768:	ff 1f       	adc	r31, r31
    576a:	df 01       	movw	r26, r30
    576c:	a8 0f       	add	r26, r24
    576e:	b9 1f       	adc	r27, r25
    5770:	aa 0f       	add	r26, r26
    5772:	bb 1f       	adc	r27, r27
    5774:	ac 56       	subi	r26, 0x6C	; 108
    5776:	b8 4e       	sbci	r27, 0xE8	; 232
    5778:	cd 91       	ld	r28, X+
    577a:	dc 91       	ld	r29, X
    577c:	11 97       	sbiw	r26, 0x01	; 1
    577e:	48 81       	ld	r20, Y
    5780:	21 e0       	ldi	r18, 0x01	; 1
    5782:	30 e0       	ldi	r19, 0x00	; 0
    5784:	12 96       	adiw	r26, 0x02	; 2
    5786:	0c 90       	ld	r0, X
    5788:	12 97       	sbiw	r26, 0x02	; 2
    578a:	02 c0       	rjmp	.+4      	; 0x5790 <status_leds_fastBlink+0x32>
    578c:	22 0f       	add	r18, r18
    578e:	33 1f       	adc	r19, r19
    5790:	0a 94       	dec	r0
    5792:	e2 f7       	brpl	.-8      	; 0x578c <status_leds_fastBlink+0x2e>
    5794:	24 27       	eor	r18, r20
    5796:	28 83       	st	Y, r18
    5798:	fd 01       	movw	r30, r26
    579a:	82 e0       	ldi	r24, 0x02	; 2
    579c:	84 83       	std	Z+4, r24	; 0x04
    579e:	df 91       	pop	r29
    57a0:	cf 91       	pop	r28
    57a2:	08 95       	ret

000057a4 <status_leds_ledOn>:
    57a4:	28 2f       	mov	r18, r24
    57a6:	30 e0       	ldi	r19, 0x00	; 0
    57a8:	f9 01       	movw	r30, r18
    57aa:	ee 0f       	add	r30, r30
    57ac:	ff 1f       	adc	r31, r31
    57ae:	e2 0f       	add	r30, r18
    57b0:	f3 1f       	adc	r31, r19
    57b2:	ee 0f       	add	r30, r30
    57b4:	ff 1f       	adc	r31, r31
    57b6:	ec 56       	subi	r30, 0x6C	; 108
    57b8:	f8 4e       	sbci	r31, 0xE8	; 232
    57ba:	93 e0       	ldi	r25, 0x03	; 3
    57bc:	94 83       	std	Z+4, r25	; 0x04
    57be:	cc ce       	rjmp	.-616    	; 0x5558 <_turn_on>
    57c0:	08 95       	ret

000057c2 <status_leds_ledOff>:
    57c2:	28 2f       	mov	r18, r24
    57c4:	30 e0       	ldi	r19, 0x00	; 0
    57c6:	f9 01       	movw	r30, r18
    57c8:	ee 0f       	add	r30, r30
    57ca:	ff 1f       	adc	r31, r31
    57cc:	e2 0f       	add	r30, r18
    57ce:	f3 1f       	adc	r31, r19
    57d0:	ee 0f       	add	r30, r30
    57d2:	ff 1f       	adc	r31, r31
    57d4:	ec 56       	subi	r30, 0x6C	; 108
    57d6:	f8 4e       	sbci	r31, 0xE8	; 232
    57d8:	94 e0       	ldi	r25, 0x04	; 4
    57da:	94 83       	std	Z+4, r25	; 0x04
    57dc:	71 ce       	rjmp	.-798    	; 0x54c0 <_turn_off>
    57de:	08 95       	ret

000057e0 <status_leds_longPuls>:
    57e0:	90 e0       	ldi	r25, 0x00	; 0
    57e2:	fc 01       	movw	r30, r24
    57e4:	ee 0f       	add	r30, r30
    57e6:	ff 1f       	adc	r31, r31
    57e8:	df 01       	movw	r26, r30
    57ea:	a8 0f       	add	r26, r24
    57ec:	b9 1f       	adc	r27, r25
    57ee:	aa 0f       	add	r26, r26
    57f0:	bb 1f       	adc	r27, r27
    57f2:	ac 56       	subi	r26, 0x6C	; 108
    57f4:	b8 4e       	sbci	r27, 0xE8	; 232
    57f6:	24 e0       	ldi	r18, 0x04	; 4
    57f8:	15 96       	adiw	r26, 0x05	; 5
    57fa:	2c 93       	st	X, r18
    57fc:	15 97       	sbiw	r26, 0x05	; 5
    57fe:	fd 01       	movw	r30, r26
    5800:	14 82       	std	Z+4, r1	; 0x04
    5802:	08 95       	ret

00005804 <status_leds_shortPuls>:
    5804:	90 e0       	ldi	r25, 0x00	; 0
    5806:	fc 01       	movw	r30, r24
    5808:	ee 0f       	add	r30, r30
    580a:	ff 1f       	adc	r31, r31
    580c:	df 01       	movw	r26, r30
    580e:	a8 0f       	add	r26, r24
    5810:	b9 1f       	adc	r27, r25
    5812:	aa 0f       	add	r26, r26
    5814:	bb 1f       	adc	r27, r27
    5816:	ac 56       	subi	r26, 0x6C	; 108
    5818:	b8 4e       	sbci	r27, 0xE8	; 232
    581a:	21 e0       	ldi	r18, 0x01	; 1
    581c:	15 96       	adiw	r26, 0x05	; 5
    581e:	2c 93       	st	X, r18
    5820:	15 97       	sbiw	r26, 0x05	; 5
    5822:	fd 01       	movw	r30, r26
    5824:	14 82       	std	Z+4, r1	; 0x04
    5826:	08 95       	ret

00005828 <_initTwiInterface>:
    5828:	80 91 ba 17 	lds	r24, 0x17BA	; 0x8017ba <_twiIsInitiated>
    582c:	81 11       	cpse	r24, r1
    582e:	0c c0       	rjmp	.+24     	; 0x5848 <_initTwiInterface+0x20>
    5830:	8c e0       	ldi	r24, 0x0C	; 12
    5832:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5836:	8f ef       	ldi	r24, 0xFF	; 255
    5838:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    583c:	84 e0       	ldi	r24, 0x04	; 4
    583e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5842:	81 e0       	ldi	r24, 0x01	; 1
    5844:	80 93 ba 17 	sts	0x17BA, r24	; 0x8017ba <_twiIsInitiated>
    5848:	08 95       	ret

0000584a <twiCreate>:
    584a:	af 92       	push	r10
    584c:	bf 92       	push	r11
    584e:	cf 92       	push	r12
    5850:	df 92       	push	r13
    5852:	ef 92       	push	r14
    5854:	ff 92       	push	r15
    5856:	0f 93       	push	r16
    5858:	1f 93       	push	r17
    585a:	cf 93       	push	r28
    585c:	df 93       	push	r29
    585e:	a8 2e       	mov	r10, r24
    5860:	b6 2e       	mov	r11, r22
    5862:	69 01       	movw	r12, r18
    5864:	7a 01       	movw	r14, r20
    5866:	84 e0       	ldi	r24, 0x04	; 4
    5868:	90 e0       	ldi	r25, 0x00	; 0
    586a:	70 d7       	rcall	.+3808   	; 0x674c <malloc>
    586c:	ec 01       	movw	r28, r24
    586e:	89 2b       	or	r24, r25
    5870:	61 f1       	breq	.+88     	; 0x58ca <twiCreate+0x80>
    5872:	a8 82       	st	Y, r10
    5874:	81 e0       	ldi	r24, 0x01	; 1
    5876:	b8 12       	cpse	r11, r24
    5878:	12 c0       	rjmp	.+36     	; 0x589e <twiCreate+0x54>
    587a:	c7 01       	movw	r24, r14
    587c:	b6 01       	movw	r22, r12
    587e:	20 ea       	ldi	r18, 0xA0	; 160
    5880:	36 e8       	ldi	r19, 0x86	; 134
    5882:	41 e0       	ldi	r20, 0x01	; 1
    5884:	50 e0       	ldi	r21, 0x00	; 0
    5886:	15 d7       	rcall	.+3626   	; 0x66b2 <__udivmodsi4>
    5888:	da 01       	movw	r26, r20
    588a:	c9 01       	movw	r24, r18
    588c:	40 97       	sbiw	r24, 0x10	; 16
    588e:	a1 09       	sbc	r26, r1
    5890:	b1 09       	sbc	r27, r1
    5892:	b6 95       	lsr	r27
    5894:	a7 95       	ror	r26
    5896:	97 95       	ror	r25
    5898:	87 95       	ror	r24
    589a:	89 83       	std	Y+1, r24	; 0x01
    589c:	11 c0       	rjmp	.+34     	; 0x58c0 <twiCreate+0x76>
    589e:	c7 01       	movw	r24, r14
    58a0:	b6 01       	movw	r22, r12
    58a2:	20 e8       	ldi	r18, 0x80	; 128
    58a4:	3a e1       	ldi	r19, 0x1A	; 26
    58a6:	46 e0       	ldi	r20, 0x06	; 6
    58a8:	50 e0       	ldi	r21, 0x00	; 0
    58aa:	03 d7       	rcall	.+3590   	; 0x66b2 <__udivmodsi4>
    58ac:	da 01       	movw	r26, r20
    58ae:	c9 01       	movw	r24, r18
    58b0:	40 97       	sbiw	r24, 0x10	; 16
    58b2:	a1 09       	sbc	r26, r1
    58b4:	b1 09       	sbc	r27, r1
    58b6:	b6 95       	lsr	r27
    58b8:	a7 95       	ror	r26
    58ba:	97 95       	ror	r25
    58bc:	87 95       	ror	r24
    58be:	89 83       	std	Y+1, r24	; 0x01
    58c0:	1b 83       	std	Y+3, r17	; 0x03
    58c2:	0a 83       	std	Y+2, r16	; 0x02
    58c4:	8c 2f       	mov	r24, r28
    58c6:	9d 2f       	mov	r25, r29
    58c8:	02 c0       	rjmp	.+4      	; 0x58ce <twiCreate+0x84>
    58ca:	80 e0       	ldi	r24, 0x00	; 0
    58cc:	90 e0       	ldi	r25, 0x00	; 0
    58ce:	df 91       	pop	r29
    58d0:	cf 91       	pop	r28
    58d2:	1f 91       	pop	r17
    58d4:	0f 91       	pop	r16
    58d6:	ff 90       	pop	r15
    58d8:	ef 90       	pop	r14
    58da:	df 90       	pop	r13
    58dc:	cf 90       	pop	r12
    58de:	bf 90       	pop	r11
    58e0:	af 90       	pop	r10
    58e2:	08 95       	ret

000058e4 <twiIsBusy>:
    58e4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    58e8:	81 70       	andi	r24, 0x01	; 1
    58ea:	08 95       	ret

000058ec <twiTransmit>:
    58ec:	ff 92       	push	r15
    58ee:	0f 93       	push	r16
    58f0:	1f 93       	push	r17
    58f2:	cf 93       	push	r28
    58f4:	df 93       	push	r29
    58f6:	00 97       	sbiw	r24, 0x00	; 0
    58f8:	d1 f1       	breq	.+116    	; 0x596e <twiTransmit+0x82>
    58fa:	4a 30       	cpi	r20, 0x0A	; 10
    58fc:	d0 f5       	brcc	.+116    	; 0x5972 <twiTransmit+0x86>
    58fe:	f4 2e       	mov	r15, r20
    5900:	8b 01       	movw	r16, r22
    5902:	ec 01       	movw	r28, r24
    5904:	ef df       	rcall	.-34     	; 0x58e4 <twiIsBusy>
    5906:	81 11       	cpse	r24, r1
    5908:	36 c0       	rjmp	.+108    	; 0x5976 <twiTransmit+0x8a>
    590a:	80 91 ad 17 	lds	r24, 0x17AD	; 0x8017ad <_twiCurrentHandler>
    590e:	90 91 ae 17 	lds	r25, 0x17AE	; 0x8017ae <_twiCurrentHandler+0x1>
    5912:	c8 17       	cp	r28, r24
    5914:	d9 07       	cpc	r29, r25
    5916:	41 f0       	breq	.+16     	; 0x5928 <twiTransmit+0x3c>
    5918:	87 df       	rcall	.-242    	; 0x5828 <_initTwiInterface>
    591a:	89 81       	ldd	r24, Y+1	; 0x01
    591c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5920:	d0 93 ae 17 	sts	0x17AE, r29	; 0x8017ae <_twiCurrentHandler+0x1>
    5924:	c0 93 ad 17 	sts	0x17AD, r28	; 0x8017ad <_twiCurrentHandler>
    5928:	81 e0       	ldi	r24, 0x01	; 1
    592a:	8f 0d       	add	r24, r15
    592c:	80 93 af 17 	sts	0x17AF, r24	; 0x8017af <_twiMessageLen>
    5930:	88 81       	ld	r24, Y
    5932:	88 0f       	add	r24, r24
    5934:	80 93 b0 17 	sts	0x17B0, r24	; 0x8017b0 <_twiMessageBuffer>
    5938:	ff 20       	and	r15, r15
    593a:	89 f0       	breq	.+34     	; 0x595e <twiTransmit+0x72>
    593c:	f8 01       	movw	r30, r16
    593e:	a1 eb       	ldi	r26, 0xB1	; 177
    5940:	b7 e1       	ldi	r27, 0x17	; 23
    5942:	4f ef       	ldi	r20, 0xFF	; 255
    5944:	4f 0d       	add	r20, r15
    5946:	64 2f       	mov	r22, r20
    5948:	70 e0       	ldi	r23, 0x00	; 0
    594a:	cb 01       	movw	r24, r22
    594c:	01 96       	adiw	r24, 0x01	; 1
    594e:	b8 01       	movw	r22, r16
    5950:	68 0f       	add	r22, r24
    5952:	79 1f       	adc	r23, r25
    5954:	81 91       	ld	r24, Z+
    5956:	8d 93       	st	X+, r24
    5958:	e6 17       	cp	r30, r22
    595a:	f7 07       	cpc	r31, r23
    595c:	d9 f7       	brne	.-10     	; 0x5954 <twiTransmit+0x68>
    595e:	88 ef       	ldi	r24, 0xF8	; 248
    5960:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5964:	85 ea       	ldi	r24, 0xA5	; 165
    5966:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    596a:	84 e0       	ldi	r24, 0x04	; 4
    596c:	05 c0       	rjmp	.+10     	; 0x5978 <twiTransmit+0x8c>
    596e:	86 e0       	ldi	r24, 0x06	; 6
    5970:	03 c0       	rjmp	.+6      	; 0x5978 <twiTransmit+0x8c>
    5972:	87 e0       	ldi	r24, 0x07	; 7
    5974:	01 c0       	rjmp	.+2      	; 0x5978 <twiTransmit+0x8c>
    5976:	82 e0       	ldi	r24, 0x02	; 2
    5978:	df 91       	pop	r29
    597a:	cf 91       	pop	r28
    597c:	1f 91       	pop	r17
    597e:	0f 91       	pop	r16
    5980:	ff 90       	pop	r15
    5982:	08 95       	ret

00005984 <twiReceive>:
    5984:	1f 93       	push	r17
    5986:	cf 93       	push	r28
    5988:	df 93       	push	r29
    598a:	00 97       	sbiw	r24, 0x00	; 0
    598c:	29 f1       	breq	.+74     	; 0x59d8 <twiReceive+0x54>
    598e:	6b 30       	cpi	r22, 0x0B	; 11
    5990:	28 f5       	brcc	.+74     	; 0x59dc <twiReceive+0x58>
    5992:	16 2f       	mov	r17, r22
    5994:	ec 01       	movw	r28, r24
    5996:	a6 df       	rcall	.-180    	; 0x58e4 <twiIsBusy>
    5998:	81 11       	cpse	r24, r1
    599a:	22 c0       	rjmp	.+68     	; 0x59e0 <twiReceive+0x5c>
    599c:	80 91 ad 17 	lds	r24, 0x17AD	; 0x8017ad <_twiCurrentHandler>
    59a0:	90 91 ae 17 	lds	r25, 0x17AE	; 0x8017ae <_twiCurrentHandler+0x1>
    59a4:	c8 17       	cp	r28, r24
    59a6:	d9 07       	cpc	r29, r25
    59a8:	41 f0       	breq	.+16     	; 0x59ba <twiReceive+0x36>
    59aa:	3e df       	rcall	.-388    	; 0x5828 <_initTwiInterface>
    59ac:	89 81       	ldd	r24, Y+1	; 0x01
    59ae:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    59b2:	d0 93 ae 17 	sts	0x17AE, r29	; 0x8017ae <_twiCurrentHandler+0x1>
    59b6:	c0 93 ad 17 	sts	0x17AD, r28	; 0x8017ad <_twiCurrentHandler>
    59ba:	10 93 af 17 	sts	0x17AF, r17	; 0x8017af <_twiMessageLen>
    59be:	88 81       	ld	r24, Y
    59c0:	88 0f       	add	r24, r24
    59c2:	81 60       	ori	r24, 0x01	; 1
    59c4:	80 93 b0 17 	sts	0x17B0, r24	; 0x8017b0 <_twiMessageBuffer>
    59c8:	88 ef       	ldi	r24, 0xF8	; 248
    59ca:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    59ce:	85 ea       	ldi	r24, 0xA5	; 165
    59d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    59d4:	85 e0       	ldi	r24, 0x05	; 5
    59d6:	05 c0       	rjmp	.+10     	; 0x59e2 <twiReceive+0x5e>
    59d8:	86 e0       	ldi	r24, 0x06	; 6
    59da:	03 c0       	rjmp	.+6      	; 0x59e2 <twiReceive+0x5e>
    59dc:	87 e0       	ldi	r24, 0x07	; 7
    59de:	01 c0       	rjmp	.+2      	; 0x59e2 <twiReceive+0x5e>
    59e0:	82 e0       	ldi	r24, 0x02	; 2
    59e2:	df 91       	pop	r29
    59e4:	cf 91       	pop	r28
    59e6:	1f 91       	pop	r17
    59e8:	08 95       	ret

000059ea <__vector_39>:
    59ea:	1f 92       	push	r1
    59ec:	0f 92       	push	r0
    59ee:	0f b6       	in	r0, 0x3f	; 63
    59f0:	0f 92       	push	r0
    59f2:	11 24       	eor	r1, r1
    59f4:	0b b6       	in	r0, 0x3b	; 59
    59f6:	0f 92       	push	r0
    59f8:	2f 93       	push	r18
    59fa:	3f 93       	push	r19
    59fc:	4f 93       	push	r20
    59fe:	5f 93       	push	r21
    5a00:	6f 93       	push	r22
    5a02:	7f 93       	push	r23
    5a04:	8f 93       	push	r24
    5a06:	9f 93       	push	r25
    5a08:	af 93       	push	r26
    5a0a:	bf 93       	push	r27
    5a0c:	ef 93       	push	r30
    5a0e:	ff 93       	push	r31
    5a10:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5a14:	8e 2f       	mov	r24, r30
    5a16:	90 e0       	ldi	r25, 0x00	; 0
    5a18:	fc 01       	movw	r30, r24
    5a1a:	38 97       	sbiw	r30, 0x08	; 8
    5a1c:	e1 35       	cpi	r30, 0x51	; 81
    5a1e:	f1 05       	cpc	r31, r1
    5a20:	08 f0       	brcs	.+2      	; 0x5a24 <__vector_39+0x3a>
    5a22:	75 c0       	rjmp	.+234    	; 0x5b0e <__vector_39+0x124>
    5a24:	88 27       	eor	r24, r24
    5a26:	e4 58       	subi	r30, 0x84	; 132
    5a28:	ff 4f       	sbci	r31, 0xFF	; 255
    5a2a:	8f 4f       	sbci	r24, 0xFF	; 255
    5a2c:	64 c6       	rjmp	.+3272   	; 0x66f6 <__tablejump2__>
    5a2e:	10 92 ac 17 	sts	0x17AC, r1	; 0x8017ac <_index.1885>
    5a32:	e0 91 ac 17 	lds	r30, 0x17AC	; 0x8017ac <_index.1885>
    5a36:	80 91 af 17 	lds	r24, 0x17AF	; 0x8017af <_twiMessageLen>
    5a3a:	e8 17       	cp	r30, r24
    5a3c:	70 f4       	brcc	.+28     	; 0x5a5a <__vector_39+0x70>
    5a3e:	81 e0       	ldi	r24, 0x01	; 1
    5a40:	8e 0f       	add	r24, r30
    5a42:	80 93 ac 17 	sts	0x17AC, r24	; 0x8017ac <_index.1885>
    5a46:	f0 e0       	ldi	r31, 0x00	; 0
    5a48:	e0 55       	subi	r30, 0x50	; 80
    5a4a:	f8 4e       	sbci	r31, 0xE8	; 232
    5a4c:	80 81       	ld	r24, Z
    5a4e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5a52:	85 e8       	ldi	r24, 0x85	; 133
    5a54:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5a58:	72 c0       	rjmp	.+228    	; 0x5b3e <__vector_39+0x154>
    5a5a:	84 e9       	ldi	r24, 0x94	; 148
    5a5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5a60:	80 91 ad 17 	lds	r24, 0x17AD	; 0x8017ad <_twiCurrentHandler>
    5a64:	90 91 ae 17 	lds	r25, 0x17AE	; 0x8017ae <_twiCurrentHandler+0x1>
    5a68:	dc 01       	movw	r26, r24
    5a6a:	12 96       	adiw	r26, 0x02	; 2
    5a6c:	ed 91       	ld	r30, X+
    5a6e:	fc 91       	ld	r31, X
    5a70:	13 97       	sbiw	r26, 0x03	; 3
    5a72:	30 97       	sbiw	r30, 0x00	; 0
    5a74:	09 f4       	brne	.+2      	; 0x5a78 <__vector_39+0x8e>
    5a76:	63 c0       	rjmp	.+198    	; 0x5b3e <__vector_39+0x154>
    5a78:	20 e0       	ldi	r18, 0x00	; 0
    5a7a:	40 e0       	ldi	r20, 0x00	; 0
    5a7c:	50 e0       	ldi	r21, 0x00	; 0
    5a7e:	64 e0       	ldi	r22, 0x04	; 4
    5a80:	19 95       	eicall
    5a82:	5d c0       	rjmp	.+186    	; 0x5b3e <__vector_39+0x154>
    5a84:	e0 91 ac 17 	lds	r30, 0x17AC	; 0x8017ac <_index.1885>
    5a88:	81 e0       	ldi	r24, 0x01	; 1
    5a8a:	8e 0f       	add	r24, r30
    5a8c:	80 93 ac 17 	sts	0x17AC, r24	; 0x8017ac <_index.1885>
    5a90:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5a94:	f0 e0       	ldi	r31, 0x00	; 0
    5a96:	e0 55       	subi	r30, 0x50	; 80
    5a98:	f8 4e       	sbci	r31, 0xE8	; 232
    5a9a:	80 83       	st	Z, r24
    5a9c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5aa0:	80 34       	cpi	r24, 0x40	; 64
    5aa2:	11 f4       	brne	.+4      	; 0x5aa8 <__vector_39+0xbe>
    5aa4:	10 92 ac 17 	sts	0x17AC, r1	; 0x8017ac <_index.1885>
    5aa8:	20 91 ac 17 	lds	r18, 0x17AC	; 0x8017ac <_index.1885>
    5aac:	30 e0       	ldi	r19, 0x00	; 0
    5aae:	80 91 af 17 	lds	r24, 0x17AF	; 0x8017af <_twiMessageLen>
    5ab2:	90 e0       	ldi	r25, 0x00	; 0
    5ab4:	01 97       	sbiw	r24, 0x01	; 1
    5ab6:	28 17       	cp	r18, r24
    5ab8:	39 07       	cpc	r19, r25
    5aba:	24 f4       	brge	.+8      	; 0x5ac4 <__vector_39+0xda>
    5abc:	85 ec       	ldi	r24, 0xC5	; 197
    5abe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5ac2:	3d c0       	rjmp	.+122    	; 0x5b3e <__vector_39+0x154>
    5ac4:	85 e8       	ldi	r24, 0x85	; 133
    5ac6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5aca:	39 c0       	rjmp	.+114    	; 0x5b3e <__vector_39+0x154>
    5acc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5ad0:	e0 91 ac 17 	lds	r30, 0x17AC	; 0x8017ac <_index.1885>
    5ad4:	f0 e0       	ldi	r31, 0x00	; 0
    5ad6:	e0 55       	subi	r30, 0x50	; 80
    5ad8:	f8 4e       	sbci	r31, 0xE8	; 232
    5ada:	80 83       	st	Z, r24
    5adc:	84 e9       	ldi	r24, 0x94	; 148
    5ade:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5ae2:	80 91 ad 17 	lds	r24, 0x17AD	; 0x8017ad <_twiCurrentHandler>
    5ae6:	90 91 ae 17 	lds	r25, 0x17AE	; 0x8017ae <_twiCurrentHandler+0x1>
    5aea:	dc 01       	movw	r26, r24
    5aec:	12 96       	adiw	r26, 0x02	; 2
    5aee:	ed 91       	ld	r30, X+
    5af0:	fc 91       	ld	r31, X
    5af2:	13 97       	sbiw	r26, 0x03	; 3
    5af4:	30 97       	sbiw	r30, 0x00	; 0
    5af6:	19 f1       	breq	.+70     	; 0x5b3e <__vector_39+0x154>
    5af8:	20 91 af 17 	lds	r18, 0x17AF	; 0x8017af <_twiMessageLen>
    5afc:	40 eb       	ldi	r20, 0xB0	; 176
    5afe:	57 e1       	ldi	r21, 0x17	; 23
    5b00:	65 e0       	ldi	r22, 0x05	; 5
    5b02:	19 95       	eicall
    5b04:	1c c0       	rjmp	.+56     	; 0x5b3e <__vector_39+0x154>
    5b06:	85 ea       	ldi	r24, 0xA5	; 165
    5b08:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b0c:	18 c0       	rjmp	.+48     	; 0x5b3e <__vector_39+0x154>
    5b0e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5b12:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5b16:	84 e0       	ldi	r24, 0x04	; 4
    5b18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b1c:	80 91 ad 17 	lds	r24, 0x17AD	; 0x8017ad <_twiCurrentHandler>
    5b20:	90 91 ae 17 	lds	r25, 0x17AE	; 0x8017ae <_twiCurrentHandler+0x1>
    5b24:	dc 01       	movw	r26, r24
    5b26:	12 96       	adiw	r26, 0x02	; 2
    5b28:	ed 91       	ld	r30, X+
    5b2a:	fc 91       	ld	r31, X
    5b2c:	13 97       	sbiw	r26, 0x03	; 3
    5b2e:	30 97       	sbiw	r30, 0x00	; 0
    5b30:	31 f0       	breq	.+12     	; 0x5b3e <__vector_39+0x154>
    5b32:	20 e0       	ldi	r18, 0x00	; 0
    5b34:	40 e0       	ldi	r20, 0x00	; 0
    5b36:	50 e0       	ldi	r21, 0x00	; 0
    5b38:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5b3c:	19 95       	eicall
    5b3e:	ff 91       	pop	r31
    5b40:	ef 91       	pop	r30
    5b42:	bf 91       	pop	r27
    5b44:	af 91       	pop	r26
    5b46:	9f 91       	pop	r25
    5b48:	8f 91       	pop	r24
    5b4a:	7f 91       	pop	r23
    5b4c:	6f 91       	pop	r22
    5b4e:	5f 91       	pop	r21
    5b50:	4f 91       	pop	r20
    5b52:	3f 91       	pop	r19
    5b54:	2f 91       	pop	r18
    5b56:	0f 90       	pop	r0
    5b58:	0b be       	out	0x3b, r0	; 59
    5b5a:	0f 90       	pop	r0
    5b5c:	0f be       	out	0x3f, r0	; 63
    5b5e:	0f 90       	pop	r0
    5b60:	1f 90       	pop	r1
    5b62:	18 95       	reti

00005b64 <fifo_init>:
    5b64:	fc 01       	movw	r30, r24
    5b66:	41 11       	cpse	r20, r1
    5b68:	01 c0       	rjmp	.+2      	; 0x5b6c <fifo_init+0x8>
    5b6a:	11 d7       	rcall	.+3618   	; 0x698e <abort>
    5b6c:	84 2f       	mov	r24, r20
    5b6e:	90 e0       	ldi	r25, 0x00	; 0
    5b70:	9c 01       	movw	r18, r24
    5b72:	21 50       	subi	r18, 0x01	; 1
    5b74:	31 09       	sbc	r19, r1
    5b76:	82 23       	and	r24, r18
    5b78:	93 23       	and	r25, r19
    5b7a:	89 2b       	or	r24, r25
    5b7c:	09 f0       	breq	.+2      	; 0x5b80 <fifo_init+0x1c>
    5b7e:	07 d7       	rcall	.+3598   	; 0x698e <abort>
    5b80:	41 38       	cpi	r20, 0x81	; 129
    5b82:	08 f0       	brcs	.+2      	; 0x5b86 <fifo_init+0x22>
    5b84:	04 d7       	rcall	.+3592   	; 0x698e <abort>
    5b86:	12 82       	std	Z+2, r1	; 0x02
    5b88:	13 82       	std	Z+3, r1	; 0x03
    5b8a:	44 83       	std	Z+4, r20	; 0x04
    5b8c:	44 0f       	add	r20, r20
    5b8e:	41 50       	subi	r20, 0x01	; 1
    5b90:	45 83       	std	Z+5, r20	; 0x05
    5b92:	71 83       	std	Z+1, r23	; 0x01
    5b94:	60 83       	st	Z, r22
    5b96:	80 e0       	ldi	r24, 0x00	; 0
    5b98:	90 e0       	ldi	r25, 0x00	; 0
    5b9a:	08 95       	ret

00005b9c <__subsf3>:
    5b9c:	50 58       	subi	r21, 0x80	; 128

00005b9e <__addsf3>:
    5b9e:	bb 27       	eor	r27, r27
    5ba0:	aa 27       	eor	r26, r26
    5ba2:	0e d0       	rcall	.+28     	; 0x5bc0 <__addsf3x>
    5ba4:	4d c1       	rjmp	.+666    	; 0x5e40 <__fp_round>
    5ba6:	3e d1       	rcall	.+636    	; 0x5e24 <__fp_pscA>
    5ba8:	30 f0       	brcs	.+12     	; 0x5bb6 <__addsf3+0x18>
    5baa:	43 d1       	rcall	.+646    	; 0x5e32 <__fp_pscB>
    5bac:	20 f0       	brcs	.+8      	; 0x5bb6 <__addsf3+0x18>
    5bae:	31 f4       	brne	.+12     	; 0x5bbc <__addsf3+0x1e>
    5bb0:	9f 3f       	cpi	r25, 0xFF	; 255
    5bb2:	11 f4       	brne	.+4      	; 0x5bb8 <__addsf3+0x1a>
    5bb4:	1e f4       	brtc	.+6      	; 0x5bbc <__addsf3+0x1e>
    5bb6:	33 c1       	rjmp	.+614    	; 0x5e1e <__fp_nan>
    5bb8:	0e f4       	brtc	.+2      	; 0x5bbc <__addsf3+0x1e>
    5bba:	e0 95       	com	r30
    5bbc:	e7 fb       	bst	r30, 7
    5bbe:	29 c1       	rjmp	.+594    	; 0x5e12 <__fp_inf>

00005bc0 <__addsf3x>:
    5bc0:	e9 2f       	mov	r30, r25
    5bc2:	4f d1       	rcall	.+670    	; 0x5e62 <__fp_split3>
    5bc4:	80 f3       	brcs	.-32     	; 0x5ba6 <__addsf3+0x8>
    5bc6:	ba 17       	cp	r27, r26
    5bc8:	62 07       	cpc	r22, r18
    5bca:	73 07       	cpc	r23, r19
    5bcc:	84 07       	cpc	r24, r20
    5bce:	95 07       	cpc	r25, r21
    5bd0:	18 f0       	brcs	.+6      	; 0x5bd8 <__addsf3x+0x18>
    5bd2:	71 f4       	brne	.+28     	; 0x5bf0 <__addsf3x+0x30>
    5bd4:	9e f5       	brtc	.+102    	; 0x5c3c <__addsf3x+0x7c>
    5bd6:	67 c1       	rjmp	.+718    	; 0x5ea6 <__fp_zero>
    5bd8:	0e f4       	brtc	.+2      	; 0x5bdc <__addsf3x+0x1c>
    5bda:	e0 95       	com	r30
    5bdc:	0b 2e       	mov	r0, r27
    5bde:	ba 2f       	mov	r27, r26
    5be0:	a0 2d       	mov	r26, r0
    5be2:	0b 01       	movw	r0, r22
    5be4:	b9 01       	movw	r22, r18
    5be6:	90 01       	movw	r18, r0
    5be8:	0c 01       	movw	r0, r24
    5bea:	ca 01       	movw	r24, r20
    5bec:	a0 01       	movw	r20, r0
    5bee:	11 24       	eor	r1, r1
    5bf0:	ff 27       	eor	r31, r31
    5bf2:	59 1b       	sub	r21, r25
    5bf4:	99 f0       	breq	.+38     	; 0x5c1c <__addsf3x+0x5c>
    5bf6:	59 3f       	cpi	r21, 0xF9	; 249
    5bf8:	50 f4       	brcc	.+20     	; 0x5c0e <__addsf3x+0x4e>
    5bfa:	50 3e       	cpi	r21, 0xE0	; 224
    5bfc:	68 f1       	brcs	.+90     	; 0x5c58 <__addsf3x+0x98>
    5bfe:	1a 16       	cp	r1, r26
    5c00:	f0 40       	sbci	r31, 0x00	; 0
    5c02:	a2 2f       	mov	r26, r18
    5c04:	23 2f       	mov	r18, r19
    5c06:	34 2f       	mov	r19, r20
    5c08:	44 27       	eor	r20, r20
    5c0a:	58 5f       	subi	r21, 0xF8	; 248
    5c0c:	f3 cf       	rjmp	.-26     	; 0x5bf4 <__addsf3x+0x34>
    5c0e:	46 95       	lsr	r20
    5c10:	37 95       	ror	r19
    5c12:	27 95       	ror	r18
    5c14:	a7 95       	ror	r26
    5c16:	f0 40       	sbci	r31, 0x00	; 0
    5c18:	53 95       	inc	r21
    5c1a:	c9 f7       	brne	.-14     	; 0x5c0e <__addsf3x+0x4e>
    5c1c:	7e f4       	brtc	.+30     	; 0x5c3c <__addsf3x+0x7c>
    5c1e:	1f 16       	cp	r1, r31
    5c20:	ba 0b       	sbc	r27, r26
    5c22:	62 0b       	sbc	r22, r18
    5c24:	73 0b       	sbc	r23, r19
    5c26:	84 0b       	sbc	r24, r20
    5c28:	ba f0       	brmi	.+46     	; 0x5c58 <__addsf3x+0x98>
    5c2a:	91 50       	subi	r25, 0x01	; 1
    5c2c:	a1 f0       	breq	.+40     	; 0x5c56 <__addsf3x+0x96>
    5c2e:	ff 0f       	add	r31, r31
    5c30:	bb 1f       	adc	r27, r27
    5c32:	66 1f       	adc	r22, r22
    5c34:	77 1f       	adc	r23, r23
    5c36:	88 1f       	adc	r24, r24
    5c38:	c2 f7       	brpl	.-16     	; 0x5c2a <__addsf3x+0x6a>
    5c3a:	0e c0       	rjmp	.+28     	; 0x5c58 <__addsf3x+0x98>
    5c3c:	ba 0f       	add	r27, r26
    5c3e:	62 1f       	adc	r22, r18
    5c40:	73 1f       	adc	r23, r19
    5c42:	84 1f       	adc	r24, r20
    5c44:	48 f4       	brcc	.+18     	; 0x5c58 <__addsf3x+0x98>
    5c46:	87 95       	ror	r24
    5c48:	77 95       	ror	r23
    5c4a:	67 95       	ror	r22
    5c4c:	b7 95       	ror	r27
    5c4e:	f7 95       	ror	r31
    5c50:	9e 3f       	cpi	r25, 0xFE	; 254
    5c52:	08 f0       	brcs	.+2      	; 0x5c56 <__addsf3x+0x96>
    5c54:	b3 cf       	rjmp	.-154    	; 0x5bbc <__addsf3+0x1e>
    5c56:	93 95       	inc	r25
    5c58:	88 0f       	add	r24, r24
    5c5a:	08 f0       	brcs	.+2      	; 0x5c5e <__addsf3x+0x9e>
    5c5c:	99 27       	eor	r25, r25
    5c5e:	ee 0f       	add	r30, r30
    5c60:	97 95       	ror	r25
    5c62:	87 95       	ror	r24
    5c64:	08 95       	ret

00005c66 <__divsf3>:
    5c66:	0c d0       	rcall	.+24     	; 0x5c80 <__divsf3x>
    5c68:	eb c0       	rjmp	.+470    	; 0x5e40 <__fp_round>
    5c6a:	e3 d0       	rcall	.+454    	; 0x5e32 <__fp_pscB>
    5c6c:	40 f0       	brcs	.+16     	; 0x5c7e <__divsf3+0x18>
    5c6e:	da d0       	rcall	.+436    	; 0x5e24 <__fp_pscA>
    5c70:	30 f0       	brcs	.+12     	; 0x5c7e <__divsf3+0x18>
    5c72:	21 f4       	brne	.+8      	; 0x5c7c <__divsf3+0x16>
    5c74:	5f 3f       	cpi	r21, 0xFF	; 255
    5c76:	19 f0       	breq	.+6      	; 0x5c7e <__divsf3+0x18>
    5c78:	cc c0       	rjmp	.+408    	; 0x5e12 <__fp_inf>
    5c7a:	51 11       	cpse	r21, r1
    5c7c:	15 c1       	rjmp	.+554    	; 0x5ea8 <__fp_szero>
    5c7e:	cf c0       	rjmp	.+414    	; 0x5e1e <__fp_nan>

00005c80 <__divsf3x>:
    5c80:	f0 d0       	rcall	.+480    	; 0x5e62 <__fp_split3>
    5c82:	98 f3       	brcs	.-26     	; 0x5c6a <__divsf3+0x4>

00005c84 <__divsf3_pse>:
    5c84:	99 23       	and	r25, r25
    5c86:	c9 f3       	breq	.-14     	; 0x5c7a <__divsf3+0x14>
    5c88:	55 23       	and	r21, r21
    5c8a:	b1 f3       	breq	.-20     	; 0x5c78 <__divsf3+0x12>
    5c8c:	95 1b       	sub	r25, r21
    5c8e:	55 0b       	sbc	r21, r21
    5c90:	bb 27       	eor	r27, r27
    5c92:	aa 27       	eor	r26, r26
    5c94:	62 17       	cp	r22, r18
    5c96:	73 07       	cpc	r23, r19
    5c98:	84 07       	cpc	r24, r20
    5c9a:	38 f0       	brcs	.+14     	; 0x5caa <__divsf3_pse+0x26>
    5c9c:	9f 5f       	subi	r25, 0xFF	; 255
    5c9e:	5f 4f       	sbci	r21, 0xFF	; 255
    5ca0:	22 0f       	add	r18, r18
    5ca2:	33 1f       	adc	r19, r19
    5ca4:	44 1f       	adc	r20, r20
    5ca6:	aa 1f       	adc	r26, r26
    5ca8:	a9 f3       	breq	.-22     	; 0x5c94 <__divsf3_pse+0x10>
    5caa:	33 d0       	rcall	.+102    	; 0x5d12 <__divsf3_pse+0x8e>
    5cac:	0e 2e       	mov	r0, r30
    5cae:	3a f0       	brmi	.+14     	; 0x5cbe <__divsf3_pse+0x3a>
    5cb0:	e0 e8       	ldi	r30, 0x80	; 128
    5cb2:	30 d0       	rcall	.+96     	; 0x5d14 <__divsf3_pse+0x90>
    5cb4:	91 50       	subi	r25, 0x01	; 1
    5cb6:	50 40       	sbci	r21, 0x00	; 0
    5cb8:	e6 95       	lsr	r30
    5cba:	00 1c       	adc	r0, r0
    5cbc:	ca f7       	brpl	.-14     	; 0x5cb0 <__divsf3_pse+0x2c>
    5cbe:	29 d0       	rcall	.+82     	; 0x5d12 <__divsf3_pse+0x8e>
    5cc0:	fe 2f       	mov	r31, r30
    5cc2:	27 d0       	rcall	.+78     	; 0x5d12 <__divsf3_pse+0x8e>
    5cc4:	66 0f       	add	r22, r22
    5cc6:	77 1f       	adc	r23, r23
    5cc8:	88 1f       	adc	r24, r24
    5cca:	bb 1f       	adc	r27, r27
    5ccc:	26 17       	cp	r18, r22
    5cce:	37 07       	cpc	r19, r23
    5cd0:	48 07       	cpc	r20, r24
    5cd2:	ab 07       	cpc	r26, r27
    5cd4:	b0 e8       	ldi	r27, 0x80	; 128
    5cd6:	09 f0       	breq	.+2      	; 0x5cda <__divsf3_pse+0x56>
    5cd8:	bb 0b       	sbc	r27, r27
    5cda:	80 2d       	mov	r24, r0
    5cdc:	bf 01       	movw	r22, r30
    5cde:	ff 27       	eor	r31, r31
    5ce0:	93 58       	subi	r25, 0x83	; 131
    5ce2:	5f 4f       	sbci	r21, 0xFF	; 255
    5ce4:	2a f0       	brmi	.+10     	; 0x5cf0 <__divsf3_pse+0x6c>
    5ce6:	9e 3f       	cpi	r25, 0xFE	; 254
    5ce8:	51 05       	cpc	r21, r1
    5cea:	68 f0       	brcs	.+26     	; 0x5d06 <__divsf3_pse+0x82>
    5cec:	92 c0       	rjmp	.+292    	; 0x5e12 <__fp_inf>
    5cee:	dc c0       	rjmp	.+440    	; 0x5ea8 <__fp_szero>
    5cf0:	5f 3f       	cpi	r21, 0xFF	; 255
    5cf2:	ec f3       	brlt	.-6      	; 0x5cee <__divsf3_pse+0x6a>
    5cf4:	98 3e       	cpi	r25, 0xE8	; 232
    5cf6:	dc f3       	brlt	.-10     	; 0x5cee <__divsf3_pse+0x6a>
    5cf8:	86 95       	lsr	r24
    5cfa:	77 95       	ror	r23
    5cfc:	67 95       	ror	r22
    5cfe:	b7 95       	ror	r27
    5d00:	f7 95       	ror	r31
    5d02:	9f 5f       	subi	r25, 0xFF	; 255
    5d04:	c9 f7       	brne	.-14     	; 0x5cf8 <__divsf3_pse+0x74>
    5d06:	88 0f       	add	r24, r24
    5d08:	91 1d       	adc	r25, r1
    5d0a:	96 95       	lsr	r25
    5d0c:	87 95       	ror	r24
    5d0e:	97 f9       	bld	r25, 7
    5d10:	08 95       	ret
    5d12:	e1 e0       	ldi	r30, 0x01	; 1
    5d14:	66 0f       	add	r22, r22
    5d16:	77 1f       	adc	r23, r23
    5d18:	88 1f       	adc	r24, r24
    5d1a:	bb 1f       	adc	r27, r27
    5d1c:	62 17       	cp	r22, r18
    5d1e:	73 07       	cpc	r23, r19
    5d20:	84 07       	cpc	r24, r20
    5d22:	ba 07       	cpc	r27, r26
    5d24:	20 f0       	brcs	.+8      	; 0x5d2e <__divsf3_pse+0xaa>
    5d26:	62 1b       	sub	r22, r18
    5d28:	73 0b       	sbc	r23, r19
    5d2a:	84 0b       	sbc	r24, r20
    5d2c:	ba 0b       	sbc	r27, r26
    5d2e:	ee 1f       	adc	r30, r30
    5d30:	88 f7       	brcc	.-30     	; 0x5d14 <__divsf3_pse+0x90>
    5d32:	e0 95       	com	r30
    5d34:	08 95       	ret

00005d36 <__fixsfsi>:
    5d36:	04 d0       	rcall	.+8      	; 0x5d40 <__fixunssfsi>
    5d38:	68 94       	set
    5d3a:	b1 11       	cpse	r27, r1
    5d3c:	b5 c0       	rjmp	.+362    	; 0x5ea8 <__fp_szero>
    5d3e:	08 95       	ret

00005d40 <__fixunssfsi>:
    5d40:	98 d0       	rcall	.+304    	; 0x5e72 <__fp_splitA>
    5d42:	88 f0       	brcs	.+34     	; 0x5d66 <__fixunssfsi+0x26>
    5d44:	9f 57       	subi	r25, 0x7F	; 127
    5d46:	90 f0       	brcs	.+36     	; 0x5d6c <__fixunssfsi+0x2c>
    5d48:	b9 2f       	mov	r27, r25
    5d4a:	99 27       	eor	r25, r25
    5d4c:	b7 51       	subi	r27, 0x17	; 23
    5d4e:	a0 f0       	brcs	.+40     	; 0x5d78 <__fixunssfsi+0x38>
    5d50:	d1 f0       	breq	.+52     	; 0x5d86 <__fixunssfsi+0x46>
    5d52:	66 0f       	add	r22, r22
    5d54:	77 1f       	adc	r23, r23
    5d56:	88 1f       	adc	r24, r24
    5d58:	99 1f       	adc	r25, r25
    5d5a:	1a f0       	brmi	.+6      	; 0x5d62 <__fixunssfsi+0x22>
    5d5c:	ba 95       	dec	r27
    5d5e:	c9 f7       	brne	.-14     	; 0x5d52 <__fixunssfsi+0x12>
    5d60:	12 c0       	rjmp	.+36     	; 0x5d86 <__fixunssfsi+0x46>
    5d62:	b1 30       	cpi	r27, 0x01	; 1
    5d64:	81 f0       	breq	.+32     	; 0x5d86 <__fixunssfsi+0x46>
    5d66:	9f d0       	rcall	.+318    	; 0x5ea6 <__fp_zero>
    5d68:	b1 e0       	ldi	r27, 0x01	; 1
    5d6a:	08 95       	ret
    5d6c:	9c c0       	rjmp	.+312    	; 0x5ea6 <__fp_zero>
    5d6e:	67 2f       	mov	r22, r23
    5d70:	78 2f       	mov	r23, r24
    5d72:	88 27       	eor	r24, r24
    5d74:	b8 5f       	subi	r27, 0xF8	; 248
    5d76:	39 f0       	breq	.+14     	; 0x5d86 <__fixunssfsi+0x46>
    5d78:	b9 3f       	cpi	r27, 0xF9	; 249
    5d7a:	cc f3       	brlt	.-14     	; 0x5d6e <__fixunssfsi+0x2e>
    5d7c:	86 95       	lsr	r24
    5d7e:	77 95       	ror	r23
    5d80:	67 95       	ror	r22
    5d82:	b3 95       	inc	r27
    5d84:	d9 f7       	brne	.-10     	; 0x5d7c <__fixunssfsi+0x3c>
    5d86:	3e f4       	brtc	.+14     	; 0x5d96 <__fixunssfsi+0x56>
    5d88:	90 95       	com	r25
    5d8a:	80 95       	com	r24
    5d8c:	70 95       	com	r23
    5d8e:	61 95       	neg	r22
    5d90:	7f 4f       	sbci	r23, 0xFF	; 255
    5d92:	8f 4f       	sbci	r24, 0xFF	; 255
    5d94:	9f 4f       	sbci	r25, 0xFF	; 255
    5d96:	08 95       	ret

00005d98 <__floatunsisf>:
    5d98:	e8 94       	clt
    5d9a:	09 c0       	rjmp	.+18     	; 0x5dae <__floatsisf+0x12>

00005d9c <__floatsisf>:
    5d9c:	97 fb       	bst	r25, 7
    5d9e:	3e f4       	brtc	.+14     	; 0x5dae <__floatsisf+0x12>
    5da0:	90 95       	com	r25
    5da2:	80 95       	com	r24
    5da4:	70 95       	com	r23
    5da6:	61 95       	neg	r22
    5da8:	7f 4f       	sbci	r23, 0xFF	; 255
    5daa:	8f 4f       	sbci	r24, 0xFF	; 255
    5dac:	9f 4f       	sbci	r25, 0xFF	; 255
    5dae:	99 23       	and	r25, r25
    5db0:	a9 f0       	breq	.+42     	; 0x5ddc <__floatsisf+0x40>
    5db2:	f9 2f       	mov	r31, r25
    5db4:	96 e9       	ldi	r25, 0x96	; 150
    5db6:	bb 27       	eor	r27, r27
    5db8:	93 95       	inc	r25
    5dba:	f6 95       	lsr	r31
    5dbc:	87 95       	ror	r24
    5dbe:	77 95       	ror	r23
    5dc0:	67 95       	ror	r22
    5dc2:	b7 95       	ror	r27
    5dc4:	f1 11       	cpse	r31, r1
    5dc6:	f8 cf       	rjmp	.-16     	; 0x5db8 <__floatsisf+0x1c>
    5dc8:	fa f4       	brpl	.+62     	; 0x5e08 <__floatsisf+0x6c>
    5dca:	bb 0f       	add	r27, r27
    5dcc:	11 f4       	brne	.+4      	; 0x5dd2 <__floatsisf+0x36>
    5dce:	60 ff       	sbrs	r22, 0
    5dd0:	1b c0       	rjmp	.+54     	; 0x5e08 <__floatsisf+0x6c>
    5dd2:	6f 5f       	subi	r22, 0xFF	; 255
    5dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    5dd6:	8f 4f       	sbci	r24, 0xFF	; 255
    5dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    5dda:	16 c0       	rjmp	.+44     	; 0x5e08 <__floatsisf+0x6c>
    5ddc:	88 23       	and	r24, r24
    5dde:	11 f0       	breq	.+4      	; 0x5de4 <__floatsisf+0x48>
    5de0:	96 e9       	ldi	r25, 0x96	; 150
    5de2:	11 c0       	rjmp	.+34     	; 0x5e06 <__floatsisf+0x6a>
    5de4:	77 23       	and	r23, r23
    5de6:	21 f0       	breq	.+8      	; 0x5df0 <__floatsisf+0x54>
    5de8:	9e e8       	ldi	r25, 0x8E	; 142
    5dea:	87 2f       	mov	r24, r23
    5dec:	76 2f       	mov	r23, r22
    5dee:	05 c0       	rjmp	.+10     	; 0x5dfa <__floatsisf+0x5e>
    5df0:	66 23       	and	r22, r22
    5df2:	71 f0       	breq	.+28     	; 0x5e10 <__floatsisf+0x74>
    5df4:	96 e8       	ldi	r25, 0x86	; 134
    5df6:	86 2f       	mov	r24, r22
    5df8:	70 e0       	ldi	r23, 0x00	; 0
    5dfa:	60 e0       	ldi	r22, 0x00	; 0
    5dfc:	2a f0       	brmi	.+10     	; 0x5e08 <__floatsisf+0x6c>
    5dfe:	9a 95       	dec	r25
    5e00:	66 0f       	add	r22, r22
    5e02:	77 1f       	adc	r23, r23
    5e04:	88 1f       	adc	r24, r24
    5e06:	da f7       	brpl	.-10     	; 0x5dfe <__floatsisf+0x62>
    5e08:	88 0f       	add	r24, r24
    5e0a:	96 95       	lsr	r25
    5e0c:	87 95       	ror	r24
    5e0e:	97 f9       	bld	r25, 7
    5e10:	08 95       	ret

00005e12 <__fp_inf>:
    5e12:	97 f9       	bld	r25, 7
    5e14:	9f 67       	ori	r25, 0x7F	; 127
    5e16:	80 e8       	ldi	r24, 0x80	; 128
    5e18:	70 e0       	ldi	r23, 0x00	; 0
    5e1a:	60 e0       	ldi	r22, 0x00	; 0
    5e1c:	08 95       	ret

00005e1e <__fp_nan>:
    5e1e:	9f ef       	ldi	r25, 0xFF	; 255
    5e20:	80 ec       	ldi	r24, 0xC0	; 192
    5e22:	08 95       	ret

00005e24 <__fp_pscA>:
    5e24:	00 24       	eor	r0, r0
    5e26:	0a 94       	dec	r0
    5e28:	16 16       	cp	r1, r22
    5e2a:	17 06       	cpc	r1, r23
    5e2c:	18 06       	cpc	r1, r24
    5e2e:	09 06       	cpc	r0, r25
    5e30:	08 95       	ret

00005e32 <__fp_pscB>:
    5e32:	00 24       	eor	r0, r0
    5e34:	0a 94       	dec	r0
    5e36:	12 16       	cp	r1, r18
    5e38:	13 06       	cpc	r1, r19
    5e3a:	14 06       	cpc	r1, r20
    5e3c:	05 06       	cpc	r0, r21
    5e3e:	08 95       	ret

00005e40 <__fp_round>:
    5e40:	09 2e       	mov	r0, r25
    5e42:	03 94       	inc	r0
    5e44:	00 0c       	add	r0, r0
    5e46:	11 f4       	brne	.+4      	; 0x5e4c <__fp_round+0xc>
    5e48:	88 23       	and	r24, r24
    5e4a:	52 f0       	brmi	.+20     	; 0x5e60 <__fp_round+0x20>
    5e4c:	bb 0f       	add	r27, r27
    5e4e:	40 f4       	brcc	.+16     	; 0x5e60 <__fp_round+0x20>
    5e50:	bf 2b       	or	r27, r31
    5e52:	11 f4       	brne	.+4      	; 0x5e58 <__fp_round+0x18>
    5e54:	60 ff       	sbrs	r22, 0
    5e56:	04 c0       	rjmp	.+8      	; 0x5e60 <__fp_round+0x20>
    5e58:	6f 5f       	subi	r22, 0xFF	; 255
    5e5a:	7f 4f       	sbci	r23, 0xFF	; 255
    5e5c:	8f 4f       	sbci	r24, 0xFF	; 255
    5e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    5e60:	08 95       	ret

00005e62 <__fp_split3>:
    5e62:	57 fd       	sbrc	r21, 7
    5e64:	90 58       	subi	r25, 0x80	; 128
    5e66:	44 0f       	add	r20, r20
    5e68:	55 1f       	adc	r21, r21
    5e6a:	59 f0       	breq	.+22     	; 0x5e82 <__fp_splitA+0x10>
    5e6c:	5f 3f       	cpi	r21, 0xFF	; 255
    5e6e:	71 f0       	breq	.+28     	; 0x5e8c <__fp_splitA+0x1a>
    5e70:	47 95       	ror	r20

00005e72 <__fp_splitA>:
    5e72:	88 0f       	add	r24, r24
    5e74:	97 fb       	bst	r25, 7
    5e76:	99 1f       	adc	r25, r25
    5e78:	61 f0       	breq	.+24     	; 0x5e92 <__fp_splitA+0x20>
    5e7a:	9f 3f       	cpi	r25, 0xFF	; 255
    5e7c:	79 f0       	breq	.+30     	; 0x5e9c <__fp_splitA+0x2a>
    5e7e:	87 95       	ror	r24
    5e80:	08 95       	ret
    5e82:	12 16       	cp	r1, r18
    5e84:	13 06       	cpc	r1, r19
    5e86:	14 06       	cpc	r1, r20
    5e88:	55 1f       	adc	r21, r21
    5e8a:	f2 cf       	rjmp	.-28     	; 0x5e70 <__fp_split3+0xe>
    5e8c:	46 95       	lsr	r20
    5e8e:	f1 df       	rcall	.-30     	; 0x5e72 <__fp_splitA>
    5e90:	08 c0       	rjmp	.+16     	; 0x5ea2 <__fp_splitA+0x30>
    5e92:	16 16       	cp	r1, r22
    5e94:	17 06       	cpc	r1, r23
    5e96:	18 06       	cpc	r1, r24
    5e98:	99 1f       	adc	r25, r25
    5e9a:	f1 cf       	rjmp	.-30     	; 0x5e7e <__fp_splitA+0xc>
    5e9c:	86 95       	lsr	r24
    5e9e:	71 05       	cpc	r23, r1
    5ea0:	61 05       	cpc	r22, r1
    5ea2:	08 94       	sec
    5ea4:	08 95       	ret

00005ea6 <__fp_zero>:
    5ea6:	e8 94       	clt

00005ea8 <__fp_szero>:
    5ea8:	bb 27       	eor	r27, r27
    5eaa:	66 27       	eor	r22, r22
    5eac:	77 27       	eor	r23, r23
    5eae:	cb 01       	movw	r24, r22
    5eb0:	97 f9       	bld	r25, 7
    5eb2:	08 95       	ret

00005eb4 <__mulsf3>:
    5eb4:	0b d0       	rcall	.+22     	; 0x5ecc <__mulsf3x>
    5eb6:	c4 cf       	rjmp	.-120    	; 0x5e40 <__fp_round>
    5eb8:	b5 df       	rcall	.-150    	; 0x5e24 <__fp_pscA>
    5eba:	28 f0       	brcs	.+10     	; 0x5ec6 <__mulsf3+0x12>
    5ebc:	ba df       	rcall	.-140    	; 0x5e32 <__fp_pscB>
    5ebe:	18 f0       	brcs	.+6      	; 0x5ec6 <__mulsf3+0x12>
    5ec0:	95 23       	and	r25, r21
    5ec2:	09 f0       	breq	.+2      	; 0x5ec6 <__mulsf3+0x12>
    5ec4:	a6 cf       	rjmp	.-180    	; 0x5e12 <__fp_inf>
    5ec6:	ab cf       	rjmp	.-170    	; 0x5e1e <__fp_nan>
    5ec8:	11 24       	eor	r1, r1
    5eca:	ee cf       	rjmp	.-36     	; 0x5ea8 <__fp_szero>

00005ecc <__mulsf3x>:
    5ecc:	ca df       	rcall	.-108    	; 0x5e62 <__fp_split3>
    5ece:	a0 f3       	brcs	.-24     	; 0x5eb8 <__mulsf3+0x4>

00005ed0 <__mulsf3_pse>:
    5ed0:	95 9f       	mul	r25, r21
    5ed2:	d1 f3       	breq	.-12     	; 0x5ec8 <__mulsf3+0x14>
    5ed4:	95 0f       	add	r25, r21
    5ed6:	50 e0       	ldi	r21, 0x00	; 0
    5ed8:	55 1f       	adc	r21, r21
    5eda:	62 9f       	mul	r22, r18
    5edc:	f0 01       	movw	r30, r0
    5ede:	72 9f       	mul	r23, r18
    5ee0:	bb 27       	eor	r27, r27
    5ee2:	f0 0d       	add	r31, r0
    5ee4:	b1 1d       	adc	r27, r1
    5ee6:	63 9f       	mul	r22, r19
    5ee8:	aa 27       	eor	r26, r26
    5eea:	f0 0d       	add	r31, r0
    5eec:	b1 1d       	adc	r27, r1
    5eee:	aa 1f       	adc	r26, r26
    5ef0:	64 9f       	mul	r22, r20
    5ef2:	66 27       	eor	r22, r22
    5ef4:	b0 0d       	add	r27, r0
    5ef6:	a1 1d       	adc	r26, r1
    5ef8:	66 1f       	adc	r22, r22
    5efa:	82 9f       	mul	r24, r18
    5efc:	22 27       	eor	r18, r18
    5efe:	b0 0d       	add	r27, r0
    5f00:	a1 1d       	adc	r26, r1
    5f02:	62 1f       	adc	r22, r18
    5f04:	73 9f       	mul	r23, r19
    5f06:	b0 0d       	add	r27, r0
    5f08:	a1 1d       	adc	r26, r1
    5f0a:	62 1f       	adc	r22, r18
    5f0c:	83 9f       	mul	r24, r19
    5f0e:	a0 0d       	add	r26, r0
    5f10:	61 1d       	adc	r22, r1
    5f12:	22 1f       	adc	r18, r18
    5f14:	74 9f       	mul	r23, r20
    5f16:	33 27       	eor	r19, r19
    5f18:	a0 0d       	add	r26, r0
    5f1a:	61 1d       	adc	r22, r1
    5f1c:	23 1f       	adc	r18, r19
    5f1e:	84 9f       	mul	r24, r20
    5f20:	60 0d       	add	r22, r0
    5f22:	21 1d       	adc	r18, r1
    5f24:	82 2f       	mov	r24, r18
    5f26:	76 2f       	mov	r23, r22
    5f28:	6a 2f       	mov	r22, r26
    5f2a:	11 24       	eor	r1, r1
    5f2c:	9f 57       	subi	r25, 0x7F	; 127
    5f2e:	50 40       	sbci	r21, 0x00	; 0
    5f30:	8a f0       	brmi	.+34     	; 0x5f54 <__mulsf3_pse+0x84>
    5f32:	e1 f0       	breq	.+56     	; 0x5f6c <__mulsf3_pse+0x9c>
    5f34:	88 23       	and	r24, r24
    5f36:	4a f0       	brmi	.+18     	; 0x5f4a <__mulsf3_pse+0x7a>
    5f38:	ee 0f       	add	r30, r30
    5f3a:	ff 1f       	adc	r31, r31
    5f3c:	bb 1f       	adc	r27, r27
    5f3e:	66 1f       	adc	r22, r22
    5f40:	77 1f       	adc	r23, r23
    5f42:	88 1f       	adc	r24, r24
    5f44:	91 50       	subi	r25, 0x01	; 1
    5f46:	50 40       	sbci	r21, 0x00	; 0
    5f48:	a9 f7       	brne	.-22     	; 0x5f34 <__mulsf3_pse+0x64>
    5f4a:	9e 3f       	cpi	r25, 0xFE	; 254
    5f4c:	51 05       	cpc	r21, r1
    5f4e:	70 f0       	brcs	.+28     	; 0x5f6c <__mulsf3_pse+0x9c>
    5f50:	60 cf       	rjmp	.-320    	; 0x5e12 <__fp_inf>
    5f52:	aa cf       	rjmp	.-172    	; 0x5ea8 <__fp_szero>
    5f54:	5f 3f       	cpi	r21, 0xFF	; 255
    5f56:	ec f3       	brlt	.-6      	; 0x5f52 <__mulsf3_pse+0x82>
    5f58:	98 3e       	cpi	r25, 0xE8	; 232
    5f5a:	dc f3       	brlt	.-10     	; 0x5f52 <__mulsf3_pse+0x82>
    5f5c:	86 95       	lsr	r24
    5f5e:	77 95       	ror	r23
    5f60:	67 95       	ror	r22
    5f62:	b7 95       	ror	r27
    5f64:	f7 95       	ror	r31
    5f66:	e7 95       	ror	r30
    5f68:	9f 5f       	subi	r25, 0xFF	; 255
    5f6a:	c1 f7       	brne	.-16     	; 0x5f5c <__mulsf3_pse+0x8c>
    5f6c:	fe 2b       	or	r31, r30
    5f6e:	88 0f       	add	r24, r24
    5f70:	91 1d       	adc	r25, r1
    5f72:	96 95       	lsr	r25
    5f74:	87 95       	ror	r24
    5f76:	97 f9       	bld	r25, 7
    5f78:	08 95       	ret

00005f7a <vfprintf>:
    5f7a:	2f 92       	push	r2
    5f7c:	3f 92       	push	r3
    5f7e:	4f 92       	push	r4
    5f80:	5f 92       	push	r5
    5f82:	6f 92       	push	r6
    5f84:	7f 92       	push	r7
    5f86:	8f 92       	push	r8
    5f88:	9f 92       	push	r9
    5f8a:	af 92       	push	r10
    5f8c:	bf 92       	push	r11
    5f8e:	cf 92       	push	r12
    5f90:	df 92       	push	r13
    5f92:	ef 92       	push	r14
    5f94:	ff 92       	push	r15
    5f96:	0f 93       	push	r16
    5f98:	1f 93       	push	r17
    5f9a:	cf 93       	push	r28
    5f9c:	df 93       	push	r29
    5f9e:	cd b7       	in	r28, 0x3d	; 61
    5fa0:	de b7       	in	r29, 0x3e	; 62
    5fa2:	60 97       	sbiw	r28, 0x10	; 16
    5fa4:	0f b6       	in	r0, 0x3f	; 63
    5fa6:	f8 94       	cli
    5fa8:	de bf       	out	0x3e, r29	; 62
    5faa:	0f be       	out	0x3f, r0	; 63
    5fac:	cd bf       	out	0x3d, r28	; 61
    5fae:	7c 01       	movw	r14, r24
    5fb0:	1b 01       	movw	r2, r22
    5fb2:	6a 01       	movw	r12, r20
    5fb4:	fc 01       	movw	r30, r24
    5fb6:	17 82       	std	Z+7, r1	; 0x07
    5fb8:	16 82       	std	Z+6, r1	; 0x06
    5fba:	83 81       	ldd	r24, Z+3	; 0x03
    5fbc:	81 ff       	sbrs	r24, 1
    5fbe:	2a c3       	rjmp	.+1620   	; 0x6614 <vfprintf+0x69a>
    5fc0:	9e 01       	movw	r18, r28
    5fc2:	2f 5f       	subi	r18, 0xFF	; 255
    5fc4:	3f 4f       	sbci	r19, 0xFF	; 255
    5fc6:	39 01       	movw	r6, r18
    5fc8:	f7 01       	movw	r30, r14
    5fca:	93 81       	ldd	r25, Z+3	; 0x03
    5fcc:	f1 01       	movw	r30, r2
    5fce:	93 fd       	sbrc	r25, 3
    5fd0:	85 91       	lpm	r24, Z+
    5fd2:	93 ff       	sbrs	r25, 3
    5fd4:	81 91       	ld	r24, Z+
    5fd6:	1f 01       	movw	r2, r30
    5fd8:	88 23       	and	r24, r24
    5fda:	09 f4       	brne	.+2      	; 0x5fde <vfprintf+0x64>
    5fdc:	17 c3       	rjmp	.+1582   	; 0x660c <vfprintf+0x692>
    5fde:	85 32       	cpi	r24, 0x25	; 37
    5fe0:	39 f4       	brne	.+14     	; 0x5ff0 <vfprintf+0x76>
    5fe2:	93 fd       	sbrc	r25, 3
    5fe4:	85 91       	lpm	r24, Z+
    5fe6:	93 ff       	sbrs	r25, 3
    5fe8:	81 91       	ld	r24, Z+
    5fea:	1f 01       	movw	r2, r30
    5fec:	85 32       	cpi	r24, 0x25	; 37
    5fee:	31 f4       	brne	.+12     	; 0x5ffc <vfprintf+0x82>
    5ff0:	b7 01       	movw	r22, r14
    5ff2:	90 e0       	ldi	r25, 0x00	; 0
    5ff4:	1d d6       	rcall	.+3130   	; 0x6c30 <fputc>
    5ff6:	56 01       	movw	r10, r12
    5ff8:	65 01       	movw	r12, r10
    5ffa:	e6 cf       	rjmp	.-52     	; 0x5fc8 <vfprintf+0x4e>
    5ffc:	10 e0       	ldi	r17, 0x00	; 0
    5ffe:	51 2c       	mov	r5, r1
    6000:	91 2c       	mov	r9, r1
    6002:	ff e1       	ldi	r31, 0x1F	; 31
    6004:	f9 15       	cp	r31, r9
    6006:	d8 f0       	brcs	.+54     	; 0x603e <vfprintf+0xc4>
    6008:	8b 32       	cpi	r24, 0x2B	; 43
    600a:	79 f0       	breq	.+30     	; 0x602a <vfprintf+0xb0>
    600c:	38 f4       	brcc	.+14     	; 0x601c <vfprintf+0xa2>
    600e:	80 32       	cpi	r24, 0x20	; 32
    6010:	79 f0       	breq	.+30     	; 0x6030 <vfprintf+0xb6>
    6012:	83 32       	cpi	r24, 0x23	; 35
    6014:	a1 f4       	brne	.+40     	; 0x603e <vfprintf+0xc4>
    6016:	f9 2d       	mov	r31, r9
    6018:	f0 61       	ori	r31, 0x10	; 16
    601a:	2e c0       	rjmp	.+92     	; 0x6078 <vfprintf+0xfe>
    601c:	8d 32       	cpi	r24, 0x2D	; 45
    601e:	61 f0       	breq	.+24     	; 0x6038 <vfprintf+0xbe>
    6020:	80 33       	cpi	r24, 0x30	; 48
    6022:	69 f4       	brne	.+26     	; 0x603e <vfprintf+0xc4>
    6024:	29 2d       	mov	r18, r9
    6026:	21 60       	ori	r18, 0x01	; 1
    6028:	2d c0       	rjmp	.+90     	; 0x6084 <vfprintf+0x10a>
    602a:	39 2d       	mov	r19, r9
    602c:	32 60       	ori	r19, 0x02	; 2
    602e:	93 2e       	mov	r9, r19
    6030:	89 2d       	mov	r24, r9
    6032:	84 60       	ori	r24, 0x04	; 4
    6034:	98 2e       	mov	r9, r24
    6036:	2a c0       	rjmp	.+84     	; 0x608c <vfprintf+0x112>
    6038:	e9 2d       	mov	r30, r9
    603a:	e8 60       	ori	r30, 0x08	; 8
    603c:	15 c0       	rjmp	.+42     	; 0x6068 <vfprintf+0xee>
    603e:	97 fc       	sbrc	r9, 7
    6040:	2d c0       	rjmp	.+90     	; 0x609c <vfprintf+0x122>
    6042:	20 ed       	ldi	r18, 0xD0	; 208
    6044:	28 0f       	add	r18, r24
    6046:	2a 30       	cpi	r18, 0x0A	; 10
    6048:	88 f4       	brcc	.+34     	; 0x606c <vfprintf+0xf2>
    604a:	96 fe       	sbrs	r9, 6
    604c:	06 c0       	rjmp	.+12     	; 0x605a <vfprintf+0xe0>
    604e:	3a e0       	ldi	r19, 0x0A	; 10
    6050:	13 9f       	mul	r17, r19
    6052:	20 0d       	add	r18, r0
    6054:	11 24       	eor	r1, r1
    6056:	12 2f       	mov	r17, r18
    6058:	19 c0       	rjmp	.+50     	; 0x608c <vfprintf+0x112>
    605a:	8a e0       	ldi	r24, 0x0A	; 10
    605c:	58 9e       	mul	r5, r24
    605e:	20 0d       	add	r18, r0
    6060:	11 24       	eor	r1, r1
    6062:	52 2e       	mov	r5, r18
    6064:	e9 2d       	mov	r30, r9
    6066:	e0 62       	ori	r30, 0x20	; 32
    6068:	9e 2e       	mov	r9, r30
    606a:	10 c0       	rjmp	.+32     	; 0x608c <vfprintf+0x112>
    606c:	8e 32       	cpi	r24, 0x2E	; 46
    606e:	31 f4       	brne	.+12     	; 0x607c <vfprintf+0x102>
    6070:	96 fc       	sbrc	r9, 6
    6072:	cc c2       	rjmp	.+1432   	; 0x660c <vfprintf+0x692>
    6074:	f9 2d       	mov	r31, r9
    6076:	f0 64       	ori	r31, 0x40	; 64
    6078:	9f 2e       	mov	r9, r31
    607a:	08 c0       	rjmp	.+16     	; 0x608c <vfprintf+0x112>
    607c:	8c 36       	cpi	r24, 0x6C	; 108
    607e:	21 f4       	brne	.+8      	; 0x6088 <vfprintf+0x10e>
    6080:	29 2d       	mov	r18, r9
    6082:	20 68       	ori	r18, 0x80	; 128
    6084:	92 2e       	mov	r9, r18
    6086:	02 c0       	rjmp	.+4      	; 0x608c <vfprintf+0x112>
    6088:	88 36       	cpi	r24, 0x68	; 104
    608a:	41 f4       	brne	.+16     	; 0x609c <vfprintf+0x122>
    608c:	f1 01       	movw	r30, r2
    608e:	93 fd       	sbrc	r25, 3
    6090:	85 91       	lpm	r24, Z+
    6092:	93 ff       	sbrs	r25, 3
    6094:	81 91       	ld	r24, Z+
    6096:	1f 01       	movw	r2, r30
    6098:	81 11       	cpse	r24, r1
    609a:	b3 cf       	rjmp	.-154    	; 0x6002 <vfprintf+0x88>
    609c:	9b eb       	ldi	r25, 0xBB	; 187
    609e:	98 0f       	add	r25, r24
    60a0:	93 30       	cpi	r25, 0x03	; 3
    60a2:	20 f4       	brcc	.+8      	; 0x60ac <vfprintf+0x132>
    60a4:	99 2d       	mov	r25, r9
    60a6:	90 61       	ori	r25, 0x10	; 16
    60a8:	80 5e       	subi	r24, 0xE0	; 224
    60aa:	07 c0       	rjmp	.+14     	; 0x60ba <vfprintf+0x140>
    60ac:	9b e9       	ldi	r25, 0x9B	; 155
    60ae:	98 0f       	add	r25, r24
    60b0:	93 30       	cpi	r25, 0x03	; 3
    60b2:	08 f0       	brcs	.+2      	; 0x60b6 <vfprintf+0x13c>
    60b4:	59 c1       	rjmp	.+690    	; 0x6368 <vfprintf+0x3ee>
    60b6:	99 2d       	mov	r25, r9
    60b8:	9f 7e       	andi	r25, 0xEF	; 239
    60ba:	96 ff       	sbrs	r25, 6
    60bc:	16 e0       	ldi	r17, 0x06	; 6
    60be:	9f 73       	andi	r25, 0x3F	; 63
    60c0:	99 2e       	mov	r9, r25
    60c2:	85 36       	cpi	r24, 0x65	; 101
    60c4:	19 f4       	brne	.+6      	; 0x60cc <vfprintf+0x152>
    60c6:	90 64       	ori	r25, 0x40	; 64
    60c8:	99 2e       	mov	r9, r25
    60ca:	08 c0       	rjmp	.+16     	; 0x60dc <vfprintf+0x162>
    60cc:	86 36       	cpi	r24, 0x66	; 102
    60ce:	21 f4       	brne	.+8      	; 0x60d8 <vfprintf+0x15e>
    60d0:	39 2f       	mov	r19, r25
    60d2:	30 68       	ori	r19, 0x80	; 128
    60d4:	93 2e       	mov	r9, r19
    60d6:	02 c0       	rjmp	.+4      	; 0x60dc <vfprintf+0x162>
    60d8:	11 11       	cpse	r17, r1
    60da:	11 50       	subi	r17, 0x01	; 1
    60dc:	97 fe       	sbrs	r9, 7
    60de:	07 c0       	rjmp	.+14     	; 0x60ee <vfprintf+0x174>
    60e0:	1c 33       	cpi	r17, 0x3C	; 60
    60e2:	50 f4       	brcc	.+20     	; 0x60f8 <vfprintf+0x17e>
    60e4:	44 24       	eor	r4, r4
    60e6:	43 94       	inc	r4
    60e8:	41 0e       	add	r4, r17
    60ea:	27 e0       	ldi	r18, 0x07	; 7
    60ec:	0b c0       	rjmp	.+22     	; 0x6104 <vfprintf+0x18a>
    60ee:	18 30       	cpi	r17, 0x08	; 8
    60f0:	38 f0       	brcs	.+14     	; 0x6100 <vfprintf+0x186>
    60f2:	27 e0       	ldi	r18, 0x07	; 7
    60f4:	17 e0       	ldi	r17, 0x07	; 7
    60f6:	05 c0       	rjmp	.+10     	; 0x6102 <vfprintf+0x188>
    60f8:	27 e0       	ldi	r18, 0x07	; 7
    60fa:	9c e3       	ldi	r25, 0x3C	; 60
    60fc:	49 2e       	mov	r4, r25
    60fe:	02 c0       	rjmp	.+4      	; 0x6104 <vfprintf+0x18a>
    6100:	21 2f       	mov	r18, r17
    6102:	41 2c       	mov	r4, r1
    6104:	56 01       	movw	r10, r12
    6106:	84 e0       	ldi	r24, 0x04	; 4
    6108:	a8 0e       	add	r10, r24
    610a:	b1 1c       	adc	r11, r1
    610c:	f6 01       	movw	r30, r12
    610e:	60 81       	ld	r22, Z
    6110:	71 81       	ldd	r23, Z+1	; 0x01
    6112:	82 81       	ldd	r24, Z+2	; 0x02
    6114:	93 81       	ldd	r25, Z+3	; 0x03
    6116:	04 2d       	mov	r16, r4
    6118:	a3 01       	movw	r20, r6
    611a:	3d d4       	rcall	.+2170   	; 0x6996 <__ftoa_engine>
    611c:	6c 01       	movw	r12, r24
    611e:	f9 81       	ldd	r31, Y+1	; 0x01
    6120:	fc 87       	std	Y+12, r31	; 0x0c
    6122:	f0 ff       	sbrs	r31, 0
    6124:	02 c0       	rjmp	.+4      	; 0x612a <vfprintf+0x1b0>
    6126:	f3 ff       	sbrs	r31, 3
    6128:	06 c0       	rjmp	.+12     	; 0x6136 <vfprintf+0x1bc>
    612a:	91 fc       	sbrc	r9, 1
    612c:	06 c0       	rjmp	.+12     	; 0x613a <vfprintf+0x1c0>
    612e:	92 fe       	sbrs	r9, 2
    6130:	06 c0       	rjmp	.+12     	; 0x613e <vfprintf+0x1c4>
    6132:	00 e2       	ldi	r16, 0x20	; 32
    6134:	05 c0       	rjmp	.+10     	; 0x6140 <vfprintf+0x1c6>
    6136:	0d e2       	ldi	r16, 0x2D	; 45
    6138:	03 c0       	rjmp	.+6      	; 0x6140 <vfprintf+0x1c6>
    613a:	0b e2       	ldi	r16, 0x2B	; 43
    613c:	01 c0       	rjmp	.+2      	; 0x6140 <vfprintf+0x1c6>
    613e:	00 e0       	ldi	r16, 0x00	; 0
    6140:	8c 85       	ldd	r24, Y+12	; 0x0c
    6142:	8c 70       	andi	r24, 0x0C	; 12
    6144:	19 f0       	breq	.+6      	; 0x614c <vfprintf+0x1d2>
    6146:	01 11       	cpse	r16, r1
    6148:	43 c2       	rjmp	.+1158   	; 0x65d0 <vfprintf+0x656>
    614a:	80 c2       	rjmp	.+1280   	; 0x664c <vfprintf+0x6d2>
    614c:	97 fe       	sbrs	r9, 7
    614e:	10 c0       	rjmp	.+32     	; 0x6170 <vfprintf+0x1f6>
    6150:	4c 0c       	add	r4, r12
    6152:	fc 85       	ldd	r31, Y+12	; 0x0c
    6154:	f4 ff       	sbrs	r31, 4
    6156:	04 c0       	rjmp	.+8      	; 0x6160 <vfprintf+0x1e6>
    6158:	8a 81       	ldd	r24, Y+2	; 0x02
    615a:	81 33       	cpi	r24, 0x31	; 49
    615c:	09 f4       	brne	.+2      	; 0x6160 <vfprintf+0x1e6>
    615e:	4a 94       	dec	r4
    6160:	14 14       	cp	r1, r4
    6162:	74 f5       	brge	.+92     	; 0x61c0 <vfprintf+0x246>
    6164:	28 e0       	ldi	r18, 0x08	; 8
    6166:	24 15       	cp	r18, r4
    6168:	78 f5       	brcc	.+94     	; 0x61c8 <vfprintf+0x24e>
    616a:	88 e0       	ldi	r24, 0x08	; 8
    616c:	48 2e       	mov	r4, r24
    616e:	2c c0       	rjmp	.+88     	; 0x61c8 <vfprintf+0x24e>
    6170:	96 fc       	sbrc	r9, 6
    6172:	2a c0       	rjmp	.+84     	; 0x61c8 <vfprintf+0x24e>
    6174:	81 2f       	mov	r24, r17
    6176:	90 e0       	ldi	r25, 0x00	; 0
    6178:	8c 15       	cp	r24, r12
    617a:	9d 05       	cpc	r25, r13
    617c:	9c f0       	brlt	.+38     	; 0x61a4 <vfprintf+0x22a>
    617e:	3c ef       	ldi	r19, 0xFC	; 252
    6180:	c3 16       	cp	r12, r19
    6182:	3f ef       	ldi	r19, 0xFF	; 255
    6184:	d3 06       	cpc	r13, r19
    6186:	74 f0       	brlt	.+28     	; 0x61a4 <vfprintf+0x22a>
    6188:	89 2d       	mov	r24, r9
    618a:	80 68       	ori	r24, 0x80	; 128
    618c:	98 2e       	mov	r9, r24
    618e:	0a c0       	rjmp	.+20     	; 0x61a4 <vfprintf+0x22a>
    6190:	e2 e0       	ldi	r30, 0x02	; 2
    6192:	f0 e0       	ldi	r31, 0x00	; 0
    6194:	ec 0f       	add	r30, r28
    6196:	fd 1f       	adc	r31, r29
    6198:	e1 0f       	add	r30, r17
    619a:	f1 1d       	adc	r31, r1
    619c:	80 81       	ld	r24, Z
    619e:	80 33       	cpi	r24, 0x30	; 48
    61a0:	19 f4       	brne	.+6      	; 0x61a8 <vfprintf+0x22e>
    61a2:	11 50       	subi	r17, 0x01	; 1
    61a4:	11 11       	cpse	r17, r1
    61a6:	f4 cf       	rjmp	.-24     	; 0x6190 <vfprintf+0x216>
    61a8:	97 fe       	sbrs	r9, 7
    61aa:	0e c0       	rjmp	.+28     	; 0x61c8 <vfprintf+0x24e>
    61ac:	44 24       	eor	r4, r4
    61ae:	43 94       	inc	r4
    61b0:	41 0e       	add	r4, r17
    61b2:	81 2f       	mov	r24, r17
    61b4:	90 e0       	ldi	r25, 0x00	; 0
    61b6:	c8 16       	cp	r12, r24
    61b8:	d9 06       	cpc	r13, r25
    61ba:	2c f4       	brge	.+10     	; 0x61c6 <vfprintf+0x24c>
    61bc:	1c 19       	sub	r17, r12
    61be:	04 c0       	rjmp	.+8      	; 0x61c8 <vfprintf+0x24e>
    61c0:	44 24       	eor	r4, r4
    61c2:	43 94       	inc	r4
    61c4:	01 c0       	rjmp	.+2      	; 0x61c8 <vfprintf+0x24e>
    61c6:	10 e0       	ldi	r17, 0x00	; 0
    61c8:	97 fe       	sbrs	r9, 7
    61ca:	06 c0       	rjmp	.+12     	; 0x61d8 <vfprintf+0x25e>
    61cc:	1c 14       	cp	r1, r12
    61ce:	1d 04       	cpc	r1, r13
    61d0:	34 f4       	brge	.+12     	; 0x61de <vfprintf+0x264>
    61d2:	c6 01       	movw	r24, r12
    61d4:	01 96       	adiw	r24, 0x01	; 1
    61d6:	05 c0       	rjmp	.+10     	; 0x61e2 <vfprintf+0x268>
    61d8:	85 e0       	ldi	r24, 0x05	; 5
    61da:	90 e0       	ldi	r25, 0x00	; 0
    61dc:	02 c0       	rjmp	.+4      	; 0x61e2 <vfprintf+0x268>
    61de:	81 e0       	ldi	r24, 0x01	; 1
    61e0:	90 e0       	ldi	r25, 0x00	; 0
    61e2:	01 11       	cpse	r16, r1
    61e4:	01 96       	adiw	r24, 0x01	; 1
    61e6:	11 23       	and	r17, r17
    61e8:	31 f0       	breq	.+12     	; 0x61f6 <vfprintf+0x27c>
    61ea:	21 2f       	mov	r18, r17
    61ec:	30 e0       	ldi	r19, 0x00	; 0
    61ee:	2f 5f       	subi	r18, 0xFF	; 255
    61f0:	3f 4f       	sbci	r19, 0xFF	; 255
    61f2:	82 0f       	add	r24, r18
    61f4:	93 1f       	adc	r25, r19
    61f6:	25 2d       	mov	r18, r5
    61f8:	30 e0       	ldi	r19, 0x00	; 0
    61fa:	82 17       	cp	r24, r18
    61fc:	93 07       	cpc	r25, r19
    61fe:	14 f4       	brge	.+4      	; 0x6204 <vfprintf+0x28a>
    6200:	58 1a       	sub	r5, r24
    6202:	01 c0       	rjmp	.+2      	; 0x6206 <vfprintf+0x28c>
    6204:	51 2c       	mov	r5, r1
    6206:	89 2d       	mov	r24, r9
    6208:	89 70       	andi	r24, 0x09	; 9
    620a:	41 f4       	brne	.+16     	; 0x621c <vfprintf+0x2a2>
    620c:	55 20       	and	r5, r5
    620e:	31 f0       	breq	.+12     	; 0x621c <vfprintf+0x2a2>
    6210:	b7 01       	movw	r22, r14
    6212:	80 e2       	ldi	r24, 0x20	; 32
    6214:	90 e0       	ldi	r25, 0x00	; 0
    6216:	0c d5       	rcall	.+2584   	; 0x6c30 <fputc>
    6218:	5a 94       	dec	r5
    621a:	f8 cf       	rjmp	.-16     	; 0x620c <vfprintf+0x292>
    621c:	00 23       	and	r16, r16
    621e:	21 f0       	breq	.+8      	; 0x6228 <vfprintf+0x2ae>
    6220:	b7 01       	movw	r22, r14
    6222:	80 2f       	mov	r24, r16
    6224:	90 e0       	ldi	r25, 0x00	; 0
    6226:	04 d5       	rcall	.+2568   	; 0x6c30 <fputc>
    6228:	93 fc       	sbrc	r9, 3
    622a:	08 c0       	rjmp	.+16     	; 0x623c <vfprintf+0x2c2>
    622c:	55 20       	and	r5, r5
    622e:	31 f0       	breq	.+12     	; 0x623c <vfprintf+0x2c2>
    6230:	b7 01       	movw	r22, r14
    6232:	80 e3       	ldi	r24, 0x30	; 48
    6234:	90 e0       	ldi	r25, 0x00	; 0
    6236:	fc d4       	rcall	.+2552   	; 0x6c30 <fputc>
    6238:	5a 94       	dec	r5
    623a:	f8 cf       	rjmp	.-16     	; 0x622c <vfprintf+0x2b2>
    623c:	97 fe       	sbrs	r9, 7
    623e:	4a c0       	rjmp	.+148    	; 0x62d4 <vfprintf+0x35a>
    6240:	46 01       	movw	r8, r12
    6242:	d7 fe       	sbrs	r13, 7
    6244:	02 c0       	rjmp	.+4      	; 0x624a <vfprintf+0x2d0>
    6246:	81 2c       	mov	r8, r1
    6248:	91 2c       	mov	r9, r1
    624a:	c6 01       	movw	r24, r12
    624c:	88 19       	sub	r24, r8
    624e:	99 09       	sbc	r25, r9
    6250:	f3 01       	movw	r30, r6
    6252:	e8 0f       	add	r30, r24
    6254:	f9 1f       	adc	r31, r25
    6256:	fe 87       	std	Y+14, r31	; 0x0e
    6258:	ed 87       	std	Y+13, r30	; 0x0d
    625a:	96 01       	movw	r18, r12
    625c:	24 19       	sub	r18, r4
    625e:	31 09       	sbc	r19, r1
    6260:	38 8b       	std	Y+16, r19	; 0x10
    6262:	2f 87       	std	Y+15, r18	; 0x0f
    6264:	01 2f       	mov	r16, r17
    6266:	10 e0       	ldi	r17, 0x00	; 0
    6268:	11 95       	neg	r17
    626a:	01 95       	neg	r16
    626c:	11 09       	sbc	r17, r1
    626e:	3f ef       	ldi	r19, 0xFF	; 255
    6270:	83 16       	cp	r8, r19
    6272:	93 06       	cpc	r9, r19
    6274:	21 f4       	brne	.+8      	; 0x627e <vfprintf+0x304>
    6276:	b7 01       	movw	r22, r14
    6278:	8e e2       	ldi	r24, 0x2E	; 46
    627a:	90 e0       	ldi	r25, 0x00	; 0
    627c:	d9 d4       	rcall	.+2482   	; 0x6c30 <fputc>
    627e:	c8 14       	cp	r12, r8
    6280:	d9 04       	cpc	r13, r9
    6282:	4c f0       	brlt	.+18     	; 0x6296 <vfprintf+0x31c>
    6284:	8f 85       	ldd	r24, Y+15	; 0x0f
    6286:	98 89       	ldd	r25, Y+16	; 0x10
    6288:	88 15       	cp	r24, r8
    628a:	99 05       	cpc	r25, r9
    628c:	24 f4       	brge	.+8      	; 0x6296 <vfprintf+0x31c>
    628e:	ed 85       	ldd	r30, Y+13	; 0x0d
    6290:	fe 85       	ldd	r31, Y+14	; 0x0e
    6292:	81 81       	ldd	r24, Z+1	; 0x01
    6294:	01 c0       	rjmp	.+2      	; 0x6298 <vfprintf+0x31e>
    6296:	80 e3       	ldi	r24, 0x30	; 48
    6298:	f1 e0       	ldi	r31, 0x01	; 1
    629a:	8f 1a       	sub	r8, r31
    629c:	91 08       	sbc	r9, r1
    629e:	2d 85       	ldd	r18, Y+13	; 0x0d
    62a0:	3e 85       	ldd	r19, Y+14	; 0x0e
    62a2:	2f 5f       	subi	r18, 0xFF	; 255
    62a4:	3f 4f       	sbci	r19, 0xFF	; 255
    62a6:	3e 87       	std	Y+14, r19	; 0x0e
    62a8:	2d 87       	std	Y+13, r18	; 0x0d
    62aa:	80 16       	cp	r8, r16
    62ac:	91 06       	cpc	r9, r17
    62ae:	24 f0       	brlt	.+8      	; 0x62b8 <vfprintf+0x33e>
    62b0:	b7 01       	movw	r22, r14
    62b2:	90 e0       	ldi	r25, 0x00	; 0
    62b4:	bd d4       	rcall	.+2426   	; 0x6c30 <fputc>
    62b6:	db cf       	rjmp	.-74     	; 0x626e <vfprintf+0x2f4>
    62b8:	c8 14       	cp	r12, r8
    62ba:	d9 04       	cpc	r13, r9
    62bc:	41 f4       	brne	.+16     	; 0x62ce <vfprintf+0x354>
    62be:	9a 81       	ldd	r25, Y+2	; 0x02
    62c0:	96 33       	cpi	r25, 0x36	; 54
    62c2:	20 f4       	brcc	.+8      	; 0x62cc <vfprintf+0x352>
    62c4:	95 33       	cpi	r25, 0x35	; 53
    62c6:	19 f4       	brne	.+6      	; 0x62ce <vfprintf+0x354>
    62c8:	3c 85       	ldd	r19, Y+12	; 0x0c
    62ca:	34 ff       	sbrs	r19, 4
    62cc:	81 e3       	ldi	r24, 0x31	; 49
    62ce:	b7 01       	movw	r22, r14
    62d0:	90 e0       	ldi	r25, 0x00	; 0
    62d2:	48 c0       	rjmp	.+144    	; 0x6364 <vfprintf+0x3ea>
    62d4:	8a 81       	ldd	r24, Y+2	; 0x02
    62d6:	81 33       	cpi	r24, 0x31	; 49
    62d8:	19 f0       	breq	.+6      	; 0x62e0 <vfprintf+0x366>
    62da:	9c 85       	ldd	r25, Y+12	; 0x0c
    62dc:	9f 7e       	andi	r25, 0xEF	; 239
    62de:	9c 87       	std	Y+12, r25	; 0x0c
    62e0:	b7 01       	movw	r22, r14
    62e2:	90 e0       	ldi	r25, 0x00	; 0
    62e4:	a5 d4       	rcall	.+2378   	; 0x6c30 <fputc>
    62e6:	11 11       	cpse	r17, r1
    62e8:	05 c0       	rjmp	.+10     	; 0x62f4 <vfprintf+0x37a>
    62ea:	94 fc       	sbrc	r9, 4
    62ec:	16 c0       	rjmp	.+44     	; 0x631a <vfprintf+0x3a0>
    62ee:	85 e6       	ldi	r24, 0x65	; 101
    62f0:	90 e0       	ldi	r25, 0x00	; 0
    62f2:	15 c0       	rjmp	.+42     	; 0x631e <vfprintf+0x3a4>
    62f4:	b7 01       	movw	r22, r14
    62f6:	8e e2       	ldi	r24, 0x2E	; 46
    62f8:	90 e0       	ldi	r25, 0x00	; 0
    62fa:	9a d4       	rcall	.+2356   	; 0x6c30 <fputc>
    62fc:	1e 5f       	subi	r17, 0xFE	; 254
    62fe:	82 e0       	ldi	r24, 0x02	; 2
    6300:	01 e0       	ldi	r16, 0x01	; 1
    6302:	08 0f       	add	r16, r24
    6304:	f3 01       	movw	r30, r6
    6306:	e8 0f       	add	r30, r24
    6308:	f1 1d       	adc	r31, r1
    630a:	80 81       	ld	r24, Z
    630c:	b7 01       	movw	r22, r14
    630e:	90 e0       	ldi	r25, 0x00	; 0
    6310:	8f d4       	rcall	.+2334   	; 0x6c30 <fputc>
    6312:	80 2f       	mov	r24, r16
    6314:	01 13       	cpse	r16, r17
    6316:	f4 cf       	rjmp	.-24     	; 0x6300 <vfprintf+0x386>
    6318:	e8 cf       	rjmp	.-48     	; 0x62ea <vfprintf+0x370>
    631a:	85 e4       	ldi	r24, 0x45	; 69
    631c:	90 e0       	ldi	r25, 0x00	; 0
    631e:	b7 01       	movw	r22, r14
    6320:	87 d4       	rcall	.+2318   	; 0x6c30 <fputc>
    6322:	d7 fc       	sbrc	r13, 7
    6324:	06 c0       	rjmp	.+12     	; 0x6332 <vfprintf+0x3b8>
    6326:	c1 14       	cp	r12, r1
    6328:	d1 04       	cpc	r13, r1
    632a:	41 f4       	brne	.+16     	; 0x633c <vfprintf+0x3c2>
    632c:	ec 85       	ldd	r30, Y+12	; 0x0c
    632e:	e4 ff       	sbrs	r30, 4
    6330:	05 c0       	rjmp	.+10     	; 0x633c <vfprintf+0x3c2>
    6332:	d1 94       	neg	r13
    6334:	c1 94       	neg	r12
    6336:	d1 08       	sbc	r13, r1
    6338:	8d e2       	ldi	r24, 0x2D	; 45
    633a:	01 c0       	rjmp	.+2      	; 0x633e <vfprintf+0x3c4>
    633c:	8b e2       	ldi	r24, 0x2B	; 43
    633e:	b7 01       	movw	r22, r14
    6340:	90 e0       	ldi	r25, 0x00	; 0
    6342:	76 d4       	rcall	.+2284   	; 0x6c30 <fputc>
    6344:	80 e3       	ldi	r24, 0x30	; 48
    6346:	2a e0       	ldi	r18, 0x0A	; 10
    6348:	c2 16       	cp	r12, r18
    634a:	d1 04       	cpc	r13, r1
    634c:	2c f0       	brlt	.+10     	; 0x6358 <vfprintf+0x3de>
    634e:	8f 5f       	subi	r24, 0xFF	; 255
    6350:	fa e0       	ldi	r31, 0x0A	; 10
    6352:	cf 1a       	sub	r12, r31
    6354:	d1 08       	sbc	r13, r1
    6356:	f7 cf       	rjmp	.-18     	; 0x6346 <vfprintf+0x3cc>
    6358:	b7 01       	movw	r22, r14
    635a:	90 e0       	ldi	r25, 0x00	; 0
    635c:	69 d4       	rcall	.+2258   	; 0x6c30 <fputc>
    635e:	b7 01       	movw	r22, r14
    6360:	c6 01       	movw	r24, r12
    6362:	c0 96       	adiw	r24, 0x30	; 48
    6364:	65 d4       	rcall	.+2250   	; 0x6c30 <fputc>
    6366:	49 c1       	rjmp	.+658    	; 0x65fa <vfprintf+0x680>
    6368:	83 36       	cpi	r24, 0x63	; 99
    636a:	31 f0       	breq	.+12     	; 0x6378 <vfprintf+0x3fe>
    636c:	83 37       	cpi	r24, 0x73	; 115
    636e:	79 f0       	breq	.+30     	; 0x638e <vfprintf+0x414>
    6370:	83 35       	cpi	r24, 0x53	; 83
    6372:	09 f0       	breq	.+2      	; 0x6376 <vfprintf+0x3fc>
    6374:	52 c0       	rjmp	.+164    	; 0x641a <vfprintf+0x4a0>
    6376:	1f c0       	rjmp	.+62     	; 0x63b6 <vfprintf+0x43c>
    6378:	56 01       	movw	r10, r12
    637a:	32 e0       	ldi	r19, 0x02	; 2
    637c:	a3 0e       	add	r10, r19
    637e:	b1 1c       	adc	r11, r1
    6380:	f6 01       	movw	r30, r12
    6382:	80 81       	ld	r24, Z
    6384:	89 83       	std	Y+1, r24	; 0x01
    6386:	01 e0       	ldi	r16, 0x01	; 1
    6388:	10 e0       	ldi	r17, 0x00	; 0
    638a:	63 01       	movw	r12, r6
    638c:	11 c0       	rjmp	.+34     	; 0x63b0 <vfprintf+0x436>
    638e:	56 01       	movw	r10, r12
    6390:	f2 e0       	ldi	r31, 0x02	; 2
    6392:	af 0e       	add	r10, r31
    6394:	b1 1c       	adc	r11, r1
    6396:	f6 01       	movw	r30, r12
    6398:	c0 80       	ld	r12, Z
    639a:	d1 80       	ldd	r13, Z+1	; 0x01
    639c:	96 fe       	sbrs	r9, 6
    639e:	03 c0       	rjmp	.+6      	; 0x63a6 <vfprintf+0x42c>
    63a0:	61 2f       	mov	r22, r17
    63a2:	70 e0       	ldi	r23, 0x00	; 0
    63a4:	02 c0       	rjmp	.+4      	; 0x63aa <vfprintf+0x430>
    63a6:	6f ef       	ldi	r22, 0xFF	; 255
    63a8:	7f ef       	ldi	r23, 0xFF	; 255
    63aa:	c6 01       	movw	r24, r12
    63ac:	36 d4       	rcall	.+2156   	; 0x6c1a <strnlen>
    63ae:	8c 01       	movw	r16, r24
    63b0:	f9 2d       	mov	r31, r9
    63b2:	ff 77       	andi	r31, 0x7F	; 127
    63b4:	13 c0       	rjmp	.+38     	; 0x63dc <vfprintf+0x462>
    63b6:	56 01       	movw	r10, r12
    63b8:	22 e0       	ldi	r18, 0x02	; 2
    63ba:	a2 0e       	add	r10, r18
    63bc:	b1 1c       	adc	r11, r1
    63be:	f6 01       	movw	r30, r12
    63c0:	c0 80       	ld	r12, Z
    63c2:	d1 80       	ldd	r13, Z+1	; 0x01
    63c4:	96 fe       	sbrs	r9, 6
    63c6:	03 c0       	rjmp	.+6      	; 0x63ce <vfprintf+0x454>
    63c8:	61 2f       	mov	r22, r17
    63ca:	70 e0       	ldi	r23, 0x00	; 0
    63cc:	02 c0       	rjmp	.+4      	; 0x63d2 <vfprintf+0x458>
    63ce:	6f ef       	ldi	r22, 0xFF	; 255
    63d0:	7f ef       	ldi	r23, 0xFF	; 255
    63d2:	c6 01       	movw	r24, r12
    63d4:	b8 d3       	rcall	.+1904   	; 0x6b46 <strnlen_P>
    63d6:	8c 01       	movw	r16, r24
    63d8:	f9 2d       	mov	r31, r9
    63da:	f0 68       	ori	r31, 0x80	; 128
    63dc:	9f 2e       	mov	r9, r31
    63de:	f3 fd       	sbrc	r31, 3
    63e0:	18 c0       	rjmp	.+48     	; 0x6412 <vfprintf+0x498>
    63e2:	85 2d       	mov	r24, r5
    63e4:	90 e0       	ldi	r25, 0x00	; 0
    63e6:	08 17       	cp	r16, r24
    63e8:	19 07       	cpc	r17, r25
    63ea:	98 f4       	brcc	.+38     	; 0x6412 <vfprintf+0x498>
    63ec:	b7 01       	movw	r22, r14
    63ee:	80 e2       	ldi	r24, 0x20	; 32
    63f0:	90 e0       	ldi	r25, 0x00	; 0
    63f2:	1e d4       	rcall	.+2108   	; 0x6c30 <fputc>
    63f4:	5a 94       	dec	r5
    63f6:	f5 cf       	rjmp	.-22     	; 0x63e2 <vfprintf+0x468>
    63f8:	f6 01       	movw	r30, r12
    63fa:	97 fc       	sbrc	r9, 7
    63fc:	85 91       	lpm	r24, Z+
    63fe:	97 fe       	sbrs	r9, 7
    6400:	81 91       	ld	r24, Z+
    6402:	6f 01       	movw	r12, r30
    6404:	b7 01       	movw	r22, r14
    6406:	90 e0       	ldi	r25, 0x00	; 0
    6408:	13 d4       	rcall	.+2086   	; 0x6c30 <fputc>
    640a:	51 10       	cpse	r5, r1
    640c:	5a 94       	dec	r5
    640e:	01 50       	subi	r16, 0x01	; 1
    6410:	11 09       	sbc	r17, r1
    6412:	01 15       	cp	r16, r1
    6414:	11 05       	cpc	r17, r1
    6416:	81 f7       	brne	.-32     	; 0x63f8 <vfprintf+0x47e>
    6418:	f0 c0       	rjmp	.+480    	; 0x65fa <vfprintf+0x680>
    641a:	84 36       	cpi	r24, 0x64	; 100
    641c:	11 f0       	breq	.+4      	; 0x6422 <vfprintf+0x4a8>
    641e:	89 36       	cpi	r24, 0x69	; 105
    6420:	59 f5       	brne	.+86     	; 0x6478 <vfprintf+0x4fe>
    6422:	56 01       	movw	r10, r12
    6424:	97 fe       	sbrs	r9, 7
    6426:	09 c0       	rjmp	.+18     	; 0x643a <vfprintf+0x4c0>
    6428:	24 e0       	ldi	r18, 0x04	; 4
    642a:	a2 0e       	add	r10, r18
    642c:	b1 1c       	adc	r11, r1
    642e:	f6 01       	movw	r30, r12
    6430:	60 81       	ld	r22, Z
    6432:	71 81       	ldd	r23, Z+1	; 0x01
    6434:	82 81       	ldd	r24, Z+2	; 0x02
    6436:	93 81       	ldd	r25, Z+3	; 0x03
    6438:	0a c0       	rjmp	.+20     	; 0x644e <vfprintf+0x4d4>
    643a:	f2 e0       	ldi	r31, 0x02	; 2
    643c:	af 0e       	add	r10, r31
    643e:	b1 1c       	adc	r11, r1
    6440:	f6 01       	movw	r30, r12
    6442:	60 81       	ld	r22, Z
    6444:	71 81       	ldd	r23, Z+1	; 0x01
    6446:	07 2e       	mov	r0, r23
    6448:	00 0c       	add	r0, r0
    644a:	88 0b       	sbc	r24, r24
    644c:	99 0b       	sbc	r25, r25
    644e:	f9 2d       	mov	r31, r9
    6450:	ff 76       	andi	r31, 0x6F	; 111
    6452:	9f 2e       	mov	r9, r31
    6454:	97 ff       	sbrs	r25, 7
    6456:	09 c0       	rjmp	.+18     	; 0x646a <vfprintf+0x4f0>
    6458:	90 95       	com	r25
    645a:	80 95       	com	r24
    645c:	70 95       	com	r23
    645e:	61 95       	neg	r22
    6460:	7f 4f       	sbci	r23, 0xFF	; 255
    6462:	8f 4f       	sbci	r24, 0xFF	; 255
    6464:	9f 4f       	sbci	r25, 0xFF	; 255
    6466:	f0 68       	ori	r31, 0x80	; 128
    6468:	9f 2e       	mov	r9, r31
    646a:	2a e0       	ldi	r18, 0x0A	; 10
    646c:	30 e0       	ldi	r19, 0x00	; 0
    646e:	a3 01       	movw	r20, r6
    6470:	8c d4       	rcall	.+2328   	; 0x6d8a <__ultoa_invert>
    6472:	c8 2e       	mov	r12, r24
    6474:	c6 18       	sub	r12, r6
    6476:	3e c0       	rjmp	.+124    	; 0x64f4 <vfprintf+0x57a>
    6478:	09 2d       	mov	r16, r9
    647a:	85 37       	cpi	r24, 0x75	; 117
    647c:	21 f4       	brne	.+8      	; 0x6486 <vfprintf+0x50c>
    647e:	0f 7e       	andi	r16, 0xEF	; 239
    6480:	2a e0       	ldi	r18, 0x0A	; 10
    6482:	30 e0       	ldi	r19, 0x00	; 0
    6484:	1d c0       	rjmp	.+58     	; 0x64c0 <vfprintf+0x546>
    6486:	09 7f       	andi	r16, 0xF9	; 249
    6488:	8f 36       	cpi	r24, 0x6F	; 111
    648a:	91 f0       	breq	.+36     	; 0x64b0 <vfprintf+0x536>
    648c:	18 f4       	brcc	.+6      	; 0x6494 <vfprintf+0x51a>
    648e:	88 35       	cpi	r24, 0x58	; 88
    6490:	59 f0       	breq	.+22     	; 0x64a8 <vfprintf+0x52e>
    6492:	bc c0       	rjmp	.+376    	; 0x660c <vfprintf+0x692>
    6494:	80 37       	cpi	r24, 0x70	; 112
    6496:	19 f0       	breq	.+6      	; 0x649e <vfprintf+0x524>
    6498:	88 37       	cpi	r24, 0x78	; 120
    649a:	11 f0       	breq	.+4      	; 0x64a0 <vfprintf+0x526>
    649c:	b7 c0       	rjmp	.+366    	; 0x660c <vfprintf+0x692>
    649e:	00 61       	ori	r16, 0x10	; 16
    64a0:	04 ff       	sbrs	r16, 4
    64a2:	09 c0       	rjmp	.+18     	; 0x64b6 <vfprintf+0x53c>
    64a4:	04 60       	ori	r16, 0x04	; 4
    64a6:	07 c0       	rjmp	.+14     	; 0x64b6 <vfprintf+0x53c>
    64a8:	94 fe       	sbrs	r9, 4
    64aa:	08 c0       	rjmp	.+16     	; 0x64bc <vfprintf+0x542>
    64ac:	06 60       	ori	r16, 0x06	; 6
    64ae:	06 c0       	rjmp	.+12     	; 0x64bc <vfprintf+0x542>
    64b0:	28 e0       	ldi	r18, 0x08	; 8
    64b2:	30 e0       	ldi	r19, 0x00	; 0
    64b4:	05 c0       	rjmp	.+10     	; 0x64c0 <vfprintf+0x546>
    64b6:	20 e1       	ldi	r18, 0x10	; 16
    64b8:	30 e0       	ldi	r19, 0x00	; 0
    64ba:	02 c0       	rjmp	.+4      	; 0x64c0 <vfprintf+0x546>
    64bc:	20 e1       	ldi	r18, 0x10	; 16
    64be:	32 e0       	ldi	r19, 0x02	; 2
    64c0:	56 01       	movw	r10, r12
    64c2:	07 ff       	sbrs	r16, 7
    64c4:	09 c0       	rjmp	.+18     	; 0x64d8 <vfprintf+0x55e>
    64c6:	84 e0       	ldi	r24, 0x04	; 4
    64c8:	a8 0e       	add	r10, r24
    64ca:	b1 1c       	adc	r11, r1
    64cc:	f6 01       	movw	r30, r12
    64ce:	60 81       	ld	r22, Z
    64d0:	71 81       	ldd	r23, Z+1	; 0x01
    64d2:	82 81       	ldd	r24, Z+2	; 0x02
    64d4:	93 81       	ldd	r25, Z+3	; 0x03
    64d6:	08 c0       	rjmp	.+16     	; 0x64e8 <vfprintf+0x56e>
    64d8:	f2 e0       	ldi	r31, 0x02	; 2
    64da:	af 0e       	add	r10, r31
    64dc:	b1 1c       	adc	r11, r1
    64de:	f6 01       	movw	r30, r12
    64e0:	60 81       	ld	r22, Z
    64e2:	71 81       	ldd	r23, Z+1	; 0x01
    64e4:	80 e0       	ldi	r24, 0x00	; 0
    64e6:	90 e0       	ldi	r25, 0x00	; 0
    64e8:	a3 01       	movw	r20, r6
    64ea:	4f d4       	rcall	.+2206   	; 0x6d8a <__ultoa_invert>
    64ec:	c8 2e       	mov	r12, r24
    64ee:	c6 18       	sub	r12, r6
    64f0:	0f 77       	andi	r16, 0x7F	; 127
    64f2:	90 2e       	mov	r9, r16
    64f4:	96 fe       	sbrs	r9, 6
    64f6:	0b c0       	rjmp	.+22     	; 0x650e <vfprintf+0x594>
    64f8:	09 2d       	mov	r16, r9
    64fa:	0e 7f       	andi	r16, 0xFE	; 254
    64fc:	c1 16       	cp	r12, r17
    64fe:	50 f4       	brcc	.+20     	; 0x6514 <vfprintf+0x59a>
    6500:	94 fe       	sbrs	r9, 4
    6502:	0a c0       	rjmp	.+20     	; 0x6518 <vfprintf+0x59e>
    6504:	92 fc       	sbrc	r9, 2
    6506:	08 c0       	rjmp	.+16     	; 0x6518 <vfprintf+0x59e>
    6508:	09 2d       	mov	r16, r9
    650a:	0e 7e       	andi	r16, 0xEE	; 238
    650c:	05 c0       	rjmp	.+10     	; 0x6518 <vfprintf+0x59e>
    650e:	dc 2c       	mov	r13, r12
    6510:	09 2d       	mov	r16, r9
    6512:	03 c0       	rjmp	.+6      	; 0x651a <vfprintf+0x5a0>
    6514:	dc 2c       	mov	r13, r12
    6516:	01 c0       	rjmp	.+2      	; 0x651a <vfprintf+0x5a0>
    6518:	d1 2e       	mov	r13, r17
    651a:	04 ff       	sbrs	r16, 4
    651c:	0d c0       	rjmp	.+26     	; 0x6538 <vfprintf+0x5be>
    651e:	fe 01       	movw	r30, r28
    6520:	ec 0d       	add	r30, r12
    6522:	f1 1d       	adc	r31, r1
    6524:	80 81       	ld	r24, Z
    6526:	80 33       	cpi	r24, 0x30	; 48
    6528:	11 f4       	brne	.+4      	; 0x652e <vfprintf+0x5b4>
    652a:	09 7e       	andi	r16, 0xE9	; 233
    652c:	09 c0       	rjmp	.+18     	; 0x6540 <vfprintf+0x5c6>
    652e:	02 ff       	sbrs	r16, 2
    6530:	06 c0       	rjmp	.+12     	; 0x653e <vfprintf+0x5c4>
    6532:	d3 94       	inc	r13
    6534:	d3 94       	inc	r13
    6536:	04 c0       	rjmp	.+8      	; 0x6540 <vfprintf+0x5c6>
    6538:	80 2f       	mov	r24, r16
    653a:	86 78       	andi	r24, 0x86	; 134
    653c:	09 f0       	breq	.+2      	; 0x6540 <vfprintf+0x5c6>
    653e:	d3 94       	inc	r13
    6540:	03 fd       	sbrc	r16, 3
    6542:	10 c0       	rjmp	.+32     	; 0x6564 <vfprintf+0x5ea>
    6544:	00 ff       	sbrs	r16, 0
    6546:	06 c0       	rjmp	.+12     	; 0x6554 <vfprintf+0x5da>
    6548:	1c 2d       	mov	r17, r12
    654a:	d5 14       	cp	r13, r5
    654c:	78 f4       	brcc	.+30     	; 0x656c <vfprintf+0x5f2>
    654e:	15 0d       	add	r17, r5
    6550:	1d 19       	sub	r17, r13
    6552:	0c c0       	rjmp	.+24     	; 0x656c <vfprintf+0x5f2>
    6554:	d5 14       	cp	r13, r5
    6556:	50 f4       	brcc	.+20     	; 0x656c <vfprintf+0x5f2>
    6558:	b7 01       	movw	r22, r14
    655a:	80 e2       	ldi	r24, 0x20	; 32
    655c:	90 e0       	ldi	r25, 0x00	; 0
    655e:	68 d3       	rcall	.+1744   	; 0x6c30 <fputc>
    6560:	d3 94       	inc	r13
    6562:	f8 cf       	rjmp	.-16     	; 0x6554 <vfprintf+0x5da>
    6564:	d5 14       	cp	r13, r5
    6566:	10 f4       	brcc	.+4      	; 0x656c <vfprintf+0x5f2>
    6568:	5d 18       	sub	r5, r13
    656a:	01 c0       	rjmp	.+2      	; 0x656e <vfprintf+0x5f4>
    656c:	51 2c       	mov	r5, r1
    656e:	04 ff       	sbrs	r16, 4
    6570:	0f c0       	rjmp	.+30     	; 0x6590 <vfprintf+0x616>
    6572:	b7 01       	movw	r22, r14
    6574:	80 e3       	ldi	r24, 0x30	; 48
    6576:	90 e0       	ldi	r25, 0x00	; 0
    6578:	5b d3       	rcall	.+1718   	; 0x6c30 <fputc>
    657a:	02 ff       	sbrs	r16, 2
    657c:	16 c0       	rjmp	.+44     	; 0x65aa <vfprintf+0x630>
    657e:	01 fd       	sbrc	r16, 1
    6580:	03 c0       	rjmp	.+6      	; 0x6588 <vfprintf+0x60e>
    6582:	88 e7       	ldi	r24, 0x78	; 120
    6584:	90 e0       	ldi	r25, 0x00	; 0
    6586:	02 c0       	rjmp	.+4      	; 0x658c <vfprintf+0x612>
    6588:	88 e5       	ldi	r24, 0x58	; 88
    658a:	90 e0       	ldi	r25, 0x00	; 0
    658c:	b7 01       	movw	r22, r14
    658e:	0c c0       	rjmp	.+24     	; 0x65a8 <vfprintf+0x62e>
    6590:	80 2f       	mov	r24, r16
    6592:	86 78       	andi	r24, 0x86	; 134
    6594:	51 f0       	breq	.+20     	; 0x65aa <vfprintf+0x630>
    6596:	01 ff       	sbrs	r16, 1
    6598:	02 c0       	rjmp	.+4      	; 0x659e <vfprintf+0x624>
    659a:	8b e2       	ldi	r24, 0x2B	; 43
    659c:	01 c0       	rjmp	.+2      	; 0x65a0 <vfprintf+0x626>
    659e:	80 e2       	ldi	r24, 0x20	; 32
    65a0:	07 fd       	sbrc	r16, 7
    65a2:	8d e2       	ldi	r24, 0x2D	; 45
    65a4:	b7 01       	movw	r22, r14
    65a6:	90 e0       	ldi	r25, 0x00	; 0
    65a8:	43 d3       	rcall	.+1670   	; 0x6c30 <fputc>
    65aa:	c1 16       	cp	r12, r17
    65ac:	30 f4       	brcc	.+12     	; 0x65ba <vfprintf+0x640>
    65ae:	b7 01       	movw	r22, r14
    65b0:	80 e3       	ldi	r24, 0x30	; 48
    65b2:	90 e0       	ldi	r25, 0x00	; 0
    65b4:	3d d3       	rcall	.+1658   	; 0x6c30 <fputc>
    65b6:	11 50       	subi	r17, 0x01	; 1
    65b8:	f8 cf       	rjmp	.-16     	; 0x65aa <vfprintf+0x630>
    65ba:	ca 94       	dec	r12
    65bc:	f3 01       	movw	r30, r6
    65be:	ec 0d       	add	r30, r12
    65c0:	f1 1d       	adc	r31, r1
    65c2:	80 81       	ld	r24, Z
    65c4:	b7 01       	movw	r22, r14
    65c6:	90 e0       	ldi	r25, 0x00	; 0
    65c8:	33 d3       	rcall	.+1638   	; 0x6c30 <fputc>
    65ca:	c1 10       	cpse	r12, r1
    65cc:	f6 cf       	rjmp	.-20     	; 0x65ba <vfprintf+0x640>
    65ce:	15 c0       	rjmp	.+42     	; 0x65fa <vfprintf+0x680>
    65d0:	f4 e0       	ldi	r31, 0x04	; 4
    65d2:	f5 15       	cp	r31, r5
    65d4:	50 f5       	brcc	.+84     	; 0x662a <vfprintf+0x6b0>
    65d6:	84 e0       	ldi	r24, 0x04	; 4
    65d8:	58 1a       	sub	r5, r24
    65da:	93 fe       	sbrs	r9, 3
    65dc:	1e c0       	rjmp	.+60     	; 0x661a <vfprintf+0x6a0>
    65de:	01 11       	cpse	r16, r1
    65e0:	25 c0       	rjmp	.+74     	; 0x662c <vfprintf+0x6b2>
    65e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    65e4:	23 ff       	sbrs	r18, 3
    65e6:	27 c0       	rjmp	.+78     	; 0x6636 <vfprintf+0x6bc>
    65e8:	0a e9       	ldi	r16, 0x9A	; 154
    65ea:	11 e0       	ldi	r17, 0x01	; 1
    65ec:	39 2d       	mov	r19, r9
    65ee:	30 71       	andi	r19, 0x10	; 16
    65f0:	93 2e       	mov	r9, r19
    65f2:	f8 01       	movw	r30, r16
    65f4:	84 91       	lpm	r24, Z
    65f6:	81 11       	cpse	r24, r1
    65f8:	21 c0       	rjmp	.+66     	; 0x663c <vfprintf+0x6c2>
    65fa:	55 20       	and	r5, r5
    65fc:	09 f4       	brne	.+2      	; 0x6600 <vfprintf+0x686>
    65fe:	fc cc       	rjmp	.-1544   	; 0x5ff8 <vfprintf+0x7e>
    6600:	b7 01       	movw	r22, r14
    6602:	80 e2       	ldi	r24, 0x20	; 32
    6604:	90 e0       	ldi	r25, 0x00	; 0
    6606:	14 d3       	rcall	.+1576   	; 0x6c30 <fputc>
    6608:	5a 94       	dec	r5
    660a:	f7 cf       	rjmp	.-18     	; 0x65fa <vfprintf+0x680>
    660c:	f7 01       	movw	r30, r14
    660e:	86 81       	ldd	r24, Z+6	; 0x06
    6610:	97 81       	ldd	r25, Z+7	; 0x07
    6612:	23 c0       	rjmp	.+70     	; 0x665a <vfprintf+0x6e0>
    6614:	8f ef       	ldi	r24, 0xFF	; 255
    6616:	9f ef       	ldi	r25, 0xFF	; 255
    6618:	20 c0       	rjmp	.+64     	; 0x665a <vfprintf+0x6e0>
    661a:	b7 01       	movw	r22, r14
    661c:	80 e2       	ldi	r24, 0x20	; 32
    661e:	90 e0       	ldi	r25, 0x00	; 0
    6620:	07 d3       	rcall	.+1550   	; 0x6c30 <fputc>
    6622:	5a 94       	dec	r5
    6624:	51 10       	cpse	r5, r1
    6626:	f9 cf       	rjmp	.-14     	; 0x661a <vfprintf+0x6a0>
    6628:	da cf       	rjmp	.-76     	; 0x65de <vfprintf+0x664>
    662a:	51 2c       	mov	r5, r1
    662c:	b7 01       	movw	r22, r14
    662e:	80 2f       	mov	r24, r16
    6630:	90 e0       	ldi	r25, 0x00	; 0
    6632:	fe d2       	rcall	.+1532   	; 0x6c30 <fputc>
    6634:	d6 cf       	rjmp	.-84     	; 0x65e2 <vfprintf+0x668>
    6636:	0e e9       	ldi	r16, 0x9E	; 158
    6638:	11 e0       	ldi	r17, 0x01	; 1
    663a:	d8 cf       	rjmp	.-80     	; 0x65ec <vfprintf+0x672>
    663c:	91 10       	cpse	r9, r1
    663e:	80 52       	subi	r24, 0x20	; 32
    6640:	b7 01       	movw	r22, r14
    6642:	90 e0       	ldi	r25, 0x00	; 0
    6644:	f5 d2       	rcall	.+1514   	; 0x6c30 <fputc>
    6646:	0f 5f       	subi	r16, 0xFF	; 255
    6648:	1f 4f       	sbci	r17, 0xFF	; 255
    664a:	d3 cf       	rjmp	.-90     	; 0x65f2 <vfprintf+0x678>
    664c:	23 e0       	ldi	r18, 0x03	; 3
    664e:	25 15       	cp	r18, r5
    6650:	10 f4       	brcc	.+4      	; 0x6656 <vfprintf+0x6dc>
    6652:	83 e0       	ldi	r24, 0x03	; 3
    6654:	c1 cf       	rjmp	.-126    	; 0x65d8 <vfprintf+0x65e>
    6656:	51 2c       	mov	r5, r1
    6658:	c4 cf       	rjmp	.-120    	; 0x65e2 <vfprintf+0x668>
    665a:	60 96       	adiw	r28, 0x10	; 16
    665c:	0f b6       	in	r0, 0x3f	; 63
    665e:	f8 94       	cli
    6660:	de bf       	out	0x3e, r29	; 62
    6662:	0f be       	out	0x3f, r0	; 63
    6664:	cd bf       	out	0x3d, r28	; 61
    6666:	df 91       	pop	r29
    6668:	cf 91       	pop	r28
    666a:	1f 91       	pop	r17
    666c:	0f 91       	pop	r16
    666e:	ff 90       	pop	r15
    6670:	ef 90       	pop	r14
    6672:	df 90       	pop	r13
    6674:	cf 90       	pop	r12
    6676:	bf 90       	pop	r11
    6678:	af 90       	pop	r10
    667a:	9f 90       	pop	r9
    667c:	8f 90       	pop	r8
    667e:	7f 90       	pop	r7
    6680:	6f 90       	pop	r6
    6682:	5f 90       	pop	r5
    6684:	4f 90       	pop	r4
    6686:	3f 90       	pop	r3
    6688:	2f 90       	pop	r2
    668a:	08 95       	ret

0000668c <__divmodhi4>:
    668c:	97 fb       	bst	r25, 7
    668e:	07 2e       	mov	r0, r23
    6690:	16 f4       	brtc	.+4      	; 0x6696 <__divmodhi4+0xa>
    6692:	00 94       	com	r0
    6694:	06 d0       	rcall	.+12     	; 0x66a2 <__divmodhi4_neg1>
    6696:	77 fd       	sbrc	r23, 7
    6698:	08 d0       	rcall	.+16     	; 0x66aa <__divmodhi4_neg2>
    669a:	44 d0       	rcall	.+136    	; 0x6724 <__udivmodhi4>
    669c:	07 fc       	sbrc	r0, 7
    669e:	05 d0       	rcall	.+10     	; 0x66aa <__divmodhi4_neg2>
    66a0:	3e f4       	brtc	.+14     	; 0x66b0 <__divmodhi4_exit>

000066a2 <__divmodhi4_neg1>:
    66a2:	90 95       	com	r25
    66a4:	81 95       	neg	r24
    66a6:	9f 4f       	sbci	r25, 0xFF	; 255
    66a8:	08 95       	ret

000066aa <__divmodhi4_neg2>:
    66aa:	70 95       	com	r23
    66ac:	61 95       	neg	r22
    66ae:	7f 4f       	sbci	r23, 0xFF	; 255

000066b0 <__divmodhi4_exit>:
    66b0:	08 95       	ret

000066b2 <__udivmodsi4>:
    66b2:	a1 e2       	ldi	r26, 0x21	; 33
    66b4:	1a 2e       	mov	r1, r26
    66b6:	aa 1b       	sub	r26, r26
    66b8:	bb 1b       	sub	r27, r27
    66ba:	fd 01       	movw	r30, r26
    66bc:	0d c0       	rjmp	.+26     	; 0x66d8 <__udivmodsi4_ep>

000066be <__udivmodsi4_loop>:
    66be:	aa 1f       	adc	r26, r26
    66c0:	bb 1f       	adc	r27, r27
    66c2:	ee 1f       	adc	r30, r30
    66c4:	ff 1f       	adc	r31, r31
    66c6:	a2 17       	cp	r26, r18
    66c8:	b3 07       	cpc	r27, r19
    66ca:	e4 07       	cpc	r30, r20
    66cc:	f5 07       	cpc	r31, r21
    66ce:	20 f0       	brcs	.+8      	; 0x66d8 <__udivmodsi4_ep>
    66d0:	a2 1b       	sub	r26, r18
    66d2:	b3 0b       	sbc	r27, r19
    66d4:	e4 0b       	sbc	r30, r20
    66d6:	f5 0b       	sbc	r31, r21

000066d8 <__udivmodsi4_ep>:
    66d8:	66 1f       	adc	r22, r22
    66da:	77 1f       	adc	r23, r23
    66dc:	88 1f       	adc	r24, r24
    66de:	99 1f       	adc	r25, r25
    66e0:	1a 94       	dec	r1
    66e2:	69 f7       	brne	.-38     	; 0x66be <__udivmodsi4_loop>
    66e4:	60 95       	com	r22
    66e6:	70 95       	com	r23
    66e8:	80 95       	com	r24
    66ea:	90 95       	com	r25
    66ec:	9b 01       	movw	r18, r22
    66ee:	ac 01       	movw	r20, r24
    66f0:	bd 01       	movw	r22, r26
    66f2:	cf 01       	movw	r24, r30
    66f4:	08 95       	ret

000066f6 <__tablejump2__>:
    66f6:	ee 0f       	add	r30, r30
    66f8:	ff 1f       	adc	r31, r31
    66fa:	88 1f       	adc	r24, r24
    66fc:	8b bf       	out	0x3b, r24	; 59
    66fe:	07 90       	elpm	r0, Z+
    6700:	f6 91       	elpm	r31, Z
    6702:	e0 2d       	mov	r30, r0
    6704:	19 94       	eijmp

00006706 <__umulhisi3>:
    6706:	a2 9f       	mul	r26, r18
    6708:	b0 01       	movw	r22, r0
    670a:	b3 9f       	mul	r27, r19
    670c:	c0 01       	movw	r24, r0
    670e:	a3 9f       	mul	r26, r19
    6710:	70 0d       	add	r23, r0
    6712:	81 1d       	adc	r24, r1
    6714:	11 24       	eor	r1, r1
    6716:	91 1d       	adc	r25, r1
    6718:	b2 9f       	mul	r27, r18
    671a:	70 0d       	add	r23, r0
    671c:	81 1d       	adc	r24, r1
    671e:	11 24       	eor	r1, r1
    6720:	91 1d       	adc	r25, r1
    6722:	08 95       	ret

00006724 <__udivmodhi4>:
    6724:	aa 1b       	sub	r26, r26
    6726:	bb 1b       	sub	r27, r27
    6728:	51 e1       	ldi	r21, 0x11	; 17
    672a:	07 c0       	rjmp	.+14     	; 0x673a <__udivmodhi4_ep>

0000672c <__udivmodhi4_loop>:
    672c:	aa 1f       	adc	r26, r26
    672e:	bb 1f       	adc	r27, r27
    6730:	a6 17       	cp	r26, r22
    6732:	b7 07       	cpc	r27, r23
    6734:	10 f0       	brcs	.+4      	; 0x673a <__udivmodhi4_ep>
    6736:	a6 1b       	sub	r26, r22
    6738:	b7 0b       	sbc	r27, r23

0000673a <__udivmodhi4_ep>:
    673a:	88 1f       	adc	r24, r24
    673c:	99 1f       	adc	r25, r25
    673e:	5a 95       	dec	r21
    6740:	a9 f7       	brne	.-22     	; 0x672c <__udivmodhi4_loop>
    6742:	80 95       	com	r24
    6744:	90 95       	com	r25
    6746:	bc 01       	movw	r22, r24
    6748:	cd 01       	movw	r24, r26
    674a:	08 95       	ret

0000674c <malloc>:
    674c:	0f 93       	push	r16
    674e:	1f 93       	push	r17
    6750:	cf 93       	push	r28
    6752:	df 93       	push	r29
    6754:	82 30       	cpi	r24, 0x02	; 2
    6756:	91 05       	cpc	r25, r1
    6758:	10 f4       	brcc	.+4      	; 0x675e <malloc+0x12>
    675a:	82 e0       	ldi	r24, 0x02	; 2
    675c:	90 e0       	ldi	r25, 0x00	; 0
    675e:	e0 91 cd 17 	lds	r30, 0x17CD	; 0x8017cd <__flp>
    6762:	f0 91 ce 17 	lds	r31, 0x17CE	; 0x8017ce <__flp+0x1>
    6766:	20 e0       	ldi	r18, 0x00	; 0
    6768:	30 e0       	ldi	r19, 0x00	; 0
    676a:	a0 e0       	ldi	r26, 0x00	; 0
    676c:	b0 e0       	ldi	r27, 0x00	; 0
    676e:	30 97       	sbiw	r30, 0x00	; 0
    6770:	19 f1       	breq	.+70     	; 0x67b8 <malloc+0x6c>
    6772:	40 81       	ld	r20, Z
    6774:	51 81       	ldd	r21, Z+1	; 0x01
    6776:	02 81       	ldd	r16, Z+2	; 0x02
    6778:	13 81       	ldd	r17, Z+3	; 0x03
    677a:	48 17       	cp	r20, r24
    677c:	59 07       	cpc	r21, r25
    677e:	c8 f0       	brcs	.+50     	; 0x67b2 <malloc+0x66>
    6780:	84 17       	cp	r24, r20
    6782:	95 07       	cpc	r25, r21
    6784:	69 f4       	brne	.+26     	; 0x67a0 <malloc+0x54>
    6786:	10 97       	sbiw	r26, 0x00	; 0
    6788:	31 f0       	breq	.+12     	; 0x6796 <malloc+0x4a>
    678a:	12 96       	adiw	r26, 0x02	; 2
    678c:	0c 93       	st	X, r16
    678e:	12 97       	sbiw	r26, 0x02	; 2
    6790:	13 96       	adiw	r26, 0x03	; 3
    6792:	1c 93       	st	X, r17
    6794:	27 c0       	rjmp	.+78     	; 0x67e4 <malloc+0x98>
    6796:	00 93 cd 17 	sts	0x17CD, r16	; 0x8017cd <__flp>
    679a:	10 93 ce 17 	sts	0x17CE, r17	; 0x8017ce <__flp+0x1>
    679e:	22 c0       	rjmp	.+68     	; 0x67e4 <malloc+0x98>
    67a0:	21 15       	cp	r18, r1
    67a2:	31 05       	cpc	r19, r1
    67a4:	19 f0       	breq	.+6      	; 0x67ac <malloc+0x60>
    67a6:	42 17       	cp	r20, r18
    67a8:	53 07       	cpc	r21, r19
    67aa:	18 f4       	brcc	.+6      	; 0x67b2 <malloc+0x66>
    67ac:	9a 01       	movw	r18, r20
    67ae:	bd 01       	movw	r22, r26
    67b0:	ef 01       	movw	r28, r30
    67b2:	df 01       	movw	r26, r30
    67b4:	f8 01       	movw	r30, r16
    67b6:	db cf       	rjmp	.-74     	; 0x676e <malloc+0x22>
    67b8:	21 15       	cp	r18, r1
    67ba:	31 05       	cpc	r19, r1
    67bc:	f9 f0       	breq	.+62     	; 0x67fc <malloc+0xb0>
    67be:	28 1b       	sub	r18, r24
    67c0:	39 0b       	sbc	r19, r25
    67c2:	24 30       	cpi	r18, 0x04	; 4
    67c4:	31 05       	cpc	r19, r1
    67c6:	80 f4       	brcc	.+32     	; 0x67e8 <malloc+0x9c>
    67c8:	8a 81       	ldd	r24, Y+2	; 0x02
    67ca:	9b 81       	ldd	r25, Y+3	; 0x03
    67cc:	61 15       	cp	r22, r1
    67ce:	71 05       	cpc	r23, r1
    67d0:	21 f0       	breq	.+8      	; 0x67da <malloc+0x8e>
    67d2:	fb 01       	movw	r30, r22
    67d4:	93 83       	std	Z+3, r25	; 0x03
    67d6:	82 83       	std	Z+2, r24	; 0x02
    67d8:	04 c0       	rjmp	.+8      	; 0x67e2 <malloc+0x96>
    67da:	90 93 ce 17 	sts	0x17CE, r25	; 0x8017ce <__flp+0x1>
    67de:	80 93 cd 17 	sts	0x17CD, r24	; 0x8017cd <__flp>
    67e2:	fe 01       	movw	r30, r28
    67e4:	32 96       	adiw	r30, 0x02	; 2
    67e6:	44 c0       	rjmp	.+136    	; 0x6870 <malloc+0x124>
    67e8:	fe 01       	movw	r30, r28
    67ea:	e2 0f       	add	r30, r18
    67ec:	f3 1f       	adc	r31, r19
    67ee:	81 93       	st	Z+, r24
    67f0:	91 93       	st	Z+, r25
    67f2:	22 50       	subi	r18, 0x02	; 2
    67f4:	31 09       	sbc	r19, r1
    67f6:	39 83       	std	Y+1, r19	; 0x01
    67f8:	28 83       	st	Y, r18
    67fa:	3a c0       	rjmp	.+116    	; 0x6870 <malloc+0x124>
    67fc:	20 91 cb 17 	lds	r18, 0x17CB	; 0x8017cb <__brkval>
    6800:	30 91 cc 17 	lds	r19, 0x17CC	; 0x8017cc <__brkval+0x1>
    6804:	23 2b       	or	r18, r19
    6806:	41 f4       	brne	.+16     	; 0x6818 <malloc+0xcc>
    6808:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    680c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6810:	30 93 cc 17 	sts	0x17CC, r19	; 0x8017cc <__brkval+0x1>
    6814:	20 93 cb 17 	sts	0x17CB, r18	; 0x8017cb <__brkval>
    6818:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    681c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6820:	21 15       	cp	r18, r1
    6822:	31 05       	cpc	r19, r1
    6824:	41 f4       	brne	.+16     	; 0x6836 <malloc+0xea>
    6826:	2d b7       	in	r18, 0x3d	; 61
    6828:	3e b7       	in	r19, 0x3e	; 62
    682a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    682e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6832:	24 1b       	sub	r18, r20
    6834:	35 0b       	sbc	r19, r21
    6836:	e0 91 cb 17 	lds	r30, 0x17CB	; 0x8017cb <__brkval>
    683a:	f0 91 cc 17 	lds	r31, 0x17CC	; 0x8017cc <__brkval+0x1>
    683e:	e2 17       	cp	r30, r18
    6840:	f3 07       	cpc	r31, r19
    6842:	a0 f4       	brcc	.+40     	; 0x686c <malloc+0x120>
    6844:	2e 1b       	sub	r18, r30
    6846:	3f 0b       	sbc	r19, r31
    6848:	28 17       	cp	r18, r24
    684a:	39 07       	cpc	r19, r25
    684c:	78 f0       	brcs	.+30     	; 0x686c <malloc+0x120>
    684e:	ac 01       	movw	r20, r24
    6850:	4e 5f       	subi	r20, 0xFE	; 254
    6852:	5f 4f       	sbci	r21, 0xFF	; 255
    6854:	24 17       	cp	r18, r20
    6856:	35 07       	cpc	r19, r21
    6858:	48 f0       	brcs	.+18     	; 0x686c <malloc+0x120>
    685a:	4e 0f       	add	r20, r30
    685c:	5f 1f       	adc	r21, r31
    685e:	50 93 cc 17 	sts	0x17CC, r21	; 0x8017cc <__brkval+0x1>
    6862:	40 93 cb 17 	sts	0x17CB, r20	; 0x8017cb <__brkval>
    6866:	81 93       	st	Z+, r24
    6868:	91 93       	st	Z+, r25
    686a:	02 c0       	rjmp	.+4      	; 0x6870 <malloc+0x124>
    686c:	e0 e0       	ldi	r30, 0x00	; 0
    686e:	f0 e0       	ldi	r31, 0x00	; 0
    6870:	cf 01       	movw	r24, r30
    6872:	df 91       	pop	r29
    6874:	cf 91       	pop	r28
    6876:	1f 91       	pop	r17
    6878:	0f 91       	pop	r16
    687a:	08 95       	ret

0000687c <free>:
    687c:	cf 93       	push	r28
    687e:	df 93       	push	r29
    6880:	00 97       	sbiw	r24, 0x00	; 0
    6882:	09 f4       	brne	.+2      	; 0x6886 <free+0xa>
    6884:	81 c0       	rjmp	.+258    	; 0x6988 <free+0x10c>
    6886:	fc 01       	movw	r30, r24
    6888:	32 97       	sbiw	r30, 0x02	; 2
    688a:	13 82       	std	Z+3, r1	; 0x03
    688c:	12 82       	std	Z+2, r1	; 0x02
    688e:	a0 91 cd 17 	lds	r26, 0x17CD	; 0x8017cd <__flp>
    6892:	b0 91 ce 17 	lds	r27, 0x17CE	; 0x8017ce <__flp+0x1>
    6896:	10 97       	sbiw	r26, 0x00	; 0
    6898:	81 f4       	brne	.+32     	; 0x68ba <free+0x3e>
    689a:	20 81       	ld	r18, Z
    689c:	31 81       	ldd	r19, Z+1	; 0x01
    689e:	82 0f       	add	r24, r18
    68a0:	93 1f       	adc	r25, r19
    68a2:	20 91 cb 17 	lds	r18, 0x17CB	; 0x8017cb <__brkval>
    68a6:	30 91 cc 17 	lds	r19, 0x17CC	; 0x8017cc <__brkval+0x1>
    68aa:	28 17       	cp	r18, r24
    68ac:	39 07       	cpc	r19, r25
    68ae:	51 f5       	brne	.+84     	; 0x6904 <free+0x88>
    68b0:	f0 93 cc 17 	sts	0x17CC, r31	; 0x8017cc <__brkval+0x1>
    68b4:	e0 93 cb 17 	sts	0x17CB, r30	; 0x8017cb <__brkval>
    68b8:	67 c0       	rjmp	.+206    	; 0x6988 <free+0x10c>
    68ba:	ed 01       	movw	r28, r26
    68bc:	20 e0       	ldi	r18, 0x00	; 0
    68be:	30 e0       	ldi	r19, 0x00	; 0
    68c0:	ce 17       	cp	r28, r30
    68c2:	df 07       	cpc	r29, r31
    68c4:	40 f4       	brcc	.+16     	; 0x68d6 <free+0x5a>
    68c6:	4a 81       	ldd	r20, Y+2	; 0x02
    68c8:	5b 81       	ldd	r21, Y+3	; 0x03
    68ca:	9e 01       	movw	r18, r28
    68cc:	41 15       	cp	r20, r1
    68ce:	51 05       	cpc	r21, r1
    68d0:	f1 f0       	breq	.+60     	; 0x690e <free+0x92>
    68d2:	ea 01       	movw	r28, r20
    68d4:	f5 cf       	rjmp	.-22     	; 0x68c0 <free+0x44>
    68d6:	d3 83       	std	Z+3, r29	; 0x03
    68d8:	c2 83       	std	Z+2, r28	; 0x02
    68da:	40 81       	ld	r20, Z
    68dc:	51 81       	ldd	r21, Z+1	; 0x01
    68de:	84 0f       	add	r24, r20
    68e0:	95 1f       	adc	r25, r21
    68e2:	c8 17       	cp	r28, r24
    68e4:	d9 07       	cpc	r29, r25
    68e6:	59 f4       	brne	.+22     	; 0x68fe <free+0x82>
    68e8:	88 81       	ld	r24, Y
    68ea:	99 81       	ldd	r25, Y+1	; 0x01
    68ec:	84 0f       	add	r24, r20
    68ee:	95 1f       	adc	r25, r21
    68f0:	02 96       	adiw	r24, 0x02	; 2
    68f2:	91 83       	std	Z+1, r25	; 0x01
    68f4:	80 83       	st	Z, r24
    68f6:	8a 81       	ldd	r24, Y+2	; 0x02
    68f8:	9b 81       	ldd	r25, Y+3	; 0x03
    68fa:	93 83       	std	Z+3, r25	; 0x03
    68fc:	82 83       	std	Z+2, r24	; 0x02
    68fe:	21 15       	cp	r18, r1
    6900:	31 05       	cpc	r19, r1
    6902:	29 f4       	brne	.+10     	; 0x690e <free+0x92>
    6904:	f0 93 ce 17 	sts	0x17CE, r31	; 0x8017ce <__flp+0x1>
    6908:	e0 93 cd 17 	sts	0x17CD, r30	; 0x8017cd <__flp>
    690c:	3d c0       	rjmp	.+122    	; 0x6988 <free+0x10c>
    690e:	e9 01       	movw	r28, r18
    6910:	fb 83       	std	Y+3, r31	; 0x03
    6912:	ea 83       	std	Y+2, r30	; 0x02
    6914:	49 91       	ld	r20, Y+
    6916:	59 91       	ld	r21, Y+
    6918:	c4 0f       	add	r28, r20
    691a:	d5 1f       	adc	r29, r21
    691c:	ec 17       	cp	r30, r28
    691e:	fd 07       	cpc	r31, r29
    6920:	61 f4       	brne	.+24     	; 0x693a <free+0xbe>
    6922:	80 81       	ld	r24, Z
    6924:	91 81       	ldd	r25, Z+1	; 0x01
    6926:	84 0f       	add	r24, r20
    6928:	95 1f       	adc	r25, r21
    692a:	02 96       	adiw	r24, 0x02	; 2
    692c:	e9 01       	movw	r28, r18
    692e:	99 83       	std	Y+1, r25	; 0x01
    6930:	88 83       	st	Y, r24
    6932:	82 81       	ldd	r24, Z+2	; 0x02
    6934:	93 81       	ldd	r25, Z+3	; 0x03
    6936:	9b 83       	std	Y+3, r25	; 0x03
    6938:	8a 83       	std	Y+2, r24	; 0x02
    693a:	e0 e0       	ldi	r30, 0x00	; 0
    693c:	f0 e0       	ldi	r31, 0x00	; 0
    693e:	12 96       	adiw	r26, 0x02	; 2
    6940:	8d 91       	ld	r24, X+
    6942:	9c 91       	ld	r25, X
    6944:	13 97       	sbiw	r26, 0x03	; 3
    6946:	00 97       	sbiw	r24, 0x00	; 0
    6948:	19 f0       	breq	.+6      	; 0x6950 <free+0xd4>
    694a:	fd 01       	movw	r30, r26
    694c:	dc 01       	movw	r26, r24
    694e:	f7 cf       	rjmp	.-18     	; 0x693e <free+0xc2>
    6950:	8d 91       	ld	r24, X+
    6952:	9c 91       	ld	r25, X
    6954:	11 97       	sbiw	r26, 0x01	; 1
    6956:	9d 01       	movw	r18, r26
    6958:	2e 5f       	subi	r18, 0xFE	; 254
    695a:	3f 4f       	sbci	r19, 0xFF	; 255
    695c:	82 0f       	add	r24, r18
    695e:	93 1f       	adc	r25, r19
    6960:	20 91 cb 17 	lds	r18, 0x17CB	; 0x8017cb <__brkval>
    6964:	30 91 cc 17 	lds	r19, 0x17CC	; 0x8017cc <__brkval+0x1>
    6968:	28 17       	cp	r18, r24
    696a:	39 07       	cpc	r19, r25
    696c:	69 f4       	brne	.+26     	; 0x6988 <free+0x10c>
    696e:	30 97       	sbiw	r30, 0x00	; 0
    6970:	29 f4       	brne	.+10     	; 0x697c <free+0x100>
    6972:	10 92 ce 17 	sts	0x17CE, r1	; 0x8017ce <__flp+0x1>
    6976:	10 92 cd 17 	sts	0x17CD, r1	; 0x8017cd <__flp>
    697a:	02 c0       	rjmp	.+4      	; 0x6980 <free+0x104>
    697c:	13 82       	std	Z+3, r1	; 0x03
    697e:	12 82       	std	Z+2, r1	; 0x02
    6980:	b0 93 cc 17 	sts	0x17CC, r27	; 0x8017cc <__brkval+0x1>
    6984:	a0 93 cb 17 	sts	0x17CB, r26	; 0x8017cb <__brkval>
    6988:	df 91       	pop	r29
    698a:	cf 91       	pop	r28
    698c:	08 95       	ret

0000698e <abort>:
    698e:	81 e0       	ldi	r24, 0x01	; 1
    6990:	90 e0       	ldi	r25, 0x00	; 0
    6992:	f8 94       	cli
    6994:	58 c2       	rjmp	.+1200   	; 0x6e46 <_exit>

00006996 <__ftoa_engine>:
    6996:	28 30       	cpi	r18, 0x08	; 8
    6998:	08 f0       	brcs	.+2      	; 0x699c <__ftoa_engine+0x6>
    699a:	27 e0       	ldi	r18, 0x07	; 7
    699c:	33 27       	eor	r19, r19
    699e:	da 01       	movw	r26, r20
    69a0:	99 0f       	add	r25, r25
    69a2:	31 1d       	adc	r19, r1
    69a4:	87 fd       	sbrc	r24, 7
    69a6:	91 60       	ori	r25, 0x01	; 1
    69a8:	00 96       	adiw	r24, 0x00	; 0
    69aa:	61 05       	cpc	r22, r1
    69ac:	71 05       	cpc	r23, r1
    69ae:	39 f4       	brne	.+14     	; 0x69be <__ftoa_engine+0x28>
    69b0:	32 60       	ori	r19, 0x02	; 2
    69b2:	2e 5f       	subi	r18, 0xFE	; 254
    69b4:	3d 93       	st	X+, r19
    69b6:	30 e3       	ldi	r19, 0x30	; 48
    69b8:	2a 95       	dec	r18
    69ba:	e1 f7       	brne	.-8      	; 0x69b4 <__ftoa_engine+0x1e>
    69bc:	08 95       	ret
    69be:	9f 3f       	cpi	r25, 0xFF	; 255
    69c0:	30 f0       	brcs	.+12     	; 0x69ce <__ftoa_engine+0x38>
    69c2:	80 38       	cpi	r24, 0x80	; 128
    69c4:	71 05       	cpc	r23, r1
    69c6:	61 05       	cpc	r22, r1
    69c8:	09 f0       	breq	.+2      	; 0x69cc <__ftoa_engine+0x36>
    69ca:	3c 5f       	subi	r19, 0xFC	; 252
    69cc:	3c 5f       	subi	r19, 0xFC	; 252
    69ce:	3d 93       	st	X+, r19
    69d0:	91 30       	cpi	r25, 0x01	; 1
    69d2:	08 f0       	brcs	.+2      	; 0x69d6 <__ftoa_engine+0x40>
    69d4:	80 68       	ori	r24, 0x80	; 128
    69d6:	91 1d       	adc	r25, r1
    69d8:	df 93       	push	r29
    69da:	cf 93       	push	r28
    69dc:	1f 93       	push	r17
    69de:	0f 93       	push	r16
    69e0:	ff 92       	push	r15
    69e2:	ef 92       	push	r14
    69e4:	19 2f       	mov	r17, r25
    69e6:	98 7f       	andi	r25, 0xF8	; 248
    69e8:	96 95       	lsr	r25
    69ea:	e9 2f       	mov	r30, r25
    69ec:	96 95       	lsr	r25
    69ee:	96 95       	lsr	r25
    69f0:	e9 0f       	add	r30, r25
    69f2:	ff 27       	eor	r31, r31
    69f4:	e4 50       	subi	r30, 0x04	; 4
    69f6:	fe 4f       	sbci	r31, 0xFE	; 254
    69f8:	99 27       	eor	r25, r25
    69fa:	33 27       	eor	r19, r19
    69fc:	ee 24       	eor	r14, r14
    69fe:	ff 24       	eor	r15, r15
    6a00:	a7 01       	movw	r20, r14
    6a02:	e7 01       	movw	r28, r14
    6a04:	05 90       	lpm	r0, Z+
    6a06:	08 94       	sec
    6a08:	07 94       	ror	r0
    6a0a:	28 f4       	brcc	.+10     	; 0x6a16 <__ftoa_engine+0x80>
    6a0c:	36 0f       	add	r19, r22
    6a0e:	e7 1e       	adc	r14, r23
    6a10:	f8 1e       	adc	r15, r24
    6a12:	49 1f       	adc	r20, r25
    6a14:	51 1d       	adc	r21, r1
    6a16:	66 0f       	add	r22, r22
    6a18:	77 1f       	adc	r23, r23
    6a1a:	88 1f       	adc	r24, r24
    6a1c:	99 1f       	adc	r25, r25
    6a1e:	06 94       	lsr	r0
    6a20:	a1 f7       	brne	.-24     	; 0x6a0a <__ftoa_engine+0x74>
    6a22:	05 90       	lpm	r0, Z+
    6a24:	07 94       	ror	r0
    6a26:	28 f4       	brcc	.+10     	; 0x6a32 <__ftoa_engine+0x9c>
    6a28:	e7 0e       	add	r14, r23
    6a2a:	f8 1e       	adc	r15, r24
    6a2c:	49 1f       	adc	r20, r25
    6a2e:	56 1f       	adc	r21, r22
    6a30:	c1 1d       	adc	r28, r1
    6a32:	77 0f       	add	r23, r23
    6a34:	88 1f       	adc	r24, r24
    6a36:	99 1f       	adc	r25, r25
    6a38:	66 1f       	adc	r22, r22
    6a3a:	06 94       	lsr	r0
    6a3c:	a1 f7       	brne	.-24     	; 0x6a26 <__ftoa_engine+0x90>
    6a3e:	05 90       	lpm	r0, Z+
    6a40:	07 94       	ror	r0
    6a42:	28 f4       	brcc	.+10     	; 0x6a4e <__ftoa_engine+0xb8>
    6a44:	f8 0e       	add	r15, r24
    6a46:	49 1f       	adc	r20, r25
    6a48:	56 1f       	adc	r21, r22
    6a4a:	c7 1f       	adc	r28, r23
    6a4c:	d1 1d       	adc	r29, r1
    6a4e:	88 0f       	add	r24, r24
    6a50:	99 1f       	adc	r25, r25
    6a52:	66 1f       	adc	r22, r22
    6a54:	77 1f       	adc	r23, r23
    6a56:	06 94       	lsr	r0
    6a58:	a1 f7       	brne	.-24     	; 0x6a42 <__ftoa_engine+0xac>
    6a5a:	05 90       	lpm	r0, Z+
    6a5c:	07 94       	ror	r0
    6a5e:	20 f4       	brcc	.+8      	; 0x6a68 <__ftoa_engine+0xd2>
    6a60:	49 0f       	add	r20, r25
    6a62:	56 1f       	adc	r21, r22
    6a64:	c7 1f       	adc	r28, r23
    6a66:	d8 1f       	adc	r29, r24
    6a68:	99 0f       	add	r25, r25
    6a6a:	66 1f       	adc	r22, r22
    6a6c:	77 1f       	adc	r23, r23
    6a6e:	88 1f       	adc	r24, r24
    6a70:	06 94       	lsr	r0
    6a72:	a9 f7       	brne	.-22     	; 0x6a5e <__ftoa_engine+0xc8>
    6a74:	84 91       	lpm	r24, Z
    6a76:	10 95       	com	r17
    6a78:	17 70       	andi	r17, 0x07	; 7
    6a7a:	41 f0       	breq	.+16     	; 0x6a8c <__ftoa_engine+0xf6>
    6a7c:	d6 95       	lsr	r29
    6a7e:	c7 95       	ror	r28
    6a80:	57 95       	ror	r21
    6a82:	47 95       	ror	r20
    6a84:	f7 94       	ror	r15
    6a86:	e7 94       	ror	r14
    6a88:	1a 95       	dec	r17
    6a8a:	c1 f7       	brne	.-16     	; 0x6a7c <__ftoa_engine+0xe6>
    6a8c:	e2 ea       	ldi	r30, 0xA2	; 162
    6a8e:	f1 e0       	ldi	r31, 0x01	; 1
    6a90:	68 94       	set
    6a92:	15 90       	lpm	r1, Z+
    6a94:	15 91       	lpm	r17, Z+
    6a96:	35 91       	lpm	r19, Z+
    6a98:	65 91       	lpm	r22, Z+
    6a9a:	95 91       	lpm	r25, Z+
    6a9c:	05 90       	lpm	r0, Z+
    6a9e:	7f e2       	ldi	r23, 0x2F	; 47
    6aa0:	73 95       	inc	r23
    6aa2:	e1 18       	sub	r14, r1
    6aa4:	f1 0a       	sbc	r15, r17
    6aa6:	43 0b       	sbc	r20, r19
    6aa8:	56 0b       	sbc	r21, r22
    6aaa:	c9 0b       	sbc	r28, r25
    6aac:	d0 09       	sbc	r29, r0
    6aae:	c0 f7       	brcc	.-16     	; 0x6aa0 <__ftoa_engine+0x10a>
    6ab0:	e1 0c       	add	r14, r1
    6ab2:	f1 1e       	adc	r15, r17
    6ab4:	43 1f       	adc	r20, r19
    6ab6:	56 1f       	adc	r21, r22
    6ab8:	c9 1f       	adc	r28, r25
    6aba:	d0 1d       	adc	r29, r0
    6abc:	7e f4       	brtc	.+30     	; 0x6adc <__ftoa_engine+0x146>
    6abe:	70 33       	cpi	r23, 0x30	; 48
    6ac0:	11 f4       	brne	.+4      	; 0x6ac6 <__ftoa_engine+0x130>
    6ac2:	8a 95       	dec	r24
    6ac4:	e6 cf       	rjmp	.-52     	; 0x6a92 <__ftoa_engine+0xfc>
    6ac6:	e8 94       	clt
    6ac8:	01 50       	subi	r16, 0x01	; 1
    6aca:	30 f0       	brcs	.+12     	; 0x6ad8 <__ftoa_engine+0x142>
    6acc:	08 0f       	add	r16, r24
    6ace:	0a f4       	brpl	.+2      	; 0x6ad2 <__ftoa_engine+0x13c>
    6ad0:	00 27       	eor	r16, r16
    6ad2:	02 17       	cp	r16, r18
    6ad4:	08 f4       	brcc	.+2      	; 0x6ad8 <__ftoa_engine+0x142>
    6ad6:	20 2f       	mov	r18, r16
    6ad8:	23 95       	inc	r18
    6ada:	02 2f       	mov	r16, r18
    6adc:	7a 33       	cpi	r23, 0x3A	; 58
    6ade:	28 f0       	brcs	.+10     	; 0x6aea <__ftoa_engine+0x154>
    6ae0:	79 e3       	ldi	r23, 0x39	; 57
    6ae2:	7d 93       	st	X+, r23
    6ae4:	2a 95       	dec	r18
    6ae6:	e9 f7       	brne	.-6      	; 0x6ae2 <__ftoa_engine+0x14c>
    6ae8:	10 c0       	rjmp	.+32     	; 0x6b0a <__ftoa_engine+0x174>
    6aea:	7d 93       	st	X+, r23
    6aec:	2a 95       	dec	r18
    6aee:	89 f6       	brne	.-94     	; 0x6a92 <__ftoa_engine+0xfc>
    6af0:	06 94       	lsr	r0
    6af2:	97 95       	ror	r25
    6af4:	67 95       	ror	r22
    6af6:	37 95       	ror	r19
    6af8:	17 95       	ror	r17
    6afa:	17 94       	ror	r1
    6afc:	e1 18       	sub	r14, r1
    6afe:	f1 0a       	sbc	r15, r17
    6b00:	43 0b       	sbc	r20, r19
    6b02:	56 0b       	sbc	r21, r22
    6b04:	c9 0b       	sbc	r28, r25
    6b06:	d0 09       	sbc	r29, r0
    6b08:	98 f0       	brcs	.+38     	; 0x6b30 <__ftoa_engine+0x19a>
    6b0a:	23 95       	inc	r18
    6b0c:	7e 91       	ld	r23, -X
    6b0e:	73 95       	inc	r23
    6b10:	7a 33       	cpi	r23, 0x3A	; 58
    6b12:	08 f0       	brcs	.+2      	; 0x6b16 <__ftoa_engine+0x180>
    6b14:	70 e3       	ldi	r23, 0x30	; 48
    6b16:	7c 93       	st	X, r23
    6b18:	20 13       	cpse	r18, r16
    6b1a:	b8 f7       	brcc	.-18     	; 0x6b0a <__ftoa_engine+0x174>
    6b1c:	7e 91       	ld	r23, -X
    6b1e:	70 61       	ori	r23, 0x10	; 16
    6b20:	7d 93       	st	X+, r23
    6b22:	30 f0       	brcs	.+12     	; 0x6b30 <__ftoa_engine+0x19a>
    6b24:	83 95       	inc	r24
    6b26:	71 e3       	ldi	r23, 0x31	; 49
    6b28:	7d 93       	st	X+, r23
    6b2a:	70 e3       	ldi	r23, 0x30	; 48
    6b2c:	2a 95       	dec	r18
    6b2e:	e1 f7       	brne	.-8      	; 0x6b28 <__ftoa_engine+0x192>
    6b30:	11 24       	eor	r1, r1
    6b32:	ef 90       	pop	r14
    6b34:	ff 90       	pop	r15
    6b36:	0f 91       	pop	r16
    6b38:	1f 91       	pop	r17
    6b3a:	cf 91       	pop	r28
    6b3c:	df 91       	pop	r29
    6b3e:	99 27       	eor	r25, r25
    6b40:	87 fd       	sbrc	r24, 7
    6b42:	90 95       	com	r25
    6b44:	08 95       	ret

00006b46 <strnlen_P>:
    6b46:	fc 01       	movw	r30, r24
    6b48:	05 90       	lpm	r0, Z+
    6b4a:	61 50       	subi	r22, 0x01	; 1
    6b4c:	70 40       	sbci	r23, 0x00	; 0
    6b4e:	01 10       	cpse	r0, r1
    6b50:	d8 f7       	brcc	.-10     	; 0x6b48 <strnlen_P+0x2>
    6b52:	80 95       	com	r24
    6b54:	90 95       	com	r25
    6b56:	8e 0f       	add	r24, r30
    6b58:	9f 1f       	adc	r25, r31
    6b5a:	08 95       	ret

00006b5c <memcpy>:
    6b5c:	fb 01       	movw	r30, r22
    6b5e:	dc 01       	movw	r26, r24
    6b60:	02 c0       	rjmp	.+4      	; 0x6b66 <memcpy+0xa>
    6b62:	01 90       	ld	r0, Z+
    6b64:	0d 92       	st	X+, r0
    6b66:	41 50       	subi	r20, 0x01	; 1
    6b68:	50 40       	sbci	r21, 0x00	; 0
    6b6a:	d8 f7       	brcc	.-10     	; 0x6b62 <memcpy+0x6>
    6b6c:	08 95       	ret

00006b6e <memset>:
    6b6e:	dc 01       	movw	r26, r24
    6b70:	01 c0       	rjmp	.+2      	; 0x6b74 <memset+0x6>
    6b72:	6d 93       	st	X+, r22
    6b74:	41 50       	subi	r20, 0x01	; 1
    6b76:	50 40       	sbci	r21, 0x00	; 0
    6b78:	e0 f7       	brcc	.-8      	; 0x6b72 <memset+0x4>
    6b7a:	08 95       	ret

00006b7c <strcasestr>:
    6b7c:	fb 01       	movw	r30, r22
    6b7e:	51 91       	ld	r21, Z+
    6b80:	55 23       	and	r21, r21
    6b82:	b1 f0       	breq	.+44     	; 0x6bb0 <strcasestr+0x34>
    6b84:	bf 01       	movw	r22, r30
    6b86:	dc 01       	movw	r26, r24
    6b88:	05 2e       	mov	r0, r21
    6b8a:	4d 91       	ld	r20, X+
    6b8c:	44 23       	and	r20, r20
    6b8e:	69 f0       	breq	.+26     	; 0x6baa <strcasestr+0x2e>
    6b90:	10 d0       	rcall	.+32     	; 0x6bb2 <strcasestr+0x36>
    6b92:	d9 f7       	brne	.-10     	; 0x6b8a <strcasestr+0xe>
    6b94:	cd 01       	movw	r24, r26
    6b96:	01 90       	ld	r0, Z+
    6b98:	00 20       	and	r0, r0
    6b9a:	49 f0       	breq	.+18     	; 0x6bae <strcasestr+0x32>
    6b9c:	4d 91       	ld	r20, X+
    6b9e:	41 11       	cpse	r20, r1
    6ba0:	08 d0       	rcall	.+16     	; 0x6bb2 <strcasestr+0x36>
    6ba2:	c9 f3       	breq	.-14     	; 0x6b96 <strcasestr+0x1a>
    6ba4:	fb 01       	movw	r30, r22
    6ba6:	41 11       	cpse	r20, r1
    6ba8:	ee cf       	rjmp	.-36     	; 0x6b86 <strcasestr+0xa>
    6baa:	81 e0       	ldi	r24, 0x01	; 1
    6bac:	90 e0       	ldi	r25, 0x00	; 0
    6bae:	01 97       	sbiw	r24, 0x01	; 1
    6bb0:	08 95       	ret
    6bb2:	40 25       	eor	r20, r0
    6bb4:	39 f0       	breq	.+14     	; 0x6bc4 <strcasestr+0x48>
    6bb6:	40 32       	cpi	r20, 0x20	; 32
    6bb8:	29 f4       	brne	.+10     	; 0x6bc4 <strcasestr+0x48>
    6bba:	40 29       	or	r20, r0
    6bbc:	4b 57       	subi	r20, 0x7B	; 123
    6bbe:	46 5e       	subi	r20, 0xE6	; 230
    6bc0:	08 f0       	brcs	.+2      	; 0x6bc4 <strcasestr+0x48>
    6bc2:	18 94       	sez
    6bc4:	08 95       	ret

00006bc6 <strcat>:
    6bc6:	fb 01       	movw	r30, r22
    6bc8:	dc 01       	movw	r26, r24
    6bca:	0d 90       	ld	r0, X+
    6bcc:	00 20       	and	r0, r0
    6bce:	e9 f7       	brne	.-6      	; 0x6bca <strcat+0x4>
    6bd0:	11 97       	sbiw	r26, 0x01	; 1
    6bd2:	01 90       	ld	r0, Z+
    6bd4:	0d 92       	st	X+, r0
    6bd6:	00 20       	and	r0, r0
    6bd8:	e1 f7       	brne	.-8      	; 0x6bd2 <strcat+0xc>
    6bda:	08 95       	ret

00006bdc <strcpy>:
    6bdc:	fb 01       	movw	r30, r22
    6bde:	dc 01       	movw	r26, r24
    6be0:	01 90       	ld	r0, Z+
    6be2:	0d 92       	st	X+, r0
    6be4:	00 20       	and	r0, r0
    6be6:	e1 f7       	brne	.-8      	; 0x6be0 <strcpy+0x4>
    6be8:	08 95       	ret

00006bea <strncasecmp>:
    6bea:	fb 01       	movw	r30, r22
    6bec:	dc 01       	movw	r26, r24
    6bee:	41 50       	subi	r20, 0x01	; 1
    6bf0:	50 40       	sbci	r21, 0x00	; 0
    6bf2:	88 f0       	brcs	.+34     	; 0x6c16 <strncasecmp+0x2c>
    6bf4:	8d 91       	ld	r24, X+
    6bf6:	81 34       	cpi	r24, 0x41	; 65
    6bf8:	1c f0       	brlt	.+6      	; 0x6c00 <strncasecmp+0x16>
    6bfa:	8b 35       	cpi	r24, 0x5B	; 91
    6bfc:	0c f4       	brge	.+2      	; 0x6c00 <strncasecmp+0x16>
    6bfe:	80 5e       	subi	r24, 0xE0	; 224
    6c00:	61 91       	ld	r22, Z+
    6c02:	61 34       	cpi	r22, 0x41	; 65
    6c04:	1c f0       	brlt	.+6      	; 0x6c0c <strncasecmp+0x22>
    6c06:	6b 35       	cpi	r22, 0x5B	; 91
    6c08:	0c f4       	brge	.+2      	; 0x6c0c <strncasecmp+0x22>
    6c0a:	60 5e       	subi	r22, 0xE0	; 224
    6c0c:	86 1b       	sub	r24, r22
    6c0e:	61 11       	cpse	r22, r1
    6c10:	71 f3       	breq	.-36     	; 0x6bee <strncasecmp+0x4>
    6c12:	99 0b       	sbc	r25, r25
    6c14:	08 95       	ret
    6c16:	88 1b       	sub	r24, r24
    6c18:	fc cf       	rjmp	.-8      	; 0x6c12 <strncasecmp+0x28>

00006c1a <strnlen>:
    6c1a:	fc 01       	movw	r30, r24
    6c1c:	61 50       	subi	r22, 0x01	; 1
    6c1e:	70 40       	sbci	r23, 0x00	; 0
    6c20:	01 90       	ld	r0, Z+
    6c22:	01 10       	cpse	r0, r1
    6c24:	d8 f7       	brcc	.-10     	; 0x6c1c <strnlen+0x2>
    6c26:	80 95       	com	r24
    6c28:	90 95       	com	r25
    6c2a:	8e 0f       	add	r24, r30
    6c2c:	9f 1f       	adc	r25, r31
    6c2e:	08 95       	ret

00006c30 <fputc>:
    6c30:	0f 93       	push	r16
    6c32:	1f 93       	push	r17
    6c34:	cf 93       	push	r28
    6c36:	df 93       	push	r29
    6c38:	fb 01       	movw	r30, r22
    6c3a:	23 81       	ldd	r18, Z+3	; 0x03
    6c3c:	21 fd       	sbrc	r18, 1
    6c3e:	03 c0       	rjmp	.+6      	; 0x6c46 <fputc+0x16>
    6c40:	8f ef       	ldi	r24, 0xFF	; 255
    6c42:	9f ef       	ldi	r25, 0xFF	; 255
    6c44:	2c c0       	rjmp	.+88     	; 0x6c9e <fputc+0x6e>
    6c46:	22 ff       	sbrs	r18, 2
    6c48:	16 c0       	rjmp	.+44     	; 0x6c76 <fputc+0x46>
    6c4a:	46 81       	ldd	r20, Z+6	; 0x06
    6c4c:	57 81       	ldd	r21, Z+7	; 0x07
    6c4e:	24 81       	ldd	r18, Z+4	; 0x04
    6c50:	35 81       	ldd	r19, Z+5	; 0x05
    6c52:	42 17       	cp	r20, r18
    6c54:	53 07       	cpc	r21, r19
    6c56:	44 f4       	brge	.+16     	; 0x6c68 <fputc+0x38>
    6c58:	a0 81       	ld	r26, Z
    6c5a:	b1 81       	ldd	r27, Z+1	; 0x01
    6c5c:	9d 01       	movw	r18, r26
    6c5e:	2f 5f       	subi	r18, 0xFF	; 255
    6c60:	3f 4f       	sbci	r19, 0xFF	; 255
    6c62:	31 83       	std	Z+1, r19	; 0x01
    6c64:	20 83       	st	Z, r18
    6c66:	8c 93       	st	X, r24
    6c68:	26 81       	ldd	r18, Z+6	; 0x06
    6c6a:	37 81       	ldd	r19, Z+7	; 0x07
    6c6c:	2f 5f       	subi	r18, 0xFF	; 255
    6c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    6c70:	37 83       	std	Z+7, r19	; 0x07
    6c72:	26 83       	std	Z+6, r18	; 0x06
    6c74:	14 c0       	rjmp	.+40     	; 0x6c9e <fputc+0x6e>
    6c76:	8b 01       	movw	r16, r22
    6c78:	ec 01       	movw	r28, r24
    6c7a:	fb 01       	movw	r30, r22
    6c7c:	00 84       	ldd	r0, Z+8	; 0x08
    6c7e:	f1 85       	ldd	r31, Z+9	; 0x09
    6c80:	e0 2d       	mov	r30, r0
    6c82:	19 95       	eicall
    6c84:	89 2b       	or	r24, r25
    6c86:	e1 f6       	brne	.-72     	; 0x6c40 <fputc+0x10>
    6c88:	d8 01       	movw	r26, r16
    6c8a:	16 96       	adiw	r26, 0x06	; 6
    6c8c:	8d 91       	ld	r24, X+
    6c8e:	9c 91       	ld	r25, X
    6c90:	17 97       	sbiw	r26, 0x07	; 7
    6c92:	01 96       	adiw	r24, 0x01	; 1
    6c94:	17 96       	adiw	r26, 0x07	; 7
    6c96:	9c 93       	st	X, r25
    6c98:	8e 93       	st	-X, r24
    6c9a:	16 97       	sbiw	r26, 0x06	; 6
    6c9c:	ce 01       	movw	r24, r28
    6c9e:	df 91       	pop	r29
    6ca0:	cf 91       	pop	r28
    6ca2:	1f 91       	pop	r17
    6ca4:	0f 91       	pop	r16
    6ca6:	08 95       	ret

00006ca8 <printf>:
    6ca8:	cf 93       	push	r28
    6caa:	df 93       	push	r29
    6cac:	cd b7       	in	r28, 0x3d	; 61
    6cae:	de b7       	in	r29, 0x3e	; 62
    6cb0:	ae 01       	movw	r20, r28
    6cb2:	4a 5f       	subi	r20, 0xFA	; 250
    6cb4:	5f 4f       	sbci	r21, 0xFF	; 255
    6cb6:	fa 01       	movw	r30, r20
    6cb8:	61 91       	ld	r22, Z+
    6cba:	71 91       	ld	r23, Z+
    6cbc:	af 01       	movw	r20, r30
    6cbe:	80 91 d1 17 	lds	r24, 0x17D1	; 0x8017d1 <__iob+0x2>
    6cc2:	90 91 d2 17 	lds	r25, 0x17D2	; 0x8017d2 <__iob+0x3>
    6cc6:	59 d9       	rcall	.-3406   	; 0x5f7a <vfprintf>
    6cc8:	df 91       	pop	r29
    6cca:	cf 91       	pop	r28
    6ccc:	08 95       	ret

00006cce <puts>:
    6cce:	0f 93       	push	r16
    6cd0:	1f 93       	push	r17
    6cd2:	cf 93       	push	r28
    6cd4:	df 93       	push	r29
    6cd6:	e0 91 d1 17 	lds	r30, 0x17D1	; 0x8017d1 <__iob+0x2>
    6cda:	f0 91 d2 17 	lds	r31, 0x17D2	; 0x8017d2 <__iob+0x3>
    6cde:	23 81       	ldd	r18, Z+3	; 0x03
    6ce0:	21 ff       	sbrs	r18, 1
    6ce2:	1b c0       	rjmp	.+54     	; 0x6d1a <puts+0x4c>
    6ce4:	8c 01       	movw	r16, r24
    6ce6:	d0 e0       	ldi	r29, 0x00	; 0
    6ce8:	c0 e0       	ldi	r28, 0x00	; 0
    6cea:	f8 01       	movw	r30, r16
    6cec:	81 91       	ld	r24, Z+
    6cee:	8f 01       	movw	r16, r30
    6cf0:	60 91 d1 17 	lds	r22, 0x17D1	; 0x8017d1 <__iob+0x2>
    6cf4:	70 91 d2 17 	lds	r23, 0x17D2	; 0x8017d2 <__iob+0x3>
    6cf8:	db 01       	movw	r26, r22
    6cfa:	18 96       	adiw	r26, 0x08	; 8
    6cfc:	ed 91       	ld	r30, X+
    6cfe:	fc 91       	ld	r31, X
    6d00:	19 97       	sbiw	r26, 0x09	; 9
    6d02:	88 23       	and	r24, r24
    6d04:	31 f0       	breq	.+12     	; 0x6d12 <puts+0x44>
    6d06:	19 95       	eicall
    6d08:	89 2b       	or	r24, r25
    6d0a:	79 f3       	breq	.-34     	; 0x6cea <puts+0x1c>
    6d0c:	df ef       	ldi	r29, 0xFF	; 255
    6d0e:	cf ef       	ldi	r28, 0xFF	; 255
    6d10:	ec cf       	rjmp	.-40     	; 0x6cea <puts+0x1c>
    6d12:	8a e0       	ldi	r24, 0x0A	; 10
    6d14:	19 95       	eicall
    6d16:	89 2b       	or	r24, r25
    6d18:	19 f0       	breq	.+6      	; 0x6d20 <puts+0x52>
    6d1a:	8f ef       	ldi	r24, 0xFF	; 255
    6d1c:	9f ef       	ldi	r25, 0xFF	; 255
    6d1e:	02 c0       	rjmp	.+4      	; 0x6d24 <puts+0x56>
    6d20:	8d 2f       	mov	r24, r29
    6d22:	9c 2f       	mov	r25, r28
    6d24:	df 91       	pop	r29
    6d26:	cf 91       	pop	r28
    6d28:	1f 91       	pop	r17
    6d2a:	0f 91       	pop	r16
    6d2c:	08 95       	ret

00006d2e <sprintf>:
    6d2e:	0f 93       	push	r16
    6d30:	1f 93       	push	r17
    6d32:	cf 93       	push	r28
    6d34:	df 93       	push	r29
    6d36:	cd b7       	in	r28, 0x3d	; 61
    6d38:	de b7       	in	r29, 0x3e	; 62
    6d3a:	2e 97       	sbiw	r28, 0x0e	; 14
    6d3c:	0f b6       	in	r0, 0x3f	; 63
    6d3e:	f8 94       	cli
    6d40:	de bf       	out	0x3e, r29	; 62
    6d42:	0f be       	out	0x3f, r0	; 63
    6d44:	cd bf       	out	0x3d, r28	; 61
    6d46:	0e 89       	ldd	r16, Y+22	; 0x16
    6d48:	1f 89       	ldd	r17, Y+23	; 0x17
    6d4a:	86 e0       	ldi	r24, 0x06	; 6
    6d4c:	8c 83       	std	Y+4, r24	; 0x04
    6d4e:	1a 83       	std	Y+2, r17	; 0x02
    6d50:	09 83       	std	Y+1, r16	; 0x01
    6d52:	8f ef       	ldi	r24, 0xFF	; 255
    6d54:	9f e7       	ldi	r25, 0x7F	; 127
    6d56:	9e 83       	std	Y+6, r25	; 0x06
    6d58:	8d 83       	std	Y+5, r24	; 0x05
    6d5a:	ae 01       	movw	r20, r28
    6d5c:	46 5e       	subi	r20, 0xE6	; 230
    6d5e:	5f 4f       	sbci	r21, 0xFF	; 255
    6d60:	68 8d       	ldd	r22, Y+24	; 0x18
    6d62:	79 8d       	ldd	r23, Y+25	; 0x19
    6d64:	ce 01       	movw	r24, r28
    6d66:	01 96       	adiw	r24, 0x01	; 1
    6d68:	08 d9       	rcall	.-3568   	; 0x5f7a <vfprintf>
    6d6a:	ef 81       	ldd	r30, Y+7	; 0x07
    6d6c:	f8 85       	ldd	r31, Y+8	; 0x08
    6d6e:	e0 0f       	add	r30, r16
    6d70:	f1 1f       	adc	r31, r17
    6d72:	10 82       	st	Z, r1
    6d74:	2e 96       	adiw	r28, 0x0e	; 14
    6d76:	0f b6       	in	r0, 0x3f	; 63
    6d78:	f8 94       	cli
    6d7a:	de bf       	out	0x3e, r29	; 62
    6d7c:	0f be       	out	0x3f, r0	; 63
    6d7e:	cd bf       	out	0x3d, r28	; 61
    6d80:	df 91       	pop	r29
    6d82:	cf 91       	pop	r28
    6d84:	1f 91       	pop	r17
    6d86:	0f 91       	pop	r16
    6d88:	08 95       	ret

00006d8a <__ultoa_invert>:
    6d8a:	fa 01       	movw	r30, r20
    6d8c:	aa 27       	eor	r26, r26
    6d8e:	28 30       	cpi	r18, 0x08	; 8
    6d90:	51 f1       	breq	.+84     	; 0x6de6 <__ultoa_invert+0x5c>
    6d92:	20 31       	cpi	r18, 0x10	; 16
    6d94:	81 f1       	breq	.+96     	; 0x6df6 <__ultoa_invert+0x6c>
    6d96:	e8 94       	clt
    6d98:	6f 93       	push	r22
    6d9a:	6e 7f       	andi	r22, 0xFE	; 254
    6d9c:	6e 5f       	subi	r22, 0xFE	; 254
    6d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    6da0:	8f 4f       	sbci	r24, 0xFF	; 255
    6da2:	9f 4f       	sbci	r25, 0xFF	; 255
    6da4:	af 4f       	sbci	r26, 0xFF	; 255
    6da6:	b1 e0       	ldi	r27, 0x01	; 1
    6da8:	3e d0       	rcall	.+124    	; 0x6e26 <__ultoa_invert+0x9c>
    6daa:	b4 e0       	ldi	r27, 0x04	; 4
    6dac:	3c d0       	rcall	.+120    	; 0x6e26 <__ultoa_invert+0x9c>
    6dae:	67 0f       	add	r22, r23
    6db0:	78 1f       	adc	r23, r24
    6db2:	89 1f       	adc	r24, r25
    6db4:	9a 1f       	adc	r25, r26
    6db6:	a1 1d       	adc	r26, r1
    6db8:	68 0f       	add	r22, r24
    6dba:	79 1f       	adc	r23, r25
    6dbc:	8a 1f       	adc	r24, r26
    6dbe:	91 1d       	adc	r25, r1
    6dc0:	a1 1d       	adc	r26, r1
    6dc2:	6a 0f       	add	r22, r26
    6dc4:	71 1d       	adc	r23, r1
    6dc6:	81 1d       	adc	r24, r1
    6dc8:	91 1d       	adc	r25, r1
    6dca:	a1 1d       	adc	r26, r1
    6dcc:	20 d0       	rcall	.+64     	; 0x6e0e <__ultoa_invert+0x84>
    6dce:	09 f4       	brne	.+2      	; 0x6dd2 <__ultoa_invert+0x48>
    6dd0:	68 94       	set
    6dd2:	3f 91       	pop	r19
    6dd4:	2a e0       	ldi	r18, 0x0A	; 10
    6dd6:	26 9f       	mul	r18, r22
    6dd8:	11 24       	eor	r1, r1
    6dda:	30 19       	sub	r19, r0
    6ddc:	30 5d       	subi	r19, 0xD0	; 208
    6dde:	31 93       	st	Z+, r19
    6de0:	de f6       	brtc	.-74     	; 0x6d98 <__ultoa_invert+0xe>
    6de2:	cf 01       	movw	r24, r30
    6de4:	08 95       	ret
    6de6:	46 2f       	mov	r20, r22
    6de8:	47 70       	andi	r20, 0x07	; 7
    6dea:	40 5d       	subi	r20, 0xD0	; 208
    6dec:	41 93       	st	Z+, r20
    6dee:	b3 e0       	ldi	r27, 0x03	; 3
    6df0:	0f d0       	rcall	.+30     	; 0x6e10 <__ultoa_invert+0x86>
    6df2:	c9 f7       	brne	.-14     	; 0x6de6 <__ultoa_invert+0x5c>
    6df4:	f6 cf       	rjmp	.-20     	; 0x6de2 <__ultoa_invert+0x58>
    6df6:	46 2f       	mov	r20, r22
    6df8:	4f 70       	andi	r20, 0x0F	; 15
    6dfa:	40 5d       	subi	r20, 0xD0	; 208
    6dfc:	4a 33       	cpi	r20, 0x3A	; 58
    6dfe:	18 f0       	brcs	.+6      	; 0x6e06 <__ultoa_invert+0x7c>
    6e00:	49 5d       	subi	r20, 0xD9	; 217
    6e02:	31 fd       	sbrc	r19, 1
    6e04:	40 52       	subi	r20, 0x20	; 32
    6e06:	41 93       	st	Z+, r20
    6e08:	02 d0       	rcall	.+4      	; 0x6e0e <__ultoa_invert+0x84>
    6e0a:	a9 f7       	brne	.-22     	; 0x6df6 <__ultoa_invert+0x6c>
    6e0c:	ea cf       	rjmp	.-44     	; 0x6de2 <__ultoa_invert+0x58>
    6e0e:	b4 e0       	ldi	r27, 0x04	; 4
    6e10:	a6 95       	lsr	r26
    6e12:	97 95       	ror	r25
    6e14:	87 95       	ror	r24
    6e16:	77 95       	ror	r23
    6e18:	67 95       	ror	r22
    6e1a:	ba 95       	dec	r27
    6e1c:	c9 f7       	brne	.-14     	; 0x6e10 <__ultoa_invert+0x86>
    6e1e:	00 97       	sbiw	r24, 0x00	; 0
    6e20:	61 05       	cpc	r22, r1
    6e22:	71 05       	cpc	r23, r1
    6e24:	08 95       	ret
    6e26:	9b 01       	movw	r18, r22
    6e28:	ac 01       	movw	r20, r24
    6e2a:	0a 2e       	mov	r0, r26
    6e2c:	06 94       	lsr	r0
    6e2e:	57 95       	ror	r21
    6e30:	47 95       	ror	r20
    6e32:	37 95       	ror	r19
    6e34:	27 95       	ror	r18
    6e36:	ba 95       	dec	r27
    6e38:	c9 f7       	brne	.-14     	; 0x6e2c <__ultoa_invert+0xa2>
    6e3a:	62 0f       	add	r22, r18
    6e3c:	73 1f       	adc	r23, r19
    6e3e:	84 1f       	adc	r24, r20
    6e40:	95 1f       	adc	r25, r21
    6e42:	a0 1d       	adc	r26, r0
    6e44:	08 95       	ret

00006e46 <_exit>:
    6e46:	f8 94       	cli

00006e48 <__stop_program>:
    6e48:	ff cf       	rjmp	.-2      	; 0x6e48 <__stop_program>


4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004d0  00800200  00005f6c  00006000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005f6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000cb2  008006d0  008006d0  000064d0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000064d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000652c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009b8  00000000  00000000  0000656c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c096  00000000  00000000  00006f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f10  00000000  00000000  00012fba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005eaa  00000000  00000000  00015eca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002368  00000000  00000000  0001bd74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003d06  00000000  00000000  0001e0dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b1c8  00000000  00000000  00021de2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000920  00000000  00000000  0002cfaa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6f c4       	rjmp	.+2270   	; 0x910 <__vector_12>
      32:	00 00       	nop
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 b5 20 	jmp	0x416a	; 0x416a <__vector_25>
      68:	0c 94 07 21 	jmp	0x420e	; 0x420e <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 4b 21 	jmp	0x4296	; 0x4296 <__vector_36>
      94:	0c 94 9d 21 	jmp	0x433a	; 0x433a <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 ed 25 	jmp	0x4bda	; 0x4bda <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 e1 21 	jmp	0x43c2	; 0x43c2 <__vector_51>
      d0:	0c 94 33 22 	jmp	0x4466	; 0x4466 <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 77 22 	jmp	0x44ee	; 0x44ee <__vector_54>
      dc:	0c 94 c9 22 	jmp	0x4592	; 0x4592 <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	68 17       	cp	r22, r24
      e6:	68 17       	cp	r22, r24
      e8:	68 17       	cp	r22, r24
      ea:	9f 17       	cp	r25, r31
      ec:	a7 17       	cp	r26, r23
      ee:	bc 17       	cp	r27, r28
      f0:	68 17       	cp	r22, r24
      f2:	68 17       	cp	r22, r24
      f4:	9f 17       	cp	r25, r31
      f6:	a7 17       	cp	r26, r23
      f8:	0f 26       	eor	r0, r31
      fa:	7f 26       	eor	r7, r31
      fc:	7f 26       	eor	r7, r31
      fe:	7f 26       	eor	r7, r31
     100:	7f 26       	eor	r7, r31
     102:	7f 26       	eor	r7, r31
     104:	7f 26       	eor	r7, r31
     106:	7f 26       	eor	r7, r31
     108:	0f 26       	eor	r0, r31
     10a:	7f 26       	eor	r7, r31
     10c:	7f 26       	eor	r7, r31
     10e:	7f 26       	eor	r7, r31
     110:	7f 26       	eor	r7, r31
     112:	7f 26       	eor	r7, r31
     114:	7f 26       	eor	r7, r31
     116:	7f 26       	eor	r7, r31
     118:	11 26       	eor	r1, r17
     11a:	7f 26       	eor	r7, r31
     11c:	7f 26       	eor	r7, r31
     11e:	7f 26       	eor	r7, r31
     120:	7f 26       	eor	r7, r31
     122:	7f 26       	eor	r7, r31
     124:	7f 26       	eor	r7, r31
     126:	7f 26       	eor	r7, r31
     128:	7f 26       	eor	r7, r31
     12a:	7f 26       	eor	r7, r31
     12c:	7f 26       	eor	r7, r31
     12e:	7f 26       	eor	r7, r31
     130:	7f 26       	eor	r7, r31
     132:	7f 26       	eor	r7, r31
     134:	7f 26       	eor	r7, r31
     136:	7f 26       	eor	r7, r31
     138:	11 26       	eor	r1, r17
     13a:	7f 26       	eor	r7, r31
     13c:	7f 26       	eor	r7, r31
     13e:	7f 26       	eor	r7, r31
     140:	7f 26       	eor	r7, r31
     142:	7f 26       	eor	r7, r31
     144:	7f 26       	eor	r7, r31
     146:	7f 26       	eor	r7, r31
     148:	7f 26       	eor	r7, r31
     14a:	7f 26       	eor	r7, r31
     14c:	7f 26       	eor	r7, r31
     14e:	7f 26       	eor	r7, r31
     150:	7f 26       	eor	r7, r31
     152:	7f 26       	eor	r7, r31
     154:	7f 26       	eor	r7, r31
     156:	7f 26       	eor	r7, r31
     158:	7b 26       	eor	r7, r27
     15a:	7f 26       	eor	r7, r31
     15c:	7f 26       	eor	r7, r31
     15e:	7f 26       	eor	r7, r31
     160:	7f 26       	eor	r7, r31
     162:	7f 26       	eor	r7, r31
     164:	7f 26       	eor	r7, r31
     166:	7f 26       	eor	r7, r31
     168:	46 26       	eor	r4, r22
     16a:	7f 26       	eor	r7, r31
     16c:	7f 26       	eor	r7, r31
     16e:	7f 26       	eor	r7, r31
     170:	7f 26       	eor	r7, r31
     172:	7f 26       	eor	r7, r31
     174:	7f 26       	eor	r7, r31
     176:	7f 26       	eor	r7, r31
     178:	7f 26       	eor	r7, r31
     17a:	7f 26       	eor	r7, r31
     17c:	7f 26       	eor	r7, r31
     17e:	7f 26       	eor	r7, r31
     180:	7f 26       	eor	r7, r31
     182:	7f 26       	eor	r7, r31
     184:	7f 26       	eor	r7, r31
     186:	7f 26       	eor	r7, r31
     188:	3a 26       	eor	r3, r26
     18a:	7f 26       	eor	r7, r31
     18c:	7f 26       	eor	r7, r31
     18e:	7f 26       	eor	r7, r31
     190:	7f 26       	eor	r7, r31
     192:	7f 26       	eor	r7, r31
     194:	7f 26       	eor	r7, r31
     196:	7f 26       	eor	r7, r31
     198:	5e 26       	eor	r5, r30

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 b8 0b 	call	0x1770	; 0x1770 <prvCheckTasksWaitingTermination>
     2a0:	80 91 f5 10 	lds	r24, 0x10F5	; 0x8010f5 <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	6d d2       	rcall	.+1242   	; 0x784 <vPortYield>
     2aa:	0e 94 e5 17 	call	0x2fca	; 0x2fca <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 e5 14 	call	0x29ca	; 0x29ca <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 da 16 	call	0x2db4	; 0x2db4 <prvProcessTimerOrBlockTask>
     2c8:	0e 94 31 17 	call	0x2e62	; 0x2e62 <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	16 e0       	ldi	r17, 0x06	; 6
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	ec e6       	ldi	r30, 0x6C	; 108
     2e6:	ff e5       	ldi	r31, 0x5F	; 95
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	a0 3d       	cpi	r26, 0xD0	; 208
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	23 e1       	ldi	r18, 0x13	; 19
     2fa:	a0 ed       	ldi	r26, 0xD0	; 208
     2fc:	b6 e0       	ldi	r27, 0x06	; 6
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	a2 38       	cpi	r26, 0x82	; 130
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <main>
     30c:	0c 94 b4 2f 	jmp	0x5f68	; 0x5f68 <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <Application_initialiseSystem>:

/*-----------------------------------------------------------*/
void Application_initialiseSystem()
{
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	0e 94 2b 23 	call	0x4656	; 0x4656 <stdio_initialise>

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
     318:	85 e0       	ldi	r24, 0x05	; 5
     31a:	0e 94 32 24 	call	0x4864	; 0x4864 <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
     31e:	60 e0       	ldi	r22, 0x00	; 0
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	0e 94 27 1c 	call	0x384e	; 0x384e <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
     328:	83 e0       	ldi	r24, 0x03	; 3
     32a:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <lora_handler_initialise>
	//Create humidity temperature task and start with priority 4
	hih8120_handler_initialise(4);
     32e:	84 e0       	ldi	r24, 0x04	; 4
     330:	0c 94 63 18 	jmp	0x30c6	; 0x30c6 <hih8120_handler_initialise>
     334:	08 95       	ret

00000336 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     336:	ec ed       	ldi	r30, 0xDC	; 220
     338:	f6 e0       	ldi	r31, 0x06	; 6
     33a:	a0 ee       	ldi	r26, 0xE0	; 224
     33c:	b6 e0       	ldi	r27, 0x06	; 6
     33e:	b1 83       	std	Z+1, r27	; 0x01
     340:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     342:	13 82       	std	Z+3, r1	; 0x03
     344:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     346:	e0 ea       	ldi	r30, 0xA0	; 160
     348:	f0 e1       	ldi	r31, 0x10	; 16
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     34a:	f0 93 db 06 	sts	0x06DB, r31	; 0x8006db <pxEnd+0x1>
     34e:	e0 93 da 06 	sts	0x06DA, r30	; 0x8006da <pxEnd>
    pxEnd->xBlockSize = 0;
     352:	13 82       	std	Z+3, r1	; 0x03
     354:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     356:	11 82       	std	Z+1, r1	; 0x01
     358:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     35a:	80 ec       	ldi	r24, 0xC0	; 192
     35c:	99 e0       	ldi	r25, 0x09	; 9
     35e:	13 96       	adiw	r26, 0x03	; 3
     360:	9c 93       	st	X, r25
     362:	8e 93       	st	-X, r24
     364:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     366:	ed 93       	st	X+, r30
     368:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     36a:	90 93 d7 06 	sts	0x06D7, r25	; 0x8006d7 <xMinimumEverFreeBytesRemaining+0x1>
     36e:	80 93 d6 06 	sts	0x06D6, r24	; 0x8006d6 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     372:	90 93 d9 06 	sts	0x06D9, r25	; 0x8006d9 <xFreeBytesRemaining+0x1>
     376:	80 93 d8 06 	sts	0x06D8, r24	; 0x8006d8 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	90 e8       	ldi	r25, 0x80	; 128
     37e:	90 93 d1 06 	sts	0x06D1, r25	; 0x8006d1 <__data_end+0x1>
     382:	80 93 d0 06 	sts	0x06D0, r24	; 0x8006d0 <__data_end>
     386:	08 95       	ret

00000388 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     38e:	ac ed       	ldi	r26, 0xDC	; 220
     390:	b6 e0       	ldi	r27, 0x06	; 6
     392:	01 c0       	rjmp	.+2      	; 0x396 <prvInsertBlockIntoFreeList+0xe>
     394:	df 01       	movw	r26, r30
     396:	ed 91       	ld	r30, X+
     398:	fc 91       	ld	r31, X
     39a:	11 97       	sbiw	r26, 0x01	; 1
     39c:	ec 17       	cp	r30, r28
     39e:	fd 07       	cpc	r31, r29
     3a0:	c8 f3       	brcs	.-14     	; 0x394 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     3a2:	12 96       	adiw	r26, 0x02	; 2
     3a4:	8d 91       	ld	r24, X+
     3a6:	9c 91       	ld	r25, X
     3a8:	13 97       	sbiw	r26, 0x03	; 3
     3aa:	9d 01       	movw	r18, r26
     3ac:	28 0f       	add	r18, r24
     3ae:	39 1f       	adc	r19, r25
     3b0:	c2 17       	cp	r28, r18
     3b2:	d3 07       	cpc	r29, r19
     3b4:	49 f4       	brne	.+18     	; 0x3c8 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     3b6:	2a 81       	ldd	r18, Y+2	; 0x02
     3b8:	3b 81       	ldd	r19, Y+3	; 0x03
     3ba:	82 0f       	add	r24, r18
     3bc:	93 1f       	adc	r25, r19
     3be:	13 96       	adiw	r26, 0x03	; 3
     3c0:	9c 93       	st	X, r25
     3c2:	8e 93       	st	-X, r24
     3c4:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     3c6:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     3c8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ca:	9b 81       	ldd	r25, Y+3	; 0x03
     3cc:	9e 01       	movw	r18, r28
     3ce:	28 0f       	add	r18, r24
     3d0:	39 1f       	adc	r19, r25
     3d2:	e2 17       	cp	r30, r18
     3d4:	f3 07       	cpc	r31, r19
     3d6:	c1 f4       	brne	.+48     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     3d8:	20 91 da 06 	lds	r18, 0x06DA	; 0x8006da <pxEnd>
     3dc:	30 91 db 06 	lds	r19, 0x06DB	; 0x8006db <pxEnd+0x1>
     3e0:	e2 17       	cp	r30, r18
     3e2:	f3 07       	cpc	r31, r19
     3e4:	71 f0       	breq	.+28     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     3e6:	22 81       	ldd	r18, Z+2	; 0x02
     3e8:	33 81       	ldd	r19, Z+3	; 0x03
     3ea:	82 0f       	add	r24, r18
     3ec:	93 1f       	adc	r25, r19
     3ee:	9b 83       	std	Y+3, r25	; 0x03
     3f0:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     3f2:	ed 91       	ld	r30, X+
     3f4:	fc 91       	ld	r31, X
     3f6:	11 97       	sbiw	r26, 0x01	; 1
     3f8:	80 81       	ld	r24, Z
     3fa:	91 81       	ldd	r25, Z+1	; 0x01
     3fc:	99 83       	std	Y+1, r25	; 0x01
     3fe:	88 83       	st	Y, r24
     400:	05 c0       	rjmp	.+10     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     402:	39 83       	std	Y+1, r19	; 0x01
     404:	28 83       	st	Y, r18
     406:	02 c0       	rjmp	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     408:	f9 83       	std	Y+1, r31	; 0x01
     40a:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     40c:	ca 17       	cp	r28, r26
     40e:	db 07       	cpc	r29, r27
     410:	11 f0       	breq	.+4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     412:	cd 93       	st	X+, r28
     414:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	08 95       	ret

0000041c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     41c:	ef 92       	push	r14
     41e:	ff 92       	push	r15
     420:	0f 93       	push	r16
     422:	1f 93       	push	r17
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     42a:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     42e:	80 91 da 06 	lds	r24, 0x06DA	; 0x8006da <pxEnd>
     432:	90 91 db 06 	lds	r25, 0x06DB	; 0x8006db <pxEnd+0x1>
     436:	89 2b       	or	r24, r25
     438:	09 f4       	brne	.+2      	; 0x43c <pvPortMalloc+0x20>
        {
            prvHeapInit();
     43a:	7d df       	rcall	.-262    	; 0x336 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     43c:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <__data_end>
     440:	90 91 d1 06 	lds	r25, 0x06D1	; 0x8006d1 <__data_end+0x1>
     444:	80 23       	and	r24, r16
     446:	91 23       	and	r25, r17
     448:	89 2b       	or	r24, r25
     44a:	09 f0       	breq	.+2      	; 0x44e <pvPortMalloc+0x32>
     44c:	76 c0       	rjmp	.+236    	; 0x53a <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     44e:	01 15       	cp	r16, r1
     450:	11 05       	cpc	r17, r1
     452:	49 f0       	breq	.+18     	; 0x466 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     454:	c8 01       	movw	r24, r16
     456:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     458:	08 17       	cp	r16, r24
     45a:	19 07       	cpc	r17, r25
     45c:	18 f0       	brcs	.+6      	; 0x464 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     45e:	00 e0       	ldi	r16, 0x00	; 0
     460:	10 e0       	ldi	r17, 0x00	; 0
     462:	01 c0       	rjmp	.+2      	; 0x466 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     464:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     466:	01 15       	cp	r16, r1
     468:	11 05       	cpc	r17, r1
     46a:	09 f4       	brne	.+2      	; 0x46e <pvPortMalloc+0x52>
     46c:	69 c0       	rjmp	.+210    	; 0x540 <pvPortMalloc+0x124>
     46e:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <xFreeBytesRemaining>
     472:	90 91 d9 06 	lds	r25, 0x06D9	; 0x8006d9 <xFreeBytesRemaining+0x1>
     476:	80 17       	cp	r24, r16
     478:	91 07       	cpc	r25, r17
     47a:	08 f4       	brcc	.+2      	; 0x47e <pvPortMalloc+0x62>
     47c:	64 c0       	rjmp	.+200    	; 0x546 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     47e:	c0 91 dc 06 	lds	r28, 0x06DC	; 0x8006dc <xStart>
     482:	d0 91 dd 06 	lds	r29, 0x06DD	; 0x8006dd <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     486:	ec ed       	ldi	r30, 0xDC	; 220
     488:	f6 e0       	ldi	r31, 0x06	; 6
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     48a:	02 c0       	rjmp	.+4      	; 0x490 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     48c:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     48e:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     490:	8a 81       	ldd	r24, Y+2	; 0x02
     492:	9b 81       	ldd	r25, Y+3	; 0x03
     494:	80 17       	cp	r24, r16
     496:	91 07       	cpc	r25, r17
     498:	20 f4       	brcc	.+8      	; 0x4a2 <pvPortMalloc+0x86>
     49a:	88 81       	ld	r24, Y
     49c:	99 81       	ldd	r25, Y+1	; 0x01
     49e:	00 97       	sbiw	r24, 0x00	; 0
     4a0:	a9 f7       	brne	.-22     	; 0x48c <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     4a2:	80 91 da 06 	lds	r24, 0x06DA	; 0x8006da <pxEnd>
     4a6:	90 91 db 06 	lds	r25, 0x06DB	; 0x8006db <pxEnd+0x1>
     4aa:	c8 17       	cp	r28, r24
     4ac:	d9 07       	cpc	r29, r25
     4ae:	09 f4       	brne	.+2      	; 0x4b2 <pvPortMalloc+0x96>
     4b0:	4d c0       	rjmp	.+154    	; 0x54c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     4b2:	e0 80       	ld	r14, Z
     4b4:	f1 80       	ldd	r15, Z+1	; 0x01
     4b6:	84 e0       	ldi	r24, 0x04	; 4
     4b8:	e8 0e       	add	r14, r24
     4ba:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     4bc:	88 81       	ld	r24, Y
     4be:	99 81       	ldd	r25, Y+1	; 0x01
     4c0:	91 83       	std	Z+1, r25	; 0x01
     4c2:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     4c4:	2a 81       	ldd	r18, Y+2	; 0x02
     4c6:	3b 81       	ldd	r19, Y+3	; 0x03
     4c8:	20 1b       	sub	r18, r16
     4ca:	31 0b       	sbc	r19, r17
     4cc:	29 30       	cpi	r18, 0x09	; 9
     4ce:	31 05       	cpc	r19, r1
     4d0:	48 f0       	brcs	.+18     	; 0x4e4 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     4d2:	ce 01       	movw	r24, r28
     4d4:	80 0f       	add	r24, r16
     4d6:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     4d8:	fc 01       	movw	r30, r24
     4da:	33 83       	std	Z+3, r19	; 0x03
     4dc:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     4de:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     4e0:	0a 83       	std	Y+2, r16	; 0x02
     4e2:	52 df       	rcall	.-348    	; 0x388 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     4e4:	2a 81       	ldd	r18, Y+2	; 0x02
     4e6:	3b 81       	ldd	r19, Y+3	; 0x03
     4e8:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <xFreeBytesRemaining>
     4ec:	90 91 d9 06 	lds	r25, 0x06D9	; 0x8006d9 <xFreeBytesRemaining+0x1>
     4f0:	82 1b       	sub	r24, r18
     4f2:	93 0b       	sbc	r25, r19
     4f4:	90 93 d9 06 	sts	0x06D9, r25	; 0x8006d9 <xFreeBytesRemaining+0x1>
     4f8:	80 93 d8 06 	sts	0x06D8, r24	; 0x8006d8 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     4fc:	40 91 d6 06 	lds	r20, 0x06D6	; 0x8006d6 <xMinimumEverFreeBytesRemaining>
     500:	50 91 d7 06 	lds	r21, 0x06D7	; 0x8006d7 <xMinimumEverFreeBytesRemaining+0x1>
     504:	84 17       	cp	r24, r20
     506:	95 07       	cpc	r25, r21
     508:	20 f4       	brcc	.+8      	; 0x512 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     50a:	90 93 d7 06 	sts	0x06D7, r25	; 0x8006d7 <xMinimumEverFreeBytesRemaining+0x1>
     50e:	80 93 d6 06 	sts	0x06D6, r24	; 0x8006d6 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     512:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <__data_end>
     516:	90 91 d1 06 	lds	r25, 0x06D1	; 0x8006d1 <__data_end+0x1>
     51a:	28 2b       	or	r18, r24
     51c:	39 2b       	or	r19, r25
     51e:	3b 83       	std	Y+3, r19	; 0x03
     520:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     522:	19 82       	std	Y+1, r1	; 0x01
     524:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     526:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <xNumberOfSuccessfulAllocations>
     52a:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <xNumberOfSuccessfulAllocations+0x1>
     52e:	01 96       	adiw	r24, 0x01	; 1
     530:	90 93 d5 06 	sts	0x06D5, r25	; 0x8006d5 <xNumberOfSuccessfulAllocations+0x1>
     534:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <xNumberOfSuccessfulAllocations>
     538:	0b c0       	rjmp	.+22     	; 0x550 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     53a:	e1 2c       	mov	r14, r1
     53c:	f1 2c       	mov	r15, r1
     53e:	08 c0       	rjmp	.+16     	; 0x550 <pvPortMalloc+0x134>
     540:	e1 2c       	mov	r14, r1
     542:	f1 2c       	mov	r15, r1
     544:	05 c0       	rjmp	.+10     	; 0x550 <pvPortMalloc+0x134>
     546:	e1 2c       	mov	r14, r1
     548:	f1 2c       	mov	r15, r1
     54a:	02 c0       	rjmp	.+4      	; 0x550 <pvPortMalloc+0x134>
     54c:	e1 2c       	mov	r14, r1
     54e:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     550:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     554:	e1 14       	cp	r14, r1
     556:	f1 04       	cpc	r15, r1
     558:	11 f4       	brne	.+4      	; 0x55e <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     55a:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     55e:	c7 01       	movw	r24, r14
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	ff 90       	pop	r15
     56a:	ef 90       	pop	r14
     56c:	08 95       	ret

0000056e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     576:	00 97       	sbiw	r24, 0x00	; 0
     578:	91 f1       	breq	.+100    	; 0x5de <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     57a:	ec 01       	movw	r28, r24
     57c:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     57e:	4a 81       	ldd	r20, Y+2	; 0x02
     580:	5b 81       	ldd	r21, Y+3	; 0x03
     582:	20 91 d0 06 	lds	r18, 0x06D0	; 0x8006d0 <__data_end>
     586:	30 91 d1 06 	lds	r19, 0x06D1	; 0x8006d1 <__data_end+0x1>
     58a:	ba 01       	movw	r22, r20
     58c:	62 23       	and	r22, r18
     58e:	73 23       	and	r23, r19
     590:	67 2b       	or	r22, r23
     592:	29 f1       	breq	.+74     	; 0x5de <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     594:	68 81       	ld	r22, Y
     596:	79 81       	ldd	r23, Y+1	; 0x01
     598:	67 2b       	or	r22, r23
     59a:	09 f5       	brne	.+66     	; 0x5de <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     59c:	20 95       	com	r18
     59e:	30 95       	com	r19
     5a0:	24 23       	and	r18, r20
     5a2:	35 23       	and	r19, r21
     5a4:	3b 83       	std	Y+3, r19	; 0x03
     5a6:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     5a8:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     5ac:	8a 81       	ldd	r24, Y+2	; 0x02
     5ae:	9b 81       	ldd	r25, Y+3	; 0x03
     5b0:	20 91 d8 06 	lds	r18, 0x06D8	; 0x8006d8 <xFreeBytesRemaining>
     5b4:	30 91 d9 06 	lds	r19, 0x06D9	; 0x8006d9 <xFreeBytesRemaining+0x1>
     5b8:	82 0f       	add	r24, r18
     5ba:	93 1f       	adc	r25, r19
     5bc:	90 93 d9 06 	sts	0x06D9, r25	; 0x8006d9 <xFreeBytesRemaining+0x1>
     5c0:	80 93 d8 06 	sts	0x06D8, r24	; 0x8006d8 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     5c4:	ce 01       	movw	r24, r28
     5c6:	e0 de       	rcall	.-576    	; 0x388 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     5c8:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <xNumberOfSuccessfulFrees>
     5cc:	90 91 d3 06 	lds	r25, 0x06D3	; 0x8006d3 <xNumberOfSuccessfulFrees+0x1>
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	90 93 d3 06 	sts	0x06D3, r25	; 0x8006d3 <xNumberOfSuccessfulFrees+0x1>
     5d6:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     5da:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	08 95       	ret

000005e8 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     5e8:	fc 01       	movw	r30, r24
     5ea:	03 96       	adiw	r24, 0x03	; 3
     5ec:	92 83       	std	Z+2, r25	; 0x02
     5ee:	81 83       	std	Z+1, r24	; 0x01
     5f0:	4f ef       	ldi	r20, 0xFF	; 255
     5f2:	5f ef       	ldi	r21, 0xFF	; 255
     5f4:	ba 01       	movw	r22, r20
     5f6:	43 83       	std	Z+3, r20	; 0x03
     5f8:	54 83       	std	Z+4, r21	; 0x04
     5fa:	65 83       	std	Z+5, r22	; 0x05
     5fc:	76 83       	std	Z+6, r23	; 0x06
     5fe:	90 87       	std	Z+8, r25	; 0x08
     600:	87 83       	std	Z+7, r24	; 0x07
     602:	92 87       	std	Z+10, r25	; 0x0a
     604:	81 87       	std	Z+9, r24	; 0x09
     606:	10 82       	st	Z, r1
     608:	08 95       	ret

0000060a <vListInitialiseItem>:
     60a:	fc 01       	movw	r30, r24
     60c:	13 86       	std	Z+11, r1	; 0x0b
     60e:	12 86       	std	Z+10, r1	; 0x0a
     610:	08 95       	ret

00000612 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     61c:	08 81       	ld	r16, Y
     61e:	19 81       	ldd	r17, Y+1	; 0x01
     620:	2a 81       	ldd	r18, Y+2	; 0x02
     622:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     624:	0f 3f       	cpi	r16, 0xFF	; 255
     626:	4f ef       	ldi	r20, 0xFF	; 255
     628:	14 07       	cpc	r17, r20
     62a:	24 07       	cpc	r18, r20
     62c:	34 07       	cpc	r19, r20
     62e:	21 f4       	brne	.+8      	; 0x638 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     630:	fc 01       	movw	r30, r24
     632:	a1 85       	ldd	r26, Z+9	; 0x09
     634:	b2 85       	ldd	r27, Z+10	; 0x0a
     636:	11 c0       	rjmp	.+34     	; 0x65a <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     638:	dc 01       	movw	r26, r24
     63a:	13 96       	adiw	r26, 0x03	; 3
     63c:	01 c0       	rjmp	.+2      	; 0x640 <vListInsert+0x2e>
     63e:	df 01       	movw	r26, r30
     640:	14 96       	adiw	r26, 0x04	; 4
     642:	ed 91       	ld	r30, X+
     644:	fc 91       	ld	r31, X
     646:	15 97       	sbiw	r26, 0x05	; 5
     648:	40 81       	ld	r20, Z
     64a:	51 81       	ldd	r21, Z+1	; 0x01
     64c:	62 81       	ldd	r22, Z+2	; 0x02
     64e:	73 81       	ldd	r23, Z+3	; 0x03
     650:	04 17       	cp	r16, r20
     652:	15 07       	cpc	r17, r21
     654:	26 07       	cpc	r18, r22
     656:	37 07       	cpc	r19, r23
     658:	90 f7       	brcc	.-28     	; 0x63e <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     65a:	14 96       	adiw	r26, 0x04	; 4
     65c:	ed 91       	ld	r30, X+
     65e:	fc 91       	ld	r31, X
     660:	15 97       	sbiw	r26, 0x05	; 5
     662:	fd 83       	std	Y+5, r31	; 0x05
     664:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     666:	d7 83       	std	Z+7, r29	; 0x07
     668:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     66a:	bf 83       	std	Y+7, r27	; 0x07
     66c:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     66e:	15 96       	adiw	r26, 0x05	; 5
     670:	dc 93       	st	X, r29
     672:	ce 93       	st	-X, r28
     674:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     676:	9b 87       	std	Y+11, r25	; 0x0b
     678:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     67a:	fc 01       	movw	r30, r24
     67c:	20 81       	ld	r18, Z
     67e:	2f 5f       	subi	r18, 0xFF	; 255
     680:	20 83       	st	Z, r18
}
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	08 95       	ret

0000068c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     692:	a2 85       	ldd	r26, Z+10	; 0x0a
     694:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     696:	c4 81       	ldd	r28, Z+4	; 0x04
     698:	d5 81       	ldd	r29, Z+5	; 0x05
     69a:	86 81       	ldd	r24, Z+6	; 0x06
     69c:	97 81       	ldd	r25, Z+7	; 0x07
     69e:	9f 83       	std	Y+7, r25	; 0x07
     6a0:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     6a2:	c6 81       	ldd	r28, Z+6	; 0x06
     6a4:	d7 81       	ldd	r29, Z+7	; 0x07
     6a6:	84 81       	ldd	r24, Z+4	; 0x04
     6a8:	95 81       	ldd	r25, Z+5	; 0x05
     6aa:	9d 83       	std	Y+5, r25	; 0x05
     6ac:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     6ae:	11 96       	adiw	r26, 0x01	; 1
     6b0:	8d 91       	ld	r24, X+
     6b2:	9c 91       	ld	r25, X
     6b4:	12 97       	sbiw	r26, 0x02	; 2
     6b6:	e8 17       	cp	r30, r24
     6b8:	f9 07       	cpc	r31, r25
     6ba:	31 f4       	brne	.+12     	; 0x6c8 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     6bc:	86 81       	ldd	r24, Z+6	; 0x06
     6be:	97 81       	ldd	r25, Z+7	; 0x07
     6c0:	12 96       	adiw	r26, 0x02	; 2
     6c2:	9c 93       	st	X, r25
     6c4:	8e 93       	st	-X, r24
     6c6:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     6c8:	13 86       	std	Z+11, r1	; 0x0b
     6ca:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     6cc:	8c 91       	ld	r24, X
     6ce:	81 50       	subi	r24, 0x01	; 1
     6d0:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     6d2:	8c 91       	ld	r24, X
}
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     6da:	a8 95       	wdr
     6dc:	90 ec       	ldi	r25, 0xC0	; 192
     6de:	88 e1       	ldi	r24, 0x18	; 24
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	f8 94       	cli
     6e4:	a8 95       	wdr
     6e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     6f0:	08 95       	ret

000006f2 <pxPortInitialiseStack>:
     6f2:	fc 01       	movw	r30, r24
     6f4:	60 83       	st	Z, r22
     6f6:	31 97       	sbiw	r30, 0x01	; 1
     6f8:	70 83       	st	Z, r23
     6fa:	31 97       	sbiw	r30, 0x01	; 1
     6fc:	10 82       	st	Z, r1
     6fe:	31 97       	sbiw	r30, 0x01	; 1
     700:	10 82       	st	Z, r1
     702:	31 97       	sbiw	r30, 0x01	; 1
     704:	20 e8       	ldi	r18, 0x80	; 128
     706:	20 83       	st	Z, r18
     708:	31 97       	sbiw	r30, 0x01	; 1
     70a:	10 82       	st	Z, r1
     70c:	31 97       	sbiw	r30, 0x01	; 1
     70e:	10 82       	st	Z, r1
     710:	31 97       	sbiw	r30, 0x01	; 1
     712:	10 82       	st	Z, r1
     714:	77 97       	sbiw	r30, 0x17	; 23
     716:	40 83       	st	Z, r20
     718:	31 97       	sbiw	r30, 0x01	; 1
     71a:	50 83       	st	Z, r21
     71c:	86 97       	sbiw	r24, 0x26	; 38
     71e:	08 95       	ret

00000720 <xPortStartScheduler>:
     720:	dc df       	rcall	.-72     	; 0x6da <prvSetupTimerInterrupt>
     722:	a0 91 63 11 	lds	r26, 0x1163	; 0x801163 <pxCurrentTCB>
     726:	b0 91 64 11 	lds	r27, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
     72a:	cd 91       	ld	r28, X+
     72c:	cd bf       	out	0x3d, r28	; 61
     72e:	dd 91       	ld	r29, X+
     730:	de bf       	out	0x3e, r29	; 62
     732:	ff 91       	pop	r31
     734:	ef 91       	pop	r30
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	bf 91       	pop	r27
     73c:	af 91       	pop	r26
     73e:	9f 91       	pop	r25
     740:	8f 91       	pop	r24
     742:	7f 91       	pop	r23
     744:	6f 91       	pop	r22
     746:	5f 91       	pop	r21
     748:	4f 91       	pop	r20
     74a:	3f 91       	pop	r19
     74c:	2f 91       	pop	r18
     74e:	1f 91       	pop	r17
     750:	0f 91       	pop	r16
     752:	ff 90       	pop	r15
     754:	ef 90       	pop	r14
     756:	df 90       	pop	r13
     758:	cf 90       	pop	r12
     75a:	bf 90       	pop	r11
     75c:	af 90       	pop	r10
     75e:	9f 90       	pop	r9
     760:	8f 90       	pop	r8
     762:	7f 90       	pop	r7
     764:	6f 90       	pop	r6
     766:	5f 90       	pop	r5
     768:	4f 90       	pop	r4
     76a:	3f 90       	pop	r3
     76c:	2f 90       	pop	r2
     76e:	1f 90       	pop	r1
     770:	0f 90       	pop	r0
     772:	0c be       	out	0x3c, r0	; 60
     774:	0f 90       	pop	r0
     776:	0b be       	out	0x3b, r0	; 59
     778:	0f 90       	pop	r0
     77a:	0f be       	out	0x3f, r0	; 63
     77c:	0f 90       	pop	r0
     77e:	08 95       	ret
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	08 95       	ret

00000784 <vPortYield>:
     784:	0f 92       	push	r0
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	0f 92       	push	r0
     78c:	0b b6       	in	r0, 0x3b	; 59
     78e:	0f 92       	push	r0
     790:	0c b6       	in	r0, 0x3c	; 60
     792:	0f 92       	push	r0
     794:	1f 92       	push	r1
     796:	11 24       	eor	r1, r1
     798:	2f 92       	push	r2
     79a:	3f 92       	push	r3
     79c:	4f 92       	push	r4
     79e:	5f 92       	push	r5
     7a0:	6f 92       	push	r6
     7a2:	7f 92       	push	r7
     7a4:	8f 92       	push	r8
     7a6:	9f 92       	push	r9
     7a8:	af 92       	push	r10
     7aa:	bf 92       	push	r11
     7ac:	cf 92       	push	r12
     7ae:	df 92       	push	r13
     7b0:	ef 92       	push	r14
     7b2:	ff 92       	push	r15
     7b4:	0f 93       	push	r16
     7b6:	1f 93       	push	r17
     7b8:	2f 93       	push	r18
     7ba:	3f 93       	push	r19
     7bc:	4f 93       	push	r20
     7be:	5f 93       	push	r21
     7c0:	6f 93       	push	r22
     7c2:	7f 93       	push	r23
     7c4:	8f 93       	push	r24
     7c6:	9f 93       	push	r25
     7c8:	af 93       	push	r26
     7ca:	bf 93       	push	r27
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	ef 93       	push	r30
     7d2:	ff 93       	push	r31
     7d4:	a0 91 63 11 	lds	r26, 0x1163	; 0x801163 <pxCurrentTCB>
     7d8:	b0 91 64 11 	lds	r27, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
     7dc:	0d b6       	in	r0, 0x3d	; 61
     7de:	0d 92       	st	X+, r0
     7e0:	0e b6       	in	r0, 0x3e	; 62
     7e2:	0d 92       	st	X+, r0
     7e4:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <vTaskSwitchContext>
     7e8:	a0 91 63 11 	lds	r26, 0x1163	; 0x801163 <pxCurrentTCB>
     7ec:	b0 91 64 11 	lds	r27, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
     7f0:	cd 91       	ld	r28, X+
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	dd 91       	ld	r29, X+
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	ff 91       	pop	r31
     7fa:	ef 91       	pop	r30
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	bf 91       	pop	r27
     802:	af 91       	pop	r26
     804:	9f 91       	pop	r25
     806:	8f 91       	pop	r24
     808:	7f 91       	pop	r23
     80a:	6f 91       	pop	r22
     80c:	5f 91       	pop	r21
     80e:	4f 91       	pop	r20
     810:	3f 91       	pop	r19
     812:	2f 91       	pop	r18
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	ff 90       	pop	r15
     81a:	ef 90       	pop	r14
     81c:	df 90       	pop	r13
     81e:	cf 90       	pop	r12
     820:	bf 90       	pop	r11
     822:	af 90       	pop	r10
     824:	9f 90       	pop	r9
     826:	8f 90       	pop	r8
     828:	7f 90       	pop	r7
     82a:	6f 90       	pop	r6
     82c:	5f 90       	pop	r5
     82e:	4f 90       	pop	r4
     830:	3f 90       	pop	r3
     832:	2f 90       	pop	r2
     834:	1f 90       	pop	r1
     836:	0f 90       	pop	r0
     838:	0c be       	out	0x3c, r0	; 60
     83a:	0f 90       	pop	r0
     83c:	0b be       	out	0x3b, r0	; 59
     83e:	0f 90       	pop	r0
     840:	0f be       	out	0x3f, r0	; 63
     842:	0f 90       	pop	r0
     844:	08 95       	ret

00000846 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     846:	0f 92       	push	r0
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	f8 94       	cli
     84c:	0f 92       	push	r0
     84e:	0b b6       	in	r0, 0x3b	; 59
     850:	0f 92       	push	r0
     852:	0c b6       	in	r0, 0x3c	; 60
     854:	0f 92       	push	r0
     856:	1f 92       	push	r1
     858:	11 24       	eor	r1, r1
     85a:	2f 92       	push	r2
     85c:	3f 92       	push	r3
     85e:	4f 92       	push	r4
     860:	5f 92       	push	r5
     862:	6f 92       	push	r6
     864:	7f 92       	push	r7
     866:	8f 92       	push	r8
     868:	9f 92       	push	r9
     86a:	af 92       	push	r10
     86c:	bf 92       	push	r11
     86e:	cf 92       	push	r12
     870:	df 92       	push	r13
     872:	ef 92       	push	r14
     874:	ff 92       	push	r15
     876:	0f 93       	push	r16
     878:	1f 93       	push	r17
     87a:	2f 93       	push	r18
     87c:	3f 93       	push	r19
     87e:	4f 93       	push	r20
     880:	5f 93       	push	r21
     882:	6f 93       	push	r22
     884:	7f 93       	push	r23
     886:	8f 93       	push	r24
     888:	9f 93       	push	r25
     88a:	af 93       	push	r26
     88c:	bf 93       	push	r27
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	ef 93       	push	r30
     894:	ff 93       	push	r31
     896:	a0 91 63 11 	lds	r26, 0x1163	; 0x801163 <pxCurrentTCB>
     89a:	b0 91 64 11 	lds	r27, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
     89e:	0d b6       	in	r0, 0x3d	; 61
     8a0:	0d 92       	st	X+, r0
     8a2:	0e b6       	in	r0, 0x3e	; 62
     8a4:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     8a6:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     8a8:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <xTaskIncrementTick>
     8ac:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     8ae:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     8b2:	a0 91 63 11 	lds	r26, 0x1163	; 0x801163 <pxCurrentTCB>
     8b6:	b0 91 64 11 	lds	r27, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
     8ba:	cd 91       	ld	r28, X+
     8bc:	cd bf       	out	0x3d, r28	; 61
     8be:	dd 91       	ld	r29, X+
     8c0:	de bf       	out	0x3e, r29	; 62
     8c2:	ff 91       	pop	r31
     8c4:	ef 91       	pop	r30
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	bf 91       	pop	r27
     8cc:	af 91       	pop	r26
     8ce:	9f 91       	pop	r25
     8d0:	8f 91       	pop	r24
     8d2:	7f 91       	pop	r23
     8d4:	6f 91       	pop	r22
     8d6:	5f 91       	pop	r21
     8d8:	4f 91       	pop	r20
     8da:	3f 91       	pop	r19
     8dc:	2f 91       	pop	r18
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	ff 90       	pop	r15
     8e4:	ef 90       	pop	r14
     8e6:	df 90       	pop	r13
     8e8:	cf 90       	pop	r12
     8ea:	bf 90       	pop	r11
     8ec:	af 90       	pop	r10
     8ee:	9f 90       	pop	r9
     8f0:	8f 90       	pop	r8
     8f2:	7f 90       	pop	r7
     8f4:	6f 90       	pop	r6
     8f6:	5f 90       	pop	r5
     8f8:	4f 90       	pop	r4
     8fa:	3f 90       	pop	r3
     8fc:	2f 90       	pop	r2
     8fe:	1f 90       	pop	r1
     900:	0f 90       	pop	r0
     902:	0c be       	out	0x3c, r0	; 60
     904:	0f 90       	pop	r0
     906:	0b be       	out	0x3b, r0	; 59
     908:	0f 90       	pop	r0
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     90e:	08 95       	ret

00000910 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     910:	9a df       	rcall	.-204    	; 0x846 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     912:	18 95       	reti

00000914 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	f8 94       	cli
     918:	0f 92       	push	r0
     91a:	fc 01       	movw	r30, r24
     91c:	86 8d       	ldd	r24, Z+30	; 0x1e
     91e:	81 11       	cpse	r24, r1
     920:	02 c0       	rjmp	.+4      	; 0x926 <prvIsQueueEmpty+0x12>
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	01 c0       	rjmp	.+2      	; 0x928 <prvIsQueueEmpty+0x14>
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	0f 90       	pop	r0
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	08 95       	ret

0000092e <prvIsQueueFull>:
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	0f 92       	push	r0
     934:	fc 01       	movw	r30, r24
     936:	26 8d       	ldd	r18, Z+30	; 0x1e
     938:	87 8d       	ldd	r24, Z+31	; 0x1f
     93a:	28 13       	cpse	r18, r24
     93c:	02 c0       	rjmp	.+4      	; 0x942 <prvIsQueueFull+0x14>
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	01 c0       	rjmp	.+2      	; 0x944 <prvIsQueueFull+0x16>
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	0f 90       	pop	r0
     946:	0f be       	out	0x3f, r0	; 63
     948:	08 95       	ret

0000094a <prvCopyDataToQueue>:
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
     954:	04 2f       	mov	r16, r20
     956:	1e 8d       	ldd	r17, Y+30	; 0x1e
     958:	48 a1       	ldd	r20, Y+32	; 0x20
     95a:	41 11       	cpse	r20, r1
     95c:	0c c0       	rjmp	.+24     	; 0x976 <prvCopyDataToQueue+0x2c>
     95e:	88 81       	ld	r24, Y
     960:	99 81       	ldd	r25, Y+1	; 0x01
     962:	89 2b       	or	r24, r25
     964:	09 f0       	breq	.+2      	; 0x968 <prvCopyDataToQueue+0x1e>
     966:	42 c0       	rjmp	.+132    	; 0x9ec <prvCopyDataToQueue+0xa2>
     968:	8c 81       	ldd	r24, Y+4	; 0x04
     96a:	9d 81       	ldd	r25, Y+5	; 0x05
     96c:	0e 94 b0 11 	call	0x2360	; 0x2360 <xTaskPriorityDisinherit>
     970:	1d 82       	std	Y+5, r1	; 0x05
     972:	1c 82       	std	Y+4, r1	; 0x04
     974:	42 c0       	rjmp	.+132    	; 0x9fa <prvCopyDataToQueue+0xb0>
     976:	01 11       	cpse	r16, r1
     978:	17 c0       	rjmp	.+46     	; 0x9a8 <prvCopyDataToQueue+0x5e>
     97a:	50 e0       	ldi	r21, 0x00	; 0
     97c:	8a 81       	ldd	r24, Y+2	; 0x02
     97e:	9b 81       	ldd	r25, Y+3	; 0x03
     980:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <memcpy>
     984:	28 a1       	ldd	r18, Y+32	; 0x20
     986:	8a 81       	ldd	r24, Y+2	; 0x02
     988:	9b 81       	ldd	r25, Y+3	; 0x03
     98a:	82 0f       	add	r24, r18
     98c:	91 1d       	adc	r25, r1
     98e:	9b 83       	std	Y+3, r25	; 0x03
     990:	8a 83       	std	Y+2, r24	; 0x02
     992:	2c 81       	ldd	r18, Y+4	; 0x04
     994:	3d 81       	ldd	r19, Y+5	; 0x05
     996:	82 17       	cp	r24, r18
     998:	93 07       	cpc	r25, r19
     99a:	50 f1       	brcs	.+84     	; 0x9f0 <prvCopyDataToQueue+0xa6>
     99c:	88 81       	ld	r24, Y
     99e:	99 81       	ldd	r25, Y+1	; 0x01
     9a0:	9b 83       	std	Y+3, r25	; 0x03
     9a2:	8a 83       	std	Y+2, r24	; 0x02
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	29 c0       	rjmp	.+82     	; 0x9fa <prvCopyDataToQueue+0xb0>
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	8e 81       	ldd	r24, Y+6	; 0x06
     9ac:	9f 81       	ldd	r25, Y+7	; 0x07
     9ae:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <memcpy>
     9b2:	88 a1       	ldd	r24, Y+32	; 0x20
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	91 95       	neg	r25
     9b8:	81 95       	neg	r24
     9ba:	91 09       	sbc	r25, r1
     9bc:	2e 81       	ldd	r18, Y+6	; 0x06
     9be:	3f 81       	ldd	r19, Y+7	; 0x07
     9c0:	28 0f       	add	r18, r24
     9c2:	39 1f       	adc	r19, r25
     9c4:	3f 83       	std	Y+7, r19	; 0x07
     9c6:	2e 83       	std	Y+6, r18	; 0x06
     9c8:	48 81       	ld	r20, Y
     9ca:	59 81       	ldd	r21, Y+1	; 0x01
     9cc:	24 17       	cp	r18, r20
     9ce:	35 07       	cpc	r19, r21
     9d0:	30 f4       	brcc	.+12     	; 0x9de <prvCopyDataToQueue+0x94>
     9d2:	2c 81       	ldd	r18, Y+4	; 0x04
     9d4:	3d 81       	ldd	r19, Y+5	; 0x05
     9d6:	82 0f       	add	r24, r18
     9d8:	93 1f       	adc	r25, r19
     9da:	9f 83       	std	Y+7, r25	; 0x07
     9dc:	8e 83       	std	Y+6, r24	; 0x06
     9de:	02 30       	cpi	r16, 0x02	; 2
     9e0:	49 f4       	brne	.+18     	; 0x9f4 <prvCopyDataToQueue+0xaa>
     9e2:	11 23       	and	r17, r17
     9e4:	49 f0       	breq	.+18     	; 0x9f8 <prvCopyDataToQueue+0xae>
     9e6:	11 50       	subi	r17, 0x01	; 1
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	07 c0       	rjmp	.+14     	; 0x9fa <prvCopyDataToQueue+0xb0>
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	05 c0       	rjmp	.+10     	; 0x9fa <prvCopyDataToQueue+0xb0>
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	03 c0       	rjmp	.+6      	; 0x9fa <prvCopyDataToQueue+0xb0>
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <prvCopyDataToQueue+0xb0>
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	1f 5f       	subi	r17, 0xFF	; 255
     9fc:	1e 8f       	std	Y+30, r17	; 0x1e
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	1f 91       	pop	r17
     a04:	0f 91       	pop	r16
     a06:	08 95       	ret

00000a08 <prvCopyDataFromQueue>:
     a08:	fc 01       	movw	r30, r24
     a0a:	40 a1       	ldd	r20, Z+32	; 0x20
     a0c:	44 23       	and	r20, r20
     a0e:	a9 f0       	breq	.+42     	; 0xa3a <prvCopyDataFromQueue+0x32>
     a10:	50 e0       	ldi	r21, 0x00	; 0
     a12:	26 81       	ldd	r18, Z+6	; 0x06
     a14:	37 81       	ldd	r19, Z+7	; 0x07
     a16:	24 0f       	add	r18, r20
     a18:	35 1f       	adc	r19, r21
     a1a:	37 83       	std	Z+7, r19	; 0x07
     a1c:	26 83       	std	Z+6, r18	; 0x06
     a1e:	84 81       	ldd	r24, Z+4	; 0x04
     a20:	95 81       	ldd	r25, Z+5	; 0x05
     a22:	28 17       	cp	r18, r24
     a24:	39 07       	cpc	r19, r25
     a26:	20 f0       	brcs	.+8      	; 0xa30 <prvCopyDataFromQueue+0x28>
     a28:	80 81       	ld	r24, Z
     a2a:	91 81       	ldd	r25, Z+1	; 0x01
     a2c:	97 83       	std	Z+7, r25	; 0x07
     a2e:	86 83       	std	Z+6, r24	; 0x06
     a30:	cb 01       	movw	r24, r22
     a32:	66 81       	ldd	r22, Z+6	; 0x06
     a34:	77 81       	ldd	r23, Z+7	; 0x07
     a36:	0c 94 3f 2e 	jmp	0x5c7e	; 0x5c7e <memcpy>
     a3a:	08 95       	ret

00000a3c <prvUnlockQueue>:
     a3c:	1f 93       	push	r17
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	ec 01       	movw	r28, r24
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	f8 94       	cli
     a48:	0f 92       	push	r0
     a4a:	1a a1       	ldd	r17, Y+34	; 0x22
     a4c:	0b c0       	rjmp	.+22     	; 0xa64 <prvUnlockQueue+0x28>
     a4e:	8b 89       	ldd	r24, Y+19	; 0x13
     a50:	88 23       	and	r24, r24
     a52:	51 f0       	breq	.+20     	; 0xa68 <prvUnlockQueue+0x2c>
     a54:	ce 01       	movw	r24, r28
     a56:	43 96       	adiw	r24, 0x13	; 19
     a58:	0e 94 5d 10 	call	0x20ba	; 0x20ba <xTaskRemoveFromEventList>
     a5c:	81 11       	cpse	r24, r1
     a5e:	0e 94 99 11 	call	0x2332	; 0x2332 <vTaskMissedYield>
     a62:	11 50       	subi	r17, 0x01	; 1
     a64:	11 16       	cp	r1, r17
     a66:	9c f3       	brlt	.-26     	; 0xa4e <prvUnlockQueue+0x12>
     a68:	8f ef       	ldi	r24, 0xFF	; 255
     a6a:	8a a3       	std	Y+34, r24	; 0x22
     a6c:	0f 90       	pop	r0
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	0f b6       	in	r0, 0x3f	; 63
     a72:	f8 94       	cli
     a74:	0f 92       	push	r0
     a76:	19 a1       	ldd	r17, Y+33	; 0x21
     a78:	0b c0       	rjmp	.+22     	; 0xa90 <prvUnlockQueue+0x54>
     a7a:	88 85       	ldd	r24, Y+8	; 0x08
     a7c:	88 23       	and	r24, r24
     a7e:	51 f0       	breq	.+20     	; 0xa94 <prvUnlockQueue+0x58>
     a80:	ce 01       	movw	r24, r28
     a82:	08 96       	adiw	r24, 0x08	; 8
     a84:	0e 94 5d 10 	call	0x20ba	; 0x20ba <xTaskRemoveFromEventList>
     a88:	81 11       	cpse	r24, r1
     a8a:	0e 94 99 11 	call	0x2332	; 0x2332 <vTaskMissedYield>
     a8e:	11 50       	subi	r17, 0x01	; 1
     a90:	11 16       	cp	r1, r17
     a92:	9c f3       	brlt	.-26     	; 0xa7a <prvUnlockQueue+0x3e>
     a94:	8f ef       	ldi	r24, 0xFF	; 255
     a96:	89 a3       	std	Y+33, r24	; 0x21
     a98:	0f 90       	pop	r0
     a9a:	0f be       	out	0x3f, r0	; 63
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	1f 91       	pop	r17
     aa2:	08 95       	ret

00000aa4 <xQueueGenericReset>:
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	ec 01       	movw	r28, r24
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	0f 92       	push	r0
     ab0:	e8 81       	ld	r30, Y
     ab2:	f9 81       	ldd	r31, Y+1	; 0x01
     ab4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ab6:	28 a1       	ldd	r18, Y+32	; 0x20
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	82 9f       	mul	r24, r18
     abe:	a0 01       	movw	r20, r0
     ac0:	83 9f       	mul	r24, r19
     ac2:	50 0d       	add	r21, r0
     ac4:	92 9f       	mul	r25, r18
     ac6:	50 0d       	add	r21, r0
     ac8:	11 24       	eor	r1, r1
     aca:	4e 0f       	add	r20, r30
     acc:	5f 1f       	adc	r21, r31
     ace:	5d 83       	std	Y+5, r21	; 0x05
     ad0:	4c 83       	std	Y+4, r20	; 0x04
     ad2:	1e 8e       	std	Y+30, r1	; 0x1e
     ad4:	fb 83       	std	Y+3, r31	; 0x03
     ad6:	ea 83       	std	Y+2, r30	; 0x02
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	28 9f       	mul	r18, r24
     adc:	a0 01       	movw	r20, r0
     ade:	29 9f       	mul	r18, r25
     ae0:	50 0d       	add	r21, r0
     ae2:	38 9f       	mul	r19, r24
     ae4:	50 0d       	add	r21, r0
     ae6:	11 24       	eor	r1, r1
     ae8:	cf 01       	movw	r24, r30
     aea:	84 0f       	add	r24, r20
     aec:	95 1f       	adc	r25, r21
     aee:	9f 83       	std	Y+7, r25	; 0x07
     af0:	8e 83       	std	Y+6, r24	; 0x06
     af2:	8f ef       	ldi	r24, 0xFF	; 255
     af4:	89 a3       	std	Y+33, r24	; 0x21
     af6:	8a a3       	std	Y+34, r24	; 0x22
     af8:	61 11       	cpse	r22, r1
     afa:	0b c0       	rjmp	.+22     	; 0xb12 <xQueueGenericReset+0x6e>
     afc:	88 85       	ldd	r24, Y+8	; 0x08
     afe:	88 23       	and	r24, r24
     b00:	71 f0       	breq	.+28     	; 0xb1e <xQueueGenericReset+0x7a>
     b02:	ce 01       	movw	r24, r28
     b04:	08 96       	adiw	r24, 0x08	; 8
     b06:	0e 94 5d 10 	call	0x20ba	; 0x20ba <xTaskRemoveFromEventList>
     b0a:	88 23       	and	r24, r24
     b0c:	41 f0       	breq	.+16     	; 0xb1e <xQueueGenericReset+0x7a>
     b0e:	3a de       	rcall	.-908    	; 0x784 <vPortYield>
     b10:	06 c0       	rjmp	.+12     	; 0xb1e <xQueueGenericReset+0x7a>
     b12:	ce 01       	movw	r24, r28
     b14:	08 96       	adiw	r24, 0x08	; 8
     b16:	68 dd       	rcall	.-1328   	; 0x5e8 <vListInitialise>
     b18:	ce 01       	movw	r24, r28
     b1a:	43 96       	adiw	r24, 0x13	; 19
     b1c:	65 dd       	rcall	.-1334   	; 0x5e8 <vListInitialise>
     b1e:	0f 90       	pop	r0
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	08 95       	ret

00000b2a <prvInitialiseNewQueue>:
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	f8 01       	movw	r30, r16
     b30:	61 11       	cpse	r22, r1
     b32:	03 c0       	rjmp	.+6      	; 0xb3a <prvInitialiseNewQueue+0x10>
     b34:	11 83       	std	Z+1, r17	; 0x01
     b36:	00 83       	st	Z, r16
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <prvInitialiseNewQueue+0x14>
     b3a:	51 83       	std	Z+1, r21	; 0x01
     b3c:	40 83       	st	Z, r20
     b3e:	87 8f       	std	Z+31, r24	; 0x1f
     b40:	60 a3       	std	Z+32, r22	; 0x20
     b42:	61 e0       	ldi	r22, 0x01	; 1
     b44:	cf 01       	movw	r24, r30
     b46:	ae df       	rcall	.-164    	; 0xaa4 <xQueueGenericReset>
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	08 95       	ret

00000b4e <xQueueGenericCreate>:
     b4e:	df 92       	push	r13
     b50:	ef 92       	push	r14
     b52:	ff 92       	push	r15
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	f8 2e       	mov	r15, r24
     b5e:	e6 2e       	mov	r14, r22
     b60:	d4 2e       	mov	r13, r20
     b62:	86 9f       	mul	r24, r22
     b64:	c0 01       	movw	r24, r0
     b66:	11 24       	eor	r1, r1
     b68:	83 96       	adiw	r24, 0x23	; 35
     b6a:	58 dc       	rcall	.-1872   	; 0x41c <pvPortMalloc>
     b6c:	ec 01       	movw	r28, r24
     b6e:	00 97       	sbiw	r24, 0x00	; 0
     b70:	41 f0       	breq	.+16     	; 0xb82 <xQueueGenericCreate+0x34>
     b72:	8c 01       	movw	r16, r24
     b74:	2d 2d       	mov	r18, r13
     b76:	ac 01       	movw	r20, r24
     b78:	4d 5d       	subi	r20, 0xDD	; 221
     b7a:	5f 4f       	sbci	r21, 0xFF	; 255
     b7c:	6e 2d       	mov	r22, r14
     b7e:	8f 2d       	mov	r24, r15
     b80:	d4 df       	rcall	.-88     	; 0xb2a <prvInitialiseNewQueue>
     b82:	ce 01       	movw	r24, r28
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	08 95       	ret

00000b94 <xQueueGenericSend>:
     b94:	cf 92       	push	r12
     b96:	df 92       	push	r13
     b98:	ef 92       	push	r14
     b9a:	ff 92       	push	r15
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	29 97       	sbiw	r28, 0x09	; 9
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	de bf       	out	0x3e, r29	; 62
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	cd bf       	out	0x3d, r28	; 61
     bb4:	7c 01       	movw	r14, r24
     bb6:	6b 01       	movw	r12, r22
     bb8:	2e 83       	std	Y+6, r18	; 0x06
     bba:	3f 83       	std	Y+7, r19	; 0x07
     bbc:	48 87       	std	Y+8, r20	; 0x08
     bbe:	59 87       	std	Y+9, r21	; 0x09
     bc0:	10 e0       	ldi	r17, 0x00	; 0
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	0f 92       	push	r0
     bc8:	f7 01       	movw	r30, r14
     bca:	96 8d       	ldd	r25, Z+30	; 0x1e
     bcc:	87 8d       	ldd	r24, Z+31	; 0x1f
     bce:	98 17       	cp	r25, r24
     bd0:	10 f0       	brcs	.+4      	; 0xbd6 <xQueueGenericSend+0x42>
     bd2:	02 30       	cpi	r16, 0x02	; 2
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <xQueueGenericSend+0x6e>
     bd6:	40 2f       	mov	r20, r16
     bd8:	b6 01       	movw	r22, r12
     bda:	c7 01       	movw	r24, r14
     bdc:	b6 de       	rcall	.-660    	; 0x94a <prvCopyDataToQueue>
     bde:	f7 01       	movw	r30, r14
     be0:	93 89       	ldd	r25, Z+19	; 0x13
     be2:	99 23       	and	r25, r25
     be4:	41 f0       	breq	.+16     	; 0xbf6 <xQueueGenericSend+0x62>
     be6:	c7 01       	movw	r24, r14
     be8:	43 96       	adiw	r24, 0x13	; 19
     bea:	0e 94 5d 10 	call	0x20ba	; 0x20ba <xTaskRemoveFromEventList>
     bee:	88 23       	and	r24, r24
     bf0:	21 f0       	breq	.+8      	; 0xbfa <xQueueGenericSend+0x66>
     bf2:	c8 dd       	rcall	.-1136   	; 0x784 <vPortYield>
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <xQueueGenericSend+0x66>
     bf6:	81 11       	cpse	r24, r1
     bf8:	c5 dd       	rcall	.-1142   	; 0x784 <vPortYield>
     bfa:	0f 90       	pop	r0
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	4a c0       	rjmp	.+148    	; 0xc96 <xQueueGenericSend+0x102>
     c02:	8e 81       	ldd	r24, Y+6	; 0x06
     c04:	9f 81       	ldd	r25, Y+7	; 0x07
     c06:	a8 85       	ldd	r26, Y+8	; 0x08
     c08:	b9 85       	ldd	r27, Y+9	; 0x09
     c0a:	89 2b       	or	r24, r25
     c0c:	8a 2b       	or	r24, r26
     c0e:	8b 2b       	or	r24, r27
     c10:	21 f4       	brne	.+8      	; 0xc1a <xQueueGenericSend+0x86>
     c12:	0f 90       	pop	r0
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	3e c0       	rjmp	.+124    	; 0xc96 <xQueueGenericSend+0x102>
     c1a:	11 11       	cpse	r17, r1
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <xQueueGenericSend+0x94>
     c1e:	ce 01       	movw	r24, r28
     c20:	01 96       	adiw	r24, 0x01	; 1
     c22:	0e 94 22 11 	call	0x2244	; 0x2244 <vTaskInternalSetTimeOutState>
     c26:	11 e0       	ldi	r17, 0x01	; 1
     c28:	0f 90       	pop	r0
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	ec d6       	rcall	.+3544   	; 0x1a06 <vTaskSuspendAll>
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	f8 94       	cli
     c32:	0f 92       	push	r0
     c34:	f7 01       	movw	r30, r14
     c36:	81 a1       	ldd	r24, Z+33	; 0x21
     c38:	8f 3f       	cpi	r24, 0xFF	; 255
     c3a:	09 f4       	brne	.+2      	; 0xc3e <xQueueGenericSend+0xaa>
     c3c:	11 a2       	std	Z+33, r1	; 0x21
     c3e:	f7 01       	movw	r30, r14
     c40:	82 a1       	ldd	r24, Z+34	; 0x22
     c42:	8f 3f       	cpi	r24, 0xFF	; 255
     c44:	09 f4       	brne	.+2      	; 0xc48 <xQueueGenericSend+0xb4>
     c46:	12 a2       	std	Z+34, r1	; 0x22
     c48:	0f 90       	pop	r0
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	be 01       	movw	r22, r28
     c4e:	6a 5f       	subi	r22, 0xFA	; 250
     c50:	7f 4f       	sbci	r23, 0xFF	; 255
     c52:	ce 01       	movw	r24, r28
     c54:	01 96       	adiw	r24, 0x01	; 1
     c56:	0e 94 33 11 	call	0x2266	; 0x2266 <xTaskCheckForTimeOut>
     c5a:	81 11       	cpse	r24, r1
     c5c:	18 c0       	rjmp	.+48     	; 0xc8e <xQueueGenericSend+0xfa>
     c5e:	c7 01       	movw	r24, r14
     c60:	66 de       	rcall	.-820    	; 0x92e <prvIsQueueFull>
     c62:	88 23       	and	r24, r24
     c64:	81 f0       	breq	.+32     	; 0xc86 <xQueueGenericSend+0xf2>
     c66:	4e 81       	ldd	r20, Y+6	; 0x06
     c68:	5f 81       	ldd	r21, Y+7	; 0x07
     c6a:	68 85       	ldd	r22, Y+8	; 0x08
     c6c:	79 85       	ldd	r23, Y+9	; 0x09
     c6e:	c7 01       	movw	r24, r14
     c70:	08 96       	adiw	r24, 0x08	; 8
     c72:	0e 94 04 10 	call	0x2008	; 0x2008 <vTaskPlaceOnEventList>
     c76:	c7 01       	movw	r24, r14
     c78:	e1 de       	rcall	.-574    	; 0xa3c <prvUnlockQueue>
     c7a:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <xTaskResumeAll>
     c7e:	81 11       	cpse	r24, r1
     c80:	a0 cf       	rjmp	.-192    	; 0xbc2 <xQueueGenericSend+0x2e>
     c82:	80 dd       	rcall	.-1280   	; 0x784 <vPortYield>
     c84:	9e cf       	rjmp	.-196    	; 0xbc2 <xQueueGenericSend+0x2e>
     c86:	c7 01       	movw	r24, r14
     c88:	d9 de       	rcall	.-590    	; 0xa3c <prvUnlockQueue>
     c8a:	fd d7       	rcall	.+4090   	; 0x1c86 <xTaskResumeAll>
     c8c:	9a cf       	rjmp	.-204    	; 0xbc2 <xQueueGenericSend+0x2e>
     c8e:	c7 01       	movw	r24, r14
     c90:	d5 de       	rcall	.-598    	; 0xa3c <prvUnlockQueue>
     c92:	f9 d7       	rcall	.+4082   	; 0x1c86 <xTaskResumeAll>
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	29 96       	adiw	r28, 0x09	; 9
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	ff 90       	pop	r15
     cac:	ef 90       	pop	r14
     cae:	df 90       	pop	r13
     cb0:	cf 90       	pop	r12
     cb2:	08 95       	ret

00000cb4 <xQueueGenericSendFromISR>:
     cb4:	ef 92       	push	r14
     cb6:	ff 92       	push	r15
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	8a 01       	movw	r16, r20
     cc2:	fc 01       	movw	r30, r24
     cc4:	56 8d       	ldd	r21, Z+30	; 0x1e
     cc6:	37 8d       	ldd	r19, Z+31	; 0x1f
     cc8:	53 17       	cp	r21, r19
     cca:	10 f0       	brcs	.+4      	; 0xcd0 <xQueueGenericSendFromISR+0x1c>
     ccc:	22 30       	cpi	r18, 0x02	; 2
     cce:	f9 f4       	brne	.+62     	; 0xd0e <xQueueGenericSendFromISR+0x5a>
     cd0:	42 2f       	mov	r20, r18
     cd2:	78 01       	movw	r14, r16
     cd4:	ec 01       	movw	r28, r24
     cd6:	1a a1       	ldd	r17, Y+34	; 0x22
     cd8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cda:	ce 01       	movw	r24, r28
     cdc:	36 de       	rcall	.-916    	; 0x94a <prvCopyDataToQueue>
     cde:	1f 3f       	cpi	r17, 0xFF	; 255
     ce0:	81 f4       	brne	.+32     	; 0xd02 <xQueueGenericSendFromISR+0x4e>
     ce2:	8b 89       	ldd	r24, Y+19	; 0x13
     ce4:	88 23       	and	r24, r24
     ce6:	a9 f0       	breq	.+42     	; 0xd12 <xQueueGenericSendFromISR+0x5e>
     ce8:	ce 01       	movw	r24, r28
     cea:	43 96       	adiw	r24, 0x13	; 19
     cec:	0e 94 5d 10 	call	0x20ba	; 0x20ba <xTaskRemoveFromEventList>
     cf0:	88 23       	and	r24, r24
     cf2:	89 f0       	breq	.+34     	; 0xd16 <xQueueGenericSendFromISR+0x62>
     cf4:	e1 14       	cp	r14, r1
     cf6:	f1 04       	cpc	r15, r1
     cf8:	81 f0       	breq	.+32     	; 0xd1a <xQueueGenericSendFromISR+0x66>
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	f7 01       	movw	r30, r14
     cfe:	80 83       	st	Z, r24
     d00:	0d c0       	rjmp	.+26     	; 0xd1c <xQueueGenericSendFromISR+0x68>
     d02:	ff 24       	eor	r15, r15
     d04:	f3 94       	inc	r15
     d06:	f1 0e       	add	r15, r17
     d08:	fa a2       	std	Y+34, r15	; 0x22
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	07 c0       	rjmp	.+14     	; 0xd1c <xQueueGenericSendFromISR+0x68>
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	05 c0       	rjmp	.+10     	; 0xd1c <xQueueGenericSendFromISR+0x68>
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	03 c0       	rjmp	.+6      	; 0xd1c <xQueueGenericSendFromISR+0x68>
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	01 c0       	rjmp	.+2      	; 0xd1c <xQueueGenericSendFromISR+0x68>
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	ff 90       	pop	r15
     d26:	ef 90       	pop	r14
     d28:	08 95       	ret

00000d2a <xQueueReceive>:
     d2a:	cf 92       	push	r12
     d2c:	df 92       	push	r13
     d2e:	ef 92       	push	r14
     d30:	ff 92       	push	r15
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	29 97       	sbiw	r28, 0x09	; 9
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	8c 01       	movw	r16, r24
     d4c:	6b 01       	movw	r12, r22
     d4e:	2e 83       	std	Y+6, r18	; 0x06
     d50:	3f 83       	std	Y+7, r19	; 0x07
     d52:	48 87       	std	Y+8, r20	; 0x08
     d54:	59 87       	std	Y+9, r21	; 0x09
     d56:	e1 2c       	mov	r14, r1
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	0f 92       	push	r0
     d5e:	f8 01       	movw	r30, r16
     d60:	f6 8c       	ldd	r15, Z+30	; 0x1e
     d62:	ff 20       	and	r15, r15
     d64:	99 f0       	breq	.+38     	; 0xd8c <xQueueReceive+0x62>
     d66:	b6 01       	movw	r22, r12
     d68:	c8 01       	movw	r24, r16
     d6a:	4e de       	rcall	.-868    	; 0xa08 <prvCopyDataFromQueue>
     d6c:	fa 94       	dec	r15
     d6e:	f8 01       	movw	r30, r16
     d70:	f6 8e       	std	Z+30, r15	; 0x1e
     d72:	80 85       	ldd	r24, Z+8	; 0x08
     d74:	88 23       	and	r24, r24
     d76:	31 f0       	breq	.+12     	; 0xd84 <xQueueReceive+0x5a>
     d78:	c8 01       	movw	r24, r16
     d7a:	08 96       	adiw	r24, 0x08	; 8
     d7c:	0e 94 5d 10 	call	0x20ba	; 0x20ba <xTaskRemoveFromEventList>
     d80:	81 11       	cpse	r24, r1
     d82:	00 dd       	rcall	.-1536   	; 0x784 <vPortYield>
     d84:	0f 90       	pop	r0
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	4f c0       	rjmp	.+158    	; 0xe2a <xQueueReceive+0x100>
     d8c:	8e 81       	ldd	r24, Y+6	; 0x06
     d8e:	9f 81       	ldd	r25, Y+7	; 0x07
     d90:	a8 85       	ldd	r26, Y+8	; 0x08
     d92:	b9 85       	ldd	r27, Y+9	; 0x09
     d94:	89 2b       	or	r24, r25
     d96:	8a 2b       	or	r24, r26
     d98:	8b 2b       	or	r24, r27
     d9a:	21 f4       	brne	.+8      	; 0xda4 <xQueueReceive+0x7a>
     d9c:	0f 90       	pop	r0
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	43 c0       	rjmp	.+134    	; 0xe2a <xQueueReceive+0x100>
     da4:	e1 10       	cpse	r14, r1
     da6:	06 c0       	rjmp	.+12     	; 0xdb4 <xQueueReceive+0x8a>
     da8:	ce 01       	movw	r24, r28
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	0e 94 22 11 	call	0x2244	; 0x2244 <vTaskInternalSetTimeOutState>
     db0:	ee 24       	eor	r14, r14
     db2:	e3 94       	inc	r14
     db4:	0f 90       	pop	r0
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	26 d6       	rcall	.+3148   	; 0x1a06 <vTaskSuspendAll>
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	0f 92       	push	r0
     dc0:	f8 01       	movw	r30, r16
     dc2:	81 a1       	ldd	r24, Z+33	; 0x21
     dc4:	8f 3f       	cpi	r24, 0xFF	; 255
     dc6:	09 f4       	brne	.+2      	; 0xdca <xQueueReceive+0xa0>
     dc8:	11 a2       	std	Z+33, r1	; 0x21
     dca:	f8 01       	movw	r30, r16
     dcc:	82 a1       	ldd	r24, Z+34	; 0x22
     dce:	8f 3f       	cpi	r24, 0xFF	; 255
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <xQueueReceive+0xaa>
     dd2:	12 a2       	std	Z+34, r1	; 0x22
     dd4:	0f 90       	pop	r0
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	be 01       	movw	r22, r28
     dda:	6a 5f       	subi	r22, 0xFA	; 250
     ddc:	7f 4f       	sbci	r23, 0xFF	; 255
     dde:	ce 01       	movw	r24, r28
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	0e 94 33 11 	call	0x2266	; 0x2266 <xTaskCheckForTimeOut>
     de6:	81 11       	cpse	r24, r1
     de8:	17 c0       	rjmp	.+46     	; 0xe18 <xQueueReceive+0xee>
     dea:	c8 01       	movw	r24, r16
     dec:	93 dd       	rcall	.-1242   	; 0x914 <prvIsQueueEmpty>
     dee:	88 23       	and	r24, r24
     df0:	79 f0       	breq	.+30     	; 0xe10 <xQueueReceive+0xe6>
     df2:	4e 81       	ldd	r20, Y+6	; 0x06
     df4:	5f 81       	ldd	r21, Y+7	; 0x07
     df6:	68 85       	ldd	r22, Y+8	; 0x08
     df8:	79 85       	ldd	r23, Y+9	; 0x09
     dfa:	c8 01       	movw	r24, r16
     dfc:	43 96       	adiw	r24, 0x13	; 19
     dfe:	0e 94 04 10 	call	0x2008	; 0x2008 <vTaskPlaceOnEventList>
     e02:	c8 01       	movw	r24, r16
     e04:	1b de       	rcall	.-970    	; 0xa3c <prvUnlockQueue>
     e06:	3f d7       	rcall	.+3710   	; 0x1c86 <xTaskResumeAll>
     e08:	81 11       	cpse	r24, r1
     e0a:	a6 cf       	rjmp	.-180    	; 0xd58 <xQueueReceive+0x2e>
     e0c:	bb dc       	rcall	.-1674   	; 0x784 <vPortYield>
     e0e:	a4 cf       	rjmp	.-184    	; 0xd58 <xQueueReceive+0x2e>
     e10:	c8 01       	movw	r24, r16
     e12:	14 de       	rcall	.-984    	; 0xa3c <prvUnlockQueue>
     e14:	38 d7       	rcall	.+3696   	; 0x1c86 <xTaskResumeAll>
     e16:	a0 cf       	rjmp	.-192    	; 0xd58 <xQueueReceive+0x2e>
     e18:	c8 01       	movw	r24, r16
     e1a:	10 de       	rcall	.-992    	; 0xa3c <prvUnlockQueue>
     e1c:	34 d7       	rcall	.+3688   	; 0x1c86 <xTaskResumeAll>
     e1e:	c8 01       	movw	r24, r16
     e20:	79 dd       	rcall	.-1294   	; 0x914 <prvIsQueueEmpty>
     e22:	88 23       	and	r24, r24
     e24:	09 f4       	brne	.+2      	; 0xe28 <xQueueReceive+0xfe>
     e26:	98 cf       	rjmp	.-208    	; 0xd58 <xQueueReceive+0x2e>
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	29 96       	adiw	r28, 0x09	; 9
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	df 90       	pop	r13
     e44:	cf 90       	pop	r12
     e46:	08 95       	ret

00000e48 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	0f 92       	push	r0
     e54:	89 a1       	ldd	r24, Y+33	; 0x21
     e56:	8f 3f       	cpi	r24, 0xFF	; 255
     e58:	09 f4       	brne	.+2      	; 0xe5c <vQueueWaitForMessageRestricted+0x14>
     e5a:	19 a2       	std	Y+33, r1	; 0x21
     e5c:	8a a1       	ldd	r24, Y+34	; 0x22
     e5e:	8f 3f       	cpi	r24, 0xFF	; 255
     e60:	09 f4       	brne	.+2      	; 0xe64 <vQueueWaitForMessageRestricted+0x1c>
     e62:	1a a2       	std	Y+34, r1	; 0x22
     e64:	0f 90       	pop	r0
     e66:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     e68:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e6a:	81 11       	cpse	r24, r1
     e6c:	04 c0       	rjmp	.+8      	; 0xe76 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     e6e:	ce 01       	movw	r24, r28
     e70:	43 96       	adiw	r24, 0x13	; 19
     e72:	0e 94 1b 10 	call	0x2036	; 0x2036 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     e76:	ce 01       	movw	r24, r28
     e78:	e1 dd       	rcall	.-1086   	; 0xa3c <prvUnlockQueue>
    }
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	08 95       	ret

00000e80 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     e80:	fc 01       	movw	r30, r24
     e82:	44 81       	ldd	r20, Z+4	; 0x04
     e84:	55 81       	ldd	r21, Z+5	; 0x05
     e86:	22 81       	ldd	r18, Z+2	; 0x02
     e88:	33 81       	ldd	r19, Z+3	; 0x03
     e8a:	24 0f       	add	r18, r20
     e8c:	35 1f       	adc	r19, r21
     e8e:	80 81       	ld	r24, Z
     e90:	91 81       	ldd	r25, Z+1	; 0x01
     e92:	b9 01       	movw	r22, r18
     e94:	68 1b       	sub	r22, r24
     e96:	79 0b       	sbc	r23, r25
     e98:	cb 01       	movw	r24, r22
     e9a:	64 17       	cp	r22, r20
     e9c:	75 07       	cpc	r23, r21
     e9e:	10 f0       	brcs	.+4      	; 0xea4 <prvBytesInBuffer+0x24>
     ea0:	84 1b       	sub	r24, r20
     ea2:	95 0b       	sbc	r25, r21
     ea4:	08 95       	ret

00000ea6 <prvInitialiseNewStreamBuffer>:
     ea6:	0f 93       	push	r16
     ea8:	fc 01       	movw	r30, r24
     eaa:	8f e0       	ldi	r24, 0x0F	; 15
     eac:	df 01       	movw	r26, r30
     eae:	1d 92       	st	X+, r1
     eb0:	8a 95       	dec	r24
     eb2:	e9 f7       	brne	.-6      	; 0xeae <prvInitialiseNewStreamBuffer+0x8>
     eb4:	75 87       	std	Z+13, r23	; 0x0d
     eb6:	64 87       	std	Z+12, r22	; 0x0c
     eb8:	55 83       	std	Z+5, r21	; 0x05
     eba:	44 83       	std	Z+4, r20	; 0x04
     ebc:	37 83       	std	Z+7, r19	; 0x07
     ebe:	26 83       	std	Z+6, r18	; 0x06
     ec0:	06 87       	std	Z+14, r16	; 0x0e
     ec2:	0f 91       	pop	r16
     ec4:	08 95       	ret

00000ec6 <prvWriteBytesToBuffer>:
     ec6:	af 92       	push	r10
     ec8:	bf 92       	push	r11
     eca:	cf 92       	push	r12
     ecc:	df 92       	push	r13
     ece:	ef 92       	push	r14
     ed0:	ff 92       	push	r15
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	6c 01       	movw	r12, r24
     edc:	5b 01       	movw	r10, r22
     ede:	7a 01       	movw	r14, r20
     ee0:	fc 01       	movw	r30, r24
     ee2:	c2 81       	ldd	r28, Z+2	; 0x02
     ee4:	d3 81       	ldd	r29, Z+3	; 0x03
     ee6:	04 81       	ldd	r16, Z+4	; 0x04
     ee8:	15 81       	ldd	r17, Z+5	; 0x05
     eea:	0c 1b       	sub	r16, r28
     eec:	1d 0b       	sbc	r17, r29
     eee:	40 17       	cp	r20, r16
     ef0:	51 07       	cpc	r21, r17
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <prvWriteBytesToBuffer+0x30>
     ef4:	8a 01       	movw	r16, r20
     ef6:	f6 01       	movw	r30, r12
     ef8:	84 85       	ldd	r24, Z+12	; 0x0c
     efa:	95 85       	ldd	r25, Z+13	; 0x0d
     efc:	a8 01       	movw	r20, r16
     efe:	b5 01       	movw	r22, r10
     f00:	8c 0f       	add	r24, r28
     f02:	9d 1f       	adc	r25, r29
     f04:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <memcpy>
     f08:	0e 15       	cp	r16, r14
     f0a:	1f 05       	cpc	r17, r15
     f0c:	58 f4       	brcc	.+22     	; 0xf24 <prvWriteBytesToBuffer+0x5e>
     f0e:	a7 01       	movw	r20, r14
     f10:	40 1b       	sub	r20, r16
     f12:	51 0b       	sbc	r21, r17
     f14:	b5 01       	movw	r22, r10
     f16:	60 0f       	add	r22, r16
     f18:	71 1f       	adc	r23, r17
     f1a:	f6 01       	movw	r30, r12
     f1c:	84 85       	ldd	r24, Z+12	; 0x0c
     f1e:	95 85       	ldd	r25, Z+13	; 0x0d
     f20:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <memcpy>
     f24:	ce 01       	movw	r24, r28
     f26:	8e 0d       	add	r24, r14
     f28:	9f 1d       	adc	r25, r15
     f2a:	f6 01       	movw	r30, r12
     f2c:	24 81       	ldd	r18, Z+4	; 0x04
     f2e:	35 81       	ldd	r19, Z+5	; 0x05
     f30:	82 17       	cp	r24, r18
     f32:	93 07       	cpc	r25, r19
     f34:	10 f0       	brcs	.+4      	; 0xf3a <prvWriteBytesToBuffer+0x74>
     f36:	82 1b       	sub	r24, r18
     f38:	93 0b       	sbc	r25, r19
     f3a:	f6 01       	movw	r30, r12
     f3c:	93 83       	std	Z+3, r25	; 0x03
     f3e:	82 83       	std	Z+2, r24	; 0x02
     f40:	c7 01       	movw	r24, r14
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	df 90       	pop	r13
     f50:	cf 90       	pop	r12
     f52:	bf 90       	pop	r11
     f54:	af 90       	pop	r10
     f56:	08 95       	ret

00000f58 <prvWriteMessageToBuffer>:
     f58:	cf 92       	push	r12
     f5a:	df 92       	push	r13
     f5c:	ef 92       	push	r14
     f5e:	ff 92       	push	r15
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	1f 92       	push	r1
     f6a:	1f 92       	push	r1
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	7c 01       	movw	r14, r24
     f72:	6b 01       	movw	r12, r22
     f74:	5a 83       	std	Y+2, r21	; 0x02
     f76:	49 83       	std	Y+1, r20	; 0x01
     f78:	21 15       	cp	r18, r1
     f7a:	31 05       	cpc	r19, r1
     f7c:	c1 f0       	breq	.+48     	; 0xfae <prvWriteMessageToBuffer+0x56>
     f7e:	fc 01       	movw	r30, r24
     f80:	86 85       	ldd	r24, Z+14	; 0x0e
     f82:	80 fd       	sbrc	r24, 0
     f84:	08 c0       	rjmp	.+16     	; 0xf96 <prvWriteMessageToBuffer+0x3e>
     f86:	42 17       	cp	r20, r18
     f88:	53 07       	cpc	r21, r19
     f8a:	08 f4       	brcc	.+2      	; 0xf8e <prvWriteMessageToBuffer+0x36>
     f8c:	9a 01       	movw	r18, r20
     f8e:	3a 83       	std	Y+2, r19	; 0x02
     f90:	29 83       	std	Y+1, r18	; 0x01
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	0f c0       	rjmp	.+30     	; 0xfb4 <prvWriteMessageToBuffer+0x5c>
     f96:	20 17       	cp	r18, r16
     f98:	31 07       	cpc	r19, r17
     f9a:	58 f0       	brcs	.+22     	; 0xfb2 <prvWriteMessageToBuffer+0x5a>
     f9c:	42 e0       	ldi	r20, 0x02	; 2
     f9e:	50 e0       	ldi	r21, 0x00	; 0
     fa0:	be 01       	movw	r22, r28
     fa2:	6f 5f       	subi	r22, 0xFF	; 255
     fa4:	7f 4f       	sbci	r23, 0xFF	; 255
     fa6:	c7 01       	movw	r24, r14
     fa8:	8e df       	rcall	.-228    	; 0xec6 <prvWriteBytesToBuffer>
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	03 c0       	rjmp	.+6      	; 0xfb4 <prvWriteMessageToBuffer+0x5c>
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	01 c0       	rjmp	.+2      	; 0xfb4 <prvWriteMessageToBuffer+0x5c>
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	88 23       	and	r24, r24
     fb6:	31 f0       	breq	.+12     	; 0xfc4 <prvWriteMessageToBuffer+0x6c>
     fb8:	49 81       	ldd	r20, Y+1	; 0x01
     fba:	5a 81       	ldd	r21, Y+2	; 0x02
     fbc:	b6 01       	movw	r22, r12
     fbe:	c7 01       	movw	r24, r14
     fc0:	82 df       	rcall	.-252    	; 0xec6 <prvWriteBytesToBuffer>
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <prvWriteMessageToBuffer+0x70>
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	1f 91       	pop	r17
     fd2:	0f 91       	pop	r16
     fd4:	ff 90       	pop	r15
     fd6:	ef 90       	pop	r14
     fd8:	df 90       	pop	r13
     fda:	cf 90       	pop	r12
     fdc:	08 95       	ret

00000fde <prvReadBytesFromBuffer>:
     fde:	af 92       	push	r10
     fe0:	bf 92       	push	r11
     fe2:	cf 92       	push	r12
     fe4:	df 92       	push	r13
     fe6:	ef 92       	push	r14
     fe8:	ff 92       	push	r15
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	7c 01       	movw	r14, r24
     ff4:	5b 01       	movw	r10, r22
     ff6:	e9 01       	movw	r28, r18
     ff8:	42 17       	cp	r20, r18
     ffa:	53 07       	cpc	r21, r19
     ffc:	08 f4       	brcc	.+2      	; 0x1000 <__EEPROM_REGION_LENGTH__>
     ffe:	ea 01       	movw	r28, r20
    1000:	20 97       	sbiw	r28, 0x00	; 0
    1002:	81 f1       	breq	.+96     	; 0x1064 <__EEPROM_REGION_LENGTH__+0x64>
    1004:	f7 01       	movw	r30, r14
    1006:	00 81       	ld	r16, Z
    1008:	11 81       	ldd	r17, Z+1	; 0x01
    100a:	84 81       	ldd	r24, Z+4	; 0x04
    100c:	95 81       	ldd	r25, Z+5	; 0x05
    100e:	80 1b       	sub	r24, r16
    1010:	91 0b       	sbc	r25, r17
    1012:	6e 01       	movw	r12, r28
    1014:	8c 17       	cp	r24, r28
    1016:	9d 07       	cpc	r25, r29
    1018:	08 f4       	brcc	.+2      	; 0x101c <__EEPROM_REGION_LENGTH__+0x1c>
    101a:	6c 01       	movw	r12, r24
    101c:	f7 01       	movw	r30, r14
    101e:	64 85       	ldd	r22, Z+12	; 0x0c
    1020:	75 85       	ldd	r23, Z+13	; 0x0d
    1022:	60 0f       	add	r22, r16
    1024:	71 1f       	adc	r23, r17
    1026:	a6 01       	movw	r20, r12
    1028:	c5 01       	movw	r24, r10
    102a:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <memcpy>
    102e:	cc 16       	cp	r12, r28
    1030:	dd 06       	cpc	r13, r29
    1032:	58 f4       	brcc	.+22     	; 0x104a <__EEPROM_REGION_LENGTH__+0x4a>
    1034:	ae 01       	movw	r20, r28
    1036:	4c 19       	sub	r20, r12
    1038:	5d 09       	sbc	r21, r13
    103a:	f7 01       	movw	r30, r14
    103c:	64 85       	ldd	r22, Z+12	; 0x0c
    103e:	75 85       	ldd	r23, Z+13	; 0x0d
    1040:	c5 01       	movw	r24, r10
    1042:	8c 0d       	add	r24, r12
    1044:	9d 1d       	adc	r25, r13
    1046:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <memcpy>
    104a:	0c 0f       	add	r16, r28
    104c:	1d 1f       	adc	r17, r29
    104e:	f7 01       	movw	r30, r14
    1050:	84 81       	ldd	r24, Z+4	; 0x04
    1052:	95 81       	ldd	r25, Z+5	; 0x05
    1054:	08 17       	cp	r16, r24
    1056:	19 07       	cpc	r17, r25
    1058:	10 f0       	brcs	.+4      	; 0x105e <__EEPROM_REGION_LENGTH__+0x5e>
    105a:	08 1b       	sub	r16, r24
    105c:	19 0b       	sbc	r17, r25
    105e:	f7 01       	movw	r30, r14
    1060:	11 83       	std	Z+1, r17	; 0x01
    1062:	00 83       	st	Z, r16
    1064:	ce 01       	movw	r24, r28
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	df 90       	pop	r13
    1074:	cf 90       	pop	r12
    1076:	bf 90       	pop	r11
    1078:	af 90       	pop	r10
    107a:	08 95       	ret

0000107c <prvReadMessageFromBuffer>:
    107c:	6f 92       	push	r6
    107e:	7f 92       	push	r7
    1080:	8f 92       	push	r8
    1082:	9f 92       	push	r9
    1084:	af 92       	push	r10
    1086:	bf 92       	push	r11
    1088:	cf 92       	push	r12
    108a:	df 92       	push	r13
    108c:	ef 92       	push	r14
    108e:	ff 92       	push	r15
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	1f 92       	push	r1
    109a:	1f 92       	push	r1
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	6c 01       	movw	r12, r24
    10a2:	4b 01       	movw	r8, r22
    10a4:	5a 01       	movw	r10, r20
    10a6:	79 01       	movw	r14, r18
    10a8:	01 15       	cp	r16, r1
    10aa:	11 05       	cpc	r17, r1
    10ac:	b1 f0       	breq	.+44     	; 0x10da <prvReadMessageFromBuffer+0x5e>
    10ae:	fc 01       	movw	r30, r24
    10b0:	60 80       	ld	r6, Z
    10b2:	71 80       	ldd	r7, Z+1	; 0x01
    10b4:	a8 01       	movw	r20, r16
    10b6:	be 01       	movw	r22, r28
    10b8:	6f 5f       	subi	r22, 0xFF	; 255
    10ba:	7f 4f       	sbci	r23, 0xFF	; 255
    10bc:	90 df       	rcall	.-224    	; 0xfde <prvReadBytesFromBuffer>
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	9a 81       	ldd	r25, Y+2	; 0x02
    10c2:	e0 1a       	sub	r14, r16
    10c4:	f1 0a       	sbc	r15, r17
    10c6:	a8 16       	cp	r10, r24
    10c8:	b9 06       	cpc	r11, r25
    10ca:	30 f4       	brcc	.+12     	; 0x10d8 <prvReadMessageFromBuffer+0x5c>
    10cc:	f6 01       	movw	r30, r12
    10ce:	71 82       	std	Z+1, r7	; 0x01
    10d0:	60 82       	st	Z, r6
    10d2:	a1 2c       	mov	r10, r1
    10d4:	b1 2c       	mov	r11, r1
    10d6:	01 c0       	rjmp	.+2      	; 0x10da <prvReadMessageFromBuffer+0x5e>
    10d8:	5c 01       	movw	r10, r24
    10da:	97 01       	movw	r18, r14
    10dc:	a5 01       	movw	r20, r10
    10de:	b4 01       	movw	r22, r8
    10e0:	c6 01       	movw	r24, r12
    10e2:	7d df       	rcall	.-262    	; 0xfde <prvReadBytesFromBuffer>
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	ff 90       	pop	r15
    10f2:	ef 90       	pop	r14
    10f4:	df 90       	pop	r13
    10f6:	cf 90       	pop	r12
    10f8:	bf 90       	pop	r11
    10fa:	af 90       	pop	r10
    10fc:	9f 90       	pop	r9
    10fe:	8f 90       	pop	r8
    1100:	7f 90       	pop	r7
    1102:	6f 90       	pop	r6
    1104:	08 95       	ret

00001106 <xStreamBufferGenericCreate>:
    1106:	cf 92       	push	r12
    1108:	df 92       	push	r13
    110a:	ef 92       	push	r14
    110c:	ff 92       	push	r15
    110e:	0f 93       	push	r16
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	ec 01       	movw	r28, r24
    1116:	6b 01       	movw	r12, r22
    1118:	41 30       	cpi	r20, 0x01	; 1
    111a:	11 f4       	brne	.+4      	; 0x1120 <xStreamBufferGenericCreate+0x1a>
    111c:	01 e0       	ldi	r16, 0x01	; 1
    111e:	01 c0       	rjmp	.+2      	; 0x1122 <xStreamBufferGenericCreate+0x1c>
    1120:	00 e0       	ldi	r16, 0x00	; 0
    1122:	c1 14       	cp	r12, r1
    1124:	d1 04       	cpc	r13, r1
    1126:	19 f4       	brne	.+6      	; 0x112e <xStreamBufferGenericCreate+0x28>
    1128:	cc 24       	eor	r12, r12
    112a:	c3 94       	inc	r12
    112c:	d1 2c       	mov	r13, r1
    112e:	ce 01       	movw	r24, r28
    1130:	40 96       	adiw	r24, 0x10	; 16
    1132:	c8 17       	cp	r28, r24
    1134:	d9 07       	cpc	r29, r25
    1136:	20 f4       	brcc	.+8      	; 0x1140 <xStreamBufferGenericCreate+0x3a>
    1138:	21 96       	adiw	r28, 0x01	; 1
    113a:	70 d9       	rcall	.-3360   	; 0x41c <pvPortMalloc>
    113c:	7c 01       	movw	r14, r24
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <xStreamBufferGenericCreate+0x3e>
    1140:	e1 2c       	mov	r14, r1
    1142:	f1 2c       	mov	r15, r1
    1144:	e1 14       	cp	r14, r1
    1146:	f1 04       	cpc	r15, r1
    1148:	39 f0       	breq	.+14     	; 0x1158 <xStreamBufferGenericCreate+0x52>
    114a:	96 01       	movw	r18, r12
    114c:	ae 01       	movw	r20, r28
    114e:	b7 01       	movw	r22, r14
    1150:	61 5f       	subi	r22, 0xF1	; 241
    1152:	7f 4f       	sbci	r23, 0xFF	; 255
    1154:	c7 01       	movw	r24, r14
    1156:	a7 de       	rcall	.-690    	; 0xea6 <prvInitialiseNewStreamBuffer>
    1158:	c7 01       	movw	r24, r14
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	0f 91       	pop	r16
    1160:	ff 90       	pop	r15
    1162:	ef 90       	pop	r14
    1164:	df 90       	pop	r13
    1166:	cf 90       	pop	r12
    1168:	08 95       	ret

0000116a <xStreamBufferReset>:
    116a:	0f 93       	push	r16
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	0f 92       	push	r0
    1172:	fc 01       	movw	r30, r24
    1174:	20 85       	ldd	r18, Z+8	; 0x08
    1176:	31 85       	ldd	r19, Z+9	; 0x09
    1178:	23 2b       	or	r18, r19
    117a:	71 f4       	brne	.+28     	; 0x1198 <xStreamBufferReset+0x2e>
    117c:	22 85       	ldd	r18, Z+10	; 0x0a
    117e:	33 85       	ldd	r19, Z+11	; 0x0b
    1180:	23 2b       	or	r18, r19
    1182:	61 f4       	brne	.+24     	; 0x119c <xStreamBufferReset+0x32>
    1184:	26 81       	ldd	r18, Z+6	; 0x06
    1186:	37 81       	ldd	r19, Z+7	; 0x07
    1188:	44 81       	ldd	r20, Z+4	; 0x04
    118a:	55 81       	ldd	r21, Z+5	; 0x05
    118c:	64 85       	ldd	r22, Z+12	; 0x0c
    118e:	75 85       	ldd	r23, Z+13	; 0x0d
    1190:	06 85       	ldd	r16, Z+14	; 0x0e
    1192:	89 de       	rcall	.-750    	; 0xea6 <prvInitialiseNewStreamBuffer>
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	03 c0       	rjmp	.+6      	; 0x119e <xStreamBufferReset+0x34>
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	01 c0       	rjmp	.+2      	; 0x119e <xStreamBufferReset+0x34>
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	0f 90       	pop	r0
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	0f 91       	pop	r16
    11a4:	08 95       	ret

000011a6 <xStreamBufferSpacesAvailable>:
    11a6:	fc 01       	movw	r30, r24
    11a8:	24 81       	ldd	r18, Z+4	; 0x04
    11aa:	35 81       	ldd	r19, Z+5	; 0x05
    11ac:	80 81       	ld	r24, Z
    11ae:	91 81       	ldd	r25, Z+1	; 0x01
    11b0:	82 0f       	add	r24, r18
    11b2:	93 1f       	adc	r25, r19
    11b4:	42 81       	ldd	r20, Z+2	; 0x02
    11b6:	53 81       	ldd	r21, Z+3	; 0x03
    11b8:	84 1b       	sub	r24, r20
    11ba:	95 0b       	sbc	r25, r21
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	82 17       	cp	r24, r18
    11c0:	93 07       	cpc	r25, r19
    11c2:	10 f0       	brcs	.+4      	; 0x11c8 <xStreamBufferSpacesAvailable+0x22>
    11c4:	82 1b       	sub	r24, r18
    11c6:	93 0b       	sbc	r25, r19
    11c8:	08 95       	ret

000011ca <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    11ca:	2f 92       	push	r2
    11cc:	3f 92       	push	r3
    11ce:	4f 92       	push	r4
    11d0:	5f 92       	push	r5
    11d2:	6f 92       	push	r6
    11d4:	7f 92       	push	r7
    11d6:	8f 92       	push	r8
    11d8:	9f 92       	push	r9
    11da:	af 92       	push	r10
    11dc:	bf 92       	push	r11
    11de:	cf 92       	push	r12
    11e0:	df 92       	push	r13
    11e2:	ef 92       	push	r14
    11e4:	ff 92       	push	r15
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	2b 97       	sbiw	r28, 0x0b	; 11
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	cd bf       	out	0x3d, r28	; 61
    11fe:	4c 01       	movw	r8, r24
    1200:	7b 87       	std	Y+11, r23	; 0x0b
    1202:	6a 87       	std	Y+10, r22	; 0x0a
    1204:	1a 01       	movw	r2, r20
    1206:	0e 83       	std	Y+6, r16	; 0x06
    1208:	1f 83       	std	Y+7, r17	; 0x07
    120a:	28 87       	std	Y+8, r18	; 0x08
    120c:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    120e:	fc 01       	movw	r30, r24
    1210:	84 81       	ldd	r24, Z+4	; 0x04
    1212:	95 81       	ldd	r25, Z+5	; 0x05
    1214:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1216:	26 85       	ldd	r18, Z+14	; 0x0e
    1218:	20 ff       	sbrs	r18, 0
    121a:	0c c0       	rjmp	.+24     	; 0x1234 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    121c:	2a 01       	movw	r4, r20
    121e:	f2 e0       	ldi	r31, 0x02	; 2
    1220:	4f 0e       	add	r4, r31
    1222:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1224:	84 15       	cp	r24, r4
    1226:	95 05       	cpc	r25, r5
    1228:	58 f4       	brcc	.+22     	; 0x1240 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    122a:	1e 82       	std	Y+6, r1	; 0x06
    122c:	1f 82       	std	Y+7, r1	; 0x07
    122e:	18 86       	std	Y+8, r1	; 0x08
    1230:	19 86       	std	Y+9, r1	; 0x09
    1232:	06 c0       	rjmp	.+12     	; 0x1240 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1234:	84 17       	cp	r24, r20
    1236:	95 07       	cpc	r25, r21
    1238:	10 f0       	brcs	.+4      	; 0x123e <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    123a:	2a 01       	movw	r4, r20
    123c:	01 c0       	rjmp	.+2      	; 0x1240 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    123e:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1240:	8e 81       	ldd	r24, Y+6	; 0x06
    1242:	9f 81       	ldd	r25, Y+7	; 0x07
    1244:	a8 85       	ldd	r26, Y+8	; 0x08
    1246:	b9 85       	ldd	r27, Y+9	; 0x09
    1248:	89 2b       	or	r24, r25
    124a:	8a 2b       	or	r24, r26
    124c:	8b 2b       	or	r24, r27
    124e:	09 f4       	brne	.+2      	; 0x1252 <xStreamBufferSend+0x88>
    1250:	36 c0       	rjmp	.+108    	; 0x12be <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1252:	ce 01       	movw	r24, r28
    1254:	01 96       	adiw	r24, 0x01	; 1
    1256:	e0 d7       	rcall	.+4032   	; 0x2218 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    125e:	c4 01       	movw	r24, r8
    1260:	a2 df       	rcall	.-188    	; 0x11a6 <xStreamBufferSpacesAvailable>
    1262:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1264:	84 15       	cp	r24, r4
    1266:	95 05       	cpc	r25, r5
    1268:	38 f5       	brcc	.+78     	; 0x12b8 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    126a:	60 e0       	ldi	r22, 0x00	; 0
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	0e 94 cb 14 	call	0x2996	; 0x2996 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1274:	0e 94 9d 11 	call	0x233a	; 0x233a <xTaskGetCurrentTaskHandle>
    1278:	f4 01       	movw	r30, r8
    127a:	93 87       	std	Z+11, r25	; 0x0b
    127c:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    127e:	0f 90       	pop	r0
    1280:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1282:	ae 80       	ldd	r10, Y+6	; 0x06
    1284:	bf 80       	ldd	r11, Y+7	; 0x07
    1286:	c8 84       	ldd	r12, Y+8	; 0x08
    1288:	d9 84       	ldd	r13, Y+9	; 0x09
    128a:	e1 2c       	mov	r14, r1
    128c:	f1 2c       	mov	r15, r1
    128e:	00 e0       	ldi	r16, 0x00	; 0
    1290:	10 e0       	ldi	r17, 0x00	; 0
    1292:	98 01       	movw	r18, r16
    1294:	40 e0       	ldi	r20, 0x00	; 0
    1296:	50 e0       	ldi	r21, 0x00	; 0
    1298:	ba 01       	movw	r22, r20
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	0e 94 0b 12 	call	0x2416	; 0x2416 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    12a0:	f4 01       	movw	r30, r8
    12a2:	13 86       	std	Z+11, r1	; 0x0b
    12a4:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    12a6:	be 01       	movw	r22, r28
    12a8:	6a 5f       	subi	r22, 0xFA	; 250
    12aa:	7f 4f       	sbci	r23, 0xFF	; 255
    12ac:	ce 01       	movw	r24, r28
    12ae:	01 96       	adiw	r24, 0x01	; 1
    12b0:	da d7       	rcall	.+4020   	; 0x2266 <xTaskCheckForTimeOut>
    12b2:	88 23       	and	r24, r24
    12b4:	89 f2       	breq	.-94     	; 0x1258 <xStreamBufferSend+0x8e>
    12b6:	05 c0       	rjmp	.+10     	; 0x12c2 <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    12b8:	0f 90       	pop	r0
    12ba:	0f be       	out	0x3f, r0	; 63
                    break;
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    12be:	61 2c       	mov	r6, r1
    12c0:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    12c2:	61 14       	cp	r6, r1
    12c4:	71 04       	cpc	r7, r1
    12c6:	19 f4       	brne	.+6      	; 0x12ce <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    12c8:	c4 01       	movw	r24, r8
    12ca:	6d df       	rcall	.-294    	; 0x11a6 <xStreamBufferSpacesAvailable>
    12cc:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    12ce:	82 01       	movw	r16, r4
    12d0:	93 01       	movw	r18, r6
    12d2:	a1 01       	movw	r20, r2
    12d4:	6a 85       	ldd	r22, Y+10	; 0x0a
    12d6:	7b 85       	ldd	r23, Y+11	; 0x0b
    12d8:	c4 01       	movw	r24, r8
    12da:	3e de       	rcall	.-900    	; 0xf58 <prvWriteMessageToBuffer>
    12dc:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    12de:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    12e0:	e9 f0       	breq	.+58     	; 0x131c <xStreamBufferSend+0x152>
    12e2:	c4 01       	movw	r24, r8
    12e4:	cd dd       	rcall	.-1126   	; 0xe80 <prvBytesInBuffer>
    12e6:	f4 01       	movw	r30, r8
    12e8:	26 81       	ldd	r18, Z+6	; 0x06
    12ea:	37 81       	ldd	r19, Z+7	; 0x07
    12ec:	82 17       	cp	r24, r18
    12ee:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    12f0:	a8 f0       	brcs	.+42     	; 0x131c <xStreamBufferSend+0x152>
    12f2:	89 d3       	rcall	.+1810   	; 0x1a06 <vTaskSuspendAll>
    12f4:	f4 01       	movw	r30, r8
    12f6:	80 85       	ldd	r24, Z+8	; 0x08
    12f8:	91 85       	ldd	r25, Z+9	; 0x09
    12fa:	89 2b       	or	r24, r25
    12fc:	71 f0       	breq	.+28     	; 0x131a <xStreamBufferSend+0x150>
    12fe:	80 85       	ldd	r24, Z+8	; 0x08
    1300:	91 85       	ldd	r25, Z+9	; 0x09
    1302:	e1 2c       	mov	r14, r1
    1304:	f1 2c       	mov	r15, r1
    1306:	00 e0       	ldi	r16, 0x00	; 0
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	a9 01       	movw	r20, r18
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	0e 94 b2 12 	call	0x2564	; 0x2564 <xTaskGenericNotify>
    1314:	f4 01       	movw	r30, r8
    1316:	11 86       	std	Z+9, r1	; 0x09
    1318:	10 86       	std	Z+8, r1	; 0x08
    131a:	b5 d4       	rcall	.+2410   	; 0x1c86 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    131c:	c6 01       	movw	r24, r12
    131e:	2b 96       	adiw	r28, 0x0b	; 11
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	ff 90       	pop	r15
    1334:	ef 90       	pop	r14
    1336:	df 90       	pop	r13
    1338:	cf 90       	pop	r12
    133a:	bf 90       	pop	r11
    133c:	af 90       	pop	r10
    133e:	9f 90       	pop	r9
    1340:	8f 90       	pop	r8
    1342:	7f 90       	pop	r7
    1344:	6f 90       	pop	r6
    1346:	5f 90       	pop	r5
    1348:	4f 90       	pop	r4
    134a:	3f 90       	pop	r3
    134c:	2f 90       	pop	r2
    134e:	08 95       	ret

00001350 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1350:	af 92       	push	r10
    1352:	bf 92       	push	r11
    1354:	cf 92       	push	r12
    1356:	df 92       	push	r13
    1358:	ef 92       	push	r14
    135a:	ff 92       	push	r15
    135c:	0f 93       	push	r16
    135e:	1f 93       	push	r17
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	ec 01       	movw	r28, r24
    1366:	7b 01       	movw	r14, r22
    1368:	5a 01       	movw	r10, r20
    136a:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    136c:	8e 85       	ldd	r24, Y+14	; 0x0e
    136e:	80 ff       	sbrs	r24, 0
    1370:	04 c0       	rjmp	.+8      	; 0x137a <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1372:	8a 01       	movw	r16, r20
    1374:	0e 5f       	subi	r16, 0xFE	; 254
    1376:	1f 4f       	sbci	r17, 0xFF	; 255
    1378:	01 c0       	rjmp	.+2      	; 0x137c <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    137a:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    137c:	ce 01       	movw	r24, r28
    137e:	13 df       	rcall	.-474    	; 0x11a6 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1380:	9c 01       	movw	r18, r24
    1382:	a5 01       	movw	r20, r10
    1384:	b7 01       	movw	r22, r14
    1386:	ce 01       	movw	r24, r28
    1388:	e7 dd       	rcall	.-1074   	; 0xf58 <prvWriteMessageToBuffer>
    138a:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    138c:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    138e:	c1 f0       	breq	.+48     	; 0x13c0 <xStreamBufferSendFromISR+0x70>
    1390:	ce 01       	movw	r24, r28
    1392:	76 dd       	rcall	.-1300   	; 0xe80 <prvBytesInBuffer>
    1394:	2e 81       	ldd	r18, Y+6	; 0x06
    1396:	3f 81       	ldd	r19, Y+7	; 0x07
    1398:	82 17       	cp	r24, r18
    139a:	93 07       	cpc	r25, r19
    139c:	88 f0       	brcs	.+34     	; 0x13c0 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    139e:	88 85       	ldd	r24, Y+8	; 0x08
    13a0:	99 85       	ldd	r25, Y+9	; 0x09
    13a2:	89 2b       	or	r24, r25
    13a4:	69 f0       	breq	.+26     	; 0x13c0 <xStreamBufferSendFromISR+0x70>
    13a6:	88 85       	ldd	r24, Y+8	; 0x08
    13a8:	99 85       	ldd	r25, Y+9	; 0x09
    13aa:	e1 2c       	mov	r14, r1
    13ac:	f1 2c       	mov	r15, r1
    13ae:	00 e0       	ldi	r16, 0x00	; 0
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	a9 01       	movw	r20, r18
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	0e 94 a9 13 	call	0x2752	; 0x2752 <xTaskGenericNotifyFromISR>
    13bc:	19 86       	std	Y+9, r1	; 0x09
    13be:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    13c0:	c5 01       	movw	r24, r10
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	ff 90       	pop	r15
    13cc:	ef 90       	pop	r14
    13ce:	df 90       	pop	r13
    13d0:	cf 90       	pop	r12
    13d2:	bf 90       	pop	r11
    13d4:	af 90       	pop	r10
    13d6:	08 95       	ret

000013d8 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    13d8:	4f 92       	push	r4
    13da:	5f 92       	push	r5
    13dc:	6f 92       	push	r6
    13de:	7f 92       	push	r7
    13e0:	8f 92       	push	r8
    13e2:	9f 92       	push	r9
    13e4:	af 92       	push	r10
    13e6:	bf 92       	push	r11
    13e8:	cf 92       	push	r12
    13ea:	df 92       	push	r13
    13ec:	ef 92       	push	r14
    13ee:	ff 92       	push	r15
    13f0:	0f 93       	push	r16
    13f2:	1f 93       	push	r17
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	ec 01       	movw	r28, r24
    13fa:	2b 01       	movw	r4, r22
    13fc:	3a 01       	movw	r6, r20
    13fe:	58 01       	movw	r10, r16
    1400:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1402:	8e 85       	ldd	r24, Y+14	; 0x0e
    1404:	80 ff       	sbrs	r24, 0
    1406:	05 c0       	rjmp	.+10     	; 0x1412 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1408:	68 94       	set
    140a:	88 24       	eor	r8, r8
    140c:	81 f8       	bld	r8, 1
    140e:	91 2c       	mov	r9, r1
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1412:	81 2c       	mov	r8, r1
    1414:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1416:	a1 14       	cp	r10, r1
    1418:	b1 04       	cpc	r11, r1
    141a:	c1 04       	cpc	r12, r1
    141c:	d1 04       	cpc	r13, r1
    141e:	31 f1       	breq	.+76     	; 0x146c <xStreamBufferReceive+0x94>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1426:	ce 01       	movw	r24, r28
    1428:	2b dd       	rcall	.-1450   	; 0xe80 <prvBytesInBuffer>
    142a:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    142c:	88 16       	cp	r8, r24
    142e:	99 06       	cpc	r9, r25
    1430:	40 f0       	brcs	.+16     	; 0x1442 <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1432:	60 e0       	ldi	r22, 0x00	; 0
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	0e 94 cb 14 	call	0x2996	; 0x2996 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    143c:	7e d7       	rcall	.+3836   	; 0x233a <xTaskGetCurrentTaskHandle>
    143e:	99 87       	std	Y+9, r25	; 0x09
    1440:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1442:	0f 90       	pop	r0
    1444:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1446:	8e 14       	cp	r8, r14
    1448:	9f 04       	cpc	r9, r15
    144a:	98 f0       	brcs	.+38     	; 0x1472 <xStreamBufferReceive+0x9a>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    144c:	e1 2c       	mov	r14, r1
    144e:	f1 2c       	mov	r15, r1
    1450:	00 e0       	ldi	r16, 0x00	; 0
    1452:	10 e0       	ldi	r17, 0x00	; 0
    1454:	98 01       	movw	r18, r16
    1456:	40 e0       	ldi	r20, 0x00	; 0
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	ba 01       	movw	r22, r20
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	db d7       	rcall	.+4022   	; 0x2416 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1460:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1462:	18 86       	std	Y+8, r1	; 0x08
    1464:	ce 01       	movw	r24, r28
    1466:	0c dd       	rcall	.-1512   	; 0xe80 <prvBytesInBuffer>
    1468:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    146a:	03 c0       	rjmp	.+6      	; 0x1472 <xStreamBufferReceive+0x9a>
    146c:	ce 01       	movw	r24, r28
    146e:	08 dd       	rcall	.-1520   	; 0xe80 <prvBytesInBuffer>
    1470:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1472:	8e 14       	cp	r8, r14
    1474:	9f 04       	cpc	r9, r15
    1476:	e8 f4       	brcc	.+58     	; 0x14b2 <xStreamBufferReceive+0xda>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1478:	84 01       	movw	r16, r8
    147a:	97 01       	movw	r18, r14
    147c:	a3 01       	movw	r20, r6
    147e:	b2 01       	movw	r22, r4
    1480:	ce 01       	movw	r24, r28
    1482:	fc dd       	rcall	.-1032   	; 0x107c <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1484:	6c 01       	movw	r12, r24
    1486:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1488:	b1 f0       	breq	.+44     	; 0x14b6 <xStreamBufferReceive+0xde>
    148a:	bd d2       	rcall	.+1402   	; 0x1a06 <vTaskSuspendAll>
    148c:	8a 85       	ldd	r24, Y+10	; 0x0a
    148e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1490:	89 2b       	or	r24, r25
    1492:	69 f0       	breq	.+26     	; 0x14ae <xStreamBufferReceive+0xd6>
    1494:	8a 85       	ldd	r24, Y+10	; 0x0a
    1496:	9b 85       	ldd	r25, Y+11	; 0x0b
    1498:	e1 2c       	mov	r14, r1
    149a:	f1 2c       	mov	r15, r1
    149c:	00 e0       	ldi	r16, 0x00	; 0
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	a9 01       	movw	r20, r18
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	0e 94 b2 12 	call	0x2564	; 0x2564 <xTaskGenericNotify>
    14aa:	1b 86       	std	Y+11, r1	; 0x0b
    14ac:	1a 86       	std	Y+10, r1	; 0x0a
    14ae:	eb d3       	rcall	.+2006   	; 0x1c86 <xTaskResumeAll>
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <xStreamBufferReceive+0xde>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    14b2:	c1 2c       	mov	r12, r1
    14b4:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    14b6:	c6 01       	movw	r24, r12
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	1f 91       	pop	r17
    14be:	0f 91       	pop	r16
    14c0:	ff 90       	pop	r15
    14c2:	ef 90       	pop	r14
    14c4:	df 90       	pop	r13
    14c6:	cf 90       	pop	r12
    14c8:	bf 90       	pop	r11
    14ca:	af 90       	pop	r10
    14cc:	9f 90       	pop	r9
    14ce:	8f 90       	pop	r8
    14d0:	7f 90       	pop	r7
    14d2:	6f 90       	pop	r6
    14d4:	5f 90       	pop	r5
    14d6:	4f 90       	pop	r4
    14d8:	08 95       	ret

000014da <prvResetNextTaskUnblockTime>:
    14da:	e0 91 dd 10 	lds	r30, 0x10DD	; 0x8010dd <pxDelayedTaskList>
    14de:	f0 91 de 10 	lds	r31, 0x10DE	; 0x8010de <pxDelayedTaskList+0x1>
    14e2:	80 81       	ld	r24, Z
    14e4:	81 11       	cpse	r24, r1
    14e6:	0c c0       	rjmp	.+24     	; 0x1500 <prvResetNextTaskUnblockTime+0x26>
    14e8:	8f ef       	ldi	r24, 0xFF	; 255
    14ea:	9f ef       	ldi	r25, 0xFF	; 255
    14ec:	dc 01       	movw	r26, r24
    14ee:	80 93 a7 10 	sts	0x10A7, r24	; 0x8010a7 <xNextTaskUnblockTime>
    14f2:	90 93 a8 10 	sts	0x10A8, r25	; 0x8010a8 <xNextTaskUnblockTime+0x1>
    14f6:	a0 93 a9 10 	sts	0x10A9, r26	; 0x8010a9 <xNextTaskUnblockTime+0x2>
    14fa:	b0 93 aa 10 	sts	0x10AA, r27	; 0x8010aa <xNextTaskUnblockTime+0x3>
    14fe:	08 95       	ret
    1500:	e0 91 dd 10 	lds	r30, 0x10DD	; 0x8010dd <pxDelayedTaskList>
    1504:	f0 91 de 10 	lds	r31, 0x10DE	; 0x8010de <pxDelayedTaskList+0x1>
    1508:	07 80       	ldd	r0, Z+7	; 0x07
    150a:	f0 85       	ldd	r31, Z+8	; 0x08
    150c:	e0 2d       	mov	r30, r0
    150e:	80 81       	ld	r24, Z
    1510:	91 81       	ldd	r25, Z+1	; 0x01
    1512:	a2 81       	ldd	r26, Z+2	; 0x02
    1514:	b3 81       	ldd	r27, Z+3	; 0x03
    1516:	80 93 a7 10 	sts	0x10A7, r24	; 0x8010a7 <xNextTaskUnblockTime>
    151a:	90 93 a8 10 	sts	0x10A8, r25	; 0x8010a8 <xNextTaskUnblockTime+0x1>
    151e:	a0 93 a9 10 	sts	0x10A9, r26	; 0x8010a9 <xNextTaskUnblockTime+0x2>
    1522:	b0 93 aa 10 	sts	0x10AA, r27	; 0x8010aa <xNextTaskUnblockTime+0x3>
    1526:	08 95       	ret

00001528 <prvDeleteTCB>:
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	ec 01       	movw	r28, r24
    152e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1530:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1532:	1d d8       	rcall	.-4038   	; 0x56e <vPortFree>
    1534:	ce 01       	movw	r24, r28
    1536:	1b d8       	rcall	.-4042   	; 0x56e <vPortFree>
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	08 95       	ret

0000153e <prvInitialiseNewTask>:
    153e:	4f 92       	push	r4
    1540:	5f 92       	push	r5
    1542:	6f 92       	push	r6
    1544:	7f 92       	push	r7
    1546:	8f 92       	push	r8
    1548:	9f 92       	push	r9
    154a:	af 92       	push	r10
    154c:	bf 92       	push	r11
    154e:	cf 92       	push	r12
    1550:	df 92       	push	r13
    1552:	ef 92       	push	r14
    1554:	ff 92       	push	r15
    1556:	0f 93       	push	r16
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	2c 01       	movw	r4, r24
    155e:	5b 01       	movw	r10, r22
    1560:	4a 01       	movw	r8, r20
    1562:	39 01       	movw	r6, r18
    1564:	e6 01       	movw	r28, r12
    1566:	65 ea       	ldi	r22, 0xA5	; 165
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    156c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    156e:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <memset>
    1572:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1574:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1576:	21 e0       	ldi	r18, 0x01	; 1
    1578:	82 1a       	sub	r8, r18
    157a:	91 08       	sbc	r9, r1
    157c:	88 0e       	add	r8, r24
    157e:	99 1e       	adc	r9, r25
    1580:	a1 14       	cp	r10, r1
    1582:	b1 04       	cpc	r11, r1
    1584:	89 f4       	brne	.+34     	; 0x15a8 <prvInitialiseNewTask+0x6a>
    1586:	15 c0       	rjmp	.+42     	; 0x15b2 <prvInitialiseNewTask+0x74>
    1588:	82 2f       	mov	r24, r18
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	f5 01       	movw	r30, r10
    158e:	e8 0f       	add	r30, r24
    1590:	f9 1f       	adc	r31, r25
    1592:	30 81       	ld	r19, Z
    1594:	de 01       	movw	r26, r28
    1596:	a8 0f       	add	r26, r24
    1598:	b9 1f       	adc	r27, r25
    159a:	5d 96       	adiw	r26, 0x1d	; 29
    159c:	3c 93       	st	X, r19
    159e:	80 81       	ld	r24, Z
    15a0:	88 23       	and	r24, r24
    15a2:	29 f0       	breq	.+10     	; 0x15ae <prvInitialiseNewTask+0x70>
    15a4:	2f 5f       	subi	r18, 0xFF	; 255
    15a6:	01 c0       	rjmp	.+2      	; 0x15aa <prvInitialiseNewTask+0x6c>
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	20 31       	cpi	r18, 0x10	; 16
    15ac:	68 f3       	brcs	.-38     	; 0x1588 <prvInitialiseNewTask+0x4a>
    15ae:	1c a6       	std	Y+44, r1	; 0x2c
    15b0:	01 c0       	rjmp	.+2      	; 0x15b4 <prvInitialiseNewTask+0x76>
    15b2:	1d 8e       	std	Y+29, r1	; 0x1d
    15b4:	0a 30       	cpi	r16, 0x0A	; 10
    15b6:	08 f0       	brcs	.+2      	; 0x15ba <prvInitialiseNewTask+0x7c>
    15b8:	09 e0       	ldi	r16, 0x09	; 9
    15ba:	0a 8f       	std	Y+26, r16	; 0x1a
    15bc:	0d a7       	std	Y+45, r16	; 0x2d
    15be:	1e a6       	std	Y+46, r1	; 0x2e
    15c0:	ce 01       	movw	r24, r28
    15c2:	02 96       	adiw	r24, 0x02	; 2
    15c4:	22 d8       	rcall	.-4028   	; 0x60a <vListInitialiseItem>
    15c6:	ce 01       	movw	r24, r28
    15c8:	0e 96       	adiw	r24, 0x0e	; 14
    15ca:	1f d8       	rcall	.-4034   	; 0x60a <vListInitialiseItem>
    15cc:	db 87       	std	Y+11, r29	; 0x0b
    15ce:	ca 87       	std	Y+10, r28	; 0x0a
    15d0:	8a e0       	ldi	r24, 0x0A	; 10
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	a0 e0       	ldi	r26, 0x00	; 0
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	80 1b       	sub	r24, r16
    15da:	91 09       	sbc	r25, r1
    15dc:	a1 09       	sbc	r26, r1
    15de:	b1 09       	sbc	r27, r1
    15e0:	8e 87       	std	Y+14, r24	; 0x0e
    15e2:	9f 87       	std	Y+15, r25	; 0x0f
    15e4:	a8 8b       	std	Y+16, r26	; 0x10
    15e6:	b9 8b       	std	Y+17, r27	; 0x11
    15e8:	df 8b       	std	Y+23, r29	; 0x17
    15ea:	ce 8b       	std	Y+22, r28	; 0x16
    15ec:	84 e0       	ldi	r24, 0x04	; 4
    15ee:	fe 01       	movw	r30, r28
    15f0:	bf 96       	adiw	r30, 0x2f	; 47
    15f2:	df 01       	movw	r26, r30
    15f4:	1d 92       	st	X+, r1
    15f6:	8a 95       	dec	r24
    15f8:	e9 f7       	brne	.-6      	; 0x15f4 <prvInitialiseNewTask+0xb6>
    15fa:	1b aa       	std	Y+51, r1	; 0x33
    15fc:	a3 01       	movw	r20, r6
    15fe:	b2 01       	movw	r22, r4
    1600:	c4 01       	movw	r24, r8
    1602:	77 d8       	rcall	.-3858   	; 0x6f2 <pxPortInitialiseStack>
    1604:	99 83       	std	Y+1, r25	; 0x01
    1606:	88 83       	st	Y, r24
    1608:	e1 14       	cp	r14, r1
    160a:	f1 04       	cpc	r15, r1
    160c:	19 f0       	breq	.+6      	; 0x1614 <prvInitialiseNewTask+0xd6>
    160e:	f7 01       	movw	r30, r14
    1610:	d1 83       	std	Z+1, r29	; 0x01
    1612:	c0 83       	st	Z, r28
    1614:	df 91       	pop	r29
    1616:	cf 91       	pop	r28
    1618:	0f 91       	pop	r16
    161a:	ff 90       	pop	r15
    161c:	ef 90       	pop	r14
    161e:	df 90       	pop	r13
    1620:	cf 90       	pop	r12
    1622:	bf 90       	pop	r11
    1624:	af 90       	pop	r10
    1626:	9f 90       	pop	r9
    1628:	8f 90       	pop	r8
    162a:	7f 90       	pop	r7
    162c:	6f 90       	pop	r6
    162e:	5f 90       	pop	r5
    1630:	4f 90       	pop	r4
    1632:	08 95       	ret

00001634 <prvInitialiseTaskLists>:
    1634:	cf 93       	push	r28
    1636:	c0 e0       	ldi	r28, 0x00	; 0
    1638:	09 c0       	rjmp	.+18     	; 0x164c <prvInitialiseTaskLists+0x18>
    163a:	2b e0       	ldi	r18, 0x0B	; 11
    163c:	c2 9f       	mul	r28, r18
    163e:	c0 01       	movw	r24, r0
    1640:	11 24       	eor	r1, r1
    1642:	8b 50       	subi	r24, 0x0B	; 11
    1644:	9f 4e       	sbci	r25, 0xEF	; 239
    1646:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <vListInitialise>
    164a:	cf 5f       	subi	r28, 0xFF	; 255
    164c:	ca 30       	cpi	r28, 0x0A	; 10
    164e:	a8 f3       	brcs	.-22     	; 0x163a <prvInitialiseTaskLists+0x6>
    1650:	8a ee       	ldi	r24, 0xEA	; 234
    1652:	90 e1       	ldi	r25, 0x10	; 16
    1654:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <vListInitialise>
    1658:	8f ed       	ldi	r24, 0xDF	; 223
    165a:	90 e1       	ldi	r25, 0x10	; 16
    165c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <vListInitialise>
    1660:	80 ed       	ldi	r24, 0xD0	; 208
    1662:	90 e1       	ldi	r25, 0x10	; 16
    1664:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <vListInitialise>
    1668:	85 ec       	ldi	r24, 0xC5	; 197
    166a:	90 e1       	ldi	r25, 0x10	; 16
    166c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <vListInitialise>
    1670:	89 eb       	ldi	r24, 0xB9	; 185
    1672:	90 e1       	ldi	r25, 0x10	; 16
    1674:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <vListInitialise>
    1678:	8a ee       	ldi	r24, 0xEA	; 234
    167a:	90 e1       	ldi	r25, 0x10	; 16
    167c:	90 93 de 10 	sts	0x10DE, r25	; 0x8010de <pxDelayedTaskList+0x1>
    1680:	80 93 dd 10 	sts	0x10DD, r24	; 0x8010dd <pxDelayedTaskList>
    1684:	8f ed       	ldi	r24, 0xDF	; 223
    1686:	90 e1       	ldi	r25, 0x10	; 16
    1688:	90 93 dc 10 	sts	0x10DC, r25	; 0x8010dc <pxOverflowDelayedTaskList+0x1>
    168c:	80 93 db 10 	sts	0x10DB, r24	; 0x8010db <pxOverflowDelayedTaskList>
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

00001694 <prvAddNewTaskToReadyList>:
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	ec 01       	movw	r28, r24
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	0f 92       	push	r0
    16a0:	80 91 b8 10 	lds	r24, 0x10B8	; 0x8010b8 <uxCurrentNumberOfTasks>
    16a4:	8f 5f       	subi	r24, 0xFF	; 255
    16a6:	80 93 b8 10 	sts	0x10B8, r24	; 0x8010b8 <uxCurrentNumberOfTasks>
    16aa:	80 91 63 11 	lds	r24, 0x1163	; 0x801163 <pxCurrentTCB>
    16ae:	90 91 64 11 	lds	r25, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    16b2:	89 2b       	or	r24, r25
    16b4:	51 f4       	brne	.+20     	; 0x16ca <prvAddNewTaskToReadyList+0x36>
    16b6:	d0 93 64 11 	sts	0x1164, r29	; 0x801164 <pxCurrentTCB+0x1>
    16ba:	c0 93 63 11 	sts	0x1163, r28	; 0x801163 <pxCurrentTCB>
    16be:	80 91 b8 10 	lds	r24, 0x10B8	; 0x8010b8 <uxCurrentNumberOfTasks>
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	91 f4       	brne	.+36     	; 0x16ea <prvAddNewTaskToReadyList+0x56>
    16c6:	b6 df       	rcall	.-148    	; 0x1634 <prvInitialiseTaskLists>
    16c8:	10 c0       	rjmp	.+32     	; 0x16ea <prvAddNewTaskToReadyList+0x56>
    16ca:	80 91 b2 10 	lds	r24, 0x10B2	; 0x8010b2 <xSchedulerRunning>
    16ce:	81 11       	cpse	r24, r1
    16d0:	0c c0       	rjmp	.+24     	; 0x16ea <prvAddNewTaskToReadyList+0x56>
    16d2:	e0 91 63 11 	lds	r30, 0x1163	; 0x801163 <pxCurrentTCB>
    16d6:	f0 91 64 11 	lds	r31, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    16da:	92 8d       	ldd	r25, Z+26	; 0x1a
    16dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16de:	89 17       	cp	r24, r25
    16e0:	20 f0       	brcs	.+8      	; 0x16ea <prvAddNewTaskToReadyList+0x56>
    16e2:	d0 93 64 11 	sts	0x1164, r29	; 0x801164 <pxCurrentTCB+0x1>
    16e6:	c0 93 63 11 	sts	0x1163, r28	; 0x801163 <pxCurrentTCB>
    16ea:	80 91 ab 10 	lds	r24, 0x10AB	; 0x8010ab <uxTaskNumber>
    16ee:	8f 5f       	subi	r24, 0xFF	; 255
    16f0:	80 93 ab 10 	sts	0x10AB, r24	; 0x8010ab <uxTaskNumber>
    16f4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    16f6:	80 91 b3 10 	lds	r24, 0x10B3	; 0x8010b3 <uxTopReadyPriority>
    16fa:	8e 17       	cp	r24, r30
    16fc:	10 f4       	brcc	.+4      	; 0x1702 <prvAddNewTaskToReadyList+0x6e>
    16fe:	e0 93 b3 10 	sts	0x10B3, r30	; 0x8010b3 <uxTopReadyPriority>
    1702:	8b e0       	ldi	r24, 0x0B	; 11
    1704:	8e 9f       	mul	r24, r30
    1706:	f0 01       	movw	r30, r0
    1708:	11 24       	eor	r1, r1
    170a:	eb 50       	subi	r30, 0x0B	; 11
    170c:	ff 4e       	sbci	r31, 0xEF	; 239
    170e:	01 80       	ldd	r0, Z+1	; 0x01
    1710:	f2 81       	ldd	r31, Z+2	; 0x02
    1712:	e0 2d       	mov	r30, r0
    1714:	ff 83       	std	Y+7, r31	; 0x07
    1716:	ee 83       	std	Y+6, r30	; 0x06
    1718:	26 81       	ldd	r18, Z+6	; 0x06
    171a:	37 81       	ldd	r19, Z+7	; 0x07
    171c:	39 87       	std	Y+9, r19	; 0x09
    171e:	28 87       	std	Y+8, r18	; 0x08
    1720:	a6 81       	ldd	r26, Z+6	; 0x06
    1722:	b7 81       	ldd	r27, Z+7	; 0x07
    1724:	9e 01       	movw	r18, r28
    1726:	2e 5f       	subi	r18, 0xFE	; 254
    1728:	3f 4f       	sbci	r19, 0xFF	; 255
    172a:	15 96       	adiw	r26, 0x05	; 5
    172c:	3c 93       	st	X, r19
    172e:	2e 93       	st	-X, r18
    1730:	14 97       	sbiw	r26, 0x04	; 4
    1732:	37 83       	std	Z+7, r19	; 0x07
    1734:	26 83       	std	Z+6, r18	; 0x06
    1736:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1738:	8e 9f       	mul	r24, r30
    173a:	f0 01       	movw	r30, r0
    173c:	11 24       	eor	r1, r1
    173e:	eb 50       	subi	r30, 0x0B	; 11
    1740:	ff 4e       	sbci	r31, 0xEF	; 239
    1742:	fd 87       	std	Y+13, r31	; 0x0d
    1744:	ec 87       	std	Y+12, r30	; 0x0c
    1746:	80 81       	ld	r24, Z
    1748:	8f 5f       	subi	r24, 0xFF	; 255
    174a:	80 83       	st	Z, r24
    174c:	0f 90       	pop	r0
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	80 91 b2 10 	lds	r24, 0x10B2	; 0x8010b2 <xSchedulerRunning>
    1754:	88 23       	and	r24, r24
    1756:	49 f0       	breq	.+18     	; 0x176a <prvAddNewTaskToReadyList+0xd6>
    1758:	e0 91 63 11 	lds	r30, 0x1163	; 0x801163 <pxCurrentTCB>
    175c:	f0 91 64 11 	lds	r31, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    1760:	92 8d       	ldd	r25, Z+26	; 0x1a
    1762:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1764:	98 17       	cp	r25, r24
    1766:	08 f4       	brcc	.+2      	; 0x176a <prvAddNewTaskToReadyList+0xd6>
    1768:	0d d8       	rcall	.-4070   	; 0x784 <vPortYield>
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	08 95       	ret

00001770 <prvCheckTasksWaitingTermination>:
    1770:	cf 93       	push	r28
    1772:	df 93       	push	r29
    1774:	1b c0       	rjmp	.+54     	; 0x17ac <prvCheckTasksWaitingTermination+0x3c>
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	0f 92       	push	r0
    177c:	e0 91 cc 10 	lds	r30, 0x10CC	; 0x8010cc <xTasksWaitingTermination+0x7>
    1780:	f0 91 cd 10 	lds	r31, 0x10CD	; 0x8010cd <xTasksWaitingTermination+0x8>
    1784:	c0 85       	ldd	r28, Z+8	; 0x08
    1786:	d1 85       	ldd	r29, Z+9	; 0x09
    1788:	ce 01       	movw	r24, r28
    178a:	02 96       	adiw	r24, 0x02	; 2
    178c:	0e 94 46 03 	call	0x68c	; 0x68c <uxListRemove>
    1790:	80 91 b8 10 	lds	r24, 0x10B8	; 0x8010b8 <uxCurrentNumberOfTasks>
    1794:	81 50       	subi	r24, 0x01	; 1
    1796:	80 93 b8 10 	sts	0x10B8, r24	; 0x8010b8 <uxCurrentNumberOfTasks>
    179a:	80 91 c4 10 	lds	r24, 0x10C4	; 0x8010c4 <uxDeletedTasksWaitingCleanUp>
    179e:	81 50       	subi	r24, 0x01	; 1
    17a0:	80 93 c4 10 	sts	0x10C4, r24	; 0x8010c4 <uxDeletedTasksWaitingCleanUp>
    17a4:	0f 90       	pop	r0
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	ce 01       	movw	r24, r28
    17aa:	be de       	rcall	.-644    	; 0x1528 <prvDeleteTCB>
    17ac:	80 91 c4 10 	lds	r24, 0x10C4	; 0x8010c4 <uxDeletedTasksWaitingCleanUp>
    17b0:	81 11       	cpse	r24, r1
    17b2:	e1 cf       	rjmp	.-62     	; 0x1776 <prvCheckTasksWaitingTermination+0x6>
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	08 95       	ret

000017ba <prvAddCurrentTaskToDelayedList>:
    17ba:	8f 92       	push	r8
    17bc:	9f 92       	push	r9
    17be:	af 92       	push	r10
    17c0:	bf 92       	push	r11
    17c2:	cf 92       	push	r12
    17c4:	df 92       	push	r13
    17c6:	ef 92       	push	r14
    17c8:	ff 92       	push	r15
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	6b 01       	movw	r12, r22
    17d0:	7c 01       	movw	r14, r24
    17d2:	c4 2f       	mov	r28, r20
    17d4:	80 90 b4 10 	lds	r8, 0x10B4	; 0x8010b4 <xTickCount>
    17d8:	90 90 b5 10 	lds	r9, 0x10B5	; 0x8010b5 <xTickCount+0x1>
    17dc:	a0 90 b6 10 	lds	r10, 0x10B6	; 0x8010b6 <xTickCount+0x2>
    17e0:	b0 90 b7 10 	lds	r11, 0x10B7	; 0x8010b7 <xTickCount+0x3>
    17e4:	80 91 63 11 	lds	r24, 0x1163	; 0x801163 <pxCurrentTCB>
    17e8:	90 91 64 11 	lds	r25, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    17ec:	02 96       	adiw	r24, 0x02	; 2
    17ee:	0e 94 46 03 	call	0x68c	; 0x68c <uxListRemove>
    17f2:	8f ef       	ldi	r24, 0xFF	; 255
    17f4:	c8 16       	cp	r12, r24
    17f6:	d8 06       	cpc	r13, r24
    17f8:	e8 06       	cpc	r14, r24
    17fa:	f8 06       	cpc	r15, r24
    17fc:	b1 f5       	brne	.+108    	; 0x186a <prvAddCurrentTaskToDelayedList+0xb0>
    17fe:	cc 23       	and	r28, r28
    1800:	a1 f1       	breq	.+104    	; 0x186a <prvAddCurrentTaskToDelayedList+0xb0>
    1802:	e9 eb       	ldi	r30, 0xB9	; 185
    1804:	f0 e1       	ldi	r31, 0x10	; 16
    1806:	a1 81       	ldd	r26, Z+1	; 0x01
    1808:	b2 81       	ldd	r27, Z+2	; 0x02
    180a:	c0 91 63 11 	lds	r28, 0x1163	; 0x801163 <pxCurrentTCB>
    180e:	d0 91 64 11 	lds	r29, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    1812:	bf 83       	std	Y+7, r27	; 0x07
    1814:	ae 83       	std	Y+6, r26	; 0x06
    1816:	c0 91 63 11 	lds	r28, 0x1163	; 0x801163 <pxCurrentTCB>
    181a:	d0 91 64 11 	lds	r29, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    181e:	16 96       	adiw	r26, 0x06	; 6
    1820:	8d 91       	ld	r24, X+
    1822:	9c 91       	ld	r25, X
    1824:	17 97       	sbiw	r26, 0x07	; 7
    1826:	99 87       	std	Y+9, r25	; 0x09
    1828:	88 87       	std	Y+8, r24	; 0x08
    182a:	16 96       	adiw	r26, 0x06	; 6
    182c:	cd 91       	ld	r28, X+
    182e:	dc 91       	ld	r29, X
    1830:	17 97       	sbiw	r26, 0x07	; 7
    1832:	80 91 63 11 	lds	r24, 0x1163	; 0x801163 <pxCurrentTCB>
    1836:	90 91 64 11 	lds	r25, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    183a:	02 96       	adiw	r24, 0x02	; 2
    183c:	9d 83       	std	Y+5, r25	; 0x05
    183e:	8c 83       	std	Y+4, r24	; 0x04
    1840:	80 91 63 11 	lds	r24, 0x1163	; 0x801163 <pxCurrentTCB>
    1844:	90 91 64 11 	lds	r25, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    1848:	02 96       	adiw	r24, 0x02	; 2
    184a:	17 96       	adiw	r26, 0x07	; 7
    184c:	9c 93       	st	X, r25
    184e:	8e 93       	st	-X, r24
    1850:	16 97       	sbiw	r26, 0x06	; 6
    1852:	a0 91 63 11 	lds	r26, 0x1163	; 0x801163 <pxCurrentTCB>
    1856:	b0 91 64 11 	lds	r27, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    185a:	1d 96       	adiw	r26, 0x0d	; 13
    185c:	fc 93       	st	X, r31
    185e:	ee 93       	st	-X, r30
    1860:	1c 97       	sbiw	r26, 0x0c	; 12
    1862:	80 81       	ld	r24, Z
    1864:	8f 5f       	subi	r24, 0xFF	; 255
    1866:	80 83       	st	Z, r24
    1868:	3f c0       	rjmp	.+126    	; 0x18e8 <prvAddCurrentTaskToDelayedList+0x12e>
    186a:	c8 0c       	add	r12, r8
    186c:	d9 1c       	adc	r13, r9
    186e:	ea 1c       	adc	r14, r10
    1870:	fb 1c       	adc	r15, r11
    1872:	e0 91 63 11 	lds	r30, 0x1163	; 0x801163 <pxCurrentTCB>
    1876:	f0 91 64 11 	lds	r31, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    187a:	c2 82       	std	Z+2, r12	; 0x02
    187c:	d3 82       	std	Z+3, r13	; 0x03
    187e:	e4 82       	std	Z+4, r14	; 0x04
    1880:	f5 82       	std	Z+5, r15	; 0x05
    1882:	c8 14       	cp	r12, r8
    1884:	d9 04       	cpc	r13, r9
    1886:	ea 04       	cpc	r14, r10
    1888:	fb 04       	cpc	r15, r11
    188a:	68 f4       	brcc	.+26     	; 0x18a6 <prvAddCurrentTaskToDelayedList+0xec>
    188c:	60 91 63 11 	lds	r22, 0x1163	; 0x801163 <pxCurrentTCB>
    1890:	70 91 64 11 	lds	r23, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    1894:	80 91 db 10 	lds	r24, 0x10DB	; 0x8010db <pxOverflowDelayedTaskList>
    1898:	90 91 dc 10 	lds	r25, 0x10DC	; 0x8010dc <pxOverflowDelayedTaskList+0x1>
    189c:	6e 5f       	subi	r22, 0xFE	; 254
    189e:	7f 4f       	sbci	r23, 0xFF	; 255
    18a0:	0e 94 09 03 	call	0x612	; 0x612 <vListInsert>
    18a4:	21 c0       	rjmp	.+66     	; 0x18e8 <prvAddCurrentTaskToDelayedList+0x12e>
    18a6:	60 91 63 11 	lds	r22, 0x1163	; 0x801163 <pxCurrentTCB>
    18aa:	70 91 64 11 	lds	r23, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    18ae:	80 91 dd 10 	lds	r24, 0x10DD	; 0x8010dd <pxDelayedTaskList>
    18b2:	90 91 de 10 	lds	r25, 0x10DE	; 0x8010de <pxDelayedTaskList+0x1>
    18b6:	6e 5f       	subi	r22, 0xFE	; 254
    18b8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ba:	0e 94 09 03 	call	0x612	; 0x612 <vListInsert>
    18be:	80 91 a7 10 	lds	r24, 0x10A7	; 0x8010a7 <xNextTaskUnblockTime>
    18c2:	90 91 a8 10 	lds	r25, 0x10A8	; 0x8010a8 <xNextTaskUnblockTime+0x1>
    18c6:	a0 91 a9 10 	lds	r26, 0x10A9	; 0x8010a9 <xNextTaskUnblockTime+0x2>
    18ca:	b0 91 aa 10 	lds	r27, 0x10AA	; 0x8010aa <xNextTaskUnblockTime+0x3>
    18ce:	c8 16       	cp	r12, r24
    18d0:	d9 06       	cpc	r13, r25
    18d2:	ea 06       	cpc	r14, r26
    18d4:	fb 06       	cpc	r15, r27
    18d6:	40 f4       	brcc	.+16     	; 0x18e8 <prvAddCurrentTaskToDelayedList+0x12e>
    18d8:	c0 92 a7 10 	sts	0x10A7, r12	; 0x8010a7 <xNextTaskUnblockTime>
    18dc:	d0 92 a8 10 	sts	0x10A8, r13	; 0x8010a8 <xNextTaskUnblockTime+0x1>
    18e0:	e0 92 a9 10 	sts	0x10A9, r14	; 0x8010a9 <xNextTaskUnblockTime+0x2>
    18e4:	f0 92 aa 10 	sts	0x10AA, r15	; 0x8010aa <xNextTaskUnblockTime+0x3>
    18e8:	df 91       	pop	r29
    18ea:	cf 91       	pop	r28
    18ec:	ff 90       	pop	r15
    18ee:	ef 90       	pop	r14
    18f0:	df 90       	pop	r13
    18f2:	cf 90       	pop	r12
    18f4:	bf 90       	pop	r11
    18f6:	af 90       	pop	r10
    18f8:	9f 90       	pop	r9
    18fa:	8f 90       	pop	r8
    18fc:	08 95       	ret

000018fe <xTaskCreate>:
    18fe:	2f 92       	push	r2
    1900:	3f 92       	push	r3
    1902:	4f 92       	push	r4
    1904:	5f 92       	push	r5
    1906:	6f 92       	push	r6
    1908:	7f 92       	push	r7
    190a:	8f 92       	push	r8
    190c:	9f 92       	push	r9
    190e:	af 92       	push	r10
    1910:	bf 92       	push	r11
    1912:	cf 92       	push	r12
    1914:	df 92       	push	r13
    1916:	ef 92       	push	r14
    1918:	ff 92       	push	r15
    191a:	0f 93       	push	r16
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	3c 01       	movw	r6, r24
    1922:	1b 01       	movw	r2, r22
    1924:	4a 01       	movw	r8, r20
    1926:	29 01       	movw	r4, r18
    1928:	ca 01       	movw	r24, r20
    192a:	0e 94 0e 02 	call	0x41c	; 0x41c <pvPortMalloc>
    192e:	6c 01       	movw	r12, r24
    1930:	89 2b       	or	r24, r25
    1932:	71 f0       	breq	.+28     	; 0x1950 <xTaskCreate+0x52>
    1934:	84 e3       	ldi	r24, 0x34	; 52
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	0e 94 0e 02 	call	0x41c	; 0x41c <pvPortMalloc>
    193c:	ec 01       	movw	r28, r24
    193e:	89 2b       	or	r24, r25
    1940:	19 f0       	breq	.+6      	; 0x1948 <xTaskCreate+0x4a>
    1942:	dc 8e       	std	Y+28, r13	; 0x1c
    1944:	cb 8e       	std	Y+27, r12	; 0x1b
    1946:	06 c0       	rjmp	.+12     	; 0x1954 <xTaskCreate+0x56>
    1948:	c6 01       	movw	r24, r12
    194a:	0e 94 b7 02 	call	0x56e	; 0x56e <vPortFree>
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <xTaskCreate+0x56>
    1950:	c0 e0       	ldi	r28, 0x00	; 0
    1952:	d0 e0       	ldi	r29, 0x00	; 0
    1954:	20 97       	sbiw	r28, 0x00	; 0
    1956:	61 f0       	breq	.+24     	; 0x1970 <xTaskCreate+0x72>
    1958:	a1 2c       	mov	r10, r1
    195a:	b1 2c       	mov	r11, r1
    195c:	6e 01       	movw	r12, r28
    195e:	92 01       	movw	r18, r4
    1960:	a4 01       	movw	r20, r8
    1962:	b1 01       	movw	r22, r2
    1964:	c3 01       	movw	r24, r6
    1966:	eb dd       	rcall	.-1066   	; 0x153e <prvInitialiseNewTask>
    1968:	ce 01       	movw	r24, r28
    196a:	94 de       	rcall	.-728    	; 0x1694 <prvAddNewTaskToReadyList>
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	01 c0       	rjmp	.+2      	; 0x1972 <xTaskCreate+0x74>
    1970:	8f ef       	ldi	r24, 0xFF	; 255
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	0f 91       	pop	r16
    1978:	ff 90       	pop	r15
    197a:	ef 90       	pop	r14
    197c:	df 90       	pop	r13
    197e:	cf 90       	pop	r12
    1980:	bf 90       	pop	r11
    1982:	af 90       	pop	r10
    1984:	9f 90       	pop	r9
    1986:	8f 90       	pop	r8
    1988:	7f 90       	pop	r7
    198a:	6f 90       	pop	r6
    198c:	5f 90       	pop	r5
    198e:	4f 90       	pop	r4
    1990:	3f 90       	pop	r3
    1992:	2f 90       	pop	r2
    1994:	08 95       	ret

00001996 <vTaskStartScheduler>:
    1996:	ef 92       	push	r14
    1998:	ff 92       	push	r15
    199a:	0f 93       	push	r16
    199c:	0f 2e       	mov	r0, r31
    199e:	f5 ea       	ldi	r31, 0xA5	; 165
    19a0:	ef 2e       	mov	r14, r31
    19a2:	f0 e1       	ldi	r31, 0x10	; 16
    19a4:	ff 2e       	mov	r15, r31
    19a6:	f0 2d       	mov	r31, r0
    19a8:	00 e0       	ldi	r16, 0x00	; 0
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	40 ec       	ldi	r20, 0xC0	; 192
    19b0:	50 e0       	ldi	r21, 0x00	; 0
    19b2:	62 e4       	ldi	r22, 0x42	; 66
    19b4:	72 e0       	ldi	r23, 0x02	; 2
    19b6:	8e e4       	ldi	r24, 0x4E	; 78
    19b8:	91 e0       	ldi	r25, 0x01	; 1
    19ba:	a1 df       	rcall	.-190    	; 0x18fe <xTaskCreate>
    19bc:	81 30       	cpi	r24, 0x01	; 1
    19be:	11 f4       	brne	.+4      	; 0x19c4 <vTaskStartScheduler+0x2e>
    19c0:	0e 94 6f 15 	call	0x2ade	; 0x2ade <xTimerCreateTimerTask>
    19c4:	81 30       	cpi	r24, 0x01	; 1
    19c6:	c9 f4       	brne	.+50     	; 0x19fa <vTaskStartScheduler+0x64>
    19c8:	f8 94       	cli
    19ca:	8f ef       	ldi	r24, 0xFF	; 255
    19cc:	9f ef       	ldi	r25, 0xFF	; 255
    19ce:	dc 01       	movw	r26, r24
    19d0:	80 93 a7 10 	sts	0x10A7, r24	; 0x8010a7 <xNextTaskUnblockTime>
    19d4:	90 93 a8 10 	sts	0x10A8, r25	; 0x8010a8 <xNextTaskUnblockTime+0x1>
    19d8:	a0 93 a9 10 	sts	0x10A9, r26	; 0x8010a9 <xNextTaskUnblockTime+0x2>
    19dc:	b0 93 aa 10 	sts	0x10AA, r27	; 0x8010aa <xNextTaskUnblockTime+0x3>
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	80 93 b2 10 	sts	0x10B2, r24	; 0x8010b2 <xSchedulerRunning>
    19e6:	10 92 b4 10 	sts	0x10B4, r1	; 0x8010b4 <xTickCount>
    19ea:	10 92 b5 10 	sts	0x10B5, r1	; 0x8010b5 <xTickCount+0x1>
    19ee:	10 92 b6 10 	sts	0x10B6, r1	; 0x8010b6 <xTickCount+0x2>
    19f2:	10 92 b7 10 	sts	0x10B7, r1	; 0x8010b7 <xTickCount+0x3>
    19f6:	0e 94 90 03 	call	0x720	; 0x720 <xPortStartScheduler>
    19fa:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    19fe:	0f 91       	pop	r16
    1a00:	ff 90       	pop	r15
    1a02:	ef 90       	pop	r14
    1a04:	08 95       	ret

00001a06 <vTaskSuspendAll>:
    1a06:	80 91 a4 10 	lds	r24, 0x10A4	; 0x8010a4 <uxSchedulerSuspended>
    1a0a:	8f 5f       	subi	r24, 0xFF	; 255
    1a0c:	80 93 a4 10 	sts	0x10A4, r24	; 0x8010a4 <uxSchedulerSuspended>
    1a10:	08 95       	ret

00001a12 <xTaskGetTickCount>:
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	0f 92       	push	r0
    1a18:	60 91 b4 10 	lds	r22, 0x10B4	; 0x8010b4 <xTickCount>
    1a1c:	70 91 b5 10 	lds	r23, 0x10B5	; 0x8010b5 <xTickCount+0x1>
    1a20:	80 91 b6 10 	lds	r24, 0x10B6	; 0x8010b6 <xTickCount+0x2>
    1a24:	90 91 b7 10 	lds	r25, 0x10B7	; 0x8010b7 <xTickCount+0x3>
    1a28:	0f 90       	pop	r0
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	08 95       	ret

00001a2e <xTaskIncrementTick>:
    1a2e:	cf 92       	push	r12
    1a30:	df 92       	push	r13
    1a32:	ef 92       	push	r14
    1a34:	ff 92       	push	r15
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	80 91 a4 10 	lds	r24, 0x10A4	; 0x8010a4 <uxSchedulerSuspended>
    1a3e:	81 11       	cpse	r24, r1
    1a40:	05 c1       	rjmp	.+522    	; 0x1c4c <xTaskIncrementTick+0x21e>
    1a42:	c0 90 b4 10 	lds	r12, 0x10B4	; 0x8010b4 <xTickCount>
    1a46:	d0 90 b5 10 	lds	r13, 0x10B5	; 0x8010b5 <xTickCount+0x1>
    1a4a:	e0 90 b6 10 	lds	r14, 0x10B6	; 0x8010b6 <xTickCount+0x2>
    1a4e:	f0 90 b7 10 	lds	r15, 0x10B7	; 0x8010b7 <xTickCount+0x3>
    1a52:	8f ef       	ldi	r24, 0xFF	; 255
    1a54:	c8 1a       	sub	r12, r24
    1a56:	d8 0a       	sbc	r13, r24
    1a58:	e8 0a       	sbc	r14, r24
    1a5a:	f8 0a       	sbc	r15, r24
    1a5c:	c0 92 b4 10 	sts	0x10B4, r12	; 0x8010b4 <xTickCount>
    1a60:	d0 92 b5 10 	sts	0x10B5, r13	; 0x8010b5 <xTickCount+0x1>
    1a64:	e0 92 b6 10 	sts	0x10B6, r14	; 0x8010b6 <xTickCount+0x2>
    1a68:	f0 92 b7 10 	sts	0x10B7, r15	; 0x8010b7 <xTickCount+0x3>
    1a6c:	c1 14       	cp	r12, r1
    1a6e:	d1 04       	cpc	r13, r1
    1a70:	e1 04       	cpc	r14, r1
    1a72:	f1 04       	cpc	r15, r1
    1a74:	b1 f4       	brne	.+44     	; 0x1aa2 <xTaskIncrementTick+0x74>
    1a76:	80 91 dd 10 	lds	r24, 0x10DD	; 0x8010dd <pxDelayedTaskList>
    1a7a:	90 91 de 10 	lds	r25, 0x10DE	; 0x8010de <pxDelayedTaskList+0x1>
    1a7e:	20 91 db 10 	lds	r18, 0x10DB	; 0x8010db <pxOverflowDelayedTaskList>
    1a82:	30 91 dc 10 	lds	r19, 0x10DC	; 0x8010dc <pxOverflowDelayedTaskList+0x1>
    1a86:	30 93 de 10 	sts	0x10DE, r19	; 0x8010de <pxDelayedTaskList+0x1>
    1a8a:	20 93 dd 10 	sts	0x10DD, r18	; 0x8010dd <pxDelayedTaskList>
    1a8e:	90 93 dc 10 	sts	0x10DC, r25	; 0x8010dc <pxOverflowDelayedTaskList+0x1>
    1a92:	80 93 db 10 	sts	0x10DB, r24	; 0x8010db <pxOverflowDelayedTaskList>
    1a96:	80 91 ac 10 	lds	r24, 0x10AC	; 0x8010ac <xNumOfOverflows>
    1a9a:	8f 5f       	subi	r24, 0xFF	; 255
    1a9c:	80 93 ac 10 	sts	0x10AC, r24	; 0x8010ac <xNumOfOverflows>
    1aa0:	1c dd       	rcall	.-1480   	; 0x14da <prvResetNextTaskUnblockTime>
    1aa2:	80 91 a7 10 	lds	r24, 0x10A7	; 0x8010a7 <xNextTaskUnblockTime>
    1aa6:	90 91 a8 10 	lds	r25, 0x10A8	; 0x8010a8 <xNextTaskUnblockTime+0x1>
    1aaa:	a0 91 a9 10 	lds	r26, 0x10A9	; 0x8010a9 <xNextTaskUnblockTime+0x2>
    1aae:	b0 91 aa 10 	lds	r27, 0x10AA	; 0x8010aa <xNextTaskUnblockTime+0x3>
    1ab2:	c8 16       	cp	r12, r24
    1ab4:	d9 06       	cpc	r13, r25
    1ab6:	ea 06       	cpc	r14, r26
    1ab8:	fb 06       	cpc	r15, r27
    1aba:	20 f4       	brcc	.+8      	; 0x1ac4 <xTaskIncrementTick+0x96>
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	b2 c0       	rjmp	.+356    	; 0x1c24 <xTaskIncrementTick+0x1f6>
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	01 c0       	rjmp	.+2      	; 0x1ac6 <xTaskIncrementTick+0x98>
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	e0 91 dd 10 	lds	r30, 0x10DD	; 0x8010dd <pxDelayedTaskList>
    1aca:	f0 91 de 10 	lds	r31, 0x10DE	; 0x8010de <pxDelayedTaskList+0x1>
    1ace:	90 81       	ld	r25, Z
    1ad0:	91 11       	cpse	r25, r1
    1ad2:	0c c0       	rjmp	.+24     	; 0x1aec <xTaskIncrementTick+0xbe>
    1ad4:	4f ef       	ldi	r20, 0xFF	; 255
    1ad6:	5f ef       	ldi	r21, 0xFF	; 255
    1ad8:	ba 01       	movw	r22, r20
    1ada:	40 93 a7 10 	sts	0x10A7, r20	; 0x8010a7 <xNextTaskUnblockTime>
    1ade:	50 93 a8 10 	sts	0x10A8, r21	; 0x8010a8 <xNextTaskUnblockTime+0x1>
    1ae2:	60 93 a9 10 	sts	0x10A9, r22	; 0x8010a9 <xNextTaskUnblockTime+0x2>
    1ae6:	70 93 aa 10 	sts	0x10AA, r23	; 0x8010aa <xNextTaskUnblockTime+0x3>
    1aea:	9c c0       	rjmp	.+312    	; 0x1c24 <xTaskIncrementTick+0x1f6>
    1aec:	e0 91 dd 10 	lds	r30, 0x10DD	; 0x8010dd <pxDelayedTaskList>
    1af0:	f0 91 de 10 	lds	r31, 0x10DE	; 0x8010de <pxDelayedTaskList+0x1>
    1af4:	07 80       	ldd	r0, Z+7	; 0x07
    1af6:	f0 85       	ldd	r31, Z+8	; 0x08
    1af8:	e0 2d       	mov	r30, r0
    1afa:	00 84       	ldd	r0, Z+8	; 0x08
    1afc:	f1 85       	ldd	r31, Z+9	; 0x09
    1afe:	e0 2d       	mov	r30, r0
    1b00:	42 81       	ldd	r20, Z+2	; 0x02
    1b02:	53 81       	ldd	r21, Z+3	; 0x03
    1b04:	64 81       	ldd	r22, Z+4	; 0x04
    1b06:	75 81       	ldd	r23, Z+5	; 0x05
    1b08:	c4 16       	cp	r12, r20
    1b0a:	d5 06       	cpc	r13, r21
    1b0c:	e6 06       	cpc	r14, r22
    1b0e:	f7 06       	cpc	r15, r23
    1b10:	48 f4       	brcc	.+18     	; 0x1b24 <xTaskIncrementTick+0xf6>
    1b12:	40 93 a7 10 	sts	0x10A7, r20	; 0x8010a7 <xNextTaskUnblockTime>
    1b16:	50 93 a8 10 	sts	0x10A8, r21	; 0x8010a8 <xNextTaskUnblockTime+0x1>
    1b1a:	60 93 a9 10 	sts	0x10A9, r22	; 0x8010a9 <xNextTaskUnblockTime+0x2>
    1b1e:	70 93 aa 10 	sts	0x10AA, r23	; 0x8010aa <xNextTaskUnblockTime+0x3>
    1b22:	80 c0       	rjmp	.+256    	; 0x1c24 <xTaskIncrementTick+0x1f6>
    1b24:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b26:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b28:	c6 81       	ldd	r28, Z+6	; 0x06
    1b2a:	d7 81       	ldd	r29, Z+7	; 0x07
    1b2c:	20 85       	ldd	r18, Z+8	; 0x08
    1b2e:	31 85       	ldd	r19, Z+9	; 0x09
    1b30:	3f 83       	std	Y+7, r19	; 0x07
    1b32:	2e 83       	std	Y+6, r18	; 0x06
    1b34:	c0 85       	ldd	r28, Z+8	; 0x08
    1b36:	d1 85       	ldd	r29, Z+9	; 0x09
    1b38:	26 81       	ldd	r18, Z+6	; 0x06
    1b3a:	37 81       	ldd	r19, Z+7	; 0x07
    1b3c:	3d 83       	std	Y+5, r19	; 0x05
    1b3e:	2c 83       	std	Y+4, r18	; 0x04
    1b40:	11 96       	adiw	r26, 0x01	; 1
    1b42:	4d 91       	ld	r20, X+
    1b44:	5c 91       	ld	r21, X
    1b46:	12 97       	sbiw	r26, 0x02	; 2
    1b48:	9f 01       	movw	r18, r30
    1b4a:	2e 5f       	subi	r18, 0xFE	; 254
    1b4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b4e:	42 17       	cp	r20, r18
    1b50:	53 07       	cpc	r21, r19
    1b52:	31 f4       	brne	.+12     	; 0x1b60 <xTaskIncrementTick+0x132>
    1b54:	40 85       	ldd	r20, Z+8	; 0x08
    1b56:	51 85       	ldd	r21, Z+9	; 0x09
    1b58:	12 96       	adiw	r26, 0x02	; 2
    1b5a:	5c 93       	st	X, r21
    1b5c:	4e 93       	st	-X, r20
    1b5e:	11 97       	sbiw	r26, 0x01	; 1
    1b60:	15 86       	std	Z+13, r1	; 0x0d
    1b62:	14 86       	std	Z+12, r1	; 0x0c
    1b64:	9c 91       	ld	r25, X
    1b66:	91 50       	subi	r25, 0x01	; 1
    1b68:	9c 93       	st	X, r25
    1b6a:	a0 8d       	ldd	r26, Z+24	; 0x18
    1b6c:	b1 8d       	ldd	r27, Z+25	; 0x19
    1b6e:	10 97       	sbiw	r26, 0x00	; 0
    1b70:	09 f1       	breq	.+66     	; 0x1bb4 <xTaskIncrementTick+0x186>
    1b72:	c2 89       	ldd	r28, Z+18	; 0x12
    1b74:	d3 89       	ldd	r29, Z+19	; 0x13
    1b76:	44 89       	ldd	r20, Z+20	; 0x14
    1b78:	55 89       	ldd	r21, Z+21	; 0x15
    1b7a:	5f 83       	std	Y+7, r21	; 0x07
    1b7c:	4e 83       	std	Y+6, r20	; 0x06
    1b7e:	c4 89       	ldd	r28, Z+20	; 0x14
    1b80:	d5 89       	ldd	r29, Z+21	; 0x15
    1b82:	42 89       	ldd	r20, Z+18	; 0x12
    1b84:	53 89       	ldd	r21, Z+19	; 0x13
    1b86:	5d 83       	std	Y+5, r21	; 0x05
    1b88:	4c 83       	std	Y+4, r20	; 0x04
    1b8a:	11 96       	adiw	r26, 0x01	; 1
    1b8c:	6d 91       	ld	r22, X+
    1b8e:	7c 91       	ld	r23, X
    1b90:	12 97       	sbiw	r26, 0x02	; 2
    1b92:	af 01       	movw	r20, r30
    1b94:	42 5f       	subi	r20, 0xF2	; 242
    1b96:	5f 4f       	sbci	r21, 0xFF	; 255
    1b98:	64 17       	cp	r22, r20
    1b9a:	75 07       	cpc	r23, r21
    1b9c:	31 f4       	brne	.+12     	; 0x1baa <xTaskIncrementTick+0x17c>
    1b9e:	44 89       	ldd	r20, Z+20	; 0x14
    1ba0:	55 89       	ldd	r21, Z+21	; 0x15
    1ba2:	12 96       	adiw	r26, 0x02	; 2
    1ba4:	5c 93       	st	X, r21
    1ba6:	4e 93       	st	-X, r20
    1ba8:	11 97       	sbiw	r26, 0x01	; 1
    1baa:	11 8e       	std	Z+25, r1	; 0x19
    1bac:	10 8e       	std	Z+24, r1	; 0x18
    1bae:	9c 91       	ld	r25, X
    1bb0:	91 50       	subi	r25, 0x01	; 1
    1bb2:	9c 93       	st	X, r25
    1bb4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1bb6:	90 91 b3 10 	lds	r25, 0x10B3	; 0x8010b3 <uxTopReadyPriority>
    1bba:	9a 17       	cp	r25, r26
    1bbc:	10 f4       	brcc	.+4      	; 0x1bc2 <xTaskIncrementTick+0x194>
    1bbe:	a0 93 b3 10 	sts	0x10B3, r26	; 0x8010b3 <uxTopReadyPriority>
    1bc2:	9b e0       	ldi	r25, 0x0B	; 11
    1bc4:	9a 9f       	mul	r25, r26
    1bc6:	d0 01       	movw	r26, r0
    1bc8:	11 24       	eor	r1, r1
    1bca:	ab 50       	subi	r26, 0x0B	; 11
    1bcc:	bf 4e       	sbci	r27, 0xEF	; 239
    1bce:	11 96       	adiw	r26, 0x01	; 1
    1bd0:	0d 90       	ld	r0, X+
    1bd2:	bc 91       	ld	r27, X
    1bd4:	a0 2d       	mov	r26, r0
    1bd6:	b7 83       	std	Z+7, r27	; 0x07
    1bd8:	a6 83       	std	Z+6, r26	; 0x06
    1bda:	16 96       	adiw	r26, 0x06	; 6
    1bdc:	4d 91       	ld	r20, X+
    1bde:	5c 91       	ld	r21, X
    1be0:	17 97       	sbiw	r26, 0x07	; 7
    1be2:	51 87       	std	Z+9, r21	; 0x09
    1be4:	40 87       	std	Z+8, r20	; 0x08
    1be6:	16 96       	adiw	r26, 0x06	; 6
    1be8:	cd 91       	ld	r28, X+
    1bea:	dc 91       	ld	r29, X
    1bec:	17 97       	sbiw	r26, 0x07	; 7
    1bee:	3d 83       	std	Y+5, r19	; 0x05
    1bf0:	2c 83       	std	Y+4, r18	; 0x04
    1bf2:	17 96       	adiw	r26, 0x07	; 7
    1bf4:	3c 93       	st	X, r19
    1bf6:	2e 93       	st	-X, r18
    1bf8:	16 97       	sbiw	r26, 0x06	; 6
    1bfa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1bfc:	9a 9f       	mul	r25, r26
    1bfe:	d0 01       	movw	r26, r0
    1c00:	11 24       	eor	r1, r1
    1c02:	ab 50       	subi	r26, 0x0B	; 11
    1c04:	bf 4e       	sbci	r27, 0xEF	; 239
    1c06:	b5 87       	std	Z+13, r27	; 0x0d
    1c08:	a4 87       	std	Z+12, r26	; 0x0c
    1c0a:	9c 91       	ld	r25, X
    1c0c:	9f 5f       	subi	r25, 0xFF	; 255
    1c0e:	9c 93       	st	X, r25
    1c10:	22 8d       	ldd	r18, Z+26	; 0x1a
    1c12:	e0 91 63 11 	lds	r30, 0x1163	; 0x801163 <pxCurrentTCB>
    1c16:	f0 91 64 11 	lds	r31, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    1c1a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c1c:	29 17       	cp	r18, r25
    1c1e:	08 f0       	brcs	.+2      	; 0x1c22 <xTaskIncrementTick+0x1f4>
    1c20:	4f cf       	rjmp	.-354    	; 0x1ac0 <xTaskIncrementTick+0x92>
    1c22:	51 cf       	rjmp	.-350    	; 0x1ac6 <xTaskIncrementTick+0x98>
    1c24:	e0 91 63 11 	lds	r30, 0x1163	; 0x801163 <pxCurrentTCB>
    1c28:	f0 91 64 11 	lds	r31, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    1c2c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1c2e:	9b e0       	ldi	r25, 0x0B	; 11
    1c30:	e9 9f       	mul	r30, r25
    1c32:	f0 01       	movw	r30, r0
    1c34:	11 24       	eor	r1, r1
    1c36:	eb 50       	subi	r30, 0x0B	; 11
    1c38:	ff 4e       	sbci	r31, 0xEF	; 239
    1c3a:	90 81       	ld	r25, Z
    1c3c:	92 30       	cpi	r25, 0x02	; 2
    1c3e:	08 f0       	brcs	.+2      	; 0x1c42 <xTaskIncrementTick+0x214>
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 91 ad 10 	lds	r25, 0x10AD	; 0x8010ad <xYieldPending>
    1c46:	91 11       	cpse	r25, r1
    1c48:	16 c0       	rjmp	.+44     	; 0x1c76 <xTaskIncrementTick+0x248>
    1c4a:	16 c0       	rjmp	.+44     	; 0x1c78 <xTaskIncrementTick+0x24a>
    1c4c:	80 91 ae 10 	lds	r24, 0x10AE	; 0x8010ae <xPendedTicks>
    1c50:	90 91 af 10 	lds	r25, 0x10AF	; 0x8010af <xPendedTicks+0x1>
    1c54:	a0 91 b0 10 	lds	r26, 0x10B0	; 0x8010b0 <xPendedTicks+0x2>
    1c58:	b0 91 b1 10 	lds	r27, 0x10B1	; 0x8010b1 <xPendedTicks+0x3>
    1c5c:	01 96       	adiw	r24, 0x01	; 1
    1c5e:	a1 1d       	adc	r26, r1
    1c60:	b1 1d       	adc	r27, r1
    1c62:	80 93 ae 10 	sts	0x10AE, r24	; 0x8010ae <xPendedTicks>
    1c66:	90 93 af 10 	sts	0x10AF, r25	; 0x8010af <xPendedTicks+0x1>
    1c6a:	a0 93 b0 10 	sts	0x10B0, r26	; 0x8010b0 <xPendedTicks+0x2>
    1c6e:	b0 93 b1 10 	sts	0x10B1, r27	; 0x8010b1 <xPendedTicks+0x3>
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	01 c0       	rjmp	.+2      	; 0x1c78 <xTaskIncrementTick+0x24a>
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	ff 90       	pop	r15
    1c7e:	ef 90       	pop	r14
    1c80:	df 90       	pop	r13
    1c82:	cf 90       	pop	r12
    1c84:	08 95       	ret

00001c86 <xTaskResumeAll>:
    1c86:	cf 92       	push	r12
    1c88:	df 92       	push	r13
    1c8a:	ef 92       	push	r14
    1c8c:	ff 92       	push	r15
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	0f 92       	push	r0
    1c98:	80 91 a4 10 	lds	r24, 0x10A4	; 0x8010a4 <uxSchedulerSuspended>
    1c9c:	81 50       	subi	r24, 0x01	; 1
    1c9e:	80 93 a4 10 	sts	0x10A4, r24	; 0x8010a4 <uxSchedulerSuspended>
    1ca2:	80 91 a4 10 	lds	r24, 0x10A4	; 0x8010a4 <uxSchedulerSuspended>
    1ca6:	81 11       	cpse	r24, r1
    1ca8:	be c0       	rjmp	.+380    	; 0x1e26 <xTaskResumeAll+0x1a0>
    1caa:	80 91 b8 10 	lds	r24, 0x10B8	; 0x8010b8 <uxCurrentNumberOfTasks>
    1cae:	81 11       	cpse	r24, r1
    1cb0:	88 c0       	rjmp	.+272    	; 0x1dc2 <xTaskResumeAll+0x13c>
    1cb2:	bc c0       	rjmp	.+376    	; 0x1e2c <xTaskResumeAll+0x1a6>
    1cb4:	e0 91 d7 10 	lds	r30, 0x10D7	; 0x8010d7 <xPendingReadyList+0x7>
    1cb8:	f0 91 d8 10 	lds	r31, 0x10D8	; 0x8010d8 <xPendingReadyList+0x8>
    1cbc:	00 84       	ldd	r0, Z+8	; 0x08
    1cbe:	f1 85       	ldd	r31, Z+9	; 0x09
    1cc0:	e0 2d       	mov	r30, r0
    1cc2:	a0 8d       	ldd	r26, Z+24	; 0x18
    1cc4:	b1 8d       	ldd	r27, Z+25	; 0x19
    1cc6:	c2 89       	ldd	r28, Z+18	; 0x12
    1cc8:	d3 89       	ldd	r29, Z+19	; 0x13
    1cca:	84 89       	ldd	r24, Z+20	; 0x14
    1ccc:	95 89       	ldd	r25, Z+21	; 0x15
    1cce:	9f 83       	std	Y+7, r25	; 0x07
    1cd0:	8e 83       	std	Y+6, r24	; 0x06
    1cd2:	c4 89       	ldd	r28, Z+20	; 0x14
    1cd4:	d5 89       	ldd	r29, Z+21	; 0x15
    1cd6:	82 89       	ldd	r24, Z+18	; 0x12
    1cd8:	93 89       	ldd	r25, Z+19	; 0x13
    1cda:	9d 83       	std	Y+5, r25	; 0x05
    1cdc:	8c 83       	std	Y+4, r24	; 0x04
    1cde:	11 96       	adiw	r26, 0x01	; 1
    1ce0:	2d 91       	ld	r18, X+
    1ce2:	3c 91       	ld	r19, X
    1ce4:	12 97       	sbiw	r26, 0x02	; 2
    1ce6:	cf 01       	movw	r24, r30
    1ce8:	0e 96       	adiw	r24, 0x0e	; 14
    1cea:	28 17       	cp	r18, r24
    1cec:	39 07       	cpc	r19, r25
    1cee:	31 f4       	brne	.+12     	; 0x1cfc <xTaskResumeAll+0x76>
    1cf0:	84 89       	ldd	r24, Z+20	; 0x14
    1cf2:	95 89       	ldd	r25, Z+21	; 0x15
    1cf4:	12 96       	adiw	r26, 0x02	; 2
    1cf6:	9c 93       	st	X, r25
    1cf8:	8e 93       	st	-X, r24
    1cfa:	11 97       	sbiw	r26, 0x01	; 1
    1cfc:	11 8e       	std	Z+25, r1	; 0x19
    1cfe:	10 8e       	std	Z+24, r1	; 0x18
    1d00:	8c 91       	ld	r24, X
    1d02:	81 50       	subi	r24, 0x01	; 1
    1d04:	8c 93       	st	X, r24
    1d06:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d08:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d0a:	c6 81       	ldd	r28, Z+6	; 0x06
    1d0c:	d7 81       	ldd	r29, Z+7	; 0x07
    1d0e:	80 85       	ldd	r24, Z+8	; 0x08
    1d10:	91 85       	ldd	r25, Z+9	; 0x09
    1d12:	9f 83       	std	Y+7, r25	; 0x07
    1d14:	8e 83       	std	Y+6, r24	; 0x06
    1d16:	c0 85       	ldd	r28, Z+8	; 0x08
    1d18:	d1 85       	ldd	r29, Z+9	; 0x09
    1d1a:	86 81       	ldd	r24, Z+6	; 0x06
    1d1c:	97 81       	ldd	r25, Z+7	; 0x07
    1d1e:	9d 83       	std	Y+5, r25	; 0x05
    1d20:	8c 83       	std	Y+4, r24	; 0x04
    1d22:	11 96       	adiw	r26, 0x01	; 1
    1d24:	8d 91       	ld	r24, X+
    1d26:	9c 91       	ld	r25, X
    1d28:	12 97       	sbiw	r26, 0x02	; 2
    1d2a:	9f 01       	movw	r18, r30
    1d2c:	2e 5f       	subi	r18, 0xFE	; 254
    1d2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d30:	82 17       	cp	r24, r18
    1d32:	93 07       	cpc	r25, r19
    1d34:	31 f4       	brne	.+12     	; 0x1d42 <xTaskResumeAll+0xbc>
    1d36:	80 85       	ldd	r24, Z+8	; 0x08
    1d38:	91 85       	ldd	r25, Z+9	; 0x09
    1d3a:	12 96       	adiw	r26, 0x02	; 2
    1d3c:	9c 93       	st	X, r25
    1d3e:	8e 93       	st	-X, r24
    1d40:	11 97       	sbiw	r26, 0x01	; 1
    1d42:	15 86       	std	Z+13, r1	; 0x0d
    1d44:	14 86       	std	Z+12, r1	; 0x0c
    1d46:	8c 91       	ld	r24, X
    1d48:	81 50       	subi	r24, 0x01	; 1
    1d4a:	8c 93       	st	X, r24
    1d4c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d4e:	80 91 b3 10 	lds	r24, 0x10B3	; 0x8010b3 <uxTopReadyPriority>
    1d52:	8a 17       	cp	r24, r26
    1d54:	10 f4       	brcc	.+4      	; 0x1d5a <xTaskResumeAll+0xd4>
    1d56:	a0 93 b3 10 	sts	0x10B3, r26	; 0x8010b3 <uxTopReadyPriority>
    1d5a:	8b e0       	ldi	r24, 0x0B	; 11
    1d5c:	8a 9f       	mul	r24, r26
    1d5e:	d0 01       	movw	r26, r0
    1d60:	11 24       	eor	r1, r1
    1d62:	ab 50       	subi	r26, 0x0B	; 11
    1d64:	bf 4e       	sbci	r27, 0xEF	; 239
    1d66:	11 96       	adiw	r26, 0x01	; 1
    1d68:	0d 90       	ld	r0, X+
    1d6a:	bc 91       	ld	r27, X
    1d6c:	a0 2d       	mov	r26, r0
    1d6e:	b7 83       	std	Z+7, r27	; 0x07
    1d70:	a6 83       	std	Z+6, r26	; 0x06
    1d72:	16 96       	adiw	r26, 0x06	; 6
    1d74:	4d 91       	ld	r20, X+
    1d76:	5c 91       	ld	r21, X
    1d78:	17 97       	sbiw	r26, 0x07	; 7
    1d7a:	51 87       	std	Z+9, r21	; 0x09
    1d7c:	40 87       	std	Z+8, r20	; 0x08
    1d7e:	16 96       	adiw	r26, 0x06	; 6
    1d80:	cd 91       	ld	r28, X+
    1d82:	dc 91       	ld	r29, X
    1d84:	17 97       	sbiw	r26, 0x07	; 7
    1d86:	3d 83       	std	Y+5, r19	; 0x05
    1d88:	2c 83       	std	Y+4, r18	; 0x04
    1d8a:	17 96       	adiw	r26, 0x07	; 7
    1d8c:	3c 93       	st	X, r19
    1d8e:	2e 93       	st	-X, r18
    1d90:	16 97       	sbiw	r26, 0x06	; 6
    1d92:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d94:	8a 9f       	mul	r24, r26
    1d96:	d0 01       	movw	r26, r0
    1d98:	11 24       	eor	r1, r1
    1d9a:	ab 50       	subi	r26, 0x0B	; 11
    1d9c:	bf 4e       	sbci	r27, 0xEF	; 239
    1d9e:	b5 87       	std	Z+13, r27	; 0x0d
    1da0:	a4 87       	std	Z+12, r26	; 0x0c
    1da2:	8c 91       	ld	r24, X
    1da4:	8f 5f       	subi	r24, 0xFF	; 255
    1da6:	8c 93       	st	X, r24
    1da8:	92 8d       	ldd	r25, Z+26	; 0x1a
    1daa:	a0 91 63 11 	lds	r26, 0x1163	; 0x801163 <pxCurrentTCB>
    1dae:	b0 91 64 11 	lds	r27, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    1db2:	5a 96       	adiw	r26, 0x1a	; 26
    1db4:	8c 91       	ld	r24, X
    1db6:	98 17       	cp	r25, r24
    1db8:	30 f0       	brcs	.+12     	; 0x1dc6 <xTaskResumeAll+0x140>
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	80 93 ad 10 	sts	0x10AD, r24	; 0x8010ad <xYieldPending>
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <xTaskResumeAll+0x140>
    1dc2:	e0 e0       	ldi	r30, 0x00	; 0
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 91 d0 10 	lds	r24, 0x10D0	; 0x8010d0 <xPendingReadyList>
    1dca:	81 11       	cpse	r24, r1
    1dcc:	73 cf       	rjmp	.-282    	; 0x1cb4 <xTaskResumeAll+0x2e>
    1dce:	ef 2b       	or	r30, r31
    1dd0:	09 f0       	breq	.+2      	; 0x1dd4 <xTaskResumeAll+0x14e>
    1dd2:	83 db       	rcall	.-2298   	; 0x14da <prvResetNextTaskUnblockTime>
    1dd4:	c0 90 ae 10 	lds	r12, 0x10AE	; 0x8010ae <xPendedTicks>
    1dd8:	d0 90 af 10 	lds	r13, 0x10AF	; 0x8010af <xPendedTicks+0x1>
    1ddc:	e0 90 b0 10 	lds	r14, 0x10B0	; 0x8010b0 <xPendedTicks+0x2>
    1de0:	f0 90 b1 10 	lds	r15, 0x10B1	; 0x8010b1 <xPendedTicks+0x3>
    1de4:	c1 14       	cp	r12, r1
    1de6:	d1 04       	cpc	r13, r1
    1de8:	e1 04       	cpc	r14, r1
    1dea:	f1 04       	cpc	r15, r1
    1dec:	a1 f0       	breq	.+40     	; 0x1e16 <xTaskResumeAll+0x190>
    1dee:	1f de       	rcall	.-962    	; 0x1a2e <xTaskIncrementTick>
    1df0:	88 23       	and	r24, r24
    1df2:	19 f0       	breq	.+6      	; 0x1dfa <xTaskResumeAll+0x174>
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	80 93 ad 10 	sts	0x10AD, r24	; 0x8010ad <xYieldPending>
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	c8 1a       	sub	r12, r24
    1dfe:	d1 08       	sbc	r13, r1
    1e00:	e1 08       	sbc	r14, r1
    1e02:	f1 08       	sbc	r15, r1
    1e04:	a1 f7       	brne	.-24     	; 0x1dee <xTaskResumeAll+0x168>
    1e06:	10 92 ae 10 	sts	0x10AE, r1	; 0x8010ae <xPendedTicks>
    1e0a:	10 92 af 10 	sts	0x10AF, r1	; 0x8010af <xPendedTicks+0x1>
    1e0e:	10 92 b0 10 	sts	0x10B0, r1	; 0x8010b0 <xPendedTicks+0x2>
    1e12:	10 92 b1 10 	sts	0x10B1, r1	; 0x8010b1 <xPendedTicks+0x3>
    1e16:	80 91 ad 10 	lds	r24, 0x10AD	; 0x8010ad <xYieldPending>
    1e1a:	88 23       	and	r24, r24
    1e1c:	31 f0       	breq	.+12     	; 0x1e2a <xTaskResumeAll+0x1a4>
    1e1e:	0e 94 c2 03 	call	0x784	; 0x784 <vPortYield>
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	03 c0       	rjmp	.+6      	; 0x1e2c <xTaskResumeAll+0x1a6>
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	01 c0       	rjmp	.+2      	; 0x1e2c <xTaskResumeAll+0x1a6>
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	ff 90       	pop	r15
    1e36:	ef 90       	pop	r14
    1e38:	df 90       	pop	r13
    1e3a:	cf 90       	pop	r12
    1e3c:	08 95       	ret

00001e3e <xTaskDelayUntil>:
    1e3e:	8f 92       	push	r8
    1e40:	9f 92       	push	r9
    1e42:	af 92       	push	r10
    1e44:	bf 92       	push	r11
    1e46:	cf 92       	push	r12
    1e48:	df 92       	push	r13
    1e4a:	ef 92       	push	r14
    1e4c:	ff 92       	push	r15
    1e4e:	1f 93       	push	r17
    1e50:	cf 93       	push	r28
    1e52:	df 93       	push	r29
    1e54:	ec 01       	movw	r28, r24
    1e56:	6a 01       	movw	r12, r20
    1e58:	7b 01       	movw	r14, r22
    1e5a:	d5 dd       	rcall	.-1110   	; 0x1a06 <vTaskSuspendAll>
    1e5c:	80 90 b4 10 	lds	r8, 0x10B4	; 0x8010b4 <xTickCount>
    1e60:	90 90 b5 10 	lds	r9, 0x10B5	; 0x8010b5 <xTickCount+0x1>
    1e64:	a0 90 b6 10 	lds	r10, 0x10B6	; 0x8010b6 <xTickCount+0x2>
    1e68:	b0 90 b7 10 	lds	r11, 0x10B7	; 0x8010b7 <xTickCount+0x3>
    1e6c:	88 81       	ld	r24, Y
    1e6e:	99 81       	ldd	r25, Y+1	; 0x01
    1e70:	aa 81       	ldd	r26, Y+2	; 0x02
    1e72:	bb 81       	ldd	r27, Y+3	; 0x03
    1e74:	ac 01       	movw	r20, r24
    1e76:	bd 01       	movw	r22, r26
    1e78:	4c 0d       	add	r20, r12
    1e7a:	5d 1d       	adc	r21, r13
    1e7c:	6e 1d       	adc	r22, r14
    1e7e:	7f 1d       	adc	r23, r15
    1e80:	88 16       	cp	r8, r24
    1e82:	99 06       	cpc	r9, r25
    1e84:	aa 06       	cpc	r10, r26
    1e86:	bb 06       	cpc	r11, r27
    1e88:	60 f4       	brcc	.+24     	; 0x1ea2 <xTaskDelayUntil+0x64>
    1e8a:	48 17       	cp	r20, r24
    1e8c:	59 07       	cpc	r21, r25
    1e8e:	6a 07       	cpc	r22, r26
    1e90:	7b 07       	cpc	r23, r27
    1e92:	98 f4       	brcc	.+38     	; 0x1eba <xTaskDelayUntil+0x7c>
    1e94:	84 16       	cp	r8, r20
    1e96:	95 06       	cpc	r9, r21
    1e98:	a6 06       	cpc	r10, r22
    1e9a:	b7 06       	cpc	r11, r23
    1e9c:	80 f0       	brcs	.+32     	; 0x1ebe <xTaskDelayUntil+0x80>
    1e9e:	10 e0       	ldi	r17, 0x00	; 0
    1ea0:	13 c0       	rjmp	.+38     	; 0x1ec8 <xTaskDelayUntil+0x8a>
    1ea2:	48 17       	cp	r20, r24
    1ea4:	59 07       	cpc	r21, r25
    1ea6:	6a 07       	cpc	r22, r26
    1ea8:	7b 07       	cpc	r23, r27
    1eaa:	58 f0       	brcs	.+22     	; 0x1ec2 <xTaskDelayUntil+0x84>
    1eac:	84 16       	cp	r8, r20
    1eae:	95 06       	cpc	r9, r21
    1eb0:	a6 06       	cpc	r10, r22
    1eb2:	b7 06       	cpc	r11, r23
    1eb4:	40 f0       	brcs	.+16     	; 0x1ec6 <xTaskDelayUntil+0x88>
    1eb6:	10 e0       	ldi	r17, 0x00	; 0
    1eb8:	07 c0       	rjmp	.+14     	; 0x1ec8 <xTaskDelayUntil+0x8a>
    1eba:	10 e0       	ldi	r17, 0x00	; 0
    1ebc:	05 c0       	rjmp	.+10     	; 0x1ec8 <xTaskDelayUntil+0x8a>
    1ebe:	11 e0       	ldi	r17, 0x01	; 1
    1ec0:	03 c0       	rjmp	.+6      	; 0x1ec8 <xTaskDelayUntil+0x8a>
    1ec2:	11 e0       	ldi	r17, 0x01	; 1
    1ec4:	01 c0       	rjmp	.+2      	; 0x1ec8 <xTaskDelayUntil+0x8a>
    1ec6:	11 e0       	ldi	r17, 0x01	; 1
    1ec8:	48 83       	st	Y, r20
    1eca:	59 83       	std	Y+1, r21	; 0x01
    1ecc:	6a 83       	std	Y+2, r22	; 0x02
    1ece:	7b 83       	std	Y+3, r23	; 0x03
    1ed0:	11 23       	and	r17, r17
    1ed2:	41 f0       	breq	.+16     	; 0x1ee4 <xTaskDelayUntil+0xa6>
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	ba 01       	movw	r22, r20
    1ed8:	68 19       	sub	r22, r8
    1eda:	79 09       	sbc	r23, r9
    1edc:	8a 09       	sbc	r24, r10
    1ede:	9b 09       	sbc	r25, r11
    1ee0:	40 e0       	ldi	r20, 0x00	; 0
    1ee2:	6b dc       	rcall	.-1834   	; 0x17ba <prvAddCurrentTaskToDelayedList>
    1ee4:	d0 de       	rcall	.-608    	; 0x1c86 <xTaskResumeAll>
    1ee6:	81 11       	cpse	r24, r1
    1ee8:	02 c0       	rjmp	.+4      	; 0x1eee <xTaskDelayUntil+0xb0>
    1eea:	0e 94 c2 03 	call	0x784	; 0x784 <vPortYield>
    1eee:	81 2f       	mov	r24, r17
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	1f 91       	pop	r17
    1ef6:	ff 90       	pop	r15
    1ef8:	ef 90       	pop	r14
    1efa:	df 90       	pop	r13
    1efc:	cf 90       	pop	r12
    1efe:	bf 90       	pop	r11
    1f00:	af 90       	pop	r10
    1f02:	9f 90       	pop	r9
    1f04:	8f 90       	pop	r8
    1f06:	08 95       	ret

00001f08 <vTaskDelay>:
    1f08:	cf 92       	push	r12
    1f0a:	df 92       	push	r13
    1f0c:	ef 92       	push	r14
    1f0e:	ff 92       	push	r15
    1f10:	6b 01       	movw	r12, r22
    1f12:	7c 01       	movw	r14, r24
    1f14:	67 2b       	or	r22, r23
    1f16:	68 2b       	or	r22, r24
    1f18:	69 2b       	or	r22, r25
    1f1a:	39 f0       	breq	.+14     	; 0x1f2a <vTaskDelay+0x22>
    1f1c:	74 dd       	rcall	.-1304   	; 0x1a06 <vTaskSuspendAll>
    1f1e:	40 e0       	ldi	r20, 0x00	; 0
    1f20:	c7 01       	movw	r24, r14
    1f22:	b6 01       	movw	r22, r12
    1f24:	4a dc       	rcall	.-1900   	; 0x17ba <prvAddCurrentTaskToDelayedList>
    1f26:	af de       	rcall	.-674    	; 0x1c86 <xTaskResumeAll>
    1f28:	01 c0       	rjmp	.+2      	; 0x1f2c <vTaskDelay+0x24>
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	81 11       	cpse	r24, r1
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <vTaskDelay+0x2c>
    1f30:	0e 94 c2 03 	call	0x784	; 0x784 <vPortYield>
    1f34:	ff 90       	pop	r15
    1f36:	ef 90       	pop	r14
    1f38:	df 90       	pop	r13
    1f3a:	cf 90       	pop	r12
    1f3c:	08 95       	ret

00001f3e <vTaskSwitchContext>:
    1f3e:	80 91 a4 10 	lds	r24, 0x10A4	; 0x8010a4 <uxSchedulerSuspended>
    1f42:	88 23       	and	r24, r24
    1f44:	21 f0       	breq	.+8      	; 0x1f4e <vTaskSwitchContext+0x10>
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	80 93 ad 10 	sts	0x10AD, r24	; 0x8010ad <xYieldPending>
    1f4c:	08 95       	ret
    1f4e:	10 92 ad 10 	sts	0x10AD, r1	; 0x8010ad <xYieldPending>
    1f52:	e0 91 63 11 	lds	r30, 0x1163	; 0x801163 <pxCurrentTCB>
    1f56:	f0 91 64 11 	lds	r31, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    1f5a:	20 81       	ld	r18, Z
    1f5c:	31 81       	ldd	r19, Z+1	; 0x01
    1f5e:	e0 91 63 11 	lds	r30, 0x1163	; 0x801163 <pxCurrentTCB>
    1f62:	f0 91 64 11 	lds	r31, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    1f66:	83 8d       	ldd	r24, Z+27	; 0x1b
    1f68:	94 8d       	ldd	r25, Z+28	; 0x1c
    1f6a:	82 17       	cp	r24, r18
    1f6c:	93 07       	cpc	r25, r19
    1f6e:	60 f0       	brcs	.+24     	; 0x1f88 <vTaskSwitchContext+0x4a>
    1f70:	60 91 63 11 	lds	r22, 0x1163	; 0x801163 <pxCurrentTCB>
    1f74:	70 91 64 11 	lds	r23, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    1f78:	63 5e       	subi	r22, 0xE3	; 227
    1f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7c:	80 91 63 11 	lds	r24, 0x1163	; 0x801163 <pxCurrentTCB>
    1f80:	90 91 64 11 	lds	r25, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    1f84:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <vApplicationStackOverflowHook>
    1f88:	80 91 b3 10 	lds	r24, 0x10B3	; 0x8010b3 <uxTopReadyPriority>
    1f8c:	01 c0       	rjmp	.+2      	; 0x1f90 <vTaskSwitchContext+0x52>
    1f8e:	81 50       	subi	r24, 0x01	; 1
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	9b e0       	ldi	r25, 0x0B	; 11
    1f96:	92 9f       	mul	r25, r18
    1f98:	f0 01       	movw	r30, r0
    1f9a:	93 9f       	mul	r25, r19
    1f9c:	f0 0d       	add	r31, r0
    1f9e:	11 24       	eor	r1, r1
    1fa0:	eb 50       	subi	r30, 0x0B	; 11
    1fa2:	ff 4e       	sbci	r31, 0xEF	; 239
    1fa4:	90 81       	ld	r25, Z
    1fa6:	99 23       	and	r25, r25
    1fa8:	91 f3       	breq	.-28     	; 0x1f8e <vTaskSwitchContext+0x50>
    1faa:	9b e0       	ldi	r25, 0x0B	; 11
    1fac:	92 9f       	mul	r25, r18
    1fae:	a0 01       	movw	r20, r0
    1fb0:	93 9f       	mul	r25, r19
    1fb2:	50 0d       	add	r21, r0
    1fb4:	11 24       	eor	r1, r1
    1fb6:	df 01       	movw	r26, r30
    1fb8:	01 80       	ldd	r0, Z+1	; 0x01
    1fba:	f2 81       	ldd	r31, Z+2	; 0x02
    1fbc:	e0 2d       	mov	r30, r0
    1fbe:	04 80       	ldd	r0, Z+4	; 0x04
    1fc0:	f5 81       	ldd	r31, Z+5	; 0x05
    1fc2:	e0 2d       	mov	r30, r0
    1fc4:	12 96       	adiw	r26, 0x02	; 2
    1fc6:	fc 93       	st	X, r31
    1fc8:	ee 93       	st	-X, r30
    1fca:	11 97       	sbiw	r26, 0x01	; 1
    1fcc:	48 50       	subi	r20, 0x08	; 8
    1fce:	5f 4e       	sbci	r21, 0xEF	; 239
    1fd0:	e4 17       	cp	r30, r20
    1fd2:	f5 07       	cpc	r31, r21
    1fd4:	29 f4       	brne	.+10     	; 0x1fe0 <vTaskSwitchContext+0xa2>
    1fd6:	44 81       	ldd	r20, Z+4	; 0x04
    1fd8:	55 81       	ldd	r21, Z+5	; 0x05
    1fda:	fd 01       	movw	r30, r26
    1fdc:	52 83       	std	Z+2, r21	; 0x02
    1fde:	41 83       	std	Z+1, r20	; 0x01
    1fe0:	9b e0       	ldi	r25, 0x0B	; 11
    1fe2:	92 9f       	mul	r25, r18
    1fe4:	f0 01       	movw	r30, r0
    1fe6:	93 9f       	mul	r25, r19
    1fe8:	f0 0d       	add	r31, r0
    1fea:	11 24       	eor	r1, r1
    1fec:	eb 50       	subi	r30, 0x0B	; 11
    1fee:	ff 4e       	sbci	r31, 0xEF	; 239
    1ff0:	01 80       	ldd	r0, Z+1	; 0x01
    1ff2:	f2 81       	ldd	r31, Z+2	; 0x02
    1ff4:	e0 2d       	mov	r30, r0
    1ff6:	20 85       	ldd	r18, Z+8	; 0x08
    1ff8:	31 85       	ldd	r19, Z+9	; 0x09
    1ffa:	30 93 64 11 	sts	0x1164, r19	; 0x801164 <pxCurrentTCB+0x1>
    1ffe:	20 93 63 11 	sts	0x1163, r18	; 0x801163 <pxCurrentTCB>
    2002:	80 93 b3 10 	sts	0x10B3, r24	; 0x8010b3 <uxTopReadyPriority>
    2006:	08 95       	ret

00002008 <vTaskPlaceOnEventList>:
    2008:	cf 92       	push	r12
    200a:	df 92       	push	r13
    200c:	ef 92       	push	r14
    200e:	ff 92       	push	r15
    2010:	6a 01       	movw	r12, r20
    2012:	7b 01       	movw	r14, r22
    2014:	60 91 63 11 	lds	r22, 0x1163	; 0x801163 <pxCurrentTCB>
    2018:	70 91 64 11 	lds	r23, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    201c:	62 5f       	subi	r22, 0xF2	; 242
    201e:	7f 4f       	sbci	r23, 0xFF	; 255
    2020:	0e 94 09 03 	call	0x612	; 0x612 <vListInsert>
    2024:	41 e0       	ldi	r20, 0x01	; 1
    2026:	c7 01       	movw	r24, r14
    2028:	b6 01       	movw	r22, r12
    202a:	c7 db       	rcall	.-2162   	; 0x17ba <prvAddCurrentTaskToDelayedList>
    202c:	ff 90       	pop	r15
    202e:	ef 90       	pop	r14
    2030:	df 90       	pop	r13
    2032:	cf 90       	pop	r12
    2034:	08 95       	ret

00002036 <vTaskPlaceOnEventListRestricted>:
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
    203a:	fc 01       	movw	r30, r24
    203c:	cb 01       	movw	r24, r22
    203e:	ba 01       	movw	r22, r20
    2040:	a1 81       	ldd	r26, Z+1	; 0x01
    2042:	b2 81       	ldd	r27, Z+2	; 0x02
    2044:	c0 91 63 11 	lds	r28, 0x1163	; 0x801163 <pxCurrentTCB>
    2048:	d0 91 64 11 	lds	r29, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    204c:	bb 8b       	std	Y+19, r27	; 0x13
    204e:	aa 8b       	std	Y+18, r26	; 0x12
    2050:	c0 91 63 11 	lds	r28, 0x1163	; 0x801163 <pxCurrentTCB>
    2054:	d0 91 64 11 	lds	r29, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    2058:	16 96       	adiw	r26, 0x06	; 6
    205a:	4d 91       	ld	r20, X+
    205c:	5c 91       	ld	r21, X
    205e:	17 97       	sbiw	r26, 0x07	; 7
    2060:	5d 8b       	std	Y+21, r21	; 0x15
    2062:	4c 8b       	std	Y+20, r20	; 0x14
    2064:	16 96       	adiw	r26, 0x06	; 6
    2066:	cd 91       	ld	r28, X+
    2068:	dc 91       	ld	r29, X
    206a:	17 97       	sbiw	r26, 0x07	; 7
    206c:	40 91 63 11 	lds	r20, 0x1163	; 0x801163 <pxCurrentTCB>
    2070:	50 91 64 11 	lds	r21, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    2074:	42 5f       	subi	r20, 0xF2	; 242
    2076:	5f 4f       	sbci	r21, 0xFF	; 255
    2078:	5d 83       	std	Y+5, r21	; 0x05
    207a:	4c 83       	std	Y+4, r20	; 0x04
    207c:	40 91 63 11 	lds	r20, 0x1163	; 0x801163 <pxCurrentTCB>
    2080:	50 91 64 11 	lds	r21, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    2084:	42 5f       	subi	r20, 0xF2	; 242
    2086:	5f 4f       	sbci	r21, 0xFF	; 255
    2088:	17 96       	adiw	r26, 0x07	; 7
    208a:	5c 93       	st	X, r21
    208c:	4e 93       	st	-X, r20
    208e:	16 97       	sbiw	r26, 0x06	; 6
    2090:	a0 91 63 11 	lds	r26, 0x1163	; 0x801163 <pxCurrentTCB>
    2094:	b0 91 64 11 	lds	r27, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    2098:	59 96       	adiw	r26, 0x19	; 25
    209a:	fc 93       	st	X, r31
    209c:	ee 93       	st	-X, r30
    209e:	58 97       	sbiw	r26, 0x18	; 24
    20a0:	30 81       	ld	r19, Z
    20a2:	3f 5f       	subi	r19, 0xFF	; 255
    20a4:	30 83       	st	Z, r19
    20a6:	22 23       	and	r18, r18
    20a8:	19 f0       	breq	.+6      	; 0x20b0 <vTaskPlaceOnEventListRestricted+0x7a>
    20aa:	6f ef       	ldi	r22, 0xFF	; 255
    20ac:	7f ef       	ldi	r23, 0xFF	; 255
    20ae:	cb 01       	movw	r24, r22
    20b0:	42 2f       	mov	r20, r18
    20b2:	83 db       	rcall	.-2298   	; 0x17ba <prvAddCurrentTaskToDelayedList>
    20b4:	df 91       	pop	r29
    20b6:	cf 91       	pop	r28
    20b8:	08 95       	ret

000020ba <xTaskRemoveFromEventList>:
    20ba:	cf 93       	push	r28
    20bc:	df 93       	push	r29
    20be:	dc 01       	movw	r26, r24
    20c0:	17 96       	adiw	r26, 0x07	; 7
    20c2:	ed 91       	ld	r30, X+
    20c4:	fc 91       	ld	r31, X
    20c6:	18 97       	sbiw	r26, 0x08	; 8
    20c8:	00 84       	ldd	r0, Z+8	; 0x08
    20ca:	f1 85       	ldd	r31, Z+9	; 0x09
    20cc:	e0 2d       	mov	r30, r0
    20ce:	a0 8d       	ldd	r26, Z+24	; 0x18
    20d0:	b1 8d       	ldd	r27, Z+25	; 0x19
    20d2:	c2 89       	ldd	r28, Z+18	; 0x12
    20d4:	d3 89       	ldd	r29, Z+19	; 0x13
    20d6:	84 89       	ldd	r24, Z+20	; 0x14
    20d8:	95 89       	ldd	r25, Z+21	; 0x15
    20da:	9f 83       	std	Y+7, r25	; 0x07
    20dc:	8e 83       	std	Y+6, r24	; 0x06
    20de:	c4 89       	ldd	r28, Z+20	; 0x14
    20e0:	d5 89       	ldd	r29, Z+21	; 0x15
    20e2:	82 89       	ldd	r24, Z+18	; 0x12
    20e4:	93 89       	ldd	r25, Z+19	; 0x13
    20e6:	9d 83       	std	Y+5, r25	; 0x05
    20e8:	8c 83       	std	Y+4, r24	; 0x04
    20ea:	11 96       	adiw	r26, 0x01	; 1
    20ec:	8d 91       	ld	r24, X+
    20ee:	9c 91       	ld	r25, X
    20f0:	12 97       	sbiw	r26, 0x02	; 2
    20f2:	9f 01       	movw	r18, r30
    20f4:	22 5f       	subi	r18, 0xF2	; 242
    20f6:	3f 4f       	sbci	r19, 0xFF	; 255
    20f8:	82 17       	cp	r24, r18
    20fa:	93 07       	cpc	r25, r19
    20fc:	31 f4       	brne	.+12     	; 0x210a <xTaskRemoveFromEventList+0x50>
    20fe:	84 89       	ldd	r24, Z+20	; 0x14
    2100:	95 89       	ldd	r25, Z+21	; 0x15
    2102:	12 96       	adiw	r26, 0x02	; 2
    2104:	9c 93       	st	X, r25
    2106:	8e 93       	st	-X, r24
    2108:	11 97       	sbiw	r26, 0x01	; 1
    210a:	11 8e       	std	Z+25, r1	; 0x19
    210c:	10 8e       	std	Z+24, r1	; 0x18
    210e:	8c 91       	ld	r24, X
    2110:	81 50       	subi	r24, 0x01	; 1
    2112:	8c 93       	st	X, r24
    2114:	80 91 a4 10 	lds	r24, 0x10A4	; 0x8010a4 <uxSchedulerSuspended>
    2118:	81 11       	cpse	r24, r1
    211a:	52 c0       	rjmp	.+164    	; 0x21c0 <xTaskRemoveFromEventList+0x106>
    211c:	a4 85       	ldd	r26, Z+12	; 0x0c
    211e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2120:	c6 81       	ldd	r28, Z+6	; 0x06
    2122:	d7 81       	ldd	r29, Z+7	; 0x07
    2124:	80 85       	ldd	r24, Z+8	; 0x08
    2126:	91 85       	ldd	r25, Z+9	; 0x09
    2128:	9f 83       	std	Y+7, r25	; 0x07
    212a:	8e 83       	std	Y+6, r24	; 0x06
    212c:	c0 85       	ldd	r28, Z+8	; 0x08
    212e:	d1 85       	ldd	r29, Z+9	; 0x09
    2130:	86 81       	ldd	r24, Z+6	; 0x06
    2132:	97 81       	ldd	r25, Z+7	; 0x07
    2134:	9d 83       	std	Y+5, r25	; 0x05
    2136:	8c 83       	std	Y+4, r24	; 0x04
    2138:	11 96       	adiw	r26, 0x01	; 1
    213a:	8d 91       	ld	r24, X+
    213c:	9c 91       	ld	r25, X
    213e:	12 97       	sbiw	r26, 0x02	; 2
    2140:	9f 01       	movw	r18, r30
    2142:	2e 5f       	subi	r18, 0xFE	; 254
    2144:	3f 4f       	sbci	r19, 0xFF	; 255
    2146:	82 17       	cp	r24, r18
    2148:	93 07       	cpc	r25, r19
    214a:	31 f4       	brne	.+12     	; 0x2158 <xTaskRemoveFromEventList+0x9e>
    214c:	80 85       	ldd	r24, Z+8	; 0x08
    214e:	91 85       	ldd	r25, Z+9	; 0x09
    2150:	12 96       	adiw	r26, 0x02	; 2
    2152:	9c 93       	st	X, r25
    2154:	8e 93       	st	-X, r24
    2156:	11 97       	sbiw	r26, 0x01	; 1
    2158:	15 86       	std	Z+13, r1	; 0x0d
    215a:	14 86       	std	Z+12, r1	; 0x0c
    215c:	8c 91       	ld	r24, X
    215e:	81 50       	subi	r24, 0x01	; 1
    2160:	8c 93       	st	X, r24
    2162:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2164:	80 91 b3 10 	lds	r24, 0x10B3	; 0x8010b3 <uxTopReadyPriority>
    2168:	8a 17       	cp	r24, r26
    216a:	10 f4       	brcc	.+4      	; 0x2170 <xTaskRemoveFromEventList+0xb6>
    216c:	a0 93 b3 10 	sts	0x10B3, r26	; 0x8010b3 <uxTopReadyPriority>
    2170:	8b e0       	ldi	r24, 0x0B	; 11
    2172:	8a 9f       	mul	r24, r26
    2174:	d0 01       	movw	r26, r0
    2176:	11 24       	eor	r1, r1
    2178:	ab 50       	subi	r26, 0x0B	; 11
    217a:	bf 4e       	sbci	r27, 0xEF	; 239
    217c:	11 96       	adiw	r26, 0x01	; 1
    217e:	0d 90       	ld	r0, X+
    2180:	bc 91       	ld	r27, X
    2182:	a0 2d       	mov	r26, r0
    2184:	b7 83       	std	Z+7, r27	; 0x07
    2186:	a6 83       	std	Z+6, r26	; 0x06
    2188:	16 96       	adiw	r26, 0x06	; 6
    218a:	4d 91       	ld	r20, X+
    218c:	5c 91       	ld	r21, X
    218e:	17 97       	sbiw	r26, 0x07	; 7
    2190:	51 87       	std	Z+9, r21	; 0x09
    2192:	40 87       	std	Z+8, r20	; 0x08
    2194:	16 96       	adiw	r26, 0x06	; 6
    2196:	cd 91       	ld	r28, X+
    2198:	dc 91       	ld	r29, X
    219a:	17 97       	sbiw	r26, 0x07	; 7
    219c:	3d 83       	std	Y+5, r19	; 0x05
    219e:	2c 83       	std	Y+4, r18	; 0x04
    21a0:	17 96       	adiw	r26, 0x07	; 7
    21a2:	3c 93       	st	X, r19
    21a4:	2e 93       	st	-X, r18
    21a6:	16 97       	sbiw	r26, 0x06	; 6
    21a8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    21aa:	8a 9f       	mul	r24, r26
    21ac:	d0 01       	movw	r26, r0
    21ae:	11 24       	eor	r1, r1
    21b0:	ab 50       	subi	r26, 0x0B	; 11
    21b2:	bf 4e       	sbci	r27, 0xEF	; 239
    21b4:	b5 87       	std	Z+13, r27	; 0x0d
    21b6:	a4 87       	std	Z+12, r26	; 0x0c
    21b8:	8c 91       	ld	r24, X
    21ba:	8f 5f       	subi	r24, 0xFF	; 255
    21bc:	8c 93       	st	X, r24
    21be:	1c c0       	rjmp	.+56     	; 0x21f8 <xTaskRemoveFromEventList+0x13e>
    21c0:	40 ed       	ldi	r20, 0xD0	; 208
    21c2:	50 e1       	ldi	r21, 0x10	; 16
    21c4:	da 01       	movw	r26, r20
    21c6:	11 96       	adiw	r26, 0x01	; 1
    21c8:	cd 91       	ld	r28, X+
    21ca:	dc 91       	ld	r29, X
    21cc:	12 97       	sbiw	r26, 0x02	; 2
    21ce:	d3 8b       	std	Z+19, r29	; 0x13
    21d0:	c2 8b       	std	Z+18, r28	; 0x12
    21d2:	8e 81       	ldd	r24, Y+6	; 0x06
    21d4:	9f 81       	ldd	r25, Y+7	; 0x07
    21d6:	95 8b       	std	Z+21, r25	; 0x15
    21d8:	84 8b       	std	Z+20, r24	; 0x14
    21da:	8e 81       	ldd	r24, Y+6	; 0x06
    21dc:	9f 81       	ldd	r25, Y+7	; 0x07
    21de:	dc 01       	movw	r26, r24
    21e0:	15 96       	adiw	r26, 0x05	; 5
    21e2:	3c 93       	st	X, r19
    21e4:	2e 93       	st	-X, r18
    21e6:	14 97       	sbiw	r26, 0x04	; 4
    21e8:	3f 83       	std	Y+7, r19	; 0x07
    21ea:	2e 83       	std	Y+6, r18	; 0x06
    21ec:	51 8f       	std	Z+25, r21	; 0x19
    21ee:	40 8f       	std	Z+24, r20	; 0x18
    21f0:	da 01       	movw	r26, r20
    21f2:	8c 91       	ld	r24, X
    21f4:	8f 5f       	subi	r24, 0xFF	; 255
    21f6:	8c 93       	st	X, r24
    21f8:	92 8d       	ldd	r25, Z+26	; 0x1a
    21fa:	e0 91 63 11 	lds	r30, 0x1163	; 0x801163 <pxCurrentTCB>
    21fe:	f0 91 64 11 	lds	r31, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    2202:	82 8d       	ldd	r24, Z+26	; 0x1a
    2204:	89 17       	cp	r24, r25
    2206:	20 f4       	brcc	.+8      	; 0x2210 <__stack+0x11>
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	80 93 ad 10 	sts	0x10AD, r24	; 0x8010ad <xYieldPending>
    220e:	01 c0       	rjmp	.+2      	; 0x2212 <__stack+0x13>
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	df 91       	pop	r29
    2214:	cf 91       	pop	r28
    2216:	08 95       	ret

00002218 <vTaskSetTimeOutState>:
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	f8 94       	cli
    221c:	0f 92       	push	r0
    221e:	20 91 ac 10 	lds	r18, 0x10AC	; 0x8010ac <xNumOfOverflows>
    2222:	fc 01       	movw	r30, r24
    2224:	20 83       	st	Z, r18
    2226:	40 91 b4 10 	lds	r20, 0x10B4	; 0x8010b4 <xTickCount>
    222a:	50 91 b5 10 	lds	r21, 0x10B5	; 0x8010b5 <xTickCount+0x1>
    222e:	60 91 b6 10 	lds	r22, 0x10B6	; 0x8010b6 <xTickCount+0x2>
    2232:	70 91 b7 10 	lds	r23, 0x10B7	; 0x8010b7 <xTickCount+0x3>
    2236:	41 83       	std	Z+1, r20	; 0x01
    2238:	52 83       	std	Z+2, r21	; 0x02
    223a:	63 83       	std	Z+3, r22	; 0x03
    223c:	74 83       	std	Z+4, r23	; 0x04
    223e:	0f 90       	pop	r0
    2240:	0f be       	out	0x3f, r0	; 63
    2242:	08 95       	ret

00002244 <vTaskInternalSetTimeOutState>:
    2244:	20 91 ac 10 	lds	r18, 0x10AC	; 0x8010ac <xNumOfOverflows>
    2248:	fc 01       	movw	r30, r24
    224a:	20 83       	st	Z, r18
    224c:	40 91 b4 10 	lds	r20, 0x10B4	; 0x8010b4 <xTickCount>
    2250:	50 91 b5 10 	lds	r21, 0x10B5	; 0x8010b5 <xTickCount+0x1>
    2254:	60 91 b6 10 	lds	r22, 0x10B6	; 0x8010b6 <xTickCount+0x2>
    2258:	70 91 b7 10 	lds	r23, 0x10B7	; 0x8010b7 <xTickCount+0x3>
    225c:	41 83       	std	Z+1, r20	; 0x01
    225e:	52 83       	std	Z+2, r21	; 0x02
    2260:	63 83       	std	Z+3, r22	; 0x03
    2262:	74 83       	std	Z+4, r23	; 0x04
    2264:	08 95       	ret

00002266 <xTaskCheckForTimeOut>:
    2266:	8f 92       	push	r8
    2268:	9f 92       	push	r9
    226a:	af 92       	push	r10
    226c:	bf 92       	push	r11
    226e:	cf 92       	push	r12
    2270:	df 92       	push	r13
    2272:	ef 92       	push	r14
    2274:	ff 92       	push	r15
    2276:	0f 93       	push	r16
    2278:	1f 93       	push	r17
    227a:	cf 93       	push	r28
    227c:	df 93       	push	r29
    227e:	fb 01       	movw	r30, r22
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	f8 94       	cli
    2284:	0f 92       	push	r0
    2286:	c0 90 b4 10 	lds	r12, 0x10B4	; 0x8010b4 <xTickCount>
    228a:	d0 90 b5 10 	lds	r13, 0x10B5	; 0x8010b5 <xTickCount+0x1>
    228e:	e0 90 b6 10 	lds	r14, 0x10B6	; 0x8010b6 <xTickCount+0x2>
    2292:	f0 90 b7 10 	lds	r15, 0x10B7	; 0x8010b7 <xTickCount+0x3>
    2296:	dc 01       	movw	r26, r24
    2298:	11 96       	adiw	r26, 0x01	; 1
    229a:	0d 91       	ld	r16, X+
    229c:	1d 91       	ld	r17, X+
    229e:	2d 91       	ld	r18, X+
    22a0:	3c 91       	ld	r19, X
    22a2:	14 97       	sbiw	r26, 0x04	; 4
    22a4:	46 01       	movw	r8, r12
    22a6:	57 01       	movw	r10, r14
    22a8:	80 1a       	sub	r8, r16
    22aa:	91 0a       	sbc	r9, r17
    22ac:	a2 0a       	sbc	r10, r18
    22ae:	b3 0a       	sbc	r11, r19
    22b0:	40 81       	ld	r20, Z
    22b2:	51 81       	ldd	r21, Z+1	; 0x01
    22b4:	62 81       	ldd	r22, Z+2	; 0x02
    22b6:	73 81       	ldd	r23, Z+3	; 0x03
    22b8:	4f 3f       	cpi	r20, 0xFF	; 255
    22ba:	bf ef       	ldi	r27, 0xFF	; 255
    22bc:	5b 07       	cpc	r21, r27
    22be:	6b 07       	cpc	r22, r27
    22c0:	7b 07       	cpc	r23, r27
    22c2:	39 f1       	breq	.+78     	; 0x2312 <xTaskCheckForTimeOut+0xac>
    22c4:	ec 01       	movw	r28, r24
    22c6:	b8 81       	ld	r27, Y
    22c8:	a0 91 ac 10 	lds	r26, 0x10AC	; 0x8010ac <xNumOfOverflows>
    22cc:	ba 17       	cp	r27, r26
    22ce:	59 f0       	breq	.+22     	; 0x22e6 <xTaskCheckForTimeOut+0x80>
    22d0:	c0 16       	cp	r12, r16
    22d2:	d1 06       	cpc	r13, r17
    22d4:	e2 06       	cpc	r14, r18
    22d6:	f3 06       	cpc	r15, r19
    22d8:	30 f0       	brcs	.+12     	; 0x22e6 <xTaskCheckForTimeOut+0x80>
    22da:	10 82       	st	Z, r1
    22dc:	11 82       	std	Z+1, r1	; 0x01
    22de:	12 82       	std	Z+2, r1	; 0x02
    22e0:	13 82       	std	Z+3, r1	; 0x03
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	17 c0       	rjmp	.+46     	; 0x2314 <xTaskCheckForTimeOut+0xae>
    22e6:	84 16       	cp	r8, r20
    22e8:	95 06       	cpc	r9, r21
    22ea:	a6 06       	cpc	r10, r22
    22ec:	b7 06       	cpc	r11, r23
    22ee:	58 f4       	brcc	.+22     	; 0x2306 <xTaskCheckForTimeOut+0xa0>
    22f0:	48 19       	sub	r20, r8
    22f2:	59 09       	sbc	r21, r9
    22f4:	6a 09       	sbc	r22, r10
    22f6:	7b 09       	sbc	r23, r11
    22f8:	40 83       	st	Z, r20
    22fa:	51 83       	std	Z+1, r21	; 0x01
    22fc:	62 83       	std	Z+2, r22	; 0x02
    22fe:	73 83       	std	Z+3, r23	; 0x03
    2300:	a1 df       	rcall	.-190    	; 0x2244 <vTaskInternalSetTimeOutState>
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	07 c0       	rjmp	.+14     	; 0x2314 <xTaskCheckForTimeOut+0xae>
    2306:	10 82       	st	Z, r1
    2308:	11 82       	std	Z+1, r1	; 0x01
    230a:	12 82       	std	Z+2, r1	; 0x02
    230c:	13 82       	std	Z+3, r1	; 0x03
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	01 c0       	rjmp	.+2      	; 0x2314 <xTaskCheckForTimeOut+0xae>
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	0f 90       	pop	r0
    2316:	0f be       	out	0x3f, r0	; 63
    2318:	df 91       	pop	r29
    231a:	cf 91       	pop	r28
    231c:	1f 91       	pop	r17
    231e:	0f 91       	pop	r16
    2320:	ff 90       	pop	r15
    2322:	ef 90       	pop	r14
    2324:	df 90       	pop	r13
    2326:	cf 90       	pop	r12
    2328:	bf 90       	pop	r11
    232a:	af 90       	pop	r10
    232c:	9f 90       	pop	r9
    232e:	8f 90       	pop	r8
    2330:	08 95       	ret

00002332 <vTaskMissedYield>:
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	80 93 ad 10 	sts	0x10AD, r24	; 0x8010ad <xYieldPending>
    2338:	08 95       	ret

0000233a <xTaskGetCurrentTaskHandle>:
    233a:	80 91 63 11 	lds	r24, 0x1163	; 0x801163 <pxCurrentTCB>
    233e:	90 91 64 11 	lds	r25, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    2342:	08 95       	ret

00002344 <xTaskGetSchedulerState>:
    2344:	80 91 b2 10 	lds	r24, 0x10B2	; 0x8010b2 <xSchedulerRunning>
    2348:	88 23       	and	r24, r24
    234a:	31 f0       	breq	.+12     	; 0x2358 <xTaskGetSchedulerState+0x14>
    234c:	80 91 a4 10 	lds	r24, 0x10A4	; 0x8010a4 <uxSchedulerSuspended>
    2350:	81 11       	cpse	r24, r1
    2352:	04 c0       	rjmp	.+8      	; 0x235c <xTaskGetSchedulerState+0x18>
    2354:	82 e0       	ldi	r24, 0x02	; 2
    2356:	08 95       	ret
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	08 95       	ret
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	08 95       	ret

00002360 <xTaskPriorityDisinherit>:
    2360:	0f 93       	push	r16
    2362:	1f 93       	push	r17
    2364:	cf 93       	push	r28
    2366:	df 93       	push	r29
    2368:	fc 01       	movw	r30, r24
    236a:	89 2b       	or	r24, r25
    236c:	09 f4       	brne	.+2      	; 0x2370 <xTaskPriorityDisinherit+0x10>
    236e:	49 c0       	rjmp	.+146    	; 0x2402 <xTaskPriorityDisinherit+0xa2>
    2370:	86 a5       	ldd	r24, Z+46	; 0x2e
    2372:	81 50       	subi	r24, 0x01	; 1
    2374:	86 a7       	std	Z+46, r24	; 0x2e
    2376:	22 8d       	ldd	r18, Z+26	; 0x1a
    2378:	95 a5       	ldd	r25, Z+45	; 0x2d
    237a:	29 17       	cp	r18, r25
    237c:	09 f4       	brne	.+2      	; 0x2380 <xTaskPriorityDisinherit+0x20>
    237e:	43 c0       	rjmp	.+134    	; 0x2406 <xTaskPriorityDisinherit+0xa6>
    2380:	81 11       	cpse	r24, r1
    2382:	43 c0       	rjmp	.+134    	; 0x240a <xTaskPriorityDisinherit+0xaa>
    2384:	ef 01       	movw	r28, r30
    2386:	8f 01       	movw	r16, r30
    2388:	0e 5f       	subi	r16, 0xFE	; 254
    238a:	1f 4f       	sbci	r17, 0xFF	; 255
    238c:	c8 01       	movw	r24, r16
    238e:	0e 94 46 03 	call	0x68c	; 0x68c <uxListRemove>
    2392:	ed a5       	ldd	r30, Y+45	; 0x2d
    2394:	ea 8f       	std	Y+26, r30	; 0x1a
    2396:	8a e0       	ldi	r24, 0x0A	; 10
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	a0 e0       	ldi	r26, 0x00	; 0
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	8e 1b       	sub	r24, r30
    23a0:	91 09       	sbc	r25, r1
    23a2:	a1 09       	sbc	r26, r1
    23a4:	b1 09       	sbc	r27, r1
    23a6:	8e 87       	std	Y+14, r24	; 0x0e
    23a8:	9f 87       	std	Y+15, r25	; 0x0f
    23aa:	a8 8b       	std	Y+16, r26	; 0x10
    23ac:	b9 8b       	std	Y+17, r27	; 0x11
    23ae:	80 91 b3 10 	lds	r24, 0x10B3	; 0x8010b3 <uxTopReadyPriority>
    23b2:	8e 17       	cp	r24, r30
    23b4:	10 f4       	brcc	.+4      	; 0x23ba <xTaskPriorityDisinherit+0x5a>
    23b6:	e0 93 b3 10 	sts	0x10B3, r30	; 0x8010b3 <uxTopReadyPriority>
    23ba:	8b e0       	ldi	r24, 0x0B	; 11
    23bc:	8e 9f       	mul	r24, r30
    23be:	f0 01       	movw	r30, r0
    23c0:	11 24       	eor	r1, r1
    23c2:	eb 50       	subi	r30, 0x0B	; 11
    23c4:	ff 4e       	sbci	r31, 0xEF	; 239
    23c6:	01 80       	ldd	r0, Z+1	; 0x01
    23c8:	f2 81       	ldd	r31, Z+2	; 0x02
    23ca:	e0 2d       	mov	r30, r0
    23cc:	ff 83       	std	Y+7, r31	; 0x07
    23ce:	ee 83       	std	Y+6, r30	; 0x06
    23d0:	26 81       	ldd	r18, Z+6	; 0x06
    23d2:	37 81       	ldd	r19, Z+7	; 0x07
    23d4:	39 87       	std	Y+9, r19	; 0x09
    23d6:	28 87       	std	Y+8, r18	; 0x08
    23d8:	a6 81       	ldd	r26, Z+6	; 0x06
    23da:	b7 81       	ldd	r27, Z+7	; 0x07
    23dc:	15 96       	adiw	r26, 0x05	; 5
    23de:	1c 93       	st	X, r17
    23e0:	0e 93       	st	-X, r16
    23e2:	14 97       	sbiw	r26, 0x04	; 4
    23e4:	17 83       	std	Z+7, r17	; 0x07
    23e6:	06 83       	std	Z+6, r16	; 0x06
    23e8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    23ea:	8e 9f       	mul	r24, r30
    23ec:	f0 01       	movw	r30, r0
    23ee:	11 24       	eor	r1, r1
    23f0:	eb 50       	subi	r30, 0x0B	; 11
    23f2:	ff 4e       	sbci	r31, 0xEF	; 239
    23f4:	fd 87       	std	Y+13, r31	; 0x0d
    23f6:	ec 87       	std	Y+12, r30	; 0x0c
    23f8:	80 81       	ld	r24, Z
    23fa:	8f 5f       	subi	r24, 0xFF	; 255
    23fc:	80 83       	st	Z, r24
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	05 c0       	rjmp	.+10     	; 0x240c <xTaskPriorityDisinherit+0xac>
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	03 c0       	rjmp	.+6      	; 0x240c <xTaskPriorityDisinherit+0xac>
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	01 c0       	rjmp	.+2      	; 0x240c <xTaskPriorityDisinherit+0xac>
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	df 91       	pop	r29
    240e:	cf 91       	pop	r28
    2410:	1f 91       	pop	r17
    2412:	0f 91       	pop	r16
    2414:	08 95       	ret

00002416 <xTaskGenericNotifyWait>:
    2416:	4f 92       	push	r4
    2418:	5f 92       	push	r5
    241a:	6f 92       	push	r6
    241c:	7f 92       	push	r7
    241e:	af 92       	push	r10
    2420:	bf 92       	push	r11
    2422:	cf 92       	push	r12
    2424:	df 92       	push	r13
    2426:	ef 92       	push	r14
    2428:	ff 92       	push	r15
    242a:	0f 93       	push	r16
    242c:	1f 93       	push	r17
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	28 01       	movw	r4, r16
    2434:	39 01       	movw	r6, r18
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	f8 94       	cli
    243a:	0f 92       	push	r0
    243c:	e0 91 63 11 	lds	r30, 0x1163	; 0x801163 <pxCurrentTCB>
    2440:	f0 91 64 11 	lds	r31, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    2444:	c8 2f       	mov	r28, r24
    2446:	d0 e0       	ldi	r29, 0x00	; 0
    2448:	ec 0f       	add	r30, r28
    244a:	fd 1f       	adc	r31, r29
    244c:	83 a9       	ldd	r24, Z+51	; 0x33
    244e:	82 30       	cpi	r24, 0x02	; 2
    2450:	71 f1       	breq	.+92     	; 0x24ae <xTaskGenericNotifyWait+0x98>
    2452:	e0 91 63 11 	lds	r30, 0x1163	; 0x801163 <pxCurrentTCB>
    2456:	f0 91 64 11 	lds	r31, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    245a:	ce 01       	movw	r24, r28
    245c:	88 0f       	add	r24, r24
    245e:	99 1f       	adc	r25, r25
    2460:	88 0f       	add	r24, r24
    2462:	99 1f       	adc	r25, r25
    2464:	e8 0f       	add	r30, r24
    2466:	f9 1f       	adc	r31, r25
    2468:	87 a5       	ldd	r24, Z+47	; 0x2f
    246a:	90 a9       	ldd	r25, Z+48	; 0x30
    246c:	a1 a9       	ldd	r26, Z+49	; 0x31
    246e:	b2 a9       	ldd	r27, Z+50	; 0x32
    2470:	40 95       	com	r20
    2472:	50 95       	com	r21
    2474:	60 95       	com	r22
    2476:	70 95       	com	r23
    2478:	48 23       	and	r20, r24
    247a:	59 23       	and	r21, r25
    247c:	6a 23       	and	r22, r26
    247e:	7b 23       	and	r23, r27
    2480:	47 a7       	std	Z+47, r20	; 0x2f
    2482:	50 ab       	std	Z+48, r21	; 0x30
    2484:	61 ab       	std	Z+49, r22	; 0x31
    2486:	72 ab       	std	Z+50, r23	; 0x32
    2488:	e0 91 63 11 	lds	r30, 0x1163	; 0x801163 <pxCurrentTCB>
    248c:	f0 91 64 11 	lds	r31, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    2490:	ec 0f       	add	r30, r28
    2492:	fd 1f       	adc	r31, r29
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	83 ab       	std	Z+51, r24	; 0x33
    2498:	a1 14       	cp	r10, r1
    249a:	b1 04       	cpc	r11, r1
    249c:	c1 04       	cpc	r12, r1
    249e:	d1 04       	cpc	r13, r1
    24a0:	31 f0       	breq	.+12     	; 0x24ae <xTaskGenericNotifyWait+0x98>
    24a2:	41 e0       	ldi	r20, 0x01	; 1
    24a4:	c6 01       	movw	r24, r12
    24a6:	b5 01       	movw	r22, r10
    24a8:	88 d9       	rcall	.-3312   	; 0x17ba <prvAddCurrentTaskToDelayedList>
    24aa:	0e 94 c2 03 	call	0x784	; 0x784 <vPortYield>
    24ae:	0f 90       	pop	r0
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	f8 94       	cli
    24b6:	0f 92       	push	r0
    24b8:	e1 14       	cp	r14, r1
    24ba:	f1 04       	cpc	r15, r1
    24bc:	a1 f0       	breq	.+40     	; 0x24e6 <xTaskGenericNotifyWait+0xd0>
    24be:	e0 91 63 11 	lds	r30, 0x1163	; 0x801163 <pxCurrentTCB>
    24c2:	f0 91 64 11 	lds	r31, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    24c6:	ce 01       	movw	r24, r28
    24c8:	88 0f       	add	r24, r24
    24ca:	99 1f       	adc	r25, r25
    24cc:	88 0f       	add	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	e8 0f       	add	r30, r24
    24d2:	f9 1f       	adc	r31, r25
    24d4:	87 a5       	ldd	r24, Z+47	; 0x2f
    24d6:	90 a9       	ldd	r25, Z+48	; 0x30
    24d8:	a1 a9       	ldd	r26, Z+49	; 0x31
    24da:	b2 a9       	ldd	r27, Z+50	; 0x32
    24dc:	f7 01       	movw	r30, r14
    24de:	80 83       	st	Z, r24
    24e0:	91 83       	std	Z+1, r25	; 0x01
    24e2:	a2 83       	std	Z+2, r26	; 0x02
    24e4:	b3 83       	std	Z+3, r27	; 0x03
    24e6:	e0 91 63 11 	lds	r30, 0x1163	; 0x801163 <pxCurrentTCB>
    24ea:	f0 91 64 11 	lds	r31, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    24ee:	ec 0f       	add	r30, r28
    24f0:	fd 1f       	adc	r31, r29
    24f2:	83 a9       	ldd	r24, Z+51	; 0x33
    24f4:	82 30       	cpi	r24, 0x02	; 2
    24f6:	e9 f4       	brne	.+58     	; 0x2532 <xTaskGenericNotifyWait+0x11c>
    24f8:	e0 91 63 11 	lds	r30, 0x1163	; 0x801163 <pxCurrentTCB>
    24fc:	f0 91 64 11 	lds	r31, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    2500:	ce 01       	movw	r24, r28
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	88 0f       	add	r24, r24
    2508:	99 1f       	adc	r25, r25
    250a:	e8 0f       	add	r30, r24
    250c:	f9 1f       	adc	r31, r25
    250e:	87 a5       	ldd	r24, Z+47	; 0x2f
    2510:	90 a9       	ldd	r25, Z+48	; 0x30
    2512:	a1 a9       	ldd	r26, Z+49	; 0x31
    2514:	b2 a9       	ldd	r27, Z+50	; 0x32
    2516:	40 94       	com	r4
    2518:	50 94       	com	r5
    251a:	60 94       	com	r6
    251c:	70 94       	com	r7
    251e:	48 22       	and	r4, r24
    2520:	59 22       	and	r5, r25
    2522:	6a 22       	and	r6, r26
    2524:	7b 22       	and	r7, r27
    2526:	47 a6       	std	Z+47, r4	; 0x2f
    2528:	50 aa       	std	Z+48, r5	; 0x30
    252a:	61 aa       	std	Z+49, r6	; 0x31
    252c:	72 aa       	std	Z+50, r7	; 0x32
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	01 c0       	rjmp	.+2      	; 0x2534 <xTaskGenericNotifyWait+0x11e>
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	20 91 63 11 	lds	r18, 0x1163	; 0x801163 <pxCurrentTCB>
    2538:	30 91 64 11 	lds	r19, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    253c:	c2 0f       	add	r28, r18
    253e:	d3 1f       	adc	r29, r19
    2540:	1b aa       	std	Y+51, r1	; 0x33
    2542:	0f 90       	pop	r0
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	df 91       	pop	r29
    2548:	cf 91       	pop	r28
    254a:	1f 91       	pop	r17
    254c:	0f 91       	pop	r16
    254e:	ff 90       	pop	r15
    2550:	ef 90       	pop	r14
    2552:	df 90       	pop	r13
    2554:	cf 90       	pop	r12
    2556:	bf 90       	pop	r11
    2558:	af 90       	pop	r10
    255a:	7f 90       	pop	r7
    255c:	6f 90       	pop	r6
    255e:	5f 90       	pop	r5
    2560:	4f 90       	pop	r4
    2562:	08 95       	ret

00002564 <xTaskGenericNotify>:
    2564:	8f 92       	push	r8
    2566:	9f 92       	push	r9
    2568:	af 92       	push	r10
    256a:	bf 92       	push	r11
    256c:	ef 92       	push	r14
    256e:	ff 92       	push	r15
    2570:	0f 93       	push	r16
    2572:	cf 93       	push	r28
    2574:	df 93       	push	r29
    2576:	dc 01       	movw	r26, r24
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	0f 92       	push	r0
    257e:	e1 14       	cp	r14, r1
    2580:	f1 04       	cpc	r15, r1
    2582:	89 f0       	breq	.+34     	; 0x25a6 <xTaskGenericNotify+0x42>
    2584:	e6 2f       	mov	r30, r22
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	ee 0f       	add	r30, r30
    258a:	ff 1f       	adc	r31, r31
    258c:	ee 0f       	add	r30, r30
    258e:	ff 1f       	adc	r31, r31
    2590:	e8 0f       	add	r30, r24
    2592:	f9 1f       	adc	r31, r25
    2594:	87 a4       	ldd	r8, Z+47	; 0x2f
    2596:	90 a8       	ldd	r9, Z+48	; 0x30
    2598:	a1 a8       	ldd	r10, Z+49	; 0x31
    259a:	b2 a8       	ldd	r11, Z+50	; 0x32
    259c:	f7 01       	movw	r30, r14
    259e:	80 82       	st	Z, r8
    25a0:	91 82       	std	Z+1, r9	; 0x01
    25a2:	a2 82       	std	Z+2, r10	; 0x02
    25a4:	b3 82       	std	Z+3, r11	; 0x03
    25a6:	70 e0       	ldi	r23, 0x00	; 0
    25a8:	fd 01       	movw	r30, r26
    25aa:	e6 0f       	add	r30, r22
    25ac:	f7 1f       	adc	r31, r23
    25ae:	83 a9       	ldd	r24, Z+51	; 0x33
    25b0:	92 e0       	ldi	r25, 0x02	; 2
    25b2:	93 ab       	std	Z+51, r25	; 0x33
    25b4:	02 30       	cpi	r16, 0x02	; 2
    25b6:	01 f1       	breq	.+64     	; 0x25f8 <xTaskGenericNotify+0x94>
    25b8:	18 f4       	brcc	.+6      	; 0x25c0 <xTaskGenericNotify+0x5c>
    25ba:	01 30       	cpi	r16, 0x01	; 1
    25bc:	31 f0       	breq	.+12     	; 0x25ca <xTaskGenericNotify+0x66>
    25be:	4d c0       	rjmp	.+154    	; 0x265a <xTaskGenericNotify+0xf6>
    25c0:	03 30       	cpi	r16, 0x03	; 3
    25c2:	79 f1       	breq	.+94     	; 0x2622 <xTaskGenericNotify+0xbe>
    25c4:	04 30       	cpi	r16, 0x04	; 4
    25c6:	d1 f1       	breq	.+116    	; 0x263c <xTaskGenericNotify+0xd8>
    25c8:	48 c0       	rjmp	.+144    	; 0x265a <xTaskGenericNotify+0xf6>
    25ca:	66 0f       	add	r22, r22
    25cc:	77 1f       	adc	r23, r23
    25ce:	66 0f       	add	r22, r22
    25d0:	77 1f       	adc	r23, r23
    25d2:	fd 01       	movw	r30, r26
    25d4:	e6 0f       	add	r30, r22
    25d6:	f7 1f       	adc	r31, r23
    25d8:	87 a4       	ldd	r8, Z+47	; 0x2f
    25da:	90 a8       	ldd	r9, Z+48	; 0x30
    25dc:	a1 a8       	ldd	r10, Z+49	; 0x31
    25de:	b2 a8       	ldd	r11, Z+50	; 0x32
    25e0:	ba 01       	movw	r22, r20
    25e2:	a9 01       	movw	r20, r18
    25e4:	48 29       	or	r20, r8
    25e6:	59 29       	or	r21, r9
    25e8:	6a 29       	or	r22, r10
    25ea:	7b 29       	or	r23, r11
    25ec:	47 a7       	std	Z+47, r20	; 0x2f
    25ee:	50 ab       	std	Z+48, r21	; 0x30
    25f0:	61 ab       	std	Z+49, r22	; 0x31
    25f2:	72 ab       	std	Z+50, r23	; 0x32
    25f4:	01 e0       	ldi	r16, 0x01	; 1
    25f6:	34 c0       	rjmp	.+104    	; 0x2660 <xTaskGenericNotify+0xfc>
    25f8:	66 0f       	add	r22, r22
    25fa:	77 1f       	adc	r23, r23
    25fc:	66 0f       	add	r22, r22
    25fe:	77 1f       	adc	r23, r23
    2600:	fd 01       	movw	r30, r26
    2602:	e6 0f       	add	r30, r22
    2604:	f7 1f       	adc	r31, r23
    2606:	47 a5       	ldd	r20, Z+47	; 0x2f
    2608:	50 a9       	ldd	r21, Z+48	; 0x30
    260a:	61 a9       	ldd	r22, Z+49	; 0x31
    260c:	72 a9       	ldd	r23, Z+50	; 0x32
    260e:	4f 5f       	subi	r20, 0xFF	; 255
    2610:	5f 4f       	sbci	r21, 0xFF	; 255
    2612:	6f 4f       	sbci	r22, 0xFF	; 255
    2614:	7f 4f       	sbci	r23, 0xFF	; 255
    2616:	47 a7       	std	Z+47, r20	; 0x2f
    2618:	50 ab       	std	Z+48, r21	; 0x30
    261a:	61 ab       	std	Z+49, r22	; 0x31
    261c:	72 ab       	std	Z+50, r23	; 0x32
    261e:	01 e0       	ldi	r16, 0x01	; 1
    2620:	1f c0       	rjmp	.+62     	; 0x2660 <xTaskGenericNotify+0xfc>
    2622:	66 0f       	add	r22, r22
    2624:	77 1f       	adc	r23, r23
    2626:	66 0f       	add	r22, r22
    2628:	77 1f       	adc	r23, r23
    262a:	fd 01       	movw	r30, r26
    262c:	e6 0f       	add	r30, r22
    262e:	f7 1f       	adc	r31, r23
    2630:	27 a7       	std	Z+47, r18	; 0x2f
    2632:	30 ab       	std	Z+48, r19	; 0x30
    2634:	41 ab       	std	Z+49, r20	; 0x31
    2636:	52 ab       	std	Z+50, r21	; 0x32
    2638:	01 e0       	ldi	r16, 0x01	; 1
    263a:	12 c0       	rjmp	.+36     	; 0x2660 <xTaskGenericNotify+0xfc>
    263c:	82 30       	cpi	r24, 0x02	; 2
    263e:	79 f0       	breq	.+30     	; 0x265e <xTaskGenericNotify+0xfa>
    2640:	66 0f       	add	r22, r22
    2642:	77 1f       	adc	r23, r23
    2644:	66 0f       	add	r22, r22
    2646:	77 1f       	adc	r23, r23
    2648:	fd 01       	movw	r30, r26
    264a:	e6 0f       	add	r30, r22
    264c:	f7 1f       	adc	r31, r23
    264e:	27 a7       	std	Z+47, r18	; 0x2f
    2650:	30 ab       	std	Z+48, r19	; 0x30
    2652:	41 ab       	std	Z+49, r20	; 0x31
    2654:	52 ab       	std	Z+50, r21	; 0x32
    2656:	01 e0       	ldi	r16, 0x01	; 1
    2658:	03 c0       	rjmp	.+6      	; 0x2660 <xTaskGenericNotify+0xfc>
    265a:	01 e0       	ldi	r16, 0x01	; 1
    265c:	01 c0       	rjmp	.+2      	; 0x2660 <xTaskGenericNotify+0xfc>
    265e:	00 e0       	ldi	r16, 0x00	; 0
    2660:	81 30       	cpi	r24, 0x01	; 1
    2662:	09 f0       	breq	.+2      	; 0x2666 <xTaskGenericNotify+0x102>
    2664:	69 c0       	rjmp	.+210    	; 0x2738 <xTaskGenericNotify+0x1d4>
    2666:	1c 96       	adiw	r26, 0x0c	; 12
    2668:	ed 91       	ld	r30, X+
    266a:	fc 91       	ld	r31, X
    266c:	1d 97       	sbiw	r26, 0x0d	; 13
    266e:	16 96       	adiw	r26, 0x06	; 6
    2670:	cd 91       	ld	r28, X+
    2672:	dc 91       	ld	r29, X
    2674:	17 97       	sbiw	r26, 0x07	; 7
    2676:	18 96       	adiw	r26, 0x08	; 8
    2678:	8d 91       	ld	r24, X+
    267a:	9c 91       	ld	r25, X
    267c:	19 97       	sbiw	r26, 0x09	; 9
    267e:	9f 83       	std	Y+7, r25	; 0x07
    2680:	8e 83       	std	Y+6, r24	; 0x06
    2682:	18 96       	adiw	r26, 0x08	; 8
    2684:	cd 91       	ld	r28, X+
    2686:	dc 91       	ld	r29, X
    2688:	19 97       	sbiw	r26, 0x09	; 9
    268a:	16 96       	adiw	r26, 0x06	; 6
    268c:	8d 91       	ld	r24, X+
    268e:	9c 91       	ld	r25, X
    2690:	17 97       	sbiw	r26, 0x07	; 7
    2692:	9d 83       	std	Y+5, r25	; 0x05
    2694:	8c 83       	std	Y+4, r24	; 0x04
    2696:	81 81       	ldd	r24, Z+1	; 0x01
    2698:	92 81       	ldd	r25, Z+2	; 0x02
    269a:	9d 01       	movw	r18, r26
    269c:	2e 5f       	subi	r18, 0xFE	; 254
    269e:	3f 4f       	sbci	r19, 0xFF	; 255
    26a0:	82 17       	cp	r24, r18
    26a2:	93 07       	cpc	r25, r19
    26a4:	31 f4       	brne	.+12     	; 0x26b2 <xTaskGenericNotify+0x14e>
    26a6:	18 96       	adiw	r26, 0x08	; 8
    26a8:	8d 91       	ld	r24, X+
    26aa:	9c 91       	ld	r25, X
    26ac:	19 97       	sbiw	r26, 0x09	; 9
    26ae:	92 83       	std	Z+2, r25	; 0x02
    26b0:	81 83       	std	Z+1, r24	; 0x01
    26b2:	1d 96       	adiw	r26, 0x0d	; 13
    26b4:	1c 92       	st	X, r1
    26b6:	1e 92       	st	-X, r1
    26b8:	1c 97       	sbiw	r26, 0x0c	; 12
    26ba:	80 81       	ld	r24, Z
    26bc:	81 50       	subi	r24, 0x01	; 1
    26be:	80 83       	st	Z, r24
    26c0:	5a 96       	adiw	r26, 0x1a	; 26
    26c2:	ec 91       	ld	r30, X
    26c4:	5a 97       	sbiw	r26, 0x1a	; 26
    26c6:	80 91 b3 10 	lds	r24, 0x10B3	; 0x8010b3 <uxTopReadyPriority>
    26ca:	8e 17       	cp	r24, r30
    26cc:	10 f4       	brcc	.+4      	; 0x26d2 <xTaskGenericNotify+0x16e>
    26ce:	e0 93 b3 10 	sts	0x10B3, r30	; 0x8010b3 <uxTopReadyPriority>
    26d2:	8b e0       	ldi	r24, 0x0B	; 11
    26d4:	8e 9f       	mul	r24, r30
    26d6:	f0 01       	movw	r30, r0
    26d8:	11 24       	eor	r1, r1
    26da:	eb 50       	subi	r30, 0x0B	; 11
    26dc:	ff 4e       	sbci	r31, 0xEF	; 239
    26de:	01 80       	ldd	r0, Z+1	; 0x01
    26e0:	f2 81       	ldd	r31, Z+2	; 0x02
    26e2:	e0 2d       	mov	r30, r0
    26e4:	17 96       	adiw	r26, 0x07	; 7
    26e6:	fc 93       	st	X, r31
    26e8:	ee 93       	st	-X, r30
    26ea:	16 97       	sbiw	r26, 0x06	; 6
    26ec:	46 81       	ldd	r20, Z+6	; 0x06
    26ee:	57 81       	ldd	r21, Z+7	; 0x07
    26f0:	19 96       	adiw	r26, 0x09	; 9
    26f2:	5c 93       	st	X, r21
    26f4:	4e 93       	st	-X, r20
    26f6:	18 97       	sbiw	r26, 0x08	; 8
    26f8:	c6 81       	ldd	r28, Z+6	; 0x06
    26fa:	d7 81       	ldd	r29, Z+7	; 0x07
    26fc:	3d 83       	std	Y+5, r19	; 0x05
    26fe:	2c 83       	std	Y+4, r18	; 0x04
    2700:	37 83       	std	Z+7, r19	; 0x07
    2702:	26 83       	std	Z+6, r18	; 0x06
    2704:	5a 96       	adiw	r26, 0x1a	; 26
    2706:	ec 91       	ld	r30, X
    2708:	5a 97       	sbiw	r26, 0x1a	; 26
    270a:	8e 9f       	mul	r24, r30
    270c:	f0 01       	movw	r30, r0
    270e:	11 24       	eor	r1, r1
    2710:	eb 50       	subi	r30, 0x0B	; 11
    2712:	ff 4e       	sbci	r31, 0xEF	; 239
    2714:	1d 96       	adiw	r26, 0x0d	; 13
    2716:	fc 93       	st	X, r31
    2718:	ee 93       	st	-X, r30
    271a:	1c 97       	sbiw	r26, 0x0c	; 12
    271c:	80 81       	ld	r24, Z
    271e:	8f 5f       	subi	r24, 0xFF	; 255
    2720:	80 83       	st	Z, r24
    2722:	5a 96       	adiw	r26, 0x1a	; 26
    2724:	9c 91       	ld	r25, X
    2726:	e0 91 63 11 	lds	r30, 0x1163	; 0x801163 <pxCurrentTCB>
    272a:	f0 91 64 11 	lds	r31, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    272e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2730:	89 17       	cp	r24, r25
    2732:	10 f4       	brcc	.+4      	; 0x2738 <xTaskGenericNotify+0x1d4>
    2734:	0e 94 c2 03 	call	0x784	; 0x784 <vPortYield>
    2738:	0f 90       	pop	r0
    273a:	0f be       	out	0x3f, r0	; 63
    273c:	80 2f       	mov	r24, r16
    273e:	df 91       	pop	r29
    2740:	cf 91       	pop	r28
    2742:	0f 91       	pop	r16
    2744:	ff 90       	pop	r15
    2746:	ef 90       	pop	r14
    2748:	bf 90       	pop	r11
    274a:	af 90       	pop	r10
    274c:	9f 90       	pop	r9
    274e:	8f 90       	pop	r8
    2750:	08 95       	ret

00002752 <xTaskGenericNotifyFromISR>:
    2752:	8f 92       	push	r8
    2754:	9f 92       	push	r9
    2756:	af 92       	push	r10
    2758:	bf 92       	push	r11
    275a:	cf 92       	push	r12
    275c:	df 92       	push	r13
    275e:	ef 92       	push	r14
    2760:	ff 92       	push	r15
    2762:	0f 93       	push	r16
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
    2768:	dc 01       	movw	r26, r24
    276a:	e1 14       	cp	r14, r1
    276c:	f1 04       	cpc	r15, r1
    276e:	89 f0       	breq	.+34     	; 0x2792 <xTaskGenericNotifyFromISR+0x40>
    2770:	e6 2f       	mov	r30, r22
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	ee 0f       	add	r30, r30
    2776:	ff 1f       	adc	r31, r31
    2778:	ee 0f       	add	r30, r30
    277a:	ff 1f       	adc	r31, r31
    277c:	e8 0f       	add	r30, r24
    277e:	f9 1f       	adc	r31, r25
    2780:	87 a4       	ldd	r8, Z+47	; 0x2f
    2782:	90 a8       	ldd	r9, Z+48	; 0x30
    2784:	a1 a8       	ldd	r10, Z+49	; 0x31
    2786:	b2 a8       	ldd	r11, Z+50	; 0x32
    2788:	f7 01       	movw	r30, r14
    278a:	80 82       	st	Z, r8
    278c:	91 82       	std	Z+1, r9	; 0x01
    278e:	a2 82       	std	Z+2, r10	; 0x02
    2790:	b3 82       	std	Z+3, r11	; 0x03
    2792:	70 e0       	ldi	r23, 0x00	; 0
    2794:	fd 01       	movw	r30, r26
    2796:	e6 0f       	add	r30, r22
    2798:	f7 1f       	adc	r31, r23
    279a:	93 a9       	ldd	r25, Z+51	; 0x33
    279c:	82 e0       	ldi	r24, 0x02	; 2
    279e:	83 ab       	std	Z+51, r24	; 0x33
    27a0:	02 30       	cpi	r16, 0x02	; 2
    27a2:	01 f1       	breq	.+64     	; 0x27e4 <xTaskGenericNotifyFromISR+0x92>
    27a4:	18 f4       	brcc	.+6      	; 0x27ac <xTaskGenericNotifyFromISR+0x5a>
    27a6:	01 30       	cpi	r16, 0x01	; 1
    27a8:	31 f0       	breq	.+12     	; 0x27b6 <xTaskGenericNotifyFromISR+0x64>
    27aa:	4d c0       	rjmp	.+154    	; 0x2846 <xTaskGenericNotifyFromISR+0xf4>
    27ac:	03 30       	cpi	r16, 0x03	; 3
    27ae:	79 f1       	breq	.+94     	; 0x280e <xTaskGenericNotifyFromISR+0xbc>
    27b0:	04 30       	cpi	r16, 0x04	; 4
    27b2:	d1 f1       	breq	.+116    	; 0x2828 <xTaskGenericNotifyFromISR+0xd6>
    27b4:	48 c0       	rjmp	.+144    	; 0x2846 <xTaskGenericNotifyFromISR+0xf4>
    27b6:	66 0f       	add	r22, r22
    27b8:	77 1f       	adc	r23, r23
    27ba:	66 0f       	add	r22, r22
    27bc:	77 1f       	adc	r23, r23
    27be:	fd 01       	movw	r30, r26
    27c0:	e6 0f       	add	r30, r22
    27c2:	f7 1f       	adc	r31, r23
    27c4:	87 a4       	ldd	r8, Z+47	; 0x2f
    27c6:	90 a8       	ldd	r9, Z+48	; 0x30
    27c8:	a1 a8       	ldd	r10, Z+49	; 0x31
    27ca:	b2 a8       	ldd	r11, Z+50	; 0x32
    27cc:	ba 01       	movw	r22, r20
    27ce:	a9 01       	movw	r20, r18
    27d0:	48 29       	or	r20, r8
    27d2:	59 29       	or	r21, r9
    27d4:	6a 29       	or	r22, r10
    27d6:	7b 29       	or	r23, r11
    27d8:	47 a7       	std	Z+47, r20	; 0x2f
    27da:	50 ab       	std	Z+48, r21	; 0x30
    27dc:	61 ab       	std	Z+49, r22	; 0x31
    27de:	72 ab       	std	Z+50, r23	; 0x32
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	34 c0       	rjmp	.+104    	; 0x284c <xTaskGenericNotifyFromISR+0xfa>
    27e4:	66 0f       	add	r22, r22
    27e6:	77 1f       	adc	r23, r23
    27e8:	66 0f       	add	r22, r22
    27ea:	77 1f       	adc	r23, r23
    27ec:	fd 01       	movw	r30, r26
    27ee:	e6 0f       	add	r30, r22
    27f0:	f7 1f       	adc	r31, r23
    27f2:	47 a5       	ldd	r20, Z+47	; 0x2f
    27f4:	50 a9       	ldd	r21, Z+48	; 0x30
    27f6:	61 a9       	ldd	r22, Z+49	; 0x31
    27f8:	72 a9       	ldd	r23, Z+50	; 0x32
    27fa:	4f 5f       	subi	r20, 0xFF	; 255
    27fc:	5f 4f       	sbci	r21, 0xFF	; 255
    27fe:	6f 4f       	sbci	r22, 0xFF	; 255
    2800:	7f 4f       	sbci	r23, 0xFF	; 255
    2802:	47 a7       	std	Z+47, r20	; 0x2f
    2804:	50 ab       	std	Z+48, r21	; 0x30
    2806:	61 ab       	std	Z+49, r22	; 0x31
    2808:	72 ab       	std	Z+50, r23	; 0x32
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	1f c0       	rjmp	.+62     	; 0x284c <xTaskGenericNotifyFromISR+0xfa>
    280e:	66 0f       	add	r22, r22
    2810:	77 1f       	adc	r23, r23
    2812:	66 0f       	add	r22, r22
    2814:	77 1f       	adc	r23, r23
    2816:	fd 01       	movw	r30, r26
    2818:	e6 0f       	add	r30, r22
    281a:	f7 1f       	adc	r31, r23
    281c:	27 a7       	std	Z+47, r18	; 0x2f
    281e:	30 ab       	std	Z+48, r19	; 0x30
    2820:	41 ab       	std	Z+49, r20	; 0x31
    2822:	52 ab       	std	Z+50, r21	; 0x32
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	12 c0       	rjmp	.+36     	; 0x284c <xTaskGenericNotifyFromISR+0xfa>
    2828:	92 30       	cpi	r25, 0x02	; 2
    282a:	79 f0       	breq	.+30     	; 0x284a <xTaskGenericNotifyFromISR+0xf8>
    282c:	66 0f       	add	r22, r22
    282e:	77 1f       	adc	r23, r23
    2830:	66 0f       	add	r22, r22
    2832:	77 1f       	adc	r23, r23
    2834:	fd 01       	movw	r30, r26
    2836:	e6 0f       	add	r30, r22
    2838:	f7 1f       	adc	r31, r23
    283a:	27 a7       	std	Z+47, r18	; 0x2f
    283c:	30 ab       	std	Z+48, r19	; 0x30
    283e:	41 ab       	std	Z+49, r20	; 0x31
    2840:	52 ab       	std	Z+50, r21	; 0x32
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	03 c0       	rjmp	.+6      	; 0x284c <xTaskGenericNotifyFromISR+0xfa>
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	01 c0       	rjmp	.+2      	; 0x284c <xTaskGenericNotifyFromISR+0xfa>
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	91 30       	cpi	r25, 0x01	; 1
    284e:	09 f0       	breq	.+2      	; 0x2852 <xTaskGenericNotifyFromISR+0x100>
    2850:	96 c0       	rjmp	.+300    	; 0x297e <xTaskGenericNotifyFromISR+0x22c>
    2852:	90 91 a4 10 	lds	r25, 0x10A4	; 0x8010a4 <uxSchedulerSuspended>
    2856:	91 11       	cpse	r25, r1
    2858:	5f c0       	rjmp	.+190    	; 0x2918 <xTaskGenericNotifyFromISR+0x1c6>
    285a:	1c 96       	adiw	r26, 0x0c	; 12
    285c:	ed 91       	ld	r30, X+
    285e:	fc 91       	ld	r31, X
    2860:	1d 97       	sbiw	r26, 0x0d	; 13
    2862:	16 96       	adiw	r26, 0x06	; 6
    2864:	cd 91       	ld	r28, X+
    2866:	dc 91       	ld	r29, X
    2868:	17 97       	sbiw	r26, 0x07	; 7
    286a:	18 96       	adiw	r26, 0x08	; 8
    286c:	2d 91       	ld	r18, X+
    286e:	3c 91       	ld	r19, X
    2870:	19 97       	sbiw	r26, 0x09	; 9
    2872:	3f 83       	std	Y+7, r19	; 0x07
    2874:	2e 83       	std	Y+6, r18	; 0x06
    2876:	18 96       	adiw	r26, 0x08	; 8
    2878:	cd 91       	ld	r28, X+
    287a:	dc 91       	ld	r29, X
    287c:	19 97       	sbiw	r26, 0x09	; 9
    287e:	16 96       	adiw	r26, 0x06	; 6
    2880:	2d 91       	ld	r18, X+
    2882:	3c 91       	ld	r19, X
    2884:	17 97       	sbiw	r26, 0x07	; 7
    2886:	3d 83       	std	Y+5, r19	; 0x05
    2888:	2c 83       	std	Y+4, r18	; 0x04
    288a:	41 81       	ldd	r20, Z+1	; 0x01
    288c:	52 81       	ldd	r21, Z+2	; 0x02
    288e:	9d 01       	movw	r18, r26
    2890:	2e 5f       	subi	r18, 0xFE	; 254
    2892:	3f 4f       	sbci	r19, 0xFF	; 255
    2894:	42 17       	cp	r20, r18
    2896:	53 07       	cpc	r21, r19
    2898:	31 f4       	brne	.+12     	; 0x28a6 <xTaskGenericNotifyFromISR+0x154>
    289a:	18 96       	adiw	r26, 0x08	; 8
    289c:	4d 91       	ld	r20, X+
    289e:	5c 91       	ld	r21, X
    28a0:	19 97       	sbiw	r26, 0x09	; 9
    28a2:	52 83       	std	Z+2, r21	; 0x02
    28a4:	41 83       	std	Z+1, r20	; 0x01
    28a6:	1d 96       	adiw	r26, 0x0d	; 13
    28a8:	1c 92       	st	X, r1
    28aa:	1e 92       	st	-X, r1
    28ac:	1c 97       	sbiw	r26, 0x0c	; 12
    28ae:	90 81       	ld	r25, Z
    28b0:	91 50       	subi	r25, 0x01	; 1
    28b2:	90 83       	st	Z, r25
    28b4:	5a 96       	adiw	r26, 0x1a	; 26
    28b6:	ec 91       	ld	r30, X
    28b8:	5a 97       	sbiw	r26, 0x1a	; 26
    28ba:	90 91 b3 10 	lds	r25, 0x10B3	; 0x8010b3 <uxTopReadyPriority>
    28be:	9e 17       	cp	r25, r30
    28c0:	10 f4       	brcc	.+4      	; 0x28c6 <xTaskGenericNotifyFromISR+0x174>
    28c2:	e0 93 b3 10 	sts	0x10B3, r30	; 0x8010b3 <uxTopReadyPriority>
    28c6:	9b e0       	ldi	r25, 0x0B	; 11
    28c8:	9e 9f       	mul	r25, r30
    28ca:	f0 01       	movw	r30, r0
    28cc:	11 24       	eor	r1, r1
    28ce:	eb 50       	subi	r30, 0x0B	; 11
    28d0:	ff 4e       	sbci	r31, 0xEF	; 239
    28d2:	01 80       	ldd	r0, Z+1	; 0x01
    28d4:	f2 81       	ldd	r31, Z+2	; 0x02
    28d6:	e0 2d       	mov	r30, r0
    28d8:	17 96       	adiw	r26, 0x07	; 7
    28da:	fc 93       	st	X, r31
    28dc:	ee 93       	st	-X, r30
    28de:	16 97       	sbiw	r26, 0x06	; 6
    28e0:	46 81       	ldd	r20, Z+6	; 0x06
    28e2:	57 81       	ldd	r21, Z+7	; 0x07
    28e4:	19 96       	adiw	r26, 0x09	; 9
    28e6:	5c 93       	st	X, r21
    28e8:	4e 93       	st	-X, r20
    28ea:	18 97       	sbiw	r26, 0x08	; 8
    28ec:	c6 81       	ldd	r28, Z+6	; 0x06
    28ee:	d7 81       	ldd	r29, Z+7	; 0x07
    28f0:	3d 83       	std	Y+5, r19	; 0x05
    28f2:	2c 83       	std	Y+4, r18	; 0x04
    28f4:	37 83       	std	Z+7, r19	; 0x07
    28f6:	26 83       	std	Z+6, r18	; 0x06
    28f8:	5a 96       	adiw	r26, 0x1a	; 26
    28fa:	ec 91       	ld	r30, X
    28fc:	5a 97       	sbiw	r26, 0x1a	; 26
    28fe:	9e 9f       	mul	r25, r30
    2900:	f0 01       	movw	r30, r0
    2902:	11 24       	eor	r1, r1
    2904:	eb 50       	subi	r30, 0x0B	; 11
    2906:	ff 4e       	sbci	r31, 0xEF	; 239
    2908:	1d 96       	adiw	r26, 0x0d	; 13
    290a:	fc 93       	st	X, r31
    290c:	ee 93       	st	-X, r30
    290e:	1c 97       	sbiw	r26, 0x0c	; 12
    2910:	90 81       	ld	r25, Z
    2912:	9f 5f       	subi	r25, 0xFF	; 255
    2914:	90 83       	st	Z, r25
    2916:	21 c0       	rjmp	.+66     	; 0x295a <xTaskGenericNotifyFromISR+0x208>
    2918:	60 ed       	ldi	r22, 0xD0	; 208
    291a:	70 e1       	ldi	r23, 0x10	; 16
    291c:	fb 01       	movw	r30, r22
    291e:	c1 81       	ldd	r28, Z+1	; 0x01
    2920:	d2 81       	ldd	r29, Z+2	; 0x02
    2922:	53 96       	adiw	r26, 0x13	; 19
    2924:	dc 93       	st	X, r29
    2926:	ce 93       	st	-X, r28
    2928:	52 97       	sbiw	r26, 0x12	; 18
    292a:	2e 81       	ldd	r18, Y+6	; 0x06
    292c:	3f 81       	ldd	r19, Y+7	; 0x07
    292e:	55 96       	adiw	r26, 0x15	; 21
    2930:	3c 93       	st	X, r19
    2932:	2e 93       	st	-X, r18
    2934:	54 97       	sbiw	r26, 0x14	; 20
    2936:	4e 81       	ldd	r20, Y+6	; 0x06
    2938:	5f 81       	ldd	r21, Y+7	; 0x07
    293a:	9d 01       	movw	r18, r26
    293c:	22 5f       	subi	r18, 0xF2	; 242
    293e:	3f 4f       	sbci	r19, 0xFF	; 255
    2940:	fa 01       	movw	r30, r20
    2942:	35 83       	std	Z+5, r19	; 0x05
    2944:	24 83       	std	Z+4, r18	; 0x04
    2946:	3f 83       	std	Y+7, r19	; 0x07
    2948:	2e 83       	std	Y+6, r18	; 0x06
    294a:	59 96       	adiw	r26, 0x19	; 25
    294c:	7c 93       	st	X, r23
    294e:	6e 93       	st	-X, r22
    2950:	58 97       	sbiw	r26, 0x18	; 24
    2952:	fb 01       	movw	r30, r22
    2954:	90 81       	ld	r25, Z
    2956:	9f 5f       	subi	r25, 0xFF	; 255
    2958:	90 83       	st	Z, r25
    295a:	5a 96       	adiw	r26, 0x1a	; 26
    295c:	2c 91       	ld	r18, X
    295e:	e0 91 63 11 	lds	r30, 0x1163	; 0x801163 <pxCurrentTCB>
    2962:	f0 91 64 11 	lds	r31, 0x1164	; 0x801164 <pxCurrentTCB+0x1>
    2966:	92 8d       	ldd	r25, Z+26	; 0x1a
    2968:	92 17       	cp	r25, r18
    296a:	48 f4       	brcc	.+18     	; 0x297e <xTaskGenericNotifyFromISR+0x22c>
    296c:	c1 14       	cp	r12, r1
    296e:	d1 04       	cpc	r13, r1
    2970:	19 f0       	breq	.+6      	; 0x2978 <xTaskGenericNotifyFromISR+0x226>
    2972:	91 e0       	ldi	r25, 0x01	; 1
    2974:	f6 01       	movw	r30, r12
    2976:	90 83       	st	Z, r25
    2978:	91 e0       	ldi	r25, 0x01	; 1
    297a:	90 93 ad 10 	sts	0x10AD, r25	; 0x8010ad <xYieldPending>
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
    2982:	0f 91       	pop	r16
    2984:	ff 90       	pop	r15
    2986:	ef 90       	pop	r14
    2988:	df 90       	pop	r13
    298a:	cf 90       	pop	r12
    298c:	bf 90       	pop	r11
    298e:	af 90       	pop	r10
    2990:	9f 90       	pop	r9
    2992:	8f 90       	pop	r8
    2994:	08 95       	ret

00002996 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2996:	00 97       	sbiw	r24, 0x00	; 0
    2998:	21 f4       	brne	.+8      	; 0x29a2 <xTaskGenericNotifyStateClear+0xc>
    299a:	80 91 63 11 	lds	r24, 0x1163	; 0x801163 <pxCurrentTCB>
    299e:	90 91 64 11 	lds	r25, 0x1164	; 0x801164 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    29a2:	0f b6       	in	r0, 0x3f	; 63
    29a4:	f8 94       	cli
    29a6:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    29a8:	70 e0       	ldi	r23, 0x00	; 0
    29aa:	fc 01       	movw	r30, r24
    29ac:	e6 0f       	add	r30, r22
    29ae:	f7 1f       	adc	r31, r23
    29b0:	23 a9       	ldd	r18, Z+51	; 0x33
    29b2:	22 30       	cpi	r18, 0x02	; 2
    29b4:	31 f4       	brne	.+12     	; 0x29c2 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    29b6:	fc 01       	movw	r30, r24
    29b8:	e6 0f       	add	r30, r22
    29ba:	f7 1f       	adc	r31, r23
    29bc:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	01 c0       	rjmp	.+2      	; 0x29c4 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    29c2:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    29c4:	0f 90       	pop	r0
    29c6:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    29c8:	08 95       	ret

000029ca <prvGetNextExpireTime>:
    29ca:	dc 01       	movw	r26, r24
    29cc:	e0 91 6f 11 	lds	r30, 0x116F	; 0x80116f <pxCurrentTimerList>
    29d0:	f0 91 70 11 	lds	r31, 0x1170	; 0x801170 <pxCurrentTimerList+0x1>
    29d4:	80 81       	ld	r24, Z
    29d6:	91 e0       	ldi	r25, 0x01	; 1
    29d8:	81 11       	cpse	r24, r1
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	9c 93       	st	X, r25
    29de:	91 11       	cpse	r25, r1
    29e0:	08 c0       	rjmp	.+16     	; 0x29f2 <prvGetNextExpireTime+0x28>
    29e2:	07 80       	ldd	r0, Z+7	; 0x07
    29e4:	f0 85       	ldd	r31, Z+8	; 0x08
    29e6:	e0 2d       	mov	r30, r0
    29e8:	60 81       	ld	r22, Z
    29ea:	71 81       	ldd	r23, Z+1	; 0x01
    29ec:	82 81       	ldd	r24, Z+2	; 0x02
    29ee:	93 81       	ldd	r25, Z+3	; 0x03
    29f0:	08 95       	ret
    29f2:	60 e0       	ldi	r22, 0x00	; 0
    29f4:	70 e0       	ldi	r23, 0x00	; 0
    29f6:	cb 01       	movw	r24, r22
    29f8:	08 95       	ret

000029fa <prvInsertTimerInActiveList>:
    29fa:	cf 92       	push	r12
    29fc:	df 92       	push	r13
    29fe:	ef 92       	push	r14
    2a00:	ff 92       	push	r15
    2a02:	0f 93       	push	r16
    2a04:	1f 93       	push	r17
    2a06:	fc 01       	movw	r30, r24
    2a08:	42 83       	std	Z+2, r20	; 0x02
    2a0a:	53 83       	std	Z+3, r21	; 0x03
    2a0c:	64 83       	std	Z+4, r22	; 0x04
    2a0e:	75 83       	std	Z+5, r23	; 0x05
    2a10:	93 87       	std	Z+11, r25	; 0x0b
    2a12:	82 87       	std	Z+10, r24	; 0x0a
    2a14:	04 17       	cp	r16, r20
    2a16:	15 07       	cpc	r17, r21
    2a18:	26 07       	cpc	r18, r22
    2a1a:	37 07       	cpc	r19, r23
    2a1c:	c0 f0       	brcs	.+48     	; 0x2a4e <prvInsertTimerInActiveList+0x54>
    2a1e:	0c 19       	sub	r16, r12
    2a20:	1d 09       	sbc	r17, r13
    2a22:	2e 09       	sbc	r18, r14
    2a24:	3f 09       	sbc	r19, r15
    2a26:	86 85       	ldd	r24, Z+14	; 0x0e
    2a28:	97 85       	ldd	r25, Z+15	; 0x0f
    2a2a:	a0 89       	ldd	r26, Z+16	; 0x10
    2a2c:	b1 89       	ldd	r27, Z+17	; 0x11
    2a2e:	08 17       	cp	r16, r24
    2a30:	19 07       	cpc	r17, r25
    2a32:	2a 07       	cpc	r18, r26
    2a34:	3b 07       	cpc	r19, r27
    2a36:	00 f5       	brcc	.+64     	; 0x2a78 <prvInsertTimerInActiveList+0x7e>
    2a38:	bf 01       	movw	r22, r30
    2a3a:	6e 5f       	subi	r22, 0xFE	; 254
    2a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a3e:	80 91 6d 11 	lds	r24, 0x116D	; 0x80116d <pxOverflowTimerList>
    2a42:	90 91 6e 11 	lds	r25, 0x116E	; 0x80116e <pxOverflowTimerList+0x1>
    2a46:	0e 94 09 03 	call	0x612	; 0x612 <vListInsert>
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	18 c0       	rjmp	.+48     	; 0x2a7e <prvInsertTimerInActiveList+0x84>
    2a4e:	0c 15       	cp	r16, r12
    2a50:	1d 05       	cpc	r17, r13
    2a52:	2e 05       	cpc	r18, r14
    2a54:	3f 05       	cpc	r19, r15
    2a56:	28 f4       	brcc	.+10     	; 0x2a62 <prvInsertTimerInActiveList+0x68>
    2a58:	4c 15       	cp	r20, r12
    2a5a:	5d 05       	cpc	r21, r13
    2a5c:	6e 05       	cpc	r22, r14
    2a5e:	7f 05       	cpc	r23, r15
    2a60:	68 f4       	brcc	.+26     	; 0x2a7c <prvInsertTimerInActiveList+0x82>
    2a62:	bf 01       	movw	r22, r30
    2a64:	6e 5f       	subi	r22, 0xFE	; 254
    2a66:	7f 4f       	sbci	r23, 0xFF	; 255
    2a68:	80 91 6f 11 	lds	r24, 0x116F	; 0x80116f <pxCurrentTimerList>
    2a6c:	90 91 70 11 	lds	r25, 0x1170	; 0x801170 <pxCurrentTimerList+0x1>
    2a70:	0e 94 09 03 	call	0x612	; 0x612 <vListInsert>
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	03 c0       	rjmp	.+6      	; 0x2a7e <prvInsertTimerInActiveList+0x84>
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	01 c0       	rjmp	.+2      	; 0x2a7e <prvInsertTimerInActiveList+0x84>
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	1f 91       	pop	r17
    2a80:	0f 91       	pop	r16
    2a82:	ff 90       	pop	r15
    2a84:	ef 90       	pop	r14
    2a86:	df 90       	pop	r13
    2a88:	cf 90       	pop	r12
    2a8a:	08 95       	ret

00002a8c <prvCheckForValidListAndQueue>:
    2a8c:	0f b6       	in	r0, 0x3f	; 63
    2a8e:	f8 94       	cli
    2a90:	0f 92       	push	r0
    2a92:	80 91 6b 11 	lds	r24, 0x116B	; 0x80116b <xTimerQueue>
    2a96:	90 91 6c 11 	lds	r25, 0x116C	; 0x80116c <xTimerQueue+0x1>
    2a9a:	89 2b       	or	r24, r25
    2a9c:	e9 f4       	brne	.+58     	; 0x2ad8 <prvCheckForValidListAndQueue+0x4c>
    2a9e:	8c e7       	ldi	r24, 0x7C	; 124
    2aa0:	91 e1       	ldi	r25, 0x11	; 17
    2aa2:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <vListInitialise>
    2aa6:	81 e7       	ldi	r24, 0x71	; 113
    2aa8:	91 e1       	ldi	r25, 0x11	; 17
    2aaa:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <vListInitialise>
    2aae:	8c e7       	ldi	r24, 0x7C	; 124
    2ab0:	91 e1       	ldi	r25, 0x11	; 17
    2ab2:	90 93 70 11 	sts	0x1170, r25	; 0x801170 <pxCurrentTimerList+0x1>
    2ab6:	80 93 6f 11 	sts	0x116F, r24	; 0x80116f <pxCurrentTimerList>
    2aba:	81 e7       	ldi	r24, 0x71	; 113
    2abc:	91 e1       	ldi	r25, 0x11	; 17
    2abe:	90 93 6e 11 	sts	0x116E, r25	; 0x80116e <pxOverflowTimerList+0x1>
    2ac2:	80 93 6d 11 	sts	0x116D, r24	; 0x80116d <pxOverflowTimerList>
    2ac6:	40 e0       	ldi	r20, 0x00	; 0
    2ac8:	67 e0       	ldi	r22, 0x07	; 7
    2aca:	8a e0       	ldi	r24, 0x0A	; 10
    2acc:	0e 94 a7 05 	call	0xb4e	; 0xb4e <xQueueGenericCreate>
    2ad0:	90 93 6c 11 	sts	0x116C, r25	; 0x80116c <xTimerQueue+0x1>
    2ad4:	80 93 6b 11 	sts	0x116B, r24	; 0x80116b <xTimerQueue>
    2ad8:	0f 90       	pop	r0
    2ada:	0f be       	out	0x3f, r0	; 63
    2adc:	08 95       	ret

00002ade <xTimerCreateTimerTask>:
    2ade:	ef 92       	push	r14
    2ae0:	ff 92       	push	r15
    2ae2:	0f 93       	push	r16
    2ae4:	d3 df       	rcall	.-90     	; 0x2a8c <prvCheckForValidListAndQueue>
    2ae6:	80 91 6b 11 	lds	r24, 0x116B	; 0x80116b <xTimerQueue>
    2aea:	90 91 6c 11 	lds	r25, 0x116C	; 0x80116c <xTimerQueue+0x1>
    2aee:	89 2b       	or	r24, r25
    2af0:	91 f0       	breq	.+36     	; 0x2b16 <xTimerCreateTimerTask+0x38>
    2af2:	0f 2e       	mov	r0, r31
    2af4:	f9 e6       	ldi	r31, 0x69	; 105
    2af6:	ef 2e       	mov	r14, r31
    2af8:	f1 e1       	ldi	r31, 0x11	; 17
    2afa:	ff 2e       	mov	r15, r31
    2afc:	f0 2d       	mov	r31, r0
    2afe:	03 e0       	ldi	r16, 0x03	; 3
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	40 ec       	ldi	r20, 0xC0	; 192
    2b06:	50 e0       	ldi	r21, 0x00	; 0
    2b08:	67 e4       	ldi	r22, 0x47	; 71
    2b0a:	72 e0       	ldi	r23, 0x02	; 2
    2b0c:	88 e5       	ldi	r24, 0x58	; 88
    2b0e:	91 e0       	ldi	r25, 0x01	; 1
    2b10:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <xTaskCreate>
    2b14:	01 c0       	rjmp	.+2      	; 0x2b18 <xTimerCreateTimerTask+0x3a>
    2b16:	80 e0       	ldi	r24, 0x00	; 0
    2b18:	0f 91       	pop	r16
    2b1a:	ff 90       	pop	r15
    2b1c:	ef 90       	pop	r14
    2b1e:	08 95       	ret

00002b20 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2b20:	8f 92       	push	r8
    2b22:	9f 92       	push	r9
    2b24:	af 92       	push	r10
    2b26:	bf 92       	push	r11
    2b28:	cf 92       	push	r12
    2b2a:	df 92       	push	r13
    2b2c:	ef 92       	push	r14
    2b2e:	ff 92       	push	r15
    2b30:	0f 93       	push	r16
    2b32:	1f 93       	push	r17
    2b34:	cf 93       	push	r28
    2b36:	df 93       	push	r29
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	27 97       	sbiw	r28, 0x07	; 7
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	f8 94       	cli
    2b42:	de bf       	out	0x3e, r29	; 62
    2b44:	0f be       	out	0x3f, r0	; 63
    2b46:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2b48:	e0 91 6b 11 	lds	r30, 0x116B	; 0x80116b <xTimerQueue>
    2b4c:	f0 91 6c 11 	lds	r31, 0x116C	; 0x80116c <xTimerQueue+0x1>
    2b50:	30 97       	sbiw	r30, 0x00	; 0
    2b52:	81 f1       	breq	.+96     	; 0x2bb4 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2b54:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2b56:	2a 83       	std	Y+2, r18	; 0x02
    2b58:	3b 83       	std	Y+3, r19	; 0x03
    2b5a:	4c 83       	std	Y+4, r20	; 0x04
    2b5c:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2b5e:	9f 83       	std	Y+7, r25	; 0x07
    2b60:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2b62:	66 30       	cpi	r22, 0x06	; 6
    2b64:	f4 f4       	brge	.+60     	; 0x2ba2 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2b66:	ee db       	rcall	.-2084   	; 0x2344 <xTaskGetSchedulerState>
    2b68:	82 30       	cpi	r24, 0x02	; 2
    2b6a:	69 f4       	brne	.+26     	; 0x2b86 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2b6c:	00 e0       	ldi	r16, 0x00	; 0
    2b6e:	a7 01       	movw	r20, r14
    2b70:	96 01       	movw	r18, r12
    2b72:	be 01       	movw	r22, r28
    2b74:	6f 5f       	subi	r22, 0xFF	; 255
    2b76:	7f 4f       	sbci	r23, 0xFF	; 255
    2b78:	80 91 6b 11 	lds	r24, 0x116B	; 0x80116b <xTimerQueue>
    2b7c:	90 91 6c 11 	lds	r25, 0x116C	; 0x80116c <xTimerQueue+0x1>
    2b80:	0e 94 ca 05 	call	0xb94	; 0xb94 <xQueueGenericSend>
    2b84:	18 c0       	rjmp	.+48     	; 0x2bb6 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2b86:	00 e0       	ldi	r16, 0x00	; 0
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	a9 01       	movw	r20, r18
    2b8e:	be 01       	movw	r22, r28
    2b90:	6f 5f       	subi	r22, 0xFF	; 255
    2b92:	7f 4f       	sbci	r23, 0xFF	; 255
    2b94:	80 91 6b 11 	lds	r24, 0x116B	; 0x80116b <xTimerQueue>
    2b98:	90 91 6c 11 	lds	r25, 0x116C	; 0x80116c <xTimerQueue+0x1>
    2b9c:	0e 94 ca 05 	call	0xb94	; 0xb94 <xQueueGenericSend>
    2ba0:	0a c0       	rjmp	.+20     	; 0x2bb6 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	a8 01       	movw	r20, r16
    2ba6:	be 01       	movw	r22, r28
    2ba8:	6f 5f       	subi	r22, 0xFF	; 255
    2baa:	7f 4f       	sbci	r23, 0xFF	; 255
    2bac:	cf 01       	movw	r24, r30
    2bae:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <xQueueGenericSendFromISR>
    2bb2:	01 c0       	rjmp	.+2      	; 0x2bb6 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2bb6:	27 96       	adiw	r28, 0x07	; 7
    2bb8:	0f b6       	in	r0, 0x3f	; 63
    2bba:	f8 94       	cli
    2bbc:	de bf       	out	0x3e, r29	; 62
    2bbe:	0f be       	out	0x3f, r0	; 63
    2bc0:	cd bf       	out	0x3d, r28	; 61
    2bc2:	df 91       	pop	r29
    2bc4:	cf 91       	pop	r28
    2bc6:	1f 91       	pop	r17
    2bc8:	0f 91       	pop	r16
    2bca:	ff 90       	pop	r15
    2bcc:	ef 90       	pop	r14
    2bce:	df 90       	pop	r13
    2bd0:	cf 90       	pop	r12
    2bd2:	bf 90       	pop	r11
    2bd4:	af 90       	pop	r10
    2bd6:	9f 90       	pop	r9
    2bd8:	8f 90       	pop	r8
    2bda:	08 95       	ret

00002bdc <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2bdc:	8f 92       	push	r8
    2bde:	9f 92       	push	r9
    2be0:	af 92       	push	r10
    2be2:	bf 92       	push	r11
    2be4:	cf 92       	push	r12
    2be6:	df 92       	push	r13
    2be8:	ef 92       	push	r14
    2bea:	ff 92       	push	r15
    2bec:	0f 93       	push	r16
    2bee:	1f 93       	push	r17
    2bf0:	cf 93       	push	r28
    2bf2:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2bf4:	3b c0       	rjmp	.+118    	; 0x2c6c <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2bf6:	07 80       	ldd	r0, Z+7	; 0x07
    2bf8:	f0 85       	ldd	r31, Z+8	; 0x08
    2bfa:	e0 2d       	mov	r30, r0
    2bfc:	80 80       	ld	r8, Z
    2bfe:	91 80       	ldd	r9, Z+1	; 0x01
    2c00:	a2 80       	ldd	r10, Z+2	; 0x02
    2c02:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2c04:	c0 85       	ldd	r28, Z+8	; 0x08
    2c06:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2c08:	8e 01       	movw	r16, r28
    2c0a:	0e 5f       	subi	r16, 0xFE	; 254
    2c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c0e:	c8 01       	movw	r24, r16
    2c10:	0e 94 46 03 	call	0x68c	; 0x68c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2c14:	ec 89       	ldd	r30, Y+20	; 0x14
    2c16:	fd 89       	ldd	r31, Y+21	; 0x15
    2c18:	ce 01       	movw	r24, r28
    2c1a:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2c1c:	8e 89       	ldd	r24, Y+22	; 0x16
    2c1e:	82 ff       	sbrs	r24, 2
    2c20:	25 c0       	rjmp	.+74     	; 0x2c6c <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2c22:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c24:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c26:	a8 89       	ldd	r26, Y+16	; 0x10
    2c28:	b9 89       	ldd	r27, Y+17	; 0x11
    2c2a:	88 0d       	add	r24, r8
    2c2c:	99 1d       	adc	r25, r9
    2c2e:	aa 1d       	adc	r26, r10
    2c30:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2c32:	88 16       	cp	r8, r24
    2c34:	99 06       	cpc	r9, r25
    2c36:	aa 06       	cpc	r10, r26
    2c38:	bb 06       	cpc	r11, r27
    2c3a:	70 f4       	brcc	.+28     	; 0x2c58 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2c3c:	8a 83       	std	Y+2, r24	; 0x02
    2c3e:	9b 83       	std	Y+3, r25	; 0x03
    2c40:	ac 83       	std	Y+4, r26	; 0x04
    2c42:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2c44:	db 87       	std	Y+11, r29	; 0x0b
    2c46:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2c48:	b8 01       	movw	r22, r16
    2c4a:	80 91 6f 11 	lds	r24, 0x116F	; 0x80116f <pxCurrentTimerList>
    2c4e:	90 91 70 11 	lds	r25, 0x1170	; 0x801170 <pxCurrentTimerList+0x1>
    2c52:	0e 94 09 03 	call	0x612	; 0x612 <vListInsert>
    2c56:	0a c0       	rjmp	.+20     	; 0x2c6c <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2c58:	c1 2c       	mov	r12, r1
    2c5a:	d1 2c       	mov	r13, r1
    2c5c:	76 01       	movw	r14, r12
    2c5e:	00 e0       	ldi	r16, 0x00	; 0
    2c60:	10 e0       	ldi	r17, 0x00	; 0
    2c62:	a5 01       	movw	r20, r10
    2c64:	94 01       	movw	r18, r8
    2c66:	60 e0       	ldi	r22, 0x00	; 0
    2c68:	ce 01       	movw	r24, r28
    2c6a:	5a df       	rcall	.-332    	; 0x2b20 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2c6c:	e0 91 6f 11 	lds	r30, 0x116F	; 0x80116f <pxCurrentTimerList>
    2c70:	f0 91 70 11 	lds	r31, 0x1170	; 0x801170 <pxCurrentTimerList+0x1>
    2c74:	80 81       	ld	r24, Z
    2c76:	81 11       	cpse	r24, r1
    2c78:	be cf       	rjmp	.-132    	; 0x2bf6 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2c7a:	80 91 6d 11 	lds	r24, 0x116D	; 0x80116d <pxOverflowTimerList>
    2c7e:	90 91 6e 11 	lds	r25, 0x116E	; 0x80116e <pxOverflowTimerList+0x1>
    2c82:	90 93 70 11 	sts	0x1170, r25	; 0x801170 <pxCurrentTimerList+0x1>
    2c86:	80 93 6f 11 	sts	0x116F, r24	; 0x80116f <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2c8a:	f0 93 6e 11 	sts	0x116E, r31	; 0x80116e <pxOverflowTimerList+0x1>
    2c8e:	e0 93 6d 11 	sts	0x116D, r30	; 0x80116d <pxOverflowTimerList>
    }
    2c92:	df 91       	pop	r29
    2c94:	cf 91       	pop	r28
    2c96:	1f 91       	pop	r17
    2c98:	0f 91       	pop	r16
    2c9a:	ff 90       	pop	r15
    2c9c:	ef 90       	pop	r14
    2c9e:	df 90       	pop	r13
    2ca0:	cf 90       	pop	r12
    2ca2:	bf 90       	pop	r11
    2ca4:	af 90       	pop	r10
    2ca6:	9f 90       	pop	r9
    2ca8:	8f 90       	pop	r8
    2caa:	08 95       	ret

00002cac <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2cac:	cf 92       	push	r12
    2cae:	df 92       	push	r13
    2cb0:	ef 92       	push	r14
    2cb2:	ff 92       	push	r15
    2cb4:	cf 93       	push	r28
    2cb6:	df 93       	push	r29
    2cb8:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2cba:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <xTaskGetTickCount>
    2cbe:	6b 01       	movw	r12, r22
    2cc0:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2cc2:	80 91 65 11 	lds	r24, 0x1165	; 0x801165 <xLastTime.2436>
    2cc6:	90 91 66 11 	lds	r25, 0x1166	; 0x801166 <xLastTime.2436+0x1>
    2cca:	a0 91 67 11 	lds	r26, 0x1167	; 0x801167 <xLastTime.2436+0x2>
    2cce:	b0 91 68 11 	lds	r27, 0x1168	; 0x801168 <xLastTime.2436+0x3>
    2cd2:	c8 16       	cp	r12, r24
    2cd4:	d9 06       	cpc	r13, r25
    2cd6:	ea 06       	cpc	r14, r26
    2cd8:	fb 06       	cpc	r15, r27
    2cda:	20 f4       	brcc	.+8      	; 0x2ce4 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2cdc:	7f df       	rcall	.-258    	; 0x2bdc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	88 83       	st	Y, r24
    2ce2:	01 c0       	rjmp	.+2      	; 0x2ce6 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2ce4:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2ce6:	c0 92 65 11 	sts	0x1165, r12	; 0x801165 <xLastTime.2436>
    2cea:	d0 92 66 11 	sts	0x1166, r13	; 0x801166 <xLastTime.2436+0x1>
    2cee:	e0 92 67 11 	sts	0x1167, r14	; 0x801167 <xLastTime.2436+0x2>
    2cf2:	f0 92 68 11 	sts	0x1168, r15	; 0x801168 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2cf6:	c7 01       	movw	r24, r14
    2cf8:	b6 01       	movw	r22, r12
    2cfa:	df 91       	pop	r29
    2cfc:	cf 91       	pop	r28
    2cfe:	ff 90       	pop	r15
    2d00:	ef 90       	pop	r14
    2d02:	df 90       	pop	r13
    2d04:	cf 90       	pop	r12
    2d06:	08 95       	ret

00002d08 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2d08:	4f 92       	push	r4
    2d0a:	5f 92       	push	r5
    2d0c:	6f 92       	push	r6
    2d0e:	7f 92       	push	r7
    2d10:	8f 92       	push	r8
    2d12:	9f 92       	push	r9
    2d14:	af 92       	push	r10
    2d16:	bf 92       	push	r11
    2d18:	cf 92       	push	r12
    2d1a:	df 92       	push	r13
    2d1c:	ef 92       	push	r14
    2d1e:	ff 92       	push	r15
    2d20:	0f 93       	push	r16
    2d22:	1f 93       	push	r17
    2d24:	cf 93       	push	r28
    2d26:	df 93       	push	r29
    2d28:	4b 01       	movw	r8, r22
    2d2a:	5c 01       	movw	r10, r24
    2d2c:	29 01       	movw	r4, r18
    2d2e:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2d30:	e0 91 6f 11 	lds	r30, 0x116F	; 0x80116f <pxCurrentTimerList>
    2d34:	f0 91 70 11 	lds	r31, 0x1170	; 0x801170 <pxCurrentTimerList+0x1>
    2d38:	07 80       	ldd	r0, Z+7	; 0x07
    2d3a:	f0 85       	ldd	r31, Z+8	; 0x08
    2d3c:	e0 2d       	mov	r30, r0
    2d3e:	c0 85       	ldd	r28, Z+8	; 0x08
    2d40:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2d42:	ce 01       	movw	r24, r28
    2d44:	02 96       	adiw	r24, 0x02	; 2
    2d46:	0e 94 46 03 	call	0x68c	; 0x68c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2d4a:	8e 89       	ldd	r24, Y+22	; 0x16
    2d4c:	82 ff       	sbrs	r24, 2
    2d4e:	1b c0       	rjmp	.+54     	; 0x2d86 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2d50:	4e 85       	ldd	r20, Y+14	; 0x0e
    2d52:	5f 85       	ldd	r21, Y+15	; 0x0f
    2d54:	68 89       	ldd	r22, Y+16	; 0x10
    2d56:	79 89       	ldd	r23, Y+17	; 0x11
    2d58:	48 0d       	add	r20, r8
    2d5a:	59 1d       	adc	r21, r9
    2d5c:	6a 1d       	adc	r22, r10
    2d5e:	7b 1d       	adc	r23, r11
    2d60:	75 01       	movw	r14, r10
    2d62:	64 01       	movw	r12, r8
    2d64:	93 01       	movw	r18, r6
    2d66:	82 01       	movw	r16, r4
    2d68:	ce 01       	movw	r24, r28
    2d6a:	47 de       	rcall	.-882    	; 0x29fa <prvInsertTimerInActiveList>
    2d6c:	88 23       	and	r24, r24
    2d6e:	69 f0       	breq	.+26     	; 0x2d8a <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2d70:	c1 2c       	mov	r12, r1
    2d72:	d1 2c       	mov	r13, r1
    2d74:	76 01       	movw	r14, r12
    2d76:	00 e0       	ldi	r16, 0x00	; 0
    2d78:	10 e0       	ldi	r17, 0x00	; 0
    2d7a:	a5 01       	movw	r20, r10
    2d7c:	94 01       	movw	r18, r8
    2d7e:	60 e0       	ldi	r22, 0x00	; 0
    2d80:	ce 01       	movw	r24, r28
    2d82:	ce de       	rcall	.-612    	; 0x2b20 <xTimerGenericCommand>
    2d84:	02 c0       	rjmp	.+4      	; 0x2d8a <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2d86:	8e 7f       	andi	r24, 0xFE	; 254
    2d88:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2d8a:	ec 89       	ldd	r30, Y+20	; 0x14
    2d8c:	fd 89       	ldd	r31, Y+21	; 0x15
    2d8e:	ce 01       	movw	r24, r28
    2d90:	19 95       	eicall
    }
    2d92:	df 91       	pop	r29
    2d94:	cf 91       	pop	r28
    2d96:	1f 91       	pop	r17
    2d98:	0f 91       	pop	r16
    2d9a:	ff 90       	pop	r15
    2d9c:	ef 90       	pop	r14
    2d9e:	df 90       	pop	r13
    2da0:	cf 90       	pop	r12
    2da2:	bf 90       	pop	r11
    2da4:	af 90       	pop	r10
    2da6:	9f 90       	pop	r9
    2da8:	8f 90       	pop	r8
    2daa:	7f 90       	pop	r7
    2dac:	6f 90       	pop	r6
    2dae:	5f 90       	pop	r5
    2db0:	4f 90       	pop	r4
    2db2:	08 95       	ret

00002db4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2db4:	8f 92       	push	r8
    2db6:	9f 92       	push	r9
    2db8:	af 92       	push	r10
    2dba:	bf 92       	push	r11
    2dbc:	cf 92       	push	r12
    2dbe:	df 92       	push	r13
    2dc0:	ef 92       	push	r14
    2dc2:	ff 92       	push	r15
    2dc4:	1f 93       	push	r17
    2dc6:	cf 93       	push	r28
    2dc8:	df 93       	push	r29
    2dca:	1f 92       	push	r1
    2dcc:	cd b7       	in	r28, 0x3d	; 61
    2dce:	de b7       	in	r29, 0x3e	; 62
    2dd0:	6b 01       	movw	r12, r22
    2dd2:	7c 01       	movw	r14, r24
    2dd4:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2dd6:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2dda:	ce 01       	movw	r24, r28
    2ddc:	01 96       	adiw	r24, 0x01	; 1
    2dde:	66 df       	rcall	.-308    	; 0x2cac <prvSampleTimeNow>
    2de0:	4b 01       	movw	r8, r22
    2de2:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	81 11       	cpse	r24, r1
    2de8:	2d c0       	rjmp	.+90     	; 0x2e44 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2dea:	11 11       	cpse	r17, r1
    2dec:	0d c0       	rjmp	.+26     	; 0x2e08 <prvProcessTimerOrBlockTask+0x54>
    2dee:	8c 14       	cp	r8, r12
    2df0:	9d 04       	cpc	r9, r13
    2df2:	ae 04       	cpc	r10, r14
    2df4:	bf 04       	cpc	r11, r15
    2df6:	40 f0       	brcs	.+16     	; 0x2e08 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    2df8:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2dfc:	a5 01       	movw	r20, r10
    2dfe:	94 01       	movw	r18, r8
    2e00:	c7 01       	movw	r24, r14
    2e02:	b6 01       	movw	r22, r12
    2e04:	81 df       	rcall	.-254    	; 0x2d08 <prvProcessExpiredTimer>
    2e06:	20 c0       	rjmp	.+64     	; 0x2e48 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2e08:	11 23       	and	r17, r17
    2e0a:	41 f0       	breq	.+16     	; 0x2e1c <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2e0c:	e0 91 6d 11 	lds	r30, 0x116D	; 0x80116d <pxOverflowTimerList>
    2e10:	f0 91 6e 11 	lds	r31, 0x116E	; 0x80116e <pxOverflowTimerList+0x1>
    2e14:	80 81       	ld	r24, Z
    2e16:	11 e0       	ldi	r17, 0x01	; 1
    2e18:	81 11       	cpse	r24, r1
    2e1a:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2e1c:	b7 01       	movw	r22, r14
    2e1e:	a6 01       	movw	r20, r12
    2e20:	48 19       	sub	r20, r8
    2e22:	59 09       	sbc	r21, r9
    2e24:	6a 09       	sbc	r22, r10
    2e26:	7b 09       	sbc	r23, r11
    2e28:	21 2f       	mov	r18, r17
    2e2a:	80 91 6b 11 	lds	r24, 0x116B	; 0x80116b <xTimerQueue>
    2e2e:	90 91 6c 11 	lds	r25, 0x116C	; 0x80116c <xTimerQueue+0x1>
    2e32:	0e 94 24 07 	call	0xe48	; 0xe48 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2e36:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <xTaskResumeAll>
    2e3a:	81 11       	cpse	r24, r1
    2e3c:	05 c0       	rjmp	.+10     	; 0x2e48 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2e3e:	0e 94 c2 03 	call	0x784	; 0x784 <vPortYield>
    2e42:	02 c0       	rjmp	.+4      	; 0x2e48 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2e44:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <xTaskResumeAll>
            }
        }
    }
    2e48:	0f 90       	pop	r0
    2e4a:	df 91       	pop	r29
    2e4c:	cf 91       	pop	r28
    2e4e:	1f 91       	pop	r17
    2e50:	ff 90       	pop	r15
    2e52:	ef 90       	pop	r14
    2e54:	df 90       	pop	r13
    2e56:	cf 90       	pop	r12
    2e58:	bf 90       	pop	r11
    2e5a:	af 90       	pop	r10
    2e5c:	9f 90       	pop	r9
    2e5e:	8f 90       	pop	r8
    2e60:	08 95       	ret

00002e62 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2e62:	af 92       	push	r10
    2e64:	bf 92       	push	r11
    2e66:	cf 92       	push	r12
    2e68:	df 92       	push	r13
    2e6a:	ef 92       	push	r14
    2e6c:	ff 92       	push	r15
    2e6e:	0f 93       	push	r16
    2e70:	1f 93       	push	r17
    2e72:	cf 93       	push	r28
    2e74:	df 93       	push	r29
    2e76:	cd b7       	in	r28, 0x3d	; 61
    2e78:	de b7       	in	r29, 0x3e	; 62
    2e7a:	28 97       	sbiw	r28, 0x08	; 8
    2e7c:	0f b6       	in	r0, 0x3f	; 63
    2e7e:	f8 94       	cli
    2e80:	de bf       	out	0x3e, r29	; 62
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2e86:	82 c0       	rjmp	.+260    	; 0x2f8c <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2e88:	89 81       	ldd	r24, Y+1	; 0x01
    2e8a:	88 23       	and	r24, r24
    2e8c:	0c f4       	brge	.+2      	; 0x2e90 <prvProcessReceivedCommands+0x2e>
    2e8e:	7e c0       	rjmp	.+252    	; 0x2f8c <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2e90:	ae 80       	ldd	r10, Y+6	; 0x06
    2e92:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2e94:	d5 01       	movw	r26, r10
    2e96:	1c 96       	adiw	r26, 0x0c	; 12
    2e98:	8d 91       	ld	r24, X+
    2e9a:	9c 91       	ld	r25, X
    2e9c:	1d 97       	sbiw	r26, 0x0d	; 13
    2e9e:	89 2b       	or	r24, r25
    2ea0:	21 f0       	breq	.+8      	; 0x2eaa <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2ea2:	c5 01       	movw	r24, r10
    2ea4:	02 96       	adiw	r24, 0x02	; 2
    2ea6:	0e 94 46 03 	call	0x68c	; 0x68c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2eaa:	ce 01       	movw	r24, r28
    2eac:	08 96       	adiw	r24, 0x08	; 8
    2eae:	fe de       	rcall	.-516    	; 0x2cac <prvSampleTimeNow>
    2eb0:	8b 01       	movw	r16, r22
    2eb2:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    2eb4:	e9 81       	ldd	r30, Y+1	; 0x01
    2eb6:	0e 2e       	mov	r0, r30
    2eb8:	00 0c       	add	r0, r0
    2eba:	ff 0b       	sbc	r31, r31
    2ebc:	ea 30       	cpi	r30, 0x0A	; 10
    2ebe:	f1 05       	cpc	r31, r1
    2ec0:	08 f0       	brcs	.+2      	; 0x2ec4 <prvProcessReceivedCommands+0x62>
    2ec2:	64 c0       	rjmp	.+200    	; 0x2f8c <prvProcessReceivedCommands+0x12a>
    2ec4:	88 27       	eor	r24, r24
    2ec6:	ee 58       	subi	r30, 0x8E	; 142
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	8f 4f       	sbci	r24, 0xFF	; 255
    2ecc:	0c 94 15 2c 	jmp	0x582a	; 0x582a <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2ed0:	f5 01       	movw	r30, r10
    2ed2:	86 89       	ldd	r24, Z+22	; 0x16
    2ed4:	81 60       	ori	r24, 0x01	; 1
    2ed6:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2ed8:	ca 80       	ldd	r12, Y+2	; 0x02
    2eda:	db 80       	ldd	r13, Y+3	; 0x03
    2edc:	ec 80       	ldd	r14, Y+4	; 0x04
    2ede:	fd 80       	ldd	r15, Y+5	; 0x05
    2ee0:	46 85       	ldd	r20, Z+14	; 0x0e
    2ee2:	57 85       	ldd	r21, Z+15	; 0x0f
    2ee4:	60 89       	ldd	r22, Z+16	; 0x10
    2ee6:	71 89       	ldd	r23, Z+17	; 0x11
    2ee8:	4c 0d       	add	r20, r12
    2eea:	5d 1d       	adc	r21, r13
    2eec:	6e 1d       	adc	r22, r14
    2eee:	7f 1d       	adc	r23, r15
    2ef0:	c5 01       	movw	r24, r10
    2ef2:	83 dd       	rcall	.-1274   	; 0x29fa <prvInsertTimerInActiveList>
    2ef4:	88 23       	and	r24, r24
    2ef6:	09 f4       	brne	.+2      	; 0x2efa <prvProcessReceivedCommands+0x98>
    2ef8:	49 c0       	rjmp	.+146    	; 0x2f8c <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2efa:	d5 01       	movw	r26, r10
    2efc:	54 96       	adiw	r26, 0x14	; 20
    2efe:	ed 91       	ld	r30, X+
    2f00:	fc 91       	ld	r31, X
    2f02:	55 97       	sbiw	r26, 0x15	; 21
    2f04:	c5 01       	movw	r24, r10
    2f06:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2f08:	f5 01       	movw	r30, r10
    2f0a:	86 89       	ldd	r24, Z+22	; 0x16
    2f0c:	82 ff       	sbrs	r24, 2
    2f0e:	3e c0       	rjmp	.+124    	; 0x2f8c <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2f10:	4a 81       	ldd	r20, Y+2	; 0x02
    2f12:	5b 81       	ldd	r21, Y+3	; 0x03
    2f14:	6c 81       	ldd	r22, Y+4	; 0x04
    2f16:	7d 81       	ldd	r23, Y+5	; 0x05
    2f18:	86 85       	ldd	r24, Z+14	; 0x0e
    2f1a:	97 85       	ldd	r25, Z+15	; 0x0f
    2f1c:	a0 89       	ldd	r26, Z+16	; 0x10
    2f1e:	b1 89       	ldd	r27, Z+17	; 0x11
    2f20:	9a 01       	movw	r18, r20
    2f22:	ab 01       	movw	r20, r22
    2f24:	28 0f       	add	r18, r24
    2f26:	39 1f       	adc	r19, r25
    2f28:	4a 1f       	adc	r20, r26
    2f2a:	5b 1f       	adc	r21, r27
    2f2c:	c1 2c       	mov	r12, r1
    2f2e:	d1 2c       	mov	r13, r1
    2f30:	76 01       	movw	r14, r12
    2f32:	00 e0       	ldi	r16, 0x00	; 0
    2f34:	10 e0       	ldi	r17, 0x00	; 0
    2f36:	60 e0       	ldi	r22, 0x00	; 0
    2f38:	c5 01       	movw	r24, r10
    2f3a:	f2 dd       	rcall	.-1052   	; 0x2b20 <xTimerGenericCommand>
    2f3c:	27 c0       	rjmp	.+78     	; 0x2f8c <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2f3e:	d5 01       	movw	r26, r10
    2f40:	56 96       	adiw	r26, 0x16	; 22
    2f42:	8c 91       	ld	r24, X
    2f44:	56 97       	sbiw	r26, 0x16	; 22
    2f46:	8e 7f       	andi	r24, 0xFE	; 254
    2f48:	56 96       	adiw	r26, 0x16	; 22
    2f4a:	8c 93       	st	X, r24
                        break;
    2f4c:	1f c0       	rjmp	.+62     	; 0x2f8c <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2f4e:	f5 01       	movw	r30, r10
    2f50:	86 89       	ldd	r24, Z+22	; 0x16
    2f52:	81 60       	ori	r24, 0x01	; 1
    2f54:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2f56:	4a 81       	ldd	r20, Y+2	; 0x02
    2f58:	5b 81       	ldd	r21, Y+3	; 0x03
    2f5a:	6c 81       	ldd	r22, Y+4	; 0x04
    2f5c:	7d 81       	ldd	r23, Y+5	; 0x05
    2f5e:	46 87       	std	Z+14, r20	; 0x0e
    2f60:	57 87       	std	Z+15, r21	; 0x0f
    2f62:	60 8b       	std	Z+16, r22	; 0x10
    2f64:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2f66:	40 0f       	add	r20, r16
    2f68:	51 1f       	adc	r21, r17
    2f6a:	62 1f       	adc	r22, r18
    2f6c:	73 1f       	adc	r23, r19
    2f6e:	68 01       	movw	r12, r16
    2f70:	79 01       	movw	r14, r18
    2f72:	c5 01       	movw	r24, r10
    2f74:	42 dd       	rcall	.-1404   	; 0x29fa <prvInsertTimerInActiveList>
                        break;
    2f76:	0a c0       	rjmp	.+20     	; 0x2f8c <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2f78:	f5 01       	movw	r30, r10
    2f7a:	86 89       	ldd	r24, Z+22	; 0x16
    2f7c:	81 fd       	sbrc	r24, 1
    2f7e:	04 c0       	rjmp	.+8      	; 0x2f88 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    2f80:	c5 01       	movw	r24, r10
    2f82:	0e 94 b7 02 	call	0x56e	; 0x56e <vPortFree>
    2f86:	02 c0       	rjmp	.+4      	; 0x2f8c <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2f88:	8e 7f       	andi	r24, 0xFE	; 254
    2f8a:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	a9 01       	movw	r20, r18
    2f92:	be 01       	movw	r22, r28
    2f94:	6f 5f       	subi	r22, 0xFF	; 255
    2f96:	7f 4f       	sbci	r23, 0xFF	; 255
    2f98:	80 91 6b 11 	lds	r24, 0x116B	; 0x80116b <xTimerQueue>
    2f9c:	90 91 6c 11 	lds	r25, 0x116C	; 0x80116c <xTimerQueue+0x1>
    2fa0:	0e 94 95 06 	call	0xd2a	; 0xd2a <xQueueReceive>
    2fa4:	81 11       	cpse	r24, r1
    2fa6:	70 cf       	rjmp	.-288    	; 0x2e88 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2fa8:	28 96       	adiw	r28, 0x08	; 8
    2faa:	0f b6       	in	r0, 0x3f	; 63
    2fac:	f8 94       	cli
    2fae:	de bf       	out	0x3e, r29	; 62
    2fb0:	0f be       	out	0x3f, r0	; 63
    2fb2:	cd bf       	out	0x3d, r28	; 61
    2fb4:	df 91       	pop	r29
    2fb6:	cf 91       	pop	r28
    2fb8:	1f 91       	pop	r17
    2fba:	0f 91       	pop	r16
    2fbc:	ff 90       	pop	r15
    2fbe:	ef 90       	pop	r14
    2fc0:	df 90       	pop	r13
    2fc2:	cf 90       	pop	r12
    2fc4:	bf 90       	pop	r11
    2fc6:	af 90       	pop	r10
    2fc8:	08 95       	ret

00002fca <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2fca:	08 95       	ret

00002fcc <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2fcc:	84 b1       	in	r24, 0x04	; 4
    2fce:	80 68       	ori	r24, 0x80	; 128
    2fd0:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2fd2:	85 b1       	in	r24, 0x05	; 5
    2fd4:	80 68       	ori	r24, 0x80	; 128
    2fd6:	85 b9       	out	0x05, r24	; 5
    2fd8:	08 95       	ret

00002fda <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2fda:	83 b1       	in	r24, 0x03	; 3
    2fdc:	80 68       	ori	r24, 0x80	; 128
    2fde:	83 b9       	out	0x03, r24	; 3
    2fe0:	08 95       	ret

00002fe2 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2fe2:	f4 df       	rcall	.-24     	; 0x2fcc <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2fe4:	2f ef       	ldi	r18, 0xFF	; 255
    2fe6:	80 e7       	ldi	r24, 0x70	; 112
    2fe8:	92 e0       	ldi	r25, 0x02	; 2
    2fea:	21 50       	subi	r18, 0x01	; 1
    2fec:	80 40       	sbci	r24, 0x00	; 0
    2fee:	90 40       	sbci	r25, 0x00	; 0
    2ff0:	e1 f7       	brne	.-8      	; 0x2fea <vApplicationMallocFailedHook+0x8>
    2ff2:	00 c0       	rjmp	.+0      	; 0x2ff4 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2ff4:	00 00       	nop
    2ff6:	f1 df       	rcall	.-30     	; 0x2fda <prvBlinkMainLed>
    2ff8:	f5 cf       	rjmp	.-22     	; 0x2fe4 <vApplicationMallocFailedHook+0x2>

00002ffa <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2ffa:	e8 df       	rcall	.-48     	; 0x2fcc <prvSetMainLedOn>
    2ffc:	2f ef       	ldi	r18, 0xFF	; 255
    2ffe:	87 ea       	ldi	r24, 0xA7	; 167
    3000:	91 e6       	ldi	r25, 0x61	; 97
    3002:	21 50       	subi	r18, 0x01	; 1
    3004:	80 40       	sbci	r24, 0x00	; 0
    3006:	90 40       	sbci	r25, 0x00	; 0
    3008:	e1 f7       	brne	.-8      	; 0x3002 <vApplicationStackOverflowHook+0x8>
    300a:	00 c0       	rjmp	.+0      	; 0x300c <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    300c:	00 00       	nop
    300e:	e5 df       	rcall	.-54     	; 0x2fda <prvBlinkMainLed>
    3010:	f5 cf       	rjmp	.-22     	; 0x2ffc <vApplicationStackOverflowHook+0x2>

00003012 <hih820_handler_task>:
	,  hih8120_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  &x1Handle );
}

void hih820_handler_task(void *pvParameters)
{
    3012:	cf 93       	push	r28
    3014:	df 93       	push	r29
    3016:	00 d0       	rcall	.+0      	; 0x3018 <hih820_handler_task+0x6>
    3018:	1f 92       	push	r1
    301a:	cd b7       	in	r28, 0x3d	; 61
    301c:	de b7       	in	r29, 0x3e	; 62
	(void)pvParameters;
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    301e:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <xTaskGetTickCount>
    3022:	69 83       	std	Y+1, r22	; 0x01
    3024:	7a 83       	std	Y+2, r23	; 0x02
    3026:	8b 83       	std	Y+3, r24	; 0x03
    3028:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    302a:	48 ea       	ldi	r20, 0xA8	; 168
    302c:	58 e4       	ldi	r21, 0x48	; 72
    302e:	60 e0       	ldi	r22, 0x00	; 0
    3030:	70 e0       	ldi	r23, 0x00	; 0
    3032:	ce 01       	movw	r24, r28
    3034:	01 96       	adiw	r24, 0x01	; 1
    3036:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <xTaskDelayUntil>
		if ( HIH8120_OK == hih8120_initialise() ){
    303a:	54 d2       	rcall	.+1192   	; 0x34e4 <hih8120_initialise>
    303c:	81 11       	cpse	r24, r1
    303e:	27 c0       	rjmp	.+78     	; 0x308e <hih820_handler_task+0x7c>
			if(1 == hih8120_isReady()){
    3040:	79 d2       	rcall	.+1266   	; 0x3534 <hih8120_isReady>
    3042:	88 23       	and	r24, r24
    3044:	21 f1       	breq	.+72     	; 0x308e <hih820_handler_task+0x7c>
				if (HIH8120_OK == hih8120_wakeup())
    3046:	79 d2       	rcall	.+1266   	; 0x353a <hih8120_wakeup>
    3048:	81 11       	cpse	r24, r1
    304a:	21 c0       	rjmp	.+66     	; 0x308e <hih820_handler_task+0x7c>
    304c:	62 e3       	ldi	r22, 0x32	; 50
				{
					vTaskDelay(50);
    304e:	70 e0       	ldi	r23, 0x00	; 0
    3050:	80 e0       	ldi	r24, 0x00	; 0
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <vTaskDelay>
					if (HIH8120_OK == hih8120_measure())
    3058:	85 d2       	rcall	.+1290   	; 0x3564 <hih8120_measure>
    305a:	81 11       	cpse	r24, r1
    305c:	18 c0       	rjmp	.+48     	; 0x308e <hih820_handler_task+0x7c>
    305e:	61 e0       	ldi	r22, 0x01	; 1
					{
						vTaskDelay(1);
    3060:	70 e0       	ldi	r23, 0x00	; 0
    3062:	80 e0       	ldi	r24, 0x00	; 0
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <vTaskDelay>
						humidity = hih8120_getHumidity();
    306a:	8d d2       	rcall	.+1306   	; 0x3586 <hih8120_getHumidity>
    306c:	60 93 8d 11 	sts	0x118D, r22	; 0x80118d <humidity>
    3070:	70 93 8e 11 	sts	0x118E, r23	; 0x80118e <humidity+0x1>
    3074:	80 93 8f 11 	sts	0x118F, r24	; 0x80118f <humidity+0x2>
    3078:	90 93 90 11 	sts	0x1190, r25	; 0x801190 <humidity+0x3>
						temperature = hih8120_getTemperature();
    307c:	a3 d2       	rcall	.+1350   	; 0x35c4 <hih8120_getTemperature>
    307e:	60 93 89 11 	sts	0x1189, r22	; 0x801189 <temperature>
    3082:	70 93 8a 11 	sts	0x118A, r23	; 0x80118a <temperature+0x1>
    3086:	80 93 8b 11 	sts	0x118B, r24	; 0x80118b <temperature+0x2>
    308a:	90 93 8c 11 	sts	0x118C, r25	; 0x80118c <temperature+0x3>
					}
				}
			}
		}
		if(HIH8120_OK == hih8120_destroy()){
    308e:	42 d2       	rcall	.+1156   	; 0x3514 <hih8120_destroy>
    3090:	81 11       	cpse	r24, r1
    3092:	06 c0       	rjmp	.+12     	; 0x30a0 <hih820_handler_task+0x8e>
    3094:	1f 92       	push	r1
			printf(HIH8120_OK);
    3096:	1f 92       	push	r1
    3098:	0e 94 e5 2e 	call	0x5dca	; 0x5dca <printf>
    309c:	0f 90       	pop	r0
    309e:	0f 90       	pop	r0
		}
		printf(HIH8120_DRIVER_NOT_INITIALISED);
    30a0:	1f 92       	push	r1
    30a2:	82 e0       	ldi	r24, 0x02	; 2
    30a4:	8f 93       	push	r24
    30a6:	0e 94 e5 2e 	call	0x5dca	; 0x5dca <printf>
		if ( HIH8120_OK != hih8120_initialise() )
    30aa:	1c d2       	rcall	.+1080   	; 0x34e4 <hih8120_initialise>
    30ac:	0f 90       	pop	r0
    30ae:	0f 90       	pop	r0
    30b0:	88 23       	and	r24, r24
    30b2:	09 f4       	brne	.+2      	; 0x30b6 <hih820_handler_task+0xa4>
    30b4:	ba cf       	rjmp	.-140    	; 0x302a <hih820_handler_task+0x18>
    30b6:	1f 92       	push	r1
		{
			printf(HIH8120_OUT_OF_HEAP);
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	8f 93       	push	r24
    30bc:	0e 94 e5 2e 	call	0x5dca	; 0x5dca <printf>
    30c0:	0f 90       	pop	r0
    30c2:	0f 90       	pop	r0
    30c4:	b2 cf       	rjmp	.-156    	; 0x302a <hih820_handler_task+0x18>

000030c6 <hih8120_handler_initialise>:
    30c6:	ef 92       	push	r14
TaskHandle_t x1Handle = NULL;
static char _out_buf[100];

void hih820_handler_task( void *pvParameters );

void hih8120_handler_initialise(UBaseType_t hih8120_task_priority){
    30c8:	ff 92       	push	r15
    30ca:	0f 93       	push	r16
	xTaskCreate(
    30cc:	0f 2e       	mov	r0, r31
    30ce:	f7 e8       	ldi	r31, 0x87	; 135
    30d0:	ef 2e       	mov	r14, r31
    30d2:	f1 e1       	ldi	r31, 0x11	; 17
    30d4:	ff 2e       	mov	r15, r31
    30d6:	f0 2d       	mov	r31, r0
    30d8:	08 2f       	mov	r16, r24
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	40 ec       	ldi	r20, 0xC0	; 192
    30e0:	50 e0       	ldi	r21, 0x00	; 0
    30e2:	6f e4       	ldi	r22, 0x4F	; 79
    30e4:	72 e0       	ldi	r23, 0x02	; 2
    30e6:	89 e0       	ldi	r24, 0x09	; 9
    30e8:	98 e1       	ldi	r25, 0x18	; 24
    30ea:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <xTaskCreate>
	,  "Hih820Hand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  hih8120_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  &x1Handle );
}
    30ee:	0f 91       	pop	r16
    30f0:	ff 90       	pop	r15
    30f2:	ef 90       	pop	r14
    30f4:	08 95       	ret

000030f6 <main>:
#include "Application.h"

/*-----------------------------------------------------------*/
int main(void)
{
	Application_initialiseSystem(); // Must be done as the very first thing!!
    30f6:	0e 94 89 01 	call	0x312	; 0x312 <Application_initialiseSystem>
	printf("Program Started!!\n");
    30fa:	8a e5       	ldi	r24, 0x5A	; 90
    30fc:	92 e0       	ldi	r25, 0x02	; 2
    30fe:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <puts>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    3102:	0e 94 cb 0c 	call	0x1996	; 0x1996 <vTaskStartScheduler>
    3106:	ff cf       	rjmp	.-2      	; 0x3106 <main+0x10>

00003108 <SensorDataPackageHandler_getLoRaPayload>:

void SensorDataPackageHandler_SetCO2(uint16_t co2){
	co2_ppmIn16 = co2;
}

lora_driver_payload_t SensorDataPackageHandler_getLoRaPayload(){
    3108:	cf 93       	push	r28
    310a:	df 93       	push	r29
    310c:	ec 01       	movw	r28, r24
	humIn16 = hih8120_getHumidityPercent_x10();
    310e:	50 d2       	rcall	.+1184   	; 0x35b0 <hih8120_getHumidityPercent_x10>
    3110:	90 93 ac 11 	sts	0x11AC, r25	; 0x8011ac <humIn16+0x1>
    3114:	80 93 ab 11 	sts	0x11AB, r24	; 0x8011ab <humIn16>
	tempIn16 = hih8120_getTemperature_x10();
    3118:	70 d2       	rcall	.+1248   	; 0x35fa <hih8120_getTemperature_x10>
    311a:	90 93 aa 11 	sts	0x11AA, r25	; 0x8011aa <tempIn16+0x1>
    311e:	80 93 a9 11 	sts	0x11A9, r24	; 0x8011a9 <tempIn16>
    3122:	8c e6       	ldi	r24, 0x6C	; 108
	
	printf("STARTED");
    3124:	92 e0       	ldi	r25, 0x02	; 2
    3126:	9f 93       	push	r25
    3128:	8f 93       	push	r24
    312a:	0e 94 e5 2e 	call	0x5dca	; 0x5dca <printf>
    312e:	80 91 ac 11 	lds	r24, 0x11AC	; 0x8011ac <humIn16+0x1>
	printf("and this is the changed hum %u\n", humIn16);
    3132:	8f 93       	push	r24
    3134:	80 91 ab 11 	lds	r24, 0x11AB	; 0x8011ab <humIn16>
    3138:	8f 93       	push	r24
    313a:	84 e7       	ldi	r24, 0x74	; 116
    313c:	92 e0       	ldi	r25, 0x02	; 2
    313e:	9f 93       	push	r25
    3140:	8f 93       	push	r24
    3142:	0e 94 e5 2e 	call	0x5dca	; 0x5dca <printf>
    3146:	80 91 aa 11 	lds	r24, 0x11AA	; 0x8011aa <tempIn16+0x1>
	printf("and also the changed temp %u\n", tempIn16);
    314a:	8f 93       	push	r24
    314c:	80 91 a9 11 	lds	r24, 0x11A9	; 0x8011a9 <tempIn16>
    3150:	8f 93       	push	r24
    3152:	84 e9       	ldi	r24, 0x94	; 148
    3154:	92 e0       	ldi	r25, 0x02	; 2
    3156:	9f 93       	push	r25
    3158:	8f 93       	push	r24
    315a:	0e 94 e5 2e 	call	0x5dca	; 0x5dca <printf>
    315e:	e1 e9       	ldi	r30, 0x91	; 145
	
	_uplink_payload.len = 6;
    3160:	f1 e1       	ldi	r31, 0x11	; 17
    3162:	86 e0       	ldi	r24, 0x06	; 6
    3164:	81 83       	std	Z+1, r24	; 0x01
    3166:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    3168:	80 83       	st	Z, r24
    316a:	80 91 ab 11 	lds	r24, 0x11AB	; 0x8011ab <humIn16>
	_uplink_payload.bytes[0] = humIn16 >> 8;
    316e:	90 91 ac 11 	lds	r25, 0x11AC	; 0x8011ac <humIn16+0x1>
    3172:	92 83       	std	Z+2, r25	; 0x02
    3174:	83 83       	std	Z+3, r24	; 0x03
	_uplink_payload.bytes[1] = humIn16 & 0xFF;
    3176:	80 91 a9 11 	lds	r24, 0x11A9	; 0x8011a9 <tempIn16>
	_uplink_payload.bytes[2] = tempIn16 >> 8;
    317a:	90 91 aa 11 	lds	r25, 0x11AA	; 0x8011aa <tempIn16+0x1>
    317e:	94 83       	std	Z+4, r25	; 0x04
    3180:	85 83       	std	Z+5, r24	; 0x05
	_uplink_payload.bytes[3] = tempIn16 & 0xFF;
    3182:	80 91 a7 11 	lds	r24, 0x11A7	; 0x8011a7 <co2_ppmIn16>
	_uplink_payload.bytes[4] = co2_ppmIn16 >> 8;
    3186:	90 91 a8 11 	lds	r25, 0x11A8	; 0x8011a8 <co2_ppmIn16+0x1>
    318a:	96 83       	std	Z+6, r25	; 0x06
    318c:	87 83       	std	Z+7, r24	; 0x07
	_uplink_payload.bytes[5] = co2_ppmIn16 & 0xFF;
    318e:	86 e1       	ldi	r24, 0x16	; 22
	return _uplink_payload;
    3190:	de 01       	movw	r26, r28
    3192:	01 90       	ld	r0, Z+
    3194:	0d 92       	st	X+, r0
    3196:	8a 95       	dec	r24
    3198:	e1 f7       	brne	.-8      	; 0x3192 <SensorDataPackageHandler_getLoRaPayload+0x8a>
    319a:	8d b7       	in	r24, 0x3d	; 61
    319c:	9e b7       	in	r25, 0x3e	; 62
    319e:	0a 96       	adiw	r24, 0x0a	; 10
    31a0:	0f b6       	in	r0, 0x3f	; 63
    31a2:	f8 94       	cli
    31a4:	9e bf       	out	0x3e, r25	; 62
    31a6:	0f be       	out	0x3f, r0	; 63
    31a8:	8d bf       	out	0x3d, r24	; 61
    31aa:	ce 01       	movw	r24, r28
    31ac:	df 91       	pop	r29
    31ae:	cf 91       	pop	r28
    31b0:	08 95       	ret

000031b2 <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    31b2:	cf 93       	push	r28
    31b4:	df 93       	push	r29
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    31b6:	81 e0       	ldi	r24, 0x01	; 1
    31b8:	0e 94 80 24 	call	0x4900	; 0x4900 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    31bc:	96 d3       	rcall	.+1836   	; 0x38ea <lora_driver_rn2483FactoryReset>
    31be:	12 d6       	rcall	.+3108   	; 0x3de4 <lora_driver_mapReturnCodeToText>
    31c0:	9f 93       	push	r25
    31c2:	8f 93       	push	r24
    31c4:	82 eb       	ldi	r24, 0xB2	; 178
    31c6:	92 e0       	ldi	r25, 0x02	; 2
    31c8:	9f 93       	push	r25
    31ca:	8f 93       	push	r24
    31cc:	0e 94 e5 2e 	call	0x5dca	; 0x5dca <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    31d0:	0a d5       	rcall	.+2580   	; 0x3be6 <lora_driver_configureToEu868>
    31d2:	08 d6       	rcall	.+3088   	; 0x3de4 <lora_driver_mapReturnCodeToText>
    31d4:	9f 93       	push	r25
    31d6:	8f 93       	push	r24
    31d8:	85 ec       	ldi	r24, 0xC5	; 197
    31da:	92 e0       	ldi	r25, 0x02	; 2
    31dc:	9f 93       	push	r25
    31de:	8f 93       	push	r24
    31e0:	0e 94 e5 2e 	call	0x5dca	; 0x5dca <printf>
    31e4:	83 ec       	ldi	r24, 0xC3	; 195

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    31e6:	91 e1       	ldi	r25, 0x11	; 17
    31e8:	92 d3       	rcall	.+1828   	; 0x390e <lora_driver_getRn2483Hweui>
    31ea:	fc d5       	rcall	.+3064   	; 0x3de4 <lora_driver_mapReturnCodeToText>
    31ec:	c3 ec       	ldi	r28, 0xC3	; 195
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    31ee:	d1 e1       	ldi	r29, 0x11	; 17
    31f0:	df 93       	push	r29
    31f2:	cf 93       	push	r28
    31f4:	9f 93       	push	r25
    31f6:	8f 93       	push	r24
    31f8:	8e ed       	ldi	r24, 0xDE	; 222
    31fa:	92 e0       	ldi	r25, 0x02	; 2
    31fc:	9f 93       	push	r25
    31fe:	8f 93       	push	r24
    3200:	0e 94 e5 2e 	call	0x5dca	; 0x5dca <printf>
    3204:	ce 01       	movw	r24, r28

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3206:	9f d3       	rcall	.+1854   	; 0x3946 <lora_driver_setDeviceIdentifier>
    3208:	ed d5       	rcall	.+3034   	; 0x3de4 <lora_driver_mapReturnCodeToText>
    320a:	9f 93       	push	r25
    320c:	8f 93       	push	r24
    320e:	df 93       	push	r29
    3210:	cf 93       	push	r28
    3212:	82 ef       	ldi	r24, 0xF2	; 242
    3214:	92 e0       	ldi	r25, 0x02	; 2
    3216:	9f 93       	push	r25
    3218:	8f 93       	push	r24
    321a:	0e 94 e5 2e 	call	0x5dca	; 0x5dca <printf>
    321e:	ae 01       	movw	r20, r28

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3220:	67 e0       	ldi	r22, 0x07	; 7
    3222:	73 e0       	ldi	r23, 0x03	; 3
    3224:	88 e2       	ldi	r24, 0x28	; 40
    3226:	93 e0       	ldi	r25, 0x03	; 3
    3228:	bc d5       	rcall	.+2936   	; 0x3da2 <lora_driver_setOtaaIdentity>
    322a:	dc d5       	rcall	.+3000   	; 0x3de4 <lora_driver_mapReturnCodeToText>
    322c:	9f 93       	push	r25
    322e:	8f 93       	push	r24
    3230:	df 93       	push	r29
    3232:	cf 93       	push	r28
    3234:	87 e0       	ldi	r24, 0x07	; 7
    3236:	93 e0       	ldi	r25, 0x03	; 3
    3238:	9f 93       	push	r25
    323a:	8f 93       	push	r24
    323c:	88 e2       	ldi	r24, 0x28	; 40
    323e:	93 e0       	ldi	r25, 0x03	; 3
    3240:	9f 93       	push	r25
    3242:	8f 93       	push	r24
    3244:	89 e3       	ldi	r24, 0x39	; 57
    3246:	93 e0       	ldi	r25, 0x03	; 3
    3248:	9f 93       	push	r25
    324a:	8f 93       	push	r24
    324c:	0e 94 e5 2e 	call	0x5dca	; 0x5dca <printf>
    3250:	ad d3       	rcall	.+1882   	; 0x39ac <lora_driver_saveMac>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3252:	c8 d5       	rcall	.+2960   	; 0x3de4 <lora_driver_mapReturnCodeToText>
    3254:	9f 93       	push	r25
    3256:	8f 93       	push	r24
    3258:	8f e6       	ldi	r24, 0x6F	; 111
    325a:	93 e0       	ldi	r25, 0x03	; 3
    325c:	9f 93       	push	r25
    325e:	8f 93       	push	r24
    3260:	0e 94 e5 2e 	call	0x5dca	; 0x5dca <printf>
    3264:	8d b7       	in	r24, 0x3d	; 61

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3266:	9e b7       	in	r25, 0x3e	; 62
    3268:	82 96       	adiw	r24, 0x22	; 34
    326a:	0f b6       	in	r0, 0x3f	; 63
    326c:	f8 94       	cli
    326e:	9e bf       	out	0x3e, r25	; 62
    3270:	0f be       	out	0x3f, r0	; 63
    3272:	8d bf       	out	0x3d, r24	; 61
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	94 d4       	rcall	.+2344   	; 0x3ba0 <lora_driver_setAdaptiveDataRate>
    3278:	b5 d5       	rcall	.+2922   	; 0x3de4 <lora_driver_mapReturnCodeToText>
    327a:	9f 93       	push	r25
    327c:	8f 93       	push	r24
    327e:	8e e7       	ldi	r24, 0x7E	; 126
    3280:	93 e0       	ldi	r25, 0x03	; 3
    3282:	9f 93       	push	r25
    3284:	8f 93       	push	r24
    3286:	0e 94 e5 2e 	call	0x5dca	; 0x5dca <printf>
    328a:	84 ef       	ldi	r24, 0xF4	; 244

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    328c:	91 e0       	ldi	r25, 0x01	; 1
    328e:	93 d4       	rcall	.+2342   	; 0x3bb6 <lora_driver_setReceiveDelay>
    3290:	a9 d5       	rcall	.+2898   	; 0x3de4 <lora_driver_mapReturnCodeToText>
    3292:	9f 93       	push	r25
    3294:	8f 93       	push	r24
    3296:	81 e0       	ldi	r24, 0x01	; 1
    3298:	8f 93       	push	r24
    329a:	84 ef       	ldi	r24, 0xF4	; 244
    329c:	8f 93       	push	r24
    329e:	8f e9       	ldi	r24, 0x9F	; 159
    32a0:	93 e0       	ldi	r25, 0x03	; 3
    32a2:	9f 93       	push	r25
    32a4:	8f 93       	push	r24
    32a6:	0e 94 e5 2e 	call	0x5dca	; 0x5dca <printf>
    32aa:	8d b7       	in	r24, 0x3d	; 61
    32ac:	9e b7       	in	r25, 0x3e	; 62
    32ae:	0a 96       	adiw	r24, 0x0a	; 10
    32b0:	0f b6       	in	r0, 0x3f	; 63
    32b2:	f8 94       	cli
    32b4:	9e bf       	out	0x3e, r25	; 62
    32b6:	0f be       	out	0x3f, r0	; 63
    32b8:	8d bf       	out	0x3d, r24	; 61
    32ba:	ca e0       	ldi	r28, 0x0A	; 10

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    32bc:	80 e0       	ldi	r24, 0x00	; 0
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    32be:	7c d3       	rcall	.+1784   	; 0x39b8 <lora_driver_join>
    32c0:	d8 2f       	mov	r29, r24
    32c2:	90 d5       	rcall	.+2848   	; 0x3de4 <lora_driver_mapReturnCodeToText>
    32c4:	9f 93       	push	r25
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    32c6:	8f 93       	push	r24
    32c8:	1f 92       	push	r1
    32ca:	cf 93       	push	r28
    32cc:	8f eb       	ldi	r24, 0xBF	; 191
    32ce:	93 e0       	ldi	r25, 0x03	; 3
    32d0:	9f 93       	push	r25
    32d2:	8f 93       	push	r24
    32d4:	0e 94 e5 2e 	call	0x5dca	; 0x5dca <printf>
    32d8:	0f 90       	pop	r0
    32da:	0f 90       	pop	r0
    32dc:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    32de:	0f 90       	pop	r0
    32e0:	0f 90       	pop	r0
    32e2:	0f 90       	pop	r0
    32e4:	d8 30       	cpi	r29, 0x08	; 8
    32e6:	59 f0       	breq	.+22     	; 0x32fe <_lora_setup+0x14c>
    32e8:	80 e0       	ldi	r24, 0x00	; 0
    32ea:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    32ee:	66 e3       	ldi	r22, 0x36	; 54
    32f0:	71 e0       	ldi	r23, 0x01	; 1
    32f2:	80 e0       	ldi	r24, 0x00	; 0
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <vTaskDelay>
    32fa:	c1 50       	subi	r28, 0x01	; 1
    32fc:	f9 f6       	brne	.-66     	; 0x32bc <_lora_setup+0x10a>
    32fe:	d8 30       	cpi	r29, 0x08	; 8
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3300:	21 f4       	brne	.+8      	; 0x330a <_lora_setup+0x158>
    3302:	81 e0       	ldi	r24, 0x01	; 1

	if (rc == LORA_ACCEPTED)
    3304:	0e 94 c6 24 	call	0x498c	; 0x498c <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3308:	09 c0       	rjmp	.+18     	; 0x331c <_lora_setup+0x16a>
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	0e 94 d5 24 	call	0x49aa	; 0x49aa <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3310:	80 e0       	ldi	r24, 0x00	; 0
    3312:	0e 94 a3 24 	call	0x4946	; 0x4946 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3316:	0e 94 c2 03 	call	0x784	; 0x784 <vPortYield>
    331a:	fd cf       	rjmp	.-6      	; 0x3316 <_lora_setup+0x164>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    331c:	df 91       	pop	r29
    331e:	cf 91       	pop	r28
    3320:	08 95       	ret

00003322 <lora_handler_task>:
		}
	}
}
    3322:	cf 93       	push	r28
    3324:	df 93       	push	r29
    3326:	cd b7       	in	r28, 0x3d	; 61

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    3328:	de b7       	in	r29, 0x3e	; 62
    332a:	6a 97       	sbiw	r28, 0x1a	; 26
    332c:	0f b6       	in	r0, 0x3f	; 63
    332e:	f8 94       	cli
    3330:	de bf       	out	0x3e, r29	; 62
    3332:	0f be       	out	0x3f, r0	; 63
    3334:	cd bf       	out	0x3d, r28	; 61
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	ca d2       	rcall	.+1428   	; 0x38ce <lora_driver_resetRn2483>
	vTaskDelay(2);
    333a:	62 e0       	ldi	r22, 0x02	; 2
    333c:	70 e0       	ldi	r23, 0x00	; 0
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <vTaskDelay>
	lora_driver_resetRn2483(0);
    3346:	80 e0       	ldi	r24, 0x00	; 0
    3348:	c2 d2       	rcall	.+1412   	; 0x38ce <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    334a:	66 e9       	ldi	r22, 0x96	; 150
    334c:	70 e0       	ldi	r23, 0x00	; 0
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3356:	74 d2       	rcall	.+1256   	; 0x3840 <lora_driver_flushBuffers>

	_lora_setup();
    3358:	2c df       	rcall	.-424    	; 0x31b2 <_lora_setup>
    335a:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <xTaskGetTickCount>


	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    335e:	69 83       	std	Y+1, r22	; 0x01
    3360:	7a 83       	std	Y+2, r23	; 0x02
    3362:	8b 83       	std	Y+3, r24	; 0x03
    3364:	9c 83       	std	Y+4, r25	; 0x04
    3366:	48 ea       	ldi	r20, 0xA8	; 168
	
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3368:	58 e4       	ldi	r21, 0x48	; 72
    336a:	60 e0       	ldi	r22, 0x00	; 0
    336c:	70 e0       	ldi	r23, 0x00	; 0
    336e:	ce 01       	movw	r24, r28
    3370:	01 96       	adiw	r24, 0x01	; 1
    3372:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <xTaskDelayUntil>

		_uplink_payload = SensorDataPackageHandler_getLoRaPayload();
    3376:	ce 01       	movw	r24, r28
    3378:	05 96       	adiw	r24, 0x05	; 5
    337a:	c6 de       	rcall	.-628    	; 0x3108 <SensorDataPackageHandler_getLoRaPayload>
    337c:	86 e1       	ldi	r24, 0x16	; 22
    337e:	fe 01       	movw	r30, r28
    3380:	35 96       	adiw	r30, 0x05	; 5
    3382:	ad ea       	ldi	r26, 0xAD	; 173
    3384:	b1 e1       	ldi	r27, 0x11	; 17
    3386:	01 90       	ld	r0, Z+
    3388:	0d 92       	st	X+, r0
    338a:	8a 95       	dec	r24
    338c:	e1 f7       	brne	.-8      	; 0x3386 <lora_handler_task+0x64>
    338e:	83 e0       	ldi	r24, 0x03	; 3
		status_leds_shortPuls(led_ST4);  // OPTIONAL
    3390:	0e 94 f6 24 	call	0x49ec	; 0x49ec <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3394:	6d ea       	ldi	r22, 0xAD	; 173
    3396:	71 e1       	ldi	r23, 0x11	; 17
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	37 d3       	rcall	.+1646   	; 0x3a0a <lora_driver_sendUploadMessage>
    339c:	23 d5       	rcall	.+2630   	; 0x3de4 <lora_driver_mapReturnCodeToText>
    339e:	9f 93       	push	r25
    33a0:	8f 93       	push	r24
    33a2:	8f ed       	ldi	r24, 0xDF	; 223
    33a4:	93 e0       	ldi	r25, 0x03	; 3
    33a6:	9f 93       	push	r25
    33a8:	8f 93       	push	r24
    33aa:	0e 94 e5 2e 	call	0x5dca	; 0x5dca <printf>
    33ae:	0f 90       	pop	r0
    33b0:	0f 90       	pop	r0
    33b2:	0f 90       	pop	r0
    33b4:	0f 90       	pop	r0
    33b6:	d7 cf       	rjmp	.-82     	; 0x3366 <lora_handler_task+0x44>

000033b8 <lora_handler_initialise>:
    33b8:	ef 92       	push	r14
    33ba:	ff 92       	push	r15

static lora_driver_payload_t _uplink_payload;


void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    33bc:	0f 93       	push	r16
	xTaskCreate(
    33be:	e1 2c       	mov	r14, r1
    33c0:	f1 2c       	mov	r15, r1
    33c2:	08 2f       	mov	r16, r24
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	48 e8       	ldi	r20, 0x88	; 136
    33ca:	51 e0       	ldi	r21, 0x01	; 1
    33cc:	64 ef       	ldi	r22, 0xF4	; 244
    33ce:	73 e0       	ldi	r23, 0x03	; 3
    33d0:	81 e9       	ldi	r24, 0x91	; 145
    33d2:	99 e1       	ldi	r25, 0x19	; 25
    33d4:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    33d8:	0f 91       	pop	r16
    33da:	ff 90       	pop	r15
    33dc:	ef 90       	pop	r14
    33de:	08 95       	ret

000033e0 <__fixunssfsi>:
    33e0:	33 d0       	rcall	.+102    	; 0x3448 <__fp_splitA>
    33e2:	88 f0       	brcs	.+34     	; 0x3406 <__fixunssfsi+0x26>
    33e4:	9f 57       	subi	r25, 0x7F	; 127
    33e6:	90 f0       	brcs	.+36     	; 0x340c <__fixunssfsi+0x2c>
    33e8:	b9 2f       	mov	r27, r25
    33ea:	99 27       	eor	r25, r25
    33ec:	b7 51       	subi	r27, 0x17	; 23
    33ee:	a0 f0       	brcs	.+40     	; 0x3418 <__fixunssfsi+0x38>
    33f0:	d1 f0       	breq	.+52     	; 0x3426 <__fixunssfsi+0x46>
    33f2:	66 0f       	add	r22, r22
    33f4:	77 1f       	adc	r23, r23
    33f6:	88 1f       	adc	r24, r24
    33f8:	99 1f       	adc	r25, r25
    33fa:	1a f0       	brmi	.+6      	; 0x3402 <__fixunssfsi+0x22>
    33fc:	ba 95       	dec	r27
    33fe:	c9 f7       	brne	.-14     	; 0x33f2 <__fixunssfsi+0x12>
    3400:	12 c0       	rjmp	.+36     	; 0x3426 <__fixunssfsi+0x46>
    3402:	b1 30       	cpi	r27, 0x01	; 1
    3404:	81 f0       	breq	.+32     	; 0x3426 <__fixunssfsi+0x46>
    3406:	3a d0       	rcall	.+116    	; 0x347c <__fp_zero>
    3408:	b1 e0       	ldi	r27, 0x01	; 1
    340a:	08 95       	ret
    340c:	37 c0       	rjmp	.+110    	; 0x347c <__fp_zero>
    340e:	67 2f       	mov	r22, r23
    3410:	78 2f       	mov	r23, r24
    3412:	88 27       	eor	r24, r24
    3414:	b8 5f       	subi	r27, 0xF8	; 248
    3416:	39 f0       	breq	.+14     	; 0x3426 <__fixunssfsi+0x46>
    3418:	b9 3f       	cpi	r27, 0xF9	; 249
    341a:	cc f3       	brlt	.-14     	; 0x340e <__fixunssfsi+0x2e>
    341c:	86 95       	lsr	r24
    341e:	77 95       	ror	r23
    3420:	67 95       	ror	r22
    3422:	b3 95       	inc	r27
    3424:	d9 f7       	brne	.-10     	; 0x341c <__fixunssfsi+0x3c>
    3426:	3e f4       	brtc	.+14     	; 0x3436 <__fixunssfsi+0x56>
    3428:	90 95       	com	r25
    342a:	80 95       	com	r24
    342c:	70 95       	com	r23
    342e:	61 95       	neg	r22
    3430:	7f 4f       	sbci	r23, 0xFF	; 255
    3432:	8f 4f       	sbci	r24, 0xFF	; 255
    3434:	9f 4f       	sbci	r25, 0xFF	; 255
    3436:	08 95       	ret

00003438 <__fp_split3>:
    3438:	57 fd       	sbrc	r21, 7
    343a:	90 58       	subi	r25, 0x80	; 128
    343c:	44 0f       	add	r20, r20
    343e:	55 1f       	adc	r21, r21
    3440:	59 f0       	breq	.+22     	; 0x3458 <__fp_splitA+0x10>
    3442:	5f 3f       	cpi	r21, 0xFF	; 255
    3444:	71 f0       	breq	.+28     	; 0x3462 <__fp_splitA+0x1a>
    3446:	47 95       	ror	r20

00003448 <__fp_splitA>:
    3448:	88 0f       	add	r24, r24
    344a:	97 fb       	bst	r25, 7
    344c:	99 1f       	adc	r25, r25
    344e:	61 f0       	breq	.+24     	; 0x3468 <__fp_splitA+0x20>
    3450:	9f 3f       	cpi	r25, 0xFF	; 255
    3452:	79 f0       	breq	.+30     	; 0x3472 <__fp_splitA+0x2a>
    3454:	87 95       	ror	r24
    3456:	08 95       	ret
    3458:	12 16       	cp	r1, r18
    345a:	13 06       	cpc	r1, r19
    345c:	14 06       	cpc	r1, r20
    345e:	55 1f       	adc	r21, r21
    3460:	f2 cf       	rjmp	.-28     	; 0x3446 <__fp_split3+0xe>
    3462:	46 95       	lsr	r20
    3464:	f1 df       	rcall	.-30     	; 0x3448 <__fp_splitA>
    3466:	08 c0       	rjmp	.+16     	; 0x3478 <__fp_splitA+0x30>
    3468:	16 16       	cp	r1, r22
    346a:	17 06       	cpc	r1, r23
    346c:	18 06       	cpc	r1, r24
    346e:	99 1f       	adc	r25, r25
    3470:	f1 cf       	rjmp	.-30     	; 0x3454 <__fp_splitA+0xc>
    3472:	86 95       	lsr	r24
    3474:	71 05       	cpc	r23, r1
    3476:	61 05       	cpc	r22, r1
    3478:	08 94       	sec
    347a:	08 95       	ret

0000347c <__fp_zero>:
    347c:	e8 94       	clt

0000347e <__fp_szero>:
    347e:	bb 27       	eor	r27, r27
    3480:	66 27       	eor	r22, r22
    3482:	77 27       	eor	r23, r23
    3484:	cb 01       	movw	r24, r22
    3486:	97 f9       	bld	r25, 7
    3488:	08 95       	ret

0000348a <_hihTwiCallback>:
    348a:	65 30       	cpi	r22, 0x05	; 5
    348c:	f1 f4       	brne	.+60     	; 0x34ca <_hihTwiCallback+0x40>
    348e:	fa 01       	movw	r30, r20
    3490:	80 81       	ld	r24, Z
    3492:	8f 73       	andi	r24, 0x3F	; 63
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	98 2f       	mov	r25, r24
    3498:	88 27       	eor	r24, r24
    349a:	21 81       	ldd	r18, Z+1	; 0x01
    349c:	82 2b       	or	r24, r18
    349e:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    34a2:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    34a6:	82 81       	ldd	r24, Z+2	; 0x02
    34a8:	f0 e4       	ldi	r31, 0x40	; 64
    34aa:	8f 9f       	mul	r24, r31
    34ac:	c0 01       	movw	r24, r0
    34ae:	11 24       	eor	r1, r1
    34b0:	fa 01       	movw	r30, r20
    34b2:	23 81       	ldd	r18, Z+3	; 0x03
    34b4:	26 95       	lsr	r18
    34b6:	26 95       	lsr	r18
    34b8:	82 2b       	or	r24, r18
    34ba:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    34be:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    34c2:	81 e0       	ldi	r24, 0x01	; 1
    34c4:	80 93 27 12 	sts	0x1227, r24	; 0x801227 <_measuringIsReady>
    34c8:	08 95       	ret
    34ca:	64 30       	cpi	r22, 0x04	; 4
    34cc:	51 f0       	breq	.+20     	; 0x34e2 <_hihTwiCallback+0x58>
    34ce:	80 e0       	ldi	r24, 0x00	; 0
    34d0:	90 e4       	ldi	r25, 0x40	; 64
    34d2:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    34d6:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    34da:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    34de:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    34e2:	08 95       	ret

000034e4 <hih8120_initialise>:
    34e4:	0f 93       	push	r16
    34e6:	1f 93       	push	r17
    34e8:	05 e4       	ldi	r16, 0x45	; 69
    34ea:	1a e1       	ldi	r17, 0x1A	; 26
    34ec:	20 e0       	ldi	r18, 0x00	; 0
    34ee:	34 e2       	ldi	r19, 0x24	; 36
    34f0:	44 ef       	ldi	r20, 0xF4	; 244
    34f2:	50 e0       	ldi	r21, 0x00	; 0
    34f4:	60 e0       	ldi	r22, 0x00	; 0
    34f6:	87 e2       	ldi	r24, 0x27	; 39
    34f8:	0e 94 19 25 	call	0x4a32	; 0x4a32 <twiCreate>
    34fc:	90 93 29 12 	sts	0x1229, r25	; 0x801229 <_hih8120Handler+0x1>
    3500:	80 93 28 12 	sts	0x1228, r24	; 0x801228 <_hih8120Handler>
    3504:	21 e0       	ldi	r18, 0x01	; 1
    3506:	89 2b       	or	r24, r25
    3508:	09 f0       	breq	.+2      	; 0x350c <hih8120_initialise+0x28>
    350a:	20 e0       	ldi	r18, 0x00	; 0
    350c:	82 2f       	mov	r24, r18
    350e:	1f 91       	pop	r17
    3510:	0f 91       	pop	r16
    3512:	08 95       	ret

00003514 <hih8120_destroy>:
    3514:	80 91 28 12 	lds	r24, 0x1228	; 0x801228 <_hih8120Handler>
    3518:	90 91 29 12 	lds	r25, 0x1229	; 0x801229 <_hih8120Handler+0x1>
    351c:	00 97       	sbiw	r24, 0x00	; 0
    351e:	41 f0       	breq	.+16     	; 0x3530 <hih8120_destroy+0x1c>
    3520:	0e 94 66 25 	call	0x4acc	; 0x4acc <twiDestroy>
    3524:	10 92 29 12 	sts	0x1229, r1	; 0x801229 <_hih8120Handler+0x1>
    3528:	10 92 28 12 	sts	0x1228, r1	; 0x801228 <_hih8120Handler>
    352c:	80 e0       	ldi	r24, 0x00	; 0
    352e:	08 95       	ret
    3530:	82 e0       	ldi	r24, 0x02	; 2
    3532:	08 95       	ret

00003534 <hih8120_isReady>:
    3534:	80 91 27 12 	lds	r24, 0x1227	; 0x801227 <_measuringIsReady>
    3538:	08 95       	ret

0000353a <hih8120_wakeup>:
    353a:	80 91 28 12 	lds	r24, 0x1228	; 0x801228 <_hih8120Handler>
    353e:	90 91 29 12 	lds	r25, 0x1229	; 0x801229 <_hih8120Handler+0x1>
    3542:	00 97       	sbiw	r24, 0x00	; 0
    3544:	59 f0       	breq	.+22     	; 0x355c <hih8120_wakeup+0x22>
    3546:	40 e0       	ldi	r20, 0x00	; 0
    3548:	60 e0       	ldi	r22, 0x00	; 0
    354a:	70 e0       	ldi	r23, 0x00	; 0
    354c:	0e 94 6e 25 	call	0x4adc	; 0x4adc <twiTransmit>
    3550:	84 30       	cpi	r24, 0x04	; 4
    3552:	31 f4       	brne	.+12     	; 0x3560 <hih8120_wakeup+0x26>
    3554:	10 92 27 12 	sts	0x1227, r1	; 0x801227 <_measuringIsReady>
    3558:	80 e0       	ldi	r24, 0x00	; 0
    355a:	08 95       	ret
    355c:	82 e0       	ldi	r24, 0x02	; 2
    355e:	08 95       	ret
    3560:	83 e0       	ldi	r24, 0x03	; 3
    3562:	08 95       	ret

00003564 <hih8120_measure>:
    3564:	80 91 28 12 	lds	r24, 0x1228	; 0x801228 <_hih8120Handler>
    3568:	90 91 29 12 	lds	r25, 0x1229	; 0x801229 <_hih8120Handler+0x1>
    356c:	00 97       	sbiw	r24, 0x00	; 0
    356e:	39 f0       	breq	.+14     	; 0x357e <hih8120_measure+0x1a>
    3570:	64 e0       	ldi	r22, 0x04	; 4
    3572:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <twiReceive>
    3576:	85 30       	cpi	r24, 0x05	; 5
    3578:	21 f0       	breq	.+8      	; 0x3582 <hih8120_measure+0x1e>
    357a:	83 e0       	ldi	r24, 0x03	; 3
    357c:	08 95       	ret
    357e:	82 e0       	ldi	r24, 0x02	; 2
    3580:	08 95       	ret
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	08 95       	ret

00003586 <hih8120_getHumidity>:
    3586:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    358a:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    358e:	80 e0       	ldi	r24, 0x00	; 0
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <__floatunsisf>
    3596:	20 e0       	ldi	r18, 0x00	; 0
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	48 ec       	ldi	r20, 0xC8	; 200
    359c:	52 e4       	ldi	r21, 0x42	; 66
    359e:	0e 94 04 28 	call	0x5008	; 0x5008 <__mulsf3>
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	38 ef       	ldi	r19, 0xF8	; 248
    35a6:	4f e7       	ldi	r20, 0x7F	; 127
    35a8:	56 e4       	ldi	r21, 0x46	; 70
    35aa:	0c 94 2d 27 	jmp	0x4e5a	; 0x4e5a <__divsf3>
    35ae:	08 95       	ret

000035b0 <hih8120_getHumidityPercent_x10>:
    35b0:	ea df       	rcall	.-44     	; 0x3586 <hih8120_getHumidity>
    35b2:	20 e0       	ldi	r18, 0x00	; 0
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	40 e2       	ldi	r20, 0x20	; 32
    35b8:	51 e4       	ldi	r21, 0x41	; 65
    35ba:	0e 94 04 28 	call	0x5008	; 0x5008 <__mulsf3>
    35be:	10 df       	rcall	.-480    	; 0x33e0 <__fixunssfsi>
    35c0:	cb 01       	movw	r24, r22
    35c2:	08 95       	ret

000035c4 <hih8120_getTemperature>:
    35c4:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    35c8:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    35cc:	80 e0       	ldi	r24, 0x00	; 0
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <__floatunsisf>
    35d4:	20 e0       	ldi	r18, 0x00	; 0
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	45 e2       	ldi	r20, 0x25	; 37
    35da:	53 e4       	ldi	r21, 0x43	; 67
    35dc:	0e 94 04 28 	call	0x5008	; 0x5008 <__mulsf3>
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	38 ef       	ldi	r19, 0xF8	; 248
    35e4:	4f e7       	ldi	r20, 0x7F	; 127
    35e6:	56 e4       	ldi	r21, 0x46	; 70
    35e8:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__divsf3>
    35ec:	20 e0       	ldi	r18, 0x00	; 0
    35ee:	30 e0       	ldi	r19, 0x00	; 0
    35f0:	40 e2       	ldi	r20, 0x20	; 32
    35f2:	52 e4       	ldi	r21, 0x42	; 66
    35f4:	0c 94 c6 26 	jmp	0x4d8c	; 0x4d8c <__subsf3>
    35f8:	08 95       	ret

000035fa <hih8120_getTemperature_x10>:
    35fa:	e4 df       	rcall	.-56     	; 0x35c4 <hih8120_getTemperature>
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	40 e2       	ldi	r20, 0x20	; 32
    3602:	51 e4       	ldi	r21, 0x41	; 65
    3604:	0e 94 04 28 	call	0x5008	; 0x5008 <__mulsf3>
    3608:	0e 94 98 27 	call	0x4f30	; 0x4f30 <__fixsfsi>
    360c:	cb 01       	movw	r24, r22
    360e:	08 95       	ret

00003610 <_serialCallBack>:
    3610:	0f 93       	push	r16
    3612:	1f 93       	push	r17
    3614:	cf 93       	push	r28
    3616:	df 93       	push	r29
    3618:	1f 92       	push	r1
    361a:	1f 92       	push	r1
    361c:	cd b7       	in	r28, 0x3d	; 61
    361e:	de b7       	in	r29, 0x3e	; 62
    3620:	8c 01       	movw	r16, r24
    3622:	19 82       	std	Y+1, r1	; 0x01
    3624:	2d c0       	rjmp	.+90     	; 0x3680 <_serialCallBack+0x70>
    3626:	e0 91 8e 12 	lds	r30, 0x128E	; 0x80128e <rec_buf_inp.2878>
    362a:	ec 32       	cpi	r30, 0x2C	; 44
    362c:	50 f4       	brcc	.+20     	; 0x3642 <_serialCallBack+0x32>
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	8e 0f       	add	r24, r30
    3632:	80 93 8e 12 	sts	0x128E, r24	; 0x80128e <rec_buf_inp.2878>
    3636:	f0 e0       	ldi	r31, 0x00	; 0
    3638:	e0 54       	subi	r30, 0x40	; 64
    363a:	fd 4e       	sbci	r31, 0xED	; 237
    363c:	8a 81       	ldd	r24, Y+2	; 0x02
    363e:	80 83       	st	Z, r24
    3640:	02 c0       	rjmp	.+4      	; 0x3646 <_serialCallBack+0x36>
    3642:	10 92 8e 12 	sts	0x128E, r1	; 0x80128e <rec_buf_inp.2878>
    3646:	8a 81       	ldd	r24, Y+2	; 0x02
    3648:	8a 30       	cpi	r24, 0x0A	; 10
    364a:	d1 f4       	brne	.+52     	; 0x3680 <_serialCallBack+0x70>
    364c:	40 91 8e 12 	lds	r20, 0x128E	; 0x80128e <rec_buf_inp.2878>
    3650:	50 e0       	ldi	r21, 0x00	; 0
    3652:	fa 01       	movw	r30, r20
    3654:	e2 54       	subi	r30, 0x42	; 66
    3656:	fd 4e       	sbci	r31, 0xED	; 237
    3658:	10 82       	st	Z, r1
    365a:	41 50       	subi	r20, 0x01	; 1
    365c:	51 09       	sbc	r21, r1
    365e:	9e 01       	movw	r18, r28
    3660:	2f 5f       	subi	r18, 0xFF	; 255
    3662:	3f 4f       	sbci	r19, 0xFF	; 255
    3664:	60 ec       	ldi	r22, 0xC0	; 192
    3666:	72 e1       	ldi	r23, 0x12	; 18
    3668:	80 91 91 12 	lds	r24, 0x1291	; 0x801291 <_serialReplyBufferHandle>
    366c:	90 91 92 12 	lds	r25, 0x1292	; 0x801292 <_serialReplyBufferHandle+0x1>
    3670:	0e 94 a8 09 	call	0x1350	; 0x1350 <xStreamBufferSendFromISR>
    3674:	89 81       	ldd	r24, Y+1	; 0x01
    3676:	81 11       	cpse	r24, r1
    3678:	0e 94 c2 03 	call	0x784	; 0x784 <vPortYield>
    367c:	10 92 8e 12 	sts	0x128E, r1	; 0x80128e <rec_buf_inp.2878>
    3680:	be 01       	movw	r22, r28
    3682:	6e 5f       	subi	r22, 0xFE	; 254
    3684:	7f 4f       	sbci	r23, 0xFF	; 255
    3686:	c8 01       	movw	r24, r16
    3688:	50 d5       	rcall	.+2720   	; 0x412a <serial_getByte>
    368a:	88 23       	and	r24, r24
    368c:	61 f2       	breq	.-104    	; 0x3626 <_serialCallBack+0x16>
    368e:	0f 90       	pop	r0
    3690:	0f 90       	pop	r0
    3692:	df 91       	pop	r29
    3694:	cf 91       	pop	r28
    3696:	1f 91       	pop	r17
    3698:	0f 91       	pop	r16
    369a:	08 95       	ret

0000369c <_uploadMessage>:
    369c:	0f 93       	push	r16
    369e:	1f 93       	push	r17
    36a0:	cf 93       	push	r28
    36a2:	df 93       	push	r29
    36a4:	8c 01       	movw	r16, r24
    36a6:	eb 01       	movw	r28, r22
    36a8:	80 91 91 12 	lds	r24, 0x1291	; 0x801291 <_serialReplyBufferHandle>
    36ac:	90 91 92 12 	lds	r25, 0x1292	; 0x801292 <_serialReplyBufferHandle+0x1>
    36b0:	0e 94 b5 08 	call	0x116a	; 0x116a <xStreamBufferReset>
    36b4:	b8 01       	movw	r22, r16
    36b6:	8a e2       	ldi	r24, 0x2A	; 42
    36b8:	92 e1       	ldi	r25, 0x12	; 18
    36ba:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <strcpy>
    36be:	20 97       	sbiw	r28, 0x00	; 0
    36c0:	79 f0       	breq	.+30     	; 0x36e0 <_uploadMessage+0x44>
    36c2:	ea e2       	ldi	r30, 0x2A	; 42
    36c4:	f2 e1       	ldi	r31, 0x12	; 18
    36c6:	01 90       	ld	r0, Z+
    36c8:	00 20       	and	r0, r0
    36ca:	e9 f7       	brne	.-6      	; 0x36c6 <_uploadMessage+0x2a>
    36cc:	31 97       	sbiw	r30, 0x01	; 1
    36ce:	80 e2       	ldi	r24, 0x20	; 32
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	91 83       	std	Z+1, r25	; 0x01
    36d4:	80 83       	st	Z, r24
    36d6:	be 01       	movw	r22, r28
    36d8:	8a e2       	ldi	r24, 0x2A	; 42
    36da:	92 e1       	ldi	r25, 0x12	; 18
    36dc:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <strcat>
    36e0:	ea e2       	ldi	r30, 0x2A	; 42
    36e2:	f2 e1       	ldi	r31, 0x12	; 18
    36e4:	df 01       	movw	r26, r30
    36e6:	0d 90       	ld	r0, X+
    36e8:	00 20       	and	r0, r0
    36ea:	e9 f7       	brne	.-6      	; 0x36e6 <_uploadMessage+0x4a>
    36ec:	11 97       	sbiw	r26, 0x01	; 1
    36ee:	8d e0       	ldi	r24, 0x0D	; 13
    36f0:	9a e0       	ldi	r25, 0x0A	; 10
    36f2:	11 96       	adiw	r26, 0x01	; 1
    36f4:	9c 93       	st	X, r25
    36f6:	8e 93       	st	-X, r24
    36f8:	12 96       	adiw	r26, 0x02	; 2
    36fa:	1c 92       	st	X, r1
    36fc:	01 90       	ld	r0, Z+
    36fe:	00 20       	and	r0, r0
    3700:	e9 f7       	brne	.-6      	; 0x36fc <_uploadMessage+0x60>
    3702:	31 97       	sbiw	r30, 0x01	; 1
    3704:	ea 52       	subi	r30, 0x2A	; 42
    3706:	f2 41       	sbci	r31, 0x12	; 18
    3708:	ae 2f       	mov	r26, r30
    370a:	8a e2       	ldi	r24, 0x2A	; 42
    370c:	92 e1       	ldi	r25, 0x12	; 18
    370e:	ac 01       	movw	r20, r24
    3710:	6a 2f       	mov	r22, r26
    3712:	80 91 93 12 	lds	r24, 0x1293	; 0x801293 <_rn2483_serial>
    3716:	90 91 94 12 	lds	r25, 0x1294	; 0x801294 <_rn2483_serial+0x1>
    371a:	b2 d4       	rcall	.+2404   	; 0x4080 <serial_sendBytes>
    371c:	81 11       	cpse	r24, r1
    371e:	11 c0       	rjmp	.+34     	; 0x3742 <_uploadMessage+0xa6>
    3720:	08 e2       	ldi	r16, 0x28	; 40
    3722:	15 e0       	ldi	r17, 0x05	; 5
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	4d e2       	ldi	r20, 0x2D	; 45
    372a:	50 e0       	ldi	r21, 0x00	; 0
    372c:	6a e1       	ldi	r22, 0x1A	; 26
    372e:	73 e1       	ldi	r23, 0x13	; 19
    3730:	80 91 91 12 	lds	r24, 0x1291	; 0x801291 <_serialReplyBufferHandle>
    3734:	90 91 92 12 	lds	r25, 0x1292	; 0x801292 <_serialReplyBufferHandle+0x1>
    3738:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <xStreamBufferReceive>
    373c:	8a e1       	ldi	r24, 0x1A	; 26
    373e:	93 e1       	ldi	r25, 0x13	; 19
    3740:	02 c0       	rjmp	.+4      	; 0x3746 <_uploadMessage+0xaa>
    3742:	80 e0       	ldi	r24, 0x00	; 0
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	df 91       	pop	r29
    3748:	cf 91       	pop	r28
    374a:	1f 91       	pop	r17
    374c:	0f 91       	pop	r16
    374e:	08 95       	ret

00003750 <_reply2ReturnCode>:
    3750:	2f 92       	push	r2
    3752:	3f 92       	push	r3
    3754:	4f 92       	push	r4
    3756:	5f 92       	push	r5
    3758:	6f 92       	push	r6
    375a:	7f 92       	push	r7
    375c:	8f 92       	push	r8
    375e:	9f 92       	push	r9
    3760:	af 92       	push	r10
    3762:	bf 92       	push	r11
    3764:	cf 92       	push	r12
    3766:	df 92       	push	r13
    3768:	ef 92       	push	r14
    376a:	ff 92       	push	r15
    376c:	0f 93       	push	r16
    376e:	1f 93       	push	r17
    3770:	cf 93       	push	r28
    3772:	df 93       	push	r29
    3774:	5c 01       	movw	r10, r24
    3776:	fc 01       	movw	r30, r24
    3778:	01 90       	ld	r0, Z+
    377a:	00 20       	and	r0, r0
    377c:	e9 f7       	brne	.-6      	; 0x3778 <_reply2ReturnCode+0x28>
    377e:	31 97       	sbiw	r30, 0x01	; 1
    3780:	6f 01       	movw	r12, r30
    3782:	c8 1a       	sub	r12, r24
    3784:	d9 0a       	sbc	r13, r25
    3786:	5c 2c       	mov	r5, r12
    3788:	0f 2e       	mov	r0, r31
    378a:	f4 e9       	ldi	r31, 0x94	; 148
    378c:	8f 2e       	mov	r8, r31
    378e:	f6 e0       	ldi	r31, 0x06	; 6
    3790:	9f 2e       	mov	r9, r31
    3792:	f0 2d       	mov	r31, r0
    3794:	e1 2c       	mov	r14, r1
    3796:	f1 2c       	mov	r15, r1
    3798:	4c 2c       	mov	r4, r12
    379a:	37 01       	movw	r6, r14
    379c:	f4 01       	movw	r30, r8
    379e:	01 81       	ldd	r16, Z+1	; 0x01
    37a0:	12 81       	ldd	r17, Z+2	; 0x02
    37a2:	e8 01       	movw	r28, r16
    37a4:	09 90       	ld	r0, Y+
    37a6:	00 20       	and	r0, r0
    37a8:	e9 f7       	brne	.-6      	; 0x37a4 <_reply2ReturnCode+0x54>
    37aa:	21 97       	sbiw	r28, 0x01	; 1
    37ac:	c0 1b       	sub	r28, r16
    37ae:	d1 0b       	sbc	r29, r17
    37b0:	3c 2e       	mov	r3, r28
    37b2:	f9 e0       	ldi	r31, 0x09	; 9
    37b4:	cf 16       	cp	r12, r31
    37b6:	d1 04       	cpc	r13, r1
    37b8:	58 f0       	brcs	.+22     	; 0x37d0 <_reply2ReturnCode+0x80>
    37ba:	f4 01       	movw	r30, r8
    37bc:	20 80       	ld	r2, Z
    37be:	fe e0       	ldi	r31, 0x0E	; 14
    37c0:	2f 12       	cpse	r2, r31
    37c2:	06 c0       	rjmp	.+12     	; 0x37d0 <_reply2ReturnCode+0x80>
    37c4:	b8 01       	movw	r22, r16
    37c6:	c5 01       	movw	r24, r10
    37c8:	0e 94 4f 2e 	call	0x5c9e	; 0x5c9e <strcasestr>
    37cc:	89 2b       	or	r24, r25
    37ce:	09 f5       	brne	.+66     	; 0x3812 <_reply2ReturnCode+0xc2>
    37d0:	44 2d       	mov	r20, r4
    37d2:	35 14       	cp	r3, r5
    37d4:	08 f4       	brcc	.+2      	; 0x37d8 <_reply2ReturnCode+0x88>
    37d6:	4c 2f       	mov	r20, r28
    37d8:	50 e0       	ldi	r21, 0x00	; 0
    37da:	b8 01       	movw	r22, r16
    37dc:	c5 01       	movw	r24, r10
    37de:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <strncasecmp>
    37e2:	89 2b       	or	r24, r25
    37e4:	49 f4       	brne	.+18     	; 0x37f8 <_reply2ReturnCode+0xa8>
    37e6:	f3 01       	movw	r30, r6
    37e8:	ee 0f       	add	r30, r30
    37ea:	ff 1f       	adc	r31, r31
    37ec:	e6 0d       	add	r30, r6
    37ee:	f7 1d       	adc	r31, r7
    37f0:	ec 56       	subi	r30, 0x6C	; 108
    37f2:	f9 4f       	sbci	r31, 0xF9	; 249
    37f4:	20 80       	ld	r2, Z
    37f6:	0d c0       	rjmp	.+26     	; 0x3812 <_reply2ReturnCode+0xc2>
    37f8:	8f ef       	ldi	r24, 0xFF	; 255
    37fa:	e8 1a       	sub	r14, r24
    37fc:	f8 0a       	sbc	r15, r24
    37fe:	e3 e0       	ldi	r30, 0x03	; 3
    3800:	8e 0e       	add	r8, r30
    3802:	91 1c       	adc	r9, r1
    3804:	f1 e1       	ldi	r31, 0x11	; 17
    3806:	ef 16       	cp	r14, r31
    3808:	f1 04       	cpc	r15, r1
    380a:	39 f6       	brne	.-114    	; 0x379a <_reply2ReturnCode+0x4a>
    380c:	68 94       	set
    380e:	22 24       	eor	r2, r2
    3810:	24 f8       	bld	r2, 4
    3812:	82 2d       	mov	r24, r2
    3814:	df 91       	pop	r29
    3816:	cf 91       	pop	r28
    3818:	1f 91       	pop	r17
    381a:	0f 91       	pop	r16
    381c:	ff 90       	pop	r15
    381e:	ef 90       	pop	r14
    3820:	df 90       	pop	r13
    3822:	cf 90       	pop	r12
    3824:	bf 90       	pop	r11
    3826:	af 90       	pop	r10
    3828:	9f 90       	pop	r9
    382a:	8f 90       	pop	r8
    382c:	7f 90       	pop	r7
    382e:	6f 90       	pop	r6
    3830:	5f 90       	pop	r5
    3832:	4f 90       	pop	r4
    3834:	3f 90       	pop	r3
    3836:	2f 90       	pop	r2
    3838:	08 95       	ret

0000383a <_uploadMessageRc>:
    383a:	30 df       	rcall	.-416    	; 0x369c <_uploadMessage>
    383c:	89 cf       	rjmp	.-238    	; 0x3750 <_reply2ReturnCode>
    383e:	08 95       	ret

00003840 <lora_driver_flushBuffers>:
    3840:	80 91 91 12 	lds	r24, 0x1291	; 0x801291 <_serialReplyBufferHandle>
    3844:	90 91 92 12 	lds	r25, 0x1292	; 0x801292 <_serialReplyBufferHandle+0x1>
    3848:	0c 94 b5 08 	jmp	0x116a	; 0x116a <xStreamBufferReset>
    384c:	08 95       	ret

0000384e <lora_driver_initialise>:
    384e:	8f 92       	push	r8
    3850:	9f 92       	push	r9
    3852:	af 92       	push	r10
    3854:	cf 92       	push	r12
    3856:	ef 92       	push	r14
    3858:	0f 93       	push	r16
    385a:	1f 93       	push	r17
    385c:	cf 93       	push	r28
    385e:	c8 2f       	mov	r28, r24
    3860:	8b 01       	movw	r16, r22
    3862:	41 e0       	ldi	r20, 0x01	; 1
    3864:	60 e0       	ldi	r22, 0x00	; 0
    3866:	70 e0       	ldi	r23, 0x00	; 0
    3868:	88 ec       	ldi	r24, 0xC8	; 200
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	0e 94 83 08 	call	0x1106	; 0x1106 <xStreamBufferGenericCreate>
    3870:	90 93 92 12 	sts	0x1292, r25	; 0x801292 <_serialReplyBufferHandle+0x1>
    3874:	80 93 91 12 	sts	0x1291, r24	; 0x801291 <_serialReplyBufferHandle>
    3878:	10 93 90 12 	sts	0x1290, r17	; 0x801290 <_downlinkMessageBuffer+0x1>
    387c:	00 93 8f 12 	sts	0x128F, r16	; 0x80128f <_downlinkMessageBuffer>
    3880:	0f 2e       	mov	r0, r31
    3882:	f8 e0       	ldi	r31, 0x08	; 8
    3884:	8f 2e       	mov	r8, r31
    3886:	fb e1       	ldi	r31, 0x1B	; 27
    3888:	9f 2e       	mov	r9, r31
    388a:	f0 2d       	mov	r31, r0
    388c:	68 94       	set
    388e:	aa 24       	eor	r10, r10
    3890:	a6 f8       	bld	r10, 6
    3892:	68 94       	set
    3894:	cc 24       	eor	r12, r12
    3896:	c6 f8       	bld	r12, 6
    3898:	e1 2c       	mov	r14, r1
    389a:	00 e0       	ldi	r16, 0x00	; 0
    389c:	23 e0       	ldi	r18, 0x03	; 3
    389e:	40 e0       	ldi	r20, 0x00	; 0
    38a0:	51 ee       	ldi	r21, 0xE1	; 225
    38a2:	60 e0       	ldi	r22, 0x00	; 0
    38a4:	70 e0       	ldi	r23, 0x00	; 0
    38a6:	8c 2f       	mov	r24, r28
    38a8:	1e d3       	rcall	.+1596   	; 0x3ee6 <serial_create>
    38aa:	90 93 94 12 	sts	0x1294, r25	; 0x801294 <_rn2483_serial+0x1>
    38ae:	80 93 93 12 	sts	0x1293, r24	; 0x801293 <_rn2483_serial>
    38b2:	e7 e0       	ldi	r30, 0x07	; 7
    38b4:	f1 e0       	ldi	r31, 0x01	; 1
    38b6:	80 81       	ld	r24, Z
    38b8:	80 61       	ori	r24, 0x10	; 16
    38ba:	80 83       	st	Z, r24
    38bc:	cf 91       	pop	r28
    38be:	1f 91       	pop	r17
    38c0:	0f 91       	pop	r16
    38c2:	ef 90       	pop	r14
    38c4:	cf 90       	pop	r12
    38c6:	af 90       	pop	r10
    38c8:	9f 90       	pop	r9
    38ca:	8f 90       	pop	r8
    38cc:	08 95       	ret

000038ce <lora_driver_resetRn2483>:
    38ce:	88 23       	and	r24, r24
    38d0:	31 f0       	breq	.+12     	; 0x38de <lora_driver_resetRn2483+0x10>
    38d2:	e8 e0       	ldi	r30, 0x08	; 8
    38d4:	f1 e0       	ldi	r31, 0x01	; 1
    38d6:	80 81       	ld	r24, Z
    38d8:	8f 7e       	andi	r24, 0xEF	; 239
    38da:	80 83       	st	Z, r24
    38dc:	08 95       	ret
    38de:	e8 e0       	ldi	r30, 0x08	; 8
    38e0:	f1 e0       	ldi	r31, 0x01	; 1
    38e2:	80 81       	ld	r24, Z
    38e4:	80 61       	ori	r24, 0x10	; 16
    38e6:	80 83       	st	Z, r24
    38e8:	08 95       	ret

000038ea <lora_driver_rn2483FactoryReset>:
    38ea:	60 e0       	ldi	r22, 0x00	; 0
    38ec:	70 e0       	ldi	r23, 0x00	; 0
    38ee:	8a e1       	ldi	r24, 0x1A	; 26
    38f0:	94 e0       	ldi	r25, 0x04	; 4
    38f2:	d4 de       	rcall	.-600    	; 0x369c <_uploadMessage>
    38f4:	ea e1       	ldi	r30, 0x1A	; 26
    38f6:	f3 e1       	ldi	r31, 0x13	; 19
    38f8:	01 90       	ld	r0, Z+
    38fa:	00 20       	and	r0, r0
    38fc:	e9 f7       	brne	.-6      	; 0x38f8 <lora_driver_rn2483FactoryReset+0xe>
    38fe:	31 97       	sbiw	r30, 0x01	; 1
    3900:	ea 51       	subi	r30, 0x1A	; 26
    3902:	f3 41       	sbci	r31, 0x13	; 19
    3904:	81 e0       	ldi	r24, 0x01	; 1
    3906:	75 97       	sbiw	r30, 0x15	; 21
    3908:	08 f0       	brcs	.+2      	; 0x390c <lora_driver_rn2483FactoryReset+0x22>
    390a:	80 e0       	ldi	r24, 0x00	; 0
    390c:	08 95       	ret

0000390e <lora_driver_getRn2483Hweui>:
    390e:	cf 93       	push	r28
    3910:	df 93       	push	r29
    3912:	ec 01       	movw	r28, r24
    3914:	60 e0       	ldi	r22, 0x00	; 0
    3916:	70 e0       	ldi	r23, 0x00	; 0
    3918:	8b e2       	ldi	r24, 0x2B	; 43
    391a:	94 e0       	ldi	r25, 0x04	; 4
    391c:	bf de       	rcall	.-642    	; 0x369c <_uploadMessage>
    391e:	ea e1       	ldi	r30, 0x1A	; 26
    3920:	f3 e1       	ldi	r31, 0x13	; 19
    3922:	01 90       	ld	r0, Z+
    3924:	00 20       	and	r0, r0
    3926:	e9 f7       	brne	.-6      	; 0x3922 <lora_driver_getRn2483Hweui+0x14>
    3928:	eb 52       	subi	r30, 0x2B	; 43
    392a:	f3 41       	sbci	r31, 0x13	; 19
    392c:	39 f4       	brne	.+14     	; 0x393c <lora_driver_getRn2483Hweui+0x2e>
    392e:	6a e1       	ldi	r22, 0x1A	; 26
    3930:	73 e1       	ldi	r23, 0x13	; 19
    3932:	ce 01       	movw	r24, r28
    3934:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <strcpy>
    3938:	80 e0       	ldi	r24, 0x00	; 0
    393a:	02 c0       	rjmp	.+4      	; 0x3940 <lora_driver_getRn2483Hweui+0x32>
    393c:	18 82       	st	Y, r1
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	df 91       	pop	r29
    3942:	cf 91       	pop	r28
    3944:	08 95       	ret

00003946 <lora_driver_setDeviceIdentifier>:
    3946:	fc 01       	movw	r30, r24
    3948:	01 90       	ld	r0, Z+
    394a:	00 20       	and	r0, r0
    394c:	e9 f7       	brne	.-6      	; 0x3948 <lora_driver_setDeviceIdentifier+0x2>
    394e:	9f 01       	movw	r18, r30
    3950:	21 51       	subi	r18, 0x11	; 17
    3952:	31 09       	sbc	r19, r1
    3954:	28 17       	cp	r18, r24
    3956:	39 07       	cpc	r19, r25
    3958:	29 f4       	brne	.+10     	; 0x3964 <lora_driver_setDeviceIdentifier+0x1e>
    395a:	bc 01       	movw	r22, r24
    395c:	89 e5       	ldi	r24, 0x59	; 89
    395e:	94 e0       	ldi	r25, 0x04	; 4
    3960:	6c cf       	rjmp	.-296    	; 0x383a <_uploadMessageRc>
    3962:	08 95       	ret
    3964:	89 e0       	ldi	r24, 0x09	; 9
    3966:	08 95       	ret

00003968 <lora_driver_setApplicationIdentifier>:
    3968:	fc 01       	movw	r30, r24
    396a:	01 90       	ld	r0, Z+
    396c:	00 20       	and	r0, r0
    396e:	e9 f7       	brne	.-6      	; 0x396a <lora_driver_setApplicationIdentifier+0x2>
    3970:	9f 01       	movw	r18, r30
    3972:	21 51       	subi	r18, 0x11	; 17
    3974:	31 09       	sbc	r19, r1
    3976:	28 17       	cp	r18, r24
    3978:	39 07       	cpc	r19, r25
    397a:	29 f4       	brne	.+10     	; 0x3986 <lora_driver_setApplicationIdentifier+0x1e>
    397c:	bc 01       	movw	r22, r24
    397e:	88 e6       	ldi	r24, 0x68	; 104
    3980:	94 e0       	ldi	r25, 0x04	; 4
    3982:	5b cf       	rjmp	.-330    	; 0x383a <_uploadMessageRc>
    3984:	08 95       	ret
    3986:	89 e0       	ldi	r24, 0x09	; 9
    3988:	08 95       	ret

0000398a <lora_driver_setApplicationKey>:
    398a:	fc 01       	movw	r30, r24
    398c:	01 90       	ld	r0, Z+
    398e:	00 20       	and	r0, r0
    3990:	e9 f7       	brne	.-6      	; 0x398c <lora_driver_setApplicationKey+0x2>
    3992:	9f 01       	movw	r18, r30
    3994:	21 52       	subi	r18, 0x21	; 33
    3996:	31 09       	sbc	r19, r1
    3998:	28 17       	cp	r18, r24
    399a:	39 07       	cpc	r19, r25
    399c:	29 f4       	brne	.+10     	; 0x39a8 <lora_driver_setApplicationKey+0x1e>
    399e:	bc 01       	movw	r22, r24
    39a0:	87 e7       	ldi	r24, 0x77	; 119
    39a2:	94 e0       	ldi	r25, 0x04	; 4
    39a4:	4a cf       	rjmp	.-364    	; 0x383a <_uploadMessageRc>
    39a6:	08 95       	ret
    39a8:	89 e0       	ldi	r24, 0x09	; 9
    39aa:	08 95       	ret

000039ac <lora_driver_saveMac>:
    39ac:	60 e0       	ldi	r22, 0x00	; 0
    39ae:	70 e0       	ldi	r23, 0x00	; 0
    39b0:	86 eb       	ldi	r24, 0xB6	; 182
    39b2:	94 e0       	ldi	r25, 0x04	; 4
    39b4:	42 cf       	rjmp	.-380    	; 0x383a <_uploadMessageRc>
    39b6:	08 95       	ret

000039b8 <lora_driver_join>:
    39b8:	0f 93       	push	r16
    39ba:	1f 93       	push	r17
    39bc:	e8 2f       	mov	r30, r24
    39be:	f0 e0       	ldi	r31, 0x00	; 0
    39c0:	ee 0f       	add	r30, r30
    39c2:	ff 1f       	adc	r31, r31
    39c4:	e0 57       	subi	r30, 0x70	; 112
    39c6:	f9 4f       	sbci	r31, 0xF9	; 249
    39c8:	60 81       	ld	r22, Z
    39ca:	71 81       	ldd	r23, Z+1	; 0x01
    39cc:	8f eb       	ldi	r24, 0xBF	; 191
    39ce:	94 e0       	ldi	r25, 0x04	; 4
    39d0:	34 df       	rcall	.-408    	; 0x383a <_uploadMessageRc>
    39d2:	81 11       	cpse	r24, r1
    39d4:	14 c0       	rjmp	.+40     	; 0x39fe <lora_driver_join+0x46>
    39d6:	08 e2       	ldi	r16, 0x28	; 40
    39d8:	15 e0       	ldi	r17, 0x05	; 5
    39da:	20 e0       	ldi	r18, 0x00	; 0
    39dc:	30 e0       	ldi	r19, 0x00	; 0
    39de:	4d e2       	ldi	r20, 0x2D	; 45
    39e0:	50 e0       	ldi	r21, 0x00	; 0
    39e2:	6a e1       	ldi	r22, 0x1A	; 26
    39e4:	73 e1       	ldi	r23, 0x13	; 19
    39e6:	80 91 91 12 	lds	r24, 0x1291	; 0x801291 <_serialReplyBufferHandle>
    39ea:	90 91 92 12 	lds	r25, 0x1292	; 0x801292 <_serialReplyBufferHandle+0x1>
    39ee:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <xStreamBufferReceive>
    39f2:	88 23       	and	r24, r24
    39f4:	21 f0       	breq	.+8      	; 0x39fe <lora_driver_join+0x46>
    39f6:	8a e1       	ldi	r24, 0x1A	; 26
    39f8:	93 e1       	ldi	r25, 0x13	; 19
    39fa:	aa de       	rcall	.-684    	; 0x3750 <_reply2ReturnCode>
    39fc:	03 c0       	rjmp	.+6      	; 0x3a04 <lora_driver_join+0x4c>
    39fe:	8a e1       	ldi	r24, 0x1A	; 26
    3a00:	93 e1       	ldi	r25, 0x13	; 19
    3a02:	a6 de       	rcall	.-692    	; 0x3750 <_reply2ReturnCode>
    3a04:	1f 91       	pop	r17
    3a06:	0f 91       	pop	r16
    3a08:	08 95       	ret

00003a0a <lora_driver_sendUploadMessage>:
    3a0a:	0f 93       	push	r16
    3a0c:	1f 93       	push	r17
    3a0e:	cf 93       	push	r28
    3a10:	df 93       	push	r29
    3a12:	1f 92       	push	r1
    3a14:	cd b7       	in	r28, 0x3d	; 61
    3a16:	de b7       	in	r29, 0x3e	; 62
    3a18:	db 01       	movw	r26, r22
    3a1a:	11 96       	adiw	r26, 0x01	; 1
    3a1c:	9c 91       	ld	r25, X
    3a1e:	11 97       	sbiw	r26, 0x01	; 1
    3a20:	95 31       	cpi	r25, 0x15	; 21
    3a22:	08 f0       	brcs	.+2      	; 0x3a26 <lora_driver_sendUploadMessage+0x1c>
    3a24:	b4 c0       	rjmp	.+360    	; 0x3b8e <lora_driver_sendUploadMessage+0x184>
    3a26:	99 23       	and	r25, r25
    3a28:	81 f1       	breq	.+96     	; 0x3a8a <lora_driver_sendUploadMessage+0x80>
    3a2a:	60 e0       	ldi	r22, 0x00	; 0
    3a2c:	70 e0       	ldi	r23, 0x00	; 0
    3a2e:	27 2f       	mov	r18, r23
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	46 2f       	mov	r20, r22
    3a34:	50 e0       	ldi	r21, 0x00	; 0
    3a36:	fd 01       	movw	r30, r26
    3a38:	e4 0f       	add	r30, r20
    3a3a:	f5 1f       	adc	r31, r21
    3a3c:	92 81       	ldd	r25, Z+2	; 0x02
    3a3e:	92 95       	swap	r25
    3a40:	9f 70       	andi	r25, 0x0F	; 15
    3a42:	9a 30       	cpi	r25, 0x0A	; 10
    3a44:	10 f0       	brcs	.+4      	; 0x3a4a <lora_driver_sendUploadMessage+0x40>
    3a46:	99 5c       	subi	r25, 0xC9	; 201
    3a48:	01 c0       	rjmp	.+2      	; 0x3a4c <lora_driver_sendUploadMessage+0x42>
    3a4a:	90 5d       	subi	r25, 0xD0	; 208
    3a4c:	f9 01       	movw	r30, r18
    3a4e:	e5 55       	subi	r30, 0x55	; 85
    3a50:	fd 4e       	sbci	r31, 0xED	; 237
    3a52:	90 83       	st	Z, r25
    3a54:	2f 5f       	subi	r18, 0xFF	; 255
    3a56:	3f 4f       	sbci	r19, 0xFF	; 255
    3a58:	fd 01       	movw	r30, r26
    3a5a:	e4 0f       	add	r30, r20
    3a5c:	f5 1f       	adc	r31, r21
    3a5e:	92 81       	ldd	r25, Z+2	; 0x02
    3a60:	9f 70       	andi	r25, 0x0F	; 15
    3a62:	49 2f       	mov	r20, r25
    3a64:	50 e0       	ldi	r21, 0x00	; 0
    3a66:	4a 30       	cpi	r20, 0x0A	; 10
    3a68:	51 05       	cpc	r21, r1
    3a6a:	14 f0       	brlt	.+4      	; 0x3a70 <lora_driver_sendUploadMessage+0x66>
    3a6c:	99 5c       	subi	r25, 0xC9	; 201
    3a6e:	01 c0       	rjmp	.+2      	; 0x3a72 <lora_driver_sendUploadMessage+0x68>
    3a70:	90 5d       	subi	r25, 0xD0	; 208
    3a72:	f9 01       	movw	r30, r18
    3a74:	e5 55       	subi	r30, 0x55	; 85
    3a76:	fd 4e       	sbci	r31, 0xED	; 237
    3a78:	90 83       	st	Z, r25
    3a7a:	7e 5f       	subi	r23, 0xFE	; 254
    3a7c:	6f 5f       	subi	r22, 0xFF	; 255
    3a7e:	11 96       	adiw	r26, 0x01	; 1
    3a80:	9c 91       	ld	r25, X
    3a82:	11 97       	sbiw	r26, 0x01	; 1
    3a84:	69 17       	cp	r22, r25
    3a86:	98 f2       	brcs	.-90     	; 0x3a2e <lora_driver_sendUploadMessage+0x24>
    3a88:	01 c0       	rjmp	.+2      	; 0x3a8c <lora_driver_sendUploadMessage+0x82>
    3a8a:	70 e0       	ldi	r23, 0x00	; 0
    3a8c:	e7 2f       	mov	r30, r23
    3a8e:	f0 e0       	ldi	r31, 0x00	; 0
    3a90:	e5 55       	subi	r30, 0x55	; 85
    3a92:	fd 4e       	sbci	r31, 0xED	; 237
    3a94:	10 82       	st	Z, r1
    3a96:	4c 91       	ld	r20, X
    3a98:	81 11       	cpse	r24, r1
    3a9a:	03 c0       	rjmp	.+6      	; 0x3aa2 <lora_driver_sendUploadMessage+0x98>
    3a9c:	88 ec       	ldi	r24, 0xC8	; 200
    3a9e:	94 e0       	ldi	r25, 0x04	; 4
    3aa0:	02 c0       	rjmp	.+4      	; 0x3aa6 <lora_driver_sendUploadMessage+0x9c>
    3aa2:	8a ec       	ldi	r24, 0xCA	; 202
    3aa4:	94 e0       	ldi	r25, 0x04	; 4
    3aa6:	2b ea       	ldi	r18, 0xAB	; 171
    3aa8:	32 e1       	ldi	r19, 0x12	; 18
    3aaa:	3f 93       	push	r19
    3aac:	2f 93       	push	r18
    3aae:	1f 92       	push	r1
    3ab0:	4f 93       	push	r20
    3ab2:	9f 93       	push	r25
    3ab4:	8f 93       	push	r24
    3ab6:	8e ec       	ldi	r24, 0xCE	; 206
    3ab8:	94 e0       	ldi	r25, 0x04	; 4
    3aba:	9f 93       	push	r25
    3abc:	8f 93       	push	r24
    3abe:	8d ee       	ldi	r24, 0xED	; 237
    3ac0:	92 e1       	ldi	r25, 0x12	; 18
    3ac2:	9f 93       	push	r25
    3ac4:	8f 93       	push	r24
    3ac6:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <sprintf>
    3aca:	60 e0       	ldi	r22, 0x00	; 0
    3acc:	70 e0       	ldi	r23, 0x00	; 0
    3ace:	8d ee       	ldi	r24, 0xED	; 237
    3ad0:	92 e1       	ldi	r25, 0x12	; 18
    3ad2:	b3 de       	rcall	.-666    	; 0x383a <_uploadMessageRc>
    3ad4:	0f b6       	in	r0, 0x3f	; 63
    3ad6:	f8 94       	cli
    3ad8:	de bf       	out	0x3e, r29	; 62
    3ada:	0f be       	out	0x3f, r0	; 63
    3adc:	cd bf       	out	0x3d, r28	; 61
    3ade:	81 11       	cpse	r24, r1
    3ae0:	59 c0       	rjmp	.+178    	; 0x3b94 <lora_driver_sendUploadMessage+0x18a>
    3ae2:	08 e2       	ldi	r16, 0x28	; 40
    3ae4:	15 e0       	ldi	r17, 0x05	; 5
    3ae6:	20 e0       	ldi	r18, 0x00	; 0
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	4d e2       	ldi	r20, 0x2D	; 45
    3aec:	50 e0       	ldi	r21, 0x00	; 0
    3aee:	6a e1       	ldi	r22, 0x1A	; 26
    3af0:	73 e1       	ldi	r23, 0x13	; 19
    3af2:	80 91 91 12 	lds	r24, 0x1291	; 0x801291 <_serialReplyBufferHandle>
    3af6:	90 91 92 12 	lds	r25, 0x1292	; 0x801292 <_serialReplyBufferHandle+0x1>
    3afa:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <xStreamBufferReceive>
    3afe:	88 23       	and	r24, r24
    3b00:	09 f4       	brne	.+2      	; 0x3b04 <lora_driver_sendUploadMessage+0xfa>
    3b02:	47 c0       	rjmp	.+142    	; 0x3b92 <lora_driver_sendUploadMessage+0x188>
    3b04:	8a e1       	ldi	r24, 0x1A	; 26
    3b06:	93 e1       	ldi	r25, 0x13	; 19
    3b08:	23 de       	rcall	.-954    	; 0x3750 <_reply2ReturnCode>
    3b0a:	8e 30       	cpi	r24, 0x0E	; 14
    3b0c:	09 f0       	breq	.+2      	; 0x3b10 <lora_driver_sendUploadMessage+0x106>
    3b0e:	42 c0       	rjmp	.+132    	; 0x3b94 <lora_driver_sendUploadMessage+0x18a>
    3b10:	87 e0       	ldi	r24, 0x07	; 7
    3b12:	89 83       	std	Y+1, r24	; 0x01
    3b14:	80 91 8f 12 	lds	r24, 0x128F	; 0x80128f <_downlinkMessageBuffer>
    3b18:	90 91 90 12 	lds	r25, 0x1290	; 0x801290 <_downlinkMessageBuffer+0x1>
    3b1c:	89 2b       	or	r24, r25
    3b1e:	a9 f1       	breq	.+106    	; 0x3b8a <lora_driver_sendUploadMessage+0x180>
    3b20:	be 01       	movw	r22, r28
    3b22:	6f 5f       	subi	r22, 0xFF	; 255
    3b24:	7f 4f       	sbci	r23, 0xFF	; 255
    3b26:	8a e1       	ldi	r24, 0x1A	; 26
    3b28:	93 e1       	ldi	r25, 0x13	; 19
    3b2a:	68 d1       	rcall	.+720    	; 0x3dfc <decode_port_no>
    3b2c:	80 93 95 12 	sts	0x1295, r24	; 0x801295 <_downlinkPayload>
    3b30:	e9 81       	ldd	r30, Y+1	; 0x01
    3b32:	f0 e0       	ldi	r31, 0x00	; 0
    3b34:	e6 5e       	subi	r30, 0xE6	; 230
    3b36:	fc 4e       	sbci	r31, 0xEC	; 236
    3b38:	df 01       	movw	r26, r30
    3b3a:	0d 90       	ld	r0, X+
    3b3c:	00 20       	and	r0, r0
    3b3e:	e9 f7       	brne	.-6      	; 0x3b3a <lora_driver_sendUploadMessage+0x130>
    3b40:	11 97       	sbiw	r26, 0x01	; 1
    3b42:	ae 1b       	sub	r26, r30
    3b44:	bf 0b       	sbc	r27, r31
    3b46:	aa 23       	and	r26, r26
    3b48:	91 f0       	breq	.+36     	; 0x3b6e <lora_driver_sendUploadMessage+0x164>
    3b4a:	bb 27       	eor	r27, r27
    3b4c:	cd 01       	movw	r24, r26
    3b4e:	01 97       	sbiw	r24, 0x01	; 1
    3b50:	9c 01       	movw	r18, r24
    3b52:	12 f4       	brpl	.+4      	; 0x3b58 <lora_driver_sendUploadMessage+0x14e>
    3b54:	2f 5f       	subi	r18, 0xFF	; 255
    3b56:	3f 4f       	sbci	r19, 0xFF	; 255
    3b58:	35 95       	asr	r19
    3b5a:	27 95       	ror	r18
    3b5c:	20 93 96 12 	sts	0x1296, r18	; 0x801296 <_downlinkPayload+0x1>
    3b60:	af 01       	movw	r20, r30
    3b62:	4f 5f       	subi	r20, 0xFF	; 255
    3b64:	5f 4f       	sbci	r21, 0xFF	; 255
    3b66:	64 e1       	ldi	r22, 0x14	; 20
    3b68:	87 e9       	ldi	r24, 0x97	; 151
    3b6a:	92 e1       	ldi	r25, 0x12	; 18
    3b6c:	73 d1       	rcall	.+742    	; 0x3e54 <decode_hexadecimal_string_bytes>
    3b6e:	01 e0       	ldi	r16, 0x01	; 1
    3b70:	10 e0       	ldi	r17, 0x00	; 0
    3b72:	20 e0       	ldi	r18, 0x00	; 0
    3b74:	30 e0       	ldi	r19, 0x00	; 0
    3b76:	46 e1       	ldi	r20, 0x16	; 22
    3b78:	50 e0       	ldi	r21, 0x00	; 0
    3b7a:	65 e9       	ldi	r22, 0x95	; 149
    3b7c:	72 e1       	ldi	r23, 0x12	; 18
    3b7e:	80 91 8f 12 	lds	r24, 0x128F	; 0x80128f <_downlinkMessageBuffer>
    3b82:	90 91 90 12 	lds	r25, 0x1290	; 0x801290 <_downlinkMessageBuffer+0x1>
    3b86:	0e 94 e5 08 	call	0x11ca	; 0x11ca <xStreamBufferSend>
    3b8a:	8e e0       	ldi	r24, 0x0E	; 14
    3b8c:	03 c0       	rjmp	.+6      	; 0x3b94 <lora_driver_sendUploadMessage+0x18a>
    3b8e:	84 e1       	ldi	r24, 0x14	; 20
    3b90:	01 c0       	rjmp	.+2      	; 0x3b94 <lora_driver_sendUploadMessage+0x18a>
    3b92:	80 e0       	ldi	r24, 0x00	; 0
    3b94:	0f 90       	pop	r0
    3b96:	df 91       	pop	r29
    3b98:	cf 91       	pop	r28
    3b9a:	1f 91       	pop	r17
    3b9c:	0f 91       	pop	r16
    3b9e:	08 95       	ret

00003ba0 <lora_driver_setAdaptiveDataRate>:
    3ba0:	81 30       	cpi	r24, 0x01	; 1
    3ba2:	19 f0       	breq	.+6      	; 0x3baa <lora_driver_setAdaptiveDataRate+0xa>
    3ba4:	6e ed       	ldi	r22, 0xDE	; 222
    3ba6:	74 e0       	ldi	r23, 0x04	; 4
    3ba8:	02 c0       	rjmp	.+4      	; 0x3bae <lora_driver_setAdaptiveDataRate+0xe>
    3baa:	67 eb       	ldi	r22, 0xB7	; 183
    3bac:	75 e0       	ldi	r23, 0x05	; 5
    3bae:	82 ee       	ldi	r24, 0xE2	; 226
    3bb0:	94 e0       	ldi	r25, 0x04	; 4
    3bb2:	43 ce       	rjmp	.-890    	; 0x383a <_uploadMessageRc>
    3bb4:	08 95       	ret

00003bb6 <lora_driver_setReceiveDelay>:
    3bb6:	9f 93       	push	r25
    3bb8:	8f 93       	push	r24
    3bba:	83 e1       	ldi	r24, 0x13	; 19
    3bbc:	95 e0       	ldi	r25, 0x05	; 5
    3bbe:	9f 93       	push	r25
    3bc0:	8f 93       	push	r24
    3bc2:	8d ee       	ldi	r24, 0xED	; 237
    3bc4:	92 e1       	ldi	r25, 0x12	; 18
    3bc6:	9f 93       	push	r25
    3bc8:	8f 93       	push	r24
    3bca:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <sprintf>
    3bce:	60 e0       	ldi	r22, 0x00	; 0
    3bd0:	70 e0       	ldi	r23, 0x00	; 0
    3bd2:	8d ee       	ldi	r24, 0xED	; 237
    3bd4:	92 e1       	ldi	r25, 0x12	; 18
    3bd6:	31 de       	rcall	.-926    	; 0x383a <_uploadMessageRc>
    3bd8:	0f 90       	pop	r0
    3bda:	0f 90       	pop	r0
    3bdc:	0f 90       	pop	r0
    3bde:	0f 90       	pop	r0
    3be0:	0f 90       	pop	r0
    3be2:	0f 90       	pop	r0
    3be4:	08 95       	ret

00003be6 <lora_driver_configureToEu868>:
    3be6:	2f 92       	push	r2
    3be8:	3f 92       	push	r3
    3bea:	4f 92       	push	r4
    3bec:	5f 92       	push	r5
    3bee:	6f 92       	push	r6
    3bf0:	7f 92       	push	r7
    3bf2:	8f 92       	push	r8
    3bf4:	9f 92       	push	r9
    3bf6:	af 92       	push	r10
    3bf8:	bf 92       	push	r11
    3bfa:	cf 92       	push	r12
    3bfc:	df 92       	push	r13
    3bfe:	ef 92       	push	r14
    3c00:	ff 92       	push	r15
    3c02:	0f 93       	push	r16
    3c04:	1f 93       	push	r17
    3c06:	cf 93       	push	r28
    3c08:	df 93       	push	r29
    3c0a:	cd b7       	in	r28, 0x3d	; 61
    3c0c:	de b7       	in	r29, 0x3e	; 62
    3c0e:	a0 97       	sbiw	r28, 0x20	; 32
    3c10:	0f b6       	in	r0, 0x3f	; 63
    3c12:	f8 94       	cli
    3c14:	de bf       	out	0x3e, r29	; 62
    3c16:	0f be       	out	0x3f, r0	; 63
    3c18:	cd bf       	out	0x3d, r28	; 61
    3c1a:	60 e4       	ldi	r22, 0x40	; 64
    3c1c:	75 e0       	ldi	r23, 0x05	; 5
    3c1e:	8c e4       	ldi	r24, 0x4C	; 76
    3c20:	95 e0       	ldi	r25, 0x05	; 5
    3c22:	3c dd       	rcall	.-1416   	; 0x369c <_uploadMessage>
    3c24:	95 dd       	rcall	.-1238   	; 0x3750 <_reply2ReturnCode>
    3c26:	81 11       	cpse	r24, r1
    3c28:	a3 c0       	rjmp	.+326    	; 0x3d70 <lora_driver_configureToEu868+0x18a>
    3c2a:	80 e2       	ldi	r24, 0x20	; 32
    3c2c:	e2 e2       	ldi	r30, 0x22	; 34
    3c2e:	f2 e0       	ldi	r31, 0x02	; 2
    3c30:	de 01       	movw	r26, r28
    3c32:	11 96       	adiw	r26, 0x01	; 1
    3c34:	01 90       	ld	r0, Z+
    3c36:	0d 92       	st	X+, r0
    3c38:	8a 95       	dec	r24
    3c3a:	e1 f7       	brne	.-8      	; 0x3c34 <lora_driver_configureToEu868+0x4e>
    3c3c:	9e 01       	movw	r18, r28
    3c3e:	2f 5f       	subi	r18, 0xFF	; 255
    3c40:	3f 4f       	sbci	r19, 0xFF	; 255
    3c42:	69 01       	movw	r12, r18
    3c44:	e1 2c       	mov	r14, r1
    3c46:	f1 2c       	mov	r15, r1
    3c48:	0f 2e       	mov	r0, r31
    3c4a:	f8 e5       	ldi	r31, 0x58	; 88
    3c4c:	af 2e       	mov	r10, r31
    3c4e:	f5 e0       	ldi	r31, 0x05	; 5
    3c50:	bf 2e       	mov	r11, r31
    3c52:	f0 2d       	mov	r31, r0
    3c54:	0d ee       	ldi	r16, 0xED	; 237
    3c56:	12 e1       	ldi	r17, 0x12	; 18
    3c58:	0f 2e       	mov	r0, r31
    3c5a:	f1 e7       	ldi	r31, 0x71	; 113
    3c5c:	4f 2e       	mov	r4, r31
    3c5e:	f5 e0       	ldi	r31, 0x05	; 5
    3c60:	5f 2e       	mov	r5, r31
    3c62:	f0 2d       	mov	r31, r0
    3c64:	0f 2e       	mov	r0, r31
    3c66:	f8 e8       	ldi	r31, 0x88	; 136
    3c68:	8f 2e       	mov	r8, r31
    3c6a:	f5 e0       	ldi	r31, 0x05	; 5
    3c6c:	9f 2e       	mov	r9, r31
    3c6e:	f0 2d       	mov	r31, r0
    3c70:	0f 2e       	mov	r0, r31
    3c72:	f2 ea       	ldi	r31, 0xA2	; 162
    3c74:	6f 2e       	mov	r6, r31
    3c76:	f5 e0       	ldi	r31, 0x05	; 5
    3c78:	7f 2e       	mov	r7, r31
    3c7a:	f0 2d       	mov	r31, r0
    3c7c:	3e 2c       	mov	r3, r14
    3c7e:	2f 2c       	mov	r2, r15
    3c80:	ff 92       	push	r15
    3c82:	ef 92       	push	r14
    3c84:	bf 92       	push	r11
    3c86:	af 92       	push	r10
    3c88:	1f 93       	push	r17
    3c8a:	0f 93       	push	r16
    3c8c:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <sprintf>
    3c90:	60 e0       	ldi	r22, 0x00	; 0
    3c92:	70 e0       	ldi	r23, 0x00	; 0
    3c94:	c8 01       	movw	r24, r16
    3c96:	02 dd       	rcall	.-1532   	; 0x369c <_uploadMessage>
    3c98:	5b dd       	rcall	.-1354   	; 0x3750 <_reply2ReturnCode>
    3c9a:	0f 90       	pop	r0
    3c9c:	0f 90       	pop	r0
    3c9e:	0f 90       	pop	r0
    3ca0:	0f 90       	pop	r0
    3ca2:	0f 90       	pop	r0
    3ca4:	0f 90       	pop	r0
    3ca6:	81 11       	cpse	r24, r1
    3ca8:	63 c0       	rjmp	.+198    	; 0x3d70 <lora_driver_configureToEu868+0x18a>
    3caa:	32 e0       	ldi	r19, 0x02	; 2
    3cac:	3e 15       	cp	r19, r14
    3cae:	e8 f4       	brcc	.+58     	; 0x3cea <lora_driver_configureToEu868+0x104>
    3cb0:	f6 01       	movw	r30, r12
    3cb2:	83 81       	ldd	r24, Z+3	; 0x03
    3cb4:	8f 93       	push	r24
    3cb6:	82 81       	ldd	r24, Z+2	; 0x02
    3cb8:	8f 93       	push	r24
    3cba:	81 81       	ldd	r24, Z+1	; 0x01
    3cbc:	8f 93       	push	r24
    3cbe:	80 81       	ld	r24, Z
    3cc0:	8f 93       	push	r24
    3cc2:	ff 92       	push	r15
    3cc4:	ef 92       	push	r14
    3cc6:	5f 92       	push	r5
    3cc8:	4f 92       	push	r4
    3cca:	1f 93       	push	r17
    3ccc:	0f 93       	push	r16
    3cce:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <sprintf>
    3cd2:	60 e0       	ldi	r22, 0x00	; 0
    3cd4:	70 e0       	ldi	r23, 0x00	; 0
    3cd6:	c8 01       	movw	r24, r16
    3cd8:	e1 dc       	rcall	.-1598   	; 0x369c <_uploadMessage>
    3cda:	3a dd       	rcall	.-1420   	; 0x3750 <_reply2ReturnCode>
    3cdc:	0f b6       	in	r0, 0x3f	; 63
    3cde:	f8 94       	cli
    3ce0:	de bf       	out	0x3e, r29	; 62
    3ce2:	0f be       	out	0x3f, r0	; 63
    3ce4:	cd bf       	out	0x3d, r28	; 61
    3ce6:	81 11       	cpse	r24, r1
    3ce8:	43 c0       	rjmp	.+134    	; 0x3d70 <lora_driver_configureToEu868+0x18a>
    3cea:	2f 92       	push	r2
    3cec:	3f 92       	push	r3
    3cee:	9f 92       	push	r9
    3cf0:	8f 92       	push	r8
    3cf2:	1f 93       	push	r17
    3cf4:	0f 93       	push	r16
    3cf6:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <sprintf>
    3cfa:	60 e0       	ldi	r22, 0x00	; 0
    3cfc:	70 e0       	ldi	r23, 0x00	; 0
    3cfe:	c8 01       	movw	r24, r16
    3d00:	cd dc       	rcall	.-1638   	; 0x369c <_uploadMessage>
    3d02:	26 dd       	rcall	.-1460   	; 0x3750 <_reply2ReturnCode>
    3d04:	0f 90       	pop	r0
    3d06:	0f 90       	pop	r0
    3d08:	0f 90       	pop	r0
    3d0a:	0f 90       	pop	r0
    3d0c:	0f 90       	pop	r0
    3d0e:	0f 90       	pop	r0
    3d10:	81 11       	cpse	r24, r1
    3d12:	2e c0       	rjmp	.+92     	; 0x3d70 <lora_driver_configureToEu868+0x18a>
    3d14:	2f 92       	push	r2
    3d16:	3f 92       	push	r3
    3d18:	7f 92       	push	r7
    3d1a:	6f 92       	push	r6
    3d1c:	1f 93       	push	r17
    3d1e:	0f 93       	push	r16
    3d20:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <sprintf>
    3d24:	60 e0       	ldi	r22, 0x00	; 0
    3d26:	70 e0       	ldi	r23, 0x00	; 0
    3d28:	c8 01       	movw	r24, r16
    3d2a:	b8 dc       	rcall	.-1680   	; 0x369c <_uploadMessage>
    3d2c:	11 dd       	rcall	.-1502   	; 0x3750 <_reply2ReturnCode>
    3d2e:	0f 90       	pop	r0
    3d30:	0f 90       	pop	r0
    3d32:	0f 90       	pop	r0
    3d34:	0f 90       	pop	r0
    3d36:	0f 90       	pop	r0
    3d38:	0f 90       	pop	r0
    3d3a:	81 11       	cpse	r24, r1
    3d3c:	19 c0       	rjmp	.+50     	; 0x3d70 <lora_driver_configureToEu868+0x18a>
    3d3e:	3f ef       	ldi	r19, 0xFF	; 255
    3d40:	e3 1a       	sub	r14, r19
    3d42:	f3 0a       	sbc	r15, r19
    3d44:	84 e0       	ldi	r24, 0x04	; 4
    3d46:	c8 0e       	add	r12, r24
    3d48:	d1 1c       	adc	r13, r1
    3d4a:	98 e0       	ldi	r25, 0x08	; 8
    3d4c:	e9 16       	cp	r14, r25
    3d4e:	f1 04       	cpc	r15, r1
    3d50:	09 f0       	breq	.+2      	; 0x3d54 <lora_driver_configureToEu868+0x16e>
    3d52:	94 cf       	rjmp	.-216    	; 0x3c7c <lora_driver_configureToEu868+0x96>
    3d54:	60 e0       	ldi	r22, 0x00	; 0
    3d56:	70 e0       	ldi	r23, 0x00	; 0
    3d58:	8a eb       	ldi	r24, 0xBA	; 186
    3d5a:	95 e0       	ldi	r25, 0x05	; 5
    3d5c:	9f dc       	rcall	.-1730   	; 0x369c <_uploadMessage>
    3d5e:	f8 dc       	rcall	.-1552   	; 0x3750 <_reply2ReturnCode>
    3d60:	81 11       	cpse	r24, r1
    3d62:	06 c0       	rjmp	.+12     	; 0x3d70 <lora_driver_configureToEu868+0x18a>
    3d64:	60 e0       	ldi	r22, 0x00	; 0
    3d66:	70 e0       	ldi	r23, 0x00	; 0
    3d68:	8b ec       	ldi	r24, 0xCB	; 203
    3d6a:	95 e0       	ldi	r25, 0x05	; 5
    3d6c:	97 dc       	rcall	.-1746   	; 0x369c <_uploadMessage>
    3d6e:	f0 dc       	rcall	.-1568   	; 0x3750 <_reply2ReturnCode>
    3d70:	a0 96       	adiw	r28, 0x20	; 32
    3d72:	0f b6       	in	r0, 0x3f	; 63
    3d74:	f8 94       	cli
    3d76:	de bf       	out	0x3e, r29	; 62
    3d78:	0f be       	out	0x3f, r0	; 63
    3d7a:	cd bf       	out	0x3d, r28	; 61
    3d7c:	df 91       	pop	r29
    3d7e:	cf 91       	pop	r28
    3d80:	1f 91       	pop	r17
    3d82:	0f 91       	pop	r16
    3d84:	ff 90       	pop	r15
    3d86:	ef 90       	pop	r14
    3d88:	df 90       	pop	r13
    3d8a:	cf 90       	pop	r12
    3d8c:	bf 90       	pop	r11
    3d8e:	af 90       	pop	r10
    3d90:	9f 90       	pop	r9
    3d92:	8f 90       	pop	r8
    3d94:	7f 90       	pop	r7
    3d96:	6f 90       	pop	r6
    3d98:	5f 90       	pop	r5
    3d9a:	4f 90       	pop	r4
    3d9c:	3f 90       	pop	r3
    3d9e:	2f 90       	pop	r2
    3da0:	08 95       	ret

00003da2 <lora_driver_setOtaaIdentity>:
    3da2:	ef 92       	push	r14
    3da4:	ff 92       	push	r15
    3da6:	0f 93       	push	r16
    3da8:	1f 93       	push	r17
    3daa:	cf 93       	push	r28
    3dac:	df 93       	push	r29
    3dae:	ec 01       	movw	r28, r24
    3db0:	8b 01       	movw	r16, r22
    3db2:	7a 01       	movw	r14, r20
    3db4:	81 e0       	ldi	r24, 0x01	; 1
    3db6:	f4 de       	rcall	.-536    	; 0x3ba0 <lora_driver_setAdaptiveDataRate>
    3db8:	81 11       	cpse	r24, r1
    3dba:	0d c0       	rjmp	.+26     	; 0x3dd6 <lora_driver_setOtaaIdentity+0x34>
    3dbc:	ce 01       	movw	r24, r28
    3dbe:	d4 dd       	rcall	.-1112   	; 0x3968 <lora_driver_setApplicationIdentifier>
    3dc0:	81 11       	cpse	r24, r1
    3dc2:	09 c0       	rjmp	.+18     	; 0x3dd6 <lora_driver_setOtaaIdentity+0x34>
    3dc4:	c8 01       	movw	r24, r16
    3dc6:	e1 dd       	rcall	.-1086   	; 0x398a <lora_driver_setApplicationKey>
    3dc8:	81 11       	cpse	r24, r1
    3dca:	05 c0       	rjmp	.+10     	; 0x3dd6 <lora_driver_setOtaaIdentity+0x34>
    3dcc:	c7 01       	movw	r24, r14
    3dce:	bb dd       	rcall	.-1162   	; 0x3946 <lora_driver_setDeviceIdentifier>
    3dd0:	81 11       	cpse	r24, r1
    3dd2:	01 c0       	rjmp	.+2      	; 0x3dd6 <lora_driver_setOtaaIdentity+0x34>
    3dd4:	eb dd       	rcall	.-1066   	; 0x39ac <lora_driver_saveMac>
    3dd6:	df 91       	pop	r29
    3dd8:	cf 91       	pop	r28
    3dda:	1f 91       	pop	r17
    3ddc:	0f 91       	pop	r16
    3dde:	ff 90       	pop	r15
    3de0:	ef 90       	pop	r14
    3de2:	08 95       	ret

00003de4 <lora_driver_mapReturnCodeToText>:
    3de4:	90 e0       	ldi	r25, 0x00	; 0
    3de6:	fc 01       	movw	r30, r24
    3de8:	ee 0f       	add	r30, r30
    3dea:	ff 1f       	adc	r31, r31
    3dec:	8e 0f       	add	r24, r30
    3dee:	9f 1f       	adc	r25, r31
    3df0:	fc 01       	movw	r30, r24
    3df2:	ec 56       	subi	r30, 0x6C	; 108
    3df4:	f9 4f       	sbci	r31, 0xF9	; 249
    3df6:	81 81       	ldd	r24, Z+1	; 0x01
    3df8:	92 81       	ldd	r25, Z+2	; 0x02
    3dfa:	08 95       	ret

00003dfc <decode_port_no>:
    3dfc:	dc 01       	movw	r26, r24
    3dfe:	00 97       	sbiw	r24, 0x00	; 0
    3e00:	29 f1       	breq	.+74     	; 0x3e4c <decode_port_no+0x50>
    3e02:	fb 01       	movw	r30, r22
    3e04:	20 81       	ld	r18, Z
    3e06:	fc 01       	movw	r30, r24
    3e08:	01 90       	ld	r0, Z+
    3e0a:	00 20       	and	r0, r0
    3e0c:	e9 f7       	brne	.-6      	; 0x3e08 <decode_port_no+0xc>
    3e0e:	31 97       	sbiw	r30, 0x01	; 1
    3e10:	e8 1b       	sub	r30, r24
    3e12:	f9 0b       	sbc	r31, r25
    3e14:	82 2f       	mov	r24, r18
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	e8 17       	cp	r30, r24
    3e1a:	f9 07       	cpc	r31, r25
    3e1c:	c8 f0       	brcs	.+50     	; 0x3e50 <decode_port_no+0x54>
    3e1e:	80 e0       	ldi	r24, 0x00	; 0
    3e20:	08 c0       	rjmp	.+16     	; 0x3e32 <decode_port_no+0x36>
    3e22:	88 0f       	add	r24, r24
    3e24:	38 2f       	mov	r19, r24
    3e26:	33 0f       	add	r19, r19
    3e28:	33 0f       	add	r19, r19
    3e2a:	83 0f       	add	r24, r19
    3e2c:	80 53       	subi	r24, 0x30	; 48
    3e2e:	89 0f       	add	r24, r25
    3e30:	2f 5f       	subi	r18, 0xFF	; 255
    3e32:	fd 01       	movw	r30, r26
    3e34:	e2 0f       	add	r30, r18
    3e36:	f1 1d       	adc	r31, r1
    3e38:	90 81       	ld	r25, Z
    3e3a:	30 ed       	ldi	r19, 0xD0	; 208
    3e3c:	39 0f       	add	r19, r25
    3e3e:	3a 30       	cpi	r19, 0x0A	; 10
    3e40:	10 f4       	brcc	.+4      	; 0x3e46 <decode_port_no+0x4a>
    3e42:	91 11       	cpse	r25, r1
    3e44:	ee cf       	rjmp	.-36     	; 0x3e22 <decode_port_no+0x26>
    3e46:	fb 01       	movw	r30, r22
    3e48:	20 83       	st	Z, r18
    3e4a:	08 95       	ret
    3e4c:	80 e0       	ldi	r24, 0x00	; 0
    3e4e:	08 95       	ret
    3e50:	80 e0       	ldi	r24, 0x00	; 0
    3e52:	08 95       	ret

00003e54 <decode_hexadecimal_string_bytes>:
    3e54:	0f 93       	push	r16
    3e56:	1f 93       	push	r17
    3e58:	cf 93       	push	r28
    3e5a:	df 93       	push	r29
    3e5c:	dc 01       	movw	r26, r24
    3e5e:	ea 01       	movw	r28, r20
    3e60:	20 97       	sbiw	r28, 0x00	; 0
    3e62:	e1 f1       	breq	.+120    	; 0x3edc <decode_hexadecimal_string_bytes+0x88>
    3e64:	fa 01       	movw	r30, r20
    3e66:	01 90       	ld	r0, Z+
    3e68:	00 20       	and	r0, r0
    3e6a:	e9 f7       	brne	.-6      	; 0x3e66 <decode_hexadecimal_string_bytes+0x12>
    3e6c:	31 97       	sbiw	r30, 0x01	; 1
    3e6e:	e4 1b       	sub	r30, r20
    3e70:	f5 0b       	sbc	r31, r21
    3e72:	32 97       	sbiw	r30, 0x02	; 2
    3e74:	10 f5       	brcc	.+68     	; 0x3eba <decode_hexadecimal_string_bytes+0x66>
    3e76:	32 c0       	rjmp	.+100    	; 0x3edc <decode_hexadecimal_string_bytes+0x88>
    3e78:	8d 01       	movw	r16, r26
    3e7a:	04 0f       	add	r16, r20
    3e7c:	15 1f       	adc	r17, r21
    3e7e:	30 e0       	ldi	r19, 0x00	; 0
    3e80:	ae 01       	movw	r20, r28
    3e82:	42 0f       	add	r20, r18
    3e84:	53 1f       	adc	r21, r19
    3e86:	fa 01       	movw	r30, r20
    3e88:	90 81       	ld	r25, Z
    3e8a:	91 34       	cpi	r25, 0x41	; 65
    3e8c:	28 f0       	brcs	.+10     	; 0x3e98 <decode_hexadecimal_string_bytes+0x44>
    3e8e:	97 53       	subi	r25, 0x37	; 55
    3e90:	59 2f       	mov	r21, r25
    3e92:	52 95       	swap	r21
    3e94:	50 7f       	andi	r21, 0xF0	; 240
    3e96:	03 c0       	rjmp	.+6      	; 0x3e9e <decode_hexadecimal_string_bytes+0x4a>
    3e98:	59 2f       	mov	r21, r25
    3e9a:	52 95       	swap	r21
    3e9c:	50 7f       	andi	r21, 0xF0	; 240
    3e9e:	2c 0f       	add	r18, r28
    3ea0:	3d 1f       	adc	r19, r29
    3ea2:	f9 01       	movw	r30, r18
    3ea4:	91 81       	ldd	r25, Z+1	; 0x01
    3ea6:	91 34       	cpi	r25, 0x41	; 65
    3ea8:	10 f0       	brcs	.+4      	; 0x3eae <decode_hexadecimal_string_bytes+0x5a>
    3eaa:	97 53       	subi	r25, 0x37	; 55
    3eac:	01 c0       	rjmp	.+2      	; 0x3eb0 <decode_hexadecimal_string_bytes+0x5c>
    3eae:	90 53       	subi	r25, 0x30	; 48
    3eb0:	95 0f       	add	r25, r21
    3eb2:	f8 01       	movw	r30, r16
    3eb4:	90 83       	st	Z, r25
    3eb6:	8f 5f       	subi	r24, 0xFF	; 255
    3eb8:	01 c0       	rjmp	.+2      	; 0x3ebc <decode_hexadecimal_string_bytes+0x68>
    3eba:	80 e0       	ldi	r24, 0x00	; 0
    3ebc:	28 2f       	mov	r18, r24
    3ebe:	22 0f       	add	r18, r18
    3ec0:	48 2f       	mov	r20, r24
    3ec2:	50 e0       	ldi	r21, 0x00	; 0
    3ec4:	fe 01       	movw	r30, r28
    3ec6:	01 90       	ld	r0, Z+
    3ec8:	00 20       	and	r0, r0
    3eca:	e9 f7       	brne	.-6      	; 0x3ec6 <decode_hexadecimal_string_bytes+0x72>
    3ecc:	31 97       	sbiw	r30, 0x01	; 1
    3ece:	ec 1b       	sub	r30, r28
    3ed0:	fd 0b       	sbc	r31, r29
    3ed2:	4e 17       	cp	r20, r30
    3ed4:	5f 07       	cpc	r21, r31
    3ed6:	10 f4       	brcc	.+4      	; 0x3edc <decode_hexadecimal_string_bytes+0x88>
    3ed8:	86 13       	cpse	r24, r22
    3eda:	ce cf       	rjmp	.-100    	; 0x3e78 <decode_hexadecimal_string_bytes+0x24>
    3edc:	df 91       	pop	r29
    3ede:	cf 91       	pop	r28
    3ee0:	1f 91       	pop	r17
    3ee2:	0f 91       	pop	r16
    3ee4:	08 95       	ret

00003ee6 <serial_create>:
    3ee6:	2f 92       	push	r2
    3ee8:	3f 92       	push	r3
    3eea:	4f 92       	push	r4
    3eec:	5f 92       	push	r5
    3eee:	6f 92       	push	r6
    3ef0:	7f 92       	push	r7
    3ef2:	8f 92       	push	r8
    3ef4:	9f 92       	push	r9
    3ef6:	af 92       	push	r10
    3ef8:	cf 92       	push	r12
    3efa:	ef 92       	push	r14
    3efc:	ff 92       	push	r15
    3efe:	0f 93       	push	r16
    3f00:	1f 93       	push	r17
    3f02:	cf 93       	push	r28
    3f04:	df 93       	push	r29
    3f06:	cd b7       	in	r28, 0x3d	; 61
    3f08:	de b7       	in	r29, 0x3e	; 62
    3f0a:	f8 2e       	mov	r15, r24
    3f0c:	2a 01       	movw	r4, r20
    3f0e:	3b 01       	movw	r6, r22
    3f10:	88 e0       	ldi	r24, 0x08	; 8
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	0e 94 37 2c 	call	0x586e	; 0x586e <malloc>
    3f18:	8c 01       	movw	r16, r24
    3f1a:	8f 2d       	mov	r24, r15
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	fc 01       	movw	r30, r24
    3f20:	ee 0f       	add	r30, r30
    3f22:	ff 1f       	adc	r31, r31
    3f24:	e9 5b       	subi	r30, 0xB9	; 185
    3f26:	fc 4e       	sbci	r31, 0xEC	; 236
    3f28:	11 83       	std	Z+1, r17	; 0x01
    3f2a:	00 83       	st	Z, r16
    3f2c:	01 15       	cp	r16, r1
    3f2e:	11 05       	cpc	r17, r1
    3f30:	09 f4       	brne	.+2      	; 0x3f34 <serial_create+0x4e>
    3f32:	69 c0       	rjmp	.+210    	; 0x4006 <serial_create+0x120>
    3f34:	88 0f       	add	r24, r24
    3f36:	99 1f       	adc	r25, r25
    3f38:	fc 01       	movw	r30, r24
    3f3a:	e5 5f       	subi	r30, 0xF5	; 245
    3f3c:	fd 4f       	sbci	r31, 0xFD	; 253
    3f3e:	80 81       	ld	r24, Z
    3f40:	91 81       	ldd	r25, Z+1	; 0x01
    3f42:	d8 01       	movw	r26, r16
    3f44:	8d 93       	st	X+, r24
    3f46:	9c 93       	st	X, r25
    3f48:	6c 2d       	mov	r22, r12
    3f4a:	70 e0       	ldi	r23, 0x00	; 0
    3f4c:	84 e0       	ldi	r24, 0x04	; 4
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	0e 94 1d 2c 	call	0x583a	; 0x583a <calloc>
    3f54:	1c 01       	movw	r2, r24
    3f56:	61 e0       	ldi	r22, 0x01	; 1
    3f58:	70 e0       	ldi	r23, 0x00	; 0
    3f5a:	86 e0       	ldi	r24, 0x06	; 6
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    3f5e:	0e 94 1d 2c 	call	0x583a	; 0x583a <calloc>
    3f62:	7c 01       	movw	r14, r24
    3f64:	4c 2d       	mov	r20, r12
    3f66:	b1 01       	movw	r22, r2
    3f68:	f5 d6       	rcall	.+3562   	; 0x4d54 <fifo_init>
    3f6a:	f8 01       	movw	r30, r16
    3f6c:	f5 82       	std	Z+5, r15	; 0x05
    3f6e:	e4 82       	std	Z+4, r14	; 0x04
    3f70:	6a 2d       	mov	r22, r10
    3f72:	70 e0       	ldi	r23, 0x00	; 0
    3f74:	84 e0       	ldi	r24, 0x04	; 4
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	0e 94 1d 2c 	call	0x583a	; 0x583a <calloc>
    3f7c:	1c 01       	movw	r2, r24
    3f7e:	61 e0       	ldi	r22, 0x01	; 1
    3f80:	70 e0       	ldi	r23, 0x00	; 0
    3f82:	86 e0       	ldi	r24, 0x06	; 6
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	0e 94 1d 2c 	call	0x583a	; 0x583a <calloc>
    3f8a:	7c 01       	movw	r14, r24
    3f8c:	4a 2d       	mov	r20, r10
    3f8e:	b1 01       	movw	r22, r2
    3f90:	e1 d6       	rcall	.+3522   	; 0x4d54 <fifo_init>
    3f92:	d8 01       	movw	r26, r16
    3f94:	13 96       	adiw	r26, 0x03	; 3
    3f96:	fc 92       	st	X, r15
    3f98:	ee 92       	st	-X, r14
    3f9a:	12 97       	sbiw	r26, 0x02	; 2
    3f9c:	17 96       	adiw	r26, 0x07	; 7
    3f9e:	9c 92       	st	X, r9
    3fa0:	8e 92       	st	-X, r8
    3fa2:	16 97       	sbiw	r26, 0x06	; 6
    3fa4:	ff b6       	in	r15, 0x3f	; 63
    3fa6:	f8 94       	cli
    3fa8:	ed 91       	ld	r30, X+
    3faa:	fc 91       	ld	r31, X
    3fac:	11 97       	sbiw	r26, 0x01	; 1
    3fae:	36 97       	sbiw	r30, 0x06	; 6
    3fb0:	80 81       	ld	r24, Z
    3fb2:	82 60       	ori	r24, 0x02	; 2
    3fb4:	80 83       	st	Z, r24
    3fb6:	8d 90       	ld	r8, X+
    3fb8:	9c 90       	ld	r9, X
    3fba:	c3 01       	movw	r24, r6
    3fbc:	b2 01       	movw	r22, r4
    3fbe:	bf d7       	rcall	.+3966   	; 0x4f3e <__floatunsisf>
    3fc0:	20 e0       	ldi	r18, 0x00	; 0
    3fc2:	30 e0       	ldi	r19, 0x00	; 0
    3fc4:	40 e0       	ldi	r20, 0x00	; 0
    3fc6:	51 e4       	ldi	r21, 0x41	; 65
    3fc8:	0e 94 04 28 	call	0x5008	; 0x5008 <__mulsf3>
    3fcc:	9b 01       	movw	r18, r22
    3fce:	ac 01       	movw	r20, r24
    3fd0:	60 e0       	ldi	r22, 0x00	; 0
    3fd2:	74 e2       	ldi	r23, 0x24	; 36
    3fd4:	84 e7       	ldi	r24, 0x74	; 116
    3fd6:	9b e4       	ldi	r25, 0x4B	; 75
    3fd8:	40 d7       	rcall	.+3712   	; 0x4e5a <__divsf3>
    3fda:	20 e0       	ldi	r18, 0x00	; 0
    3fdc:	30 e0       	ldi	r19, 0x00	; 0
    3fde:	40 e8       	ldi	r20, 0x80	; 128
    3fe0:	5f e3       	ldi	r21, 0x3F	; 63
    3fe2:	d4 d6       	rcall	.+3496   	; 0x4d8c <__subsf3>
    3fe4:	fd d9       	rcall	.-3078   	; 0x33e0 <__fixunssfsi>
    3fe6:	f4 01       	movw	r30, r8
    3fe8:	32 97       	sbiw	r30, 0x02	; 2
    3fea:	60 83       	st	Z, r22
    3fec:	d8 01       	movw	r26, r16
    3fee:	ed 91       	ld	r30, X+
    3ff0:	fc 91       	ld	r31, X
    3ff2:	11 97       	sbiw	r26, 0x01	; 1
    3ff4:	35 97       	sbiw	r30, 0x05	; 5
    3ff6:	88 e9       	ldi	r24, 0x98	; 152
    3ff8:	80 83       	st	Z, r24
    3ffa:	ed 91       	ld	r30, X+
    3ffc:	fc 91       	ld	r31, X
    3ffe:	34 97       	sbiw	r30, 0x04	; 4
    4000:	86 e0       	ldi	r24, 0x06	; 6
    4002:	80 83       	st	Z, r24
    4004:	ff be       	out	0x3f, r15	; 63
    4006:	c8 01       	movw	r24, r16
    4008:	df 91       	pop	r29
    400a:	cf 91       	pop	r28
    400c:	1f 91       	pop	r17
    400e:	0f 91       	pop	r16
    4010:	ff 90       	pop	r15
    4012:	ef 90       	pop	r14
    4014:	cf 90       	pop	r12
    4016:	af 90       	pop	r10
    4018:	9f 90       	pop	r9
    401a:	8f 90       	pop	r8
    401c:	7f 90       	pop	r7
    401e:	6f 90       	pop	r6
    4020:	5f 90       	pop	r5
    4022:	4f 90       	pop	r4
    4024:	3f 90       	pop	r3
    4026:	2f 90       	pop	r2
    4028:	08 95       	ret

0000402a <serial_sendByte>:
    402a:	cf 93       	push	r28
    402c:	df 93       	push	r29
    402e:	dc 01       	movw	r26, r24
    4030:	89 2b       	or	r24, r25
    4032:	01 f1       	breq	.+64     	; 0x4074 <serial_sendByte+0x4a>
    4034:	12 96       	adiw	r26, 0x02	; 2
    4036:	ed 91       	ld	r30, X+
    4038:	fc 91       	ld	r31, X
    403a:	13 97       	sbiw	r26, 0x03	; 3
    403c:	93 81       	ldd	r25, Z+3	; 0x03
    403e:	82 81       	ldd	r24, Z+2	; 0x02
    4040:	25 81       	ldd	r18, Z+5	; 0x05
    4042:	98 1b       	sub	r25, r24
    4044:	92 23       	and	r25, r18
    4046:	84 81       	ldd	r24, Z+4	; 0x04
    4048:	98 17       	cp	r25, r24
    404a:	b1 f0       	breq	.+44     	; 0x4078 <serial_sendByte+0x4e>
    404c:	83 81       	ldd	r24, Z+3	; 0x03
    404e:	26 95       	lsr	r18
    4050:	28 23       	and	r18, r24
    4052:	c0 81       	ld	r28, Z
    4054:	d1 81       	ldd	r29, Z+1	; 0x01
    4056:	c2 0f       	add	r28, r18
    4058:	d1 1d       	adc	r29, r1
    405a:	68 83       	st	Y, r22
    405c:	8f 5f       	subi	r24, 0xFF	; 255
    405e:	95 81       	ldd	r25, Z+5	; 0x05
    4060:	89 23       	and	r24, r25
    4062:	83 83       	std	Z+3, r24	; 0x03
    4064:	ed 91       	ld	r30, X+
    4066:	fc 91       	ld	r31, X
    4068:	35 97       	sbiw	r30, 0x05	; 5
    406a:	80 81       	ld	r24, Z
    406c:	80 62       	ori	r24, 0x20	; 32
    406e:	80 83       	st	Z, r24
    4070:	80 e0       	ldi	r24, 0x00	; 0
    4072:	03 c0       	rjmp	.+6      	; 0x407a <serial_sendByte+0x50>
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	01 c0       	rjmp	.+2      	; 0x407a <serial_sendByte+0x50>
    4078:	82 e0       	ldi	r24, 0x02	; 2
    407a:	df 91       	pop	r29
    407c:	cf 91       	pop	r28
    407e:	08 95       	ret

00004080 <serial_sendBytes>:
    4080:	ef 92       	push	r14
    4082:	ff 92       	push	r15
    4084:	0f 93       	push	r16
    4086:	1f 93       	push	r17
    4088:	cf 93       	push	r28
    408a:	df 93       	push	r29
    408c:	7c 01       	movw	r14, r24
    408e:	00 97       	sbiw	r24, 0x00	; 0
    4090:	09 f4       	brne	.+2      	; 0x4094 <serial_sendBytes+0x14>
    4092:	41 c0       	rjmp	.+130    	; 0x4116 <serial_sendBytes+0x96>
    4094:	dc 01       	movw	r26, r24
    4096:	12 96       	adiw	r26, 0x02	; 2
    4098:	ed 91       	ld	r30, X+
    409a:	fc 91       	ld	r31, X
    409c:	13 97       	sbiw	r26, 0x03	; 3
    409e:	93 81       	ldd	r25, Z+3	; 0x03
    40a0:	82 81       	ldd	r24, Z+2	; 0x02
    40a2:	98 1b       	sub	r25, r24
    40a4:	85 81       	ldd	r24, Z+5	; 0x05
    40a6:	98 23       	and	r25, r24
    40a8:	84 81       	ldd	r24, Z+4	; 0x04
    40aa:	89 1b       	sub	r24, r25
    40ac:	86 17       	cp	r24, r22
    40ae:	a8 f1       	brcs	.+106    	; 0x411a <serial_sendBytes+0x9a>
    40b0:	66 23       	and	r22, r22
    40b2:	41 f1       	breq	.+80     	; 0x4104 <serial_sendBytes+0x84>
    40b4:	84 2f       	mov	r24, r20
    40b6:	95 2f       	mov	r25, r21
    40b8:	dc 01       	movw	r26, r24
    40ba:	61 50       	subi	r22, 0x01	; 1
    40bc:	46 2f       	mov	r20, r22
    40be:	50 e0       	ldi	r21, 0x00	; 0
    40c0:	4f 5f       	subi	r20, 0xFF	; 255
    40c2:	5f 4f       	sbci	r21, 0xFF	; 255
    40c4:	48 0f       	add	r20, r24
    40c6:	59 1f       	adc	r21, r25
    40c8:	e7 01       	movw	r28, r14
    40ca:	ea 81       	ldd	r30, Y+2	; 0x02
    40cc:	fb 81       	ldd	r31, Y+3	; 0x03
    40ce:	93 81       	ldd	r25, Z+3	; 0x03
    40d0:	82 81       	ldd	r24, Z+2	; 0x02
    40d2:	25 81       	ldd	r18, Z+5	; 0x05
    40d4:	98 1b       	sub	r25, r24
    40d6:	92 23       	and	r25, r18
    40d8:	84 81       	ldd	r24, Z+4	; 0x04
    40da:	98 17       	cp	r25, r24
    40dc:	79 f0       	breq	.+30     	; 0x40fc <serial_sendBytes+0x7c>
    40de:	8c 91       	ld	r24, X
    40e0:	93 81       	ldd	r25, Z+3	; 0x03
    40e2:	26 95       	lsr	r18
    40e4:	29 23       	and	r18, r25
    40e6:	60 81       	ld	r22, Z
    40e8:	71 81       	ldd	r23, Z+1	; 0x01
    40ea:	8b 01       	movw	r16, r22
    40ec:	02 0f       	add	r16, r18
    40ee:	11 1d       	adc	r17, r1
    40f0:	e8 01       	movw	r28, r16
    40f2:	88 83       	st	Y, r24
    40f4:	9f 5f       	subi	r25, 0xFF	; 255
    40f6:	85 81       	ldd	r24, Z+5	; 0x05
    40f8:	98 23       	and	r25, r24
    40fa:	93 83       	std	Z+3, r25	; 0x03
    40fc:	11 96       	adiw	r26, 0x01	; 1
    40fe:	a4 17       	cp	r26, r20
    4100:	b5 07       	cpc	r27, r21
    4102:	11 f7       	brne	.-60     	; 0x40c8 <serial_sendBytes+0x48>
    4104:	d7 01       	movw	r26, r14
    4106:	ed 91       	ld	r30, X+
    4108:	fc 91       	ld	r31, X
    410a:	35 97       	sbiw	r30, 0x05	; 5
    410c:	80 81       	ld	r24, Z
    410e:	80 62       	ori	r24, 0x20	; 32
    4110:	80 83       	st	Z, r24
    4112:	80 e0       	ldi	r24, 0x00	; 0
    4114:	03 c0       	rjmp	.+6      	; 0x411c <serial_sendBytes+0x9c>
    4116:	81 e0       	ldi	r24, 0x01	; 1
    4118:	01 c0       	rjmp	.+2      	; 0x411c <serial_sendBytes+0x9c>
    411a:	82 e0       	ldi	r24, 0x02	; 2
    411c:	df 91       	pop	r29
    411e:	cf 91       	pop	r28
    4120:	1f 91       	pop	r17
    4122:	0f 91       	pop	r16
    4124:	ff 90       	pop	r15
    4126:	ef 90       	pop	r14
    4128:	08 95       	ret

0000412a <serial_getByte>:
    412a:	00 97       	sbiw	r24, 0x00	; 0
    412c:	d1 f0       	breq	.+52     	; 0x4162 <serial_getByte+0x38>
    412e:	dc 01       	movw	r26, r24
    4130:	14 96       	adiw	r26, 0x04	; 4
    4132:	ed 91       	ld	r30, X+
    4134:	fc 91       	ld	r31, X
    4136:	15 97       	sbiw	r26, 0x05	; 5
    4138:	93 81       	ldd	r25, Z+3	; 0x03
    413a:	82 81       	ldd	r24, Z+2	; 0x02
    413c:	98 17       	cp	r25, r24
    413e:	99 f0       	breq	.+38     	; 0x4166 <serial_getByte+0x3c>
    4140:	92 81       	ldd	r25, Z+2	; 0x02
    4142:	85 81       	ldd	r24, Z+5	; 0x05
    4144:	86 95       	lsr	r24
    4146:	89 23       	and	r24, r25
    4148:	a0 81       	ld	r26, Z
    414a:	b1 81       	ldd	r27, Z+1	; 0x01
    414c:	a8 0f       	add	r26, r24
    414e:	b1 1d       	adc	r27, r1
    4150:	8c 91       	ld	r24, X
    4152:	db 01       	movw	r26, r22
    4154:	8c 93       	st	X, r24
    4156:	9f 5f       	subi	r25, 0xFF	; 255
    4158:	85 81       	ldd	r24, Z+5	; 0x05
    415a:	98 23       	and	r25, r24
    415c:	92 83       	std	Z+2, r25	; 0x02
    415e:	80 e0       	ldi	r24, 0x00	; 0
    4160:	08 95       	ret
    4162:	81 e0       	ldi	r24, 0x01	; 1
    4164:	08 95       	ret
    4166:	83 e0       	ldi	r24, 0x03	; 3
    4168:	08 95       	ret

0000416a <__vector_25>:
    416a:	1f 92       	push	r1
    416c:	0f 92       	push	r0
    416e:	0f b6       	in	r0, 0x3f	; 63
    4170:	0f 92       	push	r0
    4172:	11 24       	eor	r1, r1
    4174:	0b b6       	in	r0, 0x3b	; 59
    4176:	0f 92       	push	r0
    4178:	2f 93       	push	r18
    417a:	3f 93       	push	r19
    417c:	4f 93       	push	r20
    417e:	5f 93       	push	r21
    4180:	6f 93       	push	r22
    4182:	7f 93       	push	r23
    4184:	8f 93       	push	r24
    4186:	9f 93       	push	r25
    4188:	af 93       	push	r26
    418a:	bf 93       	push	r27
    418c:	cf 93       	push	r28
    418e:	df 93       	push	r29
    4190:	ef 93       	push	r30
    4192:	ff 93       	push	r31
    4194:	a0 91 47 13 	lds	r26, 0x1347	; 0x801347 <_ser_handle>
    4198:	b0 91 48 13 	lds	r27, 0x1348	; 0x801348 <_ser_handle+0x1>
    419c:	10 97       	sbiw	r26, 0x00	; 0
    419e:	11 f1       	breq	.+68     	; 0x41e4 <__vector_25+0x7a>
    41a0:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    41a4:	14 96       	adiw	r26, 0x04	; 4
    41a6:	ed 91       	ld	r30, X+
    41a8:	fc 91       	ld	r31, X
    41aa:	15 97       	sbiw	r26, 0x05	; 5
    41ac:	93 81       	ldd	r25, Z+3	; 0x03
    41ae:	82 81       	ldd	r24, Z+2	; 0x02
    41b0:	25 81       	ldd	r18, Z+5	; 0x05
    41b2:	98 1b       	sub	r25, r24
    41b4:	92 23       	and	r25, r18
    41b6:	84 81       	ldd	r24, Z+4	; 0x04
    41b8:	98 17       	cp	r25, r24
    41ba:	61 f0       	breq	.+24     	; 0x41d4 <__vector_25+0x6a>
    41bc:	83 81       	ldd	r24, Z+3	; 0x03
    41be:	26 95       	lsr	r18
    41c0:	28 23       	and	r18, r24
    41c2:	c0 81       	ld	r28, Z
    41c4:	d1 81       	ldd	r29, Z+1	; 0x01
    41c6:	c2 0f       	add	r28, r18
    41c8:	d1 1d       	adc	r29, r1
    41ca:	68 83       	st	Y, r22
    41cc:	8f 5f       	subi	r24, 0xFF	; 255
    41ce:	95 81       	ldd	r25, Z+5	; 0x05
    41d0:	89 23       	and	r24, r25
    41d2:	83 83       	std	Z+3, r24	; 0x03
    41d4:	16 96       	adiw	r26, 0x06	; 6
    41d6:	ed 91       	ld	r30, X+
    41d8:	fc 91       	ld	r31, X
    41da:	17 97       	sbiw	r26, 0x07	; 7
    41dc:	30 97       	sbiw	r30, 0x00	; 0
    41de:	11 f0       	breq	.+4      	; 0x41e4 <__vector_25+0x7a>
    41e0:	cd 01       	movw	r24, r26
    41e2:	19 95       	eicall
    41e4:	ff 91       	pop	r31
    41e6:	ef 91       	pop	r30
    41e8:	df 91       	pop	r29
    41ea:	cf 91       	pop	r28
    41ec:	bf 91       	pop	r27
    41ee:	af 91       	pop	r26
    41f0:	9f 91       	pop	r25
    41f2:	8f 91       	pop	r24
    41f4:	7f 91       	pop	r23
    41f6:	6f 91       	pop	r22
    41f8:	5f 91       	pop	r21
    41fa:	4f 91       	pop	r20
    41fc:	3f 91       	pop	r19
    41fe:	2f 91       	pop	r18
    4200:	0f 90       	pop	r0
    4202:	0b be       	out	0x3b, r0	; 59
    4204:	0f 90       	pop	r0
    4206:	0f be       	out	0x3f, r0	; 63
    4208:	0f 90       	pop	r0
    420a:	1f 90       	pop	r1
    420c:	18 95       	reti

0000420e <__vector_26>:
    420e:	1f 92       	push	r1
    4210:	0f 92       	push	r0
    4212:	0f b6       	in	r0, 0x3f	; 63
    4214:	0f 92       	push	r0
    4216:	11 24       	eor	r1, r1
    4218:	0b b6       	in	r0, 0x3b	; 59
    421a:	0f 92       	push	r0
    421c:	2f 93       	push	r18
    421e:	8f 93       	push	r24
    4220:	9f 93       	push	r25
    4222:	af 93       	push	r26
    4224:	bf 93       	push	r27
    4226:	ef 93       	push	r30
    4228:	ff 93       	push	r31
    422a:	e0 91 47 13 	lds	r30, 0x1347	; 0x801347 <_ser_handle>
    422e:	f0 91 48 13 	lds	r31, 0x1348	; 0x801348 <_ser_handle+0x1>
    4232:	30 97       	sbiw	r30, 0x00	; 0
    4234:	b9 f0       	breq	.+46     	; 0x4264 <__vector_26+0x56>
    4236:	02 80       	ldd	r0, Z+2	; 0x02
    4238:	f3 81       	ldd	r31, Z+3	; 0x03
    423a:	e0 2d       	mov	r30, r0
    423c:	93 81       	ldd	r25, Z+3	; 0x03
    423e:	82 81       	ldd	r24, Z+2	; 0x02
    4240:	98 17       	cp	r25, r24
    4242:	b1 f0       	breq	.+44     	; 0x4270 <__vector_26+0x62>
    4244:	92 81       	ldd	r25, Z+2	; 0x02
    4246:	85 81       	ldd	r24, Z+5	; 0x05
    4248:	28 2f       	mov	r18, r24
    424a:	26 95       	lsr	r18
    424c:	29 23       	and	r18, r25
    424e:	a0 81       	ld	r26, Z
    4250:	b1 81       	ldd	r27, Z+1	; 0x01
    4252:	a2 0f       	add	r26, r18
    4254:	b1 1d       	adc	r27, r1
    4256:	2c 91       	ld	r18, X
    4258:	9f 5f       	subi	r25, 0xFF	; 255
    425a:	89 23       	and	r24, r25
    425c:	82 83       	std	Z+2, r24	; 0x02
    425e:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4262:	0b c0       	rjmp	.+22     	; 0x427a <__vector_26+0x6c>
    4264:	e1 ec       	ldi	r30, 0xC1	; 193
    4266:	f0 e0       	ldi	r31, 0x00	; 0
    4268:	80 81       	ld	r24, Z
    426a:	8f 7d       	andi	r24, 0xDF	; 223
    426c:	80 83       	st	Z, r24
    426e:	05 c0       	rjmp	.+10     	; 0x427a <__vector_26+0x6c>
    4270:	e1 ec       	ldi	r30, 0xC1	; 193
    4272:	f0 e0       	ldi	r31, 0x00	; 0
    4274:	80 81       	ld	r24, Z
    4276:	8f 7d       	andi	r24, 0xDF	; 223
    4278:	80 83       	st	Z, r24
    427a:	ff 91       	pop	r31
    427c:	ef 91       	pop	r30
    427e:	bf 91       	pop	r27
    4280:	af 91       	pop	r26
    4282:	9f 91       	pop	r25
    4284:	8f 91       	pop	r24
    4286:	2f 91       	pop	r18
    4288:	0f 90       	pop	r0
    428a:	0b be       	out	0x3b, r0	; 59
    428c:	0f 90       	pop	r0
    428e:	0f be       	out	0x3f, r0	; 63
    4290:	0f 90       	pop	r0
    4292:	1f 90       	pop	r1
    4294:	18 95       	reti

00004296 <__vector_36>:
    4296:	1f 92       	push	r1
    4298:	0f 92       	push	r0
    429a:	0f b6       	in	r0, 0x3f	; 63
    429c:	0f 92       	push	r0
    429e:	11 24       	eor	r1, r1
    42a0:	0b b6       	in	r0, 0x3b	; 59
    42a2:	0f 92       	push	r0
    42a4:	2f 93       	push	r18
    42a6:	3f 93       	push	r19
    42a8:	4f 93       	push	r20
    42aa:	5f 93       	push	r21
    42ac:	6f 93       	push	r22
    42ae:	7f 93       	push	r23
    42b0:	8f 93       	push	r24
    42b2:	9f 93       	push	r25
    42b4:	af 93       	push	r26
    42b6:	bf 93       	push	r27
    42b8:	cf 93       	push	r28
    42ba:	df 93       	push	r29
    42bc:	ef 93       	push	r30
    42be:	ff 93       	push	r31
    42c0:	a0 91 49 13 	lds	r26, 0x1349	; 0x801349 <_ser_handle+0x2>
    42c4:	b0 91 4a 13 	lds	r27, 0x134A	; 0x80134a <_ser_handle+0x3>
    42c8:	10 97       	sbiw	r26, 0x00	; 0
    42ca:	11 f1       	breq	.+68     	; 0x4310 <__vector_36+0x7a>
    42cc:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    42d0:	14 96       	adiw	r26, 0x04	; 4
    42d2:	ed 91       	ld	r30, X+
    42d4:	fc 91       	ld	r31, X
    42d6:	15 97       	sbiw	r26, 0x05	; 5
    42d8:	93 81       	ldd	r25, Z+3	; 0x03
    42da:	82 81       	ldd	r24, Z+2	; 0x02
    42dc:	25 81       	ldd	r18, Z+5	; 0x05
    42de:	98 1b       	sub	r25, r24
    42e0:	92 23       	and	r25, r18
    42e2:	84 81       	ldd	r24, Z+4	; 0x04
    42e4:	98 17       	cp	r25, r24
    42e6:	61 f0       	breq	.+24     	; 0x4300 <__vector_36+0x6a>
    42e8:	83 81       	ldd	r24, Z+3	; 0x03
    42ea:	26 95       	lsr	r18
    42ec:	28 23       	and	r18, r24
    42ee:	c0 81       	ld	r28, Z
    42f0:	d1 81       	ldd	r29, Z+1	; 0x01
    42f2:	c2 0f       	add	r28, r18
    42f4:	d1 1d       	adc	r29, r1
    42f6:	68 83       	st	Y, r22
    42f8:	8f 5f       	subi	r24, 0xFF	; 255
    42fa:	95 81       	ldd	r25, Z+5	; 0x05
    42fc:	89 23       	and	r24, r25
    42fe:	83 83       	std	Z+3, r24	; 0x03
    4300:	16 96       	adiw	r26, 0x06	; 6
    4302:	ed 91       	ld	r30, X+
    4304:	fc 91       	ld	r31, X
    4306:	17 97       	sbiw	r26, 0x07	; 7
    4308:	30 97       	sbiw	r30, 0x00	; 0
    430a:	11 f0       	breq	.+4      	; 0x4310 <__vector_36+0x7a>
    430c:	cd 01       	movw	r24, r26
    430e:	19 95       	eicall
    4310:	ff 91       	pop	r31
    4312:	ef 91       	pop	r30
    4314:	df 91       	pop	r29
    4316:	cf 91       	pop	r28
    4318:	bf 91       	pop	r27
    431a:	af 91       	pop	r26
    431c:	9f 91       	pop	r25
    431e:	8f 91       	pop	r24
    4320:	7f 91       	pop	r23
    4322:	6f 91       	pop	r22
    4324:	5f 91       	pop	r21
    4326:	4f 91       	pop	r20
    4328:	3f 91       	pop	r19
    432a:	2f 91       	pop	r18
    432c:	0f 90       	pop	r0
    432e:	0b be       	out	0x3b, r0	; 59
    4330:	0f 90       	pop	r0
    4332:	0f be       	out	0x3f, r0	; 63
    4334:	0f 90       	pop	r0
    4336:	1f 90       	pop	r1
    4338:	18 95       	reti

0000433a <__vector_37>:
    433a:	1f 92       	push	r1
    433c:	0f 92       	push	r0
    433e:	0f b6       	in	r0, 0x3f	; 63
    4340:	0f 92       	push	r0
    4342:	11 24       	eor	r1, r1
    4344:	0b b6       	in	r0, 0x3b	; 59
    4346:	0f 92       	push	r0
    4348:	2f 93       	push	r18
    434a:	8f 93       	push	r24
    434c:	9f 93       	push	r25
    434e:	af 93       	push	r26
    4350:	bf 93       	push	r27
    4352:	ef 93       	push	r30
    4354:	ff 93       	push	r31
    4356:	e0 91 49 13 	lds	r30, 0x1349	; 0x801349 <_ser_handle+0x2>
    435a:	f0 91 4a 13 	lds	r31, 0x134A	; 0x80134a <_ser_handle+0x3>
    435e:	30 97       	sbiw	r30, 0x00	; 0
    4360:	b9 f0       	breq	.+46     	; 0x4390 <__vector_37+0x56>
    4362:	02 80       	ldd	r0, Z+2	; 0x02
    4364:	f3 81       	ldd	r31, Z+3	; 0x03
    4366:	e0 2d       	mov	r30, r0
    4368:	93 81       	ldd	r25, Z+3	; 0x03
    436a:	82 81       	ldd	r24, Z+2	; 0x02
    436c:	98 17       	cp	r25, r24
    436e:	b1 f0       	breq	.+44     	; 0x439c <__vector_37+0x62>
    4370:	92 81       	ldd	r25, Z+2	; 0x02
    4372:	85 81       	ldd	r24, Z+5	; 0x05
    4374:	28 2f       	mov	r18, r24
    4376:	26 95       	lsr	r18
    4378:	29 23       	and	r18, r25
    437a:	a0 81       	ld	r26, Z
    437c:	b1 81       	ldd	r27, Z+1	; 0x01
    437e:	a2 0f       	add	r26, r18
    4380:	b1 1d       	adc	r27, r1
    4382:	2c 91       	ld	r18, X
    4384:	9f 5f       	subi	r25, 0xFF	; 255
    4386:	89 23       	and	r24, r25
    4388:	82 83       	std	Z+2, r24	; 0x02
    438a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    438e:	0b c0       	rjmp	.+22     	; 0x43a6 <__vector_37+0x6c>
    4390:	e9 ec       	ldi	r30, 0xC9	; 201
    4392:	f0 e0       	ldi	r31, 0x00	; 0
    4394:	80 81       	ld	r24, Z
    4396:	8f 7d       	andi	r24, 0xDF	; 223
    4398:	80 83       	st	Z, r24
    439a:	05 c0       	rjmp	.+10     	; 0x43a6 <__vector_37+0x6c>
    439c:	e9 ec       	ldi	r30, 0xC9	; 201
    439e:	f0 e0       	ldi	r31, 0x00	; 0
    43a0:	80 81       	ld	r24, Z
    43a2:	8f 7d       	andi	r24, 0xDF	; 223
    43a4:	80 83       	st	Z, r24
    43a6:	ff 91       	pop	r31
    43a8:	ef 91       	pop	r30
    43aa:	bf 91       	pop	r27
    43ac:	af 91       	pop	r26
    43ae:	9f 91       	pop	r25
    43b0:	8f 91       	pop	r24
    43b2:	2f 91       	pop	r18
    43b4:	0f 90       	pop	r0
    43b6:	0b be       	out	0x3b, r0	; 59
    43b8:	0f 90       	pop	r0
    43ba:	0f be       	out	0x3f, r0	; 63
    43bc:	0f 90       	pop	r0
    43be:	1f 90       	pop	r1
    43c0:	18 95       	reti

000043c2 <__vector_51>:
    43c2:	1f 92       	push	r1
    43c4:	0f 92       	push	r0
    43c6:	0f b6       	in	r0, 0x3f	; 63
    43c8:	0f 92       	push	r0
    43ca:	11 24       	eor	r1, r1
    43cc:	0b b6       	in	r0, 0x3b	; 59
    43ce:	0f 92       	push	r0
    43d0:	2f 93       	push	r18
    43d2:	3f 93       	push	r19
    43d4:	4f 93       	push	r20
    43d6:	5f 93       	push	r21
    43d8:	6f 93       	push	r22
    43da:	7f 93       	push	r23
    43dc:	8f 93       	push	r24
    43de:	9f 93       	push	r25
    43e0:	af 93       	push	r26
    43e2:	bf 93       	push	r27
    43e4:	cf 93       	push	r28
    43e6:	df 93       	push	r29
    43e8:	ef 93       	push	r30
    43ea:	ff 93       	push	r31
    43ec:	a0 91 4b 13 	lds	r26, 0x134B	; 0x80134b <_ser_handle+0x4>
    43f0:	b0 91 4c 13 	lds	r27, 0x134C	; 0x80134c <_ser_handle+0x5>
    43f4:	10 97       	sbiw	r26, 0x00	; 0
    43f6:	11 f1       	breq	.+68     	; 0x443c <__vector_51+0x7a>
    43f8:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    43fc:	14 96       	adiw	r26, 0x04	; 4
    43fe:	ed 91       	ld	r30, X+
    4400:	fc 91       	ld	r31, X
    4402:	15 97       	sbiw	r26, 0x05	; 5
    4404:	93 81       	ldd	r25, Z+3	; 0x03
    4406:	82 81       	ldd	r24, Z+2	; 0x02
    4408:	25 81       	ldd	r18, Z+5	; 0x05
    440a:	98 1b       	sub	r25, r24
    440c:	92 23       	and	r25, r18
    440e:	84 81       	ldd	r24, Z+4	; 0x04
    4410:	98 17       	cp	r25, r24
    4412:	61 f0       	breq	.+24     	; 0x442c <__vector_51+0x6a>
    4414:	83 81       	ldd	r24, Z+3	; 0x03
    4416:	26 95       	lsr	r18
    4418:	28 23       	and	r18, r24
    441a:	c0 81       	ld	r28, Z
    441c:	d1 81       	ldd	r29, Z+1	; 0x01
    441e:	c2 0f       	add	r28, r18
    4420:	d1 1d       	adc	r29, r1
    4422:	68 83       	st	Y, r22
    4424:	8f 5f       	subi	r24, 0xFF	; 255
    4426:	95 81       	ldd	r25, Z+5	; 0x05
    4428:	89 23       	and	r24, r25
    442a:	83 83       	std	Z+3, r24	; 0x03
    442c:	16 96       	adiw	r26, 0x06	; 6
    442e:	ed 91       	ld	r30, X+
    4430:	fc 91       	ld	r31, X
    4432:	17 97       	sbiw	r26, 0x07	; 7
    4434:	30 97       	sbiw	r30, 0x00	; 0
    4436:	11 f0       	breq	.+4      	; 0x443c <__vector_51+0x7a>
    4438:	cd 01       	movw	r24, r26
    443a:	19 95       	eicall
    443c:	ff 91       	pop	r31
    443e:	ef 91       	pop	r30
    4440:	df 91       	pop	r29
    4442:	cf 91       	pop	r28
    4444:	bf 91       	pop	r27
    4446:	af 91       	pop	r26
    4448:	9f 91       	pop	r25
    444a:	8f 91       	pop	r24
    444c:	7f 91       	pop	r23
    444e:	6f 91       	pop	r22
    4450:	5f 91       	pop	r21
    4452:	4f 91       	pop	r20
    4454:	3f 91       	pop	r19
    4456:	2f 91       	pop	r18
    4458:	0f 90       	pop	r0
    445a:	0b be       	out	0x3b, r0	; 59
    445c:	0f 90       	pop	r0
    445e:	0f be       	out	0x3f, r0	; 63
    4460:	0f 90       	pop	r0
    4462:	1f 90       	pop	r1
    4464:	18 95       	reti

00004466 <__vector_52>:
    4466:	1f 92       	push	r1
    4468:	0f 92       	push	r0
    446a:	0f b6       	in	r0, 0x3f	; 63
    446c:	0f 92       	push	r0
    446e:	11 24       	eor	r1, r1
    4470:	0b b6       	in	r0, 0x3b	; 59
    4472:	0f 92       	push	r0
    4474:	2f 93       	push	r18
    4476:	8f 93       	push	r24
    4478:	9f 93       	push	r25
    447a:	af 93       	push	r26
    447c:	bf 93       	push	r27
    447e:	ef 93       	push	r30
    4480:	ff 93       	push	r31
    4482:	e0 91 4b 13 	lds	r30, 0x134B	; 0x80134b <_ser_handle+0x4>
    4486:	f0 91 4c 13 	lds	r31, 0x134C	; 0x80134c <_ser_handle+0x5>
    448a:	30 97       	sbiw	r30, 0x00	; 0
    448c:	b9 f0       	breq	.+46     	; 0x44bc <__vector_52+0x56>
    448e:	02 80       	ldd	r0, Z+2	; 0x02
    4490:	f3 81       	ldd	r31, Z+3	; 0x03
    4492:	e0 2d       	mov	r30, r0
    4494:	93 81       	ldd	r25, Z+3	; 0x03
    4496:	82 81       	ldd	r24, Z+2	; 0x02
    4498:	98 17       	cp	r25, r24
    449a:	b1 f0       	breq	.+44     	; 0x44c8 <__vector_52+0x62>
    449c:	92 81       	ldd	r25, Z+2	; 0x02
    449e:	85 81       	ldd	r24, Z+5	; 0x05
    44a0:	28 2f       	mov	r18, r24
    44a2:	26 95       	lsr	r18
    44a4:	29 23       	and	r18, r25
    44a6:	a0 81       	ld	r26, Z
    44a8:	b1 81       	ldd	r27, Z+1	; 0x01
    44aa:	a2 0f       	add	r26, r18
    44ac:	b1 1d       	adc	r27, r1
    44ae:	2c 91       	ld	r18, X
    44b0:	9f 5f       	subi	r25, 0xFF	; 255
    44b2:	89 23       	and	r24, r25
    44b4:	82 83       	std	Z+2, r24	; 0x02
    44b6:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    44ba:	0b c0       	rjmp	.+22     	; 0x44d2 <__vector_52+0x6c>
    44bc:	e1 ed       	ldi	r30, 0xD1	; 209
    44be:	f0 e0       	ldi	r31, 0x00	; 0
    44c0:	80 81       	ld	r24, Z
    44c2:	8f 7d       	andi	r24, 0xDF	; 223
    44c4:	80 83       	st	Z, r24
    44c6:	05 c0       	rjmp	.+10     	; 0x44d2 <__vector_52+0x6c>
    44c8:	e1 ed       	ldi	r30, 0xD1	; 209
    44ca:	f0 e0       	ldi	r31, 0x00	; 0
    44cc:	80 81       	ld	r24, Z
    44ce:	8f 7d       	andi	r24, 0xDF	; 223
    44d0:	80 83       	st	Z, r24
    44d2:	ff 91       	pop	r31
    44d4:	ef 91       	pop	r30
    44d6:	bf 91       	pop	r27
    44d8:	af 91       	pop	r26
    44da:	9f 91       	pop	r25
    44dc:	8f 91       	pop	r24
    44de:	2f 91       	pop	r18
    44e0:	0f 90       	pop	r0
    44e2:	0b be       	out	0x3b, r0	; 59
    44e4:	0f 90       	pop	r0
    44e6:	0f be       	out	0x3f, r0	; 63
    44e8:	0f 90       	pop	r0
    44ea:	1f 90       	pop	r1
    44ec:	18 95       	reti

000044ee <__vector_54>:
    44ee:	1f 92       	push	r1
    44f0:	0f 92       	push	r0
    44f2:	0f b6       	in	r0, 0x3f	; 63
    44f4:	0f 92       	push	r0
    44f6:	11 24       	eor	r1, r1
    44f8:	0b b6       	in	r0, 0x3b	; 59
    44fa:	0f 92       	push	r0
    44fc:	2f 93       	push	r18
    44fe:	3f 93       	push	r19
    4500:	4f 93       	push	r20
    4502:	5f 93       	push	r21
    4504:	6f 93       	push	r22
    4506:	7f 93       	push	r23
    4508:	8f 93       	push	r24
    450a:	9f 93       	push	r25
    450c:	af 93       	push	r26
    450e:	bf 93       	push	r27
    4510:	cf 93       	push	r28
    4512:	df 93       	push	r29
    4514:	ef 93       	push	r30
    4516:	ff 93       	push	r31
    4518:	a0 91 4d 13 	lds	r26, 0x134D	; 0x80134d <_ser_handle+0x6>
    451c:	b0 91 4e 13 	lds	r27, 0x134E	; 0x80134e <_ser_handle+0x7>
    4520:	10 97       	sbiw	r26, 0x00	; 0
    4522:	11 f1       	breq	.+68     	; 0x4568 <__vector_54+0x7a>
    4524:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4528:	14 96       	adiw	r26, 0x04	; 4
    452a:	ed 91       	ld	r30, X+
    452c:	fc 91       	ld	r31, X
    452e:	15 97       	sbiw	r26, 0x05	; 5
    4530:	93 81       	ldd	r25, Z+3	; 0x03
    4532:	82 81       	ldd	r24, Z+2	; 0x02
    4534:	25 81       	ldd	r18, Z+5	; 0x05
    4536:	98 1b       	sub	r25, r24
    4538:	92 23       	and	r25, r18
    453a:	84 81       	ldd	r24, Z+4	; 0x04
    453c:	98 17       	cp	r25, r24
    453e:	61 f0       	breq	.+24     	; 0x4558 <__vector_54+0x6a>
    4540:	83 81       	ldd	r24, Z+3	; 0x03
    4542:	26 95       	lsr	r18
    4544:	28 23       	and	r18, r24
    4546:	c0 81       	ld	r28, Z
    4548:	d1 81       	ldd	r29, Z+1	; 0x01
    454a:	c2 0f       	add	r28, r18
    454c:	d1 1d       	adc	r29, r1
    454e:	68 83       	st	Y, r22
    4550:	8f 5f       	subi	r24, 0xFF	; 255
    4552:	95 81       	ldd	r25, Z+5	; 0x05
    4554:	89 23       	and	r24, r25
    4556:	83 83       	std	Z+3, r24	; 0x03
    4558:	16 96       	adiw	r26, 0x06	; 6
    455a:	ed 91       	ld	r30, X+
    455c:	fc 91       	ld	r31, X
    455e:	17 97       	sbiw	r26, 0x07	; 7
    4560:	30 97       	sbiw	r30, 0x00	; 0
    4562:	11 f0       	breq	.+4      	; 0x4568 <__vector_54+0x7a>
    4564:	cd 01       	movw	r24, r26
    4566:	19 95       	eicall
    4568:	ff 91       	pop	r31
    456a:	ef 91       	pop	r30
    456c:	df 91       	pop	r29
    456e:	cf 91       	pop	r28
    4570:	bf 91       	pop	r27
    4572:	af 91       	pop	r26
    4574:	9f 91       	pop	r25
    4576:	8f 91       	pop	r24
    4578:	7f 91       	pop	r23
    457a:	6f 91       	pop	r22
    457c:	5f 91       	pop	r21
    457e:	4f 91       	pop	r20
    4580:	3f 91       	pop	r19
    4582:	2f 91       	pop	r18
    4584:	0f 90       	pop	r0
    4586:	0b be       	out	0x3b, r0	; 59
    4588:	0f 90       	pop	r0
    458a:	0f be       	out	0x3f, r0	; 63
    458c:	0f 90       	pop	r0
    458e:	1f 90       	pop	r1
    4590:	18 95       	reti

00004592 <__vector_55>:
    4592:	1f 92       	push	r1
    4594:	0f 92       	push	r0
    4596:	0f b6       	in	r0, 0x3f	; 63
    4598:	0f 92       	push	r0
    459a:	11 24       	eor	r1, r1
    459c:	0b b6       	in	r0, 0x3b	; 59
    459e:	0f 92       	push	r0
    45a0:	2f 93       	push	r18
    45a2:	8f 93       	push	r24
    45a4:	9f 93       	push	r25
    45a6:	af 93       	push	r26
    45a8:	bf 93       	push	r27
    45aa:	ef 93       	push	r30
    45ac:	ff 93       	push	r31
    45ae:	e0 91 4d 13 	lds	r30, 0x134D	; 0x80134d <_ser_handle+0x6>
    45b2:	f0 91 4e 13 	lds	r31, 0x134E	; 0x80134e <_ser_handle+0x7>
    45b6:	30 97       	sbiw	r30, 0x00	; 0
    45b8:	b9 f0       	breq	.+46     	; 0x45e8 <__vector_55+0x56>
    45ba:	02 80       	ldd	r0, Z+2	; 0x02
    45bc:	f3 81       	ldd	r31, Z+3	; 0x03
    45be:	e0 2d       	mov	r30, r0
    45c0:	93 81       	ldd	r25, Z+3	; 0x03
    45c2:	82 81       	ldd	r24, Z+2	; 0x02
    45c4:	98 17       	cp	r25, r24
    45c6:	b1 f0       	breq	.+44     	; 0x45f4 <__vector_55+0x62>
    45c8:	92 81       	ldd	r25, Z+2	; 0x02
    45ca:	85 81       	ldd	r24, Z+5	; 0x05
    45cc:	28 2f       	mov	r18, r24
    45ce:	26 95       	lsr	r18
    45d0:	29 23       	and	r18, r25
    45d2:	a0 81       	ld	r26, Z
    45d4:	b1 81       	ldd	r27, Z+1	; 0x01
    45d6:	a2 0f       	add	r26, r18
    45d8:	b1 1d       	adc	r27, r1
    45da:	2c 91       	ld	r18, X
    45dc:	9f 5f       	subi	r25, 0xFF	; 255
    45de:	89 23       	and	r24, r25
    45e0:	82 83       	std	Z+2, r24	; 0x02
    45e2:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    45e6:	0b c0       	rjmp	.+22     	; 0x45fe <__vector_55+0x6c>
    45e8:	e1 e3       	ldi	r30, 0x31	; 49
    45ea:	f1 e0       	ldi	r31, 0x01	; 1
    45ec:	80 81       	ld	r24, Z
    45ee:	8f 7d       	andi	r24, 0xDF	; 223
    45f0:	80 83       	st	Z, r24
    45f2:	05 c0       	rjmp	.+10     	; 0x45fe <__vector_55+0x6c>
    45f4:	e1 e3       	ldi	r30, 0x31	; 49
    45f6:	f1 e0       	ldi	r31, 0x01	; 1
    45f8:	80 81       	ld	r24, Z
    45fa:	8f 7d       	andi	r24, 0xDF	; 223
    45fc:	80 83       	st	Z, r24
    45fe:	ff 91       	pop	r31
    4600:	ef 91       	pop	r30
    4602:	bf 91       	pop	r27
    4604:	af 91       	pop	r26
    4606:	9f 91       	pop	r25
    4608:	8f 91       	pop	r24
    460a:	2f 91       	pop	r18
    460c:	0f 90       	pop	r0
    460e:	0b be       	out	0x3b, r0	; 59
    4610:	0f 90       	pop	r0
    4612:	0f be       	out	0x3f, r0	; 63
    4614:	0f 90       	pop	r0
    4616:	1f 90       	pop	r1
    4618:	18 95       	reti

0000461a <usart_getchar>:
    461a:	cf 93       	push	r28
    461c:	df 93       	push	r29
    461e:	1f 92       	push	r1
    4620:	cd b7       	in	r28, 0x3d	; 61
    4622:	de b7       	in	r29, 0x3e	; 62
    4624:	be 01       	movw	r22, r28
    4626:	6f 5f       	subi	r22, 0xFF	; 255
    4628:	7f 4f       	sbci	r23, 0xFF	; 255
    462a:	80 91 4f 13 	lds	r24, 0x134F	; 0x80134f <_com_serial_instance>
    462e:	90 91 50 13 	lds	r25, 0x1350	; 0x801350 <_com_serial_instance+0x1>
    4632:	7b dd       	rcall	.-1290   	; 0x412a <serial_getByte>
    4634:	81 11       	cpse	r24, r1
    4636:	f6 cf       	rjmp	.-20     	; 0x4624 <usart_getchar+0xa>
    4638:	89 81       	ldd	r24, Y+1	; 0x01
    463a:	90 e0       	ldi	r25, 0x00	; 0
    463c:	0f 90       	pop	r0
    463e:	df 91       	pop	r29
    4640:	cf 91       	pop	r28
    4642:	08 95       	ret

00004644 <usart_putchar>:
    4644:	68 2f       	mov	r22, r24
    4646:	80 91 4f 13 	lds	r24, 0x134F	; 0x80134f <_com_serial_instance>
    464a:	90 91 50 13 	lds	r25, 0x1350	; 0x801350 <_com_serial_instance+0x1>
    464e:	ed dc       	rcall	.-1574   	; 0x402a <serial_sendByte>
    4650:	80 e0       	ldi	r24, 0x00	; 0
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	08 95       	ret

00004656 <stdio_initialise>:
    4656:	8f 92       	push	r8
    4658:	9f 92       	push	r9
    465a:	af 92       	push	r10
    465c:	cf 92       	push	r12
    465e:	ef 92       	push	r14
    4660:	0f 93       	push	r16
    4662:	81 2c       	mov	r8, r1
    4664:	91 2c       	mov	r9, r1
    4666:	68 94       	set
    4668:	aa 24       	eor	r10, r10
    466a:	a7 f8       	bld	r10, 7
    466c:	68 94       	set
    466e:	cc 24       	eor	r12, r12
    4670:	c7 f8       	bld	r12, 7
    4672:	e1 2c       	mov	r14, r1
    4674:	00 e0       	ldi	r16, 0x00	; 0
    4676:	23 e0       	ldi	r18, 0x03	; 3
    4678:	40 e0       	ldi	r20, 0x00	; 0
    467a:	51 ee       	ldi	r21, 0xE1	; 225
    467c:	60 e0       	ldi	r22, 0x00	; 0
    467e:	70 e0       	ldi	r23, 0x00	; 0
    4680:	32 dc       	rcall	.-1948   	; 0x3ee6 <serial_create>
    4682:	90 93 50 13 	sts	0x1350, r25	; 0x801350 <_com_serial_instance+0x1>
    4686:	80 93 4f 13 	sts	0x134F, r24	; 0x80134f <_com_serial_instance>
    468a:	ec e7       	ldi	r30, 0x7C	; 124
    468c:	f3 e1       	ldi	r31, 0x13	; 19
    468e:	83 e1       	ldi	r24, 0x13	; 19
    4690:	92 e0       	ldi	r25, 0x02	; 2
    4692:	91 83       	std	Z+1, r25	; 0x01
    4694:	80 83       	st	Z, r24
    4696:	93 83       	std	Z+3, r25	; 0x03
    4698:	82 83       	std	Z+2, r24	; 0x02
    469a:	0f 91       	pop	r16
    469c:	ef 90       	pop	r14
    469e:	cf 90       	pop	r12
    46a0:	af 90       	pop	r10
    46a2:	9f 90       	pop	r9
    46a4:	8f 90       	pop	r8
    46a6:	08 95       	ret

000046a8 <_turn_off>:
    46a8:	90 e0       	ldi	r25, 0x00	; 0
    46aa:	fc 01       	movw	r30, r24
    46ac:	ee 0f       	add	r30, r30
    46ae:	ff 1f       	adc	r31, r31
    46b0:	e8 0f       	add	r30, r24
    46b2:	f9 1f       	adc	r31, r25
    46b4:	ee 0f       	add	r30, r30
    46b6:	ff 1f       	adc	r31, r31
    46b8:	ef 5a       	subi	r30, 0xAF	; 175
    46ba:	fc 4e       	sbci	r31, 0xEC	; 236
    46bc:	23 81       	ldd	r18, Z+3	; 0x03
    46be:	21 11       	cpse	r18, r1
    46c0:	1f c0       	rjmp	.+62     	; 0x4700 <_turn_off+0x58>
    46c2:	9c 01       	movw	r18, r24
    46c4:	22 0f       	add	r18, r18
    46c6:	33 1f       	adc	r19, r19
    46c8:	f9 01       	movw	r30, r18
    46ca:	e8 0f       	add	r30, r24
    46cc:	f9 1f       	adc	r31, r25
    46ce:	ee 0f       	add	r30, r30
    46d0:	ff 1f       	adc	r31, r31
    46d2:	ef 5a       	subi	r30, 0xAF	; 175
    46d4:	fc 4e       	sbci	r31, 0xEC	; 236
    46d6:	a0 81       	ld	r26, Z
    46d8:	b1 81       	ldd	r27, Z+1	; 0x01
    46da:	4c 91       	ld	r20, X
    46dc:	f9 01       	movw	r30, r18
    46de:	e8 0f       	add	r30, r24
    46e0:	f9 1f       	adc	r31, r25
    46e2:	ee 0f       	add	r30, r30
    46e4:	ff 1f       	adc	r31, r31
    46e6:	ef 5a       	subi	r30, 0xAF	; 175
    46e8:	fc 4e       	sbci	r31, 0xEC	; 236
    46ea:	81 e0       	ldi	r24, 0x01	; 1
    46ec:	90 e0       	ldi	r25, 0x00	; 0
    46ee:	02 80       	ldd	r0, Z+2	; 0x02
    46f0:	02 c0       	rjmp	.+4      	; 0x46f6 <_turn_off+0x4e>
    46f2:	88 0f       	add	r24, r24
    46f4:	99 1f       	adc	r25, r25
    46f6:	0a 94       	dec	r0
    46f8:	e2 f7       	brpl	.-8      	; 0x46f2 <_turn_off+0x4a>
    46fa:	84 2b       	or	r24, r20
    46fc:	8c 93       	st	X, r24
    46fe:	08 95       	ret
    4700:	fc 01       	movw	r30, r24
    4702:	ee 0f       	add	r30, r30
    4704:	ff 1f       	adc	r31, r31
    4706:	df 01       	movw	r26, r30
    4708:	a8 0f       	add	r26, r24
    470a:	b9 1f       	adc	r27, r25
    470c:	aa 0f       	add	r26, r26
    470e:	bb 1f       	adc	r27, r27
    4710:	af 5a       	subi	r26, 0xAF	; 175
    4712:	bc 4e       	sbci	r27, 0xEC	; 236
    4714:	0d 90       	ld	r0, X+
    4716:	bc 91       	ld	r27, X
    4718:	a0 2d       	mov	r26, r0
    471a:	2c 91       	ld	r18, X
    471c:	e8 0f       	add	r30, r24
    471e:	f9 1f       	adc	r31, r25
    4720:	ee 0f       	add	r30, r30
    4722:	ff 1f       	adc	r31, r31
    4724:	ef 5a       	subi	r30, 0xAF	; 175
    4726:	fc 4e       	sbci	r31, 0xEC	; 236
    4728:	81 e0       	ldi	r24, 0x01	; 1
    472a:	90 e0       	ldi	r25, 0x00	; 0
    472c:	02 80       	ldd	r0, Z+2	; 0x02
    472e:	02 c0       	rjmp	.+4      	; 0x4734 <_turn_off+0x8c>
    4730:	88 0f       	add	r24, r24
    4732:	99 1f       	adc	r25, r25
    4734:	0a 94       	dec	r0
    4736:	e2 f7       	brpl	.-8      	; 0x4730 <_turn_off+0x88>
    4738:	80 95       	com	r24
    473a:	82 23       	and	r24, r18
    473c:	8c 93       	st	X, r24
    473e:	08 95       	ret

00004740 <_turn_on>:
    4740:	90 e0       	ldi	r25, 0x00	; 0
    4742:	fc 01       	movw	r30, r24
    4744:	ee 0f       	add	r30, r30
    4746:	ff 1f       	adc	r31, r31
    4748:	e8 0f       	add	r30, r24
    474a:	f9 1f       	adc	r31, r25
    474c:	ee 0f       	add	r30, r30
    474e:	ff 1f       	adc	r31, r31
    4750:	ef 5a       	subi	r30, 0xAF	; 175
    4752:	fc 4e       	sbci	r31, 0xEC	; 236
    4754:	23 81       	ldd	r18, Z+3	; 0x03
    4756:	21 11       	cpse	r18, r1
    4758:	20 c0       	rjmp	.+64     	; 0x479a <_turn_on+0x5a>
    475a:	9c 01       	movw	r18, r24
    475c:	22 0f       	add	r18, r18
    475e:	33 1f       	adc	r19, r19
    4760:	f9 01       	movw	r30, r18
    4762:	e8 0f       	add	r30, r24
    4764:	f9 1f       	adc	r31, r25
    4766:	ee 0f       	add	r30, r30
    4768:	ff 1f       	adc	r31, r31
    476a:	ef 5a       	subi	r30, 0xAF	; 175
    476c:	fc 4e       	sbci	r31, 0xEC	; 236
    476e:	a0 81       	ld	r26, Z
    4770:	b1 81       	ldd	r27, Z+1	; 0x01
    4772:	4c 91       	ld	r20, X
    4774:	f9 01       	movw	r30, r18
    4776:	e8 0f       	add	r30, r24
    4778:	f9 1f       	adc	r31, r25
    477a:	ee 0f       	add	r30, r30
    477c:	ff 1f       	adc	r31, r31
    477e:	ef 5a       	subi	r30, 0xAF	; 175
    4780:	fc 4e       	sbci	r31, 0xEC	; 236
    4782:	81 e0       	ldi	r24, 0x01	; 1
    4784:	90 e0       	ldi	r25, 0x00	; 0
    4786:	02 80       	ldd	r0, Z+2	; 0x02
    4788:	02 c0       	rjmp	.+4      	; 0x478e <_turn_on+0x4e>
    478a:	88 0f       	add	r24, r24
    478c:	99 1f       	adc	r25, r25
    478e:	0a 94       	dec	r0
    4790:	e2 f7       	brpl	.-8      	; 0x478a <_turn_on+0x4a>
    4792:	80 95       	com	r24
    4794:	84 23       	and	r24, r20
    4796:	8c 93       	st	X, r24
    4798:	08 95       	ret
    479a:	fc 01       	movw	r30, r24
    479c:	ee 0f       	add	r30, r30
    479e:	ff 1f       	adc	r31, r31
    47a0:	df 01       	movw	r26, r30
    47a2:	a8 0f       	add	r26, r24
    47a4:	b9 1f       	adc	r27, r25
    47a6:	aa 0f       	add	r26, r26
    47a8:	bb 1f       	adc	r27, r27
    47aa:	af 5a       	subi	r26, 0xAF	; 175
    47ac:	bc 4e       	sbci	r27, 0xEC	; 236
    47ae:	0d 90       	ld	r0, X+
    47b0:	bc 91       	ld	r27, X
    47b2:	a0 2d       	mov	r26, r0
    47b4:	2c 91       	ld	r18, X
    47b6:	e8 0f       	add	r30, r24
    47b8:	f9 1f       	adc	r31, r25
    47ba:	ee 0f       	add	r30, r30
    47bc:	ff 1f       	adc	r31, r31
    47be:	ef 5a       	subi	r30, 0xAF	; 175
    47c0:	fc 4e       	sbci	r31, 0xEC	; 236
    47c2:	81 e0       	ldi	r24, 0x01	; 1
    47c4:	90 e0       	ldi	r25, 0x00	; 0
    47c6:	02 80       	ldd	r0, Z+2	; 0x02
    47c8:	02 c0       	rjmp	.+4      	; 0x47ce <_turn_on+0x8e>
    47ca:	88 0f       	add	r24, r24
    47cc:	99 1f       	adc	r25, r25
    47ce:	0a 94       	dec	r0
    47d0:	e2 f7       	brpl	.-8      	; 0x47ca <_turn_on+0x8a>
    47d2:	82 2b       	or	r24, r18
    47d4:	8c 93       	st	X, r24
    47d6:	08 95       	ret

000047d8 <_hal_led_task>:
    47d8:	cc 24       	eor	r12, r12
    47da:	c3 94       	inc	r12
    47dc:	d1 2c       	mov	r13, r1
    47de:	68 94       	set
    47e0:	bb 24       	eor	r11, r11
    47e2:	b2 f8       	bld	r11, 2
    47e4:	c1 e5       	ldi	r28, 0x51	; 81
    47e6:	d3 e1       	ldi	r29, 0x13	; 19
    47e8:	10 e0       	ldi	r17, 0x00	; 0
    47ea:	8c 81       	ldd	r24, Y+4	; 0x04
    47ec:	81 30       	cpi	r24, 0x01	; 1
    47ee:	81 f0       	breq	.+32     	; 0x4810 <_hal_led_task+0x38>
    47f0:	18 f1       	brcs	.+70     	; 0x4838 <_hal_led_task+0x60>
    47f2:	82 30       	cpi	r24, 0x02	; 2
    47f4:	61 f5       	brne	.+88     	; 0x484e <_hal_led_task+0x76>
    47f6:	e8 81       	ld	r30, Y
    47f8:	f9 81       	ldd	r31, Y+1	; 0x01
    47fa:	20 81       	ld	r18, Z
    47fc:	c6 01       	movw	r24, r12
    47fe:	0a 80       	ldd	r0, Y+2	; 0x02
    4800:	02 c0       	rjmp	.+4      	; 0x4806 <_hal_led_task+0x2e>
    4802:	88 0f       	add	r24, r24
    4804:	99 1f       	adc	r25, r25
    4806:	0a 94       	dec	r0
    4808:	e2 f7       	brpl	.-8      	; 0x4802 <_hal_led_task+0x2a>
    480a:	82 27       	eor	r24, r18
    480c:	80 83       	st	Z, r24
    480e:	1f c0       	rjmp	.+62     	; 0x484e <_hal_led_task+0x76>
    4810:	8d 81       	ldd	r24, Y+5	; 0x05
    4812:	8f 5f       	subi	r24, 0xFF	; 255
    4814:	8a 30       	cpi	r24, 0x0A	; 10
    4816:	10 f4       	brcc	.+4      	; 0x481c <_hal_led_task+0x44>
    4818:	8d 83       	std	Y+5, r24	; 0x05
    481a:	19 c0       	rjmp	.+50     	; 0x484e <_hal_led_task+0x76>
    481c:	1d 82       	std	Y+5, r1	; 0x05
    481e:	e8 81       	ld	r30, Y
    4820:	f9 81       	ldd	r31, Y+1	; 0x01
    4822:	20 81       	ld	r18, Z
    4824:	c6 01       	movw	r24, r12
    4826:	0a 80       	ldd	r0, Y+2	; 0x02
    4828:	02 c0       	rjmp	.+4      	; 0x482e <_hal_led_task+0x56>
    482a:	88 0f       	add	r24, r24
    482c:	99 1f       	adc	r25, r25
    482e:	0a 94       	dec	r0
    4830:	e2 f7       	brpl	.-8      	; 0x482a <_hal_led_task+0x52>
    4832:	82 27       	eor	r24, r18
    4834:	80 83       	st	Z, r24
    4836:	0b c0       	rjmp	.+22     	; 0x484e <_hal_led_task+0x76>
    4838:	0d 81       	ldd	r16, Y+5	; 0x05
    483a:	00 23       	and	r16, r16
    483c:	29 f0       	breq	.+10     	; 0x4848 <_hal_led_task+0x70>
    483e:	81 2f       	mov	r24, r17
    4840:	7f df       	rcall	.-258    	; 0x4740 <_turn_on>
    4842:	01 50       	subi	r16, 0x01	; 1
    4844:	0d 83       	std	Y+5, r16	; 0x05
    4846:	03 c0       	rjmp	.+6      	; 0x484e <_hal_led_task+0x76>
    4848:	bc 82       	std	Y+4, r11	; 0x04
    484a:	81 2f       	mov	r24, r17
    484c:	2d df       	rcall	.-422    	; 0x46a8 <_turn_off>
    484e:	1f 5f       	subi	r17, 0xFF	; 255
    4850:	26 96       	adiw	r28, 0x06	; 6
    4852:	14 30       	cpi	r17, 0x04	; 4
    4854:	51 f6       	brne	.-108    	; 0x47ea <_hal_led_task+0x12>
    4856:	65 e0       	ldi	r22, 0x05	; 5
    4858:	70 e0       	ldi	r23, 0x00	; 0
    485a:	80 e0       	ldi	r24, 0x00	; 0
    485c:	90 e0       	ldi	r25, 0x00	; 0
    485e:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <vTaskDelay>
    4862:	c0 cf       	rjmp	.-128    	; 0x47e4 <_hal_led_task+0xc>

00004864 <status_leds_initialise>:
    4864:	ef 92       	push	r14
    4866:	ff 92       	push	r15
    4868:	0f 93       	push	r16
    486a:	1f 93       	push	r17
    486c:	cf 93       	push	r28
    486e:	df 93       	push	r29
    4870:	08 2f       	mov	r16, r24
    4872:	80 e4       	ldi	r24, 0x40	; 64
    4874:	87 b9       	out	0x07, r24	; 7
    4876:	c1 e5       	ldi	r28, 0x51	; 81
    4878:	d3 e1       	ldi	r29, 0x13	; 19
    487a:	0f 2e       	mov	r0, r31
    487c:	f8 e2       	ldi	r31, 0x28	; 40
    487e:	ef 2e       	mov	r14, r31
    4880:	f1 2c       	mov	r15, r1
    4882:	f0 2d       	mov	r31, r0
    4884:	f9 82       	std	Y+1, r15	; 0x01
    4886:	e8 82       	st	Y, r14
    4888:	86 e0       	ldi	r24, 0x06	; 6
    488a:	8a 83       	std	Y+2, r24	; 0x02
    488c:	1b 82       	std	Y+3, r1	; 0x03
    488e:	14 e0       	ldi	r17, 0x04	; 4
    4890:	1c 83       	std	Y+4, r17	; 0x04
    4892:	80 e0       	ldi	r24, 0x00	; 0
    4894:	09 df       	rcall	.-494    	; 0x46a8 <_turn_off>
    4896:	80 e8       	ldi	r24, 0x80	; 128
    4898:	87 b9       	out	0x07, r24	; 7
    489a:	ff 82       	std	Y+7, r15	; 0x07
    489c:	ee 82       	std	Y+6, r14	; 0x06
    489e:	87 e0       	ldi	r24, 0x07	; 7
    48a0:	88 87       	std	Y+8, r24	; 0x08
    48a2:	19 86       	std	Y+9, r1	; 0x09
    48a4:	1a 87       	std	Y+10, r17	; 0x0a
    48a6:	81 e0       	ldi	r24, 0x01	; 1
    48a8:	ff de       	rcall	.-514    	; 0x46a8 <_turn_off>
    48aa:	80 e2       	ldi	r24, 0x20	; 32
    48ac:	83 bb       	out	0x13, r24	; 19
    48ae:	84 e3       	ldi	r24, 0x34	; 52
    48b0:	90 e0       	ldi	r25, 0x00	; 0
    48b2:	9d 87       	std	Y+13, r25	; 0x0d
    48b4:	8c 87       	std	Y+12, r24	; 0x0c
    48b6:	85 e0       	ldi	r24, 0x05	; 5
    48b8:	8e 87       	std	Y+14, r24	; 0x0e
    48ba:	1f 86       	std	Y+15, r1	; 0x0f
    48bc:	18 8b       	std	Y+16, r17	; 0x10
    48be:	82 e0       	ldi	r24, 0x02	; 2
    48c0:	f3 de       	rcall	.-538    	; 0x46a8 <_turn_off>
    48c2:	80 e1       	ldi	r24, 0x10	; 16
    48c4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    48c8:	82 e0       	ldi	r24, 0x02	; 2
    48ca:	91 e0       	ldi	r25, 0x01	; 1
    48cc:	9b 8b       	std	Y+19, r25	; 0x13
    48ce:	8a 8b       	std	Y+18, r24	; 0x12
    48d0:	1c 8b       	std	Y+20, r17	; 0x14
    48d2:	1d 8a       	std	Y+21, r1	; 0x15
    48d4:	1e 8b       	std	Y+22, r17	; 0x16
    48d6:	83 e0       	ldi	r24, 0x03	; 3
    48d8:	e7 de       	rcall	.-562    	; 0x46a8 <_turn_off>
    48da:	e1 2c       	mov	r14, r1
    48dc:	f1 2c       	mov	r15, r1
    48de:	20 e0       	ldi	r18, 0x00	; 0
    48e0:	30 e0       	ldi	r19, 0x00	; 0
    48e2:	40 ec       	ldi	r20, 0xC0	; 192
    48e4:	50 e0       	ldi	r21, 0x00	; 0
    48e6:	67 ec       	ldi	r22, 0xC7	; 199
    48e8:	76 e0       	ldi	r23, 0x06	; 6
    48ea:	8c ee       	ldi	r24, 0xEC	; 236
    48ec:	93 e2       	ldi	r25, 0x23	; 35
    48ee:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <xTaskCreate>
    48f2:	df 91       	pop	r29
    48f4:	cf 91       	pop	r28
    48f6:	1f 91       	pop	r17
    48f8:	0f 91       	pop	r16
    48fa:	ff 90       	pop	r15
    48fc:	ef 90       	pop	r14
    48fe:	08 95       	ret

00004900 <status_leds_slowBlink>:
    4900:	cf 93       	push	r28
    4902:	df 93       	push	r29
    4904:	90 e0       	ldi	r25, 0x00	; 0
    4906:	fc 01       	movw	r30, r24
    4908:	ee 0f       	add	r30, r30
    490a:	ff 1f       	adc	r31, r31
    490c:	df 01       	movw	r26, r30
    490e:	a8 0f       	add	r26, r24
    4910:	b9 1f       	adc	r27, r25
    4912:	aa 0f       	add	r26, r26
    4914:	bb 1f       	adc	r27, r27
    4916:	af 5a       	subi	r26, 0xAF	; 175
    4918:	bc 4e       	sbci	r27, 0xEC	; 236
    491a:	cd 91       	ld	r28, X+
    491c:	dc 91       	ld	r29, X
    491e:	11 97       	sbiw	r26, 0x01	; 1
    4920:	48 81       	ld	r20, Y
    4922:	21 e0       	ldi	r18, 0x01	; 1
    4924:	30 e0       	ldi	r19, 0x00	; 0
    4926:	12 96       	adiw	r26, 0x02	; 2
    4928:	0c 90       	ld	r0, X
    492a:	12 97       	sbiw	r26, 0x02	; 2
    492c:	02 c0       	rjmp	.+4      	; 0x4932 <status_leds_slowBlink+0x32>
    492e:	22 0f       	add	r18, r18
    4930:	33 1f       	adc	r19, r19
    4932:	0a 94       	dec	r0
    4934:	e2 f7       	brpl	.-8      	; 0x492e <status_leds_slowBlink+0x2e>
    4936:	24 27       	eor	r18, r20
    4938:	28 83       	st	Y, r18
    493a:	fd 01       	movw	r30, r26
    493c:	81 e0       	ldi	r24, 0x01	; 1
    493e:	84 83       	std	Z+4, r24	; 0x04
    4940:	df 91       	pop	r29
    4942:	cf 91       	pop	r28
    4944:	08 95       	ret

00004946 <status_leds_fastBlink>:
    4946:	cf 93       	push	r28
    4948:	df 93       	push	r29
    494a:	90 e0       	ldi	r25, 0x00	; 0
    494c:	fc 01       	movw	r30, r24
    494e:	ee 0f       	add	r30, r30
    4950:	ff 1f       	adc	r31, r31
    4952:	df 01       	movw	r26, r30
    4954:	a8 0f       	add	r26, r24
    4956:	b9 1f       	adc	r27, r25
    4958:	aa 0f       	add	r26, r26
    495a:	bb 1f       	adc	r27, r27
    495c:	af 5a       	subi	r26, 0xAF	; 175
    495e:	bc 4e       	sbci	r27, 0xEC	; 236
    4960:	cd 91       	ld	r28, X+
    4962:	dc 91       	ld	r29, X
    4964:	11 97       	sbiw	r26, 0x01	; 1
    4966:	48 81       	ld	r20, Y
    4968:	21 e0       	ldi	r18, 0x01	; 1
    496a:	30 e0       	ldi	r19, 0x00	; 0
    496c:	12 96       	adiw	r26, 0x02	; 2
    496e:	0c 90       	ld	r0, X
    4970:	12 97       	sbiw	r26, 0x02	; 2
    4972:	02 c0       	rjmp	.+4      	; 0x4978 <status_leds_fastBlink+0x32>
    4974:	22 0f       	add	r18, r18
    4976:	33 1f       	adc	r19, r19
    4978:	0a 94       	dec	r0
    497a:	e2 f7       	brpl	.-8      	; 0x4974 <status_leds_fastBlink+0x2e>
    497c:	24 27       	eor	r18, r20
    497e:	28 83       	st	Y, r18
    4980:	fd 01       	movw	r30, r26
    4982:	82 e0       	ldi	r24, 0x02	; 2
    4984:	84 83       	std	Z+4, r24	; 0x04
    4986:	df 91       	pop	r29
    4988:	cf 91       	pop	r28
    498a:	08 95       	ret

0000498c <status_leds_ledOn>:
    498c:	28 2f       	mov	r18, r24
    498e:	30 e0       	ldi	r19, 0x00	; 0
    4990:	f9 01       	movw	r30, r18
    4992:	ee 0f       	add	r30, r30
    4994:	ff 1f       	adc	r31, r31
    4996:	e2 0f       	add	r30, r18
    4998:	f3 1f       	adc	r31, r19
    499a:	ee 0f       	add	r30, r30
    499c:	ff 1f       	adc	r31, r31
    499e:	ef 5a       	subi	r30, 0xAF	; 175
    49a0:	fc 4e       	sbci	r31, 0xEC	; 236
    49a2:	93 e0       	ldi	r25, 0x03	; 3
    49a4:	94 83       	std	Z+4, r25	; 0x04
    49a6:	cc ce       	rjmp	.-616    	; 0x4740 <_turn_on>
    49a8:	08 95       	ret

000049aa <status_leds_ledOff>:
    49aa:	28 2f       	mov	r18, r24
    49ac:	30 e0       	ldi	r19, 0x00	; 0
    49ae:	f9 01       	movw	r30, r18
    49b0:	ee 0f       	add	r30, r30
    49b2:	ff 1f       	adc	r31, r31
    49b4:	e2 0f       	add	r30, r18
    49b6:	f3 1f       	adc	r31, r19
    49b8:	ee 0f       	add	r30, r30
    49ba:	ff 1f       	adc	r31, r31
    49bc:	ef 5a       	subi	r30, 0xAF	; 175
    49be:	fc 4e       	sbci	r31, 0xEC	; 236
    49c0:	94 e0       	ldi	r25, 0x04	; 4
    49c2:	94 83       	std	Z+4, r25	; 0x04
    49c4:	71 ce       	rjmp	.-798    	; 0x46a8 <_turn_off>
    49c6:	08 95       	ret

000049c8 <status_leds_longPuls>:
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	fc 01       	movw	r30, r24
    49cc:	ee 0f       	add	r30, r30
    49ce:	ff 1f       	adc	r31, r31
    49d0:	df 01       	movw	r26, r30
    49d2:	a8 0f       	add	r26, r24
    49d4:	b9 1f       	adc	r27, r25
    49d6:	aa 0f       	add	r26, r26
    49d8:	bb 1f       	adc	r27, r27
    49da:	af 5a       	subi	r26, 0xAF	; 175
    49dc:	bc 4e       	sbci	r27, 0xEC	; 236
    49de:	24 e0       	ldi	r18, 0x04	; 4
    49e0:	15 96       	adiw	r26, 0x05	; 5
    49e2:	2c 93       	st	X, r18
    49e4:	15 97       	sbiw	r26, 0x05	; 5
    49e6:	fd 01       	movw	r30, r26
    49e8:	14 82       	std	Z+4, r1	; 0x04
    49ea:	08 95       	ret

000049ec <status_leds_shortPuls>:
    49ec:	90 e0       	ldi	r25, 0x00	; 0
    49ee:	fc 01       	movw	r30, r24
    49f0:	ee 0f       	add	r30, r30
    49f2:	ff 1f       	adc	r31, r31
    49f4:	df 01       	movw	r26, r30
    49f6:	a8 0f       	add	r26, r24
    49f8:	b9 1f       	adc	r27, r25
    49fa:	aa 0f       	add	r26, r26
    49fc:	bb 1f       	adc	r27, r27
    49fe:	af 5a       	subi	r26, 0xAF	; 175
    4a00:	bc 4e       	sbci	r27, 0xEC	; 236
    4a02:	21 e0       	ldi	r18, 0x01	; 1
    4a04:	15 96       	adiw	r26, 0x05	; 5
    4a06:	2c 93       	st	X, r18
    4a08:	15 97       	sbiw	r26, 0x05	; 5
    4a0a:	fd 01       	movw	r30, r26
    4a0c:	14 82       	std	Z+4, r1	; 0x04
    4a0e:	08 95       	ret

00004a10 <_initTwiInterface>:
    4a10:	80 91 77 13 	lds	r24, 0x1377	; 0x801377 <_twiIsInitiated>
    4a14:	81 11       	cpse	r24, r1
    4a16:	0c c0       	rjmp	.+24     	; 0x4a30 <_initTwiInterface+0x20>
    4a18:	8c e0       	ldi	r24, 0x0C	; 12
    4a1a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4a1e:	8f ef       	ldi	r24, 0xFF	; 255
    4a20:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4a24:	84 e0       	ldi	r24, 0x04	; 4
    4a26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4a2a:	81 e0       	ldi	r24, 0x01	; 1
    4a2c:	80 93 77 13 	sts	0x1377, r24	; 0x801377 <_twiIsInitiated>
    4a30:	08 95       	ret

00004a32 <twiCreate>:
    4a32:	af 92       	push	r10
    4a34:	bf 92       	push	r11
    4a36:	cf 92       	push	r12
    4a38:	df 92       	push	r13
    4a3a:	ef 92       	push	r14
    4a3c:	ff 92       	push	r15
    4a3e:	0f 93       	push	r16
    4a40:	1f 93       	push	r17
    4a42:	cf 93       	push	r28
    4a44:	df 93       	push	r29
    4a46:	a8 2e       	mov	r10, r24
    4a48:	b6 2e       	mov	r11, r22
    4a4a:	69 01       	movw	r12, r18
    4a4c:	7a 01       	movw	r14, r20
    4a4e:	84 e0       	ldi	r24, 0x04	; 4
    4a50:	90 e0       	ldi	r25, 0x00	; 0
    4a52:	0d d7       	rcall	.+3610   	; 0x586e <malloc>
    4a54:	ec 01       	movw	r28, r24
    4a56:	89 2b       	or	r24, r25
    4a58:	61 f1       	breq	.+88     	; 0x4ab2 <twiCreate+0x80>
    4a5a:	a8 82       	st	Y, r10
    4a5c:	81 e0       	ldi	r24, 0x01	; 1
    4a5e:	b8 12       	cpse	r11, r24
    4a60:	12 c0       	rjmp	.+36     	; 0x4a86 <twiCreate+0x54>
    4a62:	c7 01       	movw	r24, r14
    4a64:	b6 01       	movw	r22, r12
    4a66:	20 ea       	ldi	r18, 0xA0	; 160
    4a68:	36 e8       	ldi	r19, 0x86	; 134
    4a6a:	41 e0       	ldi	r20, 0x01	; 1
    4a6c:	50 e0       	ldi	r21, 0x00	; 0
    4a6e:	bb d6       	rcall	.+3446   	; 0x57e6 <__udivmodsi4>
    4a70:	da 01       	movw	r26, r20
    4a72:	c9 01       	movw	r24, r18
    4a74:	40 97       	sbiw	r24, 0x10	; 16
    4a76:	a1 09       	sbc	r26, r1
    4a78:	b1 09       	sbc	r27, r1
    4a7a:	b6 95       	lsr	r27
    4a7c:	a7 95       	ror	r26
    4a7e:	97 95       	ror	r25
    4a80:	87 95       	ror	r24
    4a82:	89 83       	std	Y+1, r24	; 0x01
    4a84:	11 c0       	rjmp	.+34     	; 0x4aa8 <twiCreate+0x76>
    4a86:	c7 01       	movw	r24, r14
    4a88:	b6 01       	movw	r22, r12
    4a8a:	20 e8       	ldi	r18, 0x80	; 128
    4a8c:	3a e1       	ldi	r19, 0x1A	; 26
    4a8e:	46 e0       	ldi	r20, 0x06	; 6
    4a90:	50 e0       	ldi	r21, 0x00	; 0
    4a92:	a9 d6       	rcall	.+3410   	; 0x57e6 <__udivmodsi4>
    4a94:	da 01       	movw	r26, r20
    4a96:	c9 01       	movw	r24, r18
    4a98:	40 97       	sbiw	r24, 0x10	; 16
    4a9a:	a1 09       	sbc	r26, r1
    4a9c:	b1 09       	sbc	r27, r1
    4a9e:	b6 95       	lsr	r27
    4aa0:	a7 95       	ror	r26
    4aa2:	97 95       	ror	r25
    4aa4:	87 95       	ror	r24
    4aa6:	89 83       	std	Y+1, r24	; 0x01
    4aa8:	1b 83       	std	Y+3, r17	; 0x03
    4aaa:	0a 83       	std	Y+2, r16	; 0x02
    4aac:	8c 2f       	mov	r24, r28
    4aae:	9d 2f       	mov	r25, r29
    4ab0:	02 c0       	rjmp	.+4      	; 0x4ab6 <twiCreate+0x84>
    4ab2:	80 e0       	ldi	r24, 0x00	; 0
    4ab4:	90 e0       	ldi	r25, 0x00	; 0
    4ab6:	df 91       	pop	r29
    4ab8:	cf 91       	pop	r28
    4aba:	1f 91       	pop	r17
    4abc:	0f 91       	pop	r16
    4abe:	ff 90       	pop	r15
    4ac0:	ef 90       	pop	r14
    4ac2:	df 90       	pop	r13
    4ac4:	cf 90       	pop	r12
    4ac6:	bf 90       	pop	r11
    4ac8:	af 90       	pop	r10
    4aca:	08 95       	ret

00004acc <twiDestroy>:
    4acc:	00 97       	sbiw	r24, 0x00	; 0
    4ace:	09 f0       	breq	.+2      	; 0x4ad2 <twiDestroy+0x6>
    4ad0:	66 c7       	rjmp	.+3788   	; 0x599e <free>
    4ad2:	08 95       	ret

00004ad4 <twiIsBusy>:
    4ad4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4ad8:	81 70       	andi	r24, 0x01	; 1
    4ada:	08 95       	ret

00004adc <twiTransmit>:
    4adc:	ff 92       	push	r15
    4ade:	0f 93       	push	r16
    4ae0:	1f 93       	push	r17
    4ae2:	cf 93       	push	r28
    4ae4:	df 93       	push	r29
    4ae6:	00 97       	sbiw	r24, 0x00	; 0
    4ae8:	d1 f1       	breq	.+116    	; 0x4b5e <twiTransmit+0x82>
    4aea:	4a 30       	cpi	r20, 0x0A	; 10
    4aec:	d0 f5       	brcc	.+116    	; 0x4b62 <twiTransmit+0x86>
    4aee:	f4 2e       	mov	r15, r20
    4af0:	8b 01       	movw	r16, r22
    4af2:	ec 01       	movw	r28, r24
    4af4:	ef df       	rcall	.-34     	; 0x4ad4 <twiIsBusy>
    4af6:	81 11       	cpse	r24, r1
    4af8:	36 c0       	rjmp	.+108    	; 0x4b66 <twiTransmit+0x8a>
    4afa:	80 91 6a 13 	lds	r24, 0x136A	; 0x80136a <_twiCurrentHandler>
    4afe:	90 91 6b 13 	lds	r25, 0x136B	; 0x80136b <_twiCurrentHandler+0x1>
    4b02:	c8 17       	cp	r28, r24
    4b04:	d9 07       	cpc	r29, r25
    4b06:	41 f0       	breq	.+16     	; 0x4b18 <twiTransmit+0x3c>
    4b08:	83 df       	rcall	.-250    	; 0x4a10 <_initTwiInterface>
    4b0a:	89 81       	ldd	r24, Y+1	; 0x01
    4b0c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4b10:	d0 93 6b 13 	sts	0x136B, r29	; 0x80136b <_twiCurrentHandler+0x1>
    4b14:	c0 93 6a 13 	sts	0x136A, r28	; 0x80136a <_twiCurrentHandler>
    4b18:	81 e0       	ldi	r24, 0x01	; 1
    4b1a:	8f 0d       	add	r24, r15
    4b1c:	80 93 6c 13 	sts	0x136C, r24	; 0x80136c <_twiMessageLen>
    4b20:	88 81       	ld	r24, Y
    4b22:	88 0f       	add	r24, r24
    4b24:	80 93 6d 13 	sts	0x136D, r24	; 0x80136d <_twiMessageBuffer>
    4b28:	ff 20       	and	r15, r15
    4b2a:	89 f0       	breq	.+34     	; 0x4b4e <twiTransmit+0x72>
    4b2c:	f8 01       	movw	r30, r16
    4b2e:	ae e6       	ldi	r26, 0x6E	; 110
    4b30:	b3 e1       	ldi	r27, 0x13	; 19
    4b32:	4f ef       	ldi	r20, 0xFF	; 255
    4b34:	4f 0d       	add	r20, r15
    4b36:	64 2f       	mov	r22, r20
    4b38:	70 e0       	ldi	r23, 0x00	; 0
    4b3a:	cb 01       	movw	r24, r22
    4b3c:	01 96       	adiw	r24, 0x01	; 1
    4b3e:	b8 01       	movw	r22, r16
    4b40:	68 0f       	add	r22, r24
    4b42:	79 1f       	adc	r23, r25
    4b44:	81 91       	ld	r24, Z+
    4b46:	8d 93       	st	X+, r24
    4b48:	e6 17       	cp	r30, r22
    4b4a:	f7 07       	cpc	r31, r23
    4b4c:	d9 f7       	brne	.-10     	; 0x4b44 <twiTransmit+0x68>
    4b4e:	88 ef       	ldi	r24, 0xF8	; 248
    4b50:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4b54:	85 ea       	ldi	r24, 0xA5	; 165
    4b56:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4b5a:	84 e0       	ldi	r24, 0x04	; 4
    4b5c:	05 c0       	rjmp	.+10     	; 0x4b68 <twiTransmit+0x8c>
    4b5e:	86 e0       	ldi	r24, 0x06	; 6
    4b60:	03 c0       	rjmp	.+6      	; 0x4b68 <twiTransmit+0x8c>
    4b62:	87 e0       	ldi	r24, 0x07	; 7
    4b64:	01 c0       	rjmp	.+2      	; 0x4b68 <twiTransmit+0x8c>
    4b66:	82 e0       	ldi	r24, 0x02	; 2
    4b68:	df 91       	pop	r29
    4b6a:	cf 91       	pop	r28
    4b6c:	1f 91       	pop	r17
    4b6e:	0f 91       	pop	r16
    4b70:	ff 90       	pop	r15
    4b72:	08 95       	ret

00004b74 <twiReceive>:
    4b74:	1f 93       	push	r17
    4b76:	cf 93       	push	r28
    4b78:	df 93       	push	r29
    4b7a:	00 97       	sbiw	r24, 0x00	; 0
    4b7c:	29 f1       	breq	.+74     	; 0x4bc8 <twiReceive+0x54>
    4b7e:	6b 30       	cpi	r22, 0x0B	; 11
    4b80:	28 f5       	brcc	.+74     	; 0x4bcc <twiReceive+0x58>
    4b82:	16 2f       	mov	r17, r22
    4b84:	ec 01       	movw	r28, r24
    4b86:	a6 df       	rcall	.-180    	; 0x4ad4 <twiIsBusy>
    4b88:	81 11       	cpse	r24, r1
    4b8a:	22 c0       	rjmp	.+68     	; 0x4bd0 <twiReceive+0x5c>
    4b8c:	80 91 6a 13 	lds	r24, 0x136A	; 0x80136a <_twiCurrentHandler>
    4b90:	90 91 6b 13 	lds	r25, 0x136B	; 0x80136b <_twiCurrentHandler+0x1>
    4b94:	c8 17       	cp	r28, r24
    4b96:	d9 07       	cpc	r29, r25
    4b98:	41 f0       	breq	.+16     	; 0x4baa <twiReceive+0x36>
    4b9a:	3a df       	rcall	.-396    	; 0x4a10 <_initTwiInterface>
    4b9c:	89 81       	ldd	r24, Y+1	; 0x01
    4b9e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4ba2:	d0 93 6b 13 	sts	0x136B, r29	; 0x80136b <_twiCurrentHandler+0x1>
    4ba6:	c0 93 6a 13 	sts	0x136A, r28	; 0x80136a <_twiCurrentHandler>
    4baa:	10 93 6c 13 	sts	0x136C, r17	; 0x80136c <_twiMessageLen>
    4bae:	88 81       	ld	r24, Y
    4bb0:	88 0f       	add	r24, r24
    4bb2:	81 60       	ori	r24, 0x01	; 1
    4bb4:	80 93 6d 13 	sts	0x136D, r24	; 0x80136d <_twiMessageBuffer>
    4bb8:	88 ef       	ldi	r24, 0xF8	; 248
    4bba:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4bbe:	85 ea       	ldi	r24, 0xA5	; 165
    4bc0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4bc4:	85 e0       	ldi	r24, 0x05	; 5
    4bc6:	05 c0       	rjmp	.+10     	; 0x4bd2 <twiReceive+0x5e>
    4bc8:	86 e0       	ldi	r24, 0x06	; 6
    4bca:	03 c0       	rjmp	.+6      	; 0x4bd2 <twiReceive+0x5e>
    4bcc:	87 e0       	ldi	r24, 0x07	; 7
    4bce:	01 c0       	rjmp	.+2      	; 0x4bd2 <twiReceive+0x5e>
    4bd0:	82 e0       	ldi	r24, 0x02	; 2
    4bd2:	df 91       	pop	r29
    4bd4:	cf 91       	pop	r28
    4bd6:	1f 91       	pop	r17
    4bd8:	08 95       	ret

00004bda <__vector_39>:
    4bda:	1f 92       	push	r1
    4bdc:	0f 92       	push	r0
    4bde:	0f b6       	in	r0, 0x3f	; 63
    4be0:	0f 92       	push	r0
    4be2:	11 24       	eor	r1, r1
    4be4:	0b b6       	in	r0, 0x3b	; 59
    4be6:	0f 92       	push	r0
    4be8:	2f 93       	push	r18
    4bea:	3f 93       	push	r19
    4bec:	4f 93       	push	r20
    4bee:	5f 93       	push	r21
    4bf0:	6f 93       	push	r22
    4bf2:	7f 93       	push	r23
    4bf4:	8f 93       	push	r24
    4bf6:	9f 93       	push	r25
    4bf8:	af 93       	push	r26
    4bfa:	bf 93       	push	r27
    4bfc:	ef 93       	push	r30
    4bfe:	ff 93       	push	r31
    4c00:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4c04:	8e 2f       	mov	r24, r30
    4c06:	90 e0       	ldi	r25, 0x00	; 0
    4c08:	fc 01       	movw	r30, r24
    4c0a:	38 97       	sbiw	r30, 0x08	; 8
    4c0c:	e1 35       	cpi	r30, 0x51	; 81
    4c0e:	f1 05       	cpc	r31, r1
    4c10:	08 f0       	brcs	.+2      	; 0x4c14 <__vector_39+0x3a>
    4c12:	75 c0       	rjmp	.+234    	; 0x4cfe <__vector_39+0x124>
    4c14:	88 27       	eor	r24, r24
    4c16:	e4 58       	subi	r30, 0x84	; 132
    4c18:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1a:	8f 4f       	sbci	r24, 0xFF	; 255
    4c1c:	06 c6       	rjmp	.+3084   	; 0x582a <__tablejump2__>
    4c1e:	10 92 69 13 	sts	0x1369, r1	; 0x801369 <_index.1885>
    4c22:	e0 91 69 13 	lds	r30, 0x1369	; 0x801369 <_index.1885>
    4c26:	80 91 6c 13 	lds	r24, 0x136C	; 0x80136c <_twiMessageLen>
    4c2a:	e8 17       	cp	r30, r24
    4c2c:	70 f4       	brcc	.+28     	; 0x4c4a <__vector_39+0x70>
    4c2e:	81 e0       	ldi	r24, 0x01	; 1
    4c30:	8e 0f       	add	r24, r30
    4c32:	80 93 69 13 	sts	0x1369, r24	; 0x801369 <_index.1885>
    4c36:	f0 e0       	ldi	r31, 0x00	; 0
    4c38:	e3 59       	subi	r30, 0x93	; 147
    4c3a:	fc 4e       	sbci	r31, 0xEC	; 236
    4c3c:	80 81       	ld	r24, Z
    4c3e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4c42:	85 e8       	ldi	r24, 0x85	; 133
    4c44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4c48:	72 c0       	rjmp	.+228    	; 0x4d2e <__vector_39+0x154>
    4c4a:	84 e9       	ldi	r24, 0x94	; 148
    4c4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4c50:	80 91 6a 13 	lds	r24, 0x136A	; 0x80136a <_twiCurrentHandler>
    4c54:	90 91 6b 13 	lds	r25, 0x136B	; 0x80136b <_twiCurrentHandler+0x1>
    4c58:	dc 01       	movw	r26, r24
    4c5a:	12 96       	adiw	r26, 0x02	; 2
    4c5c:	ed 91       	ld	r30, X+
    4c5e:	fc 91       	ld	r31, X
    4c60:	13 97       	sbiw	r26, 0x03	; 3
    4c62:	30 97       	sbiw	r30, 0x00	; 0
    4c64:	09 f4       	brne	.+2      	; 0x4c68 <__vector_39+0x8e>
    4c66:	63 c0       	rjmp	.+198    	; 0x4d2e <__vector_39+0x154>
    4c68:	20 e0       	ldi	r18, 0x00	; 0
    4c6a:	40 e0       	ldi	r20, 0x00	; 0
    4c6c:	50 e0       	ldi	r21, 0x00	; 0
    4c6e:	64 e0       	ldi	r22, 0x04	; 4
    4c70:	19 95       	eicall
    4c72:	5d c0       	rjmp	.+186    	; 0x4d2e <__vector_39+0x154>
    4c74:	e0 91 69 13 	lds	r30, 0x1369	; 0x801369 <_index.1885>
    4c78:	81 e0       	ldi	r24, 0x01	; 1
    4c7a:	8e 0f       	add	r24, r30
    4c7c:	80 93 69 13 	sts	0x1369, r24	; 0x801369 <_index.1885>
    4c80:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4c84:	f0 e0       	ldi	r31, 0x00	; 0
    4c86:	e3 59       	subi	r30, 0x93	; 147
    4c88:	fc 4e       	sbci	r31, 0xEC	; 236
    4c8a:	80 83       	st	Z, r24
    4c8c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4c90:	80 34       	cpi	r24, 0x40	; 64
    4c92:	11 f4       	brne	.+4      	; 0x4c98 <__vector_39+0xbe>
    4c94:	10 92 69 13 	sts	0x1369, r1	; 0x801369 <_index.1885>
    4c98:	20 91 69 13 	lds	r18, 0x1369	; 0x801369 <_index.1885>
    4c9c:	30 e0       	ldi	r19, 0x00	; 0
    4c9e:	80 91 6c 13 	lds	r24, 0x136C	; 0x80136c <_twiMessageLen>
    4ca2:	90 e0       	ldi	r25, 0x00	; 0
    4ca4:	01 97       	sbiw	r24, 0x01	; 1
    4ca6:	28 17       	cp	r18, r24
    4ca8:	39 07       	cpc	r19, r25
    4caa:	24 f4       	brge	.+8      	; 0x4cb4 <__vector_39+0xda>
    4cac:	85 ec       	ldi	r24, 0xC5	; 197
    4cae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4cb2:	3d c0       	rjmp	.+122    	; 0x4d2e <__vector_39+0x154>
    4cb4:	85 e8       	ldi	r24, 0x85	; 133
    4cb6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4cba:	39 c0       	rjmp	.+114    	; 0x4d2e <__vector_39+0x154>
    4cbc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4cc0:	e0 91 69 13 	lds	r30, 0x1369	; 0x801369 <_index.1885>
    4cc4:	f0 e0       	ldi	r31, 0x00	; 0
    4cc6:	e3 59       	subi	r30, 0x93	; 147
    4cc8:	fc 4e       	sbci	r31, 0xEC	; 236
    4cca:	80 83       	st	Z, r24
    4ccc:	84 e9       	ldi	r24, 0x94	; 148
    4cce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4cd2:	80 91 6a 13 	lds	r24, 0x136A	; 0x80136a <_twiCurrentHandler>
    4cd6:	90 91 6b 13 	lds	r25, 0x136B	; 0x80136b <_twiCurrentHandler+0x1>
    4cda:	dc 01       	movw	r26, r24
    4cdc:	12 96       	adiw	r26, 0x02	; 2
    4cde:	ed 91       	ld	r30, X+
    4ce0:	fc 91       	ld	r31, X
    4ce2:	13 97       	sbiw	r26, 0x03	; 3
    4ce4:	30 97       	sbiw	r30, 0x00	; 0
    4ce6:	19 f1       	breq	.+70     	; 0x4d2e <__vector_39+0x154>
    4ce8:	20 91 6c 13 	lds	r18, 0x136C	; 0x80136c <_twiMessageLen>
    4cec:	4d e6       	ldi	r20, 0x6D	; 109
    4cee:	53 e1       	ldi	r21, 0x13	; 19
    4cf0:	65 e0       	ldi	r22, 0x05	; 5
    4cf2:	19 95       	eicall
    4cf4:	1c c0       	rjmp	.+56     	; 0x4d2e <__vector_39+0x154>
    4cf6:	85 ea       	ldi	r24, 0xA5	; 165
    4cf8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4cfc:	18 c0       	rjmp	.+48     	; 0x4d2e <__vector_39+0x154>
    4cfe:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4d02:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4d06:	84 e0       	ldi	r24, 0x04	; 4
    4d08:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4d0c:	80 91 6a 13 	lds	r24, 0x136A	; 0x80136a <_twiCurrentHandler>
    4d10:	90 91 6b 13 	lds	r25, 0x136B	; 0x80136b <_twiCurrentHandler+0x1>
    4d14:	dc 01       	movw	r26, r24
    4d16:	12 96       	adiw	r26, 0x02	; 2
    4d18:	ed 91       	ld	r30, X+
    4d1a:	fc 91       	ld	r31, X
    4d1c:	13 97       	sbiw	r26, 0x03	; 3
    4d1e:	30 97       	sbiw	r30, 0x00	; 0
    4d20:	31 f0       	breq	.+12     	; 0x4d2e <__vector_39+0x154>
    4d22:	20 e0       	ldi	r18, 0x00	; 0
    4d24:	40 e0       	ldi	r20, 0x00	; 0
    4d26:	50 e0       	ldi	r21, 0x00	; 0
    4d28:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    4d2c:	19 95       	eicall
    4d2e:	ff 91       	pop	r31
    4d30:	ef 91       	pop	r30
    4d32:	bf 91       	pop	r27
    4d34:	af 91       	pop	r26
    4d36:	9f 91       	pop	r25
    4d38:	8f 91       	pop	r24
    4d3a:	7f 91       	pop	r23
    4d3c:	6f 91       	pop	r22
    4d3e:	5f 91       	pop	r21
    4d40:	4f 91       	pop	r20
    4d42:	3f 91       	pop	r19
    4d44:	2f 91       	pop	r18
    4d46:	0f 90       	pop	r0
    4d48:	0b be       	out	0x3b, r0	; 59
    4d4a:	0f 90       	pop	r0
    4d4c:	0f be       	out	0x3f, r0	; 63
    4d4e:	0f 90       	pop	r0
    4d50:	1f 90       	pop	r1
    4d52:	18 95       	reti

00004d54 <fifo_init>:
    4d54:	fc 01       	movw	r30, r24
    4d56:	41 11       	cpse	r20, r1
    4d58:	01 c0       	rjmp	.+2      	; 0x4d5c <fifo_init+0x8>
    4d5a:	aa d6       	rcall	.+3412   	; 0x5ab0 <abort>
    4d5c:	84 2f       	mov	r24, r20
    4d5e:	90 e0       	ldi	r25, 0x00	; 0
    4d60:	9c 01       	movw	r18, r24
    4d62:	21 50       	subi	r18, 0x01	; 1
    4d64:	31 09       	sbc	r19, r1
    4d66:	82 23       	and	r24, r18
    4d68:	93 23       	and	r25, r19
    4d6a:	89 2b       	or	r24, r25
    4d6c:	09 f0       	breq	.+2      	; 0x4d70 <fifo_init+0x1c>
    4d6e:	a0 d6       	rcall	.+3392   	; 0x5ab0 <abort>
    4d70:	41 38       	cpi	r20, 0x81	; 129
    4d72:	08 f0       	brcs	.+2      	; 0x4d76 <fifo_init+0x22>
    4d74:	9d d6       	rcall	.+3386   	; 0x5ab0 <abort>
    4d76:	12 82       	std	Z+2, r1	; 0x02
    4d78:	13 82       	std	Z+3, r1	; 0x03
    4d7a:	44 83       	std	Z+4, r20	; 0x04
    4d7c:	44 0f       	add	r20, r20
    4d7e:	41 50       	subi	r20, 0x01	; 1
    4d80:	45 83       	std	Z+5, r20	; 0x05
    4d82:	71 83       	std	Z+1, r23	; 0x01
    4d84:	60 83       	st	Z, r22
    4d86:	80 e0       	ldi	r24, 0x00	; 0
    4d88:	90 e0       	ldi	r25, 0x00	; 0
    4d8a:	08 95       	ret

00004d8c <__subsf3>:
    4d8c:	50 58       	subi	r21, 0x80	; 128

00004d8e <__addsf3>:
    4d8e:	bb 27       	eor	r27, r27
    4d90:	aa 27       	eor	r26, r26
    4d92:	0e d0       	rcall	.+28     	; 0x4db0 <__addsf3x>
    4d94:	28 c1       	rjmp	.+592    	; 0x4fe6 <__fp_round>
    4d96:	19 d1       	rcall	.+562    	; 0x4fca <__fp_pscA>
    4d98:	30 f0       	brcs	.+12     	; 0x4da6 <__addsf3+0x18>
    4d9a:	1e d1       	rcall	.+572    	; 0x4fd8 <__fp_pscB>
    4d9c:	20 f0       	brcs	.+8      	; 0x4da6 <__addsf3+0x18>
    4d9e:	31 f4       	brne	.+12     	; 0x4dac <__addsf3+0x1e>
    4da0:	9f 3f       	cpi	r25, 0xFF	; 255
    4da2:	11 f4       	brne	.+4      	; 0x4da8 <__addsf3+0x1a>
    4da4:	1e f4       	brtc	.+6      	; 0x4dac <__addsf3+0x1e>
    4da6:	0e c1       	rjmp	.+540    	; 0x4fc4 <__fp_nan>
    4da8:	0e f4       	brtc	.+2      	; 0x4dac <__addsf3+0x1e>
    4daa:	e0 95       	com	r30
    4dac:	e7 fb       	bst	r30, 7
    4dae:	04 c1       	rjmp	.+520    	; 0x4fb8 <__fp_inf>

00004db0 <__addsf3x>:
    4db0:	e9 2f       	mov	r30, r25
    4db2:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__fp_split3>
    4db6:	78 f3       	brcs	.-34     	; 0x4d96 <__addsf3+0x8>
    4db8:	ba 17       	cp	r27, r26
    4dba:	62 07       	cpc	r22, r18
    4dbc:	73 07       	cpc	r23, r19
    4dbe:	84 07       	cpc	r24, r20
    4dc0:	95 07       	cpc	r25, r21
    4dc2:	20 f0       	brcs	.+8      	; 0x4dcc <__addsf3x+0x1c>
    4dc4:	79 f4       	brne	.+30     	; 0x4de4 <__addsf3x+0x34>
    4dc6:	a6 f5       	brtc	.+104    	; 0x4e30 <__addsf3x+0x80>
    4dc8:	0c 94 3e 1a 	jmp	0x347c	; 0x347c <__fp_zero>
    4dcc:	0e f4       	brtc	.+2      	; 0x4dd0 <__addsf3x+0x20>
    4dce:	e0 95       	com	r30
    4dd0:	0b 2e       	mov	r0, r27
    4dd2:	ba 2f       	mov	r27, r26
    4dd4:	a0 2d       	mov	r26, r0
    4dd6:	0b 01       	movw	r0, r22
    4dd8:	b9 01       	movw	r22, r18
    4dda:	90 01       	movw	r18, r0
    4ddc:	0c 01       	movw	r0, r24
    4dde:	ca 01       	movw	r24, r20
    4de0:	a0 01       	movw	r20, r0
    4de2:	11 24       	eor	r1, r1
    4de4:	ff 27       	eor	r31, r31
    4de6:	59 1b       	sub	r21, r25
    4de8:	99 f0       	breq	.+38     	; 0x4e10 <__addsf3x+0x60>
    4dea:	59 3f       	cpi	r21, 0xF9	; 249
    4dec:	50 f4       	brcc	.+20     	; 0x4e02 <__addsf3x+0x52>
    4dee:	50 3e       	cpi	r21, 0xE0	; 224
    4df0:	68 f1       	brcs	.+90     	; 0x4e4c <__addsf3x+0x9c>
    4df2:	1a 16       	cp	r1, r26
    4df4:	f0 40       	sbci	r31, 0x00	; 0
    4df6:	a2 2f       	mov	r26, r18
    4df8:	23 2f       	mov	r18, r19
    4dfa:	34 2f       	mov	r19, r20
    4dfc:	44 27       	eor	r20, r20
    4dfe:	58 5f       	subi	r21, 0xF8	; 248
    4e00:	f3 cf       	rjmp	.-26     	; 0x4de8 <__addsf3x+0x38>
    4e02:	46 95       	lsr	r20
    4e04:	37 95       	ror	r19
    4e06:	27 95       	ror	r18
    4e08:	a7 95       	ror	r26
    4e0a:	f0 40       	sbci	r31, 0x00	; 0
    4e0c:	53 95       	inc	r21
    4e0e:	c9 f7       	brne	.-14     	; 0x4e02 <__addsf3x+0x52>
    4e10:	7e f4       	brtc	.+30     	; 0x4e30 <__addsf3x+0x80>
    4e12:	1f 16       	cp	r1, r31
    4e14:	ba 0b       	sbc	r27, r26
    4e16:	62 0b       	sbc	r22, r18
    4e18:	73 0b       	sbc	r23, r19
    4e1a:	84 0b       	sbc	r24, r20
    4e1c:	ba f0       	brmi	.+46     	; 0x4e4c <__addsf3x+0x9c>
    4e1e:	91 50       	subi	r25, 0x01	; 1
    4e20:	a1 f0       	breq	.+40     	; 0x4e4a <__addsf3x+0x9a>
    4e22:	ff 0f       	add	r31, r31
    4e24:	bb 1f       	adc	r27, r27
    4e26:	66 1f       	adc	r22, r22
    4e28:	77 1f       	adc	r23, r23
    4e2a:	88 1f       	adc	r24, r24
    4e2c:	c2 f7       	brpl	.-16     	; 0x4e1e <__addsf3x+0x6e>
    4e2e:	0e c0       	rjmp	.+28     	; 0x4e4c <__addsf3x+0x9c>
    4e30:	ba 0f       	add	r27, r26
    4e32:	62 1f       	adc	r22, r18
    4e34:	73 1f       	adc	r23, r19
    4e36:	84 1f       	adc	r24, r20
    4e38:	48 f4       	brcc	.+18     	; 0x4e4c <__addsf3x+0x9c>
    4e3a:	87 95       	ror	r24
    4e3c:	77 95       	ror	r23
    4e3e:	67 95       	ror	r22
    4e40:	b7 95       	ror	r27
    4e42:	f7 95       	ror	r31
    4e44:	9e 3f       	cpi	r25, 0xFE	; 254
    4e46:	08 f0       	brcs	.+2      	; 0x4e4a <__addsf3x+0x9a>
    4e48:	b1 cf       	rjmp	.-158    	; 0x4dac <__addsf3+0x1e>
    4e4a:	93 95       	inc	r25
    4e4c:	88 0f       	add	r24, r24
    4e4e:	08 f0       	brcs	.+2      	; 0x4e52 <__addsf3x+0xa2>
    4e50:	99 27       	eor	r25, r25
    4e52:	ee 0f       	add	r30, r30
    4e54:	97 95       	ror	r25
    4e56:	87 95       	ror	r24
    4e58:	08 95       	ret

00004e5a <__divsf3>:
    4e5a:	0d d0       	rcall	.+26     	; 0x4e76 <__divsf3x>
    4e5c:	c4 c0       	rjmp	.+392    	; 0x4fe6 <__fp_round>
    4e5e:	bc d0       	rcall	.+376    	; 0x4fd8 <__fp_pscB>
    4e60:	48 f0       	brcs	.+18     	; 0x4e74 <__divsf3+0x1a>
    4e62:	b3 d0       	rcall	.+358    	; 0x4fca <__fp_pscA>
    4e64:	38 f0       	brcs	.+14     	; 0x4e74 <__divsf3+0x1a>
    4e66:	21 f4       	brne	.+8      	; 0x4e70 <__divsf3+0x16>
    4e68:	5f 3f       	cpi	r21, 0xFF	; 255
    4e6a:	21 f0       	breq	.+8      	; 0x4e74 <__divsf3+0x1a>
    4e6c:	a5 c0       	rjmp	.+330    	; 0x4fb8 <__fp_inf>
    4e6e:	51 11       	cpse	r21, r1
    4e70:	0c 94 3f 1a 	jmp	0x347e	; 0x347e <__fp_szero>
    4e74:	a7 c0       	rjmp	.+334    	; 0x4fc4 <__fp_nan>

00004e76 <__divsf3x>:
    4e76:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__fp_split3>
    4e7a:	88 f3       	brcs	.-30     	; 0x4e5e <__divsf3+0x4>

00004e7c <__divsf3_pse>:
    4e7c:	99 23       	and	r25, r25
    4e7e:	b9 f3       	breq	.-18     	; 0x4e6e <__divsf3+0x14>
    4e80:	55 23       	and	r21, r21
    4e82:	a1 f3       	breq	.-24     	; 0x4e6c <__divsf3+0x12>
    4e84:	95 1b       	sub	r25, r21
    4e86:	55 0b       	sbc	r21, r21
    4e88:	bb 27       	eor	r27, r27
    4e8a:	aa 27       	eor	r26, r26
    4e8c:	62 17       	cp	r22, r18
    4e8e:	73 07       	cpc	r23, r19
    4e90:	84 07       	cpc	r24, r20
    4e92:	38 f0       	brcs	.+14     	; 0x4ea2 <__divsf3_pse+0x26>
    4e94:	9f 5f       	subi	r25, 0xFF	; 255
    4e96:	5f 4f       	sbci	r21, 0xFF	; 255
    4e98:	22 0f       	add	r18, r18
    4e9a:	33 1f       	adc	r19, r19
    4e9c:	44 1f       	adc	r20, r20
    4e9e:	aa 1f       	adc	r26, r26
    4ea0:	a9 f3       	breq	.-22     	; 0x4e8c <__divsf3_pse+0x10>
    4ea2:	34 d0       	rcall	.+104    	; 0x4f0c <__divsf3_pse+0x90>
    4ea4:	0e 2e       	mov	r0, r30
    4ea6:	3a f0       	brmi	.+14     	; 0x4eb6 <__divsf3_pse+0x3a>
    4ea8:	e0 e8       	ldi	r30, 0x80	; 128
    4eaa:	31 d0       	rcall	.+98     	; 0x4f0e <__divsf3_pse+0x92>
    4eac:	91 50       	subi	r25, 0x01	; 1
    4eae:	50 40       	sbci	r21, 0x00	; 0
    4eb0:	e6 95       	lsr	r30
    4eb2:	00 1c       	adc	r0, r0
    4eb4:	ca f7       	brpl	.-14     	; 0x4ea8 <__divsf3_pse+0x2c>
    4eb6:	2a d0       	rcall	.+84     	; 0x4f0c <__divsf3_pse+0x90>
    4eb8:	fe 2f       	mov	r31, r30
    4eba:	28 d0       	rcall	.+80     	; 0x4f0c <__divsf3_pse+0x90>
    4ebc:	66 0f       	add	r22, r22
    4ebe:	77 1f       	adc	r23, r23
    4ec0:	88 1f       	adc	r24, r24
    4ec2:	bb 1f       	adc	r27, r27
    4ec4:	26 17       	cp	r18, r22
    4ec6:	37 07       	cpc	r19, r23
    4ec8:	48 07       	cpc	r20, r24
    4eca:	ab 07       	cpc	r26, r27
    4ecc:	b0 e8       	ldi	r27, 0x80	; 128
    4ece:	09 f0       	breq	.+2      	; 0x4ed2 <__divsf3_pse+0x56>
    4ed0:	bb 0b       	sbc	r27, r27
    4ed2:	80 2d       	mov	r24, r0
    4ed4:	bf 01       	movw	r22, r30
    4ed6:	ff 27       	eor	r31, r31
    4ed8:	93 58       	subi	r25, 0x83	; 131
    4eda:	5f 4f       	sbci	r21, 0xFF	; 255
    4edc:	32 f0       	brmi	.+12     	; 0x4eea <__divsf3_pse+0x6e>
    4ede:	9e 3f       	cpi	r25, 0xFE	; 254
    4ee0:	51 05       	cpc	r21, r1
    4ee2:	70 f0       	brcs	.+28     	; 0x4f00 <__divsf3_pse+0x84>
    4ee4:	69 c0       	rjmp	.+210    	; 0x4fb8 <__fp_inf>
    4ee6:	0c 94 3f 1a 	jmp	0x347e	; 0x347e <__fp_szero>
    4eea:	5f 3f       	cpi	r21, 0xFF	; 255
    4eec:	e4 f3       	brlt	.-8      	; 0x4ee6 <__divsf3_pse+0x6a>
    4eee:	98 3e       	cpi	r25, 0xE8	; 232
    4ef0:	d4 f3       	brlt	.-12     	; 0x4ee6 <__divsf3_pse+0x6a>
    4ef2:	86 95       	lsr	r24
    4ef4:	77 95       	ror	r23
    4ef6:	67 95       	ror	r22
    4ef8:	b7 95       	ror	r27
    4efa:	f7 95       	ror	r31
    4efc:	9f 5f       	subi	r25, 0xFF	; 255
    4efe:	c9 f7       	brne	.-14     	; 0x4ef2 <__divsf3_pse+0x76>
    4f00:	88 0f       	add	r24, r24
    4f02:	91 1d       	adc	r25, r1
    4f04:	96 95       	lsr	r25
    4f06:	87 95       	ror	r24
    4f08:	97 f9       	bld	r25, 7
    4f0a:	08 95       	ret
    4f0c:	e1 e0       	ldi	r30, 0x01	; 1
    4f0e:	66 0f       	add	r22, r22
    4f10:	77 1f       	adc	r23, r23
    4f12:	88 1f       	adc	r24, r24
    4f14:	bb 1f       	adc	r27, r27
    4f16:	62 17       	cp	r22, r18
    4f18:	73 07       	cpc	r23, r19
    4f1a:	84 07       	cpc	r24, r20
    4f1c:	ba 07       	cpc	r27, r26
    4f1e:	20 f0       	brcs	.+8      	; 0x4f28 <__divsf3_pse+0xac>
    4f20:	62 1b       	sub	r22, r18
    4f22:	73 0b       	sbc	r23, r19
    4f24:	84 0b       	sbc	r24, r20
    4f26:	ba 0b       	sbc	r27, r26
    4f28:	ee 1f       	adc	r30, r30
    4f2a:	88 f7       	brcc	.-30     	; 0x4f0e <__divsf3_pse+0x92>
    4f2c:	e0 95       	com	r30
    4f2e:	08 95       	ret

00004f30 <__fixsfsi>:
    4f30:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <__fixunssfsi>
    4f34:	68 94       	set
    4f36:	b1 11       	cpse	r27, r1
    4f38:	0c 94 3f 1a 	jmp	0x347e	; 0x347e <__fp_szero>
    4f3c:	08 95       	ret

00004f3e <__floatunsisf>:
    4f3e:	e8 94       	clt
    4f40:	09 c0       	rjmp	.+18     	; 0x4f54 <__floatsisf+0x12>

00004f42 <__floatsisf>:
    4f42:	97 fb       	bst	r25, 7
    4f44:	3e f4       	brtc	.+14     	; 0x4f54 <__floatsisf+0x12>
    4f46:	90 95       	com	r25
    4f48:	80 95       	com	r24
    4f4a:	70 95       	com	r23
    4f4c:	61 95       	neg	r22
    4f4e:	7f 4f       	sbci	r23, 0xFF	; 255
    4f50:	8f 4f       	sbci	r24, 0xFF	; 255
    4f52:	9f 4f       	sbci	r25, 0xFF	; 255
    4f54:	99 23       	and	r25, r25
    4f56:	a9 f0       	breq	.+42     	; 0x4f82 <__floatsisf+0x40>
    4f58:	f9 2f       	mov	r31, r25
    4f5a:	96 e9       	ldi	r25, 0x96	; 150
    4f5c:	bb 27       	eor	r27, r27
    4f5e:	93 95       	inc	r25
    4f60:	f6 95       	lsr	r31
    4f62:	87 95       	ror	r24
    4f64:	77 95       	ror	r23
    4f66:	67 95       	ror	r22
    4f68:	b7 95       	ror	r27
    4f6a:	f1 11       	cpse	r31, r1
    4f6c:	f8 cf       	rjmp	.-16     	; 0x4f5e <__floatsisf+0x1c>
    4f6e:	fa f4       	brpl	.+62     	; 0x4fae <__floatsisf+0x6c>
    4f70:	bb 0f       	add	r27, r27
    4f72:	11 f4       	brne	.+4      	; 0x4f78 <__floatsisf+0x36>
    4f74:	60 ff       	sbrs	r22, 0
    4f76:	1b c0       	rjmp	.+54     	; 0x4fae <__floatsisf+0x6c>
    4f78:	6f 5f       	subi	r22, 0xFF	; 255
    4f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    4f7c:	8f 4f       	sbci	r24, 0xFF	; 255
    4f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    4f80:	16 c0       	rjmp	.+44     	; 0x4fae <__floatsisf+0x6c>
    4f82:	88 23       	and	r24, r24
    4f84:	11 f0       	breq	.+4      	; 0x4f8a <__floatsisf+0x48>
    4f86:	96 e9       	ldi	r25, 0x96	; 150
    4f88:	11 c0       	rjmp	.+34     	; 0x4fac <__floatsisf+0x6a>
    4f8a:	77 23       	and	r23, r23
    4f8c:	21 f0       	breq	.+8      	; 0x4f96 <__floatsisf+0x54>
    4f8e:	9e e8       	ldi	r25, 0x8E	; 142
    4f90:	87 2f       	mov	r24, r23
    4f92:	76 2f       	mov	r23, r22
    4f94:	05 c0       	rjmp	.+10     	; 0x4fa0 <__floatsisf+0x5e>
    4f96:	66 23       	and	r22, r22
    4f98:	71 f0       	breq	.+28     	; 0x4fb6 <__floatsisf+0x74>
    4f9a:	96 e8       	ldi	r25, 0x86	; 134
    4f9c:	86 2f       	mov	r24, r22
    4f9e:	70 e0       	ldi	r23, 0x00	; 0
    4fa0:	60 e0       	ldi	r22, 0x00	; 0
    4fa2:	2a f0       	brmi	.+10     	; 0x4fae <__floatsisf+0x6c>
    4fa4:	9a 95       	dec	r25
    4fa6:	66 0f       	add	r22, r22
    4fa8:	77 1f       	adc	r23, r23
    4faa:	88 1f       	adc	r24, r24
    4fac:	da f7       	brpl	.-10     	; 0x4fa4 <__floatsisf+0x62>
    4fae:	88 0f       	add	r24, r24
    4fb0:	96 95       	lsr	r25
    4fb2:	87 95       	ror	r24
    4fb4:	97 f9       	bld	r25, 7
    4fb6:	08 95       	ret

00004fb8 <__fp_inf>:
    4fb8:	97 f9       	bld	r25, 7
    4fba:	9f 67       	ori	r25, 0x7F	; 127
    4fbc:	80 e8       	ldi	r24, 0x80	; 128
    4fbe:	70 e0       	ldi	r23, 0x00	; 0
    4fc0:	60 e0       	ldi	r22, 0x00	; 0
    4fc2:	08 95       	ret

00004fc4 <__fp_nan>:
    4fc4:	9f ef       	ldi	r25, 0xFF	; 255
    4fc6:	80 ec       	ldi	r24, 0xC0	; 192
    4fc8:	08 95       	ret

00004fca <__fp_pscA>:
    4fca:	00 24       	eor	r0, r0
    4fcc:	0a 94       	dec	r0
    4fce:	16 16       	cp	r1, r22
    4fd0:	17 06       	cpc	r1, r23
    4fd2:	18 06       	cpc	r1, r24
    4fd4:	09 06       	cpc	r0, r25
    4fd6:	08 95       	ret

00004fd8 <__fp_pscB>:
    4fd8:	00 24       	eor	r0, r0
    4fda:	0a 94       	dec	r0
    4fdc:	12 16       	cp	r1, r18
    4fde:	13 06       	cpc	r1, r19
    4fe0:	14 06       	cpc	r1, r20
    4fe2:	05 06       	cpc	r0, r21
    4fe4:	08 95       	ret

00004fe6 <__fp_round>:
    4fe6:	09 2e       	mov	r0, r25
    4fe8:	03 94       	inc	r0
    4fea:	00 0c       	add	r0, r0
    4fec:	11 f4       	brne	.+4      	; 0x4ff2 <__fp_round+0xc>
    4fee:	88 23       	and	r24, r24
    4ff0:	52 f0       	brmi	.+20     	; 0x5006 <__fp_round+0x20>
    4ff2:	bb 0f       	add	r27, r27
    4ff4:	40 f4       	brcc	.+16     	; 0x5006 <__fp_round+0x20>
    4ff6:	bf 2b       	or	r27, r31
    4ff8:	11 f4       	brne	.+4      	; 0x4ffe <__fp_round+0x18>
    4ffa:	60 ff       	sbrs	r22, 0
    4ffc:	04 c0       	rjmp	.+8      	; 0x5006 <__fp_round+0x20>
    4ffe:	6f 5f       	subi	r22, 0xFF	; 255
    5000:	7f 4f       	sbci	r23, 0xFF	; 255
    5002:	8f 4f       	sbci	r24, 0xFF	; 255
    5004:	9f 4f       	sbci	r25, 0xFF	; 255
    5006:	08 95       	ret

00005008 <__mulsf3>:
    5008:	0c d0       	rcall	.+24     	; 0x5022 <__mulsf3x>
    500a:	ed cf       	rjmp	.-38     	; 0x4fe6 <__fp_round>
    500c:	de df       	rcall	.-68     	; 0x4fca <__fp_pscA>
    500e:	28 f0       	brcs	.+10     	; 0x501a <__mulsf3+0x12>
    5010:	e3 df       	rcall	.-58     	; 0x4fd8 <__fp_pscB>
    5012:	18 f0       	brcs	.+6      	; 0x501a <__mulsf3+0x12>
    5014:	95 23       	and	r25, r21
    5016:	09 f0       	breq	.+2      	; 0x501a <__mulsf3+0x12>
    5018:	cf cf       	rjmp	.-98     	; 0x4fb8 <__fp_inf>
    501a:	d4 cf       	rjmp	.-88     	; 0x4fc4 <__fp_nan>
    501c:	11 24       	eor	r1, r1
    501e:	0c 94 3f 1a 	jmp	0x347e	; 0x347e <__fp_szero>

00005022 <__mulsf3x>:
    5022:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__fp_split3>
    5026:	90 f3       	brcs	.-28     	; 0x500c <__mulsf3+0x4>

00005028 <__mulsf3_pse>:
    5028:	95 9f       	mul	r25, r21
    502a:	c1 f3       	breq	.-16     	; 0x501c <__mulsf3+0x14>
    502c:	95 0f       	add	r25, r21
    502e:	50 e0       	ldi	r21, 0x00	; 0
    5030:	55 1f       	adc	r21, r21
    5032:	62 9f       	mul	r22, r18
    5034:	f0 01       	movw	r30, r0
    5036:	72 9f       	mul	r23, r18
    5038:	bb 27       	eor	r27, r27
    503a:	f0 0d       	add	r31, r0
    503c:	b1 1d       	adc	r27, r1
    503e:	63 9f       	mul	r22, r19
    5040:	aa 27       	eor	r26, r26
    5042:	f0 0d       	add	r31, r0
    5044:	b1 1d       	adc	r27, r1
    5046:	aa 1f       	adc	r26, r26
    5048:	64 9f       	mul	r22, r20
    504a:	66 27       	eor	r22, r22
    504c:	b0 0d       	add	r27, r0
    504e:	a1 1d       	adc	r26, r1
    5050:	66 1f       	adc	r22, r22
    5052:	82 9f       	mul	r24, r18
    5054:	22 27       	eor	r18, r18
    5056:	b0 0d       	add	r27, r0
    5058:	a1 1d       	adc	r26, r1
    505a:	62 1f       	adc	r22, r18
    505c:	73 9f       	mul	r23, r19
    505e:	b0 0d       	add	r27, r0
    5060:	a1 1d       	adc	r26, r1
    5062:	62 1f       	adc	r22, r18
    5064:	83 9f       	mul	r24, r19
    5066:	a0 0d       	add	r26, r0
    5068:	61 1d       	adc	r22, r1
    506a:	22 1f       	adc	r18, r18
    506c:	74 9f       	mul	r23, r20
    506e:	33 27       	eor	r19, r19
    5070:	a0 0d       	add	r26, r0
    5072:	61 1d       	adc	r22, r1
    5074:	23 1f       	adc	r18, r19
    5076:	84 9f       	mul	r24, r20
    5078:	60 0d       	add	r22, r0
    507a:	21 1d       	adc	r18, r1
    507c:	82 2f       	mov	r24, r18
    507e:	76 2f       	mov	r23, r22
    5080:	6a 2f       	mov	r22, r26
    5082:	11 24       	eor	r1, r1
    5084:	9f 57       	subi	r25, 0x7F	; 127
    5086:	50 40       	sbci	r21, 0x00	; 0
    5088:	92 f0       	brmi	.+36     	; 0x50ae <__mulsf3_pse+0x86>
    508a:	e9 f0       	breq	.+58     	; 0x50c6 <__mulsf3_pse+0x9e>
    508c:	88 23       	and	r24, r24
    508e:	4a f0       	brmi	.+18     	; 0x50a2 <__mulsf3_pse+0x7a>
    5090:	ee 0f       	add	r30, r30
    5092:	ff 1f       	adc	r31, r31
    5094:	bb 1f       	adc	r27, r27
    5096:	66 1f       	adc	r22, r22
    5098:	77 1f       	adc	r23, r23
    509a:	88 1f       	adc	r24, r24
    509c:	91 50       	subi	r25, 0x01	; 1
    509e:	50 40       	sbci	r21, 0x00	; 0
    50a0:	a9 f7       	brne	.-22     	; 0x508c <__mulsf3_pse+0x64>
    50a2:	9e 3f       	cpi	r25, 0xFE	; 254
    50a4:	51 05       	cpc	r21, r1
    50a6:	78 f0       	brcs	.+30     	; 0x50c6 <__mulsf3_pse+0x9e>
    50a8:	87 cf       	rjmp	.-242    	; 0x4fb8 <__fp_inf>
    50aa:	0c 94 3f 1a 	jmp	0x347e	; 0x347e <__fp_szero>
    50ae:	5f 3f       	cpi	r21, 0xFF	; 255
    50b0:	e4 f3       	brlt	.-8      	; 0x50aa <__mulsf3_pse+0x82>
    50b2:	98 3e       	cpi	r25, 0xE8	; 232
    50b4:	d4 f3       	brlt	.-12     	; 0x50aa <__mulsf3_pse+0x82>
    50b6:	86 95       	lsr	r24
    50b8:	77 95       	ror	r23
    50ba:	67 95       	ror	r22
    50bc:	b7 95       	ror	r27
    50be:	f7 95       	ror	r31
    50c0:	e7 95       	ror	r30
    50c2:	9f 5f       	subi	r25, 0xFF	; 255
    50c4:	c1 f7       	brne	.-16     	; 0x50b6 <__mulsf3_pse+0x8e>
    50c6:	fe 2b       	or	r31, r30
    50c8:	88 0f       	add	r24, r24
    50ca:	91 1d       	adc	r25, r1
    50cc:	96 95       	lsr	r25
    50ce:	87 95       	ror	r24
    50d0:	97 f9       	bld	r25, 7
    50d2:	08 95       	ret

000050d4 <vfprintf>:
    50d4:	2f 92       	push	r2
    50d6:	3f 92       	push	r3
    50d8:	4f 92       	push	r4
    50da:	5f 92       	push	r5
    50dc:	6f 92       	push	r6
    50de:	7f 92       	push	r7
    50e0:	8f 92       	push	r8
    50e2:	9f 92       	push	r9
    50e4:	af 92       	push	r10
    50e6:	bf 92       	push	r11
    50e8:	cf 92       	push	r12
    50ea:	df 92       	push	r13
    50ec:	ef 92       	push	r14
    50ee:	ff 92       	push	r15
    50f0:	0f 93       	push	r16
    50f2:	1f 93       	push	r17
    50f4:	cf 93       	push	r28
    50f6:	df 93       	push	r29
    50f8:	cd b7       	in	r28, 0x3d	; 61
    50fa:	de b7       	in	r29, 0x3e	; 62
    50fc:	60 97       	sbiw	r28, 0x10	; 16
    50fe:	0f b6       	in	r0, 0x3f	; 63
    5100:	f8 94       	cli
    5102:	de bf       	out	0x3e, r29	; 62
    5104:	0f be       	out	0x3f, r0	; 63
    5106:	cd bf       	out	0x3d, r28	; 61
    5108:	7c 01       	movw	r14, r24
    510a:	1b 01       	movw	r2, r22
    510c:	6a 01       	movw	r12, r20
    510e:	fc 01       	movw	r30, r24
    5110:	17 82       	std	Z+7, r1	; 0x07
    5112:	16 82       	std	Z+6, r1	; 0x06
    5114:	83 81       	ldd	r24, Z+3	; 0x03
    5116:	81 ff       	sbrs	r24, 1
    5118:	2a c3       	rjmp	.+1620   	; 0x576e <vfprintf+0x69a>
    511a:	9e 01       	movw	r18, r28
    511c:	2f 5f       	subi	r18, 0xFF	; 255
    511e:	3f 4f       	sbci	r19, 0xFF	; 255
    5120:	39 01       	movw	r6, r18
    5122:	f7 01       	movw	r30, r14
    5124:	93 81       	ldd	r25, Z+3	; 0x03
    5126:	f1 01       	movw	r30, r2
    5128:	93 fd       	sbrc	r25, 3
    512a:	85 91       	lpm	r24, Z+
    512c:	93 ff       	sbrs	r25, 3
    512e:	81 91       	ld	r24, Z+
    5130:	1f 01       	movw	r2, r30
    5132:	88 23       	and	r24, r24
    5134:	09 f4       	brne	.+2      	; 0x5138 <vfprintf+0x64>
    5136:	17 c3       	rjmp	.+1582   	; 0x5766 <vfprintf+0x692>
    5138:	85 32       	cpi	r24, 0x25	; 37
    513a:	39 f4       	brne	.+14     	; 0x514a <vfprintf+0x76>
    513c:	93 fd       	sbrc	r25, 3
    513e:	85 91       	lpm	r24, Z+
    5140:	93 ff       	sbrs	r25, 3
    5142:	81 91       	ld	r24, Z+
    5144:	1f 01       	movw	r2, r30
    5146:	85 32       	cpi	r24, 0x25	; 37
    5148:	31 f4       	brne	.+12     	; 0x5156 <vfprintf+0x82>
    514a:	b7 01       	movw	r22, r14
    514c:	90 e0       	ldi	r25, 0x00	; 0
    514e:	01 d6       	rcall	.+3074   	; 0x5d52 <fputc>
    5150:	56 01       	movw	r10, r12
    5152:	65 01       	movw	r12, r10
    5154:	e6 cf       	rjmp	.-52     	; 0x5122 <vfprintf+0x4e>
    5156:	10 e0       	ldi	r17, 0x00	; 0
    5158:	51 2c       	mov	r5, r1
    515a:	91 2c       	mov	r9, r1
    515c:	ff e1       	ldi	r31, 0x1F	; 31
    515e:	f9 15       	cp	r31, r9
    5160:	d8 f0       	brcs	.+54     	; 0x5198 <vfprintf+0xc4>
    5162:	8b 32       	cpi	r24, 0x2B	; 43
    5164:	79 f0       	breq	.+30     	; 0x5184 <vfprintf+0xb0>
    5166:	38 f4       	brcc	.+14     	; 0x5176 <vfprintf+0xa2>
    5168:	80 32       	cpi	r24, 0x20	; 32
    516a:	79 f0       	breq	.+30     	; 0x518a <vfprintf+0xb6>
    516c:	83 32       	cpi	r24, 0x23	; 35
    516e:	a1 f4       	brne	.+40     	; 0x5198 <vfprintf+0xc4>
    5170:	f9 2d       	mov	r31, r9
    5172:	f0 61       	ori	r31, 0x10	; 16
    5174:	2e c0       	rjmp	.+92     	; 0x51d2 <vfprintf+0xfe>
    5176:	8d 32       	cpi	r24, 0x2D	; 45
    5178:	61 f0       	breq	.+24     	; 0x5192 <vfprintf+0xbe>
    517a:	80 33       	cpi	r24, 0x30	; 48
    517c:	69 f4       	brne	.+26     	; 0x5198 <vfprintf+0xc4>
    517e:	29 2d       	mov	r18, r9
    5180:	21 60       	ori	r18, 0x01	; 1
    5182:	2d c0       	rjmp	.+90     	; 0x51de <vfprintf+0x10a>
    5184:	39 2d       	mov	r19, r9
    5186:	32 60       	ori	r19, 0x02	; 2
    5188:	93 2e       	mov	r9, r19
    518a:	89 2d       	mov	r24, r9
    518c:	84 60       	ori	r24, 0x04	; 4
    518e:	98 2e       	mov	r9, r24
    5190:	2a c0       	rjmp	.+84     	; 0x51e6 <vfprintf+0x112>
    5192:	e9 2d       	mov	r30, r9
    5194:	e8 60       	ori	r30, 0x08	; 8
    5196:	15 c0       	rjmp	.+42     	; 0x51c2 <vfprintf+0xee>
    5198:	97 fc       	sbrc	r9, 7
    519a:	2d c0       	rjmp	.+90     	; 0x51f6 <vfprintf+0x122>
    519c:	20 ed       	ldi	r18, 0xD0	; 208
    519e:	28 0f       	add	r18, r24
    51a0:	2a 30       	cpi	r18, 0x0A	; 10
    51a2:	88 f4       	brcc	.+34     	; 0x51c6 <vfprintf+0xf2>
    51a4:	96 fe       	sbrs	r9, 6
    51a6:	06 c0       	rjmp	.+12     	; 0x51b4 <vfprintf+0xe0>
    51a8:	3a e0       	ldi	r19, 0x0A	; 10
    51aa:	13 9f       	mul	r17, r19
    51ac:	20 0d       	add	r18, r0
    51ae:	11 24       	eor	r1, r1
    51b0:	12 2f       	mov	r17, r18
    51b2:	19 c0       	rjmp	.+50     	; 0x51e6 <vfprintf+0x112>
    51b4:	8a e0       	ldi	r24, 0x0A	; 10
    51b6:	58 9e       	mul	r5, r24
    51b8:	20 0d       	add	r18, r0
    51ba:	11 24       	eor	r1, r1
    51bc:	52 2e       	mov	r5, r18
    51be:	e9 2d       	mov	r30, r9
    51c0:	e0 62       	ori	r30, 0x20	; 32
    51c2:	9e 2e       	mov	r9, r30
    51c4:	10 c0       	rjmp	.+32     	; 0x51e6 <vfprintf+0x112>
    51c6:	8e 32       	cpi	r24, 0x2E	; 46
    51c8:	31 f4       	brne	.+12     	; 0x51d6 <vfprintf+0x102>
    51ca:	96 fc       	sbrc	r9, 6
    51cc:	cc c2       	rjmp	.+1432   	; 0x5766 <vfprintf+0x692>
    51ce:	f9 2d       	mov	r31, r9
    51d0:	f0 64       	ori	r31, 0x40	; 64
    51d2:	9f 2e       	mov	r9, r31
    51d4:	08 c0       	rjmp	.+16     	; 0x51e6 <vfprintf+0x112>
    51d6:	8c 36       	cpi	r24, 0x6C	; 108
    51d8:	21 f4       	brne	.+8      	; 0x51e2 <vfprintf+0x10e>
    51da:	29 2d       	mov	r18, r9
    51dc:	20 68       	ori	r18, 0x80	; 128
    51de:	92 2e       	mov	r9, r18
    51e0:	02 c0       	rjmp	.+4      	; 0x51e6 <vfprintf+0x112>
    51e2:	88 36       	cpi	r24, 0x68	; 104
    51e4:	41 f4       	brne	.+16     	; 0x51f6 <vfprintf+0x122>
    51e6:	f1 01       	movw	r30, r2
    51e8:	93 fd       	sbrc	r25, 3
    51ea:	85 91       	lpm	r24, Z+
    51ec:	93 ff       	sbrs	r25, 3
    51ee:	81 91       	ld	r24, Z+
    51f0:	1f 01       	movw	r2, r30
    51f2:	81 11       	cpse	r24, r1
    51f4:	b3 cf       	rjmp	.-154    	; 0x515c <vfprintf+0x88>
    51f6:	9b eb       	ldi	r25, 0xBB	; 187
    51f8:	98 0f       	add	r25, r24
    51fa:	93 30       	cpi	r25, 0x03	; 3
    51fc:	20 f4       	brcc	.+8      	; 0x5206 <vfprintf+0x132>
    51fe:	99 2d       	mov	r25, r9
    5200:	90 61       	ori	r25, 0x10	; 16
    5202:	80 5e       	subi	r24, 0xE0	; 224
    5204:	07 c0       	rjmp	.+14     	; 0x5214 <vfprintf+0x140>
    5206:	9b e9       	ldi	r25, 0x9B	; 155
    5208:	98 0f       	add	r25, r24
    520a:	93 30       	cpi	r25, 0x03	; 3
    520c:	08 f0       	brcs	.+2      	; 0x5210 <vfprintf+0x13c>
    520e:	59 c1       	rjmp	.+690    	; 0x54c2 <vfprintf+0x3ee>
    5210:	99 2d       	mov	r25, r9
    5212:	9f 7e       	andi	r25, 0xEF	; 239
    5214:	96 ff       	sbrs	r25, 6
    5216:	16 e0       	ldi	r17, 0x06	; 6
    5218:	9f 73       	andi	r25, 0x3F	; 63
    521a:	99 2e       	mov	r9, r25
    521c:	85 36       	cpi	r24, 0x65	; 101
    521e:	19 f4       	brne	.+6      	; 0x5226 <vfprintf+0x152>
    5220:	90 64       	ori	r25, 0x40	; 64
    5222:	99 2e       	mov	r9, r25
    5224:	08 c0       	rjmp	.+16     	; 0x5236 <vfprintf+0x162>
    5226:	86 36       	cpi	r24, 0x66	; 102
    5228:	21 f4       	brne	.+8      	; 0x5232 <vfprintf+0x15e>
    522a:	39 2f       	mov	r19, r25
    522c:	30 68       	ori	r19, 0x80	; 128
    522e:	93 2e       	mov	r9, r19
    5230:	02 c0       	rjmp	.+4      	; 0x5236 <vfprintf+0x162>
    5232:	11 11       	cpse	r17, r1
    5234:	11 50       	subi	r17, 0x01	; 1
    5236:	97 fe       	sbrs	r9, 7
    5238:	07 c0       	rjmp	.+14     	; 0x5248 <vfprintf+0x174>
    523a:	1c 33       	cpi	r17, 0x3C	; 60
    523c:	50 f4       	brcc	.+20     	; 0x5252 <vfprintf+0x17e>
    523e:	44 24       	eor	r4, r4
    5240:	43 94       	inc	r4
    5242:	41 0e       	add	r4, r17
    5244:	27 e0       	ldi	r18, 0x07	; 7
    5246:	0b c0       	rjmp	.+22     	; 0x525e <vfprintf+0x18a>
    5248:	18 30       	cpi	r17, 0x08	; 8
    524a:	38 f0       	brcs	.+14     	; 0x525a <vfprintf+0x186>
    524c:	27 e0       	ldi	r18, 0x07	; 7
    524e:	17 e0       	ldi	r17, 0x07	; 7
    5250:	05 c0       	rjmp	.+10     	; 0x525c <vfprintf+0x188>
    5252:	27 e0       	ldi	r18, 0x07	; 7
    5254:	9c e3       	ldi	r25, 0x3C	; 60
    5256:	49 2e       	mov	r4, r25
    5258:	02 c0       	rjmp	.+4      	; 0x525e <vfprintf+0x18a>
    525a:	21 2f       	mov	r18, r17
    525c:	41 2c       	mov	r4, r1
    525e:	56 01       	movw	r10, r12
    5260:	84 e0       	ldi	r24, 0x04	; 4
    5262:	a8 0e       	add	r10, r24
    5264:	b1 1c       	adc	r11, r1
    5266:	f6 01       	movw	r30, r12
    5268:	60 81       	ld	r22, Z
    526a:	71 81       	ldd	r23, Z+1	; 0x01
    526c:	82 81       	ldd	r24, Z+2	; 0x02
    526e:	93 81       	ldd	r25, Z+3	; 0x03
    5270:	04 2d       	mov	r16, r4
    5272:	a3 01       	movw	r20, r6
    5274:	21 d4       	rcall	.+2114   	; 0x5ab8 <__ftoa_engine>
    5276:	6c 01       	movw	r12, r24
    5278:	f9 81       	ldd	r31, Y+1	; 0x01
    527a:	fc 87       	std	Y+12, r31	; 0x0c
    527c:	f0 ff       	sbrs	r31, 0
    527e:	02 c0       	rjmp	.+4      	; 0x5284 <vfprintf+0x1b0>
    5280:	f3 ff       	sbrs	r31, 3
    5282:	06 c0       	rjmp	.+12     	; 0x5290 <vfprintf+0x1bc>
    5284:	91 fc       	sbrc	r9, 1
    5286:	06 c0       	rjmp	.+12     	; 0x5294 <vfprintf+0x1c0>
    5288:	92 fe       	sbrs	r9, 2
    528a:	06 c0       	rjmp	.+12     	; 0x5298 <vfprintf+0x1c4>
    528c:	00 e2       	ldi	r16, 0x20	; 32
    528e:	05 c0       	rjmp	.+10     	; 0x529a <vfprintf+0x1c6>
    5290:	0d e2       	ldi	r16, 0x2D	; 45
    5292:	03 c0       	rjmp	.+6      	; 0x529a <vfprintf+0x1c6>
    5294:	0b e2       	ldi	r16, 0x2B	; 43
    5296:	01 c0       	rjmp	.+2      	; 0x529a <vfprintf+0x1c6>
    5298:	00 e0       	ldi	r16, 0x00	; 0
    529a:	8c 85       	ldd	r24, Y+12	; 0x0c
    529c:	8c 70       	andi	r24, 0x0C	; 12
    529e:	19 f0       	breq	.+6      	; 0x52a6 <vfprintf+0x1d2>
    52a0:	01 11       	cpse	r16, r1
    52a2:	43 c2       	rjmp	.+1158   	; 0x572a <vfprintf+0x656>
    52a4:	80 c2       	rjmp	.+1280   	; 0x57a6 <vfprintf+0x6d2>
    52a6:	97 fe       	sbrs	r9, 7
    52a8:	10 c0       	rjmp	.+32     	; 0x52ca <vfprintf+0x1f6>
    52aa:	4c 0c       	add	r4, r12
    52ac:	fc 85       	ldd	r31, Y+12	; 0x0c
    52ae:	f4 ff       	sbrs	r31, 4
    52b0:	04 c0       	rjmp	.+8      	; 0x52ba <vfprintf+0x1e6>
    52b2:	8a 81       	ldd	r24, Y+2	; 0x02
    52b4:	81 33       	cpi	r24, 0x31	; 49
    52b6:	09 f4       	brne	.+2      	; 0x52ba <vfprintf+0x1e6>
    52b8:	4a 94       	dec	r4
    52ba:	14 14       	cp	r1, r4
    52bc:	74 f5       	brge	.+92     	; 0x531a <vfprintf+0x246>
    52be:	28 e0       	ldi	r18, 0x08	; 8
    52c0:	24 15       	cp	r18, r4
    52c2:	78 f5       	brcc	.+94     	; 0x5322 <vfprintf+0x24e>
    52c4:	88 e0       	ldi	r24, 0x08	; 8
    52c6:	48 2e       	mov	r4, r24
    52c8:	2c c0       	rjmp	.+88     	; 0x5322 <vfprintf+0x24e>
    52ca:	96 fc       	sbrc	r9, 6
    52cc:	2a c0       	rjmp	.+84     	; 0x5322 <vfprintf+0x24e>
    52ce:	81 2f       	mov	r24, r17
    52d0:	90 e0       	ldi	r25, 0x00	; 0
    52d2:	8c 15       	cp	r24, r12
    52d4:	9d 05       	cpc	r25, r13
    52d6:	9c f0       	brlt	.+38     	; 0x52fe <vfprintf+0x22a>
    52d8:	3c ef       	ldi	r19, 0xFC	; 252
    52da:	c3 16       	cp	r12, r19
    52dc:	3f ef       	ldi	r19, 0xFF	; 255
    52de:	d3 06       	cpc	r13, r19
    52e0:	74 f0       	brlt	.+28     	; 0x52fe <vfprintf+0x22a>
    52e2:	89 2d       	mov	r24, r9
    52e4:	80 68       	ori	r24, 0x80	; 128
    52e6:	98 2e       	mov	r9, r24
    52e8:	0a c0       	rjmp	.+20     	; 0x52fe <vfprintf+0x22a>
    52ea:	e2 e0       	ldi	r30, 0x02	; 2
    52ec:	f0 e0       	ldi	r31, 0x00	; 0
    52ee:	ec 0f       	add	r30, r28
    52f0:	fd 1f       	adc	r31, r29
    52f2:	e1 0f       	add	r30, r17
    52f4:	f1 1d       	adc	r31, r1
    52f6:	80 81       	ld	r24, Z
    52f8:	80 33       	cpi	r24, 0x30	; 48
    52fa:	19 f4       	brne	.+6      	; 0x5302 <vfprintf+0x22e>
    52fc:	11 50       	subi	r17, 0x01	; 1
    52fe:	11 11       	cpse	r17, r1
    5300:	f4 cf       	rjmp	.-24     	; 0x52ea <vfprintf+0x216>
    5302:	97 fe       	sbrs	r9, 7
    5304:	0e c0       	rjmp	.+28     	; 0x5322 <vfprintf+0x24e>
    5306:	44 24       	eor	r4, r4
    5308:	43 94       	inc	r4
    530a:	41 0e       	add	r4, r17
    530c:	81 2f       	mov	r24, r17
    530e:	90 e0       	ldi	r25, 0x00	; 0
    5310:	c8 16       	cp	r12, r24
    5312:	d9 06       	cpc	r13, r25
    5314:	2c f4       	brge	.+10     	; 0x5320 <vfprintf+0x24c>
    5316:	1c 19       	sub	r17, r12
    5318:	04 c0       	rjmp	.+8      	; 0x5322 <vfprintf+0x24e>
    531a:	44 24       	eor	r4, r4
    531c:	43 94       	inc	r4
    531e:	01 c0       	rjmp	.+2      	; 0x5322 <vfprintf+0x24e>
    5320:	10 e0       	ldi	r17, 0x00	; 0
    5322:	97 fe       	sbrs	r9, 7
    5324:	06 c0       	rjmp	.+12     	; 0x5332 <vfprintf+0x25e>
    5326:	1c 14       	cp	r1, r12
    5328:	1d 04       	cpc	r1, r13
    532a:	34 f4       	brge	.+12     	; 0x5338 <vfprintf+0x264>
    532c:	c6 01       	movw	r24, r12
    532e:	01 96       	adiw	r24, 0x01	; 1
    5330:	05 c0       	rjmp	.+10     	; 0x533c <vfprintf+0x268>
    5332:	85 e0       	ldi	r24, 0x05	; 5
    5334:	90 e0       	ldi	r25, 0x00	; 0
    5336:	02 c0       	rjmp	.+4      	; 0x533c <vfprintf+0x268>
    5338:	81 e0       	ldi	r24, 0x01	; 1
    533a:	90 e0       	ldi	r25, 0x00	; 0
    533c:	01 11       	cpse	r16, r1
    533e:	01 96       	adiw	r24, 0x01	; 1
    5340:	11 23       	and	r17, r17
    5342:	31 f0       	breq	.+12     	; 0x5350 <vfprintf+0x27c>
    5344:	21 2f       	mov	r18, r17
    5346:	30 e0       	ldi	r19, 0x00	; 0
    5348:	2f 5f       	subi	r18, 0xFF	; 255
    534a:	3f 4f       	sbci	r19, 0xFF	; 255
    534c:	82 0f       	add	r24, r18
    534e:	93 1f       	adc	r25, r19
    5350:	25 2d       	mov	r18, r5
    5352:	30 e0       	ldi	r19, 0x00	; 0
    5354:	82 17       	cp	r24, r18
    5356:	93 07       	cpc	r25, r19
    5358:	14 f4       	brge	.+4      	; 0x535e <vfprintf+0x28a>
    535a:	58 1a       	sub	r5, r24
    535c:	01 c0       	rjmp	.+2      	; 0x5360 <vfprintf+0x28c>
    535e:	51 2c       	mov	r5, r1
    5360:	89 2d       	mov	r24, r9
    5362:	89 70       	andi	r24, 0x09	; 9
    5364:	41 f4       	brne	.+16     	; 0x5376 <vfprintf+0x2a2>
    5366:	55 20       	and	r5, r5
    5368:	31 f0       	breq	.+12     	; 0x5376 <vfprintf+0x2a2>
    536a:	b7 01       	movw	r22, r14
    536c:	80 e2       	ldi	r24, 0x20	; 32
    536e:	90 e0       	ldi	r25, 0x00	; 0
    5370:	f0 d4       	rcall	.+2528   	; 0x5d52 <fputc>
    5372:	5a 94       	dec	r5
    5374:	f8 cf       	rjmp	.-16     	; 0x5366 <vfprintf+0x292>
    5376:	00 23       	and	r16, r16
    5378:	21 f0       	breq	.+8      	; 0x5382 <vfprintf+0x2ae>
    537a:	b7 01       	movw	r22, r14
    537c:	80 2f       	mov	r24, r16
    537e:	90 e0       	ldi	r25, 0x00	; 0
    5380:	e8 d4       	rcall	.+2512   	; 0x5d52 <fputc>
    5382:	93 fc       	sbrc	r9, 3
    5384:	08 c0       	rjmp	.+16     	; 0x5396 <vfprintf+0x2c2>
    5386:	55 20       	and	r5, r5
    5388:	31 f0       	breq	.+12     	; 0x5396 <vfprintf+0x2c2>
    538a:	b7 01       	movw	r22, r14
    538c:	80 e3       	ldi	r24, 0x30	; 48
    538e:	90 e0       	ldi	r25, 0x00	; 0
    5390:	e0 d4       	rcall	.+2496   	; 0x5d52 <fputc>
    5392:	5a 94       	dec	r5
    5394:	f8 cf       	rjmp	.-16     	; 0x5386 <vfprintf+0x2b2>
    5396:	97 fe       	sbrs	r9, 7
    5398:	4a c0       	rjmp	.+148    	; 0x542e <vfprintf+0x35a>
    539a:	46 01       	movw	r8, r12
    539c:	d7 fe       	sbrs	r13, 7
    539e:	02 c0       	rjmp	.+4      	; 0x53a4 <vfprintf+0x2d0>
    53a0:	81 2c       	mov	r8, r1
    53a2:	91 2c       	mov	r9, r1
    53a4:	c6 01       	movw	r24, r12
    53a6:	88 19       	sub	r24, r8
    53a8:	99 09       	sbc	r25, r9
    53aa:	f3 01       	movw	r30, r6
    53ac:	e8 0f       	add	r30, r24
    53ae:	f9 1f       	adc	r31, r25
    53b0:	fe 87       	std	Y+14, r31	; 0x0e
    53b2:	ed 87       	std	Y+13, r30	; 0x0d
    53b4:	96 01       	movw	r18, r12
    53b6:	24 19       	sub	r18, r4
    53b8:	31 09       	sbc	r19, r1
    53ba:	38 8b       	std	Y+16, r19	; 0x10
    53bc:	2f 87       	std	Y+15, r18	; 0x0f
    53be:	01 2f       	mov	r16, r17
    53c0:	10 e0       	ldi	r17, 0x00	; 0
    53c2:	11 95       	neg	r17
    53c4:	01 95       	neg	r16
    53c6:	11 09       	sbc	r17, r1
    53c8:	3f ef       	ldi	r19, 0xFF	; 255
    53ca:	83 16       	cp	r8, r19
    53cc:	93 06       	cpc	r9, r19
    53ce:	21 f4       	brne	.+8      	; 0x53d8 <vfprintf+0x304>
    53d0:	b7 01       	movw	r22, r14
    53d2:	8e e2       	ldi	r24, 0x2E	; 46
    53d4:	90 e0       	ldi	r25, 0x00	; 0
    53d6:	bd d4       	rcall	.+2426   	; 0x5d52 <fputc>
    53d8:	c8 14       	cp	r12, r8
    53da:	d9 04       	cpc	r13, r9
    53dc:	4c f0       	brlt	.+18     	; 0x53f0 <vfprintf+0x31c>
    53de:	8f 85       	ldd	r24, Y+15	; 0x0f
    53e0:	98 89       	ldd	r25, Y+16	; 0x10
    53e2:	88 15       	cp	r24, r8
    53e4:	99 05       	cpc	r25, r9
    53e6:	24 f4       	brge	.+8      	; 0x53f0 <vfprintf+0x31c>
    53e8:	ed 85       	ldd	r30, Y+13	; 0x0d
    53ea:	fe 85       	ldd	r31, Y+14	; 0x0e
    53ec:	81 81       	ldd	r24, Z+1	; 0x01
    53ee:	01 c0       	rjmp	.+2      	; 0x53f2 <vfprintf+0x31e>
    53f0:	80 e3       	ldi	r24, 0x30	; 48
    53f2:	f1 e0       	ldi	r31, 0x01	; 1
    53f4:	8f 1a       	sub	r8, r31
    53f6:	91 08       	sbc	r9, r1
    53f8:	2d 85       	ldd	r18, Y+13	; 0x0d
    53fa:	3e 85       	ldd	r19, Y+14	; 0x0e
    53fc:	2f 5f       	subi	r18, 0xFF	; 255
    53fe:	3f 4f       	sbci	r19, 0xFF	; 255
    5400:	3e 87       	std	Y+14, r19	; 0x0e
    5402:	2d 87       	std	Y+13, r18	; 0x0d
    5404:	80 16       	cp	r8, r16
    5406:	91 06       	cpc	r9, r17
    5408:	24 f0       	brlt	.+8      	; 0x5412 <vfprintf+0x33e>
    540a:	b7 01       	movw	r22, r14
    540c:	90 e0       	ldi	r25, 0x00	; 0
    540e:	a1 d4       	rcall	.+2370   	; 0x5d52 <fputc>
    5410:	db cf       	rjmp	.-74     	; 0x53c8 <vfprintf+0x2f4>
    5412:	c8 14       	cp	r12, r8
    5414:	d9 04       	cpc	r13, r9
    5416:	41 f4       	brne	.+16     	; 0x5428 <vfprintf+0x354>
    5418:	9a 81       	ldd	r25, Y+2	; 0x02
    541a:	96 33       	cpi	r25, 0x36	; 54
    541c:	20 f4       	brcc	.+8      	; 0x5426 <vfprintf+0x352>
    541e:	95 33       	cpi	r25, 0x35	; 53
    5420:	19 f4       	brne	.+6      	; 0x5428 <vfprintf+0x354>
    5422:	3c 85       	ldd	r19, Y+12	; 0x0c
    5424:	34 ff       	sbrs	r19, 4
    5426:	81 e3       	ldi	r24, 0x31	; 49
    5428:	b7 01       	movw	r22, r14
    542a:	90 e0       	ldi	r25, 0x00	; 0
    542c:	48 c0       	rjmp	.+144    	; 0x54be <vfprintf+0x3ea>
    542e:	8a 81       	ldd	r24, Y+2	; 0x02
    5430:	81 33       	cpi	r24, 0x31	; 49
    5432:	19 f0       	breq	.+6      	; 0x543a <vfprintf+0x366>
    5434:	9c 85       	ldd	r25, Y+12	; 0x0c
    5436:	9f 7e       	andi	r25, 0xEF	; 239
    5438:	9c 87       	std	Y+12, r25	; 0x0c
    543a:	b7 01       	movw	r22, r14
    543c:	90 e0       	ldi	r25, 0x00	; 0
    543e:	89 d4       	rcall	.+2322   	; 0x5d52 <fputc>
    5440:	11 11       	cpse	r17, r1
    5442:	05 c0       	rjmp	.+10     	; 0x544e <vfprintf+0x37a>
    5444:	94 fc       	sbrc	r9, 4
    5446:	16 c0       	rjmp	.+44     	; 0x5474 <vfprintf+0x3a0>
    5448:	85 e6       	ldi	r24, 0x65	; 101
    544a:	90 e0       	ldi	r25, 0x00	; 0
    544c:	15 c0       	rjmp	.+42     	; 0x5478 <vfprintf+0x3a4>
    544e:	b7 01       	movw	r22, r14
    5450:	8e e2       	ldi	r24, 0x2E	; 46
    5452:	90 e0       	ldi	r25, 0x00	; 0
    5454:	7e d4       	rcall	.+2300   	; 0x5d52 <fputc>
    5456:	1e 5f       	subi	r17, 0xFE	; 254
    5458:	82 e0       	ldi	r24, 0x02	; 2
    545a:	01 e0       	ldi	r16, 0x01	; 1
    545c:	08 0f       	add	r16, r24
    545e:	f3 01       	movw	r30, r6
    5460:	e8 0f       	add	r30, r24
    5462:	f1 1d       	adc	r31, r1
    5464:	80 81       	ld	r24, Z
    5466:	b7 01       	movw	r22, r14
    5468:	90 e0       	ldi	r25, 0x00	; 0
    546a:	73 d4       	rcall	.+2278   	; 0x5d52 <fputc>
    546c:	80 2f       	mov	r24, r16
    546e:	01 13       	cpse	r16, r17
    5470:	f4 cf       	rjmp	.-24     	; 0x545a <vfprintf+0x386>
    5472:	e8 cf       	rjmp	.-48     	; 0x5444 <vfprintf+0x370>
    5474:	85 e4       	ldi	r24, 0x45	; 69
    5476:	90 e0       	ldi	r25, 0x00	; 0
    5478:	b7 01       	movw	r22, r14
    547a:	6b d4       	rcall	.+2262   	; 0x5d52 <fputc>
    547c:	d7 fc       	sbrc	r13, 7
    547e:	06 c0       	rjmp	.+12     	; 0x548c <vfprintf+0x3b8>
    5480:	c1 14       	cp	r12, r1
    5482:	d1 04       	cpc	r13, r1
    5484:	41 f4       	brne	.+16     	; 0x5496 <vfprintf+0x3c2>
    5486:	ec 85       	ldd	r30, Y+12	; 0x0c
    5488:	e4 ff       	sbrs	r30, 4
    548a:	05 c0       	rjmp	.+10     	; 0x5496 <vfprintf+0x3c2>
    548c:	d1 94       	neg	r13
    548e:	c1 94       	neg	r12
    5490:	d1 08       	sbc	r13, r1
    5492:	8d e2       	ldi	r24, 0x2D	; 45
    5494:	01 c0       	rjmp	.+2      	; 0x5498 <vfprintf+0x3c4>
    5496:	8b e2       	ldi	r24, 0x2B	; 43
    5498:	b7 01       	movw	r22, r14
    549a:	90 e0       	ldi	r25, 0x00	; 0
    549c:	5a d4       	rcall	.+2228   	; 0x5d52 <fputc>
    549e:	80 e3       	ldi	r24, 0x30	; 48
    54a0:	2a e0       	ldi	r18, 0x0A	; 10
    54a2:	c2 16       	cp	r12, r18
    54a4:	d1 04       	cpc	r13, r1
    54a6:	2c f0       	brlt	.+10     	; 0x54b2 <vfprintf+0x3de>
    54a8:	8f 5f       	subi	r24, 0xFF	; 255
    54aa:	fa e0       	ldi	r31, 0x0A	; 10
    54ac:	cf 1a       	sub	r12, r31
    54ae:	d1 08       	sbc	r13, r1
    54b0:	f7 cf       	rjmp	.-18     	; 0x54a0 <vfprintf+0x3cc>
    54b2:	b7 01       	movw	r22, r14
    54b4:	90 e0       	ldi	r25, 0x00	; 0
    54b6:	4d d4       	rcall	.+2202   	; 0x5d52 <fputc>
    54b8:	b7 01       	movw	r22, r14
    54ba:	c6 01       	movw	r24, r12
    54bc:	c0 96       	adiw	r24, 0x30	; 48
    54be:	49 d4       	rcall	.+2194   	; 0x5d52 <fputc>
    54c0:	49 c1       	rjmp	.+658    	; 0x5754 <vfprintf+0x680>
    54c2:	83 36       	cpi	r24, 0x63	; 99
    54c4:	31 f0       	breq	.+12     	; 0x54d2 <vfprintf+0x3fe>
    54c6:	83 37       	cpi	r24, 0x73	; 115
    54c8:	79 f0       	breq	.+30     	; 0x54e8 <vfprintf+0x414>
    54ca:	83 35       	cpi	r24, 0x53	; 83
    54cc:	09 f0       	breq	.+2      	; 0x54d0 <vfprintf+0x3fc>
    54ce:	52 c0       	rjmp	.+164    	; 0x5574 <vfprintf+0x4a0>
    54d0:	1f c0       	rjmp	.+62     	; 0x5510 <vfprintf+0x43c>
    54d2:	56 01       	movw	r10, r12
    54d4:	32 e0       	ldi	r19, 0x02	; 2
    54d6:	a3 0e       	add	r10, r19
    54d8:	b1 1c       	adc	r11, r1
    54da:	f6 01       	movw	r30, r12
    54dc:	80 81       	ld	r24, Z
    54de:	89 83       	std	Y+1, r24	; 0x01
    54e0:	01 e0       	ldi	r16, 0x01	; 1
    54e2:	10 e0       	ldi	r17, 0x00	; 0
    54e4:	63 01       	movw	r12, r6
    54e6:	11 c0       	rjmp	.+34     	; 0x550a <vfprintf+0x436>
    54e8:	56 01       	movw	r10, r12
    54ea:	f2 e0       	ldi	r31, 0x02	; 2
    54ec:	af 0e       	add	r10, r31
    54ee:	b1 1c       	adc	r11, r1
    54f0:	f6 01       	movw	r30, r12
    54f2:	c0 80       	ld	r12, Z
    54f4:	d1 80       	ldd	r13, Z+1	; 0x01
    54f6:	96 fe       	sbrs	r9, 6
    54f8:	03 c0       	rjmp	.+6      	; 0x5500 <vfprintf+0x42c>
    54fa:	61 2f       	mov	r22, r17
    54fc:	70 e0       	ldi	r23, 0x00	; 0
    54fe:	02 c0       	rjmp	.+4      	; 0x5504 <vfprintf+0x430>
    5500:	6f ef       	ldi	r22, 0xFF	; 255
    5502:	7f ef       	ldi	r23, 0xFF	; 255
    5504:	c6 01       	movw	r24, r12
    5506:	1a d4       	rcall	.+2100   	; 0x5d3c <strnlen>
    5508:	8c 01       	movw	r16, r24
    550a:	f9 2d       	mov	r31, r9
    550c:	ff 77       	andi	r31, 0x7F	; 127
    550e:	13 c0       	rjmp	.+38     	; 0x5536 <vfprintf+0x462>
    5510:	56 01       	movw	r10, r12
    5512:	22 e0       	ldi	r18, 0x02	; 2
    5514:	a2 0e       	add	r10, r18
    5516:	b1 1c       	adc	r11, r1
    5518:	f6 01       	movw	r30, r12
    551a:	c0 80       	ld	r12, Z
    551c:	d1 80       	ldd	r13, Z+1	; 0x01
    551e:	96 fe       	sbrs	r9, 6
    5520:	03 c0       	rjmp	.+6      	; 0x5528 <vfprintf+0x454>
    5522:	61 2f       	mov	r22, r17
    5524:	70 e0       	ldi	r23, 0x00	; 0
    5526:	02 c0       	rjmp	.+4      	; 0x552c <vfprintf+0x458>
    5528:	6f ef       	ldi	r22, 0xFF	; 255
    552a:	7f ef       	ldi	r23, 0xFF	; 255
    552c:	c6 01       	movw	r24, r12
    552e:	9c d3       	rcall	.+1848   	; 0x5c68 <strnlen_P>
    5530:	8c 01       	movw	r16, r24
    5532:	f9 2d       	mov	r31, r9
    5534:	f0 68       	ori	r31, 0x80	; 128
    5536:	9f 2e       	mov	r9, r31
    5538:	f3 fd       	sbrc	r31, 3
    553a:	18 c0       	rjmp	.+48     	; 0x556c <vfprintf+0x498>
    553c:	85 2d       	mov	r24, r5
    553e:	90 e0       	ldi	r25, 0x00	; 0
    5540:	08 17       	cp	r16, r24
    5542:	19 07       	cpc	r17, r25
    5544:	98 f4       	brcc	.+38     	; 0x556c <vfprintf+0x498>
    5546:	b7 01       	movw	r22, r14
    5548:	80 e2       	ldi	r24, 0x20	; 32
    554a:	90 e0       	ldi	r25, 0x00	; 0
    554c:	02 d4       	rcall	.+2052   	; 0x5d52 <fputc>
    554e:	5a 94       	dec	r5
    5550:	f5 cf       	rjmp	.-22     	; 0x553c <vfprintf+0x468>
    5552:	f6 01       	movw	r30, r12
    5554:	97 fc       	sbrc	r9, 7
    5556:	85 91       	lpm	r24, Z+
    5558:	97 fe       	sbrs	r9, 7
    555a:	81 91       	ld	r24, Z+
    555c:	6f 01       	movw	r12, r30
    555e:	b7 01       	movw	r22, r14
    5560:	90 e0       	ldi	r25, 0x00	; 0
    5562:	f7 d3       	rcall	.+2030   	; 0x5d52 <fputc>
    5564:	51 10       	cpse	r5, r1
    5566:	5a 94       	dec	r5
    5568:	01 50       	subi	r16, 0x01	; 1
    556a:	11 09       	sbc	r17, r1
    556c:	01 15       	cp	r16, r1
    556e:	11 05       	cpc	r17, r1
    5570:	81 f7       	brne	.-32     	; 0x5552 <vfprintf+0x47e>
    5572:	f0 c0       	rjmp	.+480    	; 0x5754 <vfprintf+0x680>
    5574:	84 36       	cpi	r24, 0x64	; 100
    5576:	11 f0       	breq	.+4      	; 0x557c <vfprintf+0x4a8>
    5578:	89 36       	cpi	r24, 0x69	; 105
    557a:	59 f5       	brne	.+86     	; 0x55d2 <vfprintf+0x4fe>
    557c:	56 01       	movw	r10, r12
    557e:	97 fe       	sbrs	r9, 7
    5580:	09 c0       	rjmp	.+18     	; 0x5594 <vfprintf+0x4c0>
    5582:	24 e0       	ldi	r18, 0x04	; 4
    5584:	a2 0e       	add	r10, r18
    5586:	b1 1c       	adc	r11, r1
    5588:	f6 01       	movw	r30, r12
    558a:	60 81       	ld	r22, Z
    558c:	71 81       	ldd	r23, Z+1	; 0x01
    558e:	82 81       	ldd	r24, Z+2	; 0x02
    5590:	93 81       	ldd	r25, Z+3	; 0x03
    5592:	0a c0       	rjmp	.+20     	; 0x55a8 <vfprintf+0x4d4>
    5594:	f2 e0       	ldi	r31, 0x02	; 2
    5596:	af 0e       	add	r10, r31
    5598:	b1 1c       	adc	r11, r1
    559a:	f6 01       	movw	r30, r12
    559c:	60 81       	ld	r22, Z
    559e:	71 81       	ldd	r23, Z+1	; 0x01
    55a0:	07 2e       	mov	r0, r23
    55a2:	00 0c       	add	r0, r0
    55a4:	88 0b       	sbc	r24, r24
    55a6:	99 0b       	sbc	r25, r25
    55a8:	f9 2d       	mov	r31, r9
    55aa:	ff 76       	andi	r31, 0x6F	; 111
    55ac:	9f 2e       	mov	r9, r31
    55ae:	97 ff       	sbrs	r25, 7
    55b0:	09 c0       	rjmp	.+18     	; 0x55c4 <vfprintf+0x4f0>
    55b2:	90 95       	com	r25
    55b4:	80 95       	com	r24
    55b6:	70 95       	com	r23
    55b8:	61 95       	neg	r22
    55ba:	7f 4f       	sbci	r23, 0xFF	; 255
    55bc:	8f 4f       	sbci	r24, 0xFF	; 255
    55be:	9f 4f       	sbci	r25, 0xFF	; 255
    55c0:	f0 68       	ori	r31, 0x80	; 128
    55c2:	9f 2e       	mov	r9, r31
    55c4:	2a e0       	ldi	r18, 0x0A	; 10
    55c6:	30 e0       	ldi	r19, 0x00	; 0
    55c8:	a3 01       	movw	r20, r6
    55ca:	70 d4       	rcall	.+2272   	; 0x5eac <__ultoa_invert>
    55cc:	c8 2e       	mov	r12, r24
    55ce:	c6 18       	sub	r12, r6
    55d0:	3e c0       	rjmp	.+124    	; 0x564e <vfprintf+0x57a>
    55d2:	09 2d       	mov	r16, r9
    55d4:	85 37       	cpi	r24, 0x75	; 117
    55d6:	21 f4       	brne	.+8      	; 0x55e0 <vfprintf+0x50c>
    55d8:	0f 7e       	andi	r16, 0xEF	; 239
    55da:	2a e0       	ldi	r18, 0x0A	; 10
    55dc:	30 e0       	ldi	r19, 0x00	; 0
    55de:	1d c0       	rjmp	.+58     	; 0x561a <vfprintf+0x546>
    55e0:	09 7f       	andi	r16, 0xF9	; 249
    55e2:	8f 36       	cpi	r24, 0x6F	; 111
    55e4:	91 f0       	breq	.+36     	; 0x560a <vfprintf+0x536>
    55e6:	18 f4       	brcc	.+6      	; 0x55ee <vfprintf+0x51a>
    55e8:	88 35       	cpi	r24, 0x58	; 88
    55ea:	59 f0       	breq	.+22     	; 0x5602 <vfprintf+0x52e>
    55ec:	bc c0       	rjmp	.+376    	; 0x5766 <vfprintf+0x692>
    55ee:	80 37       	cpi	r24, 0x70	; 112
    55f0:	19 f0       	breq	.+6      	; 0x55f8 <vfprintf+0x524>
    55f2:	88 37       	cpi	r24, 0x78	; 120
    55f4:	11 f0       	breq	.+4      	; 0x55fa <vfprintf+0x526>
    55f6:	b7 c0       	rjmp	.+366    	; 0x5766 <vfprintf+0x692>
    55f8:	00 61       	ori	r16, 0x10	; 16
    55fa:	04 ff       	sbrs	r16, 4
    55fc:	09 c0       	rjmp	.+18     	; 0x5610 <vfprintf+0x53c>
    55fe:	04 60       	ori	r16, 0x04	; 4
    5600:	07 c0       	rjmp	.+14     	; 0x5610 <vfprintf+0x53c>
    5602:	94 fe       	sbrs	r9, 4
    5604:	08 c0       	rjmp	.+16     	; 0x5616 <vfprintf+0x542>
    5606:	06 60       	ori	r16, 0x06	; 6
    5608:	06 c0       	rjmp	.+12     	; 0x5616 <vfprintf+0x542>
    560a:	28 e0       	ldi	r18, 0x08	; 8
    560c:	30 e0       	ldi	r19, 0x00	; 0
    560e:	05 c0       	rjmp	.+10     	; 0x561a <vfprintf+0x546>
    5610:	20 e1       	ldi	r18, 0x10	; 16
    5612:	30 e0       	ldi	r19, 0x00	; 0
    5614:	02 c0       	rjmp	.+4      	; 0x561a <vfprintf+0x546>
    5616:	20 e1       	ldi	r18, 0x10	; 16
    5618:	32 e0       	ldi	r19, 0x02	; 2
    561a:	56 01       	movw	r10, r12
    561c:	07 ff       	sbrs	r16, 7
    561e:	09 c0       	rjmp	.+18     	; 0x5632 <vfprintf+0x55e>
    5620:	84 e0       	ldi	r24, 0x04	; 4
    5622:	a8 0e       	add	r10, r24
    5624:	b1 1c       	adc	r11, r1
    5626:	f6 01       	movw	r30, r12
    5628:	60 81       	ld	r22, Z
    562a:	71 81       	ldd	r23, Z+1	; 0x01
    562c:	82 81       	ldd	r24, Z+2	; 0x02
    562e:	93 81       	ldd	r25, Z+3	; 0x03
    5630:	08 c0       	rjmp	.+16     	; 0x5642 <vfprintf+0x56e>
    5632:	f2 e0       	ldi	r31, 0x02	; 2
    5634:	af 0e       	add	r10, r31
    5636:	b1 1c       	adc	r11, r1
    5638:	f6 01       	movw	r30, r12
    563a:	60 81       	ld	r22, Z
    563c:	71 81       	ldd	r23, Z+1	; 0x01
    563e:	80 e0       	ldi	r24, 0x00	; 0
    5640:	90 e0       	ldi	r25, 0x00	; 0
    5642:	a3 01       	movw	r20, r6
    5644:	33 d4       	rcall	.+2150   	; 0x5eac <__ultoa_invert>
    5646:	c8 2e       	mov	r12, r24
    5648:	c6 18       	sub	r12, r6
    564a:	0f 77       	andi	r16, 0x7F	; 127
    564c:	90 2e       	mov	r9, r16
    564e:	96 fe       	sbrs	r9, 6
    5650:	0b c0       	rjmp	.+22     	; 0x5668 <vfprintf+0x594>
    5652:	09 2d       	mov	r16, r9
    5654:	0e 7f       	andi	r16, 0xFE	; 254
    5656:	c1 16       	cp	r12, r17
    5658:	50 f4       	brcc	.+20     	; 0x566e <vfprintf+0x59a>
    565a:	94 fe       	sbrs	r9, 4
    565c:	0a c0       	rjmp	.+20     	; 0x5672 <vfprintf+0x59e>
    565e:	92 fc       	sbrc	r9, 2
    5660:	08 c0       	rjmp	.+16     	; 0x5672 <vfprintf+0x59e>
    5662:	09 2d       	mov	r16, r9
    5664:	0e 7e       	andi	r16, 0xEE	; 238
    5666:	05 c0       	rjmp	.+10     	; 0x5672 <vfprintf+0x59e>
    5668:	dc 2c       	mov	r13, r12
    566a:	09 2d       	mov	r16, r9
    566c:	03 c0       	rjmp	.+6      	; 0x5674 <vfprintf+0x5a0>
    566e:	dc 2c       	mov	r13, r12
    5670:	01 c0       	rjmp	.+2      	; 0x5674 <vfprintf+0x5a0>
    5672:	d1 2e       	mov	r13, r17
    5674:	04 ff       	sbrs	r16, 4
    5676:	0d c0       	rjmp	.+26     	; 0x5692 <vfprintf+0x5be>
    5678:	fe 01       	movw	r30, r28
    567a:	ec 0d       	add	r30, r12
    567c:	f1 1d       	adc	r31, r1
    567e:	80 81       	ld	r24, Z
    5680:	80 33       	cpi	r24, 0x30	; 48
    5682:	11 f4       	brne	.+4      	; 0x5688 <vfprintf+0x5b4>
    5684:	09 7e       	andi	r16, 0xE9	; 233
    5686:	09 c0       	rjmp	.+18     	; 0x569a <vfprintf+0x5c6>
    5688:	02 ff       	sbrs	r16, 2
    568a:	06 c0       	rjmp	.+12     	; 0x5698 <vfprintf+0x5c4>
    568c:	d3 94       	inc	r13
    568e:	d3 94       	inc	r13
    5690:	04 c0       	rjmp	.+8      	; 0x569a <vfprintf+0x5c6>
    5692:	80 2f       	mov	r24, r16
    5694:	86 78       	andi	r24, 0x86	; 134
    5696:	09 f0       	breq	.+2      	; 0x569a <vfprintf+0x5c6>
    5698:	d3 94       	inc	r13
    569a:	03 fd       	sbrc	r16, 3
    569c:	10 c0       	rjmp	.+32     	; 0x56be <vfprintf+0x5ea>
    569e:	00 ff       	sbrs	r16, 0
    56a0:	06 c0       	rjmp	.+12     	; 0x56ae <vfprintf+0x5da>
    56a2:	1c 2d       	mov	r17, r12
    56a4:	d5 14       	cp	r13, r5
    56a6:	78 f4       	brcc	.+30     	; 0x56c6 <vfprintf+0x5f2>
    56a8:	15 0d       	add	r17, r5
    56aa:	1d 19       	sub	r17, r13
    56ac:	0c c0       	rjmp	.+24     	; 0x56c6 <vfprintf+0x5f2>
    56ae:	d5 14       	cp	r13, r5
    56b0:	50 f4       	brcc	.+20     	; 0x56c6 <vfprintf+0x5f2>
    56b2:	b7 01       	movw	r22, r14
    56b4:	80 e2       	ldi	r24, 0x20	; 32
    56b6:	90 e0       	ldi	r25, 0x00	; 0
    56b8:	4c d3       	rcall	.+1688   	; 0x5d52 <fputc>
    56ba:	d3 94       	inc	r13
    56bc:	f8 cf       	rjmp	.-16     	; 0x56ae <vfprintf+0x5da>
    56be:	d5 14       	cp	r13, r5
    56c0:	10 f4       	brcc	.+4      	; 0x56c6 <vfprintf+0x5f2>
    56c2:	5d 18       	sub	r5, r13
    56c4:	01 c0       	rjmp	.+2      	; 0x56c8 <vfprintf+0x5f4>
    56c6:	51 2c       	mov	r5, r1
    56c8:	04 ff       	sbrs	r16, 4
    56ca:	0f c0       	rjmp	.+30     	; 0x56ea <vfprintf+0x616>
    56cc:	b7 01       	movw	r22, r14
    56ce:	80 e3       	ldi	r24, 0x30	; 48
    56d0:	90 e0       	ldi	r25, 0x00	; 0
    56d2:	3f d3       	rcall	.+1662   	; 0x5d52 <fputc>
    56d4:	02 ff       	sbrs	r16, 2
    56d6:	16 c0       	rjmp	.+44     	; 0x5704 <vfprintf+0x630>
    56d8:	01 fd       	sbrc	r16, 1
    56da:	03 c0       	rjmp	.+6      	; 0x56e2 <vfprintf+0x60e>
    56dc:	88 e7       	ldi	r24, 0x78	; 120
    56de:	90 e0       	ldi	r25, 0x00	; 0
    56e0:	02 c0       	rjmp	.+4      	; 0x56e6 <vfprintf+0x612>
    56e2:	88 e5       	ldi	r24, 0x58	; 88
    56e4:	90 e0       	ldi	r25, 0x00	; 0
    56e6:	b7 01       	movw	r22, r14
    56e8:	0c c0       	rjmp	.+24     	; 0x5702 <vfprintf+0x62e>
    56ea:	80 2f       	mov	r24, r16
    56ec:	86 78       	andi	r24, 0x86	; 134
    56ee:	51 f0       	breq	.+20     	; 0x5704 <vfprintf+0x630>
    56f0:	01 ff       	sbrs	r16, 1
    56f2:	02 c0       	rjmp	.+4      	; 0x56f8 <vfprintf+0x624>
    56f4:	8b e2       	ldi	r24, 0x2B	; 43
    56f6:	01 c0       	rjmp	.+2      	; 0x56fa <vfprintf+0x626>
    56f8:	80 e2       	ldi	r24, 0x20	; 32
    56fa:	07 fd       	sbrc	r16, 7
    56fc:	8d e2       	ldi	r24, 0x2D	; 45
    56fe:	b7 01       	movw	r22, r14
    5700:	90 e0       	ldi	r25, 0x00	; 0
    5702:	27 d3       	rcall	.+1614   	; 0x5d52 <fputc>
    5704:	c1 16       	cp	r12, r17
    5706:	30 f4       	brcc	.+12     	; 0x5714 <vfprintf+0x640>
    5708:	b7 01       	movw	r22, r14
    570a:	80 e3       	ldi	r24, 0x30	; 48
    570c:	90 e0       	ldi	r25, 0x00	; 0
    570e:	21 d3       	rcall	.+1602   	; 0x5d52 <fputc>
    5710:	11 50       	subi	r17, 0x01	; 1
    5712:	f8 cf       	rjmp	.-16     	; 0x5704 <vfprintf+0x630>
    5714:	ca 94       	dec	r12
    5716:	f3 01       	movw	r30, r6
    5718:	ec 0d       	add	r30, r12
    571a:	f1 1d       	adc	r31, r1
    571c:	80 81       	ld	r24, Z
    571e:	b7 01       	movw	r22, r14
    5720:	90 e0       	ldi	r25, 0x00	; 0
    5722:	17 d3       	rcall	.+1582   	; 0x5d52 <fputc>
    5724:	c1 10       	cpse	r12, r1
    5726:	f6 cf       	rjmp	.-20     	; 0x5714 <vfprintf+0x640>
    5728:	15 c0       	rjmp	.+42     	; 0x5754 <vfprintf+0x680>
    572a:	f4 e0       	ldi	r31, 0x04	; 4
    572c:	f5 15       	cp	r31, r5
    572e:	50 f5       	brcc	.+84     	; 0x5784 <vfprintf+0x6b0>
    5730:	84 e0       	ldi	r24, 0x04	; 4
    5732:	58 1a       	sub	r5, r24
    5734:	93 fe       	sbrs	r9, 3
    5736:	1e c0       	rjmp	.+60     	; 0x5774 <vfprintf+0x6a0>
    5738:	01 11       	cpse	r16, r1
    573a:	25 c0       	rjmp	.+74     	; 0x5786 <vfprintf+0x6b2>
    573c:	2c 85       	ldd	r18, Y+12	; 0x0c
    573e:	23 ff       	sbrs	r18, 3
    5740:	27 c0       	rjmp	.+78     	; 0x5790 <vfprintf+0x6bc>
    5742:	0a e9       	ldi	r16, 0x9A	; 154
    5744:	11 e0       	ldi	r17, 0x01	; 1
    5746:	39 2d       	mov	r19, r9
    5748:	30 71       	andi	r19, 0x10	; 16
    574a:	93 2e       	mov	r9, r19
    574c:	f8 01       	movw	r30, r16
    574e:	84 91       	lpm	r24, Z
    5750:	81 11       	cpse	r24, r1
    5752:	21 c0       	rjmp	.+66     	; 0x5796 <vfprintf+0x6c2>
    5754:	55 20       	and	r5, r5
    5756:	09 f4       	brne	.+2      	; 0x575a <vfprintf+0x686>
    5758:	fc cc       	rjmp	.-1544   	; 0x5152 <vfprintf+0x7e>
    575a:	b7 01       	movw	r22, r14
    575c:	80 e2       	ldi	r24, 0x20	; 32
    575e:	90 e0       	ldi	r25, 0x00	; 0
    5760:	f8 d2       	rcall	.+1520   	; 0x5d52 <fputc>
    5762:	5a 94       	dec	r5
    5764:	f7 cf       	rjmp	.-18     	; 0x5754 <vfprintf+0x680>
    5766:	f7 01       	movw	r30, r14
    5768:	86 81       	ldd	r24, Z+6	; 0x06
    576a:	97 81       	ldd	r25, Z+7	; 0x07
    576c:	23 c0       	rjmp	.+70     	; 0x57b4 <vfprintf+0x6e0>
    576e:	8f ef       	ldi	r24, 0xFF	; 255
    5770:	9f ef       	ldi	r25, 0xFF	; 255
    5772:	20 c0       	rjmp	.+64     	; 0x57b4 <vfprintf+0x6e0>
    5774:	b7 01       	movw	r22, r14
    5776:	80 e2       	ldi	r24, 0x20	; 32
    5778:	90 e0       	ldi	r25, 0x00	; 0
    577a:	eb d2       	rcall	.+1494   	; 0x5d52 <fputc>
    577c:	5a 94       	dec	r5
    577e:	51 10       	cpse	r5, r1
    5780:	f9 cf       	rjmp	.-14     	; 0x5774 <vfprintf+0x6a0>
    5782:	da cf       	rjmp	.-76     	; 0x5738 <vfprintf+0x664>
    5784:	51 2c       	mov	r5, r1
    5786:	b7 01       	movw	r22, r14
    5788:	80 2f       	mov	r24, r16
    578a:	90 e0       	ldi	r25, 0x00	; 0
    578c:	e2 d2       	rcall	.+1476   	; 0x5d52 <fputc>
    578e:	d6 cf       	rjmp	.-84     	; 0x573c <vfprintf+0x668>
    5790:	0e e9       	ldi	r16, 0x9E	; 158
    5792:	11 e0       	ldi	r17, 0x01	; 1
    5794:	d8 cf       	rjmp	.-80     	; 0x5746 <vfprintf+0x672>
    5796:	91 10       	cpse	r9, r1
    5798:	80 52       	subi	r24, 0x20	; 32
    579a:	b7 01       	movw	r22, r14
    579c:	90 e0       	ldi	r25, 0x00	; 0
    579e:	d9 d2       	rcall	.+1458   	; 0x5d52 <fputc>
    57a0:	0f 5f       	subi	r16, 0xFF	; 255
    57a2:	1f 4f       	sbci	r17, 0xFF	; 255
    57a4:	d3 cf       	rjmp	.-90     	; 0x574c <vfprintf+0x678>
    57a6:	23 e0       	ldi	r18, 0x03	; 3
    57a8:	25 15       	cp	r18, r5
    57aa:	10 f4       	brcc	.+4      	; 0x57b0 <vfprintf+0x6dc>
    57ac:	83 e0       	ldi	r24, 0x03	; 3
    57ae:	c1 cf       	rjmp	.-126    	; 0x5732 <vfprintf+0x65e>
    57b0:	51 2c       	mov	r5, r1
    57b2:	c4 cf       	rjmp	.-120    	; 0x573c <vfprintf+0x668>
    57b4:	60 96       	adiw	r28, 0x10	; 16
    57b6:	0f b6       	in	r0, 0x3f	; 63
    57b8:	f8 94       	cli
    57ba:	de bf       	out	0x3e, r29	; 62
    57bc:	0f be       	out	0x3f, r0	; 63
    57be:	cd bf       	out	0x3d, r28	; 61
    57c0:	df 91       	pop	r29
    57c2:	cf 91       	pop	r28
    57c4:	1f 91       	pop	r17
    57c6:	0f 91       	pop	r16
    57c8:	ff 90       	pop	r15
    57ca:	ef 90       	pop	r14
    57cc:	df 90       	pop	r13
    57ce:	cf 90       	pop	r12
    57d0:	bf 90       	pop	r11
    57d2:	af 90       	pop	r10
    57d4:	9f 90       	pop	r9
    57d6:	8f 90       	pop	r8
    57d8:	7f 90       	pop	r7
    57da:	6f 90       	pop	r6
    57dc:	5f 90       	pop	r5
    57de:	4f 90       	pop	r4
    57e0:	3f 90       	pop	r3
    57e2:	2f 90       	pop	r2
    57e4:	08 95       	ret

000057e6 <__udivmodsi4>:
    57e6:	a1 e2       	ldi	r26, 0x21	; 33
    57e8:	1a 2e       	mov	r1, r26
    57ea:	aa 1b       	sub	r26, r26
    57ec:	bb 1b       	sub	r27, r27
    57ee:	fd 01       	movw	r30, r26
    57f0:	0d c0       	rjmp	.+26     	; 0x580c <__udivmodsi4_ep>

000057f2 <__udivmodsi4_loop>:
    57f2:	aa 1f       	adc	r26, r26
    57f4:	bb 1f       	adc	r27, r27
    57f6:	ee 1f       	adc	r30, r30
    57f8:	ff 1f       	adc	r31, r31
    57fa:	a2 17       	cp	r26, r18
    57fc:	b3 07       	cpc	r27, r19
    57fe:	e4 07       	cpc	r30, r20
    5800:	f5 07       	cpc	r31, r21
    5802:	20 f0       	brcs	.+8      	; 0x580c <__udivmodsi4_ep>
    5804:	a2 1b       	sub	r26, r18
    5806:	b3 0b       	sbc	r27, r19
    5808:	e4 0b       	sbc	r30, r20
    580a:	f5 0b       	sbc	r31, r21

0000580c <__udivmodsi4_ep>:
    580c:	66 1f       	adc	r22, r22
    580e:	77 1f       	adc	r23, r23
    5810:	88 1f       	adc	r24, r24
    5812:	99 1f       	adc	r25, r25
    5814:	1a 94       	dec	r1
    5816:	69 f7       	brne	.-38     	; 0x57f2 <__udivmodsi4_loop>
    5818:	60 95       	com	r22
    581a:	70 95       	com	r23
    581c:	80 95       	com	r24
    581e:	90 95       	com	r25
    5820:	9b 01       	movw	r18, r22
    5822:	ac 01       	movw	r20, r24
    5824:	bd 01       	movw	r22, r26
    5826:	cf 01       	movw	r24, r30
    5828:	08 95       	ret

0000582a <__tablejump2__>:
    582a:	ee 0f       	add	r30, r30
    582c:	ff 1f       	adc	r31, r31
    582e:	88 1f       	adc	r24, r24
    5830:	8b bf       	out	0x3b, r24	; 59
    5832:	07 90       	elpm	r0, Z+
    5834:	f6 91       	elpm	r31, Z
    5836:	e0 2d       	mov	r30, r0
    5838:	19 94       	eijmp

0000583a <calloc>:
    583a:	0f 93       	push	r16
    583c:	1f 93       	push	r17
    583e:	cf 93       	push	r28
    5840:	df 93       	push	r29
    5842:	86 9f       	mul	r24, r22
    5844:	80 01       	movw	r16, r0
    5846:	87 9f       	mul	r24, r23
    5848:	10 0d       	add	r17, r0
    584a:	96 9f       	mul	r25, r22
    584c:	10 0d       	add	r17, r0
    584e:	11 24       	eor	r1, r1
    5850:	c8 01       	movw	r24, r16
    5852:	0d d0       	rcall	.+26     	; 0x586e <malloc>
    5854:	ec 01       	movw	r28, r24
    5856:	00 97       	sbiw	r24, 0x00	; 0
    5858:	21 f0       	breq	.+8      	; 0x5862 <calloc+0x28>
    585a:	a8 01       	movw	r20, r16
    585c:	60 e0       	ldi	r22, 0x00	; 0
    585e:	70 e0       	ldi	r23, 0x00	; 0
    5860:	17 d2       	rcall	.+1070   	; 0x5c90 <memset>
    5862:	ce 01       	movw	r24, r28
    5864:	df 91       	pop	r29
    5866:	cf 91       	pop	r28
    5868:	1f 91       	pop	r17
    586a:	0f 91       	pop	r16
    586c:	08 95       	ret

0000586e <malloc>:
    586e:	0f 93       	push	r16
    5870:	1f 93       	push	r17
    5872:	cf 93       	push	r28
    5874:	df 93       	push	r29
    5876:	82 30       	cpi	r24, 0x02	; 2
    5878:	91 05       	cpc	r25, r1
    587a:	10 f4       	brcc	.+4      	; 0x5880 <malloc+0x12>
    587c:	82 e0       	ldi	r24, 0x02	; 2
    587e:	90 e0       	ldi	r25, 0x00	; 0
    5880:	e0 91 7a 13 	lds	r30, 0x137A	; 0x80137a <__flp>
    5884:	f0 91 7b 13 	lds	r31, 0x137B	; 0x80137b <__flp+0x1>
    5888:	20 e0       	ldi	r18, 0x00	; 0
    588a:	30 e0       	ldi	r19, 0x00	; 0
    588c:	a0 e0       	ldi	r26, 0x00	; 0
    588e:	b0 e0       	ldi	r27, 0x00	; 0
    5890:	30 97       	sbiw	r30, 0x00	; 0
    5892:	19 f1       	breq	.+70     	; 0x58da <malloc+0x6c>
    5894:	40 81       	ld	r20, Z
    5896:	51 81       	ldd	r21, Z+1	; 0x01
    5898:	02 81       	ldd	r16, Z+2	; 0x02
    589a:	13 81       	ldd	r17, Z+3	; 0x03
    589c:	48 17       	cp	r20, r24
    589e:	59 07       	cpc	r21, r25
    58a0:	c8 f0       	brcs	.+50     	; 0x58d4 <malloc+0x66>
    58a2:	84 17       	cp	r24, r20
    58a4:	95 07       	cpc	r25, r21
    58a6:	69 f4       	brne	.+26     	; 0x58c2 <malloc+0x54>
    58a8:	10 97       	sbiw	r26, 0x00	; 0
    58aa:	31 f0       	breq	.+12     	; 0x58b8 <malloc+0x4a>
    58ac:	12 96       	adiw	r26, 0x02	; 2
    58ae:	0c 93       	st	X, r16
    58b0:	12 97       	sbiw	r26, 0x02	; 2
    58b2:	13 96       	adiw	r26, 0x03	; 3
    58b4:	1c 93       	st	X, r17
    58b6:	27 c0       	rjmp	.+78     	; 0x5906 <malloc+0x98>
    58b8:	00 93 7a 13 	sts	0x137A, r16	; 0x80137a <__flp>
    58bc:	10 93 7b 13 	sts	0x137B, r17	; 0x80137b <__flp+0x1>
    58c0:	22 c0       	rjmp	.+68     	; 0x5906 <malloc+0x98>
    58c2:	21 15       	cp	r18, r1
    58c4:	31 05       	cpc	r19, r1
    58c6:	19 f0       	breq	.+6      	; 0x58ce <malloc+0x60>
    58c8:	42 17       	cp	r20, r18
    58ca:	53 07       	cpc	r21, r19
    58cc:	18 f4       	brcc	.+6      	; 0x58d4 <malloc+0x66>
    58ce:	9a 01       	movw	r18, r20
    58d0:	bd 01       	movw	r22, r26
    58d2:	ef 01       	movw	r28, r30
    58d4:	df 01       	movw	r26, r30
    58d6:	f8 01       	movw	r30, r16
    58d8:	db cf       	rjmp	.-74     	; 0x5890 <malloc+0x22>
    58da:	21 15       	cp	r18, r1
    58dc:	31 05       	cpc	r19, r1
    58de:	f9 f0       	breq	.+62     	; 0x591e <malloc+0xb0>
    58e0:	28 1b       	sub	r18, r24
    58e2:	39 0b       	sbc	r19, r25
    58e4:	24 30       	cpi	r18, 0x04	; 4
    58e6:	31 05       	cpc	r19, r1
    58e8:	80 f4       	brcc	.+32     	; 0x590a <malloc+0x9c>
    58ea:	8a 81       	ldd	r24, Y+2	; 0x02
    58ec:	9b 81       	ldd	r25, Y+3	; 0x03
    58ee:	61 15       	cp	r22, r1
    58f0:	71 05       	cpc	r23, r1
    58f2:	21 f0       	breq	.+8      	; 0x58fc <malloc+0x8e>
    58f4:	fb 01       	movw	r30, r22
    58f6:	93 83       	std	Z+3, r25	; 0x03
    58f8:	82 83       	std	Z+2, r24	; 0x02
    58fa:	04 c0       	rjmp	.+8      	; 0x5904 <malloc+0x96>
    58fc:	90 93 7b 13 	sts	0x137B, r25	; 0x80137b <__flp+0x1>
    5900:	80 93 7a 13 	sts	0x137A, r24	; 0x80137a <__flp>
    5904:	fe 01       	movw	r30, r28
    5906:	32 96       	adiw	r30, 0x02	; 2
    5908:	44 c0       	rjmp	.+136    	; 0x5992 <malloc+0x124>
    590a:	fe 01       	movw	r30, r28
    590c:	e2 0f       	add	r30, r18
    590e:	f3 1f       	adc	r31, r19
    5910:	81 93       	st	Z+, r24
    5912:	91 93       	st	Z+, r25
    5914:	22 50       	subi	r18, 0x02	; 2
    5916:	31 09       	sbc	r19, r1
    5918:	39 83       	std	Y+1, r19	; 0x01
    591a:	28 83       	st	Y, r18
    591c:	3a c0       	rjmp	.+116    	; 0x5992 <malloc+0x124>
    591e:	20 91 78 13 	lds	r18, 0x1378	; 0x801378 <__brkval>
    5922:	30 91 79 13 	lds	r19, 0x1379	; 0x801379 <__brkval+0x1>
    5926:	23 2b       	or	r18, r19
    5928:	41 f4       	brne	.+16     	; 0x593a <malloc+0xcc>
    592a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    592e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5932:	30 93 79 13 	sts	0x1379, r19	; 0x801379 <__brkval+0x1>
    5936:	20 93 78 13 	sts	0x1378, r18	; 0x801378 <__brkval>
    593a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    593e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5942:	21 15       	cp	r18, r1
    5944:	31 05       	cpc	r19, r1
    5946:	41 f4       	brne	.+16     	; 0x5958 <malloc+0xea>
    5948:	2d b7       	in	r18, 0x3d	; 61
    594a:	3e b7       	in	r19, 0x3e	; 62
    594c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5950:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5954:	24 1b       	sub	r18, r20
    5956:	35 0b       	sbc	r19, r21
    5958:	e0 91 78 13 	lds	r30, 0x1378	; 0x801378 <__brkval>
    595c:	f0 91 79 13 	lds	r31, 0x1379	; 0x801379 <__brkval+0x1>
    5960:	e2 17       	cp	r30, r18
    5962:	f3 07       	cpc	r31, r19
    5964:	a0 f4       	brcc	.+40     	; 0x598e <malloc+0x120>
    5966:	2e 1b       	sub	r18, r30
    5968:	3f 0b       	sbc	r19, r31
    596a:	28 17       	cp	r18, r24
    596c:	39 07       	cpc	r19, r25
    596e:	78 f0       	brcs	.+30     	; 0x598e <malloc+0x120>
    5970:	ac 01       	movw	r20, r24
    5972:	4e 5f       	subi	r20, 0xFE	; 254
    5974:	5f 4f       	sbci	r21, 0xFF	; 255
    5976:	24 17       	cp	r18, r20
    5978:	35 07       	cpc	r19, r21
    597a:	48 f0       	brcs	.+18     	; 0x598e <malloc+0x120>
    597c:	4e 0f       	add	r20, r30
    597e:	5f 1f       	adc	r21, r31
    5980:	50 93 79 13 	sts	0x1379, r21	; 0x801379 <__brkval+0x1>
    5984:	40 93 78 13 	sts	0x1378, r20	; 0x801378 <__brkval>
    5988:	81 93       	st	Z+, r24
    598a:	91 93       	st	Z+, r25
    598c:	02 c0       	rjmp	.+4      	; 0x5992 <malloc+0x124>
    598e:	e0 e0       	ldi	r30, 0x00	; 0
    5990:	f0 e0       	ldi	r31, 0x00	; 0
    5992:	cf 01       	movw	r24, r30
    5994:	df 91       	pop	r29
    5996:	cf 91       	pop	r28
    5998:	1f 91       	pop	r17
    599a:	0f 91       	pop	r16
    599c:	08 95       	ret

0000599e <free>:
    599e:	cf 93       	push	r28
    59a0:	df 93       	push	r29
    59a2:	00 97       	sbiw	r24, 0x00	; 0
    59a4:	09 f4       	brne	.+2      	; 0x59a8 <free+0xa>
    59a6:	81 c0       	rjmp	.+258    	; 0x5aaa <free+0x10c>
    59a8:	fc 01       	movw	r30, r24
    59aa:	32 97       	sbiw	r30, 0x02	; 2
    59ac:	13 82       	std	Z+3, r1	; 0x03
    59ae:	12 82       	std	Z+2, r1	; 0x02
    59b0:	a0 91 7a 13 	lds	r26, 0x137A	; 0x80137a <__flp>
    59b4:	b0 91 7b 13 	lds	r27, 0x137B	; 0x80137b <__flp+0x1>
    59b8:	10 97       	sbiw	r26, 0x00	; 0
    59ba:	81 f4       	brne	.+32     	; 0x59dc <free+0x3e>
    59bc:	20 81       	ld	r18, Z
    59be:	31 81       	ldd	r19, Z+1	; 0x01
    59c0:	82 0f       	add	r24, r18
    59c2:	93 1f       	adc	r25, r19
    59c4:	20 91 78 13 	lds	r18, 0x1378	; 0x801378 <__brkval>
    59c8:	30 91 79 13 	lds	r19, 0x1379	; 0x801379 <__brkval+0x1>
    59cc:	28 17       	cp	r18, r24
    59ce:	39 07       	cpc	r19, r25
    59d0:	51 f5       	brne	.+84     	; 0x5a26 <free+0x88>
    59d2:	f0 93 79 13 	sts	0x1379, r31	; 0x801379 <__brkval+0x1>
    59d6:	e0 93 78 13 	sts	0x1378, r30	; 0x801378 <__brkval>
    59da:	67 c0       	rjmp	.+206    	; 0x5aaa <free+0x10c>
    59dc:	ed 01       	movw	r28, r26
    59de:	20 e0       	ldi	r18, 0x00	; 0
    59e0:	30 e0       	ldi	r19, 0x00	; 0
    59e2:	ce 17       	cp	r28, r30
    59e4:	df 07       	cpc	r29, r31
    59e6:	40 f4       	brcc	.+16     	; 0x59f8 <free+0x5a>
    59e8:	4a 81       	ldd	r20, Y+2	; 0x02
    59ea:	5b 81       	ldd	r21, Y+3	; 0x03
    59ec:	9e 01       	movw	r18, r28
    59ee:	41 15       	cp	r20, r1
    59f0:	51 05       	cpc	r21, r1
    59f2:	f1 f0       	breq	.+60     	; 0x5a30 <free+0x92>
    59f4:	ea 01       	movw	r28, r20
    59f6:	f5 cf       	rjmp	.-22     	; 0x59e2 <free+0x44>
    59f8:	d3 83       	std	Z+3, r29	; 0x03
    59fa:	c2 83       	std	Z+2, r28	; 0x02
    59fc:	40 81       	ld	r20, Z
    59fe:	51 81       	ldd	r21, Z+1	; 0x01
    5a00:	84 0f       	add	r24, r20
    5a02:	95 1f       	adc	r25, r21
    5a04:	c8 17       	cp	r28, r24
    5a06:	d9 07       	cpc	r29, r25
    5a08:	59 f4       	brne	.+22     	; 0x5a20 <free+0x82>
    5a0a:	88 81       	ld	r24, Y
    5a0c:	99 81       	ldd	r25, Y+1	; 0x01
    5a0e:	84 0f       	add	r24, r20
    5a10:	95 1f       	adc	r25, r21
    5a12:	02 96       	adiw	r24, 0x02	; 2
    5a14:	91 83       	std	Z+1, r25	; 0x01
    5a16:	80 83       	st	Z, r24
    5a18:	8a 81       	ldd	r24, Y+2	; 0x02
    5a1a:	9b 81       	ldd	r25, Y+3	; 0x03
    5a1c:	93 83       	std	Z+3, r25	; 0x03
    5a1e:	82 83       	std	Z+2, r24	; 0x02
    5a20:	21 15       	cp	r18, r1
    5a22:	31 05       	cpc	r19, r1
    5a24:	29 f4       	brne	.+10     	; 0x5a30 <free+0x92>
    5a26:	f0 93 7b 13 	sts	0x137B, r31	; 0x80137b <__flp+0x1>
    5a2a:	e0 93 7a 13 	sts	0x137A, r30	; 0x80137a <__flp>
    5a2e:	3d c0       	rjmp	.+122    	; 0x5aaa <free+0x10c>
    5a30:	e9 01       	movw	r28, r18
    5a32:	fb 83       	std	Y+3, r31	; 0x03
    5a34:	ea 83       	std	Y+2, r30	; 0x02
    5a36:	49 91       	ld	r20, Y+
    5a38:	59 91       	ld	r21, Y+
    5a3a:	c4 0f       	add	r28, r20
    5a3c:	d5 1f       	adc	r29, r21
    5a3e:	ec 17       	cp	r30, r28
    5a40:	fd 07       	cpc	r31, r29
    5a42:	61 f4       	brne	.+24     	; 0x5a5c <free+0xbe>
    5a44:	80 81       	ld	r24, Z
    5a46:	91 81       	ldd	r25, Z+1	; 0x01
    5a48:	84 0f       	add	r24, r20
    5a4a:	95 1f       	adc	r25, r21
    5a4c:	02 96       	adiw	r24, 0x02	; 2
    5a4e:	e9 01       	movw	r28, r18
    5a50:	99 83       	std	Y+1, r25	; 0x01
    5a52:	88 83       	st	Y, r24
    5a54:	82 81       	ldd	r24, Z+2	; 0x02
    5a56:	93 81       	ldd	r25, Z+3	; 0x03
    5a58:	9b 83       	std	Y+3, r25	; 0x03
    5a5a:	8a 83       	std	Y+2, r24	; 0x02
    5a5c:	e0 e0       	ldi	r30, 0x00	; 0
    5a5e:	f0 e0       	ldi	r31, 0x00	; 0
    5a60:	12 96       	adiw	r26, 0x02	; 2
    5a62:	8d 91       	ld	r24, X+
    5a64:	9c 91       	ld	r25, X
    5a66:	13 97       	sbiw	r26, 0x03	; 3
    5a68:	00 97       	sbiw	r24, 0x00	; 0
    5a6a:	19 f0       	breq	.+6      	; 0x5a72 <free+0xd4>
    5a6c:	fd 01       	movw	r30, r26
    5a6e:	dc 01       	movw	r26, r24
    5a70:	f7 cf       	rjmp	.-18     	; 0x5a60 <free+0xc2>
    5a72:	8d 91       	ld	r24, X+
    5a74:	9c 91       	ld	r25, X
    5a76:	11 97       	sbiw	r26, 0x01	; 1
    5a78:	9d 01       	movw	r18, r26
    5a7a:	2e 5f       	subi	r18, 0xFE	; 254
    5a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    5a7e:	82 0f       	add	r24, r18
    5a80:	93 1f       	adc	r25, r19
    5a82:	20 91 78 13 	lds	r18, 0x1378	; 0x801378 <__brkval>
    5a86:	30 91 79 13 	lds	r19, 0x1379	; 0x801379 <__brkval+0x1>
    5a8a:	28 17       	cp	r18, r24
    5a8c:	39 07       	cpc	r19, r25
    5a8e:	69 f4       	brne	.+26     	; 0x5aaa <free+0x10c>
    5a90:	30 97       	sbiw	r30, 0x00	; 0
    5a92:	29 f4       	brne	.+10     	; 0x5a9e <free+0x100>
    5a94:	10 92 7b 13 	sts	0x137B, r1	; 0x80137b <__flp+0x1>
    5a98:	10 92 7a 13 	sts	0x137A, r1	; 0x80137a <__flp>
    5a9c:	02 c0       	rjmp	.+4      	; 0x5aa2 <free+0x104>
    5a9e:	13 82       	std	Z+3, r1	; 0x03
    5aa0:	12 82       	std	Z+2, r1	; 0x02
    5aa2:	b0 93 79 13 	sts	0x1379, r27	; 0x801379 <__brkval+0x1>
    5aa6:	a0 93 78 13 	sts	0x1378, r26	; 0x801378 <__brkval>
    5aaa:	df 91       	pop	r29
    5aac:	cf 91       	pop	r28
    5aae:	08 95       	ret

00005ab0 <abort>:
    5ab0:	81 e0       	ldi	r24, 0x01	; 1
    5ab2:	90 e0       	ldi	r25, 0x00	; 0
    5ab4:	f8 94       	cli
    5ab6:	58 c2       	rjmp	.+1200   	; 0x5f68 <_exit>

00005ab8 <__ftoa_engine>:
    5ab8:	28 30       	cpi	r18, 0x08	; 8
    5aba:	08 f0       	brcs	.+2      	; 0x5abe <__ftoa_engine+0x6>
    5abc:	27 e0       	ldi	r18, 0x07	; 7
    5abe:	33 27       	eor	r19, r19
    5ac0:	da 01       	movw	r26, r20
    5ac2:	99 0f       	add	r25, r25
    5ac4:	31 1d       	adc	r19, r1
    5ac6:	87 fd       	sbrc	r24, 7
    5ac8:	91 60       	ori	r25, 0x01	; 1
    5aca:	00 96       	adiw	r24, 0x00	; 0
    5acc:	61 05       	cpc	r22, r1
    5ace:	71 05       	cpc	r23, r1
    5ad0:	39 f4       	brne	.+14     	; 0x5ae0 <__ftoa_engine+0x28>
    5ad2:	32 60       	ori	r19, 0x02	; 2
    5ad4:	2e 5f       	subi	r18, 0xFE	; 254
    5ad6:	3d 93       	st	X+, r19
    5ad8:	30 e3       	ldi	r19, 0x30	; 48
    5ada:	2a 95       	dec	r18
    5adc:	e1 f7       	brne	.-8      	; 0x5ad6 <__ftoa_engine+0x1e>
    5ade:	08 95       	ret
    5ae0:	9f 3f       	cpi	r25, 0xFF	; 255
    5ae2:	30 f0       	brcs	.+12     	; 0x5af0 <__ftoa_engine+0x38>
    5ae4:	80 38       	cpi	r24, 0x80	; 128
    5ae6:	71 05       	cpc	r23, r1
    5ae8:	61 05       	cpc	r22, r1
    5aea:	09 f0       	breq	.+2      	; 0x5aee <__ftoa_engine+0x36>
    5aec:	3c 5f       	subi	r19, 0xFC	; 252
    5aee:	3c 5f       	subi	r19, 0xFC	; 252
    5af0:	3d 93       	st	X+, r19
    5af2:	91 30       	cpi	r25, 0x01	; 1
    5af4:	08 f0       	brcs	.+2      	; 0x5af8 <__ftoa_engine+0x40>
    5af6:	80 68       	ori	r24, 0x80	; 128
    5af8:	91 1d       	adc	r25, r1
    5afa:	df 93       	push	r29
    5afc:	cf 93       	push	r28
    5afe:	1f 93       	push	r17
    5b00:	0f 93       	push	r16
    5b02:	ff 92       	push	r15
    5b04:	ef 92       	push	r14
    5b06:	19 2f       	mov	r17, r25
    5b08:	98 7f       	andi	r25, 0xF8	; 248
    5b0a:	96 95       	lsr	r25
    5b0c:	e9 2f       	mov	r30, r25
    5b0e:	96 95       	lsr	r25
    5b10:	96 95       	lsr	r25
    5b12:	e9 0f       	add	r30, r25
    5b14:	ff 27       	eor	r31, r31
    5b16:	e4 50       	subi	r30, 0x04	; 4
    5b18:	fe 4f       	sbci	r31, 0xFE	; 254
    5b1a:	99 27       	eor	r25, r25
    5b1c:	33 27       	eor	r19, r19
    5b1e:	ee 24       	eor	r14, r14
    5b20:	ff 24       	eor	r15, r15
    5b22:	a7 01       	movw	r20, r14
    5b24:	e7 01       	movw	r28, r14
    5b26:	05 90       	lpm	r0, Z+
    5b28:	08 94       	sec
    5b2a:	07 94       	ror	r0
    5b2c:	28 f4       	brcc	.+10     	; 0x5b38 <__ftoa_engine+0x80>
    5b2e:	36 0f       	add	r19, r22
    5b30:	e7 1e       	adc	r14, r23
    5b32:	f8 1e       	adc	r15, r24
    5b34:	49 1f       	adc	r20, r25
    5b36:	51 1d       	adc	r21, r1
    5b38:	66 0f       	add	r22, r22
    5b3a:	77 1f       	adc	r23, r23
    5b3c:	88 1f       	adc	r24, r24
    5b3e:	99 1f       	adc	r25, r25
    5b40:	06 94       	lsr	r0
    5b42:	a1 f7       	brne	.-24     	; 0x5b2c <__ftoa_engine+0x74>
    5b44:	05 90       	lpm	r0, Z+
    5b46:	07 94       	ror	r0
    5b48:	28 f4       	brcc	.+10     	; 0x5b54 <__ftoa_engine+0x9c>
    5b4a:	e7 0e       	add	r14, r23
    5b4c:	f8 1e       	adc	r15, r24
    5b4e:	49 1f       	adc	r20, r25
    5b50:	56 1f       	adc	r21, r22
    5b52:	c1 1d       	adc	r28, r1
    5b54:	77 0f       	add	r23, r23
    5b56:	88 1f       	adc	r24, r24
    5b58:	99 1f       	adc	r25, r25
    5b5a:	66 1f       	adc	r22, r22
    5b5c:	06 94       	lsr	r0
    5b5e:	a1 f7       	brne	.-24     	; 0x5b48 <__ftoa_engine+0x90>
    5b60:	05 90       	lpm	r0, Z+
    5b62:	07 94       	ror	r0
    5b64:	28 f4       	brcc	.+10     	; 0x5b70 <__ftoa_engine+0xb8>
    5b66:	f8 0e       	add	r15, r24
    5b68:	49 1f       	adc	r20, r25
    5b6a:	56 1f       	adc	r21, r22
    5b6c:	c7 1f       	adc	r28, r23
    5b6e:	d1 1d       	adc	r29, r1
    5b70:	88 0f       	add	r24, r24
    5b72:	99 1f       	adc	r25, r25
    5b74:	66 1f       	adc	r22, r22
    5b76:	77 1f       	adc	r23, r23
    5b78:	06 94       	lsr	r0
    5b7a:	a1 f7       	brne	.-24     	; 0x5b64 <__ftoa_engine+0xac>
    5b7c:	05 90       	lpm	r0, Z+
    5b7e:	07 94       	ror	r0
    5b80:	20 f4       	brcc	.+8      	; 0x5b8a <__ftoa_engine+0xd2>
    5b82:	49 0f       	add	r20, r25
    5b84:	56 1f       	adc	r21, r22
    5b86:	c7 1f       	adc	r28, r23
    5b88:	d8 1f       	adc	r29, r24
    5b8a:	99 0f       	add	r25, r25
    5b8c:	66 1f       	adc	r22, r22
    5b8e:	77 1f       	adc	r23, r23
    5b90:	88 1f       	adc	r24, r24
    5b92:	06 94       	lsr	r0
    5b94:	a9 f7       	brne	.-22     	; 0x5b80 <__ftoa_engine+0xc8>
    5b96:	84 91       	lpm	r24, Z
    5b98:	10 95       	com	r17
    5b9a:	17 70       	andi	r17, 0x07	; 7
    5b9c:	41 f0       	breq	.+16     	; 0x5bae <__ftoa_engine+0xf6>
    5b9e:	d6 95       	lsr	r29
    5ba0:	c7 95       	ror	r28
    5ba2:	57 95       	ror	r21
    5ba4:	47 95       	ror	r20
    5ba6:	f7 94       	ror	r15
    5ba8:	e7 94       	ror	r14
    5baa:	1a 95       	dec	r17
    5bac:	c1 f7       	brne	.-16     	; 0x5b9e <__ftoa_engine+0xe6>
    5bae:	e2 ea       	ldi	r30, 0xA2	; 162
    5bb0:	f1 e0       	ldi	r31, 0x01	; 1
    5bb2:	68 94       	set
    5bb4:	15 90       	lpm	r1, Z+
    5bb6:	15 91       	lpm	r17, Z+
    5bb8:	35 91       	lpm	r19, Z+
    5bba:	65 91       	lpm	r22, Z+
    5bbc:	95 91       	lpm	r25, Z+
    5bbe:	05 90       	lpm	r0, Z+
    5bc0:	7f e2       	ldi	r23, 0x2F	; 47
    5bc2:	73 95       	inc	r23
    5bc4:	e1 18       	sub	r14, r1
    5bc6:	f1 0a       	sbc	r15, r17
    5bc8:	43 0b       	sbc	r20, r19
    5bca:	56 0b       	sbc	r21, r22
    5bcc:	c9 0b       	sbc	r28, r25
    5bce:	d0 09       	sbc	r29, r0
    5bd0:	c0 f7       	brcc	.-16     	; 0x5bc2 <__ftoa_engine+0x10a>
    5bd2:	e1 0c       	add	r14, r1
    5bd4:	f1 1e       	adc	r15, r17
    5bd6:	43 1f       	adc	r20, r19
    5bd8:	56 1f       	adc	r21, r22
    5bda:	c9 1f       	adc	r28, r25
    5bdc:	d0 1d       	adc	r29, r0
    5bde:	7e f4       	brtc	.+30     	; 0x5bfe <__ftoa_engine+0x146>
    5be0:	70 33       	cpi	r23, 0x30	; 48
    5be2:	11 f4       	brne	.+4      	; 0x5be8 <__ftoa_engine+0x130>
    5be4:	8a 95       	dec	r24
    5be6:	e6 cf       	rjmp	.-52     	; 0x5bb4 <__ftoa_engine+0xfc>
    5be8:	e8 94       	clt
    5bea:	01 50       	subi	r16, 0x01	; 1
    5bec:	30 f0       	brcs	.+12     	; 0x5bfa <__ftoa_engine+0x142>
    5bee:	08 0f       	add	r16, r24
    5bf0:	0a f4       	brpl	.+2      	; 0x5bf4 <__ftoa_engine+0x13c>
    5bf2:	00 27       	eor	r16, r16
    5bf4:	02 17       	cp	r16, r18
    5bf6:	08 f4       	brcc	.+2      	; 0x5bfa <__ftoa_engine+0x142>
    5bf8:	20 2f       	mov	r18, r16
    5bfa:	23 95       	inc	r18
    5bfc:	02 2f       	mov	r16, r18
    5bfe:	7a 33       	cpi	r23, 0x3A	; 58
    5c00:	28 f0       	brcs	.+10     	; 0x5c0c <__ftoa_engine+0x154>
    5c02:	79 e3       	ldi	r23, 0x39	; 57
    5c04:	7d 93       	st	X+, r23
    5c06:	2a 95       	dec	r18
    5c08:	e9 f7       	brne	.-6      	; 0x5c04 <__ftoa_engine+0x14c>
    5c0a:	10 c0       	rjmp	.+32     	; 0x5c2c <__ftoa_engine+0x174>
    5c0c:	7d 93       	st	X+, r23
    5c0e:	2a 95       	dec	r18
    5c10:	89 f6       	brne	.-94     	; 0x5bb4 <__ftoa_engine+0xfc>
    5c12:	06 94       	lsr	r0
    5c14:	97 95       	ror	r25
    5c16:	67 95       	ror	r22
    5c18:	37 95       	ror	r19
    5c1a:	17 95       	ror	r17
    5c1c:	17 94       	ror	r1
    5c1e:	e1 18       	sub	r14, r1
    5c20:	f1 0a       	sbc	r15, r17
    5c22:	43 0b       	sbc	r20, r19
    5c24:	56 0b       	sbc	r21, r22
    5c26:	c9 0b       	sbc	r28, r25
    5c28:	d0 09       	sbc	r29, r0
    5c2a:	98 f0       	brcs	.+38     	; 0x5c52 <__ftoa_engine+0x19a>
    5c2c:	23 95       	inc	r18
    5c2e:	7e 91       	ld	r23, -X
    5c30:	73 95       	inc	r23
    5c32:	7a 33       	cpi	r23, 0x3A	; 58
    5c34:	08 f0       	brcs	.+2      	; 0x5c38 <__ftoa_engine+0x180>
    5c36:	70 e3       	ldi	r23, 0x30	; 48
    5c38:	7c 93       	st	X, r23
    5c3a:	20 13       	cpse	r18, r16
    5c3c:	b8 f7       	brcc	.-18     	; 0x5c2c <__ftoa_engine+0x174>
    5c3e:	7e 91       	ld	r23, -X
    5c40:	70 61       	ori	r23, 0x10	; 16
    5c42:	7d 93       	st	X+, r23
    5c44:	30 f0       	brcs	.+12     	; 0x5c52 <__ftoa_engine+0x19a>
    5c46:	83 95       	inc	r24
    5c48:	71 e3       	ldi	r23, 0x31	; 49
    5c4a:	7d 93       	st	X+, r23
    5c4c:	70 e3       	ldi	r23, 0x30	; 48
    5c4e:	2a 95       	dec	r18
    5c50:	e1 f7       	brne	.-8      	; 0x5c4a <__ftoa_engine+0x192>
    5c52:	11 24       	eor	r1, r1
    5c54:	ef 90       	pop	r14
    5c56:	ff 90       	pop	r15
    5c58:	0f 91       	pop	r16
    5c5a:	1f 91       	pop	r17
    5c5c:	cf 91       	pop	r28
    5c5e:	df 91       	pop	r29
    5c60:	99 27       	eor	r25, r25
    5c62:	87 fd       	sbrc	r24, 7
    5c64:	90 95       	com	r25
    5c66:	08 95       	ret

00005c68 <strnlen_P>:
    5c68:	fc 01       	movw	r30, r24
    5c6a:	05 90       	lpm	r0, Z+
    5c6c:	61 50       	subi	r22, 0x01	; 1
    5c6e:	70 40       	sbci	r23, 0x00	; 0
    5c70:	01 10       	cpse	r0, r1
    5c72:	d8 f7       	brcc	.-10     	; 0x5c6a <strnlen_P+0x2>
    5c74:	80 95       	com	r24
    5c76:	90 95       	com	r25
    5c78:	8e 0f       	add	r24, r30
    5c7a:	9f 1f       	adc	r25, r31
    5c7c:	08 95       	ret

00005c7e <memcpy>:
    5c7e:	fb 01       	movw	r30, r22
    5c80:	dc 01       	movw	r26, r24
    5c82:	02 c0       	rjmp	.+4      	; 0x5c88 <memcpy+0xa>
    5c84:	01 90       	ld	r0, Z+
    5c86:	0d 92       	st	X+, r0
    5c88:	41 50       	subi	r20, 0x01	; 1
    5c8a:	50 40       	sbci	r21, 0x00	; 0
    5c8c:	d8 f7       	brcc	.-10     	; 0x5c84 <memcpy+0x6>
    5c8e:	08 95       	ret

00005c90 <memset>:
    5c90:	dc 01       	movw	r26, r24
    5c92:	01 c0       	rjmp	.+2      	; 0x5c96 <memset+0x6>
    5c94:	6d 93       	st	X+, r22
    5c96:	41 50       	subi	r20, 0x01	; 1
    5c98:	50 40       	sbci	r21, 0x00	; 0
    5c9a:	e0 f7       	brcc	.-8      	; 0x5c94 <memset+0x4>
    5c9c:	08 95       	ret

00005c9e <strcasestr>:
    5c9e:	fb 01       	movw	r30, r22
    5ca0:	51 91       	ld	r21, Z+
    5ca2:	55 23       	and	r21, r21
    5ca4:	b1 f0       	breq	.+44     	; 0x5cd2 <strcasestr+0x34>
    5ca6:	bf 01       	movw	r22, r30
    5ca8:	dc 01       	movw	r26, r24
    5caa:	05 2e       	mov	r0, r21
    5cac:	4d 91       	ld	r20, X+
    5cae:	44 23       	and	r20, r20
    5cb0:	69 f0       	breq	.+26     	; 0x5ccc <strcasestr+0x2e>
    5cb2:	10 d0       	rcall	.+32     	; 0x5cd4 <strcasestr+0x36>
    5cb4:	d9 f7       	brne	.-10     	; 0x5cac <strcasestr+0xe>
    5cb6:	cd 01       	movw	r24, r26
    5cb8:	01 90       	ld	r0, Z+
    5cba:	00 20       	and	r0, r0
    5cbc:	49 f0       	breq	.+18     	; 0x5cd0 <strcasestr+0x32>
    5cbe:	4d 91       	ld	r20, X+
    5cc0:	41 11       	cpse	r20, r1
    5cc2:	08 d0       	rcall	.+16     	; 0x5cd4 <strcasestr+0x36>
    5cc4:	c9 f3       	breq	.-14     	; 0x5cb8 <strcasestr+0x1a>
    5cc6:	fb 01       	movw	r30, r22
    5cc8:	41 11       	cpse	r20, r1
    5cca:	ee cf       	rjmp	.-36     	; 0x5ca8 <strcasestr+0xa>
    5ccc:	81 e0       	ldi	r24, 0x01	; 1
    5cce:	90 e0       	ldi	r25, 0x00	; 0
    5cd0:	01 97       	sbiw	r24, 0x01	; 1
    5cd2:	08 95       	ret
    5cd4:	40 25       	eor	r20, r0
    5cd6:	39 f0       	breq	.+14     	; 0x5ce6 <strcasestr+0x48>
    5cd8:	40 32       	cpi	r20, 0x20	; 32
    5cda:	29 f4       	brne	.+10     	; 0x5ce6 <strcasestr+0x48>
    5cdc:	40 29       	or	r20, r0
    5cde:	4b 57       	subi	r20, 0x7B	; 123
    5ce0:	46 5e       	subi	r20, 0xE6	; 230
    5ce2:	08 f0       	brcs	.+2      	; 0x5ce6 <strcasestr+0x48>
    5ce4:	18 94       	sez
    5ce6:	08 95       	ret

00005ce8 <strcat>:
    5ce8:	fb 01       	movw	r30, r22
    5cea:	dc 01       	movw	r26, r24
    5cec:	0d 90       	ld	r0, X+
    5cee:	00 20       	and	r0, r0
    5cf0:	e9 f7       	brne	.-6      	; 0x5cec <strcat+0x4>
    5cf2:	11 97       	sbiw	r26, 0x01	; 1
    5cf4:	01 90       	ld	r0, Z+
    5cf6:	0d 92       	st	X+, r0
    5cf8:	00 20       	and	r0, r0
    5cfa:	e1 f7       	brne	.-8      	; 0x5cf4 <strcat+0xc>
    5cfc:	08 95       	ret

00005cfe <strcpy>:
    5cfe:	fb 01       	movw	r30, r22
    5d00:	dc 01       	movw	r26, r24
    5d02:	01 90       	ld	r0, Z+
    5d04:	0d 92       	st	X+, r0
    5d06:	00 20       	and	r0, r0
    5d08:	e1 f7       	brne	.-8      	; 0x5d02 <strcpy+0x4>
    5d0a:	08 95       	ret

00005d0c <strncasecmp>:
    5d0c:	fb 01       	movw	r30, r22
    5d0e:	dc 01       	movw	r26, r24
    5d10:	41 50       	subi	r20, 0x01	; 1
    5d12:	50 40       	sbci	r21, 0x00	; 0
    5d14:	88 f0       	brcs	.+34     	; 0x5d38 <strncasecmp+0x2c>
    5d16:	8d 91       	ld	r24, X+
    5d18:	81 34       	cpi	r24, 0x41	; 65
    5d1a:	1c f0       	brlt	.+6      	; 0x5d22 <strncasecmp+0x16>
    5d1c:	8b 35       	cpi	r24, 0x5B	; 91
    5d1e:	0c f4       	brge	.+2      	; 0x5d22 <strncasecmp+0x16>
    5d20:	80 5e       	subi	r24, 0xE0	; 224
    5d22:	61 91       	ld	r22, Z+
    5d24:	61 34       	cpi	r22, 0x41	; 65
    5d26:	1c f0       	brlt	.+6      	; 0x5d2e <strncasecmp+0x22>
    5d28:	6b 35       	cpi	r22, 0x5B	; 91
    5d2a:	0c f4       	brge	.+2      	; 0x5d2e <strncasecmp+0x22>
    5d2c:	60 5e       	subi	r22, 0xE0	; 224
    5d2e:	86 1b       	sub	r24, r22
    5d30:	61 11       	cpse	r22, r1
    5d32:	71 f3       	breq	.-36     	; 0x5d10 <strncasecmp+0x4>
    5d34:	99 0b       	sbc	r25, r25
    5d36:	08 95       	ret
    5d38:	88 1b       	sub	r24, r24
    5d3a:	fc cf       	rjmp	.-8      	; 0x5d34 <strncasecmp+0x28>

00005d3c <strnlen>:
    5d3c:	fc 01       	movw	r30, r24
    5d3e:	61 50       	subi	r22, 0x01	; 1
    5d40:	70 40       	sbci	r23, 0x00	; 0
    5d42:	01 90       	ld	r0, Z+
    5d44:	01 10       	cpse	r0, r1
    5d46:	d8 f7       	brcc	.-10     	; 0x5d3e <strnlen+0x2>
    5d48:	80 95       	com	r24
    5d4a:	90 95       	com	r25
    5d4c:	8e 0f       	add	r24, r30
    5d4e:	9f 1f       	adc	r25, r31
    5d50:	08 95       	ret

00005d52 <fputc>:
    5d52:	0f 93       	push	r16
    5d54:	1f 93       	push	r17
    5d56:	cf 93       	push	r28
    5d58:	df 93       	push	r29
    5d5a:	fb 01       	movw	r30, r22
    5d5c:	23 81       	ldd	r18, Z+3	; 0x03
    5d5e:	21 fd       	sbrc	r18, 1
    5d60:	03 c0       	rjmp	.+6      	; 0x5d68 <fputc+0x16>
    5d62:	8f ef       	ldi	r24, 0xFF	; 255
    5d64:	9f ef       	ldi	r25, 0xFF	; 255
    5d66:	2c c0       	rjmp	.+88     	; 0x5dc0 <fputc+0x6e>
    5d68:	22 ff       	sbrs	r18, 2
    5d6a:	16 c0       	rjmp	.+44     	; 0x5d98 <fputc+0x46>
    5d6c:	46 81       	ldd	r20, Z+6	; 0x06
    5d6e:	57 81       	ldd	r21, Z+7	; 0x07
    5d70:	24 81       	ldd	r18, Z+4	; 0x04
    5d72:	35 81       	ldd	r19, Z+5	; 0x05
    5d74:	42 17       	cp	r20, r18
    5d76:	53 07       	cpc	r21, r19
    5d78:	44 f4       	brge	.+16     	; 0x5d8a <fputc+0x38>
    5d7a:	a0 81       	ld	r26, Z
    5d7c:	b1 81       	ldd	r27, Z+1	; 0x01
    5d7e:	9d 01       	movw	r18, r26
    5d80:	2f 5f       	subi	r18, 0xFF	; 255
    5d82:	3f 4f       	sbci	r19, 0xFF	; 255
    5d84:	31 83       	std	Z+1, r19	; 0x01
    5d86:	20 83       	st	Z, r18
    5d88:	8c 93       	st	X, r24
    5d8a:	26 81       	ldd	r18, Z+6	; 0x06
    5d8c:	37 81       	ldd	r19, Z+7	; 0x07
    5d8e:	2f 5f       	subi	r18, 0xFF	; 255
    5d90:	3f 4f       	sbci	r19, 0xFF	; 255
    5d92:	37 83       	std	Z+7, r19	; 0x07
    5d94:	26 83       	std	Z+6, r18	; 0x06
    5d96:	14 c0       	rjmp	.+40     	; 0x5dc0 <fputc+0x6e>
    5d98:	8b 01       	movw	r16, r22
    5d9a:	ec 01       	movw	r28, r24
    5d9c:	fb 01       	movw	r30, r22
    5d9e:	00 84       	ldd	r0, Z+8	; 0x08
    5da0:	f1 85       	ldd	r31, Z+9	; 0x09
    5da2:	e0 2d       	mov	r30, r0
    5da4:	19 95       	eicall
    5da6:	89 2b       	or	r24, r25
    5da8:	e1 f6       	brne	.-72     	; 0x5d62 <fputc+0x10>
    5daa:	d8 01       	movw	r26, r16
    5dac:	16 96       	adiw	r26, 0x06	; 6
    5dae:	8d 91       	ld	r24, X+
    5db0:	9c 91       	ld	r25, X
    5db2:	17 97       	sbiw	r26, 0x07	; 7
    5db4:	01 96       	adiw	r24, 0x01	; 1
    5db6:	17 96       	adiw	r26, 0x07	; 7
    5db8:	9c 93       	st	X, r25
    5dba:	8e 93       	st	-X, r24
    5dbc:	16 97       	sbiw	r26, 0x06	; 6
    5dbe:	ce 01       	movw	r24, r28
    5dc0:	df 91       	pop	r29
    5dc2:	cf 91       	pop	r28
    5dc4:	1f 91       	pop	r17
    5dc6:	0f 91       	pop	r16
    5dc8:	08 95       	ret

00005dca <printf>:
    5dca:	cf 93       	push	r28
    5dcc:	df 93       	push	r29
    5dce:	cd b7       	in	r28, 0x3d	; 61
    5dd0:	de b7       	in	r29, 0x3e	; 62
    5dd2:	ae 01       	movw	r20, r28
    5dd4:	4a 5f       	subi	r20, 0xFA	; 250
    5dd6:	5f 4f       	sbci	r21, 0xFF	; 255
    5dd8:	fa 01       	movw	r30, r20
    5dda:	61 91       	ld	r22, Z+
    5ddc:	71 91       	ld	r23, Z+
    5dde:	af 01       	movw	r20, r30
    5de0:	80 91 7e 13 	lds	r24, 0x137E	; 0x80137e <__iob+0x2>
    5de4:	90 91 7f 13 	lds	r25, 0x137F	; 0x80137f <__iob+0x3>
    5de8:	75 d9       	rcall	.-3350   	; 0x50d4 <vfprintf>
    5dea:	df 91       	pop	r29
    5dec:	cf 91       	pop	r28
    5dee:	08 95       	ret

00005df0 <puts>:
    5df0:	0f 93       	push	r16
    5df2:	1f 93       	push	r17
    5df4:	cf 93       	push	r28
    5df6:	df 93       	push	r29
    5df8:	e0 91 7e 13 	lds	r30, 0x137E	; 0x80137e <__iob+0x2>
    5dfc:	f0 91 7f 13 	lds	r31, 0x137F	; 0x80137f <__iob+0x3>
    5e00:	23 81       	ldd	r18, Z+3	; 0x03
    5e02:	21 ff       	sbrs	r18, 1
    5e04:	1b c0       	rjmp	.+54     	; 0x5e3c <puts+0x4c>
    5e06:	8c 01       	movw	r16, r24
    5e08:	d0 e0       	ldi	r29, 0x00	; 0
    5e0a:	c0 e0       	ldi	r28, 0x00	; 0
    5e0c:	f8 01       	movw	r30, r16
    5e0e:	81 91       	ld	r24, Z+
    5e10:	8f 01       	movw	r16, r30
    5e12:	60 91 7e 13 	lds	r22, 0x137E	; 0x80137e <__iob+0x2>
    5e16:	70 91 7f 13 	lds	r23, 0x137F	; 0x80137f <__iob+0x3>
    5e1a:	db 01       	movw	r26, r22
    5e1c:	18 96       	adiw	r26, 0x08	; 8
    5e1e:	ed 91       	ld	r30, X+
    5e20:	fc 91       	ld	r31, X
    5e22:	19 97       	sbiw	r26, 0x09	; 9
    5e24:	88 23       	and	r24, r24
    5e26:	31 f0       	breq	.+12     	; 0x5e34 <puts+0x44>
    5e28:	19 95       	eicall
    5e2a:	89 2b       	or	r24, r25
    5e2c:	79 f3       	breq	.-34     	; 0x5e0c <puts+0x1c>
    5e2e:	df ef       	ldi	r29, 0xFF	; 255
    5e30:	cf ef       	ldi	r28, 0xFF	; 255
    5e32:	ec cf       	rjmp	.-40     	; 0x5e0c <puts+0x1c>
    5e34:	8a e0       	ldi	r24, 0x0A	; 10
    5e36:	19 95       	eicall
    5e38:	89 2b       	or	r24, r25
    5e3a:	19 f0       	breq	.+6      	; 0x5e42 <puts+0x52>
    5e3c:	8f ef       	ldi	r24, 0xFF	; 255
    5e3e:	9f ef       	ldi	r25, 0xFF	; 255
    5e40:	02 c0       	rjmp	.+4      	; 0x5e46 <puts+0x56>
    5e42:	8d 2f       	mov	r24, r29
    5e44:	9c 2f       	mov	r25, r28
    5e46:	df 91       	pop	r29
    5e48:	cf 91       	pop	r28
    5e4a:	1f 91       	pop	r17
    5e4c:	0f 91       	pop	r16
    5e4e:	08 95       	ret

00005e50 <sprintf>:
    5e50:	0f 93       	push	r16
    5e52:	1f 93       	push	r17
    5e54:	cf 93       	push	r28
    5e56:	df 93       	push	r29
    5e58:	cd b7       	in	r28, 0x3d	; 61
    5e5a:	de b7       	in	r29, 0x3e	; 62
    5e5c:	2e 97       	sbiw	r28, 0x0e	; 14
    5e5e:	0f b6       	in	r0, 0x3f	; 63
    5e60:	f8 94       	cli
    5e62:	de bf       	out	0x3e, r29	; 62
    5e64:	0f be       	out	0x3f, r0	; 63
    5e66:	cd bf       	out	0x3d, r28	; 61
    5e68:	0e 89       	ldd	r16, Y+22	; 0x16
    5e6a:	1f 89       	ldd	r17, Y+23	; 0x17
    5e6c:	86 e0       	ldi	r24, 0x06	; 6
    5e6e:	8c 83       	std	Y+4, r24	; 0x04
    5e70:	1a 83       	std	Y+2, r17	; 0x02
    5e72:	09 83       	std	Y+1, r16	; 0x01
    5e74:	8f ef       	ldi	r24, 0xFF	; 255
    5e76:	9f e7       	ldi	r25, 0x7F	; 127
    5e78:	9e 83       	std	Y+6, r25	; 0x06
    5e7a:	8d 83       	std	Y+5, r24	; 0x05
    5e7c:	ae 01       	movw	r20, r28
    5e7e:	46 5e       	subi	r20, 0xE6	; 230
    5e80:	5f 4f       	sbci	r21, 0xFF	; 255
    5e82:	68 8d       	ldd	r22, Y+24	; 0x18
    5e84:	79 8d       	ldd	r23, Y+25	; 0x19
    5e86:	ce 01       	movw	r24, r28
    5e88:	01 96       	adiw	r24, 0x01	; 1
    5e8a:	24 d9       	rcall	.-3512   	; 0x50d4 <vfprintf>
    5e8c:	ef 81       	ldd	r30, Y+7	; 0x07
    5e8e:	f8 85       	ldd	r31, Y+8	; 0x08
    5e90:	e0 0f       	add	r30, r16
    5e92:	f1 1f       	adc	r31, r17
    5e94:	10 82       	st	Z, r1
    5e96:	2e 96       	adiw	r28, 0x0e	; 14
    5e98:	0f b6       	in	r0, 0x3f	; 63
    5e9a:	f8 94       	cli
    5e9c:	de bf       	out	0x3e, r29	; 62
    5e9e:	0f be       	out	0x3f, r0	; 63
    5ea0:	cd bf       	out	0x3d, r28	; 61
    5ea2:	df 91       	pop	r29
    5ea4:	cf 91       	pop	r28
    5ea6:	1f 91       	pop	r17
    5ea8:	0f 91       	pop	r16
    5eaa:	08 95       	ret

00005eac <__ultoa_invert>:
    5eac:	fa 01       	movw	r30, r20
    5eae:	aa 27       	eor	r26, r26
    5eb0:	28 30       	cpi	r18, 0x08	; 8
    5eb2:	51 f1       	breq	.+84     	; 0x5f08 <__ultoa_invert+0x5c>
    5eb4:	20 31       	cpi	r18, 0x10	; 16
    5eb6:	81 f1       	breq	.+96     	; 0x5f18 <__ultoa_invert+0x6c>
    5eb8:	e8 94       	clt
    5eba:	6f 93       	push	r22
    5ebc:	6e 7f       	andi	r22, 0xFE	; 254
    5ebe:	6e 5f       	subi	r22, 0xFE	; 254
    5ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    5ec2:	8f 4f       	sbci	r24, 0xFF	; 255
    5ec4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ec6:	af 4f       	sbci	r26, 0xFF	; 255
    5ec8:	b1 e0       	ldi	r27, 0x01	; 1
    5eca:	3e d0       	rcall	.+124    	; 0x5f48 <__ultoa_invert+0x9c>
    5ecc:	b4 e0       	ldi	r27, 0x04	; 4
    5ece:	3c d0       	rcall	.+120    	; 0x5f48 <__ultoa_invert+0x9c>
    5ed0:	67 0f       	add	r22, r23
    5ed2:	78 1f       	adc	r23, r24
    5ed4:	89 1f       	adc	r24, r25
    5ed6:	9a 1f       	adc	r25, r26
    5ed8:	a1 1d       	adc	r26, r1
    5eda:	68 0f       	add	r22, r24
    5edc:	79 1f       	adc	r23, r25
    5ede:	8a 1f       	adc	r24, r26
    5ee0:	91 1d       	adc	r25, r1
    5ee2:	a1 1d       	adc	r26, r1
    5ee4:	6a 0f       	add	r22, r26
    5ee6:	71 1d       	adc	r23, r1
    5ee8:	81 1d       	adc	r24, r1
    5eea:	91 1d       	adc	r25, r1
    5eec:	a1 1d       	adc	r26, r1
    5eee:	20 d0       	rcall	.+64     	; 0x5f30 <__ultoa_invert+0x84>
    5ef0:	09 f4       	brne	.+2      	; 0x5ef4 <__ultoa_invert+0x48>
    5ef2:	68 94       	set
    5ef4:	3f 91       	pop	r19
    5ef6:	2a e0       	ldi	r18, 0x0A	; 10
    5ef8:	26 9f       	mul	r18, r22
    5efa:	11 24       	eor	r1, r1
    5efc:	30 19       	sub	r19, r0
    5efe:	30 5d       	subi	r19, 0xD0	; 208
    5f00:	31 93       	st	Z+, r19
    5f02:	de f6       	brtc	.-74     	; 0x5eba <__ultoa_invert+0xe>
    5f04:	cf 01       	movw	r24, r30
    5f06:	08 95       	ret
    5f08:	46 2f       	mov	r20, r22
    5f0a:	47 70       	andi	r20, 0x07	; 7
    5f0c:	40 5d       	subi	r20, 0xD0	; 208
    5f0e:	41 93       	st	Z+, r20
    5f10:	b3 e0       	ldi	r27, 0x03	; 3
    5f12:	0f d0       	rcall	.+30     	; 0x5f32 <__ultoa_invert+0x86>
    5f14:	c9 f7       	brne	.-14     	; 0x5f08 <__ultoa_invert+0x5c>
    5f16:	f6 cf       	rjmp	.-20     	; 0x5f04 <__ultoa_invert+0x58>
    5f18:	46 2f       	mov	r20, r22
    5f1a:	4f 70       	andi	r20, 0x0F	; 15
    5f1c:	40 5d       	subi	r20, 0xD0	; 208
    5f1e:	4a 33       	cpi	r20, 0x3A	; 58
    5f20:	18 f0       	brcs	.+6      	; 0x5f28 <__ultoa_invert+0x7c>
    5f22:	49 5d       	subi	r20, 0xD9	; 217
    5f24:	31 fd       	sbrc	r19, 1
    5f26:	40 52       	subi	r20, 0x20	; 32
    5f28:	41 93       	st	Z+, r20
    5f2a:	02 d0       	rcall	.+4      	; 0x5f30 <__ultoa_invert+0x84>
    5f2c:	a9 f7       	brne	.-22     	; 0x5f18 <__ultoa_invert+0x6c>
    5f2e:	ea cf       	rjmp	.-44     	; 0x5f04 <__ultoa_invert+0x58>
    5f30:	b4 e0       	ldi	r27, 0x04	; 4
    5f32:	a6 95       	lsr	r26
    5f34:	97 95       	ror	r25
    5f36:	87 95       	ror	r24
    5f38:	77 95       	ror	r23
    5f3a:	67 95       	ror	r22
    5f3c:	ba 95       	dec	r27
    5f3e:	c9 f7       	brne	.-14     	; 0x5f32 <__ultoa_invert+0x86>
    5f40:	00 97       	sbiw	r24, 0x00	; 0
    5f42:	61 05       	cpc	r22, r1
    5f44:	71 05       	cpc	r23, r1
    5f46:	08 95       	ret
    5f48:	9b 01       	movw	r18, r22
    5f4a:	ac 01       	movw	r20, r24
    5f4c:	0a 2e       	mov	r0, r26
    5f4e:	06 94       	lsr	r0
    5f50:	57 95       	ror	r21
    5f52:	47 95       	ror	r20
    5f54:	37 95       	ror	r19
    5f56:	27 95       	ror	r18
    5f58:	ba 95       	dec	r27
    5f5a:	c9 f7       	brne	.-14     	; 0x5f4e <__ultoa_invert+0xa2>
    5f5c:	62 0f       	add	r22, r18
    5f5e:	73 1f       	adc	r23, r19
    5f60:	84 1f       	adc	r24, r20
    5f62:	95 1f       	adc	r25, r21
    5f64:	a0 1d       	adc	r26, r0
    5f66:	08 95       	ret

00005f68 <_exit>:
    5f68:	f8 94       	cli

00005f6a <__stop_program>:
    5f6a:	ff cf       	rjmp	.-2      	; 0x5f6a <__stop_program>

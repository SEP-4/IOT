
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000688  00800200  00006e9a  00006f2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006e9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f73  00800888  00800888  000075b6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000075b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007614  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000bb8  00000000  00000000  00007654  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e218  00000000  00000000  0000820c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a65  00000000  00000000  00016424  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000070aa  00000000  00000000  00019e89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000293c  00000000  00000000  00020f34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000045ba  00000000  00000000  00023870  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c938  00000000  00000000  00027e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ac8  00000000  00000000  00034762  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	84 c7       	rjmp	.+3848   	; 0xf3a <__vector_12>
      32:	00 00       	nop
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 e9 27 	jmp	0x4fd2	; 0x4fd2 <__vector_25>
      68:	0c 94 3b 28 	jmp	0x5076	; 0x5076 <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 7f 28 	jmp	0x50fe	; 0x50fe <__vector_36>
      94:	0c 94 d1 28 	jmp	0x51a2	; 0x51a2 <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 1d 2d 	jmp	0x5a3a	; 0x5a3a <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 15 29 	jmp	0x522a	; 0x522a <__vector_51>
      d0:	0c 94 67 29 	jmp	0x52ce	; 0x52ce <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 ab 29 	jmp	0x5356	; 0x5356 <__vector_54>
      dc:	0c 94 fd 29 	jmp	0x53fa	; 0x53fa <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	77 1d       	adc	r23, r7
      e6:	77 1d       	adc	r23, r7
      e8:	77 1d       	adc	r23, r7
      ea:	ae 1d       	adc	r26, r14
      ec:	b6 1d       	adc	r27, r6
      ee:	cb 1d       	adc	r28, r11
      f0:	77 1d       	adc	r23, r7
      f2:	77 1d       	adc	r23, r7
      f4:	ae 1d       	adc	r26, r14
      f6:	b6 1d       	adc	r27, r6
      f8:	3f 2d       	mov	r19, r15
      fa:	af 2d       	mov	r26, r15
      fc:	af 2d       	mov	r26, r15
      fe:	af 2d       	mov	r26, r15
     100:	af 2d       	mov	r26, r15
     102:	af 2d       	mov	r26, r15
     104:	af 2d       	mov	r26, r15
     106:	af 2d       	mov	r26, r15
     108:	3f 2d       	mov	r19, r15
     10a:	af 2d       	mov	r26, r15
     10c:	af 2d       	mov	r26, r15
     10e:	af 2d       	mov	r26, r15
     110:	af 2d       	mov	r26, r15
     112:	af 2d       	mov	r26, r15
     114:	af 2d       	mov	r26, r15
     116:	af 2d       	mov	r26, r15
     118:	41 2d       	mov	r20, r1
     11a:	af 2d       	mov	r26, r15
     11c:	af 2d       	mov	r26, r15
     11e:	af 2d       	mov	r26, r15
     120:	af 2d       	mov	r26, r15
     122:	af 2d       	mov	r26, r15
     124:	af 2d       	mov	r26, r15
     126:	af 2d       	mov	r26, r15
     128:	af 2d       	mov	r26, r15
     12a:	af 2d       	mov	r26, r15
     12c:	af 2d       	mov	r26, r15
     12e:	af 2d       	mov	r26, r15
     130:	af 2d       	mov	r26, r15
     132:	af 2d       	mov	r26, r15
     134:	af 2d       	mov	r26, r15
     136:	af 2d       	mov	r26, r15
     138:	41 2d       	mov	r20, r1
     13a:	af 2d       	mov	r26, r15
     13c:	af 2d       	mov	r26, r15
     13e:	af 2d       	mov	r26, r15
     140:	af 2d       	mov	r26, r15
     142:	af 2d       	mov	r26, r15
     144:	af 2d       	mov	r26, r15
     146:	af 2d       	mov	r26, r15
     148:	af 2d       	mov	r26, r15
     14a:	af 2d       	mov	r26, r15
     14c:	af 2d       	mov	r26, r15
     14e:	af 2d       	mov	r26, r15
     150:	af 2d       	mov	r26, r15
     152:	af 2d       	mov	r26, r15
     154:	af 2d       	mov	r26, r15
     156:	af 2d       	mov	r26, r15
     158:	ab 2d       	mov	r26, r11
     15a:	af 2d       	mov	r26, r15
     15c:	af 2d       	mov	r26, r15
     15e:	af 2d       	mov	r26, r15
     160:	af 2d       	mov	r26, r15
     162:	af 2d       	mov	r26, r15
     164:	af 2d       	mov	r26, r15
     166:	af 2d       	mov	r26, r15
     168:	76 2d       	mov	r23, r6
     16a:	af 2d       	mov	r26, r15
     16c:	af 2d       	mov	r26, r15
     16e:	af 2d       	mov	r26, r15
     170:	af 2d       	mov	r26, r15
     172:	af 2d       	mov	r26, r15
     174:	af 2d       	mov	r26, r15
     176:	af 2d       	mov	r26, r15
     178:	af 2d       	mov	r26, r15
     17a:	af 2d       	mov	r26, r15
     17c:	af 2d       	mov	r26, r15
     17e:	af 2d       	mov	r26, r15
     180:	af 2d       	mov	r26, r15
     182:	af 2d       	mov	r26, r15
     184:	af 2d       	mov	r26, r15
     186:	af 2d       	mov	r26, r15
     188:	6a 2d       	mov	r22, r10
     18a:	af 2d       	mov	r26, r15
     18c:	af 2d       	mov	r26, r15
     18e:	af 2d       	mov	r26, r15
     190:	af 2d       	mov	r26, r15
     192:	af 2d       	mov	r26, r15
     194:	af 2d       	mov	r26, r15
     196:	af 2d       	mov	r26, r15
     198:	8e 2d       	mov	r24, r14

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <prvCheckTasksWaitingTermination>
     2a0:	80 91 81 15 	lds	r24, 0x1581	; 0x801581 <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	82 d5       	rcall	.+2820   	; 0xdae <vPortYield>
     2aa:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <prvProcessTimerOrBlockTask>
     2c8:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	18 e0       	ldi	r17, 0x08	; 8
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	ea e9       	ldi	r30, 0x9A	; 154
     2e6:	fe e6       	ldi	r31, 0x6E	; 110
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	a8 38       	cpi	r26, 0x88	; 136
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	27 e1       	ldi	r18, 0x17	; 23
     2fa:	a8 e8       	ldi	r26, 0x88	; 136
     2fc:	b8 e0       	ldi	r27, 0x08	; 8
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	ab 3f       	cpi	r26, 0xFB	; 251
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <main>
     30c:	0c 94 4b 37 	jmp	0x6e96	; 0x6e96 <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <Application_getEventGroup>:
// Declare a variable to hold the created event group.
EventGroupHandle_t xCreatedEventGroup;

EventGroupHandle_t Application_getEventGroup(){
	return xCreatedEventGroup;
}
     312:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <xCreatedEventGroup>
     316:	90 91 e0 17 	lds	r25, 0x17E0	; 0x8017e0 <xCreatedEventGroup+0x1>
     31a:	08 95       	ret

0000031c <Application_aFunctionToClearBits>:
void Application_aFunctionToClearBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Clear bit 0 and bit 4 in xEventGroup. */
  uxBits = xEventGroupClearBits(
     31c:	41 e1       	ldi	r20, 0x11	; 17
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	72 c2       	rjmp	.+1252   	; 0x80a <xEventGroupClearBits>
     326:	08 95       	ret

00000328 <Application_aFunctionToWaitBits>:
EventGroupHandle_t Application_getEventGroup(){
	return xCreatedEventGroup;
}

void Application_aFunctionToWaitBits( EventGroupHandle_t xEventGroup )
{
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	ec 01       	movw	r28, r24
EventBits_t uxBits;
const TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;

  /* Wait a maximum of 100ms for either bit 0 or bit 4 to be set within
  the event group.  Clear the bits before exiting. */
  uxBits = xEventGroupWaitBits(
     338:	0f 2e       	mov	r0, r31
     33a:	f6 e0       	ldi	r31, 0x06	; 6
     33c:	cf 2e       	mov	r12, r31
     33e:	d1 2c       	mov	r13, r1
     340:	e1 2c       	mov	r14, r1
     342:	f1 2c       	mov	r15, r1
     344:	f0 2d       	mov	r31, r0
     346:	01 e0       	ldi	r16, 0x01	; 1
     348:	20 e0       	ldi	r18, 0x00	; 0
     34a:	41 e1       	ldi	r20, 0x11	; 17
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	bb d1       	rcall	.+886    	; 0x6ca <xEventGroupWaitBits>
            CO2_READY_BIT | TEMP_HUM_READY_BIT, /* The bits within the event group to wait for. */
            pdFALSE,        /* BIT_0 & BIT_4 should not be cleared before returning. */
            pdTRUE,       /* Wait for both bits, either bit will do. */
            xTicksToWait );/* Wait a maximum of 100ms for either bit to be set. */

  if( ( uxBits & ( CO2_READY_BIT | TEMP_HUM_READY_BIT ) ) == ( CO2_READY_BIT | TEMP_HUM_READY_BIT ) )
     354:	dc 01       	movw	r26, r24
     356:	cb 01       	movw	r24, r22
     358:	81 71       	andi	r24, 0x11	; 17
     35a:	99 27       	eor	r25, r25
     35c:	aa 27       	eor	r26, r26
     35e:	bb 27       	eor	r27, r27
     360:	41 97       	sbiw	r24, 0x11	; 17
     362:	a1 05       	cpc	r26, r1
     364:	b1 05       	cpc	r27, r1
     366:	a9 f4       	brne	.+42     	; 0x392 <Application_aFunctionToWaitBits+0x6a>
  {
      /* xEventGroupWaitBits() returned because both bits were set. */
	  printf("setting the bits, they are set");
     368:	8f e6       	ldi	r24, 0x6F	; 111
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	9f 93       	push	r25
     36e:	8f 93       	push	r24
     370:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
	  SensorDataPackageHandler_SetHumidity(hih820_getHumidityInUint16());
     374:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <hih820_getHumidityInUint16>
     378:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <SensorDataPackageHandler_SetHumidity>
	  SensorDataPackageHandler_SetTemperature(hih820_getTemperatureInUint16());
     37c:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <hih820_getTemperatureInUint16>
     380:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <SensorDataPackageHandler_SetTemperature>
	  SensorDataPackageHandler_SetCO2(CO2Sensor_getCO2InUint16());
     384:	5f d0       	rcall	.+190    	; 0x444 <CO2Sensor_getCO2InUint16>
     386:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <SensorDataPackageHandler_SetCO2>
	  Application_aFunctionToClearBits( xEventGroup );
     38a:	ce 01       	movw	r24, r28
     38c:	c7 df       	rcall	.-114    	; 0x31c <Application_aFunctionToClearBits>
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
  else
  {
      /* xEventGroupWaitBits() returned because xTicksToWait ticks passed
      without either BIT_0 or BIT_4 becoming set. */
  }
}
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	0f 91       	pop	r16
     398:	ff 90       	pop	r15
     39a:	ef 90       	pop	r14
     39c:	df 90       	pop	r13
     39e:	cf 90       	pop	r12
     3a0:	08 95       	ret

000003a2 <Application_handler_task>:
	,  Application_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void Application_handler_task(void *pvParameters)
{
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	00 d0       	rcall	.+0      	; 0x3a8 <Application_handler_task+0x6>
     3a8:	1f 92       	push	r1
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
	printf("startApplication");
     3ae:	8e e8       	ldi	r24, 0x8E	; 142
     3b0:	92 e0       	ldi	r25, 0x02	; 2
     3b2:	9f 93       	push	r25
     3b4:	8f 93       	push	r24
     3b6:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
	(void)pvParameters;
	xCreatedEventGroup = xEventGroupCreate();
     3ba:	74 d1       	rcall	.+744    	; 0x6a4 <xEventGroupCreate>
     3bc:	90 93 e0 17 	sts	0x17E0, r25	; 0x8017e0 <xCreatedEventGroup+0x1>
     3c0:	80 93 df 17 	sts	0x17DF, r24	; 0x8017df <xCreatedEventGroup>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300UL); // Upload message every 1 minutes (300 ms)
	xLastWakeTime = xTaskGetTickCount();
     3c4:	0e 94 09 11 	call	0x2212	; 0x2212 <xTaskGetTickCount>
     3c8:	69 83       	std	Y+1, r22	; 0x01
     3ca:	7a 83       	std	Y+2, r23	; 0x02
     3cc:	8b 83       	std	Y+3, r24	; 0x03
     3ce:	9c 83       	std	Y+4, r25	; 0x04
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     3d4:	42 e1       	ldi	r20, 0x12	; 18
     3d6:	50 e0       	ldi	r21, 0x00	; 0
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	ce 01       	movw	r24, r28
     3de:	01 96       	adiw	r24, 0x01	; 1
     3e0:	0e 94 1f 13 	call	0x263e	; 0x263e <xTaskDelayUntil>
		// Was the event group created successfully?
		if( xCreatedEventGroup == NULL )
     3e4:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <xCreatedEventGroup>
     3e8:	90 91 e0 17 	lds	r25, 0x17E0	; 0x8017e0 <xCreatedEventGroup+0x1>
     3ec:	00 97       	sbiw	r24, 0x00	; 0
		// The event group was not created because there was insufficient
		// FreeRTOS heap available.
		}
		else
		{
			Application_aFunctionToWaitBits( xCreatedEventGroup);
     3ee:	91 f3       	breq	.-28     	; 0x3d4 <Application_handler_task+0x32>
     3f0:	9b df       	rcall	.-202    	; 0x328 <Application_aFunctionToWaitBits>
     3f2:	f0 cf       	rjmp	.-32     	; 0x3d4 <Application_handler_task+0x32>

000003f4 <Application_handler_initialise>:

/*-----------------------------------------------------------*/

void Application_handler_task( void *pvParameters );

void Application_handler_initialise(UBaseType_t Application_task_priority){
     3f4:	ef 92       	push	r14
     3f6:	ff 92       	push	r15
     3f8:	0f 93       	push	r16
	xTaskCreate(
     3fa:	e1 2c       	mov	r14, r1
     3fc:	f1 2c       	mov	r15, r1
     3fe:	08 2f       	mov	r16, r24
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	40 ec       	ldi	r20, 0xC0	; 192
     406:	50 e0       	ldi	r21, 0x00	; 0
     408:	6f e9       	ldi	r22, 0x9F	; 159
     40a:	72 e0       	ldi	r23, 0x02	; 2
     40c:	81 ed       	ldi	r24, 0xD1	; 209
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	0e 94 7f 10 	call	0x20fe	; 0x20fe <xTaskCreate>
	,  "ApplicationHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  Application_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     414:	0f 91       	pop	r16
     416:	ff 90       	pop	r15
     418:	ef 90       	pop	r14
     41a:	08 95       	ret

0000041c <CO2Sensor_handler_initialise>:
mh_z19_returnCode_t getCO2return;


void CO2Sensor_handler_task( void *pvParameters );

void CO2Sensor_handler_initialise(UBaseType_t CO2_task_priority){
     41c:	ef 92       	push	r14
     41e:	ff 92       	push	r15
     420:	0f 93       	push	r16
	
	xTaskCreate(
     422:	e1 2c       	mov	r14, r1
     424:	f1 2c       	mov	r15, r1
     426:	08 2f       	mov	r16, r24
     428:	20 e0       	ldi	r18, 0x00	; 0
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	40 ec       	ldi	r20, 0xC0	; 192
     42e:	50 e0       	ldi	r21, 0x00	; 0
     430:	6f ea       	ldi	r22, 0xAF	; 175
     432:	72 e0       	ldi	r23, 0x02	; 2
     434:	8d e2       	ldi	r24, 0x2D	; 45
     436:	92 e0       	ldi	r25, 0x02	; 2
     438:	0e 94 7f 10 	call	0x20fe	; 0x20fe <xTaskCreate>
	,  "CO2Hand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  CO2_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     43c:	0f 91       	pop	r16
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	08 95       	ret

00000444 <CO2Sensor_getCO2InUint16>:
}


uint16_t CO2Sensor_getCO2InUint16(){
	return CO2ppm;
}
     444:	80 91 e3 17 	lds	r24, 0x17E3	; 0x8017e3 <CO2ppm>
     448:	90 91 e4 17 	lds	r25, 0x17E4	; 0x8017e4 <CO2ppm+0x1>
     44c:	08 95       	ret

0000044e <CO2Sensor_aFunctionToSetBits>:
void CO2Sensor_aFunctionToSetBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Set bit 0  in xEventGroup. */
  uxBits = xEventGroupSetBits(
     44e:	41 e0       	ldi	r20, 0x01	; 1
     450:	50 e0       	ldi	r21, 0x00	; 0
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	f6 c1       	rjmp	.+1004   	; 0x844 <xEventGroupSetBits>
     458:	08 95       	ret

0000045a <CO2Sensor_handler_task>:
	,  NULL
	,  CO2_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
void CO2Sensor_handler_task(void *pvParameters)
{
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	00 d0       	rcall	.+0      	; 0x460 <CO2Sensor_handler_task+0x6>
     460:	1f 92       	push	r1
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
	(void)pvParameters;
	mh_z19_injectCallBack(NULL);
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <mh_z19_injectCallBack>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     46e:	0e 94 09 11 	call	0x2212	; 0x2212 <xTaskGetTickCount>
     472:	69 83       	std	Y+1, r22	; 0x01
     474:	7a 83       	std	Y+2, r23	; 0x02
     476:	8b 83       	std	Y+3, r24	; 0x03
     478:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     47a:	48 ea       	ldi	r20, 0xA8	; 168
     47c:	58 e4       	ldi	r21, 0x48	; 72
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	ce 01       	movw	r24, r28
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	0e 94 1f 13 	call	0x263e	; 0x263e <xTaskDelayUntil>
		rc = mh_z19_takeMeassuring();
     48a:	0e 94 33 26 	call	0x4c66	; 0x4c66 <mh_z19_takeMeassuring>
     48e:	80 93 e1 17 	sts	0x17E1, r24	; 0x8017e1 <rc>
		if (rc == MHZ19_OK)
     492:	81 11       	cpse	r24, r1
     494:	f2 cf       	rjmp	.-28     	; 0x47a <CO2Sensor_handler_task+0x20>
		{
			vTaskDelay(50);
     496:	62 e3       	ldi	r22, 0x32	; 50
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 84 13 	call	0x2708	; 0x2708 <vTaskDelay>
			if(getCO2return == MHZ19_OK){
     4a2:	80 91 e2 17 	lds	r24, 0x17E2	; 0x8017e2 <getCO2return>
     4a6:	81 11       	cpse	r24, r1
     4a8:	09 c0       	rjmp	.+18     	; 0x4bc <CO2Sensor_handler_task+0x62>
				getCO2return = mh_z19_getCo2Ppm(&CO2ppm);
     4aa:	83 ee       	ldi	r24, 0xE3	; 227
     4ac:	97 e1       	ldi	r25, 0x17	; 23
     4ae:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <mh_z19_getCo2Ppm>
     4b2:	80 93 e2 17 	sts	0x17E2, r24	; 0x8017e2 <getCO2return>
				CO2Sensor_aFunctionToSetBits(Application_getEventGroup());
     4b6:	2d df       	rcall	.-422    	; 0x312 <Application_getEventGroup>
     4b8:	ca df       	rcall	.-108    	; 0x44e <CO2Sensor_aFunctionToSetBits>
     4ba:	df cf       	rjmp	.-66     	; 0x47a <CO2Sensor_handler_task+0x20>
			}
			else if(getCO2return == MHZ19_NO_MEASSURING_AVAILABLE){
     4bc:	81 30       	cpi	r24, 0x01	; 1
     4be:	e9 f6       	brne	.-70     	; 0x47a <CO2Sensor_handler_task+0x20>
				printf("Didn't get the measurements");
     4c0:	87 eb       	ldi	r24, 0xB7	; 183
     4c2:	92 e0       	ldi	r25, 0x02	; 2
     4c4:	9f 93       	push	r25
     4c6:	8f 93       	push	r24
     4c8:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	d4 cf       	rjmp	.-88     	; 0x47a <CO2Sensor_handler_task+0x20>

000004d2 <configuration_create>:
	}
}

uint8_t configuration_get_humidity_data(){
	return humidity_setting;
}
     4d2:	0f 93       	push	r16
     4d4:	80 91 88 08 	lds	r24, 0x0888	; 0x800888 <__data_end>
     4d8:	90 91 89 08 	lds	r25, 0x0889	; 0x800889 <__data_end+0x1>
     4dc:	89 2b       	or	r24, r25
     4de:	79 f4       	brne	.+30     	; 0x4fe <configuration_create+0x2c>
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	21 d7       	rcall	.+3650   	; 0x1326 <xQueueCreateMutex>
     4e4:	90 93 89 08 	sts	0x0889, r25	; 0x800889 <__data_end+0x1>
     4e8:	80 93 88 08 	sts	0x0888, r24	; 0x800888 <__data_end>
     4ec:	00 97       	sbiw	r24, 0x00	; 0
     4ee:	39 f0       	breq	.+14     	; 0x4fe <configuration_create+0x2c>
     4f0:	00 e0       	ldi	r16, 0x00	; 0
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	a9 01       	movw	r20, r18
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	70 d6       	rcall	.+3296   	; 0x11de <xQueueGenericSend>
     4fe:	0f 91       	pop	r16
     500:	08 95       	ret

00000502 <configuration_get_windows_data>:
     502:	80 91 e6 17 	lds	r24, 0x17E6	; 0x8017e6 <windows_settings>
     506:	08 95       	ret

00000508 <configuration_set_windows_data>:
     508:	cf 93       	push	r28
     50a:	c8 2f       	mov	r28, r24
     50c:	1f 92       	push	r1
     50e:	8f 93       	push	r24
     510:	83 ed       	ldi	r24, 0xD3	; 211
     512:	92 e0       	ldi	r25, 0x02	; 2
     514:	9f 93       	push	r25
     516:	8f 93       	push	r24
     518:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	c1 11       	cpse	r28, r1
     526:	04 c0       	rjmp	.+8      	; 0x530 <configuration_set_windows_data+0x28>
     528:	8c e9       	ldi	r24, 0x9C	; 156
     52a:	80 93 e6 17 	sts	0x17E6, r24	; 0x8017e6 <windows_settings>
     52e:	03 c0       	rjmp	.+6      	; 0x536 <configuration_set_windows_data+0x2e>
     530:	84 e6       	ldi	r24, 0x64	; 100
     532:	80 93 e6 17 	sts	0x17E6, r24	; 0x8017e6 <windows_settings>
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <configuration_set_humidity_data>:

void configuration_set_humidity_data(uint8_t value){
     53a:	cf 93       	push	r28
     53c:	c8 2f       	mov	r28, r24
	printf("%d : set Humidity value \n",value);
     53e:	1f 92       	push	r1
     540:	8f 93       	push	r24
     542:	8c ee       	ldi	r24, 0xEC	; 236
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	9f 93       	push	r25
     548:	8f 93       	push	r24
     54a:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
	if(value == 0){
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	c1 11       	cpse	r28, r1
     558:	04 c0       	rjmp	.+8      	; 0x562 <configuration_set_humidity_data+0x28>
		humidity_setting = -100;
     55a:	8c e9       	ldi	r24, 0x9C	; 156
     55c:	80 93 e5 17 	sts	0x17E5, r24	; 0x8017e5 <humidity_setting>
     560:	03 c0       	rjmp	.+6      	; 0x568 <configuration_set_humidity_data+0x2e>
	}else{
		humidity_setting = 100;
     562:	84 e6       	ldi	r24, 0x64	; 100
     564:	80 93 e5 17 	sts	0x17E5, r24	; 0x8017e5 <humidity_setting>
	}
}
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <get_mutex>:

SemaphoreHandle_t get_mutex(){
	return _configurationSemaphore ;
     56c:	80 91 88 08 	lds	r24, 0x0888	; 0x800888 <__data_end>
     570:	90 91 89 08 	lds	r25, 0x0889	; 0x800889 <__data_end+0x1>
     574:	08 95       	ret

00000576 <DownLinkHandler_lora_handler_task>:
	,  NULL );
}

void DownLinkHandler_lora_handler_task( void *pvParameters )
{
	configuration_create();
     576:	ad df       	rcall	.-166    	; 0x4d2 <configuration_create>
	SemaphoreHandle_t semaphore_mutex = get_mutex();
     578:	f9 df       	rcall	.-14     	; 0x56c <get_mutex>
     57a:	7c 01       	movw	r14, r24
     57c:	86 e0       	ldi	r24, 0x06	; 6
	for(;;)
	{
		printf("startLoraDownlinkTask\n");
     57e:	93 e0       	ldi	r25, 0x03	; 3
     580:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <puts>
     584:	83 e0       	ldi	r24, 0x03	; 3
		status_leds_shortPuls(led_ST4);  // OPTIONAL
     586:	0e 94 2a 2c 	call	0x5854	; 0x5854 <status_leds_shortPuls>
     58a:	0f ef       	ldi	r16, 0xFF	; 255
		xMessageBufferReceive(_downLinkMessageBufferHandle, &_downlink_payload, sizeof(lora_driver_payload_t), portMAX_DELAY);
     58c:	1f ef       	ldi	r17, 0xFF	; 255
     58e:	98 01       	movw	r18, r16
     590:	46 e1       	ldi	r20, 0x16	; 22
     592:	50 e0       	ldi	r21, 0x00	; 0
     594:	6a e8       	ldi	r22, 0x8A	; 138
     596:	78 e0       	ldi	r23, 0x08	; 8
     598:	80 91 e9 17 	lds	r24, 0x17E9	; 0x8017e9 <_downLinkMessageBufferHandle>
     59c:	90 91 ea 17 	lds	r25, 0x17EA	; 0x8017ea <_downLinkMessageBufferHandle+0x1>
     5a0:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <xStreamBufferReceive>
     5a4:	ca e8       	ldi	r28, 0x8A	; 138
		printf("DOWN LINK: from port: %d with %d bytes received!", _downlink_payload.portNo, _downlink_payload.len); // Just for Debug
     5a6:	d8 e0       	ldi	r29, 0x08	; 8
     5a8:	99 81       	ldd	r25, Y+1	; 0x01
     5aa:	88 81       	ld	r24, Y
     5ac:	1f 92       	push	r1
     5ae:	9f 93       	push	r25
     5b0:	1f 92       	push	r1
     5b2:	8f 93       	push	r24
     5b4:	8c e1       	ldi	r24, 0x1C	; 28
     5b6:	93 e0       	ldi	r25, 0x03	; 3
     5b8:	9f 93       	push	r25
     5ba:	8f 93       	push	r24
     5bc:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
		if (4 == _downlink_payload.len) // Check that we have got the expected 4 bytes
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	84 30       	cpi	r24, 0x04	; 4
     5d0:	a9 f6       	brne	.-86     	; 0x57c <DownLinkHandler_lora_handler_task+0x6>
     5d2:	4f ef       	ldi	r20, 0xFF	; 255
		{
			// decode the payload into our variables
			xSemaphoreTake(semaphore_mutex, portMAX_DELAY);
     5d4:	5f ef       	ldi	r21, 0xFF	; 255
     5d6:	ba 01       	movw	r22, r20
     5d8:	c7 01       	movw	r24, r14
     5da:	7b d7       	rcall	.+3830   	; 0x14d2 <xQueueSemaphoreTake>
     5dc:	8c 81       	ldd	r24, Y+4	; 0x04
			humDataSetting  = (_downlink_payload.bytes[2]);
     5de:	80 93 e8 17 	sts	0x17E8, r24	; 0x8017e8 <humDataSetting>
     5e2:	8d 81       	ldd	r24, Y+5	; 0x05
			windowDataSetting = (_downlink_payload.bytes[3]);	
     5e4:	80 93 e7 17 	sts	0x17E7, r24	; 0x8017e7 <windowDataSetting>
			configuration_set_windows_data(windowDataSetting);
     5e8:	8f df       	rcall	.-226    	; 0x508 <configuration_set_windows_data>
			configuration_set_humidity_data(humDataSetting);
     5ea:	80 91 e8 17 	lds	r24, 0x17E8	; 0x8017e8 <humDataSetting>
     5ee:	a5 df       	rcall	.-182    	; 0x53a <configuration_set_humidity_data>
     5f0:	80 91 e8 17 	lds	r24, 0x17E8	; 0x8017e8 <humDataSetting>
			printf("%d : Window Setting \n%d : Humidity Setting",windowDataSetting,humDataSetting);	
     5f4:	1f 92       	push	r1
     5f6:	8f 93       	push	r24
     5f8:	80 91 e7 17 	lds	r24, 0x17E7	; 0x8017e7 <windowDataSetting>
     5fc:	28 2f       	mov	r18, r24
     5fe:	08 2e       	mov	r0, r24
     600:	00 0c       	add	r0, r0
     602:	33 0b       	sbc	r19, r19
     604:	3f 93       	push	r19
     606:	8f 93       	push	r24
     608:	8d e4       	ldi	r24, 0x4D	; 77
     60a:	93 e0       	ldi	r25, 0x03	; 3
     60c:	9f 93       	push	r25
     60e:	8f 93       	push	r24
     610:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
     614:	00 e0       	ldi	r16, 0x00	; 0
			xSemaphoreGive(semaphore_mutex);
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	a9 01       	movw	r20, r18
     61c:	60 e0       	ldi	r22, 0x00	; 0
     61e:	70 e0       	ldi	r23, 0x00	; 0
     620:	c7 01       	movw	r24, r14
     622:	dd d5       	rcall	.+3002   	; 0x11de <xQueueGenericSend>
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	a5 cf       	rjmp	.-182    	; 0x57c <DownLinkHandler_lora_handler_task+0x6>

00000632 <DownLinkHandler_lora_handler_initialise>:
     632:	ef 92       	push	r14
MessageBufferHandle_t _downLinkMessageBufferHandle;



void DownLinkHandler_lora_handler_initialise(UBaseType_t DownLinkHandler_lora_handler_task_priority, MessageBufferHandle_t downLinkMessageBufferHandle)
{
     634:	ff 92       	push	r15
     636:	0f 93       	push	r16
	_downLinkMessageBufferHandle = downLinkMessageBufferHandle;
     638:	70 93 ea 17 	sts	0x17EA, r23	; 0x8017ea <_downLinkMessageBufferHandle+0x1>
     63c:	60 93 e9 17 	sts	0x17E9, r22	; 0x8017e9 <_downLinkMessageBufferHandle>
	xTaskCreate(
     640:	e1 2c       	mov	r14, r1
     642:	f1 2c       	mov	r15, r1
     644:	08 2f       	mov	r16, r24
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	48 e8       	ldi	r20, 0x88	; 136
     64c:	51 e0       	ldi	r21, 0x01	; 1
     64e:	68 e7       	ldi	r22, 0x78	; 120
     650:	73 e0       	ldi	r23, 0x03	; 3
     652:	8b eb       	ldi	r24, 0xBB	; 187
     654:	92 e0       	ldi	r25, 0x02	; 2
     656:	0e 94 7f 10 	call	0x20fe	; 0x20fe <xTaskCreate>
	,  "DownLinkHandler"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  DownLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     65a:	0f 91       	pop	r16
     65c:	ff 90       	pop	r15
     65e:	ef 90       	pop	r14
     660:	08 95       	ret

00000662 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     662:	0f 93       	push	r16
     664:	01 11       	cpse	r16, r1
     666:	0c c0       	rjmp	.+24     	; 0x680 <prvTestWaitCondition+0x1e>
     668:	dc 01       	movw	r26, r24
     66a:	cb 01       	movw	r24, r22
     66c:	82 23       	and	r24, r18
     66e:	93 23       	and	r25, r19
     670:	a4 23       	and	r26, r20
     672:	b5 23       	and	r27, r21
     674:	89 2b       	or	r24, r25
     676:	8a 2b       	or	r24, r26
     678:	8b 2b       	or	r24, r27
     67a:	79 f4       	brne	.+30     	; 0x69a <prvTestWaitCondition+0x38>
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	10 c0       	rjmp	.+32     	; 0x6a0 <prvTestWaitCondition+0x3e>
     680:	dc 01       	movw	r26, r24
     682:	cb 01       	movw	r24, r22
     684:	82 23       	and	r24, r18
     686:	93 23       	and	r25, r19
     688:	a4 23       	and	r26, r20
     68a:	b5 23       	and	r27, r21
     68c:	28 17       	cp	r18, r24
     68e:	39 07       	cpc	r19, r25
     690:	4a 07       	cpc	r20, r26
     692:	5b 07       	cpc	r21, r27
     694:	21 f0       	breq	.+8      	; 0x69e <prvTestWaitCondition+0x3c>
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	03 c0       	rjmp	.+6      	; 0x6a0 <prvTestWaitCondition+0x3e>
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	01 c0       	rjmp	.+2      	; 0x6a0 <prvTestWaitCondition+0x3e>
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	0f 91       	pop	r16
     6a2:	08 95       	ret

000006a4 <xEventGroupCreate>:
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	8f e0       	ldi	r24, 0x0F	; 15
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	cc d1       	rcall	.+920    	; 0xa46 <pvPortMalloc>
     6ae:	ec 01       	movw	r28, r24
     6b0:	00 97       	sbiw	r24, 0x00	; 0
     6b2:	39 f0       	breq	.+14     	; 0x6c2 <xEventGroupCreate+0x1e>
     6b4:	fc 01       	movw	r30, r24
     6b6:	11 92       	st	Z+, r1
     6b8:	11 92       	st	Z+, r1
     6ba:	11 92       	st	Z+, r1
     6bc:	11 92       	st	Z+, r1
     6be:	cf 01       	movw	r24, r30
     6c0:	a8 d2       	rcall	.+1360   	; 0xc12 <vListInitialise>
     6c2:	ce 01       	movw	r24, r28
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <xEventGroupWaitBits>:
     6ca:	2f 92       	push	r2
     6cc:	3f 92       	push	r3
     6ce:	4f 92       	push	r4
     6d0:	5f 92       	push	r5
     6d2:	6f 92       	push	r6
     6d4:	7f 92       	push	r7
     6d6:	8f 92       	push	r8
     6d8:	9f 92       	push	r9
     6da:	af 92       	push	r10
     6dc:	bf 92       	push	r11
     6de:	cf 92       	push	r12
     6e0:	df 92       	push	r13
     6e2:	ef 92       	push	r14
     6e4:	ff 92       	push	r15
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	ec 01       	movw	r28, r24
     6f0:	4a 01       	movw	r8, r20
     6f2:	5b 01       	movw	r10, r22
     6f4:	62 2e       	mov	r6, r18
     6f6:	70 2e       	mov	r7, r16
     6f8:	0e 94 03 11 	call	0x2206	; 0x2206 <vTaskSuspendAll>
     6fc:	28 80       	ld	r2, Y
     6fe:	39 80       	ldd	r3, Y+1	; 0x01
     700:	4a 80       	ldd	r4, Y+2	; 0x02
     702:	5b 80       	ldd	r5, Y+3	; 0x03
     704:	a5 01       	movw	r20, r10
     706:	94 01       	movw	r18, r8
     708:	c2 01       	movw	r24, r4
     70a:	b1 01       	movw	r22, r2
     70c:	aa df       	rcall	.-172    	; 0x662 <prvTestWaitCondition>
     70e:	88 23       	and	r24, r24
     710:	a1 f0       	breq	.+40     	; 0x73a <xEventGroupWaitBits+0x70>
     712:	66 20       	and	r6, r6
     714:	89 f1       	breq	.+98     	; 0x778 <xEventGroupWaitBits+0xae>
     716:	d5 01       	movw	r26, r10
     718:	c4 01       	movw	r24, r8
     71a:	80 95       	com	r24
     71c:	90 95       	com	r25
     71e:	a0 95       	com	r26
     720:	b0 95       	com	r27
     722:	82 21       	and	r24, r2
     724:	93 21       	and	r25, r3
     726:	a4 21       	and	r26, r4
     728:	b5 21       	and	r27, r5
     72a:	88 83       	st	Y, r24
     72c:	99 83       	std	Y+1, r25	; 0x01
     72e:	aa 83       	std	Y+2, r26	; 0x02
     730:	bb 83       	std	Y+3, r27	; 0x03
     732:	c1 2c       	mov	r12, r1
     734:	d1 2c       	mov	r13, r1
     736:	76 01       	movw	r14, r12
     738:	22 c0       	rjmp	.+68     	; 0x77e <xEventGroupWaitBits+0xb4>
     73a:	c1 14       	cp	r12, r1
     73c:	d1 04       	cpc	r13, r1
     73e:	e1 04       	cpc	r14, r1
     740:	f1 04       	cpc	r15, r1
     742:	e9 f0       	breq	.+58     	; 0x77e <xEventGroupWaitBits+0xb4>
     744:	61 10       	cpse	r6, r1
     746:	04 c0       	rjmp	.+8      	; 0x750 <xEventGroupWaitBits+0x86>
     748:	40 e0       	ldi	r20, 0x00	; 0
     74a:	50 e0       	ldi	r21, 0x00	; 0
     74c:	ba 01       	movw	r22, r20
     74e:	04 c0       	rjmp	.+8      	; 0x758 <xEventGroupWaitBits+0x8e>
     750:	40 e0       	ldi	r20, 0x00	; 0
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	71 e0       	ldi	r23, 0x01	; 1
     758:	71 10       	cpse	r7, r1
     75a:	74 60       	ori	r23, 0x04	; 4
     75c:	48 29       	or	r20, r8
     75e:	59 29       	or	r21, r9
     760:	6a 29       	or	r22, r10
     762:	7b 29       	or	r23, r11
     764:	97 01       	movw	r18, r14
     766:	86 01       	movw	r16, r12
     768:	ce 01       	movw	r24, r28
     76a:	04 96       	adiw	r24, 0x04	; 4
     76c:	0e 94 1b 14 	call	0x2836	; 0x2836 <vTaskPlaceOnUnorderedEventList>
     770:	21 2c       	mov	r2, r1
     772:	31 2c       	mov	r3, r1
     774:	21 01       	movw	r4, r2
     776:	03 c0       	rjmp	.+6      	; 0x77e <xEventGroupWaitBits+0xb4>
     778:	c1 2c       	mov	r12, r1
     77a:	d1 2c       	mov	r13, r1
     77c:	76 01       	movw	r14, r12
     77e:	0e 94 43 12 	call	0x2486	; 0x2486 <xTaskResumeAll>
     782:	cd 28       	or	r12, r13
     784:	ce 28       	or	r12, r14
     786:	cf 28       	or	r12, r15
     788:	59 f1       	breq	.+86     	; 0x7e0 <xEventGroupWaitBits+0x116>
     78a:	81 11       	cpse	r24, r1
     78c:	01 c0       	rjmp	.+2      	; 0x790 <xEventGroupWaitBits+0xc6>
     78e:	0f d3       	rcall	.+1566   	; 0xdae <vPortYield>
     790:	0e 94 dd 17 	call	0x2fba	; 0x2fba <uxTaskResetEventItemValue>
     794:	6b 01       	movw	r12, r22
     796:	7c 01       	movw	r14, r24
     798:	91 fd       	sbrc	r25, 1
     79a:	1f c0       	rjmp	.+62     	; 0x7da <xEventGroupWaitBits+0x110>
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	0f 92       	push	r0
     7a2:	c8 80       	ld	r12, Y
     7a4:	d9 80       	ldd	r13, Y+1	; 0x01
     7a6:	ea 80       	ldd	r14, Y+2	; 0x02
     7a8:	fb 80       	ldd	r15, Y+3	; 0x03
     7aa:	07 2d       	mov	r16, r7
     7ac:	a5 01       	movw	r20, r10
     7ae:	94 01       	movw	r18, r8
     7b0:	c7 01       	movw	r24, r14
     7b2:	b6 01       	movw	r22, r12
     7b4:	56 df       	rcall	.-340    	; 0x662 <prvTestWaitCondition>
     7b6:	88 23       	and	r24, r24
     7b8:	71 f0       	breq	.+28     	; 0x7d6 <xEventGroupWaitBits+0x10c>
     7ba:	66 20       	and	r6, r6
     7bc:	61 f0       	breq	.+24     	; 0x7d6 <xEventGroupWaitBits+0x10c>
     7be:	80 94       	com	r8
     7c0:	90 94       	com	r9
     7c2:	a0 94       	com	r10
     7c4:	b0 94       	com	r11
     7c6:	8c 20       	and	r8, r12
     7c8:	9d 20       	and	r9, r13
     7ca:	ae 20       	and	r10, r14
     7cc:	bf 20       	and	r11, r15
     7ce:	88 82       	st	Y, r8
     7d0:	99 82       	std	Y+1, r9	; 0x01
     7d2:	aa 82       	std	Y+2, r10	; 0x02
     7d4:	bb 82       	std	Y+3, r11	; 0x03
     7d6:	0f 90       	pop	r0
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	16 01       	movw	r2, r12
     7dc:	27 01       	movw	r4, r14
     7de:	55 24       	eor	r5, r5
     7e0:	c2 01       	movw	r24, r4
     7e2:	b1 01       	movw	r22, r2
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	ff 90       	pop	r15
     7ee:	ef 90       	pop	r14
     7f0:	df 90       	pop	r13
     7f2:	cf 90       	pop	r12
     7f4:	bf 90       	pop	r11
     7f6:	af 90       	pop	r10
     7f8:	9f 90       	pop	r9
     7fa:	8f 90       	pop	r8
     7fc:	7f 90       	pop	r7
     7fe:	6f 90       	pop	r6
     800:	5f 90       	pop	r5
     802:	4f 90       	pop	r4
     804:	3f 90       	pop	r3
     806:	2f 90       	pop	r2
     808:	08 95       	ret

0000080a <xEventGroupClearBits>:
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	f8 94       	cli
     812:	0f 92       	push	r0
     814:	fc 01       	movw	r30, r24
     816:	00 81       	ld	r16, Z
     818:	11 81       	ldd	r17, Z+1	; 0x01
     81a:	22 81       	ldd	r18, Z+2	; 0x02
     81c:	33 81       	ldd	r19, Z+3	; 0x03
     81e:	40 95       	com	r20
     820:	50 95       	com	r21
     822:	60 95       	com	r22
     824:	70 95       	com	r23
     826:	40 23       	and	r20, r16
     828:	51 23       	and	r21, r17
     82a:	62 23       	and	r22, r18
     82c:	73 23       	and	r23, r19
     82e:	40 83       	st	Z, r20
     830:	51 83       	std	Z+1, r21	; 0x01
     832:	62 83       	std	Z+2, r22	; 0x02
     834:	73 83       	std	Z+3, r23	; 0x03
     836:	0f 90       	pop	r0
     838:	0f be       	out	0x3f, r0	; 63
     83a:	c9 01       	movw	r24, r18
     83c:	b8 01       	movw	r22, r16
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	08 95       	ret

00000844 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     844:	4f 92       	push	r4
     846:	5f 92       	push	r5
     848:	6f 92       	push	r6
     84a:	7f 92       	push	r7
     84c:	af 92       	push	r10
     84e:	bf 92       	push	r11
     850:	cf 92       	push	r12
     852:	df 92       	push	r13
     854:	ef 92       	push	r14
     856:	ff 92       	push	r15
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	ec 01       	movw	r28, r24
     862:	6a 01       	movw	r12, r20
     864:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     866:	8c 01       	movw	r16, r24
     868:	09 5f       	subi	r16, 0xF9	; 249
     86a:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     86c:	0e 94 03 11 	call	0x2206	; 0x2206 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     870:	eb 85       	ldd	r30, Y+11	; 0x0b
     872:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     874:	88 81       	ld	r24, Y
     876:	99 81       	ldd	r25, Y+1	; 0x01
     878:	aa 81       	ldd	r26, Y+2	; 0x02
     87a:	bb 81       	ldd	r27, Y+3	; 0x03
     87c:	c8 2a       	or	r12, r24
     87e:	d9 2a       	or	r13, r25
     880:	ea 2a       	or	r14, r26
     882:	fb 2a       	or	r15, r27
     884:	c8 82       	st	Y, r12
     886:	d9 82       	std	Y+1, r13	; 0x01
     888:	ea 82       	std	Y+2, r14	; 0x02
     88a:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     88c:	c1 2c       	mov	r12, r1
     88e:	d1 2c       	mov	r13, r1
     890:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     892:	3d c0       	rjmp	.+122    	; 0x90e <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     894:	a4 80       	ldd	r10, Z+4	; 0x04
     896:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     898:	80 81       	ld	r24, Z
     89a:	91 81       	ldd	r25, Z+1	; 0x01
     89c:	a2 81       	ldd	r26, Z+2	; 0x02
     89e:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     8a0:	ac 01       	movw	r20, r24
     8a2:	bd 01       	movw	r22, r26
     8a4:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     8a6:	b2 fd       	sbrc	r27, 2
     8a8:	0e c0       	rjmp	.+28     	; 0x8c6 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     8aa:	48 80       	ld	r4, Y
     8ac:	59 80       	ldd	r5, Y+1	; 0x01
     8ae:	6a 80       	ldd	r6, Y+2	; 0x02
     8b0:	7b 80       	ldd	r7, Y+3	; 0x03
     8b2:	44 22       	and	r4, r20
     8b4:	55 22       	and	r5, r21
     8b6:	66 22       	and	r6, r22
     8b8:	77 22       	and	r7, r23
     8ba:	45 28       	or	r4, r5
     8bc:	46 28       	or	r4, r6
     8be:	47 28       	or	r4, r7
     8c0:	89 f4       	brne	.+34     	; 0x8e4 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	12 c0       	rjmp	.+36     	; 0x8ea <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     8c6:	48 80       	ld	r4, Y
     8c8:	59 80       	ldd	r5, Y+1	; 0x01
     8ca:	6a 80       	ldd	r6, Y+2	; 0x02
     8cc:	7b 80       	ldd	r7, Y+3	; 0x03
     8ce:	44 22       	and	r4, r20
     8d0:	55 22       	and	r5, r21
     8d2:	66 22       	and	r6, r22
     8d4:	77 22       	and	r7, r23
     8d6:	44 15       	cp	r20, r4
     8d8:	55 05       	cpc	r21, r5
     8da:	66 05       	cpc	r22, r6
     8dc:	77 05       	cpc	r23, r7
     8de:	21 f0       	breq	.+8      	; 0x8e8 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	03 c0       	rjmp	.+6      	; 0x8ea <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     8e4:	21 e0       	ldi	r18, 0x01	; 1
     8e6:	01 c0       	rjmp	.+2      	; 0x8ea <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     8e8:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     8ea:	22 23       	and	r18, r18
     8ec:	71 f0       	breq	.+28     	; 0x90a <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     8ee:	b0 ff       	sbrs	r27, 0
     8f0:	04 c0       	rjmp	.+8      	; 0x8fa <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     8f2:	c4 2a       	or	r12, r20
     8f4:	d5 2a       	or	r13, r21
     8f6:	e6 2a       	or	r14, r22
     8f8:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     8fa:	48 81       	ld	r20, Y
     8fc:	59 81       	ldd	r21, Y+1	; 0x01
     8fe:	6a 81       	ldd	r22, Y+2	; 0x02
     900:	7b 81       	ldd	r23, Y+3	; 0x03
     902:	72 60       	ori	r23, 0x02	; 2
     904:	cf 01       	movw	r24, r30
     906:	0e 94 56 15 	call	0x2aac	; 0x2aac <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     90a:	ea 2d       	mov	r30, r10
     90c:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     90e:	e0 17       	cp	r30, r16
     910:	f1 07       	cpc	r31, r17
     912:	09 f0       	breq	.+2      	; 0x916 <xEventGroupSetBits+0xd2>
     914:	bf cf       	rjmp	.-130    	; 0x894 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     916:	c0 94       	com	r12
     918:	d0 94       	com	r13
     91a:	e0 94       	com	r14
     91c:	f0 94       	com	r15
     91e:	88 81       	ld	r24, Y
     920:	99 81       	ldd	r25, Y+1	; 0x01
     922:	aa 81       	ldd	r26, Y+2	; 0x02
     924:	bb 81       	ldd	r27, Y+3	; 0x03
     926:	c8 22       	and	r12, r24
     928:	d9 22       	and	r13, r25
     92a:	ea 22       	and	r14, r26
     92c:	fb 22       	and	r15, r27
     92e:	c8 82       	st	Y, r12
     930:	d9 82       	std	Y+1, r13	; 0x01
     932:	ea 82       	std	Y+2, r14	; 0x02
     934:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     936:	0e 94 43 12 	call	0x2486	; 0x2486 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     93a:	68 81       	ld	r22, Y
     93c:	79 81       	ldd	r23, Y+1	; 0x01
     93e:	8a 81       	ldd	r24, Y+2	; 0x02
     940:	9b 81       	ldd	r25, Y+3	; 0x03
}
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	1f 91       	pop	r17
     948:	0f 91       	pop	r16
     94a:	ff 90       	pop	r15
     94c:	ef 90       	pop	r14
     94e:	df 90       	pop	r13
     950:	cf 90       	pop	r12
     952:	bf 90       	pop	r11
     954:	af 90       	pop	r10
     956:	7f 90       	pop	r7
     958:	6f 90       	pop	r6
     95a:	5f 90       	pop	r5
     95c:	4f 90       	pop	r4
     95e:	08 95       	ret

00000960 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     960:	ec ea       	ldi	r30, 0xAC	; 172
     962:	f8 e0       	ldi	r31, 0x08	; 8
     964:	a0 eb       	ldi	r26, 0xB0	; 176
     966:	b8 e0       	ldi	r27, 0x08	; 8
     968:	b1 83       	std	Z+1, r27	; 0x01
     96a:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     96c:	13 82       	std	Z+3, r1	; 0x03
     96e:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     970:	ec e2       	ldi	r30, 0x2C	; 44
     972:	f5 e1       	ldi	r31, 0x15	; 21
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     974:	f0 93 ab 08 	sts	0x08AB, r31	; 0x8008ab <pxEnd+0x1>
     978:	e0 93 aa 08 	sts	0x08AA, r30	; 0x8008aa <pxEnd>
    pxEnd->xBlockSize = 0;
     97c:	13 82       	std	Z+3, r1	; 0x03
     97e:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     980:	11 82       	std	Z+1, r1	; 0x01
     982:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     984:	8c e7       	ldi	r24, 0x7C	; 124
     986:	9c e0       	ldi	r25, 0x0C	; 12
     988:	13 96       	adiw	r26, 0x03	; 3
     98a:	9c 93       	st	X, r25
     98c:	8e 93       	st	-X, r24
     98e:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     990:	ed 93       	st	X+, r30
     992:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     994:	90 93 a7 08 	sts	0x08A7, r25	; 0x8008a7 <xMinimumEverFreeBytesRemaining+0x1>
     998:	80 93 a6 08 	sts	0x08A6, r24	; 0x8008a6 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     99c:	90 93 a9 08 	sts	0x08A9, r25	; 0x8008a9 <xFreeBytesRemaining+0x1>
     9a0:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	90 e8       	ldi	r25, 0x80	; 128
     9a8:	90 93 a1 08 	sts	0x08A1, r25	; 0x8008a1 <xBlockAllocatedBit+0x1>
     9ac:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <xBlockAllocatedBit>
     9b0:	08 95       	ret

000009b2 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     9b8:	ac ea       	ldi	r26, 0xAC	; 172
     9ba:	b8 e0       	ldi	r27, 0x08	; 8
     9bc:	01 c0       	rjmp	.+2      	; 0x9c0 <prvInsertBlockIntoFreeList+0xe>
     9be:	df 01       	movw	r26, r30
     9c0:	ed 91       	ld	r30, X+
     9c2:	fc 91       	ld	r31, X
     9c4:	11 97       	sbiw	r26, 0x01	; 1
     9c6:	ec 17       	cp	r30, r28
     9c8:	fd 07       	cpc	r31, r29
     9ca:	c8 f3       	brcs	.-14     	; 0x9be <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     9cc:	12 96       	adiw	r26, 0x02	; 2
     9ce:	8d 91       	ld	r24, X+
     9d0:	9c 91       	ld	r25, X
     9d2:	13 97       	sbiw	r26, 0x03	; 3
     9d4:	9d 01       	movw	r18, r26
     9d6:	28 0f       	add	r18, r24
     9d8:	39 1f       	adc	r19, r25
     9da:	c2 17       	cp	r28, r18
     9dc:	d3 07       	cpc	r29, r19
     9de:	49 f4       	brne	.+18     	; 0x9f2 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     9e0:	2a 81       	ldd	r18, Y+2	; 0x02
     9e2:	3b 81       	ldd	r19, Y+3	; 0x03
     9e4:	82 0f       	add	r24, r18
     9e6:	93 1f       	adc	r25, r19
     9e8:	13 96       	adiw	r26, 0x03	; 3
     9ea:	9c 93       	st	X, r25
     9ec:	8e 93       	st	-X, r24
     9ee:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     9f0:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     9f2:	8a 81       	ldd	r24, Y+2	; 0x02
     9f4:	9b 81       	ldd	r25, Y+3	; 0x03
     9f6:	9e 01       	movw	r18, r28
     9f8:	28 0f       	add	r18, r24
     9fa:	39 1f       	adc	r19, r25
     9fc:	e2 17       	cp	r30, r18
     9fe:	f3 07       	cpc	r31, r19
     a00:	c1 f4       	brne	.+48     	; 0xa32 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     a02:	20 91 aa 08 	lds	r18, 0x08AA	; 0x8008aa <pxEnd>
     a06:	30 91 ab 08 	lds	r19, 0x08AB	; 0x8008ab <pxEnd+0x1>
     a0a:	e2 17       	cp	r30, r18
     a0c:	f3 07       	cpc	r31, r19
     a0e:	71 f0       	breq	.+28     	; 0xa2c <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     a10:	22 81       	ldd	r18, Z+2	; 0x02
     a12:	33 81       	ldd	r19, Z+3	; 0x03
     a14:	82 0f       	add	r24, r18
     a16:	93 1f       	adc	r25, r19
     a18:	9b 83       	std	Y+3, r25	; 0x03
     a1a:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     a1c:	ed 91       	ld	r30, X+
     a1e:	fc 91       	ld	r31, X
     a20:	11 97       	sbiw	r26, 0x01	; 1
     a22:	80 81       	ld	r24, Z
     a24:	91 81       	ldd	r25, Z+1	; 0x01
     a26:	99 83       	std	Y+1, r25	; 0x01
     a28:	88 83       	st	Y, r24
     a2a:	05 c0       	rjmp	.+10     	; 0xa36 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     a2c:	39 83       	std	Y+1, r19	; 0x01
     a2e:	28 83       	st	Y, r18
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     a32:	f9 83       	std	Y+1, r31	; 0x01
     a34:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     a36:	ca 17       	cp	r28, r26
     a38:	db 07       	cpc	r29, r27
     a3a:	11 f0       	breq	.+4      	; 0xa40 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     a3c:	cd 93       	st	X+, r28
     a3e:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	08 95       	ret

00000a46 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     a46:	ef 92       	push	r14
     a48:	ff 92       	push	r15
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     a54:	0e 94 03 11 	call	0x2206	; 0x2206 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     a58:	80 91 aa 08 	lds	r24, 0x08AA	; 0x8008aa <pxEnd>
     a5c:	90 91 ab 08 	lds	r25, 0x08AB	; 0x8008ab <pxEnd+0x1>
     a60:	89 2b       	or	r24, r25
     a62:	09 f4       	brne	.+2      	; 0xa66 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     a64:	7d df       	rcall	.-262    	; 0x960 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     a66:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <xBlockAllocatedBit>
     a6a:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <xBlockAllocatedBit+0x1>
     a6e:	80 23       	and	r24, r16
     a70:	91 23       	and	r25, r17
     a72:	89 2b       	or	r24, r25
     a74:	09 f0       	breq	.+2      	; 0xa78 <pvPortMalloc+0x32>
     a76:	76 c0       	rjmp	.+236    	; 0xb64 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     a78:	01 15       	cp	r16, r1
     a7a:	11 05       	cpc	r17, r1
     a7c:	49 f0       	breq	.+18     	; 0xa90 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     a7e:	c8 01       	movw	r24, r16
     a80:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     a82:	08 17       	cp	r16, r24
     a84:	19 07       	cpc	r17, r25
     a86:	18 f0       	brcs	.+6      	; 0xa8e <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     a88:	00 e0       	ldi	r16, 0x00	; 0
     a8a:	10 e0       	ldi	r17, 0x00	; 0
     a8c:	01 c0       	rjmp	.+2      	; 0xa90 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     a8e:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     a90:	01 15       	cp	r16, r1
     a92:	11 05       	cpc	r17, r1
     a94:	09 f4       	brne	.+2      	; 0xa98 <pvPortMalloc+0x52>
     a96:	69 c0       	rjmp	.+210    	; 0xb6a <pvPortMalloc+0x124>
     a98:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <xFreeBytesRemaining>
     a9c:	90 91 a9 08 	lds	r25, 0x08A9	; 0x8008a9 <xFreeBytesRemaining+0x1>
     aa0:	80 17       	cp	r24, r16
     aa2:	91 07       	cpc	r25, r17
     aa4:	08 f4       	brcc	.+2      	; 0xaa8 <pvPortMalloc+0x62>
     aa6:	64 c0       	rjmp	.+200    	; 0xb70 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     aa8:	c0 91 ac 08 	lds	r28, 0x08AC	; 0x8008ac <xStart>
     aac:	d0 91 ad 08 	lds	r29, 0x08AD	; 0x8008ad <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     ab0:	ec ea       	ldi	r30, 0xAC	; 172
     ab2:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     ab6:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     ab8:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     aba:	8a 81       	ldd	r24, Y+2	; 0x02
     abc:	9b 81       	ldd	r25, Y+3	; 0x03
     abe:	80 17       	cp	r24, r16
     ac0:	91 07       	cpc	r25, r17
     ac2:	20 f4       	brcc	.+8      	; 0xacc <pvPortMalloc+0x86>
     ac4:	88 81       	ld	r24, Y
     ac6:	99 81       	ldd	r25, Y+1	; 0x01
     ac8:	00 97       	sbiw	r24, 0x00	; 0
     aca:	a9 f7       	brne	.-22     	; 0xab6 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     acc:	80 91 aa 08 	lds	r24, 0x08AA	; 0x8008aa <pxEnd>
     ad0:	90 91 ab 08 	lds	r25, 0x08AB	; 0x8008ab <pxEnd+0x1>
     ad4:	c8 17       	cp	r28, r24
     ad6:	d9 07       	cpc	r29, r25
     ad8:	09 f4       	brne	.+2      	; 0xadc <pvPortMalloc+0x96>
     ada:	4d c0       	rjmp	.+154    	; 0xb76 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     adc:	e0 80       	ld	r14, Z
     ade:	f1 80       	ldd	r15, Z+1	; 0x01
     ae0:	84 e0       	ldi	r24, 0x04	; 4
     ae2:	e8 0e       	add	r14, r24
     ae4:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     ae6:	88 81       	ld	r24, Y
     ae8:	99 81       	ldd	r25, Y+1	; 0x01
     aea:	91 83       	std	Z+1, r25	; 0x01
     aec:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     aee:	2a 81       	ldd	r18, Y+2	; 0x02
     af0:	3b 81       	ldd	r19, Y+3	; 0x03
     af2:	20 1b       	sub	r18, r16
     af4:	31 0b       	sbc	r19, r17
     af6:	29 30       	cpi	r18, 0x09	; 9
     af8:	31 05       	cpc	r19, r1
     afa:	48 f0       	brcs	.+18     	; 0xb0e <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     afc:	ce 01       	movw	r24, r28
     afe:	80 0f       	add	r24, r16
     b00:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     b02:	fc 01       	movw	r30, r24
     b04:	33 83       	std	Z+3, r19	; 0x03
     b06:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     b08:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     b0a:	0a 83       	std	Y+2, r16	; 0x02
     b0c:	52 df       	rcall	.-348    	; 0x9b2 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     b0e:	2a 81       	ldd	r18, Y+2	; 0x02
     b10:	3b 81       	ldd	r19, Y+3	; 0x03
     b12:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <xFreeBytesRemaining>
     b16:	90 91 a9 08 	lds	r25, 0x08A9	; 0x8008a9 <xFreeBytesRemaining+0x1>
     b1a:	82 1b       	sub	r24, r18
     b1c:	93 0b       	sbc	r25, r19
     b1e:	90 93 a9 08 	sts	0x08A9, r25	; 0x8008a9 <xFreeBytesRemaining+0x1>
     b22:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     b26:	40 91 a6 08 	lds	r20, 0x08A6	; 0x8008a6 <xMinimumEverFreeBytesRemaining>
     b2a:	50 91 a7 08 	lds	r21, 0x08A7	; 0x8008a7 <xMinimumEverFreeBytesRemaining+0x1>
     b2e:	84 17       	cp	r24, r20
     b30:	95 07       	cpc	r25, r21
     b32:	20 f4       	brcc	.+8      	; 0xb3c <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     b34:	90 93 a7 08 	sts	0x08A7, r25	; 0x8008a7 <xMinimumEverFreeBytesRemaining+0x1>
     b38:	80 93 a6 08 	sts	0x08A6, r24	; 0x8008a6 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     b3c:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <xBlockAllocatedBit>
     b40:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <xBlockAllocatedBit+0x1>
     b44:	28 2b       	or	r18, r24
     b46:	39 2b       	or	r19, r25
     b48:	3b 83       	std	Y+3, r19	; 0x03
     b4a:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     b4c:	19 82       	std	Y+1, r1	; 0x01
     b4e:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     b50:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <xNumberOfSuccessfulAllocations>
     b54:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <xNumberOfSuccessfulAllocations+0x1>
     b58:	01 96       	adiw	r24, 0x01	; 1
     b5a:	90 93 a5 08 	sts	0x08A5, r25	; 0x8008a5 <xNumberOfSuccessfulAllocations+0x1>
     b5e:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <xNumberOfSuccessfulAllocations>
     b62:	0b c0       	rjmp	.+22     	; 0xb7a <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     b64:	e1 2c       	mov	r14, r1
     b66:	f1 2c       	mov	r15, r1
     b68:	08 c0       	rjmp	.+16     	; 0xb7a <pvPortMalloc+0x134>
     b6a:	e1 2c       	mov	r14, r1
     b6c:	f1 2c       	mov	r15, r1
     b6e:	05 c0       	rjmp	.+10     	; 0xb7a <pvPortMalloc+0x134>
     b70:	e1 2c       	mov	r14, r1
     b72:	f1 2c       	mov	r15, r1
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <pvPortMalloc+0x134>
     b76:	e1 2c       	mov	r14, r1
     b78:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     b7a:	0e 94 43 12 	call	0x2486	; 0x2486 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     b7e:	e1 14       	cp	r14, r1
     b80:	f1 04       	cpc	r15, r1
     b82:	11 f4       	brne	.+4      	; 0xb88 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     b84:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     b88:	c7 01       	movw	r24, r14
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	ff 90       	pop	r15
     b94:	ef 90       	pop	r14
     b96:	08 95       	ret

00000b98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     ba0:	00 97       	sbiw	r24, 0x00	; 0
     ba2:	91 f1       	breq	.+100    	; 0xc08 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     ba4:	ec 01       	movw	r28, r24
     ba6:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     ba8:	4a 81       	ldd	r20, Y+2	; 0x02
     baa:	5b 81       	ldd	r21, Y+3	; 0x03
     bac:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <xBlockAllocatedBit>
     bb0:	30 91 a1 08 	lds	r19, 0x08A1	; 0x8008a1 <xBlockAllocatedBit+0x1>
     bb4:	ba 01       	movw	r22, r20
     bb6:	62 23       	and	r22, r18
     bb8:	73 23       	and	r23, r19
     bba:	67 2b       	or	r22, r23
     bbc:	29 f1       	breq	.+74     	; 0xc08 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     bbe:	68 81       	ld	r22, Y
     bc0:	79 81       	ldd	r23, Y+1	; 0x01
     bc2:	67 2b       	or	r22, r23
     bc4:	09 f5       	brne	.+66     	; 0xc08 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     bc6:	20 95       	com	r18
     bc8:	30 95       	com	r19
     bca:	24 23       	and	r18, r20
     bcc:	35 23       	and	r19, r21
     bce:	3b 83       	std	Y+3, r19	; 0x03
     bd0:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     bd2:	0e 94 03 11 	call	0x2206	; 0x2206 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	9b 81       	ldd	r25, Y+3	; 0x03
     bda:	20 91 a8 08 	lds	r18, 0x08A8	; 0x8008a8 <xFreeBytesRemaining>
     bde:	30 91 a9 08 	lds	r19, 0x08A9	; 0x8008a9 <xFreeBytesRemaining+0x1>
     be2:	82 0f       	add	r24, r18
     be4:	93 1f       	adc	r25, r19
     be6:	90 93 a9 08 	sts	0x08A9, r25	; 0x8008a9 <xFreeBytesRemaining+0x1>
     bea:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     bee:	ce 01       	movw	r24, r28
     bf0:	e0 de       	rcall	.-576    	; 0x9b2 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     bf2:	80 91 a2 08 	lds	r24, 0x08A2	; 0x8008a2 <xNumberOfSuccessfulFrees>
     bf6:	90 91 a3 08 	lds	r25, 0x08A3	; 0x8008a3 <xNumberOfSuccessfulFrees+0x1>
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	90 93 a3 08 	sts	0x08A3, r25	; 0x8008a3 <xNumberOfSuccessfulFrees+0x1>
     c00:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     c04:	0e 94 43 12 	call	0x2486	; 0x2486 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	08 95       	ret

00000c12 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     c12:	fc 01       	movw	r30, r24
     c14:	03 96       	adiw	r24, 0x03	; 3
     c16:	92 83       	std	Z+2, r25	; 0x02
     c18:	81 83       	std	Z+1, r24	; 0x01
     c1a:	4f ef       	ldi	r20, 0xFF	; 255
     c1c:	5f ef       	ldi	r21, 0xFF	; 255
     c1e:	ba 01       	movw	r22, r20
     c20:	43 83       	std	Z+3, r20	; 0x03
     c22:	54 83       	std	Z+4, r21	; 0x04
     c24:	65 83       	std	Z+5, r22	; 0x05
     c26:	76 83       	std	Z+6, r23	; 0x06
     c28:	90 87       	std	Z+8, r25	; 0x08
     c2a:	87 83       	std	Z+7, r24	; 0x07
     c2c:	92 87       	std	Z+10, r25	; 0x0a
     c2e:	81 87       	std	Z+9, r24	; 0x09
     c30:	10 82       	st	Z, r1
     c32:	08 95       	ret

00000c34 <vListInitialiseItem>:
     c34:	fc 01       	movw	r30, r24
     c36:	13 86       	std	Z+11, r1	; 0x0b
     c38:	12 86       	std	Z+10, r1	; 0x0a
     c3a:	08 95       	ret

00000c3c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     c46:	08 81       	ld	r16, Y
     c48:	19 81       	ldd	r17, Y+1	; 0x01
     c4a:	2a 81       	ldd	r18, Y+2	; 0x02
     c4c:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     c4e:	0f 3f       	cpi	r16, 0xFF	; 255
     c50:	4f ef       	ldi	r20, 0xFF	; 255
     c52:	14 07       	cpc	r17, r20
     c54:	24 07       	cpc	r18, r20
     c56:	34 07       	cpc	r19, r20
     c58:	21 f4       	brne	.+8      	; 0xc62 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     c5a:	fc 01       	movw	r30, r24
     c5c:	a1 85       	ldd	r26, Z+9	; 0x09
     c5e:	b2 85       	ldd	r27, Z+10	; 0x0a
     c60:	11 c0       	rjmp	.+34     	; 0xc84 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     c62:	dc 01       	movw	r26, r24
     c64:	13 96       	adiw	r26, 0x03	; 3
     c66:	01 c0       	rjmp	.+2      	; 0xc6a <vListInsert+0x2e>
     c68:	df 01       	movw	r26, r30
     c6a:	14 96       	adiw	r26, 0x04	; 4
     c6c:	ed 91       	ld	r30, X+
     c6e:	fc 91       	ld	r31, X
     c70:	15 97       	sbiw	r26, 0x05	; 5
     c72:	40 81       	ld	r20, Z
     c74:	51 81       	ldd	r21, Z+1	; 0x01
     c76:	62 81       	ldd	r22, Z+2	; 0x02
     c78:	73 81       	ldd	r23, Z+3	; 0x03
     c7a:	04 17       	cp	r16, r20
     c7c:	15 07       	cpc	r17, r21
     c7e:	26 07       	cpc	r18, r22
     c80:	37 07       	cpc	r19, r23
     c82:	90 f7       	brcc	.-28     	; 0xc68 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     c84:	14 96       	adiw	r26, 0x04	; 4
     c86:	ed 91       	ld	r30, X+
     c88:	fc 91       	ld	r31, X
     c8a:	15 97       	sbiw	r26, 0x05	; 5
     c8c:	fd 83       	std	Y+5, r31	; 0x05
     c8e:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     c90:	d7 83       	std	Z+7, r29	; 0x07
     c92:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     c94:	bf 83       	std	Y+7, r27	; 0x07
     c96:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     c98:	15 96       	adiw	r26, 0x05	; 5
     c9a:	dc 93       	st	X, r29
     c9c:	ce 93       	st	-X, r28
     c9e:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     ca0:	9b 87       	std	Y+11, r25	; 0x0b
     ca2:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     ca4:	fc 01       	movw	r30, r24
     ca6:	20 81       	ld	r18, Z
     ca8:	2f 5f       	subi	r18, 0xFF	; 255
     caa:	20 83       	st	Z, r18
}
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	1f 91       	pop	r17
     cb2:	0f 91       	pop	r16
     cb4:	08 95       	ret

00000cb6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     cbc:	a2 85       	ldd	r26, Z+10	; 0x0a
     cbe:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     cc0:	c4 81       	ldd	r28, Z+4	; 0x04
     cc2:	d5 81       	ldd	r29, Z+5	; 0x05
     cc4:	86 81       	ldd	r24, Z+6	; 0x06
     cc6:	97 81       	ldd	r25, Z+7	; 0x07
     cc8:	9f 83       	std	Y+7, r25	; 0x07
     cca:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     ccc:	c6 81       	ldd	r28, Z+6	; 0x06
     cce:	d7 81       	ldd	r29, Z+7	; 0x07
     cd0:	84 81       	ldd	r24, Z+4	; 0x04
     cd2:	95 81       	ldd	r25, Z+5	; 0x05
     cd4:	9d 83       	std	Y+5, r25	; 0x05
     cd6:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     cd8:	11 96       	adiw	r26, 0x01	; 1
     cda:	8d 91       	ld	r24, X+
     cdc:	9c 91       	ld	r25, X
     cde:	12 97       	sbiw	r26, 0x02	; 2
     ce0:	e8 17       	cp	r30, r24
     ce2:	f9 07       	cpc	r31, r25
     ce4:	31 f4       	brne	.+12     	; 0xcf2 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     ce6:	86 81       	ldd	r24, Z+6	; 0x06
     ce8:	97 81       	ldd	r25, Z+7	; 0x07
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	9c 93       	st	X, r25
     cee:	8e 93       	st	-X, r24
     cf0:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     cf2:	13 86       	std	Z+11, r1	; 0x0b
     cf4:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     cf6:	8c 91       	ld	r24, X
     cf8:	81 50       	subi	r24, 0x01	; 1
     cfa:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     cfc:	8c 91       	ld	r24, X
}
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	08 95       	ret

00000d04 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     d04:	a8 95       	wdr
     d06:	90 ec       	ldi	r25, 0xC0	; 192
     d08:	88 e1       	ldi	r24, 0x18	; 24
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	a8 95       	wdr
     d10:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     d1a:	08 95       	ret

00000d1c <pxPortInitialiseStack>:
     d1c:	fc 01       	movw	r30, r24
     d1e:	60 83       	st	Z, r22
     d20:	31 97       	sbiw	r30, 0x01	; 1
     d22:	70 83       	st	Z, r23
     d24:	31 97       	sbiw	r30, 0x01	; 1
     d26:	10 82       	st	Z, r1
     d28:	31 97       	sbiw	r30, 0x01	; 1
     d2a:	10 82       	st	Z, r1
     d2c:	31 97       	sbiw	r30, 0x01	; 1
     d2e:	20 e8       	ldi	r18, 0x80	; 128
     d30:	20 83       	st	Z, r18
     d32:	31 97       	sbiw	r30, 0x01	; 1
     d34:	10 82       	st	Z, r1
     d36:	31 97       	sbiw	r30, 0x01	; 1
     d38:	10 82       	st	Z, r1
     d3a:	31 97       	sbiw	r30, 0x01	; 1
     d3c:	10 82       	st	Z, r1
     d3e:	77 97       	sbiw	r30, 0x17	; 23
     d40:	40 83       	st	Z, r20
     d42:	31 97       	sbiw	r30, 0x01	; 1
     d44:	50 83       	st	Z, r21
     d46:	86 97       	sbiw	r24, 0x26	; 38
     d48:	08 95       	ret

00000d4a <xPortStartScheduler>:
     d4a:	dc df       	rcall	.-72     	; 0xd04 <prvSetupTimerInterrupt>
     d4c:	a0 91 ef 15 	lds	r26, 0x15EF	; 0x8015ef <pxCurrentTCB>
     d50:	b0 91 f0 15 	lds	r27, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
     d54:	cd 91       	ld	r28, X+
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	dd 91       	ld	r29, X+
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	ff 91       	pop	r31
     d5e:	ef 91       	pop	r30
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	bf 91       	pop	r27
     d66:	af 91       	pop	r26
     d68:	9f 91       	pop	r25
     d6a:	8f 91       	pop	r24
     d6c:	7f 91       	pop	r23
     d6e:	6f 91       	pop	r22
     d70:	5f 91       	pop	r21
     d72:	4f 91       	pop	r20
     d74:	3f 91       	pop	r19
     d76:	2f 91       	pop	r18
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	ff 90       	pop	r15
     d7e:	ef 90       	pop	r14
     d80:	df 90       	pop	r13
     d82:	cf 90       	pop	r12
     d84:	bf 90       	pop	r11
     d86:	af 90       	pop	r10
     d88:	9f 90       	pop	r9
     d8a:	8f 90       	pop	r8
     d8c:	7f 90       	pop	r7
     d8e:	6f 90       	pop	r6
     d90:	5f 90       	pop	r5
     d92:	4f 90       	pop	r4
     d94:	3f 90       	pop	r3
     d96:	2f 90       	pop	r2
     d98:	1f 90       	pop	r1
     d9a:	0f 90       	pop	r0
     d9c:	0c be       	out	0x3c, r0	; 60
     d9e:	0f 90       	pop	r0
     da0:	0b be       	out	0x3b, r0	; 59
     da2:	0f 90       	pop	r0
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	0f 90       	pop	r0
     da8:	08 95       	ret
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	08 95       	ret

00000dae <vPortYield>:
     dae:	0f 92       	push	r0
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	0f 92       	push	r0
     db6:	0b b6       	in	r0, 0x3b	; 59
     db8:	0f 92       	push	r0
     dba:	0c b6       	in	r0, 0x3c	; 60
     dbc:	0f 92       	push	r0
     dbe:	1f 92       	push	r1
     dc0:	11 24       	eor	r1, r1
     dc2:	2f 92       	push	r2
     dc4:	3f 92       	push	r3
     dc6:	4f 92       	push	r4
     dc8:	5f 92       	push	r5
     dca:	6f 92       	push	r6
     dcc:	7f 92       	push	r7
     dce:	8f 92       	push	r8
     dd0:	9f 92       	push	r9
     dd2:	af 92       	push	r10
     dd4:	bf 92       	push	r11
     dd6:	cf 92       	push	r12
     dd8:	df 92       	push	r13
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	2f 93       	push	r18
     de4:	3f 93       	push	r19
     de6:	4f 93       	push	r20
     de8:	5f 93       	push	r21
     dea:	6f 93       	push	r22
     dec:	7f 93       	push	r23
     dee:	8f 93       	push	r24
     df0:	9f 93       	push	r25
     df2:	af 93       	push	r26
     df4:	bf 93       	push	r27
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	ef 93       	push	r30
     dfc:	ff 93       	push	r31
     dfe:	a0 91 ef 15 	lds	r26, 0x15EF	; 0x8015ef <pxCurrentTCB>
     e02:	b0 91 f0 15 	lds	r27, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
     e06:	0d b6       	in	r0, 0x3d	; 61
     e08:	0d 92       	st	X+, r0
     e0a:	0e b6       	in	r0, 0x3e	; 62
     e0c:	0d 92       	st	X+, r0
     e0e:	0e 94 9f 13 	call	0x273e	; 0x273e <vTaskSwitchContext>
     e12:	a0 91 ef 15 	lds	r26, 0x15EF	; 0x8015ef <pxCurrentTCB>
     e16:	b0 91 f0 15 	lds	r27, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
     e1a:	cd 91       	ld	r28, X+
     e1c:	cd bf       	out	0x3d, r28	; 61
     e1e:	dd 91       	ld	r29, X+
     e20:	de bf       	out	0x3e, r29	; 62
     e22:	ff 91       	pop	r31
     e24:	ef 91       	pop	r30
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	bf 91       	pop	r27
     e2c:	af 91       	pop	r26
     e2e:	9f 91       	pop	r25
     e30:	8f 91       	pop	r24
     e32:	7f 91       	pop	r23
     e34:	6f 91       	pop	r22
     e36:	5f 91       	pop	r21
     e38:	4f 91       	pop	r20
     e3a:	3f 91       	pop	r19
     e3c:	2f 91       	pop	r18
     e3e:	1f 91       	pop	r17
     e40:	0f 91       	pop	r16
     e42:	ff 90       	pop	r15
     e44:	ef 90       	pop	r14
     e46:	df 90       	pop	r13
     e48:	cf 90       	pop	r12
     e4a:	bf 90       	pop	r11
     e4c:	af 90       	pop	r10
     e4e:	9f 90       	pop	r9
     e50:	8f 90       	pop	r8
     e52:	7f 90       	pop	r7
     e54:	6f 90       	pop	r6
     e56:	5f 90       	pop	r5
     e58:	4f 90       	pop	r4
     e5a:	3f 90       	pop	r3
     e5c:	2f 90       	pop	r2
     e5e:	1f 90       	pop	r1
     e60:	0f 90       	pop	r0
     e62:	0c be       	out	0x3c, r0	; 60
     e64:	0f 90       	pop	r0
     e66:	0b be       	out	0x3b, r0	; 59
     e68:	0f 90       	pop	r0
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	0f 90       	pop	r0
     e6e:	08 95       	ret

00000e70 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     e70:	0f 92       	push	r0
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	0f 92       	push	r0
     e78:	0b b6       	in	r0, 0x3b	; 59
     e7a:	0f 92       	push	r0
     e7c:	0c b6       	in	r0, 0x3c	; 60
     e7e:	0f 92       	push	r0
     e80:	1f 92       	push	r1
     e82:	11 24       	eor	r1, r1
     e84:	2f 92       	push	r2
     e86:	3f 92       	push	r3
     e88:	4f 92       	push	r4
     e8a:	5f 92       	push	r5
     e8c:	6f 92       	push	r6
     e8e:	7f 92       	push	r7
     e90:	8f 92       	push	r8
     e92:	9f 92       	push	r9
     e94:	af 92       	push	r10
     e96:	bf 92       	push	r11
     e98:	cf 92       	push	r12
     e9a:	df 92       	push	r13
     e9c:	ef 92       	push	r14
     e9e:	ff 92       	push	r15
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	2f 93       	push	r18
     ea6:	3f 93       	push	r19
     ea8:	4f 93       	push	r20
     eaa:	5f 93       	push	r21
     eac:	6f 93       	push	r22
     eae:	7f 93       	push	r23
     eb0:	8f 93       	push	r24
     eb2:	9f 93       	push	r25
     eb4:	af 93       	push	r26
     eb6:	bf 93       	push	r27
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	ef 93       	push	r30
     ebe:	ff 93       	push	r31
     ec0:	a0 91 ef 15 	lds	r26, 0x15EF	; 0x8015ef <pxCurrentTCB>
     ec4:	b0 91 f0 15 	lds	r27, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
     ec8:	0d b6       	in	r0, 0x3d	; 61
     eca:	0d 92       	st	X+, r0
     ecc:	0e b6       	in	r0, 0x3e	; 62
     ece:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     ed0:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     ed2:	0e 94 17 11 	call	0x222e	; 0x222e <xTaskIncrementTick>
     ed6:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     ed8:	0e 94 9f 13 	call	0x273e	; 0x273e <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     edc:	a0 91 ef 15 	lds	r26, 0x15EF	; 0x8015ef <pxCurrentTCB>
     ee0:	b0 91 f0 15 	lds	r27, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
     ee4:	cd 91       	ld	r28, X+
     ee6:	cd bf       	out	0x3d, r28	; 61
     ee8:	dd 91       	ld	r29, X+
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	ff 91       	pop	r31
     eee:	ef 91       	pop	r30
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	bf 91       	pop	r27
     ef6:	af 91       	pop	r26
     ef8:	9f 91       	pop	r25
     efa:	8f 91       	pop	r24
     efc:	7f 91       	pop	r23
     efe:	6f 91       	pop	r22
     f00:	5f 91       	pop	r21
     f02:	4f 91       	pop	r20
     f04:	3f 91       	pop	r19
     f06:	2f 91       	pop	r18
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	ff 90       	pop	r15
     f0e:	ef 90       	pop	r14
     f10:	df 90       	pop	r13
     f12:	cf 90       	pop	r12
     f14:	bf 90       	pop	r11
     f16:	af 90       	pop	r10
     f18:	9f 90       	pop	r9
     f1a:	8f 90       	pop	r8
     f1c:	7f 90       	pop	r7
     f1e:	6f 90       	pop	r6
     f20:	5f 90       	pop	r5
     f22:	4f 90       	pop	r4
     f24:	3f 90       	pop	r3
     f26:	2f 90       	pop	r2
     f28:	1f 90       	pop	r1
     f2a:	0f 90       	pop	r0
     f2c:	0c be       	out	0x3c, r0	; 60
     f2e:	0f 90       	pop	r0
     f30:	0b be       	out	0x3b, r0	; 59
     f32:	0f 90       	pop	r0
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     f38:	08 95       	ret

00000f3a <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     f3a:	9a df       	rcall	.-204    	; 0xe70 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     f3c:	18 95       	reti

00000f3e <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     f3e:	dc 01       	movw	r26, r24
     f40:	53 96       	adiw	r26, 0x13	; 19
     f42:	2c 91       	ld	r18, X
     f44:	53 97       	sbiw	r26, 0x13	; 19
     f46:	22 23       	and	r18, r18
     f48:	41 f0       	breq	.+16     	; 0xf5a <prvGetDisinheritPriorityAfterTimeout+0x1c>
     f4a:	5a 96       	adiw	r26, 0x1a	; 26
     f4c:	ed 91       	ld	r30, X+
     f4e:	fc 91       	ld	r31, X
     f50:	5b 97       	sbiw	r26, 0x1b	; 27
     f52:	90 81       	ld	r25, Z
     f54:	8a e0       	ldi	r24, 0x0A	; 10
     f56:	89 1b       	sub	r24, r25
     f58:	08 95       	ret
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	08 95       	ret

00000f5e <prvIsQueueEmpty>:
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	0f 92       	push	r0
     f64:	fc 01       	movw	r30, r24
     f66:	86 8d       	ldd	r24, Z+30	; 0x1e
     f68:	81 11       	cpse	r24, r1
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <prvIsQueueEmpty+0x12>
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	01 c0       	rjmp	.+2      	; 0xf72 <prvIsQueueEmpty+0x14>
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	0f 90       	pop	r0
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	08 95       	ret

00000f78 <prvIsQueueFull>:
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	0f 92       	push	r0
     f7e:	fc 01       	movw	r30, r24
     f80:	26 8d       	ldd	r18, Z+30	; 0x1e
     f82:	87 8d       	ldd	r24, Z+31	; 0x1f
     f84:	28 13       	cpse	r18, r24
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <prvIsQueueFull+0x14>
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	01 c0       	rjmp	.+2      	; 0xf8e <prvIsQueueFull+0x16>
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	0f 90       	pop	r0
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	08 95       	ret

00000f94 <prvCopyDataToQueue>:
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	ec 01       	movw	r28, r24
     f9e:	04 2f       	mov	r16, r20
     fa0:	1e 8d       	ldd	r17, Y+30	; 0x1e
     fa2:	48 a1       	ldd	r20, Y+32	; 0x20
     fa4:	41 11       	cpse	r20, r1
     fa6:	0c c0       	rjmp	.+24     	; 0xfc0 <prvCopyDataToQueue+0x2c>
     fa8:	88 81       	ld	r24, Y
     faa:	99 81       	ldd	r25, Y+1	; 0x01
     fac:	89 2b       	or	r24, r25
     fae:	09 f0       	breq	.+2      	; 0xfb2 <prvCopyDataToQueue+0x1e>
     fb0:	42 c0       	rjmp	.+132    	; 0x1036 <__EEPROM_REGION_LENGTH__+0x36>
     fb2:	8c 81       	ldd	r24, Y+4	; 0x04
     fb4:	9d 81       	ldd	r25, Y+5	; 0x05
     fb6:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <xTaskPriorityDisinherit>
     fba:	1d 82       	std	Y+5, r1	; 0x05
     fbc:	1c 82       	std	Y+4, r1	; 0x04
     fbe:	42 c0       	rjmp	.+132    	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
     fc0:	01 11       	cpse	r16, r1
     fc2:	17 c0       	rjmp	.+46     	; 0xff2 <prvCopyDataToQueue+0x5e>
     fc4:	50 e0       	ldi	r21, 0x00	; 0
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	9b 81       	ldd	r25, Y+3	; 0x03
     fca:	0e 94 d6 35 	call	0x6bac	; 0x6bac <memcpy>
     fce:	28 a1       	ldd	r18, Y+32	; 0x20
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	9b 81       	ldd	r25, Y+3	; 0x03
     fd4:	82 0f       	add	r24, r18
     fd6:	91 1d       	adc	r25, r1
     fd8:	9b 83       	std	Y+3, r25	; 0x03
     fda:	8a 83       	std	Y+2, r24	; 0x02
     fdc:	2c 81       	ldd	r18, Y+4	; 0x04
     fde:	3d 81       	ldd	r19, Y+5	; 0x05
     fe0:	82 17       	cp	r24, r18
     fe2:	93 07       	cpc	r25, r19
     fe4:	50 f1       	brcs	.+84     	; 0x103a <__EEPROM_REGION_LENGTH__+0x3a>
     fe6:	88 81       	ld	r24, Y
     fe8:	99 81       	ldd	r25, Y+1	; 0x01
     fea:	9b 83       	std	Y+3, r25	; 0x03
     fec:	8a 83       	std	Y+2, r24	; 0x02
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	29 c0       	rjmp	.+82     	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
     ff2:	50 e0       	ldi	r21, 0x00	; 0
     ff4:	8e 81       	ldd	r24, Y+6	; 0x06
     ff6:	9f 81       	ldd	r25, Y+7	; 0x07
     ff8:	0e 94 d6 35 	call	0x6bac	; 0x6bac <memcpy>
     ffc:	88 a1       	ldd	r24, Y+32	; 0x20
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	91 95       	neg	r25
    1002:	81 95       	neg	r24
    1004:	91 09       	sbc	r25, r1
    1006:	2e 81       	ldd	r18, Y+6	; 0x06
    1008:	3f 81       	ldd	r19, Y+7	; 0x07
    100a:	28 0f       	add	r18, r24
    100c:	39 1f       	adc	r19, r25
    100e:	3f 83       	std	Y+7, r19	; 0x07
    1010:	2e 83       	std	Y+6, r18	; 0x06
    1012:	48 81       	ld	r20, Y
    1014:	59 81       	ldd	r21, Y+1	; 0x01
    1016:	24 17       	cp	r18, r20
    1018:	35 07       	cpc	r19, r21
    101a:	30 f4       	brcc	.+12     	; 0x1028 <__EEPROM_REGION_LENGTH__+0x28>
    101c:	2c 81       	ldd	r18, Y+4	; 0x04
    101e:	3d 81       	ldd	r19, Y+5	; 0x05
    1020:	82 0f       	add	r24, r18
    1022:	93 1f       	adc	r25, r19
    1024:	9f 83       	std	Y+7, r25	; 0x07
    1026:	8e 83       	std	Y+6, r24	; 0x06
    1028:	02 30       	cpi	r16, 0x02	; 2
    102a:	49 f4       	brne	.+18     	; 0x103e <__EEPROM_REGION_LENGTH__+0x3e>
    102c:	11 23       	and	r17, r17
    102e:	49 f0       	breq	.+18     	; 0x1042 <__EEPROM_REGION_LENGTH__+0x42>
    1030:	11 50       	subi	r17, 0x01	; 1
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	07 c0       	rjmp	.+14     	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	05 c0       	rjmp	.+10     	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	03 c0       	rjmp	.+6      	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	01 c0       	rjmp	.+2      	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	1f 5f       	subi	r17, 0xFF	; 255
    1046:	1e 8f       	std	Y+30, r17	; 0x1e
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	08 95       	ret

00001052 <prvCopyDataFromQueue>:
    1052:	fc 01       	movw	r30, r24
    1054:	40 a1       	ldd	r20, Z+32	; 0x20
    1056:	44 23       	and	r20, r20
    1058:	a9 f0       	breq	.+42     	; 0x1084 <prvCopyDataFromQueue+0x32>
    105a:	50 e0       	ldi	r21, 0x00	; 0
    105c:	26 81       	ldd	r18, Z+6	; 0x06
    105e:	37 81       	ldd	r19, Z+7	; 0x07
    1060:	24 0f       	add	r18, r20
    1062:	35 1f       	adc	r19, r21
    1064:	37 83       	std	Z+7, r19	; 0x07
    1066:	26 83       	std	Z+6, r18	; 0x06
    1068:	84 81       	ldd	r24, Z+4	; 0x04
    106a:	95 81       	ldd	r25, Z+5	; 0x05
    106c:	28 17       	cp	r18, r24
    106e:	39 07       	cpc	r19, r25
    1070:	20 f0       	brcs	.+8      	; 0x107a <prvCopyDataFromQueue+0x28>
    1072:	80 81       	ld	r24, Z
    1074:	91 81       	ldd	r25, Z+1	; 0x01
    1076:	97 83       	std	Z+7, r25	; 0x07
    1078:	86 83       	std	Z+6, r24	; 0x06
    107a:	cb 01       	movw	r24, r22
    107c:	66 81       	ldd	r22, Z+6	; 0x06
    107e:	77 81       	ldd	r23, Z+7	; 0x07
    1080:	0c 94 d6 35 	jmp	0x6bac	; 0x6bac <memcpy>
    1084:	08 95       	ret

00001086 <prvUnlockQueue>:
    1086:	1f 93       	push	r17
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	ec 01       	movw	r28, r24
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	0f 92       	push	r0
    1094:	1a a1       	ldd	r17, Y+34	; 0x22
    1096:	0b c0       	rjmp	.+22     	; 0x10ae <prvUnlockQueue+0x28>
    1098:	8b 89       	ldd	r24, Y+19	; 0x13
    109a:	88 23       	and	r24, r24
    109c:	51 f0       	breq	.+20     	; 0x10b2 <prvUnlockQueue+0x2c>
    109e:	ce 01       	movw	r24, r28
    10a0:	43 96       	adiw	r24, 0x13	; 19
    10a2:	0e 94 a7 14 	call	0x294e	; 0x294e <xTaskRemoveFromEventList>
    10a6:	81 11       	cpse	r24, r1
    10a8:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <vTaskMissedYield>
    10ac:	11 50       	subi	r17, 0x01	; 1
    10ae:	11 16       	cp	r1, r17
    10b0:	9c f3       	brlt	.-26     	; 0x1098 <prvUnlockQueue+0x12>
    10b2:	8f ef       	ldi	r24, 0xFF	; 255
    10b4:	8a a3       	std	Y+34, r24	; 0x22
    10b6:	0f 90       	pop	r0
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	0f 92       	push	r0
    10c0:	19 a1       	ldd	r17, Y+33	; 0x21
    10c2:	0b c0       	rjmp	.+22     	; 0x10da <prvUnlockQueue+0x54>
    10c4:	88 85       	ldd	r24, Y+8	; 0x08
    10c6:	88 23       	and	r24, r24
    10c8:	51 f0       	breq	.+20     	; 0x10de <prvUnlockQueue+0x58>
    10ca:	ce 01       	movw	r24, r28
    10cc:	08 96       	adiw	r24, 0x08	; 8
    10ce:	0e 94 a7 14 	call	0x294e	; 0x294e <xTaskRemoveFromEventList>
    10d2:	81 11       	cpse	r24, r1
    10d4:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <vTaskMissedYield>
    10d8:	11 50       	subi	r17, 0x01	; 1
    10da:	11 16       	cp	r1, r17
    10dc:	9c f3       	brlt	.-26     	; 0x10c4 <prvUnlockQueue+0x3e>
    10de:	8f ef       	ldi	r24, 0xFF	; 255
    10e0:	89 a3       	std	Y+33, r24	; 0x21
    10e2:	0f 90       	pop	r0
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	08 95       	ret

000010ee <xQueueGenericReset>:
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	ec 01       	movw	r28, r24
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	0f 92       	push	r0
    10fa:	e8 81       	ld	r30, Y
    10fc:	f9 81       	ldd	r31, Y+1	; 0x01
    10fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1100:	28 a1       	ldd	r18, Y+32	; 0x20
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	82 9f       	mul	r24, r18
    1108:	a0 01       	movw	r20, r0
    110a:	83 9f       	mul	r24, r19
    110c:	50 0d       	add	r21, r0
    110e:	92 9f       	mul	r25, r18
    1110:	50 0d       	add	r21, r0
    1112:	11 24       	eor	r1, r1
    1114:	4e 0f       	add	r20, r30
    1116:	5f 1f       	adc	r21, r31
    1118:	5d 83       	std	Y+5, r21	; 0x05
    111a:	4c 83       	std	Y+4, r20	; 0x04
    111c:	1e 8e       	std	Y+30, r1	; 0x1e
    111e:	fb 83       	std	Y+3, r31	; 0x03
    1120:	ea 83       	std	Y+2, r30	; 0x02
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	28 9f       	mul	r18, r24
    1126:	a0 01       	movw	r20, r0
    1128:	29 9f       	mul	r18, r25
    112a:	50 0d       	add	r21, r0
    112c:	38 9f       	mul	r19, r24
    112e:	50 0d       	add	r21, r0
    1130:	11 24       	eor	r1, r1
    1132:	cf 01       	movw	r24, r30
    1134:	84 0f       	add	r24, r20
    1136:	95 1f       	adc	r25, r21
    1138:	9f 83       	std	Y+7, r25	; 0x07
    113a:	8e 83       	std	Y+6, r24	; 0x06
    113c:	8f ef       	ldi	r24, 0xFF	; 255
    113e:	89 a3       	std	Y+33, r24	; 0x21
    1140:	8a a3       	std	Y+34, r24	; 0x22
    1142:	61 11       	cpse	r22, r1
    1144:	0b c0       	rjmp	.+22     	; 0x115c <xQueueGenericReset+0x6e>
    1146:	88 85       	ldd	r24, Y+8	; 0x08
    1148:	88 23       	and	r24, r24
    114a:	71 f0       	breq	.+28     	; 0x1168 <xQueueGenericReset+0x7a>
    114c:	ce 01       	movw	r24, r28
    114e:	08 96       	adiw	r24, 0x08	; 8
    1150:	0e 94 a7 14 	call	0x294e	; 0x294e <xTaskRemoveFromEventList>
    1154:	88 23       	and	r24, r24
    1156:	41 f0       	breq	.+16     	; 0x1168 <xQueueGenericReset+0x7a>
    1158:	2a de       	rcall	.-940    	; 0xdae <vPortYield>
    115a:	06 c0       	rjmp	.+12     	; 0x1168 <xQueueGenericReset+0x7a>
    115c:	ce 01       	movw	r24, r28
    115e:	08 96       	adiw	r24, 0x08	; 8
    1160:	58 dd       	rcall	.-1360   	; 0xc12 <vListInitialise>
    1162:	ce 01       	movw	r24, r28
    1164:	43 96       	adiw	r24, 0x13	; 19
    1166:	55 dd       	rcall	.-1366   	; 0xc12 <vListInitialise>
    1168:	0f 90       	pop	r0
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	08 95       	ret

00001174 <prvInitialiseNewQueue>:
    1174:	0f 93       	push	r16
    1176:	1f 93       	push	r17
    1178:	f8 01       	movw	r30, r16
    117a:	61 11       	cpse	r22, r1
    117c:	03 c0       	rjmp	.+6      	; 0x1184 <prvInitialiseNewQueue+0x10>
    117e:	11 83       	std	Z+1, r17	; 0x01
    1180:	00 83       	st	Z, r16
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <prvInitialiseNewQueue+0x14>
    1184:	51 83       	std	Z+1, r21	; 0x01
    1186:	40 83       	st	Z, r20
    1188:	87 8f       	std	Z+31, r24	; 0x1f
    118a:	60 a3       	std	Z+32, r22	; 0x20
    118c:	61 e0       	ldi	r22, 0x01	; 1
    118e:	cf 01       	movw	r24, r30
    1190:	ae df       	rcall	.-164    	; 0x10ee <xQueueGenericReset>
    1192:	1f 91       	pop	r17
    1194:	0f 91       	pop	r16
    1196:	08 95       	ret

00001198 <xQueueGenericCreate>:
    1198:	df 92       	push	r13
    119a:	ef 92       	push	r14
    119c:	ff 92       	push	r15
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	f8 2e       	mov	r15, r24
    11a8:	e6 2e       	mov	r14, r22
    11aa:	d4 2e       	mov	r13, r20
    11ac:	86 9f       	mul	r24, r22
    11ae:	c0 01       	movw	r24, r0
    11b0:	11 24       	eor	r1, r1
    11b2:	83 96       	adiw	r24, 0x23	; 35
    11b4:	48 dc       	rcall	.-1904   	; 0xa46 <pvPortMalloc>
    11b6:	ec 01       	movw	r28, r24
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	41 f0       	breq	.+16     	; 0x11cc <xQueueGenericCreate+0x34>
    11bc:	8c 01       	movw	r16, r24
    11be:	2d 2d       	mov	r18, r13
    11c0:	ac 01       	movw	r20, r24
    11c2:	4d 5d       	subi	r20, 0xDD	; 221
    11c4:	5f 4f       	sbci	r21, 0xFF	; 255
    11c6:	6e 2d       	mov	r22, r14
    11c8:	8f 2d       	mov	r24, r15
    11ca:	d4 df       	rcall	.-88     	; 0x1174 <prvInitialiseNewQueue>
    11cc:	ce 01       	movw	r24, r28
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	1f 91       	pop	r17
    11d4:	0f 91       	pop	r16
    11d6:	ff 90       	pop	r15
    11d8:	ef 90       	pop	r14
    11da:	df 90       	pop	r13
    11dc:	08 95       	ret

000011de <xQueueGenericSend>:
    11de:	cf 92       	push	r12
    11e0:	df 92       	push	r13
    11e2:	ef 92       	push	r14
    11e4:	ff 92       	push	r15
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	29 97       	sbiw	r28, 0x09	; 9
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	cd bf       	out	0x3d, r28	; 61
    11fe:	7c 01       	movw	r14, r24
    1200:	6b 01       	movw	r12, r22
    1202:	2e 83       	std	Y+6, r18	; 0x06
    1204:	3f 83       	std	Y+7, r19	; 0x07
    1206:	48 87       	std	Y+8, r20	; 0x08
    1208:	59 87       	std	Y+9, r21	; 0x09
    120a:	10 e0       	ldi	r17, 0x00	; 0
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	0f 92       	push	r0
    1212:	f7 01       	movw	r30, r14
    1214:	96 8d       	ldd	r25, Z+30	; 0x1e
    1216:	87 8d       	ldd	r24, Z+31	; 0x1f
    1218:	98 17       	cp	r25, r24
    121a:	10 f0       	brcs	.+4      	; 0x1220 <xQueueGenericSend+0x42>
    121c:	02 30       	cpi	r16, 0x02	; 2
    121e:	b1 f4       	brne	.+44     	; 0x124c <xQueueGenericSend+0x6e>
    1220:	40 2f       	mov	r20, r16
    1222:	b6 01       	movw	r22, r12
    1224:	c7 01       	movw	r24, r14
    1226:	b6 de       	rcall	.-660    	; 0xf94 <prvCopyDataToQueue>
    1228:	f7 01       	movw	r30, r14
    122a:	93 89       	ldd	r25, Z+19	; 0x13
    122c:	99 23       	and	r25, r25
    122e:	41 f0       	breq	.+16     	; 0x1240 <xQueueGenericSend+0x62>
    1230:	c7 01       	movw	r24, r14
    1232:	43 96       	adiw	r24, 0x13	; 19
    1234:	0e 94 a7 14 	call	0x294e	; 0x294e <xTaskRemoveFromEventList>
    1238:	88 23       	and	r24, r24
    123a:	21 f0       	breq	.+8      	; 0x1244 <xQueueGenericSend+0x66>
    123c:	b8 dd       	rcall	.-1168   	; 0xdae <vPortYield>
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <xQueueGenericSend+0x66>
    1240:	81 11       	cpse	r24, r1
    1242:	b5 dd       	rcall	.-1174   	; 0xdae <vPortYield>
    1244:	0f 90       	pop	r0
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	4c c0       	rjmp	.+152    	; 0x12e4 <xQueueGenericSend+0x106>
    124c:	8e 81       	ldd	r24, Y+6	; 0x06
    124e:	9f 81       	ldd	r25, Y+7	; 0x07
    1250:	a8 85       	ldd	r26, Y+8	; 0x08
    1252:	b9 85       	ldd	r27, Y+9	; 0x09
    1254:	89 2b       	or	r24, r25
    1256:	8a 2b       	or	r24, r26
    1258:	8b 2b       	or	r24, r27
    125a:	21 f4       	brne	.+8      	; 0x1264 <xQueueGenericSend+0x86>
    125c:	0f 90       	pop	r0
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	40 c0       	rjmp	.+128    	; 0x12e4 <xQueueGenericSend+0x106>
    1264:	11 11       	cpse	r17, r1
    1266:	05 c0       	rjmp	.+10     	; 0x1272 <xQueueGenericSend+0x94>
    1268:	ce 01       	movw	r24, r28
    126a:	01 96       	adiw	r24, 0x01	; 1
    126c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <vTaskInternalSetTimeOutState>
    1270:	11 e0       	ldi	r17, 0x01	; 1
    1272:	0f 90       	pop	r0
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	c7 d7       	rcall	.+3982   	; 0x2206 <vTaskSuspendAll>
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	f8 94       	cli
    127c:	0f 92       	push	r0
    127e:	f7 01       	movw	r30, r14
    1280:	81 a1       	ldd	r24, Z+33	; 0x21
    1282:	8f 3f       	cpi	r24, 0xFF	; 255
    1284:	09 f4       	brne	.+2      	; 0x1288 <xQueueGenericSend+0xaa>
    1286:	11 a2       	std	Z+33, r1	; 0x21
    1288:	f7 01       	movw	r30, r14
    128a:	82 a1       	ldd	r24, Z+34	; 0x22
    128c:	8f 3f       	cpi	r24, 0xFF	; 255
    128e:	09 f4       	brne	.+2      	; 0x1292 <xQueueGenericSend+0xb4>
    1290:	12 a2       	std	Z+34, r1	; 0x22
    1292:	0f 90       	pop	r0
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	be 01       	movw	r22, r28
    1298:	6a 5f       	subi	r22, 0xFA	; 250
    129a:	7f 4f       	sbci	r23, 0xFF	; 255
    129c:	ce 01       	movw	r24, r28
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <xTaskCheckForTimeOut>
    12a4:	81 11       	cpse	r24, r1
    12a6:	19 c0       	rjmp	.+50     	; 0x12da <xQueueGenericSend+0xfc>
    12a8:	c7 01       	movw	r24, r14
    12aa:	66 de       	rcall	.-820    	; 0xf78 <prvIsQueueFull>
    12ac:	88 23       	and	r24, r24
    12ae:	81 f0       	breq	.+32     	; 0x12d0 <xQueueGenericSend+0xf2>
    12b0:	4e 81       	ldd	r20, Y+6	; 0x06
    12b2:	5f 81       	ldd	r21, Y+7	; 0x07
    12b4:	68 85       	ldd	r22, Y+8	; 0x08
    12b6:	79 85       	ldd	r23, Y+9	; 0x09
    12b8:	c7 01       	movw	r24, r14
    12ba:	08 96       	adiw	r24, 0x08	; 8
    12bc:	0e 94 04 14 	call	0x2808	; 0x2808 <vTaskPlaceOnEventList>
    12c0:	c7 01       	movw	r24, r14
    12c2:	e1 de       	rcall	.-574    	; 0x1086 <prvUnlockQueue>
    12c4:	0e 94 43 12 	call	0x2486	; 0x2486 <xTaskResumeAll>
    12c8:	81 11       	cpse	r24, r1
    12ca:	a0 cf       	rjmp	.-192    	; 0x120c <xQueueGenericSend+0x2e>
    12cc:	70 dd       	rcall	.-1312   	; 0xdae <vPortYield>
    12ce:	9e cf       	rjmp	.-196    	; 0x120c <xQueueGenericSend+0x2e>
    12d0:	c7 01       	movw	r24, r14
    12d2:	d9 de       	rcall	.-590    	; 0x1086 <prvUnlockQueue>
    12d4:	0e 94 43 12 	call	0x2486	; 0x2486 <xTaskResumeAll>
    12d8:	99 cf       	rjmp	.-206    	; 0x120c <xQueueGenericSend+0x2e>
    12da:	c7 01       	movw	r24, r14
    12dc:	d4 de       	rcall	.-600    	; 0x1086 <prvUnlockQueue>
    12de:	0e 94 43 12 	call	0x2486	; 0x2486 <xTaskResumeAll>
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	29 96       	adiw	r28, 0x09	; 9
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	cd bf       	out	0x3d, r28	; 61
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	ff 90       	pop	r15
    12fa:	ef 90       	pop	r14
    12fc:	df 90       	pop	r13
    12fe:	cf 90       	pop	r12
    1300:	08 95       	ret

00001302 <prvInitialiseMutex>:
    1302:	0f 93       	push	r16
    1304:	00 97       	sbiw	r24, 0x00	; 0
    1306:	69 f0       	breq	.+26     	; 0x1322 <prvInitialiseMutex+0x20>
    1308:	fc 01       	movw	r30, r24
    130a:	15 82       	std	Z+5, r1	; 0x05
    130c:	14 82       	std	Z+4, r1	; 0x04
    130e:	11 82       	std	Z+1, r1	; 0x01
    1310:	10 82       	st	Z, r1
    1312:	16 82       	std	Z+6, r1	; 0x06
    1314:	00 e0       	ldi	r16, 0x00	; 0
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	a9 01       	movw	r20, r18
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	5e df       	rcall	.-324    	; 0x11de <xQueueGenericSend>
    1322:	0f 91       	pop	r16
    1324:	08 95       	ret

00001326 <xQueueCreateMutex>:
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	48 2f       	mov	r20, r24
    132c:	60 e0       	ldi	r22, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	33 df       	rcall	.-410    	; 0x1198 <xQueueGenericCreate>
    1332:	ec 01       	movw	r28, r24
    1334:	e6 df       	rcall	.-52     	; 0x1302 <prvInitialiseMutex>
    1336:	ce 01       	movw	r24, r28
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	08 95       	ret

0000133e <xQueueGenericSendFromISR>:
    133e:	ef 92       	push	r14
    1340:	ff 92       	push	r15
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	8a 01       	movw	r16, r20
    134c:	fc 01       	movw	r30, r24
    134e:	56 8d       	ldd	r21, Z+30	; 0x1e
    1350:	37 8d       	ldd	r19, Z+31	; 0x1f
    1352:	53 17       	cp	r21, r19
    1354:	10 f0       	brcs	.+4      	; 0x135a <xQueueGenericSendFromISR+0x1c>
    1356:	22 30       	cpi	r18, 0x02	; 2
    1358:	f9 f4       	brne	.+62     	; 0x1398 <xQueueGenericSendFromISR+0x5a>
    135a:	42 2f       	mov	r20, r18
    135c:	78 01       	movw	r14, r16
    135e:	ec 01       	movw	r28, r24
    1360:	1a a1       	ldd	r17, Y+34	; 0x22
    1362:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1364:	ce 01       	movw	r24, r28
    1366:	16 de       	rcall	.-980    	; 0xf94 <prvCopyDataToQueue>
    1368:	1f 3f       	cpi	r17, 0xFF	; 255
    136a:	81 f4       	brne	.+32     	; 0x138c <xQueueGenericSendFromISR+0x4e>
    136c:	8b 89       	ldd	r24, Y+19	; 0x13
    136e:	88 23       	and	r24, r24
    1370:	a9 f0       	breq	.+42     	; 0x139c <xQueueGenericSendFromISR+0x5e>
    1372:	ce 01       	movw	r24, r28
    1374:	43 96       	adiw	r24, 0x13	; 19
    1376:	0e 94 a7 14 	call	0x294e	; 0x294e <xTaskRemoveFromEventList>
    137a:	88 23       	and	r24, r24
    137c:	89 f0       	breq	.+34     	; 0x13a0 <xQueueGenericSendFromISR+0x62>
    137e:	e1 14       	cp	r14, r1
    1380:	f1 04       	cpc	r15, r1
    1382:	81 f0       	breq	.+32     	; 0x13a4 <xQueueGenericSendFromISR+0x66>
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	f7 01       	movw	r30, r14
    1388:	80 83       	st	Z, r24
    138a:	0d c0       	rjmp	.+26     	; 0x13a6 <xQueueGenericSendFromISR+0x68>
    138c:	ff 24       	eor	r15, r15
    138e:	f3 94       	inc	r15
    1390:	f1 0e       	add	r15, r17
    1392:	fa a2       	std	Y+34, r15	; 0x22
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	07 c0       	rjmp	.+14     	; 0x13a6 <xQueueGenericSendFromISR+0x68>
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	05 c0       	rjmp	.+10     	; 0x13a6 <xQueueGenericSendFromISR+0x68>
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	03 c0       	rjmp	.+6      	; 0x13a6 <xQueueGenericSendFromISR+0x68>
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	01 c0       	rjmp	.+2      	; 0x13a6 <xQueueGenericSendFromISR+0x68>
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	ff 90       	pop	r15
    13b0:	ef 90       	pop	r14
    13b2:	08 95       	ret

000013b4 <xQueueReceive>:
    13b4:	cf 92       	push	r12
    13b6:	df 92       	push	r13
    13b8:	ef 92       	push	r14
    13ba:	ff 92       	push	r15
    13bc:	0f 93       	push	r16
    13be:	1f 93       	push	r17
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	29 97       	sbiw	r28, 0x09	; 9
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	f8 94       	cli
    13ce:	de bf       	out	0x3e, r29	; 62
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	cd bf       	out	0x3d, r28	; 61
    13d4:	8c 01       	movw	r16, r24
    13d6:	6b 01       	movw	r12, r22
    13d8:	2e 83       	std	Y+6, r18	; 0x06
    13da:	3f 83       	std	Y+7, r19	; 0x07
    13dc:	48 87       	std	Y+8, r20	; 0x08
    13de:	59 87       	std	Y+9, r21	; 0x09
    13e0:	e1 2c       	mov	r14, r1
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	0f 92       	push	r0
    13e8:	f8 01       	movw	r30, r16
    13ea:	f6 8c       	ldd	r15, Z+30	; 0x1e
    13ec:	ff 20       	and	r15, r15
    13ee:	99 f0       	breq	.+38     	; 0x1416 <xQueueReceive+0x62>
    13f0:	b6 01       	movw	r22, r12
    13f2:	c8 01       	movw	r24, r16
    13f4:	2e de       	rcall	.-932    	; 0x1052 <prvCopyDataFromQueue>
    13f6:	fa 94       	dec	r15
    13f8:	f8 01       	movw	r30, r16
    13fa:	f6 8e       	std	Z+30, r15	; 0x1e
    13fc:	80 85       	ldd	r24, Z+8	; 0x08
    13fe:	88 23       	and	r24, r24
    1400:	31 f0       	breq	.+12     	; 0x140e <xQueueReceive+0x5a>
    1402:	c8 01       	movw	r24, r16
    1404:	08 96       	adiw	r24, 0x08	; 8
    1406:	0e 94 a7 14 	call	0x294e	; 0x294e <xTaskRemoveFromEventList>
    140a:	81 11       	cpse	r24, r1
    140c:	d0 dc       	rcall	.-1632   	; 0xdae <vPortYield>
    140e:	0f 90       	pop	r0
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	4f c0       	rjmp	.+158    	; 0x14b4 <xQueueReceive+0x100>
    1416:	8e 81       	ldd	r24, Y+6	; 0x06
    1418:	9f 81       	ldd	r25, Y+7	; 0x07
    141a:	a8 85       	ldd	r26, Y+8	; 0x08
    141c:	b9 85       	ldd	r27, Y+9	; 0x09
    141e:	89 2b       	or	r24, r25
    1420:	8a 2b       	or	r24, r26
    1422:	8b 2b       	or	r24, r27
    1424:	21 f4       	brne	.+8      	; 0x142e <xQueueReceive+0x7a>
    1426:	0f 90       	pop	r0
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	43 c0       	rjmp	.+134    	; 0x14b4 <xQueueReceive+0x100>
    142e:	e1 10       	cpse	r14, r1
    1430:	06 c0       	rjmp	.+12     	; 0x143e <xQueueReceive+0x8a>
    1432:	ce 01       	movw	r24, r28
    1434:	01 96       	adiw	r24, 0x01	; 1
    1436:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <vTaskInternalSetTimeOutState>
    143a:	ee 24       	eor	r14, r14
    143c:	e3 94       	inc	r14
    143e:	0f 90       	pop	r0
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	e1 d6       	rcall	.+3522   	; 0x2206 <vTaskSuspendAll>
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	0f 92       	push	r0
    144a:	f8 01       	movw	r30, r16
    144c:	81 a1       	ldd	r24, Z+33	; 0x21
    144e:	8f 3f       	cpi	r24, 0xFF	; 255
    1450:	09 f4       	brne	.+2      	; 0x1454 <xQueueReceive+0xa0>
    1452:	11 a2       	std	Z+33, r1	; 0x21
    1454:	f8 01       	movw	r30, r16
    1456:	82 a1       	ldd	r24, Z+34	; 0x22
    1458:	8f 3f       	cpi	r24, 0xFF	; 255
    145a:	09 f4       	brne	.+2      	; 0x145e <xQueueReceive+0xaa>
    145c:	12 a2       	std	Z+34, r1	; 0x22
    145e:	0f 90       	pop	r0
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	be 01       	movw	r22, r28
    1464:	6a 5f       	subi	r22, 0xFA	; 250
    1466:	7f 4f       	sbci	r23, 0xFF	; 255
    1468:	ce 01       	movw	r24, r28
    146a:	01 96       	adiw	r24, 0x01	; 1
    146c:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <xTaskCheckForTimeOut>
    1470:	81 11       	cpse	r24, r1
    1472:	17 c0       	rjmp	.+46     	; 0x14a2 <xQueueReceive+0xee>
    1474:	c8 01       	movw	r24, r16
    1476:	73 dd       	rcall	.-1306   	; 0xf5e <prvIsQueueEmpty>
    1478:	88 23       	and	r24, r24
    147a:	79 f0       	breq	.+30     	; 0x149a <xQueueReceive+0xe6>
    147c:	4e 81       	ldd	r20, Y+6	; 0x06
    147e:	5f 81       	ldd	r21, Y+7	; 0x07
    1480:	68 85       	ldd	r22, Y+8	; 0x08
    1482:	79 85       	ldd	r23, Y+9	; 0x09
    1484:	c8 01       	movw	r24, r16
    1486:	43 96       	adiw	r24, 0x13	; 19
    1488:	0e 94 04 14 	call	0x2808	; 0x2808 <vTaskPlaceOnEventList>
    148c:	c8 01       	movw	r24, r16
    148e:	fb dd       	rcall	.-1034   	; 0x1086 <prvUnlockQueue>
    1490:	fa d7       	rcall	.+4084   	; 0x2486 <xTaskResumeAll>
    1492:	81 11       	cpse	r24, r1
    1494:	a6 cf       	rjmp	.-180    	; 0x13e2 <xQueueReceive+0x2e>
    1496:	8b dc       	rcall	.-1770   	; 0xdae <vPortYield>
    1498:	a4 cf       	rjmp	.-184    	; 0x13e2 <xQueueReceive+0x2e>
    149a:	c8 01       	movw	r24, r16
    149c:	f4 dd       	rcall	.-1048   	; 0x1086 <prvUnlockQueue>
    149e:	f3 d7       	rcall	.+4070   	; 0x2486 <xTaskResumeAll>
    14a0:	a0 cf       	rjmp	.-192    	; 0x13e2 <xQueueReceive+0x2e>
    14a2:	c8 01       	movw	r24, r16
    14a4:	f0 dd       	rcall	.-1056   	; 0x1086 <prvUnlockQueue>
    14a6:	ef d7       	rcall	.+4062   	; 0x2486 <xTaskResumeAll>
    14a8:	c8 01       	movw	r24, r16
    14aa:	59 dd       	rcall	.-1358   	; 0xf5e <prvIsQueueEmpty>
    14ac:	88 23       	and	r24, r24
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <xQueueReceive+0xfe>
    14b0:	98 cf       	rjmp	.-208    	; 0x13e2 <xQueueReceive+0x2e>
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	29 96       	adiw	r28, 0x09	; 9
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	de bf       	out	0x3e, r29	; 62
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	cd bf       	out	0x3d, r28	; 61
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	1f 91       	pop	r17
    14c6:	0f 91       	pop	r16
    14c8:	ff 90       	pop	r15
    14ca:	ef 90       	pop	r14
    14cc:	df 90       	pop	r13
    14ce:	cf 90       	pop	r12
    14d0:	08 95       	ret

000014d2 <xQueueSemaphoreTake>:
    14d2:	ef 92       	push	r14
    14d4:	ff 92       	push	r15
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	29 97       	sbiw	r28, 0x09	; 9
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	8c 01       	movw	r16, r24
    14f0:	4e 83       	std	Y+6, r20	; 0x06
    14f2:	5f 83       	std	Y+7, r21	; 0x07
    14f4:	68 87       	std	Y+8, r22	; 0x08
    14f6:	79 87       	std	Y+9, r23	; 0x09
    14f8:	e1 2c       	mov	r14, r1
    14fa:	f1 2c       	mov	r15, r1
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	0f 92       	push	r0
    1502:	f8 01       	movw	r30, r16
    1504:	86 8d       	ldd	r24, Z+30	; 0x1e
    1506:	88 23       	and	r24, r24
    1508:	c9 f0       	breq	.+50     	; 0x153c <xQueueSemaphoreTake+0x6a>
    150a:	81 50       	subi	r24, 0x01	; 1
    150c:	86 8f       	std	Z+30, r24	; 0x1e
    150e:	80 81       	ld	r24, Z
    1510:	91 81       	ldd	r25, Z+1	; 0x01
    1512:	89 2b       	or	r24, r25
    1514:	29 f4       	brne	.+10     	; 0x1520 <xQueueSemaphoreTake+0x4e>
    1516:	0e 94 07 18 	call	0x300e	; 0x300e <pvTaskIncrementMutexHeldCount>
    151a:	f8 01       	movw	r30, r16
    151c:	95 83       	std	Z+5, r25	; 0x05
    151e:	84 83       	std	Z+4, r24	; 0x04
    1520:	f8 01       	movw	r30, r16
    1522:	80 85       	ldd	r24, Z+8	; 0x08
    1524:	88 23       	and	r24, r24
    1526:	31 f0       	breq	.+12     	; 0x1534 <xQueueSemaphoreTake+0x62>
    1528:	c8 01       	movw	r24, r16
    152a:	08 96       	adiw	r24, 0x08	; 8
    152c:	0e 94 a7 14 	call	0x294e	; 0x294e <xTaskRemoveFromEventList>
    1530:	81 11       	cpse	r24, r1
    1532:	3d dc       	rcall	.-1926   	; 0xdae <vPortYield>
    1534:	0f 90       	pop	r0
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	6f c0       	rjmp	.+222    	; 0x161a <xQueueSemaphoreTake+0x148>
    153c:	8e 81       	ldd	r24, Y+6	; 0x06
    153e:	9f 81       	ldd	r25, Y+7	; 0x07
    1540:	a8 85       	ldd	r26, Y+8	; 0x08
    1542:	b9 85       	ldd	r27, Y+9	; 0x09
    1544:	89 2b       	or	r24, r25
    1546:	8a 2b       	or	r24, r26
    1548:	8b 2b       	or	r24, r27
    154a:	21 f4       	brne	.+8      	; 0x1554 <xQueueSemaphoreTake+0x82>
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	63 c0       	rjmp	.+198    	; 0x161a <xQueueSemaphoreTake+0x148>
    1554:	f1 10       	cpse	r15, r1
    1556:	06 c0       	rjmp	.+12     	; 0x1564 <xQueueSemaphoreTake+0x92>
    1558:	ce 01       	movw	r24, r28
    155a:	01 96       	adiw	r24, 0x01	; 1
    155c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <vTaskInternalSetTimeOutState>
    1560:	ff 24       	eor	r15, r15
    1562:	f3 94       	inc	r15
    1564:	0f 90       	pop	r0
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	4e d6       	rcall	.+3228   	; 0x2206 <vTaskSuspendAll>
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	0f 92       	push	r0
    1570:	f8 01       	movw	r30, r16
    1572:	81 a1       	ldd	r24, Z+33	; 0x21
    1574:	8f 3f       	cpi	r24, 0xFF	; 255
    1576:	09 f4       	brne	.+2      	; 0x157a <xQueueSemaphoreTake+0xa8>
    1578:	11 a2       	std	Z+33, r1	; 0x21
    157a:	f8 01       	movw	r30, r16
    157c:	82 a1       	ldd	r24, Z+34	; 0x22
    157e:	8f 3f       	cpi	r24, 0xFF	; 255
    1580:	09 f4       	brne	.+2      	; 0x1584 <xQueueSemaphoreTake+0xb2>
    1582:	12 a2       	std	Z+34, r1	; 0x22
    1584:	0f 90       	pop	r0
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	be 01       	movw	r22, r28
    158a:	6a 5f       	subi	r22, 0xFA	; 250
    158c:	7f 4f       	sbci	r23, 0xFF	; 255
    158e:	ce 01       	movw	r24, r28
    1590:	01 96       	adiw	r24, 0x01	; 1
    1592:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <xTaskCheckForTimeOut>
    1596:	81 11       	cpse	r24, r1
    1598:	26 c0       	rjmp	.+76     	; 0x15e6 <xQueueSemaphoreTake+0x114>
    159a:	c8 01       	movw	r24, r16
    159c:	e0 dc       	rcall	.-1600   	; 0xf5e <prvIsQueueEmpty>
    159e:	88 23       	and	r24, r24
    15a0:	f1 f0       	breq	.+60     	; 0x15de <xQueueSemaphoreTake+0x10c>
    15a2:	f8 01       	movw	r30, r16
    15a4:	80 81       	ld	r24, Z
    15a6:	91 81       	ldd	r25, Z+1	; 0x01
    15a8:	89 2b       	or	r24, r25
    15aa:	51 f4       	brne	.+20     	; 0x15c0 <xQueueSemaphoreTake+0xee>
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	0f 92       	push	r0
    15b2:	84 81       	ldd	r24, Z+4	; 0x04
    15b4:	95 81       	ldd	r25, Z+5	; 0x05
    15b6:	0e 94 94 16 	call	0x2d28	; 0x2d28 <xTaskPriorityInherit>
    15ba:	e8 2e       	mov	r14, r24
    15bc:	0f 90       	pop	r0
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	4e 81       	ldd	r20, Y+6	; 0x06
    15c2:	5f 81       	ldd	r21, Y+7	; 0x07
    15c4:	68 85       	ldd	r22, Y+8	; 0x08
    15c6:	79 85       	ldd	r23, Y+9	; 0x09
    15c8:	c8 01       	movw	r24, r16
    15ca:	43 96       	adiw	r24, 0x13	; 19
    15cc:	0e 94 04 14 	call	0x2808	; 0x2808 <vTaskPlaceOnEventList>
    15d0:	c8 01       	movw	r24, r16
    15d2:	59 dd       	rcall	.-1358   	; 0x1086 <prvUnlockQueue>
    15d4:	58 d7       	rcall	.+3760   	; 0x2486 <xTaskResumeAll>
    15d6:	81 11       	cpse	r24, r1
    15d8:	91 cf       	rjmp	.-222    	; 0x14fc <xQueueSemaphoreTake+0x2a>
    15da:	e9 db       	rcall	.-2094   	; 0xdae <vPortYield>
    15dc:	8f cf       	rjmp	.-226    	; 0x14fc <xQueueSemaphoreTake+0x2a>
    15de:	c8 01       	movw	r24, r16
    15e0:	52 dd       	rcall	.-1372   	; 0x1086 <prvUnlockQueue>
    15e2:	51 d7       	rcall	.+3746   	; 0x2486 <xTaskResumeAll>
    15e4:	8b cf       	rjmp	.-234    	; 0x14fc <xQueueSemaphoreTake+0x2a>
    15e6:	c8 01       	movw	r24, r16
    15e8:	4e dd       	rcall	.-1380   	; 0x1086 <prvUnlockQueue>
    15ea:	4d d7       	rcall	.+3738   	; 0x2486 <xTaskResumeAll>
    15ec:	c8 01       	movw	r24, r16
    15ee:	b7 dc       	rcall	.-1682   	; 0xf5e <prvIsQueueEmpty>
    15f0:	88 23       	and	r24, r24
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <xQueueSemaphoreTake+0x124>
    15f4:	83 cf       	rjmp	.-250    	; 0x14fc <xQueueSemaphoreTake+0x2a>
    15f6:	ee 20       	and	r14, r14
    15f8:	79 f0       	breq	.+30     	; 0x1618 <xQueueSemaphoreTake+0x146>
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	0f 92       	push	r0
    1600:	c8 01       	movw	r24, r16
    1602:	9d dc       	rcall	.-1734   	; 0xf3e <prvGetDisinheritPriorityAfterTimeout>
    1604:	68 2f       	mov	r22, r24
    1606:	f8 01       	movw	r30, r16
    1608:	84 81       	ldd	r24, Z+4	; 0x04
    160a:	95 81       	ldd	r25, Z+5	; 0x05
    160c:	0e 94 76 17 	call	0x2eec	; 0x2eec <vTaskPriorityDisinheritAfterTimeout>
    1610:	0f 90       	pop	r0
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	01 c0       	rjmp	.+2      	; 0x161a <xQueueSemaphoreTake+0x148>
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	29 96       	adiw	r28, 0x09	; 9
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	ff 90       	pop	r15
    1630:	ef 90       	pop	r14
    1632:	08 95       	ret

00001634 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1634:	cf 93       	push	r28
    1636:	df 93       	push	r29
    1638:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	f8 94       	cli
    163e:	0f 92       	push	r0
    1640:	89 a1       	ldd	r24, Y+33	; 0x21
    1642:	8f 3f       	cpi	r24, 0xFF	; 255
    1644:	09 f4       	brne	.+2      	; 0x1648 <vQueueWaitForMessageRestricted+0x14>
    1646:	19 a2       	std	Y+33, r1	; 0x21
    1648:	8a a1       	ldd	r24, Y+34	; 0x22
    164a:	8f 3f       	cpi	r24, 0xFF	; 255
    164c:	09 f4       	brne	.+2      	; 0x1650 <vQueueWaitForMessageRestricted+0x1c>
    164e:	1a a2       	std	Y+34, r1	; 0x22
    1650:	0f 90       	pop	r0
    1652:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1654:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1656:	81 11       	cpse	r24, r1
    1658:	04 c0       	rjmp	.+8      	; 0x1662 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    165a:	ce 01       	movw	r24, r28
    165c:	43 96       	adiw	r24, 0x13	; 19
    165e:	0e 94 65 14 	call	0x28ca	; 0x28ca <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1662:	ce 01       	movw	r24, r28
    1664:	10 dd       	rcall	.-1504   	; 0x1086 <prvUnlockQueue>
    }
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	08 95       	ret

0000166c <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    166c:	fc 01       	movw	r30, r24
    166e:	44 81       	ldd	r20, Z+4	; 0x04
    1670:	55 81       	ldd	r21, Z+5	; 0x05
    1672:	22 81       	ldd	r18, Z+2	; 0x02
    1674:	33 81       	ldd	r19, Z+3	; 0x03
    1676:	24 0f       	add	r18, r20
    1678:	35 1f       	adc	r19, r21
    167a:	80 81       	ld	r24, Z
    167c:	91 81       	ldd	r25, Z+1	; 0x01
    167e:	b9 01       	movw	r22, r18
    1680:	68 1b       	sub	r22, r24
    1682:	79 0b       	sbc	r23, r25
    1684:	cb 01       	movw	r24, r22
    1686:	64 17       	cp	r22, r20
    1688:	75 07       	cpc	r23, r21
    168a:	10 f0       	brcs	.+4      	; 0x1690 <prvBytesInBuffer+0x24>
    168c:	84 1b       	sub	r24, r20
    168e:	95 0b       	sbc	r25, r21
    1690:	08 95       	ret

00001692 <prvInitialiseNewStreamBuffer>:
    1692:	0f 93       	push	r16
    1694:	fc 01       	movw	r30, r24
    1696:	8f e0       	ldi	r24, 0x0F	; 15
    1698:	df 01       	movw	r26, r30
    169a:	1d 92       	st	X+, r1
    169c:	8a 95       	dec	r24
    169e:	e9 f7       	brne	.-6      	; 0x169a <prvInitialiseNewStreamBuffer+0x8>
    16a0:	75 87       	std	Z+13, r23	; 0x0d
    16a2:	64 87       	std	Z+12, r22	; 0x0c
    16a4:	55 83       	std	Z+5, r21	; 0x05
    16a6:	44 83       	std	Z+4, r20	; 0x04
    16a8:	37 83       	std	Z+7, r19	; 0x07
    16aa:	26 83       	std	Z+6, r18	; 0x06
    16ac:	06 87       	std	Z+14, r16	; 0x0e
    16ae:	0f 91       	pop	r16
    16b0:	08 95       	ret

000016b2 <prvWriteBytesToBuffer>:
    16b2:	af 92       	push	r10
    16b4:	bf 92       	push	r11
    16b6:	cf 92       	push	r12
    16b8:	df 92       	push	r13
    16ba:	ef 92       	push	r14
    16bc:	ff 92       	push	r15
    16be:	0f 93       	push	r16
    16c0:	1f 93       	push	r17
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	6c 01       	movw	r12, r24
    16c8:	5b 01       	movw	r10, r22
    16ca:	7a 01       	movw	r14, r20
    16cc:	fc 01       	movw	r30, r24
    16ce:	c2 81       	ldd	r28, Z+2	; 0x02
    16d0:	d3 81       	ldd	r29, Z+3	; 0x03
    16d2:	04 81       	ldd	r16, Z+4	; 0x04
    16d4:	15 81       	ldd	r17, Z+5	; 0x05
    16d6:	0c 1b       	sub	r16, r28
    16d8:	1d 0b       	sbc	r17, r29
    16da:	40 17       	cp	r20, r16
    16dc:	51 07       	cpc	r21, r17
    16de:	08 f4       	brcc	.+2      	; 0x16e2 <prvWriteBytesToBuffer+0x30>
    16e0:	8a 01       	movw	r16, r20
    16e2:	f6 01       	movw	r30, r12
    16e4:	84 85       	ldd	r24, Z+12	; 0x0c
    16e6:	95 85       	ldd	r25, Z+13	; 0x0d
    16e8:	a8 01       	movw	r20, r16
    16ea:	b5 01       	movw	r22, r10
    16ec:	8c 0f       	add	r24, r28
    16ee:	9d 1f       	adc	r25, r29
    16f0:	0e 94 d6 35 	call	0x6bac	; 0x6bac <memcpy>
    16f4:	0e 15       	cp	r16, r14
    16f6:	1f 05       	cpc	r17, r15
    16f8:	58 f4       	brcc	.+22     	; 0x1710 <prvWriteBytesToBuffer+0x5e>
    16fa:	a7 01       	movw	r20, r14
    16fc:	40 1b       	sub	r20, r16
    16fe:	51 0b       	sbc	r21, r17
    1700:	b5 01       	movw	r22, r10
    1702:	60 0f       	add	r22, r16
    1704:	71 1f       	adc	r23, r17
    1706:	f6 01       	movw	r30, r12
    1708:	84 85       	ldd	r24, Z+12	; 0x0c
    170a:	95 85       	ldd	r25, Z+13	; 0x0d
    170c:	0e 94 d6 35 	call	0x6bac	; 0x6bac <memcpy>
    1710:	ce 01       	movw	r24, r28
    1712:	8e 0d       	add	r24, r14
    1714:	9f 1d       	adc	r25, r15
    1716:	f6 01       	movw	r30, r12
    1718:	24 81       	ldd	r18, Z+4	; 0x04
    171a:	35 81       	ldd	r19, Z+5	; 0x05
    171c:	82 17       	cp	r24, r18
    171e:	93 07       	cpc	r25, r19
    1720:	10 f0       	brcs	.+4      	; 0x1726 <prvWriteBytesToBuffer+0x74>
    1722:	82 1b       	sub	r24, r18
    1724:	93 0b       	sbc	r25, r19
    1726:	f6 01       	movw	r30, r12
    1728:	93 83       	std	Z+3, r25	; 0x03
    172a:	82 83       	std	Z+2, r24	; 0x02
    172c:	c7 01       	movw	r24, r14
    172e:	df 91       	pop	r29
    1730:	cf 91       	pop	r28
    1732:	1f 91       	pop	r17
    1734:	0f 91       	pop	r16
    1736:	ff 90       	pop	r15
    1738:	ef 90       	pop	r14
    173a:	df 90       	pop	r13
    173c:	cf 90       	pop	r12
    173e:	bf 90       	pop	r11
    1740:	af 90       	pop	r10
    1742:	08 95       	ret

00001744 <prvWriteMessageToBuffer>:
    1744:	cf 92       	push	r12
    1746:	df 92       	push	r13
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	0f 93       	push	r16
    174e:	1f 93       	push	r17
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	1f 92       	push	r1
    1756:	1f 92       	push	r1
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	7c 01       	movw	r14, r24
    175e:	6b 01       	movw	r12, r22
    1760:	5a 83       	std	Y+2, r21	; 0x02
    1762:	49 83       	std	Y+1, r20	; 0x01
    1764:	21 15       	cp	r18, r1
    1766:	31 05       	cpc	r19, r1
    1768:	c1 f0       	breq	.+48     	; 0x179a <prvWriteMessageToBuffer+0x56>
    176a:	fc 01       	movw	r30, r24
    176c:	86 85       	ldd	r24, Z+14	; 0x0e
    176e:	80 fd       	sbrc	r24, 0
    1770:	08 c0       	rjmp	.+16     	; 0x1782 <prvWriteMessageToBuffer+0x3e>
    1772:	42 17       	cp	r20, r18
    1774:	53 07       	cpc	r21, r19
    1776:	08 f4       	brcc	.+2      	; 0x177a <prvWriteMessageToBuffer+0x36>
    1778:	9a 01       	movw	r18, r20
    177a:	3a 83       	std	Y+2, r19	; 0x02
    177c:	29 83       	std	Y+1, r18	; 0x01
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	0f c0       	rjmp	.+30     	; 0x17a0 <prvWriteMessageToBuffer+0x5c>
    1782:	20 17       	cp	r18, r16
    1784:	31 07       	cpc	r19, r17
    1786:	58 f0       	brcs	.+22     	; 0x179e <prvWriteMessageToBuffer+0x5a>
    1788:	42 e0       	ldi	r20, 0x02	; 2
    178a:	50 e0       	ldi	r21, 0x00	; 0
    178c:	be 01       	movw	r22, r28
    178e:	6f 5f       	subi	r22, 0xFF	; 255
    1790:	7f 4f       	sbci	r23, 0xFF	; 255
    1792:	c7 01       	movw	r24, r14
    1794:	8e df       	rcall	.-228    	; 0x16b2 <prvWriteBytesToBuffer>
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	03 c0       	rjmp	.+6      	; 0x17a0 <prvWriteMessageToBuffer+0x5c>
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	01 c0       	rjmp	.+2      	; 0x17a0 <prvWriteMessageToBuffer+0x5c>
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	88 23       	and	r24, r24
    17a2:	31 f0       	breq	.+12     	; 0x17b0 <prvWriteMessageToBuffer+0x6c>
    17a4:	49 81       	ldd	r20, Y+1	; 0x01
    17a6:	5a 81       	ldd	r21, Y+2	; 0x02
    17a8:	b6 01       	movw	r22, r12
    17aa:	c7 01       	movw	r24, r14
    17ac:	82 df       	rcall	.-252    	; 0x16b2 <prvWriteBytesToBuffer>
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <prvWriteMessageToBuffer+0x70>
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	1f 91       	pop	r17
    17be:	0f 91       	pop	r16
    17c0:	ff 90       	pop	r15
    17c2:	ef 90       	pop	r14
    17c4:	df 90       	pop	r13
    17c6:	cf 90       	pop	r12
    17c8:	08 95       	ret

000017ca <prvReadBytesFromBuffer>:
    17ca:	af 92       	push	r10
    17cc:	bf 92       	push	r11
    17ce:	cf 92       	push	r12
    17d0:	df 92       	push	r13
    17d2:	ef 92       	push	r14
    17d4:	ff 92       	push	r15
    17d6:	0f 93       	push	r16
    17d8:	1f 93       	push	r17
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	7c 01       	movw	r14, r24
    17e0:	5b 01       	movw	r10, r22
    17e2:	e9 01       	movw	r28, r18
    17e4:	42 17       	cp	r20, r18
    17e6:	53 07       	cpc	r21, r19
    17e8:	08 f4       	brcc	.+2      	; 0x17ec <prvReadBytesFromBuffer+0x22>
    17ea:	ea 01       	movw	r28, r20
    17ec:	20 97       	sbiw	r28, 0x00	; 0
    17ee:	81 f1       	breq	.+96     	; 0x1850 <prvReadBytesFromBuffer+0x86>
    17f0:	f7 01       	movw	r30, r14
    17f2:	00 81       	ld	r16, Z
    17f4:	11 81       	ldd	r17, Z+1	; 0x01
    17f6:	84 81       	ldd	r24, Z+4	; 0x04
    17f8:	95 81       	ldd	r25, Z+5	; 0x05
    17fa:	80 1b       	sub	r24, r16
    17fc:	91 0b       	sbc	r25, r17
    17fe:	6e 01       	movw	r12, r28
    1800:	8c 17       	cp	r24, r28
    1802:	9d 07       	cpc	r25, r29
    1804:	08 f4       	brcc	.+2      	; 0x1808 <prvReadBytesFromBuffer+0x3e>
    1806:	6c 01       	movw	r12, r24
    1808:	f7 01       	movw	r30, r14
    180a:	64 85       	ldd	r22, Z+12	; 0x0c
    180c:	75 85       	ldd	r23, Z+13	; 0x0d
    180e:	60 0f       	add	r22, r16
    1810:	71 1f       	adc	r23, r17
    1812:	a6 01       	movw	r20, r12
    1814:	c5 01       	movw	r24, r10
    1816:	0e 94 d6 35 	call	0x6bac	; 0x6bac <memcpy>
    181a:	cc 16       	cp	r12, r28
    181c:	dd 06       	cpc	r13, r29
    181e:	58 f4       	brcc	.+22     	; 0x1836 <prvReadBytesFromBuffer+0x6c>
    1820:	ae 01       	movw	r20, r28
    1822:	4c 19       	sub	r20, r12
    1824:	5d 09       	sbc	r21, r13
    1826:	f7 01       	movw	r30, r14
    1828:	64 85       	ldd	r22, Z+12	; 0x0c
    182a:	75 85       	ldd	r23, Z+13	; 0x0d
    182c:	c5 01       	movw	r24, r10
    182e:	8c 0d       	add	r24, r12
    1830:	9d 1d       	adc	r25, r13
    1832:	0e 94 d6 35 	call	0x6bac	; 0x6bac <memcpy>
    1836:	0c 0f       	add	r16, r28
    1838:	1d 1f       	adc	r17, r29
    183a:	f7 01       	movw	r30, r14
    183c:	84 81       	ldd	r24, Z+4	; 0x04
    183e:	95 81       	ldd	r25, Z+5	; 0x05
    1840:	08 17       	cp	r16, r24
    1842:	19 07       	cpc	r17, r25
    1844:	10 f0       	brcs	.+4      	; 0x184a <prvReadBytesFromBuffer+0x80>
    1846:	08 1b       	sub	r16, r24
    1848:	19 0b       	sbc	r17, r25
    184a:	f7 01       	movw	r30, r14
    184c:	11 83       	std	Z+1, r17	; 0x01
    184e:	00 83       	st	Z, r16
    1850:	ce 01       	movw	r24, r28
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	ff 90       	pop	r15
    185c:	ef 90       	pop	r14
    185e:	df 90       	pop	r13
    1860:	cf 90       	pop	r12
    1862:	bf 90       	pop	r11
    1864:	af 90       	pop	r10
    1866:	08 95       	ret

00001868 <prvReadMessageFromBuffer>:
    1868:	6f 92       	push	r6
    186a:	7f 92       	push	r7
    186c:	8f 92       	push	r8
    186e:	9f 92       	push	r9
    1870:	af 92       	push	r10
    1872:	bf 92       	push	r11
    1874:	cf 92       	push	r12
    1876:	df 92       	push	r13
    1878:	ef 92       	push	r14
    187a:	ff 92       	push	r15
    187c:	0f 93       	push	r16
    187e:	1f 93       	push	r17
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	1f 92       	push	r1
    1886:	1f 92       	push	r1
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	6c 01       	movw	r12, r24
    188e:	4b 01       	movw	r8, r22
    1890:	5a 01       	movw	r10, r20
    1892:	79 01       	movw	r14, r18
    1894:	01 15       	cp	r16, r1
    1896:	11 05       	cpc	r17, r1
    1898:	b1 f0       	breq	.+44     	; 0x18c6 <prvReadMessageFromBuffer+0x5e>
    189a:	fc 01       	movw	r30, r24
    189c:	60 80       	ld	r6, Z
    189e:	71 80       	ldd	r7, Z+1	; 0x01
    18a0:	a8 01       	movw	r20, r16
    18a2:	be 01       	movw	r22, r28
    18a4:	6f 5f       	subi	r22, 0xFF	; 255
    18a6:	7f 4f       	sbci	r23, 0xFF	; 255
    18a8:	90 df       	rcall	.-224    	; 0x17ca <prvReadBytesFromBuffer>
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	9a 81       	ldd	r25, Y+2	; 0x02
    18ae:	e0 1a       	sub	r14, r16
    18b0:	f1 0a       	sbc	r15, r17
    18b2:	a8 16       	cp	r10, r24
    18b4:	b9 06       	cpc	r11, r25
    18b6:	30 f4       	brcc	.+12     	; 0x18c4 <prvReadMessageFromBuffer+0x5c>
    18b8:	f6 01       	movw	r30, r12
    18ba:	71 82       	std	Z+1, r7	; 0x01
    18bc:	60 82       	st	Z, r6
    18be:	a1 2c       	mov	r10, r1
    18c0:	b1 2c       	mov	r11, r1
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <prvReadMessageFromBuffer+0x5e>
    18c4:	5c 01       	movw	r10, r24
    18c6:	97 01       	movw	r18, r14
    18c8:	a5 01       	movw	r20, r10
    18ca:	b4 01       	movw	r22, r8
    18cc:	c6 01       	movw	r24, r12
    18ce:	7d df       	rcall	.-262    	; 0x17ca <prvReadBytesFromBuffer>
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
    18d8:	1f 91       	pop	r17
    18da:	0f 91       	pop	r16
    18dc:	ff 90       	pop	r15
    18de:	ef 90       	pop	r14
    18e0:	df 90       	pop	r13
    18e2:	cf 90       	pop	r12
    18e4:	bf 90       	pop	r11
    18e6:	af 90       	pop	r10
    18e8:	9f 90       	pop	r9
    18ea:	8f 90       	pop	r8
    18ec:	7f 90       	pop	r7
    18ee:	6f 90       	pop	r6
    18f0:	08 95       	ret

000018f2 <xStreamBufferGenericCreate>:
    18f2:	cf 92       	push	r12
    18f4:	df 92       	push	r13
    18f6:	ef 92       	push	r14
    18f8:	ff 92       	push	r15
    18fa:	0f 93       	push	r16
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	ec 01       	movw	r28, r24
    1902:	6b 01       	movw	r12, r22
    1904:	41 30       	cpi	r20, 0x01	; 1
    1906:	11 f4       	brne	.+4      	; 0x190c <xStreamBufferGenericCreate+0x1a>
    1908:	01 e0       	ldi	r16, 0x01	; 1
    190a:	01 c0       	rjmp	.+2      	; 0x190e <xStreamBufferGenericCreate+0x1c>
    190c:	00 e0       	ldi	r16, 0x00	; 0
    190e:	c1 14       	cp	r12, r1
    1910:	d1 04       	cpc	r13, r1
    1912:	19 f4       	brne	.+6      	; 0x191a <xStreamBufferGenericCreate+0x28>
    1914:	cc 24       	eor	r12, r12
    1916:	c3 94       	inc	r12
    1918:	d1 2c       	mov	r13, r1
    191a:	ce 01       	movw	r24, r28
    191c:	40 96       	adiw	r24, 0x10	; 16
    191e:	c8 17       	cp	r28, r24
    1920:	d9 07       	cpc	r29, r25
    1922:	20 f4       	brcc	.+8      	; 0x192c <xStreamBufferGenericCreate+0x3a>
    1924:	21 96       	adiw	r28, 0x01	; 1
    1926:	8f d8       	rcall	.-3810   	; 0xa46 <pvPortMalloc>
    1928:	7c 01       	movw	r14, r24
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <xStreamBufferGenericCreate+0x3e>
    192c:	e1 2c       	mov	r14, r1
    192e:	f1 2c       	mov	r15, r1
    1930:	e1 14       	cp	r14, r1
    1932:	f1 04       	cpc	r15, r1
    1934:	39 f0       	breq	.+14     	; 0x1944 <xStreamBufferGenericCreate+0x52>
    1936:	96 01       	movw	r18, r12
    1938:	ae 01       	movw	r20, r28
    193a:	b7 01       	movw	r22, r14
    193c:	61 5f       	subi	r22, 0xF1	; 241
    193e:	7f 4f       	sbci	r23, 0xFF	; 255
    1940:	c7 01       	movw	r24, r14
    1942:	a7 de       	rcall	.-690    	; 0x1692 <prvInitialiseNewStreamBuffer>
    1944:	c7 01       	movw	r24, r14
    1946:	df 91       	pop	r29
    1948:	cf 91       	pop	r28
    194a:	0f 91       	pop	r16
    194c:	ff 90       	pop	r15
    194e:	ef 90       	pop	r14
    1950:	df 90       	pop	r13
    1952:	cf 90       	pop	r12
    1954:	08 95       	ret

00001956 <xStreamBufferReset>:
    1956:	0f 93       	push	r16
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	0f 92       	push	r0
    195e:	fc 01       	movw	r30, r24
    1960:	20 85       	ldd	r18, Z+8	; 0x08
    1962:	31 85       	ldd	r19, Z+9	; 0x09
    1964:	23 2b       	or	r18, r19
    1966:	71 f4       	brne	.+28     	; 0x1984 <xStreamBufferReset+0x2e>
    1968:	22 85       	ldd	r18, Z+10	; 0x0a
    196a:	33 85       	ldd	r19, Z+11	; 0x0b
    196c:	23 2b       	or	r18, r19
    196e:	61 f4       	brne	.+24     	; 0x1988 <xStreamBufferReset+0x32>
    1970:	26 81       	ldd	r18, Z+6	; 0x06
    1972:	37 81       	ldd	r19, Z+7	; 0x07
    1974:	44 81       	ldd	r20, Z+4	; 0x04
    1976:	55 81       	ldd	r21, Z+5	; 0x05
    1978:	64 85       	ldd	r22, Z+12	; 0x0c
    197a:	75 85       	ldd	r23, Z+13	; 0x0d
    197c:	06 85       	ldd	r16, Z+14	; 0x0e
    197e:	89 de       	rcall	.-750    	; 0x1692 <prvInitialiseNewStreamBuffer>
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	03 c0       	rjmp	.+6      	; 0x198a <xStreamBufferReset+0x34>
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	01 c0       	rjmp	.+2      	; 0x198a <xStreamBufferReset+0x34>
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	0f 90       	pop	r0
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	0f 91       	pop	r16
    1990:	08 95       	ret

00001992 <xStreamBufferSpacesAvailable>:
    1992:	fc 01       	movw	r30, r24
    1994:	24 81       	ldd	r18, Z+4	; 0x04
    1996:	35 81       	ldd	r19, Z+5	; 0x05
    1998:	80 81       	ld	r24, Z
    199a:	91 81       	ldd	r25, Z+1	; 0x01
    199c:	82 0f       	add	r24, r18
    199e:	93 1f       	adc	r25, r19
    19a0:	42 81       	ldd	r20, Z+2	; 0x02
    19a2:	53 81       	ldd	r21, Z+3	; 0x03
    19a4:	84 1b       	sub	r24, r20
    19a6:	95 0b       	sbc	r25, r21
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	82 17       	cp	r24, r18
    19ac:	93 07       	cpc	r25, r19
    19ae:	10 f0       	brcs	.+4      	; 0x19b4 <xStreamBufferSpacesAvailable+0x22>
    19b0:	82 1b       	sub	r24, r18
    19b2:	93 0b       	sbc	r25, r19
    19b4:	08 95       	ret

000019b6 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    19b6:	2f 92       	push	r2
    19b8:	3f 92       	push	r3
    19ba:	4f 92       	push	r4
    19bc:	5f 92       	push	r5
    19be:	6f 92       	push	r6
    19c0:	7f 92       	push	r7
    19c2:	8f 92       	push	r8
    19c4:	9f 92       	push	r9
    19c6:	af 92       	push	r10
    19c8:	bf 92       	push	r11
    19ca:	cf 92       	push	r12
    19cc:	df 92       	push	r13
    19ce:	ef 92       	push	r14
    19d0:	ff 92       	push	r15
    19d2:	0f 93       	push	r16
    19d4:	1f 93       	push	r17
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	2b 97       	sbiw	r28, 0x0b	; 11
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	4c 01       	movw	r8, r24
    19ec:	7b 87       	std	Y+11, r23	; 0x0b
    19ee:	6a 87       	std	Y+10, r22	; 0x0a
    19f0:	1a 01       	movw	r2, r20
    19f2:	0e 83       	std	Y+6, r16	; 0x06
    19f4:	1f 83       	std	Y+7, r17	; 0x07
    19f6:	28 87       	std	Y+8, r18	; 0x08
    19f8:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    19fa:	fc 01       	movw	r30, r24
    19fc:	84 81       	ldd	r24, Z+4	; 0x04
    19fe:	95 81       	ldd	r25, Z+5	; 0x05
    1a00:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1a02:	26 85       	ldd	r18, Z+14	; 0x0e
    1a04:	20 ff       	sbrs	r18, 0
    1a06:	0c c0       	rjmp	.+24     	; 0x1a20 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1a08:	2a 01       	movw	r4, r20
    1a0a:	f2 e0       	ldi	r31, 0x02	; 2
    1a0c:	4f 0e       	add	r4, r31
    1a0e:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1a10:	84 15       	cp	r24, r4
    1a12:	95 05       	cpc	r25, r5
    1a14:	58 f4       	brcc	.+22     	; 0x1a2c <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1a16:	1e 82       	std	Y+6, r1	; 0x06
    1a18:	1f 82       	std	Y+7, r1	; 0x07
    1a1a:	18 86       	std	Y+8, r1	; 0x08
    1a1c:	19 86       	std	Y+9, r1	; 0x09
    1a1e:	06 c0       	rjmp	.+12     	; 0x1a2c <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1a20:	84 17       	cp	r24, r20
    1a22:	95 07       	cpc	r25, r21
    1a24:	10 f0       	brcs	.+4      	; 0x1a2a <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1a26:	2a 01       	movw	r4, r20
    1a28:	01 c0       	rjmp	.+2      	; 0x1a2c <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1a2a:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1a2c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a2e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a30:	a8 85       	ldd	r26, Y+8	; 0x08
    1a32:	b9 85       	ldd	r27, Y+9	; 0x09
    1a34:	89 2b       	or	r24, r25
    1a36:	8a 2b       	or	r24, r26
    1a38:	8b 2b       	or	r24, r27
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <xStreamBufferSend+0x88>
    1a3c:	38 c0       	rjmp	.+112    	; 0x1aae <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1a3e:	ce 01       	movw	r24, r28
    1a40:	01 96       	adiw	r24, 0x01	; 1
    1a42:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1a4c:	c4 01       	movw	r24, r8
    1a4e:	a1 df       	rcall	.-190    	; 0x1992 <xStreamBufferSpacesAvailable>
    1a50:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1a52:	84 15       	cp	r24, r4
    1a54:	95 05       	cpc	r25, r5
    1a56:	40 f5       	brcc	.+80     	; 0x1aa8 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1a58:	60 e0       	ldi	r22, 0x00	; 0
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1a62:	0e 94 81 16 	call	0x2d02	; 0x2d02 <xTaskGetCurrentTaskHandle>
    1a66:	f4 01       	movw	r30, r8
    1a68:	93 87       	std	Z+11, r25	; 0x0b
    1a6a:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1a6c:	0f 90       	pop	r0
    1a6e:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1a70:	ae 80       	ldd	r10, Y+6	; 0x06
    1a72:	bf 80       	ldd	r11, Y+7	; 0x07
    1a74:	c8 84       	ldd	r12, Y+8	; 0x08
    1a76:	d9 84       	ldd	r13, Y+9	; 0x09
    1a78:	e1 2c       	mov	r14, r1
    1a7a:	f1 2c       	mov	r15, r1
    1a7c:	00 e0       	ldi	r16, 0x00	; 0
    1a7e:	10 e0       	ldi	r17, 0x00	; 0
    1a80:	98 01       	movw	r18, r16
    1a82:	40 e0       	ldi	r20, 0x00	; 0
    1a84:	50 e0       	ldi	r21, 0x00	; 0
    1a86:	ba 01       	movw	r22, r20
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	0e 94 19 18 	call	0x3032	; 0x3032 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1a8e:	f4 01       	movw	r30, r8
    1a90:	13 86       	std	Z+11, r1	; 0x0b
    1a92:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1a94:	be 01       	movw	r22, r28
    1a96:	6a 5f       	subi	r22, 0xFA	; 250
    1a98:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	01 96       	adiw	r24, 0x01	; 1
    1a9e:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <xTaskCheckForTimeOut>
    1aa2:	88 23       	and	r24, r24
    1aa4:	81 f2       	breq	.-96     	; 0x1a46 <xStreamBufferSend+0x90>
    1aa6:	05 c0       	rjmp	.+10     	; 0x1ab2 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1aa8:	0f 90       	pop	r0
    1aaa:	0f be       	out	0x3f, r0	; 63
                    break;
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1aae:	61 2c       	mov	r6, r1
    1ab0:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1ab2:	61 14       	cp	r6, r1
    1ab4:	71 04       	cpc	r7, r1
    1ab6:	19 f4       	brne	.+6      	; 0x1abe <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1ab8:	c4 01       	movw	r24, r8
    1aba:	6b df       	rcall	.-298    	; 0x1992 <xStreamBufferSpacesAvailable>
    1abc:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1abe:	82 01       	movw	r16, r4
    1ac0:	93 01       	movw	r18, r6
    1ac2:	a1 01       	movw	r20, r2
    1ac4:	6a 85       	ldd	r22, Y+10	; 0x0a
    1ac6:	7b 85       	ldd	r23, Y+11	; 0x0b
    1ac8:	c4 01       	movw	r24, r8
    1aca:	3c de       	rcall	.-904    	; 0x1744 <prvWriteMessageToBuffer>
    1acc:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1ace:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1ad0:	e9 f0       	breq	.+58     	; 0x1b0c <xStreamBufferSend+0x156>
    1ad2:	c4 01       	movw	r24, r8
    1ad4:	cb dd       	rcall	.-1130   	; 0x166c <prvBytesInBuffer>
    1ad6:	f4 01       	movw	r30, r8
    1ad8:	26 81       	ldd	r18, Z+6	; 0x06
    1ada:	37 81       	ldd	r19, Z+7	; 0x07
    1adc:	82 17       	cp	r24, r18
    1ade:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1ae0:	a8 f0       	brcs	.+42     	; 0x1b0c <xStreamBufferSend+0x156>
    1ae2:	91 d3       	rcall	.+1826   	; 0x2206 <vTaskSuspendAll>
    1ae4:	f4 01       	movw	r30, r8
    1ae6:	80 85       	ldd	r24, Z+8	; 0x08
    1ae8:	91 85       	ldd	r25, Z+9	; 0x09
    1aea:	89 2b       	or	r24, r25
    1aec:	71 f0       	breq	.+28     	; 0x1b0a <xStreamBufferSend+0x154>
    1aee:	80 85       	ldd	r24, Z+8	; 0x08
    1af0:	91 85       	ldd	r25, Z+9	; 0x09
    1af2:	e1 2c       	mov	r14, r1
    1af4:	f1 2c       	mov	r15, r1
    1af6:	00 e0       	ldi	r16, 0x00	; 0
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	a9 01       	movw	r20, r18
    1afe:	60 e0       	ldi	r22, 0x00	; 0
    1b00:	0e 94 c1 18 	call	0x3182	; 0x3182 <xTaskGenericNotify>
    1b04:	f4 01       	movw	r30, r8
    1b06:	11 86       	std	Z+9, r1	; 0x09
    1b08:	10 86       	std	Z+8, r1	; 0x08
    1b0a:	bd d4       	rcall	.+2426   	; 0x2486 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1b0c:	c6 01       	movw	r24, r12
    1b0e:	2b 96       	adiw	r28, 0x0b	; 11
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	df 91       	pop	r29
    1b1c:	cf 91       	pop	r28
    1b1e:	1f 91       	pop	r17
    1b20:	0f 91       	pop	r16
    1b22:	ff 90       	pop	r15
    1b24:	ef 90       	pop	r14
    1b26:	df 90       	pop	r13
    1b28:	cf 90       	pop	r12
    1b2a:	bf 90       	pop	r11
    1b2c:	af 90       	pop	r10
    1b2e:	9f 90       	pop	r9
    1b30:	8f 90       	pop	r8
    1b32:	7f 90       	pop	r7
    1b34:	6f 90       	pop	r6
    1b36:	5f 90       	pop	r5
    1b38:	4f 90       	pop	r4
    1b3a:	3f 90       	pop	r3
    1b3c:	2f 90       	pop	r2
    1b3e:	08 95       	ret

00001b40 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1b40:	af 92       	push	r10
    1b42:	bf 92       	push	r11
    1b44:	cf 92       	push	r12
    1b46:	df 92       	push	r13
    1b48:	ef 92       	push	r14
    1b4a:	ff 92       	push	r15
    1b4c:	0f 93       	push	r16
    1b4e:	1f 93       	push	r17
    1b50:	cf 93       	push	r28
    1b52:	df 93       	push	r29
    1b54:	ec 01       	movw	r28, r24
    1b56:	7b 01       	movw	r14, r22
    1b58:	5a 01       	movw	r10, r20
    1b5a:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1b5c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b5e:	80 ff       	sbrs	r24, 0
    1b60:	04 c0       	rjmp	.+8      	; 0x1b6a <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1b62:	8a 01       	movw	r16, r20
    1b64:	0e 5f       	subi	r16, 0xFE	; 254
    1b66:	1f 4f       	sbci	r17, 0xFF	; 255
    1b68:	01 c0       	rjmp	.+2      	; 0x1b6c <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1b6a:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	11 df       	rcall	.-478    	; 0x1992 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1b70:	9c 01       	movw	r18, r24
    1b72:	a5 01       	movw	r20, r10
    1b74:	b7 01       	movw	r22, r14
    1b76:	ce 01       	movw	r24, r28
    1b78:	e5 dd       	rcall	.-1078   	; 0x1744 <prvWriteMessageToBuffer>
    1b7a:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1b7c:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1b7e:	c1 f0       	breq	.+48     	; 0x1bb0 <xStreamBufferSendFromISR+0x70>
    1b80:	ce 01       	movw	r24, r28
    1b82:	74 dd       	rcall	.-1304   	; 0x166c <prvBytesInBuffer>
    1b84:	2e 81       	ldd	r18, Y+6	; 0x06
    1b86:	3f 81       	ldd	r19, Y+7	; 0x07
    1b88:	82 17       	cp	r24, r18
    1b8a:	93 07       	cpc	r25, r19
    1b8c:	88 f0       	brcs	.+34     	; 0x1bb0 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1b8e:	88 85       	ldd	r24, Y+8	; 0x08
    1b90:	99 85       	ldd	r25, Y+9	; 0x09
    1b92:	89 2b       	or	r24, r25
    1b94:	69 f0       	breq	.+26     	; 0x1bb0 <xStreamBufferSendFromISR+0x70>
    1b96:	88 85       	ldd	r24, Y+8	; 0x08
    1b98:	99 85       	ldd	r25, Y+9	; 0x09
    1b9a:	e1 2c       	mov	r14, r1
    1b9c:	f1 2c       	mov	r15, r1
    1b9e:	00 e0       	ldi	r16, 0x00	; 0
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	a9 01       	movw	r20, r18
    1ba6:	60 e0       	ldi	r22, 0x00	; 0
    1ba8:	0e 94 b8 19 	call	0x3370	; 0x3370 <xTaskGenericNotifyFromISR>
    1bac:	19 86       	std	Y+9, r1	; 0x09
    1bae:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1bb0:	c5 01       	movw	r24, r10
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	1f 91       	pop	r17
    1bb8:	0f 91       	pop	r16
    1bba:	ff 90       	pop	r15
    1bbc:	ef 90       	pop	r14
    1bbe:	df 90       	pop	r13
    1bc0:	cf 90       	pop	r12
    1bc2:	bf 90       	pop	r11
    1bc4:	af 90       	pop	r10
    1bc6:	08 95       	ret

00001bc8 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1bc8:	4f 92       	push	r4
    1bca:	5f 92       	push	r5
    1bcc:	6f 92       	push	r6
    1bce:	7f 92       	push	r7
    1bd0:	8f 92       	push	r8
    1bd2:	9f 92       	push	r9
    1bd4:	af 92       	push	r10
    1bd6:	bf 92       	push	r11
    1bd8:	cf 92       	push	r12
    1bda:	df 92       	push	r13
    1bdc:	ef 92       	push	r14
    1bde:	ff 92       	push	r15
    1be0:	0f 93       	push	r16
    1be2:	1f 93       	push	r17
    1be4:	cf 93       	push	r28
    1be6:	df 93       	push	r29
    1be8:	ec 01       	movw	r28, r24
    1bea:	2b 01       	movw	r4, r22
    1bec:	3a 01       	movw	r6, r20
    1bee:	58 01       	movw	r10, r16
    1bf0:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1bf2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bf4:	80 ff       	sbrs	r24, 0
    1bf6:	05 c0       	rjmp	.+10     	; 0x1c02 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1bf8:	68 94       	set
    1bfa:	88 24       	eor	r8, r8
    1bfc:	81 f8       	bld	r8, 1
    1bfe:	91 2c       	mov	r9, r1
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1c02:	81 2c       	mov	r8, r1
    1c04:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1c06:	a1 14       	cp	r10, r1
    1c08:	b1 04       	cpc	r11, r1
    1c0a:	c1 04       	cpc	r12, r1
    1c0c:	d1 04       	cpc	r13, r1
    1c0e:	41 f1       	breq	.+80     	; 0x1c60 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1c16:	ce 01       	movw	r24, r28
    1c18:	29 dd       	rcall	.-1454   	; 0x166c <prvBytesInBuffer>
    1c1a:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1c1c:	88 16       	cp	r8, r24
    1c1e:	99 06       	cpc	r9, r25
    1c20:	48 f0       	brcs	.+18     	; 0x1c34 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1c2c:	0e 94 81 16 	call	0x2d02	; 0x2d02 <xTaskGetCurrentTaskHandle>
    1c30:	99 87       	std	Y+9, r25	; 0x09
    1c32:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1c34:	0f 90       	pop	r0
    1c36:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1c38:	8e 14       	cp	r8, r14
    1c3a:	9f 04       	cpc	r9, r15
    1c3c:	a0 f0       	brcs	.+40     	; 0x1c66 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1c3e:	e1 2c       	mov	r14, r1
    1c40:	f1 2c       	mov	r15, r1
    1c42:	00 e0       	ldi	r16, 0x00	; 0
    1c44:	10 e0       	ldi	r17, 0x00	; 0
    1c46:	98 01       	movw	r18, r16
    1c48:	40 e0       	ldi	r20, 0x00	; 0
    1c4a:	50 e0       	ldi	r21, 0x00	; 0
    1c4c:	ba 01       	movw	r22, r20
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	0e 94 19 18 	call	0x3032	; 0x3032 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1c54:	19 86       	std	Y+9, r1	; 0x09
    1c56:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1c58:	ce 01       	movw	r24, r28
    1c5a:	08 dd       	rcall	.-1520   	; 0x166c <prvBytesInBuffer>
    1c5c:	7c 01       	movw	r14, r24
    1c5e:	03 c0       	rjmp	.+6      	; 0x1c66 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1c60:	ce 01       	movw	r24, r28
    1c62:	04 dd       	rcall	.-1528   	; 0x166c <prvBytesInBuffer>
    1c64:	7c 01       	movw	r14, r24
    1c66:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1c68:	9f 04       	cpc	r9, r15
    1c6a:	e8 f4       	brcc	.+58     	; 0x1ca6 <xStreamBufferReceive+0xde>
    1c6c:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1c6e:	97 01       	movw	r18, r14
    1c70:	a3 01       	movw	r20, r6
    1c72:	b2 01       	movw	r22, r4
    1c74:	ce 01       	movw	r24, r28
    1c76:	f8 dd       	rcall	.-1040   	; 0x1868 <prvReadMessageFromBuffer>
    1c78:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1c7a:	89 2b       	or	r24, r25
    1c7c:	b1 f0       	breq	.+44     	; 0x1caa <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1c7e:	c3 d2       	rcall	.+1414   	; 0x2206 <vTaskSuspendAll>
    1c80:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c82:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c84:	89 2b       	or	r24, r25
    1c86:	69 f0       	breq	.+26     	; 0x1ca2 <xStreamBufferReceive+0xda>
    1c88:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c8c:	e1 2c       	mov	r14, r1
    1c8e:	f1 2c       	mov	r15, r1
    1c90:	00 e0       	ldi	r16, 0x00	; 0
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	a9 01       	movw	r20, r18
    1c98:	60 e0       	ldi	r22, 0x00	; 0
    1c9a:	0e 94 c1 18 	call	0x3182	; 0x3182 <xTaskGenericNotify>
    1c9e:	1b 86       	std	Y+11, r1	; 0x0b
    1ca0:	1a 86       	std	Y+10, r1	; 0x0a
    1ca2:	f1 d3       	rcall	.+2018   	; 0x2486 <xTaskResumeAll>
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <xStreamBufferReceive+0xe2>
    1ca6:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1ca8:	d1 2c       	mov	r13, r1
    1caa:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	1f 91       	pop	r17
    1cb2:	0f 91       	pop	r16
    1cb4:	ff 90       	pop	r15
    1cb6:	ef 90       	pop	r14
    1cb8:	df 90       	pop	r13
    1cba:	cf 90       	pop	r12
    1cbc:	bf 90       	pop	r11
    1cbe:	af 90       	pop	r10
    1cc0:	9f 90       	pop	r9
    1cc2:	8f 90       	pop	r8
    1cc4:	7f 90       	pop	r7
    1cc6:	6f 90       	pop	r6
    1cc8:	5f 90       	pop	r5
    1cca:	4f 90       	pop	r4
    1ccc:	08 95       	ret

00001cce <prvResetNextTaskUnblockTime>:
    1cce:	e0 91 69 15 	lds	r30, 0x1569	; 0x801569 <pxDelayedTaskList>
    1cd2:	f0 91 6a 15 	lds	r31, 0x156A	; 0x80156a <pxDelayedTaskList+0x1>
    1cd6:	80 81       	ld	r24, Z
    1cd8:	81 11       	cpse	r24, r1
    1cda:	0c c0       	rjmp	.+24     	; 0x1cf4 <prvResetNextTaskUnblockTime+0x26>
    1cdc:	8f ef       	ldi	r24, 0xFF	; 255
    1cde:	9f ef       	ldi	r25, 0xFF	; 255
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	80 93 33 15 	sts	0x1533, r24	; 0x801533 <xNextTaskUnblockTime>
    1ce6:	90 93 34 15 	sts	0x1534, r25	; 0x801534 <xNextTaskUnblockTime+0x1>
    1cea:	a0 93 35 15 	sts	0x1535, r26	; 0x801535 <xNextTaskUnblockTime+0x2>
    1cee:	b0 93 36 15 	sts	0x1536, r27	; 0x801536 <xNextTaskUnblockTime+0x3>
    1cf2:	08 95       	ret
    1cf4:	e0 91 69 15 	lds	r30, 0x1569	; 0x801569 <pxDelayedTaskList>
    1cf8:	f0 91 6a 15 	lds	r31, 0x156A	; 0x80156a <pxDelayedTaskList+0x1>
    1cfc:	07 80       	ldd	r0, Z+7	; 0x07
    1cfe:	f0 85       	ldd	r31, Z+8	; 0x08
    1d00:	e0 2d       	mov	r30, r0
    1d02:	80 81       	ld	r24, Z
    1d04:	91 81       	ldd	r25, Z+1	; 0x01
    1d06:	a2 81       	ldd	r26, Z+2	; 0x02
    1d08:	b3 81       	ldd	r27, Z+3	; 0x03
    1d0a:	80 93 33 15 	sts	0x1533, r24	; 0x801533 <xNextTaskUnblockTime>
    1d0e:	90 93 34 15 	sts	0x1534, r25	; 0x801534 <xNextTaskUnblockTime+0x1>
    1d12:	a0 93 35 15 	sts	0x1535, r26	; 0x801535 <xNextTaskUnblockTime+0x2>
    1d16:	b0 93 36 15 	sts	0x1536, r27	; 0x801536 <xNextTaskUnblockTime+0x3>
    1d1a:	08 95       	ret

00001d1c <prvDeleteTCB>:
    1d1c:	cf 93       	push	r28
    1d1e:	df 93       	push	r29
    1d20:	ec 01       	movw	r28, r24
    1d22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d26:	0e 94 cc 05 	call	0xb98	; 0xb98 <vPortFree>
    1d2a:	ce 01       	movw	r24, r28
    1d2c:	0e 94 cc 05 	call	0xb98	; 0xb98 <vPortFree>
    1d30:	df 91       	pop	r29
    1d32:	cf 91       	pop	r28
    1d34:	08 95       	ret

00001d36 <prvInitialiseNewTask>:
    1d36:	4f 92       	push	r4
    1d38:	5f 92       	push	r5
    1d3a:	6f 92       	push	r6
    1d3c:	7f 92       	push	r7
    1d3e:	8f 92       	push	r8
    1d40:	9f 92       	push	r9
    1d42:	af 92       	push	r10
    1d44:	bf 92       	push	r11
    1d46:	cf 92       	push	r12
    1d48:	df 92       	push	r13
    1d4a:	ef 92       	push	r14
    1d4c:	ff 92       	push	r15
    1d4e:	0f 93       	push	r16
    1d50:	cf 93       	push	r28
    1d52:	df 93       	push	r29
    1d54:	2c 01       	movw	r4, r24
    1d56:	5b 01       	movw	r10, r22
    1d58:	4a 01       	movw	r8, r20
    1d5a:	39 01       	movw	r6, r18
    1d5c:	e6 01       	movw	r28, r12
    1d5e:	65 ea       	ldi	r22, 0xA5	; 165
    1d60:	70 e0       	ldi	r23, 0x00	; 0
    1d62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d66:	0e 94 df 35 	call	0x6bbe	; 0x6bbe <memset>
    1d6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d6e:	21 e0       	ldi	r18, 0x01	; 1
    1d70:	82 1a       	sub	r8, r18
    1d72:	91 08       	sbc	r9, r1
    1d74:	88 0e       	add	r8, r24
    1d76:	99 1e       	adc	r9, r25
    1d78:	a1 14       	cp	r10, r1
    1d7a:	b1 04       	cpc	r11, r1
    1d7c:	89 f4       	brne	.+34     	; 0x1da0 <prvInitialiseNewTask+0x6a>
    1d7e:	15 c0       	rjmp	.+42     	; 0x1daa <prvInitialiseNewTask+0x74>
    1d80:	82 2f       	mov	r24, r18
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	f5 01       	movw	r30, r10
    1d86:	e8 0f       	add	r30, r24
    1d88:	f9 1f       	adc	r31, r25
    1d8a:	30 81       	ld	r19, Z
    1d8c:	de 01       	movw	r26, r28
    1d8e:	a8 0f       	add	r26, r24
    1d90:	b9 1f       	adc	r27, r25
    1d92:	5d 96       	adiw	r26, 0x1d	; 29
    1d94:	3c 93       	st	X, r19
    1d96:	80 81       	ld	r24, Z
    1d98:	88 23       	and	r24, r24
    1d9a:	29 f0       	breq	.+10     	; 0x1da6 <prvInitialiseNewTask+0x70>
    1d9c:	2f 5f       	subi	r18, 0xFF	; 255
    1d9e:	01 c0       	rjmp	.+2      	; 0x1da2 <prvInitialiseNewTask+0x6c>
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	20 31       	cpi	r18, 0x10	; 16
    1da4:	68 f3       	brcs	.-38     	; 0x1d80 <prvInitialiseNewTask+0x4a>
    1da6:	1c a6       	std	Y+44, r1	; 0x2c
    1da8:	01 c0       	rjmp	.+2      	; 0x1dac <prvInitialiseNewTask+0x76>
    1daa:	1d 8e       	std	Y+29, r1	; 0x1d
    1dac:	0a 30       	cpi	r16, 0x0A	; 10
    1dae:	08 f0       	brcs	.+2      	; 0x1db2 <prvInitialiseNewTask+0x7c>
    1db0:	09 e0       	ldi	r16, 0x09	; 9
    1db2:	0a 8f       	std	Y+26, r16	; 0x1a
    1db4:	0d a7       	std	Y+45, r16	; 0x2d
    1db6:	1e a6       	std	Y+46, r1	; 0x2e
    1db8:	ce 01       	movw	r24, r28
    1dba:	02 96       	adiw	r24, 0x02	; 2
    1dbc:	0e 94 1a 06 	call	0xc34	; 0xc34 <vListInitialiseItem>
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	0e 96       	adiw	r24, 0x0e	; 14
    1dc4:	0e 94 1a 06 	call	0xc34	; 0xc34 <vListInitialiseItem>
    1dc8:	db 87       	std	Y+11, r29	; 0x0b
    1dca:	ca 87       	std	Y+10, r28	; 0x0a
    1dcc:	8a e0       	ldi	r24, 0x0A	; 10
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	a0 e0       	ldi	r26, 0x00	; 0
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	80 1b       	sub	r24, r16
    1dd6:	91 09       	sbc	r25, r1
    1dd8:	a1 09       	sbc	r26, r1
    1dda:	b1 09       	sbc	r27, r1
    1ddc:	8e 87       	std	Y+14, r24	; 0x0e
    1dde:	9f 87       	std	Y+15, r25	; 0x0f
    1de0:	a8 8b       	std	Y+16, r26	; 0x10
    1de2:	b9 8b       	std	Y+17, r27	; 0x11
    1de4:	df 8b       	std	Y+23, r29	; 0x17
    1de6:	ce 8b       	std	Y+22, r28	; 0x16
    1de8:	84 e0       	ldi	r24, 0x04	; 4
    1dea:	fe 01       	movw	r30, r28
    1dec:	bf 96       	adiw	r30, 0x2f	; 47
    1dee:	df 01       	movw	r26, r30
    1df0:	1d 92       	st	X+, r1
    1df2:	8a 95       	dec	r24
    1df4:	e9 f7       	brne	.-6      	; 0x1df0 <prvInitialiseNewTask+0xba>
    1df6:	1b aa       	std	Y+51, r1	; 0x33
    1df8:	a3 01       	movw	r20, r6
    1dfa:	b2 01       	movw	r22, r4
    1dfc:	c4 01       	movw	r24, r8
    1dfe:	0e 94 8e 06 	call	0xd1c	; 0xd1c <pxPortInitialiseStack>
    1e02:	99 83       	std	Y+1, r25	; 0x01
    1e04:	88 83       	st	Y, r24
    1e06:	e1 14       	cp	r14, r1
    1e08:	f1 04       	cpc	r15, r1
    1e0a:	19 f0       	breq	.+6      	; 0x1e12 <prvInitialiseNewTask+0xdc>
    1e0c:	f7 01       	movw	r30, r14
    1e0e:	d1 83       	std	Z+1, r29	; 0x01
    1e10:	c0 83       	st	Z, r28
    1e12:	df 91       	pop	r29
    1e14:	cf 91       	pop	r28
    1e16:	0f 91       	pop	r16
    1e18:	ff 90       	pop	r15
    1e1a:	ef 90       	pop	r14
    1e1c:	df 90       	pop	r13
    1e1e:	cf 90       	pop	r12
    1e20:	bf 90       	pop	r11
    1e22:	af 90       	pop	r10
    1e24:	9f 90       	pop	r9
    1e26:	8f 90       	pop	r8
    1e28:	7f 90       	pop	r7
    1e2a:	6f 90       	pop	r6
    1e2c:	5f 90       	pop	r5
    1e2e:	4f 90       	pop	r4
    1e30:	08 95       	ret

00001e32 <prvInitialiseTaskLists>:
    1e32:	cf 93       	push	r28
    1e34:	c0 e0       	ldi	r28, 0x00	; 0
    1e36:	09 c0       	rjmp	.+18     	; 0x1e4a <prvInitialiseTaskLists+0x18>
    1e38:	2b e0       	ldi	r18, 0x0B	; 11
    1e3a:	c2 9f       	mul	r28, r18
    1e3c:	c0 01       	movw	r24, r0
    1e3e:	11 24       	eor	r1, r1
    1e40:	8f 57       	subi	r24, 0x7F	; 127
    1e42:	9a 4e       	sbci	r25, 0xEA	; 234
    1e44:	0e 94 09 06 	call	0xc12	; 0xc12 <vListInitialise>
    1e48:	cf 5f       	subi	r28, 0xFF	; 255
    1e4a:	ca 30       	cpi	r28, 0x0A	; 10
    1e4c:	a8 f3       	brcs	.-22     	; 0x1e38 <prvInitialiseTaskLists+0x6>
    1e4e:	86 e7       	ldi	r24, 0x76	; 118
    1e50:	95 e1       	ldi	r25, 0x15	; 21
    1e52:	0e 94 09 06 	call	0xc12	; 0xc12 <vListInitialise>
    1e56:	8b e6       	ldi	r24, 0x6B	; 107
    1e58:	95 e1       	ldi	r25, 0x15	; 21
    1e5a:	0e 94 09 06 	call	0xc12	; 0xc12 <vListInitialise>
    1e5e:	8c e5       	ldi	r24, 0x5C	; 92
    1e60:	95 e1       	ldi	r25, 0x15	; 21
    1e62:	0e 94 09 06 	call	0xc12	; 0xc12 <vListInitialise>
    1e66:	81 e5       	ldi	r24, 0x51	; 81
    1e68:	95 e1       	ldi	r25, 0x15	; 21
    1e6a:	0e 94 09 06 	call	0xc12	; 0xc12 <vListInitialise>
    1e6e:	85 e4       	ldi	r24, 0x45	; 69
    1e70:	95 e1       	ldi	r25, 0x15	; 21
    1e72:	0e 94 09 06 	call	0xc12	; 0xc12 <vListInitialise>
    1e76:	86 e7       	ldi	r24, 0x76	; 118
    1e78:	95 e1       	ldi	r25, 0x15	; 21
    1e7a:	90 93 6a 15 	sts	0x156A, r25	; 0x80156a <pxDelayedTaskList+0x1>
    1e7e:	80 93 69 15 	sts	0x1569, r24	; 0x801569 <pxDelayedTaskList>
    1e82:	8b e6       	ldi	r24, 0x6B	; 107
    1e84:	95 e1       	ldi	r25, 0x15	; 21
    1e86:	90 93 68 15 	sts	0x1568, r25	; 0x801568 <pxOverflowDelayedTaskList+0x1>
    1e8a:	80 93 67 15 	sts	0x1567, r24	; 0x801567 <pxOverflowDelayedTaskList>
    1e8e:	cf 91       	pop	r28
    1e90:	08 95       	ret

00001e92 <prvAddNewTaskToReadyList>:
    1e92:	cf 93       	push	r28
    1e94:	df 93       	push	r29
    1e96:	ec 01       	movw	r28, r24
    1e98:	0f b6       	in	r0, 0x3f	; 63
    1e9a:	f8 94       	cli
    1e9c:	0f 92       	push	r0
    1e9e:	80 91 44 15 	lds	r24, 0x1544	; 0x801544 <uxCurrentNumberOfTasks>
    1ea2:	8f 5f       	subi	r24, 0xFF	; 255
    1ea4:	80 93 44 15 	sts	0x1544, r24	; 0x801544 <uxCurrentNumberOfTasks>
    1ea8:	80 91 ef 15 	lds	r24, 0x15EF	; 0x8015ef <pxCurrentTCB>
    1eac:	90 91 f0 15 	lds	r25, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    1eb0:	89 2b       	or	r24, r25
    1eb2:	51 f4       	brne	.+20     	; 0x1ec8 <prvAddNewTaskToReadyList+0x36>
    1eb4:	d0 93 f0 15 	sts	0x15F0, r29	; 0x8015f0 <pxCurrentTCB+0x1>
    1eb8:	c0 93 ef 15 	sts	0x15EF, r28	; 0x8015ef <pxCurrentTCB>
    1ebc:	80 91 44 15 	lds	r24, 0x1544	; 0x801544 <uxCurrentNumberOfTasks>
    1ec0:	81 30       	cpi	r24, 0x01	; 1
    1ec2:	91 f4       	brne	.+36     	; 0x1ee8 <prvAddNewTaskToReadyList+0x56>
    1ec4:	b6 df       	rcall	.-148    	; 0x1e32 <prvInitialiseTaskLists>
    1ec6:	10 c0       	rjmp	.+32     	; 0x1ee8 <prvAddNewTaskToReadyList+0x56>
    1ec8:	80 91 3e 15 	lds	r24, 0x153E	; 0x80153e <xSchedulerRunning>
    1ecc:	81 11       	cpse	r24, r1
    1ece:	0c c0       	rjmp	.+24     	; 0x1ee8 <prvAddNewTaskToReadyList+0x56>
    1ed0:	e0 91 ef 15 	lds	r30, 0x15EF	; 0x8015ef <pxCurrentTCB>
    1ed4:	f0 91 f0 15 	lds	r31, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    1ed8:	92 8d       	ldd	r25, Z+26	; 0x1a
    1eda:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1edc:	89 17       	cp	r24, r25
    1ede:	20 f0       	brcs	.+8      	; 0x1ee8 <prvAddNewTaskToReadyList+0x56>
    1ee0:	d0 93 f0 15 	sts	0x15F0, r29	; 0x8015f0 <pxCurrentTCB+0x1>
    1ee4:	c0 93 ef 15 	sts	0x15EF, r28	; 0x8015ef <pxCurrentTCB>
    1ee8:	80 91 37 15 	lds	r24, 0x1537	; 0x801537 <uxTaskNumber>
    1eec:	8f 5f       	subi	r24, 0xFF	; 255
    1eee:	80 93 37 15 	sts	0x1537, r24	; 0x801537 <uxTaskNumber>
    1ef2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1ef4:	80 91 3f 15 	lds	r24, 0x153F	; 0x80153f <uxTopReadyPriority>
    1ef8:	8e 17       	cp	r24, r30
    1efa:	10 f4       	brcc	.+4      	; 0x1f00 <prvAddNewTaskToReadyList+0x6e>
    1efc:	e0 93 3f 15 	sts	0x153F, r30	; 0x80153f <uxTopReadyPriority>
    1f00:	8b e0       	ldi	r24, 0x0B	; 11
    1f02:	8e 9f       	mul	r24, r30
    1f04:	f0 01       	movw	r30, r0
    1f06:	11 24       	eor	r1, r1
    1f08:	ef 57       	subi	r30, 0x7F	; 127
    1f0a:	fa 4e       	sbci	r31, 0xEA	; 234
    1f0c:	01 80       	ldd	r0, Z+1	; 0x01
    1f0e:	f2 81       	ldd	r31, Z+2	; 0x02
    1f10:	e0 2d       	mov	r30, r0
    1f12:	ff 83       	std	Y+7, r31	; 0x07
    1f14:	ee 83       	std	Y+6, r30	; 0x06
    1f16:	26 81       	ldd	r18, Z+6	; 0x06
    1f18:	37 81       	ldd	r19, Z+7	; 0x07
    1f1a:	39 87       	std	Y+9, r19	; 0x09
    1f1c:	28 87       	std	Y+8, r18	; 0x08
    1f1e:	a6 81       	ldd	r26, Z+6	; 0x06
    1f20:	b7 81       	ldd	r27, Z+7	; 0x07
    1f22:	9e 01       	movw	r18, r28
    1f24:	2e 5f       	subi	r18, 0xFE	; 254
    1f26:	3f 4f       	sbci	r19, 0xFF	; 255
    1f28:	15 96       	adiw	r26, 0x05	; 5
    1f2a:	3c 93       	st	X, r19
    1f2c:	2e 93       	st	-X, r18
    1f2e:	14 97       	sbiw	r26, 0x04	; 4
    1f30:	37 83       	std	Z+7, r19	; 0x07
    1f32:	26 83       	std	Z+6, r18	; 0x06
    1f34:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1f36:	8e 9f       	mul	r24, r30
    1f38:	f0 01       	movw	r30, r0
    1f3a:	11 24       	eor	r1, r1
    1f3c:	ef 57       	subi	r30, 0x7F	; 127
    1f3e:	fa 4e       	sbci	r31, 0xEA	; 234
    1f40:	fd 87       	std	Y+13, r31	; 0x0d
    1f42:	ec 87       	std	Y+12, r30	; 0x0c
    1f44:	80 81       	ld	r24, Z
    1f46:	8f 5f       	subi	r24, 0xFF	; 255
    1f48:	80 83       	st	Z, r24
    1f4a:	0f 90       	pop	r0
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	80 91 3e 15 	lds	r24, 0x153E	; 0x80153e <xSchedulerRunning>
    1f52:	88 23       	and	r24, r24
    1f54:	51 f0       	breq	.+20     	; 0x1f6a <prvAddNewTaskToReadyList+0xd8>
    1f56:	e0 91 ef 15 	lds	r30, 0x15EF	; 0x8015ef <pxCurrentTCB>
    1f5a:	f0 91 f0 15 	lds	r31, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    1f5e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f60:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f62:	98 17       	cp	r25, r24
    1f64:	10 f4       	brcc	.+4      	; 0x1f6a <prvAddNewTaskToReadyList+0xd8>
    1f66:	0e 94 d7 06 	call	0xdae	; 0xdae <vPortYield>
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	08 95       	ret

00001f70 <prvCheckTasksWaitingTermination>:
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
    1f74:	1b c0       	rjmp	.+54     	; 0x1fac <prvCheckTasksWaitingTermination+0x3c>
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	0f 92       	push	r0
    1f7c:	e0 91 58 15 	lds	r30, 0x1558	; 0x801558 <xTasksWaitingTermination+0x7>
    1f80:	f0 91 59 15 	lds	r31, 0x1559	; 0x801559 <xTasksWaitingTermination+0x8>
    1f84:	c0 85       	ldd	r28, Z+8	; 0x08
    1f86:	d1 85       	ldd	r29, Z+9	; 0x09
    1f88:	ce 01       	movw	r24, r28
    1f8a:	02 96       	adiw	r24, 0x02	; 2
    1f8c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <uxListRemove>
    1f90:	80 91 44 15 	lds	r24, 0x1544	; 0x801544 <uxCurrentNumberOfTasks>
    1f94:	81 50       	subi	r24, 0x01	; 1
    1f96:	80 93 44 15 	sts	0x1544, r24	; 0x801544 <uxCurrentNumberOfTasks>
    1f9a:	80 91 50 15 	lds	r24, 0x1550	; 0x801550 <uxDeletedTasksWaitingCleanUp>
    1f9e:	81 50       	subi	r24, 0x01	; 1
    1fa0:	80 93 50 15 	sts	0x1550, r24	; 0x801550 <uxDeletedTasksWaitingCleanUp>
    1fa4:	0f 90       	pop	r0
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	ce 01       	movw	r24, r28
    1faa:	b8 de       	rcall	.-656    	; 0x1d1c <prvDeleteTCB>
    1fac:	80 91 50 15 	lds	r24, 0x1550	; 0x801550 <uxDeletedTasksWaitingCleanUp>
    1fb0:	81 11       	cpse	r24, r1
    1fb2:	e1 cf       	rjmp	.-62     	; 0x1f76 <prvCheckTasksWaitingTermination+0x6>
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	08 95       	ret

00001fba <prvAddCurrentTaskToDelayedList>:
    1fba:	8f 92       	push	r8
    1fbc:	9f 92       	push	r9
    1fbe:	af 92       	push	r10
    1fc0:	bf 92       	push	r11
    1fc2:	cf 92       	push	r12
    1fc4:	df 92       	push	r13
    1fc6:	ef 92       	push	r14
    1fc8:	ff 92       	push	r15
    1fca:	cf 93       	push	r28
    1fcc:	df 93       	push	r29
    1fce:	6b 01       	movw	r12, r22
    1fd0:	7c 01       	movw	r14, r24
    1fd2:	c4 2f       	mov	r28, r20
    1fd4:	80 90 40 15 	lds	r8, 0x1540	; 0x801540 <xTickCount>
    1fd8:	90 90 41 15 	lds	r9, 0x1541	; 0x801541 <xTickCount+0x1>
    1fdc:	a0 90 42 15 	lds	r10, 0x1542	; 0x801542 <xTickCount+0x2>
    1fe0:	b0 90 43 15 	lds	r11, 0x1543	; 0x801543 <xTickCount+0x3>
    1fe4:	80 91 ef 15 	lds	r24, 0x15EF	; 0x8015ef <pxCurrentTCB>
    1fe8:	90 91 f0 15 	lds	r25, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    1fec:	02 96       	adiw	r24, 0x02	; 2
    1fee:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <uxListRemove>
    1ff2:	8f ef       	ldi	r24, 0xFF	; 255
    1ff4:	c8 16       	cp	r12, r24
    1ff6:	d8 06       	cpc	r13, r24
    1ff8:	e8 06       	cpc	r14, r24
    1ffa:	f8 06       	cpc	r15, r24
    1ffc:	b1 f5       	brne	.+108    	; 0x206a <__DATA_REGION_LENGTH__+0x6a>
    1ffe:	cc 23       	and	r28, r28
    2000:	a1 f1       	breq	.+104    	; 0x206a <__DATA_REGION_LENGTH__+0x6a>
    2002:	e5 e4       	ldi	r30, 0x45	; 69
    2004:	f5 e1       	ldi	r31, 0x15	; 21
    2006:	a1 81       	ldd	r26, Z+1	; 0x01
    2008:	b2 81       	ldd	r27, Z+2	; 0x02
    200a:	c0 91 ef 15 	lds	r28, 0x15EF	; 0x8015ef <pxCurrentTCB>
    200e:	d0 91 f0 15 	lds	r29, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    2012:	bf 83       	std	Y+7, r27	; 0x07
    2014:	ae 83       	std	Y+6, r26	; 0x06
    2016:	c0 91 ef 15 	lds	r28, 0x15EF	; 0x8015ef <pxCurrentTCB>
    201a:	d0 91 f0 15 	lds	r29, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    201e:	16 96       	adiw	r26, 0x06	; 6
    2020:	8d 91       	ld	r24, X+
    2022:	9c 91       	ld	r25, X
    2024:	17 97       	sbiw	r26, 0x07	; 7
    2026:	99 87       	std	Y+9, r25	; 0x09
    2028:	88 87       	std	Y+8, r24	; 0x08
    202a:	16 96       	adiw	r26, 0x06	; 6
    202c:	cd 91       	ld	r28, X+
    202e:	dc 91       	ld	r29, X
    2030:	17 97       	sbiw	r26, 0x07	; 7
    2032:	80 91 ef 15 	lds	r24, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2036:	90 91 f0 15 	lds	r25, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    203a:	02 96       	adiw	r24, 0x02	; 2
    203c:	9d 83       	std	Y+5, r25	; 0x05
    203e:	8c 83       	std	Y+4, r24	; 0x04
    2040:	80 91 ef 15 	lds	r24, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2044:	90 91 f0 15 	lds	r25, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    2048:	02 96       	adiw	r24, 0x02	; 2
    204a:	17 96       	adiw	r26, 0x07	; 7
    204c:	9c 93       	st	X, r25
    204e:	8e 93       	st	-X, r24
    2050:	16 97       	sbiw	r26, 0x06	; 6
    2052:	a0 91 ef 15 	lds	r26, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2056:	b0 91 f0 15 	lds	r27, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    205a:	1d 96       	adiw	r26, 0x0d	; 13
    205c:	fc 93       	st	X, r31
    205e:	ee 93       	st	-X, r30
    2060:	1c 97       	sbiw	r26, 0x0c	; 12
    2062:	80 81       	ld	r24, Z
    2064:	8f 5f       	subi	r24, 0xFF	; 255
    2066:	80 83       	st	Z, r24
    2068:	3f c0       	rjmp	.+126    	; 0x20e8 <__DATA_REGION_LENGTH__+0xe8>
    206a:	c8 0c       	add	r12, r8
    206c:	d9 1c       	adc	r13, r9
    206e:	ea 1c       	adc	r14, r10
    2070:	fb 1c       	adc	r15, r11
    2072:	e0 91 ef 15 	lds	r30, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2076:	f0 91 f0 15 	lds	r31, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    207a:	c2 82       	std	Z+2, r12	; 0x02
    207c:	d3 82       	std	Z+3, r13	; 0x03
    207e:	e4 82       	std	Z+4, r14	; 0x04
    2080:	f5 82       	std	Z+5, r15	; 0x05
    2082:	c8 14       	cp	r12, r8
    2084:	d9 04       	cpc	r13, r9
    2086:	ea 04       	cpc	r14, r10
    2088:	fb 04       	cpc	r15, r11
    208a:	68 f4       	brcc	.+26     	; 0x20a6 <__DATA_REGION_LENGTH__+0xa6>
    208c:	60 91 ef 15 	lds	r22, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2090:	70 91 f0 15 	lds	r23, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    2094:	80 91 67 15 	lds	r24, 0x1567	; 0x801567 <pxOverflowDelayedTaskList>
    2098:	90 91 68 15 	lds	r25, 0x1568	; 0x801568 <pxOverflowDelayedTaskList+0x1>
    209c:	6e 5f       	subi	r22, 0xFE	; 254
    209e:	7f 4f       	sbci	r23, 0xFF	; 255
    20a0:	0e 94 1e 06 	call	0xc3c	; 0xc3c <vListInsert>
    20a4:	21 c0       	rjmp	.+66     	; 0x20e8 <__DATA_REGION_LENGTH__+0xe8>
    20a6:	60 91 ef 15 	lds	r22, 0x15EF	; 0x8015ef <pxCurrentTCB>
    20aa:	70 91 f0 15 	lds	r23, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    20ae:	80 91 69 15 	lds	r24, 0x1569	; 0x801569 <pxDelayedTaskList>
    20b2:	90 91 6a 15 	lds	r25, 0x156A	; 0x80156a <pxDelayedTaskList+0x1>
    20b6:	6e 5f       	subi	r22, 0xFE	; 254
    20b8:	7f 4f       	sbci	r23, 0xFF	; 255
    20ba:	0e 94 1e 06 	call	0xc3c	; 0xc3c <vListInsert>
    20be:	80 91 33 15 	lds	r24, 0x1533	; 0x801533 <xNextTaskUnblockTime>
    20c2:	90 91 34 15 	lds	r25, 0x1534	; 0x801534 <xNextTaskUnblockTime+0x1>
    20c6:	a0 91 35 15 	lds	r26, 0x1535	; 0x801535 <xNextTaskUnblockTime+0x2>
    20ca:	b0 91 36 15 	lds	r27, 0x1536	; 0x801536 <xNextTaskUnblockTime+0x3>
    20ce:	c8 16       	cp	r12, r24
    20d0:	d9 06       	cpc	r13, r25
    20d2:	ea 06       	cpc	r14, r26
    20d4:	fb 06       	cpc	r15, r27
    20d6:	40 f4       	brcc	.+16     	; 0x20e8 <__DATA_REGION_LENGTH__+0xe8>
    20d8:	c0 92 33 15 	sts	0x1533, r12	; 0x801533 <xNextTaskUnblockTime>
    20dc:	d0 92 34 15 	sts	0x1534, r13	; 0x801534 <xNextTaskUnblockTime+0x1>
    20e0:	e0 92 35 15 	sts	0x1535, r14	; 0x801535 <xNextTaskUnblockTime+0x2>
    20e4:	f0 92 36 15 	sts	0x1536, r15	; 0x801536 <xNextTaskUnblockTime+0x3>
    20e8:	df 91       	pop	r29
    20ea:	cf 91       	pop	r28
    20ec:	ff 90       	pop	r15
    20ee:	ef 90       	pop	r14
    20f0:	df 90       	pop	r13
    20f2:	cf 90       	pop	r12
    20f4:	bf 90       	pop	r11
    20f6:	af 90       	pop	r10
    20f8:	9f 90       	pop	r9
    20fa:	8f 90       	pop	r8
    20fc:	08 95       	ret

000020fe <xTaskCreate>:
    20fe:	2f 92       	push	r2
    2100:	3f 92       	push	r3
    2102:	4f 92       	push	r4
    2104:	5f 92       	push	r5
    2106:	6f 92       	push	r6
    2108:	7f 92       	push	r7
    210a:	8f 92       	push	r8
    210c:	9f 92       	push	r9
    210e:	af 92       	push	r10
    2110:	bf 92       	push	r11
    2112:	cf 92       	push	r12
    2114:	df 92       	push	r13
    2116:	ef 92       	push	r14
    2118:	ff 92       	push	r15
    211a:	0f 93       	push	r16
    211c:	cf 93       	push	r28
    211e:	df 93       	push	r29
    2120:	3c 01       	movw	r6, r24
    2122:	1b 01       	movw	r2, r22
    2124:	4a 01       	movw	r8, r20
    2126:	29 01       	movw	r4, r18
    2128:	ca 01       	movw	r24, r20
    212a:	0e 94 23 05 	call	0xa46	; 0xa46 <pvPortMalloc>
    212e:	6c 01       	movw	r12, r24
    2130:	89 2b       	or	r24, r25
    2132:	71 f0       	breq	.+28     	; 0x2150 <xTaskCreate+0x52>
    2134:	84 e3       	ldi	r24, 0x34	; 52
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	0e 94 23 05 	call	0xa46	; 0xa46 <pvPortMalloc>
    213c:	ec 01       	movw	r28, r24
    213e:	89 2b       	or	r24, r25
    2140:	19 f0       	breq	.+6      	; 0x2148 <xTaskCreate+0x4a>
    2142:	dc 8e       	std	Y+28, r13	; 0x1c
    2144:	cb 8e       	std	Y+27, r12	; 0x1b
    2146:	06 c0       	rjmp	.+12     	; 0x2154 <xTaskCreate+0x56>
    2148:	c6 01       	movw	r24, r12
    214a:	0e 94 cc 05 	call	0xb98	; 0xb98 <vPortFree>
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <xTaskCreate+0x56>
    2150:	c0 e0       	ldi	r28, 0x00	; 0
    2152:	d0 e0       	ldi	r29, 0x00	; 0
    2154:	20 97       	sbiw	r28, 0x00	; 0
    2156:	61 f0       	breq	.+24     	; 0x2170 <xTaskCreate+0x72>
    2158:	a1 2c       	mov	r10, r1
    215a:	b1 2c       	mov	r11, r1
    215c:	6e 01       	movw	r12, r28
    215e:	92 01       	movw	r18, r4
    2160:	a4 01       	movw	r20, r8
    2162:	b1 01       	movw	r22, r2
    2164:	c3 01       	movw	r24, r6
    2166:	e7 dd       	rcall	.-1074   	; 0x1d36 <prvInitialiseNewTask>
    2168:	ce 01       	movw	r24, r28
    216a:	93 de       	rcall	.-730    	; 0x1e92 <prvAddNewTaskToReadyList>
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	01 c0       	rjmp	.+2      	; 0x2172 <xTaskCreate+0x74>
    2170:	8f ef       	ldi	r24, 0xFF	; 255
    2172:	df 91       	pop	r29
    2174:	cf 91       	pop	r28
    2176:	0f 91       	pop	r16
    2178:	ff 90       	pop	r15
    217a:	ef 90       	pop	r14
    217c:	df 90       	pop	r13
    217e:	cf 90       	pop	r12
    2180:	bf 90       	pop	r11
    2182:	af 90       	pop	r10
    2184:	9f 90       	pop	r9
    2186:	8f 90       	pop	r8
    2188:	7f 90       	pop	r7
    218a:	6f 90       	pop	r6
    218c:	5f 90       	pop	r5
    218e:	4f 90       	pop	r4
    2190:	3f 90       	pop	r3
    2192:	2f 90       	pop	r2
    2194:	08 95       	ret

00002196 <vTaskStartScheduler>:
    2196:	ef 92       	push	r14
    2198:	ff 92       	push	r15
    219a:	0f 93       	push	r16
    219c:	0f 2e       	mov	r0, r31
    219e:	f1 e3       	ldi	r31, 0x31	; 49
    21a0:	ef 2e       	mov	r14, r31
    21a2:	f5 e1       	ldi	r31, 0x15	; 21
    21a4:	ff 2e       	mov	r15, r31
    21a6:	f0 2d       	mov	r31, r0
    21a8:	00 e0       	ldi	r16, 0x00	; 0
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 ec       	ldi	r20, 0xC0	; 192
    21b0:	50 e0       	ldi	r21, 0x00	; 0
    21b2:	68 e8       	ldi	r22, 0x88	; 136
    21b4:	73 e0       	ldi	r23, 0x03	; 3
    21b6:	8e e4       	ldi	r24, 0x4E	; 78
    21b8:	91 e0       	ldi	r25, 0x01	; 1
    21ba:	a1 df       	rcall	.-190    	; 0x20fe <xTaskCreate>
    21bc:	81 30       	cpi	r24, 0x01	; 1
    21be:	11 f4       	brne	.+4      	; 0x21c4 <vTaskStartScheduler+0x2e>
    21c0:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <xTimerCreateTimerTask>
    21c4:	81 30       	cpi	r24, 0x01	; 1
    21c6:	c9 f4       	brne	.+50     	; 0x21fa <vTaskStartScheduler+0x64>
    21c8:	f8 94       	cli
    21ca:	8f ef       	ldi	r24, 0xFF	; 255
    21cc:	9f ef       	ldi	r25, 0xFF	; 255
    21ce:	dc 01       	movw	r26, r24
    21d0:	80 93 33 15 	sts	0x1533, r24	; 0x801533 <xNextTaskUnblockTime>
    21d4:	90 93 34 15 	sts	0x1534, r25	; 0x801534 <xNextTaskUnblockTime+0x1>
    21d8:	a0 93 35 15 	sts	0x1535, r26	; 0x801535 <xNextTaskUnblockTime+0x2>
    21dc:	b0 93 36 15 	sts	0x1536, r27	; 0x801536 <xNextTaskUnblockTime+0x3>
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	80 93 3e 15 	sts	0x153E, r24	; 0x80153e <xSchedulerRunning>
    21e6:	10 92 40 15 	sts	0x1540, r1	; 0x801540 <xTickCount>
    21ea:	10 92 41 15 	sts	0x1541, r1	; 0x801541 <xTickCount+0x1>
    21ee:	10 92 42 15 	sts	0x1542, r1	; 0x801542 <xTickCount+0x2>
    21f2:	10 92 43 15 	sts	0x1543, r1	; 0x801543 <xTickCount+0x3>
    21f6:	0e 94 a5 06 	call	0xd4a	; 0xd4a <xPortStartScheduler>
    21fa:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    21fe:	0f 91       	pop	r16
    2200:	ff 90       	pop	r15
    2202:	ef 90       	pop	r14
    2204:	08 95       	ret

00002206 <vTaskSuspendAll>:
    2206:	80 91 30 15 	lds	r24, 0x1530	; 0x801530 <uxSchedulerSuspended>
    220a:	8f 5f       	subi	r24, 0xFF	; 255
    220c:	80 93 30 15 	sts	0x1530, r24	; 0x801530 <uxSchedulerSuspended>
    2210:	08 95       	ret

00002212 <xTaskGetTickCount>:
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	0f 92       	push	r0
    2218:	60 91 40 15 	lds	r22, 0x1540	; 0x801540 <xTickCount>
    221c:	70 91 41 15 	lds	r23, 0x1541	; 0x801541 <xTickCount+0x1>
    2220:	80 91 42 15 	lds	r24, 0x1542	; 0x801542 <xTickCount+0x2>
    2224:	90 91 43 15 	lds	r25, 0x1543	; 0x801543 <xTickCount+0x3>
    2228:	0f 90       	pop	r0
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	08 95       	ret

0000222e <xTaskIncrementTick>:
    222e:	cf 92       	push	r12
    2230:	df 92       	push	r13
    2232:	ef 92       	push	r14
    2234:	ff 92       	push	r15
    2236:	cf 93       	push	r28
    2238:	df 93       	push	r29
    223a:	80 91 30 15 	lds	r24, 0x1530	; 0x801530 <uxSchedulerSuspended>
    223e:	81 11       	cpse	r24, r1
    2240:	05 c1       	rjmp	.+522    	; 0x244c <xTaskIncrementTick+0x21e>
    2242:	c0 90 40 15 	lds	r12, 0x1540	; 0x801540 <xTickCount>
    2246:	d0 90 41 15 	lds	r13, 0x1541	; 0x801541 <xTickCount+0x1>
    224a:	e0 90 42 15 	lds	r14, 0x1542	; 0x801542 <xTickCount+0x2>
    224e:	f0 90 43 15 	lds	r15, 0x1543	; 0x801543 <xTickCount+0x3>
    2252:	8f ef       	ldi	r24, 0xFF	; 255
    2254:	c8 1a       	sub	r12, r24
    2256:	d8 0a       	sbc	r13, r24
    2258:	e8 0a       	sbc	r14, r24
    225a:	f8 0a       	sbc	r15, r24
    225c:	c0 92 40 15 	sts	0x1540, r12	; 0x801540 <xTickCount>
    2260:	d0 92 41 15 	sts	0x1541, r13	; 0x801541 <xTickCount+0x1>
    2264:	e0 92 42 15 	sts	0x1542, r14	; 0x801542 <xTickCount+0x2>
    2268:	f0 92 43 15 	sts	0x1543, r15	; 0x801543 <xTickCount+0x3>
    226c:	c1 14       	cp	r12, r1
    226e:	d1 04       	cpc	r13, r1
    2270:	e1 04       	cpc	r14, r1
    2272:	f1 04       	cpc	r15, r1
    2274:	b1 f4       	brne	.+44     	; 0x22a2 <xTaskIncrementTick+0x74>
    2276:	80 91 69 15 	lds	r24, 0x1569	; 0x801569 <pxDelayedTaskList>
    227a:	90 91 6a 15 	lds	r25, 0x156A	; 0x80156a <pxDelayedTaskList+0x1>
    227e:	20 91 67 15 	lds	r18, 0x1567	; 0x801567 <pxOverflowDelayedTaskList>
    2282:	30 91 68 15 	lds	r19, 0x1568	; 0x801568 <pxOverflowDelayedTaskList+0x1>
    2286:	30 93 6a 15 	sts	0x156A, r19	; 0x80156a <pxDelayedTaskList+0x1>
    228a:	20 93 69 15 	sts	0x1569, r18	; 0x801569 <pxDelayedTaskList>
    228e:	90 93 68 15 	sts	0x1568, r25	; 0x801568 <pxOverflowDelayedTaskList+0x1>
    2292:	80 93 67 15 	sts	0x1567, r24	; 0x801567 <pxOverflowDelayedTaskList>
    2296:	80 91 38 15 	lds	r24, 0x1538	; 0x801538 <xNumOfOverflows>
    229a:	8f 5f       	subi	r24, 0xFF	; 255
    229c:	80 93 38 15 	sts	0x1538, r24	; 0x801538 <xNumOfOverflows>
    22a0:	16 dd       	rcall	.-1492   	; 0x1cce <prvResetNextTaskUnblockTime>
    22a2:	80 91 33 15 	lds	r24, 0x1533	; 0x801533 <xNextTaskUnblockTime>
    22a6:	90 91 34 15 	lds	r25, 0x1534	; 0x801534 <xNextTaskUnblockTime+0x1>
    22aa:	a0 91 35 15 	lds	r26, 0x1535	; 0x801535 <xNextTaskUnblockTime+0x2>
    22ae:	b0 91 36 15 	lds	r27, 0x1536	; 0x801536 <xNextTaskUnblockTime+0x3>
    22b2:	c8 16       	cp	r12, r24
    22b4:	d9 06       	cpc	r13, r25
    22b6:	ea 06       	cpc	r14, r26
    22b8:	fb 06       	cpc	r15, r27
    22ba:	20 f4       	brcc	.+8      	; 0x22c4 <xTaskIncrementTick+0x96>
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	b2 c0       	rjmp	.+356    	; 0x2424 <xTaskIncrementTick+0x1f6>
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	01 c0       	rjmp	.+2      	; 0x22c6 <xTaskIncrementTick+0x98>
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	e0 91 69 15 	lds	r30, 0x1569	; 0x801569 <pxDelayedTaskList>
    22ca:	f0 91 6a 15 	lds	r31, 0x156A	; 0x80156a <pxDelayedTaskList+0x1>
    22ce:	90 81       	ld	r25, Z
    22d0:	91 11       	cpse	r25, r1
    22d2:	0c c0       	rjmp	.+24     	; 0x22ec <xTaskIncrementTick+0xbe>
    22d4:	4f ef       	ldi	r20, 0xFF	; 255
    22d6:	5f ef       	ldi	r21, 0xFF	; 255
    22d8:	ba 01       	movw	r22, r20
    22da:	40 93 33 15 	sts	0x1533, r20	; 0x801533 <xNextTaskUnblockTime>
    22de:	50 93 34 15 	sts	0x1534, r21	; 0x801534 <xNextTaskUnblockTime+0x1>
    22e2:	60 93 35 15 	sts	0x1535, r22	; 0x801535 <xNextTaskUnblockTime+0x2>
    22e6:	70 93 36 15 	sts	0x1536, r23	; 0x801536 <xNextTaskUnblockTime+0x3>
    22ea:	9c c0       	rjmp	.+312    	; 0x2424 <xTaskIncrementTick+0x1f6>
    22ec:	e0 91 69 15 	lds	r30, 0x1569	; 0x801569 <pxDelayedTaskList>
    22f0:	f0 91 6a 15 	lds	r31, 0x156A	; 0x80156a <pxDelayedTaskList+0x1>
    22f4:	07 80       	ldd	r0, Z+7	; 0x07
    22f6:	f0 85       	ldd	r31, Z+8	; 0x08
    22f8:	e0 2d       	mov	r30, r0
    22fa:	00 84       	ldd	r0, Z+8	; 0x08
    22fc:	f1 85       	ldd	r31, Z+9	; 0x09
    22fe:	e0 2d       	mov	r30, r0
    2300:	42 81       	ldd	r20, Z+2	; 0x02
    2302:	53 81       	ldd	r21, Z+3	; 0x03
    2304:	64 81       	ldd	r22, Z+4	; 0x04
    2306:	75 81       	ldd	r23, Z+5	; 0x05
    2308:	c4 16       	cp	r12, r20
    230a:	d5 06       	cpc	r13, r21
    230c:	e6 06       	cpc	r14, r22
    230e:	f7 06       	cpc	r15, r23
    2310:	48 f4       	brcc	.+18     	; 0x2324 <xTaskIncrementTick+0xf6>
    2312:	40 93 33 15 	sts	0x1533, r20	; 0x801533 <xNextTaskUnblockTime>
    2316:	50 93 34 15 	sts	0x1534, r21	; 0x801534 <xNextTaskUnblockTime+0x1>
    231a:	60 93 35 15 	sts	0x1535, r22	; 0x801535 <xNextTaskUnblockTime+0x2>
    231e:	70 93 36 15 	sts	0x1536, r23	; 0x801536 <xNextTaskUnblockTime+0x3>
    2322:	80 c0       	rjmp	.+256    	; 0x2424 <xTaskIncrementTick+0x1f6>
    2324:	a4 85       	ldd	r26, Z+12	; 0x0c
    2326:	b5 85       	ldd	r27, Z+13	; 0x0d
    2328:	c6 81       	ldd	r28, Z+6	; 0x06
    232a:	d7 81       	ldd	r29, Z+7	; 0x07
    232c:	20 85       	ldd	r18, Z+8	; 0x08
    232e:	31 85       	ldd	r19, Z+9	; 0x09
    2330:	3f 83       	std	Y+7, r19	; 0x07
    2332:	2e 83       	std	Y+6, r18	; 0x06
    2334:	c0 85       	ldd	r28, Z+8	; 0x08
    2336:	d1 85       	ldd	r29, Z+9	; 0x09
    2338:	26 81       	ldd	r18, Z+6	; 0x06
    233a:	37 81       	ldd	r19, Z+7	; 0x07
    233c:	3d 83       	std	Y+5, r19	; 0x05
    233e:	2c 83       	std	Y+4, r18	; 0x04
    2340:	11 96       	adiw	r26, 0x01	; 1
    2342:	4d 91       	ld	r20, X+
    2344:	5c 91       	ld	r21, X
    2346:	12 97       	sbiw	r26, 0x02	; 2
    2348:	9f 01       	movw	r18, r30
    234a:	2e 5f       	subi	r18, 0xFE	; 254
    234c:	3f 4f       	sbci	r19, 0xFF	; 255
    234e:	42 17       	cp	r20, r18
    2350:	53 07       	cpc	r21, r19
    2352:	31 f4       	brne	.+12     	; 0x2360 <xTaskIncrementTick+0x132>
    2354:	40 85       	ldd	r20, Z+8	; 0x08
    2356:	51 85       	ldd	r21, Z+9	; 0x09
    2358:	12 96       	adiw	r26, 0x02	; 2
    235a:	5c 93       	st	X, r21
    235c:	4e 93       	st	-X, r20
    235e:	11 97       	sbiw	r26, 0x01	; 1
    2360:	15 86       	std	Z+13, r1	; 0x0d
    2362:	14 86       	std	Z+12, r1	; 0x0c
    2364:	9c 91       	ld	r25, X
    2366:	91 50       	subi	r25, 0x01	; 1
    2368:	9c 93       	st	X, r25
    236a:	a0 8d       	ldd	r26, Z+24	; 0x18
    236c:	b1 8d       	ldd	r27, Z+25	; 0x19
    236e:	10 97       	sbiw	r26, 0x00	; 0
    2370:	09 f1       	breq	.+66     	; 0x23b4 <xTaskIncrementTick+0x186>
    2372:	c2 89       	ldd	r28, Z+18	; 0x12
    2374:	d3 89       	ldd	r29, Z+19	; 0x13
    2376:	44 89       	ldd	r20, Z+20	; 0x14
    2378:	55 89       	ldd	r21, Z+21	; 0x15
    237a:	5f 83       	std	Y+7, r21	; 0x07
    237c:	4e 83       	std	Y+6, r20	; 0x06
    237e:	c4 89       	ldd	r28, Z+20	; 0x14
    2380:	d5 89       	ldd	r29, Z+21	; 0x15
    2382:	42 89       	ldd	r20, Z+18	; 0x12
    2384:	53 89       	ldd	r21, Z+19	; 0x13
    2386:	5d 83       	std	Y+5, r21	; 0x05
    2388:	4c 83       	std	Y+4, r20	; 0x04
    238a:	11 96       	adiw	r26, 0x01	; 1
    238c:	6d 91       	ld	r22, X+
    238e:	7c 91       	ld	r23, X
    2390:	12 97       	sbiw	r26, 0x02	; 2
    2392:	af 01       	movw	r20, r30
    2394:	42 5f       	subi	r20, 0xF2	; 242
    2396:	5f 4f       	sbci	r21, 0xFF	; 255
    2398:	64 17       	cp	r22, r20
    239a:	75 07       	cpc	r23, r21
    239c:	31 f4       	brne	.+12     	; 0x23aa <xTaskIncrementTick+0x17c>
    239e:	44 89       	ldd	r20, Z+20	; 0x14
    23a0:	55 89       	ldd	r21, Z+21	; 0x15
    23a2:	12 96       	adiw	r26, 0x02	; 2
    23a4:	5c 93       	st	X, r21
    23a6:	4e 93       	st	-X, r20
    23a8:	11 97       	sbiw	r26, 0x01	; 1
    23aa:	11 8e       	std	Z+25, r1	; 0x19
    23ac:	10 8e       	std	Z+24, r1	; 0x18
    23ae:	9c 91       	ld	r25, X
    23b0:	91 50       	subi	r25, 0x01	; 1
    23b2:	9c 93       	st	X, r25
    23b4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    23b6:	90 91 3f 15 	lds	r25, 0x153F	; 0x80153f <uxTopReadyPriority>
    23ba:	9a 17       	cp	r25, r26
    23bc:	10 f4       	brcc	.+4      	; 0x23c2 <xTaskIncrementTick+0x194>
    23be:	a0 93 3f 15 	sts	0x153F, r26	; 0x80153f <uxTopReadyPriority>
    23c2:	9b e0       	ldi	r25, 0x0B	; 11
    23c4:	9a 9f       	mul	r25, r26
    23c6:	d0 01       	movw	r26, r0
    23c8:	11 24       	eor	r1, r1
    23ca:	af 57       	subi	r26, 0x7F	; 127
    23cc:	ba 4e       	sbci	r27, 0xEA	; 234
    23ce:	11 96       	adiw	r26, 0x01	; 1
    23d0:	0d 90       	ld	r0, X+
    23d2:	bc 91       	ld	r27, X
    23d4:	a0 2d       	mov	r26, r0
    23d6:	b7 83       	std	Z+7, r27	; 0x07
    23d8:	a6 83       	std	Z+6, r26	; 0x06
    23da:	16 96       	adiw	r26, 0x06	; 6
    23dc:	4d 91       	ld	r20, X+
    23de:	5c 91       	ld	r21, X
    23e0:	17 97       	sbiw	r26, 0x07	; 7
    23e2:	51 87       	std	Z+9, r21	; 0x09
    23e4:	40 87       	std	Z+8, r20	; 0x08
    23e6:	16 96       	adiw	r26, 0x06	; 6
    23e8:	cd 91       	ld	r28, X+
    23ea:	dc 91       	ld	r29, X
    23ec:	17 97       	sbiw	r26, 0x07	; 7
    23ee:	3d 83       	std	Y+5, r19	; 0x05
    23f0:	2c 83       	std	Y+4, r18	; 0x04
    23f2:	17 96       	adiw	r26, 0x07	; 7
    23f4:	3c 93       	st	X, r19
    23f6:	2e 93       	st	-X, r18
    23f8:	16 97       	sbiw	r26, 0x06	; 6
    23fa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    23fc:	9a 9f       	mul	r25, r26
    23fe:	d0 01       	movw	r26, r0
    2400:	11 24       	eor	r1, r1
    2402:	af 57       	subi	r26, 0x7F	; 127
    2404:	ba 4e       	sbci	r27, 0xEA	; 234
    2406:	b5 87       	std	Z+13, r27	; 0x0d
    2408:	a4 87       	std	Z+12, r26	; 0x0c
    240a:	9c 91       	ld	r25, X
    240c:	9f 5f       	subi	r25, 0xFF	; 255
    240e:	9c 93       	st	X, r25
    2410:	22 8d       	ldd	r18, Z+26	; 0x1a
    2412:	e0 91 ef 15 	lds	r30, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2416:	f0 91 f0 15 	lds	r31, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    241a:	92 8d       	ldd	r25, Z+26	; 0x1a
    241c:	29 17       	cp	r18, r25
    241e:	08 f0       	brcs	.+2      	; 0x2422 <xTaskIncrementTick+0x1f4>
    2420:	4f cf       	rjmp	.-354    	; 0x22c0 <xTaskIncrementTick+0x92>
    2422:	51 cf       	rjmp	.-350    	; 0x22c6 <xTaskIncrementTick+0x98>
    2424:	e0 91 ef 15 	lds	r30, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2428:	f0 91 f0 15 	lds	r31, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    242c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    242e:	9b e0       	ldi	r25, 0x0B	; 11
    2430:	e9 9f       	mul	r30, r25
    2432:	f0 01       	movw	r30, r0
    2434:	11 24       	eor	r1, r1
    2436:	ef 57       	subi	r30, 0x7F	; 127
    2438:	fa 4e       	sbci	r31, 0xEA	; 234
    243a:	90 81       	ld	r25, Z
    243c:	92 30       	cpi	r25, 0x02	; 2
    243e:	08 f0       	brcs	.+2      	; 0x2442 <xTaskIncrementTick+0x214>
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	90 91 39 15 	lds	r25, 0x1539	; 0x801539 <xYieldPending>
    2446:	91 11       	cpse	r25, r1
    2448:	16 c0       	rjmp	.+44     	; 0x2476 <xTaskIncrementTick+0x248>
    244a:	16 c0       	rjmp	.+44     	; 0x2478 <xTaskIncrementTick+0x24a>
    244c:	80 91 3a 15 	lds	r24, 0x153A	; 0x80153a <xPendedTicks>
    2450:	90 91 3b 15 	lds	r25, 0x153B	; 0x80153b <xPendedTicks+0x1>
    2454:	a0 91 3c 15 	lds	r26, 0x153C	; 0x80153c <xPendedTicks+0x2>
    2458:	b0 91 3d 15 	lds	r27, 0x153D	; 0x80153d <xPendedTicks+0x3>
    245c:	01 96       	adiw	r24, 0x01	; 1
    245e:	a1 1d       	adc	r26, r1
    2460:	b1 1d       	adc	r27, r1
    2462:	80 93 3a 15 	sts	0x153A, r24	; 0x80153a <xPendedTicks>
    2466:	90 93 3b 15 	sts	0x153B, r25	; 0x80153b <xPendedTicks+0x1>
    246a:	a0 93 3c 15 	sts	0x153C, r26	; 0x80153c <xPendedTicks+0x2>
    246e:	b0 93 3d 15 	sts	0x153D, r27	; 0x80153d <xPendedTicks+0x3>
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	01 c0       	rjmp	.+2      	; 0x2478 <xTaskIncrementTick+0x24a>
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	df 91       	pop	r29
    247a:	cf 91       	pop	r28
    247c:	ff 90       	pop	r15
    247e:	ef 90       	pop	r14
    2480:	df 90       	pop	r13
    2482:	cf 90       	pop	r12
    2484:	08 95       	ret

00002486 <xTaskResumeAll>:
    2486:	cf 92       	push	r12
    2488:	df 92       	push	r13
    248a:	ef 92       	push	r14
    248c:	ff 92       	push	r15
    248e:	cf 93       	push	r28
    2490:	df 93       	push	r29
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	0f 92       	push	r0
    2498:	80 91 30 15 	lds	r24, 0x1530	; 0x801530 <uxSchedulerSuspended>
    249c:	81 50       	subi	r24, 0x01	; 1
    249e:	80 93 30 15 	sts	0x1530, r24	; 0x801530 <uxSchedulerSuspended>
    24a2:	80 91 30 15 	lds	r24, 0x1530	; 0x801530 <uxSchedulerSuspended>
    24a6:	81 11       	cpse	r24, r1
    24a8:	be c0       	rjmp	.+380    	; 0x2626 <xTaskResumeAll+0x1a0>
    24aa:	80 91 44 15 	lds	r24, 0x1544	; 0x801544 <uxCurrentNumberOfTasks>
    24ae:	81 11       	cpse	r24, r1
    24b0:	88 c0       	rjmp	.+272    	; 0x25c2 <xTaskResumeAll+0x13c>
    24b2:	bc c0       	rjmp	.+376    	; 0x262c <xTaskResumeAll+0x1a6>
    24b4:	e0 91 63 15 	lds	r30, 0x1563	; 0x801563 <xPendingReadyList+0x7>
    24b8:	f0 91 64 15 	lds	r31, 0x1564	; 0x801564 <xPendingReadyList+0x8>
    24bc:	00 84       	ldd	r0, Z+8	; 0x08
    24be:	f1 85       	ldd	r31, Z+9	; 0x09
    24c0:	e0 2d       	mov	r30, r0
    24c2:	a0 8d       	ldd	r26, Z+24	; 0x18
    24c4:	b1 8d       	ldd	r27, Z+25	; 0x19
    24c6:	c2 89       	ldd	r28, Z+18	; 0x12
    24c8:	d3 89       	ldd	r29, Z+19	; 0x13
    24ca:	84 89       	ldd	r24, Z+20	; 0x14
    24cc:	95 89       	ldd	r25, Z+21	; 0x15
    24ce:	9f 83       	std	Y+7, r25	; 0x07
    24d0:	8e 83       	std	Y+6, r24	; 0x06
    24d2:	c4 89       	ldd	r28, Z+20	; 0x14
    24d4:	d5 89       	ldd	r29, Z+21	; 0x15
    24d6:	82 89       	ldd	r24, Z+18	; 0x12
    24d8:	93 89       	ldd	r25, Z+19	; 0x13
    24da:	9d 83       	std	Y+5, r25	; 0x05
    24dc:	8c 83       	std	Y+4, r24	; 0x04
    24de:	11 96       	adiw	r26, 0x01	; 1
    24e0:	2d 91       	ld	r18, X+
    24e2:	3c 91       	ld	r19, X
    24e4:	12 97       	sbiw	r26, 0x02	; 2
    24e6:	cf 01       	movw	r24, r30
    24e8:	0e 96       	adiw	r24, 0x0e	; 14
    24ea:	28 17       	cp	r18, r24
    24ec:	39 07       	cpc	r19, r25
    24ee:	31 f4       	brne	.+12     	; 0x24fc <xTaskResumeAll+0x76>
    24f0:	84 89       	ldd	r24, Z+20	; 0x14
    24f2:	95 89       	ldd	r25, Z+21	; 0x15
    24f4:	12 96       	adiw	r26, 0x02	; 2
    24f6:	9c 93       	st	X, r25
    24f8:	8e 93       	st	-X, r24
    24fa:	11 97       	sbiw	r26, 0x01	; 1
    24fc:	11 8e       	std	Z+25, r1	; 0x19
    24fe:	10 8e       	std	Z+24, r1	; 0x18
    2500:	8c 91       	ld	r24, X
    2502:	81 50       	subi	r24, 0x01	; 1
    2504:	8c 93       	st	X, r24
    2506:	a4 85       	ldd	r26, Z+12	; 0x0c
    2508:	b5 85       	ldd	r27, Z+13	; 0x0d
    250a:	c6 81       	ldd	r28, Z+6	; 0x06
    250c:	d7 81       	ldd	r29, Z+7	; 0x07
    250e:	80 85       	ldd	r24, Z+8	; 0x08
    2510:	91 85       	ldd	r25, Z+9	; 0x09
    2512:	9f 83       	std	Y+7, r25	; 0x07
    2514:	8e 83       	std	Y+6, r24	; 0x06
    2516:	c0 85       	ldd	r28, Z+8	; 0x08
    2518:	d1 85       	ldd	r29, Z+9	; 0x09
    251a:	86 81       	ldd	r24, Z+6	; 0x06
    251c:	97 81       	ldd	r25, Z+7	; 0x07
    251e:	9d 83       	std	Y+5, r25	; 0x05
    2520:	8c 83       	std	Y+4, r24	; 0x04
    2522:	11 96       	adiw	r26, 0x01	; 1
    2524:	8d 91       	ld	r24, X+
    2526:	9c 91       	ld	r25, X
    2528:	12 97       	sbiw	r26, 0x02	; 2
    252a:	9f 01       	movw	r18, r30
    252c:	2e 5f       	subi	r18, 0xFE	; 254
    252e:	3f 4f       	sbci	r19, 0xFF	; 255
    2530:	82 17       	cp	r24, r18
    2532:	93 07       	cpc	r25, r19
    2534:	31 f4       	brne	.+12     	; 0x2542 <xTaskResumeAll+0xbc>
    2536:	80 85       	ldd	r24, Z+8	; 0x08
    2538:	91 85       	ldd	r25, Z+9	; 0x09
    253a:	12 96       	adiw	r26, 0x02	; 2
    253c:	9c 93       	st	X, r25
    253e:	8e 93       	st	-X, r24
    2540:	11 97       	sbiw	r26, 0x01	; 1
    2542:	15 86       	std	Z+13, r1	; 0x0d
    2544:	14 86       	std	Z+12, r1	; 0x0c
    2546:	8c 91       	ld	r24, X
    2548:	81 50       	subi	r24, 0x01	; 1
    254a:	8c 93       	st	X, r24
    254c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    254e:	80 91 3f 15 	lds	r24, 0x153F	; 0x80153f <uxTopReadyPriority>
    2552:	8a 17       	cp	r24, r26
    2554:	10 f4       	brcc	.+4      	; 0x255a <xTaskResumeAll+0xd4>
    2556:	a0 93 3f 15 	sts	0x153F, r26	; 0x80153f <uxTopReadyPriority>
    255a:	8b e0       	ldi	r24, 0x0B	; 11
    255c:	8a 9f       	mul	r24, r26
    255e:	d0 01       	movw	r26, r0
    2560:	11 24       	eor	r1, r1
    2562:	af 57       	subi	r26, 0x7F	; 127
    2564:	ba 4e       	sbci	r27, 0xEA	; 234
    2566:	11 96       	adiw	r26, 0x01	; 1
    2568:	0d 90       	ld	r0, X+
    256a:	bc 91       	ld	r27, X
    256c:	a0 2d       	mov	r26, r0
    256e:	b7 83       	std	Z+7, r27	; 0x07
    2570:	a6 83       	std	Z+6, r26	; 0x06
    2572:	16 96       	adiw	r26, 0x06	; 6
    2574:	4d 91       	ld	r20, X+
    2576:	5c 91       	ld	r21, X
    2578:	17 97       	sbiw	r26, 0x07	; 7
    257a:	51 87       	std	Z+9, r21	; 0x09
    257c:	40 87       	std	Z+8, r20	; 0x08
    257e:	16 96       	adiw	r26, 0x06	; 6
    2580:	cd 91       	ld	r28, X+
    2582:	dc 91       	ld	r29, X
    2584:	17 97       	sbiw	r26, 0x07	; 7
    2586:	3d 83       	std	Y+5, r19	; 0x05
    2588:	2c 83       	std	Y+4, r18	; 0x04
    258a:	17 96       	adiw	r26, 0x07	; 7
    258c:	3c 93       	st	X, r19
    258e:	2e 93       	st	-X, r18
    2590:	16 97       	sbiw	r26, 0x06	; 6
    2592:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2594:	8a 9f       	mul	r24, r26
    2596:	d0 01       	movw	r26, r0
    2598:	11 24       	eor	r1, r1
    259a:	af 57       	subi	r26, 0x7F	; 127
    259c:	ba 4e       	sbci	r27, 0xEA	; 234
    259e:	b5 87       	std	Z+13, r27	; 0x0d
    25a0:	a4 87       	std	Z+12, r26	; 0x0c
    25a2:	8c 91       	ld	r24, X
    25a4:	8f 5f       	subi	r24, 0xFF	; 255
    25a6:	8c 93       	st	X, r24
    25a8:	92 8d       	ldd	r25, Z+26	; 0x1a
    25aa:	a0 91 ef 15 	lds	r26, 0x15EF	; 0x8015ef <pxCurrentTCB>
    25ae:	b0 91 f0 15 	lds	r27, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    25b2:	5a 96       	adiw	r26, 0x1a	; 26
    25b4:	8c 91       	ld	r24, X
    25b6:	98 17       	cp	r25, r24
    25b8:	30 f0       	brcs	.+12     	; 0x25c6 <xTaskResumeAll+0x140>
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	80 93 39 15 	sts	0x1539, r24	; 0x801539 <xYieldPending>
    25c0:	02 c0       	rjmp	.+4      	; 0x25c6 <xTaskResumeAll+0x140>
    25c2:	e0 e0       	ldi	r30, 0x00	; 0
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 91 5c 15 	lds	r24, 0x155C	; 0x80155c <xPendingReadyList>
    25ca:	81 11       	cpse	r24, r1
    25cc:	73 cf       	rjmp	.-282    	; 0x24b4 <xTaskResumeAll+0x2e>
    25ce:	ef 2b       	or	r30, r31
    25d0:	09 f0       	breq	.+2      	; 0x25d4 <xTaskResumeAll+0x14e>
    25d2:	7d db       	rcall	.-2310   	; 0x1cce <prvResetNextTaskUnblockTime>
    25d4:	c0 90 3a 15 	lds	r12, 0x153A	; 0x80153a <xPendedTicks>
    25d8:	d0 90 3b 15 	lds	r13, 0x153B	; 0x80153b <xPendedTicks+0x1>
    25dc:	e0 90 3c 15 	lds	r14, 0x153C	; 0x80153c <xPendedTicks+0x2>
    25e0:	f0 90 3d 15 	lds	r15, 0x153D	; 0x80153d <xPendedTicks+0x3>
    25e4:	c1 14       	cp	r12, r1
    25e6:	d1 04       	cpc	r13, r1
    25e8:	e1 04       	cpc	r14, r1
    25ea:	f1 04       	cpc	r15, r1
    25ec:	a1 f0       	breq	.+40     	; 0x2616 <xTaskResumeAll+0x190>
    25ee:	1f de       	rcall	.-962    	; 0x222e <xTaskIncrementTick>
    25f0:	88 23       	and	r24, r24
    25f2:	19 f0       	breq	.+6      	; 0x25fa <xTaskResumeAll+0x174>
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	80 93 39 15 	sts	0x1539, r24	; 0x801539 <xYieldPending>
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	c8 1a       	sub	r12, r24
    25fe:	d1 08       	sbc	r13, r1
    2600:	e1 08       	sbc	r14, r1
    2602:	f1 08       	sbc	r15, r1
    2604:	a1 f7       	brne	.-24     	; 0x25ee <xTaskResumeAll+0x168>
    2606:	10 92 3a 15 	sts	0x153A, r1	; 0x80153a <xPendedTicks>
    260a:	10 92 3b 15 	sts	0x153B, r1	; 0x80153b <xPendedTicks+0x1>
    260e:	10 92 3c 15 	sts	0x153C, r1	; 0x80153c <xPendedTicks+0x2>
    2612:	10 92 3d 15 	sts	0x153D, r1	; 0x80153d <xPendedTicks+0x3>
    2616:	80 91 39 15 	lds	r24, 0x1539	; 0x801539 <xYieldPending>
    261a:	88 23       	and	r24, r24
    261c:	31 f0       	breq	.+12     	; 0x262a <xTaskResumeAll+0x1a4>
    261e:	0e 94 d7 06 	call	0xdae	; 0xdae <vPortYield>
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	03 c0       	rjmp	.+6      	; 0x262c <xTaskResumeAll+0x1a6>
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	01 c0       	rjmp	.+2      	; 0x262c <xTaskResumeAll+0x1a6>
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	0f 90       	pop	r0
    262e:	0f be       	out	0x3f, r0	; 63
    2630:	df 91       	pop	r29
    2632:	cf 91       	pop	r28
    2634:	ff 90       	pop	r15
    2636:	ef 90       	pop	r14
    2638:	df 90       	pop	r13
    263a:	cf 90       	pop	r12
    263c:	08 95       	ret

0000263e <xTaskDelayUntil>:
    263e:	8f 92       	push	r8
    2640:	9f 92       	push	r9
    2642:	af 92       	push	r10
    2644:	bf 92       	push	r11
    2646:	cf 92       	push	r12
    2648:	df 92       	push	r13
    264a:	ef 92       	push	r14
    264c:	ff 92       	push	r15
    264e:	1f 93       	push	r17
    2650:	cf 93       	push	r28
    2652:	df 93       	push	r29
    2654:	ec 01       	movw	r28, r24
    2656:	6a 01       	movw	r12, r20
    2658:	7b 01       	movw	r14, r22
    265a:	d5 dd       	rcall	.-1110   	; 0x2206 <vTaskSuspendAll>
    265c:	80 90 40 15 	lds	r8, 0x1540	; 0x801540 <xTickCount>
    2660:	90 90 41 15 	lds	r9, 0x1541	; 0x801541 <xTickCount+0x1>
    2664:	a0 90 42 15 	lds	r10, 0x1542	; 0x801542 <xTickCount+0x2>
    2668:	b0 90 43 15 	lds	r11, 0x1543	; 0x801543 <xTickCount+0x3>
    266c:	88 81       	ld	r24, Y
    266e:	99 81       	ldd	r25, Y+1	; 0x01
    2670:	aa 81       	ldd	r26, Y+2	; 0x02
    2672:	bb 81       	ldd	r27, Y+3	; 0x03
    2674:	ac 01       	movw	r20, r24
    2676:	bd 01       	movw	r22, r26
    2678:	4c 0d       	add	r20, r12
    267a:	5d 1d       	adc	r21, r13
    267c:	6e 1d       	adc	r22, r14
    267e:	7f 1d       	adc	r23, r15
    2680:	88 16       	cp	r8, r24
    2682:	99 06       	cpc	r9, r25
    2684:	aa 06       	cpc	r10, r26
    2686:	bb 06       	cpc	r11, r27
    2688:	60 f4       	brcc	.+24     	; 0x26a2 <xTaskDelayUntil+0x64>
    268a:	48 17       	cp	r20, r24
    268c:	59 07       	cpc	r21, r25
    268e:	6a 07       	cpc	r22, r26
    2690:	7b 07       	cpc	r23, r27
    2692:	98 f4       	brcc	.+38     	; 0x26ba <xTaskDelayUntil+0x7c>
    2694:	84 16       	cp	r8, r20
    2696:	95 06       	cpc	r9, r21
    2698:	a6 06       	cpc	r10, r22
    269a:	b7 06       	cpc	r11, r23
    269c:	80 f0       	brcs	.+32     	; 0x26be <xTaskDelayUntil+0x80>
    269e:	10 e0       	ldi	r17, 0x00	; 0
    26a0:	13 c0       	rjmp	.+38     	; 0x26c8 <xTaskDelayUntil+0x8a>
    26a2:	48 17       	cp	r20, r24
    26a4:	59 07       	cpc	r21, r25
    26a6:	6a 07       	cpc	r22, r26
    26a8:	7b 07       	cpc	r23, r27
    26aa:	58 f0       	brcs	.+22     	; 0x26c2 <xTaskDelayUntil+0x84>
    26ac:	84 16       	cp	r8, r20
    26ae:	95 06       	cpc	r9, r21
    26b0:	a6 06       	cpc	r10, r22
    26b2:	b7 06       	cpc	r11, r23
    26b4:	40 f0       	brcs	.+16     	; 0x26c6 <xTaskDelayUntil+0x88>
    26b6:	10 e0       	ldi	r17, 0x00	; 0
    26b8:	07 c0       	rjmp	.+14     	; 0x26c8 <xTaskDelayUntil+0x8a>
    26ba:	10 e0       	ldi	r17, 0x00	; 0
    26bc:	05 c0       	rjmp	.+10     	; 0x26c8 <xTaskDelayUntil+0x8a>
    26be:	11 e0       	ldi	r17, 0x01	; 1
    26c0:	03 c0       	rjmp	.+6      	; 0x26c8 <xTaskDelayUntil+0x8a>
    26c2:	11 e0       	ldi	r17, 0x01	; 1
    26c4:	01 c0       	rjmp	.+2      	; 0x26c8 <xTaskDelayUntil+0x8a>
    26c6:	11 e0       	ldi	r17, 0x01	; 1
    26c8:	48 83       	st	Y, r20
    26ca:	59 83       	std	Y+1, r21	; 0x01
    26cc:	6a 83       	std	Y+2, r22	; 0x02
    26ce:	7b 83       	std	Y+3, r23	; 0x03
    26d0:	11 23       	and	r17, r17
    26d2:	41 f0       	breq	.+16     	; 0x26e4 <xTaskDelayUntil+0xa6>
    26d4:	cb 01       	movw	r24, r22
    26d6:	ba 01       	movw	r22, r20
    26d8:	68 19       	sub	r22, r8
    26da:	79 09       	sbc	r23, r9
    26dc:	8a 09       	sbc	r24, r10
    26de:	9b 09       	sbc	r25, r11
    26e0:	40 e0       	ldi	r20, 0x00	; 0
    26e2:	6b dc       	rcall	.-1834   	; 0x1fba <prvAddCurrentTaskToDelayedList>
    26e4:	d0 de       	rcall	.-608    	; 0x2486 <xTaskResumeAll>
    26e6:	81 11       	cpse	r24, r1
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <xTaskDelayUntil+0xb0>
    26ea:	0e 94 d7 06 	call	0xdae	; 0xdae <vPortYield>
    26ee:	81 2f       	mov	r24, r17
    26f0:	df 91       	pop	r29
    26f2:	cf 91       	pop	r28
    26f4:	1f 91       	pop	r17
    26f6:	ff 90       	pop	r15
    26f8:	ef 90       	pop	r14
    26fa:	df 90       	pop	r13
    26fc:	cf 90       	pop	r12
    26fe:	bf 90       	pop	r11
    2700:	af 90       	pop	r10
    2702:	9f 90       	pop	r9
    2704:	8f 90       	pop	r8
    2706:	08 95       	ret

00002708 <vTaskDelay>:
    2708:	cf 92       	push	r12
    270a:	df 92       	push	r13
    270c:	ef 92       	push	r14
    270e:	ff 92       	push	r15
    2710:	6b 01       	movw	r12, r22
    2712:	7c 01       	movw	r14, r24
    2714:	67 2b       	or	r22, r23
    2716:	68 2b       	or	r22, r24
    2718:	69 2b       	or	r22, r25
    271a:	39 f0       	breq	.+14     	; 0x272a <vTaskDelay+0x22>
    271c:	74 dd       	rcall	.-1304   	; 0x2206 <vTaskSuspendAll>
    271e:	40 e0       	ldi	r20, 0x00	; 0
    2720:	c7 01       	movw	r24, r14
    2722:	b6 01       	movw	r22, r12
    2724:	4a dc       	rcall	.-1900   	; 0x1fba <prvAddCurrentTaskToDelayedList>
    2726:	af de       	rcall	.-674    	; 0x2486 <xTaskResumeAll>
    2728:	01 c0       	rjmp	.+2      	; 0x272c <vTaskDelay+0x24>
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	81 11       	cpse	r24, r1
    272e:	02 c0       	rjmp	.+4      	; 0x2734 <vTaskDelay+0x2c>
    2730:	0e 94 d7 06 	call	0xdae	; 0xdae <vPortYield>
    2734:	ff 90       	pop	r15
    2736:	ef 90       	pop	r14
    2738:	df 90       	pop	r13
    273a:	cf 90       	pop	r12
    273c:	08 95       	ret

0000273e <vTaskSwitchContext>:
    273e:	80 91 30 15 	lds	r24, 0x1530	; 0x801530 <uxSchedulerSuspended>
    2742:	88 23       	and	r24, r24
    2744:	21 f0       	breq	.+8      	; 0x274e <vTaskSwitchContext+0x10>
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	80 93 39 15 	sts	0x1539, r24	; 0x801539 <xYieldPending>
    274c:	08 95       	ret
    274e:	10 92 39 15 	sts	0x1539, r1	; 0x801539 <xYieldPending>
    2752:	e0 91 ef 15 	lds	r30, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2756:	f0 91 f0 15 	lds	r31, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    275a:	20 81       	ld	r18, Z
    275c:	31 81       	ldd	r19, Z+1	; 0x01
    275e:	e0 91 ef 15 	lds	r30, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2762:	f0 91 f0 15 	lds	r31, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    2766:	83 8d       	ldd	r24, Z+27	; 0x1b
    2768:	94 8d       	ldd	r25, Z+28	; 0x1c
    276a:	82 17       	cp	r24, r18
    276c:	93 07       	cpc	r25, r19
    276e:	60 f0       	brcs	.+24     	; 0x2788 <vTaskSwitchContext+0x4a>
    2770:	60 91 ef 15 	lds	r22, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2774:	70 91 f0 15 	lds	r23, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    2778:	63 5e       	subi	r22, 0xE3	; 227
    277a:	7f 4f       	sbci	r23, 0xFF	; 255
    277c:	80 91 ef 15 	lds	r24, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2780:	90 91 f0 15 	lds	r25, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    2784:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <vApplicationStackOverflowHook>
    2788:	80 91 3f 15 	lds	r24, 0x153F	; 0x80153f <uxTopReadyPriority>
    278c:	01 c0       	rjmp	.+2      	; 0x2790 <vTaskSwitchContext+0x52>
    278e:	81 50       	subi	r24, 0x01	; 1
    2790:	28 2f       	mov	r18, r24
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	9b e0       	ldi	r25, 0x0B	; 11
    2796:	92 9f       	mul	r25, r18
    2798:	f0 01       	movw	r30, r0
    279a:	93 9f       	mul	r25, r19
    279c:	f0 0d       	add	r31, r0
    279e:	11 24       	eor	r1, r1
    27a0:	ef 57       	subi	r30, 0x7F	; 127
    27a2:	fa 4e       	sbci	r31, 0xEA	; 234
    27a4:	90 81       	ld	r25, Z
    27a6:	99 23       	and	r25, r25
    27a8:	91 f3       	breq	.-28     	; 0x278e <vTaskSwitchContext+0x50>
    27aa:	9b e0       	ldi	r25, 0x0B	; 11
    27ac:	92 9f       	mul	r25, r18
    27ae:	a0 01       	movw	r20, r0
    27b0:	93 9f       	mul	r25, r19
    27b2:	50 0d       	add	r21, r0
    27b4:	11 24       	eor	r1, r1
    27b6:	df 01       	movw	r26, r30
    27b8:	01 80       	ldd	r0, Z+1	; 0x01
    27ba:	f2 81       	ldd	r31, Z+2	; 0x02
    27bc:	e0 2d       	mov	r30, r0
    27be:	04 80       	ldd	r0, Z+4	; 0x04
    27c0:	f5 81       	ldd	r31, Z+5	; 0x05
    27c2:	e0 2d       	mov	r30, r0
    27c4:	12 96       	adiw	r26, 0x02	; 2
    27c6:	fc 93       	st	X, r31
    27c8:	ee 93       	st	-X, r30
    27ca:	11 97       	sbiw	r26, 0x01	; 1
    27cc:	4c 57       	subi	r20, 0x7C	; 124
    27ce:	5a 4e       	sbci	r21, 0xEA	; 234
    27d0:	e4 17       	cp	r30, r20
    27d2:	f5 07       	cpc	r31, r21
    27d4:	29 f4       	brne	.+10     	; 0x27e0 <vTaskSwitchContext+0xa2>
    27d6:	44 81       	ldd	r20, Z+4	; 0x04
    27d8:	55 81       	ldd	r21, Z+5	; 0x05
    27da:	fd 01       	movw	r30, r26
    27dc:	52 83       	std	Z+2, r21	; 0x02
    27de:	41 83       	std	Z+1, r20	; 0x01
    27e0:	9b e0       	ldi	r25, 0x0B	; 11
    27e2:	92 9f       	mul	r25, r18
    27e4:	f0 01       	movw	r30, r0
    27e6:	93 9f       	mul	r25, r19
    27e8:	f0 0d       	add	r31, r0
    27ea:	11 24       	eor	r1, r1
    27ec:	ef 57       	subi	r30, 0x7F	; 127
    27ee:	fa 4e       	sbci	r31, 0xEA	; 234
    27f0:	01 80       	ldd	r0, Z+1	; 0x01
    27f2:	f2 81       	ldd	r31, Z+2	; 0x02
    27f4:	e0 2d       	mov	r30, r0
    27f6:	20 85       	ldd	r18, Z+8	; 0x08
    27f8:	31 85       	ldd	r19, Z+9	; 0x09
    27fa:	30 93 f0 15 	sts	0x15F0, r19	; 0x8015f0 <pxCurrentTCB+0x1>
    27fe:	20 93 ef 15 	sts	0x15EF, r18	; 0x8015ef <pxCurrentTCB>
    2802:	80 93 3f 15 	sts	0x153F, r24	; 0x80153f <uxTopReadyPriority>
    2806:	08 95       	ret

00002808 <vTaskPlaceOnEventList>:
    2808:	cf 92       	push	r12
    280a:	df 92       	push	r13
    280c:	ef 92       	push	r14
    280e:	ff 92       	push	r15
    2810:	6a 01       	movw	r12, r20
    2812:	7b 01       	movw	r14, r22
    2814:	60 91 ef 15 	lds	r22, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2818:	70 91 f0 15 	lds	r23, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    281c:	62 5f       	subi	r22, 0xF2	; 242
    281e:	7f 4f       	sbci	r23, 0xFF	; 255
    2820:	0e 94 1e 06 	call	0xc3c	; 0xc3c <vListInsert>
    2824:	41 e0       	ldi	r20, 0x01	; 1
    2826:	c7 01       	movw	r24, r14
    2828:	b6 01       	movw	r22, r12
    282a:	c7 db       	rcall	.-2162   	; 0x1fba <prvAddCurrentTaskToDelayedList>
    282c:	ff 90       	pop	r15
    282e:	ef 90       	pop	r14
    2830:	df 90       	pop	r13
    2832:	cf 90       	pop	r12
    2834:	08 95       	ret

00002836 <vTaskPlaceOnUnorderedEventList>:
    2836:	0f 93       	push	r16
    2838:	1f 93       	push	r17
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	fc 01       	movw	r30, r24
    2840:	a0 91 ef 15 	lds	r26, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2844:	b0 91 f0 15 	lds	r27, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    2848:	70 68       	ori	r23, 0x80	; 128
    284a:	1e 96       	adiw	r26, 0x0e	; 14
    284c:	4d 93       	st	X+, r20
    284e:	5d 93       	st	X+, r21
    2850:	6d 93       	st	X+, r22
    2852:	7c 93       	st	X, r23
    2854:	51 97       	sbiw	r26, 0x11	; 17
    2856:	a1 81       	ldd	r26, Z+1	; 0x01
    2858:	b2 81       	ldd	r27, Z+2	; 0x02
    285a:	c0 91 ef 15 	lds	r28, 0x15EF	; 0x8015ef <pxCurrentTCB>
    285e:	d0 91 f0 15 	lds	r29, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    2862:	bb 8b       	std	Y+19, r27	; 0x13
    2864:	aa 8b       	std	Y+18, r26	; 0x12
    2866:	c0 91 ef 15 	lds	r28, 0x15EF	; 0x8015ef <pxCurrentTCB>
    286a:	d0 91 f0 15 	lds	r29, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    286e:	16 96       	adiw	r26, 0x06	; 6
    2870:	8d 91       	ld	r24, X+
    2872:	9c 91       	ld	r25, X
    2874:	17 97       	sbiw	r26, 0x07	; 7
    2876:	9d 8b       	std	Y+21, r25	; 0x15
    2878:	8c 8b       	std	Y+20, r24	; 0x14
    287a:	16 96       	adiw	r26, 0x06	; 6
    287c:	cd 91       	ld	r28, X+
    287e:	dc 91       	ld	r29, X
    2880:	17 97       	sbiw	r26, 0x07	; 7
    2882:	80 91 ef 15 	lds	r24, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2886:	90 91 f0 15 	lds	r25, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    288a:	0e 96       	adiw	r24, 0x0e	; 14
    288c:	9d 83       	std	Y+5, r25	; 0x05
    288e:	8c 83       	std	Y+4, r24	; 0x04
    2890:	80 91 ef 15 	lds	r24, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2894:	90 91 f0 15 	lds	r25, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    2898:	0e 96       	adiw	r24, 0x0e	; 14
    289a:	17 96       	adiw	r26, 0x07	; 7
    289c:	9c 93       	st	X, r25
    289e:	8e 93       	st	-X, r24
    28a0:	16 97       	sbiw	r26, 0x06	; 6
    28a2:	a0 91 ef 15 	lds	r26, 0x15EF	; 0x8015ef <pxCurrentTCB>
    28a6:	b0 91 f0 15 	lds	r27, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    28aa:	59 96       	adiw	r26, 0x19	; 25
    28ac:	fc 93       	st	X, r31
    28ae:	ee 93       	st	-X, r30
    28b0:	58 97       	sbiw	r26, 0x18	; 24
    28b2:	80 81       	ld	r24, Z
    28b4:	8f 5f       	subi	r24, 0xFF	; 255
    28b6:	80 83       	st	Z, r24
    28b8:	41 e0       	ldi	r20, 0x01	; 1
    28ba:	c9 01       	movw	r24, r18
    28bc:	b8 01       	movw	r22, r16
    28be:	7d db       	rcall	.-2310   	; 0x1fba <prvAddCurrentTaskToDelayedList>
    28c0:	df 91       	pop	r29
    28c2:	cf 91       	pop	r28
    28c4:	1f 91       	pop	r17
    28c6:	0f 91       	pop	r16
    28c8:	08 95       	ret

000028ca <vTaskPlaceOnEventListRestricted>:
    28ca:	cf 93       	push	r28
    28cc:	df 93       	push	r29
    28ce:	fc 01       	movw	r30, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	ba 01       	movw	r22, r20
    28d4:	a1 81       	ldd	r26, Z+1	; 0x01
    28d6:	b2 81       	ldd	r27, Z+2	; 0x02
    28d8:	c0 91 ef 15 	lds	r28, 0x15EF	; 0x8015ef <pxCurrentTCB>
    28dc:	d0 91 f0 15 	lds	r29, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    28e0:	bb 8b       	std	Y+19, r27	; 0x13
    28e2:	aa 8b       	std	Y+18, r26	; 0x12
    28e4:	c0 91 ef 15 	lds	r28, 0x15EF	; 0x8015ef <pxCurrentTCB>
    28e8:	d0 91 f0 15 	lds	r29, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    28ec:	16 96       	adiw	r26, 0x06	; 6
    28ee:	4d 91       	ld	r20, X+
    28f0:	5c 91       	ld	r21, X
    28f2:	17 97       	sbiw	r26, 0x07	; 7
    28f4:	5d 8b       	std	Y+21, r21	; 0x15
    28f6:	4c 8b       	std	Y+20, r20	; 0x14
    28f8:	16 96       	adiw	r26, 0x06	; 6
    28fa:	cd 91       	ld	r28, X+
    28fc:	dc 91       	ld	r29, X
    28fe:	17 97       	sbiw	r26, 0x07	; 7
    2900:	40 91 ef 15 	lds	r20, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2904:	50 91 f0 15 	lds	r21, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    2908:	42 5f       	subi	r20, 0xF2	; 242
    290a:	5f 4f       	sbci	r21, 0xFF	; 255
    290c:	5d 83       	std	Y+5, r21	; 0x05
    290e:	4c 83       	std	Y+4, r20	; 0x04
    2910:	40 91 ef 15 	lds	r20, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2914:	50 91 f0 15 	lds	r21, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    2918:	42 5f       	subi	r20, 0xF2	; 242
    291a:	5f 4f       	sbci	r21, 0xFF	; 255
    291c:	17 96       	adiw	r26, 0x07	; 7
    291e:	5c 93       	st	X, r21
    2920:	4e 93       	st	-X, r20
    2922:	16 97       	sbiw	r26, 0x06	; 6
    2924:	a0 91 ef 15 	lds	r26, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2928:	b0 91 f0 15 	lds	r27, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    292c:	59 96       	adiw	r26, 0x19	; 25
    292e:	fc 93       	st	X, r31
    2930:	ee 93       	st	-X, r30
    2932:	58 97       	sbiw	r26, 0x18	; 24
    2934:	30 81       	ld	r19, Z
    2936:	3f 5f       	subi	r19, 0xFF	; 255
    2938:	30 83       	st	Z, r19
    293a:	22 23       	and	r18, r18
    293c:	19 f0       	breq	.+6      	; 0x2944 <vTaskPlaceOnEventListRestricted+0x7a>
    293e:	6f ef       	ldi	r22, 0xFF	; 255
    2940:	7f ef       	ldi	r23, 0xFF	; 255
    2942:	cb 01       	movw	r24, r22
    2944:	42 2f       	mov	r20, r18
    2946:	39 db       	rcall	.-2446   	; 0x1fba <prvAddCurrentTaskToDelayedList>
    2948:	df 91       	pop	r29
    294a:	cf 91       	pop	r28
    294c:	08 95       	ret

0000294e <xTaskRemoveFromEventList>:
    294e:	cf 93       	push	r28
    2950:	df 93       	push	r29
    2952:	dc 01       	movw	r26, r24
    2954:	17 96       	adiw	r26, 0x07	; 7
    2956:	ed 91       	ld	r30, X+
    2958:	fc 91       	ld	r31, X
    295a:	18 97       	sbiw	r26, 0x08	; 8
    295c:	00 84       	ldd	r0, Z+8	; 0x08
    295e:	f1 85       	ldd	r31, Z+9	; 0x09
    2960:	e0 2d       	mov	r30, r0
    2962:	a0 8d       	ldd	r26, Z+24	; 0x18
    2964:	b1 8d       	ldd	r27, Z+25	; 0x19
    2966:	c2 89       	ldd	r28, Z+18	; 0x12
    2968:	d3 89       	ldd	r29, Z+19	; 0x13
    296a:	84 89       	ldd	r24, Z+20	; 0x14
    296c:	95 89       	ldd	r25, Z+21	; 0x15
    296e:	9f 83       	std	Y+7, r25	; 0x07
    2970:	8e 83       	std	Y+6, r24	; 0x06
    2972:	c4 89       	ldd	r28, Z+20	; 0x14
    2974:	d5 89       	ldd	r29, Z+21	; 0x15
    2976:	82 89       	ldd	r24, Z+18	; 0x12
    2978:	93 89       	ldd	r25, Z+19	; 0x13
    297a:	9d 83       	std	Y+5, r25	; 0x05
    297c:	8c 83       	std	Y+4, r24	; 0x04
    297e:	11 96       	adiw	r26, 0x01	; 1
    2980:	8d 91       	ld	r24, X+
    2982:	9c 91       	ld	r25, X
    2984:	12 97       	sbiw	r26, 0x02	; 2
    2986:	9f 01       	movw	r18, r30
    2988:	22 5f       	subi	r18, 0xF2	; 242
    298a:	3f 4f       	sbci	r19, 0xFF	; 255
    298c:	82 17       	cp	r24, r18
    298e:	93 07       	cpc	r25, r19
    2990:	31 f4       	brne	.+12     	; 0x299e <xTaskRemoveFromEventList+0x50>
    2992:	84 89       	ldd	r24, Z+20	; 0x14
    2994:	95 89       	ldd	r25, Z+21	; 0x15
    2996:	12 96       	adiw	r26, 0x02	; 2
    2998:	9c 93       	st	X, r25
    299a:	8e 93       	st	-X, r24
    299c:	11 97       	sbiw	r26, 0x01	; 1
    299e:	11 8e       	std	Z+25, r1	; 0x19
    29a0:	10 8e       	std	Z+24, r1	; 0x18
    29a2:	8c 91       	ld	r24, X
    29a4:	81 50       	subi	r24, 0x01	; 1
    29a6:	8c 93       	st	X, r24
    29a8:	80 91 30 15 	lds	r24, 0x1530	; 0x801530 <uxSchedulerSuspended>
    29ac:	81 11       	cpse	r24, r1
    29ae:	52 c0       	rjmp	.+164    	; 0x2a54 <xTaskRemoveFromEventList+0x106>
    29b0:	a4 85       	ldd	r26, Z+12	; 0x0c
    29b2:	b5 85       	ldd	r27, Z+13	; 0x0d
    29b4:	c6 81       	ldd	r28, Z+6	; 0x06
    29b6:	d7 81       	ldd	r29, Z+7	; 0x07
    29b8:	80 85       	ldd	r24, Z+8	; 0x08
    29ba:	91 85       	ldd	r25, Z+9	; 0x09
    29bc:	9f 83       	std	Y+7, r25	; 0x07
    29be:	8e 83       	std	Y+6, r24	; 0x06
    29c0:	c0 85       	ldd	r28, Z+8	; 0x08
    29c2:	d1 85       	ldd	r29, Z+9	; 0x09
    29c4:	86 81       	ldd	r24, Z+6	; 0x06
    29c6:	97 81       	ldd	r25, Z+7	; 0x07
    29c8:	9d 83       	std	Y+5, r25	; 0x05
    29ca:	8c 83       	std	Y+4, r24	; 0x04
    29cc:	11 96       	adiw	r26, 0x01	; 1
    29ce:	8d 91       	ld	r24, X+
    29d0:	9c 91       	ld	r25, X
    29d2:	12 97       	sbiw	r26, 0x02	; 2
    29d4:	9f 01       	movw	r18, r30
    29d6:	2e 5f       	subi	r18, 0xFE	; 254
    29d8:	3f 4f       	sbci	r19, 0xFF	; 255
    29da:	82 17       	cp	r24, r18
    29dc:	93 07       	cpc	r25, r19
    29de:	31 f4       	brne	.+12     	; 0x29ec <xTaskRemoveFromEventList+0x9e>
    29e0:	80 85       	ldd	r24, Z+8	; 0x08
    29e2:	91 85       	ldd	r25, Z+9	; 0x09
    29e4:	12 96       	adiw	r26, 0x02	; 2
    29e6:	9c 93       	st	X, r25
    29e8:	8e 93       	st	-X, r24
    29ea:	11 97       	sbiw	r26, 0x01	; 1
    29ec:	15 86       	std	Z+13, r1	; 0x0d
    29ee:	14 86       	std	Z+12, r1	; 0x0c
    29f0:	8c 91       	ld	r24, X
    29f2:	81 50       	subi	r24, 0x01	; 1
    29f4:	8c 93       	st	X, r24
    29f6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    29f8:	80 91 3f 15 	lds	r24, 0x153F	; 0x80153f <uxTopReadyPriority>
    29fc:	8a 17       	cp	r24, r26
    29fe:	10 f4       	brcc	.+4      	; 0x2a04 <xTaskRemoveFromEventList+0xb6>
    2a00:	a0 93 3f 15 	sts	0x153F, r26	; 0x80153f <uxTopReadyPriority>
    2a04:	8b e0       	ldi	r24, 0x0B	; 11
    2a06:	8a 9f       	mul	r24, r26
    2a08:	d0 01       	movw	r26, r0
    2a0a:	11 24       	eor	r1, r1
    2a0c:	af 57       	subi	r26, 0x7F	; 127
    2a0e:	ba 4e       	sbci	r27, 0xEA	; 234
    2a10:	11 96       	adiw	r26, 0x01	; 1
    2a12:	0d 90       	ld	r0, X+
    2a14:	bc 91       	ld	r27, X
    2a16:	a0 2d       	mov	r26, r0
    2a18:	b7 83       	std	Z+7, r27	; 0x07
    2a1a:	a6 83       	std	Z+6, r26	; 0x06
    2a1c:	16 96       	adiw	r26, 0x06	; 6
    2a1e:	4d 91       	ld	r20, X+
    2a20:	5c 91       	ld	r21, X
    2a22:	17 97       	sbiw	r26, 0x07	; 7
    2a24:	51 87       	std	Z+9, r21	; 0x09
    2a26:	40 87       	std	Z+8, r20	; 0x08
    2a28:	16 96       	adiw	r26, 0x06	; 6
    2a2a:	cd 91       	ld	r28, X+
    2a2c:	dc 91       	ld	r29, X
    2a2e:	17 97       	sbiw	r26, 0x07	; 7
    2a30:	3d 83       	std	Y+5, r19	; 0x05
    2a32:	2c 83       	std	Y+4, r18	; 0x04
    2a34:	17 96       	adiw	r26, 0x07	; 7
    2a36:	3c 93       	st	X, r19
    2a38:	2e 93       	st	-X, r18
    2a3a:	16 97       	sbiw	r26, 0x06	; 6
    2a3c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a3e:	8a 9f       	mul	r24, r26
    2a40:	d0 01       	movw	r26, r0
    2a42:	11 24       	eor	r1, r1
    2a44:	af 57       	subi	r26, 0x7F	; 127
    2a46:	ba 4e       	sbci	r27, 0xEA	; 234
    2a48:	b5 87       	std	Z+13, r27	; 0x0d
    2a4a:	a4 87       	std	Z+12, r26	; 0x0c
    2a4c:	8c 91       	ld	r24, X
    2a4e:	8f 5f       	subi	r24, 0xFF	; 255
    2a50:	8c 93       	st	X, r24
    2a52:	1c c0       	rjmp	.+56     	; 0x2a8c <xTaskRemoveFromEventList+0x13e>
    2a54:	4c e5       	ldi	r20, 0x5C	; 92
    2a56:	55 e1       	ldi	r21, 0x15	; 21
    2a58:	da 01       	movw	r26, r20
    2a5a:	11 96       	adiw	r26, 0x01	; 1
    2a5c:	cd 91       	ld	r28, X+
    2a5e:	dc 91       	ld	r29, X
    2a60:	12 97       	sbiw	r26, 0x02	; 2
    2a62:	d3 8b       	std	Z+19, r29	; 0x13
    2a64:	c2 8b       	std	Z+18, r28	; 0x12
    2a66:	8e 81       	ldd	r24, Y+6	; 0x06
    2a68:	9f 81       	ldd	r25, Y+7	; 0x07
    2a6a:	95 8b       	std	Z+21, r25	; 0x15
    2a6c:	84 8b       	std	Z+20, r24	; 0x14
    2a6e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a70:	9f 81       	ldd	r25, Y+7	; 0x07
    2a72:	dc 01       	movw	r26, r24
    2a74:	15 96       	adiw	r26, 0x05	; 5
    2a76:	3c 93       	st	X, r19
    2a78:	2e 93       	st	-X, r18
    2a7a:	14 97       	sbiw	r26, 0x04	; 4
    2a7c:	3f 83       	std	Y+7, r19	; 0x07
    2a7e:	2e 83       	std	Y+6, r18	; 0x06
    2a80:	51 8f       	std	Z+25, r21	; 0x19
    2a82:	40 8f       	std	Z+24, r20	; 0x18
    2a84:	da 01       	movw	r26, r20
    2a86:	8c 91       	ld	r24, X
    2a88:	8f 5f       	subi	r24, 0xFF	; 255
    2a8a:	8c 93       	st	X, r24
    2a8c:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a8e:	e0 91 ef 15 	lds	r30, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2a92:	f0 91 f0 15 	lds	r31, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    2a96:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a98:	89 17       	cp	r24, r25
    2a9a:	20 f4       	brcc	.+8      	; 0x2aa4 <xTaskRemoveFromEventList+0x156>
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	80 93 39 15 	sts	0x1539, r24	; 0x801539 <xYieldPending>
    2aa2:	01 c0       	rjmp	.+2      	; 0x2aa6 <xTaskRemoveFromEventList+0x158>
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	df 91       	pop	r29
    2aa8:	cf 91       	pop	r28
    2aaa:	08 95       	ret

00002aac <vTaskRemoveFromUnorderedEventList>:
    2aac:	cf 93       	push	r28
    2aae:	df 93       	push	r29
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	70 68       	ori	r23, 0x80	; 128
    2ab4:	4d 93       	st	X+, r20
    2ab6:	5d 93       	st	X+, r21
    2ab8:	6d 93       	st	X+, r22
    2aba:	7c 93       	st	X, r23
    2abc:	13 97       	sbiw	r26, 0x03	; 3
    2abe:	18 96       	adiw	r26, 0x08	; 8
    2ac0:	ed 91       	ld	r30, X+
    2ac2:	fc 91       	ld	r31, X
    2ac4:	19 97       	sbiw	r26, 0x09	; 9
    2ac6:	1a 96       	adiw	r26, 0x0a	; 10
    2ac8:	4d 91       	ld	r20, X+
    2aca:	5c 91       	ld	r21, X
    2acc:	1b 97       	sbiw	r26, 0x0b	; 11
    2ace:	14 96       	adiw	r26, 0x04	; 4
    2ad0:	8d 91       	ld	r24, X+
    2ad2:	9c 91       	ld	r25, X
    2ad4:	15 97       	sbiw	r26, 0x05	; 5
    2ad6:	16 96       	adiw	r26, 0x06	; 6
    2ad8:	2d 91       	ld	r18, X+
    2ada:	3c 91       	ld	r19, X
    2adc:	17 97       	sbiw	r26, 0x07	; 7
    2ade:	ec 01       	movw	r28, r24
    2ae0:	3f 83       	std	Y+7, r19	; 0x07
    2ae2:	2e 83       	std	Y+6, r18	; 0x06
    2ae4:	16 96       	adiw	r26, 0x06	; 6
    2ae6:	8d 91       	ld	r24, X+
    2ae8:	9c 91       	ld	r25, X
    2aea:	17 97       	sbiw	r26, 0x07	; 7
    2aec:	14 96       	adiw	r26, 0x04	; 4
    2aee:	2d 91       	ld	r18, X+
    2af0:	3c 91       	ld	r19, X
    2af2:	15 97       	sbiw	r26, 0x05	; 5
    2af4:	ec 01       	movw	r28, r24
    2af6:	3d 83       	std	Y+5, r19	; 0x05
    2af8:	2c 83       	std	Y+4, r18	; 0x04
    2afa:	ea 01       	movw	r28, r20
    2afc:	89 81       	ldd	r24, Y+1	; 0x01
    2afe:	9a 81       	ldd	r25, Y+2	; 0x02
    2b00:	a8 17       	cp	r26, r24
    2b02:	b9 07       	cpc	r27, r25
    2b04:	31 f4       	brne	.+12     	; 0x2b12 <vTaskRemoveFromUnorderedEventList+0x66>
    2b06:	16 96       	adiw	r26, 0x06	; 6
    2b08:	8d 91       	ld	r24, X+
    2b0a:	9c 91       	ld	r25, X
    2b0c:	17 97       	sbiw	r26, 0x07	; 7
    2b0e:	9a 83       	std	Y+2, r25	; 0x02
    2b10:	89 83       	std	Y+1, r24	; 0x01
    2b12:	1b 96       	adiw	r26, 0x0b	; 11
    2b14:	1c 92       	st	X, r1
    2b16:	1e 92       	st	-X, r1
    2b18:	1a 97       	sbiw	r26, 0x0a	; 10
    2b1a:	da 01       	movw	r26, r20
    2b1c:	8c 91       	ld	r24, X
    2b1e:	81 50       	subi	r24, 0x01	; 1
    2b20:	8c 93       	st	X, r24
    2b22:	a4 85       	ldd	r26, Z+12	; 0x0c
    2b24:	b5 85       	ldd	r27, Z+13	; 0x0d
    2b26:	c6 81       	ldd	r28, Z+6	; 0x06
    2b28:	d7 81       	ldd	r29, Z+7	; 0x07
    2b2a:	80 85       	ldd	r24, Z+8	; 0x08
    2b2c:	91 85       	ldd	r25, Z+9	; 0x09
    2b2e:	9f 83       	std	Y+7, r25	; 0x07
    2b30:	8e 83       	std	Y+6, r24	; 0x06
    2b32:	c0 85       	ldd	r28, Z+8	; 0x08
    2b34:	d1 85       	ldd	r29, Z+9	; 0x09
    2b36:	86 81       	ldd	r24, Z+6	; 0x06
    2b38:	97 81       	ldd	r25, Z+7	; 0x07
    2b3a:	9d 83       	std	Y+5, r25	; 0x05
    2b3c:	8c 83       	std	Y+4, r24	; 0x04
    2b3e:	11 96       	adiw	r26, 0x01	; 1
    2b40:	8d 91       	ld	r24, X+
    2b42:	9c 91       	ld	r25, X
    2b44:	12 97       	sbiw	r26, 0x02	; 2
    2b46:	9f 01       	movw	r18, r30
    2b48:	2e 5f       	subi	r18, 0xFE	; 254
    2b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b4c:	82 17       	cp	r24, r18
    2b4e:	93 07       	cpc	r25, r19
    2b50:	31 f4       	brne	.+12     	; 0x2b5e <vTaskRemoveFromUnorderedEventList+0xb2>
    2b52:	80 85       	ldd	r24, Z+8	; 0x08
    2b54:	91 85       	ldd	r25, Z+9	; 0x09
    2b56:	12 96       	adiw	r26, 0x02	; 2
    2b58:	9c 93       	st	X, r25
    2b5a:	8e 93       	st	-X, r24
    2b5c:	11 97       	sbiw	r26, 0x01	; 1
    2b5e:	15 86       	std	Z+13, r1	; 0x0d
    2b60:	14 86       	std	Z+12, r1	; 0x0c
    2b62:	8c 91       	ld	r24, X
    2b64:	81 50       	subi	r24, 0x01	; 1
    2b66:	8c 93       	st	X, r24
    2b68:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2b6a:	80 91 3f 15 	lds	r24, 0x153F	; 0x80153f <uxTopReadyPriority>
    2b6e:	8a 17       	cp	r24, r26
    2b70:	10 f4       	brcc	.+4      	; 0x2b76 <vTaskRemoveFromUnorderedEventList+0xca>
    2b72:	a0 93 3f 15 	sts	0x153F, r26	; 0x80153f <uxTopReadyPriority>
    2b76:	8b e0       	ldi	r24, 0x0B	; 11
    2b78:	8a 9f       	mul	r24, r26
    2b7a:	d0 01       	movw	r26, r0
    2b7c:	11 24       	eor	r1, r1
    2b7e:	af 57       	subi	r26, 0x7F	; 127
    2b80:	ba 4e       	sbci	r27, 0xEA	; 234
    2b82:	11 96       	adiw	r26, 0x01	; 1
    2b84:	0d 90       	ld	r0, X+
    2b86:	bc 91       	ld	r27, X
    2b88:	a0 2d       	mov	r26, r0
    2b8a:	b7 83       	std	Z+7, r27	; 0x07
    2b8c:	a6 83       	std	Z+6, r26	; 0x06
    2b8e:	16 96       	adiw	r26, 0x06	; 6
    2b90:	4d 91       	ld	r20, X+
    2b92:	5c 91       	ld	r21, X
    2b94:	17 97       	sbiw	r26, 0x07	; 7
    2b96:	51 87       	std	Z+9, r21	; 0x09
    2b98:	40 87       	std	Z+8, r20	; 0x08
    2b9a:	16 96       	adiw	r26, 0x06	; 6
    2b9c:	cd 91       	ld	r28, X+
    2b9e:	dc 91       	ld	r29, X
    2ba0:	17 97       	sbiw	r26, 0x07	; 7
    2ba2:	3d 83       	std	Y+5, r19	; 0x05
    2ba4:	2c 83       	std	Y+4, r18	; 0x04
    2ba6:	17 96       	adiw	r26, 0x07	; 7
    2ba8:	3c 93       	st	X, r19
    2baa:	2e 93       	st	-X, r18
    2bac:	16 97       	sbiw	r26, 0x06	; 6
    2bae:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2bb0:	8a 9f       	mul	r24, r26
    2bb2:	d0 01       	movw	r26, r0
    2bb4:	11 24       	eor	r1, r1
    2bb6:	af 57       	subi	r26, 0x7F	; 127
    2bb8:	ba 4e       	sbci	r27, 0xEA	; 234
    2bba:	b5 87       	std	Z+13, r27	; 0x0d
    2bbc:	a4 87       	std	Z+12, r26	; 0x0c
    2bbe:	8c 91       	ld	r24, X
    2bc0:	8f 5f       	subi	r24, 0xFF	; 255
    2bc2:	8c 93       	st	X, r24
    2bc4:	92 8d       	ldd	r25, Z+26	; 0x1a
    2bc6:	e0 91 ef 15 	lds	r30, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2bca:	f0 91 f0 15 	lds	r31, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    2bce:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bd0:	89 17       	cp	r24, r25
    2bd2:	18 f4       	brcc	.+6      	; 0x2bda <vTaskRemoveFromUnorderedEventList+0x12e>
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	80 93 39 15 	sts	0x1539, r24	; 0x801539 <xYieldPending>
    2bda:	df 91       	pop	r29
    2bdc:	cf 91       	pop	r28
    2bde:	08 95       	ret

00002be0 <vTaskSetTimeOutState>:
    2be0:	0f b6       	in	r0, 0x3f	; 63
    2be2:	f8 94       	cli
    2be4:	0f 92       	push	r0
    2be6:	20 91 38 15 	lds	r18, 0x1538	; 0x801538 <xNumOfOverflows>
    2bea:	fc 01       	movw	r30, r24
    2bec:	20 83       	st	Z, r18
    2bee:	40 91 40 15 	lds	r20, 0x1540	; 0x801540 <xTickCount>
    2bf2:	50 91 41 15 	lds	r21, 0x1541	; 0x801541 <xTickCount+0x1>
    2bf6:	60 91 42 15 	lds	r22, 0x1542	; 0x801542 <xTickCount+0x2>
    2bfa:	70 91 43 15 	lds	r23, 0x1543	; 0x801543 <xTickCount+0x3>
    2bfe:	41 83       	std	Z+1, r20	; 0x01
    2c00:	52 83       	std	Z+2, r21	; 0x02
    2c02:	63 83       	std	Z+3, r22	; 0x03
    2c04:	74 83       	std	Z+4, r23	; 0x04
    2c06:	0f 90       	pop	r0
    2c08:	0f be       	out	0x3f, r0	; 63
    2c0a:	08 95       	ret

00002c0c <vTaskInternalSetTimeOutState>:
    2c0c:	20 91 38 15 	lds	r18, 0x1538	; 0x801538 <xNumOfOverflows>
    2c10:	fc 01       	movw	r30, r24
    2c12:	20 83       	st	Z, r18
    2c14:	40 91 40 15 	lds	r20, 0x1540	; 0x801540 <xTickCount>
    2c18:	50 91 41 15 	lds	r21, 0x1541	; 0x801541 <xTickCount+0x1>
    2c1c:	60 91 42 15 	lds	r22, 0x1542	; 0x801542 <xTickCount+0x2>
    2c20:	70 91 43 15 	lds	r23, 0x1543	; 0x801543 <xTickCount+0x3>
    2c24:	41 83       	std	Z+1, r20	; 0x01
    2c26:	52 83       	std	Z+2, r21	; 0x02
    2c28:	63 83       	std	Z+3, r22	; 0x03
    2c2a:	74 83       	std	Z+4, r23	; 0x04
    2c2c:	08 95       	ret

00002c2e <xTaskCheckForTimeOut>:
    2c2e:	8f 92       	push	r8
    2c30:	9f 92       	push	r9
    2c32:	af 92       	push	r10
    2c34:	bf 92       	push	r11
    2c36:	cf 92       	push	r12
    2c38:	df 92       	push	r13
    2c3a:	ef 92       	push	r14
    2c3c:	ff 92       	push	r15
    2c3e:	0f 93       	push	r16
    2c40:	1f 93       	push	r17
    2c42:	cf 93       	push	r28
    2c44:	df 93       	push	r29
    2c46:	fb 01       	movw	r30, r22
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	f8 94       	cli
    2c4c:	0f 92       	push	r0
    2c4e:	c0 90 40 15 	lds	r12, 0x1540	; 0x801540 <xTickCount>
    2c52:	d0 90 41 15 	lds	r13, 0x1541	; 0x801541 <xTickCount+0x1>
    2c56:	e0 90 42 15 	lds	r14, 0x1542	; 0x801542 <xTickCount+0x2>
    2c5a:	f0 90 43 15 	lds	r15, 0x1543	; 0x801543 <xTickCount+0x3>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	11 96       	adiw	r26, 0x01	; 1
    2c62:	0d 91       	ld	r16, X+
    2c64:	1d 91       	ld	r17, X+
    2c66:	2d 91       	ld	r18, X+
    2c68:	3c 91       	ld	r19, X
    2c6a:	14 97       	sbiw	r26, 0x04	; 4
    2c6c:	46 01       	movw	r8, r12
    2c6e:	57 01       	movw	r10, r14
    2c70:	80 1a       	sub	r8, r16
    2c72:	91 0a       	sbc	r9, r17
    2c74:	a2 0a       	sbc	r10, r18
    2c76:	b3 0a       	sbc	r11, r19
    2c78:	40 81       	ld	r20, Z
    2c7a:	51 81       	ldd	r21, Z+1	; 0x01
    2c7c:	62 81       	ldd	r22, Z+2	; 0x02
    2c7e:	73 81       	ldd	r23, Z+3	; 0x03
    2c80:	4f 3f       	cpi	r20, 0xFF	; 255
    2c82:	bf ef       	ldi	r27, 0xFF	; 255
    2c84:	5b 07       	cpc	r21, r27
    2c86:	6b 07       	cpc	r22, r27
    2c88:	7b 07       	cpc	r23, r27
    2c8a:	39 f1       	breq	.+78     	; 0x2cda <xTaskCheckForTimeOut+0xac>
    2c8c:	ec 01       	movw	r28, r24
    2c8e:	b8 81       	ld	r27, Y
    2c90:	a0 91 38 15 	lds	r26, 0x1538	; 0x801538 <xNumOfOverflows>
    2c94:	ba 17       	cp	r27, r26
    2c96:	59 f0       	breq	.+22     	; 0x2cae <xTaskCheckForTimeOut+0x80>
    2c98:	c0 16       	cp	r12, r16
    2c9a:	d1 06       	cpc	r13, r17
    2c9c:	e2 06       	cpc	r14, r18
    2c9e:	f3 06       	cpc	r15, r19
    2ca0:	30 f0       	brcs	.+12     	; 0x2cae <xTaskCheckForTimeOut+0x80>
    2ca2:	10 82       	st	Z, r1
    2ca4:	11 82       	std	Z+1, r1	; 0x01
    2ca6:	12 82       	std	Z+2, r1	; 0x02
    2ca8:	13 82       	std	Z+3, r1	; 0x03
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	17 c0       	rjmp	.+46     	; 0x2cdc <xTaskCheckForTimeOut+0xae>
    2cae:	84 16       	cp	r8, r20
    2cb0:	95 06       	cpc	r9, r21
    2cb2:	a6 06       	cpc	r10, r22
    2cb4:	b7 06       	cpc	r11, r23
    2cb6:	58 f4       	brcc	.+22     	; 0x2cce <xTaskCheckForTimeOut+0xa0>
    2cb8:	48 19       	sub	r20, r8
    2cba:	59 09       	sbc	r21, r9
    2cbc:	6a 09       	sbc	r22, r10
    2cbe:	7b 09       	sbc	r23, r11
    2cc0:	40 83       	st	Z, r20
    2cc2:	51 83       	std	Z+1, r21	; 0x01
    2cc4:	62 83       	std	Z+2, r22	; 0x02
    2cc6:	73 83       	std	Z+3, r23	; 0x03
    2cc8:	a1 df       	rcall	.-190    	; 0x2c0c <vTaskInternalSetTimeOutState>
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	07 c0       	rjmp	.+14     	; 0x2cdc <xTaskCheckForTimeOut+0xae>
    2cce:	10 82       	st	Z, r1
    2cd0:	11 82       	std	Z+1, r1	; 0x01
    2cd2:	12 82       	std	Z+2, r1	; 0x02
    2cd4:	13 82       	std	Z+3, r1	; 0x03
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	01 c0       	rjmp	.+2      	; 0x2cdc <xTaskCheckForTimeOut+0xae>
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	0f 90       	pop	r0
    2cde:	0f be       	out	0x3f, r0	; 63
    2ce0:	df 91       	pop	r29
    2ce2:	cf 91       	pop	r28
    2ce4:	1f 91       	pop	r17
    2ce6:	0f 91       	pop	r16
    2ce8:	ff 90       	pop	r15
    2cea:	ef 90       	pop	r14
    2cec:	df 90       	pop	r13
    2cee:	cf 90       	pop	r12
    2cf0:	bf 90       	pop	r11
    2cf2:	af 90       	pop	r10
    2cf4:	9f 90       	pop	r9
    2cf6:	8f 90       	pop	r8
    2cf8:	08 95       	ret

00002cfa <vTaskMissedYield>:
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	80 93 39 15 	sts	0x1539, r24	; 0x801539 <xYieldPending>
    2d00:	08 95       	ret

00002d02 <xTaskGetCurrentTaskHandle>:
    2d02:	80 91 ef 15 	lds	r24, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2d06:	90 91 f0 15 	lds	r25, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    2d0a:	08 95       	ret

00002d0c <xTaskGetSchedulerState>:
    2d0c:	80 91 3e 15 	lds	r24, 0x153E	; 0x80153e <xSchedulerRunning>
    2d10:	88 23       	and	r24, r24
    2d12:	31 f0       	breq	.+12     	; 0x2d20 <xTaskGetSchedulerState+0x14>
    2d14:	80 91 30 15 	lds	r24, 0x1530	; 0x801530 <uxSchedulerSuspended>
    2d18:	81 11       	cpse	r24, r1
    2d1a:	04 c0       	rjmp	.+8      	; 0x2d24 <xTaskGetSchedulerState+0x18>
    2d1c:	82 e0       	ldi	r24, 0x02	; 2
    2d1e:	08 95       	ret
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	08 95       	ret
    2d24:	80 e0       	ldi	r24, 0x00	; 0
    2d26:	08 95       	ret

00002d28 <xTaskPriorityInherit>:
    2d28:	0f 93       	push	r16
    2d2a:	1f 93       	push	r17
    2d2c:	cf 93       	push	r28
    2d2e:	df 93       	push	r29
    2d30:	fc 01       	movw	r30, r24
    2d32:	89 2b       	or	r24, r25
    2d34:	09 f4       	brne	.+2      	; 0x2d38 <xTaskPriorityInherit+0x10>
    2d36:	77 c0       	rjmp	.+238    	; 0x2e26 <xTaskPriorityInherit+0xfe>
    2d38:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d3a:	a0 91 ef 15 	lds	r26, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2d3e:	b0 91 f0 15 	lds	r27, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    2d42:	5a 96       	adiw	r26, 0x1a	; 26
    2d44:	9c 91       	ld	r25, X
    2d46:	89 17       	cp	r24, r25
    2d48:	08 f0       	brcs	.+2      	; 0x2d4c <xTaskPriorityInherit+0x24>
    2d4a:	63 c0       	rjmp	.+198    	; 0x2e12 <xTaskPriorityInherit+0xea>
    2d4c:	46 85       	ldd	r20, Z+14	; 0x0e
    2d4e:	57 85       	ldd	r21, Z+15	; 0x0f
    2d50:	60 89       	ldd	r22, Z+16	; 0x10
    2d52:	71 89       	ldd	r23, Z+17	; 0x11
    2d54:	77 23       	and	r23, r23
    2d56:	94 f0       	brlt	.+36     	; 0x2d7c <xTaskPriorityInherit+0x54>
    2d58:	a0 91 ef 15 	lds	r26, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2d5c:	b0 91 f0 15 	lds	r27, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    2d60:	5a 96       	adiw	r26, 0x1a	; 26
    2d62:	9c 91       	ld	r25, X
    2d64:	4a e0       	ldi	r20, 0x0A	; 10
    2d66:	50 e0       	ldi	r21, 0x00	; 0
    2d68:	60 e0       	ldi	r22, 0x00	; 0
    2d6a:	70 e0       	ldi	r23, 0x00	; 0
    2d6c:	49 1b       	sub	r20, r25
    2d6e:	51 09       	sbc	r21, r1
    2d70:	61 09       	sbc	r22, r1
    2d72:	71 09       	sbc	r23, r1
    2d74:	46 87       	std	Z+14, r20	; 0x0e
    2d76:	57 87       	std	Z+15, r21	; 0x0f
    2d78:	60 8b       	std	Z+16, r22	; 0x10
    2d7a:	71 8b       	std	Z+17, r23	; 0x11
    2d7c:	24 85       	ldd	r18, Z+12	; 0x0c
    2d7e:	35 85       	ldd	r19, Z+13	; 0x0d
    2d80:	4b e0       	ldi	r20, 0x0B	; 11
    2d82:	84 9f       	mul	r24, r20
    2d84:	c0 01       	movw	r24, r0
    2d86:	11 24       	eor	r1, r1
    2d88:	8f 57       	subi	r24, 0x7F	; 127
    2d8a:	9a 4e       	sbci	r25, 0xEA	; 234
    2d8c:	28 17       	cp	r18, r24
    2d8e:	39 07       	cpc	r19, r25
    2d90:	b9 f5       	brne	.+110    	; 0x2e00 <xTaskPriorityInherit+0xd8>
    2d92:	ef 01       	movw	r28, r30
    2d94:	8f 01       	movw	r16, r30
    2d96:	0e 5f       	subi	r16, 0xFE	; 254
    2d98:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9a:	c8 01       	movw	r24, r16
    2d9c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <uxListRemove>
    2da0:	e0 91 ef 15 	lds	r30, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2da4:	f0 91 f0 15 	lds	r31, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    2da8:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2daa:	ea 8f       	std	Y+26, r30	; 0x1a
    2dac:	80 91 3f 15 	lds	r24, 0x153F	; 0x80153f <uxTopReadyPriority>
    2db0:	8e 17       	cp	r24, r30
    2db2:	10 f4       	brcc	.+4      	; 0x2db8 <xTaskPriorityInherit+0x90>
    2db4:	e0 93 3f 15 	sts	0x153F, r30	; 0x80153f <uxTopReadyPriority>
    2db8:	8b e0       	ldi	r24, 0x0B	; 11
    2dba:	8e 9f       	mul	r24, r30
    2dbc:	f0 01       	movw	r30, r0
    2dbe:	11 24       	eor	r1, r1
    2dc0:	ef 57       	subi	r30, 0x7F	; 127
    2dc2:	fa 4e       	sbci	r31, 0xEA	; 234
    2dc4:	01 80       	ldd	r0, Z+1	; 0x01
    2dc6:	f2 81       	ldd	r31, Z+2	; 0x02
    2dc8:	e0 2d       	mov	r30, r0
    2dca:	ff 83       	std	Y+7, r31	; 0x07
    2dcc:	ee 83       	std	Y+6, r30	; 0x06
    2dce:	26 81       	ldd	r18, Z+6	; 0x06
    2dd0:	37 81       	ldd	r19, Z+7	; 0x07
    2dd2:	39 87       	std	Y+9, r19	; 0x09
    2dd4:	28 87       	std	Y+8, r18	; 0x08
    2dd6:	a6 81       	ldd	r26, Z+6	; 0x06
    2dd8:	b7 81       	ldd	r27, Z+7	; 0x07
    2dda:	15 96       	adiw	r26, 0x05	; 5
    2ddc:	1c 93       	st	X, r17
    2dde:	0e 93       	st	-X, r16
    2de0:	14 97       	sbiw	r26, 0x04	; 4
    2de2:	17 83       	std	Z+7, r17	; 0x07
    2de4:	06 83       	std	Z+6, r16	; 0x06
    2de6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2de8:	8e 9f       	mul	r24, r30
    2dea:	f0 01       	movw	r30, r0
    2dec:	11 24       	eor	r1, r1
    2dee:	ef 57       	subi	r30, 0x7F	; 127
    2df0:	fa 4e       	sbci	r31, 0xEA	; 234
    2df2:	fd 87       	std	Y+13, r31	; 0x0d
    2df4:	ec 87       	std	Y+12, r30	; 0x0c
    2df6:	80 81       	ld	r24, Z
    2df8:	8f 5f       	subi	r24, 0xFF	; 255
    2dfa:	80 83       	st	Z, r24
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	16 c0       	rjmp	.+44     	; 0x2e2c <xTaskPriorityInherit+0x104>
    2e00:	a0 91 ef 15 	lds	r26, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2e04:	b0 91 f0 15 	lds	r27, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    2e08:	5a 96       	adiw	r26, 0x1a	; 26
    2e0a:	8c 91       	ld	r24, X
    2e0c:	82 8f       	std	Z+26, r24	; 0x1a
    2e0e:	81 e0       	ldi	r24, 0x01	; 1
    2e10:	0d c0       	rjmp	.+26     	; 0x2e2c <xTaskPriorityInherit+0x104>
    2e12:	95 a5       	ldd	r25, Z+45	; 0x2d
    2e14:	e0 91 ef 15 	lds	r30, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2e18:	f0 91 f0 15 	lds	r31, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    2e1c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e1e:	98 17       	cp	r25, r24
    2e20:	20 f0       	brcs	.+8      	; 0x2e2a <xTaskPriorityInherit+0x102>
    2e22:	80 e0       	ldi	r24, 0x00	; 0
    2e24:	03 c0       	rjmp	.+6      	; 0x2e2c <xTaskPriorityInherit+0x104>
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	01 c0       	rjmp	.+2      	; 0x2e2c <xTaskPriorityInherit+0x104>
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	df 91       	pop	r29
    2e2e:	cf 91       	pop	r28
    2e30:	1f 91       	pop	r17
    2e32:	0f 91       	pop	r16
    2e34:	08 95       	ret

00002e36 <xTaskPriorityDisinherit>:
    2e36:	0f 93       	push	r16
    2e38:	1f 93       	push	r17
    2e3a:	cf 93       	push	r28
    2e3c:	df 93       	push	r29
    2e3e:	fc 01       	movw	r30, r24
    2e40:	89 2b       	or	r24, r25
    2e42:	09 f4       	brne	.+2      	; 0x2e46 <xTaskPriorityDisinherit+0x10>
    2e44:	49 c0       	rjmp	.+146    	; 0x2ed8 <xTaskPriorityDisinherit+0xa2>
    2e46:	86 a5       	ldd	r24, Z+46	; 0x2e
    2e48:	81 50       	subi	r24, 0x01	; 1
    2e4a:	86 a7       	std	Z+46, r24	; 0x2e
    2e4c:	22 8d       	ldd	r18, Z+26	; 0x1a
    2e4e:	95 a5       	ldd	r25, Z+45	; 0x2d
    2e50:	29 17       	cp	r18, r25
    2e52:	09 f4       	brne	.+2      	; 0x2e56 <xTaskPriorityDisinherit+0x20>
    2e54:	43 c0       	rjmp	.+134    	; 0x2edc <xTaskPriorityDisinherit+0xa6>
    2e56:	81 11       	cpse	r24, r1
    2e58:	43 c0       	rjmp	.+134    	; 0x2ee0 <xTaskPriorityDisinherit+0xaa>
    2e5a:	ef 01       	movw	r28, r30
    2e5c:	8f 01       	movw	r16, r30
    2e5e:	0e 5f       	subi	r16, 0xFE	; 254
    2e60:	1f 4f       	sbci	r17, 0xFF	; 255
    2e62:	c8 01       	movw	r24, r16
    2e64:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <uxListRemove>
    2e68:	ed a5       	ldd	r30, Y+45	; 0x2d
    2e6a:	ea 8f       	std	Y+26, r30	; 0x1a
    2e6c:	8a e0       	ldi	r24, 0x0A	; 10
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	a0 e0       	ldi	r26, 0x00	; 0
    2e72:	b0 e0       	ldi	r27, 0x00	; 0
    2e74:	8e 1b       	sub	r24, r30
    2e76:	91 09       	sbc	r25, r1
    2e78:	a1 09       	sbc	r26, r1
    2e7a:	b1 09       	sbc	r27, r1
    2e7c:	8e 87       	std	Y+14, r24	; 0x0e
    2e7e:	9f 87       	std	Y+15, r25	; 0x0f
    2e80:	a8 8b       	std	Y+16, r26	; 0x10
    2e82:	b9 8b       	std	Y+17, r27	; 0x11
    2e84:	80 91 3f 15 	lds	r24, 0x153F	; 0x80153f <uxTopReadyPriority>
    2e88:	8e 17       	cp	r24, r30
    2e8a:	10 f4       	brcc	.+4      	; 0x2e90 <xTaskPriorityDisinherit+0x5a>
    2e8c:	e0 93 3f 15 	sts	0x153F, r30	; 0x80153f <uxTopReadyPriority>
    2e90:	8b e0       	ldi	r24, 0x0B	; 11
    2e92:	8e 9f       	mul	r24, r30
    2e94:	f0 01       	movw	r30, r0
    2e96:	11 24       	eor	r1, r1
    2e98:	ef 57       	subi	r30, 0x7F	; 127
    2e9a:	fa 4e       	sbci	r31, 0xEA	; 234
    2e9c:	01 80       	ldd	r0, Z+1	; 0x01
    2e9e:	f2 81       	ldd	r31, Z+2	; 0x02
    2ea0:	e0 2d       	mov	r30, r0
    2ea2:	ff 83       	std	Y+7, r31	; 0x07
    2ea4:	ee 83       	std	Y+6, r30	; 0x06
    2ea6:	26 81       	ldd	r18, Z+6	; 0x06
    2ea8:	37 81       	ldd	r19, Z+7	; 0x07
    2eaa:	39 87       	std	Y+9, r19	; 0x09
    2eac:	28 87       	std	Y+8, r18	; 0x08
    2eae:	a6 81       	ldd	r26, Z+6	; 0x06
    2eb0:	b7 81       	ldd	r27, Z+7	; 0x07
    2eb2:	15 96       	adiw	r26, 0x05	; 5
    2eb4:	1c 93       	st	X, r17
    2eb6:	0e 93       	st	-X, r16
    2eb8:	14 97       	sbiw	r26, 0x04	; 4
    2eba:	17 83       	std	Z+7, r17	; 0x07
    2ebc:	06 83       	std	Z+6, r16	; 0x06
    2ebe:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2ec0:	8e 9f       	mul	r24, r30
    2ec2:	f0 01       	movw	r30, r0
    2ec4:	11 24       	eor	r1, r1
    2ec6:	ef 57       	subi	r30, 0x7F	; 127
    2ec8:	fa 4e       	sbci	r31, 0xEA	; 234
    2eca:	fd 87       	std	Y+13, r31	; 0x0d
    2ecc:	ec 87       	std	Y+12, r30	; 0x0c
    2ece:	80 81       	ld	r24, Z
    2ed0:	8f 5f       	subi	r24, 0xFF	; 255
    2ed2:	80 83       	st	Z, r24
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	05 c0       	rjmp	.+10     	; 0x2ee2 <xTaskPriorityDisinherit+0xac>
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	03 c0       	rjmp	.+6      	; 0x2ee2 <xTaskPriorityDisinherit+0xac>
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	01 c0       	rjmp	.+2      	; 0x2ee2 <xTaskPriorityDisinherit+0xac>
    2ee0:	80 e0       	ldi	r24, 0x00	; 0
    2ee2:	df 91       	pop	r29
    2ee4:	cf 91       	pop	r28
    2ee6:	1f 91       	pop	r17
    2ee8:	0f 91       	pop	r16
    2eea:	08 95       	ret

00002eec <vTaskPriorityDisinheritAfterTimeout>:
    2eec:	0f 93       	push	r16
    2eee:	1f 93       	push	r17
    2ef0:	cf 93       	push	r28
    2ef2:	df 93       	push	r29
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	89 2b       	or	r24, r25
    2ef8:	09 f4       	brne	.+2      	; 0x2efc <vTaskPriorityDisinheritAfterTimeout+0x10>
    2efa:	5a c0       	rjmp	.+180    	; 0x2fb0 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2efc:	85 a5       	ldd	r24, Z+45	; 0x2d
    2efe:	86 17       	cp	r24, r22
    2f00:	08 f4       	brcc	.+2      	; 0x2f04 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2f02:	86 2f       	mov	r24, r22
    2f04:	92 8d       	ldd	r25, Z+26	; 0x1a
    2f06:	89 17       	cp	r24, r25
    2f08:	09 f4       	brne	.+2      	; 0x2f0c <vTaskPriorityDisinheritAfterTimeout+0x20>
    2f0a:	52 c0       	rjmp	.+164    	; 0x2fb0 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2f0c:	26 a5       	ldd	r18, Z+46	; 0x2e
    2f0e:	21 30       	cpi	r18, 0x01	; 1
    2f10:	09 f0       	breq	.+2      	; 0x2f14 <vTaskPriorityDisinheritAfterTimeout+0x28>
    2f12:	4e c0       	rjmp	.+156    	; 0x2fb0 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2f14:	82 8f       	std	Z+26, r24	; 0x1a
    2f16:	46 85       	ldd	r20, Z+14	; 0x0e
    2f18:	57 85       	ldd	r21, Z+15	; 0x0f
    2f1a:	60 89       	ldd	r22, Z+16	; 0x10
    2f1c:	71 89       	ldd	r23, Z+17	; 0x11
    2f1e:	77 23       	and	r23, r23
    2f20:	64 f0       	brlt	.+24     	; 0x2f3a <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2f22:	4a e0       	ldi	r20, 0x0A	; 10
    2f24:	50 e0       	ldi	r21, 0x00	; 0
    2f26:	60 e0       	ldi	r22, 0x00	; 0
    2f28:	70 e0       	ldi	r23, 0x00	; 0
    2f2a:	48 1b       	sub	r20, r24
    2f2c:	51 09       	sbc	r21, r1
    2f2e:	61 09       	sbc	r22, r1
    2f30:	71 09       	sbc	r23, r1
    2f32:	46 87       	std	Z+14, r20	; 0x0e
    2f34:	57 87       	std	Z+15, r21	; 0x0f
    2f36:	60 8b       	std	Z+16, r22	; 0x10
    2f38:	71 8b       	std	Z+17, r23	; 0x11
    2f3a:	24 85       	ldd	r18, Z+12	; 0x0c
    2f3c:	35 85       	ldd	r19, Z+13	; 0x0d
    2f3e:	4b e0       	ldi	r20, 0x0B	; 11
    2f40:	94 9f       	mul	r25, r20
    2f42:	c0 01       	movw	r24, r0
    2f44:	11 24       	eor	r1, r1
    2f46:	8f 57       	subi	r24, 0x7F	; 127
    2f48:	9a 4e       	sbci	r25, 0xEA	; 234
    2f4a:	28 17       	cp	r18, r24
    2f4c:	39 07       	cpc	r19, r25
    2f4e:	81 f5       	brne	.+96     	; 0x2fb0 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2f50:	ef 01       	movw	r28, r30
    2f52:	8f 01       	movw	r16, r30
    2f54:	0e 5f       	subi	r16, 0xFE	; 254
    2f56:	1f 4f       	sbci	r17, 0xFF	; 255
    2f58:	c8 01       	movw	r24, r16
    2f5a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <uxListRemove>
    2f5e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2f60:	80 91 3f 15 	lds	r24, 0x153F	; 0x80153f <uxTopReadyPriority>
    2f64:	8e 17       	cp	r24, r30
    2f66:	10 f4       	brcc	.+4      	; 0x2f6c <vTaskPriorityDisinheritAfterTimeout+0x80>
    2f68:	e0 93 3f 15 	sts	0x153F, r30	; 0x80153f <uxTopReadyPriority>
    2f6c:	8b e0       	ldi	r24, 0x0B	; 11
    2f6e:	8e 9f       	mul	r24, r30
    2f70:	f0 01       	movw	r30, r0
    2f72:	11 24       	eor	r1, r1
    2f74:	ef 57       	subi	r30, 0x7F	; 127
    2f76:	fa 4e       	sbci	r31, 0xEA	; 234
    2f78:	01 80       	ldd	r0, Z+1	; 0x01
    2f7a:	f2 81       	ldd	r31, Z+2	; 0x02
    2f7c:	e0 2d       	mov	r30, r0
    2f7e:	ff 83       	std	Y+7, r31	; 0x07
    2f80:	ee 83       	std	Y+6, r30	; 0x06
    2f82:	26 81       	ldd	r18, Z+6	; 0x06
    2f84:	37 81       	ldd	r19, Z+7	; 0x07
    2f86:	39 87       	std	Y+9, r19	; 0x09
    2f88:	28 87       	std	Y+8, r18	; 0x08
    2f8a:	a6 81       	ldd	r26, Z+6	; 0x06
    2f8c:	b7 81       	ldd	r27, Z+7	; 0x07
    2f8e:	15 96       	adiw	r26, 0x05	; 5
    2f90:	1c 93       	st	X, r17
    2f92:	0e 93       	st	-X, r16
    2f94:	14 97       	sbiw	r26, 0x04	; 4
    2f96:	17 83       	std	Z+7, r17	; 0x07
    2f98:	06 83       	std	Z+6, r16	; 0x06
    2f9a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2f9c:	8e 9f       	mul	r24, r30
    2f9e:	f0 01       	movw	r30, r0
    2fa0:	11 24       	eor	r1, r1
    2fa2:	ef 57       	subi	r30, 0x7F	; 127
    2fa4:	fa 4e       	sbci	r31, 0xEA	; 234
    2fa6:	fd 87       	std	Y+13, r31	; 0x0d
    2fa8:	ec 87       	std	Y+12, r30	; 0x0c
    2faa:	80 81       	ld	r24, Z
    2fac:	8f 5f       	subi	r24, 0xFF	; 255
    2fae:	80 83       	st	Z, r24
    2fb0:	df 91       	pop	r29
    2fb2:	cf 91       	pop	r28
    2fb4:	1f 91       	pop	r17
    2fb6:	0f 91       	pop	r16
    2fb8:	08 95       	ret

00002fba <uxTaskResetEventItemValue>:
    2fba:	cf 92       	push	r12
    2fbc:	df 92       	push	r13
    2fbe:	ef 92       	push	r14
    2fc0:	ff 92       	push	r15
    2fc2:	e0 91 ef 15 	lds	r30, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2fc6:	f0 91 f0 15 	lds	r31, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    2fca:	66 85       	ldd	r22, Z+14	; 0x0e
    2fcc:	77 85       	ldd	r23, Z+15	; 0x0f
    2fce:	80 89       	ldd	r24, Z+16	; 0x10
    2fd0:	91 89       	ldd	r25, Z+17	; 0x11
    2fd2:	e0 91 ef 15 	lds	r30, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2fd6:	f0 91 f0 15 	lds	r31, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    2fda:	a0 91 ef 15 	lds	r26, 0x15EF	; 0x8015ef <pxCurrentTCB>
    2fde:	b0 91 f0 15 	lds	r27, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    2fe2:	5a 96       	adiw	r26, 0x1a	; 26
    2fe4:	2c 91       	ld	r18, X
    2fe6:	0f 2e       	mov	r0, r31
    2fe8:	fa e0       	ldi	r31, 0x0A	; 10
    2fea:	cf 2e       	mov	r12, r31
    2fec:	d1 2c       	mov	r13, r1
    2fee:	e1 2c       	mov	r14, r1
    2ff0:	f1 2c       	mov	r15, r1
    2ff2:	f0 2d       	mov	r31, r0
    2ff4:	c2 1a       	sub	r12, r18
    2ff6:	d1 08       	sbc	r13, r1
    2ff8:	e1 08       	sbc	r14, r1
    2ffa:	f1 08       	sbc	r15, r1
    2ffc:	c6 86       	std	Z+14, r12	; 0x0e
    2ffe:	d7 86       	std	Z+15, r13	; 0x0f
    3000:	e0 8a       	std	Z+16, r14	; 0x10
    3002:	f1 8a       	std	Z+17, r15	; 0x11
    3004:	ff 90       	pop	r15
    3006:	ef 90       	pop	r14
    3008:	df 90       	pop	r13
    300a:	cf 90       	pop	r12
    300c:	08 95       	ret

0000300e <pvTaskIncrementMutexHeldCount>:
    300e:	80 91 ef 15 	lds	r24, 0x15EF	; 0x8015ef <pxCurrentTCB>
    3012:	90 91 f0 15 	lds	r25, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    3016:	89 2b       	or	r24, r25
    3018:	39 f0       	breq	.+14     	; 0x3028 <pvTaskIncrementMutexHeldCount+0x1a>
    301a:	e0 91 ef 15 	lds	r30, 0x15EF	; 0x8015ef <pxCurrentTCB>
    301e:	f0 91 f0 15 	lds	r31, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    3022:	86 a5       	ldd	r24, Z+46	; 0x2e
    3024:	8f 5f       	subi	r24, 0xFF	; 255
    3026:	86 a7       	std	Z+46, r24	; 0x2e
    3028:	80 91 ef 15 	lds	r24, 0x15EF	; 0x8015ef <pxCurrentTCB>
    302c:	90 91 f0 15 	lds	r25, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    3030:	08 95       	ret

00003032 <xTaskGenericNotifyWait>:
    3032:	4f 92       	push	r4
    3034:	5f 92       	push	r5
    3036:	6f 92       	push	r6
    3038:	7f 92       	push	r7
    303a:	af 92       	push	r10
    303c:	bf 92       	push	r11
    303e:	cf 92       	push	r12
    3040:	df 92       	push	r13
    3042:	ef 92       	push	r14
    3044:	ff 92       	push	r15
    3046:	0f 93       	push	r16
    3048:	1f 93       	push	r17
    304a:	cf 93       	push	r28
    304c:	df 93       	push	r29
    304e:	28 01       	movw	r4, r16
    3050:	39 01       	movw	r6, r18
    3052:	0f b6       	in	r0, 0x3f	; 63
    3054:	f8 94       	cli
    3056:	0f 92       	push	r0
    3058:	e0 91 ef 15 	lds	r30, 0x15EF	; 0x8015ef <pxCurrentTCB>
    305c:	f0 91 f0 15 	lds	r31, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    3060:	c8 2f       	mov	r28, r24
    3062:	d0 e0       	ldi	r29, 0x00	; 0
    3064:	ec 0f       	add	r30, r28
    3066:	fd 1f       	adc	r31, r29
    3068:	83 a9       	ldd	r24, Z+51	; 0x33
    306a:	82 30       	cpi	r24, 0x02	; 2
    306c:	79 f1       	breq	.+94     	; 0x30cc <xTaskGenericNotifyWait+0x9a>
    306e:	e0 91 ef 15 	lds	r30, 0x15EF	; 0x8015ef <pxCurrentTCB>
    3072:	f0 91 f0 15 	lds	r31, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    3076:	ce 01       	movw	r24, r28
    3078:	88 0f       	add	r24, r24
    307a:	99 1f       	adc	r25, r25
    307c:	88 0f       	add	r24, r24
    307e:	99 1f       	adc	r25, r25
    3080:	e8 0f       	add	r30, r24
    3082:	f9 1f       	adc	r31, r25
    3084:	87 a5       	ldd	r24, Z+47	; 0x2f
    3086:	90 a9       	ldd	r25, Z+48	; 0x30
    3088:	a1 a9       	ldd	r26, Z+49	; 0x31
    308a:	b2 a9       	ldd	r27, Z+50	; 0x32
    308c:	40 95       	com	r20
    308e:	50 95       	com	r21
    3090:	60 95       	com	r22
    3092:	70 95       	com	r23
    3094:	48 23       	and	r20, r24
    3096:	59 23       	and	r21, r25
    3098:	6a 23       	and	r22, r26
    309a:	7b 23       	and	r23, r27
    309c:	47 a7       	std	Z+47, r20	; 0x2f
    309e:	50 ab       	std	Z+48, r21	; 0x30
    30a0:	61 ab       	std	Z+49, r22	; 0x31
    30a2:	72 ab       	std	Z+50, r23	; 0x32
    30a4:	e0 91 ef 15 	lds	r30, 0x15EF	; 0x8015ef <pxCurrentTCB>
    30a8:	f0 91 f0 15 	lds	r31, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    30ac:	ec 0f       	add	r30, r28
    30ae:	fd 1f       	adc	r31, r29
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	83 ab       	std	Z+51, r24	; 0x33
    30b4:	a1 14       	cp	r10, r1
    30b6:	b1 04       	cpc	r11, r1
    30b8:	c1 04       	cpc	r12, r1
    30ba:	d1 04       	cpc	r13, r1
    30bc:	39 f0       	breq	.+14     	; 0x30cc <xTaskGenericNotifyWait+0x9a>
    30be:	41 e0       	ldi	r20, 0x01	; 1
    30c0:	c6 01       	movw	r24, r12
    30c2:	b5 01       	movw	r22, r10
    30c4:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <prvAddCurrentTaskToDelayedList>
    30c8:	0e 94 d7 06 	call	0xdae	; 0xdae <vPortYield>
    30cc:	0f 90       	pop	r0
    30ce:	0f be       	out	0x3f, r0	; 63
    30d0:	0f b6       	in	r0, 0x3f	; 63
    30d2:	f8 94       	cli
    30d4:	0f 92       	push	r0
    30d6:	e1 14       	cp	r14, r1
    30d8:	f1 04       	cpc	r15, r1
    30da:	a1 f0       	breq	.+40     	; 0x3104 <xTaskGenericNotifyWait+0xd2>
    30dc:	e0 91 ef 15 	lds	r30, 0x15EF	; 0x8015ef <pxCurrentTCB>
    30e0:	f0 91 f0 15 	lds	r31, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    30e4:	ce 01       	movw	r24, r28
    30e6:	88 0f       	add	r24, r24
    30e8:	99 1f       	adc	r25, r25
    30ea:	88 0f       	add	r24, r24
    30ec:	99 1f       	adc	r25, r25
    30ee:	e8 0f       	add	r30, r24
    30f0:	f9 1f       	adc	r31, r25
    30f2:	87 a5       	ldd	r24, Z+47	; 0x2f
    30f4:	90 a9       	ldd	r25, Z+48	; 0x30
    30f6:	a1 a9       	ldd	r26, Z+49	; 0x31
    30f8:	b2 a9       	ldd	r27, Z+50	; 0x32
    30fa:	f7 01       	movw	r30, r14
    30fc:	80 83       	st	Z, r24
    30fe:	91 83       	std	Z+1, r25	; 0x01
    3100:	a2 83       	std	Z+2, r26	; 0x02
    3102:	b3 83       	std	Z+3, r27	; 0x03
    3104:	e0 91 ef 15 	lds	r30, 0x15EF	; 0x8015ef <pxCurrentTCB>
    3108:	f0 91 f0 15 	lds	r31, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    310c:	ec 0f       	add	r30, r28
    310e:	fd 1f       	adc	r31, r29
    3110:	83 a9       	ldd	r24, Z+51	; 0x33
    3112:	82 30       	cpi	r24, 0x02	; 2
    3114:	e9 f4       	brne	.+58     	; 0x3150 <xTaskGenericNotifyWait+0x11e>
    3116:	e0 91 ef 15 	lds	r30, 0x15EF	; 0x8015ef <pxCurrentTCB>
    311a:	f0 91 f0 15 	lds	r31, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    311e:	ce 01       	movw	r24, r28
    3120:	88 0f       	add	r24, r24
    3122:	99 1f       	adc	r25, r25
    3124:	88 0f       	add	r24, r24
    3126:	99 1f       	adc	r25, r25
    3128:	e8 0f       	add	r30, r24
    312a:	f9 1f       	adc	r31, r25
    312c:	87 a5       	ldd	r24, Z+47	; 0x2f
    312e:	90 a9       	ldd	r25, Z+48	; 0x30
    3130:	a1 a9       	ldd	r26, Z+49	; 0x31
    3132:	b2 a9       	ldd	r27, Z+50	; 0x32
    3134:	40 94       	com	r4
    3136:	50 94       	com	r5
    3138:	60 94       	com	r6
    313a:	70 94       	com	r7
    313c:	48 22       	and	r4, r24
    313e:	59 22       	and	r5, r25
    3140:	6a 22       	and	r6, r26
    3142:	7b 22       	and	r7, r27
    3144:	47 a6       	std	Z+47, r4	; 0x2f
    3146:	50 aa       	std	Z+48, r5	; 0x30
    3148:	61 aa       	std	Z+49, r6	; 0x31
    314a:	72 aa       	std	Z+50, r7	; 0x32
    314c:	81 e0       	ldi	r24, 0x01	; 1
    314e:	01 c0       	rjmp	.+2      	; 0x3152 <xTaskGenericNotifyWait+0x120>
    3150:	80 e0       	ldi	r24, 0x00	; 0
    3152:	20 91 ef 15 	lds	r18, 0x15EF	; 0x8015ef <pxCurrentTCB>
    3156:	30 91 f0 15 	lds	r19, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    315a:	c2 0f       	add	r28, r18
    315c:	d3 1f       	adc	r29, r19
    315e:	1b aa       	std	Y+51, r1	; 0x33
    3160:	0f 90       	pop	r0
    3162:	0f be       	out	0x3f, r0	; 63
    3164:	df 91       	pop	r29
    3166:	cf 91       	pop	r28
    3168:	1f 91       	pop	r17
    316a:	0f 91       	pop	r16
    316c:	ff 90       	pop	r15
    316e:	ef 90       	pop	r14
    3170:	df 90       	pop	r13
    3172:	cf 90       	pop	r12
    3174:	bf 90       	pop	r11
    3176:	af 90       	pop	r10
    3178:	7f 90       	pop	r7
    317a:	6f 90       	pop	r6
    317c:	5f 90       	pop	r5
    317e:	4f 90       	pop	r4
    3180:	08 95       	ret

00003182 <xTaskGenericNotify>:
    3182:	8f 92       	push	r8
    3184:	9f 92       	push	r9
    3186:	af 92       	push	r10
    3188:	bf 92       	push	r11
    318a:	ef 92       	push	r14
    318c:	ff 92       	push	r15
    318e:	0f 93       	push	r16
    3190:	cf 93       	push	r28
    3192:	df 93       	push	r29
    3194:	dc 01       	movw	r26, r24
    3196:	0f b6       	in	r0, 0x3f	; 63
    3198:	f8 94       	cli
    319a:	0f 92       	push	r0
    319c:	e1 14       	cp	r14, r1
    319e:	f1 04       	cpc	r15, r1
    31a0:	89 f0       	breq	.+34     	; 0x31c4 <xTaskGenericNotify+0x42>
    31a2:	e6 2f       	mov	r30, r22
    31a4:	f0 e0       	ldi	r31, 0x00	; 0
    31a6:	ee 0f       	add	r30, r30
    31a8:	ff 1f       	adc	r31, r31
    31aa:	ee 0f       	add	r30, r30
    31ac:	ff 1f       	adc	r31, r31
    31ae:	e8 0f       	add	r30, r24
    31b0:	f9 1f       	adc	r31, r25
    31b2:	87 a4       	ldd	r8, Z+47	; 0x2f
    31b4:	90 a8       	ldd	r9, Z+48	; 0x30
    31b6:	a1 a8       	ldd	r10, Z+49	; 0x31
    31b8:	b2 a8       	ldd	r11, Z+50	; 0x32
    31ba:	f7 01       	movw	r30, r14
    31bc:	80 82       	st	Z, r8
    31be:	91 82       	std	Z+1, r9	; 0x01
    31c0:	a2 82       	std	Z+2, r10	; 0x02
    31c2:	b3 82       	std	Z+3, r11	; 0x03
    31c4:	70 e0       	ldi	r23, 0x00	; 0
    31c6:	fd 01       	movw	r30, r26
    31c8:	e6 0f       	add	r30, r22
    31ca:	f7 1f       	adc	r31, r23
    31cc:	83 a9       	ldd	r24, Z+51	; 0x33
    31ce:	92 e0       	ldi	r25, 0x02	; 2
    31d0:	93 ab       	std	Z+51, r25	; 0x33
    31d2:	02 30       	cpi	r16, 0x02	; 2
    31d4:	01 f1       	breq	.+64     	; 0x3216 <xTaskGenericNotify+0x94>
    31d6:	18 f4       	brcc	.+6      	; 0x31de <xTaskGenericNotify+0x5c>
    31d8:	01 30       	cpi	r16, 0x01	; 1
    31da:	31 f0       	breq	.+12     	; 0x31e8 <xTaskGenericNotify+0x66>
    31dc:	4d c0       	rjmp	.+154    	; 0x3278 <xTaskGenericNotify+0xf6>
    31de:	03 30       	cpi	r16, 0x03	; 3
    31e0:	79 f1       	breq	.+94     	; 0x3240 <xTaskGenericNotify+0xbe>
    31e2:	04 30       	cpi	r16, 0x04	; 4
    31e4:	d1 f1       	breq	.+116    	; 0x325a <xTaskGenericNotify+0xd8>
    31e6:	48 c0       	rjmp	.+144    	; 0x3278 <xTaskGenericNotify+0xf6>
    31e8:	66 0f       	add	r22, r22
    31ea:	77 1f       	adc	r23, r23
    31ec:	66 0f       	add	r22, r22
    31ee:	77 1f       	adc	r23, r23
    31f0:	fd 01       	movw	r30, r26
    31f2:	e6 0f       	add	r30, r22
    31f4:	f7 1f       	adc	r31, r23
    31f6:	87 a4       	ldd	r8, Z+47	; 0x2f
    31f8:	90 a8       	ldd	r9, Z+48	; 0x30
    31fa:	a1 a8       	ldd	r10, Z+49	; 0x31
    31fc:	b2 a8       	ldd	r11, Z+50	; 0x32
    31fe:	ba 01       	movw	r22, r20
    3200:	a9 01       	movw	r20, r18
    3202:	48 29       	or	r20, r8
    3204:	59 29       	or	r21, r9
    3206:	6a 29       	or	r22, r10
    3208:	7b 29       	or	r23, r11
    320a:	47 a7       	std	Z+47, r20	; 0x2f
    320c:	50 ab       	std	Z+48, r21	; 0x30
    320e:	61 ab       	std	Z+49, r22	; 0x31
    3210:	72 ab       	std	Z+50, r23	; 0x32
    3212:	01 e0       	ldi	r16, 0x01	; 1
    3214:	34 c0       	rjmp	.+104    	; 0x327e <xTaskGenericNotify+0xfc>
    3216:	66 0f       	add	r22, r22
    3218:	77 1f       	adc	r23, r23
    321a:	66 0f       	add	r22, r22
    321c:	77 1f       	adc	r23, r23
    321e:	fd 01       	movw	r30, r26
    3220:	e6 0f       	add	r30, r22
    3222:	f7 1f       	adc	r31, r23
    3224:	47 a5       	ldd	r20, Z+47	; 0x2f
    3226:	50 a9       	ldd	r21, Z+48	; 0x30
    3228:	61 a9       	ldd	r22, Z+49	; 0x31
    322a:	72 a9       	ldd	r23, Z+50	; 0x32
    322c:	4f 5f       	subi	r20, 0xFF	; 255
    322e:	5f 4f       	sbci	r21, 0xFF	; 255
    3230:	6f 4f       	sbci	r22, 0xFF	; 255
    3232:	7f 4f       	sbci	r23, 0xFF	; 255
    3234:	47 a7       	std	Z+47, r20	; 0x2f
    3236:	50 ab       	std	Z+48, r21	; 0x30
    3238:	61 ab       	std	Z+49, r22	; 0x31
    323a:	72 ab       	std	Z+50, r23	; 0x32
    323c:	01 e0       	ldi	r16, 0x01	; 1
    323e:	1f c0       	rjmp	.+62     	; 0x327e <xTaskGenericNotify+0xfc>
    3240:	66 0f       	add	r22, r22
    3242:	77 1f       	adc	r23, r23
    3244:	66 0f       	add	r22, r22
    3246:	77 1f       	adc	r23, r23
    3248:	fd 01       	movw	r30, r26
    324a:	e6 0f       	add	r30, r22
    324c:	f7 1f       	adc	r31, r23
    324e:	27 a7       	std	Z+47, r18	; 0x2f
    3250:	30 ab       	std	Z+48, r19	; 0x30
    3252:	41 ab       	std	Z+49, r20	; 0x31
    3254:	52 ab       	std	Z+50, r21	; 0x32
    3256:	01 e0       	ldi	r16, 0x01	; 1
    3258:	12 c0       	rjmp	.+36     	; 0x327e <xTaskGenericNotify+0xfc>
    325a:	82 30       	cpi	r24, 0x02	; 2
    325c:	79 f0       	breq	.+30     	; 0x327c <xTaskGenericNotify+0xfa>
    325e:	66 0f       	add	r22, r22
    3260:	77 1f       	adc	r23, r23
    3262:	66 0f       	add	r22, r22
    3264:	77 1f       	adc	r23, r23
    3266:	fd 01       	movw	r30, r26
    3268:	e6 0f       	add	r30, r22
    326a:	f7 1f       	adc	r31, r23
    326c:	27 a7       	std	Z+47, r18	; 0x2f
    326e:	30 ab       	std	Z+48, r19	; 0x30
    3270:	41 ab       	std	Z+49, r20	; 0x31
    3272:	52 ab       	std	Z+50, r21	; 0x32
    3274:	01 e0       	ldi	r16, 0x01	; 1
    3276:	03 c0       	rjmp	.+6      	; 0x327e <xTaskGenericNotify+0xfc>
    3278:	01 e0       	ldi	r16, 0x01	; 1
    327a:	01 c0       	rjmp	.+2      	; 0x327e <xTaskGenericNotify+0xfc>
    327c:	00 e0       	ldi	r16, 0x00	; 0
    327e:	81 30       	cpi	r24, 0x01	; 1
    3280:	09 f0       	breq	.+2      	; 0x3284 <xTaskGenericNotify+0x102>
    3282:	69 c0       	rjmp	.+210    	; 0x3356 <xTaskGenericNotify+0x1d4>
    3284:	1c 96       	adiw	r26, 0x0c	; 12
    3286:	ed 91       	ld	r30, X+
    3288:	fc 91       	ld	r31, X
    328a:	1d 97       	sbiw	r26, 0x0d	; 13
    328c:	16 96       	adiw	r26, 0x06	; 6
    328e:	cd 91       	ld	r28, X+
    3290:	dc 91       	ld	r29, X
    3292:	17 97       	sbiw	r26, 0x07	; 7
    3294:	18 96       	adiw	r26, 0x08	; 8
    3296:	8d 91       	ld	r24, X+
    3298:	9c 91       	ld	r25, X
    329a:	19 97       	sbiw	r26, 0x09	; 9
    329c:	9f 83       	std	Y+7, r25	; 0x07
    329e:	8e 83       	std	Y+6, r24	; 0x06
    32a0:	18 96       	adiw	r26, 0x08	; 8
    32a2:	cd 91       	ld	r28, X+
    32a4:	dc 91       	ld	r29, X
    32a6:	19 97       	sbiw	r26, 0x09	; 9
    32a8:	16 96       	adiw	r26, 0x06	; 6
    32aa:	8d 91       	ld	r24, X+
    32ac:	9c 91       	ld	r25, X
    32ae:	17 97       	sbiw	r26, 0x07	; 7
    32b0:	9d 83       	std	Y+5, r25	; 0x05
    32b2:	8c 83       	std	Y+4, r24	; 0x04
    32b4:	81 81       	ldd	r24, Z+1	; 0x01
    32b6:	92 81       	ldd	r25, Z+2	; 0x02
    32b8:	9d 01       	movw	r18, r26
    32ba:	2e 5f       	subi	r18, 0xFE	; 254
    32bc:	3f 4f       	sbci	r19, 0xFF	; 255
    32be:	82 17       	cp	r24, r18
    32c0:	93 07       	cpc	r25, r19
    32c2:	31 f4       	brne	.+12     	; 0x32d0 <xTaskGenericNotify+0x14e>
    32c4:	18 96       	adiw	r26, 0x08	; 8
    32c6:	8d 91       	ld	r24, X+
    32c8:	9c 91       	ld	r25, X
    32ca:	19 97       	sbiw	r26, 0x09	; 9
    32cc:	92 83       	std	Z+2, r25	; 0x02
    32ce:	81 83       	std	Z+1, r24	; 0x01
    32d0:	1d 96       	adiw	r26, 0x0d	; 13
    32d2:	1c 92       	st	X, r1
    32d4:	1e 92       	st	-X, r1
    32d6:	1c 97       	sbiw	r26, 0x0c	; 12
    32d8:	80 81       	ld	r24, Z
    32da:	81 50       	subi	r24, 0x01	; 1
    32dc:	80 83       	st	Z, r24
    32de:	5a 96       	adiw	r26, 0x1a	; 26
    32e0:	ec 91       	ld	r30, X
    32e2:	5a 97       	sbiw	r26, 0x1a	; 26
    32e4:	80 91 3f 15 	lds	r24, 0x153F	; 0x80153f <uxTopReadyPriority>
    32e8:	8e 17       	cp	r24, r30
    32ea:	10 f4       	brcc	.+4      	; 0x32f0 <xTaskGenericNotify+0x16e>
    32ec:	e0 93 3f 15 	sts	0x153F, r30	; 0x80153f <uxTopReadyPriority>
    32f0:	8b e0       	ldi	r24, 0x0B	; 11
    32f2:	8e 9f       	mul	r24, r30
    32f4:	f0 01       	movw	r30, r0
    32f6:	11 24       	eor	r1, r1
    32f8:	ef 57       	subi	r30, 0x7F	; 127
    32fa:	fa 4e       	sbci	r31, 0xEA	; 234
    32fc:	01 80       	ldd	r0, Z+1	; 0x01
    32fe:	f2 81       	ldd	r31, Z+2	; 0x02
    3300:	e0 2d       	mov	r30, r0
    3302:	17 96       	adiw	r26, 0x07	; 7
    3304:	fc 93       	st	X, r31
    3306:	ee 93       	st	-X, r30
    3308:	16 97       	sbiw	r26, 0x06	; 6
    330a:	46 81       	ldd	r20, Z+6	; 0x06
    330c:	57 81       	ldd	r21, Z+7	; 0x07
    330e:	19 96       	adiw	r26, 0x09	; 9
    3310:	5c 93       	st	X, r21
    3312:	4e 93       	st	-X, r20
    3314:	18 97       	sbiw	r26, 0x08	; 8
    3316:	c6 81       	ldd	r28, Z+6	; 0x06
    3318:	d7 81       	ldd	r29, Z+7	; 0x07
    331a:	3d 83       	std	Y+5, r19	; 0x05
    331c:	2c 83       	std	Y+4, r18	; 0x04
    331e:	37 83       	std	Z+7, r19	; 0x07
    3320:	26 83       	std	Z+6, r18	; 0x06
    3322:	5a 96       	adiw	r26, 0x1a	; 26
    3324:	ec 91       	ld	r30, X
    3326:	5a 97       	sbiw	r26, 0x1a	; 26
    3328:	8e 9f       	mul	r24, r30
    332a:	f0 01       	movw	r30, r0
    332c:	11 24       	eor	r1, r1
    332e:	ef 57       	subi	r30, 0x7F	; 127
    3330:	fa 4e       	sbci	r31, 0xEA	; 234
    3332:	1d 96       	adiw	r26, 0x0d	; 13
    3334:	fc 93       	st	X, r31
    3336:	ee 93       	st	-X, r30
    3338:	1c 97       	sbiw	r26, 0x0c	; 12
    333a:	80 81       	ld	r24, Z
    333c:	8f 5f       	subi	r24, 0xFF	; 255
    333e:	80 83       	st	Z, r24
    3340:	5a 96       	adiw	r26, 0x1a	; 26
    3342:	9c 91       	ld	r25, X
    3344:	e0 91 ef 15 	lds	r30, 0x15EF	; 0x8015ef <pxCurrentTCB>
    3348:	f0 91 f0 15 	lds	r31, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    334c:	82 8d       	ldd	r24, Z+26	; 0x1a
    334e:	89 17       	cp	r24, r25
    3350:	10 f4       	brcc	.+4      	; 0x3356 <xTaskGenericNotify+0x1d4>
    3352:	0e 94 d7 06 	call	0xdae	; 0xdae <vPortYield>
    3356:	0f 90       	pop	r0
    3358:	0f be       	out	0x3f, r0	; 63
    335a:	80 2f       	mov	r24, r16
    335c:	df 91       	pop	r29
    335e:	cf 91       	pop	r28
    3360:	0f 91       	pop	r16
    3362:	ff 90       	pop	r15
    3364:	ef 90       	pop	r14
    3366:	bf 90       	pop	r11
    3368:	af 90       	pop	r10
    336a:	9f 90       	pop	r9
    336c:	8f 90       	pop	r8
    336e:	08 95       	ret

00003370 <xTaskGenericNotifyFromISR>:
    3370:	8f 92       	push	r8
    3372:	9f 92       	push	r9
    3374:	af 92       	push	r10
    3376:	bf 92       	push	r11
    3378:	cf 92       	push	r12
    337a:	df 92       	push	r13
    337c:	ef 92       	push	r14
    337e:	ff 92       	push	r15
    3380:	0f 93       	push	r16
    3382:	cf 93       	push	r28
    3384:	df 93       	push	r29
    3386:	dc 01       	movw	r26, r24
    3388:	e1 14       	cp	r14, r1
    338a:	f1 04       	cpc	r15, r1
    338c:	89 f0       	breq	.+34     	; 0x33b0 <xTaskGenericNotifyFromISR+0x40>
    338e:	e6 2f       	mov	r30, r22
    3390:	f0 e0       	ldi	r31, 0x00	; 0
    3392:	ee 0f       	add	r30, r30
    3394:	ff 1f       	adc	r31, r31
    3396:	ee 0f       	add	r30, r30
    3398:	ff 1f       	adc	r31, r31
    339a:	e8 0f       	add	r30, r24
    339c:	f9 1f       	adc	r31, r25
    339e:	87 a4       	ldd	r8, Z+47	; 0x2f
    33a0:	90 a8       	ldd	r9, Z+48	; 0x30
    33a2:	a1 a8       	ldd	r10, Z+49	; 0x31
    33a4:	b2 a8       	ldd	r11, Z+50	; 0x32
    33a6:	f7 01       	movw	r30, r14
    33a8:	80 82       	st	Z, r8
    33aa:	91 82       	std	Z+1, r9	; 0x01
    33ac:	a2 82       	std	Z+2, r10	; 0x02
    33ae:	b3 82       	std	Z+3, r11	; 0x03
    33b0:	70 e0       	ldi	r23, 0x00	; 0
    33b2:	fd 01       	movw	r30, r26
    33b4:	e6 0f       	add	r30, r22
    33b6:	f7 1f       	adc	r31, r23
    33b8:	93 a9       	ldd	r25, Z+51	; 0x33
    33ba:	82 e0       	ldi	r24, 0x02	; 2
    33bc:	83 ab       	std	Z+51, r24	; 0x33
    33be:	02 30       	cpi	r16, 0x02	; 2
    33c0:	01 f1       	breq	.+64     	; 0x3402 <xTaskGenericNotifyFromISR+0x92>
    33c2:	18 f4       	brcc	.+6      	; 0x33ca <xTaskGenericNotifyFromISR+0x5a>
    33c4:	01 30       	cpi	r16, 0x01	; 1
    33c6:	31 f0       	breq	.+12     	; 0x33d4 <xTaskGenericNotifyFromISR+0x64>
    33c8:	4d c0       	rjmp	.+154    	; 0x3464 <xTaskGenericNotifyFromISR+0xf4>
    33ca:	03 30       	cpi	r16, 0x03	; 3
    33cc:	79 f1       	breq	.+94     	; 0x342c <xTaskGenericNotifyFromISR+0xbc>
    33ce:	04 30       	cpi	r16, 0x04	; 4
    33d0:	d1 f1       	breq	.+116    	; 0x3446 <xTaskGenericNotifyFromISR+0xd6>
    33d2:	48 c0       	rjmp	.+144    	; 0x3464 <xTaskGenericNotifyFromISR+0xf4>
    33d4:	66 0f       	add	r22, r22
    33d6:	77 1f       	adc	r23, r23
    33d8:	66 0f       	add	r22, r22
    33da:	77 1f       	adc	r23, r23
    33dc:	fd 01       	movw	r30, r26
    33de:	e6 0f       	add	r30, r22
    33e0:	f7 1f       	adc	r31, r23
    33e2:	87 a4       	ldd	r8, Z+47	; 0x2f
    33e4:	90 a8       	ldd	r9, Z+48	; 0x30
    33e6:	a1 a8       	ldd	r10, Z+49	; 0x31
    33e8:	b2 a8       	ldd	r11, Z+50	; 0x32
    33ea:	ba 01       	movw	r22, r20
    33ec:	a9 01       	movw	r20, r18
    33ee:	48 29       	or	r20, r8
    33f0:	59 29       	or	r21, r9
    33f2:	6a 29       	or	r22, r10
    33f4:	7b 29       	or	r23, r11
    33f6:	47 a7       	std	Z+47, r20	; 0x2f
    33f8:	50 ab       	std	Z+48, r21	; 0x30
    33fa:	61 ab       	std	Z+49, r22	; 0x31
    33fc:	72 ab       	std	Z+50, r23	; 0x32
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	34 c0       	rjmp	.+104    	; 0x346a <xTaskGenericNotifyFromISR+0xfa>
    3402:	66 0f       	add	r22, r22
    3404:	77 1f       	adc	r23, r23
    3406:	66 0f       	add	r22, r22
    3408:	77 1f       	adc	r23, r23
    340a:	fd 01       	movw	r30, r26
    340c:	e6 0f       	add	r30, r22
    340e:	f7 1f       	adc	r31, r23
    3410:	47 a5       	ldd	r20, Z+47	; 0x2f
    3412:	50 a9       	ldd	r21, Z+48	; 0x30
    3414:	61 a9       	ldd	r22, Z+49	; 0x31
    3416:	72 a9       	ldd	r23, Z+50	; 0x32
    3418:	4f 5f       	subi	r20, 0xFF	; 255
    341a:	5f 4f       	sbci	r21, 0xFF	; 255
    341c:	6f 4f       	sbci	r22, 0xFF	; 255
    341e:	7f 4f       	sbci	r23, 0xFF	; 255
    3420:	47 a7       	std	Z+47, r20	; 0x2f
    3422:	50 ab       	std	Z+48, r21	; 0x30
    3424:	61 ab       	std	Z+49, r22	; 0x31
    3426:	72 ab       	std	Z+50, r23	; 0x32
    3428:	81 e0       	ldi	r24, 0x01	; 1
    342a:	1f c0       	rjmp	.+62     	; 0x346a <xTaskGenericNotifyFromISR+0xfa>
    342c:	66 0f       	add	r22, r22
    342e:	77 1f       	adc	r23, r23
    3430:	66 0f       	add	r22, r22
    3432:	77 1f       	adc	r23, r23
    3434:	fd 01       	movw	r30, r26
    3436:	e6 0f       	add	r30, r22
    3438:	f7 1f       	adc	r31, r23
    343a:	27 a7       	std	Z+47, r18	; 0x2f
    343c:	30 ab       	std	Z+48, r19	; 0x30
    343e:	41 ab       	std	Z+49, r20	; 0x31
    3440:	52 ab       	std	Z+50, r21	; 0x32
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	12 c0       	rjmp	.+36     	; 0x346a <xTaskGenericNotifyFromISR+0xfa>
    3446:	92 30       	cpi	r25, 0x02	; 2
    3448:	79 f0       	breq	.+30     	; 0x3468 <xTaskGenericNotifyFromISR+0xf8>
    344a:	66 0f       	add	r22, r22
    344c:	77 1f       	adc	r23, r23
    344e:	66 0f       	add	r22, r22
    3450:	77 1f       	adc	r23, r23
    3452:	fd 01       	movw	r30, r26
    3454:	e6 0f       	add	r30, r22
    3456:	f7 1f       	adc	r31, r23
    3458:	27 a7       	std	Z+47, r18	; 0x2f
    345a:	30 ab       	std	Z+48, r19	; 0x30
    345c:	41 ab       	std	Z+49, r20	; 0x31
    345e:	52 ab       	std	Z+50, r21	; 0x32
    3460:	81 e0       	ldi	r24, 0x01	; 1
    3462:	03 c0       	rjmp	.+6      	; 0x346a <xTaskGenericNotifyFromISR+0xfa>
    3464:	81 e0       	ldi	r24, 0x01	; 1
    3466:	01 c0       	rjmp	.+2      	; 0x346a <xTaskGenericNotifyFromISR+0xfa>
    3468:	80 e0       	ldi	r24, 0x00	; 0
    346a:	91 30       	cpi	r25, 0x01	; 1
    346c:	09 f0       	breq	.+2      	; 0x3470 <xTaskGenericNotifyFromISR+0x100>
    346e:	96 c0       	rjmp	.+300    	; 0x359c <xTaskGenericNotifyFromISR+0x22c>
    3470:	90 91 30 15 	lds	r25, 0x1530	; 0x801530 <uxSchedulerSuspended>
    3474:	91 11       	cpse	r25, r1
    3476:	5f c0       	rjmp	.+190    	; 0x3536 <xTaskGenericNotifyFromISR+0x1c6>
    3478:	1c 96       	adiw	r26, 0x0c	; 12
    347a:	ed 91       	ld	r30, X+
    347c:	fc 91       	ld	r31, X
    347e:	1d 97       	sbiw	r26, 0x0d	; 13
    3480:	16 96       	adiw	r26, 0x06	; 6
    3482:	cd 91       	ld	r28, X+
    3484:	dc 91       	ld	r29, X
    3486:	17 97       	sbiw	r26, 0x07	; 7
    3488:	18 96       	adiw	r26, 0x08	; 8
    348a:	2d 91       	ld	r18, X+
    348c:	3c 91       	ld	r19, X
    348e:	19 97       	sbiw	r26, 0x09	; 9
    3490:	3f 83       	std	Y+7, r19	; 0x07
    3492:	2e 83       	std	Y+6, r18	; 0x06
    3494:	18 96       	adiw	r26, 0x08	; 8
    3496:	cd 91       	ld	r28, X+
    3498:	dc 91       	ld	r29, X
    349a:	19 97       	sbiw	r26, 0x09	; 9
    349c:	16 96       	adiw	r26, 0x06	; 6
    349e:	2d 91       	ld	r18, X+
    34a0:	3c 91       	ld	r19, X
    34a2:	17 97       	sbiw	r26, 0x07	; 7
    34a4:	3d 83       	std	Y+5, r19	; 0x05
    34a6:	2c 83       	std	Y+4, r18	; 0x04
    34a8:	41 81       	ldd	r20, Z+1	; 0x01
    34aa:	52 81       	ldd	r21, Z+2	; 0x02
    34ac:	9d 01       	movw	r18, r26
    34ae:	2e 5f       	subi	r18, 0xFE	; 254
    34b0:	3f 4f       	sbci	r19, 0xFF	; 255
    34b2:	42 17       	cp	r20, r18
    34b4:	53 07       	cpc	r21, r19
    34b6:	31 f4       	brne	.+12     	; 0x34c4 <xTaskGenericNotifyFromISR+0x154>
    34b8:	18 96       	adiw	r26, 0x08	; 8
    34ba:	4d 91       	ld	r20, X+
    34bc:	5c 91       	ld	r21, X
    34be:	19 97       	sbiw	r26, 0x09	; 9
    34c0:	52 83       	std	Z+2, r21	; 0x02
    34c2:	41 83       	std	Z+1, r20	; 0x01
    34c4:	1d 96       	adiw	r26, 0x0d	; 13
    34c6:	1c 92       	st	X, r1
    34c8:	1e 92       	st	-X, r1
    34ca:	1c 97       	sbiw	r26, 0x0c	; 12
    34cc:	90 81       	ld	r25, Z
    34ce:	91 50       	subi	r25, 0x01	; 1
    34d0:	90 83       	st	Z, r25
    34d2:	5a 96       	adiw	r26, 0x1a	; 26
    34d4:	ec 91       	ld	r30, X
    34d6:	5a 97       	sbiw	r26, 0x1a	; 26
    34d8:	90 91 3f 15 	lds	r25, 0x153F	; 0x80153f <uxTopReadyPriority>
    34dc:	9e 17       	cp	r25, r30
    34de:	10 f4       	brcc	.+4      	; 0x34e4 <xTaskGenericNotifyFromISR+0x174>
    34e0:	e0 93 3f 15 	sts	0x153F, r30	; 0x80153f <uxTopReadyPriority>
    34e4:	9b e0       	ldi	r25, 0x0B	; 11
    34e6:	9e 9f       	mul	r25, r30
    34e8:	f0 01       	movw	r30, r0
    34ea:	11 24       	eor	r1, r1
    34ec:	ef 57       	subi	r30, 0x7F	; 127
    34ee:	fa 4e       	sbci	r31, 0xEA	; 234
    34f0:	01 80       	ldd	r0, Z+1	; 0x01
    34f2:	f2 81       	ldd	r31, Z+2	; 0x02
    34f4:	e0 2d       	mov	r30, r0
    34f6:	17 96       	adiw	r26, 0x07	; 7
    34f8:	fc 93       	st	X, r31
    34fa:	ee 93       	st	-X, r30
    34fc:	16 97       	sbiw	r26, 0x06	; 6
    34fe:	46 81       	ldd	r20, Z+6	; 0x06
    3500:	57 81       	ldd	r21, Z+7	; 0x07
    3502:	19 96       	adiw	r26, 0x09	; 9
    3504:	5c 93       	st	X, r21
    3506:	4e 93       	st	-X, r20
    3508:	18 97       	sbiw	r26, 0x08	; 8
    350a:	c6 81       	ldd	r28, Z+6	; 0x06
    350c:	d7 81       	ldd	r29, Z+7	; 0x07
    350e:	3d 83       	std	Y+5, r19	; 0x05
    3510:	2c 83       	std	Y+4, r18	; 0x04
    3512:	37 83       	std	Z+7, r19	; 0x07
    3514:	26 83       	std	Z+6, r18	; 0x06
    3516:	5a 96       	adiw	r26, 0x1a	; 26
    3518:	ec 91       	ld	r30, X
    351a:	5a 97       	sbiw	r26, 0x1a	; 26
    351c:	9e 9f       	mul	r25, r30
    351e:	f0 01       	movw	r30, r0
    3520:	11 24       	eor	r1, r1
    3522:	ef 57       	subi	r30, 0x7F	; 127
    3524:	fa 4e       	sbci	r31, 0xEA	; 234
    3526:	1d 96       	adiw	r26, 0x0d	; 13
    3528:	fc 93       	st	X, r31
    352a:	ee 93       	st	-X, r30
    352c:	1c 97       	sbiw	r26, 0x0c	; 12
    352e:	90 81       	ld	r25, Z
    3530:	9f 5f       	subi	r25, 0xFF	; 255
    3532:	90 83       	st	Z, r25
    3534:	21 c0       	rjmp	.+66     	; 0x3578 <xTaskGenericNotifyFromISR+0x208>
    3536:	6c e5       	ldi	r22, 0x5C	; 92
    3538:	75 e1       	ldi	r23, 0x15	; 21
    353a:	fb 01       	movw	r30, r22
    353c:	c1 81       	ldd	r28, Z+1	; 0x01
    353e:	d2 81       	ldd	r29, Z+2	; 0x02
    3540:	53 96       	adiw	r26, 0x13	; 19
    3542:	dc 93       	st	X, r29
    3544:	ce 93       	st	-X, r28
    3546:	52 97       	sbiw	r26, 0x12	; 18
    3548:	2e 81       	ldd	r18, Y+6	; 0x06
    354a:	3f 81       	ldd	r19, Y+7	; 0x07
    354c:	55 96       	adiw	r26, 0x15	; 21
    354e:	3c 93       	st	X, r19
    3550:	2e 93       	st	-X, r18
    3552:	54 97       	sbiw	r26, 0x14	; 20
    3554:	4e 81       	ldd	r20, Y+6	; 0x06
    3556:	5f 81       	ldd	r21, Y+7	; 0x07
    3558:	9d 01       	movw	r18, r26
    355a:	22 5f       	subi	r18, 0xF2	; 242
    355c:	3f 4f       	sbci	r19, 0xFF	; 255
    355e:	fa 01       	movw	r30, r20
    3560:	35 83       	std	Z+5, r19	; 0x05
    3562:	24 83       	std	Z+4, r18	; 0x04
    3564:	3f 83       	std	Y+7, r19	; 0x07
    3566:	2e 83       	std	Y+6, r18	; 0x06
    3568:	59 96       	adiw	r26, 0x19	; 25
    356a:	7c 93       	st	X, r23
    356c:	6e 93       	st	-X, r22
    356e:	58 97       	sbiw	r26, 0x18	; 24
    3570:	fb 01       	movw	r30, r22
    3572:	90 81       	ld	r25, Z
    3574:	9f 5f       	subi	r25, 0xFF	; 255
    3576:	90 83       	st	Z, r25
    3578:	5a 96       	adiw	r26, 0x1a	; 26
    357a:	2c 91       	ld	r18, X
    357c:	e0 91 ef 15 	lds	r30, 0x15EF	; 0x8015ef <pxCurrentTCB>
    3580:	f0 91 f0 15 	lds	r31, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>
    3584:	92 8d       	ldd	r25, Z+26	; 0x1a
    3586:	92 17       	cp	r25, r18
    3588:	48 f4       	brcc	.+18     	; 0x359c <xTaskGenericNotifyFromISR+0x22c>
    358a:	c1 14       	cp	r12, r1
    358c:	d1 04       	cpc	r13, r1
    358e:	19 f0       	breq	.+6      	; 0x3596 <xTaskGenericNotifyFromISR+0x226>
    3590:	91 e0       	ldi	r25, 0x01	; 1
    3592:	f6 01       	movw	r30, r12
    3594:	90 83       	st	Z, r25
    3596:	91 e0       	ldi	r25, 0x01	; 1
    3598:	90 93 39 15 	sts	0x1539, r25	; 0x801539 <xYieldPending>
    359c:	df 91       	pop	r29
    359e:	cf 91       	pop	r28
    35a0:	0f 91       	pop	r16
    35a2:	ff 90       	pop	r15
    35a4:	ef 90       	pop	r14
    35a6:	df 90       	pop	r13
    35a8:	cf 90       	pop	r12
    35aa:	bf 90       	pop	r11
    35ac:	af 90       	pop	r10
    35ae:	9f 90       	pop	r9
    35b0:	8f 90       	pop	r8
    35b2:	08 95       	ret

000035b4 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    35b4:	00 97       	sbiw	r24, 0x00	; 0
    35b6:	21 f4       	brne	.+8      	; 0x35c0 <xTaskGenericNotifyStateClear+0xc>
    35b8:	80 91 ef 15 	lds	r24, 0x15EF	; 0x8015ef <pxCurrentTCB>
    35bc:	90 91 f0 15 	lds	r25, 0x15F0	; 0x8015f0 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    35c0:	0f b6       	in	r0, 0x3f	; 63
    35c2:	f8 94       	cli
    35c4:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    35c6:	70 e0       	ldi	r23, 0x00	; 0
    35c8:	fc 01       	movw	r30, r24
    35ca:	e6 0f       	add	r30, r22
    35cc:	f7 1f       	adc	r31, r23
    35ce:	23 a9       	ldd	r18, Z+51	; 0x33
    35d0:	22 30       	cpi	r18, 0x02	; 2
    35d2:	31 f4       	brne	.+12     	; 0x35e0 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    35d4:	fc 01       	movw	r30, r24
    35d6:	e6 0f       	add	r30, r22
    35d8:	f7 1f       	adc	r31, r23
    35da:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    35dc:	81 e0       	ldi	r24, 0x01	; 1
    35de:	01 c0       	rjmp	.+2      	; 0x35e2 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    35e0:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    35e2:	0f 90       	pop	r0
    35e4:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    35e6:	08 95       	ret

000035e8 <prvGetNextExpireTime>:
    35e8:	dc 01       	movw	r26, r24
    35ea:	e0 91 fb 15 	lds	r30, 0x15FB	; 0x8015fb <pxCurrentTimerList>
    35ee:	f0 91 fc 15 	lds	r31, 0x15FC	; 0x8015fc <pxCurrentTimerList+0x1>
    35f2:	80 81       	ld	r24, Z
    35f4:	91 e0       	ldi	r25, 0x01	; 1
    35f6:	81 11       	cpse	r24, r1
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	9c 93       	st	X, r25
    35fc:	91 11       	cpse	r25, r1
    35fe:	08 c0       	rjmp	.+16     	; 0x3610 <prvGetNextExpireTime+0x28>
    3600:	07 80       	ldd	r0, Z+7	; 0x07
    3602:	f0 85       	ldd	r31, Z+8	; 0x08
    3604:	e0 2d       	mov	r30, r0
    3606:	60 81       	ld	r22, Z
    3608:	71 81       	ldd	r23, Z+1	; 0x01
    360a:	82 81       	ldd	r24, Z+2	; 0x02
    360c:	93 81       	ldd	r25, Z+3	; 0x03
    360e:	08 95       	ret
    3610:	60 e0       	ldi	r22, 0x00	; 0
    3612:	70 e0       	ldi	r23, 0x00	; 0
    3614:	cb 01       	movw	r24, r22
    3616:	08 95       	ret

00003618 <prvInsertTimerInActiveList>:
    3618:	cf 92       	push	r12
    361a:	df 92       	push	r13
    361c:	ef 92       	push	r14
    361e:	ff 92       	push	r15
    3620:	0f 93       	push	r16
    3622:	1f 93       	push	r17
    3624:	fc 01       	movw	r30, r24
    3626:	42 83       	std	Z+2, r20	; 0x02
    3628:	53 83       	std	Z+3, r21	; 0x03
    362a:	64 83       	std	Z+4, r22	; 0x04
    362c:	75 83       	std	Z+5, r23	; 0x05
    362e:	93 87       	std	Z+11, r25	; 0x0b
    3630:	82 87       	std	Z+10, r24	; 0x0a
    3632:	04 17       	cp	r16, r20
    3634:	15 07       	cpc	r17, r21
    3636:	26 07       	cpc	r18, r22
    3638:	37 07       	cpc	r19, r23
    363a:	c0 f0       	brcs	.+48     	; 0x366c <prvInsertTimerInActiveList+0x54>
    363c:	0c 19       	sub	r16, r12
    363e:	1d 09       	sbc	r17, r13
    3640:	2e 09       	sbc	r18, r14
    3642:	3f 09       	sbc	r19, r15
    3644:	86 85       	ldd	r24, Z+14	; 0x0e
    3646:	97 85       	ldd	r25, Z+15	; 0x0f
    3648:	a0 89       	ldd	r26, Z+16	; 0x10
    364a:	b1 89       	ldd	r27, Z+17	; 0x11
    364c:	08 17       	cp	r16, r24
    364e:	19 07       	cpc	r17, r25
    3650:	2a 07       	cpc	r18, r26
    3652:	3b 07       	cpc	r19, r27
    3654:	00 f5       	brcc	.+64     	; 0x3696 <prvInsertTimerInActiveList+0x7e>
    3656:	bf 01       	movw	r22, r30
    3658:	6e 5f       	subi	r22, 0xFE	; 254
    365a:	7f 4f       	sbci	r23, 0xFF	; 255
    365c:	80 91 f9 15 	lds	r24, 0x15F9	; 0x8015f9 <pxOverflowTimerList>
    3660:	90 91 fa 15 	lds	r25, 0x15FA	; 0x8015fa <pxOverflowTimerList+0x1>
    3664:	0e 94 1e 06 	call	0xc3c	; 0xc3c <vListInsert>
    3668:	80 e0       	ldi	r24, 0x00	; 0
    366a:	18 c0       	rjmp	.+48     	; 0x369c <prvInsertTimerInActiveList+0x84>
    366c:	0c 15       	cp	r16, r12
    366e:	1d 05       	cpc	r17, r13
    3670:	2e 05       	cpc	r18, r14
    3672:	3f 05       	cpc	r19, r15
    3674:	28 f4       	brcc	.+10     	; 0x3680 <prvInsertTimerInActiveList+0x68>
    3676:	4c 15       	cp	r20, r12
    3678:	5d 05       	cpc	r21, r13
    367a:	6e 05       	cpc	r22, r14
    367c:	7f 05       	cpc	r23, r15
    367e:	68 f4       	brcc	.+26     	; 0x369a <prvInsertTimerInActiveList+0x82>
    3680:	bf 01       	movw	r22, r30
    3682:	6e 5f       	subi	r22, 0xFE	; 254
    3684:	7f 4f       	sbci	r23, 0xFF	; 255
    3686:	80 91 fb 15 	lds	r24, 0x15FB	; 0x8015fb <pxCurrentTimerList>
    368a:	90 91 fc 15 	lds	r25, 0x15FC	; 0x8015fc <pxCurrentTimerList+0x1>
    368e:	0e 94 1e 06 	call	0xc3c	; 0xc3c <vListInsert>
    3692:	80 e0       	ldi	r24, 0x00	; 0
    3694:	03 c0       	rjmp	.+6      	; 0x369c <prvInsertTimerInActiveList+0x84>
    3696:	81 e0       	ldi	r24, 0x01	; 1
    3698:	01 c0       	rjmp	.+2      	; 0x369c <prvInsertTimerInActiveList+0x84>
    369a:	81 e0       	ldi	r24, 0x01	; 1
    369c:	1f 91       	pop	r17
    369e:	0f 91       	pop	r16
    36a0:	ff 90       	pop	r15
    36a2:	ef 90       	pop	r14
    36a4:	df 90       	pop	r13
    36a6:	cf 90       	pop	r12
    36a8:	08 95       	ret

000036aa <prvCheckForValidListAndQueue>:
    36aa:	0f b6       	in	r0, 0x3f	; 63
    36ac:	f8 94       	cli
    36ae:	0f 92       	push	r0
    36b0:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <xTimerQueue>
    36b4:	90 91 f8 15 	lds	r25, 0x15F8	; 0x8015f8 <xTimerQueue+0x1>
    36b8:	89 2b       	or	r24, r25
    36ba:	e9 f4       	brne	.+58     	; 0x36f6 <prvCheckForValidListAndQueue+0x4c>
    36bc:	88 e0       	ldi	r24, 0x08	; 8
    36be:	96 e1       	ldi	r25, 0x16	; 22
    36c0:	0e 94 09 06 	call	0xc12	; 0xc12 <vListInitialise>
    36c4:	8d ef       	ldi	r24, 0xFD	; 253
    36c6:	95 e1       	ldi	r25, 0x15	; 21
    36c8:	0e 94 09 06 	call	0xc12	; 0xc12 <vListInitialise>
    36cc:	88 e0       	ldi	r24, 0x08	; 8
    36ce:	96 e1       	ldi	r25, 0x16	; 22
    36d0:	90 93 fc 15 	sts	0x15FC, r25	; 0x8015fc <pxCurrentTimerList+0x1>
    36d4:	80 93 fb 15 	sts	0x15FB, r24	; 0x8015fb <pxCurrentTimerList>
    36d8:	8d ef       	ldi	r24, 0xFD	; 253
    36da:	95 e1       	ldi	r25, 0x15	; 21
    36dc:	90 93 fa 15 	sts	0x15FA, r25	; 0x8015fa <pxOverflowTimerList+0x1>
    36e0:	80 93 f9 15 	sts	0x15F9, r24	; 0x8015f9 <pxOverflowTimerList>
    36e4:	40 e0       	ldi	r20, 0x00	; 0
    36e6:	67 e0       	ldi	r22, 0x07	; 7
    36e8:	8a e0       	ldi	r24, 0x0A	; 10
    36ea:	0e 94 cc 08 	call	0x1198	; 0x1198 <xQueueGenericCreate>
    36ee:	90 93 f8 15 	sts	0x15F8, r25	; 0x8015f8 <xTimerQueue+0x1>
    36f2:	80 93 f7 15 	sts	0x15F7, r24	; 0x8015f7 <xTimerQueue>
    36f6:	0f 90       	pop	r0
    36f8:	0f be       	out	0x3f, r0	; 63
    36fa:	08 95       	ret

000036fc <xTimerCreateTimerTask>:
    36fc:	ef 92       	push	r14
    36fe:	ff 92       	push	r15
    3700:	0f 93       	push	r16
    3702:	d3 df       	rcall	.-90     	; 0x36aa <prvCheckForValidListAndQueue>
    3704:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <xTimerQueue>
    3708:	90 91 f8 15 	lds	r25, 0x15F8	; 0x8015f8 <xTimerQueue+0x1>
    370c:	89 2b       	or	r24, r25
    370e:	91 f0       	breq	.+36     	; 0x3734 <xTimerCreateTimerTask+0x38>
    3710:	0f 2e       	mov	r0, r31
    3712:	f5 ef       	ldi	r31, 0xF5	; 245
    3714:	ef 2e       	mov	r14, r31
    3716:	f5 e1       	ldi	r31, 0x15	; 21
    3718:	ff 2e       	mov	r15, r31
    371a:	f0 2d       	mov	r31, r0
    371c:	03 e0       	ldi	r16, 0x03	; 3
    371e:	20 e0       	ldi	r18, 0x00	; 0
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	40 ec       	ldi	r20, 0xC0	; 192
    3724:	50 e0       	ldi	r21, 0x00	; 0
    3726:	6d e8       	ldi	r22, 0x8D	; 141
    3728:	73 e0       	ldi	r23, 0x03	; 3
    372a:	88 e5       	ldi	r24, 0x58	; 88
    372c:	91 e0       	ldi	r25, 0x01	; 1
    372e:	0e 94 7f 10 	call	0x20fe	; 0x20fe <xTaskCreate>
    3732:	01 c0       	rjmp	.+2      	; 0x3736 <xTimerCreateTimerTask+0x3a>
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	0f 91       	pop	r16
    3738:	ff 90       	pop	r15
    373a:	ef 90       	pop	r14
    373c:	08 95       	ret

0000373e <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    373e:	8f 92       	push	r8
    3740:	9f 92       	push	r9
    3742:	af 92       	push	r10
    3744:	bf 92       	push	r11
    3746:	cf 92       	push	r12
    3748:	df 92       	push	r13
    374a:	ef 92       	push	r14
    374c:	ff 92       	push	r15
    374e:	0f 93       	push	r16
    3750:	1f 93       	push	r17
    3752:	cf 93       	push	r28
    3754:	df 93       	push	r29
    3756:	cd b7       	in	r28, 0x3d	; 61
    3758:	de b7       	in	r29, 0x3e	; 62
    375a:	27 97       	sbiw	r28, 0x07	; 7
    375c:	0f b6       	in	r0, 0x3f	; 63
    375e:	f8 94       	cli
    3760:	de bf       	out	0x3e, r29	; 62
    3762:	0f be       	out	0x3f, r0	; 63
    3764:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3766:	e0 91 f7 15 	lds	r30, 0x15F7	; 0x8015f7 <xTimerQueue>
    376a:	f0 91 f8 15 	lds	r31, 0x15F8	; 0x8015f8 <xTimerQueue+0x1>
    376e:	30 97       	sbiw	r30, 0x00	; 0
    3770:	81 f1       	breq	.+96     	; 0x37d2 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    3772:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3774:	2a 83       	std	Y+2, r18	; 0x02
    3776:	3b 83       	std	Y+3, r19	; 0x03
    3778:	4c 83       	std	Y+4, r20	; 0x04
    377a:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    377c:	9f 83       	std	Y+7, r25	; 0x07
    377e:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3780:	66 30       	cpi	r22, 0x06	; 6
    3782:	f4 f4       	brge	.+60     	; 0x37c0 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3784:	c3 da       	rcall	.-2682   	; 0x2d0c <xTaskGetSchedulerState>
    3786:	82 30       	cpi	r24, 0x02	; 2
    3788:	69 f4       	brne	.+26     	; 0x37a4 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    378a:	00 e0       	ldi	r16, 0x00	; 0
    378c:	a7 01       	movw	r20, r14
    378e:	96 01       	movw	r18, r12
    3790:	be 01       	movw	r22, r28
    3792:	6f 5f       	subi	r22, 0xFF	; 255
    3794:	7f 4f       	sbci	r23, 0xFF	; 255
    3796:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <xTimerQueue>
    379a:	90 91 f8 15 	lds	r25, 0x15F8	; 0x8015f8 <xTimerQueue+0x1>
    379e:	0e 94 ef 08 	call	0x11de	; 0x11de <xQueueGenericSend>
    37a2:	18 c0       	rjmp	.+48     	; 0x37d4 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    37a4:	00 e0       	ldi	r16, 0x00	; 0
    37a6:	20 e0       	ldi	r18, 0x00	; 0
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	a9 01       	movw	r20, r18
    37ac:	be 01       	movw	r22, r28
    37ae:	6f 5f       	subi	r22, 0xFF	; 255
    37b0:	7f 4f       	sbci	r23, 0xFF	; 255
    37b2:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <xTimerQueue>
    37b6:	90 91 f8 15 	lds	r25, 0x15F8	; 0x8015f8 <xTimerQueue+0x1>
    37ba:	0e 94 ef 08 	call	0x11de	; 0x11de <xQueueGenericSend>
    37be:	0a c0       	rjmp	.+20     	; 0x37d4 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    37c0:	20 e0       	ldi	r18, 0x00	; 0
    37c2:	a8 01       	movw	r20, r16
    37c4:	be 01       	movw	r22, r28
    37c6:	6f 5f       	subi	r22, 0xFF	; 255
    37c8:	7f 4f       	sbci	r23, 0xFF	; 255
    37ca:	cf 01       	movw	r24, r30
    37cc:	0e 94 9f 09 	call	0x133e	; 0x133e <xQueueGenericSendFromISR>
    37d0:	01 c0       	rjmp	.+2      	; 0x37d4 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    37d2:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    37d4:	27 96       	adiw	r28, 0x07	; 7
    37d6:	0f b6       	in	r0, 0x3f	; 63
    37d8:	f8 94       	cli
    37da:	de bf       	out	0x3e, r29	; 62
    37dc:	0f be       	out	0x3f, r0	; 63
    37de:	cd bf       	out	0x3d, r28	; 61
    37e0:	df 91       	pop	r29
    37e2:	cf 91       	pop	r28
    37e4:	1f 91       	pop	r17
    37e6:	0f 91       	pop	r16
    37e8:	ff 90       	pop	r15
    37ea:	ef 90       	pop	r14
    37ec:	df 90       	pop	r13
    37ee:	cf 90       	pop	r12
    37f0:	bf 90       	pop	r11
    37f2:	af 90       	pop	r10
    37f4:	9f 90       	pop	r9
    37f6:	8f 90       	pop	r8
    37f8:	08 95       	ret

000037fa <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    37fa:	8f 92       	push	r8
    37fc:	9f 92       	push	r9
    37fe:	af 92       	push	r10
    3800:	bf 92       	push	r11
    3802:	cf 92       	push	r12
    3804:	df 92       	push	r13
    3806:	ef 92       	push	r14
    3808:	ff 92       	push	r15
    380a:	0f 93       	push	r16
    380c:	1f 93       	push	r17
    380e:	cf 93       	push	r28
    3810:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3812:	3b c0       	rjmp	.+118    	; 0x388a <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3814:	07 80       	ldd	r0, Z+7	; 0x07
    3816:	f0 85       	ldd	r31, Z+8	; 0x08
    3818:	e0 2d       	mov	r30, r0
    381a:	80 80       	ld	r8, Z
    381c:	91 80       	ldd	r9, Z+1	; 0x01
    381e:	a2 80       	ldd	r10, Z+2	; 0x02
    3820:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3822:	c0 85       	ldd	r28, Z+8	; 0x08
    3824:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3826:	8e 01       	movw	r16, r28
    3828:	0e 5f       	subi	r16, 0xFE	; 254
    382a:	1f 4f       	sbci	r17, 0xFF	; 255
    382c:	c8 01       	movw	r24, r16
    382e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3832:	ec 89       	ldd	r30, Y+20	; 0x14
    3834:	fd 89       	ldd	r31, Y+21	; 0x15
    3836:	ce 01       	movw	r24, r28
    3838:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    383a:	8e 89       	ldd	r24, Y+22	; 0x16
    383c:	82 ff       	sbrs	r24, 2
    383e:	25 c0       	rjmp	.+74     	; 0x388a <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3840:	8e 85       	ldd	r24, Y+14	; 0x0e
    3842:	9f 85       	ldd	r25, Y+15	; 0x0f
    3844:	a8 89       	ldd	r26, Y+16	; 0x10
    3846:	b9 89       	ldd	r27, Y+17	; 0x11
    3848:	88 0d       	add	r24, r8
    384a:	99 1d       	adc	r25, r9
    384c:	aa 1d       	adc	r26, r10
    384e:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    3850:	88 16       	cp	r8, r24
    3852:	99 06       	cpc	r9, r25
    3854:	aa 06       	cpc	r10, r26
    3856:	bb 06       	cpc	r11, r27
    3858:	70 f4       	brcc	.+28     	; 0x3876 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    385a:	8a 83       	std	Y+2, r24	; 0x02
    385c:	9b 83       	std	Y+3, r25	; 0x03
    385e:	ac 83       	std	Y+4, r26	; 0x04
    3860:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3862:	db 87       	std	Y+11, r29	; 0x0b
    3864:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3866:	b8 01       	movw	r22, r16
    3868:	80 91 fb 15 	lds	r24, 0x15FB	; 0x8015fb <pxCurrentTimerList>
    386c:	90 91 fc 15 	lds	r25, 0x15FC	; 0x8015fc <pxCurrentTimerList+0x1>
    3870:	0e 94 1e 06 	call	0xc3c	; 0xc3c <vListInsert>
    3874:	0a c0       	rjmp	.+20     	; 0x388a <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3876:	c1 2c       	mov	r12, r1
    3878:	d1 2c       	mov	r13, r1
    387a:	76 01       	movw	r14, r12
    387c:	00 e0       	ldi	r16, 0x00	; 0
    387e:	10 e0       	ldi	r17, 0x00	; 0
    3880:	a5 01       	movw	r20, r10
    3882:	94 01       	movw	r18, r8
    3884:	60 e0       	ldi	r22, 0x00	; 0
    3886:	ce 01       	movw	r24, r28
    3888:	5a df       	rcall	.-332    	; 0x373e <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    388a:	e0 91 fb 15 	lds	r30, 0x15FB	; 0x8015fb <pxCurrentTimerList>
    388e:	f0 91 fc 15 	lds	r31, 0x15FC	; 0x8015fc <pxCurrentTimerList+0x1>
    3892:	80 81       	ld	r24, Z
    3894:	81 11       	cpse	r24, r1
    3896:	be cf       	rjmp	.-132    	; 0x3814 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3898:	80 91 f9 15 	lds	r24, 0x15F9	; 0x8015f9 <pxOverflowTimerList>
    389c:	90 91 fa 15 	lds	r25, 0x15FA	; 0x8015fa <pxOverflowTimerList+0x1>
    38a0:	90 93 fc 15 	sts	0x15FC, r25	; 0x8015fc <pxCurrentTimerList+0x1>
    38a4:	80 93 fb 15 	sts	0x15FB, r24	; 0x8015fb <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    38a8:	f0 93 fa 15 	sts	0x15FA, r31	; 0x8015fa <pxOverflowTimerList+0x1>
    38ac:	e0 93 f9 15 	sts	0x15F9, r30	; 0x8015f9 <pxOverflowTimerList>
    }
    38b0:	df 91       	pop	r29
    38b2:	cf 91       	pop	r28
    38b4:	1f 91       	pop	r17
    38b6:	0f 91       	pop	r16
    38b8:	ff 90       	pop	r15
    38ba:	ef 90       	pop	r14
    38bc:	df 90       	pop	r13
    38be:	cf 90       	pop	r12
    38c0:	bf 90       	pop	r11
    38c2:	af 90       	pop	r10
    38c4:	9f 90       	pop	r9
    38c6:	8f 90       	pop	r8
    38c8:	08 95       	ret

000038ca <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    38ca:	cf 92       	push	r12
    38cc:	df 92       	push	r13
    38ce:	ef 92       	push	r14
    38d0:	ff 92       	push	r15
    38d2:	cf 93       	push	r28
    38d4:	df 93       	push	r29
    38d6:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    38d8:	0e 94 09 11 	call	0x2212	; 0x2212 <xTaskGetTickCount>
    38dc:	6b 01       	movw	r12, r22
    38de:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    38e0:	80 91 f1 15 	lds	r24, 0x15F1	; 0x8015f1 <xLastTime.2436>
    38e4:	90 91 f2 15 	lds	r25, 0x15F2	; 0x8015f2 <xLastTime.2436+0x1>
    38e8:	a0 91 f3 15 	lds	r26, 0x15F3	; 0x8015f3 <xLastTime.2436+0x2>
    38ec:	b0 91 f4 15 	lds	r27, 0x15F4	; 0x8015f4 <xLastTime.2436+0x3>
    38f0:	c8 16       	cp	r12, r24
    38f2:	d9 06       	cpc	r13, r25
    38f4:	ea 06       	cpc	r14, r26
    38f6:	fb 06       	cpc	r15, r27
    38f8:	20 f4       	brcc	.+8      	; 0x3902 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    38fa:	7f df       	rcall	.-258    	; 0x37fa <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    38fc:	81 e0       	ldi	r24, 0x01	; 1
    38fe:	88 83       	st	Y, r24
    3900:	01 c0       	rjmp	.+2      	; 0x3904 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3902:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3904:	c0 92 f1 15 	sts	0x15F1, r12	; 0x8015f1 <xLastTime.2436>
    3908:	d0 92 f2 15 	sts	0x15F2, r13	; 0x8015f2 <xLastTime.2436+0x1>
    390c:	e0 92 f3 15 	sts	0x15F3, r14	; 0x8015f3 <xLastTime.2436+0x2>
    3910:	f0 92 f4 15 	sts	0x15F4, r15	; 0x8015f4 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3914:	c7 01       	movw	r24, r14
    3916:	b6 01       	movw	r22, r12
    3918:	df 91       	pop	r29
    391a:	cf 91       	pop	r28
    391c:	ff 90       	pop	r15
    391e:	ef 90       	pop	r14
    3920:	df 90       	pop	r13
    3922:	cf 90       	pop	r12
    3924:	08 95       	ret

00003926 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3926:	4f 92       	push	r4
    3928:	5f 92       	push	r5
    392a:	6f 92       	push	r6
    392c:	7f 92       	push	r7
    392e:	8f 92       	push	r8
    3930:	9f 92       	push	r9
    3932:	af 92       	push	r10
    3934:	bf 92       	push	r11
    3936:	cf 92       	push	r12
    3938:	df 92       	push	r13
    393a:	ef 92       	push	r14
    393c:	ff 92       	push	r15
    393e:	0f 93       	push	r16
    3940:	1f 93       	push	r17
    3942:	cf 93       	push	r28
    3944:	df 93       	push	r29
    3946:	4b 01       	movw	r8, r22
    3948:	5c 01       	movw	r10, r24
    394a:	29 01       	movw	r4, r18
    394c:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    394e:	e0 91 fb 15 	lds	r30, 0x15FB	; 0x8015fb <pxCurrentTimerList>
    3952:	f0 91 fc 15 	lds	r31, 0x15FC	; 0x8015fc <pxCurrentTimerList+0x1>
    3956:	07 80       	ldd	r0, Z+7	; 0x07
    3958:	f0 85       	ldd	r31, Z+8	; 0x08
    395a:	e0 2d       	mov	r30, r0
    395c:	c0 85       	ldd	r28, Z+8	; 0x08
    395e:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3960:	ce 01       	movw	r24, r28
    3962:	02 96       	adiw	r24, 0x02	; 2
    3964:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3968:	8e 89       	ldd	r24, Y+22	; 0x16
    396a:	82 ff       	sbrs	r24, 2
    396c:	1b c0       	rjmp	.+54     	; 0x39a4 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    396e:	4e 85       	ldd	r20, Y+14	; 0x0e
    3970:	5f 85       	ldd	r21, Y+15	; 0x0f
    3972:	68 89       	ldd	r22, Y+16	; 0x10
    3974:	79 89       	ldd	r23, Y+17	; 0x11
    3976:	48 0d       	add	r20, r8
    3978:	59 1d       	adc	r21, r9
    397a:	6a 1d       	adc	r22, r10
    397c:	7b 1d       	adc	r23, r11
    397e:	75 01       	movw	r14, r10
    3980:	64 01       	movw	r12, r8
    3982:	93 01       	movw	r18, r6
    3984:	82 01       	movw	r16, r4
    3986:	ce 01       	movw	r24, r28
    3988:	47 de       	rcall	.-882    	; 0x3618 <prvInsertTimerInActiveList>
    398a:	88 23       	and	r24, r24
    398c:	69 f0       	breq	.+26     	; 0x39a8 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    398e:	c1 2c       	mov	r12, r1
    3990:	d1 2c       	mov	r13, r1
    3992:	76 01       	movw	r14, r12
    3994:	00 e0       	ldi	r16, 0x00	; 0
    3996:	10 e0       	ldi	r17, 0x00	; 0
    3998:	a5 01       	movw	r20, r10
    399a:	94 01       	movw	r18, r8
    399c:	60 e0       	ldi	r22, 0x00	; 0
    399e:	ce 01       	movw	r24, r28
    39a0:	ce de       	rcall	.-612    	; 0x373e <xTimerGenericCommand>
    39a2:	02 c0       	rjmp	.+4      	; 0x39a8 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    39a4:	8e 7f       	andi	r24, 0xFE	; 254
    39a6:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    39a8:	ec 89       	ldd	r30, Y+20	; 0x14
    39aa:	fd 89       	ldd	r31, Y+21	; 0x15
    39ac:	ce 01       	movw	r24, r28
    39ae:	19 95       	eicall
    }
    39b0:	df 91       	pop	r29
    39b2:	cf 91       	pop	r28
    39b4:	1f 91       	pop	r17
    39b6:	0f 91       	pop	r16
    39b8:	ff 90       	pop	r15
    39ba:	ef 90       	pop	r14
    39bc:	df 90       	pop	r13
    39be:	cf 90       	pop	r12
    39c0:	bf 90       	pop	r11
    39c2:	af 90       	pop	r10
    39c4:	9f 90       	pop	r9
    39c6:	8f 90       	pop	r8
    39c8:	7f 90       	pop	r7
    39ca:	6f 90       	pop	r6
    39cc:	5f 90       	pop	r5
    39ce:	4f 90       	pop	r4
    39d0:	08 95       	ret

000039d2 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    39d2:	8f 92       	push	r8
    39d4:	9f 92       	push	r9
    39d6:	af 92       	push	r10
    39d8:	bf 92       	push	r11
    39da:	cf 92       	push	r12
    39dc:	df 92       	push	r13
    39de:	ef 92       	push	r14
    39e0:	ff 92       	push	r15
    39e2:	1f 93       	push	r17
    39e4:	cf 93       	push	r28
    39e6:	df 93       	push	r29
    39e8:	1f 92       	push	r1
    39ea:	cd b7       	in	r28, 0x3d	; 61
    39ec:	de b7       	in	r29, 0x3e	; 62
    39ee:	6b 01       	movw	r12, r22
    39f0:	7c 01       	movw	r14, r24
    39f2:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    39f4:	0e 94 03 11 	call	0x2206	; 0x2206 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    39f8:	ce 01       	movw	r24, r28
    39fa:	01 96       	adiw	r24, 0x01	; 1
    39fc:	66 df       	rcall	.-308    	; 0x38ca <prvSampleTimeNow>
    39fe:	4b 01       	movw	r8, r22
    3a00:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3a02:	89 81       	ldd	r24, Y+1	; 0x01
    3a04:	81 11       	cpse	r24, r1
    3a06:	2d c0       	rjmp	.+90     	; 0x3a62 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3a08:	11 11       	cpse	r17, r1
    3a0a:	0d c0       	rjmp	.+26     	; 0x3a26 <prvProcessTimerOrBlockTask+0x54>
    3a0c:	8c 14       	cp	r8, r12
    3a0e:	9d 04       	cpc	r9, r13
    3a10:	ae 04       	cpc	r10, r14
    3a12:	bf 04       	cpc	r11, r15
    3a14:	40 f0       	brcs	.+16     	; 0x3a26 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3a16:	0e 94 43 12 	call	0x2486	; 0x2486 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3a1a:	a5 01       	movw	r20, r10
    3a1c:	94 01       	movw	r18, r8
    3a1e:	c7 01       	movw	r24, r14
    3a20:	b6 01       	movw	r22, r12
    3a22:	81 df       	rcall	.-254    	; 0x3926 <prvProcessExpiredTimer>
    3a24:	20 c0       	rjmp	.+64     	; 0x3a66 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3a26:	11 23       	and	r17, r17
    3a28:	41 f0       	breq	.+16     	; 0x3a3a <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3a2a:	e0 91 f9 15 	lds	r30, 0x15F9	; 0x8015f9 <pxOverflowTimerList>
    3a2e:	f0 91 fa 15 	lds	r31, 0x15FA	; 0x8015fa <pxOverflowTimerList+0x1>
    3a32:	80 81       	ld	r24, Z
    3a34:	11 e0       	ldi	r17, 0x01	; 1
    3a36:	81 11       	cpse	r24, r1
    3a38:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3a3a:	b7 01       	movw	r22, r14
    3a3c:	a6 01       	movw	r20, r12
    3a3e:	48 19       	sub	r20, r8
    3a40:	59 09       	sbc	r21, r9
    3a42:	6a 09       	sbc	r22, r10
    3a44:	7b 09       	sbc	r23, r11
    3a46:	21 2f       	mov	r18, r17
    3a48:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <xTimerQueue>
    3a4c:	90 91 f8 15 	lds	r25, 0x15F8	; 0x8015f8 <xTimerQueue+0x1>
    3a50:	0e 94 1a 0b 	call	0x1634	; 0x1634 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3a54:	0e 94 43 12 	call	0x2486	; 0x2486 <xTaskResumeAll>
    3a58:	81 11       	cpse	r24, r1
    3a5a:	05 c0       	rjmp	.+10     	; 0x3a66 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3a5c:	0e 94 d7 06 	call	0xdae	; 0xdae <vPortYield>
    3a60:	02 c0       	rjmp	.+4      	; 0x3a66 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3a62:	0e 94 43 12 	call	0x2486	; 0x2486 <xTaskResumeAll>
            }
        }
    }
    3a66:	0f 90       	pop	r0
    3a68:	df 91       	pop	r29
    3a6a:	cf 91       	pop	r28
    3a6c:	1f 91       	pop	r17
    3a6e:	ff 90       	pop	r15
    3a70:	ef 90       	pop	r14
    3a72:	df 90       	pop	r13
    3a74:	cf 90       	pop	r12
    3a76:	bf 90       	pop	r11
    3a78:	af 90       	pop	r10
    3a7a:	9f 90       	pop	r9
    3a7c:	8f 90       	pop	r8
    3a7e:	08 95       	ret

00003a80 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3a80:	af 92       	push	r10
    3a82:	bf 92       	push	r11
    3a84:	cf 92       	push	r12
    3a86:	df 92       	push	r13
    3a88:	ef 92       	push	r14
    3a8a:	ff 92       	push	r15
    3a8c:	0f 93       	push	r16
    3a8e:	1f 93       	push	r17
    3a90:	cf 93       	push	r28
    3a92:	df 93       	push	r29
    3a94:	cd b7       	in	r28, 0x3d	; 61
    3a96:	de b7       	in	r29, 0x3e	; 62
    3a98:	28 97       	sbiw	r28, 0x08	; 8
    3a9a:	0f b6       	in	r0, 0x3f	; 63
    3a9c:	f8 94       	cli
    3a9e:	de bf       	out	0x3e, r29	; 62
    3aa0:	0f be       	out	0x3f, r0	; 63
    3aa2:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3aa4:	82 c0       	rjmp	.+260    	; 0x3baa <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3aa6:	89 81       	ldd	r24, Y+1	; 0x01
    3aa8:	88 23       	and	r24, r24
    3aaa:	0c f4       	brge	.+2      	; 0x3aae <prvProcessReceivedCommands+0x2e>
    3aac:	7e c0       	rjmp	.+252    	; 0x3baa <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3aae:	ae 80       	ldd	r10, Y+6	; 0x06
    3ab0:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3ab2:	d5 01       	movw	r26, r10
    3ab4:	1c 96       	adiw	r26, 0x0c	; 12
    3ab6:	8d 91       	ld	r24, X+
    3ab8:	9c 91       	ld	r25, X
    3aba:	1d 97       	sbiw	r26, 0x0d	; 13
    3abc:	89 2b       	or	r24, r25
    3abe:	21 f0       	breq	.+8      	; 0x3ac8 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3ac0:	c5 01       	movw	r24, r10
    3ac2:	02 96       	adiw	r24, 0x02	; 2
    3ac4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3ac8:	ce 01       	movw	r24, r28
    3aca:	08 96       	adiw	r24, 0x08	; 8
    3acc:	fe de       	rcall	.-516    	; 0x38ca <prvSampleTimeNow>
    3ace:	8b 01       	movw	r16, r22
    3ad0:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3ad2:	e9 81       	ldd	r30, Y+1	; 0x01
    3ad4:	0e 2e       	mov	r0, r30
    3ad6:	00 0c       	add	r0, r0
    3ad8:	ff 0b       	sbc	r31, r31
    3ada:	ea 30       	cpi	r30, 0x0A	; 10
    3adc:	f1 05       	cpc	r31, r1
    3ade:	08 f0       	brcs	.+2      	; 0x3ae2 <prvProcessReceivedCommands+0x62>
    3ae0:	64 c0       	rjmp	.+200    	; 0x3baa <prvProcessReceivedCommands+0x12a>
    3ae2:	88 27       	eor	r24, r24
    3ae4:	ee 58       	subi	r30, 0x8E	; 142
    3ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae8:	8f 4f       	sbci	r24, 0xFF	; 255
    3aea:	0c 94 a3 33 	jmp	0x6746	; 0x6746 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3aee:	f5 01       	movw	r30, r10
    3af0:	86 89       	ldd	r24, Z+22	; 0x16
    3af2:	81 60       	ori	r24, 0x01	; 1
    3af4:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3af6:	ca 80       	ldd	r12, Y+2	; 0x02
    3af8:	db 80       	ldd	r13, Y+3	; 0x03
    3afa:	ec 80       	ldd	r14, Y+4	; 0x04
    3afc:	fd 80       	ldd	r15, Y+5	; 0x05
    3afe:	46 85       	ldd	r20, Z+14	; 0x0e
    3b00:	57 85       	ldd	r21, Z+15	; 0x0f
    3b02:	60 89       	ldd	r22, Z+16	; 0x10
    3b04:	71 89       	ldd	r23, Z+17	; 0x11
    3b06:	4c 0d       	add	r20, r12
    3b08:	5d 1d       	adc	r21, r13
    3b0a:	6e 1d       	adc	r22, r14
    3b0c:	7f 1d       	adc	r23, r15
    3b0e:	c5 01       	movw	r24, r10
    3b10:	83 dd       	rcall	.-1274   	; 0x3618 <prvInsertTimerInActiveList>
    3b12:	88 23       	and	r24, r24
    3b14:	09 f4       	brne	.+2      	; 0x3b18 <prvProcessReceivedCommands+0x98>
    3b16:	49 c0       	rjmp	.+146    	; 0x3baa <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3b18:	d5 01       	movw	r26, r10
    3b1a:	54 96       	adiw	r26, 0x14	; 20
    3b1c:	ed 91       	ld	r30, X+
    3b1e:	fc 91       	ld	r31, X
    3b20:	55 97       	sbiw	r26, 0x15	; 21
    3b22:	c5 01       	movw	r24, r10
    3b24:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3b26:	f5 01       	movw	r30, r10
    3b28:	86 89       	ldd	r24, Z+22	; 0x16
    3b2a:	82 ff       	sbrs	r24, 2
    3b2c:	3e c0       	rjmp	.+124    	; 0x3baa <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3b2e:	4a 81       	ldd	r20, Y+2	; 0x02
    3b30:	5b 81       	ldd	r21, Y+3	; 0x03
    3b32:	6c 81       	ldd	r22, Y+4	; 0x04
    3b34:	7d 81       	ldd	r23, Y+5	; 0x05
    3b36:	86 85       	ldd	r24, Z+14	; 0x0e
    3b38:	97 85       	ldd	r25, Z+15	; 0x0f
    3b3a:	a0 89       	ldd	r26, Z+16	; 0x10
    3b3c:	b1 89       	ldd	r27, Z+17	; 0x11
    3b3e:	9a 01       	movw	r18, r20
    3b40:	ab 01       	movw	r20, r22
    3b42:	28 0f       	add	r18, r24
    3b44:	39 1f       	adc	r19, r25
    3b46:	4a 1f       	adc	r20, r26
    3b48:	5b 1f       	adc	r21, r27
    3b4a:	c1 2c       	mov	r12, r1
    3b4c:	d1 2c       	mov	r13, r1
    3b4e:	76 01       	movw	r14, r12
    3b50:	00 e0       	ldi	r16, 0x00	; 0
    3b52:	10 e0       	ldi	r17, 0x00	; 0
    3b54:	60 e0       	ldi	r22, 0x00	; 0
    3b56:	c5 01       	movw	r24, r10
    3b58:	f2 dd       	rcall	.-1052   	; 0x373e <xTimerGenericCommand>
    3b5a:	27 c0       	rjmp	.+78     	; 0x3baa <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3b5c:	d5 01       	movw	r26, r10
    3b5e:	56 96       	adiw	r26, 0x16	; 22
    3b60:	8c 91       	ld	r24, X
    3b62:	56 97       	sbiw	r26, 0x16	; 22
    3b64:	8e 7f       	andi	r24, 0xFE	; 254
    3b66:	56 96       	adiw	r26, 0x16	; 22
    3b68:	8c 93       	st	X, r24
                        break;
    3b6a:	1f c0       	rjmp	.+62     	; 0x3baa <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3b6c:	f5 01       	movw	r30, r10
    3b6e:	86 89       	ldd	r24, Z+22	; 0x16
    3b70:	81 60       	ori	r24, 0x01	; 1
    3b72:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3b74:	4a 81       	ldd	r20, Y+2	; 0x02
    3b76:	5b 81       	ldd	r21, Y+3	; 0x03
    3b78:	6c 81       	ldd	r22, Y+4	; 0x04
    3b7a:	7d 81       	ldd	r23, Y+5	; 0x05
    3b7c:	46 87       	std	Z+14, r20	; 0x0e
    3b7e:	57 87       	std	Z+15, r21	; 0x0f
    3b80:	60 8b       	std	Z+16, r22	; 0x10
    3b82:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3b84:	40 0f       	add	r20, r16
    3b86:	51 1f       	adc	r21, r17
    3b88:	62 1f       	adc	r22, r18
    3b8a:	73 1f       	adc	r23, r19
    3b8c:	68 01       	movw	r12, r16
    3b8e:	79 01       	movw	r14, r18
    3b90:	c5 01       	movw	r24, r10
    3b92:	42 dd       	rcall	.-1404   	; 0x3618 <prvInsertTimerInActiveList>
                        break;
    3b94:	0a c0       	rjmp	.+20     	; 0x3baa <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3b96:	f5 01       	movw	r30, r10
    3b98:	86 89       	ldd	r24, Z+22	; 0x16
    3b9a:	81 fd       	sbrc	r24, 1
    3b9c:	04 c0       	rjmp	.+8      	; 0x3ba6 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3b9e:	c5 01       	movw	r24, r10
    3ba0:	0e 94 cc 05 	call	0xb98	; 0xb98 <vPortFree>
    3ba4:	02 c0       	rjmp	.+4      	; 0x3baa <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3ba6:	8e 7f       	andi	r24, 0xFE	; 254
    3ba8:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3baa:	20 e0       	ldi	r18, 0x00	; 0
    3bac:	30 e0       	ldi	r19, 0x00	; 0
    3bae:	a9 01       	movw	r20, r18
    3bb0:	be 01       	movw	r22, r28
    3bb2:	6f 5f       	subi	r22, 0xFF	; 255
    3bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    3bb6:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <xTimerQueue>
    3bba:	90 91 f8 15 	lds	r25, 0x15F8	; 0x8015f8 <xTimerQueue+0x1>
    3bbe:	0e 94 da 09 	call	0x13b4	; 0x13b4 <xQueueReceive>
    3bc2:	81 11       	cpse	r24, r1
    3bc4:	70 cf       	rjmp	.-288    	; 0x3aa6 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3bc6:	28 96       	adiw	r28, 0x08	; 8
    3bc8:	0f b6       	in	r0, 0x3f	; 63
    3bca:	f8 94       	cli
    3bcc:	de bf       	out	0x3e, r29	; 62
    3bce:	0f be       	out	0x3f, r0	; 63
    3bd0:	cd bf       	out	0x3d, r28	; 61
    3bd2:	df 91       	pop	r29
    3bd4:	cf 91       	pop	r28
    3bd6:	1f 91       	pop	r17
    3bd8:	0f 91       	pop	r16
    3bda:	ff 90       	pop	r15
    3bdc:	ef 90       	pop	r14
    3bde:	df 90       	pop	r13
    3be0:	cf 90       	pop	r12
    3be2:	bf 90       	pop	r11
    3be4:	af 90       	pop	r10
    3be6:	08 95       	ret

00003be8 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3be8:	08 95       	ret

00003bea <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3bea:	84 b1       	in	r24, 0x04	; 4
    3bec:	80 68       	ori	r24, 0x80	; 128
    3bee:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3bf0:	85 b1       	in	r24, 0x05	; 5
    3bf2:	80 68       	ori	r24, 0x80	; 128
    3bf4:	85 b9       	out	0x05, r24	; 5
    3bf6:	08 95       	ret

00003bf8 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3bf8:	83 b1       	in	r24, 0x03	; 3
    3bfa:	80 68       	ori	r24, 0x80	; 128
    3bfc:	83 b9       	out	0x03, r24	; 3
    3bfe:	08 95       	ret

00003c00 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3c00:	f4 df       	rcall	.-24     	; 0x3bea <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3c02:	2f ef       	ldi	r18, 0xFF	; 255
    3c04:	80 e7       	ldi	r24, 0x70	; 112
    3c06:	92 e0       	ldi	r25, 0x02	; 2
    3c08:	21 50       	subi	r18, 0x01	; 1
    3c0a:	80 40       	sbci	r24, 0x00	; 0
    3c0c:	90 40       	sbci	r25, 0x00	; 0
    3c0e:	e1 f7       	brne	.-8      	; 0x3c08 <vApplicationMallocFailedHook+0x8>
    3c10:	00 c0       	rjmp	.+0      	; 0x3c12 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3c12:	00 00       	nop
    3c14:	f1 df       	rcall	.-30     	; 0x3bf8 <prvBlinkMainLed>
    3c16:	f5 cf       	rjmp	.-22     	; 0x3c02 <vApplicationMallocFailedHook+0x2>

00003c18 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3c18:	e8 df       	rcall	.-48     	; 0x3bea <prvSetMainLedOn>
    3c1a:	2f ef       	ldi	r18, 0xFF	; 255
    3c1c:	87 ea       	ldi	r24, 0xA7	; 167
    3c1e:	91 e6       	ldi	r25, 0x61	; 97
    3c20:	21 50       	subi	r18, 0x01	; 1
    3c22:	80 40       	sbci	r24, 0x00	; 0
    3c24:	90 40       	sbci	r25, 0x00	; 0
    3c26:	e1 f7       	brne	.-8      	; 0x3c20 <vApplicationStackOverflowHook+0x8>
    3c28:	00 c0       	rjmp	.+0      	; 0x3c2a <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3c2a:	00 00       	nop
    3c2c:	e5 df       	rcall	.-54     	; 0x3bf8 <prvBlinkMainLed>
    3c2e:	f5 cf       	rjmp	.-22     	; 0x3c1a <vApplicationStackOverflowHook+0x2>

00003c30 <hih8120_handler_initialise>:
const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)


void hih820_handler_task( void *pvParameters );

void hih8120_handler_initialise(UBaseType_t hih8120_task_priority){
    3c30:	ef 92       	push	r14
    3c32:	ff 92       	push	r15
    3c34:	0f 93       	push	r16
    3c36:	08 2f       	mov	r16, r24
	if ( HIH8120_OK == hih8120_initialise() ){
    3c38:	a2 d2       	rcall	.+1348   	; 0x417e <hih8120_initialise>
    3c3a:	81 11       	cpse	r24, r1
    3c3c:	0c c0       	rjmp	.+24     	; 0x3c56 <hih8120_handler_initialise+0x26>
			printf("%d\n",HIH8120_OK);
    3c3e:	1f 92       	push	r1
    3c40:	1f 92       	push	r1
    3c42:	85 e9       	ldi	r24, 0x95	; 149
    3c44:	93 e0       	ldi	r25, 0x03	; 3
    3c46:	9f 93       	push	r25
    3c48:	8f 93       	push	r24
    3c4a:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
    3c4e:	0f 90       	pop	r0
    3c50:	0f 90       	pop	r0
    3c52:	0f 90       	pop	r0
    3c54:	0f 90       	pop	r0
	}
	xTaskCreate(
    3c56:	e1 2c       	mov	r14, r1
    3c58:	f1 2c       	mov	r15, r1
    3c5a:	20 e0       	ldi	r18, 0x00	; 0
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	40 ec       	ldi	r20, 0xC0	; 192
    3c60:	50 e0       	ldi	r21, 0x00	; 0
    3c62:	69 e9       	ldi	r22, 0x99	; 153
    3c64:	73 e0       	ldi	r23, 0x03	; 3
    3c66:	8b e5       	ldi	r24, 0x5B	; 91
    3c68:	9e e1       	ldi	r25, 0x1E	; 30
    3c6a:	0e 94 7f 10 	call	0x20fe	; 0x20fe <xTaskCreate>
	,  "Hih820Hand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  hih8120_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3c6e:	0f 91       	pop	r16
    3c70:	ff 90       	pop	r15
    3c72:	ef 90       	pop	r14
    3c74:	08 95       	ret

00003c76 <hih820_getHumidityInUint16>:
		hih8120_run();
	}
}

uint16_t hih820_getHumidityInUint16(){
	return humidityIn16/10;
    3c76:	20 91 15 16 	lds	r18, 0x1615	; 0x801615 <humidityIn16>
    3c7a:	30 91 16 16 	lds	r19, 0x1616	; 0x801616 <humidityIn16+0x1>
    3c7e:	ad ec       	ldi	r26, 0xCD	; 205
    3c80:	bc ec       	ldi	r27, 0xCC	; 204
    3c82:	0e 94 ab 33 	call	0x6756	; 0x6756 <__umulhisi3>
}
    3c86:	96 95       	lsr	r25
    3c88:	87 95       	ror	r24
    3c8a:	96 95       	lsr	r25
    3c8c:	87 95       	ror	r24
    3c8e:	96 95       	lsr	r25
    3c90:	87 95       	ror	r24
    3c92:	08 95       	ret

00003c94 <hih820_getTemperatureInUint16>:

int16_t hih820_getTemperatureInUint16(){
	return temperatureIn16/10;
    3c94:	80 91 13 16 	lds	r24, 0x1613	; 0x801613 <temperatureIn16>
    3c98:	90 91 14 16 	lds	r25, 0x1614	; 0x801614 <temperatureIn16+0x1>
    3c9c:	6a e0       	ldi	r22, 0x0A	; 10
    3c9e:	70 e0       	ldi	r23, 0x00	; 0
    3ca0:	0e 94 6e 33 	call	0x66dc	; 0x66dc <__divmodhi4>
    3ca4:	cb 01       	movw	r24, r22
}
    3ca6:	08 95       	ret

00003ca8 <hih820_aFunctionToSetBits>:
void hih820_aFunctionToSetBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Set bit 0 and bit 4 in xEventGroup. */
  uxBits = xEventGroupSetBits(
    3ca8:	40 e1       	ldi	r20, 0x10	; 16
    3caa:	50 e0       	ldi	r21, 0x00	; 0
    3cac:	60 e0       	ldi	r22, 0x00	; 0
    3cae:	70 e0       	ldi	r23, 0x00	; 0
    3cb0:	0c 94 22 04 	jmp	0x844	; 0x844 <xEventGroupSetBits>
    3cb4:	08 95       	ret

00003cb6 <hih820_handler_task>:
	,  NULL );
}

inline void hih8120_init(void *pvParameters){
	(void)pvParameters;
	xLastWakeTime = xTaskGetTickCount();
    3cb6:	0e 94 09 11 	call	0x2212	; 0x2212 <xTaskGetTickCount>
    3cba:	60 93 eb 17 	sts	0x17EB, r22	; 0x8017eb <xLastWakeTime>
    3cbe:	70 93 ec 17 	sts	0x17EC, r23	; 0x8017ec <xLastWakeTime+0x1>
    3cc2:	80 93 ed 17 	sts	0x17ED, r24	; 0x8017ed <xLastWakeTime+0x2>
    3cc6:	90 93 ee 17 	sts	0x17EE, r25	; 0x8017ee <xLastWakeTime+0x3>
}

inline void hih8120_run(void){
	xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3cca:	48 ea       	ldi	r20, 0xA8	; 168
    3ccc:	58 e4       	ldi	r21, 0x48	; 72
    3cce:	60 e0       	ldi	r22, 0x00	; 0
    3cd0:	70 e0       	ldi	r23, 0x00	; 0
    3cd2:	8b ee       	ldi	r24, 0xEB	; 235
    3cd4:	97 e1       	ldi	r25, 0x17	; 23
    3cd6:	0e 94 1f 13 	call	0x263e	; 0x263e <xTaskDelayUntil>
	if (HIH8120_OK == hih8120_wakeup())
    3cda:	69 d2       	rcall	.+1234   	; 0x41ae <hih8120_wakeup>
    3cdc:	81 11       	cpse	r24, r1
    3cde:	f5 cf       	rjmp	.-22     	; 0x3cca <hih820_handler_task+0x14>
	{
		vTaskDelay(50);
    3ce0:	62 e3       	ldi	r22, 0x32	; 50
    3ce2:	70 e0       	ldi	r23, 0x00	; 0
    3ce4:	80 e0       	ldi	r24, 0x00	; 0
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    3ce8:	0e 94 84 13 	call	0x2708	; 0x2708 <vTaskDelay>
		if (HIH8120_OK == hih8120_measure())
    3cec:	75 d2       	rcall	.+1258   	; 0x41d8 <hih8120_measure>
    3cee:	81 11       	cpse	r24, r1
    3cf0:	ec cf       	rjmp	.-40     	; 0x3cca <hih820_handler_task+0x14>
		{
			vTaskDelay(1);
    3cf2:	61 e0       	ldi	r22, 0x01	; 1
    3cf4:	70 e0       	ldi	r23, 0x00	; 0
    3cf6:	80 e0       	ldi	r24, 0x00	; 0
    3cf8:	90 e0       	ldi	r25, 0x00	; 0
    3cfa:	0e 94 84 13 	call	0x2708	; 0x2708 <vTaskDelay>
			humidityIn16 = hih8120_getHumidityPercent_x10();
    3cfe:	92 d2       	rcall	.+1316   	; 0x4224 <hih8120_getHumidityPercent_x10>
    3d00:	90 93 16 16 	sts	0x1616, r25	; 0x801616 <humidityIn16+0x1>
    3d04:	80 93 15 16 	sts	0x1615, r24	; 0x801615 <humidityIn16>
			temperatureIn16 = hih8120_getTemperature_x10();
    3d08:	b3 d2       	rcall	.+1382   	; 0x4270 <hih8120_getTemperature_x10>
    3d0a:	90 93 14 16 	sts	0x1614, r25	; 0x801614 <temperatureIn16+0x1>
    3d0e:	80 93 13 16 	sts	0x1613, r24	; 0x801613 <temperatureIn16>
			hih820_aFunctionToSetBits(Application_getEventGroup());
    3d12:	0e 94 89 01 	call	0x312	; 0x312 <Application_getEventGroup>
    3d16:	c8 df       	rcall	.-112    	; 0x3ca8 <hih820_aFunctionToSetBits>
    3d18:	d8 cf       	rjmp	.-80     	; 0x3cca <hih820_handler_task+0x14>

00003d1a <WindowController_handler_initialise>:
int8_t percent = 0;
SemaphoreHandle_t semaphore_mutex = NULL;

void WindowController_handler_task( void *pvParameters );

void WindowController_handler_initialise(UBaseType_t WindowController_task_priority){
    3d1a:	ef 92       	push	r14
    3d1c:	ff 92       	push	r15
    3d1e:	0f 93       	push	r16
	
	xTaskCreate(
    3d20:	e1 2c       	mov	r14, r1
    3d22:	f1 2c       	mov	r15, r1
    3d24:	08 2f       	mov	r16, r24
    3d26:	20 e0       	ldi	r18, 0x00	; 0
    3d28:	30 e0       	ldi	r19, 0x00	; 0
    3d2a:	40 ec       	ldi	r20, 0xC0	; 192
    3d2c:	50 e0       	ldi	r21, 0x00	; 0
    3d2e:	64 ea       	ldi	r22, 0xA4	; 164
    3d30:	73 e0       	ldi	r23, 0x03	; 3
    3d32:	85 ed       	ldi	r24, 0xD5	; 213
    3d34:	9e e1       	ldi	r25, 0x1E	; 30
    3d36:	0e 94 7f 10 	call	0x20fe	; 0x20fe <xTaskCreate>
	,  "WindowControllerHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  WindowController_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3d3a:	0f 91       	pop	r16
    3d3c:	ff 90       	pop	r15
    3d3e:	ef 90       	pop	r14
    3d40:	08 95       	ret

00003d42 <WindowController_init>:

void WindowController_init(){
    3d42:	0f 93       	push	r16
	semaphore_mutex = get_mutex();
    3d44:	0e 94 b6 02 	call	0x56c	; 0x56c <get_mutex>
    3d48:	90 93 18 16 	sts	0x1618, r25	; 0x801618 <semaphore_mutex+0x1>
    3d4c:	80 93 17 16 	sts	0x1617, r24	; 0x801617 <semaphore_mutex>
	xSemaphoreGive(semaphore_mutex);
    3d50:	00 e0       	ldi	r16, 0x00	; 0
    3d52:	20 e0       	ldi	r18, 0x00	; 0
    3d54:	30 e0       	ldi	r19, 0x00	; 0
    3d56:	a9 01       	movw	r20, r18
    3d58:	60 e0       	ldi	r22, 0x00	; 0
    3d5a:	70 e0       	ldi	r23, 0x00	; 0
    3d5c:	0e 94 ef 08 	call	0x11de	; 0x11de <xQueueGenericSend>
}
    3d60:	0f 91       	pop	r16
    3d62:	08 95       	ret

00003d64 <WindowController_run>:

void WindowController_run(){
    3d64:	0f 93       	push	r16
	if(xSemaphoreTake(semaphore_mutex, portMAX_DELAY)){
    3d66:	4f ef       	ldi	r20, 0xFF	; 255
    3d68:	5f ef       	ldi	r21, 0xFF	; 255
    3d6a:	ba 01       	movw	r22, r20
    3d6c:	80 91 17 16 	lds	r24, 0x1617	; 0x801617 <semaphore_mutex>
    3d70:	90 91 18 16 	lds	r25, 0x1618	; 0x801618 <semaphore_mutex+0x1>
    3d74:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <xQueueSemaphoreTake>
    3d78:	88 23       	and	r24, r24
    3d7a:	a9 f0       	breq	.+42     	; 0x3da6 <WindowController_run+0x42>
		rc_servo_setPosition(0, configuration_get_windows_data());
    3d7c:	0e 94 81 02 	call	0x502	; 0x502 <configuration_get_windows_data>
    3d80:	68 2f       	mov	r22, r24
    3d82:	80 e0       	ldi	r24, 0x00	; 0
    3d84:	b0 d7       	rcall	.+3936   	; 0x4ce6 <rc_servo_setPosition>
		percent = configuration_get_windows_data();
    3d86:	0e 94 81 02 	call	0x502	; 0x502 <configuration_get_windows_data>
    3d8a:	80 93 19 16 	sts	0x1619, r24	; 0x801619 <percent>
		xSemaphoreGive(semaphore_mutex);
    3d8e:	00 e0       	ldi	r16, 0x00	; 0
    3d90:	20 e0       	ldi	r18, 0x00	; 0
    3d92:	30 e0       	ldi	r19, 0x00	; 0
    3d94:	a9 01       	movw	r20, r18
    3d96:	60 e0       	ldi	r22, 0x00	; 0
    3d98:	70 e0       	ldi	r23, 0x00	; 0
    3d9a:	80 91 17 16 	lds	r24, 0x1617	; 0x801617 <semaphore_mutex>
    3d9e:	90 91 18 16 	lds	r25, 0x1618	; 0x801618 <semaphore_mutex+0x1>
    3da2:	0e 94 ef 08 	call	0x11de	; 0x11de <xQueueGenericSend>
	}
}
    3da6:	0f 91       	pop	r16
    3da8:	08 95       	ret

00003daa <WindowController_handler_task>:

void WindowController_handler_task(void *pvParameters)
{
	printf("startWindowController \n");
    3daa:	89 eb       	ldi	r24, 0xB9	; 185
    3dac:	93 e0       	ldi	r25, 0x03	; 3
    3dae:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <puts>
	(void)pvParameters;
	WindowController_init();
    3db2:	c7 df       	rcall	.-114    	; 0x3d42 <WindowController_init>
	for(;;)
	{
		WindowController_run();	
    3db4:	d7 df       	rcall	.-82     	; 0x3d64 <WindowController_run>
    3db6:	fe cf       	rjmp	.-4      	; 0x3db4 <WindowController_handler_task+0xa>

00003db8 <main>:
    3db8:	80 e0       	ldi	r24, 0x00	; 0
/*-----------------------------------------------------------*/
int main(void)
{
	// Must be done as the very first thing!!
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3dba:	0e 94 5f 2a 	call	0x54be	; 0x54be <stdio_initialise>
	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(6); // Priority 5 for internal task
    3dbe:	86 e0       	ldi	r24, 0x06	; 6
    3dc0:	0e 94 66 2b 	call	0x56cc	; 0x56cc <status_leds_initialise>
	//Initialize Application
	Application_handler_initialise(5);
    3dc4:	85 e0       	ldi	r24, 0x05	; 5
    3dc6:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Application_handler_initialise>
	//initialize CO2Sensor
	mh_z19_initialise(ser_USART3);
    3dca:	83 e0       	ldi	r24, 0x03	; 3
    3dcc:	22 d7       	rcall	.+3652   	; 0x4c12 <mh_z19_initialise>
	//create CO2 task
	CO2Sensor_handler_initialise(4);
    3dce:	84 e0       	ldi	r24, 0x04	; 4
    3dd0:	0e 94 0e 02 	call	0x41c	; 0x41c <CO2Sensor_handler_initialise>
	//Create humidity temperature task and start with priority 3
	hih8120_handler_initialise(3);
    3dd4:	83 e0       	ldi	r24, 0x03	; 3
	//initialize rc_servo
	rc_servo_initialise();
    3dd6:	2c df       	rcall	.-424    	; 0x3c30 <hih8120_handler_initialise>
    3dd8:	9e d7       	rcall	.+3900   	; 0x4d16 <rc_servo_initialise>
	// Initialise the LoRaWAN driver with down-link buffer
	downLinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    3dda:	41 e0       	ldi	r20, 0x01	; 1
    3ddc:	60 e0       	ldi	r22, 0x00	; 0
    3dde:	70 e0       	ldi	r23, 0x00	; 0
    3de0:	8c e2       	ldi	r24, 0x2C	; 44
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <xStreamBufferGenericCreate>
    3de8:	90 93 f0 17 	sts	0x17F0, r25	; 0x8017f0 <downLinkMessageBufferHandle+0x1>
    3dec:	80 93 ef 17 	sts	0x17EF, r24	; 0x8017ef <downLinkMessageBufferHandle>
	lora_driver_initialise(1, downLinkMessageBufferHandle);
    3df0:	bc 01       	movw	r22, r24
    3df2:	81 e0       	ldi	r24, 0x01	; 1
	// Create LoRaWAN task and start it up with priority 2
	UpLinkHandler_lora_handler_initialise(2);
    3df4:	67 d3       	rcall	.+1742   	; 0x44c4 <lora_driver_initialise>
    3df6:	82 e0       	ldi	r24, 0x02	; 2
    3df8:	81 d1       	rcall	.+770    	; 0x40fc <UpLinkHandler_lora_handler_initialise>
	//Create LoRaWAN task and start with priority 1
	DownLinkHandler_lora_handler_initialise(1,downLinkMessageBufferHandle);
    3dfa:	60 91 ef 17 	lds	r22, 0x17EF	; 0x8017ef <downLinkMessageBufferHandle>
    3dfe:	70 91 f0 17 	lds	r23, 0x17F0	; 0x8017f0 <downLinkMessageBufferHandle+0x1>
    3e02:	81 e0       	ldi	r24, 0x01	; 1
    3e04:	0e 94 19 03 	call	0x632	; 0x632 <DownLinkHandler_lora_handler_initialise>
	//Create windowscontroller
	WindowController_handler_initialise(4);
    3e08:	84 e0       	ldi	r24, 0x04	; 4
    3e0a:	87 df       	rcall	.-242    	; 0x3d1a <WindowController_handler_initialise>
	
	printf("Program Started!!\n");
    3e0c:	80 ed       	ldi	r24, 0xD0	; 208
    3e0e:	93 e0       	ldi	r25, 0x03	; 3
    3e10:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <puts>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    3e14:	0e 94 cb 10 	call	0x2196	; 0x2196 <vTaskStartScheduler>
    3e18:	ff cf       	rjmp	.-2      	; 0x3e18 <main+0x60>

00003e1a <SensorDataPackageHandler_SetCO2>:
int16_t tempIn16 = 0.0;
uint16_t co2_ppmIn16 = 0.0;
static lora_driver_payload_t _uplink_payload;

void SensorDataPackageHandler_SetCO2(uint16_t co2){
	co2_ppmIn16 = co2;
    3e1a:	90 93 31 16 	sts	0x1631, r25	; 0x801631 <co2_ppmIn16+0x1>
    3e1e:	80 93 30 16 	sts	0x1630, r24	; 0x801630 <co2_ppmIn16>
    3e22:	08 95       	ret

00003e24 <SensorDataPackageHandler_SetHumidity>:
}

void SensorDataPackageHandler_SetHumidity(uint16_t humidity){
	humIn16 = humidity;
    3e24:	90 93 35 16 	sts	0x1635, r25	; 0x801635 <humIn16+0x1>
    3e28:	80 93 34 16 	sts	0x1634, r24	; 0x801634 <humIn16>
    3e2c:	08 95       	ret

00003e2e <SensorDataPackageHandler_SetTemperature>:
}

void SensorDataPackageHandler_SetTemperature(int16_t temperature){
	tempIn16 = temperature;
    3e2e:	90 93 33 16 	sts	0x1633, r25	; 0x801633 <tempIn16+0x1>
    3e32:	80 93 32 16 	sts	0x1632, r24	; 0x801632 <tempIn16>
    3e36:	08 95       	ret

00003e38 <SensorDataPackageHandler_getLoRaPayload>:
}

lora_driver_payload_t SensorDataPackageHandler_getLoRaPayload(){
    3e38:	cf 93       	push	r28
    3e3a:	df 93       	push	r29
    3e3c:	ec 01       	movw	r28, r24
	printf("STARTEDSensorDataPackageHandler");
    3e3e:	82 ee       	ldi	r24, 0xE2	; 226
    3e40:	93 e0       	ldi	r25, 0x03	; 3
    3e42:	9f 93       	push	r25
    3e44:	8f 93       	push	r24
    3e46:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
	printf("and this is the changed hum %u\n", humIn16);
    3e4a:	80 91 35 16 	lds	r24, 0x1635	; 0x801635 <humIn16+0x1>
    3e4e:	8f 93       	push	r24
    3e50:	80 91 34 16 	lds	r24, 0x1634	; 0x801634 <humIn16>
    3e54:	8f 93       	push	r24
    3e56:	82 e0       	ldi	r24, 0x02	; 2
    3e58:	94 e0       	ldi	r25, 0x04	; 4
    3e5a:	9f 93       	push	r25
    3e5c:	8f 93       	push	r24
    3e5e:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
	printf("and also the changed temp %u\n", tempIn16);
    3e62:	80 91 33 16 	lds	r24, 0x1633	; 0x801633 <tempIn16+0x1>
    3e66:	8f 93       	push	r24
    3e68:	80 91 32 16 	lds	r24, 0x1632	; 0x801632 <tempIn16>
    3e6c:	8f 93       	push	r24
    3e6e:	82 e2       	ldi	r24, 0x22	; 34
    3e70:	94 e0       	ldi	r25, 0x04	; 4
    3e72:	9f 93       	push	r25
    3e74:	8f 93       	push	r24
    3e76:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
	printf("and also the changed CO2 %u\n", co2_ppmIn16);
    3e7a:	80 91 31 16 	lds	r24, 0x1631	; 0x801631 <co2_ppmIn16+0x1>
    3e7e:	8f 93       	push	r24
    3e80:	80 91 30 16 	lds	r24, 0x1630	; 0x801630 <co2_ppmIn16>
    3e84:	8f 93       	push	r24
    3e86:	80 e4       	ldi	r24, 0x40	; 64
    3e88:	94 e0       	ldi	r25, 0x04	; 4
    3e8a:	9f 93       	push	r25
    3e8c:	8f 93       	push	r24
    3e8e:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
	
	_uplink_payload.len = 6;
    3e92:	ea e1       	ldi	r30, 0x1A	; 26
    3e94:	f6 e1       	ldi	r31, 0x16	; 22
    3e96:	86 e0       	ldi	r24, 0x06	; 6
    3e98:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.portNo = 2;
    3e9a:	82 e0       	ldi	r24, 0x02	; 2
    3e9c:	80 83       	st	Z, r24
	_uplink_payload.bytes[0] = humIn16 >> 8;
    3e9e:	80 91 34 16 	lds	r24, 0x1634	; 0x801634 <humIn16>
    3ea2:	90 91 35 16 	lds	r25, 0x1635	; 0x801635 <humIn16+0x1>
    3ea6:	92 83       	std	Z+2, r25	; 0x02
	_uplink_payload.bytes[1] = humIn16 & 0xFF;
    3ea8:	83 83       	std	Z+3, r24	; 0x03
	_uplink_payload.bytes[2] = tempIn16 >> 8;
    3eaa:	80 91 32 16 	lds	r24, 0x1632	; 0x801632 <tempIn16>
    3eae:	90 91 33 16 	lds	r25, 0x1633	; 0x801633 <tempIn16+0x1>
    3eb2:	94 83       	std	Z+4, r25	; 0x04
	_uplink_payload.bytes[3] = tempIn16 & 0xFF;
    3eb4:	85 83       	std	Z+5, r24	; 0x05
	_uplink_payload.bytes[4] = co2_ppmIn16 >> 8;
    3eb6:	80 91 30 16 	lds	r24, 0x1630	; 0x801630 <co2_ppmIn16>
    3eba:	90 91 31 16 	lds	r25, 0x1631	; 0x801631 <co2_ppmIn16+0x1>
    3ebe:	96 83       	std	Z+6, r25	; 0x06
	_uplink_payload.bytes[5] = co2_ppmIn16 & 0xFF;
    3ec0:	87 83       	std	Z+7, r24	; 0x07
	return _uplink_payload;
    3ec2:	86 e1       	ldi	r24, 0x16	; 22
    3ec4:	de 01       	movw	r26, r28
    3ec6:	01 90       	ld	r0, Z+
    3ec8:	0d 92       	st	X+, r0
    3eca:	8a 95       	dec	r24
    3ecc:	e1 f7       	brne	.-8      	; 0x3ec6 <SensorDataPackageHandler_getLoRaPayload+0x8e>
    3ece:	8d b7       	in	r24, 0x3d	; 61
    3ed0:	9e b7       	in	r25, 0x3e	; 62
    3ed2:	0e 96       	adiw	r24, 0x0e	; 14
    3ed4:	0f b6       	in	r0, 0x3f	; 63
    3ed6:	f8 94       	cli
    3ed8:	9e bf       	out	0x3e, r25	; 62
    3eda:	0f be       	out	0x3f, r0	; 63
    3edc:	8d bf       	out	0x3d, r24	; 61
    3ede:	ce 01       	movw	r24, r28
    3ee0:	df 91       	pop	r29
    3ee2:	cf 91       	pop	r28
    3ee4:	08 95       	ret

00003ee6 <_lora_setup>:
	,  UpLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    3ee6:	cf 93       	push	r28
    3ee8:	df 93       	push	r29
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3eea:	81 e0       	ldi	r24, 0x01	; 1
    3eec:	0e 94 b4 2b 	call	0x5768	; 0x5768 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3ef0:	37 d3       	rcall	.+1646   	; 0x4560 <lora_driver_rn2483FactoryReset>
    3ef2:	b3 d5       	rcall	.+2918   	; 0x4a5a <lora_driver_mapReturnCodeToText>
    3ef4:	9f 93       	push	r25
    3ef6:	8f 93       	push	r24
    3ef8:	8d e5       	ldi	r24, 0x5D	; 93
    3efa:	94 e0       	ldi	r25, 0x04	; 4
    3efc:	9f 93       	push	r25
    3efe:	8f 93       	push	r24
    3f00:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3f04:	ab d4       	rcall	.+2390   	; 0x485c <lora_driver_configureToEu868>
    3f06:	a9 d5       	rcall	.+2898   	; 0x4a5a <lora_driver_mapReturnCodeToText>
    3f08:	9f 93       	push	r25
    3f0a:	8f 93       	push	r24
    3f0c:	80 e7       	ldi	r24, 0x70	; 112
    3f0e:	94 e0       	ldi	r25, 0x04	; 4
    3f10:	9f 93       	push	r25
    3f12:	8f 93       	push	r24
    3f14:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
    3f18:	8c e4       	ldi	r24, 0x4C	; 76

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3f1a:	96 e1       	ldi	r25, 0x16	; 22
    3f1c:	33 d3       	rcall	.+1638   	; 0x4584 <lora_driver_getRn2483Hweui>
    3f1e:	9d d5       	rcall	.+2874   	; 0x4a5a <lora_driver_mapReturnCodeToText>
    3f20:	cc e4       	ldi	r28, 0x4C	; 76
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3f22:	d6 e1       	ldi	r29, 0x16	; 22
    3f24:	df 93       	push	r29
    3f26:	cf 93       	push	r28
    3f28:	9f 93       	push	r25
    3f2a:	8f 93       	push	r24
    3f2c:	89 e8       	ldi	r24, 0x89	; 137
    3f2e:	94 e0       	ldi	r25, 0x04	; 4
    3f30:	9f 93       	push	r25
    3f32:	8f 93       	push	r24
    3f34:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
    3f38:	ce 01       	movw	r24, r28

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3f3a:	40 d3       	rcall	.+1664   	; 0x45bc <lora_driver_setDeviceIdentifier>
    3f3c:	8e d5       	rcall	.+2844   	; 0x4a5a <lora_driver_mapReturnCodeToText>
    3f3e:	9f 93       	push	r25
    3f40:	8f 93       	push	r24
    3f42:	df 93       	push	r29
    3f44:	cf 93       	push	r28
    3f46:	8d e9       	ldi	r24, 0x9D	; 157
    3f48:	94 e0       	ldi	r25, 0x04	; 4
    3f4a:	9f 93       	push	r25
    3f4c:	8f 93       	push	r24
    3f4e:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
    3f52:	ae 01       	movw	r20, r28

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3f54:	62 eb       	ldi	r22, 0xB2	; 178
    3f56:	74 e0       	ldi	r23, 0x04	; 4
    3f58:	83 ed       	ldi	r24, 0xD3	; 211
    3f5a:	94 e0       	ldi	r25, 0x04	; 4
    3f5c:	5d d5       	rcall	.+2746   	; 0x4a18 <lora_driver_setOtaaIdentity>
    3f5e:	7d d5       	rcall	.+2810   	; 0x4a5a <lora_driver_mapReturnCodeToText>
    3f60:	9f 93       	push	r25
    3f62:	8f 93       	push	r24
    3f64:	df 93       	push	r29
    3f66:	cf 93       	push	r28
    3f68:	82 eb       	ldi	r24, 0xB2	; 178
    3f6a:	94 e0       	ldi	r25, 0x04	; 4
    3f6c:	9f 93       	push	r25
    3f6e:	8f 93       	push	r24
    3f70:	83 ed       	ldi	r24, 0xD3	; 211
    3f72:	94 e0       	ldi	r25, 0x04	; 4
    3f74:	9f 93       	push	r25
    3f76:	8f 93       	push	r24
    3f78:	84 ee       	ldi	r24, 0xE4	; 228
    3f7a:	94 e0       	ldi	r25, 0x04	; 4
    3f7c:	9f 93       	push	r25
    3f7e:	8f 93       	push	r24
    3f80:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
    3f84:	4e d3       	rcall	.+1692   	; 0x4622 <lora_driver_saveMac>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3f86:	69 d5       	rcall	.+2770   	; 0x4a5a <lora_driver_mapReturnCodeToText>
    3f88:	9f 93       	push	r25
    3f8a:	8f 93       	push	r24
    3f8c:	8a e1       	ldi	r24, 0x1A	; 26
    3f8e:	95 e0       	ldi	r25, 0x05	; 5
    3f90:	9f 93       	push	r25
    3f92:	8f 93       	push	r24
    3f94:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
    3f98:	8d b7       	in	r24, 0x3d	; 61

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3f9a:	9e b7       	in	r25, 0x3e	; 62
    3f9c:	82 96       	adiw	r24, 0x22	; 34
    3f9e:	0f b6       	in	r0, 0x3f	; 63
    3fa0:	f8 94       	cli
    3fa2:	9e bf       	out	0x3e, r25	; 62
    3fa4:	0f be       	out	0x3f, r0	; 63
    3fa6:	8d bf       	out	0x3d, r24	; 61
    3fa8:	81 e0       	ldi	r24, 0x01	; 1
    3faa:	35 d4       	rcall	.+2154   	; 0x4816 <lora_driver_setAdaptiveDataRate>
    3fac:	56 d5       	rcall	.+2732   	; 0x4a5a <lora_driver_mapReturnCodeToText>
    3fae:	9f 93       	push	r25
    3fb0:	8f 93       	push	r24
    3fb2:	89 e2       	ldi	r24, 0x29	; 41
    3fb4:	95 e0       	ldi	r25, 0x05	; 5
    3fb6:	9f 93       	push	r25
    3fb8:	8f 93       	push	r24
    3fba:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
    3fbe:	84 ef       	ldi	r24, 0xF4	; 244

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3fc0:	91 e0       	ldi	r25, 0x01	; 1
    3fc2:	34 d4       	rcall	.+2152   	; 0x482c <lora_driver_setReceiveDelay>
    3fc4:	4a d5       	rcall	.+2708   	; 0x4a5a <lora_driver_mapReturnCodeToText>
    3fc6:	9f 93       	push	r25
    3fc8:	8f 93       	push	r24
    3fca:	81 e0       	ldi	r24, 0x01	; 1
    3fcc:	8f 93       	push	r24
    3fce:	84 ef       	ldi	r24, 0xF4	; 244
    3fd0:	8f 93       	push	r24
    3fd2:	8a e4       	ldi	r24, 0x4A	; 74
    3fd4:	95 e0       	ldi	r25, 0x05	; 5
    3fd6:	9f 93       	push	r25
    3fd8:	8f 93       	push	r24
    3fda:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
    3fde:	8d b7       	in	r24, 0x3d	; 61
    3fe0:	9e b7       	in	r25, 0x3e	; 62
    3fe2:	0a 96       	adiw	r24, 0x0a	; 10
    3fe4:	0f b6       	in	r0, 0x3f	; 63
    3fe6:	f8 94       	cli
    3fe8:	9e bf       	out	0x3e, r25	; 62
    3fea:	0f be       	out	0x3f, r0	; 63
    3fec:	8d bf       	out	0x3d, r24	; 61
    3fee:	ca e0       	ldi	r28, 0x0A	; 10

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3ff2:	1d d3       	rcall	.+1594   	; 0x462e <lora_driver_join>
    3ff4:	d8 2f       	mov	r29, r24
    3ff6:	31 d5       	rcall	.+2658   	; 0x4a5a <lora_driver_mapReturnCodeToText>
    3ff8:	9f 93       	push	r25
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3ffa:	8f 93       	push	r24
    3ffc:	1f 92       	push	r1
    3ffe:	cf 93       	push	r28
    4000:	8a e6       	ldi	r24, 0x6A	; 106
    4002:	95 e0       	ldi	r25, 0x05	; 5
    4004:	9f 93       	push	r25
    4006:	8f 93       	push	r24
    4008:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
    400c:	0f 90       	pop	r0
    400e:	0f 90       	pop	r0
    4010:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    4012:	0f 90       	pop	r0
    4014:	0f 90       	pop	r0
    4016:	0f 90       	pop	r0
    4018:	d8 30       	cpi	r29, 0x08	; 8
    401a:	59 f0       	breq	.+22     	; 0x4032 <_lora_setup+0x14c>
    401c:	80 e0       	ldi	r24, 0x00	; 0
    401e:	0e 94 18 2c 	call	0x5830	; 0x5830 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    4022:	66 e3       	ldi	r22, 0x36	; 54
    4024:	71 e0       	ldi	r23, 0x01	; 1
    4026:	80 e0       	ldi	r24, 0x00	; 0
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	0e 94 84 13 	call	0x2708	; 0x2708 <vTaskDelay>
    402e:	c1 50       	subi	r28, 0x01	; 1
    4030:	f9 f6       	brne	.-66     	; 0x3ff0 <_lora_setup+0x10a>
    4032:	d8 30       	cpi	r29, 0x08	; 8
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    4034:	21 f4       	brne	.+8      	; 0x403e <_lora_setup+0x158>
    4036:	81 e0       	ldi	r24, 0x01	; 1

	if (rc == LORA_ACCEPTED)
    4038:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    403c:	09 c0       	rjmp	.+18     	; 0x4050 <_lora_setup+0x16a>
    403e:	81 e0       	ldi	r24, 0x01	; 1
    4040:	0e 94 09 2c 	call	0x5812	; 0x5812 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    4044:	80 e0       	ldi	r24, 0x00	; 0
    4046:	0e 94 d7 2b 	call	0x57ae	; 0x57ae <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    404a:	0e 94 d7 06 	call	0xdae	; 0xdae <vPortYield>
    404e:	fd cf       	rjmp	.-6      	; 0x404a <_lora_setup+0x164>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    4050:	df 91       	pop	r29
    4052:	cf 91       	pop	r28
    4054:	08 95       	ret

00004056 <UpLinkHandler_lora_handler_task>:
		}
	}
}
    4056:	cf 93       	push	r28
    4058:	df 93       	push	r29
    405a:	cd b7       	in	r28, 0x3d	; 61

/*-----------------------------------------------------------*/
void UpLinkHandler_lora_handler_task( void *pvParameters )
{
    405c:	de b7       	in	r29, 0x3e	; 62
    405e:	6a 97       	sbiw	r28, 0x1a	; 26
    4060:	0f b6       	in	r0, 0x3f	; 63
    4062:	f8 94       	cli
    4064:	de bf       	out	0x3e, r29	; 62
    4066:	0f be       	out	0x3f, r0	; 63
    4068:	cd bf       	out	0x3d, r28	; 61
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    406a:	81 e0       	ldi	r24, 0x01	; 1
    406c:	6b d2       	rcall	.+1238   	; 0x4544 <lora_driver_resetRn2483>
	vTaskDelay(2);
    406e:	62 e0       	ldi	r22, 0x02	; 2
    4070:	70 e0       	ldi	r23, 0x00	; 0
    4072:	80 e0       	ldi	r24, 0x00	; 0
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	0e 94 84 13 	call	0x2708	; 0x2708 <vTaskDelay>
	lora_driver_resetRn2483(0);
    407a:	80 e0       	ldi	r24, 0x00	; 0
    407c:	63 d2       	rcall	.+1222   	; 0x4544 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    407e:	66 e9       	ldi	r22, 0x96	; 150
    4080:	70 e0       	ldi	r23, 0x00	; 0
    4082:	80 e0       	ldi	r24, 0x00	; 0
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	0e 94 84 13 	call	0x2708	; 0x2708 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    408a:	15 d2       	rcall	.+1066   	; 0x44b6 <lora_driver_flushBuffers>

	_lora_setup();
    408c:	2c df       	rcall	.-424    	; 0x3ee6 <_lora_setup>
    408e:	0e 94 09 11 	call	0x2212	; 0x2212 <xTaskGetTickCount>


	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    4092:	69 83       	std	Y+1, r22	; 0x01
    4094:	7a 83       	std	Y+2, r23	; 0x02
    4096:	8b 83       	std	Y+3, r24	; 0x03
    4098:	9c 83       	std	Y+4, r25	; 0x04
    409a:	48 ea       	ldi	r20, 0xA8	; 168
	
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    409c:	58 e4       	ldi	r21, 0x48	; 72
    409e:	60 e0       	ldi	r22, 0x00	; 0
    40a0:	70 e0       	ldi	r23, 0x00	; 0
    40a2:	ce 01       	movw	r24, r28
    40a4:	01 96       	adiw	r24, 0x01	; 1
    40a6:	0e 94 1f 13 	call	0x263e	; 0x263e <xTaskDelayUntil>
    40aa:	8a e8       	ldi	r24, 0x8A	; 138
		printf("startLoraTask");
    40ac:	95 e0       	ldi	r25, 0x05	; 5
    40ae:	9f 93       	push	r25
    40b0:	8f 93       	push	r24
    40b2:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
		_uplink_payload = SensorDataPackageHandler_getLoRaPayload();
    40b6:	ce 01       	movw	r24, r28
    40b8:	05 96       	adiw	r24, 0x05	; 5
    40ba:	be de       	rcall	.-644    	; 0x3e38 <SensorDataPackageHandler_getLoRaPayload>
    40bc:	86 e1       	ldi	r24, 0x16	; 22
    40be:	fe 01       	movw	r30, r28
    40c0:	35 96       	adiw	r30, 0x05	; 5
    40c2:	a6 e3       	ldi	r26, 0x36	; 54
    40c4:	b6 e1       	ldi	r27, 0x16	; 22
    40c6:	01 90       	ld	r0, Z+
    40c8:	0d 92       	st	X+, r0
    40ca:	8a 95       	dec	r24
    40cc:	e1 f7       	brne	.-8      	; 0x40c6 <UpLinkHandler_lora_handler_task+0x70>
    40ce:	83 e0       	ldi	r24, 0x03	; 3
		status_leds_shortPuls(led_ST4);  // OPTIONAL
    40d0:	0e 94 2a 2c 	call	0x5854	; 0x5854 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    40d4:	66 e3       	ldi	r22, 0x36	; 54
    40d6:	76 e1       	ldi	r23, 0x16	; 22
    40d8:	80 e0       	ldi	r24, 0x00	; 0
    40da:	d2 d2       	rcall	.+1444   	; 0x4680 <lora_driver_sendUploadMessage>
    40dc:	be d4       	rcall	.+2428   	; 0x4a5a <lora_driver_mapReturnCodeToText>
    40de:	9f 93       	push	r25
    40e0:	8f 93       	push	r24
    40e2:	88 e9       	ldi	r24, 0x98	; 152
    40e4:	95 e0       	ldi	r25, 0x05	; 5
    40e6:	9f 93       	push	r25
    40e8:	8f 93       	push	r24
    40ea:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
    40ee:	0f 90       	pop	r0
    40f0:	0f 90       	pop	r0
    40f2:	0f 90       	pop	r0
    40f4:	0f 90       	pop	r0
    40f6:	0f 90       	pop	r0
    40f8:	0f 90       	pop	r0
    40fa:	cf cf       	rjmp	.-98     	; 0x409a <UpLinkHandler_lora_handler_task+0x44>

000040fc <UpLinkHandler_lora_handler_initialise>:
    40fc:	ef 92       	push	r14
    40fe:	ff 92       	push	r15

static lora_driver_payload_t _uplink_payload;


void UpLinkHandler_lora_handler_initialise(UBaseType_t UpLinkHandler_lora_handler_task_priority)
{
    4100:	0f 93       	push	r16
	xTaskCreate(
    4102:	e1 2c       	mov	r14, r1
    4104:	f1 2c       	mov	r15, r1
    4106:	08 2f       	mov	r16, r24
    4108:	20 e0       	ldi	r18, 0x00	; 0
    410a:	30 e0       	ldi	r19, 0x00	; 0
    410c:	48 e8       	ldi	r20, 0x88	; 136
    410e:	51 e0       	ldi	r21, 0x01	; 1
    4110:	6d ea       	ldi	r22, 0xAD	; 173
    4112:	75 e0       	ldi	r23, 0x05	; 5
    4114:	8b e2       	ldi	r24, 0x2B	; 43
    4116:	90 e2       	ldi	r25, 0x20	; 32
    4118:	0e 94 7f 10 	call	0x20fe	; 0x20fe <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  UpLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    411c:	0f 91       	pop	r16
    411e:	ff 90       	pop	r15
    4120:	ef 90       	pop	r14
    4122:	08 95       	ret

00004124 <_hihTwiCallback>:
    4124:	65 30       	cpi	r22, 0x05	; 5
    4126:	f1 f4       	brne	.+60     	; 0x4164 <_hihTwiCallback+0x40>
    4128:	fa 01       	movw	r30, r20
    412a:	80 81       	ld	r24, Z
    412c:	8f 73       	andi	r24, 0x3F	; 63
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	98 2f       	mov	r25, r24
    4132:	88 27       	eor	r24, r24
    4134:	21 81       	ldd	r18, Z+1	; 0x01
    4136:	82 2b       	or	r24, r18
    4138:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    413c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4140:	82 81       	ldd	r24, Z+2	; 0x02
    4142:	f0 e4       	ldi	r31, 0x40	; 64
    4144:	8f 9f       	mul	r24, r31
    4146:	c0 01       	movw	r24, r0
    4148:	11 24       	eor	r1, r1
    414a:	fa 01       	movw	r30, r20
    414c:	23 81       	ldd	r18, Z+3	; 0x03
    414e:	26 95       	lsr	r18
    4150:	26 95       	lsr	r18
    4152:	82 2b       	or	r24, r18
    4154:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4158:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    415c:	81 e0       	ldi	r24, 0x01	; 1
    415e:	80 93 b0 16 	sts	0x16B0, r24	; 0x8016b0 <_measuringIsReady>
    4162:	08 95       	ret
    4164:	64 30       	cpi	r22, 0x04	; 4
    4166:	51 f0       	breq	.+20     	; 0x417c <_hihTwiCallback+0x58>
    4168:	80 e0       	ldi	r24, 0x00	; 0
    416a:	90 e4       	ldi	r25, 0x40	; 64
    416c:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4170:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4174:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4178:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    417c:	08 95       	ret

0000417e <hih8120_initialise>:
    417e:	0f 93       	push	r16
    4180:	1f 93       	push	r17
    4182:	02 e9       	ldi	r16, 0x92	; 146
    4184:	10 e2       	ldi	r17, 0x20	; 32
    4186:	20 e0       	ldi	r18, 0x00	; 0
    4188:	34 e2       	ldi	r19, 0x24	; 36
    418a:	44 ef       	ldi	r20, 0xF4	; 244
    418c:	50 e0       	ldi	r21, 0x00	; 0
    418e:	60 e0       	ldi	r22, 0x00	; 0
    4190:	87 e2       	ldi	r24, 0x27	; 39
    4192:	0e 94 4d 2c 	call	0x589a	; 0x589a <twiCreate>
    4196:	90 93 b2 16 	sts	0x16B2, r25	; 0x8016b2 <_hih8120Handler+0x1>
    419a:	80 93 b1 16 	sts	0x16B1, r24	; 0x8016b1 <_hih8120Handler>
    419e:	21 e0       	ldi	r18, 0x01	; 1
    41a0:	89 2b       	or	r24, r25
    41a2:	09 f0       	breq	.+2      	; 0x41a6 <hih8120_initialise+0x28>
    41a4:	20 e0       	ldi	r18, 0x00	; 0
    41a6:	82 2f       	mov	r24, r18
    41a8:	1f 91       	pop	r17
    41aa:	0f 91       	pop	r16
    41ac:	08 95       	ret

000041ae <hih8120_wakeup>:
    41ae:	80 91 b1 16 	lds	r24, 0x16B1	; 0x8016b1 <_hih8120Handler>
    41b2:	90 91 b2 16 	lds	r25, 0x16B2	; 0x8016b2 <_hih8120Handler+0x1>
    41b6:	00 97       	sbiw	r24, 0x00	; 0
    41b8:	59 f0       	breq	.+22     	; 0x41d0 <hih8120_wakeup+0x22>
    41ba:	40 e0       	ldi	r20, 0x00	; 0
    41bc:	60 e0       	ldi	r22, 0x00	; 0
    41be:	70 e0       	ldi	r23, 0x00	; 0
    41c0:	0e 94 9e 2c 	call	0x593c	; 0x593c <twiTransmit>
    41c4:	84 30       	cpi	r24, 0x04	; 4
    41c6:	31 f4       	brne	.+12     	; 0x41d4 <hih8120_wakeup+0x26>
    41c8:	10 92 b0 16 	sts	0x16B0, r1	; 0x8016b0 <_measuringIsReady>
    41cc:	80 e0       	ldi	r24, 0x00	; 0
    41ce:	08 95       	ret
    41d0:	82 e0       	ldi	r24, 0x02	; 2
    41d2:	08 95       	ret
    41d4:	83 e0       	ldi	r24, 0x03	; 3
    41d6:	08 95       	ret

000041d8 <hih8120_measure>:
    41d8:	80 91 b1 16 	lds	r24, 0x16B1	; 0x8016b1 <_hih8120Handler>
    41dc:	90 91 b2 16 	lds	r25, 0x16B2	; 0x8016b2 <_hih8120Handler+0x1>
    41e0:	00 97       	sbiw	r24, 0x00	; 0
    41e2:	39 f0       	breq	.+14     	; 0x41f2 <hih8120_measure+0x1a>
    41e4:	64 e0       	ldi	r22, 0x04	; 4
    41e6:	0e 94 ea 2c 	call	0x59d4	; 0x59d4 <twiReceive>
    41ea:	85 30       	cpi	r24, 0x05	; 5
    41ec:	21 f0       	breq	.+8      	; 0x41f6 <hih8120_measure+0x1e>
    41ee:	83 e0       	ldi	r24, 0x03	; 3
    41f0:	08 95       	ret
    41f2:	82 e0       	ldi	r24, 0x02	; 2
    41f4:	08 95       	ret
    41f6:	80 e0       	ldi	r24, 0x00	; 0
    41f8:	08 95       	ret

000041fa <hih8120_getHumidity>:
    41fa:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    41fe:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    4202:	80 e0       	ldi	r24, 0x00	; 0
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <__floatunsisf>
    420a:	20 e0       	ldi	r18, 0x00	; 0
    420c:	30 e0       	ldi	r19, 0x00	; 0
    420e:	48 ec       	ldi	r20, 0xC8	; 200
    4210:	52 e4       	ldi	r21, 0x42	; 66
    4212:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <__mulsf3>
    4216:	20 e0       	ldi	r18, 0x00	; 0
    4218:	38 ef       	ldi	r19, 0xF8	; 248
    421a:	4f e7       	ldi	r20, 0x7F	; 127
    421c:	56 e4       	ldi	r21, 0x46	; 70
    421e:	0c 94 5b 2e 	jmp	0x5cb6	; 0x5cb6 <__divsf3>
    4222:	08 95       	ret

00004224 <hih8120_getHumidityPercent_x10>:
    4224:	ea df       	rcall	.-44     	; 0x41fa <hih8120_getHumidity>
    4226:	20 e0       	ldi	r18, 0x00	; 0
    4228:	30 e0       	ldi	r19, 0x00	; 0
    422a:	40 e2       	ldi	r20, 0x20	; 32
    422c:	51 e4       	ldi	r21, 0x41	; 65
    422e:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <__mulsf3>
    4232:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <__fixunssfsi>
    4236:	cb 01       	movw	r24, r22
    4238:	08 95       	ret

0000423a <hih8120_getTemperature>:
    423a:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    423e:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    4242:	80 e0       	ldi	r24, 0x00	; 0
    4244:	90 e0       	ldi	r25, 0x00	; 0
    4246:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <__floatunsisf>
    424a:	20 e0       	ldi	r18, 0x00	; 0
    424c:	30 e0       	ldi	r19, 0x00	; 0
    424e:	45 e2       	ldi	r20, 0x25	; 37
    4250:	53 e4       	ldi	r21, 0x43	; 67
    4252:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <__mulsf3>
    4256:	20 e0       	ldi	r18, 0x00	; 0
    4258:	38 ef       	ldi	r19, 0xF8	; 248
    425a:	4f e7       	ldi	r20, 0x7F	; 127
    425c:	56 e4       	ldi	r21, 0x46	; 70
    425e:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <__divsf3>
    4262:	20 e0       	ldi	r18, 0x00	; 0
    4264:	30 e0       	ldi	r19, 0x00	; 0
    4266:	40 e2       	ldi	r20, 0x20	; 32
    4268:	52 e4       	ldi	r21, 0x42	; 66
    426a:	0c 94 f6 2d 	jmp	0x5bec	; 0x5bec <__subsf3>
    426e:	08 95       	ret

00004270 <hih8120_getTemperature_x10>:
    4270:	e4 df       	rcall	.-56     	; 0x423a <hih8120_getTemperature>
    4272:	20 e0       	ldi	r18, 0x00	; 0
    4274:	30 e0       	ldi	r19, 0x00	; 0
    4276:	40 e2       	ldi	r20, 0x20	; 32
    4278:	51 e4       	ldi	r21, 0x41	; 65
    427a:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <__mulsf3>
    427e:	0e 94 c3 2e 	call	0x5d86	; 0x5d86 <__fixsfsi>
    4282:	cb 01       	movw	r24, r22
    4284:	08 95       	ret

00004286 <_serialCallBack>:
    4286:	0f 93       	push	r16
    4288:	1f 93       	push	r17
    428a:	cf 93       	push	r28
    428c:	df 93       	push	r29
    428e:	1f 92       	push	r1
    4290:	1f 92       	push	r1
    4292:	cd b7       	in	r28, 0x3d	; 61
    4294:	de b7       	in	r29, 0x3e	; 62
    4296:	8c 01       	movw	r16, r24
    4298:	19 82       	std	Y+1, r1	; 0x01
    429a:	2d c0       	rjmp	.+90     	; 0x42f6 <_serialCallBack+0x70>
    429c:	e0 91 ea 16 	lds	r30, 0x16EA	; 0x8016ea <rec_buf_inp.2878>
    42a0:	ec 32       	cpi	r30, 0x2C	; 44
    42a2:	50 f4       	brcc	.+20     	; 0x42b8 <_serialCallBack+0x32>
    42a4:	81 e0       	ldi	r24, 0x01	; 1
    42a6:	8e 0f       	add	r24, r30
    42a8:	80 93 ea 16 	sts	0x16EA, r24	; 0x8016ea <rec_buf_inp.2878>
    42ac:	f0 e0       	ldi	r31, 0x00	; 0
    42ae:	e4 5e       	subi	r30, 0xE4	; 228
    42b0:	f8 4e       	sbci	r31, 0xE8	; 232
    42b2:	8a 81       	ldd	r24, Y+2	; 0x02
    42b4:	80 83       	st	Z, r24
    42b6:	02 c0       	rjmp	.+4      	; 0x42bc <_serialCallBack+0x36>
    42b8:	10 92 ea 16 	sts	0x16EA, r1	; 0x8016ea <rec_buf_inp.2878>
    42bc:	8a 81       	ldd	r24, Y+2	; 0x02
    42be:	8a 30       	cpi	r24, 0x0A	; 10
    42c0:	d1 f4       	brne	.+52     	; 0x42f6 <_serialCallBack+0x70>
    42c2:	40 91 ea 16 	lds	r20, 0x16EA	; 0x8016ea <rec_buf_inp.2878>
    42c6:	50 e0       	ldi	r21, 0x00	; 0
    42c8:	fa 01       	movw	r30, r20
    42ca:	e6 5e       	subi	r30, 0xE6	; 230
    42cc:	f8 4e       	sbci	r31, 0xE8	; 232
    42ce:	10 82       	st	Z, r1
    42d0:	41 50       	subi	r20, 0x01	; 1
    42d2:	51 09       	sbc	r21, r1
    42d4:	9e 01       	movw	r18, r28
    42d6:	2f 5f       	subi	r18, 0xFF	; 255
    42d8:	3f 4f       	sbci	r19, 0xFF	; 255
    42da:	6c e1       	ldi	r22, 0x1C	; 28
    42dc:	77 e1       	ldi	r23, 0x17	; 23
    42de:	80 91 ed 16 	lds	r24, 0x16ED	; 0x8016ed <_serialReplyBufferHandle>
    42e2:	90 91 ee 16 	lds	r25, 0x16EE	; 0x8016ee <_serialReplyBufferHandle+0x1>
    42e6:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <xStreamBufferSendFromISR>
    42ea:	89 81       	ldd	r24, Y+1	; 0x01
    42ec:	81 11       	cpse	r24, r1
    42ee:	0e 94 d7 06 	call	0xdae	; 0xdae <vPortYield>
    42f2:	10 92 ea 16 	sts	0x16EA, r1	; 0x8016ea <rec_buf_inp.2878>
    42f6:	be 01       	movw	r22, r28
    42f8:	6e 5f       	subi	r22, 0xFE	; 254
    42fa:	7f 4f       	sbci	r23, 0xFF	; 255
    42fc:	c8 01       	movw	r24, r16
    42fe:	49 d6       	rcall	.+3218   	; 0x4f92 <serial_getByte>
    4300:	88 23       	and	r24, r24
    4302:	61 f2       	breq	.-104    	; 0x429c <_serialCallBack+0x16>
    4304:	0f 90       	pop	r0
    4306:	0f 90       	pop	r0
    4308:	df 91       	pop	r29
    430a:	cf 91       	pop	r28
    430c:	1f 91       	pop	r17
    430e:	0f 91       	pop	r16
    4310:	08 95       	ret

00004312 <_uploadMessage>:
    4312:	0f 93       	push	r16
    4314:	1f 93       	push	r17
    4316:	cf 93       	push	r28
    4318:	df 93       	push	r29
    431a:	8c 01       	movw	r16, r24
    431c:	eb 01       	movw	r28, r22
    431e:	80 91 ed 16 	lds	r24, 0x16ED	; 0x8016ed <_serialReplyBufferHandle>
    4322:	90 91 ee 16 	lds	r25, 0x16EE	; 0x8016ee <_serialReplyBufferHandle+0x1>
    4326:	0e 94 ab 0c 	call	0x1956	; 0x1956 <xStreamBufferReset>
    432a:	b8 01       	movw	r22, r16
    432c:	83 eb       	ldi	r24, 0xB3	; 179
    432e:	96 e1       	ldi	r25, 0x16	; 22
    4330:	0e 94 16 36 	call	0x6c2c	; 0x6c2c <strcpy>
    4334:	20 97       	sbiw	r28, 0x00	; 0
    4336:	79 f0       	breq	.+30     	; 0x4356 <_uploadMessage+0x44>
    4338:	e3 eb       	ldi	r30, 0xB3	; 179
    433a:	f6 e1       	ldi	r31, 0x16	; 22
    433c:	01 90       	ld	r0, Z+
    433e:	00 20       	and	r0, r0
    4340:	e9 f7       	brne	.-6      	; 0x433c <_uploadMessage+0x2a>
    4342:	31 97       	sbiw	r30, 0x01	; 1
    4344:	80 e2       	ldi	r24, 0x20	; 32
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	91 83       	std	Z+1, r25	; 0x01
    434a:	80 83       	st	Z, r24
    434c:	be 01       	movw	r22, r28
    434e:	83 eb       	ldi	r24, 0xB3	; 179
    4350:	96 e1       	ldi	r25, 0x16	; 22
    4352:	0e 94 0b 36 	call	0x6c16	; 0x6c16 <strcat>
    4356:	e3 eb       	ldi	r30, 0xB3	; 179
    4358:	f6 e1       	ldi	r31, 0x16	; 22
    435a:	df 01       	movw	r26, r30
    435c:	0d 90       	ld	r0, X+
    435e:	00 20       	and	r0, r0
    4360:	e9 f7       	brne	.-6      	; 0x435c <_uploadMessage+0x4a>
    4362:	11 97       	sbiw	r26, 0x01	; 1
    4364:	8d e0       	ldi	r24, 0x0D	; 13
    4366:	9a e0       	ldi	r25, 0x0A	; 10
    4368:	11 96       	adiw	r26, 0x01	; 1
    436a:	9c 93       	st	X, r25
    436c:	8e 93       	st	-X, r24
    436e:	12 96       	adiw	r26, 0x02	; 2
    4370:	1c 92       	st	X, r1
    4372:	01 90       	ld	r0, Z+
    4374:	00 20       	and	r0, r0
    4376:	e9 f7       	brne	.-6      	; 0x4372 <_uploadMessage+0x60>
    4378:	31 97       	sbiw	r30, 0x01	; 1
    437a:	e3 5b       	subi	r30, 0xB3	; 179
    437c:	f6 41       	sbci	r31, 0x16	; 22
    437e:	ae 2f       	mov	r26, r30
    4380:	83 eb       	ldi	r24, 0xB3	; 179
    4382:	96 e1       	ldi	r25, 0x16	; 22
    4384:	ac 01       	movw	r20, r24
    4386:	6a 2f       	mov	r22, r26
    4388:	80 91 ef 16 	lds	r24, 0x16EF	; 0x8016ef <_rn2483_serial>
    438c:	90 91 f0 16 	lds	r25, 0x16F0	; 0x8016f0 <_rn2483_serial+0x1>
    4390:	ab d5       	rcall	.+2902   	; 0x4ee8 <serial_sendBytes>
    4392:	81 11       	cpse	r24, r1
    4394:	11 c0       	rjmp	.+34     	; 0x43b8 <_uploadMessage+0xa6>
    4396:	08 e2       	ldi	r16, 0x28	; 40
    4398:	15 e0       	ldi	r17, 0x05	; 5
    439a:	20 e0       	ldi	r18, 0x00	; 0
    439c:	30 e0       	ldi	r19, 0x00	; 0
    439e:	4d e2       	ldi	r20, 0x2D	; 45
    43a0:	50 e0       	ldi	r21, 0x00	; 0
    43a2:	66 e7       	ldi	r22, 0x76	; 118
    43a4:	77 e1       	ldi	r23, 0x17	; 23
    43a6:	80 91 ed 16 	lds	r24, 0x16ED	; 0x8016ed <_serialReplyBufferHandle>
    43aa:	90 91 ee 16 	lds	r25, 0x16EE	; 0x8016ee <_serialReplyBufferHandle+0x1>
    43ae:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <xStreamBufferReceive>
    43b2:	86 e7       	ldi	r24, 0x76	; 118
    43b4:	97 e1       	ldi	r25, 0x17	; 23
    43b6:	02 c0       	rjmp	.+4      	; 0x43bc <_uploadMessage+0xaa>
    43b8:	80 e0       	ldi	r24, 0x00	; 0
    43ba:	90 e0       	ldi	r25, 0x00	; 0
    43bc:	df 91       	pop	r29
    43be:	cf 91       	pop	r28
    43c0:	1f 91       	pop	r17
    43c2:	0f 91       	pop	r16
    43c4:	08 95       	ret

000043c6 <_reply2ReturnCode>:
    43c6:	2f 92       	push	r2
    43c8:	3f 92       	push	r3
    43ca:	4f 92       	push	r4
    43cc:	5f 92       	push	r5
    43ce:	6f 92       	push	r6
    43d0:	7f 92       	push	r7
    43d2:	8f 92       	push	r8
    43d4:	9f 92       	push	r9
    43d6:	af 92       	push	r10
    43d8:	bf 92       	push	r11
    43da:	cf 92       	push	r12
    43dc:	df 92       	push	r13
    43de:	ef 92       	push	r14
    43e0:	ff 92       	push	r15
    43e2:	0f 93       	push	r16
    43e4:	1f 93       	push	r17
    43e6:	cf 93       	push	r28
    43e8:	df 93       	push	r29
    43ea:	5c 01       	movw	r10, r24
    43ec:	fc 01       	movw	r30, r24
    43ee:	01 90       	ld	r0, Z+
    43f0:	00 20       	and	r0, r0
    43f2:	e9 f7       	brne	.-6      	; 0x43ee <_reply2ReturnCode+0x28>
    43f4:	31 97       	sbiw	r30, 0x01	; 1
    43f6:	6f 01       	movw	r12, r30
    43f8:	c8 1a       	sub	r12, r24
    43fa:	d9 0a       	sbc	r13, r25
    43fc:	5c 2c       	mov	r5, r12
    43fe:	0f 2e       	mov	r0, r31
    4400:	fd e4       	ldi	r31, 0x4D	; 77
    4402:	8f 2e       	mov	r8, r31
    4404:	f8 e0       	ldi	r31, 0x08	; 8
    4406:	9f 2e       	mov	r9, r31
    4408:	f0 2d       	mov	r31, r0
    440a:	e1 2c       	mov	r14, r1
    440c:	f1 2c       	mov	r15, r1
    440e:	4c 2c       	mov	r4, r12
    4410:	37 01       	movw	r6, r14
    4412:	f4 01       	movw	r30, r8
    4414:	01 81       	ldd	r16, Z+1	; 0x01
    4416:	12 81       	ldd	r17, Z+2	; 0x02
    4418:	e8 01       	movw	r28, r16
    441a:	09 90       	ld	r0, Y+
    441c:	00 20       	and	r0, r0
    441e:	e9 f7       	brne	.-6      	; 0x441a <_reply2ReturnCode+0x54>
    4420:	21 97       	sbiw	r28, 0x01	; 1
    4422:	c0 1b       	sub	r28, r16
    4424:	d1 0b       	sbc	r29, r17
    4426:	3c 2e       	mov	r3, r28
    4428:	f9 e0       	ldi	r31, 0x09	; 9
    442a:	cf 16       	cp	r12, r31
    442c:	d1 04       	cpc	r13, r1
    442e:	58 f0       	brcs	.+22     	; 0x4446 <_reply2ReturnCode+0x80>
    4430:	f4 01       	movw	r30, r8
    4432:	20 80       	ld	r2, Z
    4434:	fe e0       	ldi	r31, 0x0E	; 14
    4436:	2f 12       	cpse	r2, r31
    4438:	06 c0       	rjmp	.+12     	; 0x4446 <_reply2ReturnCode+0x80>
    443a:	b8 01       	movw	r22, r16
    443c:	c5 01       	movw	r24, r10
    443e:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <strcasestr>
    4442:	89 2b       	or	r24, r25
    4444:	09 f5       	brne	.+66     	; 0x4488 <_reply2ReturnCode+0xc2>
    4446:	44 2d       	mov	r20, r4
    4448:	35 14       	cp	r3, r5
    444a:	08 f4       	brcc	.+2      	; 0x444e <_reply2ReturnCode+0x88>
    444c:	4c 2f       	mov	r20, r28
    444e:	50 e0       	ldi	r21, 0x00	; 0
    4450:	b8 01       	movw	r22, r16
    4452:	c5 01       	movw	r24, r10
    4454:	0e 94 1d 36 	call	0x6c3a	; 0x6c3a <strncasecmp>
    4458:	89 2b       	or	r24, r25
    445a:	49 f4       	brne	.+18     	; 0x446e <_reply2ReturnCode+0xa8>
    445c:	f3 01       	movw	r30, r6
    445e:	ee 0f       	add	r30, r30
    4460:	ff 1f       	adc	r31, r31
    4462:	e6 0d       	add	r30, r6
    4464:	f7 1d       	adc	r31, r7
    4466:	e3 5b       	subi	r30, 0xB3	; 179
    4468:	f7 4f       	sbci	r31, 0xF7	; 247
    446a:	20 80       	ld	r2, Z
    446c:	0d c0       	rjmp	.+26     	; 0x4488 <_reply2ReturnCode+0xc2>
    446e:	8f ef       	ldi	r24, 0xFF	; 255
    4470:	e8 1a       	sub	r14, r24
    4472:	f8 0a       	sbc	r15, r24
    4474:	e3 e0       	ldi	r30, 0x03	; 3
    4476:	8e 0e       	add	r8, r30
    4478:	91 1c       	adc	r9, r1
    447a:	f1 e1       	ldi	r31, 0x11	; 17
    447c:	ef 16       	cp	r14, r31
    447e:	f1 04       	cpc	r15, r1
    4480:	39 f6       	brne	.-114    	; 0x4410 <_reply2ReturnCode+0x4a>
    4482:	68 94       	set
    4484:	22 24       	eor	r2, r2
    4486:	24 f8       	bld	r2, 4
    4488:	82 2d       	mov	r24, r2
    448a:	df 91       	pop	r29
    448c:	cf 91       	pop	r28
    448e:	1f 91       	pop	r17
    4490:	0f 91       	pop	r16
    4492:	ff 90       	pop	r15
    4494:	ef 90       	pop	r14
    4496:	df 90       	pop	r13
    4498:	cf 90       	pop	r12
    449a:	bf 90       	pop	r11
    449c:	af 90       	pop	r10
    449e:	9f 90       	pop	r9
    44a0:	8f 90       	pop	r8
    44a2:	7f 90       	pop	r7
    44a4:	6f 90       	pop	r6
    44a6:	5f 90       	pop	r5
    44a8:	4f 90       	pop	r4
    44aa:	3f 90       	pop	r3
    44ac:	2f 90       	pop	r2
    44ae:	08 95       	ret

000044b0 <_uploadMessageRc>:
    44b0:	30 df       	rcall	.-416    	; 0x4312 <_uploadMessage>
    44b2:	89 cf       	rjmp	.-238    	; 0x43c6 <_reply2ReturnCode>
    44b4:	08 95       	ret

000044b6 <lora_driver_flushBuffers>:
    44b6:	80 91 ed 16 	lds	r24, 0x16ED	; 0x8016ed <_serialReplyBufferHandle>
    44ba:	90 91 ee 16 	lds	r25, 0x16EE	; 0x8016ee <_serialReplyBufferHandle+0x1>
    44be:	0c 94 ab 0c 	jmp	0x1956	; 0x1956 <xStreamBufferReset>
    44c2:	08 95       	ret

000044c4 <lora_driver_initialise>:
    44c4:	8f 92       	push	r8
    44c6:	9f 92       	push	r9
    44c8:	af 92       	push	r10
    44ca:	cf 92       	push	r12
    44cc:	ef 92       	push	r14
    44ce:	0f 93       	push	r16
    44d0:	1f 93       	push	r17
    44d2:	cf 93       	push	r28
    44d4:	c8 2f       	mov	r28, r24
    44d6:	8b 01       	movw	r16, r22
    44d8:	41 e0       	ldi	r20, 0x01	; 1
    44da:	60 e0       	ldi	r22, 0x00	; 0
    44dc:	70 e0       	ldi	r23, 0x00	; 0
    44de:	88 ec       	ldi	r24, 0xC8	; 200
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <xStreamBufferGenericCreate>
    44e6:	90 93 ee 16 	sts	0x16EE, r25	; 0x8016ee <_serialReplyBufferHandle+0x1>
    44ea:	80 93 ed 16 	sts	0x16ED, r24	; 0x8016ed <_serialReplyBufferHandle>
    44ee:	10 93 ec 16 	sts	0x16EC, r17	; 0x8016ec <_downlinkMessageBuffer+0x1>
    44f2:	00 93 eb 16 	sts	0x16EB, r16	; 0x8016eb <_downlinkMessageBuffer>
    44f6:	0f 2e       	mov	r0, r31
    44f8:	f3 e4       	ldi	r31, 0x43	; 67
    44fa:	8f 2e       	mov	r8, r31
    44fc:	f1 e2       	ldi	r31, 0x21	; 33
    44fe:	9f 2e       	mov	r9, r31
    4500:	f0 2d       	mov	r31, r0
    4502:	68 94       	set
    4504:	aa 24       	eor	r10, r10
    4506:	a6 f8       	bld	r10, 6
    4508:	68 94       	set
    450a:	cc 24       	eor	r12, r12
    450c:	c6 f8       	bld	r12, 6
    450e:	e1 2c       	mov	r14, r1
    4510:	00 e0       	ldi	r16, 0x00	; 0
    4512:	23 e0       	ldi	r18, 0x03	; 3
    4514:	40 e0       	ldi	r20, 0x00	; 0
    4516:	51 ee       	ldi	r21, 0xE1	; 225
    4518:	60 e0       	ldi	r22, 0x00	; 0
    451a:	70 e0       	ldi	r23, 0x00	; 0
    451c:	8c 2f       	mov	r24, r28
    451e:	17 d4       	rcall	.+2094   	; 0x4d4e <serial_create>
    4520:	90 93 f0 16 	sts	0x16F0, r25	; 0x8016f0 <_rn2483_serial+0x1>
    4524:	80 93 ef 16 	sts	0x16EF, r24	; 0x8016ef <_rn2483_serial>
    4528:	e7 e0       	ldi	r30, 0x07	; 7
    452a:	f1 e0       	ldi	r31, 0x01	; 1
    452c:	80 81       	ld	r24, Z
    452e:	80 61       	ori	r24, 0x10	; 16
    4530:	80 83       	st	Z, r24
    4532:	cf 91       	pop	r28
    4534:	1f 91       	pop	r17
    4536:	0f 91       	pop	r16
    4538:	ef 90       	pop	r14
    453a:	cf 90       	pop	r12
    453c:	af 90       	pop	r10
    453e:	9f 90       	pop	r9
    4540:	8f 90       	pop	r8
    4542:	08 95       	ret

00004544 <lora_driver_resetRn2483>:
    4544:	88 23       	and	r24, r24
    4546:	31 f0       	breq	.+12     	; 0x4554 <lora_driver_resetRn2483+0x10>
    4548:	e8 e0       	ldi	r30, 0x08	; 8
    454a:	f1 e0       	ldi	r31, 0x01	; 1
    454c:	80 81       	ld	r24, Z
    454e:	8f 7e       	andi	r24, 0xEF	; 239
    4550:	80 83       	st	Z, r24
    4552:	08 95       	ret
    4554:	e8 e0       	ldi	r30, 0x08	; 8
    4556:	f1 e0       	ldi	r31, 0x01	; 1
    4558:	80 81       	ld	r24, Z
    455a:	80 61       	ori	r24, 0x10	; 16
    455c:	80 83       	st	Z, r24
    455e:	08 95       	ret

00004560 <lora_driver_rn2483FactoryReset>:
    4560:	60 e0       	ldi	r22, 0x00	; 0
    4562:	70 e0       	ldi	r23, 0x00	; 0
    4564:	83 ed       	ldi	r24, 0xD3	; 211
    4566:	95 e0       	ldi	r25, 0x05	; 5
    4568:	d4 de       	rcall	.-600    	; 0x4312 <_uploadMessage>
    456a:	e6 e7       	ldi	r30, 0x76	; 118
    456c:	f7 e1       	ldi	r31, 0x17	; 23
    456e:	01 90       	ld	r0, Z+
    4570:	00 20       	and	r0, r0
    4572:	e9 f7       	brne	.-6      	; 0x456e <lora_driver_rn2483FactoryReset+0xe>
    4574:	31 97       	sbiw	r30, 0x01	; 1
    4576:	e6 57       	subi	r30, 0x76	; 118
    4578:	f7 41       	sbci	r31, 0x17	; 23
    457a:	81 e0       	ldi	r24, 0x01	; 1
    457c:	75 97       	sbiw	r30, 0x15	; 21
    457e:	08 f0       	brcs	.+2      	; 0x4582 <lora_driver_rn2483FactoryReset+0x22>
    4580:	80 e0       	ldi	r24, 0x00	; 0
    4582:	08 95       	ret

00004584 <lora_driver_getRn2483Hweui>:
    4584:	cf 93       	push	r28
    4586:	df 93       	push	r29
    4588:	ec 01       	movw	r28, r24
    458a:	60 e0       	ldi	r22, 0x00	; 0
    458c:	70 e0       	ldi	r23, 0x00	; 0
    458e:	84 ee       	ldi	r24, 0xE4	; 228
    4590:	95 e0       	ldi	r25, 0x05	; 5
    4592:	bf de       	rcall	.-642    	; 0x4312 <_uploadMessage>
    4594:	e6 e7       	ldi	r30, 0x76	; 118
    4596:	f7 e1       	ldi	r31, 0x17	; 23
    4598:	01 90       	ld	r0, Z+
    459a:	00 20       	and	r0, r0
    459c:	e9 f7       	brne	.-6      	; 0x4598 <lora_driver_getRn2483Hweui+0x14>
    459e:	e7 58       	subi	r30, 0x87	; 135
    45a0:	f7 41       	sbci	r31, 0x17	; 23
    45a2:	39 f4       	brne	.+14     	; 0x45b2 <lora_driver_getRn2483Hweui+0x2e>
    45a4:	66 e7       	ldi	r22, 0x76	; 118
    45a6:	77 e1       	ldi	r23, 0x17	; 23
    45a8:	ce 01       	movw	r24, r28
    45aa:	0e 94 16 36 	call	0x6c2c	; 0x6c2c <strcpy>
    45ae:	80 e0       	ldi	r24, 0x00	; 0
    45b0:	02 c0       	rjmp	.+4      	; 0x45b6 <lora_driver_getRn2483Hweui+0x32>
    45b2:	18 82       	st	Y, r1
    45b4:	81 e0       	ldi	r24, 0x01	; 1
    45b6:	df 91       	pop	r29
    45b8:	cf 91       	pop	r28
    45ba:	08 95       	ret

000045bc <lora_driver_setDeviceIdentifier>:
    45bc:	fc 01       	movw	r30, r24
    45be:	01 90       	ld	r0, Z+
    45c0:	00 20       	and	r0, r0
    45c2:	e9 f7       	brne	.-6      	; 0x45be <lora_driver_setDeviceIdentifier+0x2>
    45c4:	9f 01       	movw	r18, r30
    45c6:	21 51       	subi	r18, 0x11	; 17
    45c8:	31 09       	sbc	r19, r1
    45ca:	28 17       	cp	r18, r24
    45cc:	39 07       	cpc	r19, r25
    45ce:	29 f4       	brne	.+10     	; 0x45da <lora_driver_setDeviceIdentifier+0x1e>
    45d0:	bc 01       	movw	r22, r24
    45d2:	82 e1       	ldi	r24, 0x12	; 18
    45d4:	96 e0       	ldi	r25, 0x06	; 6
    45d6:	6c cf       	rjmp	.-296    	; 0x44b0 <_uploadMessageRc>
    45d8:	08 95       	ret
    45da:	89 e0       	ldi	r24, 0x09	; 9
    45dc:	08 95       	ret

000045de <lora_driver_setApplicationIdentifier>:
    45de:	fc 01       	movw	r30, r24
    45e0:	01 90       	ld	r0, Z+
    45e2:	00 20       	and	r0, r0
    45e4:	e9 f7       	brne	.-6      	; 0x45e0 <lora_driver_setApplicationIdentifier+0x2>
    45e6:	9f 01       	movw	r18, r30
    45e8:	21 51       	subi	r18, 0x11	; 17
    45ea:	31 09       	sbc	r19, r1
    45ec:	28 17       	cp	r18, r24
    45ee:	39 07       	cpc	r19, r25
    45f0:	29 f4       	brne	.+10     	; 0x45fc <lora_driver_setApplicationIdentifier+0x1e>
    45f2:	bc 01       	movw	r22, r24
    45f4:	81 e2       	ldi	r24, 0x21	; 33
    45f6:	96 e0       	ldi	r25, 0x06	; 6
    45f8:	5b cf       	rjmp	.-330    	; 0x44b0 <_uploadMessageRc>
    45fa:	08 95       	ret
    45fc:	89 e0       	ldi	r24, 0x09	; 9
    45fe:	08 95       	ret

00004600 <lora_driver_setApplicationKey>:
    4600:	fc 01       	movw	r30, r24
    4602:	01 90       	ld	r0, Z+
    4604:	00 20       	and	r0, r0
    4606:	e9 f7       	brne	.-6      	; 0x4602 <lora_driver_setApplicationKey+0x2>
    4608:	9f 01       	movw	r18, r30
    460a:	21 52       	subi	r18, 0x21	; 33
    460c:	31 09       	sbc	r19, r1
    460e:	28 17       	cp	r18, r24
    4610:	39 07       	cpc	r19, r25
    4612:	29 f4       	brne	.+10     	; 0x461e <lora_driver_setApplicationKey+0x1e>
    4614:	bc 01       	movw	r22, r24
    4616:	80 e3       	ldi	r24, 0x30	; 48
    4618:	96 e0       	ldi	r25, 0x06	; 6
    461a:	4a cf       	rjmp	.-364    	; 0x44b0 <_uploadMessageRc>
    461c:	08 95       	ret
    461e:	89 e0       	ldi	r24, 0x09	; 9
    4620:	08 95       	ret

00004622 <lora_driver_saveMac>:
    4622:	60 e0       	ldi	r22, 0x00	; 0
    4624:	70 e0       	ldi	r23, 0x00	; 0
    4626:	8f e6       	ldi	r24, 0x6F	; 111
    4628:	96 e0       	ldi	r25, 0x06	; 6
    462a:	42 cf       	rjmp	.-380    	; 0x44b0 <_uploadMessageRc>
    462c:	08 95       	ret

0000462e <lora_driver_join>:
    462e:	0f 93       	push	r16
    4630:	1f 93       	push	r17
    4632:	e8 2f       	mov	r30, r24
    4634:	f0 e0       	ldi	r31, 0x00	; 0
    4636:	ee 0f       	add	r30, r30
    4638:	ff 1f       	adc	r31, r31
    463a:	e7 5b       	subi	r30, 0xB7	; 183
    463c:	f7 4f       	sbci	r31, 0xF7	; 247
    463e:	60 81       	ld	r22, Z
    4640:	71 81       	ldd	r23, Z+1	; 0x01
    4642:	88 e7       	ldi	r24, 0x78	; 120
    4644:	96 e0       	ldi	r25, 0x06	; 6
    4646:	34 df       	rcall	.-408    	; 0x44b0 <_uploadMessageRc>
    4648:	81 11       	cpse	r24, r1
    464a:	14 c0       	rjmp	.+40     	; 0x4674 <lora_driver_join+0x46>
    464c:	08 e2       	ldi	r16, 0x28	; 40
    464e:	15 e0       	ldi	r17, 0x05	; 5
    4650:	20 e0       	ldi	r18, 0x00	; 0
    4652:	30 e0       	ldi	r19, 0x00	; 0
    4654:	4d e2       	ldi	r20, 0x2D	; 45
    4656:	50 e0       	ldi	r21, 0x00	; 0
    4658:	66 e7       	ldi	r22, 0x76	; 118
    465a:	77 e1       	ldi	r23, 0x17	; 23
    465c:	80 91 ed 16 	lds	r24, 0x16ED	; 0x8016ed <_serialReplyBufferHandle>
    4660:	90 91 ee 16 	lds	r25, 0x16EE	; 0x8016ee <_serialReplyBufferHandle+0x1>
    4664:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <xStreamBufferReceive>
    4668:	88 23       	and	r24, r24
    466a:	21 f0       	breq	.+8      	; 0x4674 <lora_driver_join+0x46>
    466c:	86 e7       	ldi	r24, 0x76	; 118
    466e:	97 e1       	ldi	r25, 0x17	; 23
    4670:	aa de       	rcall	.-684    	; 0x43c6 <_reply2ReturnCode>
    4672:	03 c0       	rjmp	.+6      	; 0x467a <lora_driver_join+0x4c>
    4674:	86 e7       	ldi	r24, 0x76	; 118
    4676:	97 e1       	ldi	r25, 0x17	; 23
    4678:	a6 de       	rcall	.-692    	; 0x43c6 <_reply2ReturnCode>
    467a:	1f 91       	pop	r17
    467c:	0f 91       	pop	r16
    467e:	08 95       	ret

00004680 <lora_driver_sendUploadMessage>:
    4680:	0f 93       	push	r16
    4682:	1f 93       	push	r17
    4684:	cf 93       	push	r28
    4686:	df 93       	push	r29
    4688:	1f 92       	push	r1
    468a:	cd b7       	in	r28, 0x3d	; 61
    468c:	de b7       	in	r29, 0x3e	; 62
    468e:	db 01       	movw	r26, r22
    4690:	11 96       	adiw	r26, 0x01	; 1
    4692:	9c 91       	ld	r25, X
    4694:	11 97       	sbiw	r26, 0x01	; 1
    4696:	95 31       	cpi	r25, 0x15	; 21
    4698:	08 f0       	brcs	.+2      	; 0x469c <lora_driver_sendUploadMessage+0x1c>
    469a:	b4 c0       	rjmp	.+360    	; 0x4804 <lora_driver_sendUploadMessage+0x184>
    469c:	99 23       	and	r25, r25
    469e:	81 f1       	breq	.+96     	; 0x4700 <lora_driver_sendUploadMessage+0x80>
    46a0:	60 e0       	ldi	r22, 0x00	; 0
    46a2:	70 e0       	ldi	r23, 0x00	; 0
    46a4:	27 2f       	mov	r18, r23
    46a6:	30 e0       	ldi	r19, 0x00	; 0
    46a8:	46 2f       	mov	r20, r22
    46aa:	50 e0       	ldi	r21, 0x00	; 0
    46ac:	fd 01       	movw	r30, r26
    46ae:	e4 0f       	add	r30, r20
    46b0:	f5 1f       	adc	r31, r21
    46b2:	92 81       	ldd	r25, Z+2	; 0x02
    46b4:	92 95       	swap	r25
    46b6:	9f 70       	andi	r25, 0x0F	; 15
    46b8:	9a 30       	cpi	r25, 0x0A	; 10
    46ba:	10 f0       	brcs	.+4      	; 0x46c0 <lora_driver_sendUploadMessage+0x40>
    46bc:	99 5c       	subi	r25, 0xC9	; 201
    46be:	01 c0       	rjmp	.+2      	; 0x46c2 <lora_driver_sendUploadMessage+0x42>
    46c0:	90 5d       	subi	r25, 0xD0	; 208
    46c2:	f9 01       	movw	r30, r18
    46c4:	e9 5f       	subi	r30, 0xF9	; 249
    46c6:	f8 4e       	sbci	r31, 0xE8	; 232
    46c8:	90 83       	st	Z, r25
    46ca:	2f 5f       	subi	r18, 0xFF	; 255
    46cc:	3f 4f       	sbci	r19, 0xFF	; 255
    46ce:	fd 01       	movw	r30, r26
    46d0:	e4 0f       	add	r30, r20
    46d2:	f5 1f       	adc	r31, r21
    46d4:	92 81       	ldd	r25, Z+2	; 0x02
    46d6:	9f 70       	andi	r25, 0x0F	; 15
    46d8:	49 2f       	mov	r20, r25
    46da:	50 e0       	ldi	r21, 0x00	; 0
    46dc:	4a 30       	cpi	r20, 0x0A	; 10
    46de:	51 05       	cpc	r21, r1
    46e0:	14 f0       	brlt	.+4      	; 0x46e6 <lora_driver_sendUploadMessage+0x66>
    46e2:	99 5c       	subi	r25, 0xC9	; 201
    46e4:	01 c0       	rjmp	.+2      	; 0x46e8 <lora_driver_sendUploadMessage+0x68>
    46e6:	90 5d       	subi	r25, 0xD0	; 208
    46e8:	f9 01       	movw	r30, r18
    46ea:	e9 5f       	subi	r30, 0xF9	; 249
    46ec:	f8 4e       	sbci	r31, 0xE8	; 232
    46ee:	90 83       	st	Z, r25
    46f0:	7e 5f       	subi	r23, 0xFE	; 254
    46f2:	6f 5f       	subi	r22, 0xFF	; 255
    46f4:	11 96       	adiw	r26, 0x01	; 1
    46f6:	9c 91       	ld	r25, X
    46f8:	11 97       	sbiw	r26, 0x01	; 1
    46fa:	69 17       	cp	r22, r25
    46fc:	98 f2       	brcs	.-90     	; 0x46a4 <lora_driver_sendUploadMessage+0x24>
    46fe:	01 c0       	rjmp	.+2      	; 0x4702 <lora_driver_sendUploadMessage+0x82>
    4700:	70 e0       	ldi	r23, 0x00	; 0
    4702:	e7 2f       	mov	r30, r23
    4704:	f0 e0       	ldi	r31, 0x00	; 0
    4706:	e9 5f       	subi	r30, 0xF9	; 249
    4708:	f8 4e       	sbci	r31, 0xE8	; 232
    470a:	10 82       	st	Z, r1
    470c:	4c 91       	ld	r20, X
    470e:	81 11       	cpse	r24, r1
    4710:	03 c0       	rjmp	.+6      	; 0x4718 <lora_driver_sendUploadMessage+0x98>
    4712:	81 e8       	ldi	r24, 0x81	; 129
    4714:	96 e0       	ldi	r25, 0x06	; 6
    4716:	02 c0       	rjmp	.+4      	; 0x471c <lora_driver_sendUploadMessage+0x9c>
    4718:	83 e8       	ldi	r24, 0x83	; 131
    471a:	96 e0       	ldi	r25, 0x06	; 6
    471c:	27 e0       	ldi	r18, 0x07	; 7
    471e:	37 e1       	ldi	r19, 0x17	; 23
    4720:	3f 93       	push	r19
    4722:	2f 93       	push	r18
    4724:	1f 92       	push	r1
    4726:	4f 93       	push	r20
    4728:	9f 93       	push	r25
    472a:	8f 93       	push	r24
    472c:	87 e8       	ldi	r24, 0x87	; 135
    472e:	96 e0       	ldi	r25, 0x06	; 6
    4730:	9f 93       	push	r25
    4732:	8f 93       	push	r24
    4734:	89 e4       	ldi	r24, 0x49	; 73
    4736:	97 e1       	ldi	r25, 0x17	; 23
    4738:	9f 93       	push	r25
    473a:	8f 93       	push	r24
    473c:	0e 94 bf 36 	call	0x6d7e	; 0x6d7e <sprintf>
    4740:	60 e0       	ldi	r22, 0x00	; 0
    4742:	70 e0       	ldi	r23, 0x00	; 0
    4744:	89 e4       	ldi	r24, 0x49	; 73
    4746:	97 e1       	ldi	r25, 0x17	; 23
    4748:	b3 de       	rcall	.-666    	; 0x44b0 <_uploadMessageRc>
    474a:	0f b6       	in	r0, 0x3f	; 63
    474c:	f8 94       	cli
    474e:	de bf       	out	0x3e, r29	; 62
    4750:	0f be       	out	0x3f, r0	; 63
    4752:	cd bf       	out	0x3d, r28	; 61
    4754:	81 11       	cpse	r24, r1
    4756:	59 c0       	rjmp	.+178    	; 0x480a <lora_driver_sendUploadMessage+0x18a>
    4758:	08 e2       	ldi	r16, 0x28	; 40
    475a:	15 e0       	ldi	r17, 0x05	; 5
    475c:	20 e0       	ldi	r18, 0x00	; 0
    475e:	30 e0       	ldi	r19, 0x00	; 0
    4760:	4d e2       	ldi	r20, 0x2D	; 45
    4762:	50 e0       	ldi	r21, 0x00	; 0
    4764:	66 e7       	ldi	r22, 0x76	; 118
    4766:	77 e1       	ldi	r23, 0x17	; 23
    4768:	80 91 ed 16 	lds	r24, 0x16ED	; 0x8016ed <_serialReplyBufferHandle>
    476c:	90 91 ee 16 	lds	r25, 0x16EE	; 0x8016ee <_serialReplyBufferHandle+0x1>
    4770:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <xStreamBufferReceive>
    4774:	88 23       	and	r24, r24
    4776:	09 f4       	brne	.+2      	; 0x477a <lora_driver_sendUploadMessage+0xfa>
    4778:	47 c0       	rjmp	.+142    	; 0x4808 <lora_driver_sendUploadMessage+0x188>
    477a:	86 e7       	ldi	r24, 0x76	; 118
    477c:	97 e1       	ldi	r25, 0x17	; 23
    477e:	23 de       	rcall	.-954    	; 0x43c6 <_reply2ReturnCode>
    4780:	8e 30       	cpi	r24, 0x0E	; 14
    4782:	09 f0       	breq	.+2      	; 0x4786 <lora_driver_sendUploadMessage+0x106>
    4784:	42 c0       	rjmp	.+132    	; 0x480a <lora_driver_sendUploadMessage+0x18a>
    4786:	87 e0       	ldi	r24, 0x07	; 7
    4788:	89 83       	std	Y+1, r24	; 0x01
    478a:	80 91 eb 16 	lds	r24, 0x16EB	; 0x8016eb <_downlinkMessageBuffer>
    478e:	90 91 ec 16 	lds	r25, 0x16EC	; 0x8016ec <_downlinkMessageBuffer+0x1>
    4792:	89 2b       	or	r24, r25
    4794:	a9 f1       	breq	.+106    	; 0x4800 <lora_driver_sendUploadMessage+0x180>
    4796:	be 01       	movw	r22, r28
    4798:	6f 5f       	subi	r22, 0xFF	; 255
    479a:	7f 4f       	sbci	r23, 0xFF	; 255
    479c:	86 e7       	ldi	r24, 0x76	; 118
    479e:	97 e1       	ldi	r25, 0x17	; 23
    47a0:	68 d1       	rcall	.+720    	; 0x4a72 <decode_port_no>
    47a2:	80 93 f1 16 	sts	0x16F1, r24	; 0x8016f1 <_downlinkPayload>
    47a6:	e9 81       	ldd	r30, Y+1	; 0x01
    47a8:	f0 e0       	ldi	r31, 0x00	; 0
    47aa:	ea 58       	subi	r30, 0x8A	; 138
    47ac:	f8 4e       	sbci	r31, 0xE8	; 232
    47ae:	df 01       	movw	r26, r30
    47b0:	0d 90       	ld	r0, X+
    47b2:	00 20       	and	r0, r0
    47b4:	e9 f7       	brne	.-6      	; 0x47b0 <lora_driver_sendUploadMessage+0x130>
    47b6:	11 97       	sbiw	r26, 0x01	; 1
    47b8:	ae 1b       	sub	r26, r30
    47ba:	bf 0b       	sbc	r27, r31
    47bc:	aa 23       	and	r26, r26
    47be:	91 f0       	breq	.+36     	; 0x47e4 <lora_driver_sendUploadMessage+0x164>
    47c0:	bb 27       	eor	r27, r27
    47c2:	cd 01       	movw	r24, r26
    47c4:	01 97       	sbiw	r24, 0x01	; 1
    47c6:	9c 01       	movw	r18, r24
    47c8:	12 f4       	brpl	.+4      	; 0x47ce <lora_driver_sendUploadMessage+0x14e>
    47ca:	2f 5f       	subi	r18, 0xFF	; 255
    47cc:	3f 4f       	sbci	r19, 0xFF	; 255
    47ce:	35 95       	asr	r19
    47d0:	27 95       	ror	r18
    47d2:	20 93 f2 16 	sts	0x16F2, r18	; 0x8016f2 <_downlinkPayload+0x1>
    47d6:	af 01       	movw	r20, r30
    47d8:	4f 5f       	subi	r20, 0xFF	; 255
    47da:	5f 4f       	sbci	r21, 0xFF	; 255
    47dc:	64 e1       	ldi	r22, 0x14	; 20
    47de:	83 ef       	ldi	r24, 0xF3	; 243
    47e0:	96 e1       	ldi	r25, 0x16	; 22
    47e2:	73 d1       	rcall	.+742    	; 0x4aca <decode_hexadecimal_string_bytes>
    47e4:	01 e0       	ldi	r16, 0x01	; 1
    47e6:	10 e0       	ldi	r17, 0x00	; 0
    47e8:	20 e0       	ldi	r18, 0x00	; 0
    47ea:	30 e0       	ldi	r19, 0x00	; 0
    47ec:	46 e1       	ldi	r20, 0x16	; 22
    47ee:	50 e0       	ldi	r21, 0x00	; 0
    47f0:	61 ef       	ldi	r22, 0xF1	; 241
    47f2:	76 e1       	ldi	r23, 0x16	; 22
    47f4:	80 91 eb 16 	lds	r24, 0x16EB	; 0x8016eb <_downlinkMessageBuffer>
    47f8:	90 91 ec 16 	lds	r25, 0x16EC	; 0x8016ec <_downlinkMessageBuffer+0x1>
    47fc:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <xStreamBufferSend>
    4800:	8e e0       	ldi	r24, 0x0E	; 14
    4802:	03 c0       	rjmp	.+6      	; 0x480a <lora_driver_sendUploadMessage+0x18a>
    4804:	84 e1       	ldi	r24, 0x14	; 20
    4806:	01 c0       	rjmp	.+2      	; 0x480a <lora_driver_sendUploadMessage+0x18a>
    4808:	80 e0       	ldi	r24, 0x00	; 0
    480a:	0f 90       	pop	r0
    480c:	df 91       	pop	r29
    480e:	cf 91       	pop	r28
    4810:	1f 91       	pop	r17
    4812:	0f 91       	pop	r16
    4814:	08 95       	ret

00004816 <lora_driver_setAdaptiveDataRate>:
    4816:	81 30       	cpi	r24, 0x01	; 1
    4818:	19 f0       	breq	.+6      	; 0x4820 <lora_driver_setAdaptiveDataRate+0xa>
    481a:	67 e9       	ldi	r22, 0x97	; 151
    481c:	76 e0       	ldi	r23, 0x06	; 6
    481e:	02 c0       	rjmp	.+4      	; 0x4824 <lora_driver_setAdaptiveDataRate+0xe>
    4820:	60 e7       	ldi	r22, 0x70	; 112
    4822:	77 e0       	ldi	r23, 0x07	; 7
    4824:	8b e9       	ldi	r24, 0x9B	; 155
    4826:	96 e0       	ldi	r25, 0x06	; 6
    4828:	43 ce       	rjmp	.-890    	; 0x44b0 <_uploadMessageRc>
    482a:	08 95       	ret

0000482c <lora_driver_setReceiveDelay>:
    482c:	9f 93       	push	r25
    482e:	8f 93       	push	r24
    4830:	8c ec       	ldi	r24, 0xCC	; 204
    4832:	96 e0       	ldi	r25, 0x06	; 6
    4834:	9f 93       	push	r25
    4836:	8f 93       	push	r24
    4838:	89 e4       	ldi	r24, 0x49	; 73
    483a:	97 e1       	ldi	r25, 0x17	; 23
    483c:	9f 93       	push	r25
    483e:	8f 93       	push	r24
    4840:	0e 94 bf 36 	call	0x6d7e	; 0x6d7e <sprintf>
    4844:	60 e0       	ldi	r22, 0x00	; 0
    4846:	70 e0       	ldi	r23, 0x00	; 0
    4848:	89 e4       	ldi	r24, 0x49	; 73
    484a:	97 e1       	ldi	r25, 0x17	; 23
    484c:	31 de       	rcall	.-926    	; 0x44b0 <_uploadMessageRc>
    484e:	0f 90       	pop	r0
    4850:	0f 90       	pop	r0
    4852:	0f 90       	pop	r0
    4854:	0f 90       	pop	r0
    4856:	0f 90       	pop	r0
    4858:	0f 90       	pop	r0
    485a:	08 95       	ret

0000485c <lora_driver_configureToEu868>:
    485c:	2f 92       	push	r2
    485e:	3f 92       	push	r3
    4860:	4f 92       	push	r4
    4862:	5f 92       	push	r5
    4864:	6f 92       	push	r6
    4866:	7f 92       	push	r7
    4868:	8f 92       	push	r8
    486a:	9f 92       	push	r9
    486c:	af 92       	push	r10
    486e:	bf 92       	push	r11
    4870:	cf 92       	push	r12
    4872:	df 92       	push	r13
    4874:	ef 92       	push	r14
    4876:	ff 92       	push	r15
    4878:	0f 93       	push	r16
    487a:	1f 93       	push	r17
    487c:	cf 93       	push	r28
    487e:	df 93       	push	r29
    4880:	cd b7       	in	r28, 0x3d	; 61
    4882:	de b7       	in	r29, 0x3e	; 62
    4884:	a0 97       	sbiw	r28, 0x20	; 32
    4886:	0f b6       	in	r0, 0x3f	; 63
    4888:	f8 94       	cli
    488a:	de bf       	out	0x3e, r29	; 62
    488c:	0f be       	out	0x3f, r0	; 63
    488e:	cd bf       	out	0x3d, r28	; 61
    4890:	69 ef       	ldi	r22, 0xF9	; 249
    4892:	76 e0       	ldi	r23, 0x06	; 6
    4894:	85 e0       	ldi	r24, 0x05	; 5
    4896:	97 e0       	ldi	r25, 0x07	; 7
    4898:	3c dd       	rcall	.-1416   	; 0x4312 <_uploadMessage>
    489a:	95 dd       	rcall	.-1238   	; 0x43c6 <_reply2ReturnCode>
    489c:	81 11       	cpse	r24, r1
    489e:	a3 c0       	rjmp	.+326    	; 0x49e6 <lora_driver_configureToEu868+0x18a>
    48a0:	80 e2       	ldi	r24, 0x20	; 32
    48a2:	e2 e2       	ldi	r30, 0x22	; 34
    48a4:	f2 e0       	ldi	r31, 0x02	; 2
    48a6:	de 01       	movw	r26, r28
    48a8:	11 96       	adiw	r26, 0x01	; 1
    48aa:	01 90       	ld	r0, Z+
    48ac:	0d 92       	st	X+, r0
    48ae:	8a 95       	dec	r24
    48b0:	e1 f7       	brne	.-8      	; 0x48aa <lora_driver_configureToEu868+0x4e>
    48b2:	9e 01       	movw	r18, r28
    48b4:	2f 5f       	subi	r18, 0xFF	; 255
    48b6:	3f 4f       	sbci	r19, 0xFF	; 255
    48b8:	69 01       	movw	r12, r18
    48ba:	e1 2c       	mov	r14, r1
    48bc:	f1 2c       	mov	r15, r1
    48be:	0f 2e       	mov	r0, r31
    48c0:	f1 e1       	ldi	r31, 0x11	; 17
    48c2:	af 2e       	mov	r10, r31
    48c4:	f7 e0       	ldi	r31, 0x07	; 7
    48c6:	bf 2e       	mov	r11, r31
    48c8:	f0 2d       	mov	r31, r0
    48ca:	09 e4       	ldi	r16, 0x49	; 73
    48cc:	17 e1       	ldi	r17, 0x17	; 23
    48ce:	0f 2e       	mov	r0, r31
    48d0:	fa e2       	ldi	r31, 0x2A	; 42
    48d2:	4f 2e       	mov	r4, r31
    48d4:	f7 e0       	ldi	r31, 0x07	; 7
    48d6:	5f 2e       	mov	r5, r31
    48d8:	f0 2d       	mov	r31, r0
    48da:	0f 2e       	mov	r0, r31
    48dc:	f1 e4       	ldi	r31, 0x41	; 65
    48de:	8f 2e       	mov	r8, r31
    48e0:	f7 e0       	ldi	r31, 0x07	; 7
    48e2:	9f 2e       	mov	r9, r31
    48e4:	f0 2d       	mov	r31, r0
    48e6:	0f 2e       	mov	r0, r31
    48e8:	fb e5       	ldi	r31, 0x5B	; 91
    48ea:	6f 2e       	mov	r6, r31
    48ec:	f7 e0       	ldi	r31, 0x07	; 7
    48ee:	7f 2e       	mov	r7, r31
    48f0:	f0 2d       	mov	r31, r0
    48f2:	3e 2c       	mov	r3, r14
    48f4:	2f 2c       	mov	r2, r15
    48f6:	ff 92       	push	r15
    48f8:	ef 92       	push	r14
    48fa:	bf 92       	push	r11
    48fc:	af 92       	push	r10
    48fe:	1f 93       	push	r17
    4900:	0f 93       	push	r16
    4902:	0e 94 bf 36 	call	0x6d7e	; 0x6d7e <sprintf>
    4906:	60 e0       	ldi	r22, 0x00	; 0
    4908:	70 e0       	ldi	r23, 0x00	; 0
    490a:	c8 01       	movw	r24, r16
    490c:	02 dd       	rcall	.-1532   	; 0x4312 <_uploadMessage>
    490e:	5b dd       	rcall	.-1354   	; 0x43c6 <_reply2ReturnCode>
    4910:	0f 90       	pop	r0
    4912:	0f 90       	pop	r0
    4914:	0f 90       	pop	r0
    4916:	0f 90       	pop	r0
    4918:	0f 90       	pop	r0
    491a:	0f 90       	pop	r0
    491c:	81 11       	cpse	r24, r1
    491e:	63 c0       	rjmp	.+198    	; 0x49e6 <lora_driver_configureToEu868+0x18a>
    4920:	32 e0       	ldi	r19, 0x02	; 2
    4922:	3e 15       	cp	r19, r14
    4924:	e8 f4       	brcc	.+58     	; 0x4960 <lora_driver_configureToEu868+0x104>
    4926:	f6 01       	movw	r30, r12
    4928:	83 81       	ldd	r24, Z+3	; 0x03
    492a:	8f 93       	push	r24
    492c:	82 81       	ldd	r24, Z+2	; 0x02
    492e:	8f 93       	push	r24
    4930:	81 81       	ldd	r24, Z+1	; 0x01
    4932:	8f 93       	push	r24
    4934:	80 81       	ld	r24, Z
    4936:	8f 93       	push	r24
    4938:	ff 92       	push	r15
    493a:	ef 92       	push	r14
    493c:	5f 92       	push	r5
    493e:	4f 92       	push	r4
    4940:	1f 93       	push	r17
    4942:	0f 93       	push	r16
    4944:	0e 94 bf 36 	call	0x6d7e	; 0x6d7e <sprintf>
    4948:	60 e0       	ldi	r22, 0x00	; 0
    494a:	70 e0       	ldi	r23, 0x00	; 0
    494c:	c8 01       	movw	r24, r16
    494e:	e1 dc       	rcall	.-1598   	; 0x4312 <_uploadMessage>
    4950:	3a dd       	rcall	.-1420   	; 0x43c6 <_reply2ReturnCode>
    4952:	0f b6       	in	r0, 0x3f	; 63
    4954:	f8 94       	cli
    4956:	de bf       	out	0x3e, r29	; 62
    4958:	0f be       	out	0x3f, r0	; 63
    495a:	cd bf       	out	0x3d, r28	; 61
    495c:	81 11       	cpse	r24, r1
    495e:	43 c0       	rjmp	.+134    	; 0x49e6 <lora_driver_configureToEu868+0x18a>
    4960:	2f 92       	push	r2
    4962:	3f 92       	push	r3
    4964:	9f 92       	push	r9
    4966:	8f 92       	push	r8
    4968:	1f 93       	push	r17
    496a:	0f 93       	push	r16
    496c:	0e 94 bf 36 	call	0x6d7e	; 0x6d7e <sprintf>
    4970:	60 e0       	ldi	r22, 0x00	; 0
    4972:	70 e0       	ldi	r23, 0x00	; 0
    4974:	c8 01       	movw	r24, r16
    4976:	cd dc       	rcall	.-1638   	; 0x4312 <_uploadMessage>
    4978:	26 dd       	rcall	.-1460   	; 0x43c6 <_reply2ReturnCode>
    497a:	0f 90       	pop	r0
    497c:	0f 90       	pop	r0
    497e:	0f 90       	pop	r0
    4980:	0f 90       	pop	r0
    4982:	0f 90       	pop	r0
    4984:	0f 90       	pop	r0
    4986:	81 11       	cpse	r24, r1
    4988:	2e c0       	rjmp	.+92     	; 0x49e6 <lora_driver_configureToEu868+0x18a>
    498a:	2f 92       	push	r2
    498c:	3f 92       	push	r3
    498e:	7f 92       	push	r7
    4990:	6f 92       	push	r6
    4992:	1f 93       	push	r17
    4994:	0f 93       	push	r16
    4996:	0e 94 bf 36 	call	0x6d7e	; 0x6d7e <sprintf>
    499a:	60 e0       	ldi	r22, 0x00	; 0
    499c:	70 e0       	ldi	r23, 0x00	; 0
    499e:	c8 01       	movw	r24, r16
    49a0:	b8 dc       	rcall	.-1680   	; 0x4312 <_uploadMessage>
    49a2:	11 dd       	rcall	.-1502   	; 0x43c6 <_reply2ReturnCode>
    49a4:	0f 90       	pop	r0
    49a6:	0f 90       	pop	r0
    49a8:	0f 90       	pop	r0
    49aa:	0f 90       	pop	r0
    49ac:	0f 90       	pop	r0
    49ae:	0f 90       	pop	r0
    49b0:	81 11       	cpse	r24, r1
    49b2:	19 c0       	rjmp	.+50     	; 0x49e6 <lora_driver_configureToEu868+0x18a>
    49b4:	3f ef       	ldi	r19, 0xFF	; 255
    49b6:	e3 1a       	sub	r14, r19
    49b8:	f3 0a       	sbc	r15, r19
    49ba:	84 e0       	ldi	r24, 0x04	; 4
    49bc:	c8 0e       	add	r12, r24
    49be:	d1 1c       	adc	r13, r1
    49c0:	98 e0       	ldi	r25, 0x08	; 8
    49c2:	e9 16       	cp	r14, r25
    49c4:	f1 04       	cpc	r15, r1
    49c6:	09 f0       	breq	.+2      	; 0x49ca <lora_driver_configureToEu868+0x16e>
    49c8:	94 cf       	rjmp	.-216    	; 0x48f2 <lora_driver_configureToEu868+0x96>
    49ca:	60 e0       	ldi	r22, 0x00	; 0
    49cc:	70 e0       	ldi	r23, 0x00	; 0
    49ce:	83 e7       	ldi	r24, 0x73	; 115
    49d0:	97 e0       	ldi	r25, 0x07	; 7
    49d2:	9f dc       	rcall	.-1730   	; 0x4312 <_uploadMessage>
    49d4:	f8 dc       	rcall	.-1552   	; 0x43c6 <_reply2ReturnCode>
    49d6:	81 11       	cpse	r24, r1
    49d8:	06 c0       	rjmp	.+12     	; 0x49e6 <lora_driver_configureToEu868+0x18a>
    49da:	60 e0       	ldi	r22, 0x00	; 0
    49dc:	70 e0       	ldi	r23, 0x00	; 0
    49de:	84 e8       	ldi	r24, 0x84	; 132
    49e0:	97 e0       	ldi	r25, 0x07	; 7
    49e2:	97 dc       	rcall	.-1746   	; 0x4312 <_uploadMessage>
    49e4:	f0 dc       	rcall	.-1568   	; 0x43c6 <_reply2ReturnCode>
    49e6:	a0 96       	adiw	r28, 0x20	; 32
    49e8:	0f b6       	in	r0, 0x3f	; 63
    49ea:	f8 94       	cli
    49ec:	de bf       	out	0x3e, r29	; 62
    49ee:	0f be       	out	0x3f, r0	; 63
    49f0:	cd bf       	out	0x3d, r28	; 61
    49f2:	df 91       	pop	r29
    49f4:	cf 91       	pop	r28
    49f6:	1f 91       	pop	r17
    49f8:	0f 91       	pop	r16
    49fa:	ff 90       	pop	r15
    49fc:	ef 90       	pop	r14
    49fe:	df 90       	pop	r13
    4a00:	cf 90       	pop	r12
    4a02:	bf 90       	pop	r11
    4a04:	af 90       	pop	r10
    4a06:	9f 90       	pop	r9
    4a08:	8f 90       	pop	r8
    4a0a:	7f 90       	pop	r7
    4a0c:	6f 90       	pop	r6
    4a0e:	5f 90       	pop	r5
    4a10:	4f 90       	pop	r4
    4a12:	3f 90       	pop	r3
    4a14:	2f 90       	pop	r2
    4a16:	08 95       	ret

00004a18 <lora_driver_setOtaaIdentity>:
    4a18:	ef 92       	push	r14
    4a1a:	ff 92       	push	r15
    4a1c:	0f 93       	push	r16
    4a1e:	1f 93       	push	r17
    4a20:	cf 93       	push	r28
    4a22:	df 93       	push	r29
    4a24:	ec 01       	movw	r28, r24
    4a26:	8b 01       	movw	r16, r22
    4a28:	7a 01       	movw	r14, r20
    4a2a:	81 e0       	ldi	r24, 0x01	; 1
    4a2c:	f4 de       	rcall	.-536    	; 0x4816 <lora_driver_setAdaptiveDataRate>
    4a2e:	81 11       	cpse	r24, r1
    4a30:	0d c0       	rjmp	.+26     	; 0x4a4c <lora_driver_setOtaaIdentity+0x34>
    4a32:	ce 01       	movw	r24, r28
    4a34:	d4 dd       	rcall	.-1112   	; 0x45de <lora_driver_setApplicationIdentifier>
    4a36:	81 11       	cpse	r24, r1
    4a38:	09 c0       	rjmp	.+18     	; 0x4a4c <lora_driver_setOtaaIdentity+0x34>
    4a3a:	c8 01       	movw	r24, r16
    4a3c:	e1 dd       	rcall	.-1086   	; 0x4600 <lora_driver_setApplicationKey>
    4a3e:	81 11       	cpse	r24, r1
    4a40:	05 c0       	rjmp	.+10     	; 0x4a4c <lora_driver_setOtaaIdentity+0x34>
    4a42:	c7 01       	movw	r24, r14
    4a44:	bb dd       	rcall	.-1162   	; 0x45bc <lora_driver_setDeviceIdentifier>
    4a46:	81 11       	cpse	r24, r1
    4a48:	01 c0       	rjmp	.+2      	; 0x4a4c <lora_driver_setOtaaIdentity+0x34>
    4a4a:	eb dd       	rcall	.-1066   	; 0x4622 <lora_driver_saveMac>
    4a4c:	df 91       	pop	r29
    4a4e:	cf 91       	pop	r28
    4a50:	1f 91       	pop	r17
    4a52:	0f 91       	pop	r16
    4a54:	ff 90       	pop	r15
    4a56:	ef 90       	pop	r14
    4a58:	08 95       	ret

00004a5a <lora_driver_mapReturnCodeToText>:
    4a5a:	90 e0       	ldi	r25, 0x00	; 0
    4a5c:	fc 01       	movw	r30, r24
    4a5e:	ee 0f       	add	r30, r30
    4a60:	ff 1f       	adc	r31, r31
    4a62:	8e 0f       	add	r24, r30
    4a64:	9f 1f       	adc	r25, r31
    4a66:	fc 01       	movw	r30, r24
    4a68:	e3 5b       	subi	r30, 0xB3	; 179
    4a6a:	f7 4f       	sbci	r31, 0xF7	; 247
    4a6c:	81 81       	ldd	r24, Z+1	; 0x01
    4a6e:	92 81       	ldd	r25, Z+2	; 0x02
    4a70:	08 95       	ret

00004a72 <decode_port_no>:
    4a72:	dc 01       	movw	r26, r24
    4a74:	00 97       	sbiw	r24, 0x00	; 0
    4a76:	29 f1       	breq	.+74     	; 0x4ac2 <decode_port_no+0x50>
    4a78:	fb 01       	movw	r30, r22
    4a7a:	20 81       	ld	r18, Z
    4a7c:	fc 01       	movw	r30, r24
    4a7e:	01 90       	ld	r0, Z+
    4a80:	00 20       	and	r0, r0
    4a82:	e9 f7       	brne	.-6      	; 0x4a7e <decode_port_no+0xc>
    4a84:	31 97       	sbiw	r30, 0x01	; 1
    4a86:	e8 1b       	sub	r30, r24
    4a88:	f9 0b       	sbc	r31, r25
    4a8a:	82 2f       	mov	r24, r18
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	e8 17       	cp	r30, r24
    4a90:	f9 07       	cpc	r31, r25
    4a92:	c8 f0       	brcs	.+50     	; 0x4ac6 <decode_port_no+0x54>
    4a94:	80 e0       	ldi	r24, 0x00	; 0
    4a96:	08 c0       	rjmp	.+16     	; 0x4aa8 <decode_port_no+0x36>
    4a98:	88 0f       	add	r24, r24
    4a9a:	38 2f       	mov	r19, r24
    4a9c:	33 0f       	add	r19, r19
    4a9e:	33 0f       	add	r19, r19
    4aa0:	83 0f       	add	r24, r19
    4aa2:	80 53       	subi	r24, 0x30	; 48
    4aa4:	89 0f       	add	r24, r25
    4aa6:	2f 5f       	subi	r18, 0xFF	; 255
    4aa8:	fd 01       	movw	r30, r26
    4aaa:	e2 0f       	add	r30, r18
    4aac:	f1 1d       	adc	r31, r1
    4aae:	90 81       	ld	r25, Z
    4ab0:	30 ed       	ldi	r19, 0xD0	; 208
    4ab2:	39 0f       	add	r19, r25
    4ab4:	3a 30       	cpi	r19, 0x0A	; 10
    4ab6:	10 f4       	brcc	.+4      	; 0x4abc <decode_port_no+0x4a>
    4ab8:	91 11       	cpse	r25, r1
    4aba:	ee cf       	rjmp	.-36     	; 0x4a98 <decode_port_no+0x26>
    4abc:	fb 01       	movw	r30, r22
    4abe:	20 83       	st	Z, r18
    4ac0:	08 95       	ret
    4ac2:	80 e0       	ldi	r24, 0x00	; 0
    4ac4:	08 95       	ret
    4ac6:	80 e0       	ldi	r24, 0x00	; 0
    4ac8:	08 95       	ret

00004aca <decode_hexadecimal_string_bytes>:
    4aca:	0f 93       	push	r16
    4acc:	1f 93       	push	r17
    4ace:	cf 93       	push	r28
    4ad0:	df 93       	push	r29
    4ad2:	dc 01       	movw	r26, r24
    4ad4:	ea 01       	movw	r28, r20
    4ad6:	20 97       	sbiw	r28, 0x00	; 0
    4ad8:	e1 f1       	breq	.+120    	; 0x4b52 <decode_hexadecimal_string_bytes+0x88>
    4ada:	fa 01       	movw	r30, r20
    4adc:	01 90       	ld	r0, Z+
    4ade:	00 20       	and	r0, r0
    4ae0:	e9 f7       	brne	.-6      	; 0x4adc <decode_hexadecimal_string_bytes+0x12>
    4ae2:	31 97       	sbiw	r30, 0x01	; 1
    4ae4:	e4 1b       	sub	r30, r20
    4ae6:	f5 0b       	sbc	r31, r21
    4ae8:	32 97       	sbiw	r30, 0x02	; 2
    4aea:	10 f5       	brcc	.+68     	; 0x4b30 <decode_hexadecimal_string_bytes+0x66>
    4aec:	32 c0       	rjmp	.+100    	; 0x4b52 <decode_hexadecimal_string_bytes+0x88>
    4aee:	8d 01       	movw	r16, r26
    4af0:	04 0f       	add	r16, r20
    4af2:	15 1f       	adc	r17, r21
    4af4:	30 e0       	ldi	r19, 0x00	; 0
    4af6:	ae 01       	movw	r20, r28
    4af8:	42 0f       	add	r20, r18
    4afa:	53 1f       	adc	r21, r19
    4afc:	fa 01       	movw	r30, r20
    4afe:	90 81       	ld	r25, Z
    4b00:	91 34       	cpi	r25, 0x41	; 65
    4b02:	28 f0       	brcs	.+10     	; 0x4b0e <decode_hexadecimal_string_bytes+0x44>
    4b04:	97 53       	subi	r25, 0x37	; 55
    4b06:	59 2f       	mov	r21, r25
    4b08:	52 95       	swap	r21
    4b0a:	50 7f       	andi	r21, 0xF0	; 240
    4b0c:	03 c0       	rjmp	.+6      	; 0x4b14 <decode_hexadecimal_string_bytes+0x4a>
    4b0e:	59 2f       	mov	r21, r25
    4b10:	52 95       	swap	r21
    4b12:	50 7f       	andi	r21, 0xF0	; 240
    4b14:	2c 0f       	add	r18, r28
    4b16:	3d 1f       	adc	r19, r29
    4b18:	f9 01       	movw	r30, r18
    4b1a:	91 81       	ldd	r25, Z+1	; 0x01
    4b1c:	91 34       	cpi	r25, 0x41	; 65
    4b1e:	10 f0       	brcs	.+4      	; 0x4b24 <decode_hexadecimal_string_bytes+0x5a>
    4b20:	97 53       	subi	r25, 0x37	; 55
    4b22:	01 c0       	rjmp	.+2      	; 0x4b26 <decode_hexadecimal_string_bytes+0x5c>
    4b24:	90 53       	subi	r25, 0x30	; 48
    4b26:	95 0f       	add	r25, r21
    4b28:	f8 01       	movw	r30, r16
    4b2a:	90 83       	st	Z, r25
    4b2c:	8f 5f       	subi	r24, 0xFF	; 255
    4b2e:	01 c0       	rjmp	.+2      	; 0x4b32 <decode_hexadecimal_string_bytes+0x68>
    4b30:	80 e0       	ldi	r24, 0x00	; 0
    4b32:	28 2f       	mov	r18, r24
    4b34:	22 0f       	add	r18, r18
    4b36:	48 2f       	mov	r20, r24
    4b38:	50 e0       	ldi	r21, 0x00	; 0
    4b3a:	fe 01       	movw	r30, r28
    4b3c:	01 90       	ld	r0, Z+
    4b3e:	00 20       	and	r0, r0
    4b40:	e9 f7       	brne	.-6      	; 0x4b3c <decode_hexadecimal_string_bytes+0x72>
    4b42:	31 97       	sbiw	r30, 0x01	; 1
    4b44:	ec 1b       	sub	r30, r28
    4b46:	fd 0b       	sbc	r31, r29
    4b48:	4e 17       	cp	r20, r30
    4b4a:	5f 07       	cpc	r21, r31
    4b4c:	10 f4       	brcc	.+4      	; 0x4b52 <decode_hexadecimal_string_bytes+0x88>
    4b4e:	86 13       	cpse	r24, r22
    4b50:	ce cf       	rjmp	.-100    	; 0x4aee <decode_hexadecimal_string_bytes+0x24>
    4b52:	df 91       	pop	r29
    4b54:	cf 91       	pop	r28
    4b56:	1f 91       	pop	r17
    4b58:	0f 91       	pop	r16
    4b5a:	08 95       	ret

00004b5c <_serialCallBack>:
    4b5c:	80 91 a6 17 	lds	r24, 0x17A6	; 0x8017a6 <crc_sum.1945>
    4b60:	86 0f       	add	r24, r22
    4b62:	80 93 a6 17 	sts	0x17A6, r24	; 0x8017a6 <crc_sum.1945>
    4b66:	90 91 a9 17 	lds	r25, 0x17A9	; 0x8017a9 <_mh_state>
    4b6a:	91 30       	cpi	r25, 0x01	; 1
    4b6c:	79 f0       	breq	.+30     	; 0x4b8c <_serialCallBack+0x30>
    4b6e:	28 f0       	brcs	.+10     	; 0x4b7a <_serialCallBack+0x1e>
    4b70:	92 30       	cpi	r25, 0x02	; 2
    4b72:	a9 f0       	breq	.+42     	; 0x4b9e <_serialCallBack+0x42>
    4b74:	93 30       	cpi	r25, 0x03	; 3
    4b76:	19 f1       	breq	.+70     	; 0x4bbe <_serialCallBack+0x62>
    4b78:	08 95       	ret
    4b7a:	6f 3f       	cpi	r22, 0xFF	; 255
    4b7c:	09 f0       	breq	.+2      	; 0x4b80 <_serialCallBack+0x24>
    4b7e:	48 c0       	rjmp	.+144    	; 0x4c10 <_serialCallBack+0xb4>
    4b80:	10 92 a6 17 	sts	0x17A6, r1	; 0x8017a6 <crc_sum.1945>
    4b84:	81 e0       	ldi	r24, 0x01	; 1
    4b86:	80 93 a9 17 	sts	0x17A9, r24	; 0x8017a9 <_mh_state>
    4b8a:	08 95       	ret
    4b8c:	66 38       	cpi	r22, 0x86	; 134
    4b8e:	09 f0       	breq	.+2      	; 0x4b92 <_serialCallBack+0x36>
    4b90:	3f c0       	rjmp	.+126    	; 0x4c10 <_serialCallBack+0xb4>
    4b92:	10 92 a5 17 	sts	0x17A5, r1	; 0x8017a5 <inDex.1943>
    4b96:	82 e0       	ldi	r24, 0x02	; 2
    4b98:	80 93 a9 17 	sts	0x17A9, r24	; 0x8017a9 <_mh_state>
    4b9c:	08 95       	ret
    4b9e:	e0 91 a5 17 	lds	r30, 0x17A5	; 0x8017a5 <inDex.1943>
    4ba2:	81 e0       	ldi	r24, 0x01	; 1
    4ba4:	8e 0f       	add	r24, r30
    4ba6:	80 93 a5 17 	sts	0x17A5, r24	; 0x8017a5 <inDex.1943>
    4baa:	f0 e0       	ldi	r31, 0x00	; 0
    4bac:	ed 55       	subi	r30, 0x5D	; 93
    4bae:	f8 4e       	sbci	r31, 0xE8	; 232
    4bb0:	60 83       	st	Z, r22
    4bb2:	82 30       	cpi	r24, 0x02	; 2
    4bb4:	69 f5       	brne	.+90     	; 0x4c10 <_serialCallBack+0xb4>
    4bb6:	83 e0       	ldi	r24, 0x03	; 3
    4bb8:	80 93 a9 17 	sts	0x17A9, r24	; 0x8017a9 <_mh_state>
    4bbc:	08 95       	ret
    4bbe:	90 91 a5 17 	lds	r25, 0x17A5	; 0x8017a5 <inDex.1943>
    4bc2:	21 e0       	ldi	r18, 0x01	; 1
    4bc4:	29 0f       	add	r18, r25
    4bc6:	20 93 a5 17 	sts	0x17A5, r18	; 0x8017a5 <inDex.1943>
    4bca:	96 30       	cpi	r25, 0x06	; 6
    4bcc:	09 f5       	brne	.+66     	; 0x4c10 <_serialCallBack+0xb4>
    4bce:	81 11       	cpse	r24, r1
    4bd0:	0e c0       	rjmp	.+28     	; 0x4bee <_serialCallBack+0x92>
    4bd2:	e3 ea       	ldi	r30, 0xA3	; 163
    4bd4:	f7 e1       	ldi	r31, 0x17	; 23
    4bd6:	80 81       	ld	r24, Z
    4bd8:	90 e0       	ldi	r25, 0x00	; 0
    4bda:	98 2f       	mov	r25, r24
    4bdc:	88 27       	eor	r24, r24
    4bde:	21 81       	ldd	r18, Z+1	; 0x01
    4be0:	82 0f       	add	r24, r18
    4be2:	91 1d       	adc	r25, r1
    4be4:	90 93 ab 17 	sts	0x17AB, r25	; 0x8017ab <_ppm+0x1>
    4be8:	80 93 aa 17 	sts	0x17AA, r24	; 0x8017aa <_ppm>
    4bec:	04 c0       	rjmp	.+8      	; 0x4bf6 <_serialCallBack+0x9a>
    4bee:	10 92 ab 17 	sts	0x17AB, r1	; 0x8017ab <_ppm+0x1>
    4bf2:	10 92 aa 17 	sts	0x17AA, r1	; 0x8017aa <_ppm>
    4bf6:	10 92 a9 17 	sts	0x17A9, r1	; 0x8017a9 <_mh_state>
    4bfa:	e0 91 a7 17 	lds	r30, 0x17A7	; 0x8017a7 <_appCallBack>
    4bfe:	f0 91 a8 17 	lds	r31, 0x17A8	; 0x8017a8 <_appCallBack+0x1>
    4c02:	30 97       	sbiw	r30, 0x00	; 0
    4c04:	29 f0       	breq	.+10     	; 0x4c10 <_serialCallBack+0xb4>
    4c06:	80 91 aa 17 	lds	r24, 0x17AA	; 0x8017aa <_ppm>
    4c0a:	90 91 ab 17 	lds	r25, 0x17AB	; 0x8017ab <_ppm+0x1>
    4c0e:	19 95       	eicall
    4c10:	08 95       	ret

00004c12 <mh_z19_initialise>:
    4c12:	8f 92       	push	r8
    4c14:	9f 92       	push	r9
    4c16:	af 92       	push	r10
    4c18:	cf 92       	push	r12
    4c1a:	ef 92       	push	r14
    4c1c:	0f 93       	push	r16
    4c1e:	0f 2e       	mov	r0, r31
    4c20:	fe ea       	ldi	r31, 0xAE	; 174
    4c22:	8f 2e       	mov	r8, r31
    4c24:	f5 e2       	ldi	r31, 0x25	; 37
    4c26:	9f 2e       	mov	r9, r31
    4c28:	f0 2d       	mov	r31, r0
    4c2a:	68 94       	set
    4c2c:	aa 24       	eor	r10, r10
    4c2e:	a4 f8       	bld	r10, 4
    4c30:	68 94       	set
    4c32:	cc 24       	eor	r12, r12
    4c34:	c4 f8       	bld	r12, 4
    4c36:	e1 2c       	mov	r14, r1
    4c38:	00 e0       	ldi	r16, 0x00	; 0
    4c3a:	23 e0       	ldi	r18, 0x03	; 3
    4c3c:	40 e8       	ldi	r20, 0x80	; 128
    4c3e:	55 e2       	ldi	r21, 0x25	; 37
    4c40:	60 e0       	ldi	r22, 0x00	; 0
    4c42:	70 e0       	ldi	r23, 0x00	; 0
    4c44:	84 d0       	rcall	.+264    	; 0x4d4e <serial_create>
    4c46:	90 93 ad 17 	sts	0x17AD, r25	; 0x8017ad <_serial+0x1>
    4c4a:	80 93 ac 17 	sts	0x17AC, r24	; 0x8017ac <_serial>
    4c4e:	0f 91       	pop	r16
    4c50:	ef 90       	pop	r14
    4c52:	cf 90       	pop	r12
    4c54:	af 90       	pop	r10
    4c56:	9f 90       	pop	r9
    4c58:	8f 90       	pop	r8
    4c5a:	08 95       	ret

00004c5c <mh_z19_injectCallBack>:
    4c5c:	90 93 a8 17 	sts	0x17A8, r25	; 0x8017a8 <_appCallBack+0x1>
    4c60:	80 93 a7 17 	sts	0x17A7, r24	; 0x8017a7 <_appCallBack>
    4c64:	08 95       	ret

00004c66 <mh_z19_takeMeassuring>:
    4c66:	cf 93       	push	r28
    4c68:	df 93       	push	r29
    4c6a:	cd b7       	in	r28, 0x3d	; 61
    4c6c:	de b7       	in	r29, 0x3e	; 62
    4c6e:	29 97       	sbiw	r28, 0x09	; 9
    4c70:	0f b6       	in	r0, 0x3f	; 63
    4c72:	f8 94       	cli
    4c74:	de bf       	out	0x3e, r29	; 62
    4c76:	0f be       	out	0x3f, r0	; 63
    4c78:	cd bf       	out	0x3d, r28	; 61
    4c7a:	89 e0       	ldi	r24, 0x09	; 9
    4c7c:	e2 e4       	ldi	r30, 0x42	; 66
    4c7e:	f2 e0       	ldi	r31, 0x02	; 2
    4c80:	9e 01       	movw	r18, r28
    4c82:	2f 5f       	subi	r18, 0xFF	; 255
    4c84:	3f 4f       	sbci	r19, 0xFF	; 255
    4c86:	d9 01       	movw	r26, r18
    4c88:	01 90       	ld	r0, Z+
    4c8a:	0d 92       	st	X+, r0
    4c8c:	8a 95       	dec	r24
    4c8e:	e1 f7       	brne	.-8      	; 0x4c88 <mh_z19_takeMeassuring+0x22>
    4c90:	10 92 ab 17 	sts	0x17AB, r1	; 0x8017ab <_ppm+0x1>
    4c94:	10 92 aa 17 	sts	0x17AA, r1	; 0x8017aa <_ppm>
    4c98:	80 91 ac 17 	lds	r24, 0x17AC	; 0x8017ac <_serial>
    4c9c:	90 91 ad 17 	lds	r25, 0x17AD	; 0x8017ad <_serial+0x1>
    4ca0:	00 97       	sbiw	r24, 0x00	; 0
    4ca2:	31 f0       	breq	.+12     	; 0x4cb0 <mh_z19_takeMeassuring+0x4a>
    4ca4:	42 2f       	mov	r20, r18
    4ca6:	53 2f       	mov	r21, r19
    4ca8:	69 e0       	ldi	r22, 0x09	; 9
    4caa:	1e d1       	rcall	.+572    	; 0x4ee8 <serial_sendBytes>
    4cac:	80 e0       	ldi	r24, 0x00	; 0
    4cae:	01 c0       	rjmp	.+2      	; 0x4cb2 <mh_z19_takeMeassuring+0x4c>
    4cb0:	82 e0       	ldi	r24, 0x02	; 2
    4cb2:	29 96       	adiw	r28, 0x09	; 9
    4cb4:	0f b6       	in	r0, 0x3f	; 63
    4cb6:	f8 94       	cli
    4cb8:	de bf       	out	0x3e, r29	; 62
    4cba:	0f be       	out	0x3f, r0	; 63
    4cbc:	cd bf       	out	0x3d, r28	; 61
    4cbe:	df 91       	pop	r29
    4cc0:	cf 91       	pop	r28
    4cc2:	08 95       	ret

00004cc4 <mh_z19_getCo2Ppm>:
    4cc4:	20 91 aa 17 	lds	r18, 0x17AA	; 0x8017aa <_ppm>
    4cc8:	30 91 ab 17 	lds	r19, 0x17AB	; 0x8017ab <_ppm+0x1>
    4ccc:	21 15       	cp	r18, r1
    4cce:	31 05       	cpc	r19, r1
    4cd0:	29 f4       	brne	.+10     	; 0x4cdc <mh_z19_getCo2Ppm+0x18>
    4cd2:	fc 01       	movw	r30, r24
    4cd4:	11 82       	std	Z+1, r1	; 0x01
    4cd6:	10 82       	st	Z, r1
    4cd8:	81 e0       	ldi	r24, 0x01	; 1
    4cda:	08 95       	ret
    4cdc:	fc 01       	movw	r30, r24
    4cde:	31 83       	std	Z+1, r19	; 0x01
    4ce0:	20 83       	st	Z, r18
    4ce2:	80 e0       	ldi	r24, 0x00	; 0
    4ce4:	08 95       	ret

00004ce6 <rc_servo_setPosition>:
    4ce6:	65 36       	cpi	r22, 0x65	; 101
    4ce8:	0c f0       	brlt	.+2      	; 0x4cec <rc_servo_setPosition+0x6>
    4cea:	64 e6       	ldi	r22, 0x64	; 100
    4cec:	6c 39       	cpi	r22, 0x9C	; 156
    4cee:	0c f4       	brge	.+2      	; 0x4cf2 <rc_servo_setPosition+0xc>
    4cf0:	6c e9       	ldi	r22, 0x9C	; 156
    4cf2:	96 ef       	ldi	r25, 0xF6	; 246
    4cf4:	69 02       	muls	r22, r25
    4cf6:	b0 01       	movw	r22, r0
    4cf8:	11 24       	eor	r1, r1
    4cfa:	68 54       	subi	r22, 0x48	; 72
    4cfc:	74 4f       	sbci	r23, 0xF4	; 244
    4cfe:	81 11       	cpse	r24, r1
    4d00:	05 c0       	rjmp	.+10     	; 0x4d0c <rc_servo_setPosition+0x26>
    4d02:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4d06:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    4d0a:	08 95       	ret
    4d0c:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    4d10:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    4d14:	08 95       	ret

00004d16 <rc_servo_initialise>:
    4d16:	ea e0       	ldi	r30, 0x0A	; 10
    4d18:	f1 e0       	ldi	r31, 0x01	; 1
    4d1a:	80 81       	ld	r24, Z
    4d1c:	88 61       	ori	r24, 0x18	; 24
    4d1e:	80 83       	st	Z, r24
    4d20:	8f e3       	ldi	r24, 0x3F	; 63
    4d22:	9c e9       	ldi	r25, 0x9C	; 156
    4d24:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    4d28:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    4d2c:	60 e0       	ldi	r22, 0x00	; 0
    4d2e:	80 e0       	ldi	r24, 0x00	; 0
    4d30:	da df       	rcall	.-76     	; 0x4ce6 <rc_servo_setPosition>
    4d32:	60 e0       	ldi	r22, 0x00	; 0
    4d34:	81 e0       	ldi	r24, 0x01	; 1
    4d36:	d7 df       	rcall	.-82     	; 0x4ce6 <rc_servo_setPosition>
    4d38:	e0 e2       	ldi	r30, 0x20	; 32
    4d3a:	f1 e0       	ldi	r31, 0x01	; 1
    4d3c:	80 81       	ld	r24, Z
    4d3e:	82 6a       	ori	r24, 0xA2	; 162
    4d40:	80 83       	st	Z, r24
    4d42:	e1 e2       	ldi	r30, 0x21	; 33
    4d44:	f1 e0       	ldi	r31, 0x01	; 1
    4d46:	80 81       	ld	r24, Z
    4d48:	8a 61       	ori	r24, 0x1A	; 26
    4d4a:	80 83       	st	Z, r24
    4d4c:	08 95       	ret

00004d4e <serial_create>:
    4d4e:	2f 92       	push	r2
    4d50:	3f 92       	push	r3
    4d52:	4f 92       	push	r4
    4d54:	5f 92       	push	r5
    4d56:	6f 92       	push	r6
    4d58:	7f 92       	push	r7
    4d5a:	8f 92       	push	r8
    4d5c:	9f 92       	push	r9
    4d5e:	af 92       	push	r10
    4d60:	cf 92       	push	r12
    4d62:	ef 92       	push	r14
    4d64:	ff 92       	push	r15
    4d66:	0f 93       	push	r16
    4d68:	1f 93       	push	r17
    4d6a:	cf 93       	push	r28
    4d6c:	df 93       	push	r29
    4d6e:	cd b7       	in	r28, 0x3d	; 61
    4d70:	de b7       	in	r29, 0x3e	; 62
    4d72:	f8 2e       	mov	r15, r24
    4d74:	2a 01       	movw	r4, r20
    4d76:	3b 01       	movw	r6, r22
    4d78:	88 e0       	ldi	r24, 0x08	; 8
    4d7a:	90 e0       	ldi	r25, 0x00	; 0
    4d7c:	0e 94 ce 33 	call	0x679c	; 0x679c <malloc>
    4d80:	8c 01       	movw	r16, r24
    4d82:	8f 2d       	mov	r24, r15
    4d84:	90 e0       	ldi	r25, 0x00	; 0
    4d86:	fc 01       	movw	r30, r24
    4d88:	ee 0f       	add	r30, r30
    4d8a:	ff 1f       	adc	r31, r31
    4d8c:	e2 55       	subi	r30, 0x52	; 82
    4d8e:	f8 4e       	sbci	r31, 0xE8	; 232
    4d90:	11 83       	std	Z+1, r17	; 0x01
    4d92:	00 83       	st	Z, r16
    4d94:	01 15       	cp	r16, r1
    4d96:	11 05       	cpc	r17, r1
    4d98:	09 f4       	brne	.+2      	; 0x4d9c <serial_create+0x4e>
    4d9a:	69 c0       	rjmp	.+210    	; 0x4e6e <serial_create+0x120>
    4d9c:	88 0f       	add	r24, r24
    4d9e:	99 1f       	adc	r25, r25
    4da0:	fc 01       	movw	r30, r24
    4da2:	e5 5f       	subi	r30, 0xF5	; 245
    4da4:	fd 4f       	sbci	r31, 0xFD	; 253
    4da6:	80 81       	ld	r24, Z
    4da8:	91 81       	ldd	r25, Z+1	; 0x01
    4daa:	d8 01       	movw	r26, r16
    4dac:	8d 93       	st	X+, r24
    4dae:	9c 93       	st	X, r25
    4db0:	8c 2d       	mov	r24, r12
    4db2:	90 e0       	ldi	r25, 0x00	; 0
    4db4:	88 0f       	add	r24, r24
    4db6:	99 1f       	adc	r25, r25
    4db8:	88 0f       	add	r24, r24
    4dba:	99 1f       	adc	r25, r25
    4dbc:	0e 94 ce 33 	call	0x679c	; 0x679c <malloc>
    4dc0:	1c 01       	movw	r2, r24
    4dc2:	86 e0       	ldi	r24, 0x06	; 6
    4dc4:	90 e0       	ldi	r25, 0x00	; 0
    4dc6:	0e 94 ce 33 	call	0x679c	; 0x679c <malloc>
    4dca:	7c 01       	movw	r14, r24
    4dcc:	4c 2d       	mov	r20, r12
    4dce:	b1 01       	movw	r22, r2
    4dd0:	f1 d6       	rcall	.+3554   	; 0x5bb4 <fifo_init>
    4dd2:	f8 01       	movw	r30, r16
    4dd4:	f5 82       	std	Z+5, r15	; 0x05
    4dd6:	e4 82       	std	Z+4, r14	; 0x04
    4dd8:	8a 2d       	mov	r24, r10
    4dda:	90 e0       	ldi	r25, 0x00	; 0
    4ddc:	88 0f       	add	r24, r24
    4dde:	99 1f       	adc	r25, r25
    4de0:	88 0f       	add	r24, r24
    4de2:	99 1f       	adc	r25, r25
    4de4:	0e 94 ce 33 	call	0x679c	; 0x679c <malloc>
    4de8:	1c 01       	movw	r2, r24
    4dea:	86 e0       	ldi	r24, 0x06	; 6
    4dec:	90 e0       	ldi	r25, 0x00	; 0
    4dee:	0e 94 ce 33 	call	0x679c	; 0x679c <malloc>
    4df2:	7c 01       	movw	r14, r24
    4df4:	4a 2d       	mov	r20, r10
    4df6:	b1 01       	movw	r22, r2
    4df8:	dd d6       	rcall	.+3514   	; 0x5bb4 <fifo_init>
    4dfa:	d8 01       	movw	r26, r16
    4dfc:	13 96       	adiw	r26, 0x03	; 3
    4dfe:	fc 92       	st	X, r15
    4e00:	ee 92       	st	-X, r14
    4e02:	12 97       	sbiw	r26, 0x02	; 2
    4e04:	17 96       	adiw	r26, 0x07	; 7
    4e06:	9c 92       	st	X, r9
    4e08:	8e 92       	st	-X, r8
    4e0a:	16 97       	sbiw	r26, 0x06	; 6
    4e0c:	ff b6       	in	r15, 0x3f	; 63
    4e0e:	f8 94       	cli
    4e10:	ed 91       	ld	r30, X+
    4e12:	fc 91       	ld	r31, X
    4e14:	11 97       	sbiw	r26, 0x01	; 1
    4e16:	36 97       	sbiw	r30, 0x06	; 6
    4e18:	80 81       	ld	r24, Z
    4e1a:	82 60       	ori	r24, 0x02	; 2
    4e1c:	80 83       	st	Z, r24
    4e1e:	8d 90       	ld	r8, X+
    4e20:	9c 90       	ld	r9, X
    4e22:	c3 01       	movw	r24, r6
    4e24:	b2 01       	movw	r22, r4
    4e26:	e0 d7       	rcall	.+4032   	; 0x5de8 <__floatunsisf>
    4e28:	20 e0       	ldi	r18, 0x00	; 0
    4e2a:	30 e0       	ldi	r19, 0x00	; 0
    4e2c:	40 e0       	ldi	r20, 0x00	; 0
    4e2e:	51 e4       	ldi	r21, 0x41	; 65
    4e30:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <__mulsf3>
    4e34:	9b 01       	movw	r18, r22
    4e36:	ac 01       	movw	r20, r24
    4e38:	60 e0       	ldi	r22, 0x00	; 0
    4e3a:	74 e2       	ldi	r23, 0x24	; 36
    4e3c:	84 e7       	ldi	r24, 0x74	; 116
    4e3e:	9b e4       	ldi	r25, 0x4B	; 75
    4e40:	3a d7       	rcall	.+3700   	; 0x5cb6 <__divsf3>
    4e42:	20 e0       	ldi	r18, 0x00	; 0
    4e44:	30 e0       	ldi	r19, 0x00	; 0
    4e46:	40 e8       	ldi	r20, 0x80	; 128
    4e48:	5f e3       	ldi	r21, 0x3F	; 63
    4e4a:	d0 d6       	rcall	.+3488   	; 0x5bec <__subsf3>
    4e4c:	a1 d7       	rcall	.+3906   	; 0x5d90 <__fixunssfsi>
    4e4e:	f4 01       	movw	r30, r8
    4e50:	32 97       	sbiw	r30, 0x02	; 2
    4e52:	60 83       	st	Z, r22
    4e54:	d8 01       	movw	r26, r16
    4e56:	ed 91       	ld	r30, X+
    4e58:	fc 91       	ld	r31, X
    4e5a:	11 97       	sbiw	r26, 0x01	; 1
    4e5c:	35 97       	sbiw	r30, 0x05	; 5
    4e5e:	88 e9       	ldi	r24, 0x98	; 152
    4e60:	80 83       	st	Z, r24
    4e62:	ed 91       	ld	r30, X+
    4e64:	fc 91       	ld	r31, X
    4e66:	34 97       	sbiw	r30, 0x04	; 4
    4e68:	86 e0       	ldi	r24, 0x06	; 6
    4e6a:	80 83       	st	Z, r24
    4e6c:	ff be       	out	0x3f, r15	; 63
    4e6e:	c8 01       	movw	r24, r16
    4e70:	df 91       	pop	r29
    4e72:	cf 91       	pop	r28
    4e74:	1f 91       	pop	r17
    4e76:	0f 91       	pop	r16
    4e78:	ff 90       	pop	r15
    4e7a:	ef 90       	pop	r14
    4e7c:	cf 90       	pop	r12
    4e7e:	af 90       	pop	r10
    4e80:	9f 90       	pop	r9
    4e82:	8f 90       	pop	r8
    4e84:	7f 90       	pop	r7
    4e86:	6f 90       	pop	r6
    4e88:	5f 90       	pop	r5
    4e8a:	4f 90       	pop	r4
    4e8c:	3f 90       	pop	r3
    4e8e:	2f 90       	pop	r2
    4e90:	08 95       	ret

00004e92 <serial_sendByte>:
    4e92:	cf 93       	push	r28
    4e94:	df 93       	push	r29
    4e96:	dc 01       	movw	r26, r24
    4e98:	89 2b       	or	r24, r25
    4e9a:	01 f1       	breq	.+64     	; 0x4edc <serial_sendByte+0x4a>
    4e9c:	12 96       	adiw	r26, 0x02	; 2
    4e9e:	ed 91       	ld	r30, X+
    4ea0:	fc 91       	ld	r31, X
    4ea2:	13 97       	sbiw	r26, 0x03	; 3
    4ea4:	93 81       	ldd	r25, Z+3	; 0x03
    4ea6:	82 81       	ldd	r24, Z+2	; 0x02
    4ea8:	25 81       	ldd	r18, Z+5	; 0x05
    4eaa:	98 1b       	sub	r25, r24
    4eac:	92 23       	and	r25, r18
    4eae:	84 81       	ldd	r24, Z+4	; 0x04
    4eb0:	98 17       	cp	r25, r24
    4eb2:	b1 f0       	breq	.+44     	; 0x4ee0 <serial_sendByte+0x4e>
    4eb4:	83 81       	ldd	r24, Z+3	; 0x03
    4eb6:	26 95       	lsr	r18
    4eb8:	28 23       	and	r18, r24
    4eba:	c0 81       	ld	r28, Z
    4ebc:	d1 81       	ldd	r29, Z+1	; 0x01
    4ebe:	c2 0f       	add	r28, r18
    4ec0:	d1 1d       	adc	r29, r1
    4ec2:	68 83       	st	Y, r22
    4ec4:	8f 5f       	subi	r24, 0xFF	; 255
    4ec6:	95 81       	ldd	r25, Z+5	; 0x05
    4ec8:	89 23       	and	r24, r25
    4eca:	83 83       	std	Z+3, r24	; 0x03
    4ecc:	ed 91       	ld	r30, X+
    4ece:	fc 91       	ld	r31, X
    4ed0:	35 97       	sbiw	r30, 0x05	; 5
    4ed2:	80 81       	ld	r24, Z
    4ed4:	80 62       	ori	r24, 0x20	; 32
    4ed6:	80 83       	st	Z, r24
    4ed8:	80 e0       	ldi	r24, 0x00	; 0
    4eda:	03 c0       	rjmp	.+6      	; 0x4ee2 <serial_sendByte+0x50>
    4edc:	81 e0       	ldi	r24, 0x01	; 1
    4ede:	01 c0       	rjmp	.+2      	; 0x4ee2 <serial_sendByte+0x50>
    4ee0:	82 e0       	ldi	r24, 0x02	; 2
    4ee2:	df 91       	pop	r29
    4ee4:	cf 91       	pop	r28
    4ee6:	08 95       	ret

00004ee8 <serial_sendBytes>:
    4ee8:	ef 92       	push	r14
    4eea:	ff 92       	push	r15
    4eec:	0f 93       	push	r16
    4eee:	1f 93       	push	r17
    4ef0:	cf 93       	push	r28
    4ef2:	df 93       	push	r29
    4ef4:	7c 01       	movw	r14, r24
    4ef6:	00 97       	sbiw	r24, 0x00	; 0
    4ef8:	09 f4       	brne	.+2      	; 0x4efc <serial_sendBytes+0x14>
    4efa:	41 c0       	rjmp	.+130    	; 0x4f7e <serial_sendBytes+0x96>
    4efc:	dc 01       	movw	r26, r24
    4efe:	12 96       	adiw	r26, 0x02	; 2
    4f00:	ed 91       	ld	r30, X+
    4f02:	fc 91       	ld	r31, X
    4f04:	13 97       	sbiw	r26, 0x03	; 3
    4f06:	93 81       	ldd	r25, Z+3	; 0x03
    4f08:	82 81       	ldd	r24, Z+2	; 0x02
    4f0a:	98 1b       	sub	r25, r24
    4f0c:	85 81       	ldd	r24, Z+5	; 0x05
    4f0e:	98 23       	and	r25, r24
    4f10:	84 81       	ldd	r24, Z+4	; 0x04
    4f12:	89 1b       	sub	r24, r25
    4f14:	86 17       	cp	r24, r22
    4f16:	a8 f1       	brcs	.+106    	; 0x4f82 <serial_sendBytes+0x9a>
    4f18:	66 23       	and	r22, r22
    4f1a:	41 f1       	breq	.+80     	; 0x4f6c <serial_sendBytes+0x84>
    4f1c:	84 2f       	mov	r24, r20
    4f1e:	95 2f       	mov	r25, r21
    4f20:	dc 01       	movw	r26, r24
    4f22:	61 50       	subi	r22, 0x01	; 1
    4f24:	46 2f       	mov	r20, r22
    4f26:	50 e0       	ldi	r21, 0x00	; 0
    4f28:	4f 5f       	subi	r20, 0xFF	; 255
    4f2a:	5f 4f       	sbci	r21, 0xFF	; 255
    4f2c:	48 0f       	add	r20, r24
    4f2e:	59 1f       	adc	r21, r25
    4f30:	e7 01       	movw	r28, r14
    4f32:	ea 81       	ldd	r30, Y+2	; 0x02
    4f34:	fb 81       	ldd	r31, Y+3	; 0x03
    4f36:	93 81       	ldd	r25, Z+3	; 0x03
    4f38:	82 81       	ldd	r24, Z+2	; 0x02
    4f3a:	25 81       	ldd	r18, Z+5	; 0x05
    4f3c:	98 1b       	sub	r25, r24
    4f3e:	92 23       	and	r25, r18
    4f40:	84 81       	ldd	r24, Z+4	; 0x04
    4f42:	98 17       	cp	r25, r24
    4f44:	79 f0       	breq	.+30     	; 0x4f64 <serial_sendBytes+0x7c>
    4f46:	8c 91       	ld	r24, X
    4f48:	93 81       	ldd	r25, Z+3	; 0x03
    4f4a:	26 95       	lsr	r18
    4f4c:	29 23       	and	r18, r25
    4f4e:	60 81       	ld	r22, Z
    4f50:	71 81       	ldd	r23, Z+1	; 0x01
    4f52:	8b 01       	movw	r16, r22
    4f54:	02 0f       	add	r16, r18
    4f56:	11 1d       	adc	r17, r1
    4f58:	e8 01       	movw	r28, r16
    4f5a:	88 83       	st	Y, r24
    4f5c:	9f 5f       	subi	r25, 0xFF	; 255
    4f5e:	85 81       	ldd	r24, Z+5	; 0x05
    4f60:	98 23       	and	r25, r24
    4f62:	93 83       	std	Z+3, r25	; 0x03
    4f64:	11 96       	adiw	r26, 0x01	; 1
    4f66:	a4 17       	cp	r26, r20
    4f68:	b5 07       	cpc	r27, r21
    4f6a:	11 f7       	brne	.-60     	; 0x4f30 <serial_sendBytes+0x48>
    4f6c:	d7 01       	movw	r26, r14
    4f6e:	ed 91       	ld	r30, X+
    4f70:	fc 91       	ld	r31, X
    4f72:	35 97       	sbiw	r30, 0x05	; 5
    4f74:	80 81       	ld	r24, Z
    4f76:	80 62       	ori	r24, 0x20	; 32
    4f78:	80 83       	st	Z, r24
    4f7a:	80 e0       	ldi	r24, 0x00	; 0
    4f7c:	03 c0       	rjmp	.+6      	; 0x4f84 <serial_sendBytes+0x9c>
    4f7e:	81 e0       	ldi	r24, 0x01	; 1
    4f80:	01 c0       	rjmp	.+2      	; 0x4f84 <serial_sendBytes+0x9c>
    4f82:	82 e0       	ldi	r24, 0x02	; 2
    4f84:	df 91       	pop	r29
    4f86:	cf 91       	pop	r28
    4f88:	1f 91       	pop	r17
    4f8a:	0f 91       	pop	r16
    4f8c:	ff 90       	pop	r15
    4f8e:	ef 90       	pop	r14
    4f90:	08 95       	ret

00004f92 <serial_getByte>:
    4f92:	00 97       	sbiw	r24, 0x00	; 0
    4f94:	d1 f0       	breq	.+52     	; 0x4fca <serial_getByte+0x38>
    4f96:	dc 01       	movw	r26, r24
    4f98:	14 96       	adiw	r26, 0x04	; 4
    4f9a:	ed 91       	ld	r30, X+
    4f9c:	fc 91       	ld	r31, X
    4f9e:	15 97       	sbiw	r26, 0x05	; 5
    4fa0:	93 81       	ldd	r25, Z+3	; 0x03
    4fa2:	82 81       	ldd	r24, Z+2	; 0x02
    4fa4:	98 17       	cp	r25, r24
    4fa6:	99 f0       	breq	.+38     	; 0x4fce <serial_getByte+0x3c>
    4fa8:	92 81       	ldd	r25, Z+2	; 0x02
    4faa:	85 81       	ldd	r24, Z+5	; 0x05
    4fac:	86 95       	lsr	r24
    4fae:	89 23       	and	r24, r25
    4fb0:	a0 81       	ld	r26, Z
    4fb2:	b1 81       	ldd	r27, Z+1	; 0x01
    4fb4:	a8 0f       	add	r26, r24
    4fb6:	b1 1d       	adc	r27, r1
    4fb8:	8c 91       	ld	r24, X
    4fba:	db 01       	movw	r26, r22
    4fbc:	8c 93       	st	X, r24
    4fbe:	9f 5f       	subi	r25, 0xFF	; 255
    4fc0:	85 81       	ldd	r24, Z+5	; 0x05
    4fc2:	98 23       	and	r25, r24
    4fc4:	92 83       	std	Z+2, r25	; 0x02
    4fc6:	80 e0       	ldi	r24, 0x00	; 0
    4fc8:	08 95       	ret
    4fca:	81 e0       	ldi	r24, 0x01	; 1
    4fcc:	08 95       	ret
    4fce:	83 e0       	ldi	r24, 0x03	; 3
    4fd0:	08 95       	ret

00004fd2 <__vector_25>:
    4fd2:	1f 92       	push	r1
    4fd4:	0f 92       	push	r0
    4fd6:	0f b6       	in	r0, 0x3f	; 63
    4fd8:	0f 92       	push	r0
    4fda:	11 24       	eor	r1, r1
    4fdc:	0b b6       	in	r0, 0x3b	; 59
    4fde:	0f 92       	push	r0
    4fe0:	2f 93       	push	r18
    4fe2:	3f 93       	push	r19
    4fe4:	4f 93       	push	r20
    4fe6:	5f 93       	push	r21
    4fe8:	6f 93       	push	r22
    4fea:	7f 93       	push	r23
    4fec:	8f 93       	push	r24
    4fee:	9f 93       	push	r25
    4ff0:	af 93       	push	r26
    4ff2:	bf 93       	push	r27
    4ff4:	cf 93       	push	r28
    4ff6:	df 93       	push	r29
    4ff8:	ef 93       	push	r30
    4ffa:	ff 93       	push	r31
    4ffc:	a0 91 ae 17 	lds	r26, 0x17AE	; 0x8017ae <_ser_handle>
    5000:	b0 91 af 17 	lds	r27, 0x17AF	; 0x8017af <_ser_handle+0x1>
    5004:	10 97       	sbiw	r26, 0x00	; 0
    5006:	11 f1       	breq	.+68     	; 0x504c <__vector_25+0x7a>
    5008:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    500c:	14 96       	adiw	r26, 0x04	; 4
    500e:	ed 91       	ld	r30, X+
    5010:	fc 91       	ld	r31, X
    5012:	15 97       	sbiw	r26, 0x05	; 5
    5014:	93 81       	ldd	r25, Z+3	; 0x03
    5016:	82 81       	ldd	r24, Z+2	; 0x02
    5018:	25 81       	ldd	r18, Z+5	; 0x05
    501a:	98 1b       	sub	r25, r24
    501c:	92 23       	and	r25, r18
    501e:	84 81       	ldd	r24, Z+4	; 0x04
    5020:	98 17       	cp	r25, r24
    5022:	61 f0       	breq	.+24     	; 0x503c <__vector_25+0x6a>
    5024:	83 81       	ldd	r24, Z+3	; 0x03
    5026:	26 95       	lsr	r18
    5028:	28 23       	and	r18, r24
    502a:	c0 81       	ld	r28, Z
    502c:	d1 81       	ldd	r29, Z+1	; 0x01
    502e:	c2 0f       	add	r28, r18
    5030:	d1 1d       	adc	r29, r1
    5032:	68 83       	st	Y, r22
    5034:	8f 5f       	subi	r24, 0xFF	; 255
    5036:	95 81       	ldd	r25, Z+5	; 0x05
    5038:	89 23       	and	r24, r25
    503a:	83 83       	std	Z+3, r24	; 0x03
    503c:	16 96       	adiw	r26, 0x06	; 6
    503e:	ed 91       	ld	r30, X+
    5040:	fc 91       	ld	r31, X
    5042:	17 97       	sbiw	r26, 0x07	; 7
    5044:	30 97       	sbiw	r30, 0x00	; 0
    5046:	11 f0       	breq	.+4      	; 0x504c <__vector_25+0x7a>
    5048:	cd 01       	movw	r24, r26
    504a:	19 95       	eicall
    504c:	ff 91       	pop	r31
    504e:	ef 91       	pop	r30
    5050:	df 91       	pop	r29
    5052:	cf 91       	pop	r28
    5054:	bf 91       	pop	r27
    5056:	af 91       	pop	r26
    5058:	9f 91       	pop	r25
    505a:	8f 91       	pop	r24
    505c:	7f 91       	pop	r23
    505e:	6f 91       	pop	r22
    5060:	5f 91       	pop	r21
    5062:	4f 91       	pop	r20
    5064:	3f 91       	pop	r19
    5066:	2f 91       	pop	r18
    5068:	0f 90       	pop	r0
    506a:	0b be       	out	0x3b, r0	; 59
    506c:	0f 90       	pop	r0
    506e:	0f be       	out	0x3f, r0	; 63
    5070:	0f 90       	pop	r0
    5072:	1f 90       	pop	r1
    5074:	18 95       	reti

00005076 <__vector_26>:
    5076:	1f 92       	push	r1
    5078:	0f 92       	push	r0
    507a:	0f b6       	in	r0, 0x3f	; 63
    507c:	0f 92       	push	r0
    507e:	11 24       	eor	r1, r1
    5080:	0b b6       	in	r0, 0x3b	; 59
    5082:	0f 92       	push	r0
    5084:	2f 93       	push	r18
    5086:	8f 93       	push	r24
    5088:	9f 93       	push	r25
    508a:	af 93       	push	r26
    508c:	bf 93       	push	r27
    508e:	ef 93       	push	r30
    5090:	ff 93       	push	r31
    5092:	e0 91 ae 17 	lds	r30, 0x17AE	; 0x8017ae <_ser_handle>
    5096:	f0 91 af 17 	lds	r31, 0x17AF	; 0x8017af <_ser_handle+0x1>
    509a:	30 97       	sbiw	r30, 0x00	; 0
    509c:	b9 f0       	breq	.+46     	; 0x50cc <__vector_26+0x56>
    509e:	02 80       	ldd	r0, Z+2	; 0x02
    50a0:	f3 81       	ldd	r31, Z+3	; 0x03
    50a2:	e0 2d       	mov	r30, r0
    50a4:	93 81       	ldd	r25, Z+3	; 0x03
    50a6:	82 81       	ldd	r24, Z+2	; 0x02
    50a8:	98 17       	cp	r25, r24
    50aa:	b1 f0       	breq	.+44     	; 0x50d8 <__vector_26+0x62>
    50ac:	92 81       	ldd	r25, Z+2	; 0x02
    50ae:	85 81       	ldd	r24, Z+5	; 0x05
    50b0:	28 2f       	mov	r18, r24
    50b2:	26 95       	lsr	r18
    50b4:	29 23       	and	r18, r25
    50b6:	a0 81       	ld	r26, Z
    50b8:	b1 81       	ldd	r27, Z+1	; 0x01
    50ba:	a2 0f       	add	r26, r18
    50bc:	b1 1d       	adc	r27, r1
    50be:	2c 91       	ld	r18, X
    50c0:	9f 5f       	subi	r25, 0xFF	; 255
    50c2:	89 23       	and	r24, r25
    50c4:	82 83       	std	Z+2, r24	; 0x02
    50c6:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    50ca:	0b c0       	rjmp	.+22     	; 0x50e2 <__vector_26+0x6c>
    50cc:	e1 ec       	ldi	r30, 0xC1	; 193
    50ce:	f0 e0       	ldi	r31, 0x00	; 0
    50d0:	80 81       	ld	r24, Z
    50d2:	8f 7d       	andi	r24, 0xDF	; 223
    50d4:	80 83       	st	Z, r24
    50d6:	05 c0       	rjmp	.+10     	; 0x50e2 <__vector_26+0x6c>
    50d8:	e1 ec       	ldi	r30, 0xC1	; 193
    50da:	f0 e0       	ldi	r31, 0x00	; 0
    50dc:	80 81       	ld	r24, Z
    50de:	8f 7d       	andi	r24, 0xDF	; 223
    50e0:	80 83       	st	Z, r24
    50e2:	ff 91       	pop	r31
    50e4:	ef 91       	pop	r30
    50e6:	bf 91       	pop	r27
    50e8:	af 91       	pop	r26
    50ea:	9f 91       	pop	r25
    50ec:	8f 91       	pop	r24
    50ee:	2f 91       	pop	r18
    50f0:	0f 90       	pop	r0
    50f2:	0b be       	out	0x3b, r0	; 59
    50f4:	0f 90       	pop	r0
    50f6:	0f be       	out	0x3f, r0	; 63
    50f8:	0f 90       	pop	r0
    50fa:	1f 90       	pop	r1
    50fc:	18 95       	reti

000050fe <__vector_36>:
    50fe:	1f 92       	push	r1
    5100:	0f 92       	push	r0
    5102:	0f b6       	in	r0, 0x3f	; 63
    5104:	0f 92       	push	r0
    5106:	11 24       	eor	r1, r1
    5108:	0b b6       	in	r0, 0x3b	; 59
    510a:	0f 92       	push	r0
    510c:	2f 93       	push	r18
    510e:	3f 93       	push	r19
    5110:	4f 93       	push	r20
    5112:	5f 93       	push	r21
    5114:	6f 93       	push	r22
    5116:	7f 93       	push	r23
    5118:	8f 93       	push	r24
    511a:	9f 93       	push	r25
    511c:	af 93       	push	r26
    511e:	bf 93       	push	r27
    5120:	cf 93       	push	r28
    5122:	df 93       	push	r29
    5124:	ef 93       	push	r30
    5126:	ff 93       	push	r31
    5128:	a0 91 b0 17 	lds	r26, 0x17B0	; 0x8017b0 <_ser_handle+0x2>
    512c:	b0 91 b1 17 	lds	r27, 0x17B1	; 0x8017b1 <_ser_handle+0x3>
    5130:	10 97       	sbiw	r26, 0x00	; 0
    5132:	11 f1       	breq	.+68     	; 0x5178 <__vector_36+0x7a>
    5134:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5138:	14 96       	adiw	r26, 0x04	; 4
    513a:	ed 91       	ld	r30, X+
    513c:	fc 91       	ld	r31, X
    513e:	15 97       	sbiw	r26, 0x05	; 5
    5140:	93 81       	ldd	r25, Z+3	; 0x03
    5142:	82 81       	ldd	r24, Z+2	; 0x02
    5144:	25 81       	ldd	r18, Z+5	; 0x05
    5146:	98 1b       	sub	r25, r24
    5148:	92 23       	and	r25, r18
    514a:	84 81       	ldd	r24, Z+4	; 0x04
    514c:	98 17       	cp	r25, r24
    514e:	61 f0       	breq	.+24     	; 0x5168 <__vector_36+0x6a>
    5150:	83 81       	ldd	r24, Z+3	; 0x03
    5152:	26 95       	lsr	r18
    5154:	28 23       	and	r18, r24
    5156:	c0 81       	ld	r28, Z
    5158:	d1 81       	ldd	r29, Z+1	; 0x01
    515a:	c2 0f       	add	r28, r18
    515c:	d1 1d       	adc	r29, r1
    515e:	68 83       	st	Y, r22
    5160:	8f 5f       	subi	r24, 0xFF	; 255
    5162:	95 81       	ldd	r25, Z+5	; 0x05
    5164:	89 23       	and	r24, r25
    5166:	83 83       	std	Z+3, r24	; 0x03
    5168:	16 96       	adiw	r26, 0x06	; 6
    516a:	ed 91       	ld	r30, X+
    516c:	fc 91       	ld	r31, X
    516e:	17 97       	sbiw	r26, 0x07	; 7
    5170:	30 97       	sbiw	r30, 0x00	; 0
    5172:	11 f0       	breq	.+4      	; 0x5178 <__vector_36+0x7a>
    5174:	cd 01       	movw	r24, r26
    5176:	19 95       	eicall
    5178:	ff 91       	pop	r31
    517a:	ef 91       	pop	r30
    517c:	df 91       	pop	r29
    517e:	cf 91       	pop	r28
    5180:	bf 91       	pop	r27
    5182:	af 91       	pop	r26
    5184:	9f 91       	pop	r25
    5186:	8f 91       	pop	r24
    5188:	7f 91       	pop	r23
    518a:	6f 91       	pop	r22
    518c:	5f 91       	pop	r21
    518e:	4f 91       	pop	r20
    5190:	3f 91       	pop	r19
    5192:	2f 91       	pop	r18
    5194:	0f 90       	pop	r0
    5196:	0b be       	out	0x3b, r0	; 59
    5198:	0f 90       	pop	r0
    519a:	0f be       	out	0x3f, r0	; 63
    519c:	0f 90       	pop	r0
    519e:	1f 90       	pop	r1
    51a0:	18 95       	reti

000051a2 <__vector_37>:
    51a2:	1f 92       	push	r1
    51a4:	0f 92       	push	r0
    51a6:	0f b6       	in	r0, 0x3f	; 63
    51a8:	0f 92       	push	r0
    51aa:	11 24       	eor	r1, r1
    51ac:	0b b6       	in	r0, 0x3b	; 59
    51ae:	0f 92       	push	r0
    51b0:	2f 93       	push	r18
    51b2:	8f 93       	push	r24
    51b4:	9f 93       	push	r25
    51b6:	af 93       	push	r26
    51b8:	bf 93       	push	r27
    51ba:	ef 93       	push	r30
    51bc:	ff 93       	push	r31
    51be:	e0 91 b0 17 	lds	r30, 0x17B0	; 0x8017b0 <_ser_handle+0x2>
    51c2:	f0 91 b1 17 	lds	r31, 0x17B1	; 0x8017b1 <_ser_handle+0x3>
    51c6:	30 97       	sbiw	r30, 0x00	; 0
    51c8:	b9 f0       	breq	.+46     	; 0x51f8 <__vector_37+0x56>
    51ca:	02 80       	ldd	r0, Z+2	; 0x02
    51cc:	f3 81       	ldd	r31, Z+3	; 0x03
    51ce:	e0 2d       	mov	r30, r0
    51d0:	93 81       	ldd	r25, Z+3	; 0x03
    51d2:	82 81       	ldd	r24, Z+2	; 0x02
    51d4:	98 17       	cp	r25, r24
    51d6:	b1 f0       	breq	.+44     	; 0x5204 <__vector_37+0x62>
    51d8:	92 81       	ldd	r25, Z+2	; 0x02
    51da:	85 81       	ldd	r24, Z+5	; 0x05
    51dc:	28 2f       	mov	r18, r24
    51de:	26 95       	lsr	r18
    51e0:	29 23       	and	r18, r25
    51e2:	a0 81       	ld	r26, Z
    51e4:	b1 81       	ldd	r27, Z+1	; 0x01
    51e6:	a2 0f       	add	r26, r18
    51e8:	b1 1d       	adc	r27, r1
    51ea:	2c 91       	ld	r18, X
    51ec:	9f 5f       	subi	r25, 0xFF	; 255
    51ee:	89 23       	and	r24, r25
    51f0:	82 83       	std	Z+2, r24	; 0x02
    51f2:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    51f6:	0b c0       	rjmp	.+22     	; 0x520e <__vector_37+0x6c>
    51f8:	e9 ec       	ldi	r30, 0xC9	; 201
    51fa:	f0 e0       	ldi	r31, 0x00	; 0
    51fc:	80 81       	ld	r24, Z
    51fe:	8f 7d       	andi	r24, 0xDF	; 223
    5200:	80 83       	st	Z, r24
    5202:	05 c0       	rjmp	.+10     	; 0x520e <__vector_37+0x6c>
    5204:	e9 ec       	ldi	r30, 0xC9	; 201
    5206:	f0 e0       	ldi	r31, 0x00	; 0
    5208:	80 81       	ld	r24, Z
    520a:	8f 7d       	andi	r24, 0xDF	; 223
    520c:	80 83       	st	Z, r24
    520e:	ff 91       	pop	r31
    5210:	ef 91       	pop	r30
    5212:	bf 91       	pop	r27
    5214:	af 91       	pop	r26
    5216:	9f 91       	pop	r25
    5218:	8f 91       	pop	r24
    521a:	2f 91       	pop	r18
    521c:	0f 90       	pop	r0
    521e:	0b be       	out	0x3b, r0	; 59
    5220:	0f 90       	pop	r0
    5222:	0f be       	out	0x3f, r0	; 63
    5224:	0f 90       	pop	r0
    5226:	1f 90       	pop	r1
    5228:	18 95       	reti

0000522a <__vector_51>:
    522a:	1f 92       	push	r1
    522c:	0f 92       	push	r0
    522e:	0f b6       	in	r0, 0x3f	; 63
    5230:	0f 92       	push	r0
    5232:	11 24       	eor	r1, r1
    5234:	0b b6       	in	r0, 0x3b	; 59
    5236:	0f 92       	push	r0
    5238:	2f 93       	push	r18
    523a:	3f 93       	push	r19
    523c:	4f 93       	push	r20
    523e:	5f 93       	push	r21
    5240:	6f 93       	push	r22
    5242:	7f 93       	push	r23
    5244:	8f 93       	push	r24
    5246:	9f 93       	push	r25
    5248:	af 93       	push	r26
    524a:	bf 93       	push	r27
    524c:	cf 93       	push	r28
    524e:	df 93       	push	r29
    5250:	ef 93       	push	r30
    5252:	ff 93       	push	r31
    5254:	a0 91 b2 17 	lds	r26, 0x17B2	; 0x8017b2 <_ser_handle+0x4>
    5258:	b0 91 b3 17 	lds	r27, 0x17B3	; 0x8017b3 <_ser_handle+0x5>
    525c:	10 97       	sbiw	r26, 0x00	; 0
    525e:	11 f1       	breq	.+68     	; 0x52a4 <__vector_51+0x7a>
    5260:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5264:	14 96       	adiw	r26, 0x04	; 4
    5266:	ed 91       	ld	r30, X+
    5268:	fc 91       	ld	r31, X
    526a:	15 97       	sbiw	r26, 0x05	; 5
    526c:	93 81       	ldd	r25, Z+3	; 0x03
    526e:	82 81       	ldd	r24, Z+2	; 0x02
    5270:	25 81       	ldd	r18, Z+5	; 0x05
    5272:	98 1b       	sub	r25, r24
    5274:	92 23       	and	r25, r18
    5276:	84 81       	ldd	r24, Z+4	; 0x04
    5278:	98 17       	cp	r25, r24
    527a:	61 f0       	breq	.+24     	; 0x5294 <__vector_51+0x6a>
    527c:	83 81       	ldd	r24, Z+3	; 0x03
    527e:	26 95       	lsr	r18
    5280:	28 23       	and	r18, r24
    5282:	c0 81       	ld	r28, Z
    5284:	d1 81       	ldd	r29, Z+1	; 0x01
    5286:	c2 0f       	add	r28, r18
    5288:	d1 1d       	adc	r29, r1
    528a:	68 83       	st	Y, r22
    528c:	8f 5f       	subi	r24, 0xFF	; 255
    528e:	95 81       	ldd	r25, Z+5	; 0x05
    5290:	89 23       	and	r24, r25
    5292:	83 83       	std	Z+3, r24	; 0x03
    5294:	16 96       	adiw	r26, 0x06	; 6
    5296:	ed 91       	ld	r30, X+
    5298:	fc 91       	ld	r31, X
    529a:	17 97       	sbiw	r26, 0x07	; 7
    529c:	30 97       	sbiw	r30, 0x00	; 0
    529e:	11 f0       	breq	.+4      	; 0x52a4 <__vector_51+0x7a>
    52a0:	cd 01       	movw	r24, r26
    52a2:	19 95       	eicall
    52a4:	ff 91       	pop	r31
    52a6:	ef 91       	pop	r30
    52a8:	df 91       	pop	r29
    52aa:	cf 91       	pop	r28
    52ac:	bf 91       	pop	r27
    52ae:	af 91       	pop	r26
    52b0:	9f 91       	pop	r25
    52b2:	8f 91       	pop	r24
    52b4:	7f 91       	pop	r23
    52b6:	6f 91       	pop	r22
    52b8:	5f 91       	pop	r21
    52ba:	4f 91       	pop	r20
    52bc:	3f 91       	pop	r19
    52be:	2f 91       	pop	r18
    52c0:	0f 90       	pop	r0
    52c2:	0b be       	out	0x3b, r0	; 59
    52c4:	0f 90       	pop	r0
    52c6:	0f be       	out	0x3f, r0	; 63
    52c8:	0f 90       	pop	r0
    52ca:	1f 90       	pop	r1
    52cc:	18 95       	reti

000052ce <__vector_52>:
    52ce:	1f 92       	push	r1
    52d0:	0f 92       	push	r0
    52d2:	0f b6       	in	r0, 0x3f	; 63
    52d4:	0f 92       	push	r0
    52d6:	11 24       	eor	r1, r1
    52d8:	0b b6       	in	r0, 0x3b	; 59
    52da:	0f 92       	push	r0
    52dc:	2f 93       	push	r18
    52de:	8f 93       	push	r24
    52e0:	9f 93       	push	r25
    52e2:	af 93       	push	r26
    52e4:	bf 93       	push	r27
    52e6:	ef 93       	push	r30
    52e8:	ff 93       	push	r31
    52ea:	e0 91 b2 17 	lds	r30, 0x17B2	; 0x8017b2 <_ser_handle+0x4>
    52ee:	f0 91 b3 17 	lds	r31, 0x17B3	; 0x8017b3 <_ser_handle+0x5>
    52f2:	30 97       	sbiw	r30, 0x00	; 0
    52f4:	b9 f0       	breq	.+46     	; 0x5324 <__vector_52+0x56>
    52f6:	02 80       	ldd	r0, Z+2	; 0x02
    52f8:	f3 81       	ldd	r31, Z+3	; 0x03
    52fa:	e0 2d       	mov	r30, r0
    52fc:	93 81       	ldd	r25, Z+3	; 0x03
    52fe:	82 81       	ldd	r24, Z+2	; 0x02
    5300:	98 17       	cp	r25, r24
    5302:	b1 f0       	breq	.+44     	; 0x5330 <__vector_52+0x62>
    5304:	92 81       	ldd	r25, Z+2	; 0x02
    5306:	85 81       	ldd	r24, Z+5	; 0x05
    5308:	28 2f       	mov	r18, r24
    530a:	26 95       	lsr	r18
    530c:	29 23       	and	r18, r25
    530e:	a0 81       	ld	r26, Z
    5310:	b1 81       	ldd	r27, Z+1	; 0x01
    5312:	a2 0f       	add	r26, r18
    5314:	b1 1d       	adc	r27, r1
    5316:	2c 91       	ld	r18, X
    5318:	9f 5f       	subi	r25, 0xFF	; 255
    531a:	89 23       	and	r24, r25
    531c:	82 83       	std	Z+2, r24	; 0x02
    531e:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5322:	0b c0       	rjmp	.+22     	; 0x533a <__vector_52+0x6c>
    5324:	e1 ed       	ldi	r30, 0xD1	; 209
    5326:	f0 e0       	ldi	r31, 0x00	; 0
    5328:	80 81       	ld	r24, Z
    532a:	8f 7d       	andi	r24, 0xDF	; 223
    532c:	80 83       	st	Z, r24
    532e:	05 c0       	rjmp	.+10     	; 0x533a <__vector_52+0x6c>
    5330:	e1 ed       	ldi	r30, 0xD1	; 209
    5332:	f0 e0       	ldi	r31, 0x00	; 0
    5334:	80 81       	ld	r24, Z
    5336:	8f 7d       	andi	r24, 0xDF	; 223
    5338:	80 83       	st	Z, r24
    533a:	ff 91       	pop	r31
    533c:	ef 91       	pop	r30
    533e:	bf 91       	pop	r27
    5340:	af 91       	pop	r26
    5342:	9f 91       	pop	r25
    5344:	8f 91       	pop	r24
    5346:	2f 91       	pop	r18
    5348:	0f 90       	pop	r0
    534a:	0b be       	out	0x3b, r0	; 59
    534c:	0f 90       	pop	r0
    534e:	0f be       	out	0x3f, r0	; 63
    5350:	0f 90       	pop	r0
    5352:	1f 90       	pop	r1
    5354:	18 95       	reti

00005356 <__vector_54>:
    5356:	1f 92       	push	r1
    5358:	0f 92       	push	r0
    535a:	0f b6       	in	r0, 0x3f	; 63
    535c:	0f 92       	push	r0
    535e:	11 24       	eor	r1, r1
    5360:	0b b6       	in	r0, 0x3b	; 59
    5362:	0f 92       	push	r0
    5364:	2f 93       	push	r18
    5366:	3f 93       	push	r19
    5368:	4f 93       	push	r20
    536a:	5f 93       	push	r21
    536c:	6f 93       	push	r22
    536e:	7f 93       	push	r23
    5370:	8f 93       	push	r24
    5372:	9f 93       	push	r25
    5374:	af 93       	push	r26
    5376:	bf 93       	push	r27
    5378:	cf 93       	push	r28
    537a:	df 93       	push	r29
    537c:	ef 93       	push	r30
    537e:	ff 93       	push	r31
    5380:	a0 91 b4 17 	lds	r26, 0x17B4	; 0x8017b4 <_ser_handle+0x6>
    5384:	b0 91 b5 17 	lds	r27, 0x17B5	; 0x8017b5 <_ser_handle+0x7>
    5388:	10 97       	sbiw	r26, 0x00	; 0
    538a:	11 f1       	breq	.+68     	; 0x53d0 <__vector_54+0x7a>
    538c:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5390:	14 96       	adiw	r26, 0x04	; 4
    5392:	ed 91       	ld	r30, X+
    5394:	fc 91       	ld	r31, X
    5396:	15 97       	sbiw	r26, 0x05	; 5
    5398:	93 81       	ldd	r25, Z+3	; 0x03
    539a:	82 81       	ldd	r24, Z+2	; 0x02
    539c:	25 81       	ldd	r18, Z+5	; 0x05
    539e:	98 1b       	sub	r25, r24
    53a0:	92 23       	and	r25, r18
    53a2:	84 81       	ldd	r24, Z+4	; 0x04
    53a4:	98 17       	cp	r25, r24
    53a6:	61 f0       	breq	.+24     	; 0x53c0 <__vector_54+0x6a>
    53a8:	83 81       	ldd	r24, Z+3	; 0x03
    53aa:	26 95       	lsr	r18
    53ac:	28 23       	and	r18, r24
    53ae:	c0 81       	ld	r28, Z
    53b0:	d1 81       	ldd	r29, Z+1	; 0x01
    53b2:	c2 0f       	add	r28, r18
    53b4:	d1 1d       	adc	r29, r1
    53b6:	68 83       	st	Y, r22
    53b8:	8f 5f       	subi	r24, 0xFF	; 255
    53ba:	95 81       	ldd	r25, Z+5	; 0x05
    53bc:	89 23       	and	r24, r25
    53be:	83 83       	std	Z+3, r24	; 0x03
    53c0:	16 96       	adiw	r26, 0x06	; 6
    53c2:	ed 91       	ld	r30, X+
    53c4:	fc 91       	ld	r31, X
    53c6:	17 97       	sbiw	r26, 0x07	; 7
    53c8:	30 97       	sbiw	r30, 0x00	; 0
    53ca:	11 f0       	breq	.+4      	; 0x53d0 <__vector_54+0x7a>
    53cc:	cd 01       	movw	r24, r26
    53ce:	19 95       	eicall
    53d0:	ff 91       	pop	r31
    53d2:	ef 91       	pop	r30
    53d4:	df 91       	pop	r29
    53d6:	cf 91       	pop	r28
    53d8:	bf 91       	pop	r27
    53da:	af 91       	pop	r26
    53dc:	9f 91       	pop	r25
    53de:	8f 91       	pop	r24
    53e0:	7f 91       	pop	r23
    53e2:	6f 91       	pop	r22
    53e4:	5f 91       	pop	r21
    53e6:	4f 91       	pop	r20
    53e8:	3f 91       	pop	r19
    53ea:	2f 91       	pop	r18
    53ec:	0f 90       	pop	r0
    53ee:	0b be       	out	0x3b, r0	; 59
    53f0:	0f 90       	pop	r0
    53f2:	0f be       	out	0x3f, r0	; 63
    53f4:	0f 90       	pop	r0
    53f6:	1f 90       	pop	r1
    53f8:	18 95       	reti

000053fa <__vector_55>:
    53fa:	1f 92       	push	r1
    53fc:	0f 92       	push	r0
    53fe:	0f b6       	in	r0, 0x3f	; 63
    5400:	0f 92       	push	r0
    5402:	11 24       	eor	r1, r1
    5404:	0b b6       	in	r0, 0x3b	; 59
    5406:	0f 92       	push	r0
    5408:	2f 93       	push	r18
    540a:	8f 93       	push	r24
    540c:	9f 93       	push	r25
    540e:	af 93       	push	r26
    5410:	bf 93       	push	r27
    5412:	ef 93       	push	r30
    5414:	ff 93       	push	r31
    5416:	e0 91 b4 17 	lds	r30, 0x17B4	; 0x8017b4 <_ser_handle+0x6>
    541a:	f0 91 b5 17 	lds	r31, 0x17B5	; 0x8017b5 <_ser_handle+0x7>
    541e:	30 97       	sbiw	r30, 0x00	; 0
    5420:	b9 f0       	breq	.+46     	; 0x5450 <__vector_55+0x56>
    5422:	02 80       	ldd	r0, Z+2	; 0x02
    5424:	f3 81       	ldd	r31, Z+3	; 0x03
    5426:	e0 2d       	mov	r30, r0
    5428:	93 81       	ldd	r25, Z+3	; 0x03
    542a:	82 81       	ldd	r24, Z+2	; 0x02
    542c:	98 17       	cp	r25, r24
    542e:	b1 f0       	breq	.+44     	; 0x545c <__vector_55+0x62>
    5430:	92 81       	ldd	r25, Z+2	; 0x02
    5432:	85 81       	ldd	r24, Z+5	; 0x05
    5434:	28 2f       	mov	r18, r24
    5436:	26 95       	lsr	r18
    5438:	29 23       	and	r18, r25
    543a:	a0 81       	ld	r26, Z
    543c:	b1 81       	ldd	r27, Z+1	; 0x01
    543e:	a2 0f       	add	r26, r18
    5440:	b1 1d       	adc	r27, r1
    5442:	2c 91       	ld	r18, X
    5444:	9f 5f       	subi	r25, 0xFF	; 255
    5446:	89 23       	and	r24, r25
    5448:	82 83       	std	Z+2, r24	; 0x02
    544a:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    544e:	0b c0       	rjmp	.+22     	; 0x5466 <__vector_55+0x6c>
    5450:	e1 e3       	ldi	r30, 0x31	; 49
    5452:	f1 e0       	ldi	r31, 0x01	; 1
    5454:	80 81       	ld	r24, Z
    5456:	8f 7d       	andi	r24, 0xDF	; 223
    5458:	80 83       	st	Z, r24
    545a:	05 c0       	rjmp	.+10     	; 0x5466 <__vector_55+0x6c>
    545c:	e1 e3       	ldi	r30, 0x31	; 49
    545e:	f1 e0       	ldi	r31, 0x01	; 1
    5460:	80 81       	ld	r24, Z
    5462:	8f 7d       	andi	r24, 0xDF	; 223
    5464:	80 83       	st	Z, r24
    5466:	ff 91       	pop	r31
    5468:	ef 91       	pop	r30
    546a:	bf 91       	pop	r27
    546c:	af 91       	pop	r26
    546e:	9f 91       	pop	r25
    5470:	8f 91       	pop	r24
    5472:	2f 91       	pop	r18
    5474:	0f 90       	pop	r0
    5476:	0b be       	out	0x3b, r0	; 59
    5478:	0f 90       	pop	r0
    547a:	0f be       	out	0x3f, r0	; 63
    547c:	0f 90       	pop	r0
    547e:	1f 90       	pop	r1
    5480:	18 95       	reti

00005482 <usart_getchar>:
    5482:	cf 93       	push	r28
    5484:	df 93       	push	r29
    5486:	1f 92       	push	r1
    5488:	cd b7       	in	r28, 0x3d	; 61
    548a:	de b7       	in	r29, 0x3e	; 62
    548c:	be 01       	movw	r22, r28
    548e:	6f 5f       	subi	r22, 0xFF	; 255
    5490:	7f 4f       	sbci	r23, 0xFF	; 255
    5492:	80 91 b6 17 	lds	r24, 0x17B6	; 0x8017b6 <_com_serial_instance>
    5496:	90 91 b7 17 	lds	r25, 0x17B7	; 0x8017b7 <_com_serial_instance+0x1>
    549a:	7b dd       	rcall	.-1290   	; 0x4f92 <serial_getByte>
    549c:	81 11       	cpse	r24, r1
    549e:	f6 cf       	rjmp	.-20     	; 0x548c <usart_getchar+0xa>
    54a0:	89 81       	ldd	r24, Y+1	; 0x01
    54a2:	90 e0       	ldi	r25, 0x00	; 0
    54a4:	0f 90       	pop	r0
    54a6:	df 91       	pop	r29
    54a8:	cf 91       	pop	r28
    54aa:	08 95       	ret

000054ac <usart_putchar>:
    54ac:	68 2f       	mov	r22, r24
    54ae:	80 91 b6 17 	lds	r24, 0x17B6	; 0x8017b6 <_com_serial_instance>
    54b2:	90 91 b7 17 	lds	r25, 0x17B7	; 0x8017b7 <_com_serial_instance+0x1>
    54b6:	ed dc       	rcall	.-1574   	; 0x4e92 <serial_sendByte>
    54b8:	80 e0       	ldi	r24, 0x00	; 0
    54ba:	90 e0       	ldi	r25, 0x00	; 0
    54bc:	08 95       	ret

000054be <stdio_initialise>:
    54be:	8f 92       	push	r8
    54c0:	9f 92       	push	r9
    54c2:	af 92       	push	r10
    54c4:	cf 92       	push	r12
    54c6:	ef 92       	push	r14
    54c8:	0f 93       	push	r16
    54ca:	81 2c       	mov	r8, r1
    54cc:	91 2c       	mov	r9, r1
    54ce:	68 94       	set
    54d0:	aa 24       	eor	r10, r10
    54d2:	a7 f8       	bld	r10, 7
    54d4:	68 94       	set
    54d6:	cc 24       	eor	r12, r12
    54d8:	c7 f8       	bld	r12, 7
    54da:	e1 2c       	mov	r14, r1
    54dc:	00 e0       	ldi	r16, 0x00	; 0
    54de:	23 e0       	ldi	r18, 0x03	; 3
    54e0:	40 e0       	ldi	r20, 0x00	; 0
    54e2:	51 ee       	ldi	r21, 0xE1	; 225
    54e4:	60 e0       	ldi	r22, 0x00	; 0
    54e6:	70 e0       	ldi	r23, 0x00	; 0
    54e8:	32 dc       	rcall	.-1948   	; 0x4d4e <serial_create>
    54ea:	90 93 b7 17 	sts	0x17B7, r25	; 0x8017b7 <_com_serial_instance+0x1>
    54ee:	80 93 b6 17 	sts	0x17B6, r24	; 0x8017b6 <_com_serial_instance>
    54f2:	e5 ef       	ldi	r30, 0xF5	; 245
    54f4:	f7 e1       	ldi	r31, 0x17	; 23
    54f6:	83 e1       	ldi	r24, 0x13	; 19
    54f8:	92 e0       	ldi	r25, 0x02	; 2
    54fa:	91 83       	std	Z+1, r25	; 0x01
    54fc:	80 83       	st	Z, r24
    54fe:	93 83       	std	Z+3, r25	; 0x03
    5500:	82 83       	std	Z+2, r24	; 0x02
    5502:	0f 91       	pop	r16
    5504:	ef 90       	pop	r14
    5506:	cf 90       	pop	r12
    5508:	af 90       	pop	r10
    550a:	9f 90       	pop	r9
    550c:	8f 90       	pop	r8
    550e:	08 95       	ret

00005510 <_turn_off>:
    5510:	90 e0       	ldi	r25, 0x00	; 0
    5512:	fc 01       	movw	r30, r24
    5514:	ee 0f       	add	r30, r30
    5516:	ff 1f       	adc	r31, r31
    5518:	e8 0f       	add	r30, r24
    551a:	f9 1f       	adc	r31, r25
    551c:	ee 0f       	add	r30, r30
    551e:	ff 1f       	adc	r31, r31
    5520:	e8 54       	subi	r30, 0x48	; 72
    5522:	f8 4e       	sbci	r31, 0xE8	; 232
    5524:	23 81       	ldd	r18, Z+3	; 0x03
    5526:	21 11       	cpse	r18, r1
    5528:	1f c0       	rjmp	.+62     	; 0x5568 <_turn_off+0x58>
    552a:	9c 01       	movw	r18, r24
    552c:	22 0f       	add	r18, r18
    552e:	33 1f       	adc	r19, r19
    5530:	f9 01       	movw	r30, r18
    5532:	e8 0f       	add	r30, r24
    5534:	f9 1f       	adc	r31, r25
    5536:	ee 0f       	add	r30, r30
    5538:	ff 1f       	adc	r31, r31
    553a:	e8 54       	subi	r30, 0x48	; 72
    553c:	f8 4e       	sbci	r31, 0xE8	; 232
    553e:	a0 81       	ld	r26, Z
    5540:	b1 81       	ldd	r27, Z+1	; 0x01
    5542:	4c 91       	ld	r20, X
    5544:	f9 01       	movw	r30, r18
    5546:	e8 0f       	add	r30, r24
    5548:	f9 1f       	adc	r31, r25
    554a:	ee 0f       	add	r30, r30
    554c:	ff 1f       	adc	r31, r31
    554e:	e8 54       	subi	r30, 0x48	; 72
    5550:	f8 4e       	sbci	r31, 0xE8	; 232
    5552:	81 e0       	ldi	r24, 0x01	; 1
    5554:	90 e0       	ldi	r25, 0x00	; 0
    5556:	02 80       	ldd	r0, Z+2	; 0x02
    5558:	02 c0       	rjmp	.+4      	; 0x555e <_turn_off+0x4e>
    555a:	88 0f       	add	r24, r24
    555c:	99 1f       	adc	r25, r25
    555e:	0a 94       	dec	r0
    5560:	e2 f7       	brpl	.-8      	; 0x555a <_turn_off+0x4a>
    5562:	84 2b       	or	r24, r20
    5564:	8c 93       	st	X, r24
    5566:	08 95       	ret
    5568:	fc 01       	movw	r30, r24
    556a:	ee 0f       	add	r30, r30
    556c:	ff 1f       	adc	r31, r31
    556e:	df 01       	movw	r26, r30
    5570:	a8 0f       	add	r26, r24
    5572:	b9 1f       	adc	r27, r25
    5574:	aa 0f       	add	r26, r26
    5576:	bb 1f       	adc	r27, r27
    5578:	a8 54       	subi	r26, 0x48	; 72
    557a:	b8 4e       	sbci	r27, 0xE8	; 232
    557c:	0d 90       	ld	r0, X+
    557e:	bc 91       	ld	r27, X
    5580:	a0 2d       	mov	r26, r0
    5582:	2c 91       	ld	r18, X
    5584:	e8 0f       	add	r30, r24
    5586:	f9 1f       	adc	r31, r25
    5588:	ee 0f       	add	r30, r30
    558a:	ff 1f       	adc	r31, r31
    558c:	e8 54       	subi	r30, 0x48	; 72
    558e:	f8 4e       	sbci	r31, 0xE8	; 232
    5590:	81 e0       	ldi	r24, 0x01	; 1
    5592:	90 e0       	ldi	r25, 0x00	; 0
    5594:	02 80       	ldd	r0, Z+2	; 0x02
    5596:	02 c0       	rjmp	.+4      	; 0x559c <_turn_off+0x8c>
    5598:	88 0f       	add	r24, r24
    559a:	99 1f       	adc	r25, r25
    559c:	0a 94       	dec	r0
    559e:	e2 f7       	brpl	.-8      	; 0x5598 <_turn_off+0x88>
    55a0:	80 95       	com	r24
    55a2:	82 23       	and	r24, r18
    55a4:	8c 93       	st	X, r24
    55a6:	08 95       	ret

000055a8 <_turn_on>:
    55a8:	90 e0       	ldi	r25, 0x00	; 0
    55aa:	fc 01       	movw	r30, r24
    55ac:	ee 0f       	add	r30, r30
    55ae:	ff 1f       	adc	r31, r31
    55b0:	e8 0f       	add	r30, r24
    55b2:	f9 1f       	adc	r31, r25
    55b4:	ee 0f       	add	r30, r30
    55b6:	ff 1f       	adc	r31, r31
    55b8:	e8 54       	subi	r30, 0x48	; 72
    55ba:	f8 4e       	sbci	r31, 0xE8	; 232
    55bc:	23 81       	ldd	r18, Z+3	; 0x03
    55be:	21 11       	cpse	r18, r1
    55c0:	20 c0       	rjmp	.+64     	; 0x5602 <_turn_on+0x5a>
    55c2:	9c 01       	movw	r18, r24
    55c4:	22 0f       	add	r18, r18
    55c6:	33 1f       	adc	r19, r19
    55c8:	f9 01       	movw	r30, r18
    55ca:	e8 0f       	add	r30, r24
    55cc:	f9 1f       	adc	r31, r25
    55ce:	ee 0f       	add	r30, r30
    55d0:	ff 1f       	adc	r31, r31
    55d2:	e8 54       	subi	r30, 0x48	; 72
    55d4:	f8 4e       	sbci	r31, 0xE8	; 232
    55d6:	a0 81       	ld	r26, Z
    55d8:	b1 81       	ldd	r27, Z+1	; 0x01
    55da:	4c 91       	ld	r20, X
    55dc:	f9 01       	movw	r30, r18
    55de:	e8 0f       	add	r30, r24
    55e0:	f9 1f       	adc	r31, r25
    55e2:	ee 0f       	add	r30, r30
    55e4:	ff 1f       	adc	r31, r31
    55e6:	e8 54       	subi	r30, 0x48	; 72
    55e8:	f8 4e       	sbci	r31, 0xE8	; 232
    55ea:	81 e0       	ldi	r24, 0x01	; 1
    55ec:	90 e0       	ldi	r25, 0x00	; 0
    55ee:	02 80       	ldd	r0, Z+2	; 0x02
    55f0:	02 c0       	rjmp	.+4      	; 0x55f6 <_turn_on+0x4e>
    55f2:	88 0f       	add	r24, r24
    55f4:	99 1f       	adc	r25, r25
    55f6:	0a 94       	dec	r0
    55f8:	e2 f7       	brpl	.-8      	; 0x55f2 <_turn_on+0x4a>
    55fa:	80 95       	com	r24
    55fc:	84 23       	and	r24, r20
    55fe:	8c 93       	st	X, r24
    5600:	08 95       	ret
    5602:	fc 01       	movw	r30, r24
    5604:	ee 0f       	add	r30, r30
    5606:	ff 1f       	adc	r31, r31
    5608:	df 01       	movw	r26, r30
    560a:	a8 0f       	add	r26, r24
    560c:	b9 1f       	adc	r27, r25
    560e:	aa 0f       	add	r26, r26
    5610:	bb 1f       	adc	r27, r27
    5612:	a8 54       	subi	r26, 0x48	; 72
    5614:	b8 4e       	sbci	r27, 0xE8	; 232
    5616:	0d 90       	ld	r0, X+
    5618:	bc 91       	ld	r27, X
    561a:	a0 2d       	mov	r26, r0
    561c:	2c 91       	ld	r18, X
    561e:	e8 0f       	add	r30, r24
    5620:	f9 1f       	adc	r31, r25
    5622:	ee 0f       	add	r30, r30
    5624:	ff 1f       	adc	r31, r31
    5626:	e8 54       	subi	r30, 0x48	; 72
    5628:	f8 4e       	sbci	r31, 0xE8	; 232
    562a:	81 e0       	ldi	r24, 0x01	; 1
    562c:	90 e0       	ldi	r25, 0x00	; 0
    562e:	02 80       	ldd	r0, Z+2	; 0x02
    5630:	02 c0       	rjmp	.+4      	; 0x5636 <_turn_on+0x8e>
    5632:	88 0f       	add	r24, r24
    5634:	99 1f       	adc	r25, r25
    5636:	0a 94       	dec	r0
    5638:	e2 f7       	brpl	.-8      	; 0x5632 <_turn_on+0x8a>
    563a:	82 2b       	or	r24, r18
    563c:	8c 93       	st	X, r24
    563e:	08 95       	ret

00005640 <_hal_led_task>:
    5640:	cc 24       	eor	r12, r12
    5642:	c3 94       	inc	r12
    5644:	d1 2c       	mov	r13, r1
    5646:	68 94       	set
    5648:	bb 24       	eor	r11, r11
    564a:	b2 f8       	bld	r11, 2
    564c:	c8 eb       	ldi	r28, 0xB8	; 184
    564e:	d7 e1       	ldi	r29, 0x17	; 23
    5650:	10 e0       	ldi	r17, 0x00	; 0
    5652:	8c 81       	ldd	r24, Y+4	; 0x04
    5654:	81 30       	cpi	r24, 0x01	; 1
    5656:	81 f0       	breq	.+32     	; 0x5678 <_hal_led_task+0x38>
    5658:	18 f1       	brcs	.+70     	; 0x56a0 <_hal_led_task+0x60>
    565a:	82 30       	cpi	r24, 0x02	; 2
    565c:	61 f5       	brne	.+88     	; 0x56b6 <_hal_led_task+0x76>
    565e:	e8 81       	ld	r30, Y
    5660:	f9 81       	ldd	r31, Y+1	; 0x01
    5662:	20 81       	ld	r18, Z
    5664:	c6 01       	movw	r24, r12
    5666:	0a 80       	ldd	r0, Y+2	; 0x02
    5668:	02 c0       	rjmp	.+4      	; 0x566e <_hal_led_task+0x2e>
    566a:	88 0f       	add	r24, r24
    566c:	99 1f       	adc	r25, r25
    566e:	0a 94       	dec	r0
    5670:	e2 f7       	brpl	.-8      	; 0x566a <_hal_led_task+0x2a>
    5672:	82 27       	eor	r24, r18
    5674:	80 83       	st	Z, r24
    5676:	1f c0       	rjmp	.+62     	; 0x56b6 <_hal_led_task+0x76>
    5678:	8d 81       	ldd	r24, Y+5	; 0x05
    567a:	8f 5f       	subi	r24, 0xFF	; 255
    567c:	8a 30       	cpi	r24, 0x0A	; 10
    567e:	10 f4       	brcc	.+4      	; 0x5684 <_hal_led_task+0x44>
    5680:	8d 83       	std	Y+5, r24	; 0x05
    5682:	19 c0       	rjmp	.+50     	; 0x56b6 <_hal_led_task+0x76>
    5684:	1d 82       	std	Y+5, r1	; 0x05
    5686:	e8 81       	ld	r30, Y
    5688:	f9 81       	ldd	r31, Y+1	; 0x01
    568a:	20 81       	ld	r18, Z
    568c:	c6 01       	movw	r24, r12
    568e:	0a 80       	ldd	r0, Y+2	; 0x02
    5690:	02 c0       	rjmp	.+4      	; 0x5696 <_hal_led_task+0x56>
    5692:	88 0f       	add	r24, r24
    5694:	99 1f       	adc	r25, r25
    5696:	0a 94       	dec	r0
    5698:	e2 f7       	brpl	.-8      	; 0x5692 <_hal_led_task+0x52>
    569a:	82 27       	eor	r24, r18
    569c:	80 83       	st	Z, r24
    569e:	0b c0       	rjmp	.+22     	; 0x56b6 <_hal_led_task+0x76>
    56a0:	0d 81       	ldd	r16, Y+5	; 0x05
    56a2:	00 23       	and	r16, r16
    56a4:	29 f0       	breq	.+10     	; 0x56b0 <_hal_led_task+0x70>
    56a6:	81 2f       	mov	r24, r17
    56a8:	7f df       	rcall	.-258    	; 0x55a8 <_turn_on>
    56aa:	01 50       	subi	r16, 0x01	; 1
    56ac:	0d 83       	std	Y+5, r16	; 0x05
    56ae:	03 c0       	rjmp	.+6      	; 0x56b6 <_hal_led_task+0x76>
    56b0:	bc 82       	std	Y+4, r11	; 0x04
    56b2:	81 2f       	mov	r24, r17
    56b4:	2d df       	rcall	.-422    	; 0x5510 <_turn_off>
    56b6:	1f 5f       	subi	r17, 0xFF	; 255
    56b8:	26 96       	adiw	r28, 0x06	; 6
    56ba:	14 30       	cpi	r17, 0x04	; 4
    56bc:	51 f6       	brne	.-108    	; 0x5652 <_hal_led_task+0x12>
    56be:	65 e0       	ldi	r22, 0x05	; 5
    56c0:	70 e0       	ldi	r23, 0x00	; 0
    56c2:	80 e0       	ldi	r24, 0x00	; 0
    56c4:	90 e0       	ldi	r25, 0x00	; 0
    56c6:	0e 94 84 13 	call	0x2708	; 0x2708 <vTaskDelay>
    56ca:	c0 cf       	rjmp	.-128    	; 0x564c <_hal_led_task+0xc>

000056cc <status_leds_initialise>:
    56cc:	ef 92       	push	r14
    56ce:	ff 92       	push	r15
    56d0:	0f 93       	push	r16
    56d2:	1f 93       	push	r17
    56d4:	cf 93       	push	r28
    56d6:	df 93       	push	r29
    56d8:	08 2f       	mov	r16, r24
    56da:	80 e4       	ldi	r24, 0x40	; 64
    56dc:	87 b9       	out	0x07, r24	; 7
    56de:	c8 eb       	ldi	r28, 0xB8	; 184
    56e0:	d7 e1       	ldi	r29, 0x17	; 23
    56e2:	0f 2e       	mov	r0, r31
    56e4:	f8 e2       	ldi	r31, 0x28	; 40
    56e6:	ef 2e       	mov	r14, r31
    56e8:	f1 2c       	mov	r15, r1
    56ea:	f0 2d       	mov	r31, r0
    56ec:	f9 82       	std	Y+1, r15	; 0x01
    56ee:	e8 82       	st	Y, r14
    56f0:	86 e0       	ldi	r24, 0x06	; 6
    56f2:	8a 83       	std	Y+2, r24	; 0x02
    56f4:	1b 82       	std	Y+3, r1	; 0x03
    56f6:	14 e0       	ldi	r17, 0x04	; 4
    56f8:	1c 83       	std	Y+4, r17	; 0x04
    56fa:	80 e0       	ldi	r24, 0x00	; 0
    56fc:	09 df       	rcall	.-494    	; 0x5510 <_turn_off>
    56fe:	80 e8       	ldi	r24, 0x80	; 128
    5700:	87 b9       	out	0x07, r24	; 7
    5702:	ff 82       	std	Y+7, r15	; 0x07
    5704:	ee 82       	std	Y+6, r14	; 0x06
    5706:	87 e0       	ldi	r24, 0x07	; 7
    5708:	88 87       	std	Y+8, r24	; 0x08
    570a:	19 86       	std	Y+9, r1	; 0x09
    570c:	1a 87       	std	Y+10, r17	; 0x0a
    570e:	81 e0       	ldi	r24, 0x01	; 1
    5710:	ff de       	rcall	.-514    	; 0x5510 <_turn_off>
    5712:	80 e2       	ldi	r24, 0x20	; 32
    5714:	83 bb       	out	0x13, r24	; 19
    5716:	84 e3       	ldi	r24, 0x34	; 52
    5718:	90 e0       	ldi	r25, 0x00	; 0
    571a:	9d 87       	std	Y+13, r25	; 0x0d
    571c:	8c 87       	std	Y+12, r24	; 0x0c
    571e:	85 e0       	ldi	r24, 0x05	; 5
    5720:	8e 87       	std	Y+14, r24	; 0x0e
    5722:	1f 86       	std	Y+15, r1	; 0x0f
    5724:	18 8b       	std	Y+16, r17	; 0x10
    5726:	82 e0       	ldi	r24, 0x02	; 2
    5728:	f3 de       	rcall	.-538    	; 0x5510 <_turn_off>
    572a:	80 e1       	ldi	r24, 0x10	; 16
    572c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    5730:	82 e0       	ldi	r24, 0x02	; 2
    5732:	91 e0       	ldi	r25, 0x01	; 1
    5734:	9b 8b       	std	Y+19, r25	; 0x13
    5736:	8a 8b       	std	Y+18, r24	; 0x12
    5738:	1c 8b       	std	Y+20, r17	; 0x14
    573a:	1d 8a       	std	Y+21, r1	; 0x15
    573c:	1e 8b       	std	Y+22, r17	; 0x16
    573e:	83 e0       	ldi	r24, 0x03	; 3
    5740:	e7 de       	rcall	.-562    	; 0x5510 <_turn_off>
    5742:	e1 2c       	mov	r14, r1
    5744:	f1 2c       	mov	r15, r1
    5746:	20 e0       	ldi	r18, 0x00	; 0
    5748:	30 e0       	ldi	r19, 0x00	; 0
    574a:	40 ec       	ldi	r20, 0xC0	; 192
    574c:	50 e0       	ldi	r21, 0x00	; 0
    574e:	60 e8       	ldi	r22, 0x80	; 128
    5750:	78 e0       	ldi	r23, 0x08	; 8
    5752:	80 e2       	ldi	r24, 0x20	; 32
    5754:	9b e2       	ldi	r25, 0x2B	; 43
    5756:	0e 94 7f 10 	call	0x20fe	; 0x20fe <xTaskCreate>
    575a:	df 91       	pop	r29
    575c:	cf 91       	pop	r28
    575e:	1f 91       	pop	r17
    5760:	0f 91       	pop	r16
    5762:	ff 90       	pop	r15
    5764:	ef 90       	pop	r14
    5766:	08 95       	ret

00005768 <status_leds_slowBlink>:
    5768:	cf 93       	push	r28
    576a:	df 93       	push	r29
    576c:	90 e0       	ldi	r25, 0x00	; 0
    576e:	fc 01       	movw	r30, r24
    5770:	ee 0f       	add	r30, r30
    5772:	ff 1f       	adc	r31, r31
    5774:	df 01       	movw	r26, r30
    5776:	a8 0f       	add	r26, r24
    5778:	b9 1f       	adc	r27, r25
    577a:	aa 0f       	add	r26, r26
    577c:	bb 1f       	adc	r27, r27
    577e:	a8 54       	subi	r26, 0x48	; 72
    5780:	b8 4e       	sbci	r27, 0xE8	; 232
    5782:	cd 91       	ld	r28, X+
    5784:	dc 91       	ld	r29, X
    5786:	11 97       	sbiw	r26, 0x01	; 1
    5788:	48 81       	ld	r20, Y
    578a:	21 e0       	ldi	r18, 0x01	; 1
    578c:	30 e0       	ldi	r19, 0x00	; 0
    578e:	12 96       	adiw	r26, 0x02	; 2
    5790:	0c 90       	ld	r0, X
    5792:	12 97       	sbiw	r26, 0x02	; 2
    5794:	02 c0       	rjmp	.+4      	; 0x579a <status_leds_slowBlink+0x32>
    5796:	22 0f       	add	r18, r18
    5798:	33 1f       	adc	r19, r19
    579a:	0a 94       	dec	r0
    579c:	e2 f7       	brpl	.-8      	; 0x5796 <status_leds_slowBlink+0x2e>
    579e:	24 27       	eor	r18, r20
    57a0:	28 83       	st	Y, r18
    57a2:	fd 01       	movw	r30, r26
    57a4:	81 e0       	ldi	r24, 0x01	; 1
    57a6:	84 83       	std	Z+4, r24	; 0x04
    57a8:	df 91       	pop	r29
    57aa:	cf 91       	pop	r28
    57ac:	08 95       	ret

000057ae <status_leds_fastBlink>:
    57ae:	cf 93       	push	r28
    57b0:	df 93       	push	r29
    57b2:	90 e0       	ldi	r25, 0x00	; 0
    57b4:	fc 01       	movw	r30, r24
    57b6:	ee 0f       	add	r30, r30
    57b8:	ff 1f       	adc	r31, r31
    57ba:	df 01       	movw	r26, r30
    57bc:	a8 0f       	add	r26, r24
    57be:	b9 1f       	adc	r27, r25
    57c0:	aa 0f       	add	r26, r26
    57c2:	bb 1f       	adc	r27, r27
    57c4:	a8 54       	subi	r26, 0x48	; 72
    57c6:	b8 4e       	sbci	r27, 0xE8	; 232
    57c8:	cd 91       	ld	r28, X+
    57ca:	dc 91       	ld	r29, X
    57cc:	11 97       	sbiw	r26, 0x01	; 1
    57ce:	48 81       	ld	r20, Y
    57d0:	21 e0       	ldi	r18, 0x01	; 1
    57d2:	30 e0       	ldi	r19, 0x00	; 0
    57d4:	12 96       	adiw	r26, 0x02	; 2
    57d6:	0c 90       	ld	r0, X
    57d8:	12 97       	sbiw	r26, 0x02	; 2
    57da:	02 c0       	rjmp	.+4      	; 0x57e0 <status_leds_fastBlink+0x32>
    57dc:	22 0f       	add	r18, r18
    57de:	33 1f       	adc	r19, r19
    57e0:	0a 94       	dec	r0
    57e2:	e2 f7       	brpl	.-8      	; 0x57dc <status_leds_fastBlink+0x2e>
    57e4:	24 27       	eor	r18, r20
    57e6:	28 83       	st	Y, r18
    57e8:	fd 01       	movw	r30, r26
    57ea:	82 e0       	ldi	r24, 0x02	; 2
    57ec:	84 83       	std	Z+4, r24	; 0x04
    57ee:	df 91       	pop	r29
    57f0:	cf 91       	pop	r28
    57f2:	08 95       	ret

000057f4 <status_leds_ledOn>:
    57f4:	28 2f       	mov	r18, r24
    57f6:	30 e0       	ldi	r19, 0x00	; 0
    57f8:	f9 01       	movw	r30, r18
    57fa:	ee 0f       	add	r30, r30
    57fc:	ff 1f       	adc	r31, r31
    57fe:	e2 0f       	add	r30, r18
    5800:	f3 1f       	adc	r31, r19
    5802:	ee 0f       	add	r30, r30
    5804:	ff 1f       	adc	r31, r31
    5806:	e8 54       	subi	r30, 0x48	; 72
    5808:	f8 4e       	sbci	r31, 0xE8	; 232
    580a:	93 e0       	ldi	r25, 0x03	; 3
    580c:	94 83       	std	Z+4, r25	; 0x04
    580e:	cc ce       	rjmp	.-616    	; 0x55a8 <_turn_on>
    5810:	08 95       	ret

00005812 <status_leds_ledOff>:
    5812:	28 2f       	mov	r18, r24
    5814:	30 e0       	ldi	r19, 0x00	; 0
    5816:	f9 01       	movw	r30, r18
    5818:	ee 0f       	add	r30, r30
    581a:	ff 1f       	adc	r31, r31
    581c:	e2 0f       	add	r30, r18
    581e:	f3 1f       	adc	r31, r19
    5820:	ee 0f       	add	r30, r30
    5822:	ff 1f       	adc	r31, r31
    5824:	e8 54       	subi	r30, 0x48	; 72
    5826:	f8 4e       	sbci	r31, 0xE8	; 232
    5828:	94 e0       	ldi	r25, 0x04	; 4
    582a:	94 83       	std	Z+4, r25	; 0x04
    582c:	71 ce       	rjmp	.-798    	; 0x5510 <_turn_off>
    582e:	08 95       	ret

00005830 <status_leds_longPuls>:
    5830:	90 e0       	ldi	r25, 0x00	; 0
    5832:	fc 01       	movw	r30, r24
    5834:	ee 0f       	add	r30, r30
    5836:	ff 1f       	adc	r31, r31
    5838:	df 01       	movw	r26, r30
    583a:	a8 0f       	add	r26, r24
    583c:	b9 1f       	adc	r27, r25
    583e:	aa 0f       	add	r26, r26
    5840:	bb 1f       	adc	r27, r27
    5842:	a8 54       	subi	r26, 0x48	; 72
    5844:	b8 4e       	sbci	r27, 0xE8	; 232
    5846:	24 e0       	ldi	r18, 0x04	; 4
    5848:	15 96       	adiw	r26, 0x05	; 5
    584a:	2c 93       	st	X, r18
    584c:	15 97       	sbiw	r26, 0x05	; 5
    584e:	fd 01       	movw	r30, r26
    5850:	14 82       	std	Z+4, r1	; 0x04
    5852:	08 95       	ret

00005854 <status_leds_shortPuls>:
    5854:	90 e0       	ldi	r25, 0x00	; 0
    5856:	fc 01       	movw	r30, r24
    5858:	ee 0f       	add	r30, r30
    585a:	ff 1f       	adc	r31, r31
    585c:	df 01       	movw	r26, r30
    585e:	a8 0f       	add	r26, r24
    5860:	b9 1f       	adc	r27, r25
    5862:	aa 0f       	add	r26, r26
    5864:	bb 1f       	adc	r27, r27
    5866:	a8 54       	subi	r26, 0x48	; 72
    5868:	b8 4e       	sbci	r27, 0xE8	; 232
    586a:	21 e0       	ldi	r18, 0x01	; 1
    586c:	15 96       	adiw	r26, 0x05	; 5
    586e:	2c 93       	st	X, r18
    5870:	15 97       	sbiw	r26, 0x05	; 5
    5872:	fd 01       	movw	r30, r26
    5874:	14 82       	std	Z+4, r1	; 0x04
    5876:	08 95       	ret

00005878 <_initTwiInterface>:
    5878:	80 91 de 17 	lds	r24, 0x17DE	; 0x8017de <_twiIsInitiated>
    587c:	81 11       	cpse	r24, r1
    587e:	0c c0       	rjmp	.+24     	; 0x5898 <_initTwiInterface+0x20>
    5880:	8c e0       	ldi	r24, 0x0C	; 12
    5882:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5886:	8f ef       	ldi	r24, 0xFF	; 255
    5888:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    588c:	84 e0       	ldi	r24, 0x04	; 4
    588e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5892:	81 e0       	ldi	r24, 0x01	; 1
    5894:	80 93 de 17 	sts	0x17DE, r24	; 0x8017de <_twiIsInitiated>
    5898:	08 95       	ret

0000589a <twiCreate>:
    589a:	af 92       	push	r10
    589c:	bf 92       	push	r11
    589e:	cf 92       	push	r12
    58a0:	df 92       	push	r13
    58a2:	ef 92       	push	r14
    58a4:	ff 92       	push	r15
    58a6:	0f 93       	push	r16
    58a8:	1f 93       	push	r17
    58aa:	cf 93       	push	r28
    58ac:	df 93       	push	r29
    58ae:	a8 2e       	mov	r10, r24
    58b0:	b6 2e       	mov	r11, r22
    58b2:	69 01       	movw	r12, r18
    58b4:	7a 01       	movw	r14, r20
    58b6:	84 e0       	ldi	r24, 0x04	; 4
    58b8:	90 e0       	ldi	r25, 0x00	; 0
    58ba:	70 d7       	rcall	.+3808   	; 0x679c <malloc>
    58bc:	ec 01       	movw	r28, r24
    58be:	89 2b       	or	r24, r25
    58c0:	61 f1       	breq	.+88     	; 0x591a <twiCreate+0x80>
    58c2:	a8 82       	st	Y, r10
    58c4:	81 e0       	ldi	r24, 0x01	; 1
    58c6:	b8 12       	cpse	r11, r24
    58c8:	12 c0       	rjmp	.+36     	; 0x58ee <twiCreate+0x54>
    58ca:	c7 01       	movw	r24, r14
    58cc:	b6 01       	movw	r22, r12
    58ce:	20 ea       	ldi	r18, 0xA0	; 160
    58d0:	36 e8       	ldi	r19, 0x86	; 134
    58d2:	41 e0       	ldi	r20, 0x01	; 1
    58d4:	50 e0       	ldi	r21, 0x00	; 0
    58d6:	15 d7       	rcall	.+3626   	; 0x6702 <__udivmodsi4>
    58d8:	da 01       	movw	r26, r20
    58da:	c9 01       	movw	r24, r18
    58dc:	40 97       	sbiw	r24, 0x10	; 16
    58de:	a1 09       	sbc	r26, r1
    58e0:	b1 09       	sbc	r27, r1
    58e2:	b6 95       	lsr	r27
    58e4:	a7 95       	ror	r26
    58e6:	97 95       	ror	r25
    58e8:	87 95       	ror	r24
    58ea:	89 83       	std	Y+1, r24	; 0x01
    58ec:	11 c0       	rjmp	.+34     	; 0x5910 <twiCreate+0x76>
    58ee:	c7 01       	movw	r24, r14
    58f0:	b6 01       	movw	r22, r12
    58f2:	20 e8       	ldi	r18, 0x80	; 128
    58f4:	3a e1       	ldi	r19, 0x1A	; 26
    58f6:	46 e0       	ldi	r20, 0x06	; 6
    58f8:	50 e0       	ldi	r21, 0x00	; 0
    58fa:	03 d7       	rcall	.+3590   	; 0x6702 <__udivmodsi4>
    58fc:	da 01       	movw	r26, r20
    58fe:	c9 01       	movw	r24, r18
    5900:	40 97       	sbiw	r24, 0x10	; 16
    5902:	a1 09       	sbc	r26, r1
    5904:	b1 09       	sbc	r27, r1
    5906:	b6 95       	lsr	r27
    5908:	a7 95       	ror	r26
    590a:	97 95       	ror	r25
    590c:	87 95       	ror	r24
    590e:	89 83       	std	Y+1, r24	; 0x01
    5910:	1b 83       	std	Y+3, r17	; 0x03
    5912:	0a 83       	std	Y+2, r16	; 0x02
    5914:	8c 2f       	mov	r24, r28
    5916:	9d 2f       	mov	r25, r29
    5918:	02 c0       	rjmp	.+4      	; 0x591e <twiCreate+0x84>
    591a:	80 e0       	ldi	r24, 0x00	; 0
    591c:	90 e0       	ldi	r25, 0x00	; 0
    591e:	df 91       	pop	r29
    5920:	cf 91       	pop	r28
    5922:	1f 91       	pop	r17
    5924:	0f 91       	pop	r16
    5926:	ff 90       	pop	r15
    5928:	ef 90       	pop	r14
    592a:	df 90       	pop	r13
    592c:	cf 90       	pop	r12
    592e:	bf 90       	pop	r11
    5930:	af 90       	pop	r10
    5932:	08 95       	ret

00005934 <twiIsBusy>:
    5934:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5938:	81 70       	andi	r24, 0x01	; 1
    593a:	08 95       	ret

0000593c <twiTransmit>:
    593c:	ff 92       	push	r15
    593e:	0f 93       	push	r16
    5940:	1f 93       	push	r17
    5942:	cf 93       	push	r28
    5944:	df 93       	push	r29
    5946:	00 97       	sbiw	r24, 0x00	; 0
    5948:	d1 f1       	breq	.+116    	; 0x59be <twiTransmit+0x82>
    594a:	4a 30       	cpi	r20, 0x0A	; 10
    594c:	d0 f5       	brcc	.+116    	; 0x59c2 <twiTransmit+0x86>
    594e:	f4 2e       	mov	r15, r20
    5950:	8b 01       	movw	r16, r22
    5952:	ec 01       	movw	r28, r24
    5954:	ef df       	rcall	.-34     	; 0x5934 <twiIsBusy>
    5956:	81 11       	cpse	r24, r1
    5958:	36 c0       	rjmp	.+108    	; 0x59c6 <twiTransmit+0x8a>
    595a:	80 91 d1 17 	lds	r24, 0x17D1	; 0x8017d1 <_twiCurrentHandler>
    595e:	90 91 d2 17 	lds	r25, 0x17D2	; 0x8017d2 <_twiCurrentHandler+0x1>
    5962:	c8 17       	cp	r28, r24
    5964:	d9 07       	cpc	r29, r25
    5966:	41 f0       	breq	.+16     	; 0x5978 <twiTransmit+0x3c>
    5968:	87 df       	rcall	.-242    	; 0x5878 <_initTwiInterface>
    596a:	89 81       	ldd	r24, Y+1	; 0x01
    596c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5970:	d0 93 d2 17 	sts	0x17D2, r29	; 0x8017d2 <_twiCurrentHandler+0x1>
    5974:	c0 93 d1 17 	sts	0x17D1, r28	; 0x8017d1 <_twiCurrentHandler>
    5978:	81 e0       	ldi	r24, 0x01	; 1
    597a:	8f 0d       	add	r24, r15
    597c:	80 93 d3 17 	sts	0x17D3, r24	; 0x8017d3 <_twiMessageLen>
    5980:	88 81       	ld	r24, Y
    5982:	88 0f       	add	r24, r24
    5984:	80 93 d4 17 	sts	0x17D4, r24	; 0x8017d4 <_twiMessageBuffer>
    5988:	ff 20       	and	r15, r15
    598a:	89 f0       	breq	.+34     	; 0x59ae <twiTransmit+0x72>
    598c:	f8 01       	movw	r30, r16
    598e:	a5 ed       	ldi	r26, 0xD5	; 213
    5990:	b7 e1       	ldi	r27, 0x17	; 23
    5992:	4f ef       	ldi	r20, 0xFF	; 255
    5994:	4f 0d       	add	r20, r15
    5996:	64 2f       	mov	r22, r20
    5998:	70 e0       	ldi	r23, 0x00	; 0
    599a:	cb 01       	movw	r24, r22
    599c:	01 96       	adiw	r24, 0x01	; 1
    599e:	b8 01       	movw	r22, r16
    59a0:	68 0f       	add	r22, r24
    59a2:	79 1f       	adc	r23, r25
    59a4:	81 91       	ld	r24, Z+
    59a6:	8d 93       	st	X+, r24
    59a8:	e6 17       	cp	r30, r22
    59aa:	f7 07       	cpc	r31, r23
    59ac:	d9 f7       	brne	.-10     	; 0x59a4 <twiTransmit+0x68>
    59ae:	88 ef       	ldi	r24, 0xF8	; 248
    59b0:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    59b4:	85 ea       	ldi	r24, 0xA5	; 165
    59b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    59ba:	84 e0       	ldi	r24, 0x04	; 4
    59bc:	05 c0       	rjmp	.+10     	; 0x59c8 <twiTransmit+0x8c>
    59be:	86 e0       	ldi	r24, 0x06	; 6
    59c0:	03 c0       	rjmp	.+6      	; 0x59c8 <twiTransmit+0x8c>
    59c2:	87 e0       	ldi	r24, 0x07	; 7
    59c4:	01 c0       	rjmp	.+2      	; 0x59c8 <twiTransmit+0x8c>
    59c6:	82 e0       	ldi	r24, 0x02	; 2
    59c8:	df 91       	pop	r29
    59ca:	cf 91       	pop	r28
    59cc:	1f 91       	pop	r17
    59ce:	0f 91       	pop	r16
    59d0:	ff 90       	pop	r15
    59d2:	08 95       	ret

000059d4 <twiReceive>:
    59d4:	1f 93       	push	r17
    59d6:	cf 93       	push	r28
    59d8:	df 93       	push	r29
    59da:	00 97       	sbiw	r24, 0x00	; 0
    59dc:	29 f1       	breq	.+74     	; 0x5a28 <twiReceive+0x54>
    59de:	6b 30       	cpi	r22, 0x0B	; 11
    59e0:	28 f5       	brcc	.+74     	; 0x5a2c <twiReceive+0x58>
    59e2:	16 2f       	mov	r17, r22
    59e4:	ec 01       	movw	r28, r24
    59e6:	a6 df       	rcall	.-180    	; 0x5934 <twiIsBusy>
    59e8:	81 11       	cpse	r24, r1
    59ea:	22 c0       	rjmp	.+68     	; 0x5a30 <twiReceive+0x5c>
    59ec:	80 91 d1 17 	lds	r24, 0x17D1	; 0x8017d1 <_twiCurrentHandler>
    59f0:	90 91 d2 17 	lds	r25, 0x17D2	; 0x8017d2 <_twiCurrentHandler+0x1>
    59f4:	c8 17       	cp	r28, r24
    59f6:	d9 07       	cpc	r29, r25
    59f8:	41 f0       	breq	.+16     	; 0x5a0a <twiReceive+0x36>
    59fa:	3e df       	rcall	.-388    	; 0x5878 <_initTwiInterface>
    59fc:	89 81       	ldd	r24, Y+1	; 0x01
    59fe:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5a02:	d0 93 d2 17 	sts	0x17D2, r29	; 0x8017d2 <_twiCurrentHandler+0x1>
    5a06:	c0 93 d1 17 	sts	0x17D1, r28	; 0x8017d1 <_twiCurrentHandler>
    5a0a:	10 93 d3 17 	sts	0x17D3, r17	; 0x8017d3 <_twiMessageLen>
    5a0e:	88 81       	ld	r24, Y
    5a10:	88 0f       	add	r24, r24
    5a12:	81 60       	ori	r24, 0x01	; 1
    5a14:	80 93 d4 17 	sts	0x17D4, r24	; 0x8017d4 <_twiMessageBuffer>
    5a18:	88 ef       	ldi	r24, 0xF8	; 248
    5a1a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5a1e:	85 ea       	ldi	r24, 0xA5	; 165
    5a20:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5a24:	85 e0       	ldi	r24, 0x05	; 5
    5a26:	05 c0       	rjmp	.+10     	; 0x5a32 <twiReceive+0x5e>
    5a28:	86 e0       	ldi	r24, 0x06	; 6
    5a2a:	03 c0       	rjmp	.+6      	; 0x5a32 <twiReceive+0x5e>
    5a2c:	87 e0       	ldi	r24, 0x07	; 7
    5a2e:	01 c0       	rjmp	.+2      	; 0x5a32 <twiReceive+0x5e>
    5a30:	82 e0       	ldi	r24, 0x02	; 2
    5a32:	df 91       	pop	r29
    5a34:	cf 91       	pop	r28
    5a36:	1f 91       	pop	r17
    5a38:	08 95       	ret

00005a3a <__vector_39>:
    5a3a:	1f 92       	push	r1
    5a3c:	0f 92       	push	r0
    5a3e:	0f b6       	in	r0, 0x3f	; 63
    5a40:	0f 92       	push	r0
    5a42:	11 24       	eor	r1, r1
    5a44:	0b b6       	in	r0, 0x3b	; 59
    5a46:	0f 92       	push	r0
    5a48:	2f 93       	push	r18
    5a4a:	3f 93       	push	r19
    5a4c:	4f 93       	push	r20
    5a4e:	5f 93       	push	r21
    5a50:	6f 93       	push	r22
    5a52:	7f 93       	push	r23
    5a54:	8f 93       	push	r24
    5a56:	9f 93       	push	r25
    5a58:	af 93       	push	r26
    5a5a:	bf 93       	push	r27
    5a5c:	ef 93       	push	r30
    5a5e:	ff 93       	push	r31
    5a60:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5a64:	8e 2f       	mov	r24, r30
    5a66:	90 e0       	ldi	r25, 0x00	; 0
    5a68:	fc 01       	movw	r30, r24
    5a6a:	38 97       	sbiw	r30, 0x08	; 8
    5a6c:	e1 35       	cpi	r30, 0x51	; 81
    5a6e:	f1 05       	cpc	r31, r1
    5a70:	08 f0       	brcs	.+2      	; 0x5a74 <__vector_39+0x3a>
    5a72:	75 c0       	rjmp	.+234    	; 0x5b5e <__vector_39+0x124>
    5a74:	88 27       	eor	r24, r24
    5a76:	e4 58       	subi	r30, 0x84	; 132
    5a78:	ff 4f       	sbci	r31, 0xFF	; 255
    5a7a:	8f 4f       	sbci	r24, 0xFF	; 255
    5a7c:	64 c6       	rjmp	.+3272   	; 0x6746 <__tablejump2__>
    5a7e:	10 92 d0 17 	sts	0x17D0, r1	; 0x8017d0 <_index.1885>
    5a82:	e0 91 d0 17 	lds	r30, 0x17D0	; 0x8017d0 <_index.1885>
    5a86:	80 91 d3 17 	lds	r24, 0x17D3	; 0x8017d3 <_twiMessageLen>
    5a8a:	e8 17       	cp	r30, r24
    5a8c:	70 f4       	brcc	.+28     	; 0x5aaa <__vector_39+0x70>
    5a8e:	81 e0       	ldi	r24, 0x01	; 1
    5a90:	8e 0f       	add	r24, r30
    5a92:	80 93 d0 17 	sts	0x17D0, r24	; 0x8017d0 <_index.1885>
    5a96:	f0 e0       	ldi	r31, 0x00	; 0
    5a98:	ec 52       	subi	r30, 0x2C	; 44
    5a9a:	f8 4e       	sbci	r31, 0xE8	; 232
    5a9c:	80 81       	ld	r24, Z
    5a9e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5aa2:	85 e8       	ldi	r24, 0x85	; 133
    5aa4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5aa8:	72 c0       	rjmp	.+228    	; 0x5b8e <__vector_39+0x154>
    5aaa:	84 e9       	ldi	r24, 0x94	; 148
    5aac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5ab0:	80 91 d1 17 	lds	r24, 0x17D1	; 0x8017d1 <_twiCurrentHandler>
    5ab4:	90 91 d2 17 	lds	r25, 0x17D2	; 0x8017d2 <_twiCurrentHandler+0x1>
    5ab8:	dc 01       	movw	r26, r24
    5aba:	12 96       	adiw	r26, 0x02	; 2
    5abc:	ed 91       	ld	r30, X+
    5abe:	fc 91       	ld	r31, X
    5ac0:	13 97       	sbiw	r26, 0x03	; 3
    5ac2:	30 97       	sbiw	r30, 0x00	; 0
    5ac4:	09 f4       	brne	.+2      	; 0x5ac8 <__vector_39+0x8e>
    5ac6:	63 c0       	rjmp	.+198    	; 0x5b8e <__vector_39+0x154>
    5ac8:	20 e0       	ldi	r18, 0x00	; 0
    5aca:	40 e0       	ldi	r20, 0x00	; 0
    5acc:	50 e0       	ldi	r21, 0x00	; 0
    5ace:	64 e0       	ldi	r22, 0x04	; 4
    5ad0:	19 95       	eicall
    5ad2:	5d c0       	rjmp	.+186    	; 0x5b8e <__vector_39+0x154>
    5ad4:	e0 91 d0 17 	lds	r30, 0x17D0	; 0x8017d0 <_index.1885>
    5ad8:	81 e0       	ldi	r24, 0x01	; 1
    5ada:	8e 0f       	add	r24, r30
    5adc:	80 93 d0 17 	sts	0x17D0, r24	; 0x8017d0 <_index.1885>
    5ae0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5ae4:	f0 e0       	ldi	r31, 0x00	; 0
    5ae6:	ec 52       	subi	r30, 0x2C	; 44
    5ae8:	f8 4e       	sbci	r31, 0xE8	; 232
    5aea:	80 83       	st	Z, r24
    5aec:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5af0:	80 34       	cpi	r24, 0x40	; 64
    5af2:	11 f4       	brne	.+4      	; 0x5af8 <__vector_39+0xbe>
    5af4:	10 92 d0 17 	sts	0x17D0, r1	; 0x8017d0 <_index.1885>
    5af8:	20 91 d0 17 	lds	r18, 0x17D0	; 0x8017d0 <_index.1885>
    5afc:	30 e0       	ldi	r19, 0x00	; 0
    5afe:	80 91 d3 17 	lds	r24, 0x17D3	; 0x8017d3 <_twiMessageLen>
    5b02:	90 e0       	ldi	r25, 0x00	; 0
    5b04:	01 97       	sbiw	r24, 0x01	; 1
    5b06:	28 17       	cp	r18, r24
    5b08:	39 07       	cpc	r19, r25
    5b0a:	24 f4       	brge	.+8      	; 0x5b14 <__vector_39+0xda>
    5b0c:	85 ec       	ldi	r24, 0xC5	; 197
    5b0e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b12:	3d c0       	rjmp	.+122    	; 0x5b8e <__vector_39+0x154>
    5b14:	85 e8       	ldi	r24, 0x85	; 133
    5b16:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b1a:	39 c0       	rjmp	.+114    	; 0x5b8e <__vector_39+0x154>
    5b1c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5b20:	e0 91 d0 17 	lds	r30, 0x17D0	; 0x8017d0 <_index.1885>
    5b24:	f0 e0       	ldi	r31, 0x00	; 0
    5b26:	ec 52       	subi	r30, 0x2C	; 44
    5b28:	f8 4e       	sbci	r31, 0xE8	; 232
    5b2a:	80 83       	st	Z, r24
    5b2c:	84 e9       	ldi	r24, 0x94	; 148
    5b2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b32:	80 91 d1 17 	lds	r24, 0x17D1	; 0x8017d1 <_twiCurrentHandler>
    5b36:	90 91 d2 17 	lds	r25, 0x17D2	; 0x8017d2 <_twiCurrentHandler+0x1>
    5b3a:	dc 01       	movw	r26, r24
    5b3c:	12 96       	adiw	r26, 0x02	; 2
    5b3e:	ed 91       	ld	r30, X+
    5b40:	fc 91       	ld	r31, X
    5b42:	13 97       	sbiw	r26, 0x03	; 3
    5b44:	30 97       	sbiw	r30, 0x00	; 0
    5b46:	19 f1       	breq	.+70     	; 0x5b8e <__vector_39+0x154>
    5b48:	20 91 d3 17 	lds	r18, 0x17D3	; 0x8017d3 <_twiMessageLen>
    5b4c:	44 ed       	ldi	r20, 0xD4	; 212
    5b4e:	57 e1       	ldi	r21, 0x17	; 23
    5b50:	65 e0       	ldi	r22, 0x05	; 5
    5b52:	19 95       	eicall
    5b54:	1c c0       	rjmp	.+56     	; 0x5b8e <__vector_39+0x154>
    5b56:	85 ea       	ldi	r24, 0xA5	; 165
    5b58:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b5c:	18 c0       	rjmp	.+48     	; 0x5b8e <__vector_39+0x154>
    5b5e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5b62:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5b66:	84 e0       	ldi	r24, 0x04	; 4
    5b68:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b6c:	80 91 d1 17 	lds	r24, 0x17D1	; 0x8017d1 <_twiCurrentHandler>
    5b70:	90 91 d2 17 	lds	r25, 0x17D2	; 0x8017d2 <_twiCurrentHandler+0x1>
    5b74:	dc 01       	movw	r26, r24
    5b76:	12 96       	adiw	r26, 0x02	; 2
    5b78:	ed 91       	ld	r30, X+
    5b7a:	fc 91       	ld	r31, X
    5b7c:	13 97       	sbiw	r26, 0x03	; 3
    5b7e:	30 97       	sbiw	r30, 0x00	; 0
    5b80:	31 f0       	breq	.+12     	; 0x5b8e <__vector_39+0x154>
    5b82:	20 e0       	ldi	r18, 0x00	; 0
    5b84:	40 e0       	ldi	r20, 0x00	; 0
    5b86:	50 e0       	ldi	r21, 0x00	; 0
    5b88:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5b8c:	19 95       	eicall
    5b8e:	ff 91       	pop	r31
    5b90:	ef 91       	pop	r30
    5b92:	bf 91       	pop	r27
    5b94:	af 91       	pop	r26
    5b96:	9f 91       	pop	r25
    5b98:	8f 91       	pop	r24
    5b9a:	7f 91       	pop	r23
    5b9c:	6f 91       	pop	r22
    5b9e:	5f 91       	pop	r21
    5ba0:	4f 91       	pop	r20
    5ba2:	3f 91       	pop	r19
    5ba4:	2f 91       	pop	r18
    5ba6:	0f 90       	pop	r0
    5ba8:	0b be       	out	0x3b, r0	; 59
    5baa:	0f 90       	pop	r0
    5bac:	0f be       	out	0x3f, r0	; 63
    5bae:	0f 90       	pop	r0
    5bb0:	1f 90       	pop	r1
    5bb2:	18 95       	reti

00005bb4 <fifo_init>:
    5bb4:	fc 01       	movw	r30, r24
    5bb6:	41 11       	cpse	r20, r1
    5bb8:	01 c0       	rjmp	.+2      	; 0x5bbc <fifo_init+0x8>
    5bba:	11 d7       	rcall	.+3618   	; 0x69de <abort>
    5bbc:	84 2f       	mov	r24, r20
    5bbe:	90 e0       	ldi	r25, 0x00	; 0
    5bc0:	9c 01       	movw	r18, r24
    5bc2:	21 50       	subi	r18, 0x01	; 1
    5bc4:	31 09       	sbc	r19, r1
    5bc6:	82 23       	and	r24, r18
    5bc8:	93 23       	and	r25, r19
    5bca:	89 2b       	or	r24, r25
    5bcc:	09 f0       	breq	.+2      	; 0x5bd0 <fifo_init+0x1c>
    5bce:	07 d7       	rcall	.+3598   	; 0x69de <abort>
    5bd0:	41 38       	cpi	r20, 0x81	; 129
    5bd2:	08 f0       	brcs	.+2      	; 0x5bd6 <fifo_init+0x22>
    5bd4:	04 d7       	rcall	.+3592   	; 0x69de <abort>
    5bd6:	12 82       	std	Z+2, r1	; 0x02
    5bd8:	13 82       	std	Z+3, r1	; 0x03
    5bda:	44 83       	std	Z+4, r20	; 0x04
    5bdc:	44 0f       	add	r20, r20
    5bde:	41 50       	subi	r20, 0x01	; 1
    5be0:	45 83       	std	Z+5, r20	; 0x05
    5be2:	71 83       	std	Z+1, r23	; 0x01
    5be4:	60 83       	st	Z, r22
    5be6:	80 e0       	ldi	r24, 0x00	; 0
    5be8:	90 e0       	ldi	r25, 0x00	; 0
    5bea:	08 95       	ret

00005bec <__subsf3>:
    5bec:	50 58       	subi	r21, 0x80	; 128

00005bee <__addsf3>:
    5bee:	bb 27       	eor	r27, r27
    5bf0:	aa 27       	eor	r26, r26
    5bf2:	0e d0       	rcall	.+28     	; 0x5c10 <__addsf3x>
    5bf4:	4d c1       	rjmp	.+666    	; 0x5e90 <__fp_round>
    5bf6:	3e d1       	rcall	.+636    	; 0x5e74 <__fp_pscA>
    5bf8:	30 f0       	brcs	.+12     	; 0x5c06 <__addsf3+0x18>
    5bfa:	43 d1       	rcall	.+646    	; 0x5e82 <__fp_pscB>
    5bfc:	20 f0       	brcs	.+8      	; 0x5c06 <__addsf3+0x18>
    5bfe:	31 f4       	brne	.+12     	; 0x5c0c <__addsf3+0x1e>
    5c00:	9f 3f       	cpi	r25, 0xFF	; 255
    5c02:	11 f4       	brne	.+4      	; 0x5c08 <__addsf3+0x1a>
    5c04:	1e f4       	brtc	.+6      	; 0x5c0c <__addsf3+0x1e>
    5c06:	33 c1       	rjmp	.+614    	; 0x5e6e <__fp_nan>
    5c08:	0e f4       	brtc	.+2      	; 0x5c0c <__addsf3+0x1e>
    5c0a:	e0 95       	com	r30
    5c0c:	e7 fb       	bst	r30, 7
    5c0e:	29 c1       	rjmp	.+594    	; 0x5e62 <__fp_inf>

00005c10 <__addsf3x>:
    5c10:	e9 2f       	mov	r30, r25
    5c12:	4f d1       	rcall	.+670    	; 0x5eb2 <__fp_split3>
    5c14:	80 f3       	brcs	.-32     	; 0x5bf6 <__addsf3+0x8>
    5c16:	ba 17       	cp	r27, r26
    5c18:	62 07       	cpc	r22, r18
    5c1a:	73 07       	cpc	r23, r19
    5c1c:	84 07       	cpc	r24, r20
    5c1e:	95 07       	cpc	r25, r21
    5c20:	18 f0       	brcs	.+6      	; 0x5c28 <__addsf3x+0x18>
    5c22:	71 f4       	brne	.+28     	; 0x5c40 <__addsf3x+0x30>
    5c24:	9e f5       	brtc	.+102    	; 0x5c8c <__addsf3x+0x7c>
    5c26:	67 c1       	rjmp	.+718    	; 0x5ef6 <__fp_zero>
    5c28:	0e f4       	brtc	.+2      	; 0x5c2c <__addsf3x+0x1c>
    5c2a:	e0 95       	com	r30
    5c2c:	0b 2e       	mov	r0, r27
    5c2e:	ba 2f       	mov	r27, r26
    5c30:	a0 2d       	mov	r26, r0
    5c32:	0b 01       	movw	r0, r22
    5c34:	b9 01       	movw	r22, r18
    5c36:	90 01       	movw	r18, r0
    5c38:	0c 01       	movw	r0, r24
    5c3a:	ca 01       	movw	r24, r20
    5c3c:	a0 01       	movw	r20, r0
    5c3e:	11 24       	eor	r1, r1
    5c40:	ff 27       	eor	r31, r31
    5c42:	59 1b       	sub	r21, r25
    5c44:	99 f0       	breq	.+38     	; 0x5c6c <__addsf3x+0x5c>
    5c46:	59 3f       	cpi	r21, 0xF9	; 249
    5c48:	50 f4       	brcc	.+20     	; 0x5c5e <__addsf3x+0x4e>
    5c4a:	50 3e       	cpi	r21, 0xE0	; 224
    5c4c:	68 f1       	brcs	.+90     	; 0x5ca8 <__addsf3x+0x98>
    5c4e:	1a 16       	cp	r1, r26
    5c50:	f0 40       	sbci	r31, 0x00	; 0
    5c52:	a2 2f       	mov	r26, r18
    5c54:	23 2f       	mov	r18, r19
    5c56:	34 2f       	mov	r19, r20
    5c58:	44 27       	eor	r20, r20
    5c5a:	58 5f       	subi	r21, 0xF8	; 248
    5c5c:	f3 cf       	rjmp	.-26     	; 0x5c44 <__addsf3x+0x34>
    5c5e:	46 95       	lsr	r20
    5c60:	37 95       	ror	r19
    5c62:	27 95       	ror	r18
    5c64:	a7 95       	ror	r26
    5c66:	f0 40       	sbci	r31, 0x00	; 0
    5c68:	53 95       	inc	r21
    5c6a:	c9 f7       	brne	.-14     	; 0x5c5e <__addsf3x+0x4e>
    5c6c:	7e f4       	brtc	.+30     	; 0x5c8c <__addsf3x+0x7c>
    5c6e:	1f 16       	cp	r1, r31
    5c70:	ba 0b       	sbc	r27, r26
    5c72:	62 0b       	sbc	r22, r18
    5c74:	73 0b       	sbc	r23, r19
    5c76:	84 0b       	sbc	r24, r20
    5c78:	ba f0       	brmi	.+46     	; 0x5ca8 <__addsf3x+0x98>
    5c7a:	91 50       	subi	r25, 0x01	; 1
    5c7c:	a1 f0       	breq	.+40     	; 0x5ca6 <__addsf3x+0x96>
    5c7e:	ff 0f       	add	r31, r31
    5c80:	bb 1f       	adc	r27, r27
    5c82:	66 1f       	adc	r22, r22
    5c84:	77 1f       	adc	r23, r23
    5c86:	88 1f       	adc	r24, r24
    5c88:	c2 f7       	brpl	.-16     	; 0x5c7a <__addsf3x+0x6a>
    5c8a:	0e c0       	rjmp	.+28     	; 0x5ca8 <__addsf3x+0x98>
    5c8c:	ba 0f       	add	r27, r26
    5c8e:	62 1f       	adc	r22, r18
    5c90:	73 1f       	adc	r23, r19
    5c92:	84 1f       	adc	r24, r20
    5c94:	48 f4       	brcc	.+18     	; 0x5ca8 <__addsf3x+0x98>
    5c96:	87 95       	ror	r24
    5c98:	77 95       	ror	r23
    5c9a:	67 95       	ror	r22
    5c9c:	b7 95       	ror	r27
    5c9e:	f7 95       	ror	r31
    5ca0:	9e 3f       	cpi	r25, 0xFE	; 254
    5ca2:	08 f0       	brcs	.+2      	; 0x5ca6 <__addsf3x+0x96>
    5ca4:	b3 cf       	rjmp	.-154    	; 0x5c0c <__addsf3+0x1e>
    5ca6:	93 95       	inc	r25
    5ca8:	88 0f       	add	r24, r24
    5caa:	08 f0       	brcs	.+2      	; 0x5cae <__addsf3x+0x9e>
    5cac:	99 27       	eor	r25, r25
    5cae:	ee 0f       	add	r30, r30
    5cb0:	97 95       	ror	r25
    5cb2:	87 95       	ror	r24
    5cb4:	08 95       	ret

00005cb6 <__divsf3>:
    5cb6:	0c d0       	rcall	.+24     	; 0x5cd0 <__divsf3x>
    5cb8:	eb c0       	rjmp	.+470    	; 0x5e90 <__fp_round>
    5cba:	e3 d0       	rcall	.+454    	; 0x5e82 <__fp_pscB>
    5cbc:	40 f0       	brcs	.+16     	; 0x5cce <__divsf3+0x18>
    5cbe:	da d0       	rcall	.+436    	; 0x5e74 <__fp_pscA>
    5cc0:	30 f0       	brcs	.+12     	; 0x5cce <__divsf3+0x18>
    5cc2:	21 f4       	brne	.+8      	; 0x5ccc <__divsf3+0x16>
    5cc4:	5f 3f       	cpi	r21, 0xFF	; 255
    5cc6:	19 f0       	breq	.+6      	; 0x5cce <__divsf3+0x18>
    5cc8:	cc c0       	rjmp	.+408    	; 0x5e62 <__fp_inf>
    5cca:	51 11       	cpse	r21, r1
    5ccc:	15 c1       	rjmp	.+554    	; 0x5ef8 <__fp_szero>
    5cce:	cf c0       	rjmp	.+414    	; 0x5e6e <__fp_nan>

00005cd0 <__divsf3x>:
    5cd0:	f0 d0       	rcall	.+480    	; 0x5eb2 <__fp_split3>
    5cd2:	98 f3       	brcs	.-26     	; 0x5cba <__divsf3+0x4>

00005cd4 <__divsf3_pse>:
    5cd4:	99 23       	and	r25, r25
    5cd6:	c9 f3       	breq	.-14     	; 0x5cca <__divsf3+0x14>
    5cd8:	55 23       	and	r21, r21
    5cda:	b1 f3       	breq	.-20     	; 0x5cc8 <__divsf3+0x12>
    5cdc:	95 1b       	sub	r25, r21
    5cde:	55 0b       	sbc	r21, r21
    5ce0:	bb 27       	eor	r27, r27
    5ce2:	aa 27       	eor	r26, r26
    5ce4:	62 17       	cp	r22, r18
    5ce6:	73 07       	cpc	r23, r19
    5ce8:	84 07       	cpc	r24, r20
    5cea:	38 f0       	brcs	.+14     	; 0x5cfa <__divsf3_pse+0x26>
    5cec:	9f 5f       	subi	r25, 0xFF	; 255
    5cee:	5f 4f       	sbci	r21, 0xFF	; 255
    5cf0:	22 0f       	add	r18, r18
    5cf2:	33 1f       	adc	r19, r19
    5cf4:	44 1f       	adc	r20, r20
    5cf6:	aa 1f       	adc	r26, r26
    5cf8:	a9 f3       	breq	.-22     	; 0x5ce4 <__divsf3_pse+0x10>
    5cfa:	33 d0       	rcall	.+102    	; 0x5d62 <__divsf3_pse+0x8e>
    5cfc:	0e 2e       	mov	r0, r30
    5cfe:	3a f0       	brmi	.+14     	; 0x5d0e <__divsf3_pse+0x3a>
    5d00:	e0 e8       	ldi	r30, 0x80	; 128
    5d02:	30 d0       	rcall	.+96     	; 0x5d64 <__divsf3_pse+0x90>
    5d04:	91 50       	subi	r25, 0x01	; 1
    5d06:	50 40       	sbci	r21, 0x00	; 0
    5d08:	e6 95       	lsr	r30
    5d0a:	00 1c       	adc	r0, r0
    5d0c:	ca f7       	brpl	.-14     	; 0x5d00 <__divsf3_pse+0x2c>
    5d0e:	29 d0       	rcall	.+82     	; 0x5d62 <__divsf3_pse+0x8e>
    5d10:	fe 2f       	mov	r31, r30
    5d12:	27 d0       	rcall	.+78     	; 0x5d62 <__divsf3_pse+0x8e>
    5d14:	66 0f       	add	r22, r22
    5d16:	77 1f       	adc	r23, r23
    5d18:	88 1f       	adc	r24, r24
    5d1a:	bb 1f       	adc	r27, r27
    5d1c:	26 17       	cp	r18, r22
    5d1e:	37 07       	cpc	r19, r23
    5d20:	48 07       	cpc	r20, r24
    5d22:	ab 07       	cpc	r26, r27
    5d24:	b0 e8       	ldi	r27, 0x80	; 128
    5d26:	09 f0       	breq	.+2      	; 0x5d2a <__divsf3_pse+0x56>
    5d28:	bb 0b       	sbc	r27, r27
    5d2a:	80 2d       	mov	r24, r0
    5d2c:	bf 01       	movw	r22, r30
    5d2e:	ff 27       	eor	r31, r31
    5d30:	93 58       	subi	r25, 0x83	; 131
    5d32:	5f 4f       	sbci	r21, 0xFF	; 255
    5d34:	2a f0       	brmi	.+10     	; 0x5d40 <__divsf3_pse+0x6c>
    5d36:	9e 3f       	cpi	r25, 0xFE	; 254
    5d38:	51 05       	cpc	r21, r1
    5d3a:	68 f0       	brcs	.+26     	; 0x5d56 <__divsf3_pse+0x82>
    5d3c:	92 c0       	rjmp	.+292    	; 0x5e62 <__fp_inf>
    5d3e:	dc c0       	rjmp	.+440    	; 0x5ef8 <__fp_szero>
    5d40:	5f 3f       	cpi	r21, 0xFF	; 255
    5d42:	ec f3       	brlt	.-6      	; 0x5d3e <__divsf3_pse+0x6a>
    5d44:	98 3e       	cpi	r25, 0xE8	; 232
    5d46:	dc f3       	brlt	.-10     	; 0x5d3e <__divsf3_pse+0x6a>
    5d48:	86 95       	lsr	r24
    5d4a:	77 95       	ror	r23
    5d4c:	67 95       	ror	r22
    5d4e:	b7 95       	ror	r27
    5d50:	f7 95       	ror	r31
    5d52:	9f 5f       	subi	r25, 0xFF	; 255
    5d54:	c9 f7       	brne	.-14     	; 0x5d48 <__divsf3_pse+0x74>
    5d56:	88 0f       	add	r24, r24
    5d58:	91 1d       	adc	r25, r1
    5d5a:	96 95       	lsr	r25
    5d5c:	87 95       	ror	r24
    5d5e:	97 f9       	bld	r25, 7
    5d60:	08 95       	ret
    5d62:	e1 e0       	ldi	r30, 0x01	; 1
    5d64:	66 0f       	add	r22, r22
    5d66:	77 1f       	adc	r23, r23
    5d68:	88 1f       	adc	r24, r24
    5d6a:	bb 1f       	adc	r27, r27
    5d6c:	62 17       	cp	r22, r18
    5d6e:	73 07       	cpc	r23, r19
    5d70:	84 07       	cpc	r24, r20
    5d72:	ba 07       	cpc	r27, r26
    5d74:	20 f0       	brcs	.+8      	; 0x5d7e <__divsf3_pse+0xaa>
    5d76:	62 1b       	sub	r22, r18
    5d78:	73 0b       	sbc	r23, r19
    5d7a:	84 0b       	sbc	r24, r20
    5d7c:	ba 0b       	sbc	r27, r26
    5d7e:	ee 1f       	adc	r30, r30
    5d80:	88 f7       	brcc	.-30     	; 0x5d64 <__divsf3_pse+0x90>
    5d82:	e0 95       	com	r30
    5d84:	08 95       	ret

00005d86 <__fixsfsi>:
    5d86:	04 d0       	rcall	.+8      	; 0x5d90 <__fixunssfsi>
    5d88:	68 94       	set
    5d8a:	b1 11       	cpse	r27, r1
    5d8c:	b5 c0       	rjmp	.+362    	; 0x5ef8 <__fp_szero>
    5d8e:	08 95       	ret

00005d90 <__fixunssfsi>:
    5d90:	98 d0       	rcall	.+304    	; 0x5ec2 <__fp_splitA>
    5d92:	88 f0       	brcs	.+34     	; 0x5db6 <__fixunssfsi+0x26>
    5d94:	9f 57       	subi	r25, 0x7F	; 127
    5d96:	90 f0       	brcs	.+36     	; 0x5dbc <__fixunssfsi+0x2c>
    5d98:	b9 2f       	mov	r27, r25
    5d9a:	99 27       	eor	r25, r25
    5d9c:	b7 51       	subi	r27, 0x17	; 23
    5d9e:	a0 f0       	brcs	.+40     	; 0x5dc8 <__fixunssfsi+0x38>
    5da0:	d1 f0       	breq	.+52     	; 0x5dd6 <__fixunssfsi+0x46>
    5da2:	66 0f       	add	r22, r22
    5da4:	77 1f       	adc	r23, r23
    5da6:	88 1f       	adc	r24, r24
    5da8:	99 1f       	adc	r25, r25
    5daa:	1a f0       	brmi	.+6      	; 0x5db2 <__fixunssfsi+0x22>
    5dac:	ba 95       	dec	r27
    5dae:	c9 f7       	brne	.-14     	; 0x5da2 <__fixunssfsi+0x12>
    5db0:	12 c0       	rjmp	.+36     	; 0x5dd6 <__fixunssfsi+0x46>
    5db2:	b1 30       	cpi	r27, 0x01	; 1
    5db4:	81 f0       	breq	.+32     	; 0x5dd6 <__fixunssfsi+0x46>
    5db6:	9f d0       	rcall	.+318    	; 0x5ef6 <__fp_zero>
    5db8:	b1 e0       	ldi	r27, 0x01	; 1
    5dba:	08 95       	ret
    5dbc:	9c c0       	rjmp	.+312    	; 0x5ef6 <__fp_zero>
    5dbe:	67 2f       	mov	r22, r23
    5dc0:	78 2f       	mov	r23, r24
    5dc2:	88 27       	eor	r24, r24
    5dc4:	b8 5f       	subi	r27, 0xF8	; 248
    5dc6:	39 f0       	breq	.+14     	; 0x5dd6 <__fixunssfsi+0x46>
    5dc8:	b9 3f       	cpi	r27, 0xF9	; 249
    5dca:	cc f3       	brlt	.-14     	; 0x5dbe <__fixunssfsi+0x2e>
    5dcc:	86 95       	lsr	r24
    5dce:	77 95       	ror	r23
    5dd0:	67 95       	ror	r22
    5dd2:	b3 95       	inc	r27
    5dd4:	d9 f7       	brne	.-10     	; 0x5dcc <__fixunssfsi+0x3c>
    5dd6:	3e f4       	brtc	.+14     	; 0x5de6 <__fixunssfsi+0x56>
    5dd8:	90 95       	com	r25
    5dda:	80 95       	com	r24
    5ddc:	70 95       	com	r23
    5dde:	61 95       	neg	r22
    5de0:	7f 4f       	sbci	r23, 0xFF	; 255
    5de2:	8f 4f       	sbci	r24, 0xFF	; 255
    5de4:	9f 4f       	sbci	r25, 0xFF	; 255
    5de6:	08 95       	ret

00005de8 <__floatunsisf>:
    5de8:	e8 94       	clt
    5dea:	09 c0       	rjmp	.+18     	; 0x5dfe <__floatsisf+0x12>

00005dec <__floatsisf>:
    5dec:	97 fb       	bst	r25, 7
    5dee:	3e f4       	brtc	.+14     	; 0x5dfe <__floatsisf+0x12>
    5df0:	90 95       	com	r25
    5df2:	80 95       	com	r24
    5df4:	70 95       	com	r23
    5df6:	61 95       	neg	r22
    5df8:	7f 4f       	sbci	r23, 0xFF	; 255
    5dfa:	8f 4f       	sbci	r24, 0xFF	; 255
    5dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    5dfe:	99 23       	and	r25, r25
    5e00:	a9 f0       	breq	.+42     	; 0x5e2c <__floatsisf+0x40>
    5e02:	f9 2f       	mov	r31, r25
    5e04:	96 e9       	ldi	r25, 0x96	; 150
    5e06:	bb 27       	eor	r27, r27
    5e08:	93 95       	inc	r25
    5e0a:	f6 95       	lsr	r31
    5e0c:	87 95       	ror	r24
    5e0e:	77 95       	ror	r23
    5e10:	67 95       	ror	r22
    5e12:	b7 95       	ror	r27
    5e14:	f1 11       	cpse	r31, r1
    5e16:	f8 cf       	rjmp	.-16     	; 0x5e08 <__floatsisf+0x1c>
    5e18:	fa f4       	brpl	.+62     	; 0x5e58 <__floatsisf+0x6c>
    5e1a:	bb 0f       	add	r27, r27
    5e1c:	11 f4       	brne	.+4      	; 0x5e22 <__floatsisf+0x36>
    5e1e:	60 ff       	sbrs	r22, 0
    5e20:	1b c0       	rjmp	.+54     	; 0x5e58 <__floatsisf+0x6c>
    5e22:	6f 5f       	subi	r22, 0xFF	; 255
    5e24:	7f 4f       	sbci	r23, 0xFF	; 255
    5e26:	8f 4f       	sbci	r24, 0xFF	; 255
    5e28:	9f 4f       	sbci	r25, 0xFF	; 255
    5e2a:	16 c0       	rjmp	.+44     	; 0x5e58 <__floatsisf+0x6c>
    5e2c:	88 23       	and	r24, r24
    5e2e:	11 f0       	breq	.+4      	; 0x5e34 <__floatsisf+0x48>
    5e30:	96 e9       	ldi	r25, 0x96	; 150
    5e32:	11 c0       	rjmp	.+34     	; 0x5e56 <__floatsisf+0x6a>
    5e34:	77 23       	and	r23, r23
    5e36:	21 f0       	breq	.+8      	; 0x5e40 <__floatsisf+0x54>
    5e38:	9e e8       	ldi	r25, 0x8E	; 142
    5e3a:	87 2f       	mov	r24, r23
    5e3c:	76 2f       	mov	r23, r22
    5e3e:	05 c0       	rjmp	.+10     	; 0x5e4a <__floatsisf+0x5e>
    5e40:	66 23       	and	r22, r22
    5e42:	71 f0       	breq	.+28     	; 0x5e60 <__floatsisf+0x74>
    5e44:	96 e8       	ldi	r25, 0x86	; 134
    5e46:	86 2f       	mov	r24, r22
    5e48:	70 e0       	ldi	r23, 0x00	; 0
    5e4a:	60 e0       	ldi	r22, 0x00	; 0
    5e4c:	2a f0       	brmi	.+10     	; 0x5e58 <__floatsisf+0x6c>
    5e4e:	9a 95       	dec	r25
    5e50:	66 0f       	add	r22, r22
    5e52:	77 1f       	adc	r23, r23
    5e54:	88 1f       	adc	r24, r24
    5e56:	da f7       	brpl	.-10     	; 0x5e4e <__floatsisf+0x62>
    5e58:	88 0f       	add	r24, r24
    5e5a:	96 95       	lsr	r25
    5e5c:	87 95       	ror	r24
    5e5e:	97 f9       	bld	r25, 7
    5e60:	08 95       	ret

00005e62 <__fp_inf>:
    5e62:	97 f9       	bld	r25, 7
    5e64:	9f 67       	ori	r25, 0x7F	; 127
    5e66:	80 e8       	ldi	r24, 0x80	; 128
    5e68:	70 e0       	ldi	r23, 0x00	; 0
    5e6a:	60 e0       	ldi	r22, 0x00	; 0
    5e6c:	08 95       	ret

00005e6e <__fp_nan>:
    5e6e:	9f ef       	ldi	r25, 0xFF	; 255
    5e70:	80 ec       	ldi	r24, 0xC0	; 192
    5e72:	08 95       	ret

00005e74 <__fp_pscA>:
    5e74:	00 24       	eor	r0, r0
    5e76:	0a 94       	dec	r0
    5e78:	16 16       	cp	r1, r22
    5e7a:	17 06       	cpc	r1, r23
    5e7c:	18 06       	cpc	r1, r24
    5e7e:	09 06       	cpc	r0, r25
    5e80:	08 95       	ret

00005e82 <__fp_pscB>:
    5e82:	00 24       	eor	r0, r0
    5e84:	0a 94       	dec	r0
    5e86:	12 16       	cp	r1, r18
    5e88:	13 06       	cpc	r1, r19
    5e8a:	14 06       	cpc	r1, r20
    5e8c:	05 06       	cpc	r0, r21
    5e8e:	08 95       	ret

00005e90 <__fp_round>:
    5e90:	09 2e       	mov	r0, r25
    5e92:	03 94       	inc	r0
    5e94:	00 0c       	add	r0, r0
    5e96:	11 f4       	brne	.+4      	; 0x5e9c <__fp_round+0xc>
    5e98:	88 23       	and	r24, r24
    5e9a:	52 f0       	brmi	.+20     	; 0x5eb0 <__fp_round+0x20>
    5e9c:	bb 0f       	add	r27, r27
    5e9e:	40 f4       	brcc	.+16     	; 0x5eb0 <__fp_round+0x20>
    5ea0:	bf 2b       	or	r27, r31
    5ea2:	11 f4       	brne	.+4      	; 0x5ea8 <__fp_round+0x18>
    5ea4:	60 ff       	sbrs	r22, 0
    5ea6:	04 c0       	rjmp	.+8      	; 0x5eb0 <__fp_round+0x20>
    5ea8:	6f 5f       	subi	r22, 0xFF	; 255
    5eaa:	7f 4f       	sbci	r23, 0xFF	; 255
    5eac:	8f 4f       	sbci	r24, 0xFF	; 255
    5eae:	9f 4f       	sbci	r25, 0xFF	; 255
    5eb0:	08 95       	ret

00005eb2 <__fp_split3>:
    5eb2:	57 fd       	sbrc	r21, 7
    5eb4:	90 58       	subi	r25, 0x80	; 128
    5eb6:	44 0f       	add	r20, r20
    5eb8:	55 1f       	adc	r21, r21
    5eba:	59 f0       	breq	.+22     	; 0x5ed2 <__fp_splitA+0x10>
    5ebc:	5f 3f       	cpi	r21, 0xFF	; 255
    5ebe:	71 f0       	breq	.+28     	; 0x5edc <__fp_splitA+0x1a>
    5ec0:	47 95       	ror	r20

00005ec2 <__fp_splitA>:
    5ec2:	88 0f       	add	r24, r24
    5ec4:	97 fb       	bst	r25, 7
    5ec6:	99 1f       	adc	r25, r25
    5ec8:	61 f0       	breq	.+24     	; 0x5ee2 <__fp_splitA+0x20>
    5eca:	9f 3f       	cpi	r25, 0xFF	; 255
    5ecc:	79 f0       	breq	.+30     	; 0x5eec <__fp_splitA+0x2a>
    5ece:	87 95       	ror	r24
    5ed0:	08 95       	ret
    5ed2:	12 16       	cp	r1, r18
    5ed4:	13 06       	cpc	r1, r19
    5ed6:	14 06       	cpc	r1, r20
    5ed8:	55 1f       	adc	r21, r21
    5eda:	f2 cf       	rjmp	.-28     	; 0x5ec0 <__fp_split3+0xe>
    5edc:	46 95       	lsr	r20
    5ede:	f1 df       	rcall	.-30     	; 0x5ec2 <__fp_splitA>
    5ee0:	08 c0       	rjmp	.+16     	; 0x5ef2 <__fp_splitA+0x30>
    5ee2:	16 16       	cp	r1, r22
    5ee4:	17 06       	cpc	r1, r23
    5ee6:	18 06       	cpc	r1, r24
    5ee8:	99 1f       	adc	r25, r25
    5eea:	f1 cf       	rjmp	.-30     	; 0x5ece <__fp_splitA+0xc>
    5eec:	86 95       	lsr	r24
    5eee:	71 05       	cpc	r23, r1
    5ef0:	61 05       	cpc	r22, r1
    5ef2:	08 94       	sec
    5ef4:	08 95       	ret

00005ef6 <__fp_zero>:
    5ef6:	e8 94       	clt

00005ef8 <__fp_szero>:
    5ef8:	bb 27       	eor	r27, r27
    5efa:	66 27       	eor	r22, r22
    5efc:	77 27       	eor	r23, r23
    5efe:	cb 01       	movw	r24, r22
    5f00:	97 f9       	bld	r25, 7
    5f02:	08 95       	ret

00005f04 <__mulsf3>:
    5f04:	0b d0       	rcall	.+22     	; 0x5f1c <__mulsf3x>
    5f06:	c4 cf       	rjmp	.-120    	; 0x5e90 <__fp_round>
    5f08:	b5 df       	rcall	.-150    	; 0x5e74 <__fp_pscA>
    5f0a:	28 f0       	brcs	.+10     	; 0x5f16 <__mulsf3+0x12>
    5f0c:	ba df       	rcall	.-140    	; 0x5e82 <__fp_pscB>
    5f0e:	18 f0       	brcs	.+6      	; 0x5f16 <__mulsf3+0x12>
    5f10:	95 23       	and	r25, r21
    5f12:	09 f0       	breq	.+2      	; 0x5f16 <__mulsf3+0x12>
    5f14:	a6 cf       	rjmp	.-180    	; 0x5e62 <__fp_inf>
    5f16:	ab cf       	rjmp	.-170    	; 0x5e6e <__fp_nan>
    5f18:	11 24       	eor	r1, r1
    5f1a:	ee cf       	rjmp	.-36     	; 0x5ef8 <__fp_szero>

00005f1c <__mulsf3x>:
    5f1c:	ca df       	rcall	.-108    	; 0x5eb2 <__fp_split3>
    5f1e:	a0 f3       	brcs	.-24     	; 0x5f08 <__mulsf3+0x4>

00005f20 <__mulsf3_pse>:
    5f20:	95 9f       	mul	r25, r21
    5f22:	d1 f3       	breq	.-12     	; 0x5f18 <__mulsf3+0x14>
    5f24:	95 0f       	add	r25, r21
    5f26:	50 e0       	ldi	r21, 0x00	; 0
    5f28:	55 1f       	adc	r21, r21
    5f2a:	62 9f       	mul	r22, r18
    5f2c:	f0 01       	movw	r30, r0
    5f2e:	72 9f       	mul	r23, r18
    5f30:	bb 27       	eor	r27, r27
    5f32:	f0 0d       	add	r31, r0
    5f34:	b1 1d       	adc	r27, r1
    5f36:	63 9f       	mul	r22, r19
    5f38:	aa 27       	eor	r26, r26
    5f3a:	f0 0d       	add	r31, r0
    5f3c:	b1 1d       	adc	r27, r1
    5f3e:	aa 1f       	adc	r26, r26
    5f40:	64 9f       	mul	r22, r20
    5f42:	66 27       	eor	r22, r22
    5f44:	b0 0d       	add	r27, r0
    5f46:	a1 1d       	adc	r26, r1
    5f48:	66 1f       	adc	r22, r22
    5f4a:	82 9f       	mul	r24, r18
    5f4c:	22 27       	eor	r18, r18
    5f4e:	b0 0d       	add	r27, r0
    5f50:	a1 1d       	adc	r26, r1
    5f52:	62 1f       	adc	r22, r18
    5f54:	73 9f       	mul	r23, r19
    5f56:	b0 0d       	add	r27, r0
    5f58:	a1 1d       	adc	r26, r1
    5f5a:	62 1f       	adc	r22, r18
    5f5c:	83 9f       	mul	r24, r19
    5f5e:	a0 0d       	add	r26, r0
    5f60:	61 1d       	adc	r22, r1
    5f62:	22 1f       	adc	r18, r18
    5f64:	74 9f       	mul	r23, r20
    5f66:	33 27       	eor	r19, r19
    5f68:	a0 0d       	add	r26, r0
    5f6a:	61 1d       	adc	r22, r1
    5f6c:	23 1f       	adc	r18, r19
    5f6e:	84 9f       	mul	r24, r20
    5f70:	60 0d       	add	r22, r0
    5f72:	21 1d       	adc	r18, r1
    5f74:	82 2f       	mov	r24, r18
    5f76:	76 2f       	mov	r23, r22
    5f78:	6a 2f       	mov	r22, r26
    5f7a:	11 24       	eor	r1, r1
    5f7c:	9f 57       	subi	r25, 0x7F	; 127
    5f7e:	50 40       	sbci	r21, 0x00	; 0
    5f80:	8a f0       	brmi	.+34     	; 0x5fa4 <__mulsf3_pse+0x84>
    5f82:	e1 f0       	breq	.+56     	; 0x5fbc <__mulsf3_pse+0x9c>
    5f84:	88 23       	and	r24, r24
    5f86:	4a f0       	brmi	.+18     	; 0x5f9a <__mulsf3_pse+0x7a>
    5f88:	ee 0f       	add	r30, r30
    5f8a:	ff 1f       	adc	r31, r31
    5f8c:	bb 1f       	adc	r27, r27
    5f8e:	66 1f       	adc	r22, r22
    5f90:	77 1f       	adc	r23, r23
    5f92:	88 1f       	adc	r24, r24
    5f94:	91 50       	subi	r25, 0x01	; 1
    5f96:	50 40       	sbci	r21, 0x00	; 0
    5f98:	a9 f7       	brne	.-22     	; 0x5f84 <__mulsf3_pse+0x64>
    5f9a:	9e 3f       	cpi	r25, 0xFE	; 254
    5f9c:	51 05       	cpc	r21, r1
    5f9e:	70 f0       	brcs	.+28     	; 0x5fbc <__mulsf3_pse+0x9c>
    5fa0:	60 cf       	rjmp	.-320    	; 0x5e62 <__fp_inf>
    5fa2:	aa cf       	rjmp	.-172    	; 0x5ef8 <__fp_szero>
    5fa4:	5f 3f       	cpi	r21, 0xFF	; 255
    5fa6:	ec f3       	brlt	.-6      	; 0x5fa2 <__mulsf3_pse+0x82>
    5fa8:	98 3e       	cpi	r25, 0xE8	; 232
    5faa:	dc f3       	brlt	.-10     	; 0x5fa2 <__mulsf3_pse+0x82>
    5fac:	86 95       	lsr	r24
    5fae:	77 95       	ror	r23
    5fb0:	67 95       	ror	r22
    5fb2:	b7 95       	ror	r27
    5fb4:	f7 95       	ror	r31
    5fb6:	e7 95       	ror	r30
    5fb8:	9f 5f       	subi	r25, 0xFF	; 255
    5fba:	c1 f7       	brne	.-16     	; 0x5fac <__mulsf3_pse+0x8c>
    5fbc:	fe 2b       	or	r31, r30
    5fbe:	88 0f       	add	r24, r24
    5fc0:	91 1d       	adc	r25, r1
    5fc2:	96 95       	lsr	r25
    5fc4:	87 95       	ror	r24
    5fc6:	97 f9       	bld	r25, 7
    5fc8:	08 95       	ret

00005fca <vfprintf>:
    5fca:	2f 92       	push	r2
    5fcc:	3f 92       	push	r3
    5fce:	4f 92       	push	r4
    5fd0:	5f 92       	push	r5
    5fd2:	6f 92       	push	r6
    5fd4:	7f 92       	push	r7
    5fd6:	8f 92       	push	r8
    5fd8:	9f 92       	push	r9
    5fda:	af 92       	push	r10
    5fdc:	bf 92       	push	r11
    5fde:	cf 92       	push	r12
    5fe0:	df 92       	push	r13
    5fe2:	ef 92       	push	r14
    5fe4:	ff 92       	push	r15
    5fe6:	0f 93       	push	r16
    5fe8:	1f 93       	push	r17
    5fea:	cf 93       	push	r28
    5fec:	df 93       	push	r29
    5fee:	cd b7       	in	r28, 0x3d	; 61
    5ff0:	de b7       	in	r29, 0x3e	; 62
    5ff2:	60 97       	sbiw	r28, 0x10	; 16
    5ff4:	0f b6       	in	r0, 0x3f	; 63
    5ff6:	f8 94       	cli
    5ff8:	de bf       	out	0x3e, r29	; 62
    5ffa:	0f be       	out	0x3f, r0	; 63
    5ffc:	cd bf       	out	0x3d, r28	; 61
    5ffe:	7c 01       	movw	r14, r24
    6000:	1b 01       	movw	r2, r22
    6002:	6a 01       	movw	r12, r20
    6004:	fc 01       	movw	r30, r24
    6006:	17 82       	std	Z+7, r1	; 0x07
    6008:	16 82       	std	Z+6, r1	; 0x06
    600a:	83 81       	ldd	r24, Z+3	; 0x03
    600c:	81 ff       	sbrs	r24, 1
    600e:	2a c3       	rjmp	.+1620   	; 0x6664 <vfprintf+0x69a>
    6010:	9e 01       	movw	r18, r28
    6012:	2f 5f       	subi	r18, 0xFF	; 255
    6014:	3f 4f       	sbci	r19, 0xFF	; 255
    6016:	39 01       	movw	r6, r18
    6018:	f7 01       	movw	r30, r14
    601a:	93 81       	ldd	r25, Z+3	; 0x03
    601c:	f1 01       	movw	r30, r2
    601e:	93 fd       	sbrc	r25, 3
    6020:	85 91       	lpm	r24, Z+
    6022:	93 ff       	sbrs	r25, 3
    6024:	81 91       	ld	r24, Z+
    6026:	1f 01       	movw	r2, r30
    6028:	88 23       	and	r24, r24
    602a:	09 f4       	brne	.+2      	; 0x602e <vfprintf+0x64>
    602c:	17 c3       	rjmp	.+1582   	; 0x665c <vfprintf+0x692>
    602e:	85 32       	cpi	r24, 0x25	; 37
    6030:	39 f4       	brne	.+14     	; 0x6040 <vfprintf+0x76>
    6032:	93 fd       	sbrc	r25, 3
    6034:	85 91       	lpm	r24, Z+
    6036:	93 ff       	sbrs	r25, 3
    6038:	81 91       	ld	r24, Z+
    603a:	1f 01       	movw	r2, r30
    603c:	85 32       	cpi	r24, 0x25	; 37
    603e:	31 f4       	brne	.+12     	; 0x604c <vfprintf+0x82>
    6040:	b7 01       	movw	r22, r14
    6042:	90 e0       	ldi	r25, 0x00	; 0
    6044:	1d d6       	rcall	.+3130   	; 0x6c80 <fputc>
    6046:	56 01       	movw	r10, r12
    6048:	65 01       	movw	r12, r10
    604a:	e6 cf       	rjmp	.-52     	; 0x6018 <vfprintf+0x4e>
    604c:	10 e0       	ldi	r17, 0x00	; 0
    604e:	51 2c       	mov	r5, r1
    6050:	91 2c       	mov	r9, r1
    6052:	ff e1       	ldi	r31, 0x1F	; 31
    6054:	f9 15       	cp	r31, r9
    6056:	d8 f0       	brcs	.+54     	; 0x608e <vfprintf+0xc4>
    6058:	8b 32       	cpi	r24, 0x2B	; 43
    605a:	79 f0       	breq	.+30     	; 0x607a <vfprintf+0xb0>
    605c:	38 f4       	brcc	.+14     	; 0x606c <vfprintf+0xa2>
    605e:	80 32       	cpi	r24, 0x20	; 32
    6060:	79 f0       	breq	.+30     	; 0x6080 <vfprintf+0xb6>
    6062:	83 32       	cpi	r24, 0x23	; 35
    6064:	a1 f4       	brne	.+40     	; 0x608e <vfprintf+0xc4>
    6066:	f9 2d       	mov	r31, r9
    6068:	f0 61       	ori	r31, 0x10	; 16
    606a:	2e c0       	rjmp	.+92     	; 0x60c8 <vfprintf+0xfe>
    606c:	8d 32       	cpi	r24, 0x2D	; 45
    606e:	61 f0       	breq	.+24     	; 0x6088 <vfprintf+0xbe>
    6070:	80 33       	cpi	r24, 0x30	; 48
    6072:	69 f4       	brne	.+26     	; 0x608e <vfprintf+0xc4>
    6074:	29 2d       	mov	r18, r9
    6076:	21 60       	ori	r18, 0x01	; 1
    6078:	2d c0       	rjmp	.+90     	; 0x60d4 <vfprintf+0x10a>
    607a:	39 2d       	mov	r19, r9
    607c:	32 60       	ori	r19, 0x02	; 2
    607e:	93 2e       	mov	r9, r19
    6080:	89 2d       	mov	r24, r9
    6082:	84 60       	ori	r24, 0x04	; 4
    6084:	98 2e       	mov	r9, r24
    6086:	2a c0       	rjmp	.+84     	; 0x60dc <vfprintf+0x112>
    6088:	e9 2d       	mov	r30, r9
    608a:	e8 60       	ori	r30, 0x08	; 8
    608c:	15 c0       	rjmp	.+42     	; 0x60b8 <vfprintf+0xee>
    608e:	97 fc       	sbrc	r9, 7
    6090:	2d c0       	rjmp	.+90     	; 0x60ec <vfprintf+0x122>
    6092:	20 ed       	ldi	r18, 0xD0	; 208
    6094:	28 0f       	add	r18, r24
    6096:	2a 30       	cpi	r18, 0x0A	; 10
    6098:	88 f4       	brcc	.+34     	; 0x60bc <vfprintf+0xf2>
    609a:	96 fe       	sbrs	r9, 6
    609c:	06 c0       	rjmp	.+12     	; 0x60aa <vfprintf+0xe0>
    609e:	3a e0       	ldi	r19, 0x0A	; 10
    60a0:	13 9f       	mul	r17, r19
    60a2:	20 0d       	add	r18, r0
    60a4:	11 24       	eor	r1, r1
    60a6:	12 2f       	mov	r17, r18
    60a8:	19 c0       	rjmp	.+50     	; 0x60dc <vfprintf+0x112>
    60aa:	8a e0       	ldi	r24, 0x0A	; 10
    60ac:	58 9e       	mul	r5, r24
    60ae:	20 0d       	add	r18, r0
    60b0:	11 24       	eor	r1, r1
    60b2:	52 2e       	mov	r5, r18
    60b4:	e9 2d       	mov	r30, r9
    60b6:	e0 62       	ori	r30, 0x20	; 32
    60b8:	9e 2e       	mov	r9, r30
    60ba:	10 c0       	rjmp	.+32     	; 0x60dc <vfprintf+0x112>
    60bc:	8e 32       	cpi	r24, 0x2E	; 46
    60be:	31 f4       	brne	.+12     	; 0x60cc <vfprintf+0x102>
    60c0:	96 fc       	sbrc	r9, 6
    60c2:	cc c2       	rjmp	.+1432   	; 0x665c <vfprintf+0x692>
    60c4:	f9 2d       	mov	r31, r9
    60c6:	f0 64       	ori	r31, 0x40	; 64
    60c8:	9f 2e       	mov	r9, r31
    60ca:	08 c0       	rjmp	.+16     	; 0x60dc <vfprintf+0x112>
    60cc:	8c 36       	cpi	r24, 0x6C	; 108
    60ce:	21 f4       	brne	.+8      	; 0x60d8 <vfprintf+0x10e>
    60d0:	29 2d       	mov	r18, r9
    60d2:	20 68       	ori	r18, 0x80	; 128
    60d4:	92 2e       	mov	r9, r18
    60d6:	02 c0       	rjmp	.+4      	; 0x60dc <vfprintf+0x112>
    60d8:	88 36       	cpi	r24, 0x68	; 104
    60da:	41 f4       	brne	.+16     	; 0x60ec <vfprintf+0x122>
    60dc:	f1 01       	movw	r30, r2
    60de:	93 fd       	sbrc	r25, 3
    60e0:	85 91       	lpm	r24, Z+
    60e2:	93 ff       	sbrs	r25, 3
    60e4:	81 91       	ld	r24, Z+
    60e6:	1f 01       	movw	r2, r30
    60e8:	81 11       	cpse	r24, r1
    60ea:	b3 cf       	rjmp	.-154    	; 0x6052 <vfprintf+0x88>
    60ec:	9b eb       	ldi	r25, 0xBB	; 187
    60ee:	98 0f       	add	r25, r24
    60f0:	93 30       	cpi	r25, 0x03	; 3
    60f2:	20 f4       	brcc	.+8      	; 0x60fc <vfprintf+0x132>
    60f4:	99 2d       	mov	r25, r9
    60f6:	90 61       	ori	r25, 0x10	; 16
    60f8:	80 5e       	subi	r24, 0xE0	; 224
    60fa:	07 c0       	rjmp	.+14     	; 0x610a <vfprintf+0x140>
    60fc:	9b e9       	ldi	r25, 0x9B	; 155
    60fe:	98 0f       	add	r25, r24
    6100:	93 30       	cpi	r25, 0x03	; 3
    6102:	08 f0       	brcs	.+2      	; 0x6106 <vfprintf+0x13c>
    6104:	59 c1       	rjmp	.+690    	; 0x63b8 <vfprintf+0x3ee>
    6106:	99 2d       	mov	r25, r9
    6108:	9f 7e       	andi	r25, 0xEF	; 239
    610a:	96 ff       	sbrs	r25, 6
    610c:	16 e0       	ldi	r17, 0x06	; 6
    610e:	9f 73       	andi	r25, 0x3F	; 63
    6110:	99 2e       	mov	r9, r25
    6112:	85 36       	cpi	r24, 0x65	; 101
    6114:	19 f4       	brne	.+6      	; 0x611c <vfprintf+0x152>
    6116:	90 64       	ori	r25, 0x40	; 64
    6118:	99 2e       	mov	r9, r25
    611a:	08 c0       	rjmp	.+16     	; 0x612c <vfprintf+0x162>
    611c:	86 36       	cpi	r24, 0x66	; 102
    611e:	21 f4       	brne	.+8      	; 0x6128 <vfprintf+0x15e>
    6120:	39 2f       	mov	r19, r25
    6122:	30 68       	ori	r19, 0x80	; 128
    6124:	93 2e       	mov	r9, r19
    6126:	02 c0       	rjmp	.+4      	; 0x612c <vfprintf+0x162>
    6128:	11 11       	cpse	r17, r1
    612a:	11 50       	subi	r17, 0x01	; 1
    612c:	97 fe       	sbrs	r9, 7
    612e:	07 c0       	rjmp	.+14     	; 0x613e <vfprintf+0x174>
    6130:	1c 33       	cpi	r17, 0x3C	; 60
    6132:	50 f4       	brcc	.+20     	; 0x6148 <vfprintf+0x17e>
    6134:	44 24       	eor	r4, r4
    6136:	43 94       	inc	r4
    6138:	41 0e       	add	r4, r17
    613a:	27 e0       	ldi	r18, 0x07	; 7
    613c:	0b c0       	rjmp	.+22     	; 0x6154 <vfprintf+0x18a>
    613e:	18 30       	cpi	r17, 0x08	; 8
    6140:	38 f0       	brcs	.+14     	; 0x6150 <vfprintf+0x186>
    6142:	27 e0       	ldi	r18, 0x07	; 7
    6144:	17 e0       	ldi	r17, 0x07	; 7
    6146:	05 c0       	rjmp	.+10     	; 0x6152 <vfprintf+0x188>
    6148:	27 e0       	ldi	r18, 0x07	; 7
    614a:	9c e3       	ldi	r25, 0x3C	; 60
    614c:	49 2e       	mov	r4, r25
    614e:	02 c0       	rjmp	.+4      	; 0x6154 <vfprintf+0x18a>
    6150:	21 2f       	mov	r18, r17
    6152:	41 2c       	mov	r4, r1
    6154:	56 01       	movw	r10, r12
    6156:	84 e0       	ldi	r24, 0x04	; 4
    6158:	a8 0e       	add	r10, r24
    615a:	b1 1c       	adc	r11, r1
    615c:	f6 01       	movw	r30, r12
    615e:	60 81       	ld	r22, Z
    6160:	71 81       	ldd	r23, Z+1	; 0x01
    6162:	82 81       	ldd	r24, Z+2	; 0x02
    6164:	93 81       	ldd	r25, Z+3	; 0x03
    6166:	04 2d       	mov	r16, r4
    6168:	a3 01       	movw	r20, r6
    616a:	3d d4       	rcall	.+2170   	; 0x69e6 <__ftoa_engine>
    616c:	6c 01       	movw	r12, r24
    616e:	f9 81       	ldd	r31, Y+1	; 0x01
    6170:	fc 87       	std	Y+12, r31	; 0x0c
    6172:	f0 ff       	sbrs	r31, 0
    6174:	02 c0       	rjmp	.+4      	; 0x617a <vfprintf+0x1b0>
    6176:	f3 ff       	sbrs	r31, 3
    6178:	06 c0       	rjmp	.+12     	; 0x6186 <vfprintf+0x1bc>
    617a:	91 fc       	sbrc	r9, 1
    617c:	06 c0       	rjmp	.+12     	; 0x618a <vfprintf+0x1c0>
    617e:	92 fe       	sbrs	r9, 2
    6180:	06 c0       	rjmp	.+12     	; 0x618e <vfprintf+0x1c4>
    6182:	00 e2       	ldi	r16, 0x20	; 32
    6184:	05 c0       	rjmp	.+10     	; 0x6190 <vfprintf+0x1c6>
    6186:	0d e2       	ldi	r16, 0x2D	; 45
    6188:	03 c0       	rjmp	.+6      	; 0x6190 <vfprintf+0x1c6>
    618a:	0b e2       	ldi	r16, 0x2B	; 43
    618c:	01 c0       	rjmp	.+2      	; 0x6190 <vfprintf+0x1c6>
    618e:	00 e0       	ldi	r16, 0x00	; 0
    6190:	8c 85       	ldd	r24, Y+12	; 0x0c
    6192:	8c 70       	andi	r24, 0x0C	; 12
    6194:	19 f0       	breq	.+6      	; 0x619c <vfprintf+0x1d2>
    6196:	01 11       	cpse	r16, r1
    6198:	43 c2       	rjmp	.+1158   	; 0x6620 <vfprintf+0x656>
    619a:	80 c2       	rjmp	.+1280   	; 0x669c <vfprintf+0x6d2>
    619c:	97 fe       	sbrs	r9, 7
    619e:	10 c0       	rjmp	.+32     	; 0x61c0 <vfprintf+0x1f6>
    61a0:	4c 0c       	add	r4, r12
    61a2:	fc 85       	ldd	r31, Y+12	; 0x0c
    61a4:	f4 ff       	sbrs	r31, 4
    61a6:	04 c0       	rjmp	.+8      	; 0x61b0 <vfprintf+0x1e6>
    61a8:	8a 81       	ldd	r24, Y+2	; 0x02
    61aa:	81 33       	cpi	r24, 0x31	; 49
    61ac:	09 f4       	brne	.+2      	; 0x61b0 <vfprintf+0x1e6>
    61ae:	4a 94       	dec	r4
    61b0:	14 14       	cp	r1, r4
    61b2:	74 f5       	brge	.+92     	; 0x6210 <vfprintf+0x246>
    61b4:	28 e0       	ldi	r18, 0x08	; 8
    61b6:	24 15       	cp	r18, r4
    61b8:	78 f5       	brcc	.+94     	; 0x6218 <vfprintf+0x24e>
    61ba:	88 e0       	ldi	r24, 0x08	; 8
    61bc:	48 2e       	mov	r4, r24
    61be:	2c c0       	rjmp	.+88     	; 0x6218 <vfprintf+0x24e>
    61c0:	96 fc       	sbrc	r9, 6
    61c2:	2a c0       	rjmp	.+84     	; 0x6218 <vfprintf+0x24e>
    61c4:	81 2f       	mov	r24, r17
    61c6:	90 e0       	ldi	r25, 0x00	; 0
    61c8:	8c 15       	cp	r24, r12
    61ca:	9d 05       	cpc	r25, r13
    61cc:	9c f0       	brlt	.+38     	; 0x61f4 <vfprintf+0x22a>
    61ce:	3c ef       	ldi	r19, 0xFC	; 252
    61d0:	c3 16       	cp	r12, r19
    61d2:	3f ef       	ldi	r19, 0xFF	; 255
    61d4:	d3 06       	cpc	r13, r19
    61d6:	74 f0       	brlt	.+28     	; 0x61f4 <vfprintf+0x22a>
    61d8:	89 2d       	mov	r24, r9
    61da:	80 68       	ori	r24, 0x80	; 128
    61dc:	98 2e       	mov	r9, r24
    61de:	0a c0       	rjmp	.+20     	; 0x61f4 <vfprintf+0x22a>
    61e0:	e2 e0       	ldi	r30, 0x02	; 2
    61e2:	f0 e0       	ldi	r31, 0x00	; 0
    61e4:	ec 0f       	add	r30, r28
    61e6:	fd 1f       	adc	r31, r29
    61e8:	e1 0f       	add	r30, r17
    61ea:	f1 1d       	adc	r31, r1
    61ec:	80 81       	ld	r24, Z
    61ee:	80 33       	cpi	r24, 0x30	; 48
    61f0:	19 f4       	brne	.+6      	; 0x61f8 <vfprintf+0x22e>
    61f2:	11 50       	subi	r17, 0x01	; 1
    61f4:	11 11       	cpse	r17, r1
    61f6:	f4 cf       	rjmp	.-24     	; 0x61e0 <vfprintf+0x216>
    61f8:	97 fe       	sbrs	r9, 7
    61fa:	0e c0       	rjmp	.+28     	; 0x6218 <vfprintf+0x24e>
    61fc:	44 24       	eor	r4, r4
    61fe:	43 94       	inc	r4
    6200:	41 0e       	add	r4, r17
    6202:	81 2f       	mov	r24, r17
    6204:	90 e0       	ldi	r25, 0x00	; 0
    6206:	c8 16       	cp	r12, r24
    6208:	d9 06       	cpc	r13, r25
    620a:	2c f4       	brge	.+10     	; 0x6216 <vfprintf+0x24c>
    620c:	1c 19       	sub	r17, r12
    620e:	04 c0       	rjmp	.+8      	; 0x6218 <vfprintf+0x24e>
    6210:	44 24       	eor	r4, r4
    6212:	43 94       	inc	r4
    6214:	01 c0       	rjmp	.+2      	; 0x6218 <vfprintf+0x24e>
    6216:	10 e0       	ldi	r17, 0x00	; 0
    6218:	97 fe       	sbrs	r9, 7
    621a:	06 c0       	rjmp	.+12     	; 0x6228 <vfprintf+0x25e>
    621c:	1c 14       	cp	r1, r12
    621e:	1d 04       	cpc	r1, r13
    6220:	34 f4       	brge	.+12     	; 0x622e <vfprintf+0x264>
    6222:	c6 01       	movw	r24, r12
    6224:	01 96       	adiw	r24, 0x01	; 1
    6226:	05 c0       	rjmp	.+10     	; 0x6232 <vfprintf+0x268>
    6228:	85 e0       	ldi	r24, 0x05	; 5
    622a:	90 e0       	ldi	r25, 0x00	; 0
    622c:	02 c0       	rjmp	.+4      	; 0x6232 <vfprintf+0x268>
    622e:	81 e0       	ldi	r24, 0x01	; 1
    6230:	90 e0       	ldi	r25, 0x00	; 0
    6232:	01 11       	cpse	r16, r1
    6234:	01 96       	adiw	r24, 0x01	; 1
    6236:	11 23       	and	r17, r17
    6238:	31 f0       	breq	.+12     	; 0x6246 <vfprintf+0x27c>
    623a:	21 2f       	mov	r18, r17
    623c:	30 e0       	ldi	r19, 0x00	; 0
    623e:	2f 5f       	subi	r18, 0xFF	; 255
    6240:	3f 4f       	sbci	r19, 0xFF	; 255
    6242:	82 0f       	add	r24, r18
    6244:	93 1f       	adc	r25, r19
    6246:	25 2d       	mov	r18, r5
    6248:	30 e0       	ldi	r19, 0x00	; 0
    624a:	82 17       	cp	r24, r18
    624c:	93 07       	cpc	r25, r19
    624e:	14 f4       	brge	.+4      	; 0x6254 <vfprintf+0x28a>
    6250:	58 1a       	sub	r5, r24
    6252:	01 c0       	rjmp	.+2      	; 0x6256 <vfprintf+0x28c>
    6254:	51 2c       	mov	r5, r1
    6256:	89 2d       	mov	r24, r9
    6258:	89 70       	andi	r24, 0x09	; 9
    625a:	41 f4       	brne	.+16     	; 0x626c <vfprintf+0x2a2>
    625c:	55 20       	and	r5, r5
    625e:	31 f0       	breq	.+12     	; 0x626c <vfprintf+0x2a2>
    6260:	b7 01       	movw	r22, r14
    6262:	80 e2       	ldi	r24, 0x20	; 32
    6264:	90 e0       	ldi	r25, 0x00	; 0
    6266:	0c d5       	rcall	.+2584   	; 0x6c80 <fputc>
    6268:	5a 94       	dec	r5
    626a:	f8 cf       	rjmp	.-16     	; 0x625c <vfprintf+0x292>
    626c:	00 23       	and	r16, r16
    626e:	21 f0       	breq	.+8      	; 0x6278 <vfprintf+0x2ae>
    6270:	b7 01       	movw	r22, r14
    6272:	80 2f       	mov	r24, r16
    6274:	90 e0       	ldi	r25, 0x00	; 0
    6276:	04 d5       	rcall	.+2568   	; 0x6c80 <fputc>
    6278:	93 fc       	sbrc	r9, 3
    627a:	08 c0       	rjmp	.+16     	; 0x628c <vfprintf+0x2c2>
    627c:	55 20       	and	r5, r5
    627e:	31 f0       	breq	.+12     	; 0x628c <vfprintf+0x2c2>
    6280:	b7 01       	movw	r22, r14
    6282:	80 e3       	ldi	r24, 0x30	; 48
    6284:	90 e0       	ldi	r25, 0x00	; 0
    6286:	fc d4       	rcall	.+2552   	; 0x6c80 <fputc>
    6288:	5a 94       	dec	r5
    628a:	f8 cf       	rjmp	.-16     	; 0x627c <vfprintf+0x2b2>
    628c:	97 fe       	sbrs	r9, 7
    628e:	4a c0       	rjmp	.+148    	; 0x6324 <vfprintf+0x35a>
    6290:	46 01       	movw	r8, r12
    6292:	d7 fe       	sbrs	r13, 7
    6294:	02 c0       	rjmp	.+4      	; 0x629a <vfprintf+0x2d0>
    6296:	81 2c       	mov	r8, r1
    6298:	91 2c       	mov	r9, r1
    629a:	c6 01       	movw	r24, r12
    629c:	88 19       	sub	r24, r8
    629e:	99 09       	sbc	r25, r9
    62a0:	f3 01       	movw	r30, r6
    62a2:	e8 0f       	add	r30, r24
    62a4:	f9 1f       	adc	r31, r25
    62a6:	fe 87       	std	Y+14, r31	; 0x0e
    62a8:	ed 87       	std	Y+13, r30	; 0x0d
    62aa:	96 01       	movw	r18, r12
    62ac:	24 19       	sub	r18, r4
    62ae:	31 09       	sbc	r19, r1
    62b0:	38 8b       	std	Y+16, r19	; 0x10
    62b2:	2f 87       	std	Y+15, r18	; 0x0f
    62b4:	01 2f       	mov	r16, r17
    62b6:	10 e0       	ldi	r17, 0x00	; 0
    62b8:	11 95       	neg	r17
    62ba:	01 95       	neg	r16
    62bc:	11 09       	sbc	r17, r1
    62be:	3f ef       	ldi	r19, 0xFF	; 255
    62c0:	83 16       	cp	r8, r19
    62c2:	93 06       	cpc	r9, r19
    62c4:	21 f4       	brne	.+8      	; 0x62ce <vfprintf+0x304>
    62c6:	b7 01       	movw	r22, r14
    62c8:	8e e2       	ldi	r24, 0x2E	; 46
    62ca:	90 e0       	ldi	r25, 0x00	; 0
    62cc:	d9 d4       	rcall	.+2482   	; 0x6c80 <fputc>
    62ce:	c8 14       	cp	r12, r8
    62d0:	d9 04       	cpc	r13, r9
    62d2:	4c f0       	brlt	.+18     	; 0x62e6 <vfprintf+0x31c>
    62d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    62d6:	98 89       	ldd	r25, Y+16	; 0x10
    62d8:	88 15       	cp	r24, r8
    62da:	99 05       	cpc	r25, r9
    62dc:	24 f4       	brge	.+8      	; 0x62e6 <vfprintf+0x31c>
    62de:	ed 85       	ldd	r30, Y+13	; 0x0d
    62e0:	fe 85       	ldd	r31, Y+14	; 0x0e
    62e2:	81 81       	ldd	r24, Z+1	; 0x01
    62e4:	01 c0       	rjmp	.+2      	; 0x62e8 <vfprintf+0x31e>
    62e6:	80 e3       	ldi	r24, 0x30	; 48
    62e8:	f1 e0       	ldi	r31, 0x01	; 1
    62ea:	8f 1a       	sub	r8, r31
    62ec:	91 08       	sbc	r9, r1
    62ee:	2d 85       	ldd	r18, Y+13	; 0x0d
    62f0:	3e 85       	ldd	r19, Y+14	; 0x0e
    62f2:	2f 5f       	subi	r18, 0xFF	; 255
    62f4:	3f 4f       	sbci	r19, 0xFF	; 255
    62f6:	3e 87       	std	Y+14, r19	; 0x0e
    62f8:	2d 87       	std	Y+13, r18	; 0x0d
    62fa:	80 16       	cp	r8, r16
    62fc:	91 06       	cpc	r9, r17
    62fe:	24 f0       	brlt	.+8      	; 0x6308 <vfprintf+0x33e>
    6300:	b7 01       	movw	r22, r14
    6302:	90 e0       	ldi	r25, 0x00	; 0
    6304:	bd d4       	rcall	.+2426   	; 0x6c80 <fputc>
    6306:	db cf       	rjmp	.-74     	; 0x62be <vfprintf+0x2f4>
    6308:	c8 14       	cp	r12, r8
    630a:	d9 04       	cpc	r13, r9
    630c:	41 f4       	brne	.+16     	; 0x631e <vfprintf+0x354>
    630e:	9a 81       	ldd	r25, Y+2	; 0x02
    6310:	96 33       	cpi	r25, 0x36	; 54
    6312:	20 f4       	brcc	.+8      	; 0x631c <vfprintf+0x352>
    6314:	95 33       	cpi	r25, 0x35	; 53
    6316:	19 f4       	brne	.+6      	; 0x631e <vfprintf+0x354>
    6318:	3c 85       	ldd	r19, Y+12	; 0x0c
    631a:	34 ff       	sbrs	r19, 4
    631c:	81 e3       	ldi	r24, 0x31	; 49
    631e:	b7 01       	movw	r22, r14
    6320:	90 e0       	ldi	r25, 0x00	; 0
    6322:	48 c0       	rjmp	.+144    	; 0x63b4 <vfprintf+0x3ea>
    6324:	8a 81       	ldd	r24, Y+2	; 0x02
    6326:	81 33       	cpi	r24, 0x31	; 49
    6328:	19 f0       	breq	.+6      	; 0x6330 <vfprintf+0x366>
    632a:	9c 85       	ldd	r25, Y+12	; 0x0c
    632c:	9f 7e       	andi	r25, 0xEF	; 239
    632e:	9c 87       	std	Y+12, r25	; 0x0c
    6330:	b7 01       	movw	r22, r14
    6332:	90 e0       	ldi	r25, 0x00	; 0
    6334:	a5 d4       	rcall	.+2378   	; 0x6c80 <fputc>
    6336:	11 11       	cpse	r17, r1
    6338:	05 c0       	rjmp	.+10     	; 0x6344 <vfprintf+0x37a>
    633a:	94 fc       	sbrc	r9, 4
    633c:	16 c0       	rjmp	.+44     	; 0x636a <vfprintf+0x3a0>
    633e:	85 e6       	ldi	r24, 0x65	; 101
    6340:	90 e0       	ldi	r25, 0x00	; 0
    6342:	15 c0       	rjmp	.+42     	; 0x636e <vfprintf+0x3a4>
    6344:	b7 01       	movw	r22, r14
    6346:	8e e2       	ldi	r24, 0x2E	; 46
    6348:	90 e0       	ldi	r25, 0x00	; 0
    634a:	9a d4       	rcall	.+2356   	; 0x6c80 <fputc>
    634c:	1e 5f       	subi	r17, 0xFE	; 254
    634e:	82 e0       	ldi	r24, 0x02	; 2
    6350:	01 e0       	ldi	r16, 0x01	; 1
    6352:	08 0f       	add	r16, r24
    6354:	f3 01       	movw	r30, r6
    6356:	e8 0f       	add	r30, r24
    6358:	f1 1d       	adc	r31, r1
    635a:	80 81       	ld	r24, Z
    635c:	b7 01       	movw	r22, r14
    635e:	90 e0       	ldi	r25, 0x00	; 0
    6360:	8f d4       	rcall	.+2334   	; 0x6c80 <fputc>
    6362:	80 2f       	mov	r24, r16
    6364:	01 13       	cpse	r16, r17
    6366:	f4 cf       	rjmp	.-24     	; 0x6350 <vfprintf+0x386>
    6368:	e8 cf       	rjmp	.-48     	; 0x633a <vfprintf+0x370>
    636a:	85 e4       	ldi	r24, 0x45	; 69
    636c:	90 e0       	ldi	r25, 0x00	; 0
    636e:	b7 01       	movw	r22, r14
    6370:	87 d4       	rcall	.+2318   	; 0x6c80 <fputc>
    6372:	d7 fc       	sbrc	r13, 7
    6374:	06 c0       	rjmp	.+12     	; 0x6382 <vfprintf+0x3b8>
    6376:	c1 14       	cp	r12, r1
    6378:	d1 04       	cpc	r13, r1
    637a:	41 f4       	brne	.+16     	; 0x638c <vfprintf+0x3c2>
    637c:	ec 85       	ldd	r30, Y+12	; 0x0c
    637e:	e4 ff       	sbrs	r30, 4
    6380:	05 c0       	rjmp	.+10     	; 0x638c <vfprintf+0x3c2>
    6382:	d1 94       	neg	r13
    6384:	c1 94       	neg	r12
    6386:	d1 08       	sbc	r13, r1
    6388:	8d e2       	ldi	r24, 0x2D	; 45
    638a:	01 c0       	rjmp	.+2      	; 0x638e <vfprintf+0x3c4>
    638c:	8b e2       	ldi	r24, 0x2B	; 43
    638e:	b7 01       	movw	r22, r14
    6390:	90 e0       	ldi	r25, 0x00	; 0
    6392:	76 d4       	rcall	.+2284   	; 0x6c80 <fputc>
    6394:	80 e3       	ldi	r24, 0x30	; 48
    6396:	2a e0       	ldi	r18, 0x0A	; 10
    6398:	c2 16       	cp	r12, r18
    639a:	d1 04       	cpc	r13, r1
    639c:	2c f0       	brlt	.+10     	; 0x63a8 <vfprintf+0x3de>
    639e:	8f 5f       	subi	r24, 0xFF	; 255
    63a0:	fa e0       	ldi	r31, 0x0A	; 10
    63a2:	cf 1a       	sub	r12, r31
    63a4:	d1 08       	sbc	r13, r1
    63a6:	f7 cf       	rjmp	.-18     	; 0x6396 <vfprintf+0x3cc>
    63a8:	b7 01       	movw	r22, r14
    63aa:	90 e0       	ldi	r25, 0x00	; 0
    63ac:	69 d4       	rcall	.+2258   	; 0x6c80 <fputc>
    63ae:	b7 01       	movw	r22, r14
    63b0:	c6 01       	movw	r24, r12
    63b2:	c0 96       	adiw	r24, 0x30	; 48
    63b4:	65 d4       	rcall	.+2250   	; 0x6c80 <fputc>
    63b6:	49 c1       	rjmp	.+658    	; 0x664a <vfprintf+0x680>
    63b8:	83 36       	cpi	r24, 0x63	; 99
    63ba:	31 f0       	breq	.+12     	; 0x63c8 <vfprintf+0x3fe>
    63bc:	83 37       	cpi	r24, 0x73	; 115
    63be:	79 f0       	breq	.+30     	; 0x63de <vfprintf+0x414>
    63c0:	83 35       	cpi	r24, 0x53	; 83
    63c2:	09 f0       	breq	.+2      	; 0x63c6 <vfprintf+0x3fc>
    63c4:	52 c0       	rjmp	.+164    	; 0x646a <vfprintf+0x4a0>
    63c6:	1f c0       	rjmp	.+62     	; 0x6406 <vfprintf+0x43c>
    63c8:	56 01       	movw	r10, r12
    63ca:	32 e0       	ldi	r19, 0x02	; 2
    63cc:	a3 0e       	add	r10, r19
    63ce:	b1 1c       	adc	r11, r1
    63d0:	f6 01       	movw	r30, r12
    63d2:	80 81       	ld	r24, Z
    63d4:	89 83       	std	Y+1, r24	; 0x01
    63d6:	01 e0       	ldi	r16, 0x01	; 1
    63d8:	10 e0       	ldi	r17, 0x00	; 0
    63da:	63 01       	movw	r12, r6
    63dc:	11 c0       	rjmp	.+34     	; 0x6400 <vfprintf+0x436>
    63de:	56 01       	movw	r10, r12
    63e0:	f2 e0       	ldi	r31, 0x02	; 2
    63e2:	af 0e       	add	r10, r31
    63e4:	b1 1c       	adc	r11, r1
    63e6:	f6 01       	movw	r30, r12
    63e8:	c0 80       	ld	r12, Z
    63ea:	d1 80       	ldd	r13, Z+1	; 0x01
    63ec:	96 fe       	sbrs	r9, 6
    63ee:	03 c0       	rjmp	.+6      	; 0x63f6 <vfprintf+0x42c>
    63f0:	61 2f       	mov	r22, r17
    63f2:	70 e0       	ldi	r23, 0x00	; 0
    63f4:	02 c0       	rjmp	.+4      	; 0x63fa <vfprintf+0x430>
    63f6:	6f ef       	ldi	r22, 0xFF	; 255
    63f8:	7f ef       	ldi	r23, 0xFF	; 255
    63fa:	c6 01       	movw	r24, r12
    63fc:	36 d4       	rcall	.+2156   	; 0x6c6a <strnlen>
    63fe:	8c 01       	movw	r16, r24
    6400:	f9 2d       	mov	r31, r9
    6402:	ff 77       	andi	r31, 0x7F	; 127
    6404:	13 c0       	rjmp	.+38     	; 0x642c <vfprintf+0x462>
    6406:	56 01       	movw	r10, r12
    6408:	22 e0       	ldi	r18, 0x02	; 2
    640a:	a2 0e       	add	r10, r18
    640c:	b1 1c       	adc	r11, r1
    640e:	f6 01       	movw	r30, r12
    6410:	c0 80       	ld	r12, Z
    6412:	d1 80       	ldd	r13, Z+1	; 0x01
    6414:	96 fe       	sbrs	r9, 6
    6416:	03 c0       	rjmp	.+6      	; 0x641e <vfprintf+0x454>
    6418:	61 2f       	mov	r22, r17
    641a:	70 e0       	ldi	r23, 0x00	; 0
    641c:	02 c0       	rjmp	.+4      	; 0x6422 <vfprintf+0x458>
    641e:	6f ef       	ldi	r22, 0xFF	; 255
    6420:	7f ef       	ldi	r23, 0xFF	; 255
    6422:	c6 01       	movw	r24, r12
    6424:	b8 d3       	rcall	.+1904   	; 0x6b96 <strnlen_P>
    6426:	8c 01       	movw	r16, r24
    6428:	f9 2d       	mov	r31, r9
    642a:	f0 68       	ori	r31, 0x80	; 128
    642c:	9f 2e       	mov	r9, r31
    642e:	f3 fd       	sbrc	r31, 3
    6430:	18 c0       	rjmp	.+48     	; 0x6462 <vfprintf+0x498>
    6432:	85 2d       	mov	r24, r5
    6434:	90 e0       	ldi	r25, 0x00	; 0
    6436:	08 17       	cp	r16, r24
    6438:	19 07       	cpc	r17, r25
    643a:	98 f4       	brcc	.+38     	; 0x6462 <vfprintf+0x498>
    643c:	b7 01       	movw	r22, r14
    643e:	80 e2       	ldi	r24, 0x20	; 32
    6440:	90 e0       	ldi	r25, 0x00	; 0
    6442:	1e d4       	rcall	.+2108   	; 0x6c80 <fputc>
    6444:	5a 94       	dec	r5
    6446:	f5 cf       	rjmp	.-22     	; 0x6432 <vfprintf+0x468>
    6448:	f6 01       	movw	r30, r12
    644a:	97 fc       	sbrc	r9, 7
    644c:	85 91       	lpm	r24, Z+
    644e:	97 fe       	sbrs	r9, 7
    6450:	81 91       	ld	r24, Z+
    6452:	6f 01       	movw	r12, r30
    6454:	b7 01       	movw	r22, r14
    6456:	90 e0       	ldi	r25, 0x00	; 0
    6458:	13 d4       	rcall	.+2086   	; 0x6c80 <fputc>
    645a:	51 10       	cpse	r5, r1
    645c:	5a 94       	dec	r5
    645e:	01 50       	subi	r16, 0x01	; 1
    6460:	11 09       	sbc	r17, r1
    6462:	01 15       	cp	r16, r1
    6464:	11 05       	cpc	r17, r1
    6466:	81 f7       	brne	.-32     	; 0x6448 <vfprintf+0x47e>
    6468:	f0 c0       	rjmp	.+480    	; 0x664a <vfprintf+0x680>
    646a:	84 36       	cpi	r24, 0x64	; 100
    646c:	11 f0       	breq	.+4      	; 0x6472 <vfprintf+0x4a8>
    646e:	89 36       	cpi	r24, 0x69	; 105
    6470:	59 f5       	brne	.+86     	; 0x64c8 <vfprintf+0x4fe>
    6472:	56 01       	movw	r10, r12
    6474:	97 fe       	sbrs	r9, 7
    6476:	09 c0       	rjmp	.+18     	; 0x648a <vfprintf+0x4c0>
    6478:	24 e0       	ldi	r18, 0x04	; 4
    647a:	a2 0e       	add	r10, r18
    647c:	b1 1c       	adc	r11, r1
    647e:	f6 01       	movw	r30, r12
    6480:	60 81       	ld	r22, Z
    6482:	71 81       	ldd	r23, Z+1	; 0x01
    6484:	82 81       	ldd	r24, Z+2	; 0x02
    6486:	93 81       	ldd	r25, Z+3	; 0x03
    6488:	0a c0       	rjmp	.+20     	; 0x649e <vfprintf+0x4d4>
    648a:	f2 e0       	ldi	r31, 0x02	; 2
    648c:	af 0e       	add	r10, r31
    648e:	b1 1c       	adc	r11, r1
    6490:	f6 01       	movw	r30, r12
    6492:	60 81       	ld	r22, Z
    6494:	71 81       	ldd	r23, Z+1	; 0x01
    6496:	07 2e       	mov	r0, r23
    6498:	00 0c       	add	r0, r0
    649a:	88 0b       	sbc	r24, r24
    649c:	99 0b       	sbc	r25, r25
    649e:	f9 2d       	mov	r31, r9
    64a0:	ff 76       	andi	r31, 0x6F	; 111
    64a2:	9f 2e       	mov	r9, r31
    64a4:	97 ff       	sbrs	r25, 7
    64a6:	09 c0       	rjmp	.+18     	; 0x64ba <vfprintf+0x4f0>
    64a8:	90 95       	com	r25
    64aa:	80 95       	com	r24
    64ac:	70 95       	com	r23
    64ae:	61 95       	neg	r22
    64b0:	7f 4f       	sbci	r23, 0xFF	; 255
    64b2:	8f 4f       	sbci	r24, 0xFF	; 255
    64b4:	9f 4f       	sbci	r25, 0xFF	; 255
    64b6:	f0 68       	ori	r31, 0x80	; 128
    64b8:	9f 2e       	mov	r9, r31
    64ba:	2a e0       	ldi	r18, 0x0A	; 10
    64bc:	30 e0       	ldi	r19, 0x00	; 0
    64be:	a3 01       	movw	r20, r6
    64c0:	8c d4       	rcall	.+2328   	; 0x6dda <__ultoa_invert>
    64c2:	c8 2e       	mov	r12, r24
    64c4:	c6 18       	sub	r12, r6
    64c6:	3e c0       	rjmp	.+124    	; 0x6544 <vfprintf+0x57a>
    64c8:	09 2d       	mov	r16, r9
    64ca:	85 37       	cpi	r24, 0x75	; 117
    64cc:	21 f4       	brne	.+8      	; 0x64d6 <vfprintf+0x50c>
    64ce:	0f 7e       	andi	r16, 0xEF	; 239
    64d0:	2a e0       	ldi	r18, 0x0A	; 10
    64d2:	30 e0       	ldi	r19, 0x00	; 0
    64d4:	1d c0       	rjmp	.+58     	; 0x6510 <vfprintf+0x546>
    64d6:	09 7f       	andi	r16, 0xF9	; 249
    64d8:	8f 36       	cpi	r24, 0x6F	; 111
    64da:	91 f0       	breq	.+36     	; 0x6500 <vfprintf+0x536>
    64dc:	18 f4       	brcc	.+6      	; 0x64e4 <vfprintf+0x51a>
    64de:	88 35       	cpi	r24, 0x58	; 88
    64e0:	59 f0       	breq	.+22     	; 0x64f8 <vfprintf+0x52e>
    64e2:	bc c0       	rjmp	.+376    	; 0x665c <vfprintf+0x692>
    64e4:	80 37       	cpi	r24, 0x70	; 112
    64e6:	19 f0       	breq	.+6      	; 0x64ee <vfprintf+0x524>
    64e8:	88 37       	cpi	r24, 0x78	; 120
    64ea:	11 f0       	breq	.+4      	; 0x64f0 <vfprintf+0x526>
    64ec:	b7 c0       	rjmp	.+366    	; 0x665c <vfprintf+0x692>
    64ee:	00 61       	ori	r16, 0x10	; 16
    64f0:	04 ff       	sbrs	r16, 4
    64f2:	09 c0       	rjmp	.+18     	; 0x6506 <vfprintf+0x53c>
    64f4:	04 60       	ori	r16, 0x04	; 4
    64f6:	07 c0       	rjmp	.+14     	; 0x6506 <vfprintf+0x53c>
    64f8:	94 fe       	sbrs	r9, 4
    64fa:	08 c0       	rjmp	.+16     	; 0x650c <vfprintf+0x542>
    64fc:	06 60       	ori	r16, 0x06	; 6
    64fe:	06 c0       	rjmp	.+12     	; 0x650c <vfprintf+0x542>
    6500:	28 e0       	ldi	r18, 0x08	; 8
    6502:	30 e0       	ldi	r19, 0x00	; 0
    6504:	05 c0       	rjmp	.+10     	; 0x6510 <vfprintf+0x546>
    6506:	20 e1       	ldi	r18, 0x10	; 16
    6508:	30 e0       	ldi	r19, 0x00	; 0
    650a:	02 c0       	rjmp	.+4      	; 0x6510 <vfprintf+0x546>
    650c:	20 e1       	ldi	r18, 0x10	; 16
    650e:	32 e0       	ldi	r19, 0x02	; 2
    6510:	56 01       	movw	r10, r12
    6512:	07 ff       	sbrs	r16, 7
    6514:	09 c0       	rjmp	.+18     	; 0x6528 <vfprintf+0x55e>
    6516:	84 e0       	ldi	r24, 0x04	; 4
    6518:	a8 0e       	add	r10, r24
    651a:	b1 1c       	adc	r11, r1
    651c:	f6 01       	movw	r30, r12
    651e:	60 81       	ld	r22, Z
    6520:	71 81       	ldd	r23, Z+1	; 0x01
    6522:	82 81       	ldd	r24, Z+2	; 0x02
    6524:	93 81       	ldd	r25, Z+3	; 0x03
    6526:	08 c0       	rjmp	.+16     	; 0x6538 <vfprintf+0x56e>
    6528:	f2 e0       	ldi	r31, 0x02	; 2
    652a:	af 0e       	add	r10, r31
    652c:	b1 1c       	adc	r11, r1
    652e:	f6 01       	movw	r30, r12
    6530:	60 81       	ld	r22, Z
    6532:	71 81       	ldd	r23, Z+1	; 0x01
    6534:	80 e0       	ldi	r24, 0x00	; 0
    6536:	90 e0       	ldi	r25, 0x00	; 0
    6538:	a3 01       	movw	r20, r6
    653a:	4f d4       	rcall	.+2206   	; 0x6dda <__ultoa_invert>
    653c:	c8 2e       	mov	r12, r24
    653e:	c6 18       	sub	r12, r6
    6540:	0f 77       	andi	r16, 0x7F	; 127
    6542:	90 2e       	mov	r9, r16
    6544:	96 fe       	sbrs	r9, 6
    6546:	0b c0       	rjmp	.+22     	; 0x655e <vfprintf+0x594>
    6548:	09 2d       	mov	r16, r9
    654a:	0e 7f       	andi	r16, 0xFE	; 254
    654c:	c1 16       	cp	r12, r17
    654e:	50 f4       	brcc	.+20     	; 0x6564 <vfprintf+0x59a>
    6550:	94 fe       	sbrs	r9, 4
    6552:	0a c0       	rjmp	.+20     	; 0x6568 <vfprintf+0x59e>
    6554:	92 fc       	sbrc	r9, 2
    6556:	08 c0       	rjmp	.+16     	; 0x6568 <vfprintf+0x59e>
    6558:	09 2d       	mov	r16, r9
    655a:	0e 7e       	andi	r16, 0xEE	; 238
    655c:	05 c0       	rjmp	.+10     	; 0x6568 <vfprintf+0x59e>
    655e:	dc 2c       	mov	r13, r12
    6560:	09 2d       	mov	r16, r9
    6562:	03 c0       	rjmp	.+6      	; 0x656a <vfprintf+0x5a0>
    6564:	dc 2c       	mov	r13, r12
    6566:	01 c0       	rjmp	.+2      	; 0x656a <vfprintf+0x5a0>
    6568:	d1 2e       	mov	r13, r17
    656a:	04 ff       	sbrs	r16, 4
    656c:	0d c0       	rjmp	.+26     	; 0x6588 <vfprintf+0x5be>
    656e:	fe 01       	movw	r30, r28
    6570:	ec 0d       	add	r30, r12
    6572:	f1 1d       	adc	r31, r1
    6574:	80 81       	ld	r24, Z
    6576:	80 33       	cpi	r24, 0x30	; 48
    6578:	11 f4       	brne	.+4      	; 0x657e <vfprintf+0x5b4>
    657a:	09 7e       	andi	r16, 0xE9	; 233
    657c:	09 c0       	rjmp	.+18     	; 0x6590 <vfprintf+0x5c6>
    657e:	02 ff       	sbrs	r16, 2
    6580:	06 c0       	rjmp	.+12     	; 0x658e <vfprintf+0x5c4>
    6582:	d3 94       	inc	r13
    6584:	d3 94       	inc	r13
    6586:	04 c0       	rjmp	.+8      	; 0x6590 <vfprintf+0x5c6>
    6588:	80 2f       	mov	r24, r16
    658a:	86 78       	andi	r24, 0x86	; 134
    658c:	09 f0       	breq	.+2      	; 0x6590 <vfprintf+0x5c6>
    658e:	d3 94       	inc	r13
    6590:	03 fd       	sbrc	r16, 3
    6592:	10 c0       	rjmp	.+32     	; 0x65b4 <vfprintf+0x5ea>
    6594:	00 ff       	sbrs	r16, 0
    6596:	06 c0       	rjmp	.+12     	; 0x65a4 <vfprintf+0x5da>
    6598:	1c 2d       	mov	r17, r12
    659a:	d5 14       	cp	r13, r5
    659c:	78 f4       	brcc	.+30     	; 0x65bc <vfprintf+0x5f2>
    659e:	15 0d       	add	r17, r5
    65a0:	1d 19       	sub	r17, r13
    65a2:	0c c0       	rjmp	.+24     	; 0x65bc <vfprintf+0x5f2>
    65a4:	d5 14       	cp	r13, r5
    65a6:	50 f4       	brcc	.+20     	; 0x65bc <vfprintf+0x5f2>
    65a8:	b7 01       	movw	r22, r14
    65aa:	80 e2       	ldi	r24, 0x20	; 32
    65ac:	90 e0       	ldi	r25, 0x00	; 0
    65ae:	68 d3       	rcall	.+1744   	; 0x6c80 <fputc>
    65b0:	d3 94       	inc	r13
    65b2:	f8 cf       	rjmp	.-16     	; 0x65a4 <vfprintf+0x5da>
    65b4:	d5 14       	cp	r13, r5
    65b6:	10 f4       	brcc	.+4      	; 0x65bc <vfprintf+0x5f2>
    65b8:	5d 18       	sub	r5, r13
    65ba:	01 c0       	rjmp	.+2      	; 0x65be <vfprintf+0x5f4>
    65bc:	51 2c       	mov	r5, r1
    65be:	04 ff       	sbrs	r16, 4
    65c0:	0f c0       	rjmp	.+30     	; 0x65e0 <vfprintf+0x616>
    65c2:	b7 01       	movw	r22, r14
    65c4:	80 e3       	ldi	r24, 0x30	; 48
    65c6:	90 e0       	ldi	r25, 0x00	; 0
    65c8:	5b d3       	rcall	.+1718   	; 0x6c80 <fputc>
    65ca:	02 ff       	sbrs	r16, 2
    65cc:	16 c0       	rjmp	.+44     	; 0x65fa <vfprintf+0x630>
    65ce:	01 fd       	sbrc	r16, 1
    65d0:	03 c0       	rjmp	.+6      	; 0x65d8 <vfprintf+0x60e>
    65d2:	88 e7       	ldi	r24, 0x78	; 120
    65d4:	90 e0       	ldi	r25, 0x00	; 0
    65d6:	02 c0       	rjmp	.+4      	; 0x65dc <vfprintf+0x612>
    65d8:	88 e5       	ldi	r24, 0x58	; 88
    65da:	90 e0       	ldi	r25, 0x00	; 0
    65dc:	b7 01       	movw	r22, r14
    65de:	0c c0       	rjmp	.+24     	; 0x65f8 <vfprintf+0x62e>
    65e0:	80 2f       	mov	r24, r16
    65e2:	86 78       	andi	r24, 0x86	; 134
    65e4:	51 f0       	breq	.+20     	; 0x65fa <vfprintf+0x630>
    65e6:	01 ff       	sbrs	r16, 1
    65e8:	02 c0       	rjmp	.+4      	; 0x65ee <vfprintf+0x624>
    65ea:	8b e2       	ldi	r24, 0x2B	; 43
    65ec:	01 c0       	rjmp	.+2      	; 0x65f0 <vfprintf+0x626>
    65ee:	80 e2       	ldi	r24, 0x20	; 32
    65f0:	07 fd       	sbrc	r16, 7
    65f2:	8d e2       	ldi	r24, 0x2D	; 45
    65f4:	b7 01       	movw	r22, r14
    65f6:	90 e0       	ldi	r25, 0x00	; 0
    65f8:	43 d3       	rcall	.+1670   	; 0x6c80 <fputc>
    65fa:	c1 16       	cp	r12, r17
    65fc:	30 f4       	brcc	.+12     	; 0x660a <vfprintf+0x640>
    65fe:	b7 01       	movw	r22, r14
    6600:	80 e3       	ldi	r24, 0x30	; 48
    6602:	90 e0       	ldi	r25, 0x00	; 0
    6604:	3d d3       	rcall	.+1658   	; 0x6c80 <fputc>
    6606:	11 50       	subi	r17, 0x01	; 1
    6608:	f8 cf       	rjmp	.-16     	; 0x65fa <vfprintf+0x630>
    660a:	ca 94       	dec	r12
    660c:	f3 01       	movw	r30, r6
    660e:	ec 0d       	add	r30, r12
    6610:	f1 1d       	adc	r31, r1
    6612:	80 81       	ld	r24, Z
    6614:	b7 01       	movw	r22, r14
    6616:	90 e0       	ldi	r25, 0x00	; 0
    6618:	33 d3       	rcall	.+1638   	; 0x6c80 <fputc>
    661a:	c1 10       	cpse	r12, r1
    661c:	f6 cf       	rjmp	.-20     	; 0x660a <vfprintf+0x640>
    661e:	15 c0       	rjmp	.+42     	; 0x664a <vfprintf+0x680>
    6620:	f4 e0       	ldi	r31, 0x04	; 4
    6622:	f5 15       	cp	r31, r5
    6624:	50 f5       	brcc	.+84     	; 0x667a <vfprintf+0x6b0>
    6626:	84 e0       	ldi	r24, 0x04	; 4
    6628:	58 1a       	sub	r5, r24
    662a:	93 fe       	sbrs	r9, 3
    662c:	1e c0       	rjmp	.+60     	; 0x666a <vfprintf+0x6a0>
    662e:	01 11       	cpse	r16, r1
    6630:	25 c0       	rjmp	.+74     	; 0x667c <vfprintf+0x6b2>
    6632:	2c 85       	ldd	r18, Y+12	; 0x0c
    6634:	23 ff       	sbrs	r18, 3
    6636:	27 c0       	rjmp	.+78     	; 0x6686 <vfprintf+0x6bc>
    6638:	0a e9       	ldi	r16, 0x9A	; 154
    663a:	11 e0       	ldi	r17, 0x01	; 1
    663c:	39 2d       	mov	r19, r9
    663e:	30 71       	andi	r19, 0x10	; 16
    6640:	93 2e       	mov	r9, r19
    6642:	f8 01       	movw	r30, r16
    6644:	84 91       	lpm	r24, Z
    6646:	81 11       	cpse	r24, r1
    6648:	21 c0       	rjmp	.+66     	; 0x668c <vfprintf+0x6c2>
    664a:	55 20       	and	r5, r5
    664c:	09 f4       	brne	.+2      	; 0x6650 <vfprintf+0x686>
    664e:	fc cc       	rjmp	.-1544   	; 0x6048 <vfprintf+0x7e>
    6650:	b7 01       	movw	r22, r14
    6652:	80 e2       	ldi	r24, 0x20	; 32
    6654:	90 e0       	ldi	r25, 0x00	; 0
    6656:	14 d3       	rcall	.+1576   	; 0x6c80 <fputc>
    6658:	5a 94       	dec	r5
    665a:	f7 cf       	rjmp	.-18     	; 0x664a <vfprintf+0x680>
    665c:	f7 01       	movw	r30, r14
    665e:	86 81       	ldd	r24, Z+6	; 0x06
    6660:	97 81       	ldd	r25, Z+7	; 0x07
    6662:	23 c0       	rjmp	.+70     	; 0x66aa <vfprintf+0x6e0>
    6664:	8f ef       	ldi	r24, 0xFF	; 255
    6666:	9f ef       	ldi	r25, 0xFF	; 255
    6668:	20 c0       	rjmp	.+64     	; 0x66aa <vfprintf+0x6e0>
    666a:	b7 01       	movw	r22, r14
    666c:	80 e2       	ldi	r24, 0x20	; 32
    666e:	90 e0       	ldi	r25, 0x00	; 0
    6670:	07 d3       	rcall	.+1550   	; 0x6c80 <fputc>
    6672:	5a 94       	dec	r5
    6674:	51 10       	cpse	r5, r1
    6676:	f9 cf       	rjmp	.-14     	; 0x666a <vfprintf+0x6a0>
    6678:	da cf       	rjmp	.-76     	; 0x662e <vfprintf+0x664>
    667a:	51 2c       	mov	r5, r1
    667c:	b7 01       	movw	r22, r14
    667e:	80 2f       	mov	r24, r16
    6680:	90 e0       	ldi	r25, 0x00	; 0
    6682:	fe d2       	rcall	.+1532   	; 0x6c80 <fputc>
    6684:	d6 cf       	rjmp	.-84     	; 0x6632 <vfprintf+0x668>
    6686:	0e e9       	ldi	r16, 0x9E	; 158
    6688:	11 e0       	ldi	r17, 0x01	; 1
    668a:	d8 cf       	rjmp	.-80     	; 0x663c <vfprintf+0x672>
    668c:	91 10       	cpse	r9, r1
    668e:	80 52       	subi	r24, 0x20	; 32
    6690:	b7 01       	movw	r22, r14
    6692:	90 e0       	ldi	r25, 0x00	; 0
    6694:	f5 d2       	rcall	.+1514   	; 0x6c80 <fputc>
    6696:	0f 5f       	subi	r16, 0xFF	; 255
    6698:	1f 4f       	sbci	r17, 0xFF	; 255
    669a:	d3 cf       	rjmp	.-90     	; 0x6642 <vfprintf+0x678>
    669c:	23 e0       	ldi	r18, 0x03	; 3
    669e:	25 15       	cp	r18, r5
    66a0:	10 f4       	brcc	.+4      	; 0x66a6 <vfprintf+0x6dc>
    66a2:	83 e0       	ldi	r24, 0x03	; 3
    66a4:	c1 cf       	rjmp	.-126    	; 0x6628 <vfprintf+0x65e>
    66a6:	51 2c       	mov	r5, r1
    66a8:	c4 cf       	rjmp	.-120    	; 0x6632 <vfprintf+0x668>
    66aa:	60 96       	adiw	r28, 0x10	; 16
    66ac:	0f b6       	in	r0, 0x3f	; 63
    66ae:	f8 94       	cli
    66b0:	de bf       	out	0x3e, r29	; 62
    66b2:	0f be       	out	0x3f, r0	; 63
    66b4:	cd bf       	out	0x3d, r28	; 61
    66b6:	df 91       	pop	r29
    66b8:	cf 91       	pop	r28
    66ba:	1f 91       	pop	r17
    66bc:	0f 91       	pop	r16
    66be:	ff 90       	pop	r15
    66c0:	ef 90       	pop	r14
    66c2:	df 90       	pop	r13
    66c4:	cf 90       	pop	r12
    66c6:	bf 90       	pop	r11
    66c8:	af 90       	pop	r10
    66ca:	9f 90       	pop	r9
    66cc:	8f 90       	pop	r8
    66ce:	7f 90       	pop	r7
    66d0:	6f 90       	pop	r6
    66d2:	5f 90       	pop	r5
    66d4:	4f 90       	pop	r4
    66d6:	3f 90       	pop	r3
    66d8:	2f 90       	pop	r2
    66da:	08 95       	ret

000066dc <__divmodhi4>:
    66dc:	97 fb       	bst	r25, 7
    66de:	07 2e       	mov	r0, r23
    66e0:	16 f4       	brtc	.+4      	; 0x66e6 <__divmodhi4+0xa>
    66e2:	00 94       	com	r0
    66e4:	06 d0       	rcall	.+12     	; 0x66f2 <__divmodhi4_neg1>
    66e6:	77 fd       	sbrc	r23, 7
    66e8:	08 d0       	rcall	.+16     	; 0x66fa <__divmodhi4_neg2>
    66ea:	44 d0       	rcall	.+136    	; 0x6774 <__udivmodhi4>
    66ec:	07 fc       	sbrc	r0, 7
    66ee:	05 d0       	rcall	.+10     	; 0x66fa <__divmodhi4_neg2>
    66f0:	3e f4       	brtc	.+14     	; 0x6700 <__divmodhi4_exit>

000066f2 <__divmodhi4_neg1>:
    66f2:	90 95       	com	r25
    66f4:	81 95       	neg	r24
    66f6:	9f 4f       	sbci	r25, 0xFF	; 255
    66f8:	08 95       	ret

000066fa <__divmodhi4_neg2>:
    66fa:	70 95       	com	r23
    66fc:	61 95       	neg	r22
    66fe:	7f 4f       	sbci	r23, 0xFF	; 255

00006700 <__divmodhi4_exit>:
    6700:	08 95       	ret

00006702 <__udivmodsi4>:
    6702:	a1 e2       	ldi	r26, 0x21	; 33
    6704:	1a 2e       	mov	r1, r26
    6706:	aa 1b       	sub	r26, r26
    6708:	bb 1b       	sub	r27, r27
    670a:	fd 01       	movw	r30, r26
    670c:	0d c0       	rjmp	.+26     	; 0x6728 <__udivmodsi4_ep>

0000670e <__udivmodsi4_loop>:
    670e:	aa 1f       	adc	r26, r26
    6710:	bb 1f       	adc	r27, r27
    6712:	ee 1f       	adc	r30, r30
    6714:	ff 1f       	adc	r31, r31
    6716:	a2 17       	cp	r26, r18
    6718:	b3 07       	cpc	r27, r19
    671a:	e4 07       	cpc	r30, r20
    671c:	f5 07       	cpc	r31, r21
    671e:	20 f0       	brcs	.+8      	; 0x6728 <__udivmodsi4_ep>
    6720:	a2 1b       	sub	r26, r18
    6722:	b3 0b       	sbc	r27, r19
    6724:	e4 0b       	sbc	r30, r20
    6726:	f5 0b       	sbc	r31, r21

00006728 <__udivmodsi4_ep>:
    6728:	66 1f       	adc	r22, r22
    672a:	77 1f       	adc	r23, r23
    672c:	88 1f       	adc	r24, r24
    672e:	99 1f       	adc	r25, r25
    6730:	1a 94       	dec	r1
    6732:	69 f7       	brne	.-38     	; 0x670e <__udivmodsi4_loop>
    6734:	60 95       	com	r22
    6736:	70 95       	com	r23
    6738:	80 95       	com	r24
    673a:	90 95       	com	r25
    673c:	9b 01       	movw	r18, r22
    673e:	ac 01       	movw	r20, r24
    6740:	bd 01       	movw	r22, r26
    6742:	cf 01       	movw	r24, r30
    6744:	08 95       	ret

00006746 <__tablejump2__>:
    6746:	ee 0f       	add	r30, r30
    6748:	ff 1f       	adc	r31, r31
    674a:	88 1f       	adc	r24, r24
    674c:	8b bf       	out	0x3b, r24	; 59
    674e:	07 90       	elpm	r0, Z+
    6750:	f6 91       	elpm	r31, Z
    6752:	e0 2d       	mov	r30, r0
    6754:	19 94       	eijmp

00006756 <__umulhisi3>:
    6756:	a2 9f       	mul	r26, r18
    6758:	b0 01       	movw	r22, r0
    675a:	b3 9f       	mul	r27, r19
    675c:	c0 01       	movw	r24, r0
    675e:	a3 9f       	mul	r26, r19
    6760:	70 0d       	add	r23, r0
    6762:	81 1d       	adc	r24, r1
    6764:	11 24       	eor	r1, r1
    6766:	91 1d       	adc	r25, r1
    6768:	b2 9f       	mul	r27, r18
    676a:	70 0d       	add	r23, r0
    676c:	81 1d       	adc	r24, r1
    676e:	11 24       	eor	r1, r1
    6770:	91 1d       	adc	r25, r1
    6772:	08 95       	ret

00006774 <__udivmodhi4>:
    6774:	aa 1b       	sub	r26, r26
    6776:	bb 1b       	sub	r27, r27
    6778:	51 e1       	ldi	r21, 0x11	; 17
    677a:	07 c0       	rjmp	.+14     	; 0x678a <__udivmodhi4_ep>

0000677c <__udivmodhi4_loop>:
    677c:	aa 1f       	adc	r26, r26
    677e:	bb 1f       	adc	r27, r27
    6780:	a6 17       	cp	r26, r22
    6782:	b7 07       	cpc	r27, r23
    6784:	10 f0       	brcs	.+4      	; 0x678a <__udivmodhi4_ep>
    6786:	a6 1b       	sub	r26, r22
    6788:	b7 0b       	sbc	r27, r23

0000678a <__udivmodhi4_ep>:
    678a:	88 1f       	adc	r24, r24
    678c:	99 1f       	adc	r25, r25
    678e:	5a 95       	dec	r21
    6790:	a9 f7       	brne	.-22     	; 0x677c <__udivmodhi4_loop>
    6792:	80 95       	com	r24
    6794:	90 95       	com	r25
    6796:	bc 01       	movw	r22, r24
    6798:	cd 01       	movw	r24, r26
    679a:	08 95       	ret

0000679c <malloc>:
    679c:	0f 93       	push	r16
    679e:	1f 93       	push	r17
    67a0:	cf 93       	push	r28
    67a2:	df 93       	push	r29
    67a4:	82 30       	cpi	r24, 0x02	; 2
    67a6:	91 05       	cpc	r25, r1
    67a8:	10 f4       	brcc	.+4      	; 0x67ae <malloc+0x12>
    67aa:	82 e0       	ldi	r24, 0x02	; 2
    67ac:	90 e0       	ldi	r25, 0x00	; 0
    67ae:	e0 91 f3 17 	lds	r30, 0x17F3	; 0x8017f3 <__flp>
    67b2:	f0 91 f4 17 	lds	r31, 0x17F4	; 0x8017f4 <__flp+0x1>
    67b6:	20 e0       	ldi	r18, 0x00	; 0
    67b8:	30 e0       	ldi	r19, 0x00	; 0
    67ba:	a0 e0       	ldi	r26, 0x00	; 0
    67bc:	b0 e0       	ldi	r27, 0x00	; 0
    67be:	30 97       	sbiw	r30, 0x00	; 0
    67c0:	19 f1       	breq	.+70     	; 0x6808 <malloc+0x6c>
    67c2:	40 81       	ld	r20, Z
    67c4:	51 81       	ldd	r21, Z+1	; 0x01
    67c6:	02 81       	ldd	r16, Z+2	; 0x02
    67c8:	13 81       	ldd	r17, Z+3	; 0x03
    67ca:	48 17       	cp	r20, r24
    67cc:	59 07       	cpc	r21, r25
    67ce:	c8 f0       	brcs	.+50     	; 0x6802 <malloc+0x66>
    67d0:	84 17       	cp	r24, r20
    67d2:	95 07       	cpc	r25, r21
    67d4:	69 f4       	brne	.+26     	; 0x67f0 <malloc+0x54>
    67d6:	10 97       	sbiw	r26, 0x00	; 0
    67d8:	31 f0       	breq	.+12     	; 0x67e6 <malloc+0x4a>
    67da:	12 96       	adiw	r26, 0x02	; 2
    67dc:	0c 93       	st	X, r16
    67de:	12 97       	sbiw	r26, 0x02	; 2
    67e0:	13 96       	adiw	r26, 0x03	; 3
    67e2:	1c 93       	st	X, r17
    67e4:	27 c0       	rjmp	.+78     	; 0x6834 <malloc+0x98>
    67e6:	00 93 f3 17 	sts	0x17F3, r16	; 0x8017f3 <__flp>
    67ea:	10 93 f4 17 	sts	0x17F4, r17	; 0x8017f4 <__flp+0x1>
    67ee:	22 c0       	rjmp	.+68     	; 0x6834 <malloc+0x98>
    67f0:	21 15       	cp	r18, r1
    67f2:	31 05       	cpc	r19, r1
    67f4:	19 f0       	breq	.+6      	; 0x67fc <malloc+0x60>
    67f6:	42 17       	cp	r20, r18
    67f8:	53 07       	cpc	r21, r19
    67fa:	18 f4       	brcc	.+6      	; 0x6802 <malloc+0x66>
    67fc:	9a 01       	movw	r18, r20
    67fe:	bd 01       	movw	r22, r26
    6800:	ef 01       	movw	r28, r30
    6802:	df 01       	movw	r26, r30
    6804:	f8 01       	movw	r30, r16
    6806:	db cf       	rjmp	.-74     	; 0x67be <malloc+0x22>
    6808:	21 15       	cp	r18, r1
    680a:	31 05       	cpc	r19, r1
    680c:	f9 f0       	breq	.+62     	; 0x684c <malloc+0xb0>
    680e:	28 1b       	sub	r18, r24
    6810:	39 0b       	sbc	r19, r25
    6812:	24 30       	cpi	r18, 0x04	; 4
    6814:	31 05       	cpc	r19, r1
    6816:	80 f4       	brcc	.+32     	; 0x6838 <malloc+0x9c>
    6818:	8a 81       	ldd	r24, Y+2	; 0x02
    681a:	9b 81       	ldd	r25, Y+3	; 0x03
    681c:	61 15       	cp	r22, r1
    681e:	71 05       	cpc	r23, r1
    6820:	21 f0       	breq	.+8      	; 0x682a <malloc+0x8e>
    6822:	fb 01       	movw	r30, r22
    6824:	93 83       	std	Z+3, r25	; 0x03
    6826:	82 83       	std	Z+2, r24	; 0x02
    6828:	04 c0       	rjmp	.+8      	; 0x6832 <malloc+0x96>
    682a:	90 93 f4 17 	sts	0x17F4, r25	; 0x8017f4 <__flp+0x1>
    682e:	80 93 f3 17 	sts	0x17F3, r24	; 0x8017f3 <__flp>
    6832:	fe 01       	movw	r30, r28
    6834:	32 96       	adiw	r30, 0x02	; 2
    6836:	44 c0       	rjmp	.+136    	; 0x68c0 <malloc+0x124>
    6838:	fe 01       	movw	r30, r28
    683a:	e2 0f       	add	r30, r18
    683c:	f3 1f       	adc	r31, r19
    683e:	81 93       	st	Z+, r24
    6840:	91 93       	st	Z+, r25
    6842:	22 50       	subi	r18, 0x02	; 2
    6844:	31 09       	sbc	r19, r1
    6846:	39 83       	std	Y+1, r19	; 0x01
    6848:	28 83       	st	Y, r18
    684a:	3a c0       	rjmp	.+116    	; 0x68c0 <malloc+0x124>
    684c:	20 91 f1 17 	lds	r18, 0x17F1	; 0x8017f1 <__brkval>
    6850:	30 91 f2 17 	lds	r19, 0x17F2	; 0x8017f2 <__brkval+0x1>
    6854:	23 2b       	or	r18, r19
    6856:	41 f4       	brne	.+16     	; 0x6868 <malloc+0xcc>
    6858:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    685c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6860:	30 93 f2 17 	sts	0x17F2, r19	; 0x8017f2 <__brkval+0x1>
    6864:	20 93 f1 17 	sts	0x17F1, r18	; 0x8017f1 <__brkval>
    6868:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    686c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6870:	21 15       	cp	r18, r1
    6872:	31 05       	cpc	r19, r1
    6874:	41 f4       	brne	.+16     	; 0x6886 <malloc+0xea>
    6876:	2d b7       	in	r18, 0x3d	; 61
    6878:	3e b7       	in	r19, 0x3e	; 62
    687a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    687e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6882:	24 1b       	sub	r18, r20
    6884:	35 0b       	sbc	r19, r21
    6886:	e0 91 f1 17 	lds	r30, 0x17F1	; 0x8017f1 <__brkval>
    688a:	f0 91 f2 17 	lds	r31, 0x17F2	; 0x8017f2 <__brkval+0x1>
    688e:	e2 17       	cp	r30, r18
    6890:	f3 07       	cpc	r31, r19
    6892:	a0 f4       	brcc	.+40     	; 0x68bc <malloc+0x120>
    6894:	2e 1b       	sub	r18, r30
    6896:	3f 0b       	sbc	r19, r31
    6898:	28 17       	cp	r18, r24
    689a:	39 07       	cpc	r19, r25
    689c:	78 f0       	brcs	.+30     	; 0x68bc <malloc+0x120>
    689e:	ac 01       	movw	r20, r24
    68a0:	4e 5f       	subi	r20, 0xFE	; 254
    68a2:	5f 4f       	sbci	r21, 0xFF	; 255
    68a4:	24 17       	cp	r18, r20
    68a6:	35 07       	cpc	r19, r21
    68a8:	48 f0       	brcs	.+18     	; 0x68bc <malloc+0x120>
    68aa:	4e 0f       	add	r20, r30
    68ac:	5f 1f       	adc	r21, r31
    68ae:	50 93 f2 17 	sts	0x17F2, r21	; 0x8017f2 <__brkval+0x1>
    68b2:	40 93 f1 17 	sts	0x17F1, r20	; 0x8017f1 <__brkval>
    68b6:	81 93       	st	Z+, r24
    68b8:	91 93       	st	Z+, r25
    68ba:	02 c0       	rjmp	.+4      	; 0x68c0 <malloc+0x124>
    68bc:	e0 e0       	ldi	r30, 0x00	; 0
    68be:	f0 e0       	ldi	r31, 0x00	; 0
    68c0:	cf 01       	movw	r24, r30
    68c2:	df 91       	pop	r29
    68c4:	cf 91       	pop	r28
    68c6:	1f 91       	pop	r17
    68c8:	0f 91       	pop	r16
    68ca:	08 95       	ret

000068cc <free>:
    68cc:	cf 93       	push	r28
    68ce:	df 93       	push	r29
    68d0:	00 97       	sbiw	r24, 0x00	; 0
    68d2:	09 f4       	brne	.+2      	; 0x68d6 <free+0xa>
    68d4:	81 c0       	rjmp	.+258    	; 0x69d8 <free+0x10c>
    68d6:	fc 01       	movw	r30, r24
    68d8:	32 97       	sbiw	r30, 0x02	; 2
    68da:	13 82       	std	Z+3, r1	; 0x03
    68dc:	12 82       	std	Z+2, r1	; 0x02
    68de:	a0 91 f3 17 	lds	r26, 0x17F3	; 0x8017f3 <__flp>
    68e2:	b0 91 f4 17 	lds	r27, 0x17F4	; 0x8017f4 <__flp+0x1>
    68e6:	10 97       	sbiw	r26, 0x00	; 0
    68e8:	81 f4       	brne	.+32     	; 0x690a <free+0x3e>
    68ea:	20 81       	ld	r18, Z
    68ec:	31 81       	ldd	r19, Z+1	; 0x01
    68ee:	82 0f       	add	r24, r18
    68f0:	93 1f       	adc	r25, r19
    68f2:	20 91 f1 17 	lds	r18, 0x17F1	; 0x8017f1 <__brkval>
    68f6:	30 91 f2 17 	lds	r19, 0x17F2	; 0x8017f2 <__brkval+0x1>
    68fa:	28 17       	cp	r18, r24
    68fc:	39 07       	cpc	r19, r25
    68fe:	51 f5       	brne	.+84     	; 0x6954 <free+0x88>
    6900:	f0 93 f2 17 	sts	0x17F2, r31	; 0x8017f2 <__brkval+0x1>
    6904:	e0 93 f1 17 	sts	0x17F1, r30	; 0x8017f1 <__brkval>
    6908:	67 c0       	rjmp	.+206    	; 0x69d8 <free+0x10c>
    690a:	ed 01       	movw	r28, r26
    690c:	20 e0       	ldi	r18, 0x00	; 0
    690e:	30 e0       	ldi	r19, 0x00	; 0
    6910:	ce 17       	cp	r28, r30
    6912:	df 07       	cpc	r29, r31
    6914:	40 f4       	brcc	.+16     	; 0x6926 <free+0x5a>
    6916:	4a 81       	ldd	r20, Y+2	; 0x02
    6918:	5b 81       	ldd	r21, Y+3	; 0x03
    691a:	9e 01       	movw	r18, r28
    691c:	41 15       	cp	r20, r1
    691e:	51 05       	cpc	r21, r1
    6920:	f1 f0       	breq	.+60     	; 0x695e <free+0x92>
    6922:	ea 01       	movw	r28, r20
    6924:	f5 cf       	rjmp	.-22     	; 0x6910 <free+0x44>
    6926:	d3 83       	std	Z+3, r29	; 0x03
    6928:	c2 83       	std	Z+2, r28	; 0x02
    692a:	40 81       	ld	r20, Z
    692c:	51 81       	ldd	r21, Z+1	; 0x01
    692e:	84 0f       	add	r24, r20
    6930:	95 1f       	adc	r25, r21
    6932:	c8 17       	cp	r28, r24
    6934:	d9 07       	cpc	r29, r25
    6936:	59 f4       	brne	.+22     	; 0x694e <free+0x82>
    6938:	88 81       	ld	r24, Y
    693a:	99 81       	ldd	r25, Y+1	; 0x01
    693c:	84 0f       	add	r24, r20
    693e:	95 1f       	adc	r25, r21
    6940:	02 96       	adiw	r24, 0x02	; 2
    6942:	91 83       	std	Z+1, r25	; 0x01
    6944:	80 83       	st	Z, r24
    6946:	8a 81       	ldd	r24, Y+2	; 0x02
    6948:	9b 81       	ldd	r25, Y+3	; 0x03
    694a:	93 83       	std	Z+3, r25	; 0x03
    694c:	82 83       	std	Z+2, r24	; 0x02
    694e:	21 15       	cp	r18, r1
    6950:	31 05       	cpc	r19, r1
    6952:	29 f4       	brne	.+10     	; 0x695e <free+0x92>
    6954:	f0 93 f4 17 	sts	0x17F4, r31	; 0x8017f4 <__flp+0x1>
    6958:	e0 93 f3 17 	sts	0x17F3, r30	; 0x8017f3 <__flp>
    695c:	3d c0       	rjmp	.+122    	; 0x69d8 <free+0x10c>
    695e:	e9 01       	movw	r28, r18
    6960:	fb 83       	std	Y+3, r31	; 0x03
    6962:	ea 83       	std	Y+2, r30	; 0x02
    6964:	49 91       	ld	r20, Y+
    6966:	59 91       	ld	r21, Y+
    6968:	c4 0f       	add	r28, r20
    696a:	d5 1f       	adc	r29, r21
    696c:	ec 17       	cp	r30, r28
    696e:	fd 07       	cpc	r31, r29
    6970:	61 f4       	brne	.+24     	; 0x698a <free+0xbe>
    6972:	80 81       	ld	r24, Z
    6974:	91 81       	ldd	r25, Z+1	; 0x01
    6976:	84 0f       	add	r24, r20
    6978:	95 1f       	adc	r25, r21
    697a:	02 96       	adiw	r24, 0x02	; 2
    697c:	e9 01       	movw	r28, r18
    697e:	99 83       	std	Y+1, r25	; 0x01
    6980:	88 83       	st	Y, r24
    6982:	82 81       	ldd	r24, Z+2	; 0x02
    6984:	93 81       	ldd	r25, Z+3	; 0x03
    6986:	9b 83       	std	Y+3, r25	; 0x03
    6988:	8a 83       	std	Y+2, r24	; 0x02
    698a:	e0 e0       	ldi	r30, 0x00	; 0
    698c:	f0 e0       	ldi	r31, 0x00	; 0
    698e:	12 96       	adiw	r26, 0x02	; 2
    6990:	8d 91       	ld	r24, X+
    6992:	9c 91       	ld	r25, X
    6994:	13 97       	sbiw	r26, 0x03	; 3
    6996:	00 97       	sbiw	r24, 0x00	; 0
    6998:	19 f0       	breq	.+6      	; 0x69a0 <free+0xd4>
    699a:	fd 01       	movw	r30, r26
    699c:	dc 01       	movw	r26, r24
    699e:	f7 cf       	rjmp	.-18     	; 0x698e <free+0xc2>
    69a0:	8d 91       	ld	r24, X+
    69a2:	9c 91       	ld	r25, X
    69a4:	11 97       	sbiw	r26, 0x01	; 1
    69a6:	9d 01       	movw	r18, r26
    69a8:	2e 5f       	subi	r18, 0xFE	; 254
    69aa:	3f 4f       	sbci	r19, 0xFF	; 255
    69ac:	82 0f       	add	r24, r18
    69ae:	93 1f       	adc	r25, r19
    69b0:	20 91 f1 17 	lds	r18, 0x17F1	; 0x8017f1 <__brkval>
    69b4:	30 91 f2 17 	lds	r19, 0x17F2	; 0x8017f2 <__brkval+0x1>
    69b8:	28 17       	cp	r18, r24
    69ba:	39 07       	cpc	r19, r25
    69bc:	69 f4       	brne	.+26     	; 0x69d8 <free+0x10c>
    69be:	30 97       	sbiw	r30, 0x00	; 0
    69c0:	29 f4       	brne	.+10     	; 0x69cc <free+0x100>
    69c2:	10 92 f4 17 	sts	0x17F4, r1	; 0x8017f4 <__flp+0x1>
    69c6:	10 92 f3 17 	sts	0x17F3, r1	; 0x8017f3 <__flp>
    69ca:	02 c0       	rjmp	.+4      	; 0x69d0 <free+0x104>
    69cc:	13 82       	std	Z+3, r1	; 0x03
    69ce:	12 82       	std	Z+2, r1	; 0x02
    69d0:	b0 93 f2 17 	sts	0x17F2, r27	; 0x8017f2 <__brkval+0x1>
    69d4:	a0 93 f1 17 	sts	0x17F1, r26	; 0x8017f1 <__brkval>
    69d8:	df 91       	pop	r29
    69da:	cf 91       	pop	r28
    69dc:	08 95       	ret

000069de <abort>:
    69de:	81 e0       	ldi	r24, 0x01	; 1
    69e0:	90 e0       	ldi	r25, 0x00	; 0
    69e2:	f8 94       	cli
    69e4:	58 c2       	rjmp	.+1200   	; 0x6e96 <_exit>

000069e6 <__ftoa_engine>:
    69e6:	28 30       	cpi	r18, 0x08	; 8
    69e8:	08 f0       	brcs	.+2      	; 0x69ec <__ftoa_engine+0x6>
    69ea:	27 e0       	ldi	r18, 0x07	; 7
    69ec:	33 27       	eor	r19, r19
    69ee:	da 01       	movw	r26, r20
    69f0:	99 0f       	add	r25, r25
    69f2:	31 1d       	adc	r19, r1
    69f4:	87 fd       	sbrc	r24, 7
    69f6:	91 60       	ori	r25, 0x01	; 1
    69f8:	00 96       	adiw	r24, 0x00	; 0
    69fa:	61 05       	cpc	r22, r1
    69fc:	71 05       	cpc	r23, r1
    69fe:	39 f4       	brne	.+14     	; 0x6a0e <__ftoa_engine+0x28>
    6a00:	32 60       	ori	r19, 0x02	; 2
    6a02:	2e 5f       	subi	r18, 0xFE	; 254
    6a04:	3d 93       	st	X+, r19
    6a06:	30 e3       	ldi	r19, 0x30	; 48
    6a08:	2a 95       	dec	r18
    6a0a:	e1 f7       	brne	.-8      	; 0x6a04 <__ftoa_engine+0x1e>
    6a0c:	08 95       	ret
    6a0e:	9f 3f       	cpi	r25, 0xFF	; 255
    6a10:	30 f0       	brcs	.+12     	; 0x6a1e <__ftoa_engine+0x38>
    6a12:	80 38       	cpi	r24, 0x80	; 128
    6a14:	71 05       	cpc	r23, r1
    6a16:	61 05       	cpc	r22, r1
    6a18:	09 f0       	breq	.+2      	; 0x6a1c <__ftoa_engine+0x36>
    6a1a:	3c 5f       	subi	r19, 0xFC	; 252
    6a1c:	3c 5f       	subi	r19, 0xFC	; 252
    6a1e:	3d 93       	st	X+, r19
    6a20:	91 30       	cpi	r25, 0x01	; 1
    6a22:	08 f0       	brcs	.+2      	; 0x6a26 <__ftoa_engine+0x40>
    6a24:	80 68       	ori	r24, 0x80	; 128
    6a26:	91 1d       	adc	r25, r1
    6a28:	df 93       	push	r29
    6a2a:	cf 93       	push	r28
    6a2c:	1f 93       	push	r17
    6a2e:	0f 93       	push	r16
    6a30:	ff 92       	push	r15
    6a32:	ef 92       	push	r14
    6a34:	19 2f       	mov	r17, r25
    6a36:	98 7f       	andi	r25, 0xF8	; 248
    6a38:	96 95       	lsr	r25
    6a3a:	e9 2f       	mov	r30, r25
    6a3c:	96 95       	lsr	r25
    6a3e:	96 95       	lsr	r25
    6a40:	e9 0f       	add	r30, r25
    6a42:	ff 27       	eor	r31, r31
    6a44:	e4 50       	subi	r30, 0x04	; 4
    6a46:	fe 4f       	sbci	r31, 0xFE	; 254
    6a48:	99 27       	eor	r25, r25
    6a4a:	33 27       	eor	r19, r19
    6a4c:	ee 24       	eor	r14, r14
    6a4e:	ff 24       	eor	r15, r15
    6a50:	a7 01       	movw	r20, r14
    6a52:	e7 01       	movw	r28, r14
    6a54:	05 90       	lpm	r0, Z+
    6a56:	08 94       	sec
    6a58:	07 94       	ror	r0
    6a5a:	28 f4       	brcc	.+10     	; 0x6a66 <__ftoa_engine+0x80>
    6a5c:	36 0f       	add	r19, r22
    6a5e:	e7 1e       	adc	r14, r23
    6a60:	f8 1e       	adc	r15, r24
    6a62:	49 1f       	adc	r20, r25
    6a64:	51 1d       	adc	r21, r1
    6a66:	66 0f       	add	r22, r22
    6a68:	77 1f       	adc	r23, r23
    6a6a:	88 1f       	adc	r24, r24
    6a6c:	99 1f       	adc	r25, r25
    6a6e:	06 94       	lsr	r0
    6a70:	a1 f7       	brne	.-24     	; 0x6a5a <__ftoa_engine+0x74>
    6a72:	05 90       	lpm	r0, Z+
    6a74:	07 94       	ror	r0
    6a76:	28 f4       	brcc	.+10     	; 0x6a82 <__ftoa_engine+0x9c>
    6a78:	e7 0e       	add	r14, r23
    6a7a:	f8 1e       	adc	r15, r24
    6a7c:	49 1f       	adc	r20, r25
    6a7e:	56 1f       	adc	r21, r22
    6a80:	c1 1d       	adc	r28, r1
    6a82:	77 0f       	add	r23, r23
    6a84:	88 1f       	adc	r24, r24
    6a86:	99 1f       	adc	r25, r25
    6a88:	66 1f       	adc	r22, r22
    6a8a:	06 94       	lsr	r0
    6a8c:	a1 f7       	brne	.-24     	; 0x6a76 <__ftoa_engine+0x90>
    6a8e:	05 90       	lpm	r0, Z+
    6a90:	07 94       	ror	r0
    6a92:	28 f4       	brcc	.+10     	; 0x6a9e <__ftoa_engine+0xb8>
    6a94:	f8 0e       	add	r15, r24
    6a96:	49 1f       	adc	r20, r25
    6a98:	56 1f       	adc	r21, r22
    6a9a:	c7 1f       	adc	r28, r23
    6a9c:	d1 1d       	adc	r29, r1
    6a9e:	88 0f       	add	r24, r24
    6aa0:	99 1f       	adc	r25, r25
    6aa2:	66 1f       	adc	r22, r22
    6aa4:	77 1f       	adc	r23, r23
    6aa6:	06 94       	lsr	r0
    6aa8:	a1 f7       	brne	.-24     	; 0x6a92 <__ftoa_engine+0xac>
    6aaa:	05 90       	lpm	r0, Z+
    6aac:	07 94       	ror	r0
    6aae:	20 f4       	brcc	.+8      	; 0x6ab8 <__ftoa_engine+0xd2>
    6ab0:	49 0f       	add	r20, r25
    6ab2:	56 1f       	adc	r21, r22
    6ab4:	c7 1f       	adc	r28, r23
    6ab6:	d8 1f       	adc	r29, r24
    6ab8:	99 0f       	add	r25, r25
    6aba:	66 1f       	adc	r22, r22
    6abc:	77 1f       	adc	r23, r23
    6abe:	88 1f       	adc	r24, r24
    6ac0:	06 94       	lsr	r0
    6ac2:	a9 f7       	brne	.-22     	; 0x6aae <__ftoa_engine+0xc8>
    6ac4:	84 91       	lpm	r24, Z
    6ac6:	10 95       	com	r17
    6ac8:	17 70       	andi	r17, 0x07	; 7
    6aca:	41 f0       	breq	.+16     	; 0x6adc <__ftoa_engine+0xf6>
    6acc:	d6 95       	lsr	r29
    6ace:	c7 95       	ror	r28
    6ad0:	57 95       	ror	r21
    6ad2:	47 95       	ror	r20
    6ad4:	f7 94       	ror	r15
    6ad6:	e7 94       	ror	r14
    6ad8:	1a 95       	dec	r17
    6ada:	c1 f7       	brne	.-16     	; 0x6acc <__ftoa_engine+0xe6>
    6adc:	e2 ea       	ldi	r30, 0xA2	; 162
    6ade:	f1 e0       	ldi	r31, 0x01	; 1
    6ae0:	68 94       	set
    6ae2:	15 90       	lpm	r1, Z+
    6ae4:	15 91       	lpm	r17, Z+
    6ae6:	35 91       	lpm	r19, Z+
    6ae8:	65 91       	lpm	r22, Z+
    6aea:	95 91       	lpm	r25, Z+
    6aec:	05 90       	lpm	r0, Z+
    6aee:	7f e2       	ldi	r23, 0x2F	; 47
    6af0:	73 95       	inc	r23
    6af2:	e1 18       	sub	r14, r1
    6af4:	f1 0a       	sbc	r15, r17
    6af6:	43 0b       	sbc	r20, r19
    6af8:	56 0b       	sbc	r21, r22
    6afa:	c9 0b       	sbc	r28, r25
    6afc:	d0 09       	sbc	r29, r0
    6afe:	c0 f7       	brcc	.-16     	; 0x6af0 <__ftoa_engine+0x10a>
    6b00:	e1 0c       	add	r14, r1
    6b02:	f1 1e       	adc	r15, r17
    6b04:	43 1f       	adc	r20, r19
    6b06:	56 1f       	adc	r21, r22
    6b08:	c9 1f       	adc	r28, r25
    6b0a:	d0 1d       	adc	r29, r0
    6b0c:	7e f4       	brtc	.+30     	; 0x6b2c <__ftoa_engine+0x146>
    6b0e:	70 33       	cpi	r23, 0x30	; 48
    6b10:	11 f4       	brne	.+4      	; 0x6b16 <__ftoa_engine+0x130>
    6b12:	8a 95       	dec	r24
    6b14:	e6 cf       	rjmp	.-52     	; 0x6ae2 <__ftoa_engine+0xfc>
    6b16:	e8 94       	clt
    6b18:	01 50       	subi	r16, 0x01	; 1
    6b1a:	30 f0       	brcs	.+12     	; 0x6b28 <__ftoa_engine+0x142>
    6b1c:	08 0f       	add	r16, r24
    6b1e:	0a f4       	brpl	.+2      	; 0x6b22 <__ftoa_engine+0x13c>
    6b20:	00 27       	eor	r16, r16
    6b22:	02 17       	cp	r16, r18
    6b24:	08 f4       	brcc	.+2      	; 0x6b28 <__ftoa_engine+0x142>
    6b26:	20 2f       	mov	r18, r16
    6b28:	23 95       	inc	r18
    6b2a:	02 2f       	mov	r16, r18
    6b2c:	7a 33       	cpi	r23, 0x3A	; 58
    6b2e:	28 f0       	brcs	.+10     	; 0x6b3a <__ftoa_engine+0x154>
    6b30:	79 e3       	ldi	r23, 0x39	; 57
    6b32:	7d 93       	st	X+, r23
    6b34:	2a 95       	dec	r18
    6b36:	e9 f7       	brne	.-6      	; 0x6b32 <__ftoa_engine+0x14c>
    6b38:	10 c0       	rjmp	.+32     	; 0x6b5a <__ftoa_engine+0x174>
    6b3a:	7d 93       	st	X+, r23
    6b3c:	2a 95       	dec	r18
    6b3e:	89 f6       	brne	.-94     	; 0x6ae2 <__ftoa_engine+0xfc>
    6b40:	06 94       	lsr	r0
    6b42:	97 95       	ror	r25
    6b44:	67 95       	ror	r22
    6b46:	37 95       	ror	r19
    6b48:	17 95       	ror	r17
    6b4a:	17 94       	ror	r1
    6b4c:	e1 18       	sub	r14, r1
    6b4e:	f1 0a       	sbc	r15, r17
    6b50:	43 0b       	sbc	r20, r19
    6b52:	56 0b       	sbc	r21, r22
    6b54:	c9 0b       	sbc	r28, r25
    6b56:	d0 09       	sbc	r29, r0
    6b58:	98 f0       	brcs	.+38     	; 0x6b80 <__ftoa_engine+0x19a>
    6b5a:	23 95       	inc	r18
    6b5c:	7e 91       	ld	r23, -X
    6b5e:	73 95       	inc	r23
    6b60:	7a 33       	cpi	r23, 0x3A	; 58
    6b62:	08 f0       	brcs	.+2      	; 0x6b66 <__ftoa_engine+0x180>
    6b64:	70 e3       	ldi	r23, 0x30	; 48
    6b66:	7c 93       	st	X, r23
    6b68:	20 13       	cpse	r18, r16
    6b6a:	b8 f7       	brcc	.-18     	; 0x6b5a <__ftoa_engine+0x174>
    6b6c:	7e 91       	ld	r23, -X
    6b6e:	70 61       	ori	r23, 0x10	; 16
    6b70:	7d 93       	st	X+, r23
    6b72:	30 f0       	brcs	.+12     	; 0x6b80 <__ftoa_engine+0x19a>
    6b74:	83 95       	inc	r24
    6b76:	71 e3       	ldi	r23, 0x31	; 49
    6b78:	7d 93       	st	X+, r23
    6b7a:	70 e3       	ldi	r23, 0x30	; 48
    6b7c:	2a 95       	dec	r18
    6b7e:	e1 f7       	brne	.-8      	; 0x6b78 <__ftoa_engine+0x192>
    6b80:	11 24       	eor	r1, r1
    6b82:	ef 90       	pop	r14
    6b84:	ff 90       	pop	r15
    6b86:	0f 91       	pop	r16
    6b88:	1f 91       	pop	r17
    6b8a:	cf 91       	pop	r28
    6b8c:	df 91       	pop	r29
    6b8e:	99 27       	eor	r25, r25
    6b90:	87 fd       	sbrc	r24, 7
    6b92:	90 95       	com	r25
    6b94:	08 95       	ret

00006b96 <strnlen_P>:
    6b96:	fc 01       	movw	r30, r24
    6b98:	05 90       	lpm	r0, Z+
    6b9a:	61 50       	subi	r22, 0x01	; 1
    6b9c:	70 40       	sbci	r23, 0x00	; 0
    6b9e:	01 10       	cpse	r0, r1
    6ba0:	d8 f7       	brcc	.-10     	; 0x6b98 <strnlen_P+0x2>
    6ba2:	80 95       	com	r24
    6ba4:	90 95       	com	r25
    6ba6:	8e 0f       	add	r24, r30
    6ba8:	9f 1f       	adc	r25, r31
    6baa:	08 95       	ret

00006bac <memcpy>:
    6bac:	fb 01       	movw	r30, r22
    6bae:	dc 01       	movw	r26, r24
    6bb0:	02 c0       	rjmp	.+4      	; 0x6bb6 <memcpy+0xa>
    6bb2:	01 90       	ld	r0, Z+
    6bb4:	0d 92       	st	X+, r0
    6bb6:	41 50       	subi	r20, 0x01	; 1
    6bb8:	50 40       	sbci	r21, 0x00	; 0
    6bba:	d8 f7       	brcc	.-10     	; 0x6bb2 <memcpy+0x6>
    6bbc:	08 95       	ret

00006bbe <memset>:
    6bbe:	dc 01       	movw	r26, r24
    6bc0:	01 c0       	rjmp	.+2      	; 0x6bc4 <memset+0x6>
    6bc2:	6d 93       	st	X+, r22
    6bc4:	41 50       	subi	r20, 0x01	; 1
    6bc6:	50 40       	sbci	r21, 0x00	; 0
    6bc8:	e0 f7       	brcc	.-8      	; 0x6bc2 <memset+0x4>
    6bca:	08 95       	ret

00006bcc <strcasestr>:
    6bcc:	fb 01       	movw	r30, r22
    6bce:	51 91       	ld	r21, Z+
    6bd0:	55 23       	and	r21, r21
    6bd2:	b1 f0       	breq	.+44     	; 0x6c00 <strcasestr+0x34>
    6bd4:	bf 01       	movw	r22, r30
    6bd6:	dc 01       	movw	r26, r24
    6bd8:	05 2e       	mov	r0, r21
    6bda:	4d 91       	ld	r20, X+
    6bdc:	44 23       	and	r20, r20
    6bde:	69 f0       	breq	.+26     	; 0x6bfa <strcasestr+0x2e>
    6be0:	10 d0       	rcall	.+32     	; 0x6c02 <strcasestr+0x36>
    6be2:	d9 f7       	brne	.-10     	; 0x6bda <strcasestr+0xe>
    6be4:	cd 01       	movw	r24, r26
    6be6:	01 90       	ld	r0, Z+
    6be8:	00 20       	and	r0, r0
    6bea:	49 f0       	breq	.+18     	; 0x6bfe <strcasestr+0x32>
    6bec:	4d 91       	ld	r20, X+
    6bee:	41 11       	cpse	r20, r1
    6bf0:	08 d0       	rcall	.+16     	; 0x6c02 <strcasestr+0x36>
    6bf2:	c9 f3       	breq	.-14     	; 0x6be6 <strcasestr+0x1a>
    6bf4:	fb 01       	movw	r30, r22
    6bf6:	41 11       	cpse	r20, r1
    6bf8:	ee cf       	rjmp	.-36     	; 0x6bd6 <strcasestr+0xa>
    6bfa:	81 e0       	ldi	r24, 0x01	; 1
    6bfc:	90 e0       	ldi	r25, 0x00	; 0
    6bfe:	01 97       	sbiw	r24, 0x01	; 1
    6c00:	08 95       	ret
    6c02:	40 25       	eor	r20, r0
    6c04:	39 f0       	breq	.+14     	; 0x6c14 <strcasestr+0x48>
    6c06:	40 32       	cpi	r20, 0x20	; 32
    6c08:	29 f4       	brne	.+10     	; 0x6c14 <strcasestr+0x48>
    6c0a:	40 29       	or	r20, r0
    6c0c:	4b 57       	subi	r20, 0x7B	; 123
    6c0e:	46 5e       	subi	r20, 0xE6	; 230
    6c10:	08 f0       	brcs	.+2      	; 0x6c14 <strcasestr+0x48>
    6c12:	18 94       	sez
    6c14:	08 95       	ret

00006c16 <strcat>:
    6c16:	fb 01       	movw	r30, r22
    6c18:	dc 01       	movw	r26, r24
    6c1a:	0d 90       	ld	r0, X+
    6c1c:	00 20       	and	r0, r0
    6c1e:	e9 f7       	brne	.-6      	; 0x6c1a <strcat+0x4>
    6c20:	11 97       	sbiw	r26, 0x01	; 1
    6c22:	01 90       	ld	r0, Z+
    6c24:	0d 92       	st	X+, r0
    6c26:	00 20       	and	r0, r0
    6c28:	e1 f7       	brne	.-8      	; 0x6c22 <strcat+0xc>
    6c2a:	08 95       	ret

00006c2c <strcpy>:
    6c2c:	fb 01       	movw	r30, r22
    6c2e:	dc 01       	movw	r26, r24
    6c30:	01 90       	ld	r0, Z+
    6c32:	0d 92       	st	X+, r0
    6c34:	00 20       	and	r0, r0
    6c36:	e1 f7       	brne	.-8      	; 0x6c30 <strcpy+0x4>
    6c38:	08 95       	ret

00006c3a <strncasecmp>:
    6c3a:	fb 01       	movw	r30, r22
    6c3c:	dc 01       	movw	r26, r24
    6c3e:	41 50       	subi	r20, 0x01	; 1
    6c40:	50 40       	sbci	r21, 0x00	; 0
    6c42:	88 f0       	brcs	.+34     	; 0x6c66 <strncasecmp+0x2c>
    6c44:	8d 91       	ld	r24, X+
    6c46:	81 34       	cpi	r24, 0x41	; 65
    6c48:	1c f0       	brlt	.+6      	; 0x6c50 <strncasecmp+0x16>
    6c4a:	8b 35       	cpi	r24, 0x5B	; 91
    6c4c:	0c f4       	brge	.+2      	; 0x6c50 <strncasecmp+0x16>
    6c4e:	80 5e       	subi	r24, 0xE0	; 224
    6c50:	61 91       	ld	r22, Z+
    6c52:	61 34       	cpi	r22, 0x41	; 65
    6c54:	1c f0       	brlt	.+6      	; 0x6c5c <strncasecmp+0x22>
    6c56:	6b 35       	cpi	r22, 0x5B	; 91
    6c58:	0c f4       	brge	.+2      	; 0x6c5c <strncasecmp+0x22>
    6c5a:	60 5e       	subi	r22, 0xE0	; 224
    6c5c:	86 1b       	sub	r24, r22
    6c5e:	61 11       	cpse	r22, r1
    6c60:	71 f3       	breq	.-36     	; 0x6c3e <strncasecmp+0x4>
    6c62:	99 0b       	sbc	r25, r25
    6c64:	08 95       	ret
    6c66:	88 1b       	sub	r24, r24
    6c68:	fc cf       	rjmp	.-8      	; 0x6c62 <strncasecmp+0x28>

00006c6a <strnlen>:
    6c6a:	fc 01       	movw	r30, r24
    6c6c:	61 50       	subi	r22, 0x01	; 1
    6c6e:	70 40       	sbci	r23, 0x00	; 0
    6c70:	01 90       	ld	r0, Z+
    6c72:	01 10       	cpse	r0, r1
    6c74:	d8 f7       	brcc	.-10     	; 0x6c6c <strnlen+0x2>
    6c76:	80 95       	com	r24
    6c78:	90 95       	com	r25
    6c7a:	8e 0f       	add	r24, r30
    6c7c:	9f 1f       	adc	r25, r31
    6c7e:	08 95       	ret

00006c80 <fputc>:
    6c80:	0f 93       	push	r16
    6c82:	1f 93       	push	r17
    6c84:	cf 93       	push	r28
    6c86:	df 93       	push	r29
    6c88:	fb 01       	movw	r30, r22
    6c8a:	23 81       	ldd	r18, Z+3	; 0x03
    6c8c:	21 fd       	sbrc	r18, 1
    6c8e:	03 c0       	rjmp	.+6      	; 0x6c96 <fputc+0x16>
    6c90:	8f ef       	ldi	r24, 0xFF	; 255
    6c92:	9f ef       	ldi	r25, 0xFF	; 255
    6c94:	2c c0       	rjmp	.+88     	; 0x6cee <fputc+0x6e>
    6c96:	22 ff       	sbrs	r18, 2
    6c98:	16 c0       	rjmp	.+44     	; 0x6cc6 <fputc+0x46>
    6c9a:	46 81       	ldd	r20, Z+6	; 0x06
    6c9c:	57 81       	ldd	r21, Z+7	; 0x07
    6c9e:	24 81       	ldd	r18, Z+4	; 0x04
    6ca0:	35 81       	ldd	r19, Z+5	; 0x05
    6ca2:	42 17       	cp	r20, r18
    6ca4:	53 07       	cpc	r21, r19
    6ca6:	44 f4       	brge	.+16     	; 0x6cb8 <fputc+0x38>
    6ca8:	a0 81       	ld	r26, Z
    6caa:	b1 81       	ldd	r27, Z+1	; 0x01
    6cac:	9d 01       	movw	r18, r26
    6cae:	2f 5f       	subi	r18, 0xFF	; 255
    6cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    6cb2:	31 83       	std	Z+1, r19	; 0x01
    6cb4:	20 83       	st	Z, r18
    6cb6:	8c 93       	st	X, r24
    6cb8:	26 81       	ldd	r18, Z+6	; 0x06
    6cba:	37 81       	ldd	r19, Z+7	; 0x07
    6cbc:	2f 5f       	subi	r18, 0xFF	; 255
    6cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    6cc0:	37 83       	std	Z+7, r19	; 0x07
    6cc2:	26 83       	std	Z+6, r18	; 0x06
    6cc4:	14 c0       	rjmp	.+40     	; 0x6cee <fputc+0x6e>
    6cc6:	8b 01       	movw	r16, r22
    6cc8:	ec 01       	movw	r28, r24
    6cca:	fb 01       	movw	r30, r22
    6ccc:	00 84       	ldd	r0, Z+8	; 0x08
    6cce:	f1 85       	ldd	r31, Z+9	; 0x09
    6cd0:	e0 2d       	mov	r30, r0
    6cd2:	19 95       	eicall
    6cd4:	89 2b       	or	r24, r25
    6cd6:	e1 f6       	brne	.-72     	; 0x6c90 <fputc+0x10>
    6cd8:	d8 01       	movw	r26, r16
    6cda:	16 96       	adiw	r26, 0x06	; 6
    6cdc:	8d 91       	ld	r24, X+
    6cde:	9c 91       	ld	r25, X
    6ce0:	17 97       	sbiw	r26, 0x07	; 7
    6ce2:	01 96       	adiw	r24, 0x01	; 1
    6ce4:	17 96       	adiw	r26, 0x07	; 7
    6ce6:	9c 93       	st	X, r25
    6ce8:	8e 93       	st	-X, r24
    6cea:	16 97       	sbiw	r26, 0x06	; 6
    6cec:	ce 01       	movw	r24, r28
    6cee:	df 91       	pop	r29
    6cf0:	cf 91       	pop	r28
    6cf2:	1f 91       	pop	r17
    6cf4:	0f 91       	pop	r16
    6cf6:	08 95       	ret

00006cf8 <printf>:
    6cf8:	cf 93       	push	r28
    6cfa:	df 93       	push	r29
    6cfc:	cd b7       	in	r28, 0x3d	; 61
    6cfe:	de b7       	in	r29, 0x3e	; 62
    6d00:	ae 01       	movw	r20, r28
    6d02:	4a 5f       	subi	r20, 0xFA	; 250
    6d04:	5f 4f       	sbci	r21, 0xFF	; 255
    6d06:	fa 01       	movw	r30, r20
    6d08:	61 91       	ld	r22, Z+
    6d0a:	71 91       	ld	r23, Z+
    6d0c:	af 01       	movw	r20, r30
    6d0e:	80 91 f7 17 	lds	r24, 0x17F7	; 0x8017f7 <__iob+0x2>
    6d12:	90 91 f8 17 	lds	r25, 0x17F8	; 0x8017f8 <__iob+0x3>
    6d16:	59 d9       	rcall	.-3406   	; 0x5fca <vfprintf>
    6d18:	df 91       	pop	r29
    6d1a:	cf 91       	pop	r28
    6d1c:	08 95       	ret

00006d1e <puts>:
    6d1e:	0f 93       	push	r16
    6d20:	1f 93       	push	r17
    6d22:	cf 93       	push	r28
    6d24:	df 93       	push	r29
    6d26:	e0 91 f7 17 	lds	r30, 0x17F7	; 0x8017f7 <__iob+0x2>
    6d2a:	f0 91 f8 17 	lds	r31, 0x17F8	; 0x8017f8 <__iob+0x3>
    6d2e:	23 81       	ldd	r18, Z+3	; 0x03
    6d30:	21 ff       	sbrs	r18, 1
    6d32:	1b c0       	rjmp	.+54     	; 0x6d6a <puts+0x4c>
    6d34:	8c 01       	movw	r16, r24
    6d36:	d0 e0       	ldi	r29, 0x00	; 0
    6d38:	c0 e0       	ldi	r28, 0x00	; 0
    6d3a:	f8 01       	movw	r30, r16
    6d3c:	81 91       	ld	r24, Z+
    6d3e:	8f 01       	movw	r16, r30
    6d40:	60 91 f7 17 	lds	r22, 0x17F7	; 0x8017f7 <__iob+0x2>
    6d44:	70 91 f8 17 	lds	r23, 0x17F8	; 0x8017f8 <__iob+0x3>
    6d48:	db 01       	movw	r26, r22
    6d4a:	18 96       	adiw	r26, 0x08	; 8
    6d4c:	ed 91       	ld	r30, X+
    6d4e:	fc 91       	ld	r31, X
    6d50:	19 97       	sbiw	r26, 0x09	; 9
    6d52:	88 23       	and	r24, r24
    6d54:	31 f0       	breq	.+12     	; 0x6d62 <puts+0x44>
    6d56:	19 95       	eicall
    6d58:	89 2b       	or	r24, r25
    6d5a:	79 f3       	breq	.-34     	; 0x6d3a <puts+0x1c>
    6d5c:	df ef       	ldi	r29, 0xFF	; 255
    6d5e:	cf ef       	ldi	r28, 0xFF	; 255
    6d60:	ec cf       	rjmp	.-40     	; 0x6d3a <puts+0x1c>
    6d62:	8a e0       	ldi	r24, 0x0A	; 10
    6d64:	19 95       	eicall
    6d66:	89 2b       	or	r24, r25
    6d68:	19 f0       	breq	.+6      	; 0x6d70 <puts+0x52>
    6d6a:	8f ef       	ldi	r24, 0xFF	; 255
    6d6c:	9f ef       	ldi	r25, 0xFF	; 255
    6d6e:	02 c0       	rjmp	.+4      	; 0x6d74 <puts+0x56>
    6d70:	8d 2f       	mov	r24, r29
    6d72:	9c 2f       	mov	r25, r28
    6d74:	df 91       	pop	r29
    6d76:	cf 91       	pop	r28
    6d78:	1f 91       	pop	r17
    6d7a:	0f 91       	pop	r16
    6d7c:	08 95       	ret

00006d7e <sprintf>:
    6d7e:	0f 93       	push	r16
    6d80:	1f 93       	push	r17
    6d82:	cf 93       	push	r28
    6d84:	df 93       	push	r29
    6d86:	cd b7       	in	r28, 0x3d	; 61
    6d88:	de b7       	in	r29, 0x3e	; 62
    6d8a:	2e 97       	sbiw	r28, 0x0e	; 14
    6d8c:	0f b6       	in	r0, 0x3f	; 63
    6d8e:	f8 94       	cli
    6d90:	de bf       	out	0x3e, r29	; 62
    6d92:	0f be       	out	0x3f, r0	; 63
    6d94:	cd bf       	out	0x3d, r28	; 61
    6d96:	0e 89       	ldd	r16, Y+22	; 0x16
    6d98:	1f 89       	ldd	r17, Y+23	; 0x17
    6d9a:	86 e0       	ldi	r24, 0x06	; 6
    6d9c:	8c 83       	std	Y+4, r24	; 0x04
    6d9e:	1a 83       	std	Y+2, r17	; 0x02
    6da0:	09 83       	std	Y+1, r16	; 0x01
    6da2:	8f ef       	ldi	r24, 0xFF	; 255
    6da4:	9f e7       	ldi	r25, 0x7F	; 127
    6da6:	9e 83       	std	Y+6, r25	; 0x06
    6da8:	8d 83       	std	Y+5, r24	; 0x05
    6daa:	ae 01       	movw	r20, r28
    6dac:	46 5e       	subi	r20, 0xE6	; 230
    6dae:	5f 4f       	sbci	r21, 0xFF	; 255
    6db0:	68 8d       	ldd	r22, Y+24	; 0x18
    6db2:	79 8d       	ldd	r23, Y+25	; 0x19
    6db4:	ce 01       	movw	r24, r28
    6db6:	01 96       	adiw	r24, 0x01	; 1
    6db8:	08 d9       	rcall	.-3568   	; 0x5fca <vfprintf>
    6dba:	ef 81       	ldd	r30, Y+7	; 0x07
    6dbc:	f8 85       	ldd	r31, Y+8	; 0x08
    6dbe:	e0 0f       	add	r30, r16
    6dc0:	f1 1f       	adc	r31, r17
    6dc2:	10 82       	st	Z, r1
    6dc4:	2e 96       	adiw	r28, 0x0e	; 14
    6dc6:	0f b6       	in	r0, 0x3f	; 63
    6dc8:	f8 94       	cli
    6dca:	de bf       	out	0x3e, r29	; 62
    6dcc:	0f be       	out	0x3f, r0	; 63
    6dce:	cd bf       	out	0x3d, r28	; 61
    6dd0:	df 91       	pop	r29
    6dd2:	cf 91       	pop	r28
    6dd4:	1f 91       	pop	r17
    6dd6:	0f 91       	pop	r16
    6dd8:	08 95       	ret

00006dda <__ultoa_invert>:
    6dda:	fa 01       	movw	r30, r20
    6ddc:	aa 27       	eor	r26, r26
    6dde:	28 30       	cpi	r18, 0x08	; 8
    6de0:	51 f1       	breq	.+84     	; 0x6e36 <__ultoa_invert+0x5c>
    6de2:	20 31       	cpi	r18, 0x10	; 16
    6de4:	81 f1       	breq	.+96     	; 0x6e46 <__ultoa_invert+0x6c>
    6de6:	e8 94       	clt
    6de8:	6f 93       	push	r22
    6dea:	6e 7f       	andi	r22, 0xFE	; 254
    6dec:	6e 5f       	subi	r22, 0xFE	; 254
    6dee:	7f 4f       	sbci	r23, 0xFF	; 255
    6df0:	8f 4f       	sbci	r24, 0xFF	; 255
    6df2:	9f 4f       	sbci	r25, 0xFF	; 255
    6df4:	af 4f       	sbci	r26, 0xFF	; 255
    6df6:	b1 e0       	ldi	r27, 0x01	; 1
    6df8:	3e d0       	rcall	.+124    	; 0x6e76 <__ultoa_invert+0x9c>
    6dfa:	b4 e0       	ldi	r27, 0x04	; 4
    6dfc:	3c d0       	rcall	.+120    	; 0x6e76 <__ultoa_invert+0x9c>
    6dfe:	67 0f       	add	r22, r23
    6e00:	78 1f       	adc	r23, r24
    6e02:	89 1f       	adc	r24, r25
    6e04:	9a 1f       	adc	r25, r26
    6e06:	a1 1d       	adc	r26, r1
    6e08:	68 0f       	add	r22, r24
    6e0a:	79 1f       	adc	r23, r25
    6e0c:	8a 1f       	adc	r24, r26
    6e0e:	91 1d       	adc	r25, r1
    6e10:	a1 1d       	adc	r26, r1
    6e12:	6a 0f       	add	r22, r26
    6e14:	71 1d       	adc	r23, r1
    6e16:	81 1d       	adc	r24, r1
    6e18:	91 1d       	adc	r25, r1
    6e1a:	a1 1d       	adc	r26, r1
    6e1c:	20 d0       	rcall	.+64     	; 0x6e5e <__ultoa_invert+0x84>
    6e1e:	09 f4       	brne	.+2      	; 0x6e22 <__ultoa_invert+0x48>
    6e20:	68 94       	set
    6e22:	3f 91       	pop	r19
    6e24:	2a e0       	ldi	r18, 0x0A	; 10
    6e26:	26 9f       	mul	r18, r22
    6e28:	11 24       	eor	r1, r1
    6e2a:	30 19       	sub	r19, r0
    6e2c:	30 5d       	subi	r19, 0xD0	; 208
    6e2e:	31 93       	st	Z+, r19
    6e30:	de f6       	brtc	.-74     	; 0x6de8 <__ultoa_invert+0xe>
    6e32:	cf 01       	movw	r24, r30
    6e34:	08 95       	ret
    6e36:	46 2f       	mov	r20, r22
    6e38:	47 70       	andi	r20, 0x07	; 7
    6e3a:	40 5d       	subi	r20, 0xD0	; 208
    6e3c:	41 93       	st	Z+, r20
    6e3e:	b3 e0       	ldi	r27, 0x03	; 3
    6e40:	0f d0       	rcall	.+30     	; 0x6e60 <__ultoa_invert+0x86>
    6e42:	c9 f7       	brne	.-14     	; 0x6e36 <__ultoa_invert+0x5c>
    6e44:	f6 cf       	rjmp	.-20     	; 0x6e32 <__ultoa_invert+0x58>
    6e46:	46 2f       	mov	r20, r22
    6e48:	4f 70       	andi	r20, 0x0F	; 15
    6e4a:	40 5d       	subi	r20, 0xD0	; 208
    6e4c:	4a 33       	cpi	r20, 0x3A	; 58
    6e4e:	18 f0       	brcs	.+6      	; 0x6e56 <__ultoa_invert+0x7c>
    6e50:	49 5d       	subi	r20, 0xD9	; 217
    6e52:	31 fd       	sbrc	r19, 1
    6e54:	40 52       	subi	r20, 0x20	; 32
    6e56:	41 93       	st	Z+, r20
    6e58:	02 d0       	rcall	.+4      	; 0x6e5e <__ultoa_invert+0x84>
    6e5a:	a9 f7       	brne	.-22     	; 0x6e46 <__ultoa_invert+0x6c>
    6e5c:	ea cf       	rjmp	.-44     	; 0x6e32 <__ultoa_invert+0x58>
    6e5e:	b4 e0       	ldi	r27, 0x04	; 4
    6e60:	a6 95       	lsr	r26
    6e62:	97 95       	ror	r25
    6e64:	87 95       	ror	r24
    6e66:	77 95       	ror	r23
    6e68:	67 95       	ror	r22
    6e6a:	ba 95       	dec	r27
    6e6c:	c9 f7       	brne	.-14     	; 0x6e60 <__ultoa_invert+0x86>
    6e6e:	00 97       	sbiw	r24, 0x00	; 0
    6e70:	61 05       	cpc	r22, r1
    6e72:	71 05       	cpc	r23, r1
    6e74:	08 95       	ret
    6e76:	9b 01       	movw	r18, r22
    6e78:	ac 01       	movw	r20, r24
    6e7a:	0a 2e       	mov	r0, r26
    6e7c:	06 94       	lsr	r0
    6e7e:	57 95       	ror	r21
    6e80:	47 95       	ror	r20
    6e82:	37 95       	ror	r19
    6e84:	27 95       	ror	r18
    6e86:	ba 95       	dec	r27
    6e88:	c9 f7       	brne	.-14     	; 0x6e7c <__ultoa_invert+0xa2>
    6e8a:	62 0f       	add	r22, r18
    6e8c:	73 1f       	adc	r23, r19
    6e8e:	84 1f       	adc	r24, r20
    6e90:	95 1f       	adc	r25, r21
    6e92:	a0 1d       	adc	r26, r0
    6e94:	08 95       	ret

00006e96 <_exit>:
    6e96:	f8 94       	cli

00006e98 <__stop_program>:
    6e98:	ff cf       	rjmp	.-2      	; 0x6e98 <__stop_program>

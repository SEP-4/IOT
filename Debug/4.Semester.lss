
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005ee  00800200  000062f0  00006384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000062f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c92  008007ee  008007ee  00006972  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006972  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000069d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ae8  00000000  00000000  00006a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d74c  00000000  00000000  000074f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003693  00000000  00000000  00014c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006a21  00000000  00000000  000182d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000027a8  00000000  00000000  0001ecf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000042d0  00000000  00000000  000214a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c592  00000000  00000000  00025770  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a38  00000000  00000000  00031d02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	60 c6       	rjmp	.+3264   	; 0xcf2 <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 78 24 	jmp	0x48f0	; 0x48f0 <__vector_25>
      68:	0c 94 ca 24 	jmp	0x4994	; 0x4994 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__vector_36>
      94:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 ac 29 	jmp	0x5358	; 0x5358 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 a4 25 	jmp	0x4b48	; 0x4b48 <__vector_51>
      d0:	0c 94 f6 25 	jmp	0x4bec	; 0x4bec <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__vector_54>
      dc:	0c 94 8c 26 	jmp	0x4d18	; 0x4d18 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	6c 1a       	sub	r6, r28
      e6:	6c 1a       	sub	r6, r28
      e8:	6c 1a       	sub	r6, r28
      ea:	a3 1a       	sub	r10, r19
      ec:	ab 1a       	sub	r10, r27
      ee:	c0 1a       	sub	r12, r16
      f0:	6c 1a       	sub	r6, r28
      f2:	6c 1a       	sub	r6, r28
      f4:	a3 1a       	sub	r10, r19
      f6:	ab 1a       	sub	r10, r27
      f8:	ce 29       	or	r28, r14
      fa:	3e 2a       	or	r3, r30
      fc:	3e 2a       	or	r3, r30
      fe:	3e 2a       	or	r3, r30
     100:	3e 2a       	or	r3, r30
     102:	3e 2a       	or	r3, r30
     104:	3e 2a       	or	r3, r30
     106:	3e 2a       	or	r3, r30
     108:	ce 29       	or	r28, r14
     10a:	3e 2a       	or	r3, r30
     10c:	3e 2a       	or	r3, r30
     10e:	3e 2a       	or	r3, r30
     110:	3e 2a       	or	r3, r30
     112:	3e 2a       	or	r3, r30
     114:	3e 2a       	or	r3, r30
     116:	3e 2a       	or	r3, r30
     118:	d0 29       	or	r29, r0
     11a:	3e 2a       	or	r3, r30
     11c:	3e 2a       	or	r3, r30
     11e:	3e 2a       	or	r3, r30
     120:	3e 2a       	or	r3, r30
     122:	3e 2a       	or	r3, r30
     124:	3e 2a       	or	r3, r30
     126:	3e 2a       	or	r3, r30
     128:	3e 2a       	or	r3, r30
     12a:	3e 2a       	or	r3, r30
     12c:	3e 2a       	or	r3, r30
     12e:	3e 2a       	or	r3, r30
     130:	3e 2a       	or	r3, r30
     132:	3e 2a       	or	r3, r30
     134:	3e 2a       	or	r3, r30
     136:	3e 2a       	or	r3, r30
     138:	d0 29       	or	r29, r0
     13a:	3e 2a       	or	r3, r30
     13c:	3e 2a       	or	r3, r30
     13e:	3e 2a       	or	r3, r30
     140:	3e 2a       	or	r3, r30
     142:	3e 2a       	or	r3, r30
     144:	3e 2a       	or	r3, r30
     146:	3e 2a       	or	r3, r30
     148:	3e 2a       	or	r3, r30
     14a:	3e 2a       	or	r3, r30
     14c:	3e 2a       	or	r3, r30
     14e:	3e 2a       	or	r3, r30
     150:	3e 2a       	or	r3, r30
     152:	3e 2a       	or	r3, r30
     154:	3e 2a       	or	r3, r30
     156:	3e 2a       	or	r3, r30
     158:	3a 2a       	or	r3, r26
     15a:	3e 2a       	or	r3, r30
     15c:	3e 2a       	or	r3, r30
     15e:	3e 2a       	or	r3, r30
     160:	3e 2a       	or	r3, r30
     162:	3e 2a       	or	r3, r30
     164:	3e 2a       	or	r3, r30
     166:	3e 2a       	or	r3, r30
     168:	05 2a       	or	r0, r21
     16a:	3e 2a       	or	r3, r30
     16c:	3e 2a       	or	r3, r30
     16e:	3e 2a       	or	r3, r30
     170:	3e 2a       	or	r3, r30
     172:	3e 2a       	or	r3, r30
     174:	3e 2a       	or	r3, r30
     176:	3e 2a       	or	r3, r30
     178:	3e 2a       	or	r3, r30
     17a:	3e 2a       	or	r3, r30
     17c:	3e 2a       	or	r3, r30
     17e:	3e 2a       	or	r3, r30
     180:	3e 2a       	or	r3, r30
     182:	3e 2a       	or	r3, r30
     184:	3e 2a       	or	r3, r30
     186:	3e 2a       	or	r3, r30
     188:	f9 29       	or	r31, r9
     18a:	3e 2a       	or	r3, r30
     18c:	3e 2a       	or	r3, r30
     18e:	3e 2a       	or	r3, r30
     190:	3e 2a       	or	r3, r30
     192:	3e 2a       	or	r3, r30
     194:	3e 2a       	or	r3, r30
     196:	3e 2a       	or	r3, r30
     198:	1d 2a       	or	r1, r29

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <prvCheckTasksWaitingTermination>
     19e:	80 91 13 12 	lds	r24, 0x1213	; 0x801213 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	df d4       	rcall	.+2494   	; 0xb66 <vPortYield>
     1a8:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 de 19 	call	0x33bc	; 0x33bc <prvProcessTimerOrBlockTask>
     1c6:	0e 94 35 1a 	call	0x346a	; 0x346a <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	17 e0       	ldi	r17, 0x07	; 7
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e0 ef       	ldi	r30, 0xF0	; 240
     1e4:	f2 e6       	ldi	r31, 0x62	; 98
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	ae 3e       	cpi	r26, 0xEE	; 238
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	24 e1       	ldi	r18, 0x14	; 20
     1f8:	ae ee       	ldi	r26, 0xEE	; 238
     1fa:	b7 e0       	ldi	r27, 0x07	; 7
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a0 38       	cpi	r26, 0x80	; 128
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <main>
     20a:	0c 94 76 31 	jmp	0x62ec	; 0x62ec <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <Application_getEventGroup>:
// Declare a variable to hold the created event group.
EventGroupHandle_t xCreatedEventGroup;

EventGroupHandle_t Application_getEventGroup(){
	return xCreatedEventGroup;
}
     210:	80 91 6e 14 	lds	r24, 0x146E	; 0x80146e <xCreatedEventGroup>
     214:	90 91 6f 14 	lds	r25, 0x146F	; 0x80146f <xCreatedEventGroup+0x1>
     218:	08 95       	ret

0000021a <Application_aFunctionToClearBits>:
void Application_aFunctionToClearBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Clear bit 0 and bit 4 in xEventGroup. */
  uxBits = xEventGroupClearBits(
     21a:	41 e1       	ldi	r20, 0x11	; 17
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	cf c1       	rjmp	.+926    	; 0x5c2 <xEventGroupClearBits>
     224:	08 95       	ret

00000226 <Application_aFunctionToWaitBits>:
EventGroupHandle_t Application_getEventGroup(){
	return xCreatedEventGroup;
}

void Application_aFunctionToWaitBits( EventGroupHandle_t xEventGroup )
{
     226:	cf 92       	push	r12
     228:	df 92       	push	r13
     22a:	ef 92       	push	r14
     22c:	ff 92       	push	r15
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	ec 01       	movw	r28, r24
EventBits_t uxBits;
const TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;

  /* Wait a maximum of 100ms for either bit 0 or bit 4 to be set within
  the event group.  Clear the bits before exiting. */
  uxBits = xEventGroupWaitBits(
     238:	0f 2e       	mov	r0, r31
     23a:	f6 e0       	ldi	r31, 0x06	; 6
     23c:	cf 2e       	mov	r12, r31
     23e:	d1 2c       	mov	r13, r1
     240:	e1 2c       	mov	r14, r1
     242:	f1 2c       	mov	r15, r1
     244:	f0 2d       	mov	r31, r0
     246:	01 e0       	ldi	r16, 0x01	; 1
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	41 e1       	ldi	r20, 0x11	; 17
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	60 e0       	ldi	r22, 0x00	; 0
     250:	70 e0       	ldi	r23, 0x00	; 0
     252:	17 d1       	rcall	.+558    	; 0x482 <xEventGroupWaitBits>
            BIT_0 | BIT_4, /* The bits within the event group to wait for. */
            pdFALSE,        /* BIT_0 & BIT_4 should not be cleared before returning. */
            pdTRUE,       /* Wait for both bits, either bit will do. */
            xTicksToWait );/* Wait a maximum of 100ms for either bit to be set. */

  if( ( uxBits & ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )
     254:	dc 01       	movw	r26, r24
     256:	cb 01       	movw	r24, r22
     258:	81 71       	andi	r24, 0x11	; 17
     25a:	99 27       	eor	r25, r25
     25c:	aa 27       	eor	r26, r26
     25e:	bb 27       	eor	r27, r27
     260:	41 97       	sbiw	r24, 0x11	; 17
     262:	a1 05       	cpc	r26, r1
     264:	b1 05       	cpc	r27, r1
     266:	81 f5       	brne	.+96     	; 0x2c8 <Application_aFunctionToWaitBits+0xa2>
  {
      /* xEventGroupWaitBits() returned because both bits were set. */
	  printf("setting the bits, they are set");
     268:	8f e6       	ldi	r24, 0x6F	; 111
     26a:	92 e0       	ldi	r25, 0x02	; 2
     26c:	9f 93       	push	r25
     26e:	8f 93       	push	r24
     270:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
	  printf("Hum: %u\nTemp: %u\nCO2: %u",hih820_getHumidityInUint16(),hih820_getTemperatureInUint16(),CO2Sensor_getCO2InUint16());
     274:	83 d0       	rcall	.+262    	; 0x37c <CO2Sensor_getCO2InUint16>
     276:	f8 2e       	mov	r15, r24
     278:	e9 2e       	mov	r14, r25
     27a:	0e 94 be 1c 	call	0x397c	; 0x397c <hih820_getTemperatureInUint16>
     27e:	18 2f       	mov	r17, r24
     280:	09 2f       	mov	r16, r25
     282:	0e 94 af 1c 	call	0x395e	; 0x395e <hih820_getHumidityInUint16>
     286:	ef 92       	push	r14
     288:	ff 92       	push	r15
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	9f 93       	push	r25
     290:	8f 93       	push	r24
     292:	8e e8       	ldi	r24, 0x8E	; 142
     294:	92 e0       	ldi	r25, 0x02	; 2
     296:	9f 93       	push	r25
     298:	8f 93       	push	r24
     29a:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
	  SensorDataPackageHandler_SetHumidity(hih820_getHumidityInUint16());
     29e:	0e 94 af 1c 	call	0x395e	; 0x395e <hih820_getHumidityInUint16>
     2a2:	0e 94 12 1b 	call	0x3624	; 0x3624 <SensorDataPackageHandler_SetHumidity>
	  SensorDataPackageHandler_SetTemperature(hih820_getTemperatureInUint16());
     2a6:	0e 94 be 1c 	call	0x397c	; 0x397c <hih820_getTemperatureInUint16>
     2aa:	0e 94 17 1b 	call	0x362e	; 0x362e <SensorDataPackageHandler_SetTemperature>
	  SensorDataPackageHandler_SetCO2(CO2Sensor_getCO2InUint16());
     2ae:	66 d0       	rcall	.+204    	; 0x37c <CO2Sensor_getCO2InUint16>
     2b0:	0e 94 0d 1b 	call	0x361a	; 0x361a <SensorDataPackageHandler_SetCO2>
	  Application_aFunctionToClearBits( xEventGroup );
     2b4:	ce 01       	movw	r24, r28
     2b6:	b1 df       	rcall	.-158    	; 0x21a <Application_aFunctionToClearBits>
     2b8:	8d b7       	in	r24, 0x3d	; 61
     2ba:	9e b7       	in	r25, 0x3e	; 62
     2bc:	0a 96       	adiw	r24, 0x0a	; 10
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	f8 94       	cli
     2c2:	9e bf       	out	0x3e, r25	; 62
     2c4:	0f be       	out	0x3f, r0	; 63
     2c6:	8d bf       	out	0x3d, r24	; 61
  else
  {
      /* xEventGroupWaitBits() returned because xTicksToWait ticks passed
      without either BIT_0 or BIT_4 becoming set. */
  }
}
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	1f 91       	pop	r17
     2ce:	0f 91       	pop	r16
     2d0:	ff 90       	pop	r15
     2d2:	ef 90       	pop	r14
     2d4:	df 90       	pop	r13
     2d6:	cf 90       	pop	r12
     2d8:	08 95       	ret

000002da <Application_handler_task>:
	,  Application_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void Application_handler_task(void *pvParameters)
{
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	00 d0       	rcall	.+0      	; 0x2e0 <Application_handler_task+0x6>
     2e0:	1f 92       	push	r1
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
	printf("startApplication");
     2e6:	87 ea       	ldi	r24, 0xA7	; 167
     2e8:	92 e0       	ldi	r25, 0x02	; 2
     2ea:	9f 93       	push	r25
     2ec:	8f 93       	push	r24
     2ee:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
	(void)pvParameters;
	xCreatedEventGroup = xEventGroupCreate();
     2f2:	b4 d0       	rcall	.+360    	; 0x45c <xEventGroupCreate>
     2f4:	90 93 6f 14 	sts	0x146F, r25	; 0x80146f <xCreatedEventGroup+0x1>
     2f8:	80 93 6e 14 	sts	0x146E, r24	; 0x80146e <xCreatedEventGroup>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300UL); // Upload message every 1 minutes (300 ms)
	xLastWakeTime = xTaskGetTickCount();
     2fc:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <xTaskGetTickCount>
     300:	69 83       	std	Y+1, r22	; 0x01
     302:	7a 83       	std	Y+2, r23	; 0x02
     304:	8b 83       	std	Y+3, r24	; 0x03
     306:	9c 83       	std	Y+4, r25	; 0x04
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     30c:	42 e1       	ldi	r20, 0x12	; 18
     30e:	50 e0       	ldi	r21, 0x00	; 0
     310:	60 e0       	ldi	r22, 0x00	; 0
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	ce 01       	movw	r24, r28
     316:	01 96       	adiw	r24, 0x01	; 1
     318:	0e 94 15 11 	call	0x222a	; 0x222a <xTaskDelayUntil>
		// Was the event group created successfully?
		if( xCreatedEventGroup == NULL )
     31c:	80 91 6e 14 	lds	r24, 0x146E	; 0x80146e <xCreatedEventGroup>
     320:	90 91 6f 14 	lds	r25, 0x146F	; 0x80146f <xCreatedEventGroup+0x1>
     324:	00 97       	sbiw	r24, 0x00	; 0
		// The event group was not created because there was insufficient
		// FreeRTOS heap available.
		}
		else
		{
			Application_aFunctionToWaitBits( xCreatedEventGroup);
     326:	91 f3       	breq	.-28     	; 0x30c <Application_handler_task+0x32>
     328:	7e df       	rcall	.-260    	; 0x226 <Application_aFunctionToWaitBits>
     32a:	f0 cf       	rjmp	.-32     	; 0x30c <Application_handler_task+0x32>

0000032c <Application_handler_initialise>:

static char _out_buf[100];

void Application_handler_task( void *pvParameters );

void Application_handler_initialise(UBaseType_t Application_task_priority){
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
	xTaskCreate(
     332:	e1 2c       	mov	r14, r1
     334:	f1 2c       	mov	r15, r1
     336:	08 2f       	mov	r16, r24
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	40 ec       	ldi	r20, 0xC0	; 192
     33e:	50 e0       	ldi	r21, 0x00	; 0
     340:	68 eb       	ldi	r22, 0xB8	; 184
     342:	72 e0       	ldi	r23, 0x02	; 2
     344:	8d e6       	ldi	r24, 0x6D	; 109
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	0e 94 75 0e 	call	0x1cea	; 0x1cea <xTaskCreate>
	,  "ApplicationHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  Application_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     34c:	0f 91       	pop	r16
     34e:	ff 90       	pop	r15
     350:	ef 90       	pop	r14
     352:	08 95       	ret

00000354 <CO2Sensor_handler_initialise>:
mh_z19_returnCode_t getCO2return;


void CO2Sensor_handler_task( void *pvParameters );

void CO2Sensor_handler_initialise(UBaseType_t CO2_task_priority){
     354:	ef 92       	push	r14
     356:	ff 92       	push	r15
     358:	0f 93       	push	r16
	
	xTaskCreate(
     35a:	e1 2c       	mov	r14, r1
     35c:	f1 2c       	mov	r15, r1
     35e:	08 2f       	mov	r16, r24
     360:	20 e0       	ldi	r18, 0x00	; 0
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	40 ec       	ldi	r20, 0xC0	; 192
     366:	50 e0       	ldi	r21, 0x00	; 0
     368:	68 ec       	ldi	r22, 0xC8	; 200
     36a:	72 e0       	ldi	r23, 0x02	; 2
     36c:	89 ec       	ldi	r24, 0xC9	; 201
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	0e 94 75 0e 	call	0x1cea	; 0x1cea <xTaskCreate>
	,  "CO2Hand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  CO2_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     374:	0f 91       	pop	r16
     376:	ff 90       	pop	r15
     378:	ef 90       	pop	r14
     37a:	08 95       	ret

0000037c <CO2Sensor_getCO2InUint16>:
}


uint16_t CO2Sensor_getCO2InUint16(){
	return CO2ppm;
}
     37c:	80 91 72 14 	lds	r24, 0x1472	; 0x801472 <CO2ppm>
     380:	90 91 73 14 	lds	r25, 0x1473	; 0x801473 <CO2ppm+0x1>
     384:	08 95       	ret

00000386 <CO2Sensor_aFunctionToSetBits>:
void CO2Sensor_aFunctionToSetBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Set bit 0  in xEventGroup. */
  uxBits = xEventGroupSetBits(
     386:	41 e0       	ldi	r20, 0x01	; 1
     388:	50 e0       	ldi	r21, 0x00	; 0
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	36 c1       	rjmp	.+620    	; 0x5fc <xEventGroupSetBits>
     390:	08 95       	ret

00000392 <CO2Sensor_handler_task>:
	,  CO2_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void CO2Sensor_handler_task(void *pvParameters)
{
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	00 d0       	rcall	.+0      	; 0x398 <CO2Sensor_handler_task+0x6>
     398:	1f 92       	push	r1
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
	printf("startCO2");
     39e:	80 ed       	ldi	r24, 0xD0	; 208
     3a0:	92 e0       	ldi	r25, 0x02	; 2
     3a2:	9f 93       	push	r25
     3a4:	8f 93       	push	r24
     3a6:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
	(void)pvParameters;
	mh_z19_injectCallBack(NULL);
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <mh_z19_injectCallBack>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     3b2:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <xTaskGetTickCount>
     3b6:	69 83       	std	Y+1, r22	; 0x01
     3b8:	7a 83       	std	Y+2, r23	; 0x02
     3ba:	8b 83       	std	Y+3, r24	; 0x03
     3bc:	9c 83       	std	Y+4, r25	; 0x04
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     3c2:	48 ea       	ldi	r20, 0xA8	; 168
     3c4:	58 e4       	ldi	r21, 0x48	; 72
     3c6:	60 e0       	ldi	r22, 0x00	; 0
     3c8:	70 e0       	ldi	r23, 0x00	; 0
     3ca:	ce 01       	movw	r24, r28
     3cc:	01 96       	adiw	r24, 0x01	; 1
     3ce:	0e 94 15 11 	call	0x222a	; 0x222a <xTaskDelayUntil>
		rc = mh_z19_takeMeassuring();
     3d2:	0e 94 f6 22 	call	0x45ec	; 0x45ec <mh_z19_takeMeassuring>
     3d6:	80 93 70 14 	sts	0x1470, r24	; 0x801470 <rc>
		if (rc == MHZ19_OK)
     3da:	81 11       	cpse	r24, r1
     3dc:	f2 cf       	rjmp	.-28     	; 0x3c2 <CO2Sensor_handler_task+0x30>
		{
			vTaskDelay(50);
     3de:	62 e3       	ldi	r22, 0x32	; 50
     3e0:	70 e0       	ldi	r23, 0x00	; 0
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <vTaskDelay>
			if(getCO2return == MHZ19_OK){
     3ea:	80 91 71 14 	lds	r24, 0x1471	; 0x801471 <getCO2return>
     3ee:	81 11       	cpse	r24, r1
     3f0:	09 c0       	rjmp	.+18     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
				getCO2return = mh_z19_getCo2Ppm(&CO2ppm);
     3f2:	82 e7       	ldi	r24, 0x72	; 114
     3f4:	94 e1       	ldi	r25, 0x14	; 20
     3f6:	0e 94 25 23 	call	0x464a	; 0x464a <mh_z19_getCo2Ppm>
     3fa:	80 93 71 14 	sts	0x1471, r24	; 0x801471 <getCO2return>
				CO2Sensor_aFunctionToSetBits(Application_getEventGroup());
     3fe:	08 df       	rcall	.-496    	; 0x210 <Application_getEventGroup>
     400:	c2 df       	rcall	.-124    	; 0x386 <CO2Sensor_aFunctionToSetBits>
     402:	df cf       	rjmp	.-66     	; 0x3c2 <CO2Sensor_handler_task+0x30>
			}
			else if(getCO2return == MHZ19_NO_MEASSURING_AVAILABLE){
     404:	81 30       	cpi	r24, 0x01	; 1
     406:	e9 f6       	brne	.-70     	; 0x3c2 <CO2Sensor_handler_task+0x30>
				printf("Didn't get the measurements");
     408:	89 ed       	ldi	r24, 0xD9	; 217
     40a:	92 e0       	ldi	r25, 0x02	; 2
     40c:	9f 93       	push	r25
     40e:	8f 93       	push	r24
     410:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	d4 cf       	rjmp	.-88     	; 0x3c2 <CO2Sensor_handler_task+0x30>

0000041a <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     41a:	0f 93       	push	r16
     41c:	01 11       	cpse	r16, r1
     41e:	0c c0       	rjmp	.+24     	; 0x438 <prvTestWaitCondition+0x1e>
     420:	dc 01       	movw	r26, r24
     422:	cb 01       	movw	r24, r22
     424:	82 23       	and	r24, r18
     426:	93 23       	and	r25, r19
     428:	a4 23       	and	r26, r20
     42a:	b5 23       	and	r27, r21
     42c:	89 2b       	or	r24, r25
     42e:	8a 2b       	or	r24, r26
     430:	8b 2b       	or	r24, r27
     432:	79 f4       	brne	.+30     	; 0x452 <prvTestWaitCondition+0x38>
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	10 c0       	rjmp	.+32     	; 0x458 <prvTestWaitCondition+0x3e>
     438:	dc 01       	movw	r26, r24
     43a:	cb 01       	movw	r24, r22
     43c:	82 23       	and	r24, r18
     43e:	93 23       	and	r25, r19
     440:	a4 23       	and	r26, r20
     442:	b5 23       	and	r27, r21
     444:	28 17       	cp	r18, r24
     446:	39 07       	cpc	r19, r25
     448:	4a 07       	cpc	r20, r26
     44a:	5b 07       	cpc	r21, r27
     44c:	21 f0       	breq	.+8      	; 0x456 <prvTestWaitCondition+0x3c>
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	03 c0       	rjmp	.+6      	; 0x458 <prvTestWaitCondition+0x3e>
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	01 c0       	rjmp	.+2      	; 0x458 <prvTestWaitCondition+0x3e>
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	0f 91       	pop	r16
     45a:	08 95       	ret

0000045c <xEventGroupCreate>:
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	8f e0       	ldi	r24, 0x0F	; 15
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	cc d1       	rcall	.+920    	; 0x7fe <pvPortMalloc>
     466:	ec 01       	movw	r28, r24
     468:	00 97       	sbiw	r24, 0x00	; 0
     46a:	39 f0       	breq	.+14     	; 0x47a <xEventGroupCreate+0x1e>
     46c:	fc 01       	movw	r30, r24
     46e:	11 92       	st	Z+, r1
     470:	11 92       	st	Z+, r1
     472:	11 92       	st	Z+, r1
     474:	11 92       	st	Z+, r1
     476:	cf 01       	movw	r24, r30
     478:	a8 d2       	rcall	.+1360   	; 0x9ca <vListInitialise>
     47a:	ce 01       	movw	r24, r28
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	08 95       	ret

00000482 <xEventGroupWaitBits>:
     482:	2f 92       	push	r2
     484:	3f 92       	push	r3
     486:	4f 92       	push	r4
     488:	5f 92       	push	r5
     48a:	6f 92       	push	r6
     48c:	7f 92       	push	r7
     48e:	8f 92       	push	r8
     490:	9f 92       	push	r9
     492:	af 92       	push	r10
     494:	bf 92       	push	r11
     496:	cf 92       	push	r12
     498:	df 92       	push	r13
     49a:	ef 92       	push	r14
     49c:	ff 92       	push	r15
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	ec 01       	movw	r28, r24
     4a8:	4a 01       	movw	r8, r20
     4aa:	5b 01       	movw	r10, r22
     4ac:	62 2e       	mov	r6, r18
     4ae:	70 2e       	mov	r7, r16
     4b0:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <vTaskSuspendAll>
     4b4:	28 80       	ld	r2, Y
     4b6:	39 80       	ldd	r3, Y+1	; 0x01
     4b8:	4a 80       	ldd	r4, Y+2	; 0x02
     4ba:	5b 80       	ldd	r5, Y+3	; 0x03
     4bc:	a5 01       	movw	r20, r10
     4be:	94 01       	movw	r18, r8
     4c0:	c2 01       	movw	r24, r4
     4c2:	b1 01       	movw	r22, r2
     4c4:	aa df       	rcall	.-172    	; 0x41a <prvTestWaitCondition>
     4c6:	88 23       	and	r24, r24
     4c8:	a1 f0       	breq	.+40     	; 0x4f2 <xEventGroupWaitBits+0x70>
     4ca:	66 20       	and	r6, r6
     4cc:	89 f1       	breq	.+98     	; 0x530 <xEventGroupWaitBits+0xae>
     4ce:	d5 01       	movw	r26, r10
     4d0:	c4 01       	movw	r24, r8
     4d2:	80 95       	com	r24
     4d4:	90 95       	com	r25
     4d6:	a0 95       	com	r26
     4d8:	b0 95       	com	r27
     4da:	82 21       	and	r24, r2
     4dc:	93 21       	and	r25, r3
     4de:	a4 21       	and	r26, r4
     4e0:	b5 21       	and	r27, r5
     4e2:	88 83       	st	Y, r24
     4e4:	99 83       	std	Y+1, r25	; 0x01
     4e6:	aa 83       	std	Y+2, r26	; 0x02
     4e8:	bb 83       	std	Y+3, r27	; 0x03
     4ea:	c1 2c       	mov	r12, r1
     4ec:	d1 2c       	mov	r13, r1
     4ee:	76 01       	movw	r14, r12
     4f0:	22 c0       	rjmp	.+68     	; 0x536 <xEventGroupWaitBits+0xb4>
     4f2:	c1 14       	cp	r12, r1
     4f4:	d1 04       	cpc	r13, r1
     4f6:	e1 04       	cpc	r14, r1
     4f8:	f1 04       	cpc	r15, r1
     4fa:	e9 f0       	breq	.+58     	; 0x536 <xEventGroupWaitBits+0xb4>
     4fc:	61 10       	cpse	r6, r1
     4fe:	04 c0       	rjmp	.+8      	; 0x508 <xEventGroupWaitBits+0x86>
     500:	40 e0       	ldi	r20, 0x00	; 0
     502:	50 e0       	ldi	r21, 0x00	; 0
     504:	ba 01       	movw	r22, r20
     506:	04 c0       	rjmp	.+8      	; 0x510 <xEventGroupWaitBits+0x8e>
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	71 e0       	ldi	r23, 0x01	; 1
     510:	71 10       	cpse	r7, r1
     512:	74 60       	ori	r23, 0x04	; 4
     514:	48 29       	or	r20, r8
     516:	59 29       	or	r21, r9
     518:	6a 29       	or	r22, r10
     51a:	7b 29       	or	r23, r11
     51c:	97 01       	movw	r18, r14
     51e:	86 01       	movw	r16, r12
     520:	ce 01       	movw	r24, r28
     522:	04 96       	adiw	r24, 0x04	; 4
     524:	0e 94 11 12 	call	0x2422	; 0x2422 <vTaskPlaceOnUnorderedEventList>
     528:	21 2c       	mov	r2, r1
     52a:	31 2c       	mov	r3, r1
     52c:	21 01       	movw	r4, r2
     52e:	03 c0       	rjmp	.+6      	; 0x536 <xEventGroupWaitBits+0xb4>
     530:	c1 2c       	mov	r12, r1
     532:	d1 2c       	mov	r13, r1
     534:	76 01       	movw	r14, r12
     536:	0e 94 39 10 	call	0x2072	; 0x2072 <xTaskResumeAll>
     53a:	cd 28       	or	r12, r13
     53c:	ce 28       	or	r12, r14
     53e:	cf 28       	or	r12, r15
     540:	59 f1       	breq	.+86     	; 0x598 <xEventGroupWaitBits+0x116>
     542:	81 11       	cpse	r24, r1
     544:	01 c0       	rjmp	.+2      	; 0x548 <xEventGroupWaitBits+0xc6>
     546:	0f d3       	rcall	.+1566   	; 0xb66 <vPortYield>
     548:	0e 94 e5 14 	call	0x29ca	; 0x29ca <uxTaskResetEventItemValue>
     54c:	6b 01       	movw	r12, r22
     54e:	7c 01       	movw	r14, r24
     550:	91 fd       	sbrc	r25, 1
     552:	1f c0       	rjmp	.+62     	; 0x592 <xEventGroupWaitBits+0x110>
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	0f 92       	push	r0
     55a:	c8 80       	ld	r12, Y
     55c:	d9 80       	ldd	r13, Y+1	; 0x01
     55e:	ea 80       	ldd	r14, Y+2	; 0x02
     560:	fb 80       	ldd	r15, Y+3	; 0x03
     562:	07 2d       	mov	r16, r7
     564:	a5 01       	movw	r20, r10
     566:	94 01       	movw	r18, r8
     568:	c7 01       	movw	r24, r14
     56a:	b6 01       	movw	r22, r12
     56c:	56 df       	rcall	.-340    	; 0x41a <prvTestWaitCondition>
     56e:	88 23       	and	r24, r24
     570:	71 f0       	breq	.+28     	; 0x58e <xEventGroupWaitBits+0x10c>
     572:	66 20       	and	r6, r6
     574:	61 f0       	breq	.+24     	; 0x58e <xEventGroupWaitBits+0x10c>
     576:	80 94       	com	r8
     578:	90 94       	com	r9
     57a:	a0 94       	com	r10
     57c:	b0 94       	com	r11
     57e:	8c 20       	and	r8, r12
     580:	9d 20       	and	r9, r13
     582:	ae 20       	and	r10, r14
     584:	bf 20       	and	r11, r15
     586:	88 82       	st	Y, r8
     588:	99 82       	std	Y+1, r9	; 0x01
     58a:	aa 82       	std	Y+2, r10	; 0x02
     58c:	bb 82       	std	Y+3, r11	; 0x03
     58e:	0f 90       	pop	r0
     590:	0f be       	out	0x3f, r0	; 63
     592:	16 01       	movw	r2, r12
     594:	27 01       	movw	r4, r14
     596:	55 24       	eor	r5, r5
     598:	c2 01       	movw	r24, r4
     59a:	b1 01       	movw	r22, r2
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	1f 91       	pop	r17
     5a2:	0f 91       	pop	r16
     5a4:	ff 90       	pop	r15
     5a6:	ef 90       	pop	r14
     5a8:	df 90       	pop	r13
     5aa:	cf 90       	pop	r12
     5ac:	bf 90       	pop	r11
     5ae:	af 90       	pop	r10
     5b0:	9f 90       	pop	r9
     5b2:	8f 90       	pop	r8
     5b4:	7f 90       	pop	r7
     5b6:	6f 90       	pop	r6
     5b8:	5f 90       	pop	r5
     5ba:	4f 90       	pop	r4
     5bc:	3f 90       	pop	r3
     5be:	2f 90       	pop	r2
     5c0:	08 95       	ret

000005c2 <xEventGroupClearBits>:
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	0f 92       	push	r0
     5cc:	fc 01       	movw	r30, r24
     5ce:	00 81       	ld	r16, Z
     5d0:	11 81       	ldd	r17, Z+1	; 0x01
     5d2:	22 81       	ldd	r18, Z+2	; 0x02
     5d4:	33 81       	ldd	r19, Z+3	; 0x03
     5d6:	40 95       	com	r20
     5d8:	50 95       	com	r21
     5da:	60 95       	com	r22
     5dc:	70 95       	com	r23
     5de:	40 23       	and	r20, r16
     5e0:	51 23       	and	r21, r17
     5e2:	62 23       	and	r22, r18
     5e4:	73 23       	and	r23, r19
     5e6:	40 83       	st	Z, r20
     5e8:	51 83       	std	Z+1, r21	; 0x01
     5ea:	62 83       	std	Z+2, r22	; 0x02
     5ec:	73 83       	std	Z+3, r23	; 0x03
     5ee:	0f 90       	pop	r0
     5f0:	0f be       	out	0x3f, r0	; 63
     5f2:	c9 01       	movw	r24, r18
     5f4:	b8 01       	movw	r22, r16
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	08 95       	ret

000005fc <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     5fc:	4f 92       	push	r4
     5fe:	5f 92       	push	r5
     600:	6f 92       	push	r6
     602:	7f 92       	push	r7
     604:	af 92       	push	r10
     606:	bf 92       	push	r11
     608:	cf 92       	push	r12
     60a:	df 92       	push	r13
     60c:	ef 92       	push	r14
     60e:	ff 92       	push	r15
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	ec 01       	movw	r28, r24
     61a:	6a 01       	movw	r12, r20
     61c:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     61e:	8c 01       	movw	r16, r24
     620:	09 5f       	subi	r16, 0xF9	; 249
     622:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     624:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     628:	eb 85       	ldd	r30, Y+11	; 0x0b
     62a:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     62c:	88 81       	ld	r24, Y
     62e:	99 81       	ldd	r25, Y+1	; 0x01
     630:	aa 81       	ldd	r26, Y+2	; 0x02
     632:	bb 81       	ldd	r27, Y+3	; 0x03
     634:	c8 2a       	or	r12, r24
     636:	d9 2a       	or	r13, r25
     638:	ea 2a       	or	r14, r26
     63a:	fb 2a       	or	r15, r27
     63c:	c8 82       	st	Y, r12
     63e:	d9 82       	std	Y+1, r13	; 0x01
     640:	ea 82       	std	Y+2, r14	; 0x02
     642:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     644:	c1 2c       	mov	r12, r1
     646:	d1 2c       	mov	r13, r1
     648:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     64a:	3d c0       	rjmp	.+122    	; 0x6c6 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     64c:	a4 80       	ldd	r10, Z+4	; 0x04
     64e:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     650:	80 81       	ld	r24, Z
     652:	91 81       	ldd	r25, Z+1	; 0x01
     654:	a2 81       	ldd	r26, Z+2	; 0x02
     656:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     658:	ac 01       	movw	r20, r24
     65a:	bd 01       	movw	r22, r26
     65c:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     65e:	b2 fd       	sbrc	r27, 2
     660:	0e c0       	rjmp	.+28     	; 0x67e <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     662:	48 80       	ld	r4, Y
     664:	59 80       	ldd	r5, Y+1	; 0x01
     666:	6a 80       	ldd	r6, Y+2	; 0x02
     668:	7b 80       	ldd	r7, Y+3	; 0x03
     66a:	44 22       	and	r4, r20
     66c:	55 22       	and	r5, r21
     66e:	66 22       	and	r6, r22
     670:	77 22       	and	r7, r23
     672:	45 28       	or	r4, r5
     674:	46 28       	or	r4, r6
     676:	47 28       	or	r4, r7
     678:	89 f4       	brne	.+34     	; 0x69c <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	12 c0       	rjmp	.+36     	; 0x6a2 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     67e:	48 80       	ld	r4, Y
     680:	59 80       	ldd	r5, Y+1	; 0x01
     682:	6a 80       	ldd	r6, Y+2	; 0x02
     684:	7b 80       	ldd	r7, Y+3	; 0x03
     686:	44 22       	and	r4, r20
     688:	55 22       	and	r5, r21
     68a:	66 22       	and	r6, r22
     68c:	77 22       	and	r7, r23
     68e:	44 15       	cp	r20, r4
     690:	55 05       	cpc	r21, r5
     692:	66 05       	cpc	r22, r6
     694:	77 05       	cpc	r23, r7
     696:	21 f0       	breq	.+8      	; 0x6a0 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	03 c0       	rjmp	.+6      	; 0x6a2 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     69c:	21 e0       	ldi	r18, 0x01	; 1
     69e:	01 c0       	rjmp	.+2      	; 0x6a2 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     6a0:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     6a2:	22 23       	and	r18, r18
     6a4:	71 f0       	breq	.+28     	; 0x6c2 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     6a6:	b0 ff       	sbrs	r27, 0
     6a8:	04 c0       	rjmp	.+8      	; 0x6b2 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     6aa:	c4 2a       	or	r12, r20
     6ac:	d5 2a       	or	r13, r21
     6ae:	e6 2a       	or	r14, r22
     6b0:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     6b2:	48 81       	ld	r20, Y
     6b4:	59 81       	ldd	r21, Y+1	; 0x01
     6b6:	6a 81       	ldd	r22, Y+2	; 0x02
     6b8:	7b 81       	ldd	r23, Y+3	; 0x03
     6ba:	72 60       	ori	r23, 0x02	; 2
     6bc:	cf 01       	movw	r24, r30
     6be:	0e 94 4c 13 	call	0x2698	; 0x2698 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     6c2:	ea 2d       	mov	r30, r10
     6c4:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     6c6:	e0 17       	cp	r30, r16
     6c8:	f1 07       	cpc	r31, r17
     6ca:	09 f0       	breq	.+2      	; 0x6ce <xEventGroupSetBits+0xd2>
     6cc:	bf cf       	rjmp	.-130    	; 0x64c <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     6ce:	c0 94       	com	r12
     6d0:	d0 94       	com	r13
     6d2:	e0 94       	com	r14
     6d4:	f0 94       	com	r15
     6d6:	88 81       	ld	r24, Y
     6d8:	99 81       	ldd	r25, Y+1	; 0x01
     6da:	aa 81       	ldd	r26, Y+2	; 0x02
     6dc:	bb 81       	ldd	r27, Y+3	; 0x03
     6de:	c8 22       	and	r12, r24
     6e0:	d9 22       	and	r13, r25
     6e2:	ea 22       	and	r14, r26
     6e4:	fb 22       	and	r15, r27
     6e6:	c8 82       	st	Y, r12
     6e8:	d9 82       	std	Y+1, r13	; 0x01
     6ea:	ea 82       	std	Y+2, r14	; 0x02
     6ec:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     6ee:	0e 94 39 10 	call	0x2072	; 0x2072 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     6f2:	68 81       	ld	r22, Y
     6f4:	79 81       	ldd	r23, Y+1	; 0x01
     6f6:	8a 81       	ldd	r24, Y+2	; 0x02
     6f8:	9b 81       	ldd	r25, Y+3	; 0x03
}
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	1f 91       	pop	r17
     700:	0f 91       	pop	r16
     702:	ff 90       	pop	r15
     704:	ef 90       	pop	r14
     706:	df 90       	pop	r13
     708:	cf 90       	pop	r12
     70a:	bf 90       	pop	r11
     70c:	af 90       	pop	r10
     70e:	7f 90       	pop	r7
     710:	6f 90       	pop	r6
     712:	5f 90       	pop	r5
     714:	4f 90       	pop	r4
     716:	08 95       	ret

00000718 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     718:	ea ef       	ldi	r30, 0xFA	; 250
     71a:	f7 e0       	ldi	r31, 0x07	; 7
     71c:	ae ef       	ldi	r26, 0xFE	; 254
     71e:	b7 e0       	ldi	r27, 0x07	; 7
     720:	b1 83       	std	Z+1, r27	; 0x01
     722:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     724:	13 82       	std	Z+3, r1	; 0x03
     726:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     728:	ee eb       	ldi	r30, 0xBE	; 190
     72a:	f1 e1       	ldi	r31, 0x11	; 17
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     72c:	f0 93 f9 07 	sts	0x07F9, r31	; 0x8007f9 <pxEnd+0x1>
     730:	e0 93 f8 07 	sts	0x07F8, r30	; 0x8007f8 <pxEnd>
    pxEnd->xBlockSize = 0;
     734:	13 82       	std	Z+3, r1	; 0x03
     736:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     738:	11 82       	std	Z+1, r1	; 0x01
     73a:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     73c:	80 ec       	ldi	r24, 0xC0	; 192
     73e:	99 e0       	ldi	r25, 0x09	; 9
     740:	13 96       	adiw	r26, 0x03	; 3
     742:	9c 93       	st	X, r25
     744:	8e 93       	st	-X, r24
     746:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     748:	ed 93       	st	X+, r30
     74a:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     74c:	90 93 f5 07 	sts	0x07F5, r25	; 0x8007f5 <xMinimumEverFreeBytesRemaining+0x1>
     750:	80 93 f4 07 	sts	0x07F4, r24	; 0x8007f4 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     754:	90 93 f7 07 	sts	0x07F7, r25	; 0x8007f7 <xFreeBytesRemaining+0x1>
     758:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	90 e8       	ldi	r25, 0x80	; 128
     760:	90 93 ef 07 	sts	0x07EF, r25	; 0x8007ef <__data_end+0x1>
     764:	80 93 ee 07 	sts	0x07EE, r24	; 0x8007ee <__data_end>
     768:	08 95       	ret

0000076a <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     770:	aa ef       	ldi	r26, 0xFA	; 250
     772:	b7 e0       	ldi	r27, 0x07	; 7
     774:	01 c0       	rjmp	.+2      	; 0x778 <prvInsertBlockIntoFreeList+0xe>
     776:	df 01       	movw	r26, r30
     778:	ed 91       	ld	r30, X+
     77a:	fc 91       	ld	r31, X
     77c:	11 97       	sbiw	r26, 0x01	; 1
     77e:	ec 17       	cp	r30, r28
     780:	fd 07       	cpc	r31, r29
     782:	c8 f3       	brcs	.-14     	; 0x776 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     784:	12 96       	adiw	r26, 0x02	; 2
     786:	8d 91       	ld	r24, X+
     788:	9c 91       	ld	r25, X
     78a:	13 97       	sbiw	r26, 0x03	; 3
     78c:	9d 01       	movw	r18, r26
     78e:	28 0f       	add	r18, r24
     790:	39 1f       	adc	r19, r25
     792:	c2 17       	cp	r28, r18
     794:	d3 07       	cpc	r29, r19
     796:	49 f4       	brne	.+18     	; 0x7aa <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     798:	2a 81       	ldd	r18, Y+2	; 0x02
     79a:	3b 81       	ldd	r19, Y+3	; 0x03
     79c:	82 0f       	add	r24, r18
     79e:	93 1f       	adc	r25, r19
     7a0:	13 96       	adiw	r26, 0x03	; 3
     7a2:	9c 93       	st	X, r25
     7a4:	8e 93       	st	-X, r24
     7a6:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     7a8:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     7aa:	8a 81       	ldd	r24, Y+2	; 0x02
     7ac:	9b 81       	ldd	r25, Y+3	; 0x03
     7ae:	9e 01       	movw	r18, r28
     7b0:	28 0f       	add	r18, r24
     7b2:	39 1f       	adc	r19, r25
     7b4:	e2 17       	cp	r30, r18
     7b6:	f3 07       	cpc	r31, r19
     7b8:	c1 f4       	brne	.+48     	; 0x7ea <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     7ba:	20 91 f8 07 	lds	r18, 0x07F8	; 0x8007f8 <pxEnd>
     7be:	30 91 f9 07 	lds	r19, 0x07F9	; 0x8007f9 <pxEnd+0x1>
     7c2:	e2 17       	cp	r30, r18
     7c4:	f3 07       	cpc	r31, r19
     7c6:	71 f0       	breq	.+28     	; 0x7e4 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     7c8:	22 81       	ldd	r18, Z+2	; 0x02
     7ca:	33 81       	ldd	r19, Z+3	; 0x03
     7cc:	82 0f       	add	r24, r18
     7ce:	93 1f       	adc	r25, r19
     7d0:	9b 83       	std	Y+3, r25	; 0x03
     7d2:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     7d4:	ed 91       	ld	r30, X+
     7d6:	fc 91       	ld	r31, X
     7d8:	11 97       	sbiw	r26, 0x01	; 1
     7da:	80 81       	ld	r24, Z
     7dc:	91 81       	ldd	r25, Z+1	; 0x01
     7de:	99 83       	std	Y+1, r25	; 0x01
     7e0:	88 83       	st	Y, r24
     7e2:	05 c0       	rjmp	.+10     	; 0x7ee <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     7e4:	39 83       	std	Y+1, r19	; 0x01
     7e6:	28 83       	st	Y, r18
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     7ea:	f9 83       	std	Y+1, r31	; 0x01
     7ec:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     7ee:	ca 17       	cp	r28, r26
     7f0:	db 07       	cpc	r29, r27
     7f2:	11 f0       	breq	.+4      	; 0x7f8 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     7f4:	cd 93       	st	X+, r28
     7f6:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret

000007fe <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     80c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     810:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <pxEnd>
     814:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <pxEnd+0x1>
     818:	89 2b       	or	r24, r25
     81a:	09 f4       	brne	.+2      	; 0x81e <pvPortMalloc+0x20>
        {
            prvHeapInit();
     81c:	7d df       	rcall	.-262    	; 0x718 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     81e:	80 91 ee 07 	lds	r24, 0x07EE	; 0x8007ee <__data_end>
     822:	90 91 ef 07 	lds	r25, 0x07EF	; 0x8007ef <__data_end+0x1>
     826:	80 23       	and	r24, r16
     828:	91 23       	and	r25, r17
     82a:	89 2b       	or	r24, r25
     82c:	09 f0       	breq	.+2      	; 0x830 <pvPortMalloc+0x32>
     82e:	76 c0       	rjmp	.+236    	; 0x91c <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     830:	01 15       	cp	r16, r1
     832:	11 05       	cpc	r17, r1
     834:	49 f0       	breq	.+18     	; 0x848 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     836:	c8 01       	movw	r24, r16
     838:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     83a:	08 17       	cp	r16, r24
     83c:	19 07       	cpc	r17, r25
     83e:	18 f0       	brcs	.+6      	; 0x846 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     840:	00 e0       	ldi	r16, 0x00	; 0
     842:	10 e0       	ldi	r17, 0x00	; 0
     844:	01 c0       	rjmp	.+2      	; 0x848 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     846:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     848:	01 15       	cp	r16, r1
     84a:	11 05       	cpc	r17, r1
     84c:	09 f4       	brne	.+2      	; 0x850 <pvPortMalloc+0x52>
     84e:	69 c0       	rjmp	.+210    	; 0x922 <pvPortMalloc+0x124>
     850:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <xFreeBytesRemaining>
     854:	90 91 f7 07 	lds	r25, 0x07F7	; 0x8007f7 <xFreeBytesRemaining+0x1>
     858:	80 17       	cp	r24, r16
     85a:	91 07       	cpc	r25, r17
     85c:	08 f4       	brcc	.+2      	; 0x860 <pvPortMalloc+0x62>
     85e:	64 c0       	rjmp	.+200    	; 0x928 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     860:	c0 91 fa 07 	lds	r28, 0x07FA	; 0x8007fa <xStart>
     864:	d0 91 fb 07 	lds	r29, 0x07FB	; 0x8007fb <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     868:	ea ef       	ldi	r30, 0xFA	; 250
     86a:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     86c:	02 c0       	rjmp	.+4      	; 0x872 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     86e:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     870:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     872:	8a 81       	ldd	r24, Y+2	; 0x02
     874:	9b 81       	ldd	r25, Y+3	; 0x03
     876:	80 17       	cp	r24, r16
     878:	91 07       	cpc	r25, r17
     87a:	20 f4       	brcc	.+8      	; 0x884 <pvPortMalloc+0x86>
     87c:	88 81       	ld	r24, Y
     87e:	99 81       	ldd	r25, Y+1	; 0x01
     880:	00 97       	sbiw	r24, 0x00	; 0
     882:	a9 f7       	brne	.-22     	; 0x86e <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     884:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <pxEnd>
     888:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <pxEnd+0x1>
     88c:	c8 17       	cp	r28, r24
     88e:	d9 07       	cpc	r29, r25
     890:	09 f4       	brne	.+2      	; 0x894 <pvPortMalloc+0x96>
     892:	4d c0       	rjmp	.+154    	; 0x92e <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     894:	e0 80       	ld	r14, Z
     896:	f1 80       	ldd	r15, Z+1	; 0x01
     898:	84 e0       	ldi	r24, 0x04	; 4
     89a:	e8 0e       	add	r14, r24
     89c:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     89e:	88 81       	ld	r24, Y
     8a0:	99 81       	ldd	r25, Y+1	; 0x01
     8a2:	91 83       	std	Z+1, r25	; 0x01
     8a4:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     8a6:	2a 81       	ldd	r18, Y+2	; 0x02
     8a8:	3b 81       	ldd	r19, Y+3	; 0x03
     8aa:	20 1b       	sub	r18, r16
     8ac:	31 0b       	sbc	r19, r17
     8ae:	29 30       	cpi	r18, 0x09	; 9
     8b0:	31 05       	cpc	r19, r1
     8b2:	48 f0       	brcs	.+18     	; 0x8c6 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     8b4:	ce 01       	movw	r24, r28
     8b6:	80 0f       	add	r24, r16
     8b8:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     8ba:	fc 01       	movw	r30, r24
     8bc:	33 83       	std	Z+3, r19	; 0x03
     8be:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     8c0:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     8c2:	0a 83       	std	Y+2, r16	; 0x02
     8c4:	52 df       	rcall	.-348    	; 0x76a <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     8c6:	2a 81       	ldd	r18, Y+2	; 0x02
     8c8:	3b 81       	ldd	r19, Y+3	; 0x03
     8ca:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <xFreeBytesRemaining>
     8ce:	90 91 f7 07 	lds	r25, 0x07F7	; 0x8007f7 <xFreeBytesRemaining+0x1>
     8d2:	82 1b       	sub	r24, r18
     8d4:	93 0b       	sbc	r25, r19
     8d6:	90 93 f7 07 	sts	0x07F7, r25	; 0x8007f7 <xFreeBytesRemaining+0x1>
     8da:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     8de:	40 91 f4 07 	lds	r20, 0x07F4	; 0x8007f4 <xMinimumEverFreeBytesRemaining>
     8e2:	50 91 f5 07 	lds	r21, 0x07F5	; 0x8007f5 <xMinimumEverFreeBytesRemaining+0x1>
     8e6:	84 17       	cp	r24, r20
     8e8:	95 07       	cpc	r25, r21
     8ea:	20 f4       	brcc	.+8      	; 0x8f4 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     8ec:	90 93 f5 07 	sts	0x07F5, r25	; 0x8007f5 <xMinimumEverFreeBytesRemaining+0x1>
     8f0:	80 93 f4 07 	sts	0x07F4, r24	; 0x8007f4 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     8f4:	80 91 ee 07 	lds	r24, 0x07EE	; 0x8007ee <__data_end>
     8f8:	90 91 ef 07 	lds	r25, 0x07EF	; 0x8007ef <__data_end+0x1>
     8fc:	28 2b       	or	r18, r24
     8fe:	39 2b       	or	r19, r25
     900:	3b 83       	std	Y+3, r19	; 0x03
     902:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     904:	19 82       	std	Y+1, r1	; 0x01
     906:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     908:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <xNumberOfSuccessfulAllocations>
     90c:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <xNumberOfSuccessfulAllocations+0x1>
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	90 93 f3 07 	sts	0x07F3, r25	; 0x8007f3 <xNumberOfSuccessfulAllocations+0x1>
     916:	80 93 f2 07 	sts	0x07F2, r24	; 0x8007f2 <xNumberOfSuccessfulAllocations>
     91a:	0b c0       	rjmp	.+22     	; 0x932 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     91c:	e1 2c       	mov	r14, r1
     91e:	f1 2c       	mov	r15, r1
     920:	08 c0       	rjmp	.+16     	; 0x932 <pvPortMalloc+0x134>
     922:	e1 2c       	mov	r14, r1
     924:	f1 2c       	mov	r15, r1
     926:	05 c0       	rjmp	.+10     	; 0x932 <pvPortMalloc+0x134>
     928:	e1 2c       	mov	r14, r1
     92a:	f1 2c       	mov	r15, r1
     92c:	02 c0       	rjmp	.+4      	; 0x932 <pvPortMalloc+0x134>
     92e:	e1 2c       	mov	r14, r1
     930:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     932:	0e 94 39 10 	call	0x2072	; 0x2072 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     936:	e1 14       	cp	r14, r1
     938:	f1 04       	cpc	r15, r1
     93a:	11 f4       	brne	.+4      	; 0x940 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     93c:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     940:	c7 01       	movw	r24, r14
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	1f 91       	pop	r17
     948:	0f 91       	pop	r16
     94a:	ff 90       	pop	r15
     94c:	ef 90       	pop	r14
     94e:	08 95       	ret

00000950 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     958:	00 97       	sbiw	r24, 0x00	; 0
     95a:	91 f1       	breq	.+100    	; 0x9c0 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     95c:	ec 01       	movw	r28, r24
     95e:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     960:	4a 81       	ldd	r20, Y+2	; 0x02
     962:	5b 81       	ldd	r21, Y+3	; 0x03
     964:	20 91 ee 07 	lds	r18, 0x07EE	; 0x8007ee <__data_end>
     968:	30 91 ef 07 	lds	r19, 0x07EF	; 0x8007ef <__data_end+0x1>
     96c:	ba 01       	movw	r22, r20
     96e:	62 23       	and	r22, r18
     970:	73 23       	and	r23, r19
     972:	67 2b       	or	r22, r23
     974:	29 f1       	breq	.+74     	; 0x9c0 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     976:	68 81       	ld	r22, Y
     978:	79 81       	ldd	r23, Y+1	; 0x01
     97a:	67 2b       	or	r22, r23
     97c:	09 f5       	brne	.+66     	; 0x9c0 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     97e:	20 95       	com	r18
     980:	30 95       	com	r19
     982:	24 23       	and	r18, r20
     984:	35 23       	and	r19, r21
     986:	3b 83       	std	Y+3, r19	; 0x03
     988:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     98a:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     98e:	8a 81       	ldd	r24, Y+2	; 0x02
     990:	9b 81       	ldd	r25, Y+3	; 0x03
     992:	20 91 f6 07 	lds	r18, 0x07F6	; 0x8007f6 <xFreeBytesRemaining>
     996:	30 91 f7 07 	lds	r19, 0x07F7	; 0x8007f7 <xFreeBytesRemaining+0x1>
     99a:	82 0f       	add	r24, r18
     99c:	93 1f       	adc	r25, r19
     99e:	90 93 f7 07 	sts	0x07F7, r25	; 0x8007f7 <xFreeBytesRemaining+0x1>
     9a2:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     9a6:	ce 01       	movw	r24, r28
     9a8:	e0 de       	rcall	.-576    	; 0x76a <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     9aa:	80 91 f0 07 	lds	r24, 0x07F0	; 0x8007f0 <xNumberOfSuccessfulFrees>
     9ae:	90 91 f1 07 	lds	r25, 0x07F1	; 0x8007f1 <xNumberOfSuccessfulFrees+0x1>
     9b2:	01 96       	adiw	r24, 0x01	; 1
     9b4:	90 93 f1 07 	sts	0x07F1, r25	; 0x8007f1 <xNumberOfSuccessfulFrees+0x1>
     9b8:	80 93 f0 07 	sts	0x07F0, r24	; 0x8007f0 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     9bc:	0e 94 39 10 	call	0x2072	; 0x2072 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	1f 91       	pop	r17
     9c6:	0f 91       	pop	r16
     9c8:	08 95       	ret

000009ca <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     9ca:	fc 01       	movw	r30, r24
     9cc:	03 96       	adiw	r24, 0x03	; 3
     9ce:	92 83       	std	Z+2, r25	; 0x02
     9d0:	81 83       	std	Z+1, r24	; 0x01
     9d2:	4f ef       	ldi	r20, 0xFF	; 255
     9d4:	5f ef       	ldi	r21, 0xFF	; 255
     9d6:	ba 01       	movw	r22, r20
     9d8:	43 83       	std	Z+3, r20	; 0x03
     9da:	54 83       	std	Z+4, r21	; 0x04
     9dc:	65 83       	std	Z+5, r22	; 0x05
     9de:	76 83       	std	Z+6, r23	; 0x06
     9e0:	90 87       	std	Z+8, r25	; 0x08
     9e2:	87 83       	std	Z+7, r24	; 0x07
     9e4:	92 87       	std	Z+10, r25	; 0x0a
     9e6:	81 87       	std	Z+9, r24	; 0x09
     9e8:	10 82       	st	Z, r1
     9ea:	08 95       	ret

000009ec <vListInitialiseItem>:
     9ec:	fc 01       	movw	r30, r24
     9ee:	13 86       	std	Z+11, r1	; 0x0b
     9f0:	12 86       	std	Z+10, r1	; 0x0a
     9f2:	08 95       	ret

000009f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     9fe:	08 81       	ld	r16, Y
     a00:	19 81       	ldd	r17, Y+1	; 0x01
     a02:	2a 81       	ldd	r18, Y+2	; 0x02
     a04:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     a06:	0f 3f       	cpi	r16, 0xFF	; 255
     a08:	4f ef       	ldi	r20, 0xFF	; 255
     a0a:	14 07       	cpc	r17, r20
     a0c:	24 07       	cpc	r18, r20
     a0e:	34 07       	cpc	r19, r20
     a10:	21 f4       	brne	.+8      	; 0xa1a <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     a12:	fc 01       	movw	r30, r24
     a14:	a1 85       	ldd	r26, Z+9	; 0x09
     a16:	b2 85       	ldd	r27, Z+10	; 0x0a
     a18:	11 c0       	rjmp	.+34     	; 0xa3c <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     a1a:	dc 01       	movw	r26, r24
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	01 c0       	rjmp	.+2      	; 0xa22 <vListInsert+0x2e>
     a20:	df 01       	movw	r26, r30
     a22:	14 96       	adiw	r26, 0x04	; 4
     a24:	ed 91       	ld	r30, X+
     a26:	fc 91       	ld	r31, X
     a28:	15 97       	sbiw	r26, 0x05	; 5
     a2a:	40 81       	ld	r20, Z
     a2c:	51 81       	ldd	r21, Z+1	; 0x01
     a2e:	62 81       	ldd	r22, Z+2	; 0x02
     a30:	73 81       	ldd	r23, Z+3	; 0x03
     a32:	04 17       	cp	r16, r20
     a34:	15 07       	cpc	r17, r21
     a36:	26 07       	cpc	r18, r22
     a38:	37 07       	cpc	r19, r23
     a3a:	90 f7       	brcc	.-28     	; 0xa20 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     a3c:	14 96       	adiw	r26, 0x04	; 4
     a3e:	ed 91       	ld	r30, X+
     a40:	fc 91       	ld	r31, X
     a42:	15 97       	sbiw	r26, 0x05	; 5
     a44:	fd 83       	std	Y+5, r31	; 0x05
     a46:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a48:	d7 83       	std	Z+7, r29	; 0x07
     a4a:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     a4c:	bf 83       	std	Y+7, r27	; 0x07
     a4e:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     a50:	15 96       	adiw	r26, 0x05	; 5
     a52:	dc 93       	st	X, r29
     a54:	ce 93       	st	-X, r28
     a56:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     a58:	9b 87       	std	Y+11, r25	; 0x0b
     a5a:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     a5c:	fc 01       	movw	r30, r24
     a5e:	20 81       	ld	r18, Z
     a60:	2f 5f       	subi	r18, 0xFF	; 255
     a62:	20 83       	st	Z, r18
}
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	08 95       	ret

00000a6e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     a74:	a2 85       	ldd	r26, Z+10	; 0x0a
     a76:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a78:	c4 81       	ldd	r28, Z+4	; 0x04
     a7a:	d5 81       	ldd	r29, Z+5	; 0x05
     a7c:	86 81       	ldd	r24, Z+6	; 0x06
     a7e:	97 81       	ldd	r25, Z+7	; 0x07
     a80:	9f 83       	std	Y+7, r25	; 0x07
     a82:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a84:	c6 81       	ldd	r28, Z+6	; 0x06
     a86:	d7 81       	ldd	r29, Z+7	; 0x07
     a88:	84 81       	ldd	r24, Z+4	; 0x04
     a8a:	95 81       	ldd	r25, Z+5	; 0x05
     a8c:	9d 83       	std	Y+5, r25	; 0x05
     a8e:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     a90:	11 96       	adiw	r26, 0x01	; 1
     a92:	8d 91       	ld	r24, X+
     a94:	9c 91       	ld	r25, X
     a96:	12 97       	sbiw	r26, 0x02	; 2
     a98:	e8 17       	cp	r30, r24
     a9a:	f9 07       	cpc	r31, r25
     a9c:	31 f4       	brne	.+12     	; 0xaaa <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     a9e:	86 81       	ldd	r24, Z+6	; 0x06
     aa0:	97 81       	ldd	r25, Z+7	; 0x07
     aa2:	12 96       	adiw	r26, 0x02	; 2
     aa4:	9c 93       	st	X, r25
     aa6:	8e 93       	st	-X, r24
     aa8:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     aaa:	13 86       	std	Z+11, r1	; 0x0b
     aac:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     aae:	8c 91       	ld	r24, X
     ab0:	81 50       	subi	r24, 0x01	; 1
     ab2:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     ab4:	8c 91       	ld	r24, X
}
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	08 95       	ret

00000abc <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     abc:	a8 95       	wdr
     abe:	90 ec       	ldi	r25, 0xC0	; 192
     ac0:	88 e1       	ldi	r24, 0x18	; 24
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	f8 94       	cli
     ac6:	a8 95       	wdr
     ac8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     ad2:	08 95       	ret

00000ad4 <pxPortInitialiseStack>:
     ad4:	fc 01       	movw	r30, r24
     ad6:	60 83       	st	Z, r22
     ad8:	31 97       	sbiw	r30, 0x01	; 1
     ada:	70 83       	st	Z, r23
     adc:	31 97       	sbiw	r30, 0x01	; 1
     ade:	10 82       	st	Z, r1
     ae0:	31 97       	sbiw	r30, 0x01	; 1
     ae2:	10 82       	st	Z, r1
     ae4:	31 97       	sbiw	r30, 0x01	; 1
     ae6:	20 e8       	ldi	r18, 0x80	; 128
     ae8:	20 83       	st	Z, r18
     aea:	31 97       	sbiw	r30, 0x01	; 1
     aec:	10 82       	st	Z, r1
     aee:	31 97       	sbiw	r30, 0x01	; 1
     af0:	10 82       	st	Z, r1
     af2:	31 97       	sbiw	r30, 0x01	; 1
     af4:	10 82       	st	Z, r1
     af6:	77 97       	sbiw	r30, 0x17	; 23
     af8:	40 83       	st	Z, r20
     afa:	31 97       	sbiw	r30, 0x01	; 1
     afc:	50 83       	st	Z, r21
     afe:	86 97       	sbiw	r24, 0x26	; 38
     b00:	08 95       	ret

00000b02 <xPortStartScheduler>:
     b02:	dc df       	rcall	.-72     	; 0xabc <prvSetupTimerInterrupt>
     b04:	a0 91 81 12 	lds	r26, 0x1281	; 0x801281 <pxCurrentTCB>
     b08:	b0 91 82 12 	lds	r27, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
     b0c:	cd 91       	ld	r28, X+
     b0e:	cd bf       	out	0x3d, r28	; 61
     b10:	dd 91       	ld	r29, X+
     b12:	de bf       	out	0x3e, r29	; 62
     b14:	ff 91       	pop	r31
     b16:	ef 91       	pop	r30
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	bf 91       	pop	r27
     b1e:	af 91       	pop	r26
     b20:	9f 91       	pop	r25
     b22:	8f 91       	pop	r24
     b24:	7f 91       	pop	r23
     b26:	6f 91       	pop	r22
     b28:	5f 91       	pop	r21
     b2a:	4f 91       	pop	r20
     b2c:	3f 91       	pop	r19
     b2e:	2f 91       	pop	r18
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	ff 90       	pop	r15
     b36:	ef 90       	pop	r14
     b38:	df 90       	pop	r13
     b3a:	cf 90       	pop	r12
     b3c:	bf 90       	pop	r11
     b3e:	af 90       	pop	r10
     b40:	9f 90       	pop	r9
     b42:	8f 90       	pop	r8
     b44:	7f 90       	pop	r7
     b46:	6f 90       	pop	r6
     b48:	5f 90       	pop	r5
     b4a:	4f 90       	pop	r4
     b4c:	3f 90       	pop	r3
     b4e:	2f 90       	pop	r2
     b50:	1f 90       	pop	r1
     b52:	0f 90       	pop	r0
     b54:	0c be       	out	0x3c, r0	; 60
     b56:	0f 90       	pop	r0
     b58:	0b be       	out	0x3b, r0	; 59
     b5a:	0f 90       	pop	r0
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	0f 90       	pop	r0
     b60:	08 95       	ret
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	08 95       	ret

00000b66 <vPortYield>:
     b66:	0f 92       	push	r0
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	0f 92       	push	r0
     b6e:	0b b6       	in	r0, 0x3b	; 59
     b70:	0f 92       	push	r0
     b72:	0c b6       	in	r0, 0x3c	; 60
     b74:	0f 92       	push	r0
     b76:	1f 92       	push	r1
     b78:	11 24       	eor	r1, r1
     b7a:	2f 92       	push	r2
     b7c:	3f 92       	push	r3
     b7e:	4f 92       	push	r4
     b80:	5f 92       	push	r5
     b82:	6f 92       	push	r6
     b84:	7f 92       	push	r7
     b86:	8f 92       	push	r8
     b88:	9f 92       	push	r9
     b8a:	af 92       	push	r10
     b8c:	bf 92       	push	r11
     b8e:	cf 92       	push	r12
     b90:	df 92       	push	r13
     b92:	ef 92       	push	r14
     b94:	ff 92       	push	r15
     b96:	0f 93       	push	r16
     b98:	1f 93       	push	r17
     b9a:	2f 93       	push	r18
     b9c:	3f 93       	push	r19
     b9e:	4f 93       	push	r20
     ba0:	5f 93       	push	r21
     ba2:	6f 93       	push	r22
     ba4:	7f 93       	push	r23
     ba6:	8f 93       	push	r24
     ba8:	9f 93       	push	r25
     baa:	af 93       	push	r26
     bac:	bf 93       	push	r27
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	ef 93       	push	r30
     bb4:	ff 93       	push	r31
     bb6:	a0 91 81 12 	lds	r26, 0x1281	; 0x801281 <pxCurrentTCB>
     bba:	b0 91 82 12 	lds	r27, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
     bbe:	0d b6       	in	r0, 0x3d	; 61
     bc0:	0d 92       	st	X+, r0
     bc2:	0e b6       	in	r0, 0x3e	; 62
     bc4:	0d 92       	st	X+, r0
     bc6:	0e 94 95 11 	call	0x232a	; 0x232a <vTaskSwitchContext>
     bca:	a0 91 81 12 	lds	r26, 0x1281	; 0x801281 <pxCurrentTCB>
     bce:	b0 91 82 12 	lds	r27, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
     bd2:	cd 91       	ld	r28, X+
     bd4:	cd bf       	out	0x3d, r28	; 61
     bd6:	dd 91       	ld	r29, X+
     bd8:	de bf       	out	0x3e, r29	; 62
     bda:	ff 91       	pop	r31
     bdc:	ef 91       	pop	r30
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	bf 91       	pop	r27
     be4:	af 91       	pop	r26
     be6:	9f 91       	pop	r25
     be8:	8f 91       	pop	r24
     bea:	7f 91       	pop	r23
     bec:	6f 91       	pop	r22
     bee:	5f 91       	pop	r21
     bf0:	4f 91       	pop	r20
     bf2:	3f 91       	pop	r19
     bf4:	2f 91       	pop	r18
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	ff 90       	pop	r15
     bfc:	ef 90       	pop	r14
     bfe:	df 90       	pop	r13
     c00:	cf 90       	pop	r12
     c02:	bf 90       	pop	r11
     c04:	af 90       	pop	r10
     c06:	9f 90       	pop	r9
     c08:	8f 90       	pop	r8
     c0a:	7f 90       	pop	r7
     c0c:	6f 90       	pop	r6
     c0e:	5f 90       	pop	r5
     c10:	4f 90       	pop	r4
     c12:	3f 90       	pop	r3
     c14:	2f 90       	pop	r2
     c16:	1f 90       	pop	r1
     c18:	0f 90       	pop	r0
     c1a:	0c be       	out	0x3c, r0	; 60
     c1c:	0f 90       	pop	r0
     c1e:	0b be       	out	0x3b, r0	; 59
     c20:	0f 90       	pop	r0
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	0f 90       	pop	r0
     c26:	08 95       	ret

00000c28 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     c28:	0f 92       	push	r0
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	0f 92       	push	r0
     c30:	0b b6       	in	r0, 0x3b	; 59
     c32:	0f 92       	push	r0
     c34:	0c b6       	in	r0, 0x3c	; 60
     c36:	0f 92       	push	r0
     c38:	1f 92       	push	r1
     c3a:	11 24       	eor	r1, r1
     c3c:	2f 92       	push	r2
     c3e:	3f 92       	push	r3
     c40:	4f 92       	push	r4
     c42:	5f 92       	push	r5
     c44:	6f 92       	push	r6
     c46:	7f 92       	push	r7
     c48:	8f 92       	push	r8
     c4a:	9f 92       	push	r9
     c4c:	af 92       	push	r10
     c4e:	bf 92       	push	r11
     c50:	cf 92       	push	r12
     c52:	df 92       	push	r13
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	2f 93       	push	r18
     c5e:	3f 93       	push	r19
     c60:	4f 93       	push	r20
     c62:	5f 93       	push	r21
     c64:	6f 93       	push	r22
     c66:	7f 93       	push	r23
     c68:	8f 93       	push	r24
     c6a:	9f 93       	push	r25
     c6c:	af 93       	push	r26
     c6e:	bf 93       	push	r27
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	ef 93       	push	r30
     c76:	ff 93       	push	r31
     c78:	a0 91 81 12 	lds	r26, 0x1281	; 0x801281 <pxCurrentTCB>
     c7c:	b0 91 82 12 	lds	r27, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
     c80:	0d b6       	in	r0, 0x3d	; 61
     c82:	0d 92       	st	X+, r0
     c84:	0e b6       	in	r0, 0x3e	; 62
     c86:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     c88:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     c8a:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <xTaskIncrementTick>
     c8e:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     c90:	0e 94 95 11 	call	0x232a	; 0x232a <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     c94:	a0 91 81 12 	lds	r26, 0x1281	; 0x801281 <pxCurrentTCB>
     c98:	b0 91 82 12 	lds	r27, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
     c9c:	cd 91       	ld	r28, X+
     c9e:	cd bf       	out	0x3d, r28	; 61
     ca0:	dd 91       	ld	r29, X+
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	ff 91       	pop	r31
     ca6:	ef 91       	pop	r30
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	bf 91       	pop	r27
     cae:	af 91       	pop	r26
     cb0:	9f 91       	pop	r25
     cb2:	8f 91       	pop	r24
     cb4:	7f 91       	pop	r23
     cb6:	6f 91       	pop	r22
     cb8:	5f 91       	pop	r21
     cba:	4f 91       	pop	r20
     cbc:	3f 91       	pop	r19
     cbe:	2f 91       	pop	r18
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	ff 90       	pop	r15
     cc6:	ef 90       	pop	r14
     cc8:	df 90       	pop	r13
     cca:	cf 90       	pop	r12
     ccc:	bf 90       	pop	r11
     cce:	af 90       	pop	r10
     cd0:	9f 90       	pop	r9
     cd2:	8f 90       	pop	r8
     cd4:	7f 90       	pop	r7
     cd6:	6f 90       	pop	r6
     cd8:	5f 90       	pop	r5
     cda:	4f 90       	pop	r4
     cdc:	3f 90       	pop	r3
     cde:	2f 90       	pop	r2
     ce0:	1f 90       	pop	r1
     ce2:	0f 90       	pop	r0
     ce4:	0c be       	out	0x3c, r0	; 60
     ce6:	0f 90       	pop	r0
     ce8:	0b be       	out	0x3b, r0	; 59
     cea:	0f 90       	pop	r0
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     cf0:	08 95       	ret

00000cf2 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     cf2:	9a df       	rcall	.-204    	; 0xc28 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     cf4:	18 95       	reti

00000cf6 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	f8 94       	cli
     cfa:	0f 92       	push	r0
     cfc:	fc 01       	movw	r30, r24
     cfe:	86 8d       	ldd	r24, Z+30	; 0x1e
     d00:	81 11       	cpse	r24, r1
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <prvIsQueueEmpty+0x12>
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	01 c0       	rjmp	.+2      	; 0xd0a <prvIsQueueEmpty+0x14>
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	0f 90       	pop	r0
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	08 95       	ret

00000d10 <prvIsQueueFull>:
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	f8 94       	cli
     d14:	0f 92       	push	r0
     d16:	fc 01       	movw	r30, r24
     d18:	26 8d       	ldd	r18, Z+30	; 0x1e
     d1a:	87 8d       	ldd	r24, Z+31	; 0x1f
     d1c:	28 13       	cpse	r18, r24
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <prvIsQueueFull+0x14>
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	01 c0       	rjmp	.+2      	; 0xd26 <prvIsQueueFull+0x16>
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	0f 90       	pop	r0
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	08 95       	ret

00000d2c <prvCopyDataToQueue>:
     d2c:	0f 93       	push	r16
     d2e:	1f 93       	push	r17
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	ec 01       	movw	r28, r24
     d36:	04 2f       	mov	r16, r20
     d38:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d3a:	48 a1       	ldd	r20, Y+32	; 0x20
     d3c:	41 11       	cpse	r20, r1
     d3e:	0c c0       	rjmp	.+24     	; 0xd58 <prvCopyDataToQueue+0x2c>
     d40:	88 81       	ld	r24, Y
     d42:	99 81       	ldd	r25, Y+1	; 0x01
     d44:	89 2b       	or	r24, r25
     d46:	09 f0       	breq	.+2      	; 0xd4a <prvCopyDataToQueue+0x1e>
     d48:	42 c0       	rjmp	.+132    	; 0xdce <prvCopyDataToQueue+0xa2>
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	0e 94 8a 14 	call	0x2914	; 0x2914 <xTaskPriorityDisinherit>
     d52:	1d 82       	std	Y+5, r1	; 0x05
     d54:	1c 82       	std	Y+4, r1	; 0x04
     d56:	42 c0       	rjmp	.+132    	; 0xddc <prvCopyDataToQueue+0xb0>
     d58:	01 11       	cpse	r16, r1
     d5a:	17 c0       	rjmp	.+46     	; 0xd8a <prvCopyDataToQueue+0x5e>
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	9b 81       	ldd	r25, Y+3	; 0x03
     d62:	0e 94 f9 2d 	call	0x5bf2	; 0x5bf2 <memcpy>
     d66:	28 a1       	ldd	r18, Y+32	; 0x20
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	9b 81       	ldd	r25, Y+3	; 0x03
     d6c:	82 0f       	add	r24, r18
     d6e:	91 1d       	adc	r25, r1
     d70:	9b 83       	std	Y+3, r25	; 0x03
     d72:	8a 83       	std	Y+2, r24	; 0x02
     d74:	2c 81       	ldd	r18, Y+4	; 0x04
     d76:	3d 81       	ldd	r19, Y+5	; 0x05
     d78:	82 17       	cp	r24, r18
     d7a:	93 07       	cpc	r25, r19
     d7c:	50 f1       	brcs	.+84     	; 0xdd2 <prvCopyDataToQueue+0xa6>
     d7e:	88 81       	ld	r24, Y
     d80:	99 81       	ldd	r25, Y+1	; 0x01
     d82:	9b 83       	std	Y+3, r25	; 0x03
     d84:	8a 83       	std	Y+2, r24	; 0x02
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	29 c0       	rjmp	.+82     	; 0xddc <prvCopyDataToQueue+0xb0>
     d8a:	50 e0       	ldi	r21, 0x00	; 0
     d8c:	8e 81       	ldd	r24, Y+6	; 0x06
     d8e:	9f 81       	ldd	r25, Y+7	; 0x07
     d90:	0e 94 f9 2d 	call	0x5bf2	; 0x5bf2 <memcpy>
     d94:	88 a1       	ldd	r24, Y+32	; 0x20
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	91 95       	neg	r25
     d9a:	81 95       	neg	r24
     d9c:	91 09       	sbc	r25, r1
     d9e:	2e 81       	ldd	r18, Y+6	; 0x06
     da0:	3f 81       	ldd	r19, Y+7	; 0x07
     da2:	28 0f       	add	r18, r24
     da4:	39 1f       	adc	r19, r25
     da6:	3f 83       	std	Y+7, r19	; 0x07
     da8:	2e 83       	std	Y+6, r18	; 0x06
     daa:	48 81       	ld	r20, Y
     dac:	59 81       	ldd	r21, Y+1	; 0x01
     dae:	24 17       	cp	r18, r20
     db0:	35 07       	cpc	r19, r21
     db2:	30 f4       	brcc	.+12     	; 0xdc0 <prvCopyDataToQueue+0x94>
     db4:	2c 81       	ldd	r18, Y+4	; 0x04
     db6:	3d 81       	ldd	r19, Y+5	; 0x05
     db8:	82 0f       	add	r24, r18
     dba:	93 1f       	adc	r25, r19
     dbc:	9f 83       	std	Y+7, r25	; 0x07
     dbe:	8e 83       	std	Y+6, r24	; 0x06
     dc0:	02 30       	cpi	r16, 0x02	; 2
     dc2:	49 f4       	brne	.+18     	; 0xdd6 <prvCopyDataToQueue+0xaa>
     dc4:	11 23       	and	r17, r17
     dc6:	49 f0       	breq	.+18     	; 0xdda <prvCopyDataToQueue+0xae>
     dc8:	11 50       	subi	r17, 0x01	; 1
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	07 c0       	rjmp	.+14     	; 0xddc <prvCopyDataToQueue+0xb0>
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	05 c0       	rjmp	.+10     	; 0xddc <prvCopyDataToQueue+0xb0>
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	03 c0       	rjmp	.+6      	; 0xddc <prvCopyDataToQueue+0xb0>
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	01 c0       	rjmp	.+2      	; 0xddc <prvCopyDataToQueue+0xb0>
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	1f 5f       	subi	r17, 0xFF	; 255
     dde:	1e 8f       	std	Y+30, r17	; 0x1e
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	08 95       	ret

00000dea <prvCopyDataFromQueue>:
     dea:	fc 01       	movw	r30, r24
     dec:	40 a1       	ldd	r20, Z+32	; 0x20
     dee:	44 23       	and	r20, r20
     df0:	a9 f0       	breq	.+42     	; 0xe1c <prvCopyDataFromQueue+0x32>
     df2:	50 e0       	ldi	r21, 0x00	; 0
     df4:	26 81       	ldd	r18, Z+6	; 0x06
     df6:	37 81       	ldd	r19, Z+7	; 0x07
     df8:	24 0f       	add	r18, r20
     dfa:	35 1f       	adc	r19, r21
     dfc:	37 83       	std	Z+7, r19	; 0x07
     dfe:	26 83       	std	Z+6, r18	; 0x06
     e00:	84 81       	ldd	r24, Z+4	; 0x04
     e02:	95 81       	ldd	r25, Z+5	; 0x05
     e04:	28 17       	cp	r18, r24
     e06:	39 07       	cpc	r19, r25
     e08:	20 f0       	brcs	.+8      	; 0xe12 <prvCopyDataFromQueue+0x28>
     e0a:	80 81       	ld	r24, Z
     e0c:	91 81       	ldd	r25, Z+1	; 0x01
     e0e:	97 83       	std	Z+7, r25	; 0x07
     e10:	86 83       	std	Z+6, r24	; 0x06
     e12:	cb 01       	movw	r24, r22
     e14:	66 81       	ldd	r22, Z+6	; 0x06
     e16:	77 81       	ldd	r23, Z+7	; 0x07
     e18:	0c 94 f9 2d 	jmp	0x5bf2	; 0x5bf2 <memcpy>
     e1c:	08 95       	ret

00000e1e <prvUnlockQueue>:
     e1e:	1f 93       	push	r17
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	ec 01       	movw	r28, r24
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	0f 92       	push	r0
     e2c:	1a a1       	ldd	r17, Y+34	; 0x22
     e2e:	0b c0       	rjmp	.+22     	; 0xe46 <prvUnlockQueue+0x28>
     e30:	8b 89       	ldd	r24, Y+19	; 0x13
     e32:	88 23       	and	r24, r24
     e34:	51 f0       	breq	.+20     	; 0xe4a <prvUnlockQueue+0x2c>
     e36:	ce 01       	movw	r24, r28
     e38:	43 96       	adiw	r24, 0x13	; 19
     e3a:	0e 94 9d 12 	call	0x253a	; 0x253a <xTaskRemoveFromEventList>
     e3e:	81 11       	cpse	r24, r1
     e40:	0e 94 73 14 	call	0x28e6	; 0x28e6 <vTaskMissedYield>
     e44:	11 50       	subi	r17, 0x01	; 1
     e46:	11 16       	cp	r1, r17
     e48:	9c f3       	brlt	.-26     	; 0xe30 <prvUnlockQueue+0x12>
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	8a a3       	std	Y+34, r24	; 0x22
     e4e:	0f 90       	pop	r0
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	0f 92       	push	r0
     e58:	19 a1       	ldd	r17, Y+33	; 0x21
     e5a:	0b c0       	rjmp	.+22     	; 0xe72 <prvUnlockQueue+0x54>
     e5c:	88 85       	ldd	r24, Y+8	; 0x08
     e5e:	88 23       	and	r24, r24
     e60:	51 f0       	breq	.+20     	; 0xe76 <prvUnlockQueue+0x58>
     e62:	ce 01       	movw	r24, r28
     e64:	08 96       	adiw	r24, 0x08	; 8
     e66:	0e 94 9d 12 	call	0x253a	; 0x253a <xTaskRemoveFromEventList>
     e6a:	81 11       	cpse	r24, r1
     e6c:	0e 94 73 14 	call	0x28e6	; 0x28e6 <vTaskMissedYield>
     e70:	11 50       	subi	r17, 0x01	; 1
     e72:	11 16       	cp	r1, r17
     e74:	9c f3       	brlt	.-26     	; 0xe5c <prvUnlockQueue+0x3e>
     e76:	8f ef       	ldi	r24, 0xFF	; 255
     e78:	89 a3       	std	Y+33, r24	; 0x21
     e7a:	0f 90       	pop	r0
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	1f 91       	pop	r17
     e84:	08 95       	ret

00000e86 <xQueueGenericReset>:
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	ec 01       	movw	r28, r24
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	0f 92       	push	r0
     e92:	e8 81       	ld	r30, Y
     e94:	f9 81       	ldd	r31, Y+1	; 0x01
     e96:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e98:	28 a1       	ldd	r18, Y+32	; 0x20
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	82 9f       	mul	r24, r18
     ea0:	a0 01       	movw	r20, r0
     ea2:	83 9f       	mul	r24, r19
     ea4:	50 0d       	add	r21, r0
     ea6:	92 9f       	mul	r25, r18
     ea8:	50 0d       	add	r21, r0
     eaa:	11 24       	eor	r1, r1
     eac:	4e 0f       	add	r20, r30
     eae:	5f 1f       	adc	r21, r31
     eb0:	5d 83       	std	Y+5, r21	; 0x05
     eb2:	4c 83       	std	Y+4, r20	; 0x04
     eb4:	1e 8e       	std	Y+30, r1	; 0x1e
     eb6:	fb 83       	std	Y+3, r31	; 0x03
     eb8:	ea 83       	std	Y+2, r30	; 0x02
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	28 9f       	mul	r18, r24
     ebe:	a0 01       	movw	r20, r0
     ec0:	29 9f       	mul	r18, r25
     ec2:	50 0d       	add	r21, r0
     ec4:	38 9f       	mul	r19, r24
     ec6:	50 0d       	add	r21, r0
     ec8:	11 24       	eor	r1, r1
     eca:	cf 01       	movw	r24, r30
     ecc:	84 0f       	add	r24, r20
     ece:	95 1f       	adc	r25, r21
     ed0:	9f 83       	std	Y+7, r25	; 0x07
     ed2:	8e 83       	std	Y+6, r24	; 0x06
     ed4:	8f ef       	ldi	r24, 0xFF	; 255
     ed6:	89 a3       	std	Y+33, r24	; 0x21
     ed8:	8a a3       	std	Y+34, r24	; 0x22
     eda:	61 11       	cpse	r22, r1
     edc:	0b c0       	rjmp	.+22     	; 0xef4 <xQueueGenericReset+0x6e>
     ede:	88 85       	ldd	r24, Y+8	; 0x08
     ee0:	88 23       	and	r24, r24
     ee2:	71 f0       	breq	.+28     	; 0xf00 <xQueueGenericReset+0x7a>
     ee4:	ce 01       	movw	r24, r28
     ee6:	08 96       	adiw	r24, 0x08	; 8
     ee8:	0e 94 9d 12 	call	0x253a	; 0x253a <xTaskRemoveFromEventList>
     eec:	88 23       	and	r24, r24
     eee:	41 f0       	breq	.+16     	; 0xf00 <xQueueGenericReset+0x7a>
     ef0:	3a de       	rcall	.-908    	; 0xb66 <vPortYield>
     ef2:	06 c0       	rjmp	.+12     	; 0xf00 <xQueueGenericReset+0x7a>
     ef4:	ce 01       	movw	r24, r28
     ef6:	08 96       	adiw	r24, 0x08	; 8
     ef8:	68 dd       	rcall	.-1328   	; 0x9ca <vListInitialise>
     efa:	ce 01       	movw	r24, r28
     efc:	43 96       	adiw	r24, 0x13	; 19
     efe:	65 dd       	rcall	.-1334   	; 0x9ca <vListInitialise>
     f00:	0f 90       	pop	r0
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	08 95       	ret

00000f0c <prvInitialiseNewQueue>:
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
     f10:	f8 01       	movw	r30, r16
     f12:	61 11       	cpse	r22, r1
     f14:	03 c0       	rjmp	.+6      	; 0xf1c <prvInitialiseNewQueue+0x10>
     f16:	11 83       	std	Z+1, r17	; 0x01
     f18:	00 83       	st	Z, r16
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <prvInitialiseNewQueue+0x14>
     f1c:	51 83       	std	Z+1, r21	; 0x01
     f1e:	40 83       	st	Z, r20
     f20:	87 8f       	std	Z+31, r24	; 0x1f
     f22:	60 a3       	std	Z+32, r22	; 0x20
     f24:	61 e0       	ldi	r22, 0x01	; 1
     f26:	cf 01       	movw	r24, r30
     f28:	ae df       	rcall	.-164    	; 0xe86 <xQueueGenericReset>
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	08 95       	ret

00000f30 <xQueueGenericCreate>:
     f30:	df 92       	push	r13
     f32:	ef 92       	push	r14
     f34:	ff 92       	push	r15
     f36:	0f 93       	push	r16
     f38:	1f 93       	push	r17
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	f8 2e       	mov	r15, r24
     f40:	e6 2e       	mov	r14, r22
     f42:	d4 2e       	mov	r13, r20
     f44:	86 9f       	mul	r24, r22
     f46:	c0 01       	movw	r24, r0
     f48:	11 24       	eor	r1, r1
     f4a:	83 96       	adiw	r24, 0x23	; 35
     f4c:	58 dc       	rcall	.-1872   	; 0x7fe <pvPortMalloc>
     f4e:	ec 01       	movw	r28, r24
     f50:	00 97       	sbiw	r24, 0x00	; 0
     f52:	41 f0       	breq	.+16     	; 0xf64 <xQueueGenericCreate+0x34>
     f54:	8c 01       	movw	r16, r24
     f56:	2d 2d       	mov	r18, r13
     f58:	ac 01       	movw	r20, r24
     f5a:	4d 5d       	subi	r20, 0xDD	; 221
     f5c:	5f 4f       	sbci	r21, 0xFF	; 255
     f5e:	6e 2d       	mov	r22, r14
     f60:	8f 2d       	mov	r24, r15
     f62:	d4 df       	rcall	.-88     	; 0xf0c <prvInitialiseNewQueue>
     f64:	ce 01       	movw	r24, r28
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	0f 91       	pop	r16
     f6e:	ff 90       	pop	r15
     f70:	ef 90       	pop	r14
     f72:	df 90       	pop	r13
     f74:	08 95       	ret

00000f76 <xQueueGenericSend>:
     f76:	cf 92       	push	r12
     f78:	df 92       	push	r13
     f7a:	ef 92       	push	r14
     f7c:	ff 92       	push	r15
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	29 97       	sbiw	r28, 0x09	; 9
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	7c 01       	movw	r14, r24
     f98:	6b 01       	movw	r12, r22
     f9a:	2e 83       	std	Y+6, r18	; 0x06
     f9c:	3f 83       	std	Y+7, r19	; 0x07
     f9e:	48 87       	std	Y+8, r20	; 0x08
     fa0:	59 87       	std	Y+9, r21	; 0x09
     fa2:	10 e0       	ldi	r17, 0x00	; 0
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	0f 92       	push	r0
     faa:	f7 01       	movw	r30, r14
     fac:	96 8d       	ldd	r25, Z+30	; 0x1e
     fae:	87 8d       	ldd	r24, Z+31	; 0x1f
     fb0:	98 17       	cp	r25, r24
     fb2:	10 f0       	brcs	.+4      	; 0xfb8 <xQueueGenericSend+0x42>
     fb4:	02 30       	cpi	r16, 0x02	; 2
     fb6:	b1 f4       	brne	.+44     	; 0xfe4 <xQueueGenericSend+0x6e>
     fb8:	40 2f       	mov	r20, r16
     fba:	b6 01       	movw	r22, r12
     fbc:	c7 01       	movw	r24, r14
     fbe:	b6 de       	rcall	.-660    	; 0xd2c <prvCopyDataToQueue>
     fc0:	f7 01       	movw	r30, r14
     fc2:	93 89       	ldd	r25, Z+19	; 0x13
     fc4:	99 23       	and	r25, r25
     fc6:	41 f0       	breq	.+16     	; 0xfd8 <xQueueGenericSend+0x62>
     fc8:	c7 01       	movw	r24, r14
     fca:	43 96       	adiw	r24, 0x13	; 19
     fcc:	0e 94 9d 12 	call	0x253a	; 0x253a <xTaskRemoveFromEventList>
     fd0:	88 23       	and	r24, r24
     fd2:	21 f0       	breq	.+8      	; 0xfdc <xQueueGenericSend+0x66>
     fd4:	c8 dd       	rcall	.-1136   	; 0xb66 <vPortYield>
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <xQueueGenericSend+0x66>
     fd8:	81 11       	cpse	r24, r1
     fda:	c5 dd       	rcall	.-1142   	; 0xb66 <vPortYield>
     fdc:	0f 90       	pop	r0
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	4b c0       	rjmp	.+150    	; 0x107a <__EEPROM_REGION_LENGTH__+0x7a>
     fe4:	8e 81       	ldd	r24, Y+6	; 0x06
     fe6:	9f 81       	ldd	r25, Y+7	; 0x07
     fe8:	a8 85       	ldd	r26, Y+8	; 0x08
     fea:	b9 85       	ldd	r27, Y+9	; 0x09
     fec:	89 2b       	or	r24, r25
     fee:	8a 2b       	or	r24, r26
     ff0:	8b 2b       	or	r24, r27
     ff2:	21 f4       	brne	.+8      	; 0xffc <xQueueGenericSend+0x86>
     ff4:	0f 90       	pop	r0
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	3f c0       	rjmp	.+126    	; 0x107a <__EEPROM_REGION_LENGTH__+0x7a>
     ffc:	11 11       	cpse	r17, r1
     ffe:	05 c0       	rjmp	.+10     	; 0x100a <__EEPROM_REGION_LENGTH__+0xa>
    1000:	ce 01       	movw	r24, r28
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <vTaskInternalSetTimeOutState>
    1008:	11 e0       	ldi	r17, 0x01	; 1
    100a:	0f 90       	pop	r0
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	f1 d6       	rcall	.+3554   	; 0x1df2 <vTaskSuspendAll>
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	0f 92       	push	r0
    1016:	f7 01       	movw	r30, r14
    1018:	81 a1       	ldd	r24, Z+33	; 0x21
    101a:	8f 3f       	cpi	r24, 0xFF	; 255
    101c:	09 f4       	brne	.+2      	; 0x1020 <__EEPROM_REGION_LENGTH__+0x20>
    101e:	11 a2       	std	Z+33, r1	; 0x21
    1020:	f7 01       	movw	r30, r14
    1022:	82 a1       	ldd	r24, Z+34	; 0x22
    1024:	8f 3f       	cpi	r24, 0xFF	; 255
    1026:	09 f4       	brne	.+2      	; 0x102a <__EEPROM_REGION_LENGTH__+0x2a>
    1028:	12 a2       	std	Z+34, r1	; 0x22
    102a:	0f 90       	pop	r0
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	be 01       	movw	r22, r28
    1030:	6a 5f       	subi	r22, 0xFA	; 250
    1032:	7f 4f       	sbci	r23, 0xFF	; 255
    1034:	ce 01       	movw	r24, r28
    1036:	01 96       	adiw	r24, 0x01	; 1
    1038:	0e 94 0d 14 	call	0x281a	; 0x281a <xTaskCheckForTimeOut>
    103c:	81 11       	cpse	r24, r1
    103e:	19 c0       	rjmp	.+50     	; 0x1072 <__EEPROM_REGION_LENGTH__+0x72>
    1040:	c7 01       	movw	r24, r14
    1042:	66 de       	rcall	.-820    	; 0xd10 <prvIsQueueFull>
    1044:	88 23       	and	r24, r24
    1046:	81 f0       	breq	.+32     	; 0x1068 <__EEPROM_REGION_LENGTH__+0x68>
    1048:	4e 81       	ldd	r20, Y+6	; 0x06
    104a:	5f 81       	ldd	r21, Y+7	; 0x07
    104c:	68 85       	ldd	r22, Y+8	; 0x08
    104e:	79 85       	ldd	r23, Y+9	; 0x09
    1050:	c7 01       	movw	r24, r14
    1052:	08 96       	adiw	r24, 0x08	; 8
    1054:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <vTaskPlaceOnEventList>
    1058:	c7 01       	movw	r24, r14
    105a:	e1 de       	rcall	.-574    	; 0xe1e <prvUnlockQueue>
    105c:	0e 94 39 10 	call	0x2072	; 0x2072 <xTaskResumeAll>
    1060:	81 11       	cpse	r24, r1
    1062:	a0 cf       	rjmp	.-192    	; 0xfa4 <xQueueGenericSend+0x2e>
    1064:	80 dd       	rcall	.-1280   	; 0xb66 <vPortYield>
    1066:	9e cf       	rjmp	.-196    	; 0xfa4 <xQueueGenericSend+0x2e>
    1068:	c7 01       	movw	r24, r14
    106a:	d9 de       	rcall	.-590    	; 0xe1e <prvUnlockQueue>
    106c:	0e 94 39 10 	call	0x2072	; 0x2072 <xTaskResumeAll>
    1070:	99 cf       	rjmp	.-206    	; 0xfa4 <xQueueGenericSend+0x2e>
    1072:	c7 01       	movw	r24, r14
    1074:	d4 de       	rcall	.-600    	; 0xe1e <prvUnlockQueue>
    1076:	fd d7       	rcall	.+4090   	; 0x2072 <xTaskResumeAll>
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	29 96       	adiw	r28, 0x09	; 9
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	cd bf       	out	0x3d, r28	; 61
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	ff 90       	pop	r15
    1090:	ef 90       	pop	r14
    1092:	df 90       	pop	r13
    1094:	cf 90       	pop	r12
    1096:	08 95       	ret

00001098 <xQueueGenericSendFromISR>:
    1098:	ef 92       	push	r14
    109a:	ff 92       	push	r15
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	8a 01       	movw	r16, r20
    10a6:	fc 01       	movw	r30, r24
    10a8:	56 8d       	ldd	r21, Z+30	; 0x1e
    10aa:	37 8d       	ldd	r19, Z+31	; 0x1f
    10ac:	53 17       	cp	r21, r19
    10ae:	10 f0       	brcs	.+4      	; 0x10b4 <xQueueGenericSendFromISR+0x1c>
    10b0:	22 30       	cpi	r18, 0x02	; 2
    10b2:	f9 f4       	brne	.+62     	; 0x10f2 <xQueueGenericSendFromISR+0x5a>
    10b4:	42 2f       	mov	r20, r18
    10b6:	78 01       	movw	r14, r16
    10b8:	ec 01       	movw	r28, r24
    10ba:	1a a1       	ldd	r17, Y+34	; 0x22
    10bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10be:	ce 01       	movw	r24, r28
    10c0:	35 de       	rcall	.-918    	; 0xd2c <prvCopyDataToQueue>
    10c2:	1f 3f       	cpi	r17, 0xFF	; 255
    10c4:	81 f4       	brne	.+32     	; 0x10e6 <xQueueGenericSendFromISR+0x4e>
    10c6:	8b 89       	ldd	r24, Y+19	; 0x13
    10c8:	88 23       	and	r24, r24
    10ca:	a9 f0       	breq	.+42     	; 0x10f6 <xQueueGenericSendFromISR+0x5e>
    10cc:	ce 01       	movw	r24, r28
    10ce:	43 96       	adiw	r24, 0x13	; 19
    10d0:	0e 94 9d 12 	call	0x253a	; 0x253a <xTaskRemoveFromEventList>
    10d4:	88 23       	and	r24, r24
    10d6:	89 f0       	breq	.+34     	; 0x10fa <xQueueGenericSendFromISR+0x62>
    10d8:	e1 14       	cp	r14, r1
    10da:	f1 04       	cpc	r15, r1
    10dc:	81 f0       	breq	.+32     	; 0x10fe <xQueueGenericSendFromISR+0x66>
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	f7 01       	movw	r30, r14
    10e2:	80 83       	st	Z, r24
    10e4:	0d c0       	rjmp	.+26     	; 0x1100 <xQueueGenericSendFromISR+0x68>
    10e6:	ff 24       	eor	r15, r15
    10e8:	f3 94       	inc	r15
    10ea:	f1 0e       	add	r15, r17
    10ec:	fa a2       	std	Y+34, r15	; 0x22
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	07 c0       	rjmp	.+14     	; 0x1100 <xQueueGenericSendFromISR+0x68>
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	05 c0       	rjmp	.+10     	; 0x1100 <xQueueGenericSendFromISR+0x68>
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	03 c0       	rjmp	.+6      	; 0x1100 <xQueueGenericSendFromISR+0x68>
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <xQueueGenericSendFromISR+0x68>
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	ff 90       	pop	r15
    110a:	ef 90       	pop	r14
    110c:	08 95       	ret

0000110e <xQueueReceive>:
    110e:	cf 92       	push	r12
    1110:	df 92       	push	r13
    1112:	ef 92       	push	r14
    1114:	ff 92       	push	r15
    1116:	0f 93       	push	r16
    1118:	1f 93       	push	r17
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	29 97       	sbiw	r28, 0x09	; 9
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	8c 01       	movw	r16, r24
    1130:	6b 01       	movw	r12, r22
    1132:	2e 83       	std	Y+6, r18	; 0x06
    1134:	3f 83       	std	Y+7, r19	; 0x07
    1136:	48 87       	std	Y+8, r20	; 0x08
    1138:	59 87       	std	Y+9, r21	; 0x09
    113a:	e1 2c       	mov	r14, r1
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	0f 92       	push	r0
    1142:	f8 01       	movw	r30, r16
    1144:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1146:	ff 20       	and	r15, r15
    1148:	99 f0       	breq	.+38     	; 0x1170 <xQueueReceive+0x62>
    114a:	b6 01       	movw	r22, r12
    114c:	c8 01       	movw	r24, r16
    114e:	4d de       	rcall	.-870    	; 0xdea <prvCopyDataFromQueue>
    1150:	fa 94       	dec	r15
    1152:	f8 01       	movw	r30, r16
    1154:	f6 8e       	std	Z+30, r15	; 0x1e
    1156:	80 85       	ldd	r24, Z+8	; 0x08
    1158:	88 23       	and	r24, r24
    115a:	31 f0       	breq	.+12     	; 0x1168 <xQueueReceive+0x5a>
    115c:	c8 01       	movw	r24, r16
    115e:	08 96       	adiw	r24, 0x08	; 8
    1160:	0e 94 9d 12 	call	0x253a	; 0x253a <xTaskRemoveFromEventList>
    1164:	81 11       	cpse	r24, r1
    1166:	ff dc       	rcall	.-1538   	; 0xb66 <vPortYield>
    1168:	0f 90       	pop	r0
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	4f c0       	rjmp	.+158    	; 0x120e <xQueueReceive+0x100>
    1170:	8e 81       	ldd	r24, Y+6	; 0x06
    1172:	9f 81       	ldd	r25, Y+7	; 0x07
    1174:	a8 85       	ldd	r26, Y+8	; 0x08
    1176:	b9 85       	ldd	r27, Y+9	; 0x09
    1178:	89 2b       	or	r24, r25
    117a:	8a 2b       	or	r24, r26
    117c:	8b 2b       	or	r24, r27
    117e:	21 f4       	brne	.+8      	; 0x1188 <xQueueReceive+0x7a>
    1180:	0f 90       	pop	r0
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	43 c0       	rjmp	.+134    	; 0x120e <xQueueReceive+0x100>
    1188:	e1 10       	cpse	r14, r1
    118a:	06 c0       	rjmp	.+12     	; 0x1198 <xQueueReceive+0x8a>
    118c:	ce 01       	movw	r24, r28
    118e:	01 96       	adiw	r24, 0x01	; 1
    1190:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <vTaskInternalSetTimeOutState>
    1194:	ee 24       	eor	r14, r14
    1196:	e3 94       	inc	r14
    1198:	0f 90       	pop	r0
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	2a d6       	rcall	.+3156   	; 0x1df2 <vTaskSuspendAll>
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	0f 92       	push	r0
    11a4:	f8 01       	movw	r30, r16
    11a6:	81 a1       	ldd	r24, Z+33	; 0x21
    11a8:	8f 3f       	cpi	r24, 0xFF	; 255
    11aa:	09 f4       	brne	.+2      	; 0x11ae <xQueueReceive+0xa0>
    11ac:	11 a2       	std	Z+33, r1	; 0x21
    11ae:	f8 01       	movw	r30, r16
    11b0:	82 a1       	ldd	r24, Z+34	; 0x22
    11b2:	8f 3f       	cpi	r24, 0xFF	; 255
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <xQueueReceive+0xaa>
    11b6:	12 a2       	std	Z+34, r1	; 0x22
    11b8:	0f 90       	pop	r0
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	be 01       	movw	r22, r28
    11be:	6a 5f       	subi	r22, 0xFA	; 250
    11c0:	7f 4f       	sbci	r23, 0xFF	; 255
    11c2:	ce 01       	movw	r24, r28
    11c4:	01 96       	adiw	r24, 0x01	; 1
    11c6:	0e 94 0d 14 	call	0x281a	; 0x281a <xTaskCheckForTimeOut>
    11ca:	81 11       	cpse	r24, r1
    11cc:	17 c0       	rjmp	.+46     	; 0x11fc <xQueueReceive+0xee>
    11ce:	c8 01       	movw	r24, r16
    11d0:	92 dd       	rcall	.-1244   	; 0xcf6 <prvIsQueueEmpty>
    11d2:	88 23       	and	r24, r24
    11d4:	79 f0       	breq	.+30     	; 0x11f4 <xQueueReceive+0xe6>
    11d6:	4e 81       	ldd	r20, Y+6	; 0x06
    11d8:	5f 81       	ldd	r21, Y+7	; 0x07
    11da:	68 85       	ldd	r22, Y+8	; 0x08
    11dc:	79 85       	ldd	r23, Y+9	; 0x09
    11de:	c8 01       	movw	r24, r16
    11e0:	43 96       	adiw	r24, 0x13	; 19
    11e2:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <vTaskPlaceOnEventList>
    11e6:	c8 01       	movw	r24, r16
    11e8:	1a de       	rcall	.-972    	; 0xe1e <prvUnlockQueue>
    11ea:	43 d7       	rcall	.+3718   	; 0x2072 <xTaskResumeAll>
    11ec:	81 11       	cpse	r24, r1
    11ee:	a6 cf       	rjmp	.-180    	; 0x113c <xQueueReceive+0x2e>
    11f0:	ba dc       	rcall	.-1676   	; 0xb66 <vPortYield>
    11f2:	a4 cf       	rjmp	.-184    	; 0x113c <xQueueReceive+0x2e>
    11f4:	c8 01       	movw	r24, r16
    11f6:	13 de       	rcall	.-986    	; 0xe1e <prvUnlockQueue>
    11f8:	3c d7       	rcall	.+3704   	; 0x2072 <xTaskResumeAll>
    11fa:	a0 cf       	rjmp	.-192    	; 0x113c <xQueueReceive+0x2e>
    11fc:	c8 01       	movw	r24, r16
    11fe:	0f de       	rcall	.-994    	; 0xe1e <prvUnlockQueue>
    1200:	38 d7       	rcall	.+3696   	; 0x2072 <xTaskResumeAll>
    1202:	c8 01       	movw	r24, r16
    1204:	78 dd       	rcall	.-1296   	; 0xcf6 <prvIsQueueEmpty>
    1206:	88 23       	and	r24, r24
    1208:	09 f4       	brne	.+2      	; 0x120c <xQueueReceive+0xfe>
    120a:	98 cf       	rjmp	.-208    	; 0x113c <xQueueReceive+0x2e>
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	29 96       	adiw	r28, 0x09	; 9
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	ff 90       	pop	r15
    1224:	ef 90       	pop	r14
    1226:	df 90       	pop	r13
    1228:	cf 90       	pop	r12
    122a:	08 95       	ret

0000122c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	f8 94       	cli
    1236:	0f 92       	push	r0
    1238:	89 a1       	ldd	r24, Y+33	; 0x21
    123a:	8f 3f       	cpi	r24, 0xFF	; 255
    123c:	09 f4       	brne	.+2      	; 0x1240 <vQueueWaitForMessageRestricted+0x14>
    123e:	19 a2       	std	Y+33, r1	; 0x21
    1240:	8a a1       	ldd	r24, Y+34	; 0x22
    1242:	8f 3f       	cpi	r24, 0xFF	; 255
    1244:	09 f4       	brne	.+2      	; 0x1248 <vQueueWaitForMessageRestricted+0x1c>
    1246:	1a a2       	std	Y+34, r1	; 0x22
    1248:	0f 90       	pop	r0
    124a:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    124c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    124e:	81 11       	cpse	r24, r1
    1250:	04 c0       	rjmp	.+8      	; 0x125a <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1252:	ce 01       	movw	r24, r28
    1254:	43 96       	adiw	r24, 0x13	; 19
    1256:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    125a:	ce 01       	movw	r24, r28
    125c:	e0 dd       	rcall	.-1088   	; 0xe1e <prvUnlockQueue>
    }
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	08 95       	ret

00001264 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1264:	fc 01       	movw	r30, r24
    1266:	44 81       	ldd	r20, Z+4	; 0x04
    1268:	55 81       	ldd	r21, Z+5	; 0x05
    126a:	22 81       	ldd	r18, Z+2	; 0x02
    126c:	33 81       	ldd	r19, Z+3	; 0x03
    126e:	24 0f       	add	r18, r20
    1270:	35 1f       	adc	r19, r21
    1272:	80 81       	ld	r24, Z
    1274:	91 81       	ldd	r25, Z+1	; 0x01
    1276:	b9 01       	movw	r22, r18
    1278:	68 1b       	sub	r22, r24
    127a:	79 0b       	sbc	r23, r25
    127c:	cb 01       	movw	r24, r22
    127e:	64 17       	cp	r22, r20
    1280:	75 07       	cpc	r23, r21
    1282:	10 f0       	brcs	.+4      	; 0x1288 <prvBytesInBuffer+0x24>
    1284:	84 1b       	sub	r24, r20
    1286:	95 0b       	sbc	r25, r21
    1288:	08 95       	ret

0000128a <prvInitialiseNewStreamBuffer>:
    128a:	0f 93       	push	r16
    128c:	fc 01       	movw	r30, r24
    128e:	8f e0       	ldi	r24, 0x0F	; 15
    1290:	df 01       	movw	r26, r30
    1292:	1d 92       	st	X+, r1
    1294:	8a 95       	dec	r24
    1296:	e9 f7       	brne	.-6      	; 0x1292 <prvInitialiseNewStreamBuffer+0x8>
    1298:	75 87       	std	Z+13, r23	; 0x0d
    129a:	64 87       	std	Z+12, r22	; 0x0c
    129c:	55 83       	std	Z+5, r21	; 0x05
    129e:	44 83       	std	Z+4, r20	; 0x04
    12a0:	37 83       	std	Z+7, r19	; 0x07
    12a2:	26 83       	std	Z+6, r18	; 0x06
    12a4:	06 87       	std	Z+14, r16	; 0x0e
    12a6:	0f 91       	pop	r16
    12a8:	08 95       	ret

000012aa <prvWriteBytesToBuffer>:
    12aa:	af 92       	push	r10
    12ac:	bf 92       	push	r11
    12ae:	cf 92       	push	r12
    12b0:	df 92       	push	r13
    12b2:	ef 92       	push	r14
    12b4:	ff 92       	push	r15
    12b6:	0f 93       	push	r16
    12b8:	1f 93       	push	r17
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	6c 01       	movw	r12, r24
    12c0:	5b 01       	movw	r10, r22
    12c2:	7a 01       	movw	r14, r20
    12c4:	fc 01       	movw	r30, r24
    12c6:	c2 81       	ldd	r28, Z+2	; 0x02
    12c8:	d3 81       	ldd	r29, Z+3	; 0x03
    12ca:	04 81       	ldd	r16, Z+4	; 0x04
    12cc:	15 81       	ldd	r17, Z+5	; 0x05
    12ce:	0c 1b       	sub	r16, r28
    12d0:	1d 0b       	sbc	r17, r29
    12d2:	40 17       	cp	r20, r16
    12d4:	51 07       	cpc	r21, r17
    12d6:	08 f4       	brcc	.+2      	; 0x12da <prvWriteBytesToBuffer+0x30>
    12d8:	8a 01       	movw	r16, r20
    12da:	f6 01       	movw	r30, r12
    12dc:	84 85       	ldd	r24, Z+12	; 0x0c
    12de:	95 85       	ldd	r25, Z+13	; 0x0d
    12e0:	a8 01       	movw	r20, r16
    12e2:	b5 01       	movw	r22, r10
    12e4:	8c 0f       	add	r24, r28
    12e6:	9d 1f       	adc	r25, r29
    12e8:	0e 94 f9 2d 	call	0x5bf2	; 0x5bf2 <memcpy>
    12ec:	0e 15       	cp	r16, r14
    12ee:	1f 05       	cpc	r17, r15
    12f0:	58 f4       	brcc	.+22     	; 0x1308 <prvWriteBytesToBuffer+0x5e>
    12f2:	a7 01       	movw	r20, r14
    12f4:	40 1b       	sub	r20, r16
    12f6:	51 0b       	sbc	r21, r17
    12f8:	b5 01       	movw	r22, r10
    12fa:	60 0f       	add	r22, r16
    12fc:	71 1f       	adc	r23, r17
    12fe:	f6 01       	movw	r30, r12
    1300:	84 85       	ldd	r24, Z+12	; 0x0c
    1302:	95 85       	ldd	r25, Z+13	; 0x0d
    1304:	0e 94 f9 2d 	call	0x5bf2	; 0x5bf2 <memcpy>
    1308:	ce 01       	movw	r24, r28
    130a:	8e 0d       	add	r24, r14
    130c:	9f 1d       	adc	r25, r15
    130e:	f6 01       	movw	r30, r12
    1310:	24 81       	ldd	r18, Z+4	; 0x04
    1312:	35 81       	ldd	r19, Z+5	; 0x05
    1314:	82 17       	cp	r24, r18
    1316:	93 07       	cpc	r25, r19
    1318:	10 f0       	brcs	.+4      	; 0x131e <prvWriteBytesToBuffer+0x74>
    131a:	82 1b       	sub	r24, r18
    131c:	93 0b       	sbc	r25, r19
    131e:	f6 01       	movw	r30, r12
    1320:	93 83       	std	Z+3, r25	; 0x03
    1322:	82 83       	std	Z+2, r24	; 0x02
    1324:	c7 01       	movw	r24, r14
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	1f 91       	pop	r17
    132c:	0f 91       	pop	r16
    132e:	ff 90       	pop	r15
    1330:	ef 90       	pop	r14
    1332:	df 90       	pop	r13
    1334:	cf 90       	pop	r12
    1336:	bf 90       	pop	r11
    1338:	af 90       	pop	r10
    133a:	08 95       	ret

0000133c <prvWriteMessageToBuffer>:
    133c:	cf 92       	push	r12
    133e:	df 92       	push	r13
    1340:	ef 92       	push	r14
    1342:	ff 92       	push	r15
    1344:	0f 93       	push	r16
    1346:	1f 93       	push	r17
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
    134c:	1f 92       	push	r1
    134e:	1f 92       	push	r1
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	7c 01       	movw	r14, r24
    1356:	6b 01       	movw	r12, r22
    1358:	5a 83       	std	Y+2, r21	; 0x02
    135a:	49 83       	std	Y+1, r20	; 0x01
    135c:	21 15       	cp	r18, r1
    135e:	31 05       	cpc	r19, r1
    1360:	c1 f0       	breq	.+48     	; 0x1392 <prvWriteMessageToBuffer+0x56>
    1362:	fc 01       	movw	r30, r24
    1364:	86 85       	ldd	r24, Z+14	; 0x0e
    1366:	80 fd       	sbrc	r24, 0
    1368:	08 c0       	rjmp	.+16     	; 0x137a <prvWriteMessageToBuffer+0x3e>
    136a:	42 17       	cp	r20, r18
    136c:	53 07       	cpc	r21, r19
    136e:	08 f4       	brcc	.+2      	; 0x1372 <prvWriteMessageToBuffer+0x36>
    1370:	9a 01       	movw	r18, r20
    1372:	3a 83       	std	Y+2, r19	; 0x02
    1374:	29 83       	std	Y+1, r18	; 0x01
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	0f c0       	rjmp	.+30     	; 0x1398 <prvWriteMessageToBuffer+0x5c>
    137a:	20 17       	cp	r18, r16
    137c:	31 07       	cpc	r19, r17
    137e:	58 f0       	brcs	.+22     	; 0x1396 <prvWriteMessageToBuffer+0x5a>
    1380:	42 e0       	ldi	r20, 0x02	; 2
    1382:	50 e0       	ldi	r21, 0x00	; 0
    1384:	be 01       	movw	r22, r28
    1386:	6f 5f       	subi	r22, 0xFF	; 255
    1388:	7f 4f       	sbci	r23, 0xFF	; 255
    138a:	c7 01       	movw	r24, r14
    138c:	8e df       	rcall	.-228    	; 0x12aa <prvWriteBytesToBuffer>
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	03 c0       	rjmp	.+6      	; 0x1398 <prvWriteMessageToBuffer+0x5c>
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	01 c0       	rjmp	.+2      	; 0x1398 <prvWriteMessageToBuffer+0x5c>
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	88 23       	and	r24, r24
    139a:	31 f0       	breq	.+12     	; 0x13a8 <prvWriteMessageToBuffer+0x6c>
    139c:	49 81       	ldd	r20, Y+1	; 0x01
    139e:	5a 81       	ldd	r21, Y+2	; 0x02
    13a0:	b6 01       	movw	r22, r12
    13a2:	c7 01       	movw	r24, r14
    13a4:	82 df       	rcall	.-252    	; 0x12aa <prvWriteBytesToBuffer>
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <prvWriteMessageToBuffer+0x70>
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	ff 90       	pop	r15
    13ba:	ef 90       	pop	r14
    13bc:	df 90       	pop	r13
    13be:	cf 90       	pop	r12
    13c0:	08 95       	ret

000013c2 <prvReadBytesFromBuffer>:
    13c2:	af 92       	push	r10
    13c4:	bf 92       	push	r11
    13c6:	cf 92       	push	r12
    13c8:	df 92       	push	r13
    13ca:	ef 92       	push	r14
    13cc:	ff 92       	push	r15
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	7c 01       	movw	r14, r24
    13d8:	5b 01       	movw	r10, r22
    13da:	e9 01       	movw	r28, r18
    13dc:	42 17       	cp	r20, r18
    13de:	53 07       	cpc	r21, r19
    13e0:	08 f4       	brcc	.+2      	; 0x13e4 <prvReadBytesFromBuffer+0x22>
    13e2:	ea 01       	movw	r28, r20
    13e4:	20 97       	sbiw	r28, 0x00	; 0
    13e6:	81 f1       	breq	.+96     	; 0x1448 <prvReadBytesFromBuffer+0x86>
    13e8:	f7 01       	movw	r30, r14
    13ea:	00 81       	ld	r16, Z
    13ec:	11 81       	ldd	r17, Z+1	; 0x01
    13ee:	84 81       	ldd	r24, Z+4	; 0x04
    13f0:	95 81       	ldd	r25, Z+5	; 0x05
    13f2:	80 1b       	sub	r24, r16
    13f4:	91 0b       	sbc	r25, r17
    13f6:	6e 01       	movw	r12, r28
    13f8:	8c 17       	cp	r24, r28
    13fa:	9d 07       	cpc	r25, r29
    13fc:	08 f4       	brcc	.+2      	; 0x1400 <prvReadBytesFromBuffer+0x3e>
    13fe:	6c 01       	movw	r12, r24
    1400:	f7 01       	movw	r30, r14
    1402:	64 85       	ldd	r22, Z+12	; 0x0c
    1404:	75 85       	ldd	r23, Z+13	; 0x0d
    1406:	60 0f       	add	r22, r16
    1408:	71 1f       	adc	r23, r17
    140a:	a6 01       	movw	r20, r12
    140c:	c5 01       	movw	r24, r10
    140e:	0e 94 f9 2d 	call	0x5bf2	; 0x5bf2 <memcpy>
    1412:	cc 16       	cp	r12, r28
    1414:	dd 06       	cpc	r13, r29
    1416:	58 f4       	brcc	.+22     	; 0x142e <prvReadBytesFromBuffer+0x6c>
    1418:	ae 01       	movw	r20, r28
    141a:	4c 19       	sub	r20, r12
    141c:	5d 09       	sbc	r21, r13
    141e:	f7 01       	movw	r30, r14
    1420:	64 85       	ldd	r22, Z+12	; 0x0c
    1422:	75 85       	ldd	r23, Z+13	; 0x0d
    1424:	c5 01       	movw	r24, r10
    1426:	8c 0d       	add	r24, r12
    1428:	9d 1d       	adc	r25, r13
    142a:	0e 94 f9 2d 	call	0x5bf2	; 0x5bf2 <memcpy>
    142e:	0c 0f       	add	r16, r28
    1430:	1d 1f       	adc	r17, r29
    1432:	f7 01       	movw	r30, r14
    1434:	84 81       	ldd	r24, Z+4	; 0x04
    1436:	95 81       	ldd	r25, Z+5	; 0x05
    1438:	08 17       	cp	r16, r24
    143a:	19 07       	cpc	r17, r25
    143c:	10 f0       	brcs	.+4      	; 0x1442 <prvReadBytesFromBuffer+0x80>
    143e:	08 1b       	sub	r16, r24
    1440:	19 0b       	sbc	r17, r25
    1442:	f7 01       	movw	r30, r14
    1444:	11 83       	std	Z+1, r17	; 0x01
    1446:	00 83       	st	Z, r16
    1448:	ce 01       	movw	r24, r28
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	1f 91       	pop	r17
    1450:	0f 91       	pop	r16
    1452:	ff 90       	pop	r15
    1454:	ef 90       	pop	r14
    1456:	df 90       	pop	r13
    1458:	cf 90       	pop	r12
    145a:	bf 90       	pop	r11
    145c:	af 90       	pop	r10
    145e:	08 95       	ret

00001460 <prvReadMessageFromBuffer>:
    1460:	6f 92       	push	r6
    1462:	7f 92       	push	r7
    1464:	8f 92       	push	r8
    1466:	9f 92       	push	r9
    1468:	af 92       	push	r10
    146a:	bf 92       	push	r11
    146c:	cf 92       	push	r12
    146e:	df 92       	push	r13
    1470:	ef 92       	push	r14
    1472:	ff 92       	push	r15
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	1f 92       	push	r1
    147e:	1f 92       	push	r1
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	6c 01       	movw	r12, r24
    1486:	4b 01       	movw	r8, r22
    1488:	5a 01       	movw	r10, r20
    148a:	79 01       	movw	r14, r18
    148c:	01 15       	cp	r16, r1
    148e:	11 05       	cpc	r17, r1
    1490:	b1 f0       	breq	.+44     	; 0x14be <prvReadMessageFromBuffer+0x5e>
    1492:	fc 01       	movw	r30, r24
    1494:	60 80       	ld	r6, Z
    1496:	71 80       	ldd	r7, Z+1	; 0x01
    1498:	a8 01       	movw	r20, r16
    149a:	be 01       	movw	r22, r28
    149c:	6f 5f       	subi	r22, 0xFF	; 255
    149e:	7f 4f       	sbci	r23, 0xFF	; 255
    14a0:	90 df       	rcall	.-224    	; 0x13c2 <prvReadBytesFromBuffer>
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	9a 81       	ldd	r25, Y+2	; 0x02
    14a6:	e0 1a       	sub	r14, r16
    14a8:	f1 0a       	sbc	r15, r17
    14aa:	a8 16       	cp	r10, r24
    14ac:	b9 06       	cpc	r11, r25
    14ae:	30 f4       	brcc	.+12     	; 0x14bc <prvReadMessageFromBuffer+0x5c>
    14b0:	f6 01       	movw	r30, r12
    14b2:	71 82       	std	Z+1, r7	; 0x01
    14b4:	60 82       	st	Z, r6
    14b6:	a1 2c       	mov	r10, r1
    14b8:	b1 2c       	mov	r11, r1
    14ba:	01 c0       	rjmp	.+2      	; 0x14be <prvReadMessageFromBuffer+0x5e>
    14bc:	5c 01       	movw	r10, r24
    14be:	97 01       	movw	r18, r14
    14c0:	a5 01       	movw	r20, r10
    14c2:	b4 01       	movw	r22, r8
    14c4:	c6 01       	movw	r24, r12
    14c6:	7d df       	rcall	.-262    	; 0x13c2 <prvReadBytesFromBuffer>
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	ff 90       	pop	r15
    14d6:	ef 90       	pop	r14
    14d8:	df 90       	pop	r13
    14da:	cf 90       	pop	r12
    14dc:	bf 90       	pop	r11
    14de:	af 90       	pop	r10
    14e0:	9f 90       	pop	r9
    14e2:	8f 90       	pop	r8
    14e4:	7f 90       	pop	r7
    14e6:	6f 90       	pop	r6
    14e8:	08 95       	ret

000014ea <xStreamBufferGenericCreate>:
    14ea:	cf 92       	push	r12
    14ec:	df 92       	push	r13
    14ee:	ef 92       	push	r14
    14f0:	ff 92       	push	r15
    14f2:	0f 93       	push	r16
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	ec 01       	movw	r28, r24
    14fa:	6b 01       	movw	r12, r22
    14fc:	41 30       	cpi	r20, 0x01	; 1
    14fe:	11 f4       	brne	.+4      	; 0x1504 <xStreamBufferGenericCreate+0x1a>
    1500:	01 e0       	ldi	r16, 0x01	; 1
    1502:	01 c0       	rjmp	.+2      	; 0x1506 <xStreamBufferGenericCreate+0x1c>
    1504:	00 e0       	ldi	r16, 0x00	; 0
    1506:	c1 14       	cp	r12, r1
    1508:	d1 04       	cpc	r13, r1
    150a:	19 f4       	brne	.+6      	; 0x1512 <xStreamBufferGenericCreate+0x28>
    150c:	cc 24       	eor	r12, r12
    150e:	c3 94       	inc	r12
    1510:	d1 2c       	mov	r13, r1
    1512:	ce 01       	movw	r24, r28
    1514:	40 96       	adiw	r24, 0x10	; 16
    1516:	c8 17       	cp	r28, r24
    1518:	d9 07       	cpc	r29, r25
    151a:	20 f4       	brcc	.+8      	; 0x1524 <xStreamBufferGenericCreate+0x3a>
    151c:	21 96       	adiw	r28, 0x01	; 1
    151e:	6f d9       	rcall	.-3362   	; 0x7fe <pvPortMalloc>
    1520:	7c 01       	movw	r14, r24
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <xStreamBufferGenericCreate+0x3e>
    1524:	e1 2c       	mov	r14, r1
    1526:	f1 2c       	mov	r15, r1
    1528:	e1 14       	cp	r14, r1
    152a:	f1 04       	cpc	r15, r1
    152c:	39 f0       	breq	.+14     	; 0x153c <xStreamBufferGenericCreate+0x52>
    152e:	96 01       	movw	r18, r12
    1530:	ae 01       	movw	r20, r28
    1532:	b7 01       	movw	r22, r14
    1534:	61 5f       	subi	r22, 0xF1	; 241
    1536:	7f 4f       	sbci	r23, 0xFF	; 255
    1538:	c7 01       	movw	r24, r14
    153a:	a7 de       	rcall	.-690    	; 0x128a <prvInitialiseNewStreamBuffer>
    153c:	c7 01       	movw	r24, r14
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	0f 91       	pop	r16
    1544:	ff 90       	pop	r15
    1546:	ef 90       	pop	r14
    1548:	df 90       	pop	r13
    154a:	cf 90       	pop	r12
    154c:	08 95       	ret

0000154e <xStreamBufferReset>:
    154e:	0f 93       	push	r16
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	f8 94       	cli
    1554:	0f 92       	push	r0
    1556:	fc 01       	movw	r30, r24
    1558:	20 85       	ldd	r18, Z+8	; 0x08
    155a:	31 85       	ldd	r19, Z+9	; 0x09
    155c:	23 2b       	or	r18, r19
    155e:	71 f4       	brne	.+28     	; 0x157c <xStreamBufferReset+0x2e>
    1560:	22 85       	ldd	r18, Z+10	; 0x0a
    1562:	33 85       	ldd	r19, Z+11	; 0x0b
    1564:	23 2b       	or	r18, r19
    1566:	61 f4       	brne	.+24     	; 0x1580 <xStreamBufferReset+0x32>
    1568:	26 81       	ldd	r18, Z+6	; 0x06
    156a:	37 81       	ldd	r19, Z+7	; 0x07
    156c:	44 81       	ldd	r20, Z+4	; 0x04
    156e:	55 81       	ldd	r21, Z+5	; 0x05
    1570:	64 85       	ldd	r22, Z+12	; 0x0c
    1572:	75 85       	ldd	r23, Z+13	; 0x0d
    1574:	06 85       	ldd	r16, Z+14	; 0x0e
    1576:	89 de       	rcall	.-750    	; 0x128a <prvInitialiseNewStreamBuffer>
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	03 c0       	rjmp	.+6      	; 0x1582 <xStreamBufferReset+0x34>
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	01 c0       	rjmp	.+2      	; 0x1582 <xStreamBufferReset+0x34>
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	0f 90       	pop	r0
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	0f 91       	pop	r16
    1588:	08 95       	ret

0000158a <xStreamBufferSpacesAvailable>:
    158a:	fc 01       	movw	r30, r24
    158c:	24 81       	ldd	r18, Z+4	; 0x04
    158e:	35 81       	ldd	r19, Z+5	; 0x05
    1590:	80 81       	ld	r24, Z
    1592:	91 81       	ldd	r25, Z+1	; 0x01
    1594:	82 0f       	add	r24, r18
    1596:	93 1f       	adc	r25, r19
    1598:	42 81       	ldd	r20, Z+2	; 0x02
    159a:	53 81       	ldd	r21, Z+3	; 0x03
    159c:	84 1b       	sub	r24, r20
    159e:	95 0b       	sbc	r25, r21
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	82 17       	cp	r24, r18
    15a4:	93 07       	cpc	r25, r19
    15a6:	10 f0       	brcs	.+4      	; 0x15ac <xStreamBufferSpacesAvailable+0x22>
    15a8:	82 1b       	sub	r24, r18
    15aa:	93 0b       	sbc	r25, r19
    15ac:	08 95       	ret

000015ae <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    15ae:	2f 92       	push	r2
    15b0:	3f 92       	push	r3
    15b2:	4f 92       	push	r4
    15b4:	5f 92       	push	r5
    15b6:	6f 92       	push	r6
    15b8:	7f 92       	push	r7
    15ba:	8f 92       	push	r8
    15bc:	9f 92       	push	r9
    15be:	af 92       	push	r10
    15c0:	bf 92       	push	r11
    15c2:	cf 92       	push	r12
    15c4:	df 92       	push	r13
    15c6:	ef 92       	push	r14
    15c8:	ff 92       	push	r15
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	2b 97       	sbiw	r28, 0x0b	; 11
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	4c 01       	movw	r8, r24
    15e4:	7b 87       	std	Y+11, r23	; 0x0b
    15e6:	6a 87       	std	Y+10, r22	; 0x0a
    15e8:	1a 01       	movw	r2, r20
    15ea:	0e 83       	std	Y+6, r16	; 0x06
    15ec:	1f 83       	std	Y+7, r17	; 0x07
    15ee:	28 87       	std	Y+8, r18	; 0x08
    15f0:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    15f2:	fc 01       	movw	r30, r24
    15f4:	84 81       	ldd	r24, Z+4	; 0x04
    15f6:	95 81       	ldd	r25, Z+5	; 0x05
    15f8:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    15fa:	26 85       	ldd	r18, Z+14	; 0x0e
    15fc:	20 ff       	sbrs	r18, 0
    15fe:	0c c0       	rjmp	.+24     	; 0x1618 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1600:	2a 01       	movw	r4, r20
    1602:	f2 e0       	ldi	r31, 0x02	; 2
    1604:	4f 0e       	add	r4, r31
    1606:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1608:	84 15       	cp	r24, r4
    160a:	95 05       	cpc	r25, r5
    160c:	58 f4       	brcc	.+22     	; 0x1624 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    160e:	1e 82       	std	Y+6, r1	; 0x06
    1610:	1f 82       	std	Y+7, r1	; 0x07
    1612:	18 86       	std	Y+8, r1	; 0x08
    1614:	19 86       	std	Y+9, r1	; 0x09
    1616:	06 c0       	rjmp	.+12     	; 0x1624 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1618:	84 17       	cp	r24, r20
    161a:	95 07       	cpc	r25, r21
    161c:	10 f0       	brcs	.+4      	; 0x1622 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    161e:	2a 01       	movw	r4, r20
    1620:	01 c0       	rjmp	.+2      	; 0x1624 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1622:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1624:	8e 81       	ldd	r24, Y+6	; 0x06
    1626:	9f 81       	ldd	r25, Y+7	; 0x07
    1628:	a8 85       	ldd	r26, Y+8	; 0x08
    162a:	b9 85       	ldd	r27, Y+9	; 0x09
    162c:	89 2b       	or	r24, r25
    162e:	8a 2b       	or	r24, r26
    1630:	8b 2b       	or	r24, r27
    1632:	09 f4       	brne	.+2      	; 0x1636 <xStreamBufferSend+0x88>
    1634:	38 c0       	rjmp	.+112    	; 0x16a6 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1636:	ce 01       	movw	r24, r28
    1638:	01 96       	adiw	r24, 0x01	; 1
    163a:	0e 94 e6 13 	call	0x27cc	; 0x27cc <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1644:	c4 01       	movw	r24, r8
    1646:	a1 df       	rcall	.-190    	; 0x158a <xStreamBufferSpacesAvailable>
    1648:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    164a:	84 15       	cp	r24, r4
    164c:	95 05       	cpc	r25, r5
    164e:	40 f5       	brcc	.+80     	; 0x16a0 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    165a:	0e 94 77 14 	call	0x28ee	; 0x28ee <xTaskGetCurrentTaskHandle>
    165e:	f4 01       	movw	r30, r8
    1660:	93 87       	std	Z+11, r25	; 0x0b
    1662:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1664:	0f 90       	pop	r0
    1666:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1668:	ae 80       	ldd	r10, Y+6	; 0x06
    166a:	bf 80       	ldd	r11, Y+7	; 0x07
    166c:	c8 84       	ldd	r12, Y+8	; 0x08
    166e:	d9 84       	ldd	r13, Y+9	; 0x09
    1670:	e1 2c       	mov	r14, r1
    1672:	f1 2c       	mov	r15, r1
    1674:	00 e0       	ldi	r16, 0x00	; 0
    1676:	10 e0       	ldi	r17, 0x00	; 0
    1678:	98 01       	movw	r18, r16
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	50 e0       	ldi	r21, 0x00	; 0
    167e:	ba 01       	movw	r22, r20
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1686:	f4 01       	movw	r30, r8
    1688:	13 86       	std	Z+11, r1	; 0x0b
    168a:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    168c:	be 01       	movw	r22, r28
    168e:	6a 5f       	subi	r22, 0xFA	; 250
    1690:	7f 4f       	sbci	r23, 0xFF	; 255
    1692:	ce 01       	movw	r24, r28
    1694:	01 96       	adiw	r24, 0x01	; 1
    1696:	0e 94 0d 14 	call	0x281a	; 0x281a <xTaskCheckForTimeOut>
    169a:	88 23       	and	r24, r24
    169c:	81 f2       	breq	.-96     	; 0x163e <xStreamBufferSend+0x90>
    169e:	05 c0       	rjmp	.+10     	; 0x16aa <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    16a0:	0f 90       	pop	r0
    16a2:	0f be       	out	0x3f, r0	; 63
                    break;
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    16a6:	61 2c       	mov	r6, r1
    16a8:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    16aa:	61 14       	cp	r6, r1
    16ac:	71 04       	cpc	r7, r1
    16ae:	19 f4       	brne	.+6      	; 0x16b6 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    16b0:	c4 01       	movw	r24, r8
    16b2:	6b df       	rcall	.-298    	; 0x158a <xStreamBufferSpacesAvailable>
    16b4:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    16b6:	82 01       	movw	r16, r4
    16b8:	93 01       	movw	r18, r6
    16ba:	a1 01       	movw	r20, r2
    16bc:	6a 85       	ldd	r22, Y+10	; 0x0a
    16be:	7b 85       	ldd	r23, Y+11	; 0x0b
    16c0:	c4 01       	movw	r24, r8
    16c2:	3c de       	rcall	.-904    	; 0x133c <prvWriteMessageToBuffer>
    16c4:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    16c6:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    16c8:	e9 f0       	breq	.+58     	; 0x1704 <xStreamBufferSend+0x156>
    16ca:	c4 01       	movw	r24, r8
    16cc:	cb dd       	rcall	.-1130   	; 0x1264 <prvBytesInBuffer>
    16ce:	f4 01       	movw	r30, r8
    16d0:	26 81       	ldd	r18, Z+6	; 0x06
    16d2:	37 81       	ldd	r19, Z+7	; 0x07
    16d4:	82 17       	cp	r24, r18
    16d6:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    16d8:	a8 f0       	brcs	.+42     	; 0x1704 <xStreamBufferSend+0x156>
    16da:	8b d3       	rcall	.+1814   	; 0x1df2 <vTaskSuspendAll>
    16dc:	f4 01       	movw	r30, r8
    16de:	80 85       	ldd	r24, Z+8	; 0x08
    16e0:	91 85       	ldd	r25, Z+9	; 0x09
    16e2:	89 2b       	or	r24, r25
    16e4:	71 f0       	breq	.+28     	; 0x1702 <xStreamBufferSend+0x154>
    16e6:	80 85       	ldd	r24, Z+8	; 0x08
    16e8:	91 85       	ldd	r25, Z+9	; 0x09
    16ea:	e1 2c       	mov	r14, r1
    16ec:	f1 2c       	mov	r15, r1
    16ee:	00 e0       	ldi	r16, 0x00	; 0
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	a9 01       	movw	r20, r18
    16f6:	60 e0       	ldi	r22, 0x00	; 0
    16f8:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <xTaskGenericNotify>
    16fc:	f4 01       	movw	r30, r8
    16fe:	11 86       	std	Z+9, r1	; 0x09
    1700:	10 86       	std	Z+8, r1	; 0x08
    1702:	b7 d4       	rcall	.+2414   	; 0x2072 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1704:	c6 01       	movw	r24, r12
    1706:	2b 96       	adiw	r28, 0x0b	; 11
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	1f 91       	pop	r17
    1718:	0f 91       	pop	r16
    171a:	ff 90       	pop	r15
    171c:	ef 90       	pop	r14
    171e:	df 90       	pop	r13
    1720:	cf 90       	pop	r12
    1722:	bf 90       	pop	r11
    1724:	af 90       	pop	r10
    1726:	9f 90       	pop	r9
    1728:	8f 90       	pop	r8
    172a:	7f 90       	pop	r7
    172c:	6f 90       	pop	r6
    172e:	5f 90       	pop	r5
    1730:	4f 90       	pop	r4
    1732:	3f 90       	pop	r3
    1734:	2f 90       	pop	r2
    1736:	08 95       	ret

00001738 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1738:	af 92       	push	r10
    173a:	bf 92       	push	r11
    173c:	cf 92       	push	r12
    173e:	df 92       	push	r13
    1740:	ef 92       	push	r14
    1742:	ff 92       	push	r15
    1744:	0f 93       	push	r16
    1746:	1f 93       	push	r17
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
    174c:	ec 01       	movw	r28, r24
    174e:	7b 01       	movw	r14, r22
    1750:	5a 01       	movw	r10, r20
    1752:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1754:	8e 85       	ldd	r24, Y+14	; 0x0e
    1756:	80 ff       	sbrs	r24, 0
    1758:	04 c0       	rjmp	.+8      	; 0x1762 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    175a:	8a 01       	movw	r16, r20
    175c:	0e 5f       	subi	r16, 0xFE	; 254
    175e:	1f 4f       	sbci	r17, 0xFF	; 255
    1760:	01 c0       	rjmp	.+2      	; 0x1764 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1762:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1764:	ce 01       	movw	r24, r28
    1766:	11 df       	rcall	.-478    	; 0x158a <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1768:	9c 01       	movw	r18, r24
    176a:	a5 01       	movw	r20, r10
    176c:	b7 01       	movw	r22, r14
    176e:	ce 01       	movw	r24, r28
    1770:	e5 dd       	rcall	.-1078   	; 0x133c <prvWriteMessageToBuffer>
    1772:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1774:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1776:	c1 f0       	breq	.+48     	; 0x17a8 <xStreamBufferSendFromISR+0x70>
    1778:	ce 01       	movw	r24, r28
    177a:	74 dd       	rcall	.-1304   	; 0x1264 <prvBytesInBuffer>
    177c:	2e 81       	ldd	r18, Y+6	; 0x06
    177e:	3f 81       	ldd	r19, Y+7	; 0x07
    1780:	82 17       	cp	r24, r18
    1782:	93 07       	cpc	r25, r19
    1784:	88 f0       	brcs	.+34     	; 0x17a8 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1786:	88 85       	ldd	r24, Y+8	; 0x08
    1788:	99 85       	ldd	r25, Y+9	; 0x09
    178a:	89 2b       	or	r24, r25
    178c:	69 f0       	breq	.+26     	; 0x17a8 <xStreamBufferSendFromISR+0x70>
    178e:	88 85       	ldd	r24, Y+8	; 0x08
    1790:	99 85       	ldd	r25, Y+9	; 0x09
    1792:	e1 2c       	mov	r14, r1
    1794:	f1 2c       	mov	r15, r1
    1796:	00 e0       	ldi	r16, 0x00	; 0
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	a9 01       	movw	r20, r18
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <xTaskGenericNotifyFromISR>
    17a4:	19 86       	std	Y+9, r1	; 0x09
    17a6:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    17a8:	c5 01       	movw	r24, r10
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	ff 90       	pop	r15
    17b4:	ef 90       	pop	r14
    17b6:	df 90       	pop	r13
    17b8:	cf 90       	pop	r12
    17ba:	bf 90       	pop	r11
    17bc:	af 90       	pop	r10
    17be:	08 95       	ret

000017c0 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    17c0:	4f 92       	push	r4
    17c2:	5f 92       	push	r5
    17c4:	6f 92       	push	r6
    17c6:	7f 92       	push	r7
    17c8:	8f 92       	push	r8
    17ca:	9f 92       	push	r9
    17cc:	af 92       	push	r10
    17ce:	bf 92       	push	r11
    17d0:	cf 92       	push	r12
    17d2:	df 92       	push	r13
    17d4:	ef 92       	push	r14
    17d6:	ff 92       	push	r15
    17d8:	0f 93       	push	r16
    17da:	1f 93       	push	r17
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
    17e0:	ec 01       	movw	r28, r24
    17e2:	2b 01       	movw	r4, r22
    17e4:	3a 01       	movw	r6, r20
    17e6:	58 01       	movw	r10, r16
    17e8:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    17ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    17ec:	80 ff       	sbrs	r24, 0
    17ee:	05 c0       	rjmp	.+10     	; 0x17fa <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    17f0:	68 94       	set
    17f2:	88 24       	eor	r8, r8
    17f4:	81 f8       	bld	r8, 1
    17f6:	91 2c       	mov	r9, r1
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    17fa:	81 2c       	mov	r8, r1
    17fc:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    17fe:	a1 14       	cp	r10, r1
    1800:	b1 04       	cpc	r11, r1
    1802:	c1 04       	cpc	r12, r1
    1804:	d1 04       	cpc	r13, r1
    1806:	41 f1       	breq	.+80     	; 0x1858 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    180e:	ce 01       	movw	r24, r28
    1810:	29 dd       	rcall	.-1454   	; 0x1264 <prvBytesInBuffer>
    1812:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1814:	88 16       	cp	r8, r24
    1816:	99 06       	cpc	r9, r25
    1818:	48 f0       	brcs	.+18     	; 0x182c <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    181a:	60 e0       	ldi	r22, 0x00	; 0
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1824:	0e 94 77 14 	call	0x28ee	; 0x28ee <xTaskGetCurrentTaskHandle>
    1828:	99 87       	std	Y+9, r25	; 0x09
    182a:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    182c:	0f 90       	pop	r0
    182e:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1830:	8e 14       	cp	r8, r14
    1832:	9f 04       	cpc	r9, r15
    1834:	a0 f0       	brcs	.+40     	; 0x185e <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1836:	e1 2c       	mov	r14, r1
    1838:	f1 2c       	mov	r15, r1
    183a:	00 e0       	ldi	r16, 0x00	; 0
    183c:	10 e0       	ldi	r17, 0x00	; 0
    183e:	98 01       	movw	r18, r16
    1840:	40 e0       	ldi	r20, 0x00	; 0
    1842:	50 e0       	ldi	r21, 0x00	; 0
    1844:	ba 01       	movw	r22, r20
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    184c:	19 86       	std	Y+9, r1	; 0x09
    184e:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1850:	ce 01       	movw	r24, r28
    1852:	08 dd       	rcall	.-1520   	; 0x1264 <prvBytesInBuffer>
    1854:	7c 01       	movw	r14, r24
    1856:	03 c0       	rjmp	.+6      	; 0x185e <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1858:	ce 01       	movw	r24, r28
    185a:	04 dd       	rcall	.-1528   	; 0x1264 <prvBytesInBuffer>
    185c:	7c 01       	movw	r14, r24
    185e:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1860:	9f 04       	cpc	r9, r15
    1862:	e8 f4       	brcc	.+58     	; 0x189e <xStreamBufferReceive+0xde>
    1864:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1866:	97 01       	movw	r18, r14
    1868:	a3 01       	movw	r20, r6
    186a:	b2 01       	movw	r22, r4
    186c:	ce 01       	movw	r24, r28
    186e:	f8 dd       	rcall	.-1040   	; 0x1460 <prvReadMessageFromBuffer>
    1870:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1872:	89 2b       	or	r24, r25
    1874:	b1 f0       	breq	.+44     	; 0x18a2 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1876:	bd d2       	rcall	.+1402   	; 0x1df2 <vTaskSuspendAll>
    1878:	8a 85       	ldd	r24, Y+10	; 0x0a
    187a:	9b 85       	ldd	r25, Y+11	; 0x0b
    187c:	89 2b       	or	r24, r25
    187e:	69 f0       	breq	.+26     	; 0x189a <xStreamBufferReceive+0xda>
    1880:	8a 85       	ldd	r24, Y+10	; 0x0a
    1882:	9b 85       	ldd	r25, Y+11	; 0x0b
    1884:	e1 2c       	mov	r14, r1
    1886:	f1 2c       	mov	r15, r1
    1888:	00 e0       	ldi	r16, 0x00	; 0
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	a9 01       	movw	r20, r18
    1890:	60 e0       	ldi	r22, 0x00	; 0
    1892:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <xTaskGenericNotify>
    1896:	1b 86       	std	Y+11, r1	; 0x0b
    1898:	1a 86       	std	Y+10, r1	; 0x0a
    189a:	eb d3       	rcall	.+2006   	; 0x2072 <xTaskResumeAll>
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <xStreamBufferReceive+0xe2>
    189e:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    18a0:	d1 2c       	mov	r13, r1
    18a2:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	1f 91       	pop	r17
    18aa:	0f 91       	pop	r16
    18ac:	ff 90       	pop	r15
    18ae:	ef 90       	pop	r14
    18b0:	df 90       	pop	r13
    18b2:	cf 90       	pop	r12
    18b4:	bf 90       	pop	r11
    18b6:	af 90       	pop	r10
    18b8:	9f 90       	pop	r9
    18ba:	8f 90       	pop	r8
    18bc:	7f 90       	pop	r7
    18be:	6f 90       	pop	r6
    18c0:	5f 90       	pop	r5
    18c2:	4f 90       	pop	r4
    18c4:	08 95       	ret

000018c6 <prvResetNextTaskUnblockTime>:
    18c6:	e0 91 fb 11 	lds	r30, 0x11FB	; 0x8011fb <pxDelayedTaskList>
    18ca:	f0 91 fc 11 	lds	r31, 0x11FC	; 0x8011fc <pxDelayedTaskList+0x1>
    18ce:	80 81       	ld	r24, Z
    18d0:	81 11       	cpse	r24, r1
    18d2:	0c c0       	rjmp	.+24     	; 0x18ec <prvResetNextTaskUnblockTime+0x26>
    18d4:	8f ef       	ldi	r24, 0xFF	; 255
    18d6:	9f ef       	ldi	r25, 0xFF	; 255
    18d8:	dc 01       	movw	r26, r24
    18da:	80 93 c5 11 	sts	0x11C5, r24	; 0x8011c5 <xNextTaskUnblockTime>
    18de:	90 93 c6 11 	sts	0x11C6, r25	; 0x8011c6 <xNextTaskUnblockTime+0x1>
    18e2:	a0 93 c7 11 	sts	0x11C7, r26	; 0x8011c7 <xNextTaskUnblockTime+0x2>
    18e6:	b0 93 c8 11 	sts	0x11C8, r27	; 0x8011c8 <xNextTaskUnblockTime+0x3>
    18ea:	08 95       	ret
    18ec:	e0 91 fb 11 	lds	r30, 0x11FB	; 0x8011fb <pxDelayedTaskList>
    18f0:	f0 91 fc 11 	lds	r31, 0x11FC	; 0x8011fc <pxDelayedTaskList+0x1>
    18f4:	07 80       	ldd	r0, Z+7	; 0x07
    18f6:	f0 85       	ldd	r31, Z+8	; 0x08
    18f8:	e0 2d       	mov	r30, r0
    18fa:	80 81       	ld	r24, Z
    18fc:	91 81       	ldd	r25, Z+1	; 0x01
    18fe:	a2 81       	ldd	r26, Z+2	; 0x02
    1900:	b3 81       	ldd	r27, Z+3	; 0x03
    1902:	80 93 c5 11 	sts	0x11C5, r24	; 0x8011c5 <xNextTaskUnblockTime>
    1906:	90 93 c6 11 	sts	0x11C6, r25	; 0x8011c6 <xNextTaskUnblockTime+0x1>
    190a:	a0 93 c7 11 	sts	0x11C7, r26	; 0x8011c7 <xNextTaskUnblockTime+0x2>
    190e:	b0 93 c8 11 	sts	0x11C8, r27	; 0x8011c8 <xNextTaskUnblockTime+0x3>
    1912:	08 95       	ret

00001914 <prvDeleteTCB>:
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	ec 01       	movw	r28, r24
    191a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    191c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    191e:	18 d8       	rcall	.-4048   	; 0x950 <vPortFree>
    1920:	ce 01       	movw	r24, r28
    1922:	16 d8       	rcall	.-4052   	; 0x950 <vPortFree>
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	08 95       	ret

0000192a <prvInitialiseNewTask>:
    192a:	4f 92       	push	r4
    192c:	5f 92       	push	r5
    192e:	6f 92       	push	r6
    1930:	7f 92       	push	r7
    1932:	8f 92       	push	r8
    1934:	9f 92       	push	r9
    1936:	af 92       	push	r10
    1938:	bf 92       	push	r11
    193a:	cf 92       	push	r12
    193c:	df 92       	push	r13
    193e:	ef 92       	push	r14
    1940:	ff 92       	push	r15
    1942:	0f 93       	push	r16
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	2c 01       	movw	r4, r24
    194a:	5b 01       	movw	r10, r22
    194c:	4a 01       	movw	r8, r20
    194e:	39 01       	movw	r6, r18
    1950:	e6 01       	movw	r28, r12
    1952:	65 ea       	ldi	r22, 0xA5	; 165
    1954:	70 e0       	ldi	r23, 0x00	; 0
    1956:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1958:	9c 8d       	ldd	r25, Y+28	; 0x1c
    195a:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <memset>
    195e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1960:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1962:	21 e0       	ldi	r18, 0x01	; 1
    1964:	82 1a       	sub	r8, r18
    1966:	91 08       	sbc	r9, r1
    1968:	88 0e       	add	r8, r24
    196a:	99 1e       	adc	r9, r25
    196c:	a1 14       	cp	r10, r1
    196e:	b1 04       	cpc	r11, r1
    1970:	89 f4       	brne	.+34     	; 0x1994 <prvInitialiseNewTask+0x6a>
    1972:	15 c0       	rjmp	.+42     	; 0x199e <prvInitialiseNewTask+0x74>
    1974:	82 2f       	mov	r24, r18
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	f5 01       	movw	r30, r10
    197a:	e8 0f       	add	r30, r24
    197c:	f9 1f       	adc	r31, r25
    197e:	30 81       	ld	r19, Z
    1980:	de 01       	movw	r26, r28
    1982:	a8 0f       	add	r26, r24
    1984:	b9 1f       	adc	r27, r25
    1986:	5d 96       	adiw	r26, 0x1d	; 29
    1988:	3c 93       	st	X, r19
    198a:	80 81       	ld	r24, Z
    198c:	88 23       	and	r24, r24
    198e:	29 f0       	breq	.+10     	; 0x199a <prvInitialiseNewTask+0x70>
    1990:	2f 5f       	subi	r18, 0xFF	; 255
    1992:	01 c0       	rjmp	.+2      	; 0x1996 <prvInitialiseNewTask+0x6c>
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	20 31       	cpi	r18, 0x10	; 16
    1998:	68 f3       	brcs	.-38     	; 0x1974 <prvInitialiseNewTask+0x4a>
    199a:	1c a6       	std	Y+44, r1	; 0x2c
    199c:	01 c0       	rjmp	.+2      	; 0x19a0 <prvInitialiseNewTask+0x76>
    199e:	1d 8e       	std	Y+29, r1	; 0x1d
    19a0:	0a 30       	cpi	r16, 0x0A	; 10
    19a2:	08 f0       	brcs	.+2      	; 0x19a6 <prvInitialiseNewTask+0x7c>
    19a4:	09 e0       	ldi	r16, 0x09	; 9
    19a6:	0a 8f       	std	Y+26, r16	; 0x1a
    19a8:	0d a7       	std	Y+45, r16	; 0x2d
    19aa:	1e a6       	std	Y+46, r1	; 0x2e
    19ac:	ce 01       	movw	r24, r28
    19ae:	02 96       	adiw	r24, 0x02	; 2
    19b0:	1d d8       	rcall	.-4038   	; 0x9ec <vListInitialiseItem>
    19b2:	ce 01       	movw	r24, r28
    19b4:	0e 96       	adiw	r24, 0x0e	; 14
    19b6:	1a d8       	rcall	.-4044   	; 0x9ec <vListInitialiseItem>
    19b8:	db 87       	std	Y+11, r29	; 0x0b
    19ba:	ca 87       	std	Y+10, r28	; 0x0a
    19bc:	8a e0       	ldi	r24, 0x0A	; 10
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	a0 e0       	ldi	r26, 0x00	; 0
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	80 1b       	sub	r24, r16
    19c6:	91 09       	sbc	r25, r1
    19c8:	a1 09       	sbc	r26, r1
    19ca:	b1 09       	sbc	r27, r1
    19cc:	8e 87       	std	Y+14, r24	; 0x0e
    19ce:	9f 87       	std	Y+15, r25	; 0x0f
    19d0:	a8 8b       	std	Y+16, r26	; 0x10
    19d2:	b9 8b       	std	Y+17, r27	; 0x11
    19d4:	df 8b       	std	Y+23, r29	; 0x17
    19d6:	ce 8b       	std	Y+22, r28	; 0x16
    19d8:	84 e0       	ldi	r24, 0x04	; 4
    19da:	fe 01       	movw	r30, r28
    19dc:	bf 96       	adiw	r30, 0x2f	; 47
    19de:	df 01       	movw	r26, r30
    19e0:	1d 92       	st	X+, r1
    19e2:	8a 95       	dec	r24
    19e4:	e9 f7       	brne	.-6      	; 0x19e0 <prvInitialiseNewTask+0xb6>
    19e6:	1b aa       	std	Y+51, r1	; 0x33
    19e8:	a3 01       	movw	r20, r6
    19ea:	b2 01       	movw	r22, r4
    19ec:	c4 01       	movw	r24, r8
    19ee:	72 d8       	rcall	.-3868   	; 0xad4 <pxPortInitialiseStack>
    19f0:	99 83       	std	Y+1, r25	; 0x01
    19f2:	88 83       	st	Y, r24
    19f4:	e1 14       	cp	r14, r1
    19f6:	f1 04       	cpc	r15, r1
    19f8:	19 f0       	breq	.+6      	; 0x1a00 <prvInitialiseNewTask+0xd6>
    19fa:	f7 01       	movw	r30, r14
    19fc:	d1 83       	std	Z+1, r29	; 0x01
    19fe:	c0 83       	st	Z, r28
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	0f 91       	pop	r16
    1a06:	ff 90       	pop	r15
    1a08:	ef 90       	pop	r14
    1a0a:	df 90       	pop	r13
    1a0c:	cf 90       	pop	r12
    1a0e:	bf 90       	pop	r11
    1a10:	af 90       	pop	r10
    1a12:	9f 90       	pop	r9
    1a14:	8f 90       	pop	r8
    1a16:	7f 90       	pop	r7
    1a18:	6f 90       	pop	r6
    1a1a:	5f 90       	pop	r5
    1a1c:	4f 90       	pop	r4
    1a1e:	08 95       	ret

00001a20 <prvInitialiseTaskLists>:
    1a20:	cf 93       	push	r28
    1a22:	c0 e0       	ldi	r28, 0x00	; 0
    1a24:	09 c0       	rjmp	.+18     	; 0x1a38 <prvInitialiseTaskLists+0x18>
    1a26:	2b e0       	ldi	r18, 0x0B	; 11
    1a28:	c2 9f       	mul	r28, r18
    1a2a:	c0 01       	movw	r24, r0
    1a2c:	11 24       	eor	r1, r1
    1a2e:	8d 5e       	subi	r24, 0xED	; 237
    1a30:	9d 4e       	sbci	r25, 0xED	; 237
    1a32:	0e 94 e5 04 	call	0x9ca	; 0x9ca <vListInitialise>
    1a36:	cf 5f       	subi	r28, 0xFF	; 255
    1a38:	ca 30       	cpi	r28, 0x0A	; 10
    1a3a:	a8 f3       	brcs	.-22     	; 0x1a26 <prvInitialiseTaskLists+0x6>
    1a3c:	88 e0       	ldi	r24, 0x08	; 8
    1a3e:	92 e1       	ldi	r25, 0x12	; 18
    1a40:	0e 94 e5 04 	call	0x9ca	; 0x9ca <vListInitialise>
    1a44:	8d ef       	ldi	r24, 0xFD	; 253
    1a46:	91 e1       	ldi	r25, 0x11	; 17
    1a48:	0e 94 e5 04 	call	0x9ca	; 0x9ca <vListInitialise>
    1a4c:	8e ee       	ldi	r24, 0xEE	; 238
    1a4e:	91 e1       	ldi	r25, 0x11	; 17
    1a50:	0e 94 e5 04 	call	0x9ca	; 0x9ca <vListInitialise>
    1a54:	83 ee       	ldi	r24, 0xE3	; 227
    1a56:	91 e1       	ldi	r25, 0x11	; 17
    1a58:	0e 94 e5 04 	call	0x9ca	; 0x9ca <vListInitialise>
    1a5c:	87 ed       	ldi	r24, 0xD7	; 215
    1a5e:	91 e1       	ldi	r25, 0x11	; 17
    1a60:	0e 94 e5 04 	call	0x9ca	; 0x9ca <vListInitialise>
    1a64:	88 e0       	ldi	r24, 0x08	; 8
    1a66:	92 e1       	ldi	r25, 0x12	; 18
    1a68:	90 93 fc 11 	sts	0x11FC, r25	; 0x8011fc <pxDelayedTaskList+0x1>
    1a6c:	80 93 fb 11 	sts	0x11FB, r24	; 0x8011fb <pxDelayedTaskList>
    1a70:	8d ef       	ldi	r24, 0xFD	; 253
    1a72:	91 e1       	ldi	r25, 0x11	; 17
    1a74:	90 93 fa 11 	sts	0x11FA, r25	; 0x8011fa <pxOverflowDelayedTaskList+0x1>
    1a78:	80 93 f9 11 	sts	0x11F9, r24	; 0x8011f9 <pxOverflowDelayedTaskList>
    1a7c:	cf 91       	pop	r28
    1a7e:	08 95       	ret

00001a80 <prvAddNewTaskToReadyList>:
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	ec 01       	movw	r28, r24
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	0f 92       	push	r0
    1a8c:	80 91 d6 11 	lds	r24, 0x11D6	; 0x8011d6 <uxCurrentNumberOfTasks>
    1a90:	8f 5f       	subi	r24, 0xFF	; 255
    1a92:	80 93 d6 11 	sts	0x11D6, r24	; 0x8011d6 <uxCurrentNumberOfTasks>
    1a96:	80 91 81 12 	lds	r24, 0x1281	; 0x801281 <pxCurrentTCB>
    1a9a:	90 91 82 12 	lds	r25, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    1a9e:	89 2b       	or	r24, r25
    1aa0:	51 f4       	brne	.+20     	; 0x1ab6 <prvAddNewTaskToReadyList+0x36>
    1aa2:	d0 93 82 12 	sts	0x1282, r29	; 0x801282 <pxCurrentTCB+0x1>
    1aa6:	c0 93 81 12 	sts	0x1281, r28	; 0x801281 <pxCurrentTCB>
    1aaa:	80 91 d6 11 	lds	r24, 0x11D6	; 0x8011d6 <uxCurrentNumberOfTasks>
    1aae:	81 30       	cpi	r24, 0x01	; 1
    1ab0:	91 f4       	brne	.+36     	; 0x1ad6 <prvAddNewTaskToReadyList+0x56>
    1ab2:	b6 df       	rcall	.-148    	; 0x1a20 <prvInitialiseTaskLists>
    1ab4:	10 c0       	rjmp	.+32     	; 0x1ad6 <prvAddNewTaskToReadyList+0x56>
    1ab6:	80 91 d0 11 	lds	r24, 0x11D0	; 0x8011d0 <xSchedulerRunning>
    1aba:	81 11       	cpse	r24, r1
    1abc:	0c c0       	rjmp	.+24     	; 0x1ad6 <prvAddNewTaskToReadyList+0x56>
    1abe:	e0 91 81 12 	lds	r30, 0x1281	; 0x801281 <pxCurrentTCB>
    1ac2:	f0 91 82 12 	lds	r31, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    1ac6:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ac8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1aca:	89 17       	cp	r24, r25
    1acc:	20 f0       	brcs	.+8      	; 0x1ad6 <prvAddNewTaskToReadyList+0x56>
    1ace:	d0 93 82 12 	sts	0x1282, r29	; 0x801282 <pxCurrentTCB+0x1>
    1ad2:	c0 93 81 12 	sts	0x1281, r28	; 0x801281 <pxCurrentTCB>
    1ad6:	80 91 c9 11 	lds	r24, 0x11C9	; 0x8011c9 <uxTaskNumber>
    1ada:	8f 5f       	subi	r24, 0xFF	; 255
    1adc:	80 93 c9 11 	sts	0x11C9, r24	; 0x8011c9 <uxTaskNumber>
    1ae0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1ae2:	80 91 d1 11 	lds	r24, 0x11D1	; 0x8011d1 <uxTopReadyPriority>
    1ae6:	8e 17       	cp	r24, r30
    1ae8:	10 f4       	brcc	.+4      	; 0x1aee <prvAddNewTaskToReadyList+0x6e>
    1aea:	e0 93 d1 11 	sts	0x11D1, r30	; 0x8011d1 <uxTopReadyPriority>
    1aee:	8b e0       	ldi	r24, 0x0B	; 11
    1af0:	8e 9f       	mul	r24, r30
    1af2:	f0 01       	movw	r30, r0
    1af4:	11 24       	eor	r1, r1
    1af6:	ed 5e       	subi	r30, 0xED	; 237
    1af8:	fd 4e       	sbci	r31, 0xED	; 237
    1afa:	01 80       	ldd	r0, Z+1	; 0x01
    1afc:	f2 81       	ldd	r31, Z+2	; 0x02
    1afe:	e0 2d       	mov	r30, r0
    1b00:	ff 83       	std	Y+7, r31	; 0x07
    1b02:	ee 83       	std	Y+6, r30	; 0x06
    1b04:	26 81       	ldd	r18, Z+6	; 0x06
    1b06:	37 81       	ldd	r19, Z+7	; 0x07
    1b08:	39 87       	std	Y+9, r19	; 0x09
    1b0a:	28 87       	std	Y+8, r18	; 0x08
    1b0c:	a6 81       	ldd	r26, Z+6	; 0x06
    1b0e:	b7 81       	ldd	r27, Z+7	; 0x07
    1b10:	9e 01       	movw	r18, r28
    1b12:	2e 5f       	subi	r18, 0xFE	; 254
    1b14:	3f 4f       	sbci	r19, 0xFF	; 255
    1b16:	15 96       	adiw	r26, 0x05	; 5
    1b18:	3c 93       	st	X, r19
    1b1a:	2e 93       	st	-X, r18
    1b1c:	14 97       	sbiw	r26, 0x04	; 4
    1b1e:	37 83       	std	Z+7, r19	; 0x07
    1b20:	26 83       	std	Z+6, r18	; 0x06
    1b22:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1b24:	8e 9f       	mul	r24, r30
    1b26:	f0 01       	movw	r30, r0
    1b28:	11 24       	eor	r1, r1
    1b2a:	ed 5e       	subi	r30, 0xED	; 237
    1b2c:	fd 4e       	sbci	r31, 0xED	; 237
    1b2e:	fd 87       	std	Y+13, r31	; 0x0d
    1b30:	ec 87       	std	Y+12, r30	; 0x0c
    1b32:	80 81       	ld	r24, Z
    1b34:	8f 5f       	subi	r24, 0xFF	; 255
    1b36:	80 83       	st	Z, r24
    1b38:	0f 90       	pop	r0
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	80 91 d0 11 	lds	r24, 0x11D0	; 0x8011d0 <xSchedulerRunning>
    1b40:	88 23       	and	r24, r24
    1b42:	49 f0       	breq	.+18     	; 0x1b56 <prvAddNewTaskToReadyList+0xd6>
    1b44:	e0 91 81 12 	lds	r30, 0x1281	; 0x801281 <pxCurrentTCB>
    1b48:	f0 91 82 12 	lds	r31, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    1b4c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b4e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b50:	98 17       	cp	r25, r24
    1b52:	08 f4       	brcc	.+2      	; 0x1b56 <prvAddNewTaskToReadyList+0xd6>
    1b54:	08 d8       	rcall	.-4080   	; 0xb66 <vPortYield>
    1b56:	df 91       	pop	r29
    1b58:	cf 91       	pop	r28
    1b5a:	08 95       	ret

00001b5c <prvCheckTasksWaitingTermination>:
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	1b c0       	rjmp	.+54     	; 0x1b98 <prvCheckTasksWaitingTermination+0x3c>
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	0f 92       	push	r0
    1b68:	e0 91 ea 11 	lds	r30, 0x11EA	; 0x8011ea <xTasksWaitingTermination+0x7>
    1b6c:	f0 91 eb 11 	lds	r31, 0x11EB	; 0x8011eb <xTasksWaitingTermination+0x8>
    1b70:	c0 85       	ldd	r28, Z+8	; 0x08
    1b72:	d1 85       	ldd	r29, Z+9	; 0x09
    1b74:	ce 01       	movw	r24, r28
    1b76:	02 96       	adiw	r24, 0x02	; 2
    1b78:	0e 94 37 05 	call	0xa6e	; 0xa6e <uxListRemove>
    1b7c:	80 91 d6 11 	lds	r24, 0x11D6	; 0x8011d6 <uxCurrentNumberOfTasks>
    1b80:	81 50       	subi	r24, 0x01	; 1
    1b82:	80 93 d6 11 	sts	0x11D6, r24	; 0x8011d6 <uxCurrentNumberOfTasks>
    1b86:	80 91 e2 11 	lds	r24, 0x11E2	; 0x8011e2 <uxDeletedTasksWaitingCleanUp>
    1b8a:	81 50       	subi	r24, 0x01	; 1
    1b8c:	80 93 e2 11 	sts	0x11E2, r24	; 0x8011e2 <uxDeletedTasksWaitingCleanUp>
    1b90:	0f 90       	pop	r0
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	ce 01       	movw	r24, r28
    1b96:	be de       	rcall	.-644    	; 0x1914 <prvDeleteTCB>
    1b98:	80 91 e2 11 	lds	r24, 0x11E2	; 0x8011e2 <uxDeletedTasksWaitingCleanUp>
    1b9c:	81 11       	cpse	r24, r1
    1b9e:	e1 cf       	rjmp	.-62     	; 0x1b62 <prvCheckTasksWaitingTermination+0x6>
    1ba0:	df 91       	pop	r29
    1ba2:	cf 91       	pop	r28
    1ba4:	08 95       	ret

00001ba6 <prvAddCurrentTaskToDelayedList>:
    1ba6:	8f 92       	push	r8
    1ba8:	9f 92       	push	r9
    1baa:	af 92       	push	r10
    1bac:	bf 92       	push	r11
    1bae:	cf 92       	push	r12
    1bb0:	df 92       	push	r13
    1bb2:	ef 92       	push	r14
    1bb4:	ff 92       	push	r15
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
    1bba:	6b 01       	movw	r12, r22
    1bbc:	7c 01       	movw	r14, r24
    1bbe:	c4 2f       	mov	r28, r20
    1bc0:	80 90 d2 11 	lds	r8, 0x11D2	; 0x8011d2 <xTickCount>
    1bc4:	90 90 d3 11 	lds	r9, 0x11D3	; 0x8011d3 <xTickCount+0x1>
    1bc8:	a0 90 d4 11 	lds	r10, 0x11D4	; 0x8011d4 <xTickCount+0x2>
    1bcc:	b0 90 d5 11 	lds	r11, 0x11D5	; 0x8011d5 <xTickCount+0x3>
    1bd0:	80 91 81 12 	lds	r24, 0x1281	; 0x801281 <pxCurrentTCB>
    1bd4:	90 91 82 12 	lds	r25, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    1bd8:	02 96       	adiw	r24, 0x02	; 2
    1bda:	0e 94 37 05 	call	0xa6e	; 0xa6e <uxListRemove>
    1bde:	8f ef       	ldi	r24, 0xFF	; 255
    1be0:	c8 16       	cp	r12, r24
    1be2:	d8 06       	cpc	r13, r24
    1be4:	e8 06       	cpc	r14, r24
    1be6:	f8 06       	cpc	r15, r24
    1be8:	b1 f5       	brne	.+108    	; 0x1c56 <prvAddCurrentTaskToDelayedList+0xb0>
    1bea:	cc 23       	and	r28, r28
    1bec:	a1 f1       	breq	.+104    	; 0x1c56 <prvAddCurrentTaskToDelayedList+0xb0>
    1bee:	e7 ed       	ldi	r30, 0xD7	; 215
    1bf0:	f1 e1       	ldi	r31, 0x11	; 17
    1bf2:	a1 81       	ldd	r26, Z+1	; 0x01
    1bf4:	b2 81       	ldd	r27, Z+2	; 0x02
    1bf6:	c0 91 81 12 	lds	r28, 0x1281	; 0x801281 <pxCurrentTCB>
    1bfa:	d0 91 82 12 	lds	r29, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    1bfe:	bf 83       	std	Y+7, r27	; 0x07
    1c00:	ae 83       	std	Y+6, r26	; 0x06
    1c02:	c0 91 81 12 	lds	r28, 0x1281	; 0x801281 <pxCurrentTCB>
    1c06:	d0 91 82 12 	lds	r29, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    1c0a:	16 96       	adiw	r26, 0x06	; 6
    1c0c:	8d 91       	ld	r24, X+
    1c0e:	9c 91       	ld	r25, X
    1c10:	17 97       	sbiw	r26, 0x07	; 7
    1c12:	99 87       	std	Y+9, r25	; 0x09
    1c14:	88 87       	std	Y+8, r24	; 0x08
    1c16:	16 96       	adiw	r26, 0x06	; 6
    1c18:	cd 91       	ld	r28, X+
    1c1a:	dc 91       	ld	r29, X
    1c1c:	17 97       	sbiw	r26, 0x07	; 7
    1c1e:	80 91 81 12 	lds	r24, 0x1281	; 0x801281 <pxCurrentTCB>
    1c22:	90 91 82 12 	lds	r25, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    1c26:	02 96       	adiw	r24, 0x02	; 2
    1c28:	9d 83       	std	Y+5, r25	; 0x05
    1c2a:	8c 83       	std	Y+4, r24	; 0x04
    1c2c:	80 91 81 12 	lds	r24, 0x1281	; 0x801281 <pxCurrentTCB>
    1c30:	90 91 82 12 	lds	r25, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    1c34:	02 96       	adiw	r24, 0x02	; 2
    1c36:	17 96       	adiw	r26, 0x07	; 7
    1c38:	9c 93       	st	X, r25
    1c3a:	8e 93       	st	-X, r24
    1c3c:	16 97       	sbiw	r26, 0x06	; 6
    1c3e:	a0 91 81 12 	lds	r26, 0x1281	; 0x801281 <pxCurrentTCB>
    1c42:	b0 91 82 12 	lds	r27, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    1c46:	1d 96       	adiw	r26, 0x0d	; 13
    1c48:	fc 93       	st	X, r31
    1c4a:	ee 93       	st	-X, r30
    1c4c:	1c 97       	sbiw	r26, 0x0c	; 12
    1c4e:	80 81       	ld	r24, Z
    1c50:	8f 5f       	subi	r24, 0xFF	; 255
    1c52:	80 83       	st	Z, r24
    1c54:	3f c0       	rjmp	.+126    	; 0x1cd4 <prvAddCurrentTaskToDelayedList+0x12e>
    1c56:	c8 0c       	add	r12, r8
    1c58:	d9 1c       	adc	r13, r9
    1c5a:	ea 1c       	adc	r14, r10
    1c5c:	fb 1c       	adc	r15, r11
    1c5e:	e0 91 81 12 	lds	r30, 0x1281	; 0x801281 <pxCurrentTCB>
    1c62:	f0 91 82 12 	lds	r31, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    1c66:	c2 82       	std	Z+2, r12	; 0x02
    1c68:	d3 82       	std	Z+3, r13	; 0x03
    1c6a:	e4 82       	std	Z+4, r14	; 0x04
    1c6c:	f5 82       	std	Z+5, r15	; 0x05
    1c6e:	c8 14       	cp	r12, r8
    1c70:	d9 04       	cpc	r13, r9
    1c72:	ea 04       	cpc	r14, r10
    1c74:	fb 04       	cpc	r15, r11
    1c76:	68 f4       	brcc	.+26     	; 0x1c92 <prvAddCurrentTaskToDelayedList+0xec>
    1c78:	60 91 81 12 	lds	r22, 0x1281	; 0x801281 <pxCurrentTCB>
    1c7c:	70 91 82 12 	lds	r23, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    1c80:	80 91 f9 11 	lds	r24, 0x11F9	; 0x8011f9 <pxOverflowDelayedTaskList>
    1c84:	90 91 fa 11 	lds	r25, 0x11FA	; 0x8011fa <pxOverflowDelayedTaskList+0x1>
    1c88:	6e 5f       	subi	r22, 0xFE	; 254
    1c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <vListInsert>
    1c90:	21 c0       	rjmp	.+66     	; 0x1cd4 <prvAddCurrentTaskToDelayedList+0x12e>
    1c92:	60 91 81 12 	lds	r22, 0x1281	; 0x801281 <pxCurrentTCB>
    1c96:	70 91 82 12 	lds	r23, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    1c9a:	80 91 fb 11 	lds	r24, 0x11FB	; 0x8011fb <pxDelayedTaskList>
    1c9e:	90 91 fc 11 	lds	r25, 0x11FC	; 0x8011fc <pxDelayedTaskList+0x1>
    1ca2:	6e 5f       	subi	r22, 0xFE	; 254
    1ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca6:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <vListInsert>
    1caa:	80 91 c5 11 	lds	r24, 0x11C5	; 0x8011c5 <xNextTaskUnblockTime>
    1cae:	90 91 c6 11 	lds	r25, 0x11C6	; 0x8011c6 <xNextTaskUnblockTime+0x1>
    1cb2:	a0 91 c7 11 	lds	r26, 0x11C7	; 0x8011c7 <xNextTaskUnblockTime+0x2>
    1cb6:	b0 91 c8 11 	lds	r27, 0x11C8	; 0x8011c8 <xNextTaskUnblockTime+0x3>
    1cba:	c8 16       	cp	r12, r24
    1cbc:	d9 06       	cpc	r13, r25
    1cbe:	ea 06       	cpc	r14, r26
    1cc0:	fb 06       	cpc	r15, r27
    1cc2:	40 f4       	brcc	.+16     	; 0x1cd4 <prvAddCurrentTaskToDelayedList+0x12e>
    1cc4:	c0 92 c5 11 	sts	0x11C5, r12	; 0x8011c5 <xNextTaskUnblockTime>
    1cc8:	d0 92 c6 11 	sts	0x11C6, r13	; 0x8011c6 <xNextTaskUnblockTime+0x1>
    1ccc:	e0 92 c7 11 	sts	0x11C7, r14	; 0x8011c7 <xNextTaskUnblockTime+0x2>
    1cd0:	f0 92 c8 11 	sts	0x11C8, r15	; 0x8011c8 <xNextTaskUnblockTime+0x3>
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	ff 90       	pop	r15
    1cda:	ef 90       	pop	r14
    1cdc:	df 90       	pop	r13
    1cde:	cf 90       	pop	r12
    1ce0:	bf 90       	pop	r11
    1ce2:	af 90       	pop	r10
    1ce4:	9f 90       	pop	r9
    1ce6:	8f 90       	pop	r8
    1ce8:	08 95       	ret

00001cea <xTaskCreate>:
    1cea:	2f 92       	push	r2
    1cec:	3f 92       	push	r3
    1cee:	4f 92       	push	r4
    1cf0:	5f 92       	push	r5
    1cf2:	6f 92       	push	r6
    1cf4:	7f 92       	push	r7
    1cf6:	8f 92       	push	r8
    1cf8:	9f 92       	push	r9
    1cfa:	af 92       	push	r10
    1cfc:	bf 92       	push	r11
    1cfe:	cf 92       	push	r12
    1d00:	df 92       	push	r13
    1d02:	ef 92       	push	r14
    1d04:	ff 92       	push	r15
    1d06:	0f 93       	push	r16
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
    1d0c:	3c 01       	movw	r6, r24
    1d0e:	1b 01       	movw	r2, r22
    1d10:	4a 01       	movw	r8, r20
    1d12:	29 01       	movw	r4, r18
    1d14:	ca 01       	movw	r24, r20
    1d16:	0e 94 ff 03 	call	0x7fe	; 0x7fe <pvPortMalloc>
    1d1a:	6c 01       	movw	r12, r24
    1d1c:	89 2b       	or	r24, r25
    1d1e:	71 f0       	breq	.+28     	; 0x1d3c <xTaskCreate+0x52>
    1d20:	84 e3       	ldi	r24, 0x34	; 52
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	0e 94 ff 03 	call	0x7fe	; 0x7fe <pvPortMalloc>
    1d28:	ec 01       	movw	r28, r24
    1d2a:	89 2b       	or	r24, r25
    1d2c:	19 f0       	breq	.+6      	; 0x1d34 <xTaskCreate+0x4a>
    1d2e:	dc 8e       	std	Y+28, r13	; 0x1c
    1d30:	cb 8e       	std	Y+27, r12	; 0x1b
    1d32:	06 c0       	rjmp	.+12     	; 0x1d40 <xTaskCreate+0x56>
    1d34:	c6 01       	movw	r24, r12
    1d36:	0e 94 a8 04 	call	0x950	; 0x950 <vPortFree>
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <xTaskCreate+0x56>
    1d3c:	c0 e0       	ldi	r28, 0x00	; 0
    1d3e:	d0 e0       	ldi	r29, 0x00	; 0
    1d40:	20 97       	sbiw	r28, 0x00	; 0
    1d42:	61 f0       	breq	.+24     	; 0x1d5c <xTaskCreate+0x72>
    1d44:	a1 2c       	mov	r10, r1
    1d46:	b1 2c       	mov	r11, r1
    1d48:	6e 01       	movw	r12, r28
    1d4a:	92 01       	movw	r18, r4
    1d4c:	a4 01       	movw	r20, r8
    1d4e:	b1 01       	movw	r22, r2
    1d50:	c3 01       	movw	r24, r6
    1d52:	eb dd       	rcall	.-1066   	; 0x192a <prvInitialiseNewTask>
    1d54:	ce 01       	movw	r24, r28
    1d56:	94 de       	rcall	.-728    	; 0x1a80 <prvAddNewTaskToReadyList>
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	01 c0       	rjmp	.+2      	; 0x1d5e <xTaskCreate+0x74>
    1d5c:	8f ef       	ldi	r24, 0xFF	; 255
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	0f 91       	pop	r16
    1d64:	ff 90       	pop	r15
    1d66:	ef 90       	pop	r14
    1d68:	df 90       	pop	r13
    1d6a:	cf 90       	pop	r12
    1d6c:	bf 90       	pop	r11
    1d6e:	af 90       	pop	r10
    1d70:	9f 90       	pop	r9
    1d72:	8f 90       	pop	r8
    1d74:	7f 90       	pop	r7
    1d76:	6f 90       	pop	r6
    1d78:	5f 90       	pop	r5
    1d7a:	4f 90       	pop	r4
    1d7c:	3f 90       	pop	r3
    1d7e:	2f 90       	pop	r2
    1d80:	08 95       	ret

00001d82 <vTaskStartScheduler>:
    1d82:	ef 92       	push	r14
    1d84:	ff 92       	push	r15
    1d86:	0f 93       	push	r16
    1d88:	0f 2e       	mov	r0, r31
    1d8a:	f3 ec       	ldi	r31, 0xC3	; 195
    1d8c:	ef 2e       	mov	r14, r31
    1d8e:	f1 e1       	ldi	r31, 0x11	; 17
    1d90:	ff 2e       	mov	r15, r31
    1d92:	f0 2d       	mov	r31, r0
    1d94:	00 e0       	ldi	r16, 0x00	; 0
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	40 ec       	ldi	r20, 0xC0	; 192
    1d9c:	50 e0       	ldi	r21, 0x00	; 0
    1d9e:	65 ef       	ldi	r22, 0xF5	; 245
    1da0:	72 e0       	ldi	r23, 0x02	; 2
    1da2:	8d ec       	ldi	r24, 0xCD	; 205
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	a1 df       	rcall	.-190    	; 0x1cea <xTaskCreate>
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	11 f4       	brne	.+4      	; 0x1db0 <vTaskStartScheduler+0x2e>
    1dac:	0e 94 73 18 	call	0x30e6	; 0x30e6 <xTimerCreateTimerTask>
    1db0:	81 30       	cpi	r24, 0x01	; 1
    1db2:	c9 f4       	brne	.+50     	; 0x1de6 <vTaskStartScheduler+0x64>
    1db4:	f8 94       	cli
    1db6:	8f ef       	ldi	r24, 0xFF	; 255
    1db8:	9f ef       	ldi	r25, 0xFF	; 255
    1dba:	dc 01       	movw	r26, r24
    1dbc:	80 93 c5 11 	sts	0x11C5, r24	; 0x8011c5 <xNextTaskUnblockTime>
    1dc0:	90 93 c6 11 	sts	0x11C6, r25	; 0x8011c6 <xNextTaskUnblockTime+0x1>
    1dc4:	a0 93 c7 11 	sts	0x11C7, r26	; 0x8011c7 <xNextTaskUnblockTime+0x2>
    1dc8:	b0 93 c8 11 	sts	0x11C8, r27	; 0x8011c8 <xNextTaskUnblockTime+0x3>
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	80 93 d0 11 	sts	0x11D0, r24	; 0x8011d0 <xSchedulerRunning>
    1dd2:	10 92 d2 11 	sts	0x11D2, r1	; 0x8011d2 <xTickCount>
    1dd6:	10 92 d3 11 	sts	0x11D3, r1	; 0x8011d3 <xTickCount+0x1>
    1dda:	10 92 d4 11 	sts	0x11D4, r1	; 0x8011d4 <xTickCount+0x2>
    1dde:	10 92 d5 11 	sts	0x11D5, r1	; 0x8011d5 <xTickCount+0x3>
    1de2:	0e 94 81 05 	call	0xb02	; 0xb02 <xPortStartScheduler>
    1de6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1dea:	0f 91       	pop	r16
    1dec:	ff 90       	pop	r15
    1dee:	ef 90       	pop	r14
    1df0:	08 95       	ret

00001df2 <vTaskSuspendAll>:
    1df2:	80 91 c2 11 	lds	r24, 0x11C2	; 0x8011c2 <uxSchedulerSuspended>
    1df6:	8f 5f       	subi	r24, 0xFF	; 255
    1df8:	80 93 c2 11 	sts	0x11C2, r24	; 0x8011c2 <uxSchedulerSuspended>
    1dfc:	08 95       	ret

00001dfe <xTaskGetTickCount>:
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	f8 94       	cli
    1e02:	0f 92       	push	r0
    1e04:	60 91 d2 11 	lds	r22, 0x11D2	; 0x8011d2 <xTickCount>
    1e08:	70 91 d3 11 	lds	r23, 0x11D3	; 0x8011d3 <xTickCount+0x1>
    1e0c:	80 91 d4 11 	lds	r24, 0x11D4	; 0x8011d4 <xTickCount+0x2>
    1e10:	90 91 d5 11 	lds	r25, 0x11D5	; 0x8011d5 <xTickCount+0x3>
    1e14:	0f 90       	pop	r0
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	08 95       	ret

00001e1a <xTaskIncrementTick>:
    1e1a:	cf 92       	push	r12
    1e1c:	df 92       	push	r13
    1e1e:	ef 92       	push	r14
    1e20:	ff 92       	push	r15
    1e22:	cf 93       	push	r28
    1e24:	df 93       	push	r29
    1e26:	80 91 c2 11 	lds	r24, 0x11C2	; 0x8011c2 <uxSchedulerSuspended>
    1e2a:	81 11       	cpse	r24, r1
    1e2c:	05 c1       	rjmp	.+522    	; 0x2038 <__DATA_REGION_LENGTH__+0x38>
    1e2e:	c0 90 d2 11 	lds	r12, 0x11D2	; 0x8011d2 <xTickCount>
    1e32:	d0 90 d3 11 	lds	r13, 0x11D3	; 0x8011d3 <xTickCount+0x1>
    1e36:	e0 90 d4 11 	lds	r14, 0x11D4	; 0x8011d4 <xTickCount+0x2>
    1e3a:	f0 90 d5 11 	lds	r15, 0x11D5	; 0x8011d5 <xTickCount+0x3>
    1e3e:	8f ef       	ldi	r24, 0xFF	; 255
    1e40:	c8 1a       	sub	r12, r24
    1e42:	d8 0a       	sbc	r13, r24
    1e44:	e8 0a       	sbc	r14, r24
    1e46:	f8 0a       	sbc	r15, r24
    1e48:	c0 92 d2 11 	sts	0x11D2, r12	; 0x8011d2 <xTickCount>
    1e4c:	d0 92 d3 11 	sts	0x11D3, r13	; 0x8011d3 <xTickCount+0x1>
    1e50:	e0 92 d4 11 	sts	0x11D4, r14	; 0x8011d4 <xTickCount+0x2>
    1e54:	f0 92 d5 11 	sts	0x11D5, r15	; 0x8011d5 <xTickCount+0x3>
    1e58:	c1 14       	cp	r12, r1
    1e5a:	d1 04       	cpc	r13, r1
    1e5c:	e1 04       	cpc	r14, r1
    1e5e:	f1 04       	cpc	r15, r1
    1e60:	b1 f4       	brne	.+44     	; 0x1e8e <xTaskIncrementTick+0x74>
    1e62:	80 91 fb 11 	lds	r24, 0x11FB	; 0x8011fb <pxDelayedTaskList>
    1e66:	90 91 fc 11 	lds	r25, 0x11FC	; 0x8011fc <pxDelayedTaskList+0x1>
    1e6a:	20 91 f9 11 	lds	r18, 0x11F9	; 0x8011f9 <pxOverflowDelayedTaskList>
    1e6e:	30 91 fa 11 	lds	r19, 0x11FA	; 0x8011fa <pxOverflowDelayedTaskList+0x1>
    1e72:	30 93 fc 11 	sts	0x11FC, r19	; 0x8011fc <pxDelayedTaskList+0x1>
    1e76:	20 93 fb 11 	sts	0x11FB, r18	; 0x8011fb <pxDelayedTaskList>
    1e7a:	90 93 fa 11 	sts	0x11FA, r25	; 0x8011fa <pxOverflowDelayedTaskList+0x1>
    1e7e:	80 93 f9 11 	sts	0x11F9, r24	; 0x8011f9 <pxOverflowDelayedTaskList>
    1e82:	80 91 ca 11 	lds	r24, 0x11CA	; 0x8011ca <xNumOfOverflows>
    1e86:	8f 5f       	subi	r24, 0xFF	; 255
    1e88:	80 93 ca 11 	sts	0x11CA, r24	; 0x8011ca <xNumOfOverflows>
    1e8c:	1c dd       	rcall	.-1480   	; 0x18c6 <prvResetNextTaskUnblockTime>
    1e8e:	80 91 c5 11 	lds	r24, 0x11C5	; 0x8011c5 <xNextTaskUnblockTime>
    1e92:	90 91 c6 11 	lds	r25, 0x11C6	; 0x8011c6 <xNextTaskUnblockTime+0x1>
    1e96:	a0 91 c7 11 	lds	r26, 0x11C7	; 0x8011c7 <xNextTaskUnblockTime+0x2>
    1e9a:	b0 91 c8 11 	lds	r27, 0x11C8	; 0x8011c8 <xNextTaskUnblockTime+0x3>
    1e9e:	c8 16       	cp	r12, r24
    1ea0:	d9 06       	cpc	r13, r25
    1ea2:	ea 06       	cpc	r14, r26
    1ea4:	fb 06       	cpc	r15, r27
    1ea6:	20 f4       	brcc	.+8      	; 0x1eb0 <xTaskIncrementTick+0x96>
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	b2 c0       	rjmp	.+356    	; 0x2010 <__DATA_REGION_LENGTH__+0x10>
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	01 c0       	rjmp	.+2      	; 0x1eb2 <xTaskIncrementTick+0x98>
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	e0 91 fb 11 	lds	r30, 0x11FB	; 0x8011fb <pxDelayedTaskList>
    1eb6:	f0 91 fc 11 	lds	r31, 0x11FC	; 0x8011fc <pxDelayedTaskList+0x1>
    1eba:	90 81       	ld	r25, Z
    1ebc:	91 11       	cpse	r25, r1
    1ebe:	0c c0       	rjmp	.+24     	; 0x1ed8 <xTaskIncrementTick+0xbe>
    1ec0:	4f ef       	ldi	r20, 0xFF	; 255
    1ec2:	5f ef       	ldi	r21, 0xFF	; 255
    1ec4:	ba 01       	movw	r22, r20
    1ec6:	40 93 c5 11 	sts	0x11C5, r20	; 0x8011c5 <xNextTaskUnblockTime>
    1eca:	50 93 c6 11 	sts	0x11C6, r21	; 0x8011c6 <xNextTaskUnblockTime+0x1>
    1ece:	60 93 c7 11 	sts	0x11C7, r22	; 0x8011c7 <xNextTaskUnblockTime+0x2>
    1ed2:	70 93 c8 11 	sts	0x11C8, r23	; 0x8011c8 <xNextTaskUnblockTime+0x3>
    1ed6:	9c c0       	rjmp	.+312    	; 0x2010 <__DATA_REGION_LENGTH__+0x10>
    1ed8:	e0 91 fb 11 	lds	r30, 0x11FB	; 0x8011fb <pxDelayedTaskList>
    1edc:	f0 91 fc 11 	lds	r31, 0x11FC	; 0x8011fc <pxDelayedTaskList+0x1>
    1ee0:	07 80       	ldd	r0, Z+7	; 0x07
    1ee2:	f0 85       	ldd	r31, Z+8	; 0x08
    1ee4:	e0 2d       	mov	r30, r0
    1ee6:	00 84       	ldd	r0, Z+8	; 0x08
    1ee8:	f1 85       	ldd	r31, Z+9	; 0x09
    1eea:	e0 2d       	mov	r30, r0
    1eec:	42 81       	ldd	r20, Z+2	; 0x02
    1eee:	53 81       	ldd	r21, Z+3	; 0x03
    1ef0:	64 81       	ldd	r22, Z+4	; 0x04
    1ef2:	75 81       	ldd	r23, Z+5	; 0x05
    1ef4:	c4 16       	cp	r12, r20
    1ef6:	d5 06       	cpc	r13, r21
    1ef8:	e6 06       	cpc	r14, r22
    1efa:	f7 06       	cpc	r15, r23
    1efc:	48 f4       	brcc	.+18     	; 0x1f10 <xTaskIncrementTick+0xf6>
    1efe:	40 93 c5 11 	sts	0x11C5, r20	; 0x8011c5 <xNextTaskUnblockTime>
    1f02:	50 93 c6 11 	sts	0x11C6, r21	; 0x8011c6 <xNextTaskUnblockTime+0x1>
    1f06:	60 93 c7 11 	sts	0x11C7, r22	; 0x8011c7 <xNextTaskUnblockTime+0x2>
    1f0a:	70 93 c8 11 	sts	0x11C8, r23	; 0x8011c8 <xNextTaskUnblockTime+0x3>
    1f0e:	80 c0       	rjmp	.+256    	; 0x2010 <__DATA_REGION_LENGTH__+0x10>
    1f10:	a4 85       	ldd	r26, Z+12	; 0x0c
    1f12:	b5 85       	ldd	r27, Z+13	; 0x0d
    1f14:	c6 81       	ldd	r28, Z+6	; 0x06
    1f16:	d7 81       	ldd	r29, Z+7	; 0x07
    1f18:	20 85       	ldd	r18, Z+8	; 0x08
    1f1a:	31 85       	ldd	r19, Z+9	; 0x09
    1f1c:	3f 83       	std	Y+7, r19	; 0x07
    1f1e:	2e 83       	std	Y+6, r18	; 0x06
    1f20:	c0 85       	ldd	r28, Z+8	; 0x08
    1f22:	d1 85       	ldd	r29, Z+9	; 0x09
    1f24:	26 81       	ldd	r18, Z+6	; 0x06
    1f26:	37 81       	ldd	r19, Z+7	; 0x07
    1f28:	3d 83       	std	Y+5, r19	; 0x05
    1f2a:	2c 83       	std	Y+4, r18	; 0x04
    1f2c:	11 96       	adiw	r26, 0x01	; 1
    1f2e:	4d 91       	ld	r20, X+
    1f30:	5c 91       	ld	r21, X
    1f32:	12 97       	sbiw	r26, 0x02	; 2
    1f34:	9f 01       	movw	r18, r30
    1f36:	2e 5f       	subi	r18, 0xFE	; 254
    1f38:	3f 4f       	sbci	r19, 0xFF	; 255
    1f3a:	42 17       	cp	r20, r18
    1f3c:	53 07       	cpc	r21, r19
    1f3e:	31 f4       	brne	.+12     	; 0x1f4c <xTaskIncrementTick+0x132>
    1f40:	40 85       	ldd	r20, Z+8	; 0x08
    1f42:	51 85       	ldd	r21, Z+9	; 0x09
    1f44:	12 96       	adiw	r26, 0x02	; 2
    1f46:	5c 93       	st	X, r21
    1f48:	4e 93       	st	-X, r20
    1f4a:	11 97       	sbiw	r26, 0x01	; 1
    1f4c:	15 86       	std	Z+13, r1	; 0x0d
    1f4e:	14 86       	std	Z+12, r1	; 0x0c
    1f50:	9c 91       	ld	r25, X
    1f52:	91 50       	subi	r25, 0x01	; 1
    1f54:	9c 93       	st	X, r25
    1f56:	a0 8d       	ldd	r26, Z+24	; 0x18
    1f58:	b1 8d       	ldd	r27, Z+25	; 0x19
    1f5a:	10 97       	sbiw	r26, 0x00	; 0
    1f5c:	09 f1       	breq	.+66     	; 0x1fa0 <xTaskIncrementTick+0x186>
    1f5e:	c2 89       	ldd	r28, Z+18	; 0x12
    1f60:	d3 89       	ldd	r29, Z+19	; 0x13
    1f62:	44 89       	ldd	r20, Z+20	; 0x14
    1f64:	55 89       	ldd	r21, Z+21	; 0x15
    1f66:	5f 83       	std	Y+7, r21	; 0x07
    1f68:	4e 83       	std	Y+6, r20	; 0x06
    1f6a:	c4 89       	ldd	r28, Z+20	; 0x14
    1f6c:	d5 89       	ldd	r29, Z+21	; 0x15
    1f6e:	42 89       	ldd	r20, Z+18	; 0x12
    1f70:	53 89       	ldd	r21, Z+19	; 0x13
    1f72:	5d 83       	std	Y+5, r21	; 0x05
    1f74:	4c 83       	std	Y+4, r20	; 0x04
    1f76:	11 96       	adiw	r26, 0x01	; 1
    1f78:	6d 91       	ld	r22, X+
    1f7a:	7c 91       	ld	r23, X
    1f7c:	12 97       	sbiw	r26, 0x02	; 2
    1f7e:	af 01       	movw	r20, r30
    1f80:	42 5f       	subi	r20, 0xF2	; 242
    1f82:	5f 4f       	sbci	r21, 0xFF	; 255
    1f84:	64 17       	cp	r22, r20
    1f86:	75 07       	cpc	r23, r21
    1f88:	31 f4       	brne	.+12     	; 0x1f96 <xTaskIncrementTick+0x17c>
    1f8a:	44 89       	ldd	r20, Z+20	; 0x14
    1f8c:	55 89       	ldd	r21, Z+21	; 0x15
    1f8e:	12 96       	adiw	r26, 0x02	; 2
    1f90:	5c 93       	st	X, r21
    1f92:	4e 93       	st	-X, r20
    1f94:	11 97       	sbiw	r26, 0x01	; 1
    1f96:	11 8e       	std	Z+25, r1	; 0x19
    1f98:	10 8e       	std	Z+24, r1	; 0x18
    1f9a:	9c 91       	ld	r25, X
    1f9c:	91 50       	subi	r25, 0x01	; 1
    1f9e:	9c 93       	st	X, r25
    1fa0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1fa2:	90 91 d1 11 	lds	r25, 0x11D1	; 0x8011d1 <uxTopReadyPriority>
    1fa6:	9a 17       	cp	r25, r26
    1fa8:	10 f4       	brcc	.+4      	; 0x1fae <xTaskIncrementTick+0x194>
    1faa:	a0 93 d1 11 	sts	0x11D1, r26	; 0x8011d1 <uxTopReadyPriority>
    1fae:	9b e0       	ldi	r25, 0x0B	; 11
    1fb0:	9a 9f       	mul	r25, r26
    1fb2:	d0 01       	movw	r26, r0
    1fb4:	11 24       	eor	r1, r1
    1fb6:	ad 5e       	subi	r26, 0xED	; 237
    1fb8:	bd 4e       	sbci	r27, 0xED	; 237
    1fba:	11 96       	adiw	r26, 0x01	; 1
    1fbc:	0d 90       	ld	r0, X+
    1fbe:	bc 91       	ld	r27, X
    1fc0:	a0 2d       	mov	r26, r0
    1fc2:	b7 83       	std	Z+7, r27	; 0x07
    1fc4:	a6 83       	std	Z+6, r26	; 0x06
    1fc6:	16 96       	adiw	r26, 0x06	; 6
    1fc8:	4d 91       	ld	r20, X+
    1fca:	5c 91       	ld	r21, X
    1fcc:	17 97       	sbiw	r26, 0x07	; 7
    1fce:	51 87       	std	Z+9, r21	; 0x09
    1fd0:	40 87       	std	Z+8, r20	; 0x08
    1fd2:	16 96       	adiw	r26, 0x06	; 6
    1fd4:	cd 91       	ld	r28, X+
    1fd6:	dc 91       	ld	r29, X
    1fd8:	17 97       	sbiw	r26, 0x07	; 7
    1fda:	3d 83       	std	Y+5, r19	; 0x05
    1fdc:	2c 83       	std	Y+4, r18	; 0x04
    1fde:	17 96       	adiw	r26, 0x07	; 7
    1fe0:	3c 93       	st	X, r19
    1fe2:	2e 93       	st	-X, r18
    1fe4:	16 97       	sbiw	r26, 0x06	; 6
    1fe6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1fe8:	9a 9f       	mul	r25, r26
    1fea:	d0 01       	movw	r26, r0
    1fec:	11 24       	eor	r1, r1
    1fee:	ad 5e       	subi	r26, 0xED	; 237
    1ff0:	bd 4e       	sbci	r27, 0xED	; 237
    1ff2:	b5 87       	std	Z+13, r27	; 0x0d
    1ff4:	a4 87       	std	Z+12, r26	; 0x0c
    1ff6:	9c 91       	ld	r25, X
    1ff8:	9f 5f       	subi	r25, 0xFF	; 255
    1ffa:	9c 93       	st	X, r25
    1ffc:	22 8d       	ldd	r18, Z+26	; 0x1a
    1ffe:	e0 91 81 12 	lds	r30, 0x1281	; 0x801281 <pxCurrentTCB>
    2002:	f0 91 82 12 	lds	r31, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    2006:	92 8d       	ldd	r25, Z+26	; 0x1a
    2008:	29 17       	cp	r18, r25
    200a:	08 f0       	brcs	.+2      	; 0x200e <__DATA_REGION_LENGTH__+0xe>
    200c:	4f cf       	rjmp	.-354    	; 0x1eac <xTaskIncrementTick+0x92>
    200e:	51 cf       	rjmp	.-350    	; 0x1eb2 <xTaskIncrementTick+0x98>
    2010:	e0 91 81 12 	lds	r30, 0x1281	; 0x801281 <pxCurrentTCB>
    2014:	f0 91 82 12 	lds	r31, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    2018:	e2 8d       	ldd	r30, Z+26	; 0x1a
    201a:	9b e0       	ldi	r25, 0x0B	; 11
    201c:	e9 9f       	mul	r30, r25
    201e:	f0 01       	movw	r30, r0
    2020:	11 24       	eor	r1, r1
    2022:	ed 5e       	subi	r30, 0xED	; 237
    2024:	fd 4e       	sbci	r31, 0xED	; 237
    2026:	90 81       	ld	r25, Z
    2028:	92 30       	cpi	r25, 0x02	; 2
    202a:	08 f0       	brcs	.+2      	; 0x202e <__DATA_REGION_LENGTH__+0x2e>
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 91 cb 11 	lds	r25, 0x11CB	; 0x8011cb <xYieldPending>
    2032:	91 11       	cpse	r25, r1
    2034:	16 c0       	rjmp	.+44     	; 0x2062 <__DATA_REGION_LENGTH__+0x62>
    2036:	16 c0       	rjmp	.+44     	; 0x2064 <__DATA_REGION_LENGTH__+0x64>
    2038:	80 91 cc 11 	lds	r24, 0x11CC	; 0x8011cc <xPendedTicks>
    203c:	90 91 cd 11 	lds	r25, 0x11CD	; 0x8011cd <xPendedTicks+0x1>
    2040:	a0 91 ce 11 	lds	r26, 0x11CE	; 0x8011ce <xPendedTicks+0x2>
    2044:	b0 91 cf 11 	lds	r27, 0x11CF	; 0x8011cf <xPendedTicks+0x3>
    2048:	01 96       	adiw	r24, 0x01	; 1
    204a:	a1 1d       	adc	r26, r1
    204c:	b1 1d       	adc	r27, r1
    204e:	80 93 cc 11 	sts	0x11CC, r24	; 0x8011cc <xPendedTicks>
    2052:	90 93 cd 11 	sts	0x11CD, r25	; 0x8011cd <xPendedTicks+0x1>
    2056:	a0 93 ce 11 	sts	0x11CE, r26	; 0x8011ce <xPendedTicks+0x2>
    205a:	b0 93 cf 11 	sts	0x11CF, r27	; 0x8011cf <xPendedTicks+0x3>
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	01 c0       	rjmp	.+2      	; 0x2064 <__DATA_REGION_LENGTH__+0x64>
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	df 91       	pop	r29
    2066:	cf 91       	pop	r28
    2068:	ff 90       	pop	r15
    206a:	ef 90       	pop	r14
    206c:	df 90       	pop	r13
    206e:	cf 90       	pop	r12
    2070:	08 95       	ret

00002072 <xTaskResumeAll>:
    2072:	cf 92       	push	r12
    2074:	df 92       	push	r13
    2076:	ef 92       	push	r14
    2078:	ff 92       	push	r15
    207a:	cf 93       	push	r28
    207c:	df 93       	push	r29
    207e:	0f b6       	in	r0, 0x3f	; 63
    2080:	f8 94       	cli
    2082:	0f 92       	push	r0
    2084:	80 91 c2 11 	lds	r24, 0x11C2	; 0x8011c2 <uxSchedulerSuspended>
    2088:	81 50       	subi	r24, 0x01	; 1
    208a:	80 93 c2 11 	sts	0x11C2, r24	; 0x8011c2 <uxSchedulerSuspended>
    208e:	80 91 c2 11 	lds	r24, 0x11C2	; 0x8011c2 <uxSchedulerSuspended>
    2092:	81 11       	cpse	r24, r1
    2094:	be c0       	rjmp	.+380    	; 0x2212 <__stack+0x13>
    2096:	80 91 d6 11 	lds	r24, 0x11D6	; 0x8011d6 <uxCurrentNumberOfTasks>
    209a:	81 11       	cpse	r24, r1
    209c:	88 c0       	rjmp	.+272    	; 0x21ae <xTaskResumeAll+0x13c>
    209e:	bc c0       	rjmp	.+376    	; 0x2218 <__stack+0x19>
    20a0:	e0 91 f5 11 	lds	r30, 0x11F5	; 0x8011f5 <xPendingReadyList+0x7>
    20a4:	f0 91 f6 11 	lds	r31, 0x11F6	; 0x8011f6 <xPendingReadyList+0x8>
    20a8:	00 84       	ldd	r0, Z+8	; 0x08
    20aa:	f1 85       	ldd	r31, Z+9	; 0x09
    20ac:	e0 2d       	mov	r30, r0
    20ae:	a0 8d       	ldd	r26, Z+24	; 0x18
    20b0:	b1 8d       	ldd	r27, Z+25	; 0x19
    20b2:	c2 89       	ldd	r28, Z+18	; 0x12
    20b4:	d3 89       	ldd	r29, Z+19	; 0x13
    20b6:	84 89       	ldd	r24, Z+20	; 0x14
    20b8:	95 89       	ldd	r25, Z+21	; 0x15
    20ba:	9f 83       	std	Y+7, r25	; 0x07
    20bc:	8e 83       	std	Y+6, r24	; 0x06
    20be:	c4 89       	ldd	r28, Z+20	; 0x14
    20c0:	d5 89       	ldd	r29, Z+21	; 0x15
    20c2:	82 89       	ldd	r24, Z+18	; 0x12
    20c4:	93 89       	ldd	r25, Z+19	; 0x13
    20c6:	9d 83       	std	Y+5, r25	; 0x05
    20c8:	8c 83       	std	Y+4, r24	; 0x04
    20ca:	11 96       	adiw	r26, 0x01	; 1
    20cc:	2d 91       	ld	r18, X+
    20ce:	3c 91       	ld	r19, X
    20d0:	12 97       	sbiw	r26, 0x02	; 2
    20d2:	cf 01       	movw	r24, r30
    20d4:	0e 96       	adiw	r24, 0x0e	; 14
    20d6:	28 17       	cp	r18, r24
    20d8:	39 07       	cpc	r19, r25
    20da:	31 f4       	brne	.+12     	; 0x20e8 <xTaskResumeAll+0x76>
    20dc:	84 89       	ldd	r24, Z+20	; 0x14
    20de:	95 89       	ldd	r25, Z+21	; 0x15
    20e0:	12 96       	adiw	r26, 0x02	; 2
    20e2:	9c 93       	st	X, r25
    20e4:	8e 93       	st	-X, r24
    20e6:	11 97       	sbiw	r26, 0x01	; 1
    20e8:	11 8e       	std	Z+25, r1	; 0x19
    20ea:	10 8e       	std	Z+24, r1	; 0x18
    20ec:	8c 91       	ld	r24, X
    20ee:	81 50       	subi	r24, 0x01	; 1
    20f0:	8c 93       	st	X, r24
    20f2:	a4 85       	ldd	r26, Z+12	; 0x0c
    20f4:	b5 85       	ldd	r27, Z+13	; 0x0d
    20f6:	c6 81       	ldd	r28, Z+6	; 0x06
    20f8:	d7 81       	ldd	r29, Z+7	; 0x07
    20fa:	80 85       	ldd	r24, Z+8	; 0x08
    20fc:	91 85       	ldd	r25, Z+9	; 0x09
    20fe:	9f 83       	std	Y+7, r25	; 0x07
    2100:	8e 83       	std	Y+6, r24	; 0x06
    2102:	c0 85       	ldd	r28, Z+8	; 0x08
    2104:	d1 85       	ldd	r29, Z+9	; 0x09
    2106:	86 81       	ldd	r24, Z+6	; 0x06
    2108:	97 81       	ldd	r25, Z+7	; 0x07
    210a:	9d 83       	std	Y+5, r25	; 0x05
    210c:	8c 83       	std	Y+4, r24	; 0x04
    210e:	11 96       	adiw	r26, 0x01	; 1
    2110:	8d 91       	ld	r24, X+
    2112:	9c 91       	ld	r25, X
    2114:	12 97       	sbiw	r26, 0x02	; 2
    2116:	9f 01       	movw	r18, r30
    2118:	2e 5f       	subi	r18, 0xFE	; 254
    211a:	3f 4f       	sbci	r19, 0xFF	; 255
    211c:	82 17       	cp	r24, r18
    211e:	93 07       	cpc	r25, r19
    2120:	31 f4       	brne	.+12     	; 0x212e <xTaskResumeAll+0xbc>
    2122:	80 85       	ldd	r24, Z+8	; 0x08
    2124:	91 85       	ldd	r25, Z+9	; 0x09
    2126:	12 96       	adiw	r26, 0x02	; 2
    2128:	9c 93       	st	X, r25
    212a:	8e 93       	st	-X, r24
    212c:	11 97       	sbiw	r26, 0x01	; 1
    212e:	15 86       	std	Z+13, r1	; 0x0d
    2130:	14 86       	std	Z+12, r1	; 0x0c
    2132:	8c 91       	ld	r24, X
    2134:	81 50       	subi	r24, 0x01	; 1
    2136:	8c 93       	st	X, r24
    2138:	a2 8d       	ldd	r26, Z+26	; 0x1a
    213a:	80 91 d1 11 	lds	r24, 0x11D1	; 0x8011d1 <uxTopReadyPriority>
    213e:	8a 17       	cp	r24, r26
    2140:	10 f4       	brcc	.+4      	; 0x2146 <xTaskResumeAll+0xd4>
    2142:	a0 93 d1 11 	sts	0x11D1, r26	; 0x8011d1 <uxTopReadyPriority>
    2146:	8b e0       	ldi	r24, 0x0B	; 11
    2148:	8a 9f       	mul	r24, r26
    214a:	d0 01       	movw	r26, r0
    214c:	11 24       	eor	r1, r1
    214e:	ad 5e       	subi	r26, 0xED	; 237
    2150:	bd 4e       	sbci	r27, 0xED	; 237
    2152:	11 96       	adiw	r26, 0x01	; 1
    2154:	0d 90       	ld	r0, X+
    2156:	bc 91       	ld	r27, X
    2158:	a0 2d       	mov	r26, r0
    215a:	b7 83       	std	Z+7, r27	; 0x07
    215c:	a6 83       	std	Z+6, r26	; 0x06
    215e:	16 96       	adiw	r26, 0x06	; 6
    2160:	4d 91       	ld	r20, X+
    2162:	5c 91       	ld	r21, X
    2164:	17 97       	sbiw	r26, 0x07	; 7
    2166:	51 87       	std	Z+9, r21	; 0x09
    2168:	40 87       	std	Z+8, r20	; 0x08
    216a:	16 96       	adiw	r26, 0x06	; 6
    216c:	cd 91       	ld	r28, X+
    216e:	dc 91       	ld	r29, X
    2170:	17 97       	sbiw	r26, 0x07	; 7
    2172:	3d 83       	std	Y+5, r19	; 0x05
    2174:	2c 83       	std	Y+4, r18	; 0x04
    2176:	17 96       	adiw	r26, 0x07	; 7
    2178:	3c 93       	st	X, r19
    217a:	2e 93       	st	-X, r18
    217c:	16 97       	sbiw	r26, 0x06	; 6
    217e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2180:	8a 9f       	mul	r24, r26
    2182:	d0 01       	movw	r26, r0
    2184:	11 24       	eor	r1, r1
    2186:	ad 5e       	subi	r26, 0xED	; 237
    2188:	bd 4e       	sbci	r27, 0xED	; 237
    218a:	b5 87       	std	Z+13, r27	; 0x0d
    218c:	a4 87       	std	Z+12, r26	; 0x0c
    218e:	8c 91       	ld	r24, X
    2190:	8f 5f       	subi	r24, 0xFF	; 255
    2192:	8c 93       	st	X, r24
    2194:	92 8d       	ldd	r25, Z+26	; 0x1a
    2196:	a0 91 81 12 	lds	r26, 0x1281	; 0x801281 <pxCurrentTCB>
    219a:	b0 91 82 12 	lds	r27, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    219e:	5a 96       	adiw	r26, 0x1a	; 26
    21a0:	8c 91       	ld	r24, X
    21a2:	98 17       	cp	r25, r24
    21a4:	30 f0       	brcs	.+12     	; 0x21b2 <xTaskResumeAll+0x140>
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	80 93 cb 11 	sts	0x11CB, r24	; 0x8011cb <xYieldPending>
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <xTaskResumeAll+0x140>
    21ae:	e0 e0       	ldi	r30, 0x00	; 0
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 91 ee 11 	lds	r24, 0x11EE	; 0x8011ee <xPendingReadyList>
    21b6:	81 11       	cpse	r24, r1
    21b8:	73 cf       	rjmp	.-282    	; 0x20a0 <xTaskResumeAll+0x2e>
    21ba:	ef 2b       	or	r30, r31
    21bc:	09 f0       	breq	.+2      	; 0x21c0 <xTaskResumeAll+0x14e>
    21be:	83 db       	rcall	.-2298   	; 0x18c6 <prvResetNextTaskUnblockTime>
    21c0:	c0 90 cc 11 	lds	r12, 0x11CC	; 0x8011cc <xPendedTicks>
    21c4:	d0 90 cd 11 	lds	r13, 0x11CD	; 0x8011cd <xPendedTicks+0x1>
    21c8:	e0 90 ce 11 	lds	r14, 0x11CE	; 0x8011ce <xPendedTicks+0x2>
    21cc:	f0 90 cf 11 	lds	r15, 0x11CF	; 0x8011cf <xPendedTicks+0x3>
    21d0:	c1 14       	cp	r12, r1
    21d2:	d1 04       	cpc	r13, r1
    21d4:	e1 04       	cpc	r14, r1
    21d6:	f1 04       	cpc	r15, r1
    21d8:	a1 f0       	breq	.+40     	; 0x2202 <__stack+0x3>
    21da:	1f de       	rcall	.-962    	; 0x1e1a <xTaskIncrementTick>
    21dc:	88 23       	and	r24, r24
    21de:	19 f0       	breq	.+6      	; 0x21e6 <xTaskResumeAll+0x174>
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	80 93 cb 11 	sts	0x11CB, r24	; 0x8011cb <xYieldPending>
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	c8 1a       	sub	r12, r24
    21ea:	d1 08       	sbc	r13, r1
    21ec:	e1 08       	sbc	r14, r1
    21ee:	f1 08       	sbc	r15, r1
    21f0:	a1 f7       	brne	.-24     	; 0x21da <xTaskResumeAll+0x168>
    21f2:	10 92 cc 11 	sts	0x11CC, r1	; 0x8011cc <xPendedTicks>
    21f6:	10 92 cd 11 	sts	0x11CD, r1	; 0x8011cd <xPendedTicks+0x1>
    21fa:	10 92 ce 11 	sts	0x11CE, r1	; 0x8011ce <xPendedTicks+0x2>
    21fe:	10 92 cf 11 	sts	0x11CF, r1	; 0x8011cf <xPendedTicks+0x3>
    2202:	80 91 cb 11 	lds	r24, 0x11CB	; 0x8011cb <xYieldPending>
    2206:	88 23       	and	r24, r24
    2208:	31 f0       	breq	.+12     	; 0x2216 <__stack+0x17>
    220a:	0e 94 b3 05 	call	0xb66	; 0xb66 <vPortYield>
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	03 c0       	rjmp	.+6      	; 0x2218 <__stack+0x19>
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	01 c0       	rjmp	.+2      	; 0x2218 <__stack+0x19>
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	0f 90       	pop	r0
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	df 91       	pop	r29
    221e:	cf 91       	pop	r28
    2220:	ff 90       	pop	r15
    2222:	ef 90       	pop	r14
    2224:	df 90       	pop	r13
    2226:	cf 90       	pop	r12
    2228:	08 95       	ret

0000222a <xTaskDelayUntil>:
    222a:	8f 92       	push	r8
    222c:	9f 92       	push	r9
    222e:	af 92       	push	r10
    2230:	bf 92       	push	r11
    2232:	cf 92       	push	r12
    2234:	df 92       	push	r13
    2236:	ef 92       	push	r14
    2238:	ff 92       	push	r15
    223a:	1f 93       	push	r17
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	ec 01       	movw	r28, r24
    2242:	6a 01       	movw	r12, r20
    2244:	7b 01       	movw	r14, r22
    2246:	d5 dd       	rcall	.-1110   	; 0x1df2 <vTaskSuspendAll>
    2248:	80 90 d2 11 	lds	r8, 0x11D2	; 0x8011d2 <xTickCount>
    224c:	90 90 d3 11 	lds	r9, 0x11D3	; 0x8011d3 <xTickCount+0x1>
    2250:	a0 90 d4 11 	lds	r10, 0x11D4	; 0x8011d4 <xTickCount+0x2>
    2254:	b0 90 d5 11 	lds	r11, 0x11D5	; 0x8011d5 <xTickCount+0x3>
    2258:	88 81       	ld	r24, Y
    225a:	99 81       	ldd	r25, Y+1	; 0x01
    225c:	aa 81       	ldd	r26, Y+2	; 0x02
    225e:	bb 81       	ldd	r27, Y+3	; 0x03
    2260:	ac 01       	movw	r20, r24
    2262:	bd 01       	movw	r22, r26
    2264:	4c 0d       	add	r20, r12
    2266:	5d 1d       	adc	r21, r13
    2268:	6e 1d       	adc	r22, r14
    226a:	7f 1d       	adc	r23, r15
    226c:	88 16       	cp	r8, r24
    226e:	99 06       	cpc	r9, r25
    2270:	aa 06       	cpc	r10, r26
    2272:	bb 06       	cpc	r11, r27
    2274:	60 f4       	brcc	.+24     	; 0x228e <xTaskDelayUntil+0x64>
    2276:	48 17       	cp	r20, r24
    2278:	59 07       	cpc	r21, r25
    227a:	6a 07       	cpc	r22, r26
    227c:	7b 07       	cpc	r23, r27
    227e:	98 f4       	brcc	.+38     	; 0x22a6 <xTaskDelayUntil+0x7c>
    2280:	84 16       	cp	r8, r20
    2282:	95 06       	cpc	r9, r21
    2284:	a6 06       	cpc	r10, r22
    2286:	b7 06       	cpc	r11, r23
    2288:	80 f0       	brcs	.+32     	; 0x22aa <xTaskDelayUntil+0x80>
    228a:	10 e0       	ldi	r17, 0x00	; 0
    228c:	13 c0       	rjmp	.+38     	; 0x22b4 <xTaskDelayUntil+0x8a>
    228e:	48 17       	cp	r20, r24
    2290:	59 07       	cpc	r21, r25
    2292:	6a 07       	cpc	r22, r26
    2294:	7b 07       	cpc	r23, r27
    2296:	58 f0       	brcs	.+22     	; 0x22ae <xTaskDelayUntil+0x84>
    2298:	84 16       	cp	r8, r20
    229a:	95 06       	cpc	r9, r21
    229c:	a6 06       	cpc	r10, r22
    229e:	b7 06       	cpc	r11, r23
    22a0:	40 f0       	brcs	.+16     	; 0x22b2 <xTaskDelayUntil+0x88>
    22a2:	10 e0       	ldi	r17, 0x00	; 0
    22a4:	07 c0       	rjmp	.+14     	; 0x22b4 <xTaskDelayUntil+0x8a>
    22a6:	10 e0       	ldi	r17, 0x00	; 0
    22a8:	05 c0       	rjmp	.+10     	; 0x22b4 <xTaskDelayUntil+0x8a>
    22aa:	11 e0       	ldi	r17, 0x01	; 1
    22ac:	03 c0       	rjmp	.+6      	; 0x22b4 <xTaskDelayUntil+0x8a>
    22ae:	11 e0       	ldi	r17, 0x01	; 1
    22b0:	01 c0       	rjmp	.+2      	; 0x22b4 <xTaskDelayUntil+0x8a>
    22b2:	11 e0       	ldi	r17, 0x01	; 1
    22b4:	48 83       	st	Y, r20
    22b6:	59 83       	std	Y+1, r21	; 0x01
    22b8:	6a 83       	std	Y+2, r22	; 0x02
    22ba:	7b 83       	std	Y+3, r23	; 0x03
    22bc:	11 23       	and	r17, r17
    22be:	41 f0       	breq	.+16     	; 0x22d0 <xTaskDelayUntil+0xa6>
    22c0:	cb 01       	movw	r24, r22
    22c2:	ba 01       	movw	r22, r20
    22c4:	68 19       	sub	r22, r8
    22c6:	79 09       	sbc	r23, r9
    22c8:	8a 09       	sbc	r24, r10
    22ca:	9b 09       	sbc	r25, r11
    22cc:	40 e0       	ldi	r20, 0x00	; 0
    22ce:	6b dc       	rcall	.-1834   	; 0x1ba6 <prvAddCurrentTaskToDelayedList>
    22d0:	d0 de       	rcall	.-608    	; 0x2072 <xTaskResumeAll>
    22d2:	81 11       	cpse	r24, r1
    22d4:	02 c0       	rjmp	.+4      	; 0x22da <xTaskDelayUntil+0xb0>
    22d6:	0e 94 b3 05 	call	0xb66	; 0xb66 <vPortYield>
    22da:	81 2f       	mov	r24, r17
    22dc:	df 91       	pop	r29
    22de:	cf 91       	pop	r28
    22e0:	1f 91       	pop	r17
    22e2:	ff 90       	pop	r15
    22e4:	ef 90       	pop	r14
    22e6:	df 90       	pop	r13
    22e8:	cf 90       	pop	r12
    22ea:	bf 90       	pop	r11
    22ec:	af 90       	pop	r10
    22ee:	9f 90       	pop	r9
    22f0:	8f 90       	pop	r8
    22f2:	08 95       	ret

000022f4 <vTaskDelay>:
    22f4:	cf 92       	push	r12
    22f6:	df 92       	push	r13
    22f8:	ef 92       	push	r14
    22fa:	ff 92       	push	r15
    22fc:	6b 01       	movw	r12, r22
    22fe:	7c 01       	movw	r14, r24
    2300:	67 2b       	or	r22, r23
    2302:	68 2b       	or	r22, r24
    2304:	69 2b       	or	r22, r25
    2306:	39 f0       	breq	.+14     	; 0x2316 <vTaskDelay+0x22>
    2308:	74 dd       	rcall	.-1304   	; 0x1df2 <vTaskSuspendAll>
    230a:	40 e0       	ldi	r20, 0x00	; 0
    230c:	c7 01       	movw	r24, r14
    230e:	b6 01       	movw	r22, r12
    2310:	4a dc       	rcall	.-1900   	; 0x1ba6 <prvAddCurrentTaskToDelayedList>
    2312:	af de       	rcall	.-674    	; 0x2072 <xTaskResumeAll>
    2314:	01 c0       	rjmp	.+2      	; 0x2318 <vTaskDelay+0x24>
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	81 11       	cpse	r24, r1
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <vTaskDelay+0x2c>
    231c:	0e 94 b3 05 	call	0xb66	; 0xb66 <vPortYield>
    2320:	ff 90       	pop	r15
    2322:	ef 90       	pop	r14
    2324:	df 90       	pop	r13
    2326:	cf 90       	pop	r12
    2328:	08 95       	ret

0000232a <vTaskSwitchContext>:
    232a:	80 91 c2 11 	lds	r24, 0x11C2	; 0x8011c2 <uxSchedulerSuspended>
    232e:	88 23       	and	r24, r24
    2330:	21 f0       	breq	.+8      	; 0x233a <vTaskSwitchContext+0x10>
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	80 93 cb 11 	sts	0x11CB, r24	; 0x8011cb <xYieldPending>
    2338:	08 95       	ret
    233a:	10 92 cb 11 	sts	0x11CB, r1	; 0x8011cb <xYieldPending>
    233e:	e0 91 81 12 	lds	r30, 0x1281	; 0x801281 <pxCurrentTCB>
    2342:	f0 91 82 12 	lds	r31, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    2346:	20 81       	ld	r18, Z
    2348:	31 81       	ldd	r19, Z+1	; 0x01
    234a:	e0 91 81 12 	lds	r30, 0x1281	; 0x801281 <pxCurrentTCB>
    234e:	f0 91 82 12 	lds	r31, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    2352:	83 8d       	ldd	r24, Z+27	; 0x1b
    2354:	94 8d       	ldd	r25, Z+28	; 0x1c
    2356:	82 17       	cp	r24, r18
    2358:	93 07       	cpc	r25, r19
    235a:	60 f0       	brcs	.+24     	; 0x2374 <vTaskSwitchContext+0x4a>
    235c:	60 91 81 12 	lds	r22, 0x1281	; 0x801281 <pxCurrentTCB>
    2360:	70 91 82 12 	lds	r23, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    2364:	63 5e       	subi	r22, 0xE3	; 227
    2366:	7f 4f       	sbci	r23, 0xFF	; 255
    2368:	80 91 81 12 	lds	r24, 0x1281	; 0x801281 <pxCurrentTCB>
    236c:	90 91 82 12 	lds	r25, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    2370:	0e 94 01 1b 	call	0x3602	; 0x3602 <vApplicationStackOverflowHook>
    2374:	80 91 d1 11 	lds	r24, 0x11D1	; 0x8011d1 <uxTopReadyPriority>
    2378:	01 c0       	rjmp	.+2      	; 0x237c <vTaskSwitchContext+0x52>
    237a:	81 50       	subi	r24, 0x01	; 1
    237c:	28 2f       	mov	r18, r24
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	9b e0       	ldi	r25, 0x0B	; 11
    2382:	92 9f       	mul	r25, r18
    2384:	f0 01       	movw	r30, r0
    2386:	93 9f       	mul	r25, r19
    2388:	f0 0d       	add	r31, r0
    238a:	11 24       	eor	r1, r1
    238c:	ed 5e       	subi	r30, 0xED	; 237
    238e:	fd 4e       	sbci	r31, 0xED	; 237
    2390:	90 81       	ld	r25, Z
    2392:	99 23       	and	r25, r25
    2394:	91 f3       	breq	.-28     	; 0x237a <vTaskSwitchContext+0x50>
    2396:	9b e0       	ldi	r25, 0x0B	; 11
    2398:	92 9f       	mul	r25, r18
    239a:	a0 01       	movw	r20, r0
    239c:	93 9f       	mul	r25, r19
    239e:	50 0d       	add	r21, r0
    23a0:	11 24       	eor	r1, r1
    23a2:	df 01       	movw	r26, r30
    23a4:	01 80       	ldd	r0, Z+1	; 0x01
    23a6:	f2 81       	ldd	r31, Z+2	; 0x02
    23a8:	e0 2d       	mov	r30, r0
    23aa:	04 80       	ldd	r0, Z+4	; 0x04
    23ac:	f5 81       	ldd	r31, Z+5	; 0x05
    23ae:	e0 2d       	mov	r30, r0
    23b0:	12 96       	adiw	r26, 0x02	; 2
    23b2:	fc 93       	st	X, r31
    23b4:	ee 93       	st	-X, r30
    23b6:	11 97       	sbiw	r26, 0x01	; 1
    23b8:	4a 5e       	subi	r20, 0xEA	; 234
    23ba:	5d 4e       	sbci	r21, 0xED	; 237
    23bc:	e4 17       	cp	r30, r20
    23be:	f5 07       	cpc	r31, r21
    23c0:	29 f4       	brne	.+10     	; 0x23cc <vTaskSwitchContext+0xa2>
    23c2:	44 81       	ldd	r20, Z+4	; 0x04
    23c4:	55 81       	ldd	r21, Z+5	; 0x05
    23c6:	fd 01       	movw	r30, r26
    23c8:	52 83       	std	Z+2, r21	; 0x02
    23ca:	41 83       	std	Z+1, r20	; 0x01
    23cc:	9b e0       	ldi	r25, 0x0B	; 11
    23ce:	92 9f       	mul	r25, r18
    23d0:	f0 01       	movw	r30, r0
    23d2:	93 9f       	mul	r25, r19
    23d4:	f0 0d       	add	r31, r0
    23d6:	11 24       	eor	r1, r1
    23d8:	ed 5e       	subi	r30, 0xED	; 237
    23da:	fd 4e       	sbci	r31, 0xED	; 237
    23dc:	01 80       	ldd	r0, Z+1	; 0x01
    23de:	f2 81       	ldd	r31, Z+2	; 0x02
    23e0:	e0 2d       	mov	r30, r0
    23e2:	20 85       	ldd	r18, Z+8	; 0x08
    23e4:	31 85       	ldd	r19, Z+9	; 0x09
    23e6:	30 93 82 12 	sts	0x1282, r19	; 0x801282 <pxCurrentTCB+0x1>
    23ea:	20 93 81 12 	sts	0x1281, r18	; 0x801281 <pxCurrentTCB>
    23ee:	80 93 d1 11 	sts	0x11D1, r24	; 0x8011d1 <uxTopReadyPriority>
    23f2:	08 95       	ret

000023f4 <vTaskPlaceOnEventList>:
    23f4:	cf 92       	push	r12
    23f6:	df 92       	push	r13
    23f8:	ef 92       	push	r14
    23fa:	ff 92       	push	r15
    23fc:	6a 01       	movw	r12, r20
    23fe:	7b 01       	movw	r14, r22
    2400:	60 91 81 12 	lds	r22, 0x1281	; 0x801281 <pxCurrentTCB>
    2404:	70 91 82 12 	lds	r23, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    2408:	62 5f       	subi	r22, 0xF2	; 242
    240a:	7f 4f       	sbci	r23, 0xFF	; 255
    240c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <vListInsert>
    2410:	41 e0       	ldi	r20, 0x01	; 1
    2412:	c7 01       	movw	r24, r14
    2414:	b6 01       	movw	r22, r12
    2416:	c7 db       	rcall	.-2162   	; 0x1ba6 <prvAddCurrentTaskToDelayedList>
    2418:	ff 90       	pop	r15
    241a:	ef 90       	pop	r14
    241c:	df 90       	pop	r13
    241e:	cf 90       	pop	r12
    2420:	08 95       	ret

00002422 <vTaskPlaceOnUnorderedEventList>:
    2422:	0f 93       	push	r16
    2424:	1f 93       	push	r17
    2426:	cf 93       	push	r28
    2428:	df 93       	push	r29
    242a:	fc 01       	movw	r30, r24
    242c:	a0 91 81 12 	lds	r26, 0x1281	; 0x801281 <pxCurrentTCB>
    2430:	b0 91 82 12 	lds	r27, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    2434:	70 68       	ori	r23, 0x80	; 128
    2436:	1e 96       	adiw	r26, 0x0e	; 14
    2438:	4d 93       	st	X+, r20
    243a:	5d 93       	st	X+, r21
    243c:	6d 93       	st	X+, r22
    243e:	7c 93       	st	X, r23
    2440:	51 97       	sbiw	r26, 0x11	; 17
    2442:	a1 81       	ldd	r26, Z+1	; 0x01
    2444:	b2 81       	ldd	r27, Z+2	; 0x02
    2446:	c0 91 81 12 	lds	r28, 0x1281	; 0x801281 <pxCurrentTCB>
    244a:	d0 91 82 12 	lds	r29, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    244e:	bb 8b       	std	Y+19, r27	; 0x13
    2450:	aa 8b       	std	Y+18, r26	; 0x12
    2452:	c0 91 81 12 	lds	r28, 0x1281	; 0x801281 <pxCurrentTCB>
    2456:	d0 91 82 12 	lds	r29, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    245a:	16 96       	adiw	r26, 0x06	; 6
    245c:	8d 91       	ld	r24, X+
    245e:	9c 91       	ld	r25, X
    2460:	17 97       	sbiw	r26, 0x07	; 7
    2462:	9d 8b       	std	Y+21, r25	; 0x15
    2464:	8c 8b       	std	Y+20, r24	; 0x14
    2466:	16 96       	adiw	r26, 0x06	; 6
    2468:	cd 91       	ld	r28, X+
    246a:	dc 91       	ld	r29, X
    246c:	17 97       	sbiw	r26, 0x07	; 7
    246e:	80 91 81 12 	lds	r24, 0x1281	; 0x801281 <pxCurrentTCB>
    2472:	90 91 82 12 	lds	r25, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    2476:	0e 96       	adiw	r24, 0x0e	; 14
    2478:	9d 83       	std	Y+5, r25	; 0x05
    247a:	8c 83       	std	Y+4, r24	; 0x04
    247c:	80 91 81 12 	lds	r24, 0x1281	; 0x801281 <pxCurrentTCB>
    2480:	90 91 82 12 	lds	r25, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    2484:	0e 96       	adiw	r24, 0x0e	; 14
    2486:	17 96       	adiw	r26, 0x07	; 7
    2488:	9c 93       	st	X, r25
    248a:	8e 93       	st	-X, r24
    248c:	16 97       	sbiw	r26, 0x06	; 6
    248e:	a0 91 81 12 	lds	r26, 0x1281	; 0x801281 <pxCurrentTCB>
    2492:	b0 91 82 12 	lds	r27, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    2496:	59 96       	adiw	r26, 0x19	; 25
    2498:	fc 93       	st	X, r31
    249a:	ee 93       	st	-X, r30
    249c:	58 97       	sbiw	r26, 0x18	; 24
    249e:	80 81       	ld	r24, Z
    24a0:	8f 5f       	subi	r24, 0xFF	; 255
    24a2:	80 83       	st	Z, r24
    24a4:	41 e0       	ldi	r20, 0x01	; 1
    24a6:	c9 01       	movw	r24, r18
    24a8:	b8 01       	movw	r22, r16
    24aa:	7d db       	rcall	.-2310   	; 0x1ba6 <prvAddCurrentTaskToDelayedList>
    24ac:	df 91       	pop	r29
    24ae:	cf 91       	pop	r28
    24b0:	1f 91       	pop	r17
    24b2:	0f 91       	pop	r16
    24b4:	08 95       	ret

000024b6 <vTaskPlaceOnEventListRestricted>:
    24b6:	cf 93       	push	r28
    24b8:	df 93       	push	r29
    24ba:	fc 01       	movw	r30, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	ba 01       	movw	r22, r20
    24c0:	a1 81       	ldd	r26, Z+1	; 0x01
    24c2:	b2 81       	ldd	r27, Z+2	; 0x02
    24c4:	c0 91 81 12 	lds	r28, 0x1281	; 0x801281 <pxCurrentTCB>
    24c8:	d0 91 82 12 	lds	r29, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    24cc:	bb 8b       	std	Y+19, r27	; 0x13
    24ce:	aa 8b       	std	Y+18, r26	; 0x12
    24d0:	c0 91 81 12 	lds	r28, 0x1281	; 0x801281 <pxCurrentTCB>
    24d4:	d0 91 82 12 	lds	r29, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    24d8:	16 96       	adiw	r26, 0x06	; 6
    24da:	4d 91       	ld	r20, X+
    24dc:	5c 91       	ld	r21, X
    24de:	17 97       	sbiw	r26, 0x07	; 7
    24e0:	5d 8b       	std	Y+21, r21	; 0x15
    24e2:	4c 8b       	std	Y+20, r20	; 0x14
    24e4:	16 96       	adiw	r26, 0x06	; 6
    24e6:	cd 91       	ld	r28, X+
    24e8:	dc 91       	ld	r29, X
    24ea:	17 97       	sbiw	r26, 0x07	; 7
    24ec:	40 91 81 12 	lds	r20, 0x1281	; 0x801281 <pxCurrentTCB>
    24f0:	50 91 82 12 	lds	r21, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    24f4:	42 5f       	subi	r20, 0xF2	; 242
    24f6:	5f 4f       	sbci	r21, 0xFF	; 255
    24f8:	5d 83       	std	Y+5, r21	; 0x05
    24fa:	4c 83       	std	Y+4, r20	; 0x04
    24fc:	40 91 81 12 	lds	r20, 0x1281	; 0x801281 <pxCurrentTCB>
    2500:	50 91 82 12 	lds	r21, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    2504:	42 5f       	subi	r20, 0xF2	; 242
    2506:	5f 4f       	sbci	r21, 0xFF	; 255
    2508:	17 96       	adiw	r26, 0x07	; 7
    250a:	5c 93       	st	X, r21
    250c:	4e 93       	st	-X, r20
    250e:	16 97       	sbiw	r26, 0x06	; 6
    2510:	a0 91 81 12 	lds	r26, 0x1281	; 0x801281 <pxCurrentTCB>
    2514:	b0 91 82 12 	lds	r27, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    2518:	59 96       	adiw	r26, 0x19	; 25
    251a:	fc 93       	st	X, r31
    251c:	ee 93       	st	-X, r30
    251e:	58 97       	sbiw	r26, 0x18	; 24
    2520:	30 81       	ld	r19, Z
    2522:	3f 5f       	subi	r19, 0xFF	; 255
    2524:	30 83       	st	Z, r19
    2526:	22 23       	and	r18, r18
    2528:	19 f0       	breq	.+6      	; 0x2530 <vTaskPlaceOnEventListRestricted+0x7a>
    252a:	6f ef       	ldi	r22, 0xFF	; 255
    252c:	7f ef       	ldi	r23, 0xFF	; 255
    252e:	cb 01       	movw	r24, r22
    2530:	42 2f       	mov	r20, r18
    2532:	39 db       	rcall	.-2446   	; 0x1ba6 <prvAddCurrentTaskToDelayedList>
    2534:	df 91       	pop	r29
    2536:	cf 91       	pop	r28
    2538:	08 95       	ret

0000253a <xTaskRemoveFromEventList>:
    253a:	cf 93       	push	r28
    253c:	df 93       	push	r29
    253e:	dc 01       	movw	r26, r24
    2540:	17 96       	adiw	r26, 0x07	; 7
    2542:	ed 91       	ld	r30, X+
    2544:	fc 91       	ld	r31, X
    2546:	18 97       	sbiw	r26, 0x08	; 8
    2548:	00 84       	ldd	r0, Z+8	; 0x08
    254a:	f1 85       	ldd	r31, Z+9	; 0x09
    254c:	e0 2d       	mov	r30, r0
    254e:	a0 8d       	ldd	r26, Z+24	; 0x18
    2550:	b1 8d       	ldd	r27, Z+25	; 0x19
    2552:	c2 89       	ldd	r28, Z+18	; 0x12
    2554:	d3 89       	ldd	r29, Z+19	; 0x13
    2556:	84 89       	ldd	r24, Z+20	; 0x14
    2558:	95 89       	ldd	r25, Z+21	; 0x15
    255a:	9f 83       	std	Y+7, r25	; 0x07
    255c:	8e 83       	std	Y+6, r24	; 0x06
    255e:	c4 89       	ldd	r28, Z+20	; 0x14
    2560:	d5 89       	ldd	r29, Z+21	; 0x15
    2562:	82 89       	ldd	r24, Z+18	; 0x12
    2564:	93 89       	ldd	r25, Z+19	; 0x13
    2566:	9d 83       	std	Y+5, r25	; 0x05
    2568:	8c 83       	std	Y+4, r24	; 0x04
    256a:	11 96       	adiw	r26, 0x01	; 1
    256c:	8d 91       	ld	r24, X+
    256e:	9c 91       	ld	r25, X
    2570:	12 97       	sbiw	r26, 0x02	; 2
    2572:	9f 01       	movw	r18, r30
    2574:	22 5f       	subi	r18, 0xF2	; 242
    2576:	3f 4f       	sbci	r19, 0xFF	; 255
    2578:	82 17       	cp	r24, r18
    257a:	93 07       	cpc	r25, r19
    257c:	31 f4       	brne	.+12     	; 0x258a <xTaskRemoveFromEventList+0x50>
    257e:	84 89       	ldd	r24, Z+20	; 0x14
    2580:	95 89       	ldd	r25, Z+21	; 0x15
    2582:	12 96       	adiw	r26, 0x02	; 2
    2584:	9c 93       	st	X, r25
    2586:	8e 93       	st	-X, r24
    2588:	11 97       	sbiw	r26, 0x01	; 1
    258a:	11 8e       	std	Z+25, r1	; 0x19
    258c:	10 8e       	std	Z+24, r1	; 0x18
    258e:	8c 91       	ld	r24, X
    2590:	81 50       	subi	r24, 0x01	; 1
    2592:	8c 93       	st	X, r24
    2594:	80 91 c2 11 	lds	r24, 0x11C2	; 0x8011c2 <uxSchedulerSuspended>
    2598:	81 11       	cpse	r24, r1
    259a:	52 c0       	rjmp	.+164    	; 0x2640 <xTaskRemoveFromEventList+0x106>
    259c:	a4 85       	ldd	r26, Z+12	; 0x0c
    259e:	b5 85       	ldd	r27, Z+13	; 0x0d
    25a0:	c6 81       	ldd	r28, Z+6	; 0x06
    25a2:	d7 81       	ldd	r29, Z+7	; 0x07
    25a4:	80 85       	ldd	r24, Z+8	; 0x08
    25a6:	91 85       	ldd	r25, Z+9	; 0x09
    25a8:	9f 83       	std	Y+7, r25	; 0x07
    25aa:	8e 83       	std	Y+6, r24	; 0x06
    25ac:	c0 85       	ldd	r28, Z+8	; 0x08
    25ae:	d1 85       	ldd	r29, Z+9	; 0x09
    25b0:	86 81       	ldd	r24, Z+6	; 0x06
    25b2:	97 81       	ldd	r25, Z+7	; 0x07
    25b4:	9d 83       	std	Y+5, r25	; 0x05
    25b6:	8c 83       	std	Y+4, r24	; 0x04
    25b8:	11 96       	adiw	r26, 0x01	; 1
    25ba:	8d 91       	ld	r24, X+
    25bc:	9c 91       	ld	r25, X
    25be:	12 97       	sbiw	r26, 0x02	; 2
    25c0:	9f 01       	movw	r18, r30
    25c2:	2e 5f       	subi	r18, 0xFE	; 254
    25c4:	3f 4f       	sbci	r19, 0xFF	; 255
    25c6:	82 17       	cp	r24, r18
    25c8:	93 07       	cpc	r25, r19
    25ca:	31 f4       	brne	.+12     	; 0x25d8 <xTaskRemoveFromEventList+0x9e>
    25cc:	80 85       	ldd	r24, Z+8	; 0x08
    25ce:	91 85       	ldd	r25, Z+9	; 0x09
    25d0:	12 96       	adiw	r26, 0x02	; 2
    25d2:	9c 93       	st	X, r25
    25d4:	8e 93       	st	-X, r24
    25d6:	11 97       	sbiw	r26, 0x01	; 1
    25d8:	15 86       	std	Z+13, r1	; 0x0d
    25da:	14 86       	std	Z+12, r1	; 0x0c
    25dc:	8c 91       	ld	r24, X
    25de:	81 50       	subi	r24, 0x01	; 1
    25e0:	8c 93       	st	X, r24
    25e2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    25e4:	80 91 d1 11 	lds	r24, 0x11D1	; 0x8011d1 <uxTopReadyPriority>
    25e8:	8a 17       	cp	r24, r26
    25ea:	10 f4       	brcc	.+4      	; 0x25f0 <xTaskRemoveFromEventList+0xb6>
    25ec:	a0 93 d1 11 	sts	0x11D1, r26	; 0x8011d1 <uxTopReadyPriority>
    25f0:	8b e0       	ldi	r24, 0x0B	; 11
    25f2:	8a 9f       	mul	r24, r26
    25f4:	d0 01       	movw	r26, r0
    25f6:	11 24       	eor	r1, r1
    25f8:	ad 5e       	subi	r26, 0xED	; 237
    25fa:	bd 4e       	sbci	r27, 0xED	; 237
    25fc:	11 96       	adiw	r26, 0x01	; 1
    25fe:	0d 90       	ld	r0, X+
    2600:	bc 91       	ld	r27, X
    2602:	a0 2d       	mov	r26, r0
    2604:	b7 83       	std	Z+7, r27	; 0x07
    2606:	a6 83       	std	Z+6, r26	; 0x06
    2608:	16 96       	adiw	r26, 0x06	; 6
    260a:	4d 91       	ld	r20, X+
    260c:	5c 91       	ld	r21, X
    260e:	17 97       	sbiw	r26, 0x07	; 7
    2610:	51 87       	std	Z+9, r21	; 0x09
    2612:	40 87       	std	Z+8, r20	; 0x08
    2614:	16 96       	adiw	r26, 0x06	; 6
    2616:	cd 91       	ld	r28, X+
    2618:	dc 91       	ld	r29, X
    261a:	17 97       	sbiw	r26, 0x07	; 7
    261c:	3d 83       	std	Y+5, r19	; 0x05
    261e:	2c 83       	std	Y+4, r18	; 0x04
    2620:	17 96       	adiw	r26, 0x07	; 7
    2622:	3c 93       	st	X, r19
    2624:	2e 93       	st	-X, r18
    2626:	16 97       	sbiw	r26, 0x06	; 6
    2628:	a2 8d       	ldd	r26, Z+26	; 0x1a
    262a:	8a 9f       	mul	r24, r26
    262c:	d0 01       	movw	r26, r0
    262e:	11 24       	eor	r1, r1
    2630:	ad 5e       	subi	r26, 0xED	; 237
    2632:	bd 4e       	sbci	r27, 0xED	; 237
    2634:	b5 87       	std	Z+13, r27	; 0x0d
    2636:	a4 87       	std	Z+12, r26	; 0x0c
    2638:	8c 91       	ld	r24, X
    263a:	8f 5f       	subi	r24, 0xFF	; 255
    263c:	8c 93       	st	X, r24
    263e:	1c c0       	rjmp	.+56     	; 0x2678 <xTaskRemoveFromEventList+0x13e>
    2640:	4e ee       	ldi	r20, 0xEE	; 238
    2642:	51 e1       	ldi	r21, 0x11	; 17
    2644:	da 01       	movw	r26, r20
    2646:	11 96       	adiw	r26, 0x01	; 1
    2648:	cd 91       	ld	r28, X+
    264a:	dc 91       	ld	r29, X
    264c:	12 97       	sbiw	r26, 0x02	; 2
    264e:	d3 8b       	std	Z+19, r29	; 0x13
    2650:	c2 8b       	std	Z+18, r28	; 0x12
    2652:	8e 81       	ldd	r24, Y+6	; 0x06
    2654:	9f 81       	ldd	r25, Y+7	; 0x07
    2656:	95 8b       	std	Z+21, r25	; 0x15
    2658:	84 8b       	std	Z+20, r24	; 0x14
    265a:	8e 81       	ldd	r24, Y+6	; 0x06
    265c:	9f 81       	ldd	r25, Y+7	; 0x07
    265e:	dc 01       	movw	r26, r24
    2660:	15 96       	adiw	r26, 0x05	; 5
    2662:	3c 93       	st	X, r19
    2664:	2e 93       	st	-X, r18
    2666:	14 97       	sbiw	r26, 0x04	; 4
    2668:	3f 83       	std	Y+7, r19	; 0x07
    266a:	2e 83       	std	Y+6, r18	; 0x06
    266c:	51 8f       	std	Z+25, r21	; 0x19
    266e:	40 8f       	std	Z+24, r20	; 0x18
    2670:	da 01       	movw	r26, r20
    2672:	8c 91       	ld	r24, X
    2674:	8f 5f       	subi	r24, 0xFF	; 255
    2676:	8c 93       	st	X, r24
    2678:	92 8d       	ldd	r25, Z+26	; 0x1a
    267a:	e0 91 81 12 	lds	r30, 0x1281	; 0x801281 <pxCurrentTCB>
    267e:	f0 91 82 12 	lds	r31, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    2682:	82 8d       	ldd	r24, Z+26	; 0x1a
    2684:	89 17       	cp	r24, r25
    2686:	20 f4       	brcc	.+8      	; 0x2690 <xTaskRemoveFromEventList+0x156>
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	80 93 cb 11 	sts	0x11CB, r24	; 0x8011cb <xYieldPending>
    268e:	01 c0       	rjmp	.+2      	; 0x2692 <xTaskRemoveFromEventList+0x158>
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	df 91       	pop	r29
    2694:	cf 91       	pop	r28
    2696:	08 95       	ret

00002698 <vTaskRemoveFromUnorderedEventList>:
    2698:	cf 93       	push	r28
    269a:	df 93       	push	r29
    269c:	dc 01       	movw	r26, r24
    269e:	70 68       	ori	r23, 0x80	; 128
    26a0:	4d 93       	st	X+, r20
    26a2:	5d 93       	st	X+, r21
    26a4:	6d 93       	st	X+, r22
    26a6:	7c 93       	st	X, r23
    26a8:	13 97       	sbiw	r26, 0x03	; 3
    26aa:	18 96       	adiw	r26, 0x08	; 8
    26ac:	ed 91       	ld	r30, X+
    26ae:	fc 91       	ld	r31, X
    26b0:	19 97       	sbiw	r26, 0x09	; 9
    26b2:	1a 96       	adiw	r26, 0x0a	; 10
    26b4:	4d 91       	ld	r20, X+
    26b6:	5c 91       	ld	r21, X
    26b8:	1b 97       	sbiw	r26, 0x0b	; 11
    26ba:	14 96       	adiw	r26, 0x04	; 4
    26bc:	8d 91       	ld	r24, X+
    26be:	9c 91       	ld	r25, X
    26c0:	15 97       	sbiw	r26, 0x05	; 5
    26c2:	16 96       	adiw	r26, 0x06	; 6
    26c4:	2d 91       	ld	r18, X+
    26c6:	3c 91       	ld	r19, X
    26c8:	17 97       	sbiw	r26, 0x07	; 7
    26ca:	ec 01       	movw	r28, r24
    26cc:	3f 83       	std	Y+7, r19	; 0x07
    26ce:	2e 83       	std	Y+6, r18	; 0x06
    26d0:	16 96       	adiw	r26, 0x06	; 6
    26d2:	8d 91       	ld	r24, X+
    26d4:	9c 91       	ld	r25, X
    26d6:	17 97       	sbiw	r26, 0x07	; 7
    26d8:	14 96       	adiw	r26, 0x04	; 4
    26da:	2d 91       	ld	r18, X+
    26dc:	3c 91       	ld	r19, X
    26de:	15 97       	sbiw	r26, 0x05	; 5
    26e0:	ec 01       	movw	r28, r24
    26e2:	3d 83       	std	Y+5, r19	; 0x05
    26e4:	2c 83       	std	Y+4, r18	; 0x04
    26e6:	ea 01       	movw	r28, r20
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	9a 81       	ldd	r25, Y+2	; 0x02
    26ec:	a8 17       	cp	r26, r24
    26ee:	b9 07       	cpc	r27, r25
    26f0:	31 f4       	brne	.+12     	; 0x26fe <vTaskRemoveFromUnorderedEventList+0x66>
    26f2:	16 96       	adiw	r26, 0x06	; 6
    26f4:	8d 91       	ld	r24, X+
    26f6:	9c 91       	ld	r25, X
    26f8:	17 97       	sbiw	r26, 0x07	; 7
    26fa:	9a 83       	std	Y+2, r25	; 0x02
    26fc:	89 83       	std	Y+1, r24	; 0x01
    26fe:	1b 96       	adiw	r26, 0x0b	; 11
    2700:	1c 92       	st	X, r1
    2702:	1e 92       	st	-X, r1
    2704:	1a 97       	sbiw	r26, 0x0a	; 10
    2706:	da 01       	movw	r26, r20
    2708:	8c 91       	ld	r24, X
    270a:	81 50       	subi	r24, 0x01	; 1
    270c:	8c 93       	st	X, r24
    270e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2710:	b5 85       	ldd	r27, Z+13	; 0x0d
    2712:	c6 81       	ldd	r28, Z+6	; 0x06
    2714:	d7 81       	ldd	r29, Z+7	; 0x07
    2716:	80 85       	ldd	r24, Z+8	; 0x08
    2718:	91 85       	ldd	r25, Z+9	; 0x09
    271a:	9f 83       	std	Y+7, r25	; 0x07
    271c:	8e 83       	std	Y+6, r24	; 0x06
    271e:	c0 85       	ldd	r28, Z+8	; 0x08
    2720:	d1 85       	ldd	r29, Z+9	; 0x09
    2722:	86 81       	ldd	r24, Z+6	; 0x06
    2724:	97 81       	ldd	r25, Z+7	; 0x07
    2726:	9d 83       	std	Y+5, r25	; 0x05
    2728:	8c 83       	std	Y+4, r24	; 0x04
    272a:	11 96       	adiw	r26, 0x01	; 1
    272c:	8d 91       	ld	r24, X+
    272e:	9c 91       	ld	r25, X
    2730:	12 97       	sbiw	r26, 0x02	; 2
    2732:	9f 01       	movw	r18, r30
    2734:	2e 5f       	subi	r18, 0xFE	; 254
    2736:	3f 4f       	sbci	r19, 0xFF	; 255
    2738:	82 17       	cp	r24, r18
    273a:	93 07       	cpc	r25, r19
    273c:	31 f4       	brne	.+12     	; 0x274a <vTaskRemoveFromUnorderedEventList+0xb2>
    273e:	80 85       	ldd	r24, Z+8	; 0x08
    2740:	91 85       	ldd	r25, Z+9	; 0x09
    2742:	12 96       	adiw	r26, 0x02	; 2
    2744:	9c 93       	st	X, r25
    2746:	8e 93       	st	-X, r24
    2748:	11 97       	sbiw	r26, 0x01	; 1
    274a:	15 86       	std	Z+13, r1	; 0x0d
    274c:	14 86       	std	Z+12, r1	; 0x0c
    274e:	8c 91       	ld	r24, X
    2750:	81 50       	subi	r24, 0x01	; 1
    2752:	8c 93       	st	X, r24
    2754:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2756:	80 91 d1 11 	lds	r24, 0x11D1	; 0x8011d1 <uxTopReadyPriority>
    275a:	8a 17       	cp	r24, r26
    275c:	10 f4       	brcc	.+4      	; 0x2762 <vTaskRemoveFromUnorderedEventList+0xca>
    275e:	a0 93 d1 11 	sts	0x11D1, r26	; 0x8011d1 <uxTopReadyPriority>
    2762:	8b e0       	ldi	r24, 0x0B	; 11
    2764:	8a 9f       	mul	r24, r26
    2766:	d0 01       	movw	r26, r0
    2768:	11 24       	eor	r1, r1
    276a:	ad 5e       	subi	r26, 0xED	; 237
    276c:	bd 4e       	sbci	r27, 0xED	; 237
    276e:	11 96       	adiw	r26, 0x01	; 1
    2770:	0d 90       	ld	r0, X+
    2772:	bc 91       	ld	r27, X
    2774:	a0 2d       	mov	r26, r0
    2776:	b7 83       	std	Z+7, r27	; 0x07
    2778:	a6 83       	std	Z+6, r26	; 0x06
    277a:	16 96       	adiw	r26, 0x06	; 6
    277c:	4d 91       	ld	r20, X+
    277e:	5c 91       	ld	r21, X
    2780:	17 97       	sbiw	r26, 0x07	; 7
    2782:	51 87       	std	Z+9, r21	; 0x09
    2784:	40 87       	std	Z+8, r20	; 0x08
    2786:	16 96       	adiw	r26, 0x06	; 6
    2788:	cd 91       	ld	r28, X+
    278a:	dc 91       	ld	r29, X
    278c:	17 97       	sbiw	r26, 0x07	; 7
    278e:	3d 83       	std	Y+5, r19	; 0x05
    2790:	2c 83       	std	Y+4, r18	; 0x04
    2792:	17 96       	adiw	r26, 0x07	; 7
    2794:	3c 93       	st	X, r19
    2796:	2e 93       	st	-X, r18
    2798:	16 97       	sbiw	r26, 0x06	; 6
    279a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    279c:	8a 9f       	mul	r24, r26
    279e:	d0 01       	movw	r26, r0
    27a0:	11 24       	eor	r1, r1
    27a2:	ad 5e       	subi	r26, 0xED	; 237
    27a4:	bd 4e       	sbci	r27, 0xED	; 237
    27a6:	b5 87       	std	Z+13, r27	; 0x0d
    27a8:	a4 87       	std	Z+12, r26	; 0x0c
    27aa:	8c 91       	ld	r24, X
    27ac:	8f 5f       	subi	r24, 0xFF	; 255
    27ae:	8c 93       	st	X, r24
    27b0:	92 8d       	ldd	r25, Z+26	; 0x1a
    27b2:	e0 91 81 12 	lds	r30, 0x1281	; 0x801281 <pxCurrentTCB>
    27b6:	f0 91 82 12 	lds	r31, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    27ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    27bc:	89 17       	cp	r24, r25
    27be:	18 f4       	brcc	.+6      	; 0x27c6 <vTaskRemoveFromUnorderedEventList+0x12e>
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	80 93 cb 11 	sts	0x11CB, r24	; 0x8011cb <xYieldPending>
    27c6:	df 91       	pop	r29
    27c8:	cf 91       	pop	r28
    27ca:	08 95       	ret

000027cc <vTaskSetTimeOutState>:
    27cc:	0f b6       	in	r0, 0x3f	; 63
    27ce:	f8 94       	cli
    27d0:	0f 92       	push	r0
    27d2:	20 91 ca 11 	lds	r18, 0x11CA	; 0x8011ca <xNumOfOverflows>
    27d6:	fc 01       	movw	r30, r24
    27d8:	20 83       	st	Z, r18
    27da:	40 91 d2 11 	lds	r20, 0x11D2	; 0x8011d2 <xTickCount>
    27de:	50 91 d3 11 	lds	r21, 0x11D3	; 0x8011d3 <xTickCount+0x1>
    27e2:	60 91 d4 11 	lds	r22, 0x11D4	; 0x8011d4 <xTickCount+0x2>
    27e6:	70 91 d5 11 	lds	r23, 0x11D5	; 0x8011d5 <xTickCount+0x3>
    27ea:	41 83       	std	Z+1, r20	; 0x01
    27ec:	52 83       	std	Z+2, r21	; 0x02
    27ee:	63 83       	std	Z+3, r22	; 0x03
    27f0:	74 83       	std	Z+4, r23	; 0x04
    27f2:	0f 90       	pop	r0
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	08 95       	ret

000027f8 <vTaskInternalSetTimeOutState>:
    27f8:	20 91 ca 11 	lds	r18, 0x11CA	; 0x8011ca <xNumOfOverflows>
    27fc:	fc 01       	movw	r30, r24
    27fe:	20 83       	st	Z, r18
    2800:	40 91 d2 11 	lds	r20, 0x11D2	; 0x8011d2 <xTickCount>
    2804:	50 91 d3 11 	lds	r21, 0x11D3	; 0x8011d3 <xTickCount+0x1>
    2808:	60 91 d4 11 	lds	r22, 0x11D4	; 0x8011d4 <xTickCount+0x2>
    280c:	70 91 d5 11 	lds	r23, 0x11D5	; 0x8011d5 <xTickCount+0x3>
    2810:	41 83       	std	Z+1, r20	; 0x01
    2812:	52 83       	std	Z+2, r21	; 0x02
    2814:	63 83       	std	Z+3, r22	; 0x03
    2816:	74 83       	std	Z+4, r23	; 0x04
    2818:	08 95       	ret

0000281a <xTaskCheckForTimeOut>:
    281a:	8f 92       	push	r8
    281c:	9f 92       	push	r9
    281e:	af 92       	push	r10
    2820:	bf 92       	push	r11
    2822:	cf 92       	push	r12
    2824:	df 92       	push	r13
    2826:	ef 92       	push	r14
    2828:	ff 92       	push	r15
    282a:	0f 93       	push	r16
    282c:	1f 93       	push	r17
    282e:	cf 93       	push	r28
    2830:	df 93       	push	r29
    2832:	fb 01       	movw	r30, r22
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	f8 94       	cli
    2838:	0f 92       	push	r0
    283a:	c0 90 d2 11 	lds	r12, 0x11D2	; 0x8011d2 <xTickCount>
    283e:	d0 90 d3 11 	lds	r13, 0x11D3	; 0x8011d3 <xTickCount+0x1>
    2842:	e0 90 d4 11 	lds	r14, 0x11D4	; 0x8011d4 <xTickCount+0x2>
    2846:	f0 90 d5 11 	lds	r15, 0x11D5	; 0x8011d5 <xTickCount+0x3>
    284a:	dc 01       	movw	r26, r24
    284c:	11 96       	adiw	r26, 0x01	; 1
    284e:	0d 91       	ld	r16, X+
    2850:	1d 91       	ld	r17, X+
    2852:	2d 91       	ld	r18, X+
    2854:	3c 91       	ld	r19, X
    2856:	14 97       	sbiw	r26, 0x04	; 4
    2858:	46 01       	movw	r8, r12
    285a:	57 01       	movw	r10, r14
    285c:	80 1a       	sub	r8, r16
    285e:	91 0a       	sbc	r9, r17
    2860:	a2 0a       	sbc	r10, r18
    2862:	b3 0a       	sbc	r11, r19
    2864:	40 81       	ld	r20, Z
    2866:	51 81       	ldd	r21, Z+1	; 0x01
    2868:	62 81       	ldd	r22, Z+2	; 0x02
    286a:	73 81       	ldd	r23, Z+3	; 0x03
    286c:	4f 3f       	cpi	r20, 0xFF	; 255
    286e:	bf ef       	ldi	r27, 0xFF	; 255
    2870:	5b 07       	cpc	r21, r27
    2872:	6b 07       	cpc	r22, r27
    2874:	7b 07       	cpc	r23, r27
    2876:	39 f1       	breq	.+78     	; 0x28c6 <xTaskCheckForTimeOut+0xac>
    2878:	ec 01       	movw	r28, r24
    287a:	b8 81       	ld	r27, Y
    287c:	a0 91 ca 11 	lds	r26, 0x11CA	; 0x8011ca <xNumOfOverflows>
    2880:	ba 17       	cp	r27, r26
    2882:	59 f0       	breq	.+22     	; 0x289a <xTaskCheckForTimeOut+0x80>
    2884:	c0 16       	cp	r12, r16
    2886:	d1 06       	cpc	r13, r17
    2888:	e2 06       	cpc	r14, r18
    288a:	f3 06       	cpc	r15, r19
    288c:	30 f0       	brcs	.+12     	; 0x289a <xTaskCheckForTimeOut+0x80>
    288e:	10 82       	st	Z, r1
    2890:	11 82       	std	Z+1, r1	; 0x01
    2892:	12 82       	std	Z+2, r1	; 0x02
    2894:	13 82       	std	Z+3, r1	; 0x03
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	17 c0       	rjmp	.+46     	; 0x28c8 <xTaskCheckForTimeOut+0xae>
    289a:	84 16       	cp	r8, r20
    289c:	95 06       	cpc	r9, r21
    289e:	a6 06       	cpc	r10, r22
    28a0:	b7 06       	cpc	r11, r23
    28a2:	58 f4       	brcc	.+22     	; 0x28ba <xTaskCheckForTimeOut+0xa0>
    28a4:	48 19       	sub	r20, r8
    28a6:	59 09       	sbc	r21, r9
    28a8:	6a 09       	sbc	r22, r10
    28aa:	7b 09       	sbc	r23, r11
    28ac:	40 83       	st	Z, r20
    28ae:	51 83       	std	Z+1, r21	; 0x01
    28b0:	62 83       	std	Z+2, r22	; 0x02
    28b2:	73 83       	std	Z+3, r23	; 0x03
    28b4:	a1 df       	rcall	.-190    	; 0x27f8 <vTaskInternalSetTimeOutState>
    28b6:	80 e0       	ldi	r24, 0x00	; 0
    28b8:	07 c0       	rjmp	.+14     	; 0x28c8 <xTaskCheckForTimeOut+0xae>
    28ba:	10 82       	st	Z, r1
    28bc:	11 82       	std	Z+1, r1	; 0x01
    28be:	12 82       	std	Z+2, r1	; 0x02
    28c0:	13 82       	std	Z+3, r1	; 0x03
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	01 c0       	rjmp	.+2      	; 0x28c8 <xTaskCheckForTimeOut+0xae>
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	0f 90       	pop	r0
    28ca:	0f be       	out	0x3f, r0	; 63
    28cc:	df 91       	pop	r29
    28ce:	cf 91       	pop	r28
    28d0:	1f 91       	pop	r17
    28d2:	0f 91       	pop	r16
    28d4:	ff 90       	pop	r15
    28d6:	ef 90       	pop	r14
    28d8:	df 90       	pop	r13
    28da:	cf 90       	pop	r12
    28dc:	bf 90       	pop	r11
    28de:	af 90       	pop	r10
    28e0:	9f 90       	pop	r9
    28e2:	8f 90       	pop	r8
    28e4:	08 95       	ret

000028e6 <vTaskMissedYield>:
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	80 93 cb 11 	sts	0x11CB, r24	; 0x8011cb <xYieldPending>
    28ec:	08 95       	ret

000028ee <xTaskGetCurrentTaskHandle>:
    28ee:	80 91 81 12 	lds	r24, 0x1281	; 0x801281 <pxCurrentTCB>
    28f2:	90 91 82 12 	lds	r25, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    28f6:	08 95       	ret

000028f8 <xTaskGetSchedulerState>:
    28f8:	80 91 d0 11 	lds	r24, 0x11D0	; 0x8011d0 <xSchedulerRunning>
    28fc:	88 23       	and	r24, r24
    28fe:	31 f0       	breq	.+12     	; 0x290c <xTaskGetSchedulerState+0x14>
    2900:	80 91 c2 11 	lds	r24, 0x11C2	; 0x8011c2 <uxSchedulerSuspended>
    2904:	81 11       	cpse	r24, r1
    2906:	04 c0       	rjmp	.+8      	; 0x2910 <xTaskGetSchedulerState+0x18>
    2908:	82 e0       	ldi	r24, 0x02	; 2
    290a:	08 95       	ret
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	08 95       	ret
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	08 95       	ret

00002914 <xTaskPriorityDisinherit>:
    2914:	0f 93       	push	r16
    2916:	1f 93       	push	r17
    2918:	cf 93       	push	r28
    291a:	df 93       	push	r29
    291c:	fc 01       	movw	r30, r24
    291e:	89 2b       	or	r24, r25
    2920:	09 f4       	brne	.+2      	; 0x2924 <xTaskPriorityDisinherit+0x10>
    2922:	49 c0       	rjmp	.+146    	; 0x29b6 <xTaskPriorityDisinherit+0xa2>
    2924:	86 a5       	ldd	r24, Z+46	; 0x2e
    2926:	81 50       	subi	r24, 0x01	; 1
    2928:	86 a7       	std	Z+46, r24	; 0x2e
    292a:	22 8d       	ldd	r18, Z+26	; 0x1a
    292c:	95 a5       	ldd	r25, Z+45	; 0x2d
    292e:	29 17       	cp	r18, r25
    2930:	09 f4       	brne	.+2      	; 0x2934 <xTaskPriorityDisinherit+0x20>
    2932:	43 c0       	rjmp	.+134    	; 0x29ba <xTaskPriorityDisinherit+0xa6>
    2934:	81 11       	cpse	r24, r1
    2936:	43 c0       	rjmp	.+134    	; 0x29be <xTaskPriorityDisinherit+0xaa>
    2938:	ef 01       	movw	r28, r30
    293a:	8f 01       	movw	r16, r30
    293c:	0e 5f       	subi	r16, 0xFE	; 254
    293e:	1f 4f       	sbci	r17, 0xFF	; 255
    2940:	c8 01       	movw	r24, r16
    2942:	0e 94 37 05 	call	0xa6e	; 0xa6e <uxListRemove>
    2946:	ed a5       	ldd	r30, Y+45	; 0x2d
    2948:	ea 8f       	std	Y+26, r30	; 0x1a
    294a:	8a e0       	ldi	r24, 0x0A	; 10
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	a0 e0       	ldi	r26, 0x00	; 0
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	8e 1b       	sub	r24, r30
    2954:	91 09       	sbc	r25, r1
    2956:	a1 09       	sbc	r26, r1
    2958:	b1 09       	sbc	r27, r1
    295a:	8e 87       	std	Y+14, r24	; 0x0e
    295c:	9f 87       	std	Y+15, r25	; 0x0f
    295e:	a8 8b       	std	Y+16, r26	; 0x10
    2960:	b9 8b       	std	Y+17, r27	; 0x11
    2962:	80 91 d1 11 	lds	r24, 0x11D1	; 0x8011d1 <uxTopReadyPriority>
    2966:	8e 17       	cp	r24, r30
    2968:	10 f4       	brcc	.+4      	; 0x296e <xTaskPriorityDisinherit+0x5a>
    296a:	e0 93 d1 11 	sts	0x11D1, r30	; 0x8011d1 <uxTopReadyPriority>
    296e:	8b e0       	ldi	r24, 0x0B	; 11
    2970:	8e 9f       	mul	r24, r30
    2972:	f0 01       	movw	r30, r0
    2974:	11 24       	eor	r1, r1
    2976:	ed 5e       	subi	r30, 0xED	; 237
    2978:	fd 4e       	sbci	r31, 0xED	; 237
    297a:	01 80       	ldd	r0, Z+1	; 0x01
    297c:	f2 81       	ldd	r31, Z+2	; 0x02
    297e:	e0 2d       	mov	r30, r0
    2980:	ff 83       	std	Y+7, r31	; 0x07
    2982:	ee 83       	std	Y+6, r30	; 0x06
    2984:	26 81       	ldd	r18, Z+6	; 0x06
    2986:	37 81       	ldd	r19, Z+7	; 0x07
    2988:	39 87       	std	Y+9, r19	; 0x09
    298a:	28 87       	std	Y+8, r18	; 0x08
    298c:	a6 81       	ldd	r26, Z+6	; 0x06
    298e:	b7 81       	ldd	r27, Z+7	; 0x07
    2990:	15 96       	adiw	r26, 0x05	; 5
    2992:	1c 93       	st	X, r17
    2994:	0e 93       	st	-X, r16
    2996:	14 97       	sbiw	r26, 0x04	; 4
    2998:	17 83       	std	Z+7, r17	; 0x07
    299a:	06 83       	std	Z+6, r16	; 0x06
    299c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    299e:	8e 9f       	mul	r24, r30
    29a0:	f0 01       	movw	r30, r0
    29a2:	11 24       	eor	r1, r1
    29a4:	ed 5e       	subi	r30, 0xED	; 237
    29a6:	fd 4e       	sbci	r31, 0xED	; 237
    29a8:	fd 87       	std	Y+13, r31	; 0x0d
    29aa:	ec 87       	std	Y+12, r30	; 0x0c
    29ac:	80 81       	ld	r24, Z
    29ae:	8f 5f       	subi	r24, 0xFF	; 255
    29b0:	80 83       	st	Z, r24
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	05 c0       	rjmp	.+10     	; 0x29c0 <xTaskPriorityDisinherit+0xac>
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	03 c0       	rjmp	.+6      	; 0x29c0 <xTaskPriorityDisinherit+0xac>
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	01 c0       	rjmp	.+2      	; 0x29c0 <xTaskPriorityDisinherit+0xac>
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	df 91       	pop	r29
    29c2:	cf 91       	pop	r28
    29c4:	1f 91       	pop	r17
    29c6:	0f 91       	pop	r16
    29c8:	08 95       	ret

000029ca <uxTaskResetEventItemValue>:
    29ca:	cf 92       	push	r12
    29cc:	df 92       	push	r13
    29ce:	ef 92       	push	r14
    29d0:	ff 92       	push	r15
    29d2:	e0 91 81 12 	lds	r30, 0x1281	; 0x801281 <pxCurrentTCB>
    29d6:	f0 91 82 12 	lds	r31, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    29da:	66 85       	ldd	r22, Z+14	; 0x0e
    29dc:	77 85       	ldd	r23, Z+15	; 0x0f
    29de:	80 89       	ldd	r24, Z+16	; 0x10
    29e0:	91 89       	ldd	r25, Z+17	; 0x11
    29e2:	e0 91 81 12 	lds	r30, 0x1281	; 0x801281 <pxCurrentTCB>
    29e6:	f0 91 82 12 	lds	r31, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    29ea:	a0 91 81 12 	lds	r26, 0x1281	; 0x801281 <pxCurrentTCB>
    29ee:	b0 91 82 12 	lds	r27, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    29f2:	5a 96       	adiw	r26, 0x1a	; 26
    29f4:	2c 91       	ld	r18, X
    29f6:	0f 2e       	mov	r0, r31
    29f8:	fa e0       	ldi	r31, 0x0A	; 10
    29fa:	cf 2e       	mov	r12, r31
    29fc:	d1 2c       	mov	r13, r1
    29fe:	e1 2c       	mov	r14, r1
    2a00:	f1 2c       	mov	r15, r1
    2a02:	f0 2d       	mov	r31, r0
    2a04:	c2 1a       	sub	r12, r18
    2a06:	d1 08       	sbc	r13, r1
    2a08:	e1 08       	sbc	r14, r1
    2a0a:	f1 08       	sbc	r15, r1
    2a0c:	c6 86       	std	Z+14, r12	; 0x0e
    2a0e:	d7 86       	std	Z+15, r13	; 0x0f
    2a10:	e0 8a       	std	Z+16, r14	; 0x10
    2a12:	f1 8a       	std	Z+17, r15	; 0x11
    2a14:	ff 90       	pop	r15
    2a16:	ef 90       	pop	r14
    2a18:	df 90       	pop	r13
    2a1a:	cf 90       	pop	r12
    2a1c:	08 95       	ret

00002a1e <xTaskGenericNotifyWait>:
    2a1e:	4f 92       	push	r4
    2a20:	5f 92       	push	r5
    2a22:	6f 92       	push	r6
    2a24:	7f 92       	push	r7
    2a26:	af 92       	push	r10
    2a28:	bf 92       	push	r11
    2a2a:	cf 92       	push	r12
    2a2c:	df 92       	push	r13
    2a2e:	ef 92       	push	r14
    2a30:	ff 92       	push	r15
    2a32:	0f 93       	push	r16
    2a34:	1f 93       	push	r17
    2a36:	cf 93       	push	r28
    2a38:	df 93       	push	r29
    2a3a:	28 01       	movw	r4, r16
    2a3c:	39 01       	movw	r6, r18
    2a3e:	0f b6       	in	r0, 0x3f	; 63
    2a40:	f8 94       	cli
    2a42:	0f 92       	push	r0
    2a44:	e0 91 81 12 	lds	r30, 0x1281	; 0x801281 <pxCurrentTCB>
    2a48:	f0 91 82 12 	lds	r31, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    2a4c:	c8 2f       	mov	r28, r24
    2a4e:	d0 e0       	ldi	r29, 0x00	; 0
    2a50:	ec 0f       	add	r30, r28
    2a52:	fd 1f       	adc	r31, r29
    2a54:	83 a9       	ldd	r24, Z+51	; 0x33
    2a56:	82 30       	cpi	r24, 0x02	; 2
    2a58:	71 f1       	breq	.+92     	; 0x2ab6 <xTaskGenericNotifyWait+0x98>
    2a5a:	e0 91 81 12 	lds	r30, 0x1281	; 0x801281 <pxCurrentTCB>
    2a5e:	f0 91 82 12 	lds	r31, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    2a62:	ce 01       	movw	r24, r28
    2a64:	88 0f       	add	r24, r24
    2a66:	99 1f       	adc	r25, r25
    2a68:	88 0f       	add	r24, r24
    2a6a:	99 1f       	adc	r25, r25
    2a6c:	e8 0f       	add	r30, r24
    2a6e:	f9 1f       	adc	r31, r25
    2a70:	87 a5       	ldd	r24, Z+47	; 0x2f
    2a72:	90 a9       	ldd	r25, Z+48	; 0x30
    2a74:	a1 a9       	ldd	r26, Z+49	; 0x31
    2a76:	b2 a9       	ldd	r27, Z+50	; 0x32
    2a78:	40 95       	com	r20
    2a7a:	50 95       	com	r21
    2a7c:	60 95       	com	r22
    2a7e:	70 95       	com	r23
    2a80:	48 23       	and	r20, r24
    2a82:	59 23       	and	r21, r25
    2a84:	6a 23       	and	r22, r26
    2a86:	7b 23       	and	r23, r27
    2a88:	47 a7       	std	Z+47, r20	; 0x2f
    2a8a:	50 ab       	std	Z+48, r21	; 0x30
    2a8c:	61 ab       	std	Z+49, r22	; 0x31
    2a8e:	72 ab       	std	Z+50, r23	; 0x32
    2a90:	e0 91 81 12 	lds	r30, 0x1281	; 0x801281 <pxCurrentTCB>
    2a94:	f0 91 82 12 	lds	r31, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    2a98:	ec 0f       	add	r30, r28
    2a9a:	fd 1f       	adc	r31, r29
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	83 ab       	std	Z+51, r24	; 0x33
    2aa0:	a1 14       	cp	r10, r1
    2aa2:	b1 04       	cpc	r11, r1
    2aa4:	c1 04       	cpc	r12, r1
    2aa6:	d1 04       	cpc	r13, r1
    2aa8:	31 f0       	breq	.+12     	; 0x2ab6 <xTaskGenericNotifyWait+0x98>
    2aaa:	41 e0       	ldi	r20, 0x01	; 1
    2aac:	c6 01       	movw	r24, r12
    2aae:	b5 01       	movw	r22, r10
    2ab0:	7a d8       	rcall	.-3852   	; 0x1ba6 <prvAddCurrentTaskToDelayedList>
    2ab2:	0e 94 b3 05 	call	0xb66	; 0xb66 <vPortYield>
    2ab6:	0f 90       	pop	r0
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	0f b6       	in	r0, 0x3f	; 63
    2abc:	f8 94       	cli
    2abe:	0f 92       	push	r0
    2ac0:	e1 14       	cp	r14, r1
    2ac2:	f1 04       	cpc	r15, r1
    2ac4:	a1 f0       	breq	.+40     	; 0x2aee <xTaskGenericNotifyWait+0xd0>
    2ac6:	e0 91 81 12 	lds	r30, 0x1281	; 0x801281 <pxCurrentTCB>
    2aca:	f0 91 82 12 	lds	r31, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    2ace:	ce 01       	movw	r24, r28
    2ad0:	88 0f       	add	r24, r24
    2ad2:	99 1f       	adc	r25, r25
    2ad4:	88 0f       	add	r24, r24
    2ad6:	99 1f       	adc	r25, r25
    2ad8:	e8 0f       	add	r30, r24
    2ada:	f9 1f       	adc	r31, r25
    2adc:	87 a5       	ldd	r24, Z+47	; 0x2f
    2ade:	90 a9       	ldd	r25, Z+48	; 0x30
    2ae0:	a1 a9       	ldd	r26, Z+49	; 0x31
    2ae2:	b2 a9       	ldd	r27, Z+50	; 0x32
    2ae4:	f7 01       	movw	r30, r14
    2ae6:	80 83       	st	Z, r24
    2ae8:	91 83       	std	Z+1, r25	; 0x01
    2aea:	a2 83       	std	Z+2, r26	; 0x02
    2aec:	b3 83       	std	Z+3, r27	; 0x03
    2aee:	e0 91 81 12 	lds	r30, 0x1281	; 0x801281 <pxCurrentTCB>
    2af2:	f0 91 82 12 	lds	r31, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    2af6:	ec 0f       	add	r30, r28
    2af8:	fd 1f       	adc	r31, r29
    2afa:	83 a9       	ldd	r24, Z+51	; 0x33
    2afc:	82 30       	cpi	r24, 0x02	; 2
    2afe:	e9 f4       	brne	.+58     	; 0x2b3a <xTaskGenericNotifyWait+0x11c>
    2b00:	e0 91 81 12 	lds	r30, 0x1281	; 0x801281 <pxCurrentTCB>
    2b04:	f0 91 82 12 	lds	r31, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    2b08:	ce 01       	movw	r24, r28
    2b0a:	88 0f       	add	r24, r24
    2b0c:	99 1f       	adc	r25, r25
    2b0e:	88 0f       	add	r24, r24
    2b10:	99 1f       	adc	r25, r25
    2b12:	e8 0f       	add	r30, r24
    2b14:	f9 1f       	adc	r31, r25
    2b16:	87 a5       	ldd	r24, Z+47	; 0x2f
    2b18:	90 a9       	ldd	r25, Z+48	; 0x30
    2b1a:	a1 a9       	ldd	r26, Z+49	; 0x31
    2b1c:	b2 a9       	ldd	r27, Z+50	; 0x32
    2b1e:	40 94       	com	r4
    2b20:	50 94       	com	r5
    2b22:	60 94       	com	r6
    2b24:	70 94       	com	r7
    2b26:	48 22       	and	r4, r24
    2b28:	59 22       	and	r5, r25
    2b2a:	6a 22       	and	r6, r26
    2b2c:	7b 22       	and	r7, r27
    2b2e:	47 a6       	std	Z+47, r4	; 0x2f
    2b30:	50 aa       	std	Z+48, r5	; 0x30
    2b32:	61 aa       	std	Z+49, r6	; 0x31
    2b34:	72 aa       	std	Z+50, r7	; 0x32
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	01 c0       	rjmp	.+2      	; 0x2b3c <xTaskGenericNotifyWait+0x11e>
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	20 91 81 12 	lds	r18, 0x1281	; 0x801281 <pxCurrentTCB>
    2b40:	30 91 82 12 	lds	r19, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    2b44:	c2 0f       	add	r28, r18
    2b46:	d3 1f       	adc	r29, r19
    2b48:	1b aa       	std	Y+51, r1	; 0x33
    2b4a:	0f 90       	pop	r0
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	df 91       	pop	r29
    2b50:	cf 91       	pop	r28
    2b52:	1f 91       	pop	r17
    2b54:	0f 91       	pop	r16
    2b56:	ff 90       	pop	r15
    2b58:	ef 90       	pop	r14
    2b5a:	df 90       	pop	r13
    2b5c:	cf 90       	pop	r12
    2b5e:	bf 90       	pop	r11
    2b60:	af 90       	pop	r10
    2b62:	7f 90       	pop	r7
    2b64:	6f 90       	pop	r6
    2b66:	5f 90       	pop	r5
    2b68:	4f 90       	pop	r4
    2b6a:	08 95       	ret

00002b6c <xTaskGenericNotify>:
    2b6c:	8f 92       	push	r8
    2b6e:	9f 92       	push	r9
    2b70:	af 92       	push	r10
    2b72:	bf 92       	push	r11
    2b74:	ef 92       	push	r14
    2b76:	ff 92       	push	r15
    2b78:	0f 93       	push	r16
    2b7a:	cf 93       	push	r28
    2b7c:	df 93       	push	r29
    2b7e:	dc 01       	movw	r26, r24
    2b80:	0f b6       	in	r0, 0x3f	; 63
    2b82:	f8 94       	cli
    2b84:	0f 92       	push	r0
    2b86:	e1 14       	cp	r14, r1
    2b88:	f1 04       	cpc	r15, r1
    2b8a:	89 f0       	breq	.+34     	; 0x2bae <xTaskGenericNotify+0x42>
    2b8c:	e6 2f       	mov	r30, r22
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	ee 0f       	add	r30, r30
    2b92:	ff 1f       	adc	r31, r31
    2b94:	ee 0f       	add	r30, r30
    2b96:	ff 1f       	adc	r31, r31
    2b98:	e8 0f       	add	r30, r24
    2b9a:	f9 1f       	adc	r31, r25
    2b9c:	87 a4       	ldd	r8, Z+47	; 0x2f
    2b9e:	90 a8       	ldd	r9, Z+48	; 0x30
    2ba0:	a1 a8       	ldd	r10, Z+49	; 0x31
    2ba2:	b2 a8       	ldd	r11, Z+50	; 0x32
    2ba4:	f7 01       	movw	r30, r14
    2ba6:	80 82       	st	Z, r8
    2ba8:	91 82       	std	Z+1, r9	; 0x01
    2baa:	a2 82       	std	Z+2, r10	; 0x02
    2bac:	b3 82       	std	Z+3, r11	; 0x03
    2bae:	70 e0       	ldi	r23, 0x00	; 0
    2bb0:	fd 01       	movw	r30, r26
    2bb2:	e6 0f       	add	r30, r22
    2bb4:	f7 1f       	adc	r31, r23
    2bb6:	83 a9       	ldd	r24, Z+51	; 0x33
    2bb8:	92 e0       	ldi	r25, 0x02	; 2
    2bba:	93 ab       	std	Z+51, r25	; 0x33
    2bbc:	02 30       	cpi	r16, 0x02	; 2
    2bbe:	01 f1       	breq	.+64     	; 0x2c00 <xTaskGenericNotify+0x94>
    2bc0:	18 f4       	brcc	.+6      	; 0x2bc8 <xTaskGenericNotify+0x5c>
    2bc2:	01 30       	cpi	r16, 0x01	; 1
    2bc4:	31 f0       	breq	.+12     	; 0x2bd2 <xTaskGenericNotify+0x66>
    2bc6:	4d c0       	rjmp	.+154    	; 0x2c62 <xTaskGenericNotify+0xf6>
    2bc8:	03 30       	cpi	r16, 0x03	; 3
    2bca:	79 f1       	breq	.+94     	; 0x2c2a <xTaskGenericNotify+0xbe>
    2bcc:	04 30       	cpi	r16, 0x04	; 4
    2bce:	d1 f1       	breq	.+116    	; 0x2c44 <xTaskGenericNotify+0xd8>
    2bd0:	48 c0       	rjmp	.+144    	; 0x2c62 <xTaskGenericNotify+0xf6>
    2bd2:	66 0f       	add	r22, r22
    2bd4:	77 1f       	adc	r23, r23
    2bd6:	66 0f       	add	r22, r22
    2bd8:	77 1f       	adc	r23, r23
    2bda:	fd 01       	movw	r30, r26
    2bdc:	e6 0f       	add	r30, r22
    2bde:	f7 1f       	adc	r31, r23
    2be0:	87 a4       	ldd	r8, Z+47	; 0x2f
    2be2:	90 a8       	ldd	r9, Z+48	; 0x30
    2be4:	a1 a8       	ldd	r10, Z+49	; 0x31
    2be6:	b2 a8       	ldd	r11, Z+50	; 0x32
    2be8:	ba 01       	movw	r22, r20
    2bea:	a9 01       	movw	r20, r18
    2bec:	48 29       	or	r20, r8
    2bee:	59 29       	or	r21, r9
    2bf0:	6a 29       	or	r22, r10
    2bf2:	7b 29       	or	r23, r11
    2bf4:	47 a7       	std	Z+47, r20	; 0x2f
    2bf6:	50 ab       	std	Z+48, r21	; 0x30
    2bf8:	61 ab       	std	Z+49, r22	; 0x31
    2bfa:	72 ab       	std	Z+50, r23	; 0x32
    2bfc:	01 e0       	ldi	r16, 0x01	; 1
    2bfe:	34 c0       	rjmp	.+104    	; 0x2c68 <xTaskGenericNotify+0xfc>
    2c00:	66 0f       	add	r22, r22
    2c02:	77 1f       	adc	r23, r23
    2c04:	66 0f       	add	r22, r22
    2c06:	77 1f       	adc	r23, r23
    2c08:	fd 01       	movw	r30, r26
    2c0a:	e6 0f       	add	r30, r22
    2c0c:	f7 1f       	adc	r31, r23
    2c0e:	47 a5       	ldd	r20, Z+47	; 0x2f
    2c10:	50 a9       	ldd	r21, Z+48	; 0x30
    2c12:	61 a9       	ldd	r22, Z+49	; 0x31
    2c14:	72 a9       	ldd	r23, Z+50	; 0x32
    2c16:	4f 5f       	subi	r20, 0xFF	; 255
    2c18:	5f 4f       	sbci	r21, 0xFF	; 255
    2c1a:	6f 4f       	sbci	r22, 0xFF	; 255
    2c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c1e:	47 a7       	std	Z+47, r20	; 0x2f
    2c20:	50 ab       	std	Z+48, r21	; 0x30
    2c22:	61 ab       	std	Z+49, r22	; 0x31
    2c24:	72 ab       	std	Z+50, r23	; 0x32
    2c26:	01 e0       	ldi	r16, 0x01	; 1
    2c28:	1f c0       	rjmp	.+62     	; 0x2c68 <xTaskGenericNotify+0xfc>
    2c2a:	66 0f       	add	r22, r22
    2c2c:	77 1f       	adc	r23, r23
    2c2e:	66 0f       	add	r22, r22
    2c30:	77 1f       	adc	r23, r23
    2c32:	fd 01       	movw	r30, r26
    2c34:	e6 0f       	add	r30, r22
    2c36:	f7 1f       	adc	r31, r23
    2c38:	27 a7       	std	Z+47, r18	; 0x2f
    2c3a:	30 ab       	std	Z+48, r19	; 0x30
    2c3c:	41 ab       	std	Z+49, r20	; 0x31
    2c3e:	52 ab       	std	Z+50, r21	; 0x32
    2c40:	01 e0       	ldi	r16, 0x01	; 1
    2c42:	12 c0       	rjmp	.+36     	; 0x2c68 <xTaskGenericNotify+0xfc>
    2c44:	82 30       	cpi	r24, 0x02	; 2
    2c46:	79 f0       	breq	.+30     	; 0x2c66 <xTaskGenericNotify+0xfa>
    2c48:	66 0f       	add	r22, r22
    2c4a:	77 1f       	adc	r23, r23
    2c4c:	66 0f       	add	r22, r22
    2c4e:	77 1f       	adc	r23, r23
    2c50:	fd 01       	movw	r30, r26
    2c52:	e6 0f       	add	r30, r22
    2c54:	f7 1f       	adc	r31, r23
    2c56:	27 a7       	std	Z+47, r18	; 0x2f
    2c58:	30 ab       	std	Z+48, r19	; 0x30
    2c5a:	41 ab       	std	Z+49, r20	; 0x31
    2c5c:	52 ab       	std	Z+50, r21	; 0x32
    2c5e:	01 e0       	ldi	r16, 0x01	; 1
    2c60:	03 c0       	rjmp	.+6      	; 0x2c68 <xTaskGenericNotify+0xfc>
    2c62:	01 e0       	ldi	r16, 0x01	; 1
    2c64:	01 c0       	rjmp	.+2      	; 0x2c68 <xTaskGenericNotify+0xfc>
    2c66:	00 e0       	ldi	r16, 0x00	; 0
    2c68:	81 30       	cpi	r24, 0x01	; 1
    2c6a:	09 f0       	breq	.+2      	; 0x2c6e <xTaskGenericNotify+0x102>
    2c6c:	69 c0       	rjmp	.+210    	; 0x2d40 <xTaskGenericNotify+0x1d4>
    2c6e:	1c 96       	adiw	r26, 0x0c	; 12
    2c70:	ed 91       	ld	r30, X+
    2c72:	fc 91       	ld	r31, X
    2c74:	1d 97       	sbiw	r26, 0x0d	; 13
    2c76:	16 96       	adiw	r26, 0x06	; 6
    2c78:	cd 91       	ld	r28, X+
    2c7a:	dc 91       	ld	r29, X
    2c7c:	17 97       	sbiw	r26, 0x07	; 7
    2c7e:	18 96       	adiw	r26, 0x08	; 8
    2c80:	8d 91       	ld	r24, X+
    2c82:	9c 91       	ld	r25, X
    2c84:	19 97       	sbiw	r26, 0x09	; 9
    2c86:	9f 83       	std	Y+7, r25	; 0x07
    2c88:	8e 83       	std	Y+6, r24	; 0x06
    2c8a:	18 96       	adiw	r26, 0x08	; 8
    2c8c:	cd 91       	ld	r28, X+
    2c8e:	dc 91       	ld	r29, X
    2c90:	19 97       	sbiw	r26, 0x09	; 9
    2c92:	16 96       	adiw	r26, 0x06	; 6
    2c94:	8d 91       	ld	r24, X+
    2c96:	9c 91       	ld	r25, X
    2c98:	17 97       	sbiw	r26, 0x07	; 7
    2c9a:	9d 83       	std	Y+5, r25	; 0x05
    2c9c:	8c 83       	std	Y+4, r24	; 0x04
    2c9e:	81 81       	ldd	r24, Z+1	; 0x01
    2ca0:	92 81       	ldd	r25, Z+2	; 0x02
    2ca2:	9d 01       	movw	r18, r26
    2ca4:	2e 5f       	subi	r18, 0xFE	; 254
    2ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca8:	82 17       	cp	r24, r18
    2caa:	93 07       	cpc	r25, r19
    2cac:	31 f4       	brne	.+12     	; 0x2cba <xTaskGenericNotify+0x14e>
    2cae:	18 96       	adiw	r26, 0x08	; 8
    2cb0:	8d 91       	ld	r24, X+
    2cb2:	9c 91       	ld	r25, X
    2cb4:	19 97       	sbiw	r26, 0x09	; 9
    2cb6:	92 83       	std	Z+2, r25	; 0x02
    2cb8:	81 83       	std	Z+1, r24	; 0x01
    2cba:	1d 96       	adiw	r26, 0x0d	; 13
    2cbc:	1c 92       	st	X, r1
    2cbe:	1e 92       	st	-X, r1
    2cc0:	1c 97       	sbiw	r26, 0x0c	; 12
    2cc2:	80 81       	ld	r24, Z
    2cc4:	81 50       	subi	r24, 0x01	; 1
    2cc6:	80 83       	st	Z, r24
    2cc8:	5a 96       	adiw	r26, 0x1a	; 26
    2cca:	ec 91       	ld	r30, X
    2ccc:	5a 97       	sbiw	r26, 0x1a	; 26
    2cce:	80 91 d1 11 	lds	r24, 0x11D1	; 0x8011d1 <uxTopReadyPriority>
    2cd2:	8e 17       	cp	r24, r30
    2cd4:	10 f4       	brcc	.+4      	; 0x2cda <xTaskGenericNotify+0x16e>
    2cd6:	e0 93 d1 11 	sts	0x11D1, r30	; 0x8011d1 <uxTopReadyPriority>
    2cda:	8b e0       	ldi	r24, 0x0B	; 11
    2cdc:	8e 9f       	mul	r24, r30
    2cde:	f0 01       	movw	r30, r0
    2ce0:	11 24       	eor	r1, r1
    2ce2:	ed 5e       	subi	r30, 0xED	; 237
    2ce4:	fd 4e       	sbci	r31, 0xED	; 237
    2ce6:	01 80       	ldd	r0, Z+1	; 0x01
    2ce8:	f2 81       	ldd	r31, Z+2	; 0x02
    2cea:	e0 2d       	mov	r30, r0
    2cec:	17 96       	adiw	r26, 0x07	; 7
    2cee:	fc 93       	st	X, r31
    2cf0:	ee 93       	st	-X, r30
    2cf2:	16 97       	sbiw	r26, 0x06	; 6
    2cf4:	46 81       	ldd	r20, Z+6	; 0x06
    2cf6:	57 81       	ldd	r21, Z+7	; 0x07
    2cf8:	19 96       	adiw	r26, 0x09	; 9
    2cfa:	5c 93       	st	X, r21
    2cfc:	4e 93       	st	-X, r20
    2cfe:	18 97       	sbiw	r26, 0x08	; 8
    2d00:	c6 81       	ldd	r28, Z+6	; 0x06
    2d02:	d7 81       	ldd	r29, Z+7	; 0x07
    2d04:	3d 83       	std	Y+5, r19	; 0x05
    2d06:	2c 83       	std	Y+4, r18	; 0x04
    2d08:	37 83       	std	Z+7, r19	; 0x07
    2d0a:	26 83       	std	Z+6, r18	; 0x06
    2d0c:	5a 96       	adiw	r26, 0x1a	; 26
    2d0e:	ec 91       	ld	r30, X
    2d10:	5a 97       	sbiw	r26, 0x1a	; 26
    2d12:	8e 9f       	mul	r24, r30
    2d14:	f0 01       	movw	r30, r0
    2d16:	11 24       	eor	r1, r1
    2d18:	ed 5e       	subi	r30, 0xED	; 237
    2d1a:	fd 4e       	sbci	r31, 0xED	; 237
    2d1c:	1d 96       	adiw	r26, 0x0d	; 13
    2d1e:	fc 93       	st	X, r31
    2d20:	ee 93       	st	-X, r30
    2d22:	1c 97       	sbiw	r26, 0x0c	; 12
    2d24:	80 81       	ld	r24, Z
    2d26:	8f 5f       	subi	r24, 0xFF	; 255
    2d28:	80 83       	st	Z, r24
    2d2a:	5a 96       	adiw	r26, 0x1a	; 26
    2d2c:	9c 91       	ld	r25, X
    2d2e:	e0 91 81 12 	lds	r30, 0x1281	; 0x801281 <pxCurrentTCB>
    2d32:	f0 91 82 12 	lds	r31, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    2d36:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d38:	89 17       	cp	r24, r25
    2d3a:	10 f4       	brcc	.+4      	; 0x2d40 <xTaskGenericNotify+0x1d4>
    2d3c:	0e 94 b3 05 	call	0xb66	; 0xb66 <vPortYield>
    2d40:	0f 90       	pop	r0
    2d42:	0f be       	out	0x3f, r0	; 63
    2d44:	80 2f       	mov	r24, r16
    2d46:	df 91       	pop	r29
    2d48:	cf 91       	pop	r28
    2d4a:	0f 91       	pop	r16
    2d4c:	ff 90       	pop	r15
    2d4e:	ef 90       	pop	r14
    2d50:	bf 90       	pop	r11
    2d52:	af 90       	pop	r10
    2d54:	9f 90       	pop	r9
    2d56:	8f 90       	pop	r8
    2d58:	08 95       	ret

00002d5a <xTaskGenericNotifyFromISR>:
    2d5a:	8f 92       	push	r8
    2d5c:	9f 92       	push	r9
    2d5e:	af 92       	push	r10
    2d60:	bf 92       	push	r11
    2d62:	cf 92       	push	r12
    2d64:	df 92       	push	r13
    2d66:	ef 92       	push	r14
    2d68:	ff 92       	push	r15
    2d6a:	0f 93       	push	r16
    2d6c:	cf 93       	push	r28
    2d6e:	df 93       	push	r29
    2d70:	dc 01       	movw	r26, r24
    2d72:	e1 14       	cp	r14, r1
    2d74:	f1 04       	cpc	r15, r1
    2d76:	89 f0       	breq	.+34     	; 0x2d9a <xTaskGenericNotifyFromISR+0x40>
    2d78:	e6 2f       	mov	r30, r22
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	ee 0f       	add	r30, r30
    2d7e:	ff 1f       	adc	r31, r31
    2d80:	ee 0f       	add	r30, r30
    2d82:	ff 1f       	adc	r31, r31
    2d84:	e8 0f       	add	r30, r24
    2d86:	f9 1f       	adc	r31, r25
    2d88:	87 a4       	ldd	r8, Z+47	; 0x2f
    2d8a:	90 a8       	ldd	r9, Z+48	; 0x30
    2d8c:	a1 a8       	ldd	r10, Z+49	; 0x31
    2d8e:	b2 a8       	ldd	r11, Z+50	; 0x32
    2d90:	f7 01       	movw	r30, r14
    2d92:	80 82       	st	Z, r8
    2d94:	91 82       	std	Z+1, r9	; 0x01
    2d96:	a2 82       	std	Z+2, r10	; 0x02
    2d98:	b3 82       	std	Z+3, r11	; 0x03
    2d9a:	70 e0       	ldi	r23, 0x00	; 0
    2d9c:	fd 01       	movw	r30, r26
    2d9e:	e6 0f       	add	r30, r22
    2da0:	f7 1f       	adc	r31, r23
    2da2:	93 a9       	ldd	r25, Z+51	; 0x33
    2da4:	82 e0       	ldi	r24, 0x02	; 2
    2da6:	83 ab       	std	Z+51, r24	; 0x33
    2da8:	02 30       	cpi	r16, 0x02	; 2
    2daa:	01 f1       	breq	.+64     	; 0x2dec <xTaskGenericNotifyFromISR+0x92>
    2dac:	18 f4       	brcc	.+6      	; 0x2db4 <xTaskGenericNotifyFromISR+0x5a>
    2dae:	01 30       	cpi	r16, 0x01	; 1
    2db0:	31 f0       	breq	.+12     	; 0x2dbe <xTaskGenericNotifyFromISR+0x64>
    2db2:	4d c0       	rjmp	.+154    	; 0x2e4e <xTaskGenericNotifyFromISR+0xf4>
    2db4:	03 30       	cpi	r16, 0x03	; 3
    2db6:	79 f1       	breq	.+94     	; 0x2e16 <xTaskGenericNotifyFromISR+0xbc>
    2db8:	04 30       	cpi	r16, 0x04	; 4
    2dba:	d1 f1       	breq	.+116    	; 0x2e30 <xTaskGenericNotifyFromISR+0xd6>
    2dbc:	48 c0       	rjmp	.+144    	; 0x2e4e <xTaskGenericNotifyFromISR+0xf4>
    2dbe:	66 0f       	add	r22, r22
    2dc0:	77 1f       	adc	r23, r23
    2dc2:	66 0f       	add	r22, r22
    2dc4:	77 1f       	adc	r23, r23
    2dc6:	fd 01       	movw	r30, r26
    2dc8:	e6 0f       	add	r30, r22
    2dca:	f7 1f       	adc	r31, r23
    2dcc:	87 a4       	ldd	r8, Z+47	; 0x2f
    2dce:	90 a8       	ldd	r9, Z+48	; 0x30
    2dd0:	a1 a8       	ldd	r10, Z+49	; 0x31
    2dd2:	b2 a8       	ldd	r11, Z+50	; 0x32
    2dd4:	ba 01       	movw	r22, r20
    2dd6:	a9 01       	movw	r20, r18
    2dd8:	48 29       	or	r20, r8
    2dda:	59 29       	or	r21, r9
    2ddc:	6a 29       	or	r22, r10
    2dde:	7b 29       	or	r23, r11
    2de0:	47 a7       	std	Z+47, r20	; 0x2f
    2de2:	50 ab       	std	Z+48, r21	; 0x30
    2de4:	61 ab       	std	Z+49, r22	; 0x31
    2de6:	72 ab       	std	Z+50, r23	; 0x32
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	34 c0       	rjmp	.+104    	; 0x2e54 <xTaskGenericNotifyFromISR+0xfa>
    2dec:	66 0f       	add	r22, r22
    2dee:	77 1f       	adc	r23, r23
    2df0:	66 0f       	add	r22, r22
    2df2:	77 1f       	adc	r23, r23
    2df4:	fd 01       	movw	r30, r26
    2df6:	e6 0f       	add	r30, r22
    2df8:	f7 1f       	adc	r31, r23
    2dfa:	47 a5       	ldd	r20, Z+47	; 0x2f
    2dfc:	50 a9       	ldd	r21, Z+48	; 0x30
    2dfe:	61 a9       	ldd	r22, Z+49	; 0x31
    2e00:	72 a9       	ldd	r23, Z+50	; 0x32
    2e02:	4f 5f       	subi	r20, 0xFF	; 255
    2e04:	5f 4f       	sbci	r21, 0xFF	; 255
    2e06:	6f 4f       	sbci	r22, 0xFF	; 255
    2e08:	7f 4f       	sbci	r23, 0xFF	; 255
    2e0a:	47 a7       	std	Z+47, r20	; 0x2f
    2e0c:	50 ab       	std	Z+48, r21	; 0x30
    2e0e:	61 ab       	std	Z+49, r22	; 0x31
    2e10:	72 ab       	std	Z+50, r23	; 0x32
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	1f c0       	rjmp	.+62     	; 0x2e54 <xTaskGenericNotifyFromISR+0xfa>
    2e16:	66 0f       	add	r22, r22
    2e18:	77 1f       	adc	r23, r23
    2e1a:	66 0f       	add	r22, r22
    2e1c:	77 1f       	adc	r23, r23
    2e1e:	fd 01       	movw	r30, r26
    2e20:	e6 0f       	add	r30, r22
    2e22:	f7 1f       	adc	r31, r23
    2e24:	27 a7       	std	Z+47, r18	; 0x2f
    2e26:	30 ab       	std	Z+48, r19	; 0x30
    2e28:	41 ab       	std	Z+49, r20	; 0x31
    2e2a:	52 ab       	std	Z+50, r21	; 0x32
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
    2e2e:	12 c0       	rjmp	.+36     	; 0x2e54 <xTaskGenericNotifyFromISR+0xfa>
    2e30:	92 30       	cpi	r25, 0x02	; 2
    2e32:	79 f0       	breq	.+30     	; 0x2e52 <xTaskGenericNotifyFromISR+0xf8>
    2e34:	66 0f       	add	r22, r22
    2e36:	77 1f       	adc	r23, r23
    2e38:	66 0f       	add	r22, r22
    2e3a:	77 1f       	adc	r23, r23
    2e3c:	fd 01       	movw	r30, r26
    2e3e:	e6 0f       	add	r30, r22
    2e40:	f7 1f       	adc	r31, r23
    2e42:	27 a7       	std	Z+47, r18	; 0x2f
    2e44:	30 ab       	std	Z+48, r19	; 0x30
    2e46:	41 ab       	std	Z+49, r20	; 0x31
    2e48:	52 ab       	std	Z+50, r21	; 0x32
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	03 c0       	rjmp	.+6      	; 0x2e54 <xTaskGenericNotifyFromISR+0xfa>
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	01 c0       	rjmp	.+2      	; 0x2e54 <xTaskGenericNotifyFromISR+0xfa>
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	91 30       	cpi	r25, 0x01	; 1
    2e56:	09 f0       	breq	.+2      	; 0x2e5a <xTaskGenericNotifyFromISR+0x100>
    2e58:	96 c0       	rjmp	.+300    	; 0x2f86 <xTaskGenericNotifyFromISR+0x22c>
    2e5a:	90 91 c2 11 	lds	r25, 0x11C2	; 0x8011c2 <uxSchedulerSuspended>
    2e5e:	91 11       	cpse	r25, r1
    2e60:	5f c0       	rjmp	.+190    	; 0x2f20 <xTaskGenericNotifyFromISR+0x1c6>
    2e62:	1c 96       	adiw	r26, 0x0c	; 12
    2e64:	ed 91       	ld	r30, X+
    2e66:	fc 91       	ld	r31, X
    2e68:	1d 97       	sbiw	r26, 0x0d	; 13
    2e6a:	16 96       	adiw	r26, 0x06	; 6
    2e6c:	cd 91       	ld	r28, X+
    2e6e:	dc 91       	ld	r29, X
    2e70:	17 97       	sbiw	r26, 0x07	; 7
    2e72:	18 96       	adiw	r26, 0x08	; 8
    2e74:	2d 91       	ld	r18, X+
    2e76:	3c 91       	ld	r19, X
    2e78:	19 97       	sbiw	r26, 0x09	; 9
    2e7a:	3f 83       	std	Y+7, r19	; 0x07
    2e7c:	2e 83       	std	Y+6, r18	; 0x06
    2e7e:	18 96       	adiw	r26, 0x08	; 8
    2e80:	cd 91       	ld	r28, X+
    2e82:	dc 91       	ld	r29, X
    2e84:	19 97       	sbiw	r26, 0x09	; 9
    2e86:	16 96       	adiw	r26, 0x06	; 6
    2e88:	2d 91       	ld	r18, X+
    2e8a:	3c 91       	ld	r19, X
    2e8c:	17 97       	sbiw	r26, 0x07	; 7
    2e8e:	3d 83       	std	Y+5, r19	; 0x05
    2e90:	2c 83       	std	Y+4, r18	; 0x04
    2e92:	41 81       	ldd	r20, Z+1	; 0x01
    2e94:	52 81       	ldd	r21, Z+2	; 0x02
    2e96:	9d 01       	movw	r18, r26
    2e98:	2e 5f       	subi	r18, 0xFE	; 254
    2e9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e9c:	42 17       	cp	r20, r18
    2e9e:	53 07       	cpc	r21, r19
    2ea0:	31 f4       	brne	.+12     	; 0x2eae <xTaskGenericNotifyFromISR+0x154>
    2ea2:	18 96       	adiw	r26, 0x08	; 8
    2ea4:	4d 91       	ld	r20, X+
    2ea6:	5c 91       	ld	r21, X
    2ea8:	19 97       	sbiw	r26, 0x09	; 9
    2eaa:	52 83       	std	Z+2, r21	; 0x02
    2eac:	41 83       	std	Z+1, r20	; 0x01
    2eae:	1d 96       	adiw	r26, 0x0d	; 13
    2eb0:	1c 92       	st	X, r1
    2eb2:	1e 92       	st	-X, r1
    2eb4:	1c 97       	sbiw	r26, 0x0c	; 12
    2eb6:	90 81       	ld	r25, Z
    2eb8:	91 50       	subi	r25, 0x01	; 1
    2eba:	90 83       	st	Z, r25
    2ebc:	5a 96       	adiw	r26, 0x1a	; 26
    2ebe:	ec 91       	ld	r30, X
    2ec0:	5a 97       	sbiw	r26, 0x1a	; 26
    2ec2:	90 91 d1 11 	lds	r25, 0x11D1	; 0x8011d1 <uxTopReadyPriority>
    2ec6:	9e 17       	cp	r25, r30
    2ec8:	10 f4       	brcc	.+4      	; 0x2ece <xTaskGenericNotifyFromISR+0x174>
    2eca:	e0 93 d1 11 	sts	0x11D1, r30	; 0x8011d1 <uxTopReadyPriority>
    2ece:	9b e0       	ldi	r25, 0x0B	; 11
    2ed0:	9e 9f       	mul	r25, r30
    2ed2:	f0 01       	movw	r30, r0
    2ed4:	11 24       	eor	r1, r1
    2ed6:	ed 5e       	subi	r30, 0xED	; 237
    2ed8:	fd 4e       	sbci	r31, 0xED	; 237
    2eda:	01 80       	ldd	r0, Z+1	; 0x01
    2edc:	f2 81       	ldd	r31, Z+2	; 0x02
    2ede:	e0 2d       	mov	r30, r0
    2ee0:	17 96       	adiw	r26, 0x07	; 7
    2ee2:	fc 93       	st	X, r31
    2ee4:	ee 93       	st	-X, r30
    2ee6:	16 97       	sbiw	r26, 0x06	; 6
    2ee8:	46 81       	ldd	r20, Z+6	; 0x06
    2eea:	57 81       	ldd	r21, Z+7	; 0x07
    2eec:	19 96       	adiw	r26, 0x09	; 9
    2eee:	5c 93       	st	X, r21
    2ef0:	4e 93       	st	-X, r20
    2ef2:	18 97       	sbiw	r26, 0x08	; 8
    2ef4:	c6 81       	ldd	r28, Z+6	; 0x06
    2ef6:	d7 81       	ldd	r29, Z+7	; 0x07
    2ef8:	3d 83       	std	Y+5, r19	; 0x05
    2efa:	2c 83       	std	Y+4, r18	; 0x04
    2efc:	37 83       	std	Z+7, r19	; 0x07
    2efe:	26 83       	std	Z+6, r18	; 0x06
    2f00:	5a 96       	adiw	r26, 0x1a	; 26
    2f02:	ec 91       	ld	r30, X
    2f04:	5a 97       	sbiw	r26, 0x1a	; 26
    2f06:	9e 9f       	mul	r25, r30
    2f08:	f0 01       	movw	r30, r0
    2f0a:	11 24       	eor	r1, r1
    2f0c:	ed 5e       	subi	r30, 0xED	; 237
    2f0e:	fd 4e       	sbci	r31, 0xED	; 237
    2f10:	1d 96       	adiw	r26, 0x0d	; 13
    2f12:	fc 93       	st	X, r31
    2f14:	ee 93       	st	-X, r30
    2f16:	1c 97       	sbiw	r26, 0x0c	; 12
    2f18:	90 81       	ld	r25, Z
    2f1a:	9f 5f       	subi	r25, 0xFF	; 255
    2f1c:	90 83       	st	Z, r25
    2f1e:	21 c0       	rjmp	.+66     	; 0x2f62 <xTaskGenericNotifyFromISR+0x208>
    2f20:	6e ee       	ldi	r22, 0xEE	; 238
    2f22:	71 e1       	ldi	r23, 0x11	; 17
    2f24:	fb 01       	movw	r30, r22
    2f26:	c1 81       	ldd	r28, Z+1	; 0x01
    2f28:	d2 81       	ldd	r29, Z+2	; 0x02
    2f2a:	53 96       	adiw	r26, 0x13	; 19
    2f2c:	dc 93       	st	X, r29
    2f2e:	ce 93       	st	-X, r28
    2f30:	52 97       	sbiw	r26, 0x12	; 18
    2f32:	2e 81       	ldd	r18, Y+6	; 0x06
    2f34:	3f 81       	ldd	r19, Y+7	; 0x07
    2f36:	55 96       	adiw	r26, 0x15	; 21
    2f38:	3c 93       	st	X, r19
    2f3a:	2e 93       	st	-X, r18
    2f3c:	54 97       	sbiw	r26, 0x14	; 20
    2f3e:	4e 81       	ldd	r20, Y+6	; 0x06
    2f40:	5f 81       	ldd	r21, Y+7	; 0x07
    2f42:	9d 01       	movw	r18, r26
    2f44:	22 5f       	subi	r18, 0xF2	; 242
    2f46:	3f 4f       	sbci	r19, 0xFF	; 255
    2f48:	fa 01       	movw	r30, r20
    2f4a:	35 83       	std	Z+5, r19	; 0x05
    2f4c:	24 83       	std	Z+4, r18	; 0x04
    2f4e:	3f 83       	std	Y+7, r19	; 0x07
    2f50:	2e 83       	std	Y+6, r18	; 0x06
    2f52:	59 96       	adiw	r26, 0x19	; 25
    2f54:	7c 93       	st	X, r23
    2f56:	6e 93       	st	-X, r22
    2f58:	58 97       	sbiw	r26, 0x18	; 24
    2f5a:	fb 01       	movw	r30, r22
    2f5c:	90 81       	ld	r25, Z
    2f5e:	9f 5f       	subi	r25, 0xFF	; 255
    2f60:	90 83       	st	Z, r25
    2f62:	5a 96       	adiw	r26, 0x1a	; 26
    2f64:	2c 91       	ld	r18, X
    2f66:	e0 91 81 12 	lds	r30, 0x1281	; 0x801281 <pxCurrentTCB>
    2f6a:	f0 91 82 12 	lds	r31, 0x1282	; 0x801282 <pxCurrentTCB+0x1>
    2f6e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2f70:	92 17       	cp	r25, r18
    2f72:	48 f4       	brcc	.+18     	; 0x2f86 <xTaskGenericNotifyFromISR+0x22c>
    2f74:	c1 14       	cp	r12, r1
    2f76:	d1 04       	cpc	r13, r1
    2f78:	19 f0       	breq	.+6      	; 0x2f80 <xTaskGenericNotifyFromISR+0x226>
    2f7a:	91 e0       	ldi	r25, 0x01	; 1
    2f7c:	f6 01       	movw	r30, r12
    2f7e:	90 83       	st	Z, r25
    2f80:	91 e0       	ldi	r25, 0x01	; 1
    2f82:	90 93 cb 11 	sts	0x11CB, r25	; 0x8011cb <xYieldPending>
    2f86:	df 91       	pop	r29
    2f88:	cf 91       	pop	r28
    2f8a:	0f 91       	pop	r16
    2f8c:	ff 90       	pop	r15
    2f8e:	ef 90       	pop	r14
    2f90:	df 90       	pop	r13
    2f92:	cf 90       	pop	r12
    2f94:	bf 90       	pop	r11
    2f96:	af 90       	pop	r10
    2f98:	9f 90       	pop	r9
    2f9a:	8f 90       	pop	r8
    2f9c:	08 95       	ret

00002f9e <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2f9e:	00 97       	sbiw	r24, 0x00	; 0
    2fa0:	21 f4       	brne	.+8      	; 0x2faa <xTaskGenericNotifyStateClear+0xc>
    2fa2:	80 91 81 12 	lds	r24, 0x1281	; 0x801281 <pxCurrentTCB>
    2fa6:	90 91 82 12 	lds	r25, 0x1282	; 0x801282 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2faa:	0f b6       	in	r0, 0x3f	; 63
    2fac:	f8 94       	cli
    2fae:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2fb0:	70 e0       	ldi	r23, 0x00	; 0
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	e6 0f       	add	r30, r22
    2fb6:	f7 1f       	adc	r31, r23
    2fb8:	23 a9       	ldd	r18, Z+51	; 0x33
    2fba:	22 30       	cpi	r18, 0x02	; 2
    2fbc:	31 f4       	brne	.+12     	; 0x2fca <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2fbe:	fc 01       	movw	r30, r24
    2fc0:	e6 0f       	add	r30, r22
    2fc2:	f7 1f       	adc	r31, r23
    2fc4:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	01 c0       	rjmp	.+2      	; 0x2fcc <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2fca:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2fcc:	0f 90       	pop	r0
    2fce:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2fd0:	08 95       	ret

00002fd2 <prvGetNextExpireTime>:
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	e0 91 8d 12 	lds	r30, 0x128D	; 0x80128d <pxCurrentTimerList>
    2fd8:	f0 91 8e 12 	lds	r31, 0x128E	; 0x80128e <pxCurrentTimerList+0x1>
    2fdc:	80 81       	ld	r24, Z
    2fde:	91 e0       	ldi	r25, 0x01	; 1
    2fe0:	81 11       	cpse	r24, r1
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	9c 93       	st	X, r25
    2fe6:	91 11       	cpse	r25, r1
    2fe8:	08 c0       	rjmp	.+16     	; 0x2ffa <prvGetNextExpireTime+0x28>
    2fea:	07 80       	ldd	r0, Z+7	; 0x07
    2fec:	f0 85       	ldd	r31, Z+8	; 0x08
    2fee:	e0 2d       	mov	r30, r0
    2ff0:	60 81       	ld	r22, Z
    2ff2:	71 81       	ldd	r23, Z+1	; 0x01
    2ff4:	82 81       	ldd	r24, Z+2	; 0x02
    2ff6:	93 81       	ldd	r25, Z+3	; 0x03
    2ff8:	08 95       	ret
    2ffa:	60 e0       	ldi	r22, 0x00	; 0
    2ffc:	70 e0       	ldi	r23, 0x00	; 0
    2ffe:	cb 01       	movw	r24, r22
    3000:	08 95       	ret

00003002 <prvInsertTimerInActiveList>:
    3002:	cf 92       	push	r12
    3004:	df 92       	push	r13
    3006:	ef 92       	push	r14
    3008:	ff 92       	push	r15
    300a:	0f 93       	push	r16
    300c:	1f 93       	push	r17
    300e:	fc 01       	movw	r30, r24
    3010:	42 83       	std	Z+2, r20	; 0x02
    3012:	53 83       	std	Z+3, r21	; 0x03
    3014:	64 83       	std	Z+4, r22	; 0x04
    3016:	75 83       	std	Z+5, r23	; 0x05
    3018:	93 87       	std	Z+11, r25	; 0x0b
    301a:	82 87       	std	Z+10, r24	; 0x0a
    301c:	04 17       	cp	r16, r20
    301e:	15 07       	cpc	r17, r21
    3020:	26 07       	cpc	r18, r22
    3022:	37 07       	cpc	r19, r23
    3024:	c0 f0       	brcs	.+48     	; 0x3056 <prvInsertTimerInActiveList+0x54>
    3026:	0c 19       	sub	r16, r12
    3028:	1d 09       	sbc	r17, r13
    302a:	2e 09       	sbc	r18, r14
    302c:	3f 09       	sbc	r19, r15
    302e:	86 85       	ldd	r24, Z+14	; 0x0e
    3030:	97 85       	ldd	r25, Z+15	; 0x0f
    3032:	a0 89       	ldd	r26, Z+16	; 0x10
    3034:	b1 89       	ldd	r27, Z+17	; 0x11
    3036:	08 17       	cp	r16, r24
    3038:	19 07       	cpc	r17, r25
    303a:	2a 07       	cpc	r18, r26
    303c:	3b 07       	cpc	r19, r27
    303e:	00 f5       	brcc	.+64     	; 0x3080 <prvInsertTimerInActiveList+0x7e>
    3040:	bf 01       	movw	r22, r30
    3042:	6e 5f       	subi	r22, 0xFE	; 254
    3044:	7f 4f       	sbci	r23, 0xFF	; 255
    3046:	80 91 8b 12 	lds	r24, 0x128B	; 0x80128b <pxOverflowTimerList>
    304a:	90 91 8c 12 	lds	r25, 0x128C	; 0x80128c <pxOverflowTimerList+0x1>
    304e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <vListInsert>
    3052:	80 e0       	ldi	r24, 0x00	; 0
    3054:	18 c0       	rjmp	.+48     	; 0x3086 <prvInsertTimerInActiveList+0x84>
    3056:	0c 15       	cp	r16, r12
    3058:	1d 05       	cpc	r17, r13
    305a:	2e 05       	cpc	r18, r14
    305c:	3f 05       	cpc	r19, r15
    305e:	28 f4       	brcc	.+10     	; 0x306a <prvInsertTimerInActiveList+0x68>
    3060:	4c 15       	cp	r20, r12
    3062:	5d 05       	cpc	r21, r13
    3064:	6e 05       	cpc	r22, r14
    3066:	7f 05       	cpc	r23, r15
    3068:	68 f4       	brcc	.+26     	; 0x3084 <prvInsertTimerInActiveList+0x82>
    306a:	bf 01       	movw	r22, r30
    306c:	6e 5f       	subi	r22, 0xFE	; 254
    306e:	7f 4f       	sbci	r23, 0xFF	; 255
    3070:	80 91 8d 12 	lds	r24, 0x128D	; 0x80128d <pxCurrentTimerList>
    3074:	90 91 8e 12 	lds	r25, 0x128E	; 0x80128e <pxCurrentTimerList+0x1>
    3078:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <vListInsert>
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	03 c0       	rjmp	.+6      	; 0x3086 <prvInsertTimerInActiveList+0x84>
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	01 c0       	rjmp	.+2      	; 0x3086 <prvInsertTimerInActiveList+0x84>
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	1f 91       	pop	r17
    3088:	0f 91       	pop	r16
    308a:	ff 90       	pop	r15
    308c:	ef 90       	pop	r14
    308e:	df 90       	pop	r13
    3090:	cf 90       	pop	r12
    3092:	08 95       	ret

00003094 <prvCheckForValidListAndQueue>:
    3094:	0f b6       	in	r0, 0x3f	; 63
    3096:	f8 94       	cli
    3098:	0f 92       	push	r0
    309a:	80 91 89 12 	lds	r24, 0x1289	; 0x801289 <xTimerQueue>
    309e:	90 91 8a 12 	lds	r25, 0x128A	; 0x80128a <xTimerQueue+0x1>
    30a2:	89 2b       	or	r24, r25
    30a4:	e9 f4       	brne	.+58     	; 0x30e0 <prvCheckForValidListAndQueue+0x4c>
    30a6:	8a e9       	ldi	r24, 0x9A	; 154
    30a8:	92 e1       	ldi	r25, 0x12	; 18
    30aa:	0e 94 e5 04 	call	0x9ca	; 0x9ca <vListInitialise>
    30ae:	8f e8       	ldi	r24, 0x8F	; 143
    30b0:	92 e1       	ldi	r25, 0x12	; 18
    30b2:	0e 94 e5 04 	call	0x9ca	; 0x9ca <vListInitialise>
    30b6:	8a e9       	ldi	r24, 0x9A	; 154
    30b8:	92 e1       	ldi	r25, 0x12	; 18
    30ba:	90 93 8e 12 	sts	0x128E, r25	; 0x80128e <pxCurrentTimerList+0x1>
    30be:	80 93 8d 12 	sts	0x128D, r24	; 0x80128d <pxCurrentTimerList>
    30c2:	8f e8       	ldi	r24, 0x8F	; 143
    30c4:	92 e1       	ldi	r25, 0x12	; 18
    30c6:	90 93 8c 12 	sts	0x128C, r25	; 0x80128c <pxOverflowTimerList+0x1>
    30ca:	80 93 8b 12 	sts	0x128B, r24	; 0x80128b <pxOverflowTimerList>
    30ce:	40 e0       	ldi	r20, 0x00	; 0
    30d0:	67 e0       	ldi	r22, 0x07	; 7
    30d2:	8a e0       	ldi	r24, 0x0A	; 10
    30d4:	0e 94 98 07 	call	0xf30	; 0xf30 <xQueueGenericCreate>
    30d8:	90 93 8a 12 	sts	0x128A, r25	; 0x80128a <xTimerQueue+0x1>
    30dc:	80 93 89 12 	sts	0x1289, r24	; 0x801289 <xTimerQueue>
    30e0:	0f 90       	pop	r0
    30e2:	0f be       	out	0x3f, r0	; 63
    30e4:	08 95       	ret

000030e6 <xTimerCreateTimerTask>:
    30e6:	ef 92       	push	r14
    30e8:	ff 92       	push	r15
    30ea:	0f 93       	push	r16
    30ec:	d3 df       	rcall	.-90     	; 0x3094 <prvCheckForValidListAndQueue>
    30ee:	80 91 89 12 	lds	r24, 0x1289	; 0x801289 <xTimerQueue>
    30f2:	90 91 8a 12 	lds	r25, 0x128A	; 0x80128a <xTimerQueue+0x1>
    30f6:	89 2b       	or	r24, r25
    30f8:	91 f0       	breq	.+36     	; 0x311e <xTimerCreateTimerTask+0x38>
    30fa:	0f 2e       	mov	r0, r31
    30fc:	f7 e8       	ldi	r31, 0x87	; 135
    30fe:	ef 2e       	mov	r14, r31
    3100:	f2 e1       	ldi	r31, 0x12	; 18
    3102:	ff 2e       	mov	r15, r31
    3104:	f0 2d       	mov	r31, r0
    3106:	03 e0       	ldi	r16, 0x03	; 3
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	40 ec       	ldi	r20, 0xC0	; 192
    310e:	50 e0       	ldi	r21, 0x00	; 0
    3110:	6a ef       	ldi	r22, 0xFA	; 250
    3112:	72 e0       	ldi	r23, 0x02	; 2
    3114:	87 ed       	ldi	r24, 0xD7	; 215
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	0e 94 75 0e 	call	0x1cea	; 0x1cea <xTaskCreate>
    311c:	01 c0       	rjmp	.+2      	; 0x3120 <xTimerCreateTimerTask+0x3a>
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	0f 91       	pop	r16
    3122:	ff 90       	pop	r15
    3124:	ef 90       	pop	r14
    3126:	08 95       	ret

00003128 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3128:	8f 92       	push	r8
    312a:	9f 92       	push	r9
    312c:	af 92       	push	r10
    312e:	bf 92       	push	r11
    3130:	cf 92       	push	r12
    3132:	df 92       	push	r13
    3134:	ef 92       	push	r14
    3136:	ff 92       	push	r15
    3138:	0f 93       	push	r16
    313a:	1f 93       	push	r17
    313c:	cf 93       	push	r28
    313e:	df 93       	push	r29
    3140:	cd b7       	in	r28, 0x3d	; 61
    3142:	de b7       	in	r29, 0x3e	; 62
    3144:	27 97       	sbiw	r28, 0x07	; 7
    3146:	0f b6       	in	r0, 0x3f	; 63
    3148:	f8 94       	cli
    314a:	de bf       	out	0x3e, r29	; 62
    314c:	0f be       	out	0x3f, r0	; 63
    314e:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3150:	e0 91 89 12 	lds	r30, 0x1289	; 0x801289 <xTimerQueue>
    3154:	f0 91 8a 12 	lds	r31, 0x128A	; 0x80128a <xTimerQueue+0x1>
    3158:	30 97       	sbiw	r30, 0x00	; 0
    315a:	81 f1       	breq	.+96     	; 0x31bc <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    315c:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    315e:	2a 83       	std	Y+2, r18	; 0x02
    3160:	3b 83       	std	Y+3, r19	; 0x03
    3162:	4c 83       	std	Y+4, r20	; 0x04
    3164:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3166:	9f 83       	std	Y+7, r25	; 0x07
    3168:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    316a:	66 30       	cpi	r22, 0x06	; 6
    316c:	f4 f4       	brge	.+60     	; 0x31aa <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    316e:	c4 db       	rcall	.-2168   	; 0x28f8 <xTaskGetSchedulerState>
    3170:	82 30       	cpi	r24, 0x02	; 2
    3172:	69 f4       	brne	.+26     	; 0x318e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3174:	00 e0       	ldi	r16, 0x00	; 0
    3176:	a7 01       	movw	r20, r14
    3178:	96 01       	movw	r18, r12
    317a:	be 01       	movw	r22, r28
    317c:	6f 5f       	subi	r22, 0xFF	; 255
    317e:	7f 4f       	sbci	r23, 0xFF	; 255
    3180:	80 91 89 12 	lds	r24, 0x1289	; 0x801289 <xTimerQueue>
    3184:	90 91 8a 12 	lds	r25, 0x128A	; 0x80128a <xTimerQueue+0x1>
    3188:	0e 94 bb 07 	call	0xf76	; 0xf76 <xQueueGenericSend>
    318c:	18 c0       	rjmp	.+48     	; 0x31be <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    318e:	00 e0       	ldi	r16, 0x00	; 0
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	a9 01       	movw	r20, r18
    3196:	be 01       	movw	r22, r28
    3198:	6f 5f       	subi	r22, 0xFF	; 255
    319a:	7f 4f       	sbci	r23, 0xFF	; 255
    319c:	80 91 89 12 	lds	r24, 0x1289	; 0x801289 <xTimerQueue>
    31a0:	90 91 8a 12 	lds	r25, 0x128A	; 0x80128a <xTimerQueue+0x1>
    31a4:	0e 94 bb 07 	call	0xf76	; 0xf76 <xQueueGenericSend>
    31a8:	0a c0       	rjmp	.+20     	; 0x31be <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	a8 01       	movw	r20, r16
    31ae:	be 01       	movw	r22, r28
    31b0:	6f 5f       	subi	r22, 0xFF	; 255
    31b2:	7f 4f       	sbci	r23, 0xFF	; 255
    31b4:	cf 01       	movw	r24, r30
    31b6:	0e 94 4c 08 	call	0x1098	; 0x1098 <xQueueGenericSendFromISR>
    31ba:	01 c0       	rjmp	.+2      	; 0x31be <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    31bc:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    31be:	27 96       	adiw	r28, 0x07	; 7
    31c0:	0f b6       	in	r0, 0x3f	; 63
    31c2:	f8 94       	cli
    31c4:	de bf       	out	0x3e, r29	; 62
    31c6:	0f be       	out	0x3f, r0	; 63
    31c8:	cd bf       	out	0x3d, r28	; 61
    31ca:	df 91       	pop	r29
    31cc:	cf 91       	pop	r28
    31ce:	1f 91       	pop	r17
    31d0:	0f 91       	pop	r16
    31d2:	ff 90       	pop	r15
    31d4:	ef 90       	pop	r14
    31d6:	df 90       	pop	r13
    31d8:	cf 90       	pop	r12
    31da:	bf 90       	pop	r11
    31dc:	af 90       	pop	r10
    31de:	9f 90       	pop	r9
    31e0:	8f 90       	pop	r8
    31e2:	08 95       	ret

000031e4 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    31e4:	8f 92       	push	r8
    31e6:	9f 92       	push	r9
    31e8:	af 92       	push	r10
    31ea:	bf 92       	push	r11
    31ec:	cf 92       	push	r12
    31ee:	df 92       	push	r13
    31f0:	ef 92       	push	r14
    31f2:	ff 92       	push	r15
    31f4:	0f 93       	push	r16
    31f6:	1f 93       	push	r17
    31f8:	cf 93       	push	r28
    31fa:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    31fc:	3b c0       	rjmp	.+118    	; 0x3274 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    31fe:	07 80       	ldd	r0, Z+7	; 0x07
    3200:	f0 85       	ldd	r31, Z+8	; 0x08
    3202:	e0 2d       	mov	r30, r0
    3204:	80 80       	ld	r8, Z
    3206:	91 80       	ldd	r9, Z+1	; 0x01
    3208:	a2 80       	ldd	r10, Z+2	; 0x02
    320a:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    320c:	c0 85       	ldd	r28, Z+8	; 0x08
    320e:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3210:	8e 01       	movw	r16, r28
    3212:	0e 5f       	subi	r16, 0xFE	; 254
    3214:	1f 4f       	sbci	r17, 0xFF	; 255
    3216:	c8 01       	movw	r24, r16
    3218:	0e 94 37 05 	call	0xa6e	; 0xa6e <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    321c:	ec 89       	ldd	r30, Y+20	; 0x14
    321e:	fd 89       	ldd	r31, Y+21	; 0x15
    3220:	ce 01       	movw	r24, r28
    3222:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3224:	8e 89       	ldd	r24, Y+22	; 0x16
    3226:	82 ff       	sbrs	r24, 2
    3228:	25 c0       	rjmp	.+74     	; 0x3274 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    322a:	8e 85       	ldd	r24, Y+14	; 0x0e
    322c:	9f 85       	ldd	r25, Y+15	; 0x0f
    322e:	a8 89       	ldd	r26, Y+16	; 0x10
    3230:	b9 89       	ldd	r27, Y+17	; 0x11
    3232:	88 0d       	add	r24, r8
    3234:	99 1d       	adc	r25, r9
    3236:	aa 1d       	adc	r26, r10
    3238:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    323a:	88 16       	cp	r8, r24
    323c:	99 06       	cpc	r9, r25
    323e:	aa 06       	cpc	r10, r26
    3240:	bb 06       	cpc	r11, r27
    3242:	70 f4       	brcc	.+28     	; 0x3260 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3244:	8a 83       	std	Y+2, r24	; 0x02
    3246:	9b 83       	std	Y+3, r25	; 0x03
    3248:	ac 83       	std	Y+4, r26	; 0x04
    324a:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    324c:	db 87       	std	Y+11, r29	; 0x0b
    324e:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3250:	b8 01       	movw	r22, r16
    3252:	80 91 8d 12 	lds	r24, 0x128D	; 0x80128d <pxCurrentTimerList>
    3256:	90 91 8e 12 	lds	r25, 0x128E	; 0x80128e <pxCurrentTimerList+0x1>
    325a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <vListInsert>
    325e:	0a c0       	rjmp	.+20     	; 0x3274 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3260:	c1 2c       	mov	r12, r1
    3262:	d1 2c       	mov	r13, r1
    3264:	76 01       	movw	r14, r12
    3266:	00 e0       	ldi	r16, 0x00	; 0
    3268:	10 e0       	ldi	r17, 0x00	; 0
    326a:	a5 01       	movw	r20, r10
    326c:	94 01       	movw	r18, r8
    326e:	60 e0       	ldi	r22, 0x00	; 0
    3270:	ce 01       	movw	r24, r28
    3272:	5a df       	rcall	.-332    	; 0x3128 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3274:	e0 91 8d 12 	lds	r30, 0x128D	; 0x80128d <pxCurrentTimerList>
    3278:	f0 91 8e 12 	lds	r31, 0x128E	; 0x80128e <pxCurrentTimerList+0x1>
    327c:	80 81       	ld	r24, Z
    327e:	81 11       	cpse	r24, r1
    3280:	be cf       	rjmp	.-132    	; 0x31fe <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3282:	80 91 8b 12 	lds	r24, 0x128B	; 0x80128b <pxOverflowTimerList>
    3286:	90 91 8c 12 	lds	r25, 0x128C	; 0x80128c <pxOverflowTimerList+0x1>
    328a:	90 93 8e 12 	sts	0x128E, r25	; 0x80128e <pxCurrentTimerList+0x1>
    328e:	80 93 8d 12 	sts	0x128D, r24	; 0x80128d <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3292:	f0 93 8c 12 	sts	0x128C, r31	; 0x80128c <pxOverflowTimerList+0x1>
    3296:	e0 93 8b 12 	sts	0x128B, r30	; 0x80128b <pxOverflowTimerList>
    }
    329a:	df 91       	pop	r29
    329c:	cf 91       	pop	r28
    329e:	1f 91       	pop	r17
    32a0:	0f 91       	pop	r16
    32a2:	ff 90       	pop	r15
    32a4:	ef 90       	pop	r14
    32a6:	df 90       	pop	r13
    32a8:	cf 90       	pop	r12
    32aa:	bf 90       	pop	r11
    32ac:	af 90       	pop	r10
    32ae:	9f 90       	pop	r9
    32b0:	8f 90       	pop	r8
    32b2:	08 95       	ret

000032b4 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    32b4:	cf 92       	push	r12
    32b6:	df 92       	push	r13
    32b8:	ef 92       	push	r14
    32ba:	ff 92       	push	r15
    32bc:	cf 93       	push	r28
    32be:	df 93       	push	r29
    32c0:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    32c2:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <xTaskGetTickCount>
    32c6:	6b 01       	movw	r12, r22
    32c8:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    32ca:	80 91 83 12 	lds	r24, 0x1283	; 0x801283 <xLastTime.2436>
    32ce:	90 91 84 12 	lds	r25, 0x1284	; 0x801284 <xLastTime.2436+0x1>
    32d2:	a0 91 85 12 	lds	r26, 0x1285	; 0x801285 <xLastTime.2436+0x2>
    32d6:	b0 91 86 12 	lds	r27, 0x1286	; 0x801286 <xLastTime.2436+0x3>
    32da:	c8 16       	cp	r12, r24
    32dc:	d9 06       	cpc	r13, r25
    32de:	ea 06       	cpc	r14, r26
    32e0:	fb 06       	cpc	r15, r27
    32e2:	20 f4       	brcc	.+8      	; 0x32ec <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    32e4:	7f df       	rcall	.-258    	; 0x31e4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	88 83       	st	Y, r24
    32ea:	01 c0       	rjmp	.+2      	; 0x32ee <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    32ec:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    32ee:	c0 92 83 12 	sts	0x1283, r12	; 0x801283 <xLastTime.2436>
    32f2:	d0 92 84 12 	sts	0x1284, r13	; 0x801284 <xLastTime.2436+0x1>
    32f6:	e0 92 85 12 	sts	0x1285, r14	; 0x801285 <xLastTime.2436+0x2>
    32fa:	f0 92 86 12 	sts	0x1286, r15	; 0x801286 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    32fe:	c7 01       	movw	r24, r14
    3300:	b6 01       	movw	r22, r12
    3302:	df 91       	pop	r29
    3304:	cf 91       	pop	r28
    3306:	ff 90       	pop	r15
    3308:	ef 90       	pop	r14
    330a:	df 90       	pop	r13
    330c:	cf 90       	pop	r12
    330e:	08 95       	ret

00003310 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3310:	4f 92       	push	r4
    3312:	5f 92       	push	r5
    3314:	6f 92       	push	r6
    3316:	7f 92       	push	r7
    3318:	8f 92       	push	r8
    331a:	9f 92       	push	r9
    331c:	af 92       	push	r10
    331e:	bf 92       	push	r11
    3320:	cf 92       	push	r12
    3322:	df 92       	push	r13
    3324:	ef 92       	push	r14
    3326:	ff 92       	push	r15
    3328:	0f 93       	push	r16
    332a:	1f 93       	push	r17
    332c:	cf 93       	push	r28
    332e:	df 93       	push	r29
    3330:	4b 01       	movw	r8, r22
    3332:	5c 01       	movw	r10, r24
    3334:	29 01       	movw	r4, r18
    3336:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3338:	e0 91 8d 12 	lds	r30, 0x128D	; 0x80128d <pxCurrentTimerList>
    333c:	f0 91 8e 12 	lds	r31, 0x128E	; 0x80128e <pxCurrentTimerList+0x1>
    3340:	07 80       	ldd	r0, Z+7	; 0x07
    3342:	f0 85       	ldd	r31, Z+8	; 0x08
    3344:	e0 2d       	mov	r30, r0
    3346:	c0 85       	ldd	r28, Z+8	; 0x08
    3348:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    334a:	ce 01       	movw	r24, r28
    334c:	02 96       	adiw	r24, 0x02	; 2
    334e:	0e 94 37 05 	call	0xa6e	; 0xa6e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3352:	8e 89       	ldd	r24, Y+22	; 0x16
    3354:	82 ff       	sbrs	r24, 2
    3356:	1b c0       	rjmp	.+54     	; 0x338e <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3358:	4e 85       	ldd	r20, Y+14	; 0x0e
    335a:	5f 85       	ldd	r21, Y+15	; 0x0f
    335c:	68 89       	ldd	r22, Y+16	; 0x10
    335e:	79 89       	ldd	r23, Y+17	; 0x11
    3360:	48 0d       	add	r20, r8
    3362:	59 1d       	adc	r21, r9
    3364:	6a 1d       	adc	r22, r10
    3366:	7b 1d       	adc	r23, r11
    3368:	75 01       	movw	r14, r10
    336a:	64 01       	movw	r12, r8
    336c:	93 01       	movw	r18, r6
    336e:	82 01       	movw	r16, r4
    3370:	ce 01       	movw	r24, r28
    3372:	47 de       	rcall	.-882    	; 0x3002 <prvInsertTimerInActiveList>
    3374:	88 23       	and	r24, r24
    3376:	69 f0       	breq	.+26     	; 0x3392 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3378:	c1 2c       	mov	r12, r1
    337a:	d1 2c       	mov	r13, r1
    337c:	76 01       	movw	r14, r12
    337e:	00 e0       	ldi	r16, 0x00	; 0
    3380:	10 e0       	ldi	r17, 0x00	; 0
    3382:	a5 01       	movw	r20, r10
    3384:	94 01       	movw	r18, r8
    3386:	60 e0       	ldi	r22, 0x00	; 0
    3388:	ce 01       	movw	r24, r28
    338a:	ce de       	rcall	.-612    	; 0x3128 <xTimerGenericCommand>
    338c:	02 c0       	rjmp	.+4      	; 0x3392 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    338e:	8e 7f       	andi	r24, 0xFE	; 254
    3390:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3392:	ec 89       	ldd	r30, Y+20	; 0x14
    3394:	fd 89       	ldd	r31, Y+21	; 0x15
    3396:	ce 01       	movw	r24, r28
    3398:	19 95       	eicall
    }
    339a:	df 91       	pop	r29
    339c:	cf 91       	pop	r28
    339e:	1f 91       	pop	r17
    33a0:	0f 91       	pop	r16
    33a2:	ff 90       	pop	r15
    33a4:	ef 90       	pop	r14
    33a6:	df 90       	pop	r13
    33a8:	cf 90       	pop	r12
    33aa:	bf 90       	pop	r11
    33ac:	af 90       	pop	r10
    33ae:	9f 90       	pop	r9
    33b0:	8f 90       	pop	r8
    33b2:	7f 90       	pop	r7
    33b4:	6f 90       	pop	r6
    33b6:	5f 90       	pop	r5
    33b8:	4f 90       	pop	r4
    33ba:	08 95       	ret

000033bc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    33bc:	8f 92       	push	r8
    33be:	9f 92       	push	r9
    33c0:	af 92       	push	r10
    33c2:	bf 92       	push	r11
    33c4:	cf 92       	push	r12
    33c6:	df 92       	push	r13
    33c8:	ef 92       	push	r14
    33ca:	ff 92       	push	r15
    33cc:	1f 93       	push	r17
    33ce:	cf 93       	push	r28
    33d0:	df 93       	push	r29
    33d2:	1f 92       	push	r1
    33d4:	cd b7       	in	r28, 0x3d	; 61
    33d6:	de b7       	in	r29, 0x3e	; 62
    33d8:	6b 01       	movw	r12, r22
    33da:	7c 01       	movw	r14, r24
    33dc:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    33de:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    33e2:	ce 01       	movw	r24, r28
    33e4:	01 96       	adiw	r24, 0x01	; 1
    33e6:	66 df       	rcall	.-308    	; 0x32b4 <prvSampleTimeNow>
    33e8:	4b 01       	movw	r8, r22
    33ea:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    33ec:	89 81       	ldd	r24, Y+1	; 0x01
    33ee:	81 11       	cpse	r24, r1
    33f0:	2d c0       	rjmp	.+90     	; 0x344c <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    33f2:	11 11       	cpse	r17, r1
    33f4:	0d c0       	rjmp	.+26     	; 0x3410 <prvProcessTimerOrBlockTask+0x54>
    33f6:	8c 14       	cp	r8, r12
    33f8:	9d 04       	cpc	r9, r13
    33fa:	ae 04       	cpc	r10, r14
    33fc:	bf 04       	cpc	r11, r15
    33fe:	40 f0       	brcs	.+16     	; 0x3410 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3400:	0e 94 39 10 	call	0x2072	; 0x2072 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3404:	a5 01       	movw	r20, r10
    3406:	94 01       	movw	r18, r8
    3408:	c7 01       	movw	r24, r14
    340a:	b6 01       	movw	r22, r12
    340c:	81 df       	rcall	.-254    	; 0x3310 <prvProcessExpiredTimer>
    340e:	20 c0       	rjmp	.+64     	; 0x3450 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3410:	11 23       	and	r17, r17
    3412:	41 f0       	breq	.+16     	; 0x3424 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3414:	e0 91 8b 12 	lds	r30, 0x128B	; 0x80128b <pxOverflowTimerList>
    3418:	f0 91 8c 12 	lds	r31, 0x128C	; 0x80128c <pxOverflowTimerList+0x1>
    341c:	80 81       	ld	r24, Z
    341e:	11 e0       	ldi	r17, 0x01	; 1
    3420:	81 11       	cpse	r24, r1
    3422:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3424:	b7 01       	movw	r22, r14
    3426:	a6 01       	movw	r20, r12
    3428:	48 19       	sub	r20, r8
    342a:	59 09       	sbc	r21, r9
    342c:	6a 09       	sbc	r22, r10
    342e:	7b 09       	sbc	r23, r11
    3430:	21 2f       	mov	r18, r17
    3432:	80 91 89 12 	lds	r24, 0x1289	; 0x801289 <xTimerQueue>
    3436:	90 91 8a 12 	lds	r25, 0x128A	; 0x80128a <xTimerQueue+0x1>
    343a:	0e 94 16 09 	call	0x122c	; 0x122c <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    343e:	0e 94 39 10 	call	0x2072	; 0x2072 <xTaskResumeAll>
    3442:	81 11       	cpse	r24, r1
    3444:	05 c0       	rjmp	.+10     	; 0x3450 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3446:	0e 94 b3 05 	call	0xb66	; 0xb66 <vPortYield>
    344a:	02 c0       	rjmp	.+4      	; 0x3450 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    344c:	0e 94 39 10 	call	0x2072	; 0x2072 <xTaskResumeAll>
            }
        }
    }
    3450:	0f 90       	pop	r0
    3452:	df 91       	pop	r29
    3454:	cf 91       	pop	r28
    3456:	1f 91       	pop	r17
    3458:	ff 90       	pop	r15
    345a:	ef 90       	pop	r14
    345c:	df 90       	pop	r13
    345e:	cf 90       	pop	r12
    3460:	bf 90       	pop	r11
    3462:	af 90       	pop	r10
    3464:	9f 90       	pop	r9
    3466:	8f 90       	pop	r8
    3468:	08 95       	ret

0000346a <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    346a:	af 92       	push	r10
    346c:	bf 92       	push	r11
    346e:	cf 92       	push	r12
    3470:	df 92       	push	r13
    3472:	ef 92       	push	r14
    3474:	ff 92       	push	r15
    3476:	0f 93       	push	r16
    3478:	1f 93       	push	r17
    347a:	cf 93       	push	r28
    347c:	df 93       	push	r29
    347e:	cd b7       	in	r28, 0x3d	; 61
    3480:	de b7       	in	r29, 0x3e	; 62
    3482:	28 97       	sbiw	r28, 0x08	; 8
    3484:	0f b6       	in	r0, 0x3f	; 63
    3486:	f8 94       	cli
    3488:	de bf       	out	0x3e, r29	; 62
    348a:	0f be       	out	0x3f, r0	; 63
    348c:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    348e:	82 c0       	rjmp	.+260    	; 0x3594 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3490:	89 81       	ldd	r24, Y+1	; 0x01
    3492:	88 23       	and	r24, r24
    3494:	0c f4       	brge	.+2      	; 0x3498 <prvProcessReceivedCommands+0x2e>
    3496:	7e c0       	rjmp	.+252    	; 0x3594 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3498:	ae 80       	ldd	r10, Y+6	; 0x06
    349a:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    349c:	d5 01       	movw	r26, r10
    349e:	1c 96       	adiw	r26, 0x0c	; 12
    34a0:	8d 91       	ld	r24, X+
    34a2:	9c 91       	ld	r25, X
    34a4:	1d 97       	sbiw	r26, 0x0d	; 13
    34a6:	89 2b       	or	r24, r25
    34a8:	21 f0       	breq	.+8      	; 0x34b2 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    34aa:	c5 01       	movw	r24, r10
    34ac:	02 96       	adiw	r24, 0x02	; 2
    34ae:	0e 94 37 05 	call	0xa6e	; 0xa6e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    34b2:	ce 01       	movw	r24, r28
    34b4:	08 96       	adiw	r24, 0x08	; 8
    34b6:	fe de       	rcall	.-516    	; 0x32b4 <prvSampleTimeNow>
    34b8:	8b 01       	movw	r16, r22
    34ba:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    34bc:	e9 81       	ldd	r30, Y+1	; 0x01
    34be:	0e 2e       	mov	r0, r30
    34c0:	00 0c       	add	r0, r0
    34c2:	ff 0b       	sbc	r31, r31
    34c4:	ea 30       	cpi	r30, 0x0A	; 10
    34c6:	f1 05       	cpc	r31, r1
    34c8:	08 f0       	brcs	.+2      	; 0x34cc <prvProcessReceivedCommands+0x62>
    34ca:	64 c0       	rjmp	.+200    	; 0x3594 <prvProcessReceivedCommands+0x12a>
    34cc:	88 27       	eor	r24, r24
    34ce:	ee 58       	subi	r30, 0x8E	; 142
    34d0:	ff 4f       	sbci	r31, 0xFF	; 255
    34d2:	8f 4f       	sbci	r24, 0xFF	; 255
    34d4:	0c 94 a9 2c 	jmp	0x5952	; 0x5952 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    34d8:	f5 01       	movw	r30, r10
    34da:	86 89       	ldd	r24, Z+22	; 0x16
    34dc:	81 60       	ori	r24, 0x01	; 1
    34de:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    34e0:	ca 80       	ldd	r12, Y+2	; 0x02
    34e2:	db 80       	ldd	r13, Y+3	; 0x03
    34e4:	ec 80       	ldd	r14, Y+4	; 0x04
    34e6:	fd 80       	ldd	r15, Y+5	; 0x05
    34e8:	46 85       	ldd	r20, Z+14	; 0x0e
    34ea:	57 85       	ldd	r21, Z+15	; 0x0f
    34ec:	60 89       	ldd	r22, Z+16	; 0x10
    34ee:	71 89       	ldd	r23, Z+17	; 0x11
    34f0:	4c 0d       	add	r20, r12
    34f2:	5d 1d       	adc	r21, r13
    34f4:	6e 1d       	adc	r22, r14
    34f6:	7f 1d       	adc	r23, r15
    34f8:	c5 01       	movw	r24, r10
    34fa:	83 dd       	rcall	.-1274   	; 0x3002 <prvInsertTimerInActiveList>
    34fc:	88 23       	and	r24, r24
    34fe:	09 f4       	brne	.+2      	; 0x3502 <prvProcessReceivedCommands+0x98>
    3500:	49 c0       	rjmp	.+146    	; 0x3594 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3502:	d5 01       	movw	r26, r10
    3504:	54 96       	adiw	r26, 0x14	; 20
    3506:	ed 91       	ld	r30, X+
    3508:	fc 91       	ld	r31, X
    350a:	55 97       	sbiw	r26, 0x15	; 21
    350c:	c5 01       	movw	r24, r10
    350e:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3510:	f5 01       	movw	r30, r10
    3512:	86 89       	ldd	r24, Z+22	; 0x16
    3514:	82 ff       	sbrs	r24, 2
    3516:	3e c0       	rjmp	.+124    	; 0x3594 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3518:	4a 81       	ldd	r20, Y+2	; 0x02
    351a:	5b 81       	ldd	r21, Y+3	; 0x03
    351c:	6c 81       	ldd	r22, Y+4	; 0x04
    351e:	7d 81       	ldd	r23, Y+5	; 0x05
    3520:	86 85       	ldd	r24, Z+14	; 0x0e
    3522:	97 85       	ldd	r25, Z+15	; 0x0f
    3524:	a0 89       	ldd	r26, Z+16	; 0x10
    3526:	b1 89       	ldd	r27, Z+17	; 0x11
    3528:	9a 01       	movw	r18, r20
    352a:	ab 01       	movw	r20, r22
    352c:	28 0f       	add	r18, r24
    352e:	39 1f       	adc	r19, r25
    3530:	4a 1f       	adc	r20, r26
    3532:	5b 1f       	adc	r21, r27
    3534:	c1 2c       	mov	r12, r1
    3536:	d1 2c       	mov	r13, r1
    3538:	76 01       	movw	r14, r12
    353a:	00 e0       	ldi	r16, 0x00	; 0
    353c:	10 e0       	ldi	r17, 0x00	; 0
    353e:	60 e0       	ldi	r22, 0x00	; 0
    3540:	c5 01       	movw	r24, r10
    3542:	f2 dd       	rcall	.-1052   	; 0x3128 <xTimerGenericCommand>
    3544:	27 c0       	rjmp	.+78     	; 0x3594 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3546:	d5 01       	movw	r26, r10
    3548:	56 96       	adiw	r26, 0x16	; 22
    354a:	8c 91       	ld	r24, X
    354c:	56 97       	sbiw	r26, 0x16	; 22
    354e:	8e 7f       	andi	r24, 0xFE	; 254
    3550:	56 96       	adiw	r26, 0x16	; 22
    3552:	8c 93       	st	X, r24
                        break;
    3554:	1f c0       	rjmp	.+62     	; 0x3594 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3556:	f5 01       	movw	r30, r10
    3558:	86 89       	ldd	r24, Z+22	; 0x16
    355a:	81 60       	ori	r24, 0x01	; 1
    355c:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    355e:	4a 81       	ldd	r20, Y+2	; 0x02
    3560:	5b 81       	ldd	r21, Y+3	; 0x03
    3562:	6c 81       	ldd	r22, Y+4	; 0x04
    3564:	7d 81       	ldd	r23, Y+5	; 0x05
    3566:	46 87       	std	Z+14, r20	; 0x0e
    3568:	57 87       	std	Z+15, r21	; 0x0f
    356a:	60 8b       	std	Z+16, r22	; 0x10
    356c:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    356e:	40 0f       	add	r20, r16
    3570:	51 1f       	adc	r21, r17
    3572:	62 1f       	adc	r22, r18
    3574:	73 1f       	adc	r23, r19
    3576:	68 01       	movw	r12, r16
    3578:	79 01       	movw	r14, r18
    357a:	c5 01       	movw	r24, r10
    357c:	42 dd       	rcall	.-1404   	; 0x3002 <prvInsertTimerInActiveList>
                        break;
    357e:	0a c0       	rjmp	.+20     	; 0x3594 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3580:	f5 01       	movw	r30, r10
    3582:	86 89       	ldd	r24, Z+22	; 0x16
    3584:	81 fd       	sbrc	r24, 1
    3586:	04 c0       	rjmp	.+8      	; 0x3590 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3588:	c5 01       	movw	r24, r10
    358a:	0e 94 a8 04 	call	0x950	; 0x950 <vPortFree>
    358e:	02 c0       	rjmp	.+4      	; 0x3594 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3590:	8e 7f       	andi	r24, 0xFE	; 254
    3592:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3594:	20 e0       	ldi	r18, 0x00	; 0
    3596:	30 e0       	ldi	r19, 0x00	; 0
    3598:	a9 01       	movw	r20, r18
    359a:	be 01       	movw	r22, r28
    359c:	6f 5f       	subi	r22, 0xFF	; 255
    359e:	7f 4f       	sbci	r23, 0xFF	; 255
    35a0:	80 91 89 12 	lds	r24, 0x1289	; 0x801289 <xTimerQueue>
    35a4:	90 91 8a 12 	lds	r25, 0x128A	; 0x80128a <xTimerQueue+0x1>
    35a8:	0e 94 87 08 	call	0x110e	; 0x110e <xQueueReceive>
    35ac:	81 11       	cpse	r24, r1
    35ae:	70 cf       	rjmp	.-288    	; 0x3490 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    35b0:	28 96       	adiw	r28, 0x08	; 8
    35b2:	0f b6       	in	r0, 0x3f	; 63
    35b4:	f8 94       	cli
    35b6:	de bf       	out	0x3e, r29	; 62
    35b8:	0f be       	out	0x3f, r0	; 63
    35ba:	cd bf       	out	0x3d, r28	; 61
    35bc:	df 91       	pop	r29
    35be:	cf 91       	pop	r28
    35c0:	1f 91       	pop	r17
    35c2:	0f 91       	pop	r16
    35c4:	ff 90       	pop	r15
    35c6:	ef 90       	pop	r14
    35c8:	df 90       	pop	r13
    35ca:	cf 90       	pop	r12
    35cc:	bf 90       	pop	r11
    35ce:	af 90       	pop	r10
    35d0:	08 95       	ret

000035d2 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    35d2:	08 95       	ret

000035d4 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    35d4:	84 b1       	in	r24, 0x04	; 4
    35d6:	80 68       	ori	r24, 0x80	; 128
    35d8:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    35da:	85 b1       	in	r24, 0x05	; 5
    35dc:	80 68       	ori	r24, 0x80	; 128
    35de:	85 b9       	out	0x05, r24	; 5
    35e0:	08 95       	ret

000035e2 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    35e2:	83 b1       	in	r24, 0x03	; 3
    35e4:	80 68       	ori	r24, 0x80	; 128
    35e6:	83 b9       	out	0x03, r24	; 3
    35e8:	08 95       	ret

000035ea <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    35ea:	f4 df       	rcall	.-24     	; 0x35d4 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    35ec:	2f ef       	ldi	r18, 0xFF	; 255
    35ee:	80 e7       	ldi	r24, 0x70	; 112
    35f0:	92 e0       	ldi	r25, 0x02	; 2
    35f2:	21 50       	subi	r18, 0x01	; 1
    35f4:	80 40       	sbci	r24, 0x00	; 0
    35f6:	90 40       	sbci	r25, 0x00	; 0
    35f8:	e1 f7       	brne	.-8      	; 0x35f2 <vApplicationMallocFailedHook+0x8>
    35fa:	00 c0       	rjmp	.+0      	; 0x35fc <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    35fc:	00 00       	nop
    35fe:	f1 df       	rcall	.-30     	; 0x35e2 <prvBlinkMainLed>
    3600:	f5 cf       	rjmp	.-22     	; 0x35ec <vApplicationMallocFailedHook+0x2>

00003602 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3602:	e8 df       	rcall	.-48     	; 0x35d4 <prvSetMainLedOn>
    3604:	2f ef       	ldi	r18, 0xFF	; 255
    3606:	87 ea       	ldi	r24, 0xA7	; 167
    3608:	91 e6       	ldi	r25, 0x61	; 97
    360a:	21 50       	subi	r18, 0x01	; 1
    360c:	80 40       	sbci	r24, 0x00	; 0
    360e:	90 40       	sbci	r25, 0x00	; 0
    3610:	e1 f7       	brne	.-8      	; 0x360a <vApplicationStackOverflowHook+0x8>
    3612:	00 c0       	rjmp	.+0      	; 0x3614 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3614:	00 00       	nop
    3616:	e5 df       	rcall	.-54     	; 0x35e2 <prvBlinkMainLed>
    3618:	f5 cf       	rjmp	.-22     	; 0x3604 <vApplicationStackOverflowHook+0x2>

0000361a <SensorDataPackageHandler_SetCO2>:
int16_t tempIn16 = 0.0;
uint16_t co2_ppmIn16 = 0.0;
static lora_driver_payload_t _uplink_payload;

void SensorDataPackageHandler_SetCO2(uint16_t co2){
	co2_ppmIn16 = co2;
    361a:	90 93 bc 12 	sts	0x12BC, r25	; 0x8012bc <co2_ppmIn16+0x1>
    361e:	80 93 bb 12 	sts	0x12BB, r24	; 0x8012bb <co2_ppmIn16>
    3622:	08 95       	ret

00003624 <SensorDataPackageHandler_SetHumidity>:
}

void SensorDataPackageHandler_SetHumidity(uint16_t humidity){
	humIn16 = humidity;
    3624:	90 93 c0 12 	sts	0x12C0, r25	; 0x8012c0 <humIn16+0x1>
    3628:	80 93 bf 12 	sts	0x12BF, r24	; 0x8012bf <humIn16>
    362c:	08 95       	ret

0000362e <SensorDataPackageHandler_SetTemperature>:
}

void SensorDataPackageHandler_SetTemperature(int16_t temperature){
	tempIn16 = temperature;
    362e:	90 93 be 12 	sts	0x12BE, r25	; 0x8012be <tempIn16+0x1>
    3632:	80 93 bd 12 	sts	0x12BD, r24	; 0x8012bd <tempIn16>
    3636:	08 95       	ret

00003638 <SensorDataPackageHandler_getLoRaPayload>:
}

lora_driver_payload_t SensorDataPackageHandler_getLoRaPayload(){
    3638:	cf 93       	push	r28
    363a:	df 93       	push	r29
    363c:	ec 01       	movw	r28, r24
	printf("STARTEDSensorDataPackageHandler");
    363e:	82 e0       	ldi	r24, 0x02	; 2
    3640:	93 e0       	ldi	r25, 0x03	; 3
    3642:	9f 93       	push	r25
    3644:	8f 93       	push	r24
    3646:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
	printf("and this is the changed hum %u\n", humIn16);
    364a:	80 91 c0 12 	lds	r24, 0x12C0	; 0x8012c0 <humIn16+0x1>
    364e:	8f 93       	push	r24
    3650:	80 91 bf 12 	lds	r24, 0x12BF	; 0x8012bf <humIn16>
    3654:	8f 93       	push	r24
    3656:	82 e2       	ldi	r24, 0x22	; 34
    3658:	93 e0       	ldi	r25, 0x03	; 3
    365a:	9f 93       	push	r25
    365c:	8f 93       	push	r24
    365e:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
	printf("and also the changed temp %u\n", tempIn16);
    3662:	80 91 be 12 	lds	r24, 0x12BE	; 0x8012be <tempIn16+0x1>
    3666:	8f 93       	push	r24
    3668:	80 91 bd 12 	lds	r24, 0x12BD	; 0x8012bd <tempIn16>
    366c:	8f 93       	push	r24
    366e:	82 e4       	ldi	r24, 0x42	; 66
    3670:	93 e0       	ldi	r25, 0x03	; 3
    3672:	9f 93       	push	r25
    3674:	8f 93       	push	r24
    3676:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
	printf("and also the changed CO2 %u\n", co2_ppmIn16);
    367a:	80 91 bc 12 	lds	r24, 0x12BC	; 0x8012bc <co2_ppmIn16+0x1>
    367e:	8f 93       	push	r24
    3680:	80 91 bb 12 	lds	r24, 0x12BB	; 0x8012bb <co2_ppmIn16>
    3684:	8f 93       	push	r24
    3686:	80 e6       	ldi	r24, 0x60	; 96
    3688:	93 e0       	ldi	r25, 0x03	; 3
    368a:	9f 93       	push	r25
    368c:	8f 93       	push	r24
    368e:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
	
	_uplink_payload.len = 6;
    3692:	e5 ea       	ldi	r30, 0xA5	; 165
    3694:	f2 e1       	ldi	r31, 0x12	; 18
    3696:	86 e0       	ldi	r24, 0x06	; 6
    3698:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.portNo = 2;
    369a:	82 e0       	ldi	r24, 0x02	; 2
    369c:	80 83       	st	Z, r24
	_uplink_payload.bytes[0] = humIn16 >> 8;
    369e:	80 91 bf 12 	lds	r24, 0x12BF	; 0x8012bf <humIn16>
    36a2:	90 91 c0 12 	lds	r25, 0x12C0	; 0x8012c0 <humIn16+0x1>
    36a6:	92 83       	std	Z+2, r25	; 0x02
	_uplink_payload.bytes[1] = humIn16 & 0xFF;
    36a8:	83 83       	std	Z+3, r24	; 0x03
	_uplink_payload.bytes[2] = tempIn16 >> 8;
    36aa:	80 91 bd 12 	lds	r24, 0x12BD	; 0x8012bd <tempIn16>
    36ae:	90 91 be 12 	lds	r25, 0x12BE	; 0x8012be <tempIn16+0x1>
    36b2:	94 83       	std	Z+4, r25	; 0x04
	_uplink_payload.bytes[3] = tempIn16 & 0xFF;
    36b4:	85 83       	std	Z+5, r24	; 0x05
	_uplink_payload.bytes[4] = co2_ppmIn16 >> 8;
    36b6:	80 91 bb 12 	lds	r24, 0x12BB	; 0x8012bb <co2_ppmIn16>
    36ba:	90 91 bc 12 	lds	r25, 0x12BC	; 0x8012bc <co2_ppmIn16+0x1>
    36be:	96 83       	std	Z+6, r25	; 0x06
	_uplink_payload.bytes[5] = co2_ppmIn16 & 0xFF;
    36c0:	87 83       	std	Z+7, r24	; 0x07
	return _uplink_payload;
    36c2:	86 e1       	ldi	r24, 0x16	; 22
    36c4:	de 01       	movw	r26, r28
    36c6:	01 90       	ld	r0, Z+
    36c8:	0d 92       	st	X+, r0
    36ca:	8a 95       	dec	r24
    36cc:	e1 f7       	brne	.-8      	; 0x36c6 <SensorDataPackageHandler_getLoRaPayload+0x8e>
    36ce:	8d b7       	in	r24, 0x3d	; 61
    36d0:	9e b7       	in	r25, 0x3e	; 62
    36d2:	0e 96       	adiw	r24, 0x0e	; 14
    36d4:	0f b6       	in	r0, 0x3f	; 63
    36d6:	f8 94       	cli
    36d8:	9e bf       	out	0x3e, r25	; 62
    36da:	0f be       	out	0x3f, r0	; 63
    36dc:	8d bf       	out	0x3d, r24	; 61
    36de:	ce 01       	movw	r24, r28
    36e0:	df 91       	pop	r29
    36e2:	cf 91       	pop	r28
    36e4:	08 95       	ret

000036e6 <_lora_setup>:
	,  UpLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    36e6:	cf 93       	push	r28
    36e8:	df 93       	push	r29
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    36ea:	81 e0       	ldi	r24, 0x01	; 1
    36ec:	0e 94 43 28 	call	0x5086	; 0x5086 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    36f0:	fa d3       	rcall	.+2036   	; 0x3ee6 <lora_driver_rn2483FactoryReset>
    36f2:	76 d6       	rcall	.+3308   	; 0x43e0 <lora_driver_mapReturnCodeToText>
    36f4:	9f 93       	push	r25
    36f6:	8f 93       	push	r24
    36f8:	8d e7       	ldi	r24, 0x7D	; 125
    36fa:	93 e0       	ldi	r25, 0x03	; 3
    36fc:	9f 93       	push	r25
    36fe:	8f 93       	push	r24
    3700:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3704:	6e d5       	rcall	.+2780   	; 0x41e2 <lora_driver_configureToEu868>
    3706:	6c d6       	rcall	.+3288   	; 0x43e0 <lora_driver_mapReturnCodeToText>
    3708:	9f 93       	push	r25
    370a:	8f 93       	push	r24
    370c:	80 e9       	ldi	r24, 0x90	; 144
    370e:	93 e0       	ldi	r25, 0x03	; 3
    3710:	9f 93       	push	r25
    3712:	8f 93       	push	r24
    3714:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
    3718:	87 ed       	ldi	r24, 0xD7	; 215

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    371a:	92 e1       	ldi	r25, 0x12	; 18
    371c:	f6 d3       	rcall	.+2028   	; 0x3f0a <lora_driver_getRn2483Hweui>
    371e:	60 d6       	rcall	.+3264   	; 0x43e0 <lora_driver_mapReturnCodeToText>
    3720:	c7 ed       	ldi	r28, 0xD7	; 215
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3722:	d2 e1       	ldi	r29, 0x12	; 18
    3724:	df 93       	push	r29
    3726:	cf 93       	push	r28
    3728:	9f 93       	push	r25
    372a:	8f 93       	push	r24
    372c:	89 ea       	ldi	r24, 0xA9	; 169
    372e:	93 e0       	ldi	r25, 0x03	; 3
    3730:	9f 93       	push	r25
    3732:	8f 93       	push	r24
    3734:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
    3738:	ce 01       	movw	r24, r28

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    373a:	03 d4       	rcall	.+2054   	; 0x3f42 <lora_driver_setDeviceIdentifier>
    373c:	51 d6       	rcall	.+3234   	; 0x43e0 <lora_driver_mapReturnCodeToText>
    373e:	9f 93       	push	r25
    3740:	8f 93       	push	r24
    3742:	df 93       	push	r29
    3744:	cf 93       	push	r28
    3746:	8d eb       	ldi	r24, 0xBD	; 189
    3748:	93 e0       	ldi	r25, 0x03	; 3
    374a:	9f 93       	push	r25
    374c:	8f 93       	push	r24
    374e:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
    3752:	ae 01       	movw	r20, r28

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3754:	62 ed       	ldi	r22, 0xD2	; 210
    3756:	73 e0       	ldi	r23, 0x03	; 3
    3758:	83 ef       	ldi	r24, 0xF3	; 243
    375a:	93 e0       	ldi	r25, 0x03	; 3
    375c:	20 d6       	rcall	.+3136   	; 0x439e <lora_driver_setOtaaIdentity>
    375e:	40 d6       	rcall	.+3200   	; 0x43e0 <lora_driver_mapReturnCodeToText>
    3760:	9f 93       	push	r25
    3762:	8f 93       	push	r24
    3764:	df 93       	push	r29
    3766:	cf 93       	push	r28
    3768:	82 ed       	ldi	r24, 0xD2	; 210
    376a:	93 e0       	ldi	r25, 0x03	; 3
    376c:	9f 93       	push	r25
    376e:	8f 93       	push	r24
    3770:	83 ef       	ldi	r24, 0xF3	; 243
    3772:	93 e0       	ldi	r25, 0x03	; 3
    3774:	9f 93       	push	r25
    3776:	8f 93       	push	r24
    3778:	84 e0       	ldi	r24, 0x04	; 4
    377a:	94 e0       	ldi	r25, 0x04	; 4
    377c:	9f 93       	push	r25
    377e:	8f 93       	push	r24
    3780:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
    3784:	11 d4       	rcall	.+2082   	; 0x3fa8 <lora_driver_saveMac>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3786:	2c d6       	rcall	.+3160   	; 0x43e0 <lora_driver_mapReturnCodeToText>
    3788:	9f 93       	push	r25
    378a:	8f 93       	push	r24
    378c:	8a e3       	ldi	r24, 0x3A	; 58
    378e:	94 e0       	ldi	r25, 0x04	; 4
    3790:	9f 93       	push	r25
    3792:	8f 93       	push	r24
    3794:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
    3798:	8d b7       	in	r24, 0x3d	; 61

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    379a:	9e b7       	in	r25, 0x3e	; 62
    379c:	82 96       	adiw	r24, 0x22	; 34
    379e:	0f b6       	in	r0, 0x3f	; 63
    37a0:	f8 94       	cli
    37a2:	9e bf       	out	0x3e, r25	; 62
    37a4:	0f be       	out	0x3f, r0	; 63
    37a6:	8d bf       	out	0x3d, r24	; 61
    37a8:	81 e0       	ldi	r24, 0x01	; 1
    37aa:	f8 d4       	rcall	.+2544   	; 0x419c <lora_driver_setAdaptiveDataRate>
    37ac:	19 d6       	rcall	.+3122   	; 0x43e0 <lora_driver_mapReturnCodeToText>
    37ae:	9f 93       	push	r25
    37b0:	8f 93       	push	r24
    37b2:	89 e4       	ldi	r24, 0x49	; 73
    37b4:	94 e0       	ldi	r25, 0x04	; 4
    37b6:	9f 93       	push	r25
    37b8:	8f 93       	push	r24
    37ba:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
    37be:	84 ef       	ldi	r24, 0xF4	; 244

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    37c0:	91 e0       	ldi	r25, 0x01	; 1
    37c2:	f7 d4       	rcall	.+2542   	; 0x41b2 <lora_driver_setReceiveDelay>
    37c4:	0d d6       	rcall	.+3098   	; 0x43e0 <lora_driver_mapReturnCodeToText>
    37c6:	9f 93       	push	r25
    37c8:	8f 93       	push	r24
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	8f 93       	push	r24
    37ce:	84 ef       	ldi	r24, 0xF4	; 244
    37d0:	8f 93       	push	r24
    37d2:	8a e6       	ldi	r24, 0x6A	; 106
    37d4:	94 e0       	ldi	r25, 0x04	; 4
    37d6:	9f 93       	push	r25
    37d8:	8f 93       	push	r24
    37da:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
    37de:	8d b7       	in	r24, 0x3d	; 61
    37e0:	9e b7       	in	r25, 0x3e	; 62
    37e2:	0a 96       	adiw	r24, 0x0a	; 10
    37e4:	0f b6       	in	r0, 0x3f	; 63
    37e6:	f8 94       	cli
    37e8:	9e bf       	out	0x3e, r25	; 62
    37ea:	0f be       	out	0x3f, r0	; 63
    37ec:	8d bf       	out	0x3d, r24	; 61
    37ee:	ca e0       	ldi	r28, 0x0A	; 10

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    37f0:	80 e0       	ldi	r24, 0x00	; 0
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    37f2:	e0 d3       	rcall	.+1984   	; 0x3fb4 <lora_driver_join>
    37f4:	d8 2f       	mov	r29, r24
    37f6:	f4 d5       	rcall	.+3048   	; 0x43e0 <lora_driver_mapReturnCodeToText>
    37f8:	9f 93       	push	r25
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    37fa:	8f 93       	push	r24
    37fc:	1f 92       	push	r1
    37fe:	cf 93       	push	r28
    3800:	8a e8       	ldi	r24, 0x8A	; 138
    3802:	94 e0       	ldi	r25, 0x04	; 4
    3804:	9f 93       	push	r25
    3806:	8f 93       	push	r24
    3808:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
    380c:	0f 90       	pop	r0
    380e:	0f 90       	pop	r0
    3810:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3812:	0f 90       	pop	r0
    3814:	0f 90       	pop	r0
    3816:	0f 90       	pop	r0
    3818:	d8 30       	cpi	r29, 0x08	; 8
    381a:	59 f0       	breq	.+22     	; 0x3832 <_lora_setup+0x14c>
    381c:	80 e0       	ldi	r24, 0x00	; 0
    381e:	0e 94 a7 28 	call	0x514e	; 0x514e <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3822:	66 e3       	ldi	r22, 0x36	; 54
    3824:	71 e0       	ldi	r23, 0x01	; 1
    3826:	80 e0       	ldi	r24, 0x00	; 0
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <vTaskDelay>
    382e:	c1 50       	subi	r28, 0x01	; 1
    3830:	f9 f6       	brne	.-66     	; 0x37f0 <_lora_setup+0x10a>
    3832:	d8 30       	cpi	r29, 0x08	; 8
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3834:	21 f4       	brne	.+8      	; 0x383e <_lora_setup+0x158>
    3836:	81 e0       	ldi	r24, 0x01	; 1

	if (rc == LORA_ACCEPTED)
    3838:	0e 94 89 28 	call	0x5112	; 0x5112 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    383c:	09 c0       	rjmp	.+18     	; 0x3850 <_lora_setup+0x16a>
    383e:	81 e0       	ldi	r24, 0x01	; 1
    3840:	0e 94 98 28 	call	0x5130	; 0x5130 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	0e 94 66 28 	call	0x50cc	; 0x50cc <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    384a:	0e 94 b3 05 	call	0xb66	; 0xb66 <vPortYield>
    384e:	fd cf       	rjmp	.-6      	; 0x384a <_lora_setup+0x164>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3850:	df 91       	pop	r29
    3852:	cf 91       	pop	r28
    3854:	08 95       	ret

00003856 <UpLinkHandler_lora_handler_task>:
		}
	}
}
    3856:	cf 93       	push	r28
    3858:	df 93       	push	r29
    385a:	cd b7       	in	r28, 0x3d	; 61

/*-----------------------------------------------------------*/
void UpLinkHandler_lora_handler_task( void *pvParameters )
{
    385c:	de b7       	in	r29, 0x3e	; 62
    385e:	6a 97       	sbiw	r28, 0x1a	; 26
    3860:	0f b6       	in	r0, 0x3f	; 63
    3862:	f8 94       	cli
    3864:	de bf       	out	0x3e, r29	; 62
    3866:	0f be       	out	0x3f, r0	; 63
    3868:	cd bf       	out	0x3d, r28	; 61
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    386a:	81 e0       	ldi	r24, 0x01	; 1
    386c:	2e d3       	rcall	.+1628   	; 0x3eca <lora_driver_resetRn2483>
	vTaskDelay(2);
    386e:	62 e0       	ldi	r22, 0x02	; 2
    3870:	70 e0       	ldi	r23, 0x00	; 0
    3872:	80 e0       	ldi	r24, 0x00	; 0
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <vTaskDelay>
	lora_driver_resetRn2483(0);
    387a:	80 e0       	ldi	r24, 0x00	; 0
    387c:	26 d3       	rcall	.+1612   	; 0x3eca <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    387e:	66 e9       	ldi	r22, 0x96	; 150
    3880:	70 e0       	ldi	r23, 0x00	; 0
    3882:	80 e0       	ldi	r24, 0x00	; 0
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    388a:	d8 d2       	rcall	.+1456   	; 0x3e3c <lora_driver_flushBuffers>

	_lora_setup();
    388c:	2c df       	rcall	.-424    	; 0x36e6 <_lora_setup>
    388e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <xTaskGetTickCount>


	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    3892:	69 83       	std	Y+1, r22	; 0x01
    3894:	7a 83       	std	Y+2, r23	; 0x02
    3896:	8b 83       	std	Y+3, r24	; 0x03
    3898:	9c 83       	std	Y+4, r25	; 0x04
    389a:	48 ea       	ldi	r20, 0xA8	; 168
	
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    389c:	58 e4       	ldi	r21, 0x48	; 72
    389e:	60 e0       	ldi	r22, 0x00	; 0
    38a0:	70 e0       	ldi	r23, 0x00	; 0
    38a2:	ce 01       	movw	r24, r28
    38a4:	01 96       	adiw	r24, 0x01	; 1
    38a6:	0e 94 15 11 	call	0x222a	; 0x222a <xTaskDelayUntil>
    38aa:	8a ea       	ldi	r24, 0xAA	; 170
		printf("startLoraTask");
    38ac:	94 e0       	ldi	r25, 0x04	; 4
    38ae:	9f 93       	push	r25
    38b0:	8f 93       	push	r24
    38b2:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
		_uplink_payload = SensorDataPackageHandler_getLoRaPayload();
    38b6:	ce 01       	movw	r24, r28
    38b8:	05 96       	adiw	r24, 0x05	; 5
    38ba:	be de       	rcall	.-644    	; 0x3638 <SensorDataPackageHandler_getLoRaPayload>
    38bc:	86 e1       	ldi	r24, 0x16	; 22
    38be:	fe 01       	movw	r30, r28
    38c0:	35 96       	adiw	r30, 0x05	; 5
    38c2:	a1 ec       	ldi	r26, 0xC1	; 193
    38c4:	b2 e1       	ldi	r27, 0x12	; 18
    38c6:	01 90       	ld	r0, Z+
    38c8:	0d 92       	st	X+, r0
    38ca:	8a 95       	dec	r24
    38cc:	e1 f7       	brne	.-8      	; 0x38c6 <UpLinkHandler_lora_handler_task+0x70>
    38ce:	83 e0       	ldi	r24, 0x03	; 3
		status_leds_shortPuls(led_ST4);  // OPTIONAL
    38d0:	0e 94 b9 28 	call	0x5172	; 0x5172 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    38d4:	61 ec       	ldi	r22, 0xC1	; 193
    38d6:	72 e1       	ldi	r23, 0x12	; 18
    38d8:	80 e0       	ldi	r24, 0x00	; 0
    38da:	95 d3       	rcall	.+1834   	; 0x4006 <lora_driver_sendUploadMessage>
    38dc:	81 d5       	rcall	.+2818   	; 0x43e0 <lora_driver_mapReturnCodeToText>
    38de:	9f 93       	push	r25
    38e0:	8f 93       	push	r24
    38e2:	88 eb       	ldi	r24, 0xB8	; 184
    38e4:	94 e0       	ldi	r25, 0x04	; 4
    38e6:	9f 93       	push	r25
    38e8:	8f 93       	push	r24
    38ea:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
    38ee:	0f 90       	pop	r0
    38f0:	0f 90       	pop	r0
    38f2:	0f 90       	pop	r0
    38f4:	0f 90       	pop	r0
    38f6:	0f 90       	pop	r0
    38f8:	0f 90       	pop	r0
    38fa:	cf cf       	rjmp	.-98     	; 0x389a <UpLinkHandler_lora_handler_task+0x44>

000038fc <UpLinkHandler_lora_handler_initialise>:
    38fc:	ef 92       	push	r14
    38fe:	ff 92       	push	r15

static lora_driver_payload_t _uplink_payload;


void UpLinkHandler_lora_handler_initialise(UBaseType_t UpLinkHandler_lora_handler_task_priority)
{
    3900:	0f 93       	push	r16
	xTaskCreate(
    3902:	e1 2c       	mov	r14, r1
    3904:	f1 2c       	mov	r15, r1
    3906:	08 2f       	mov	r16, r24
    3908:	20 e0       	ldi	r18, 0x00	; 0
    390a:	30 e0       	ldi	r19, 0x00	; 0
    390c:	48 e8       	ldi	r20, 0x88	; 136
    390e:	51 e0       	ldi	r21, 0x01	; 1
    3910:	6d ec       	ldi	r22, 0xCD	; 205
    3912:	74 e0       	ldi	r23, 0x04	; 4
    3914:	8b e2       	ldi	r24, 0x2B	; 43
    3916:	9c e1       	ldi	r25, 0x1C	; 28
    3918:	0e 94 75 0e 	call	0x1cea	; 0x1cea <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  UpLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    391c:	0f 91       	pop	r16
    391e:	ff 90       	pop	r15
    3920:	ef 90       	pop	r14
    3922:	08 95       	ret

00003924 <hih8120_handler_initialise>:
int16_t temperatureIn16 = 0;


void hih820_handler_task( void *pvParameters );

void hih8120_handler_initialise(UBaseType_t hih8120_task_priority){
    3924:	ef 92       	push	r14
    3926:	ff 92       	push	r15
    3928:	0f 93       	push	r16
    392a:	08 2f       	mov	r16, r24
	if ( HIH8120_OK == hih8120_initialise() ){
    392c:	eb d0       	rcall	.+470    	; 0x3b04 <hih8120_initialise>
    392e:	81 11       	cpse	r24, r1
    3930:	06 c0       	rjmp	.+12     	; 0x393e <hih8120_handler_initialise+0x1a>
			printf(HIH8120_OK);
    3932:	1f 92       	push	r1
    3934:	1f 92       	push	r1
    3936:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
    393a:	0f 90       	pop	r0
    393c:	0f 90       	pop	r0
	}
	xTaskCreate(
    393e:	e1 2c       	mov	r14, r1
    3940:	f1 2c       	mov	r15, r1
    3942:	20 e0       	ldi	r18, 0x00	; 0
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	40 ec       	ldi	r20, 0xC0	; 192
    3948:	50 e0       	ldi	r21, 0x00	; 0
    394a:	64 ed       	ldi	r22, 0xD4	; 212
    394c:	74 e0       	ldi	r23, 0x04	; 4
    394e:	8f ec       	ldi	r24, 0xCF	; 207
    3950:	9c e1       	ldi	r25, 0x1C	; 28
    3952:	0e 94 75 0e 	call	0x1cea	; 0x1cea <xTaskCreate>
	,  "Hih820Hand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  hih8120_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3956:	0f 91       	pop	r16
    3958:	ff 90       	pop	r15
    395a:	ef 90       	pop	r14
    395c:	08 95       	ret

0000395e <hih820_getHumidityInUint16>:
		}
	}
}

uint16_t hih820_getHumidityInUint16(){
	return humidityIn16/10;
    395e:	20 91 3d 13 	lds	r18, 0x133D	; 0x80133d <humidityIn16>
    3962:	30 91 3e 13 	lds	r19, 0x133E	; 0x80133e <humidityIn16+0x1>
    3966:	ad ec       	ldi	r26, 0xCD	; 205
    3968:	bc ec       	ldi	r27, 0xCC	; 204
    396a:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__umulhisi3>
}
    396e:	96 95       	lsr	r25
    3970:	87 95       	ror	r24
    3972:	96 95       	lsr	r25
    3974:	87 95       	ror	r24
    3976:	96 95       	lsr	r25
    3978:	87 95       	ror	r24
    397a:	08 95       	ret

0000397c <hih820_getTemperatureInUint16>:

int16_t hih820_getTemperatureInUint16(){
	return temperatureIn16/10;
    397c:	80 91 3b 13 	lds	r24, 0x133B	; 0x80133b <temperatureIn16>
    3980:	90 91 3c 13 	lds	r25, 0x133C	; 0x80133c <temperatureIn16+0x1>
    3984:	6a e0       	ldi	r22, 0x0A	; 10
    3986:	70 e0       	ldi	r23, 0x00	; 0
    3988:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <__divmodhi4>
    398c:	cb 01       	movw	r24, r22
}
    398e:	08 95       	ret

00003990 <hih820_aFunctionToSetBits>:
void hih820_aFunctionToSetBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Set bit 0 and bit 4 in xEventGroup. */
  uxBits = xEventGroupSetBits(
    3990:	40 e1       	ldi	r20, 0x10	; 16
    3992:	50 e0       	ldi	r21, 0x00	; 0
    3994:	60 e0       	ldi	r22, 0x00	; 0
    3996:	70 e0       	ldi	r23, 0x00	; 0
    3998:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <xEventGroupSetBits>
    399c:	08 95       	ret

0000399e <hih820_handler_task>:
	,  hih8120_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void hih820_handler_task(void *pvParameters)
{
    399e:	cf 93       	push	r28
    39a0:	df 93       	push	r29
    39a2:	00 d0       	rcall	.+0      	; 0x39a4 <hih820_handler_task+0x6>
    39a4:	1f 92       	push	r1
    39a6:	cd b7       	in	r28, 0x3d	; 61
    39a8:	de b7       	in	r29, 0x3e	; 62
	printf("start1");
    39aa:	8f ed       	ldi	r24, 0xDF	; 223
    39ac:	94 e0       	ldi	r25, 0x04	; 4
    39ae:	9f 93       	push	r25
    39b0:	8f 93       	push	r24
    39b2:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
	(void)pvParameters;
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    39b6:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <xTaskGetTickCount>
    39ba:	69 83       	std	Y+1, r22	; 0x01
    39bc:	7a 83       	std	Y+2, r23	; 0x02
    39be:	8b 83       	std	Y+3, r24	; 0x03
    39c0:	9c 83       	std	Y+4, r25	; 0x04
    39c2:	0f 90       	pop	r0
    39c4:	0f 90       	pop	r0
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    39c6:	48 ea       	ldi	r20, 0xA8	; 168
    39c8:	58 e4       	ldi	r21, 0x48	; 72
    39ca:	60 e0       	ldi	r22, 0x00	; 0
    39cc:	70 e0       	ldi	r23, 0x00	; 0
    39ce:	ce 01       	movw	r24, r28
    39d0:	01 96       	adiw	r24, 0x01	; 1
    39d2:	0e 94 15 11 	call	0x222a	; 0x222a <xTaskDelayUntil>
		printf("start2");
    39d6:	86 ee       	ldi	r24, 0xE6	; 230
    39d8:	94 e0       	ldi	r25, 0x04	; 4
    39da:	9f 93       	push	r25
    39dc:	8f 93       	push	r24
    39de:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
		if (HIH8120_OK == hih8120_wakeup())
    39e2:	a8 d0       	rcall	.+336    	; 0x3b34 <hih8120_wakeup>
    39e4:	0f 90       	pop	r0
    39e6:	0f 90       	pop	r0
    39e8:	81 11       	cpse	r24, r1
    39ea:	ed cf       	rjmp	.-38     	; 0x39c6 <hih820_handler_task+0x28>
		{
			printf("start4");
    39ec:	8d ee       	ldi	r24, 0xED	; 237
    39ee:	94 e0       	ldi	r25, 0x04	; 4
    39f0:	9f 93       	push	r25
    39f2:	8f 93       	push	r24
    39f4:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
			vTaskDelay(50);
    39f8:	62 e3       	ldi	r22, 0x32	; 50
    39fa:	70 e0       	ldi	r23, 0x00	; 0
    39fc:	80 e0       	ldi	r24, 0x00	; 0
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <vTaskDelay>
			if (HIH8120_OK == hih8120_measure())
    3a04:	ac d0       	rcall	.+344    	; 0x3b5e <hih8120_measure>
    3a06:	0f 90       	pop	r0
    3a08:	0f 90       	pop	r0
    3a0a:	81 11       	cpse	r24, r1
    3a0c:	dc cf       	rjmp	.-72     	; 0x39c6 <hih820_handler_task+0x28>
			{
				printf("start5");
    3a0e:	84 ef       	ldi	r24, 0xF4	; 244
    3a10:	94 e0       	ldi	r25, 0x04	; 4
    3a12:	9f 93       	push	r25
    3a14:	8f 93       	push	r24
    3a16:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
				vTaskDelay(1);
    3a1a:	61 e0       	ldi	r22, 0x01	; 1
    3a1c:	70 e0       	ldi	r23, 0x00	; 0
    3a1e:	80 e0       	ldi	r24, 0x00	; 0
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <vTaskDelay>
				humidityIn16 = hih8120_getHumidityPercent_x10();
    3a26:	c1 d0       	rcall	.+386    	; 0x3baa <hih8120_getHumidityPercent_x10>
    3a28:	90 93 3e 13 	sts	0x133E, r25	; 0x80133e <humidityIn16+0x1>
    3a2c:	80 93 3d 13 	sts	0x133D, r24	; 0x80133d <humidityIn16>
				temperatureIn16 = hih8120_getTemperature_x10();
    3a30:	e2 d0       	rcall	.+452    	; 0x3bf6 <hih8120_getTemperature_x10>
    3a32:	90 93 3c 13 	sts	0x133C, r25	; 0x80133c <temperatureIn16+0x1>
    3a36:	80 93 3b 13 	sts	0x133B, r24	; 0x80133b <temperatureIn16>
				printf("Arrived here");
    3a3a:	8b ef       	ldi	r24, 0xFB	; 251
    3a3c:	94 e0       	ldi	r25, 0x04	; 4
    3a3e:	9f 93       	push	r25
    3a40:	8f 93       	push	r24
    3a42:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <printf>
				hih820_aFunctionToSetBits(Application_getEventGroup());
    3a46:	0e 94 08 01 	call	0x210	; 0x210 <Application_getEventGroup>
    3a4a:	a2 df       	rcall	.-188    	; 0x3990 <hih820_aFunctionToSetBits>
    3a4c:	0f 90       	pop	r0
    3a4e:	0f 90       	pop	r0
    3a50:	0f 90       	pop	r0
    3a52:	0f 90       	pop	r0
    3a54:	b8 cf       	rjmp	.-144    	; 0x39c6 <hih820_handler_task+0x28>

00003a56 <main>:
/*-----------------------------------------------------------*/
int main(void)
{
	// Must be done as the very first thing!!
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3a56:	80 e0       	ldi	r24, 0x00	; 0
    3a58:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <stdio_initialise>
	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(6); // Priority 5 for internal task
    3a5c:	86 e0       	ldi	r24, 0x06	; 6
    3a5e:	0e 94 f5 27 	call	0x4fea	; 0x4fea <status_leds_initialise>
	//Initialize Application
	Application_handler_initialise(5);
    3a62:	85 e0       	ldi	r24, 0x05	; 5
    3a64:	0e 94 96 01 	call	0x32c	; 0x32c <Application_handler_initialise>
	//initialize CO2Sensor
	mh_z19_initialise(ser_USART3);
    3a68:	83 e0       	ldi	r24, 0x03	; 3
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	95 d5       	rcall	.+2858   	; 0x4598 <mh_z19_initialise>
	//create CO2 task
	CO2Sensor_handler_initialise(4);
    3a6e:	84 e0       	ldi	r24, 0x04	; 4
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	0e 94 aa 01 	call	0x354	; 0x354 <CO2Sensor_handler_initialise>
	//Create humidity temperature task and start with priority 3
	hih8120_handler_initialise(3);
    3a76:	83 e0       	ldi	r24, 0x03	; 3
    3a78:	55 df       	rcall	.-342    	; 0x3924 <hih8120_handler_initialise>
	//initialize rc_servo
	//rc_servo_initialise();
	// Initialise the LoRaWAN driver with down-link buffer
	downLinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    3a7a:	41 e0       	ldi	r20, 0x01	; 1
    3a7c:	60 e0       	ldi	r22, 0x00	; 0
    3a7e:	70 e0       	ldi	r23, 0x00	; 0
    3a80:	8c e2       	ldi	r24, 0x2C	; 44
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	0e 94 75 0a 	call	0x14ea	; 0x14ea <xStreamBufferGenericCreate>
    3a88:	90 93 75 14 	sts	0x1475, r25	; 0x801475 <downLinkMessageBufferHandle+0x1>
    3a8c:	80 93 74 14 	sts	0x1474, r24	; 0x801474 <downLinkMessageBufferHandle>
	lora_driver_initialise(1, NULL);
    3a90:	60 e0       	ldi	r22, 0x00	; 0
    3a92:	70 e0       	ldi	r23, 0x00	; 0
    3a94:	81 e0       	ldi	r24, 0x01	; 1
	// Create LoRaWAN task and start it up with priority 2
	UpLinkHandler_lora_handler_initialise(2);
    3a96:	d9 d1       	rcall	.+946    	; 0x3e4a <lora_driver_initialise>
    3a98:	82 e0       	ldi	r24, 0x02	; 2
    3a9a:	30 df       	rcall	.-416    	; 0x38fc <UpLinkHandler_lora_handler_initialise>
	//Create LoRaWAN task and start with priority 1
	//DownLinkHandler_lora_handler_initialise(1,downLinkMessageBufferHandle);
	//Create Configuration for Downlink_handler and WindowController
	
	printf("Program Started!!\n");
    3a9c:	88 e0       	ldi	r24, 0x08	; 8
    3a9e:	95 e0       	ldi	r25, 0x05	; 5
    3aa0:	0e 94 6b 2e 	call	0x5cd6	; 0x5cd6 <puts>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    3aa4:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <vTaskStartScheduler>
    3aa8:	ff cf       	rjmp	.-2      	; 0x3aa8 <main+0x52>

00003aaa <_hihTwiCallback>:
    3aaa:	65 30       	cpi	r22, 0x05	; 5
    3aac:	f1 f4       	brne	.+60     	; 0x3aea <_hihTwiCallback+0x40>
    3aae:	fa 01       	movw	r30, r20
    3ab0:	80 81       	ld	r24, Z
    3ab2:	8f 73       	andi	r24, 0x3F	; 63
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	98 2f       	mov	r25, r24
    3ab8:	88 27       	eor	r24, r24
    3aba:	21 81       	ldd	r18, Z+1	; 0x01
    3abc:	82 2b       	or	r24, r18
    3abe:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3ac2:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3ac6:	82 81       	ldd	r24, Z+2	; 0x02
    3ac8:	f0 e4       	ldi	r31, 0x40	; 64
    3aca:	8f 9f       	mul	r24, r31
    3acc:	c0 01       	movw	r24, r0
    3ace:	11 24       	eor	r1, r1
    3ad0:	fa 01       	movw	r30, r20
    3ad2:	23 81       	ldd	r18, Z+3	; 0x03
    3ad4:	26 95       	lsr	r18
    3ad6:	26 95       	lsr	r18
    3ad8:	82 2b       	or	r24, r18
    3ada:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3ade:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3ae2:	81 e0       	ldi	r24, 0x01	; 1
    3ae4:	80 93 3f 13 	sts	0x133F, r24	; 0x80133f <_measuringIsReady>
    3ae8:	08 95       	ret
    3aea:	64 30       	cpi	r22, 0x04	; 4
    3aec:	51 f0       	breq	.+20     	; 0x3b02 <_hihTwiCallback+0x58>
    3aee:	80 e0       	ldi	r24, 0x00	; 0
    3af0:	90 e4       	ldi	r25, 0x40	; 64
    3af2:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3af6:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3afa:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3afe:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3b02:	08 95       	ret

00003b04 <hih8120_initialise>:
    3b04:	0f 93       	push	r16
    3b06:	1f 93       	push	r17
    3b08:	05 e5       	ldi	r16, 0x55	; 85
    3b0a:	1d e1       	ldi	r17, 0x1D	; 29
    3b0c:	20 e0       	ldi	r18, 0x00	; 0
    3b0e:	34 e2       	ldi	r19, 0x24	; 36
    3b10:	44 ef       	ldi	r20, 0xF4	; 244
    3b12:	50 e0       	ldi	r21, 0x00	; 0
    3b14:	60 e0       	ldi	r22, 0x00	; 0
    3b16:	87 e2       	ldi	r24, 0x27	; 39
    3b18:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <twiCreate>
    3b1c:	90 93 41 13 	sts	0x1341, r25	; 0x801341 <_hih8120Handler+0x1>
    3b20:	80 93 40 13 	sts	0x1340, r24	; 0x801340 <_hih8120Handler>
    3b24:	21 e0       	ldi	r18, 0x01	; 1
    3b26:	89 2b       	or	r24, r25
    3b28:	09 f0       	breq	.+2      	; 0x3b2c <hih8120_initialise+0x28>
    3b2a:	20 e0       	ldi	r18, 0x00	; 0
    3b2c:	82 2f       	mov	r24, r18
    3b2e:	1f 91       	pop	r17
    3b30:	0f 91       	pop	r16
    3b32:	08 95       	ret

00003b34 <hih8120_wakeup>:
    3b34:	80 91 40 13 	lds	r24, 0x1340	; 0x801340 <_hih8120Handler>
    3b38:	90 91 41 13 	lds	r25, 0x1341	; 0x801341 <_hih8120Handler+0x1>
    3b3c:	00 97       	sbiw	r24, 0x00	; 0
    3b3e:	59 f0       	breq	.+22     	; 0x3b56 <hih8120_wakeup+0x22>
    3b40:	40 e0       	ldi	r20, 0x00	; 0
    3b42:	60 e0       	ldi	r22, 0x00	; 0
    3b44:	70 e0       	ldi	r23, 0x00	; 0
    3b46:	0e 94 2d 29 	call	0x525a	; 0x525a <twiTransmit>
    3b4a:	84 30       	cpi	r24, 0x04	; 4
    3b4c:	31 f4       	brne	.+12     	; 0x3b5a <hih8120_wakeup+0x26>
    3b4e:	10 92 3f 13 	sts	0x133F, r1	; 0x80133f <_measuringIsReady>
    3b52:	80 e0       	ldi	r24, 0x00	; 0
    3b54:	08 95       	ret
    3b56:	82 e0       	ldi	r24, 0x02	; 2
    3b58:	08 95       	ret
    3b5a:	83 e0       	ldi	r24, 0x03	; 3
    3b5c:	08 95       	ret

00003b5e <hih8120_measure>:
    3b5e:	80 91 40 13 	lds	r24, 0x1340	; 0x801340 <_hih8120Handler>
    3b62:	90 91 41 13 	lds	r25, 0x1341	; 0x801341 <_hih8120Handler+0x1>
    3b66:	00 97       	sbiw	r24, 0x00	; 0
    3b68:	39 f0       	breq	.+14     	; 0x3b78 <hih8120_measure+0x1a>
    3b6a:	64 e0       	ldi	r22, 0x04	; 4
    3b6c:	0e 94 79 29 	call	0x52f2	; 0x52f2 <twiReceive>
    3b70:	85 30       	cpi	r24, 0x05	; 5
    3b72:	21 f0       	breq	.+8      	; 0x3b7c <hih8120_measure+0x1e>
    3b74:	83 e0       	ldi	r24, 0x03	; 3
    3b76:	08 95       	ret
    3b78:	82 e0       	ldi	r24, 0x02	; 2
    3b7a:	08 95       	ret
    3b7c:	80 e0       	ldi	r24, 0x00	; 0
    3b7e:	08 95       	ret

00003b80 <hih8120_getHumidity>:
    3b80:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3b84:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3b88:	80 e0       	ldi	r24, 0x00	; 0
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	0e 94 83 2b 	call	0x5706	; 0x5706 <__floatunsisf>
    3b90:	20 e0       	ldi	r18, 0x00	; 0
    3b92:	30 e0       	ldi	r19, 0x00	; 0
    3b94:	48 ec       	ldi	r20, 0xC8	; 200
    3b96:	52 e4       	ldi	r21, 0x42	; 66
    3b98:	0e 94 11 2c 	call	0x5822	; 0x5822 <__mulsf3>
    3b9c:	20 e0       	ldi	r18, 0x00	; 0
    3b9e:	38 ef       	ldi	r19, 0xF8	; 248
    3ba0:	4f e7       	ldi	r20, 0x7F	; 127
    3ba2:	56 e4       	ldi	r21, 0x46	; 70
    3ba4:	0c 94 ea 2a 	jmp	0x55d4	; 0x55d4 <__divsf3>
    3ba8:	08 95       	ret

00003baa <hih8120_getHumidityPercent_x10>:
    3baa:	ea df       	rcall	.-44     	; 0x3b80 <hih8120_getHumidity>
    3bac:	20 e0       	ldi	r18, 0x00	; 0
    3bae:	30 e0       	ldi	r19, 0x00	; 0
    3bb0:	40 e2       	ldi	r20, 0x20	; 32
    3bb2:	51 e4       	ldi	r21, 0x41	; 65
    3bb4:	0e 94 11 2c 	call	0x5822	; 0x5822 <__mulsf3>
    3bb8:	0e 94 57 2b 	call	0x56ae	; 0x56ae <__fixunssfsi>
    3bbc:	cb 01       	movw	r24, r22
    3bbe:	08 95       	ret

00003bc0 <hih8120_getTemperature>:
    3bc0:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3bc4:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3bc8:	80 e0       	ldi	r24, 0x00	; 0
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	0e 94 83 2b 	call	0x5706	; 0x5706 <__floatunsisf>
    3bd0:	20 e0       	ldi	r18, 0x00	; 0
    3bd2:	30 e0       	ldi	r19, 0x00	; 0
    3bd4:	45 e2       	ldi	r20, 0x25	; 37
    3bd6:	53 e4       	ldi	r21, 0x43	; 67
    3bd8:	0e 94 11 2c 	call	0x5822	; 0x5822 <__mulsf3>
    3bdc:	20 e0       	ldi	r18, 0x00	; 0
    3bde:	38 ef       	ldi	r19, 0xF8	; 248
    3be0:	4f e7       	ldi	r20, 0x7F	; 127
    3be2:	56 e4       	ldi	r21, 0x46	; 70
    3be4:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <__divsf3>
    3be8:	20 e0       	ldi	r18, 0x00	; 0
    3bea:	30 e0       	ldi	r19, 0x00	; 0
    3bec:	40 e2       	ldi	r20, 0x20	; 32
    3bee:	52 e4       	ldi	r21, 0x42	; 66
    3bf0:	0c 94 85 2a 	jmp	0x550a	; 0x550a <__subsf3>
    3bf4:	08 95       	ret

00003bf6 <hih8120_getTemperature_x10>:
    3bf6:	e4 df       	rcall	.-56     	; 0x3bc0 <hih8120_getTemperature>
    3bf8:	20 e0       	ldi	r18, 0x00	; 0
    3bfa:	30 e0       	ldi	r19, 0x00	; 0
    3bfc:	40 e2       	ldi	r20, 0x20	; 32
    3bfe:	51 e4       	ldi	r21, 0x41	; 65
    3c00:	0e 94 11 2c 	call	0x5822	; 0x5822 <__mulsf3>
    3c04:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <__fixsfsi>
    3c08:	cb 01       	movw	r24, r22
    3c0a:	08 95       	ret

00003c0c <_serialCallBack>:
    3c0c:	0f 93       	push	r16
    3c0e:	1f 93       	push	r17
    3c10:	cf 93       	push	r28
    3c12:	df 93       	push	r29
    3c14:	1f 92       	push	r1
    3c16:	1f 92       	push	r1
    3c18:	cd b7       	in	r28, 0x3d	; 61
    3c1a:	de b7       	in	r29, 0x3e	; 62
    3c1c:	8c 01       	movw	r16, r24
    3c1e:	19 82       	std	Y+1, r1	; 0x01
    3c20:	2d c0       	rjmp	.+90     	; 0x3c7c <_serialCallBack+0x70>
    3c22:	e0 91 79 13 	lds	r30, 0x1379	; 0x801379 <rec_buf_inp.2878>
    3c26:	ec 32       	cpi	r30, 0x2C	; 44
    3c28:	50 f4       	brcc	.+20     	; 0x3c3e <_serialCallBack+0x32>
    3c2a:	81 e0       	ldi	r24, 0x01	; 1
    3c2c:	8e 0f       	add	r24, r30
    3c2e:	80 93 79 13 	sts	0x1379, r24	; 0x801379 <rec_buf_inp.2878>
    3c32:	f0 e0       	ldi	r31, 0x00	; 0
    3c34:	e5 55       	subi	r30, 0x55	; 85
    3c36:	fc 4e       	sbci	r31, 0xEC	; 236
    3c38:	8a 81       	ldd	r24, Y+2	; 0x02
    3c3a:	80 83       	st	Z, r24
    3c3c:	02 c0       	rjmp	.+4      	; 0x3c42 <_serialCallBack+0x36>
    3c3e:	10 92 79 13 	sts	0x1379, r1	; 0x801379 <rec_buf_inp.2878>
    3c42:	8a 81       	ldd	r24, Y+2	; 0x02
    3c44:	8a 30       	cpi	r24, 0x0A	; 10
    3c46:	d1 f4       	brne	.+52     	; 0x3c7c <_serialCallBack+0x70>
    3c48:	40 91 79 13 	lds	r20, 0x1379	; 0x801379 <rec_buf_inp.2878>
    3c4c:	50 e0       	ldi	r21, 0x00	; 0
    3c4e:	fa 01       	movw	r30, r20
    3c50:	e7 55       	subi	r30, 0x57	; 87
    3c52:	fc 4e       	sbci	r31, 0xEC	; 236
    3c54:	10 82       	st	Z, r1
    3c56:	41 50       	subi	r20, 0x01	; 1
    3c58:	51 09       	sbc	r21, r1
    3c5a:	9e 01       	movw	r18, r28
    3c5c:	2f 5f       	subi	r18, 0xFF	; 255
    3c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c60:	6b ea       	ldi	r22, 0xAB	; 171
    3c62:	73 e1       	ldi	r23, 0x13	; 19
    3c64:	80 91 7c 13 	lds	r24, 0x137C	; 0x80137c <_serialReplyBufferHandle>
    3c68:	90 91 7d 13 	lds	r25, 0x137D	; 0x80137d <_serialReplyBufferHandle+0x1>
    3c6c:	0e 94 9c 0b 	call	0x1738	; 0x1738 <xStreamBufferSendFromISR>
    3c70:	89 81       	ldd	r24, Y+1	; 0x01
    3c72:	81 11       	cpse	r24, r1
    3c74:	0e 94 b3 05 	call	0xb66	; 0xb66 <vPortYield>
    3c78:	10 92 79 13 	sts	0x1379, r1	; 0x801379 <rec_buf_inp.2878>
    3c7c:	be 01       	movw	r22, r28
    3c7e:	6e 5f       	subi	r22, 0xFE	; 254
    3c80:	7f 4f       	sbci	r23, 0xFF	; 255
    3c82:	c8 01       	movw	r24, r16
    3c84:	15 d6       	rcall	.+3114   	; 0x48b0 <serial_getByte>
    3c86:	88 23       	and	r24, r24
    3c88:	61 f2       	breq	.-104    	; 0x3c22 <_serialCallBack+0x16>
    3c8a:	0f 90       	pop	r0
    3c8c:	0f 90       	pop	r0
    3c8e:	df 91       	pop	r29
    3c90:	cf 91       	pop	r28
    3c92:	1f 91       	pop	r17
    3c94:	0f 91       	pop	r16
    3c96:	08 95       	ret

00003c98 <_uploadMessage>:
    3c98:	0f 93       	push	r16
    3c9a:	1f 93       	push	r17
    3c9c:	cf 93       	push	r28
    3c9e:	df 93       	push	r29
    3ca0:	8c 01       	movw	r16, r24
    3ca2:	eb 01       	movw	r28, r22
    3ca4:	80 91 7c 13 	lds	r24, 0x137C	; 0x80137c <_serialReplyBufferHandle>
    3ca8:	90 91 7d 13 	lds	r25, 0x137D	; 0x80137d <_serialReplyBufferHandle+0x1>
    3cac:	0e 94 a7 0a 	call	0x154e	; 0x154e <xStreamBufferReset>
    3cb0:	b8 01       	movw	r22, r16
    3cb2:	82 e4       	ldi	r24, 0x42	; 66
    3cb4:	93 e1       	ldi	r25, 0x13	; 19
    3cb6:	0e 94 39 2e 	call	0x5c72	; 0x5c72 <strcpy>
    3cba:	20 97       	sbiw	r28, 0x00	; 0
    3cbc:	79 f0       	breq	.+30     	; 0x3cdc <_uploadMessage+0x44>
    3cbe:	e2 e4       	ldi	r30, 0x42	; 66
    3cc0:	f3 e1       	ldi	r31, 0x13	; 19
    3cc2:	01 90       	ld	r0, Z+
    3cc4:	00 20       	and	r0, r0
    3cc6:	e9 f7       	brne	.-6      	; 0x3cc2 <_uploadMessage+0x2a>
    3cc8:	31 97       	sbiw	r30, 0x01	; 1
    3cca:	80 e2       	ldi	r24, 0x20	; 32
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	91 83       	std	Z+1, r25	; 0x01
    3cd0:	80 83       	st	Z, r24
    3cd2:	be 01       	movw	r22, r28
    3cd4:	82 e4       	ldi	r24, 0x42	; 66
    3cd6:	93 e1       	ldi	r25, 0x13	; 19
    3cd8:	0e 94 2e 2e 	call	0x5c5c	; 0x5c5c <strcat>
    3cdc:	e2 e4       	ldi	r30, 0x42	; 66
    3cde:	f3 e1       	ldi	r31, 0x13	; 19
    3ce0:	df 01       	movw	r26, r30
    3ce2:	0d 90       	ld	r0, X+
    3ce4:	00 20       	and	r0, r0
    3ce6:	e9 f7       	brne	.-6      	; 0x3ce2 <_uploadMessage+0x4a>
    3ce8:	11 97       	sbiw	r26, 0x01	; 1
    3cea:	8d e0       	ldi	r24, 0x0D	; 13
    3cec:	9a e0       	ldi	r25, 0x0A	; 10
    3cee:	11 96       	adiw	r26, 0x01	; 1
    3cf0:	9c 93       	st	X, r25
    3cf2:	8e 93       	st	-X, r24
    3cf4:	12 96       	adiw	r26, 0x02	; 2
    3cf6:	1c 92       	st	X, r1
    3cf8:	01 90       	ld	r0, Z+
    3cfa:	00 20       	and	r0, r0
    3cfc:	e9 f7       	brne	.-6      	; 0x3cf8 <_uploadMessage+0x60>
    3cfe:	31 97       	sbiw	r30, 0x01	; 1
    3d00:	e2 54       	subi	r30, 0x42	; 66
    3d02:	f3 41       	sbci	r31, 0x13	; 19
    3d04:	ae 2f       	mov	r26, r30
    3d06:	82 e4       	ldi	r24, 0x42	; 66
    3d08:	93 e1       	ldi	r25, 0x13	; 19
    3d0a:	ac 01       	movw	r20, r24
    3d0c:	6a 2f       	mov	r22, r26
    3d0e:	80 91 7e 13 	lds	r24, 0x137E	; 0x80137e <_rn2483_serial>
    3d12:	90 91 7f 13 	lds	r25, 0x137F	; 0x80137f <_rn2483_serial+0x1>
    3d16:	77 d5       	rcall	.+2798   	; 0x4806 <serial_sendBytes>
    3d18:	81 11       	cpse	r24, r1
    3d1a:	11 c0       	rjmp	.+34     	; 0x3d3e <_uploadMessage+0xa6>
    3d1c:	08 e2       	ldi	r16, 0x28	; 40
    3d1e:	15 e0       	ldi	r17, 0x05	; 5
    3d20:	20 e0       	ldi	r18, 0x00	; 0
    3d22:	30 e0       	ldi	r19, 0x00	; 0
    3d24:	4d e2       	ldi	r20, 0x2D	; 45
    3d26:	50 e0       	ldi	r21, 0x00	; 0
    3d28:	65 e0       	ldi	r22, 0x05	; 5
    3d2a:	74 e1       	ldi	r23, 0x14	; 20
    3d2c:	80 91 7c 13 	lds	r24, 0x137C	; 0x80137c <_serialReplyBufferHandle>
    3d30:	90 91 7d 13 	lds	r25, 0x137D	; 0x80137d <_serialReplyBufferHandle+0x1>
    3d34:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <xStreamBufferReceive>
    3d38:	85 e0       	ldi	r24, 0x05	; 5
    3d3a:	94 e1       	ldi	r25, 0x14	; 20
    3d3c:	02 c0       	rjmp	.+4      	; 0x3d42 <_uploadMessage+0xaa>
    3d3e:	80 e0       	ldi	r24, 0x00	; 0
    3d40:	90 e0       	ldi	r25, 0x00	; 0
    3d42:	df 91       	pop	r29
    3d44:	cf 91       	pop	r28
    3d46:	1f 91       	pop	r17
    3d48:	0f 91       	pop	r16
    3d4a:	08 95       	ret

00003d4c <_reply2ReturnCode>:
    3d4c:	2f 92       	push	r2
    3d4e:	3f 92       	push	r3
    3d50:	4f 92       	push	r4
    3d52:	5f 92       	push	r5
    3d54:	6f 92       	push	r6
    3d56:	7f 92       	push	r7
    3d58:	8f 92       	push	r8
    3d5a:	9f 92       	push	r9
    3d5c:	af 92       	push	r10
    3d5e:	bf 92       	push	r11
    3d60:	cf 92       	push	r12
    3d62:	df 92       	push	r13
    3d64:	ef 92       	push	r14
    3d66:	ff 92       	push	r15
    3d68:	0f 93       	push	r16
    3d6a:	1f 93       	push	r17
    3d6c:	cf 93       	push	r28
    3d6e:	df 93       	push	r29
    3d70:	5c 01       	movw	r10, r24
    3d72:	fc 01       	movw	r30, r24
    3d74:	01 90       	ld	r0, Z+
    3d76:	00 20       	and	r0, r0
    3d78:	e9 f7       	brne	.-6      	; 0x3d74 <_reply2ReturnCode+0x28>
    3d7a:	31 97       	sbiw	r30, 0x01	; 1
    3d7c:	6f 01       	movw	r12, r30
    3d7e:	c8 1a       	sub	r12, r24
    3d80:	d9 0a       	sbc	r13, r25
    3d82:	5c 2c       	mov	r5, r12
    3d84:	0f 2e       	mov	r0, r31
    3d86:	f3 eb       	ldi	r31, 0xB3	; 179
    3d88:	8f 2e       	mov	r8, r31
    3d8a:	f7 e0       	ldi	r31, 0x07	; 7
    3d8c:	9f 2e       	mov	r9, r31
    3d8e:	f0 2d       	mov	r31, r0
    3d90:	e1 2c       	mov	r14, r1
    3d92:	f1 2c       	mov	r15, r1
    3d94:	4c 2c       	mov	r4, r12
    3d96:	37 01       	movw	r6, r14
    3d98:	f4 01       	movw	r30, r8
    3d9a:	01 81       	ldd	r16, Z+1	; 0x01
    3d9c:	12 81       	ldd	r17, Z+2	; 0x02
    3d9e:	e8 01       	movw	r28, r16
    3da0:	09 90       	ld	r0, Y+
    3da2:	00 20       	and	r0, r0
    3da4:	e9 f7       	brne	.-6      	; 0x3da0 <_reply2ReturnCode+0x54>
    3da6:	21 97       	sbiw	r28, 0x01	; 1
    3da8:	c0 1b       	sub	r28, r16
    3daa:	d1 0b       	sbc	r29, r17
    3dac:	3c 2e       	mov	r3, r28
    3dae:	f9 e0       	ldi	r31, 0x09	; 9
    3db0:	cf 16       	cp	r12, r31
    3db2:	d1 04       	cpc	r13, r1
    3db4:	58 f0       	brcs	.+22     	; 0x3dcc <_reply2ReturnCode+0x80>
    3db6:	f4 01       	movw	r30, r8
    3db8:	20 80       	ld	r2, Z
    3dba:	fe e0       	ldi	r31, 0x0E	; 14
    3dbc:	2f 12       	cpse	r2, r31
    3dbe:	06 c0       	rjmp	.+12     	; 0x3dcc <_reply2ReturnCode+0x80>
    3dc0:	b8 01       	movw	r22, r16
    3dc2:	c5 01       	movw	r24, r10
    3dc4:	0e 94 09 2e 	call	0x5c12	; 0x5c12 <strcasestr>
    3dc8:	89 2b       	or	r24, r25
    3dca:	09 f5       	brne	.+66     	; 0x3e0e <_reply2ReturnCode+0xc2>
    3dcc:	44 2d       	mov	r20, r4
    3dce:	35 14       	cp	r3, r5
    3dd0:	08 f4       	brcc	.+2      	; 0x3dd4 <_reply2ReturnCode+0x88>
    3dd2:	4c 2f       	mov	r20, r28
    3dd4:	50 e0       	ldi	r21, 0x00	; 0
    3dd6:	b8 01       	movw	r22, r16
    3dd8:	c5 01       	movw	r24, r10
    3dda:	0e 94 40 2e 	call	0x5c80	; 0x5c80 <strncasecmp>
    3dde:	89 2b       	or	r24, r25
    3de0:	49 f4       	brne	.+18     	; 0x3df4 <_reply2ReturnCode+0xa8>
    3de2:	f3 01       	movw	r30, r6
    3de4:	ee 0f       	add	r30, r30
    3de6:	ff 1f       	adc	r31, r31
    3de8:	e6 0d       	add	r30, r6
    3dea:	f7 1d       	adc	r31, r7
    3dec:	ed 54       	subi	r30, 0x4D	; 77
    3dee:	f8 4f       	sbci	r31, 0xF8	; 248
    3df0:	20 80       	ld	r2, Z
    3df2:	0d c0       	rjmp	.+26     	; 0x3e0e <_reply2ReturnCode+0xc2>
    3df4:	8f ef       	ldi	r24, 0xFF	; 255
    3df6:	e8 1a       	sub	r14, r24
    3df8:	f8 0a       	sbc	r15, r24
    3dfa:	e3 e0       	ldi	r30, 0x03	; 3
    3dfc:	8e 0e       	add	r8, r30
    3dfe:	91 1c       	adc	r9, r1
    3e00:	f1 e1       	ldi	r31, 0x11	; 17
    3e02:	ef 16       	cp	r14, r31
    3e04:	f1 04       	cpc	r15, r1
    3e06:	39 f6       	brne	.-114    	; 0x3d96 <_reply2ReturnCode+0x4a>
    3e08:	68 94       	set
    3e0a:	22 24       	eor	r2, r2
    3e0c:	24 f8       	bld	r2, 4
    3e0e:	82 2d       	mov	r24, r2
    3e10:	df 91       	pop	r29
    3e12:	cf 91       	pop	r28
    3e14:	1f 91       	pop	r17
    3e16:	0f 91       	pop	r16
    3e18:	ff 90       	pop	r15
    3e1a:	ef 90       	pop	r14
    3e1c:	df 90       	pop	r13
    3e1e:	cf 90       	pop	r12
    3e20:	bf 90       	pop	r11
    3e22:	af 90       	pop	r10
    3e24:	9f 90       	pop	r9
    3e26:	8f 90       	pop	r8
    3e28:	7f 90       	pop	r7
    3e2a:	6f 90       	pop	r6
    3e2c:	5f 90       	pop	r5
    3e2e:	4f 90       	pop	r4
    3e30:	3f 90       	pop	r3
    3e32:	2f 90       	pop	r2
    3e34:	08 95       	ret

00003e36 <_uploadMessageRc>:
    3e36:	30 df       	rcall	.-416    	; 0x3c98 <_uploadMessage>
    3e38:	89 cf       	rjmp	.-238    	; 0x3d4c <_reply2ReturnCode>
    3e3a:	08 95       	ret

00003e3c <lora_driver_flushBuffers>:
    3e3c:	80 91 7c 13 	lds	r24, 0x137C	; 0x80137c <_serialReplyBufferHandle>
    3e40:	90 91 7d 13 	lds	r25, 0x137D	; 0x80137d <_serialReplyBufferHandle+0x1>
    3e44:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <xStreamBufferReset>
    3e48:	08 95       	ret

00003e4a <lora_driver_initialise>:
    3e4a:	8f 92       	push	r8
    3e4c:	9f 92       	push	r9
    3e4e:	af 92       	push	r10
    3e50:	cf 92       	push	r12
    3e52:	ef 92       	push	r14
    3e54:	0f 93       	push	r16
    3e56:	1f 93       	push	r17
    3e58:	cf 93       	push	r28
    3e5a:	c8 2f       	mov	r28, r24
    3e5c:	8b 01       	movw	r16, r22
    3e5e:	41 e0       	ldi	r20, 0x01	; 1
    3e60:	60 e0       	ldi	r22, 0x00	; 0
    3e62:	70 e0       	ldi	r23, 0x00	; 0
    3e64:	88 ec       	ldi	r24, 0xC8	; 200
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	0e 94 75 0a 	call	0x14ea	; 0x14ea <xStreamBufferGenericCreate>
    3e6c:	90 93 7d 13 	sts	0x137D, r25	; 0x80137d <_serialReplyBufferHandle+0x1>
    3e70:	80 93 7c 13 	sts	0x137C, r24	; 0x80137c <_serialReplyBufferHandle>
    3e74:	10 93 7b 13 	sts	0x137B, r17	; 0x80137b <_downlinkMessageBuffer+0x1>
    3e78:	00 93 7a 13 	sts	0x137A, r16	; 0x80137a <_downlinkMessageBuffer>
    3e7c:	0f 2e       	mov	r0, r31
    3e7e:	f6 e0       	ldi	r31, 0x06	; 6
    3e80:	8f 2e       	mov	r8, r31
    3e82:	fe e1       	ldi	r31, 0x1E	; 30
    3e84:	9f 2e       	mov	r9, r31
    3e86:	f0 2d       	mov	r31, r0
    3e88:	68 94       	set
    3e8a:	aa 24       	eor	r10, r10
    3e8c:	a6 f8       	bld	r10, 6
    3e8e:	68 94       	set
    3e90:	cc 24       	eor	r12, r12
    3e92:	c6 f8       	bld	r12, 6
    3e94:	e1 2c       	mov	r14, r1
    3e96:	00 e0       	ldi	r16, 0x00	; 0
    3e98:	23 e0       	ldi	r18, 0x03	; 3
    3e9a:	40 e0       	ldi	r20, 0x00	; 0
    3e9c:	51 ee       	ldi	r21, 0xE1	; 225
    3e9e:	60 e0       	ldi	r22, 0x00	; 0
    3ea0:	70 e0       	ldi	r23, 0x00	; 0
    3ea2:	8c 2f       	mov	r24, r28
    3ea4:	e3 d3       	rcall	.+1990   	; 0x466c <serial_create>
    3ea6:	90 93 7f 13 	sts	0x137F, r25	; 0x80137f <_rn2483_serial+0x1>
    3eaa:	80 93 7e 13 	sts	0x137E, r24	; 0x80137e <_rn2483_serial>
    3eae:	e7 e0       	ldi	r30, 0x07	; 7
    3eb0:	f1 e0       	ldi	r31, 0x01	; 1
    3eb2:	80 81       	ld	r24, Z
    3eb4:	80 61       	ori	r24, 0x10	; 16
    3eb6:	80 83       	st	Z, r24
    3eb8:	cf 91       	pop	r28
    3eba:	1f 91       	pop	r17
    3ebc:	0f 91       	pop	r16
    3ebe:	ef 90       	pop	r14
    3ec0:	cf 90       	pop	r12
    3ec2:	af 90       	pop	r10
    3ec4:	9f 90       	pop	r9
    3ec6:	8f 90       	pop	r8
    3ec8:	08 95       	ret

00003eca <lora_driver_resetRn2483>:
    3eca:	88 23       	and	r24, r24
    3ecc:	31 f0       	breq	.+12     	; 0x3eda <lora_driver_resetRn2483+0x10>
    3ece:	e8 e0       	ldi	r30, 0x08	; 8
    3ed0:	f1 e0       	ldi	r31, 0x01	; 1
    3ed2:	80 81       	ld	r24, Z
    3ed4:	8f 7e       	andi	r24, 0xEF	; 239
    3ed6:	80 83       	st	Z, r24
    3ed8:	08 95       	ret
    3eda:	e8 e0       	ldi	r30, 0x08	; 8
    3edc:	f1 e0       	ldi	r31, 0x01	; 1
    3ede:	80 81       	ld	r24, Z
    3ee0:	80 61       	ori	r24, 0x10	; 16
    3ee2:	80 83       	st	Z, r24
    3ee4:	08 95       	ret

00003ee6 <lora_driver_rn2483FactoryReset>:
    3ee6:	60 e0       	ldi	r22, 0x00	; 0
    3ee8:	70 e0       	ldi	r23, 0x00	; 0
    3eea:	89 e3       	ldi	r24, 0x39	; 57
    3eec:	95 e0       	ldi	r25, 0x05	; 5
    3eee:	d4 de       	rcall	.-600    	; 0x3c98 <_uploadMessage>
    3ef0:	e5 e0       	ldi	r30, 0x05	; 5
    3ef2:	f4 e1       	ldi	r31, 0x14	; 20
    3ef4:	01 90       	ld	r0, Z+
    3ef6:	00 20       	and	r0, r0
    3ef8:	e9 f7       	brne	.-6      	; 0x3ef4 <lora_driver_rn2483FactoryReset+0xe>
    3efa:	31 97       	sbiw	r30, 0x01	; 1
    3efc:	e5 50       	subi	r30, 0x05	; 5
    3efe:	f4 41       	sbci	r31, 0x14	; 20
    3f00:	81 e0       	ldi	r24, 0x01	; 1
    3f02:	75 97       	sbiw	r30, 0x15	; 21
    3f04:	08 f0       	brcs	.+2      	; 0x3f08 <lora_driver_rn2483FactoryReset+0x22>
    3f06:	80 e0       	ldi	r24, 0x00	; 0
    3f08:	08 95       	ret

00003f0a <lora_driver_getRn2483Hweui>:
    3f0a:	cf 93       	push	r28
    3f0c:	df 93       	push	r29
    3f0e:	ec 01       	movw	r28, r24
    3f10:	60 e0       	ldi	r22, 0x00	; 0
    3f12:	70 e0       	ldi	r23, 0x00	; 0
    3f14:	8a e4       	ldi	r24, 0x4A	; 74
    3f16:	95 e0       	ldi	r25, 0x05	; 5
    3f18:	bf de       	rcall	.-642    	; 0x3c98 <_uploadMessage>
    3f1a:	e5 e0       	ldi	r30, 0x05	; 5
    3f1c:	f4 e1       	ldi	r31, 0x14	; 20
    3f1e:	01 90       	ld	r0, Z+
    3f20:	00 20       	and	r0, r0
    3f22:	e9 f7       	brne	.-6      	; 0x3f1e <lora_driver_getRn2483Hweui+0x14>
    3f24:	e6 51       	subi	r30, 0x16	; 22
    3f26:	f4 41       	sbci	r31, 0x14	; 20
    3f28:	39 f4       	brne	.+14     	; 0x3f38 <lora_driver_getRn2483Hweui+0x2e>
    3f2a:	65 e0       	ldi	r22, 0x05	; 5
    3f2c:	74 e1       	ldi	r23, 0x14	; 20
    3f2e:	ce 01       	movw	r24, r28
    3f30:	0e 94 39 2e 	call	0x5c72	; 0x5c72 <strcpy>
    3f34:	80 e0       	ldi	r24, 0x00	; 0
    3f36:	02 c0       	rjmp	.+4      	; 0x3f3c <lora_driver_getRn2483Hweui+0x32>
    3f38:	18 82       	st	Y, r1
    3f3a:	81 e0       	ldi	r24, 0x01	; 1
    3f3c:	df 91       	pop	r29
    3f3e:	cf 91       	pop	r28
    3f40:	08 95       	ret

00003f42 <lora_driver_setDeviceIdentifier>:
    3f42:	fc 01       	movw	r30, r24
    3f44:	01 90       	ld	r0, Z+
    3f46:	00 20       	and	r0, r0
    3f48:	e9 f7       	brne	.-6      	; 0x3f44 <lora_driver_setDeviceIdentifier+0x2>
    3f4a:	9f 01       	movw	r18, r30
    3f4c:	21 51       	subi	r18, 0x11	; 17
    3f4e:	31 09       	sbc	r19, r1
    3f50:	28 17       	cp	r18, r24
    3f52:	39 07       	cpc	r19, r25
    3f54:	29 f4       	brne	.+10     	; 0x3f60 <lora_driver_setDeviceIdentifier+0x1e>
    3f56:	bc 01       	movw	r22, r24
    3f58:	88 e7       	ldi	r24, 0x78	; 120
    3f5a:	95 e0       	ldi	r25, 0x05	; 5
    3f5c:	6c cf       	rjmp	.-296    	; 0x3e36 <_uploadMessageRc>
    3f5e:	08 95       	ret
    3f60:	89 e0       	ldi	r24, 0x09	; 9
    3f62:	08 95       	ret

00003f64 <lora_driver_setApplicationIdentifier>:
    3f64:	fc 01       	movw	r30, r24
    3f66:	01 90       	ld	r0, Z+
    3f68:	00 20       	and	r0, r0
    3f6a:	e9 f7       	brne	.-6      	; 0x3f66 <lora_driver_setApplicationIdentifier+0x2>
    3f6c:	9f 01       	movw	r18, r30
    3f6e:	21 51       	subi	r18, 0x11	; 17
    3f70:	31 09       	sbc	r19, r1
    3f72:	28 17       	cp	r18, r24
    3f74:	39 07       	cpc	r19, r25
    3f76:	29 f4       	brne	.+10     	; 0x3f82 <lora_driver_setApplicationIdentifier+0x1e>
    3f78:	bc 01       	movw	r22, r24
    3f7a:	87 e8       	ldi	r24, 0x87	; 135
    3f7c:	95 e0       	ldi	r25, 0x05	; 5
    3f7e:	5b cf       	rjmp	.-330    	; 0x3e36 <_uploadMessageRc>
    3f80:	08 95       	ret
    3f82:	89 e0       	ldi	r24, 0x09	; 9
    3f84:	08 95       	ret

00003f86 <lora_driver_setApplicationKey>:
    3f86:	fc 01       	movw	r30, r24
    3f88:	01 90       	ld	r0, Z+
    3f8a:	00 20       	and	r0, r0
    3f8c:	e9 f7       	brne	.-6      	; 0x3f88 <lora_driver_setApplicationKey+0x2>
    3f8e:	9f 01       	movw	r18, r30
    3f90:	21 52       	subi	r18, 0x21	; 33
    3f92:	31 09       	sbc	r19, r1
    3f94:	28 17       	cp	r18, r24
    3f96:	39 07       	cpc	r19, r25
    3f98:	29 f4       	brne	.+10     	; 0x3fa4 <lora_driver_setApplicationKey+0x1e>
    3f9a:	bc 01       	movw	r22, r24
    3f9c:	86 e9       	ldi	r24, 0x96	; 150
    3f9e:	95 e0       	ldi	r25, 0x05	; 5
    3fa0:	4a cf       	rjmp	.-364    	; 0x3e36 <_uploadMessageRc>
    3fa2:	08 95       	ret
    3fa4:	89 e0       	ldi	r24, 0x09	; 9
    3fa6:	08 95       	ret

00003fa8 <lora_driver_saveMac>:
    3fa8:	60 e0       	ldi	r22, 0x00	; 0
    3faa:	70 e0       	ldi	r23, 0x00	; 0
    3fac:	85 ed       	ldi	r24, 0xD5	; 213
    3fae:	95 e0       	ldi	r25, 0x05	; 5
    3fb0:	42 cf       	rjmp	.-380    	; 0x3e36 <_uploadMessageRc>
    3fb2:	08 95       	ret

00003fb4 <lora_driver_join>:
    3fb4:	0f 93       	push	r16
    3fb6:	1f 93       	push	r17
    3fb8:	e8 2f       	mov	r30, r24
    3fba:	f0 e0       	ldi	r31, 0x00	; 0
    3fbc:	ee 0f       	add	r30, r30
    3fbe:	ff 1f       	adc	r31, r31
    3fc0:	e1 55       	subi	r30, 0x51	; 81
    3fc2:	f8 4f       	sbci	r31, 0xF8	; 248
    3fc4:	60 81       	ld	r22, Z
    3fc6:	71 81       	ldd	r23, Z+1	; 0x01
    3fc8:	8e ed       	ldi	r24, 0xDE	; 222
    3fca:	95 e0       	ldi	r25, 0x05	; 5
    3fcc:	34 df       	rcall	.-408    	; 0x3e36 <_uploadMessageRc>
    3fce:	81 11       	cpse	r24, r1
    3fd0:	14 c0       	rjmp	.+40     	; 0x3ffa <lora_driver_join+0x46>
    3fd2:	08 e2       	ldi	r16, 0x28	; 40
    3fd4:	15 e0       	ldi	r17, 0x05	; 5
    3fd6:	20 e0       	ldi	r18, 0x00	; 0
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	4d e2       	ldi	r20, 0x2D	; 45
    3fdc:	50 e0       	ldi	r21, 0x00	; 0
    3fde:	65 e0       	ldi	r22, 0x05	; 5
    3fe0:	74 e1       	ldi	r23, 0x14	; 20
    3fe2:	80 91 7c 13 	lds	r24, 0x137C	; 0x80137c <_serialReplyBufferHandle>
    3fe6:	90 91 7d 13 	lds	r25, 0x137D	; 0x80137d <_serialReplyBufferHandle+0x1>
    3fea:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <xStreamBufferReceive>
    3fee:	88 23       	and	r24, r24
    3ff0:	21 f0       	breq	.+8      	; 0x3ffa <lora_driver_join+0x46>
    3ff2:	85 e0       	ldi	r24, 0x05	; 5
    3ff4:	94 e1       	ldi	r25, 0x14	; 20
    3ff6:	aa de       	rcall	.-684    	; 0x3d4c <_reply2ReturnCode>
    3ff8:	03 c0       	rjmp	.+6      	; 0x4000 <lora_driver_join+0x4c>
    3ffa:	85 e0       	ldi	r24, 0x05	; 5
    3ffc:	94 e1       	ldi	r25, 0x14	; 20
    3ffe:	a6 de       	rcall	.-692    	; 0x3d4c <_reply2ReturnCode>
    4000:	1f 91       	pop	r17
    4002:	0f 91       	pop	r16
    4004:	08 95       	ret

00004006 <lora_driver_sendUploadMessage>:
    4006:	0f 93       	push	r16
    4008:	1f 93       	push	r17
    400a:	cf 93       	push	r28
    400c:	df 93       	push	r29
    400e:	1f 92       	push	r1
    4010:	cd b7       	in	r28, 0x3d	; 61
    4012:	de b7       	in	r29, 0x3e	; 62
    4014:	db 01       	movw	r26, r22
    4016:	11 96       	adiw	r26, 0x01	; 1
    4018:	9c 91       	ld	r25, X
    401a:	11 97       	sbiw	r26, 0x01	; 1
    401c:	95 31       	cpi	r25, 0x15	; 21
    401e:	08 f0       	brcs	.+2      	; 0x4022 <lora_driver_sendUploadMessage+0x1c>
    4020:	b4 c0       	rjmp	.+360    	; 0x418a <lora_driver_sendUploadMessage+0x184>
    4022:	99 23       	and	r25, r25
    4024:	81 f1       	breq	.+96     	; 0x4086 <lora_driver_sendUploadMessage+0x80>
    4026:	60 e0       	ldi	r22, 0x00	; 0
    4028:	70 e0       	ldi	r23, 0x00	; 0
    402a:	27 2f       	mov	r18, r23
    402c:	30 e0       	ldi	r19, 0x00	; 0
    402e:	46 2f       	mov	r20, r22
    4030:	50 e0       	ldi	r21, 0x00	; 0
    4032:	fd 01       	movw	r30, r26
    4034:	e4 0f       	add	r30, r20
    4036:	f5 1f       	adc	r31, r21
    4038:	92 81       	ldd	r25, Z+2	; 0x02
    403a:	92 95       	swap	r25
    403c:	9f 70       	andi	r25, 0x0F	; 15
    403e:	9a 30       	cpi	r25, 0x0A	; 10
    4040:	10 f0       	brcs	.+4      	; 0x4046 <lora_driver_sendUploadMessage+0x40>
    4042:	99 5c       	subi	r25, 0xC9	; 201
    4044:	01 c0       	rjmp	.+2      	; 0x4048 <lora_driver_sendUploadMessage+0x42>
    4046:	90 5d       	subi	r25, 0xD0	; 208
    4048:	f9 01       	movw	r30, r18
    404a:	ea 56       	subi	r30, 0x6A	; 106
    404c:	fc 4e       	sbci	r31, 0xEC	; 236
    404e:	90 83       	st	Z, r25
    4050:	2f 5f       	subi	r18, 0xFF	; 255
    4052:	3f 4f       	sbci	r19, 0xFF	; 255
    4054:	fd 01       	movw	r30, r26
    4056:	e4 0f       	add	r30, r20
    4058:	f5 1f       	adc	r31, r21
    405a:	92 81       	ldd	r25, Z+2	; 0x02
    405c:	9f 70       	andi	r25, 0x0F	; 15
    405e:	49 2f       	mov	r20, r25
    4060:	50 e0       	ldi	r21, 0x00	; 0
    4062:	4a 30       	cpi	r20, 0x0A	; 10
    4064:	51 05       	cpc	r21, r1
    4066:	14 f0       	brlt	.+4      	; 0x406c <lora_driver_sendUploadMessage+0x66>
    4068:	99 5c       	subi	r25, 0xC9	; 201
    406a:	01 c0       	rjmp	.+2      	; 0x406e <lora_driver_sendUploadMessage+0x68>
    406c:	90 5d       	subi	r25, 0xD0	; 208
    406e:	f9 01       	movw	r30, r18
    4070:	ea 56       	subi	r30, 0x6A	; 106
    4072:	fc 4e       	sbci	r31, 0xEC	; 236
    4074:	90 83       	st	Z, r25
    4076:	7e 5f       	subi	r23, 0xFE	; 254
    4078:	6f 5f       	subi	r22, 0xFF	; 255
    407a:	11 96       	adiw	r26, 0x01	; 1
    407c:	9c 91       	ld	r25, X
    407e:	11 97       	sbiw	r26, 0x01	; 1
    4080:	69 17       	cp	r22, r25
    4082:	98 f2       	brcs	.-90     	; 0x402a <lora_driver_sendUploadMessage+0x24>
    4084:	01 c0       	rjmp	.+2      	; 0x4088 <lora_driver_sendUploadMessage+0x82>
    4086:	70 e0       	ldi	r23, 0x00	; 0
    4088:	e7 2f       	mov	r30, r23
    408a:	f0 e0       	ldi	r31, 0x00	; 0
    408c:	ea 56       	subi	r30, 0x6A	; 106
    408e:	fc 4e       	sbci	r31, 0xEC	; 236
    4090:	10 82       	st	Z, r1
    4092:	4c 91       	ld	r20, X
    4094:	81 11       	cpse	r24, r1
    4096:	03 c0       	rjmp	.+6      	; 0x409e <lora_driver_sendUploadMessage+0x98>
    4098:	87 ee       	ldi	r24, 0xE7	; 231
    409a:	95 e0       	ldi	r25, 0x05	; 5
    409c:	02 c0       	rjmp	.+4      	; 0x40a2 <lora_driver_sendUploadMessage+0x9c>
    409e:	89 ee       	ldi	r24, 0xE9	; 233
    40a0:	95 e0       	ldi	r25, 0x05	; 5
    40a2:	26 e9       	ldi	r18, 0x96	; 150
    40a4:	33 e1       	ldi	r19, 0x13	; 19
    40a6:	3f 93       	push	r19
    40a8:	2f 93       	push	r18
    40aa:	1f 92       	push	r1
    40ac:	4f 93       	push	r20
    40ae:	9f 93       	push	r25
    40b0:	8f 93       	push	r24
    40b2:	8d ee       	ldi	r24, 0xED	; 237
    40b4:	95 e0       	ldi	r25, 0x05	; 5
    40b6:	9f 93       	push	r25
    40b8:	8f 93       	push	r24
    40ba:	88 ed       	ldi	r24, 0xD8	; 216
    40bc:	93 e1       	ldi	r25, 0x13	; 19
    40be:	9f 93       	push	r25
    40c0:	8f 93       	push	r24
    40c2:	0e 94 9b 2e 	call	0x5d36	; 0x5d36 <sprintf>
    40c6:	60 e0       	ldi	r22, 0x00	; 0
    40c8:	70 e0       	ldi	r23, 0x00	; 0
    40ca:	88 ed       	ldi	r24, 0xD8	; 216
    40cc:	93 e1       	ldi	r25, 0x13	; 19
    40ce:	b3 de       	rcall	.-666    	; 0x3e36 <_uploadMessageRc>
    40d0:	0f b6       	in	r0, 0x3f	; 63
    40d2:	f8 94       	cli
    40d4:	de bf       	out	0x3e, r29	; 62
    40d6:	0f be       	out	0x3f, r0	; 63
    40d8:	cd bf       	out	0x3d, r28	; 61
    40da:	81 11       	cpse	r24, r1
    40dc:	59 c0       	rjmp	.+178    	; 0x4190 <lora_driver_sendUploadMessage+0x18a>
    40de:	08 e2       	ldi	r16, 0x28	; 40
    40e0:	15 e0       	ldi	r17, 0x05	; 5
    40e2:	20 e0       	ldi	r18, 0x00	; 0
    40e4:	30 e0       	ldi	r19, 0x00	; 0
    40e6:	4d e2       	ldi	r20, 0x2D	; 45
    40e8:	50 e0       	ldi	r21, 0x00	; 0
    40ea:	65 e0       	ldi	r22, 0x05	; 5
    40ec:	74 e1       	ldi	r23, 0x14	; 20
    40ee:	80 91 7c 13 	lds	r24, 0x137C	; 0x80137c <_serialReplyBufferHandle>
    40f2:	90 91 7d 13 	lds	r25, 0x137D	; 0x80137d <_serialReplyBufferHandle+0x1>
    40f6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <xStreamBufferReceive>
    40fa:	88 23       	and	r24, r24
    40fc:	09 f4       	brne	.+2      	; 0x4100 <lora_driver_sendUploadMessage+0xfa>
    40fe:	47 c0       	rjmp	.+142    	; 0x418e <lora_driver_sendUploadMessage+0x188>
    4100:	85 e0       	ldi	r24, 0x05	; 5
    4102:	94 e1       	ldi	r25, 0x14	; 20
    4104:	23 de       	rcall	.-954    	; 0x3d4c <_reply2ReturnCode>
    4106:	8e 30       	cpi	r24, 0x0E	; 14
    4108:	09 f0       	breq	.+2      	; 0x410c <lora_driver_sendUploadMessage+0x106>
    410a:	42 c0       	rjmp	.+132    	; 0x4190 <lora_driver_sendUploadMessage+0x18a>
    410c:	87 e0       	ldi	r24, 0x07	; 7
    410e:	89 83       	std	Y+1, r24	; 0x01
    4110:	80 91 7a 13 	lds	r24, 0x137A	; 0x80137a <_downlinkMessageBuffer>
    4114:	90 91 7b 13 	lds	r25, 0x137B	; 0x80137b <_downlinkMessageBuffer+0x1>
    4118:	89 2b       	or	r24, r25
    411a:	a9 f1       	breq	.+106    	; 0x4186 <lora_driver_sendUploadMessage+0x180>
    411c:	be 01       	movw	r22, r28
    411e:	6f 5f       	subi	r22, 0xFF	; 255
    4120:	7f 4f       	sbci	r23, 0xFF	; 255
    4122:	85 e0       	ldi	r24, 0x05	; 5
    4124:	94 e1       	ldi	r25, 0x14	; 20
    4126:	68 d1       	rcall	.+720    	; 0x43f8 <decode_port_no>
    4128:	80 93 80 13 	sts	0x1380, r24	; 0x801380 <_downlinkPayload>
    412c:	e9 81       	ldd	r30, Y+1	; 0x01
    412e:	f0 e0       	ldi	r31, 0x00	; 0
    4130:	eb 5f       	subi	r30, 0xFB	; 251
    4132:	fb 4e       	sbci	r31, 0xEB	; 235
    4134:	df 01       	movw	r26, r30
    4136:	0d 90       	ld	r0, X+
    4138:	00 20       	and	r0, r0
    413a:	e9 f7       	brne	.-6      	; 0x4136 <lora_driver_sendUploadMessage+0x130>
    413c:	11 97       	sbiw	r26, 0x01	; 1
    413e:	ae 1b       	sub	r26, r30
    4140:	bf 0b       	sbc	r27, r31
    4142:	aa 23       	and	r26, r26
    4144:	91 f0       	breq	.+36     	; 0x416a <lora_driver_sendUploadMessage+0x164>
    4146:	bb 27       	eor	r27, r27
    4148:	cd 01       	movw	r24, r26
    414a:	01 97       	sbiw	r24, 0x01	; 1
    414c:	9c 01       	movw	r18, r24
    414e:	12 f4       	brpl	.+4      	; 0x4154 <lora_driver_sendUploadMessage+0x14e>
    4150:	2f 5f       	subi	r18, 0xFF	; 255
    4152:	3f 4f       	sbci	r19, 0xFF	; 255
    4154:	35 95       	asr	r19
    4156:	27 95       	ror	r18
    4158:	20 93 81 13 	sts	0x1381, r18	; 0x801381 <_downlinkPayload+0x1>
    415c:	af 01       	movw	r20, r30
    415e:	4f 5f       	subi	r20, 0xFF	; 255
    4160:	5f 4f       	sbci	r21, 0xFF	; 255
    4162:	64 e1       	ldi	r22, 0x14	; 20
    4164:	82 e8       	ldi	r24, 0x82	; 130
    4166:	93 e1       	ldi	r25, 0x13	; 19
    4168:	73 d1       	rcall	.+742    	; 0x4450 <decode_hexadecimal_string_bytes>
    416a:	01 e0       	ldi	r16, 0x01	; 1
    416c:	10 e0       	ldi	r17, 0x00	; 0
    416e:	20 e0       	ldi	r18, 0x00	; 0
    4170:	30 e0       	ldi	r19, 0x00	; 0
    4172:	46 e1       	ldi	r20, 0x16	; 22
    4174:	50 e0       	ldi	r21, 0x00	; 0
    4176:	60 e8       	ldi	r22, 0x80	; 128
    4178:	73 e1       	ldi	r23, 0x13	; 19
    417a:	80 91 7a 13 	lds	r24, 0x137A	; 0x80137a <_downlinkMessageBuffer>
    417e:	90 91 7b 13 	lds	r25, 0x137B	; 0x80137b <_downlinkMessageBuffer+0x1>
    4182:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <xStreamBufferSend>
    4186:	8e e0       	ldi	r24, 0x0E	; 14
    4188:	03 c0       	rjmp	.+6      	; 0x4190 <lora_driver_sendUploadMessage+0x18a>
    418a:	84 e1       	ldi	r24, 0x14	; 20
    418c:	01 c0       	rjmp	.+2      	; 0x4190 <lora_driver_sendUploadMessage+0x18a>
    418e:	80 e0       	ldi	r24, 0x00	; 0
    4190:	0f 90       	pop	r0
    4192:	df 91       	pop	r29
    4194:	cf 91       	pop	r28
    4196:	1f 91       	pop	r17
    4198:	0f 91       	pop	r16
    419a:	08 95       	ret

0000419c <lora_driver_setAdaptiveDataRate>:
    419c:	81 30       	cpi	r24, 0x01	; 1
    419e:	19 f0       	breq	.+6      	; 0x41a6 <lora_driver_setAdaptiveDataRate+0xa>
    41a0:	6d ef       	ldi	r22, 0xFD	; 253
    41a2:	75 e0       	ldi	r23, 0x05	; 5
    41a4:	02 c0       	rjmp	.+4      	; 0x41aa <lora_driver_setAdaptiveDataRate+0xe>
    41a6:	66 ed       	ldi	r22, 0xD6	; 214
    41a8:	76 e0       	ldi	r23, 0x06	; 6
    41aa:	81 e0       	ldi	r24, 0x01	; 1
    41ac:	96 e0       	ldi	r25, 0x06	; 6
    41ae:	43 ce       	rjmp	.-890    	; 0x3e36 <_uploadMessageRc>
    41b0:	08 95       	ret

000041b2 <lora_driver_setReceiveDelay>:
    41b2:	9f 93       	push	r25
    41b4:	8f 93       	push	r24
    41b6:	82 e3       	ldi	r24, 0x32	; 50
    41b8:	96 e0       	ldi	r25, 0x06	; 6
    41ba:	9f 93       	push	r25
    41bc:	8f 93       	push	r24
    41be:	88 ed       	ldi	r24, 0xD8	; 216
    41c0:	93 e1       	ldi	r25, 0x13	; 19
    41c2:	9f 93       	push	r25
    41c4:	8f 93       	push	r24
    41c6:	0e 94 9b 2e 	call	0x5d36	; 0x5d36 <sprintf>
    41ca:	60 e0       	ldi	r22, 0x00	; 0
    41cc:	70 e0       	ldi	r23, 0x00	; 0
    41ce:	88 ed       	ldi	r24, 0xD8	; 216
    41d0:	93 e1       	ldi	r25, 0x13	; 19
    41d2:	31 de       	rcall	.-926    	; 0x3e36 <_uploadMessageRc>
    41d4:	0f 90       	pop	r0
    41d6:	0f 90       	pop	r0
    41d8:	0f 90       	pop	r0
    41da:	0f 90       	pop	r0
    41dc:	0f 90       	pop	r0
    41de:	0f 90       	pop	r0
    41e0:	08 95       	ret

000041e2 <lora_driver_configureToEu868>:
    41e2:	2f 92       	push	r2
    41e4:	3f 92       	push	r3
    41e6:	4f 92       	push	r4
    41e8:	5f 92       	push	r5
    41ea:	6f 92       	push	r6
    41ec:	7f 92       	push	r7
    41ee:	8f 92       	push	r8
    41f0:	9f 92       	push	r9
    41f2:	af 92       	push	r10
    41f4:	bf 92       	push	r11
    41f6:	cf 92       	push	r12
    41f8:	df 92       	push	r13
    41fa:	ef 92       	push	r14
    41fc:	ff 92       	push	r15
    41fe:	0f 93       	push	r16
    4200:	1f 93       	push	r17
    4202:	cf 93       	push	r28
    4204:	df 93       	push	r29
    4206:	cd b7       	in	r28, 0x3d	; 61
    4208:	de b7       	in	r29, 0x3e	; 62
    420a:	a0 97       	sbiw	r28, 0x20	; 32
    420c:	0f b6       	in	r0, 0x3f	; 63
    420e:	f8 94       	cli
    4210:	de bf       	out	0x3e, r29	; 62
    4212:	0f be       	out	0x3f, r0	; 63
    4214:	cd bf       	out	0x3d, r28	; 61
    4216:	6f e5       	ldi	r22, 0x5F	; 95
    4218:	76 e0       	ldi	r23, 0x06	; 6
    421a:	8b e6       	ldi	r24, 0x6B	; 107
    421c:	96 e0       	ldi	r25, 0x06	; 6
    421e:	3c dd       	rcall	.-1416   	; 0x3c98 <_uploadMessage>
    4220:	95 dd       	rcall	.-1238   	; 0x3d4c <_reply2ReturnCode>
    4222:	81 11       	cpse	r24, r1
    4224:	a3 c0       	rjmp	.+326    	; 0x436c <lora_driver_configureToEu868+0x18a>
    4226:	80 e2       	ldi	r24, 0x20	; 32
    4228:	e2 e2       	ldi	r30, 0x22	; 34
    422a:	f2 e0       	ldi	r31, 0x02	; 2
    422c:	de 01       	movw	r26, r28
    422e:	11 96       	adiw	r26, 0x01	; 1
    4230:	01 90       	ld	r0, Z+
    4232:	0d 92       	st	X+, r0
    4234:	8a 95       	dec	r24
    4236:	e1 f7       	brne	.-8      	; 0x4230 <lora_driver_configureToEu868+0x4e>
    4238:	9e 01       	movw	r18, r28
    423a:	2f 5f       	subi	r18, 0xFF	; 255
    423c:	3f 4f       	sbci	r19, 0xFF	; 255
    423e:	69 01       	movw	r12, r18
    4240:	e1 2c       	mov	r14, r1
    4242:	f1 2c       	mov	r15, r1
    4244:	0f 2e       	mov	r0, r31
    4246:	f7 e7       	ldi	r31, 0x77	; 119
    4248:	af 2e       	mov	r10, r31
    424a:	f6 e0       	ldi	r31, 0x06	; 6
    424c:	bf 2e       	mov	r11, r31
    424e:	f0 2d       	mov	r31, r0
    4250:	08 ed       	ldi	r16, 0xD8	; 216
    4252:	13 e1       	ldi	r17, 0x13	; 19
    4254:	0f 2e       	mov	r0, r31
    4256:	f0 e9       	ldi	r31, 0x90	; 144
    4258:	4f 2e       	mov	r4, r31
    425a:	f6 e0       	ldi	r31, 0x06	; 6
    425c:	5f 2e       	mov	r5, r31
    425e:	f0 2d       	mov	r31, r0
    4260:	0f 2e       	mov	r0, r31
    4262:	f7 ea       	ldi	r31, 0xA7	; 167
    4264:	8f 2e       	mov	r8, r31
    4266:	f6 e0       	ldi	r31, 0x06	; 6
    4268:	9f 2e       	mov	r9, r31
    426a:	f0 2d       	mov	r31, r0
    426c:	0f 2e       	mov	r0, r31
    426e:	f1 ec       	ldi	r31, 0xC1	; 193
    4270:	6f 2e       	mov	r6, r31
    4272:	f6 e0       	ldi	r31, 0x06	; 6
    4274:	7f 2e       	mov	r7, r31
    4276:	f0 2d       	mov	r31, r0
    4278:	3e 2c       	mov	r3, r14
    427a:	2f 2c       	mov	r2, r15
    427c:	ff 92       	push	r15
    427e:	ef 92       	push	r14
    4280:	bf 92       	push	r11
    4282:	af 92       	push	r10
    4284:	1f 93       	push	r17
    4286:	0f 93       	push	r16
    4288:	0e 94 9b 2e 	call	0x5d36	; 0x5d36 <sprintf>
    428c:	60 e0       	ldi	r22, 0x00	; 0
    428e:	70 e0       	ldi	r23, 0x00	; 0
    4290:	c8 01       	movw	r24, r16
    4292:	02 dd       	rcall	.-1532   	; 0x3c98 <_uploadMessage>
    4294:	5b dd       	rcall	.-1354   	; 0x3d4c <_reply2ReturnCode>
    4296:	0f 90       	pop	r0
    4298:	0f 90       	pop	r0
    429a:	0f 90       	pop	r0
    429c:	0f 90       	pop	r0
    429e:	0f 90       	pop	r0
    42a0:	0f 90       	pop	r0
    42a2:	81 11       	cpse	r24, r1
    42a4:	63 c0       	rjmp	.+198    	; 0x436c <lora_driver_configureToEu868+0x18a>
    42a6:	32 e0       	ldi	r19, 0x02	; 2
    42a8:	3e 15       	cp	r19, r14
    42aa:	e8 f4       	brcc	.+58     	; 0x42e6 <lora_driver_configureToEu868+0x104>
    42ac:	f6 01       	movw	r30, r12
    42ae:	83 81       	ldd	r24, Z+3	; 0x03
    42b0:	8f 93       	push	r24
    42b2:	82 81       	ldd	r24, Z+2	; 0x02
    42b4:	8f 93       	push	r24
    42b6:	81 81       	ldd	r24, Z+1	; 0x01
    42b8:	8f 93       	push	r24
    42ba:	80 81       	ld	r24, Z
    42bc:	8f 93       	push	r24
    42be:	ff 92       	push	r15
    42c0:	ef 92       	push	r14
    42c2:	5f 92       	push	r5
    42c4:	4f 92       	push	r4
    42c6:	1f 93       	push	r17
    42c8:	0f 93       	push	r16
    42ca:	0e 94 9b 2e 	call	0x5d36	; 0x5d36 <sprintf>
    42ce:	60 e0       	ldi	r22, 0x00	; 0
    42d0:	70 e0       	ldi	r23, 0x00	; 0
    42d2:	c8 01       	movw	r24, r16
    42d4:	e1 dc       	rcall	.-1598   	; 0x3c98 <_uploadMessage>
    42d6:	3a dd       	rcall	.-1420   	; 0x3d4c <_reply2ReturnCode>
    42d8:	0f b6       	in	r0, 0x3f	; 63
    42da:	f8 94       	cli
    42dc:	de bf       	out	0x3e, r29	; 62
    42de:	0f be       	out	0x3f, r0	; 63
    42e0:	cd bf       	out	0x3d, r28	; 61
    42e2:	81 11       	cpse	r24, r1
    42e4:	43 c0       	rjmp	.+134    	; 0x436c <lora_driver_configureToEu868+0x18a>
    42e6:	2f 92       	push	r2
    42e8:	3f 92       	push	r3
    42ea:	9f 92       	push	r9
    42ec:	8f 92       	push	r8
    42ee:	1f 93       	push	r17
    42f0:	0f 93       	push	r16
    42f2:	0e 94 9b 2e 	call	0x5d36	; 0x5d36 <sprintf>
    42f6:	60 e0       	ldi	r22, 0x00	; 0
    42f8:	70 e0       	ldi	r23, 0x00	; 0
    42fa:	c8 01       	movw	r24, r16
    42fc:	cd dc       	rcall	.-1638   	; 0x3c98 <_uploadMessage>
    42fe:	26 dd       	rcall	.-1460   	; 0x3d4c <_reply2ReturnCode>
    4300:	0f 90       	pop	r0
    4302:	0f 90       	pop	r0
    4304:	0f 90       	pop	r0
    4306:	0f 90       	pop	r0
    4308:	0f 90       	pop	r0
    430a:	0f 90       	pop	r0
    430c:	81 11       	cpse	r24, r1
    430e:	2e c0       	rjmp	.+92     	; 0x436c <lora_driver_configureToEu868+0x18a>
    4310:	2f 92       	push	r2
    4312:	3f 92       	push	r3
    4314:	7f 92       	push	r7
    4316:	6f 92       	push	r6
    4318:	1f 93       	push	r17
    431a:	0f 93       	push	r16
    431c:	0e 94 9b 2e 	call	0x5d36	; 0x5d36 <sprintf>
    4320:	60 e0       	ldi	r22, 0x00	; 0
    4322:	70 e0       	ldi	r23, 0x00	; 0
    4324:	c8 01       	movw	r24, r16
    4326:	b8 dc       	rcall	.-1680   	; 0x3c98 <_uploadMessage>
    4328:	11 dd       	rcall	.-1502   	; 0x3d4c <_reply2ReturnCode>
    432a:	0f 90       	pop	r0
    432c:	0f 90       	pop	r0
    432e:	0f 90       	pop	r0
    4330:	0f 90       	pop	r0
    4332:	0f 90       	pop	r0
    4334:	0f 90       	pop	r0
    4336:	81 11       	cpse	r24, r1
    4338:	19 c0       	rjmp	.+50     	; 0x436c <lora_driver_configureToEu868+0x18a>
    433a:	3f ef       	ldi	r19, 0xFF	; 255
    433c:	e3 1a       	sub	r14, r19
    433e:	f3 0a       	sbc	r15, r19
    4340:	84 e0       	ldi	r24, 0x04	; 4
    4342:	c8 0e       	add	r12, r24
    4344:	d1 1c       	adc	r13, r1
    4346:	98 e0       	ldi	r25, 0x08	; 8
    4348:	e9 16       	cp	r14, r25
    434a:	f1 04       	cpc	r15, r1
    434c:	09 f0       	breq	.+2      	; 0x4350 <lora_driver_configureToEu868+0x16e>
    434e:	94 cf       	rjmp	.-216    	; 0x4278 <lora_driver_configureToEu868+0x96>
    4350:	60 e0       	ldi	r22, 0x00	; 0
    4352:	70 e0       	ldi	r23, 0x00	; 0
    4354:	89 ed       	ldi	r24, 0xD9	; 217
    4356:	96 e0       	ldi	r25, 0x06	; 6
    4358:	9f dc       	rcall	.-1730   	; 0x3c98 <_uploadMessage>
    435a:	f8 dc       	rcall	.-1552   	; 0x3d4c <_reply2ReturnCode>
    435c:	81 11       	cpse	r24, r1
    435e:	06 c0       	rjmp	.+12     	; 0x436c <lora_driver_configureToEu868+0x18a>
    4360:	60 e0       	ldi	r22, 0x00	; 0
    4362:	70 e0       	ldi	r23, 0x00	; 0
    4364:	8a ee       	ldi	r24, 0xEA	; 234
    4366:	96 e0       	ldi	r25, 0x06	; 6
    4368:	97 dc       	rcall	.-1746   	; 0x3c98 <_uploadMessage>
    436a:	f0 dc       	rcall	.-1568   	; 0x3d4c <_reply2ReturnCode>
    436c:	a0 96       	adiw	r28, 0x20	; 32
    436e:	0f b6       	in	r0, 0x3f	; 63
    4370:	f8 94       	cli
    4372:	de bf       	out	0x3e, r29	; 62
    4374:	0f be       	out	0x3f, r0	; 63
    4376:	cd bf       	out	0x3d, r28	; 61
    4378:	df 91       	pop	r29
    437a:	cf 91       	pop	r28
    437c:	1f 91       	pop	r17
    437e:	0f 91       	pop	r16
    4380:	ff 90       	pop	r15
    4382:	ef 90       	pop	r14
    4384:	df 90       	pop	r13
    4386:	cf 90       	pop	r12
    4388:	bf 90       	pop	r11
    438a:	af 90       	pop	r10
    438c:	9f 90       	pop	r9
    438e:	8f 90       	pop	r8
    4390:	7f 90       	pop	r7
    4392:	6f 90       	pop	r6
    4394:	5f 90       	pop	r5
    4396:	4f 90       	pop	r4
    4398:	3f 90       	pop	r3
    439a:	2f 90       	pop	r2
    439c:	08 95       	ret

0000439e <lora_driver_setOtaaIdentity>:
    439e:	ef 92       	push	r14
    43a0:	ff 92       	push	r15
    43a2:	0f 93       	push	r16
    43a4:	1f 93       	push	r17
    43a6:	cf 93       	push	r28
    43a8:	df 93       	push	r29
    43aa:	ec 01       	movw	r28, r24
    43ac:	8b 01       	movw	r16, r22
    43ae:	7a 01       	movw	r14, r20
    43b0:	81 e0       	ldi	r24, 0x01	; 1
    43b2:	f4 de       	rcall	.-536    	; 0x419c <lora_driver_setAdaptiveDataRate>
    43b4:	81 11       	cpse	r24, r1
    43b6:	0d c0       	rjmp	.+26     	; 0x43d2 <lora_driver_setOtaaIdentity+0x34>
    43b8:	ce 01       	movw	r24, r28
    43ba:	d4 dd       	rcall	.-1112   	; 0x3f64 <lora_driver_setApplicationIdentifier>
    43bc:	81 11       	cpse	r24, r1
    43be:	09 c0       	rjmp	.+18     	; 0x43d2 <lora_driver_setOtaaIdentity+0x34>
    43c0:	c8 01       	movw	r24, r16
    43c2:	e1 dd       	rcall	.-1086   	; 0x3f86 <lora_driver_setApplicationKey>
    43c4:	81 11       	cpse	r24, r1
    43c6:	05 c0       	rjmp	.+10     	; 0x43d2 <lora_driver_setOtaaIdentity+0x34>
    43c8:	c7 01       	movw	r24, r14
    43ca:	bb dd       	rcall	.-1162   	; 0x3f42 <lora_driver_setDeviceIdentifier>
    43cc:	81 11       	cpse	r24, r1
    43ce:	01 c0       	rjmp	.+2      	; 0x43d2 <lora_driver_setOtaaIdentity+0x34>
    43d0:	eb dd       	rcall	.-1066   	; 0x3fa8 <lora_driver_saveMac>
    43d2:	df 91       	pop	r29
    43d4:	cf 91       	pop	r28
    43d6:	1f 91       	pop	r17
    43d8:	0f 91       	pop	r16
    43da:	ff 90       	pop	r15
    43dc:	ef 90       	pop	r14
    43de:	08 95       	ret

000043e0 <lora_driver_mapReturnCodeToText>:
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	fc 01       	movw	r30, r24
    43e4:	ee 0f       	add	r30, r30
    43e6:	ff 1f       	adc	r31, r31
    43e8:	8e 0f       	add	r24, r30
    43ea:	9f 1f       	adc	r25, r31
    43ec:	fc 01       	movw	r30, r24
    43ee:	ed 54       	subi	r30, 0x4D	; 77
    43f0:	f8 4f       	sbci	r31, 0xF8	; 248
    43f2:	81 81       	ldd	r24, Z+1	; 0x01
    43f4:	92 81       	ldd	r25, Z+2	; 0x02
    43f6:	08 95       	ret

000043f8 <decode_port_no>:
    43f8:	dc 01       	movw	r26, r24
    43fa:	00 97       	sbiw	r24, 0x00	; 0
    43fc:	29 f1       	breq	.+74     	; 0x4448 <decode_port_no+0x50>
    43fe:	fb 01       	movw	r30, r22
    4400:	20 81       	ld	r18, Z
    4402:	fc 01       	movw	r30, r24
    4404:	01 90       	ld	r0, Z+
    4406:	00 20       	and	r0, r0
    4408:	e9 f7       	brne	.-6      	; 0x4404 <decode_port_no+0xc>
    440a:	31 97       	sbiw	r30, 0x01	; 1
    440c:	e8 1b       	sub	r30, r24
    440e:	f9 0b       	sbc	r31, r25
    4410:	82 2f       	mov	r24, r18
    4412:	90 e0       	ldi	r25, 0x00	; 0
    4414:	e8 17       	cp	r30, r24
    4416:	f9 07       	cpc	r31, r25
    4418:	c8 f0       	brcs	.+50     	; 0x444c <decode_port_no+0x54>
    441a:	80 e0       	ldi	r24, 0x00	; 0
    441c:	08 c0       	rjmp	.+16     	; 0x442e <decode_port_no+0x36>
    441e:	88 0f       	add	r24, r24
    4420:	38 2f       	mov	r19, r24
    4422:	33 0f       	add	r19, r19
    4424:	33 0f       	add	r19, r19
    4426:	83 0f       	add	r24, r19
    4428:	80 53       	subi	r24, 0x30	; 48
    442a:	89 0f       	add	r24, r25
    442c:	2f 5f       	subi	r18, 0xFF	; 255
    442e:	fd 01       	movw	r30, r26
    4430:	e2 0f       	add	r30, r18
    4432:	f1 1d       	adc	r31, r1
    4434:	90 81       	ld	r25, Z
    4436:	30 ed       	ldi	r19, 0xD0	; 208
    4438:	39 0f       	add	r19, r25
    443a:	3a 30       	cpi	r19, 0x0A	; 10
    443c:	10 f4       	brcc	.+4      	; 0x4442 <decode_port_no+0x4a>
    443e:	91 11       	cpse	r25, r1
    4440:	ee cf       	rjmp	.-36     	; 0x441e <decode_port_no+0x26>
    4442:	fb 01       	movw	r30, r22
    4444:	20 83       	st	Z, r18
    4446:	08 95       	ret
    4448:	80 e0       	ldi	r24, 0x00	; 0
    444a:	08 95       	ret
    444c:	80 e0       	ldi	r24, 0x00	; 0
    444e:	08 95       	ret

00004450 <decode_hexadecimal_string_bytes>:
    4450:	0f 93       	push	r16
    4452:	1f 93       	push	r17
    4454:	cf 93       	push	r28
    4456:	df 93       	push	r29
    4458:	dc 01       	movw	r26, r24
    445a:	ea 01       	movw	r28, r20
    445c:	20 97       	sbiw	r28, 0x00	; 0
    445e:	e1 f1       	breq	.+120    	; 0x44d8 <decode_hexadecimal_string_bytes+0x88>
    4460:	fa 01       	movw	r30, r20
    4462:	01 90       	ld	r0, Z+
    4464:	00 20       	and	r0, r0
    4466:	e9 f7       	brne	.-6      	; 0x4462 <decode_hexadecimal_string_bytes+0x12>
    4468:	31 97       	sbiw	r30, 0x01	; 1
    446a:	e4 1b       	sub	r30, r20
    446c:	f5 0b       	sbc	r31, r21
    446e:	32 97       	sbiw	r30, 0x02	; 2
    4470:	10 f5       	brcc	.+68     	; 0x44b6 <decode_hexadecimal_string_bytes+0x66>
    4472:	32 c0       	rjmp	.+100    	; 0x44d8 <decode_hexadecimal_string_bytes+0x88>
    4474:	8d 01       	movw	r16, r26
    4476:	04 0f       	add	r16, r20
    4478:	15 1f       	adc	r17, r21
    447a:	30 e0       	ldi	r19, 0x00	; 0
    447c:	ae 01       	movw	r20, r28
    447e:	42 0f       	add	r20, r18
    4480:	53 1f       	adc	r21, r19
    4482:	fa 01       	movw	r30, r20
    4484:	90 81       	ld	r25, Z
    4486:	91 34       	cpi	r25, 0x41	; 65
    4488:	28 f0       	brcs	.+10     	; 0x4494 <decode_hexadecimal_string_bytes+0x44>
    448a:	97 53       	subi	r25, 0x37	; 55
    448c:	59 2f       	mov	r21, r25
    448e:	52 95       	swap	r21
    4490:	50 7f       	andi	r21, 0xF0	; 240
    4492:	03 c0       	rjmp	.+6      	; 0x449a <decode_hexadecimal_string_bytes+0x4a>
    4494:	59 2f       	mov	r21, r25
    4496:	52 95       	swap	r21
    4498:	50 7f       	andi	r21, 0xF0	; 240
    449a:	2c 0f       	add	r18, r28
    449c:	3d 1f       	adc	r19, r29
    449e:	f9 01       	movw	r30, r18
    44a0:	91 81       	ldd	r25, Z+1	; 0x01
    44a2:	91 34       	cpi	r25, 0x41	; 65
    44a4:	10 f0       	brcs	.+4      	; 0x44aa <decode_hexadecimal_string_bytes+0x5a>
    44a6:	97 53       	subi	r25, 0x37	; 55
    44a8:	01 c0       	rjmp	.+2      	; 0x44ac <decode_hexadecimal_string_bytes+0x5c>
    44aa:	90 53       	subi	r25, 0x30	; 48
    44ac:	95 0f       	add	r25, r21
    44ae:	f8 01       	movw	r30, r16
    44b0:	90 83       	st	Z, r25
    44b2:	8f 5f       	subi	r24, 0xFF	; 255
    44b4:	01 c0       	rjmp	.+2      	; 0x44b8 <decode_hexadecimal_string_bytes+0x68>
    44b6:	80 e0       	ldi	r24, 0x00	; 0
    44b8:	28 2f       	mov	r18, r24
    44ba:	22 0f       	add	r18, r18
    44bc:	48 2f       	mov	r20, r24
    44be:	50 e0       	ldi	r21, 0x00	; 0
    44c0:	fe 01       	movw	r30, r28
    44c2:	01 90       	ld	r0, Z+
    44c4:	00 20       	and	r0, r0
    44c6:	e9 f7       	brne	.-6      	; 0x44c2 <decode_hexadecimal_string_bytes+0x72>
    44c8:	31 97       	sbiw	r30, 0x01	; 1
    44ca:	ec 1b       	sub	r30, r28
    44cc:	fd 0b       	sbc	r31, r29
    44ce:	4e 17       	cp	r20, r30
    44d0:	5f 07       	cpc	r21, r31
    44d2:	10 f4       	brcc	.+4      	; 0x44d8 <decode_hexadecimal_string_bytes+0x88>
    44d4:	86 13       	cpse	r24, r22
    44d6:	ce cf       	rjmp	.-100    	; 0x4474 <decode_hexadecimal_string_bytes+0x24>
    44d8:	df 91       	pop	r29
    44da:	cf 91       	pop	r28
    44dc:	1f 91       	pop	r17
    44de:	0f 91       	pop	r16
    44e0:	08 95       	ret

000044e2 <_serialCallBack>:
    44e2:	80 91 35 14 	lds	r24, 0x1435	; 0x801435 <crc_sum.1945>
    44e6:	86 0f       	add	r24, r22
    44e8:	80 93 35 14 	sts	0x1435, r24	; 0x801435 <crc_sum.1945>
    44ec:	90 91 38 14 	lds	r25, 0x1438	; 0x801438 <_mh_state>
    44f0:	91 30       	cpi	r25, 0x01	; 1
    44f2:	79 f0       	breq	.+30     	; 0x4512 <_serialCallBack+0x30>
    44f4:	28 f0       	brcs	.+10     	; 0x4500 <_serialCallBack+0x1e>
    44f6:	92 30       	cpi	r25, 0x02	; 2
    44f8:	a9 f0       	breq	.+42     	; 0x4524 <_serialCallBack+0x42>
    44fa:	93 30       	cpi	r25, 0x03	; 3
    44fc:	19 f1       	breq	.+70     	; 0x4544 <_serialCallBack+0x62>
    44fe:	08 95       	ret
    4500:	6f 3f       	cpi	r22, 0xFF	; 255
    4502:	09 f0       	breq	.+2      	; 0x4506 <_serialCallBack+0x24>
    4504:	48 c0       	rjmp	.+144    	; 0x4596 <_serialCallBack+0xb4>
    4506:	10 92 35 14 	sts	0x1435, r1	; 0x801435 <crc_sum.1945>
    450a:	81 e0       	ldi	r24, 0x01	; 1
    450c:	80 93 38 14 	sts	0x1438, r24	; 0x801438 <_mh_state>
    4510:	08 95       	ret
    4512:	66 38       	cpi	r22, 0x86	; 134
    4514:	09 f0       	breq	.+2      	; 0x4518 <_serialCallBack+0x36>
    4516:	3f c0       	rjmp	.+126    	; 0x4596 <_serialCallBack+0xb4>
    4518:	10 92 34 14 	sts	0x1434, r1	; 0x801434 <inDex.1943>
    451c:	82 e0       	ldi	r24, 0x02	; 2
    451e:	80 93 38 14 	sts	0x1438, r24	; 0x801438 <_mh_state>
    4522:	08 95       	ret
    4524:	e0 91 34 14 	lds	r30, 0x1434	; 0x801434 <inDex.1943>
    4528:	81 e0       	ldi	r24, 0x01	; 1
    452a:	8e 0f       	add	r24, r30
    452c:	80 93 34 14 	sts	0x1434, r24	; 0x801434 <inDex.1943>
    4530:	f0 e0       	ldi	r31, 0x00	; 0
    4532:	ee 5c       	subi	r30, 0xCE	; 206
    4534:	fb 4e       	sbci	r31, 0xEB	; 235
    4536:	60 83       	st	Z, r22
    4538:	82 30       	cpi	r24, 0x02	; 2
    453a:	69 f5       	brne	.+90     	; 0x4596 <_serialCallBack+0xb4>
    453c:	83 e0       	ldi	r24, 0x03	; 3
    453e:	80 93 38 14 	sts	0x1438, r24	; 0x801438 <_mh_state>
    4542:	08 95       	ret
    4544:	90 91 34 14 	lds	r25, 0x1434	; 0x801434 <inDex.1943>
    4548:	21 e0       	ldi	r18, 0x01	; 1
    454a:	29 0f       	add	r18, r25
    454c:	20 93 34 14 	sts	0x1434, r18	; 0x801434 <inDex.1943>
    4550:	96 30       	cpi	r25, 0x06	; 6
    4552:	09 f5       	brne	.+66     	; 0x4596 <_serialCallBack+0xb4>
    4554:	81 11       	cpse	r24, r1
    4556:	0e c0       	rjmp	.+28     	; 0x4574 <_serialCallBack+0x92>
    4558:	e2 e3       	ldi	r30, 0x32	; 50
    455a:	f4 e1       	ldi	r31, 0x14	; 20
    455c:	80 81       	ld	r24, Z
    455e:	90 e0       	ldi	r25, 0x00	; 0
    4560:	98 2f       	mov	r25, r24
    4562:	88 27       	eor	r24, r24
    4564:	21 81       	ldd	r18, Z+1	; 0x01
    4566:	82 0f       	add	r24, r18
    4568:	91 1d       	adc	r25, r1
    456a:	90 93 3a 14 	sts	0x143A, r25	; 0x80143a <_ppm+0x1>
    456e:	80 93 39 14 	sts	0x1439, r24	; 0x801439 <_ppm>
    4572:	04 c0       	rjmp	.+8      	; 0x457c <_serialCallBack+0x9a>
    4574:	10 92 3a 14 	sts	0x143A, r1	; 0x80143a <_ppm+0x1>
    4578:	10 92 39 14 	sts	0x1439, r1	; 0x801439 <_ppm>
    457c:	10 92 38 14 	sts	0x1438, r1	; 0x801438 <_mh_state>
    4580:	e0 91 36 14 	lds	r30, 0x1436	; 0x801436 <_appCallBack>
    4584:	f0 91 37 14 	lds	r31, 0x1437	; 0x801437 <_appCallBack+0x1>
    4588:	30 97       	sbiw	r30, 0x00	; 0
    458a:	29 f0       	breq	.+10     	; 0x4596 <_serialCallBack+0xb4>
    458c:	80 91 39 14 	lds	r24, 0x1439	; 0x801439 <_ppm>
    4590:	90 91 3a 14 	lds	r25, 0x143A	; 0x80143a <_ppm+0x1>
    4594:	19 95       	eicall
    4596:	08 95       	ret

00004598 <mh_z19_initialise>:
    4598:	8f 92       	push	r8
    459a:	9f 92       	push	r9
    459c:	af 92       	push	r10
    459e:	cf 92       	push	r12
    45a0:	ef 92       	push	r14
    45a2:	0f 93       	push	r16
    45a4:	0f 2e       	mov	r0, r31
    45a6:	f1 e7       	ldi	r31, 0x71	; 113
    45a8:	8f 2e       	mov	r8, r31
    45aa:	f2 e2       	ldi	r31, 0x22	; 34
    45ac:	9f 2e       	mov	r9, r31
    45ae:	f0 2d       	mov	r31, r0
    45b0:	68 94       	set
    45b2:	aa 24       	eor	r10, r10
    45b4:	a4 f8       	bld	r10, 4
    45b6:	68 94       	set
    45b8:	cc 24       	eor	r12, r12
    45ba:	c4 f8       	bld	r12, 4
    45bc:	e1 2c       	mov	r14, r1
    45be:	00 e0       	ldi	r16, 0x00	; 0
    45c0:	23 e0       	ldi	r18, 0x03	; 3
    45c2:	40 e8       	ldi	r20, 0x80	; 128
    45c4:	55 e2       	ldi	r21, 0x25	; 37
    45c6:	60 e0       	ldi	r22, 0x00	; 0
    45c8:	70 e0       	ldi	r23, 0x00	; 0
    45ca:	50 d0       	rcall	.+160    	; 0x466c <serial_create>
    45cc:	90 93 3c 14 	sts	0x143C, r25	; 0x80143c <_serial+0x1>
    45d0:	80 93 3b 14 	sts	0x143B, r24	; 0x80143b <_serial>
    45d4:	0f 91       	pop	r16
    45d6:	ef 90       	pop	r14
    45d8:	cf 90       	pop	r12
    45da:	af 90       	pop	r10
    45dc:	9f 90       	pop	r9
    45de:	8f 90       	pop	r8
    45e0:	08 95       	ret

000045e2 <mh_z19_injectCallBack>:
    45e2:	90 93 37 14 	sts	0x1437, r25	; 0x801437 <_appCallBack+0x1>
    45e6:	80 93 36 14 	sts	0x1436, r24	; 0x801436 <_appCallBack>
    45ea:	08 95       	ret

000045ec <mh_z19_takeMeassuring>:
    45ec:	cf 93       	push	r28
    45ee:	df 93       	push	r29
    45f0:	cd b7       	in	r28, 0x3d	; 61
    45f2:	de b7       	in	r29, 0x3e	; 62
    45f4:	29 97       	sbiw	r28, 0x09	; 9
    45f6:	0f b6       	in	r0, 0x3f	; 63
    45f8:	f8 94       	cli
    45fa:	de bf       	out	0x3e, r29	; 62
    45fc:	0f be       	out	0x3f, r0	; 63
    45fe:	cd bf       	out	0x3d, r28	; 61
    4600:	89 e0       	ldi	r24, 0x09	; 9
    4602:	e2 e4       	ldi	r30, 0x42	; 66
    4604:	f2 e0       	ldi	r31, 0x02	; 2
    4606:	9e 01       	movw	r18, r28
    4608:	2f 5f       	subi	r18, 0xFF	; 255
    460a:	3f 4f       	sbci	r19, 0xFF	; 255
    460c:	d9 01       	movw	r26, r18
    460e:	01 90       	ld	r0, Z+
    4610:	0d 92       	st	X+, r0
    4612:	8a 95       	dec	r24
    4614:	e1 f7       	brne	.-8      	; 0x460e <mh_z19_takeMeassuring+0x22>
    4616:	10 92 3a 14 	sts	0x143A, r1	; 0x80143a <_ppm+0x1>
    461a:	10 92 39 14 	sts	0x1439, r1	; 0x801439 <_ppm>
    461e:	80 91 3b 14 	lds	r24, 0x143B	; 0x80143b <_serial>
    4622:	90 91 3c 14 	lds	r25, 0x143C	; 0x80143c <_serial+0x1>
    4626:	00 97       	sbiw	r24, 0x00	; 0
    4628:	31 f0       	breq	.+12     	; 0x4636 <mh_z19_takeMeassuring+0x4a>
    462a:	42 2f       	mov	r20, r18
    462c:	53 2f       	mov	r21, r19
    462e:	69 e0       	ldi	r22, 0x09	; 9
    4630:	ea d0       	rcall	.+468    	; 0x4806 <serial_sendBytes>
    4632:	80 e0       	ldi	r24, 0x00	; 0
    4634:	01 c0       	rjmp	.+2      	; 0x4638 <mh_z19_takeMeassuring+0x4c>
    4636:	82 e0       	ldi	r24, 0x02	; 2
    4638:	29 96       	adiw	r28, 0x09	; 9
    463a:	0f b6       	in	r0, 0x3f	; 63
    463c:	f8 94       	cli
    463e:	de bf       	out	0x3e, r29	; 62
    4640:	0f be       	out	0x3f, r0	; 63
    4642:	cd bf       	out	0x3d, r28	; 61
    4644:	df 91       	pop	r29
    4646:	cf 91       	pop	r28
    4648:	08 95       	ret

0000464a <mh_z19_getCo2Ppm>:
    464a:	20 91 39 14 	lds	r18, 0x1439	; 0x801439 <_ppm>
    464e:	30 91 3a 14 	lds	r19, 0x143A	; 0x80143a <_ppm+0x1>
    4652:	21 15       	cp	r18, r1
    4654:	31 05       	cpc	r19, r1
    4656:	29 f4       	brne	.+10     	; 0x4662 <mh_z19_getCo2Ppm+0x18>
    4658:	fc 01       	movw	r30, r24
    465a:	11 82       	std	Z+1, r1	; 0x01
    465c:	10 82       	st	Z, r1
    465e:	81 e0       	ldi	r24, 0x01	; 1
    4660:	08 95       	ret
    4662:	fc 01       	movw	r30, r24
    4664:	31 83       	std	Z+1, r19	; 0x01
    4666:	20 83       	st	Z, r18
    4668:	80 e0       	ldi	r24, 0x00	; 0
    466a:	08 95       	ret

0000466c <serial_create>:
    466c:	2f 92       	push	r2
    466e:	3f 92       	push	r3
    4670:	4f 92       	push	r4
    4672:	5f 92       	push	r5
    4674:	6f 92       	push	r6
    4676:	7f 92       	push	r7
    4678:	8f 92       	push	r8
    467a:	9f 92       	push	r9
    467c:	af 92       	push	r10
    467e:	cf 92       	push	r12
    4680:	ef 92       	push	r14
    4682:	ff 92       	push	r15
    4684:	0f 93       	push	r16
    4686:	1f 93       	push	r17
    4688:	cf 93       	push	r28
    468a:	df 93       	push	r29
    468c:	cd b7       	in	r28, 0x3d	; 61
    468e:	de b7       	in	r29, 0x3e	; 62
    4690:	f8 2e       	mov	r15, r24
    4692:	2a 01       	movw	r4, r20
    4694:	3b 01       	movw	r6, r22
    4696:	88 e0       	ldi	r24, 0x08	; 8
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <malloc>
    469e:	8c 01       	movw	r16, r24
    46a0:	8f 2d       	mov	r24, r15
    46a2:	90 e0       	ldi	r25, 0x00	; 0
    46a4:	fc 01       	movw	r30, r24
    46a6:	ee 0f       	add	r30, r30
    46a8:	ff 1f       	adc	r31, r31
    46aa:	e3 5c       	subi	r30, 0xC3	; 195
    46ac:	fb 4e       	sbci	r31, 0xEB	; 235
    46ae:	11 83       	std	Z+1, r17	; 0x01
    46b0:	00 83       	st	Z, r16
    46b2:	01 15       	cp	r16, r1
    46b4:	11 05       	cpc	r17, r1
    46b6:	09 f4       	brne	.+2      	; 0x46ba <serial_create+0x4e>
    46b8:	69 c0       	rjmp	.+210    	; 0x478c <serial_create+0x120>
    46ba:	88 0f       	add	r24, r24
    46bc:	99 1f       	adc	r25, r25
    46be:	fc 01       	movw	r30, r24
    46c0:	e5 5f       	subi	r30, 0xF5	; 245
    46c2:	fd 4f       	sbci	r31, 0xFD	; 253
    46c4:	80 81       	ld	r24, Z
    46c6:	91 81       	ldd	r25, Z+1	; 0x01
    46c8:	d8 01       	movw	r26, r16
    46ca:	8d 93       	st	X+, r24
    46cc:	9c 93       	st	X, r25
    46ce:	8c 2d       	mov	r24, r12
    46d0:	90 e0       	ldi	r25, 0x00	; 0
    46d2:	88 0f       	add	r24, r24
    46d4:	99 1f       	adc	r25, r25
    46d6:	88 0f       	add	r24, r24
    46d8:	99 1f       	adc	r25, r25
    46da:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <malloc>
    46de:	1c 01       	movw	r2, r24
    46e0:	86 e0       	ldi	r24, 0x06	; 6
    46e2:	90 e0       	ldi	r25, 0x00	; 0
    46e4:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <malloc>
    46e8:	7c 01       	movw	r14, r24
    46ea:	4c 2d       	mov	r20, r12
    46ec:	b1 01       	movw	r22, r2
    46ee:	f1 d6       	rcall	.+3554   	; 0x54d2 <fifo_init>
    46f0:	f8 01       	movw	r30, r16
    46f2:	f5 82       	std	Z+5, r15	; 0x05
    46f4:	e4 82       	std	Z+4, r14	; 0x04
    46f6:	8a 2d       	mov	r24, r10
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	88 0f       	add	r24, r24
    46fc:	99 1f       	adc	r25, r25
    46fe:	88 0f       	add	r24, r24
    4700:	99 1f       	adc	r25, r25
    4702:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <malloc>
    4706:	1c 01       	movw	r2, r24
    4708:	86 e0       	ldi	r24, 0x06	; 6
    470a:	90 e0       	ldi	r25, 0x00	; 0
    470c:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <malloc>
    4710:	7c 01       	movw	r14, r24
    4712:	4a 2d       	mov	r20, r10
    4714:	b1 01       	movw	r22, r2
    4716:	dd d6       	rcall	.+3514   	; 0x54d2 <fifo_init>
    4718:	d8 01       	movw	r26, r16
    471a:	13 96       	adiw	r26, 0x03	; 3
    471c:	fc 92       	st	X, r15
    471e:	ee 92       	st	-X, r14
    4720:	12 97       	sbiw	r26, 0x02	; 2
    4722:	17 96       	adiw	r26, 0x07	; 7
    4724:	9c 92       	st	X, r9
    4726:	8e 92       	st	-X, r8
    4728:	16 97       	sbiw	r26, 0x06	; 6
    472a:	ff b6       	in	r15, 0x3f	; 63
    472c:	f8 94       	cli
    472e:	ed 91       	ld	r30, X+
    4730:	fc 91       	ld	r31, X
    4732:	11 97       	sbiw	r26, 0x01	; 1
    4734:	36 97       	sbiw	r30, 0x06	; 6
    4736:	80 81       	ld	r24, Z
    4738:	82 60       	ori	r24, 0x02	; 2
    473a:	80 83       	st	Z, r24
    473c:	8d 90       	ld	r8, X+
    473e:	9c 90       	ld	r9, X
    4740:	c3 01       	movw	r24, r6
    4742:	b2 01       	movw	r22, r4
    4744:	e0 d7       	rcall	.+4032   	; 0x5706 <__floatunsisf>
    4746:	20 e0       	ldi	r18, 0x00	; 0
    4748:	30 e0       	ldi	r19, 0x00	; 0
    474a:	40 e0       	ldi	r20, 0x00	; 0
    474c:	51 e4       	ldi	r21, 0x41	; 65
    474e:	0e 94 11 2c 	call	0x5822	; 0x5822 <__mulsf3>
    4752:	9b 01       	movw	r18, r22
    4754:	ac 01       	movw	r20, r24
    4756:	60 e0       	ldi	r22, 0x00	; 0
    4758:	74 e2       	ldi	r23, 0x24	; 36
    475a:	84 e7       	ldi	r24, 0x74	; 116
    475c:	9b e4       	ldi	r25, 0x4B	; 75
    475e:	3a d7       	rcall	.+3700   	; 0x55d4 <__divsf3>
    4760:	20 e0       	ldi	r18, 0x00	; 0
    4762:	30 e0       	ldi	r19, 0x00	; 0
    4764:	40 e8       	ldi	r20, 0x80	; 128
    4766:	5f e3       	ldi	r21, 0x3F	; 63
    4768:	d0 d6       	rcall	.+3488   	; 0x550a <__subsf3>
    476a:	a1 d7       	rcall	.+3906   	; 0x56ae <__fixunssfsi>
    476c:	f4 01       	movw	r30, r8
    476e:	32 97       	sbiw	r30, 0x02	; 2
    4770:	60 83       	st	Z, r22
    4772:	d8 01       	movw	r26, r16
    4774:	ed 91       	ld	r30, X+
    4776:	fc 91       	ld	r31, X
    4778:	11 97       	sbiw	r26, 0x01	; 1
    477a:	35 97       	sbiw	r30, 0x05	; 5
    477c:	88 e9       	ldi	r24, 0x98	; 152
    477e:	80 83       	st	Z, r24
    4780:	ed 91       	ld	r30, X+
    4782:	fc 91       	ld	r31, X
    4784:	34 97       	sbiw	r30, 0x04	; 4
    4786:	86 e0       	ldi	r24, 0x06	; 6
    4788:	80 83       	st	Z, r24
    478a:	ff be       	out	0x3f, r15	; 63
    478c:	c8 01       	movw	r24, r16
    478e:	df 91       	pop	r29
    4790:	cf 91       	pop	r28
    4792:	1f 91       	pop	r17
    4794:	0f 91       	pop	r16
    4796:	ff 90       	pop	r15
    4798:	ef 90       	pop	r14
    479a:	cf 90       	pop	r12
    479c:	af 90       	pop	r10
    479e:	9f 90       	pop	r9
    47a0:	8f 90       	pop	r8
    47a2:	7f 90       	pop	r7
    47a4:	6f 90       	pop	r6
    47a6:	5f 90       	pop	r5
    47a8:	4f 90       	pop	r4
    47aa:	3f 90       	pop	r3
    47ac:	2f 90       	pop	r2
    47ae:	08 95       	ret

000047b0 <serial_sendByte>:
    47b0:	cf 93       	push	r28
    47b2:	df 93       	push	r29
    47b4:	dc 01       	movw	r26, r24
    47b6:	89 2b       	or	r24, r25
    47b8:	01 f1       	breq	.+64     	; 0x47fa <serial_sendByte+0x4a>
    47ba:	12 96       	adiw	r26, 0x02	; 2
    47bc:	ed 91       	ld	r30, X+
    47be:	fc 91       	ld	r31, X
    47c0:	13 97       	sbiw	r26, 0x03	; 3
    47c2:	93 81       	ldd	r25, Z+3	; 0x03
    47c4:	82 81       	ldd	r24, Z+2	; 0x02
    47c6:	25 81       	ldd	r18, Z+5	; 0x05
    47c8:	98 1b       	sub	r25, r24
    47ca:	92 23       	and	r25, r18
    47cc:	84 81       	ldd	r24, Z+4	; 0x04
    47ce:	98 17       	cp	r25, r24
    47d0:	b1 f0       	breq	.+44     	; 0x47fe <serial_sendByte+0x4e>
    47d2:	83 81       	ldd	r24, Z+3	; 0x03
    47d4:	26 95       	lsr	r18
    47d6:	28 23       	and	r18, r24
    47d8:	c0 81       	ld	r28, Z
    47da:	d1 81       	ldd	r29, Z+1	; 0x01
    47dc:	c2 0f       	add	r28, r18
    47de:	d1 1d       	adc	r29, r1
    47e0:	68 83       	st	Y, r22
    47e2:	8f 5f       	subi	r24, 0xFF	; 255
    47e4:	95 81       	ldd	r25, Z+5	; 0x05
    47e6:	89 23       	and	r24, r25
    47e8:	83 83       	std	Z+3, r24	; 0x03
    47ea:	ed 91       	ld	r30, X+
    47ec:	fc 91       	ld	r31, X
    47ee:	35 97       	sbiw	r30, 0x05	; 5
    47f0:	80 81       	ld	r24, Z
    47f2:	80 62       	ori	r24, 0x20	; 32
    47f4:	80 83       	st	Z, r24
    47f6:	80 e0       	ldi	r24, 0x00	; 0
    47f8:	03 c0       	rjmp	.+6      	; 0x4800 <serial_sendByte+0x50>
    47fa:	81 e0       	ldi	r24, 0x01	; 1
    47fc:	01 c0       	rjmp	.+2      	; 0x4800 <serial_sendByte+0x50>
    47fe:	82 e0       	ldi	r24, 0x02	; 2
    4800:	df 91       	pop	r29
    4802:	cf 91       	pop	r28
    4804:	08 95       	ret

00004806 <serial_sendBytes>:
    4806:	ef 92       	push	r14
    4808:	ff 92       	push	r15
    480a:	0f 93       	push	r16
    480c:	1f 93       	push	r17
    480e:	cf 93       	push	r28
    4810:	df 93       	push	r29
    4812:	7c 01       	movw	r14, r24
    4814:	00 97       	sbiw	r24, 0x00	; 0
    4816:	09 f4       	brne	.+2      	; 0x481a <serial_sendBytes+0x14>
    4818:	41 c0       	rjmp	.+130    	; 0x489c <serial_sendBytes+0x96>
    481a:	dc 01       	movw	r26, r24
    481c:	12 96       	adiw	r26, 0x02	; 2
    481e:	ed 91       	ld	r30, X+
    4820:	fc 91       	ld	r31, X
    4822:	13 97       	sbiw	r26, 0x03	; 3
    4824:	93 81       	ldd	r25, Z+3	; 0x03
    4826:	82 81       	ldd	r24, Z+2	; 0x02
    4828:	98 1b       	sub	r25, r24
    482a:	85 81       	ldd	r24, Z+5	; 0x05
    482c:	98 23       	and	r25, r24
    482e:	84 81       	ldd	r24, Z+4	; 0x04
    4830:	89 1b       	sub	r24, r25
    4832:	86 17       	cp	r24, r22
    4834:	a8 f1       	brcs	.+106    	; 0x48a0 <serial_sendBytes+0x9a>
    4836:	66 23       	and	r22, r22
    4838:	41 f1       	breq	.+80     	; 0x488a <serial_sendBytes+0x84>
    483a:	84 2f       	mov	r24, r20
    483c:	95 2f       	mov	r25, r21
    483e:	dc 01       	movw	r26, r24
    4840:	61 50       	subi	r22, 0x01	; 1
    4842:	46 2f       	mov	r20, r22
    4844:	50 e0       	ldi	r21, 0x00	; 0
    4846:	4f 5f       	subi	r20, 0xFF	; 255
    4848:	5f 4f       	sbci	r21, 0xFF	; 255
    484a:	48 0f       	add	r20, r24
    484c:	59 1f       	adc	r21, r25
    484e:	e7 01       	movw	r28, r14
    4850:	ea 81       	ldd	r30, Y+2	; 0x02
    4852:	fb 81       	ldd	r31, Y+3	; 0x03
    4854:	93 81       	ldd	r25, Z+3	; 0x03
    4856:	82 81       	ldd	r24, Z+2	; 0x02
    4858:	25 81       	ldd	r18, Z+5	; 0x05
    485a:	98 1b       	sub	r25, r24
    485c:	92 23       	and	r25, r18
    485e:	84 81       	ldd	r24, Z+4	; 0x04
    4860:	98 17       	cp	r25, r24
    4862:	79 f0       	breq	.+30     	; 0x4882 <serial_sendBytes+0x7c>
    4864:	8c 91       	ld	r24, X
    4866:	93 81       	ldd	r25, Z+3	; 0x03
    4868:	26 95       	lsr	r18
    486a:	29 23       	and	r18, r25
    486c:	60 81       	ld	r22, Z
    486e:	71 81       	ldd	r23, Z+1	; 0x01
    4870:	8b 01       	movw	r16, r22
    4872:	02 0f       	add	r16, r18
    4874:	11 1d       	adc	r17, r1
    4876:	e8 01       	movw	r28, r16
    4878:	88 83       	st	Y, r24
    487a:	9f 5f       	subi	r25, 0xFF	; 255
    487c:	85 81       	ldd	r24, Z+5	; 0x05
    487e:	98 23       	and	r25, r24
    4880:	93 83       	std	Z+3, r25	; 0x03
    4882:	11 96       	adiw	r26, 0x01	; 1
    4884:	a4 17       	cp	r26, r20
    4886:	b5 07       	cpc	r27, r21
    4888:	11 f7       	brne	.-60     	; 0x484e <serial_sendBytes+0x48>
    488a:	d7 01       	movw	r26, r14
    488c:	ed 91       	ld	r30, X+
    488e:	fc 91       	ld	r31, X
    4890:	35 97       	sbiw	r30, 0x05	; 5
    4892:	80 81       	ld	r24, Z
    4894:	80 62       	ori	r24, 0x20	; 32
    4896:	80 83       	st	Z, r24
    4898:	80 e0       	ldi	r24, 0x00	; 0
    489a:	03 c0       	rjmp	.+6      	; 0x48a2 <serial_sendBytes+0x9c>
    489c:	81 e0       	ldi	r24, 0x01	; 1
    489e:	01 c0       	rjmp	.+2      	; 0x48a2 <serial_sendBytes+0x9c>
    48a0:	82 e0       	ldi	r24, 0x02	; 2
    48a2:	df 91       	pop	r29
    48a4:	cf 91       	pop	r28
    48a6:	1f 91       	pop	r17
    48a8:	0f 91       	pop	r16
    48aa:	ff 90       	pop	r15
    48ac:	ef 90       	pop	r14
    48ae:	08 95       	ret

000048b0 <serial_getByte>:
    48b0:	00 97       	sbiw	r24, 0x00	; 0
    48b2:	d1 f0       	breq	.+52     	; 0x48e8 <serial_getByte+0x38>
    48b4:	dc 01       	movw	r26, r24
    48b6:	14 96       	adiw	r26, 0x04	; 4
    48b8:	ed 91       	ld	r30, X+
    48ba:	fc 91       	ld	r31, X
    48bc:	15 97       	sbiw	r26, 0x05	; 5
    48be:	93 81       	ldd	r25, Z+3	; 0x03
    48c0:	82 81       	ldd	r24, Z+2	; 0x02
    48c2:	98 17       	cp	r25, r24
    48c4:	99 f0       	breq	.+38     	; 0x48ec <serial_getByte+0x3c>
    48c6:	92 81       	ldd	r25, Z+2	; 0x02
    48c8:	85 81       	ldd	r24, Z+5	; 0x05
    48ca:	86 95       	lsr	r24
    48cc:	89 23       	and	r24, r25
    48ce:	a0 81       	ld	r26, Z
    48d0:	b1 81       	ldd	r27, Z+1	; 0x01
    48d2:	a8 0f       	add	r26, r24
    48d4:	b1 1d       	adc	r27, r1
    48d6:	8c 91       	ld	r24, X
    48d8:	db 01       	movw	r26, r22
    48da:	8c 93       	st	X, r24
    48dc:	9f 5f       	subi	r25, 0xFF	; 255
    48de:	85 81       	ldd	r24, Z+5	; 0x05
    48e0:	98 23       	and	r25, r24
    48e2:	92 83       	std	Z+2, r25	; 0x02
    48e4:	80 e0       	ldi	r24, 0x00	; 0
    48e6:	08 95       	ret
    48e8:	81 e0       	ldi	r24, 0x01	; 1
    48ea:	08 95       	ret
    48ec:	83 e0       	ldi	r24, 0x03	; 3
    48ee:	08 95       	ret

000048f0 <__vector_25>:
    48f0:	1f 92       	push	r1
    48f2:	0f 92       	push	r0
    48f4:	0f b6       	in	r0, 0x3f	; 63
    48f6:	0f 92       	push	r0
    48f8:	11 24       	eor	r1, r1
    48fa:	0b b6       	in	r0, 0x3b	; 59
    48fc:	0f 92       	push	r0
    48fe:	2f 93       	push	r18
    4900:	3f 93       	push	r19
    4902:	4f 93       	push	r20
    4904:	5f 93       	push	r21
    4906:	6f 93       	push	r22
    4908:	7f 93       	push	r23
    490a:	8f 93       	push	r24
    490c:	9f 93       	push	r25
    490e:	af 93       	push	r26
    4910:	bf 93       	push	r27
    4912:	cf 93       	push	r28
    4914:	df 93       	push	r29
    4916:	ef 93       	push	r30
    4918:	ff 93       	push	r31
    491a:	a0 91 3d 14 	lds	r26, 0x143D	; 0x80143d <_ser_handle>
    491e:	b0 91 3e 14 	lds	r27, 0x143E	; 0x80143e <_ser_handle+0x1>
    4922:	10 97       	sbiw	r26, 0x00	; 0
    4924:	11 f1       	breq	.+68     	; 0x496a <__vector_25+0x7a>
    4926:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    492a:	14 96       	adiw	r26, 0x04	; 4
    492c:	ed 91       	ld	r30, X+
    492e:	fc 91       	ld	r31, X
    4930:	15 97       	sbiw	r26, 0x05	; 5
    4932:	93 81       	ldd	r25, Z+3	; 0x03
    4934:	82 81       	ldd	r24, Z+2	; 0x02
    4936:	25 81       	ldd	r18, Z+5	; 0x05
    4938:	98 1b       	sub	r25, r24
    493a:	92 23       	and	r25, r18
    493c:	84 81       	ldd	r24, Z+4	; 0x04
    493e:	98 17       	cp	r25, r24
    4940:	61 f0       	breq	.+24     	; 0x495a <__vector_25+0x6a>
    4942:	83 81       	ldd	r24, Z+3	; 0x03
    4944:	26 95       	lsr	r18
    4946:	28 23       	and	r18, r24
    4948:	c0 81       	ld	r28, Z
    494a:	d1 81       	ldd	r29, Z+1	; 0x01
    494c:	c2 0f       	add	r28, r18
    494e:	d1 1d       	adc	r29, r1
    4950:	68 83       	st	Y, r22
    4952:	8f 5f       	subi	r24, 0xFF	; 255
    4954:	95 81       	ldd	r25, Z+5	; 0x05
    4956:	89 23       	and	r24, r25
    4958:	83 83       	std	Z+3, r24	; 0x03
    495a:	16 96       	adiw	r26, 0x06	; 6
    495c:	ed 91       	ld	r30, X+
    495e:	fc 91       	ld	r31, X
    4960:	17 97       	sbiw	r26, 0x07	; 7
    4962:	30 97       	sbiw	r30, 0x00	; 0
    4964:	11 f0       	breq	.+4      	; 0x496a <__vector_25+0x7a>
    4966:	cd 01       	movw	r24, r26
    4968:	19 95       	eicall
    496a:	ff 91       	pop	r31
    496c:	ef 91       	pop	r30
    496e:	df 91       	pop	r29
    4970:	cf 91       	pop	r28
    4972:	bf 91       	pop	r27
    4974:	af 91       	pop	r26
    4976:	9f 91       	pop	r25
    4978:	8f 91       	pop	r24
    497a:	7f 91       	pop	r23
    497c:	6f 91       	pop	r22
    497e:	5f 91       	pop	r21
    4980:	4f 91       	pop	r20
    4982:	3f 91       	pop	r19
    4984:	2f 91       	pop	r18
    4986:	0f 90       	pop	r0
    4988:	0b be       	out	0x3b, r0	; 59
    498a:	0f 90       	pop	r0
    498c:	0f be       	out	0x3f, r0	; 63
    498e:	0f 90       	pop	r0
    4990:	1f 90       	pop	r1
    4992:	18 95       	reti

00004994 <__vector_26>:
    4994:	1f 92       	push	r1
    4996:	0f 92       	push	r0
    4998:	0f b6       	in	r0, 0x3f	; 63
    499a:	0f 92       	push	r0
    499c:	11 24       	eor	r1, r1
    499e:	0b b6       	in	r0, 0x3b	; 59
    49a0:	0f 92       	push	r0
    49a2:	2f 93       	push	r18
    49a4:	8f 93       	push	r24
    49a6:	9f 93       	push	r25
    49a8:	af 93       	push	r26
    49aa:	bf 93       	push	r27
    49ac:	ef 93       	push	r30
    49ae:	ff 93       	push	r31
    49b0:	e0 91 3d 14 	lds	r30, 0x143D	; 0x80143d <_ser_handle>
    49b4:	f0 91 3e 14 	lds	r31, 0x143E	; 0x80143e <_ser_handle+0x1>
    49b8:	30 97       	sbiw	r30, 0x00	; 0
    49ba:	b9 f0       	breq	.+46     	; 0x49ea <__vector_26+0x56>
    49bc:	02 80       	ldd	r0, Z+2	; 0x02
    49be:	f3 81       	ldd	r31, Z+3	; 0x03
    49c0:	e0 2d       	mov	r30, r0
    49c2:	93 81       	ldd	r25, Z+3	; 0x03
    49c4:	82 81       	ldd	r24, Z+2	; 0x02
    49c6:	98 17       	cp	r25, r24
    49c8:	b1 f0       	breq	.+44     	; 0x49f6 <__vector_26+0x62>
    49ca:	92 81       	ldd	r25, Z+2	; 0x02
    49cc:	85 81       	ldd	r24, Z+5	; 0x05
    49ce:	28 2f       	mov	r18, r24
    49d0:	26 95       	lsr	r18
    49d2:	29 23       	and	r18, r25
    49d4:	a0 81       	ld	r26, Z
    49d6:	b1 81       	ldd	r27, Z+1	; 0x01
    49d8:	a2 0f       	add	r26, r18
    49da:	b1 1d       	adc	r27, r1
    49dc:	2c 91       	ld	r18, X
    49de:	9f 5f       	subi	r25, 0xFF	; 255
    49e0:	89 23       	and	r24, r25
    49e2:	82 83       	std	Z+2, r24	; 0x02
    49e4:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    49e8:	0b c0       	rjmp	.+22     	; 0x4a00 <__vector_26+0x6c>
    49ea:	e1 ec       	ldi	r30, 0xC1	; 193
    49ec:	f0 e0       	ldi	r31, 0x00	; 0
    49ee:	80 81       	ld	r24, Z
    49f0:	8f 7d       	andi	r24, 0xDF	; 223
    49f2:	80 83       	st	Z, r24
    49f4:	05 c0       	rjmp	.+10     	; 0x4a00 <__vector_26+0x6c>
    49f6:	e1 ec       	ldi	r30, 0xC1	; 193
    49f8:	f0 e0       	ldi	r31, 0x00	; 0
    49fa:	80 81       	ld	r24, Z
    49fc:	8f 7d       	andi	r24, 0xDF	; 223
    49fe:	80 83       	st	Z, r24
    4a00:	ff 91       	pop	r31
    4a02:	ef 91       	pop	r30
    4a04:	bf 91       	pop	r27
    4a06:	af 91       	pop	r26
    4a08:	9f 91       	pop	r25
    4a0a:	8f 91       	pop	r24
    4a0c:	2f 91       	pop	r18
    4a0e:	0f 90       	pop	r0
    4a10:	0b be       	out	0x3b, r0	; 59
    4a12:	0f 90       	pop	r0
    4a14:	0f be       	out	0x3f, r0	; 63
    4a16:	0f 90       	pop	r0
    4a18:	1f 90       	pop	r1
    4a1a:	18 95       	reti

00004a1c <__vector_36>:
    4a1c:	1f 92       	push	r1
    4a1e:	0f 92       	push	r0
    4a20:	0f b6       	in	r0, 0x3f	; 63
    4a22:	0f 92       	push	r0
    4a24:	11 24       	eor	r1, r1
    4a26:	0b b6       	in	r0, 0x3b	; 59
    4a28:	0f 92       	push	r0
    4a2a:	2f 93       	push	r18
    4a2c:	3f 93       	push	r19
    4a2e:	4f 93       	push	r20
    4a30:	5f 93       	push	r21
    4a32:	6f 93       	push	r22
    4a34:	7f 93       	push	r23
    4a36:	8f 93       	push	r24
    4a38:	9f 93       	push	r25
    4a3a:	af 93       	push	r26
    4a3c:	bf 93       	push	r27
    4a3e:	cf 93       	push	r28
    4a40:	df 93       	push	r29
    4a42:	ef 93       	push	r30
    4a44:	ff 93       	push	r31
    4a46:	a0 91 3f 14 	lds	r26, 0x143F	; 0x80143f <_ser_handle+0x2>
    4a4a:	b0 91 40 14 	lds	r27, 0x1440	; 0x801440 <_ser_handle+0x3>
    4a4e:	10 97       	sbiw	r26, 0x00	; 0
    4a50:	11 f1       	breq	.+68     	; 0x4a96 <__vector_36+0x7a>
    4a52:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4a56:	14 96       	adiw	r26, 0x04	; 4
    4a58:	ed 91       	ld	r30, X+
    4a5a:	fc 91       	ld	r31, X
    4a5c:	15 97       	sbiw	r26, 0x05	; 5
    4a5e:	93 81       	ldd	r25, Z+3	; 0x03
    4a60:	82 81       	ldd	r24, Z+2	; 0x02
    4a62:	25 81       	ldd	r18, Z+5	; 0x05
    4a64:	98 1b       	sub	r25, r24
    4a66:	92 23       	and	r25, r18
    4a68:	84 81       	ldd	r24, Z+4	; 0x04
    4a6a:	98 17       	cp	r25, r24
    4a6c:	61 f0       	breq	.+24     	; 0x4a86 <__vector_36+0x6a>
    4a6e:	83 81       	ldd	r24, Z+3	; 0x03
    4a70:	26 95       	lsr	r18
    4a72:	28 23       	and	r18, r24
    4a74:	c0 81       	ld	r28, Z
    4a76:	d1 81       	ldd	r29, Z+1	; 0x01
    4a78:	c2 0f       	add	r28, r18
    4a7a:	d1 1d       	adc	r29, r1
    4a7c:	68 83       	st	Y, r22
    4a7e:	8f 5f       	subi	r24, 0xFF	; 255
    4a80:	95 81       	ldd	r25, Z+5	; 0x05
    4a82:	89 23       	and	r24, r25
    4a84:	83 83       	std	Z+3, r24	; 0x03
    4a86:	16 96       	adiw	r26, 0x06	; 6
    4a88:	ed 91       	ld	r30, X+
    4a8a:	fc 91       	ld	r31, X
    4a8c:	17 97       	sbiw	r26, 0x07	; 7
    4a8e:	30 97       	sbiw	r30, 0x00	; 0
    4a90:	11 f0       	breq	.+4      	; 0x4a96 <__vector_36+0x7a>
    4a92:	cd 01       	movw	r24, r26
    4a94:	19 95       	eicall
    4a96:	ff 91       	pop	r31
    4a98:	ef 91       	pop	r30
    4a9a:	df 91       	pop	r29
    4a9c:	cf 91       	pop	r28
    4a9e:	bf 91       	pop	r27
    4aa0:	af 91       	pop	r26
    4aa2:	9f 91       	pop	r25
    4aa4:	8f 91       	pop	r24
    4aa6:	7f 91       	pop	r23
    4aa8:	6f 91       	pop	r22
    4aaa:	5f 91       	pop	r21
    4aac:	4f 91       	pop	r20
    4aae:	3f 91       	pop	r19
    4ab0:	2f 91       	pop	r18
    4ab2:	0f 90       	pop	r0
    4ab4:	0b be       	out	0x3b, r0	; 59
    4ab6:	0f 90       	pop	r0
    4ab8:	0f be       	out	0x3f, r0	; 63
    4aba:	0f 90       	pop	r0
    4abc:	1f 90       	pop	r1
    4abe:	18 95       	reti

00004ac0 <__vector_37>:
    4ac0:	1f 92       	push	r1
    4ac2:	0f 92       	push	r0
    4ac4:	0f b6       	in	r0, 0x3f	; 63
    4ac6:	0f 92       	push	r0
    4ac8:	11 24       	eor	r1, r1
    4aca:	0b b6       	in	r0, 0x3b	; 59
    4acc:	0f 92       	push	r0
    4ace:	2f 93       	push	r18
    4ad0:	8f 93       	push	r24
    4ad2:	9f 93       	push	r25
    4ad4:	af 93       	push	r26
    4ad6:	bf 93       	push	r27
    4ad8:	ef 93       	push	r30
    4ada:	ff 93       	push	r31
    4adc:	e0 91 3f 14 	lds	r30, 0x143F	; 0x80143f <_ser_handle+0x2>
    4ae0:	f0 91 40 14 	lds	r31, 0x1440	; 0x801440 <_ser_handle+0x3>
    4ae4:	30 97       	sbiw	r30, 0x00	; 0
    4ae6:	b9 f0       	breq	.+46     	; 0x4b16 <__vector_37+0x56>
    4ae8:	02 80       	ldd	r0, Z+2	; 0x02
    4aea:	f3 81       	ldd	r31, Z+3	; 0x03
    4aec:	e0 2d       	mov	r30, r0
    4aee:	93 81       	ldd	r25, Z+3	; 0x03
    4af0:	82 81       	ldd	r24, Z+2	; 0x02
    4af2:	98 17       	cp	r25, r24
    4af4:	b1 f0       	breq	.+44     	; 0x4b22 <__vector_37+0x62>
    4af6:	92 81       	ldd	r25, Z+2	; 0x02
    4af8:	85 81       	ldd	r24, Z+5	; 0x05
    4afa:	28 2f       	mov	r18, r24
    4afc:	26 95       	lsr	r18
    4afe:	29 23       	and	r18, r25
    4b00:	a0 81       	ld	r26, Z
    4b02:	b1 81       	ldd	r27, Z+1	; 0x01
    4b04:	a2 0f       	add	r26, r18
    4b06:	b1 1d       	adc	r27, r1
    4b08:	2c 91       	ld	r18, X
    4b0a:	9f 5f       	subi	r25, 0xFF	; 255
    4b0c:	89 23       	and	r24, r25
    4b0e:	82 83       	std	Z+2, r24	; 0x02
    4b10:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4b14:	0b c0       	rjmp	.+22     	; 0x4b2c <__vector_37+0x6c>
    4b16:	e9 ec       	ldi	r30, 0xC9	; 201
    4b18:	f0 e0       	ldi	r31, 0x00	; 0
    4b1a:	80 81       	ld	r24, Z
    4b1c:	8f 7d       	andi	r24, 0xDF	; 223
    4b1e:	80 83       	st	Z, r24
    4b20:	05 c0       	rjmp	.+10     	; 0x4b2c <__vector_37+0x6c>
    4b22:	e9 ec       	ldi	r30, 0xC9	; 201
    4b24:	f0 e0       	ldi	r31, 0x00	; 0
    4b26:	80 81       	ld	r24, Z
    4b28:	8f 7d       	andi	r24, 0xDF	; 223
    4b2a:	80 83       	st	Z, r24
    4b2c:	ff 91       	pop	r31
    4b2e:	ef 91       	pop	r30
    4b30:	bf 91       	pop	r27
    4b32:	af 91       	pop	r26
    4b34:	9f 91       	pop	r25
    4b36:	8f 91       	pop	r24
    4b38:	2f 91       	pop	r18
    4b3a:	0f 90       	pop	r0
    4b3c:	0b be       	out	0x3b, r0	; 59
    4b3e:	0f 90       	pop	r0
    4b40:	0f be       	out	0x3f, r0	; 63
    4b42:	0f 90       	pop	r0
    4b44:	1f 90       	pop	r1
    4b46:	18 95       	reti

00004b48 <__vector_51>:
    4b48:	1f 92       	push	r1
    4b4a:	0f 92       	push	r0
    4b4c:	0f b6       	in	r0, 0x3f	; 63
    4b4e:	0f 92       	push	r0
    4b50:	11 24       	eor	r1, r1
    4b52:	0b b6       	in	r0, 0x3b	; 59
    4b54:	0f 92       	push	r0
    4b56:	2f 93       	push	r18
    4b58:	3f 93       	push	r19
    4b5a:	4f 93       	push	r20
    4b5c:	5f 93       	push	r21
    4b5e:	6f 93       	push	r22
    4b60:	7f 93       	push	r23
    4b62:	8f 93       	push	r24
    4b64:	9f 93       	push	r25
    4b66:	af 93       	push	r26
    4b68:	bf 93       	push	r27
    4b6a:	cf 93       	push	r28
    4b6c:	df 93       	push	r29
    4b6e:	ef 93       	push	r30
    4b70:	ff 93       	push	r31
    4b72:	a0 91 41 14 	lds	r26, 0x1441	; 0x801441 <_ser_handle+0x4>
    4b76:	b0 91 42 14 	lds	r27, 0x1442	; 0x801442 <_ser_handle+0x5>
    4b7a:	10 97       	sbiw	r26, 0x00	; 0
    4b7c:	11 f1       	breq	.+68     	; 0x4bc2 <__vector_51+0x7a>
    4b7e:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4b82:	14 96       	adiw	r26, 0x04	; 4
    4b84:	ed 91       	ld	r30, X+
    4b86:	fc 91       	ld	r31, X
    4b88:	15 97       	sbiw	r26, 0x05	; 5
    4b8a:	93 81       	ldd	r25, Z+3	; 0x03
    4b8c:	82 81       	ldd	r24, Z+2	; 0x02
    4b8e:	25 81       	ldd	r18, Z+5	; 0x05
    4b90:	98 1b       	sub	r25, r24
    4b92:	92 23       	and	r25, r18
    4b94:	84 81       	ldd	r24, Z+4	; 0x04
    4b96:	98 17       	cp	r25, r24
    4b98:	61 f0       	breq	.+24     	; 0x4bb2 <__vector_51+0x6a>
    4b9a:	83 81       	ldd	r24, Z+3	; 0x03
    4b9c:	26 95       	lsr	r18
    4b9e:	28 23       	and	r18, r24
    4ba0:	c0 81       	ld	r28, Z
    4ba2:	d1 81       	ldd	r29, Z+1	; 0x01
    4ba4:	c2 0f       	add	r28, r18
    4ba6:	d1 1d       	adc	r29, r1
    4ba8:	68 83       	st	Y, r22
    4baa:	8f 5f       	subi	r24, 0xFF	; 255
    4bac:	95 81       	ldd	r25, Z+5	; 0x05
    4bae:	89 23       	and	r24, r25
    4bb0:	83 83       	std	Z+3, r24	; 0x03
    4bb2:	16 96       	adiw	r26, 0x06	; 6
    4bb4:	ed 91       	ld	r30, X+
    4bb6:	fc 91       	ld	r31, X
    4bb8:	17 97       	sbiw	r26, 0x07	; 7
    4bba:	30 97       	sbiw	r30, 0x00	; 0
    4bbc:	11 f0       	breq	.+4      	; 0x4bc2 <__vector_51+0x7a>
    4bbe:	cd 01       	movw	r24, r26
    4bc0:	19 95       	eicall
    4bc2:	ff 91       	pop	r31
    4bc4:	ef 91       	pop	r30
    4bc6:	df 91       	pop	r29
    4bc8:	cf 91       	pop	r28
    4bca:	bf 91       	pop	r27
    4bcc:	af 91       	pop	r26
    4bce:	9f 91       	pop	r25
    4bd0:	8f 91       	pop	r24
    4bd2:	7f 91       	pop	r23
    4bd4:	6f 91       	pop	r22
    4bd6:	5f 91       	pop	r21
    4bd8:	4f 91       	pop	r20
    4bda:	3f 91       	pop	r19
    4bdc:	2f 91       	pop	r18
    4bde:	0f 90       	pop	r0
    4be0:	0b be       	out	0x3b, r0	; 59
    4be2:	0f 90       	pop	r0
    4be4:	0f be       	out	0x3f, r0	; 63
    4be6:	0f 90       	pop	r0
    4be8:	1f 90       	pop	r1
    4bea:	18 95       	reti

00004bec <__vector_52>:
    4bec:	1f 92       	push	r1
    4bee:	0f 92       	push	r0
    4bf0:	0f b6       	in	r0, 0x3f	; 63
    4bf2:	0f 92       	push	r0
    4bf4:	11 24       	eor	r1, r1
    4bf6:	0b b6       	in	r0, 0x3b	; 59
    4bf8:	0f 92       	push	r0
    4bfa:	2f 93       	push	r18
    4bfc:	8f 93       	push	r24
    4bfe:	9f 93       	push	r25
    4c00:	af 93       	push	r26
    4c02:	bf 93       	push	r27
    4c04:	ef 93       	push	r30
    4c06:	ff 93       	push	r31
    4c08:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <_ser_handle+0x4>
    4c0c:	f0 91 42 14 	lds	r31, 0x1442	; 0x801442 <_ser_handle+0x5>
    4c10:	30 97       	sbiw	r30, 0x00	; 0
    4c12:	b9 f0       	breq	.+46     	; 0x4c42 <__vector_52+0x56>
    4c14:	02 80       	ldd	r0, Z+2	; 0x02
    4c16:	f3 81       	ldd	r31, Z+3	; 0x03
    4c18:	e0 2d       	mov	r30, r0
    4c1a:	93 81       	ldd	r25, Z+3	; 0x03
    4c1c:	82 81       	ldd	r24, Z+2	; 0x02
    4c1e:	98 17       	cp	r25, r24
    4c20:	b1 f0       	breq	.+44     	; 0x4c4e <__vector_52+0x62>
    4c22:	92 81       	ldd	r25, Z+2	; 0x02
    4c24:	85 81       	ldd	r24, Z+5	; 0x05
    4c26:	28 2f       	mov	r18, r24
    4c28:	26 95       	lsr	r18
    4c2a:	29 23       	and	r18, r25
    4c2c:	a0 81       	ld	r26, Z
    4c2e:	b1 81       	ldd	r27, Z+1	; 0x01
    4c30:	a2 0f       	add	r26, r18
    4c32:	b1 1d       	adc	r27, r1
    4c34:	2c 91       	ld	r18, X
    4c36:	9f 5f       	subi	r25, 0xFF	; 255
    4c38:	89 23       	and	r24, r25
    4c3a:	82 83       	std	Z+2, r24	; 0x02
    4c3c:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4c40:	0b c0       	rjmp	.+22     	; 0x4c58 <__vector_52+0x6c>
    4c42:	e1 ed       	ldi	r30, 0xD1	; 209
    4c44:	f0 e0       	ldi	r31, 0x00	; 0
    4c46:	80 81       	ld	r24, Z
    4c48:	8f 7d       	andi	r24, 0xDF	; 223
    4c4a:	80 83       	st	Z, r24
    4c4c:	05 c0       	rjmp	.+10     	; 0x4c58 <__vector_52+0x6c>
    4c4e:	e1 ed       	ldi	r30, 0xD1	; 209
    4c50:	f0 e0       	ldi	r31, 0x00	; 0
    4c52:	80 81       	ld	r24, Z
    4c54:	8f 7d       	andi	r24, 0xDF	; 223
    4c56:	80 83       	st	Z, r24
    4c58:	ff 91       	pop	r31
    4c5a:	ef 91       	pop	r30
    4c5c:	bf 91       	pop	r27
    4c5e:	af 91       	pop	r26
    4c60:	9f 91       	pop	r25
    4c62:	8f 91       	pop	r24
    4c64:	2f 91       	pop	r18
    4c66:	0f 90       	pop	r0
    4c68:	0b be       	out	0x3b, r0	; 59
    4c6a:	0f 90       	pop	r0
    4c6c:	0f be       	out	0x3f, r0	; 63
    4c6e:	0f 90       	pop	r0
    4c70:	1f 90       	pop	r1
    4c72:	18 95       	reti

00004c74 <__vector_54>:
    4c74:	1f 92       	push	r1
    4c76:	0f 92       	push	r0
    4c78:	0f b6       	in	r0, 0x3f	; 63
    4c7a:	0f 92       	push	r0
    4c7c:	11 24       	eor	r1, r1
    4c7e:	0b b6       	in	r0, 0x3b	; 59
    4c80:	0f 92       	push	r0
    4c82:	2f 93       	push	r18
    4c84:	3f 93       	push	r19
    4c86:	4f 93       	push	r20
    4c88:	5f 93       	push	r21
    4c8a:	6f 93       	push	r22
    4c8c:	7f 93       	push	r23
    4c8e:	8f 93       	push	r24
    4c90:	9f 93       	push	r25
    4c92:	af 93       	push	r26
    4c94:	bf 93       	push	r27
    4c96:	cf 93       	push	r28
    4c98:	df 93       	push	r29
    4c9a:	ef 93       	push	r30
    4c9c:	ff 93       	push	r31
    4c9e:	a0 91 43 14 	lds	r26, 0x1443	; 0x801443 <_ser_handle+0x6>
    4ca2:	b0 91 44 14 	lds	r27, 0x1444	; 0x801444 <_ser_handle+0x7>
    4ca6:	10 97       	sbiw	r26, 0x00	; 0
    4ca8:	11 f1       	breq	.+68     	; 0x4cee <__vector_54+0x7a>
    4caa:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4cae:	14 96       	adiw	r26, 0x04	; 4
    4cb0:	ed 91       	ld	r30, X+
    4cb2:	fc 91       	ld	r31, X
    4cb4:	15 97       	sbiw	r26, 0x05	; 5
    4cb6:	93 81       	ldd	r25, Z+3	; 0x03
    4cb8:	82 81       	ldd	r24, Z+2	; 0x02
    4cba:	25 81       	ldd	r18, Z+5	; 0x05
    4cbc:	98 1b       	sub	r25, r24
    4cbe:	92 23       	and	r25, r18
    4cc0:	84 81       	ldd	r24, Z+4	; 0x04
    4cc2:	98 17       	cp	r25, r24
    4cc4:	61 f0       	breq	.+24     	; 0x4cde <__vector_54+0x6a>
    4cc6:	83 81       	ldd	r24, Z+3	; 0x03
    4cc8:	26 95       	lsr	r18
    4cca:	28 23       	and	r18, r24
    4ccc:	c0 81       	ld	r28, Z
    4cce:	d1 81       	ldd	r29, Z+1	; 0x01
    4cd0:	c2 0f       	add	r28, r18
    4cd2:	d1 1d       	adc	r29, r1
    4cd4:	68 83       	st	Y, r22
    4cd6:	8f 5f       	subi	r24, 0xFF	; 255
    4cd8:	95 81       	ldd	r25, Z+5	; 0x05
    4cda:	89 23       	and	r24, r25
    4cdc:	83 83       	std	Z+3, r24	; 0x03
    4cde:	16 96       	adiw	r26, 0x06	; 6
    4ce0:	ed 91       	ld	r30, X+
    4ce2:	fc 91       	ld	r31, X
    4ce4:	17 97       	sbiw	r26, 0x07	; 7
    4ce6:	30 97       	sbiw	r30, 0x00	; 0
    4ce8:	11 f0       	breq	.+4      	; 0x4cee <__vector_54+0x7a>
    4cea:	cd 01       	movw	r24, r26
    4cec:	19 95       	eicall
    4cee:	ff 91       	pop	r31
    4cf0:	ef 91       	pop	r30
    4cf2:	df 91       	pop	r29
    4cf4:	cf 91       	pop	r28
    4cf6:	bf 91       	pop	r27
    4cf8:	af 91       	pop	r26
    4cfa:	9f 91       	pop	r25
    4cfc:	8f 91       	pop	r24
    4cfe:	7f 91       	pop	r23
    4d00:	6f 91       	pop	r22
    4d02:	5f 91       	pop	r21
    4d04:	4f 91       	pop	r20
    4d06:	3f 91       	pop	r19
    4d08:	2f 91       	pop	r18
    4d0a:	0f 90       	pop	r0
    4d0c:	0b be       	out	0x3b, r0	; 59
    4d0e:	0f 90       	pop	r0
    4d10:	0f be       	out	0x3f, r0	; 63
    4d12:	0f 90       	pop	r0
    4d14:	1f 90       	pop	r1
    4d16:	18 95       	reti

00004d18 <__vector_55>:
    4d18:	1f 92       	push	r1
    4d1a:	0f 92       	push	r0
    4d1c:	0f b6       	in	r0, 0x3f	; 63
    4d1e:	0f 92       	push	r0
    4d20:	11 24       	eor	r1, r1
    4d22:	0b b6       	in	r0, 0x3b	; 59
    4d24:	0f 92       	push	r0
    4d26:	2f 93       	push	r18
    4d28:	8f 93       	push	r24
    4d2a:	9f 93       	push	r25
    4d2c:	af 93       	push	r26
    4d2e:	bf 93       	push	r27
    4d30:	ef 93       	push	r30
    4d32:	ff 93       	push	r31
    4d34:	e0 91 43 14 	lds	r30, 0x1443	; 0x801443 <_ser_handle+0x6>
    4d38:	f0 91 44 14 	lds	r31, 0x1444	; 0x801444 <_ser_handle+0x7>
    4d3c:	30 97       	sbiw	r30, 0x00	; 0
    4d3e:	b9 f0       	breq	.+46     	; 0x4d6e <__vector_55+0x56>
    4d40:	02 80       	ldd	r0, Z+2	; 0x02
    4d42:	f3 81       	ldd	r31, Z+3	; 0x03
    4d44:	e0 2d       	mov	r30, r0
    4d46:	93 81       	ldd	r25, Z+3	; 0x03
    4d48:	82 81       	ldd	r24, Z+2	; 0x02
    4d4a:	98 17       	cp	r25, r24
    4d4c:	b1 f0       	breq	.+44     	; 0x4d7a <__vector_55+0x62>
    4d4e:	92 81       	ldd	r25, Z+2	; 0x02
    4d50:	85 81       	ldd	r24, Z+5	; 0x05
    4d52:	28 2f       	mov	r18, r24
    4d54:	26 95       	lsr	r18
    4d56:	29 23       	and	r18, r25
    4d58:	a0 81       	ld	r26, Z
    4d5a:	b1 81       	ldd	r27, Z+1	; 0x01
    4d5c:	a2 0f       	add	r26, r18
    4d5e:	b1 1d       	adc	r27, r1
    4d60:	2c 91       	ld	r18, X
    4d62:	9f 5f       	subi	r25, 0xFF	; 255
    4d64:	89 23       	and	r24, r25
    4d66:	82 83       	std	Z+2, r24	; 0x02
    4d68:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4d6c:	0b c0       	rjmp	.+22     	; 0x4d84 <__vector_55+0x6c>
    4d6e:	e1 e3       	ldi	r30, 0x31	; 49
    4d70:	f1 e0       	ldi	r31, 0x01	; 1
    4d72:	80 81       	ld	r24, Z
    4d74:	8f 7d       	andi	r24, 0xDF	; 223
    4d76:	80 83       	st	Z, r24
    4d78:	05 c0       	rjmp	.+10     	; 0x4d84 <__vector_55+0x6c>
    4d7a:	e1 e3       	ldi	r30, 0x31	; 49
    4d7c:	f1 e0       	ldi	r31, 0x01	; 1
    4d7e:	80 81       	ld	r24, Z
    4d80:	8f 7d       	andi	r24, 0xDF	; 223
    4d82:	80 83       	st	Z, r24
    4d84:	ff 91       	pop	r31
    4d86:	ef 91       	pop	r30
    4d88:	bf 91       	pop	r27
    4d8a:	af 91       	pop	r26
    4d8c:	9f 91       	pop	r25
    4d8e:	8f 91       	pop	r24
    4d90:	2f 91       	pop	r18
    4d92:	0f 90       	pop	r0
    4d94:	0b be       	out	0x3b, r0	; 59
    4d96:	0f 90       	pop	r0
    4d98:	0f be       	out	0x3f, r0	; 63
    4d9a:	0f 90       	pop	r0
    4d9c:	1f 90       	pop	r1
    4d9e:	18 95       	reti

00004da0 <usart_getchar>:
    4da0:	cf 93       	push	r28
    4da2:	df 93       	push	r29
    4da4:	1f 92       	push	r1
    4da6:	cd b7       	in	r28, 0x3d	; 61
    4da8:	de b7       	in	r29, 0x3e	; 62
    4daa:	be 01       	movw	r22, r28
    4dac:	6f 5f       	subi	r22, 0xFF	; 255
    4dae:	7f 4f       	sbci	r23, 0xFF	; 255
    4db0:	80 91 45 14 	lds	r24, 0x1445	; 0x801445 <_com_serial_instance>
    4db4:	90 91 46 14 	lds	r25, 0x1446	; 0x801446 <_com_serial_instance+0x1>
    4db8:	7b dd       	rcall	.-1290   	; 0x48b0 <serial_getByte>
    4dba:	81 11       	cpse	r24, r1
    4dbc:	f6 cf       	rjmp	.-20     	; 0x4daa <usart_getchar+0xa>
    4dbe:	89 81       	ldd	r24, Y+1	; 0x01
    4dc0:	90 e0       	ldi	r25, 0x00	; 0
    4dc2:	0f 90       	pop	r0
    4dc4:	df 91       	pop	r29
    4dc6:	cf 91       	pop	r28
    4dc8:	08 95       	ret

00004dca <usart_putchar>:
    4dca:	68 2f       	mov	r22, r24
    4dcc:	80 91 45 14 	lds	r24, 0x1445	; 0x801445 <_com_serial_instance>
    4dd0:	90 91 46 14 	lds	r25, 0x1446	; 0x801446 <_com_serial_instance+0x1>
    4dd4:	ed dc       	rcall	.-1574   	; 0x47b0 <serial_sendByte>
    4dd6:	80 e0       	ldi	r24, 0x00	; 0
    4dd8:	90 e0       	ldi	r25, 0x00	; 0
    4dda:	08 95       	ret

00004ddc <stdio_initialise>:
    4ddc:	8f 92       	push	r8
    4dde:	9f 92       	push	r9
    4de0:	af 92       	push	r10
    4de2:	cf 92       	push	r12
    4de4:	ef 92       	push	r14
    4de6:	0f 93       	push	r16
    4de8:	81 2c       	mov	r8, r1
    4dea:	91 2c       	mov	r9, r1
    4dec:	68 94       	set
    4dee:	aa 24       	eor	r10, r10
    4df0:	a7 f8       	bld	r10, 7
    4df2:	68 94       	set
    4df4:	cc 24       	eor	r12, r12
    4df6:	c7 f8       	bld	r12, 7
    4df8:	e1 2c       	mov	r14, r1
    4dfa:	00 e0       	ldi	r16, 0x00	; 0
    4dfc:	23 e0       	ldi	r18, 0x03	; 3
    4dfe:	40 e0       	ldi	r20, 0x00	; 0
    4e00:	51 ee       	ldi	r21, 0xE1	; 225
    4e02:	60 e0       	ldi	r22, 0x00	; 0
    4e04:	70 e0       	ldi	r23, 0x00	; 0
    4e06:	32 dc       	rcall	.-1948   	; 0x466c <serial_create>
    4e08:	90 93 46 14 	sts	0x1446, r25	; 0x801446 <_com_serial_instance+0x1>
    4e0c:	80 93 45 14 	sts	0x1445, r24	; 0x801445 <_com_serial_instance>
    4e10:	ea e7       	ldi	r30, 0x7A	; 122
    4e12:	f4 e1       	ldi	r31, 0x14	; 20
    4e14:	83 e1       	ldi	r24, 0x13	; 19
    4e16:	92 e0       	ldi	r25, 0x02	; 2
    4e18:	91 83       	std	Z+1, r25	; 0x01
    4e1a:	80 83       	st	Z, r24
    4e1c:	93 83       	std	Z+3, r25	; 0x03
    4e1e:	82 83       	std	Z+2, r24	; 0x02
    4e20:	0f 91       	pop	r16
    4e22:	ef 90       	pop	r14
    4e24:	cf 90       	pop	r12
    4e26:	af 90       	pop	r10
    4e28:	9f 90       	pop	r9
    4e2a:	8f 90       	pop	r8
    4e2c:	08 95       	ret

00004e2e <_turn_off>:
    4e2e:	90 e0       	ldi	r25, 0x00	; 0
    4e30:	fc 01       	movw	r30, r24
    4e32:	ee 0f       	add	r30, r30
    4e34:	ff 1f       	adc	r31, r31
    4e36:	e8 0f       	add	r30, r24
    4e38:	f9 1f       	adc	r31, r25
    4e3a:	ee 0f       	add	r30, r30
    4e3c:	ff 1f       	adc	r31, r31
    4e3e:	e9 5b       	subi	r30, 0xB9	; 185
    4e40:	fb 4e       	sbci	r31, 0xEB	; 235
    4e42:	23 81       	ldd	r18, Z+3	; 0x03
    4e44:	21 11       	cpse	r18, r1
    4e46:	1f c0       	rjmp	.+62     	; 0x4e86 <_turn_off+0x58>
    4e48:	9c 01       	movw	r18, r24
    4e4a:	22 0f       	add	r18, r18
    4e4c:	33 1f       	adc	r19, r19
    4e4e:	f9 01       	movw	r30, r18
    4e50:	e8 0f       	add	r30, r24
    4e52:	f9 1f       	adc	r31, r25
    4e54:	ee 0f       	add	r30, r30
    4e56:	ff 1f       	adc	r31, r31
    4e58:	e9 5b       	subi	r30, 0xB9	; 185
    4e5a:	fb 4e       	sbci	r31, 0xEB	; 235
    4e5c:	a0 81       	ld	r26, Z
    4e5e:	b1 81       	ldd	r27, Z+1	; 0x01
    4e60:	4c 91       	ld	r20, X
    4e62:	f9 01       	movw	r30, r18
    4e64:	e8 0f       	add	r30, r24
    4e66:	f9 1f       	adc	r31, r25
    4e68:	ee 0f       	add	r30, r30
    4e6a:	ff 1f       	adc	r31, r31
    4e6c:	e9 5b       	subi	r30, 0xB9	; 185
    4e6e:	fb 4e       	sbci	r31, 0xEB	; 235
    4e70:	81 e0       	ldi	r24, 0x01	; 1
    4e72:	90 e0       	ldi	r25, 0x00	; 0
    4e74:	02 80       	ldd	r0, Z+2	; 0x02
    4e76:	02 c0       	rjmp	.+4      	; 0x4e7c <_turn_off+0x4e>
    4e78:	88 0f       	add	r24, r24
    4e7a:	99 1f       	adc	r25, r25
    4e7c:	0a 94       	dec	r0
    4e7e:	e2 f7       	brpl	.-8      	; 0x4e78 <_turn_off+0x4a>
    4e80:	84 2b       	or	r24, r20
    4e82:	8c 93       	st	X, r24
    4e84:	08 95       	ret
    4e86:	fc 01       	movw	r30, r24
    4e88:	ee 0f       	add	r30, r30
    4e8a:	ff 1f       	adc	r31, r31
    4e8c:	df 01       	movw	r26, r30
    4e8e:	a8 0f       	add	r26, r24
    4e90:	b9 1f       	adc	r27, r25
    4e92:	aa 0f       	add	r26, r26
    4e94:	bb 1f       	adc	r27, r27
    4e96:	a9 5b       	subi	r26, 0xB9	; 185
    4e98:	bb 4e       	sbci	r27, 0xEB	; 235
    4e9a:	0d 90       	ld	r0, X+
    4e9c:	bc 91       	ld	r27, X
    4e9e:	a0 2d       	mov	r26, r0
    4ea0:	2c 91       	ld	r18, X
    4ea2:	e8 0f       	add	r30, r24
    4ea4:	f9 1f       	adc	r31, r25
    4ea6:	ee 0f       	add	r30, r30
    4ea8:	ff 1f       	adc	r31, r31
    4eaa:	e9 5b       	subi	r30, 0xB9	; 185
    4eac:	fb 4e       	sbci	r31, 0xEB	; 235
    4eae:	81 e0       	ldi	r24, 0x01	; 1
    4eb0:	90 e0       	ldi	r25, 0x00	; 0
    4eb2:	02 80       	ldd	r0, Z+2	; 0x02
    4eb4:	02 c0       	rjmp	.+4      	; 0x4eba <_turn_off+0x8c>
    4eb6:	88 0f       	add	r24, r24
    4eb8:	99 1f       	adc	r25, r25
    4eba:	0a 94       	dec	r0
    4ebc:	e2 f7       	brpl	.-8      	; 0x4eb6 <_turn_off+0x88>
    4ebe:	80 95       	com	r24
    4ec0:	82 23       	and	r24, r18
    4ec2:	8c 93       	st	X, r24
    4ec4:	08 95       	ret

00004ec6 <_turn_on>:
    4ec6:	90 e0       	ldi	r25, 0x00	; 0
    4ec8:	fc 01       	movw	r30, r24
    4eca:	ee 0f       	add	r30, r30
    4ecc:	ff 1f       	adc	r31, r31
    4ece:	e8 0f       	add	r30, r24
    4ed0:	f9 1f       	adc	r31, r25
    4ed2:	ee 0f       	add	r30, r30
    4ed4:	ff 1f       	adc	r31, r31
    4ed6:	e9 5b       	subi	r30, 0xB9	; 185
    4ed8:	fb 4e       	sbci	r31, 0xEB	; 235
    4eda:	23 81       	ldd	r18, Z+3	; 0x03
    4edc:	21 11       	cpse	r18, r1
    4ede:	20 c0       	rjmp	.+64     	; 0x4f20 <_turn_on+0x5a>
    4ee0:	9c 01       	movw	r18, r24
    4ee2:	22 0f       	add	r18, r18
    4ee4:	33 1f       	adc	r19, r19
    4ee6:	f9 01       	movw	r30, r18
    4ee8:	e8 0f       	add	r30, r24
    4eea:	f9 1f       	adc	r31, r25
    4eec:	ee 0f       	add	r30, r30
    4eee:	ff 1f       	adc	r31, r31
    4ef0:	e9 5b       	subi	r30, 0xB9	; 185
    4ef2:	fb 4e       	sbci	r31, 0xEB	; 235
    4ef4:	a0 81       	ld	r26, Z
    4ef6:	b1 81       	ldd	r27, Z+1	; 0x01
    4ef8:	4c 91       	ld	r20, X
    4efa:	f9 01       	movw	r30, r18
    4efc:	e8 0f       	add	r30, r24
    4efe:	f9 1f       	adc	r31, r25
    4f00:	ee 0f       	add	r30, r30
    4f02:	ff 1f       	adc	r31, r31
    4f04:	e9 5b       	subi	r30, 0xB9	; 185
    4f06:	fb 4e       	sbci	r31, 0xEB	; 235
    4f08:	81 e0       	ldi	r24, 0x01	; 1
    4f0a:	90 e0       	ldi	r25, 0x00	; 0
    4f0c:	02 80       	ldd	r0, Z+2	; 0x02
    4f0e:	02 c0       	rjmp	.+4      	; 0x4f14 <_turn_on+0x4e>
    4f10:	88 0f       	add	r24, r24
    4f12:	99 1f       	adc	r25, r25
    4f14:	0a 94       	dec	r0
    4f16:	e2 f7       	brpl	.-8      	; 0x4f10 <_turn_on+0x4a>
    4f18:	80 95       	com	r24
    4f1a:	84 23       	and	r24, r20
    4f1c:	8c 93       	st	X, r24
    4f1e:	08 95       	ret
    4f20:	fc 01       	movw	r30, r24
    4f22:	ee 0f       	add	r30, r30
    4f24:	ff 1f       	adc	r31, r31
    4f26:	df 01       	movw	r26, r30
    4f28:	a8 0f       	add	r26, r24
    4f2a:	b9 1f       	adc	r27, r25
    4f2c:	aa 0f       	add	r26, r26
    4f2e:	bb 1f       	adc	r27, r27
    4f30:	a9 5b       	subi	r26, 0xB9	; 185
    4f32:	bb 4e       	sbci	r27, 0xEB	; 235
    4f34:	0d 90       	ld	r0, X+
    4f36:	bc 91       	ld	r27, X
    4f38:	a0 2d       	mov	r26, r0
    4f3a:	2c 91       	ld	r18, X
    4f3c:	e8 0f       	add	r30, r24
    4f3e:	f9 1f       	adc	r31, r25
    4f40:	ee 0f       	add	r30, r30
    4f42:	ff 1f       	adc	r31, r31
    4f44:	e9 5b       	subi	r30, 0xB9	; 185
    4f46:	fb 4e       	sbci	r31, 0xEB	; 235
    4f48:	81 e0       	ldi	r24, 0x01	; 1
    4f4a:	90 e0       	ldi	r25, 0x00	; 0
    4f4c:	02 80       	ldd	r0, Z+2	; 0x02
    4f4e:	02 c0       	rjmp	.+4      	; 0x4f54 <_turn_on+0x8e>
    4f50:	88 0f       	add	r24, r24
    4f52:	99 1f       	adc	r25, r25
    4f54:	0a 94       	dec	r0
    4f56:	e2 f7       	brpl	.-8      	; 0x4f50 <_turn_on+0x8a>
    4f58:	82 2b       	or	r24, r18
    4f5a:	8c 93       	st	X, r24
    4f5c:	08 95       	ret

00004f5e <_hal_led_task>:
    4f5e:	cc 24       	eor	r12, r12
    4f60:	c3 94       	inc	r12
    4f62:	d1 2c       	mov	r13, r1
    4f64:	68 94       	set
    4f66:	bb 24       	eor	r11, r11
    4f68:	b2 f8       	bld	r11, 2
    4f6a:	c7 e4       	ldi	r28, 0x47	; 71
    4f6c:	d4 e1       	ldi	r29, 0x14	; 20
    4f6e:	10 e0       	ldi	r17, 0x00	; 0
    4f70:	8c 81       	ldd	r24, Y+4	; 0x04
    4f72:	81 30       	cpi	r24, 0x01	; 1
    4f74:	81 f0       	breq	.+32     	; 0x4f96 <_hal_led_task+0x38>
    4f76:	18 f1       	brcs	.+70     	; 0x4fbe <_hal_led_task+0x60>
    4f78:	82 30       	cpi	r24, 0x02	; 2
    4f7a:	61 f5       	brne	.+88     	; 0x4fd4 <_hal_led_task+0x76>
    4f7c:	e8 81       	ld	r30, Y
    4f7e:	f9 81       	ldd	r31, Y+1	; 0x01
    4f80:	20 81       	ld	r18, Z
    4f82:	c6 01       	movw	r24, r12
    4f84:	0a 80       	ldd	r0, Y+2	; 0x02
    4f86:	02 c0       	rjmp	.+4      	; 0x4f8c <_hal_led_task+0x2e>
    4f88:	88 0f       	add	r24, r24
    4f8a:	99 1f       	adc	r25, r25
    4f8c:	0a 94       	dec	r0
    4f8e:	e2 f7       	brpl	.-8      	; 0x4f88 <_hal_led_task+0x2a>
    4f90:	82 27       	eor	r24, r18
    4f92:	80 83       	st	Z, r24
    4f94:	1f c0       	rjmp	.+62     	; 0x4fd4 <_hal_led_task+0x76>
    4f96:	8d 81       	ldd	r24, Y+5	; 0x05
    4f98:	8f 5f       	subi	r24, 0xFF	; 255
    4f9a:	8a 30       	cpi	r24, 0x0A	; 10
    4f9c:	10 f4       	brcc	.+4      	; 0x4fa2 <_hal_led_task+0x44>
    4f9e:	8d 83       	std	Y+5, r24	; 0x05
    4fa0:	19 c0       	rjmp	.+50     	; 0x4fd4 <_hal_led_task+0x76>
    4fa2:	1d 82       	std	Y+5, r1	; 0x05
    4fa4:	e8 81       	ld	r30, Y
    4fa6:	f9 81       	ldd	r31, Y+1	; 0x01
    4fa8:	20 81       	ld	r18, Z
    4faa:	c6 01       	movw	r24, r12
    4fac:	0a 80       	ldd	r0, Y+2	; 0x02
    4fae:	02 c0       	rjmp	.+4      	; 0x4fb4 <_hal_led_task+0x56>
    4fb0:	88 0f       	add	r24, r24
    4fb2:	99 1f       	adc	r25, r25
    4fb4:	0a 94       	dec	r0
    4fb6:	e2 f7       	brpl	.-8      	; 0x4fb0 <_hal_led_task+0x52>
    4fb8:	82 27       	eor	r24, r18
    4fba:	80 83       	st	Z, r24
    4fbc:	0b c0       	rjmp	.+22     	; 0x4fd4 <_hal_led_task+0x76>
    4fbe:	0d 81       	ldd	r16, Y+5	; 0x05
    4fc0:	00 23       	and	r16, r16
    4fc2:	29 f0       	breq	.+10     	; 0x4fce <_hal_led_task+0x70>
    4fc4:	81 2f       	mov	r24, r17
    4fc6:	7f df       	rcall	.-258    	; 0x4ec6 <_turn_on>
    4fc8:	01 50       	subi	r16, 0x01	; 1
    4fca:	0d 83       	std	Y+5, r16	; 0x05
    4fcc:	03 c0       	rjmp	.+6      	; 0x4fd4 <_hal_led_task+0x76>
    4fce:	bc 82       	std	Y+4, r11	; 0x04
    4fd0:	81 2f       	mov	r24, r17
    4fd2:	2d df       	rcall	.-422    	; 0x4e2e <_turn_off>
    4fd4:	1f 5f       	subi	r17, 0xFF	; 255
    4fd6:	26 96       	adiw	r28, 0x06	; 6
    4fd8:	14 30       	cpi	r17, 0x04	; 4
    4fda:	51 f6       	brne	.-108    	; 0x4f70 <_hal_led_task+0x12>
    4fdc:	65 e0       	ldi	r22, 0x05	; 5
    4fde:	70 e0       	ldi	r23, 0x00	; 0
    4fe0:	80 e0       	ldi	r24, 0x00	; 0
    4fe2:	90 e0       	ldi	r25, 0x00	; 0
    4fe4:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <vTaskDelay>
    4fe8:	c0 cf       	rjmp	.-128    	; 0x4f6a <_hal_led_task+0xc>

00004fea <status_leds_initialise>:
    4fea:	ef 92       	push	r14
    4fec:	ff 92       	push	r15
    4fee:	0f 93       	push	r16
    4ff0:	1f 93       	push	r17
    4ff2:	cf 93       	push	r28
    4ff4:	df 93       	push	r29
    4ff6:	08 2f       	mov	r16, r24
    4ff8:	80 e4       	ldi	r24, 0x40	; 64
    4ffa:	87 b9       	out	0x07, r24	; 7
    4ffc:	c7 e4       	ldi	r28, 0x47	; 71
    4ffe:	d4 e1       	ldi	r29, 0x14	; 20
    5000:	0f 2e       	mov	r0, r31
    5002:	f8 e2       	ldi	r31, 0x28	; 40
    5004:	ef 2e       	mov	r14, r31
    5006:	f1 2c       	mov	r15, r1
    5008:	f0 2d       	mov	r31, r0
    500a:	f9 82       	std	Y+1, r15	; 0x01
    500c:	e8 82       	st	Y, r14
    500e:	86 e0       	ldi	r24, 0x06	; 6
    5010:	8a 83       	std	Y+2, r24	; 0x02
    5012:	1b 82       	std	Y+3, r1	; 0x03
    5014:	14 e0       	ldi	r17, 0x04	; 4
    5016:	1c 83       	std	Y+4, r17	; 0x04
    5018:	80 e0       	ldi	r24, 0x00	; 0
    501a:	09 df       	rcall	.-494    	; 0x4e2e <_turn_off>
    501c:	80 e8       	ldi	r24, 0x80	; 128
    501e:	87 b9       	out	0x07, r24	; 7
    5020:	ff 82       	std	Y+7, r15	; 0x07
    5022:	ee 82       	std	Y+6, r14	; 0x06
    5024:	87 e0       	ldi	r24, 0x07	; 7
    5026:	88 87       	std	Y+8, r24	; 0x08
    5028:	19 86       	std	Y+9, r1	; 0x09
    502a:	1a 87       	std	Y+10, r17	; 0x0a
    502c:	81 e0       	ldi	r24, 0x01	; 1
    502e:	ff de       	rcall	.-514    	; 0x4e2e <_turn_off>
    5030:	80 e2       	ldi	r24, 0x20	; 32
    5032:	83 bb       	out	0x13, r24	; 19
    5034:	84 e3       	ldi	r24, 0x34	; 52
    5036:	90 e0       	ldi	r25, 0x00	; 0
    5038:	9d 87       	std	Y+13, r25	; 0x0d
    503a:	8c 87       	std	Y+12, r24	; 0x0c
    503c:	85 e0       	ldi	r24, 0x05	; 5
    503e:	8e 87       	std	Y+14, r24	; 0x0e
    5040:	1f 86       	std	Y+15, r1	; 0x0f
    5042:	18 8b       	std	Y+16, r17	; 0x10
    5044:	82 e0       	ldi	r24, 0x02	; 2
    5046:	f3 de       	rcall	.-538    	; 0x4e2e <_turn_off>
    5048:	80 e1       	ldi	r24, 0x10	; 16
    504a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    504e:	82 e0       	ldi	r24, 0x02	; 2
    5050:	91 e0       	ldi	r25, 0x01	; 1
    5052:	9b 8b       	std	Y+19, r25	; 0x13
    5054:	8a 8b       	std	Y+18, r24	; 0x12
    5056:	1c 8b       	std	Y+20, r17	; 0x14
    5058:	1d 8a       	std	Y+21, r1	; 0x15
    505a:	1e 8b       	std	Y+22, r17	; 0x16
    505c:	83 e0       	ldi	r24, 0x03	; 3
    505e:	e7 de       	rcall	.-562    	; 0x4e2e <_turn_off>
    5060:	e1 2c       	mov	r14, r1
    5062:	f1 2c       	mov	r15, r1
    5064:	20 e0       	ldi	r18, 0x00	; 0
    5066:	30 e0       	ldi	r19, 0x00	; 0
    5068:	40 ec       	ldi	r20, 0xC0	; 192
    506a:	50 e0       	ldi	r21, 0x00	; 0
    506c:	66 ee       	ldi	r22, 0xE6	; 230
    506e:	77 e0       	ldi	r23, 0x07	; 7
    5070:	8f ea       	ldi	r24, 0xAF	; 175
    5072:	97 e2       	ldi	r25, 0x27	; 39
    5074:	0e 94 75 0e 	call	0x1cea	; 0x1cea <xTaskCreate>
    5078:	df 91       	pop	r29
    507a:	cf 91       	pop	r28
    507c:	1f 91       	pop	r17
    507e:	0f 91       	pop	r16
    5080:	ff 90       	pop	r15
    5082:	ef 90       	pop	r14
    5084:	08 95       	ret

00005086 <status_leds_slowBlink>:
    5086:	cf 93       	push	r28
    5088:	df 93       	push	r29
    508a:	90 e0       	ldi	r25, 0x00	; 0
    508c:	fc 01       	movw	r30, r24
    508e:	ee 0f       	add	r30, r30
    5090:	ff 1f       	adc	r31, r31
    5092:	df 01       	movw	r26, r30
    5094:	a8 0f       	add	r26, r24
    5096:	b9 1f       	adc	r27, r25
    5098:	aa 0f       	add	r26, r26
    509a:	bb 1f       	adc	r27, r27
    509c:	a9 5b       	subi	r26, 0xB9	; 185
    509e:	bb 4e       	sbci	r27, 0xEB	; 235
    50a0:	cd 91       	ld	r28, X+
    50a2:	dc 91       	ld	r29, X
    50a4:	11 97       	sbiw	r26, 0x01	; 1
    50a6:	48 81       	ld	r20, Y
    50a8:	21 e0       	ldi	r18, 0x01	; 1
    50aa:	30 e0       	ldi	r19, 0x00	; 0
    50ac:	12 96       	adiw	r26, 0x02	; 2
    50ae:	0c 90       	ld	r0, X
    50b0:	12 97       	sbiw	r26, 0x02	; 2
    50b2:	02 c0       	rjmp	.+4      	; 0x50b8 <status_leds_slowBlink+0x32>
    50b4:	22 0f       	add	r18, r18
    50b6:	33 1f       	adc	r19, r19
    50b8:	0a 94       	dec	r0
    50ba:	e2 f7       	brpl	.-8      	; 0x50b4 <status_leds_slowBlink+0x2e>
    50bc:	24 27       	eor	r18, r20
    50be:	28 83       	st	Y, r18
    50c0:	fd 01       	movw	r30, r26
    50c2:	81 e0       	ldi	r24, 0x01	; 1
    50c4:	84 83       	std	Z+4, r24	; 0x04
    50c6:	df 91       	pop	r29
    50c8:	cf 91       	pop	r28
    50ca:	08 95       	ret

000050cc <status_leds_fastBlink>:
    50cc:	cf 93       	push	r28
    50ce:	df 93       	push	r29
    50d0:	90 e0       	ldi	r25, 0x00	; 0
    50d2:	fc 01       	movw	r30, r24
    50d4:	ee 0f       	add	r30, r30
    50d6:	ff 1f       	adc	r31, r31
    50d8:	df 01       	movw	r26, r30
    50da:	a8 0f       	add	r26, r24
    50dc:	b9 1f       	adc	r27, r25
    50de:	aa 0f       	add	r26, r26
    50e0:	bb 1f       	adc	r27, r27
    50e2:	a9 5b       	subi	r26, 0xB9	; 185
    50e4:	bb 4e       	sbci	r27, 0xEB	; 235
    50e6:	cd 91       	ld	r28, X+
    50e8:	dc 91       	ld	r29, X
    50ea:	11 97       	sbiw	r26, 0x01	; 1
    50ec:	48 81       	ld	r20, Y
    50ee:	21 e0       	ldi	r18, 0x01	; 1
    50f0:	30 e0       	ldi	r19, 0x00	; 0
    50f2:	12 96       	adiw	r26, 0x02	; 2
    50f4:	0c 90       	ld	r0, X
    50f6:	12 97       	sbiw	r26, 0x02	; 2
    50f8:	02 c0       	rjmp	.+4      	; 0x50fe <status_leds_fastBlink+0x32>
    50fa:	22 0f       	add	r18, r18
    50fc:	33 1f       	adc	r19, r19
    50fe:	0a 94       	dec	r0
    5100:	e2 f7       	brpl	.-8      	; 0x50fa <status_leds_fastBlink+0x2e>
    5102:	24 27       	eor	r18, r20
    5104:	28 83       	st	Y, r18
    5106:	fd 01       	movw	r30, r26
    5108:	82 e0       	ldi	r24, 0x02	; 2
    510a:	84 83       	std	Z+4, r24	; 0x04
    510c:	df 91       	pop	r29
    510e:	cf 91       	pop	r28
    5110:	08 95       	ret

00005112 <status_leds_ledOn>:
    5112:	28 2f       	mov	r18, r24
    5114:	30 e0       	ldi	r19, 0x00	; 0
    5116:	f9 01       	movw	r30, r18
    5118:	ee 0f       	add	r30, r30
    511a:	ff 1f       	adc	r31, r31
    511c:	e2 0f       	add	r30, r18
    511e:	f3 1f       	adc	r31, r19
    5120:	ee 0f       	add	r30, r30
    5122:	ff 1f       	adc	r31, r31
    5124:	e9 5b       	subi	r30, 0xB9	; 185
    5126:	fb 4e       	sbci	r31, 0xEB	; 235
    5128:	93 e0       	ldi	r25, 0x03	; 3
    512a:	94 83       	std	Z+4, r25	; 0x04
    512c:	cc ce       	rjmp	.-616    	; 0x4ec6 <_turn_on>
    512e:	08 95       	ret

00005130 <status_leds_ledOff>:
    5130:	28 2f       	mov	r18, r24
    5132:	30 e0       	ldi	r19, 0x00	; 0
    5134:	f9 01       	movw	r30, r18
    5136:	ee 0f       	add	r30, r30
    5138:	ff 1f       	adc	r31, r31
    513a:	e2 0f       	add	r30, r18
    513c:	f3 1f       	adc	r31, r19
    513e:	ee 0f       	add	r30, r30
    5140:	ff 1f       	adc	r31, r31
    5142:	e9 5b       	subi	r30, 0xB9	; 185
    5144:	fb 4e       	sbci	r31, 0xEB	; 235
    5146:	94 e0       	ldi	r25, 0x04	; 4
    5148:	94 83       	std	Z+4, r25	; 0x04
    514a:	71 ce       	rjmp	.-798    	; 0x4e2e <_turn_off>
    514c:	08 95       	ret

0000514e <status_leds_longPuls>:
    514e:	90 e0       	ldi	r25, 0x00	; 0
    5150:	fc 01       	movw	r30, r24
    5152:	ee 0f       	add	r30, r30
    5154:	ff 1f       	adc	r31, r31
    5156:	df 01       	movw	r26, r30
    5158:	a8 0f       	add	r26, r24
    515a:	b9 1f       	adc	r27, r25
    515c:	aa 0f       	add	r26, r26
    515e:	bb 1f       	adc	r27, r27
    5160:	a9 5b       	subi	r26, 0xB9	; 185
    5162:	bb 4e       	sbci	r27, 0xEB	; 235
    5164:	24 e0       	ldi	r18, 0x04	; 4
    5166:	15 96       	adiw	r26, 0x05	; 5
    5168:	2c 93       	st	X, r18
    516a:	15 97       	sbiw	r26, 0x05	; 5
    516c:	fd 01       	movw	r30, r26
    516e:	14 82       	std	Z+4, r1	; 0x04
    5170:	08 95       	ret

00005172 <status_leds_shortPuls>:
    5172:	90 e0       	ldi	r25, 0x00	; 0
    5174:	fc 01       	movw	r30, r24
    5176:	ee 0f       	add	r30, r30
    5178:	ff 1f       	adc	r31, r31
    517a:	df 01       	movw	r26, r30
    517c:	a8 0f       	add	r26, r24
    517e:	b9 1f       	adc	r27, r25
    5180:	aa 0f       	add	r26, r26
    5182:	bb 1f       	adc	r27, r27
    5184:	a9 5b       	subi	r26, 0xB9	; 185
    5186:	bb 4e       	sbci	r27, 0xEB	; 235
    5188:	21 e0       	ldi	r18, 0x01	; 1
    518a:	15 96       	adiw	r26, 0x05	; 5
    518c:	2c 93       	st	X, r18
    518e:	15 97       	sbiw	r26, 0x05	; 5
    5190:	fd 01       	movw	r30, r26
    5192:	14 82       	std	Z+4, r1	; 0x04
    5194:	08 95       	ret

00005196 <_initTwiInterface>:
    5196:	80 91 6d 14 	lds	r24, 0x146D	; 0x80146d <_twiIsInitiated>
    519a:	81 11       	cpse	r24, r1
    519c:	0c c0       	rjmp	.+24     	; 0x51b6 <_initTwiInterface+0x20>
    519e:	8c e0       	ldi	r24, 0x0C	; 12
    51a0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    51a4:	8f ef       	ldi	r24, 0xFF	; 255
    51a6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    51aa:	84 e0       	ldi	r24, 0x04	; 4
    51ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    51b0:	81 e0       	ldi	r24, 0x01	; 1
    51b2:	80 93 6d 14 	sts	0x146D, r24	; 0x80146d <_twiIsInitiated>
    51b6:	08 95       	ret

000051b8 <twiCreate>:
    51b8:	af 92       	push	r10
    51ba:	bf 92       	push	r11
    51bc:	cf 92       	push	r12
    51be:	df 92       	push	r13
    51c0:	ef 92       	push	r14
    51c2:	ff 92       	push	r15
    51c4:	0f 93       	push	r16
    51c6:	1f 93       	push	r17
    51c8:	cf 93       	push	r28
    51ca:	df 93       	push	r29
    51cc:	a8 2e       	mov	r10, r24
    51ce:	b6 2e       	mov	r11, r22
    51d0:	69 01       	movw	r12, r18
    51d2:	7a 01       	movw	r14, r20
    51d4:	84 e0       	ldi	r24, 0x04	; 4
    51d6:	90 e0       	ldi	r25, 0x00	; 0
    51d8:	e7 d3       	rcall	.+1998   	; 0x59a8 <malloc>
    51da:	ec 01       	movw	r28, r24
    51dc:	89 2b       	or	r24, r25
    51de:	61 f1       	breq	.+88     	; 0x5238 <twiCreate+0x80>
    51e0:	a8 82       	st	Y, r10
    51e2:	81 e0       	ldi	r24, 0x01	; 1
    51e4:	b8 12       	cpse	r11, r24
    51e6:	12 c0       	rjmp	.+36     	; 0x520c <twiCreate+0x54>
    51e8:	c7 01       	movw	r24, r14
    51ea:	b6 01       	movw	r22, r12
    51ec:	20 ea       	ldi	r18, 0xA0	; 160
    51ee:	36 e8       	ldi	r19, 0x86	; 134
    51f0:	41 e0       	ldi	r20, 0x01	; 1
    51f2:	50 e0       	ldi	r21, 0x00	; 0
    51f4:	8c d3       	rcall	.+1816   	; 0x590e <__udivmodsi4>
    51f6:	da 01       	movw	r26, r20
    51f8:	c9 01       	movw	r24, r18
    51fa:	40 97       	sbiw	r24, 0x10	; 16
    51fc:	a1 09       	sbc	r26, r1
    51fe:	b1 09       	sbc	r27, r1
    5200:	b6 95       	lsr	r27
    5202:	a7 95       	ror	r26
    5204:	97 95       	ror	r25
    5206:	87 95       	ror	r24
    5208:	89 83       	std	Y+1, r24	; 0x01
    520a:	11 c0       	rjmp	.+34     	; 0x522e <twiCreate+0x76>
    520c:	c7 01       	movw	r24, r14
    520e:	b6 01       	movw	r22, r12
    5210:	20 e8       	ldi	r18, 0x80	; 128
    5212:	3a e1       	ldi	r19, 0x1A	; 26
    5214:	46 e0       	ldi	r20, 0x06	; 6
    5216:	50 e0       	ldi	r21, 0x00	; 0
    5218:	7a d3       	rcall	.+1780   	; 0x590e <__udivmodsi4>
    521a:	da 01       	movw	r26, r20
    521c:	c9 01       	movw	r24, r18
    521e:	40 97       	sbiw	r24, 0x10	; 16
    5220:	a1 09       	sbc	r26, r1
    5222:	b1 09       	sbc	r27, r1
    5224:	b6 95       	lsr	r27
    5226:	a7 95       	ror	r26
    5228:	97 95       	ror	r25
    522a:	87 95       	ror	r24
    522c:	89 83       	std	Y+1, r24	; 0x01
    522e:	1b 83       	std	Y+3, r17	; 0x03
    5230:	0a 83       	std	Y+2, r16	; 0x02
    5232:	8c 2f       	mov	r24, r28
    5234:	9d 2f       	mov	r25, r29
    5236:	02 c0       	rjmp	.+4      	; 0x523c <twiCreate+0x84>
    5238:	80 e0       	ldi	r24, 0x00	; 0
    523a:	90 e0       	ldi	r25, 0x00	; 0
    523c:	df 91       	pop	r29
    523e:	cf 91       	pop	r28
    5240:	1f 91       	pop	r17
    5242:	0f 91       	pop	r16
    5244:	ff 90       	pop	r15
    5246:	ef 90       	pop	r14
    5248:	df 90       	pop	r13
    524a:	cf 90       	pop	r12
    524c:	bf 90       	pop	r11
    524e:	af 90       	pop	r10
    5250:	08 95       	ret

00005252 <twiIsBusy>:
    5252:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5256:	81 70       	andi	r24, 0x01	; 1
    5258:	08 95       	ret

0000525a <twiTransmit>:
    525a:	ff 92       	push	r15
    525c:	0f 93       	push	r16
    525e:	1f 93       	push	r17
    5260:	cf 93       	push	r28
    5262:	df 93       	push	r29
    5264:	00 97       	sbiw	r24, 0x00	; 0
    5266:	d1 f1       	breq	.+116    	; 0x52dc <twiTransmit+0x82>
    5268:	4a 30       	cpi	r20, 0x0A	; 10
    526a:	d0 f5       	brcc	.+116    	; 0x52e0 <twiTransmit+0x86>
    526c:	f4 2e       	mov	r15, r20
    526e:	8b 01       	movw	r16, r22
    5270:	ec 01       	movw	r28, r24
    5272:	ef df       	rcall	.-34     	; 0x5252 <twiIsBusy>
    5274:	81 11       	cpse	r24, r1
    5276:	36 c0       	rjmp	.+108    	; 0x52e4 <twiTransmit+0x8a>
    5278:	80 91 60 14 	lds	r24, 0x1460	; 0x801460 <_twiCurrentHandler>
    527c:	90 91 61 14 	lds	r25, 0x1461	; 0x801461 <_twiCurrentHandler+0x1>
    5280:	c8 17       	cp	r28, r24
    5282:	d9 07       	cpc	r29, r25
    5284:	41 f0       	breq	.+16     	; 0x5296 <twiTransmit+0x3c>
    5286:	87 df       	rcall	.-242    	; 0x5196 <_initTwiInterface>
    5288:	89 81       	ldd	r24, Y+1	; 0x01
    528a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    528e:	d0 93 61 14 	sts	0x1461, r29	; 0x801461 <_twiCurrentHandler+0x1>
    5292:	c0 93 60 14 	sts	0x1460, r28	; 0x801460 <_twiCurrentHandler>
    5296:	81 e0       	ldi	r24, 0x01	; 1
    5298:	8f 0d       	add	r24, r15
    529a:	80 93 62 14 	sts	0x1462, r24	; 0x801462 <_twiMessageLen>
    529e:	88 81       	ld	r24, Y
    52a0:	88 0f       	add	r24, r24
    52a2:	80 93 63 14 	sts	0x1463, r24	; 0x801463 <_twiMessageBuffer>
    52a6:	ff 20       	and	r15, r15
    52a8:	89 f0       	breq	.+34     	; 0x52cc <twiTransmit+0x72>
    52aa:	f8 01       	movw	r30, r16
    52ac:	a4 e6       	ldi	r26, 0x64	; 100
    52ae:	b4 e1       	ldi	r27, 0x14	; 20
    52b0:	4f ef       	ldi	r20, 0xFF	; 255
    52b2:	4f 0d       	add	r20, r15
    52b4:	64 2f       	mov	r22, r20
    52b6:	70 e0       	ldi	r23, 0x00	; 0
    52b8:	cb 01       	movw	r24, r22
    52ba:	01 96       	adiw	r24, 0x01	; 1
    52bc:	b8 01       	movw	r22, r16
    52be:	68 0f       	add	r22, r24
    52c0:	79 1f       	adc	r23, r25
    52c2:	81 91       	ld	r24, Z+
    52c4:	8d 93       	st	X+, r24
    52c6:	e6 17       	cp	r30, r22
    52c8:	f7 07       	cpc	r31, r23
    52ca:	d9 f7       	brne	.-10     	; 0x52c2 <twiTransmit+0x68>
    52cc:	88 ef       	ldi	r24, 0xF8	; 248
    52ce:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    52d2:	85 ea       	ldi	r24, 0xA5	; 165
    52d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    52d8:	84 e0       	ldi	r24, 0x04	; 4
    52da:	05 c0       	rjmp	.+10     	; 0x52e6 <twiTransmit+0x8c>
    52dc:	86 e0       	ldi	r24, 0x06	; 6
    52de:	03 c0       	rjmp	.+6      	; 0x52e6 <twiTransmit+0x8c>
    52e0:	87 e0       	ldi	r24, 0x07	; 7
    52e2:	01 c0       	rjmp	.+2      	; 0x52e6 <twiTransmit+0x8c>
    52e4:	82 e0       	ldi	r24, 0x02	; 2
    52e6:	df 91       	pop	r29
    52e8:	cf 91       	pop	r28
    52ea:	1f 91       	pop	r17
    52ec:	0f 91       	pop	r16
    52ee:	ff 90       	pop	r15
    52f0:	08 95       	ret

000052f2 <twiReceive>:
    52f2:	1f 93       	push	r17
    52f4:	cf 93       	push	r28
    52f6:	df 93       	push	r29
    52f8:	00 97       	sbiw	r24, 0x00	; 0
    52fa:	29 f1       	breq	.+74     	; 0x5346 <twiReceive+0x54>
    52fc:	6b 30       	cpi	r22, 0x0B	; 11
    52fe:	28 f5       	brcc	.+74     	; 0x534a <twiReceive+0x58>
    5300:	16 2f       	mov	r17, r22
    5302:	ec 01       	movw	r28, r24
    5304:	a6 df       	rcall	.-180    	; 0x5252 <twiIsBusy>
    5306:	81 11       	cpse	r24, r1
    5308:	22 c0       	rjmp	.+68     	; 0x534e <twiReceive+0x5c>
    530a:	80 91 60 14 	lds	r24, 0x1460	; 0x801460 <_twiCurrentHandler>
    530e:	90 91 61 14 	lds	r25, 0x1461	; 0x801461 <_twiCurrentHandler+0x1>
    5312:	c8 17       	cp	r28, r24
    5314:	d9 07       	cpc	r29, r25
    5316:	41 f0       	breq	.+16     	; 0x5328 <twiReceive+0x36>
    5318:	3e df       	rcall	.-388    	; 0x5196 <_initTwiInterface>
    531a:	89 81       	ldd	r24, Y+1	; 0x01
    531c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5320:	d0 93 61 14 	sts	0x1461, r29	; 0x801461 <_twiCurrentHandler+0x1>
    5324:	c0 93 60 14 	sts	0x1460, r28	; 0x801460 <_twiCurrentHandler>
    5328:	10 93 62 14 	sts	0x1462, r17	; 0x801462 <_twiMessageLen>
    532c:	88 81       	ld	r24, Y
    532e:	88 0f       	add	r24, r24
    5330:	81 60       	ori	r24, 0x01	; 1
    5332:	80 93 63 14 	sts	0x1463, r24	; 0x801463 <_twiMessageBuffer>
    5336:	88 ef       	ldi	r24, 0xF8	; 248
    5338:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    533c:	85 ea       	ldi	r24, 0xA5	; 165
    533e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5342:	85 e0       	ldi	r24, 0x05	; 5
    5344:	05 c0       	rjmp	.+10     	; 0x5350 <twiReceive+0x5e>
    5346:	86 e0       	ldi	r24, 0x06	; 6
    5348:	03 c0       	rjmp	.+6      	; 0x5350 <twiReceive+0x5e>
    534a:	87 e0       	ldi	r24, 0x07	; 7
    534c:	01 c0       	rjmp	.+2      	; 0x5350 <twiReceive+0x5e>
    534e:	82 e0       	ldi	r24, 0x02	; 2
    5350:	df 91       	pop	r29
    5352:	cf 91       	pop	r28
    5354:	1f 91       	pop	r17
    5356:	08 95       	ret

00005358 <__vector_39>:
    5358:	1f 92       	push	r1
    535a:	0f 92       	push	r0
    535c:	0f b6       	in	r0, 0x3f	; 63
    535e:	0f 92       	push	r0
    5360:	11 24       	eor	r1, r1
    5362:	0b b6       	in	r0, 0x3b	; 59
    5364:	0f 92       	push	r0
    5366:	2f 93       	push	r18
    5368:	3f 93       	push	r19
    536a:	4f 93       	push	r20
    536c:	5f 93       	push	r21
    536e:	6f 93       	push	r22
    5370:	7f 93       	push	r23
    5372:	8f 93       	push	r24
    5374:	9f 93       	push	r25
    5376:	af 93       	push	r26
    5378:	bf 93       	push	r27
    537a:	ef 93       	push	r30
    537c:	ff 93       	push	r31
    537e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5382:	8e 2f       	mov	r24, r30
    5384:	90 e0       	ldi	r25, 0x00	; 0
    5386:	fc 01       	movw	r30, r24
    5388:	38 97       	sbiw	r30, 0x08	; 8
    538a:	e1 35       	cpi	r30, 0x51	; 81
    538c:	f1 05       	cpc	r31, r1
    538e:	08 f0       	brcs	.+2      	; 0x5392 <__vector_39+0x3a>
    5390:	75 c0       	rjmp	.+234    	; 0x547c <__vector_39+0x124>
    5392:	88 27       	eor	r24, r24
    5394:	e4 58       	subi	r30, 0x84	; 132
    5396:	ff 4f       	sbci	r31, 0xFF	; 255
    5398:	8f 4f       	sbci	r24, 0xFF	; 255
    539a:	db c2       	rjmp	.+1462   	; 0x5952 <__tablejump2__>
    539c:	10 92 5f 14 	sts	0x145F, r1	; 0x80145f <_index.1885>
    53a0:	e0 91 5f 14 	lds	r30, 0x145F	; 0x80145f <_index.1885>
    53a4:	80 91 62 14 	lds	r24, 0x1462	; 0x801462 <_twiMessageLen>
    53a8:	e8 17       	cp	r30, r24
    53aa:	70 f4       	brcc	.+28     	; 0x53c8 <__vector_39+0x70>
    53ac:	81 e0       	ldi	r24, 0x01	; 1
    53ae:	8e 0f       	add	r24, r30
    53b0:	80 93 5f 14 	sts	0x145F, r24	; 0x80145f <_index.1885>
    53b4:	f0 e0       	ldi	r31, 0x00	; 0
    53b6:	ed 59       	subi	r30, 0x9D	; 157
    53b8:	fb 4e       	sbci	r31, 0xEB	; 235
    53ba:	80 81       	ld	r24, Z
    53bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    53c0:	85 e8       	ldi	r24, 0x85	; 133
    53c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    53c6:	72 c0       	rjmp	.+228    	; 0x54ac <__vector_39+0x154>
    53c8:	84 e9       	ldi	r24, 0x94	; 148
    53ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    53ce:	80 91 60 14 	lds	r24, 0x1460	; 0x801460 <_twiCurrentHandler>
    53d2:	90 91 61 14 	lds	r25, 0x1461	; 0x801461 <_twiCurrentHandler+0x1>
    53d6:	dc 01       	movw	r26, r24
    53d8:	12 96       	adiw	r26, 0x02	; 2
    53da:	ed 91       	ld	r30, X+
    53dc:	fc 91       	ld	r31, X
    53de:	13 97       	sbiw	r26, 0x03	; 3
    53e0:	30 97       	sbiw	r30, 0x00	; 0
    53e2:	09 f4       	brne	.+2      	; 0x53e6 <__vector_39+0x8e>
    53e4:	63 c0       	rjmp	.+198    	; 0x54ac <__vector_39+0x154>
    53e6:	20 e0       	ldi	r18, 0x00	; 0
    53e8:	40 e0       	ldi	r20, 0x00	; 0
    53ea:	50 e0       	ldi	r21, 0x00	; 0
    53ec:	64 e0       	ldi	r22, 0x04	; 4
    53ee:	19 95       	eicall
    53f0:	5d c0       	rjmp	.+186    	; 0x54ac <__vector_39+0x154>
    53f2:	e0 91 5f 14 	lds	r30, 0x145F	; 0x80145f <_index.1885>
    53f6:	81 e0       	ldi	r24, 0x01	; 1
    53f8:	8e 0f       	add	r24, r30
    53fa:	80 93 5f 14 	sts	0x145F, r24	; 0x80145f <_index.1885>
    53fe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5402:	f0 e0       	ldi	r31, 0x00	; 0
    5404:	ed 59       	subi	r30, 0x9D	; 157
    5406:	fb 4e       	sbci	r31, 0xEB	; 235
    5408:	80 83       	st	Z, r24
    540a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    540e:	80 34       	cpi	r24, 0x40	; 64
    5410:	11 f4       	brne	.+4      	; 0x5416 <__vector_39+0xbe>
    5412:	10 92 5f 14 	sts	0x145F, r1	; 0x80145f <_index.1885>
    5416:	20 91 5f 14 	lds	r18, 0x145F	; 0x80145f <_index.1885>
    541a:	30 e0       	ldi	r19, 0x00	; 0
    541c:	80 91 62 14 	lds	r24, 0x1462	; 0x801462 <_twiMessageLen>
    5420:	90 e0       	ldi	r25, 0x00	; 0
    5422:	01 97       	sbiw	r24, 0x01	; 1
    5424:	28 17       	cp	r18, r24
    5426:	39 07       	cpc	r19, r25
    5428:	24 f4       	brge	.+8      	; 0x5432 <__vector_39+0xda>
    542a:	85 ec       	ldi	r24, 0xC5	; 197
    542c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5430:	3d c0       	rjmp	.+122    	; 0x54ac <__vector_39+0x154>
    5432:	85 e8       	ldi	r24, 0x85	; 133
    5434:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5438:	39 c0       	rjmp	.+114    	; 0x54ac <__vector_39+0x154>
    543a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    543e:	e0 91 5f 14 	lds	r30, 0x145F	; 0x80145f <_index.1885>
    5442:	f0 e0       	ldi	r31, 0x00	; 0
    5444:	ed 59       	subi	r30, 0x9D	; 157
    5446:	fb 4e       	sbci	r31, 0xEB	; 235
    5448:	80 83       	st	Z, r24
    544a:	84 e9       	ldi	r24, 0x94	; 148
    544c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5450:	80 91 60 14 	lds	r24, 0x1460	; 0x801460 <_twiCurrentHandler>
    5454:	90 91 61 14 	lds	r25, 0x1461	; 0x801461 <_twiCurrentHandler+0x1>
    5458:	dc 01       	movw	r26, r24
    545a:	12 96       	adiw	r26, 0x02	; 2
    545c:	ed 91       	ld	r30, X+
    545e:	fc 91       	ld	r31, X
    5460:	13 97       	sbiw	r26, 0x03	; 3
    5462:	30 97       	sbiw	r30, 0x00	; 0
    5464:	19 f1       	breq	.+70     	; 0x54ac <__vector_39+0x154>
    5466:	20 91 62 14 	lds	r18, 0x1462	; 0x801462 <_twiMessageLen>
    546a:	43 e6       	ldi	r20, 0x63	; 99
    546c:	54 e1       	ldi	r21, 0x14	; 20
    546e:	65 e0       	ldi	r22, 0x05	; 5
    5470:	19 95       	eicall
    5472:	1c c0       	rjmp	.+56     	; 0x54ac <__vector_39+0x154>
    5474:	85 ea       	ldi	r24, 0xA5	; 165
    5476:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    547a:	18 c0       	rjmp	.+48     	; 0x54ac <__vector_39+0x154>
    547c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5480:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5484:	84 e0       	ldi	r24, 0x04	; 4
    5486:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    548a:	80 91 60 14 	lds	r24, 0x1460	; 0x801460 <_twiCurrentHandler>
    548e:	90 91 61 14 	lds	r25, 0x1461	; 0x801461 <_twiCurrentHandler+0x1>
    5492:	dc 01       	movw	r26, r24
    5494:	12 96       	adiw	r26, 0x02	; 2
    5496:	ed 91       	ld	r30, X+
    5498:	fc 91       	ld	r31, X
    549a:	13 97       	sbiw	r26, 0x03	; 3
    549c:	30 97       	sbiw	r30, 0x00	; 0
    549e:	31 f0       	breq	.+12     	; 0x54ac <__vector_39+0x154>
    54a0:	20 e0       	ldi	r18, 0x00	; 0
    54a2:	40 e0       	ldi	r20, 0x00	; 0
    54a4:	50 e0       	ldi	r21, 0x00	; 0
    54a6:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    54aa:	19 95       	eicall
    54ac:	ff 91       	pop	r31
    54ae:	ef 91       	pop	r30
    54b0:	bf 91       	pop	r27
    54b2:	af 91       	pop	r26
    54b4:	9f 91       	pop	r25
    54b6:	8f 91       	pop	r24
    54b8:	7f 91       	pop	r23
    54ba:	6f 91       	pop	r22
    54bc:	5f 91       	pop	r21
    54be:	4f 91       	pop	r20
    54c0:	3f 91       	pop	r19
    54c2:	2f 91       	pop	r18
    54c4:	0f 90       	pop	r0
    54c6:	0b be       	out	0x3b, r0	; 59
    54c8:	0f 90       	pop	r0
    54ca:	0f be       	out	0x3f, r0	; 63
    54cc:	0f 90       	pop	r0
    54ce:	1f 90       	pop	r1
    54d0:	18 95       	reti

000054d2 <fifo_init>:
    54d2:	fc 01       	movw	r30, r24
    54d4:	41 11       	cpse	r20, r1
    54d6:	01 c0       	rjmp	.+2      	; 0x54da <fifo_init+0x8>
    54d8:	88 d3       	rcall	.+1808   	; 0x5bea <abort>
    54da:	84 2f       	mov	r24, r20
    54dc:	90 e0       	ldi	r25, 0x00	; 0
    54de:	9c 01       	movw	r18, r24
    54e0:	21 50       	subi	r18, 0x01	; 1
    54e2:	31 09       	sbc	r19, r1
    54e4:	82 23       	and	r24, r18
    54e6:	93 23       	and	r25, r19
    54e8:	89 2b       	or	r24, r25
    54ea:	09 f0       	breq	.+2      	; 0x54ee <fifo_init+0x1c>
    54ec:	7e d3       	rcall	.+1788   	; 0x5bea <abort>
    54ee:	41 38       	cpi	r20, 0x81	; 129
    54f0:	08 f0       	brcs	.+2      	; 0x54f4 <fifo_init+0x22>
    54f2:	7b d3       	rcall	.+1782   	; 0x5bea <abort>
    54f4:	12 82       	std	Z+2, r1	; 0x02
    54f6:	13 82       	std	Z+3, r1	; 0x03
    54f8:	44 83       	std	Z+4, r20	; 0x04
    54fa:	44 0f       	add	r20, r20
    54fc:	41 50       	subi	r20, 0x01	; 1
    54fe:	45 83       	std	Z+5, r20	; 0x05
    5500:	71 83       	std	Z+1, r23	; 0x01
    5502:	60 83       	st	Z, r22
    5504:	80 e0       	ldi	r24, 0x00	; 0
    5506:	90 e0       	ldi	r25, 0x00	; 0
    5508:	08 95       	ret

0000550a <__subsf3>:
    550a:	50 58       	subi	r21, 0x80	; 128

0000550c <__addsf3>:
    550c:	bb 27       	eor	r27, r27
    550e:	aa 27       	eor	r26, r26
    5510:	0e d0       	rcall	.+28     	; 0x552e <__addsf3x>
    5512:	4d c1       	rjmp	.+666    	; 0x57ae <__fp_round>
    5514:	3e d1       	rcall	.+636    	; 0x5792 <__fp_pscA>
    5516:	30 f0       	brcs	.+12     	; 0x5524 <__addsf3+0x18>
    5518:	43 d1       	rcall	.+646    	; 0x57a0 <__fp_pscB>
    551a:	20 f0       	brcs	.+8      	; 0x5524 <__addsf3+0x18>
    551c:	31 f4       	brne	.+12     	; 0x552a <__addsf3+0x1e>
    551e:	9f 3f       	cpi	r25, 0xFF	; 255
    5520:	11 f4       	brne	.+4      	; 0x5526 <__addsf3+0x1a>
    5522:	1e f4       	brtc	.+6      	; 0x552a <__addsf3+0x1e>
    5524:	33 c1       	rjmp	.+614    	; 0x578c <__fp_nan>
    5526:	0e f4       	brtc	.+2      	; 0x552a <__addsf3+0x1e>
    5528:	e0 95       	com	r30
    552a:	e7 fb       	bst	r30, 7
    552c:	29 c1       	rjmp	.+594    	; 0x5780 <__fp_inf>

0000552e <__addsf3x>:
    552e:	e9 2f       	mov	r30, r25
    5530:	4f d1       	rcall	.+670    	; 0x57d0 <__fp_split3>
    5532:	80 f3       	brcs	.-32     	; 0x5514 <__addsf3+0x8>
    5534:	ba 17       	cp	r27, r26
    5536:	62 07       	cpc	r22, r18
    5538:	73 07       	cpc	r23, r19
    553a:	84 07       	cpc	r24, r20
    553c:	95 07       	cpc	r25, r21
    553e:	18 f0       	brcs	.+6      	; 0x5546 <__addsf3x+0x18>
    5540:	71 f4       	brne	.+28     	; 0x555e <__addsf3x+0x30>
    5542:	9e f5       	brtc	.+102    	; 0x55aa <__addsf3x+0x7c>
    5544:	67 c1       	rjmp	.+718    	; 0x5814 <__fp_zero>
    5546:	0e f4       	brtc	.+2      	; 0x554a <__addsf3x+0x1c>
    5548:	e0 95       	com	r30
    554a:	0b 2e       	mov	r0, r27
    554c:	ba 2f       	mov	r27, r26
    554e:	a0 2d       	mov	r26, r0
    5550:	0b 01       	movw	r0, r22
    5552:	b9 01       	movw	r22, r18
    5554:	90 01       	movw	r18, r0
    5556:	0c 01       	movw	r0, r24
    5558:	ca 01       	movw	r24, r20
    555a:	a0 01       	movw	r20, r0
    555c:	11 24       	eor	r1, r1
    555e:	ff 27       	eor	r31, r31
    5560:	59 1b       	sub	r21, r25
    5562:	99 f0       	breq	.+38     	; 0x558a <__addsf3x+0x5c>
    5564:	59 3f       	cpi	r21, 0xF9	; 249
    5566:	50 f4       	brcc	.+20     	; 0x557c <__addsf3x+0x4e>
    5568:	50 3e       	cpi	r21, 0xE0	; 224
    556a:	68 f1       	brcs	.+90     	; 0x55c6 <__addsf3x+0x98>
    556c:	1a 16       	cp	r1, r26
    556e:	f0 40       	sbci	r31, 0x00	; 0
    5570:	a2 2f       	mov	r26, r18
    5572:	23 2f       	mov	r18, r19
    5574:	34 2f       	mov	r19, r20
    5576:	44 27       	eor	r20, r20
    5578:	58 5f       	subi	r21, 0xF8	; 248
    557a:	f3 cf       	rjmp	.-26     	; 0x5562 <__addsf3x+0x34>
    557c:	46 95       	lsr	r20
    557e:	37 95       	ror	r19
    5580:	27 95       	ror	r18
    5582:	a7 95       	ror	r26
    5584:	f0 40       	sbci	r31, 0x00	; 0
    5586:	53 95       	inc	r21
    5588:	c9 f7       	brne	.-14     	; 0x557c <__addsf3x+0x4e>
    558a:	7e f4       	brtc	.+30     	; 0x55aa <__addsf3x+0x7c>
    558c:	1f 16       	cp	r1, r31
    558e:	ba 0b       	sbc	r27, r26
    5590:	62 0b       	sbc	r22, r18
    5592:	73 0b       	sbc	r23, r19
    5594:	84 0b       	sbc	r24, r20
    5596:	ba f0       	brmi	.+46     	; 0x55c6 <__addsf3x+0x98>
    5598:	91 50       	subi	r25, 0x01	; 1
    559a:	a1 f0       	breq	.+40     	; 0x55c4 <__addsf3x+0x96>
    559c:	ff 0f       	add	r31, r31
    559e:	bb 1f       	adc	r27, r27
    55a0:	66 1f       	adc	r22, r22
    55a2:	77 1f       	adc	r23, r23
    55a4:	88 1f       	adc	r24, r24
    55a6:	c2 f7       	brpl	.-16     	; 0x5598 <__addsf3x+0x6a>
    55a8:	0e c0       	rjmp	.+28     	; 0x55c6 <__addsf3x+0x98>
    55aa:	ba 0f       	add	r27, r26
    55ac:	62 1f       	adc	r22, r18
    55ae:	73 1f       	adc	r23, r19
    55b0:	84 1f       	adc	r24, r20
    55b2:	48 f4       	brcc	.+18     	; 0x55c6 <__addsf3x+0x98>
    55b4:	87 95       	ror	r24
    55b6:	77 95       	ror	r23
    55b8:	67 95       	ror	r22
    55ba:	b7 95       	ror	r27
    55bc:	f7 95       	ror	r31
    55be:	9e 3f       	cpi	r25, 0xFE	; 254
    55c0:	08 f0       	brcs	.+2      	; 0x55c4 <__addsf3x+0x96>
    55c2:	b3 cf       	rjmp	.-154    	; 0x552a <__addsf3+0x1e>
    55c4:	93 95       	inc	r25
    55c6:	88 0f       	add	r24, r24
    55c8:	08 f0       	brcs	.+2      	; 0x55cc <__addsf3x+0x9e>
    55ca:	99 27       	eor	r25, r25
    55cc:	ee 0f       	add	r30, r30
    55ce:	97 95       	ror	r25
    55d0:	87 95       	ror	r24
    55d2:	08 95       	ret

000055d4 <__divsf3>:
    55d4:	0c d0       	rcall	.+24     	; 0x55ee <__divsf3x>
    55d6:	eb c0       	rjmp	.+470    	; 0x57ae <__fp_round>
    55d8:	e3 d0       	rcall	.+454    	; 0x57a0 <__fp_pscB>
    55da:	40 f0       	brcs	.+16     	; 0x55ec <__divsf3+0x18>
    55dc:	da d0       	rcall	.+436    	; 0x5792 <__fp_pscA>
    55de:	30 f0       	brcs	.+12     	; 0x55ec <__divsf3+0x18>
    55e0:	21 f4       	brne	.+8      	; 0x55ea <__divsf3+0x16>
    55e2:	5f 3f       	cpi	r21, 0xFF	; 255
    55e4:	19 f0       	breq	.+6      	; 0x55ec <__divsf3+0x18>
    55e6:	cc c0       	rjmp	.+408    	; 0x5780 <__fp_inf>
    55e8:	51 11       	cpse	r21, r1
    55ea:	15 c1       	rjmp	.+554    	; 0x5816 <__fp_szero>
    55ec:	cf c0       	rjmp	.+414    	; 0x578c <__fp_nan>

000055ee <__divsf3x>:
    55ee:	f0 d0       	rcall	.+480    	; 0x57d0 <__fp_split3>
    55f0:	98 f3       	brcs	.-26     	; 0x55d8 <__divsf3+0x4>

000055f2 <__divsf3_pse>:
    55f2:	99 23       	and	r25, r25
    55f4:	c9 f3       	breq	.-14     	; 0x55e8 <__divsf3+0x14>
    55f6:	55 23       	and	r21, r21
    55f8:	b1 f3       	breq	.-20     	; 0x55e6 <__divsf3+0x12>
    55fa:	95 1b       	sub	r25, r21
    55fc:	55 0b       	sbc	r21, r21
    55fe:	bb 27       	eor	r27, r27
    5600:	aa 27       	eor	r26, r26
    5602:	62 17       	cp	r22, r18
    5604:	73 07       	cpc	r23, r19
    5606:	84 07       	cpc	r24, r20
    5608:	38 f0       	brcs	.+14     	; 0x5618 <__divsf3_pse+0x26>
    560a:	9f 5f       	subi	r25, 0xFF	; 255
    560c:	5f 4f       	sbci	r21, 0xFF	; 255
    560e:	22 0f       	add	r18, r18
    5610:	33 1f       	adc	r19, r19
    5612:	44 1f       	adc	r20, r20
    5614:	aa 1f       	adc	r26, r26
    5616:	a9 f3       	breq	.-22     	; 0x5602 <__divsf3_pse+0x10>
    5618:	33 d0       	rcall	.+102    	; 0x5680 <__divsf3_pse+0x8e>
    561a:	0e 2e       	mov	r0, r30
    561c:	3a f0       	brmi	.+14     	; 0x562c <__divsf3_pse+0x3a>
    561e:	e0 e8       	ldi	r30, 0x80	; 128
    5620:	30 d0       	rcall	.+96     	; 0x5682 <__divsf3_pse+0x90>
    5622:	91 50       	subi	r25, 0x01	; 1
    5624:	50 40       	sbci	r21, 0x00	; 0
    5626:	e6 95       	lsr	r30
    5628:	00 1c       	adc	r0, r0
    562a:	ca f7       	brpl	.-14     	; 0x561e <__divsf3_pse+0x2c>
    562c:	29 d0       	rcall	.+82     	; 0x5680 <__divsf3_pse+0x8e>
    562e:	fe 2f       	mov	r31, r30
    5630:	27 d0       	rcall	.+78     	; 0x5680 <__divsf3_pse+0x8e>
    5632:	66 0f       	add	r22, r22
    5634:	77 1f       	adc	r23, r23
    5636:	88 1f       	adc	r24, r24
    5638:	bb 1f       	adc	r27, r27
    563a:	26 17       	cp	r18, r22
    563c:	37 07       	cpc	r19, r23
    563e:	48 07       	cpc	r20, r24
    5640:	ab 07       	cpc	r26, r27
    5642:	b0 e8       	ldi	r27, 0x80	; 128
    5644:	09 f0       	breq	.+2      	; 0x5648 <__divsf3_pse+0x56>
    5646:	bb 0b       	sbc	r27, r27
    5648:	80 2d       	mov	r24, r0
    564a:	bf 01       	movw	r22, r30
    564c:	ff 27       	eor	r31, r31
    564e:	93 58       	subi	r25, 0x83	; 131
    5650:	5f 4f       	sbci	r21, 0xFF	; 255
    5652:	2a f0       	brmi	.+10     	; 0x565e <__divsf3_pse+0x6c>
    5654:	9e 3f       	cpi	r25, 0xFE	; 254
    5656:	51 05       	cpc	r21, r1
    5658:	68 f0       	brcs	.+26     	; 0x5674 <__divsf3_pse+0x82>
    565a:	92 c0       	rjmp	.+292    	; 0x5780 <__fp_inf>
    565c:	dc c0       	rjmp	.+440    	; 0x5816 <__fp_szero>
    565e:	5f 3f       	cpi	r21, 0xFF	; 255
    5660:	ec f3       	brlt	.-6      	; 0x565c <__divsf3_pse+0x6a>
    5662:	98 3e       	cpi	r25, 0xE8	; 232
    5664:	dc f3       	brlt	.-10     	; 0x565c <__divsf3_pse+0x6a>
    5666:	86 95       	lsr	r24
    5668:	77 95       	ror	r23
    566a:	67 95       	ror	r22
    566c:	b7 95       	ror	r27
    566e:	f7 95       	ror	r31
    5670:	9f 5f       	subi	r25, 0xFF	; 255
    5672:	c9 f7       	brne	.-14     	; 0x5666 <__divsf3_pse+0x74>
    5674:	88 0f       	add	r24, r24
    5676:	91 1d       	adc	r25, r1
    5678:	96 95       	lsr	r25
    567a:	87 95       	ror	r24
    567c:	97 f9       	bld	r25, 7
    567e:	08 95       	ret
    5680:	e1 e0       	ldi	r30, 0x01	; 1
    5682:	66 0f       	add	r22, r22
    5684:	77 1f       	adc	r23, r23
    5686:	88 1f       	adc	r24, r24
    5688:	bb 1f       	adc	r27, r27
    568a:	62 17       	cp	r22, r18
    568c:	73 07       	cpc	r23, r19
    568e:	84 07       	cpc	r24, r20
    5690:	ba 07       	cpc	r27, r26
    5692:	20 f0       	brcs	.+8      	; 0x569c <__divsf3_pse+0xaa>
    5694:	62 1b       	sub	r22, r18
    5696:	73 0b       	sbc	r23, r19
    5698:	84 0b       	sbc	r24, r20
    569a:	ba 0b       	sbc	r27, r26
    569c:	ee 1f       	adc	r30, r30
    569e:	88 f7       	brcc	.-30     	; 0x5682 <__divsf3_pse+0x90>
    56a0:	e0 95       	com	r30
    56a2:	08 95       	ret

000056a4 <__fixsfsi>:
    56a4:	04 d0       	rcall	.+8      	; 0x56ae <__fixunssfsi>
    56a6:	68 94       	set
    56a8:	b1 11       	cpse	r27, r1
    56aa:	b5 c0       	rjmp	.+362    	; 0x5816 <__fp_szero>
    56ac:	08 95       	ret

000056ae <__fixunssfsi>:
    56ae:	98 d0       	rcall	.+304    	; 0x57e0 <__fp_splitA>
    56b0:	88 f0       	brcs	.+34     	; 0x56d4 <__fixunssfsi+0x26>
    56b2:	9f 57       	subi	r25, 0x7F	; 127
    56b4:	90 f0       	brcs	.+36     	; 0x56da <__fixunssfsi+0x2c>
    56b6:	b9 2f       	mov	r27, r25
    56b8:	99 27       	eor	r25, r25
    56ba:	b7 51       	subi	r27, 0x17	; 23
    56bc:	a0 f0       	brcs	.+40     	; 0x56e6 <__fixunssfsi+0x38>
    56be:	d1 f0       	breq	.+52     	; 0x56f4 <__fixunssfsi+0x46>
    56c0:	66 0f       	add	r22, r22
    56c2:	77 1f       	adc	r23, r23
    56c4:	88 1f       	adc	r24, r24
    56c6:	99 1f       	adc	r25, r25
    56c8:	1a f0       	brmi	.+6      	; 0x56d0 <__fixunssfsi+0x22>
    56ca:	ba 95       	dec	r27
    56cc:	c9 f7       	brne	.-14     	; 0x56c0 <__fixunssfsi+0x12>
    56ce:	12 c0       	rjmp	.+36     	; 0x56f4 <__fixunssfsi+0x46>
    56d0:	b1 30       	cpi	r27, 0x01	; 1
    56d2:	81 f0       	breq	.+32     	; 0x56f4 <__fixunssfsi+0x46>
    56d4:	9f d0       	rcall	.+318    	; 0x5814 <__fp_zero>
    56d6:	b1 e0       	ldi	r27, 0x01	; 1
    56d8:	08 95       	ret
    56da:	9c c0       	rjmp	.+312    	; 0x5814 <__fp_zero>
    56dc:	67 2f       	mov	r22, r23
    56de:	78 2f       	mov	r23, r24
    56e0:	88 27       	eor	r24, r24
    56e2:	b8 5f       	subi	r27, 0xF8	; 248
    56e4:	39 f0       	breq	.+14     	; 0x56f4 <__fixunssfsi+0x46>
    56e6:	b9 3f       	cpi	r27, 0xF9	; 249
    56e8:	cc f3       	brlt	.-14     	; 0x56dc <__fixunssfsi+0x2e>
    56ea:	86 95       	lsr	r24
    56ec:	77 95       	ror	r23
    56ee:	67 95       	ror	r22
    56f0:	b3 95       	inc	r27
    56f2:	d9 f7       	brne	.-10     	; 0x56ea <__fixunssfsi+0x3c>
    56f4:	3e f4       	brtc	.+14     	; 0x5704 <__fixunssfsi+0x56>
    56f6:	90 95       	com	r25
    56f8:	80 95       	com	r24
    56fa:	70 95       	com	r23
    56fc:	61 95       	neg	r22
    56fe:	7f 4f       	sbci	r23, 0xFF	; 255
    5700:	8f 4f       	sbci	r24, 0xFF	; 255
    5702:	9f 4f       	sbci	r25, 0xFF	; 255
    5704:	08 95       	ret

00005706 <__floatunsisf>:
    5706:	e8 94       	clt
    5708:	09 c0       	rjmp	.+18     	; 0x571c <__floatsisf+0x12>

0000570a <__floatsisf>:
    570a:	97 fb       	bst	r25, 7
    570c:	3e f4       	brtc	.+14     	; 0x571c <__floatsisf+0x12>
    570e:	90 95       	com	r25
    5710:	80 95       	com	r24
    5712:	70 95       	com	r23
    5714:	61 95       	neg	r22
    5716:	7f 4f       	sbci	r23, 0xFF	; 255
    5718:	8f 4f       	sbci	r24, 0xFF	; 255
    571a:	9f 4f       	sbci	r25, 0xFF	; 255
    571c:	99 23       	and	r25, r25
    571e:	a9 f0       	breq	.+42     	; 0x574a <__floatsisf+0x40>
    5720:	f9 2f       	mov	r31, r25
    5722:	96 e9       	ldi	r25, 0x96	; 150
    5724:	bb 27       	eor	r27, r27
    5726:	93 95       	inc	r25
    5728:	f6 95       	lsr	r31
    572a:	87 95       	ror	r24
    572c:	77 95       	ror	r23
    572e:	67 95       	ror	r22
    5730:	b7 95       	ror	r27
    5732:	f1 11       	cpse	r31, r1
    5734:	f8 cf       	rjmp	.-16     	; 0x5726 <__floatsisf+0x1c>
    5736:	fa f4       	brpl	.+62     	; 0x5776 <__floatsisf+0x6c>
    5738:	bb 0f       	add	r27, r27
    573a:	11 f4       	brne	.+4      	; 0x5740 <__floatsisf+0x36>
    573c:	60 ff       	sbrs	r22, 0
    573e:	1b c0       	rjmp	.+54     	; 0x5776 <__floatsisf+0x6c>
    5740:	6f 5f       	subi	r22, 0xFF	; 255
    5742:	7f 4f       	sbci	r23, 0xFF	; 255
    5744:	8f 4f       	sbci	r24, 0xFF	; 255
    5746:	9f 4f       	sbci	r25, 0xFF	; 255
    5748:	16 c0       	rjmp	.+44     	; 0x5776 <__floatsisf+0x6c>
    574a:	88 23       	and	r24, r24
    574c:	11 f0       	breq	.+4      	; 0x5752 <__floatsisf+0x48>
    574e:	96 e9       	ldi	r25, 0x96	; 150
    5750:	11 c0       	rjmp	.+34     	; 0x5774 <__floatsisf+0x6a>
    5752:	77 23       	and	r23, r23
    5754:	21 f0       	breq	.+8      	; 0x575e <__floatsisf+0x54>
    5756:	9e e8       	ldi	r25, 0x8E	; 142
    5758:	87 2f       	mov	r24, r23
    575a:	76 2f       	mov	r23, r22
    575c:	05 c0       	rjmp	.+10     	; 0x5768 <__floatsisf+0x5e>
    575e:	66 23       	and	r22, r22
    5760:	71 f0       	breq	.+28     	; 0x577e <__floatsisf+0x74>
    5762:	96 e8       	ldi	r25, 0x86	; 134
    5764:	86 2f       	mov	r24, r22
    5766:	70 e0       	ldi	r23, 0x00	; 0
    5768:	60 e0       	ldi	r22, 0x00	; 0
    576a:	2a f0       	brmi	.+10     	; 0x5776 <__floatsisf+0x6c>
    576c:	9a 95       	dec	r25
    576e:	66 0f       	add	r22, r22
    5770:	77 1f       	adc	r23, r23
    5772:	88 1f       	adc	r24, r24
    5774:	da f7       	brpl	.-10     	; 0x576c <__floatsisf+0x62>
    5776:	88 0f       	add	r24, r24
    5778:	96 95       	lsr	r25
    577a:	87 95       	ror	r24
    577c:	97 f9       	bld	r25, 7
    577e:	08 95       	ret

00005780 <__fp_inf>:
    5780:	97 f9       	bld	r25, 7
    5782:	9f 67       	ori	r25, 0x7F	; 127
    5784:	80 e8       	ldi	r24, 0x80	; 128
    5786:	70 e0       	ldi	r23, 0x00	; 0
    5788:	60 e0       	ldi	r22, 0x00	; 0
    578a:	08 95       	ret

0000578c <__fp_nan>:
    578c:	9f ef       	ldi	r25, 0xFF	; 255
    578e:	80 ec       	ldi	r24, 0xC0	; 192
    5790:	08 95       	ret

00005792 <__fp_pscA>:
    5792:	00 24       	eor	r0, r0
    5794:	0a 94       	dec	r0
    5796:	16 16       	cp	r1, r22
    5798:	17 06       	cpc	r1, r23
    579a:	18 06       	cpc	r1, r24
    579c:	09 06       	cpc	r0, r25
    579e:	08 95       	ret

000057a0 <__fp_pscB>:
    57a0:	00 24       	eor	r0, r0
    57a2:	0a 94       	dec	r0
    57a4:	12 16       	cp	r1, r18
    57a6:	13 06       	cpc	r1, r19
    57a8:	14 06       	cpc	r1, r20
    57aa:	05 06       	cpc	r0, r21
    57ac:	08 95       	ret

000057ae <__fp_round>:
    57ae:	09 2e       	mov	r0, r25
    57b0:	03 94       	inc	r0
    57b2:	00 0c       	add	r0, r0
    57b4:	11 f4       	brne	.+4      	; 0x57ba <__fp_round+0xc>
    57b6:	88 23       	and	r24, r24
    57b8:	52 f0       	brmi	.+20     	; 0x57ce <__fp_round+0x20>
    57ba:	bb 0f       	add	r27, r27
    57bc:	40 f4       	brcc	.+16     	; 0x57ce <__fp_round+0x20>
    57be:	bf 2b       	or	r27, r31
    57c0:	11 f4       	brne	.+4      	; 0x57c6 <__fp_round+0x18>
    57c2:	60 ff       	sbrs	r22, 0
    57c4:	04 c0       	rjmp	.+8      	; 0x57ce <__fp_round+0x20>
    57c6:	6f 5f       	subi	r22, 0xFF	; 255
    57c8:	7f 4f       	sbci	r23, 0xFF	; 255
    57ca:	8f 4f       	sbci	r24, 0xFF	; 255
    57cc:	9f 4f       	sbci	r25, 0xFF	; 255
    57ce:	08 95       	ret

000057d0 <__fp_split3>:
    57d0:	57 fd       	sbrc	r21, 7
    57d2:	90 58       	subi	r25, 0x80	; 128
    57d4:	44 0f       	add	r20, r20
    57d6:	55 1f       	adc	r21, r21
    57d8:	59 f0       	breq	.+22     	; 0x57f0 <__fp_splitA+0x10>
    57da:	5f 3f       	cpi	r21, 0xFF	; 255
    57dc:	71 f0       	breq	.+28     	; 0x57fa <__fp_splitA+0x1a>
    57de:	47 95       	ror	r20

000057e0 <__fp_splitA>:
    57e0:	88 0f       	add	r24, r24
    57e2:	97 fb       	bst	r25, 7
    57e4:	99 1f       	adc	r25, r25
    57e6:	61 f0       	breq	.+24     	; 0x5800 <__fp_splitA+0x20>
    57e8:	9f 3f       	cpi	r25, 0xFF	; 255
    57ea:	79 f0       	breq	.+30     	; 0x580a <__fp_splitA+0x2a>
    57ec:	87 95       	ror	r24
    57ee:	08 95       	ret
    57f0:	12 16       	cp	r1, r18
    57f2:	13 06       	cpc	r1, r19
    57f4:	14 06       	cpc	r1, r20
    57f6:	55 1f       	adc	r21, r21
    57f8:	f2 cf       	rjmp	.-28     	; 0x57de <__fp_split3+0xe>
    57fa:	46 95       	lsr	r20
    57fc:	f1 df       	rcall	.-30     	; 0x57e0 <__fp_splitA>
    57fe:	08 c0       	rjmp	.+16     	; 0x5810 <__fp_splitA+0x30>
    5800:	16 16       	cp	r1, r22
    5802:	17 06       	cpc	r1, r23
    5804:	18 06       	cpc	r1, r24
    5806:	99 1f       	adc	r25, r25
    5808:	f1 cf       	rjmp	.-30     	; 0x57ec <__fp_splitA+0xc>
    580a:	86 95       	lsr	r24
    580c:	71 05       	cpc	r23, r1
    580e:	61 05       	cpc	r22, r1
    5810:	08 94       	sec
    5812:	08 95       	ret

00005814 <__fp_zero>:
    5814:	e8 94       	clt

00005816 <__fp_szero>:
    5816:	bb 27       	eor	r27, r27
    5818:	66 27       	eor	r22, r22
    581a:	77 27       	eor	r23, r23
    581c:	cb 01       	movw	r24, r22
    581e:	97 f9       	bld	r25, 7
    5820:	08 95       	ret

00005822 <__mulsf3>:
    5822:	0b d0       	rcall	.+22     	; 0x583a <__mulsf3x>
    5824:	c4 cf       	rjmp	.-120    	; 0x57ae <__fp_round>
    5826:	b5 df       	rcall	.-150    	; 0x5792 <__fp_pscA>
    5828:	28 f0       	brcs	.+10     	; 0x5834 <__mulsf3+0x12>
    582a:	ba df       	rcall	.-140    	; 0x57a0 <__fp_pscB>
    582c:	18 f0       	brcs	.+6      	; 0x5834 <__mulsf3+0x12>
    582e:	95 23       	and	r25, r21
    5830:	09 f0       	breq	.+2      	; 0x5834 <__mulsf3+0x12>
    5832:	a6 cf       	rjmp	.-180    	; 0x5780 <__fp_inf>
    5834:	ab cf       	rjmp	.-170    	; 0x578c <__fp_nan>
    5836:	11 24       	eor	r1, r1
    5838:	ee cf       	rjmp	.-36     	; 0x5816 <__fp_szero>

0000583a <__mulsf3x>:
    583a:	ca df       	rcall	.-108    	; 0x57d0 <__fp_split3>
    583c:	a0 f3       	brcs	.-24     	; 0x5826 <__mulsf3+0x4>

0000583e <__mulsf3_pse>:
    583e:	95 9f       	mul	r25, r21
    5840:	d1 f3       	breq	.-12     	; 0x5836 <__mulsf3+0x14>
    5842:	95 0f       	add	r25, r21
    5844:	50 e0       	ldi	r21, 0x00	; 0
    5846:	55 1f       	adc	r21, r21
    5848:	62 9f       	mul	r22, r18
    584a:	f0 01       	movw	r30, r0
    584c:	72 9f       	mul	r23, r18
    584e:	bb 27       	eor	r27, r27
    5850:	f0 0d       	add	r31, r0
    5852:	b1 1d       	adc	r27, r1
    5854:	63 9f       	mul	r22, r19
    5856:	aa 27       	eor	r26, r26
    5858:	f0 0d       	add	r31, r0
    585a:	b1 1d       	adc	r27, r1
    585c:	aa 1f       	adc	r26, r26
    585e:	64 9f       	mul	r22, r20
    5860:	66 27       	eor	r22, r22
    5862:	b0 0d       	add	r27, r0
    5864:	a1 1d       	adc	r26, r1
    5866:	66 1f       	adc	r22, r22
    5868:	82 9f       	mul	r24, r18
    586a:	22 27       	eor	r18, r18
    586c:	b0 0d       	add	r27, r0
    586e:	a1 1d       	adc	r26, r1
    5870:	62 1f       	adc	r22, r18
    5872:	73 9f       	mul	r23, r19
    5874:	b0 0d       	add	r27, r0
    5876:	a1 1d       	adc	r26, r1
    5878:	62 1f       	adc	r22, r18
    587a:	83 9f       	mul	r24, r19
    587c:	a0 0d       	add	r26, r0
    587e:	61 1d       	adc	r22, r1
    5880:	22 1f       	adc	r18, r18
    5882:	74 9f       	mul	r23, r20
    5884:	33 27       	eor	r19, r19
    5886:	a0 0d       	add	r26, r0
    5888:	61 1d       	adc	r22, r1
    588a:	23 1f       	adc	r18, r19
    588c:	84 9f       	mul	r24, r20
    588e:	60 0d       	add	r22, r0
    5890:	21 1d       	adc	r18, r1
    5892:	82 2f       	mov	r24, r18
    5894:	76 2f       	mov	r23, r22
    5896:	6a 2f       	mov	r22, r26
    5898:	11 24       	eor	r1, r1
    589a:	9f 57       	subi	r25, 0x7F	; 127
    589c:	50 40       	sbci	r21, 0x00	; 0
    589e:	8a f0       	brmi	.+34     	; 0x58c2 <__mulsf3_pse+0x84>
    58a0:	e1 f0       	breq	.+56     	; 0x58da <__mulsf3_pse+0x9c>
    58a2:	88 23       	and	r24, r24
    58a4:	4a f0       	brmi	.+18     	; 0x58b8 <__mulsf3_pse+0x7a>
    58a6:	ee 0f       	add	r30, r30
    58a8:	ff 1f       	adc	r31, r31
    58aa:	bb 1f       	adc	r27, r27
    58ac:	66 1f       	adc	r22, r22
    58ae:	77 1f       	adc	r23, r23
    58b0:	88 1f       	adc	r24, r24
    58b2:	91 50       	subi	r25, 0x01	; 1
    58b4:	50 40       	sbci	r21, 0x00	; 0
    58b6:	a9 f7       	brne	.-22     	; 0x58a2 <__mulsf3_pse+0x64>
    58b8:	9e 3f       	cpi	r25, 0xFE	; 254
    58ba:	51 05       	cpc	r21, r1
    58bc:	70 f0       	brcs	.+28     	; 0x58da <__mulsf3_pse+0x9c>
    58be:	60 cf       	rjmp	.-320    	; 0x5780 <__fp_inf>
    58c0:	aa cf       	rjmp	.-172    	; 0x5816 <__fp_szero>
    58c2:	5f 3f       	cpi	r21, 0xFF	; 255
    58c4:	ec f3       	brlt	.-6      	; 0x58c0 <__mulsf3_pse+0x82>
    58c6:	98 3e       	cpi	r25, 0xE8	; 232
    58c8:	dc f3       	brlt	.-10     	; 0x58c0 <__mulsf3_pse+0x82>
    58ca:	86 95       	lsr	r24
    58cc:	77 95       	ror	r23
    58ce:	67 95       	ror	r22
    58d0:	b7 95       	ror	r27
    58d2:	f7 95       	ror	r31
    58d4:	e7 95       	ror	r30
    58d6:	9f 5f       	subi	r25, 0xFF	; 255
    58d8:	c1 f7       	brne	.-16     	; 0x58ca <__mulsf3_pse+0x8c>
    58da:	fe 2b       	or	r31, r30
    58dc:	88 0f       	add	r24, r24
    58de:	91 1d       	adc	r25, r1
    58e0:	96 95       	lsr	r25
    58e2:	87 95       	ror	r24
    58e4:	97 f9       	bld	r25, 7
    58e6:	08 95       	ret

000058e8 <__divmodhi4>:
    58e8:	97 fb       	bst	r25, 7
    58ea:	07 2e       	mov	r0, r23
    58ec:	16 f4       	brtc	.+4      	; 0x58f2 <__divmodhi4+0xa>
    58ee:	00 94       	com	r0
    58f0:	06 d0       	rcall	.+12     	; 0x58fe <__divmodhi4_neg1>
    58f2:	77 fd       	sbrc	r23, 7
    58f4:	08 d0       	rcall	.+16     	; 0x5906 <__divmodhi4_neg2>
    58f6:	44 d0       	rcall	.+136    	; 0x5980 <__udivmodhi4>
    58f8:	07 fc       	sbrc	r0, 7
    58fa:	05 d0       	rcall	.+10     	; 0x5906 <__divmodhi4_neg2>
    58fc:	3e f4       	brtc	.+14     	; 0x590c <__divmodhi4_exit>

000058fe <__divmodhi4_neg1>:
    58fe:	90 95       	com	r25
    5900:	81 95       	neg	r24
    5902:	9f 4f       	sbci	r25, 0xFF	; 255
    5904:	08 95       	ret

00005906 <__divmodhi4_neg2>:
    5906:	70 95       	com	r23
    5908:	61 95       	neg	r22
    590a:	7f 4f       	sbci	r23, 0xFF	; 255

0000590c <__divmodhi4_exit>:
    590c:	08 95       	ret

0000590e <__udivmodsi4>:
    590e:	a1 e2       	ldi	r26, 0x21	; 33
    5910:	1a 2e       	mov	r1, r26
    5912:	aa 1b       	sub	r26, r26
    5914:	bb 1b       	sub	r27, r27
    5916:	fd 01       	movw	r30, r26
    5918:	0d c0       	rjmp	.+26     	; 0x5934 <__udivmodsi4_ep>

0000591a <__udivmodsi4_loop>:
    591a:	aa 1f       	adc	r26, r26
    591c:	bb 1f       	adc	r27, r27
    591e:	ee 1f       	adc	r30, r30
    5920:	ff 1f       	adc	r31, r31
    5922:	a2 17       	cp	r26, r18
    5924:	b3 07       	cpc	r27, r19
    5926:	e4 07       	cpc	r30, r20
    5928:	f5 07       	cpc	r31, r21
    592a:	20 f0       	brcs	.+8      	; 0x5934 <__udivmodsi4_ep>
    592c:	a2 1b       	sub	r26, r18
    592e:	b3 0b       	sbc	r27, r19
    5930:	e4 0b       	sbc	r30, r20
    5932:	f5 0b       	sbc	r31, r21

00005934 <__udivmodsi4_ep>:
    5934:	66 1f       	adc	r22, r22
    5936:	77 1f       	adc	r23, r23
    5938:	88 1f       	adc	r24, r24
    593a:	99 1f       	adc	r25, r25
    593c:	1a 94       	dec	r1
    593e:	69 f7       	brne	.-38     	; 0x591a <__udivmodsi4_loop>
    5940:	60 95       	com	r22
    5942:	70 95       	com	r23
    5944:	80 95       	com	r24
    5946:	90 95       	com	r25
    5948:	9b 01       	movw	r18, r22
    594a:	ac 01       	movw	r20, r24
    594c:	bd 01       	movw	r22, r26
    594e:	cf 01       	movw	r24, r30
    5950:	08 95       	ret

00005952 <__tablejump2__>:
    5952:	ee 0f       	add	r30, r30
    5954:	ff 1f       	adc	r31, r31
    5956:	88 1f       	adc	r24, r24
    5958:	8b bf       	out	0x3b, r24	; 59
    595a:	07 90       	elpm	r0, Z+
    595c:	f6 91       	elpm	r31, Z
    595e:	e0 2d       	mov	r30, r0
    5960:	19 94       	eijmp

00005962 <__umulhisi3>:
    5962:	a2 9f       	mul	r26, r18
    5964:	b0 01       	movw	r22, r0
    5966:	b3 9f       	mul	r27, r19
    5968:	c0 01       	movw	r24, r0
    596a:	a3 9f       	mul	r26, r19
    596c:	70 0d       	add	r23, r0
    596e:	81 1d       	adc	r24, r1
    5970:	11 24       	eor	r1, r1
    5972:	91 1d       	adc	r25, r1
    5974:	b2 9f       	mul	r27, r18
    5976:	70 0d       	add	r23, r0
    5978:	81 1d       	adc	r24, r1
    597a:	11 24       	eor	r1, r1
    597c:	91 1d       	adc	r25, r1
    597e:	08 95       	ret

00005980 <__udivmodhi4>:
    5980:	aa 1b       	sub	r26, r26
    5982:	bb 1b       	sub	r27, r27
    5984:	51 e1       	ldi	r21, 0x11	; 17
    5986:	07 c0       	rjmp	.+14     	; 0x5996 <__udivmodhi4_ep>

00005988 <__udivmodhi4_loop>:
    5988:	aa 1f       	adc	r26, r26
    598a:	bb 1f       	adc	r27, r27
    598c:	a6 17       	cp	r26, r22
    598e:	b7 07       	cpc	r27, r23
    5990:	10 f0       	brcs	.+4      	; 0x5996 <__udivmodhi4_ep>
    5992:	a6 1b       	sub	r26, r22
    5994:	b7 0b       	sbc	r27, r23

00005996 <__udivmodhi4_ep>:
    5996:	88 1f       	adc	r24, r24
    5998:	99 1f       	adc	r25, r25
    599a:	5a 95       	dec	r21
    599c:	a9 f7       	brne	.-22     	; 0x5988 <__udivmodhi4_loop>
    599e:	80 95       	com	r24
    59a0:	90 95       	com	r25
    59a2:	bc 01       	movw	r22, r24
    59a4:	cd 01       	movw	r24, r26
    59a6:	08 95       	ret

000059a8 <malloc>:
    59a8:	0f 93       	push	r16
    59aa:	1f 93       	push	r17
    59ac:	cf 93       	push	r28
    59ae:	df 93       	push	r29
    59b0:	82 30       	cpi	r24, 0x02	; 2
    59b2:	91 05       	cpc	r25, r1
    59b4:	10 f4       	brcc	.+4      	; 0x59ba <malloc+0x12>
    59b6:	82 e0       	ldi	r24, 0x02	; 2
    59b8:	90 e0       	ldi	r25, 0x00	; 0
    59ba:	e0 91 78 14 	lds	r30, 0x1478	; 0x801478 <__flp>
    59be:	f0 91 79 14 	lds	r31, 0x1479	; 0x801479 <__flp+0x1>
    59c2:	20 e0       	ldi	r18, 0x00	; 0
    59c4:	30 e0       	ldi	r19, 0x00	; 0
    59c6:	a0 e0       	ldi	r26, 0x00	; 0
    59c8:	b0 e0       	ldi	r27, 0x00	; 0
    59ca:	30 97       	sbiw	r30, 0x00	; 0
    59cc:	19 f1       	breq	.+70     	; 0x5a14 <malloc+0x6c>
    59ce:	40 81       	ld	r20, Z
    59d0:	51 81       	ldd	r21, Z+1	; 0x01
    59d2:	02 81       	ldd	r16, Z+2	; 0x02
    59d4:	13 81       	ldd	r17, Z+3	; 0x03
    59d6:	48 17       	cp	r20, r24
    59d8:	59 07       	cpc	r21, r25
    59da:	c8 f0       	brcs	.+50     	; 0x5a0e <malloc+0x66>
    59dc:	84 17       	cp	r24, r20
    59de:	95 07       	cpc	r25, r21
    59e0:	69 f4       	brne	.+26     	; 0x59fc <malloc+0x54>
    59e2:	10 97       	sbiw	r26, 0x00	; 0
    59e4:	31 f0       	breq	.+12     	; 0x59f2 <malloc+0x4a>
    59e6:	12 96       	adiw	r26, 0x02	; 2
    59e8:	0c 93       	st	X, r16
    59ea:	12 97       	sbiw	r26, 0x02	; 2
    59ec:	13 96       	adiw	r26, 0x03	; 3
    59ee:	1c 93       	st	X, r17
    59f0:	27 c0       	rjmp	.+78     	; 0x5a40 <malloc+0x98>
    59f2:	00 93 78 14 	sts	0x1478, r16	; 0x801478 <__flp>
    59f6:	10 93 79 14 	sts	0x1479, r17	; 0x801479 <__flp+0x1>
    59fa:	22 c0       	rjmp	.+68     	; 0x5a40 <malloc+0x98>
    59fc:	21 15       	cp	r18, r1
    59fe:	31 05       	cpc	r19, r1
    5a00:	19 f0       	breq	.+6      	; 0x5a08 <malloc+0x60>
    5a02:	42 17       	cp	r20, r18
    5a04:	53 07       	cpc	r21, r19
    5a06:	18 f4       	brcc	.+6      	; 0x5a0e <malloc+0x66>
    5a08:	9a 01       	movw	r18, r20
    5a0a:	bd 01       	movw	r22, r26
    5a0c:	ef 01       	movw	r28, r30
    5a0e:	df 01       	movw	r26, r30
    5a10:	f8 01       	movw	r30, r16
    5a12:	db cf       	rjmp	.-74     	; 0x59ca <malloc+0x22>
    5a14:	21 15       	cp	r18, r1
    5a16:	31 05       	cpc	r19, r1
    5a18:	f9 f0       	breq	.+62     	; 0x5a58 <malloc+0xb0>
    5a1a:	28 1b       	sub	r18, r24
    5a1c:	39 0b       	sbc	r19, r25
    5a1e:	24 30       	cpi	r18, 0x04	; 4
    5a20:	31 05       	cpc	r19, r1
    5a22:	80 f4       	brcc	.+32     	; 0x5a44 <malloc+0x9c>
    5a24:	8a 81       	ldd	r24, Y+2	; 0x02
    5a26:	9b 81       	ldd	r25, Y+3	; 0x03
    5a28:	61 15       	cp	r22, r1
    5a2a:	71 05       	cpc	r23, r1
    5a2c:	21 f0       	breq	.+8      	; 0x5a36 <malloc+0x8e>
    5a2e:	fb 01       	movw	r30, r22
    5a30:	93 83       	std	Z+3, r25	; 0x03
    5a32:	82 83       	std	Z+2, r24	; 0x02
    5a34:	04 c0       	rjmp	.+8      	; 0x5a3e <malloc+0x96>
    5a36:	90 93 79 14 	sts	0x1479, r25	; 0x801479 <__flp+0x1>
    5a3a:	80 93 78 14 	sts	0x1478, r24	; 0x801478 <__flp>
    5a3e:	fe 01       	movw	r30, r28
    5a40:	32 96       	adiw	r30, 0x02	; 2
    5a42:	44 c0       	rjmp	.+136    	; 0x5acc <malloc+0x124>
    5a44:	fe 01       	movw	r30, r28
    5a46:	e2 0f       	add	r30, r18
    5a48:	f3 1f       	adc	r31, r19
    5a4a:	81 93       	st	Z+, r24
    5a4c:	91 93       	st	Z+, r25
    5a4e:	22 50       	subi	r18, 0x02	; 2
    5a50:	31 09       	sbc	r19, r1
    5a52:	39 83       	std	Y+1, r19	; 0x01
    5a54:	28 83       	st	Y, r18
    5a56:	3a c0       	rjmp	.+116    	; 0x5acc <malloc+0x124>
    5a58:	20 91 76 14 	lds	r18, 0x1476	; 0x801476 <__brkval>
    5a5c:	30 91 77 14 	lds	r19, 0x1477	; 0x801477 <__brkval+0x1>
    5a60:	23 2b       	or	r18, r19
    5a62:	41 f4       	brne	.+16     	; 0x5a74 <malloc+0xcc>
    5a64:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5a68:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5a6c:	30 93 77 14 	sts	0x1477, r19	; 0x801477 <__brkval+0x1>
    5a70:	20 93 76 14 	sts	0x1476, r18	; 0x801476 <__brkval>
    5a74:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5a78:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5a7c:	21 15       	cp	r18, r1
    5a7e:	31 05       	cpc	r19, r1
    5a80:	41 f4       	brne	.+16     	; 0x5a92 <malloc+0xea>
    5a82:	2d b7       	in	r18, 0x3d	; 61
    5a84:	3e b7       	in	r19, 0x3e	; 62
    5a86:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5a8a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5a8e:	24 1b       	sub	r18, r20
    5a90:	35 0b       	sbc	r19, r21
    5a92:	e0 91 76 14 	lds	r30, 0x1476	; 0x801476 <__brkval>
    5a96:	f0 91 77 14 	lds	r31, 0x1477	; 0x801477 <__brkval+0x1>
    5a9a:	e2 17       	cp	r30, r18
    5a9c:	f3 07       	cpc	r31, r19
    5a9e:	a0 f4       	brcc	.+40     	; 0x5ac8 <malloc+0x120>
    5aa0:	2e 1b       	sub	r18, r30
    5aa2:	3f 0b       	sbc	r19, r31
    5aa4:	28 17       	cp	r18, r24
    5aa6:	39 07       	cpc	r19, r25
    5aa8:	78 f0       	brcs	.+30     	; 0x5ac8 <malloc+0x120>
    5aaa:	ac 01       	movw	r20, r24
    5aac:	4e 5f       	subi	r20, 0xFE	; 254
    5aae:	5f 4f       	sbci	r21, 0xFF	; 255
    5ab0:	24 17       	cp	r18, r20
    5ab2:	35 07       	cpc	r19, r21
    5ab4:	48 f0       	brcs	.+18     	; 0x5ac8 <malloc+0x120>
    5ab6:	4e 0f       	add	r20, r30
    5ab8:	5f 1f       	adc	r21, r31
    5aba:	50 93 77 14 	sts	0x1477, r21	; 0x801477 <__brkval+0x1>
    5abe:	40 93 76 14 	sts	0x1476, r20	; 0x801476 <__brkval>
    5ac2:	81 93       	st	Z+, r24
    5ac4:	91 93       	st	Z+, r25
    5ac6:	02 c0       	rjmp	.+4      	; 0x5acc <malloc+0x124>
    5ac8:	e0 e0       	ldi	r30, 0x00	; 0
    5aca:	f0 e0       	ldi	r31, 0x00	; 0
    5acc:	cf 01       	movw	r24, r30
    5ace:	df 91       	pop	r29
    5ad0:	cf 91       	pop	r28
    5ad2:	1f 91       	pop	r17
    5ad4:	0f 91       	pop	r16
    5ad6:	08 95       	ret

00005ad8 <free>:
    5ad8:	cf 93       	push	r28
    5ada:	df 93       	push	r29
    5adc:	00 97       	sbiw	r24, 0x00	; 0
    5ade:	09 f4       	brne	.+2      	; 0x5ae2 <free+0xa>
    5ae0:	81 c0       	rjmp	.+258    	; 0x5be4 <free+0x10c>
    5ae2:	fc 01       	movw	r30, r24
    5ae4:	32 97       	sbiw	r30, 0x02	; 2
    5ae6:	13 82       	std	Z+3, r1	; 0x03
    5ae8:	12 82       	std	Z+2, r1	; 0x02
    5aea:	a0 91 78 14 	lds	r26, 0x1478	; 0x801478 <__flp>
    5aee:	b0 91 79 14 	lds	r27, 0x1479	; 0x801479 <__flp+0x1>
    5af2:	10 97       	sbiw	r26, 0x00	; 0
    5af4:	81 f4       	brne	.+32     	; 0x5b16 <free+0x3e>
    5af6:	20 81       	ld	r18, Z
    5af8:	31 81       	ldd	r19, Z+1	; 0x01
    5afa:	82 0f       	add	r24, r18
    5afc:	93 1f       	adc	r25, r19
    5afe:	20 91 76 14 	lds	r18, 0x1476	; 0x801476 <__brkval>
    5b02:	30 91 77 14 	lds	r19, 0x1477	; 0x801477 <__brkval+0x1>
    5b06:	28 17       	cp	r18, r24
    5b08:	39 07       	cpc	r19, r25
    5b0a:	51 f5       	brne	.+84     	; 0x5b60 <free+0x88>
    5b0c:	f0 93 77 14 	sts	0x1477, r31	; 0x801477 <__brkval+0x1>
    5b10:	e0 93 76 14 	sts	0x1476, r30	; 0x801476 <__brkval>
    5b14:	67 c0       	rjmp	.+206    	; 0x5be4 <free+0x10c>
    5b16:	ed 01       	movw	r28, r26
    5b18:	20 e0       	ldi	r18, 0x00	; 0
    5b1a:	30 e0       	ldi	r19, 0x00	; 0
    5b1c:	ce 17       	cp	r28, r30
    5b1e:	df 07       	cpc	r29, r31
    5b20:	40 f4       	brcc	.+16     	; 0x5b32 <free+0x5a>
    5b22:	4a 81       	ldd	r20, Y+2	; 0x02
    5b24:	5b 81       	ldd	r21, Y+3	; 0x03
    5b26:	9e 01       	movw	r18, r28
    5b28:	41 15       	cp	r20, r1
    5b2a:	51 05       	cpc	r21, r1
    5b2c:	f1 f0       	breq	.+60     	; 0x5b6a <free+0x92>
    5b2e:	ea 01       	movw	r28, r20
    5b30:	f5 cf       	rjmp	.-22     	; 0x5b1c <free+0x44>
    5b32:	d3 83       	std	Z+3, r29	; 0x03
    5b34:	c2 83       	std	Z+2, r28	; 0x02
    5b36:	40 81       	ld	r20, Z
    5b38:	51 81       	ldd	r21, Z+1	; 0x01
    5b3a:	84 0f       	add	r24, r20
    5b3c:	95 1f       	adc	r25, r21
    5b3e:	c8 17       	cp	r28, r24
    5b40:	d9 07       	cpc	r29, r25
    5b42:	59 f4       	brne	.+22     	; 0x5b5a <free+0x82>
    5b44:	88 81       	ld	r24, Y
    5b46:	99 81       	ldd	r25, Y+1	; 0x01
    5b48:	84 0f       	add	r24, r20
    5b4a:	95 1f       	adc	r25, r21
    5b4c:	02 96       	adiw	r24, 0x02	; 2
    5b4e:	91 83       	std	Z+1, r25	; 0x01
    5b50:	80 83       	st	Z, r24
    5b52:	8a 81       	ldd	r24, Y+2	; 0x02
    5b54:	9b 81       	ldd	r25, Y+3	; 0x03
    5b56:	93 83       	std	Z+3, r25	; 0x03
    5b58:	82 83       	std	Z+2, r24	; 0x02
    5b5a:	21 15       	cp	r18, r1
    5b5c:	31 05       	cpc	r19, r1
    5b5e:	29 f4       	brne	.+10     	; 0x5b6a <free+0x92>
    5b60:	f0 93 79 14 	sts	0x1479, r31	; 0x801479 <__flp+0x1>
    5b64:	e0 93 78 14 	sts	0x1478, r30	; 0x801478 <__flp>
    5b68:	3d c0       	rjmp	.+122    	; 0x5be4 <free+0x10c>
    5b6a:	e9 01       	movw	r28, r18
    5b6c:	fb 83       	std	Y+3, r31	; 0x03
    5b6e:	ea 83       	std	Y+2, r30	; 0x02
    5b70:	49 91       	ld	r20, Y+
    5b72:	59 91       	ld	r21, Y+
    5b74:	c4 0f       	add	r28, r20
    5b76:	d5 1f       	adc	r29, r21
    5b78:	ec 17       	cp	r30, r28
    5b7a:	fd 07       	cpc	r31, r29
    5b7c:	61 f4       	brne	.+24     	; 0x5b96 <free+0xbe>
    5b7e:	80 81       	ld	r24, Z
    5b80:	91 81       	ldd	r25, Z+1	; 0x01
    5b82:	84 0f       	add	r24, r20
    5b84:	95 1f       	adc	r25, r21
    5b86:	02 96       	adiw	r24, 0x02	; 2
    5b88:	e9 01       	movw	r28, r18
    5b8a:	99 83       	std	Y+1, r25	; 0x01
    5b8c:	88 83       	st	Y, r24
    5b8e:	82 81       	ldd	r24, Z+2	; 0x02
    5b90:	93 81       	ldd	r25, Z+3	; 0x03
    5b92:	9b 83       	std	Y+3, r25	; 0x03
    5b94:	8a 83       	std	Y+2, r24	; 0x02
    5b96:	e0 e0       	ldi	r30, 0x00	; 0
    5b98:	f0 e0       	ldi	r31, 0x00	; 0
    5b9a:	12 96       	adiw	r26, 0x02	; 2
    5b9c:	8d 91       	ld	r24, X+
    5b9e:	9c 91       	ld	r25, X
    5ba0:	13 97       	sbiw	r26, 0x03	; 3
    5ba2:	00 97       	sbiw	r24, 0x00	; 0
    5ba4:	19 f0       	breq	.+6      	; 0x5bac <free+0xd4>
    5ba6:	fd 01       	movw	r30, r26
    5ba8:	dc 01       	movw	r26, r24
    5baa:	f7 cf       	rjmp	.-18     	; 0x5b9a <free+0xc2>
    5bac:	8d 91       	ld	r24, X+
    5bae:	9c 91       	ld	r25, X
    5bb0:	11 97       	sbiw	r26, 0x01	; 1
    5bb2:	9d 01       	movw	r18, r26
    5bb4:	2e 5f       	subi	r18, 0xFE	; 254
    5bb6:	3f 4f       	sbci	r19, 0xFF	; 255
    5bb8:	82 0f       	add	r24, r18
    5bba:	93 1f       	adc	r25, r19
    5bbc:	20 91 76 14 	lds	r18, 0x1476	; 0x801476 <__brkval>
    5bc0:	30 91 77 14 	lds	r19, 0x1477	; 0x801477 <__brkval+0x1>
    5bc4:	28 17       	cp	r18, r24
    5bc6:	39 07       	cpc	r19, r25
    5bc8:	69 f4       	brne	.+26     	; 0x5be4 <free+0x10c>
    5bca:	30 97       	sbiw	r30, 0x00	; 0
    5bcc:	29 f4       	brne	.+10     	; 0x5bd8 <free+0x100>
    5bce:	10 92 79 14 	sts	0x1479, r1	; 0x801479 <__flp+0x1>
    5bd2:	10 92 78 14 	sts	0x1478, r1	; 0x801478 <__flp>
    5bd6:	02 c0       	rjmp	.+4      	; 0x5bdc <free+0x104>
    5bd8:	13 82       	std	Z+3, r1	; 0x03
    5bda:	12 82       	std	Z+2, r1	; 0x02
    5bdc:	b0 93 77 14 	sts	0x1477, r27	; 0x801477 <__brkval+0x1>
    5be0:	a0 93 76 14 	sts	0x1476, r26	; 0x801476 <__brkval>
    5be4:	df 91       	pop	r29
    5be6:	cf 91       	pop	r28
    5be8:	08 95       	ret

00005bea <abort>:
    5bea:	81 e0       	ldi	r24, 0x01	; 1
    5bec:	90 e0       	ldi	r25, 0x00	; 0
    5bee:	f8 94       	cli
    5bf0:	7d c3       	rjmp	.+1786   	; 0x62ec <_exit>

00005bf2 <memcpy>:
    5bf2:	fb 01       	movw	r30, r22
    5bf4:	dc 01       	movw	r26, r24
    5bf6:	02 c0       	rjmp	.+4      	; 0x5bfc <memcpy+0xa>
    5bf8:	01 90       	ld	r0, Z+
    5bfa:	0d 92       	st	X+, r0
    5bfc:	41 50       	subi	r20, 0x01	; 1
    5bfe:	50 40       	sbci	r21, 0x00	; 0
    5c00:	d8 f7       	brcc	.-10     	; 0x5bf8 <memcpy+0x6>
    5c02:	08 95       	ret

00005c04 <memset>:
    5c04:	dc 01       	movw	r26, r24
    5c06:	01 c0       	rjmp	.+2      	; 0x5c0a <memset+0x6>
    5c08:	6d 93       	st	X+, r22
    5c0a:	41 50       	subi	r20, 0x01	; 1
    5c0c:	50 40       	sbci	r21, 0x00	; 0
    5c0e:	e0 f7       	brcc	.-8      	; 0x5c08 <memset+0x4>
    5c10:	08 95       	ret

00005c12 <strcasestr>:
    5c12:	fb 01       	movw	r30, r22
    5c14:	51 91       	ld	r21, Z+
    5c16:	55 23       	and	r21, r21
    5c18:	b1 f0       	breq	.+44     	; 0x5c46 <strcasestr+0x34>
    5c1a:	bf 01       	movw	r22, r30
    5c1c:	dc 01       	movw	r26, r24
    5c1e:	05 2e       	mov	r0, r21
    5c20:	4d 91       	ld	r20, X+
    5c22:	44 23       	and	r20, r20
    5c24:	69 f0       	breq	.+26     	; 0x5c40 <strcasestr+0x2e>
    5c26:	10 d0       	rcall	.+32     	; 0x5c48 <strcasestr+0x36>
    5c28:	d9 f7       	brne	.-10     	; 0x5c20 <strcasestr+0xe>
    5c2a:	cd 01       	movw	r24, r26
    5c2c:	01 90       	ld	r0, Z+
    5c2e:	00 20       	and	r0, r0
    5c30:	49 f0       	breq	.+18     	; 0x5c44 <strcasestr+0x32>
    5c32:	4d 91       	ld	r20, X+
    5c34:	41 11       	cpse	r20, r1
    5c36:	08 d0       	rcall	.+16     	; 0x5c48 <strcasestr+0x36>
    5c38:	c9 f3       	breq	.-14     	; 0x5c2c <strcasestr+0x1a>
    5c3a:	fb 01       	movw	r30, r22
    5c3c:	41 11       	cpse	r20, r1
    5c3e:	ee cf       	rjmp	.-36     	; 0x5c1c <strcasestr+0xa>
    5c40:	81 e0       	ldi	r24, 0x01	; 1
    5c42:	90 e0       	ldi	r25, 0x00	; 0
    5c44:	01 97       	sbiw	r24, 0x01	; 1
    5c46:	08 95       	ret
    5c48:	40 25       	eor	r20, r0
    5c4a:	39 f0       	breq	.+14     	; 0x5c5a <strcasestr+0x48>
    5c4c:	40 32       	cpi	r20, 0x20	; 32
    5c4e:	29 f4       	brne	.+10     	; 0x5c5a <strcasestr+0x48>
    5c50:	40 29       	or	r20, r0
    5c52:	4b 57       	subi	r20, 0x7B	; 123
    5c54:	46 5e       	subi	r20, 0xE6	; 230
    5c56:	08 f0       	brcs	.+2      	; 0x5c5a <strcasestr+0x48>
    5c58:	18 94       	sez
    5c5a:	08 95       	ret

00005c5c <strcat>:
    5c5c:	fb 01       	movw	r30, r22
    5c5e:	dc 01       	movw	r26, r24
    5c60:	0d 90       	ld	r0, X+
    5c62:	00 20       	and	r0, r0
    5c64:	e9 f7       	brne	.-6      	; 0x5c60 <strcat+0x4>
    5c66:	11 97       	sbiw	r26, 0x01	; 1
    5c68:	01 90       	ld	r0, Z+
    5c6a:	0d 92       	st	X+, r0
    5c6c:	00 20       	and	r0, r0
    5c6e:	e1 f7       	brne	.-8      	; 0x5c68 <strcat+0xc>
    5c70:	08 95       	ret

00005c72 <strcpy>:
    5c72:	fb 01       	movw	r30, r22
    5c74:	dc 01       	movw	r26, r24
    5c76:	01 90       	ld	r0, Z+
    5c78:	0d 92       	st	X+, r0
    5c7a:	00 20       	and	r0, r0
    5c7c:	e1 f7       	brne	.-8      	; 0x5c76 <strcpy+0x4>
    5c7e:	08 95       	ret

00005c80 <strncasecmp>:
    5c80:	fb 01       	movw	r30, r22
    5c82:	dc 01       	movw	r26, r24
    5c84:	41 50       	subi	r20, 0x01	; 1
    5c86:	50 40       	sbci	r21, 0x00	; 0
    5c88:	88 f0       	brcs	.+34     	; 0x5cac <strncasecmp+0x2c>
    5c8a:	8d 91       	ld	r24, X+
    5c8c:	81 34       	cpi	r24, 0x41	; 65
    5c8e:	1c f0       	brlt	.+6      	; 0x5c96 <strncasecmp+0x16>
    5c90:	8b 35       	cpi	r24, 0x5B	; 91
    5c92:	0c f4       	brge	.+2      	; 0x5c96 <strncasecmp+0x16>
    5c94:	80 5e       	subi	r24, 0xE0	; 224
    5c96:	61 91       	ld	r22, Z+
    5c98:	61 34       	cpi	r22, 0x41	; 65
    5c9a:	1c f0       	brlt	.+6      	; 0x5ca2 <strncasecmp+0x22>
    5c9c:	6b 35       	cpi	r22, 0x5B	; 91
    5c9e:	0c f4       	brge	.+2      	; 0x5ca2 <strncasecmp+0x22>
    5ca0:	60 5e       	subi	r22, 0xE0	; 224
    5ca2:	86 1b       	sub	r24, r22
    5ca4:	61 11       	cpse	r22, r1
    5ca6:	71 f3       	breq	.-36     	; 0x5c84 <strncasecmp+0x4>
    5ca8:	99 0b       	sbc	r25, r25
    5caa:	08 95       	ret
    5cac:	88 1b       	sub	r24, r24
    5cae:	fc cf       	rjmp	.-8      	; 0x5ca8 <strncasecmp+0x28>

00005cb0 <printf>:
    5cb0:	cf 93       	push	r28
    5cb2:	df 93       	push	r29
    5cb4:	cd b7       	in	r28, 0x3d	; 61
    5cb6:	de b7       	in	r29, 0x3e	; 62
    5cb8:	ae 01       	movw	r20, r28
    5cba:	4a 5f       	subi	r20, 0xFA	; 250
    5cbc:	5f 4f       	sbci	r21, 0xFF	; 255
    5cbe:	fa 01       	movw	r30, r20
    5cc0:	61 91       	ld	r22, Z+
    5cc2:	71 91       	ld	r23, Z+
    5cc4:	af 01       	movw	r20, r30
    5cc6:	80 91 7c 14 	lds	r24, 0x147C	; 0x80147c <__iob+0x2>
    5cca:	90 91 7d 14 	lds	r25, 0x147D	; 0x80147d <__iob+0x3>
    5cce:	61 d0       	rcall	.+194    	; 0x5d92 <vfprintf>
    5cd0:	df 91       	pop	r29
    5cd2:	cf 91       	pop	r28
    5cd4:	08 95       	ret

00005cd6 <puts>:
    5cd6:	0f 93       	push	r16
    5cd8:	1f 93       	push	r17
    5cda:	cf 93       	push	r28
    5cdc:	df 93       	push	r29
    5cde:	e0 91 7c 14 	lds	r30, 0x147C	; 0x80147c <__iob+0x2>
    5ce2:	f0 91 7d 14 	lds	r31, 0x147D	; 0x80147d <__iob+0x3>
    5ce6:	23 81       	ldd	r18, Z+3	; 0x03
    5ce8:	21 ff       	sbrs	r18, 1
    5cea:	1b c0       	rjmp	.+54     	; 0x5d22 <puts+0x4c>
    5cec:	8c 01       	movw	r16, r24
    5cee:	d0 e0       	ldi	r29, 0x00	; 0
    5cf0:	c0 e0       	ldi	r28, 0x00	; 0
    5cf2:	f8 01       	movw	r30, r16
    5cf4:	81 91       	ld	r24, Z+
    5cf6:	8f 01       	movw	r16, r30
    5cf8:	60 91 7c 14 	lds	r22, 0x147C	; 0x80147c <__iob+0x2>
    5cfc:	70 91 7d 14 	lds	r23, 0x147D	; 0x80147d <__iob+0x3>
    5d00:	db 01       	movw	r26, r22
    5d02:	18 96       	adiw	r26, 0x08	; 8
    5d04:	ed 91       	ld	r30, X+
    5d06:	fc 91       	ld	r31, X
    5d08:	19 97       	sbiw	r26, 0x09	; 9
    5d0a:	88 23       	and	r24, r24
    5d0c:	31 f0       	breq	.+12     	; 0x5d1a <puts+0x44>
    5d0e:	19 95       	eicall
    5d10:	89 2b       	or	r24, r25
    5d12:	79 f3       	breq	.-34     	; 0x5cf2 <puts+0x1c>
    5d14:	df ef       	ldi	r29, 0xFF	; 255
    5d16:	cf ef       	ldi	r28, 0xFF	; 255
    5d18:	ec cf       	rjmp	.-40     	; 0x5cf2 <puts+0x1c>
    5d1a:	8a e0       	ldi	r24, 0x0A	; 10
    5d1c:	19 95       	eicall
    5d1e:	89 2b       	or	r24, r25
    5d20:	19 f0       	breq	.+6      	; 0x5d28 <puts+0x52>
    5d22:	8f ef       	ldi	r24, 0xFF	; 255
    5d24:	9f ef       	ldi	r25, 0xFF	; 255
    5d26:	02 c0       	rjmp	.+4      	; 0x5d2c <puts+0x56>
    5d28:	8d 2f       	mov	r24, r29
    5d2a:	9c 2f       	mov	r25, r28
    5d2c:	df 91       	pop	r29
    5d2e:	cf 91       	pop	r28
    5d30:	1f 91       	pop	r17
    5d32:	0f 91       	pop	r16
    5d34:	08 95       	ret

00005d36 <sprintf>:
    5d36:	0f 93       	push	r16
    5d38:	1f 93       	push	r17
    5d3a:	cf 93       	push	r28
    5d3c:	df 93       	push	r29
    5d3e:	cd b7       	in	r28, 0x3d	; 61
    5d40:	de b7       	in	r29, 0x3e	; 62
    5d42:	2e 97       	sbiw	r28, 0x0e	; 14
    5d44:	0f b6       	in	r0, 0x3f	; 63
    5d46:	f8 94       	cli
    5d48:	de bf       	out	0x3e, r29	; 62
    5d4a:	0f be       	out	0x3f, r0	; 63
    5d4c:	cd bf       	out	0x3d, r28	; 61
    5d4e:	0e 89       	ldd	r16, Y+22	; 0x16
    5d50:	1f 89       	ldd	r17, Y+23	; 0x17
    5d52:	86 e0       	ldi	r24, 0x06	; 6
    5d54:	8c 83       	std	Y+4, r24	; 0x04
    5d56:	1a 83       	std	Y+2, r17	; 0x02
    5d58:	09 83       	std	Y+1, r16	; 0x01
    5d5a:	8f ef       	ldi	r24, 0xFF	; 255
    5d5c:	9f e7       	ldi	r25, 0x7F	; 127
    5d5e:	9e 83       	std	Y+6, r25	; 0x06
    5d60:	8d 83       	std	Y+5, r24	; 0x05
    5d62:	ae 01       	movw	r20, r28
    5d64:	46 5e       	subi	r20, 0xE6	; 230
    5d66:	5f 4f       	sbci	r21, 0xFF	; 255
    5d68:	68 8d       	ldd	r22, Y+24	; 0x18
    5d6a:	79 8d       	ldd	r23, Y+25	; 0x19
    5d6c:	ce 01       	movw	r24, r28
    5d6e:	01 96       	adiw	r24, 0x01	; 1
    5d70:	10 d0       	rcall	.+32     	; 0x5d92 <vfprintf>
    5d72:	ef 81       	ldd	r30, Y+7	; 0x07
    5d74:	f8 85       	ldd	r31, Y+8	; 0x08
    5d76:	e0 0f       	add	r30, r16
    5d78:	f1 1f       	adc	r31, r17
    5d7a:	10 82       	st	Z, r1
    5d7c:	2e 96       	adiw	r28, 0x0e	; 14
    5d7e:	0f b6       	in	r0, 0x3f	; 63
    5d80:	f8 94       	cli
    5d82:	de bf       	out	0x3e, r29	; 62
    5d84:	0f be       	out	0x3f, r0	; 63
    5d86:	cd bf       	out	0x3d, r28	; 61
    5d88:	df 91       	pop	r29
    5d8a:	cf 91       	pop	r28
    5d8c:	1f 91       	pop	r17
    5d8e:	0f 91       	pop	r16
    5d90:	08 95       	ret

00005d92 <vfprintf>:
    5d92:	2f 92       	push	r2
    5d94:	3f 92       	push	r3
    5d96:	4f 92       	push	r4
    5d98:	5f 92       	push	r5
    5d9a:	6f 92       	push	r6
    5d9c:	7f 92       	push	r7
    5d9e:	8f 92       	push	r8
    5da0:	9f 92       	push	r9
    5da2:	af 92       	push	r10
    5da4:	bf 92       	push	r11
    5da6:	cf 92       	push	r12
    5da8:	df 92       	push	r13
    5daa:	ef 92       	push	r14
    5dac:	ff 92       	push	r15
    5dae:	0f 93       	push	r16
    5db0:	1f 93       	push	r17
    5db2:	cf 93       	push	r28
    5db4:	df 93       	push	r29
    5db6:	cd b7       	in	r28, 0x3d	; 61
    5db8:	de b7       	in	r29, 0x3e	; 62
    5dba:	2b 97       	sbiw	r28, 0x0b	; 11
    5dbc:	0f b6       	in	r0, 0x3f	; 63
    5dbe:	f8 94       	cli
    5dc0:	de bf       	out	0x3e, r29	; 62
    5dc2:	0f be       	out	0x3f, r0	; 63
    5dc4:	cd bf       	out	0x3d, r28	; 61
    5dc6:	6c 01       	movw	r12, r24
    5dc8:	7b 01       	movw	r14, r22
    5dca:	8a 01       	movw	r16, r20
    5dcc:	fc 01       	movw	r30, r24
    5dce:	17 82       	std	Z+7, r1	; 0x07
    5dd0:	16 82       	std	Z+6, r1	; 0x06
    5dd2:	83 81       	ldd	r24, Z+3	; 0x03
    5dd4:	81 ff       	sbrs	r24, 1
    5dd6:	bf c1       	rjmp	.+894    	; 0x6156 <vfprintf+0x3c4>
    5dd8:	ce 01       	movw	r24, r28
    5dda:	01 96       	adiw	r24, 0x01	; 1
    5ddc:	3c 01       	movw	r6, r24
    5dde:	f6 01       	movw	r30, r12
    5de0:	93 81       	ldd	r25, Z+3	; 0x03
    5de2:	f7 01       	movw	r30, r14
    5de4:	93 fd       	sbrc	r25, 3
    5de6:	85 91       	lpm	r24, Z+
    5de8:	93 ff       	sbrs	r25, 3
    5dea:	81 91       	ld	r24, Z+
    5dec:	7f 01       	movw	r14, r30
    5dee:	88 23       	and	r24, r24
    5df0:	09 f4       	brne	.+2      	; 0x5df4 <vfprintf+0x62>
    5df2:	ad c1       	rjmp	.+858    	; 0x614e <vfprintf+0x3bc>
    5df4:	85 32       	cpi	r24, 0x25	; 37
    5df6:	39 f4       	brne	.+14     	; 0x5e06 <vfprintf+0x74>
    5df8:	93 fd       	sbrc	r25, 3
    5dfa:	85 91       	lpm	r24, Z+
    5dfc:	93 ff       	sbrs	r25, 3
    5dfe:	81 91       	ld	r24, Z+
    5e00:	7f 01       	movw	r14, r30
    5e02:	85 32       	cpi	r24, 0x25	; 37
    5e04:	21 f4       	brne	.+8      	; 0x5e0e <vfprintf+0x7c>
    5e06:	b6 01       	movw	r22, r12
    5e08:	90 e0       	ldi	r25, 0x00	; 0
    5e0a:	d6 d1       	rcall	.+940    	; 0x61b8 <fputc>
    5e0c:	e8 cf       	rjmp	.-48     	; 0x5dde <vfprintf+0x4c>
    5e0e:	91 2c       	mov	r9, r1
    5e10:	21 2c       	mov	r2, r1
    5e12:	31 2c       	mov	r3, r1
    5e14:	ff e1       	ldi	r31, 0x1F	; 31
    5e16:	f3 15       	cp	r31, r3
    5e18:	d8 f0       	brcs	.+54     	; 0x5e50 <vfprintf+0xbe>
    5e1a:	8b 32       	cpi	r24, 0x2B	; 43
    5e1c:	79 f0       	breq	.+30     	; 0x5e3c <vfprintf+0xaa>
    5e1e:	38 f4       	brcc	.+14     	; 0x5e2e <vfprintf+0x9c>
    5e20:	80 32       	cpi	r24, 0x20	; 32
    5e22:	79 f0       	breq	.+30     	; 0x5e42 <vfprintf+0xb0>
    5e24:	83 32       	cpi	r24, 0x23	; 35
    5e26:	a1 f4       	brne	.+40     	; 0x5e50 <vfprintf+0xbe>
    5e28:	23 2d       	mov	r18, r3
    5e2a:	20 61       	ori	r18, 0x10	; 16
    5e2c:	1d c0       	rjmp	.+58     	; 0x5e68 <vfprintf+0xd6>
    5e2e:	8d 32       	cpi	r24, 0x2D	; 45
    5e30:	61 f0       	breq	.+24     	; 0x5e4a <vfprintf+0xb8>
    5e32:	80 33       	cpi	r24, 0x30	; 48
    5e34:	69 f4       	brne	.+26     	; 0x5e50 <vfprintf+0xbe>
    5e36:	23 2d       	mov	r18, r3
    5e38:	21 60       	ori	r18, 0x01	; 1
    5e3a:	16 c0       	rjmp	.+44     	; 0x5e68 <vfprintf+0xd6>
    5e3c:	83 2d       	mov	r24, r3
    5e3e:	82 60       	ori	r24, 0x02	; 2
    5e40:	38 2e       	mov	r3, r24
    5e42:	e3 2d       	mov	r30, r3
    5e44:	e4 60       	ori	r30, 0x04	; 4
    5e46:	3e 2e       	mov	r3, r30
    5e48:	2a c0       	rjmp	.+84     	; 0x5e9e <vfprintf+0x10c>
    5e4a:	f3 2d       	mov	r31, r3
    5e4c:	f8 60       	ori	r31, 0x08	; 8
    5e4e:	1d c0       	rjmp	.+58     	; 0x5e8a <vfprintf+0xf8>
    5e50:	37 fc       	sbrc	r3, 7
    5e52:	2d c0       	rjmp	.+90     	; 0x5eae <vfprintf+0x11c>
    5e54:	20 ed       	ldi	r18, 0xD0	; 208
    5e56:	28 0f       	add	r18, r24
    5e58:	2a 30       	cpi	r18, 0x0A	; 10
    5e5a:	40 f0       	brcs	.+16     	; 0x5e6c <vfprintf+0xda>
    5e5c:	8e 32       	cpi	r24, 0x2E	; 46
    5e5e:	b9 f4       	brne	.+46     	; 0x5e8e <vfprintf+0xfc>
    5e60:	36 fc       	sbrc	r3, 6
    5e62:	75 c1       	rjmp	.+746    	; 0x614e <vfprintf+0x3bc>
    5e64:	23 2d       	mov	r18, r3
    5e66:	20 64       	ori	r18, 0x40	; 64
    5e68:	32 2e       	mov	r3, r18
    5e6a:	19 c0       	rjmp	.+50     	; 0x5e9e <vfprintf+0x10c>
    5e6c:	36 fe       	sbrs	r3, 6
    5e6e:	06 c0       	rjmp	.+12     	; 0x5e7c <vfprintf+0xea>
    5e70:	8a e0       	ldi	r24, 0x0A	; 10
    5e72:	98 9e       	mul	r9, r24
    5e74:	20 0d       	add	r18, r0
    5e76:	11 24       	eor	r1, r1
    5e78:	92 2e       	mov	r9, r18
    5e7a:	11 c0       	rjmp	.+34     	; 0x5e9e <vfprintf+0x10c>
    5e7c:	ea e0       	ldi	r30, 0x0A	; 10
    5e7e:	2e 9e       	mul	r2, r30
    5e80:	20 0d       	add	r18, r0
    5e82:	11 24       	eor	r1, r1
    5e84:	22 2e       	mov	r2, r18
    5e86:	f3 2d       	mov	r31, r3
    5e88:	f0 62       	ori	r31, 0x20	; 32
    5e8a:	3f 2e       	mov	r3, r31
    5e8c:	08 c0       	rjmp	.+16     	; 0x5e9e <vfprintf+0x10c>
    5e8e:	8c 36       	cpi	r24, 0x6C	; 108
    5e90:	21 f4       	brne	.+8      	; 0x5e9a <vfprintf+0x108>
    5e92:	83 2d       	mov	r24, r3
    5e94:	80 68       	ori	r24, 0x80	; 128
    5e96:	38 2e       	mov	r3, r24
    5e98:	02 c0       	rjmp	.+4      	; 0x5e9e <vfprintf+0x10c>
    5e9a:	88 36       	cpi	r24, 0x68	; 104
    5e9c:	41 f4       	brne	.+16     	; 0x5eae <vfprintf+0x11c>
    5e9e:	f7 01       	movw	r30, r14
    5ea0:	93 fd       	sbrc	r25, 3
    5ea2:	85 91       	lpm	r24, Z+
    5ea4:	93 ff       	sbrs	r25, 3
    5ea6:	81 91       	ld	r24, Z+
    5ea8:	7f 01       	movw	r14, r30
    5eaa:	81 11       	cpse	r24, r1
    5eac:	b3 cf       	rjmp	.-154    	; 0x5e14 <vfprintf+0x82>
    5eae:	98 2f       	mov	r25, r24
    5eb0:	9f 7d       	andi	r25, 0xDF	; 223
    5eb2:	95 54       	subi	r25, 0x45	; 69
    5eb4:	93 30       	cpi	r25, 0x03	; 3
    5eb6:	28 f4       	brcc	.+10     	; 0x5ec2 <vfprintf+0x130>
    5eb8:	0c 5f       	subi	r16, 0xFC	; 252
    5eba:	1f 4f       	sbci	r17, 0xFF	; 255
    5ebc:	9f e3       	ldi	r25, 0x3F	; 63
    5ebe:	99 83       	std	Y+1, r25	; 0x01
    5ec0:	0d c0       	rjmp	.+26     	; 0x5edc <vfprintf+0x14a>
    5ec2:	83 36       	cpi	r24, 0x63	; 99
    5ec4:	31 f0       	breq	.+12     	; 0x5ed2 <vfprintf+0x140>
    5ec6:	83 37       	cpi	r24, 0x73	; 115
    5ec8:	71 f0       	breq	.+28     	; 0x5ee6 <vfprintf+0x154>
    5eca:	83 35       	cpi	r24, 0x53	; 83
    5ecc:	09 f0       	breq	.+2      	; 0x5ed0 <vfprintf+0x13e>
    5ece:	55 c0       	rjmp	.+170    	; 0x5f7a <vfprintf+0x1e8>
    5ed0:	20 c0       	rjmp	.+64     	; 0x5f12 <vfprintf+0x180>
    5ed2:	f8 01       	movw	r30, r16
    5ed4:	80 81       	ld	r24, Z
    5ed6:	89 83       	std	Y+1, r24	; 0x01
    5ed8:	0e 5f       	subi	r16, 0xFE	; 254
    5eda:	1f 4f       	sbci	r17, 0xFF	; 255
    5edc:	88 24       	eor	r8, r8
    5ede:	83 94       	inc	r8
    5ee0:	91 2c       	mov	r9, r1
    5ee2:	53 01       	movw	r10, r6
    5ee4:	12 c0       	rjmp	.+36     	; 0x5f0a <vfprintf+0x178>
    5ee6:	28 01       	movw	r4, r16
    5ee8:	f2 e0       	ldi	r31, 0x02	; 2
    5eea:	4f 0e       	add	r4, r31
    5eec:	51 1c       	adc	r5, r1
    5eee:	f8 01       	movw	r30, r16
    5ef0:	a0 80       	ld	r10, Z
    5ef2:	b1 80       	ldd	r11, Z+1	; 0x01
    5ef4:	36 fe       	sbrs	r3, 6
    5ef6:	03 c0       	rjmp	.+6      	; 0x5efe <vfprintf+0x16c>
    5ef8:	69 2d       	mov	r22, r9
    5efa:	70 e0       	ldi	r23, 0x00	; 0
    5efc:	02 c0       	rjmp	.+4      	; 0x5f02 <vfprintf+0x170>
    5efe:	6f ef       	ldi	r22, 0xFF	; 255
    5f00:	7f ef       	ldi	r23, 0xFF	; 255
    5f02:	c5 01       	movw	r24, r10
    5f04:	4e d1       	rcall	.+668    	; 0x61a2 <strnlen>
    5f06:	4c 01       	movw	r8, r24
    5f08:	82 01       	movw	r16, r4
    5f0a:	f3 2d       	mov	r31, r3
    5f0c:	ff 77       	andi	r31, 0x7F	; 127
    5f0e:	3f 2e       	mov	r3, r31
    5f10:	15 c0       	rjmp	.+42     	; 0x5f3c <vfprintf+0x1aa>
    5f12:	28 01       	movw	r4, r16
    5f14:	22 e0       	ldi	r18, 0x02	; 2
    5f16:	42 0e       	add	r4, r18
    5f18:	51 1c       	adc	r5, r1
    5f1a:	f8 01       	movw	r30, r16
    5f1c:	a0 80       	ld	r10, Z
    5f1e:	b1 80       	ldd	r11, Z+1	; 0x01
    5f20:	36 fe       	sbrs	r3, 6
    5f22:	03 c0       	rjmp	.+6      	; 0x5f2a <vfprintf+0x198>
    5f24:	69 2d       	mov	r22, r9
    5f26:	70 e0       	ldi	r23, 0x00	; 0
    5f28:	02 c0       	rjmp	.+4      	; 0x5f2e <vfprintf+0x19c>
    5f2a:	6f ef       	ldi	r22, 0xFF	; 255
    5f2c:	7f ef       	ldi	r23, 0xFF	; 255
    5f2e:	c5 01       	movw	r24, r10
    5f30:	2d d1       	rcall	.+602    	; 0x618c <strnlen_P>
    5f32:	4c 01       	movw	r8, r24
    5f34:	f3 2d       	mov	r31, r3
    5f36:	f0 68       	ori	r31, 0x80	; 128
    5f38:	3f 2e       	mov	r3, r31
    5f3a:	82 01       	movw	r16, r4
    5f3c:	33 fc       	sbrc	r3, 3
    5f3e:	19 c0       	rjmp	.+50     	; 0x5f72 <vfprintf+0x1e0>
    5f40:	82 2d       	mov	r24, r2
    5f42:	90 e0       	ldi	r25, 0x00	; 0
    5f44:	88 16       	cp	r8, r24
    5f46:	99 06       	cpc	r9, r25
    5f48:	a0 f4       	brcc	.+40     	; 0x5f72 <vfprintf+0x1e0>
    5f4a:	b6 01       	movw	r22, r12
    5f4c:	80 e2       	ldi	r24, 0x20	; 32
    5f4e:	90 e0       	ldi	r25, 0x00	; 0
    5f50:	33 d1       	rcall	.+614    	; 0x61b8 <fputc>
    5f52:	2a 94       	dec	r2
    5f54:	f5 cf       	rjmp	.-22     	; 0x5f40 <vfprintf+0x1ae>
    5f56:	f5 01       	movw	r30, r10
    5f58:	37 fc       	sbrc	r3, 7
    5f5a:	85 91       	lpm	r24, Z+
    5f5c:	37 fe       	sbrs	r3, 7
    5f5e:	81 91       	ld	r24, Z+
    5f60:	5f 01       	movw	r10, r30
    5f62:	b6 01       	movw	r22, r12
    5f64:	90 e0       	ldi	r25, 0x00	; 0
    5f66:	28 d1       	rcall	.+592    	; 0x61b8 <fputc>
    5f68:	21 10       	cpse	r2, r1
    5f6a:	2a 94       	dec	r2
    5f6c:	21 e0       	ldi	r18, 0x01	; 1
    5f6e:	82 1a       	sub	r8, r18
    5f70:	91 08       	sbc	r9, r1
    5f72:	81 14       	cp	r8, r1
    5f74:	91 04       	cpc	r9, r1
    5f76:	79 f7       	brne	.-34     	; 0x5f56 <vfprintf+0x1c4>
    5f78:	e1 c0       	rjmp	.+450    	; 0x613c <vfprintf+0x3aa>
    5f7a:	84 36       	cpi	r24, 0x64	; 100
    5f7c:	11 f0       	breq	.+4      	; 0x5f82 <vfprintf+0x1f0>
    5f7e:	89 36       	cpi	r24, 0x69	; 105
    5f80:	39 f5       	brne	.+78     	; 0x5fd0 <vfprintf+0x23e>
    5f82:	f8 01       	movw	r30, r16
    5f84:	37 fe       	sbrs	r3, 7
    5f86:	07 c0       	rjmp	.+14     	; 0x5f96 <vfprintf+0x204>
    5f88:	60 81       	ld	r22, Z
    5f8a:	71 81       	ldd	r23, Z+1	; 0x01
    5f8c:	82 81       	ldd	r24, Z+2	; 0x02
    5f8e:	93 81       	ldd	r25, Z+3	; 0x03
    5f90:	0c 5f       	subi	r16, 0xFC	; 252
    5f92:	1f 4f       	sbci	r17, 0xFF	; 255
    5f94:	08 c0       	rjmp	.+16     	; 0x5fa6 <vfprintf+0x214>
    5f96:	60 81       	ld	r22, Z
    5f98:	71 81       	ldd	r23, Z+1	; 0x01
    5f9a:	07 2e       	mov	r0, r23
    5f9c:	00 0c       	add	r0, r0
    5f9e:	88 0b       	sbc	r24, r24
    5fa0:	99 0b       	sbc	r25, r25
    5fa2:	0e 5f       	subi	r16, 0xFE	; 254
    5fa4:	1f 4f       	sbci	r17, 0xFF	; 255
    5fa6:	f3 2d       	mov	r31, r3
    5fa8:	ff 76       	andi	r31, 0x6F	; 111
    5faa:	3f 2e       	mov	r3, r31
    5fac:	97 ff       	sbrs	r25, 7
    5fae:	09 c0       	rjmp	.+18     	; 0x5fc2 <vfprintf+0x230>
    5fb0:	90 95       	com	r25
    5fb2:	80 95       	com	r24
    5fb4:	70 95       	com	r23
    5fb6:	61 95       	neg	r22
    5fb8:	7f 4f       	sbci	r23, 0xFF	; 255
    5fba:	8f 4f       	sbci	r24, 0xFF	; 255
    5fbc:	9f 4f       	sbci	r25, 0xFF	; 255
    5fbe:	f0 68       	ori	r31, 0x80	; 128
    5fc0:	3f 2e       	mov	r3, r31
    5fc2:	2a e0       	ldi	r18, 0x0A	; 10
    5fc4:	30 e0       	ldi	r19, 0x00	; 0
    5fc6:	a3 01       	movw	r20, r6
    5fc8:	33 d1       	rcall	.+614    	; 0x6230 <__ultoa_invert>
    5fca:	88 2e       	mov	r8, r24
    5fcc:	86 18       	sub	r8, r6
    5fce:	44 c0       	rjmp	.+136    	; 0x6058 <vfprintf+0x2c6>
    5fd0:	85 37       	cpi	r24, 0x75	; 117
    5fd2:	31 f4       	brne	.+12     	; 0x5fe0 <vfprintf+0x24e>
    5fd4:	23 2d       	mov	r18, r3
    5fd6:	2f 7e       	andi	r18, 0xEF	; 239
    5fd8:	b2 2e       	mov	r11, r18
    5fda:	2a e0       	ldi	r18, 0x0A	; 10
    5fdc:	30 e0       	ldi	r19, 0x00	; 0
    5fde:	25 c0       	rjmp	.+74     	; 0x602a <vfprintf+0x298>
    5fe0:	93 2d       	mov	r25, r3
    5fe2:	99 7f       	andi	r25, 0xF9	; 249
    5fe4:	b9 2e       	mov	r11, r25
    5fe6:	8f 36       	cpi	r24, 0x6F	; 111
    5fe8:	c1 f0       	breq	.+48     	; 0x601a <vfprintf+0x288>
    5fea:	18 f4       	brcc	.+6      	; 0x5ff2 <vfprintf+0x260>
    5fec:	88 35       	cpi	r24, 0x58	; 88
    5fee:	79 f0       	breq	.+30     	; 0x600e <vfprintf+0x27c>
    5ff0:	ae c0       	rjmp	.+348    	; 0x614e <vfprintf+0x3bc>
    5ff2:	80 37       	cpi	r24, 0x70	; 112
    5ff4:	19 f0       	breq	.+6      	; 0x5ffc <vfprintf+0x26a>
    5ff6:	88 37       	cpi	r24, 0x78	; 120
    5ff8:	21 f0       	breq	.+8      	; 0x6002 <vfprintf+0x270>
    5ffa:	a9 c0       	rjmp	.+338    	; 0x614e <vfprintf+0x3bc>
    5ffc:	e9 2f       	mov	r30, r25
    5ffe:	e0 61       	ori	r30, 0x10	; 16
    6000:	be 2e       	mov	r11, r30
    6002:	b4 fe       	sbrs	r11, 4
    6004:	0d c0       	rjmp	.+26     	; 0x6020 <vfprintf+0x28e>
    6006:	fb 2d       	mov	r31, r11
    6008:	f4 60       	ori	r31, 0x04	; 4
    600a:	bf 2e       	mov	r11, r31
    600c:	09 c0       	rjmp	.+18     	; 0x6020 <vfprintf+0x28e>
    600e:	34 fe       	sbrs	r3, 4
    6010:	0a c0       	rjmp	.+20     	; 0x6026 <vfprintf+0x294>
    6012:	29 2f       	mov	r18, r25
    6014:	26 60       	ori	r18, 0x06	; 6
    6016:	b2 2e       	mov	r11, r18
    6018:	06 c0       	rjmp	.+12     	; 0x6026 <vfprintf+0x294>
    601a:	28 e0       	ldi	r18, 0x08	; 8
    601c:	30 e0       	ldi	r19, 0x00	; 0
    601e:	05 c0       	rjmp	.+10     	; 0x602a <vfprintf+0x298>
    6020:	20 e1       	ldi	r18, 0x10	; 16
    6022:	30 e0       	ldi	r19, 0x00	; 0
    6024:	02 c0       	rjmp	.+4      	; 0x602a <vfprintf+0x298>
    6026:	20 e1       	ldi	r18, 0x10	; 16
    6028:	32 e0       	ldi	r19, 0x02	; 2
    602a:	f8 01       	movw	r30, r16
    602c:	b7 fe       	sbrs	r11, 7
    602e:	07 c0       	rjmp	.+14     	; 0x603e <vfprintf+0x2ac>
    6030:	60 81       	ld	r22, Z
    6032:	71 81       	ldd	r23, Z+1	; 0x01
    6034:	82 81       	ldd	r24, Z+2	; 0x02
    6036:	93 81       	ldd	r25, Z+3	; 0x03
    6038:	0c 5f       	subi	r16, 0xFC	; 252
    603a:	1f 4f       	sbci	r17, 0xFF	; 255
    603c:	06 c0       	rjmp	.+12     	; 0x604a <vfprintf+0x2b8>
    603e:	60 81       	ld	r22, Z
    6040:	71 81       	ldd	r23, Z+1	; 0x01
    6042:	80 e0       	ldi	r24, 0x00	; 0
    6044:	90 e0       	ldi	r25, 0x00	; 0
    6046:	0e 5f       	subi	r16, 0xFE	; 254
    6048:	1f 4f       	sbci	r17, 0xFF	; 255
    604a:	a3 01       	movw	r20, r6
    604c:	f1 d0       	rcall	.+482    	; 0x6230 <__ultoa_invert>
    604e:	88 2e       	mov	r8, r24
    6050:	86 18       	sub	r8, r6
    6052:	fb 2d       	mov	r31, r11
    6054:	ff 77       	andi	r31, 0x7F	; 127
    6056:	3f 2e       	mov	r3, r31
    6058:	36 fe       	sbrs	r3, 6
    605a:	0d c0       	rjmp	.+26     	; 0x6076 <vfprintf+0x2e4>
    605c:	23 2d       	mov	r18, r3
    605e:	2e 7f       	andi	r18, 0xFE	; 254
    6060:	a2 2e       	mov	r10, r18
    6062:	89 14       	cp	r8, r9
    6064:	58 f4       	brcc	.+22     	; 0x607c <vfprintf+0x2ea>
    6066:	34 fe       	sbrs	r3, 4
    6068:	0b c0       	rjmp	.+22     	; 0x6080 <vfprintf+0x2ee>
    606a:	32 fc       	sbrc	r3, 2
    606c:	09 c0       	rjmp	.+18     	; 0x6080 <vfprintf+0x2ee>
    606e:	83 2d       	mov	r24, r3
    6070:	8e 7e       	andi	r24, 0xEE	; 238
    6072:	a8 2e       	mov	r10, r24
    6074:	05 c0       	rjmp	.+10     	; 0x6080 <vfprintf+0x2ee>
    6076:	b8 2c       	mov	r11, r8
    6078:	a3 2c       	mov	r10, r3
    607a:	03 c0       	rjmp	.+6      	; 0x6082 <vfprintf+0x2f0>
    607c:	b8 2c       	mov	r11, r8
    607e:	01 c0       	rjmp	.+2      	; 0x6082 <vfprintf+0x2f0>
    6080:	b9 2c       	mov	r11, r9
    6082:	a4 fe       	sbrs	r10, 4
    6084:	0f c0       	rjmp	.+30     	; 0x60a4 <vfprintf+0x312>
    6086:	fe 01       	movw	r30, r28
    6088:	e8 0d       	add	r30, r8
    608a:	f1 1d       	adc	r31, r1
    608c:	80 81       	ld	r24, Z
    608e:	80 33       	cpi	r24, 0x30	; 48
    6090:	21 f4       	brne	.+8      	; 0x609a <vfprintf+0x308>
    6092:	9a 2d       	mov	r25, r10
    6094:	99 7e       	andi	r25, 0xE9	; 233
    6096:	a9 2e       	mov	r10, r25
    6098:	09 c0       	rjmp	.+18     	; 0x60ac <vfprintf+0x31a>
    609a:	a2 fe       	sbrs	r10, 2
    609c:	06 c0       	rjmp	.+12     	; 0x60aa <vfprintf+0x318>
    609e:	b3 94       	inc	r11
    60a0:	b3 94       	inc	r11
    60a2:	04 c0       	rjmp	.+8      	; 0x60ac <vfprintf+0x31a>
    60a4:	8a 2d       	mov	r24, r10
    60a6:	86 78       	andi	r24, 0x86	; 134
    60a8:	09 f0       	breq	.+2      	; 0x60ac <vfprintf+0x31a>
    60aa:	b3 94       	inc	r11
    60ac:	a3 fc       	sbrc	r10, 3
    60ae:	10 c0       	rjmp	.+32     	; 0x60d0 <vfprintf+0x33e>
    60b0:	a0 fe       	sbrs	r10, 0
    60b2:	06 c0       	rjmp	.+12     	; 0x60c0 <vfprintf+0x32e>
    60b4:	b2 14       	cp	r11, r2
    60b6:	80 f4       	brcc	.+32     	; 0x60d8 <vfprintf+0x346>
    60b8:	28 0c       	add	r2, r8
    60ba:	92 2c       	mov	r9, r2
    60bc:	9b 18       	sub	r9, r11
    60be:	0d c0       	rjmp	.+26     	; 0x60da <vfprintf+0x348>
    60c0:	b2 14       	cp	r11, r2
    60c2:	58 f4       	brcc	.+22     	; 0x60da <vfprintf+0x348>
    60c4:	b6 01       	movw	r22, r12
    60c6:	80 e2       	ldi	r24, 0x20	; 32
    60c8:	90 e0       	ldi	r25, 0x00	; 0
    60ca:	76 d0       	rcall	.+236    	; 0x61b8 <fputc>
    60cc:	b3 94       	inc	r11
    60ce:	f8 cf       	rjmp	.-16     	; 0x60c0 <vfprintf+0x32e>
    60d0:	b2 14       	cp	r11, r2
    60d2:	18 f4       	brcc	.+6      	; 0x60da <vfprintf+0x348>
    60d4:	2b 18       	sub	r2, r11
    60d6:	02 c0       	rjmp	.+4      	; 0x60dc <vfprintf+0x34a>
    60d8:	98 2c       	mov	r9, r8
    60da:	21 2c       	mov	r2, r1
    60dc:	a4 fe       	sbrs	r10, 4
    60de:	0f c0       	rjmp	.+30     	; 0x60fe <vfprintf+0x36c>
    60e0:	b6 01       	movw	r22, r12
    60e2:	80 e3       	ldi	r24, 0x30	; 48
    60e4:	90 e0       	ldi	r25, 0x00	; 0
    60e6:	68 d0       	rcall	.+208    	; 0x61b8 <fputc>
    60e8:	a2 fe       	sbrs	r10, 2
    60ea:	16 c0       	rjmp	.+44     	; 0x6118 <vfprintf+0x386>
    60ec:	a1 fc       	sbrc	r10, 1
    60ee:	03 c0       	rjmp	.+6      	; 0x60f6 <vfprintf+0x364>
    60f0:	88 e7       	ldi	r24, 0x78	; 120
    60f2:	90 e0       	ldi	r25, 0x00	; 0
    60f4:	02 c0       	rjmp	.+4      	; 0x60fa <vfprintf+0x368>
    60f6:	88 e5       	ldi	r24, 0x58	; 88
    60f8:	90 e0       	ldi	r25, 0x00	; 0
    60fa:	b6 01       	movw	r22, r12
    60fc:	0c c0       	rjmp	.+24     	; 0x6116 <vfprintf+0x384>
    60fe:	8a 2d       	mov	r24, r10
    6100:	86 78       	andi	r24, 0x86	; 134
    6102:	51 f0       	breq	.+20     	; 0x6118 <vfprintf+0x386>
    6104:	a1 fe       	sbrs	r10, 1
    6106:	02 c0       	rjmp	.+4      	; 0x610c <vfprintf+0x37a>
    6108:	8b e2       	ldi	r24, 0x2B	; 43
    610a:	01 c0       	rjmp	.+2      	; 0x610e <vfprintf+0x37c>
    610c:	80 e2       	ldi	r24, 0x20	; 32
    610e:	a7 fc       	sbrc	r10, 7
    6110:	8d e2       	ldi	r24, 0x2D	; 45
    6112:	b6 01       	movw	r22, r12
    6114:	90 e0       	ldi	r25, 0x00	; 0
    6116:	50 d0       	rcall	.+160    	; 0x61b8 <fputc>
    6118:	89 14       	cp	r8, r9
    611a:	30 f4       	brcc	.+12     	; 0x6128 <vfprintf+0x396>
    611c:	b6 01       	movw	r22, r12
    611e:	80 e3       	ldi	r24, 0x30	; 48
    6120:	90 e0       	ldi	r25, 0x00	; 0
    6122:	4a d0       	rcall	.+148    	; 0x61b8 <fputc>
    6124:	9a 94       	dec	r9
    6126:	f8 cf       	rjmp	.-16     	; 0x6118 <vfprintf+0x386>
    6128:	8a 94       	dec	r8
    612a:	f3 01       	movw	r30, r6
    612c:	e8 0d       	add	r30, r8
    612e:	f1 1d       	adc	r31, r1
    6130:	80 81       	ld	r24, Z
    6132:	b6 01       	movw	r22, r12
    6134:	90 e0       	ldi	r25, 0x00	; 0
    6136:	40 d0       	rcall	.+128    	; 0x61b8 <fputc>
    6138:	81 10       	cpse	r8, r1
    613a:	f6 cf       	rjmp	.-20     	; 0x6128 <vfprintf+0x396>
    613c:	22 20       	and	r2, r2
    613e:	09 f4       	brne	.+2      	; 0x6142 <vfprintf+0x3b0>
    6140:	4e ce       	rjmp	.-868    	; 0x5dde <vfprintf+0x4c>
    6142:	b6 01       	movw	r22, r12
    6144:	80 e2       	ldi	r24, 0x20	; 32
    6146:	90 e0       	ldi	r25, 0x00	; 0
    6148:	37 d0       	rcall	.+110    	; 0x61b8 <fputc>
    614a:	2a 94       	dec	r2
    614c:	f7 cf       	rjmp	.-18     	; 0x613c <vfprintf+0x3aa>
    614e:	f6 01       	movw	r30, r12
    6150:	86 81       	ldd	r24, Z+6	; 0x06
    6152:	97 81       	ldd	r25, Z+7	; 0x07
    6154:	02 c0       	rjmp	.+4      	; 0x615a <vfprintf+0x3c8>
    6156:	8f ef       	ldi	r24, 0xFF	; 255
    6158:	9f ef       	ldi	r25, 0xFF	; 255
    615a:	2b 96       	adiw	r28, 0x0b	; 11
    615c:	0f b6       	in	r0, 0x3f	; 63
    615e:	f8 94       	cli
    6160:	de bf       	out	0x3e, r29	; 62
    6162:	0f be       	out	0x3f, r0	; 63
    6164:	cd bf       	out	0x3d, r28	; 61
    6166:	df 91       	pop	r29
    6168:	cf 91       	pop	r28
    616a:	1f 91       	pop	r17
    616c:	0f 91       	pop	r16
    616e:	ff 90       	pop	r15
    6170:	ef 90       	pop	r14
    6172:	df 90       	pop	r13
    6174:	cf 90       	pop	r12
    6176:	bf 90       	pop	r11
    6178:	af 90       	pop	r10
    617a:	9f 90       	pop	r9
    617c:	8f 90       	pop	r8
    617e:	7f 90       	pop	r7
    6180:	6f 90       	pop	r6
    6182:	5f 90       	pop	r5
    6184:	4f 90       	pop	r4
    6186:	3f 90       	pop	r3
    6188:	2f 90       	pop	r2
    618a:	08 95       	ret

0000618c <strnlen_P>:
    618c:	fc 01       	movw	r30, r24
    618e:	05 90       	lpm	r0, Z+
    6190:	61 50       	subi	r22, 0x01	; 1
    6192:	70 40       	sbci	r23, 0x00	; 0
    6194:	01 10       	cpse	r0, r1
    6196:	d8 f7       	brcc	.-10     	; 0x618e <strnlen_P+0x2>
    6198:	80 95       	com	r24
    619a:	90 95       	com	r25
    619c:	8e 0f       	add	r24, r30
    619e:	9f 1f       	adc	r25, r31
    61a0:	08 95       	ret

000061a2 <strnlen>:
    61a2:	fc 01       	movw	r30, r24
    61a4:	61 50       	subi	r22, 0x01	; 1
    61a6:	70 40       	sbci	r23, 0x00	; 0
    61a8:	01 90       	ld	r0, Z+
    61aa:	01 10       	cpse	r0, r1
    61ac:	d8 f7       	brcc	.-10     	; 0x61a4 <strnlen+0x2>
    61ae:	80 95       	com	r24
    61b0:	90 95       	com	r25
    61b2:	8e 0f       	add	r24, r30
    61b4:	9f 1f       	adc	r25, r31
    61b6:	08 95       	ret

000061b8 <fputc>:
    61b8:	0f 93       	push	r16
    61ba:	1f 93       	push	r17
    61bc:	cf 93       	push	r28
    61be:	df 93       	push	r29
    61c0:	fb 01       	movw	r30, r22
    61c2:	23 81       	ldd	r18, Z+3	; 0x03
    61c4:	21 fd       	sbrc	r18, 1
    61c6:	03 c0       	rjmp	.+6      	; 0x61ce <fputc+0x16>
    61c8:	8f ef       	ldi	r24, 0xFF	; 255
    61ca:	9f ef       	ldi	r25, 0xFF	; 255
    61cc:	2c c0       	rjmp	.+88     	; 0x6226 <fputc+0x6e>
    61ce:	22 ff       	sbrs	r18, 2
    61d0:	16 c0       	rjmp	.+44     	; 0x61fe <fputc+0x46>
    61d2:	46 81       	ldd	r20, Z+6	; 0x06
    61d4:	57 81       	ldd	r21, Z+7	; 0x07
    61d6:	24 81       	ldd	r18, Z+4	; 0x04
    61d8:	35 81       	ldd	r19, Z+5	; 0x05
    61da:	42 17       	cp	r20, r18
    61dc:	53 07       	cpc	r21, r19
    61de:	44 f4       	brge	.+16     	; 0x61f0 <fputc+0x38>
    61e0:	a0 81       	ld	r26, Z
    61e2:	b1 81       	ldd	r27, Z+1	; 0x01
    61e4:	9d 01       	movw	r18, r26
    61e6:	2f 5f       	subi	r18, 0xFF	; 255
    61e8:	3f 4f       	sbci	r19, 0xFF	; 255
    61ea:	31 83       	std	Z+1, r19	; 0x01
    61ec:	20 83       	st	Z, r18
    61ee:	8c 93       	st	X, r24
    61f0:	26 81       	ldd	r18, Z+6	; 0x06
    61f2:	37 81       	ldd	r19, Z+7	; 0x07
    61f4:	2f 5f       	subi	r18, 0xFF	; 255
    61f6:	3f 4f       	sbci	r19, 0xFF	; 255
    61f8:	37 83       	std	Z+7, r19	; 0x07
    61fa:	26 83       	std	Z+6, r18	; 0x06
    61fc:	14 c0       	rjmp	.+40     	; 0x6226 <fputc+0x6e>
    61fe:	8b 01       	movw	r16, r22
    6200:	ec 01       	movw	r28, r24
    6202:	fb 01       	movw	r30, r22
    6204:	00 84       	ldd	r0, Z+8	; 0x08
    6206:	f1 85       	ldd	r31, Z+9	; 0x09
    6208:	e0 2d       	mov	r30, r0
    620a:	19 95       	eicall
    620c:	89 2b       	or	r24, r25
    620e:	e1 f6       	brne	.-72     	; 0x61c8 <fputc+0x10>
    6210:	d8 01       	movw	r26, r16
    6212:	16 96       	adiw	r26, 0x06	; 6
    6214:	8d 91       	ld	r24, X+
    6216:	9c 91       	ld	r25, X
    6218:	17 97       	sbiw	r26, 0x07	; 7
    621a:	01 96       	adiw	r24, 0x01	; 1
    621c:	17 96       	adiw	r26, 0x07	; 7
    621e:	9c 93       	st	X, r25
    6220:	8e 93       	st	-X, r24
    6222:	16 97       	sbiw	r26, 0x06	; 6
    6224:	ce 01       	movw	r24, r28
    6226:	df 91       	pop	r29
    6228:	cf 91       	pop	r28
    622a:	1f 91       	pop	r17
    622c:	0f 91       	pop	r16
    622e:	08 95       	ret

00006230 <__ultoa_invert>:
    6230:	fa 01       	movw	r30, r20
    6232:	aa 27       	eor	r26, r26
    6234:	28 30       	cpi	r18, 0x08	; 8
    6236:	51 f1       	breq	.+84     	; 0x628c <__ultoa_invert+0x5c>
    6238:	20 31       	cpi	r18, 0x10	; 16
    623a:	81 f1       	breq	.+96     	; 0x629c <__ultoa_invert+0x6c>
    623c:	e8 94       	clt
    623e:	6f 93       	push	r22
    6240:	6e 7f       	andi	r22, 0xFE	; 254
    6242:	6e 5f       	subi	r22, 0xFE	; 254
    6244:	7f 4f       	sbci	r23, 0xFF	; 255
    6246:	8f 4f       	sbci	r24, 0xFF	; 255
    6248:	9f 4f       	sbci	r25, 0xFF	; 255
    624a:	af 4f       	sbci	r26, 0xFF	; 255
    624c:	b1 e0       	ldi	r27, 0x01	; 1
    624e:	3e d0       	rcall	.+124    	; 0x62cc <__ultoa_invert+0x9c>
    6250:	b4 e0       	ldi	r27, 0x04	; 4
    6252:	3c d0       	rcall	.+120    	; 0x62cc <__ultoa_invert+0x9c>
    6254:	67 0f       	add	r22, r23
    6256:	78 1f       	adc	r23, r24
    6258:	89 1f       	adc	r24, r25
    625a:	9a 1f       	adc	r25, r26
    625c:	a1 1d       	adc	r26, r1
    625e:	68 0f       	add	r22, r24
    6260:	79 1f       	adc	r23, r25
    6262:	8a 1f       	adc	r24, r26
    6264:	91 1d       	adc	r25, r1
    6266:	a1 1d       	adc	r26, r1
    6268:	6a 0f       	add	r22, r26
    626a:	71 1d       	adc	r23, r1
    626c:	81 1d       	adc	r24, r1
    626e:	91 1d       	adc	r25, r1
    6270:	a1 1d       	adc	r26, r1
    6272:	20 d0       	rcall	.+64     	; 0x62b4 <__ultoa_invert+0x84>
    6274:	09 f4       	brne	.+2      	; 0x6278 <__ultoa_invert+0x48>
    6276:	68 94       	set
    6278:	3f 91       	pop	r19
    627a:	2a e0       	ldi	r18, 0x0A	; 10
    627c:	26 9f       	mul	r18, r22
    627e:	11 24       	eor	r1, r1
    6280:	30 19       	sub	r19, r0
    6282:	30 5d       	subi	r19, 0xD0	; 208
    6284:	31 93       	st	Z+, r19
    6286:	de f6       	brtc	.-74     	; 0x623e <__ultoa_invert+0xe>
    6288:	cf 01       	movw	r24, r30
    628a:	08 95       	ret
    628c:	46 2f       	mov	r20, r22
    628e:	47 70       	andi	r20, 0x07	; 7
    6290:	40 5d       	subi	r20, 0xD0	; 208
    6292:	41 93       	st	Z+, r20
    6294:	b3 e0       	ldi	r27, 0x03	; 3
    6296:	0f d0       	rcall	.+30     	; 0x62b6 <__ultoa_invert+0x86>
    6298:	c9 f7       	brne	.-14     	; 0x628c <__ultoa_invert+0x5c>
    629a:	f6 cf       	rjmp	.-20     	; 0x6288 <__ultoa_invert+0x58>
    629c:	46 2f       	mov	r20, r22
    629e:	4f 70       	andi	r20, 0x0F	; 15
    62a0:	40 5d       	subi	r20, 0xD0	; 208
    62a2:	4a 33       	cpi	r20, 0x3A	; 58
    62a4:	18 f0       	brcs	.+6      	; 0x62ac <__ultoa_invert+0x7c>
    62a6:	49 5d       	subi	r20, 0xD9	; 217
    62a8:	31 fd       	sbrc	r19, 1
    62aa:	40 52       	subi	r20, 0x20	; 32
    62ac:	41 93       	st	Z+, r20
    62ae:	02 d0       	rcall	.+4      	; 0x62b4 <__ultoa_invert+0x84>
    62b0:	a9 f7       	brne	.-22     	; 0x629c <__ultoa_invert+0x6c>
    62b2:	ea cf       	rjmp	.-44     	; 0x6288 <__ultoa_invert+0x58>
    62b4:	b4 e0       	ldi	r27, 0x04	; 4
    62b6:	a6 95       	lsr	r26
    62b8:	97 95       	ror	r25
    62ba:	87 95       	ror	r24
    62bc:	77 95       	ror	r23
    62be:	67 95       	ror	r22
    62c0:	ba 95       	dec	r27
    62c2:	c9 f7       	brne	.-14     	; 0x62b6 <__ultoa_invert+0x86>
    62c4:	00 97       	sbiw	r24, 0x00	; 0
    62c6:	61 05       	cpc	r22, r1
    62c8:	71 05       	cpc	r23, r1
    62ca:	08 95       	ret
    62cc:	9b 01       	movw	r18, r22
    62ce:	ac 01       	movw	r20, r24
    62d0:	0a 2e       	mov	r0, r26
    62d2:	06 94       	lsr	r0
    62d4:	57 95       	ror	r21
    62d6:	47 95       	ror	r20
    62d8:	37 95       	ror	r19
    62da:	27 95       	ror	r18
    62dc:	ba 95       	dec	r27
    62de:	c9 f7       	brne	.-14     	; 0x62d2 <__ultoa_invert+0xa2>
    62e0:	62 0f       	add	r22, r18
    62e2:	73 1f       	adc	r23, r19
    62e4:	84 1f       	adc	r24, r20
    62e6:	95 1f       	adc	r25, r21
    62e8:	a0 1d       	adc	r26, r0
    62ea:	08 95       	ret

000062ec <_exit>:
    62ec:	f8 94       	cli

000062ee <__stop_program>:
    62ee:	ff cf       	rjmp	.-2      	; 0x62ee <__stop_program>

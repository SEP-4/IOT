
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000662  00800200  00006e9a  00006f2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006e9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f71  00800862  00800862  00007590  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007590  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000075ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000bb0  00000000  00000000  0000762c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e2de  00000000  00000000  000081dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a8b  00000000  00000000  000164ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000070c7  00000000  00000000  00019f45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002914  00000000  00000000  0002100c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004597  00000000  00000000  00023920  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c89c  00000000  00000000  00027eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ac0  00000000  00000000  00034753  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	71 c7       	rjmp	.+3810   	; 0xf14 <__vector_12>
      32:	00 00       	nop
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 e9 27 	jmp	0x4fd2	; 0x4fd2 <__vector_25>
      68:	0c 94 3b 28 	jmp	0x5076	; 0x5076 <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 7f 28 	jmp	0x50fe	; 0x50fe <__vector_36>
      94:	0c 94 d1 28 	jmp	0x51a2	; 0x51a2 <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 1d 2d 	jmp	0x5a3a	; 0x5a3a <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 15 29 	jmp	0x522a	; 0x522a <__vector_51>
      d0:	0c 94 67 29 	jmp	0x52ce	; 0x52ce <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 ab 29 	jmp	0x5356	; 0x5356 <__vector_54>
      dc:	0c 94 fd 29 	jmp	0x53fa	; 0x53fa <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	64 1d       	adc	r22, r4
      e6:	64 1d       	adc	r22, r4
      e8:	64 1d       	adc	r22, r4
      ea:	9b 1d       	adc	r25, r11
      ec:	a3 1d       	adc	r26, r3
      ee:	b8 1d       	adc	r27, r8
      f0:	64 1d       	adc	r22, r4
      f2:	64 1d       	adc	r22, r4
      f4:	9b 1d       	adc	r25, r11
      f6:	a3 1d       	adc	r26, r3
      f8:	3f 2d       	mov	r19, r15
      fa:	af 2d       	mov	r26, r15
      fc:	af 2d       	mov	r26, r15
      fe:	af 2d       	mov	r26, r15
     100:	af 2d       	mov	r26, r15
     102:	af 2d       	mov	r26, r15
     104:	af 2d       	mov	r26, r15
     106:	af 2d       	mov	r26, r15
     108:	3f 2d       	mov	r19, r15
     10a:	af 2d       	mov	r26, r15
     10c:	af 2d       	mov	r26, r15
     10e:	af 2d       	mov	r26, r15
     110:	af 2d       	mov	r26, r15
     112:	af 2d       	mov	r26, r15
     114:	af 2d       	mov	r26, r15
     116:	af 2d       	mov	r26, r15
     118:	41 2d       	mov	r20, r1
     11a:	af 2d       	mov	r26, r15
     11c:	af 2d       	mov	r26, r15
     11e:	af 2d       	mov	r26, r15
     120:	af 2d       	mov	r26, r15
     122:	af 2d       	mov	r26, r15
     124:	af 2d       	mov	r26, r15
     126:	af 2d       	mov	r26, r15
     128:	af 2d       	mov	r26, r15
     12a:	af 2d       	mov	r26, r15
     12c:	af 2d       	mov	r26, r15
     12e:	af 2d       	mov	r26, r15
     130:	af 2d       	mov	r26, r15
     132:	af 2d       	mov	r26, r15
     134:	af 2d       	mov	r26, r15
     136:	af 2d       	mov	r26, r15
     138:	41 2d       	mov	r20, r1
     13a:	af 2d       	mov	r26, r15
     13c:	af 2d       	mov	r26, r15
     13e:	af 2d       	mov	r26, r15
     140:	af 2d       	mov	r26, r15
     142:	af 2d       	mov	r26, r15
     144:	af 2d       	mov	r26, r15
     146:	af 2d       	mov	r26, r15
     148:	af 2d       	mov	r26, r15
     14a:	af 2d       	mov	r26, r15
     14c:	af 2d       	mov	r26, r15
     14e:	af 2d       	mov	r26, r15
     150:	af 2d       	mov	r26, r15
     152:	af 2d       	mov	r26, r15
     154:	af 2d       	mov	r26, r15
     156:	af 2d       	mov	r26, r15
     158:	ab 2d       	mov	r26, r11
     15a:	af 2d       	mov	r26, r15
     15c:	af 2d       	mov	r26, r15
     15e:	af 2d       	mov	r26, r15
     160:	af 2d       	mov	r26, r15
     162:	af 2d       	mov	r26, r15
     164:	af 2d       	mov	r26, r15
     166:	af 2d       	mov	r26, r15
     168:	76 2d       	mov	r23, r6
     16a:	af 2d       	mov	r26, r15
     16c:	af 2d       	mov	r26, r15
     16e:	af 2d       	mov	r26, r15
     170:	af 2d       	mov	r26, r15
     172:	af 2d       	mov	r26, r15
     174:	af 2d       	mov	r26, r15
     176:	af 2d       	mov	r26, r15
     178:	af 2d       	mov	r26, r15
     17a:	af 2d       	mov	r26, r15
     17c:	af 2d       	mov	r26, r15
     17e:	af 2d       	mov	r26, r15
     180:	af 2d       	mov	r26, r15
     182:	af 2d       	mov	r26, r15
     184:	af 2d       	mov	r26, r15
     186:	af 2d       	mov	r26, r15
     188:	6a 2d       	mov	r22, r10
     18a:	af 2d       	mov	r26, r15
     18c:	af 2d       	mov	r26, r15
     18e:	af 2d       	mov	r26, r15
     190:	af 2d       	mov	r26, r15
     192:	af 2d       	mov	r26, r15
     194:	af 2d       	mov	r26, r15
     196:	af 2d       	mov	r26, r15
     198:	8e 2d       	mov	r24, r14

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <prvCheckTasksWaitingTermination>
     2a0:	80 91 5d 15 	lds	r24, 0x155D	; 0x80155d <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	6f d5       	rcall	.+2782   	; 0xd88 <vPortYield>
     2aa:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <prvProcessTimerOrBlockTask>
     2c8:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	18 e0       	ldi	r17, 0x08	; 8
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	ea e9       	ldi	r30, 0x9A	; 154
     2e6:	fe e6       	ldi	r31, 0x6E	; 110
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	a2 36       	cpi	r26, 0x62	; 98
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	27 e1       	ldi	r18, 0x17	; 23
     2fa:	a2 e6       	ldi	r26, 0x62	; 98
     2fc:	b8 e0       	ldi	r27, 0x08	; 8
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	a3 3d       	cpi	r26, 0xD3	; 211
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <main>
     30c:	0c 94 4b 37 	jmp	0x6e96	; 0x6e96 <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <Application_getEventGroup>:
// Declare a variable to hold the created event group.
EventGroupHandle_t xCreatedEventGroup;

EventGroupHandle_t Application_getEventGroup(){
	return xCreatedEventGroup;
}
     312:	80 91 bb 17 	lds	r24, 0x17BB	; 0x8017bb <xCreatedEventGroup>
     316:	90 91 bc 17 	lds	r25, 0x17BC	; 0x8017bc <xCreatedEventGroup+0x1>
     31a:	08 95       	ret

0000031c <Application_aFunctionToClearBits>:
void Application_aFunctionToClearBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Clear bit 0 and bit 4 in xEventGroup. */
  uxBits = xEventGroupClearBits(
     31c:	41 e1       	ldi	r20, 0x11	; 17
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	5f c2       	rjmp	.+1214   	; 0x7e4 <xEventGroupClearBits>
     326:	08 95       	ret

00000328 <Application_aFunctionToWaitBits>:
EventGroupHandle_t Application_getEventGroup(){
	return xCreatedEventGroup;
}

void Application_aFunctionToWaitBits( EventGroupHandle_t xEventGroup )
{
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	ec 01       	movw	r28, r24
EventBits_t uxBits;
const TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;

  /* Wait a maximum of 100ms for either bit 0 or bit 4 to be set within
  the event group.  Clear the bits before exiting. */
  uxBits = xEventGroupWaitBits(
     338:	0f 2e       	mov	r0, r31
     33a:	f6 e0       	ldi	r31, 0x06	; 6
     33c:	cf 2e       	mov	r12, r31
     33e:	d1 2c       	mov	r13, r1
     340:	e1 2c       	mov	r14, r1
     342:	f1 2c       	mov	r15, r1
     344:	f0 2d       	mov	r31, r0
     346:	01 e0       	ldi	r16, 0x01	; 1
     348:	20 e0       	ldi	r18, 0x00	; 0
     34a:	41 e1       	ldi	r20, 0x11	; 17
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	a8 d1       	rcall	.+848    	; 0x6a4 <xEventGroupWaitBits>
            BIT_0 | BIT_4, /* The bits within the event group to wait for. */
            pdFALSE,        /* BIT_0 & BIT_4 should not be cleared before returning. */
            pdTRUE,       /* Wait for both bits, either bit will do. */
            xTicksToWait );/* Wait a maximum of 100ms for either bit to be set. */

  if( ( uxBits & ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )
     354:	dc 01       	movw	r26, r24
     356:	cb 01       	movw	r24, r22
     358:	81 71       	andi	r24, 0x11	; 17
     35a:	99 27       	eor	r25, r25
     35c:	aa 27       	eor	r26, r26
     35e:	bb 27       	eor	r27, r27
     360:	41 97       	sbiw	r24, 0x11	; 17
     362:	a1 05       	cpc	r26, r1
     364:	b1 05       	cpc	r27, r1
     366:	89 f4       	brne	.+34     	; 0x38a <Application_aFunctionToWaitBits+0x62>
  {
      /* xEventGroupWaitBits() returned because both bits were set. */
	  printf("setting the bits, they are set \n");
     368:	8f e6       	ldi	r24, 0x6F	; 111
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <puts>
	  SensorDataPackageHandler_SetHumidity(hih820_getHumidityInUint16());
     370:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <hih820_getHumidityInUint16>
     374:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <SensorDataPackageHandler_SetHumidity>
	  SensorDataPackageHandler_SetTemperature(hih820_getTemperatureInUint16());
     378:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <hih820_getTemperatureInUint16>
     37c:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <SensorDataPackageHandler_SetTemperature>
	  SensorDataPackageHandler_SetCO2(CO2Sensor_getCO2InUint16());
     380:	59 d0       	rcall	.+178    	; 0x434 <CO2Sensor_getCO2InUint16>
     382:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <SensorDataPackageHandler_SetCO2>
	  Application_aFunctionToClearBits( xEventGroup );
     386:	ce 01       	movw	r24, r28
     388:	c9 df       	rcall	.-110    	; 0x31c <Application_aFunctionToClearBits>
  else
  {
      /* xEventGroupWaitBits() returned because xTicksToWait ticks passed
      without either BIT_0 or BIT_4 becoming set. */
  }
}
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	0f 91       	pop	r16
     390:	ff 90       	pop	r15
     392:	ef 90       	pop	r14
     394:	df 90       	pop	r13
     396:	cf 90       	pop	r12
     398:	08 95       	ret

0000039a <Application_handler_task>:
	,  Application_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void Application_handler_task(void *pvParameters)
{
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <Application_handler_task+0x6>
     3a0:	1f 92       	push	r1
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
	printf("startApplication \n");
     3a6:	8f e8       	ldi	r24, 0x8F	; 143
     3a8:	92 e0       	ldi	r25, 0x02	; 2
     3aa:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <puts>
	(void)pvParameters;
	xCreatedEventGroup = xEventGroupCreate();
     3ae:	67 d1       	rcall	.+718    	; 0x67e <xEventGroupCreate>
     3b0:	90 93 bc 17 	sts	0x17BC, r25	; 0x8017bc <xCreatedEventGroup+0x1>
     3b4:	80 93 bb 17 	sts	0x17BB, r24	; 0x8017bb <xCreatedEventGroup>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300UL); // Upload message every 1 minutes (300 ms)
	xLastWakeTime = xTaskGetTickCount();
     3b8:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xTaskGetTickCount>
     3bc:	69 83       	std	Y+1, r22	; 0x01
     3be:	7a 83       	std	Y+2, r23	; 0x02
     3c0:	8b 83       	std	Y+3, r24	; 0x03
     3c2:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     3c4:	42 e1       	ldi	r20, 0x12	; 18
     3c6:	50 e0       	ldi	r21, 0x00	; 0
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	ce 01       	movw	r24, r28
     3ce:	01 96       	adiw	r24, 0x01	; 1
     3d0:	0e 94 0c 13 	call	0x2618	; 0x2618 <xTaskDelayUntil>
		// Was the event group created successfully?
		if( xCreatedEventGroup == NULL )
     3d4:	80 91 bb 17 	lds	r24, 0x17BB	; 0x8017bb <xCreatedEventGroup>
     3d8:	90 91 bc 17 	lds	r25, 0x17BC	; 0x8017bc <xCreatedEventGroup+0x1>
     3dc:	00 97       	sbiw	r24, 0x00	; 0
		// The event group was not created because there was insufficient
		// FreeRTOS heap available.
		}
		else
		{
			Application_aFunctionToWaitBits( xCreatedEventGroup);
     3de:	91 f3       	breq	.-28     	; 0x3c4 <Application_handler_task+0x2a>
     3e0:	a3 df       	rcall	.-186    	; 0x328 <Application_aFunctionToWaitBits>
     3e2:	f0 cf       	rjmp	.-32     	; 0x3c4 <Application_handler_task+0x2a>

000003e4 <Application_handler_initialise>:

/*-----------------------------------------------------------*/

void Application_handler_task( void *pvParameters );

void Application_handler_initialise(UBaseType_t Application_task_priority){
     3e4:	ef 92       	push	r14
     3e6:	ff 92       	push	r15
     3e8:	0f 93       	push	r16
	xTaskCreate(
     3ea:	e1 2c       	mov	r14, r1
     3ec:	f1 2c       	mov	r15, r1
     3ee:	08 2f       	mov	r16, r24
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	40 ec       	ldi	r20, 0xC0	; 192
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	61 ea       	ldi	r22, 0xA1	; 161
     3fa:	72 e0       	ldi	r23, 0x02	; 2
     3fc:	8d ec       	ldi	r24, 0xCD	; 205
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <xTaskCreate>
	,  "ApplicationHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  Application_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     404:	0f 91       	pop	r16
     406:	ff 90       	pop	r15
     408:	ef 90       	pop	r14
     40a:	08 95       	ret

0000040c <CO2Sensor_handler_initialise>:
mh_z19_returnCode_t getCO2return;


void CO2Sensor_handler_task( void *pvParameters );

void CO2Sensor_handler_initialise(UBaseType_t CO2_task_priority){
     40c:	ef 92       	push	r14
     40e:	ff 92       	push	r15
     410:	0f 93       	push	r16
	
	xTaskCreate(
     412:	e1 2c       	mov	r14, r1
     414:	f1 2c       	mov	r15, r1
     416:	08 2f       	mov	r16, r24
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	40 ec       	ldi	r20, 0xC0	; 192
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	61 eb       	ldi	r22, 0xB1	; 177
     422:	72 e0       	ldi	r23, 0x02	; 2
     424:	85 e2       	ldi	r24, 0x25	; 37
     426:	92 e0       	ldi	r25, 0x02	; 2
     428:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <xTaskCreate>
	,  "CO2Hand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  CO2_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     42c:	0f 91       	pop	r16
     42e:	ff 90       	pop	r15
     430:	ef 90       	pop	r14
     432:	08 95       	ret

00000434 <CO2Sensor_getCO2InUint16>:
}


uint16_t CO2Sensor_getCO2InUint16(){
	return CO2ppm;
}
     434:	80 91 bf 17 	lds	r24, 0x17BF	; 0x8017bf <CO2ppm>
     438:	90 91 c0 17 	lds	r25, 0x17C0	; 0x8017c0 <CO2ppm+0x1>
     43c:	08 95       	ret

0000043e <CO2Sensor_aFunctionToSetBits>:
void CO2Sensor_aFunctionToSetBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Set bit 0  in xEventGroup. */
  uxBits = xEventGroupSetBits(
     43e:	41 e0       	ldi	r20, 0x01	; 1
     440:	50 e0       	ldi	r21, 0x00	; 0
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	eb c1       	rjmp	.+982    	; 0x81e <xEventGroupSetBits>
     448:	08 95       	ret

0000044a <CO2Sensor_handler_task>:
	,  CO2_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void CO2Sensor_handler_task(void *pvParameters)
{
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	00 d0       	rcall	.+0      	; 0x450 <CO2Sensor_handler_task+0x6>
     450:	1f 92       	push	r1
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
	(void)pvParameters;
	mh_z19_injectCallBack(NULL);
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <mh_z19_injectCallBack>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     45e:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xTaskGetTickCount>
     462:	69 83       	std	Y+1, r22	; 0x01
     464:	7a 83       	std	Y+2, r23	; 0x02
     466:	8b 83       	std	Y+3, r24	; 0x03
     468:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     46a:	48 ea       	ldi	r20, 0xA8	; 168
     46c:	58 e4       	ldi	r21, 0x48	; 72
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	ce 01       	movw	r24, r28
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	0e 94 0c 13 	call	0x2618	; 0x2618 <xTaskDelayUntil>
		rc = mh_z19_takeMeassuring();
     47a:	0e 94 33 26 	call	0x4c66	; 0x4c66 <mh_z19_takeMeassuring>
     47e:	80 93 bd 17 	sts	0x17BD, r24	; 0x8017bd <rc>
		if (rc == MHZ19_OK)
     482:	81 11       	cpse	r24, r1
     484:	f2 cf       	rjmp	.-28     	; 0x46a <CO2Sensor_handler_task+0x20>
		{
			vTaskDelay(50);
     486:	62 e3       	ldi	r22, 0x32	; 50
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	0e 94 71 13 	call	0x26e2	; 0x26e2 <vTaskDelay>
			if(getCO2return == MHZ19_OK){
     492:	80 91 be 17 	lds	r24, 0x17BE	; 0x8017be <getCO2return>
     496:	81 11       	cpse	r24, r1
     498:	09 c0       	rjmp	.+18     	; 0x4ac <CO2Sensor_handler_task+0x62>
				getCO2return = mh_z19_getCo2Ppm(&CO2ppm);
     49a:	8f eb       	ldi	r24, 0xBF	; 191
     49c:	97 e1       	ldi	r25, 0x17	; 23
     49e:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <mh_z19_getCo2Ppm>
     4a2:	80 93 be 17 	sts	0x17BE, r24	; 0x8017be <getCO2return>
				CO2Sensor_aFunctionToSetBits(Application_getEventGroup());
     4a6:	35 df       	rcall	.-406    	; 0x312 <Application_getEventGroup>
     4a8:	ca df       	rcall	.-108    	; 0x43e <CO2Sensor_aFunctionToSetBits>
     4aa:	df cf       	rjmp	.-66     	; 0x46a <CO2Sensor_handler_task+0x20>
			}
			else if(getCO2return == MHZ19_NO_MEASSURING_AVAILABLE){
     4ac:	81 30       	cpi	r24, 0x01	; 1
     4ae:	e9 f6       	brne	.-70     	; 0x46a <CO2Sensor_handler_task+0x20>
				printf("Didn't get the measurements");
     4b0:	89 eb       	ldi	r24, 0xB9	; 185
     4b2:	92 e0       	ldi	r25, 0x02	; 2
     4b4:	9f 93       	push	r25
     4b6:	8f 93       	push	r24
     4b8:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
     4bc:	0f 90       	pop	r0
     4be:	0f 90       	pop	r0
     4c0:	d4 cf       	rjmp	.-88     	; 0x46a <CO2Sensor_handler_task+0x20>

000004c2 <configuration_create>:
	}
}

uint8_t configuration_get_humidity_data(){
	return humidity_setting;
}
     4c2:	0f 93       	push	r16
     4c4:	80 91 62 08 	lds	r24, 0x0862	; 0x800862 <__data_end>
     4c8:	90 91 63 08 	lds	r25, 0x0863	; 0x800863 <__data_end+0x1>
     4cc:	89 2b       	or	r24, r25
     4ce:	89 f4       	brne	.+34     	; 0x4f2 <configuration_create+0x30>
     4d0:	43 e0       	ldi	r20, 0x03	; 3
     4d2:	60 e0       	ldi	r22, 0x00	; 0
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	4d d6       	rcall	.+3226   	; 0x1172 <xQueueGenericCreate>
     4d8:	90 93 63 08 	sts	0x0863, r25	; 0x800863 <__data_end+0x1>
     4dc:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__data_end>
     4e0:	00 97       	sbiw	r24, 0x00	; 0
     4e2:	39 f0       	breq	.+14     	; 0x4f2 <configuration_create+0x30>
     4e4:	00 e0       	ldi	r16, 0x00	; 0
     4e6:	20 e0       	ldi	r18, 0x00	; 0
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	a9 01       	movw	r20, r18
     4ec:	60 e0       	ldi	r22, 0x00	; 0
     4ee:	70 e0       	ldi	r23, 0x00	; 0
     4f0:	63 d6       	rcall	.+3270   	; 0x11b8 <xQueueGenericSend>
     4f2:	0f 91       	pop	r16
     4f4:	08 95       	ret

000004f6 <configuration_get_windows_data>:
     4f6:	80 91 c2 17 	lds	r24, 0x17C2	; 0x8017c2 <windows_settings>
     4fa:	08 95       	ret

000004fc <configuration_set_windows_data>:
     4fc:	cf 93       	push	r28
     4fe:	c8 2f       	mov	r28, r24
     500:	1f 92       	push	r1
     502:	8f 93       	push	r24
     504:	85 ed       	ldi	r24, 0xD5	; 213
     506:	92 e0       	ldi	r25, 0x02	; 2
     508:	9f 93       	push	r25
     50a:	8f 93       	push	r24
     50c:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	c1 11       	cpse	r28, r1
     51a:	04 c0       	rjmp	.+8      	; 0x524 <configuration_set_windows_data+0x28>
     51c:	8c e9       	ldi	r24, 0x9C	; 156
     51e:	80 93 c2 17 	sts	0x17C2, r24	; 0x8017c2 <windows_settings>
     522:	03 c0       	rjmp	.+6      	; 0x52a <configuration_set_windows_data+0x2e>
     524:	84 e6       	ldi	r24, 0x64	; 100
     526:	80 93 c2 17 	sts	0x17C2, r24	; 0x8017c2 <windows_settings>
     52a:	cf 91       	pop	r28
     52c:	08 95       	ret

0000052e <configuration_set_humidity_data>:

void configuration_set_humidity_data(uint8_t value){
     52e:	cf 93       	push	r28
     530:	c8 2f       	mov	r28, r24
	printf("Setting humidity data to: %d\n",value);
     532:	1f 92       	push	r1
     534:	8f 93       	push	r24
     536:	8d ee       	ldi	r24, 0xED	; 237
     538:	92 e0       	ldi	r25, 0x02	; 2
     53a:	9f 93       	push	r25
     53c:	8f 93       	push	r24
     53e:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
	if(value == 0){
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	c1 11       	cpse	r28, r1
     54c:	04 c0       	rjmp	.+8      	; 0x556 <configuration_set_humidity_data+0x28>
		humidity_setting = -100;
     54e:	8c e9       	ldi	r24, 0x9C	; 156
     550:	80 93 c1 17 	sts	0x17C1, r24	; 0x8017c1 <humidity_setting>
     554:	03 c0       	rjmp	.+6      	; 0x55c <configuration_set_humidity_data+0x2e>
	}else{
		humidity_setting = 100;
     556:	84 e6       	ldi	r24, 0x64	; 100
     558:	80 93 c1 17 	sts	0x17C1, r24	; 0x8017c1 <humidity_setting>
	}
}
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <get_mutex>:

SemaphoreHandle_t get_mutex(){
	return _configurationSemaphore ;
     560:	80 91 62 08 	lds	r24, 0x0862	; 0x800862 <__data_end>
     564:	90 91 63 08 	lds	r25, 0x0863	; 0x800863 <__data_end+0x1>
     568:	08 95       	ret

0000056a <DownLinkHandler_lora_handler_task>:
	,  NULL );
}

void DownLinkHandler_lora_handler_task( void *pvParameters )
{
	configuration_create();
     56a:	ab df       	rcall	.-170    	; 0x4c2 <configuration_create>
	SemaphoreHandle_t semaphore_mutex = get_mutex();
     56c:	f9 df       	rcall	.-14     	; 0x560 <get_mutex>
     56e:	7c 01       	movw	r14, r24
     570:	00 e0       	ldi	r16, 0x00	; 0
	xSemaphoreGive(semaphore_mutex);
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	a9 01       	movw	r20, r18
     578:	60 e0       	ldi	r22, 0x00	; 0
     57a:	70 e0       	ldi	r23, 0x00	; 0
     57c:	1d d6       	rcall	.+3130   	; 0x11b8 <xQueueGenericSend>
     57e:	8b e0       	ldi	r24, 0x0B	; 11
	
	for(;;)
	{
		printf("start LoraDownlink Task\n");
     580:	93 e0       	ldi	r25, 0x03	; 3
     582:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <puts>
     586:	83 e0       	ldi	r24, 0x03	; 3
		status_leds_shortPuls(led_ST4);  // OPTIONAL
     588:	0e 94 2a 2c 	call	0x5854	; 0x5854 <status_leds_shortPuls>
     58c:	0f ef       	ldi	r16, 0xFF	; 255
		xMessageBufferReceive(_downLinkMessageBufferHandle, &_downlink_payload, sizeof(lora_driver_payload_t), portMAX_DELAY);
     58e:	1f ef       	ldi	r17, 0xFF	; 255
     590:	98 01       	movw	r18, r16
     592:	46 e1       	ldi	r20, 0x16	; 22
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	66 e6       	ldi	r22, 0x66	; 102
     598:	78 e0       	ldi	r23, 0x08	; 8
     59a:	80 91 c3 17 	lds	r24, 0x17C3	; 0x8017c3 <_downLinkMessageBufferHandle>
     59e:	90 91 c4 17 	lds	r25, 0x17C4	; 0x8017c4 <_downLinkMessageBufferHandle+0x1>
     5a2:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <xStreamBufferReceive>
     5a6:	c6 e6       	ldi	r28, 0x66	; 102
		printf("DOWN LINK: from port: %d with %d bytes received!\n", _downlink_payload.portNo, _downlink_payload.len); // Just for Debug
     5a8:	d8 e0       	ldi	r29, 0x08	; 8
     5aa:	99 81       	ldd	r25, Y+1	; 0x01
     5ac:	88 81       	ld	r24, Y
     5ae:	1f 92       	push	r1
     5b0:	9f 93       	push	r25
     5b2:	1f 92       	push	r1
     5b4:	8f 93       	push	r24
     5b6:	83 e2       	ldi	r24, 0x23	; 35
     5b8:	93 e0       	ldi	r25, 0x03	; 3
     5ba:	9f 93       	push	r25
     5bc:	8f 93       	push	r24
     5be:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
     5c2:	89 81       	ldd	r24, Y+1	; 0x01
		if (4 == _downlink_payload.len) // Check that we have got the expected 4 bytes
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	84 30       	cpi	r24, 0x04	; 4
     5d2:	a9 f6       	brne	.-86     	; 0x57e <DownLinkHandler_lora_handler_task+0x14>
     5d4:	8c 81       	ldd	r24, Y+4	; 0x04
		{
			// decode the payload into our variables
			humDataSetting  = (_downlink_payload.bytes[2]);
     5d6:	80 93 64 08 	sts	0x0864, r24	; 0x800864 <humDataSetting>
     5da:	8d 81       	ldd	r24, Y+5	; 0x05
			windowDataSetting = (_downlink_payload.bytes[3]);	
     5dc:	80 93 65 08 	sts	0x0865, r24	; 0x800865 <windowDataSetting>
     5e0:	4f ef       	ldi	r20, 0xFF	; 255
			for(;;){
				if(xSemaphoreTake(semaphore_mutex, portMAX_DELAY)){
     5e2:	5f ef       	ldi	r21, 0xFF	; 255
     5e4:	ba 01       	movw	r22, r20
     5e6:	c7 01       	movw	r24, r14
     5e8:	61 d7       	rcall	.+3778   	; 0x14ac <xQueueSemaphoreTake>
     5ea:	88 23       	and	r24, r24
     5ec:	c9 f3       	breq	.-14     	; 0x5e0 <DownLinkHandler_lora_handler_task+0x76>
					configuration_set_windows_data(windowDataSetting);
     5ee:	80 91 65 08 	lds	r24, 0x0865	; 0x800865 <windowDataSetting>
     5f2:	84 df       	rcall	.-248    	; 0x4fc <configuration_set_windows_data>
					configuration_set_humidity_data(humDataSetting);
     5f4:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <humDataSetting>
     5f8:	9a df       	rcall	.-204    	; 0x52e <configuration_set_humidity_data>
     5fa:	00 e0       	ldi	r16, 0x00	; 0
					xSemaphoreGive(semaphore_mutex);
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	a9 01       	movw	r20, r18
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	c7 01       	movw	r24, r14
     608:	d7 d5       	rcall	.+2990   	; 0x11b8 <xQueueGenericSend>
     60a:	b9 cf       	rjmp	.-142    	; 0x57e <DownLinkHandler_lora_handler_task+0x14>

0000060c <DownLinkHandler_lora_handler_initialise>:
					break;
     60c:	ef 92       	push	r14
MessageBufferHandle_t _downLinkMessageBufferHandle;



void DownLinkHandler_lora_handler_initialise(UBaseType_t DownLinkHandler_lora_handler_task_priority, MessageBufferHandle_t downLinkMessageBufferHandle)
{
     60e:	ff 92       	push	r15
     610:	0f 93       	push	r16
	_downLinkMessageBufferHandle = downLinkMessageBufferHandle;
     612:	70 93 c4 17 	sts	0x17C4, r23	; 0x8017c4 <_downLinkMessageBufferHandle+0x1>
     616:	60 93 c3 17 	sts	0x17C3, r22	; 0x8017c3 <_downLinkMessageBufferHandle>
	xTaskCreate(
     61a:	e1 2c       	mov	r14, r1
     61c:	f1 2c       	mov	r15, r1
     61e:	08 2f       	mov	r16, r24
     620:	20 e0       	ldi	r18, 0x00	; 0
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	48 e8       	ldi	r20, 0x88	; 136
     626:	51 e0       	ldi	r21, 0x01	; 1
     628:	65 e5       	ldi	r22, 0x55	; 85
     62a:	73 e0       	ldi	r23, 0x03	; 3
     62c:	85 eb       	ldi	r24, 0xB5	; 181
     62e:	92 e0       	ldi	r25, 0x02	; 2
     630:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <xTaskCreate>
	,  "DownLinkHandler"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  DownLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     634:	0f 91       	pop	r16
     636:	ff 90       	pop	r15
     638:	ef 90       	pop	r14
     63a:	08 95       	ret

0000063c <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     63c:	0f 93       	push	r16
     63e:	01 11       	cpse	r16, r1
     640:	0c c0       	rjmp	.+24     	; 0x65a <prvTestWaitCondition+0x1e>
     642:	dc 01       	movw	r26, r24
     644:	cb 01       	movw	r24, r22
     646:	82 23       	and	r24, r18
     648:	93 23       	and	r25, r19
     64a:	a4 23       	and	r26, r20
     64c:	b5 23       	and	r27, r21
     64e:	89 2b       	or	r24, r25
     650:	8a 2b       	or	r24, r26
     652:	8b 2b       	or	r24, r27
     654:	79 f4       	brne	.+30     	; 0x674 <prvTestWaitCondition+0x38>
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	10 c0       	rjmp	.+32     	; 0x67a <prvTestWaitCondition+0x3e>
     65a:	dc 01       	movw	r26, r24
     65c:	cb 01       	movw	r24, r22
     65e:	82 23       	and	r24, r18
     660:	93 23       	and	r25, r19
     662:	a4 23       	and	r26, r20
     664:	b5 23       	and	r27, r21
     666:	28 17       	cp	r18, r24
     668:	39 07       	cpc	r19, r25
     66a:	4a 07       	cpc	r20, r26
     66c:	5b 07       	cpc	r21, r27
     66e:	21 f0       	breq	.+8      	; 0x678 <prvTestWaitCondition+0x3c>
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	03 c0       	rjmp	.+6      	; 0x67a <prvTestWaitCondition+0x3e>
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	01 c0       	rjmp	.+2      	; 0x67a <prvTestWaitCondition+0x3e>
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	0f 91       	pop	r16
     67c:	08 95       	ret

0000067e <xEventGroupCreate>:
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	8f e0       	ldi	r24, 0x0F	; 15
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	cc d1       	rcall	.+920    	; 0xa20 <pvPortMalloc>
     688:	ec 01       	movw	r28, r24
     68a:	00 97       	sbiw	r24, 0x00	; 0
     68c:	39 f0       	breq	.+14     	; 0x69c <xEventGroupCreate+0x1e>
     68e:	fc 01       	movw	r30, r24
     690:	11 92       	st	Z+, r1
     692:	11 92       	st	Z+, r1
     694:	11 92       	st	Z+, r1
     696:	11 92       	st	Z+, r1
     698:	cf 01       	movw	r24, r30
     69a:	a8 d2       	rcall	.+1360   	; 0xbec <vListInitialise>
     69c:	ce 01       	movw	r24, r28
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	08 95       	ret

000006a4 <xEventGroupWaitBits>:
     6a4:	2f 92       	push	r2
     6a6:	3f 92       	push	r3
     6a8:	4f 92       	push	r4
     6aa:	5f 92       	push	r5
     6ac:	6f 92       	push	r6
     6ae:	7f 92       	push	r7
     6b0:	8f 92       	push	r8
     6b2:	9f 92       	push	r9
     6b4:	af 92       	push	r10
     6b6:	bf 92       	push	r11
     6b8:	cf 92       	push	r12
     6ba:	df 92       	push	r13
     6bc:	ef 92       	push	r14
     6be:	ff 92       	push	r15
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	ec 01       	movw	r28, r24
     6ca:	4a 01       	movw	r8, r20
     6cc:	5b 01       	movw	r10, r22
     6ce:	62 2e       	mov	r6, r18
     6d0:	70 2e       	mov	r7, r16
     6d2:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <vTaskSuspendAll>
     6d6:	28 80       	ld	r2, Y
     6d8:	39 80       	ldd	r3, Y+1	; 0x01
     6da:	4a 80       	ldd	r4, Y+2	; 0x02
     6dc:	5b 80       	ldd	r5, Y+3	; 0x03
     6de:	a5 01       	movw	r20, r10
     6e0:	94 01       	movw	r18, r8
     6e2:	c2 01       	movw	r24, r4
     6e4:	b1 01       	movw	r22, r2
     6e6:	aa df       	rcall	.-172    	; 0x63c <prvTestWaitCondition>
     6e8:	88 23       	and	r24, r24
     6ea:	a1 f0       	breq	.+40     	; 0x714 <xEventGroupWaitBits+0x70>
     6ec:	66 20       	and	r6, r6
     6ee:	89 f1       	breq	.+98     	; 0x752 <xEventGroupWaitBits+0xae>
     6f0:	d5 01       	movw	r26, r10
     6f2:	c4 01       	movw	r24, r8
     6f4:	80 95       	com	r24
     6f6:	90 95       	com	r25
     6f8:	a0 95       	com	r26
     6fa:	b0 95       	com	r27
     6fc:	82 21       	and	r24, r2
     6fe:	93 21       	and	r25, r3
     700:	a4 21       	and	r26, r4
     702:	b5 21       	and	r27, r5
     704:	88 83       	st	Y, r24
     706:	99 83       	std	Y+1, r25	; 0x01
     708:	aa 83       	std	Y+2, r26	; 0x02
     70a:	bb 83       	std	Y+3, r27	; 0x03
     70c:	c1 2c       	mov	r12, r1
     70e:	d1 2c       	mov	r13, r1
     710:	76 01       	movw	r14, r12
     712:	22 c0       	rjmp	.+68     	; 0x758 <xEventGroupWaitBits+0xb4>
     714:	c1 14       	cp	r12, r1
     716:	d1 04       	cpc	r13, r1
     718:	e1 04       	cpc	r14, r1
     71a:	f1 04       	cpc	r15, r1
     71c:	e9 f0       	breq	.+58     	; 0x758 <xEventGroupWaitBits+0xb4>
     71e:	61 10       	cpse	r6, r1
     720:	04 c0       	rjmp	.+8      	; 0x72a <xEventGroupWaitBits+0x86>
     722:	40 e0       	ldi	r20, 0x00	; 0
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	ba 01       	movw	r22, r20
     728:	04 c0       	rjmp	.+8      	; 0x732 <xEventGroupWaitBits+0x8e>
     72a:	40 e0       	ldi	r20, 0x00	; 0
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	71 e0       	ldi	r23, 0x01	; 1
     732:	71 10       	cpse	r7, r1
     734:	74 60       	ori	r23, 0x04	; 4
     736:	48 29       	or	r20, r8
     738:	59 29       	or	r21, r9
     73a:	6a 29       	or	r22, r10
     73c:	7b 29       	or	r23, r11
     73e:	97 01       	movw	r18, r14
     740:	86 01       	movw	r16, r12
     742:	ce 01       	movw	r24, r28
     744:	04 96       	adiw	r24, 0x04	; 4
     746:	0e 94 08 14 	call	0x2810	; 0x2810 <vTaskPlaceOnUnorderedEventList>
     74a:	21 2c       	mov	r2, r1
     74c:	31 2c       	mov	r3, r1
     74e:	21 01       	movw	r4, r2
     750:	03 c0       	rjmp	.+6      	; 0x758 <xEventGroupWaitBits+0xb4>
     752:	c1 2c       	mov	r12, r1
     754:	d1 2c       	mov	r13, r1
     756:	76 01       	movw	r14, r12
     758:	0e 94 30 12 	call	0x2460	; 0x2460 <xTaskResumeAll>
     75c:	cd 28       	or	r12, r13
     75e:	ce 28       	or	r12, r14
     760:	cf 28       	or	r12, r15
     762:	59 f1       	breq	.+86     	; 0x7ba <xEventGroupWaitBits+0x116>
     764:	81 11       	cpse	r24, r1
     766:	01 c0       	rjmp	.+2      	; 0x76a <xEventGroupWaitBits+0xc6>
     768:	0f d3       	rcall	.+1566   	; 0xd88 <vPortYield>
     76a:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <uxTaskResetEventItemValue>
     76e:	6b 01       	movw	r12, r22
     770:	7c 01       	movw	r14, r24
     772:	91 fd       	sbrc	r25, 1
     774:	1f c0       	rjmp	.+62     	; 0x7b4 <xEventGroupWaitBits+0x110>
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	f8 94       	cli
     77a:	0f 92       	push	r0
     77c:	c8 80       	ld	r12, Y
     77e:	d9 80       	ldd	r13, Y+1	; 0x01
     780:	ea 80       	ldd	r14, Y+2	; 0x02
     782:	fb 80       	ldd	r15, Y+3	; 0x03
     784:	07 2d       	mov	r16, r7
     786:	a5 01       	movw	r20, r10
     788:	94 01       	movw	r18, r8
     78a:	c7 01       	movw	r24, r14
     78c:	b6 01       	movw	r22, r12
     78e:	56 df       	rcall	.-340    	; 0x63c <prvTestWaitCondition>
     790:	88 23       	and	r24, r24
     792:	71 f0       	breq	.+28     	; 0x7b0 <xEventGroupWaitBits+0x10c>
     794:	66 20       	and	r6, r6
     796:	61 f0       	breq	.+24     	; 0x7b0 <xEventGroupWaitBits+0x10c>
     798:	80 94       	com	r8
     79a:	90 94       	com	r9
     79c:	a0 94       	com	r10
     79e:	b0 94       	com	r11
     7a0:	8c 20       	and	r8, r12
     7a2:	9d 20       	and	r9, r13
     7a4:	ae 20       	and	r10, r14
     7a6:	bf 20       	and	r11, r15
     7a8:	88 82       	st	Y, r8
     7aa:	99 82       	std	Y+1, r9	; 0x01
     7ac:	aa 82       	std	Y+2, r10	; 0x02
     7ae:	bb 82       	std	Y+3, r11	; 0x03
     7b0:	0f 90       	pop	r0
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	16 01       	movw	r2, r12
     7b6:	27 01       	movw	r4, r14
     7b8:	55 24       	eor	r5, r5
     7ba:	c2 01       	movw	r24, r4
     7bc:	b1 01       	movw	r22, r2
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	1f 91       	pop	r17
     7c4:	0f 91       	pop	r16
     7c6:	ff 90       	pop	r15
     7c8:	ef 90       	pop	r14
     7ca:	df 90       	pop	r13
     7cc:	cf 90       	pop	r12
     7ce:	bf 90       	pop	r11
     7d0:	af 90       	pop	r10
     7d2:	9f 90       	pop	r9
     7d4:	8f 90       	pop	r8
     7d6:	7f 90       	pop	r7
     7d8:	6f 90       	pop	r6
     7da:	5f 90       	pop	r5
     7dc:	4f 90       	pop	r4
     7de:	3f 90       	pop	r3
     7e0:	2f 90       	pop	r2
     7e2:	08 95       	ret

000007e4 <xEventGroupClearBits>:
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	f8 94       	cli
     7ec:	0f 92       	push	r0
     7ee:	fc 01       	movw	r30, r24
     7f0:	00 81       	ld	r16, Z
     7f2:	11 81       	ldd	r17, Z+1	; 0x01
     7f4:	22 81       	ldd	r18, Z+2	; 0x02
     7f6:	33 81       	ldd	r19, Z+3	; 0x03
     7f8:	40 95       	com	r20
     7fa:	50 95       	com	r21
     7fc:	60 95       	com	r22
     7fe:	70 95       	com	r23
     800:	40 23       	and	r20, r16
     802:	51 23       	and	r21, r17
     804:	62 23       	and	r22, r18
     806:	73 23       	and	r23, r19
     808:	40 83       	st	Z, r20
     80a:	51 83       	std	Z+1, r21	; 0x01
     80c:	62 83       	std	Z+2, r22	; 0x02
     80e:	73 83       	std	Z+3, r23	; 0x03
     810:	0f 90       	pop	r0
     812:	0f be       	out	0x3f, r0	; 63
     814:	c9 01       	movw	r24, r18
     816:	b8 01       	movw	r22, r16
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	08 95       	ret

0000081e <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     81e:	4f 92       	push	r4
     820:	5f 92       	push	r5
     822:	6f 92       	push	r6
     824:	7f 92       	push	r7
     826:	af 92       	push	r10
     828:	bf 92       	push	r11
     82a:	cf 92       	push	r12
     82c:	df 92       	push	r13
     82e:	ef 92       	push	r14
     830:	ff 92       	push	r15
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	ec 01       	movw	r28, r24
     83c:	6a 01       	movw	r12, r20
     83e:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     840:	8c 01       	movw	r16, r24
     842:	09 5f       	subi	r16, 0xF9	; 249
     844:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     846:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     84a:	eb 85       	ldd	r30, Y+11	; 0x0b
     84c:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     84e:	88 81       	ld	r24, Y
     850:	99 81       	ldd	r25, Y+1	; 0x01
     852:	aa 81       	ldd	r26, Y+2	; 0x02
     854:	bb 81       	ldd	r27, Y+3	; 0x03
     856:	c8 2a       	or	r12, r24
     858:	d9 2a       	or	r13, r25
     85a:	ea 2a       	or	r14, r26
     85c:	fb 2a       	or	r15, r27
     85e:	c8 82       	st	Y, r12
     860:	d9 82       	std	Y+1, r13	; 0x01
     862:	ea 82       	std	Y+2, r14	; 0x02
     864:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     866:	c1 2c       	mov	r12, r1
     868:	d1 2c       	mov	r13, r1
     86a:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     86c:	3d c0       	rjmp	.+122    	; 0x8e8 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     86e:	a4 80       	ldd	r10, Z+4	; 0x04
     870:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     872:	80 81       	ld	r24, Z
     874:	91 81       	ldd	r25, Z+1	; 0x01
     876:	a2 81       	ldd	r26, Z+2	; 0x02
     878:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     87a:	ac 01       	movw	r20, r24
     87c:	bd 01       	movw	r22, r26
     87e:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     880:	b2 fd       	sbrc	r27, 2
     882:	0e c0       	rjmp	.+28     	; 0x8a0 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     884:	48 80       	ld	r4, Y
     886:	59 80       	ldd	r5, Y+1	; 0x01
     888:	6a 80       	ldd	r6, Y+2	; 0x02
     88a:	7b 80       	ldd	r7, Y+3	; 0x03
     88c:	44 22       	and	r4, r20
     88e:	55 22       	and	r5, r21
     890:	66 22       	and	r6, r22
     892:	77 22       	and	r7, r23
     894:	45 28       	or	r4, r5
     896:	46 28       	or	r4, r6
     898:	47 28       	or	r4, r7
     89a:	89 f4       	brne	.+34     	; 0x8be <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     89c:	20 e0       	ldi	r18, 0x00	; 0
     89e:	12 c0       	rjmp	.+36     	; 0x8c4 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     8a0:	48 80       	ld	r4, Y
     8a2:	59 80       	ldd	r5, Y+1	; 0x01
     8a4:	6a 80       	ldd	r6, Y+2	; 0x02
     8a6:	7b 80       	ldd	r7, Y+3	; 0x03
     8a8:	44 22       	and	r4, r20
     8aa:	55 22       	and	r5, r21
     8ac:	66 22       	and	r6, r22
     8ae:	77 22       	and	r7, r23
     8b0:	44 15       	cp	r20, r4
     8b2:	55 05       	cpc	r21, r5
     8b4:	66 05       	cpc	r22, r6
     8b6:	77 05       	cpc	r23, r7
     8b8:	21 f0       	breq	.+8      	; 0x8c2 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     8be:	21 e0       	ldi	r18, 0x01	; 1
     8c0:	01 c0       	rjmp	.+2      	; 0x8c4 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     8c2:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     8c4:	22 23       	and	r18, r18
     8c6:	71 f0       	breq	.+28     	; 0x8e4 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     8c8:	b0 ff       	sbrs	r27, 0
     8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     8cc:	c4 2a       	or	r12, r20
     8ce:	d5 2a       	or	r13, r21
     8d0:	e6 2a       	or	r14, r22
     8d2:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     8d4:	48 81       	ld	r20, Y
     8d6:	59 81       	ldd	r21, Y+1	; 0x01
     8d8:	6a 81       	ldd	r22, Y+2	; 0x02
     8da:	7b 81       	ldd	r23, Y+3	; 0x03
     8dc:	72 60       	ori	r23, 0x02	; 2
     8de:	cf 01       	movw	r24, r30
     8e0:	0e 94 43 15 	call	0x2a86	; 0x2a86 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     8e4:	ea 2d       	mov	r30, r10
     8e6:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     8e8:	e0 17       	cp	r30, r16
     8ea:	f1 07       	cpc	r31, r17
     8ec:	09 f0       	breq	.+2      	; 0x8f0 <xEventGroupSetBits+0xd2>
     8ee:	bf cf       	rjmp	.-130    	; 0x86e <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     8f0:	c0 94       	com	r12
     8f2:	d0 94       	com	r13
     8f4:	e0 94       	com	r14
     8f6:	f0 94       	com	r15
     8f8:	88 81       	ld	r24, Y
     8fa:	99 81       	ldd	r25, Y+1	; 0x01
     8fc:	aa 81       	ldd	r26, Y+2	; 0x02
     8fe:	bb 81       	ldd	r27, Y+3	; 0x03
     900:	c8 22       	and	r12, r24
     902:	d9 22       	and	r13, r25
     904:	ea 22       	and	r14, r26
     906:	fb 22       	and	r15, r27
     908:	c8 82       	st	Y, r12
     90a:	d9 82       	std	Y+1, r13	; 0x01
     90c:	ea 82       	std	Y+2, r14	; 0x02
     90e:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     910:	0e 94 30 12 	call	0x2460	; 0x2460 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     914:	68 81       	ld	r22, Y
     916:	79 81       	ldd	r23, Y+1	; 0x01
     918:	8a 81       	ldd	r24, Y+2	; 0x02
     91a:	9b 81       	ldd	r25, Y+3	; 0x03
}
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	1f 91       	pop	r17
     922:	0f 91       	pop	r16
     924:	ff 90       	pop	r15
     926:	ef 90       	pop	r14
     928:	df 90       	pop	r13
     92a:	cf 90       	pop	r12
     92c:	bf 90       	pop	r11
     92e:	af 90       	pop	r10
     930:	7f 90       	pop	r7
     932:	6f 90       	pop	r6
     934:	5f 90       	pop	r5
     936:	4f 90       	pop	r4
     938:	08 95       	ret

0000093a <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     93a:	e8 e8       	ldi	r30, 0x88	; 136
     93c:	f8 e0       	ldi	r31, 0x08	; 8
     93e:	ac e8       	ldi	r26, 0x8C	; 140
     940:	b8 e0       	ldi	r27, 0x08	; 8
     942:	b1 83       	std	Z+1, r27	; 0x01
     944:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     946:	13 82       	std	Z+3, r1	; 0x03
     948:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     94a:	e8 e0       	ldi	r30, 0x08	; 8
     94c:	f5 e1       	ldi	r31, 0x15	; 21
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     94e:	f0 93 87 08 	sts	0x0887, r31	; 0x800887 <pxEnd+0x1>
     952:	e0 93 86 08 	sts	0x0886, r30	; 0x800886 <pxEnd>
    pxEnd->xBlockSize = 0;
     956:	13 82       	std	Z+3, r1	; 0x03
     958:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     95a:	11 82       	std	Z+1, r1	; 0x01
     95c:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     95e:	8c e7       	ldi	r24, 0x7C	; 124
     960:	9c e0       	ldi	r25, 0x0C	; 12
     962:	13 96       	adiw	r26, 0x03	; 3
     964:	9c 93       	st	X, r25
     966:	8e 93       	st	-X, r24
     968:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     96a:	ed 93       	st	X+, r30
     96c:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     96e:	90 93 83 08 	sts	0x0883, r25	; 0x800883 <xMinimumEverFreeBytesRemaining+0x1>
     972:	80 93 82 08 	sts	0x0882, r24	; 0x800882 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     976:	90 93 85 08 	sts	0x0885, r25	; 0x800885 <xFreeBytesRemaining+0x1>
     97a:	80 93 84 08 	sts	0x0884, r24	; 0x800884 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	90 e8       	ldi	r25, 0x80	; 128
     982:	90 93 7d 08 	sts	0x087D, r25	; 0x80087d <xBlockAllocatedBit+0x1>
     986:	80 93 7c 08 	sts	0x087C, r24	; 0x80087c <xBlockAllocatedBit>
     98a:	08 95       	ret

0000098c <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     992:	a8 e8       	ldi	r26, 0x88	; 136
     994:	b8 e0       	ldi	r27, 0x08	; 8
     996:	01 c0       	rjmp	.+2      	; 0x99a <prvInsertBlockIntoFreeList+0xe>
     998:	df 01       	movw	r26, r30
     99a:	ed 91       	ld	r30, X+
     99c:	fc 91       	ld	r31, X
     99e:	11 97       	sbiw	r26, 0x01	; 1
     9a0:	ec 17       	cp	r30, r28
     9a2:	fd 07       	cpc	r31, r29
     9a4:	c8 f3       	brcs	.-14     	; 0x998 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     9a6:	12 96       	adiw	r26, 0x02	; 2
     9a8:	8d 91       	ld	r24, X+
     9aa:	9c 91       	ld	r25, X
     9ac:	13 97       	sbiw	r26, 0x03	; 3
     9ae:	9d 01       	movw	r18, r26
     9b0:	28 0f       	add	r18, r24
     9b2:	39 1f       	adc	r19, r25
     9b4:	c2 17       	cp	r28, r18
     9b6:	d3 07       	cpc	r29, r19
     9b8:	49 f4       	brne	.+18     	; 0x9cc <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     9ba:	2a 81       	ldd	r18, Y+2	; 0x02
     9bc:	3b 81       	ldd	r19, Y+3	; 0x03
     9be:	82 0f       	add	r24, r18
     9c0:	93 1f       	adc	r25, r19
     9c2:	13 96       	adiw	r26, 0x03	; 3
     9c4:	9c 93       	st	X, r25
     9c6:	8e 93       	st	-X, r24
     9c8:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     9ca:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     9cc:	8a 81       	ldd	r24, Y+2	; 0x02
     9ce:	9b 81       	ldd	r25, Y+3	; 0x03
     9d0:	9e 01       	movw	r18, r28
     9d2:	28 0f       	add	r18, r24
     9d4:	39 1f       	adc	r19, r25
     9d6:	e2 17       	cp	r30, r18
     9d8:	f3 07       	cpc	r31, r19
     9da:	c1 f4       	brne	.+48     	; 0xa0c <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     9dc:	20 91 86 08 	lds	r18, 0x0886	; 0x800886 <pxEnd>
     9e0:	30 91 87 08 	lds	r19, 0x0887	; 0x800887 <pxEnd+0x1>
     9e4:	e2 17       	cp	r30, r18
     9e6:	f3 07       	cpc	r31, r19
     9e8:	71 f0       	breq	.+28     	; 0xa06 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     9ea:	22 81       	ldd	r18, Z+2	; 0x02
     9ec:	33 81       	ldd	r19, Z+3	; 0x03
     9ee:	82 0f       	add	r24, r18
     9f0:	93 1f       	adc	r25, r19
     9f2:	9b 83       	std	Y+3, r25	; 0x03
     9f4:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     9f6:	ed 91       	ld	r30, X+
     9f8:	fc 91       	ld	r31, X
     9fa:	11 97       	sbiw	r26, 0x01	; 1
     9fc:	80 81       	ld	r24, Z
     9fe:	91 81       	ldd	r25, Z+1	; 0x01
     a00:	99 83       	std	Y+1, r25	; 0x01
     a02:	88 83       	st	Y, r24
     a04:	05 c0       	rjmp	.+10     	; 0xa10 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     a06:	39 83       	std	Y+1, r19	; 0x01
     a08:	28 83       	st	Y, r18
     a0a:	02 c0       	rjmp	.+4      	; 0xa10 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     a0c:	f9 83       	std	Y+1, r31	; 0x01
     a0e:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     a10:	ca 17       	cp	r28, r26
     a12:	db 07       	cpc	r29, r27
     a14:	11 f0       	breq	.+4      	; 0xa1a <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     a16:	cd 93       	st	X+, r28
     a18:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	08 95       	ret

00000a20 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     a20:	ef 92       	push	r14
     a22:	ff 92       	push	r15
     a24:	0f 93       	push	r16
     a26:	1f 93       	push	r17
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     a2e:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     a32:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <pxEnd>
     a36:	90 91 87 08 	lds	r25, 0x0887	; 0x800887 <pxEnd+0x1>
     a3a:	89 2b       	or	r24, r25
     a3c:	09 f4       	brne	.+2      	; 0xa40 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     a3e:	7d df       	rcall	.-262    	; 0x93a <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     a40:	80 91 7c 08 	lds	r24, 0x087C	; 0x80087c <xBlockAllocatedBit>
     a44:	90 91 7d 08 	lds	r25, 0x087D	; 0x80087d <xBlockAllocatedBit+0x1>
     a48:	80 23       	and	r24, r16
     a4a:	91 23       	and	r25, r17
     a4c:	89 2b       	or	r24, r25
     a4e:	09 f0       	breq	.+2      	; 0xa52 <pvPortMalloc+0x32>
     a50:	76 c0       	rjmp	.+236    	; 0xb3e <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     a52:	01 15       	cp	r16, r1
     a54:	11 05       	cpc	r17, r1
     a56:	49 f0       	breq	.+18     	; 0xa6a <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     a58:	c8 01       	movw	r24, r16
     a5a:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     a5c:	08 17       	cp	r16, r24
     a5e:	19 07       	cpc	r17, r25
     a60:	18 f0       	brcs	.+6      	; 0xa68 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     a62:	00 e0       	ldi	r16, 0x00	; 0
     a64:	10 e0       	ldi	r17, 0x00	; 0
     a66:	01 c0       	rjmp	.+2      	; 0xa6a <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     a68:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     a6a:	01 15       	cp	r16, r1
     a6c:	11 05       	cpc	r17, r1
     a6e:	09 f4       	brne	.+2      	; 0xa72 <pvPortMalloc+0x52>
     a70:	69 c0       	rjmp	.+210    	; 0xb44 <pvPortMalloc+0x124>
     a72:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <xFreeBytesRemaining>
     a76:	90 91 85 08 	lds	r25, 0x0885	; 0x800885 <xFreeBytesRemaining+0x1>
     a7a:	80 17       	cp	r24, r16
     a7c:	91 07       	cpc	r25, r17
     a7e:	08 f4       	brcc	.+2      	; 0xa82 <pvPortMalloc+0x62>
     a80:	64 c0       	rjmp	.+200    	; 0xb4a <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     a82:	c0 91 88 08 	lds	r28, 0x0888	; 0x800888 <xStart>
     a86:	d0 91 89 08 	lds	r29, 0x0889	; 0x800889 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     a8a:	e8 e8       	ldi	r30, 0x88	; 136
     a8c:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     a90:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     a92:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a94:	8a 81       	ldd	r24, Y+2	; 0x02
     a96:	9b 81       	ldd	r25, Y+3	; 0x03
     a98:	80 17       	cp	r24, r16
     a9a:	91 07       	cpc	r25, r17
     a9c:	20 f4       	brcc	.+8      	; 0xaa6 <pvPortMalloc+0x86>
     a9e:	88 81       	ld	r24, Y
     aa0:	99 81       	ldd	r25, Y+1	; 0x01
     aa2:	00 97       	sbiw	r24, 0x00	; 0
     aa4:	a9 f7       	brne	.-22     	; 0xa90 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     aa6:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <pxEnd>
     aaa:	90 91 87 08 	lds	r25, 0x0887	; 0x800887 <pxEnd+0x1>
     aae:	c8 17       	cp	r28, r24
     ab0:	d9 07       	cpc	r29, r25
     ab2:	09 f4       	brne	.+2      	; 0xab6 <pvPortMalloc+0x96>
     ab4:	4d c0       	rjmp	.+154    	; 0xb50 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     ab6:	e0 80       	ld	r14, Z
     ab8:	f1 80       	ldd	r15, Z+1	; 0x01
     aba:	84 e0       	ldi	r24, 0x04	; 4
     abc:	e8 0e       	add	r14, r24
     abe:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     ac0:	88 81       	ld	r24, Y
     ac2:	99 81       	ldd	r25, Y+1	; 0x01
     ac4:	91 83       	std	Z+1, r25	; 0x01
     ac6:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     ac8:	2a 81       	ldd	r18, Y+2	; 0x02
     aca:	3b 81       	ldd	r19, Y+3	; 0x03
     acc:	20 1b       	sub	r18, r16
     ace:	31 0b       	sbc	r19, r17
     ad0:	29 30       	cpi	r18, 0x09	; 9
     ad2:	31 05       	cpc	r19, r1
     ad4:	48 f0       	brcs	.+18     	; 0xae8 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     ad6:	ce 01       	movw	r24, r28
     ad8:	80 0f       	add	r24, r16
     ada:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     adc:	fc 01       	movw	r30, r24
     ade:	33 83       	std	Z+3, r19	; 0x03
     ae0:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     ae2:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     ae4:	0a 83       	std	Y+2, r16	; 0x02
     ae6:	52 df       	rcall	.-348    	; 0x98c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     ae8:	2a 81       	ldd	r18, Y+2	; 0x02
     aea:	3b 81       	ldd	r19, Y+3	; 0x03
     aec:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <xFreeBytesRemaining>
     af0:	90 91 85 08 	lds	r25, 0x0885	; 0x800885 <xFreeBytesRemaining+0x1>
     af4:	82 1b       	sub	r24, r18
     af6:	93 0b       	sbc	r25, r19
     af8:	90 93 85 08 	sts	0x0885, r25	; 0x800885 <xFreeBytesRemaining+0x1>
     afc:	80 93 84 08 	sts	0x0884, r24	; 0x800884 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     b00:	40 91 82 08 	lds	r20, 0x0882	; 0x800882 <xMinimumEverFreeBytesRemaining>
     b04:	50 91 83 08 	lds	r21, 0x0883	; 0x800883 <xMinimumEverFreeBytesRemaining+0x1>
     b08:	84 17       	cp	r24, r20
     b0a:	95 07       	cpc	r25, r21
     b0c:	20 f4       	brcc	.+8      	; 0xb16 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     b0e:	90 93 83 08 	sts	0x0883, r25	; 0x800883 <xMinimumEverFreeBytesRemaining+0x1>
     b12:	80 93 82 08 	sts	0x0882, r24	; 0x800882 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     b16:	80 91 7c 08 	lds	r24, 0x087C	; 0x80087c <xBlockAllocatedBit>
     b1a:	90 91 7d 08 	lds	r25, 0x087D	; 0x80087d <xBlockAllocatedBit+0x1>
     b1e:	28 2b       	or	r18, r24
     b20:	39 2b       	or	r19, r25
     b22:	3b 83       	std	Y+3, r19	; 0x03
     b24:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     b26:	19 82       	std	Y+1, r1	; 0x01
     b28:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     b2a:	80 91 80 08 	lds	r24, 0x0880	; 0x800880 <xNumberOfSuccessfulAllocations>
     b2e:	90 91 81 08 	lds	r25, 0x0881	; 0x800881 <xNumberOfSuccessfulAllocations+0x1>
     b32:	01 96       	adiw	r24, 0x01	; 1
     b34:	90 93 81 08 	sts	0x0881, r25	; 0x800881 <xNumberOfSuccessfulAllocations+0x1>
     b38:	80 93 80 08 	sts	0x0880, r24	; 0x800880 <xNumberOfSuccessfulAllocations>
     b3c:	0b c0       	rjmp	.+22     	; 0xb54 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     b3e:	e1 2c       	mov	r14, r1
     b40:	f1 2c       	mov	r15, r1
     b42:	08 c0       	rjmp	.+16     	; 0xb54 <pvPortMalloc+0x134>
     b44:	e1 2c       	mov	r14, r1
     b46:	f1 2c       	mov	r15, r1
     b48:	05 c0       	rjmp	.+10     	; 0xb54 <pvPortMalloc+0x134>
     b4a:	e1 2c       	mov	r14, r1
     b4c:	f1 2c       	mov	r15, r1
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <pvPortMalloc+0x134>
     b50:	e1 2c       	mov	r14, r1
     b52:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     b54:	0e 94 30 12 	call	0x2460	; 0x2460 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     b58:	e1 14       	cp	r14, r1
     b5a:	f1 04       	cpc	r15, r1
     b5c:	11 f4       	brne	.+4      	; 0xb62 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     b5e:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     b62:	c7 01       	movw	r24, r14
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	1f 91       	pop	r17
     b6a:	0f 91       	pop	r16
     b6c:	ff 90       	pop	r15
     b6e:	ef 90       	pop	r14
     b70:	08 95       	ret

00000b72 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     b7a:	00 97       	sbiw	r24, 0x00	; 0
     b7c:	91 f1       	breq	.+100    	; 0xbe2 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     b7e:	ec 01       	movw	r28, r24
     b80:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     b82:	4a 81       	ldd	r20, Y+2	; 0x02
     b84:	5b 81       	ldd	r21, Y+3	; 0x03
     b86:	20 91 7c 08 	lds	r18, 0x087C	; 0x80087c <xBlockAllocatedBit>
     b8a:	30 91 7d 08 	lds	r19, 0x087D	; 0x80087d <xBlockAllocatedBit+0x1>
     b8e:	ba 01       	movw	r22, r20
     b90:	62 23       	and	r22, r18
     b92:	73 23       	and	r23, r19
     b94:	67 2b       	or	r22, r23
     b96:	29 f1       	breq	.+74     	; 0xbe2 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     b98:	68 81       	ld	r22, Y
     b9a:	79 81       	ldd	r23, Y+1	; 0x01
     b9c:	67 2b       	or	r22, r23
     b9e:	09 f5       	brne	.+66     	; 0xbe2 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     ba0:	20 95       	com	r18
     ba2:	30 95       	com	r19
     ba4:	24 23       	and	r18, r20
     ba6:	35 23       	and	r19, r21
     ba8:	3b 83       	std	Y+3, r19	; 0x03
     baa:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     bac:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	9b 81       	ldd	r25, Y+3	; 0x03
     bb4:	20 91 84 08 	lds	r18, 0x0884	; 0x800884 <xFreeBytesRemaining>
     bb8:	30 91 85 08 	lds	r19, 0x0885	; 0x800885 <xFreeBytesRemaining+0x1>
     bbc:	82 0f       	add	r24, r18
     bbe:	93 1f       	adc	r25, r19
     bc0:	90 93 85 08 	sts	0x0885, r25	; 0x800885 <xFreeBytesRemaining+0x1>
     bc4:	80 93 84 08 	sts	0x0884, r24	; 0x800884 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     bc8:	ce 01       	movw	r24, r28
     bca:	e0 de       	rcall	.-576    	; 0x98c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     bcc:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <xNumberOfSuccessfulFrees>
     bd0:	90 91 7f 08 	lds	r25, 0x087F	; 0x80087f <xNumberOfSuccessfulFrees+0x1>
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	90 93 7f 08 	sts	0x087F, r25	; 0x80087f <xNumberOfSuccessfulFrees+0x1>
     bda:	80 93 7e 08 	sts	0x087E, r24	; 0x80087e <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     bde:	0e 94 30 12 	call	0x2460	; 0x2460 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	1f 91       	pop	r17
     be8:	0f 91       	pop	r16
     bea:	08 95       	ret

00000bec <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     bec:	fc 01       	movw	r30, r24
     bee:	03 96       	adiw	r24, 0x03	; 3
     bf0:	92 83       	std	Z+2, r25	; 0x02
     bf2:	81 83       	std	Z+1, r24	; 0x01
     bf4:	4f ef       	ldi	r20, 0xFF	; 255
     bf6:	5f ef       	ldi	r21, 0xFF	; 255
     bf8:	ba 01       	movw	r22, r20
     bfa:	43 83       	std	Z+3, r20	; 0x03
     bfc:	54 83       	std	Z+4, r21	; 0x04
     bfe:	65 83       	std	Z+5, r22	; 0x05
     c00:	76 83       	std	Z+6, r23	; 0x06
     c02:	90 87       	std	Z+8, r25	; 0x08
     c04:	87 83       	std	Z+7, r24	; 0x07
     c06:	92 87       	std	Z+10, r25	; 0x0a
     c08:	81 87       	std	Z+9, r24	; 0x09
     c0a:	10 82       	st	Z, r1
     c0c:	08 95       	ret

00000c0e <vListInitialiseItem>:
     c0e:	fc 01       	movw	r30, r24
     c10:	13 86       	std	Z+11, r1	; 0x0b
     c12:	12 86       	std	Z+10, r1	; 0x0a
     c14:	08 95       	ret

00000c16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     c20:	08 81       	ld	r16, Y
     c22:	19 81       	ldd	r17, Y+1	; 0x01
     c24:	2a 81       	ldd	r18, Y+2	; 0x02
     c26:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     c28:	0f 3f       	cpi	r16, 0xFF	; 255
     c2a:	4f ef       	ldi	r20, 0xFF	; 255
     c2c:	14 07       	cpc	r17, r20
     c2e:	24 07       	cpc	r18, r20
     c30:	34 07       	cpc	r19, r20
     c32:	21 f4       	brne	.+8      	; 0xc3c <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     c34:	fc 01       	movw	r30, r24
     c36:	a1 85       	ldd	r26, Z+9	; 0x09
     c38:	b2 85       	ldd	r27, Z+10	; 0x0a
     c3a:	11 c0       	rjmp	.+34     	; 0xc5e <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     c3c:	dc 01       	movw	r26, r24
     c3e:	13 96       	adiw	r26, 0x03	; 3
     c40:	01 c0       	rjmp	.+2      	; 0xc44 <vListInsert+0x2e>
     c42:	df 01       	movw	r26, r30
     c44:	14 96       	adiw	r26, 0x04	; 4
     c46:	ed 91       	ld	r30, X+
     c48:	fc 91       	ld	r31, X
     c4a:	15 97       	sbiw	r26, 0x05	; 5
     c4c:	40 81       	ld	r20, Z
     c4e:	51 81       	ldd	r21, Z+1	; 0x01
     c50:	62 81       	ldd	r22, Z+2	; 0x02
     c52:	73 81       	ldd	r23, Z+3	; 0x03
     c54:	04 17       	cp	r16, r20
     c56:	15 07       	cpc	r17, r21
     c58:	26 07       	cpc	r18, r22
     c5a:	37 07       	cpc	r19, r23
     c5c:	90 f7       	brcc	.-28     	; 0xc42 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     c5e:	14 96       	adiw	r26, 0x04	; 4
     c60:	ed 91       	ld	r30, X+
     c62:	fc 91       	ld	r31, X
     c64:	15 97       	sbiw	r26, 0x05	; 5
     c66:	fd 83       	std	Y+5, r31	; 0x05
     c68:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     c6a:	d7 83       	std	Z+7, r29	; 0x07
     c6c:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     c6e:	bf 83       	std	Y+7, r27	; 0x07
     c70:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     c72:	15 96       	adiw	r26, 0x05	; 5
     c74:	dc 93       	st	X, r29
     c76:	ce 93       	st	-X, r28
     c78:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     c7a:	9b 87       	std	Y+11, r25	; 0x0b
     c7c:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     c7e:	fc 01       	movw	r30, r24
     c80:	20 81       	ld	r18, Z
     c82:	2f 5f       	subi	r18, 0xFF	; 255
     c84:	20 83       	st	Z, r18
}
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	08 95       	ret

00000c90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     c96:	a2 85       	ldd	r26, Z+10	; 0x0a
     c98:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     c9a:	c4 81       	ldd	r28, Z+4	; 0x04
     c9c:	d5 81       	ldd	r29, Z+5	; 0x05
     c9e:	86 81       	ldd	r24, Z+6	; 0x06
     ca0:	97 81       	ldd	r25, Z+7	; 0x07
     ca2:	9f 83       	std	Y+7, r25	; 0x07
     ca4:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     ca6:	c6 81       	ldd	r28, Z+6	; 0x06
     ca8:	d7 81       	ldd	r29, Z+7	; 0x07
     caa:	84 81       	ldd	r24, Z+4	; 0x04
     cac:	95 81       	ldd	r25, Z+5	; 0x05
     cae:	9d 83       	std	Y+5, r25	; 0x05
     cb0:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     cb2:	11 96       	adiw	r26, 0x01	; 1
     cb4:	8d 91       	ld	r24, X+
     cb6:	9c 91       	ld	r25, X
     cb8:	12 97       	sbiw	r26, 0x02	; 2
     cba:	e8 17       	cp	r30, r24
     cbc:	f9 07       	cpc	r31, r25
     cbe:	31 f4       	brne	.+12     	; 0xccc <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     cc0:	86 81       	ldd	r24, Z+6	; 0x06
     cc2:	97 81       	ldd	r25, Z+7	; 0x07
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	9c 93       	st	X, r25
     cc8:	8e 93       	st	-X, r24
     cca:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     ccc:	13 86       	std	Z+11, r1	; 0x0b
     cce:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     cd0:	8c 91       	ld	r24, X
     cd2:	81 50       	subi	r24, 0x01	; 1
     cd4:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     cd6:	8c 91       	ld	r24, X
}
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	08 95       	ret

00000cde <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     cde:	a8 95       	wdr
     ce0:	90 ec       	ldi	r25, 0xC0	; 192
     ce2:	88 e1       	ldi	r24, 0x18	; 24
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	a8 95       	wdr
     cea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     cf4:	08 95       	ret

00000cf6 <pxPortInitialiseStack>:
     cf6:	fc 01       	movw	r30, r24
     cf8:	60 83       	st	Z, r22
     cfa:	31 97       	sbiw	r30, 0x01	; 1
     cfc:	70 83       	st	Z, r23
     cfe:	31 97       	sbiw	r30, 0x01	; 1
     d00:	10 82       	st	Z, r1
     d02:	31 97       	sbiw	r30, 0x01	; 1
     d04:	10 82       	st	Z, r1
     d06:	31 97       	sbiw	r30, 0x01	; 1
     d08:	20 e8       	ldi	r18, 0x80	; 128
     d0a:	20 83       	st	Z, r18
     d0c:	31 97       	sbiw	r30, 0x01	; 1
     d0e:	10 82       	st	Z, r1
     d10:	31 97       	sbiw	r30, 0x01	; 1
     d12:	10 82       	st	Z, r1
     d14:	31 97       	sbiw	r30, 0x01	; 1
     d16:	10 82       	st	Z, r1
     d18:	77 97       	sbiw	r30, 0x17	; 23
     d1a:	40 83       	st	Z, r20
     d1c:	31 97       	sbiw	r30, 0x01	; 1
     d1e:	50 83       	st	Z, r21
     d20:	86 97       	sbiw	r24, 0x26	; 38
     d22:	08 95       	ret

00000d24 <xPortStartScheduler>:
     d24:	dc df       	rcall	.-72     	; 0xcde <prvSetupTimerInterrupt>
     d26:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
     d2a:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
     d2e:	cd 91       	ld	r28, X+
     d30:	cd bf       	out	0x3d, r28	; 61
     d32:	dd 91       	ld	r29, X+
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	ff 91       	pop	r31
     d38:	ef 91       	pop	r30
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	bf 91       	pop	r27
     d40:	af 91       	pop	r26
     d42:	9f 91       	pop	r25
     d44:	8f 91       	pop	r24
     d46:	7f 91       	pop	r23
     d48:	6f 91       	pop	r22
     d4a:	5f 91       	pop	r21
     d4c:	4f 91       	pop	r20
     d4e:	3f 91       	pop	r19
     d50:	2f 91       	pop	r18
     d52:	1f 91       	pop	r17
     d54:	0f 91       	pop	r16
     d56:	ff 90       	pop	r15
     d58:	ef 90       	pop	r14
     d5a:	df 90       	pop	r13
     d5c:	cf 90       	pop	r12
     d5e:	bf 90       	pop	r11
     d60:	af 90       	pop	r10
     d62:	9f 90       	pop	r9
     d64:	8f 90       	pop	r8
     d66:	7f 90       	pop	r7
     d68:	6f 90       	pop	r6
     d6a:	5f 90       	pop	r5
     d6c:	4f 90       	pop	r4
     d6e:	3f 90       	pop	r3
     d70:	2f 90       	pop	r2
     d72:	1f 90       	pop	r1
     d74:	0f 90       	pop	r0
     d76:	0c be       	out	0x3c, r0	; 60
     d78:	0f 90       	pop	r0
     d7a:	0b be       	out	0x3b, r0	; 59
     d7c:	0f 90       	pop	r0
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	0f 90       	pop	r0
     d82:	08 95       	ret
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	08 95       	ret

00000d88 <vPortYield>:
     d88:	0f 92       	push	r0
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	0f 92       	push	r0
     d90:	0b b6       	in	r0, 0x3b	; 59
     d92:	0f 92       	push	r0
     d94:	0c b6       	in	r0, 0x3c	; 60
     d96:	0f 92       	push	r0
     d98:	1f 92       	push	r1
     d9a:	11 24       	eor	r1, r1
     d9c:	2f 92       	push	r2
     d9e:	3f 92       	push	r3
     da0:	4f 92       	push	r4
     da2:	5f 92       	push	r5
     da4:	6f 92       	push	r6
     da6:	7f 92       	push	r7
     da8:	8f 92       	push	r8
     daa:	9f 92       	push	r9
     dac:	af 92       	push	r10
     dae:	bf 92       	push	r11
     db0:	cf 92       	push	r12
     db2:	df 92       	push	r13
     db4:	ef 92       	push	r14
     db6:	ff 92       	push	r15
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	2f 93       	push	r18
     dbe:	3f 93       	push	r19
     dc0:	4f 93       	push	r20
     dc2:	5f 93       	push	r21
     dc4:	6f 93       	push	r22
     dc6:	7f 93       	push	r23
     dc8:	8f 93       	push	r24
     dca:	9f 93       	push	r25
     dcc:	af 93       	push	r26
     dce:	bf 93       	push	r27
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	ef 93       	push	r30
     dd6:	ff 93       	push	r31
     dd8:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
     ddc:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
     de0:	0d b6       	in	r0, 0x3d	; 61
     de2:	0d 92       	st	X+, r0
     de4:	0e b6       	in	r0, 0x3e	; 62
     de6:	0d 92       	st	X+, r0
     de8:	0e 94 8c 13 	call	0x2718	; 0x2718 <vTaskSwitchContext>
     dec:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
     df0:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
     df4:	cd 91       	ld	r28, X+
     df6:	cd bf       	out	0x3d, r28	; 61
     df8:	dd 91       	ld	r29, X+
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	ff 91       	pop	r31
     dfe:	ef 91       	pop	r30
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	bf 91       	pop	r27
     e06:	af 91       	pop	r26
     e08:	9f 91       	pop	r25
     e0a:	8f 91       	pop	r24
     e0c:	7f 91       	pop	r23
     e0e:	6f 91       	pop	r22
     e10:	5f 91       	pop	r21
     e12:	4f 91       	pop	r20
     e14:	3f 91       	pop	r19
     e16:	2f 91       	pop	r18
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	ff 90       	pop	r15
     e1e:	ef 90       	pop	r14
     e20:	df 90       	pop	r13
     e22:	cf 90       	pop	r12
     e24:	bf 90       	pop	r11
     e26:	af 90       	pop	r10
     e28:	9f 90       	pop	r9
     e2a:	8f 90       	pop	r8
     e2c:	7f 90       	pop	r7
     e2e:	6f 90       	pop	r6
     e30:	5f 90       	pop	r5
     e32:	4f 90       	pop	r4
     e34:	3f 90       	pop	r3
     e36:	2f 90       	pop	r2
     e38:	1f 90       	pop	r1
     e3a:	0f 90       	pop	r0
     e3c:	0c be       	out	0x3c, r0	; 60
     e3e:	0f 90       	pop	r0
     e40:	0b be       	out	0x3b, r0	; 59
     e42:	0f 90       	pop	r0
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	0f 90       	pop	r0
     e48:	08 95       	ret

00000e4a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     e4a:	0f 92       	push	r0
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	0f 92       	push	r0
     e52:	0b b6       	in	r0, 0x3b	; 59
     e54:	0f 92       	push	r0
     e56:	0c b6       	in	r0, 0x3c	; 60
     e58:	0f 92       	push	r0
     e5a:	1f 92       	push	r1
     e5c:	11 24       	eor	r1, r1
     e5e:	2f 92       	push	r2
     e60:	3f 92       	push	r3
     e62:	4f 92       	push	r4
     e64:	5f 92       	push	r5
     e66:	6f 92       	push	r6
     e68:	7f 92       	push	r7
     e6a:	8f 92       	push	r8
     e6c:	9f 92       	push	r9
     e6e:	af 92       	push	r10
     e70:	bf 92       	push	r11
     e72:	cf 92       	push	r12
     e74:	df 92       	push	r13
     e76:	ef 92       	push	r14
     e78:	ff 92       	push	r15
     e7a:	0f 93       	push	r16
     e7c:	1f 93       	push	r17
     e7e:	2f 93       	push	r18
     e80:	3f 93       	push	r19
     e82:	4f 93       	push	r20
     e84:	5f 93       	push	r21
     e86:	6f 93       	push	r22
     e88:	7f 93       	push	r23
     e8a:	8f 93       	push	r24
     e8c:	9f 93       	push	r25
     e8e:	af 93       	push	r26
     e90:	bf 93       	push	r27
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	ef 93       	push	r30
     e98:	ff 93       	push	r31
     e9a:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
     e9e:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
     ea2:	0d b6       	in	r0, 0x3d	; 61
     ea4:	0d 92       	st	X+, r0
     ea6:	0e b6       	in	r0, 0x3e	; 62
     ea8:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     eaa:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     eac:	0e 94 04 11 	call	0x2208	; 0x2208 <xTaskIncrementTick>
     eb0:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     eb2:	0e 94 8c 13 	call	0x2718	; 0x2718 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     eb6:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
     eba:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
     ebe:	cd 91       	ld	r28, X+
     ec0:	cd bf       	out	0x3d, r28	; 61
     ec2:	dd 91       	ld	r29, X+
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	ff 91       	pop	r31
     ec8:	ef 91       	pop	r30
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	bf 91       	pop	r27
     ed0:	af 91       	pop	r26
     ed2:	9f 91       	pop	r25
     ed4:	8f 91       	pop	r24
     ed6:	7f 91       	pop	r23
     ed8:	6f 91       	pop	r22
     eda:	5f 91       	pop	r21
     edc:	4f 91       	pop	r20
     ede:	3f 91       	pop	r19
     ee0:	2f 91       	pop	r18
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	ff 90       	pop	r15
     ee8:	ef 90       	pop	r14
     eea:	df 90       	pop	r13
     eec:	cf 90       	pop	r12
     eee:	bf 90       	pop	r11
     ef0:	af 90       	pop	r10
     ef2:	9f 90       	pop	r9
     ef4:	8f 90       	pop	r8
     ef6:	7f 90       	pop	r7
     ef8:	6f 90       	pop	r6
     efa:	5f 90       	pop	r5
     efc:	4f 90       	pop	r4
     efe:	3f 90       	pop	r3
     f00:	2f 90       	pop	r2
     f02:	1f 90       	pop	r1
     f04:	0f 90       	pop	r0
     f06:	0c be       	out	0x3c, r0	; 60
     f08:	0f 90       	pop	r0
     f0a:	0b be       	out	0x3b, r0	; 59
     f0c:	0f 90       	pop	r0
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     f12:	08 95       	ret

00000f14 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     f14:	9a df       	rcall	.-204    	; 0xe4a <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     f16:	18 95       	reti

00000f18 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     f18:	dc 01       	movw	r26, r24
     f1a:	53 96       	adiw	r26, 0x13	; 19
     f1c:	2c 91       	ld	r18, X
     f1e:	53 97       	sbiw	r26, 0x13	; 19
     f20:	22 23       	and	r18, r18
     f22:	41 f0       	breq	.+16     	; 0xf34 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     f24:	5a 96       	adiw	r26, 0x1a	; 26
     f26:	ed 91       	ld	r30, X+
     f28:	fc 91       	ld	r31, X
     f2a:	5b 97       	sbiw	r26, 0x1b	; 27
     f2c:	90 81       	ld	r25, Z
     f2e:	8a e0       	ldi	r24, 0x0A	; 10
     f30:	89 1b       	sub	r24, r25
     f32:	08 95       	ret
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	08 95       	ret

00000f38 <prvIsQueueEmpty>:
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	0f 92       	push	r0
     f3e:	fc 01       	movw	r30, r24
     f40:	86 8d       	ldd	r24, Z+30	; 0x1e
     f42:	81 11       	cpse	r24, r1
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <prvIsQueueEmpty+0x12>
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	01 c0       	rjmp	.+2      	; 0xf4c <prvIsQueueEmpty+0x14>
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	0f 90       	pop	r0
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	08 95       	ret

00000f52 <prvIsQueueFull>:
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	0f 92       	push	r0
     f58:	fc 01       	movw	r30, r24
     f5a:	26 8d       	ldd	r18, Z+30	; 0x1e
     f5c:	87 8d       	ldd	r24, Z+31	; 0x1f
     f5e:	28 13       	cpse	r18, r24
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <prvIsQueueFull+0x14>
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	01 c0       	rjmp	.+2      	; 0xf68 <prvIsQueueFull+0x16>
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	0f 90       	pop	r0
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	08 95       	ret

00000f6e <prvCopyDataToQueue>:
     f6e:	0f 93       	push	r16
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	ec 01       	movw	r28, r24
     f78:	04 2f       	mov	r16, r20
     f7a:	1e 8d       	ldd	r17, Y+30	; 0x1e
     f7c:	48 a1       	ldd	r20, Y+32	; 0x20
     f7e:	41 11       	cpse	r20, r1
     f80:	0c c0       	rjmp	.+24     	; 0xf9a <prvCopyDataToQueue+0x2c>
     f82:	88 81       	ld	r24, Y
     f84:	99 81       	ldd	r25, Y+1	; 0x01
     f86:	89 2b       	or	r24, r25
     f88:	09 f0       	breq	.+2      	; 0xf8c <prvCopyDataToQueue+0x1e>
     f8a:	42 c0       	rjmp	.+132    	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
     f8c:	8c 81       	ldd	r24, Y+4	; 0x04
     f8e:	9d 81       	ldd	r25, Y+5	; 0x05
     f90:	0e 94 08 17 	call	0x2e10	; 0x2e10 <xTaskPriorityDisinherit>
     f94:	1d 82       	std	Y+5, r1	; 0x05
     f96:	1c 82       	std	Y+4, r1	; 0x04
     f98:	42 c0       	rjmp	.+132    	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
     f9a:	01 11       	cpse	r16, r1
     f9c:	17 c0       	rjmp	.+46     	; 0xfcc <prvCopyDataToQueue+0x5e>
     f9e:	50 e0       	ldi	r21, 0x00	; 0
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	9b 81       	ldd	r25, Y+3	; 0x03
     fa4:	0e 94 d6 35 	call	0x6bac	; 0x6bac <memcpy>
     fa8:	28 a1       	ldd	r18, Y+32	; 0x20
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	9b 81       	ldd	r25, Y+3	; 0x03
     fae:	82 0f       	add	r24, r18
     fb0:	91 1d       	adc	r25, r1
     fb2:	9b 83       	std	Y+3, r25	; 0x03
     fb4:	8a 83       	std	Y+2, r24	; 0x02
     fb6:	2c 81       	ldd	r18, Y+4	; 0x04
     fb8:	3d 81       	ldd	r19, Y+5	; 0x05
     fba:	82 17       	cp	r24, r18
     fbc:	93 07       	cpc	r25, r19
     fbe:	50 f1       	brcs	.+84     	; 0x1014 <__EEPROM_REGION_LENGTH__+0x14>
     fc0:	88 81       	ld	r24, Y
     fc2:	99 81       	ldd	r25, Y+1	; 0x01
     fc4:	9b 83       	std	Y+3, r25	; 0x03
     fc6:	8a 83       	std	Y+2, r24	; 0x02
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	29 c0       	rjmp	.+82     	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
     fcc:	50 e0       	ldi	r21, 0x00	; 0
     fce:	8e 81       	ldd	r24, Y+6	; 0x06
     fd0:	9f 81       	ldd	r25, Y+7	; 0x07
     fd2:	0e 94 d6 35 	call	0x6bac	; 0x6bac <memcpy>
     fd6:	88 a1       	ldd	r24, Y+32	; 0x20
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	91 95       	neg	r25
     fdc:	81 95       	neg	r24
     fde:	91 09       	sbc	r25, r1
     fe0:	2e 81       	ldd	r18, Y+6	; 0x06
     fe2:	3f 81       	ldd	r19, Y+7	; 0x07
     fe4:	28 0f       	add	r18, r24
     fe6:	39 1f       	adc	r19, r25
     fe8:	3f 83       	std	Y+7, r19	; 0x07
     fea:	2e 83       	std	Y+6, r18	; 0x06
     fec:	48 81       	ld	r20, Y
     fee:	59 81       	ldd	r21, Y+1	; 0x01
     ff0:	24 17       	cp	r18, r20
     ff2:	35 07       	cpc	r19, r21
     ff4:	30 f4       	brcc	.+12     	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
     ff6:	2c 81       	ldd	r18, Y+4	; 0x04
     ff8:	3d 81       	ldd	r19, Y+5	; 0x05
     ffa:	82 0f       	add	r24, r18
     ffc:	93 1f       	adc	r25, r19
     ffe:	9f 83       	std	Y+7, r25	; 0x07
    1000:	8e 83       	std	Y+6, r24	; 0x06
    1002:	02 30       	cpi	r16, 0x02	; 2
    1004:	49 f4       	brne	.+18     	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
    1006:	11 23       	and	r17, r17
    1008:	49 f0       	breq	.+18     	; 0x101c <__EEPROM_REGION_LENGTH__+0x1c>
    100a:	11 50       	subi	r17, 0x01	; 1
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	07 c0       	rjmp	.+14     	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	05 c0       	rjmp	.+10     	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	03 c0       	rjmp	.+6      	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	01 c0       	rjmp	.+2      	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	1f 5f       	subi	r17, 0xFF	; 255
    1020:	1e 8f       	std	Y+30, r17	; 0x1e
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	08 95       	ret

0000102c <prvCopyDataFromQueue>:
    102c:	fc 01       	movw	r30, r24
    102e:	40 a1       	ldd	r20, Z+32	; 0x20
    1030:	44 23       	and	r20, r20
    1032:	a9 f0       	breq	.+42     	; 0x105e <prvCopyDataFromQueue+0x32>
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	26 81       	ldd	r18, Z+6	; 0x06
    1038:	37 81       	ldd	r19, Z+7	; 0x07
    103a:	24 0f       	add	r18, r20
    103c:	35 1f       	adc	r19, r21
    103e:	37 83       	std	Z+7, r19	; 0x07
    1040:	26 83       	std	Z+6, r18	; 0x06
    1042:	84 81       	ldd	r24, Z+4	; 0x04
    1044:	95 81       	ldd	r25, Z+5	; 0x05
    1046:	28 17       	cp	r18, r24
    1048:	39 07       	cpc	r19, r25
    104a:	20 f0       	brcs	.+8      	; 0x1054 <prvCopyDataFromQueue+0x28>
    104c:	80 81       	ld	r24, Z
    104e:	91 81       	ldd	r25, Z+1	; 0x01
    1050:	97 83       	std	Z+7, r25	; 0x07
    1052:	86 83       	std	Z+6, r24	; 0x06
    1054:	cb 01       	movw	r24, r22
    1056:	66 81       	ldd	r22, Z+6	; 0x06
    1058:	77 81       	ldd	r23, Z+7	; 0x07
    105a:	0c 94 d6 35 	jmp	0x6bac	; 0x6bac <memcpy>
    105e:	08 95       	ret

00001060 <prvUnlockQueue>:
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	ec 01       	movw	r28, r24
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	0f 92       	push	r0
    106e:	1a a1       	ldd	r17, Y+34	; 0x22
    1070:	0b c0       	rjmp	.+22     	; 0x1088 <prvUnlockQueue+0x28>
    1072:	8b 89       	ldd	r24, Y+19	; 0x13
    1074:	88 23       	and	r24, r24
    1076:	51 f0       	breq	.+20     	; 0x108c <prvUnlockQueue+0x2c>
    1078:	ce 01       	movw	r24, r28
    107a:	43 96       	adiw	r24, 0x13	; 19
    107c:	0e 94 94 14 	call	0x2928	; 0x2928 <xTaskRemoveFromEventList>
    1080:	81 11       	cpse	r24, r1
    1082:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <vTaskMissedYield>
    1086:	11 50       	subi	r17, 0x01	; 1
    1088:	11 16       	cp	r1, r17
    108a:	9c f3       	brlt	.-26     	; 0x1072 <prvUnlockQueue+0x12>
    108c:	8f ef       	ldi	r24, 0xFF	; 255
    108e:	8a a3       	std	Y+34, r24	; 0x22
    1090:	0f 90       	pop	r0
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	0f 92       	push	r0
    109a:	19 a1       	ldd	r17, Y+33	; 0x21
    109c:	0b c0       	rjmp	.+22     	; 0x10b4 <prvUnlockQueue+0x54>
    109e:	88 85       	ldd	r24, Y+8	; 0x08
    10a0:	88 23       	and	r24, r24
    10a2:	51 f0       	breq	.+20     	; 0x10b8 <prvUnlockQueue+0x58>
    10a4:	ce 01       	movw	r24, r28
    10a6:	08 96       	adiw	r24, 0x08	; 8
    10a8:	0e 94 94 14 	call	0x2928	; 0x2928 <xTaskRemoveFromEventList>
    10ac:	81 11       	cpse	r24, r1
    10ae:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <vTaskMissedYield>
    10b2:	11 50       	subi	r17, 0x01	; 1
    10b4:	11 16       	cp	r1, r17
    10b6:	9c f3       	brlt	.-26     	; 0x109e <prvUnlockQueue+0x3e>
    10b8:	8f ef       	ldi	r24, 0xFF	; 255
    10ba:	89 a3       	std	Y+33, r24	; 0x21
    10bc:	0f 90       	pop	r0
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	08 95       	ret

000010c8 <xQueueGenericReset>:
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	ec 01       	movw	r28, r24
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	0f 92       	push	r0
    10d4:	e8 81       	ld	r30, Y
    10d6:	f9 81       	ldd	r31, Y+1	; 0x01
    10d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10da:	28 a1       	ldd	r18, Y+32	; 0x20
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	82 9f       	mul	r24, r18
    10e2:	a0 01       	movw	r20, r0
    10e4:	83 9f       	mul	r24, r19
    10e6:	50 0d       	add	r21, r0
    10e8:	92 9f       	mul	r25, r18
    10ea:	50 0d       	add	r21, r0
    10ec:	11 24       	eor	r1, r1
    10ee:	4e 0f       	add	r20, r30
    10f0:	5f 1f       	adc	r21, r31
    10f2:	5d 83       	std	Y+5, r21	; 0x05
    10f4:	4c 83       	std	Y+4, r20	; 0x04
    10f6:	1e 8e       	std	Y+30, r1	; 0x1e
    10f8:	fb 83       	std	Y+3, r31	; 0x03
    10fa:	ea 83       	std	Y+2, r30	; 0x02
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	28 9f       	mul	r18, r24
    1100:	a0 01       	movw	r20, r0
    1102:	29 9f       	mul	r18, r25
    1104:	50 0d       	add	r21, r0
    1106:	38 9f       	mul	r19, r24
    1108:	50 0d       	add	r21, r0
    110a:	11 24       	eor	r1, r1
    110c:	cf 01       	movw	r24, r30
    110e:	84 0f       	add	r24, r20
    1110:	95 1f       	adc	r25, r21
    1112:	9f 83       	std	Y+7, r25	; 0x07
    1114:	8e 83       	std	Y+6, r24	; 0x06
    1116:	8f ef       	ldi	r24, 0xFF	; 255
    1118:	89 a3       	std	Y+33, r24	; 0x21
    111a:	8a a3       	std	Y+34, r24	; 0x22
    111c:	61 11       	cpse	r22, r1
    111e:	0b c0       	rjmp	.+22     	; 0x1136 <xQueueGenericReset+0x6e>
    1120:	88 85       	ldd	r24, Y+8	; 0x08
    1122:	88 23       	and	r24, r24
    1124:	71 f0       	breq	.+28     	; 0x1142 <xQueueGenericReset+0x7a>
    1126:	ce 01       	movw	r24, r28
    1128:	08 96       	adiw	r24, 0x08	; 8
    112a:	0e 94 94 14 	call	0x2928	; 0x2928 <xTaskRemoveFromEventList>
    112e:	88 23       	and	r24, r24
    1130:	41 f0       	breq	.+16     	; 0x1142 <xQueueGenericReset+0x7a>
    1132:	2a de       	rcall	.-940    	; 0xd88 <vPortYield>
    1134:	06 c0       	rjmp	.+12     	; 0x1142 <xQueueGenericReset+0x7a>
    1136:	ce 01       	movw	r24, r28
    1138:	08 96       	adiw	r24, 0x08	; 8
    113a:	58 dd       	rcall	.-1360   	; 0xbec <vListInitialise>
    113c:	ce 01       	movw	r24, r28
    113e:	43 96       	adiw	r24, 0x13	; 19
    1140:	55 dd       	rcall	.-1366   	; 0xbec <vListInitialise>
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	08 95       	ret

0000114e <prvInitialiseNewQueue>:
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	f8 01       	movw	r30, r16
    1154:	61 11       	cpse	r22, r1
    1156:	03 c0       	rjmp	.+6      	; 0x115e <prvInitialiseNewQueue+0x10>
    1158:	11 83       	std	Z+1, r17	; 0x01
    115a:	00 83       	st	Z, r16
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <prvInitialiseNewQueue+0x14>
    115e:	51 83       	std	Z+1, r21	; 0x01
    1160:	40 83       	st	Z, r20
    1162:	87 8f       	std	Z+31, r24	; 0x1f
    1164:	60 a3       	std	Z+32, r22	; 0x20
    1166:	61 e0       	ldi	r22, 0x01	; 1
    1168:	cf 01       	movw	r24, r30
    116a:	ae df       	rcall	.-164    	; 0x10c8 <xQueueGenericReset>
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	08 95       	ret

00001172 <xQueueGenericCreate>:
    1172:	df 92       	push	r13
    1174:	ef 92       	push	r14
    1176:	ff 92       	push	r15
    1178:	0f 93       	push	r16
    117a:	1f 93       	push	r17
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	f8 2e       	mov	r15, r24
    1182:	e6 2e       	mov	r14, r22
    1184:	d4 2e       	mov	r13, r20
    1186:	86 9f       	mul	r24, r22
    1188:	c0 01       	movw	r24, r0
    118a:	11 24       	eor	r1, r1
    118c:	83 96       	adiw	r24, 0x23	; 35
    118e:	48 dc       	rcall	.-1904   	; 0xa20 <pvPortMalloc>
    1190:	ec 01       	movw	r28, r24
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	41 f0       	breq	.+16     	; 0x11a6 <xQueueGenericCreate+0x34>
    1196:	8c 01       	movw	r16, r24
    1198:	2d 2d       	mov	r18, r13
    119a:	ac 01       	movw	r20, r24
    119c:	4d 5d       	subi	r20, 0xDD	; 221
    119e:	5f 4f       	sbci	r21, 0xFF	; 255
    11a0:	6e 2d       	mov	r22, r14
    11a2:	8f 2d       	mov	r24, r15
    11a4:	d4 df       	rcall	.-88     	; 0x114e <prvInitialiseNewQueue>
    11a6:	ce 01       	movw	r24, r28
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	ff 90       	pop	r15
    11b2:	ef 90       	pop	r14
    11b4:	df 90       	pop	r13
    11b6:	08 95       	ret

000011b8 <xQueueGenericSend>:
    11b8:	cf 92       	push	r12
    11ba:	df 92       	push	r13
    11bc:	ef 92       	push	r14
    11be:	ff 92       	push	r15
    11c0:	0f 93       	push	r16
    11c2:	1f 93       	push	r17
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	29 97       	sbiw	r28, 0x09	; 9
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	7c 01       	movw	r14, r24
    11da:	6b 01       	movw	r12, r22
    11dc:	2e 83       	std	Y+6, r18	; 0x06
    11de:	3f 83       	std	Y+7, r19	; 0x07
    11e0:	48 87       	std	Y+8, r20	; 0x08
    11e2:	59 87       	std	Y+9, r21	; 0x09
    11e4:	10 e0       	ldi	r17, 0x00	; 0
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	0f 92       	push	r0
    11ec:	f7 01       	movw	r30, r14
    11ee:	96 8d       	ldd	r25, Z+30	; 0x1e
    11f0:	87 8d       	ldd	r24, Z+31	; 0x1f
    11f2:	98 17       	cp	r25, r24
    11f4:	10 f0       	brcs	.+4      	; 0x11fa <xQueueGenericSend+0x42>
    11f6:	02 30       	cpi	r16, 0x02	; 2
    11f8:	b1 f4       	brne	.+44     	; 0x1226 <xQueueGenericSend+0x6e>
    11fa:	40 2f       	mov	r20, r16
    11fc:	b6 01       	movw	r22, r12
    11fe:	c7 01       	movw	r24, r14
    1200:	b6 de       	rcall	.-660    	; 0xf6e <prvCopyDataToQueue>
    1202:	f7 01       	movw	r30, r14
    1204:	93 89       	ldd	r25, Z+19	; 0x13
    1206:	99 23       	and	r25, r25
    1208:	41 f0       	breq	.+16     	; 0x121a <xQueueGenericSend+0x62>
    120a:	c7 01       	movw	r24, r14
    120c:	43 96       	adiw	r24, 0x13	; 19
    120e:	0e 94 94 14 	call	0x2928	; 0x2928 <xTaskRemoveFromEventList>
    1212:	88 23       	and	r24, r24
    1214:	21 f0       	breq	.+8      	; 0x121e <xQueueGenericSend+0x66>
    1216:	b8 dd       	rcall	.-1168   	; 0xd88 <vPortYield>
    1218:	02 c0       	rjmp	.+4      	; 0x121e <xQueueGenericSend+0x66>
    121a:	81 11       	cpse	r24, r1
    121c:	b5 dd       	rcall	.-1174   	; 0xd88 <vPortYield>
    121e:	0f 90       	pop	r0
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	4c c0       	rjmp	.+152    	; 0x12be <xQueueGenericSend+0x106>
    1226:	8e 81       	ldd	r24, Y+6	; 0x06
    1228:	9f 81       	ldd	r25, Y+7	; 0x07
    122a:	a8 85       	ldd	r26, Y+8	; 0x08
    122c:	b9 85       	ldd	r27, Y+9	; 0x09
    122e:	89 2b       	or	r24, r25
    1230:	8a 2b       	or	r24, r26
    1232:	8b 2b       	or	r24, r27
    1234:	21 f4       	brne	.+8      	; 0x123e <xQueueGenericSend+0x86>
    1236:	0f 90       	pop	r0
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	40 c0       	rjmp	.+128    	; 0x12be <xQueueGenericSend+0x106>
    123e:	11 11       	cpse	r17, r1
    1240:	05 c0       	rjmp	.+10     	; 0x124c <xQueueGenericSend+0x94>
    1242:	ce 01       	movw	r24, r28
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <vTaskInternalSetTimeOutState>
    124a:	11 e0       	ldi	r17, 0x01	; 1
    124c:	0f 90       	pop	r0
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	c7 d7       	rcall	.+3982   	; 0x21e0 <vTaskSuspendAll>
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	0f 92       	push	r0
    1258:	f7 01       	movw	r30, r14
    125a:	81 a1       	ldd	r24, Z+33	; 0x21
    125c:	8f 3f       	cpi	r24, 0xFF	; 255
    125e:	09 f4       	brne	.+2      	; 0x1262 <xQueueGenericSend+0xaa>
    1260:	11 a2       	std	Z+33, r1	; 0x21
    1262:	f7 01       	movw	r30, r14
    1264:	82 a1       	ldd	r24, Z+34	; 0x22
    1266:	8f 3f       	cpi	r24, 0xFF	; 255
    1268:	09 f4       	brne	.+2      	; 0x126c <xQueueGenericSend+0xb4>
    126a:	12 a2       	std	Z+34, r1	; 0x22
    126c:	0f 90       	pop	r0
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	be 01       	movw	r22, r28
    1272:	6a 5f       	subi	r22, 0xFA	; 250
    1274:	7f 4f       	sbci	r23, 0xFF	; 255
    1276:	ce 01       	movw	r24, r28
    1278:	01 96       	adiw	r24, 0x01	; 1
    127a:	0e 94 04 16 	call	0x2c08	; 0x2c08 <xTaskCheckForTimeOut>
    127e:	81 11       	cpse	r24, r1
    1280:	19 c0       	rjmp	.+50     	; 0x12b4 <xQueueGenericSend+0xfc>
    1282:	c7 01       	movw	r24, r14
    1284:	66 de       	rcall	.-820    	; 0xf52 <prvIsQueueFull>
    1286:	88 23       	and	r24, r24
    1288:	81 f0       	breq	.+32     	; 0x12aa <xQueueGenericSend+0xf2>
    128a:	4e 81       	ldd	r20, Y+6	; 0x06
    128c:	5f 81       	ldd	r21, Y+7	; 0x07
    128e:	68 85       	ldd	r22, Y+8	; 0x08
    1290:	79 85       	ldd	r23, Y+9	; 0x09
    1292:	c7 01       	movw	r24, r14
    1294:	08 96       	adiw	r24, 0x08	; 8
    1296:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <vTaskPlaceOnEventList>
    129a:	c7 01       	movw	r24, r14
    129c:	e1 de       	rcall	.-574    	; 0x1060 <prvUnlockQueue>
    129e:	0e 94 30 12 	call	0x2460	; 0x2460 <xTaskResumeAll>
    12a2:	81 11       	cpse	r24, r1
    12a4:	a0 cf       	rjmp	.-192    	; 0x11e6 <xQueueGenericSend+0x2e>
    12a6:	70 dd       	rcall	.-1312   	; 0xd88 <vPortYield>
    12a8:	9e cf       	rjmp	.-196    	; 0x11e6 <xQueueGenericSend+0x2e>
    12aa:	c7 01       	movw	r24, r14
    12ac:	d9 de       	rcall	.-590    	; 0x1060 <prvUnlockQueue>
    12ae:	0e 94 30 12 	call	0x2460	; 0x2460 <xTaskResumeAll>
    12b2:	99 cf       	rjmp	.-206    	; 0x11e6 <xQueueGenericSend+0x2e>
    12b4:	c7 01       	movw	r24, r14
    12b6:	d4 de       	rcall	.-600    	; 0x1060 <prvUnlockQueue>
    12b8:	0e 94 30 12 	call	0x2460	; 0x2460 <xTaskResumeAll>
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	29 96       	adiw	r28, 0x09	; 9
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	ff 90       	pop	r15
    12d4:	ef 90       	pop	r14
    12d6:	df 90       	pop	r13
    12d8:	cf 90       	pop	r12
    12da:	08 95       	ret

000012dc <prvInitialiseMutex>:
    12dc:	0f 93       	push	r16
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	69 f0       	breq	.+26     	; 0x12fc <prvInitialiseMutex+0x20>
    12e2:	fc 01       	movw	r30, r24
    12e4:	15 82       	std	Z+5, r1	; 0x05
    12e6:	14 82       	std	Z+4, r1	; 0x04
    12e8:	11 82       	std	Z+1, r1	; 0x01
    12ea:	10 82       	st	Z, r1
    12ec:	16 82       	std	Z+6, r1	; 0x06
    12ee:	00 e0       	ldi	r16, 0x00	; 0
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	a9 01       	movw	r20, r18
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	5e df       	rcall	.-324    	; 0x11b8 <xQueueGenericSend>
    12fc:	0f 91       	pop	r16
    12fe:	08 95       	ret

00001300 <xQueueCreateMutex>:
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	48 2f       	mov	r20, r24
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	33 df       	rcall	.-410    	; 0x1172 <xQueueGenericCreate>
    130c:	ec 01       	movw	r28, r24
    130e:	e6 df       	rcall	.-52     	; 0x12dc <prvInitialiseMutex>
    1310:	ce 01       	movw	r24, r28
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	08 95       	ret

00001318 <xQueueGenericSendFromISR>:
    1318:	ef 92       	push	r14
    131a:	ff 92       	push	r15
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
    1324:	8a 01       	movw	r16, r20
    1326:	fc 01       	movw	r30, r24
    1328:	56 8d       	ldd	r21, Z+30	; 0x1e
    132a:	37 8d       	ldd	r19, Z+31	; 0x1f
    132c:	53 17       	cp	r21, r19
    132e:	10 f0       	brcs	.+4      	; 0x1334 <xQueueGenericSendFromISR+0x1c>
    1330:	22 30       	cpi	r18, 0x02	; 2
    1332:	f9 f4       	brne	.+62     	; 0x1372 <xQueueGenericSendFromISR+0x5a>
    1334:	42 2f       	mov	r20, r18
    1336:	78 01       	movw	r14, r16
    1338:	ec 01       	movw	r28, r24
    133a:	1a a1       	ldd	r17, Y+34	; 0x22
    133c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    133e:	ce 01       	movw	r24, r28
    1340:	16 de       	rcall	.-980    	; 0xf6e <prvCopyDataToQueue>
    1342:	1f 3f       	cpi	r17, 0xFF	; 255
    1344:	81 f4       	brne	.+32     	; 0x1366 <xQueueGenericSendFromISR+0x4e>
    1346:	8b 89       	ldd	r24, Y+19	; 0x13
    1348:	88 23       	and	r24, r24
    134a:	a9 f0       	breq	.+42     	; 0x1376 <xQueueGenericSendFromISR+0x5e>
    134c:	ce 01       	movw	r24, r28
    134e:	43 96       	adiw	r24, 0x13	; 19
    1350:	0e 94 94 14 	call	0x2928	; 0x2928 <xTaskRemoveFromEventList>
    1354:	88 23       	and	r24, r24
    1356:	89 f0       	breq	.+34     	; 0x137a <xQueueGenericSendFromISR+0x62>
    1358:	e1 14       	cp	r14, r1
    135a:	f1 04       	cpc	r15, r1
    135c:	81 f0       	breq	.+32     	; 0x137e <xQueueGenericSendFromISR+0x66>
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	f7 01       	movw	r30, r14
    1362:	80 83       	st	Z, r24
    1364:	0d c0       	rjmp	.+26     	; 0x1380 <xQueueGenericSendFromISR+0x68>
    1366:	ff 24       	eor	r15, r15
    1368:	f3 94       	inc	r15
    136a:	f1 0e       	add	r15, r17
    136c:	fa a2       	std	Y+34, r15	; 0x22
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	07 c0       	rjmp	.+14     	; 0x1380 <xQueueGenericSendFromISR+0x68>
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	05 c0       	rjmp	.+10     	; 0x1380 <xQueueGenericSendFromISR+0x68>
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	03 c0       	rjmp	.+6      	; 0x1380 <xQueueGenericSendFromISR+0x68>
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	01 c0       	rjmp	.+2      	; 0x1380 <xQueueGenericSendFromISR+0x68>
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	1f 91       	pop	r17
    1386:	0f 91       	pop	r16
    1388:	ff 90       	pop	r15
    138a:	ef 90       	pop	r14
    138c:	08 95       	ret

0000138e <xQueueReceive>:
    138e:	cf 92       	push	r12
    1390:	df 92       	push	r13
    1392:	ef 92       	push	r14
    1394:	ff 92       	push	r15
    1396:	0f 93       	push	r16
    1398:	1f 93       	push	r17
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	29 97       	sbiw	r28, 0x09	; 9
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	8c 01       	movw	r16, r24
    13b0:	6b 01       	movw	r12, r22
    13b2:	2e 83       	std	Y+6, r18	; 0x06
    13b4:	3f 83       	std	Y+7, r19	; 0x07
    13b6:	48 87       	std	Y+8, r20	; 0x08
    13b8:	59 87       	std	Y+9, r21	; 0x09
    13ba:	e1 2c       	mov	r14, r1
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	0f 92       	push	r0
    13c2:	f8 01       	movw	r30, r16
    13c4:	f6 8c       	ldd	r15, Z+30	; 0x1e
    13c6:	ff 20       	and	r15, r15
    13c8:	99 f0       	breq	.+38     	; 0x13f0 <xQueueReceive+0x62>
    13ca:	b6 01       	movw	r22, r12
    13cc:	c8 01       	movw	r24, r16
    13ce:	2e de       	rcall	.-932    	; 0x102c <prvCopyDataFromQueue>
    13d0:	fa 94       	dec	r15
    13d2:	f8 01       	movw	r30, r16
    13d4:	f6 8e       	std	Z+30, r15	; 0x1e
    13d6:	80 85       	ldd	r24, Z+8	; 0x08
    13d8:	88 23       	and	r24, r24
    13da:	31 f0       	breq	.+12     	; 0x13e8 <xQueueReceive+0x5a>
    13dc:	c8 01       	movw	r24, r16
    13de:	08 96       	adiw	r24, 0x08	; 8
    13e0:	0e 94 94 14 	call	0x2928	; 0x2928 <xTaskRemoveFromEventList>
    13e4:	81 11       	cpse	r24, r1
    13e6:	d0 dc       	rcall	.-1632   	; 0xd88 <vPortYield>
    13e8:	0f 90       	pop	r0
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	4f c0       	rjmp	.+158    	; 0x148e <xQueueReceive+0x100>
    13f0:	8e 81       	ldd	r24, Y+6	; 0x06
    13f2:	9f 81       	ldd	r25, Y+7	; 0x07
    13f4:	a8 85       	ldd	r26, Y+8	; 0x08
    13f6:	b9 85       	ldd	r27, Y+9	; 0x09
    13f8:	89 2b       	or	r24, r25
    13fa:	8a 2b       	or	r24, r26
    13fc:	8b 2b       	or	r24, r27
    13fe:	21 f4       	brne	.+8      	; 0x1408 <xQueueReceive+0x7a>
    1400:	0f 90       	pop	r0
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	43 c0       	rjmp	.+134    	; 0x148e <xQueueReceive+0x100>
    1408:	e1 10       	cpse	r14, r1
    140a:	06 c0       	rjmp	.+12     	; 0x1418 <xQueueReceive+0x8a>
    140c:	ce 01       	movw	r24, r28
    140e:	01 96       	adiw	r24, 0x01	; 1
    1410:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <vTaskInternalSetTimeOutState>
    1414:	ee 24       	eor	r14, r14
    1416:	e3 94       	inc	r14
    1418:	0f 90       	pop	r0
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	e1 d6       	rcall	.+3522   	; 0x21e0 <vTaskSuspendAll>
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	0f 92       	push	r0
    1424:	f8 01       	movw	r30, r16
    1426:	81 a1       	ldd	r24, Z+33	; 0x21
    1428:	8f 3f       	cpi	r24, 0xFF	; 255
    142a:	09 f4       	brne	.+2      	; 0x142e <xQueueReceive+0xa0>
    142c:	11 a2       	std	Z+33, r1	; 0x21
    142e:	f8 01       	movw	r30, r16
    1430:	82 a1       	ldd	r24, Z+34	; 0x22
    1432:	8f 3f       	cpi	r24, 0xFF	; 255
    1434:	09 f4       	brne	.+2      	; 0x1438 <xQueueReceive+0xaa>
    1436:	12 a2       	std	Z+34, r1	; 0x22
    1438:	0f 90       	pop	r0
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	be 01       	movw	r22, r28
    143e:	6a 5f       	subi	r22, 0xFA	; 250
    1440:	7f 4f       	sbci	r23, 0xFF	; 255
    1442:	ce 01       	movw	r24, r28
    1444:	01 96       	adiw	r24, 0x01	; 1
    1446:	0e 94 04 16 	call	0x2c08	; 0x2c08 <xTaskCheckForTimeOut>
    144a:	81 11       	cpse	r24, r1
    144c:	17 c0       	rjmp	.+46     	; 0x147c <xQueueReceive+0xee>
    144e:	c8 01       	movw	r24, r16
    1450:	73 dd       	rcall	.-1306   	; 0xf38 <prvIsQueueEmpty>
    1452:	88 23       	and	r24, r24
    1454:	79 f0       	breq	.+30     	; 0x1474 <xQueueReceive+0xe6>
    1456:	4e 81       	ldd	r20, Y+6	; 0x06
    1458:	5f 81       	ldd	r21, Y+7	; 0x07
    145a:	68 85       	ldd	r22, Y+8	; 0x08
    145c:	79 85       	ldd	r23, Y+9	; 0x09
    145e:	c8 01       	movw	r24, r16
    1460:	43 96       	adiw	r24, 0x13	; 19
    1462:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <vTaskPlaceOnEventList>
    1466:	c8 01       	movw	r24, r16
    1468:	fb dd       	rcall	.-1034   	; 0x1060 <prvUnlockQueue>
    146a:	fa d7       	rcall	.+4084   	; 0x2460 <xTaskResumeAll>
    146c:	81 11       	cpse	r24, r1
    146e:	a6 cf       	rjmp	.-180    	; 0x13bc <xQueueReceive+0x2e>
    1470:	8b dc       	rcall	.-1770   	; 0xd88 <vPortYield>
    1472:	a4 cf       	rjmp	.-184    	; 0x13bc <xQueueReceive+0x2e>
    1474:	c8 01       	movw	r24, r16
    1476:	f4 dd       	rcall	.-1048   	; 0x1060 <prvUnlockQueue>
    1478:	f3 d7       	rcall	.+4070   	; 0x2460 <xTaskResumeAll>
    147a:	a0 cf       	rjmp	.-192    	; 0x13bc <xQueueReceive+0x2e>
    147c:	c8 01       	movw	r24, r16
    147e:	f0 dd       	rcall	.-1056   	; 0x1060 <prvUnlockQueue>
    1480:	ef d7       	rcall	.+4062   	; 0x2460 <xTaskResumeAll>
    1482:	c8 01       	movw	r24, r16
    1484:	59 dd       	rcall	.-1358   	; 0xf38 <prvIsQueueEmpty>
    1486:	88 23       	and	r24, r24
    1488:	09 f4       	brne	.+2      	; 0x148c <xQueueReceive+0xfe>
    148a:	98 cf       	rjmp	.-208    	; 0x13bc <xQueueReceive+0x2e>
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	29 96       	adiw	r28, 0x09	; 9
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	1f 91       	pop	r17
    14a0:	0f 91       	pop	r16
    14a2:	ff 90       	pop	r15
    14a4:	ef 90       	pop	r14
    14a6:	df 90       	pop	r13
    14a8:	cf 90       	pop	r12
    14aa:	08 95       	ret

000014ac <xQueueSemaphoreTake>:
    14ac:	ef 92       	push	r14
    14ae:	ff 92       	push	r15
    14b0:	0f 93       	push	r16
    14b2:	1f 93       	push	r17
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	29 97       	sbiw	r28, 0x09	; 9
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	8c 01       	movw	r16, r24
    14ca:	4e 83       	std	Y+6, r20	; 0x06
    14cc:	5f 83       	std	Y+7, r21	; 0x07
    14ce:	68 87       	std	Y+8, r22	; 0x08
    14d0:	79 87       	std	Y+9, r23	; 0x09
    14d2:	e1 2c       	mov	r14, r1
    14d4:	f1 2c       	mov	r15, r1
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	0f 92       	push	r0
    14dc:	f8 01       	movw	r30, r16
    14de:	86 8d       	ldd	r24, Z+30	; 0x1e
    14e0:	88 23       	and	r24, r24
    14e2:	c9 f0       	breq	.+50     	; 0x1516 <xQueueSemaphoreTake+0x6a>
    14e4:	81 50       	subi	r24, 0x01	; 1
    14e6:	86 8f       	std	Z+30, r24	; 0x1e
    14e8:	80 81       	ld	r24, Z
    14ea:	91 81       	ldd	r25, Z+1	; 0x01
    14ec:	89 2b       	or	r24, r25
    14ee:	29 f4       	brne	.+10     	; 0x14fa <xQueueSemaphoreTake+0x4e>
    14f0:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <pvTaskIncrementMutexHeldCount>
    14f4:	f8 01       	movw	r30, r16
    14f6:	95 83       	std	Z+5, r25	; 0x05
    14f8:	84 83       	std	Z+4, r24	; 0x04
    14fa:	f8 01       	movw	r30, r16
    14fc:	80 85       	ldd	r24, Z+8	; 0x08
    14fe:	88 23       	and	r24, r24
    1500:	31 f0       	breq	.+12     	; 0x150e <xQueueSemaphoreTake+0x62>
    1502:	c8 01       	movw	r24, r16
    1504:	08 96       	adiw	r24, 0x08	; 8
    1506:	0e 94 94 14 	call	0x2928	; 0x2928 <xTaskRemoveFromEventList>
    150a:	81 11       	cpse	r24, r1
    150c:	3d dc       	rcall	.-1926   	; 0xd88 <vPortYield>
    150e:	0f 90       	pop	r0
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	6f c0       	rjmp	.+222    	; 0x15f4 <xQueueSemaphoreTake+0x148>
    1516:	8e 81       	ldd	r24, Y+6	; 0x06
    1518:	9f 81       	ldd	r25, Y+7	; 0x07
    151a:	a8 85       	ldd	r26, Y+8	; 0x08
    151c:	b9 85       	ldd	r27, Y+9	; 0x09
    151e:	89 2b       	or	r24, r25
    1520:	8a 2b       	or	r24, r26
    1522:	8b 2b       	or	r24, r27
    1524:	21 f4       	brne	.+8      	; 0x152e <xQueueSemaphoreTake+0x82>
    1526:	0f 90       	pop	r0
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	63 c0       	rjmp	.+198    	; 0x15f4 <xQueueSemaphoreTake+0x148>
    152e:	f1 10       	cpse	r15, r1
    1530:	06 c0       	rjmp	.+12     	; 0x153e <xQueueSemaphoreTake+0x92>
    1532:	ce 01       	movw	r24, r28
    1534:	01 96       	adiw	r24, 0x01	; 1
    1536:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <vTaskInternalSetTimeOutState>
    153a:	ff 24       	eor	r15, r15
    153c:	f3 94       	inc	r15
    153e:	0f 90       	pop	r0
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	4e d6       	rcall	.+3228   	; 0x21e0 <vTaskSuspendAll>
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	0f 92       	push	r0
    154a:	f8 01       	movw	r30, r16
    154c:	81 a1       	ldd	r24, Z+33	; 0x21
    154e:	8f 3f       	cpi	r24, 0xFF	; 255
    1550:	09 f4       	brne	.+2      	; 0x1554 <xQueueSemaphoreTake+0xa8>
    1552:	11 a2       	std	Z+33, r1	; 0x21
    1554:	f8 01       	movw	r30, r16
    1556:	82 a1       	ldd	r24, Z+34	; 0x22
    1558:	8f 3f       	cpi	r24, 0xFF	; 255
    155a:	09 f4       	brne	.+2      	; 0x155e <xQueueSemaphoreTake+0xb2>
    155c:	12 a2       	std	Z+34, r1	; 0x22
    155e:	0f 90       	pop	r0
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	be 01       	movw	r22, r28
    1564:	6a 5f       	subi	r22, 0xFA	; 250
    1566:	7f 4f       	sbci	r23, 0xFF	; 255
    1568:	ce 01       	movw	r24, r28
    156a:	01 96       	adiw	r24, 0x01	; 1
    156c:	0e 94 04 16 	call	0x2c08	; 0x2c08 <xTaskCheckForTimeOut>
    1570:	81 11       	cpse	r24, r1
    1572:	26 c0       	rjmp	.+76     	; 0x15c0 <xQueueSemaphoreTake+0x114>
    1574:	c8 01       	movw	r24, r16
    1576:	e0 dc       	rcall	.-1600   	; 0xf38 <prvIsQueueEmpty>
    1578:	88 23       	and	r24, r24
    157a:	f1 f0       	breq	.+60     	; 0x15b8 <xQueueSemaphoreTake+0x10c>
    157c:	f8 01       	movw	r30, r16
    157e:	80 81       	ld	r24, Z
    1580:	91 81       	ldd	r25, Z+1	; 0x01
    1582:	89 2b       	or	r24, r25
    1584:	51 f4       	brne	.+20     	; 0x159a <xQueueSemaphoreTake+0xee>
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	0f 92       	push	r0
    158c:	84 81       	ldd	r24, Z+4	; 0x04
    158e:	95 81       	ldd	r25, Z+5	; 0x05
    1590:	0e 94 81 16 	call	0x2d02	; 0x2d02 <xTaskPriorityInherit>
    1594:	e8 2e       	mov	r14, r24
    1596:	0f 90       	pop	r0
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	4e 81       	ldd	r20, Y+6	; 0x06
    159c:	5f 81       	ldd	r21, Y+7	; 0x07
    159e:	68 85       	ldd	r22, Y+8	; 0x08
    15a0:	79 85       	ldd	r23, Y+9	; 0x09
    15a2:	c8 01       	movw	r24, r16
    15a4:	43 96       	adiw	r24, 0x13	; 19
    15a6:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <vTaskPlaceOnEventList>
    15aa:	c8 01       	movw	r24, r16
    15ac:	59 dd       	rcall	.-1358   	; 0x1060 <prvUnlockQueue>
    15ae:	58 d7       	rcall	.+3760   	; 0x2460 <xTaskResumeAll>
    15b0:	81 11       	cpse	r24, r1
    15b2:	91 cf       	rjmp	.-222    	; 0x14d6 <xQueueSemaphoreTake+0x2a>
    15b4:	e9 db       	rcall	.-2094   	; 0xd88 <vPortYield>
    15b6:	8f cf       	rjmp	.-226    	; 0x14d6 <xQueueSemaphoreTake+0x2a>
    15b8:	c8 01       	movw	r24, r16
    15ba:	52 dd       	rcall	.-1372   	; 0x1060 <prvUnlockQueue>
    15bc:	51 d7       	rcall	.+3746   	; 0x2460 <xTaskResumeAll>
    15be:	8b cf       	rjmp	.-234    	; 0x14d6 <xQueueSemaphoreTake+0x2a>
    15c0:	c8 01       	movw	r24, r16
    15c2:	4e dd       	rcall	.-1380   	; 0x1060 <prvUnlockQueue>
    15c4:	4d d7       	rcall	.+3738   	; 0x2460 <xTaskResumeAll>
    15c6:	c8 01       	movw	r24, r16
    15c8:	b7 dc       	rcall	.-1682   	; 0xf38 <prvIsQueueEmpty>
    15ca:	88 23       	and	r24, r24
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <xQueueSemaphoreTake+0x124>
    15ce:	83 cf       	rjmp	.-250    	; 0x14d6 <xQueueSemaphoreTake+0x2a>
    15d0:	ee 20       	and	r14, r14
    15d2:	79 f0       	breq	.+30     	; 0x15f2 <xQueueSemaphoreTake+0x146>
    15d4:	0f b6       	in	r0, 0x3f	; 63
    15d6:	f8 94       	cli
    15d8:	0f 92       	push	r0
    15da:	c8 01       	movw	r24, r16
    15dc:	9d dc       	rcall	.-1734   	; 0xf18 <prvGetDisinheritPriorityAfterTimeout>
    15de:	68 2f       	mov	r22, r24
    15e0:	f8 01       	movw	r30, r16
    15e2:	84 81       	ldd	r24, Z+4	; 0x04
    15e4:	95 81       	ldd	r25, Z+5	; 0x05
    15e6:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <vTaskPriorityDisinheritAfterTimeout>
    15ea:	0f 90       	pop	r0
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	01 c0       	rjmp	.+2      	; 0x15f4 <xQueueSemaphoreTake+0x148>
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	29 96       	adiw	r28, 0x09	; 9
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	ff 90       	pop	r15
    160a:	ef 90       	pop	r14
    160c:	08 95       	ret

0000160e <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	0f 92       	push	r0
    161a:	89 a1       	ldd	r24, Y+33	; 0x21
    161c:	8f 3f       	cpi	r24, 0xFF	; 255
    161e:	09 f4       	brne	.+2      	; 0x1622 <vQueueWaitForMessageRestricted+0x14>
    1620:	19 a2       	std	Y+33, r1	; 0x21
    1622:	8a a1       	ldd	r24, Y+34	; 0x22
    1624:	8f 3f       	cpi	r24, 0xFF	; 255
    1626:	09 f4       	brne	.+2      	; 0x162a <vQueueWaitForMessageRestricted+0x1c>
    1628:	1a a2       	std	Y+34, r1	; 0x22
    162a:	0f 90       	pop	r0
    162c:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    162e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1630:	81 11       	cpse	r24, r1
    1632:	04 c0       	rjmp	.+8      	; 0x163c <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1634:	ce 01       	movw	r24, r28
    1636:	43 96       	adiw	r24, 0x13	; 19
    1638:	0e 94 52 14 	call	0x28a4	; 0x28a4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    163c:	ce 01       	movw	r24, r28
    163e:	10 dd       	rcall	.-1504   	; 0x1060 <prvUnlockQueue>
    }
    1640:	df 91       	pop	r29
    1642:	cf 91       	pop	r28
    1644:	08 95       	ret

00001646 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1646:	fc 01       	movw	r30, r24
    1648:	44 81       	ldd	r20, Z+4	; 0x04
    164a:	55 81       	ldd	r21, Z+5	; 0x05
    164c:	22 81       	ldd	r18, Z+2	; 0x02
    164e:	33 81       	ldd	r19, Z+3	; 0x03
    1650:	24 0f       	add	r18, r20
    1652:	35 1f       	adc	r19, r21
    1654:	80 81       	ld	r24, Z
    1656:	91 81       	ldd	r25, Z+1	; 0x01
    1658:	b9 01       	movw	r22, r18
    165a:	68 1b       	sub	r22, r24
    165c:	79 0b       	sbc	r23, r25
    165e:	cb 01       	movw	r24, r22
    1660:	64 17       	cp	r22, r20
    1662:	75 07       	cpc	r23, r21
    1664:	10 f0       	brcs	.+4      	; 0x166a <prvBytesInBuffer+0x24>
    1666:	84 1b       	sub	r24, r20
    1668:	95 0b       	sbc	r25, r21
    166a:	08 95       	ret

0000166c <prvInitialiseNewStreamBuffer>:
    166c:	0f 93       	push	r16
    166e:	fc 01       	movw	r30, r24
    1670:	8f e0       	ldi	r24, 0x0F	; 15
    1672:	df 01       	movw	r26, r30
    1674:	1d 92       	st	X+, r1
    1676:	8a 95       	dec	r24
    1678:	e9 f7       	brne	.-6      	; 0x1674 <prvInitialiseNewStreamBuffer+0x8>
    167a:	75 87       	std	Z+13, r23	; 0x0d
    167c:	64 87       	std	Z+12, r22	; 0x0c
    167e:	55 83       	std	Z+5, r21	; 0x05
    1680:	44 83       	std	Z+4, r20	; 0x04
    1682:	37 83       	std	Z+7, r19	; 0x07
    1684:	26 83       	std	Z+6, r18	; 0x06
    1686:	06 87       	std	Z+14, r16	; 0x0e
    1688:	0f 91       	pop	r16
    168a:	08 95       	ret

0000168c <prvWriteBytesToBuffer>:
    168c:	af 92       	push	r10
    168e:	bf 92       	push	r11
    1690:	cf 92       	push	r12
    1692:	df 92       	push	r13
    1694:	ef 92       	push	r14
    1696:	ff 92       	push	r15
    1698:	0f 93       	push	r16
    169a:	1f 93       	push	r17
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	6c 01       	movw	r12, r24
    16a2:	5b 01       	movw	r10, r22
    16a4:	7a 01       	movw	r14, r20
    16a6:	fc 01       	movw	r30, r24
    16a8:	c2 81       	ldd	r28, Z+2	; 0x02
    16aa:	d3 81       	ldd	r29, Z+3	; 0x03
    16ac:	04 81       	ldd	r16, Z+4	; 0x04
    16ae:	15 81       	ldd	r17, Z+5	; 0x05
    16b0:	0c 1b       	sub	r16, r28
    16b2:	1d 0b       	sbc	r17, r29
    16b4:	40 17       	cp	r20, r16
    16b6:	51 07       	cpc	r21, r17
    16b8:	08 f4       	brcc	.+2      	; 0x16bc <prvWriteBytesToBuffer+0x30>
    16ba:	8a 01       	movw	r16, r20
    16bc:	f6 01       	movw	r30, r12
    16be:	84 85       	ldd	r24, Z+12	; 0x0c
    16c0:	95 85       	ldd	r25, Z+13	; 0x0d
    16c2:	a8 01       	movw	r20, r16
    16c4:	b5 01       	movw	r22, r10
    16c6:	8c 0f       	add	r24, r28
    16c8:	9d 1f       	adc	r25, r29
    16ca:	0e 94 d6 35 	call	0x6bac	; 0x6bac <memcpy>
    16ce:	0e 15       	cp	r16, r14
    16d0:	1f 05       	cpc	r17, r15
    16d2:	58 f4       	brcc	.+22     	; 0x16ea <prvWriteBytesToBuffer+0x5e>
    16d4:	a7 01       	movw	r20, r14
    16d6:	40 1b       	sub	r20, r16
    16d8:	51 0b       	sbc	r21, r17
    16da:	b5 01       	movw	r22, r10
    16dc:	60 0f       	add	r22, r16
    16de:	71 1f       	adc	r23, r17
    16e0:	f6 01       	movw	r30, r12
    16e2:	84 85       	ldd	r24, Z+12	; 0x0c
    16e4:	95 85       	ldd	r25, Z+13	; 0x0d
    16e6:	0e 94 d6 35 	call	0x6bac	; 0x6bac <memcpy>
    16ea:	ce 01       	movw	r24, r28
    16ec:	8e 0d       	add	r24, r14
    16ee:	9f 1d       	adc	r25, r15
    16f0:	f6 01       	movw	r30, r12
    16f2:	24 81       	ldd	r18, Z+4	; 0x04
    16f4:	35 81       	ldd	r19, Z+5	; 0x05
    16f6:	82 17       	cp	r24, r18
    16f8:	93 07       	cpc	r25, r19
    16fa:	10 f0       	brcs	.+4      	; 0x1700 <prvWriteBytesToBuffer+0x74>
    16fc:	82 1b       	sub	r24, r18
    16fe:	93 0b       	sbc	r25, r19
    1700:	f6 01       	movw	r30, r12
    1702:	93 83       	std	Z+3, r25	; 0x03
    1704:	82 83       	std	Z+2, r24	; 0x02
    1706:	c7 01       	movw	r24, r14
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	ff 90       	pop	r15
    1712:	ef 90       	pop	r14
    1714:	df 90       	pop	r13
    1716:	cf 90       	pop	r12
    1718:	bf 90       	pop	r11
    171a:	af 90       	pop	r10
    171c:	08 95       	ret

0000171e <prvWriteMessageToBuffer>:
    171e:	cf 92       	push	r12
    1720:	df 92       	push	r13
    1722:	ef 92       	push	r14
    1724:	ff 92       	push	r15
    1726:	0f 93       	push	r16
    1728:	1f 93       	push	r17
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	1f 92       	push	r1
    1730:	1f 92       	push	r1
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	7c 01       	movw	r14, r24
    1738:	6b 01       	movw	r12, r22
    173a:	5a 83       	std	Y+2, r21	; 0x02
    173c:	49 83       	std	Y+1, r20	; 0x01
    173e:	21 15       	cp	r18, r1
    1740:	31 05       	cpc	r19, r1
    1742:	c1 f0       	breq	.+48     	; 0x1774 <prvWriteMessageToBuffer+0x56>
    1744:	fc 01       	movw	r30, r24
    1746:	86 85       	ldd	r24, Z+14	; 0x0e
    1748:	80 fd       	sbrc	r24, 0
    174a:	08 c0       	rjmp	.+16     	; 0x175c <prvWriteMessageToBuffer+0x3e>
    174c:	42 17       	cp	r20, r18
    174e:	53 07       	cpc	r21, r19
    1750:	08 f4       	brcc	.+2      	; 0x1754 <prvWriteMessageToBuffer+0x36>
    1752:	9a 01       	movw	r18, r20
    1754:	3a 83       	std	Y+2, r19	; 0x02
    1756:	29 83       	std	Y+1, r18	; 0x01
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	0f c0       	rjmp	.+30     	; 0x177a <prvWriteMessageToBuffer+0x5c>
    175c:	20 17       	cp	r18, r16
    175e:	31 07       	cpc	r19, r17
    1760:	58 f0       	brcs	.+22     	; 0x1778 <prvWriteMessageToBuffer+0x5a>
    1762:	42 e0       	ldi	r20, 0x02	; 2
    1764:	50 e0       	ldi	r21, 0x00	; 0
    1766:	be 01       	movw	r22, r28
    1768:	6f 5f       	subi	r22, 0xFF	; 255
    176a:	7f 4f       	sbci	r23, 0xFF	; 255
    176c:	c7 01       	movw	r24, r14
    176e:	8e df       	rcall	.-228    	; 0x168c <prvWriteBytesToBuffer>
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	03 c0       	rjmp	.+6      	; 0x177a <prvWriteMessageToBuffer+0x5c>
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	01 c0       	rjmp	.+2      	; 0x177a <prvWriteMessageToBuffer+0x5c>
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	88 23       	and	r24, r24
    177c:	31 f0       	breq	.+12     	; 0x178a <prvWriteMessageToBuffer+0x6c>
    177e:	49 81       	ldd	r20, Y+1	; 0x01
    1780:	5a 81       	ldd	r21, Y+2	; 0x02
    1782:	b6 01       	movw	r22, r12
    1784:	c7 01       	movw	r24, r14
    1786:	82 df       	rcall	.-252    	; 0x168c <prvWriteBytesToBuffer>
    1788:	02 c0       	rjmp	.+4      	; 0x178e <prvWriteMessageToBuffer+0x70>
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	ff 90       	pop	r15
    179c:	ef 90       	pop	r14
    179e:	df 90       	pop	r13
    17a0:	cf 90       	pop	r12
    17a2:	08 95       	ret

000017a4 <prvReadBytesFromBuffer>:
    17a4:	af 92       	push	r10
    17a6:	bf 92       	push	r11
    17a8:	cf 92       	push	r12
    17aa:	df 92       	push	r13
    17ac:	ef 92       	push	r14
    17ae:	ff 92       	push	r15
    17b0:	0f 93       	push	r16
    17b2:	1f 93       	push	r17
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	7c 01       	movw	r14, r24
    17ba:	5b 01       	movw	r10, r22
    17bc:	e9 01       	movw	r28, r18
    17be:	42 17       	cp	r20, r18
    17c0:	53 07       	cpc	r21, r19
    17c2:	08 f4       	brcc	.+2      	; 0x17c6 <prvReadBytesFromBuffer+0x22>
    17c4:	ea 01       	movw	r28, r20
    17c6:	20 97       	sbiw	r28, 0x00	; 0
    17c8:	81 f1       	breq	.+96     	; 0x182a <prvReadBytesFromBuffer+0x86>
    17ca:	f7 01       	movw	r30, r14
    17cc:	00 81       	ld	r16, Z
    17ce:	11 81       	ldd	r17, Z+1	; 0x01
    17d0:	84 81       	ldd	r24, Z+4	; 0x04
    17d2:	95 81       	ldd	r25, Z+5	; 0x05
    17d4:	80 1b       	sub	r24, r16
    17d6:	91 0b       	sbc	r25, r17
    17d8:	6e 01       	movw	r12, r28
    17da:	8c 17       	cp	r24, r28
    17dc:	9d 07       	cpc	r25, r29
    17de:	08 f4       	brcc	.+2      	; 0x17e2 <prvReadBytesFromBuffer+0x3e>
    17e0:	6c 01       	movw	r12, r24
    17e2:	f7 01       	movw	r30, r14
    17e4:	64 85       	ldd	r22, Z+12	; 0x0c
    17e6:	75 85       	ldd	r23, Z+13	; 0x0d
    17e8:	60 0f       	add	r22, r16
    17ea:	71 1f       	adc	r23, r17
    17ec:	a6 01       	movw	r20, r12
    17ee:	c5 01       	movw	r24, r10
    17f0:	0e 94 d6 35 	call	0x6bac	; 0x6bac <memcpy>
    17f4:	cc 16       	cp	r12, r28
    17f6:	dd 06       	cpc	r13, r29
    17f8:	58 f4       	brcc	.+22     	; 0x1810 <prvReadBytesFromBuffer+0x6c>
    17fa:	ae 01       	movw	r20, r28
    17fc:	4c 19       	sub	r20, r12
    17fe:	5d 09       	sbc	r21, r13
    1800:	f7 01       	movw	r30, r14
    1802:	64 85       	ldd	r22, Z+12	; 0x0c
    1804:	75 85       	ldd	r23, Z+13	; 0x0d
    1806:	c5 01       	movw	r24, r10
    1808:	8c 0d       	add	r24, r12
    180a:	9d 1d       	adc	r25, r13
    180c:	0e 94 d6 35 	call	0x6bac	; 0x6bac <memcpy>
    1810:	0c 0f       	add	r16, r28
    1812:	1d 1f       	adc	r17, r29
    1814:	f7 01       	movw	r30, r14
    1816:	84 81       	ldd	r24, Z+4	; 0x04
    1818:	95 81       	ldd	r25, Z+5	; 0x05
    181a:	08 17       	cp	r16, r24
    181c:	19 07       	cpc	r17, r25
    181e:	10 f0       	brcs	.+4      	; 0x1824 <prvReadBytesFromBuffer+0x80>
    1820:	08 1b       	sub	r16, r24
    1822:	19 0b       	sbc	r17, r25
    1824:	f7 01       	movw	r30, r14
    1826:	11 83       	std	Z+1, r17	; 0x01
    1828:	00 83       	st	Z, r16
    182a:	ce 01       	movw	r24, r28
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	1f 91       	pop	r17
    1832:	0f 91       	pop	r16
    1834:	ff 90       	pop	r15
    1836:	ef 90       	pop	r14
    1838:	df 90       	pop	r13
    183a:	cf 90       	pop	r12
    183c:	bf 90       	pop	r11
    183e:	af 90       	pop	r10
    1840:	08 95       	ret

00001842 <prvReadMessageFromBuffer>:
    1842:	6f 92       	push	r6
    1844:	7f 92       	push	r7
    1846:	8f 92       	push	r8
    1848:	9f 92       	push	r9
    184a:	af 92       	push	r10
    184c:	bf 92       	push	r11
    184e:	cf 92       	push	r12
    1850:	df 92       	push	r13
    1852:	ef 92       	push	r14
    1854:	ff 92       	push	r15
    1856:	0f 93       	push	r16
    1858:	1f 93       	push	r17
    185a:	cf 93       	push	r28
    185c:	df 93       	push	r29
    185e:	1f 92       	push	r1
    1860:	1f 92       	push	r1
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	6c 01       	movw	r12, r24
    1868:	4b 01       	movw	r8, r22
    186a:	5a 01       	movw	r10, r20
    186c:	79 01       	movw	r14, r18
    186e:	01 15       	cp	r16, r1
    1870:	11 05       	cpc	r17, r1
    1872:	b1 f0       	breq	.+44     	; 0x18a0 <prvReadMessageFromBuffer+0x5e>
    1874:	fc 01       	movw	r30, r24
    1876:	60 80       	ld	r6, Z
    1878:	71 80       	ldd	r7, Z+1	; 0x01
    187a:	a8 01       	movw	r20, r16
    187c:	be 01       	movw	r22, r28
    187e:	6f 5f       	subi	r22, 0xFF	; 255
    1880:	7f 4f       	sbci	r23, 0xFF	; 255
    1882:	90 df       	rcall	.-224    	; 0x17a4 <prvReadBytesFromBuffer>
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	9a 81       	ldd	r25, Y+2	; 0x02
    1888:	e0 1a       	sub	r14, r16
    188a:	f1 0a       	sbc	r15, r17
    188c:	a8 16       	cp	r10, r24
    188e:	b9 06       	cpc	r11, r25
    1890:	30 f4       	brcc	.+12     	; 0x189e <prvReadMessageFromBuffer+0x5c>
    1892:	f6 01       	movw	r30, r12
    1894:	71 82       	std	Z+1, r7	; 0x01
    1896:	60 82       	st	Z, r6
    1898:	a1 2c       	mov	r10, r1
    189a:	b1 2c       	mov	r11, r1
    189c:	01 c0       	rjmp	.+2      	; 0x18a0 <prvReadMessageFromBuffer+0x5e>
    189e:	5c 01       	movw	r10, r24
    18a0:	97 01       	movw	r18, r14
    18a2:	a5 01       	movw	r20, r10
    18a4:	b4 01       	movw	r22, r8
    18a6:	c6 01       	movw	r24, r12
    18a8:	7d df       	rcall	.-262    	; 0x17a4 <prvReadBytesFromBuffer>
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	1f 91       	pop	r17
    18b4:	0f 91       	pop	r16
    18b6:	ff 90       	pop	r15
    18b8:	ef 90       	pop	r14
    18ba:	df 90       	pop	r13
    18bc:	cf 90       	pop	r12
    18be:	bf 90       	pop	r11
    18c0:	af 90       	pop	r10
    18c2:	9f 90       	pop	r9
    18c4:	8f 90       	pop	r8
    18c6:	7f 90       	pop	r7
    18c8:	6f 90       	pop	r6
    18ca:	08 95       	ret

000018cc <xStreamBufferGenericCreate>:
    18cc:	cf 92       	push	r12
    18ce:	df 92       	push	r13
    18d0:	ef 92       	push	r14
    18d2:	ff 92       	push	r15
    18d4:	0f 93       	push	r16
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	ec 01       	movw	r28, r24
    18dc:	6b 01       	movw	r12, r22
    18de:	41 30       	cpi	r20, 0x01	; 1
    18e0:	11 f4       	brne	.+4      	; 0x18e6 <xStreamBufferGenericCreate+0x1a>
    18e2:	01 e0       	ldi	r16, 0x01	; 1
    18e4:	01 c0       	rjmp	.+2      	; 0x18e8 <xStreamBufferGenericCreate+0x1c>
    18e6:	00 e0       	ldi	r16, 0x00	; 0
    18e8:	c1 14       	cp	r12, r1
    18ea:	d1 04       	cpc	r13, r1
    18ec:	19 f4       	brne	.+6      	; 0x18f4 <xStreamBufferGenericCreate+0x28>
    18ee:	cc 24       	eor	r12, r12
    18f0:	c3 94       	inc	r12
    18f2:	d1 2c       	mov	r13, r1
    18f4:	ce 01       	movw	r24, r28
    18f6:	40 96       	adiw	r24, 0x10	; 16
    18f8:	c8 17       	cp	r28, r24
    18fa:	d9 07       	cpc	r29, r25
    18fc:	20 f4       	brcc	.+8      	; 0x1906 <xStreamBufferGenericCreate+0x3a>
    18fe:	21 96       	adiw	r28, 0x01	; 1
    1900:	8f d8       	rcall	.-3810   	; 0xa20 <pvPortMalloc>
    1902:	7c 01       	movw	r14, r24
    1904:	02 c0       	rjmp	.+4      	; 0x190a <xStreamBufferGenericCreate+0x3e>
    1906:	e1 2c       	mov	r14, r1
    1908:	f1 2c       	mov	r15, r1
    190a:	e1 14       	cp	r14, r1
    190c:	f1 04       	cpc	r15, r1
    190e:	39 f0       	breq	.+14     	; 0x191e <xStreamBufferGenericCreate+0x52>
    1910:	96 01       	movw	r18, r12
    1912:	ae 01       	movw	r20, r28
    1914:	b7 01       	movw	r22, r14
    1916:	61 5f       	subi	r22, 0xF1	; 241
    1918:	7f 4f       	sbci	r23, 0xFF	; 255
    191a:	c7 01       	movw	r24, r14
    191c:	a7 de       	rcall	.-690    	; 0x166c <prvInitialiseNewStreamBuffer>
    191e:	c7 01       	movw	r24, r14
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	0f 91       	pop	r16
    1926:	ff 90       	pop	r15
    1928:	ef 90       	pop	r14
    192a:	df 90       	pop	r13
    192c:	cf 90       	pop	r12
    192e:	08 95       	ret

00001930 <xStreamBufferReset>:
    1930:	0f 93       	push	r16
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    1936:	0f 92       	push	r0
    1938:	fc 01       	movw	r30, r24
    193a:	20 85       	ldd	r18, Z+8	; 0x08
    193c:	31 85       	ldd	r19, Z+9	; 0x09
    193e:	23 2b       	or	r18, r19
    1940:	71 f4       	brne	.+28     	; 0x195e <xStreamBufferReset+0x2e>
    1942:	22 85       	ldd	r18, Z+10	; 0x0a
    1944:	33 85       	ldd	r19, Z+11	; 0x0b
    1946:	23 2b       	or	r18, r19
    1948:	61 f4       	brne	.+24     	; 0x1962 <xStreamBufferReset+0x32>
    194a:	26 81       	ldd	r18, Z+6	; 0x06
    194c:	37 81       	ldd	r19, Z+7	; 0x07
    194e:	44 81       	ldd	r20, Z+4	; 0x04
    1950:	55 81       	ldd	r21, Z+5	; 0x05
    1952:	64 85       	ldd	r22, Z+12	; 0x0c
    1954:	75 85       	ldd	r23, Z+13	; 0x0d
    1956:	06 85       	ldd	r16, Z+14	; 0x0e
    1958:	89 de       	rcall	.-750    	; 0x166c <prvInitialiseNewStreamBuffer>
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	03 c0       	rjmp	.+6      	; 0x1964 <xStreamBufferReset+0x34>
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	01 c0       	rjmp	.+2      	; 0x1964 <xStreamBufferReset+0x34>
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	0f 90       	pop	r0
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	0f 91       	pop	r16
    196a:	08 95       	ret

0000196c <xStreamBufferSpacesAvailable>:
    196c:	fc 01       	movw	r30, r24
    196e:	24 81       	ldd	r18, Z+4	; 0x04
    1970:	35 81       	ldd	r19, Z+5	; 0x05
    1972:	80 81       	ld	r24, Z
    1974:	91 81       	ldd	r25, Z+1	; 0x01
    1976:	82 0f       	add	r24, r18
    1978:	93 1f       	adc	r25, r19
    197a:	42 81       	ldd	r20, Z+2	; 0x02
    197c:	53 81       	ldd	r21, Z+3	; 0x03
    197e:	84 1b       	sub	r24, r20
    1980:	95 0b       	sbc	r25, r21
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	82 17       	cp	r24, r18
    1986:	93 07       	cpc	r25, r19
    1988:	10 f0       	brcs	.+4      	; 0x198e <xStreamBufferSpacesAvailable+0x22>
    198a:	82 1b       	sub	r24, r18
    198c:	93 0b       	sbc	r25, r19
    198e:	08 95       	ret

00001990 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1990:	2f 92       	push	r2
    1992:	3f 92       	push	r3
    1994:	4f 92       	push	r4
    1996:	5f 92       	push	r5
    1998:	6f 92       	push	r6
    199a:	7f 92       	push	r7
    199c:	8f 92       	push	r8
    199e:	9f 92       	push	r9
    19a0:	af 92       	push	r10
    19a2:	bf 92       	push	r11
    19a4:	cf 92       	push	r12
    19a6:	df 92       	push	r13
    19a8:	ef 92       	push	r14
    19aa:	ff 92       	push	r15
    19ac:	0f 93       	push	r16
    19ae:	1f 93       	push	r17
    19b0:	cf 93       	push	r28
    19b2:	df 93       	push	r29
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	2b 97       	sbiw	r28, 0x0b	; 11
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	f8 94       	cli
    19be:	de bf       	out	0x3e, r29	; 62
    19c0:	0f be       	out	0x3f, r0	; 63
    19c2:	cd bf       	out	0x3d, r28	; 61
    19c4:	4c 01       	movw	r8, r24
    19c6:	7b 87       	std	Y+11, r23	; 0x0b
    19c8:	6a 87       	std	Y+10, r22	; 0x0a
    19ca:	1a 01       	movw	r2, r20
    19cc:	0e 83       	std	Y+6, r16	; 0x06
    19ce:	1f 83       	std	Y+7, r17	; 0x07
    19d0:	28 87       	std	Y+8, r18	; 0x08
    19d2:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    19d4:	fc 01       	movw	r30, r24
    19d6:	84 81       	ldd	r24, Z+4	; 0x04
    19d8:	95 81       	ldd	r25, Z+5	; 0x05
    19da:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    19dc:	26 85       	ldd	r18, Z+14	; 0x0e
    19de:	20 ff       	sbrs	r18, 0
    19e0:	0c c0       	rjmp	.+24     	; 0x19fa <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    19e2:	2a 01       	movw	r4, r20
    19e4:	f2 e0       	ldi	r31, 0x02	; 2
    19e6:	4f 0e       	add	r4, r31
    19e8:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    19ea:	84 15       	cp	r24, r4
    19ec:	95 05       	cpc	r25, r5
    19ee:	58 f4       	brcc	.+22     	; 0x1a06 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    19f0:	1e 82       	std	Y+6, r1	; 0x06
    19f2:	1f 82       	std	Y+7, r1	; 0x07
    19f4:	18 86       	std	Y+8, r1	; 0x08
    19f6:	19 86       	std	Y+9, r1	; 0x09
    19f8:	06 c0       	rjmp	.+12     	; 0x1a06 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    19fa:	84 17       	cp	r24, r20
    19fc:	95 07       	cpc	r25, r21
    19fe:	10 f0       	brcs	.+4      	; 0x1a04 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1a00:	2a 01       	movw	r4, r20
    1a02:	01 c0       	rjmp	.+2      	; 0x1a06 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1a04:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1a06:	8e 81       	ldd	r24, Y+6	; 0x06
    1a08:	9f 81       	ldd	r25, Y+7	; 0x07
    1a0a:	a8 85       	ldd	r26, Y+8	; 0x08
    1a0c:	b9 85       	ldd	r27, Y+9	; 0x09
    1a0e:	89 2b       	or	r24, r25
    1a10:	8a 2b       	or	r24, r26
    1a12:	8b 2b       	or	r24, r27
    1a14:	09 f4       	brne	.+2      	; 0x1a18 <xStreamBufferSend+0x88>
    1a16:	38 c0       	rjmp	.+112    	; 0x1a88 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1a18:	ce 01       	movw	r24, r28
    1a1a:	01 96       	adiw	r24, 0x01	; 1
    1a1c:	0e 94 dd 15 	call	0x2bba	; 0x2bba <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1a26:	c4 01       	movw	r24, r8
    1a28:	a1 df       	rcall	.-190    	; 0x196c <xStreamBufferSpacesAvailable>
    1a2a:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1a2c:	84 15       	cp	r24, r4
    1a2e:	95 05       	cpc	r25, r5
    1a30:	40 f5       	brcc	.+80     	; 0x1a82 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1a32:	60 e0       	ldi	r22, 0x00	; 0
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	0e 94 c7 1a 	call	0x358e	; 0x358e <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1a3c:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <xTaskGetCurrentTaskHandle>
    1a40:	f4 01       	movw	r30, r8
    1a42:	93 87       	std	Z+11, r25	; 0x0b
    1a44:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1a46:	0f 90       	pop	r0
    1a48:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1a4a:	ae 80       	ldd	r10, Y+6	; 0x06
    1a4c:	bf 80       	ldd	r11, Y+7	; 0x07
    1a4e:	c8 84       	ldd	r12, Y+8	; 0x08
    1a50:	d9 84       	ldd	r13, Y+9	; 0x09
    1a52:	e1 2c       	mov	r14, r1
    1a54:	f1 2c       	mov	r15, r1
    1a56:	00 e0       	ldi	r16, 0x00	; 0
    1a58:	10 e0       	ldi	r17, 0x00	; 0
    1a5a:	98 01       	movw	r18, r16
    1a5c:	40 e0       	ldi	r20, 0x00	; 0
    1a5e:	50 e0       	ldi	r21, 0x00	; 0
    1a60:	ba 01       	movw	r22, r20
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	0e 94 06 18 	call	0x300c	; 0x300c <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1a68:	f4 01       	movw	r30, r8
    1a6a:	13 86       	std	Z+11, r1	; 0x0b
    1a6c:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1a6e:	be 01       	movw	r22, r28
    1a70:	6a 5f       	subi	r22, 0xFA	; 250
    1a72:	7f 4f       	sbci	r23, 0xFF	; 255
    1a74:	ce 01       	movw	r24, r28
    1a76:	01 96       	adiw	r24, 0x01	; 1
    1a78:	0e 94 04 16 	call	0x2c08	; 0x2c08 <xTaskCheckForTimeOut>
    1a7c:	88 23       	and	r24, r24
    1a7e:	81 f2       	breq	.-96     	; 0x1a20 <xStreamBufferSend+0x90>
    1a80:	05 c0       	rjmp	.+10     	; 0x1a8c <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1a82:	0f 90       	pop	r0
    1a84:	0f be       	out	0x3f, r0	; 63
                    break;
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1a88:	61 2c       	mov	r6, r1
    1a8a:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1a8c:	61 14       	cp	r6, r1
    1a8e:	71 04       	cpc	r7, r1
    1a90:	19 f4       	brne	.+6      	; 0x1a98 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1a92:	c4 01       	movw	r24, r8
    1a94:	6b df       	rcall	.-298    	; 0x196c <xStreamBufferSpacesAvailable>
    1a96:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1a98:	82 01       	movw	r16, r4
    1a9a:	93 01       	movw	r18, r6
    1a9c:	a1 01       	movw	r20, r2
    1a9e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1aa0:	7b 85       	ldd	r23, Y+11	; 0x0b
    1aa2:	c4 01       	movw	r24, r8
    1aa4:	3c de       	rcall	.-904    	; 0x171e <prvWriteMessageToBuffer>
    1aa6:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1aa8:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1aaa:	e9 f0       	breq	.+58     	; 0x1ae6 <xStreamBufferSend+0x156>
    1aac:	c4 01       	movw	r24, r8
    1aae:	cb dd       	rcall	.-1130   	; 0x1646 <prvBytesInBuffer>
    1ab0:	f4 01       	movw	r30, r8
    1ab2:	26 81       	ldd	r18, Z+6	; 0x06
    1ab4:	37 81       	ldd	r19, Z+7	; 0x07
    1ab6:	82 17       	cp	r24, r18
    1ab8:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1aba:	a8 f0       	brcs	.+42     	; 0x1ae6 <xStreamBufferSend+0x156>
    1abc:	91 d3       	rcall	.+1826   	; 0x21e0 <vTaskSuspendAll>
    1abe:	f4 01       	movw	r30, r8
    1ac0:	80 85       	ldd	r24, Z+8	; 0x08
    1ac2:	91 85       	ldd	r25, Z+9	; 0x09
    1ac4:	89 2b       	or	r24, r25
    1ac6:	71 f0       	breq	.+28     	; 0x1ae4 <xStreamBufferSend+0x154>
    1ac8:	80 85       	ldd	r24, Z+8	; 0x08
    1aca:	91 85       	ldd	r25, Z+9	; 0x09
    1acc:	e1 2c       	mov	r14, r1
    1ace:	f1 2c       	mov	r15, r1
    1ad0:	00 e0       	ldi	r16, 0x00	; 0
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	a9 01       	movw	r20, r18
    1ad8:	60 e0       	ldi	r22, 0x00	; 0
    1ada:	0e 94 ae 18 	call	0x315c	; 0x315c <xTaskGenericNotify>
    1ade:	f4 01       	movw	r30, r8
    1ae0:	11 86       	std	Z+9, r1	; 0x09
    1ae2:	10 86       	std	Z+8, r1	; 0x08
    1ae4:	bd d4       	rcall	.+2426   	; 0x2460 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1ae6:	c6 01       	movw	r24, r12
    1ae8:	2b 96       	adiw	r28, 0x0b	; 11
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	cd bf       	out	0x3d, r28	; 61
    1af4:	df 91       	pop	r29
    1af6:	cf 91       	pop	r28
    1af8:	1f 91       	pop	r17
    1afa:	0f 91       	pop	r16
    1afc:	ff 90       	pop	r15
    1afe:	ef 90       	pop	r14
    1b00:	df 90       	pop	r13
    1b02:	cf 90       	pop	r12
    1b04:	bf 90       	pop	r11
    1b06:	af 90       	pop	r10
    1b08:	9f 90       	pop	r9
    1b0a:	8f 90       	pop	r8
    1b0c:	7f 90       	pop	r7
    1b0e:	6f 90       	pop	r6
    1b10:	5f 90       	pop	r5
    1b12:	4f 90       	pop	r4
    1b14:	3f 90       	pop	r3
    1b16:	2f 90       	pop	r2
    1b18:	08 95       	ret

00001b1a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1b1a:	af 92       	push	r10
    1b1c:	bf 92       	push	r11
    1b1e:	cf 92       	push	r12
    1b20:	df 92       	push	r13
    1b22:	ef 92       	push	r14
    1b24:	ff 92       	push	r15
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	ec 01       	movw	r28, r24
    1b30:	7b 01       	movw	r14, r22
    1b32:	5a 01       	movw	r10, r20
    1b34:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1b36:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b38:	80 ff       	sbrs	r24, 0
    1b3a:	04 c0       	rjmp	.+8      	; 0x1b44 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1b3c:	8a 01       	movw	r16, r20
    1b3e:	0e 5f       	subi	r16, 0xFE	; 254
    1b40:	1f 4f       	sbci	r17, 0xFF	; 255
    1b42:	01 c0       	rjmp	.+2      	; 0x1b46 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1b44:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1b46:	ce 01       	movw	r24, r28
    1b48:	11 df       	rcall	.-478    	; 0x196c <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1b4a:	9c 01       	movw	r18, r24
    1b4c:	a5 01       	movw	r20, r10
    1b4e:	b7 01       	movw	r22, r14
    1b50:	ce 01       	movw	r24, r28
    1b52:	e5 dd       	rcall	.-1078   	; 0x171e <prvWriteMessageToBuffer>
    1b54:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1b56:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1b58:	c1 f0       	breq	.+48     	; 0x1b8a <xStreamBufferSendFromISR+0x70>
    1b5a:	ce 01       	movw	r24, r28
    1b5c:	74 dd       	rcall	.-1304   	; 0x1646 <prvBytesInBuffer>
    1b5e:	2e 81       	ldd	r18, Y+6	; 0x06
    1b60:	3f 81       	ldd	r19, Y+7	; 0x07
    1b62:	82 17       	cp	r24, r18
    1b64:	93 07       	cpc	r25, r19
    1b66:	88 f0       	brcs	.+34     	; 0x1b8a <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1b68:	88 85       	ldd	r24, Y+8	; 0x08
    1b6a:	99 85       	ldd	r25, Y+9	; 0x09
    1b6c:	89 2b       	or	r24, r25
    1b6e:	69 f0       	breq	.+26     	; 0x1b8a <xStreamBufferSendFromISR+0x70>
    1b70:	88 85       	ldd	r24, Y+8	; 0x08
    1b72:	99 85       	ldd	r25, Y+9	; 0x09
    1b74:	e1 2c       	mov	r14, r1
    1b76:	f1 2c       	mov	r15, r1
    1b78:	00 e0       	ldi	r16, 0x00	; 0
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	a9 01       	movw	r20, r18
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	0e 94 a5 19 	call	0x334a	; 0x334a <xTaskGenericNotifyFromISR>
    1b86:	19 86       	std	Y+9, r1	; 0x09
    1b88:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1b8a:	c5 01       	movw	r24, r10
    1b8c:	df 91       	pop	r29
    1b8e:	cf 91       	pop	r28
    1b90:	1f 91       	pop	r17
    1b92:	0f 91       	pop	r16
    1b94:	ff 90       	pop	r15
    1b96:	ef 90       	pop	r14
    1b98:	df 90       	pop	r13
    1b9a:	cf 90       	pop	r12
    1b9c:	bf 90       	pop	r11
    1b9e:	af 90       	pop	r10
    1ba0:	08 95       	ret

00001ba2 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1ba2:	4f 92       	push	r4
    1ba4:	5f 92       	push	r5
    1ba6:	6f 92       	push	r6
    1ba8:	7f 92       	push	r7
    1baa:	8f 92       	push	r8
    1bac:	9f 92       	push	r9
    1bae:	af 92       	push	r10
    1bb0:	bf 92       	push	r11
    1bb2:	cf 92       	push	r12
    1bb4:	df 92       	push	r13
    1bb6:	ef 92       	push	r14
    1bb8:	ff 92       	push	r15
    1bba:	0f 93       	push	r16
    1bbc:	1f 93       	push	r17
    1bbe:	cf 93       	push	r28
    1bc0:	df 93       	push	r29
    1bc2:	ec 01       	movw	r28, r24
    1bc4:	2b 01       	movw	r4, r22
    1bc6:	3a 01       	movw	r6, r20
    1bc8:	58 01       	movw	r10, r16
    1bca:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1bcc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bce:	80 ff       	sbrs	r24, 0
    1bd0:	05 c0       	rjmp	.+10     	; 0x1bdc <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1bd2:	68 94       	set
    1bd4:	88 24       	eor	r8, r8
    1bd6:	81 f8       	bld	r8, 1
    1bd8:	91 2c       	mov	r9, r1
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1bdc:	81 2c       	mov	r8, r1
    1bde:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1be0:	a1 14       	cp	r10, r1
    1be2:	b1 04       	cpc	r11, r1
    1be4:	c1 04       	cpc	r12, r1
    1be6:	d1 04       	cpc	r13, r1
    1be8:	41 f1       	breq	.+80     	; 0x1c3a <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	f8 94       	cli
    1bee:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	29 dd       	rcall	.-1454   	; 0x1646 <prvBytesInBuffer>
    1bf4:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1bf6:	88 16       	cp	r8, r24
    1bf8:	99 06       	cpc	r9, r25
    1bfa:	48 f0       	brcs	.+18     	; 0x1c0e <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1bfc:	60 e0       	ldi	r22, 0x00	; 0
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	0e 94 c7 1a 	call	0x358e	; 0x358e <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1c06:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <xTaskGetCurrentTaskHandle>
    1c0a:	99 87       	std	Y+9, r25	; 0x09
    1c0c:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1c0e:	0f 90       	pop	r0
    1c10:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1c12:	8e 14       	cp	r8, r14
    1c14:	9f 04       	cpc	r9, r15
    1c16:	a0 f0       	brcs	.+40     	; 0x1c40 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1c18:	e1 2c       	mov	r14, r1
    1c1a:	f1 2c       	mov	r15, r1
    1c1c:	00 e0       	ldi	r16, 0x00	; 0
    1c1e:	10 e0       	ldi	r17, 0x00	; 0
    1c20:	98 01       	movw	r18, r16
    1c22:	40 e0       	ldi	r20, 0x00	; 0
    1c24:	50 e0       	ldi	r21, 0x00	; 0
    1c26:	ba 01       	movw	r22, r20
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	0e 94 06 18 	call	0x300c	; 0x300c <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1c2e:	19 86       	std	Y+9, r1	; 0x09
    1c30:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1c32:	ce 01       	movw	r24, r28
    1c34:	08 dd       	rcall	.-1520   	; 0x1646 <prvBytesInBuffer>
    1c36:	7c 01       	movw	r14, r24
    1c38:	03 c0       	rjmp	.+6      	; 0x1c40 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1c3a:	ce 01       	movw	r24, r28
    1c3c:	04 dd       	rcall	.-1528   	; 0x1646 <prvBytesInBuffer>
    1c3e:	7c 01       	movw	r14, r24
    1c40:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1c42:	9f 04       	cpc	r9, r15
    1c44:	e8 f4       	brcc	.+58     	; 0x1c80 <xStreamBufferReceive+0xde>
    1c46:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1c48:	97 01       	movw	r18, r14
    1c4a:	a3 01       	movw	r20, r6
    1c4c:	b2 01       	movw	r22, r4
    1c4e:	ce 01       	movw	r24, r28
    1c50:	f8 dd       	rcall	.-1040   	; 0x1842 <prvReadMessageFromBuffer>
    1c52:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1c54:	89 2b       	or	r24, r25
    1c56:	b1 f0       	breq	.+44     	; 0x1c84 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1c58:	c3 d2       	rcall	.+1414   	; 0x21e0 <vTaskSuspendAll>
    1c5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c5c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c5e:	89 2b       	or	r24, r25
    1c60:	69 f0       	breq	.+26     	; 0x1c7c <xStreamBufferReceive+0xda>
    1c62:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c64:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c66:	e1 2c       	mov	r14, r1
    1c68:	f1 2c       	mov	r15, r1
    1c6a:	00 e0       	ldi	r16, 0x00	; 0
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	a9 01       	movw	r20, r18
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	0e 94 ae 18 	call	0x315c	; 0x315c <xTaskGenericNotify>
    1c78:	1b 86       	std	Y+11, r1	; 0x0b
    1c7a:	1a 86       	std	Y+10, r1	; 0x0a
    1c7c:	f1 d3       	rcall	.+2018   	; 0x2460 <xTaskResumeAll>
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <xStreamBufferReceive+0xe2>
    1c80:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1c82:	d1 2c       	mov	r13, r1
    1c84:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1c86:	df 91       	pop	r29
    1c88:	cf 91       	pop	r28
    1c8a:	1f 91       	pop	r17
    1c8c:	0f 91       	pop	r16
    1c8e:	ff 90       	pop	r15
    1c90:	ef 90       	pop	r14
    1c92:	df 90       	pop	r13
    1c94:	cf 90       	pop	r12
    1c96:	bf 90       	pop	r11
    1c98:	af 90       	pop	r10
    1c9a:	9f 90       	pop	r9
    1c9c:	8f 90       	pop	r8
    1c9e:	7f 90       	pop	r7
    1ca0:	6f 90       	pop	r6
    1ca2:	5f 90       	pop	r5
    1ca4:	4f 90       	pop	r4
    1ca6:	08 95       	ret

00001ca8 <prvResetNextTaskUnblockTime>:
    1ca8:	e0 91 45 15 	lds	r30, 0x1545	; 0x801545 <pxDelayedTaskList>
    1cac:	f0 91 46 15 	lds	r31, 0x1546	; 0x801546 <pxDelayedTaskList+0x1>
    1cb0:	80 81       	ld	r24, Z
    1cb2:	81 11       	cpse	r24, r1
    1cb4:	0c c0       	rjmp	.+24     	; 0x1cce <prvResetNextTaskUnblockTime+0x26>
    1cb6:	8f ef       	ldi	r24, 0xFF	; 255
    1cb8:	9f ef       	ldi	r25, 0xFF	; 255
    1cba:	dc 01       	movw	r26, r24
    1cbc:	80 93 0f 15 	sts	0x150F, r24	; 0x80150f <xNextTaskUnblockTime>
    1cc0:	90 93 10 15 	sts	0x1510, r25	; 0x801510 <xNextTaskUnblockTime+0x1>
    1cc4:	a0 93 11 15 	sts	0x1511, r26	; 0x801511 <xNextTaskUnblockTime+0x2>
    1cc8:	b0 93 12 15 	sts	0x1512, r27	; 0x801512 <xNextTaskUnblockTime+0x3>
    1ccc:	08 95       	ret
    1cce:	e0 91 45 15 	lds	r30, 0x1545	; 0x801545 <pxDelayedTaskList>
    1cd2:	f0 91 46 15 	lds	r31, 0x1546	; 0x801546 <pxDelayedTaskList+0x1>
    1cd6:	07 80       	ldd	r0, Z+7	; 0x07
    1cd8:	f0 85       	ldd	r31, Z+8	; 0x08
    1cda:	e0 2d       	mov	r30, r0
    1cdc:	80 81       	ld	r24, Z
    1cde:	91 81       	ldd	r25, Z+1	; 0x01
    1ce0:	a2 81       	ldd	r26, Z+2	; 0x02
    1ce2:	b3 81       	ldd	r27, Z+3	; 0x03
    1ce4:	80 93 0f 15 	sts	0x150F, r24	; 0x80150f <xNextTaskUnblockTime>
    1ce8:	90 93 10 15 	sts	0x1510, r25	; 0x801510 <xNextTaskUnblockTime+0x1>
    1cec:	a0 93 11 15 	sts	0x1511, r26	; 0x801511 <xNextTaskUnblockTime+0x2>
    1cf0:	b0 93 12 15 	sts	0x1512, r27	; 0x801512 <xNextTaskUnblockTime+0x3>
    1cf4:	08 95       	ret

00001cf6 <prvDeleteTCB>:
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	ec 01       	movw	r28, r24
    1cfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d00:	0e 94 b9 05 	call	0xb72	; 0xb72 <vPortFree>
    1d04:	ce 01       	movw	r24, r28
    1d06:	0e 94 b9 05 	call	0xb72	; 0xb72 <vPortFree>
    1d0a:	df 91       	pop	r29
    1d0c:	cf 91       	pop	r28
    1d0e:	08 95       	ret

00001d10 <prvInitialiseNewTask>:
    1d10:	4f 92       	push	r4
    1d12:	5f 92       	push	r5
    1d14:	6f 92       	push	r6
    1d16:	7f 92       	push	r7
    1d18:	8f 92       	push	r8
    1d1a:	9f 92       	push	r9
    1d1c:	af 92       	push	r10
    1d1e:	bf 92       	push	r11
    1d20:	cf 92       	push	r12
    1d22:	df 92       	push	r13
    1d24:	ef 92       	push	r14
    1d26:	ff 92       	push	r15
    1d28:	0f 93       	push	r16
    1d2a:	cf 93       	push	r28
    1d2c:	df 93       	push	r29
    1d2e:	2c 01       	movw	r4, r24
    1d30:	5b 01       	movw	r10, r22
    1d32:	4a 01       	movw	r8, r20
    1d34:	39 01       	movw	r6, r18
    1d36:	e6 01       	movw	r28, r12
    1d38:	65 ea       	ldi	r22, 0xA5	; 165
    1d3a:	70 e0       	ldi	r23, 0x00	; 0
    1d3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d40:	0e 94 df 35 	call	0x6bbe	; 0x6bbe <memset>
    1d44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d48:	21 e0       	ldi	r18, 0x01	; 1
    1d4a:	82 1a       	sub	r8, r18
    1d4c:	91 08       	sbc	r9, r1
    1d4e:	88 0e       	add	r8, r24
    1d50:	99 1e       	adc	r9, r25
    1d52:	a1 14       	cp	r10, r1
    1d54:	b1 04       	cpc	r11, r1
    1d56:	89 f4       	brne	.+34     	; 0x1d7a <prvInitialiseNewTask+0x6a>
    1d58:	15 c0       	rjmp	.+42     	; 0x1d84 <prvInitialiseNewTask+0x74>
    1d5a:	82 2f       	mov	r24, r18
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	f5 01       	movw	r30, r10
    1d60:	e8 0f       	add	r30, r24
    1d62:	f9 1f       	adc	r31, r25
    1d64:	30 81       	ld	r19, Z
    1d66:	de 01       	movw	r26, r28
    1d68:	a8 0f       	add	r26, r24
    1d6a:	b9 1f       	adc	r27, r25
    1d6c:	5d 96       	adiw	r26, 0x1d	; 29
    1d6e:	3c 93       	st	X, r19
    1d70:	80 81       	ld	r24, Z
    1d72:	88 23       	and	r24, r24
    1d74:	29 f0       	breq	.+10     	; 0x1d80 <prvInitialiseNewTask+0x70>
    1d76:	2f 5f       	subi	r18, 0xFF	; 255
    1d78:	01 c0       	rjmp	.+2      	; 0x1d7c <prvInitialiseNewTask+0x6c>
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	20 31       	cpi	r18, 0x10	; 16
    1d7e:	68 f3       	brcs	.-38     	; 0x1d5a <prvInitialiseNewTask+0x4a>
    1d80:	1c a6       	std	Y+44, r1	; 0x2c
    1d82:	01 c0       	rjmp	.+2      	; 0x1d86 <prvInitialiseNewTask+0x76>
    1d84:	1d 8e       	std	Y+29, r1	; 0x1d
    1d86:	0a 30       	cpi	r16, 0x0A	; 10
    1d88:	08 f0       	brcs	.+2      	; 0x1d8c <prvInitialiseNewTask+0x7c>
    1d8a:	09 e0       	ldi	r16, 0x09	; 9
    1d8c:	0a 8f       	std	Y+26, r16	; 0x1a
    1d8e:	0d a7       	std	Y+45, r16	; 0x2d
    1d90:	1e a6       	std	Y+46, r1	; 0x2e
    1d92:	ce 01       	movw	r24, r28
    1d94:	02 96       	adiw	r24, 0x02	; 2
    1d96:	0e 94 07 06 	call	0xc0e	; 0xc0e <vListInitialiseItem>
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	0e 96       	adiw	r24, 0x0e	; 14
    1d9e:	0e 94 07 06 	call	0xc0e	; 0xc0e <vListInitialiseItem>
    1da2:	db 87       	std	Y+11, r29	; 0x0b
    1da4:	ca 87       	std	Y+10, r28	; 0x0a
    1da6:	8a e0       	ldi	r24, 0x0A	; 10
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	a0 e0       	ldi	r26, 0x00	; 0
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	80 1b       	sub	r24, r16
    1db0:	91 09       	sbc	r25, r1
    1db2:	a1 09       	sbc	r26, r1
    1db4:	b1 09       	sbc	r27, r1
    1db6:	8e 87       	std	Y+14, r24	; 0x0e
    1db8:	9f 87       	std	Y+15, r25	; 0x0f
    1dba:	a8 8b       	std	Y+16, r26	; 0x10
    1dbc:	b9 8b       	std	Y+17, r27	; 0x11
    1dbe:	df 8b       	std	Y+23, r29	; 0x17
    1dc0:	ce 8b       	std	Y+22, r28	; 0x16
    1dc2:	84 e0       	ldi	r24, 0x04	; 4
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	bf 96       	adiw	r30, 0x2f	; 47
    1dc8:	df 01       	movw	r26, r30
    1dca:	1d 92       	st	X+, r1
    1dcc:	8a 95       	dec	r24
    1dce:	e9 f7       	brne	.-6      	; 0x1dca <prvInitialiseNewTask+0xba>
    1dd0:	1b aa       	std	Y+51, r1	; 0x33
    1dd2:	a3 01       	movw	r20, r6
    1dd4:	b2 01       	movw	r22, r4
    1dd6:	c4 01       	movw	r24, r8
    1dd8:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <pxPortInitialiseStack>
    1ddc:	99 83       	std	Y+1, r25	; 0x01
    1dde:	88 83       	st	Y, r24
    1de0:	e1 14       	cp	r14, r1
    1de2:	f1 04       	cpc	r15, r1
    1de4:	19 f0       	breq	.+6      	; 0x1dec <prvInitialiseNewTask+0xdc>
    1de6:	f7 01       	movw	r30, r14
    1de8:	d1 83       	std	Z+1, r29	; 0x01
    1dea:	c0 83       	st	Z, r28
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	0f 91       	pop	r16
    1df2:	ff 90       	pop	r15
    1df4:	ef 90       	pop	r14
    1df6:	df 90       	pop	r13
    1df8:	cf 90       	pop	r12
    1dfa:	bf 90       	pop	r11
    1dfc:	af 90       	pop	r10
    1dfe:	9f 90       	pop	r9
    1e00:	8f 90       	pop	r8
    1e02:	7f 90       	pop	r7
    1e04:	6f 90       	pop	r6
    1e06:	5f 90       	pop	r5
    1e08:	4f 90       	pop	r4
    1e0a:	08 95       	ret

00001e0c <prvInitialiseTaskLists>:
    1e0c:	cf 93       	push	r28
    1e0e:	c0 e0       	ldi	r28, 0x00	; 0
    1e10:	09 c0       	rjmp	.+18     	; 0x1e24 <prvInitialiseTaskLists+0x18>
    1e12:	2b e0       	ldi	r18, 0x0B	; 11
    1e14:	c2 9f       	mul	r28, r18
    1e16:	c0 01       	movw	r24, r0
    1e18:	11 24       	eor	r1, r1
    1e1a:	83 5a       	subi	r24, 0xA3	; 163
    1e1c:	9a 4e       	sbci	r25, 0xEA	; 234
    1e1e:	0e 94 f6 05 	call	0xbec	; 0xbec <vListInitialise>
    1e22:	cf 5f       	subi	r28, 0xFF	; 255
    1e24:	ca 30       	cpi	r28, 0x0A	; 10
    1e26:	a8 f3       	brcs	.-22     	; 0x1e12 <prvInitialiseTaskLists+0x6>
    1e28:	82 e5       	ldi	r24, 0x52	; 82
    1e2a:	95 e1       	ldi	r25, 0x15	; 21
    1e2c:	0e 94 f6 05 	call	0xbec	; 0xbec <vListInitialise>
    1e30:	87 e4       	ldi	r24, 0x47	; 71
    1e32:	95 e1       	ldi	r25, 0x15	; 21
    1e34:	0e 94 f6 05 	call	0xbec	; 0xbec <vListInitialise>
    1e38:	88 e3       	ldi	r24, 0x38	; 56
    1e3a:	95 e1       	ldi	r25, 0x15	; 21
    1e3c:	0e 94 f6 05 	call	0xbec	; 0xbec <vListInitialise>
    1e40:	8d e2       	ldi	r24, 0x2D	; 45
    1e42:	95 e1       	ldi	r25, 0x15	; 21
    1e44:	0e 94 f6 05 	call	0xbec	; 0xbec <vListInitialise>
    1e48:	81 e2       	ldi	r24, 0x21	; 33
    1e4a:	95 e1       	ldi	r25, 0x15	; 21
    1e4c:	0e 94 f6 05 	call	0xbec	; 0xbec <vListInitialise>
    1e50:	82 e5       	ldi	r24, 0x52	; 82
    1e52:	95 e1       	ldi	r25, 0x15	; 21
    1e54:	90 93 46 15 	sts	0x1546, r25	; 0x801546 <pxDelayedTaskList+0x1>
    1e58:	80 93 45 15 	sts	0x1545, r24	; 0x801545 <pxDelayedTaskList>
    1e5c:	87 e4       	ldi	r24, 0x47	; 71
    1e5e:	95 e1       	ldi	r25, 0x15	; 21
    1e60:	90 93 44 15 	sts	0x1544, r25	; 0x801544 <pxOverflowDelayedTaskList+0x1>
    1e64:	80 93 43 15 	sts	0x1543, r24	; 0x801543 <pxOverflowDelayedTaskList>
    1e68:	cf 91       	pop	r28
    1e6a:	08 95       	ret

00001e6c <prvAddNewTaskToReadyList>:
    1e6c:	cf 93       	push	r28
    1e6e:	df 93       	push	r29
    1e70:	ec 01       	movw	r28, r24
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	0f 92       	push	r0
    1e78:	80 91 20 15 	lds	r24, 0x1520	; 0x801520 <uxCurrentNumberOfTasks>
    1e7c:	8f 5f       	subi	r24, 0xFF	; 255
    1e7e:	80 93 20 15 	sts	0x1520, r24	; 0x801520 <uxCurrentNumberOfTasks>
    1e82:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <pxCurrentTCB>
    1e86:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    1e8a:	89 2b       	or	r24, r25
    1e8c:	51 f4       	brne	.+20     	; 0x1ea2 <prvAddNewTaskToReadyList+0x36>
    1e8e:	d0 93 cc 15 	sts	0x15CC, r29	; 0x8015cc <pxCurrentTCB+0x1>
    1e92:	c0 93 cb 15 	sts	0x15CB, r28	; 0x8015cb <pxCurrentTCB>
    1e96:	80 91 20 15 	lds	r24, 0x1520	; 0x801520 <uxCurrentNumberOfTasks>
    1e9a:	81 30       	cpi	r24, 0x01	; 1
    1e9c:	91 f4       	brne	.+36     	; 0x1ec2 <prvAddNewTaskToReadyList+0x56>
    1e9e:	b6 df       	rcall	.-148    	; 0x1e0c <prvInitialiseTaskLists>
    1ea0:	10 c0       	rjmp	.+32     	; 0x1ec2 <prvAddNewTaskToReadyList+0x56>
    1ea2:	80 91 1a 15 	lds	r24, 0x151A	; 0x80151a <xSchedulerRunning>
    1ea6:	81 11       	cpse	r24, r1
    1ea8:	0c c0       	rjmp	.+24     	; 0x1ec2 <prvAddNewTaskToReadyList+0x56>
    1eaa:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    1eae:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    1eb2:	92 8d       	ldd	r25, Z+26	; 0x1a
    1eb4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1eb6:	89 17       	cp	r24, r25
    1eb8:	20 f0       	brcs	.+8      	; 0x1ec2 <prvAddNewTaskToReadyList+0x56>
    1eba:	d0 93 cc 15 	sts	0x15CC, r29	; 0x8015cc <pxCurrentTCB+0x1>
    1ebe:	c0 93 cb 15 	sts	0x15CB, r28	; 0x8015cb <pxCurrentTCB>
    1ec2:	80 91 13 15 	lds	r24, 0x1513	; 0x801513 <uxTaskNumber>
    1ec6:	8f 5f       	subi	r24, 0xFF	; 255
    1ec8:	80 93 13 15 	sts	0x1513, r24	; 0x801513 <uxTaskNumber>
    1ecc:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1ece:	80 91 1b 15 	lds	r24, 0x151B	; 0x80151b <uxTopReadyPriority>
    1ed2:	8e 17       	cp	r24, r30
    1ed4:	10 f4       	brcc	.+4      	; 0x1eda <prvAddNewTaskToReadyList+0x6e>
    1ed6:	e0 93 1b 15 	sts	0x151B, r30	; 0x80151b <uxTopReadyPriority>
    1eda:	8b e0       	ldi	r24, 0x0B	; 11
    1edc:	8e 9f       	mul	r24, r30
    1ede:	f0 01       	movw	r30, r0
    1ee0:	11 24       	eor	r1, r1
    1ee2:	e3 5a       	subi	r30, 0xA3	; 163
    1ee4:	fa 4e       	sbci	r31, 0xEA	; 234
    1ee6:	01 80       	ldd	r0, Z+1	; 0x01
    1ee8:	f2 81       	ldd	r31, Z+2	; 0x02
    1eea:	e0 2d       	mov	r30, r0
    1eec:	ff 83       	std	Y+7, r31	; 0x07
    1eee:	ee 83       	std	Y+6, r30	; 0x06
    1ef0:	26 81       	ldd	r18, Z+6	; 0x06
    1ef2:	37 81       	ldd	r19, Z+7	; 0x07
    1ef4:	39 87       	std	Y+9, r19	; 0x09
    1ef6:	28 87       	std	Y+8, r18	; 0x08
    1ef8:	a6 81       	ldd	r26, Z+6	; 0x06
    1efa:	b7 81       	ldd	r27, Z+7	; 0x07
    1efc:	9e 01       	movw	r18, r28
    1efe:	2e 5f       	subi	r18, 0xFE	; 254
    1f00:	3f 4f       	sbci	r19, 0xFF	; 255
    1f02:	15 96       	adiw	r26, 0x05	; 5
    1f04:	3c 93       	st	X, r19
    1f06:	2e 93       	st	-X, r18
    1f08:	14 97       	sbiw	r26, 0x04	; 4
    1f0a:	37 83       	std	Z+7, r19	; 0x07
    1f0c:	26 83       	std	Z+6, r18	; 0x06
    1f0e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1f10:	8e 9f       	mul	r24, r30
    1f12:	f0 01       	movw	r30, r0
    1f14:	11 24       	eor	r1, r1
    1f16:	e3 5a       	subi	r30, 0xA3	; 163
    1f18:	fa 4e       	sbci	r31, 0xEA	; 234
    1f1a:	fd 87       	std	Y+13, r31	; 0x0d
    1f1c:	ec 87       	std	Y+12, r30	; 0x0c
    1f1e:	80 81       	ld	r24, Z
    1f20:	8f 5f       	subi	r24, 0xFF	; 255
    1f22:	80 83       	st	Z, r24
    1f24:	0f 90       	pop	r0
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	80 91 1a 15 	lds	r24, 0x151A	; 0x80151a <xSchedulerRunning>
    1f2c:	88 23       	and	r24, r24
    1f2e:	51 f0       	breq	.+20     	; 0x1f44 <prvAddNewTaskToReadyList+0xd8>
    1f30:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    1f34:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    1f38:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f3a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f3c:	98 17       	cp	r25, r24
    1f3e:	10 f4       	brcc	.+4      	; 0x1f44 <prvAddNewTaskToReadyList+0xd8>
    1f40:	0e 94 c4 06 	call	0xd88	; 0xd88 <vPortYield>
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
    1f48:	08 95       	ret

00001f4a <prvCheckTasksWaitingTermination>:
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
    1f4e:	1b c0       	rjmp	.+54     	; 0x1f86 <prvCheckTasksWaitingTermination+0x3c>
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	0f 92       	push	r0
    1f56:	e0 91 34 15 	lds	r30, 0x1534	; 0x801534 <xTasksWaitingTermination+0x7>
    1f5a:	f0 91 35 15 	lds	r31, 0x1535	; 0x801535 <xTasksWaitingTermination+0x8>
    1f5e:	c0 85       	ldd	r28, Z+8	; 0x08
    1f60:	d1 85       	ldd	r29, Z+9	; 0x09
    1f62:	ce 01       	movw	r24, r28
    1f64:	02 96       	adiw	r24, 0x02	; 2
    1f66:	0e 94 48 06 	call	0xc90	; 0xc90 <uxListRemove>
    1f6a:	80 91 20 15 	lds	r24, 0x1520	; 0x801520 <uxCurrentNumberOfTasks>
    1f6e:	81 50       	subi	r24, 0x01	; 1
    1f70:	80 93 20 15 	sts	0x1520, r24	; 0x801520 <uxCurrentNumberOfTasks>
    1f74:	80 91 2c 15 	lds	r24, 0x152C	; 0x80152c <uxDeletedTasksWaitingCleanUp>
    1f78:	81 50       	subi	r24, 0x01	; 1
    1f7a:	80 93 2c 15 	sts	0x152C, r24	; 0x80152c <uxDeletedTasksWaitingCleanUp>
    1f7e:	0f 90       	pop	r0
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	ce 01       	movw	r24, r28
    1f84:	b8 de       	rcall	.-656    	; 0x1cf6 <prvDeleteTCB>
    1f86:	80 91 2c 15 	lds	r24, 0x152C	; 0x80152c <uxDeletedTasksWaitingCleanUp>
    1f8a:	81 11       	cpse	r24, r1
    1f8c:	e1 cf       	rjmp	.-62     	; 0x1f50 <prvCheckTasksWaitingTermination+0x6>
    1f8e:	df 91       	pop	r29
    1f90:	cf 91       	pop	r28
    1f92:	08 95       	ret

00001f94 <prvAddCurrentTaskToDelayedList>:
    1f94:	8f 92       	push	r8
    1f96:	9f 92       	push	r9
    1f98:	af 92       	push	r10
    1f9a:	bf 92       	push	r11
    1f9c:	cf 92       	push	r12
    1f9e:	df 92       	push	r13
    1fa0:	ef 92       	push	r14
    1fa2:	ff 92       	push	r15
    1fa4:	cf 93       	push	r28
    1fa6:	df 93       	push	r29
    1fa8:	6b 01       	movw	r12, r22
    1faa:	7c 01       	movw	r14, r24
    1fac:	c4 2f       	mov	r28, r20
    1fae:	80 90 1c 15 	lds	r8, 0x151C	; 0x80151c <xTickCount>
    1fb2:	90 90 1d 15 	lds	r9, 0x151D	; 0x80151d <xTickCount+0x1>
    1fb6:	a0 90 1e 15 	lds	r10, 0x151E	; 0x80151e <xTickCount+0x2>
    1fba:	b0 90 1f 15 	lds	r11, 0x151F	; 0x80151f <xTickCount+0x3>
    1fbe:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <pxCurrentTCB>
    1fc2:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    1fc6:	02 96       	adiw	r24, 0x02	; 2
    1fc8:	0e 94 48 06 	call	0xc90	; 0xc90 <uxListRemove>
    1fcc:	8f ef       	ldi	r24, 0xFF	; 255
    1fce:	c8 16       	cp	r12, r24
    1fd0:	d8 06       	cpc	r13, r24
    1fd2:	e8 06       	cpc	r14, r24
    1fd4:	f8 06       	cpc	r15, r24
    1fd6:	b1 f5       	brne	.+108    	; 0x2044 <__DATA_REGION_LENGTH__+0x44>
    1fd8:	cc 23       	and	r28, r28
    1fda:	a1 f1       	breq	.+104    	; 0x2044 <__DATA_REGION_LENGTH__+0x44>
    1fdc:	e1 e2       	ldi	r30, 0x21	; 33
    1fde:	f5 e1       	ldi	r31, 0x15	; 21
    1fe0:	a1 81       	ldd	r26, Z+1	; 0x01
    1fe2:	b2 81       	ldd	r27, Z+2	; 0x02
    1fe4:	c0 91 cb 15 	lds	r28, 0x15CB	; 0x8015cb <pxCurrentTCB>
    1fe8:	d0 91 cc 15 	lds	r29, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    1fec:	bf 83       	std	Y+7, r27	; 0x07
    1fee:	ae 83       	std	Y+6, r26	; 0x06
    1ff0:	c0 91 cb 15 	lds	r28, 0x15CB	; 0x8015cb <pxCurrentTCB>
    1ff4:	d0 91 cc 15 	lds	r29, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    1ff8:	16 96       	adiw	r26, 0x06	; 6
    1ffa:	8d 91       	ld	r24, X+
    1ffc:	9c 91       	ld	r25, X
    1ffe:	17 97       	sbiw	r26, 0x07	; 7
    2000:	99 87       	std	Y+9, r25	; 0x09
    2002:	88 87       	std	Y+8, r24	; 0x08
    2004:	16 96       	adiw	r26, 0x06	; 6
    2006:	cd 91       	ld	r28, X+
    2008:	dc 91       	ld	r29, X
    200a:	17 97       	sbiw	r26, 0x07	; 7
    200c:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2010:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2014:	02 96       	adiw	r24, 0x02	; 2
    2016:	9d 83       	std	Y+5, r25	; 0x05
    2018:	8c 83       	std	Y+4, r24	; 0x04
    201a:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <pxCurrentTCB>
    201e:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2022:	02 96       	adiw	r24, 0x02	; 2
    2024:	17 96       	adiw	r26, 0x07	; 7
    2026:	9c 93       	st	X, r25
    2028:	8e 93       	st	-X, r24
    202a:	16 97       	sbiw	r26, 0x06	; 6
    202c:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2030:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2034:	1d 96       	adiw	r26, 0x0d	; 13
    2036:	fc 93       	st	X, r31
    2038:	ee 93       	st	-X, r30
    203a:	1c 97       	sbiw	r26, 0x0c	; 12
    203c:	80 81       	ld	r24, Z
    203e:	8f 5f       	subi	r24, 0xFF	; 255
    2040:	80 83       	st	Z, r24
    2042:	3f c0       	rjmp	.+126    	; 0x20c2 <__DATA_REGION_LENGTH__+0xc2>
    2044:	c8 0c       	add	r12, r8
    2046:	d9 1c       	adc	r13, r9
    2048:	ea 1c       	adc	r14, r10
    204a:	fb 1c       	adc	r15, r11
    204c:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2050:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2054:	c2 82       	std	Z+2, r12	; 0x02
    2056:	d3 82       	std	Z+3, r13	; 0x03
    2058:	e4 82       	std	Z+4, r14	; 0x04
    205a:	f5 82       	std	Z+5, r15	; 0x05
    205c:	c8 14       	cp	r12, r8
    205e:	d9 04       	cpc	r13, r9
    2060:	ea 04       	cpc	r14, r10
    2062:	fb 04       	cpc	r15, r11
    2064:	68 f4       	brcc	.+26     	; 0x2080 <__DATA_REGION_LENGTH__+0x80>
    2066:	60 91 cb 15 	lds	r22, 0x15CB	; 0x8015cb <pxCurrentTCB>
    206a:	70 91 cc 15 	lds	r23, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    206e:	80 91 43 15 	lds	r24, 0x1543	; 0x801543 <pxOverflowDelayedTaskList>
    2072:	90 91 44 15 	lds	r25, 0x1544	; 0x801544 <pxOverflowDelayedTaskList+0x1>
    2076:	6e 5f       	subi	r22, 0xFE	; 254
    2078:	7f 4f       	sbci	r23, 0xFF	; 255
    207a:	0e 94 0b 06 	call	0xc16	; 0xc16 <vListInsert>
    207e:	21 c0       	rjmp	.+66     	; 0x20c2 <__DATA_REGION_LENGTH__+0xc2>
    2080:	60 91 cb 15 	lds	r22, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2084:	70 91 cc 15 	lds	r23, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2088:	80 91 45 15 	lds	r24, 0x1545	; 0x801545 <pxDelayedTaskList>
    208c:	90 91 46 15 	lds	r25, 0x1546	; 0x801546 <pxDelayedTaskList+0x1>
    2090:	6e 5f       	subi	r22, 0xFE	; 254
    2092:	7f 4f       	sbci	r23, 0xFF	; 255
    2094:	0e 94 0b 06 	call	0xc16	; 0xc16 <vListInsert>
    2098:	80 91 0f 15 	lds	r24, 0x150F	; 0x80150f <xNextTaskUnblockTime>
    209c:	90 91 10 15 	lds	r25, 0x1510	; 0x801510 <xNextTaskUnblockTime+0x1>
    20a0:	a0 91 11 15 	lds	r26, 0x1511	; 0x801511 <xNextTaskUnblockTime+0x2>
    20a4:	b0 91 12 15 	lds	r27, 0x1512	; 0x801512 <xNextTaskUnblockTime+0x3>
    20a8:	c8 16       	cp	r12, r24
    20aa:	d9 06       	cpc	r13, r25
    20ac:	ea 06       	cpc	r14, r26
    20ae:	fb 06       	cpc	r15, r27
    20b0:	40 f4       	brcc	.+16     	; 0x20c2 <__DATA_REGION_LENGTH__+0xc2>
    20b2:	c0 92 0f 15 	sts	0x150F, r12	; 0x80150f <xNextTaskUnblockTime>
    20b6:	d0 92 10 15 	sts	0x1510, r13	; 0x801510 <xNextTaskUnblockTime+0x1>
    20ba:	e0 92 11 15 	sts	0x1511, r14	; 0x801511 <xNextTaskUnblockTime+0x2>
    20be:	f0 92 12 15 	sts	0x1512, r15	; 0x801512 <xNextTaskUnblockTime+0x3>
    20c2:	df 91       	pop	r29
    20c4:	cf 91       	pop	r28
    20c6:	ff 90       	pop	r15
    20c8:	ef 90       	pop	r14
    20ca:	df 90       	pop	r13
    20cc:	cf 90       	pop	r12
    20ce:	bf 90       	pop	r11
    20d0:	af 90       	pop	r10
    20d2:	9f 90       	pop	r9
    20d4:	8f 90       	pop	r8
    20d6:	08 95       	ret

000020d8 <xTaskCreate>:
    20d8:	2f 92       	push	r2
    20da:	3f 92       	push	r3
    20dc:	4f 92       	push	r4
    20de:	5f 92       	push	r5
    20e0:	6f 92       	push	r6
    20e2:	7f 92       	push	r7
    20e4:	8f 92       	push	r8
    20e6:	9f 92       	push	r9
    20e8:	af 92       	push	r10
    20ea:	bf 92       	push	r11
    20ec:	cf 92       	push	r12
    20ee:	df 92       	push	r13
    20f0:	ef 92       	push	r14
    20f2:	ff 92       	push	r15
    20f4:	0f 93       	push	r16
    20f6:	cf 93       	push	r28
    20f8:	df 93       	push	r29
    20fa:	3c 01       	movw	r6, r24
    20fc:	1b 01       	movw	r2, r22
    20fe:	4a 01       	movw	r8, r20
    2100:	29 01       	movw	r4, r18
    2102:	ca 01       	movw	r24, r20
    2104:	0e 94 10 05 	call	0xa20	; 0xa20 <pvPortMalloc>
    2108:	6c 01       	movw	r12, r24
    210a:	89 2b       	or	r24, r25
    210c:	71 f0       	breq	.+28     	; 0x212a <xTaskCreate+0x52>
    210e:	84 e3       	ldi	r24, 0x34	; 52
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	0e 94 10 05 	call	0xa20	; 0xa20 <pvPortMalloc>
    2116:	ec 01       	movw	r28, r24
    2118:	89 2b       	or	r24, r25
    211a:	19 f0       	breq	.+6      	; 0x2122 <xTaskCreate+0x4a>
    211c:	dc 8e       	std	Y+28, r13	; 0x1c
    211e:	cb 8e       	std	Y+27, r12	; 0x1b
    2120:	06 c0       	rjmp	.+12     	; 0x212e <xTaskCreate+0x56>
    2122:	c6 01       	movw	r24, r12
    2124:	0e 94 b9 05 	call	0xb72	; 0xb72 <vPortFree>
    2128:	02 c0       	rjmp	.+4      	; 0x212e <xTaskCreate+0x56>
    212a:	c0 e0       	ldi	r28, 0x00	; 0
    212c:	d0 e0       	ldi	r29, 0x00	; 0
    212e:	20 97       	sbiw	r28, 0x00	; 0
    2130:	61 f0       	breq	.+24     	; 0x214a <xTaskCreate+0x72>
    2132:	a1 2c       	mov	r10, r1
    2134:	b1 2c       	mov	r11, r1
    2136:	6e 01       	movw	r12, r28
    2138:	92 01       	movw	r18, r4
    213a:	a4 01       	movw	r20, r8
    213c:	b1 01       	movw	r22, r2
    213e:	c3 01       	movw	r24, r6
    2140:	e7 dd       	rcall	.-1074   	; 0x1d10 <prvInitialiseNewTask>
    2142:	ce 01       	movw	r24, r28
    2144:	93 de       	rcall	.-730    	; 0x1e6c <prvAddNewTaskToReadyList>
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	01 c0       	rjmp	.+2      	; 0x214c <xTaskCreate+0x74>
    214a:	8f ef       	ldi	r24, 0xFF	; 255
    214c:	df 91       	pop	r29
    214e:	cf 91       	pop	r28
    2150:	0f 91       	pop	r16
    2152:	ff 90       	pop	r15
    2154:	ef 90       	pop	r14
    2156:	df 90       	pop	r13
    2158:	cf 90       	pop	r12
    215a:	bf 90       	pop	r11
    215c:	af 90       	pop	r10
    215e:	9f 90       	pop	r9
    2160:	8f 90       	pop	r8
    2162:	7f 90       	pop	r7
    2164:	6f 90       	pop	r6
    2166:	5f 90       	pop	r5
    2168:	4f 90       	pop	r4
    216a:	3f 90       	pop	r3
    216c:	2f 90       	pop	r2
    216e:	08 95       	ret

00002170 <vTaskStartScheduler>:
    2170:	ef 92       	push	r14
    2172:	ff 92       	push	r15
    2174:	0f 93       	push	r16
    2176:	0f 2e       	mov	r0, r31
    2178:	fd e0       	ldi	r31, 0x0D	; 13
    217a:	ef 2e       	mov	r14, r31
    217c:	f5 e1       	ldi	r31, 0x15	; 21
    217e:	ff 2e       	mov	r15, r31
    2180:	f0 2d       	mov	r31, r0
    2182:	00 e0       	ldi	r16, 0x00	; 0
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 ec       	ldi	r20, 0xC0	; 192
    218a:	50 e0       	ldi	r21, 0x00	; 0
    218c:	65 e6       	ldi	r22, 0x65	; 101
    218e:	73 e0       	ldi	r23, 0x03	; 3
    2190:	8e e4       	ldi	r24, 0x4E	; 78
    2192:	91 e0       	ldi	r25, 0x01	; 1
    2194:	a1 df       	rcall	.-190    	; 0x20d8 <xTaskCreate>
    2196:	81 30       	cpi	r24, 0x01	; 1
    2198:	11 f4       	brne	.+4      	; 0x219e <vTaskStartScheduler+0x2e>
    219a:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <xTimerCreateTimerTask>
    219e:	81 30       	cpi	r24, 0x01	; 1
    21a0:	c9 f4       	brne	.+50     	; 0x21d4 <vTaskStartScheduler+0x64>
    21a2:	f8 94       	cli
    21a4:	8f ef       	ldi	r24, 0xFF	; 255
    21a6:	9f ef       	ldi	r25, 0xFF	; 255
    21a8:	dc 01       	movw	r26, r24
    21aa:	80 93 0f 15 	sts	0x150F, r24	; 0x80150f <xNextTaskUnblockTime>
    21ae:	90 93 10 15 	sts	0x1510, r25	; 0x801510 <xNextTaskUnblockTime+0x1>
    21b2:	a0 93 11 15 	sts	0x1511, r26	; 0x801511 <xNextTaskUnblockTime+0x2>
    21b6:	b0 93 12 15 	sts	0x1512, r27	; 0x801512 <xNextTaskUnblockTime+0x3>
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	80 93 1a 15 	sts	0x151A, r24	; 0x80151a <xSchedulerRunning>
    21c0:	10 92 1c 15 	sts	0x151C, r1	; 0x80151c <xTickCount>
    21c4:	10 92 1d 15 	sts	0x151D, r1	; 0x80151d <xTickCount+0x1>
    21c8:	10 92 1e 15 	sts	0x151E, r1	; 0x80151e <xTickCount+0x2>
    21cc:	10 92 1f 15 	sts	0x151F, r1	; 0x80151f <xTickCount+0x3>
    21d0:	0e 94 92 06 	call	0xd24	; 0xd24 <xPortStartScheduler>
    21d4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    21d8:	0f 91       	pop	r16
    21da:	ff 90       	pop	r15
    21dc:	ef 90       	pop	r14
    21de:	08 95       	ret

000021e0 <vTaskSuspendAll>:
    21e0:	80 91 0c 15 	lds	r24, 0x150C	; 0x80150c <uxSchedulerSuspended>
    21e4:	8f 5f       	subi	r24, 0xFF	; 255
    21e6:	80 93 0c 15 	sts	0x150C, r24	; 0x80150c <uxSchedulerSuspended>
    21ea:	08 95       	ret

000021ec <xTaskGetTickCount>:
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	0f 92       	push	r0
    21f2:	60 91 1c 15 	lds	r22, 0x151C	; 0x80151c <xTickCount>
    21f6:	70 91 1d 15 	lds	r23, 0x151D	; 0x80151d <xTickCount+0x1>
    21fa:	80 91 1e 15 	lds	r24, 0x151E	; 0x80151e <xTickCount+0x2>
    21fe:	90 91 1f 15 	lds	r25, 0x151F	; 0x80151f <xTickCount+0x3>
    2202:	0f 90       	pop	r0
    2204:	0f be       	out	0x3f, r0	; 63
    2206:	08 95       	ret

00002208 <xTaskIncrementTick>:
    2208:	cf 92       	push	r12
    220a:	df 92       	push	r13
    220c:	ef 92       	push	r14
    220e:	ff 92       	push	r15
    2210:	cf 93       	push	r28
    2212:	df 93       	push	r29
    2214:	80 91 0c 15 	lds	r24, 0x150C	; 0x80150c <uxSchedulerSuspended>
    2218:	81 11       	cpse	r24, r1
    221a:	05 c1       	rjmp	.+522    	; 0x2426 <xTaskIncrementTick+0x21e>
    221c:	c0 90 1c 15 	lds	r12, 0x151C	; 0x80151c <xTickCount>
    2220:	d0 90 1d 15 	lds	r13, 0x151D	; 0x80151d <xTickCount+0x1>
    2224:	e0 90 1e 15 	lds	r14, 0x151E	; 0x80151e <xTickCount+0x2>
    2228:	f0 90 1f 15 	lds	r15, 0x151F	; 0x80151f <xTickCount+0x3>
    222c:	8f ef       	ldi	r24, 0xFF	; 255
    222e:	c8 1a       	sub	r12, r24
    2230:	d8 0a       	sbc	r13, r24
    2232:	e8 0a       	sbc	r14, r24
    2234:	f8 0a       	sbc	r15, r24
    2236:	c0 92 1c 15 	sts	0x151C, r12	; 0x80151c <xTickCount>
    223a:	d0 92 1d 15 	sts	0x151D, r13	; 0x80151d <xTickCount+0x1>
    223e:	e0 92 1e 15 	sts	0x151E, r14	; 0x80151e <xTickCount+0x2>
    2242:	f0 92 1f 15 	sts	0x151F, r15	; 0x80151f <xTickCount+0x3>
    2246:	c1 14       	cp	r12, r1
    2248:	d1 04       	cpc	r13, r1
    224a:	e1 04       	cpc	r14, r1
    224c:	f1 04       	cpc	r15, r1
    224e:	b1 f4       	brne	.+44     	; 0x227c <xTaskIncrementTick+0x74>
    2250:	80 91 45 15 	lds	r24, 0x1545	; 0x801545 <pxDelayedTaskList>
    2254:	90 91 46 15 	lds	r25, 0x1546	; 0x801546 <pxDelayedTaskList+0x1>
    2258:	20 91 43 15 	lds	r18, 0x1543	; 0x801543 <pxOverflowDelayedTaskList>
    225c:	30 91 44 15 	lds	r19, 0x1544	; 0x801544 <pxOverflowDelayedTaskList+0x1>
    2260:	30 93 46 15 	sts	0x1546, r19	; 0x801546 <pxDelayedTaskList+0x1>
    2264:	20 93 45 15 	sts	0x1545, r18	; 0x801545 <pxDelayedTaskList>
    2268:	90 93 44 15 	sts	0x1544, r25	; 0x801544 <pxOverflowDelayedTaskList+0x1>
    226c:	80 93 43 15 	sts	0x1543, r24	; 0x801543 <pxOverflowDelayedTaskList>
    2270:	80 91 14 15 	lds	r24, 0x1514	; 0x801514 <xNumOfOverflows>
    2274:	8f 5f       	subi	r24, 0xFF	; 255
    2276:	80 93 14 15 	sts	0x1514, r24	; 0x801514 <xNumOfOverflows>
    227a:	16 dd       	rcall	.-1492   	; 0x1ca8 <prvResetNextTaskUnblockTime>
    227c:	80 91 0f 15 	lds	r24, 0x150F	; 0x80150f <xNextTaskUnblockTime>
    2280:	90 91 10 15 	lds	r25, 0x1510	; 0x801510 <xNextTaskUnblockTime+0x1>
    2284:	a0 91 11 15 	lds	r26, 0x1511	; 0x801511 <xNextTaskUnblockTime+0x2>
    2288:	b0 91 12 15 	lds	r27, 0x1512	; 0x801512 <xNextTaskUnblockTime+0x3>
    228c:	c8 16       	cp	r12, r24
    228e:	d9 06       	cpc	r13, r25
    2290:	ea 06       	cpc	r14, r26
    2292:	fb 06       	cpc	r15, r27
    2294:	20 f4       	brcc	.+8      	; 0x229e <xTaskIncrementTick+0x96>
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	b2 c0       	rjmp	.+356    	; 0x23fe <xTaskIncrementTick+0x1f6>
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	01 c0       	rjmp	.+2      	; 0x22a0 <xTaskIncrementTick+0x98>
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	e0 91 45 15 	lds	r30, 0x1545	; 0x801545 <pxDelayedTaskList>
    22a4:	f0 91 46 15 	lds	r31, 0x1546	; 0x801546 <pxDelayedTaskList+0x1>
    22a8:	90 81       	ld	r25, Z
    22aa:	91 11       	cpse	r25, r1
    22ac:	0c c0       	rjmp	.+24     	; 0x22c6 <xTaskIncrementTick+0xbe>
    22ae:	4f ef       	ldi	r20, 0xFF	; 255
    22b0:	5f ef       	ldi	r21, 0xFF	; 255
    22b2:	ba 01       	movw	r22, r20
    22b4:	40 93 0f 15 	sts	0x150F, r20	; 0x80150f <xNextTaskUnblockTime>
    22b8:	50 93 10 15 	sts	0x1510, r21	; 0x801510 <xNextTaskUnblockTime+0x1>
    22bc:	60 93 11 15 	sts	0x1511, r22	; 0x801511 <xNextTaskUnblockTime+0x2>
    22c0:	70 93 12 15 	sts	0x1512, r23	; 0x801512 <xNextTaskUnblockTime+0x3>
    22c4:	9c c0       	rjmp	.+312    	; 0x23fe <xTaskIncrementTick+0x1f6>
    22c6:	e0 91 45 15 	lds	r30, 0x1545	; 0x801545 <pxDelayedTaskList>
    22ca:	f0 91 46 15 	lds	r31, 0x1546	; 0x801546 <pxDelayedTaskList+0x1>
    22ce:	07 80       	ldd	r0, Z+7	; 0x07
    22d0:	f0 85       	ldd	r31, Z+8	; 0x08
    22d2:	e0 2d       	mov	r30, r0
    22d4:	00 84       	ldd	r0, Z+8	; 0x08
    22d6:	f1 85       	ldd	r31, Z+9	; 0x09
    22d8:	e0 2d       	mov	r30, r0
    22da:	42 81       	ldd	r20, Z+2	; 0x02
    22dc:	53 81       	ldd	r21, Z+3	; 0x03
    22de:	64 81       	ldd	r22, Z+4	; 0x04
    22e0:	75 81       	ldd	r23, Z+5	; 0x05
    22e2:	c4 16       	cp	r12, r20
    22e4:	d5 06       	cpc	r13, r21
    22e6:	e6 06       	cpc	r14, r22
    22e8:	f7 06       	cpc	r15, r23
    22ea:	48 f4       	brcc	.+18     	; 0x22fe <xTaskIncrementTick+0xf6>
    22ec:	40 93 0f 15 	sts	0x150F, r20	; 0x80150f <xNextTaskUnblockTime>
    22f0:	50 93 10 15 	sts	0x1510, r21	; 0x801510 <xNextTaskUnblockTime+0x1>
    22f4:	60 93 11 15 	sts	0x1511, r22	; 0x801511 <xNextTaskUnblockTime+0x2>
    22f8:	70 93 12 15 	sts	0x1512, r23	; 0x801512 <xNextTaskUnblockTime+0x3>
    22fc:	80 c0       	rjmp	.+256    	; 0x23fe <xTaskIncrementTick+0x1f6>
    22fe:	a4 85       	ldd	r26, Z+12	; 0x0c
    2300:	b5 85       	ldd	r27, Z+13	; 0x0d
    2302:	c6 81       	ldd	r28, Z+6	; 0x06
    2304:	d7 81       	ldd	r29, Z+7	; 0x07
    2306:	20 85       	ldd	r18, Z+8	; 0x08
    2308:	31 85       	ldd	r19, Z+9	; 0x09
    230a:	3f 83       	std	Y+7, r19	; 0x07
    230c:	2e 83       	std	Y+6, r18	; 0x06
    230e:	c0 85       	ldd	r28, Z+8	; 0x08
    2310:	d1 85       	ldd	r29, Z+9	; 0x09
    2312:	26 81       	ldd	r18, Z+6	; 0x06
    2314:	37 81       	ldd	r19, Z+7	; 0x07
    2316:	3d 83       	std	Y+5, r19	; 0x05
    2318:	2c 83       	std	Y+4, r18	; 0x04
    231a:	11 96       	adiw	r26, 0x01	; 1
    231c:	4d 91       	ld	r20, X+
    231e:	5c 91       	ld	r21, X
    2320:	12 97       	sbiw	r26, 0x02	; 2
    2322:	9f 01       	movw	r18, r30
    2324:	2e 5f       	subi	r18, 0xFE	; 254
    2326:	3f 4f       	sbci	r19, 0xFF	; 255
    2328:	42 17       	cp	r20, r18
    232a:	53 07       	cpc	r21, r19
    232c:	31 f4       	brne	.+12     	; 0x233a <xTaskIncrementTick+0x132>
    232e:	40 85       	ldd	r20, Z+8	; 0x08
    2330:	51 85       	ldd	r21, Z+9	; 0x09
    2332:	12 96       	adiw	r26, 0x02	; 2
    2334:	5c 93       	st	X, r21
    2336:	4e 93       	st	-X, r20
    2338:	11 97       	sbiw	r26, 0x01	; 1
    233a:	15 86       	std	Z+13, r1	; 0x0d
    233c:	14 86       	std	Z+12, r1	; 0x0c
    233e:	9c 91       	ld	r25, X
    2340:	91 50       	subi	r25, 0x01	; 1
    2342:	9c 93       	st	X, r25
    2344:	a0 8d       	ldd	r26, Z+24	; 0x18
    2346:	b1 8d       	ldd	r27, Z+25	; 0x19
    2348:	10 97       	sbiw	r26, 0x00	; 0
    234a:	09 f1       	breq	.+66     	; 0x238e <xTaskIncrementTick+0x186>
    234c:	c2 89       	ldd	r28, Z+18	; 0x12
    234e:	d3 89       	ldd	r29, Z+19	; 0x13
    2350:	44 89       	ldd	r20, Z+20	; 0x14
    2352:	55 89       	ldd	r21, Z+21	; 0x15
    2354:	5f 83       	std	Y+7, r21	; 0x07
    2356:	4e 83       	std	Y+6, r20	; 0x06
    2358:	c4 89       	ldd	r28, Z+20	; 0x14
    235a:	d5 89       	ldd	r29, Z+21	; 0x15
    235c:	42 89       	ldd	r20, Z+18	; 0x12
    235e:	53 89       	ldd	r21, Z+19	; 0x13
    2360:	5d 83       	std	Y+5, r21	; 0x05
    2362:	4c 83       	std	Y+4, r20	; 0x04
    2364:	11 96       	adiw	r26, 0x01	; 1
    2366:	6d 91       	ld	r22, X+
    2368:	7c 91       	ld	r23, X
    236a:	12 97       	sbiw	r26, 0x02	; 2
    236c:	af 01       	movw	r20, r30
    236e:	42 5f       	subi	r20, 0xF2	; 242
    2370:	5f 4f       	sbci	r21, 0xFF	; 255
    2372:	64 17       	cp	r22, r20
    2374:	75 07       	cpc	r23, r21
    2376:	31 f4       	brne	.+12     	; 0x2384 <xTaskIncrementTick+0x17c>
    2378:	44 89       	ldd	r20, Z+20	; 0x14
    237a:	55 89       	ldd	r21, Z+21	; 0x15
    237c:	12 96       	adiw	r26, 0x02	; 2
    237e:	5c 93       	st	X, r21
    2380:	4e 93       	st	-X, r20
    2382:	11 97       	sbiw	r26, 0x01	; 1
    2384:	11 8e       	std	Z+25, r1	; 0x19
    2386:	10 8e       	std	Z+24, r1	; 0x18
    2388:	9c 91       	ld	r25, X
    238a:	91 50       	subi	r25, 0x01	; 1
    238c:	9c 93       	st	X, r25
    238e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2390:	90 91 1b 15 	lds	r25, 0x151B	; 0x80151b <uxTopReadyPriority>
    2394:	9a 17       	cp	r25, r26
    2396:	10 f4       	brcc	.+4      	; 0x239c <xTaskIncrementTick+0x194>
    2398:	a0 93 1b 15 	sts	0x151B, r26	; 0x80151b <uxTopReadyPriority>
    239c:	9b e0       	ldi	r25, 0x0B	; 11
    239e:	9a 9f       	mul	r25, r26
    23a0:	d0 01       	movw	r26, r0
    23a2:	11 24       	eor	r1, r1
    23a4:	a3 5a       	subi	r26, 0xA3	; 163
    23a6:	ba 4e       	sbci	r27, 0xEA	; 234
    23a8:	11 96       	adiw	r26, 0x01	; 1
    23aa:	0d 90       	ld	r0, X+
    23ac:	bc 91       	ld	r27, X
    23ae:	a0 2d       	mov	r26, r0
    23b0:	b7 83       	std	Z+7, r27	; 0x07
    23b2:	a6 83       	std	Z+6, r26	; 0x06
    23b4:	16 96       	adiw	r26, 0x06	; 6
    23b6:	4d 91       	ld	r20, X+
    23b8:	5c 91       	ld	r21, X
    23ba:	17 97       	sbiw	r26, 0x07	; 7
    23bc:	51 87       	std	Z+9, r21	; 0x09
    23be:	40 87       	std	Z+8, r20	; 0x08
    23c0:	16 96       	adiw	r26, 0x06	; 6
    23c2:	cd 91       	ld	r28, X+
    23c4:	dc 91       	ld	r29, X
    23c6:	17 97       	sbiw	r26, 0x07	; 7
    23c8:	3d 83       	std	Y+5, r19	; 0x05
    23ca:	2c 83       	std	Y+4, r18	; 0x04
    23cc:	17 96       	adiw	r26, 0x07	; 7
    23ce:	3c 93       	st	X, r19
    23d0:	2e 93       	st	-X, r18
    23d2:	16 97       	sbiw	r26, 0x06	; 6
    23d4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    23d6:	9a 9f       	mul	r25, r26
    23d8:	d0 01       	movw	r26, r0
    23da:	11 24       	eor	r1, r1
    23dc:	a3 5a       	subi	r26, 0xA3	; 163
    23de:	ba 4e       	sbci	r27, 0xEA	; 234
    23e0:	b5 87       	std	Z+13, r27	; 0x0d
    23e2:	a4 87       	std	Z+12, r26	; 0x0c
    23e4:	9c 91       	ld	r25, X
    23e6:	9f 5f       	subi	r25, 0xFF	; 255
    23e8:	9c 93       	st	X, r25
    23ea:	22 8d       	ldd	r18, Z+26	; 0x1a
    23ec:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    23f0:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    23f4:	92 8d       	ldd	r25, Z+26	; 0x1a
    23f6:	29 17       	cp	r18, r25
    23f8:	08 f0       	brcs	.+2      	; 0x23fc <xTaskIncrementTick+0x1f4>
    23fa:	4f cf       	rjmp	.-354    	; 0x229a <xTaskIncrementTick+0x92>
    23fc:	51 cf       	rjmp	.-350    	; 0x22a0 <xTaskIncrementTick+0x98>
    23fe:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2402:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2406:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2408:	9b e0       	ldi	r25, 0x0B	; 11
    240a:	e9 9f       	mul	r30, r25
    240c:	f0 01       	movw	r30, r0
    240e:	11 24       	eor	r1, r1
    2410:	e3 5a       	subi	r30, 0xA3	; 163
    2412:	fa 4e       	sbci	r31, 0xEA	; 234
    2414:	90 81       	ld	r25, Z
    2416:	92 30       	cpi	r25, 0x02	; 2
    2418:	08 f0       	brcs	.+2      	; 0x241c <xTaskIncrementTick+0x214>
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	90 91 15 15 	lds	r25, 0x1515	; 0x801515 <xYieldPending>
    2420:	91 11       	cpse	r25, r1
    2422:	16 c0       	rjmp	.+44     	; 0x2450 <xTaskIncrementTick+0x248>
    2424:	16 c0       	rjmp	.+44     	; 0x2452 <xTaskIncrementTick+0x24a>
    2426:	80 91 16 15 	lds	r24, 0x1516	; 0x801516 <xPendedTicks>
    242a:	90 91 17 15 	lds	r25, 0x1517	; 0x801517 <xPendedTicks+0x1>
    242e:	a0 91 18 15 	lds	r26, 0x1518	; 0x801518 <xPendedTicks+0x2>
    2432:	b0 91 19 15 	lds	r27, 0x1519	; 0x801519 <xPendedTicks+0x3>
    2436:	01 96       	adiw	r24, 0x01	; 1
    2438:	a1 1d       	adc	r26, r1
    243a:	b1 1d       	adc	r27, r1
    243c:	80 93 16 15 	sts	0x1516, r24	; 0x801516 <xPendedTicks>
    2440:	90 93 17 15 	sts	0x1517, r25	; 0x801517 <xPendedTicks+0x1>
    2444:	a0 93 18 15 	sts	0x1518, r26	; 0x801518 <xPendedTicks+0x2>
    2448:	b0 93 19 15 	sts	0x1519, r27	; 0x801519 <xPendedTicks+0x3>
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	01 c0       	rjmp	.+2      	; 0x2452 <xTaskIncrementTick+0x24a>
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	ff 90       	pop	r15
    2458:	ef 90       	pop	r14
    245a:	df 90       	pop	r13
    245c:	cf 90       	pop	r12
    245e:	08 95       	ret

00002460 <xTaskResumeAll>:
    2460:	cf 92       	push	r12
    2462:	df 92       	push	r13
    2464:	ef 92       	push	r14
    2466:	ff 92       	push	r15
    2468:	cf 93       	push	r28
    246a:	df 93       	push	r29
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	f8 94       	cli
    2470:	0f 92       	push	r0
    2472:	80 91 0c 15 	lds	r24, 0x150C	; 0x80150c <uxSchedulerSuspended>
    2476:	81 50       	subi	r24, 0x01	; 1
    2478:	80 93 0c 15 	sts	0x150C, r24	; 0x80150c <uxSchedulerSuspended>
    247c:	80 91 0c 15 	lds	r24, 0x150C	; 0x80150c <uxSchedulerSuspended>
    2480:	81 11       	cpse	r24, r1
    2482:	be c0       	rjmp	.+380    	; 0x2600 <xTaskResumeAll+0x1a0>
    2484:	80 91 20 15 	lds	r24, 0x1520	; 0x801520 <uxCurrentNumberOfTasks>
    2488:	81 11       	cpse	r24, r1
    248a:	88 c0       	rjmp	.+272    	; 0x259c <xTaskResumeAll+0x13c>
    248c:	bc c0       	rjmp	.+376    	; 0x2606 <xTaskResumeAll+0x1a6>
    248e:	e0 91 3f 15 	lds	r30, 0x153F	; 0x80153f <xPendingReadyList+0x7>
    2492:	f0 91 40 15 	lds	r31, 0x1540	; 0x801540 <xPendingReadyList+0x8>
    2496:	00 84       	ldd	r0, Z+8	; 0x08
    2498:	f1 85       	ldd	r31, Z+9	; 0x09
    249a:	e0 2d       	mov	r30, r0
    249c:	a0 8d       	ldd	r26, Z+24	; 0x18
    249e:	b1 8d       	ldd	r27, Z+25	; 0x19
    24a0:	c2 89       	ldd	r28, Z+18	; 0x12
    24a2:	d3 89       	ldd	r29, Z+19	; 0x13
    24a4:	84 89       	ldd	r24, Z+20	; 0x14
    24a6:	95 89       	ldd	r25, Z+21	; 0x15
    24a8:	9f 83       	std	Y+7, r25	; 0x07
    24aa:	8e 83       	std	Y+6, r24	; 0x06
    24ac:	c4 89       	ldd	r28, Z+20	; 0x14
    24ae:	d5 89       	ldd	r29, Z+21	; 0x15
    24b0:	82 89       	ldd	r24, Z+18	; 0x12
    24b2:	93 89       	ldd	r25, Z+19	; 0x13
    24b4:	9d 83       	std	Y+5, r25	; 0x05
    24b6:	8c 83       	std	Y+4, r24	; 0x04
    24b8:	11 96       	adiw	r26, 0x01	; 1
    24ba:	2d 91       	ld	r18, X+
    24bc:	3c 91       	ld	r19, X
    24be:	12 97       	sbiw	r26, 0x02	; 2
    24c0:	cf 01       	movw	r24, r30
    24c2:	0e 96       	adiw	r24, 0x0e	; 14
    24c4:	28 17       	cp	r18, r24
    24c6:	39 07       	cpc	r19, r25
    24c8:	31 f4       	brne	.+12     	; 0x24d6 <xTaskResumeAll+0x76>
    24ca:	84 89       	ldd	r24, Z+20	; 0x14
    24cc:	95 89       	ldd	r25, Z+21	; 0x15
    24ce:	12 96       	adiw	r26, 0x02	; 2
    24d0:	9c 93       	st	X, r25
    24d2:	8e 93       	st	-X, r24
    24d4:	11 97       	sbiw	r26, 0x01	; 1
    24d6:	11 8e       	std	Z+25, r1	; 0x19
    24d8:	10 8e       	std	Z+24, r1	; 0x18
    24da:	8c 91       	ld	r24, X
    24dc:	81 50       	subi	r24, 0x01	; 1
    24de:	8c 93       	st	X, r24
    24e0:	a4 85       	ldd	r26, Z+12	; 0x0c
    24e2:	b5 85       	ldd	r27, Z+13	; 0x0d
    24e4:	c6 81       	ldd	r28, Z+6	; 0x06
    24e6:	d7 81       	ldd	r29, Z+7	; 0x07
    24e8:	80 85       	ldd	r24, Z+8	; 0x08
    24ea:	91 85       	ldd	r25, Z+9	; 0x09
    24ec:	9f 83       	std	Y+7, r25	; 0x07
    24ee:	8e 83       	std	Y+6, r24	; 0x06
    24f0:	c0 85       	ldd	r28, Z+8	; 0x08
    24f2:	d1 85       	ldd	r29, Z+9	; 0x09
    24f4:	86 81       	ldd	r24, Z+6	; 0x06
    24f6:	97 81       	ldd	r25, Z+7	; 0x07
    24f8:	9d 83       	std	Y+5, r25	; 0x05
    24fa:	8c 83       	std	Y+4, r24	; 0x04
    24fc:	11 96       	adiw	r26, 0x01	; 1
    24fe:	8d 91       	ld	r24, X+
    2500:	9c 91       	ld	r25, X
    2502:	12 97       	sbiw	r26, 0x02	; 2
    2504:	9f 01       	movw	r18, r30
    2506:	2e 5f       	subi	r18, 0xFE	; 254
    2508:	3f 4f       	sbci	r19, 0xFF	; 255
    250a:	82 17       	cp	r24, r18
    250c:	93 07       	cpc	r25, r19
    250e:	31 f4       	brne	.+12     	; 0x251c <xTaskResumeAll+0xbc>
    2510:	80 85       	ldd	r24, Z+8	; 0x08
    2512:	91 85       	ldd	r25, Z+9	; 0x09
    2514:	12 96       	adiw	r26, 0x02	; 2
    2516:	9c 93       	st	X, r25
    2518:	8e 93       	st	-X, r24
    251a:	11 97       	sbiw	r26, 0x01	; 1
    251c:	15 86       	std	Z+13, r1	; 0x0d
    251e:	14 86       	std	Z+12, r1	; 0x0c
    2520:	8c 91       	ld	r24, X
    2522:	81 50       	subi	r24, 0x01	; 1
    2524:	8c 93       	st	X, r24
    2526:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2528:	80 91 1b 15 	lds	r24, 0x151B	; 0x80151b <uxTopReadyPriority>
    252c:	8a 17       	cp	r24, r26
    252e:	10 f4       	brcc	.+4      	; 0x2534 <xTaskResumeAll+0xd4>
    2530:	a0 93 1b 15 	sts	0x151B, r26	; 0x80151b <uxTopReadyPriority>
    2534:	8b e0       	ldi	r24, 0x0B	; 11
    2536:	8a 9f       	mul	r24, r26
    2538:	d0 01       	movw	r26, r0
    253a:	11 24       	eor	r1, r1
    253c:	a3 5a       	subi	r26, 0xA3	; 163
    253e:	ba 4e       	sbci	r27, 0xEA	; 234
    2540:	11 96       	adiw	r26, 0x01	; 1
    2542:	0d 90       	ld	r0, X+
    2544:	bc 91       	ld	r27, X
    2546:	a0 2d       	mov	r26, r0
    2548:	b7 83       	std	Z+7, r27	; 0x07
    254a:	a6 83       	std	Z+6, r26	; 0x06
    254c:	16 96       	adiw	r26, 0x06	; 6
    254e:	4d 91       	ld	r20, X+
    2550:	5c 91       	ld	r21, X
    2552:	17 97       	sbiw	r26, 0x07	; 7
    2554:	51 87       	std	Z+9, r21	; 0x09
    2556:	40 87       	std	Z+8, r20	; 0x08
    2558:	16 96       	adiw	r26, 0x06	; 6
    255a:	cd 91       	ld	r28, X+
    255c:	dc 91       	ld	r29, X
    255e:	17 97       	sbiw	r26, 0x07	; 7
    2560:	3d 83       	std	Y+5, r19	; 0x05
    2562:	2c 83       	std	Y+4, r18	; 0x04
    2564:	17 96       	adiw	r26, 0x07	; 7
    2566:	3c 93       	st	X, r19
    2568:	2e 93       	st	-X, r18
    256a:	16 97       	sbiw	r26, 0x06	; 6
    256c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    256e:	8a 9f       	mul	r24, r26
    2570:	d0 01       	movw	r26, r0
    2572:	11 24       	eor	r1, r1
    2574:	a3 5a       	subi	r26, 0xA3	; 163
    2576:	ba 4e       	sbci	r27, 0xEA	; 234
    2578:	b5 87       	std	Z+13, r27	; 0x0d
    257a:	a4 87       	std	Z+12, r26	; 0x0c
    257c:	8c 91       	ld	r24, X
    257e:	8f 5f       	subi	r24, 0xFF	; 255
    2580:	8c 93       	st	X, r24
    2582:	92 8d       	ldd	r25, Z+26	; 0x1a
    2584:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2588:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    258c:	5a 96       	adiw	r26, 0x1a	; 26
    258e:	8c 91       	ld	r24, X
    2590:	98 17       	cp	r25, r24
    2592:	30 f0       	brcs	.+12     	; 0x25a0 <xTaskResumeAll+0x140>
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	80 93 15 15 	sts	0x1515, r24	; 0x801515 <xYieldPending>
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <xTaskResumeAll+0x140>
    259c:	e0 e0       	ldi	r30, 0x00	; 0
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 91 38 15 	lds	r24, 0x1538	; 0x801538 <xPendingReadyList>
    25a4:	81 11       	cpse	r24, r1
    25a6:	73 cf       	rjmp	.-282    	; 0x248e <xTaskResumeAll+0x2e>
    25a8:	ef 2b       	or	r30, r31
    25aa:	09 f0       	breq	.+2      	; 0x25ae <xTaskResumeAll+0x14e>
    25ac:	7d db       	rcall	.-2310   	; 0x1ca8 <prvResetNextTaskUnblockTime>
    25ae:	c0 90 16 15 	lds	r12, 0x1516	; 0x801516 <xPendedTicks>
    25b2:	d0 90 17 15 	lds	r13, 0x1517	; 0x801517 <xPendedTicks+0x1>
    25b6:	e0 90 18 15 	lds	r14, 0x1518	; 0x801518 <xPendedTicks+0x2>
    25ba:	f0 90 19 15 	lds	r15, 0x1519	; 0x801519 <xPendedTicks+0x3>
    25be:	c1 14       	cp	r12, r1
    25c0:	d1 04       	cpc	r13, r1
    25c2:	e1 04       	cpc	r14, r1
    25c4:	f1 04       	cpc	r15, r1
    25c6:	a1 f0       	breq	.+40     	; 0x25f0 <xTaskResumeAll+0x190>
    25c8:	1f de       	rcall	.-962    	; 0x2208 <xTaskIncrementTick>
    25ca:	88 23       	and	r24, r24
    25cc:	19 f0       	breq	.+6      	; 0x25d4 <xTaskResumeAll+0x174>
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	80 93 15 15 	sts	0x1515, r24	; 0x801515 <xYieldPending>
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	c8 1a       	sub	r12, r24
    25d8:	d1 08       	sbc	r13, r1
    25da:	e1 08       	sbc	r14, r1
    25dc:	f1 08       	sbc	r15, r1
    25de:	a1 f7       	brne	.-24     	; 0x25c8 <xTaskResumeAll+0x168>
    25e0:	10 92 16 15 	sts	0x1516, r1	; 0x801516 <xPendedTicks>
    25e4:	10 92 17 15 	sts	0x1517, r1	; 0x801517 <xPendedTicks+0x1>
    25e8:	10 92 18 15 	sts	0x1518, r1	; 0x801518 <xPendedTicks+0x2>
    25ec:	10 92 19 15 	sts	0x1519, r1	; 0x801519 <xPendedTicks+0x3>
    25f0:	80 91 15 15 	lds	r24, 0x1515	; 0x801515 <xYieldPending>
    25f4:	88 23       	and	r24, r24
    25f6:	31 f0       	breq	.+12     	; 0x2604 <xTaskResumeAll+0x1a4>
    25f8:	0e 94 c4 06 	call	0xd88	; 0xd88 <vPortYield>
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	03 c0       	rjmp	.+6      	; 0x2606 <xTaskResumeAll+0x1a6>
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	01 c0       	rjmp	.+2      	; 0x2606 <xTaskResumeAll+0x1a6>
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	0f 90       	pop	r0
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	df 91       	pop	r29
    260c:	cf 91       	pop	r28
    260e:	ff 90       	pop	r15
    2610:	ef 90       	pop	r14
    2612:	df 90       	pop	r13
    2614:	cf 90       	pop	r12
    2616:	08 95       	ret

00002618 <xTaskDelayUntil>:
    2618:	8f 92       	push	r8
    261a:	9f 92       	push	r9
    261c:	af 92       	push	r10
    261e:	bf 92       	push	r11
    2620:	cf 92       	push	r12
    2622:	df 92       	push	r13
    2624:	ef 92       	push	r14
    2626:	ff 92       	push	r15
    2628:	1f 93       	push	r17
    262a:	cf 93       	push	r28
    262c:	df 93       	push	r29
    262e:	ec 01       	movw	r28, r24
    2630:	6a 01       	movw	r12, r20
    2632:	7b 01       	movw	r14, r22
    2634:	d5 dd       	rcall	.-1110   	; 0x21e0 <vTaskSuspendAll>
    2636:	80 90 1c 15 	lds	r8, 0x151C	; 0x80151c <xTickCount>
    263a:	90 90 1d 15 	lds	r9, 0x151D	; 0x80151d <xTickCount+0x1>
    263e:	a0 90 1e 15 	lds	r10, 0x151E	; 0x80151e <xTickCount+0x2>
    2642:	b0 90 1f 15 	lds	r11, 0x151F	; 0x80151f <xTickCount+0x3>
    2646:	88 81       	ld	r24, Y
    2648:	99 81       	ldd	r25, Y+1	; 0x01
    264a:	aa 81       	ldd	r26, Y+2	; 0x02
    264c:	bb 81       	ldd	r27, Y+3	; 0x03
    264e:	ac 01       	movw	r20, r24
    2650:	bd 01       	movw	r22, r26
    2652:	4c 0d       	add	r20, r12
    2654:	5d 1d       	adc	r21, r13
    2656:	6e 1d       	adc	r22, r14
    2658:	7f 1d       	adc	r23, r15
    265a:	88 16       	cp	r8, r24
    265c:	99 06       	cpc	r9, r25
    265e:	aa 06       	cpc	r10, r26
    2660:	bb 06       	cpc	r11, r27
    2662:	60 f4       	brcc	.+24     	; 0x267c <xTaskDelayUntil+0x64>
    2664:	48 17       	cp	r20, r24
    2666:	59 07       	cpc	r21, r25
    2668:	6a 07       	cpc	r22, r26
    266a:	7b 07       	cpc	r23, r27
    266c:	98 f4       	brcc	.+38     	; 0x2694 <xTaskDelayUntil+0x7c>
    266e:	84 16       	cp	r8, r20
    2670:	95 06       	cpc	r9, r21
    2672:	a6 06       	cpc	r10, r22
    2674:	b7 06       	cpc	r11, r23
    2676:	80 f0       	brcs	.+32     	; 0x2698 <xTaskDelayUntil+0x80>
    2678:	10 e0       	ldi	r17, 0x00	; 0
    267a:	13 c0       	rjmp	.+38     	; 0x26a2 <xTaskDelayUntil+0x8a>
    267c:	48 17       	cp	r20, r24
    267e:	59 07       	cpc	r21, r25
    2680:	6a 07       	cpc	r22, r26
    2682:	7b 07       	cpc	r23, r27
    2684:	58 f0       	brcs	.+22     	; 0x269c <xTaskDelayUntil+0x84>
    2686:	84 16       	cp	r8, r20
    2688:	95 06       	cpc	r9, r21
    268a:	a6 06       	cpc	r10, r22
    268c:	b7 06       	cpc	r11, r23
    268e:	40 f0       	brcs	.+16     	; 0x26a0 <xTaskDelayUntil+0x88>
    2690:	10 e0       	ldi	r17, 0x00	; 0
    2692:	07 c0       	rjmp	.+14     	; 0x26a2 <xTaskDelayUntil+0x8a>
    2694:	10 e0       	ldi	r17, 0x00	; 0
    2696:	05 c0       	rjmp	.+10     	; 0x26a2 <xTaskDelayUntil+0x8a>
    2698:	11 e0       	ldi	r17, 0x01	; 1
    269a:	03 c0       	rjmp	.+6      	; 0x26a2 <xTaskDelayUntil+0x8a>
    269c:	11 e0       	ldi	r17, 0x01	; 1
    269e:	01 c0       	rjmp	.+2      	; 0x26a2 <xTaskDelayUntil+0x8a>
    26a0:	11 e0       	ldi	r17, 0x01	; 1
    26a2:	48 83       	st	Y, r20
    26a4:	59 83       	std	Y+1, r21	; 0x01
    26a6:	6a 83       	std	Y+2, r22	; 0x02
    26a8:	7b 83       	std	Y+3, r23	; 0x03
    26aa:	11 23       	and	r17, r17
    26ac:	41 f0       	breq	.+16     	; 0x26be <xTaskDelayUntil+0xa6>
    26ae:	cb 01       	movw	r24, r22
    26b0:	ba 01       	movw	r22, r20
    26b2:	68 19       	sub	r22, r8
    26b4:	79 09       	sbc	r23, r9
    26b6:	8a 09       	sbc	r24, r10
    26b8:	9b 09       	sbc	r25, r11
    26ba:	40 e0       	ldi	r20, 0x00	; 0
    26bc:	6b dc       	rcall	.-1834   	; 0x1f94 <prvAddCurrentTaskToDelayedList>
    26be:	d0 de       	rcall	.-608    	; 0x2460 <xTaskResumeAll>
    26c0:	81 11       	cpse	r24, r1
    26c2:	02 c0       	rjmp	.+4      	; 0x26c8 <xTaskDelayUntil+0xb0>
    26c4:	0e 94 c4 06 	call	0xd88	; 0xd88 <vPortYield>
    26c8:	81 2f       	mov	r24, r17
    26ca:	df 91       	pop	r29
    26cc:	cf 91       	pop	r28
    26ce:	1f 91       	pop	r17
    26d0:	ff 90       	pop	r15
    26d2:	ef 90       	pop	r14
    26d4:	df 90       	pop	r13
    26d6:	cf 90       	pop	r12
    26d8:	bf 90       	pop	r11
    26da:	af 90       	pop	r10
    26dc:	9f 90       	pop	r9
    26de:	8f 90       	pop	r8
    26e0:	08 95       	ret

000026e2 <vTaskDelay>:
    26e2:	cf 92       	push	r12
    26e4:	df 92       	push	r13
    26e6:	ef 92       	push	r14
    26e8:	ff 92       	push	r15
    26ea:	6b 01       	movw	r12, r22
    26ec:	7c 01       	movw	r14, r24
    26ee:	67 2b       	or	r22, r23
    26f0:	68 2b       	or	r22, r24
    26f2:	69 2b       	or	r22, r25
    26f4:	39 f0       	breq	.+14     	; 0x2704 <vTaskDelay+0x22>
    26f6:	74 dd       	rcall	.-1304   	; 0x21e0 <vTaskSuspendAll>
    26f8:	40 e0       	ldi	r20, 0x00	; 0
    26fa:	c7 01       	movw	r24, r14
    26fc:	b6 01       	movw	r22, r12
    26fe:	4a dc       	rcall	.-1900   	; 0x1f94 <prvAddCurrentTaskToDelayedList>
    2700:	af de       	rcall	.-674    	; 0x2460 <xTaskResumeAll>
    2702:	01 c0       	rjmp	.+2      	; 0x2706 <vTaskDelay+0x24>
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	81 11       	cpse	r24, r1
    2708:	02 c0       	rjmp	.+4      	; 0x270e <vTaskDelay+0x2c>
    270a:	0e 94 c4 06 	call	0xd88	; 0xd88 <vPortYield>
    270e:	ff 90       	pop	r15
    2710:	ef 90       	pop	r14
    2712:	df 90       	pop	r13
    2714:	cf 90       	pop	r12
    2716:	08 95       	ret

00002718 <vTaskSwitchContext>:
    2718:	80 91 0c 15 	lds	r24, 0x150C	; 0x80150c <uxSchedulerSuspended>
    271c:	88 23       	and	r24, r24
    271e:	21 f0       	breq	.+8      	; 0x2728 <vTaskSwitchContext+0x10>
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	80 93 15 15 	sts	0x1515, r24	; 0x801515 <xYieldPending>
    2726:	08 95       	ret
    2728:	10 92 15 15 	sts	0x1515, r1	; 0x801515 <xYieldPending>
    272c:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2730:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2734:	20 81       	ld	r18, Z
    2736:	31 81       	ldd	r19, Z+1	; 0x01
    2738:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    273c:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2740:	83 8d       	ldd	r24, Z+27	; 0x1b
    2742:	94 8d       	ldd	r25, Z+28	; 0x1c
    2744:	82 17       	cp	r24, r18
    2746:	93 07       	cpc	r25, r19
    2748:	60 f0       	brcs	.+24     	; 0x2762 <vTaskSwitchContext+0x4a>
    274a:	60 91 cb 15 	lds	r22, 0x15CB	; 0x8015cb <pxCurrentTCB>
    274e:	70 91 cc 15 	lds	r23, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2752:	63 5e       	subi	r22, 0xE3	; 227
    2754:	7f 4f       	sbci	r23, 0xFF	; 255
    2756:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <pxCurrentTCB>
    275a:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    275e:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <vApplicationStackOverflowHook>
    2762:	80 91 1b 15 	lds	r24, 0x151B	; 0x80151b <uxTopReadyPriority>
    2766:	01 c0       	rjmp	.+2      	; 0x276a <vTaskSwitchContext+0x52>
    2768:	81 50       	subi	r24, 0x01	; 1
    276a:	28 2f       	mov	r18, r24
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	9b e0       	ldi	r25, 0x0B	; 11
    2770:	92 9f       	mul	r25, r18
    2772:	f0 01       	movw	r30, r0
    2774:	93 9f       	mul	r25, r19
    2776:	f0 0d       	add	r31, r0
    2778:	11 24       	eor	r1, r1
    277a:	e3 5a       	subi	r30, 0xA3	; 163
    277c:	fa 4e       	sbci	r31, 0xEA	; 234
    277e:	90 81       	ld	r25, Z
    2780:	99 23       	and	r25, r25
    2782:	91 f3       	breq	.-28     	; 0x2768 <vTaskSwitchContext+0x50>
    2784:	9b e0       	ldi	r25, 0x0B	; 11
    2786:	92 9f       	mul	r25, r18
    2788:	a0 01       	movw	r20, r0
    278a:	93 9f       	mul	r25, r19
    278c:	50 0d       	add	r21, r0
    278e:	11 24       	eor	r1, r1
    2790:	df 01       	movw	r26, r30
    2792:	01 80       	ldd	r0, Z+1	; 0x01
    2794:	f2 81       	ldd	r31, Z+2	; 0x02
    2796:	e0 2d       	mov	r30, r0
    2798:	04 80       	ldd	r0, Z+4	; 0x04
    279a:	f5 81       	ldd	r31, Z+5	; 0x05
    279c:	e0 2d       	mov	r30, r0
    279e:	12 96       	adiw	r26, 0x02	; 2
    27a0:	fc 93       	st	X, r31
    27a2:	ee 93       	st	-X, r30
    27a4:	11 97       	sbiw	r26, 0x01	; 1
    27a6:	40 5a       	subi	r20, 0xA0	; 160
    27a8:	5a 4e       	sbci	r21, 0xEA	; 234
    27aa:	e4 17       	cp	r30, r20
    27ac:	f5 07       	cpc	r31, r21
    27ae:	29 f4       	brne	.+10     	; 0x27ba <vTaskSwitchContext+0xa2>
    27b0:	44 81       	ldd	r20, Z+4	; 0x04
    27b2:	55 81       	ldd	r21, Z+5	; 0x05
    27b4:	fd 01       	movw	r30, r26
    27b6:	52 83       	std	Z+2, r21	; 0x02
    27b8:	41 83       	std	Z+1, r20	; 0x01
    27ba:	9b e0       	ldi	r25, 0x0B	; 11
    27bc:	92 9f       	mul	r25, r18
    27be:	f0 01       	movw	r30, r0
    27c0:	93 9f       	mul	r25, r19
    27c2:	f0 0d       	add	r31, r0
    27c4:	11 24       	eor	r1, r1
    27c6:	e3 5a       	subi	r30, 0xA3	; 163
    27c8:	fa 4e       	sbci	r31, 0xEA	; 234
    27ca:	01 80       	ldd	r0, Z+1	; 0x01
    27cc:	f2 81       	ldd	r31, Z+2	; 0x02
    27ce:	e0 2d       	mov	r30, r0
    27d0:	20 85       	ldd	r18, Z+8	; 0x08
    27d2:	31 85       	ldd	r19, Z+9	; 0x09
    27d4:	30 93 cc 15 	sts	0x15CC, r19	; 0x8015cc <pxCurrentTCB+0x1>
    27d8:	20 93 cb 15 	sts	0x15CB, r18	; 0x8015cb <pxCurrentTCB>
    27dc:	80 93 1b 15 	sts	0x151B, r24	; 0x80151b <uxTopReadyPriority>
    27e0:	08 95       	ret

000027e2 <vTaskPlaceOnEventList>:
    27e2:	cf 92       	push	r12
    27e4:	df 92       	push	r13
    27e6:	ef 92       	push	r14
    27e8:	ff 92       	push	r15
    27ea:	6a 01       	movw	r12, r20
    27ec:	7b 01       	movw	r14, r22
    27ee:	60 91 cb 15 	lds	r22, 0x15CB	; 0x8015cb <pxCurrentTCB>
    27f2:	70 91 cc 15 	lds	r23, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    27f6:	62 5f       	subi	r22, 0xF2	; 242
    27f8:	7f 4f       	sbci	r23, 0xFF	; 255
    27fa:	0e 94 0b 06 	call	0xc16	; 0xc16 <vListInsert>
    27fe:	41 e0       	ldi	r20, 0x01	; 1
    2800:	c7 01       	movw	r24, r14
    2802:	b6 01       	movw	r22, r12
    2804:	c7 db       	rcall	.-2162   	; 0x1f94 <prvAddCurrentTaskToDelayedList>
    2806:	ff 90       	pop	r15
    2808:	ef 90       	pop	r14
    280a:	df 90       	pop	r13
    280c:	cf 90       	pop	r12
    280e:	08 95       	ret

00002810 <vTaskPlaceOnUnorderedEventList>:
    2810:	0f 93       	push	r16
    2812:	1f 93       	push	r17
    2814:	cf 93       	push	r28
    2816:	df 93       	push	r29
    2818:	fc 01       	movw	r30, r24
    281a:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
    281e:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2822:	70 68       	ori	r23, 0x80	; 128
    2824:	1e 96       	adiw	r26, 0x0e	; 14
    2826:	4d 93       	st	X+, r20
    2828:	5d 93       	st	X+, r21
    282a:	6d 93       	st	X+, r22
    282c:	7c 93       	st	X, r23
    282e:	51 97       	sbiw	r26, 0x11	; 17
    2830:	a1 81       	ldd	r26, Z+1	; 0x01
    2832:	b2 81       	ldd	r27, Z+2	; 0x02
    2834:	c0 91 cb 15 	lds	r28, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2838:	d0 91 cc 15 	lds	r29, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    283c:	bb 8b       	std	Y+19, r27	; 0x13
    283e:	aa 8b       	std	Y+18, r26	; 0x12
    2840:	c0 91 cb 15 	lds	r28, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2844:	d0 91 cc 15 	lds	r29, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2848:	16 96       	adiw	r26, 0x06	; 6
    284a:	8d 91       	ld	r24, X+
    284c:	9c 91       	ld	r25, X
    284e:	17 97       	sbiw	r26, 0x07	; 7
    2850:	9d 8b       	std	Y+21, r25	; 0x15
    2852:	8c 8b       	std	Y+20, r24	; 0x14
    2854:	16 96       	adiw	r26, 0x06	; 6
    2856:	cd 91       	ld	r28, X+
    2858:	dc 91       	ld	r29, X
    285a:	17 97       	sbiw	r26, 0x07	; 7
    285c:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2860:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2864:	0e 96       	adiw	r24, 0x0e	; 14
    2866:	9d 83       	std	Y+5, r25	; 0x05
    2868:	8c 83       	std	Y+4, r24	; 0x04
    286a:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <pxCurrentTCB>
    286e:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2872:	0e 96       	adiw	r24, 0x0e	; 14
    2874:	17 96       	adiw	r26, 0x07	; 7
    2876:	9c 93       	st	X, r25
    2878:	8e 93       	st	-X, r24
    287a:	16 97       	sbiw	r26, 0x06	; 6
    287c:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2880:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2884:	59 96       	adiw	r26, 0x19	; 25
    2886:	fc 93       	st	X, r31
    2888:	ee 93       	st	-X, r30
    288a:	58 97       	sbiw	r26, 0x18	; 24
    288c:	80 81       	ld	r24, Z
    288e:	8f 5f       	subi	r24, 0xFF	; 255
    2890:	80 83       	st	Z, r24
    2892:	41 e0       	ldi	r20, 0x01	; 1
    2894:	c9 01       	movw	r24, r18
    2896:	b8 01       	movw	r22, r16
    2898:	7d db       	rcall	.-2310   	; 0x1f94 <prvAddCurrentTaskToDelayedList>
    289a:	df 91       	pop	r29
    289c:	cf 91       	pop	r28
    289e:	1f 91       	pop	r17
    28a0:	0f 91       	pop	r16
    28a2:	08 95       	ret

000028a4 <vTaskPlaceOnEventListRestricted>:
    28a4:	cf 93       	push	r28
    28a6:	df 93       	push	r29
    28a8:	fc 01       	movw	r30, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	ba 01       	movw	r22, r20
    28ae:	a1 81       	ldd	r26, Z+1	; 0x01
    28b0:	b2 81       	ldd	r27, Z+2	; 0x02
    28b2:	c0 91 cb 15 	lds	r28, 0x15CB	; 0x8015cb <pxCurrentTCB>
    28b6:	d0 91 cc 15 	lds	r29, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    28ba:	bb 8b       	std	Y+19, r27	; 0x13
    28bc:	aa 8b       	std	Y+18, r26	; 0x12
    28be:	c0 91 cb 15 	lds	r28, 0x15CB	; 0x8015cb <pxCurrentTCB>
    28c2:	d0 91 cc 15 	lds	r29, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    28c6:	16 96       	adiw	r26, 0x06	; 6
    28c8:	4d 91       	ld	r20, X+
    28ca:	5c 91       	ld	r21, X
    28cc:	17 97       	sbiw	r26, 0x07	; 7
    28ce:	5d 8b       	std	Y+21, r21	; 0x15
    28d0:	4c 8b       	std	Y+20, r20	; 0x14
    28d2:	16 96       	adiw	r26, 0x06	; 6
    28d4:	cd 91       	ld	r28, X+
    28d6:	dc 91       	ld	r29, X
    28d8:	17 97       	sbiw	r26, 0x07	; 7
    28da:	40 91 cb 15 	lds	r20, 0x15CB	; 0x8015cb <pxCurrentTCB>
    28de:	50 91 cc 15 	lds	r21, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    28e2:	42 5f       	subi	r20, 0xF2	; 242
    28e4:	5f 4f       	sbci	r21, 0xFF	; 255
    28e6:	5d 83       	std	Y+5, r21	; 0x05
    28e8:	4c 83       	std	Y+4, r20	; 0x04
    28ea:	40 91 cb 15 	lds	r20, 0x15CB	; 0x8015cb <pxCurrentTCB>
    28ee:	50 91 cc 15 	lds	r21, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    28f2:	42 5f       	subi	r20, 0xF2	; 242
    28f4:	5f 4f       	sbci	r21, 0xFF	; 255
    28f6:	17 96       	adiw	r26, 0x07	; 7
    28f8:	5c 93       	st	X, r21
    28fa:	4e 93       	st	-X, r20
    28fc:	16 97       	sbiw	r26, 0x06	; 6
    28fe:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2902:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2906:	59 96       	adiw	r26, 0x19	; 25
    2908:	fc 93       	st	X, r31
    290a:	ee 93       	st	-X, r30
    290c:	58 97       	sbiw	r26, 0x18	; 24
    290e:	30 81       	ld	r19, Z
    2910:	3f 5f       	subi	r19, 0xFF	; 255
    2912:	30 83       	st	Z, r19
    2914:	22 23       	and	r18, r18
    2916:	19 f0       	breq	.+6      	; 0x291e <vTaskPlaceOnEventListRestricted+0x7a>
    2918:	6f ef       	ldi	r22, 0xFF	; 255
    291a:	7f ef       	ldi	r23, 0xFF	; 255
    291c:	cb 01       	movw	r24, r22
    291e:	42 2f       	mov	r20, r18
    2920:	39 db       	rcall	.-2446   	; 0x1f94 <prvAddCurrentTaskToDelayedList>
    2922:	df 91       	pop	r29
    2924:	cf 91       	pop	r28
    2926:	08 95       	ret

00002928 <xTaskRemoveFromEventList>:
    2928:	cf 93       	push	r28
    292a:	df 93       	push	r29
    292c:	dc 01       	movw	r26, r24
    292e:	17 96       	adiw	r26, 0x07	; 7
    2930:	ed 91       	ld	r30, X+
    2932:	fc 91       	ld	r31, X
    2934:	18 97       	sbiw	r26, 0x08	; 8
    2936:	00 84       	ldd	r0, Z+8	; 0x08
    2938:	f1 85       	ldd	r31, Z+9	; 0x09
    293a:	e0 2d       	mov	r30, r0
    293c:	a0 8d       	ldd	r26, Z+24	; 0x18
    293e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2940:	c2 89       	ldd	r28, Z+18	; 0x12
    2942:	d3 89       	ldd	r29, Z+19	; 0x13
    2944:	84 89       	ldd	r24, Z+20	; 0x14
    2946:	95 89       	ldd	r25, Z+21	; 0x15
    2948:	9f 83       	std	Y+7, r25	; 0x07
    294a:	8e 83       	std	Y+6, r24	; 0x06
    294c:	c4 89       	ldd	r28, Z+20	; 0x14
    294e:	d5 89       	ldd	r29, Z+21	; 0x15
    2950:	82 89       	ldd	r24, Z+18	; 0x12
    2952:	93 89       	ldd	r25, Z+19	; 0x13
    2954:	9d 83       	std	Y+5, r25	; 0x05
    2956:	8c 83       	std	Y+4, r24	; 0x04
    2958:	11 96       	adiw	r26, 0x01	; 1
    295a:	8d 91       	ld	r24, X+
    295c:	9c 91       	ld	r25, X
    295e:	12 97       	sbiw	r26, 0x02	; 2
    2960:	9f 01       	movw	r18, r30
    2962:	22 5f       	subi	r18, 0xF2	; 242
    2964:	3f 4f       	sbci	r19, 0xFF	; 255
    2966:	82 17       	cp	r24, r18
    2968:	93 07       	cpc	r25, r19
    296a:	31 f4       	brne	.+12     	; 0x2978 <xTaskRemoveFromEventList+0x50>
    296c:	84 89       	ldd	r24, Z+20	; 0x14
    296e:	95 89       	ldd	r25, Z+21	; 0x15
    2970:	12 96       	adiw	r26, 0x02	; 2
    2972:	9c 93       	st	X, r25
    2974:	8e 93       	st	-X, r24
    2976:	11 97       	sbiw	r26, 0x01	; 1
    2978:	11 8e       	std	Z+25, r1	; 0x19
    297a:	10 8e       	std	Z+24, r1	; 0x18
    297c:	8c 91       	ld	r24, X
    297e:	81 50       	subi	r24, 0x01	; 1
    2980:	8c 93       	st	X, r24
    2982:	80 91 0c 15 	lds	r24, 0x150C	; 0x80150c <uxSchedulerSuspended>
    2986:	81 11       	cpse	r24, r1
    2988:	52 c0       	rjmp	.+164    	; 0x2a2e <xTaskRemoveFromEventList+0x106>
    298a:	a4 85       	ldd	r26, Z+12	; 0x0c
    298c:	b5 85       	ldd	r27, Z+13	; 0x0d
    298e:	c6 81       	ldd	r28, Z+6	; 0x06
    2990:	d7 81       	ldd	r29, Z+7	; 0x07
    2992:	80 85       	ldd	r24, Z+8	; 0x08
    2994:	91 85       	ldd	r25, Z+9	; 0x09
    2996:	9f 83       	std	Y+7, r25	; 0x07
    2998:	8e 83       	std	Y+6, r24	; 0x06
    299a:	c0 85       	ldd	r28, Z+8	; 0x08
    299c:	d1 85       	ldd	r29, Z+9	; 0x09
    299e:	86 81       	ldd	r24, Z+6	; 0x06
    29a0:	97 81       	ldd	r25, Z+7	; 0x07
    29a2:	9d 83       	std	Y+5, r25	; 0x05
    29a4:	8c 83       	std	Y+4, r24	; 0x04
    29a6:	11 96       	adiw	r26, 0x01	; 1
    29a8:	8d 91       	ld	r24, X+
    29aa:	9c 91       	ld	r25, X
    29ac:	12 97       	sbiw	r26, 0x02	; 2
    29ae:	9f 01       	movw	r18, r30
    29b0:	2e 5f       	subi	r18, 0xFE	; 254
    29b2:	3f 4f       	sbci	r19, 0xFF	; 255
    29b4:	82 17       	cp	r24, r18
    29b6:	93 07       	cpc	r25, r19
    29b8:	31 f4       	brne	.+12     	; 0x29c6 <xTaskRemoveFromEventList+0x9e>
    29ba:	80 85       	ldd	r24, Z+8	; 0x08
    29bc:	91 85       	ldd	r25, Z+9	; 0x09
    29be:	12 96       	adiw	r26, 0x02	; 2
    29c0:	9c 93       	st	X, r25
    29c2:	8e 93       	st	-X, r24
    29c4:	11 97       	sbiw	r26, 0x01	; 1
    29c6:	15 86       	std	Z+13, r1	; 0x0d
    29c8:	14 86       	std	Z+12, r1	; 0x0c
    29ca:	8c 91       	ld	r24, X
    29cc:	81 50       	subi	r24, 0x01	; 1
    29ce:	8c 93       	st	X, r24
    29d0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    29d2:	80 91 1b 15 	lds	r24, 0x151B	; 0x80151b <uxTopReadyPriority>
    29d6:	8a 17       	cp	r24, r26
    29d8:	10 f4       	brcc	.+4      	; 0x29de <xTaskRemoveFromEventList+0xb6>
    29da:	a0 93 1b 15 	sts	0x151B, r26	; 0x80151b <uxTopReadyPriority>
    29de:	8b e0       	ldi	r24, 0x0B	; 11
    29e0:	8a 9f       	mul	r24, r26
    29e2:	d0 01       	movw	r26, r0
    29e4:	11 24       	eor	r1, r1
    29e6:	a3 5a       	subi	r26, 0xA3	; 163
    29e8:	ba 4e       	sbci	r27, 0xEA	; 234
    29ea:	11 96       	adiw	r26, 0x01	; 1
    29ec:	0d 90       	ld	r0, X+
    29ee:	bc 91       	ld	r27, X
    29f0:	a0 2d       	mov	r26, r0
    29f2:	b7 83       	std	Z+7, r27	; 0x07
    29f4:	a6 83       	std	Z+6, r26	; 0x06
    29f6:	16 96       	adiw	r26, 0x06	; 6
    29f8:	4d 91       	ld	r20, X+
    29fa:	5c 91       	ld	r21, X
    29fc:	17 97       	sbiw	r26, 0x07	; 7
    29fe:	51 87       	std	Z+9, r21	; 0x09
    2a00:	40 87       	std	Z+8, r20	; 0x08
    2a02:	16 96       	adiw	r26, 0x06	; 6
    2a04:	cd 91       	ld	r28, X+
    2a06:	dc 91       	ld	r29, X
    2a08:	17 97       	sbiw	r26, 0x07	; 7
    2a0a:	3d 83       	std	Y+5, r19	; 0x05
    2a0c:	2c 83       	std	Y+4, r18	; 0x04
    2a0e:	17 96       	adiw	r26, 0x07	; 7
    2a10:	3c 93       	st	X, r19
    2a12:	2e 93       	st	-X, r18
    2a14:	16 97       	sbiw	r26, 0x06	; 6
    2a16:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a18:	8a 9f       	mul	r24, r26
    2a1a:	d0 01       	movw	r26, r0
    2a1c:	11 24       	eor	r1, r1
    2a1e:	a3 5a       	subi	r26, 0xA3	; 163
    2a20:	ba 4e       	sbci	r27, 0xEA	; 234
    2a22:	b5 87       	std	Z+13, r27	; 0x0d
    2a24:	a4 87       	std	Z+12, r26	; 0x0c
    2a26:	8c 91       	ld	r24, X
    2a28:	8f 5f       	subi	r24, 0xFF	; 255
    2a2a:	8c 93       	st	X, r24
    2a2c:	1c c0       	rjmp	.+56     	; 0x2a66 <xTaskRemoveFromEventList+0x13e>
    2a2e:	48 e3       	ldi	r20, 0x38	; 56
    2a30:	55 e1       	ldi	r21, 0x15	; 21
    2a32:	da 01       	movw	r26, r20
    2a34:	11 96       	adiw	r26, 0x01	; 1
    2a36:	cd 91       	ld	r28, X+
    2a38:	dc 91       	ld	r29, X
    2a3a:	12 97       	sbiw	r26, 0x02	; 2
    2a3c:	d3 8b       	std	Z+19, r29	; 0x13
    2a3e:	c2 8b       	std	Z+18, r28	; 0x12
    2a40:	8e 81       	ldd	r24, Y+6	; 0x06
    2a42:	9f 81       	ldd	r25, Y+7	; 0x07
    2a44:	95 8b       	std	Z+21, r25	; 0x15
    2a46:	84 8b       	std	Z+20, r24	; 0x14
    2a48:	8e 81       	ldd	r24, Y+6	; 0x06
    2a4a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	15 96       	adiw	r26, 0x05	; 5
    2a50:	3c 93       	st	X, r19
    2a52:	2e 93       	st	-X, r18
    2a54:	14 97       	sbiw	r26, 0x04	; 4
    2a56:	3f 83       	std	Y+7, r19	; 0x07
    2a58:	2e 83       	std	Y+6, r18	; 0x06
    2a5a:	51 8f       	std	Z+25, r21	; 0x19
    2a5c:	40 8f       	std	Z+24, r20	; 0x18
    2a5e:	da 01       	movw	r26, r20
    2a60:	8c 91       	ld	r24, X
    2a62:	8f 5f       	subi	r24, 0xFF	; 255
    2a64:	8c 93       	st	X, r24
    2a66:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a68:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2a6c:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2a70:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a72:	89 17       	cp	r24, r25
    2a74:	20 f4       	brcc	.+8      	; 0x2a7e <xTaskRemoveFromEventList+0x156>
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	80 93 15 15 	sts	0x1515, r24	; 0x801515 <xYieldPending>
    2a7c:	01 c0       	rjmp	.+2      	; 0x2a80 <xTaskRemoveFromEventList+0x158>
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	df 91       	pop	r29
    2a82:	cf 91       	pop	r28
    2a84:	08 95       	ret

00002a86 <vTaskRemoveFromUnorderedEventList>:
    2a86:	cf 93       	push	r28
    2a88:	df 93       	push	r29
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	70 68       	ori	r23, 0x80	; 128
    2a8e:	4d 93       	st	X+, r20
    2a90:	5d 93       	st	X+, r21
    2a92:	6d 93       	st	X+, r22
    2a94:	7c 93       	st	X, r23
    2a96:	13 97       	sbiw	r26, 0x03	; 3
    2a98:	18 96       	adiw	r26, 0x08	; 8
    2a9a:	ed 91       	ld	r30, X+
    2a9c:	fc 91       	ld	r31, X
    2a9e:	19 97       	sbiw	r26, 0x09	; 9
    2aa0:	1a 96       	adiw	r26, 0x0a	; 10
    2aa2:	4d 91       	ld	r20, X+
    2aa4:	5c 91       	ld	r21, X
    2aa6:	1b 97       	sbiw	r26, 0x0b	; 11
    2aa8:	14 96       	adiw	r26, 0x04	; 4
    2aaa:	8d 91       	ld	r24, X+
    2aac:	9c 91       	ld	r25, X
    2aae:	15 97       	sbiw	r26, 0x05	; 5
    2ab0:	16 96       	adiw	r26, 0x06	; 6
    2ab2:	2d 91       	ld	r18, X+
    2ab4:	3c 91       	ld	r19, X
    2ab6:	17 97       	sbiw	r26, 0x07	; 7
    2ab8:	ec 01       	movw	r28, r24
    2aba:	3f 83       	std	Y+7, r19	; 0x07
    2abc:	2e 83       	std	Y+6, r18	; 0x06
    2abe:	16 96       	adiw	r26, 0x06	; 6
    2ac0:	8d 91       	ld	r24, X+
    2ac2:	9c 91       	ld	r25, X
    2ac4:	17 97       	sbiw	r26, 0x07	; 7
    2ac6:	14 96       	adiw	r26, 0x04	; 4
    2ac8:	2d 91       	ld	r18, X+
    2aca:	3c 91       	ld	r19, X
    2acc:	15 97       	sbiw	r26, 0x05	; 5
    2ace:	ec 01       	movw	r28, r24
    2ad0:	3d 83       	std	Y+5, r19	; 0x05
    2ad2:	2c 83       	std	Y+4, r18	; 0x04
    2ad4:	ea 01       	movw	r28, r20
    2ad6:	89 81       	ldd	r24, Y+1	; 0x01
    2ad8:	9a 81       	ldd	r25, Y+2	; 0x02
    2ada:	a8 17       	cp	r26, r24
    2adc:	b9 07       	cpc	r27, r25
    2ade:	31 f4       	brne	.+12     	; 0x2aec <vTaskRemoveFromUnorderedEventList+0x66>
    2ae0:	16 96       	adiw	r26, 0x06	; 6
    2ae2:	8d 91       	ld	r24, X+
    2ae4:	9c 91       	ld	r25, X
    2ae6:	17 97       	sbiw	r26, 0x07	; 7
    2ae8:	9a 83       	std	Y+2, r25	; 0x02
    2aea:	89 83       	std	Y+1, r24	; 0x01
    2aec:	1b 96       	adiw	r26, 0x0b	; 11
    2aee:	1c 92       	st	X, r1
    2af0:	1e 92       	st	-X, r1
    2af2:	1a 97       	sbiw	r26, 0x0a	; 10
    2af4:	da 01       	movw	r26, r20
    2af6:	8c 91       	ld	r24, X
    2af8:	81 50       	subi	r24, 0x01	; 1
    2afa:	8c 93       	st	X, r24
    2afc:	a4 85       	ldd	r26, Z+12	; 0x0c
    2afe:	b5 85       	ldd	r27, Z+13	; 0x0d
    2b00:	c6 81       	ldd	r28, Z+6	; 0x06
    2b02:	d7 81       	ldd	r29, Z+7	; 0x07
    2b04:	80 85       	ldd	r24, Z+8	; 0x08
    2b06:	91 85       	ldd	r25, Z+9	; 0x09
    2b08:	9f 83       	std	Y+7, r25	; 0x07
    2b0a:	8e 83       	std	Y+6, r24	; 0x06
    2b0c:	c0 85       	ldd	r28, Z+8	; 0x08
    2b0e:	d1 85       	ldd	r29, Z+9	; 0x09
    2b10:	86 81       	ldd	r24, Z+6	; 0x06
    2b12:	97 81       	ldd	r25, Z+7	; 0x07
    2b14:	9d 83       	std	Y+5, r25	; 0x05
    2b16:	8c 83       	std	Y+4, r24	; 0x04
    2b18:	11 96       	adiw	r26, 0x01	; 1
    2b1a:	8d 91       	ld	r24, X+
    2b1c:	9c 91       	ld	r25, X
    2b1e:	12 97       	sbiw	r26, 0x02	; 2
    2b20:	9f 01       	movw	r18, r30
    2b22:	2e 5f       	subi	r18, 0xFE	; 254
    2b24:	3f 4f       	sbci	r19, 0xFF	; 255
    2b26:	82 17       	cp	r24, r18
    2b28:	93 07       	cpc	r25, r19
    2b2a:	31 f4       	brne	.+12     	; 0x2b38 <vTaskRemoveFromUnorderedEventList+0xb2>
    2b2c:	80 85       	ldd	r24, Z+8	; 0x08
    2b2e:	91 85       	ldd	r25, Z+9	; 0x09
    2b30:	12 96       	adiw	r26, 0x02	; 2
    2b32:	9c 93       	st	X, r25
    2b34:	8e 93       	st	-X, r24
    2b36:	11 97       	sbiw	r26, 0x01	; 1
    2b38:	15 86       	std	Z+13, r1	; 0x0d
    2b3a:	14 86       	std	Z+12, r1	; 0x0c
    2b3c:	8c 91       	ld	r24, X
    2b3e:	81 50       	subi	r24, 0x01	; 1
    2b40:	8c 93       	st	X, r24
    2b42:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2b44:	80 91 1b 15 	lds	r24, 0x151B	; 0x80151b <uxTopReadyPriority>
    2b48:	8a 17       	cp	r24, r26
    2b4a:	10 f4       	brcc	.+4      	; 0x2b50 <vTaskRemoveFromUnorderedEventList+0xca>
    2b4c:	a0 93 1b 15 	sts	0x151B, r26	; 0x80151b <uxTopReadyPriority>
    2b50:	8b e0       	ldi	r24, 0x0B	; 11
    2b52:	8a 9f       	mul	r24, r26
    2b54:	d0 01       	movw	r26, r0
    2b56:	11 24       	eor	r1, r1
    2b58:	a3 5a       	subi	r26, 0xA3	; 163
    2b5a:	ba 4e       	sbci	r27, 0xEA	; 234
    2b5c:	11 96       	adiw	r26, 0x01	; 1
    2b5e:	0d 90       	ld	r0, X+
    2b60:	bc 91       	ld	r27, X
    2b62:	a0 2d       	mov	r26, r0
    2b64:	b7 83       	std	Z+7, r27	; 0x07
    2b66:	a6 83       	std	Z+6, r26	; 0x06
    2b68:	16 96       	adiw	r26, 0x06	; 6
    2b6a:	4d 91       	ld	r20, X+
    2b6c:	5c 91       	ld	r21, X
    2b6e:	17 97       	sbiw	r26, 0x07	; 7
    2b70:	51 87       	std	Z+9, r21	; 0x09
    2b72:	40 87       	std	Z+8, r20	; 0x08
    2b74:	16 96       	adiw	r26, 0x06	; 6
    2b76:	cd 91       	ld	r28, X+
    2b78:	dc 91       	ld	r29, X
    2b7a:	17 97       	sbiw	r26, 0x07	; 7
    2b7c:	3d 83       	std	Y+5, r19	; 0x05
    2b7e:	2c 83       	std	Y+4, r18	; 0x04
    2b80:	17 96       	adiw	r26, 0x07	; 7
    2b82:	3c 93       	st	X, r19
    2b84:	2e 93       	st	-X, r18
    2b86:	16 97       	sbiw	r26, 0x06	; 6
    2b88:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2b8a:	8a 9f       	mul	r24, r26
    2b8c:	d0 01       	movw	r26, r0
    2b8e:	11 24       	eor	r1, r1
    2b90:	a3 5a       	subi	r26, 0xA3	; 163
    2b92:	ba 4e       	sbci	r27, 0xEA	; 234
    2b94:	b5 87       	std	Z+13, r27	; 0x0d
    2b96:	a4 87       	std	Z+12, r26	; 0x0c
    2b98:	8c 91       	ld	r24, X
    2b9a:	8f 5f       	subi	r24, 0xFF	; 255
    2b9c:	8c 93       	st	X, r24
    2b9e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ba0:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2ba4:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2ba8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2baa:	89 17       	cp	r24, r25
    2bac:	18 f4       	brcc	.+6      	; 0x2bb4 <vTaskRemoveFromUnorderedEventList+0x12e>
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	80 93 15 15 	sts	0x1515, r24	; 0x801515 <xYieldPending>
    2bb4:	df 91       	pop	r29
    2bb6:	cf 91       	pop	r28
    2bb8:	08 95       	ret

00002bba <vTaskSetTimeOutState>:
    2bba:	0f b6       	in	r0, 0x3f	; 63
    2bbc:	f8 94       	cli
    2bbe:	0f 92       	push	r0
    2bc0:	20 91 14 15 	lds	r18, 0x1514	; 0x801514 <xNumOfOverflows>
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	20 83       	st	Z, r18
    2bc8:	40 91 1c 15 	lds	r20, 0x151C	; 0x80151c <xTickCount>
    2bcc:	50 91 1d 15 	lds	r21, 0x151D	; 0x80151d <xTickCount+0x1>
    2bd0:	60 91 1e 15 	lds	r22, 0x151E	; 0x80151e <xTickCount+0x2>
    2bd4:	70 91 1f 15 	lds	r23, 0x151F	; 0x80151f <xTickCount+0x3>
    2bd8:	41 83       	std	Z+1, r20	; 0x01
    2bda:	52 83       	std	Z+2, r21	; 0x02
    2bdc:	63 83       	std	Z+3, r22	; 0x03
    2bde:	74 83       	std	Z+4, r23	; 0x04
    2be0:	0f 90       	pop	r0
    2be2:	0f be       	out	0x3f, r0	; 63
    2be4:	08 95       	ret

00002be6 <vTaskInternalSetTimeOutState>:
    2be6:	20 91 14 15 	lds	r18, 0x1514	; 0x801514 <xNumOfOverflows>
    2bea:	fc 01       	movw	r30, r24
    2bec:	20 83       	st	Z, r18
    2bee:	40 91 1c 15 	lds	r20, 0x151C	; 0x80151c <xTickCount>
    2bf2:	50 91 1d 15 	lds	r21, 0x151D	; 0x80151d <xTickCount+0x1>
    2bf6:	60 91 1e 15 	lds	r22, 0x151E	; 0x80151e <xTickCount+0x2>
    2bfa:	70 91 1f 15 	lds	r23, 0x151F	; 0x80151f <xTickCount+0x3>
    2bfe:	41 83       	std	Z+1, r20	; 0x01
    2c00:	52 83       	std	Z+2, r21	; 0x02
    2c02:	63 83       	std	Z+3, r22	; 0x03
    2c04:	74 83       	std	Z+4, r23	; 0x04
    2c06:	08 95       	ret

00002c08 <xTaskCheckForTimeOut>:
    2c08:	8f 92       	push	r8
    2c0a:	9f 92       	push	r9
    2c0c:	af 92       	push	r10
    2c0e:	bf 92       	push	r11
    2c10:	cf 92       	push	r12
    2c12:	df 92       	push	r13
    2c14:	ef 92       	push	r14
    2c16:	ff 92       	push	r15
    2c18:	0f 93       	push	r16
    2c1a:	1f 93       	push	r17
    2c1c:	cf 93       	push	r28
    2c1e:	df 93       	push	r29
    2c20:	fb 01       	movw	r30, r22
    2c22:	0f b6       	in	r0, 0x3f	; 63
    2c24:	f8 94       	cli
    2c26:	0f 92       	push	r0
    2c28:	c0 90 1c 15 	lds	r12, 0x151C	; 0x80151c <xTickCount>
    2c2c:	d0 90 1d 15 	lds	r13, 0x151D	; 0x80151d <xTickCount+0x1>
    2c30:	e0 90 1e 15 	lds	r14, 0x151E	; 0x80151e <xTickCount+0x2>
    2c34:	f0 90 1f 15 	lds	r15, 0x151F	; 0x80151f <xTickCount+0x3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	11 96       	adiw	r26, 0x01	; 1
    2c3c:	0d 91       	ld	r16, X+
    2c3e:	1d 91       	ld	r17, X+
    2c40:	2d 91       	ld	r18, X+
    2c42:	3c 91       	ld	r19, X
    2c44:	14 97       	sbiw	r26, 0x04	; 4
    2c46:	46 01       	movw	r8, r12
    2c48:	57 01       	movw	r10, r14
    2c4a:	80 1a       	sub	r8, r16
    2c4c:	91 0a       	sbc	r9, r17
    2c4e:	a2 0a       	sbc	r10, r18
    2c50:	b3 0a       	sbc	r11, r19
    2c52:	40 81       	ld	r20, Z
    2c54:	51 81       	ldd	r21, Z+1	; 0x01
    2c56:	62 81       	ldd	r22, Z+2	; 0x02
    2c58:	73 81       	ldd	r23, Z+3	; 0x03
    2c5a:	4f 3f       	cpi	r20, 0xFF	; 255
    2c5c:	bf ef       	ldi	r27, 0xFF	; 255
    2c5e:	5b 07       	cpc	r21, r27
    2c60:	6b 07       	cpc	r22, r27
    2c62:	7b 07       	cpc	r23, r27
    2c64:	39 f1       	breq	.+78     	; 0x2cb4 <xTaskCheckForTimeOut+0xac>
    2c66:	ec 01       	movw	r28, r24
    2c68:	b8 81       	ld	r27, Y
    2c6a:	a0 91 14 15 	lds	r26, 0x1514	; 0x801514 <xNumOfOverflows>
    2c6e:	ba 17       	cp	r27, r26
    2c70:	59 f0       	breq	.+22     	; 0x2c88 <xTaskCheckForTimeOut+0x80>
    2c72:	c0 16       	cp	r12, r16
    2c74:	d1 06       	cpc	r13, r17
    2c76:	e2 06       	cpc	r14, r18
    2c78:	f3 06       	cpc	r15, r19
    2c7a:	30 f0       	brcs	.+12     	; 0x2c88 <xTaskCheckForTimeOut+0x80>
    2c7c:	10 82       	st	Z, r1
    2c7e:	11 82       	std	Z+1, r1	; 0x01
    2c80:	12 82       	std	Z+2, r1	; 0x02
    2c82:	13 82       	std	Z+3, r1	; 0x03
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	17 c0       	rjmp	.+46     	; 0x2cb6 <xTaskCheckForTimeOut+0xae>
    2c88:	84 16       	cp	r8, r20
    2c8a:	95 06       	cpc	r9, r21
    2c8c:	a6 06       	cpc	r10, r22
    2c8e:	b7 06       	cpc	r11, r23
    2c90:	58 f4       	brcc	.+22     	; 0x2ca8 <xTaskCheckForTimeOut+0xa0>
    2c92:	48 19       	sub	r20, r8
    2c94:	59 09       	sbc	r21, r9
    2c96:	6a 09       	sbc	r22, r10
    2c98:	7b 09       	sbc	r23, r11
    2c9a:	40 83       	st	Z, r20
    2c9c:	51 83       	std	Z+1, r21	; 0x01
    2c9e:	62 83       	std	Z+2, r22	; 0x02
    2ca0:	73 83       	std	Z+3, r23	; 0x03
    2ca2:	a1 df       	rcall	.-190    	; 0x2be6 <vTaskInternalSetTimeOutState>
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	07 c0       	rjmp	.+14     	; 0x2cb6 <xTaskCheckForTimeOut+0xae>
    2ca8:	10 82       	st	Z, r1
    2caa:	11 82       	std	Z+1, r1	; 0x01
    2cac:	12 82       	std	Z+2, r1	; 0x02
    2cae:	13 82       	std	Z+3, r1	; 0x03
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	01 c0       	rjmp	.+2      	; 0x2cb6 <xTaskCheckForTimeOut+0xae>
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	0f 90       	pop	r0
    2cb8:	0f be       	out	0x3f, r0	; 63
    2cba:	df 91       	pop	r29
    2cbc:	cf 91       	pop	r28
    2cbe:	1f 91       	pop	r17
    2cc0:	0f 91       	pop	r16
    2cc2:	ff 90       	pop	r15
    2cc4:	ef 90       	pop	r14
    2cc6:	df 90       	pop	r13
    2cc8:	cf 90       	pop	r12
    2cca:	bf 90       	pop	r11
    2ccc:	af 90       	pop	r10
    2cce:	9f 90       	pop	r9
    2cd0:	8f 90       	pop	r8
    2cd2:	08 95       	ret

00002cd4 <vTaskMissedYield>:
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	80 93 15 15 	sts	0x1515, r24	; 0x801515 <xYieldPending>
    2cda:	08 95       	ret

00002cdc <xTaskGetCurrentTaskHandle>:
    2cdc:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2ce0:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2ce4:	08 95       	ret

00002ce6 <xTaskGetSchedulerState>:
    2ce6:	80 91 1a 15 	lds	r24, 0x151A	; 0x80151a <xSchedulerRunning>
    2cea:	88 23       	and	r24, r24
    2cec:	31 f0       	breq	.+12     	; 0x2cfa <xTaskGetSchedulerState+0x14>
    2cee:	80 91 0c 15 	lds	r24, 0x150C	; 0x80150c <uxSchedulerSuspended>
    2cf2:	81 11       	cpse	r24, r1
    2cf4:	04 c0       	rjmp	.+8      	; 0x2cfe <xTaskGetSchedulerState+0x18>
    2cf6:	82 e0       	ldi	r24, 0x02	; 2
    2cf8:	08 95       	ret
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	08 95       	ret
    2cfe:	80 e0       	ldi	r24, 0x00	; 0
    2d00:	08 95       	ret

00002d02 <xTaskPriorityInherit>:
    2d02:	0f 93       	push	r16
    2d04:	1f 93       	push	r17
    2d06:	cf 93       	push	r28
    2d08:	df 93       	push	r29
    2d0a:	fc 01       	movw	r30, r24
    2d0c:	89 2b       	or	r24, r25
    2d0e:	09 f4       	brne	.+2      	; 0x2d12 <xTaskPriorityInherit+0x10>
    2d10:	77 c0       	rjmp	.+238    	; 0x2e00 <xTaskPriorityInherit+0xfe>
    2d12:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d14:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2d18:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2d1c:	5a 96       	adiw	r26, 0x1a	; 26
    2d1e:	9c 91       	ld	r25, X
    2d20:	89 17       	cp	r24, r25
    2d22:	08 f0       	brcs	.+2      	; 0x2d26 <xTaskPriorityInherit+0x24>
    2d24:	63 c0       	rjmp	.+198    	; 0x2dec <xTaskPriorityInherit+0xea>
    2d26:	46 85       	ldd	r20, Z+14	; 0x0e
    2d28:	57 85       	ldd	r21, Z+15	; 0x0f
    2d2a:	60 89       	ldd	r22, Z+16	; 0x10
    2d2c:	71 89       	ldd	r23, Z+17	; 0x11
    2d2e:	77 23       	and	r23, r23
    2d30:	94 f0       	brlt	.+36     	; 0x2d56 <xTaskPriorityInherit+0x54>
    2d32:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2d36:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2d3a:	5a 96       	adiw	r26, 0x1a	; 26
    2d3c:	9c 91       	ld	r25, X
    2d3e:	4a e0       	ldi	r20, 0x0A	; 10
    2d40:	50 e0       	ldi	r21, 0x00	; 0
    2d42:	60 e0       	ldi	r22, 0x00	; 0
    2d44:	70 e0       	ldi	r23, 0x00	; 0
    2d46:	49 1b       	sub	r20, r25
    2d48:	51 09       	sbc	r21, r1
    2d4a:	61 09       	sbc	r22, r1
    2d4c:	71 09       	sbc	r23, r1
    2d4e:	46 87       	std	Z+14, r20	; 0x0e
    2d50:	57 87       	std	Z+15, r21	; 0x0f
    2d52:	60 8b       	std	Z+16, r22	; 0x10
    2d54:	71 8b       	std	Z+17, r23	; 0x11
    2d56:	24 85       	ldd	r18, Z+12	; 0x0c
    2d58:	35 85       	ldd	r19, Z+13	; 0x0d
    2d5a:	4b e0       	ldi	r20, 0x0B	; 11
    2d5c:	84 9f       	mul	r24, r20
    2d5e:	c0 01       	movw	r24, r0
    2d60:	11 24       	eor	r1, r1
    2d62:	83 5a       	subi	r24, 0xA3	; 163
    2d64:	9a 4e       	sbci	r25, 0xEA	; 234
    2d66:	28 17       	cp	r18, r24
    2d68:	39 07       	cpc	r19, r25
    2d6a:	b9 f5       	brne	.+110    	; 0x2dda <xTaskPriorityInherit+0xd8>
    2d6c:	ef 01       	movw	r28, r30
    2d6e:	8f 01       	movw	r16, r30
    2d70:	0e 5f       	subi	r16, 0xFE	; 254
    2d72:	1f 4f       	sbci	r17, 0xFF	; 255
    2d74:	c8 01       	movw	r24, r16
    2d76:	0e 94 48 06 	call	0xc90	; 0xc90 <uxListRemove>
    2d7a:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2d7e:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2d82:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2d84:	ea 8f       	std	Y+26, r30	; 0x1a
    2d86:	80 91 1b 15 	lds	r24, 0x151B	; 0x80151b <uxTopReadyPriority>
    2d8a:	8e 17       	cp	r24, r30
    2d8c:	10 f4       	brcc	.+4      	; 0x2d92 <xTaskPriorityInherit+0x90>
    2d8e:	e0 93 1b 15 	sts	0x151B, r30	; 0x80151b <uxTopReadyPriority>
    2d92:	8b e0       	ldi	r24, 0x0B	; 11
    2d94:	8e 9f       	mul	r24, r30
    2d96:	f0 01       	movw	r30, r0
    2d98:	11 24       	eor	r1, r1
    2d9a:	e3 5a       	subi	r30, 0xA3	; 163
    2d9c:	fa 4e       	sbci	r31, 0xEA	; 234
    2d9e:	01 80       	ldd	r0, Z+1	; 0x01
    2da0:	f2 81       	ldd	r31, Z+2	; 0x02
    2da2:	e0 2d       	mov	r30, r0
    2da4:	ff 83       	std	Y+7, r31	; 0x07
    2da6:	ee 83       	std	Y+6, r30	; 0x06
    2da8:	26 81       	ldd	r18, Z+6	; 0x06
    2daa:	37 81       	ldd	r19, Z+7	; 0x07
    2dac:	39 87       	std	Y+9, r19	; 0x09
    2dae:	28 87       	std	Y+8, r18	; 0x08
    2db0:	a6 81       	ldd	r26, Z+6	; 0x06
    2db2:	b7 81       	ldd	r27, Z+7	; 0x07
    2db4:	15 96       	adiw	r26, 0x05	; 5
    2db6:	1c 93       	st	X, r17
    2db8:	0e 93       	st	-X, r16
    2dba:	14 97       	sbiw	r26, 0x04	; 4
    2dbc:	17 83       	std	Z+7, r17	; 0x07
    2dbe:	06 83       	std	Z+6, r16	; 0x06
    2dc0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2dc2:	8e 9f       	mul	r24, r30
    2dc4:	f0 01       	movw	r30, r0
    2dc6:	11 24       	eor	r1, r1
    2dc8:	e3 5a       	subi	r30, 0xA3	; 163
    2dca:	fa 4e       	sbci	r31, 0xEA	; 234
    2dcc:	fd 87       	std	Y+13, r31	; 0x0d
    2dce:	ec 87       	std	Y+12, r30	; 0x0c
    2dd0:	80 81       	ld	r24, Z
    2dd2:	8f 5f       	subi	r24, 0xFF	; 255
    2dd4:	80 83       	st	Z, r24
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	16 c0       	rjmp	.+44     	; 0x2e06 <xTaskPriorityInherit+0x104>
    2dda:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2dde:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2de2:	5a 96       	adiw	r26, 0x1a	; 26
    2de4:	8c 91       	ld	r24, X
    2de6:	82 8f       	std	Z+26, r24	; 0x1a
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	0d c0       	rjmp	.+26     	; 0x2e06 <xTaskPriorityInherit+0x104>
    2dec:	95 a5       	ldd	r25, Z+45	; 0x2d
    2dee:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2df2:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2df6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2df8:	98 17       	cp	r25, r24
    2dfa:	20 f0       	brcs	.+8      	; 0x2e04 <xTaskPriorityInherit+0x102>
    2dfc:	80 e0       	ldi	r24, 0x00	; 0
    2dfe:	03 c0       	rjmp	.+6      	; 0x2e06 <xTaskPriorityInherit+0x104>
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	01 c0       	rjmp	.+2      	; 0x2e06 <xTaskPriorityInherit+0x104>
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	df 91       	pop	r29
    2e08:	cf 91       	pop	r28
    2e0a:	1f 91       	pop	r17
    2e0c:	0f 91       	pop	r16
    2e0e:	08 95       	ret

00002e10 <xTaskPriorityDisinherit>:
    2e10:	0f 93       	push	r16
    2e12:	1f 93       	push	r17
    2e14:	cf 93       	push	r28
    2e16:	df 93       	push	r29
    2e18:	fc 01       	movw	r30, r24
    2e1a:	89 2b       	or	r24, r25
    2e1c:	09 f4       	brne	.+2      	; 0x2e20 <xTaskPriorityDisinherit+0x10>
    2e1e:	49 c0       	rjmp	.+146    	; 0x2eb2 <xTaskPriorityDisinherit+0xa2>
    2e20:	86 a5       	ldd	r24, Z+46	; 0x2e
    2e22:	81 50       	subi	r24, 0x01	; 1
    2e24:	86 a7       	std	Z+46, r24	; 0x2e
    2e26:	22 8d       	ldd	r18, Z+26	; 0x1a
    2e28:	95 a5       	ldd	r25, Z+45	; 0x2d
    2e2a:	29 17       	cp	r18, r25
    2e2c:	09 f4       	brne	.+2      	; 0x2e30 <xTaskPriorityDisinherit+0x20>
    2e2e:	43 c0       	rjmp	.+134    	; 0x2eb6 <xTaskPriorityDisinherit+0xa6>
    2e30:	81 11       	cpse	r24, r1
    2e32:	43 c0       	rjmp	.+134    	; 0x2eba <xTaskPriorityDisinherit+0xaa>
    2e34:	ef 01       	movw	r28, r30
    2e36:	8f 01       	movw	r16, r30
    2e38:	0e 5f       	subi	r16, 0xFE	; 254
    2e3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e3c:	c8 01       	movw	r24, r16
    2e3e:	0e 94 48 06 	call	0xc90	; 0xc90 <uxListRemove>
    2e42:	ed a5       	ldd	r30, Y+45	; 0x2d
    2e44:	ea 8f       	std	Y+26, r30	; 0x1a
    2e46:	8a e0       	ldi	r24, 0x0A	; 10
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	a0 e0       	ldi	r26, 0x00	; 0
    2e4c:	b0 e0       	ldi	r27, 0x00	; 0
    2e4e:	8e 1b       	sub	r24, r30
    2e50:	91 09       	sbc	r25, r1
    2e52:	a1 09       	sbc	r26, r1
    2e54:	b1 09       	sbc	r27, r1
    2e56:	8e 87       	std	Y+14, r24	; 0x0e
    2e58:	9f 87       	std	Y+15, r25	; 0x0f
    2e5a:	a8 8b       	std	Y+16, r26	; 0x10
    2e5c:	b9 8b       	std	Y+17, r27	; 0x11
    2e5e:	80 91 1b 15 	lds	r24, 0x151B	; 0x80151b <uxTopReadyPriority>
    2e62:	8e 17       	cp	r24, r30
    2e64:	10 f4       	brcc	.+4      	; 0x2e6a <xTaskPriorityDisinherit+0x5a>
    2e66:	e0 93 1b 15 	sts	0x151B, r30	; 0x80151b <uxTopReadyPriority>
    2e6a:	8b e0       	ldi	r24, 0x0B	; 11
    2e6c:	8e 9f       	mul	r24, r30
    2e6e:	f0 01       	movw	r30, r0
    2e70:	11 24       	eor	r1, r1
    2e72:	e3 5a       	subi	r30, 0xA3	; 163
    2e74:	fa 4e       	sbci	r31, 0xEA	; 234
    2e76:	01 80       	ldd	r0, Z+1	; 0x01
    2e78:	f2 81       	ldd	r31, Z+2	; 0x02
    2e7a:	e0 2d       	mov	r30, r0
    2e7c:	ff 83       	std	Y+7, r31	; 0x07
    2e7e:	ee 83       	std	Y+6, r30	; 0x06
    2e80:	26 81       	ldd	r18, Z+6	; 0x06
    2e82:	37 81       	ldd	r19, Z+7	; 0x07
    2e84:	39 87       	std	Y+9, r19	; 0x09
    2e86:	28 87       	std	Y+8, r18	; 0x08
    2e88:	a6 81       	ldd	r26, Z+6	; 0x06
    2e8a:	b7 81       	ldd	r27, Z+7	; 0x07
    2e8c:	15 96       	adiw	r26, 0x05	; 5
    2e8e:	1c 93       	st	X, r17
    2e90:	0e 93       	st	-X, r16
    2e92:	14 97       	sbiw	r26, 0x04	; 4
    2e94:	17 83       	std	Z+7, r17	; 0x07
    2e96:	06 83       	std	Z+6, r16	; 0x06
    2e98:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2e9a:	8e 9f       	mul	r24, r30
    2e9c:	f0 01       	movw	r30, r0
    2e9e:	11 24       	eor	r1, r1
    2ea0:	e3 5a       	subi	r30, 0xA3	; 163
    2ea2:	fa 4e       	sbci	r31, 0xEA	; 234
    2ea4:	fd 87       	std	Y+13, r31	; 0x0d
    2ea6:	ec 87       	std	Y+12, r30	; 0x0c
    2ea8:	80 81       	ld	r24, Z
    2eaa:	8f 5f       	subi	r24, 0xFF	; 255
    2eac:	80 83       	st	Z, r24
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	05 c0       	rjmp	.+10     	; 0x2ebc <xTaskPriorityDisinherit+0xac>
    2eb2:	80 e0       	ldi	r24, 0x00	; 0
    2eb4:	03 c0       	rjmp	.+6      	; 0x2ebc <xTaskPriorityDisinherit+0xac>
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	01 c0       	rjmp	.+2      	; 0x2ebc <xTaskPriorityDisinherit+0xac>
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	df 91       	pop	r29
    2ebe:	cf 91       	pop	r28
    2ec0:	1f 91       	pop	r17
    2ec2:	0f 91       	pop	r16
    2ec4:	08 95       	ret

00002ec6 <vTaskPriorityDisinheritAfterTimeout>:
    2ec6:	0f 93       	push	r16
    2ec8:	1f 93       	push	r17
    2eca:	cf 93       	push	r28
    2ecc:	df 93       	push	r29
    2ece:	fc 01       	movw	r30, r24
    2ed0:	89 2b       	or	r24, r25
    2ed2:	09 f4       	brne	.+2      	; 0x2ed6 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2ed4:	5a c0       	rjmp	.+180    	; 0x2f8a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2ed6:	85 a5       	ldd	r24, Z+45	; 0x2d
    2ed8:	86 17       	cp	r24, r22
    2eda:	08 f4       	brcc	.+2      	; 0x2ede <vTaskPriorityDisinheritAfterTimeout+0x18>
    2edc:	86 2f       	mov	r24, r22
    2ede:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ee0:	89 17       	cp	r24, r25
    2ee2:	09 f4       	brne	.+2      	; 0x2ee6 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2ee4:	52 c0       	rjmp	.+164    	; 0x2f8a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2ee6:	26 a5       	ldd	r18, Z+46	; 0x2e
    2ee8:	21 30       	cpi	r18, 0x01	; 1
    2eea:	09 f0       	breq	.+2      	; 0x2eee <vTaskPriorityDisinheritAfterTimeout+0x28>
    2eec:	4e c0       	rjmp	.+156    	; 0x2f8a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2eee:	82 8f       	std	Z+26, r24	; 0x1a
    2ef0:	46 85       	ldd	r20, Z+14	; 0x0e
    2ef2:	57 85       	ldd	r21, Z+15	; 0x0f
    2ef4:	60 89       	ldd	r22, Z+16	; 0x10
    2ef6:	71 89       	ldd	r23, Z+17	; 0x11
    2ef8:	77 23       	and	r23, r23
    2efa:	64 f0       	brlt	.+24     	; 0x2f14 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2efc:	4a e0       	ldi	r20, 0x0A	; 10
    2efe:	50 e0       	ldi	r21, 0x00	; 0
    2f00:	60 e0       	ldi	r22, 0x00	; 0
    2f02:	70 e0       	ldi	r23, 0x00	; 0
    2f04:	48 1b       	sub	r20, r24
    2f06:	51 09       	sbc	r21, r1
    2f08:	61 09       	sbc	r22, r1
    2f0a:	71 09       	sbc	r23, r1
    2f0c:	46 87       	std	Z+14, r20	; 0x0e
    2f0e:	57 87       	std	Z+15, r21	; 0x0f
    2f10:	60 8b       	std	Z+16, r22	; 0x10
    2f12:	71 8b       	std	Z+17, r23	; 0x11
    2f14:	24 85       	ldd	r18, Z+12	; 0x0c
    2f16:	35 85       	ldd	r19, Z+13	; 0x0d
    2f18:	4b e0       	ldi	r20, 0x0B	; 11
    2f1a:	94 9f       	mul	r25, r20
    2f1c:	c0 01       	movw	r24, r0
    2f1e:	11 24       	eor	r1, r1
    2f20:	83 5a       	subi	r24, 0xA3	; 163
    2f22:	9a 4e       	sbci	r25, 0xEA	; 234
    2f24:	28 17       	cp	r18, r24
    2f26:	39 07       	cpc	r19, r25
    2f28:	81 f5       	brne	.+96     	; 0x2f8a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2f2a:	ef 01       	movw	r28, r30
    2f2c:	8f 01       	movw	r16, r30
    2f2e:	0e 5f       	subi	r16, 0xFE	; 254
    2f30:	1f 4f       	sbci	r17, 0xFF	; 255
    2f32:	c8 01       	movw	r24, r16
    2f34:	0e 94 48 06 	call	0xc90	; 0xc90 <uxListRemove>
    2f38:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2f3a:	80 91 1b 15 	lds	r24, 0x151B	; 0x80151b <uxTopReadyPriority>
    2f3e:	8e 17       	cp	r24, r30
    2f40:	10 f4       	brcc	.+4      	; 0x2f46 <vTaskPriorityDisinheritAfterTimeout+0x80>
    2f42:	e0 93 1b 15 	sts	0x151B, r30	; 0x80151b <uxTopReadyPriority>
    2f46:	8b e0       	ldi	r24, 0x0B	; 11
    2f48:	8e 9f       	mul	r24, r30
    2f4a:	f0 01       	movw	r30, r0
    2f4c:	11 24       	eor	r1, r1
    2f4e:	e3 5a       	subi	r30, 0xA3	; 163
    2f50:	fa 4e       	sbci	r31, 0xEA	; 234
    2f52:	01 80       	ldd	r0, Z+1	; 0x01
    2f54:	f2 81       	ldd	r31, Z+2	; 0x02
    2f56:	e0 2d       	mov	r30, r0
    2f58:	ff 83       	std	Y+7, r31	; 0x07
    2f5a:	ee 83       	std	Y+6, r30	; 0x06
    2f5c:	26 81       	ldd	r18, Z+6	; 0x06
    2f5e:	37 81       	ldd	r19, Z+7	; 0x07
    2f60:	39 87       	std	Y+9, r19	; 0x09
    2f62:	28 87       	std	Y+8, r18	; 0x08
    2f64:	a6 81       	ldd	r26, Z+6	; 0x06
    2f66:	b7 81       	ldd	r27, Z+7	; 0x07
    2f68:	15 96       	adiw	r26, 0x05	; 5
    2f6a:	1c 93       	st	X, r17
    2f6c:	0e 93       	st	-X, r16
    2f6e:	14 97       	sbiw	r26, 0x04	; 4
    2f70:	17 83       	std	Z+7, r17	; 0x07
    2f72:	06 83       	std	Z+6, r16	; 0x06
    2f74:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2f76:	8e 9f       	mul	r24, r30
    2f78:	f0 01       	movw	r30, r0
    2f7a:	11 24       	eor	r1, r1
    2f7c:	e3 5a       	subi	r30, 0xA3	; 163
    2f7e:	fa 4e       	sbci	r31, 0xEA	; 234
    2f80:	fd 87       	std	Y+13, r31	; 0x0d
    2f82:	ec 87       	std	Y+12, r30	; 0x0c
    2f84:	80 81       	ld	r24, Z
    2f86:	8f 5f       	subi	r24, 0xFF	; 255
    2f88:	80 83       	st	Z, r24
    2f8a:	df 91       	pop	r29
    2f8c:	cf 91       	pop	r28
    2f8e:	1f 91       	pop	r17
    2f90:	0f 91       	pop	r16
    2f92:	08 95       	ret

00002f94 <uxTaskResetEventItemValue>:
    2f94:	cf 92       	push	r12
    2f96:	df 92       	push	r13
    2f98:	ef 92       	push	r14
    2f9a:	ff 92       	push	r15
    2f9c:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2fa0:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2fa4:	66 85       	ldd	r22, Z+14	; 0x0e
    2fa6:	77 85       	ldd	r23, Z+15	; 0x0f
    2fa8:	80 89       	ldd	r24, Z+16	; 0x10
    2faa:	91 89       	ldd	r25, Z+17	; 0x11
    2fac:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2fb0:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2fb4:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2fb8:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2fbc:	5a 96       	adiw	r26, 0x1a	; 26
    2fbe:	2c 91       	ld	r18, X
    2fc0:	0f 2e       	mov	r0, r31
    2fc2:	fa e0       	ldi	r31, 0x0A	; 10
    2fc4:	cf 2e       	mov	r12, r31
    2fc6:	d1 2c       	mov	r13, r1
    2fc8:	e1 2c       	mov	r14, r1
    2fca:	f1 2c       	mov	r15, r1
    2fcc:	f0 2d       	mov	r31, r0
    2fce:	c2 1a       	sub	r12, r18
    2fd0:	d1 08       	sbc	r13, r1
    2fd2:	e1 08       	sbc	r14, r1
    2fd4:	f1 08       	sbc	r15, r1
    2fd6:	c6 86       	std	Z+14, r12	; 0x0e
    2fd8:	d7 86       	std	Z+15, r13	; 0x0f
    2fda:	e0 8a       	std	Z+16, r14	; 0x10
    2fdc:	f1 8a       	std	Z+17, r15	; 0x11
    2fde:	ff 90       	pop	r15
    2fe0:	ef 90       	pop	r14
    2fe2:	df 90       	pop	r13
    2fe4:	cf 90       	pop	r12
    2fe6:	08 95       	ret

00002fe8 <pvTaskIncrementMutexHeldCount>:
    2fe8:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2fec:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2ff0:	89 2b       	or	r24, r25
    2ff2:	39 f0       	breq	.+14     	; 0x3002 <pvTaskIncrementMutexHeldCount+0x1a>
    2ff4:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    2ff8:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    2ffc:	86 a5       	ldd	r24, Z+46	; 0x2e
    2ffe:	8f 5f       	subi	r24, 0xFF	; 255
    3000:	86 a7       	std	Z+46, r24	; 0x2e
    3002:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <pxCurrentTCB>
    3006:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    300a:	08 95       	ret

0000300c <xTaskGenericNotifyWait>:
    300c:	4f 92       	push	r4
    300e:	5f 92       	push	r5
    3010:	6f 92       	push	r6
    3012:	7f 92       	push	r7
    3014:	af 92       	push	r10
    3016:	bf 92       	push	r11
    3018:	cf 92       	push	r12
    301a:	df 92       	push	r13
    301c:	ef 92       	push	r14
    301e:	ff 92       	push	r15
    3020:	0f 93       	push	r16
    3022:	1f 93       	push	r17
    3024:	cf 93       	push	r28
    3026:	df 93       	push	r29
    3028:	28 01       	movw	r4, r16
    302a:	39 01       	movw	r6, r18
    302c:	0f b6       	in	r0, 0x3f	; 63
    302e:	f8 94       	cli
    3030:	0f 92       	push	r0
    3032:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    3036:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    303a:	c8 2f       	mov	r28, r24
    303c:	d0 e0       	ldi	r29, 0x00	; 0
    303e:	ec 0f       	add	r30, r28
    3040:	fd 1f       	adc	r31, r29
    3042:	83 a9       	ldd	r24, Z+51	; 0x33
    3044:	82 30       	cpi	r24, 0x02	; 2
    3046:	79 f1       	breq	.+94     	; 0x30a6 <xTaskGenericNotifyWait+0x9a>
    3048:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    304c:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    3050:	ce 01       	movw	r24, r28
    3052:	88 0f       	add	r24, r24
    3054:	99 1f       	adc	r25, r25
    3056:	88 0f       	add	r24, r24
    3058:	99 1f       	adc	r25, r25
    305a:	e8 0f       	add	r30, r24
    305c:	f9 1f       	adc	r31, r25
    305e:	87 a5       	ldd	r24, Z+47	; 0x2f
    3060:	90 a9       	ldd	r25, Z+48	; 0x30
    3062:	a1 a9       	ldd	r26, Z+49	; 0x31
    3064:	b2 a9       	ldd	r27, Z+50	; 0x32
    3066:	40 95       	com	r20
    3068:	50 95       	com	r21
    306a:	60 95       	com	r22
    306c:	70 95       	com	r23
    306e:	48 23       	and	r20, r24
    3070:	59 23       	and	r21, r25
    3072:	6a 23       	and	r22, r26
    3074:	7b 23       	and	r23, r27
    3076:	47 a7       	std	Z+47, r20	; 0x2f
    3078:	50 ab       	std	Z+48, r21	; 0x30
    307a:	61 ab       	std	Z+49, r22	; 0x31
    307c:	72 ab       	std	Z+50, r23	; 0x32
    307e:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    3082:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    3086:	ec 0f       	add	r30, r28
    3088:	fd 1f       	adc	r31, r29
    308a:	81 e0       	ldi	r24, 0x01	; 1
    308c:	83 ab       	std	Z+51, r24	; 0x33
    308e:	a1 14       	cp	r10, r1
    3090:	b1 04       	cpc	r11, r1
    3092:	c1 04       	cpc	r12, r1
    3094:	d1 04       	cpc	r13, r1
    3096:	39 f0       	breq	.+14     	; 0x30a6 <xTaskGenericNotifyWait+0x9a>
    3098:	41 e0       	ldi	r20, 0x01	; 1
    309a:	c6 01       	movw	r24, r12
    309c:	b5 01       	movw	r22, r10
    309e:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <prvAddCurrentTaskToDelayedList>
    30a2:	0e 94 c4 06 	call	0xd88	; 0xd88 <vPortYield>
    30a6:	0f 90       	pop	r0
    30a8:	0f be       	out	0x3f, r0	; 63
    30aa:	0f b6       	in	r0, 0x3f	; 63
    30ac:	f8 94       	cli
    30ae:	0f 92       	push	r0
    30b0:	e1 14       	cp	r14, r1
    30b2:	f1 04       	cpc	r15, r1
    30b4:	a1 f0       	breq	.+40     	; 0x30de <xTaskGenericNotifyWait+0xd2>
    30b6:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    30ba:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    30be:	ce 01       	movw	r24, r28
    30c0:	88 0f       	add	r24, r24
    30c2:	99 1f       	adc	r25, r25
    30c4:	88 0f       	add	r24, r24
    30c6:	99 1f       	adc	r25, r25
    30c8:	e8 0f       	add	r30, r24
    30ca:	f9 1f       	adc	r31, r25
    30cc:	87 a5       	ldd	r24, Z+47	; 0x2f
    30ce:	90 a9       	ldd	r25, Z+48	; 0x30
    30d0:	a1 a9       	ldd	r26, Z+49	; 0x31
    30d2:	b2 a9       	ldd	r27, Z+50	; 0x32
    30d4:	f7 01       	movw	r30, r14
    30d6:	80 83       	st	Z, r24
    30d8:	91 83       	std	Z+1, r25	; 0x01
    30da:	a2 83       	std	Z+2, r26	; 0x02
    30dc:	b3 83       	std	Z+3, r27	; 0x03
    30de:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    30e2:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    30e6:	ec 0f       	add	r30, r28
    30e8:	fd 1f       	adc	r31, r29
    30ea:	83 a9       	ldd	r24, Z+51	; 0x33
    30ec:	82 30       	cpi	r24, 0x02	; 2
    30ee:	e9 f4       	brne	.+58     	; 0x312a <xTaskGenericNotifyWait+0x11e>
    30f0:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    30f4:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    30f8:	ce 01       	movw	r24, r28
    30fa:	88 0f       	add	r24, r24
    30fc:	99 1f       	adc	r25, r25
    30fe:	88 0f       	add	r24, r24
    3100:	99 1f       	adc	r25, r25
    3102:	e8 0f       	add	r30, r24
    3104:	f9 1f       	adc	r31, r25
    3106:	87 a5       	ldd	r24, Z+47	; 0x2f
    3108:	90 a9       	ldd	r25, Z+48	; 0x30
    310a:	a1 a9       	ldd	r26, Z+49	; 0x31
    310c:	b2 a9       	ldd	r27, Z+50	; 0x32
    310e:	40 94       	com	r4
    3110:	50 94       	com	r5
    3112:	60 94       	com	r6
    3114:	70 94       	com	r7
    3116:	48 22       	and	r4, r24
    3118:	59 22       	and	r5, r25
    311a:	6a 22       	and	r6, r26
    311c:	7b 22       	and	r7, r27
    311e:	47 a6       	std	Z+47, r4	; 0x2f
    3120:	50 aa       	std	Z+48, r5	; 0x30
    3122:	61 aa       	std	Z+49, r6	; 0x31
    3124:	72 aa       	std	Z+50, r7	; 0x32
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	01 c0       	rjmp	.+2      	; 0x312c <xTaskGenericNotifyWait+0x120>
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	20 91 cb 15 	lds	r18, 0x15CB	; 0x8015cb <pxCurrentTCB>
    3130:	30 91 cc 15 	lds	r19, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    3134:	c2 0f       	add	r28, r18
    3136:	d3 1f       	adc	r29, r19
    3138:	1b aa       	std	Y+51, r1	; 0x33
    313a:	0f 90       	pop	r0
    313c:	0f be       	out	0x3f, r0	; 63
    313e:	df 91       	pop	r29
    3140:	cf 91       	pop	r28
    3142:	1f 91       	pop	r17
    3144:	0f 91       	pop	r16
    3146:	ff 90       	pop	r15
    3148:	ef 90       	pop	r14
    314a:	df 90       	pop	r13
    314c:	cf 90       	pop	r12
    314e:	bf 90       	pop	r11
    3150:	af 90       	pop	r10
    3152:	7f 90       	pop	r7
    3154:	6f 90       	pop	r6
    3156:	5f 90       	pop	r5
    3158:	4f 90       	pop	r4
    315a:	08 95       	ret

0000315c <xTaskGenericNotify>:
    315c:	8f 92       	push	r8
    315e:	9f 92       	push	r9
    3160:	af 92       	push	r10
    3162:	bf 92       	push	r11
    3164:	ef 92       	push	r14
    3166:	ff 92       	push	r15
    3168:	0f 93       	push	r16
    316a:	cf 93       	push	r28
    316c:	df 93       	push	r29
    316e:	dc 01       	movw	r26, r24
    3170:	0f b6       	in	r0, 0x3f	; 63
    3172:	f8 94       	cli
    3174:	0f 92       	push	r0
    3176:	e1 14       	cp	r14, r1
    3178:	f1 04       	cpc	r15, r1
    317a:	89 f0       	breq	.+34     	; 0x319e <xTaskGenericNotify+0x42>
    317c:	e6 2f       	mov	r30, r22
    317e:	f0 e0       	ldi	r31, 0x00	; 0
    3180:	ee 0f       	add	r30, r30
    3182:	ff 1f       	adc	r31, r31
    3184:	ee 0f       	add	r30, r30
    3186:	ff 1f       	adc	r31, r31
    3188:	e8 0f       	add	r30, r24
    318a:	f9 1f       	adc	r31, r25
    318c:	87 a4       	ldd	r8, Z+47	; 0x2f
    318e:	90 a8       	ldd	r9, Z+48	; 0x30
    3190:	a1 a8       	ldd	r10, Z+49	; 0x31
    3192:	b2 a8       	ldd	r11, Z+50	; 0x32
    3194:	f7 01       	movw	r30, r14
    3196:	80 82       	st	Z, r8
    3198:	91 82       	std	Z+1, r9	; 0x01
    319a:	a2 82       	std	Z+2, r10	; 0x02
    319c:	b3 82       	std	Z+3, r11	; 0x03
    319e:	70 e0       	ldi	r23, 0x00	; 0
    31a0:	fd 01       	movw	r30, r26
    31a2:	e6 0f       	add	r30, r22
    31a4:	f7 1f       	adc	r31, r23
    31a6:	83 a9       	ldd	r24, Z+51	; 0x33
    31a8:	92 e0       	ldi	r25, 0x02	; 2
    31aa:	93 ab       	std	Z+51, r25	; 0x33
    31ac:	02 30       	cpi	r16, 0x02	; 2
    31ae:	01 f1       	breq	.+64     	; 0x31f0 <xTaskGenericNotify+0x94>
    31b0:	18 f4       	brcc	.+6      	; 0x31b8 <xTaskGenericNotify+0x5c>
    31b2:	01 30       	cpi	r16, 0x01	; 1
    31b4:	31 f0       	breq	.+12     	; 0x31c2 <xTaskGenericNotify+0x66>
    31b6:	4d c0       	rjmp	.+154    	; 0x3252 <xTaskGenericNotify+0xf6>
    31b8:	03 30       	cpi	r16, 0x03	; 3
    31ba:	79 f1       	breq	.+94     	; 0x321a <xTaskGenericNotify+0xbe>
    31bc:	04 30       	cpi	r16, 0x04	; 4
    31be:	d1 f1       	breq	.+116    	; 0x3234 <xTaskGenericNotify+0xd8>
    31c0:	48 c0       	rjmp	.+144    	; 0x3252 <xTaskGenericNotify+0xf6>
    31c2:	66 0f       	add	r22, r22
    31c4:	77 1f       	adc	r23, r23
    31c6:	66 0f       	add	r22, r22
    31c8:	77 1f       	adc	r23, r23
    31ca:	fd 01       	movw	r30, r26
    31cc:	e6 0f       	add	r30, r22
    31ce:	f7 1f       	adc	r31, r23
    31d0:	87 a4       	ldd	r8, Z+47	; 0x2f
    31d2:	90 a8       	ldd	r9, Z+48	; 0x30
    31d4:	a1 a8       	ldd	r10, Z+49	; 0x31
    31d6:	b2 a8       	ldd	r11, Z+50	; 0x32
    31d8:	ba 01       	movw	r22, r20
    31da:	a9 01       	movw	r20, r18
    31dc:	48 29       	or	r20, r8
    31de:	59 29       	or	r21, r9
    31e0:	6a 29       	or	r22, r10
    31e2:	7b 29       	or	r23, r11
    31e4:	47 a7       	std	Z+47, r20	; 0x2f
    31e6:	50 ab       	std	Z+48, r21	; 0x30
    31e8:	61 ab       	std	Z+49, r22	; 0x31
    31ea:	72 ab       	std	Z+50, r23	; 0x32
    31ec:	01 e0       	ldi	r16, 0x01	; 1
    31ee:	34 c0       	rjmp	.+104    	; 0x3258 <xTaskGenericNotify+0xfc>
    31f0:	66 0f       	add	r22, r22
    31f2:	77 1f       	adc	r23, r23
    31f4:	66 0f       	add	r22, r22
    31f6:	77 1f       	adc	r23, r23
    31f8:	fd 01       	movw	r30, r26
    31fa:	e6 0f       	add	r30, r22
    31fc:	f7 1f       	adc	r31, r23
    31fe:	47 a5       	ldd	r20, Z+47	; 0x2f
    3200:	50 a9       	ldd	r21, Z+48	; 0x30
    3202:	61 a9       	ldd	r22, Z+49	; 0x31
    3204:	72 a9       	ldd	r23, Z+50	; 0x32
    3206:	4f 5f       	subi	r20, 0xFF	; 255
    3208:	5f 4f       	sbci	r21, 0xFF	; 255
    320a:	6f 4f       	sbci	r22, 0xFF	; 255
    320c:	7f 4f       	sbci	r23, 0xFF	; 255
    320e:	47 a7       	std	Z+47, r20	; 0x2f
    3210:	50 ab       	std	Z+48, r21	; 0x30
    3212:	61 ab       	std	Z+49, r22	; 0x31
    3214:	72 ab       	std	Z+50, r23	; 0x32
    3216:	01 e0       	ldi	r16, 0x01	; 1
    3218:	1f c0       	rjmp	.+62     	; 0x3258 <xTaskGenericNotify+0xfc>
    321a:	66 0f       	add	r22, r22
    321c:	77 1f       	adc	r23, r23
    321e:	66 0f       	add	r22, r22
    3220:	77 1f       	adc	r23, r23
    3222:	fd 01       	movw	r30, r26
    3224:	e6 0f       	add	r30, r22
    3226:	f7 1f       	adc	r31, r23
    3228:	27 a7       	std	Z+47, r18	; 0x2f
    322a:	30 ab       	std	Z+48, r19	; 0x30
    322c:	41 ab       	std	Z+49, r20	; 0x31
    322e:	52 ab       	std	Z+50, r21	; 0x32
    3230:	01 e0       	ldi	r16, 0x01	; 1
    3232:	12 c0       	rjmp	.+36     	; 0x3258 <xTaskGenericNotify+0xfc>
    3234:	82 30       	cpi	r24, 0x02	; 2
    3236:	79 f0       	breq	.+30     	; 0x3256 <xTaskGenericNotify+0xfa>
    3238:	66 0f       	add	r22, r22
    323a:	77 1f       	adc	r23, r23
    323c:	66 0f       	add	r22, r22
    323e:	77 1f       	adc	r23, r23
    3240:	fd 01       	movw	r30, r26
    3242:	e6 0f       	add	r30, r22
    3244:	f7 1f       	adc	r31, r23
    3246:	27 a7       	std	Z+47, r18	; 0x2f
    3248:	30 ab       	std	Z+48, r19	; 0x30
    324a:	41 ab       	std	Z+49, r20	; 0x31
    324c:	52 ab       	std	Z+50, r21	; 0x32
    324e:	01 e0       	ldi	r16, 0x01	; 1
    3250:	03 c0       	rjmp	.+6      	; 0x3258 <xTaskGenericNotify+0xfc>
    3252:	01 e0       	ldi	r16, 0x01	; 1
    3254:	01 c0       	rjmp	.+2      	; 0x3258 <xTaskGenericNotify+0xfc>
    3256:	00 e0       	ldi	r16, 0x00	; 0
    3258:	81 30       	cpi	r24, 0x01	; 1
    325a:	09 f0       	breq	.+2      	; 0x325e <xTaskGenericNotify+0x102>
    325c:	69 c0       	rjmp	.+210    	; 0x3330 <xTaskGenericNotify+0x1d4>
    325e:	1c 96       	adiw	r26, 0x0c	; 12
    3260:	ed 91       	ld	r30, X+
    3262:	fc 91       	ld	r31, X
    3264:	1d 97       	sbiw	r26, 0x0d	; 13
    3266:	16 96       	adiw	r26, 0x06	; 6
    3268:	cd 91       	ld	r28, X+
    326a:	dc 91       	ld	r29, X
    326c:	17 97       	sbiw	r26, 0x07	; 7
    326e:	18 96       	adiw	r26, 0x08	; 8
    3270:	8d 91       	ld	r24, X+
    3272:	9c 91       	ld	r25, X
    3274:	19 97       	sbiw	r26, 0x09	; 9
    3276:	9f 83       	std	Y+7, r25	; 0x07
    3278:	8e 83       	std	Y+6, r24	; 0x06
    327a:	18 96       	adiw	r26, 0x08	; 8
    327c:	cd 91       	ld	r28, X+
    327e:	dc 91       	ld	r29, X
    3280:	19 97       	sbiw	r26, 0x09	; 9
    3282:	16 96       	adiw	r26, 0x06	; 6
    3284:	8d 91       	ld	r24, X+
    3286:	9c 91       	ld	r25, X
    3288:	17 97       	sbiw	r26, 0x07	; 7
    328a:	9d 83       	std	Y+5, r25	; 0x05
    328c:	8c 83       	std	Y+4, r24	; 0x04
    328e:	81 81       	ldd	r24, Z+1	; 0x01
    3290:	92 81       	ldd	r25, Z+2	; 0x02
    3292:	9d 01       	movw	r18, r26
    3294:	2e 5f       	subi	r18, 0xFE	; 254
    3296:	3f 4f       	sbci	r19, 0xFF	; 255
    3298:	82 17       	cp	r24, r18
    329a:	93 07       	cpc	r25, r19
    329c:	31 f4       	brne	.+12     	; 0x32aa <xTaskGenericNotify+0x14e>
    329e:	18 96       	adiw	r26, 0x08	; 8
    32a0:	8d 91       	ld	r24, X+
    32a2:	9c 91       	ld	r25, X
    32a4:	19 97       	sbiw	r26, 0x09	; 9
    32a6:	92 83       	std	Z+2, r25	; 0x02
    32a8:	81 83       	std	Z+1, r24	; 0x01
    32aa:	1d 96       	adiw	r26, 0x0d	; 13
    32ac:	1c 92       	st	X, r1
    32ae:	1e 92       	st	-X, r1
    32b0:	1c 97       	sbiw	r26, 0x0c	; 12
    32b2:	80 81       	ld	r24, Z
    32b4:	81 50       	subi	r24, 0x01	; 1
    32b6:	80 83       	st	Z, r24
    32b8:	5a 96       	adiw	r26, 0x1a	; 26
    32ba:	ec 91       	ld	r30, X
    32bc:	5a 97       	sbiw	r26, 0x1a	; 26
    32be:	80 91 1b 15 	lds	r24, 0x151B	; 0x80151b <uxTopReadyPriority>
    32c2:	8e 17       	cp	r24, r30
    32c4:	10 f4       	brcc	.+4      	; 0x32ca <xTaskGenericNotify+0x16e>
    32c6:	e0 93 1b 15 	sts	0x151B, r30	; 0x80151b <uxTopReadyPriority>
    32ca:	8b e0       	ldi	r24, 0x0B	; 11
    32cc:	8e 9f       	mul	r24, r30
    32ce:	f0 01       	movw	r30, r0
    32d0:	11 24       	eor	r1, r1
    32d2:	e3 5a       	subi	r30, 0xA3	; 163
    32d4:	fa 4e       	sbci	r31, 0xEA	; 234
    32d6:	01 80       	ldd	r0, Z+1	; 0x01
    32d8:	f2 81       	ldd	r31, Z+2	; 0x02
    32da:	e0 2d       	mov	r30, r0
    32dc:	17 96       	adiw	r26, 0x07	; 7
    32de:	fc 93       	st	X, r31
    32e0:	ee 93       	st	-X, r30
    32e2:	16 97       	sbiw	r26, 0x06	; 6
    32e4:	46 81       	ldd	r20, Z+6	; 0x06
    32e6:	57 81       	ldd	r21, Z+7	; 0x07
    32e8:	19 96       	adiw	r26, 0x09	; 9
    32ea:	5c 93       	st	X, r21
    32ec:	4e 93       	st	-X, r20
    32ee:	18 97       	sbiw	r26, 0x08	; 8
    32f0:	c6 81       	ldd	r28, Z+6	; 0x06
    32f2:	d7 81       	ldd	r29, Z+7	; 0x07
    32f4:	3d 83       	std	Y+5, r19	; 0x05
    32f6:	2c 83       	std	Y+4, r18	; 0x04
    32f8:	37 83       	std	Z+7, r19	; 0x07
    32fa:	26 83       	std	Z+6, r18	; 0x06
    32fc:	5a 96       	adiw	r26, 0x1a	; 26
    32fe:	ec 91       	ld	r30, X
    3300:	5a 97       	sbiw	r26, 0x1a	; 26
    3302:	8e 9f       	mul	r24, r30
    3304:	f0 01       	movw	r30, r0
    3306:	11 24       	eor	r1, r1
    3308:	e3 5a       	subi	r30, 0xA3	; 163
    330a:	fa 4e       	sbci	r31, 0xEA	; 234
    330c:	1d 96       	adiw	r26, 0x0d	; 13
    330e:	fc 93       	st	X, r31
    3310:	ee 93       	st	-X, r30
    3312:	1c 97       	sbiw	r26, 0x0c	; 12
    3314:	80 81       	ld	r24, Z
    3316:	8f 5f       	subi	r24, 0xFF	; 255
    3318:	80 83       	st	Z, r24
    331a:	5a 96       	adiw	r26, 0x1a	; 26
    331c:	9c 91       	ld	r25, X
    331e:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    3322:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    3326:	82 8d       	ldd	r24, Z+26	; 0x1a
    3328:	89 17       	cp	r24, r25
    332a:	10 f4       	brcc	.+4      	; 0x3330 <xTaskGenericNotify+0x1d4>
    332c:	0e 94 c4 06 	call	0xd88	; 0xd88 <vPortYield>
    3330:	0f 90       	pop	r0
    3332:	0f be       	out	0x3f, r0	; 63
    3334:	80 2f       	mov	r24, r16
    3336:	df 91       	pop	r29
    3338:	cf 91       	pop	r28
    333a:	0f 91       	pop	r16
    333c:	ff 90       	pop	r15
    333e:	ef 90       	pop	r14
    3340:	bf 90       	pop	r11
    3342:	af 90       	pop	r10
    3344:	9f 90       	pop	r9
    3346:	8f 90       	pop	r8
    3348:	08 95       	ret

0000334a <xTaskGenericNotifyFromISR>:
    334a:	8f 92       	push	r8
    334c:	9f 92       	push	r9
    334e:	af 92       	push	r10
    3350:	bf 92       	push	r11
    3352:	cf 92       	push	r12
    3354:	df 92       	push	r13
    3356:	ef 92       	push	r14
    3358:	ff 92       	push	r15
    335a:	0f 93       	push	r16
    335c:	cf 93       	push	r28
    335e:	df 93       	push	r29
    3360:	dc 01       	movw	r26, r24
    3362:	e1 14       	cp	r14, r1
    3364:	f1 04       	cpc	r15, r1
    3366:	89 f0       	breq	.+34     	; 0x338a <xTaskGenericNotifyFromISR+0x40>
    3368:	e6 2f       	mov	r30, r22
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	ee 0f       	add	r30, r30
    336e:	ff 1f       	adc	r31, r31
    3370:	ee 0f       	add	r30, r30
    3372:	ff 1f       	adc	r31, r31
    3374:	e8 0f       	add	r30, r24
    3376:	f9 1f       	adc	r31, r25
    3378:	87 a4       	ldd	r8, Z+47	; 0x2f
    337a:	90 a8       	ldd	r9, Z+48	; 0x30
    337c:	a1 a8       	ldd	r10, Z+49	; 0x31
    337e:	b2 a8       	ldd	r11, Z+50	; 0x32
    3380:	f7 01       	movw	r30, r14
    3382:	80 82       	st	Z, r8
    3384:	91 82       	std	Z+1, r9	; 0x01
    3386:	a2 82       	std	Z+2, r10	; 0x02
    3388:	b3 82       	std	Z+3, r11	; 0x03
    338a:	70 e0       	ldi	r23, 0x00	; 0
    338c:	fd 01       	movw	r30, r26
    338e:	e6 0f       	add	r30, r22
    3390:	f7 1f       	adc	r31, r23
    3392:	93 a9       	ldd	r25, Z+51	; 0x33
    3394:	82 e0       	ldi	r24, 0x02	; 2
    3396:	83 ab       	std	Z+51, r24	; 0x33
    3398:	02 30       	cpi	r16, 0x02	; 2
    339a:	01 f1       	breq	.+64     	; 0x33dc <xTaskGenericNotifyFromISR+0x92>
    339c:	18 f4       	brcc	.+6      	; 0x33a4 <xTaskGenericNotifyFromISR+0x5a>
    339e:	01 30       	cpi	r16, 0x01	; 1
    33a0:	31 f0       	breq	.+12     	; 0x33ae <xTaskGenericNotifyFromISR+0x64>
    33a2:	4d c0       	rjmp	.+154    	; 0x343e <xTaskGenericNotifyFromISR+0xf4>
    33a4:	03 30       	cpi	r16, 0x03	; 3
    33a6:	79 f1       	breq	.+94     	; 0x3406 <xTaskGenericNotifyFromISR+0xbc>
    33a8:	04 30       	cpi	r16, 0x04	; 4
    33aa:	d1 f1       	breq	.+116    	; 0x3420 <xTaskGenericNotifyFromISR+0xd6>
    33ac:	48 c0       	rjmp	.+144    	; 0x343e <xTaskGenericNotifyFromISR+0xf4>
    33ae:	66 0f       	add	r22, r22
    33b0:	77 1f       	adc	r23, r23
    33b2:	66 0f       	add	r22, r22
    33b4:	77 1f       	adc	r23, r23
    33b6:	fd 01       	movw	r30, r26
    33b8:	e6 0f       	add	r30, r22
    33ba:	f7 1f       	adc	r31, r23
    33bc:	87 a4       	ldd	r8, Z+47	; 0x2f
    33be:	90 a8       	ldd	r9, Z+48	; 0x30
    33c0:	a1 a8       	ldd	r10, Z+49	; 0x31
    33c2:	b2 a8       	ldd	r11, Z+50	; 0x32
    33c4:	ba 01       	movw	r22, r20
    33c6:	a9 01       	movw	r20, r18
    33c8:	48 29       	or	r20, r8
    33ca:	59 29       	or	r21, r9
    33cc:	6a 29       	or	r22, r10
    33ce:	7b 29       	or	r23, r11
    33d0:	47 a7       	std	Z+47, r20	; 0x2f
    33d2:	50 ab       	std	Z+48, r21	; 0x30
    33d4:	61 ab       	std	Z+49, r22	; 0x31
    33d6:	72 ab       	std	Z+50, r23	; 0x32
    33d8:	81 e0       	ldi	r24, 0x01	; 1
    33da:	34 c0       	rjmp	.+104    	; 0x3444 <xTaskGenericNotifyFromISR+0xfa>
    33dc:	66 0f       	add	r22, r22
    33de:	77 1f       	adc	r23, r23
    33e0:	66 0f       	add	r22, r22
    33e2:	77 1f       	adc	r23, r23
    33e4:	fd 01       	movw	r30, r26
    33e6:	e6 0f       	add	r30, r22
    33e8:	f7 1f       	adc	r31, r23
    33ea:	47 a5       	ldd	r20, Z+47	; 0x2f
    33ec:	50 a9       	ldd	r21, Z+48	; 0x30
    33ee:	61 a9       	ldd	r22, Z+49	; 0x31
    33f0:	72 a9       	ldd	r23, Z+50	; 0x32
    33f2:	4f 5f       	subi	r20, 0xFF	; 255
    33f4:	5f 4f       	sbci	r21, 0xFF	; 255
    33f6:	6f 4f       	sbci	r22, 0xFF	; 255
    33f8:	7f 4f       	sbci	r23, 0xFF	; 255
    33fa:	47 a7       	std	Z+47, r20	; 0x2f
    33fc:	50 ab       	std	Z+48, r21	; 0x30
    33fe:	61 ab       	std	Z+49, r22	; 0x31
    3400:	72 ab       	std	Z+50, r23	; 0x32
    3402:	81 e0       	ldi	r24, 0x01	; 1
    3404:	1f c0       	rjmp	.+62     	; 0x3444 <xTaskGenericNotifyFromISR+0xfa>
    3406:	66 0f       	add	r22, r22
    3408:	77 1f       	adc	r23, r23
    340a:	66 0f       	add	r22, r22
    340c:	77 1f       	adc	r23, r23
    340e:	fd 01       	movw	r30, r26
    3410:	e6 0f       	add	r30, r22
    3412:	f7 1f       	adc	r31, r23
    3414:	27 a7       	std	Z+47, r18	; 0x2f
    3416:	30 ab       	std	Z+48, r19	; 0x30
    3418:	41 ab       	std	Z+49, r20	; 0x31
    341a:	52 ab       	std	Z+50, r21	; 0x32
    341c:	81 e0       	ldi	r24, 0x01	; 1
    341e:	12 c0       	rjmp	.+36     	; 0x3444 <xTaskGenericNotifyFromISR+0xfa>
    3420:	92 30       	cpi	r25, 0x02	; 2
    3422:	79 f0       	breq	.+30     	; 0x3442 <xTaskGenericNotifyFromISR+0xf8>
    3424:	66 0f       	add	r22, r22
    3426:	77 1f       	adc	r23, r23
    3428:	66 0f       	add	r22, r22
    342a:	77 1f       	adc	r23, r23
    342c:	fd 01       	movw	r30, r26
    342e:	e6 0f       	add	r30, r22
    3430:	f7 1f       	adc	r31, r23
    3432:	27 a7       	std	Z+47, r18	; 0x2f
    3434:	30 ab       	std	Z+48, r19	; 0x30
    3436:	41 ab       	std	Z+49, r20	; 0x31
    3438:	52 ab       	std	Z+50, r21	; 0x32
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	03 c0       	rjmp	.+6      	; 0x3444 <xTaskGenericNotifyFromISR+0xfa>
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	01 c0       	rjmp	.+2      	; 0x3444 <xTaskGenericNotifyFromISR+0xfa>
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	91 30       	cpi	r25, 0x01	; 1
    3446:	09 f0       	breq	.+2      	; 0x344a <xTaskGenericNotifyFromISR+0x100>
    3448:	96 c0       	rjmp	.+300    	; 0x3576 <xTaskGenericNotifyFromISR+0x22c>
    344a:	90 91 0c 15 	lds	r25, 0x150C	; 0x80150c <uxSchedulerSuspended>
    344e:	91 11       	cpse	r25, r1
    3450:	5f c0       	rjmp	.+190    	; 0x3510 <xTaskGenericNotifyFromISR+0x1c6>
    3452:	1c 96       	adiw	r26, 0x0c	; 12
    3454:	ed 91       	ld	r30, X+
    3456:	fc 91       	ld	r31, X
    3458:	1d 97       	sbiw	r26, 0x0d	; 13
    345a:	16 96       	adiw	r26, 0x06	; 6
    345c:	cd 91       	ld	r28, X+
    345e:	dc 91       	ld	r29, X
    3460:	17 97       	sbiw	r26, 0x07	; 7
    3462:	18 96       	adiw	r26, 0x08	; 8
    3464:	2d 91       	ld	r18, X+
    3466:	3c 91       	ld	r19, X
    3468:	19 97       	sbiw	r26, 0x09	; 9
    346a:	3f 83       	std	Y+7, r19	; 0x07
    346c:	2e 83       	std	Y+6, r18	; 0x06
    346e:	18 96       	adiw	r26, 0x08	; 8
    3470:	cd 91       	ld	r28, X+
    3472:	dc 91       	ld	r29, X
    3474:	19 97       	sbiw	r26, 0x09	; 9
    3476:	16 96       	adiw	r26, 0x06	; 6
    3478:	2d 91       	ld	r18, X+
    347a:	3c 91       	ld	r19, X
    347c:	17 97       	sbiw	r26, 0x07	; 7
    347e:	3d 83       	std	Y+5, r19	; 0x05
    3480:	2c 83       	std	Y+4, r18	; 0x04
    3482:	41 81       	ldd	r20, Z+1	; 0x01
    3484:	52 81       	ldd	r21, Z+2	; 0x02
    3486:	9d 01       	movw	r18, r26
    3488:	2e 5f       	subi	r18, 0xFE	; 254
    348a:	3f 4f       	sbci	r19, 0xFF	; 255
    348c:	42 17       	cp	r20, r18
    348e:	53 07       	cpc	r21, r19
    3490:	31 f4       	brne	.+12     	; 0x349e <xTaskGenericNotifyFromISR+0x154>
    3492:	18 96       	adiw	r26, 0x08	; 8
    3494:	4d 91       	ld	r20, X+
    3496:	5c 91       	ld	r21, X
    3498:	19 97       	sbiw	r26, 0x09	; 9
    349a:	52 83       	std	Z+2, r21	; 0x02
    349c:	41 83       	std	Z+1, r20	; 0x01
    349e:	1d 96       	adiw	r26, 0x0d	; 13
    34a0:	1c 92       	st	X, r1
    34a2:	1e 92       	st	-X, r1
    34a4:	1c 97       	sbiw	r26, 0x0c	; 12
    34a6:	90 81       	ld	r25, Z
    34a8:	91 50       	subi	r25, 0x01	; 1
    34aa:	90 83       	st	Z, r25
    34ac:	5a 96       	adiw	r26, 0x1a	; 26
    34ae:	ec 91       	ld	r30, X
    34b0:	5a 97       	sbiw	r26, 0x1a	; 26
    34b2:	90 91 1b 15 	lds	r25, 0x151B	; 0x80151b <uxTopReadyPriority>
    34b6:	9e 17       	cp	r25, r30
    34b8:	10 f4       	brcc	.+4      	; 0x34be <xTaskGenericNotifyFromISR+0x174>
    34ba:	e0 93 1b 15 	sts	0x151B, r30	; 0x80151b <uxTopReadyPriority>
    34be:	9b e0       	ldi	r25, 0x0B	; 11
    34c0:	9e 9f       	mul	r25, r30
    34c2:	f0 01       	movw	r30, r0
    34c4:	11 24       	eor	r1, r1
    34c6:	e3 5a       	subi	r30, 0xA3	; 163
    34c8:	fa 4e       	sbci	r31, 0xEA	; 234
    34ca:	01 80       	ldd	r0, Z+1	; 0x01
    34cc:	f2 81       	ldd	r31, Z+2	; 0x02
    34ce:	e0 2d       	mov	r30, r0
    34d0:	17 96       	adiw	r26, 0x07	; 7
    34d2:	fc 93       	st	X, r31
    34d4:	ee 93       	st	-X, r30
    34d6:	16 97       	sbiw	r26, 0x06	; 6
    34d8:	46 81       	ldd	r20, Z+6	; 0x06
    34da:	57 81       	ldd	r21, Z+7	; 0x07
    34dc:	19 96       	adiw	r26, 0x09	; 9
    34de:	5c 93       	st	X, r21
    34e0:	4e 93       	st	-X, r20
    34e2:	18 97       	sbiw	r26, 0x08	; 8
    34e4:	c6 81       	ldd	r28, Z+6	; 0x06
    34e6:	d7 81       	ldd	r29, Z+7	; 0x07
    34e8:	3d 83       	std	Y+5, r19	; 0x05
    34ea:	2c 83       	std	Y+4, r18	; 0x04
    34ec:	37 83       	std	Z+7, r19	; 0x07
    34ee:	26 83       	std	Z+6, r18	; 0x06
    34f0:	5a 96       	adiw	r26, 0x1a	; 26
    34f2:	ec 91       	ld	r30, X
    34f4:	5a 97       	sbiw	r26, 0x1a	; 26
    34f6:	9e 9f       	mul	r25, r30
    34f8:	f0 01       	movw	r30, r0
    34fa:	11 24       	eor	r1, r1
    34fc:	e3 5a       	subi	r30, 0xA3	; 163
    34fe:	fa 4e       	sbci	r31, 0xEA	; 234
    3500:	1d 96       	adiw	r26, 0x0d	; 13
    3502:	fc 93       	st	X, r31
    3504:	ee 93       	st	-X, r30
    3506:	1c 97       	sbiw	r26, 0x0c	; 12
    3508:	90 81       	ld	r25, Z
    350a:	9f 5f       	subi	r25, 0xFF	; 255
    350c:	90 83       	st	Z, r25
    350e:	21 c0       	rjmp	.+66     	; 0x3552 <xTaskGenericNotifyFromISR+0x208>
    3510:	68 e3       	ldi	r22, 0x38	; 56
    3512:	75 e1       	ldi	r23, 0x15	; 21
    3514:	fb 01       	movw	r30, r22
    3516:	c1 81       	ldd	r28, Z+1	; 0x01
    3518:	d2 81       	ldd	r29, Z+2	; 0x02
    351a:	53 96       	adiw	r26, 0x13	; 19
    351c:	dc 93       	st	X, r29
    351e:	ce 93       	st	-X, r28
    3520:	52 97       	sbiw	r26, 0x12	; 18
    3522:	2e 81       	ldd	r18, Y+6	; 0x06
    3524:	3f 81       	ldd	r19, Y+7	; 0x07
    3526:	55 96       	adiw	r26, 0x15	; 21
    3528:	3c 93       	st	X, r19
    352a:	2e 93       	st	-X, r18
    352c:	54 97       	sbiw	r26, 0x14	; 20
    352e:	4e 81       	ldd	r20, Y+6	; 0x06
    3530:	5f 81       	ldd	r21, Y+7	; 0x07
    3532:	9d 01       	movw	r18, r26
    3534:	22 5f       	subi	r18, 0xF2	; 242
    3536:	3f 4f       	sbci	r19, 0xFF	; 255
    3538:	fa 01       	movw	r30, r20
    353a:	35 83       	std	Z+5, r19	; 0x05
    353c:	24 83       	std	Z+4, r18	; 0x04
    353e:	3f 83       	std	Y+7, r19	; 0x07
    3540:	2e 83       	std	Y+6, r18	; 0x06
    3542:	59 96       	adiw	r26, 0x19	; 25
    3544:	7c 93       	st	X, r23
    3546:	6e 93       	st	-X, r22
    3548:	58 97       	sbiw	r26, 0x18	; 24
    354a:	fb 01       	movw	r30, r22
    354c:	90 81       	ld	r25, Z
    354e:	9f 5f       	subi	r25, 0xFF	; 255
    3550:	90 83       	st	Z, r25
    3552:	5a 96       	adiw	r26, 0x1a	; 26
    3554:	2c 91       	ld	r18, X
    3556:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <pxCurrentTCB>
    355a:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>
    355e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3560:	92 17       	cp	r25, r18
    3562:	48 f4       	brcc	.+18     	; 0x3576 <xTaskGenericNotifyFromISR+0x22c>
    3564:	c1 14       	cp	r12, r1
    3566:	d1 04       	cpc	r13, r1
    3568:	19 f0       	breq	.+6      	; 0x3570 <xTaskGenericNotifyFromISR+0x226>
    356a:	91 e0       	ldi	r25, 0x01	; 1
    356c:	f6 01       	movw	r30, r12
    356e:	90 83       	st	Z, r25
    3570:	91 e0       	ldi	r25, 0x01	; 1
    3572:	90 93 15 15 	sts	0x1515, r25	; 0x801515 <xYieldPending>
    3576:	df 91       	pop	r29
    3578:	cf 91       	pop	r28
    357a:	0f 91       	pop	r16
    357c:	ff 90       	pop	r15
    357e:	ef 90       	pop	r14
    3580:	df 90       	pop	r13
    3582:	cf 90       	pop	r12
    3584:	bf 90       	pop	r11
    3586:	af 90       	pop	r10
    3588:	9f 90       	pop	r9
    358a:	8f 90       	pop	r8
    358c:	08 95       	ret

0000358e <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    358e:	00 97       	sbiw	r24, 0x00	; 0
    3590:	21 f4       	brne	.+8      	; 0x359a <xTaskGenericNotifyStateClear+0xc>
    3592:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <pxCurrentTCB>
    3596:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    359a:	0f b6       	in	r0, 0x3f	; 63
    359c:	f8 94       	cli
    359e:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    35a0:	70 e0       	ldi	r23, 0x00	; 0
    35a2:	fc 01       	movw	r30, r24
    35a4:	e6 0f       	add	r30, r22
    35a6:	f7 1f       	adc	r31, r23
    35a8:	23 a9       	ldd	r18, Z+51	; 0x33
    35aa:	22 30       	cpi	r18, 0x02	; 2
    35ac:	31 f4       	brne	.+12     	; 0x35ba <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    35ae:	fc 01       	movw	r30, r24
    35b0:	e6 0f       	add	r30, r22
    35b2:	f7 1f       	adc	r31, r23
    35b4:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    35b6:	81 e0       	ldi	r24, 0x01	; 1
    35b8:	01 c0       	rjmp	.+2      	; 0x35bc <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    35ba:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    35bc:	0f 90       	pop	r0
    35be:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    35c0:	08 95       	ret

000035c2 <prvGetNextExpireTime>:
    35c2:	dc 01       	movw	r26, r24
    35c4:	e0 91 d7 15 	lds	r30, 0x15D7	; 0x8015d7 <pxCurrentTimerList>
    35c8:	f0 91 d8 15 	lds	r31, 0x15D8	; 0x8015d8 <pxCurrentTimerList+0x1>
    35cc:	80 81       	ld	r24, Z
    35ce:	91 e0       	ldi	r25, 0x01	; 1
    35d0:	81 11       	cpse	r24, r1
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	9c 93       	st	X, r25
    35d6:	91 11       	cpse	r25, r1
    35d8:	08 c0       	rjmp	.+16     	; 0x35ea <prvGetNextExpireTime+0x28>
    35da:	07 80       	ldd	r0, Z+7	; 0x07
    35dc:	f0 85       	ldd	r31, Z+8	; 0x08
    35de:	e0 2d       	mov	r30, r0
    35e0:	60 81       	ld	r22, Z
    35e2:	71 81       	ldd	r23, Z+1	; 0x01
    35e4:	82 81       	ldd	r24, Z+2	; 0x02
    35e6:	93 81       	ldd	r25, Z+3	; 0x03
    35e8:	08 95       	ret
    35ea:	60 e0       	ldi	r22, 0x00	; 0
    35ec:	70 e0       	ldi	r23, 0x00	; 0
    35ee:	cb 01       	movw	r24, r22
    35f0:	08 95       	ret

000035f2 <prvInsertTimerInActiveList>:
    35f2:	cf 92       	push	r12
    35f4:	df 92       	push	r13
    35f6:	ef 92       	push	r14
    35f8:	ff 92       	push	r15
    35fa:	0f 93       	push	r16
    35fc:	1f 93       	push	r17
    35fe:	fc 01       	movw	r30, r24
    3600:	42 83       	std	Z+2, r20	; 0x02
    3602:	53 83       	std	Z+3, r21	; 0x03
    3604:	64 83       	std	Z+4, r22	; 0x04
    3606:	75 83       	std	Z+5, r23	; 0x05
    3608:	93 87       	std	Z+11, r25	; 0x0b
    360a:	82 87       	std	Z+10, r24	; 0x0a
    360c:	04 17       	cp	r16, r20
    360e:	15 07       	cpc	r17, r21
    3610:	26 07       	cpc	r18, r22
    3612:	37 07       	cpc	r19, r23
    3614:	c0 f0       	brcs	.+48     	; 0x3646 <prvInsertTimerInActiveList+0x54>
    3616:	0c 19       	sub	r16, r12
    3618:	1d 09       	sbc	r17, r13
    361a:	2e 09       	sbc	r18, r14
    361c:	3f 09       	sbc	r19, r15
    361e:	86 85       	ldd	r24, Z+14	; 0x0e
    3620:	97 85       	ldd	r25, Z+15	; 0x0f
    3622:	a0 89       	ldd	r26, Z+16	; 0x10
    3624:	b1 89       	ldd	r27, Z+17	; 0x11
    3626:	08 17       	cp	r16, r24
    3628:	19 07       	cpc	r17, r25
    362a:	2a 07       	cpc	r18, r26
    362c:	3b 07       	cpc	r19, r27
    362e:	00 f5       	brcc	.+64     	; 0x3670 <prvInsertTimerInActiveList+0x7e>
    3630:	bf 01       	movw	r22, r30
    3632:	6e 5f       	subi	r22, 0xFE	; 254
    3634:	7f 4f       	sbci	r23, 0xFF	; 255
    3636:	80 91 d5 15 	lds	r24, 0x15D5	; 0x8015d5 <pxOverflowTimerList>
    363a:	90 91 d6 15 	lds	r25, 0x15D6	; 0x8015d6 <pxOverflowTimerList+0x1>
    363e:	0e 94 0b 06 	call	0xc16	; 0xc16 <vListInsert>
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	18 c0       	rjmp	.+48     	; 0x3676 <prvInsertTimerInActiveList+0x84>
    3646:	0c 15       	cp	r16, r12
    3648:	1d 05       	cpc	r17, r13
    364a:	2e 05       	cpc	r18, r14
    364c:	3f 05       	cpc	r19, r15
    364e:	28 f4       	brcc	.+10     	; 0x365a <prvInsertTimerInActiveList+0x68>
    3650:	4c 15       	cp	r20, r12
    3652:	5d 05       	cpc	r21, r13
    3654:	6e 05       	cpc	r22, r14
    3656:	7f 05       	cpc	r23, r15
    3658:	68 f4       	brcc	.+26     	; 0x3674 <prvInsertTimerInActiveList+0x82>
    365a:	bf 01       	movw	r22, r30
    365c:	6e 5f       	subi	r22, 0xFE	; 254
    365e:	7f 4f       	sbci	r23, 0xFF	; 255
    3660:	80 91 d7 15 	lds	r24, 0x15D7	; 0x8015d7 <pxCurrentTimerList>
    3664:	90 91 d8 15 	lds	r25, 0x15D8	; 0x8015d8 <pxCurrentTimerList+0x1>
    3668:	0e 94 0b 06 	call	0xc16	; 0xc16 <vListInsert>
    366c:	80 e0       	ldi	r24, 0x00	; 0
    366e:	03 c0       	rjmp	.+6      	; 0x3676 <prvInsertTimerInActiveList+0x84>
    3670:	81 e0       	ldi	r24, 0x01	; 1
    3672:	01 c0       	rjmp	.+2      	; 0x3676 <prvInsertTimerInActiveList+0x84>
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	1f 91       	pop	r17
    3678:	0f 91       	pop	r16
    367a:	ff 90       	pop	r15
    367c:	ef 90       	pop	r14
    367e:	df 90       	pop	r13
    3680:	cf 90       	pop	r12
    3682:	08 95       	ret

00003684 <prvCheckForValidListAndQueue>:
    3684:	0f b6       	in	r0, 0x3f	; 63
    3686:	f8 94       	cli
    3688:	0f 92       	push	r0
    368a:	80 91 d3 15 	lds	r24, 0x15D3	; 0x8015d3 <xTimerQueue>
    368e:	90 91 d4 15 	lds	r25, 0x15D4	; 0x8015d4 <xTimerQueue+0x1>
    3692:	89 2b       	or	r24, r25
    3694:	e9 f4       	brne	.+58     	; 0x36d0 <prvCheckForValidListAndQueue+0x4c>
    3696:	84 ee       	ldi	r24, 0xE4	; 228
    3698:	95 e1       	ldi	r25, 0x15	; 21
    369a:	0e 94 f6 05 	call	0xbec	; 0xbec <vListInitialise>
    369e:	89 ed       	ldi	r24, 0xD9	; 217
    36a0:	95 e1       	ldi	r25, 0x15	; 21
    36a2:	0e 94 f6 05 	call	0xbec	; 0xbec <vListInitialise>
    36a6:	84 ee       	ldi	r24, 0xE4	; 228
    36a8:	95 e1       	ldi	r25, 0x15	; 21
    36aa:	90 93 d8 15 	sts	0x15D8, r25	; 0x8015d8 <pxCurrentTimerList+0x1>
    36ae:	80 93 d7 15 	sts	0x15D7, r24	; 0x8015d7 <pxCurrentTimerList>
    36b2:	89 ed       	ldi	r24, 0xD9	; 217
    36b4:	95 e1       	ldi	r25, 0x15	; 21
    36b6:	90 93 d6 15 	sts	0x15D6, r25	; 0x8015d6 <pxOverflowTimerList+0x1>
    36ba:	80 93 d5 15 	sts	0x15D5, r24	; 0x8015d5 <pxOverflowTimerList>
    36be:	40 e0       	ldi	r20, 0x00	; 0
    36c0:	67 e0       	ldi	r22, 0x07	; 7
    36c2:	8a e0       	ldi	r24, 0x0A	; 10
    36c4:	0e 94 b9 08 	call	0x1172	; 0x1172 <xQueueGenericCreate>
    36c8:	90 93 d4 15 	sts	0x15D4, r25	; 0x8015d4 <xTimerQueue+0x1>
    36cc:	80 93 d3 15 	sts	0x15D3, r24	; 0x8015d3 <xTimerQueue>
    36d0:	0f 90       	pop	r0
    36d2:	0f be       	out	0x3f, r0	; 63
    36d4:	08 95       	ret

000036d6 <xTimerCreateTimerTask>:
    36d6:	ef 92       	push	r14
    36d8:	ff 92       	push	r15
    36da:	0f 93       	push	r16
    36dc:	d3 df       	rcall	.-90     	; 0x3684 <prvCheckForValidListAndQueue>
    36de:	80 91 d3 15 	lds	r24, 0x15D3	; 0x8015d3 <xTimerQueue>
    36e2:	90 91 d4 15 	lds	r25, 0x15D4	; 0x8015d4 <xTimerQueue+0x1>
    36e6:	89 2b       	or	r24, r25
    36e8:	91 f0       	breq	.+36     	; 0x370e <xTimerCreateTimerTask+0x38>
    36ea:	0f 2e       	mov	r0, r31
    36ec:	f1 ed       	ldi	r31, 0xD1	; 209
    36ee:	ef 2e       	mov	r14, r31
    36f0:	f5 e1       	ldi	r31, 0x15	; 21
    36f2:	ff 2e       	mov	r15, r31
    36f4:	f0 2d       	mov	r31, r0
    36f6:	03 e0       	ldi	r16, 0x03	; 3
    36f8:	20 e0       	ldi	r18, 0x00	; 0
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	40 ec       	ldi	r20, 0xC0	; 192
    36fe:	50 e0       	ldi	r21, 0x00	; 0
    3700:	6a e6       	ldi	r22, 0x6A	; 106
    3702:	73 e0       	ldi	r23, 0x03	; 3
    3704:	88 e5       	ldi	r24, 0x58	; 88
    3706:	91 e0       	ldi	r25, 0x01	; 1
    3708:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <xTaskCreate>
    370c:	01 c0       	rjmp	.+2      	; 0x3710 <xTimerCreateTimerTask+0x3a>
    370e:	80 e0       	ldi	r24, 0x00	; 0
    3710:	0f 91       	pop	r16
    3712:	ff 90       	pop	r15
    3714:	ef 90       	pop	r14
    3716:	08 95       	ret

00003718 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3718:	8f 92       	push	r8
    371a:	9f 92       	push	r9
    371c:	af 92       	push	r10
    371e:	bf 92       	push	r11
    3720:	cf 92       	push	r12
    3722:	df 92       	push	r13
    3724:	ef 92       	push	r14
    3726:	ff 92       	push	r15
    3728:	0f 93       	push	r16
    372a:	1f 93       	push	r17
    372c:	cf 93       	push	r28
    372e:	df 93       	push	r29
    3730:	cd b7       	in	r28, 0x3d	; 61
    3732:	de b7       	in	r29, 0x3e	; 62
    3734:	27 97       	sbiw	r28, 0x07	; 7
    3736:	0f b6       	in	r0, 0x3f	; 63
    3738:	f8 94       	cli
    373a:	de bf       	out	0x3e, r29	; 62
    373c:	0f be       	out	0x3f, r0	; 63
    373e:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3740:	e0 91 d3 15 	lds	r30, 0x15D3	; 0x8015d3 <xTimerQueue>
    3744:	f0 91 d4 15 	lds	r31, 0x15D4	; 0x8015d4 <xTimerQueue+0x1>
    3748:	30 97       	sbiw	r30, 0x00	; 0
    374a:	81 f1       	breq	.+96     	; 0x37ac <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    374c:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    374e:	2a 83       	std	Y+2, r18	; 0x02
    3750:	3b 83       	std	Y+3, r19	; 0x03
    3752:	4c 83       	std	Y+4, r20	; 0x04
    3754:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3756:	9f 83       	std	Y+7, r25	; 0x07
    3758:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    375a:	66 30       	cpi	r22, 0x06	; 6
    375c:	f4 f4       	brge	.+60     	; 0x379a <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    375e:	c3 da       	rcall	.-2682   	; 0x2ce6 <xTaskGetSchedulerState>
    3760:	82 30       	cpi	r24, 0x02	; 2
    3762:	69 f4       	brne	.+26     	; 0x377e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3764:	00 e0       	ldi	r16, 0x00	; 0
    3766:	a7 01       	movw	r20, r14
    3768:	96 01       	movw	r18, r12
    376a:	be 01       	movw	r22, r28
    376c:	6f 5f       	subi	r22, 0xFF	; 255
    376e:	7f 4f       	sbci	r23, 0xFF	; 255
    3770:	80 91 d3 15 	lds	r24, 0x15D3	; 0x8015d3 <xTimerQueue>
    3774:	90 91 d4 15 	lds	r25, 0x15D4	; 0x8015d4 <xTimerQueue+0x1>
    3778:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <xQueueGenericSend>
    377c:	18 c0       	rjmp	.+48     	; 0x37ae <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    377e:	00 e0       	ldi	r16, 0x00	; 0
    3780:	20 e0       	ldi	r18, 0x00	; 0
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	a9 01       	movw	r20, r18
    3786:	be 01       	movw	r22, r28
    3788:	6f 5f       	subi	r22, 0xFF	; 255
    378a:	7f 4f       	sbci	r23, 0xFF	; 255
    378c:	80 91 d3 15 	lds	r24, 0x15D3	; 0x8015d3 <xTimerQueue>
    3790:	90 91 d4 15 	lds	r25, 0x15D4	; 0x8015d4 <xTimerQueue+0x1>
    3794:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <xQueueGenericSend>
    3798:	0a c0       	rjmp	.+20     	; 0x37ae <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    379a:	20 e0       	ldi	r18, 0x00	; 0
    379c:	a8 01       	movw	r20, r16
    379e:	be 01       	movw	r22, r28
    37a0:	6f 5f       	subi	r22, 0xFF	; 255
    37a2:	7f 4f       	sbci	r23, 0xFF	; 255
    37a4:	cf 01       	movw	r24, r30
    37a6:	0e 94 8c 09 	call	0x1318	; 0x1318 <xQueueGenericSendFromISR>
    37aa:	01 c0       	rjmp	.+2      	; 0x37ae <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    37ac:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    37ae:	27 96       	adiw	r28, 0x07	; 7
    37b0:	0f b6       	in	r0, 0x3f	; 63
    37b2:	f8 94       	cli
    37b4:	de bf       	out	0x3e, r29	; 62
    37b6:	0f be       	out	0x3f, r0	; 63
    37b8:	cd bf       	out	0x3d, r28	; 61
    37ba:	df 91       	pop	r29
    37bc:	cf 91       	pop	r28
    37be:	1f 91       	pop	r17
    37c0:	0f 91       	pop	r16
    37c2:	ff 90       	pop	r15
    37c4:	ef 90       	pop	r14
    37c6:	df 90       	pop	r13
    37c8:	cf 90       	pop	r12
    37ca:	bf 90       	pop	r11
    37cc:	af 90       	pop	r10
    37ce:	9f 90       	pop	r9
    37d0:	8f 90       	pop	r8
    37d2:	08 95       	ret

000037d4 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    37d4:	8f 92       	push	r8
    37d6:	9f 92       	push	r9
    37d8:	af 92       	push	r10
    37da:	bf 92       	push	r11
    37dc:	cf 92       	push	r12
    37de:	df 92       	push	r13
    37e0:	ef 92       	push	r14
    37e2:	ff 92       	push	r15
    37e4:	0f 93       	push	r16
    37e6:	1f 93       	push	r17
    37e8:	cf 93       	push	r28
    37ea:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    37ec:	3b c0       	rjmp	.+118    	; 0x3864 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    37ee:	07 80       	ldd	r0, Z+7	; 0x07
    37f0:	f0 85       	ldd	r31, Z+8	; 0x08
    37f2:	e0 2d       	mov	r30, r0
    37f4:	80 80       	ld	r8, Z
    37f6:	91 80       	ldd	r9, Z+1	; 0x01
    37f8:	a2 80       	ldd	r10, Z+2	; 0x02
    37fa:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    37fc:	c0 85       	ldd	r28, Z+8	; 0x08
    37fe:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3800:	8e 01       	movw	r16, r28
    3802:	0e 5f       	subi	r16, 0xFE	; 254
    3804:	1f 4f       	sbci	r17, 0xFF	; 255
    3806:	c8 01       	movw	r24, r16
    3808:	0e 94 48 06 	call	0xc90	; 0xc90 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    380c:	ec 89       	ldd	r30, Y+20	; 0x14
    380e:	fd 89       	ldd	r31, Y+21	; 0x15
    3810:	ce 01       	movw	r24, r28
    3812:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3814:	8e 89       	ldd	r24, Y+22	; 0x16
    3816:	82 ff       	sbrs	r24, 2
    3818:	25 c0       	rjmp	.+74     	; 0x3864 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    381a:	8e 85       	ldd	r24, Y+14	; 0x0e
    381c:	9f 85       	ldd	r25, Y+15	; 0x0f
    381e:	a8 89       	ldd	r26, Y+16	; 0x10
    3820:	b9 89       	ldd	r27, Y+17	; 0x11
    3822:	88 0d       	add	r24, r8
    3824:	99 1d       	adc	r25, r9
    3826:	aa 1d       	adc	r26, r10
    3828:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    382a:	88 16       	cp	r8, r24
    382c:	99 06       	cpc	r9, r25
    382e:	aa 06       	cpc	r10, r26
    3830:	bb 06       	cpc	r11, r27
    3832:	70 f4       	brcc	.+28     	; 0x3850 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3834:	8a 83       	std	Y+2, r24	; 0x02
    3836:	9b 83       	std	Y+3, r25	; 0x03
    3838:	ac 83       	std	Y+4, r26	; 0x04
    383a:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    383c:	db 87       	std	Y+11, r29	; 0x0b
    383e:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3840:	b8 01       	movw	r22, r16
    3842:	80 91 d7 15 	lds	r24, 0x15D7	; 0x8015d7 <pxCurrentTimerList>
    3846:	90 91 d8 15 	lds	r25, 0x15D8	; 0x8015d8 <pxCurrentTimerList+0x1>
    384a:	0e 94 0b 06 	call	0xc16	; 0xc16 <vListInsert>
    384e:	0a c0       	rjmp	.+20     	; 0x3864 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3850:	c1 2c       	mov	r12, r1
    3852:	d1 2c       	mov	r13, r1
    3854:	76 01       	movw	r14, r12
    3856:	00 e0       	ldi	r16, 0x00	; 0
    3858:	10 e0       	ldi	r17, 0x00	; 0
    385a:	a5 01       	movw	r20, r10
    385c:	94 01       	movw	r18, r8
    385e:	60 e0       	ldi	r22, 0x00	; 0
    3860:	ce 01       	movw	r24, r28
    3862:	5a df       	rcall	.-332    	; 0x3718 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3864:	e0 91 d7 15 	lds	r30, 0x15D7	; 0x8015d7 <pxCurrentTimerList>
    3868:	f0 91 d8 15 	lds	r31, 0x15D8	; 0x8015d8 <pxCurrentTimerList+0x1>
    386c:	80 81       	ld	r24, Z
    386e:	81 11       	cpse	r24, r1
    3870:	be cf       	rjmp	.-132    	; 0x37ee <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3872:	80 91 d5 15 	lds	r24, 0x15D5	; 0x8015d5 <pxOverflowTimerList>
    3876:	90 91 d6 15 	lds	r25, 0x15D6	; 0x8015d6 <pxOverflowTimerList+0x1>
    387a:	90 93 d8 15 	sts	0x15D8, r25	; 0x8015d8 <pxCurrentTimerList+0x1>
    387e:	80 93 d7 15 	sts	0x15D7, r24	; 0x8015d7 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3882:	f0 93 d6 15 	sts	0x15D6, r31	; 0x8015d6 <pxOverflowTimerList+0x1>
    3886:	e0 93 d5 15 	sts	0x15D5, r30	; 0x8015d5 <pxOverflowTimerList>
    }
    388a:	df 91       	pop	r29
    388c:	cf 91       	pop	r28
    388e:	1f 91       	pop	r17
    3890:	0f 91       	pop	r16
    3892:	ff 90       	pop	r15
    3894:	ef 90       	pop	r14
    3896:	df 90       	pop	r13
    3898:	cf 90       	pop	r12
    389a:	bf 90       	pop	r11
    389c:	af 90       	pop	r10
    389e:	9f 90       	pop	r9
    38a0:	8f 90       	pop	r8
    38a2:	08 95       	ret

000038a4 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    38a4:	cf 92       	push	r12
    38a6:	df 92       	push	r13
    38a8:	ef 92       	push	r14
    38aa:	ff 92       	push	r15
    38ac:	cf 93       	push	r28
    38ae:	df 93       	push	r29
    38b0:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    38b2:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xTaskGetTickCount>
    38b6:	6b 01       	movw	r12, r22
    38b8:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    38ba:	80 91 cd 15 	lds	r24, 0x15CD	; 0x8015cd <xLastTime.2436>
    38be:	90 91 ce 15 	lds	r25, 0x15CE	; 0x8015ce <xLastTime.2436+0x1>
    38c2:	a0 91 cf 15 	lds	r26, 0x15CF	; 0x8015cf <xLastTime.2436+0x2>
    38c6:	b0 91 d0 15 	lds	r27, 0x15D0	; 0x8015d0 <xLastTime.2436+0x3>
    38ca:	c8 16       	cp	r12, r24
    38cc:	d9 06       	cpc	r13, r25
    38ce:	ea 06       	cpc	r14, r26
    38d0:	fb 06       	cpc	r15, r27
    38d2:	20 f4       	brcc	.+8      	; 0x38dc <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    38d4:	7f df       	rcall	.-258    	; 0x37d4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	88 83       	st	Y, r24
    38da:	01 c0       	rjmp	.+2      	; 0x38de <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    38dc:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    38de:	c0 92 cd 15 	sts	0x15CD, r12	; 0x8015cd <xLastTime.2436>
    38e2:	d0 92 ce 15 	sts	0x15CE, r13	; 0x8015ce <xLastTime.2436+0x1>
    38e6:	e0 92 cf 15 	sts	0x15CF, r14	; 0x8015cf <xLastTime.2436+0x2>
    38ea:	f0 92 d0 15 	sts	0x15D0, r15	; 0x8015d0 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    38ee:	c7 01       	movw	r24, r14
    38f0:	b6 01       	movw	r22, r12
    38f2:	df 91       	pop	r29
    38f4:	cf 91       	pop	r28
    38f6:	ff 90       	pop	r15
    38f8:	ef 90       	pop	r14
    38fa:	df 90       	pop	r13
    38fc:	cf 90       	pop	r12
    38fe:	08 95       	ret

00003900 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3900:	4f 92       	push	r4
    3902:	5f 92       	push	r5
    3904:	6f 92       	push	r6
    3906:	7f 92       	push	r7
    3908:	8f 92       	push	r8
    390a:	9f 92       	push	r9
    390c:	af 92       	push	r10
    390e:	bf 92       	push	r11
    3910:	cf 92       	push	r12
    3912:	df 92       	push	r13
    3914:	ef 92       	push	r14
    3916:	ff 92       	push	r15
    3918:	0f 93       	push	r16
    391a:	1f 93       	push	r17
    391c:	cf 93       	push	r28
    391e:	df 93       	push	r29
    3920:	4b 01       	movw	r8, r22
    3922:	5c 01       	movw	r10, r24
    3924:	29 01       	movw	r4, r18
    3926:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3928:	e0 91 d7 15 	lds	r30, 0x15D7	; 0x8015d7 <pxCurrentTimerList>
    392c:	f0 91 d8 15 	lds	r31, 0x15D8	; 0x8015d8 <pxCurrentTimerList+0x1>
    3930:	07 80       	ldd	r0, Z+7	; 0x07
    3932:	f0 85       	ldd	r31, Z+8	; 0x08
    3934:	e0 2d       	mov	r30, r0
    3936:	c0 85       	ldd	r28, Z+8	; 0x08
    3938:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    393a:	ce 01       	movw	r24, r28
    393c:	02 96       	adiw	r24, 0x02	; 2
    393e:	0e 94 48 06 	call	0xc90	; 0xc90 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3942:	8e 89       	ldd	r24, Y+22	; 0x16
    3944:	82 ff       	sbrs	r24, 2
    3946:	1b c0       	rjmp	.+54     	; 0x397e <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3948:	4e 85       	ldd	r20, Y+14	; 0x0e
    394a:	5f 85       	ldd	r21, Y+15	; 0x0f
    394c:	68 89       	ldd	r22, Y+16	; 0x10
    394e:	79 89       	ldd	r23, Y+17	; 0x11
    3950:	48 0d       	add	r20, r8
    3952:	59 1d       	adc	r21, r9
    3954:	6a 1d       	adc	r22, r10
    3956:	7b 1d       	adc	r23, r11
    3958:	75 01       	movw	r14, r10
    395a:	64 01       	movw	r12, r8
    395c:	93 01       	movw	r18, r6
    395e:	82 01       	movw	r16, r4
    3960:	ce 01       	movw	r24, r28
    3962:	47 de       	rcall	.-882    	; 0x35f2 <prvInsertTimerInActiveList>
    3964:	88 23       	and	r24, r24
    3966:	69 f0       	breq	.+26     	; 0x3982 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3968:	c1 2c       	mov	r12, r1
    396a:	d1 2c       	mov	r13, r1
    396c:	76 01       	movw	r14, r12
    396e:	00 e0       	ldi	r16, 0x00	; 0
    3970:	10 e0       	ldi	r17, 0x00	; 0
    3972:	a5 01       	movw	r20, r10
    3974:	94 01       	movw	r18, r8
    3976:	60 e0       	ldi	r22, 0x00	; 0
    3978:	ce 01       	movw	r24, r28
    397a:	ce de       	rcall	.-612    	; 0x3718 <xTimerGenericCommand>
    397c:	02 c0       	rjmp	.+4      	; 0x3982 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    397e:	8e 7f       	andi	r24, 0xFE	; 254
    3980:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3982:	ec 89       	ldd	r30, Y+20	; 0x14
    3984:	fd 89       	ldd	r31, Y+21	; 0x15
    3986:	ce 01       	movw	r24, r28
    3988:	19 95       	eicall
    }
    398a:	df 91       	pop	r29
    398c:	cf 91       	pop	r28
    398e:	1f 91       	pop	r17
    3990:	0f 91       	pop	r16
    3992:	ff 90       	pop	r15
    3994:	ef 90       	pop	r14
    3996:	df 90       	pop	r13
    3998:	cf 90       	pop	r12
    399a:	bf 90       	pop	r11
    399c:	af 90       	pop	r10
    399e:	9f 90       	pop	r9
    39a0:	8f 90       	pop	r8
    39a2:	7f 90       	pop	r7
    39a4:	6f 90       	pop	r6
    39a6:	5f 90       	pop	r5
    39a8:	4f 90       	pop	r4
    39aa:	08 95       	ret

000039ac <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    39ac:	8f 92       	push	r8
    39ae:	9f 92       	push	r9
    39b0:	af 92       	push	r10
    39b2:	bf 92       	push	r11
    39b4:	cf 92       	push	r12
    39b6:	df 92       	push	r13
    39b8:	ef 92       	push	r14
    39ba:	ff 92       	push	r15
    39bc:	1f 93       	push	r17
    39be:	cf 93       	push	r28
    39c0:	df 93       	push	r29
    39c2:	1f 92       	push	r1
    39c4:	cd b7       	in	r28, 0x3d	; 61
    39c6:	de b7       	in	r29, 0x3e	; 62
    39c8:	6b 01       	movw	r12, r22
    39ca:	7c 01       	movw	r14, r24
    39cc:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    39ce:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    39d2:	ce 01       	movw	r24, r28
    39d4:	01 96       	adiw	r24, 0x01	; 1
    39d6:	66 df       	rcall	.-308    	; 0x38a4 <prvSampleTimeNow>
    39d8:	4b 01       	movw	r8, r22
    39da:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    39dc:	89 81       	ldd	r24, Y+1	; 0x01
    39de:	81 11       	cpse	r24, r1
    39e0:	2d c0       	rjmp	.+90     	; 0x3a3c <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    39e2:	11 11       	cpse	r17, r1
    39e4:	0d c0       	rjmp	.+26     	; 0x3a00 <prvProcessTimerOrBlockTask+0x54>
    39e6:	8c 14       	cp	r8, r12
    39e8:	9d 04       	cpc	r9, r13
    39ea:	ae 04       	cpc	r10, r14
    39ec:	bf 04       	cpc	r11, r15
    39ee:	40 f0       	brcs	.+16     	; 0x3a00 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    39f0:	0e 94 30 12 	call	0x2460	; 0x2460 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    39f4:	a5 01       	movw	r20, r10
    39f6:	94 01       	movw	r18, r8
    39f8:	c7 01       	movw	r24, r14
    39fa:	b6 01       	movw	r22, r12
    39fc:	81 df       	rcall	.-254    	; 0x3900 <prvProcessExpiredTimer>
    39fe:	20 c0       	rjmp	.+64     	; 0x3a40 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3a00:	11 23       	and	r17, r17
    3a02:	41 f0       	breq	.+16     	; 0x3a14 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3a04:	e0 91 d5 15 	lds	r30, 0x15D5	; 0x8015d5 <pxOverflowTimerList>
    3a08:	f0 91 d6 15 	lds	r31, 0x15D6	; 0x8015d6 <pxOverflowTimerList+0x1>
    3a0c:	80 81       	ld	r24, Z
    3a0e:	11 e0       	ldi	r17, 0x01	; 1
    3a10:	81 11       	cpse	r24, r1
    3a12:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3a14:	b7 01       	movw	r22, r14
    3a16:	a6 01       	movw	r20, r12
    3a18:	48 19       	sub	r20, r8
    3a1a:	59 09       	sbc	r21, r9
    3a1c:	6a 09       	sbc	r22, r10
    3a1e:	7b 09       	sbc	r23, r11
    3a20:	21 2f       	mov	r18, r17
    3a22:	80 91 d3 15 	lds	r24, 0x15D3	; 0x8015d3 <xTimerQueue>
    3a26:	90 91 d4 15 	lds	r25, 0x15D4	; 0x8015d4 <xTimerQueue+0x1>
    3a2a:	0e 94 07 0b 	call	0x160e	; 0x160e <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3a2e:	0e 94 30 12 	call	0x2460	; 0x2460 <xTaskResumeAll>
    3a32:	81 11       	cpse	r24, r1
    3a34:	05 c0       	rjmp	.+10     	; 0x3a40 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3a36:	0e 94 c4 06 	call	0xd88	; 0xd88 <vPortYield>
    3a3a:	02 c0       	rjmp	.+4      	; 0x3a40 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3a3c:	0e 94 30 12 	call	0x2460	; 0x2460 <xTaskResumeAll>
            }
        }
    }
    3a40:	0f 90       	pop	r0
    3a42:	df 91       	pop	r29
    3a44:	cf 91       	pop	r28
    3a46:	1f 91       	pop	r17
    3a48:	ff 90       	pop	r15
    3a4a:	ef 90       	pop	r14
    3a4c:	df 90       	pop	r13
    3a4e:	cf 90       	pop	r12
    3a50:	bf 90       	pop	r11
    3a52:	af 90       	pop	r10
    3a54:	9f 90       	pop	r9
    3a56:	8f 90       	pop	r8
    3a58:	08 95       	ret

00003a5a <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3a5a:	af 92       	push	r10
    3a5c:	bf 92       	push	r11
    3a5e:	cf 92       	push	r12
    3a60:	df 92       	push	r13
    3a62:	ef 92       	push	r14
    3a64:	ff 92       	push	r15
    3a66:	0f 93       	push	r16
    3a68:	1f 93       	push	r17
    3a6a:	cf 93       	push	r28
    3a6c:	df 93       	push	r29
    3a6e:	cd b7       	in	r28, 0x3d	; 61
    3a70:	de b7       	in	r29, 0x3e	; 62
    3a72:	28 97       	sbiw	r28, 0x08	; 8
    3a74:	0f b6       	in	r0, 0x3f	; 63
    3a76:	f8 94       	cli
    3a78:	de bf       	out	0x3e, r29	; 62
    3a7a:	0f be       	out	0x3f, r0	; 63
    3a7c:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3a7e:	82 c0       	rjmp	.+260    	; 0x3b84 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3a80:	89 81       	ldd	r24, Y+1	; 0x01
    3a82:	88 23       	and	r24, r24
    3a84:	0c f4       	brge	.+2      	; 0x3a88 <prvProcessReceivedCommands+0x2e>
    3a86:	7e c0       	rjmp	.+252    	; 0x3b84 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3a88:	ae 80       	ldd	r10, Y+6	; 0x06
    3a8a:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3a8c:	d5 01       	movw	r26, r10
    3a8e:	1c 96       	adiw	r26, 0x0c	; 12
    3a90:	8d 91       	ld	r24, X+
    3a92:	9c 91       	ld	r25, X
    3a94:	1d 97       	sbiw	r26, 0x0d	; 13
    3a96:	89 2b       	or	r24, r25
    3a98:	21 f0       	breq	.+8      	; 0x3aa2 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3a9a:	c5 01       	movw	r24, r10
    3a9c:	02 96       	adiw	r24, 0x02	; 2
    3a9e:	0e 94 48 06 	call	0xc90	; 0xc90 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3aa2:	ce 01       	movw	r24, r28
    3aa4:	08 96       	adiw	r24, 0x08	; 8
    3aa6:	fe de       	rcall	.-516    	; 0x38a4 <prvSampleTimeNow>
    3aa8:	8b 01       	movw	r16, r22
    3aaa:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3aac:	e9 81       	ldd	r30, Y+1	; 0x01
    3aae:	0e 2e       	mov	r0, r30
    3ab0:	00 0c       	add	r0, r0
    3ab2:	ff 0b       	sbc	r31, r31
    3ab4:	ea 30       	cpi	r30, 0x0A	; 10
    3ab6:	f1 05       	cpc	r31, r1
    3ab8:	08 f0       	brcs	.+2      	; 0x3abc <prvProcessReceivedCommands+0x62>
    3aba:	64 c0       	rjmp	.+200    	; 0x3b84 <prvProcessReceivedCommands+0x12a>
    3abc:	88 27       	eor	r24, r24
    3abe:	ee 58       	subi	r30, 0x8E	; 142
    3ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac2:	8f 4f       	sbci	r24, 0xFF	; 255
    3ac4:	0c 94 a3 33 	jmp	0x6746	; 0x6746 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3ac8:	f5 01       	movw	r30, r10
    3aca:	86 89       	ldd	r24, Z+22	; 0x16
    3acc:	81 60       	ori	r24, 0x01	; 1
    3ace:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3ad0:	ca 80       	ldd	r12, Y+2	; 0x02
    3ad2:	db 80       	ldd	r13, Y+3	; 0x03
    3ad4:	ec 80       	ldd	r14, Y+4	; 0x04
    3ad6:	fd 80       	ldd	r15, Y+5	; 0x05
    3ad8:	46 85       	ldd	r20, Z+14	; 0x0e
    3ada:	57 85       	ldd	r21, Z+15	; 0x0f
    3adc:	60 89       	ldd	r22, Z+16	; 0x10
    3ade:	71 89       	ldd	r23, Z+17	; 0x11
    3ae0:	4c 0d       	add	r20, r12
    3ae2:	5d 1d       	adc	r21, r13
    3ae4:	6e 1d       	adc	r22, r14
    3ae6:	7f 1d       	adc	r23, r15
    3ae8:	c5 01       	movw	r24, r10
    3aea:	83 dd       	rcall	.-1274   	; 0x35f2 <prvInsertTimerInActiveList>
    3aec:	88 23       	and	r24, r24
    3aee:	09 f4       	brne	.+2      	; 0x3af2 <prvProcessReceivedCommands+0x98>
    3af0:	49 c0       	rjmp	.+146    	; 0x3b84 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3af2:	d5 01       	movw	r26, r10
    3af4:	54 96       	adiw	r26, 0x14	; 20
    3af6:	ed 91       	ld	r30, X+
    3af8:	fc 91       	ld	r31, X
    3afa:	55 97       	sbiw	r26, 0x15	; 21
    3afc:	c5 01       	movw	r24, r10
    3afe:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3b00:	f5 01       	movw	r30, r10
    3b02:	86 89       	ldd	r24, Z+22	; 0x16
    3b04:	82 ff       	sbrs	r24, 2
    3b06:	3e c0       	rjmp	.+124    	; 0x3b84 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3b08:	4a 81       	ldd	r20, Y+2	; 0x02
    3b0a:	5b 81       	ldd	r21, Y+3	; 0x03
    3b0c:	6c 81       	ldd	r22, Y+4	; 0x04
    3b0e:	7d 81       	ldd	r23, Y+5	; 0x05
    3b10:	86 85       	ldd	r24, Z+14	; 0x0e
    3b12:	97 85       	ldd	r25, Z+15	; 0x0f
    3b14:	a0 89       	ldd	r26, Z+16	; 0x10
    3b16:	b1 89       	ldd	r27, Z+17	; 0x11
    3b18:	9a 01       	movw	r18, r20
    3b1a:	ab 01       	movw	r20, r22
    3b1c:	28 0f       	add	r18, r24
    3b1e:	39 1f       	adc	r19, r25
    3b20:	4a 1f       	adc	r20, r26
    3b22:	5b 1f       	adc	r21, r27
    3b24:	c1 2c       	mov	r12, r1
    3b26:	d1 2c       	mov	r13, r1
    3b28:	76 01       	movw	r14, r12
    3b2a:	00 e0       	ldi	r16, 0x00	; 0
    3b2c:	10 e0       	ldi	r17, 0x00	; 0
    3b2e:	60 e0       	ldi	r22, 0x00	; 0
    3b30:	c5 01       	movw	r24, r10
    3b32:	f2 dd       	rcall	.-1052   	; 0x3718 <xTimerGenericCommand>
    3b34:	27 c0       	rjmp	.+78     	; 0x3b84 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3b36:	d5 01       	movw	r26, r10
    3b38:	56 96       	adiw	r26, 0x16	; 22
    3b3a:	8c 91       	ld	r24, X
    3b3c:	56 97       	sbiw	r26, 0x16	; 22
    3b3e:	8e 7f       	andi	r24, 0xFE	; 254
    3b40:	56 96       	adiw	r26, 0x16	; 22
    3b42:	8c 93       	st	X, r24
                        break;
    3b44:	1f c0       	rjmp	.+62     	; 0x3b84 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3b46:	f5 01       	movw	r30, r10
    3b48:	86 89       	ldd	r24, Z+22	; 0x16
    3b4a:	81 60       	ori	r24, 0x01	; 1
    3b4c:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3b4e:	4a 81       	ldd	r20, Y+2	; 0x02
    3b50:	5b 81       	ldd	r21, Y+3	; 0x03
    3b52:	6c 81       	ldd	r22, Y+4	; 0x04
    3b54:	7d 81       	ldd	r23, Y+5	; 0x05
    3b56:	46 87       	std	Z+14, r20	; 0x0e
    3b58:	57 87       	std	Z+15, r21	; 0x0f
    3b5a:	60 8b       	std	Z+16, r22	; 0x10
    3b5c:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3b5e:	40 0f       	add	r20, r16
    3b60:	51 1f       	adc	r21, r17
    3b62:	62 1f       	adc	r22, r18
    3b64:	73 1f       	adc	r23, r19
    3b66:	68 01       	movw	r12, r16
    3b68:	79 01       	movw	r14, r18
    3b6a:	c5 01       	movw	r24, r10
    3b6c:	42 dd       	rcall	.-1404   	; 0x35f2 <prvInsertTimerInActiveList>
                        break;
    3b6e:	0a c0       	rjmp	.+20     	; 0x3b84 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3b70:	f5 01       	movw	r30, r10
    3b72:	86 89       	ldd	r24, Z+22	; 0x16
    3b74:	81 fd       	sbrc	r24, 1
    3b76:	04 c0       	rjmp	.+8      	; 0x3b80 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3b78:	c5 01       	movw	r24, r10
    3b7a:	0e 94 b9 05 	call	0xb72	; 0xb72 <vPortFree>
    3b7e:	02 c0       	rjmp	.+4      	; 0x3b84 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3b80:	8e 7f       	andi	r24, 0xFE	; 254
    3b82:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3b84:	20 e0       	ldi	r18, 0x00	; 0
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	a9 01       	movw	r20, r18
    3b8a:	be 01       	movw	r22, r28
    3b8c:	6f 5f       	subi	r22, 0xFF	; 255
    3b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b90:	80 91 d3 15 	lds	r24, 0x15D3	; 0x8015d3 <xTimerQueue>
    3b94:	90 91 d4 15 	lds	r25, 0x15D4	; 0x8015d4 <xTimerQueue+0x1>
    3b98:	0e 94 c7 09 	call	0x138e	; 0x138e <xQueueReceive>
    3b9c:	81 11       	cpse	r24, r1
    3b9e:	70 cf       	rjmp	.-288    	; 0x3a80 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3ba0:	28 96       	adiw	r28, 0x08	; 8
    3ba2:	0f b6       	in	r0, 0x3f	; 63
    3ba4:	f8 94       	cli
    3ba6:	de bf       	out	0x3e, r29	; 62
    3ba8:	0f be       	out	0x3f, r0	; 63
    3baa:	cd bf       	out	0x3d, r28	; 61
    3bac:	df 91       	pop	r29
    3bae:	cf 91       	pop	r28
    3bb0:	1f 91       	pop	r17
    3bb2:	0f 91       	pop	r16
    3bb4:	ff 90       	pop	r15
    3bb6:	ef 90       	pop	r14
    3bb8:	df 90       	pop	r13
    3bba:	cf 90       	pop	r12
    3bbc:	bf 90       	pop	r11
    3bbe:	af 90       	pop	r10
    3bc0:	08 95       	ret

00003bc2 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3bc2:	08 95       	ret

00003bc4 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3bc4:	84 b1       	in	r24, 0x04	; 4
    3bc6:	80 68       	ori	r24, 0x80	; 128
    3bc8:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3bca:	85 b1       	in	r24, 0x05	; 5
    3bcc:	80 68       	ori	r24, 0x80	; 128
    3bce:	85 b9       	out	0x05, r24	; 5
    3bd0:	08 95       	ret

00003bd2 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3bd2:	83 b1       	in	r24, 0x03	; 3
    3bd4:	80 68       	ori	r24, 0x80	; 128
    3bd6:	83 b9       	out	0x03, r24	; 3
    3bd8:	08 95       	ret

00003bda <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3bda:	f4 df       	rcall	.-24     	; 0x3bc4 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3bdc:	2f ef       	ldi	r18, 0xFF	; 255
    3bde:	80 e7       	ldi	r24, 0x70	; 112
    3be0:	92 e0       	ldi	r25, 0x02	; 2
    3be2:	21 50       	subi	r18, 0x01	; 1
    3be4:	80 40       	sbci	r24, 0x00	; 0
    3be6:	90 40       	sbci	r25, 0x00	; 0
    3be8:	e1 f7       	brne	.-8      	; 0x3be2 <vApplicationMallocFailedHook+0x8>
    3bea:	00 c0       	rjmp	.+0      	; 0x3bec <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3bec:	00 00       	nop
    3bee:	f1 df       	rcall	.-30     	; 0x3bd2 <prvBlinkMainLed>
    3bf0:	f5 cf       	rjmp	.-22     	; 0x3bdc <vApplicationMallocFailedHook+0x2>

00003bf2 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3bf2:	e8 df       	rcall	.-48     	; 0x3bc4 <prvSetMainLedOn>
    3bf4:	2f ef       	ldi	r18, 0xFF	; 255
    3bf6:	87 ea       	ldi	r24, 0xA7	; 167
    3bf8:	91 e6       	ldi	r25, 0x61	; 97
    3bfa:	21 50       	subi	r18, 0x01	; 1
    3bfc:	80 40       	sbci	r24, 0x00	; 0
    3bfe:	90 40       	sbci	r25, 0x00	; 0
    3c00:	e1 f7       	brne	.-8      	; 0x3bfa <vApplicationStackOverflowHook+0x8>
    3c02:	00 c0       	rjmp	.+0      	; 0x3c04 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3c04:	00 00       	nop
    3c06:	e5 df       	rcall	.-54     	; 0x3bd2 <prvBlinkMainLed>
    3c08:	f5 cf       	rjmp	.-22     	; 0x3bf4 <vApplicationStackOverflowHook+0x2>

00003c0a <hih8120_handler_initialise>:
int16_t temperatureIn16 = 0;


void hih820_handler_task( void *pvParameters );

void hih8120_handler_initialise(UBaseType_t hih8120_task_priority){
    3c0a:	ef 92       	push	r14
    3c0c:	ff 92       	push	r15
    3c0e:	0f 93       	push	r16
    3c10:	08 2f       	mov	r16, r24
	if ( HIH8120_OK == hih8120_initialise() ){
    3c12:	b5 d2       	rcall	.+1386   	; 0x417e <hih8120_initialise>
    3c14:	81 11       	cpse	r24, r1
    3c16:	0c c0       	rjmp	.+24     	; 0x3c30 <hih8120_handler_initialise+0x26>
			printf("%d\n",HIH8120_OK);
    3c18:	1f 92       	push	r1
    3c1a:	1f 92       	push	r1
    3c1c:	87 e0       	ldi	r24, 0x07	; 7
    3c1e:	93 e0       	ldi	r25, 0x03	; 3
    3c20:	9f 93       	push	r25
    3c22:	8f 93       	push	r24
    3c24:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
    3c28:	0f 90       	pop	r0
    3c2a:	0f 90       	pop	r0
    3c2c:	0f 90       	pop	r0
    3c2e:	0f 90       	pop	r0
	}
	xTaskCreate(
    3c30:	e1 2c       	mov	r14, r1
    3c32:	f1 2c       	mov	r15, r1
    3c34:	20 e0       	ldi	r18, 0x00	; 0
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	40 ec       	ldi	r20, 0xC0	; 192
    3c3a:	50 e0       	ldi	r21, 0x00	; 0
    3c3c:	62 e7       	ldi	r22, 0x72	; 114
    3c3e:	73 e0       	ldi	r23, 0x03	; 3
    3c40:	88 e4       	ldi	r24, 0x48	; 72
    3c42:	9e e1       	ldi	r25, 0x1E	; 30
    3c44:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <xTaskCreate>
	,  "Hih820Hand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  hih8120_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3c48:	0f 91       	pop	r16
    3c4a:	ff 90       	pop	r15
    3c4c:	ef 90       	pop	r14
    3c4e:	08 95       	ret

00003c50 <hih820_getHumidityInUint16>:
		}
	}
}

uint16_t hih820_getHumidityInUint16(){
	return humidityIn16/10;
    3c50:	20 91 f1 15 	lds	r18, 0x15F1	; 0x8015f1 <humidityIn16>
    3c54:	30 91 f2 15 	lds	r19, 0x15F2	; 0x8015f2 <humidityIn16+0x1>
    3c58:	ad ec       	ldi	r26, 0xCD	; 205
    3c5a:	bc ec       	ldi	r27, 0xCC	; 204
    3c5c:	0e 94 ab 33 	call	0x6756	; 0x6756 <__umulhisi3>
}
    3c60:	96 95       	lsr	r25
    3c62:	87 95       	ror	r24
    3c64:	96 95       	lsr	r25
    3c66:	87 95       	ror	r24
    3c68:	96 95       	lsr	r25
    3c6a:	87 95       	ror	r24
    3c6c:	08 95       	ret

00003c6e <hih820_getTemperatureInUint16>:

int16_t hih820_getTemperatureInUint16(){
	return temperatureIn16/10;
    3c6e:	80 91 ef 15 	lds	r24, 0x15EF	; 0x8015ef <temperatureIn16>
    3c72:	90 91 f0 15 	lds	r25, 0x15F0	; 0x8015f0 <temperatureIn16+0x1>
    3c76:	6a e0       	ldi	r22, 0x0A	; 10
    3c78:	70 e0       	ldi	r23, 0x00	; 0
    3c7a:	0e 94 6e 33 	call	0x66dc	; 0x66dc <__divmodhi4>
    3c7e:	cb 01       	movw	r24, r22
}
    3c80:	08 95       	ret

00003c82 <hih820_aFunctionToSetBits>:
void hih820_aFunctionToSetBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Set bit 0 and bit 4 in xEventGroup. */
  uxBits = xEventGroupSetBits(
    3c82:	40 e1       	ldi	r20, 0x10	; 16
    3c84:	50 e0       	ldi	r21, 0x00	; 0
    3c86:	60 e0       	ldi	r22, 0x00	; 0
    3c88:	70 e0       	ldi	r23, 0x00	; 0
    3c8a:	0c 94 0f 04 	jmp	0x81e	; 0x81e <xEventGroupSetBits>
    3c8e:	08 95       	ret

00003c90 <hih820_handler_task>:
	,  hih8120_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void hih820_handler_task(void *pvParameters)
{
    3c90:	cf 93       	push	r28
    3c92:	df 93       	push	r29
    3c94:	00 d0       	rcall	.+0      	; 0x3c96 <hih820_handler_task+0x6>
    3c96:	1f 92       	push	r1
    3c98:	cd b7       	in	r28, 0x3d	; 61
    3c9a:	de b7       	in	r29, 0x3e	; 62
	(void)pvParameters;
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    3c9c:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xTaskGetTickCount>
    3ca0:	69 83       	std	Y+1, r22	; 0x01
    3ca2:	7a 83       	std	Y+2, r23	; 0x02
    3ca4:	8b 83       	std	Y+3, r24	; 0x03
    3ca6:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3ca8:	48 ea       	ldi	r20, 0xA8	; 168
    3caa:	58 e4       	ldi	r21, 0x48	; 72
    3cac:	60 e0       	ldi	r22, 0x00	; 0
    3cae:	70 e0       	ldi	r23, 0x00	; 0
    3cb0:	ce 01       	movw	r24, r28
    3cb2:	01 96       	adiw	r24, 0x01	; 1
    3cb4:	0e 94 0c 13 	call	0x2618	; 0x2618 <xTaskDelayUntil>
		if (HIH8120_OK == hih8120_wakeup())
    3cb8:	7a d2       	rcall	.+1268   	; 0x41ae <hih8120_wakeup>
    3cba:	81 11       	cpse	r24, r1
    3cbc:	f5 cf       	rjmp	.-22     	; 0x3ca8 <hih820_handler_task+0x18>
		{
			vTaskDelay(50);
    3cbe:	62 e3       	ldi	r22, 0x32	; 50
    3cc0:	70 e0       	ldi	r23, 0x00	; 0
    3cc2:	80 e0       	ldi	r24, 0x00	; 0
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	0e 94 71 13 	call	0x26e2	; 0x26e2 <vTaskDelay>
			if (HIH8120_OK == hih8120_measure())
    3cca:	86 d2       	rcall	.+1292   	; 0x41d8 <hih8120_measure>
    3ccc:	81 11       	cpse	r24, r1
    3cce:	ec cf       	rjmp	.-40     	; 0x3ca8 <hih820_handler_task+0x18>
			{
				vTaskDelay(1);
    3cd0:	61 e0       	ldi	r22, 0x01	; 1
    3cd2:	70 e0       	ldi	r23, 0x00	; 0
    3cd4:	80 e0       	ldi	r24, 0x00	; 0
    3cd6:	90 e0       	ldi	r25, 0x00	; 0
    3cd8:	0e 94 71 13 	call	0x26e2	; 0x26e2 <vTaskDelay>
				humidityIn16 = hih8120_getHumidityPercent_x10();
    3cdc:	a3 d2       	rcall	.+1350   	; 0x4224 <hih8120_getHumidityPercent_x10>
    3cde:	90 93 f2 15 	sts	0x15F2, r25	; 0x8015f2 <humidityIn16+0x1>
    3ce2:	80 93 f1 15 	sts	0x15F1, r24	; 0x8015f1 <humidityIn16>
				temperatureIn16 = hih8120_getTemperature_x10();
    3ce6:	c4 d2       	rcall	.+1416   	; 0x4270 <hih8120_getTemperature_x10>
    3ce8:	90 93 f0 15 	sts	0x15F0, r25	; 0x8015f0 <temperatureIn16+0x1>
    3cec:	80 93 ef 15 	sts	0x15EF, r24	; 0x8015ef <temperatureIn16>
				hih820_aFunctionToSetBits(Application_getEventGroup());
    3cf0:	0e 94 89 01 	call	0x312	; 0x312 <Application_getEventGroup>
    3cf4:	c6 df       	rcall	.-116    	; 0x3c82 <hih820_aFunctionToSetBits>
    3cf6:	d8 cf       	rjmp	.-80     	; 0x3ca8 <hih820_handler_task+0x18>

00003cf8 <WindowController_handler_task>:
	,  NULL );
}

void WindowController_handler_task(void *pvParameters)
{
	printf("startWindowController \n");
    3cf8:	8d e7       	ldi	r24, 0x7D	; 125
    3cfa:	93 e0       	ldi	r25, 0x03	; 3
    3cfc:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <puts>
	(void)pvParameters;
	semaphore_mutex = get_mutex();
    3d00:	0e 94 b0 02 	call	0x560	; 0x560 <get_mutex>
    3d04:	90 93 f4 15 	sts	0x15F4, r25	; 0x8015f4 <semaphore_mutex+0x1>
    3d08:	80 93 f3 15 	sts	0x15F3, r24	; 0x8015f3 <semaphore_mutex>
	xSemaphoreGive(semaphore_mutex);
    3d0c:	00 e0       	ldi	r16, 0x00	; 0
    3d0e:	20 e0       	ldi	r18, 0x00	; 0
    3d10:	30 e0       	ldi	r19, 0x00	; 0
    3d12:	a9 01       	movw	r20, r18
    3d14:	60 e0       	ldi	r22, 0x00	; 0
    3d16:	70 e0       	ldi	r23, 0x00	; 0
    3d18:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <xQueueGenericSend>
	
	for(;;)
	{
		if(xSemaphoreTake(semaphore_mutex, portMAX_DELAY)){
    3d1c:	4f ef       	ldi	r20, 0xFF	; 255
    3d1e:	5f ef       	ldi	r21, 0xFF	; 255
    3d20:	ba 01       	movw	r22, r20
    3d22:	80 91 f3 15 	lds	r24, 0x15F3	; 0x8015f3 <semaphore_mutex>
    3d26:	90 91 f4 15 	lds	r25, 0x15F4	; 0x8015f4 <semaphore_mutex+0x1>
    3d2a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <xQueueSemaphoreTake>
    3d2e:	88 23       	and	r24, r24
    3d30:	a9 f3       	breq	.-22     	; 0x3d1c <WindowController_handler_task+0x24>
			rc_servo_setPosition(0, configuration_get_windows_data());
    3d32:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <configuration_get_windows_data>
    3d36:	68 2f       	mov	r22, r24
    3d38:	80 e0       	ldi	r24, 0x00	; 0
    3d3a:	d5 d7       	rcall	.+4010   	; 0x4ce6 <rc_servo_setPosition>
			percent = configuration_get_windows_data();
    3d3c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <configuration_get_windows_data>
    3d40:	80 93 f5 15 	sts	0x15F5, r24	; 0x8015f5 <percent>
			xSemaphoreGive(semaphore_mutex);
    3d44:	00 e0       	ldi	r16, 0x00	; 0
    3d46:	20 e0       	ldi	r18, 0x00	; 0
    3d48:	30 e0       	ldi	r19, 0x00	; 0
    3d4a:	a9 01       	movw	r20, r18
    3d4c:	60 e0       	ldi	r22, 0x00	; 0
    3d4e:	70 e0       	ldi	r23, 0x00	; 0
    3d50:	80 91 f3 15 	lds	r24, 0x15F3	; 0x8015f3 <semaphore_mutex>
    3d54:	90 91 f4 15 	lds	r25, 0x15F4	; 0x8015f4 <semaphore_mutex+0x1>
    3d58:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <xQueueGenericSend>
    3d5c:	df cf       	rjmp	.-66     	; 0x3d1c <WindowController_handler_task+0x24>

00003d5e <WindowController_handler_initialise>:
int8_t percent = 0;
SemaphoreHandle_t semaphore_mutex = NULL;

void WindowController_handler_task( void *pvParameters );

void WindowController_handler_initialise(UBaseType_t WindowController_task_priority){
    3d5e:	ef 92       	push	r14
    3d60:	ff 92       	push	r15
    3d62:	0f 93       	push	r16
	
	xTaskCreate(
    3d64:	e1 2c       	mov	r14, r1
    3d66:	f1 2c       	mov	r15, r1
    3d68:	08 2f       	mov	r16, r24
    3d6a:	20 e0       	ldi	r18, 0x00	; 0
    3d6c:	30 e0       	ldi	r19, 0x00	; 0
    3d6e:	40 ec       	ldi	r20, 0xC0	; 192
    3d70:	50 e0       	ldi	r21, 0x00	; 0
    3d72:	64 e9       	ldi	r22, 0x94	; 148
    3d74:	73 e0       	ldi	r23, 0x03	; 3
    3d76:	8c e7       	ldi	r24, 0x7C	; 124
    3d78:	9e e1       	ldi	r25, 0x1E	; 30
    3d7a:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <xTaskCreate>
	,  "WindowControllerHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  WindowController_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3d7e:	0f 91       	pop	r16
    3d80:	ff 90       	pop	r15
    3d82:	ef 90       	pop	r14
    3d84:	08 95       	ret

00003d86 <create_semaphores>:
void hih8120_handler_initialise(UBaseType_t hih8120_handler_task_priority);
// Prototype for Application handler
void Application_handler_initialise(UBaseType_t Application_task_priority);

void create_semaphores(void)
{
    3d86:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    3d88:	80 91 c7 17 	lds	r24, 0x17C7	; 0x8017c7 <xTestSemaphore>
    3d8c:	90 91 c8 17 	lds	r25, 0x17C8	; 0x8017c8 <xTestSemaphore+0x1>
    3d90:	89 2b       	or	r24, r25
    3d92:	89 f4       	brne	.+34     	; 0x3db6 <create_semaphores+0x30>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    3d94:	81 e0       	ldi	r24, 0x01	; 1
    3d96:	0e 94 80 09 	call	0x1300	; 0x1300 <xQueueCreateMutex>
    3d9a:	90 93 c8 17 	sts	0x17C8, r25	; 0x8017c8 <xTestSemaphore+0x1>
    3d9e:	80 93 c7 17 	sts	0x17C7, r24	; 0x8017c7 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    3da2:	00 97       	sbiw	r24, 0x00	; 0
    3da4:	41 f0       	breq	.+16     	; 0x3db6 <create_semaphores+0x30>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    3da6:	00 e0       	ldi	r16, 0x00	; 0
    3da8:	20 e0       	ldi	r18, 0x00	; 0
    3daa:	30 e0       	ldi	r19, 0x00	; 0
    3dac:	a9 01       	movw	r20, r18
    3dae:	60 e0       	ldi	r22, 0x00	; 0
    3db0:	70 e0       	ldi	r23, 0x00	; 0
    3db2:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <xQueueGenericSend>
		}
	}
}
    3db6:	0f 91       	pop	r16
    3db8:	08 95       	ret

00003dba <main>:
/*-----------------------------------------------------------*/
int main(void)
{
	// Must be done as the very first thing!!
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3dba:	80 e0       	ldi	r24, 0x00	; 0
    3dbc:	0e 94 5f 2a 	call	0x54be	; 0x54be <stdio_initialise>
	// Let's create some semaphores
	create_semaphores();
    3dc0:	e2 df       	rcall	.-60     	; 0x3d86 <create_semaphores>
	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(6); // Priority 5 for internal task
    3dc2:	86 e0       	ldi	r24, 0x06	; 6
    3dc4:	0e 94 66 2b 	call	0x56cc	; 0x56cc <status_leds_initialise>
	//Initialize Application
	Application_handler_initialise(5);
    3dc8:	85 e0       	ldi	r24, 0x05	; 5
    3dca:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <Application_handler_initialise>
	//initialize CO2Sensor
	mh_z19_initialise(ser_USART3);
    3dce:	83 e0       	ldi	r24, 0x03	; 3
    3dd0:	20 d7       	rcall	.+3648   	; 0x4c12 <mh_z19_initialise>
	//create CO2 task
	CO2Sensor_handler_initialise(4);
    3dd2:	84 e0       	ldi	r24, 0x04	; 4
    3dd4:	0e 94 06 02 	call	0x40c	; 0x40c <CO2Sensor_handler_initialise>
	//Create humidity temperature task and start with priority 3
	hih8120_handler_initialise(3);
    3dd8:	83 e0       	ldi	r24, 0x03	; 3
	//initialize rc_servo
	rc_servo_initialise();
    3dda:	17 df       	rcall	.-466    	; 0x3c0a <hih8120_handler_initialise>
    3ddc:	9c d7       	rcall	.+3896   	; 0x4d16 <rc_servo_initialise>
	// Initialise the LoRaWAN driver with down-link buffer
	downLinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    3dde:	41 e0       	ldi	r20, 0x01	; 1
    3de0:	60 e0       	ldi	r22, 0x00	; 0
    3de2:	70 e0       	ldi	r23, 0x00	; 0
    3de4:	8c e2       	ldi	r24, 0x2C	; 44
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	0e 94 66 0c 	call	0x18cc	; 0x18cc <xStreamBufferGenericCreate>
    3dec:	90 93 c6 17 	sts	0x17C6, r25	; 0x8017c6 <downLinkMessageBufferHandle+0x1>
    3df0:	80 93 c5 17 	sts	0x17C5, r24	; 0x8017c5 <downLinkMessageBufferHandle>
	lora_driver_initialise(1, downLinkMessageBufferHandle);
    3df4:	bc 01       	movw	r22, r24
    3df6:	81 e0       	ldi	r24, 0x01	; 1
	// Create LoRaWAN task and start it up with priority 2
	UpLinkHandler_lora_handler_initialise(2);
    3df8:	65 d3       	rcall	.+1738   	; 0x44c4 <lora_driver_initialise>
    3dfa:	82 e0       	ldi	r24, 0x02	; 2
    3dfc:	7f d1       	rcall	.+766    	; 0x40fc <UpLinkHandler_lora_handler_initialise>
	//Create LoRaWAN task and start with priority 1
	DownLinkHandler_lora_handler_initialise(1,downLinkMessageBufferHandle);
    3dfe:	60 91 c5 17 	lds	r22, 0x17C5	; 0x8017c5 <downLinkMessageBufferHandle>
    3e02:	70 91 c6 17 	lds	r23, 0x17C6	; 0x8017c6 <downLinkMessageBufferHandle+0x1>
    3e06:	81 e0       	ldi	r24, 0x01	; 1
    3e08:	0e 94 06 03 	call	0x60c	; 0x60c <DownLinkHandler_lora_handler_initialise>
	//Create windowController and start it up with priority 3
	WindowController_handler_initialise(1);
    3e0c:	81 e0       	ldi	r24, 0x01	; 1
    3e0e:	a7 df       	rcall	.-178    	; 0x3d5e <WindowController_handler_initialise>
	
	printf("Program Started!!\n");
    3e10:	89 ea       	ldi	r24, 0xA9	; 169
    3e12:	93 e0       	ldi	r25, 0x03	; 3
    3e14:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <puts>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    3e18:	0e 94 b8 10 	call	0x2170	; 0x2170 <vTaskStartScheduler>
    3e1c:	ff cf       	rjmp	.-2      	; 0x3e1c <main+0x62>

00003e1e <SensorDataPackageHandler_SetCO2>:
int16_t tempIn16 = 0.0;
uint16_t co2_ppmIn16 = 0.0;
static lora_driver_payload_t _uplink_payload;

void SensorDataPackageHandler_SetCO2(uint16_t co2){
	co2_ppmIn16 = co2;
    3e1e:	90 93 0d 16 	sts	0x160D, r25	; 0x80160d <co2_ppmIn16+0x1>
    3e22:	80 93 0c 16 	sts	0x160C, r24	; 0x80160c <co2_ppmIn16>
    3e26:	08 95       	ret

00003e28 <SensorDataPackageHandler_SetHumidity>:
}

void SensorDataPackageHandler_SetHumidity(uint16_t humidity){
	humIn16 = humidity;
    3e28:	90 93 11 16 	sts	0x1611, r25	; 0x801611 <humIn16+0x1>
    3e2c:	80 93 10 16 	sts	0x1610, r24	; 0x801610 <humIn16>
    3e30:	08 95       	ret

00003e32 <SensorDataPackageHandler_SetTemperature>:
}

void SensorDataPackageHandler_SetTemperature(int16_t temperature){
	tempIn16 = temperature;
    3e32:	90 93 0f 16 	sts	0x160F, r25	; 0x80160f <tempIn16+0x1>
    3e36:	80 93 0e 16 	sts	0x160E, r24	; 0x80160e <tempIn16>
    3e3a:	08 95       	ret

00003e3c <SensorDataPackageHandler_getLoRaPayload>:
}

lora_driver_payload_t SensorDataPackageHandler_getLoRaPayload(){
    3e3c:	cf 93       	push	r28
    3e3e:	df 93       	push	r29
    3e40:	ec 01       	movw	r28, r24
	printf("STARTEDSensorDataPackageHandler\n");
    3e42:	8b eb       	ldi	r24, 0xBB	; 187
    3e44:	93 e0       	ldi	r25, 0x03	; 3
    3e46:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <puts>
	printf("and this is the changed hum %u\n", humIn16);
    3e4a:	80 91 11 16 	lds	r24, 0x1611	; 0x801611 <humIn16+0x1>
    3e4e:	8f 93       	push	r24
    3e50:	80 91 10 16 	lds	r24, 0x1610	; 0x801610 <humIn16>
    3e54:	8f 93       	push	r24
    3e56:	8b ed       	ldi	r24, 0xDB	; 219
    3e58:	93 e0       	ldi	r25, 0x03	; 3
    3e5a:	9f 93       	push	r25
    3e5c:	8f 93       	push	r24
    3e5e:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
	printf("and also the changed temp %u\n", tempIn16);
    3e62:	80 91 0f 16 	lds	r24, 0x160F	; 0x80160f <tempIn16+0x1>
    3e66:	8f 93       	push	r24
    3e68:	80 91 0e 16 	lds	r24, 0x160E	; 0x80160e <tempIn16>
    3e6c:	8f 93       	push	r24
    3e6e:	8b ef       	ldi	r24, 0xFB	; 251
    3e70:	93 e0       	ldi	r25, 0x03	; 3
    3e72:	9f 93       	push	r25
    3e74:	8f 93       	push	r24
    3e76:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
	printf("and also the changed CO2 %u\n", co2_ppmIn16);
    3e7a:	80 91 0d 16 	lds	r24, 0x160D	; 0x80160d <co2_ppmIn16+0x1>
    3e7e:	8f 93       	push	r24
    3e80:	80 91 0c 16 	lds	r24, 0x160C	; 0x80160c <co2_ppmIn16>
    3e84:	8f 93       	push	r24
    3e86:	89 e1       	ldi	r24, 0x19	; 25
    3e88:	94 e0       	ldi	r25, 0x04	; 4
    3e8a:	9f 93       	push	r25
    3e8c:	8f 93       	push	r24
    3e8e:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
	
	_uplink_payload.len = 6;
    3e92:	e6 ef       	ldi	r30, 0xF6	; 246
    3e94:	f5 e1       	ldi	r31, 0x15	; 21
    3e96:	86 e0       	ldi	r24, 0x06	; 6
    3e98:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.portNo = 2;
    3e9a:	82 e0       	ldi	r24, 0x02	; 2
    3e9c:	80 83       	st	Z, r24
	_uplink_payload.bytes[0] = humIn16 >> 8;
    3e9e:	80 91 10 16 	lds	r24, 0x1610	; 0x801610 <humIn16>
    3ea2:	90 91 11 16 	lds	r25, 0x1611	; 0x801611 <humIn16+0x1>
    3ea6:	92 83       	std	Z+2, r25	; 0x02
	_uplink_payload.bytes[1] = humIn16 & 0xFF;
    3ea8:	83 83       	std	Z+3, r24	; 0x03
	_uplink_payload.bytes[2] = tempIn16 >> 8;
    3eaa:	80 91 0e 16 	lds	r24, 0x160E	; 0x80160e <tempIn16>
    3eae:	90 91 0f 16 	lds	r25, 0x160F	; 0x80160f <tempIn16+0x1>
    3eb2:	94 83       	std	Z+4, r25	; 0x04
	_uplink_payload.bytes[3] = tempIn16 & 0xFF;
    3eb4:	85 83       	std	Z+5, r24	; 0x05
	_uplink_payload.bytes[4] = co2_ppmIn16 >> 8;
    3eb6:	80 91 0c 16 	lds	r24, 0x160C	; 0x80160c <co2_ppmIn16>
    3eba:	90 91 0d 16 	lds	r25, 0x160D	; 0x80160d <co2_ppmIn16+0x1>
    3ebe:	96 83       	std	Z+6, r25	; 0x06
	_uplink_payload.bytes[5] = co2_ppmIn16 & 0xFF;
    3ec0:	87 83       	std	Z+7, r24	; 0x07
	return _uplink_payload;
    3ec2:	86 e1       	ldi	r24, 0x16	; 22
    3ec4:	de 01       	movw	r26, r28
    3ec6:	01 90       	ld	r0, Z+
    3ec8:	0d 92       	st	X+, r0
    3eca:	8a 95       	dec	r24
    3ecc:	e1 f7       	brne	.-8      	; 0x3ec6 <SensorDataPackageHandler_getLoRaPayload+0x8a>
    3ece:	8d b7       	in	r24, 0x3d	; 61
    3ed0:	9e b7       	in	r25, 0x3e	; 62
    3ed2:	0c 96       	adiw	r24, 0x0c	; 12
    3ed4:	0f b6       	in	r0, 0x3f	; 63
    3ed6:	f8 94       	cli
    3ed8:	9e bf       	out	0x3e, r25	; 62
    3eda:	0f be       	out	0x3f, r0	; 63
    3edc:	8d bf       	out	0x3d, r24	; 61
    3ede:	ce 01       	movw	r24, r28
    3ee0:	df 91       	pop	r29
    3ee2:	cf 91       	pop	r28
    3ee4:	08 95       	ret

00003ee6 <_lora_setup>:
	,  UpLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    3ee6:	cf 93       	push	r28
    3ee8:	df 93       	push	r29
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3eea:	81 e0       	ldi	r24, 0x01	; 1
    3eec:	0e 94 b4 2b 	call	0x5768	; 0x5768 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3ef0:	37 d3       	rcall	.+1646   	; 0x4560 <lora_driver_rn2483FactoryReset>
    3ef2:	b3 d5       	rcall	.+2918   	; 0x4a5a <lora_driver_mapReturnCodeToText>
    3ef4:	9f 93       	push	r25
    3ef6:	8f 93       	push	r24
    3ef8:	86 e3       	ldi	r24, 0x36	; 54
    3efa:	94 e0       	ldi	r25, 0x04	; 4
    3efc:	9f 93       	push	r25
    3efe:	8f 93       	push	r24
    3f00:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3f04:	ab d4       	rcall	.+2390   	; 0x485c <lora_driver_configureToEu868>
    3f06:	a9 d5       	rcall	.+2898   	; 0x4a5a <lora_driver_mapReturnCodeToText>
    3f08:	9f 93       	push	r25
    3f0a:	8f 93       	push	r24
    3f0c:	89 e4       	ldi	r24, 0x49	; 73
    3f0e:	94 e0       	ldi	r25, 0x04	; 4
    3f10:	9f 93       	push	r25
    3f12:	8f 93       	push	r24
    3f14:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
    3f18:	88 e2       	ldi	r24, 0x28	; 40

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3f1a:	96 e1       	ldi	r25, 0x16	; 22
    3f1c:	33 d3       	rcall	.+1638   	; 0x4584 <lora_driver_getRn2483Hweui>
    3f1e:	9d d5       	rcall	.+2874   	; 0x4a5a <lora_driver_mapReturnCodeToText>
    3f20:	c8 e2       	ldi	r28, 0x28	; 40
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3f22:	d6 e1       	ldi	r29, 0x16	; 22
    3f24:	df 93       	push	r29
    3f26:	cf 93       	push	r28
    3f28:	9f 93       	push	r25
    3f2a:	8f 93       	push	r24
    3f2c:	82 e6       	ldi	r24, 0x62	; 98
    3f2e:	94 e0       	ldi	r25, 0x04	; 4
    3f30:	9f 93       	push	r25
    3f32:	8f 93       	push	r24
    3f34:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
    3f38:	ce 01       	movw	r24, r28

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3f3a:	40 d3       	rcall	.+1664   	; 0x45bc <lora_driver_setDeviceIdentifier>
    3f3c:	8e d5       	rcall	.+2844   	; 0x4a5a <lora_driver_mapReturnCodeToText>
    3f3e:	9f 93       	push	r25
    3f40:	8f 93       	push	r24
    3f42:	df 93       	push	r29
    3f44:	cf 93       	push	r28
    3f46:	86 e7       	ldi	r24, 0x76	; 118
    3f48:	94 e0       	ldi	r25, 0x04	; 4
    3f4a:	9f 93       	push	r25
    3f4c:	8f 93       	push	r24
    3f4e:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
    3f52:	ae 01       	movw	r20, r28

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3f54:	6b e8       	ldi	r22, 0x8B	; 139
    3f56:	74 e0       	ldi	r23, 0x04	; 4
    3f58:	8c ea       	ldi	r24, 0xAC	; 172
    3f5a:	94 e0       	ldi	r25, 0x04	; 4
    3f5c:	5d d5       	rcall	.+2746   	; 0x4a18 <lora_driver_setOtaaIdentity>
    3f5e:	7d d5       	rcall	.+2810   	; 0x4a5a <lora_driver_mapReturnCodeToText>
    3f60:	9f 93       	push	r25
    3f62:	8f 93       	push	r24
    3f64:	df 93       	push	r29
    3f66:	cf 93       	push	r28
    3f68:	8b e8       	ldi	r24, 0x8B	; 139
    3f6a:	94 e0       	ldi	r25, 0x04	; 4
    3f6c:	9f 93       	push	r25
    3f6e:	8f 93       	push	r24
    3f70:	8c ea       	ldi	r24, 0xAC	; 172
    3f72:	94 e0       	ldi	r25, 0x04	; 4
    3f74:	9f 93       	push	r25
    3f76:	8f 93       	push	r24
    3f78:	8d eb       	ldi	r24, 0xBD	; 189
    3f7a:	94 e0       	ldi	r25, 0x04	; 4
    3f7c:	9f 93       	push	r25
    3f7e:	8f 93       	push	r24
    3f80:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
    3f84:	4e d3       	rcall	.+1692   	; 0x4622 <lora_driver_saveMac>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3f86:	69 d5       	rcall	.+2770   	; 0x4a5a <lora_driver_mapReturnCodeToText>
    3f88:	9f 93       	push	r25
    3f8a:	8f 93       	push	r24
    3f8c:	83 ef       	ldi	r24, 0xF3	; 243
    3f8e:	94 e0       	ldi	r25, 0x04	; 4
    3f90:	9f 93       	push	r25
    3f92:	8f 93       	push	r24
    3f94:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
    3f98:	8d b7       	in	r24, 0x3d	; 61

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3f9a:	9e b7       	in	r25, 0x3e	; 62
    3f9c:	82 96       	adiw	r24, 0x22	; 34
    3f9e:	0f b6       	in	r0, 0x3f	; 63
    3fa0:	f8 94       	cli
    3fa2:	9e bf       	out	0x3e, r25	; 62
    3fa4:	0f be       	out	0x3f, r0	; 63
    3fa6:	8d bf       	out	0x3d, r24	; 61
    3fa8:	81 e0       	ldi	r24, 0x01	; 1
    3faa:	35 d4       	rcall	.+2154   	; 0x4816 <lora_driver_setAdaptiveDataRate>
    3fac:	56 d5       	rcall	.+2732   	; 0x4a5a <lora_driver_mapReturnCodeToText>
    3fae:	9f 93       	push	r25
    3fb0:	8f 93       	push	r24
    3fb2:	82 e0       	ldi	r24, 0x02	; 2
    3fb4:	95 e0       	ldi	r25, 0x05	; 5
    3fb6:	9f 93       	push	r25
    3fb8:	8f 93       	push	r24
    3fba:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
    3fbe:	84 ef       	ldi	r24, 0xF4	; 244

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3fc0:	91 e0       	ldi	r25, 0x01	; 1
    3fc2:	34 d4       	rcall	.+2152   	; 0x482c <lora_driver_setReceiveDelay>
    3fc4:	4a d5       	rcall	.+2708   	; 0x4a5a <lora_driver_mapReturnCodeToText>
    3fc6:	9f 93       	push	r25
    3fc8:	8f 93       	push	r24
    3fca:	81 e0       	ldi	r24, 0x01	; 1
    3fcc:	8f 93       	push	r24
    3fce:	84 ef       	ldi	r24, 0xF4	; 244
    3fd0:	8f 93       	push	r24
    3fd2:	83 e2       	ldi	r24, 0x23	; 35
    3fd4:	95 e0       	ldi	r25, 0x05	; 5
    3fd6:	9f 93       	push	r25
    3fd8:	8f 93       	push	r24
    3fda:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
    3fde:	8d b7       	in	r24, 0x3d	; 61
    3fe0:	9e b7       	in	r25, 0x3e	; 62
    3fe2:	0a 96       	adiw	r24, 0x0a	; 10
    3fe4:	0f b6       	in	r0, 0x3f	; 63
    3fe6:	f8 94       	cli
    3fe8:	9e bf       	out	0x3e, r25	; 62
    3fea:	0f be       	out	0x3f, r0	; 63
    3fec:	8d bf       	out	0x3d, r24	; 61
    3fee:	ca e0       	ldi	r28, 0x0A	; 10

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3ff2:	1d d3       	rcall	.+1594   	; 0x462e <lora_driver_join>
    3ff4:	d8 2f       	mov	r29, r24
    3ff6:	31 d5       	rcall	.+2658   	; 0x4a5a <lora_driver_mapReturnCodeToText>
    3ff8:	9f 93       	push	r25
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3ffa:	8f 93       	push	r24
    3ffc:	1f 92       	push	r1
    3ffe:	cf 93       	push	r28
    4000:	83 e4       	ldi	r24, 0x43	; 67
    4002:	95 e0       	ldi	r25, 0x05	; 5
    4004:	9f 93       	push	r25
    4006:	8f 93       	push	r24
    4008:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
    400c:	0f 90       	pop	r0
    400e:	0f 90       	pop	r0
    4010:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    4012:	0f 90       	pop	r0
    4014:	0f 90       	pop	r0
    4016:	0f 90       	pop	r0
    4018:	d8 30       	cpi	r29, 0x08	; 8
    401a:	59 f0       	breq	.+22     	; 0x4032 <_lora_setup+0x14c>
    401c:	80 e0       	ldi	r24, 0x00	; 0
    401e:	0e 94 18 2c 	call	0x5830	; 0x5830 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    4022:	66 e3       	ldi	r22, 0x36	; 54
    4024:	71 e0       	ldi	r23, 0x01	; 1
    4026:	80 e0       	ldi	r24, 0x00	; 0
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	0e 94 71 13 	call	0x26e2	; 0x26e2 <vTaskDelay>
    402e:	c1 50       	subi	r28, 0x01	; 1
    4030:	f9 f6       	brne	.-66     	; 0x3ff0 <_lora_setup+0x10a>
    4032:	d8 30       	cpi	r29, 0x08	; 8
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    4034:	21 f4       	brne	.+8      	; 0x403e <_lora_setup+0x158>
    4036:	81 e0       	ldi	r24, 0x01	; 1

	if (rc == LORA_ACCEPTED)
    4038:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    403c:	09 c0       	rjmp	.+18     	; 0x4050 <_lora_setup+0x16a>
    403e:	81 e0       	ldi	r24, 0x01	; 1
    4040:	0e 94 09 2c 	call	0x5812	; 0x5812 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    4044:	80 e0       	ldi	r24, 0x00	; 0
    4046:	0e 94 d7 2b 	call	0x57ae	; 0x57ae <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    404a:	0e 94 c4 06 	call	0xd88	; 0xd88 <vPortYield>
    404e:	fd cf       	rjmp	.-6      	; 0x404a <_lora_setup+0x164>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    4050:	df 91       	pop	r29
    4052:	cf 91       	pop	r28
    4054:	08 95       	ret

00004056 <UpLinkHandler_lora_handler_task>:
		}
	}
}
    4056:	cf 93       	push	r28
    4058:	df 93       	push	r29
    405a:	cd b7       	in	r28, 0x3d	; 61

/*-----------------------------------------------------------*/
void UpLinkHandler_lora_handler_task( void *pvParameters )
{
    405c:	de b7       	in	r29, 0x3e	; 62
    405e:	6a 97       	sbiw	r28, 0x1a	; 26
    4060:	0f b6       	in	r0, 0x3f	; 63
    4062:	f8 94       	cli
    4064:	de bf       	out	0x3e, r29	; 62
    4066:	0f be       	out	0x3f, r0	; 63
    4068:	cd bf       	out	0x3d, r28	; 61
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    406a:	81 e0       	ldi	r24, 0x01	; 1
    406c:	6b d2       	rcall	.+1238   	; 0x4544 <lora_driver_resetRn2483>
	vTaskDelay(2);
    406e:	62 e0       	ldi	r22, 0x02	; 2
    4070:	70 e0       	ldi	r23, 0x00	; 0
    4072:	80 e0       	ldi	r24, 0x00	; 0
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	0e 94 71 13 	call	0x26e2	; 0x26e2 <vTaskDelay>
	lora_driver_resetRn2483(0);
    407a:	80 e0       	ldi	r24, 0x00	; 0
    407c:	63 d2       	rcall	.+1222   	; 0x4544 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    407e:	66 e9       	ldi	r22, 0x96	; 150
    4080:	70 e0       	ldi	r23, 0x00	; 0
    4082:	80 e0       	ldi	r24, 0x00	; 0
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	0e 94 71 13 	call	0x26e2	; 0x26e2 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    408a:	15 d2       	rcall	.+1066   	; 0x44b6 <lora_driver_flushBuffers>

	_lora_setup();
    408c:	2c df       	rcall	.-424    	; 0x3ee6 <_lora_setup>
    408e:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xTaskGetTickCount>


	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    4092:	69 83       	std	Y+1, r22	; 0x01
    4094:	7a 83       	std	Y+2, r23	; 0x02
    4096:	8b 83       	std	Y+3, r24	; 0x03
    4098:	9c 83       	std	Y+4, r25	; 0x04
    409a:	48 ea       	ldi	r20, 0xA8	; 168
	
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    409c:	58 e4       	ldi	r21, 0x48	; 72
    409e:	60 e0       	ldi	r22, 0x00	; 0
    40a0:	70 e0       	ldi	r23, 0x00	; 0
    40a2:	ce 01       	movw	r24, r28
    40a4:	01 96       	adiw	r24, 0x01	; 1
    40a6:	0e 94 0c 13 	call	0x2618	; 0x2618 <xTaskDelayUntil>
    40aa:	83 e6       	ldi	r24, 0x63	; 99
		printf("startLoraTask");
    40ac:	95 e0       	ldi	r25, 0x05	; 5
    40ae:	9f 93       	push	r25
    40b0:	8f 93       	push	r24
    40b2:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
		_uplink_payload = SensorDataPackageHandler_getLoRaPayload();
    40b6:	ce 01       	movw	r24, r28
    40b8:	05 96       	adiw	r24, 0x05	; 5
    40ba:	c0 de       	rcall	.-640    	; 0x3e3c <SensorDataPackageHandler_getLoRaPayload>
    40bc:	86 e1       	ldi	r24, 0x16	; 22
    40be:	fe 01       	movw	r30, r28
    40c0:	35 96       	adiw	r30, 0x05	; 5
    40c2:	a2 e1       	ldi	r26, 0x12	; 18
    40c4:	b6 e1       	ldi	r27, 0x16	; 22
    40c6:	01 90       	ld	r0, Z+
    40c8:	0d 92       	st	X+, r0
    40ca:	8a 95       	dec	r24
    40cc:	e1 f7       	brne	.-8      	; 0x40c6 <UpLinkHandler_lora_handler_task+0x70>
    40ce:	83 e0       	ldi	r24, 0x03	; 3
		status_leds_shortPuls(led_ST4);  // OPTIONAL
    40d0:	0e 94 2a 2c 	call	0x5854	; 0x5854 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    40d4:	62 e1       	ldi	r22, 0x12	; 18
    40d6:	76 e1       	ldi	r23, 0x16	; 22
    40d8:	80 e0       	ldi	r24, 0x00	; 0
    40da:	d2 d2       	rcall	.+1444   	; 0x4680 <lora_driver_sendUploadMessage>
    40dc:	be d4       	rcall	.+2428   	; 0x4a5a <lora_driver_mapReturnCodeToText>
    40de:	9f 93       	push	r25
    40e0:	8f 93       	push	r24
    40e2:	81 e7       	ldi	r24, 0x71	; 113
    40e4:	95 e0       	ldi	r25, 0x05	; 5
    40e6:	9f 93       	push	r25
    40e8:	8f 93       	push	r24
    40ea:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <printf>
    40ee:	0f 90       	pop	r0
    40f0:	0f 90       	pop	r0
    40f2:	0f 90       	pop	r0
    40f4:	0f 90       	pop	r0
    40f6:	0f 90       	pop	r0
    40f8:	0f 90       	pop	r0
    40fa:	cf cf       	rjmp	.-98     	; 0x409a <UpLinkHandler_lora_handler_task+0x44>

000040fc <UpLinkHandler_lora_handler_initialise>:
    40fc:	ef 92       	push	r14
    40fe:	ff 92       	push	r15

static lora_driver_payload_t _uplink_payload;


void UpLinkHandler_lora_handler_initialise(UBaseType_t UpLinkHandler_lora_handler_task_priority)
{
    4100:	0f 93       	push	r16
	xTaskCreate(
    4102:	e1 2c       	mov	r14, r1
    4104:	f1 2c       	mov	r15, r1
    4106:	08 2f       	mov	r16, r24
    4108:	20 e0       	ldi	r18, 0x00	; 0
    410a:	30 e0       	ldi	r19, 0x00	; 0
    410c:	48 e8       	ldi	r20, 0x88	; 136
    410e:	51 e0       	ldi	r21, 0x01	; 1
    4110:	66 e8       	ldi	r22, 0x86	; 134
    4112:	75 e0       	ldi	r23, 0x05	; 5
    4114:	8b e2       	ldi	r24, 0x2B	; 43
    4116:	90 e2       	ldi	r25, 0x20	; 32
    4118:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  UpLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    411c:	0f 91       	pop	r16
    411e:	ff 90       	pop	r15
    4120:	ef 90       	pop	r14
    4122:	08 95       	ret

00004124 <_hihTwiCallback>:
    4124:	65 30       	cpi	r22, 0x05	; 5
    4126:	f1 f4       	brne	.+60     	; 0x4164 <_hihTwiCallback+0x40>
    4128:	fa 01       	movw	r30, r20
    412a:	80 81       	ld	r24, Z
    412c:	8f 73       	andi	r24, 0x3F	; 63
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	98 2f       	mov	r25, r24
    4132:	88 27       	eor	r24, r24
    4134:	21 81       	ldd	r18, Z+1	; 0x01
    4136:	82 2b       	or	r24, r18
    4138:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    413c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4140:	82 81       	ldd	r24, Z+2	; 0x02
    4142:	f0 e4       	ldi	r31, 0x40	; 64
    4144:	8f 9f       	mul	r24, r31
    4146:	c0 01       	movw	r24, r0
    4148:	11 24       	eor	r1, r1
    414a:	fa 01       	movw	r30, r20
    414c:	23 81       	ldd	r18, Z+3	; 0x03
    414e:	26 95       	lsr	r18
    4150:	26 95       	lsr	r18
    4152:	82 2b       	or	r24, r18
    4154:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4158:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    415c:	81 e0       	ldi	r24, 0x01	; 1
    415e:	80 93 8c 16 	sts	0x168C, r24	; 0x80168c <_measuringIsReady>
    4162:	08 95       	ret
    4164:	64 30       	cpi	r22, 0x04	; 4
    4166:	51 f0       	breq	.+20     	; 0x417c <_hihTwiCallback+0x58>
    4168:	80 e0       	ldi	r24, 0x00	; 0
    416a:	90 e4       	ldi	r25, 0x40	; 64
    416c:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4170:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4174:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4178:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    417c:	08 95       	ret

0000417e <hih8120_initialise>:
    417e:	0f 93       	push	r16
    4180:	1f 93       	push	r17
    4182:	02 e9       	ldi	r16, 0x92	; 146
    4184:	10 e2       	ldi	r17, 0x20	; 32
    4186:	20 e0       	ldi	r18, 0x00	; 0
    4188:	34 e2       	ldi	r19, 0x24	; 36
    418a:	44 ef       	ldi	r20, 0xF4	; 244
    418c:	50 e0       	ldi	r21, 0x00	; 0
    418e:	60 e0       	ldi	r22, 0x00	; 0
    4190:	87 e2       	ldi	r24, 0x27	; 39
    4192:	0e 94 4d 2c 	call	0x589a	; 0x589a <twiCreate>
    4196:	90 93 8e 16 	sts	0x168E, r25	; 0x80168e <_hih8120Handler+0x1>
    419a:	80 93 8d 16 	sts	0x168D, r24	; 0x80168d <_hih8120Handler>
    419e:	21 e0       	ldi	r18, 0x01	; 1
    41a0:	89 2b       	or	r24, r25
    41a2:	09 f0       	breq	.+2      	; 0x41a6 <hih8120_initialise+0x28>
    41a4:	20 e0       	ldi	r18, 0x00	; 0
    41a6:	82 2f       	mov	r24, r18
    41a8:	1f 91       	pop	r17
    41aa:	0f 91       	pop	r16
    41ac:	08 95       	ret

000041ae <hih8120_wakeup>:
    41ae:	80 91 8d 16 	lds	r24, 0x168D	; 0x80168d <_hih8120Handler>
    41b2:	90 91 8e 16 	lds	r25, 0x168E	; 0x80168e <_hih8120Handler+0x1>
    41b6:	00 97       	sbiw	r24, 0x00	; 0
    41b8:	59 f0       	breq	.+22     	; 0x41d0 <hih8120_wakeup+0x22>
    41ba:	40 e0       	ldi	r20, 0x00	; 0
    41bc:	60 e0       	ldi	r22, 0x00	; 0
    41be:	70 e0       	ldi	r23, 0x00	; 0
    41c0:	0e 94 9e 2c 	call	0x593c	; 0x593c <twiTransmit>
    41c4:	84 30       	cpi	r24, 0x04	; 4
    41c6:	31 f4       	brne	.+12     	; 0x41d4 <hih8120_wakeup+0x26>
    41c8:	10 92 8c 16 	sts	0x168C, r1	; 0x80168c <_measuringIsReady>
    41cc:	80 e0       	ldi	r24, 0x00	; 0
    41ce:	08 95       	ret
    41d0:	82 e0       	ldi	r24, 0x02	; 2
    41d2:	08 95       	ret
    41d4:	83 e0       	ldi	r24, 0x03	; 3
    41d6:	08 95       	ret

000041d8 <hih8120_measure>:
    41d8:	80 91 8d 16 	lds	r24, 0x168D	; 0x80168d <_hih8120Handler>
    41dc:	90 91 8e 16 	lds	r25, 0x168E	; 0x80168e <_hih8120Handler+0x1>
    41e0:	00 97       	sbiw	r24, 0x00	; 0
    41e2:	39 f0       	breq	.+14     	; 0x41f2 <hih8120_measure+0x1a>
    41e4:	64 e0       	ldi	r22, 0x04	; 4
    41e6:	0e 94 ea 2c 	call	0x59d4	; 0x59d4 <twiReceive>
    41ea:	85 30       	cpi	r24, 0x05	; 5
    41ec:	21 f0       	breq	.+8      	; 0x41f6 <hih8120_measure+0x1e>
    41ee:	83 e0       	ldi	r24, 0x03	; 3
    41f0:	08 95       	ret
    41f2:	82 e0       	ldi	r24, 0x02	; 2
    41f4:	08 95       	ret
    41f6:	80 e0       	ldi	r24, 0x00	; 0
    41f8:	08 95       	ret

000041fa <hih8120_getHumidity>:
    41fa:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    41fe:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    4202:	80 e0       	ldi	r24, 0x00	; 0
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <__floatunsisf>
    420a:	20 e0       	ldi	r18, 0x00	; 0
    420c:	30 e0       	ldi	r19, 0x00	; 0
    420e:	48 ec       	ldi	r20, 0xC8	; 200
    4210:	52 e4       	ldi	r21, 0x42	; 66
    4212:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <__mulsf3>
    4216:	20 e0       	ldi	r18, 0x00	; 0
    4218:	38 ef       	ldi	r19, 0xF8	; 248
    421a:	4f e7       	ldi	r20, 0x7F	; 127
    421c:	56 e4       	ldi	r21, 0x46	; 70
    421e:	0c 94 5b 2e 	jmp	0x5cb6	; 0x5cb6 <__divsf3>
    4222:	08 95       	ret

00004224 <hih8120_getHumidityPercent_x10>:
    4224:	ea df       	rcall	.-44     	; 0x41fa <hih8120_getHumidity>
    4226:	20 e0       	ldi	r18, 0x00	; 0
    4228:	30 e0       	ldi	r19, 0x00	; 0
    422a:	40 e2       	ldi	r20, 0x20	; 32
    422c:	51 e4       	ldi	r21, 0x41	; 65
    422e:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <__mulsf3>
    4232:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <__fixunssfsi>
    4236:	cb 01       	movw	r24, r22
    4238:	08 95       	ret

0000423a <hih8120_getTemperature>:
    423a:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    423e:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    4242:	80 e0       	ldi	r24, 0x00	; 0
    4244:	90 e0       	ldi	r25, 0x00	; 0
    4246:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <__floatunsisf>
    424a:	20 e0       	ldi	r18, 0x00	; 0
    424c:	30 e0       	ldi	r19, 0x00	; 0
    424e:	45 e2       	ldi	r20, 0x25	; 37
    4250:	53 e4       	ldi	r21, 0x43	; 67
    4252:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <__mulsf3>
    4256:	20 e0       	ldi	r18, 0x00	; 0
    4258:	38 ef       	ldi	r19, 0xF8	; 248
    425a:	4f e7       	ldi	r20, 0x7F	; 127
    425c:	56 e4       	ldi	r21, 0x46	; 70
    425e:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <__divsf3>
    4262:	20 e0       	ldi	r18, 0x00	; 0
    4264:	30 e0       	ldi	r19, 0x00	; 0
    4266:	40 e2       	ldi	r20, 0x20	; 32
    4268:	52 e4       	ldi	r21, 0x42	; 66
    426a:	0c 94 f6 2d 	jmp	0x5bec	; 0x5bec <__subsf3>
    426e:	08 95       	ret

00004270 <hih8120_getTemperature_x10>:
    4270:	e4 df       	rcall	.-56     	; 0x423a <hih8120_getTemperature>
    4272:	20 e0       	ldi	r18, 0x00	; 0
    4274:	30 e0       	ldi	r19, 0x00	; 0
    4276:	40 e2       	ldi	r20, 0x20	; 32
    4278:	51 e4       	ldi	r21, 0x41	; 65
    427a:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <__mulsf3>
    427e:	0e 94 c3 2e 	call	0x5d86	; 0x5d86 <__fixsfsi>
    4282:	cb 01       	movw	r24, r22
    4284:	08 95       	ret

00004286 <_serialCallBack>:
    4286:	0f 93       	push	r16
    4288:	1f 93       	push	r17
    428a:	cf 93       	push	r28
    428c:	df 93       	push	r29
    428e:	1f 92       	push	r1
    4290:	1f 92       	push	r1
    4292:	cd b7       	in	r28, 0x3d	; 61
    4294:	de b7       	in	r29, 0x3e	; 62
    4296:	8c 01       	movw	r16, r24
    4298:	19 82       	std	Y+1, r1	; 0x01
    429a:	2d c0       	rjmp	.+90     	; 0x42f6 <_serialCallBack+0x70>
    429c:	e0 91 c6 16 	lds	r30, 0x16C6	; 0x8016c6 <rec_buf_inp.2878>
    42a0:	ec 32       	cpi	r30, 0x2C	; 44
    42a2:	50 f4       	brcc	.+20     	; 0x42b8 <_serialCallBack+0x32>
    42a4:	81 e0       	ldi	r24, 0x01	; 1
    42a6:	8e 0f       	add	r24, r30
    42a8:	80 93 c6 16 	sts	0x16C6, r24	; 0x8016c6 <rec_buf_inp.2878>
    42ac:	f0 e0       	ldi	r31, 0x00	; 0
    42ae:	e8 50       	subi	r30, 0x08	; 8
    42b0:	f9 4e       	sbci	r31, 0xE9	; 233
    42b2:	8a 81       	ldd	r24, Y+2	; 0x02
    42b4:	80 83       	st	Z, r24
    42b6:	02 c0       	rjmp	.+4      	; 0x42bc <_serialCallBack+0x36>
    42b8:	10 92 c6 16 	sts	0x16C6, r1	; 0x8016c6 <rec_buf_inp.2878>
    42bc:	8a 81       	ldd	r24, Y+2	; 0x02
    42be:	8a 30       	cpi	r24, 0x0A	; 10
    42c0:	d1 f4       	brne	.+52     	; 0x42f6 <_serialCallBack+0x70>
    42c2:	40 91 c6 16 	lds	r20, 0x16C6	; 0x8016c6 <rec_buf_inp.2878>
    42c6:	50 e0       	ldi	r21, 0x00	; 0
    42c8:	fa 01       	movw	r30, r20
    42ca:	ea 50       	subi	r30, 0x0A	; 10
    42cc:	f9 4e       	sbci	r31, 0xE9	; 233
    42ce:	10 82       	st	Z, r1
    42d0:	41 50       	subi	r20, 0x01	; 1
    42d2:	51 09       	sbc	r21, r1
    42d4:	9e 01       	movw	r18, r28
    42d6:	2f 5f       	subi	r18, 0xFF	; 255
    42d8:	3f 4f       	sbci	r19, 0xFF	; 255
    42da:	68 ef       	ldi	r22, 0xF8	; 248
    42dc:	76 e1       	ldi	r23, 0x16	; 22
    42de:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <_serialReplyBufferHandle>
    42e2:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <_serialReplyBufferHandle+0x1>
    42e6:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <xStreamBufferSendFromISR>
    42ea:	89 81       	ldd	r24, Y+1	; 0x01
    42ec:	81 11       	cpse	r24, r1
    42ee:	0e 94 c4 06 	call	0xd88	; 0xd88 <vPortYield>
    42f2:	10 92 c6 16 	sts	0x16C6, r1	; 0x8016c6 <rec_buf_inp.2878>
    42f6:	be 01       	movw	r22, r28
    42f8:	6e 5f       	subi	r22, 0xFE	; 254
    42fa:	7f 4f       	sbci	r23, 0xFF	; 255
    42fc:	c8 01       	movw	r24, r16
    42fe:	49 d6       	rcall	.+3218   	; 0x4f92 <serial_getByte>
    4300:	88 23       	and	r24, r24
    4302:	61 f2       	breq	.-104    	; 0x429c <_serialCallBack+0x16>
    4304:	0f 90       	pop	r0
    4306:	0f 90       	pop	r0
    4308:	df 91       	pop	r29
    430a:	cf 91       	pop	r28
    430c:	1f 91       	pop	r17
    430e:	0f 91       	pop	r16
    4310:	08 95       	ret

00004312 <_uploadMessage>:
    4312:	0f 93       	push	r16
    4314:	1f 93       	push	r17
    4316:	cf 93       	push	r28
    4318:	df 93       	push	r29
    431a:	8c 01       	movw	r16, r24
    431c:	eb 01       	movw	r28, r22
    431e:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <_serialReplyBufferHandle>
    4322:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <_serialReplyBufferHandle+0x1>
    4326:	0e 94 98 0c 	call	0x1930	; 0x1930 <xStreamBufferReset>
    432a:	b8 01       	movw	r22, r16
    432c:	8f e8       	ldi	r24, 0x8F	; 143
    432e:	96 e1       	ldi	r25, 0x16	; 22
    4330:	0e 94 16 36 	call	0x6c2c	; 0x6c2c <strcpy>
    4334:	20 97       	sbiw	r28, 0x00	; 0
    4336:	79 f0       	breq	.+30     	; 0x4356 <_uploadMessage+0x44>
    4338:	ef e8       	ldi	r30, 0x8F	; 143
    433a:	f6 e1       	ldi	r31, 0x16	; 22
    433c:	01 90       	ld	r0, Z+
    433e:	00 20       	and	r0, r0
    4340:	e9 f7       	brne	.-6      	; 0x433c <_uploadMessage+0x2a>
    4342:	31 97       	sbiw	r30, 0x01	; 1
    4344:	80 e2       	ldi	r24, 0x20	; 32
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	91 83       	std	Z+1, r25	; 0x01
    434a:	80 83       	st	Z, r24
    434c:	be 01       	movw	r22, r28
    434e:	8f e8       	ldi	r24, 0x8F	; 143
    4350:	96 e1       	ldi	r25, 0x16	; 22
    4352:	0e 94 0b 36 	call	0x6c16	; 0x6c16 <strcat>
    4356:	ef e8       	ldi	r30, 0x8F	; 143
    4358:	f6 e1       	ldi	r31, 0x16	; 22
    435a:	df 01       	movw	r26, r30
    435c:	0d 90       	ld	r0, X+
    435e:	00 20       	and	r0, r0
    4360:	e9 f7       	brne	.-6      	; 0x435c <_uploadMessage+0x4a>
    4362:	11 97       	sbiw	r26, 0x01	; 1
    4364:	8d e0       	ldi	r24, 0x0D	; 13
    4366:	9a e0       	ldi	r25, 0x0A	; 10
    4368:	11 96       	adiw	r26, 0x01	; 1
    436a:	9c 93       	st	X, r25
    436c:	8e 93       	st	-X, r24
    436e:	12 96       	adiw	r26, 0x02	; 2
    4370:	1c 92       	st	X, r1
    4372:	01 90       	ld	r0, Z+
    4374:	00 20       	and	r0, r0
    4376:	e9 f7       	brne	.-6      	; 0x4372 <_uploadMessage+0x60>
    4378:	31 97       	sbiw	r30, 0x01	; 1
    437a:	ef 58       	subi	r30, 0x8F	; 143
    437c:	f6 41       	sbci	r31, 0x16	; 22
    437e:	ae 2f       	mov	r26, r30
    4380:	8f e8       	ldi	r24, 0x8F	; 143
    4382:	96 e1       	ldi	r25, 0x16	; 22
    4384:	ac 01       	movw	r20, r24
    4386:	6a 2f       	mov	r22, r26
    4388:	80 91 cb 16 	lds	r24, 0x16CB	; 0x8016cb <_rn2483_serial>
    438c:	90 91 cc 16 	lds	r25, 0x16CC	; 0x8016cc <_rn2483_serial+0x1>
    4390:	ab d5       	rcall	.+2902   	; 0x4ee8 <serial_sendBytes>
    4392:	81 11       	cpse	r24, r1
    4394:	11 c0       	rjmp	.+34     	; 0x43b8 <_uploadMessage+0xa6>
    4396:	08 e2       	ldi	r16, 0x28	; 40
    4398:	15 e0       	ldi	r17, 0x05	; 5
    439a:	20 e0       	ldi	r18, 0x00	; 0
    439c:	30 e0       	ldi	r19, 0x00	; 0
    439e:	4d e2       	ldi	r20, 0x2D	; 45
    43a0:	50 e0       	ldi	r21, 0x00	; 0
    43a2:	62 e5       	ldi	r22, 0x52	; 82
    43a4:	77 e1       	ldi	r23, 0x17	; 23
    43a6:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <_serialReplyBufferHandle>
    43aa:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <_serialReplyBufferHandle+0x1>
    43ae:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <xStreamBufferReceive>
    43b2:	82 e5       	ldi	r24, 0x52	; 82
    43b4:	97 e1       	ldi	r25, 0x17	; 23
    43b6:	02 c0       	rjmp	.+4      	; 0x43bc <_uploadMessage+0xaa>
    43b8:	80 e0       	ldi	r24, 0x00	; 0
    43ba:	90 e0       	ldi	r25, 0x00	; 0
    43bc:	df 91       	pop	r29
    43be:	cf 91       	pop	r28
    43c0:	1f 91       	pop	r17
    43c2:	0f 91       	pop	r16
    43c4:	08 95       	ret

000043c6 <_reply2ReturnCode>:
    43c6:	2f 92       	push	r2
    43c8:	3f 92       	push	r3
    43ca:	4f 92       	push	r4
    43cc:	5f 92       	push	r5
    43ce:	6f 92       	push	r6
    43d0:	7f 92       	push	r7
    43d2:	8f 92       	push	r8
    43d4:	9f 92       	push	r9
    43d6:	af 92       	push	r10
    43d8:	bf 92       	push	r11
    43da:	cf 92       	push	r12
    43dc:	df 92       	push	r13
    43de:	ef 92       	push	r14
    43e0:	ff 92       	push	r15
    43e2:	0f 93       	push	r16
    43e4:	1f 93       	push	r17
    43e6:	cf 93       	push	r28
    43e8:	df 93       	push	r29
    43ea:	5c 01       	movw	r10, r24
    43ec:	fc 01       	movw	r30, r24
    43ee:	01 90       	ld	r0, Z+
    43f0:	00 20       	and	r0, r0
    43f2:	e9 f7       	brne	.-6      	; 0x43ee <_reply2ReturnCode+0x28>
    43f4:	31 97       	sbiw	r30, 0x01	; 1
    43f6:	6f 01       	movw	r12, r30
    43f8:	c8 1a       	sub	r12, r24
    43fa:	d9 0a       	sbc	r13, r25
    43fc:	5c 2c       	mov	r5, r12
    43fe:	0f 2e       	mov	r0, r31
    4400:	f6 e2       	ldi	r31, 0x26	; 38
    4402:	8f 2e       	mov	r8, r31
    4404:	f8 e0       	ldi	r31, 0x08	; 8
    4406:	9f 2e       	mov	r9, r31
    4408:	f0 2d       	mov	r31, r0
    440a:	e1 2c       	mov	r14, r1
    440c:	f1 2c       	mov	r15, r1
    440e:	4c 2c       	mov	r4, r12
    4410:	37 01       	movw	r6, r14
    4412:	f4 01       	movw	r30, r8
    4414:	01 81       	ldd	r16, Z+1	; 0x01
    4416:	12 81       	ldd	r17, Z+2	; 0x02
    4418:	e8 01       	movw	r28, r16
    441a:	09 90       	ld	r0, Y+
    441c:	00 20       	and	r0, r0
    441e:	e9 f7       	brne	.-6      	; 0x441a <_reply2ReturnCode+0x54>
    4420:	21 97       	sbiw	r28, 0x01	; 1
    4422:	c0 1b       	sub	r28, r16
    4424:	d1 0b       	sbc	r29, r17
    4426:	3c 2e       	mov	r3, r28
    4428:	f9 e0       	ldi	r31, 0x09	; 9
    442a:	cf 16       	cp	r12, r31
    442c:	d1 04       	cpc	r13, r1
    442e:	58 f0       	brcs	.+22     	; 0x4446 <_reply2ReturnCode+0x80>
    4430:	f4 01       	movw	r30, r8
    4432:	20 80       	ld	r2, Z
    4434:	fe e0       	ldi	r31, 0x0E	; 14
    4436:	2f 12       	cpse	r2, r31
    4438:	06 c0       	rjmp	.+12     	; 0x4446 <_reply2ReturnCode+0x80>
    443a:	b8 01       	movw	r22, r16
    443c:	c5 01       	movw	r24, r10
    443e:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <strcasestr>
    4442:	89 2b       	or	r24, r25
    4444:	09 f5       	brne	.+66     	; 0x4488 <_reply2ReturnCode+0xc2>
    4446:	44 2d       	mov	r20, r4
    4448:	35 14       	cp	r3, r5
    444a:	08 f4       	brcc	.+2      	; 0x444e <_reply2ReturnCode+0x88>
    444c:	4c 2f       	mov	r20, r28
    444e:	50 e0       	ldi	r21, 0x00	; 0
    4450:	b8 01       	movw	r22, r16
    4452:	c5 01       	movw	r24, r10
    4454:	0e 94 1d 36 	call	0x6c3a	; 0x6c3a <strncasecmp>
    4458:	89 2b       	or	r24, r25
    445a:	49 f4       	brne	.+18     	; 0x446e <_reply2ReturnCode+0xa8>
    445c:	f3 01       	movw	r30, r6
    445e:	ee 0f       	add	r30, r30
    4460:	ff 1f       	adc	r31, r31
    4462:	e6 0d       	add	r30, r6
    4464:	f7 1d       	adc	r31, r7
    4466:	ea 5d       	subi	r30, 0xDA	; 218
    4468:	f7 4f       	sbci	r31, 0xF7	; 247
    446a:	20 80       	ld	r2, Z
    446c:	0d c0       	rjmp	.+26     	; 0x4488 <_reply2ReturnCode+0xc2>
    446e:	8f ef       	ldi	r24, 0xFF	; 255
    4470:	e8 1a       	sub	r14, r24
    4472:	f8 0a       	sbc	r15, r24
    4474:	e3 e0       	ldi	r30, 0x03	; 3
    4476:	8e 0e       	add	r8, r30
    4478:	91 1c       	adc	r9, r1
    447a:	f1 e1       	ldi	r31, 0x11	; 17
    447c:	ef 16       	cp	r14, r31
    447e:	f1 04       	cpc	r15, r1
    4480:	39 f6       	brne	.-114    	; 0x4410 <_reply2ReturnCode+0x4a>
    4482:	68 94       	set
    4484:	22 24       	eor	r2, r2
    4486:	24 f8       	bld	r2, 4
    4488:	82 2d       	mov	r24, r2
    448a:	df 91       	pop	r29
    448c:	cf 91       	pop	r28
    448e:	1f 91       	pop	r17
    4490:	0f 91       	pop	r16
    4492:	ff 90       	pop	r15
    4494:	ef 90       	pop	r14
    4496:	df 90       	pop	r13
    4498:	cf 90       	pop	r12
    449a:	bf 90       	pop	r11
    449c:	af 90       	pop	r10
    449e:	9f 90       	pop	r9
    44a0:	8f 90       	pop	r8
    44a2:	7f 90       	pop	r7
    44a4:	6f 90       	pop	r6
    44a6:	5f 90       	pop	r5
    44a8:	4f 90       	pop	r4
    44aa:	3f 90       	pop	r3
    44ac:	2f 90       	pop	r2
    44ae:	08 95       	ret

000044b0 <_uploadMessageRc>:
    44b0:	30 df       	rcall	.-416    	; 0x4312 <_uploadMessage>
    44b2:	89 cf       	rjmp	.-238    	; 0x43c6 <_reply2ReturnCode>
    44b4:	08 95       	ret

000044b6 <lora_driver_flushBuffers>:
    44b6:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <_serialReplyBufferHandle>
    44ba:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <_serialReplyBufferHandle+0x1>
    44be:	0c 94 98 0c 	jmp	0x1930	; 0x1930 <xStreamBufferReset>
    44c2:	08 95       	ret

000044c4 <lora_driver_initialise>:
    44c4:	8f 92       	push	r8
    44c6:	9f 92       	push	r9
    44c8:	af 92       	push	r10
    44ca:	cf 92       	push	r12
    44cc:	ef 92       	push	r14
    44ce:	0f 93       	push	r16
    44d0:	1f 93       	push	r17
    44d2:	cf 93       	push	r28
    44d4:	c8 2f       	mov	r28, r24
    44d6:	8b 01       	movw	r16, r22
    44d8:	41 e0       	ldi	r20, 0x01	; 1
    44da:	60 e0       	ldi	r22, 0x00	; 0
    44dc:	70 e0       	ldi	r23, 0x00	; 0
    44de:	88 ec       	ldi	r24, 0xC8	; 200
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	0e 94 66 0c 	call	0x18cc	; 0x18cc <xStreamBufferGenericCreate>
    44e6:	90 93 ca 16 	sts	0x16CA, r25	; 0x8016ca <_serialReplyBufferHandle+0x1>
    44ea:	80 93 c9 16 	sts	0x16C9, r24	; 0x8016c9 <_serialReplyBufferHandle>
    44ee:	10 93 c8 16 	sts	0x16C8, r17	; 0x8016c8 <_downlinkMessageBuffer+0x1>
    44f2:	00 93 c7 16 	sts	0x16C7, r16	; 0x8016c7 <_downlinkMessageBuffer>
    44f6:	0f 2e       	mov	r0, r31
    44f8:	f3 e4       	ldi	r31, 0x43	; 67
    44fa:	8f 2e       	mov	r8, r31
    44fc:	f1 e2       	ldi	r31, 0x21	; 33
    44fe:	9f 2e       	mov	r9, r31
    4500:	f0 2d       	mov	r31, r0
    4502:	68 94       	set
    4504:	aa 24       	eor	r10, r10
    4506:	a6 f8       	bld	r10, 6
    4508:	68 94       	set
    450a:	cc 24       	eor	r12, r12
    450c:	c6 f8       	bld	r12, 6
    450e:	e1 2c       	mov	r14, r1
    4510:	00 e0       	ldi	r16, 0x00	; 0
    4512:	23 e0       	ldi	r18, 0x03	; 3
    4514:	40 e0       	ldi	r20, 0x00	; 0
    4516:	51 ee       	ldi	r21, 0xE1	; 225
    4518:	60 e0       	ldi	r22, 0x00	; 0
    451a:	70 e0       	ldi	r23, 0x00	; 0
    451c:	8c 2f       	mov	r24, r28
    451e:	17 d4       	rcall	.+2094   	; 0x4d4e <serial_create>
    4520:	90 93 cc 16 	sts	0x16CC, r25	; 0x8016cc <_rn2483_serial+0x1>
    4524:	80 93 cb 16 	sts	0x16CB, r24	; 0x8016cb <_rn2483_serial>
    4528:	e7 e0       	ldi	r30, 0x07	; 7
    452a:	f1 e0       	ldi	r31, 0x01	; 1
    452c:	80 81       	ld	r24, Z
    452e:	80 61       	ori	r24, 0x10	; 16
    4530:	80 83       	st	Z, r24
    4532:	cf 91       	pop	r28
    4534:	1f 91       	pop	r17
    4536:	0f 91       	pop	r16
    4538:	ef 90       	pop	r14
    453a:	cf 90       	pop	r12
    453c:	af 90       	pop	r10
    453e:	9f 90       	pop	r9
    4540:	8f 90       	pop	r8
    4542:	08 95       	ret

00004544 <lora_driver_resetRn2483>:
    4544:	88 23       	and	r24, r24
    4546:	31 f0       	breq	.+12     	; 0x4554 <lora_driver_resetRn2483+0x10>
    4548:	e8 e0       	ldi	r30, 0x08	; 8
    454a:	f1 e0       	ldi	r31, 0x01	; 1
    454c:	80 81       	ld	r24, Z
    454e:	8f 7e       	andi	r24, 0xEF	; 239
    4550:	80 83       	st	Z, r24
    4552:	08 95       	ret
    4554:	e8 e0       	ldi	r30, 0x08	; 8
    4556:	f1 e0       	ldi	r31, 0x01	; 1
    4558:	80 81       	ld	r24, Z
    455a:	80 61       	ori	r24, 0x10	; 16
    455c:	80 83       	st	Z, r24
    455e:	08 95       	ret

00004560 <lora_driver_rn2483FactoryReset>:
    4560:	60 e0       	ldi	r22, 0x00	; 0
    4562:	70 e0       	ldi	r23, 0x00	; 0
    4564:	8c ea       	ldi	r24, 0xAC	; 172
    4566:	95 e0       	ldi	r25, 0x05	; 5
    4568:	d4 de       	rcall	.-600    	; 0x4312 <_uploadMessage>
    456a:	e2 e5       	ldi	r30, 0x52	; 82
    456c:	f7 e1       	ldi	r31, 0x17	; 23
    456e:	01 90       	ld	r0, Z+
    4570:	00 20       	and	r0, r0
    4572:	e9 f7       	brne	.-6      	; 0x456e <lora_driver_rn2483FactoryReset+0xe>
    4574:	31 97       	sbiw	r30, 0x01	; 1
    4576:	e2 55       	subi	r30, 0x52	; 82
    4578:	f7 41       	sbci	r31, 0x17	; 23
    457a:	81 e0       	ldi	r24, 0x01	; 1
    457c:	75 97       	sbiw	r30, 0x15	; 21
    457e:	08 f0       	brcs	.+2      	; 0x4582 <lora_driver_rn2483FactoryReset+0x22>
    4580:	80 e0       	ldi	r24, 0x00	; 0
    4582:	08 95       	ret

00004584 <lora_driver_getRn2483Hweui>:
    4584:	cf 93       	push	r28
    4586:	df 93       	push	r29
    4588:	ec 01       	movw	r28, r24
    458a:	60 e0       	ldi	r22, 0x00	; 0
    458c:	70 e0       	ldi	r23, 0x00	; 0
    458e:	8d eb       	ldi	r24, 0xBD	; 189
    4590:	95 e0       	ldi	r25, 0x05	; 5
    4592:	bf de       	rcall	.-642    	; 0x4312 <_uploadMessage>
    4594:	e2 e5       	ldi	r30, 0x52	; 82
    4596:	f7 e1       	ldi	r31, 0x17	; 23
    4598:	01 90       	ld	r0, Z+
    459a:	00 20       	and	r0, r0
    459c:	e9 f7       	brne	.-6      	; 0x4598 <lora_driver_getRn2483Hweui+0x14>
    459e:	e3 56       	subi	r30, 0x63	; 99
    45a0:	f7 41       	sbci	r31, 0x17	; 23
    45a2:	39 f4       	brne	.+14     	; 0x45b2 <lora_driver_getRn2483Hweui+0x2e>
    45a4:	62 e5       	ldi	r22, 0x52	; 82
    45a6:	77 e1       	ldi	r23, 0x17	; 23
    45a8:	ce 01       	movw	r24, r28
    45aa:	0e 94 16 36 	call	0x6c2c	; 0x6c2c <strcpy>
    45ae:	80 e0       	ldi	r24, 0x00	; 0
    45b0:	02 c0       	rjmp	.+4      	; 0x45b6 <lora_driver_getRn2483Hweui+0x32>
    45b2:	18 82       	st	Y, r1
    45b4:	81 e0       	ldi	r24, 0x01	; 1
    45b6:	df 91       	pop	r29
    45b8:	cf 91       	pop	r28
    45ba:	08 95       	ret

000045bc <lora_driver_setDeviceIdentifier>:
    45bc:	fc 01       	movw	r30, r24
    45be:	01 90       	ld	r0, Z+
    45c0:	00 20       	and	r0, r0
    45c2:	e9 f7       	brne	.-6      	; 0x45be <lora_driver_setDeviceIdentifier+0x2>
    45c4:	9f 01       	movw	r18, r30
    45c6:	21 51       	subi	r18, 0x11	; 17
    45c8:	31 09       	sbc	r19, r1
    45ca:	28 17       	cp	r18, r24
    45cc:	39 07       	cpc	r19, r25
    45ce:	29 f4       	brne	.+10     	; 0x45da <lora_driver_setDeviceIdentifier+0x1e>
    45d0:	bc 01       	movw	r22, r24
    45d2:	8b ee       	ldi	r24, 0xEB	; 235
    45d4:	95 e0       	ldi	r25, 0x05	; 5
    45d6:	6c cf       	rjmp	.-296    	; 0x44b0 <_uploadMessageRc>
    45d8:	08 95       	ret
    45da:	89 e0       	ldi	r24, 0x09	; 9
    45dc:	08 95       	ret

000045de <lora_driver_setApplicationIdentifier>:
    45de:	fc 01       	movw	r30, r24
    45e0:	01 90       	ld	r0, Z+
    45e2:	00 20       	and	r0, r0
    45e4:	e9 f7       	brne	.-6      	; 0x45e0 <lora_driver_setApplicationIdentifier+0x2>
    45e6:	9f 01       	movw	r18, r30
    45e8:	21 51       	subi	r18, 0x11	; 17
    45ea:	31 09       	sbc	r19, r1
    45ec:	28 17       	cp	r18, r24
    45ee:	39 07       	cpc	r19, r25
    45f0:	29 f4       	brne	.+10     	; 0x45fc <lora_driver_setApplicationIdentifier+0x1e>
    45f2:	bc 01       	movw	r22, r24
    45f4:	8a ef       	ldi	r24, 0xFA	; 250
    45f6:	95 e0       	ldi	r25, 0x05	; 5
    45f8:	5b cf       	rjmp	.-330    	; 0x44b0 <_uploadMessageRc>
    45fa:	08 95       	ret
    45fc:	89 e0       	ldi	r24, 0x09	; 9
    45fe:	08 95       	ret

00004600 <lora_driver_setApplicationKey>:
    4600:	fc 01       	movw	r30, r24
    4602:	01 90       	ld	r0, Z+
    4604:	00 20       	and	r0, r0
    4606:	e9 f7       	brne	.-6      	; 0x4602 <lora_driver_setApplicationKey+0x2>
    4608:	9f 01       	movw	r18, r30
    460a:	21 52       	subi	r18, 0x21	; 33
    460c:	31 09       	sbc	r19, r1
    460e:	28 17       	cp	r18, r24
    4610:	39 07       	cpc	r19, r25
    4612:	29 f4       	brne	.+10     	; 0x461e <lora_driver_setApplicationKey+0x1e>
    4614:	bc 01       	movw	r22, r24
    4616:	89 e0       	ldi	r24, 0x09	; 9
    4618:	96 e0       	ldi	r25, 0x06	; 6
    461a:	4a cf       	rjmp	.-364    	; 0x44b0 <_uploadMessageRc>
    461c:	08 95       	ret
    461e:	89 e0       	ldi	r24, 0x09	; 9
    4620:	08 95       	ret

00004622 <lora_driver_saveMac>:
    4622:	60 e0       	ldi	r22, 0x00	; 0
    4624:	70 e0       	ldi	r23, 0x00	; 0
    4626:	88 e4       	ldi	r24, 0x48	; 72
    4628:	96 e0       	ldi	r25, 0x06	; 6
    462a:	42 cf       	rjmp	.-380    	; 0x44b0 <_uploadMessageRc>
    462c:	08 95       	ret

0000462e <lora_driver_join>:
    462e:	0f 93       	push	r16
    4630:	1f 93       	push	r17
    4632:	e8 2f       	mov	r30, r24
    4634:	f0 e0       	ldi	r31, 0x00	; 0
    4636:	ee 0f       	add	r30, r30
    4638:	ff 1f       	adc	r31, r31
    463a:	ee 5d       	subi	r30, 0xDE	; 222
    463c:	f7 4f       	sbci	r31, 0xF7	; 247
    463e:	60 81       	ld	r22, Z
    4640:	71 81       	ldd	r23, Z+1	; 0x01
    4642:	81 e5       	ldi	r24, 0x51	; 81
    4644:	96 e0       	ldi	r25, 0x06	; 6
    4646:	34 df       	rcall	.-408    	; 0x44b0 <_uploadMessageRc>
    4648:	81 11       	cpse	r24, r1
    464a:	14 c0       	rjmp	.+40     	; 0x4674 <lora_driver_join+0x46>
    464c:	08 e2       	ldi	r16, 0x28	; 40
    464e:	15 e0       	ldi	r17, 0x05	; 5
    4650:	20 e0       	ldi	r18, 0x00	; 0
    4652:	30 e0       	ldi	r19, 0x00	; 0
    4654:	4d e2       	ldi	r20, 0x2D	; 45
    4656:	50 e0       	ldi	r21, 0x00	; 0
    4658:	62 e5       	ldi	r22, 0x52	; 82
    465a:	77 e1       	ldi	r23, 0x17	; 23
    465c:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <_serialReplyBufferHandle>
    4660:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <_serialReplyBufferHandle+0x1>
    4664:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <xStreamBufferReceive>
    4668:	88 23       	and	r24, r24
    466a:	21 f0       	breq	.+8      	; 0x4674 <lora_driver_join+0x46>
    466c:	82 e5       	ldi	r24, 0x52	; 82
    466e:	97 e1       	ldi	r25, 0x17	; 23
    4670:	aa de       	rcall	.-684    	; 0x43c6 <_reply2ReturnCode>
    4672:	03 c0       	rjmp	.+6      	; 0x467a <lora_driver_join+0x4c>
    4674:	82 e5       	ldi	r24, 0x52	; 82
    4676:	97 e1       	ldi	r25, 0x17	; 23
    4678:	a6 de       	rcall	.-692    	; 0x43c6 <_reply2ReturnCode>
    467a:	1f 91       	pop	r17
    467c:	0f 91       	pop	r16
    467e:	08 95       	ret

00004680 <lora_driver_sendUploadMessage>:
    4680:	0f 93       	push	r16
    4682:	1f 93       	push	r17
    4684:	cf 93       	push	r28
    4686:	df 93       	push	r29
    4688:	1f 92       	push	r1
    468a:	cd b7       	in	r28, 0x3d	; 61
    468c:	de b7       	in	r29, 0x3e	; 62
    468e:	db 01       	movw	r26, r22
    4690:	11 96       	adiw	r26, 0x01	; 1
    4692:	9c 91       	ld	r25, X
    4694:	11 97       	sbiw	r26, 0x01	; 1
    4696:	95 31       	cpi	r25, 0x15	; 21
    4698:	08 f0       	brcs	.+2      	; 0x469c <lora_driver_sendUploadMessage+0x1c>
    469a:	b4 c0       	rjmp	.+360    	; 0x4804 <lora_driver_sendUploadMessage+0x184>
    469c:	99 23       	and	r25, r25
    469e:	81 f1       	breq	.+96     	; 0x4700 <lora_driver_sendUploadMessage+0x80>
    46a0:	60 e0       	ldi	r22, 0x00	; 0
    46a2:	70 e0       	ldi	r23, 0x00	; 0
    46a4:	27 2f       	mov	r18, r23
    46a6:	30 e0       	ldi	r19, 0x00	; 0
    46a8:	46 2f       	mov	r20, r22
    46aa:	50 e0       	ldi	r21, 0x00	; 0
    46ac:	fd 01       	movw	r30, r26
    46ae:	e4 0f       	add	r30, r20
    46b0:	f5 1f       	adc	r31, r21
    46b2:	92 81       	ldd	r25, Z+2	; 0x02
    46b4:	92 95       	swap	r25
    46b6:	9f 70       	andi	r25, 0x0F	; 15
    46b8:	9a 30       	cpi	r25, 0x0A	; 10
    46ba:	10 f0       	brcs	.+4      	; 0x46c0 <lora_driver_sendUploadMessage+0x40>
    46bc:	99 5c       	subi	r25, 0xC9	; 201
    46be:	01 c0       	rjmp	.+2      	; 0x46c2 <lora_driver_sendUploadMessage+0x42>
    46c0:	90 5d       	subi	r25, 0xD0	; 208
    46c2:	f9 01       	movw	r30, r18
    46c4:	ed 51       	subi	r30, 0x1D	; 29
    46c6:	f9 4e       	sbci	r31, 0xE9	; 233
    46c8:	90 83       	st	Z, r25
    46ca:	2f 5f       	subi	r18, 0xFF	; 255
    46cc:	3f 4f       	sbci	r19, 0xFF	; 255
    46ce:	fd 01       	movw	r30, r26
    46d0:	e4 0f       	add	r30, r20
    46d2:	f5 1f       	adc	r31, r21
    46d4:	92 81       	ldd	r25, Z+2	; 0x02
    46d6:	9f 70       	andi	r25, 0x0F	; 15
    46d8:	49 2f       	mov	r20, r25
    46da:	50 e0       	ldi	r21, 0x00	; 0
    46dc:	4a 30       	cpi	r20, 0x0A	; 10
    46de:	51 05       	cpc	r21, r1
    46e0:	14 f0       	brlt	.+4      	; 0x46e6 <lora_driver_sendUploadMessage+0x66>
    46e2:	99 5c       	subi	r25, 0xC9	; 201
    46e4:	01 c0       	rjmp	.+2      	; 0x46e8 <lora_driver_sendUploadMessage+0x68>
    46e6:	90 5d       	subi	r25, 0xD0	; 208
    46e8:	f9 01       	movw	r30, r18
    46ea:	ed 51       	subi	r30, 0x1D	; 29
    46ec:	f9 4e       	sbci	r31, 0xE9	; 233
    46ee:	90 83       	st	Z, r25
    46f0:	7e 5f       	subi	r23, 0xFE	; 254
    46f2:	6f 5f       	subi	r22, 0xFF	; 255
    46f4:	11 96       	adiw	r26, 0x01	; 1
    46f6:	9c 91       	ld	r25, X
    46f8:	11 97       	sbiw	r26, 0x01	; 1
    46fa:	69 17       	cp	r22, r25
    46fc:	98 f2       	brcs	.-90     	; 0x46a4 <lora_driver_sendUploadMessage+0x24>
    46fe:	01 c0       	rjmp	.+2      	; 0x4702 <lora_driver_sendUploadMessage+0x82>
    4700:	70 e0       	ldi	r23, 0x00	; 0
    4702:	e7 2f       	mov	r30, r23
    4704:	f0 e0       	ldi	r31, 0x00	; 0
    4706:	ed 51       	subi	r30, 0x1D	; 29
    4708:	f9 4e       	sbci	r31, 0xE9	; 233
    470a:	10 82       	st	Z, r1
    470c:	4c 91       	ld	r20, X
    470e:	81 11       	cpse	r24, r1
    4710:	03 c0       	rjmp	.+6      	; 0x4718 <lora_driver_sendUploadMessage+0x98>
    4712:	8a e5       	ldi	r24, 0x5A	; 90
    4714:	96 e0       	ldi	r25, 0x06	; 6
    4716:	02 c0       	rjmp	.+4      	; 0x471c <lora_driver_sendUploadMessage+0x9c>
    4718:	8c e5       	ldi	r24, 0x5C	; 92
    471a:	96 e0       	ldi	r25, 0x06	; 6
    471c:	23 ee       	ldi	r18, 0xE3	; 227
    471e:	36 e1       	ldi	r19, 0x16	; 22
    4720:	3f 93       	push	r19
    4722:	2f 93       	push	r18
    4724:	1f 92       	push	r1
    4726:	4f 93       	push	r20
    4728:	9f 93       	push	r25
    472a:	8f 93       	push	r24
    472c:	80 e6       	ldi	r24, 0x60	; 96
    472e:	96 e0       	ldi	r25, 0x06	; 6
    4730:	9f 93       	push	r25
    4732:	8f 93       	push	r24
    4734:	85 e2       	ldi	r24, 0x25	; 37
    4736:	97 e1       	ldi	r25, 0x17	; 23
    4738:	9f 93       	push	r25
    473a:	8f 93       	push	r24
    473c:	0e 94 bf 36 	call	0x6d7e	; 0x6d7e <sprintf>
    4740:	60 e0       	ldi	r22, 0x00	; 0
    4742:	70 e0       	ldi	r23, 0x00	; 0
    4744:	85 e2       	ldi	r24, 0x25	; 37
    4746:	97 e1       	ldi	r25, 0x17	; 23
    4748:	b3 de       	rcall	.-666    	; 0x44b0 <_uploadMessageRc>
    474a:	0f b6       	in	r0, 0x3f	; 63
    474c:	f8 94       	cli
    474e:	de bf       	out	0x3e, r29	; 62
    4750:	0f be       	out	0x3f, r0	; 63
    4752:	cd bf       	out	0x3d, r28	; 61
    4754:	81 11       	cpse	r24, r1
    4756:	59 c0       	rjmp	.+178    	; 0x480a <lora_driver_sendUploadMessage+0x18a>
    4758:	08 e2       	ldi	r16, 0x28	; 40
    475a:	15 e0       	ldi	r17, 0x05	; 5
    475c:	20 e0       	ldi	r18, 0x00	; 0
    475e:	30 e0       	ldi	r19, 0x00	; 0
    4760:	4d e2       	ldi	r20, 0x2D	; 45
    4762:	50 e0       	ldi	r21, 0x00	; 0
    4764:	62 e5       	ldi	r22, 0x52	; 82
    4766:	77 e1       	ldi	r23, 0x17	; 23
    4768:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <_serialReplyBufferHandle>
    476c:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <_serialReplyBufferHandle+0x1>
    4770:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <xStreamBufferReceive>
    4774:	88 23       	and	r24, r24
    4776:	09 f4       	brne	.+2      	; 0x477a <lora_driver_sendUploadMessage+0xfa>
    4778:	47 c0       	rjmp	.+142    	; 0x4808 <lora_driver_sendUploadMessage+0x188>
    477a:	82 e5       	ldi	r24, 0x52	; 82
    477c:	97 e1       	ldi	r25, 0x17	; 23
    477e:	23 de       	rcall	.-954    	; 0x43c6 <_reply2ReturnCode>
    4780:	8e 30       	cpi	r24, 0x0E	; 14
    4782:	09 f0       	breq	.+2      	; 0x4786 <lora_driver_sendUploadMessage+0x106>
    4784:	42 c0       	rjmp	.+132    	; 0x480a <lora_driver_sendUploadMessage+0x18a>
    4786:	87 e0       	ldi	r24, 0x07	; 7
    4788:	89 83       	std	Y+1, r24	; 0x01
    478a:	80 91 c7 16 	lds	r24, 0x16C7	; 0x8016c7 <_downlinkMessageBuffer>
    478e:	90 91 c8 16 	lds	r25, 0x16C8	; 0x8016c8 <_downlinkMessageBuffer+0x1>
    4792:	89 2b       	or	r24, r25
    4794:	a9 f1       	breq	.+106    	; 0x4800 <lora_driver_sendUploadMessage+0x180>
    4796:	be 01       	movw	r22, r28
    4798:	6f 5f       	subi	r22, 0xFF	; 255
    479a:	7f 4f       	sbci	r23, 0xFF	; 255
    479c:	82 e5       	ldi	r24, 0x52	; 82
    479e:	97 e1       	ldi	r25, 0x17	; 23
    47a0:	68 d1       	rcall	.+720    	; 0x4a72 <decode_port_no>
    47a2:	80 93 cd 16 	sts	0x16CD, r24	; 0x8016cd <_downlinkPayload>
    47a6:	e9 81       	ldd	r30, Y+1	; 0x01
    47a8:	f0 e0       	ldi	r31, 0x00	; 0
    47aa:	ee 5a       	subi	r30, 0xAE	; 174
    47ac:	f8 4e       	sbci	r31, 0xE8	; 232
    47ae:	df 01       	movw	r26, r30
    47b0:	0d 90       	ld	r0, X+
    47b2:	00 20       	and	r0, r0
    47b4:	e9 f7       	brne	.-6      	; 0x47b0 <lora_driver_sendUploadMessage+0x130>
    47b6:	11 97       	sbiw	r26, 0x01	; 1
    47b8:	ae 1b       	sub	r26, r30
    47ba:	bf 0b       	sbc	r27, r31
    47bc:	aa 23       	and	r26, r26
    47be:	91 f0       	breq	.+36     	; 0x47e4 <lora_driver_sendUploadMessage+0x164>
    47c0:	bb 27       	eor	r27, r27
    47c2:	cd 01       	movw	r24, r26
    47c4:	01 97       	sbiw	r24, 0x01	; 1
    47c6:	9c 01       	movw	r18, r24
    47c8:	12 f4       	brpl	.+4      	; 0x47ce <lora_driver_sendUploadMessage+0x14e>
    47ca:	2f 5f       	subi	r18, 0xFF	; 255
    47cc:	3f 4f       	sbci	r19, 0xFF	; 255
    47ce:	35 95       	asr	r19
    47d0:	27 95       	ror	r18
    47d2:	20 93 ce 16 	sts	0x16CE, r18	; 0x8016ce <_downlinkPayload+0x1>
    47d6:	af 01       	movw	r20, r30
    47d8:	4f 5f       	subi	r20, 0xFF	; 255
    47da:	5f 4f       	sbci	r21, 0xFF	; 255
    47dc:	64 e1       	ldi	r22, 0x14	; 20
    47de:	8f ec       	ldi	r24, 0xCF	; 207
    47e0:	96 e1       	ldi	r25, 0x16	; 22
    47e2:	73 d1       	rcall	.+742    	; 0x4aca <decode_hexadecimal_string_bytes>
    47e4:	01 e0       	ldi	r16, 0x01	; 1
    47e6:	10 e0       	ldi	r17, 0x00	; 0
    47e8:	20 e0       	ldi	r18, 0x00	; 0
    47ea:	30 e0       	ldi	r19, 0x00	; 0
    47ec:	46 e1       	ldi	r20, 0x16	; 22
    47ee:	50 e0       	ldi	r21, 0x00	; 0
    47f0:	6d ec       	ldi	r22, 0xCD	; 205
    47f2:	76 e1       	ldi	r23, 0x16	; 22
    47f4:	80 91 c7 16 	lds	r24, 0x16C7	; 0x8016c7 <_downlinkMessageBuffer>
    47f8:	90 91 c8 16 	lds	r25, 0x16C8	; 0x8016c8 <_downlinkMessageBuffer+0x1>
    47fc:	0e 94 c8 0c 	call	0x1990	; 0x1990 <xStreamBufferSend>
    4800:	8e e0       	ldi	r24, 0x0E	; 14
    4802:	03 c0       	rjmp	.+6      	; 0x480a <lora_driver_sendUploadMessage+0x18a>
    4804:	84 e1       	ldi	r24, 0x14	; 20
    4806:	01 c0       	rjmp	.+2      	; 0x480a <lora_driver_sendUploadMessage+0x18a>
    4808:	80 e0       	ldi	r24, 0x00	; 0
    480a:	0f 90       	pop	r0
    480c:	df 91       	pop	r29
    480e:	cf 91       	pop	r28
    4810:	1f 91       	pop	r17
    4812:	0f 91       	pop	r16
    4814:	08 95       	ret

00004816 <lora_driver_setAdaptiveDataRate>:
    4816:	81 30       	cpi	r24, 0x01	; 1
    4818:	19 f0       	breq	.+6      	; 0x4820 <lora_driver_setAdaptiveDataRate+0xa>
    481a:	60 e7       	ldi	r22, 0x70	; 112
    481c:	76 e0       	ldi	r23, 0x06	; 6
    481e:	02 c0       	rjmp	.+4      	; 0x4824 <lora_driver_setAdaptiveDataRate+0xe>
    4820:	69 e4       	ldi	r22, 0x49	; 73
    4822:	77 e0       	ldi	r23, 0x07	; 7
    4824:	84 e7       	ldi	r24, 0x74	; 116
    4826:	96 e0       	ldi	r25, 0x06	; 6
    4828:	43 ce       	rjmp	.-890    	; 0x44b0 <_uploadMessageRc>
    482a:	08 95       	ret

0000482c <lora_driver_setReceiveDelay>:
    482c:	9f 93       	push	r25
    482e:	8f 93       	push	r24
    4830:	85 ea       	ldi	r24, 0xA5	; 165
    4832:	96 e0       	ldi	r25, 0x06	; 6
    4834:	9f 93       	push	r25
    4836:	8f 93       	push	r24
    4838:	85 e2       	ldi	r24, 0x25	; 37
    483a:	97 e1       	ldi	r25, 0x17	; 23
    483c:	9f 93       	push	r25
    483e:	8f 93       	push	r24
    4840:	0e 94 bf 36 	call	0x6d7e	; 0x6d7e <sprintf>
    4844:	60 e0       	ldi	r22, 0x00	; 0
    4846:	70 e0       	ldi	r23, 0x00	; 0
    4848:	85 e2       	ldi	r24, 0x25	; 37
    484a:	97 e1       	ldi	r25, 0x17	; 23
    484c:	31 de       	rcall	.-926    	; 0x44b0 <_uploadMessageRc>
    484e:	0f 90       	pop	r0
    4850:	0f 90       	pop	r0
    4852:	0f 90       	pop	r0
    4854:	0f 90       	pop	r0
    4856:	0f 90       	pop	r0
    4858:	0f 90       	pop	r0
    485a:	08 95       	ret

0000485c <lora_driver_configureToEu868>:
    485c:	2f 92       	push	r2
    485e:	3f 92       	push	r3
    4860:	4f 92       	push	r4
    4862:	5f 92       	push	r5
    4864:	6f 92       	push	r6
    4866:	7f 92       	push	r7
    4868:	8f 92       	push	r8
    486a:	9f 92       	push	r9
    486c:	af 92       	push	r10
    486e:	bf 92       	push	r11
    4870:	cf 92       	push	r12
    4872:	df 92       	push	r13
    4874:	ef 92       	push	r14
    4876:	ff 92       	push	r15
    4878:	0f 93       	push	r16
    487a:	1f 93       	push	r17
    487c:	cf 93       	push	r28
    487e:	df 93       	push	r29
    4880:	cd b7       	in	r28, 0x3d	; 61
    4882:	de b7       	in	r29, 0x3e	; 62
    4884:	a0 97       	sbiw	r28, 0x20	; 32
    4886:	0f b6       	in	r0, 0x3f	; 63
    4888:	f8 94       	cli
    488a:	de bf       	out	0x3e, r29	; 62
    488c:	0f be       	out	0x3f, r0	; 63
    488e:	cd bf       	out	0x3d, r28	; 61
    4890:	62 ed       	ldi	r22, 0xD2	; 210
    4892:	76 e0       	ldi	r23, 0x06	; 6
    4894:	8e ed       	ldi	r24, 0xDE	; 222
    4896:	96 e0       	ldi	r25, 0x06	; 6
    4898:	3c dd       	rcall	.-1416   	; 0x4312 <_uploadMessage>
    489a:	95 dd       	rcall	.-1238   	; 0x43c6 <_reply2ReturnCode>
    489c:	81 11       	cpse	r24, r1
    489e:	a3 c0       	rjmp	.+326    	; 0x49e6 <lora_driver_configureToEu868+0x18a>
    48a0:	80 e2       	ldi	r24, 0x20	; 32
    48a2:	e2 e2       	ldi	r30, 0x22	; 34
    48a4:	f2 e0       	ldi	r31, 0x02	; 2
    48a6:	de 01       	movw	r26, r28
    48a8:	11 96       	adiw	r26, 0x01	; 1
    48aa:	01 90       	ld	r0, Z+
    48ac:	0d 92       	st	X+, r0
    48ae:	8a 95       	dec	r24
    48b0:	e1 f7       	brne	.-8      	; 0x48aa <lora_driver_configureToEu868+0x4e>
    48b2:	9e 01       	movw	r18, r28
    48b4:	2f 5f       	subi	r18, 0xFF	; 255
    48b6:	3f 4f       	sbci	r19, 0xFF	; 255
    48b8:	69 01       	movw	r12, r18
    48ba:	e1 2c       	mov	r14, r1
    48bc:	f1 2c       	mov	r15, r1
    48be:	0f 2e       	mov	r0, r31
    48c0:	fa ee       	ldi	r31, 0xEA	; 234
    48c2:	af 2e       	mov	r10, r31
    48c4:	f6 e0       	ldi	r31, 0x06	; 6
    48c6:	bf 2e       	mov	r11, r31
    48c8:	f0 2d       	mov	r31, r0
    48ca:	05 e2       	ldi	r16, 0x25	; 37
    48cc:	17 e1       	ldi	r17, 0x17	; 23
    48ce:	0f 2e       	mov	r0, r31
    48d0:	f3 e0       	ldi	r31, 0x03	; 3
    48d2:	4f 2e       	mov	r4, r31
    48d4:	f7 e0       	ldi	r31, 0x07	; 7
    48d6:	5f 2e       	mov	r5, r31
    48d8:	f0 2d       	mov	r31, r0
    48da:	0f 2e       	mov	r0, r31
    48dc:	fa e1       	ldi	r31, 0x1A	; 26
    48de:	8f 2e       	mov	r8, r31
    48e0:	f7 e0       	ldi	r31, 0x07	; 7
    48e2:	9f 2e       	mov	r9, r31
    48e4:	f0 2d       	mov	r31, r0
    48e6:	0f 2e       	mov	r0, r31
    48e8:	f4 e3       	ldi	r31, 0x34	; 52
    48ea:	6f 2e       	mov	r6, r31
    48ec:	f7 e0       	ldi	r31, 0x07	; 7
    48ee:	7f 2e       	mov	r7, r31
    48f0:	f0 2d       	mov	r31, r0
    48f2:	3e 2c       	mov	r3, r14
    48f4:	2f 2c       	mov	r2, r15
    48f6:	ff 92       	push	r15
    48f8:	ef 92       	push	r14
    48fa:	bf 92       	push	r11
    48fc:	af 92       	push	r10
    48fe:	1f 93       	push	r17
    4900:	0f 93       	push	r16
    4902:	0e 94 bf 36 	call	0x6d7e	; 0x6d7e <sprintf>
    4906:	60 e0       	ldi	r22, 0x00	; 0
    4908:	70 e0       	ldi	r23, 0x00	; 0
    490a:	c8 01       	movw	r24, r16
    490c:	02 dd       	rcall	.-1532   	; 0x4312 <_uploadMessage>
    490e:	5b dd       	rcall	.-1354   	; 0x43c6 <_reply2ReturnCode>
    4910:	0f 90       	pop	r0
    4912:	0f 90       	pop	r0
    4914:	0f 90       	pop	r0
    4916:	0f 90       	pop	r0
    4918:	0f 90       	pop	r0
    491a:	0f 90       	pop	r0
    491c:	81 11       	cpse	r24, r1
    491e:	63 c0       	rjmp	.+198    	; 0x49e6 <lora_driver_configureToEu868+0x18a>
    4920:	32 e0       	ldi	r19, 0x02	; 2
    4922:	3e 15       	cp	r19, r14
    4924:	e8 f4       	brcc	.+58     	; 0x4960 <lora_driver_configureToEu868+0x104>
    4926:	f6 01       	movw	r30, r12
    4928:	83 81       	ldd	r24, Z+3	; 0x03
    492a:	8f 93       	push	r24
    492c:	82 81       	ldd	r24, Z+2	; 0x02
    492e:	8f 93       	push	r24
    4930:	81 81       	ldd	r24, Z+1	; 0x01
    4932:	8f 93       	push	r24
    4934:	80 81       	ld	r24, Z
    4936:	8f 93       	push	r24
    4938:	ff 92       	push	r15
    493a:	ef 92       	push	r14
    493c:	5f 92       	push	r5
    493e:	4f 92       	push	r4
    4940:	1f 93       	push	r17
    4942:	0f 93       	push	r16
    4944:	0e 94 bf 36 	call	0x6d7e	; 0x6d7e <sprintf>
    4948:	60 e0       	ldi	r22, 0x00	; 0
    494a:	70 e0       	ldi	r23, 0x00	; 0
    494c:	c8 01       	movw	r24, r16
    494e:	e1 dc       	rcall	.-1598   	; 0x4312 <_uploadMessage>
    4950:	3a dd       	rcall	.-1420   	; 0x43c6 <_reply2ReturnCode>
    4952:	0f b6       	in	r0, 0x3f	; 63
    4954:	f8 94       	cli
    4956:	de bf       	out	0x3e, r29	; 62
    4958:	0f be       	out	0x3f, r0	; 63
    495a:	cd bf       	out	0x3d, r28	; 61
    495c:	81 11       	cpse	r24, r1
    495e:	43 c0       	rjmp	.+134    	; 0x49e6 <lora_driver_configureToEu868+0x18a>
    4960:	2f 92       	push	r2
    4962:	3f 92       	push	r3
    4964:	9f 92       	push	r9
    4966:	8f 92       	push	r8
    4968:	1f 93       	push	r17
    496a:	0f 93       	push	r16
    496c:	0e 94 bf 36 	call	0x6d7e	; 0x6d7e <sprintf>
    4970:	60 e0       	ldi	r22, 0x00	; 0
    4972:	70 e0       	ldi	r23, 0x00	; 0
    4974:	c8 01       	movw	r24, r16
    4976:	cd dc       	rcall	.-1638   	; 0x4312 <_uploadMessage>
    4978:	26 dd       	rcall	.-1460   	; 0x43c6 <_reply2ReturnCode>
    497a:	0f 90       	pop	r0
    497c:	0f 90       	pop	r0
    497e:	0f 90       	pop	r0
    4980:	0f 90       	pop	r0
    4982:	0f 90       	pop	r0
    4984:	0f 90       	pop	r0
    4986:	81 11       	cpse	r24, r1
    4988:	2e c0       	rjmp	.+92     	; 0x49e6 <lora_driver_configureToEu868+0x18a>
    498a:	2f 92       	push	r2
    498c:	3f 92       	push	r3
    498e:	7f 92       	push	r7
    4990:	6f 92       	push	r6
    4992:	1f 93       	push	r17
    4994:	0f 93       	push	r16
    4996:	0e 94 bf 36 	call	0x6d7e	; 0x6d7e <sprintf>
    499a:	60 e0       	ldi	r22, 0x00	; 0
    499c:	70 e0       	ldi	r23, 0x00	; 0
    499e:	c8 01       	movw	r24, r16
    49a0:	b8 dc       	rcall	.-1680   	; 0x4312 <_uploadMessage>
    49a2:	11 dd       	rcall	.-1502   	; 0x43c6 <_reply2ReturnCode>
    49a4:	0f 90       	pop	r0
    49a6:	0f 90       	pop	r0
    49a8:	0f 90       	pop	r0
    49aa:	0f 90       	pop	r0
    49ac:	0f 90       	pop	r0
    49ae:	0f 90       	pop	r0
    49b0:	81 11       	cpse	r24, r1
    49b2:	19 c0       	rjmp	.+50     	; 0x49e6 <lora_driver_configureToEu868+0x18a>
    49b4:	3f ef       	ldi	r19, 0xFF	; 255
    49b6:	e3 1a       	sub	r14, r19
    49b8:	f3 0a       	sbc	r15, r19
    49ba:	84 e0       	ldi	r24, 0x04	; 4
    49bc:	c8 0e       	add	r12, r24
    49be:	d1 1c       	adc	r13, r1
    49c0:	98 e0       	ldi	r25, 0x08	; 8
    49c2:	e9 16       	cp	r14, r25
    49c4:	f1 04       	cpc	r15, r1
    49c6:	09 f0       	breq	.+2      	; 0x49ca <lora_driver_configureToEu868+0x16e>
    49c8:	94 cf       	rjmp	.-216    	; 0x48f2 <lora_driver_configureToEu868+0x96>
    49ca:	60 e0       	ldi	r22, 0x00	; 0
    49cc:	70 e0       	ldi	r23, 0x00	; 0
    49ce:	8c e4       	ldi	r24, 0x4C	; 76
    49d0:	97 e0       	ldi	r25, 0x07	; 7
    49d2:	9f dc       	rcall	.-1730   	; 0x4312 <_uploadMessage>
    49d4:	f8 dc       	rcall	.-1552   	; 0x43c6 <_reply2ReturnCode>
    49d6:	81 11       	cpse	r24, r1
    49d8:	06 c0       	rjmp	.+12     	; 0x49e6 <lora_driver_configureToEu868+0x18a>
    49da:	60 e0       	ldi	r22, 0x00	; 0
    49dc:	70 e0       	ldi	r23, 0x00	; 0
    49de:	8d e5       	ldi	r24, 0x5D	; 93
    49e0:	97 e0       	ldi	r25, 0x07	; 7
    49e2:	97 dc       	rcall	.-1746   	; 0x4312 <_uploadMessage>
    49e4:	f0 dc       	rcall	.-1568   	; 0x43c6 <_reply2ReturnCode>
    49e6:	a0 96       	adiw	r28, 0x20	; 32
    49e8:	0f b6       	in	r0, 0x3f	; 63
    49ea:	f8 94       	cli
    49ec:	de bf       	out	0x3e, r29	; 62
    49ee:	0f be       	out	0x3f, r0	; 63
    49f0:	cd bf       	out	0x3d, r28	; 61
    49f2:	df 91       	pop	r29
    49f4:	cf 91       	pop	r28
    49f6:	1f 91       	pop	r17
    49f8:	0f 91       	pop	r16
    49fa:	ff 90       	pop	r15
    49fc:	ef 90       	pop	r14
    49fe:	df 90       	pop	r13
    4a00:	cf 90       	pop	r12
    4a02:	bf 90       	pop	r11
    4a04:	af 90       	pop	r10
    4a06:	9f 90       	pop	r9
    4a08:	8f 90       	pop	r8
    4a0a:	7f 90       	pop	r7
    4a0c:	6f 90       	pop	r6
    4a0e:	5f 90       	pop	r5
    4a10:	4f 90       	pop	r4
    4a12:	3f 90       	pop	r3
    4a14:	2f 90       	pop	r2
    4a16:	08 95       	ret

00004a18 <lora_driver_setOtaaIdentity>:
    4a18:	ef 92       	push	r14
    4a1a:	ff 92       	push	r15
    4a1c:	0f 93       	push	r16
    4a1e:	1f 93       	push	r17
    4a20:	cf 93       	push	r28
    4a22:	df 93       	push	r29
    4a24:	ec 01       	movw	r28, r24
    4a26:	8b 01       	movw	r16, r22
    4a28:	7a 01       	movw	r14, r20
    4a2a:	81 e0       	ldi	r24, 0x01	; 1
    4a2c:	f4 de       	rcall	.-536    	; 0x4816 <lora_driver_setAdaptiveDataRate>
    4a2e:	81 11       	cpse	r24, r1
    4a30:	0d c0       	rjmp	.+26     	; 0x4a4c <lora_driver_setOtaaIdentity+0x34>
    4a32:	ce 01       	movw	r24, r28
    4a34:	d4 dd       	rcall	.-1112   	; 0x45de <lora_driver_setApplicationIdentifier>
    4a36:	81 11       	cpse	r24, r1
    4a38:	09 c0       	rjmp	.+18     	; 0x4a4c <lora_driver_setOtaaIdentity+0x34>
    4a3a:	c8 01       	movw	r24, r16
    4a3c:	e1 dd       	rcall	.-1086   	; 0x4600 <lora_driver_setApplicationKey>
    4a3e:	81 11       	cpse	r24, r1
    4a40:	05 c0       	rjmp	.+10     	; 0x4a4c <lora_driver_setOtaaIdentity+0x34>
    4a42:	c7 01       	movw	r24, r14
    4a44:	bb dd       	rcall	.-1162   	; 0x45bc <lora_driver_setDeviceIdentifier>
    4a46:	81 11       	cpse	r24, r1
    4a48:	01 c0       	rjmp	.+2      	; 0x4a4c <lora_driver_setOtaaIdentity+0x34>
    4a4a:	eb dd       	rcall	.-1066   	; 0x4622 <lora_driver_saveMac>
    4a4c:	df 91       	pop	r29
    4a4e:	cf 91       	pop	r28
    4a50:	1f 91       	pop	r17
    4a52:	0f 91       	pop	r16
    4a54:	ff 90       	pop	r15
    4a56:	ef 90       	pop	r14
    4a58:	08 95       	ret

00004a5a <lora_driver_mapReturnCodeToText>:
    4a5a:	90 e0       	ldi	r25, 0x00	; 0
    4a5c:	fc 01       	movw	r30, r24
    4a5e:	ee 0f       	add	r30, r30
    4a60:	ff 1f       	adc	r31, r31
    4a62:	8e 0f       	add	r24, r30
    4a64:	9f 1f       	adc	r25, r31
    4a66:	fc 01       	movw	r30, r24
    4a68:	ea 5d       	subi	r30, 0xDA	; 218
    4a6a:	f7 4f       	sbci	r31, 0xF7	; 247
    4a6c:	81 81       	ldd	r24, Z+1	; 0x01
    4a6e:	92 81       	ldd	r25, Z+2	; 0x02
    4a70:	08 95       	ret

00004a72 <decode_port_no>:
    4a72:	dc 01       	movw	r26, r24
    4a74:	00 97       	sbiw	r24, 0x00	; 0
    4a76:	29 f1       	breq	.+74     	; 0x4ac2 <decode_port_no+0x50>
    4a78:	fb 01       	movw	r30, r22
    4a7a:	20 81       	ld	r18, Z
    4a7c:	fc 01       	movw	r30, r24
    4a7e:	01 90       	ld	r0, Z+
    4a80:	00 20       	and	r0, r0
    4a82:	e9 f7       	brne	.-6      	; 0x4a7e <decode_port_no+0xc>
    4a84:	31 97       	sbiw	r30, 0x01	; 1
    4a86:	e8 1b       	sub	r30, r24
    4a88:	f9 0b       	sbc	r31, r25
    4a8a:	82 2f       	mov	r24, r18
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	e8 17       	cp	r30, r24
    4a90:	f9 07       	cpc	r31, r25
    4a92:	c8 f0       	brcs	.+50     	; 0x4ac6 <decode_port_no+0x54>
    4a94:	80 e0       	ldi	r24, 0x00	; 0
    4a96:	08 c0       	rjmp	.+16     	; 0x4aa8 <decode_port_no+0x36>
    4a98:	88 0f       	add	r24, r24
    4a9a:	38 2f       	mov	r19, r24
    4a9c:	33 0f       	add	r19, r19
    4a9e:	33 0f       	add	r19, r19
    4aa0:	83 0f       	add	r24, r19
    4aa2:	80 53       	subi	r24, 0x30	; 48
    4aa4:	89 0f       	add	r24, r25
    4aa6:	2f 5f       	subi	r18, 0xFF	; 255
    4aa8:	fd 01       	movw	r30, r26
    4aaa:	e2 0f       	add	r30, r18
    4aac:	f1 1d       	adc	r31, r1
    4aae:	90 81       	ld	r25, Z
    4ab0:	30 ed       	ldi	r19, 0xD0	; 208
    4ab2:	39 0f       	add	r19, r25
    4ab4:	3a 30       	cpi	r19, 0x0A	; 10
    4ab6:	10 f4       	brcc	.+4      	; 0x4abc <decode_port_no+0x4a>
    4ab8:	91 11       	cpse	r25, r1
    4aba:	ee cf       	rjmp	.-36     	; 0x4a98 <decode_port_no+0x26>
    4abc:	fb 01       	movw	r30, r22
    4abe:	20 83       	st	Z, r18
    4ac0:	08 95       	ret
    4ac2:	80 e0       	ldi	r24, 0x00	; 0
    4ac4:	08 95       	ret
    4ac6:	80 e0       	ldi	r24, 0x00	; 0
    4ac8:	08 95       	ret

00004aca <decode_hexadecimal_string_bytes>:
    4aca:	0f 93       	push	r16
    4acc:	1f 93       	push	r17
    4ace:	cf 93       	push	r28
    4ad0:	df 93       	push	r29
    4ad2:	dc 01       	movw	r26, r24
    4ad4:	ea 01       	movw	r28, r20
    4ad6:	20 97       	sbiw	r28, 0x00	; 0
    4ad8:	e1 f1       	breq	.+120    	; 0x4b52 <decode_hexadecimal_string_bytes+0x88>
    4ada:	fa 01       	movw	r30, r20
    4adc:	01 90       	ld	r0, Z+
    4ade:	00 20       	and	r0, r0
    4ae0:	e9 f7       	brne	.-6      	; 0x4adc <decode_hexadecimal_string_bytes+0x12>
    4ae2:	31 97       	sbiw	r30, 0x01	; 1
    4ae4:	e4 1b       	sub	r30, r20
    4ae6:	f5 0b       	sbc	r31, r21
    4ae8:	32 97       	sbiw	r30, 0x02	; 2
    4aea:	10 f5       	brcc	.+68     	; 0x4b30 <decode_hexadecimal_string_bytes+0x66>
    4aec:	32 c0       	rjmp	.+100    	; 0x4b52 <decode_hexadecimal_string_bytes+0x88>
    4aee:	8d 01       	movw	r16, r26
    4af0:	04 0f       	add	r16, r20
    4af2:	15 1f       	adc	r17, r21
    4af4:	30 e0       	ldi	r19, 0x00	; 0
    4af6:	ae 01       	movw	r20, r28
    4af8:	42 0f       	add	r20, r18
    4afa:	53 1f       	adc	r21, r19
    4afc:	fa 01       	movw	r30, r20
    4afe:	90 81       	ld	r25, Z
    4b00:	91 34       	cpi	r25, 0x41	; 65
    4b02:	28 f0       	brcs	.+10     	; 0x4b0e <decode_hexadecimal_string_bytes+0x44>
    4b04:	97 53       	subi	r25, 0x37	; 55
    4b06:	59 2f       	mov	r21, r25
    4b08:	52 95       	swap	r21
    4b0a:	50 7f       	andi	r21, 0xF0	; 240
    4b0c:	03 c0       	rjmp	.+6      	; 0x4b14 <decode_hexadecimal_string_bytes+0x4a>
    4b0e:	59 2f       	mov	r21, r25
    4b10:	52 95       	swap	r21
    4b12:	50 7f       	andi	r21, 0xF0	; 240
    4b14:	2c 0f       	add	r18, r28
    4b16:	3d 1f       	adc	r19, r29
    4b18:	f9 01       	movw	r30, r18
    4b1a:	91 81       	ldd	r25, Z+1	; 0x01
    4b1c:	91 34       	cpi	r25, 0x41	; 65
    4b1e:	10 f0       	brcs	.+4      	; 0x4b24 <decode_hexadecimal_string_bytes+0x5a>
    4b20:	97 53       	subi	r25, 0x37	; 55
    4b22:	01 c0       	rjmp	.+2      	; 0x4b26 <decode_hexadecimal_string_bytes+0x5c>
    4b24:	90 53       	subi	r25, 0x30	; 48
    4b26:	95 0f       	add	r25, r21
    4b28:	f8 01       	movw	r30, r16
    4b2a:	90 83       	st	Z, r25
    4b2c:	8f 5f       	subi	r24, 0xFF	; 255
    4b2e:	01 c0       	rjmp	.+2      	; 0x4b32 <decode_hexadecimal_string_bytes+0x68>
    4b30:	80 e0       	ldi	r24, 0x00	; 0
    4b32:	28 2f       	mov	r18, r24
    4b34:	22 0f       	add	r18, r18
    4b36:	48 2f       	mov	r20, r24
    4b38:	50 e0       	ldi	r21, 0x00	; 0
    4b3a:	fe 01       	movw	r30, r28
    4b3c:	01 90       	ld	r0, Z+
    4b3e:	00 20       	and	r0, r0
    4b40:	e9 f7       	brne	.-6      	; 0x4b3c <decode_hexadecimal_string_bytes+0x72>
    4b42:	31 97       	sbiw	r30, 0x01	; 1
    4b44:	ec 1b       	sub	r30, r28
    4b46:	fd 0b       	sbc	r31, r29
    4b48:	4e 17       	cp	r20, r30
    4b4a:	5f 07       	cpc	r21, r31
    4b4c:	10 f4       	brcc	.+4      	; 0x4b52 <decode_hexadecimal_string_bytes+0x88>
    4b4e:	86 13       	cpse	r24, r22
    4b50:	ce cf       	rjmp	.-100    	; 0x4aee <decode_hexadecimal_string_bytes+0x24>
    4b52:	df 91       	pop	r29
    4b54:	cf 91       	pop	r28
    4b56:	1f 91       	pop	r17
    4b58:	0f 91       	pop	r16
    4b5a:	08 95       	ret

00004b5c <_serialCallBack>:
    4b5c:	80 91 82 17 	lds	r24, 0x1782	; 0x801782 <crc_sum.1945>
    4b60:	86 0f       	add	r24, r22
    4b62:	80 93 82 17 	sts	0x1782, r24	; 0x801782 <crc_sum.1945>
    4b66:	90 91 85 17 	lds	r25, 0x1785	; 0x801785 <_mh_state>
    4b6a:	91 30       	cpi	r25, 0x01	; 1
    4b6c:	79 f0       	breq	.+30     	; 0x4b8c <_serialCallBack+0x30>
    4b6e:	28 f0       	brcs	.+10     	; 0x4b7a <_serialCallBack+0x1e>
    4b70:	92 30       	cpi	r25, 0x02	; 2
    4b72:	a9 f0       	breq	.+42     	; 0x4b9e <_serialCallBack+0x42>
    4b74:	93 30       	cpi	r25, 0x03	; 3
    4b76:	19 f1       	breq	.+70     	; 0x4bbe <_serialCallBack+0x62>
    4b78:	08 95       	ret
    4b7a:	6f 3f       	cpi	r22, 0xFF	; 255
    4b7c:	09 f0       	breq	.+2      	; 0x4b80 <_serialCallBack+0x24>
    4b7e:	48 c0       	rjmp	.+144    	; 0x4c10 <_serialCallBack+0xb4>
    4b80:	10 92 82 17 	sts	0x1782, r1	; 0x801782 <crc_sum.1945>
    4b84:	81 e0       	ldi	r24, 0x01	; 1
    4b86:	80 93 85 17 	sts	0x1785, r24	; 0x801785 <_mh_state>
    4b8a:	08 95       	ret
    4b8c:	66 38       	cpi	r22, 0x86	; 134
    4b8e:	09 f0       	breq	.+2      	; 0x4b92 <_serialCallBack+0x36>
    4b90:	3f c0       	rjmp	.+126    	; 0x4c10 <_serialCallBack+0xb4>
    4b92:	10 92 81 17 	sts	0x1781, r1	; 0x801781 <inDex.1943>
    4b96:	82 e0       	ldi	r24, 0x02	; 2
    4b98:	80 93 85 17 	sts	0x1785, r24	; 0x801785 <_mh_state>
    4b9c:	08 95       	ret
    4b9e:	e0 91 81 17 	lds	r30, 0x1781	; 0x801781 <inDex.1943>
    4ba2:	81 e0       	ldi	r24, 0x01	; 1
    4ba4:	8e 0f       	add	r24, r30
    4ba6:	80 93 81 17 	sts	0x1781, r24	; 0x801781 <inDex.1943>
    4baa:	f0 e0       	ldi	r31, 0x00	; 0
    4bac:	e1 58       	subi	r30, 0x81	; 129
    4bae:	f8 4e       	sbci	r31, 0xE8	; 232
    4bb0:	60 83       	st	Z, r22
    4bb2:	82 30       	cpi	r24, 0x02	; 2
    4bb4:	69 f5       	brne	.+90     	; 0x4c10 <_serialCallBack+0xb4>
    4bb6:	83 e0       	ldi	r24, 0x03	; 3
    4bb8:	80 93 85 17 	sts	0x1785, r24	; 0x801785 <_mh_state>
    4bbc:	08 95       	ret
    4bbe:	90 91 81 17 	lds	r25, 0x1781	; 0x801781 <inDex.1943>
    4bc2:	21 e0       	ldi	r18, 0x01	; 1
    4bc4:	29 0f       	add	r18, r25
    4bc6:	20 93 81 17 	sts	0x1781, r18	; 0x801781 <inDex.1943>
    4bca:	96 30       	cpi	r25, 0x06	; 6
    4bcc:	09 f5       	brne	.+66     	; 0x4c10 <_serialCallBack+0xb4>
    4bce:	81 11       	cpse	r24, r1
    4bd0:	0e c0       	rjmp	.+28     	; 0x4bee <_serialCallBack+0x92>
    4bd2:	ef e7       	ldi	r30, 0x7F	; 127
    4bd4:	f7 e1       	ldi	r31, 0x17	; 23
    4bd6:	80 81       	ld	r24, Z
    4bd8:	90 e0       	ldi	r25, 0x00	; 0
    4bda:	98 2f       	mov	r25, r24
    4bdc:	88 27       	eor	r24, r24
    4bde:	21 81       	ldd	r18, Z+1	; 0x01
    4be0:	82 0f       	add	r24, r18
    4be2:	91 1d       	adc	r25, r1
    4be4:	90 93 87 17 	sts	0x1787, r25	; 0x801787 <_ppm+0x1>
    4be8:	80 93 86 17 	sts	0x1786, r24	; 0x801786 <_ppm>
    4bec:	04 c0       	rjmp	.+8      	; 0x4bf6 <_serialCallBack+0x9a>
    4bee:	10 92 87 17 	sts	0x1787, r1	; 0x801787 <_ppm+0x1>
    4bf2:	10 92 86 17 	sts	0x1786, r1	; 0x801786 <_ppm>
    4bf6:	10 92 85 17 	sts	0x1785, r1	; 0x801785 <_mh_state>
    4bfa:	e0 91 83 17 	lds	r30, 0x1783	; 0x801783 <_appCallBack>
    4bfe:	f0 91 84 17 	lds	r31, 0x1784	; 0x801784 <_appCallBack+0x1>
    4c02:	30 97       	sbiw	r30, 0x00	; 0
    4c04:	29 f0       	breq	.+10     	; 0x4c10 <_serialCallBack+0xb4>
    4c06:	80 91 86 17 	lds	r24, 0x1786	; 0x801786 <_ppm>
    4c0a:	90 91 87 17 	lds	r25, 0x1787	; 0x801787 <_ppm+0x1>
    4c0e:	19 95       	eicall
    4c10:	08 95       	ret

00004c12 <mh_z19_initialise>:
    4c12:	8f 92       	push	r8
    4c14:	9f 92       	push	r9
    4c16:	af 92       	push	r10
    4c18:	cf 92       	push	r12
    4c1a:	ef 92       	push	r14
    4c1c:	0f 93       	push	r16
    4c1e:	0f 2e       	mov	r0, r31
    4c20:	fe ea       	ldi	r31, 0xAE	; 174
    4c22:	8f 2e       	mov	r8, r31
    4c24:	f5 e2       	ldi	r31, 0x25	; 37
    4c26:	9f 2e       	mov	r9, r31
    4c28:	f0 2d       	mov	r31, r0
    4c2a:	68 94       	set
    4c2c:	aa 24       	eor	r10, r10
    4c2e:	a4 f8       	bld	r10, 4
    4c30:	68 94       	set
    4c32:	cc 24       	eor	r12, r12
    4c34:	c4 f8       	bld	r12, 4
    4c36:	e1 2c       	mov	r14, r1
    4c38:	00 e0       	ldi	r16, 0x00	; 0
    4c3a:	23 e0       	ldi	r18, 0x03	; 3
    4c3c:	40 e8       	ldi	r20, 0x80	; 128
    4c3e:	55 e2       	ldi	r21, 0x25	; 37
    4c40:	60 e0       	ldi	r22, 0x00	; 0
    4c42:	70 e0       	ldi	r23, 0x00	; 0
    4c44:	84 d0       	rcall	.+264    	; 0x4d4e <serial_create>
    4c46:	90 93 89 17 	sts	0x1789, r25	; 0x801789 <_serial+0x1>
    4c4a:	80 93 88 17 	sts	0x1788, r24	; 0x801788 <_serial>
    4c4e:	0f 91       	pop	r16
    4c50:	ef 90       	pop	r14
    4c52:	cf 90       	pop	r12
    4c54:	af 90       	pop	r10
    4c56:	9f 90       	pop	r9
    4c58:	8f 90       	pop	r8
    4c5a:	08 95       	ret

00004c5c <mh_z19_injectCallBack>:
    4c5c:	90 93 84 17 	sts	0x1784, r25	; 0x801784 <_appCallBack+0x1>
    4c60:	80 93 83 17 	sts	0x1783, r24	; 0x801783 <_appCallBack>
    4c64:	08 95       	ret

00004c66 <mh_z19_takeMeassuring>:
    4c66:	cf 93       	push	r28
    4c68:	df 93       	push	r29
    4c6a:	cd b7       	in	r28, 0x3d	; 61
    4c6c:	de b7       	in	r29, 0x3e	; 62
    4c6e:	29 97       	sbiw	r28, 0x09	; 9
    4c70:	0f b6       	in	r0, 0x3f	; 63
    4c72:	f8 94       	cli
    4c74:	de bf       	out	0x3e, r29	; 62
    4c76:	0f be       	out	0x3f, r0	; 63
    4c78:	cd bf       	out	0x3d, r28	; 61
    4c7a:	89 e0       	ldi	r24, 0x09	; 9
    4c7c:	e2 e4       	ldi	r30, 0x42	; 66
    4c7e:	f2 e0       	ldi	r31, 0x02	; 2
    4c80:	9e 01       	movw	r18, r28
    4c82:	2f 5f       	subi	r18, 0xFF	; 255
    4c84:	3f 4f       	sbci	r19, 0xFF	; 255
    4c86:	d9 01       	movw	r26, r18
    4c88:	01 90       	ld	r0, Z+
    4c8a:	0d 92       	st	X+, r0
    4c8c:	8a 95       	dec	r24
    4c8e:	e1 f7       	brne	.-8      	; 0x4c88 <mh_z19_takeMeassuring+0x22>
    4c90:	10 92 87 17 	sts	0x1787, r1	; 0x801787 <_ppm+0x1>
    4c94:	10 92 86 17 	sts	0x1786, r1	; 0x801786 <_ppm>
    4c98:	80 91 88 17 	lds	r24, 0x1788	; 0x801788 <_serial>
    4c9c:	90 91 89 17 	lds	r25, 0x1789	; 0x801789 <_serial+0x1>
    4ca0:	00 97       	sbiw	r24, 0x00	; 0
    4ca2:	31 f0       	breq	.+12     	; 0x4cb0 <mh_z19_takeMeassuring+0x4a>
    4ca4:	42 2f       	mov	r20, r18
    4ca6:	53 2f       	mov	r21, r19
    4ca8:	69 e0       	ldi	r22, 0x09	; 9
    4caa:	1e d1       	rcall	.+572    	; 0x4ee8 <serial_sendBytes>
    4cac:	80 e0       	ldi	r24, 0x00	; 0
    4cae:	01 c0       	rjmp	.+2      	; 0x4cb2 <mh_z19_takeMeassuring+0x4c>
    4cb0:	82 e0       	ldi	r24, 0x02	; 2
    4cb2:	29 96       	adiw	r28, 0x09	; 9
    4cb4:	0f b6       	in	r0, 0x3f	; 63
    4cb6:	f8 94       	cli
    4cb8:	de bf       	out	0x3e, r29	; 62
    4cba:	0f be       	out	0x3f, r0	; 63
    4cbc:	cd bf       	out	0x3d, r28	; 61
    4cbe:	df 91       	pop	r29
    4cc0:	cf 91       	pop	r28
    4cc2:	08 95       	ret

00004cc4 <mh_z19_getCo2Ppm>:
    4cc4:	20 91 86 17 	lds	r18, 0x1786	; 0x801786 <_ppm>
    4cc8:	30 91 87 17 	lds	r19, 0x1787	; 0x801787 <_ppm+0x1>
    4ccc:	21 15       	cp	r18, r1
    4cce:	31 05       	cpc	r19, r1
    4cd0:	29 f4       	brne	.+10     	; 0x4cdc <mh_z19_getCo2Ppm+0x18>
    4cd2:	fc 01       	movw	r30, r24
    4cd4:	11 82       	std	Z+1, r1	; 0x01
    4cd6:	10 82       	st	Z, r1
    4cd8:	81 e0       	ldi	r24, 0x01	; 1
    4cda:	08 95       	ret
    4cdc:	fc 01       	movw	r30, r24
    4cde:	31 83       	std	Z+1, r19	; 0x01
    4ce0:	20 83       	st	Z, r18
    4ce2:	80 e0       	ldi	r24, 0x00	; 0
    4ce4:	08 95       	ret

00004ce6 <rc_servo_setPosition>:
    4ce6:	65 36       	cpi	r22, 0x65	; 101
    4ce8:	0c f0       	brlt	.+2      	; 0x4cec <rc_servo_setPosition+0x6>
    4cea:	64 e6       	ldi	r22, 0x64	; 100
    4cec:	6c 39       	cpi	r22, 0x9C	; 156
    4cee:	0c f4       	brge	.+2      	; 0x4cf2 <rc_servo_setPosition+0xc>
    4cf0:	6c e9       	ldi	r22, 0x9C	; 156
    4cf2:	96 ef       	ldi	r25, 0xF6	; 246
    4cf4:	69 02       	muls	r22, r25
    4cf6:	b0 01       	movw	r22, r0
    4cf8:	11 24       	eor	r1, r1
    4cfa:	68 54       	subi	r22, 0x48	; 72
    4cfc:	74 4f       	sbci	r23, 0xF4	; 244
    4cfe:	81 11       	cpse	r24, r1
    4d00:	05 c0       	rjmp	.+10     	; 0x4d0c <rc_servo_setPosition+0x26>
    4d02:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4d06:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    4d0a:	08 95       	ret
    4d0c:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    4d10:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    4d14:	08 95       	ret

00004d16 <rc_servo_initialise>:
    4d16:	ea e0       	ldi	r30, 0x0A	; 10
    4d18:	f1 e0       	ldi	r31, 0x01	; 1
    4d1a:	80 81       	ld	r24, Z
    4d1c:	88 61       	ori	r24, 0x18	; 24
    4d1e:	80 83       	st	Z, r24
    4d20:	8f e3       	ldi	r24, 0x3F	; 63
    4d22:	9c e9       	ldi	r25, 0x9C	; 156
    4d24:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    4d28:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    4d2c:	60 e0       	ldi	r22, 0x00	; 0
    4d2e:	80 e0       	ldi	r24, 0x00	; 0
    4d30:	da df       	rcall	.-76     	; 0x4ce6 <rc_servo_setPosition>
    4d32:	60 e0       	ldi	r22, 0x00	; 0
    4d34:	81 e0       	ldi	r24, 0x01	; 1
    4d36:	d7 df       	rcall	.-82     	; 0x4ce6 <rc_servo_setPosition>
    4d38:	e0 e2       	ldi	r30, 0x20	; 32
    4d3a:	f1 e0       	ldi	r31, 0x01	; 1
    4d3c:	80 81       	ld	r24, Z
    4d3e:	82 6a       	ori	r24, 0xA2	; 162
    4d40:	80 83       	st	Z, r24
    4d42:	e1 e2       	ldi	r30, 0x21	; 33
    4d44:	f1 e0       	ldi	r31, 0x01	; 1
    4d46:	80 81       	ld	r24, Z
    4d48:	8a 61       	ori	r24, 0x1A	; 26
    4d4a:	80 83       	st	Z, r24
    4d4c:	08 95       	ret

00004d4e <serial_create>:
    4d4e:	2f 92       	push	r2
    4d50:	3f 92       	push	r3
    4d52:	4f 92       	push	r4
    4d54:	5f 92       	push	r5
    4d56:	6f 92       	push	r6
    4d58:	7f 92       	push	r7
    4d5a:	8f 92       	push	r8
    4d5c:	9f 92       	push	r9
    4d5e:	af 92       	push	r10
    4d60:	cf 92       	push	r12
    4d62:	ef 92       	push	r14
    4d64:	ff 92       	push	r15
    4d66:	0f 93       	push	r16
    4d68:	1f 93       	push	r17
    4d6a:	cf 93       	push	r28
    4d6c:	df 93       	push	r29
    4d6e:	cd b7       	in	r28, 0x3d	; 61
    4d70:	de b7       	in	r29, 0x3e	; 62
    4d72:	f8 2e       	mov	r15, r24
    4d74:	2a 01       	movw	r4, r20
    4d76:	3b 01       	movw	r6, r22
    4d78:	88 e0       	ldi	r24, 0x08	; 8
    4d7a:	90 e0       	ldi	r25, 0x00	; 0
    4d7c:	0e 94 ce 33 	call	0x679c	; 0x679c <malloc>
    4d80:	8c 01       	movw	r16, r24
    4d82:	8f 2d       	mov	r24, r15
    4d84:	90 e0       	ldi	r25, 0x00	; 0
    4d86:	fc 01       	movw	r30, r24
    4d88:	ee 0f       	add	r30, r30
    4d8a:	ff 1f       	adc	r31, r31
    4d8c:	e6 57       	subi	r30, 0x76	; 118
    4d8e:	f8 4e       	sbci	r31, 0xE8	; 232
    4d90:	11 83       	std	Z+1, r17	; 0x01
    4d92:	00 83       	st	Z, r16
    4d94:	01 15       	cp	r16, r1
    4d96:	11 05       	cpc	r17, r1
    4d98:	09 f4       	brne	.+2      	; 0x4d9c <serial_create+0x4e>
    4d9a:	69 c0       	rjmp	.+210    	; 0x4e6e <serial_create+0x120>
    4d9c:	88 0f       	add	r24, r24
    4d9e:	99 1f       	adc	r25, r25
    4da0:	fc 01       	movw	r30, r24
    4da2:	e5 5f       	subi	r30, 0xF5	; 245
    4da4:	fd 4f       	sbci	r31, 0xFD	; 253
    4da6:	80 81       	ld	r24, Z
    4da8:	91 81       	ldd	r25, Z+1	; 0x01
    4daa:	d8 01       	movw	r26, r16
    4dac:	8d 93       	st	X+, r24
    4dae:	9c 93       	st	X, r25
    4db0:	8c 2d       	mov	r24, r12
    4db2:	90 e0       	ldi	r25, 0x00	; 0
    4db4:	88 0f       	add	r24, r24
    4db6:	99 1f       	adc	r25, r25
    4db8:	88 0f       	add	r24, r24
    4dba:	99 1f       	adc	r25, r25
    4dbc:	0e 94 ce 33 	call	0x679c	; 0x679c <malloc>
    4dc0:	1c 01       	movw	r2, r24
    4dc2:	86 e0       	ldi	r24, 0x06	; 6
    4dc4:	90 e0       	ldi	r25, 0x00	; 0
    4dc6:	0e 94 ce 33 	call	0x679c	; 0x679c <malloc>
    4dca:	7c 01       	movw	r14, r24
    4dcc:	4c 2d       	mov	r20, r12
    4dce:	b1 01       	movw	r22, r2
    4dd0:	f1 d6       	rcall	.+3554   	; 0x5bb4 <fifo_init>
    4dd2:	f8 01       	movw	r30, r16
    4dd4:	f5 82       	std	Z+5, r15	; 0x05
    4dd6:	e4 82       	std	Z+4, r14	; 0x04
    4dd8:	8a 2d       	mov	r24, r10
    4dda:	90 e0       	ldi	r25, 0x00	; 0
    4ddc:	88 0f       	add	r24, r24
    4dde:	99 1f       	adc	r25, r25
    4de0:	88 0f       	add	r24, r24
    4de2:	99 1f       	adc	r25, r25
    4de4:	0e 94 ce 33 	call	0x679c	; 0x679c <malloc>
    4de8:	1c 01       	movw	r2, r24
    4dea:	86 e0       	ldi	r24, 0x06	; 6
    4dec:	90 e0       	ldi	r25, 0x00	; 0
    4dee:	0e 94 ce 33 	call	0x679c	; 0x679c <malloc>
    4df2:	7c 01       	movw	r14, r24
    4df4:	4a 2d       	mov	r20, r10
    4df6:	b1 01       	movw	r22, r2
    4df8:	dd d6       	rcall	.+3514   	; 0x5bb4 <fifo_init>
    4dfa:	d8 01       	movw	r26, r16
    4dfc:	13 96       	adiw	r26, 0x03	; 3
    4dfe:	fc 92       	st	X, r15
    4e00:	ee 92       	st	-X, r14
    4e02:	12 97       	sbiw	r26, 0x02	; 2
    4e04:	17 96       	adiw	r26, 0x07	; 7
    4e06:	9c 92       	st	X, r9
    4e08:	8e 92       	st	-X, r8
    4e0a:	16 97       	sbiw	r26, 0x06	; 6
    4e0c:	ff b6       	in	r15, 0x3f	; 63
    4e0e:	f8 94       	cli
    4e10:	ed 91       	ld	r30, X+
    4e12:	fc 91       	ld	r31, X
    4e14:	11 97       	sbiw	r26, 0x01	; 1
    4e16:	36 97       	sbiw	r30, 0x06	; 6
    4e18:	80 81       	ld	r24, Z
    4e1a:	82 60       	ori	r24, 0x02	; 2
    4e1c:	80 83       	st	Z, r24
    4e1e:	8d 90       	ld	r8, X+
    4e20:	9c 90       	ld	r9, X
    4e22:	c3 01       	movw	r24, r6
    4e24:	b2 01       	movw	r22, r4
    4e26:	e0 d7       	rcall	.+4032   	; 0x5de8 <__floatunsisf>
    4e28:	20 e0       	ldi	r18, 0x00	; 0
    4e2a:	30 e0       	ldi	r19, 0x00	; 0
    4e2c:	40 e0       	ldi	r20, 0x00	; 0
    4e2e:	51 e4       	ldi	r21, 0x41	; 65
    4e30:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <__mulsf3>
    4e34:	9b 01       	movw	r18, r22
    4e36:	ac 01       	movw	r20, r24
    4e38:	60 e0       	ldi	r22, 0x00	; 0
    4e3a:	74 e2       	ldi	r23, 0x24	; 36
    4e3c:	84 e7       	ldi	r24, 0x74	; 116
    4e3e:	9b e4       	ldi	r25, 0x4B	; 75
    4e40:	3a d7       	rcall	.+3700   	; 0x5cb6 <__divsf3>
    4e42:	20 e0       	ldi	r18, 0x00	; 0
    4e44:	30 e0       	ldi	r19, 0x00	; 0
    4e46:	40 e8       	ldi	r20, 0x80	; 128
    4e48:	5f e3       	ldi	r21, 0x3F	; 63
    4e4a:	d0 d6       	rcall	.+3488   	; 0x5bec <__subsf3>
    4e4c:	a1 d7       	rcall	.+3906   	; 0x5d90 <__fixunssfsi>
    4e4e:	f4 01       	movw	r30, r8
    4e50:	32 97       	sbiw	r30, 0x02	; 2
    4e52:	60 83       	st	Z, r22
    4e54:	d8 01       	movw	r26, r16
    4e56:	ed 91       	ld	r30, X+
    4e58:	fc 91       	ld	r31, X
    4e5a:	11 97       	sbiw	r26, 0x01	; 1
    4e5c:	35 97       	sbiw	r30, 0x05	; 5
    4e5e:	88 e9       	ldi	r24, 0x98	; 152
    4e60:	80 83       	st	Z, r24
    4e62:	ed 91       	ld	r30, X+
    4e64:	fc 91       	ld	r31, X
    4e66:	34 97       	sbiw	r30, 0x04	; 4
    4e68:	86 e0       	ldi	r24, 0x06	; 6
    4e6a:	80 83       	st	Z, r24
    4e6c:	ff be       	out	0x3f, r15	; 63
    4e6e:	c8 01       	movw	r24, r16
    4e70:	df 91       	pop	r29
    4e72:	cf 91       	pop	r28
    4e74:	1f 91       	pop	r17
    4e76:	0f 91       	pop	r16
    4e78:	ff 90       	pop	r15
    4e7a:	ef 90       	pop	r14
    4e7c:	cf 90       	pop	r12
    4e7e:	af 90       	pop	r10
    4e80:	9f 90       	pop	r9
    4e82:	8f 90       	pop	r8
    4e84:	7f 90       	pop	r7
    4e86:	6f 90       	pop	r6
    4e88:	5f 90       	pop	r5
    4e8a:	4f 90       	pop	r4
    4e8c:	3f 90       	pop	r3
    4e8e:	2f 90       	pop	r2
    4e90:	08 95       	ret

00004e92 <serial_sendByte>:
    4e92:	cf 93       	push	r28
    4e94:	df 93       	push	r29
    4e96:	dc 01       	movw	r26, r24
    4e98:	89 2b       	or	r24, r25
    4e9a:	01 f1       	breq	.+64     	; 0x4edc <serial_sendByte+0x4a>
    4e9c:	12 96       	adiw	r26, 0x02	; 2
    4e9e:	ed 91       	ld	r30, X+
    4ea0:	fc 91       	ld	r31, X
    4ea2:	13 97       	sbiw	r26, 0x03	; 3
    4ea4:	93 81       	ldd	r25, Z+3	; 0x03
    4ea6:	82 81       	ldd	r24, Z+2	; 0x02
    4ea8:	25 81       	ldd	r18, Z+5	; 0x05
    4eaa:	98 1b       	sub	r25, r24
    4eac:	92 23       	and	r25, r18
    4eae:	84 81       	ldd	r24, Z+4	; 0x04
    4eb0:	98 17       	cp	r25, r24
    4eb2:	b1 f0       	breq	.+44     	; 0x4ee0 <serial_sendByte+0x4e>
    4eb4:	83 81       	ldd	r24, Z+3	; 0x03
    4eb6:	26 95       	lsr	r18
    4eb8:	28 23       	and	r18, r24
    4eba:	c0 81       	ld	r28, Z
    4ebc:	d1 81       	ldd	r29, Z+1	; 0x01
    4ebe:	c2 0f       	add	r28, r18
    4ec0:	d1 1d       	adc	r29, r1
    4ec2:	68 83       	st	Y, r22
    4ec4:	8f 5f       	subi	r24, 0xFF	; 255
    4ec6:	95 81       	ldd	r25, Z+5	; 0x05
    4ec8:	89 23       	and	r24, r25
    4eca:	83 83       	std	Z+3, r24	; 0x03
    4ecc:	ed 91       	ld	r30, X+
    4ece:	fc 91       	ld	r31, X
    4ed0:	35 97       	sbiw	r30, 0x05	; 5
    4ed2:	80 81       	ld	r24, Z
    4ed4:	80 62       	ori	r24, 0x20	; 32
    4ed6:	80 83       	st	Z, r24
    4ed8:	80 e0       	ldi	r24, 0x00	; 0
    4eda:	03 c0       	rjmp	.+6      	; 0x4ee2 <serial_sendByte+0x50>
    4edc:	81 e0       	ldi	r24, 0x01	; 1
    4ede:	01 c0       	rjmp	.+2      	; 0x4ee2 <serial_sendByte+0x50>
    4ee0:	82 e0       	ldi	r24, 0x02	; 2
    4ee2:	df 91       	pop	r29
    4ee4:	cf 91       	pop	r28
    4ee6:	08 95       	ret

00004ee8 <serial_sendBytes>:
    4ee8:	ef 92       	push	r14
    4eea:	ff 92       	push	r15
    4eec:	0f 93       	push	r16
    4eee:	1f 93       	push	r17
    4ef0:	cf 93       	push	r28
    4ef2:	df 93       	push	r29
    4ef4:	7c 01       	movw	r14, r24
    4ef6:	00 97       	sbiw	r24, 0x00	; 0
    4ef8:	09 f4       	brne	.+2      	; 0x4efc <serial_sendBytes+0x14>
    4efa:	41 c0       	rjmp	.+130    	; 0x4f7e <serial_sendBytes+0x96>
    4efc:	dc 01       	movw	r26, r24
    4efe:	12 96       	adiw	r26, 0x02	; 2
    4f00:	ed 91       	ld	r30, X+
    4f02:	fc 91       	ld	r31, X
    4f04:	13 97       	sbiw	r26, 0x03	; 3
    4f06:	93 81       	ldd	r25, Z+3	; 0x03
    4f08:	82 81       	ldd	r24, Z+2	; 0x02
    4f0a:	98 1b       	sub	r25, r24
    4f0c:	85 81       	ldd	r24, Z+5	; 0x05
    4f0e:	98 23       	and	r25, r24
    4f10:	84 81       	ldd	r24, Z+4	; 0x04
    4f12:	89 1b       	sub	r24, r25
    4f14:	86 17       	cp	r24, r22
    4f16:	a8 f1       	brcs	.+106    	; 0x4f82 <serial_sendBytes+0x9a>
    4f18:	66 23       	and	r22, r22
    4f1a:	41 f1       	breq	.+80     	; 0x4f6c <serial_sendBytes+0x84>
    4f1c:	84 2f       	mov	r24, r20
    4f1e:	95 2f       	mov	r25, r21
    4f20:	dc 01       	movw	r26, r24
    4f22:	61 50       	subi	r22, 0x01	; 1
    4f24:	46 2f       	mov	r20, r22
    4f26:	50 e0       	ldi	r21, 0x00	; 0
    4f28:	4f 5f       	subi	r20, 0xFF	; 255
    4f2a:	5f 4f       	sbci	r21, 0xFF	; 255
    4f2c:	48 0f       	add	r20, r24
    4f2e:	59 1f       	adc	r21, r25
    4f30:	e7 01       	movw	r28, r14
    4f32:	ea 81       	ldd	r30, Y+2	; 0x02
    4f34:	fb 81       	ldd	r31, Y+3	; 0x03
    4f36:	93 81       	ldd	r25, Z+3	; 0x03
    4f38:	82 81       	ldd	r24, Z+2	; 0x02
    4f3a:	25 81       	ldd	r18, Z+5	; 0x05
    4f3c:	98 1b       	sub	r25, r24
    4f3e:	92 23       	and	r25, r18
    4f40:	84 81       	ldd	r24, Z+4	; 0x04
    4f42:	98 17       	cp	r25, r24
    4f44:	79 f0       	breq	.+30     	; 0x4f64 <serial_sendBytes+0x7c>
    4f46:	8c 91       	ld	r24, X
    4f48:	93 81       	ldd	r25, Z+3	; 0x03
    4f4a:	26 95       	lsr	r18
    4f4c:	29 23       	and	r18, r25
    4f4e:	60 81       	ld	r22, Z
    4f50:	71 81       	ldd	r23, Z+1	; 0x01
    4f52:	8b 01       	movw	r16, r22
    4f54:	02 0f       	add	r16, r18
    4f56:	11 1d       	adc	r17, r1
    4f58:	e8 01       	movw	r28, r16
    4f5a:	88 83       	st	Y, r24
    4f5c:	9f 5f       	subi	r25, 0xFF	; 255
    4f5e:	85 81       	ldd	r24, Z+5	; 0x05
    4f60:	98 23       	and	r25, r24
    4f62:	93 83       	std	Z+3, r25	; 0x03
    4f64:	11 96       	adiw	r26, 0x01	; 1
    4f66:	a4 17       	cp	r26, r20
    4f68:	b5 07       	cpc	r27, r21
    4f6a:	11 f7       	brne	.-60     	; 0x4f30 <serial_sendBytes+0x48>
    4f6c:	d7 01       	movw	r26, r14
    4f6e:	ed 91       	ld	r30, X+
    4f70:	fc 91       	ld	r31, X
    4f72:	35 97       	sbiw	r30, 0x05	; 5
    4f74:	80 81       	ld	r24, Z
    4f76:	80 62       	ori	r24, 0x20	; 32
    4f78:	80 83       	st	Z, r24
    4f7a:	80 e0       	ldi	r24, 0x00	; 0
    4f7c:	03 c0       	rjmp	.+6      	; 0x4f84 <serial_sendBytes+0x9c>
    4f7e:	81 e0       	ldi	r24, 0x01	; 1
    4f80:	01 c0       	rjmp	.+2      	; 0x4f84 <serial_sendBytes+0x9c>
    4f82:	82 e0       	ldi	r24, 0x02	; 2
    4f84:	df 91       	pop	r29
    4f86:	cf 91       	pop	r28
    4f88:	1f 91       	pop	r17
    4f8a:	0f 91       	pop	r16
    4f8c:	ff 90       	pop	r15
    4f8e:	ef 90       	pop	r14
    4f90:	08 95       	ret

00004f92 <serial_getByte>:
    4f92:	00 97       	sbiw	r24, 0x00	; 0
    4f94:	d1 f0       	breq	.+52     	; 0x4fca <serial_getByte+0x38>
    4f96:	dc 01       	movw	r26, r24
    4f98:	14 96       	adiw	r26, 0x04	; 4
    4f9a:	ed 91       	ld	r30, X+
    4f9c:	fc 91       	ld	r31, X
    4f9e:	15 97       	sbiw	r26, 0x05	; 5
    4fa0:	93 81       	ldd	r25, Z+3	; 0x03
    4fa2:	82 81       	ldd	r24, Z+2	; 0x02
    4fa4:	98 17       	cp	r25, r24
    4fa6:	99 f0       	breq	.+38     	; 0x4fce <serial_getByte+0x3c>
    4fa8:	92 81       	ldd	r25, Z+2	; 0x02
    4faa:	85 81       	ldd	r24, Z+5	; 0x05
    4fac:	86 95       	lsr	r24
    4fae:	89 23       	and	r24, r25
    4fb0:	a0 81       	ld	r26, Z
    4fb2:	b1 81       	ldd	r27, Z+1	; 0x01
    4fb4:	a8 0f       	add	r26, r24
    4fb6:	b1 1d       	adc	r27, r1
    4fb8:	8c 91       	ld	r24, X
    4fba:	db 01       	movw	r26, r22
    4fbc:	8c 93       	st	X, r24
    4fbe:	9f 5f       	subi	r25, 0xFF	; 255
    4fc0:	85 81       	ldd	r24, Z+5	; 0x05
    4fc2:	98 23       	and	r25, r24
    4fc4:	92 83       	std	Z+2, r25	; 0x02
    4fc6:	80 e0       	ldi	r24, 0x00	; 0
    4fc8:	08 95       	ret
    4fca:	81 e0       	ldi	r24, 0x01	; 1
    4fcc:	08 95       	ret
    4fce:	83 e0       	ldi	r24, 0x03	; 3
    4fd0:	08 95       	ret

00004fd2 <__vector_25>:
    4fd2:	1f 92       	push	r1
    4fd4:	0f 92       	push	r0
    4fd6:	0f b6       	in	r0, 0x3f	; 63
    4fd8:	0f 92       	push	r0
    4fda:	11 24       	eor	r1, r1
    4fdc:	0b b6       	in	r0, 0x3b	; 59
    4fde:	0f 92       	push	r0
    4fe0:	2f 93       	push	r18
    4fe2:	3f 93       	push	r19
    4fe4:	4f 93       	push	r20
    4fe6:	5f 93       	push	r21
    4fe8:	6f 93       	push	r22
    4fea:	7f 93       	push	r23
    4fec:	8f 93       	push	r24
    4fee:	9f 93       	push	r25
    4ff0:	af 93       	push	r26
    4ff2:	bf 93       	push	r27
    4ff4:	cf 93       	push	r28
    4ff6:	df 93       	push	r29
    4ff8:	ef 93       	push	r30
    4ffa:	ff 93       	push	r31
    4ffc:	a0 91 8a 17 	lds	r26, 0x178A	; 0x80178a <_ser_handle>
    5000:	b0 91 8b 17 	lds	r27, 0x178B	; 0x80178b <_ser_handle+0x1>
    5004:	10 97       	sbiw	r26, 0x00	; 0
    5006:	11 f1       	breq	.+68     	; 0x504c <__vector_25+0x7a>
    5008:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    500c:	14 96       	adiw	r26, 0x04	; 4
    500e:	ed 91       	ld	r30, X+
    5010:	fc 91       	ld	r31, X
    5012:	15 97       	sbiw	r26, 0x05	; 5
    5014:	93 81       	ldd	r25, Z+3	; 0x03
    5016:	82 81       	ldd	r24, Z+2	; 0x02
    5018:	25 81       	ldd	r18, Z+5	; 0x05
    501a:	98 1b       	sub	r25, r24
    501c:	92 23       	and	r25, r18
    501e:	84 81       	ldd	r24, Z+4	; 0x04
    5020:	98 17       	cp	r25, r24
    5022:	61 f0       	breq	.+24     	; 0x503c <__vector_25+0x6a>
    5024:	83 81       	ldd	r24, Z+3	; 0x03
    5026:	26 95       	lsr	r18
    5028:	28 23       	and	r18, r24
    502a:	c0 81       	ld	r28, Z
    502c:	d1 81       	ldd	r29, Z+1	; 0x01
    502e:	c2 0f       	add	r28, r18
    5030:	d1 1d       	adc	r29, r1
    5032:	68 83       	st	Y, r22
    5034:	8f 5f       	subi	r24, 0xFF	; 255
    5036:	95 81       	ldd	r25, Z+5	; 0x05
    5038:	89 23       	and	r24, r25
    503a:	83 83       	std	Z+3, r24	; 0x03
    503c:	16 96       	adiw	r26, 0x06	; 6
    503e:	ed 91       	ld	r30, X+
    5040:	fc 91       	ld	r31, X
    5042:	17 97       	sbiw	r26, 0x07	; 7
    5044:	30 97       	sbiw	r30, 0x00	; 0
    5046:	11 f0       	breq	.+4      	; 0x504c <__vector_25+0x7a>
    5048:	cd 01       	movw	r24, r26
    504a:	19 95       	eicall
    504c:	ff 91       	pop	r31
    504e:	ef 91       	pop	r30
    5050:	df 91       	pop	r29
    5052:	cf 91       	pop	r28
    5054:	bf 91       	pop	r27
    5056:	af 91       	pop	r26
    5058:	9f 91       	pop	r25
    505a:	8f 91       	pop	r24
    505c:	7f 91       	pop	r23
    505e:	6f 91       	pop	r22
    5060:	5f 91       	pop	r21
    5062:	4f 91       	pop	r20
    5064:	3f 91       	pop	r19
    5066:	2f 91       	pop	r18
    5068:	0f 90       	pop	r0
    506a:	0b be       	out	0x3b, r0	; 59
    506c:	0f 90       	pop	r0
    506e:	0f be       	out	0x3f, r0	; 63
    5070:	0f 90       	pop	r0
    5072:	1f 90       	pop	r1
    5074:	18 95       	reti

00005076 <__vector_26>:
    5076:	1f 92       	push	r1
    5078:	0f 92       	push	r0
    507a:	0f b6       	in	r0, 0x3f	; 63
    507c:	0f 92       	push	r0
    507e:	11 24       	eor	r1, r1
    5080:	0b b6       	in	r0, 0x3b	; 59
    5082:	0f 92       	push	r0
    5084:	2f 93       	push	r18
    5086:	8f 93       	push	r24
    5088:	9f 93       	push	r25
    508a:	af 93       	push	r26
    508c:	bf 93       	push	r27
    508e:	ef 93       	push	r30
    5090:	ff 93       	push	r31
    5092:	e0 91 8a 17 	lds	r30, 0x178A	; 0x80178a <_ser_handle>
    5096:	f0 91 8b 17 	lds	r31, 0x178B	; 0x80178b <_ser_handle+0x1>
    509a:	30 97       	sbiw	r30, 0x00	; 0
    509c:	b9 f0       	breq	.+46     	; 0x50cc <__vector_26+0x56>
    509e:	02 80       	ldd	r0, Z+2	; 0x02
    50a0:	f3 81       	ldd	r31, Z+3	; 0x03
    50a2:	e0 2d       	mov	r30, r0
    50a4:	93 81       	ldd	r25, Z+3	; 0x03
    50a6:	82 81       	ldd	r24, Z+2	; 0x02
    50a8:	98 17       	cp	r25, r24
    50aa:	b1 f0       	breq	.+44     	; 0x50d8 <__vector_26+0x62>
    50ac:	92 81       	ldd	r25, Z+2	; 0x02
    50ae:	85 81       	ldd	r24, Z+5	; 0x05
    50b0:	28 2f       	mov	r18, r24
    50b2:	26 95       	lsr	r18
    50b4:	29 23       	and	r18, r25
    50b6:	a0 81       	ld	r26, Z
    50b8:	b1 81       	ldd	r27, Z+1	; 0x01
    50ba:	a2 0f       	add	r26, r18
    50bc:	b1 1d       	adc	r27, r1
    50be:	2c 91       	ld	r18, X
    50c0:	9f 5f       	subi	r25, 0xFF	; 255
    50c2:	89 23       	and	r24, r25
    50c4:	82 83       	std	Z+2, r24	; 0x02
    50c6:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    50ca:	0b c0       	rjmp	.+22     	; 0x50e2 <__vector_26+0x6c>
    50cc:	e1 ec       	ldi	r30, 0xC1	; 193
    50ce:	f0 e0       	ldi	r31, 0x00	; 0
    50d0:	80 81       	ld	r24, Z
    50d2:	8f 7d       	andi	r24, 0xDF	; 223
    50d4:	80 83       	st	Z, r24
    50d6:	05 c0       	rjmp	.+10     	; 0x50e2 <__vector_26+0x6c>
    50d8:	e1 ec       	ldi	r30, 0xC1	; 193
    50da:	f0 e0       	ldi	r31, 0x00	; 0
    50dc:	80 81       	ld	r24, Z
    50de:	8f 7d       	andi	r24, 0xDF	; 223
    50e0:	80 83       	st	Z, r24
    50e2:	ff 91       	pop	r31
    50e4:	ef 91       	pop	r30
    50e6:	bf 91       	pop	r27
    50e8:	af 91       	pop	r26
    50ea:	9f 91       	pop	r25
    50ec:	8f 91       	pop	r24
    50ee:	2f 91       	pop	r18
    50f0:	0f 90       	pop	r0
    50f2:	0b be       	out	0x3b, r0	; 59
    50f4:	0f 90       	pop	r0
    50f6:	0f be       	out	0x3f, r0	; 63
    50f8:	0f 90       	pop	r0
    50fa:	1f 90       	pop	r1
    50fc:	18 95       	reti

000050fe <__vector_36>:
    50fe:	1f 92       	push	r1
    5100:	0f 92       	push	r0
    5102:	0f b6       	in	r0, 0x3f	; 63
    5104:	0f 92       	push	r0
    5106:	11 24       	eor	r1, r1
    5108:	0b b6       	in	r0, 0x3b	; 59
    510a:	0f 92       	push	r0
    510c:	2f 93       	push	r18
    510e:	3f 93       	push	r19
    5110:	4f 93       	push	r20
    5112:	5f 93       	push	r21
    5114:	6f 93       	push	r22
    5116:	7f 93       	push	r23
    5118:	8f 93       	push	r24
    511a:	9f 93       	push	r25
    511c:	af 93       	push	r26
    511e:	bf 93       	push	r27
    5120:	cf 93       	push	r28
    5122:	df 93       	push	r29
    5124:	ef 93       	push	r30
    5126:	ff 93       	push	r31
    5128:	a0 91 8c 17 	lds	r26, 0x178C	; 0x80178c <_ser_handle+0x2>
    512c:	b0 91 8d 17 	lds	r27, 0x178D	; 0x80178d <_ser_handle+0x3>
    5130:	10 97       	sbiw	r26, 0x00	; 0
    5132:	11 f1       	breq	.+68     	; 0x5178 <__vector_36+0x7a>
    5134:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5138:	14 96       	adiw	r26, 0x04	; 4
    513a:	ed 91       	ld	r30, X+
    513c:	fc 91       	ld	r31, X
    513e:	15 97       	sbiw	r26, 0x05	; 5
    5140:	93 81       	ldd	r25, Z+3	; 0x03
    5142:	82 81       	ldd	r24, Z+2	; 0x02
    5144:	25 81       	ldd	r18, Z+5	; 0x05
    5146:	98 1b       	sub	r25, r24
    5148:	92 23       	and	r25, r18
    514a:	84 81       	ldd	r24, Z+4	; 0x04
    514c:	98 17       	cp	r25, r24
    514e:	61 f0       	breq	.+24     	; 0x5168 <__vector_36+0x6a>
    5150:	83 81       	ldd	r24, Z+3	; 0x03
    5152:	26 95       	lsr	r18
    5154:	28 23       	and	r18, r24
    5156:	c0 81       	ld	r28, Z
    5158:	d1 81       	ldd	r29, Z+1	; 0x01
    515a:	c2 0f       	add	r28, r18
    515c:	d1 1d       	adc	r29, r1
    515e:	68 83       	st	Y, r22
    5160:	8f 5f       	subi	r24, 0xFF	; 255
    5162:	95 81       	ldd	r25, Z+5	; 0x05
    5164:	89 23       	and	r24, r25
    5166:	83 83       	std	Z+3, r24	; 0x03
    5168:	16 96       	adiw	r26, 0x06	; 6
    516a:	ed 91       	ld	r30, X+
    516c:	fc 91       	ld	r31, X
    516e:	17 97       	sbiw	r26, 0x07	; 7
    5170:	30 97       	sbiw	r30, 0x00	; 0
    5172:	11 f0       	breq	.+4      	; 0x5178 <__vector_36+0x7a>
    5174:	cd 01       	movw	r24, r26
    5176:	19 95       	eicall
    5178:	ff 91       	pop	r31
    517a:	ef 91       	pop	r30
    517c:	df 91       	pop	r29
    517e:	cf 91       	pop	r28
    5180:	bf 91       	pop	r27
    5182:	af 91       	pop	r26
    5184:	9f 91       	pop	r25
    5186:	8f 91       	pop	r24
    5188:	7f 91       	pop	r23
    518a:	6f 91       	pop	r22
    518c:	5f 91       	pop	r21
    518e:	4f 91       	pop	r20
    5190:	3f 91       	pop	r19
    5192:	2f 91       	pop	r18
    5194:	0f 90       	pop	r0
    5196:	0b be       	out	0x3b, r0	; 59
    5198:	0f 90       	pop	r0
    519a:	0f be       	out	0x3f, r0	; 63
    519c:	0f 90       	pop	r0
    519e:	1f 90       	pop	r1
    51a0:	18 95       	reti

000051a2 <__vector_37>:
    51a2:	1f 92       	push	r1
    51a4:	0f 92       	push	r0
    51a6:	0f b6       	in	r0, 0x3f	; 63
    51a8:	0f 92       	push	r0
    51aa:	11 24       	eor	r1, r1
    51ac:	0b b6       	in	r0, 0x3b	; 59
    51ae:	0f 92       	push	r0
    51b0:	2f 93       	push	r18
    51b2:	8f 93       	push	r24
    51b4:	9f 93       	push	r25
    51b6:	af 93       	push	r26
    51b8:	bf 93       	push	r27
    51ba:	ef 93       	push	r30
    51bc:	ff 93       	push	r31
    51be:	e0 91 8c 17 	lds	r30, 0x178C	; 0x80178c <_ser_handle+0x2>
    51c2:	f0 91 8d 17 	lds	r31, 0x178D	; 0x80178d <_ser_handle+0x3>
    51c6:	30 97       	sbiw	r30, 0x00	; 0
    51c8:	b9 f0       	breq	.+46     	; 0x51f8 <__vector_37+0x56>
    51ca:	02 80       	ldd	r0, Z+2	; 0x02
    51cc:	f3 81       	ldd	r31, Z+3	; 0x03
    51ce:	e0 2d       	mov	r30, r0
    51d0:	93 81       	ldd	r25, Z+3	; 0x03
    51d2:	82 81       	ldd	r24, Z+2	; 0x02
    51d4:	98 17       	cp	r25, r24
    51d6:	b1 f0       	breq	.+44     	; 0x5204 <__vector_37+0x62>
    51d8:	92 81       	ldd	r25, Z+2	; 0x02
    51da:	85 81       	ldd	r24, Z+5	; 0x05
    51dc:	28 2f       	mov	r18, r24
    51de:	26 95       	lsr	r18
    51e0:	29 23       	and	r18, r25
    51e2:	a0 81       	ld	r26, Z
    51e4:	b1 81       	ldd	r27, Z+1	; 0x01
    51e6:	a2 0f       	add	r26, r18
    51e8:	b1 1d       	adc	r27, r1
    51ea:	2c 91       	ld	r18, X
    51ec:	9f 5f       	subi	r25, 0xFF	; 255
    51ee:	89 23       	and	r24, r25
    51f0:	82 83       	std	Z+2, r24	; 0x02
    51f2:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    51f6:	0b c0       	rjmp	.+22     	; 0x520e <__vector_37+0x6c>
    51f8:	e9 ec       	ldi	r30, 0xC9	; 201
    51fa:	f0 e0       	ldi	r31, 0x00	; 0
    51fc:	80 81       	ld	r24, Z
    51fe:	8f 7d       	andi	r24, 0xDF	; 223
    5200:	80 83       	st	Z, r24
    5202:	05 c0       	rjmp	.+10     	; 0x520e <__vector_37+0x6c>
    5204:	e9 ec       	ldi	r30, 0xC9	; 201
    5206:	f0 e0       	ldi	r31, 0x00	; 0
    5208:	80 81       	ld	r24, Z
    520a:	8f 7d       	andi	r24, 0xDF	; 223
    520c:	80 83       	st	Z, r24
    520e:	ff 91       	pop	r31
    5210:	ef 91       	pop	r30
    5212:	bf 91       	pop	r27
    5214:	af 91       	pop	r26
    5216:	9f 91       	pop	r25
    5218:	8f 91       	pop	r24
    521a:	2f 91       	pop	r18
    521c:	0f 90       	pop	r0
    521e:	0b be       	out	0x3b, r0	; 59
    5220:	0f 90       	pop	r0
    5222:	0f be       	out	0x3f, r0	; 63
    5224:	0f 90       	pop	r0
    5226:	1f 90       	pop	r1
    5228:	18 95       	reti

0000522a <__vector_51>:
    522a:	1f 92       	push	r1
    522c:	0f 92       	push	r0
    522e:	0f b6       	in	r0, 0x3f	; 63
    5230:	0f 92       	push	r0
    5232:	11 24       	eor	r1, r1
    5234:	0b b6       	in	r0, 0x3b	; 59
    5236:	0f 92       	push	r0
    5238:	2f 93       	push	r18
    523a:	3f 93       	push	r19
    523c:	4f 93       	push	r20
    523e:	5f 93       	push	r21
    5240:	6f 93       	push	r22
    5242:	7f 93       	push	r23
    5244:	8f 93       	push	r24
    5246:	9f 93       	push	r25
    5248:	af 93       	push	r26
    524a:	bf 93       	push	r27
    524c:	cf 93       	push	r28
    524e:	df 93       	push	r29
    5250:	ef 93       	push	r30
    5252:	ff 93       	push	r31
    5254:	a0 91 8e 17 	lds	r26, 0x178E	; 0x80178e <_ser_handle+0x4>
    5258:	b0 91 8f 17 	lds	r27, 0x178F	; 0x80178f <_ser_handle+0x5>
    525c:	10 97       	sbiw	r26, 0x00	; 0
    525e:	11 f1       	breq	.+68     	; 0x52a4 <__vector_51+0x7a>
    5260:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5264:	14 96       	adiw	r26, 0x04	; 4
    5266:	ed 91       	ld	r30, X+
    5268:	fc 91       	ld	r31, X
    526a:	15 97       	sbiw	r26, 0x05	; 5
    526c:	93 81       	ldd	r25, Z+3	; 0x03
    526e:	82 81       	ldd	r24, Z+2	; 0x02
    5270:	25 81       	ldd	r18, Z+5	; 0x05
    5272:	98 1b       	sub	r25, r24
    5274:	92 23       	and	r25, r18
    5276:	84 81       	ldd	r24, Z+4	; 0x04
    5278:	98 17       	cp	r25, r24
    527a:	61 f0       	breq	.+24     	; 0x5294 <__vector_51+0x6a>
    527c:	83 81       	ldd	r24, Z+3	; 0x03
    527e:	26 95       	lsr	r18
    5280:	28 23       	and	r18, r24
    5282:	c0 81       	ld	r28, Z
    5284:	d1 81       	ldd	r29, Z+1	; 0x01
    5286:	c2 0f       	add	r28, r18
    5288:	d1 1d       	adc	r29, r1
    528a:	68 83       	st	Y, r22
    528c:	8f 5f       	subi	r24, 0xFF	; 255
    528e:	95 81       	ldd	r25, Z+5	; 0x05
    5290:	89 23       	and	r24, r25
    5292:	83 83       	std	Z+3, r24	; 0x03
    5294:	16 96       	adiw	r26, 0x06	; 6
    5296:	ed 91       	ld	r30, X+
    5298:	fc 91       	ld	r31, X
    529a:	17 97       	sbiw	r26, 0x07	; 7
    529c:	30 97       	sbiw	r30, 0x00	; 0
    529e:	11 f0       	breq	.+4      	; 0x52a4 <__vector_51+0x7a>
    52a0:	cd 01       	movw	r24, r26
    52a2:	19 95       	eicall
    52a4:	ff 91       	pop	r31
    52a6:	ef 91       	pop	r30
    52a8:	df 91       	pop	r29
    52aa:	cf 91       	pop	r28
    52ac:	bf 91       	pop	r27
    52ae:	af 91       	pop	r26
    52b0:	9f 91       	pop	r25
    52b2:	8f 91       	pop	r24
    52b4:	7f 91       	pop	r23
    52b6:	6f 91       	pop	r22
    52b8:	5f 91       	pop	r21
    52ba:	4f 91       	pop	r20
    52bc:	3f 91       	pop	r19
    52be:	2f 91       	pop	r18
    52c0:	0f 90       	pop	r0
    52c2:	0b be       	out	0x3b, r0	; 59
    52c4:	0f 90       	pop	r0
    52c6:	0f be       	out	0x3f, r0	; 63
    52c8:	0f 90       	pop	r0
    52ca:	1f 90       	pop	r1
    52cc:	18 95       	reti

000052ce <__vector_52>:
    52ce:	1f 92       	push	r1
    52d0:	0f 92       	push	r0
    52d2:	0f b6       	in	r0, 0x3f	; 63
    52d4:	0f 92       	push	r0
    52d6:	11 24       	eor	r1, r1
    52d8:	0b b6       	in	r0, 0x3b	; 59
    52da:	0f 92       	push	r0
    52dc:	2f 93       	push	r18
    52de:	8f 93       	push	r24
    52e0:	9f 93       	push	r25
    52e2:	af 93       	push	r26
    52e4:	bf 93       	push	r27
    52e6:	ef 93       	push	r30
    52e8:	ff 93       	push	r31
    52ea:	e0 91 8e 17 	lds	r30, 0x178E	; 0x80178e <_ser_handle+0x4>
    52ee:	f0 91 8f 17 	lds	r31, 0x178F	; 0x80178f <_ser_handle+0x5>
    52f2:	30 97       	sbiw	r30, 0x00	; 0
    52f4:	b9 f0       	breq	.+46     	; 0x5324 <__vector_52+0x56>
    52f6:	02 80       	ldd	r0, Z+2	; 0x02
    52f8:	f3 81       	ldd	r31, Z+3	; 0x03
    52fa:	e0 2d       	mov	r30, r0
    52fc:	93 81       	ldd	r25, Z+3	; 0x03
    52fe:	82 81       	ldd	r24, Z+2	; 0x02
    5300:	98 17       	cp	r25, r24
    5302:	b1 f0       	breq	.+44     	; 0x5330 <__vector_52+0x62>
    5304:	92 81       	ldd	r25, Z+2	; 0x02
    5306:	85 81       	ldd	r24, Z+5	; 0x05
    5308:	28 2f       	mov	r18, r24
    530a:	26 95       	lsr	r18
    530c:	29 23       	and	r18, r25
    530e:	a0 81       	ld	r26, Z
    5310:	b1 81       	ldd	r27, Z+1	; 0x01
    5312:	a2 0f       	add	r26, r18
    5314:	b1 1d       	adc	r27, r1
    5316:	2c 91       	ld	r18, X
    5318:	9f 5f       	subi	r25, 0xFF	; 255
    531a:	89 23       	and	r24, r25
    531c:	82 83       	std	Z+2, r24	; 0x02
    531e:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5322:	0b c0       	rjmp	.+22     	; 0x533a <__vector_52+0x6c>
    5324:	e1 ed       	ldi	r30, 0xD1	; 209
    5326:	f0 e0       	ldi	r31, 0x00	; 0
    5328:	80 81       	ld	r24, Z
    532a:	8f 7d       	andi	r24, 0xDF	; 223
    532c:	80 83       	st	Z, r24
    532e:	05 c0       	rjmp	.+10     	; 0x533a <__vector_52+0x6c>
    5330:	e1 ed       	ldi	r30, 0xD1	; 209
    5332:	f0 e0       	ldi	r31, 0x00	; 0
    5334:	80 81       	ld	r24, Z
    5336:	8f 7d       	andi	r24, 0xDF	; 223
    5338:	80 83       	st	Z, r24
    533a:	ff 91       	pop	r31
    533c:	ef 91       	pop	r30
    533e:	bf 91       	pop	r27
    5340:	af 91       	pop	r26
    5342:	9f 91       	pop	r25
    5344:	8f 91       	pop	r24
    5346:	2f 91       	pop	r18
    5348:	0f 90       	pop	r0
    534a:	0b be       	out	0x3b, r0	; 59
    534c:	0f 90       	pop	r0
    534e:	0f be       	out	0x3f, r0	; 63
    5350:	0f 90       	pop	r0
    5352:	1f 90       	pop	r1
    5354:	18 95       	reti

00005356 <__vector_54>:
    5356:	1f 92       	push	r1
    5358:	0f 92       	push	r0
    535a:	0f b6       	in	r0, 0x3f	; 63
    535c:	0f 92       	push	r0
    535e:	11 24       	eor	r1, r1
    5360:	0b b6       	in	r0, 0x3b	; 59
    5362:	0f 92       	push	r0
    5364:	2f 93       	push	r18
    5366:	3f 93       	push	r19
    5368:	4f 93       	push	r20
    536a:	5f 93       	push	r21
    536c:	6f 93       	push	r22
    536e:	7f 93       	push	r23
    5370:	8f 93       	push	r24
    5372:	9f 93       	push	r25
    5374:	af 93       	push	r26
    5376:	bf 93       	push	r27
    5378:	cf 93       	push	r28
    537a:	df 93       	push	r29
    537c:	ef 93       	push	r30
    537e:	ff 93       	push	r31
    5380:	a0 91 90 17 	lds	r26, 0x1790	; 0x801790 <_ser_handle+0x6>
    5384:	b0 91 91 17 	lds	r27, 0x1791	; 0x801791 <_ser_handle+0x7>
    5388:	10 97       	sbiw	r26, 0x00	; 0
    538a:	11 f1       	breq	.+68     	; 0x53d0 <__vector_54+0x7a>
    538c:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5390:	14 96       	adiw	r26, 0x04	; 4
    5392:	ed 91       	ld	r30, X+
    5394:	fc 91       	ld	r31, X
    5396:	15 97       	sbiw	r26, 0x05	; 5
    5398:	93 81       	ldd	r25, Z+3	; 0x03
    539a:	82 81       	ldd	r24, Z+2	; 0x02
    539c:	25 81       	ldd	r18, Z+5	; 0x05
    539e:	98 1b       	sub	r25, r24
    53a0:	92 23       	and	r25, r18
    53a2:	84 81       	ldd	r24, Z+4	; 0x04
    53a4:	98 17       	cp	r25, r24
    53a6:	61 f0       	breq	.+24     	; 0x53c0 <__vector_54+0x6a>
    53a8:	83 81       	ldd	r24, Z+3	; 0x03
    53aa:	26 95       	lsr	r18
    53ac:	28 23       	and	r18, r24
    53ae:	c0 81       	ld	r28, Z
    53b0:	d1 81       	ldd	r29, Z+1	; 0x01
    53b2:	c2 0f       	add	r28, r18
    53b4:	d1 1d       	adc	r29, r1
    53b6:	68 83       	st	Y, r22
    53b8:	8f 5f       	subi	r24, 0xFF	; 255
    53ba:	95 81       	ldd	r25, Z+5	; 0x05
    53bc:	89 23       	and	r24, r25
    53be:	83 83       	std	Z+3, r24	; 0x03
    53c0:	16 96       	adiw	r26, 0x06	; 6
    53c2:	ed 91       	ld	r30, X+
    53c4:	fc 91       	ld	r31, X
    53c6:	17 97       	sbiw	r26, 0x07	; 7
    53c8:	30 97       	sbiw	r30, 0x00	; 0
    53ca:	11 f0       	breq	.+4      	; 0x53d0 <__vector_54+0x7a>
    53cc:	cd 01       	movw	r24, r26
    53ce:	19 95       	eicall
    53d0:	ff 91       	pop	r31
    53d2:	ef 91       	pop	r30
    53d4:	df 91       	pop	r29
    53d6:	cf 91       	pop	r28
    53d8:	bf 91       	pop	r27
    53da:	af 91       	pop	r26
    53dc:	9f 91       	pop	r25
    53de:	8f 91       	pop	r24
    53e0:	7f 91       	pop	r23
    53e2:	6f 91       	pop	r22
    53e4:	5f 91       	pop	r21
    53e6:	4f 91       	pop	r20
    53e8:	3f 91       	pop	r19
    53ea:	2f 91       	pop	r18
    53ec:	0f 90       	pop	r0
    53ee:	0b be       	out	0x3b, r0	; 59
    53f0:	0f 90       	pop	r0
    53f2:	0f be       	out	0x3f, r0	; 63
    53f4:	0f 90       	pop	r0
    53f6:	1f 90       	pop	r1
    53f8:	18 95       	reti

000053fa <__vector_55>:
    53fa:	1f 92       	push	r1
    53fc:	0f 92       	push	r0
    53fe:	0f b6       	in	r0, 0x3f	; 63
    5400:	0f 92       	push	r0
    5402:	11 24       	eor	r1, r1
    5404:	0b b6       	in	r0, 0x3b	; 59
    5406:	0f 92       	push	r0
    5408:	2f 93       	push	r18
    540a:	8f 93       	push	r24
    540c:	9f 93       	push	r25
    540e:	af 93       	push	r26
    5410:	bf 93       	push	r27
    5412:	ef 93       	push	r30
    5414:	ff 93       	push	r31
    5416:	e0 91 90 17 	lds	r30, 0x1790	; 0x801790 <_ser_handle+0x6>
    541a:	f0 91 91 17 	lds	r31, 0x1791	; 0x801791 <_ser_handle+0x7>
    541e:	30 97       	sbiw	r30, 0x00	; 0
    5420:	b9 f0       	breq	.+46     	; 0x5450 <__vector_55+0x56>
    5422:	02 80       	ldd	r0, Z+2	; 0x02
    5424:	f3 81       	ldd	r31, Z+3	; 0x03
    5426:	e0 2d       	mov	r30, r0
    5428:	93 81       	ldd	r25, Z+3	; 0x03
    542a:	82 81       	ldd	r24, Z+2	; 0x02
    542c:	98 17       	cp	r25, r24
    542e:	b1 f0       	breq	.+44     	; 0x545c <__vector_55+0x62>
    5430:	92 81       	ldd	r25, Z+2	; 0x02
    5432:	85 81       	ldd	r24, Z+5	; 0x05
    5434:	28 2f       	mov	r18, r24
    5436:	26 95       	lsr	r18
    5438:	29 23       	and	r18, r25
    543a:	a0 81       	ld	r26, Z
    543c:	b1 81       	ldd	r27, Z+1	; 0x01
    543e:	a2 0f       	add	r26, r18
    5440:	b1 1d       	adc	r27, r1
    5442:	2c 91       	ld	r18, X
    5444:	9f 5f       	subi	r25, 0xFF	; 255
    5446:	89 23       	and	r24, r25
    5448:	82 83       	std	Z+2, r24	; 0x02
    544a:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    544e:	0b c0       	rjmp	.+22     	; 0x5466 <__vector_55+0x6c>
    5450:	e1 e3       	ldi	r30, 0x31	; 49
    5452:	f1 e0       	ldi	r31, 0x01	; 1
    5454:	80 81       	ld	r24, Z
    5456:	8f 7d       	andi	r24, 0xDF	; 223
    5458:	80 83       	st	Z, r24
    545a:	05 c0       	rjmp	.+10     	; 0x5466 <__vector_55+0x6c>
    545c:	e1 e3       	ldi	r30, 0x31	; 49
    545e:	f1 e0       	ldi	r31, 0x01	; 1
    5460:	80 81       	ld	r24, Z
    5462:	8f 7d       	andi	r24, 0xDF	; 223
    5464:	80 83       	st	Z, r24
    5466:	ff 91       	pop	r31
    5468:	ef 91       	pop	r30
    546a:	bf 91       	pop	r27
    546c:	af 91       	pop	r26
    546e:	9f 91       	pop	r25
    5470:	8f 91       	pop	r24
    5472:	2f 91       	pop	r18
    5474:	0f 90       	pop	r0
    5476:	0b be       	out	0x3b, r0	; 59
    5478:	0f 90       	pop	r0
    547a:	0f be       	out	0x3f, r0	; 63
    547c:	0f 90       	pop	r0
    547e:	1f 90       	pop	r1
    5480:	18 95       	reti

00005482 <usart_getchar>:
    5482:	cf 93       	push	r28
    5484:	df 93       	push	r29
    5486:	1f 92       	push	r1
    5488:	cd b7       	in	r28, 0x3d	; 61
    548a:	de b7       	in	r29, 0x3e	; 62
    548c:	be 01       	movw	r22, r28
    548e:	6f 5f       	subi	r22, 0xFF	; 255
    5490:	7f 4f       	sbci	r23, 0xFF	; 255
    5492:	80 91 92 17 	lds	r24, 0x1792	; 0x801792 <_com_serial_instance>
    5496:	90 91 93 17 	lds	r25, 0x1793	; 0x801793 <_com_serial_instance+0x1>
    549a:	7b dd       	rcall	.-1290   	; 0x4f92 <serial_getByte>
    549c:	81 11       	cpse	r24, r1
    549e:	f6 cf       	rjmp	.-20     	; 0x548c <usart_getchar+0xa>
    54a0:	89 81       	ldd	r24, Y+1	; 0x01
    54a2:	90 e0       	ldi	r25, 0x00	; 0
    54a4:	0f 90       	pop	r0
    54a6:	df 91       	pop	r29
    54a8:	cf 91       	pop	r28
    54aa:	08 95       	ret

000054ac <usart_putchar>:
    54ac:	68 2f       	mov	r22, r24
    54ae:	80 91 92 17 	lds	r24, 0x1792	; 0x801792 <_com_serial_instance>
    54b2:	90 91 93 17 	lds	r25, 0x1793	; 0x801793 <_com_serial_instance+0x1>
    54b6:	ed dc       	rcall	.-1574   	; 0x4e92 <serial_sendByte>
    54b8:	80 e0       	ldi	r24, 0x00	; 0
    54ba:	90 e0       	ldi	r25, 0x00	; 0
    54bc:	08 95       	ret

000054be <stdio_initialise>:
    54be:	8f 92       	push	r8
    54c0:	9f 92       	push	r9
    54c2:	af 92       	push	r10
    54c4:	cf 92       	push	r12
    54c6:	ef 92       	push	r14
    54c8:	0f 93       	push	r16
    54ca:	81 2c       	mov	r8, r1
    54cc:	91 2c       	mov	r9, r1
    54ce:	68 94       	set
    54d0:	aa 24       	eor	r10, r10
    54d2:	a7 f8       	bld	r10, 7
    54d4:	68 94       	set
    54d6:	cc 24       	eor	r12, r12
    54d8:	c7 f8       	bld	r12, 7
    54da:	e1 2c       	mov	r14, r1
    54dc:	00 e0       	ldi	r16, 0x00	; 0
    54de:	23 e0       	ldi	r18, 0x03	; 3
    54e0:	40 e0       	ldi	r20, 0x00	; 0
    54e2:	51 ee       	ldi	r21, 0xE1	; 225
    54e4:	60 e0       	ldi	r22, 0x00	; 0
    54e6:	70 e0       	ldi	r23, 0x00	; 0
    54e8:	32 dc       	rcall	.-1948   	; 0x4d4e <serial_create>
    54ea:	90 93 93 17 	sts	0x1793, r25	; 0x801793 <_com_serial_instance+0x1>
    54ee:	80 93 92 17 	sts	0x1792, r24	; 0x801792 <_com_serial_instance>
    54f2:	ed ec       	ldi	r30, 0xCD	; 205
    54f4:	f7 e1       	ldi	r31, 0x17	; 23
    54f6:	83 e1       	ldi	r24, 0x13	; 19
    54f8:	92 e0       	ldi	r25, 0x02	; 2
    54fa:	91 83       	std	Z+1, r25	; 0x01
    54fc:	80 83       	st	Z, r24
    54fe:	93 83       	std	Z+3, r25	; 0x03
    5500:	82 83       	std	Z+2, r24	; 0x02
    5502:	0f 91       	pop	r16
    5504:	ef 90       	pop	r14
    5506:	cf 90       	pop	r12
    5508:	af 90       	pop	r10
    550a:	9f 90       	pop	r9
    550c:	8f 90       	pop	r8
    550e:	08 95       	ret

00005510 <_turn_off>:
    5510:	90 e0       	ldi	r25, 0x00	; 0
    5512:	fc 01       	movw	r30, r24
    5514:	ee 0f       	add	r30, r30
    5516:	ff 1f       	adc	r31, r31
    5518:	e8 0f       	add	r30, r24
    551a:	f9 1f       	adc	r31, r25
    551c:	ee 0f       	add	r30, r30
    551e:	ff 1f       	adc	r31, r31
    5520:	ec 56       	subi	r30, 0x6C	; 108
    5522:	f8 4e       	sbci	r31, 0xE8	; 232
    5524:	23 81       	ldd	r18, Z+3	; 0x03
    5526:	21 11       	cpse	r18, r1
    5528:	1f c0       	rjmp	.+62     	; 0x5568 <_turn_off+0x58>
    552a:	9c 01       	movw	r18, r24
    552c:	22 0f       	add	r18, r18
    552e:	33 1f       	adc	r19, r19
    5530:	f9 01       	movw	r30, r18
    5532:	e8 0f       	add	r30, r24
    5534:	f9 1f       	adc	r31, r25
    5536:	ee 0f       	add	r30, r30
    5538:	ff 1f       	adc	r31, r31
    553a:	ec 56       	subi	r30, 0x6C	; 108
    553c:	f8 4e       	sbci	r31, 0xE8	; 232
    553e:	a0 81       	ld	r26, Z
    5540:	b1 81       	ldd	r27, Z+1	; 0x01
    5542:	4c 91       	ld	r20, X
    5544:	f9 01       	movw	r30, r18
    5546:	e8 0f       	add	r30, r24
    5548:	f9 1f       	adc	r31, r25
    554a:	ee 0f       	add	r30, r30
    554c:	ff 1f       	adc	r31, r31
    554e:	ec 56       	subi	r30, 0x6C	; 108
    5550:	f8 4e       	sbci	r31, 0xE8	; 232
    5552:	81 e0       	ldi	r24, 0x01	; 1
    5554:	90 e0       	ldi	r25, 0x00	; 0
    5556:	02 80       	ldd	r0, Z+2	; 0x02
    5558:	02 c0       	rjmp	.+4      	; 0x555e <_turn_off+0x4e>
    555a:	88 0f       	add	r24, r24
    555c:	99 1f       	adc	r25, r25
    555e:	0a 94       	dec	r0
    5560:	e2 f7       	brpl	.-8      	; 0x555a <_turn_off+0x4a>
    5562:	84 2b       	or	r24, r20
    5564:	8c 93       	st	X, r24
    5566:	08 95       	ret
    5568:	fc 01       	movw	r30, r24
    556a:	ee 0f       	add	r30, r30
    556c:	ff 1f       	adc	r31, r31
    556e:	df 01       	movw	r26, r30
    5570:	a8 0f       	add	r26, r24
    5572:	b9 1f       	adc	r27, r25
    5574:	aa 0f       	add	r26, r26
    5576:	bb 1f       	adc	r27, r27
    5578:	ac 56       	subi	r26, 0x6C	; 108
    557a:	b8 4e       	sbci	r27, 0xE8	; 232
    557c:	0d 90       	ld	r0, X+
    557e:	bc 91       	ld	r27, X
    5580:	a0 2d       	mov	r26, r0
    5582:	2c 91       	ld	r18, X
    5584:	e8 0f       	add	r30, r24
    5586:	f9 1f       	adc	r31, r25
    5588:	ee 0f       	add	r30, r30
    558a:	ff 1f       	adc	r31, r31
    558c:	ec 56       	subi	r30, 0x6C	; 108
    558e:	f8 4e       	sbci	r31, 0xE8	; 232
    5590:	81 e0       	ldi	r24, 0x01	; 1
    5592:	90 e0       	ldi	r25, 0x00	; 0
    5594:	02 80       	ldd	r0, Z+2	; 0x02
    5596:	02 c0       	rjmp	.+4      	; 0x559c <_turn_off+0x8c>
    5598:	88 0f       	add	r24, r24
    559a:	99 1f       	adc	r25, r25
    559c:	0a 94       	dec	r0
    559e:	e2 f7       	brpl	.-8      	; 0x5598 <_turn_off+0x88>
    55a0:	80 95       	com	r24
    55a2:	82 23       	and	r24, r18
    55a4:	8c 93       	st	X, r24
    55a6:	08 95       	ret

000055a8 <_turn_on>:
    55a8:	90 e0       	ldi	r25, 0x00	; 0
    55aa:	fc 01       	movw	r30, r24
    55ac:	ee 0f       	add	r30, r30
    55ae:	ff 1f       	adc	r31, r31
    55b0:	e8 0f       	add	r30, r24
    55b2:	f9 1f       	adc	r31, r25
    55b4:	ee 0f       	add	r30, r30
    55b6:	ff 1f       	adc	r31, r31
    55b8:	ec 56       	subi	r30, 0x6C	; 108
    55ba:	f8 4e       	sbci	r31, 0xE8	; 232
    55bc:	23 81       	ldd	r18, Z+3	; 0x03
    55be:	21 11       	cpse	r18, r1
    55c0:	20 c0       	rjmp	.+64     	; 0x5602 <_turn_on+0x5a>
    55c2:	9c 01       	movw	r18, r24
    55c4:	22 0f       	add	r18, r18
    55c6:	33 1f       	adc	r19, r19
    55c8:	f9 01       	movw	r30, r18
    55ca:	e8 0f       	add	r30, r24
    55cc:	f9 1f       	adc	r31, r25
    55ce:	ee 0f       	add	r30, r30
    55d0:	ff 1f       	adc	r31, r31
    55d2:	ec 56       	subi	r30, 0x6C	; 108
    55d4:	f8 4e       	sbci	r31, 0xE8	; 232
    55d6:	a0 81       	ld	r26, Z
    55d8:	b1 81       	ldd	r27, Z+1	; 0x01
    55da:	4c 91       	ld	r20, X
    55dc:	f9 01       	movw	r30, r18
    55de:	e8 0f       	add	r30, r24
    55e0:	f9 1f       	adc	r31, r25
    55e2:	ee 0f       	add	r30, r30
    55e4:	ff 1f       	adc	r31, r31
    55e6:	ec 56       	subi	r30, 0x6C	; 108
    55e8:	f8 4e       	sbci	r31, 0xE8	; 232
    55ea:	81 e0       	ldi	r24, 0x01	; 1
    55ec:	90 e0       	ldi	r25, 0x00	; 0
    55ee:	02 80       	ldd	r0, Z+2	; 0x02
    55f0:	02 c0       	rjmp	.+4      	; 0x55f6 <_turn_on+0x4e>
    55f2:	88 0f       	add	r24, r24
    55f4:	99 1f       	adc	r25, r25
    55f6:	0a 94       	dec	r0
    55f8:	e2 f7       	brpl	.-8      	; 0x55f2 <_turn_on+0x4a>
    55fa:	80 95       	com	r24
    55fc:	84 23       	and	r24, r20
    55fe:	8c 93       	st	X, r24
    5600:	08 95       	ret
    5602:	fc 01       	movw	r30, r24
    5604:	ee 0f       	add	r30, r30
    5606:	ff 1f       	adc	r31, r31
    5608:	df 01       	movw	r26, r30
    560a:	a8 0f       	add	r26, r24
    560c:	b9 1f       	adc	r27, r25
    560e:	aa 0f       	add	r26, r26
    5610:	bb 1f       	adc	r27, r27
    5612:	ac 56       	subi	r26, 0x6C	; 108
    5614:	b8 4e       	sbci	r27, 0xE8	; 232
    5616:	0d 90       	ld	r0, X+
    5618:	bc 91       	ld	r27, X
    561a:	a0 2d       	mov	r26, r0
    561c:	2c 91       	ld	r18, X
    561e:	e8 0f       	add	r30, r24
    5620:	f9 1f       	adc	r31, r25
    5622:	ee 0f       	add	r30, r30
    5624:	ff 1f       	adc	r31, r31
    5626:	ec 56       	subi	r30, 0x6C	; 108
    5628:	f8 4e       	sbci	r31, 0xE8	; 232
    562a:	81 e0       	ldi	r24, 0x01	; 1
    562c:	90 e0       	ldi	r25, 0x00	; 0
    562e:	02 80       	ldd	r0, Z+2	; 0x02
    5630:	02 c0       	rjmp	.+4      	; 0x5636 <_turn_on+0x8e>
    5632:	88 0f       	add	r24, r24
    5634:	99 1f       	adc	r25, r25
    5636:	0a 94       	dec	r0
    5638:	e2 f7       	brpl	.-8      	; 0x5632 <_turn_on+0x8a>
    563a:	82 2b       	or	r24, r18
    563c:	8c 93       	st	X, r24
    563e:	08 95       	ret

00005640 <_hal_led_task>:
    5640:	cc 24       	eor	r12, r12
    5642:	c3 94       	inc	r12
    5644:	d1 2c       	mov	r13, r1
    5646:	68 94       	set
    5648:	bb 24       	eor	r11, r11
    564a:	b2 f8       	bld	r11, 2
    564c:	c4 e9       	ldi	r28, 0x94	; 148
    564e:	d7 e1       	ldi	r29, 0x17	; 23
    5650:	10 e0       	ldi	r17, 0x00	; 0
    5652:	8c 81       	ldd	r24, Y+4	; 0x04
    5654:	81 30       	cpi	r24, 0x01	; 1
    5656:	81 f0       	breq	.+32     	; 0x5678 <_hal_led_task+0x38>
    5658:	18 f1       	brcs	.+70     	; 0x56a0 <_hal_led_task+0x60>
    565a:	82 30       	cpi	r24, 0x02	; 2
    565c:	61 f5       	brne	.+88     	; 0x56b6 <_hal_led_task+0x76>
    565e:	e8 81       	ld	r30, Y
    5660:	f9 81       	ldd	r31, Y+1	; 0x01
    5662:	20 81       	ld	r18, Z
    5664:	c6 01       	movw	r24, r12
    5666:	0a 80       	ldd	r0, Y+2	; 0x02
    5668:	02 c0       	rjmp	.+4      	; 0x566e <_hal_led_task+0x2e>
    566a:	88 0f       	add	r24, r24
    566c:	99 1f       	adc	r25, r25
    566e:	0a 94       	dec	r0
    5670:	e2 f7       	brpl	.-8      	; 0x566a <_hal_led_task+0x2a>
    5672:	82 27       	eor	r24, r18
    5674:	80 83       	st	Z, r24
    5676:	1f c0       	rjmp	.+62     	; 0x56b6 <_hal_led_task+0x76>
    5678:	8d 81       	ldd	r24, Y+5	; 0x05
    567a:	8f 5f       	subi	r24, 0xFF	; 255
    567c:	8a 30       	cpi	r24, 0x0A	; 10
    567e:	10 f4       	brcc	.+4      	; 0x5684 <_hal_led_task+0x44>
    5680:	8d 83       	std	Y+5, r24	; 0x05
    5682:	19 c0       	rjmp	.+50     	; 0x56b6 <_hal_led_task+0x76>
    5684:	1d 82       	std	Y+5, r1	; 0x05
    5686:	e8 81       	ld	r30, Y
    5688:	f9 81       	ldd	r31, Y+1	; 0x01
    568a:	20 81       	ld	r18, Z
    568c:	c6 01       	movw	r24, r12
    568e:	0a 80       	ldd	r0, Y+2	; 0x02
    5690:	02 c0       	rjmp	.+4      	; 0x5696 <_hal_led_task+0x56>
    5692:	88 0f       	add	r24, r24
    5694:	99 1f       	adc	r25, r25
    5696:	0a 94       	dec	r0
    5698:	e2 f7       	brpl	.-8      	; 0x5692 <_hal_led_task+0x52>
    569a:	82 27       	eor	r24, r18
    569c:	80 83       	st	Z, r24
    569e:	0b c0       	rjmp	.+22     	; 0x56b6 <_hal_led_task+0x76>
    56a0:	0d 81       	ldd	r16, Y+5	; 0x05
    56a2:	00 23       	and	r16, r16
    56a4:	29 f0       	breq	.+10     	; 0x56b0 <_hal_led_task+0x70>
    56a6:	81 2f       	mov	r24, r17
    56a8:	7f df       	rcall	.-258    	; 0x55a8 <_turn_on>
    56aa:	01 50       	subi	r16, 0x01	; 1
    56ac:	0d 83       	std	Y+5, r16	; 0x05
    56ae:	03 c0       	rjmp	.+6      	; 0x56b6 <_hal_led_task+0x76>
    56b0:	bc 82       	std	Y+4, r11	; 0x04
    56b2:	81 2f       	mov	r24, r17
    56b4:	2d df       	rcall	.-422    	; 0x5510 <_turn_off>
    56b6:	1f 5f       	subi	r17, 0xFF	; 255
    56b8:	26 96       	adiw	r28, 0x06	; 6
    56ba:	14 30       	cpi	r17, 0x04	; 4
    56bc:	51 f6       	brne	.-108    	; 0x5652 <_hal_led_task+0x12>
    56be:	65 e0       	ldi	r22, 0x05	; 5
    56c0:	70 e0       	ldi	r23, 0x00	; 0
    56c2:	80 e0       	ldi	r24, 0x00	; 0
    56c4:	90 e0       	ldi	r25, 0x00	; 0
    56c6:	0e 94 71 13 	call	0x26e2	; 0x26e2 <vTaskDelay>
    56ca:	c0 cf       	rjmp	.-128    	; 0x564c <_hal_led_task+0xc>

000056cc <status_leds_initialise>:
    56cc:	ef 92       	push	r14
    56ce:	ff 92       	push	r15
    56d0:	0f 93       	push	r16
    56d2:	1f 93       	push	r17
    56d4:	cf 93       	push	r28
    56d6:	df 93       	push	r29
    56d8:	08 2f       	mov	r16, r24
    56da:	80 e4       	ldi	r24, 0x40	; 64
    56dc:	87 b9       	out	0x07, r24	; 7
    56de:	c4 e9       	ldi	r28, 0x94	; 148
    56e0:	d7 e1       	ldi	r29, 0x17	; 23
    56e2:	0f 2e       	mov	r0, r31
    56e4:	f8 e2       	ldi	r31, 0x28	; 40
    56e6:	ef 2e       	mov	r14, r31
    56e8:	f1 2c       	mov	r15, r1
    56ea:	f0 2d       	mov	r31, r0
    56ec:	f9 82       	std	Y+1, r15	; 0x01
    56ee:	e8 82       	st	Y, r14
    56f0:	86 e0       	ldi	r24, 0x06	; 6
    56f2:	8a 83       	std	Y+2, r24	; 0x02
    56f4:	1b 82       	std	Y+3, r1	; 0x03
    56f6:	14 e0       	ldi	r17, 0x04	; 4
    56f8:	1c 83       	std	Y+4, r17	; 0x04
    56fa:	80 e0       	ldi	r24, 0x00	; 0
    56fc:	09 df       	rcall	.-494    	; 0x5510 <_turn_off>
    56fe:	80 e8       	ldi	r24, 0x80	; 128
    5700:	87 b9       	out	0x07, r24	; 7
    5702:	ff 82       	std	Y+7, r15	; 0x07
    5704:	ee 82       	std	Y+6, r14	; 0x06
    5706:	87 e0       	ldi	r24, 0x07	; 7
    5708:	88 87       	std	Y+8, r24	; 0x08
    570a:	19 86       	std	Y+9, r1	; 0x09
    570c:	1a 87       	std	Y+10, r17	; 0x0a
    570e:	81 e0       	ldi	r24, 0x01	; 1
    5710:	ff de       	rcall	.-514    	; 0x5510 <_turn_off>
    5712:	80 e2       	ldi	r24, 0x20	; 32
    5714:	83 bb       	out	0x13, r24	; 19
    5716:	84 e3       	ldi	r24, 0x34	; 52
    5718:	90 e0       	ldi	r25, 0x00	; 0
    571a:	9d 87       	std	Y+13, r25	; 0x0d
    571c:	8c 87       	std	Y+12, r24	; 0x0c
    571e:	85 e0       	ldi	r24, 0x05	; 5
    5720:	8e 87       	std	Y+14, r24	; 0x0e
    5722:	1f 86       	std	Y+15, r1	; 0x0f
    5724:	18 8b       	std	Y+16, r17	; 0x10
    5726:	82 e0       	ldi	r24, 0x02	; 2
    5728:	f3 de       	rcall	.-538    	; 0x5510 <_turn_off>
    572a:	80 e1       	ldi	r24, 0x10	; 16
    572c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    5730:	82 e0       	ldi	r24, 0x02	; 2
    5732:	91 e0       	ldi	r25, 0x01	; 1
    5734:	9b 8b       	std	Y+19, r25	; 0x13
    5736:	8a 8b       	std	Y+18, r24	; 0x12
    5738:	1c 8b       	std	Y+20, r17	; 0x14
    573a:	1d 8a       	std	Y+21, r1	; 0x15
    573c:	1e 8b       	std	Y+22, r17	; 0x16
    573e:	83 e0       	ldi	r24, 0x03	; 3
    5740:	e7 de       	rcall	.-562    	; 0x5510 <_turn_off>
    5742:	e1 2c       	mov	r14, r1
    5744:	f1 2c       	mov	r15, r1
    5746:	20 e0       	ldi	r18, 0x00	; 0
    5748:	30 e0       	ldi	r19, 0x00	; 0
    574a:	40 ec       	ldi	r20, 0xC0	; 192
    574c:	50 e0       	ldi	r21, 0x00	; 0
    574e:	69 e5       	ldi	r22, 0x59	; 89
    5750:	78 e0       	ldi	r23, 0x08	; 8
    5752:	80 e2       	ldi	r24, 0x20	; 32
    5754:	9b e2       	ldi	r25, 0x2B	; 43
    5756:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <xTaskCreate>
    575a:	df 91       	pop	r29
    575c:	cf 91       	pop	r28
    575e:	1f 91       	pop	r17
    5760:	0f 91       	pop	r16
    5762:	ff 90       	pop	r15
    5764:	ef 90       	pop	r14
    5766:	08 95       	ret

00005768 <status_leds_slowBlink>:
    5768:	cf 93       	push	r28
    576a:	df 93       	push	r29
    576c:	90 e0       	ldi	r25, 0x00	; 0
    576e:	fc 01       	movw	r30, r24
    5770:	ee 0f       	add	r30, r30
    5772:	ff 1f       	adc	r31, r31
    5774:	df 01       	movw	r26, r30
    5776:	a8 0f       	add	r26, r24
    5778:	b9 1f       	adc	r27, r25
    577a:	aa 0f       	add	r26, r26
    577c:	bb 1f       	adc	r27, r27
    577e:	ac 56       	subi	r26, 0x6C	; 108
    5780:	b8 4e       	sbci	r27, 0xE8	; 232
    5782:	cd 91       	ld	r28, X+
    5784:	dc 91       	ld	r29, X
    5786:	11 97       	sbiw	r26, 0x01	; 1
    5788:	48 81       	ld	r20, Y
    578a:	21 e0       	ldi	r18, 0x01	; 1
    578c:	30 e0       	ldi	r19, 0x00	; 0
    578e:	12 96       	adiw	r26, 0x02	; 2
    5790:	0c 90       	ld	r0, X
    5792:	12 97       	sbiw	r26, 0x02	; 2
    5794:	02 c0       	rjmp	.+4      	; 0x579a <status_leds_slowBlink+0x32>
    5796:	22 0f       	add	r18, r18
    5798:	33 1f       	adc	r19, r19
    579a:	0a 94       	dec	r0
    579c:	e2 f7       	brpl	.-8      	; 0x5796 <status_leds_slowBlink+0x2e>
    579e:	24 27       	eor	r18, r20
    57a0:	28 83       	st	Y, r18
    57a2:	fd 01       	movw	r30, r26
    57a4:	81 e0       	ldi	r24, 0x01	; 1
    57a6:	84 83       	std	Z+4, r24	; 0x04
    57a8:	df 91       	pop	r29
    57aa:	cf 91       	pop	r28
    57ac:	08 95       	ret

000057ae <status_leds_fastBlink>:
    57ae:	cf 93       	push	r28
    57b0:	df 93       	push	r29
    57b2:	90 e0       	ldi	r25, 0x00	; 0
    57b4:	fc 01       	movw	r30, r24
    57b6:	ee 0f       	add	r30, r30
    57b8:	ff 1f       	adc	r31, r31
    57ba:	df 01       	movw	r26, r30
    57bc:	a8 0f       	add	r26, r24
    57be:	b9 1f       	adc	r27, r25
    57c0:	aa 0f       	add	r26, r26
    57c2:	bb 1f       	adc	r27, r27
    57c4:	ac 56       	subi	r26, 0x6C	; 108
    57c6:	b8 4e       	sbci	r27, 0xE8	; 232
    57c8:	cd 91       	ld	r28, X+
    57ca:	dc 91       	ld	r29, X
    57cc:	11 97       	sbiw	r26, 0x01	; 1
    57ce:	48 81       	ld	r20, Y
    57d0:	21 e0       	ldi	r18, 0x01	; 1
    57d2:	30 e0       	ldi	r19, 0x00	; 0
    57d4:	12 96       	adiw	r26, 0x02	; 2
    57d6:	0c 90       	ld	r0, X
    57d8:	12 97       	sbiw	r26, 0x02	; 2
    57da:	02 c0       	rjmp	.+4      	; 0x57e0 <status_leds_fastBlink+0x32>
    57dc:	22 0f       	add	r18, r18
    57de:	33 1f       	adc	r19, r19
    57e0:	0a 94       	dec	r0
    57e2:	e2 f7       	brpl	.-8      	; 0x57dc <status_leds_fastBlink+0x2e>
    57e4:	24 27       	eor	r18, r20
    57e6:	28 83       	st	Y, r18
    57e8:	fd 01       	movw	r30, r26
    57ea:	82 e0       	ldi	r24, 0x02	; 2
    57ec:	84 83       	std	Z+4, r24	; 0x04
    57ee:	df 91       	pop	r29
    57f0:	cf 91       	pop	r28
    57f2:	08 95       	ret

000057f4 <status_leds_ledOn>:
    57f4:	28 2f       	mov	r18, r24
    57f6:	30 e0       	ldi	r19, 0x00	; 0
    57f8:	f9 01       	movw	r30, r18
    57fa:	ee 0f       	add	r30, r30
    57fc:	ff 1f       	adc	r31, r31
    57fe:	e2 0f       	add	r30, r18
    5800:	f3 1f       	adc	r31, r19
    5802:	ee 0f       	add	r30, r30
    5804:	ff 1f       	adc	r31, r31
    5806:	ec 56       	subi	r30, 0x6C	; 108
    5808:	f8 4e       	sbci	r31, 0xE8	; 232
    580a:	93 e0       	ldi	r25, 0x03	; 3
    580c:	94 83       	std	Z+4, r25	; 0x04
    580e:	cc ce       	rjmp	.-616    	; 0x55a8 <_turn_on>
    5810:	08 95       	ret

00005812 <status_leds_ledOff>:
    5812:	28 2f       	mov	r18, r24
    5814:	30 e0       	ldi	r19, 0x00	; 0
    5816:	f9 01       	movw	r30, r18
    5818:	ee 0f       	add	r30, r30
    581a:	ff 1f       	adc	r31, r31
    581c:	e2 0f       	add	r30, r18
    581e:	f3 1f       	adc	r31, r19
    5820:	ee 0f       	add	r30, r30
    5822:	ff 1f       	adc	r31, r31
    5824:	ec 56       	subi	r30, 0x6C	; 108
    5826:	f8 4e       	sbci	r31, 0xE8	; 232
    5828:	94 e0       	ldi	r25, 0x04	; 4
    582a:	94 83       	std	Z+4, r25	; 0x04
    582c:	71 ce       	rjmp	.-798    	; 0x5510 <_turn_off>
    582e:	08 95       	ret

00005830 <status_leds_longPuls>:
    5830:	90 e0       	ldi	r25, 0x00	; 0
    5832:	fc 01       	movw	r30, r24
    5834:	ee 0f       	add	r30, r30
    5836:	ff 1f       	adc	r31, r31
    5838:	df 01       	movw	r26, r30
    583a:	a8 0f       	add	r26, r24
    583c:	b9 1f       	adc	r27, r25
    583e:	aa 0f       	add	r26, r26
    5840:	bb 1f       	adc	r27, r27
    5842:	ac 56       	subi	r26, 0x6C	; 108
    5844:	b8 4e       	sbci	r27, 0xE8	; 232
    5846:	24 e0       	ldi	r18, 0x04	; 4
    5848:	15 96       	adiw	r26, 0x05	; 5
    584a:	2c 93       	st	X, r18
    584c:	15 97       	sbiw	r26, 0x05	; 5
    584e:	fd 01       	movw	r30, r26
    5850:	14 82       	std	Z+4, r1	; 0x04
    5852:	08 95       	ret

00005854 <status_leds_shortPuls>:
    5854:	90 e0       	ldi	r25, 0x00	; 0
    5856:	fc 01       	movw	r30, r24
    5858:	ee 0f       	add	r30, r30
    585a:	ff 1f       	adc	r31, r31
    585c:	df 01       	movw	r26, r30
    585e:	a8 0f       	add	r26, r24
    5860:	b9 1f       	adc	r27, r25
    5862:	aa 0f       	add	r26, r26
    5864:	bb 1f       	adc	r27, r27
    5866:	ac 56       	subi	r26, 0x6C	; 108
    5868:	b8 4e       	sbci	r27, 0xE8	; 232
    586a:	21 e0       	ldi	r18, 0x01	; 1
    586c:	15 96       	adiw	r26, 0x05	; 5
    586e:	2c 93       	st	X, r18
    5870:	15 97       	sbiw	r26, 0x05	; 5
    5872:	fd 01       	movw	r30, r26
    5874:	14 82       	std	Z+4, r1	; 0x04
    5876:	08 95       	ret

00005878 <_initTwiInterface>:
    5878:	80 91 ba 17 	lds	r24, 0x17BA	; 0x8017ba <_twiIsInitiated>
    587c:	81 11       	cpse	r24, r1
    587e:	0c c0       	rjmp	.+24     	; 0x5898 <_initTwiInterface+0x20>
    5880:	8c e0       	ldi	r24, 0x0C	; 12
    5882:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5886:	8f ef       	ldi	r24, 0xFF	; 255
    5888:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    588c:	84 e0       	ldi	r24, 0x04	; 4
    588e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5892:	81 e0       	ldi	r24, 0x01	; 1
    5894:	80 93 ba 17 	sts	0x17BA, r24	; 0x8017ba <_twiIsInitiated>
    5898:	08 95       	ret

0000589a <twiCreate>:
    589a:	af 92       	push	r10
    589c:	bf 92       	push	r11
    589e:	cf 92       	push	r12
    58a0:	df 92       	push	r13
    58a2:	ef 92       	push	r14
    58a4:	ff 92       	push	r15
    58a6:	0f 93       	push	r16
    58a8:	1f 93       	push	r17
    58aa:	cf 93       	push	r28
    58ac:	df 93       	push	r29
    58ae:	a8 2e       	mov	r10, r24
    58b0:	b6 2e       	mov	r11, r22
    58b2:	69 01       	movw	r12, r18
    58b4:	7a 01       	movw	r14, r20
    58b6:	84 e0       	ldi	r24, 0x04	; 4
    58b8:	90 e0       	ldi	r25, 0x00	; 0
    58ba:	70 d7       	rcall	.+3808   	; 0x679c <malloc>
    58bc:	ec 01       	movw	r28, r24
    58be:	89 2b       	or	r24, r25
    58c0:	61 f1       	breq	.+88     	; 0x591a <twiCreate+0x80>
    58c2:	a8 82       	st	Y, r10
    58c4:	81 e0       	ldi	r24, 0x01	; 1
    58c6:	b8 12       	cpse	r11, r24
    58c8:	12 c0       	rjmp	.+36     	; 0x58ee <twiCreate+0x54>
    58ca:	c7 01       	movw	r24, r14
    58cc:	b6 01       	movw	r22, r12
    58ce:	20 ea       	ldi	r18, 0xA0	; 160
    58d0:	36 e8       	ldi	r19, 0x86	; 134
    58d2:	41 e0       	ldi	r20, 0x01	; 1
    58d4:	50 e0       	ldi	r21, 0x00	; 0
    58d6:	15 d7       	rcall	.+3626   	; 0x6702 <__udivmodsi4>
    58d8:	da 01       	movw	r26, r20
    58da:	c9 01       	movw	r24, r18
    58dc:	40 97       	sbiw	r24, 0x10	; 16
    58de:	a1 09       	sbc	r26, r1
    58e0:	b1 09       	sbc	r27, r1
    58e2:	b6 95       	lsr	r27
    58e4:	a7 95       	ror	r26
    58e6:	97 95       	ror	r25
    58e8:	87 95       	ror	r24
    58ea:	89 83       	std	Y+1, r24	; 0x01
    58ec:	11 c0       	rjmp	.+34     	; 0x5910 <twiCreate+0x76>
    58ee:	c7 01       	movw	r24, r14
    58f0:	b6 01       	movw	r22, r12
    58f2:	20 e8       	ldi	r18, 0x80	; 128
    58f4:	3a e1       	ldi	r19, 0x1A	; 26
    58f6:	46 e0       	ldi	r20, 0x06	; 6
    58f8:	50 e0       	ldi	r21, 0x00	; 0
    58fa:	03 d7       	rcall	.+3590   	; 0x6702 <__udivmodsi4>
    58fc:	da 01       	movw	r26, r20
    58fe:	c9 01       	movw	r24, r18
    5900:	40 97       	sbiw	r24, 0x10	; 16
    5902:	a1 09       	sbc	r26, r1
    5904:	b1 09       	sbc	r27, r1
    5906:	b6 95       	lsr	r27
    5908:	a7 95       	ror	r26
    590a:	97 95       	ror	r25
    590c:	87 95       	ror	r24
    590e:	89 83       	std	Y+1, r24	; 0x01
    5910:	1b 83       	std	Y+3, r17	; 0x03
    5912:	0a 83       	std	Y+2, r16	; 0x02
    5914:	8c 2f       	mov	r24, r28
    5916:	9d 2f       	mov	r25, r29
    5918:	02 c0       	rjmp	.+4      	; 0x591e <twiCreate+0x84>
    591a:	80 e0       	ldi	r24, 0x00	; 0
    591c:	90 e0       	ldi	r25, 0x00	; 0
    591e:	df 91       	pop	r29
    5920:	cf 91       	pop	r28
    5922:	1f 91       	pop	r17
    5924:	0f 91       	pop	r16
    5926:	ff 90       	pop	r15
    5928:	ef 90       	pop	r14
    592a:	df 90       	pop	r13
    592c:	cf 90       	pop	r12
    592e:	bf 90       	pop	r11
    5930:	af 90       	pop	r10
    5932:	08 95       	ret

00005934 <twiIsBusy>:
    5934:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5938:	81 70       	andi	r24, 0x01	; 1
    593a:	08 95       	ret

0000593c <twiTransmit>:
    593c:	ff 92       	push	r15
    593e:	0f 93       	push	r16
    5940:	1f 93       	push	r17
    5942:	cf 93       	push	r28
    5944:	df 93       	push	r29
    5946:	00 97       	sbiw	r24, 0x00	; 0
    5948:	d1 f1       	breq	.+116    	; 0x59be <twiTransmit+0x82>
    594a:	4a 30       	cpi	r20, 0x0A	; 10
    594c:	d0 f5       	brcc	.+116    	; 0x59c2 <twiTransmit+0x86>
    594e:	f4 2e       	mov	r15, r20
    5950:	8b 01       	movw	r16, r22
    5952:	ec 01       	movw	r28, r24
    5954:	ef df       	rcall	.-34     	; 0x5934 <twiIsBusy>
    5956:	81 11       	cpse	r24, r1
    5958:	36 c0       	rjmp	.+108    	; 0x59c6 <twiTransmit+0x8a>
    595a:	80 91 ad 17 	lds	r24, 0x17AD	; 0x8017ad <_twiCurrentHandler>
    595e:	90 91 ae 17 	lds	r25, 0x17AE	; 0x8017ae <_twiCurrentHandler+0x1>
    5962:	c8 17       	cp	r28, r24
    5964:	d9 07       	cpc	r29, r25
    5966:	41 f0       	breq	.+16     	; 0x5978 <twiTransmit+0x3c>
    5968:	87 df       	rcall	.-242    	; 0x5878 <_initTwiInterface>
    596a:	89 81       	ldd	r24, Y+1	; 0x01
    596c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5970:	d0 93 ae 17 	sts	0x17AE, r29	; 0x8017ae <_twiCurrentHandler+0x1>
    5974:	c0 93 ad 17 	sts	0x17AD, r28	; 0x8017ad <_twiCurrentHandler>
    5978:	81 e0       	ldi	r24, 0x01	; 1
    597a:	8f 0d       	add	r24, r15
    597c:	80 93 af 17 	sts	0x17AF, r24	; 0x8017af <_twiMessageLen>
    5980:	88 81       	ld	r24, Y
    5982:	88 0f       	add	r24, r24
    5984:	80 93 b0 17 	sts	0x17B0, r24	; 0x8017b0 <_twiMessageBuffer>
    5988:	ff 20       	and	r15, r15
    598a:	89 f0       	breq	.+34     	; 0x59ae <twiTransmit+0x72>
    598c:	f8 01       	movw	r30, r16
    598e:	a1 eb       	ldi	r26, 0xB1	; 177
    5990:	b7 e1       	ldi	r27, 0x17	; 23
    5992:	4f ef       	ldi	r20, 0xFF	; 255
    5994:	4f 0d       	add	r20, r15
    5996:	64 2f       	mov	r22, r20
    5998:	70 e0       	ldi	r23, 0x00	; 0
    599a:	cb 01       	movw	r24, r22
    599c:	01 96       	adiw	r24, 0x01	; 1
    599e:	b8 01       	movw	r22, r16
    59a0:	68 0f       	add	r22, r24
    59a2:	79 1f       	adc	r23, r25
    59a4:	81 91       	ld	r24, Z+
    59a6:	8d 93       	st	X+, r24
    59a8:	e6 17       	cp	r30, r22
    59aa:	f7 07       	cpc	r31, r23
    59ac:	d9 f7       	brne	.-10     	; 0x59a4 <twiTransmit+0x68>
    59ae:	88 ef       	ldi	r24, 0xF8	; 248
    59b0:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    59b4:	85 ea       	ldi	r24, 0xA5	; 165
    59b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    59ba:	84 e0       	ldi	r24, 0x04	; 4
    59bc:	05 c0       	rjmp	.+10     	; 0x59c8 <twiTransmit+0x8c>
    59be:	86 e0       	ldi	r24, 0x06	; 6
    59c0:	03 c0       	rjmp	.+6      	; 0x59c8 <twiTransmit+0x8c>
    59c2:	87 e0       	ldi	r24, 0x07	; 7
    59c4:	01 c0       	rjmp	.+2      	; 0x59c8 <twiTransmit+0x8c>
    59c6:	82 e0       	ldi	r24, 0x02	; 2
    59c8:	df 91       	pop	r29
    59ca:	cf 91       	pop	r28
    59cc:	1f 91       	pop	r17
    59ce:	0f 91       	pop	r16
    59d0:	ff 90       	pop	r15
    59d2:	08 95       	ret

000059d4 <twiReceive>:
    59d4:	1f 93       	push	r17
    59d6:	cf 93       	push	r28
    59d8:	df 93       	push	r29
    59da:	00 97       	sbiw	r24, 0x00	; 0
    59dc:	29 f1       	breq	.+74     	; 0x5a28 <twiReceive+0x54>
    59de:	6b 30       	cpi	r22, 0x0B	; 11
    59e0:	28 f5       	brcc	.+74     	; 0x5a2c <twiReceive+0x58>
    59e2:	16 2f       	mov	r17, r22
    59e4:	ec 01       	movw	r28, r24
    59e6:	a6 df       	rcall	.-180    	; 0x5934 <twiIsBusy>
    59e8:	81 11       	cpse	r24, r1
    59ea:	22 c0       	rjmp	.+68     	; 0x5a30 <twiReceive+0x5c>
    59ec:	80 91 ad 17 	lds	r24, 0x17AD	; 0x8017ad <_twiCurrentHandler>
    59f0:	90 91 ae 17 	lds	r25, 0x17AE	; 0x8017ae <_twiCurrentHandler+0x1>
    59f4:	c8 17       	cp	r28, r24
    59f6:	d9 07       	cpc	r29, r25
    59f8:	41 f0       	breq	.+16     	; 0x5a0a <twiReceive+0x36>
    59fa:	3e df       	rcall	.-388    	; 0x5878 <_initTwiInterface>
    59fc:	89 81       	ldd	r24, Y+1	; 0x01
    59fe:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5a02:	d0 93 ae 17 	sts	0x17AE, r29	; 0x8017ae <_twiCurrentHandler+0x1>
    5a06:	c0 93 ad 17 	sts	0x17AD, r28	; 0x8017ad <_twiCurrentHandler>
    5a0a:	10 93 af 17 	sts	0x17AF, r17	; 0x8017af <_twiMessageLen>
    5a0e:	88 81       	ld	r24, Y
    5a10:	88 0f       	add	r24, r24
    5a12:	81 60       	ori	r24, 0x01	; 1
    5a14:	80 93 b0 17 	sts	0x17B0, r24	; 0x8017b0 <_twiMessageBuffer>
    5a18:	88 ef       	ldi	r24, 0xF8	; 248
    5a1a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5a1e:	85 ea       	ldi	r24, 0xA5	; 165
    5a20:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5a24:	85 e0       	ldi	r24, 0x05	; 5
    5a26:	05 c0       	rjmp	.+10     	; 0x5a32 <twiReceive+0x5e>
    5a28:	86 e0       	ldi	r24, 0x06	; 6
    5a2a:	03 c0       	rjmp	.+6      	; 0x5a32 <twiReceive+0x5e>
    5a2c:	87 e0       	ldi	r24, 0x07	; 7
    5a2e:	01 c0       	rjmp	.+2      	; 0x5a32 <twiReceive+0x5e>
    5a30:	82 e0       	ldi	r24, 0x02	; 2
    5a32:	df 91       	pop	r29
    5a34:	cf 91       	pop	r28
    5a36:	1f 91       	pop	r17
    5a38:	08 95       	ret

00005a3a <__vector_39>:
    5a3a:	1f 92       	push	r1
    5a3c:	0f 92       	push	r0
    5a3e:	0f b6       	in	r0, 0x3f	; 63
    5a40:	0f 92       	push	r0
    5a42:	11 24       	eor	r1, r1
    5a44:	0b b6       	in	r0, 0x3b	; 59
    5a46:	0f 92       	push	r0
    5a48:	2f 93       	push	r18
    5a4a:	3f 93       	push	r19
    5a4c:	4f 93       	push	r20
    5a4e:	5f 93       	push	r21
    5a50:	6f 93       	push	r22
    5a52:	7f 93       	push	r23
    5a54:	8f 93       	push	r24
    5a56:	9f 93       	push	r25
    5a58:	af 93       	push	r26
    5a5a:	bf 93       	push	r27
    5a5c:	ef 93       	push	r30
    5a5e:	ff 93       	push	r31
    5a60:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5a64:	8e 2f       	mov	r24, r30
    5a66:	90 e0       	ldi	r25, 0x00	; 0
    5a68:	fc 01       	movw	r30, r24
    5a6a:	38 97       	sbiw	r30, 0x08	; 8
    5a6c:	e1 35       	cpi	r30, 0x51	; 81
    5a6e:	f1 05       	cpc	r31, r1
    5a70:	08 f0       	brcs	.+2      	; 0x5a74 <__vector_39+0x3a>
    5a72:	75 c0       	rjmp	.+234    	; 0x5b5e <__vector_39+0x124>
    5a74:	88 27       	eor	r24, r24
    5a76:	e4 58       	subi	r30, 0x84	; 132
    5a78:	ff 4f       	sbci	r31, 0xFF	; 255
    5a7a:	8f 4f       	sbci	r24, 0xFF	; 255
    5a7c:	64 c6       	rjmp	.+3272   	; 0x6746 <__tablejump2__>
    5a7e:	10 92 ac 17 	sts	0x17AC, r1	; 0x8017ac <_index.1885>
    5a82:	e0 91 ac 17 	lds	r30, 0x17AC	; 0x8017ac <_index.1885>
    5a86:	80 91 af 17 	lds	r24, 0x17AF	; 0x8017af <_twiMessageLen>
    5a8a:	e8 17       	cp	r30, r24
    5a8c:	70 f4       	brcc	.+28     	; 0x5aaa <__vector_39+0x70>
    5a8e:	81 e0       	ldi	r24, 0x01	; 1
    5a90:	8e 0f       	add	r24, r30
    5a92:	80 93 ac 17 	sts	0x17AC, r24	; 0x8017ac <_index.1885>
    5a96:	f0 e0       	ldi	r31, 0x00	; 0
    5a98:	e0 55       	subi	r30, 0x50	; 80
    5a9a:	f8 4e       	sbci	r31, 0xE8	; 232
    5a9c:	80 81       	ld	r24, Z
    5a9e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5aa2:	85 e8       	ldi	r24, 0x85	; 133
    5aa4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5aa8:	72 c0       	rjmp	.+228    	; 0x5b8e <__vector_39+0x154>
    5aaa:	84 e9       	ldi	r24, 0x94	; 148
    5aac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5ab0:	80 91 ad 17 	lds	r24, 0x17AD	; 0x8017ad <_twiCurrentHandler>
    5ab4:	90 91 ae 17 	lds	r25, 0x17AE	; 0x8017ae <_twiCurrentHandler+0x1>
    5ab8:	dc 01       	movw	r26, r24
    5aba:	12 96       	adiw	r26, 0x02	; 2
    5abc:	ed 91       	ld	r30, X+
    5abe:	fc 91       	ld	r31, X
    5ac0:	13 97       	sbiw	r26, 0x03	; 3
    5ac2:	30 97       	sbiw	r30, 0x00	; 0
    5ac4:	09 f4       	brne	.+2      	; 0x5ac8 <__vector_39+0x8e>
    5ac6:	63 c0       	rjmp	.+198    	; 0x5b8e <__vector_39+0x154>
    5ac8:	20 e0       	ldi	r18, 0x00	; 0
    5aca:	40 e0       	ldi	r20, 0x00	; 0
    5acc:	50 e0       	ldi	r21, 0x00	; 0
    5ace:	64 e0       	ldi	r22, 0x04	; 4
    5ad0:	19 95       	eicall
    5ad2:	5d c0       	rjmp	.+186    	; 0x5b8e <__vector_39+0x154>
    5ad4:	e0 91 ac 17 	lds	r30, 0x17AC	; 0x8017ac <_index.1885>
    5ad8:	81 e0       	ldi	r24, 0x01	; 1
    5ada:	8e 0f       	add	r24, r30
    5adc:	80 93 ac 17 	sts	0x17AC, r24	; 0x8017ac <_index.1885>
    5ae0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5ae4:	f0 e0       	ldi	r31, 0x00	; 0
    5ae6:	e0 55       	subi	r30, 0x50	; 80
    5ae8:	f8 4e       	sbci	r31, 0xE8	; 232
    5aea:	80 83       	st	Z, r24
    5aec:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5af0:	80 34       	cpi	r24, 0x40	; 64
    5af2:	11 f4       	brne	.+4      	; 0x5af8 <__vector_39+0xbe>
    5af4:	10 92 ac 17 	sts	0x17AC, r1	; 0x8017ac <_index.1885>
    5af8:	20 91 ac 17 	lds	r18, 0x17AC	; 0x8017ac <_index.1885>
    5afc:	30 e0       	ldi	r19, 0x00	; 0
    5afe:	80 91 af 17 	lds	r24, 0x17AF	; 0x8017af <_twiMessageLen>
    5b02:	90 e0       	ldi	r25, 0x00	; 0
    5b04:	01 97       	sbiw	r24, 0x01	; 1
    5b06:	28 17       	cp	r18, r24
    5b08:	39 07       	cpc	r19, r25
    5b0a:	24 f4       	brge	.+8      	; 0x5b14 <__vector_39+0xda>
    5b0c:	85 ec       	ldi	r24, 0xC5	; 197
    5b0e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b12:	3d c0       	rjmp	.+122    	; 0x5b8e <__vector_39+0x154>
    5b14:	85 e8       	ldi	r24, 0x85	; 133
    5b16:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b1a:	39 c0       	rjmp	.+114    	; 0x5b8e <__vector_39+0x154>
    5b1c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5b20:	e0 91 ac 17 	lds	r30, 0x17AC	; 0x8017ac <_index.1885>
    5b24:	f0 e0       	ldi	r31, 0x00	; 0
    5b26:	e0 55       	subi	r30, 0x50	; 80
    5b28:	f8 4e       	sbci	r31, 0xE8	; 232
    5b2a:	80 83       	st	Z, r24
    5b2c:	84 e9       	ldi	r24, 0x94	; 148
    5b2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b32:	80 91 ad 17 	lds	r24, 0x17AD	; 0x8017ad <_twiCurrentHandler>
    5b36:	90 91 ae 17 	lds	r25, 0x17AE	; 0x8017ae <_twiCurrentHandler+0x1>
    5b3a:	dc 01       	movw	r26, r24
    5b3c:	12 96       	adiw	r26, 0x02	; 2
    5b3e:	ed 91       	ld	r30, X+
    5b40:	fc 91       	ld	r31, X
    5b42:	13 97       	sbiw	r26, 0x03	; 3
    5b44:	30 97       	sbiw	r30, 0x00	; 0
    5b46:	19 f1       	breq	.+70     	; 0x5b8e <__vector_39+0x154>
    5b48:	20 91 af 17 	lds	r18, 0x17AF	; 0x8017af <_twiMessageLen>
    5b4c:	40 eb       	ldi	r20, 0xB0	; 176
    5b4e:	57 e1       	ldi	r21, 0x17	; 23
    5b50:	65 e0       	ldi	r22, 0x05	; 5
    5b52:	19 95       	eicall
    5b54:	1c c0       	rjmp	.+56     	; 0x5b8e <__vector_39+0x154>
    5b56:	85 ea       	ldi	r24, 0xA5	; 165
    5b58:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b5c:	18 c0       	rjmp	.+48     	; 0x5b8e <__vector_39+0x154>
    5b5e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5b62:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5b66:	84 e0       	ldi	r24, 0x04	; 4
    5b68:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b6c:	80 91 ad 17 	lds	r24, 0x17AD	; 0x8017ad <_twiCurrentHandler>
    5b70:	90 91 ae 17 	lds	r25, 0x17AE	; 0x8017ae <_twiCurrentHandler+0x1>
    5b74:	dc 01       	movw	r26, r24
    5b76:	12 96       	adiw	r26, 0x02	; 2
    5b78:	ed 91       	ld	r30, X+
    5b7a:	fc 91       	ld	r31, X
    5b7c:	13 97       	sbiw	r26, 0x03	; 3
    5b7e:	30 97       	sbiw	r30, 0x00	; 0
    5b80:	31 f0       	breq	.+12     	; 0x5b8e <__vector_39+0x154>
    5b82:	20 e0       	ldi	r18, 0x00	; 0
    5b84:	40 e0       	ldi	r20, 0x00	; 0
    5b86:	50 e0       	ldi	r21, 0x00	; 0
    5b88:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5b8c:	19 95       	eicall
    5b8e:	ff 91       	pop	r31
    5b90:	ef 91       	pop	r30
    5b92:	bf 91       	pop	r27
    5b94:	af 91       	pop	r26
    5b96:	9f 91       	pop	r25
    5b98:	8f 91       	pop	r24
    5b9a:	7f 91       	pop	r23
    5b9c:	6f 91       	pop	r22
    5b9e:	5f 91       	pop	r21
    5ba0:	4f 91       	pop	r20
    5ba2:	3f 91       	pop	r19
    5ba4:	2f 91       	pop	r18
    5ba6:	0f 90       	pop	r0
    5ba8:	0b be       	out	0x3b, r0	; 59
    5baa:	0f 90       	pop	r0
    5bac:	0f be       	out	0x3f, r0	; 63
    5bae:	0f 90       	pop	r0
    5bb0:	1f 90       	pop	r1
    5bb2:	18 95       	reti

00005bb4 <fifo_init>:
    5bb4:	fc 01       	movw	r30, r24
    5bb6:	41 11       	cpse	r20, r1
    5bb8:	01 c0       	rjmp	.+2      	; 0x5bbc <fifo_init+0x8>
    5bba:	11 d7       	rcall	.+3618   	; 0x69de <abort>
    5bbc:	84 2f       	mov	r24, r20
    5bbe:	90 e0       	ldi	r25, 0x00	; 0
    5bc0:	9c 01       	movw	r18, r24
    5bc2:	21 50       	subi	r18, 0x01	; 1
    5bc4:	31 09       	sbc	r19, r1
    5bc6:	82 23       	and	r24, r18
    5bc8:	93 23       	and	r25, r19
    5bca:	89 2b       	or	r24, r25
    5bcc:	09 f0       	breq	.+2      	; 0x5bd0 <fifo_init+0x1c>
    5bce:	07 d7       	rcall	.+3598   	; 0x69de <abort>
    5bd0:	41 38       	cpi	r20, 0x81	; 129
    5bd2:	08 f0       	brcs	.+2      	; 0x5bd6 <fifo_init+0x22>
    5bd4:	04 d7       	rcall	.+3592   	; 0x69de <abort>
    5bd6:	12 82       	std	Z+2, r1	; 0x02
    5bd8:	13 82       	std	Z+3, r1	; 0x03
    5bda:	44 83       	std	Z+4, r20	; 0x04
    5bdc:	44 0f       	add	r20, r20
    5bde:	41 50       	subi	r20, 0x01	; 1
    5be0:	45 83       	std	Z+5, r20	; 0x05
    5be2:	71 83       	std	Z+1, r23	; 0x01
    5be4:	60 83       	st	Z, r22
    5be6:	80 e0       	ldi	r24, 0x00	; 0
    5be8:	90 e0       	ldi	r25, 0x00	; 0
    5bea:	08 95       	ret

00005bec <__subsf3>:
    5bec:	50 58       	subi	r21, 0x80	; 128

00005bee <__addsf3>:
    5bee:	bb 27       	eor	r27, r27
    5bf0:	aa 27       	eor	r26, r26
    5bf2:	0e d0       	rcall	.+28     	; 0x5c10 <__addsf3x>
    5bf4:	4d c1       	rjmp	.+666    	; 0x5e90 <__fp_round>
    5bf6:	3e d1       	rcall	.+636    	; 0x5e74 <__fp_pscA>
    5bf8:	30 f0       	brcs	.+12     	; 0x5c06 <__addsf3+0x18>
    5bfa:	43 d1       	rcall	.+646    	; 0x5e82 <__fp_pscB>
    5bfc:	20 f0       	brcs	.+8      	; 0x5c06 <__addsf3+0x18>
    5bfe:	31 f4       	brne	.+12     	; 0x5c0c <__addsf3+0x1e>
    5c00:	9f 3f       	cpi	r25, 0xFF	; 255
    5c02:	11 f4       	brne	.+4      	; 0x5c08 <__addsf3+0x1a>
    5c04:	1e f4       	brtc	.+6      	; 0x5c0c <__addsf3+0x1e>
    5c06:	33 c1       	rjmp	.+614    	; 0x5e6e <__fp_nan>
    5c08:	0e f4       	brtc	.+2      	; 0x5c0c <__addsf3+0x1e>
    5c0a:	e0 95       	com	r30
    5c0c:	e7 fb       	bst	r30, 7
    5c0e:	29 c1       	rjmp	.+594    	; 0x5e62 <__fp_inf>

00005c10 <__addsf3x>:
    5c10:	e9 2f       	mov	r30, r25
    5c12:	4f d1       	rcall	.+670    	; 0x5eb2 <__fp_split3>
    5c14:	80 f3       	brcs	.-32     	; 0x5bf6 <__addsf3+0x8>
    5c16:	ba 17       	cp	r27, r26
    5c18:	62 07       	cpc	r22, r18
    5c1a:	73 07       	cpc	r23, r19
    5c1c:	84 07       	cpc	r24, r20
    5c1e:	95 07       	cpc	r25, r21
    5c20:	18 f0       	brcs	.+6      	; 0x5c28 <__addsf3x+0x18>
    5c22:	71 f4       	brne	.+28     	; 0x5c40 <__addsf3x+0x30>
    5c24:	9e f5       	brtc	.+102    	; 0x5c8c <__addsf3x+0x7c>
    5c26:	67 c1       	rjmp	.+718    	; 0x5ef6 <__fp_zero>
    5c28:	0e f4       	brtc	.+2      	; 0x5c2c <__addsf3x+0x1c>
    5c2a:	e0 95       	com	r30
    5c2c:	0b 2e       	mov	r0, r27
    5c2e:	ba 2f       	mov	r27, r26
    5c30:	a0 2d       	mov	r26, r0
    5c32:	0b 01       	movw	r0, r22
    5c34:	b9 01       	movw	r22, r18
    5c36:	90 01       	movw	r18, r0
    5c38:	0c 01       	movw	r0, r24
    5c3a:	ca 01       	movw	r24, r20
    5c3c:	a0 01       	movw	r20, r0
    5c3e:	11 24       	eor	r1, r1
    5c40:	ff 27       	eor	r31, r31
    5c42:	59 1b       	sub	r21, r25
    5c44:	99 f0       	breq	.+38     	; 0x5c6c <__addsf3x+0x5c>
    5c46:	59 3f       	cpi	r21, 0xF9	; 249
    5c48:	50 f4       	brcc	.+20     	; 0x5c5e <__addsf3x+0x4e>
    5c4a:	50 3e       	cpi	r21, 0xE0	; 224
    5c4c:	68 f1       	brcs	.+90     	; 0x5ca8 <__addsf3x+0x98>
    5c4e:	1a 16       	cp	r1, r26
    5c50:	f0 40       	sbci	r31, 0x00	; 0
    5c52:	a2 2f       	mov	r26, r18
    5c54:	23 2f       	mov	r18, r19
    5c56:	34 2f       	mov	r19, r20
    5c58:	44 27       	eor	r20, r20
    5c5a:	58 5f       	subi	r21, 0xF8	; 248
    5c5c:	f3 cf       	rjmp	.-26     	; 0x5c44 <__addsf3x+0x34>
    5c5e:	46 95       	lsr	r20
    5c60:	37 95       	ror	r19
    5c62:	27 95       	ror	r18
    5c64:	a7 95       	ror	r26
    5c66:	f0 40       	sbci	r31, 0x00	; 0
    5c68:	53 95       	inc	r21
    5c6a:	c9 f7       	brne	.-14     	; 0x5c5e <__addsf3x+0x4e>
    5c6c:	7e f4       	brtc	.+30     	; 0x5c8c <__addsf3x+0x7c>
    5c6e:	1f 16       	cp	r1, r31
    5c70:	ba 0b       	sbc	r27, r26
    5c72:	62 0b       	sbc	r22, r18
    5c74:	73 0b       	sbc	r23, r19
    5c76:	84 0b       	sbc	r24, r20
    5c78:	ba f0       	brmi	.+46     	; 0x5ca8 <__addsf3x+0x98>
    5c7a:	91 50       	subi	r25, 0x01	; 1
    5c7c:	a1 f0       	breq	.+40     	; 0x5ca6 <__addsf3x+0x96>
    5c7e:	ff 0f       	add	r31, r31
    5c80:	bb 1f       	adc	r27, r27
    5c82:	66 1f       	adc	r22, r22
    5c84:	77 1f       	adc	r23, r23
    5c86:	88 1f       	adc	r24, r24
    5c88:	c2 f7       	brpl	.-16     	; 0x5c7a <__addsf3x+0x6a>
    5c8a:	0e c0       	rjmp	.+28     	; 0x5ca8 <__addsf3x+0x98>
    5c8c:	ba 0f       	add	r27, r26
    5c8e:	62 1f       	adc	r22, r18
    5c90:	73 1f       	adc	r23, r19
    5c92:	84 1f       	adc	r24, r20
    5c94:	48 f4       	brcc	.+18     	; 0x5ca8 <__addsf3x+0x98>
    5c96:	87 95       	ror	r24
    5c98:	77 95       	ror	r23
    5c9a:	67 95       	ror	r22
    5c9c:	b7 95       	ror	r27
    5c9e:	f7 95       	ror	r31
    5ca0:	9e 3f       	cpi	r25, 0xFE	; 254
    5ca2:	08 f0       	brcs	.+2      	; 0x5ca6 <__addsf3x+0x96>
    5ca4:	b3 cf       	rjmp	.-154    	; 0x5c0c <__addsf3+0x1e>
    5ca6:	93 95       	inc	r25
    5ca8:	88 0f       	add	r24, r24
    5caa:	08 f0       	brcs	.+2      	; 0x5cae <__addsf3x+0x9e>
    5cac:	99 27       	eor	r25, r25
    5cae:	ee 0f       	add	r30, r30
    5cb0:	97 95       	ror	r25
    5cb2:	87 95       	ror	r24
    5cb4:	08 95       	ret

00005cb6 <__divsf3>:
    5cb6:	0c d0       	rcall	.+24     	; 0x5cd0 <__divsf3x>
    5cb8:	eb c0       	rjmp	.+470    	; 0x5e90 <__fp_round>
    5cba:	e3 d0       	rcall	.+454    	; 0x5e82 <__fp_pscB>
    5cbc:	40 f0       	brcs	.+16     	; 0x5cce <__divsf3+0x18>
    5cbe:	da d0       	rcall	.+436    	; 0x5e74 <__fp_pscA>
    5cc0:	30 f0       	brcs	.+12     	; 0x5cce <__divsf3+0x18>
    5cc2:	21 f4       	brne	.+8      	; 0x5ccc <__divsf3+0x16>
    5cc4:	5f 3f       	cpi	r21, 0xFF	; 255
    5cc6:	19 f0       	breq	.+6      	; 0x5cce <__divsf3+0x18>
    5cc8:	cc c0       	rjmp	.+408    	; 0x5e62 <__fp_inf>
    5cca:	51 11       	cpse	r21, r1
    5ccc:	15 c1       	rjmp	.+554    	; 0x5ef8 <__fp_szero>
    5cce:	cf c0       	rjmp	.+414    	; 0x5e6e <__fp_nan>

00005cd0 <__divsf3x>:
    5cd0:	f0 d0       	rcall	.+480    	; 0x5eb2 <__fp_split3>
    5cd2:	98 f3       	brcs	.-26     	; 0x5cba <__divsf3+0x4>

00005cd4 <__divsf3_pse>:
    5cd4:	99 23       	and	r25, r25
    5cd6:	c9 f3       	breq	.-14     	; 0x5cca <__divsf3+0x14>
    5cd8:	55 23       	and	r21, r21
    5cda:	b1 f3       	breq	.-20     	; 0x5cc8 <__divsf3+0x12>
    5cdc:	95 1b       	sub	r25, r21
    5cde:	55 0b       	sbc	r21, r21
    5ce0:	bb 27       	eor	r27, r27
    5ce2:	aa 27       	eor	r26, r26
    5ce4:	62 17       	cp	r22, r18
    5ce6:	73 07       	cpc	r23, r19
    5ce8:	84 07       	cpc	r24, r20
    5cea:	38 f0       	brcs	.+14     	; 0x5cfa <__divsf3_pse+0x26>
    5cec:	9f 5f       	subi	r25, 0xFF	; 255
    5cee:	5f 4f       	sbci	r21, 0xFF	; 255
    5cf0:	22 0f       	add	r18, r18
    5cf2:	33 1f       	adc	r19, r19
    5cf4:	44 1f       	adc	r20, r20
    5cf6:	aa 1f       	adc	r26, r26
    5cf8:	a9 f3       	breq	.-22     	; 0x5ce4 <__divsf3_pse+0x10>
    5cfa:	33 d0       	rcall	.+102    	; 0x5d62 <__divsf3_pse+0x8e>
    5cfc:	0e 2e       	mov	r0, r30
    5cfe:	3a f0       	brmi	.+14     	; 0x5d0e <__divsf3_pse+0x3a>
    5d00:	e0 e8       	ldi	r30, 0x80	; 128
    5d02:	30 d0       	rcall	.+96     	; 0x5d64 <__divsf3_pse+0x90>
    5d04:	91 50       	subi	r25, 0x01	; 1
    5d06:	50 40       	sbci	r21, 0x00	; 0
    5d08:	e6 95       	lsr	r30
    5d0a:	00 1c       	adc	r0, r0
    5d0c:	ca f7       	brpl	.-14     	; 0x5d00 <__divsf3_pse+0x2c>
    5d0e:	29 d0       	rcall	.+82     	; 0x5d62 <__divsf3_pse+0x8e>
    5d10:	fe 2f       	mov	r31, r30
    5d12:	27 d0       	rcall	.+78     	; 0x5d62 <__divsf3_pse+0x8e>
    5d14:	66 0f       	add	r22, r22
    5d16:	77 1f       	adc	r23, r23
    5d18:	88 1f       	adc	r24, r24
    5d1a:	bb 1f       	adc	r27, r27
    5d1c:	26 17       	cp	r18, r22
    5d1e:	37 07       	cpc	r19, r23
    5d20:	48 07       	cpc	r20, r24
    5d22:	ab 07       	cpc	r26, r27
    5d24:	b0 e8       	ldi	r27, 0x80	; 128
    5d26:	09 f0       	breq	.+2      	; 0x5d2a <__divsf3_pse+0x56>
    5d28:	bb 0b       	sbc	r27, r27
    5d2a:	80 2d       	mov	r24, r0
    5d2c:	bf 01       	movw	r22, r30
    5d2e:	ff 27       	eor	r31, r31
    5d30:	93 58       	subi	r25, 0x83	; 131
    5d32:	5f 4f       	sbci	r21, 0xFF	; 255
    5d34:	2a f0       	brmi	.+10     	; 0x5d40 <__divsf3_pse+0x6c>
    5d36:	9e 3f       	cpi	r25, 0xFE	; 254
    5d38:	51 05       	cpc	r21, r1
    5d3a:	68 f0       	brcs	.+26     	; 0x5d56 <__divsf3_pse+0x82>
    5d3c:	92 c0       	rjmp	.+292    	; 0x5e62 <__fp_inf>
    5d3e:	dc c0       	rjmp	.+440    	; 0x5ef8 <__fp_szero>
    5d40:	5f 3f       	cpi	r21, 0xFF	; 255
    5d42:	ec f3       	brlt	.-6      	; 0x5d3e <__divsf3_pse+0x6a>
    5d44:	98 3e       	cpi	r25, 0xE8	; 232
    5d46:	dc f3       	brlt	.-10     	; 0x5d3e <__divsf3_pse+0x6a>
    5d48:	86 95       	lsr	r24
    5d4a:	77 95       	ror	r23
    5d4c:	67 95       	ror	r22
    5d4e:	b7 95       	ror	r27
    5d50:	f7 95       	ror	r31
    5d52:	9f 5f       	subi	r25, 0xFF	; 255
    5d54:	c9 f7       	brne	.-14     	; 0x5d48 <__divsf3_pse+0x74>
    5d56:	88 0f       	add	r24, r24
    5d58:	91 1d       	adc	r25, r1
    5d5a:	96 95       	lsr	r25
    5d5c:	87 95       	ror	r24
    5d5e:	97 f9       	bld	r25, 7
    5d60:	08 95       	ret
    5d62:	e1 e0       	ldi	r30, 0x01	; 1
    5d64:	66 0f       	add	r22, r22
    5d66:	77 1f       	adc	r23, r23
    5d68:	88 1f       	adc	r24, r24
    5d6a:	bb 1f       	adc	r27, r27
    5d6c:	62 17       	cp	r22, r18
    5d6e:	73 07       	cpc	r23, r19
    5d70:	84 07       	cpc	r24, r20
    5d72:	ba 07       	cpc	r27, r26
    5d74:	20 f0       	brcs	.+8      	; 0x5d7e <__divsf3_pse+0xaa>
    5d76:	62 1b       	sub	r22, r18
    5d78:	73 0b       	sbc	r23, r19
    5d7a:	84 0b       	sbc	r24, r20
    5d7c:	ba 0b       	sbc	r27, r26
    5d7e:	ee 1f       	adc	r30, r30
    5d80:	88 f7       	brcc	.-30     	; 0x5d64 <__divsf3_pse+0x90>
    5d82:	e0 95       	com	r30
    5d84:	08 95       	ret

00005d86 <__fixsfsi>:
    5d86:	04 d0       	rcall	.+8      	; 0x5d90 <__fixunssfsi>
    5d88:	68 94       	set
    5d8a:	b1 11       	cpse	r27, r1
    5d8c:	b5 c0       	rjmp	.+362    	; 0x5ef8 <__fp_szero>
    5d8e:	08 95       	ret

00005d90 <__fixunssfsi>:
    5d90:	98 d0       	rcall	.+304    	; 0x5ec2 <__fp_splitA>
    5d92:	88 f0       	brcs	.+34     	; 0x5db6 <__fixunssfsi+0x26>
    5d94:	9f 57       	subi	r25, 0x7F	; 127
    5d96:	90 f0       	brcs	.+36     	; 0x5dbc <__fixunssfsi+0x2c>
    5d98:	b9 2f       	mov	r27, r25
    5d9a:	99 27       	eor	r25, r25
    5d9c:	b7 51       	subi	r27, 0x17	; 23
    5d9e:	a0 f0       	brcs	.+40     	; 0x5dc8 <__fixunssfsi+0x38>
    5da0:	d1 f0       	breq	.+52     	; 0x5dd6 <__fixunssfsi+0x46>
    5da2:	66 0f       	add	r22, r22
    5da4:	77 1f       	adc	r23, r23
    5da6:	88 1f       	adc	r24, r24
    5da8:	99 1f       	adc	r25, r25
    5daa:	1a f0       	brmi	.+6      	; 0x5db2 <__fixunssfsi+0x22>
    5dac:	ba 95       	dec	r27
    5dae:	c9 f7       	brne	.-14     	; 0x5da2 <__fixunssfsi+0x12>
    5db0:	12 c0       	rjmp	.+36     	; 0x5dd6 <__fixunssfsi+0x46>
    5db2:	b1 30       	cpi	r27, 0x01	; 1
    5db4:	81 f0       	breq	.+32     	; 0x5dd6 <__fixunssfsi+0x46>
    5db6:	9f d0       	rcall	.+318    	; 0x5ef6 <__fp_zero>
    5db8:	b1 e0       	ldi	r27, 0x01	; 1
    5dba:	08 95       	ret
    5dbc:	9c c0       	rjmp	.+312    	; 0x5ef6 <__fp_zero>
    5dbe:	67 2f       	mov	r22, r23
    5dc0:	78 2f       	mov	r23, r24
    5dc2:	88 27       	eor	r24, r24
    5dc4:	b8 5f       	subi	r27, 0xF8	; 248
    5dc6:	39 f0       	breq	.+14     	; 0x5dd6 <__fixunssfsi+0x46>
    5dc8:	b9 3f       	cpi	r27, 0xF9	; 249
    5dca:	cc f3       	brlt	.-14     	; 0x5dbe <__fixunssfsi+0x2e>
    5dcc:	86 95       	lsr	r24
    5dce:	77 95       	ror	r23
    5dd0:	67 95       	ror	r22
    5dd2:	b3 95       	inc	r27
    5dd4:	d9 f7       	brne	.-10     	; 0x5dcc <__fixunssfsi+0x3c>
    5dd6:	3e f4       	brtc	.+14     	; 0x5de6 <__fixunssfsi+0x56>
    5dd8:	90 95       	com	r25
    5dda:	80 95       	com	r24
    5ddc:	70 95       	com	r23
    5dde:	61 95       	neg	r22
    5de0:	7f 4f       	sbci	r23, 0xFF	; 255
    5de2:	8f 4f       	sbci	r24, 0xFF	; 255
    5de4:	9f 4f       	sbci	r25, 0xFF	; 255
    5de6:	08 95       	ret

00005de8 <__floatunsisf>:
    5de8:	e8 94       	clt
    5dea:	09 c0       	rjmp	.+18     	; 0x5dfe <__floatsisf+0x12>

00005dec <__floatsisf>:
    5dec:	97 fb       	bst	r25, 7
    5dee:	3e f4       	brtc	.+14     	; 0x5dfe <__floatsisf+0x12>
    5df0:	90 95       	com	r25
    5df2:	80 95       	com	r24
    5df4:	70 95       	com	r23
    5df6:	61 95       	neg	r22
    5df8:	7f 4f       	sbci	r23, 0xFF	; 255
    5dfa:	8f 4f       	sbci	r24, 0xFF	; 255
    5dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    5dfe:	99 23       	and	r25, r25
    5e00:	a9 f0       	breq	.+42     	; 0x5e2c <__floatsisf+0x40>
    5e02:	f9 2f       	mov	r31, r25
    5e04:	96 e9       	ldi	r25, 0x96	; 150
    5e06:	bb 27       	eor	r27, r27
    5e08:	93 95       	inc	r25
    5e0a:	f6 95       	lsr	r31
    5e0c:	87 95       	ror	r24
    5e0e:	77 95       	ror	r23
    5e10:	67 95       	ror	r22
    5e12:	b7 95       	ror	r27
    5e14:	f1 11       	cpse	r31, r1
    5e16:	f8 cf       	rjmp	.-16     	; 0x5e08 <__floatsisf+0x1c>
    5e18:	fa f4       	brpl	.+62     	; 0x5e58 <__floatsisf+0x6c>
    5e1a:	bb 0f       	add	r27, r27
    5e1c:	11 f4       	brne	.+4      	; 0x5e22 <__floatsisf+0x36>
    5e1e:	60 ff       	sbrs	r22, 0
    5e20:	1b c0       	rjmp	.+54     	; 0x5e58 <__floatsisf+0x6c>
    5e22:	6f 5f       	subi	r22, 0xFF	; 255
    5e24:	7f 4f       	sbci	r23, 0xFF	; 255
    5e26:	8f 4f       	sbci	r24, 0xFF	; 255
    5e28:	9f 4f       	sbci	r25, 0xFF	; 255
    5e2a:	16 c0       	rjmp	.+44     	; 0x5e58 <__floatsisf+0x6c>
    5e2c:	88 23       	and	r24, r24
    5e2e:	11 f0       	breq	.+4      	; 0x5e34 <__floatsisf+0x48>
    5e30:	96 e9       	ldi	r25, 0x96	; 150
    5e32:	11 c0       	rjmp	.+34     	; 0x5e56 <__floatsisf+0x6a>
    5e34:	77 23       	and	r23, r23
    5e36:	21 f0       	breq	.+8      	; 0x5e40 <__floatsisf+0x54>
    5e38:	9e e8       	ldi	r25, 0x8E	; 142
    5e3a:	87 2f       	mov	r24, r23
    5e3c:	76 2f       	mov	r23, r22
    5e3e:	05 c0       	rjmp	.+10     	; 0x5e4a <__floatsisf+0x5e>
    5e40:	66 23       	and	r22, r22
    5e42:	71 f0       	breq	.+28     	; 0x5e60 <__floatsisf+0x74>
    5e44:	96 e8       	ldi	r25, 0x86	; 134
    5e46:	86 2f       	mov	r24, r22
    5e48:	70 e0       	ldi	r23, 0x00	; 0
    5e4a:	60 e0       	ldi	r22, 0x00	; 0
    5e4c:	2a f0       	brmi	.+10     	; 0x5e58 <__floatsisf+0x6c>
    5e4e:	9a 95       	dec	r25
    5e50:	66 0f       	add	r22, r22
    5e52:	77 1f       	adc	r23, r23
    5e54:	88 1f       	adc	r24, r24
    5e56:	da f7       	brpl	.-10     	; 0x5e4e <__floatsisf+0x62>
    5e58:	88 0f       	add	r24, r24
    5e5a:	96 95       	lsr	r25
    5e5c:	87 95       	ror	r24
    5e5e:	97 f9       	bld	r25, 7
    5e60:	08 95       	ret

00005e62 <__fp_inf>:
    5e62:	97 f9       	bld	r25, 7
    5e64:	9f 67       	ori	r25, 0x7F	; 127
    5e66:	80 e8       	ldi	r24, 0x80	; 128
    5e68:	70 e0       	ldi	r23, 0x00	; 0
    5e6a:	60 e0       	ldi	r22, 0x00	; 0
    5e6c:	08 95       	ret

00005e6e <__fp_nan>:
    5e6e:	9f ef       	ldi	r25, 0xFF	; 255
    5e70:	80 ec       	ldi	r24, 0xC0	; 192
    5e72:	08 95       	ret

00005e74 <__fp_pscA>:
    5e74:	00 24       	eor	r0, r0
    5e76:	0a 94       	dec	r0
    5e78:	16 16       	cp	r1, r22
    5e7a:	17 06       	cpc	r1, r23
    5e7c:	18 06       	cpc	r1, r24
    5e7e:	09 06       	cpc	r0, r25
    5e80:	08 95       	ret

00005e82 <__fp_pscB>:
    5e82:	00 24       	eor	r0, r0
    5e84:	0a 94       	dec	r0
    5e86:	12 16       	cp	r1, r18
    5e88:	13 06       	cpc	r1, r19
    5e8a:	14 06       	cpc	r1, r20
    5e8c:	05 06       	cpc	r0, r21
    5e8e:	08 95       	ret

00005e90 <__fp_round>:
    5e90:	09 2e       	mov	r0, r25
    5e92:	03 94       	inc	r0
    5e94:	00 0c       	add	r0, r0
    5e96:	11 f4       	brne	.+4      	; 0x5e9c <__fp_round+0xc>
    5e98:	88 23       	and	r24, r24
    5e9a:	52 f0       	brmi	.+20     	; 0x5eb0 <__fp_round+0x20>
    5e9c:	bb 0f       	add	r27, r27
    5e9e:	40 f4       	brcc	.+16     	; 0x5eb0 <__fp_round+0x20>
    5ea0:	bf 2b       	or	r27, r31
    5ea2:	11 f4       	brne	.+4      	; 0x5ea8 <__fp_round+0x18>
    5ea4:	60 ff       	sbrs	r22, 0
    5ea6:	04 c0       	rjmp	.+8      	; 0x5eb0 <__fp_round+0x20>
    5ea8:	6f 5f       	subi	r22, 0xFF	; 255
    5eaa:	7f 4f       	sbci	r23, 0xFF	; 255
    5eac:	8f 4f       	sbci	r24, 0xFF	; 255
    5eae:	9f 4f       	sbci	r25, 0xFF	; 255
    5eb0:	08 95       	ret

00005eb2 <__fp_split3>:
    5eb2:	57 fd       	sbrc	r21, 7
    5eb4:	90 58       	subi	r25, 0x80	; 128
    5eb6:	44 0f       	add	r20, r20
    5eb8:	55 1f       	adc	r21, r21
    5eba:	59 f0       	breq	.+22     	; 0x5ed2 <__fp_splitA+0x10>
    5ebc:	5f 3f       	cpi	r21, 0xFF	; 255
    5ebe:	71 f0       	breq	.+28     	; 0x5edc <__fp_splitA+0x1a>
    5ec0:	47 95       	ror	r20

00005ec2 <__fp_splitA>:
    5ec2:	88 0f       	add	r24, r24
    5ec4:	97 fb       	bst	r25, 7
    5ec6:	99 1f       	adc	r25, r25
    5ec8:	61 f0       	breq	.+24     	; 0x5ee2 <__fp_splitA+0x20>
    5eca:	9f 3f       	cpi	r25, 0xFF	; 255
    5ecc:	79 f0       	breq	.+30     	; 0x5eec <__fp_splitA+0x2a>
    5ece:	87 95       	ror	r24
    5ed0:	08 95       	ret
    5ed2:	12 16       	cp	r1, r18
    5ed4:	13 06       	cpc	r1, r19
    5ed6:	14 06       	cpc	r1, r20
    5ed8:	55 1f       	adc	r21, r21
    5eda:	f2 cf       	rjmp	.-28     	; 0x5ec0 <__fp_split3+0xe>
    5edc:	46 95       	lsr	r20
    5ede:	f1 df       	rcall	.-30     	; 0x5ec2 <__fp_splitA>
    5ee0:	08 c0       	rjmp	.+16     	; 0x5ef2 <__fp_splitA+0x30>
    5ee2:	16 16       	cp	r1, r22
    5ee4:	17 06       	cpc	r1, r23
    5ee6:	18 06       	cpc	r1, r24
    5ee8:	99 1f       	adc	r25, r25
    5eea:	f1 cf       	rjmp	.-30     	; 0x5ece <__fp_splitA+0xc>
    5eec:	86 95       	lsr	r24
    5eee:	71 05       	cpc	r23, r1
    5ef0:	61 05       	cpc	r22, r1
    5ef2:	08 94       	sec
    5ef4:	08 95       	ret

00005ef6 <__fp_zero>:
    5ef6:	e8 94       	clt

00005ef8 <__fp_szero>:
    5ef8:	bb 27       	eor	r27, r27
    5efa:	66 27       	eor	r22, r22
    5efc:	77 27       	eor	r23, r23
    5efe:	cb 01       	movw	r24, r22
    5f00:	97 f9       	bld	r25, 7
    5f02:	08 95       	ret

00005f04 <__mulsf3>:
    5f04:	0b d0       	rcall	.+22     	; 0x5f1c <__mulsf3x>
    5f06:	c4 cf       	rjmp	.-120    	; 0x5e90 <__fp_round>
    5f08:	b5 df       	rcall	.-150    	; 0x5e74 <__fp_pscA>
    5f0a:	28 f0       	brcs	.+10     	; 0x5f16 <__mulsf3+0x12>
    5f0c:	ba df       	rcall	.-140    	; 0x5e82 <__fp_pscB>
    5f0e:	18 f0       	brcs	.+6      	; 0x5f16 <__mulsf3+0x12>
    5f10:	95 23       	and	r25, r21
    5f12:	09 f0       	breq	.+2      	; 0x5f16 <__mulsf3+0x12>
    5f14:	a6 cf       	rjmp	.-180    	; 0x5e62 <__fp_inf>
    5f16:	ab cf       	rjmp	.-170    	; 0x5e6e <__fp_nan>
    5f18:	11 24       	eor	r1, r1
    5f1a:	ee cf       	rjmp	.-36     	; 0x5ef8 <__fp_szero>

00005f1c <__mulsf3x>:
    5f1c:	ca df       	rcall	.-108    	; 0x5eb2 <__fp_split3>
    5f1e:	a0 f3       	brcs	.-24     	; 0x5f08 <__mulsf3+0x4>

00005f20 <__mulsf3_pse>:
    5f20:	95 9f       	mul	r25, r21
    5f22:	d1 f3       	breq	.-12     	; 0x5f18 <__mulsf3+0x14>
    5f24:	95 0f       	add	r25, r21
    5f26:	50 e0       	ldi	r21, 0x00	; 0
    5f28:	55 1f       	adc	r21, r21
    5f2a:	62 9f       	mul	r22, r18
    5f2c:	f0 01       	movw	r30, r0
    5f2e:	72 9f       	mul	r23, r18
    5f30:	bb 27       	eor	r27, r27
    5f32:	f0 0d       	add	r31, r0
    5f34:	b1 1d       	adc	r27, r1
    5f36:	63 9f       	mul	r22, r19
    5f38:	aa 27       	eor	r26, r26
    5f3a:	f0 0d       	add	r31, r0
    5f3c:	b1 1d       	adc	r27, r1
    5f3e:	aa 1f       	adc	r26, r26
    5f40:	64 9f       	mul	r22, r20
    5f42:	66 27       	eor	r22, r22
    5f44:	b0 0d       	add	r27, r0
    5f46:	a1 1d       	adc	r26, r1
    5f48:	66 1f       	adc	r22, r22
    5f4a:	82 9f       	mul	r24, r18
    5f4c:	22 27       	eor	r18, r18
    5f4e:	b0 0d       	add	r27, r0
    5f50:	a1 1d       	adc	r26, r1
    5f52:	62 1f       	adc	r22, r18
    5f54:	73 9f       	mul	r23, r19
    5f56:	b0 0d       	add	r27, r0
    5f58:	a1 1d       	adc	r26, r1
    5f5a:	62 1f       	adc	r22, r18
    5f5c:	83 9f       	mul	r24, r19
    5f5e:	a0 0d       	add	r26, r0
    5f60:	61 1d       	adc	r22, r1
    5f62:	22 1f       	adc	r18, r18
    5f64:	74 9f       	mul	r23, r20
    5f66:	33 27       	eor	r19, r19
    5f68:	a0 0d       	add	r26, r0
    5f6a:	61 1d       	adc	r22, r1
    5f6c:	23 1f       	adc	r18, r19
    5f6e:	84 9f       	mul	r24, r20
    5f70:	60 0d       	add	r22, r0
    5f72:	21 1d       	adc	r18, r1
    5f74:	82 2f       	mov	r24, r18
    5f76:	76 2f       	mov	r23, r22
    5f78:	6a 2f       	mov	r22, r26
    5f7a:	11 24       	eor	r1, r1
    5f7c:	9f 57       	subi	r25, 0x7F	; 127
    5f7e:	50 40       	sbci	r21, 0x00	; 0
    5f80:	8a f0       	brmi	.+34     	; 0x5fa4 <__mulsf3_pse+0x84>
    5f82:	e1 f0       	breq	.+56     	; 0x5fbc <__mulsf3_pse+0x9c>
    5f84:	88 23       	and	r24, r24
    5f86:	4a f0       	brmi	.+18     	; 0x5f9a <__mulsf3_pse+0x7a>
    5f88:	ee 0f       	add	r30, r30
    5f8a:	ff 1f       	adc	r31, r31
    5f8c:	bb 1f       	adc	r27, r27
    5f8e:	66 1f       	adc	r22, r22
    5f90:	77 1f       	adc	r23, r23
    5f92:	88 1f       	adc	r24, r24
    5f94:	91 50       	subi	r25, 0x01	; 1
    5f96:	50 40       	sbci	r21, 0x00	; 0
    5f98:	a9 f7       	brne	.-22     	; 0x5f84 <__mulsf3_pse+0x64>
    5f9a:	9e 3f       	cpi	r25, 0xFE	; 254
    5f9c:	51 05       	cpc	r21, r1
    5f9e:	70 f0       	brcs	.+28     	; 0x5fbc <__mulsf3_pse+0x9c>
    5fa0:	60 cf       	rjmp	.-320    	; 0x5e62 <__fp_inf>
    5fa2:	aa cf       	rjmp	.-172    	; 0x5ef8 <__fp_szero>
    5fa4:	5f 3f       	cpi	r21, 0xFF	; 255
    5fa6:	ec f3       	brlt	.-6      	; 0x5fa2 <__mulsf3_pse+0x82>
    5fa8:	98 3e       	cpi	r25, 0xE8	; 232
    5faa:	dc f3       	brlt	.-10     	; 0x5fa2 <__mulsf3_pse+0x82>
    5fac:	86 95       	lsr	r24
    5fae:	77 95       	ror	r23
    5fb0:	67 95       	ror	r22
    5fb2:	b7 95       	ror	r27
    5fb4:	f7 95       	ror	r31
    5fb6:	e7 95       	ror	r30
    5fb8:	9f 5f       	subi	r25, 0xFF	; 255
    5fba:	c1 f7       	brne	.-16     	; 0x5fac <__mulsf3_pse+0x8c>
    5fbc:	fe 2b       	or	r31, r30
    5fbe:	88 0f       	add	r24, r24
    5fc0:	91 1d       	adc	r25, r1
    5fc2:	96 95       	lsr	r25
    5fc4:	87 95       	ror	r24
    5fc6:	97 f9       	bld	r25, 7
    5fc8:	08 95       	ret

00005fca <vfprintf>:
    5fca:	2f 92       	push	r2
    5fcc:	3f 92       	push	r3
    5fce:	4f 92       	push	r4
    5fd0:	5f 92       	push	r5
    5fd2:	6f 92       	push	r6
    5fd4:	7f 92       	push	r7
    5fd6:	8f 92       	push	r8
    5fd8:	9f 92       	push	r9
    5fda:	af 92       	push	r10
    5fdc:	bf 92       	push	r11
    5fde:	cf 92       	push	r12
    5fe0:	df 92       	push	r13
    5fe2:	ef 92       	push	r14
    5fe4:	ff 92       	push	r15
    5fe6:	0f 93       	push	r16
    5fe8:	1f 93       	push	r17
    5fea:	cf 93       	push	r28
    5fec:	df 93       	push	r29
    5fee:	cd b7       	in	r28, 0x3d	; 61
    5ff0:	de b7       	in	r29, 0x3e	; 62
    5ff2:	60 97       	sbiw	r28, 0x10	; 16
    5ff4:	0f b6       	in	r0, 0x3f	; 63
    5ff6:	f8 94       	cli
    5ff8:	de bf       	out	0x3e, r29	; 62
    5ffa:	0f be       	out	0x3f, r0	; 63
    5ffc:	cd bf       	out	0x3d, r28	; 61
    5ffe:	7c 01       	movw	r14, r24
    6000:	1b 01       	movw	r2, r22
    6002:	6a 01       	movw	r12, r20
    6004:	fc 01       	movw	r30, r24
    6006:	17 82       	std	Z+7, r1	; 0x07
    6008:	16 82       	std	Z+6, r1	; 0x06
    600a:	83 81       	ldd	r24, Z+3	; 0x03
    600c:	81 ff       	sbrs	r24, 1
    600e:	2a c3       	rjmp	.+1620   	; 0x6664 <vfprintf+0x69a>
    6010:	9e 01       	movw	r18, r28
    6012:	2f 5f       	subi	r18, 0xFF	; 255
    6014:	3f 4f       	sbci	r19, 0xFF	; 255
    6016:	39 01       	movw	r6, r18
    6018:	f7 01       	movw	r30, r14
    601a:	93 81       	ldd	r25, Z+3	; 0x03
    601c:	f1 01       	movw	r30, r2
    601e:	93 fd       	sbrc	r25, 3
    6020:	85 91       	lpm	r24, Z+
    6022:	93 ff       	sbrs	r25, 3
    6024:	81 91       	ld	r24, Z+
    6026:	1f 01       	movw	r2, r30
    6028:	88 23       	and	r24, r24
    602a:	09 f4       	brne	.+2      	; 0x602e <vfprintf+0x64>
    602c:	17 c3       	rjmp	.+1582   	; 0x665c <vfprintf+0x692>
    602e:	85 32       	cpi	r24, 0x25	; 37
    6030:	39 f4       	brne	.+14     	; 0x6040 <vfprintf+0x76>
    6032:	93 fd       	sbrc	r25, 3
    6034:	85 91       	lpm	r24, Z+
    6036:	93 ff       	sbrs	r25, 3
    6038:	81 91       	ld	r24, Z+
    603a:	1f 01       	movw	r2, r30
    603c:	85 32       	cpi	r24, 0x25	; 37
    603e:	31 f4       	brne	.+12     	; 0x604c <vfprintf+0x82>
    6040:	b7 01       	movw	r22, r14
    6042:	90 e0       	ldi	r25, 0x00	; 0
    6044:	1d d6       	rcall	.+3130   	; 0x6c80 <fputc>
    6046:	56 01       	movw	r10, r12
    6048:	65 01       	movw	r12, r10
    604a:	e6 cf       	rjmp	.-52     	; 0x6018 <vfprintf+0x4e>
    604c:	10 e0       	ldi	r17, 0x00	; 0
    604e:	51 2c       	mov	r5, r1
    6050:	91 2c       	mov	r9, r1
    6052:	ff e1       	ldi	r31, 0x1F	; 31
    6054:	f9 15       	cp	r31, r9
    6056:	d8 f0       	brcs	.+54     	; 0x608e <vfprintf+0xc4>
    6058:	8b 32       	cpi	r24, 0x2B	; 43
    605a:	79 f0       	breq	.+30     	; 0x607a <vfprintf+0xb0>
    605c:	38 f4       	brcc	.+14     	; 0x606c <vfprintf+0xa2>
    605e:	80 32       	cpi	r24, 0x20	; 32
    6060:	79 f0       	breq	.+30     	; 0x6080 <vfprintf+0xb6>
    6062:	83 32       	cpi	r24, 0x23	; 35
    6064:	a1 f4       	brne	.+40     	; 0x608e <vfprintf+0xc4>
    6066:	f9 2d       	mov	r31, r9
    6068:	f0 61       	ori	r31, 0x10	; 16
    606a:	2e c0       	rjmp	.+92     	; 0x60c8 <vfprintf+0xfe>
    606c:	8d 32       	cpi	r24, 0x2D	; 45
    606e:	61 f0       	breq	.+24     	; 0x6088 <vfprintf+0xbe>
    6070:	80 33       	cpi	r24, 0x30	; 48
    6072:	69 f4       	brne	.+26     	; 0x608e <vfprintf+0xc4>
    6074:	29 2d       	mov	r18, r9
    6076:	21 60       	ori	r18, 0x01	; 1
    6078:	2d c0       	rjmp	.+90     	; 0x60d4 <vfprintf+0x10a>
    607a:	39 2d       	mov	r19, r9
    607c:	32 60       	ori	r19, 0x02	; 2
    607e:	93 2e       	mov	r9, r19
    6080:	89 2d       	mov	r24, r9
    6082:	84 60       	ori	r24, 0x04	; 4
    6084:	98 2e       	mov	r9, r24
    6086:	2a c0       	rjmp	.+84     	; 0x60dc <vfprintf+0x112>
    6088:	e9 2d       	mov	r30, r9
    608a:	e8 60       	ori	r30, 0x08	; 8
    608c:	15 c0       	rjmp	.+42     	; 0x60b8 <vfprintf+0xee>
    608e:	97 fc       	sbrc	r9, 7
    6090:	2d c0       	rjmp	.+90     	; 0x60ec <vfprintf+0x122>
    6092:	20 ed       	ldi	r18, 0xD0	; 208
    6094:	28 0f       	add	r18, r24
    6096:	2a 30       	cpi	r18, 0x0A	; 10
    6098:	88 f4       	brcc	.+34     	; 0x60bc <vfprintf+0xf2>
    609a:	96 fe       	sbrs	r9, 6
    609c:	06 c0       	rjmp	.+12     	; 0x60aa <vfprintf+0xe0>
    609e:	3a e0       	ldi	r19, 0x0A	; 10
    60a0:	13 9f       	mul	r17, r19
    60a2:	20 0d       	add	r18, r0
    60a4:	11 24       	eor	r1, r1
    60a6:	12 2f       	mov	r17, r18
    60a8:	19 c0       	rjmp	.+50     	; 0x60dc <vfprintf+0x112>
    60aa:	8a e0       	ldi	r24, 0x0A	; 10
    60ac:	58 9e       	mul	r5, r24
    60ae:	20 0d       	add	r18, r0
    60b0:	11 24       	eor	r1, r1
    60b2:	52 2e       	mov	r5, r18
    60b4:	e9 2d       	mov	r30, r9
    60b6:	e0 62       	ori	r30, 0x20	; 32
    60b8:	9e 2e       	mov	r9, r30
    60ba:	10 c0       	rjmp	.+32     	; 0x60dc <vfprintf+0x112>
    60bc:	8e 32       	cpi	r24, 0x2E	; 46
    60be:	31 f4       	brne	.+12     	; 0x60cc <vfprintf+0x102>
    60c0:	96 fc       	sbrc	r9, 6
    60c2:	cc c2       	rjmp	.+1432   	; 0x665c <vfprintf+0x692>
    60c4:	f9 2d       	mov	r31, r9
    60c6:	f0 64       	ori	r31, 0x40	; 64
    60c8:	9f 2e       	mov	r9, r31
    60ca:	08 c0       	rjmp	.+16     	; 0x60dc <vfprintf+0x112>
    60cc:	8c 36       	cpi	r24, 0x6C	; 108
    60ce:	21 f4       	brne	.+8      	; 0x60d8 <vfprintf+0x10e>
    60d0:	29 2d       	mov	r18, r9
    60d2:	20 68       	ori	r18, 0x80	; 128
    60d4:	92 2e       	mov	r9, r18
    60d6:	02 c0       	rjmp	.+4      	; 0x60dc <vfprintf+0x112>
    60d8:	88 36       	cpi	r24, 0x68	; 104
    60da:	41 f4       	brne	.+16     	; 0x60ec <vfprintf+0x122>
    60dc:	f1 01       	movw	r30, r2
    60de:	93 fd       	sbrc	r25, 3
    60e0:	85 91       	lpm	r24, Z+
    60e2:	93 ff       	sbrs	r25, 3
    60e4:	81 91       	ld	r24, Z+
    60e6:	1f 01       	movw	r2, r30
    60e8:	81 11       	cpse	r24, r1
    60ea:	b3 cf       	rjmp	.-154    	; 0x6052 <vfprintf+0x88>
    60ec:	9b eb       	ldi	r25, 0xBB	; 187
    60ee:	98 0f       	add	r25, r24
    60f0:	93 30       	cpi	r25, 0x03	; 3
    60f2:	20 f4       	brcc	.+8      	; 0x60fc <vfprintf+0x132>
    60f4:	99 2d       	mov	r25, r9
    60f6:	90 61       	ori	r25, 0x10	; 16
    60f8:	80 5e       	subi	r24, 0xE0	; 224
    60fa:	07 c0       	rjmp	.+14     	; 0x610a <vfprintf+0x140>
    60fc:	9b e9       	ldi	r25, 0x9B	; 155
    60fe:	98 0f       	add	r25, r24
    6100:	93 30       	cpi	r25, 0x03	; 3
    6102:	08 f0       	brcs	.+2      	; 0x6106 <vfprintf+0x13c>
    6104:	59 c1       	rjmp	.+690    	; 0x63b8 <vfprintf+0x3ee>
    6106:	99 2d       	mov	r25, r9
    6108:	9f 7e       	andi	r25, 0xEF	; 239
    610a:	96 ff       	sbrs	r25, 6
    610c:	16 e0       	ldi	r17, 0x06	; 6
    610e:	9f 73       	andi	r25, 0x3F	; 63
    6110:	99 2e       	mov	r9, r25
    6112:	85 36       	cpi	r24, 0x65	; 101
    6114:	19 f4       	brne	.+6      	; 0x611c <vfprintf+0x152>
    6116:	90 64       	ori	r25, 0x40	; 64
    6118:	99 2e       	mov	r9, r25
    611a:	08 c0       	rjmp	.+16     	; 0x612c <vfprintf+0x162>
    611c:	86 36       	cpi	r24, 0x66	; 102
    611e:	21 f4       	brne	.+8      	; 0x6128 <vfprintf+0x15e>
    6120:	39 2f       	mov	r19, r25
    6122:	30 68       	ori	r19, 0x80	; 128
    6124:	93 2e       	mov	r9, r19
    6126:	02 c0       	rjmp	.+4      	; 0x612c <vfprintf+0x162>
    6128:	11 11       	cpse	r17, r1
    612a:	11 50       	subi	r17, 0x01	; 1
    612c:	97 fe       	sbrs	r9, 7
    612e:	07 c0       	rjmp	.+14     	; 0x613e <vfprintf+0x174>
    6130:	1c 33       	cpi	r17, 0x3C	; 60
    6132:	50 f4       	brcc	.+20     	; 0x6148 <vfprintf+0x17e>
    6134:	44 24       	eor	r4, r4
    6136:	43 94       	inc	r4
    6138:	41 0e       	add	r4, r17
    613a:	27 e0       	ldi	r18, 0x07	; 7
    613c:	0b c0       	rjmp	.+22     	; 0x6154 <vfprintf+0x18a>
    613e:	18 30       	cpi	r17, 0x08	; 8
    6140:	38 f0       	brcs	.+14     	; 0x6150 <vfprintf+0x186>
    6142:	27 e0       	ldi	r18, 0x07	; 7
    6144:	17 e0       	ldi	r17, 0x07	; 7
    6146:	05 c0       	rjmp	.+10     	; 0x6152 <vfprintf+0x188>
    6148:	27 e0       	ldi	r18, 0x07	; 7
    614a:	9c e3       	ldi	r25, 0x3C	; 60
    614c:	49 2e       	mov	r4, r25
    614e:	02 c0       	rjmp	.+4      	; 0x6154 <vfprintf+0x18a>
    6150:	21 2f       	mov	r18, r17
    6152:	41 2c       	mov	r4, r1
    6154:	56 01       	movw	r10, r12
    6156:	84 e0       	ldi	r24, 0x04	; 4
    6158:	a8 0e       	add	r10, r24
    615a:	b1 1c       	adc	r11, r1
    615c:	f6 01       	movw	r30, r12
    615e:	60 81       	ld	r22, Z
    6160:	71 81       	ldd	r23, Z+1	; 0x01
    6162:	82 81       	ldd	r24, Z+2	; 0x02
    6164:	93 81       	ldd	r25, Z+3	; 0x03
    6166:	04 2d       	mov	r16, r4
    6168:	a3 01       	movw	r20, r6
    616a:	3d d4       	rcall	.+2170   	; 0x69e6 <__ftoa_engine>
    616c:	6c 01       	movw	r12, r24
    616e:	f9 81       	ldd	r31, Y+1	; 0x01
    6170:	fc 87       	std	Y+12, r31	; 0x0c
    6172:	f0 ff       	sbrs	r31, 0
    6174:	02 c0       	rjmp	.+4      	; 0x617a <vfprintf+0x1b0>
    6176:	f3 ff       	sbrs	r31, 3
    6178:	06 c0       	rjmp	.+12     	; 0x6186 <vfprintf+0x1bc>
    617a:	91 fc       	sbrc	r9, 1
    617c:	06 c0       	rjmp	.+12     	; 0x618a <vfprintf+0x1c0>
    617e:	92 fe       	sbrs	r9, 2
    6180:	06 c0       	rjmp	.+12     	; 0x618e <vfprintf+0x1c4>
    6182:	00 e2       	ldi	r16, 0x20	; 32
    6184:	05 c0       	rjmp	.+10     	; 0x6190 <vfprintf+0x1c6>
    6186:	0d e2       	ldi	r16, 0x2D	; 45
    6188:	03 c0       	rjmp	.+6      	; 0x6190 <vfprintf+0x1c6>
    618a:	0b e2       	ldi	r16, 0x2B	; 43
    618c:	01 c0       	rjmp	.+2      	; 0x6190 <vfprintf+0x1c6>
    618e:	00 e0       	ldi	r16, 0x00	; 0
    6190:	8c 85       	ldd	r24, Y+12	; 0x0c
    6192:	8c 70       	andi	r24, 0x0C	; 12
    6194:	19 f0       	breq	.+6      	; 0x619c <vfprintf+0x1d2>
    6196:	01 11       	cpse	r16, r1
    6198:	43 c2       	rjmp	.+1158   	; 0x6620 <vfprintf+0x656>
    619a:	80 c2       	rjmp	.+1280   	; 0x669c <vfprintf+0x6d2>
    619c:	97 fe       	sbrs	r9, 7
    619e:	10 c0       	rjmp	.+32     	; 0x61c0 <vfprintf+0x1f6>
    61a0:	4c 0c       	add	r4, r12
    61a2:	fc 85       	ldd	r31, Y+12	; 0x0c
    61a4:	f4 ff       	sbrs	r31, 4
    61a6:	04 c0       	rjmp	.+8      	; 0x61b0 <vfprintf+0x1e6>
    61a8:	8a 81       	ldd	r24, Y+2	; 0x02
    61aa:	81 33       	cpi	r24, 0x31	; 49
    61ac:	09 f4       	brne	.+2      	; 0x61b0 <vfprintf+0x1e6>
    61ae:	4a 94       	dec	r4
    61b0:	14 14       	cp	r1, r4
    61b2:	74 f5       	brge	.+92     	; 0x6210 <vfprintf+0x246>
    61b4:	28 e0       	ldi	r18, 0x08	; 8
    61b6:	24 15       	cp	r18, r4
    61b8:	78 f5       	brcc	.+94     	; 0x6218 <vfprintf+0x24e>
    61ba:	88 e0       	ldi	r24, 0x08	; 8
    61bc:	48 2e       	mov	r4, r24
    61be:	2c c0       	rjmp	.+88     	; 0x6218 <vfprintf+0x24e>
    61c0:	96 fc       	sbrc	r9, 6
    61c2:	2a c0       	rjmp	.+84     	; 0x6218 <vfprintf+0x24e>
    61c4:	81 2f       	mov	r24, r17
    61c6:	90 e0       	ldi	r25, 0x00	; 0
    61c8:	8c 15       	cp	r24, r12
    61ca:	9d 05       	cpc	r25, r13
    61cc:	9c f0       	brlt	.+38     	; 0x61f4 <vfprintf+0x22a>
    61ce:	3c ef       	ldi	r19, 0xFC	; 252
    61d0:	c3 16       	cp	r12, r19
    61d2:	3f ef       	ldi	r19, 0xFF	; 255
    61d4:	d3 06       	cpc	r13, r19
    61d6:	74 f0       	brlt	.+28     	; 0x61f4 <vfprintf+0x22a>
    61d8:	89 2d       	mov	r24, r9
    61da:	80 68       	ori	r24, 0x80	; 128
    61dc:	98 2e       	mov	r9, r24
    61de:	0a c0       	rjmp	.+20     	; 0x61f4 <vfprintf+0x22a>
    61e0:	e2 e0       	ldi	r30, 0x02	; 2
    61e2:	f0 e0       	ldi	r31, 0x00	; 0
    61e4:	ec 0f       	add	r30, r28
    61e6:	fd 1f       	adc	r31, r29
    61e8:	e1 0f       	add	r30, r17
    61ea:	f1 1d       	adc	r31, r1
    61ec:	80 81       	ld	r24, Z
    61ee:	80 33       	cpi	r24, 0x30	; 48
    61f0:	19 f4       	brne	.+6      	; 0x61f8 <vfprintf+0x22e>
    61f2:	11 50       	subi	r17, 0x01	; 1
    61f4:	11 11       	cpse	r17, r1
    61f6:	f4 cf       	rjmp	.-24     	; 0x61e0 <vfprintf+0x216>
    61f8:	97 fe       	sbrs	r9, 7
    61fa:	0e c0       	rjmp	.+28     	; 0x6218 <vfprintf+0x24e>
    61fc:	44 24       	eor	r4, r4
    61fe:	43 94       	inc	r4
    6200:	41 0e       	add	r4, r17
    6202:	81 2f       	mov	r24, r17
    6204:	90 e0       	ldi	r25, 0x00	; 0
    6206:	c8 16       	cp	r12, r24
    6208:	d9 06       	cpc	r13, r25
    620a:	2c f4       	brge	.+10     	; 0x6216 <vfprintf+0x24c>
    620c:	1c 19       	sub	r17, r12
    620e:	04 c0       	rjmp	.+8      	; 0x6218 <vfprintf+0x24e>
    6210:	44 24       	eor	r4, r4
    6212:	43 94       	inc	r4
    6214:	01 c0       	rjmp	.+2      	; 0x6218 <vfprintf+0x24e>
    6216:	10 e0       	ldi	r17, 0x00	; 0
    6218:	97 fe       	sbrs	r9, 7
    621a:	06 c0       	rjmp	.+12     	; 0x6228 <vfprintf+0x25e>
    621c:	1c 14       	cp	r1, r12
    621e:	1d 04       	cpc	r1, r13
    6220:	34 f4       	brge	.+12     	; 0x622e <vfprintf+0x264>
    6222:	c6 01       	movw	r24, r12
    6224:	01 96       	adiw	r24, 0x01	; 1
    6226:	05 c0       	rjmp	.+10     	; 0x6232 <vfprintf+0x268>
    6228:	85 e0       	ldi	r24, 0x05	; 5
    622a:	90 e0       	ldi	r25, 0x00	; 0
    622c:	02 c0       	rjmp	.+4      	; 0x6232 <vfprintf+0x268>
    622e:	81 e0       	ldi	r24, 0x01	; 1
    6230:	90 e0       	ldi	r25, 0x00	; 0
    6232:	01 11       	cpse	r16, r1
    6234:	01 96       	adiw	r24, 0x01	; 1
    6236:	11 23       	and	r17, r17
    6238:	31 f0       	breq	.+12     	; 0x6246 <vfprintf+0x27c>
    623a:	21 2f       	mov	r18, r17
    623c:	30 e0       	ldi	r19, 0x00	; 0
    623e:	2f 5f       	subi	r18, 0xFF	; 255
    6240:	3f 4f       	sbci	r19, 0xFF	; 255
    6242:	82 0f       	add	r24, r18
    6244:	93 1f       	adc	r25, r19
    6246:	25 2d       	mov	r18, r5
    6248:	30 e0       	ldi	r19, 0x00	; 0
    624a:	82 17       	cp	r24, r18
    624c:	93 07       	cpc	r25, r19
    624e:	14 f4       	brge	.+4      	; 0x6254 <vfprintf+0x28a>
    6250:	58 1a       	sub	r5, r24
    6252:	01 c0       	rjmp	.+2      	; 0x6256 <vfprintf+0x28c>
    6254:	51 2c       	mov	r5, r1
    6256:	89 2d       	mov	r24, r9
    6258:	89 70       	andi	r24, 0x09	; 9
    625a:	41 f4       	brne	.+16     	; 0x626c <vfprintf+0x2a2>
    625c:	55 20       	and	r5, r5
    625e:	31 f0       	breq	.+12     	; 0x626c <vfprintf+0x2a2>
    6260:	b7 01       	movw	r22, r14
    6262:	80 e2       	ldi	r24, 0x20	; 32
    6264:	90 e0       	ldi	r25, 0x00	; 0
    6266:	0c d5       	rcall	.+2584   	; 0x6c80 <fputc>
    6268:	5a 94       	dec	r5
    626a:	f8 cf       	rjmp	.-16     	; 0x625c <vfprintf+0x292>
    626c:	00 23       	and	r16, r16
    626e:	21 f0       	breq	.+8      	; 0x6278 <vfprintf+0x2ae>
    6270:	b7 01       	movw	r22, r14
    6272:	80 2f       	mov	r24, r16
    6274:	90 e0       	ldi	r25, 0x00	; 0
    6276:	04 d5       	rcall	.+2568   	; 0x6c80 <fputc>
    6278:	93 fc       	sbrc	r9, 3
    627a:	08 c0       	rjmp	.+16     	; 0x628c <vfprintf+0x2c2>
    627c:	55 20       	and	r5, r5
    627e:	31 f0       	breq	.+12     	; 0x628c <vfprintf+0x2c2>
    6280:	b7 01       	movw	r22, r14
    6282:	80 e3       	ldi	r24, 0x30	; 48
    6284:	90 e0       	ldi	r25, 0x00	; 0
    6286:	fc d4       	rcall	.+2552   	; 0x6c80 <fputc>
    6288:	5a 94       	dec	r5
    628a:	f8 cf       	rjmp	.-16     	; 0x627c <vfprintf+0x2b2>
    628c:	97 fe       	sbrs	r9, 7
    628e:	4a c0       	rjmp	.+148    	; 0x6324 <vfprintf+0x35a>
    6290:	46 01       	movw	r8, r12
    6292:	d7 fe       	sbrs	r13, 7
    6294:	02 c0       	rjmp	.+4      	; 0x629a <vfprintf+0x2d0>
    6296:	81 2c       	mov	r8, r1
    6298:	91 2c       	mov	r9, r1
    629a:	c6 01       	movw	r24, r12
    629c:	88 19       	sub	r24, r8
    629e:	99 09       	sbc	r25, r9
    62a0:	f3 01       	movw	r30, r6
    62a2:	e8 0f       	add	r30, r24
    62a4:	f9 1f       	adc	r31, r25
    62a6:	fe 87       	std	Y+14, r31	; 0x0e
    62a8:	ed 87       	std	Y+13, r30	; 0x0d
    62aa:	96 01       	movw	r18, r12
    62ac:	24 19       	sub	r18, r4
    62ae:	31 09       	sbc	r19, r1
    62b0:	38 8b       	std	Y+16, r19	; 0x10
    62b2:	2f 87       	std	Y+15, r18	; 0x0f
    62b4:	01 2f       	mov	r16, r17
    62b6:	10 e0       	ldi	r17, 0x00	; 0
    62b8:	11 95       	neg	r17
    62ba:	01 95       	neg	r16
    62bc:	11 09       	sbc	r17, r1
    62be:	3f ef       	ldi	r19, 0xFF	; 255
    62c0:	83 16       	cp	r8, r19
    62c2:	93 06       	cpc	r9, r19
    62c4:	21 f4       	brne	.+8      	; 0x62ce <vfprintf+0x304>
    62c6:	b7 01       	movw	r22, r14
    62c8:	8e e2       	ldi	r24, 0x2E	; 46
    62ca:	90 e0       	ldi	r25, 0x00	; 0
    62cc:	d9 d4       	rcall	.+2482   	; 0x6c80 <fputc>
    62ce:	c8 14       	cp	r12, r8
    62d0:	d9 04       	cpc	r13, r9
    62d2:	4c f0       	brlt	.+18     	; 0x62e6 <vfprintf+0x31c>
    62d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    62d6:	98 89       	ldd	r25, Y+16	; 0x10
    62d8:	88 15       	cp	r24, r8
    62da:	99 05       	cpc	r25, r9
    62dc:	24 f4       	brge	.+8      	; 0x62e6 <vfprintf+0x31c>
    62de:	ed 85       	ldd	r30, Y+13	; 0x0d
    62e0:	fe 85       	ldd	r31, Y+14	; 0x0e
    62e2:	81 81       	ldd	r24, Z+1	; 0x01
    62e4:	01 c0       	rjmp	.+2      	; 0x62e8 <vfprintf+0x31e>
    62e6:	80 e3       	ldi	r24, 0x30	; 48
    62e8:	f1 e0       	ldi	r31, 0x01	; 1
    62ea:	8f 1a       	sub	r8, r31
    62ec:	91 08       	sbc	r9, r1
    62ee:	2d 85       	ldd	r18, Y+13	; 0x0d
    62f0:	3e 85       	ldd	r19, Y+14	; 0x0e
    62f2:	2f 5f       	subi	r18, 0xFF	; 255
    62f4:	3f 4f       	sbci	r19, 0xFF	; 255
    62f6:	3e 87       	std	Y+14, r19	; 0x0e
    62f8:	2d 87       	std	Y+13, r18	; 0x0d
    62fa:	80 16       	cp	r8, r16
    62fc:	91 06       	cpc	r9, r17
    62fe:	24 f0       	brlt	.+8      	; 0x6308 <vfprintf+0x33e>
    6300:	b7 01       	movw	r22, r14
    6302:	90 e0       	ldi	r25, 0x00	; 0
    6304:	bd d4       	rcall	.+2426   	; 0x6c80 <fputc>
    6306:	db cf       	rjmp	.-74     	; 0x62be <vfprintf+0x2f4>
    6308:	c8 14       	cp	r12, r8
    630a:	d9 04       	cpc	r13, r9
    630c:	41 f4       	brne	.+16     	; 0x631e <vfprintf+0x354>
    630e:	9a 81       	ldd	r25, Y+2	; 0x02
    6310:	96 33       	cpi	r25, 0x36	; 54
    6312:	20 f4       	brcc	.+8      	; 0x631c <vfprintf+0x352>
    6314:	95 33       	cpi	r25, 0x35	; 53
    6316:	19 f4       	brne	.+6      	; 0x631e <vfprintf+0x354>
    6318:	3c 85       	ldd	r19, Y+12	; 0x0c
    631a:	34 ff       	sbrs	r19, 4
    631c:	81 e3       	ldi	r24, 0x31	; 49
    631e:	b7 01       	movw	r22, r14
    6320:	90 e0       	ldi	r25, 0x00	; 0
    6322:	48 c0       	rjmp	.+144    	; 0x63b4 <vfprintf+0x3ea>
    6324:	8a 81       	ldd	r24, Y+2	; 0x02
    6326:	81 33       	cpi	r24, 0x31	; 49
    6328:	19 f0       	breq	.+6      	; 0x6330 <vfprintf+0x366>
    632a:	9c 85       	ldd	r25, Y+12	; 0x0c
    632c:	9f 7e       	andi	r25, 0xEF	; 239
    632e:	9c 87       	std	Y+12, r25	; 0x0c
    6330:	b7 01       	movw	r22, r14
    6332:	90 e0       	ldi	r25, 0x00	; 0
    6334:	a5 d4       	rcall	.+2378   	; 0x6c80 <fputc>
    6336:	11 11       	cpse	r17, r1
    6338:	05 c0       	rjmp	.+10     	; 0x6344 <vfprintf+0x37a>
    633a:	94 fc       	sbrc	r9, 4
    633c:	16 c0       	rjmp	.+44     	; 0x636a <vfprintf+0x3a0>
    633e:	85 e6       	ldi	r24, 0x65	; 101
    6340:	90 e0       	ldi	r25, 0x00	; 0
    6342:	15 c0       	rjmp	.+42     	; 0x636e <vfprintf+0x3a4>
    6344:	b7 01       	movw	r22, r14
    6346:	8e e2       	ldi	r24, 0x2E	; 46
    6348:	90 e0       	ldi	r25, 0x00	; 0
    634a:	9a d4       	rcall	.+2356   	; 0x6c80 <fputc>
    634c:	1e 5f       	subi	r17, 0xFE	; 254
    634e:	82 e0       	ldi	r24, 0x02	; 2
    6350:	01 e0       	ldi	r16, 0x01	; 1
    6352:	08 0f       	add	r16, r24
    6354:	f3 01       	movw	r30, r6
    6356:	e8 0f       	add	r30, r24
    6358:	f1 1d       	adc	r31, r1
    635a:	80 81       	ld	r24, Z
    635c:	b7 01       	movw	r22, r14
    635e:	90 e0       	ldi	r25, 0x00	; 0
    6360:	8f d4       	rcall	.+2334   	; 0x6c80 <fputc>
    6362:	80 2f       	mov	r24, r16
    6364:	01 13       	cpse	r16, r17
    6366:	f4 cf       	rjmp	.-24     	; 0x6350 <vfprintf+0x386>
    6368:	e8 cf       	rjmp	.-48     	; 0x633a <vfprintf+0x370>
    636a:	85 e4       	ldi	r24, 0x45	; 69
    636c:	90 e0       	ldi	r25, 0x00	; 0
    636e:	b7 01       	movw	r22, r14
    6370:	87 d4       	rcall	.+2318   	; 0x6c80 <fputc>
    6372:	d7 fc       	sbrc	r13, 7
    6374:	06 c0       	rjmp	.+12     	; 0x6382 <vfprintf+0x3b8>
    6376:	c1 14       	cp	r12, r1
    6378:	d1 04       	cpc	r13, r1
    637a:	41 f4       	brne	.+16     	; 0x638c <vfprintf+0x3c2>
    637c:	ec 85       	ldd	r30, Y+12	; 0x0c
    637e:	e4 ff       	sbrs	r30, 4
    6380:	05 c0       	rjmp	.+10     	; 0x638c <vfprintf+0x3c2>
    6382:	d1 94       	neg	r13
    6384:	c1 94       	neg	r12
    6386:	d1 08       	sbc	r13, r1
    6388:	8d e2       	ldi	r24, 0x2D	; 45
    638a:	01 c0       	rjmp	.+2      	; 0x638e <vfprintf+0x3c4>
    638c:	8b e2       	ldi	r24, 0x2B	; 43
    638e:	b7 01       	movw	r22, r14
    6390:	90 e0       	ldi	r25, 0x00	; 0
    6392:	76 d4       	rcall	.+2284   	; 0x6c80 <fputc>
    6394:	80 e3       	ldi	r24, 0x30	; 48
    6396:	2a e0       	ldi	r18, 0x0A	; 10
    6398:	c2 16       	cp	r12, r18
    639a:	d1 04       	cpc	r13, r1
    639c:	2c f0       	brlt	.+10     	; 0x63a8 <vfprintf+0x3de>
    639e:	8f 5f       	subi	r24, 0xFF	; 255
    63a0:	fa e0       	ldi	r31, 0x0A	; 10
    63a2:	cf 1a       	sub	r12, r31
    63a4:	d1 08       	sbc	r13, r1
    63a6:	f7 cf       	rjmp	.-18     	; 0x6396 <vfprintf+0x3cc>
    63a8:	b7 01       	movw	r22, r14
    63aa:	90 e0       	ldi	r25, 0x00	; 0
    63ac:	69 d4       	rcall	.+2258   	; 0x6c80 <fputc>
    63ae:	b7 01       	movw	r22, r14
    63b0:	c6 01       	movw	r24, r12
    63b2:	c0 96       	adiw	r24, 0x30	; 48
    63b4:	65 d4       	rcall	.+2250   	; 0x6c80 <fputc>
    63b6:	49 c1       	rjmp	.+658    	; 0x664a <vfprintf+0x680>
    63b8:	83 36       	cpi	r24, 0x63	; 99
    63ba:	31 f0       	breq	.+12     	; 0x63c8 <vfprintf+0x3fe>
    63bc:	83 37       	cpi	r24, 0x73	; 115
    63be:	79 f0       	breq	.+30     	; 0x63de <vfprintf+0x414>
    63c0:	83 35       	cpi	r24, 0x53	; 83
    63c2:	09 f0       	breq	.+2      	; 0x63c6 <vfprintf+0x3fc>
    63c4:	52 c0       	rjmp	.+164    	; 0x646a <vfprintf+0x4a0>
    63c6:	1f c0       	rjmp	.+62     	; 0x6406 <vfprintf+0x43c>
    63c8:	56 01       	movw	r10, r12
    63ca:	32 e0       	ldi	r19, 0x02	; 2
    63cc:	a3 0e       	add	r10, r19
    63ce:	b1 1c       	adc	r11, r1
    63d0:	f6 01       	movw	r30, r12
    63d2:	80 81       	ld	r24, Z
    63d4:	89 83       	std	Y+1, r24	; 0x01
    63d6:	01 e0       	ldi	r16, 0x01	; 1
    63d8:	10 e0       	ldi	r17, 0x00	; 0
    63da:	63 01       	movw	r12, r6
    63dc:	11 c0       	rjmp	.+34     	; 0x6400 <vfprintf+0x436>
    63de:	56 01       	movw	r10, r12
    63e0:	f2 e0       	ldi	r31, 0x02	; 2
    63e2:	af 0e       	add	r10, r31
    63e4:	b1 1c       	adc	r11, r1
    63e6:	f6 01       	movw	r30, r12
    63e8:	c0 80       	ld	r12, Z
    63ea:	d1 80       	ldd	r13, Z+1	; 0x01
    63ec:	96 fe       	sbrs	r9, 6
    63ee:	03 c0       	rjmp	.+6      	; 0x63f6 <vfprintf+0x42c>
    63f0:	61 2f       	mov	r22, r17
    63f2:	70 e0       	ldi	r23, 0x00	; 0
    63f4:	02 c0       	rjmp	.+4      	; 0x63fa <vfprintf+0x430>
    63f6:	6f ef       	ldi	r22, 0xFF	; 255
    63f8:	7f ef       	ldi	r23, 0xFF	; 255
    63fa:	c6 01       	movw	r24, r12
    63fc:	36 d4       	rcall	.+2156   	; 0x6c6a <strnlen>
    63fe:	8c 01       	movw	r16, r24
    6400:	f9 2d       	mov	r31, r9
    6402:	ff 77       	andi	r31, 0x7F	; 127
    6404:	13 c0       	rjmp	.+38     	; 0x642c <vfprintf+0x462>
    6406:	56 01       	movw	r10, r12
    6408:	22 e0       	ldi	r18, 0x02	; 2
    640a:	a2 0e       	add	r10, r18
    640c:	b1 1c       	adc	r11, r1
    640e:	f6 01       	movw	r30, r12
    6410:	c0 80       	ld	r12, Z
    6412:	d1 80       	ldd	r13, Z+1	; 0x01
    6414:	96 fe       	sbrs	r9, 6
    6416:	03 c0       	rjmp	.+6      	; 0x641e <vfprintf+0x454>
    6418:	61 2f       	mov	r22, r17
    641a:	70 e0       	ldi	r23, 0x00	; 0
    641c:	02 c0       	rjmp	.+4      	; 0x6422 <vfprintf+0x458>
    641e:	6f ef       	ldi	r22, 0xFF	; 255
    6420:	7f ef       	ldi	r23, 0xFF	; 255
    6422:	c6 01       	movw	r24, r12
    6424:	b8 d3       	rcall	.+1904   	; 0x6b96 <strnlen_P>
    6426:	8c 01       	movw	r16, r24
    6428:	f9 2d       	mov	r31, r9
    642a:	f0 68       	ori	r31, 0x80	; 128
    642c:	9f 2e       	mov	r9, r31
    642e:	f3 fd       	sbrc	r31, 3
    6430:	18 c0       	rjmp	.+48     	; 0x6462 <vfprintf+0x498>
    6432:	85 2d       	mov	r24, r5
    6434:	90 e0       	ldi	r25, 0x00	; 0
    6436:	08 17       	cp	r16, r24
    6438:	19 07       	cpc	r17, r25
    643a:	98 f4       	brcc	.+38     	; 0x6462 <vfprintf+0x498>
    643c:	b7 01       	movw	r22, r14
    643e:	80 e2       	ldi	r24, 0x20	; 32
    6440:	90 e0       	ldi	r25, 0x00	; 0
    6442:	1e d4       	rcall	.+2108   	; 0x6c80 <fputc>
    6444:	5a 94       	dec	r5
    6446:	f5 cf       	rjmp	.-22     	; 0x6432 <vfprintf+0x468>
    6448:	f6 01       	movw	r30, r12
    644a:	97 fc       	sbrc	r9, 7
    644c:	85 91       	lpm	r24, Z+
    644e:	97 fe       	sbrs	r9, 7
    6450:	81 91       	ld	r24, Z+
    6452:	6f 01       	movw	r12, r30
    6454:	b7 01       	movw	r22, r14
    6456:	90 e0       	ldi	r25, 0x00	; 0
    6458:	13 d4       	rcall	.+2086   	; 0x6c80 <fputc>
    645a:	51 10       	cpse	r5, r1
    645c:	5a 94       	dec	r5
    645e:	01 50       	subi	r16, 0x01	; 1
    6460:	11 09       	sbc	r17, r1
    6462:	01 15       	cp	r16, r1
    6464:	11 05       	cpc	r17, r1
    6466:	81 f7       	brne	.-32     	; 0x6448 <vfprintf+0x47e>
    6468:	f0 c0       	rjmp	.+480    	; 0x664a <vfprintf+0x680>
    646a:	84 36       	cpi	r24, 0x64	; 100
    646c:	11 f0       	breq	.+4      	; 0x6472 <vfprintf+0x4a8>
    646e:	89 36       	cpi	r24, 0x69	; 105
    6470:	59 f5       	brne	.+86     	; 0x64c8 <vfprintf+0x4fe>
    6472:	56 01       	movw	r10, r12
    6474:	97 fe       	sbrs	r9, 7
    6476:	09 c0       	rjmp	.+18     	; 0x648a <vfprintf+0x4c0>
    6478:	24 e0       	ldi	r18, 0x04	; 4
    647a:	a2 0e       	add	r10, r18
    647c:	b1 1c       	adc	r11, r1
    647e:	f6 01       	movw	r30, r12
    6480:	60 81       	ld	r22, Z
    6482:	71 81       	ldd	r23, Z+1	; 0x01
    6484:	82 81       	ldd	r24, Z+2	; 0x02
    6486:	93 81       	ldd	r25, Z+3	; 0x03
    6488:	0a c0       	rjmp	.+20     	; 0x649e <vfprintf+0x4d4>
    648a:	f2 e0       	ldi	r31, 0x02	; 2
    648c:	af 0e       	add	r10, r31
    648e:	b1 1c       	adc	r11, r1
    6490:	f6 01       	movw	r30, r12
    6492:	60 81       	ld	r22, Z
    6494:	71 81       	ldd	r23, Z+1	; 0x01
    6496:	07 2e       	mov	r0, r23
    6498:	00 0c       	add	r0, r0
    649a:	88 0b       	sbc	r24, r24
    649c:	99 0b       	sbc	r25, r25
    649e:	f9 2d       	mov	r31, r9
    64a0:	ff 76       	andi	r31, 0x6F	; 111
    64a2:	9f 2e       	mov	r9, r31
    64a4:	97 ff       	sbrs	r25, 7
    64a6:	09 c0       	rjmp	.+18     	; 0x64ba <vfprintf+0x4f0>
    64a8:	90 95       	com	r25
    64aa:	80 95       	com	r24
    64ac:	70 95       	com	r23
    64ae:	61 95       	neg	r22
    64b0:	7f 4f       	sbci	r23, 0xFF	; 255
    64b2:	8f 4f       	sbci	r24, 0xFF	; 255
    64b4:	9f 4f       	sbci	r25, 0xFF	; 255
    64b6:	f0 68       	ori	r31, 0x80	; 128
    64b8:	9f 2e       	mov	r9, r31
    64ba:	2a e0       	ldi	r18, 0x0A	; 10
    64bc:	30 e0       	ldi	r19, 0x00	; 0
    64be:	a3 01       	movw	r20, r6
    64c0:	8c d4       	rcall	.+2328   	; 0x6dda <__ultoa_invert>
    64c2:	c8 2e       	mov	r12, r24
    64c4:	c6 18       	sub	r12, r6
    64c6:	3e c0       	rjmp	.+124    	; 0x6544 <vfprintf+0x57a>
    64c8:	09 2d       	mov	r16, r9
    64ca:	85 37       	cpi	r24, 0x75	; 117
    64cc:	21 f4       	brne	.+8      	; 0x64d6 <vfprintf+0x50c>
    64ce:	0f 7e       	andi	r16, 0xEF	; 239
    64d0:	2a e0       	ldi	r18, 0x0A	; 10
    64d2:	30 e0       	ldi	r19, 0x00	; 0
    64d4:	1d c0       	rjmp	.+58     	; 0x6510 <vfprintf+0x546>
    64d6:	09 7f       	andi	r16, 0xF9	; 249
    64d8:	8f 36       	cpi	r24, 0x6F	; 111
    64da:	91 f0       	breq	.+36     	; 0x6500 <vfprintf+0x536>
    64dc:	18 f4       	brcc	.+6      	; 0x64e4 <vfprintf+0x51a>
    64de:	88 35       	cpi	r24, 0x58	; 88
    64e0:	59 f0       	breq	.+22     	; 0x64f8 <vfprintf+0x52e>
    64e2:	bc c0       	rjmp	.+376    	; 0x665c <vfprintf+0x692>
    64e4:	80 37       	cpi	r24, 0x70	; 112
    64e6:	19 f0       	breq	.+6      	; 0x64ee <vfprintf+0x524>
    64e8:	88 37       	cpi	r24, 0x78	; 120
    64ea:	11 f0       	breq	.+4      	; 0x64f0 <vfprintf+0x526>
    64ec:	b7 c0       	rjmp	.+366    	; 0x665c <vfprintf+0x692>
    64ee:	00 61       	ori	r16, 0x10	; 16
    64f0:	04 ff       	sbrs	r16, 4
    64f2:	09 c0       	rjmp	.+18     	; 0x6506 <vfprintf+0x53c>
    64f4:	04 60       	ori	r16, 0x04	; 4
    64f6:	07 c0       	rjmp	.+14     	; 0x6506 <vfprintf+0x53c>
    64f8:	94 fe       	sbrs	r9, 4
    64fa:	08 c0       	rjmp	.+16     	; 0x650c <vfprintf+0x542>
    64fc:	06 60       	ori	r16, 0x06	; 6
    64fe:	06 c0       	rjmp	.+12     	; 0x650c <vfprintf+0x542>
    6500:	28 e0       	ldi	r18, 0x08	; 8
    6502:	30 e0       	ldi	r19, 0x00	; 0
    6504:	05 c0       	rjmp	.+10     	; 0x6510 <vfprintf+0x546>
    6506:	20 e1       	ldi	r18, 0x10	; 16
    6508:	30 e0       	ldi	r19, 0x00	; 0
    650a:	02 c0       	rjmp	.+4      	; 0x6510 <vfprintf+0x546>
    650c:	20 e1       	ldi	r18, 0x10	; 16
    650e:	32 e0       	ldi	r19, 0x02	; 2
    6510:	56 01       	movw	r10, r12
    6512:	07 ff       	sbrs	r16, 7
    6514:	09 c0       	rjmp	.+18     	; 0x6528 <vfprintf+0x55e>
    6516:	84 e0       	ldi	r24, 0x04	; 4
    6518:	a8 0e       	add	r10, r24
    651a:	b1 1c       	adc	r11, r1
    651c:	f6 01       	movw	r30, r12
    651e:	60 81       	ld	r22, Z
    6520:	71 81       	ldd	r23, Z+1	; 0x01
    6522:	82 81       	ldd	r24, Z+2	; 0x02
    6524:	93 81       	ldd	r25, Z+3	; 0x03
    6526:	08 c0       	rjmp	.+16     	; 0x6538 <vfprintf+0x56e>
    6528:	f2 e0       	ldi	r31, 0x02	; 2
    652a:	af 0e       	add	r10, r31
    652c:	b1 1c       	adc	r11, r1
    652e:	f6 01       	movw	r30, r12
    6530:	60 81       	ld	r22, Z
    6532:	71 81       	ldd	r23, Z+1	; 0x01
    6534:	80 e0       	ldi	r24, 0x00	; 0
    6536:	90 e0       	ldi	r25, 0x00	; 0
    6538:	a3 01       	movw	r20, r6
    653a:	4f d4       	rcall	.+2206   	; 0x6dda <__ultoa_invert>
    653c:	c8 2e       	mov	r12, r24
    653e:	c6 18       	sub	r12, r6
    6540:	0f 77       	andi	r16, 0x7F	; 127
    6542:	90 2e       	mov	r9, r16
    6544:	96 fe       	sbrs	r9, 6
    6546:	0b c0       	rjmp	.+22     	; 0x655e <vfprintf+0x594>
    6548:	09 2d       	mov	r16, r9
    654a:	0e 7f       	andi	r16, 0xFE	; 254
    654c:	c1 16       	cp	r12, r17
    654e:	50 f4       	brcc	.+20     	; 0x6564 <vfprintf+0x59a>
    6550:	94 fe       	sbrs	r9, 4
    6552:	0a c0       	rjmp	.+20     	; 0x6568 <vfprintf+0x59e>
    6554:	92 fc       	sbrc	r9, 2
    6556:	08 c0       	rjmp	.+16     	; 0x6568 <vfprintf+0x59e>
    6558:	09 2d       	mov	r16, r9
    655a:	0e 7e       	andi	r16, 0xEE	; 238
    655c:	05 c0       	rjmp	.+10     	; 0x6568 <vfprintf+0x59e>
    655e:	dc 2c       	mov	r13, r12
    6560:	09 2d       	mov	r16, r9
    6562:	03 c0       	rjmp	.+6      	; 0x656a <vfprintf+0x5a0>
    6564:	dc 2c       	mov	r13, r12
    6566:	01 c0       	rjmp	.+2      	; 0x656a <vfprintf+0x5a0>
    6568:	d1 2e       	mov	r13, r17
    656a:	04 ff       	sbrs	r16, 4
    656c:	0d c0       	rjmp	.+26     	; 0x6588 <vfprintf+0x5be>
    656e:	fe 01       	movw	r30, r28
    6570:	ec 0d       	add	r30, r12
    6572:	f1 1d       	adc	r31, r1
    6574:	80 81       	ld	r24, Z
    6576:	80 33       	cpi	r24, 0x30	; 48
    6578:	11 f4       	brne	.+4      	; 0x657e <vfprintf+0x5b4>
    657a:	09 7e       	andi	r16, 0xE9	; 233
    657c:	09 c0       	rjmp	.+18     	; 0x6590 <vfprintf+0x5c6>
    657e:	02 ff       	sbrs	r16, 2
    6580:	06 c0       	rjmp	.+12     	; 0x658e <vfprintf+0x5c4>
    6582:	d3 94       	inc	r13
    6584:	d3 94       	inc	r13
    6586:	04 c0       	rjmp	.+8      	; 0x6590 <vfprintf+0x5c6>
    6588:	80 2f       	mov	r24, r16
    658a:	86 78       	andi	r24, 0x86	; 134
    658c:	09 f0       	breq	.+2      	; 0x6590 <vfprintf+0x5c6>
    658e:	d3 94       	inc	r13
    6590:	03 fd       	sbrc	r16, 3
    6592:	10 c0       	rjmp	.+32     	; 0x65b4 <vfprintf+0x5ea>
    6594:	00 ff       	sbrs	r16, 0
    6596:	06 c0       	rjmp	.+12     	; 0x65a4 <vfprintf+0x5da>
    6598:	1c 2d       	mov	r17, r12
    659a:	d5 14       	cp	r13, r5
    659c:	78 f4       	brcc	.+30     	; 0x65bc <vfprintf+0x5f2>
    659e:	15 0d       	add	r17, r5
    65a0:	1d 19       	sub	r17, r13
    65a2:	0c c0       	rjmp	.+24     	; 0x65bc <vfprintf+0x5f2>
    65a4:	d5 14       	cp	r13, r5
    65a6:	50 f4       	brcc	.+20     	; 0x65bc <vfprintf+0x5f2>
    65a8:	b7 01       	movw	r22, r14
    65aa:	80 e2       	ldi	r24, 0x20	; 32
    65ac:	90 e0       	ldi	r25, 0x00	; 0
    65ae:	68 d3       	rcall	.+1744   	; 0x6c80 <fputc>
    65b0:	d3 94       	inc	r13
    65b2:	f8 cf       	rjmp	.-16     	; 0x65a4 <vfprintf+0x5da>
    65b4:	d5 14       	cp	r13, r5
    65b6:	10 f4       	brcc	.+4      	; 0x65bc <vfprintf+0x5f2>
    65b8:	5d 18       	sub	r5, r13
    65ba:	01 c0       	rjmp	.+2      	; 0x65be <vfprintf+0x5f4>
    65bc:	51 2c       	mov	r5, r1
    65be:	04 ff       	sbrs	r16, 4
    65c0:	0f c0       	rjmp	.+30     	; 0x65e0 <vfprintf+0x616>
    65c2:	b7 01       	movw	r22, r14
    65c4:	80 e3       	ldi	r24, 0x30	; 48
    65c6:	90 e0       	ldi	r25, 0x00	; 0
    65c8:	5b d3       	rcall	.+1718   	; 0x6c80 <fputc>
    65ca:	02 ff       	sbrs	r16, 2
    65cc:	16 c0       	rjmp	.+44     	; 0x65fa <vfprintf+0x630>
    65ce:	01 fd       	sbrc	r16, 1
    65d0:	03 c0       	rjmp	.+6      	; 0x65d8 <vfprintf+0x60e>
    65d2:	88 e7       	ldi	r24, 0x78	; 120
    65d4:	90 e0       	ldi	r25, 0x00	; 0
    65d6:	02 c0       	rjmp	.+4      	; 0x65dc <vfprintf+0x612>
    65d8:	88 e5       	ldi	r24, 0x58	; 88
    65da:	90 e0       	ldi	r25, 0x00	; 0
    65dc:	b7 01       	movw	r22, r14
    65de:	0c c0       	rjmp	.+24     	; 0x65f8 <vfprintf+0x62e>
    65e0:	80 2f       	mov	r24, r16
    65e2:	86 78       	andi	r24, 0x86	; 134
    65e4:	51 f0       	breq	.+20     	; 0x65fa <vfprintf+0x630>
    65e6:	01 ff       	sbrs	r16, 1
    65e8:	02 c0       	rjmp	.+4      	; 0x65ee <vfprintf+0x624>
    65ea:	8b e2       	ldi	r24, 0x2B	; 43
    65ec:	01 c0       	rjmp	.+2      	; 0x65f0 <vfprintf+0x626>
    65ee:	80 e2       	ldi	r24, 0x20	; 32
    65f0:	07 fd       	sbrc	r16, 7
    65f2:	8d e2       	ldi	r24, 0x2D	; 45
    65f4:	b7 01       	movw	r22, r14
    65f6:	90 e0       	ldi	r25, 0x00	; 0
    65f8:	43 d3       	rcall	.+1670   	; 0x6c80 <fputc>
    65fa:	c1 16       	cp	r12, r17
    65fc:	30 f4       	brcc	.+12     	; 0x660a <vfprintf+0x640>
    65fe:	b7 01       	movw	r22, r14
    6600:	80 e3       	ldi	r24, 0x30	; 48
    6602:	90 e0       	ldi	r25, 0x00	; 0
    6604:	3d d3       	rcall	.+1658   	; 0x6c80 <fputc>
    6606:	11 50       	subi	r17, 0x01	; 1
    6608:	f8 cf       	rjmp	.-16     	; 0x65fa <vfprintf+0x630>
    660a:	ca 94       	dec	r12
    660c:	f3 01       	movw	r30, r6
    660e:	ec 0d       	add	r30, r12
    6610:	f1 1d       	adc	r31, r1
    6612:	80 81       	ld	r24, Z
    6614:	b7 01       	movw	r22, r14
    6616:	90 e0       	ldi	r25, 0x00	; 0
    6618:	33 d3       	rcall	.+1638   	; 0x6c80 <fputc>
    661a:	c1 10       	cpse	r12, r1
    661c:	f6 cf       	rjmp	.-20     	; 0x660a <vfprintf+0x640>
    661e:	15 c0       	rjmp	.+42     	; 0x664a <vfprintf+0x680>
    6620:	f4 e0       	ldi	r31, 0x04	; 4
    6622:	f5 15       	cp	r31, r5
    6624:	50 f5       	brcc	.+84     	; 0x667a <vfprintf+0x6b0>
    6626:	84 e0       	ldi	r24, 0x04	; 4
    6628:	58 1a       	sub	r5, r24
    662a:	93 fe       	sbrs	r9, 3
    662c:	1e c0       	rjmp	.+60     	; 0x666a <vfprintf+0x6a0>
    662e:	01 11       	cpse	r16, r1
    6630:	25 c0       	rjmp	.+74     	; 0x667c <vfprintf+0x6b2>
    6632:	2c 85       	ldd	r18, Y+12	; 0x0c
    6634:	23 ff       	sbrs	r18, 3
    6636:	27 c0       	rjmp	.+78     	; 0x6686 <vfprintf+0x6bc>
    6638:	0a e9       	ldi	r16, 0x9A	; 154
    663a:	11 e0       	ldi	r17, 0x01	; 1
    663c:	39 2d       	mov	r19, r9
    663e:	30 71       	andi	r19, 0x10	; 16
    6640:	93 2e       	mov	r9, r19
    6642:	f8 01       	movw	r30, r16
    6644:	84 91       	lpm	r24, Z
    6646:	81 11       	cpse	r24, r1
    6648:	21 c0       	rjmp	.+66     	; 0x668c <vfprintf+0x6c2>
    664a:	55 20       	and	r5, r5
    664c:	09 f4       	brne	.+2      	; 0x6650 <vfprintf+0x686>
    664e:	fc cc       	rjmp	.-1544   	; 0x6048 <vfprintf+0x7e>
    6650:	b7 01       	movw	r22, r14
    6652:	80 e2       	ldi	r24, 0x20	; 32
    6654:	90 e0       	ldi	r25, 0x00	; 0
    6656:	14 d3       	rcall	.+1576   	; 0x6c80 <fputc>
    6658:	5a 94       	dec	r5
    665a:	f7 cf       	rjmp	.-18     	; 0x664a <vfprintf+0x680>
    665c:	f7 01       	movw	r30, r14
    665e:	86 81       	ldd	r24, Z+6	; 0x06
    6660:	97 81       	ldd	r25, Z+7	; 0x07
    6662:	23 c0       	rjmp	.+70     	; 0x66aa <vfprintf+0x6e0>
    6664:	8f ef       	ldi	r24, 0xFF	; 255
    6666:	9f ef       	ldi	r25, 0xFF	; 255
    6668:	20 c0       	rjmp	.+64     	; 0x66aa <vfprintf+0x6e0>
    666a:	b7 01       	movw	r22, r14
    666c:	80 e2       	ldi	r24, 0x20	; 32
    666e:	90 e0       	ldi	r25, 0x00	; 0
    6670:	07 d3       	rcall	.+1550   	; 0x6c80 <fputc>
    6672:	5a 94       	dec	r5
    6674:	51 10       	cpse	r5, r1
    6676:	f9 cf       	rjmp	.-14     	; 0x666a <vfprintf+0x6a0>
    6678:	da cf       	rjmp	.-76     	; 0x662e <vfprintf+0x664>
    667a:	51 2c       	mov	r5, r1
    667c:	b7 01       	movw	r22, r14
    667e:	80 2f       	mov	r24, r16
    6680:	90 e0       	ldi	r25, 0x00	; 0
    6682:	fe d2       	rcall	.+1532   	; 0x6c80 <fputc>
    6684:	d6 cf       	rjmp	.-84     	; 0x6632 <vfprintf+0x668>
    6686:	0e e9       	ldi	r16, 0x9E	; 158
    6688:	11 e0       	ldi	r17, 0x01	; 1
    668a:	d8 cf       	rjmp	.-80     	; 0x663c <vfprintf+0x672>
    668c:	91 10       	cpse	r9, r1
    668e:	80 52       	subi	r24, 0x20	; 32
    6690:	b7 01       	movw	r22, r14
    6692:	90 e0       	ldi	r25, 0x00	; 0
    6694:	f5 d2       	rcall	.+1514   	; 0x6c80 <fputc>
    6696:	0f 5f       	subi	r16, 0xFF	; 255
    6698:	1f 4f       	sbci	r17, 0xFF	; 255
    669a:	d3 cf       	rjmp	.-90     	; 0x6642 <vfprintf+0x678>
    669c:	23 e0       	ldi	r18, 0x03	; 3
    669e:	25 15       	cp	r18, r5
    66a0:	10 f4       	brcc	.+4      	; 0x66a6 <vfprintf+0x6dc>
    66a2:	83 e0       	ldi	r24, 0x03	; 3
    66a4:	c1 cf       	rjmp	.-126    	; 0x6628 <vfprintf+0x65e>
    66a6:	51 2c       	mov	r5, r1
    66a8:	c4 cf       	rjmp	.-120    	; 0x6632 <vfprintf+0x668>
    66aa:	60 96       	adiw	r28, 0x10	; 16
    66ac:	0f b6       	in	r0, 0x3f	; 63
    66ae:	f8 94       	cli
    66b0:	de bf       	out	0x3e, r29	; 62
    66b2:	0f be       	out	0x3f, r0	; 63
    66b4:	cd bf       	out	0x3d, r28	; 61
    66b6:	df 91       	pop	r29
    66b8:	cf 91       	pop	r28
    66ba:	1f 91       	pop	r17
    66bc:	0f 91       	pop	r16
    66be:	ff 90       	pop	r15
    66c0:	ef 90       	pop	r14
    66c2:	df 90       	pop	r13
    66c4:	cf 90       	pop	r12
    66c6:	bf 90       	pop	r11
    66c8:	af 90       	pop	r10
    66ca:	9f 90       	pop	r9
    66cc:	8f 90       	pop	r8
    66ce:	7f 90       	pop	r7
    66d0:	6f 90       	pop	r6
    66d2:	5f 90       	pop	r5
    66d4:	4f 90       	pop	r4
    66d6:	3f 90       	pop	r3
    66d8:	2f 90       	pop	r2
    66da:	08 95       	ret

000066dc <__divmodhi4>:
    66dc:	97 fb       	bst	r25, 7
    66de:	07 2e       	mov	r0, r23
    66e0:	16 f4       	brtc	.+4      	; 0x66e6 <__divmodhi4+0xa>
    66e2:	00 94       	com	r0
    66e4:	06 d0       	rcall	.+12     	; 0x66f2 <__divmodhi4_neg1>
    66e6:	77 fd       	sbrc	r23, 7
    66e8:	08 d0       	rcall	.+16     	; 0x66fa <__divmodhi4_neg2>
    66ea:	44 d0       	rcall	.+136    	; 0x6774 <__udivmodhi4>
    66ec:	07 fc       	sbrc	r0, 7
    66ee:	05 d0       	rcall	.+10     	; 0x66fa <__divmodhi4_neg2>
    66f0:	3e f4       	brtc	.+14     	; 0x6700 <__divmodhi4_exit>

000066f2 <__divmodhi4_neg1>:
    66f2:	90 95       	com	r25
    66f4:	81 95       	neg	r24
    66f6:	9f 4f       	sbci	r25, 0xFF	; 255
    66f8:	08 95       	ret

000066fa <__divmodhi4_neg2>:
    66fa:	70 95       	com	r23
    66fc:	61 95       	neg	r22
    66fe:	7f 4f       	sbci	r23, 0xFF	; 255

00006700 <__divmodhi4_exit>:
    6700:	08 95       	ret

00006702 <__udivmodsi4>:
    6702:	a1 e2       	ldi	r26, 0x21	; 33
    6704:	1a 2e       	mov	r1, r26
    6706:	aa 1b       	sub	r26, r26
    6708:	bb 1b       	sub	r27, r27
    670a:	fd 01       	movw	r30, r26
    670c:	0d c0       	rjmp	.+26     	; 0x6728 <__udivmodsi4_ep>

0000670e <__udivmodsi4_loop>:
    670e:	aa 1f       	adc	r26, r26
    6710:	bb 1f       	adc	r27, r27
    6712:	ee 1f       	adc	r30, r30
    6714:	ff 1f       	adc	r31, r31
    6716:	a2 17       	cp	r26, r18
    6718:	b3 07       	cpc	r27, r19
    671a:	e4 07       	cpc	r30, r20
    671c:	f5 07       	cpc	r31, r21
    671e:	20 f0       	brcs	.+8      	; 0x6728 <__udivmodsi4_ep>
    6720:	a2 1b       	sub	r26, r18
    6722:	b3 0b       	sbc	r27, r19
    6724:	e4 0b       	sbc	r30, r20
    6726:	f5 0b       	sbc	r31, r21

00006728 <__udivmodsi4_ep>:
    6728:	66 1f       	adc	r22, r22
    672a:	77 1f       	adc	r23, r23
    672c:	88 1f       	adc	r24, r24
    672e:	99 1f       	adc	r25, r25
    6730:	1a 94       	dec	r1
    6732:	69 f7       	brne	.-38     	; 0x670e <__udivmodsi4_loop>
    6734:	60 95       	com	r22
    6736:	70 95       	com	r23
    6738:	80 95       	com	r24
    673a:	90 95       	com	r25
    673c:	9b 01       	movw	r18, r22
    673e:	ac 01       	movw	r20, r24
    6740:	bd 01       	movw	r22, r26
    6742:	cf 01       	movw	r24, r30
    6744:	08 95       	ret

00006746 <__tablejump2__>:
    6746:	ee 0f       	add	r30, r30
    6748:	ff 1f       	adc	r31, r31
    674a:	88 1f       	adc	r24, r24
    674c:	8b bf       	out	0x3b, r24	; 59
    674e:	07 90       	elpm	r0, Z+
    6750:	f6 91       	elpm	r31, Z
    6752:	e0 2d       	mov	r30, r0
    6754:	19 94       	eijmp

00006756 <__umulhisi3>:
    6756:	a2 9f       	mul	r26, r18
    6758:	b0 01       	movw	r22, r0
    675a:	b3 9f       	mul	r27, r19
    675c:	c0 01       	movw	r24, r0
    675e:	a3 9f       	mul	r26, r19
    6760:	70 0d       	add	r23, r0
    6762:	81 1d       	adc	r24, r1
    6764:	11 24       	eor	r1, r1
    6766:	91 1d       	adc	r25, r1
    6768:	b2 9f       	mul	r27, r18
    676a:	70 0d       	add	r23, r0
    676c:	81 1d       	adc	r24, r1
    676e:	11 24       	eor	r1, r1
    6770:	91 1d       	adc	r25, r1
    6772:	08 95       	ret

00006774 <__udivmodhi4>:
    6774:	aa 1b       	sub	r26, r26
    6776:	bb 1b       	sub	r27, r27
    6778:	51 e1       	ldi	r21, 0x11	; 17
    677a:	07 c0       	rjmp	.+14     	; 0x678a <__udivmodhi4_ep>

0000677c <__udivmodhi4_loop>:
    677c:	aa 1f       	adc	r26, r26
    677e:	bb 1f       	adc	r27, r27
    6780:	a6 17       	cp	r26, r22
    6782:	b7 07       	cpc	r27, r23
    6784:	10 f0       	brcs	.+4      	; 0x678a <__udivmodhi4_ep>
    6786:	a6 1b       	sub	r26, r22
    6788:	b7 0b       	sbc	r27, r23

0000678a <__udivmodhi4_ep>:
    678a:	88 1f       	adc	r24, r24
    678c:	99 1f       	adc	r25, r25
    678e:	5a 95       	dec	r21
    6790:	a9 f7       	brne	.-22     	; 0x677c <__udivmodhi4_loop>
    6792:	80 95       	com	r24
    6794:	90 95       	com	r25
    6796:	bc 01       	movw	r22, r24
    6798:	cd 01       	movw	r24, r26
    679a:	08 95       	ret

0000679c <malloc>:
    679c:	0f 93       	push	r16
    679e:	1f 93       	push	r17
    67a0:	cf 93       	push	r28
    67a2:	df 93       	push	r29
    67a4:	82 30       	cpi	r24, 0x02	; 2
    67a6:	91 05       	cpc	r25, r1
    67a8:	10 f4       	brcc	.+4      	; 0x67ae <malloc+0x12>
    67aa:	82 e0       	ldi	r24, 0x02	; 2
    67ac:	90 e0       	ldi	r25, 0x00	; 0
    67ae:	e0 91 cb 17 	lds	r30, 0x17CB	; 0x8017cb <__flp>
    67b2:	f0 91 cc 17 	lds	r31, 0x17CC	; 0x8017cc <__flp+0x1>
    67b6:	20 e0       	ldi	r18, 0x00	; 0
    67b8:	30 e0       	ldi	r19, 0x00	; 0
    67ba:	a0 e0       	ldi	r26, 0x00	; 0
    67bc:	b0 e0       	ldi	r27, 0x00	; 0
    67be:	30 97       	sbiw	r30, 0x00	; 0
    67c0:	19 f1       	breq	.+70     	; 0x6808 <malloc+0x6c>
    67c2:	40 81       	ld	r20, Z
    67c4:	51 81       	ldd	r21, Z+1	; 0x01
    67c6:	02 81       	ldd	r16, Z+2	; 0x02
    67c8:	13 81       	ldd	r17, Z+3	; 0x03
    67ca:	48 17       	cp	r20, r24
    67cc:	59 07       	cpc	r21, r25
    67ce:	c8 f0       	brcs	.+50     	; 0x6802 <malloc+0x66>
    67d0:	84 17       	cp	r24, r20
    67d2:	95 07       	cpc	r25, r21
    67d4:	69 f4       	brne	.+26     	; 0x67f0 <malloc+0x54>
    67d6:	10 97       	sbiw	r26, 0x00	; 0
    67d8:	31 f0       	breq	.+12     	; 0x67e6 <malloc+0x4a>
    67da:	12 96       	adiw	r26, 0x02	; 2
    67dc:	0c 93       	st	X, r16
    67de:	12 97       	sbiw	r26, 0x02	; 2
    67e0:	13 96       	adiw	r26, 0x03	; 3
    67e2:	1c 93       	st	X, r17
    67e4:	27 c0       	rjmp	.+78     	; 0x6834 <malloc+0x98>
    67e6:	00 93 cb 17 	sts	0x17CB, r16	; 0x8017cb <__flp>
    67ea:	10 93 cc 17 	sts	0x17CC, r17	; 0x8017cc <__flp+0x1>
    67ee:	22 c0       	rjmp	.+68     	; 0x6834 <malloc+0x98>
    67f0:	21 15       	cp	r18, r1
    67f2:	31 05       	cpc	r19, r1
    67f4:	19 f0       	breq	.+6      	; 0x67fc <malloc+0x60>
    67f6:	42 17       	cp	r20, r18
    67f8:	53 07       	cpc	r21, r19
    67fa:	18 f4       	brcc	.+6      	; 0x6802 <malloc+0x66>
    67fc:	9a 01       	movw	r18, r20
    67fe:	bd 01       	movw	r22, r26
    6800:	ef 01       	movw	r28, r30
    6802:	df 01       	movw	r26, r30
    6804:	f8 01       	movw	r30, r16
    6806:	db cf       	rjmp	.-74     	; 0x67be <malloc+0x22>
    6808:	21 15       	cp	r18, r1
    680a:	31 05       	cpc	r19, r1
    680c:	f9 f0       	breq	.+62     	; 0x684c <malloc+0xb0>
    680e:	28 1b       	sub	r18, r24
    6810:	39 0b       	sbc	r19, r25
    6812:	24 30       	cpi	r18, 0x04	; 4
    6814:	31 05       	cpc	r19, r1
    6816:	80 f4       	brcc	.+32     	; 0x6838 <malloc+0x9c>
    6818:	8a 81       	ldd	r24, Y+2	; 0x02
    681a:	9b 81       	ldd	r25, Y+3	; 0x03
    681c:	61 15       	cp	r22, r1
    681e:	71 05       	cpc	r23, r1
    6820:	21 f0       	breq	.+8      	; 0x682a <malloc+0x8e>
    6822:	fb 01       	movw	r30, r22
    6824:	93 83       	std	Z+3, r25	; 0x03
    6826:	82 83       	std	Z+2, r24	; 0x02
    6828:	04 c0       	rjmp	.+8      	; 0x6832 <malloc+0x96>
    682a:	90 93 cc 17 	sts	0x17CC, r25	; 0x8017cc <__flp+0x1>
    682e:	80 93 cb 17 	sts	0x17CB, r24	; 0x8017cb <__flp>
    6832:	fe 01       	movw	r30, r28
    6834:	32 96       	adiw	r30, 0x02	; 2
    6836:	44 c0       	rjmp	.+136    	; 0x68c0 <malloc+0x124>
    6838:	fe 01       	movw	r30, r28
    683a:	e2 0f       	add	r30, r18
    683c:	f3 1f       	adc	r31, r19
    683e:	81 93       	st	Z+, r24
    6840:	91 93       	st	Z+, r25
    6842:	22 50       	subi	r18, 0x02	; 2
    6844:	31 09       	sbc	r19, r1
    6846:	39 83       	std	Y+1, r19	; 0x01
    6848:	28 83       	st	Y, r18
    684a:	3a c0       	rjmp	.+116    	; 0x68c0 <malloc+0x124>
    684c:	20 91 c9 17 	lds	r18, 0x17C9	; 0x8017c9 <__brkval>
    6850:	30 91 ca 17 	lds	r19, 0x17CA	; 0x8017ca <__brkval+0x1>
    6854:	23 2b       	or	r18, r19
    6856:	41 f4       	brne	.+16     	; 0x6868 <malloc+0xcc>
    6858:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    685c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6860:	30 93 ca 17 	sts	0x17CA, r19	; 0x8017ca <__brkval+0x1>
    6864:	20 93 c9 17 	sts	0x17C9, r18	; 0x8017c9 <__brkval>
    6868:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    686c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6870:	21 15       	cp	r18, r1
    6872:	31 05       	cpc	r19, r1
    6874:	41 f4       	brne	.+16     	; 0x6886 <malloc+0xea>
    6876:	2d b7       	in	r18, 0x3d	; 61
    6878:	3e b7       	in	r19, 0x3e	; 62
    687a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    687e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6882:	24 1b       	sub	r18, r20
    6884:	35 0b       	sbc	r19, r21
    6886:	e0 91 c9 17 	lds	r30, 0x17C9	; 0x8017c9 <__brkval>
    688a:	f0 91 ca 17 	lds	r31, 0x17CA	; 0x8017ca <__brkval+0x1>
    688e:	e2 17       	cp	r30, r18
    6890:	f3 07       	cpc	r31, r19
    6892:	a0 f4       	brcc	.+40     	; 0x68bc <malloc+0x120>
    6894:	2e 1b       	sub	r18, r30
    6896:	3f 0b       	sbc	r19, r31
    6898:	28 17       	cp	r18, r24
    689a:	39 07       	cpc	r19, r25
    689c:	78 f0       	brcs	.+30     	; 0x68bc <malloc+0x120>
    689e:	ac 01       	movw	r20, r24
    68a0:	4e 5f       	subi	r20, 0xFE	; 254
    68a2:	5f 4f       	sbci	r21, 0xFF	; 255
    68a4:	24 17       	cp	r18, r20
    68a6:	35 07       	cpc	r19, r21
    68a8:	48 f0       	brcs	.+18     	; 0x68bc <malloc+0x120>
    68aa:	4e 0f       	add	r20, r30
    68ac:	5f 1f       	adc	r21, r31
    68ae:	50 93 ca 17 	sts	0x17CA, r21	; 0x8017ca <__brkval+0x1>
    68b2:	40 93 c9 17 	sts	0x17C9, r20	; 0x8017c9 <__brkval>
    68b6:	81 93       	st	Z+, r24
    68b8:	91 93       	st	Z+, r25
    68ba:	02 c0       	rjmp	.+4      	; 0x68c0 <malloc+0x124>
    68bc:	e0 e0       	ldi	r30, 0x00	; 0
    68be:	f0 e0       	ldi	r31, 0x00	; 0
    68c0:	cf 01       	movw	r24, r30
    68c2:	df 91       	pop	r29
    68c4:	cf 91       	pop	r28
    68c6:	1f 91       	pop	r17
    68c8:	0f 91       	pop	r16
    68ca:	08 95       	ret

000068cc <free>:
    68cc:	cf 93       	push	r28
    68ce:	df 93       	push	r29
    68d0:	00 97       	sbiw	r24, 0x00	; 0
    68d2:	09 f4       	brne	.+2      	; 0x68d6 <free+0xa>
    68d4:	81 c0       	rjmp	.+258    	; 0x69d8 <free+0x10c>
    68d6:	fc 01       	movw	r30, r24
    68d8:	32 97       	sbiw	r30, 0x02	; 2
    68da:	13 82       	std	Z+3, r1	; 0x03
    68dc:	12 82       	std	Z+2, r1	; 0x02
    68de:	a0 91 cb 17 	lds	r26, 0x17CB	; 0x8017cb <__flp>
    68e2:	b0 91 cc 17 	lds	r27, 0x17CC	; 0x8017cc <__flp+0x1>
    68e6:	10 97       	sbiw	r26, 0x00	; 0
    68e8:	81 f4       	brne	.+32     	; 0x690a <free+0x3e>
    68ea:	20 81       	ld	r18, Z
    68ec:	31 81       	ldd	r19, Z+1	; 0x01
    68ee:	82 0f       	add	r24, r18
    68f0:	93 1f       	adc	r25, r19
    68f2:	20 91 c9 17 	lds	r18, 0x17C9	; 0x8017c9 <__brkval>
    68f6:	30 91 ca 17 	lds	r19, 0x17CA	; 0x8017ca <__brkval+0x1>
    68fa:	28 17       	cp	r18, r24
    68fc:	39 07       	cpc	r19, r25
    68fe:	51 f5       	brne	.+84     	; 0x6954 <free+0x88>
    6900:	f0 93 ca 17 	sts	0x17CA, r31	; 0x8017ca <__brkval+0x1>
    6904:	e0 93 c9 17 	sts	0x17C9, r30	; 0x8017c9 <__brkval>
    6908:	67 c0       	rjmp	.+206    	; 0x69d8 <free+0x10c>
    690a:	ed 01       	movw	r28, r26
    690c:	20 e0       	ldi	r18, 0x00	; 0
    690e:	30 e0       	ldi	r19, 0x00	; 0
    6910:	ce 17       	cp	r28, r30
    6912:	df 07       	cpc	r29, r31
    6914:	40 f4       	brcc	.+16     	; 0x6926 <free+0x5a>
    6916:	4a 81       	ldd	r20, Y+2	; 0x02
    6918:	5b 81       	ldd	r21, Y+3	; 0x03
    691a:	9e 01       	movw	r18, r28
    691c:	41 15       	cp	r20, r1
    691e:	51 05       	cpc	r21, r1
    6920:	f1 f0       	breq	.+60     	; 0x695e <free+0x92>
    6922:	ea 01       	movw	r28, r20
    6924:	f5 cf       	rjmp	.-22     	; 0x6910 <free+0x44>
    6926:	d3 83       	std	Z+3, r29	; 0x03
    6928:	c2 83       	std	Z+2, r28	; 0x02
    692a:	40 81       	ld	r20, Z
    692c:	51 81       	ldd	r21, Z+1	; 0x01
    692e:	84 0f       	add	r24, r20
    6930:	95 1f       	adc	r25, r21
    6932:	c8 17       	cp	r28, r24
    6934:	d9 07       	cpc	r29, r25
    6936:	59 f4       	brne	.+22     	; 0x694e <free+0x82>
    6938:	88 81       	ld	r24, Y
    693a:	99 81       	ldd	r25, Y+1	; 0x01
    693c:	84 0f       	add	r24, r20
    693e:	95 1f       	adc	r25, r21
    6940:	02 96       	adiw	r24, 0x02	; 2
    6942:	91 83       	std	Z+1, r25	; 0x01
    6944:	80 83       	st	Z, r24
    6946:	8a 81       	ldd	r24, Y+2	; 0x02
    6948:	9b 81       	ldd	r25, Y+3	; 0x03
    694a:	93 83       	std	Z+3, r25	; 0x03
    694c:	82 83       	std	Z+2, r24	; 0x02
    694e:	21 15       	cp	r18, r1
    6950:	31 05       	cpc	r19, r1
    6952:	29 f4       	brne	.+10     	; 0x695e <free+0x92>
    6954:	f0 93 cc 17 	sts	0x17CC, r31	; 0x8017cc <__flp+0x1>
    6958:	e0 93 cb 17 	sts	0x17CB, r30	; 0x8017cb <__flp>
    695c:	3d c0       	rjmp	.+122    	; 0x69d8 <free+0x10c>
    695e:	e9 01       	movw	r28, r18
    6960:	fb 83       	std	Y+3, r31	; 0x03
    6962:	ea 83       	std	Y+2, r30	; 0x02
    6964:	49 91       	ld	r20, Y+
    6966:	59 91       	ld	r21, Y+
    6968:	c4 0f       	add	r28, r20
    696a:	d5 1f       	adc	r29, r21
    696c:	ec 17       	cp	r30, r28
    696e:	fd 07       	cpc	r31, r29
    6970:	61 f4       	brne	.+24     	; 0x698a <free+0xbe>
    6972:	80 81       	ld	r24, Z
    6974:	91 81       	ldd	r25, Z+1	; 0x01
    6976:	84 0f       	add	r24, r20
    6978:	95 1f       	adc	r25, r21
    697a:	02 96       	adiw	r24, 0x02	; 2
    697c:	e9 01       	movw	r28, r18
    697e:	99 83       	std	Y+1, r25	; 0x01
    6980:	88 83       	st	Y, r24
    6982:	82 81       	ldd	r24, Z+2	; 0x02
    6984:	93 81       	ldd	r25, Z+3	; 0x03
    6986:	9b 83       	std	Y+3, r25	; 0x03
    6988:	8a 83       	std	Y+2, r24	; 0x02
    698a:	e0 e0       	ldi	r30, 0x00	; 0
    698c:	f0 e0       	ldi	r31, 0x00	; 0
    698e:	12 96       	adiw	r26, 0x02	; 2
    6990:	8d 91       	ld	r24, X+
    6992:	9c 91       	ld	r25, X
    6994:	13 97       	sbiw	r26, 0x03	; 3
    6996:	00 97       	sbiw	r24, 0x00	; 0
    6998:	19 f0       	breq	.+6      	; 0x69a0 <free+0xd4>
    699a:	fd 01       	movw	r30, r26
    699c:	dc 01       	movw	r26, r24
    699e:	f7 cf       	rjmp	.-18     	; 0x698e <free+0xc2>
    69a0:	8d 91       	ld	r24, X+
    69a2:	9c 91       	ld	r25, X
    69a4:	11 97       	sbiw	r26, 0x01	; 1
    69a6:	9d 01       	movw	r18, r26
    69a8:	2e 5f       	subi	r18, 0xFE	; 254
    69aa:	3f 4f       	sbci	r19, 0xFF	; 255
    69ac:	82 0f       	add	r24, r18
    69ae:	93 1f       	adc	r25, r19
    69b0:	20 91 c9 17 	lds	r18, 0x17C9	; 0x8017c9 <__brkval>
    69b4:	30 91 ca 17 	lds	r19, 0x17CA	; 0x8017ca <__brkval+0x1>
    69b8:	28 17       	cp	r18, r24
    69ba:	39 07       	cpc	r19, r25
    69bc:	69 f4       	brne	.+26     	; 0x69d8 <free+0x10c>
    69be:	30 97       	sbiw	r30, 0x00	; 0
    69c0:	29 f4       	brne	.+10     	; 0x69cc <free+0x100>
    69c2:	10 92 cc 17 	sts	0x17CC, r1	; 0x8017cc <__flp+0x1>
    69c6:	10 92 cb 17 	sts	0x17CB, r1	; 0x8017cb <__flp>
    69ca:	02 c0       	rjmp	.+4      	; 0x69d0 <free+0x104>
    69cc:	13 82       	std	Z+3, r1	; 0x03
    69ce:	12 82       	std	Z+2, r1	; 0x02
    69d0:	b0 93 ca 17 	sts	0x17CA, r27	; 0x8017ca <__brkval+0x1>
    69d4:	a0 93 c9 17 	sts	0x17C9, r26	; 0x8017c9 <__brkval>
    69d8:	df 91       	pop	r29
    69da:	cf 91       	pop	r28
    69dc:	08 95       	ret

000069de <abort>:
    69de:	81 e0       	ldi	r24, 0x01	; 1
    69e0:	90 e0       	ldi	r25, 0x00	; 0
    69e2:	f8 94       	cli
    69e4:	58 c2       	rjmp	.+1200   	; 0x6e96 <_exit>

000069e6 <__ftoa_engine>:
    69e6:	28 30       	cpi	r18, 0x08	; 8
    69e8:	08 f0       	brcs	.+2      	; 0x69ec <__ftoa_engine+0x6>
    69ea:	27 e0       	ldi	r18, 0x07	; 7
    69ec:	33 27       	eor	r19, r19
    69ee:	da 01       	movw	r26, r20
    69f0:	99 0f       	add	r25, r25
    69f2:	31 1d       	adc	r19, r1
    69f4:	87 fd       	sbrc	r24, 7
    69f6:	91 60       	ori	r25, 0x01	; 1
    69f8:	00 96       	adiw	r24, 0x00	; 0
    69fa:	61 05       	cpc	r22, r1
    69fc:	71 05       	cpc	r23, r1
    69fe:	39 f4       	brne	.+14     	; 0x6a0e <__ftoa_engine+0x28>
    6a00:	32 60       	ori	r19, 0x02	; 2
    6a02:	2e 5f       	subi	r18, 0xFE	; 254
    6a04:	3d 93       	st	X+, r19
    6a06:	30 e3       	ldi	r19, 0x30	; 48
    6a08:	2a 95       	dec	r18
    6a0a:	e1 f7       	brne	.-8      	; 0x6a04 <__ftoa_engine+0x1e>
    6a0c:	08 95       	ret
    6a0e:	9f 3f       	cpi	r25, 0xFF	; 255
    6a10:	30 f0       	brcs	.+12     	; 0x6a1e <__ftoa_engine+0x38>
    6a12:	80 38       	cpi	r24, 0x80	; 128
    6a14:	71 05       	cpc	r23, r1
    6a16:	61 05       	cpc	r22, r1
    6a18:	09 f0       	breq	.+2      	; 0x6a1c <__ftoa_engine+0x36>
    6a1a:	3c 5f       	subi	r19, 0xFC	; 252
    6a1c:	3c 5f       	subi	r19, 0xFC	; 252
    6a1e:	3d 93       	st	X+, r19
    6a20:	91 30       	cpi	r25, 0x01	; 1
    6a22:	08 f0       	brcs	.+2      	; 0x6a26 <__ftoa_engine+0x40>
    6a24:	80 68       	ori	r24, 0x80	; 128
    6a26:	91 1d       	adc	r25, r1
    6a28:	df 93       	push	r29
    6a2a:	cf 93       	push	r28
    6a2c:	1f 93       	push	r17
    6a2e:	0f 93       	push	r16
    6a30:	ff 92       	push	r15
    6a32:	ef 92       	push	r14
    6a34:	19 2f       	mov	r17, r25
    6a36:	98 7f       	andi	r25, 0xF8	; 248
    6a38:	96 95       	lsr	r25
    6a3a:	e9 2f       	mov	r30, r25
    6a3c:	96 95       	lsr	r25
    6a3e:	96 95       	lsr	r25
    6a40:	e9 0f       	add	r30, r25
    6a42:	ff 27       	eor	r31, r31
    6a44:	e4 50       	subi	r30, 0x04	; 4
    6a46:	fe 4f       	sbci	r31, 0xFE	; 254
    6a48:	99 27       	eor	r25, r25
    6a4a:	33 27       	eor	r19, r19
    6a4c:	ee 24       	eor	r14, r14
    6a4e:	ff 24       	eor	r15, r15
    6a50:	a7 01       	movw	r20, r14
    6a52:	e7 01       	movw	r28, r14
    6a54:	05 90       	lpm	r0, Z+
    6a56:	08 94       	sec
    6a58:	07 94       	ror	r0
    6a5a:	28 f4       	brcc	.+10     	; 0x6a66 <__ftoa_engine+0x80>
    6a5c:	36 0f       	add	r19, r22
    6a5e:	e7 1e       	adc	r14, r23
    6a60:	f8 1e       	adc	r15, r24
    6a62:	49 1f       	adc	r20, r25
    6a64:	51 1d       	adc	r21, r1
    6a66:	66 0f       	add	r22, r22
    6a68:	77 1f       	adc	r23, r23
    6a6a:	88 1f       	adc	r24, r24
    6a6c:	99 1f       	adc	r25, r25
    6a6e:	06 94       	lsr	r0
    6a70:	a1 f7       	brne	.-24     	; 0x6a5a <__ftoa_engine+0x74>
    6a72:	05 90       	lpm	r0, Z+
    6a74:	07 94       	ror	r0
    6a76:	28 f4       	brcc	.+10     	; 0x6a82 <__ftoa_engine+0x9c>
    6a78:	e7 0e       	add	r14, r23
    6a7a:	f8 1e       	adc	r15, r24
    6a7c:	49 1f       	adc	r20, r25
    6a7e:	56 1f       	adc	r21, r22
    6a80:	c1 1d       	adc	r28, r1
    6a82:	77 0f       	add	r23, r23
    6a84:	88 1f       	adc	r24, r24
    6a86:	99 1f       	adc	r25, r25
    6a88:	66 1f       	adc	r22, r22
    6a8a:	06 94       	lsr	r0
    6a8c:	a1 f7       	brne	.-24     	; 0x6a76 <__ftoa_engine+0x90>
    6a8e:	05 90       	lpm	r0, Z+
    6a90:	07 94       	ror	r0
    6a92:	28 f4       	brcc	.+10     	; 0x6a9e <__ftoa_engine+0xb8>
    6a94:	f8 0e       	add	r15, r24
    6a96:	49 1f       	adc	r20, r25
    6a98:	56 1f       	adc	r21, r22
    6a9a:	c7 1f       	adc	r28, r23
    6a9c:	d1 1d       	adc	r29, r1
    6a9e:	88 0f       	add	r24, r24
    6aa0:	99 1f       	adc	r25, r25
    6aa2:	66 1f       	adc	r22, r22
    6aa4:	77 1f       	adc	r23, r23
    6aa6:	06 94       	lsr	r0
    6aa8:	a1 f7       	brne	.-24     	; 0x6a92 <__ftoa_engine+0xac>
    6aaa:	05 90       	lpm	r0, Z+
    6aac:	07 94       	ror	r0
    6aae:	20 f4       	brcc	.+8      	; 0x6ab8 <__ftoa_engine+0xd2>
    6ab0:	49 0f       	add	r20, r25
    6ab2:	56 1f       	adc	r21, r22
    6ab4:	c7 1f       	adc	r28, r23
    6ab6:	d8 1f       	adc	r29, r24
    6ab8:	99 0f       	add	r25, r25
    6aba:	66 1f       	adc	r22, r22
    6abc:	77 1f       	adc	r23, r23
    6abe:	88 1f       	adc	r24, r24
    6ac0:	06 94       	lsr	r0
    6ac2:	a9 f7       	brne	.-22     	; 0x6aae <__ftoa_engine+0xc8>
    6ac4:	84 91       	lpm	r24, Z
    6ac6:	10 95       	com	r17
    6ac8:	17 70       	andi	r17, 0x07	; 7
    6aca:	41 f0       	breq	.+16     	; 0x6adc <__ftoa_engine+0xf6>
    6acc:	d6 95       	lsr	r29
    6ace:	c7 95       	ror	r28
    6ad0:	57 95       	ror	r21
    6ad2:	47 95       	ror	r20
    6ad4:	f7 94       	ror	r15
    6ad6:	e7 94       	ror	r14
    6ad8:	1a 95       	dec	r17
    6ada:	c1 f7       	brne	.-16     	; 0x6acc <__ftoa_engine+0xe6>
    6adc:	e2 ea       	ldi	r30, 0xA2	; 162
    6ade:	f1 e0       	ldi	r31, 0x01	; 1
    6ae0:	68 94       	set
    6ae2:	15 90       	lpm	r1, Z+
    6ae4:	15 91       	lpm	r17, Z+
    6ae6:	35 91       	lpm	r19, Z+
    6ae8:	65 91       	lpm	r22, Z+
    6aea:	95 91       	lpm	r25, Z+
    6aec:	05 90       	lpm	r0, Z+
    6aee:	7f e2       	ldi	r23, 0x2F	; 47
    6af0:	73 95       	inc	r23
    6af2:	e1 18       	sub	r14, r1
    6af4:	f1 0a       	sbc	r15, r17
    6af6:	43 0b       	sbc	r20, r19
    6af8:	56 0b       	sbc	r21, r22
    6afa:	c9 0b       	sbc	r28, r25
    6afc:	d0 09       	sbc	r29, r0
    6afe:	c0 f7       	brcc	.-16     	; 0x6af0 <__ftoa_engine+0x10a>
    6b00:	e1 0c       	add	r14, r1
    6b02:	f1 1e       	adc	r15, r17
    6b04:	43 1f       	adc	r20, r19
    6b06:	56 1f       	adc	r21, r22
    6b08:	c9 1f       	adc	r28, r25
    6b0a:	d0 1d       	adc	r29, r0
    6b0c:	7e f4       	brtc	.+30     	; 0x6b2c <__ftoa_engine+0x146>
    6b0e:	70 33       	cpi	r23, 0x30	; 48
    6b10:	11 f4       	brne	.+4      	; 0x6b16 <__ftoa_engine+0x130>
    6b12:	8a 95       	dec	r24
    6b14:	e6 cf       	rjmp	.-52     	; 0x6ae2 <__ftoa_engine+0xfc>
    6b16:	e8 94       	clt
    6b18:	01 50       	subi	r16, 0x01	; 1
    6b1a:	30 f0       	brcs	.+12     	; 0x6b28 <__ftoa_engine+0x142>
    6b1c:	08 0f       	add	r16, r24
    6b1e:	0a f4       	brpl	.+2      	; 0x6b22 <__ftoa_engine+0x13c>
    6b20:	00 27       	eor	r16, r16
    6b22:	02 17       	cp	r16, r18
    6b24:	08 f4       	brcc	.+2      	; 0x6b28 <__ftoa_engine+0x142>
    6b26:	20 2f       	mov	r18, r16
    6b28:	23 95       	inc	r18
    6b2a:	02 2f       	mov	r16, r18
    6b2c:	7a 33       	cpi	r23, 0x3A	; 58
    6b2e:	28 f0       	brcs	.+10     	; 0x6b3a <__ftoa_engine+0x154>
    6b30:	79 e3       	ldi	r23, 0x39	; 57
    6b32:	7d 93       	st	X+, r23
    6b34:	2a 95       	dec	r18
    6b36:	e9 f7       	brne	.-6      	; 0x6b32 <__ftoa_engine+0x14c>
    6b38:	10 c0       	rjmp	.+32     	; 0x6b5a <__ftoa_engine+0x174>
    6b3a:	7d 93       	st	X+, r23
    6b3c:	2a 95       	dec	r18
    6b3e:	89 f6       	brne	.-94     	; 0x6ae2 <__ftoa_engine+0xfc>
    6b40:	06 94       	lsr	r0
    6b42:	97 95       	ror	r25
    6b44:	67 95       	ror	r22
    6b46:	37 95       	ror	r19
    6b48:	17 95       	ror	r17
    6b4a:	17 94       	ror	r1
    6b4c:	e1 18       	sub	r14, r1
    6b4e:	f1 0a       	sbc	r15, r17
    6b50:	43 0b       	sbc	r20, r19
    6b52:	56 0b       	sbc	r21, r22
    6b54:	c9 0b       	sbc	r28, r25
    6b56:	d0 09       	sbc	r29, r0
    6b58:	98 f0       	brcs	.+38     	; 0x6b80 <__ftoa_engine+0x19a>
    6b5a:	23 95       	inc	r18
    6b5c:	7e 91       	ld	r23, -X
    6b5e:	73 95       	inc	r23
    6b60:	7a 33       	cpi	r23, 0x3A	; 58
    6b62:	08 f0       	brcs	.+2      	; 0x6b66 <__ftoa_engine+0x180>
    6b64:	70 e3       	ldi	r23, 0x30	; 48
    6b66:	7c 93       	st	X, r23
    6b68:	20 13       	cpse	r18, r16
    6b6a:	b8 f7       	brcc	.-18     	; 0x6b5a <__ftoa_engine+0x174>
    6b6c:	7e 91       	ld	r23, -X
    6b6e:	70 61       	ori	r23, 0x10	; 16
    6b70:	7d 93       	st	X+, r23
    6b72:	30 f0       	brcs	.+12     	; 0x6b80 <__ftoa_engine+0x19a>
    6b74:	83 95       	inc	r24
    6b76:	71 e3       	ldi	r23, 0x31	; 49
    6b78:	7d 93       	st	X+, r23
    6b7a:	70 e3       	ldi	r23, 0x30	; 48
    6b7c:	2a 95       	dec	r18
    6b7e:	e1 f7       	brne	.-8      	; 0x6b78 <__ftoa_engine+0x192>
    6b80:	11 24       	eor	r1, r1
    6b82:	ef 90       	pop	r14
    6b84:	ff 90       	pop	r15
    6b86:	0f 91       	pop	r16
    6b88:	1f 91       	pop	r17
    6b8a:	cf 91       	pop	r28
    6b8c:	df 91       	pop	r29
    6b8e:	99 27       	eor	r25, r25
    6b90:	87 fd       	sbrc	r24, 7
    6b92:	90 95       	com	r25
    6b94:	08 95       	ret

00006b96 <strnlen_P>:
    6b96:	fc 01       	movw	r30, r24
    6b98:	05 90       	lpm	r0, Z+
    6b9a:	61 50       	subi	r22, 0x01	; 1
    6b9c:	70 40       	sbci	r23, 0x00	; 0
    6b9e:	01 10       	cpse	r0, r1
    6ba0:	d8 f7       	brcc	.-10     	; 0x6b98 <strnlen_P+0x2>
    6ba2:	80 95       	com	r24
    6ba4:	90 95       	com	r25
    6ba6:	8e 0f       	add	r24, r30
    6ba8:	9f 1f       	adc	r25, r31
    6baa:	08 95       	ret

00006bac <memcpy>:
    6bac:	fb 01       	movw	r30, r22
    6bae:	dc 01       	movw	r26, r24
    6bb0:	02 c0       	rjmp	.+4      	; 0x6bb6 <memcpy+0xa>
    6bb2:	01 90       	ld	r0, Z+
    6bb4:	0d 92       	st	X+, r0
    6bb6:	41 50       	subi	r20, 0x01	; 1
    6bb8:	50 40       	sbci	r21, 0x00	; 0
    6bba:	d8 f7       	brcc	.-10     	; 0x6bb2 <memcpy+0x6>
    6bbc:	08 95       	ret

00006bbe <memset>:
    6bbe:	dc 01       	movw	r26, r24
    6bc0:	01 c0       	rjmp	.+2      	; 0x6bc4 <memset+0x6>
    6bc2:	6d 93       	st	X+, r22
    6bc4:	41 50       	subi	r20, 0x01	; 1
    6bc6:	50 40       	sbci	r21, 0x00	; 0
    6bc8:	e0 f7       	brcc	.-8      	; 0x6bc2 <memset+0x4>
    6bca:	08 95       	ret

00006bcc <strcasestr>:
    6bcc:	fb 01       	movw	r30, r22
    6bce:	51 91       	ld	r21, Z+
    6bd0:	55 23       	and	r21, r21
    6bd2:	b1 f0       	breq	.+44     	; 0x6c00 <strcasestr+0x34>
    6bd4:	bf 01       	movw	r22, r30
    6bd6:	dc 01       	movw	r26, r24
    6bd8:	05 2e       	mov	r0, r21
    6bda:	4d 91       	ld	r20, X+
    6bdc:	44 23       	and	r20, r20
    6bde:	69 f0       	breq	.+26     	; 0x6bfa <strcasestr+0x2e>
    6be0:	10 d0       	rcall	.+32     	; 0x6c02 <strcasestr+0x36>
    6be2:	d9 f7       	brne	.-10     	; 0x6bda <strcasestr+0xe>
    6be4:	cd 01       	movw	r24, r26
    6be6:	01 90       	ld	r0, Z+
    6be8:	00 20       	and	r0, r0
    6bea:	49 f0       	breq	.+18     	; 0x6bfe <strcasestr+0x32>
    6bec:	4d 91       	ld	r20, X+
    6bee:	41 11       	cpse	r20, r1
    6bf0:	08 d0       	rcall	.+16     	; 0x6c02 <strcasestr+0x36>
    6bf2:	c9 f3       	breq	.-14     	; 0x6be6 <strcasestr+0x1a>
    6bf4:	fb 01       	movw	r30, r22
    6bf6:	41 11       	cpse	r20, r1
    6bf8:	ee cf       	rjmp	.-36     	; 0x6bd6 <strcasestr+0xa>
    6bfa:	81 e0       	ldi	r24, 0x01	; 1
    6bfc:	90 e0       	ldi	r25, 0x00	; 0
    6bfe:	01 97       	sbiw	r24, 0x01	; 1
    6c00:	08 95       	ret
    6c02:	40 25       	eor	r20, r0
    6c04:	39 f0       	breq	.+14     	; 0x6c14 <strcasestr+0x48>
    6c06:	40 32       	cpi	r20, 0x20	; 32
    6c08:	29 f4       	brne	.+10     	; 0x6c14 <strcasestr+0x48>
    6c0a:	40 29       	or	r20, r0
    6c0c:	4b 57       	subi	r20, 0x7B	; 123
    6c0e:	46 5e       	subi	r20, 0xE6	; 230
    6c10:	08 f0       	brcs	.+2      	; 0x6c14 <strcasestr+0x48>
    6c12:	18 94       	sez
    6c14:	08 95       	ret

00006c16 <strcat>:
    6c16:	fb 01       	movw	r30, r22
    6c18:	dc 01       	movw	r26, r24
    6c1a:	0d 90       	ld	r0, X+
    6c1c:	00 20       	and	r0, r0
    6c1e:	e9 f7       	brne	.-6      	; 0x6c1a <strcat+0x4>
    6c20:	11 97       	sbiw	r26, 0x01	; 1
    6c22:	01 90       	ld	r0, Z+
    6c24:	0d 92       	st	X+, r0
    6c26:	00 20       	and	r0, r0
    6c28:	e1 f7       	brne	.-8      	; 0x6c22 <strcat+0xc>
    6c2a:	08 95       	ret

00006c2c <strcpy>:
    6c2c:	fb 01       	movw	r30, r22
    6c2e:	dc 01       	movw	r26, r24
    6c30:	01 90       	ld	r0, Z+
    6c32:	0d 92       	st	X+, r0
    6c34:	00 20       	and	r0, r0
    6c36:	e1 f7       	brne	.-8      	; 0x6c30 <strcpy+0x4>
    6c38:	08 95       	ret

00006c3a <strncasecmp>:
    6c3a:	fb 01       	movw	r30, r22
    6c3c:	dc 01       	movw	r26, r24
    6c3e:	41 50       	subi	r20, 0x01	; 1
    6c40:	50 40       	sbci	r21, 0x00	; 0
    6c42:	88 f0       	brcs	.+34     	; 0x6c66 <strncasecmp+0x2c>
    6c44:	8d 91       	ld	r24, X+
    6c46:	81 34       	cpi	r24, 0x41	; 65
    6c48:	1c f0       	brlt	.+6      	; 0x6c50 <strncasecmp+0x16>
    6c4a:	8b 35       	cpi	r24, 0x5B	; 91
    6c4c:	0c f4       	brge	.+2      	; 0x6c50 <strncasecmp+0x16>
    6c4e:	80 5e       	subi	r24, 0xE0	; 224
    6c50:	61 91       	ld	r22, Z+
    6c52:	61 34       	cpi	r22, 0x41	; 65
    6c54:	1c f0       	brlt	.+6      	; 0x6c5c <strncasecmp+0x22>
    6c56:	6b 35       	cpi	r22, 0x5B	; 91
    6c58:	0c f4       	brge	.+2      	; 0x6c5c <strncasecmp+0x22>
    6c5a:	60 5e       	subi	r22, 0xE0	; 224
    6c5c:	86 1b       	sub	r24, r22
    6c5e:	61 11       	cpse	r22, r1
    6c60:	71 f3       	breq	.-36     	; 0x6c3e <strncasecmp+0x4>
    6c62:	99 0b       	sbc	r25, r25
    6c64:	08 95       	ret
    6c66:	88 1b       	sub	r24, r24
    6c68:	fc cf       	rjmp	.-8      	; 0x6c62 <strncasecmp+0x28>

00006c6a <strnlen>:
    6c6a:	fc 01       	movw	r30, r24
    6c6c:	61 50       	subi	r22, 0x01	; 1
    6c6e:	70 40       	sbci	r23, 0x00	; 0
    6c70:	01 90       	ld	r0, Z+
    6c72:	01 10       	cpse	r0, r1
    6c74:	d8 f7       	brcc	.-10     	; 0x6c6c <strnlen+0x2>
    6c76:	80 95       	com	r24
    6c78:	90 95       	com	r25
    6c7a:	8e 0f       	add	r24, r30
    6c7c:	9f 1f       	adc	r25, r31
    6c7e:	08 95       	ret

00006c80 <fputc>:
    6c80:	0f 93       	push	r16
    6c82:	1f 93       	push	r17
    6c84:	cf 93       	push	r28
    6c86:	df 93       	push	r29
    6c88:	fb 01       	movw	r30, r22
    6c8a:	23 81       	ldd	r18, Z+3	; 0x03
    6c8c:	21 fd       	sbrc	r18, 1
    6c8e:	03 c0       	rjmp	.+6      	; 0x6c96 <fputc+0x16>
    6c90:	8f ef       	ldi	r24, 0xFF	; 255
    6c92:	9f ef       	ldi	r25, 0xFF	; 255
    6c94:	2c c0       	rjmp	.+88     	; 0x6cee <fputc+0x6e>
    6c96:	22 ff       	sbrs	r18, 2
    6c98:	16 c0       	rjmp	.+44     	; 0x6cc6 <fputc+0x46>
    6c9a:	46 81       	ldd	r20, Z+6	; 0x06
    6c9c:	57 81       	ldd	r21, Z+7	; 0x07
    6c9e:	24 81       	ldd	r18, Z+4	; 0x04
    6ca0:	35 81       	ldd	r19, Z+5	; 0x05
    6ca2:	42 17       	cp	r20, r18
    6ca4:	53 07       	cpc	r21, r19
    6ca6:	44 f4       	brge	.+16     	; 0x6cb8 <fputc+0x38>
    6ca8:	a0 81       	ld	r26, Z
    6caa:	b1 81       	ldd	r27, Z+1	; 0x01
    6cac:	9d 01       	movw	r18, r26
    6cae:	2f 5f       	subi	r18, 0xFF	; 255
    6cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    6cb2:	31 83       	std	Z+1, r19	; 0x01
    6cb4:	20 83       	st	Z, r18
    6cb6:	8c 93       	st	X, r24
    6cb8:	26 81       	ldd	r18, Z+6	; 0x06
    6cba:	37 81       	ldd	r19, Z+7	; 0x07
    6cbc:	2f 5f       	subi	r18, 0xFF	; 255
    6cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    6cc0:	37 83       	std	Z+7, r19	; 0x07
    6cc2:	26 83       	std	Z+6, r18	; 0x06
    6cc4:	14 c0       	rjmp	.+40     	; 0x6cee <fputc+0x6e>
    6cc6:	8b 01       	movw	r16, r22
    6cc8:	ec 01       	movw	r28, r24
    6cca:	fb 01       	movw	r30, r22
    6ccc:	00 84       	ldd	r0, Z+8	; 0x08
    6cce:	f1 85       	ldd	r31, Z+9	; 0x09
    6cd0:	e0 2d       	mov	r30, r0
    6cd2:	19 95       	eicall
    6cd4:	89 2b       	or	r24, r25
    6cd6:	e1 f6       	brne	.-72     	; 0x6c90 <fputc+0x10>
    6cd8:	d8 01       	movw	r26, r16
    6cda:	16 96       	adiw	r26, 0x06	; 6
    6cdc:	8d 91       	ld	r24, X+
    6cde:	9c 91       	ld	r25, X
    6ce0:	17 97       	sbiw	r26, 0x07	; 7
    6ce2:	01 96       	adiw	r24, 0x01	; 1
    6ce4:	17 96       	adiw	r26, 0x07	; 7
    6ce6:	9c 93       	st	X, r25
    6ce8:	8e 93       	st	-X, r24
    6cea:	16 97       	sbiw	r26, 0x06	; 6
    6cec:	ce 01       	movw	r24, r28
    6cee:	df 91       	pop	r29
    6cf0:	cf 91       	pop	r28
    6cf2:	1f 91       	pop	r17
    6cf4:	0f 91       	pop	r16
    6cf6:	08 95       	ret

00006cf8 <printf>:
    6cf8:	cf 93       	push	r28
    6cfa:	df 93       	push	r29
    6cfc:	cd b7       	in	r28, 0x3d	; 61
    6cfe:	de b7       	in	r29, 0x3e	; 62
    6d00:	ae 01       	movw	r20, r28
    6d02:	4a 5f       	subi	r20, 0xFA	; 250
    6d04:	5f 4f       	sbci	r21, 0xFF	; 255
    6d06:	fa 01       	movw	r30, r20
    6d08:	61 91       	ld	r22, Z+
    6d0a:	71 91       	ld	r23, Z+
    6d0c:	af 01       	movw	r20, r30
    6d0e:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <__iob+0x2>
    6d12:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <__iob+0x3>
    6d16:	59 d9       	rcall	.-3406   	; 0x5fca <vfprintf>
    6d18:	df 91       	pop	r29
    6d1a:	cf 91       	pop	r28
    6d1c:	08 95       	ret

00006d1e <puts>:
    6d1e:	0f 93       	push	r16
    6d20:	1f 93       	push	r17
    6d22:	cf 93       	push	r28
    6d24:	df 93       	push	r29
    6d26:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <__iob+0x2>
    6d2a:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <__iob+0x3>
    6d2e:	23 81       	ldd	r18, Z+3	; 0x03
    6d30:	21 ff       	sbrs	r18, 1
    6d32:	1b c0       	rjmp	.+54     	; 0x6d6a <puts+0x4c>
    6d34:	8c 01       	movw	r16, r24
    6d36:	d0 e0       	ldi	r29, 0x00	; 0
    6d38:	c0 e0       	ldi	r28, 0x00	; 0
    6d3a:	f8 01       	movw	r30, r16
    6d3c:	81 91       	ld	r24, Z+
    6d3e:	8f 01       	movw	r16, r30
    6d40:	60 91 cf 17 	lds	r22, 0x17CF	; 0x8017cf <__iob+0x2>
    6d44:	70 91 d0 17 	lds	r23, 0x17D0	; 0x8017d0 <__iob+0x3>
    6d48:	db 01       	movw	r26, r22
    6d4a:	18 96       	adiw	r26, 0x08	; 8
    6d4c:	ed 91       	ld	r30, X+
    6d4e:	fc 91       	ld	r31, X
    6d50:	19 97       	sbiw	r26, 0x09	; 9
    6d52:	88 23       	and	r24, r24
    6d54:	31 f0       	breq	.+12     	; 0x6d62 <puts+0x44>
    6d56:	19 95       	eicall
    6d58:	89 2b       	or	r24, r25
    6d5a:	79 f3       	breq	.-34     	; 0x6d3a <puts+0x1c>
    6d5c:	df ef       	ldi	r29, 0xFF	; 255
    6d5e:	cf ef       	ldi	r28, 0xFF	; 255
    6d60:	ec cf       	rjmp	.-40     	; 0x6d3a <puts+0x1c>
    6d62:	8a e0       	ldi	r24, 0x0A	; 10
    6d64:	19 95       	eicall
    6d66:	89 2b       	or	r24, r25
    6d68:	19 f0       	breq	.+6      	; 0x6d70 <puts+0x52>
    6d6a:	8f ef       	ldi	r24, 0xFF	; 255
    6d6c:	9f ef       	ldi	r25, 0xFF	; 255
    6d6e:	02 c0       	rjmp	.+4      	; 0x6d74 <puts+0x56>
    6d70:	8d 2f       	mov	r24, r29
    6d72:	9c 2f       	mov	r25, r28
    6d74:	df 91       	pop	r29
    6d76:	cf 91       	pop	r28
    6d78:	1f 91       	pop	r17
    6d7a:	0f 91       	pop	r16
    6d7c:	08 95       	ret

00006d7e <sprintf>:
    6d7e:	0f 93       	push	r16
    6d80:	1f 93       	push	r17
    6d82:	cf 93       	push	r28
    6d84:	df 93       	push	r29
    6d86:	cd b7       	in	r28, 0x3d	; 61
    6d88:	de b7       	in	r29, 0x3e	; 62
    6d8a:	2e 97       	sbiw	r28, 0x0e	; 14
    6d8c:	0f b6       	in	r0, 0x3f	; 63
    6d8e:	f8 94       	cli
    6d90:	de bf       	out	0x3e, r29	; 62
    6d92:	0f be       	out	0x3f, r0	; 63
    6d94:	cd bf       	out	0x3d, r28	; 61
    6d96:	0e 89       	ldd	r16, Y+22	; 0x16
    6d98:	1f 89       	ldd	r17, Y+23	; 0x17
    6d9a:	86 e0       	ldi	r24, 0x06	; 6
    6d9c:	8c 83       	std	Y+4, r24	; 0x04
    6d9e:	1a 83       	std	Y+2, r17	; 0x02
    6da0:	09 83       	std	Y+1, r16	; 0x01
    6da2:	8f ef       	ldi	r24, 0xFF	; 255
    6da4:	9f e7       	ldi	r25, 0x7F	; 127
    6da6:	9e 83       	std	Y+6, r25	; 0x06
    6da8:	8d 83       	std	Y+5, r24	; 0x05
    6daa:	ae 01       	movw	r20, r28
    6dac:	46 5e       	subi	r20, 0xE6	; 230
    6dae:	5f 4f       	sbci	r21, 0xFF	; 255
    6db0:	68 8d       	ldd	r22, Y+24	; 0x18
    6db2:	79 8d       	ldd	r23, Y+25	; 0x19
    6db4:	ce 01       	movw	r24, r28
    6db6:	01 96       	adiw	r24, 0x01	; 1
    6db8:	08 d9       	rcall	.-3568   	; 0x5fca <vfprintf>
    6dba:	ef 81       	ldd	r30, Y+7	; 0x07
    6dbc:	f8 85       	ldd	r31, Y+8	; 0x08
    6dbe:	e0 0f       	add	r30, r16
    6dc0:	f1 1f       	adc	r31, r17
    6dc2:	10 82       	st	Z, r1
    6dc4:	2e 96       	adiw	r28, 0x0e	; 14
    6dc6:	0f b6       	in	r0, 0x3f	; 63
    6dc8:	f8 94       	cli
    6dca:	de bf       	out	0x3e, r29	; 62
    6dcc:	0f be       	out	0x3f, r0	; 63
    6dce:	cd bf       	out	0x3d, r28	; 61
    6dd0:	df 91       	pop	r29
    6dd2:	cf 91       	pop	r28
    6dd4:	1f 91       	pop	r17
    6dd6:	0f 91       	pop	r16
    6dd8:	08 95       	ret

00006dda <__ultoa_invert>:
    6dda:	fa 01       	movw	r30, r20
    6ddc:	aa 27       	eor	r26, r26
    6dde:	28 30       	cpi	r18, 0x08	; 8
    6de0:	51 f1       	breq	.+84     	; 0x6e36 <__ultoa_invert+0x5c>
    6de2:	20 31       	cpi	r18, 0x10	; 16
    6de4:	81 f1       	breq	.+96     	; 0x6e46 <__ultoa_invert+0x6c>
    6de6:	e8 94       	clt
    6de8:	6f 93       	push	r22
    6dea:	6e 7f       	andi	r22, 0xFE	; 254
    6dec:	6e 5f       	subi	r22, 0xFE	; 254
    6dee:	7f 4f       	sbci	r23, 0xFF	; 255
    6df0:	8f 4f       	sbci	r24, 0xFF	; 255
    6df2:	9f 4f       	sbci	r25, 0xFF	; 255
    6df4:	af 4f       	sbci	r26, 0xFF	; 255
    6df6:	b1 e0       	ldi	r27, 0x01	; 1
    6df8:	3e d0       	rcall	.+124    	; 0x6e76 <__ultoa_invert+0x9c>
    6dfa:	b4 e0       	ldi	r27, 0x04	; 4
    6dfc:	3c d0       	rcall	.+120    	; 0x6e76 <__ultoa_invert+0x9c>
    6dfe:	67 0f       	add	r22, r23
    6e00:	78 1f       	adc	r23, r24
    6e02:	89 1f       	adc	r24, r25
    6e04:	9a 1f       	adc	r25, r26
    6e06:	a1 1d       	adc	r26, r1
    6e08:	68 0f       	add	r22, r24
    6e0a:	79 1f       	adc	r23, r25
    6e0c:	8a 1f       	adc	r24, r26
    6e0e:	91 1d       	adc	r25, r1
    6e10:	a1 1d       	adc	r26, r1
    6e12:	6a 0f       	add	r22, r26
    6e14:	71 1d       	adc	r23, r1
    6e16:	81 1d       	adc	r24, r1
    6e18:	91 1d       	adc	r25, r1
    6e1a:	a1 1d       	adc	r26, r1
    6e1c:	20 d0       	rcall	.+64     	; 0x6e5e <__ultoa_invert+0x84>
    6e1e:	09 f4       	brne	.+2      	; 0x6e22 <__ultoa_invert+0x48>
    6e20:	68 94       	set
    6e22:	3f 91       	pop	r19
    6e24:	2a e0       	ldi	r18, 0x0A	; 10
    6e26:	26 9f       	mul	r18, r22
    6e28:	11 24       	eor	r1, r1
    6e2a:	30 19       	sub	r19, r0
    6e2c:	30 5d       	subi	r19, 0xD0	; 208
    6e2e:	31 93       	st	Z+, r19
    6e30:	de f6       	brtc	.-74     	; 0x6de8 <__ultoa_invert+0xe>
    6e32:	cf 01       	movw	r24, r30
    6e34:	08 95       	ret
    6e36:	46 2f       	mov	r20, r22
    6e38:	47 70       	andi	r20, 0x07	; 7
    6e3a:	40 5d       	subi	r20, 0xD0	; 208
    6e3c:	41 93       	st	Z+, r20
    6e3e:	b3 e0       	ldi	r27, 0x03	; 3
    6e40:	0f d0       	rcall	.+30     	; 0x6e60 <__ultoa_invert+0x86>
    6e42:	c9 f7       	brne	.-14     	; 0x6e36 <__ultoa_invert+0x5c>
    6e44:	f6 cf       	rjmp	.-20     	; 0x6e32 <__ultoa_invert+0x58>
    6e46:	46 2f       	mov	r20, r22
    6e48:	4f 70       	andi	r20, 0x0F	; 15
    6e4a:	40 5d       	subi	r20, 0xD0	; 208
    6e4c:	4a 33       	cpi	r20, 0x3A	; 58
    6e4e:	18 f0       	brcs	.+6      	; 0x6e56 <__ultoa_invert+0x7c>
    6e50:	49 5d       	subi	r20, 0xD9	; 217
    6e52:	31 fd       	sbrc	r19, 1
    6e54:	40 52       	subi	r20, 0x20	; 32
    6e56:	41 93       	st	Z+, r20
    6e58:	02 d0       	rcall	.+4      	; 0x6e5e <__ultoa_invert+0x84>
    6e5a:	a9 f7       	brne	.-22     	; 0x6e46 <__ultoa_invert+0x6c>
    6e5c:	ea cf       	rjmp	.-44     	; 0x6e32 <__ultoa_invert+0x58>
    6e5e:	b4 e0       	ldi	r27, 0x04	; 4
    6e60:	a6 95       	lsr	r26
    6e62:	97 95       	ror	r25
    6e64:	87 95       	ror	r24
    6e66:	77 95       	ror	r23
    6e68:	67 95       	ror	r22
    6e6a:	ba 95       	dec	r27
    6e6c:	c9 f7       	brne	.-14     	; 0x6e60 <__ultoa_invert+0x86>
    6e6e:	00 97       	sbiw	r24, 0x00	; 0
    6e70:	61 05       	cpc	r22, r1
    6e72:	71 05       	cpc	r23, r1
    6e74:	08 95       	ret
    6e76:	9b 01       	movw	r18, r22
    6e78:	ac 01       	movw	r20, r24
    6e7a:	0a 2e       	mov	r0, r26
    6e7c:	06 94       	lsr	r0
    6e7e:	57 95       	ror	r21
    6e80:	47 95       	ror	r20
    6e82:	37 95       	ror	r19
    6e84:	27 95       	ror	r18
    6e86:	ba 95       	dec	r27
    6e88:	c9 f7       	brne	.-14     	; 0x6e7c <__ultoa_invert+0xa2>
    6e8a:	62 0f       	add	r22, r18
    6e8c:	73 1f       	adc	r23, r19
    6e8e:	84 1f       	adc	r24, r20
    6e90:	95 1f       	adc	r25, r21
    6e92:	a0 1d       	adc	r26, r0
    6e94:	08 95       	ret

00006e96 <_exit>:
    6e96:	f8 94       	cli

00006e98 <__stop_program>:
    6e98:	ff cf       	rjmp	.-2      	; 0x6e98 <__stop_program>

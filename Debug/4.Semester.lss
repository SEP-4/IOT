
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000630  00800200  00006a5c  00006af0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006a5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f6c  00800830  00800830  00007120  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007120  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000717c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b40  00000000  00000000  000071bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dcd1  00000000  00000000  00007cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003857  00000000  00000000  000159cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006d69  00000000  00000000  00019224  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002830  00000000  00000000  0001ff90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000441e  00000000  00000000  000227c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c6e7  00000000  00000000  00026bde  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a70  00000000  00000000  000332c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	34 c7       	rjmp	.+3688   	; 0xe9a <__vector_12>
      32:	00 00       	nop
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 ca 25 	jmp	0x4b94	; 0x4b94 <__vector_25>
      68:	0c 94 1c 26 	jmp	0x4c38	; 0x4c38 <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 60 26 	jmp	0x4cc0	; 0x4cc0 <__vector_36>
      94:	0c 94 b2 26 	jmp	0x4d64	; 0x4d64 <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 fe 2a 	jmp	0x55fc	; 0x55fc <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 f6 26 	jmp	0x4dec	; 0x4dec <__vector_51>
      d0:	0c 94 48 27 	jmp	0x4e90	; 0x4e90 <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 8c 27 	jmp	0x4f18	; 0x4f18 <__vector_54>
      dc:	0c 94 de 27 	jmp	0x4fbc	; 0x4fbc <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	64 1b       	sub	r22, r20
      e6:	64 1b       	sub	r22, r20
      e8:	64 1b       	sub	r22, r20
      ea:	9b 1b       	sub	r25, r27
      ec:	a3 1b       	sub	r26, r19
      ee:	b8 1b       	sub	r27, r24
      f0:	64 1b       	sub	r22, r20
      f2:	64 1b       	sub	r22, r20
      f4:	9b 1b       	sub	r25, r27
      f6:	a3 1b       	sub	r26, r19
      f8:	20 2b       	or	r18, r16
      fa:	90 2b       	or	r25, r16
      fc:	90 2b       	or	r25, r16
      fe:	90 2b       	or	r25, r16
     100:	90 2b       	or	r25, r16
     102:	90 2b       	or	r25, r16
     104:	90 2b       	or	r25, r16
     106:	90 2b       	or	r25, r16
     108:	20 2b       	or	r18, r16
     10a:	90 2b       	or	r25, r16
     10c:	90 2b       	or	r25, r16
     10e:	90 2b       	or	r25, r16
     110:	90 2b       	or	r25, r16
     112:	90 2b       	or	r25, r16
     114:	90 2b       	or	r25, r16
     116:	90 2b       	or	r25, r16
     118:	22 2b       	or	r18, r18
     11a:	90 2b       	or	r25, r16
     11c:	90 2b       	or	r25, r16
     11e:	90 2b       	or	r25, r16
     120:	90 2b       	or	r25, r16
     122:	90 2b       	or	r25, r16
     124:	90 2b       	or	r25, r16
     126:	90 2b       	or	r25, r16
     128:	90 2b       	or	r25, r16
     12a:	90 2b       	or	r25, r16
     12c:	90 2b       	or	r25, r16
     12e:	90 2b       	or	r25, r16
     130:	90 2b       	or	r25, r16
     132:	90 2b       	or	r25, r16
     134:	90 2b       	or	r25, r16
     136:	90 2b       	or	r25, r16
     138:	22 2b       	or	r18, r18
     13a:	90 2b       	or	r25, r16
     13c:	90 2b       	or	r25, r16
     13e:	90 2b       	or	r25, r16
     140:	90 2b       	or	r25, r16
     142:	90 2b       	or	r25, r16
     144:	90 2b       	or	r25, r16
     146:	90 2b       	or	r25, r16
     148:	90 2b       	or	r25, r16
     14a:	90 2b       	or	r25, r16
     14c:	90 2b       	or	r25, r16
     14e:	90 2b       	or	r25, r16
     150:	90 2b       	or	r25, r16
     152:	90 2b       	or	r25, r16
     154:	90 2b       	or	r25, r16
     156:	90 2b       	or	r25, r16
     158:	8c 2b       	or	r24, r28
     15a:	90 2b       	or	r25, r16
     15c:	90 2b       	or	r25, r16
     15e:	90 2b       	or	r25, r16
     160:	90 2b       	or	r25, r16
     162:	90 2b       	or	r25, r16
     164:	90 2b       	or	r25, r16
     166:	90 2b       	or	r25, r16
     168:	57 2b       	or	r21, r23
     16a:	90 2b       	or	r25, r16
     16c:	90 2b       	or	r25, r16
     16e:	90 2b       	or	r25, r16
     170:	90 2b       	or	r25, r16
     172:	90 2b       	or	r25, r16
     174:	90 2b       	or	r25, r16
     176:	90 2b       	or	r25, r16
     178:	90 2b       	or	r25, r16
     17a:	90 2b       	or	r25, r16
     17c:	90 2b       	or	r25, r16
     17e:	90 2b       	or	r25, r16
     180:	90 2b       	or	r25, r16
     182:	90 2b       	or	r25, r16
     184:	90 2b       	or	r25, r16
     186:	90 2b       	or	r25, r16
     188:	4b 2b       	or	r20, r27
     18a:	90 2b       	or	r25, r16
     18c:	90 2b       	or	r25, r16
     18e:	90 2b       	or	r25, r16
     190:	90 2b       	or	r25, r16
     192:	90 2b       	or	r25, r16
     194:	90 2b       	or	r25, r16
     196:	90 2b       	or	r25, r16
     198:	6f 2b       	or	r22, r31

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <prvCheckTasksWaitingTermination>
     2a0:	80 91 27 15 	lds	r24, 0x1527	; 0x801527 <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	32 d5       	rcall	.+2660   	; 0xd0e <vPortYield>
     2aa:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <prvProcessTimerOrBlockTask>
     2c8:	0e 94 2d 1b 	call	0x365a	; 0x365a <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	18 e0       	ldi	r17, 0x08	; 8
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	ec e5       	ldi	r30, 0x5C	; 92
     2e6:	fa e6       	ldi	r31, 0x6A	; 106
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	a0 33       	cpi	r26, 0x30	; 48
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	27 e1       	ldi	r18, 0x17	; 23
     2fa:	a0 e3       	ldi	r26, 0x30	; 48
     2fc:	b8 e0       	ldi	r27, 0x08	; 8
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	ac 39       	cpi	r26, 0x9C	; 156
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 be 1c 	call	0x397c	; 0x397c <main>
     30c:	0c 94 2c 35 	jmp	0x6a58	; 0x6a58 <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <Application_getEventGroup>:
// Declare a variable to hold the created event group.
EventGroupHandle_t xCreatedEventGroup;

EventGroupHandle_t Application_getEventGroup(){
	return xCreatedEventGroup;
}
     312:	80 91 82 17 	lds	r24, 0x1782	; 0x801782 <xCreatedEventGroup>
     316:	90 91 83 17 	lds	r25, 0x1783	; 0x801783 <xCreatedEventGroup+0x1>
     31a:	08 95       	ret

0000031c <Application_aFunctionToClearBits>:
void Application_aFunctionToClearBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Clear bit 0 and bit 4 in xEventGroup. */
  uxBits = xEventGroupClearBits(
     31c:	41 e1       	ldi	r20, 0x11	; 17
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	22 c2       	rjmp	.+1092   	; 0x76a <xEventGroupClearBits>
     326:	08 95       	ret

00000328 <Application_aFunctionToWaitBits>:
EventGroupHandle_t Application_getEventGroup(){
	return xCreatedEventGroup;
}

void Application_aFunctionToWaitBits( EventGroupHandle_t xEventGroup )
{
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	ec 01       	movw	r28, r24
EventBits_t uxBits;
const TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;

  /* Wait a maximum of 100ms for either bit 0 or bit 4 to be set within
  the event group.  Clear the bits before exiting. */
  uxBits = xEventGroupWaitBits(
     338:	0f 2e       	mov	r0, r31
     33a:	f6 e0       	ldi	r31, 0x06	; 6
     33c:	cf 2e       	mov	r12, r31
     33e:	d1 2c       	mov	r13, r1
     340:	e1 2c       	mov	r14, r1
     342:	f1 2c       	mov	r15, r1
     344:	f0 2d       	mov	r31, r0
     346:	01 e0       	ldi	r16, 0x01	; 1
     348:	20 e0       	ldi	r18, 0x00	; 0
     34a:	41 e1       	ldi	r20, 0x11	; 17
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	6b d1       	rcall	.+726    	; 0x62a <xEventGroupWaitBits>
            BIT_0 | BIT_4, /* The bits within the event group to wait for. */
            pdFALSE,        /* BIT_0 & BIT_4 should not be cleared before returning. */
            pdTRUE,       /* Wait for both bits, either bit will do. */
            xTicksToWait );/* Wait a maximum of 100ms for either bit to be set. */

  if( ( uxBits & ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )
     354:	dc 01       	movw	r26, r24
     356:	cb 01       	movw	r24, r22
     358:	81 71       	andi	r24, 0x11	; 17
     35a:	99 27       	eor	r25, r25
     35c:	aa 27       	eor	r26, r26
     35e:	bb 27       	eor	r27, r27
     360:	41 97       	sbiw	r24, 0x11	; 17
     362:	a1 05       	cpc	r26, r1
     364:	b1 05       	cpc	r27, r1
     366:	a9 f4       	brne	.+42     	; 0x392 <Application_aFunctionToWaitBits+0x6a>
  {
      /* xEventGroupWaitBits() returned because both bits were set. */
	  printf("setting the bits, they are set");
     368:	8f e6       	ldi	r24, 0x6F	; 111
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	9f 93       	push	r25
     36e:	8f 93       	push	r24
     370:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
	  SensorDataPackageHandler_SetHumidity(hih820_getHumidityInUint16());
     374:	0e 94 28 1c 	call	0x3850	; 0x3850 <hih820_getHumidityInUint16>
     378:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <SensorDataPackageHandler_SetHumidity>
	  SensorDataPackageHandler_SetTemperature(hih820_getTemperatureInUint16());
     37c:	0e 94 37 1c 	call	0x386e	; 0x386e <hih820_getTemperatureInUint16>
     380:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <SensorDataPackageHandler_SetTemperature>
	  SensorDataPackageHandler_SetCO2(CO2Sensor_getCO2InUint16());
     384:	5f d0       	rcall	.+190    	; 0x444 <CO2Sensor_getCO2InUint16>
     386:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <SensorDataPackageHandler_SetCO2>
	  Application_aFunctionToClearBits( xEventGroup );
     38a:	ce 01       	movw	r24, r28
     38c:	c7 df       	rcall	.-114    	; 0x31c <Application_aFunctionToClearBits>
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
  else
  {
      /* xEventGroupWaitBits() returned because xTicksToWait ticks passed
      without either BIT_0 or BIT_4 becoming set. */
  }
}
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	0f 91       	pop	r16
     398:	ff 90       	pop	r15
     39a:	ef 90       	pop	r14
     39c:	df 90       	pop	r13
     39e:	cf 90       	pop	r12
     3a0:	08 95       	ret

000003a2 <Application_handler_task>:
	,  Application_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void Application_handler_task(void *pvParameters)
{
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	00 d0       	rcall	.+0      	; 0x3a8 <Application_handler_task+0x6>
     3a8:	1f 92       	push	r1
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
	printf("startApplication");
     3ae:	8e e8       	ldi	r24, 0x8E	; 142
     3b0:	92 e0       	ldi	r25, 0x02	; 2
     3b2:	9f 93       	push	r25
     3b4:	8f 93       	push	r24
     3b6:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
	(void)pvParameters;
	xCreatedEventGroup = xEventGroupCreate();
     3ba:	24 d1       	rcall	.+584    	; 0x604 <xEventGroupCreate>
     3bc:	90 93 83 17 	sts	0x1783, r25	; 0x801783 <xCreatedEventGroup+0x1>
     3c0:	80 93 82 17 	sts	0x1782, r24	; 0x801782 <xCreatedEventGroup>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300UL); // Upload message every 1 minutes (300 ms)
	xLastWakeTime = xTaskGetTickCount();
     3c4:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <xTaskGetTickCount>
     3c8:	69 83       	std	Y+1, r22	; 0x01
     3ca:	7a 83       	std	Y+2, r23	; 0x02
     3cc:	8b 83       	std	Y+3, r24	; 0x03
     3ce:	9c 83       	std	Y+4, r25	; 0x04
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     3d4:	42 e1       	ldi	r20, 0x12	; 18
     3d6:	50 e0       	ldi	r21, 0x00	; 0
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	ce 01       	movw	r24, r28
     3de:	01 96       	adiw	r24, 0x01	; 1
     3e0:	0e 94 0d 12 	call	0x241a	; 0x241a <xTaskDelayUntil>
		// Was the event group created successfully?
		if( xCreatedEventGroup == NULL )
     3e4:	80 91 82 17 	lds	r24, 0x1782	; 0x801782 <xCreatedEventGroup>
     3e8:	90 91 83 17 	lds	r25, 0x1783	; 0x801783 <xCreatedEventGroup+0x1>
     3ec:	00 97       	sbiw	r24, 0x00	; 0
		// The event group was not created because there was insufficient
		// FreeRTOS heap available.
		}
		else
		{
			Application_aFunctionToWaitBits( xCreatedEventGroup);
     3ee:	91 f3       	breq	.-28     	; 0x3d4 <Application_handler_task+0x32>
     3f0:	9b df       	rcall	.-202    	; 0x328 <Application_aFunctionToWaitBits>
     3f2:	f0 cf       	rjmp	.-32     	; 0x3d4 <Application_handler_task+0x32>

000003f4 <Application_handler_initialise>:

/*-----------------------------------------------------------*/

void Application_handler_task( void *pvParameters );

void Application_handler_initialise(UBaseType_t Application_task_priority){
     3f4:	ef 92       	push	r14
     3f6:	ff 92       	push	r15
     3f8:	0f 93       	push	r16
	xTaskCreate(
     3fa:	e1 2c       	mov	r14, r1
     3fc:	f1 2c       	mov	r15, r1
     3fe:	08 2f       	mov	r16, r24
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	40 ec       	ldi	r20, 0xC0	; 192
     406:	50 e0       	ldi	r21, 0x00	; 0
     408:	6f e9       	ldi	r22, 0x9F	; 159
     40a:	72 e0       	ldi	r23, 0x02	; 2
     40c:	81 ed       	ldi	r24, 0xD1	; 209
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <xTaskCreate>
	,  "ApplicationHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  Application_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     414:	0f 91       	pop	r16
     416:	ff 90       	pop	r15
     418:	ef 90       	pop	r14
     41a:	08 95       	ret

0000041c <CO2Sensor_handler_initialise>:
mh_z19_returnCode_t getCO2return;


void CO2Sensor_handler_task( void *pvParameters );

void CO2Sensor_handler_initialise(UBaseType_t CO2_task_priority){
     41c:	ef 92       	push	r14
     41e:	ff 92       	push	r15
     420:	0f 93       	push	r16
	
	xTaskCreate(
     422:	e1 2c       	mov	r14, r1
     424:	f1 2c       	mov	r15, r1
     426:	08 2f       	mov	r16, r24
     428:	20 e0       	ldi	r18, 0x00	; 0
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	40 ec       	ldi	r20, 0xC0	; 192
     42e:	50 e0       	ldi	r21, 0x00	; 0
     430:	6f ea       	ldi	r22, 0xAF	; 175
     432:	72 e0       	ldi	r23, 0x02	; 2
     434:	8d e2       	ldi	r24, 0x2D	; 45
     436:	92 e0       	ldi	r25, 0x02	; 2
     438:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <xTaskCreate>
	,  "CO2Hand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  CO2_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     43c:	0f 91       	pop	r16
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	08 95       	ret

00000444 <CO2Sensor_getCO2InUint16>:
}


uint16_t CO2Sensor_getCO2InUint16(){
	return CO2ppm;
}
     444:	80 91 86 17 	lds	r24, 0x1786	; 0x801786 <CO2ppm>
     448:	90 91 87 17 	lds	r25, 0x1787	; 0x801787 <CO2ppm+0x1>
     44c:	08 95       	ret

0000044e <CO2Sensor_aFunctionToSetBits>:
void CO2Sensor_aFunctionToSetBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Set bit 0  in xEventGroup. */
  uxBits = xEventGroupSetBits(
     44e:	41 e0       	ldi	r20, 0x01	; 1
     450:	50 e0       	ldi	r21, 0x00	; 0
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	a6 c1       	rjmp	.+844    	; 0x7a4 <xEventGroupSetBits>
     458:	08 95       	ret

0000045a <CO2Sensor_handler_task>:
	,  CO2_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void CO2Sensor_handler_task(void *pvParameters)
{
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	00 d0       	rcall	.+0      	; 0x460 <CO2Sensor_handler_task+0x6>
     460:	1f 92       	push	r1
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
	printf("startCO2");
     466:	87 eb       	ldi	r24, 0xB7	; 183
     468:	92 e0       	ldi	r25, 0x02	; 2
     46a:	9f 93       	push	r25
     46c:	8f 93       	push	r24
     46e:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
	(void)pvParameters;
	mh_z19_injectCallBack(NULL);
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 0f 24 	call	0x481e	; 0x481e <mh_z19_injectCallBack>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     47a:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <xTaskGetTickCount>
     47e:	69 83       	std	Y+1, r22	; 0x01
     480:	7a 83       	std	Y+2, r23	; 0x02
     482:	8b 83       	std	Y+3, r24	; 0x03
     484:	9c 83       	std	Y+4, r25	; 0x04
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     48a:	48 ea       	ldi	r20, 0xA8	; 168
     48c:	58 e4       	ldi	r21, 0x48	; 72
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	ce 01       	movw	r24, r28
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	0e 94 0d 12 	call	0x241a	; 0x241a <xTaskDelayUntil>
		rc = mh_z19_takeMeassuring();
     49a:	0e 94 14 24 	call	0x4828	; 0x4828 <mh_z19_takeMeassuring>
     49e:	80 93 84 17 	sts	0x1784, r24	; 0x801784 <rc>
		if (rc == MHZ19_OK)
     4a2:	81 11       	cpse	r24, r1
     4a4:	f2 cf       	rjmp	.-28     	; 0x48a <CO2Sensor_handler_task+0x30>
		{
			vTaskDelay(50);
     4a6:	62 e3       	ldi	r22, 0x32	; 50
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0e 94 72 12 	call	0x24e4	; 0x24e4 <vTaskDelay>
			if(getCO2return == MHZ19_OK){
     4b2:	80 91 85 17 	lds	r24, 0x1785	; 0x801785 <getCO2return>
     4b6:	81 11       	cpse	r24, r1
     4b8:	09 c0       	rjmp	.+18     	; 0x4cc <CO2Sensor_handler_task+0x72>
				getCO2return = mh_z19_getCo2Ppm(&CO2ppm);
     4ba:	86 e8       	ldi	r24, 0x86	; 134
     4bc:	97 e1       	ldi	r25, 0x17	; 23
     4be:	0e 94 43 24 	call	0x4886	; 0x4886 <mh_z19_getCo2Ppm>
     4c2:	80 93 85 17 	sts	0x1785, r24	; 0x801785 <getCO2return>
				CO2Sensor_aFunctionToSetBits(Application_getEventGroup());
     4c6:	25 df       	rcall	.-438    	; 0x312 <Application_getEventGroup>
     4c8:	c2 df       	rcall	.-124    	; 0x44e <CO2Sensor_aFunctionToSetBits>
     4ca:	df cf       	rjmp	.-66     	; 0x48a <CO2Sensor_handler_task+0x30>
			}
			else if(getCO2return == MHZ19_NO_MEASSURING_AVAILABLE){
     4cc:	81 30       	cpi	r24, 0x01	; 1
     4ce:	e9 f6       	brne	.-70     	; 0x48a <CO2Sensor_handler_task+0x30>
				printf("Didn't get the measurements");
     4d0:	80 ec       	ldi	r24, 0xC0	; 192
     4d2:	92 e0       	ldi	r25, 0x02	; 2
     4d4:	9f 93       	push	r25
     4d6:	8f 93       	push	r24
     4d8:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	d4 cf       	rjmp	.-88     	; 0x48a <CO2Sensor_handler_task+0x30>

000004e2 <DownLinkHandler_lora_handler_task>:
	,  DownLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void DownLinkHandler_lora_handler_task( void *pvParameters )
{
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <DownLinkHandler_lora_handler_task+0x6>
     4e8:	1f 92       	push	r1
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     4ee:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <xTaskGetTickCount>
     4f2:	69 83       	std	Y+1, r22	; 0x01
     4f4:	7a 83       	std	Y+2, r23	; 0x02
     4f6:	8b 83       	std	Y+3, r24	; 0x03
     4f8:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     4fa:	48 ea       	ldi	r20, 0xA8	; 168
     4fc:	58 e4       	ldi	r21, 0x48	; 72
     4fe:	60 e0       	ldi	r22, 0x00	; 0
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	ce 01       	movw	r24, r28
     504:	01 96       	adiw	r24, 0x01	; 1
     506:	0e 94 0d 12 	call	0x241a	; 0x241a <xTaskDelayUntil>
		printf("startLoraDownlinkTask\n");
     50a:	8c ed       	ldi	r24, 0xDC	; 220
     50c:	92 e0       	ldi	r25, 0x02	; 2
     50e:	0e 94 70 34 	call	0x68e0	; 0x68e0 <puts>
		status_leds_shortPuls(led_ST4);  // OPTIONAL
     512:	83 e0       	ldi	r24, 0x03	; 3
     514:	0e 94 0b 2a 	call	0x5416	; 0x5416 <status_leds_shortPuls>
		xMessageBufferReceive(_downLinkMessageBufferHandle, &_downlink_payload, sizeof(lora_driver_payload_t), portMAX_DELAY);
     518:	0f ef       	ldi	r16, 0xFF	; 255
     51a:	1f ef       	ldi	r17, 0xFF	; 255
     51c:	98 01       	movw	r18, r16
     51e:	46 e1       	ldi	r20, 0x16	; 22
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	60 e3       	ldi	r22, 0x30	; 48
     524:	78 e0       	ldi	r23, 0x08	; 8
     526:	80 91 8c 17 	lds	r24, 0x178C	; 0x80178c <_downLinkMessageBufferHandle>
     52a:	90 91 8d 17 	lds	r25, 0x178D	; 0x80178d <_downLinkMessageBufferHandle+0x1>
     52e:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <xStreamBufferReceive>
		printf("DOWN LINK: from port: %d with %d bytes received!", _downlink_payload.portNo, _downlink_payload.len); // Just for Debug
     532:	00 e3       	ldi	r16, 0x30	; 48
     534:	18 e0       	ldi	r17, 0x08	; 8
     536:	f8 01       	movw	r30, r16
     538:	91 81       	ldd	r25, Z+1	; 0x01
     53a:	80 81       	ld	r24, Z
     53c:	1f 92       	push	r1
     53e:	9f 93       	push	r25
     540:	1f 92       	push	r1
     542:	8f 93       	push	r24
     544:	82 ef       	ldi	r24, 0xF2	; 242
     546:	92 e0       	ldi	r25, 0x02	; 2
     548:	9f 93       	push	r25
     54a:	8f 93       	push	r24
     54c:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
		if (4 == _downlink_payload.len) // Check that we have got the expected 4 bytes
     550:	f8 01       	movw	r30, r16
     552:	81 81       	ldd	r24, Z+1	; 0x01
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	84 30       	cpi	r24, 0x04	; 4
     562:	59 f6       	brne	.-106    	; 0x4fa <DownLinkHandler_lora_handler_task+0x18>
		{
			// decode the payload into our variables
			maxHumSetting = (_downlink_payload.bytes[0] << 8) + _downlink_payload.bytes[1];
     564:	82 81       	ldd	r24, Z+2	; 0x02
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	98 2f       	mov	r25, r24
     56a:	88 27       	eor	r24, r24
     56c:	23 81       	ldd	r18, Z+3	; 0x03
     56e:	82 0f       	add	r24, r18
     570:	91 1d       	adc	r25, r1
     572:	90 93 89 17 	sts	0x1789, r25	; 0x801789 <maxHumSetting+0x1>
     576:	80 93 88 17 	sts	0x1788, r24	; 0x801788 <maxHumSetting>
			maxTempSetting = (_downlink_payload.bytes[2] << 8) + _downlink_payload.bytes[3];
     57a:	84 81       	ldd	r24, Z+4	; 0x04
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	98 2f       	mov	r25, r24
     580:	88 27       	eor	r24, r24
     582:	25 81       	ldd	r18, Z+5	; 0x05
     584:	82 0f       	add	r24, r18
     586:	91 1d       	adc	r25, r1
     588:	90 93 8b 17 	sts	0x178B, r25	; 0x80178b <maxTempSetting+0x1>
     58c:	80 93 8a 17 	sts	0x178A, r24	; 0x80178a <maxTempSetting>
     590:	b4 cf       	rjmp	.-152    	; 0x4fa <DownLinkHandler_lora_handler_task+0x18>

00000592 <DownLinkHandler_lora_handler_initialise>:
int16_t maxTempSetting; // Max Temperature
MessageBufferHandle_t _downLinkMessageBufferHandle;


void DownLinkHandler_lora_handler_initialise(UBaseType_t DownLinkHandler_lora_handler_task_priority, MessageBufferHandle_t downLinkMessageBufferHandle)
{
     592:	ef 92       	push	r14
     594:	ff 92       	push	r15
     596:	0f 93       	push	r16
	_downLinkMessageBufferHandle = downLinkMessageBufferHandle;
     598:	70 93 8d 17 	sts	0x178D, r23	; 0x80178d <_downLinkMessageBufferHandle+0x1>
     59c:	60 93 8c 17 	sts	0x178C, r22	; 0x80178c <_downLinkMessageBufferHandle>
	xTaskCreate(
     5a0:	e1 2c       	mov	r14, r1
     5a2:	f1 2c       	mov	r15, r1
     5a4:	08 2f       	mov	r16, r24
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	48 e8       	ldi	r20, 0x88	; 136
     5ac:	51 e0       	ldi	r21, 0x01	; 1
     5ae:	63 e2       	ldi	r22, 0x23	; 35
     5b0:	73 e0       	ldi	r23, 0x03	; 3
     5b2:	81 e7       	ldi	r24, 0x71	; 113
     5b4:	92 e0       	ldi	r25, 0x02	; 2
     5b6:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <xTaskCreate>
	,  "DownLinkHandler"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  DownLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     5ba:	0f 91       	pop	r16
     5bc:	ff 90       	pop	r15
     5be:	ef 90       	pop	r14
     5c0:	08 95       	ret

000005c2 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     5c2:	0f 93       	push	r16
     5c4:	01 11       	cpse	r16, r1
     5c6:	0c c0       	rjmp	.+24     	; 0x5e0 <prvTestWaitCondition+0x1e>
     5c8:	dc 01       	movw	r26, r24
     5ca:	cb 01       	movw	r24, r22
     5cc:	82 23       	and	r24, r18
     5ce:	93 23       	and	r25, r19
     5d0:	a4 23       	and	r26, r20
     5d2:	b5 23       	and	r27, r21
     5d4:	89 2b       	or	r24, r25
     5d6:	8a 2b       	or	r24, r26
     5d8:	8b 2b       	or	r24, r27
     5da:	79 f4       	brne	.+30     	; 0x5fa <prvTestWaitCondition+0x38>
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	10 c0       	rjmp	.+32     	; 0x600 <prvTestWaitCondition+0x3e>
     5e0:	dc 01       	movw	r26, r24
     5e2:	cb 01       	movw	r24, r22
     5e4:	82 23       	and	r24, r18
     5e6:	93 23       	and	r25, r19
     5e8:	a4 23       	and	r26, r20
     5ea:	b5 23       	and	r27, r21
     5ec:	28 17       	cp	r18, r24
     5ee:	39 07       	cpc	r19, r25
     5f0:	4a 07       	cpc	r20, r26
     5f2:	5b 07       	cpc	r21, r27
     5f4:	21 f0       	breq	.+8      	; 0x5fe <prvTestWaitCondition+0x3c>
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	03 c0       	rjmp	.+6      	; 0x600 <prvTestWaitCondition+0x3e>
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	01 c0       	rjmp	.+2      	; 0x600 <prvTestWaitCondition+0x3e>
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	0f 91       	pop	r16
     602:	08 95       	ret

00000604 <xEventGroupCreate>:
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	8f e0       	ldi	r24, 0x0F	; 15
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	cc d1       	rcall	.+920    	; 0x9a6 <pvPortMalloc>
     60e:	ec 01       	movw	r28, r24
     610:	00 97       	sbiw	r24, 0x00	; 0
     612:	39 f0       	breq	.+14     	; 0x622 <xEventGroupCreate+0x1e>
     614:	fc 01       	movw	r30, r24
     616:	11 92       	st	Z+, r1
     618:	11 92       	st	Z+, r1
     61a:	11 92       	st	Z+, r1
     61c:	11 92       	st	Z+, r1
     61e:	cf 01       	movw	r24, r30
     620:	a8 d2       	rcall	.+1360   	; 0xb72 <vListInitialise>
     622:	ce 01       	movw	r24, r28
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	08 95       	ret

0000062a <xEventGroupWaitBits>:
     62a:	2f 92       	push	r2
     62c:	3f 92       	push	r3
     62e:	4f 92       	push	r4
     630:	5f 92       	push	r5
     632:	6f 92       	push	r6
     634:	7f 92       	push	r7
     636:	8f 92       	push	r8
     638:	9f 92       	push	r9
     63a:	af 92       	push	r10
     63c:	bf 92       	push	r11
     63e:	cf 92       	push	r12
     640:	df 92       	push	r13
     642:	ef 92       	push	r14
     644:	ff 92       	push	r15
     646:	0f 93       	push	r16
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	ec 01       	movw	r28, r24
     650:	4a 01       	movw	r8, r20
     652:	5b 01       	movw	r10, r22
     654:	62 2e       	mov	r6, r18
     656:	70 2e       	mov	r7, r16
     658:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <vTaskSuspendAll>
     65c:	28 80       	ld	r2, Y
     65e:	39 80       	ldd	r3, Y+1	; 0x01
     660:	4a 80       	ldd	r4, Y+2	; 0x02
     662:	5b 80       	ldd	r5, Y+3	; 0x03
     664:	a5 01       	movw	r20, r10
     666:	94 01       	movw	r18, r8
     668:	c2 01       	movw	r24, r4
     66a:	b1 01       	movw	r22, r2
     66c:	aa df       	rcall	.-172    	; 0x5c2 <prvTestWaitCondition>
     66e:	88 23       	and	r24, r24
     670:	a1 f0       	breq	.+40     	; 0x69a <xEventGroupWaitBits+0x70>
     672:	66 20       	and	r6, r6
     674:	89 f1       	breq	.+98     	; 0x6d8 <xEventGroupWaitBits+0xae>
     676:	d5 01       	movw	r26, r10
     678:	c4 01       	movw	r24, r8
     67a:	80 95       	com	r24
     67c:	90 95       	com	r25
     67e:	a0 95       	com	r26
     680:	b0 95       	com	r27
     682:	82 21       	and	r24, r2
     684:	93 21       	and	r25, r3
     686:	a4 21       	and	r26, r4
     688:	b5 21       	and	r27, r5
     68a:	88 83       	st	Y, r24
     68c:	99 83       	std	Y+1, r25	; 0x01
     68e:	aa 83       	std	Y+2, r26	; 0x02
     690:	bb 83       	std	Y+3, r27	; 0x03
     692:	c1 2c       	mov	r12, r1
     694:	d1 2c       	mov	r13, r1
     696:	76 01       	movw	r14, r12
     698:	22 c0       	rjmp	.+68     	; 0x6de <xEventGroupWaitBits+0xb4>
     69a:	c1 14       	cp	r12, r1
     69c:	d1 04       	cpc	r13, r1
     69e:	e1 04       	cpc	r14, r1
     6a0:	f1 04       	cpc	r15, r1
     6a2:	e9 f0       	breq	.+58     	; 0x6de <xEventGroupWaitBits+0xb4>
     6a4:	61 10       	cpse	r6, r1
     6a6:	04 c0       	rjmp	.+8      	; 0x6b0 <xEventGroupWaitBits+0x86>
     6a8:	40 e0       	ldi	r20, 0x00	; 0
     6aa:	50 e0       	ldi	r21, 0x00	; 0
     6ac:	ba 01       	movw	r22, r20
     6ae:	04 c0       	rjmp	.+8      	; 0x6b8 <xEventGroupWaitBits+0x8e>
     6b0:	40 e0       	ldi	r20, 0x00	; 0
     6b2:	50 e0       	ldi	r21, 0x00	; 0
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	71 e0       	ldi	r23, 0x01	; 1
     6b8:	71 10       	cpse	r7, r1
     6ba:	74 60       	ori	r23, 0x04	; 4
     6bc:	48 29       	or	r20, r8
     6be:	59 29       	or	r21, r9
     6c0:	6a 29       	or	r22, r10
     6c2:	7b 29       	or	r23, r11
     6c4:	97 01       	movw	r18, r14
     6c6:	86 01       	movw	r16, r12
     6c8:	ce 01       	movw	r24, r28
     6ca:	04 96       	adiw	r24, 0x04	; 4
     6cc:	0e 94 09 13 	call	0x2612	; 0x2612 <vTaskPlaceOnUnorderedEventList>
     6d0:	21 2c       	mov	r2, r1
     6d2:	31 2c       	mov	r3, r1
     6d4:	21 01       	movw	r4, r2
     6d6:	03 c0       	rjmp	.+6      	; 0x6de <xEventGroupWaitBits+0xb4>
     6d8:	c1 2c       	mov	r12, r1
     6da:	d1 2c       	mov	r13, r1
     6dc:	76 01       	movw	r14, r12
     6de:	0e 94 31 11 	call	0x2262	; 0x2262 <xTaskResumeAll>
     6e2:	cd 28       	or	r12, r13
     6e4:	ce 28       	or	r12, r14
     6e6:	cf 28       	or	r12, r15
     6e8:	59 f1       	breq	.+86     	; 0x740 <xEventGroupWaitBits+0x116>
     6ea:	81 11       	cpse	r24, r1
     6ec:	01 c0       	rjmp	.+2      	; 0x6f0 <xEventGroupWaitBits+0xc6>
     6ee:	0f d3       	rcall	.+1566   	; 0xd0e <vPortYield>
     6f0:	0e 94 dd 15 	call	0x2bba	; 0x2bba <uxTaskResetEventItemValue>
     6f4:	6b 01       	movw	r12, r22
     6f6:	7c 01       	movw	r14, r24
     6f8:	91 fd       	sbrc	r25, 1
     6fa:	1f c0       	rjmp	.+62     	; 0x73a <xEventGroupWaitBits+0x110>
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	f8 94       	cli
     700:	0f 92       	push	r0
     702:	c8 80       	ld	r12, Y
     704:	d9 80       	ldd	r13, Y+1	; 0x01
     706:	ea 80       	ldd	r14, Y+2	; 0x02
     708:	fb 80       	ldd	r15, Y+3	; 0x03
     70a:	07 2d       	mov	r16, r7
     70c:	a5 01       	movw	r20, r10
     70e:	94 01       	movw	r18, r8
     710:	c7 01       	movw	r24, r14
     712:	b6 01       	movw	r22, r12
     714:	56 df       	rcall	.-340    	; 0x5c2 <prvTestWaitCondition>
     716:	88 23       	and	r24, r24
     718:	71 f0       	breq	.+28     	; 0x736 <xEventGroupWaitBits+0x10c>
     71a:	66 20       	and	r6, r6
     71c:	61 f0       	breq	.+24     	; 0x736 <xEventGroupWaitBits+0x10c>
     71e:	80 94       	com	r8
     720:	90 94       	com	r9
     722:	a0 94       	com	r10
     724:	b0 94       	com	r11
     726:	8c 20       	and	r8, r12
     728:	9d 20       	and	r9, r13
     72a:	ae 20       	and	r10, r14
     72c:	bf 20       	and	r11, r15
     72e:	88 82       	st	Y, r8
     730:	99 82       	std	Y+1, r9	; 0x01
     732:	aa 82       	std	Y+2, r10	; 0x02
     734:	bb 82       	std	Y+3, r11	; 0x03
     736:	0f 90       	pop	r0
     738:	0f be       	out	0x3f, r0	; 63
     73a:	16 01       	movw	r2, r12
     73c:	27 01       	movw	r4, r14
     73e:	55 24       	eor	r5, r5
     740:	c2 01       	movw	r24, r4
     742:	b1 01       	movw	r22, r2
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	ff 90       	pop	r15
     74e:	ef 90       	pop	r14
     750:	df 90       	pop	r13
     752:	cf 90       	pop	r12
     754:	bf 90       	pop	r11
     756:	af 90       	pop	r10
     758:	9f 90       	pop	r9
     75a:	8f 90       	pop	r8
     75c:	7f 90       	pop	r7
     75e:	6f 90       	pop	r6
     760:	5f 90       	pop	r5
     762:	4f 90       	pop	r4
     764:	3f 90       	pop	r3
     766:	2f 90       	pop	r2
     768:	08 95       	ret

0000076a <xEventGroupClearBits>:
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	0f 92       	push	r0
     774:	fc 01       	movw	r30, r24
     776:	00 81       	ld	r16, Z
     778:	11 81       	ldd	r17, Z+1	; 0x01
     77a:	22 81       	ldd	r18, Z+2	; 0x02
     77c:	33 81       	ldd	r19, Z+3	; 0x03
     77e:	40 95       	com	r20
     780:	50 95       	com	r21
     782:	60 95       	com	r22
     784:	70 95       	com	r23
     786:	40 23       	and	r20, r16
     788:	51 23       	and	r21, r17
     78a:	62 23       	and	r22, r18
     78c:	73 23       	and	r23, r19
     78e:	40 83       	st	Z, r20
     790:	51 83       	std	Z+1, r21	; 0x01
     792:	62 83       	std	Z+2, r22	; 0x02
     794:	73 83       	std	Z+3, r23	; 0x03
     796:	0f 90       	pop	r0
     798:	0f be       	out	0x3f, r0	; 63
     79a:	c9 01       	movw	r24, r18
     79c:	b8 01       	movw	r22, r16
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	08 95       	ret

000007a4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     7a4:	4f 92       	push	r4
     7a6:	5f 92       	push	r5
     7a8:	6f 92       	push	r6
     7aa:	7f 92       	push	r7
     7ac:	af 92       	push	r10
     7ae:	bf 92       	push	r11
     7b0:	cf 92       	push	r12
     7b2:	df 92       	push	r13
     7b4:	ef 92       	push	r14
     7b6:	ff 92       	push	r15
     7b8:	0f 93       	push	r16
     7ba:	1f 93       	push	r17
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	ec 01       	movw	r28, r24
     7c2:	6a 01       	movw	r12, r20
     7c4:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     7c6:	8c 01       	movw	r16, r24
     7c8:	09 5f       	subi	r16, 0xF9	; 249
     7ca:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     7cc:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     7d0:	eb 85       	ldd	r30, Y+11	; 0x0b
     7d2:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     7d4:	88 81       	ld	r24, Y
     7d6:	99 81       	ldd	r25, Y+1	; 0x01
     7d8:	aa 81       	ldd	r26, Y+2	; 0x02
     7da:	bb 81       	ldd	r27, Y+3	; 0x03
     7dc:	c8 2a       	or	r12, r24
     7de:	d9 2a       	or	r13, r25
     7e0:	ea 2a       	or	r14, r26
     7e2:	fb 2a       	or	r15, r27
     7e4:	c8 82       	st	Y, r12
     7e6:	d9 82       	std	Y+1, r13	; 0x01
     7e8:	ea 82       	std	Y+2, r14	; 0x02
     7ea:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     7ec:	c1 2c       	mov	r12, r1
     7ee:	d1 2c       	mov	r13, r1
     7f0:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     7f2:	3d c0       	rjmp	.+122    	; 0x86e <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     7f4:	a4 80       	ldd	r10, Z+4	; 0x04
     7f6:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     7f8:	80 81       	ld	r24, Z
     7fa:	91 81       	ldd	r25, Z+1	; 0x01
     7fc:	a2 81       	ldd	r26, Z+2	; 0x02
     7fe:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     800:	ac 01       	movw	r20, r24
     802:	bd 01       	movw	r22, r26
     804:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     806:	b2 fd       	sbrc	r27, 2
     808:	0e c0       	rjmp	.+28     	; 0x826 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     80a:	48 80       	ld	r4, Y
     80c:	59 80       	ldd	r5, Y+1	; 0x01
     80e:	6a 80       	ldd	r6, Y+2	; 0x02
     810:	7b 80       	ldd	r7, Y+3	; 0x03
     812:	44 22       	and	r4, r20
     814:	55 22       	and	r5, r21
     816:	66 22       	and	r6, r22
     818:	77 22       	and	r7, r23
     81a:	45 28       	or	r4, r5
     81c:	46 28       	or	r4, r6
     81e:	47 28       	or	r4, r7
     820:	89 f4       	brne	.+34     	; 0x844 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	12 c0       	rjmp	.+36     	; 0x84a <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     826:	48 80       	ld	r4, Y
     828:	59 80       	ldd	r5, Y+1	; 0x01
     82a:	6a 80       	ldd	r6, Y+2	; 0x02
     82c:	7b 80       	ldd	r7, Y+3	; 0x03
     82e:	44 22       	and	r4, r20
     830:	55 22       	and	r5, r21
     832:	66 22       	and	r6, r22
     834:	77 22       	and	r7, r23
     836:	44 15       	cp	r20, r4
     838:	55 05       	cpc	r21, r5
     83a:	66 05       	cpc	r22, r6
     83c:	77 05       	cpc	r23, r7
     83e:	21 f0       	breq	.+8      	; 0x848 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	03 c0       	rjmp	.+6      	; 0x84a <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     844:	21 e0       	ldi	r18, 0x01	; 1
     846:	01 c0       	rjmp	.+2      	; 0x84a <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     848:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     84a:	22 23       	and	r18, r18
     84c:	71 f0       	breq	.+28     	; 0x86a <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     84e:	b0 ff       	sbrs	r27, 0
     850:	04 c0       	rjmp	.+8      	; 0x85a <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     852:	c4 2a       	or	r12, r20
     854:	d5 2a       	or	r13, r21
     856:	e6 2a       	or	r14, r22
     858:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     85a:	48 81       	ld	r20, Y
     85c:	59 81       	ldd	r21, Y+1	; 0x01
     85e:	6a 81       	ldd	r22, Y+2	; 0x02
     860:	7b 81       	ldd	r23, Y+3	; 0x03
     862:	72 60       	ori	r23, 0x02	; 2
     864:	cf 01       	movw	r24, r30
     866:	0e 94 44 14 	call	0x2888	; 0x2888 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     86a:	ea 2d       	mov	r30, r10
     86c:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     86e:	e0 17       	cp	r30, r16
     870:	f1 07       	cpc	r31, r17
     872:	09 f0       	breq	.+2      	; 0x876 <xEventGroupSetBits+0xd2>
     874:	bf cf       	rjmp	.-130    	; 0x7f4 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     876:	c0 94       	com	r12
     878:	d0 94       	com	r13
     87a:	e0 94       	com	r14
     87c:	f0 94       	com	r15
     87e:	88 81       	ld	r24, Y
     880:	99 81       	ldd	r25, Y+1	; 0x01
     882:	aa 81       	ldd	r26, Y+2	; 0x02
     884:	bb 81       	ldd	r27, Y+3	; 0x03
     886:	c8 22       	and	r12, r24
     888:	d9 22       	and	r13, r25
     88a:	ea 22       	and	r14, r26
     88c:	fb 22       	and	r15, r27
     88e:	c8 82       	st	Y, r12
     890:	d9 82       	std	Y+1, r13	; 0x01
     892:	ea 82       	std	Y+2, r14	; 0x02
     894:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     896:	0e 94 31 11 	call	0x2262	; 0x2262 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     89a:	68 81       	ld	r22, Y
     89c:	79 81       	ldd	r23, Y+1	; 0x01
     89e:	8a 81       	ldd	r24, Y+2	; 0x02
     8a0:	9b 81       	ldd	r25, Y+3	; 0x03
}
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	ff 90       	pop	r15
     8ac:	ef 90       	pop	r14
     8ae:	df 90       	pop	r13
     8b0:	cf 90       	pop	r12
     8b2:	bf 90       	pop	r11
     8b4:	af 90       	pop	r10
     8b6:	7f 90       	pop	r7
     8b8:	6f 90       	pop	r6
     8ba:	5f 90       	pop	r5
     8bc:	4f 90       	pop	r4
     8be:	08 95       	ret

000008c0 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     8c0:	e2 e5       	ldi	r30, 0x52	; 82
     8c2:	f8 e0       	ldi	r31, 0x08	; 8
     8c4:	a6 e5       	ldi	r26, 0x56	; 86
     8c6:	b8 e0       	ldi	r27, 0x08	; 8
     8c8:	b1 83       	std	Z+1, r27	; 0x01
     8ca:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     8cc:	13 82       	std	Z+3, r1	; 0x03
     8ce:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     8d0:	e2 ed       	ldi	r30, 0xD2	; 210
     8d2:	f4 e1       	ldi	r31, 0x14	; 20
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     8d4:	f0 93 51 08 	sts	0x0851, r31	; 0x800851 <pxEnd+0x1>
     8d8:	e0 93 50 08 	sts	0x0850, r30	; 0x800850 <pxEnd>
    pxEnd->xBlockSize = 0;
     8dc:	13 82       	std	Z+3, r1	; 0x03
     8de:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     8e0:	11 82       	std	Z+1, r1	; 0x01
     8e2:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     8e4:	8c e7       	ldi	r24, 0x7C	; 124
     8e6:	9c e0       	ldi	r25, 0x0C	; 12
     8e8:	13 96       	adiw	r26, 0x03	; 3
     8ea:	9c 93       	st	X, r25
     8ec:	8e 93       	st	-X, r24
     8ee:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     8f0:	ed 93       	st	X+, r30
     8f2:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     8f4:	90 93 4d 08 	sts	0x084D, r25	; 0x80084d <xMinimumEverFreeBytesRemaining+0x1>
     8f8:	80 93 4c 08 	sts	0x084C, r24	; 0x80084c <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     8fc:	90 93 4f 08 	sts	0x084F, r25	; 0x80084f <xFreeBytesRemaining+0x1>
     900:	80 93 4e 08 	sts	0x084E, r24	; 0x80084e <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e8       	ldi	r25, 0x80	; 128
     908:	90 93 47 08 	sts	0x0847, r25	; 0x800847 <xBlockAllocatedBit+0x1>
     90c:	80 93 46 08 	sts	0x0846, r24	; 0x800846 <xBlockAllocatedBit>
     910:	08 95       	ret

00000912 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     918:	a2 e5       	ldi	r26, 0x52	; 82
     91a:	b8 e0       	ldi	r27, 0x08	; 8
     91c:	01 c0       	rjmp	.+2      	; 0x920 <prvInsertBlockIntoFreeList+0xe>
     91e:	df 01       	movw	r26, r30
     920:	ed 91       	ld	r30, X+
     922:	fc 91       	ld	r31, X
     924:	11 97       	sbiw	r26, 0x01	; 1
     926:	ec 17       	cp	r30, r28
     928:	fd 07       	cpc	r31, r29
     92a:	c8 f3       	brcs	.-14     	; 0x91e <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     92c:	12 96       	adiw	r26, 0x02	; 2
     92e:	8d 91       	ld	r24, X+
     930:	9c 91       	ld	r25, X
     932:	13 97       	sbiw	r26, 0x03	; 3
     934:	9d 01       	movw	r18, r26
     936:	28 0f       	add	r18, r24
     938:	39 1f       	adc	r19, r25
     93a:	c2 17       	cp	r28, r18
     93c:	d3 07       	cpc	r29, r19
     93e:	49 f4       	brne	.+18     	; 0x952 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     940:	2a 81       	ldd	r18, Y+2	; 0x02
     942:	3b 81       	ldd	r19, Y+3	; 0x03
     944:	82 0f       	add	r24, r18
     946:	93 1f       	adc	r25, r19
     948:	13 96       	adiw	r26, 0x03	; 3
     94a:	9c 93       	st	X, r25
     94c:	8e 93       	st	-X, r24
     94e:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     950:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     952:	8a 81       	ldd	r24, Y+2	; 0x02
     954:	9b 81       	ldd	r25, Y+3	; 0x03
     956:	9e 01       	movw	r18, r28
     958:	28 0f       	add	r18, r24
     95a:	39 1f       	adc	r19, r25
     95c:	e2 17       	cp	r30, r18
     95e:	f3 07       	cpc	r31, r19
     960:	c1 f4       	brne	.+48     	; 0x992 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     962:	20 91 50 08 	lds	r18, 0x0850	; 0x800850 <pxEnd>
     966:	30 91 51 08 	lds	r19, 0x0851	; 0x800851 <pxEnd+0x1>
     96a:	e2 17       	cp	r30, r18
     96c:	f3 07       	cpc	r31, r19
     96e:	71 f0       	breq	.+28     	; 0x98c <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     970:	22 81       	ldd	r18, Z+2	; 0x02
     972:	33 81       	ldd	r19, Z+3	; 0x03
     974:	82 0f       	add	r24, r18
     976:	93 1f       	adc	r25, r19
     978:	9b 83       	std	Y+3, r25	; 0x03
     97a:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     97c:	ed 91       	ld	r30, X+
     97e:	fc 91       	ld	r31, X
     980:	11 97       	sbiw	r26, 0x01	; 1
     982:	80 81       	ld	r24, Z
     984:	91 81       	ldd	r25, Z+1	; 0x01
     986:	99 83       	std	Y+1, r25	; 0x01
     988:	88 83       	st	Y, r24
     98a:	05 c0       	rjmp	.+10     	; 0x996 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     98c:	39 83       	std	Y+1, r19	; 0x01
     98e:	28 83       	st	Y, r18
     990:	02 c0       	rjmp	.+4      	; 0x996 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     992:	f9 83       	std	Y+1, r31	; 0x01
     994:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     996:	ca 17       	cp	r28, r26
     998:	db 07       	cpc	r29, r27
     99a:	11 f0       	breq	.+4      	; 0x9a0 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     99c:	cd 93       	st	X+, r28
     99e:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	08 95       	ret

000009a6 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     9a6:	ef 92       	push	r14
     9a8:	ff 92       	push	r15
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     9b4:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     9b8:	80 91 50 08 	lds	r24, 0x0850	; 0x800850 <pxEnd>
     9bc:	90 91 51 08 	lds	r25, 0x0851	; 0x800851 <pxEnd+0x1>
     9c0:	89 2b       	or	r24, r25
     9c2:	09 f4       	brne	.+2      	; 0x9c6 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     9c4:	7d df       	rcall	.-262    	; 0x8c0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     9c6:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <xBlockAllocatedBit>
     9ca:	90 91 47 08 	lds	r25, 0x0847	; 0x800847 <xBlockAllocatedBit+0x1>
     9ce:	80 23       	and	r24, r16
     9d0:	91 23       	and	r25, r17
     9d2:	89 2b       	or	r24, r25
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <pvPortMalloc+0x32>
     9d6:	76 c0       	rjmp	.+236    	; 0xac4 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     9d8:	01 15       	cp	r16, r1
     9da:	11 05       	cpc	r17, r1
     9dc:	49 f0       	breq	.+18     	; 0x9f0 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     9de:	c8 01       	movw	r24, r16
     9e0:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     9e2:	08 17       	cp	r16, r24
     9e4:	19 07       	cpc	r17, r25
     9e6:	18 f0       	brcs	.+6      	; 0x9ee <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     9e8:	00 e0       	ldi	r16, 0x00	; 0
     9ea:	10 e0       	ldi	r17, 0x00	; 0
     9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     9ee:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     9f0:	01 15       	cp	r16, r1
     9f2:	11 05       	cpc	r17, r1
     9f4:	09 f4       	brne	.+2      	; 0x9f8 <pvPortMalloc+0x52>
     9f6:	69 c0       	rjmp	.+210    	; 0xaca <pvPortMalloc+0x124>
     9f8:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <xFreeBytesRemaining>
     9fc:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <xFreeBytesRemaining+0x1>
     a00:	80 17       	cp	r24, r16
     a02:	91 07       	cpc	r25, r17
     a04:	08 f4       	brcc	.+2      	; 0xa08 <pvPortMalloc+0x62>
     a06:	64 c0       	rjmp	.+200    	; 0xad0 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     a08:	c0 91 52 08 	lds	r28, 0x0852	; 0x800852 <xStart>
     a0c:	d0 91 53 08 	lds	r29, 0x0853	; 0x800853 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     a10:	e2 e5       	ldi	r30, 0x52	; 82
     a12:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     a16:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     a18:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a1a:	8a 81       	ldd	r24, Y+2	; 0x02
     a1c:	9b 81       	ldd	r25, Y+3	; 0x03
     a1e:	80 17       	cp	r24, r16
     a20:	91 07       	cpc	r25, r17
     a22:	20 f4       	brcc	.+8      	; 0xa2c <pvPortMalloc+0x86>
     a24:	88 81       	ld	r24, Y
     a26:	99 81       	ldd	r25, Y+1	; 0x01
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	a9 f7       	brne	.-22     	; 0xa16 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     a2c:	80 91 50 08 	lds	r24, 0x0850	; 0x800850 <pxEnd>
     a30:	90 91 51 08 	lds	r25, 0x0851	; 0x800851 <pxEnd+0x1>
     a34:	c8 17       	cp	r28, r24
     a36:	d9 07       	cpc	r29, r25
     a38:	09 f4       	brne	.+2      	; 0xa3c <pvPortMalloc+0x96>
     a3a:	4d c0       	rjmp	.+154    	; 0xad6 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     a3c:	e0 80       	ld	r14, Z
     a3e:	f1 80       	ldd	r15, Z+1	; 0x01
     a40:	84 e0       	ldi	r24, 0x04	; 4
     a42:	e8 0e       	add	r14, r24
     a44:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     a46:	88 81       	ld	r24, Y
     a48:	99 81       	ldd	r25, Y+1	; 0x01
     a4a:	91 83       	std	Z+1, r25	; 0x01
     a4c:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     a4e:	2a 81       	ldd	r18, Y+2	; 0x02
     a50:	3b 81       	ldd	r19, Y+3	; 0x03
     a52:	20 1b       	sub	r18, r16
     a54:	31 0b       	sbc	r19, r17
     a56:	29 30       	cpi	r18, 0x09	; 9
     a58:	31 05       	cpc	r19, r1
     a5a:	48 f0       	brcs	.+18     	; 0xa6e <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     a5c:	ce 01       	movw	r24, r28
     a5e:	80 0f       	add	r24, r16
     a60:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     a62:	fc 01       	movw	r30, r24
     a64:	33 83       	std	Z+3, r19	; 0x03
     a66:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     a68:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     a6a:	0a 83       	std	Y+2, r16	; 0x02
     a6c:	52 df       	rcall	.-348    	; 0x912 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     a6e:	2a 81       	ldd	r18, Y+2	; 0x02
     a70:	3b 81       	ldd	r19, Y+3	; 0x03
     a72:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <xFreeBytesRemaining>
     a76:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <xFreeBytesRemaining+0x1>
     a7a:	82 1b       	sub	r24, r18
     a7c:	93 0b       	sbc	r25, r19
     a7e:	90 93 4f 08 	sts	0x084F, r25	; 0x80084f <xFreeBytesRemaining+0x1>
     a82:	80 93 4e 08 	sts	0x084E, r24	; 0x80084e <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     a86:	40 91 4c 08 	lds	r20, 0x084C	; 0x80084c <xMinimumEverFreeBytesRemaining>
     a8a:	50 91 4d 08 	lds	r21, 0x084D	; 0x80084d <xMinimumEverFreeBytesRemaining+0x1>
     a8e:	84 17       	cp	r24, r20
     a90:	95 07       	cpc	r25, r21
     a92:	20 f4       	brcc	.+8      	; 0xa9c <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     a94:	90 93 4d 08 	sts	0x084D, r25	; 0x80084d <xMinimumEverFreeBytesRemaining+0x1>
     a98:	80 93 4c 08 	sts	0x084C, r24	; 0x80084c <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     a9c:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <xBlockAllocatedBit>
     aa0:	90 91 47 08 	lds	r25, 0x0847	; 0x800847 <xBlockAllocatedBit+0x1>
     aa4:	28 2b       	or	r18, r24
     aa6:	39 2b       	or	r19, r25
     aa8:	3b 83       	std	Y+3, r19	; 0x03
     aaa:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     aac:	19 82       	std	Y+1, r1	; 0x01
     aae:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     ab0:	80 91 4a 08 	lds	r24, 0x084A	; 0x80084a <xNumberOfSuccessfulAllocations>
     ab4:	90 91 4b 08 	lds	r25, 0x084B	; 0x80084b <xNumberOfSuccessfulAllocations+0x1>
     ab8:	01 96       	adiw	r24, 0x01	; 1
     aba:	90 93 4b 08 	sts	0x084B, r25	; 0x80084b <xNumberOfSuccessfulAllocations+0x1>
     abe:	80 93 4a 08 	sts	0x084A, r24	; 0x80084a <xNumberOfSuccessfulAllocations>
     ac2:	0b c0       	rjmp	.+22     	; 0xada <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     ac4:	e1 2c       	mov	r14, r1
     ac6:	f1 2c       	mov	r15, r1
     ac8:	08 c0       	rjmp	.+16     	; 0xada <pvPortMalloc+0x134>
     aca:	e1 2c       	mov	r14, r1
     acc:	f1 2c       	mov	r15, r1
     ace:	05 c0       	rjmp	.+10     	; 0xada <pvPortMalloc+0x134>
     ad0:	e1 2c       	mov	r14, r1
     ad2:	f1 2c       	mov	r15, r1
     ad4:	02 c0       	rjmp	.+4      	; 0xada <pvPortMalloc+0x134>
     ad6:	e1 2c       	mov	r14, r1
     ad8:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     ada:	0e 94 31 11 	call	0x2262	; 0x2262 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     ade:	e1 14       	cp	r14, r1
     ae0:	f1 04       	cpc	r15, r1
     ae2:	11 f4       	brne	.+4      	; 0xae8 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     ae4:	0e 94 ed 1b 	call	0x37da	; 0x37da <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     ae8:	c7 01       	movw	r24, r14
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	ff 90       	pop	r15
     af4:	ef 90       	pop	r14
     af6:	08 95       	ret

00000af8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     af8:	0f 93       	push	r16
     afa:	1f 93       	push	r17
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     b00:	00 97       	sbiw	r24, 0x00	; 0
     b02:	91 f1       	breq	.+100    	; 0xb68 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     b04:	ec 01       	movw	r28, r24
     b06:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     b08:	4a 81       	ldd	r20, Y+2	; 0x02
     b0a:	5b 81       	ldd	r21, Y+3	; 0x03
     b0c:	20 91 46 08 	lds	r18, 0x0846	; 0x800846 <xBlockAllocatedBit>
     b10:	30 91 47 08 	lds	r19, 0x0847	; 0x800847 <xBlockAllocatedBit+0x1>
     b14:	ba 01       	movw	r22, r20
     b16:	62 23       	and	r22, r18
     b18:	73 23       	and	r23, r19
     b1a:	67 2b       	or	r22, r23
     b1c:	29 f1       	breq	.+74     	; 0xb68 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     b1e:	68 81       	ld	r22, Y
     b20:	79 81       	ldd	r23, Y+1	; 0x01
     b22:	67 2b       	or	r22, r23
     b24:	09 f5       	brne	.+66     	; 0xb68 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     b26:	20 95       	com	r18
     b28:	30 95       	com	r19
     b2a:	24 23       	and	r18, r20
     b2c:	35 23       	and	r19, r21
     b2e:	3b 83       	std	Y+3, r19	; 0x03
     b30:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     b32:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     b36:	8a 81       	ldd	r24, Y+2	; 0x02
     b38:	9b 81       	ldd	r25, Y+3	; 0x03
     b3a:	20 91 4e 08 	lds	r18, 0x084E	; 0x80084e <xFreeBytesRemaining>
     b3e:	30 91 4f 08 	lds	r19, 0x084F	; 0x80084f <xFreeBytesRemaining+0x1>
     b42:	82 0f       	add	r24, r18
     b44:	93 1f       	adc	r25, r19
     b46:	90 93 4f 08 	sts	0x084F, r25	; 0x80084f <xFreeBytesRemaining+0x1>
     b4a:	80 93 4e 08 	sts	0x084E, r24	; 0x80084e <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     b4e:	ce 01       	movw	r24, r28
     b50:	e0 de       	rcall	.-576    	; 0x912 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     b52:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <xNumberOfSuccessfulFrees>
     b56:	90 91 49 08 	lds	r25, 0x0849	; 0x800849 <xNumberOfSuccessfulFrees+0x1>
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	90 93 49 08 	sts	0x0849, r25	; 0x800849 <xNumberOfSuccessfulFrees+0x1>
     b60:	80 93 48 08 	sts	0x0848, r24	; 0x800848 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     b64:	0e 94 31 11 	call	0x2262	; 0x2262 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	08 95       	ret

00000b72 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     b72:	fc 01       	movw	r30, r24
     b74:	03 96       	adiw	r24, 0x03	; 3
     b76:	92 83       	std	Z+2, r25	; 0x02
     b78:	81 83       	std	Z+1, r24	; 0x01
     b7a:	4f ef       	ldi	r20, 0xFF	; 255
     b7c:	5f ef       	ldi	r21, 0xFF	; 255
     b7e:	ba 01       	movw	r22, r20
     b80:	43 83       	std	Z+3, r20	; 0x03
     b82:	54 83       	std	Z+4, r21	; 0x04
     b84:	65 83       	std	Z+5, r22	; 0x05
     b86:	76 83       	std	Z+6, r23	; 0x06
     b88:	90 87       	std	Z+8, r25	; 0x08
     b8a:	87 83       	std	Z+7, r24	; 0x07
     b8c:	92 87       	std	Z+10, r25	; 0x0a
     b8e:	81 87       	std	Z+9, r24	; 0x09
     b90:	10 82       	st	Z, r1
     b92:	08 95       	ret

00000b94 <vListInitialiseItem>:
     b94:	fc 01       	movw	r30, r24
     b96:	13 86       	std	Z+11, r1	; 0x0b
     b98:	12 86       	std	Z+10, r1	; 0x0a
     b9a:	08 95       	ret

00000b9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     ba6:	08 81       	ld	r16, Y
     ba8:	19 81       	ldd	r17, Y+1	; 0x01
     baa:	2a 81       	ldd	r18, Y+2	; 0x02
     bac:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     bae:	0f 3f       	cpi	r16, 0xFF	; 255
     bb0:	4f ef       	ldi	r20, 0xFF	; 255
     bb2:	14 07       	cpc	r17, r20
     bb4:	24 07       	cpc	r18, r20
     bb6:	34 07       	cpc	r19, r20
     bb8:	21 f4       	brne	.+8      	; 0xbc2 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     bba:	fc 01       	movw	r30, r24
     bbc:	a1 85       	ldd	r26, Z+9	; 0x09
     bbe:	b2 85       	ldd	r27, Z+10	; 0x0a
     bc0:	11 c0       	rjmp	.+34     	; 0xbe4 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     bc2:	dc 01       	movw	r26, r24
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	01 c0       	rjmp	.+2      	; 0xbca <vListInsert+0x2e>
     bc8:	df 01       	movw	r26, r30
     bca:	14 96       	adiw	r26, 0x04	; 4
     bcc:	ed 91       	ld	r30, X+
     bce:	fc 91       	ld	r31, X
     bd0:	15 97       	sbiw	r26, 0x05	; 5
     bd2:	40 81       	ld	r20, Z
     bd4:	51 81       	ldd	r21, Z+1	; 0x01
     bd6:	62 81       	ldd	r22, Z+2	; 0x02
     bd8:	73 81       	ldd	r23, Z+3	; 0x03
     bda:	04 17       	cp	r16, r20
     bdc:	15 07       	cpc	r17, r21
     bde:	26 07       	cpc	r18, r22
     be0:	37 07       	cpc	r19, r23
     be2:	90 f7       	brcc	.-28     	; 0xbc8 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     be4:	14 96       	adiw	r26, 0x04	; 4
     be6:	ed 91       	ld	r30, X+
     be8:	fc 91       	ld	r31, X
     bea:	15 97       	sbiw	r26, 0x05	; 5
     bec:	fd 83       	std	Y+5, r31	; 0x05
     bee:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     bf0:	d7 83       	std	Z+7, r29	; 0x07
     bf2:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     bf4:	bf 83       	std	Y+7, r27	; 0x07
     bf6:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     bf8:	15 96       	adiw	r26, 0x05	; 5
     bfa:	dc 93       	st	X, r29
     bfc:	ce 93       	st	-X, r28
     bfe:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     c00:	9b 87       	std	Y+11, r25	; 0x0b
     c02:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     c04:	fc 01       	movw	r30, r24
     c06:	20 81       	ld	r18, Z
     c08:	2f 5f       	subi	r18, 0xFF	; 255
     c0a:	20 83       	st	Z, r18
}
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	08 95       	ret

00000c16 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     c1c:	a2 85       	ldd	r26, Z+10	; 0x0a
     c1e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     c20:	c4 81       	ldd	r28, Z+4	; 0x04
     c22:	d5 81       	ldd	r29, Z+5	; 0x05
     c24:	86 81       	ldd	r24, Z+6	; 0x06
     c26:	97 81       	ldd	r25, Z+7	; 0x07
     c28:	9f 83       	std	Y+7, r25	; 0x07
     c2a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     c2c:	c6 81       	ldd	r28, Z+6	; 0x06
     c2e:	d7 81       	ldd	r29, Z+7	; 0x07
     c30:	84 81       	ldd	r24, Z+4	; 0x04
     c32:	95 81       	ldd	r25, Z+5	; 0x05
     c34:	9d 83       	std	Y+5, r25	; 0x05
     c36:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     c38:	11 96       	adiw	r26, 0x01	; 1
     c3a:	8d 91       	ld	r24, X+
     c3c:	9c 91       	ld	r25, X
     c3e:	12 97       	sbiw	r26, 0x02	; 2
     c40:	e8 17       	cp	r30, r24
     c42:	f9 07       	cpc	r31, r25
     c44:	31 f4       	brne	.+12     	; 0xc52 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     c46:	86 81       	ldd	r24, Z+6	; 0x06
     c48:	97 81       	ldd	r25, Z+7	; 0x07
     c4a:	12 96       	adiw	r26, 0x02	; 2
     c4c:	9c 93       	st	X, r25
     c4e:	8e 93       	st	-X, r24
     c50:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     c52:	13 86       	std	Z+11, r1	; 0x0b
     c54:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     c56:	8c 91       	ld	r24, X
     c58:	81 50       	subi	r24, 0x01	; 1
     c5a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     c5c:	8c 91       	ld	r24, X
}
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	08 95       	ret

00000c64 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     c64:	a8 95       	wdr
     c66:	90 ec       	ldi	r25, 0xC0	; 192
     c68:	88 e1       	ldi	r24, 0x18	; 24
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	a8 95       	wdr
     c70:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     c7a:	08 95       	ret

00000c7c <pxPortInitialiseStack>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	60 83       	st	Z, r22
     c80:	31 97       	sbiw	r30, 0x01	; 1
     c82:	70 83       	st	Z, r23
     c84:	31 97       	sbiw	r30, 0x01	; 1
     c86:	10 82       	st	Z, r1
     c88:	31 97       	sbiw	r30, 0x01	; 1
     c8a:	10 82       	st	Z, r1
     c8c:	31 97       	sbiw	r30, 0x01	; 1
     c8e:	20 e8       	ldi	r18, 0x80	; 128
     c90:	20 83       	st	Z, r18
     c92:	31 97       	sbiw	r30, 0x01	; 1
     c94:	10 82       	st	Z, r1
     c96:	31 97       	sbiw	r30, 0x01	; 1
     c98:	10 82       	st	Z, r1
     c9a:	31 97       	sbiw	r30, 0x01	; 1
     c9c:	10 82       	st	Z, r1
     c9e:	77 97       	sbiw	r30, 0x17	; 23
     ca0:	40 83       	st	Z, r20
     ca2:	31 97       	sbiw	r30, 0x01	; 1
     ca4:	50 83       	st	Z, r21
     ca6:	86 97       	sbiw	r24, 0x26	; 38
     ca8:	08 95       	ret

00000caa <xPortStartScheduler>:
     caa:	dc df       	rcall	.-72     	; 0xc64 <prvSetupTimerInterrupt>
     cac:	a0 91 95 15 	lds	r26, 0x1595	; 0x801595 <pxCurrentTCB>
     cb0:	b0 91 96 15 	lds	r27, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
     cb4:	cd 91       	ld	r28, X+
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	dd 91       	ld	r29, X+
     cba:	de bf       	out	0x3e, r29	; 62
     cbc:	ff 91       	pop	r31
     cbe:	ef 91       	pop	r30
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	bf 91       	pop	r27
     cc6:	af 91       	pop	r26
     cc8:	9f 91       	pop	r25
     cca:	8f 91       	pop	r24
     ccc:	7f 91       	pop	r23
     cce:	6f 91       	pop	r22
     cd0:	5f 91       	pop	r21
     cd2:	4f 91       	pop	r20
     cd4:	3f 91       	pop	r19
     cd6:	2f 91       	pop	r18
     cd8:	1f 91       	pop	r17
     cda:	0f 91       	pop	r16
     cdc:	ff 90       	pop	r15
     cde:	ef 90       	pop	r14
     ce0:	df 90       	pop	r13
     ce2:	cf 90       	pop	r12
     ce4:	bf 90       	pop	r11
     ce6:	af 90       	pop	r10
     ce8:	9f 90       	pop	r9
     cea:	8f 90       	pop	r8
     cec:	7f 90       	pop	r7
     cee:	6f 90       	pop	r6
     cf0:	5f 90       	pop	r5
     cf2:	4f 90       	pop	r4
     cf4:	3f 90       	pop	r3
     cf6:	2f 90       	pop	r2
     cf8:	1f 90       	pop	r1
     cfa:	0f 90       	pop	r0
     cfc:	0c be       	out	0x3c, r0	; 60
     cfe:	0f 90       	pop	r0
     d00:	0b be       	out	0x3b, r0	; 59
     d02:	0f 90       	pop	r0
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	0f 90       	pop	r0
     d08:	08 95       	ret
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	08 95       	ret

00000d0e <vPortYield>:
     d0e:	0f 92       	push	r0
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	f8 94       	cli
     d14:	0f 92       	push	r0
     d16:	0b b6       	in	r0, 0x3b	; 59
     d18:	0f 92       	push	r0
     d1a:	0c b6       	in	r0, 0x3c	; 60
     d1c:	0f 92       	push	r0
     d1e:	1f 92       	push	r1
     d20:	11 24       	eor	r1, r1
     d22:	2f 92       	push	r2
     d24:	3f 92       	push	r3
     d26:	4f 92       	push	r4
     d28:	5f 92       	push	r5
     d2a:	6f 92       	push	r6
     d2c:	7f 92       	push	r7
     d2e:	8f 92       	push	r8
     d30:	9f 92       	push	r9
     d32:	af 92       	push	r10
     d34:	bf 92       	push	r11
     d36:	cf 92       	push	r12
     d38:	df 92       	push	r13
     d3a:	ef 92       	push	r14
     d3c:	ff 92       	push	r15
     d3e:	0f 93       	push	r16
     d40:	1f 93       	push	r17
     d42:	2f 93       	push	r18
     d44:	3f 93       	push	r19
     d46:	4f 93       	push	r20
     d48:	5f 93       	push	r21
     d4a:	6f 93       	push	r22
     d4c:	7f 93       	push	r23
     d4e:	8f 93       	push	r24
     d50:	9f 93       	push	r25
     d52:	af 93       	push	r26
     d54:	bf 93       	push	r27
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	ef 93       	push	r30
     d5c:	ff 93       	push	r31
     d5e:	a0 91 95 15 	lds	r26, 0x1595	; 0x801595 <pxCurrentTCB>
     d62:	b0 91 96 15 	lds	r27, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
     d66:	0d b6       	in	r0, 0x3d	; 61
     d68:	0d 92       	st	X+, r0
     d6a:	0e b6       	in	r0, 0x3e	; 62
     d6c:	0d 92       	st	X+, r0
     d6e:	0e 94 8d 12 	call	0x251a	; 0x251a <vTaskSwitchContext>
     d72:	a0 91 95 15 	lds	r26, 0x1595	; 0x801595 <pxCurrentTCB>
     d76:	b0 91 96 15 	lds	r27, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
     d7a:	cd 91       	ld	r28, X+
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	dd 91       	ld	r29, X+
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	ff 91       	pop	r31
     d84:	ef 91       	pop	r30
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	bf 91       	pop	r27
     d8c:	af 91       	pop	r26
     d8e:	9f 91       	pop	r25
     d90:	8f 91       	pop	r24
     d92:	7f 91       	pop	r23
     d94:	6f 91       	pop	r22
     d96:	5f 91       	pop	r21
     d98:	4f 91       	pop	r20
     d9a:	3f 91       	pop	r19
     d9c:	2f 91       	pop	r18
     d9e:	1f 91       	pop	r17
     da0:	0f 91       	pop	r16
     da2:	ff 90       	pop	r15
     da4:	ef 90       	pop	r14
     da6:	df 90       	pop	r13
     da8:	cf 90       	pop	r12
     daa:	bf 90       	pop	r11
     dac:	af 90       	pop	r10
     dae:	9f 90       	pop	r9
     db0:	8f 90       	pop	r8
     db2:	7f 90       	pop	r7
     db4:	6f 90       	pop	r6
     db6:	5f 90       	pop	r5
     db8:	4f 90       	pop	r4
     dba:	3f 90       	pop	r3
     dbc:	2f 90       	pop	r2
     dbe:	1f 90       	pop	r1
     dc0:	0f 90       	pop	r0
     dc2:	0c be       	out	0x3c, r0	; 60
     dc4:	0f 90       	pop	r0
     dc6:	0b be       	out	0x3b, r0	; 59
     dc8:	0f 90       	pop	r0
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	0f 90       	pop	r0
     dce:	08 95       	ret

00000dd0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     dd0:	0f 92       	push	r0
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	0f 92       	push	r0
     dd8:	0b b6       	in	r0, 0x3b	; 59
     dda:	0f 92       	push	r0
     ddc:	0c b6       	in	r0, 0x3c	; 60
     dde:	0f 92       	push	r0
     de0:	1f 92       	push	r1
     de2:	11 24       	eor	r1, r1
     de4:	2f 92       	push	r2
     de6:	3f 92       	push	r3
     de8:	4f 92       	push	r4
     dea:	5f 92       	push	r5
     dec:	6f 92       	push	r6
     dee:	7f 92       	push	r7
     df0:	8f 92       	push	r8
     df2:	9f 92       	push	r9
     df4:	af 92       	push	r10
     df6:	bf 92       	push	r11
     df8:	cf 92       	push	r12
     dfa:	df 92       	push	r13
     dfc:	ef 92       	push	r14
     dfe:	ff 92       	push	r15
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	2f 93       	push	r18
     e06:	3f 93       	push	r19
     e08:	4f 93       	push	r20
     e0a:	5f 93       	push	r21
     e0c:	6f 93       	push	r22
     e0e:	7f 93       	push	r23
     e10:	8f 93       	push	r24
     e12:	9f 93       	push	r25
     e14:	af 93       	push	r26
     e16:	bf 93       	push	r27
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	ef 93       	push	r30
     e1e:	ff 93       	push	r31
     e20:	a0 91 95 15 	lds	r26, 0x1595	; 0x801595 <pxCurrentTCB>
     e24:	b0 91 96 15 	lds	r27, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
     e28:	0d b6       	in	r0, 0x3d	; 61
     e2a:	0d 92       	st	X+, r0
     e2c:	0e b6       	in	r0, 0x3e	; 62
     e2e:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     e30:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     e32:	0e 94 05 10 	call	0x200a	; 0x200a <xTaskIncrementTick>
     e36:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     e38:	0e 94 8d 12 	call	0x251a	; 0x251a <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     e3c:	a0 91 95 15 	lds	r26, 0x1595	; 0x801595 <pxCurrentTCB>
     e40:	b0 91 96 15 	lds	r27, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
     e44:	cd 91       	ld	r28, X+
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	dd 91       	ld	r29, X+
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	ff 91       	pop	r31
     e4e:	ef 91       	pop	r30
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	bf 91       	pop	r27
     e56:	af 91       	pop	r26
     e58:	9f 91       	pop	r25
     e5a:	8f 91       	pop	r24
     e5c:	7f 91       	pop	r23
     e5e:	6f 91       	pop	r22
     e60:	5f 91       	pop	r21
     e62:	4f 91       	pop	r20
     e64:	3f 91       	pop	r19
     e66:	2f 91       	pop	r18
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	df 90       	pop	r13
     e72:	cf 90       	pop	r12
     e74:	bf 90       	pop	r11
     e76:	af 90       	pop	r10
     e78:	9f 90       	pop	r9
     e7a:	8f 90       	pop	r8
     e7c:	7f 90       	pop	r7
     e7e:	6f 90       	pop	r6
     e80:	5f 90       	pop	r5
     e82:	4f 90       	pop	r4
     e84:	3f 90       	pop	r3
     e86:	2f 90       	pop	r2
     e88:	1f 90       	pop	r1
     e8a:	0f 90       	pop	r0
     e8c:	0c be       	out	0x3c, r0	; 60
     e8e:	0f 90       	pop	r0
     e90:	0b be       	out	0x3b, r0	; 59
     e92:	0f 90       	pop	r0
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     e98:	08 95       	ret

00000e9a <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     e9a:	9a df       	rcall	.-204    	; 0xdd0 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     e9c:	18 95       	reti

00000e9e <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	0f 92       	push	r0
     ea4:	fc 01       	movw	r30, r24
     ea6:	86 8d       	ldd	r24, Z+30	; 0x1e
     ea8:	81 11       	cpse	r24, r1
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <prvIsQueueEmpty+0x12>
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <prvIsQueueEmpty+0x14>
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	0f 90       	pop	r0
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	08 95       	ret

00000eb8 <prvIsQueueFull>:
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	0f 92       	push	r0
     ebe:	fc 01       	movw	r30, r24
     ec0:	26 8d       	ldd	r18, Z+30	; 0x1e
     ec2:	87 8d       	ldd	r24, Z+31	; 0x1f
     ec4:	28 13       	cpse	r18, r24
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <prvIsQueueFull+0x14>
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	01 c0       	rjmp	.+2      	; 0xece <prvIsQueueFull+0x16>
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	0f 90       	pop	r0
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	08 95       	ret

00000ed4 <prvCopyDataToQueue>:
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	ec 01       	movw	r28, r24
     ede:	04 2f       	mov	r16, r20
     ee0:	1e 8d       	ldd	r17, Y+30	; 0x1e
     ee2:	48 a1       	ldd	r20, Y+32	; 0x20
     ee4:	41 11       	cpse	r20, r1
     ee6:	0c c0       	rjmp	.+24     	; 0xf00 <prvCopyDataToQueue+0x2c>
     ee8:	88 81       	ld	r24, Y
     eea:	99 81       	ldd	r25, Y+1	; 0x01
     eec:	89 2b       	or	r24, r25
     eee:	09 f0       	breq	.+2      	; 0xef2 <prvCopyDataToQueue+0x1e>
     ef0:	42 c0       	rjmp	.+132    	; 0xf76 <prvCopyDataToQueue+0xa2>
     ef2:	8c 81       	ldd	r24, Y+4	; 0x04
     ef4:	9d 81       	ldd	r25, Y+5	; 0x05
     ef6:	0e 94 82 15 	call	0x2b04	; 0x2b04 <xTaskPriorityDisinherit>
     efa:	1d 82       	std	Y+5, r1	; 0x05
     efc:	1c 82       	std	Y+4, r1	; 0x04
     efe:	42 c0       	rjmp	.+132    	; 0xf84 <prvCopyDataToQueue+0xb0>
     f00:	01 11       	cpse	r16, r1
     f02:	17 c0       	rjmp	.+46     	; 0xf32 <prvCopyDataToQueue+0x5e>
     f04:	50 e0       	ldi	r21, 0x00	; 0
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	9b 81       	ldd	r25, Y+3	; 0x03
     f0a:	0e 94 b7 33 	call	0x676e	; 0x676e <memcpy>
     f0e:	28 a1       	ldd	r18, Y+32	; 0x20
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	9b 81       	ldd	r25, Y+3	; 0x03
     f14:	82 0f       	add	r24, r18
     f16:	91 1d       	adc	r25, r1
     f18:	9b 83       	std	Y+3, r25	; 0x03
     f1a:	8a 83       	std	Y+2, r24	; 0x02
     f1c:	2c 81       	ldd	r18, Y+4	; 0x04
     f1e:	3d 81       	ldd	r19, Y+5	; 0x05
     f20:	82 17       	cp	r24, r18
     f22:	93 07       	cpc	r25, r19
     f24:	50 f1       	brcs	.+84     	; 0xf7a <prvCopyDataToQueue+0xa6>
     f26:	88 81       	ld	r24, Y
     f28:	99 81       	ldd	r25, Y+1	; 0x01
     f2a:	9b 83       	std	Y+3, r25	; 0x03
     f2c:	8a 83       	std	Y+2, r24	; 0x02
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	29 c0       	rjmp	.+82     	; 0xf84 <prvCopyDataToQueue+0xb0>
     f32:	50 e0       	ldi	r21, 0x00	; 0
     f34:	8e 81       	ldd	r24, Y+6	; 0x06
     f36:	9f 81       	ldd	r25, Y+7	; 0x07
     f38:	0e 94 b7 33 	call	0x676e	; 0x676e <memcpy>
     f3c:	88 a1       	ldd	r24, Y+32	; 0x20
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	91 95       	neg	r25
     f42:	81 95       	neg	r24
     f44:	91 09       	sbc	r25, r1
     f46:	2e 81       	ldd	r18, Y+6	; 0x06
     f48:	3f 81       	ldd	r19, Y+7	; 0x07
     f4a:	28 0f       	add	r18, r24
     f4c:	39 1f       	adc	r19, r25
     f4e:	3f 83       	std	Y+7, r19	; 0x07
     f50:	2e 83       	std	Y+6, r18	; 0x06
     f52:	48 81       	ld	r20, Y
     f54:	59 81       	ldd	r21, Y+1	; 0x01
     f56:	24 17       	cp	r18, r20
     f58:	35 07       	cpc	r19, r21
     f5a:	30 f4       	brcc	.+12     	; 0xf68 <prvCopyDataToQueue+0x94>
     f5c:	2c 81       	ldd	r18, Y+4	; 0x04
     f5e:	3d 81       	ldd	r19, Y+5	; 0x05
     f60:	82 0f       	add	r24, r18
     f62:	93 1f       	adc	r25, r19
     f64:	9f 83       	std	Y+7, r25	; 0x07
     f66:	8e 83       	std	Y+6, r24	; 0x06
     f68:	02 30       	cpi	r16, 0x02	; 2
     f6a:	49 f4       	brne	.+18     	; 0xf7e <prvCopyDataToQueue+0xaa>
     f6c:	11 23       	and	r17, r17
     f6e:	49 f0       	breq	.+18     	; 0xf82 <prvCopyDataToQueue+0xae>
     f70:	11 50       	subi	r17, 0x01	; 1
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	07 c0       	rjmp	.+14     	; 0xf84 <prvCopyDataToQueue+0xb0>
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	05 c0       	rjmp	.+10     	; 0xf84 <prvCopyDataToQueue+0xb0>
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	03 c0       	rjmp	.+6      	; 0xf84 <prvCopyDataToQueue+0xb0>
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	01 c0       	rjmp	.+2      	; 0xf84 <prvCopyDataToQueue+0xb0>
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	1f 5f       	subi	r17, 0xFF	; 255
     f86:	1e 8f       	std	Y+30, r17	; 0x1e
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	1f 91       	pop	r17
     f8e:	0f 91       	pop	r16
     f90:	08 95       	ret

00000f92 <prvCopyDataFromQueue>:
     f92:	fc 01       	movw	r30, r24
     f94:	40 a1       	ldd	r20, Z+32	; 0x20
     f96:	44 23       	and	r20, r20
     f98:	a9 f0       	breq	.+42     	; 0xfc4 <prvCopyDataFromQueue+0x32>
     f9a:	50 e0       	ldi	r21, 0x00	; 0
     f9c:	26 81       	ldd	r18, Z+6	; 0x06
     f9e:	37 81       	ldd	r19, Z+7	; 0x07
     fa0:	24 0f       	add	r18, r20
     fa2:	35 1f       	adc	r19, r21
     fa4:	37 83       	std	Z+7, r19	; 0x07
     fa6:	26 83       	std	Z+6, r18	; 0x06
     fa8:	84 81       	ldd	r24, Z+4	; 0x04
     faa:	95 81       	ldd	r25, Z+5	; 0x05
     fac:	28 17       	cp	r18, r24
     fae:	39 07       	cpc	r19, r25
     fb0:	20 f0       	brcs	.+8      	; 0xfba <prvCopyDataFromQueue+0x28>
     fb2:	80 81       	ld	r24, Z
     fb4:	91 81       	ldd	r25, Z+1	; 0x01
     fb6:	97 83       	std	Z+7, r25	; 0x07
     fb8:	86 83       	std	Z+6, r24	; 0x06
     fba:	cb 01       	movw	r24, r22
     fbc:	66 81       	ldd	r22, Z+6	; 0x06
     fbe:	77 81       	ldd	r23, Z+7	; 0x07
     fc0:	0c 94 b7 33 	jmp	0x676e	; 0x676e <memcpy>
     fc4:	08 95       	ret

00000fc6 <prvUnlockQueue>:
     fc6:	1f 93       	push	r17
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	ec 01       	movw	r28, r24
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	0f 92       	push	r0
     fd4:	1a a1       	ldd	r17, Y+34	; 0x22
     fd6:	0b c0       	rjmp	.+22     	; 0xfee <prvUnlockQueue+0x28>
     fd8:	8b 89       	ldd	r24, Y+19	; 0x13
     fda:	88 23       	and	r24, r24
     fdc:	51 f0       	breq	.+20     	; 0xff2 <prvUnlockQueue+0x2c>
     fde:	ce 01       	movw	r24, r28
     fe0:	43 96       	adiw	r24, 0x13	; 19
     fe2:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskRemoveFromEventList>
     fe6:	81 11       	cpse	r24, r1
     fe8:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <vTaskMissedYield>
     fec:	11 50       	subi	r17, 0x01	; 1
     fee:	11 16       	cp	r1, r17
     ff0:	9c f3       	brlt	.-26     	; 0xfd8 <prvUnlockQueue+0x12>
     ff2:	8f ef       	ldi	r24, 0xFF	; 255
     ff4:	8a a3       	std	Y+34, r24	; 0x22
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	0f 92       	push	r0
    1000:	19 a1       	ldd	r17, Y+33	; 0x21
    1002:	0b c0       	rjmp	.+22     	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
    1004:	88 85       	ldd	r24, Y+8	; 0x08
    1006:	88 23       	and	r24, r24
    1008:	51 f0       	breq	.+20     	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
    100a:	ce 01       	movw	r24, r28
    100c:	08 96       	adiw	r24, 0x08	; 8
    100e:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskRemoveFromEventList>
    1012:	81 11       	cpse	r24, r1
    1014:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <vTaskMissedYield>
    1018:	11 50       	subi	r17, 0x01	; 1
    101a:	11 16       	cp	r1, r17
    101c:	9c f3       	brlt	.-26     	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
    101e:	8f ef       	ldi	r24, 0xFF	; 255
    1020:	89 a3       	std	Y+33, r24	; 0x21
    1022:	0f 90       	pop	r0
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	08 95       	ret

0000102e <xQueueGenericReset>:
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	ec 01       	movw	r28, r24
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	0f 92       	push	r0
    103a:	e8 81       	ld	r30, Y
    103c:	f9 81       	ldd	r31, Y+1	; 0x01
    103e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1040:	28 a1       	ldd	r18, Y+32	; 0x20
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	82 9f       	mul	r24, r18
    1048:	a0 01       	movw	r20, r0
    104a:	83 9f       	mul	r24, r19
    104c:	50 0d       	add	r21, r0
    104e:	92 9f       	mul	r25, r18
    1050:	50 0d       	add	r21, r0
    1052:	11 24       	eor	r1, r1
    1054:	4e 0f       	add	r20, r30
    1056:	5f 1f       	adc	r21, r31
    1058:	5d 83       	std	Y+5, r21	; 0x05
    105a:	4c 83       	std	Y+4, r20	; 0x04
    105c:	1e 8e       	std	Y+30, r1	; 0x1e
    105e:	fb 83       	std	Y+3, r31	; 0x03
    1060:	ea 83       	std	Y+2, r30	; 0x02
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	28 9f       	mul	r18, r24
    1066:	a0 01       	movw	r20, r0
    1068:	29 9f       	mul	r18, r25
    106a:	50 0d       	add	r21, r0
    106c:	38 9f       	mul	r19, r24
    106e:	50 0d       	add	r21, r0
    1070:	11 24       	eor	r1, r1
    1072:	cf 01       	movw	r24, r30
    1074:	84 0f       	add	r24, r20
    1076:	95 1f       	adc	r25, r21
    1078:	9f 83       	std	Y+7, r25	; 0x07
    107a:	8e 83       	std	Y+6, r24	; 0x06
    107c:	8f ef       	ldi	r24, 0xFF	; 255
    107e:	89 a3       	std	Y+33, r24	; 0x21
    1080:	8a a3       	std	Y+34, r24	; 0x22
    1082:	61 11       	cpse	r22, r1
    1084:	0b c0       	rjmp	.+22     	; 0x109c <xQueueGenericReset+0x6e>
    1086:	88 85       	ldd	r24, Y+8	; 0x08
    1088:	88 23       	and	r24, r24
    108a:	71 f0       	breq	.+28     	; 0x10a8 <xQueueGenericReset+0x7a>
    108c:	ce 01       	movw	r24, r28
    108e:	08 96       	adiw	r24, 0x08	; 8
    1090:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskRemoveFromEventList>
    1094:	88 23       	and	r24, r24
    1096:	41 f0       	breq	.+16     	; 0x10a8 <xQueueGenericReset+0x7a>
    1098:	3a de       	rcall	.-908    	; 0xd0e <vPortYield>
    109a:	06 c0       	rjmp	.+12     	; 0x10a8 <xQueueGenericReset+0x7a>
    109c:	ce 01       	movw	r24, r28
    109e:	08 96       	adiw	r24, 0x08	; 8
    10a0:	68 dd       	rcall	.-1328   	; 0xb72 <vListInitialise>
    10a2:	ce 01       	movw	r24, r28
    10a4:	43 96       	adiw	r24, 0x13	; 19
    10a6:	65 dd       	rcall	.-1334   	; 0xb72 <vListInitialise>
    10a8:	0f 90       	pop	r0
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	08 95       	ret

000010b4 <prvInitialiseNewQueue>:
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	f8 01       	movw	r30, r16
    10ba:	61 11       	cpse	r22, r1
    10bc:	03 c0       	rjmp	.+6      	; 0x10c4 <prvInitialiseNewQueue+0x10>
    10be:	11 83       	std	Z+1, r17	; 0x01
    10c0:	00 83       	st	Z, r16
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <prvInitialiseNewQueue+0x14>
    10c4:	51 83       	std	Z+1, r21	; 0x01
    10c6:	40 83       	st	Z, r20
    10c8:	87 8f       	std	Z+31, r24	; 0x1f
    10ca:	60 a3       	std	Z+32, r22	; 0x20
    10cc:	61 e0       	ldi	r22, 0x01	; 1
    10ce:	cf 01       	movw	r24, r30
    10d0:	ae df       	rcall	.-164    	; 0x102e <xQueueGenericReset>
    10d2:	1f 91       	pop	r17
    10d4:	0f 91       	pop	r16
    10d6:	08 95       	ret

000010d8 <xQueueGenericCreate>:
    10d8:	df 92       	push	r13
    10da:	ef 92       	push	r14
    10dc:	ff 92       	push	r15
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	f8 2e       	mov	r15, r24
    10e8:	e6 2e       	mov	r14, r22
    10ea:	d4 2e       	mov	r13, r20
    10ec:	86 9f       	mul	r24, r22
    10ee:	c0 01       	movw	r24, r0
    10f0:	11 24       	eor	r1, r1
    10f2:	83 96       	adiw	r24, 0x23	; 35
    10f4:	58 dc       	rcall	.-1872   	; 0x9a6 <pvPortMalloc>
    10f6:	ec 01       	movw	r28, r24
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	41 f0       	breq	.+16     	; 0x110c <xQueueGenericCreate+0x34>
    10fc:	8c 01       	movw	r16, r24
    10fe:	2d 2d       	mov	r18, r13
    1100:	ac 01       	movw	r20, r24
    1102:	4d 5d       	subi	r20, 0xDD	; 221
    1104:	5f 4f       	sbci	r21, 0xFF	; 255
    1106:	6e 2d       	mov	r22, r14
    1108:	8f 2d       	mov	r24, r15
    110a:	d4 df       	rcall	.-88     	; 0x10b4 <prvInitialiseNewQueue>
    110c:	ce 01       	movw	r24, r28
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	ff 90       	pop	r15
    1118:	ef 90       	pop	r14
    111a:	df 90       	pop	r13
    111c:	08 95       	ret

0000111e <xQueueGenericSend>:
    111e:	cf 92       	push	r12
    1120:	df 92       	push	r13
    1122:	ef 92       	push	r14
    1124:	ff 92       	push	r15
    1126:	0f 93       	push	r16
    1128:	1f 93       	push	r17
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	29 97       	sbiw	r28, 0x09	; 9
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	7c 01       	movw	r14, r24
    1140:	6b 01       	movw	r12, r22
    1142:	2e 83       	std	Y+6, r18	; 0x06
    1144:	3f 83       	std	Y+7, r19	; 0x07
    1146:	48 87       	std	Y+8, r20	; 0x08
    1148:	59 87       	std	Y+9, r21	; 0x09
    114a:	10 e0       	ldi	r17, 0x00	; 0
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	0f 92       	push	r0
    1152:	f7 01       	movw	r30, r14
    1154:	96 8d       	ldd	r25, Z+30	; 0x1e
    1156:	87 8d       	ldd	r24, Z+31	; 0x1f
    1158:	98 17       	cp	r25, r24
    115a:	10 f0       	brcs	.+4      	; 0x1160 <xQueueGenericSend+0x42>
    115c:	02 30       	cpi	r16, 0x02	; 2
    115e:	b1 f4       	brne	.+44     	; 0x118c <xQueueGenericSend+0x6e>
    1160:	40 2f       	mov	r20, r16
    1162:	b6 01       	movw	r22, r12
    1164:	c7 01       	movw	r24, r14
    1166:	b6 de       	rcall	.-660    	; 0xed4 <prvCopyDataToQueue>
    1168:	f7 01       	movw	r30, r14
    116a:	93 89       	ldd	r25, Z+19	; 0x13
    116c:	99 23       	and	r25, r25
    116e:	41 f0       	breq	.+16     	; 0x1180 <xQueueGenericSend+0x62>
    1170:	c7 01       	movw	r24, r14
    1172:	43 96       	adiw	r24, 0x13	; 19
    1174:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskRemoveFromEventList>
    1178:	88 23       	and	r24, r24
    117a:	21 f0       	breq	.+8      	; 0x1184 <xQueueGenericSend+0x66>
    117c:	c8 dd       	rcall	.-1136   	; 0xd0e <vPortYield>
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <xQueueGenericSend+0x66>
    1180:	81 11       	cpse	r24, r1
    1182:	c5 dd       	rcall	.-1142   	; 0xd0e <vPortYield>
    1184:	0f 90       	pop	r0
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	4c c0       	rjmp	.+152    	; 0x1224 <xQueueGenericSend+0x106>
    118c:	8e 81       	ldd	r24, Y+6	; 0x06
    118e:	9f 81       	ldd	r25, Y+7	; 0x07
    1190:	a8 85       	ldd	r26, Y+8	; 0x08
    1192:	b9 85       	ldd	r27, Y+9	; 0x09
    1194:	89 2b       	or	r24, r25
    1196:	8a 2b       	or	r24, r26
    1198:	8b 2b       	or	r24, r27
    119a:	21 f4       	brne	.+8      	; 0x11a4 <xQueueGenericSend+0x86>
    119c:	0f 90       	pop	r0
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	40 c0       	rjmp	.+128    	; 0x1224 <xQueueGenericSend+0x106>
    11a4:	11 11       	cpse	r17, r1
    11a6:	05 c0       	rjmp	.+10     	; 0x11b2 <xQueueGenericSend+0x94>
    11a8:	ce 01       	movw	r24, r28
    11aa:	01 96       	adiw	r24, 0x01	; 1
    11ac:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <vTaskInternalSetTimeOutState>
    11b0:	11 e0       	ldi	r17, 0x01	; 1
    11b2:	0f 90       	pop	r0
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	15 d7       	rcall	.+3626   	; 0x1fe2 <vTaskSuspendAll>
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	0f 92       	push	r0
    11be:	f7 01       	movw	r30, r14
    11c0:	81 a1       	ldd	r24, Z+33	; 0x21
    11c2:	8f 3f       	cpi	r24, 0xFF	; 255
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <xQueueGenericSend+0xaa>
    11c6:	11 a2       	std	Z+33, r1	; 0x21
    11c8:	f7 01       	movw	r30, r14
    11ca:	82 a1       	ldd	r24, Z+34	; 0x22
    11cc:	8f 3f       	cpi	r24, 0xFF	; 255
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <xQueueGenericSend+0xb4>
    11d0:	12 a2       	std	Z+34, r1	; 0x22
    11d2:	0f 90       	pop	r0
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	be 01       	movw	r22, r28
    11d8:	6a 5f       	subi	r22, 0xFA	; 250
    11da:	7f 4f       	sbci	r23, 0xFF	; 255
    11dc:	ce 01       	movw	r24, r28
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <xTaskCheckForTimeOut>
    11e4:	81 11       	cpse	r24, r1
    11e6:	19 c0       	rjmp	.+50     	; 0x121a <xQueueGenericSend+0xfc>
    11e8:	c7 01       	movw	r24, r14
    11ea:	66 de       	rcall	.-820    	; 0xeb8 <prvIsQueueFull>
    11ec:	88 23       	and	r24, r24
    11ee:	81 f0       	breq	.+32     	; 0x1210 <xQueueGenericSend+0xf2>
    11f0:	4e 81       	ldd	r20, Y+6	; 0x06
    11f2:	5f 81       	ldd	r21, Y+7	; 0x07
    11f4:	68 85       	ldd	r22, Y+8	; 0x08
    11f6:	79 85       	ldd	r23, Y+9	; 0x09
    11f8:	c7 01       	movw	r24, r14
    11fa:	08 96       	adiw	r24, 0x08	; 8
    11fc:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <vTaskPlaceOnEventList>
    1200:	c7 01       	movw	r24, r14
    1202:	e1 de       	rcall	.-574    	; 0xfc6 <prvUnlockQueue>
    1204:	0e 94 31 11 	call	0x2262	; 0x2262 <xTaskResumeAll>
    1208:	81 11       	cpse	r24, r1
    120a:	a0 cf       	rjmp	.-192    	; 0x114c <xQueueGenericSend+0x2e>
    120c:	80 dd       	rcall	.-1280   	; 0xd0e <vPortYield>
    120e:	9e cf       	rjmp	.-196    	; 0x114c <xQueueGenericSend+0x2e>
    1210:	c7 01       	movw	r24, r14
    1212:	d9 de       	rcall	.-590    	; 0xfc6 <prvUnlockQueue>
    1214:	0e 94 31 11 	call	0x2262	; 0x2262 <xTaskResumeAll>
    1218:	99 cf       	rjmp	.-206    	; 0x114c <xQueueGenericSend+0x2e>
    121a:	c7 01       	movw	r24, r14
    121c:	d4 de       	rcall	.-600    	; 0xfc6 <prvUnlockQueue>
    121e:	0e 94 31 11 	call	0x2262	; 0x2262 <xTaskResumeAll>
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	29 96       	adiw	r28, 0x09	; 9
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
    1238:	ff 90       	pop	r15
    123a:	ef 90       	pop	r14
    123c:	df 90       	pop	r13
    123e:	cf 90       	pop	r12
    1240:	08 95       	ret

00001242 <prvInitialiseMutex>:
    1242:	0f 93       	push	r16
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	69 f0       	breq	.+26     	; 0x1262 <prvInitialiseMutex+0x20>
    1248:	fc 01       	movw	r30, r24
    124a:	15 82       	std	Z+5, r1	; 0x05
    124c:	14 82       	std	Z+4, r1	; 0x04
    124e:	11 82       	std	Z+1, r1	; 0x01
    1250:	10 82       	st	Z, r1
    1252:	16 82       	std	Z+6, r1	; 0x06
    1254:	00 e0       	ldi	r16, 0x00	; 0
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	a9 01       	movw	r20, r18
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	5e df       	rcall	.-324    	; 0x111e <xQueueGenericSend>
    1262:	0f 91       	pop	r16
    1264:	08 95       	ret

00001266 <xQueueCreateMutex>:
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	48 2f       	mov	r20, r24
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	33 df       	rcall	.-410    	; 0x10d8 <xQueueGenericCreate>
    1272:	ec 01       	movw	r28, r24
    1274:	e6 df       	rcall	.-52     	; 0x1242 <prvInitialiseMutex>
    1276:	ce 01       	movw	r24, r28
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	08 95       	ret

0000127e <xQueueGenericSendFromISR>:
    127e:	ef 92       	push	r14
    1280:	ff 92       	push	r15
    1282:	0f 93       	push	r16
    1284:	1f 93       	push	r17
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	8a 01       	movw	r16, r20
    128c:	fc 01       	movw	r30, r24
    128e:	56 8d       	ldd	r21, Z+30	; 0x1e
    1290:	37 8d       	ldd	r19, Z+31	; 0x1f
    1292:	53 17       	cp	r21, r19
    1294:	10 f0       	brcs	.+4      	; 0x129a <xQueueGenericSendFromISR+0x1c>
    1296:	22 30       	cpi	r18, 0x02	; 2
    1298:	f9 f4       	brne	.+62     	; 0x12d8 <xQueueGenericSendFromISR+0x5a>
    129a:	42 2f       	mov	r20, r18
    129c:	78 01       	movw	r14, r16
    129e:	ec 01       	movw	r28, r24
    12a0:	1a a1       	ldd	r17, Y+34	; 0x22
    12a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12a4:	ce 01       	movw	r24, r28
    12a6:	16 de       	rcall	.-980    	; 0xed4 <prvCopyDataToQueue>
    12a8:	1f 3f       	cpi	r17, 0xFF	; 255
    12aa:	81 f4       	brne	.+32     	; 0x12cc <xQueueGenericSendFromISR+0x4e>
    12ac:	8b 89       	ldd	r24, Y+19	; 0x13
    12ae:	88 23       	and	r24, r24
    12b0:	a9 f0       	breq	.+42     	; 0x12dc <xQueueGenericSendFromISR+0x5e>
    12b2:	ce 01       	movw	r24, r28
    12b4:	43 96       	adiw	r24, 0x13	; 19
    12b6:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskRemoveFromEventList>
    12ba:	88 23       	and	r24, r24
    12bc:	89 f0       	breq	.+34     	; 0x12e0 <xQueueGenericSendFromISR+0x62>
    12be:	e1 14       	cp	r14, r1
    12c0:	f1 04       	cpc	r15, r1
    12c2:	81 f0       	breq	.+32     	; 0x12e4 <xQueueGenericSendFromISR+0x66>
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	f7 01       	movw	r30, r14
    12c8:	80 83       	st	Z, r24
    12ca:	0d c0       	rjmp	.+26     	; 0x12e6 <xQueueGenericSendFromISR+0x68>
    12cc:	ff 24       	eor	r15, r15
    12ce:	f3 94       	inc	r15
    12d0:	f1 0e       	add	r15, r17
    12d2:	fa a2       	std	Y+34, r15	; 0x22
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	07 c0       	rjmp	.+14     	; 0x12e6 <xQueueGenericSendFromISR+0x68>
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	05 c0       	rjmp	.+10     	; 0x12e6 <xQueueGenericSendFromISR+0x68>
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	03 c0       	rjmp	.+6      	; 0x12e6 <xQueueGenericSendFromISR+0x68>
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	01 c0       	rjmp	.+2      	; 0x12e6 <xQueueGenericSendFromISR+0x68>
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	ff 90       	pop	r15
    12f0:	ef 90       	pop	r14
    12f2:	08 95       	ret

000012f4 <xQueueReceive>:
    12f4:	cf 92       	push	r12
    12f6:	df 92       	push	r13
    12f8:	ef 92       	push	r14
    12fa:	ff 92       	push	r15
    12fc:	0f 93       	push	r16
    12fe:	1f 93       	push	r17
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	29 97       	sbiw	r28, 0x09	; 9
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	8c 01       	movw	r16, r24
    1316:	6b 01       	movw	r12, r22
    1318:	2e 83       	std	Y+6, r18	; 0x06
    131a:	3f 83       	std	Y+7, r19	; 0x07
    131c:	48 87       	std	Y+8, r20	; 0x08
    131e:	59 87       	std	Y+9, r21	; 0x09
    1320:	e1 2c       	mov	r14, r1
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	0f 92       	push	r0
    1328:	f8 01       	movw	r30, r16
    132a:	f6 8c       	ldd	r15, Z+30	; 0x1e
    132c:	ff 20       	and	r15, r15
    132e:	99 f0       	breq	.+38     	; 0x1356 <xQueueReceive+0x62>
    1330:	b6 01       	movw	r22, r12
    1332:	c8 01       	movw	r24, r16
    1334:	2e de       	rcall	.-932    	; 0xf92 <prvCopyDataFromQueue>
    1336:	fa 94       	dec	r15
    1338:	f8 01       	movw	r30, r16
    133a:	f6 8e       	std	Z+30, r15	; 0x1e
    133c:	80 85       	ldd	r24, Z+8	; 0x08
    133e:	88 23       	and	r24, r24
    1340:	31 f0       	breq	.+12     	; 0x134e <xQueueReceive+0x5a>
    1342:	c8 01       	movw	r24, r16
    1344:	08 96       	adiw	r24, 0x08	; 8
    1346:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskRemoveFromEventList>
    134a:	81 11       	cpse	r24, r1
    134c:	e0 dc       	rcall	.-1600   	; 0xd0e <vPortYield>
    134e:	0f 90       	pop	r0
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	4f c0       	rjmp	.+158    	; 0x13f4 <xQueueReceive+0x100>
    1356:	8e 81       	ldd	r24, Y+6	; 0x06
    1358:	9f 81       	ldd	r25, Y+7	; 0x07
    135a:	a8 85       	ldd	r26, Y+8	; 0x08
    135c:	b9 85       	ldd	r27, Y+9	; 0x09
    135e:	89 2b       	or	r24, r25
    1360:	8a 2b       	or	r24, r26
    1362:	8b 2b       	or	r24, r27
    1364:	21 f4       	brne	.+8      	; 0x136e <xQueueReceive+0x7a>
    1366:	0f 90       	pop	r0
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	43 c0       	rjmp	.+134    	; 0x13f4 <xQueueReceive+0x100>
    136e:	e1 10       	cpse	r14, r1
    1370:	06 c0       	rjmp	.+12     	; 0x137e <xQueueReceive+0x8a>
    1372:	ce 01       	movw	r24, r28
    1374:	01 96       	adiw	r24, 0x01	; 1
    1376:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <vTaskInternalSetTimeOutState>
    137a:	ee 24       	eor	r14, r14
    137c:	e3 94       	inc	r14
    137e:	0f 90       	pop	r0
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	2f d6       	rcall	.+3166   	; 0x1fe2 <vTaskSuspendAll>
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	0f 92       	push	r0
    138a:	f8 01       	movw	r30, r16
    138c:	81 a1       	ldd	r24, Z+33	; 0x21
    138e:	8f 3f       	cpi	r24, 0xFF	; 255
    1390:	09 f4       	brne	.+2      	; 0x1394 <xQueueReceive+0xa0>
    1392:	11 a2       	std	Z+33, r1	; 0x21
    1394:	f8 01       	movw	r30, r16
    1396:	82 a1       	ldd	r24, Z+34	; 0x22
    1398:	8f 3f       	cpi	r24, 0xFF	; 255
    139a:	09 f4       	brne	.+2      	; 0x139e <xQueueReceive+0xaa>
    139c:	12 a2       	std	Z+34, r1	; 0x22
    139e:	0f 90       	pop	r0
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	be 01       	movw	r22, r28
    13a4:	6a 5f       	subi	r22, 0xFA	; 250
    13a6:	7f 4f       	sbci	r23, 0xFF	; 255
    13a8:	ce 01       	movw	r24, r28
    13aa:	01 96       	adiw	r24, 0x01	; 1
    13ac:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <xTaskCheckForTimeOut>
    13b0:	81 11       	cpse	r24, r1
    13b2:	17 c0       	rjmp	.+46     	; 0x13e2 <xQueueReceive+0xee>
    13b4:	c8 01       	movw	r24, r16
    13b6:	73 dd       	rcall	.-1306   	; 0xe9e <prvIsQueueEmpty>
    13b8:	88 23       	and	r24, r24
    13ba:	79 f0       	breq	.+30     	; 0x13da <xQueueReceive+0xe6>
    13bc:	4e 81       	ldd	r20, Y+6	; 0x06
    13be:	5f 81       	ldd	r21, Y+7	; 0x07
    13c0:	68 85       	ldd	r22, Y+8	; 0x08
    13c2:	79 85       	ldd	r23, Y+9	; 0x09
    13c4:	c8 01       	movw	r24, r16
    13c6:	43 96       	adiw	r24, 0x13	; 19
    13c8:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <vTaskPlaceOnEventList>
    13cc:	c8 01       	movw	r24, r16
    13ce:	fb dd       	rcall	.-1034   	; 0xfc6 <prvUnlockQueue>
    13d0:	48 d7       	rcall	.+3728   	; 0x2262 <xTaskResumeAll>
    13d2:	81 11       	cpse	r24, r1
    13d4:	a6 cf       	rjmp	.-180    	; 0x1322 <xQueueReceive+0x2e>
    13d6:	9b dc       	rcall	.-1738   	; 0xd0e <vPortYield>
    13d8:	a4 cf       	rjmp	.-184    	; 0x1322 <xQueueReceive+0x2e>
    13da:	c8 01       	movw	r24, r16
    13dc:	f4 dd       	rcall	.-1048   	; 0xfc6 <prvUnlockQueue>
    13de:	41 d7       	rcall	.+3714   	; 0x2262 <xTaskResumeAll>
    13e0:	a0 cf       	rjmp	.-192    	; 0x1322 <xQueueReceive+0x2e>
    13e2:	c8 01       	movw	r24, r16
    13e4:	f0 dd       	rcall	.-1056   	; 0xfc6 <prvUnlockQueue>
    13e6:	3d d7       	rcall	.+3706   	; 0x2262 <xTaskResumeAll>
    13e8:	c8 01       	movw	r24, r16
    13ea:	59 dd       	rcall	.-1358   	; 0xe9e <prvIsQueueEmpty>
    13ec:	88 23       	and	r24, r24
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <xQueueReceive+0xfe>
    13f0:	98 cf       	rjmp	.-208    	; 0x1322 <xQueueReceive+0x2e>
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	29 96       	adiw	r28, 0x09	; 9
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	ff 90       	pop	r15
    140a:	ef 90       	pop	r14
    140c:	df 90       	pop	r13
    140e:	cf 90       	pop	r12
    1410:	08 95       	ret

00001412 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
    1416:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	0f 92       	push	r0
    141e:	89 a1       	ldd	r24, Y+33	; 0x21
    1420:	8f 3f       	cpi	r24, 0xFF	; 255
    1422:	09 f4       	brne	.+2      	; 0x1426 <vQueueWaitForMessageRestricted+0x14>
    1424:	19 a2       	std	Y+33, r1	; 0x21
    1426:	8a a1       	ldd	r24, Y+34	; 0x22
    1428:	8f 3f       	cpi	r24, 0xFF	; 255
    142a:	09 f4       	brne	.+2      	; 0x142e <vQueueWaitForMessageRestricted+0x1c>
    142c:	1a a2       	std	Y+34, r1	; 0x22
    142e:	0f 90       	pop	r0
    1430:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1432:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1434:	81 11       	cpse	r24, r1
    1436:	04 c0       	rjmp	.+8      	; 0x1440 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1438:	ce 01       	movw	r24, r28
    143a:	43 96       	adiw	r24, 0x13	; 19
    143c:	0e 94 53 13 	call	0x26a6	; 0x26a6 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1440:	ce 01       	movw	r24, r28
    1442:	c1 dd       	rcall	.-1150   	; 0xfc6 <prvUnlockQueue>
    }
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	08 95       	ret

0000144a <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    144a:	fc 01       	movw	r30, r24
    144c:	44 81       	ldd	r20, Z+4	; 0x04
    144e:	55 81       	ldd	r21, Z+5	; 0x05
    1450:	22 81       	ldd	r18, Z+2	; 0x02
    1452:	33 81       	ldd	r19, Z+3	; 0x03
    1454:	24 0f       	add	r18, r20
    1456:	35 1f       	adc	r19, r21
    1458:	80 81       	ld	r24, Z
    145a:	91 81       	ldd	r25, Z+1	; 0x01
    145c:	b9 01       	movw	r22, r18
    145e:	68 1b       	sub	r22, r24
    1460:	79 0b       	sbc	r23, r25
    1462:	cb 01       	movw	r24, r22
    1464:	64 17       	cp	r22, r20
    1466:	75 07       	cpc	r23, r21
    1468:	10 f0       	brcs	.+4      	; 0x146e <prvBytesInBuffer+0x24>
    146a:	84 1b       	sub	r24, r20
    146c:	95 0b       	sbc	r25, r21
    146e:	08 95       	ret

00001470 <prvInitialiseNewStreamBuffer>:
    1470:	0f 93       	push	r16
    1472:	fc 01       	movw	r30, r24
    1474:	8f e0       	ldi	r24, 0x0F	; 15
    1476:	df 01       	movw	r26, r30
    1478:	1d 92       	st	X+, r1
    147a:	8a 95       	dec	r24
    147c:	e9 f7       	brne	.-6      	; 0x1478 <prvInitialiseNewStreamBuffer+0x8>
    147e:	75 87       	std	Z+13, r23	; 0x0d
    1480:	64 87       	std	Z+12, r22	; 0x0c
    1482:	55 83       	std	Z+5, r21	; 0x05
    1484:	44 83       	std	Z+4, r20	; 0x04
    1486:	37 83       	std	Z+7, r19	; 0x07
    1488:	26 83       	std	Z+6, r18	; 0x06
    148a:	06 87       	std	Z+14, r16	; 0x0e
    148c:	0f 91       	pop	r16
    148e:	08 95       	ret

00001490 <prvWriteBytesToBuffer>:
    1490:	af 92       	push	r10
    1492:	bf 92       	push	r11
    1494:	cf 92       	push	r12
    1496:	df 92       	push	r13
    1498:	ef 92       	push	r14
    149a:	ff 92       	push	r15
    149c:	0f 93       	push	r16
    149e:	1f 93       	push	r17
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
    14a4:	6c 01       	movw	r12, r24
    14a6:	5b 01       	movw	r10, r22
    14a8:	7a 01       	movw	r14, r20
    14aa:	fc 01       	movw	r30, r24
    14ac:	c2 81       	ldd	r28, Z+2	; 0x02
    14ae:	d3 81       	ldd	r29, Z+3	; 0x03
    14b0:	04 81       	ldd	r16, Z+4	; 0x04
    14b2:	15 81       	ldd	r17, Z+5	; 0x05
    14b4:	0c 1b       	sub	r16, r28
    14b6:	1d 0b       	sbc	r17, r29
    14b8:	40 17       	cp	r20, r16
    14ba:	51 07       	cpc	r21, r17
    14bc:	08 f4       	brcc	.+2      	; 0x14c0 <prvWriteBytesToBuffer+0x30>
    14be:	8a 01       	movw	r16, r20
    14c0:	f6 01       	movw	r30, r12
    14c2:	84 85       	ldd	r24, Z+12	; 0x0c
    14c4:	95 85       	ldd	r25, Z+13	; 0x0d
    14c6:	a8 01       	movw	r20, r16
    14c8:	b5 01       	movw	r22, r10
    14ca:	8c 0f       	add	r24, r28
    14cc:	9d 1f       	adc	r25, r29
    14ce:	0e 94 b7 33 	call	0x676e	; 0x676e <memcpy>
    14d2:	0e 15       	cp	r16, r14
    14d4:	1f 05       	cpc	r17, r15
    14d6:	58 f4       	brcc	.+22     	; 0x14ee <prvWriteBytesToBuffer+0x5e>
    14d8:	a7 01       	movw	r20, r14
    14da:	40 1b       	sub	r20, r16
    14dc:	51 0b       	sbc	r21, r17
    14de:	b5 01       	movw	r22, r10
    14e0:	60 0f       	add	r22, r16
    14e2:	71 1f       	adc	r23, r17
    14e4:	f6 01       	movw	r30, r12
    14e6:	84 85       	ldd	r24, Z+12	; 0x0c
    14e8:	95 85       	ldd	r25, Z+13	; 0x0d
    14ea:	0e 94 b7 33 	call	0x676e	; 0x676e <memcpy>
    14ee:	ce 01       	movw	r24, r28
    14f0:	8e 0d       	add	r24, r14
    14f2:	9f 1d       	adc	r25, r15
    14f4:	f6 01       	movw	r30, r12
    14f6:	24 81       	ldd	r18, Z+4	; 0x04
    14f8:	35 81       	ldd	r19, Z+5	; 0x05
    14fa:	82 17       	cp	r24, r18
    14fc:	93 07       	cpc	r25, r19
    14fe:	10 f0       	brcs	.+4      	; 0x1504 <prvWriteBytesToBuffer+0x74>
    1500:	82 1b       	sub	r24, r18
    1502:	93 0b       	sbc	r25, r19
    1504:	f6 01       	movw	r30, r12
    1506:	93 83       	std	Z+3, r25	; 0x03
    1508:	82 83       	std	Z+2, r24	; 0x02
    150a:	c7 01       	movw	r24, r14
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	1f 91       	pop	r17
    1512:	0f 91       	pop	r16
    1514:	ff 90       	pop	r15
    1516:	ef 90       	pop	r14
    1518:	df 90       	pop	r13
    151a:	cf 90       	pop	r12
    151c:	bf 90       	pop	r11
    151e:	af 90       	pop	r10
    1520:	08 95       	ret

00001522 <prvWriteMessageToBuffer>:
    1522:	cf 92       	push	r12
    1524:	df 92       	push	r13
    1526:	ef 92       	push	r14
    1528:	ff 92       	push	r15
    152a:	0f 93       	push	r16
    152c:	1f 93       	push	r17
    152e:	cf 93       	push	r28
    1530:	df 93       	push	r29
    1532:	1f 92       	push	r1
    1534:	1f 92       	push	r1
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	7c 01       	movw	r14, r24
    153c:	6b 01       	movw	r12, r22
    153e:	5a 83       	std	Y+2, r21	; 0x02
    1540:	49 83       	std	Y+1, r20	; 0x01
    1542:	21 15       	cp	r18, r1
    1544:	31 05       	cpc	r19, r1
    1546:	c1 f0       	breq	.+48     	; 0x1578 <prvWriteMessageToBuffer+0x56>
    1548:	fc 01       	movw	r30, r24
    154a:	86 85       	ldd	r24, Z+14	; 0x0e
    154c:	80 fd       	sbrc	r24, 0
    154e:	08 c0       	rjmp	.+16     	; 0x1560 <prvWriteMessageToBuffer+0x3e>
    1550:	42 17       	cp	r20, r18
    1552:	53 07       	cpc	r21, r19
    1554:	08 f4       	brcc	.+2      	; 0x1558 <prvWriteMessageToBuffer+0x36>
    1556:	9a 01       	movw	r18, r20
    1558:	3a 83       	std	Y+2, r19	; 0x02
    155a:	29 83       	std	Y+1, r18	; 0x01
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	0f c0       	rjmp	.+30     	; 0x157e <prvWriteMessageToBuffer+0x5c>
    1560:	20 17       	cp	r18, r16
    1562:	31 07       	cpc	r19, r17
    1564:	58 f0       	brcs	.+22     	; 0x157c <prvWriteMessageToBuffer+0x5a>
    1566:	42 e0       	ldi	r20, 0x02	; 2
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	be 01       	movw	r22, r28
    156c:	6f 5f       	subi	r22, 0xFF	; 255
    156e:	7f 4f       	sbci	r23, 0xFF	; 255
    1570:	c7 01       	movw	r24, r14
    1572:	8e df       	rcall	.-228    	; 0x1490 <prvWriteBytesToBuffer>
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	03 c0       	rjmp	.+6      	; 0x157e <prvWriteMessageToBuffer+0x5c>
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	01 c0       	rjmp	.+2      	; 0x157e <prvWriteMessageToBuffer+0x5c>
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	88 23       	and	r24, r24
    1580:	31 f0       	breq	.+12     	; 0x158e <prvWriteMessageToBuffer+0x6c>
    1582:	49 81       	ldd	r20, Y+1	; 0x01
    1584:	5a 81       	ldd	r21, Y+2	; 0x02
    1586:	b6 01       	movw	r22, r12
    1588:	c7 01       	movw	r24, r14
    158a:	82 df       	rcall	.-252    	; 0x1490 <prvWriteBytesToBuffer>
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <prvWriteMessageToBuffer+0x70>
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	1f 91       	pop	r17
    159c:	0f 91       	pop	r16
    159e:	ff 90       	pop	r15
    15a0:	ef 90       	pop	r14
    15a2:	df 90       	pop	r13
    15a4:	cf 90       	pop	r12
    15a6:	08 95       	ret

000015a8 <prvReadBytesFromBuffer>:
    15a8:	af 92       	push	r10
    15aa:	bf 92       	push	r11
    15ac:	cf 92       	push	r12
    15ae:	df 92       	push	r13
    15b0:	ef 92       	push	r14
    15b2:	ff 92       	push	r15
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	7c 01       	movw	r14, r24
    15be:	5b 01       	movw	r10, r22
    15c0:	e9 01       	movw	r28, r18
    15c2:	42 17       	cp	r20, r18
    15c4:	53 07       	cpc	r21, r19
    15c6:	08 f4       	brcc	.+2      	; 0x15ca <prvReadBytesFromBuffer+0x22>
    15c8:	ea 01       	movw	r28, r20
    15ca:	20 97       	sbiw	r28, 0x00	; 0
    15cc:	81 f1       	breq	.+96     	; 0x162e <prvReadBytesFromBuffer+0x86>
    15ce:	f7 01       	movw	r30, r14
    15d0:	00 81       	ld	r16, Z
    15d2:	11 81       	ldd	r17, Z+1	; 0x01
    15d4:	84 81       	ldd	r24, Z+4	; 0x04
    15d6:	95 81       	ldd	r25, Z+5	; 0x05
    15d8:	80 1b       	sub	r24, r16
    15da:	91 0b       	sbc	r25, r17
    15dc:	6e 01       	movw	r12, r28
    15de:	8c 17       	cp	r24, r28
    15e0:	9d 07       	cpc	r25, r29
    15e2:	08 f4       	brcc	.+2      	; 0x15e6 <prvReadBytesFromBuffer+0x3e>
    15e4:	6c 01       	movw	r12, r24
    15e6:	f7 01       	movw	r30, r14
    15e8:	64 85       	ldd	r22, Z+12	; 0x0c
    15ea:	75 85       	ldd	r23, Z+13	; 0x0d
    15ec:	60 0f       	add	r22, r16
    15ee:	71 1f       	adc	r23, r17
    15f0:	a6 01       	movw	r20, r12
    15f2:	c5 01       	movw	r24, r10
    15f4:	0e 94 b7 33 	call	0x676e	; 0x676e <memcpy>
    15f8:	cc 16       	cp	r12, r28
    15fa:	dd 06       	cpc	r13, r29
    15fc:	58 f4       	brcc	.+22     	; 0x1614 <prvReadBytesFromBuffer+0x6c>
    15fe:	ae 01       	movw	r20, r28
    1600:	4c 19       	sub	r20, r12
    1602:	5d 09       	sbc	r21, r13
    1604:	f7 01       	movw	r30, r14
    1606:	64 85       	ldd	r22, Z+12	; 0x0c
    1608:	75 85       	ldd	r23, Z+13	; 0x0d
    160a:	c5 01       	movw	r24, r10
    160c:	8c 0d       	add	r24, r12
    160e:	9d 1d       	adc	r25, r13
    1610:	0e 94 b7 33 	call	0x676e	; 0x676e <memcpy>
    1614:	0c 0f       	add	r16, r28
    1616:	1d 1f       	adc	r17, r29
    1618:	f7 01       	movw	r30, r14
    161a:	84 81       	ldd	r24, Z+4	; 0x04
    161c:	95 81       	ldd	r25, Z+5	; 0x05
    161e:	08 17       	cp	r16, r24
    1620:	19 07       	cpc	r17, r25
    1622:	10 f0       	brcs	.+4      	; 0x1628 <prvReadBytesFromBuffer+0x80>
    1624:	08 1b       	sub	r16, r24
    1626:	19 0b       	sbc	r17, r25
    1628:	f7 01       	movw	r30, r14
    162a:	11 83       	std	Z+1, r17	; 0x01
    162c:	00 83       	st	Z, r16
    162e:	ce 01       	movw	r24, r28
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	1f 91       	pop	r17
    1636:	0f 91       	pop	r16
    1638:	ff 90       	pop	r15
    163a:	ef 90       	pop	r14
    163c:	df 90       	pop	r13
    163e:	cf 90       	pop	r12
    1640:	bf 90       	pop	r11
    1642:	af 90       	pop	r10
    1644:	08 95       	ret

00001646 <prvReadMessageFromBuffer>:
    1646:	6f 92       	push	r6
    1648:	7f 92       	push	r7
    164a:	8f 92       	push	r8
    164c:	9f 92       	push	r9
    164e:	af 92       	push	r10
    1650:	bf 92       	push	r11
    1652:	cf 92       	push	r12
    1654:	df 92       	push	r13
    1656:	ef 92       	push	r14
    1658:	ff 92       	push	r15
    165a:	0f 93       	push	r16
    165c:	1f 93       	push	r17
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	1f 92       	push	r1
    1664:	1f 92       	push	r1
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	6c 01       	movw	r12, r24
    166c:	4b 01       	movw	r8, r22
    166e:	5a 01       	movw	r10, r20
    1670:	79 01       	movw	r14, r18
    1672:	01 15       	cp	r16, r1
    1674:	11 05       	cpc	r17, r1
    1676:	b1 f0       	breq	.+44     	; 0x16a4 <prvReadMessageFromBuffer+0x5e>
    1678:	fc 01       	movw	r30, r24
    167a:	60 80       	ld	r6, Z
    167c:	71 80       	ldd	r7, Z+1	; 0x01
    167e:	a8 01       	movw	r20, r16
    1680:	be 01       	movw	r22, r28
    1682:	6f 5f       	subi	r22, 0xFF	; 255
    1684:	7f 4f       	sbci	r23, 0xFF	; 255
    1686:	90 df       	rcall	.-224    	; 0x15a8 <prvReadBytesFromBuffer>
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	9a 81       	ldd	r25, Y+2	; 0x02
    168c:	e0 1a       	sub	r14, r16
    168e:	f1 0a       	sbc	r15, r17
    1690:	a8 16       	cp	r10, r24
    1692:	b9 06       	cpc	r11, r25
    1694:	30 f4       	brcc	.+12     	; 0x16a2 <prvReadMessageFromBuffer+0x5c>
    1696:	f6 01       	movw	r30, r12
    1698:	71 82       	std	Z+1, r7	; 0x01
    169a:	60 82       	st	Z, r6
    169c:	a1 2c       	mov	r10, r1
    169e:	b1 2c       	mov	r11, r1
    16a0:	01 c0       	rjmp	.+2      	; 0x16a4 <prvReadMessageFromBuffer+0x5e>
    16a2:	5c 01       	movw	r10, r24
    16a4:	97 01       	movw	r18, r14
    16a6:	a5 01       	movw	r20, r10
    16a8:	b4 01       	movw	r22, r8
    16aa:	c6 01       	movw	r24, r12
    16ac:	7d df       	rcall	.-262    	; 0x15a8 <prvReadBytesFromBuffer>
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	1f 91       	pop	r17
    16b8:	0f 91       	pop	r16
    16ba:	ff 90       	pop	r15
    16bc:	ef 90       	pop	r14
    16be:	df 90       	pop	r13
    16c0:	cf 90       	pop	r12
    16c2:	bf 90       	pop	r11
    16c4:	af 90       	pop	r10
    16c6:	9f 90       	pop	r9
    16c8:	8f 90       	pop	r8
    16ca:	7f 90       	pop	r7
    16cc:	6f 90       	pop	r6
    16ce:	08 95       	ret

000016d0 <xStreamBufferGenericCreate>:
    16d0:	cf 92       	push	r12
    16d2:	df 92       	push	r13
    16d4:	ef 92       	push	r14
    16d6:	ff 92       	push	r15
    16d8:	0f 93       	push	r16
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	ec 01       	movw	r28, r24
    16e0:	6b 01       	movw	r12, r22
    16e2:	41 30       	cpi	r20, 0x01	; 1
    16e4:	11 f4       	brne	.+4      	; 0x16ea <xStreamBufferGenericCreate+0x1a>
    16e6:	01 e0       	ldi	r16, 0x01	; 1
    16e8:	01 c0       	rjmp	.+2      	; 0x16ec <xStreamBufferGenericCreate+0x1c>
    16ea:	00 e0       	ldi	r16, 0x00	; 0
    16ec:	c1 14       	cp	r12, r1
    16ee:	d1 04       	cpc	r13, r1
    16f0:	19 f4       	brne	.+6      	; 0x16f8 <xStreamBufferGenericCreate+0x28>
    16f2:	cc 24       	eor	r12, r12
    16f4:	c3 94       	inc	r12
    16f6:	d1 2c       	mov	r13, r1
    16f8:	ce 01       	movw	r24, r28
    16fa:	40 96       	adiw	r24, 0x10	; 16
    16fc:	c8 17       	cp	r28, r24
    16fe:	d9 07       	cpc	r29, r25
    1700:	20 f4       	brcc	.+8      	; 0x170a <xStreamBufferGenericCreate+0x3a>
    1702:	21 96       	adiw	r28, 0x01	; 1
    1704:	50 d9       	rcall	.-3424   	; 0x9a6 <pvPortMalloc>
    1706:	7c 01       	movw	r14, r24
    1708:	02 c0       	rjmp	.+4      	; 0x170e <xStreamBufferGenericCreate+0x3e>
    170a:	e1 2c       	mov	r14, r1
    170c:	f1 2c       	mov	r15, r1
    170e:	e1 14       	cp	r14, r1
    1710:	f1 04       	cpc	r15, r1
    1712:	39 f0       	breq	.+14     	; 0x1722 <xStreamBufferGenericCreate+0x52>
    1714:	96 01       	movw	r18, r12
    1716:	ae 01       	movw	r20, r28
    1718:	b7 01       	movw	r22, r14
    171a:	61 5f       	subi	r22, 0xF1	; 241
    171c:	7f 4f       	sbci	r23, 0xFF	; 255
    171e:	c7 01       	movw	r24, r14
    1720:	a7 de       	rcall	.-690    	; 0x1470 <prvInitialiseNewStreamBuffer>
    1722:	c7 01       	movw	r24, r14
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	0f 91       	pop	r16
    172a:	ff 90       	pop	r15
    172c:	ef 90       	pop	r14
    172e:	df 90       	pop	r13
    1730:	cf 90       	pop	r12
    1732:	08 95       	ret

00001734 <xStreamBufferReset>:
    1734:	0f 93       	push	r16
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	0f 92       	push	r0
    173c:	fc 01       	movw	r30, r24
    173e:	20 85       	ldd	r18, Z+8	; 0x08
    1740:	31 85       	ldd	r19, Z+9	; 0x09
    1742:	23 2b       	or	r18, r19
    1744:	71 f4       	brne	.+28     	; 0x1762 <xStreamBufferReset+0x2e>
    1746:	22 85       	ldd	r18, Z+10	; 0x0a
    1748:	33 85       	ldd	r19, Z+11	; 0x0b
    174a:	23 2b       	or	r18, r19
    174c:	61 f4       	brne	.+24     	; 0x1766 <xStreamBufferReset+0x32>
    174e:	26 81       	ldd	r18, Z+6	; 0x06
    1750:	37 81       	ldd	r19, Z+7	; 0x07
    1752:	44 81       	ldd	r20, Z+4	; 0x04
    1754:	55 81       	ldd	r21, Z+5	; 0x05
    1756:	64 85       	ldd	r22, Z+12	; 0x0c
    1758:	75 85       	ldd	r23, Z+13	; 0x0d
    175a:	06 85       	ldd	r16, Z+14	; 0x0e
    175c:	89 de       	rcall	.-750    	; 0x1470 <prvInitialiseNewStreamBuffer>
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	03 c0       	rjmp	.+6      	; 0x1768 <xStreamBufferReset+0x34>
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <xStreamBufferReset+0x34>
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	0f 90       	pop	r0
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	0f 91       	pop	r16
    176e:	08 95       	ret

00001770 <xStreamBufferSpacesAvailable>:
    1770:	fc 01       	movw	r30, r24
    1772:	24 81       	ldd	r18, Z+4	; 0x04
    1774:	35 81       	ldd	r19, Z+5	; 0x05
    1776:	80 81       	ld	r24, Z
    1778:	91 81       	ldd	r25, Z+1	; 0x01
    177a:	82 0f       	add	r24, r18
    177c:	93 1f       	adc	r25, r19
    177e:	42 81       	ldd	r20, Z+2	; 0x02
    1780:	53 81       	ldd	r21, Z+3	; 0x03
    1782:	84 1b       	sub	r24, r20
    1784:	95 0b       	sbc	r25, r21
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	82 17       	cp	r24, r18
    178a:	93 07       	cpc	r25, r19
    178c:	10 f0       	brcs	.+4      	; 0x1792 <xStreamBufferSpacesAvailable+0x22>
    178e:	82 1b       	sub	r24, r18
    1790:	93 0b       	sbc	r25, r19
    1792:	08 95       	ret

00001794 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1794:	2f 92       	push	r2
    1796:	3f 92       	push	r3
    1798:	4f 92       	push	r4
    179a:	5f 92       	push	r5
    179c:	6f 92       	push	r6
    179e:	7f 92       	push	r7
    17a0:	8f 92       	push	r8
    17a2:	9f 92       	push	r9
    17a4:	af 92       	push	r10
    17a6:	bf 92       	push	r11
    17a8:	cf 92       	push	r12
    17aa:	df 92       	push	r13
    17ac:	ef 92       	push	r14
    17ae:	ff 92       	push	r15
    17b0:	0f 93       	push	r16
    17b2:	1f 93       	push	r17
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	2b 97       	sbiw	r28, 0x0b	; 11
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	cd bf       	out	0x3d, r28	; 61
    17c8:	4c 01       	movw	r8, r24
    17ca:	7b 87       	std	Y+11, r23	; 0x0b
    17cc:	6a 87       	std	Y+10, r22	; 0x0a
    17ce:	1a 01       	movw	r2, r20
    17d0:	0e 83       	std	Y+6, r16	; 0x06
    17d2:	1f 83       	std	Y+7, r17	; 0x07
    17d4:	28 87       	std	Y+8, r18	; 0x08
    17d6:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    17d8:	fc 01       	movw	r30, r24
    17da:	84 81       	ldd	r24, Z+4	; 0x04
    17dc:	95 81       	ldd	r25, Z+5	; 0x05
    17de:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    17e0:	26 85       	ldd	r18, Z+14	; 0x0e
    17e2:	20 ff       	sbrs	r18, 0
    17e4:	0c c0       	rjmp	.+24     	; 0x17fe <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    17e6:	2a 01       	movw	r4, r20
    17e8:	f2 e0       	ldi	r31, 0x02	; 2
    17ea:	4f 0e       	add	r4, r31
    17ec:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    17ee:	84 15       	cp	r24, r4
    17f0:	95 05       	cpc	r25, r5
    17f2:	58 f4       	brcc	.+22     	; 0x180a <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    17f4:	1e 82       	std	Y+6, r1	; 0x06
    17f6:	1f 82       	std	Y+7, r1	; 0x07
    17f8:	18 86       	std	Y+8, r1	; 0x08
    17fa:	19 86       	std	Y+9, r1	; 0x09
    17fc:	06 c0       	rjmp	.+12     	; 0x180a <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    17fe:	84 17       	cp	r24, r20
    1800:	95 07       	cpc	r25, r21
    1802:	10 f0       	brcs	.+4      	; 0x1808 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1804:	2a 01       	movw	r4, r20
    1806:	01 c0       	rjmp	.+2      	; 0x180a <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1808:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    180a:	8e 81       	ldd	r24, Y+6	; 0x06
    180c:	9f 81       	ldd	r25, Y+7	; 0x07
    180e:	a8 85       	ldd	r26, Y+8	; 0x08
    1810:	b9 85       	ldd	r27, Y+9	; 0x09
    1812:	89 2b       	or	r24, r25
    1814:	8a 2b       	or	r24, r26
    1816:	8b 2b       	or	r24, r27
    1818:	09 f4       	brne	.+2      	; 0x181c <xStreamBufferSend+0x88>
    181a:	38 c0       	rjmp	.+112    	; 0x188c <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    181c:	ce 01       	movw	r24, r28
    181e:	01 96       	adiw	r24, 0x01	; 1
    1820:	0e 94 de 14 	call	0x29bc	; 0x29bc <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    182a:	c4 01       	movw	r24, r8
    182c:	a1 df       	rcall	.-190    	; 0x1770 <xStreamBufferSpacesAvailable>
    182e:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1830:	84 15       	cp	r24, r4
    1832:	95 05       	cpc	r25, r5
    1834:	40 f5       	brcc	.+80     	; 0x1886 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1836:	60 e0       	ldi	r22, 0x00	; 0
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	0e 94 c7 18 	call	0x318e	; 0x318e <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1840:	0e 94 6f 15 	call	0x2ade	; 0x2ade <xTaskGetCurrentTaskHandle>
    1844:	f4 01       	movw	r30, r8
    1846:	93 87       	std	Z+11, r25	; 0x0b
    1848:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    184a:	0f 90       	pop	r0
    184c:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    184e:	ae 80       	ldd	r10, Y+6	; 0x06
    1850:	bf 80       	ldd	r11, Y+7	; 0x07
    1852:	c8 84       	ldd	r12, Y+8	; 0x08
    1854:	d9 84       	ldd	r13, Y+9	; 0x09
    1856:	e1 2c       	mov	r14, r1
    1858:	f1 2c       	mov	r15, r1
    185a:	00 e0       	ldi	r16, 0x00	; 0
    185c:	10 e0       	ldi	r17, 0x00	; 0
    185e:	98 01       	movw	r18, r16
    1860:	40 e0       	ldi	r20, 0x00	; 0
    1862:	50 e0       	ldi	r21, 0x00	; 0
    1864:	ba 01       	movw	r22, r20
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    186c:	f4 01       	movw	r30, r8
    186e:	13 86       	std	Z+11, r1	; 0x0b
    1870:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1872:	be 01       	movw	r22, r28
    1874:	6a 5f       	subi	r22, 0xFA	; 250
    1876:	7f 4f       	sbci	r23, 0xFF	; 255
    1878:	ce 01       	movw	r24, r28
    187a:	01 96       	adiw	r24, 0x01	; 1
    187c:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <xTaskCheckForTimeOut>
    1880:	88 23       	and	r24, r24
    1882:	81 f2       	breq	.-96     	; 0x1824 <xStreamBufferSend+0x90>
    1884:	05 c0       	rjmp	.+10     	; 0x1890 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1886:	0f 90       	pop	r0
    1888:	0f be       	out	0x3f, r0	; 63
                    break;
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    188c:	61 2c       	mov	r6, r1
    188e:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1890:	61 14       	cp	r6, r1
    1892:	71 04       	cpc	r7, r1
    1894:	19 f4       	brne	.+6      	; 0x189c <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1896:	c4 01       	movw	r24, r8
    1898:	6b df       	rcall	.-298    	; 0x1770 <xStreamBufferSpacesAvailable>
    189a:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    189c:	82 01       	movw	r16, r4
    189e:	93 01       	movw	r18, r6
    18a0:	a1 01       	movw	r20, r2
    18a2:	6a 85       	ldd	r22, Y+10	; 0x0a
    18a4:	7b 85       	ldd	r23, Y+11	; 0x0b
    18a6:	c4 01       	movw	r24, r8
    18a8:	3c de       	rcall	.-904    	; 0x1522 <prvWriteMessageToBuffer>
    18aa:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    18ac:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    18ae:	e9 f0       	breq	.+58     	; 0x18ea <xStreamBufferSend+0x156>
    18b0:	c4 01       	movw	r24, r8
    18b2:	cb dd       	rcall	.-1130   	; 0x144a <prvBytesInBuffer>
    18b4:	f4 01       	movw	r30, r8
    18b6:	26 81       	ldd	r18, Z+6	; 0x06
    18b8:	37 81       	ldd	r19, Z+7	; 0x07
    18ba:	82 17       	cp	r24, r18
    18bc:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    18be:	a8 f0       	brcs	.+42     	; 0x18ea <xStreamBufferSend+0x156>
    18c0:	90 d3       	rcall	.+1824   	; 0x1fe2 <vTaskSuspendAll>
    18c2:	f4 01       	movw	r30, r8
    18c4:	80 85       	ldd	r24, Z+8	; 0x08
    18c6:	91 85       	ldd	r25, Z+9	; 0x09
    18c8:	89 2b       	or	r24, r25
    18ca:	71 f0       	breq	.+28     	; 0x18e8 <xStreamBufferSend+0x154>
    18cc:	80 85       	ldd	r24, Z+8	; 0x08
    18ce:	91 85       	ldd	r25, Z+9	; 0x09
    18d0:	e1 2c       	mov	r14, r1
    18d2:	f1 2c       	mov	r15, r1
    18d4:	00 e0       	ldi	r16, 0x00	; 0
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	a9 01       	movw	r20, r18
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <xTaskGenericNotify>
    18e2:	f4 01       	movw	r30, r8
    18e4:	11 86       	std	Z+9, r1	; 0x09
    18e6:	10 86       	std	Z+8, r1	; 0x08
    18e8:	bc d4       	rcall	.+2424   	; 0x2262 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    18ea:	c6 01       	movw	r24, r12
    18ec:	2b 96       	adiw	r28, 0x0b	; 11
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	1f 91       	pop	r17
    18fe:	0f 91       	pop	r16
    1900:	ff 90       	pop	r15
    1902:	ef 90       	pop	r14
    1904:	df 90       	pop	r13
    1906:	cf 90       	pop	r12
    1908:	bf 90       	pop	r11
    190a:	af 90       	pop	r10
    190c:	9f 90       	pop	r9
    190e:	8f 90       	pop	r8
    1910:	7f 90       	pop	r7
    1912:	6f 90       	pop	r6
    1914:	5f 90       	pop	r5
    1916:	4f 90       	pop	r4
    1918:	3f 90       	pop	r3
    191a:	2f 90       	pop	r2
    191c:	08 95       	ret

0000191e <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    191e:	af 92       	push	r10
    1920:	bf 92       	push	r11
    1922:	cf 92       	push	r12
    1924:	df 92       	push	r13
    1926:	ef 92       	push	r14
    1928:	ff 92       	push	r15
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	ec 01       	movw	r28, r24
    1934:	7b 01       	movw	r14, r22
    1936:	5a 01       	movw	r10, r20
    1938:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    193a:	8e 85       	ldd	r24, Y+14	; 0x0e
    193c:	80 ff       	sbrs	r24, 0
    193e:	04 c0       	rjmp	.+8      	; 0x1948 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1940:	8a 01       	movw	r16, r20
    1942:	0e 5f       	subi	r16, 0xFE	; 254
    1944:	1f 4f       	sbci	r17, 0xFF	; 255
    1946:	01 c0       	rjmp	.+2      	; 0x194a <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1948:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    194a:	ce 01       	movw	r24, r28
    194c:	11 df       	rcall	.-478    	; 0x1770 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    194e:	9c 01       	movw	r18, r24
    1950:	a5 01       	movw	r20, r10
    1952:	b7 01       	movw	r22, r14
    1954:	ce 01       	movw	r24, r28
    1956:	e5 dd       	rcall	.-1078   	; 0x1522 <prvWriteMessageToBuffer>
    1958:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    195a:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    195c:	c1 f0       	breq	.+48     	; 0x198e <xStreamBufferSendFromISR+0x70>
    195e:	ce 01       	movw	r24, r28
    1960:	74 dd       	rcall	.-1304   	; 0x144a <prvBytesInBuffer>
    1962:	2e 81       	ldd	r18, Y+6	; 0x06
    1964:	3f 81       	ldd	r19, Y+7	; 0x07
    1966:	82 17       	cp	r24, r18
    1968:	93 07       	cpc	r25, r19
    196a:	88 f0       	brcs	.+34     	; 0x198e <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    196c:	88 85       	ldd	r24, Y+8	; 0x08
    196e:	99 85       	ldd	r25, Y+9	; 0x09
    1970:	89 2b       	or	r24, r25
    1972:	69 f0       	breq	.+26     	; 0x198e <xStreamBufferSendFromISR+0x70>
    1974:	88 85       	ldd	r24, Y+8	; 0x08
    1976:	99 85       	ldd	r25, Y+9	; 0x09
    1978:	e1 2c       	mov	r14, r1
    197a:	f1 2c       	mov	r15, r1
    197c:	00 e0       	ldi	r16, 0x00	; 0
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	a9 01       	movw	r20, r18
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <xTaskGenericNotifyFromISR>
    198a:	19 86       	std	Y+9, r1	; 0x09
    198c:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    198e:	c5 01       	movw	r24, r10
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	1f 91       	pop	r17
    1996:	0f 91       	pop	r16
    1998:	ff 90       	pop	r15
    199a:	ef 90       	pop	r14
    199c:	df 90       	pop	r13
    199e:	cf 90       	pop	r12
    19a0:	bf 90       	pop	r11
    19a2:	af 90       	pop	r10
    19a4:	08 95       	ret

000019a6 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    19a6:	4f 92       	push	r4
    19a8:	5f 92       	push	r5
    19aa:	6f 92       	push	r6
    19ac:	7f 92       	push	r7
    19ae:	8f 92       	push	r8
    19b0:	9f 92       	push	r9
    19b2:	af 92       	push	r10
    19b4:	bf 92       	push	r11
    19b6:	cf 92       	push	r12
    19b8:	df 92       	push	r13
    19ba:	ef 92       	push	r14
    19bc:	ff 92       	push	r15
    19be:	0f 93       	push	r16
    19c0:	1f 93       	push	r17
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	ec 01       	movw	r28, r24
    19c8:	2b 01       	movw	r4, r22
    19ca:	3a 01       	movw	r6, r20
    19cc:	58 01       	movw	r10, r16
    19ce:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    19d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    19d2:	80 ff       	sbrs	r24, 0
    19d4:	05 c0       	rjmp	.+10     	; 0x19e0 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    19d6:	68 94       	set
    19d8:	88 24       	eor	r8, r8
    19da:	81 f8       	bld	r8, 1
    19dc:	91 2c       	mov	r9, r1
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    19e0:	81 2c       	mov	r8, r1
    19e2:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    19e4:	a1 14       	cp	r10, r1
    19e6:	b1 04       	cpc	r11, r1
    19e8:	c1 04       	cpc	r12, r1
    19ea:	d1 04       	cpc	r13, r1
    19ec:	41 f1       	breq	.+80     	; 0x1a3e <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    19f4:	ce 01       	movw	r24, r28
    19f6:	29 dd       	rcall	.-1454   	; 0x144a <prvBytesInBuffer>
    19f8:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    19fa:	88 16       	cp	r8, r24
    19fc:	99 06       	cpc	r9, r25
    19fe:	48 f0       	brcs	.+18     	; 0x1a12 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1a00:	60 e0       	ldi	r22, 0x00	; 0
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 94 c7 18 	call	0x318e	; 0x318e <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1a0a:	0e 94 6f 15 	call	0x2ade	; 0x2ade <xTaskGetCurrentTaskHandle>
    1a0e:	99 87       	std	Y+9, r25	; 0x09
    1a10:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1a12:	0f 90       	pop	r0
    1a14:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1a16:	8e 14       	cp	r8, r14
    1a18:	9f 04       	cpc	r9, r15
    1a1a:	a0 f0       	brcs	.+40     	; 0x1a44 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1a1c:	e1 2c       	mov	r14, r1
    1a1e:	f1 2c       	mov	r15, r1
    1a20:	00 e0       	ldi	r16, 0x00	; 0
    1a22:	10 e0       	ldi	r17, 0x00	; 0
    1a24:	98 01       	movw	r18, r16
    1a26:	40 e0       	ldi	r20, 0x00	; 0
    1a28:	50 e0       	ldi	r21, 0x00	; 0
    1a2a:	ba 01       	movw	r22, r20
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1a32:	19 86       	std	Y+9, r1	; 0x09
    1a34:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1a36:	ce 01       	movw	r24, r28
    1a38:	08 dd       	rcall	.-1520   	; 0x144a <prvBytesInBuffer>
    1a3a:	7c 01       	movw	r14, r24
    1a3c:	03 c0       	rjmp	.+6      	; 0x1a44 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1a3e:	ce 01       	movw	r24, r28
    1a40:	04 dd       	rcall	.-1528   	; 0x144a <prvBytesInBuffer>
    1a42:	7c 01       	movw	r14, r24
    1a44:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1a46:	9f 04       	cpc	r9, r15
    1a48:	e8 f4       	brcc	.+58     	; 0x1a84 <xStreamBufferReceive+0xde>
    1a4a:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1a4c:	97 01       	movw	r18, r14
    1a4e:	a3 01       	movw	r20, r6
    1a50:	b2 01       	movw	r22, r4
    1a52:	ce 01       	movw	r24, r28
    1a54:	f8 dd       	rcall	.-1040   	; 0x1646 <prvReadMessageFromBuffer>
    1a56:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1a58:	89 2b       	or	r24, r25
    1a5a:	b1 f0       	breq	.+44     	; 0x1a88 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1a5c:	c2 d2       	rcall	.+1412   	; 0x1fe2 <vTaskSuspendAll>
    1a5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a60:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a62:	89 2b       	or	r24, r25
    1a64:	69 f0       	breq	.+26     	; 0x1a80 <xStreamBufferReceive+0xda>
    1a66:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a68:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a6a:	e1 2c       	mov	r14, r1
    1a6c:	f1 2c       	mov	r15, r1
    1a6e:	00 e0       	ldi	r16, 0x00	; 0
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	a9 01       	movw	r20, r18
    1a76:	60 e0       	ldi	r22, 0x00	; 0
    1a78:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <xTaskGenericNotify>
    1a7c:	1b 86       	std	Y+11, r1	; 0x0b
    1a7e:	1a 86       	std	Y+10, r1	; 0x0a
    1a80:	f0 d3       	rcall	.+2016   	; 0x2262 <xTaskResumeAll>
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <xStreamBufferReceive+0xe2>
    1a84:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1a86:	d1 2c       	mov	r13, r1
    1a88:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1a8a:	df 91       	pop	r29
    1a8c:	cf 91       	pop	r28
    1a8e:	1f 91       	pop	r17
    1a90:	0f 91       	pop	r16
    1a92:	ff 90       	pop	r15
    1a94:	ef 90       	pop	r14
    1a96:	df 90       	pop	r13
    1a98:	cf 90       	pop	r12
    1a9a:	bf 90       	pop	r11
    1a9c:	af 90       	pop	r10
    1a9e:	9f 90       	pop	r9
    1aa0:	8f 90       	pop	r8
    1aa2:	7f 90       	pop	r7
    1aa4:	6f 90       	pop	r6
    1aa6:	5f 90       	pop	r5
    1aa8:	4f 90       	pop	r4
    1aaa:	08 95       	ret

00001aac <prvResetNextTaskUnblockTime>:
    1aac:	e0 91 0f 15 	lds	r30, 0x150F	; 0x80150f <pxDelayedTaskList>
    1ab0:	f0 91 10 15 	lds	r31, 0x1510	; 0x801510 <pxDelayedTaskList+0x1>
    1ab4:	80 81       	ld	r24, Z
    1ab6:	81 11       	cpse	r24, r1
    1ab8:	0c c0       	rjmp	.+24     	; 0x1ad2 <prvResetNextTaskUnblockTime+0x26>
    1aba:	8f ef       	ldi	r24, 0xFF	; 255
    1abc:	9f ef       	ldi	r25, 0xFF	; 255
    1abe:	dc 01       	movw	r26, r24
    1ac0:	80 93 d9 14 	sts	0x14D9, r24	; 0x8014d9 <xNextTaskUnblockTime>
    1ac4:	90 93 da 14 	sts	0x14DA, r25	; 0x8014da <xNextTaskUnblockTime+0x1>
    1ac8:	a0 93 db 14 	sts	0x14DB, r26	; 0x8014db <xNextTaskUnblockTime+0x2>
    1acc:	b0 93 dc 14 	sts	0x14DC, r27	; 0x8014dc <xNextTaskUnblockTime+0x3>
    1ad0:	08 95       	ret
    1ad2:	e0 91 0f 15 	lds	r30, 0x150F	; 0x80150f <pxDelayedTaskList>
    1ad6:	f0 91 10 15 	lds	r31, 0x1510	; 0x801510 <pxDelayedTaskList+0x1>
    1ada:	07 80       	ldd	r0, Z+7	; 0x07
    1adc:	f0 85       	ldd	r31, Z+8	; 0x08
    1ade:	e0 2d       	mov	r30, r0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	91 81       	ldd	r25, Z+1	; 0x01
    1ae4:	a2 81       	ldd	r26, Z+2	; 0x02
    1ae6:	b3 81       	ldd	r27, Z+3	; 0x03
    1ae8:	80 93 d9 14 	sts	0x14D9, r24	; 0x8014d9 <xNextTaskUnblockTime>
    1aec:	90 93 da 14 	sts	0x14DA, r25	; 0x8014da <xNextTaskUnblockTime+0x1>
    1af0:	a0 93 db 14 	sts	0x14DB, r26	; 0x8014db <xNextTaskUnblockTime+0x2>
    1af4:	b0 93 dc 14 	sts	0x14DC, r27	; 0x8014dc <xNextTaskUnblockTime+0x3>
    1af8:	08 95       	ret

00001afa <prvDeleteTCB>:
    1afa:	cf 93       	push	r28
    1afc:	df 93       	push	r29
    1afe:	ec 01       	movw	r28, r24
    1b00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b04:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <vPortFree>
    1b08:	ce 01       	movw	r24, r28
    1b0a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <vPortFree>
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	08 95       	ret

00001b14 <prvInitialiseNewTask>:
    1b14:	4f 92       	push	r4
    1b16:	5f 92       	push	r5
    1b18:	6f 92       	push	r6
    1b1a:	7f 92       	push	r7
    1b1c:	8f 92       	push	r8
    1b1e:	9f 92       	push	r9
    1b20:	af 92       	push	r10
    1b22:	bf 92       	push	r11
    1b24:	cf 92       	push	r12
    1b26:	df 92       	push	r13
    1b28:	ef 92       	push	r14
    1b2a:	ff 92       	push	r15
    1b2c:	0f 93       	push	r16
    1b2e:	cf 93       	push	r28
    1b30:	df 93       	push	r29
    1b32:	2c 01       	movw	r4, r24
    1b34:	5b 01       	movw	r10, r22
    1b36:	4a 01       	movw	r8, r20
    1b38:	39 01       	movw	r6, r18
    1b3a:	e6 01       	movw	r28, r12
    1b3c:	65 ea       	ldi	r22, 0xA5	; 165
    1b3e:	70 e0       	ldi	r23, 0x00	; 0
    1b40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b44:	0e 94 c0 33 	call	0x6780	; 0x6780 <memset>
    1b48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b4c:	21 e0       	ldi	r18, 0x01	; 1
    1b4e:	82 1a       	sub	r8, r18
    1b50:	91 08       	sbc	r9, r1
    1b52:	88 0e       	add	r8, r24
    1b54:	99 1e       	adc	r9, r25
    1b56:	a1 14       	cp	r10, r1
    1b58:	b1 04       	cpc	r11, r1
    1b5a:	89 f4       	brne	.+34     	; 0x1b7e <prvInitialiseNewTask+0x6a>
    1b5c:	15 c0       	rjmp	.+42     	; 0x1b88 <prvInitialiseNewTask+0x74>
    1b5e:	82 2f       	mov	r24, r18
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	f5 01       	movw	r30, r10
    1b64:	e8 0f       	add	r30, r24
    1b66:	f9 1f       	adc	r31, r25
    1b68:	30 81       	ld	r19, Z
    1b6a:	de 01       	movw	r26, r28
    1b6c:	a8 0f       	add	r26, r24
    1b6e:	b9 1f       	adc	r27, r25
    1b70:	5d 96       	adiw	r26, 0x1d	; 29
    1b72:	3c 93       	st	X, r19
    1b74:	80 81       	ld	r24, Z
    1b76:	88 23       	and	r24, r24
    1b78:	29 f0       	breq	.+10     	; 0x1b84 <prvInitialiseNewTask+0x70>
    1b7a:	2f 5f       	subi	r18, 0xFF	; 255
    1b7c:	01 c0       	rjmp	.+2      	; 0x1b80 <prvInitialiseNewTask+0x6c>
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	20 31       	cpi	r18, 0x10	; 16
    1b82:	68 f3       	brcs	.-38     	; 0x1b5e <prvInitialiseNewTask+0x4a>
    1b84:	1c a6       	std	Y+44, r1	; 0x2c
    1b86:	01 c0       	rjmp	.+2      	; 0x1b8a <prvInitialiseNewTask+0x76>
    1b88:	1d 8e       	std	Y+29, r1	; 0x1d
    1b8a:	0a 30       	cpi	r16, 0x0A	; 10
    1b8c:	08 f0       	brcs	.+2      	; 0x1b90 <prvInitialiseNewTask+0x7c>
    1b8e:	09 e0       	ldi	r16, 0x09	; 9
    1b90:	0a 8f       	std	Y+26, r16	; 0x1a
    1b92:	0d a7       	std	Y+45, r16	; 0x2d
    1b94:	1e a6       	std	Y+46, r1	; 0x2e
    1b96:	ce 01       	movw	r24, r28
    1b98:	02 96       	adiw	r24, 0x02	; 2
    1b9a:	0e 94 ca 05 	call	0xb94	; 0xb94 <vListInitialiseItem>
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	0e 96       	adiw	r24, 0x0e	; 14
    1ba2:	0e 94 ca 05 	call	0xb94	; 0xb94 <vListInitialiseItem>
    1ba6:	db 87       	std	Y+11, r29	; 0x0b
    1ba8:	ca 87       	std	Y+10, r28	; 0x0a
    1baa:	8a e0       	ldi	r24, 0x0A	; 10
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	a0 e0       	ldi	r26, 0x00	; 0
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	80 1b       	sub	r24, r16
    1bb4:	91 09       	sbc	r25, r1
    1bb6:	a1 09       	sbc	r26, r1
    1bb8:	b1 09       	sbc	r27, r1
    1bba:	8e 87       	std	Y+14, r24	; 0x0e
    1bbc:	9f 87       	std	Y+15, r25	; 0x0f
    1bbe:	a8 8b       	std	Y+16, r26	; 0x10
    1bc0:	b9 8b       	std	Y+17, r27	; 0x11
    1bc2:	df 8b       	std	Y+23, r29	; 0x17
    1bc4:	ce 8b       	std	Y+22, r28	; 0x16
    1bc6:	84 e0       	ldi	r24, 0x04	; 4
    1bc8:	fe 01       	movw	r30, r28
    1bca:	bf 96       	adiw	r30, 0x2f	; 47
    1bcc:	df 01       	movw	r26, r30
    1bce:	1d 92       	st	X+, r1
    1bd0:	8a 95       	dec	r24
    1bd2:	e9 f7       	brne	.-6      	; 0x1bce <prvInitialiseNewTask+0xba>
    1bd4:	1b aa       	std	Y+51, r1	; 0x33
    1bd6:	a3 01       	movw	r20, r6
    1bd8:	b2 01       	movw	r22, r4
    1bda:	c4 01       	movw	r24, r8
    1bdc:	4f d8       	rcall	.-3938   	; 0xc7c <pxPortInitialiseStack>
    1bde:	99 83       	std	Y+1, r25	; 0x01
    1be0:	88 83       	st	Y, r24
    1be2:	e1 14       	cp	r14, r1
    1be4:	f1 04       	cpc	r15, r1
    1be6:	19 f0       	breq	.+6      	; 0x1bee <prvInitialiseNewTask+0xda>
    1be8:	f7 01       	movw	r30, r14
    1bea:	d1 83       	std	Z+1, r29	; 0x01
    1bec:	c0 83       	st	Z, r28
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	0f 91       	pop	r16
    1bf4:	ff 90       	pop	r15
    1bf6:	ef 90       	pop	r14
    1bf8:	df 90       	pop	r13
    1bfa:	cf 90       	pop	r12
    1bfc:	bf 90       	pop	r11
    1bfe:	af 90       	pop	r10
    1c00:	9f 90       	pop	r9
    1c02:	8f 90       	pop	r8
    1c04:	7f 90       	pop	r7
    1c06:	6f 90       	pop	r6
    1c08:	5f 90       	pop	r5
    1c0a:	4f 90       	pop	r4
    1c0c:	08 95       	ret

00001c0e <prvInitialiseTaskLists>:
    1c0e:	cf 93       	push	r28
    1c10:	c0 e0       	ldi	r28, 0x00	; 0
    1c12:	09 c0       	rjmp	.+18     	; 0x1c26 <prvInitialiseTaskLists+0x18>
    1c14:	2b e0       	ldi	r18, 0x0B	; 11
    1c16:	c2 9f       	mul	r28, r18
    1c18:	c0 01       	movw	r24, r0
    1c1a:	11 24       	eor	r1, r1
    1c1c:	89 5d       	subi	r24, 0xD9	; 217
    1c1e:	9a 4e       	sbci	r25, 0xEA	; 234
    1c20:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInitialise>
    1c24:	cf 5f       	subi	r28, 0xFF	; 255
    1c26:	ca 30       	cpi	r28, 0x0A	; 10
    1c28:	a8 f3       	brcs	.-22     	; 0x1c14 <prvInitialiseTaskLists+0x6>
    1c2a:	8c e1       	ldi	r24, 0x1C	; 28
    1c2c:	95 e1       	ldi	r25, 0x15	; 21
    1c2e:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInitialise>
    1c32:	81 e1       	ldi	r24, 0x11	; 17
    1c34:	95 e1       	ldi	r25, 0x15	; 21
    1c36:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInitialise>
    1c3a:	82 e0       	ldi	r24, 0x02	; 2
    1c3c:	95 e1       	ldi	r25, 0x15	; 21
    1c3e:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInitialise>
    1c42:	87 ef       	ldi	r24, 0xF7	; 247
    1c44:	94 e1       	ldi	r25, 0x14	; 20
    1c46:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInitialise>
    1c4a:	8b ee       	ldi	r24, 0xEB	; 235
    1c4c:	94 e1       	ldi	r25, 0x14	; 20
    1c4e:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInitialise>
    1c52:	8c e1       	ldi	r24, 0x1C	; 28
    1c54:	95 e1       	ldi	r25, 0x15	; 21
    1c56:	90 93 10 15 	sts	0x1510, r25	; 0x801510 <pxDelayedTaskList+0x1>
    1c5a:	80 93 0f 15 	sts	0x150F, r24	; 0x80150f <pxDelayedTaskList>
    1c5e:	81 e1       	ldi	r24, 0x11	; 17
    1c60:	95 e1       	ldi	r25, 0x15	; 21
    1c62:	90 93 0e 15 	sts	0x150E, r25	; 0x80150e <pxOverflowDelayedTaskList+0x1>
    1c66:	80 93 0d 15 	sts	0x150D, r24	; 0x80150d <pxOverflowDelayedTaskList>
    1c6a:	cf 91       	pop	r28
    1c6c:	08 95       	ret

00001c6e <prvAddNewTaskToReadyList>:
    1c6e:	cf 93       	push	r28
    1c70:	df 93       	push	r29
    1c72:	ec 01       	movw	r28, r24
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	0f 92       	push	r0
    1c7a:	80 91 ea 14 	lds	r24, 0x14EA	; 0x8014ea <uxCurrentNumberOfTasks>
    1c7e:	8f 5f       	subi	r24, 0xFF	; 255
    1c80:	80 93 ea 14 	sts	0x14EA, r24	; 0x8014ea <uxCurrentNumberOfTasks>
    1c84:	80 91 95 15 	lds	r24, 0x1595	; 0x801595 <pxCurrentTCB>
    1c88:	90 91 96 15 	lds	r25, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    1c8c:	89 2b       	or	r24, r25
    1c8e:	51 f4       	brne	.+20     	; 0x1ca4 <prvAddNewTaskToReadyList+0x36>
    1c90:	d0 93 96 15 	sts	0x1596, r29	; 0x801596 <pxCurrentTCB+0x1>
    1c94:	c0 93 95 15 	sts	0x1595, r28	; 0x801595 <pxCurrentTCB>
    1c98:	80 91 ea 14 	lds	r24, 0x14EA	; 0x8014ea <uxCurrentNumberOfTasks>
    1c9c:	81 30       	cpi	r24, 0x01	; 1
    1c9e:	91 f4       	brne	.+36     	; 0x1cc4 <prvAddNewTaskToReadyList+0x56>
    1ca0:	b6 df       	rcall	.-148    	; 0x1c0e <prvInitialiseTaskLists>
    1ca2:	10 c0       	rjmp	.+32     	; 0x1cc4 <prvAddNewTaskToReadyList+0x56>
    1ca4:	80 91 e4 14 	lds	r24, 0x14E4	; 0x8014e4 <xSchedulerRunning>
    1ca8:	81 11       	cpse	r24, r1
    1caa:	0c c0       	rjmp	.+24     	; 0x1cc4 <prvAddNewTaskToReadyList+0x56>
    1cac:	e0 91 95 15 	lds	r30, 0x1595	; 0x801595 <pxCurrentTCB>
    1cb0:	f0 91 96 15 	lds	r31, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    1cb4:	92 8d       	ldd	r25, Z+26	; 0x1a
    1cb6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cb8:	89 17       	cp	r24, r25
    1cba:	20 f0       	brcs	.+8      	; 0x1cc4 <prvAddNewTaskToReadyList+0x56>
    1cbc:	d0 93 96 15 	sts	0x1596, r29	; 0x801596 <pxCurrentTCB+0x1>
    1cc0:	c0 93 95 15 	sts	0x1595, r28	; 0x801595 <pxCurrentTCB>
    1cc4:	80 91 dd 14 	lds	r24, 0x14DD	; 0x8014dd <uxTaskNumber>
    1cc8:	8f 5f       	subi	r24, 0xFF	; 255
    1cca:	80 93 dd 14 	sts	0x14DD, r24	; 0x8014dd <uxTaskNumber>
    1cce:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1cd0:	80 91 e5 14 	lds	r24, 0x14E5	; 0x8014e5 <uxTopReadyPriority>
    1cd4:	8e 17       	cp	r24, r30
    1cd6:	10 f4       	brcc	.+4      	; 0x1cdc <prvAddNewTaskToReadyList+0x6e>
    1cd8:	e0 93 e5 14 	sts	0x14E5, r30	; 0x8014e5 <uxTopReadyPriority>
    1cdc:	8b e0       	ldi	r24, 0x0B	; 11
    1cde:	8e 9f       	mul	r24, r30
    1ce0:	f0 01       	movw	r30, r0
    1ce2:	11 24       	eor	r1, r1
    1ce4:	e9 5d       	subi	r30, 0xD9	; 217
    1ce6:	fa 4e       	sbci	r31, 0xEA	; 234
    1ce8:	01 80       	ldd	r0, Z+1	; 0x01
    1cea:	f2 81       	ldd	r31, Z+2	; 0x02
    1cec:	e0 2d       	mov	r30, r0
    1cee:	ff 83       	std	Y+7, r31	; 0x07
    1cf0:	ee 83       	std	Y+6, r30	; 0x06
    1cf2:	26 81       	ldd	r18, Z+6	; 0x06
    1cf4:	37 81       	ldd	r19, Z+7	; 0x07
    1cf6:	39 87       	std	Y+9, r19	; 0x09
    1cf8:	28 87       	std	Y+8, r18	; 0x08
    1cfa:	a6 81       	ldd	r26, Z+6	; 0x06
    1cfc:	b7 81       	ldd	r27, Z+7	; 0x07
    1cfe:	9e 01       	movw	r18, r28
    1d00:	2e 5f       	subi	r18, 0xFE	; 254
    1d02:	3f 4f       	sbci	r19, 0xFF	; 255
    1d04:	15 96       	adiw	r26, 0x05	; 5
    1d06:	3c 93       	st	X, r19
    1d08:	2e 93       	st	-X, r18
    1d0a:	14 97       	sbiw	r26, 0x04	; 4
    1d0c:	37 83       	std	Z+7, r19	; 0x07
    1d0e:	26 83       	std	Z+6, r18	; 0x06
    1d10:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1d12:	8e 9f       	mul	r24, r30
    1d14:	f0 01       	movw	r30, r0
    1d16:	11 24       	eor	r1, r1
    1d18:	e9 5d       	subi	r30, 0xD9	; 217
    1d1a:	fa 4e       	sbci	r31, 0xEA	; 234
    1d1c:	fd 87       	std	Y+13, r31	; 0x0d
    1d1e:	ec 87       	std	Y+12, r30	; 0x0c
    1d20:	80 81       	ld	r24, Z
    1d22:	8f 5f       	subi	r24, 0xFF	; 255
    1d24:	80 83       	st	Z, r24
    1d26:	0f 90       	pop	r0
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	80 91 e4 14 	lds	r24, 0x14E4	; 0x8014e4 <xSchedulerRunning>
    1d2e:	88 23       	and	r24, r24
    1d30:	51 f0       	breq	.+20     	; 0x1d46 <prvAddNewTaskToReadyList+0xd8>
    1d32:	e0 91 95 15 	lds	r30, 0x1595	; 0x801595 <pxCurrentTCB>
    1d36:	f0 91 96 15 	lds	r31, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    1d3a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d3e:	98 17       	cp	r25, r24
    1d40:	10 f4       	brcc	.+4      	; 0x1d46 <prvAddNewTaskToReadyList+0xd8>
    1d42:	0e 94 87 06 	call	0xd0e	; 0xd0e <vPortYield>
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	08 95       	ret

00001d4c <prvCheckTasksWaitingTermination>:
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	1b c0       	rjmp	.+54     	; 0x1d88 <prvCheckTasksWaitingTermination+0x3c>
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	0f 92       	push	r0
    1d58:	e0 91 fe 14 	lds	r30, 0x14FE	; 0x8014fe <xTasksWaitingTermination+0x7>
    1d5c:	f0 91 ff 14 	lds	r31, 0x14FF	; 0x8014ff <xTasksWaitingTermination+0x8>
    1d60:	c0 85       	ldd	r28, Z+8	; 0x08
    1d62:	d1 85       	ldd	r29, Z+9	; 0x09
    1d64:	ce 01       	movw	r24, r28
    1d66:	02 96       	adiw	r24, 0x02	; 2
    1d68:	0e 94 0b 06 	call	0xc16	; 0xc16 <uxListRemove>
    1d6c:	80 91 ea 14 	lds	r24, 0x14EA	; 0x8014ea <uxCurrentNumberOfTasks>
    1d70:	81 50       	subi	r24, 0x01	; 1
    1d72:	80 93 ea 14 	sts	0x14EA, r24	; 0x8014ea <uxCurrentNumberOfTasks>
    1d76:	80 91 f6 14 	lds	r24, 0x14F6	; 0x8014f6 <uxDeletedTasksWaitingCleanUp>
    1d7a:	81 50       	subi	r24, 0x01	; 1
    1d7c:	80 93 f6 14 	sts	0x14F6, r24	; 0x8014f6 <uxDeletedTasksWaitingCleanUp>
    1d80:	0f 90       	pop	r0
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	ce 01       	movw	r24, r28
    1d86:	b9 de       	rcall	.-654    	; 0x1afa <prvDeleteTCB>
    1d88:	80 91 f6 14 	lds	r24, 0x14F6	; 0x8014f6 <uxDeletedTasksWaitingCleanUp>
    1d8c:	81 11       	cpse	r24, r1
    1d8e:	e1 cf       	rjmp	.-62     	; 0x1d52 <prvCheckTasksWaitingTermination+0x6>
    1d90:	df 91       	pop	r29
    1d92:	cf 91       	pop	r28
    1d94:	08 95       	ret

00001d96 <prvAddCurrentTaskToDelayedList>:
    1d96:	8f 92       	push	r8
    1d98:	9f 92       	push	r9
    1d9a:	af 92       	push	r10
    1d9c:	bf 92       	push	r11
    1d9e:	cf 92       	push	r12
    1da0:	df 92       	push	r13
    1da2:	ef 92       	push	r14
    1da4:	ff 92       	push	r15
    1da6:	cf 93       	push	r28
    1da8:	df 93       	push	r29
    1daa:	6b 01       	movw	r12, r22
    1dac:	7c 01       	movw	r14, r24
    1dae:	c4 2f       	mov	r28, r20
    1db0:	80 90 e6 14 	lds	r8, 0x14E6	; 0x8014e6 <xTickCount>
    1db4:	90 90 e7 14 	lds	r9, 0x14E7	; 0x8014e7 <xTickCount+0x1>
    1db8:	a0 90 e8 14 	lds	r10, 0x14E8	; 0x8014e8 <xTickCount+0x2>
    1dbc:	b0 90 e9 14 	lds	r11, 0x14E9	; 0x8014e9 <xTickCount+0x3>
    1dc0:	80 91 95 15 	lds	r24, 0x1595	; 0x801595 <pxCurrentTCB>
    1dc4:	90 91 96 15 	lds	r25, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    1dc8:	02 96       	adiw	r24, 0x02	; 2
    1dca:	0e 94 0b 06 	call	0xc16	; 0xc16 <uxListRemove>
    1dce:	8f ef       	ldi	r24, 0xFF	; 255
    1dd0:	c8 16       	cp	r12, r24
    1dd2:	d8 06       	cpc	r13, r24
    1dd4:	e8 06       	cpc	r14, r24
    1dd6:	f8 06       	cpc	r15, r24
    1dd8:	b1 f5       	brne	.+108    	; 0x1e46 <prvAddCurrentTaskToDelayedList+0xb0>
    1dda:	cc 23       	and	r28, r28
    1ddc:	a1 f1       	breq	.+104    	; 0x1e46 <prvAddCurrentTaskToDelayedList+0xb0>
    1dde:	eb ee       	ldi	r30, 0xEB	; 235
    1de0:	f4 e1       	ldi	r31, 0x14	; 20
    1de2:	a1 81       	ldd	r26, Z+1	; 0x01
    1de4:	b2 81       	ldd	r27, Z+2	; 0x02
    1de6:	c0 91 95 15 	lds	r28, 0x1595	; 0x801595 <pxCurrentTCB>
    1dea:	d0 91 96 15 	lds	r29, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    1dee:	bf 83       	std	Y+7, r27	; 0x07
    1df0:	ae 83       	std	Y+6, r26	; 0x06
    1df2:	c0 91 95 15 	lds	r28, 0x1595	; 0x801595 <pxCurrentTCB>
    1df6:	d0 91 96 15 	lds	r29, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    1dfa:	16 96       	adiw	r26, 0x06	; 6
    1dfc:	8d 91       	ld	r24, X+
    1dfe:	9c 91       	ld	r25, X
    1e00:	17 97       	sbiw	r26, 0x07	; 7
    1e02:	99 87       	std	Y+9, r25	; 0x09
    1e04:	88 87       	std	Y+8, r24	; 0x08
    1e06:	16 96       	adiw	r26, 0x06	; 6
    1e08:	cd 91       	ld	r28, X+
    1e0a:	dc 91       	ld	r29, X
    1e0c:	17 97       	sbiw	r26, 0x07	; 7
    1e0e:	80 91 95 15 	lds	r24, 0x1595	; 0x801595 <pxCurrentTCB>
    1e12:	90 91 96 15 	lds	r25, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    1e16:	02 96       	adiw	r24, 0x02	; 2
    1e18:	9d 83       	std	Y+5, r25	; 0x05
    1e1a:	8c 83       	std	Y+4, r24	; 0x04
    1e1c:	80 91 95 15 	lds	r24, 0x1595	; 0x801595 <pxCurrentTCB>
    1e20:	90 91 96 15 	lds	r25, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    1e24:	02 96       	adiw	r24, 0x02	; 2
    1e26:	17 96       	adiw	r26, 0x07	; 7
    1e28:	9c 93       	st	X, r25
    1e2a:	8e 93       	st	-X, r24
    1e2c:	16 97       	sbiw	r26, 0x06	; 6
    1e2e:	a0 91 95 15 	lds	r26, 0x1595	; 0x801595 <pxCurrentTCB>
    1e32:	b0 91 96 15 	lds	r27, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    1e36:	1d 96       	adiw	r26, 0x0d	; 13
    1e38:	fc 93       	st	X, r31
    1e3a:	ee 93       	st	-X, r30
    1e3c:	1c 97       	sbiw	r26, 0x0c	; 12
    1e3e:	80 81       	ld	r24, Z
    1e40:	8f 5f       	subi	r24, 0xFF	; 255
    1e42:	80 83       	st	Z, r24
    1e44:	3f c0       	rjmp	.+126    	; 0x1ec4 <prvAddCurrentTaskToDelayedList+0x12e>
    1e46:	c8 0c       	add	r12, r8
    1e48:	d9 1c       	adc	r13, r9
    1e4a:	ea 1c       	adc	r14, r10
    1e4c:	fb 1c       	adc	r15, r11
    1e4e:	e0 91 95 15 	lds	r30, 0x1595	; 0x801595 <pxCurrentTCB>
    1e52:	f0 91 96 15 	lds	r31, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    1e56:	c2 82       	std	Z+2, r12	; 0x02
    1e58:	d3 82       	std	Z+3, r13	; 0x03
    1e5a:	e4 82       	std	Z+4, r14	; 0x04
    1e5c:	f5 82       	std	Z+5, r15	; 0x05
    1e5e:	c8 14       	cp	r12, r8
    1e60:	d9 04       	cpc	r13, r9
    1e62:	ea 04       	cpc	r14, r10
    1e64:	fb 04       	cpc	r15, r11
    1e66:	68 f4       	brcc	.+26     	; 0x1e82 <prvAddCurrentTaskToDelayedList+0xec>
    1e68:	60 91 95 15 	lds	r22, 0x1595	; 0x801595 <pxCurrentTCB>
    1e6c:	70 91 96 15 	lds	r23, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    1e70:	80 91 0d 15 	lds	r24, 0x150D	; 0x80150d <pxOverflowDelayedTaskList>
    1e74:	90 91 0e 15 	lds	r25, 0x150E	; 0x80150e <pxOverflowDelayedTaskList+0x1>
    1e78:	6e 5f       	subi	r22, 0xFE	; 254
    1e7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vListInsert>
    1e80:	21 c0       	rjmp	.+66     	; 0x1ec4 <prvAddCurrentTaskToDelayedList+0x12e>
    1e82:	60 91 95 15 	lds	r22, 0x1595	; 0x801595 <pxCurrentTCB>
    1e86:	70 91 96 15 	lds	r23, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    1e8a:	80 91 0f 15 	lds	r24, 0x150F	; 0x80150f <pxDelayedTaskList>
    1e8e:	90 91 10 15 	lds	r25, 0x1510	; 0x801510 <pxDelayedTaskList+0x1>
    1e92:	6e 5f       	subi	r22, 0xFE	; 254
    1e94:	7f 4f       	sbci	r23, 0xFF	; 255
    1e96:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vListInsert>
    1e9a:	80 91 d9 14 	lds	r24, 0x14D9	; 0x8014d9 <xNextTaskUnblockTime>
    1e9e:	90 91 da 14 	lds	r25, 0x14DA	; 0x8014da <xNextTaskUnblockTime+0x1>
    1ea2:	a0 91 db 14 	lds	r26, 0x14DB	; 0x8014db <xNextTaskUnblockTime+0x2>
    1ea6:	b0 91 dc 14 	lds	r27, 0x14DC	; 0x8014dc <xNextTaskUnblockTime+0x3>
    1eaa:	c8 16       	cp	r12, r24
    1eac:	d9 06       	cpc	r13, r25
    1eae:	ea 06       	cpc	r14, r26
    1eb0:	fb 06       	cpc	r15, r27
    1eb2:	40 f4       	brcc	.+16     	; 0x1ec4 <prvAddCurrentTaskToDelayedList+0x12e>
    1eb4:	c0 92 d9 14 	sts	0x14D9, r12	; 0x8014d9 <xNextTaskUnblockTime>
    1eb8:	d0 92 da 14 	sts	0x14DA, r13	; 0x8014da <xNextTaskUnblockTime+0x1>
    1ebc:	e0 92 db 14 	sts	0x14DB, r14	; 0x8014db <xNextTaskUnblockTime+0x2>
    1ec0:	f0 92 dc 14 	sts	0x14DC, r15	; 0x8014dc <xNextTaskUnblockTime+0x3>
    1ec4:	df 91       	pop	r29
    1ec6:	cf 91       	pop	r28
    1ec8:	ff 90       	pop	r15
    1eca:	ef 90       	pop	r14
    1ecc:	df 90       	pop	r13
    1ece:	cf 90       	pop	r12
    1ed0:	bf 90       	pop	r11
    1ed2:	af 90       	pop	r10
    1ed4:	9f 90       	pop	r9
    1ed6:	8f 90       	pop	r8
    1ed8:	08 95       	ret

00001eda <xTaskCreate>:
    1eda:	2f 92       	push	r2
    1edc:	3f 92       	push	r3
    1ede:	4f 92       	push	r4
    1ee0:	5f 92       	push	r5
    1ee2:	6f 92       	push	r6
    1ee4:	7f 92       	push	r7
    1ee6:	8f 92       	push	r8
    1ee8:	9f 92       	push	r9
    1eea:	af 92       	push	r10
    1eec:	bf 92       	push	r11
    1eee:	cf 92       	push	r12
    1ef0:	df 92       	push	r13
    1ef2:	ef 92       	push	r14
    1ef4:	ff 92       	push	r15
    1ef6:	0f 93       	push	r16
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	3c 01       	movw	r6, r24
    1efe:	1b 01       	movw	r2, r22
    1f00:	4a 01       	movw	r8, r20
    1f02:	29 01       	movw	r4, r18
    1f04:	ca 01       	movw	r24, r20
    1f06:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <pvPortMalloc>
    1f0a:	6c 01       	movw	r12, r24
    1f0c:	89 2b       	or	r24, r25
    1f0e:	71 f0       	breq	.+28     	; 0x1f2c <xTaskCreate+0x52>
    1f10:	84 e3       	ldi	r24, 0x34	; 52
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <pvPortMalloc>
    1f18:	ec 01       	movw	r28, r24
    1f1a:	89 2b       	or	r24, r25
    1f1c:	19 f0       	breq	.+6      	; 0x1f24 <xTaskCreate+0x4a>
    1f1e:	dc 8e       	std	Y+28, r13	; 0x1c
    1f20:	cb 8e       	std	Y+27, r12	; 0x1b
    1f22:	06 c0       	rjmp	.+12     	; 0x1f30 <xTaskCreate+0x56>
    1f24:	c6 01       	movw	r24, r12
    1f26:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <vPortFree>
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <xTaskCreate+0x56>
    1f2c:	c0 e0       	ldi	r28, 0x00	; 0
    1f2e:	d0 e0       	ldi	r29, 0x00	; 0
    1f30:	20 97       	sbiw	r28, 0x00	; 0
    1f32:	61 f0       	breq	.+24     	; 0x1f4c <xTaskCreate+0x72>
    1f34:	a1 2c       	mov	r10, r1
    1f36:	b1 2c       	mov	r11, r1
    1f38:	6e 01       	movw	r12, r28
    1f3a:	92 01       	movw	r18, r4
    1f3c:	a4 01       	movw	r20, r8
    1f3e:	b1 01       	movw	r22, r2
    1f40:	c3 01       	movw	r24, r6
    1f42:	e8 dd       	rcall	.-1072   	; 0x1b14 <prvInitialiseNewTask>
    1f44:	ce 01       	movw	r24, r28
    1f46:	93 de       	rcall	.-730    	; 0x1c6e <prvAddNewTaskToReadyList>
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	01 c0       	rjmp	.+2      	; 0x1f4e <xTaskCreate+0x74>
    1f4c:	8f ef       	ldi	r24, 0xFF	; 255
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	0f 91       	pop	r16
    1f54:	ff 90       	pop	r15
    1f56:	ef 90       	pop	r14
    1f58:	df 90       	pop	r13
    1f5a:	cf 90       	pop	r12
    1f5c:	bf 90       	pop	r11
    1f5e:	af 90       	pop	r10
    1f60:	9f 90       	pop	r9
    1f62:	8f 90       	pop	r8
    1f64:	7f 90       	pop	r7
    1f66:	6f 90       	pop	r6
    1f68:	5f 90       	pop	r5
    1f6a:	4f 90       	pop	r4
    1f6c:	3f 90       	pop	r3
    1f6e:	2f 90       	pop	r2
    1f70:	08 95       	ret

00001f72 <vTaskStartScheduler>:
    1f72:	ef 92       	push	r14
    1f74:	ff 92       	push	r15
    1f76:	0f 93       	push	r16
    1f78:	0f 2e       	mov	r0, r31
    1f7a:	f7 ed       	ldi	r31, 0xD7	; 215
    1f7c:	ef 2e       	mov	r14, r31
    1f7e:	f4 e1       	ldi	r31, 0x14	; 20
    1f80:	ff 2e       	mov	r15, r31
    1f82:	f0 2d       	mov	r31, r0
    1f84:	00 e0       	ldi	r16, 0x00	; 0
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 ec       	ldi	r20, 0xC0	; 192
    1f8c:	50 e0       	ldi	r21, 0x00	; 0
    1f8e:	63 e3       	ldi	r22, 0x33	; 51
    1f90:	73 e0       	ldi	r23, 0x03	; 3
    1f92:	8e e4       	ldi	r24, 0x4E	; 78
    1f94:	91 e0       	ldi	r25, 0x01	; 1
    1f96:	a1 df       	rcall	.-190    	; 0x1eda <xTaskCreate>
    1f98:	81 30       	cpi	r24, 0x01	; 1
    1f9a:	11 f4       	brne	.+4      	; 0x1fa0 <vTaskStartScheduler+0x2e>
    1f9c:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <xTimerCreateTimerTask>
    1fa0:	81 30       	cpi	r24, 0x01	; 1
    1fa2:	c9 f4       	brne	.+50     	; 0x1fd6 <vTaskStartScheduler+0x64>
    1fa4:	f8 94       	cli
    1fa6:	8f ef       	ldi	r24, 0xFF	; 255
    1fa8:	9f ef       	ldi	r25, 0xFF	; 255
    1faa:	dc 01       	movw	r26, r24
    1fac:	80 93 d9 14 	sts	0x14D9, r24	; 0x8014d9 <xNextTaskUnblockTime>
    1fb0:	90 93 da 14 	sts	0x14DA, r25	; 0x8014da <xNextTaskUnblockTime+0x1>
    1fb4:	a0 93 db 14 	sts	0x14DB, r26	; 0x8014db <xNextTaskUnblockTime+0x2>
    1fb8:	b0 93 dc 14 	sts	0x14DC, r27	; 0x8014dc <xNextTaskUnblockTime+0x3>
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	80 93 e4 14 	sts	0x14E4, r24	; 0x8014e4 <xSchedulerRunning>
    1fc2:	10 92 e6 14 	sts	0x14E6, r1	; 0x8014e6 <xTickCount>
    1fc6:	10 92 e7 14 	sts	0x14E7, r1	; 0x8014e7 <xTickCount+0x1>
    1fca:	10 92 e8 14 	sts	0x14E8, r1	; 0x8014e8 <xTickCount+0x2>
    1fce:	10 92 e9 14 	sts	0x14E9, r1	; 0x8014e9 <xTickCount+0x3>
    1fd2:	0e 94 55 06 	call	0xcaa	; 0xcaa <xPortStartScheduler>
    1fd6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1fda:	0f 91       	pop	r16
    1fdc:	ff 90       	pop	r15
    1fde:	ef 90       	pop	r14
    1fe0:	08 95       	ret

00001fe2 <vTaskSuspendAll>:
    1fe2:	80 91 d6 14 	lds	r24, 0x14D6	; 0x8014d6 <uxSchedulerSuspended>
    1fe6:	8f 5f       	subi	r24, 0xFF	; 255
    1fe8:	80 93 d6 14 	sts	0x14D6, r24	; 0x8014d6 <uxSchedulerSuspended>
    1fec:	08 95       	ret

00001fee <xTaskGetTickCount>:
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	0f 92       	push	r0
    1ff4:	60 91 e6 14 	lds	r22, 0x14E6	; 0x8014e6 <xTickCount>
    1ff8:	70 91 e7 14 	lds	r23, 0x14E7	; 0x8014e7 <xTickCount+0x1>
    1ffc:	80 91 e8 14 	lds	r24, 0x14E8	; 0x8014e8 <xTickCount+0x2>
    2000:	90 91 e9 14 	lds	r25, 0x14E9	; 0x8014e9 <xTickCount+0x3>
    2004:	0f 90       	pop	r0
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	08 95       	ret

0000200a <xTaskIncrementTick>:
    200a:	cf 92       	push	r12
    200c:	df 92       	push	r13
    200e:	ef 92       	push	r14
    2010:	ff 92       	push	r15
    2012:	cf 93       	push	r28
    2014:	df 93       	push	r29
    2016:	80 91 d6 14 	lds	r24, 0x14D6	; 0x8014d6 <uxSchedulerSuspended>
    201a:	81 11       	cpse	r24, r1
    201c:	05 c1       	rjmp	.+522    	; 0x2228 <__stack+0x29>
    201e:	c0 90 e6 14 	lds	r12, 0x14E6	; 0x8014e6 <xTickCount>
    2022:	d0 90 e7 14 	lds	r13, 0x14E7	; 0x8014e7 <xTickCount+0x1>
    2026:	e0 90 e8 14 	lds	r14, 0x14E8	; 0x8014e8 <xTickCount+0x2>
    202a:	f0 90 e9 14 	lds	r15, 0x14E9	; 0x8014e9 <xTickCount+0x3>
    202e:	8f ef       	ldi	r24, 0xFF	; 255
    2030:	c8 1a       	sub	r12, r24
    2032:	d8 0a       	sbc	r13, r24
    2034:	e8 0a       	sbc	r14, r24
    2036:	f8 0a       	sbc	r15, r24
    2038:	c0 92 e6 14 	sts	0x14E6, r12	; 0x8014e6 <xTickCount>
    203c:	d0 92 e7 14 	sts	0x14E7, r13	; 0x8014e7 <xTickCount+0x1>
    2040:	e0 92 e8 14 	sts	0x14E8, r14	; 0x8014e8 <xTickCount+0x2>
    2044:	f0 92 e9 14 	sts	0x14E9, r15	; 0x8014e9 <xTickCount+0x3>
    2048:	c1 14       	cp	r12, r1
    204a:	d1 04       	cpc	r13, r1
    204c:	e1 04       	cpc	r14, r1
    204e:	f1 04       	cpc	r15, r1
    2050:	b1 f4       	brne	.+44     	; 0x207e <xTaskIncrementTick+0x74>
    2052:	80 91 0f 15 	lds	r24, 0x150F	; 0x80150f <pxDelayedTaskList>
    2056:	90 91 10 15 	lds	r25, 0x1510	; 0x801510 <pxDelayedTaskList+0x1>
    205a:	20 91 0d 15 	lds	r18, 0x150D	; 0x80150d <pxOverflowDelayedTaskList>
    205e:	30 91 0e 15 	lds	r19, 0x150E	; 0x80150e <pxOverflowDelayedTaskList+0x1>
    2062:	30 93 10 15 	sts	0x1510, r19	; 0x801510 <pxDelayedTaskList+0x1>
    2066:	20 93 0f 15 	sts	0x150F, r18	; 0x80150f <pxDelayedTaskList>
    206a:	90 93 0e 15 	sts	0x150E, r25	; 0x80150e <pxOverflowDelayedTaskList+0x1>
    206e:	80 93 0d 15 	sts	0x150D, r24	; 0x80150d <pxOverflowDelayedTaskList>
    2072:	80 91 de 14 	lds	r24, 0x14DE	; 0x8014de <xNumOfOverflows>
    2076:	8f 5f       	subi	r24, 0xFF	; 255
    2078:	80 93 de 14 	sts	0x14DE, r24	; 0x8014de <xNumOfOverflows>
    207c:	17 dd       	rcall	.-1490   	; 0x1aac <prvResetNextTaskUnblockTime>
    207e:	80 91 d9 14 	lds	r24, 0x14D9	; 0x8014d9 <xNextTaskUnblockTime>
    2082:	90 91 da 14 	lds	r25, 0x14DA	; 0x8014da <xNextTaskUnblockTime+0x1>
    2086:	a0 91 db 14 	lds	r26, 0x14DB	; 0x8014db <xNextTaskUnblockTime+0x2>
    208a:	b0 91 dc 14 	lds	r27, 0x14DC	; 0x8014dc <xNextTaskUnblockTime+0x3>
    208e:	c8 16       	cp	r12, r24
    2090:	d9 06       	cpc	r13, r25
    2092:	ea 06       	cpc	r14, r26
    2094:	fb 06       	cpc	r15, r27
    2096:	20 f4       	brcc	.+8      	; 0x20a0 <xTaskIncrementTick+0x96>
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	b2 c0       	rjmp	.+356    	; 0x2200 <__stack+0x1>
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	01 c0       	rjmp	.+2      	; 0x20a2 <xTaskIncrementTick+0x98>
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	e0 91 0f 15 	lds	r30, 0x150F	; 0x80150f <pxDelayedTaskList>
    20a6:	f0 91 10 15 	lds	r31, 0x1510	; 0x801510 <pxDelayedTaskList+0x1>
    20aa:	90 81       	ld	r25, Z
    20ac:	91 11       	cpse	r25, r1
    20ae:	0c c0       	rjmp	.+24     	; 0x20c8 <xTaskIncrementTick+0xbe>
    20b0:	4f ef       	ldi	r20, 0xFF	; 255
    20b2:	5f ef       	ldi	r21, 0xFF	; 255
    20b4:	ba 01       	movw	r22, r20
    20b6:	40 93 d9 14 	sts	0x14D9, r20	; 0x8014d9 <xNextTaskUnblockTime>
    20ba:	50 93 da 14 	sts	0x14DA, r21	; 0x8014da <xNextTaskUnblockTime+0x1>
    20be:	60 93 db 14 	sts	0x14DB, r22	; 0x8014db <xNextTaskUnblockTime+0x2>
    20c2:	70 93 dc 14 	sts	0x14DC, r23	; 0x8014dc <xNextTaskUnblockTime+0x3>
    20c6:	9c c0       	rjmp	.+312    	; 0x2200 <__stack+0x1>
    20c8:	e0 91 0f 15 	lds	r30, 0x150F	; 0x80150f <pxDelayedTaskList>
    20cc:	f0 91 10 15 	lds	r31, 0x1510	; 0x801510 <pxDelayedTaskList+0x1>
    20d0:	07 80       	ldd	r0, Z+7	; 0x07
    20d2:	f0 85       	ldd	r31, Z+8	; 0x08
    20d4:	e0 2d       	mov	r30, r0
    20d6:	00 84       	ldd	r0, Z+8	; 0x08
    20d8:	f1 85       	ldd	r31, Z+9	; 0x09
    20da:	e0 2d       	mov	r30, r0
    20dc:	42 81       	ldd	r20, Z+2	; 0x02
    20de:	53 81       	ldd	r21, Z+3	; 0x03
    20e0:	64 81       	ldd	r22, Z+4	; 0x04
    20e2:	75 81       	ldd	r23, Z+5	; 0x05
    20e4:	c4 16       	cp	r12, r20
    20e6:	d5 06       	cpc	r13, r21
    20e8:	e6 06       	cpc	r14, r22
    20ea:	f7 06       	cpc	r15, r23
    20ec:	48 f4       	brcc	.+18     	; 0x2100 <xTaskIncrementTick+0xf6>
    20ee:	40 93 d9 14 	sts	0x14D9, r20	; 0x8014d9 <xNextTaskUnblockTime>
    20f2:	50 93 da 14 	sts	0x14DA, r21	; 0x8014da <xNextTaskUnblockTime+0x1>
    20f6:	60 93 db 14 	sts	0x14DB, r22	; 0x8014db <xNextTaskUnblockTime+0x2>
    20fa:	70 93 dc 14 	sts	0x14DC, r23	; 0x8014dc <xNextTaskUnblockTime+0x3>
    20fe:	80 c0       	rjmp	.+256    	; 0x2200 <__stack+0x1>
    2100:	a4 85       	ldd	r26, Z+12	; 0x0c
    2102:	b5 85       	ldd	r27, Z+13	; 0x0d
    2104:	c6 81       	ldd	r28, Z+6	; 0x06
    2106:	d7 81       	ldd	r29, Z+7	; 0x07
    2108:	20 85       	ldd	r18, Z+8	; 0x08
    210a:	31 85       	ldd	r19, Z+9	; 0x09
    210c:	3f 83       	std	Y+7, r19	; 0x07
    210e:	2e 83       	std	Y+6, r18	; 0x06
    2110:	c0 85       	ldd	r28, Z+8	; 0x08
    2112:	d1 85       	ldd	r29, Z+9	; 0x09
    2114:	26 81       	ldd	r18, Z+6	; 0x06
    2116:	37 81       	ldd	r19, Z+7	; 0x07
    2118:	3d 83       	std	Y+5, r19	; 0x05
    211a:	2c 83       	std	Y+4, r18	; 0x04
    211c:	11 96       	adiw	r26, 0x01	; 1
    211e:	4d 91       	ld	r20, X+
    2120:	5c 91       	ld	r21, X
    2122:	12 97       	sbiw	r26, 0x02	; 2
    2124:	9f 01       	movw	r18, r30
    2126:	2e 5f       	subi	r18, 0xFE	; 254
    2128:	3f 4f       	sbci	r19, 0xFF	; 255
    212a:	42 17       	cp	r20, r18
    212c:	53 07       	cpc	r21, r19
    212e:	31 f4       	brne	.+12     	; 0x213c <xTaskIncrementTick+0x132>
    2130:	40 85       	ldd	r20, Z+8	; 0x08
    2132:	51 85       	ldd	r21, Z+9	; 0x09
    2134:	12 96       	adiw	r26, 0x02	; 2
    2136:	5c 93       	st	X, r21
    2138:	4e 93       	st	-X, r20
    213a:	11 97       	sbiw	r26, 0x01	; 1
    213c:	15 86       	std	Z+13, r1	; 0x0d
    213e:	14 86       	std	Z+12, r1	; 0x0c
    2140:	9c 91       	ld	r25, X
    2142:	91 50       	subi	r25, 0x01	; 1
    2144:	9c 93       	st	X, r25
    2146:	a0 8d       	ldd	r26, Z+24	; 0x18
    2148:	b1 8d       	ldd	r27, Z+25	; 0x19
    214a:	10 97       	sbiw	r26, 0x00	; 0
    214c:	09 f1       	breq	.+66     	; 0x2190 <xTaskIncrementTick+0x186>
    214e:	c2 89       	ldd	r28, Z+18	; 0x12
    2150:	d3 89       	ldd	r29, Z+19	; 0x13
    2152:	44 89       	ldd	r20, Z+20	; 0x14
    2154:	55 89       	ldd	r21, Z+21	; 0x15
    2156:	5f 83       	std	Y+7, r21	; 0x07
    2158:	4e 83       	std	Y+6, r20	; 0x06
    215a:	c4 89       	ldd	r28, Z+20	; 0x14
    215c:	d5 89       	ldd	r29, Z+21	; 0x15
    215e:	42 89       	ldd	r20, Z+18	; 0x12
    2160:	53 89       	ldd	r21, Z+19	; 0x13
    2162:	5d 83       	std	Y+5, r21	; 0x05
    2164:	4c 83       	std	Y+4, r20	; 0x04
    2166:	11 96       	adiw	r26, 0x01	; 1
    2168:	6d 91       	ld	r22, X+
    216a:	7c 91       	ld	r23, X
    216c:	12 97       	sbiw	r26, 0x02	; 2
    216e:	af 01       	movw	r20, r30
    2170:	42 5f       	subi	r20, 0xF2	; 242
    2172:	5f 4f       	sbci	r21, 0xFF	; 255
    2174:	64 17       	cp	r22, r20
    2176:	75 07       	cpc	r23, r21
    2178:	31 f4       	brne	.+12     	; 0x2186 <xTaskIncrementTick+0x17c>
    217a:	44 89       	ldd	r20, Z+20	; 0x14
    217c:	55 89       	ldd	r21, Z+21	; 0x15
    217e:	12 96       	adiw	r26, 0x02	; 2
    2180:	5c 93       	st	X, r21
    2182:	4e 93       	st	-X, r20
    2184:	11 97       	sbiw	r26, 0x01	; 1
    2186:	11 8e       	std	Z+25, r1	; 0x19
    2188:	10 8e       	std	Z+24, r1	; 0x18
    218a:	9c 91       	ld	r25, X
    218c:	91 50       	subi	r25, 0x01	; 1
    218e:	9c 93       	st	X, r25
    2190:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2192:	90 91 e5 14 	lds	r25, 0x14E5	; 0x8014e5 <uxTopReadyPriority>
    2196:	9a 17       	cp	r25, r26
    2198:	10 f4       	brcc	.+4      	; 0x219e <xTaskIncrementTick+0x194>
    219a:	a0 93 e5 14 	sts	0x14E5, r26	; 0x8014e5 <uxTopReadyPriority>
    219e:	9b e0       	ldi	r25, 0x0B	; 11
    21a0:	9a 9f       	mul	r25, r26
    21a2:	d0 01       	movw	r26, r0
    21a4:	11 24       	eor	r1, r1
    21a6:	a9 5d       	subi	r26, 0xD9	; 217
    21a8:	ba 4e       	sbci	r27, 0xEA	; 234
    21aa:	11 96       	adiw	r26, 0x01	; 1
    21ac:	0d 90       	ld	r0, X+
    21ae:	bc 91       	ld	r27, X
    21b0:	a0 2d       	mov	r26, r0
    21b2:	b7 83       	std	Z+7, r27	; 0x07
    21b4:	a6 83       	std	Z+6, r26	; 0x06
    21b6:	16 96       	adiw	r26, 0x06	; 6
    21b8:	4d 91       	ld	r20, X+
    21ba:	5c 91       	ld	r21, X
    21bc:	17 97       	sbiw	r26, 0x07	; 7
    21be:	51 87       	std	Z+9, r21	; 0x09
    21c0:	40 87       	std	Z+8, r20	; 0x08
    21c2:	16 96       	adiw	r26, 0x06	; 6
    21c4:	cd 91       	ld	r28, X+
    21c6:	dc 91       	ld	r29, X
    21c8:	17 97       	sbiw	r26, 0x07	; 7
    21ca:	3d 83       	std	Y+5, r19	; 0x05
    21cc:	2c 83       	std	Y+4, r18	; 0x04
    21ce:	17 96       	adiw	r26, 0x07	; 7
    21d0:	3c 93       	st	X, r19
    21d2:	2e 93       	st	-X, r18
    21d4:	16 97       	sbiw	r26, 0x06	; 6
    21d6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    21d8:	9a 9f       	mul	r25, r26
    21da:	d0 01       	movw	r26, r0
    21dc:	11 24       	eor	r1, r1
    21de:	a9 5d       	subi	r26, 0xD9	; 217
    21e0:	ba 4e       	sbci	r27, 0xEA	; 234
    21e2:	b5 87       	std	Z+13, r27	; 0x0d
    21e4:	a4 87       	std	Z+12, r26	; 0x0c
    21e6:	9c 91       	ld	r25, X
    21e8:	9f 5f       	subi	r25, 0xFF	; 255
    21ea:	9c 93       	st	X, r25
    21ec:	22 8d       	ldd	r18, Z+26	; 0x1a
    21ee:	e0 91 95 15 	lds	r30, 0x1595	; 0x801595 <pxCurrentTCB>
    21f2:	f0 91 96 15 	lds	r31, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    21f6:	92 8d       	ldd	r25, Z+26	; 0x1a
    21f8:	29 17       	cp	r18, r25
    21fa:	08 f0       	brcs	.+2      	; 0x21fe <xTaskIncrementTick+0x1f4>
    21fc:	4f cf       	rjmp	.-354    	; 0x209c <xTaskIncrementTick+0x92>
    21fe:	51 cf       	rjmp	.-350    	; 0x20a2 <xTaskIncrementTick+0x98>
    2200:	e0 91 95 15 	lds	r30, 0x1595	; 0x801595 <pxCurrentTCB>
    2204:	f0 91 96 15 	lds	r31, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    2208:	e2 8d       	ldd	r30, Z+26	; 0x1a
    220a:	9b e0       	ldi	r25, 0x0B	; 11
    220c:	e9 9f       	mul	r30, r25
    220e:	f0 01       	movw	r30, r0
    2210:	11 24       	eor	r1, r1
    2212:	e9 5d       	subi	r30, 0xD9	; 217
    2214:	fa 4e       	sbci	r31, 0xEA	; 234
    2216:	90 81       	ld	r25, Z
    2218:	92 30       	cpi	r25, 0x02	; 2
    221a:	08 f0       	brcs	.+2      	; 0x221e <__stack+0x1f>
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	90 91 df 14 	lds	r25, 0x14DF	; 0x8014df <xYieldPending>
    2222:	91 11       	cpse	r25, r1
    2224:	16 c0       	rjmp	.+44     	; 0x2252 <__stack+0x53>
    2226:	16 c0       	rjmp	.+44     	; 0x2254 <__stack+0x55>
    2228:	80 91 e0 14 	lds	r24, 0x14E0	; 0x8014e0 <xPendedTicks>
    222c:	90 91 e1 14 	lds	r25, 0x14E1	; 0x8014e1 <xPendedTicks+0x1>
    2230:	a0 91 e2 14 	lds	r26, 0x14E2	; 0x8014e2 <xPendedTicks+0x2>
    2234:	b0 91 e3 14 	lds	r27, 0x14E3	; 0x8014e3 <xPendedTicks+0x3>
    2238:	01 96       	adiw	r24, 0x01	; 1
    223a:	a1 1d       	adc	r26, r1
    223c:	b1 1d       	adc	r27, r1
    223e:	80 93 e0 14 	sts	0x14E0, r24	; 0x8014e0 <xPendedTicks>
    2242:	90 93 e1 14 	sts	0x14E1, r25	; 0x8014e1 <xPendedTicks+0x1>
    2246:	a0 93 e2 14 	sts	0x14E2, r26	; 0x8014e2 <xPendedTicks+0x2>
    224a:	b0 93 e3 14 	sts	0x14E3, r27	; 0x8014e3 <xPendedTicks+0x3>
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	01 c0       	rjmp	.+2      	; 0x2254 <__stack+0x55>
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	ff 90       	pop	r15
    225a:	ef 90       	pop	r14
    225c:	df 90       	pop	r13
    225e:	cf 90       	pop	r12
    2260:	08 95       	ret

00002262 <xTaskResumeAll>:
    2262:	cf 92       	push	r12
    2264:	df 92       	push	r13
    2266:	ef 92       	push	r14
    2268:	ff 92       	push	r15
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	0f 92       	push	r0
    2274:	80 91 d6 14 	lds	r24, 0x14D6	; 0x8014d6 <uxSchedulerSuspended>
    2278:	81 50       	subi	r24, 0x01	; 1
    227a:	80 93 d6 14 	sts	0x14D6, r24	; 0x8014d6 <uxSchedulerSuspended>
    227e:	80 91 d6 14 	lds	r24, 0x14D6	; 0x8014d6 <uxSchedulerSuspended>
    2282:	81 11       	cpse	r24, r1
    2284:	be c0       	rjmp	.+380    	; 0x2402 <xTaskResumeAll+0x1a0>
    2286:	80 91 ea 14 	lds	r24, 0x14EA	; 0x8014ea <uxCurrentNumberOfTasks>
    228a:	81 11       	cpse	r24, r1
    228c:	88 c0       	rjmp	.+272    	; 0x239e <xTaskResumeAll+0x13c>
    228e:	bc c0       	rjmp	.+376    	; 0x2408 <xTaskResumeAll+0x1a6>
    2290:	e0 91 09 15 	lds	r30, 0x1509	; 0x801509 <xPendingReadyList+0x7>
    2294:	f0 91 0a 15 	lds	r31, 0x150A	; 0x80150a <xPendingReadyList+0x8>
    2298:	00 84       	ldd	r0, Z+8	; 0x08
    229a:	f1 85       	ldd	r31, Z+9	; 0x09
    229c:	e0 2d       	mov	r30, r0
    229e:	a0 8d       	ldd	r26, Z+24	; 0x18
    22a0:	b1 8d       	ldd	r27, Z+25	; 0x19
    22a2:	c2 89       	ldd	r28, Z+18	; 0x12
    22a4:	d3 89       	ldd	r29, Z+19	; 0x13
    22a6:	84 89       	ldd	r24, Z+20	; 0x14
    22a8:	95 89       	ldd	r25, Z+21	; 0x15
    22aa:	9f 83       	std	Y+7, r25	; 0x07
    22ac:	8e 83       	std	Y+6, r24	; 0x06
    22ae:	c4 89       	ldd	r28, Z+20	; 0x14
    22b0:	d5 89       	ldd	r29, Z+21	; 0x15
    22b2:	82 89       	ldd	r24, Z+18	; 0x12
    22b4:	93 89       	ldd	r25, Z+19	; 0x13
    22b6:	9d 83       	std	Y+5, r25	; 0x05
    22b8:	8c 83       	std	Y+4, r24	; 0x04
    22ba:	11 96       	adiw	r26, 0x01	; 1
    22bc:	2d 91       	ld	r18, X+
    22be:	3c 91       	ld	r19, X
    22c0:	12 97       	sbiw	r26, 0x02	; 2
    22c2:	cf 01       	movw	r24, r30
    22c4:	0e 96       	adiw	r24, 0x0e	; 14
    22c6:	28 17       	cp	r18, r24
    22c8:	39 07       	cpc	r19, r25
    22ca:	31 f4       	brne	.+12     	; 0x22d8 <xTaskResumeAll+0x76>
    22cc:	84 89       	ldd	r24, Z+20	; 0x14
    22ce:	95 89       	ldd	r25, Z+21	; 0x15
    22d0:	12 96       	adiw	r26, 0x02	; 2
    22d2:	9c 93       	st	X, r25
    22d4:	8e 93       	st	-X, r24
    22d6:	11 97       	sbiw	r26, 0x01	; 1
    22d8:	11 8e       	std	Z+25, r1	; 0x19
    22da:	10 8e       	std	Z+24, r1	; 0x18
    22dc:	8c 91       	ld	r24, X
    22de:	81 50       	subi	r24, 0x01	; 1
    22e0:	8c 93       	st	X, r24
    22e2:	a4 85       	ldd	r26, Z+12	; 0x0c
    22e4:	b5 85       	ldd	r27, Z+13	; 0x0d
    22e6:	c6 81       	ldd	r28, Z+6	; 0x06
    22e8:	d7 81       	ldd	r29, Z+7	; 0x07
    22ea:	80 85       	ldd	r24, Z+8	; 0x08
    22ec:	91 85       	ldd	r25, Z+9	; 0x09
    22ee:	9f 83       	std	Y+7, r25	; 0x07
    22f0:	8e 83       	std	Y+6, r24	; 0x06
    22f2:	c0 85       	ldd	r28, Z+8	; 0x08
    22f4:	d1 85       	ldd	r29, Z+9	; 0x09
    22f6:	86 81       	ldd	r24, Z+6	; 0x06
    22f8:	97 81       	ldd	r25, Z+7	; 0x07
    22fa:	9d 83       	std	Y+5, r25	; 0x05
    22fc:	8c 83       	std	Y+4, r24	; 0x04
    22fe:	11 96       	adiw	r26, 0x01	; 1
    2300:	8d 91       	ld	r24, X+
    2302:	9c 91       	ld	r25, X
    2304:	12 97       	sbiw	r26, 0x02	; 2
    2306:	9f 01       	movw	r18, r30
    2308:	2e 5f       	subi	r18, 0xFE	; 254
    230a:	3f 4f       	sbci	r19, 0xFF	; 255
    230c:	82 17       	cp	r24, r18
    230e:	93 07       	cpc	r25, r19
    2310:	31 f4       	brne	.+12     	; 0x231e <xTaskResumeAll+0xbc>
    2312:	80 85       	ldd	r24, Z+8	; 0x08
    2314:	91 85       	ldd	r25, Z+9	; 0x09
    2316:	12 96       	adiw	r26, 0x02	; 2
    2318:	9c 93       	st	X, r25
    231a:	8e 93       	st	-X, r24
    231c:	11 97       	sbiw	r26, 0x01	; 1
    231e:	15 86       	std	Z+13, r1	; 0x0d
    2320:	14 86       	std	Z+12, r1	; 0x0c
    2322:	8c 91       	ld	r24, X
    2324:	81 50       	subi	r24, 0x01	; 1
    2326:	8c 93       	st	X, r24
    2328:	a2 8d       	ldd	r26, Z+26	; 0x1a
    232a:	80 91 e5 14 	lds	r24, 0x14E5	; 0x8014e5 <uxTopReadyPriority>
    232e:	8a 17       	cp	r24, r26
    2330:	10 f4       	brcc	.+4      	; 0x2336 <xTaskResumeAll+0xd4>
    2332:	a0 93 e5 14 	sts	0x14E5, r26	; 0x8014e5 <uxTopReadyPriority>
    2336:	8b e0       	ldi	r24, 0x0B	; 11
    2338:	8a 9f       	mul	r24, r26
    233a:	d0 01       	movw	r26, r0
    233c:	11 24       	eor	r1, r1
    233e:	a9 5d       	subi	r26, 0xD9	; 217
    2340:	ba 4e       	sbci	r27, 0xEA	; 234
    2342:	11 96       	adiw	r26, 0x01	; 1
    2344:	0d 90       	ld	r0, X+
    2346:	bc 91       	ld	r27, X
    2348:	a0 2d       	mov	r26, r0
    234a:	b7 83       	std	Z+7, r27	; 0x07
    234c:	a6 83       	std	Z+6, r26	; 0x06
    234e:	16 96       	adiw	r26, 0x06	; 6
    2350:	4d 91       	ld	r20, X+
    2352:	5c 91       	ld	r21, X
    2354:	17 97       	sbiw	r26, 0x07	; 7
    2356:	51 87       	std	Z+9, r21	; 0x09
    2358:	40 87       	std	Z+8, r20	; 0x08
    235a:	16 96       	adiw	r26, 0x06	; 6
    235c:	cd 91       	ld	r28, X+
    235e:	dc 91       	ld	r29, X
    2360:	17 97       	sbiw	r26, 0x07	; 7
    2362:	3d 83       	std	Y+5, r19	; 0x05
    2364:	2c 83       	std	Y+4, r18	; 0x04
    2366:	17 96       	adiw	r26, 0x07	; 7
    2368:	3c 93       	st	X, r19
    236a:	2e 93       	st	-X, r18
    236c:	16 97       	sbiw	r26, 0x06	; 6
    236e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2370:	8a 9f       	mul	r24, r26
    2372:	d0 01       	movw	r26, r0
    2374:	11 24       	eor	r1, r1
    2376:	a9 5d       	subi	r26, 0xD9	; 217
    2378:	ba 4e       	sbci	r27, 0xEA	; 234
    237a:	b5 87       	std	Z+13, r27	; 0x0d
    237c:	a4 87       	std	Z+12, r26	; 0x0c
    237e:	8c 91       	ld	r24, X
    2380:	8f 5f       	subi	r24, 0xFF	; 255
    2382:	8c 93       	st	X, r24
    2384:	92 8d       	ldd	r25, Z+26	; 0x1a
    2386:	a0 91 95 15 	lds	r26, 0x1595	; 0x801595 <pxCurrentTCB>
    238a:	b0 91 96 15 	lds	r27, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    238e:	5a 96       	adiw	r26, 0x1a	; 26
    2390:	8c 91       	ld	r24, X
    2392:	98 17       	cp	r25, r24
    2394:	30 f0       	brcs	.+12     	; 0x23a2 <xTaskResumeAll+0x140>
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	80 93 df 14 	sts	0x14DF, r24	; 0x8014df <xYieldPending>
    239c:	02 c0       	rjmp	.+4      	; 0x23a2 <xTaskResumeAll+0x140>
    239e:	e0 e0       	ldi	r30, 0x00	; 0
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 91 02 15 	lds	r24, 0x1502	; 0x801502 <xPendingReadyList>
    23a6:	81 11       	cpse	r24, r1
    23a8:	73 cf       	rjmp	.-282    	; 0x2290 <xTaskResumeAll+0x2e>
    23aa:	ef 2b       	or	r30, r31
    23ac:	09 f0       	breq	.+2      	; 0x23b0 <xTaskResumeAll+0x14e>
    23ae:	7e db       	rcall	.-2308   	; 0x1aac <prvResetNextTaskUnblockTime>
    23b0:	c0 90 e0 14 	lds	r12, 0x14E0	; 0x8014e0 <xPendedTicks>
    23b4:	d0 90 e1 14 	lds	r13, 0x14E1	; 0x8014e1 <xPendedTicks+0x1>
    23b8:	e0 90 e2 14 	lds	r14, 0x14E2	; 0x8014e2 <xPendedTicks+0x2>
    23bc:	f0 90 e3 14 	lds	r15, 0x14E3	; 0x8014e3 <xPendedTicks+0x3>
    23c0:	c1 14       	cp	r12, r1
    23c2:	d1 04       	cpc	r13, r1
    23c4:	e1 04       	cpc	r14, r1
    23c6:	f1 04       	cpc	r15, r1
    23c8:	a1 f0       	breq	.+40     	; 0x23f2 <xTaskResumeAll+0x190>
    23ca:	1f de       	rcall	.-962    	; 0x200a <xTaskIncrementTick>
    23cc:	88 23       	and	r24, r24
    23ce:	19 f0       	breq	.+6      	; 0x23d6 <xTaskResumeAll+0x174>
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	80 93 df 14 	sts	0x14DF, r24	; 0x8014df <xYieldPending>
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	c8 1a       	sub	r12, r24
    23da:	d1 08       	sbc	r13, r1
    23dc:	e1 08       	sbc	r14, r1
    23de:	f1 08       	sbc	r15, r1
    23e0:	a1 f7       	brne	.-24     	; 0x23ca <xTaskResumeAll+0x168>
    23e2:	10 92 e0 14 	sts	0x14E0, r1	; 0x8014e0 <xPendedTicks>
    23e6:	10 92 e1 14 	sts	0x14E1, r1	; 0x8014e1 <xPendedTicks+0x1>
    23ea:	10 92 e2 14 	sts	0x14E2, r1	; 0x8014e2 <xPendedTicks+0x2>
    23ee:	10 92 e3 14 	sts	0x14E3, r1	; 0x8014e3 <xPendedTicks+0x3>
    23f2:	80 91 df 14 	lds	r24, 0x14DF	; 0x8014df <xYieldPending>
    23f6:	88 23       	and	r24, r24
    23f8:	31 f0       	breq	.+12     	; 0x2406 <xTaskResumeAll+0x1a4>
    23fa:	0e 94 87 06 	call	0xd0e	; 0xd0e <vPortYield>
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	03 c0       	rjmp	.+6      	; 0x2408 <xTaskResumeAll+0x1a6>
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	01 c0       	rjmp	.+2      	; 0x2408 <xTaskResumeAll+0x1a6>
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	0f 90       	pop	r0
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	df 91       	pop	r29
    240e:	cf 91       	pop	r28
    2410:	ff 90       	pop	r15
    2412:	ef 90       	pop	r14
    2414:	df 90       	pop	r13
    2416:	cf 90       	pop	r12
    2418:	08 95       	ret

0000241a <xTaskDelayUntil>:
    241a:	8f 92       	push	r8
    241c:	9f 92       	push	r9
    241e:	af 92       	push	r10
    2420:	bf 92       	push	r11
    2422:	cf 92       	push	r12
    2424:	df 92       	push	r13
    2426:	ef 92       	push	r14
    2428:	ff 92       	push	r15
    242a:	1f 93       	push	r17
    242c:	cf 93       	push	r28
    242e:	df 93       	push	r29
    2430:	ec 01       	movw	r28, r24
    2432:	6a 01       	movw	r12, r20
    2434:	7b 01       	movw	r14, r22
    2436:	d5 dd       	rcall	.-1110   	; 0x1fe2 <vTaskSuspendAll>
    2438:	80 90 e6 14 	lds	r8, 0x14E6	; 0x8014e6 <xTickCount>
    243c:	90 90 e7 14 	lds	r9, 0x14E7	; 0x8014e7 <xTickCount+0x1>
    2440:	a0 90 e8 14 	lds	r10, 0x14E8	; 0x8014e8 <xTickCount+0x2>
    2444:	b0 90 e9 14 	lds	r11, 0x14E9	; 0x8014e9 <xTickCount+0x3>
    2448:	88 81       	ld	r24, Y
    244a:	99 81       	ldd	r25, Y+1	; 0x01
    244c:	aa 81       	ldd	r26, Y+2	; 0x02
    244e:	bb 81       	ldd	r27, Y+3	; 0x03
    2450:	ac 01       	movw	r20, r24
    2452:	bd 01       	movw	r22, r26
    2454:	4c 0d       	add	r20, r12
    2456:	5d 1d       	adc	r21, r13
    2458:	6e 1d       	adc	r22, r14
    245a:	7f 1d       	adc	r23, r15
    245c:	88 16       	cp	r8, r24
    245e:	99 06       	cpc	r9, r25
    2460:	aa 06       	cpc	r10, r26
    2462:	bb 06       	cpc	r11, r27
    2464:	60 f4       	brcc	.+24     	; 0x247e <xTaskDelayUntil+0x64>
    2466:	48 17       	cp	r20, r24
    2468:	59 07       	cpc	r21, r25
    246a:	6a 07       	cpc	r22, r26
    246c:	7b 07       	cpc	r23, r27
    246e:	98 f4       	brcc	.+38     	; 0x2496 <xTaskDelayUntil+0x7c>
    2470:	84 16       	cp	r8, r20
    2472:	95 06       	cpc	r9, r21
    2474:	a6 06       	cpc	r10, r22
    2476:	b7 06       	cpc	r11, r23
    2478:	80 f0       	brcs	.+32     	; 0x249a <xTaskDelayUntil+0x80>
    247a:	10 e0       	ldi	r17, 0x00	; 0
    247c:	13 c0       	rjmp	.+38     	; 0x24a4 <xTaskDelayUntil+0x8a>
    247e:	48 17       	cp	r20, r24
    2480:	59 07       	cpc	r21, r25
    2482:	6a 07       	cpc	r22, r26
    2484:	7b 07       	cpc	r23, r27
    2486:	58 f0       	brcs	.+22     	; 0x249e <xTaskDelayUntil+0x84>
    2488:	84 16       	cp	r8, r20
    248a:	95 06       	cpc	r9, r21
    248c:	a6 06       	cpc	r10, r22
    248e:	b7 06       	cpc	r11, r23
    2490:	40 f0       	brcs	.+16     	; 0x24a2 <xTaskDelayUntil+0x88>
    2492:	10 e0       	ldi	r17, 0x00	; 0
    2494:	07 c0       	rjmp	.+14     	; 0x24a4 <xTaskDelayUntil+0x8a>
    2496:	10 e0       	ldi	r17, 0x00	; 0
    2498:	05 c0       	rjmp	.+10     	; 0x24a4 <xTaskDelayUntil+0x8a>
    249a:	11 e0       	ldi	r17, 0x01	; 1
    249c:	03 c0       	rjmp	.+6      	; 0x24a4 <xTaskDelayUntil+0x8a>
    249e:	11 e0       	ldi	r17, 0x01	; 1
    24a0:	01 c0       	rjmp	.+2      	; 0x24a4 <xTaskDelayUntil+0x8a>
    24a2:	11 e0       	ldi	r17, 0x01	; 1
    24a4:	48 83       	st	Y, r20
    24a6:	59 83       	std	Y+1, r21	; 0x01
    24a8:	6a 83       	std	Y+2, r22	; 0x02
    24aa:	7b 83       	std	Y+3, r23	; 0x03
    24ac:	11 23       	and	r17, r17
    24ae:	41 f0       	breq	.+16     	; 0x24c0 <xTaskDelayUntil+0xa6>
    24b0:	cb 01       	movw	r24, r22
    24b2:	ba 01       	movw	r22, r20
    24b4:	68 19       	sub	r22, r8
    24b6:	79 09       	sbc	r23, r9
    24b8:	8a 09       	sbc	r24, r10
    24ba:	9b 09       	sbc	r25, r11
    24bc:	40 e0       	ldi	r20, 0x00	; 0
    24be:	6b dc       	rcall	.-1834   	; 0x1d96 <prvAddCurrentTaskToDelayedList>
    24c0:	d0 de       	rcall	.-608    	; 0x2262 <xTaskResumeAll>
    24c2:	81 11       	cpse	r24, r1
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <xTaskDelayUntil+0xb0>
    24c6:	0e 94 87 06 	call	0xd0e	; 0xd0e <vPortYield>
    24ca:	81 2f       	mov	r24, r17
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	1f 91       	pop	r17
    24d2:	ff 90       	pop	r15
    24d4:	ef 90       	pop	r14
    24d6:	df 90       	pop	r13
    24d8:	cf 90       	pop	r12
    24da:	bf 90       	pop	r11
    24dc:	af 90       	pop	r10
    24de:	9f 90       	pop	r9
    24e0:	8f 90       	pop	r8
    24e2:	08 95       	ret

000024e4 <vTaskDelay>:
    24e4:	cf 92       	push	r12
    24e6:	df 92       	push	r13
    24e8:	ef 92       	push	r14
    24ea:	ff 92       	push	r15
    24ec:	6b 01       	movw	r12, r22
    24ee:	7c 01       	movw	r14, r24
    24f0:	67 2b       	or	r22, r23
    24f2:	68 2b       	or	r22, r24
    24f4:	69 2b       	or	r22, r25
    24f6:	39 f0       	breq	.+14     	; 0x2506 <vTaskDelay+0x22>
    24f8:	74 dd       	rcall	.-1304   	; 0x1fe2 <vTaskSuspendAll>
    24fa:	40 e0       	ldi	r20, 0x00	; 0
    24fc:	c7 01       	movw	r24, r14
    24fe:	b6 01       	movw	r22, r12
    2500:	4a dc       	rcall	.-1900   	; 0x1d96 <prvAddCurrentTaskToDelayedList>
    2502:	af de       	rcall	.-674    	; 0x2262 <xTaskResumeAll>
    2504:	01 c0       	rjmp	.+2      	; 0x2508 <vTaskDelay+0x24>
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	81 11       	cpse	r24, r1
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <vTaskDelay+0x2c>
    250c:	0e 94 87 06 	call	0xd0e	; 0xd0e <vPortYield>
    2510:	ff 90       	pop	r15
    2512:	ef 90       	pop	r14
    2514:	df 90       	pop	r13
    2516:	cf 90       	pop	r12
    2518:	08 95       	ret

0000251a <vTaskSwitchContext>:
    251a:	80 91 d6 14 	lds	r24, 0x14D6	; 0x8014d6 <uxSchedulerSuspended>
    251e:	88 23       	and	r24, r24
    2520:	21 f0       	breq	.+8      	; 0x252a <vTaskSwitchContext+0x10>
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	80 93 df 14 	sts	0x14DF, r24	; 0x8014df <xYieldPending>
    2528:	08 95       	ret
    252a:	10 92 df 14 	sts	0x14DF, r1	; 0x8014df <xYieldPending>
    252e:	e0 91 95 15 	lds	r30, 0x1595	; 0x801595 <pxCurrentTCB>
    2532:	f0 91 96 15 	lds	r31, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    2536:	20 81       	ld	r18, Z
    2538:	31 81       	ldd	r19, Z+1	; 0x01
    253a:	e0 91 95 15 	lds	r30, 0x1595	; 0x801595 <pxCurrentTCB>
    253e:	f0 91 96 15 	lds	r31, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    2542:	83 8d       	ldd	r24, Z+27	; 0x1b
    2544:	94 8d       	ldd	r25, Z+28	; 0x1c
    2546:	82 17       	cp	r24, r18
    2548:	93 07       	cpc	r25, r19
    254a:	60 f0       	brcs	.+24     	; 0x2564 <vTaskSwitchContext+0x4a>
    254c:	60 91 95 15 	lds	r22, 0x1595	; 0x801595 <pxCurrentTCB>
    2550:	70 91 96 15 	lds	r23, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    2554:	63 5e       	subi	r22, 0xE3	; 227
    2556:	7f 4f       	sbci	r23, 0xFF	; 255
    2558:	80 91 95 15 	lds	r24, 0x1595	; 0x801595 <pxCurrentTCB>
    255c:	90 91 96 15 	lds	r25, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    2560:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <vApplicationStackOverflowHook>
    2564:	80 91 e5 14 	lds	r24, 0x14E5	; 0x8014e5 <uxTopReadyPriority>
    2568:	01 c0       	rjmp	.+2      	; 0x256c <vTaskSwitchContext+0x52>
    256a:	81 50       	subi	r24, 0x01	; 1
    256c:	28 2f       	mov	r18, r24
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	9b e0       	ldi	r25, 0x0B	; 11
    2572:	92 9f       	mul	r25, r18
    2574:	f0 01       	movw	r30, r0
    2576:	93 9f       	mul	r25, r19
    2578:	f0 0d       	add	r31, r0
    257a:	11 24       	eor	r1, r1
    257c:	e9 5d       	subi	r30, 0xD9	; 217
    257e:	fa 4e       	sbci	r31, 0xEA	; 234
    2580:	90 81       	ld	r25, Z
    2582:	99 23       	and	r25, r25
    2584:	91 f3       	breq	.-28     	; 0x256a <vTaskSwitchContext+0x50>
    2586:	9b e0       	ldi	r25, 0x0B	; 11
    2588:	92 9f       	mul	r25, r18
    258a:	a0 01       	movw	r20, r0
    258c:	93 9f       	mul	r25, r19
    258e:	50 0d       	add	r21, r0
    2590:	11 24       	eor	r1, r1
    2592:	df 01       	movw	r26, r30
    2594:	01 80       	ldd	r0, Z+1	; 0x01
    2596:	f2 81       	ldd	r31, Z+2	; 0x02
    2598:	e0 2d       	mov	r30, r0
    259a:	04 80       	ldd	r0, Z+4	; 0x04
    259c:	f5 81       	ldd	r31, Z+5	; 0x05
    259e:	e0 2d       	mov	r30, r0
    25a0:	12 96       	adiw	r26, 0x02	; 2
    25a2:	fc 93       	st	X, r31
    25a4:	ee 93       	st	-X, r30
    25a6:	11 97       	sbiw	r26, 0x01	; 1
    25a8:	46 5d       	subi	r20, 0xD6	; 214
    25aa:	5a 4e       	sbci	r21, 0xEA	; 234
    25ac:	e4 17       	cp	r30, r20
    25ae:	f5 07       	cpc	r31, r21
    25b0:	29 f4       	brne	.+10     	; 0x25bc <vTaskSwitchContext+0xa2>
    25b2:	44 81       	ldd	r20, Z+4	; 0x04
    25b4:	55 81       	ldd	r21, Z+5	; 0x05
    25b6:	fd 01       	movw	r30, r26
    25b8:	52 83       	std	Z+2, r21	; 0x02
    25ba:	41 83       	std	Z+1, r20	; 0x01
    25bc:	9b e0       	ldi	r25, 0x0B	; 11
    25be:	92 9f       	mul	r25, r18
    25c0:	f0 01       	movw	r30, r0
    25c2:	93 9f       	mul	r25, r19
    25c4:	f0 0d       	add	r31, r0
    25c6:	11 24       	eor	r1, r1
    25c8:	e9 5d       	subi	r30, 0xD9	; 217
    25ca:	fa 4e       	sbci	r31, 0xEA	; 234
    25cc:	01 80       	ldd	r0, Z+1	; 0x01
    25ce:	f2 81       	ldd	r31, Z+2	; 0x02
    25d0:	e0 2d       	mov	r30, r0
    25d2:	20 85       	ldd	r18, Z+8	; 0x08
    25d4:	31 85       	ldd	r19, Z+9	; 0x09
    25d6:	30 93 96 15 	sts	0x1596, r19	; 0x801596 <pxCurrentTCB+0x1>
    25da:	20 93 95 15 	sts	0x1595, r18	; 0x801595 <pxCurrentTCB>
    25de:	80 93 e5 14 	sts	0x14E5, r24	; 0x8014e5 <uxTopReadyPriority>
    25e2:	08 95       	ret

000025e4 <vTaskPlaceOnEventList>:
    25e4:	cf 92       	push	r12
    25e6:	df 92       	push	r13
    25e8:	ef 92       	push	r14
    25ea:	ff 92       	push	r15
    25ec:	6a 01       	movw	r12, r20
    25ee:	7b 01       	movw	r14, r22
    25f0:	60 91 95 15 	lds	r22, 0x1595	; 0x801595 <pxCurrentTCB>
    25f4:	70 91 96 15 	lds	r23, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    25f8:	62 5f       	subi	r22, 0xF2	; 242
    25fa:	7f 4f       	sbci	r23, 0xFF	; 255
    25fc:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vListInsert>
    2600:	41 e0       	ldi	r20, 0x01	; 1
    2602:	c7 01       	movw	r24, r14
    2604:	b6 01       	movw	r22, r12
    2606:	c7 db       	rcall	.-2162   	; 0x1d96 <prvAddCurrentTaskToDelayedList>
    2608:	ff 90       	pop	r15
    260a:	ef 90       	pop	r14
    260c:	df 90       	pop	r13
    260e:	cf 90       	pop	r12
    2610:	08 95       	ret

00002612 <vTaskPlaceOnUnorderedEventList>:
    2612:	0f 93       	push	r16
    2614:	1f 93       	push	r17
    2616:	cf 93       	push	r28
    2618:	df 93       	push	r29
    261a:	fc 01       	movw	r30, r24
    261c:	a0 91 95 15 	lds	r26, 0x1595	; 0x801595 <pxCurrentTCB>
    2620:	b0 91 96 15 	lds	r27, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    2624:	70 68       	ori	r23, 0x80	; 128
    2626:	1e 96       	adiw	r26, 0x0e	; 14
    2628:	4d 93       	st	X+, r20
    262a:	5d 93       	st	X+, r21
    262c:	6d 93       	st	X+, r22
    262e:	7c 93       	st	X, r23
    2630:	51 97       	sbiw	r26, 0x11	; 17
    2632:	a1 81       	ldd	r26, Z+1	; 0x01
    2634:	b2 81       	ldd	r27, Z+2	; 0x02
    2636:	c0 91 95 15 	lds	r28, 0x1595	; 0x801595 <pxCurrentTCB>
    263a:	d0 91 96 15 	lds	r29, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    263e:	bb 8b       	std	Y+19, r27	; 0x13
    2640:	aa 8b       	std	Y+18, r26	; 0x12
    2642:	c0 91 95 15 	lds	r28, 0x1595	; 0x801595 <pxCurrentTCB>
    2646:	d0 91 96 15 	lds	r29, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    264a:	16 96       	adiw	r26, 0x06	; 6
    264c:	8d 91       	ld	r24, X+
    264e:	9c 91       	ld	r25, X
    2650:	17 97       	sbiw	r26, 0x07	; 7
    2652:	9d 8b       	std	Y+21, r25	; 0x15
    2654:	8c 8b       	std	Y+20, r24	; 0x14
    2656:	16 96       	adiw	r26, 0x06	; 6
    2658:	cd 91       	ld	r28, X+
    265a:	dc 91       	ld	r29, X
    265c:	17 97       	sbiw	r26, 0x07	; 7
    265e:	80 91 95 15 	lds	r24, 0x1595	; 0x801595 <pxCurrentTCB>
    2662:	90 91 96 15 	lds	r25, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    2666:	0e 96       	adiw	r24, 0x0e	; 14
    2668:	9d 83       	std	Y+5, r25	; 0x05
    266a:	8c 83       	std	Y+4, r24	; 0x04
    266c:	80 91 95 15 	lds	r24, 0x1595	; 0x801595 <pxCurrentTCB>
    2670:	90 91 96 15 	lds	r25, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    2674:	0e 96       	adiw	r24, 0x0e	; 14
    2676:	17 96       	adiw	r26, 0x07	; 7
    2678:	9c 93       	st	X, r25
    267a:	8e 93       	st	-X, r24
    267c:	16 97       	sbiw	r26, 0x06	; 6
    267e:	a0 91 95 15 	lds	r26, 0x1595	; 0x801595 <pxCurrentTCB>
    2682:	b0 91 96 15 	lds	r27, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    2686:	59 96       	adiw	r26, 0x19	; 25
    2688:	fc 93       	st	X, r31
    268a:	ee 93       	st	-X, r30
    268c:	58 97       	sbiw	r26, 0x18	; 24
    268e:	80 81       	ld	r24, Z
    2690:	8f 5f       	subi	r24, 0xFF	; 255
    2692:	80 83       	st	Z, r24
    2694:	41 e0       	ldi	r20, 0x01	; 1
    2696:	c9 01       	movw	r24, r18
    2698:	b8 01       	movw	r22, r16
    269a:	7d db       	rcall	.-2310   	; 0x1d96 <prvAddCurrentTaskToDelayedList>
    269c:	df 91       	pop	r29
    269e:	cf 91       	pop	r28
    26a0:	1f 91       	pop	r17
    26a2:	0f 91       	pop	r16
    26a4:	08 95       	ret

000026a6 <vTaskPlaceOnEventListRestricted>:
    26a6:	cf 93       	push	r28
    26a8:	df 93       	push	r29
    26aa:	fc 01       	movw	r30, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	ba 01       	movw	r22, r20
    26b0:	a1 81       	ldd	r26, Z+1	; 0x01
    26b2:	b2 81       	ldd	r27, Z+2	; 0x02
    26b4:	c0 91 95 15 	lds	r28, 0x1595	; 0x801595 <pxCurrentTCB>
    26b8:	d0 91 96 15 	lds	r29, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    26bc:	bb 8b       	std	Y+19, r27	; 0x13
    26be:	aa 8b       	std	Y+18, r26	; 0x12
    26c0:	c0 91 95 15 	lds	r28, 0x1595	; 0x801595 <pxCurrentTCB>
    26c4:	d0 91 96 15 	lds	r29, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    26c8:	16 96       	adiw	r26, 0x06	; 6
    26ca:	4d 91       	ld	r20, X+
    26cc:	5c 91       	ld	r21, X
    26ce:	17 97       	sbiw	r26, 0x07	; 7
    26d0:	5d 8b       	std	Y+21, r21	; 0x15
    26d2:	4c 8b       	std	Y+20, r20	; 0x14
    26d4:	16 96       	adiw	r26, 0x06	; 6
    26d6:	cd 91       	ld	r28, X+
    26d8:	dc 91       	ld	r29, X
    26da:	17 97       	sbiw	r26, 0x07	; 7
    26dc:	40 91 95 15 	lds	r20, 0x1595	; 0x801595 <pxCurrentTCB>
    26e0:	50 91 96 15 	lds	r21, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    26e4:	42 5f       	subi	r20, 0xF2	; 242
    26e6:	5f 4f       	sbci	r21, 0xFF	; 255
    26e8:	5d 83       	std	Y+5, r21	; 0x05
    26ea:	4c 83       	std	Y+4, r20	; 0x04
    26ec:	40 91 95 15 	lds	r20, 0x1595	; 0x801595 <pxCurrentTCB>
    26f0:	50 91 96 15 	lds	r21, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    26f4:	42 5f       	subi	r20, 0xF2	; 242
    26f6:	5f 4f       	sbci	r21, 0xFF	; 255
    26f8:	17 96       	adiw	r26, 0x07	; 7
    26fa:	5c 93       	st	X, r21
    26fc:	4e 93       	st	-X, r20
    26fe:	16 97       	sbiw	r26, 0x06	; 6
    2700:	a0 91 95 15 	lds	r26, 0x1595	; 0x801595 <pxCurrentTCB>
    2704:	b0 91 96 15 	lds	r27, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    2708:	59 96       	adiw	r26, 0x19	; 25
    270a:	fc 93       	st	X, r31
    270c:	ee 93       	st	-X, r30
    270e:	58 97       	sbiw	r26, 0x18	; 24
    2710:	30 81       	ld	r19, Z
    2712:	3f 5f       	subi	r19, 0xFF	; 255
    2714:	30 83       	st	Z, r19
    2716:	22 23       	and	r18, r18
    2718:	19 f0       	breq	.+6      	; 0x2720 <vTaskPlaceOnEventListRestricted+0x7a>
    271a:	6f ef       	ldi	r22, 0xFF	; 255
    271c:	7f ef       	ldi	r23, 0xFF	; 255
    271e:	cb 01       	movw	r24, r22
    2720:	42 2f       	mov	r20, r18
    2722:	39 db       	rcall	.-2446   	; 0x1d96 <prvAddCurrentTaskToDelayedList>
    2724:	df 91       	pop	r29
    2726:	cf 91       	pop	r28
    2728:	08 95       	ret

0000272a <xTaskRemoveFromEventList>:
    272a:	cf 93       	push	r28
    272c:	df 93       	push	r29
    272e:	dc 01       	movw	r26, r24
    2730:	17 96       	adiw	r26, 0x07	; 7
    2732:	ed 91       	ld	r30, X+
    2734:	fc 91       	ld	r31, X
    2736:	18 97       	sbiw	r26, 0x08	; 8
    2738:	00 84       	ldd	r0, Z+8	; 0x08
    273a:	f1 85       	ldd	r31, Z+9	; 0x09
    273c:	e0 2d       	mov	r30, r0
    273e:	a0 8d       	ldd	r26, Z+24	; 0x18
    2740:	b1 8d       	ldd	r27, Z+25	; 0x19
    2742:	c2 89       	ldd	r28, Z+18	; 0x12
    2744:	d3 89       	ldd	r29, Z+19	; 0x13
    2746:	84 89       	ldd	r24, Z+20	; 0x14
    2748:	95 89       	ldd	r25, Z+21	; 0x15
    274a:	9f 83       	std	Y+7, r25	; 0x07
    274c:	8e 83       	std	Y+6, r24	; 0x06
    274e:	c4 89       	ldd	r28, Z+20	; 0x14
    2750:	d5 89       	ldd	r29, Z+21	; 0x15
    2752:	82 89       	ldd	r24, Z+18	; 0x12
    2754:	93 89       	ldd	r25, Z+19	; 0x13
    2756:	9d 83       	std	Y+5, r25	; 0x05
    2758:	8c 83       	std	Y+4, r24	; 0x04
    275a:	11 96       	adiw	r26, 0x01	; 1
    275c:	8d 91       	ld	r24, X+
    275e:	9c 91       	ld	r25, X
    2760:	12 97       	sbiw	r26, 0x02	; 2
    2762:	9f 01       	movw	r18, r30
    2764:	22 5f       	subi	r18, 0xF2	; 242
    2766:	3f 4f       	sbci	r19, 0xFF	; 255
    2768:	82 17       	cp	r24, r18
    276a:	93 07       	cpc	r25, r19
    276c:	31 f4       	brne	.+12     	; 0x277a <xTaskRemoveFromEventList+0x50>
    276e:	84 89       	ldd	r24, Z+20	; 0x14
    2770:	95 89       	ldd	r25, Z+21	; 0x15
    2772:	12 96       	adiw	r26, 0x02	; 2
    2774:	9c 93       	st	X, r25
    2776:	8e 93       	st	-X, r24
    2778:	11 97       	sbiw	r26, 0x01	; 1
    277a:	11 8e       	std	Z+25, r1	; 0x19
    277c:	10 8e       	std	Z+24, r1	; 0x18
    277e:	8c 91       	ld	r24, X
    2780:	81 50       	subi	r24, 0x01	; 1
    2782:	8c 93       	st	X, r24
    2784:	80 91 d6 14 	lds	r24, 0x14D6	; 0x8014d6 <uxSchedulerSuspended>
    2788:	81 11       	cpse	r24, r1
    278a:	52 c0       	rjmp	.+164    	; 0x2830 <xTaskRemoveFromEventList+0x106>
    278c:	a4 85       	ldd	r26, Z+12	; 0x0c
    278e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2790:	c6 81       	ldd	r28, Z+6	; 0x06
    2792:	d7 81       	ldd	r29, Z+7	; 0x07
    2794:	80 85       	ldd	r24, Z+8	; 0x08
    2796:	91 85       	ldd	r25, Z+9	; 0x09
    2798:	9f 83       	std	Y+7, r25	; 0x07
    279a:	8e 83       	std	Y+6, r24	; 0x06
    279c:	c0 85       	ldd	r28, Z+8	; 0x08
    279e:	d1 85       	ldd	r29, Z+9	; 0x09
    27a0:	86 81       	ldd	r24, Z+6	; 0x06
    27a2:	97 81       	ldd	r25, Z+7	; 0x07
    27a4:	9d 83       	std	Y+5, r25	; 0x05
    27a6:	8c 83       	std	Y+4, r24	; 0x04
    27a8:	11 96       	adiw	r26, 0x01	; 1
    27aa:	8d 91       	ld	r24, X+
    27ac:	9c 91       	ld	r25, X
    27ae:	12 97       	sbiw	r26, 0x02	; 2
    27b0:	9f 01       	movw	r18, r30
    27b2:	2e 5f       	subi	r18, 0xFE	; 254
    27b4:	3f 4f       	sbci	r19, 0xFF	; 255
    27b6:	82 17       	cp	r24, r18
    27b8:	93 07       	cpc	r25, r19
    27ba:	31 f4       	brne	.+12     	; 0x27c8 <xTaskRemoveFromEventList+0x9e>
    27bc:	80 85       	ldd	r24, Z+8	; 0x08
    27be:	91 85       	ldd	r25, Z+9	; 0x09
    27c0:	12 96       	adiw	r26, 0x02	; 2
    27c2:	9c 93       	st	X, r25
    27c4:	8e 93       	st	-X, r24
    27c6:	11 97       	sbiw	r26, 0x01	; 1
    27c8:	15 86       	std	Z+13, r1	; 0x0d
    27ca:	14 86       	std	Z+12, r1	; 0x0c
    27cc:	8c 91       	ld	r24, X
    27ce:	81 50       	subi	r24, 0x01	; 1
    27d0:	8c 93       	st	X, r24
    27d2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    27d4:	80 91 e5 14 	lds	r24, 0x14E5	; 0x8014e5 <uxTopReadyPriority>
    27d8:	8a 17       	cp	r24, r26
    27da:	10 f4       	brcc	.+4      	; 0x27e0 <xTaskRemoveFromEventList+0xb6>
    27dc:	a0 93 e5 14 	sts	0x14E5, r26	; 0x8014e5 <uxTopReadyPriority>
    27e0:	8b e0       	ldi	r24, 0x0B	; 11
    27e2:	8a 9f       	mul	r24, r26
    27e4:	d0 01       	movw	r26, r0
    27e6:	11 24       	eor	r1, r1
    27e8:	a9 5d       	subi	r26, 0xD9	; 217
    27ea:	ba 4e       	sbci	r27, 0xEA	; 234
    27ec:	11 96       	adiw	r26, 0x01	; 1
    27ee:	0d 90       	ld	r0, X+
    27f0:	bc 91       	ld	r27, X
    27f2:	a0 2d       	mov	r26, r0
    27f4:	b7 83       	std	Z+7, r27	; 0x07
    27f6:	a6 83       	std	Z+6, r26	; 0x06
    27f8:	16 96       	adiw	r26, 0x06	; 6
    27fa:	4d 91       	ld	r20, X+
    27fc:	5c 91       	ld	r21, X
    27fe:	17 97       	sbiw	r26, 0x07	; 7
    2800:	51 87       	std	Z+9, r21	; 0x09
    2802:	40 87       	std	Z+8, r20	; 0x08
    2804:	16 96       	adiw	r26, 0x06	; 6
    2806:	cd 91       	ld	r28, X+
    2808:	dc 91       	ld	r29, X
    280a:	17 97       	sbiw	r26, 0x07	; 7
    280c:	3d 83       	std	Y+5, r19	; 0x05
    280e:	2c 83       	std	Y+4, r18	; 0x04
    2810:	17 96       	adiw	r26, 0x07	; 7
    2812:	3c 93       	st	X, r19
    2814:	2e 93       	st	-X, r18
    2816:	16 97       	sbiw	r26, 0x06	; 6
    2818:	a2 8d       	ldd	r26, Z+26	; 0x1a
    281a:	8a 9f       	mul	r24, r26
    281c:	d0 01       	movw	r26, r0
    281e:	11 24       	eor	r1, r1
    2820:	a9 5d       	subi	r26, 0xD9	; 217
    2822:	ba 4e       	sbci	r27, 0xEA	; 234
    2824:	b5 87       	std	Z+13, r27	; 0x0d
    2826:	a4 87       	std	Z+12, r26	; 0x0c
    2828:	8c 91       	ld	r24, X
    282a:	8f 5f       	subi	r24, 0xFF	; 255
    282c:	8c 93       	st	X, r24
    282e:	1c c0       	rjmp	.+56     	; 0x2868 <xTaskRemoveFromEventList+0x13e>
    2830:	42 e0       	ldi	r20, 0x02	; 2
    2832:	55 e1       	ldi	r21, 0x15	; 21
    2834:	da 01       	movw	r26, r20
    2836:	11 96       	adiw	r26, 0x01	; 1
    2838:	cd 91       	ld	r28, X+
    283a:	dc 91       	ld	r29, X
    283c:	12 97       	sbiw	r26, 0x02	; 2
    283e:	d3 8b       	std	Z+19, r29	; 0x13
    2840:	c2 8b       	std	Z+18, r28	; 0x12
    2842:	8e 81       	ldd	r24, Y+6	; 0x06
    2844:	9f 81       	ldd	r25, Y+7	; 0x07
    2846:	95 8b       	std	Z+21, r25	; 0x15
    2848:	84 8b       	std	Z+20, r24	; 0x14
    284a:	8e 81       	ldd	r24, Y+6	; 0x06
    284c:	9f 81       	ldd	r25, Y+7	; 0x07
    284e:	dc 01       	movw	r26, r24
    2850:	15 96       	adiw	r26, 0x05	; 5
    2852:	3c 93       	st	X, r19
    2854:	2e 93       	st	-X, r18
    2856:	14 97       	sbiw	r26, 0x04	; 4
    2858:	3f 83       	std	Y+7, r19	; 0x07
    285a:	2e 83       	std	Y+6, r18	; 0x06
    285c:	51 8f       	std	Z+25, r21	; 0x19
    285e:	40 8f       	std	Z+24, r20	; 0x18
    2860:	da 01       	movw	r26, r20
    2862:	8c 91       	ld	r24, X
    2864:	8f 5f       	subi	r24, 0xFF	; 255
    2866:	8c 93       	st	X, r24
    2868:	92 8d       	ldd	r25, Z+26	; 0x1a
    286a:	e0 91 95 15 	lds	r30, 0x1595	; 0x801595 <pxCurrentTCB>
    286e:	f0 91 96 15 	lds	r31, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    2872:	82 8d       	ldd	r24, Z+26	; 0x1a
    2874:	89 17       	cp	r24, r25
    2876:	20 f4       	brcc	.+8      	; 0x2880 <xTaskRemoveFromEventList+0x156>
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	80 93 df 14 	sts	0x14DF, r24	; 0x8014df <xYieldPending>
    287e:	01 c0       	rjmp	.+2      	; 0x2882 <xTaskRemoveFromEventList+0x158>
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	df 91       	pop	r29
    2884:	cf 91       	pop	r28
    2886:	08 95       	ret

00002888 <vTaskRemoveFromUnorderedEventList>:
    2888:	cf 93       	push	r28
    288a:	df 93       	push	r29
    288c:	dc 01       	movw	r26, r24
    288e:	70 68       	ori	r23, 0x80	; 128
    2890:	4d 93       	st	X+, r20
    2892:	5d 93       	st	X+, r21
    2894:	6d 93       	st	X+, r22
    2896:	7c 93       	st	X, r23
    2898:	13 97       	sbiw	r26, 0x03	; 3
    289a:	18 96       	adiw	r26, 0x08	; 8
    289c:	ed 91       	ld	r30, X+
    289e:	fc 91       	ld	r31, X
    28a0:	19 97       	sbiw	r26, 0x09	; 9
    28a2:	1a 96       	adiw	r26, 0x0a	; 10
    28a4:	4d 91       	ld	r20, X+
    28a6:	5c 91       	ld	r21, X
    28a8:	1b 97       	sbiw	r26, 0x0b	; 11
    28aa:	14 96       	adiw	r26, 0x04	; 4
    28ac:	8d 91       	ld	r24, X+
    28ae:	9c 91       	ld	r25, X
    28b0:	15 97       	sbiw	r26, 0x05	; 5
    28b2:	16 96       	adiw	r26, 0x06	; 6
    28b4:	2d 91       	ld	r18, X+
    28b6:	3c 91       	ld	r19, X
    28b8:	17 97       	sbiw	r26, 0x07	; 7
    28ba:	ec 01       	movw	r28, r24
    28bc:	3f 83       	std	Y+7, r19	; 0x07
    28be:	2e 83       	std	Y+6, r18	; 0x06
    28c0:	16 96       	adiw	r26, 0x06	; 6
    28c2:	8d 91       	ld	r24, X+
    28c4:	9c 91       	ld	r25, X
    28c6:	17 97       	sbiw	r26, 0x07	; 7
    28c8:	14 96       	adiw	r26, 0x04	; 4
    28ca:	2d 91       	ld	r18, X+
    28cc:	3c 91       	ld	r19, X
    28ce:	15 97       	sbiw	r26, 0x05	; 5
    28d0:	ec 01       	movw	r28, r24
    28d2:	3d 83       	std	Y+5, r19	; 0x05
    28d4:	2c 83       	std	Y+4, r18	; 0x04
    28d6:	ea 01       	movw	r28, r20
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	9a 81       	ldd	r25, Y+2	; 0x02
    28dc:	a8 17       	cp	r26, r24
    28de:	b9 07       	cpc	r27, r25
    28e0:	31 f4       	brne	.+12     	; 0x28ee <vTaskRemoveFromUnorderedEventList+0x66>
    28e2:	16 96       	adiw	r26, 0x06	; 6
    28e4:	8d 91       	ld	r24, X+
    28e6:	9c 91       	ld	r25, X
    28e8:	17 97       	sbiw	r26, 0x07	; 7
    28ea:	9a 83       	std	Y+2, r25	; 0x02
    28ec:	89 83       	std	Y+1, r24	; 0x01
    28ee:	1b 96       	adiw	r26, 0x0b	; 11
    28f0:	1c 92       	st	X, r1
    28f2:	1e 92       	st	-X, r1
    28f4:	1a 97       	sbiw	r26, 0x0a	; 10
    28f6:	da 01       	movw	r26, r20
    28f8:	8c 91       	ld	r24, X
    28fa:	81 50       	subi	r24, 0x01	; 1
    28fc:	8c 93       	st	X, r24
    28fe:	a4 85       	ldd	r26, Z+12	; 0x0c
    2900:	b5 85       	ldd	r27, Z+13	; 0x0d
    2902:	c6 81       	ldd	r28, Z+6	; 0x06
    2904:	d7 81       	ldd	r29, Z+7	; 0x07
    2906:	80 85       	ldd	r24, Z+8	; 0x08
    2908:	91 85       	ldd	r25, Z+9	; 0x09
    290a:	9f 83       	std	Y+7, r25	; 0x07
    290c:	8e 83       	std	Y+6, r24	; 0x06
    290e:	c0 85       	ldd	r28, Z+8	; 0x08
    2910:	d1 85       	ldd	r29, Z+9	; 0x09
    2912:	86 81       	ldd	r24, Z+6	; 0x06
    2914:	97 81       	ldd	r25, Z+7	; 0x07
    2916:	9d 83       	std	Y+5, r25	; 0x05
    2918:	8c 83       	std	Y+4, r24	; 0x04
    291a:	11 96       	adiw	r26, 0x01	; 1
    291c:	8d 91       	ld	r24, X+
    291e:	9c 91       	ld	r25, X
    2920:	12 97       	sbiw	r26, 0x02	; 2
    2922:	9f 01       	movw	r18, r30
    2924:	2e 5f       	subi	r18, 0xFE	; 254
    2926:	3f 4f       	sbci	r19, 0xFF	; 255
    2928:	82 17       	cp	r24, r18
    292a:	93 07       	cpc	r25, r19
    292c:	31 f4       	brne	.+12     	; 0x293a <vTaskRemoveFromUnorderedEventList+0xb2>
    292e:	80 85       	ldd	r24, Z+8	; 0x08
    2930:	91 85       	ldd	r25, Z+9	; 0x09
    2932:	12 96       	adiw	r26, 0x02	; 2
    2934:	9c 93       	st	X, r25
    2936:	8e 93       	st	-X, r24
    2938:	11 97       	sbiw	r26, 0x01	; 1
    293a:	15 86       	std	Z+13, r1	; 0x0d
    293c:	14 86       	std	Z+12, r1	; 0x0c
    293e:	8c 91       	ld	r24, X
    2940:	81 50       	subi	r24, 0x01	; 1
    2942:	8c 93       	st	X, r24
    2944:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2946:	80 91 e5 14 	lds	r24, 0x14E5	; 0x8014e5 <uxTopReadyPriority>
    294a:	8a 17       	cp	r24, r26
    294c:	10 f4       	brcc	.+4      	; 0x2952 <vTaskRemoveFromUnorderedEventList+0xca>
    294e:	a0 93 e5 14 	sts	0x14E5, r26	; 0x8014e5 <uxTopReadyPriority>
    2952:	8b e0       	ldi	r24, 0x0B	; 11
    2954:	8a 9f       	mul	r24, r26
    2956:	d0 01       	movw	r26, r0
    2958:	11 24       	eor	r1, r1
    295a:	a9 5d       	subi	r26, 0xD9	; 217
    295c:	ba 4e       	sbci	r27, 0xEA	; 234
    295e:	11 96       	adiw	r26, 0x01	; 1
    2960:	0d 90       	ld	r0, X+
    2962:	bc 91       	ld	r27, X
    2964:	a0 2d       	mov	r26, r0
    2966:	b7 83       	std	Z+7, r27	; 0x07
    2968:	a6 83       	std	Z+6, r26	; 0x06
    296a:	16 96       	adiw	r26, 0x06	; 6
    296c:	4d 91       	ld	r20, X+
    296e:	5c 91       	ld	r21, X
    2970:	17 97       	sbiw	r26, 0x07	; 7
    2972:	51 87       	std	Z+9, r21	; 0x09
    2974:	40 87       	std	Z+8, r20	; 0x08
    2976:	16 96       	adiw	r26, 0x06	; 6
    2978:	cd 91       	ld	r28, X+
    297a:	dc 91       	ld	r29, X
    297c:	17 97       	sbiw	r26, 0x07	; 7
    297e:	3d 83       	std	Y+5, r19	; 0x05
    2980:	2c 83       	std	Y+4, r18	; 0x04
    2982:	17 96       	adiw	r26, 0x07	; 7
    2984:	3c 93       	st	X, r19
    2986:	2e 93       	st	-X, r18
    2988:	16 97       	sbiw	r26, 0x06	; 6
    298a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    298c:	8a 9f       	mul	r24, r26
    298e:	d0 01       	movw	r26, r0
    2990:	11 24       	eor	r1, r1
    2992:	a9 5d       	subi	r26, 0xD9	; 217
    2994:	ba 4e       	sbci	r27, 0xEA	; 234
    2996:	b5 87       	std	Z+13, r27	; 0x0d
    2998:	a4 87       	std	Z+12, r26	; 0x0c
    299a:	8c 91       	ld	r24, X
    299c:	8f 5f       	subi	r24, 0xFF	; 255
    299e:	8c 93       	st	X, r24
    29a0:	92 8d       	ldd	r25, Z+26	; 0x1a
    29a2:	e0 91 95 15 	lds	r30, 0x1595	; 0x801595 <pxCurrentTCB>
    29a6:	f0 91 96 15 	lds	r31, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    29aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    29ac:	89 17       	cp	r24, r25
    29ae:	18 f4       	brcc	.+6      	; 0x29b6 <vTaskRemoveFromUnorderedEventList+0x12e>
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	80 93 df 14 	sts	0x14DF, r24	; 0x8014df <xYieldPending>
    29b6:	df 91       	pop	r29
    29b8:	cf 91       	pop	r28
    29ba:	08 95       	ret

000029bc <vTaskSetTimeOutState>:
    29bc:	0f b6       	in	r0, 0x3f	; 63
    29be:	f8 94       	cli
    29c0:	0f 92       	push	r0
    29c2:	20 91 de 14 	lds	r18, 0x14DE	; 0x8014de <xNumOfOverflows>
    29c6:	fc 01       	movw	r30, r24
    29c8:	20 83       	st	Z, r18
    29ca:	40 91 e6 14 	lds	r20, 0x14E6	; 0x8014e6 <xTickCount>
    29ce:	50 91 e7 14 	lds	r21, 0x14E7	; 0x8014e7 <xTickCount+0x1>
    29d2:	60 91 e8 14 	lds	r22, 0x14E8	; 0x8014e8 <xTickCount+0x2>
    29d6:	70 91 e9 14 	lds	r23, 0x14E9	; 0x8014e9 <xTickCount+0x3>
    29da:	41 83       	std	Z+1, r20	; 0x01
    29dc:	52 83       	std	Z+2, r21	; 0x02
    29de:	63 83       	std	Z+3, r22	; 0x03
    29e0:	74 83       	std	Z+4, r23	; 0x04
    29e2:	0f 90       	pop	r0
    29e4:	0f be       	out	0x3f, r0	; 63
    29e6:	08 95       	ret

000029e8 <vTaskInternalSetTimeOutState>:
    29e8:	20 91 de 14 	lds	r18, 0x14DE	; 0x8014de <xNumOfOverflows>
    29ec:	fc 01       	movw	r30, r24
    29ee:	20 83       	st	Z, r18
    29f0:	40 91 e6 14 	lds	r20, 0x14E6	; 0x8014e6 <xTickCount>
    29f4:	50 91 e7 14 	lds	r21, 0x14E7	; 0x8014e7 <xTickCount+0x1>
    29f8:	60 91 e8 14 	lds	r22, 0x14E8	; 0x8014e8 <xTickCount+0x2>
    29fc:	70 91 e9 14 	lds	r23, 0x14E9	; 0x8014e9 <xTickCount+0x3>
    2a00:	41 83       	std	Z+1, r20	; 0x01
    2a02:	52 83       	std	Z+2, r21	; 0x02
    2a04:	63 83       	std	Z+3, r22	; 0x03
    2a06:	74 83       	std	Z+4, r23	; 0x04
    2a08:	08 95       	ret

00002a0a <xTaskCheckForTimeOut>:
    2a0a:	8f 92       	push	r8
    2a0c:	9f 92       	push	r9
    2a0e:	af 92       	push	r10
    2a10:	bf 92       	push	r11
    2a12:	cf 92       	push	r12
    2a14:	df 92       	push	r13
    2a16:	ef 92       	push	r14
    2a18:	ff 92       	push	r15
    2a1a:	0f 93       	push	r16
    2a1c:	1f 93       	push	r17
    2a1e:	cf 93       	push	r28
    2a20:	df 93       	push	r29
    2a22:	fb 01       	movw	r30, r22
    2a24:	0f b6       	in	r0, 0x3f	; 63
    2a26:	f8 94       	cli
    2a28:	0f 92       	push	r0
    2a2a:	c0 90 e6 14 	lds	r12, 0x14E6	; 0x8014e6 <xTickCount>
    2a2e:	d0 90 e7 14 	lds	r13, 0x14E7	; 0x8014e7 <xTickCount+0x1>
    2a32:	e0 90 e8 14 	lds	r14, 0x14E8	; 0x8014e8 <xTickCount+0x2>
    2a36:	f0 90 e9 14 	lds	r15, 0x14E9	; 0x8014e9 <xTickCount+0x3>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	11 96       	adiw	r26, 0x01	; 1
    2a3e:	0d 91       	ld	r16, X+
    2a40:	1d 91       	ld	r17, X+
    2a42:	2d 91       	ld	r18, X+
    2a44:	3c 91       	ld	r19, X
    2a46:	14 97       	sbiw	r26, 0x04	; 4
    2a48:	46 01       	movw	r8, r12
    2a4a:	57 01       	movw	r10, r14
    2a4c:	80 1a       	sub	r8, r16
    2a4e:	91 0a       	sbc	r9, r17
    2a50:	a2 0a       	sbc	r10, r18
    2a52:	b3 0a       	sbc	r11, r19
    2a54:	40 81       	ld	r20, Z
    2a56:	51 81       	ldd	r21, Z+1	; 0x01
    2a58:	62 81       	ldd	r22, Z+2	; 0x02
    2a5a:	73 81       	ldd	r23, Z+3	; 0x03
    2a5c:	4f 3f       	cpi	r20, 0xFF	; 255
    2a5e:	bf ef       	ldi	r27, 0xFF	; 255
    2a60:	5b 07       	cpc	r21, r27
    2a62:	6b 07       	cpc	r22, r27
    2a64:	7b 07       	cpc	r23, r27
    2a66:	39 f1       	breq	.+78     	; 0x2ab6 <xTaskCheckForTimeOut+0xac>
    2a68:	ec 01       	movw	r28, r24
    2a6a:	b8 81       	ld	r27, Y
    2a6c:	a0 91 de 14 	lds	r26, 0x14DE	; 0x8014de <xNumOfOverflows>
    2a70:	ba 17       	cp	r27, r26
    2a72:	59 f0       	breq	.+22     	; 0x2a8a <xTaskCheckForTimeOut+0x80>
    2a74:	c0 16       	cp	r12, r16
    2a76:	d1 06       	cpc	r13, r17
    2a78:	e2 06       	cpc	r14, r18
    2a7a:	f3 06       	cpc	r15, r19
    2a7c:	30 f0       	brcs	.+12     	; 0x2a8a <xTaskCheckForTimeOut+0x80>
    2a7e:	10 82       	st	Z, r1
    2a80:	11 82       	std	Z+1, r1	; 0x01
    2a82:	12 82       	std	Z+2, r1	; 0x02
    2a84:	13 82       	std	Z+3, r1	; 0x03
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	17 c0       	rjmp	.+46     	; 0x2ab8 <xTaskCheckForTimeOut+0xae>
    2a8a:	84 16       	cp	r8, r20
    2a8c:	95 06       	cpc	r9, r21
    2a8e:	a6 06       	cpc	r10, r22
    2a90:	b7 06       	cpc	r11, r23
    2a92:	58 f4       	brcc	.+22     	; 0x2aaa <xTaskCheckForTimeOut+0xa0>
    2a94:	48 19       	sub	r20, r8
    2a96:	59 09       	sbc	r21, r9
    2a98:	6a 09       	sbc	r22, r10
    2a9a:	7b 09       	sbc	r23, r11
    2a9c:	40 83       	st	Z, r20
    2a9e:	51 83       	std	Z+1, r21	; 0x01
    2aa0:	62 83       	std	Z+2, r22	; 0x02
    2aa2:	73 83       	std	Z+3, r23	; 0x03
    2aa4:	a1 df       	rcall	.-190    	; 0x29e8 <vTaskInternalSetTimeOutState>
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	07 c0       	rjmp	.+14     	; 0x2ab8 <xTaskCheckForTimeOut+0xae>
    2aaa:	10 82       	st	Z, r1
    2aac:	11 82       	std	Z+1, r1	; 0x01
    2aae:	12 82       	std	Z+2, r1	; 0x02
    2ab0:	13 82       	std	Z+3, r1	; 0x03
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	01 c0       	rjmp	.+2      	; 0x2ab8 <xTaskCheckForTimeOut+0xae>
    2ab6:	80 e0       	ldi	r24, 0x00	; 0
    2ab8:	0f 90       	pop	r0
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	df 91       	pop	r29
    2abe:	cf 91       	pop	r28
    2ac0:	1f 91       	pop	r17
    2ac2:	0f 91       	pop	r16
    2ac4:	ff 90       	pop	r15
    2ac6:	ef 90       	pop	r14
    2ac8:	df 90       	pop	r13
    2aca:	cf 90       	pop	r12
    2acc:	bf 90       	pop	r11
    2ace:	af 90       	pop	r10
    2ad0:	9f 90       	pop	r9
    2ad2:	8f 90       	pop	r8
    2ad4:	08 95       	ret

00002ad6 <vTaskMissedYield>:
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	80 93 df 14 	sts	0x14DF, r24	; 0x8014df <xYieldPending>
    2adc:	08 95       	ret

00002ade <xTaskGetCurrentTaskHandle>:
    2ade:	80 91 95 15 	lds	r24, 0x1595	; 0x801595 <pxCurrentTCB>
    2ae2:	90 91 96 15 	lds	r25, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    2ae6:	08 95       	ret

00002ae8 <xTaskGetSchedulerState>:
    2ae8:	80 91 e4 14 	lds	r24, 0x14E4	; 0x8014e4 <xSchedulerRunning>
    2aec:	88 23       	and	r24, r24
    2aee:	31 f0       	breq	.+12     	; 0x2afc <xTaskGetSchedulerState+0x14>
    2af0:	80 91 d6 14 	lds	r24, 0x14D6	; 0x8014d6 <uxSchedulerSuspended>
    2af4:	81 11       	cpse	r24, r1
    2af6:	04 c0       	rjmp	.+8      	; 0x2b00 <xTaskGetSchedulerState+0x18>
    2af8:	82 e0       	ldi	r24, 0x02	; 2
    2afa:	08 95       	ret
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	08 95       	ret
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	08 95       	ret

00002b04 <xTaskPriorityDisinherit>:
    2b04:	0f 93       	push	r16
    2b06:	1f 93       	push	r17
    2b08:	cf 93       	push	r28
    2b0a:	df 93       	push	r29
    2b0c:	fc 01       	movw	r30, r24
    2b0e:	89 2b       	or	r24, r25
    2b10:	09 f4       	brne	.+2      	; 0x2b14 <xTaskPriorityDisinherit+0x10>
    2b12:	49 c0       	rjmp	.+146    	; 0x2ba6 <xTaskPriorityDisinherit+0xa2>
    2b14:	86 a5       	ldd	r24, Z+46	; 0x2e
    2b16:	81 50       	subi	r24, 0x01	; 1
    2b18:	86 a7       	std	Z+46, r24	; 0x2e
    2b1a:	22 8d       	ldd	r18, Z+26	; 0x1a
    2b1c:	95 a5       	ldd	r25, Z+45	; 0x2d
    2b1e:	29 17       	cp	r18, r25
    2b20:	09 f4       	brne	.+2      	; 0x2b24 <xTaskPriorityDisinherit+0x20>
    2b22:	43 c0       	rjmp	.+134    	; 0x2baa <xTaskPriorityDisinherit+0xa6>
    2b24:	81 11       	cpse	r24, r1
    2b26:	43 c0       	rjmp	.+134    	; 0x2bae <xTaskPriorityDisinherit+0xaa>
    2b28:	ef 01       	movw	r28, r30
    2b2a:	8f 01       	movw	r16, r30
    2b2c:	0e 5f       	subi	r16, 0xFE	; 254
    2b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b30:	c8 01       	movw	r24, r16
    2b32:	0e 94 0b 06 	call	0xc16	; 0xc16 <uxListRemove>
    2b36:	ed a5       	ldd	r30, Y+45	; 0x2d
    2b38:	ea 8f       	std	Y+26, r30	; 0x1a
    2b3a:	8a e0       	ldi	r24, 0x0A	; 10
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	a0 e0       	ldi	r26, 0x00	; 0
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	8e 1b       	sub	r24, r30
    2b44:	91 09       	sbc	r25, r1
    2b46:	a1 09       	sbc	r26, r1
    2b48:	b1 09       	sbc	r27, r1
    2b4a:	8e 87       	std	Y+14, r24	; 0x0e
    2b4c:	9f 87       	std	Y+15, r25	; 0x0f
    2b4e:	a8 8b       	std	Y+16, r26	; 0x10
    2b50:	b9 8b       	std	Y+17, r27	; 0x11
    2b52:	80 91 e5 14 	lds	r24, 0x14E5	; 0x8014e5 <uxTopReadyPriority>
    2b56:	8e 17       	cp	r24, r30
    2b58:	10 f4       	brcc	.+4      	; 0x2b5e <xTaskPriorityDisinherit+0x5a>
    2b5a:	e0 93 e5 14 	sts	0x14E5, r30	; 0x8014e5 <uxTopReadyPriority>
    2b5e:	8b e0       	ldi	r24, 0x0B	; 11
    2b60:	8e 9f       	mul	r24, r30
    2b62:	f0 01       	movw	r30, r0
    2b64:	11 24       	eor	r1, r1
    2b66:	e9 5d       	subi	r30, 0xD9	; 217
    2b68:	fa 4e       	sbci	r31, 0xEA	; 234
    2b6a:	01 80       	ldd	r0, Z+1	; 0x01
    2b6c:	f2 81       	ldd	r31, Z+2	; 0x02
    2b6e:	e0 2d       	mov	r30, r0
    2b70:	ff 83       	std	Y+7, r31	; 0x07
    2b72:	ee 83       	std	Y+6, r30	; 0x06
    2b74:	26 81       	ldd	r18, Z+6	; 0x06
    2b76:	37 81       	ldd	r19, Z+7	; 0x07
    2b78:	39 87       	std	Y+9, r19	; 0x09
    2b7a:	28 87       	std	Y+8, r18	; 0x08
    2b7c:	a6 81       	ldd	r26, Z+6	; 0x06
    2b7e:	b7 81       	ldd	r27, Z+7	; 0x07
    2b80:	15 96       	adiw	r26, 0x05	; 5
    2b82:	1c 93       	st	X, r17
    2b84:	0e 93       	st	-X, r16
    2b86:	14 97       	sbiw	r26, 0x04	; 4
    2b88:	17 83       	std	Z+7, r17	; 0x07
    2b8a:	06 83       	std	Z+6, r16	; 0x06
    2b8c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2b8e:	8e 9f       	mul	r24, r30
    2b90:	f0 01       	movw	r30, r0
    2b92:	11 24       	eor	r1, r1
    2b94:	e9 5d       	subi	r30, 0xD9	; 217
    2b96:	fa 4e       	sbci	r31, 0xEA	; 234
    2b98:	fd 87       	std	Y+13, r31	; 0x0d
    2b9a:	ec 87       	std	Y+12, r30	; 0x0c
    2b9c:	80 81       	ld	r24, Z
    2b9e:	8f 5f       	subi	r24, 0xFF	; 255
    2ba0:	80 83       	st	Z, r24
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	05 c0       	rjmp	.+10     	; 0x2bb0 <xTaskPriorityDisinherit+0xac>
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	03 c0       	rjmp	.+6      	; 0x2bb0 <xTaskPriorityDisinherit+0xac>
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	01 c0       	rjmp	.+2      	; 0x2bb0 <xTaskPriorityDisinherit+0xac>
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	df 91       	pop	r29
    2bb2:	cf 91       	pop	r28
    2bb4:	1f 91       	pop	r17
    2bb6:	0f 91       	pop	r16
    2bb8:	08 95       	ret

00002bba <uxTaskResetEventItemValue>:
    2bba:	cf 92       	push	r12
    2bbc:	df 92       	push	r13
    2bbe:	ef 92       	push	r14
    2bc0:	ff 92       	push	r15
    2bc2:	e0 91 95 15 	lds	r30, 0x1595	; 0x801595 <pxCurrentTCB>
    2bc6:	f0 91 96 15 	lds	r31, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    2bca:	66 85       	ldd	r22, Z+14	; 0x0e
    2bcc:	77 85       	ldd	r23, Z+15	; 0x0f
    2bce:	80 89       	ldd	r24, Z+16	; 0x10
    2bd0:	91 89       	ldd	r25, Z+17	; 0x11
    2bd2:	e0 91 95 15 	lds	r30, 0x1595	; 0x801595 <pxCurrentTCB>
    2bd6:	f0 91 96 15 	lds	r31, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    2bda:	a0 91 95 15 	lds	r26, 0x1595	; 0x801595 <pxCurrentTCB>
    2bde:	b0 91 96 15 	lds	r27, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    2be2:	5a 96       	adiw	r26, 0x1a	; 26
    2be4:	2c 91       	ld	r18, X
    2be6:	0f 2e       	mov	r0, r31
    2be8:	fa e0       	ldi	r31, 0x0A	; 10
    2bea:	cf 2e       	mov	r12, r31
    2bec:	d1 2c       	mov	r13, r1
    2bee:	e1 2c       	mov	r14, r1
    2bf0:	f1 2c       	mov	r15, r1
    2bf2:	f0 2d       	mov	r31, r0
    2bf4:	c2 1a       	sub	r12, r18
    2bf6:	d1 08       	sbc	r13, r1
    2bf8:	e1 08       	sbc	r14, r1
    2bfa:	f1 08       	sbc	r15, r1
    2bfc:	c6 86       	std	Z+14, r12	; 0x0e
    2bfe:	d7 86       	std	Z+15, r13	; 0x0f
    2c00:	e0 8a       	std	Z+16, r14	; 0x10
    2c02:	f1 8a       	std	Z+17, r15	; 0x11
    2c04:	ff 90       	pop	r15
    2c06:	ef 90       	pop	r14
    2c08:	df 90       	pop	r13
    2c0a:	cf 90       	pop	r12
    2c0c:	08 95       	ret

00002c0e <xTaskGenericNotifyWait>:
    2c0e:	4f 92       	push	r4
    2c10:	5f 92       	push	r5
    2c12:	6f 92       	push	r6
    2c14:	7f 92       	push	r7
    2c16:	af 92       	push	r10
    2c18:	bf 92       	push	r11
    2c1a:	cf 92       	push	r12
    2c1c:	df 92       	push	r13
    2c1e:	ef 92       	push	r14
    2c20:	ff 92       	push	r15
    2c22:	0f 93       	push	r16
    2c24:	1f 93       	push	r17
    2c26:	cf 93       	push	r28
    2c28:	df 93       	push	r29
    2c2a:	28 01       	movw	r4, r16
    2c2c:	39 01       	movw	r6, r18
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	f8 94       	cli
    2c32:	0f 92       	push	r0
    2c34:	e0 91 95 15 	lds	r30, 0x1595	; 0x801595 <pxCurrentTCB>
    2c38:	f0 91 96 15 	lds	r31, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    2c3c:	c8 2f       	mov	r28, r24
    2c3e:	d0 e0       	ldi	r29, 0x00	; 0
    2c40:	ec 0f       	add	r30, r28
    2c42:	fd 1f       	adc	r31, r29
    2c44:	83 a9       	ldd	r24, Z+51	; 0x33
    2c46:	82 30       	cpi	r24, 0x02	; 2
    2c48:	71 f1       	breq	.+92     	; 0x2ca6 <xTaskGenericNotifyWait+0x98>
    2c4a:	e0 91 95 15 	lds	r30, 0x1595	; 0x801595 <pxCurrentTCB>
    2c4e:	f0 91 96 15 	lds	r31, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    2c52:	ce 01       	movw	r24, r28
    2c54:	88 0f       	add	r24, r24
    2c56:	99 1f       	adc	r25, r25
    2c58:	88 0f       	add	r24, r24
    2c5a:	99 1f       	adc	r25, r25
    2c5c:	e8 0f       	add	r30, r24
    2c5e:	f9 1f       	adc	r31, r25
    2c60:	87 a5       	ldd	r24, Z+47	; 0x2f
    2c62:	90 a9       	ldd	r25, Z+48	; 0x30
    2c64:	a1 a9       	ldd	r26, Z+49	; 0x31
    2c66:	b2 a9       	ldd	r27, Z+50	; 0x32
    2c68:	40 95       	com	r20
    2c6a:	50 95       	com	r21
    2c6c:	60 95       	com	r22
    2c6e:	70 95       	com	r23
    2c70:	48 23       	and	r20, r24
    2c72:	59 23       	and	r21, r25
    2c74:	6a 23       	and	r22, r26
    2c76:	7b 23       	and	r23, r27
    2c78:	47 a7       	std	Z+47, r20	; 0x2f
    2c7a:	50 ab       	std	Z+48, r21	; 0x30
    2c7c:	61 ab       	std	Z+49, r22	; 0x31
    2c7e:	72 ab       	std	Z+50, r23	; 0x32
    2c80:	e0 91 95 15 	lds	r30, 0x1595	; 0x801595 <pxCurrentTCB>
    2c84:	f0 91 96 15 	lds	r31, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    2c88:	ec 0f       	add	r30, r28
    2c8a:	fd 1f       	adc	r31, r29
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	83 ab       	std	Z+51, r24	; 0x33
    2c90:	a1 14       	cp	r10, r1
    2c92:	b1 04       	cpc	r11, r1
    2c94:	c1 04       	cpc	r12, r1
    2c96:	d1 04       	cpc	r13, r1
    2c98:	31 f0       	breq	.+12     	; 0x2ca6 <xTaskGenericNotifyWait+0x98>
    2c9a:	41 e0       	ldi	r20, 0x01	; 1
    2c9c:	c6 01       	movw	r24, r12
    2c9e:	b5 01       	movw	r22, r10
    2ca0:	7a d8       	rcall	.-3852   	; 0x1d96 <prvAddCurrentTaskToDelayedList>
    2ca2:	0e 94 87 06 	call	0xd0e	; 0xd0e <vPortYield>
    2ca6:	0f 90       	pop	r0
    2ca8:	0f be       	out	0x3f, r0	; 63
    2caa:	0f b6       	in	r0, 0x3f	; 63
    2cac:	f8 94       	cli
    2cae:	0f 92       	push	r0
    2cb0:	e1 14       	cp	r14, r1
    2cb2:	f1 04       	cpc	r15, r1
    2cb4:	a1 f0       	breq	.+40     	; 0x2cde <xTaskGenericNotifyWait+0xd0>
    2cb6:	e0 91 95 15 	lds	r30, 0x1595	; 0x801595 <pxCurrentTCB>
    2cba:	f0 91 96 15 	lds	r31, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    2cbe:	ce 01       	movw	r24, r28
    2cc0:	88 0f       	add	r24, r24
    2cc2:	99 1f       	adc	r25, r25
    2cc4:	88 0f       	add	r24, r24
    2cc6:	99 1f       	adc	r25, r25
    2cc8:	e8 0f       	add	r30, r24
    2cca:	f9 1f       	adc	r31, r25
    2ccc:	87 a5       	ldd	r24, Z+47	; 0x2f
    2cce:	90 a9       	ldd	r25, Z+48	; 0x30
    2cd0:	a1 a9       	ldd	r26, Z+49	; 0x31
    2cd2:	b2 a9       	ldd	r27, Z+50	; 0x32
    2cd4:	f7 01       	movw	r30, r14
    2cd6:	80 83       	st	Z, r24
    2cd8:	91 83       	std	Z+1, r25	; 0x01
    2cda:	a2 83       	std	Z+2, r26	; 0x02
    2cdc:	b3 83       	std	Z+3, r27	; 0x03
    2cde:	e0 91 95 15 	lds	r30, 0x1595	; 0x801595 <pxCurrentTCB>
    2ce2:	f0 91 96 15 	lds	r31, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    2ce6:	ec 0f       	add	r30, r28
    2ce8:	fd 1f       	adc	r31, r29
    2cea:	83 a9       	ldd	r24, Z+51	; 0x33
    2cec:	82 30       	cpi	r24, 0x02	; 2
    2cee:	e9 f4       	brne	.+58     	; 0x2d2a <xTaskGenericNotifyWait+0x11c>
    2cf0:	e0 91 95 15 	lds	r30, 0x1595	; 0x801595 <pxCurrentTCB>
    2cf4:	f0 91 96 15 	lds	r31, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    2cf8:	ce 01       	movw	r24, r28
    2cfa:	88 0f       	add	r24, r24
    2cfc:	99 1f       	adc	r25, r25
    2cfe:	88 0f       	add	r24, r24
    2d00:	99 1f       	adc	r25, r25
    2d02:	e8 0f       	add	r30, r24
    2d04:	f9 1f       	adc	r31, r25
    2d06:	87 a5       	ldd	r24, Z+47	; 0x2f
    2d08:	90 a9       	ldd	r25, Z+48	; 0x30
    2d0a:	a1 a9       	ldd	r26, Z+49	; 0x31
    2d0c:	b2 a9       	ldd	r27, Z+50	; 0x32
    2d0e:	40 94       	com	r4
    2d10:	50 94       	com	r5
    2d12:	60 94       	com	r6
    2d14:	70 94       	com	r7
    2d16:	48 22       	and	r4, r24
    2d18:	59 22       	and	r5, r25
    2d1a:	6a 22       	and	r6, r26
    2d1c:	7b 22       	and	r7, r27
    2d1e:	47 a6       	std	Z+47, r4	; 0x2f
    2d20:	50 aa       	std	Z+48, r5	; 0x30
    2d22:	61 aa       	std	Z+49, r6	; 0x31
    2d24:	72 aa       	std	Z+50, r7	; 0x32
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	01 c0       	rjmp	.+2      	; 0x2d2c <xTaskGenericNotifyWait+0x11e>
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
    2d2c:	20 91 95 15 	lds	r18, 0x1595	; 0x801595 <pxCurrentTCB>
    2d30:	30 91 96 15 	lds	r19, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    2d34:	c2 0f       	add	r28, r18
    2d36:	d3 1f       	adc	r29, r19
    2d38:	1b aa       	std	Y+51, r1	; 0x33
    2d3a:	0f 90       	pop	r0
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	df 91       	pop	r29
    2d40:	cf 91       	pop	r28
    2d42:	1f 91       	pop	r17
    2d44:	0f 91       	pop	r16
    2d46:	ff 90       	pop	r15
    2d48:	ef 90       	pop	r14
    2d4a:	df 90       	pop	r13
    2d4c:	cf 90       	pop	r12
    2d4e:	bf 90       	pop	r11
    2d50:	af 90       	pop	r10
    2d52:	7f 90       	pop	r7
    2d54:	6f 90       	pop	r6
    2d56:	5f 90       	pop	r5
    2d58:	4f 90       	pop	r4
    2d5a:	08 95       	ret

00002d5c <xTaskGenericNotify>:
    2d5c:	8f 92       	push	r8
    2d5e:	9f 92       	push	r9
    2d60:	af 92       	push	r10
    2d62:	bf 92       	push	r11
    2d64:	ef 92       	push	r14
    2d66:	ff 92       	push	r15
    2d68:	0f 93       	push	r16
    2d6a:	cf 93       	push	r28
    2d6c:	df 93       	push	r29
    2d6e:	dc 01       	movw	r26, r24
    2d70:	0f b6       	in	r0, 0x3f	; 63
    2d72:	f8 94       	cli
    2d74:	0f 92       	push	r0
    2d76:	e1 14       	cp	r14, r1
    2d78:	f1 04       	cpc	r15, r1
    2d7a:	89 f0       	breq	.+34     	; 0x2d9e <xTaskGenericNotify+0x42>
    2d7c:	e6 2f       	mov	r30, r22
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	ee 0f       	add	r30, r30
    2d82:	ff 1f       	adc	r31, r31
    2d84:	ee 0f       	add	r30, r30
    2d86:	ff 1f       	adc	r31, r31
    2d88:	e8 0f       	add	r30, r24
    2d8a:	f9 1f       	adc	r31, r25
    2d8c:	87 a4       	ldd	r8, Z+47	; 0x2f
    2d8e:	90 a8       	ldd	r9, Z+48	; 0x30
    2d90:	a1 a8       	ldd	r10, Z+49	; 0x31
    2d92:	b2 a8       	ldd	r11, Z+50	; 0x32
    2d94:	f7 01       	movw	r30, r14
    2d96:	80 82       	st	Z, r8
    2d98:	91 82       	std	Z+1, r9	; 0x01
    2d9a:	a2 82       	std	Z+2, r10	; 0x02
    2d9c:	b3 82       	std	Z+3, r11	; 0x03
    2d9e:	70 e0       	ldi	r23, 0x00	; 0
    2da0:	fd 01       	movw	r30, r26
    2da2:	e6 0f       	add	r30, r22
    2da4:	f7 1f       	adc	r31, r23
    2da6:	83 a9       	ldd	r24, Z+51	; 0x33
    2da8:	92 e0       	ldi	r25, 0x02	; 2
    2daa:	93 ab       	std	Z+51, r25	; 0x33
    2dac:	02 30       	cpi	r16, 0x02	; 2
    2dae:	01 f1       	breq	.+64     	; 0x2df0 <xTaskGenericNotify+0x94>
    2db0:	18 f4       	brcc	.+6      	; 0x2db8 <xTaskGenericNotify+0x5c>
    2db2:	01 30       	cpi	r16, 0x01	; 1
    2db4:	31 f0       	breq	.+12     	; 0x2dc2 <xTaskGenericNotify+0x66>
    2db6:	4d c0       	rjmp	.+154    	; 0x2e52 <xTaskGenericNotify+0xf6>
    2db8:	03 30       	cpi	r16, 0x03	; 3
    2dba:	79 f1       	breq	.+94     	; 0x2e1a <xTaskGenericNotify+0xbe>
    2dbc:	04 30       	cpi	r16, 0x04	; 4
    2dbe:	d1 f1       	breq	.+116    	; 0x2e34 <xTaskGenericNotify+0xd8>
    2dc0:	48 c0       	rjmp	.+144    	; 0x2e52 <xTaskGenericNotify+0xf6>
    2dc2:	66 0f       	add	r22, r22
    2dc4:	77 1f       	adc	r23, r23
    2dc6:	66 0f       	add	r22, r22
    2dc8:	77 1f       	adc	r23, r23
    2dca:	fd 01       	movw	r30, r26
    2dcc:	e6 0f       	add	r30, r22
    2dce:	f7 1f       	adc	r31, r23
    2dd0:	87 a4       	ldd	r8, Z+47	; 0x2f
    2dd2:	90 a8       	ldd	r9, Z+48	; 0x30
    2dd4:	a1 a8       	ldd	r10, Z+49	; 0x31
    2dd6:	b2 a8       	ldd	r11, Z+50	; 0x32
    2dd8:	ba 01       	movw	r22, r20
    2dda:	a9 01       	movw	r20, r18
    2ddc:	48 29       	or	r20, r8
    2dde:	59 29       	or	r21, r9
    2de0:	6a 29       	or	r22, r10
    2de2:	7b 29       	or	r23, r11
    2de4:	47 a7       	std	Z+47, r20	; 0x2f
    2de6:	50 ab       	std	Z+48, r21	; 0x30
    2de8:	61 ab       	std	Z+49, r22	; 0x31
    2dea:	72 ab       	std	Z+50, r23	; 0x32
    2dec:	01 e0       	ldi	r16, 0x01	; 1
    2dee:	34 c0       	rjmp	.+104    	; 0x2e58 <xTaskGenericNotify+0xfc>
    2df0:	66 0f       	add	r22, r22
    2df2:	77 1f       	adc	r23, r23
    2df4:	66 0f       	add	r22, r22
    2df6:	77 1f       	adc	r23, r23
    2df8:	fd 01       	movw	r30, r26
    2dfa:	e6 0f       	add	r30, r22
    2dfc:	f7 1f       	adc	r31, r23
    2dfe:	47 a5       	ldd	r20, Z+47	; 0x2f
    2e00:	50 a9       	ldd	r21, Z+48	; 0x30
    2e02:	61 a9       	ldd	r22, Z+49	; 0x31
    2e04:	72 a9       	ldd	r23, Z+50	; 0x32
    2e06:	4f 5f       	subi	r20, 0xFF	; 255
    2e08:	5f 4f       	sbci	r21, 0xFF	; 255
    2e0a:	6f 4f       	sbci	r22, 0xFF	; 255
    2e0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e0e:	47 a7       	std	Z+47, r20	; 0x2f
    2e10:	50 ab       	std	Z+48, r21	; 0x30
    2e12:	61 ab       	std	Z+49, r22	; 0x31
    2e14:	72 ab       	std	Z+50, r23	; 0x32
    2e16:	01 e0       	ldi	r16, 0x01	; 1
    2e18:	1f c0       	rjmp	.+62     	; 0x2e58 <xTaskGenericNotify+0xfc>
    2e1a:	66 0f       	add	r22, r22
    2e1c:	77 1f       	adc	r23, r23
    2e1e:	66 0f       	add	r22, r22
    2e20:	77 1f       	adc	r23, r23
    2e22:	fd 01       	movw	r30, r26
    2e24:	e6 0f       	add	r30, r22
    2e26:	f7 1f       	adc	r31, r23
    2e28:	27 a7       	std	Z+47, r18	; 0x2f
    2e2a:	30 ab       	std	Z+48, r19	; 0x30
    2e2c:	41 ab       	std	Z+49, r20	; 0x31
    2e2e:	52 ab       	std	Z+50, r21	; 0x32
    2e30:	01 e0       	ldi	r16, 0x01	; 1
    2e32:	12 c0       	rjmp	.+36     	; 0x2e58 <xTaskGenericNotify+0xfc>
    2e34:	82 30       	cpi	r24, 0x02	; 2
    2e36:	79 f0       	breq	.+30     	; 0x2e56 <xTaskGenericNotify+0xfa>
    2e38:	66 0f       	add	r22, r22
    2e3a:	77 1f       	adc	r23, r23
    2e3c:	66 0f       	add	r22, r22
    2e3e:	77 1f       	adc	r23, r23
    2e40:	fd 01       	movw	r30, r26
    2e42:	e6 0f       	add	r30, r22
    2e44:	f7 1f       	adc	r31, r23
    2e46:	27 a7       	std	Z+47, r18	; 0x2f
    2e48:	30 ab       	std	Z+48, r19	; 0x30
    2e4a:	41 ab       	std	Z+49, r20	; 0x31
    2e4c:	52 ab       	std	Z+50, r21	; 0x32
    2e4e:	01 e0       	ldi	r16, 0x01	; 1
    2e50:	03 c0       	rjmp	.+6      	; 0x2e58 <xTaskGenericNotify+0xfc>
    2e52:	01 e0       	ldi	r16, 0x01	; 1
    2e54:	01 c0       	rjmp	.+2      	; 0x2e58 <xTaskGenericNotify+0xfc>
    2e56:	00 e0       	ldi	r16, 0x00	; 0
    2e58:	81 30       	cpi	r24, 0x01	; 1
    2e5a:	09 f0       	breq	.+2      	; 0x2e5e <xTaskGenericNotify+0x102>
    2e5c:	69 c0       	rjmp	.+210    	; 0x2f30 <xTaskGenericNotify+0x1d4>
    2e5e:	1c 96       	adiw	r26, 0x0c	; 12
    2e60:	ed 91       	ld	r30, X+
    2e62:	fc 91       	ld	r31, X
    2e64:	1d 97       	sbiw	r26, 0x0d	; 13
    2e66:	16 96       	adiw	r26, 0x06	; 6
    2e68:	cd 91       	ld	r28, X+
    2e6a:	dc 91       	ld	r29, X
    2e6c:	17 97       	sbiw	r26, 0x07	; 7
    2e6e:	18 96       	adiw	r26, 0x08	; 8
    2e70:	8d 91       	ld	r24, X+
    2e72:	9c 91       	ld	r25, X
    2e74:	19 97       	sbiw	r26, 0x09	; 9
    2e76:	9f 83       	std	Y+7, r25	; 0x07
    2e78:	8e 83       	std	Y+6, r24	; 0x06
    2e7a:	18 96       	adiw	r26, 0x08	; 8
    2e7c:	cd 91       	ld	r28, X+
    2e7e:	dc 91       	ld	r29, X
    2e80:	19 97       	sbiw	r26, 0x09	; 9
    2e82:	16 96       	adiw	r26, 0x06	; 6
    2e84:	8d 91       	ld	r24, X+
    2e86:	9c 91       	ld	r25, X
    2e88:	17 97       	sbiw	r26, 0x07	; 7
    2e8a:	9d 83       	std	Y+5, r25	; 0x05
    2e8c:	8c 83       	std	Y+4, r24	; 0x04
    2e8e:	81 81       	ldd	r24, Z+1	; 0x01
    2e90:	92 81       	ldd	r25, Z+2	; 0x02
    2e92:	9d 01       	movw	r18, r26
    2e94:	2e 5f       	subi	r18, 0xFE	; 254
    2e96:	3f 4f       	sbci	r19, 0xFF	; 255
    2e98:	82 17       	cp	r24, r18
    2e9a:	93 07       	cpc	r25, r19
    2e9c:	31 f4       	brne	.+12     	; 0x2eaa <xTaskGenericNotify+0x14e>
    2e9e:	18 96       	adiw	r26, 0x08	; 8
    2ea0:	8d 91       	ld	r24, X+
    2ea2:	9c 91       	ld	r25, X
    2ea4:	19 97       	sbiw	r26, 0x09	; 9
    2ea6:	92 83       	std	Z+2, r25	; 0x02
    2ea8:	81 83       	std	Z+1, r24	; 0x01
    2eaa:	1d 96       	adiw	r26, 0x0d	; 13
    2eac:	1c 92       	st	X, r1
    2eae:	1e 92       	st	-X, r1
    2eb0:	1c 97       	sbiw	r26, 0x0c	; 12
    2eb2:	80 81       	ld	r24, Z
    2eb4:	81 50       	subi	r24, 0x01	; 1
    2eb6:	80 83       	st	Z, r24
    2eb8:	5a 96       	adiw	r26, 0x1a	; 26
    2eba:	ec 91       	ld	r30, X
    2ebc:	5a 97       	sbiw	r26, 0x1a	; 26
    2ebe:	80 91 e5 14 	lds	r24, 0x14E5	; 0x8014e5 <uxTopReadyPriority>
    2ec2:	8e 17       	cp	r24, r30
    2ec4:	10 f4       	brcc	.+4      	; 0x2eca <xTaskGenericNotify+0x16e>
    2ec6:	e0 93 e5 14 	sts	0x14E5, r30	; 0x8014e5 <uxTopReadyPriority>
    2eca:	8b e0       	ldi	r24, 0x0B	; 11
    2ecc:	8e 9f       	mul	r24, r30
    2ece:	f0 01       	movw	r30, r0
    2ed0:	11 24       	eor	r1, r1
    2ed2:	e9 5d       	subi	r30, 0xD9	; 217
    2ed4:	fa 4e       	sbci	r31, 0xEA	; 234
    2ed6:	01 80       	ldd	r0, Z+1	; 0x01
    2ed8:	f2 81       	ldd	r31, Z+2	; 0x02
    2eda:	e0 2d       	mov	r30, r0
    2edc:	17 96       	adiw	r26, 0x07	; 7
    2ede:	fc 93       	st	X, r31
    2ee0:	ee 93       	st	-X, r30
    2ee2:	16 97       	sbiw	r26, 0x06	; 6
    2ee4:	46 81       	ldd	r20, Z+6	; 0x06
    2ee6:	57 81       	ldd	r21, Z+7	; 0x07
    2ee8:	19 96       	adiw	r26, 0x09	; 9
    2eea:	5c 93       	st	X, r21
    2eec:	4e 93       	st	-X, r20
    2eee:	18 97       	sbiw	r26, 0x08	; 8
    2ef0:	c6 81       	ldd	r28, Z+6	; 0x06
    2ef2:	d7 81       	ldd	r29, Z+7	; 0x07
    2ef4:	3d 83       	std	Y+5, r19	; 0x05
    2ef6:	2c 83       	std	Y+4, r18	; 0x04
    2ef8:	37 83       	std	Z+7, r19	; 0x07
    2efa:	26 83       	std	Z+6, r18	; 0x06
    2efc:	5a 96       	adiw	r26, 0x1a	; 26
    2efe:	ec 91       	ld	r30, X
    2f00:	5a 97       	sbiw	r26, 0x1a	; 26
    2f02:	8e 9f       	mul	r24, r30
    2f04:	f0 01       	movw	r30, r0
    2f06:	11 24       	eor	r1, r1
    2f08:	e9 5d       	subi	r30, 0xD9	; 217
    2f0a:	fa 4e       	sbci	r31, 0xEA	; 234
    2f0c:	1d 96       	adiw	r26, 0x0d	; 13
    2f0e:	fc 93       	st	X, r31
    2f10:	ee 93       	st	-X, r30
    2f12:	1c 97       	sbiw	r26, 0x0c	; 12
    2f14:	80 81       	ld	r24, Z
    2f16:	8f 5f       	subi	r24, 0xFF	; 255
    2f18:	80 83       	st	Z, r24
    2f1a:	5a 96       	adiw	r26, 0x1a	; 26
    2f1c:	9c 91       	ld	r25, X
    2f1e:	e0 91 95 15 	lds	r30, 0x1595	; 0x801595 <pxCurrentTCB>
    2f22:	f0 91 96 15 	lds	r31, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    2f26:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f28:	89 17       	cp	r24, r25
    2f2a:	10 f4       	brcc	.+4      	; 0x2f30 <xTaskGenericNotify+0x1d4>
    2f2c:	0e 94 87 06 	call	0xd0e	; 0xd0e <vPortYield>
    2f30:	0f 90       	pop	r0
    2f32:	0f be       	out	0x3f, r0	; 63
    2f34:	80 2f       	mov	r24, r16
    2f36:	df 91       	pop	r29
    2f38:	cf 91       	pop	r28
    2f3a:	0f 91       	pop	r16
    2f3c:	ff 90       	pop	r15
    2f3e:	ef 90       	pop	r14
    2f40:	bf 90       	pop	r11
    2f42:	af 90       	pop	r10
    2f44:	9f 90       	pop	r9
    2f46:	8f 90       	pop	r8
    2f48:	08 95       	ret

00002f4a <xTaskGenericNotifyFromISR>:
    2f4a:	8f 92       	push	r8
    2f4c:	9f 92       	push	r9
    2f4e:	af 92       	push	r10
    2f50:	bf 92       	push	r11
    2f52:	cf 92       	push	r12
    2f54:	df 92       	push	r13
    2f56:	ef 92       	push	r14
    2f58:	ff 92       	push	r15
    2f5a:	0f 93       	push	r16
    2f5c:	cf 93       	push	r28
    2f5e:	df 93       	push	r29
    2f60:	dc 01       	movw	r26, r24
    2f62:	e1 14       	cp	r14, r1
    2f64:	f1 04       	cpc	r15, r1
    2f66:	89 f0       	breq	.+34     	; 0x2f8a <xTaskGenericNotifyFromISR+0x40>
    2f68:	e6 2f       	mov	r30, r22
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	ee 0f       	add	r30, r30
    2f6e:	ff 1f       	adc	r31, r31
    2f70:	ee 0f       	add	r30, r30
    2f72:	ff 1f       	adc	r31, r31
    2f74:	e8 0f       	add	r30, r24
    2f76:	f9 1f       	adc	r31, r25
    2f78:	87 a4       	ldd	r8, Z+47	; 0x2f
    2f7a:	90 a8       	ldd	r9, Z+48	; 0x30
    2f7c:	a1 a8       	ldd	r10, Z+49	; 0x31
    2f7e:	b2 a8       	ldd	r11, Z+50	; 0x32
    2f80:	f7 01       	movw	r30, r14
    2f82:	80 82       	st	Z, r8
    2f84:	91 82       	std	Z+1, r9	; 0x01
    2f86:	a2 82       	std	Z+2, r10	; 0x02
    2f88:	b3 82       	std	Z+3, r11	; 0x03
    2f8a:	70 e0       	ldi	r23, 0x00	; 0
    2f8c:	fd 01       	movw	r30, r26
    2f8e:	e6 0f       	add	r30, r22
    2f90:	f7 1f       	adc	r31, r23
    2f92:	93 a9       	ldd	r25, Z+51	; 0x33
    2f94:	82 e0       	ldi	r24, 0x02	; 2
    2f96:	83 ab       	std	Z+51, r24	; 0x33
    2f98:	02 30       	cpi	r16, 0x02	; 2
    2f9a:	01 f1       	breq	.+64     	; 0x2fdc <xTaskGenericNotifyFromISR+0x92>
    2f9c:	18 f4       	brcc	.+6      	; 0x2fa4 <xTaskGenericNotifyFromISR+0x5a>
    2f9e:	01 30       	cpi	r16, 0x01	; 1
    2fa0:	31 f0       	breq	.+12     	; 0x2fae <xTaskGenericNotifyFromISR+0x64>
    2fa2:	4d c0       	rjmp	.+154    	; 0x303e <xTaskGenericNotifyFromISR+0xf4>
    2fa4:	03 30       	cpi	r16, 0x03	; 3
    2fa6:	79 f1       	breq	.+94     	; 0x3006 <xTaskGenericNotifyFromISR+0xbc>
    2fa8:	04 30       	cpi	r16, 0x04	; 4
    2faa:	d1 f1       	breq	.+116    	; 0x3020 <xTaskGenericNotifyFromISR+0xd6>
    2fac:	48 c0       	rjmp	.+144    	; 0x303e <xTaskGenericNotifyFromISR+0xf4>
    2fae:	66 0f       	add	r22, r22
    2fb0:	77 1f       	adc	r23, r23
    2fb2:	66 0f       	add	r22, r22
    2fb4:	77 1f       	adc	r23, r23
    2fb6:	fd 01       	movw	r30, r26
    2fb8:	e6 0f       	add	r30, r22
    2fba:	f7 1f       	adc	r31, r23
    2fbc:	87 a4       	ldd	r8, Z+47	; 0x2f
    2fbe:	90 a8       	ldd	r9, Z+48	; 0x30
    2fc0:	a1 a8       	ldd	r10, Z+49	; 0x31
    2fc2:	b2 a8       	ldd	r11, Z+50	; 0x32
    2fc4:	ba 01       	movw	r22, r20
    2fc6:	a9 01       	movw	r20, r18
    2fc8:	48 29       	or	r20, r8
    2fca:	59 29       	or	r21, r9
    2fcc:	6a 29       	or	r22, r10
    2fce:	7b 29       	or	r23, r11
    2fd0:	47 a7       	std	Z+47, r20	; 0x2f
    2fd2:	50 ab       	std	Z+48, r21	; 0x30
    2fd4:	61 ab       	std	Z+49, r22	; 0x31
    2fd6:	72 ab       	std	Z+50, r23	; 0x32
    2fd8:	81 e0       	ldi	r24, 0x01	; 1
    2fda:	34 c0       	rjmp	.+104    	; 0x3044 <xTaskGenericNotifyFromISR+0xfa>
    2fdc:	66 0f       	add	r22, r22
    2fde:	77 1f       	adc	r23, r23
    2fe0:	66 0f       	add	r22, r22
    2fe2:	77 1f       	adc	r23, r23
    2fe4:	fd 01       	movw	r30, r26
    2fe6:	e6 0f       	add	r30, r22
    2fe8:	f7 1f       	adc	r31, r23
    2fea:	47 a5       	ldd	r20, Z+47	; 0x2f
    2fec:	50 a9       	ldd	r21, Z+48	; 0x30
    2fee:	61 a9       	ldd	r22, Z+49	; 0x31
    2ff0:	72 a9       	ldd	r23, Z+50	; 0x32
    2ff2:	4f 5f       	subi	r20, 0xFF	; 255
    2ff4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ff6:	6f 4f       	sbci	r22, 0xFF	; 255
    2ff8:	7f 4f       	sbci	r23, 0xFF	; 255
    2ffa:	47 a7       	std	Z+47, r20	; 0x2f
    2ffc:	50 ab       	std	Z+48, r21	; 0x30
    2ffe:	61 ab       	std	Z+49, r22	; 0x31
    3000:	72 ab       	std	Z+50, r23	; 0x32
    3002:	81 e0       	ldi	r24, 0x01	; 1
    3004:	1f c0       	rjmp	.+62     	; 0x3044 <xTaskGenericNotifyFromISR+0xfa>
    3006:	66 0f       	add	r22, r22
    3008:	77 1f       	adc	r23, r23
    300a:	66 0f       	add	r22, r22
    300c:	77 1f       	adc	r23, r23
    300e:	fd 01       	movw	r30, r26
    3010:	e6 0f       	add	r30, r22
    3012:	f7 1f       	adc	r31, r23
    3014:	27 a7       	std	Z+47, r18	; 0x2f
    3016:	30 ab       	std	Z+48, r19	; 0x30
    3018:	41 ab       	std	Z+49, r20	; 0x31
    301a:	52 ab       	std	Z+50, r21	; 0x32
    301c:	81 e0       	ldi	r24, 0x01	; 1
    301e:	12 c0       	rjmp	.+36     	; 0x3044 <xTaskGenericNotifyFromISR+0xfa>
    3020:	92 30       	cpi	r25, 0x02	; 2
    3022:	79 f0       	breq	.+30     	; 0x3042 <xTaskGenericNotifyFromISR+0xf8>
    3024:	66 0f       	add	r22, r22
    3026:	77 1f       	adc	r23, r23
    3028:	66 0f       	add	r22, r22
    302a:	77 1f       	adc	r23, r23
    302c:	fd 01       	movw	r30, r26
    302e:	e6 0f       	add	r30, r22
    3030:	f7 1f       	adc	r31, r23
    3032:	27 a7       	std	Z+47, r18	; 0x2f
    3034:	30 ab       	std	Z+48, r19	; 0x30
    3036:	41 ab       	std	Z+49, r20	; 0x31
    3038:	52 ab       	std	Z+50, r21	; 0x32
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	03 c0       	rjmp	.+6      	; 0x3044 <xTaskGenericNotifyFromISR+0xfa>
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	01 c0       	rjmp	.+2      	; 0x3044 <xTaskGenericNotifyFromISR+0xfa>
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	91 30       	cpi	r25, 0x01	; 1
    3046:	09 f0       	breq	.+2      	; 0x304a <xTaskGenericNotifyFromISR+0x100>
    3048:	96 c0       	rjmp	.+300    	; 0x3176 <xTaskGenericNotifyFromISR+0x22c>
    304a:	90 91 d6 14 	lds	r25, 0x14D6	; 0x8014d6 <uxSchedulerSuspended>
    304e:	91 11       	cpse	r25, r1
    3050:	5f c0       	rjmp	.+190    	; 0x3110 <xTaskGenericNotifyFromISR+0x1c6>
    3052:	1c 96       	adiw	r26, 0x0c	; 12
    3054:	ed 91       	ld	r30, X+
    3056:	fc 91       	ld	r31, X
    3058:	1d 97       	sbiw	r26, 0x0d	; 13
    305a:	16 96       	adiw	r26, 0x06	; 6
    305c:	cd 91       	ld	r28, X+
    305e:	dc 91       	ld	r29, X
    3060:	17 97       	sbiw	r26, 0x07	; 7
    3062:	18 96       	adiw	r26, 0x08	; 8
    3064:	2d 91       	ld	r18, X+
    3066:	3c 91       	ld	r19, X
    3068:	19 97       	sbiw	r26, 0x09	; 9
    306a:	3f 83       	std	Y+7, r19	; 0x07
    306c:	2e 83       	std	Y+6, r18	; 0x06
    306e:	18 96       	adiw	r26, 0x08	; 8
    3070:	cd 91       	ld	r28, X+
    3072:	dc 91       	ld	r29, X
    3074:	19 97       	sbiw	r26, 0x09	; 9
    3076:	16 96       	adiw	r26, 0x06	; 6
    3078:	2d 91       	ld	r18, X+
    307a:	3c 91       	ld	r19, X
    307c:	17 97       	sbiw	r26, 0x07	; 7
    307e:	3d 83       	std	Y+5, r19	; 0x05
    3080:	2c 83       	std	Y+4, r18	; 0x04
    3082:	41 81       	ldd	r20, Z+1	; 0x01
    3084:	52 81       	ldd	r21, Z+2	; 0x02
    3086:	9d 01       	movw	r18, r26
    3088:	2e 5f       	subi	r18, 0xFE	; 254
    308a:	3f 4f       	sbci	r19, 0xFF	; 255
    308c:	42 17       	cp	r20, r18
    308e:	53 07       	cpc	r21, r19
    3090:	31 f4       	brne	.+12     	; 0x309e <xTaskGenericNotifyFromISR+0x154>
    3092:	18 96       	adiw	r26, 0x08	; 8
    3094:	4d 91       	ld	r20, X+
    3096:	5c 91       	ld	r21, X
    3098:	19 97       	sbiw	r26, 0x09	; 9
    309a:	52 83       	std	Z+2, r21	; 0x02
    309c:	41 83       	std	Z+1, r20	; 0x01
    309e:	1d 96       	adiw	r26, 0x0d	; 13
    30a0:	1c 92       	st	X, r1
    30a2:	1e 92       	st	-X, r1
    30a4:	1c 97       	sbiw	r26, 0x0c	; 12
    30a6:	90 81       	ld	r25, Z
    30a8:	91 50       	subi	r25, 0x01	; 1
    30aa:	90 83       	st	Z, r25
    30ac:	5a 96       	adiw	r26, 0x1a	; 26
    30ae:	ec 91       	ld	r30, X
    30b0:	5a 97       	sbiw	r26, 0x1a	; 26
    30b2:	90 91 e5 14 	lds	r25, 0x14E5	; 0x8014e5 <uxTopReadyPriority>
    30b6:	9e 17       	cp	r25, r30
    30b8:	10 f4       	brcc	.+4      	; 0x30be <xTaskGenericNotifyFromISR+0x174>
    30ba:	e0 93 e5 14 	sts	0x14E5, r30	; 0x8014e5 <uxTopReadyPriority>
    30be:	9b e0       	ldi	r25, 0x0B	; 11
    30c0:	9e 9f       	mul	r25, r30
    30c2:	f0 01       	movw	r30, r0
    30c4:	11 24       	eor	r1, r1
    30c6:	e9 5d       	subi	r30, 0xD9	; 217
    30c8:	fa 4e       	sbci	r31, 0xEA	; 234
    30ca:	01 80       	ldd	r0, Z+1	; 0x01
    30cc:	f2 81       	ldd	r31, Z+2	; 0x02
    30ce:	e0 2d       	mov	r30, r0
    30d0:	17 96       	adiw	r26, 0x07	; 7
    30d2:	fc 93       	st	X, r31
    30d4:	ee 93       	st	-X, r30
    30d6:	16 97       	sbiw	r26, 0x06	; 6
    30d8:	46 81       	ldd	r20, Z+6	; 0x06
    30da:	57 81       	ldd	r21, Z+7	; 0x07
    30dc:	19 96       	adiw	r26, 0x09	; 9
    30de:	5c 93       	st	X, r21
    30e0:	4e 93       	st	-X, r20
    30e2:	18 97       	sbiw	r26, 0x08	; 8
    30e4:	c6 81       	ldd	r28, Z+6	; 0x06
    30e6:	d7 81       	ldd	r29, Z+7	; 0x07
    30e8:	3d 83       	std	Y+5, r19	; 0x05
    30ea:	2c 83       	std	Y+4, r18	; 0x04
    30ec:	37 83       	std	Z+7, r19	; 0x07
    30ee:	26 83       	std	Z+6, r18	; 0x06
    30f0:	5a 96       	adiw	r26, 0x1a	; 26
    30f2:	ec 91       	ld	r30, X
    30f4:	5a 97       	sbiw	r26, 0x1a	; 26
    30f6:	9e 9f       	mul	r25, r30
    30f8:	f0 01       	movw	r30, r0
    30fa:	11 24       	eor	r1, r1
    30fc:	e9 5d       	subi	r30, 0xD9	; 217
    30fe:	fa 4e       	sbci	r31, 0xEA	; 234
    3100:	1d 96       	adiw	r26, 0x0d	; 13
    3102:	fc 93       	st	X, r31
    3104:	ee 93       	st	-X, r30
    3106:	1c 97       	sbiw	r26, 0x0c	; 12
    3108:	90 81       	ld	r25, Z
    310a:	9f 5f       	subi	r25, 0xFF	; 255
    310c:	90 83       	st	Z, r25
    310e:	21 c0       	rjmp	.+66     	; 0x3152 <xTaskGenericNotifyFromISR+0x208>
    3110:	62 e0       	ldi	r22, 0x02	; 2
    3112:	75 e1       	ldi	r23, 0x15	; 21
    3114:	fb 01       	movw	r30, r22
    3116:	c1 81       	ldd	r28, Z+1	; 0x01
    3118:	d2 81       	ldd	r29, Z+2	; 0x02
    311a:	53 96       	adiw	r26, 0x13	; 19
    311c:	dc 93       	st	X, r29
    311e:	ce 93       	st	-X, r28
    3120:	52 97       	sbiw	r26, 0x12	; 18
    3122:	2e 81       	ldd	r18, Y+6	; 0x06
    3124:	3f 81       	ldd	r19, Y+7	; 0x07
    3126:	55 96       	adiw	r26, 0x15	; 21
    3128:	3c 93       	st	X, r19
    312a:	2e 93       	st	-X, r18
    312c:	54 97       	sbiw	r26, 0x14	; 20
    312e:	4e 81       	ldd	r20, Y+6	; 0x06
    3130:	5f 81       	ldd	r21, Y+7	; 0x07
    3132:	9d 01       	movw	r18, r26
    3134:	22 5f       	subi	r18, 0xF2	; 242
    3136:	3f 4f       	sbci	r19, 0xFF	; 255
    3138:	fa 01       	movw	r30, r20
    313a:	35 83       	std	Z+5, r19	; 0x05
    313c:	24 83       	std	Z+4, r18	; 0x04
    313e:	3f 83       	std	Y+7, r19	; 0x07
    3140:	2e 83       	std	Y+6, r18	; 0x06
    3142:	59 96       	adiw	r26, 0x19	; 25
    3144:	7c 93       	st	X, r23
    3146:	6e 93       	st	-X, r22
    3148:	58 97       	sbiw	r26, 0x18	; 24
    314a:	fb 01       	movw	r30, r22
    314c:	90 81       	ld	r25, Z
    314e:	9f 5f       	subi	r25, 0xFF	; 255
    3150:	90 83       	st	Z, r25
    3152:	5a 96       	adiw	r26, 0x1a	; 26
    3154:	2c 91       	ld	r18, X
    3156:	e0 91 95 15 	lds	r30, 0x1595	; 0x801595 <pxCurrentTCB>
    315a:	f0 91 96 15 	lds	r31, 0x1596	; 0x801596 <pxCurrentTCB+0x1>
    315e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3160:	92 17       	cp	r25, r18
    3162:	48 f4       	brcc	.+18     	; 0x3176 <xTaskGenericNotifyFromISR+0x22c>
    3164:	c1 14       	cp	r12, r1
    3166:	d1 04       	cpc	r13, r1
    3168:	19 f0       	breq	.+6      	; 0x3170 <xTaskGenericNotifyFromISR+0x226>
    316a:	91 e0       	ldi	r25, 0x01	; 1
    316c:	f6 01       	movw	r30, r12
    316e:	90 83       	st	Z, r25
    3170:	91 e0       	ldi	r25, 0x01	; 1
    3172:	90 93 df 14 	sts	0x14DF, r25	; 0x8014df <xYieldPending>
    3176:	df 91       	pop	r29
    3178:	cf 91       	pop	r28
    317a:	0f 91       	pop	r16
    317c:	ff 90       	pop	r15
    317e:	ef 90       	pop	r14
    3180:	df 90       	pop	r13
    3182:	cf 90       	pop	r12
    3184:	bf 90       	pop	r11
    3186:	af 90       	pop	r10
    3188:	9f 90       	pop	r9
    318a:	8f 90       	pop	r8
    318c:	08 95       	ret

0000318e <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    318e:	00 97       	sbiw	r24, 0x00	; 0
    3190:	21 f4       	brne	.+8      	; 0x319a <xTaskGenericNotifyStateClear+0xc>
    3192:	80 91 95 15 	lds	r24, 0x1595	; 0x801595 <pxCurrentTCB>
    3196:	90 91 96 15 	lds	r25, 0x1596	; 0x801596 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    319a:	0f b6       	in	r0, 0x3f	; 63
    319c:	f8 94       	cli
    319e:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    31a0:	70 e0       	ldi	r23, 0x00	; 0
    31a2:	fc 01       	movw	r30, r24
    31a4:	e6 0f       	add	r30, r22
    31a6:	f7 1f       	adc	r31, r23
    31a8:	23 a9       	ldd	r18, Z+51	; 0x33
    31aa:	22 30       	cpi	r18, 0x02	; 2
    31ac:	31 f4       	brne	.+12     	; 0x31ba <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    31ae:	fc 01       	movw	r30, r24
    31b0:	e6 0f       	add	r30, r22
    31b2:	f7 1f       	adc	r31, r23
    31b4:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    31b6:	81 e0       	ldi	r24, 0x01	; 1
    31b8:	01 c0       	rjmp	.+2      	; 0x31bc <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    31ba:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    31bc:	0f 90       	pop	r0
    31be:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    31c0:	08 95       	ret

000031c2 <prvGetNextExpireTime>:
    31c2:	dc 01       	movw	r26, r24
    31c4:	e0 91 a1 15 	lds	r30, 0x15A1	; 0x8015a1 <pxCurrentTimerList>
    31c8:	f0 91 a2 15 	lds	r31, 0x15A2	; 0x8015a2 <pxCurrentTimerList+0x1>
    31cc:	80 81       	ld	r24, Z
    31ce:	91 e0       	ldi	r25, 0x01	; 1
    31d0:	81 11       	cpse	r24, r1
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	9c 93       	st	X, r25
    31d6:	91 11       	cpse	r25, r1
    31d8:	08 c0       	rjmp	.+16     	; 0x31ea <prvGetNextExpireTime+0x28>
    31da:	07 80       	ldd	r0, Z+7	; 0x07
    31dc:	f0 85       	ldd	r31, Z+8	; 0x08
    31de:	e0 2d       	mov	r30, r0
    31e0:	60 81       	ld	r22, Z
    31e2:	71 81       	ldd	r23, Z+1	; 0x01
    31e4:	82 81       	ldd	r24, Z+2	; 0x02
    31e6:	93 81       	ldd	r25, Z+3	; 0x03
    31e8:	08 95       	ret
    31ea:	60 e0       	ldi	r22, 0x00	; 0
    31ec:	70 e0       	ldi	r23, 0x00	; 0
    31ee:	cb 01       	movw	r24, r22
    31f0:	08 95       	ret

000031f2 <prvInsertTimerInActiveList>:
    31f2:	cf 92       	push	r12
    31f4:	df 92       	push	r13
    31f6:	ef 92       	push	r14
    31f8:	ff 92       	push	r15
    31fa:	0f 93       	push	r16
    31fc:	1f 93       	push	r17
    31fe:	fc 01       	movw	r30, r24
    3200:	42 83       	std	Z+2, r20	; 0x02
    3202:	53 83       	std	Z+3, r21	; 0x03
    3204:	64 83       	std	Z+4, r22	; 0x04
    3206:	75 83       	std	Z+5, r23	; 0x05
    3208:	93 87       	std	Z+11, r25	; 0x0b
    320a:	82 87       	std	Z+10, r24	; 0x0a
    320c:	04 17       	cp	r16, r20
    320e:	15 07       	cpc	r17, r21
    3210:	26 07       	cpc	r18, r22
    3212:	37 07       	cpc	r19, r23
    3214:	c0 f0       	brcs	.+48     	; 0x3246 <prvInsertTimerInActiveList+0x54>
    3216:	0c 19       	sub	r16, r12
    3218:	1d 09       	sbc	r17, r13
    321a:	2e 09       	sbc	r18, r14
    321c:	3f 09       	sbc	r19, r15
    321e:	86 85       	ldd	r24, Z+14	; 0x0e
    3220:	97 85       	ldd	r25, Z+15	; 0x0f
    3222:	a0 89       	ldd	r26, Z+16	; 0x10
    3224:	b1 89       	ldd	r27, Z+17	; 0x11
    3226:	08 17       	cp	r16, r24
    3228:	19 07       	cpc	r17, r25
    322a:	2a 07       	cpc	r18, r26
    322c:	3b 07       	cpc	r19, r27
    322e:	00 f5       	brcc	.+64     	; 0x3270 <prvInsertTimerInActiveList+0x7e>
    3230:	bf 01       	movw	r22, r30
    3232:	6e 5f       	subi	r22, 0xFE	; 254
    3234:	7f 4f       	sbci	r23, 0xFF	; 255
    3236:	80 91 9f 15 	lds	r24, 0x159F	; 0x80159f <pxOverflowTimerList>
    323a:	90 91 a0 15 	lds	r25, 0x15A0	; 0x8015a0 <pxOverflowTimerList+0x1>
    323e:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vListInsert>
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	18 c0       	rjmp	.+48     	; 0x3276 <prvInsertTimerInActiveList+0x84>
    3246:	0c 15       	cp	r16, r12
    3248:	1d 05       	cpc	r17, r13
    324a:	2e 05       	cpc	r18, r14
    324c:	3f 05       	cpc	r19, r15
    324e:	28 f4       	brcc	.+10     	; 0x325a <prvInsertTimerInActiveList+0x68>
    3250:	4c 15       	cp	r20, r12
    3252:	5d 05       	cpc	r21, r13
    3254:	6e 05       	cpc	r22, r14
    3256:	7f 05       	cpc	r23, r15
    3258:	68 f4       	brcc	.+26     	; 0x3274 <prvInsertTimerInActiveList+0x82>
    325a:	bf 01       	movw	r22, r30
    325c:	6e 5f       	subi	r22, 0xFE	; 254
    325e:	7f 4f       	sbci	r23, 0xFF	; 255
    3260:	80 91 a1 15 	lds	r24, 0x15A1	; 0x8015a1 <pxCurrentTimerList>
    3264:	90 91 a2 15 	lds	r25, 0x15A2	; 0x8015a2 <pxCurrentTimerList+0x1>
    3268:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vListInsert>
    326c:	80 e0       	ldi	r24, 0x00	; 0
    326e:	03 c0       	rjmp	.+6      	; 0x3276 <prvInsertTimerInActiveList+0x84>
    3270:	81 e0       	ldi	r24, 0x01	; 1
    3272:	01 c0       	rjmp	.+2      	; 0x3276 <prvInsertTimerInActiveList+0x84>
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	1f 91       	pop	r17
    3278:	0f 91       	pop	r16
    327a:	ff 90       	pop	r15
    327c:	ef 90       	pop	r14
    327e:	df 90       	pop	r13
    3280:	cf 90       	pop	r12
    3282:	08 95       	ret

00003284 <prvCheckForValidListAndQueue>:
    3284:	0f b6       	in	r0, 0x3f	; 63
    3286:	f8 94       	cli
    3288:	0f 92       	push	r0
    328a:	80 91 9d 15 	lds	r24, 0x159D	; 0x80159d <xTimerQueue>
    328e:	90 91 9e 15 	lds	r25, 0x159E	; 0x80159e <xTimerQueue+0x1>
    3292:	89 2b       	or	r24, r25
    3294:	e9 f4       	brne	.+58     	; 0x32d0 <prvCheckForValidListAndQueue+0x4c>
    3296:	8e ea       	ldi	r24, 0xAE	; 174
    3298:	95 e1       	ldi	r25, 0x15	; 21
    329a:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInitialise>
    329e:	83 ea       	ldi	r24, 0xA3	; 163
    32a0:	95 e1       	ldi	r25, 0x15	; 21
    32a2:	0e 94 b9 05 	call	0xb72	; 0xb72 <vListInitialise>
    32a6:	8e ea       	ldi	r24, 0xAE	; 174
    32a8:	95 e1       	ldi	r25, 0x15	; 21
    32aa:	90 93 a2 15 	sts	0x15A2, r25	; 0x8015a2 <pxCurrentTimerList+0x1>
    32ae:	80 93 a1 15 	sts	0x15A1, r24	; 0x8015a1 <pxCurrentTimerList>
    32b2:	83 ea       	ldi	r24, 0xA3	; 163
    32b4:	95 e1       	ldi	r25, 0x15	; 21
    32b6:	90 93 a0 15 	sts	0x15A0, r25	; 0x8015a0 <pxOverflowTimerList+0x1>
    32ba:	80 93 9f 15 	sts	0x159F, r24	; 0x80159f <pxOverflowTimerList>
    32be:	40 e0       	ldi	r20, 0x00	; 0
    32c0:	67 e0       	ldi	r22, 0x07	; 7
    32c2:	8a e0       	ldi	r24, 0x0A	; 10
    32c4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <xQueueGenericCreate>
    32c8:	90 93 9e 15 	sts	0x159E, r25	; 0x80159e <xTimerQueue+0x1>
    32cc:	80 93 9d 15 	sts	0x159D, r24	; 0x80159d <xTimerQueue>
    32d0:	0f 90       	pop	r0
    32d2:	0f be       	out	0x3f, r0	; 63
    32d4:	08 95       	ret

000032d6 <xTimerCreateTimerTask>:
    32d6:	ef 92       	push	r14
    32d8:	ff 92       	push	r15
    32da:	0f 93       	push	r16
    32dc:	d3 df       	rcall	.-90     	; 0x3284 <prvCheckForValidListAndQueue>
    32de:	80 91 9d 15 	lds	r24, 0x159D	; 0x80159d <xTimerQueue>
    32e2:	90 91 9e 15 	lds	r25, 0x159E	; 0x80159e <xTimerQueue+0x1>
    32e6:	89 2b       	or	r24, r25
    32e8:	91 f0       	breq	.+36     	; 0x330e <xTimerCreateTimerTask+0x38>
    32ea:	0f 2e       	mov	r0, r31
    32ec:	fb e9       	ldi	r31, 0x9B	; 155
    32ee:	ef 2e       	mov	r14, r31
    32f0:	f5 e1       	ldi	r31, 0x15	; 21
    32f2:	ff 2e       	mov	r15, r31
    32f4:	f0 2d       	mov	r31, r0
    32f6:	03 e0       	ldi	r16, 0x03	; 3
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	40 ec       	ldi	r20, 0xC0	; 192
    32fe:	50 e0       	ldi	r21, 0x00	; 0
    3300:	68 e3       	ldi	r22, 0x38	; 56
    3302:	73 e0       	ldi	r23, 0x03	; 3
    3304:	88 e5       	ldi	r24, 0x58	; 88
    3306:	91 e0       	ldi	r25, 0x01	; 1
    3308:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <xTaskCreate>
    330c:	01 c0       	rjmp	.+2      	; 0x3310 <xTimerCreateTimerTask+0x3a>
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	0f 91       	pop	r16
    3312:	ff 90       	pop	r15
    3314:	ef 90       	pop	r14
    3316:	08 95       	ret

00003318 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3318:	8f 92       	push	r8
    331a:	9f 92       	push	r9
    331c:	af 92       	push	r10
    331e:	bf 92       	push	r11
    3320:	cf 92       	push	r12
    3322:	df 92       	push	r13
    3324:	ef 92       	push	r14
    3326:	ff 92       	push	r15
    3328:	0f 93       	push	r16
    332a:	1f 93       	push	r17
    332c:	cf 93       	push	r28
    332e:	df 93       	push	r29
    3330:	cd b7       	in	r28, 0x3d	; 61
    3332:	de b7       	in	r29, 0x3e	; 62
    3334:	27 97       	sbiw	r28, 0x07	; 7
    3336:	0f b6       	in	r0, 0x3f	; 63
    3338:	f8 94       	cli
    333a:	de bf       	out	0x3e, r29	; 62
    333c:	0f be       	out	0x3f, r0	; 63
    333e:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3340:	e0 91 9d 15 	lds	r30, 0x159D	; 0x80159d <xTimerQueue>
    3344:	f0 91 9e 15 	lds	r31, 0x159E	; 0x80159e <xTimerQueue+0x1>
    3348:	30 97       	sbiw	r30, 0x00	; 0
    334a:	81 f1       	breq	.+96     	; 0x33ac <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    334c:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    334e:	2a 83       	std	Y+2, r18	; 0x02
    3350:	3b 83       	std	Y+3, r19	; 0x03
    3352:	4c 83       	std	Y+4, r20	; 0x04
    3354:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3356:	9f 83       	std	Y+7, r25	; 0x07
    3358:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    335a:	66 30       	cpi	r22, 0x06	; 6
    335c:	f4 f4       	brge	.+60     	; 0x339a <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    335e:	c4 db       	rcall	.-2168   	; 0x2ae8 <xTaskGetSchedulerState>
    3360:	82 30       	cpi	r24, 0x02	; 2
    3362:	69 f4       	brne	.+26     	; 0x337e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3364:	00 e0       	ldi	r16, 0x00	; 0
    3366:	a7 01       	movw	r20, r14
    3368:	96 01       	movw	r18, r12
    336a:	be 01       	movw	r22, r28
    336c:	6f 5f       	subi	r22, 0xFF	; 255
    336e:	7f 4f       	sbci	r23, 0xFF	; 255
    3370:	80 91 9d 15 	lds	r24, 0x159D	; 0x80159d <xTimerQueue>
    3374:	90 91 9e 15 	lds	r25, 0x159E	; 0x80159e <xTimerQueue+0x1>
    3378:	0e 94 8f 08 	call	0x111e	; 0x111e <xQueueGenericSend>
    337c:	18 c0       	rjmp	.+48     	; 0x33ae <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    337e:	00 e0       	ldi	r16, 0x00	; 0
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	a9 01       	movw	r20, r18
    3386:	be 01       	movw	r22, r28
    3388:	6f 5f       	subi	r22, 0xFF	; 255
    338a:	7f 4f       	sbci	r23, 0xFF	; 255
    338c:	80 91 9d 15 	lds	r24, 0x159D	; 0x80159d <xTimerQueue>
    3390:	90 91 9e 15 	lds	r25, 0x159E	; 0x80159e <xTimerQueue+0x1>
    3394:	0e 94 8f 08 	call	0x111e	; 0x111e <xQueueGenericSend>
    3398:	0a c0       	rjmp	.+20     	; 0x33ae <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    339a:	20 e0       	ldi	r18, 0x00	; 0
    339c:	a8 01       	movw	r20, r16
    339e:	be 01       	movw	r22, r28
    33a0:	6f 5f       	subi	r22, 0xFF	; 255
    33a2:	7f 4f       	sbci	r23, 0xFF	; 255
    33a4:	cf 01       	movw	r24, r30
    33a6:	0e 94 3f 09 	call	0x127e	; 0x127e <xQueueGenericSendFromISR>
    33aa:	01 c0       	rjmp	.+2      	; 0x33ae <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    33ac:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    33ae:	27 96       	adiw	r28, 0x07	; 7
    33b0:	0f b6       	in	r0, 0x3f	; 63
    33b2:	f8 94       	cli
    33b4:	de bf       	out	0x3e, r29	; 62
    33b6:	0f be       	out	0x3f, r0	; 63
    33b8:	cd bf       	out	0x3d, r28	; 61
    33ba:	df 91       	pop	r29
    33bc:	cf 91       	pop	r28
    33be:	1f 91       	pop	r17
    33c0:	0f 91       	pop	r16
    33c2:	ff 90       	pop	r15
    33c4:	ef 90       	pop	r14
    33c6:	df 90       	pop	r13
    33c8:	cf 90       	pop	r12
    33ca:	bf 90       	pop	r11
    33cc:	af 90       	pop	r10
    33ce:	9f 90       	pop	r9
    33d0:	8f 90       	pop	r8
    33d2:	08 95       	ret

000033d4 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    33d4:	8f 92       	push	r8
    33d6:	9f 92       	push	r9
    33d8:	af 92       	push	r10
    33da:	bf 92       	push	r11
    33dc:	cf 92       	push	r12
    33de:	df 92       	push	r13
    33e0:	ef 92       	push	r14
    33e2:	ff 92       	push	r15
    33e4:	0f 93       	push	r16
    33e6:	1f 93       	push	r17
    33e8:	cf 93       	push	r28
    33ea:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    33ec:	3b c0       	rjmp	.+118    	; 0x3464 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    33ee:	07 80       	ldd	r0, Z+7	; 0x07
    33f0:	f0 85       	ldd	r31, Z+8	; 0x08
    33f2:	e0 2d       	mov	r30, r0
    33f4:	80 80       	ld	r8, Z
    33f6:	91 80       	ldd	r9, Z+1	; 0x01
    33f8:	a2 80       	ldd	r10, Z+2	; 0x02
    33fa:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    33fc:	c0 85       	ldd	r28, Z+8	; 0x08
    33fe:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3400:	8e 01       	movw	r16, r28
    3402:	0e 5f       	subi	r16, 0xFE	; 254
    3404:	1f 4f       	sbci	r17, 0xFF	; 255
    3406:	c8 01       	movw	r24, r16
    3408:	0e 94 0b 06 	call	0xc16	; 0xc16 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    340c:	ec 89       	ldd	r30, Y+20	; 0x14
    340e:	fd 89       	ldd	r31, Y+21	; 0x15
    3410:	ce 01       	movw	r24, r28
    3412:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3414:	8e 89       	ldd	r24, Y+22	; 0x16
    3416:	82 ff       	sbrs	r24, 2
    3418:	25 c0       	rjmp	.+74     	; 0x3464 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    341a:	8e 85       	ldd	r24, Y+14	; 0x0e
    341c:	9f 85       	ldd	r25, Y+15	; 0x0f
    341e:	a8 89       	ldd	r26, Y+16	; 0x10
    3420:	b9 89       	ldd	r27, Y+17	; 0x11
    3422:	88 0d       	add	r24, r8
    3424:	99 1d       	adc	r25, r9
    3426:	aa 1d       	adc	r26, r10
    3428:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    342a:	88 16       	cp	r8, r24
    342c:	99 06       	cpc	r9, r25
    342e:	aa 06       	cpc	r10, r26
    3430:	bb 06       	cpc	r11, r27
    3432:	70 f4       	brcc	.+28     	; 0x3450 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3434:	8a 83       	std	Y+2, r24	; 0x02
    3436:	9b 83       	std	Y+3, r25	; 0x03
    3438:	ac 83       	std	Y+4, r26	; 0x04
    343a:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    343c:	db 87       	std	Y+11, r29	; 0x0b
    343e:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3440:	b8 01       	movw	r22, r16
    3442:	80 91 a1 15 	lds	r24, 0x15A1	; 0x8015a1 <pxCurrentTimerList>
    3446:	90 91 a2 15 	lds	r25, 0x15A2	; 0x8015a2 <pxCurrentTimerList+0x1>
    344a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vListInsert>
    344e:	0a c0       	rjmp	.+20     	; 0x3464 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3450:	c1 2c       	mov	r12, r1
    3452:	d1 2c       	mov	r13, r1
    3454:	76 01       	movw	r14, r12
    3456:	00 e0       	ldi	r16, 0x00	; 0
    3458:	10 e0       	ldi	r17, 0x00	; 0
    345a:	a5 01       	movw	r20, r10
    345c:	94 01       	movw	r18, r8
    345e:	60 e0       	ldi	r22, 0x00	; 0
    3460:	ce 01       	movw	r24, r28
    3462:	5a df       	rcall	.-332    	; 0x3318 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3464:	e0 91 a1 15 	lds	r30, 0x15A1	; 0x8015a1 <pxCurrentTimerList>
    3468:	f0 91 a2 15 	lds	r31, 0x15A2	; 0x8015a2 <pxCurrentTimerList+0x1>
    346c:	80 81       	ld	r24, Z
    346e:	81 11       	cpse	r24, r1
    3470:	be cf       	rjmp	.-132    	; 0x33ee <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3472:	80 91 9f 15 	lds	r24, 0x159F	; 0x80159f <pxOverflowTimerList>
    3476:	90 91 a0 15 	lds	r25, 0x15A0	; 0x8015a0 <pxOverflowTimerList+0x1>
    347a:	90 93 a2 15 	sts	0x15A2, r25	; 0x8015a2 <pxCurrentTimerList+0x1>
    347e:	80 93 a1 15 	sts	0x15A1, r24	; 0x8015a1 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3482:	f0 93 a0 15 	sts	0x15A0, r31	; 0x8015a0 <pxOverflowTimerList+0x1>
    3486:	e0 93 9f 15 	sts	0x159F, r30	; 0x80159f <pxOverflowTimerList>
    }
    348a:	df 91       	pop	r29
    348c:	cf 91       	pop	r28
    348e:	1f 91       	pop	r17
    3490:	0f 91       	pop	r16
    3492:	ff 90       	pop	r15
    3494:	ef 90       	pop	r14
    3496:	df 90       	pop	r13
    3498:	cf 90       	pop	r12
    349a:	bf 90       	pop	r11
    349c:	af 90       	pop	r10
    349e:	9f 90       	pop	r9
    34a0:	8f 90       	pop	r8
    34a2:	08 95       	ret

000034a4 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    34a4:	cf 92       	push	r12
    34a6:	df 92       	push	r13
    34a8:	ef 92       	push	r14
    34aa:	ff 92       	push	r15
    34ac:	cf 93       	push	r28
    34ae:	df 93       	push	r29
    34b0:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    34b2:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <xTaskGetTickCount>
    34b6:	6b 01       	movw	r12, r22
    34b8:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    34ba:	80 91 97 15 	lds	r24, 0x1597	; 0x801597 <xLastTime.2436>
    34be:	90 91 98 15 	lds	r25, 0x1598	; 0x801598 <xLastTime.2436+0x1>
    34c2:	a0 91 99 15 	lds	r26, 0x1599	; 0x801599 <xLastTime.2436+0x2>
    34c6:	b0 91 9a 15 	lds	r27, 0x159A	; 0x80159a <xLastTime.2436+0x3>
    34ca:	c8 16       	cp	r12, r24
    34cc:	d9 06       	cpc	r13, r25
    34ce:	ea 06       	cpc	r14, r26
    34d0:	fb 06       	cpc	r15, r27
    34d2:	20 f4       	brcc	.+8      	; 0x34dc <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    34d4:	7f df       	rcall	.-258    	; 0x33d4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	88 83       	st	Y, r24
    34da:	01 c0       	rjmp	.+2      	; 0x34de <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    34dc:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    34de:	c0 92 97 15 	sts	0x1597, r12	; 0x801597 <xLastTime.2436>
    34e2:	d0 92 98 15 	sts	0x1598, r13	; 0x801598 <xLastTime.2436+0x1>
    34e6:	e0 92 99 15 	sts	0x1599, r14	; 0x801599 <xLastTime.2436+0x2>
    34ea:	f0 92 9a 15 	sts	0x159A, r15	; 0x80159a <xLastTime.2436+0x3>

        return xTimeNow;
    }
    34ee:	c7 01       	movw	r24, r14
    34f0:	b6 01       	movw	r22, r12
    34f2:	df 91       	pop	r29
    34f4:	cf 91       	pop	r28
    34f6:	ff 90       	pop	r15
    34f8:	ef 90       	pop	r14
    34fa:	df 90       	pop	r13
    34fc:	cf 90       	pop	r12
    34fe:	08 95       	ret

00003500 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3500:	4f 92       	push	r4
    3502:	5f 92       	push	r5
    3504:	6f 92       	push	r6
    3506:	7f 92       	push	r7
    3508:	8f 92       	push	r8
    350a:	9f 92       	push	r9
    350c:	af 92       	push	r10
    350e:	bf 92       	push	r11
    3510:	cf 92       	push	r12
    3512:	df 92       	push	r13
    3514:	ef 92       	push	r14
    3516:	ff 92       	push	r15
    3518:	0f 93       	push	r16
    351a:	1f 93       	push	r17
    351c:	cf 93       	push	r28
    351e:	df 93       	push	r29
    3520:	4b 01       	movw	r8, r22
    3522:	5c 01       	movw	r10, r24
    3524:	29 01       	movw	r4, r18
    3526:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3528:	e0 91 a1 15 	lds	r30, 0x15A1	; 0x8015a1 <pxCurrentTimerList>
    352c:	f0 91 a2 15 	lds	r31, 0x15A2	; 0x8015a2 <pxCurrentTimerList+0x1>
    3530:	07 80       	ldd	r0, Z+7	; 0x07
    3532:	f0 85       	ldd	r31, Z+8	; 0x08
    3534:	e0 2d       	mov	r30, r0
    3536:	c0 85       	ldd	r28, Z+8	; 0x08
    3538:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    353a:	ce 01       	movw	r24, r28
    353c:	02 96       	adiw	r24, 0x02	; 2
    353e:	0e 94 0b 06 	call	0xc16	; 0xc16 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3542:	8e 89       	ldd	r24, Y+22	; 0x16
    3544:	82 ff       	sbrs	r24, 2
    3546:	1b c0       	rjmp	.+54     	; 0x357e <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3548:	4e 85       	ldd	r20, Y+14	; 0x0e
    354a:	5f 85       	ldd	r21, Y+15	; 0x0f
    354c:	68 89       	ldd	r22, Y+16	; 0x10
    354e:	79 89       	ldd	r23, Y+17	; 0x11
    3550:	48 0d       	add	r20, r8
    3552:	59 1d       	adc	r21, r9
    3554:	6a 1d       	adc	r22, r10
    3556:	7b 1d       	adc	r23, r11
    3558:	75 01       	movw	r14, r10
    355a:	64 01       	movw	r12, r8
    355c:	93 01       	movw	r18, r6
    355e:	82 01       	movw	r16, r4
    3560:	ce 01       	movw	r24, r28
    3562:	47 de       	rcall	.-882    	; 0x31f2 <prvInsertTimerInActiveList>
    3564:	88 23       	and	r24, r24
    3566:	69 f0       	breq	.+26     	; 0x3582 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3568:	c1 2c       	mov	r12, r1
    356a:	d1 2c       	mov	r13, r1
    356c:	76 01       	movw	r14, r12
    356e:	00 e0       	ldi	r16, 0x00	; 0
    3570:	10 e0       	ldi	r17, 0x00	; 0
    3572:	a5 01       	movw	r20, r10
    3574:	94 01       	movw	r18, r8
    3576:	60 e0       	ldi	r22, 0x00	; 0
    3578:	ce 01       	movw	r24, r28
    357a:	ce de       	rcall	.-612    	; 0x3318 <xTimerGenericCommand>
    357c:	02 c0       	rjmp	.+4      	; 0x3582 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    357e:	8e 7f       	andi	r24, 0xFE	; 254
    3580:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3582:	ec 89       	ldd	r30, Y+20	; 0x14
    3584:	fd 89       	ldd	r31, Y+21	; 0x15
    3586:	ce 01       	movw	r24, r28
    3588:	19 95       	eicall
    }
    358a:	df 91       	pop	r29
    358c:	cf 91       	pop	r28
    358e:	1f 91       	pop	r17
    3590:	0f 91       	pop	r16
    3592:	ff 90       	pop	r15
    3594:	ef 90       	pop	r14
    3596:	df 90       	pop	r13
    3598:	cf 90       	pop	r12
    359a:	bf 90       	pop	r11
    359c:	af 90       	pop	r10
    359e:	9f 90       	pop	r9
    35a0:	8f 90       	pop	r8
    35a2:	7f 90       	pop	r7
    35a4:	6f 90       	pop	r6
    35a6:	5f 90       	pop	r5
    35a8:	4f 90       	pop	r4
    35aa:	08 95       	ret

000035ac <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    35ac:	8f 92       	push	r8
    35ae:	9f 92       	push	r9
    35b0:	af 92       	push	r10
    35b2:	bf 92       	push	r11
    35b4:	cf 92       	push	r12
    35b6:	df 92       	push	r13
    35b8:	ef 92       	push	r14
    35ba:	ff 92       	push	r15
    35bc:	1f 93       	push	r17
    35be:	cf 93       	push	r28
    35c0:	df 93       	push	r29
    35c2:	1f 92       	push	r1
    35c4:	cd b7       	in	r28, 0x3d	; 61
    35c6:	de b7       	in	r29, 0x3e	; 62
    35c8:	6b 01       	movw	r12, r22
    35ca:	7c 01       	movw	r14, r24
    35cc:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    35ce:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    35d2:	ce 01       	movw	r24, r28
    35d4:	01 96       	adiw	r24, 0x01	; 1
    35d6:	66 df       	rcall	.-308    	; 0x34a4 <prvSampleTimeNow>
    35d8:	4b 01       	movw	r8, r22
    35da:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    35dc:	89 81       	ldd	r24, Y+1	; 0x01
    35de:	81 11       	cpse	r24, r1
    35e0:	2d c0       	rjmp	.+90     	; 0x363c <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    35e2:	11 11       	cpse	r17, r1
    35e4:	0d c0       	rjmp	.+26     	; 0x3600 <prvProcessTimerOrBlockTask+0x54>
    35e6:	8c 14       	cp	r8, r12
    35e8:	9d 04       	cpc	r9, r13
    35ea:	ae 04       	cpc	r10, r14
    35ec:	bf 04       	cpc	r11, r15
    35ee:	40 f0       	brcs	.+16     	; 0x3600 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    35f0:	0e 94 31 11 	call	0x2262	; 0x2262 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    35f4:	a5 01       	movw	r20, r10
    35f6:	94 01       	movw	r18, r8
    35f8:	c7 01       	movw	r24, r14
    35fa:	b6 01       	movw	r22, r12
    35fc:	81 df       	rcall	.-254    	; 0x3500 <prvProcessExpiredTimer>
    35fe:	20 c0       	rjmp	.+64     	; 0x3640 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3600:	11 23       	and	r17, r17
    3602:	41 f0       	breq	.+16     	; 0x3614 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3604:	e0 91 9f 15 	lds	r30, 0x159F	; 0x80159f <pxOverflowTimerList>
    3608:	f0 91 a0 15 	lds	r31, 0x15A0	; 0x8015a0 <pxOverflowTimerList+0x1>
    360c:	80 81       	ld	r24, Z
    360e:	11 e0       	ldi	r17, 0x01	; 1
    3610:	81 11       	cpse	r24, r1
    3612:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3614:	b7 01       	movw	r22, r14
    3616:	a6 01       	movw	r20, r12
    3618:	48 19       	sub	r20, r8
    361a:	59 09       	sbc	r21, r9
    361c:	6a 09       	sbc	r22, r10
    361e:	7b 09       	sbc	r23, r11
    3620:	21 2f       	mov	r18, r17
    3622:	80 91 9d 15 	lds	r24, 0x159D	; 0x80159d <xTimerQueue>
    3626:	90 91 9e 15 	lds	r25, 0x159E	; 0x80159e <xTimerQueue+0x1>
    362a:	0e 94 09 0a 	call	0x1412	; 0x1412 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    362e:	0e 94 31 11 	call	0x2262	; 0x2262 <xTaskResumeAll>
    3632:	81 11       	cpse	r24, r1
    3634:	05 c0       	rjmp	.+10     	; 0x3640 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3636:	0e 94 87 06 	call	0xd0e	; 0xd0e <vPortYield>
    363a:	02 c0       	rjmp	.+4      	; 0x3640 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    363c:	0e 94 31 11 	call	0x2262	; 0x2262 <xTaskResumeAll>
            }
        }
    }
    3640:	0f 90       	pop	r0
    3642:	df 91       	pop	r29
    3644:	cf 91       	pop	r28
    3646:	1f 91       	pop	r17
    3648:	ff 90       	pop	r15
    364a:	ef 90       	pop	r14
    364c:	df 90       	pop	r13
    364e:	cf 90       	pop	r12
    3650:	bf 90       	pop	r11
    3652:	af 90       	pop	r10
    3654:	9f 90       	pop	r9
    3656:	8f 90       	pop	r8
    3658:	08 95       	ret

0000365a <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    365a:	af 92       	push	r10
    365c:	bf 92       	push	r11
    365e:	cf 92       	push	r12
    3660:	df 92       	push	r13
    3662:	ef 92       	push	r14
    3664:	ff 92       	push	r15
    3666:	0f 93       	push	r16
    3668:	1f 93       	push	r17
    366a:	cf 93       	push	r28
    366c:	df 93       	push	r29
    366e:	cd b7       	in	r28, 0x3d	; 61
    3670:	de b7       	in	r29, 0x3e	; 62
    3672:	28 97       	sbiw	r28, 0x08	; 8
    3674:	0f b6       	in	r0, 0x3f	; 63
    3676:	f8 94       	cli
    3678:	de bf       	out	0x3e, r29	; 62
    367a:	0f be       	out	0x3f, r0	; 63
    367c:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    367e:	82 c0       	rjmp	.+260    	; 0x3784 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3680:	89 81       	ldd	r24, Y+1	; 0x01
    3682:	88 23       	and	r24, r24
    3684:	0c f4       	brge	.+2      	; 0x3688 <prvProcessReceivedCommands+0x2e>
    3686:	7e c0       	rjmp	.+252    	; 0x3784 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3688:	ae 80       	ldd	r10, Y+6	; 0x06
    368a:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    368c:	d5 01       	movw	r26, r10
    368e:	1c 96       	adiw	r26, 0x0c	; 12
    3690:	8d 91       	ld	r24, X+
    3692:	9c 91       	ld	r25, X
    3694:	1d 97       	sbiw	r26, 0x0d	; 13
    3696:	89 2b       	or	r24, r25
    3698:	21 f0       	breq	.+8      	; 0x36a2 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    369a:	c5 01       	movw	r24, r10
    369c:	02 96       	adiw	r24, 0x02	; 2
    369e:	0e 94 0b 06 	call	0xc16	; 0xc16 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    36a2:	ce 01       	movw	r24, r28
    36a4:	08 96       	adiw	r24, 0x08	; 8
    36a6:	fe de       	rcall	.-516    	; 0x34a4 <prvSampleTimeNow>
    36a8:	8b 01       	movw	r16, r22
    36aa:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    36ac:	e9 81       	ldd	r30, Y+1	; 0x01
    36ae:	0e 2e       	mov	r0, r30
    36b0:	00 0c       	add	r0, r0
    36b2:	ff 0b       	sbc	r31, r31
    36b4:	ea 30       	cpi	r30, 0x0A	; 10
    36b6:	f1 05       	cpc	r31, r1
    36b8:	08 f0       	brcs	.+2      	; 0x36bc <prvProcessReceivedCommands+0x62>
    36ba:	64 c0       	rjmp	.+200    	; 0x3784 <prvProcessReceivedCommands+0x12a>
    36bc:	88 27       	eor	r24, r24
    36be:	ee 58       	subi	r30, 0x8E	; 142
    36c0:	ff 4f       	sbci	r31, 0xFF	; 255
    36c2:	8f 4f       	sbci	r24, 0xFF	; 255
    36c4:	0c 94 84 31 	jmp	0x6308	; 0x6308 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    36c8:	f5 01       	movw	r30, r10
    36ca:	86 89       	ldd	r24, Z+22	; 0x16
    36cc:	81 60       	ori	r24, 0x01	; 1
    36ce:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    36d0:	ca 80       	ldd	r12, Y+2	; 0x02
    36d2:	db 80       	ldd	r13, Y+3	; 0x03
    36d4:	ec 80       	ldd	r14, Y+4	; 0x04
    36d6:	fd 80       	ldd	r15, Y+5	; 0x05
    36d8:	46 85       	ldd	r20, Z+14	; 0x0e
    36da:	57 85       	ldd	r21, Z+15	; 0x0f
    36dc:	60 89       	ldd	r22, Z+16	; 0x10
    36de:	71 89       	ldd	r23, Z+17	; 0x11
    36e0:	4c 0d       	add	r20, r12
    36e2:	5d 1d       	adc	r21, r13
    36e4:	6e 1d       	adc	r22, r14
    36e6:	7f 1d       	adc	r23, r15
    36e8:	c5 01       	movw	r24, r10
    36ea:	83 dd       	rcall	.-1274   	; 0x31f2 <prvInsertTimerInActiveList>
    36ec:	88 23       	and	r24, r24
    36ee:	09 f4       	brne	.+2      	; 0x36f2 <prvProcessReceivedCommands+0x98>
    36f0:	49 c0       	rjmp	.+146    	; 0x3784 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    36f2:	d5 01       	movw	r26, r10
    36f4:	54 96       	adiw	r26, 0x14	; 20
    36f6:	ed 91       	ld	r30, X+
    36f8:	fc 91       	ld	r31, X
    36fa:	55 97       	sbiw	r26, 0x15	; 21
    36fc:	c5 01       	movw	r24, r10
    36fe:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3700:	f5 01       	movw	r30, r10
    3702:	86 89       	ldd	r24, Z+22	; 0x16
    3704:	82 ff       	sbrs	r24, 2
    3706:	3e c0       	rjmp	.+124    	; 0x3784 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3708:	4a 81       	ldd	r20, Y+2	; 0x02
    370a:	5b 81       	ldd	r21, Y+3	; 0x03
    370c:	6c 81       	ldd	r22, Y+4	; 0x04
    370e:	7d 81       	ldd	r23, Y+5	; 0x05
    3710:	86 85       	ldd	r24, Z+14	; 0x0e
    3712:	97 85       	ldd	r25, Z+15	; 0x0f
    3714:	a0 89       	ldd	r26, Z+16	; 0x10
    3716:	b1 89       	ldd	r27, Z+17	; 0x11
    3718:	9a 01       	movw	r18, r20
    371a:	ab 01       	movw	r20, r22
    371c:	28 0f       	add	r18, r24
    371e:	39 1f       	adc	r19, r25
    3720:	4a 1f       	adc	r20, r26
    3722:	5b 1f       	adc	r21, r27
    3724:	c1 2c       	mov	r12, r1
    3726:	d1 2c       	mov	r13, r1
    3728:	76 01       	movw	r14, r12
    372a:	00 e0       	ldi	r16, 0x00	; 0
    372c:	10 e0       	ldi	r17, 0x00	; 0
    372e:	60 e0       	ldi	r22, 0x00	; 0
    3730:	c5 01       	movw	r24, r10
    3732:	f2 dd       	rcall	.-1052   	; 0x3318 <xTimerGenericCommand>
    3734:	27 c0       	rjmp	.+78     	; 0x3784 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3736:	d5 01       	movw	r26, r10
    3738:	56 96       	adiw	r26, 0x16	; 22
    373a:	8c 91       	ld	r24, X
    373c:	56 97       	sbiw	r26, 0x16	; 22
    373e:	8e 7f       	andi	r24, 0xFE	; 254
    3740:	56 96       	adiw	r26, 0x16	; 22
    3742:	8c 93       	st	X, r24
                        break;
    3744:	1f c0       	rjmp	.+62     	; 0x3784 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3746:	f5 01       	movw	r30, r10
    3748:	86 89       	ldd	r24, Z+22	; 0x16
    374a:	81 60       	ori	r24, 0x01	; 1
    374c:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    374e:	4a 81       	ldd	r20, Y+2	; 0x02
    3750:	5b 81       	ldd	r21, Y+3	; 0x03
    3752:	6c 81       	ldd	r22, Y+4	; 0x04
    3754:	7d 81       	ldd	r23, Y+5	; 0x05
    3756:	46 87       	std	Z+14, r20	; 0x0e
    3758:	57 87       	std	Z+15, r21	; 0x0f
    375a:	60 8b       	std	Z+16, r22	; 0x10
    375c:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    375e:	40 0f       	add	r20, r16
    3760:	51 1f       	adc	r21, r17
    3762:	62 1f       	adc	r22, r18
    3764:	73 1f       	adc	r23, r19
    3766:	68 01       	movw	r12, r16
    3768:	79 01       	movw	r14, r18
    376a:	c5 01       	movw	r24, r10
    376c:	42 dd       	rcall	.-1404   	; 0x31f2 <prvInsertTimerInActiveList>
                        break;
    376e:	0a c0       	rjmp	.+20     	; 0x3784 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3770:	f5 01       	movw	r30, r10
    3772:	86 89       	ldd	r24, Z+22	; 0x16
    3774:	81 fd       	sbrc	r24, 1
    3776:	04 c0       	rjmp	.+8      	; 0x3780 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3778:	c5 01       	movw	r24, r10
    377a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <vPortFree>
    377e:	02 c0       	rjmp	.+4      	; 0x3784 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3780:	8e 7f       	andi	r24, 0xFE	; 254
    3782:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3784:	20 e0       	ldi	r18, 0x00	; 0
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	a9 01       	movw	r20, r18
    378a:	be 01       	movw	r22, r28
    378c:	6f 5f       	subi	r22, 0xFF	; 255
    378e:	7f 4f       	sbci	r23, 0xFF	; 255
    3790:	80 91 9d 15 	lds	r24, 0x159D	; 0x80159d <xTimerQueue>
    3794:	90 91 9e 15 	lds	r25, 0x159E	; 0x80159e <xTimerQueue+0x1>
    3798:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <xQueueReceive>
    379c:	81 11       	cpse	r24, r1
    379e:	70 cf       	rjmp	.-288    	; 0x3680 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    37a0:	28 96       	adiw	r28, 0x08	; 8
    37a2:	0f b6       	in	r0, 0x3f	; 63
    37a4:	f8 94       	cli
    37a6:	de bf       	out	0x3e, r29	; 62
    37a8:	0f be       	out	0x3f, r0	; 63
    37aa:	cd bf       	out	0x3d, r28	; 61
    37ac:	df 91       	pop	r29
    37ae:	cf 91       	pop	r28
    37b0:	1f 91       	pop	r17
    37b2:	0f 91       	pop	r16
    37b4:	ff 90       	pop	r15
    37b6:	ef 90       	pop	r14
    37b8:	df 90       	pop	r13
    37ba:	cf 90       	pop	r12
    37bc:	bf 90       	pop	r11
    37be:	af 90       	pop	r10
    37c0:	08 95       	ret

000037c2 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    37c2:	08 95       	ret

000037c4 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    37c4:	84 b1       	in	r24, 0x04	; 4
    37c6:	80 68       	ori	r24, 0x80	; 128
    37c8:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    37ca:	85 b1       	in	r24, 0x05	; 5
    37cc:	80 68       	ori	r24, 0x80	; 128
    37ce:	85 b9       	out	0x05, r24	; 5
    37d0:	08 95       	ret

000037d2 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    37d2:	83 b1       	in	r24, 0x03	; 3
    37d4:	80 68       	ori	r24, 0x80	; 128
    37d6:	83 b9       	out	0x03, r24	; 3
    37d8:	08 95       	ret

000037da <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    37da:	f4 df       	rcall	.-24     	; 0x37c4 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    37dc:	2f ef       	ldi	r18, 0xFF	; 255
    37de:	80 e7       	ldi	r24, 0x70	; 112
    37e0:	92 e0       	ldi	r25, 0x02	; 2
    37e2:	21 50       	subi	r18, 0x01	; 1
    37e4:	80 40       	sbci	r24, 0x00	; 0
    37e6:	90 40       	sbci	r25, 0x00	; 0
    37e8:	e1 f7       	brne	.-8      	; 0x37e2 <vApplicationMallocFailedHook+0x8>
    37ea:	00 c0       	rjmp	.+0      	; 0x37ec <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    37ec:	00 00       	nop
    37ee:	f1 df       	rcall	.-30     	; 0x37d2 <prvBlinkMainLed>
    37f0:	f5 cf       	rjmp	.-22     	; 0x37dc <vApplicationMallocFailedHook+0x2>

000037f2 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    37f2:	e8 df       	rcall	.-48     	; 0x37c4 <prvSetMainLedOn>
    37f4:	2f ef       	ldi	r18, 0xFF	; 255
    37f6:	87 ea       	ldi	r24, 0xA7	; 167
    37f8:	91 e6       	ldi	r25, 0x61	; 97
    37fa:	21 50       	subi	r18, 0x01	; 1
    37fc:	80 40       	sbci	r24, 0x00	; 0
    37fe:	90 40       	sbci	r25, 0x00	; 0
    3800:	e1 f7       	brne	.-8      	; 0x37fa <vApplicationStackOverflowHook+0x8>
    3802:	00 c0       	rjmp	.+0      	; 0x3804 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3804:	00 00       	nop
    3806:	e5 df       	rcall	.-54     	; 0x37d2 <prvBlinkMainLed>
    3808:	f5 cf       	rjmp	.-22     	; 0x37f4 <vApplicationStackOverflowHook+0x2>

0000380a <hih8120_handler_initialise>:
int16_t temperatureIn16 = 0;


void hih820_handler_task( void *pvParameters );

void hih8120_handler_initialise(UBaseType_t hih8120_task_priority){
    380a:	ef 92       	push	r14
    380c:	ff 92       	push	r15
    380e:	0f 93       	push	r16
    3810:	08 2f       	mov	r16, r24
	if ( HIH8120_OK == hih8120_initialise() ){
    3812:	96 d2       	rcall	.+1324   	; 0x3d40 <hih8120_initialise>
    3814:	81 11       	cpse	r24, r1
    3816:	0c c0       	rjmp	.+24     	; 0x3830 <hih8120_handler_initialise+0x26>
			printf("%d\n",HIH8120_OK);
    3818:	1f 92       	push	r1
    381a:	1f 92       	push	r1
    381c:	80 e4       	ldi	r24, 0x40	; 64
    381e:	93 e0       	ldi	r25, 0x03	; 3
    3820:	9f 93       	push	r25
    3822:	8f 93       	push	r24
    3824:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
    3828:	0f 90       	pop	r0
    382a:	0f 90       	pop	r0
    382c:	0f 90       	pop	r0
    382e:	0f 90       	pop	r0
	}
	xTaskCreate(
    3830:	e1 2c       	mov	r14, r1
    3832:	f1 2c       	mov	r15, r1
    3834:	20 e0       	ldi	r18, 0x00	; 0
    3836:	30 e0       	ldi	r19, 0x00	; 0
    3838:	40 ec       	ldi	r20, 0xC0	; 192
    383a:	50 e0       	ldi	r21, 0x00	; 0
    383c:	64 e4       	ldi	r22, 0x44	; 68
    383e:	73 e0       	ldi	r23, 0x03	; 3
    3840:	88 e4       	ldi	r24, 0x48	; 72
    3842:	9c e1       	ldi	r25, 0x1C	; 28
    3844:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <xTaskCreate>
	,  "Hih820Hand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  hih8120_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3848:	0f 91       	pop	r16
    384a:	ff 90       	pop	r15
    384c:	ef 90       	pop	r14
    384e:	08 95       	ret

00003850 <hih820_getHumidityInUint16>:
		}
	}
}

uint16_t hih820_getHumidityInUint16(){
	return humidityIn16/10;
    3850:	20 91 bb 15 	lds	r18, 0x15BB	; 0x8015bb <humidityIn16>
    3854:	30 91 bc 15 	lds	r19, 0x15BC	; 0x8015bc <humidityIn16+0x1>
    3858:	ad ec       	ldi	r26, 0xCD	; 205
    385a:	bc ec       	ldi	r27, 0xCC	; 204
    385c:	0e 94 8c 31 	call	0x6318	; 0x6318 <__umulhisi3>
}
    3860:	96 95       	lsr	r25
    3862:	87 95       	ror	r24
    3864:	96 95       	lsr	r25
    3866:	87 95       	ror	r24
    3868:	96 95       	lsr	r25
    386a:	87 95       	ror	r24
    386c:	08 95       	ret

0000386e <hih820_getTemperatureInUint16>:

int16_t hih820_getTemperatureInUint16(){
	return temperatureIn16/10;
    386e:	80 91 b9 15 	lds	r24, 0x15B9	; 0x8015b9 <temperatureIn16>
    3872:	90 91 ba 15 	lds	r25, 0x15BA	; 0x8015ba <temperatureIn16+0x1>
    3876:	6a e0       	ldi	r22, 0x0A	; 10
    3878:	70 e0       	ldi	r23, 0x00	; 0
    387a:	0e 94 4f 31 	call	0x629e	; 0x629e <__divmodhi4>
    387e:	cb 01       	movw	r24, r22
}
    3880:	08 95       	ret

00003882 <hih820_aFunctionToSetBits>:
void hih820_aFunctionToSetBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Set bit 0 and bit 4 in xEventGroup. */
  uxBits = xEventGroupSetBits(
    3882:	40 e1       	ldi	r20, 0x10	; 16
    3884:	50 e0       	ldi	r21, 0x00	; 0
    3886:	60 e0       	ldi	r22, 0x00	; 0
    3888:	70 e0       	ldi	r23, 0x00	; 0
    388a:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <xEventGroupSetBits>
    388e:	08 95       	ret

00003890 <hih820_handler_task>:
	,  hih8120_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void hih820_handler_task(void *pvParameters)
{
    3890:	cf 93       	push	r28
    3892:	df 93       	push	r29
    3894:	00 d0       	rcall	.+0      	; 0x3896 <hih820_handler_task+0x6>
    3896:	1f 92       	push	r1
    3898:	cd b7       	in	r28, 0x3d	; 61
    389a:	de b7       	in	r29, 0x3e	; 62
	printf("start1");
    389c:	8f e4       	ldi	r24, 0x4F	; 79
    389e:	93 e0       	ldi	r25, 0x03	; 3
    38a0:	9f 93       	push	r25
    38a2:	8f 93       	push	r24
    38a4:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
	(void)pvParameters;
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    38a8:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <xTaskGetTickCount>
    38ac:	69 83       	std	Y+1, r22	; 0x01
    38ae:	7a 83       	std	Y+2, r23	; 0x02
    38b0:	8b 83       	std	Y+3, r24	; 0x03
    38b2:	9c 83       	std	Y+4, r25	; 0x04
    38b4:	0f 90       	pop	r0
    38b6:	0f 90       	pop	r0
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    38b8:	48 ea       	ldi	r20, 0xA8	; 168
    38ba:	58 e4       	ldi	r21, 0x48	; 72
    38bc:	60 e0       	ldi	r22, 0x00	; 0
    38be:	70 e0       	ldi	r23, 0x00	; 0
    38c0:	ce 01       	movw	r24, r28
    38c2:	01 96       	adiw	r24, 0x01	; 1
    38c4:	0e 94 0d 12 	call	0x241a	; 0x241a <xTaskDelayUntil>
		printf("start2");
    38c8:	86 e5       	ldi	r24, 0x56	; 86
    38ca:	93 e0       	ldi	r25, 0x03	; 3
    38cc:	9f 93       	push	r25
    38ce:	8f 93       	push	r24
    38d0:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
		if (HIH8120_OK == hih8120_wakeup())
    38d4:	4d d2       	rcall	.+1178   	; 0x3d70 <hih8120_wakeup>
    38d6:	0f 90       	pop	r0
    38d8:	0f 90       	pop	r0
    38da:	81 11       	cpse	r24, r1
    38dc:	ed cf       	rjmp	.-38     	; 0x38b8 <hih820_handler_task+0x28>
		{
			printf("start4");
    38de:	8d e5       	ldi	r24, 0x5D	; 93
    38e0:	93 e0       	ldi	r25, 0x03	; 3
    38e2:	9f 93       	push	r25
    38e4:	8f 93       	push	r24
    38e6:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
			vTaskDelay(50);
    38ea:	62 e3       	ldi	r22, 0x32	; 50
    38ec:	70 e0       	ldi	r23, 0x00	; 0
    38ee:	80 e0       	ldi	r24, 0x00	; 0
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	0e 94 72 12 	call	0x24e4	; 0x24e4 <vTaskDelay>
			if (HIH8120_OK == hih8120_measure())
    38f6:	51 d2       	rcall	.+1186   	; 0x3d9a <hih8120_measure>
    38f8:	0f 90       	pop	r0
    38fa:	0f 90       	pop	r0
    38fc:	81 11       	cpse	r24, r1
    38fe:	dc cf       	rjmp	.-72     	; 0x38b8 <hih820_handler_task+0x28>
			{
				printf("start5");
    3900:	84 e6       	ldi	r24, 0x64	; 100
    3902:	93 e0       	ldi	r25, 0x03	; 3
    3904:	9f 93       	push	r25
    3906:	8f 93       	push	r24
    3908:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
				vTaskDelay(1);
    390c:	61 e0       	ldi	r22, 0x01	; 1
    390e:	70 e0       	ldi	r23, 0x00	; 0
    3910:	80 e0       	ldi	r24, 0x00	; 0
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	0e 94 72 12 	call	0x24e4	; 0x24e4 <vTaskDelay>
				humidityIn16 = hih8120_getHumidityPercent_x10();
    3918:	66 d2       	rcall	.+1228   	; 0x3de6 <hih8120_getHumidityPercent_x10>
    391a:	90 93 bc 15 	sts	0x15BC, r25	; 0x8015bc <humidityIn16+0x1>
    391e:	80 93 bb 15 	sts	0x15BB, r24	; 0x8015bb <humidityIn16>
				temperatureIn16 = hih8120_getTemperature_x10();
    3922:	87 d2       	rcall	.+1294   	; 0x3e32 <hih8120_getTemperature_x10>
    3924:	90 93 ba 15 	sts	0x15BA, r25	; 0x8015ba <temperatureIn16+0x1>
    3928:	80 93 b9 15 	sts	0x15B9, r24	; 0x8015b9 <temperatureIn16>
				printf("Arrived here");
    392c:	8b e6       	ldi	r24, 0x6B	; 107
    392e:	93 e0       	ldi	r25, 0x03	; 3
    3930:	9f 93       	push	r25
    3932:	8f 93       	push	r24
    3934:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
				hih820_aFunctionToSetBits(Application_getEventGroup());
    3938:	0e 94 89 01 	call	0x312	; 0x312 <Application_getEventGroup>
    393c:	a2 df       	rcall	.-188    	; 0x3882 <hih820_aFunctionToSetBits>
    393e:	0f 90       	pop	r0
    3940:	0f 90       	pop	r0
    3942:	0f 90       	pop	r0
    3944:	0f 90       	pop	r0
    3946:	b8 cf       	rjmp	.-144    	; 0x38b8 <hih820_handler_task+0x28>

00003948 <create_semaphores>:
void hih8120_handler_initialise(UBaseType_t hih8120_handler_task_priority);
// Prototype for Application handler
void Application_handler_initialise(UBaseType_t Application_task_priority);

void create_semaphores(void)
{
    3948:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    394a:	80 91 90 17 	lds	r24, 0x1790	; 0x801790 <xTestSemaphore>
    394e:	90 91 91 17 	lds	r25, 0x1791	; 0x801791 <xTestSemaphore+0x1>
    3952:	89 2b       	or	r24, r25
    3954:	89 f4       	brne	.+34     	; 0x3978 <create_semaphores+0x30>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    3956:	81 e0       	ldi	r24, 0x01	; 1
    3958:	0e 94 33 09 	call	0x1266	; 0x1266 <xQueueCreateMutex>
    395c:	90 93 91 17 	sts	0x1791, r25	; 0x801791 <xTestSemaphore+0x1>
    3960:	80 93 90 17 	sts	0x1790, r24	; 0x801790 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    3964:	00 97       	sbiw	r24, 0x00	; 0
    3966:	41 f0       	breq	.+16     	; 0x3978 <create_semaphores+0x30>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    3968:	00 e0       	ldi	r16, 0x00	; 0
    396a:	20 e0       	ldi	r18, 0x00	; 0
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	a9 01       	movw	r20, r18
    3970:	60 e0       	ldi	r22, 0x00	; 0
    3972:	70 e0       	ldi	r23, 0x00	; 0
    3974:	0e 94 8f 08 	call	0x111e	; 0x111e <xQueueGenericSend>
		}
	}
}
    3978:	0f 91       	pop	r16
    397a:	08 95       	ret

0000397c <main>:
/*-----------------------------------------------------------*/
int main(void)
{
	// Must be done as the very first thing!!
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    397c:	80 e0       	ldi	r24, 0x00	; 0
    397e:	0e 94 40 28 	call	0x5080	; 0x5080 <stdio_initialise>
	// Let's create some semaphores
	create_semaphores();
    3982:	e2 df       	rcall	.-60     	; 0x3948 <create_semaphores>
	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(6); // Priority 5 for internal task
    3984:	86 e0       	ldi	r24, 0x06	; 6
    3986:	0e 94 47 29 	call	0x528e	; 0x528e <status_leds_initialise>
	//Initialize Application
	Application_handler_initialise(5);
    398a:	85 e0       	ldi	r24, 0x05	; 5
    398c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Application_handler_initialise>
	//initialize CO2Sensor
	mh_z19_initialise(ser_USART3);
    3990:	83 e0       	ldi	r24, 0x03	; 3
    3992:	20 d7       	rcall	.+3648   	; 0x47d4 <mh_z19_initialise>
	//create CO2 task
	CO2Sensor_handler_initialise(4);
    3994:	84 e0       	ldi	r24, 0x04	; 4
    3996:	0e 94 0e 02 	call	0x41c	; 0x41c <CO2Sensor_handler_initialise>
	//Create humidity temperature task and start with priority 3
	hih8120_handler_initialise(3);
    399a:	83 e0       	ldi	r24, 0x03	; 3
	//initialize rc_servo
	rc_servo_initialise();
    399c:	36 df       	rcall	.-404    	; 0x380a <hih8120_handler_initialise>
    399e:	9c d7       	rcall	.+3896   	; 0x48d8 <rc_servo_initialise>
	// Initialise the LoRaWAN driver with down-link buffer
	downLinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    39a0:	41 e0       	ldi	r20, 0x01	; 1
    39a2:	60 e0       	ldi	r22, 0x00	; 0
    39a4:	70 e0       	ldi	r23, 0x00	; 0
    39a6:	8c e2       	ldi	r24, 0x2C	; 44
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <xStreamBufferGenericCreate>
    39ae:	90 93 8f 17 	sts	0x178F, r25	; 0x80178f <downLinkMessageBufferHandle+0x1>
    39b2:	80 93 8e 17 	sts	0x178E, r24	; 0x80178e <downLinkMessageBufferHandle>
	lora_driver_initialise(1, downLinkMessageBufferHandle);
    39b6:	bc 01       	movw	r22, r24
    39b8:	81 e0       	ldi	r24, 0x01	; 1
	// Create LoRaWAN task and start it up with priority 2
	UpLinkHandler_lora_handler_initialise(2);
    39ba:	65 d3       	rcall	.+1738   	; 0x4086 <lora_driver_initialise>
    39bc:	82 e0       	ldi	r24, 0x02	; 2
    39be:	7f d1       	rcall	.+766    	; 0x3cbe <UpLinkHandler_lora_handler_initialise>
	//Create LoRaWAN task and start with priority 1
	DownLinkHandler_lora_handler_initialise(1,downLinkMessageBufferHandle);
    39c0:	60 91 8e 17 	lds	r22, 0x178E	; 0x80178e <downLinkMessageBufferHandle>
    39c4:	70 91 8f 17 	lds	r23, 0x178F	; 0x80178f <downLinkMessageBufferHandle+0x1>
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	0e 94 c9 02 	call	0x592	; 0x592 <DownLinkHandler_lora_handler_initialise>
	
	printf("Program Started!!\n");
    39ce:	88 e7       	ldi	r24, 0x78	; 120
    39d0:	93 e0       	ldi	r25, 0x03	; 3
    39d2:	0e 94 70 34 	call	0x68e0	; 0x68e0 <puts>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    39d6:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <vTaskStartScheduler>
    39da:	ff cf       	rjmp	.-2      	; 0x39da <main+0x5e>

000039dc <SensorDataPackageHandler_SetCO2>:
int16_t tempIn16 = 0.0;
uint16_t co2_ppmIn16 = 0.0;
static lora_driver_payload_t _uplink_payload;

void SensorDataPackageHandler_SetCO2(uint16_t co2){
	co2_ppmIn16 = co2;
    39dc:	90 93 d4 15 	sts	0x15D4, r25	; 0x8015d4 <co2_ppmIn16+0x1>
    39e0:	80 93 d3 15 	sts	0x15D3, r24	; 0x8015d3 <co2_ppmIn16>
    39e4:	08 95       	ret

000039e6 <SensorDataPackageHandler_SetHumidity>:
}

void SensorDataPackageHandler_SetHumidity(uint16_t humidity){
	humIn16 = humidity;
    39e6:	90 93 d8 15 	sts	0x15D8, r25	; 0x8015d8 <humIn16+0x1>
    39ea:	80 93 d7 15 	sts	0x15D7, r24	; 0x8015d7 <humIn16>
    39ee:	08 95       	ret

000039f0 <SensorDataPackageHandler_SetTemperature>:
}

void SensorDataPackageHandler_SetTemperature(int16_t temperature){
	tempIn16 = temperature;
    39f0:	90 93 d6 15 	sts	0x15D6, r25	; 0x8015d6 <tempIn16+0x1>
    39f4:	80 93 d5 15 	sts	0x15D5, r24	; 0x8015d5 <tempIn16>
    39f8:	08 95       	ret

000039fa <SensorDataPackageHandler_getLoRaPayload>:
}

lora_driver_payload_t SensorDataPackageHandler_getLoRaPayload(){
    39fa:	cf 93       	push	r28
    39fc:	df 93       	push	r29
    39fe:	ec 01       	movw	r28, r24
	printf("STARTEDSensorDataPackageHandler");
    3a00:	8a e8       	ldi	r24, 0x8A	; 138
    3a02:	93 e0       	ldi	r25, 0x03	; 3
    3a04:	9f 93       	push	r25
    3a06:	8f 93       	push	r24
    3a08:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
	printf("and this is the changed hum %u\n", humIn16);
    3a0c:	80 91 d8 15 	lds	r24, 0x15D8	; 0x8015d8 <humIn16+0x1>
    3a10:	8f 93       	push	r24
    3a12:	80 91 d7 15 	lds	r24, 0x15D7	; 0x8015d7 <humIn16>
    3a16:	8f 93       	push	r24
    3a18:	8a ea       	ldi	r24, 0xAA	; 170
    3a1a:	93 e0       	ldi	r25, 0x03	; 3
    3a1c:	9f 93       	push	r25
    3a1e:	8f 93       	push	r24
    3a20:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
	printf("and also the changed temp %u\n", tempIn16);
    3a24:	80 91 d6 15 	lds	r24, 0x15D6	; 0x8015d6 <tempIn16+0x1>
    3a28:	8f 93       	push	r24
    3a2a:	80 91 d5 15 	lds	r24, 0x15D5	; 0x8015d5 <tempIn16>
    3a2e:	8f 93       	push	r24
    3a30:	8a ec       	ldi	r24, 0xCA	; 202
    3a32:	93 e0       	ldi	r25, 0x03	; 3
    3a34:	9f 93       	push	r25
    3a36:	8f 93       	push	r24
    3a38:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
	printf("and also the changed CO2 %u\n", co2_ppmIn16);
    3a3c:	80 91 d4 15 	lds	r24, 0x15D4	; 0x8015d4 <co2_ppmIn16+0x1>
    3a40:	8f 93       	push	r24
    3a42:	80 91 d3 15 	lds	r24, 0x15D3	; 0x8015d3 <co2_ppmIn16>
    3a46:	8f 93       	push	r24
    3a48:	88 ee       	ldi	r24, 0xE8	; 232
    3a4a:	93 e0       	ldi	r25, 0x03	; 3
    3a4c:	9f 93       	push	r25
    3a4e:	8f 93       	push	r24
    3a50:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
	
	_uplink_payload.len = 6;
    3a54:	ed eb       	ldi	r30, 0xBD	; 189
    3a56:	f5 e1       	ldi	r31, 0x15	; 21
    3a58:	86 e0       	ldi	r24, 0x06	; 6
    3a5a:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.portNo = 2;
    3a5c:	82 e0       	ldi	r24, 0x02	; 2
    3a5e:	80 83       	st	Z, r24
	_uplink_payload.bytes[0] = humIn16 >> 8;
    3a60:	80 91 d7 15 	lds	r24, 0x15D7	; 0x8015d7 <humIn16>
    3a64:	90 91 d8 15 	lds	r25, 0x15D8	; 0x8015d8 <humIn16+0x1>
    3a68:	92 83       	std	Z+2, r25	; 0x02
	_uplink_payload.bytes[1] = humIn16 & 0xFF;
    3a6a:	83 83       	std	Z+3, r24	; 0x03
	_uplink_payload.bytes[2] = tempIn16 >> 8;
    3a6c:	80 91 d5 15 	lds	r24, 0x15D5	; 0x8015d5 <tempIn16>
    3a70:	90 91 d6 15 	lds	r25, 0x15D6	; 0x8015d6 <tempIn16+0x1>
    3a74:	94 83       	std	Z+4, r25	; 0x04
	_uplink_payload.bytes[3] = tempIn16 & 0xFF;
    3a76:	85 83       	std	Z+5, r24	; 0x05
	_uplink_payload.bytes[4] = co2_ppmIn16 >> 8;
    3a78:	80 91 d3 15 	lds	r24, 0x15D3	; 0x8015d3 <co2_ppmIn16>
    3a7c:	90 91 d4 15 	lds	r25, 0x15D4	; 0x8015d4 <co2_ppmIn16+0x1>
    3a80:	96 83       	std	Z+6, r25	; 0x06
	_uplink_payload.bytes[5] = co2_ppmIn16 & 0xFF;
    3a82:	87 83       	std	Z+7, r24	; 0x07
	return _uplink_payload;
    3a84:	86 e1       	ldi	r24, 0x16	; 22
    3a86:	de 01       	movw	r26, r28
    3a88:	01 90       	ld	r0, Z+
    3a8a:	0d 92       	st	X+, r0
    3a8c:	8a 95       	dec	r24
    3a8e:	e1 f7       	brne	.-8      	; 0x3a88 <SensorDataPackageHandler_getLoRaPayload+0x8e>
    3a90:	8d b7       	in	r24, 0x3d	; 61
    3a92:	9e b7       	in	r25, 0x3e	; 62
    3a94:	0e 96       	adiw	r24, 0x0e	; 14
    3a96:	0f b6       	in	r0, 0x3f	; 63
    3a98:	f8 94       	cli
    3a9a:	9e bf       	out	0x3e, r25	; 62
    3a9c:	0f be       	out	0x3f, r0	; 63
    3a9e:	8d bf       	out	0x3d, r24	; 61
    3aa0:	ce 01       	movw	r24, r28
    3aa2:	df 91       	pop	r29
    3aa4:	cf 91       	pop	r28
    3aa6:	08 95       	ret

00003aa8 <_lora_setup>:
	,  UpLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    3aa8:	cf 93       	push	r28
    3aaa:	df 93       	push	r29
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3aac:	81 e0       	ldi	r24, 0x01	; 1
    3aae:	0e 94 95 29 	call	0x532a	; 0x532a <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3ab2:	37 d3       	rcall	.+1646   	; 0x4122 <lora_driver_rn2483FactoryReset>
    3ab4:	b3 d5       	rcall	.+2918   	; 0x461c <lora_driver_mapReturnCodeToText>
    3ab6:	9f 93       	push	r25
    3ab8:	8f 93       	push	r24
    3aba:	85 e0       	ldi	r24, 0x05	; 5
    3abc:	94 e0       	ldi	r25, 0x04	; 4
    3abe:	9f 93       	push	r25
    3ac0:	8f 93       	push	r24
    3ac2:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3ac6:	ab d4       	rcall	.+2390   	; 0x441e <lora_driver_configureToEu868>
    3ac8:	a9 d5       	rcall	.+2898   	; 0x461c <lora_driver_mapReturnCodeToText>
    3aca:	9f 93       	push	r25
    3acc:	8f 93       	push	r24
    3ace:	88 e1       	ldi	r24, 0x18	; 24
    3ad0:	94 e0       	ldi	r25, 0x04	; 4
    3ad2:	9f 93       	push	r25
    3ad4:	8f 93       	push	r24
    3ad6:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
    3ada:	8f ee       	ldi	r24, 0xEF	; 239

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3adc:	95 e1       	ldi	r25, 0x15	; 21
    3ade:	33 d3       	rcall	.+1638   	; 0x4146 <lora_driver_getRn2483Hweui>
    3ae0:	9d d5       	rcall	.+2874   	; 0x461c <lora_driver_mapReturnCodeToText>
    3ae2:	cf ee       	ldi	r28, 0xEF	; 239
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3ae4:	d5 e1       	ldi	r29, 0x15	; 21
    3ae6:	df 93       	push	r29
    3ae8:	cf 93       	push	r28
    3aea:	9f 93       	push	r25
    3aec:	8f 93       	push	r24
    3aee:	81 e3       	ldi	r24, 0x31	; 49
    3af0:	94 e0       	ldi	r25, 0x04	; 4
    3af2:	9f 93       	push	r25
    3af4:	8f 93       	push	r24
    3af6:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
    3afa:	ce 01       	movw	r24, r28

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3afc:	40 d3       	rcall	.+1664   	; 0x417e <lora_driver_setDeviceIdentifier>
    3afe:	8e d5       	rcall	.+2844   	; 0x461c <lora_driver_mapReturnCodeToText>
    3b00:	9f 93       	push	r25
    3b02:	8f 93       	push	r24
    3b04:	df 93       	push	r29
    3b06:	cf 93       	push	r28
    3b08:	85 e4       	ldi	r24, 0x45	; 69
    3b0a:	94 e0       	ldi	r25, 0x04	; 4
    3b0c:	9f 93       	push	r25
    3b0e:	8f 93       	push	r24
    3b10:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
    3b14:	ae 01       	movw	r20, r28

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3b16:	6a e5       	ldi	r22, 0x5A	; 90
    3b18:	74 e0       	ldi	r23, 0x04	; 4
    3b1a:	8b e7       	ldi	r24, 0x7B	; 123
    3b1c:	94 e0       	ldi	r25, 0x04	; 4
    3b1e:	5d d5       	rcall	.+2746   	; 0x45da <lora_driver_setOtaaIdentity>
    3b20:	7d d5       	rcall	.+2810   	; 0x461c <lora_driver_mapReturnCodeToText>
    3b22:	9f 93       	push	r25
    3b24:	8f 93       	push	r24
    3b26:	df 93       	push	r29
    3b28:	cf 93       	push	r28
    3b2a:	8a e5       	ldi	r24, 0x5A	; 90
    3b2c:	94 e0       	ldi	r25, 0x04	; 4
    3b2e:	9f 93       	push	r25
    3b30:	8f 93       	push	r24
    3b32:	8b e7       	ldi	r24, 0x7B	; 123
    3b34:	94 e0       	ldi	r25, 0x04	; 4
    3b36:	9f 93       	push	r25
    3b38:	8f 93       	push	r24
    3b3a:	8c e8       	ldi	r24, 0x8C	; 140
    3b3c:	94 e0       	ldi	r25, 0x04	; 4
    3b3e:	9f 93       	push	r25
    3b40:	8f 93       	push	r24
    3b42:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
    3b46:	4e d3       	rcall	.+1692   	; 0x41e4 <lora_driver_saveMac>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3b48:	69 d5       	rcall	.+2770   	; 0x461c <lora_driver_mapReturnCodeToText>
    3b4a:	9f 93       	push	r25
    3b4c:	8f 93       	push	r24
    3b4e:	82 ec       	ldi	r24, 0xC2	; 194
    3b50:	94 e0       	ldi	r25, 0x04	; 4
    3b52:	9f 93       	push	r25
    3b54:	8f 93       	push	r24
    3b56:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
    3b5a:	8d b7       	in	r24, 0x3d	; 61

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3b5c:	9e b7       	in	r25, 0x3e	; 62
    3b5e:	82 96       	adiw	r24, 0x22	; 34
    3b60:	0f b6       	in	r0, 0x3f	; 63
    3b62:	f8 94       	cli
    3b64:	9e bf       	out	0x3e, r25	; 62
    3b66:	0f be       	out	0x3f, r0	; 63
    3b68:	8d bf       	out	0x3d, r24	; 61
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	35 d4       	rcall	.+2154   	; 0x43d8 <lora_driver_setAdaptiveDataRate>
    3b6e:	56 d5       	rcall	.+2732   	; 0x461c <lora_driver_mapReturnCodeToText>
    3b70:	9f 93       	push	r25
    3b72:	8f 93       	push	r24
    3b74:	81 ed       	ldi	r24, 0xD1	; 209
    3b76:	94 e0       	ldi	r25, 0x04	; 4
    3b78:	9f 93       	push	r25
    3b7a:	8f 93       	push	r24
    3b7c:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
    3b80:	84 ef       	ldi	r24, 0xF4	; 244

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3b82:	91 e0       	ldi	r25, 0x01	; 1
    3b84:	34 d4       	rcall	.+2152   	; 0x43ee <lora_driver_setReceiveDelay>
    3b86:	4a d5       	rcall	.+2708   	; 0x461c <lora_driver_mapReturnCodeToText>
    3b88:	9f 93       	push	r25
    3b8a:	8f 93       	push	r24
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	8f 93       	push	r24
    3b90:	84 ef       	ldi	r24, 0xF4	; 244
    3b92:	8f 93       	push	r24
    3b94:	82 ef       	ldi	r24, 0xF2	; 242
    3b96:	94 e0       	ldi	r25, 0x04	; 4
    3b98:	9f 93       	push	r25
    3b9a:	8f 93       	push	r24
    3b9c:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
    3ba0:	8d b7       	in	r24, 0x3d	; 61
    3ba2:	9e b7       	in	r25, 0x3e	; 62
    3ba4:	0a 96       	adiw	r24, 0x0a	; 10
    3ba6:	0f b6       	in	r0, 0x3f	; 63
    3ba8:	f8 94       	cli
    3baa:	9e bf       	out	0x3e, r25	; 62
    3bac:	0f be       	out	0x3f, r0	; 63
    3bae:	8d bf       	out	0x3d, r24	; 61
    3bb0:	ca e0       	ldi	r28, 0x0A	; 10

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3bb2:	80 e0       	ldi	r24, 0x00	; 0
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3bb4:	1d d3       	rcall	.+1594   	; 0x41f0 <lora_driver_join>
    3bb6:	d8 2f       	mov	r29, r24
    3bb8:	31 d5       	rcall	.+2658   	; 0x461c <lora_driver_mapReturnCodeToText>
    3bba:	9f 93       	push	r25
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3bbc:	8f 93       	push	r24
    3bbe:	1f 92       	push	r1
    3bc0:	cf 93       	push	r28
    3bc2:	82 e1       	ldi	r24, 0x12	; 18
    3bc4:	95 e0       	ldi	r25, 0x05	; 5
    3bc6:	9f 93       	push	r25
    3bc8:	8f 93       	push	r24
    3bca:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
    3bce:	0f 90       	pop	r0
    3bd0:	0f 90       	pop	r0
    3bd2:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3bd4:	0f 90       	pop	r0
    3bd6:	0f 90       	pop	r0
    3bd8:	0f 90       	pop	r0
    3bda:	d8 30       	cpi	r29, 0x08	; 8
    3bdc:	59 f0       	breq	.+22     	; 0x3bf4 <_lora_setup+0x14c>
    3bde:	80 e0       	ldi	r24, 0x00	; 0
    3be0:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3be4:	66 e3       	ldi	r22, 0x36	; 54
    3be6:	71 e0       	ldi	r23, 0x01	; 1
    3be8:	80 e0       	ldi	r24, 0x00	; 0
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	0e 94 72 12 	call	0x24e4	; 0x24e4 <vTaskDelay>
    3bf0:	c1 50       	subi	r28, 0x01	; 1
    3bf2:	f9 f6       	brne	.-66     	; 0x3bb2 <_lora_setup+0x10a>
    3bf4:	d8 30       	cpi	r29, 0x08	; 8
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3bf6:	21 f4       	brne	.+8      	; 0x3c00 <_lora_setup+0x158>
    3bf8:	81 e0       	ldi	r24, 0x01	; 1

	if (rc == LORA_ACCEPTED)
    3bfa:	0e 94 db 29 	call	0x53b6	; 0x53b6 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3bfe:	09 c0       	rjmp	.+18     	; 0x3c12 <_lora_setup+0x16a>
    3c00:	81 e0       	ldi	r24, 0x01	; 1
    3c02:	0e 94 ea 29 	call	0x53d4	; 0x53d4 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3c06:	80 e0       	ldi	r24, 0x00	; 0
    3c08:	0e 94 b8 29 	call	0x5370	; 0x5370 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3c0c:	0e 94 87 06 	call	0xd0e	; 0xd0e <vPortYield>
    3c10:	fd cf       	rjmp	.-6      	; 0x3c0c <_lora_setup+0x164>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3c12:	df 91       	pop	r29
    3c14:	cf 91       	pop	r28
    3c16:	08 95       	ret

00003c18 <UpLinkHandler_lora_handler_task>:
		}
	}
}
    3c18:	cf 93       	push	r28
    3c1a:	df 93       	push	r29
    3c1c:	cd b7       	in	r28, 0x3d	; 61

/*-----------------------------------------------------------*/
void UpLinkHandler_lora_handler_task( void *pvParameters )
{
    3c1e:	de b7       	in	r29, 0x3e	; 62
    3c20:	6a 97       	sbiw	r28, 0x1a	; 26
    3c22:	0f b6       	in	r0, 0x3f	; 63
    3c24:	f8 94       	cli
    3c26:	de bf       	out	0x3e, r29	; 62
    3c28:	0f be       	out	0x3f, r0	; 63
    3c2a:	cd bf       	out	0x3d, r28	; 61
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3c2c:	81 e0       	ldi	r24, 0x01	; 1
    3c2e:	6b d2       	rcall	.+1238   	; 0x4106 <lora_driver_resetRn2483>
	vTaskDelay(2);
    3c30:	62 e0       	ldi	r22, 0x02	; 2
    3c32:	70 e0       	ldi	r23, 0x00	; 0
    3c34:	80 e0       	ldi	r24, 0x00	; 0
    3c36:	90 e0       	ldi	r25, 0x00	; 0
    3c38:	0e 94 72 12 	call	0x24e4	; 0x24e4 <vTaskDelay>
	lora_driver_resetRn2483(0);
    3c3c:	80 e0       	ldi	r24, 0x00	; 0
    3c3e:	63 d2       	rcall	.+1222   	; 0x4106 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3c40:	66 e9       	ldi	r22, 0x96	; 150
    3c42:	70 e0       	ldi	r23, 0x00	; 0
    3c44:	80 e0       	ldi	r24, 0x00	; 0
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	0e 94 72 12 	call	0x24e4	; 0x24e4 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3c4c:	15 d2       	rcall	.+1066   	; 0x4078 <lora_driver_flushBuffers>

	_lora_setup();
    3c4e:	2c df       	rcall	.-424    	; 0x3aa8 <_lora_setup>
    3c50:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <xTaskGetTickCount>


	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    3c54:	69 83       	std	Y+1, r22	; 0x01
    3c56:	7a 83       	std	Y+2, r23	; 0x02
    3c58:	8b 83       	std	Y+3, r24	; 0x03
    3c5a:	9c 83       	std	Y+4, r25	; 0x04
    3c5c:	48 ea       	ldi	r20, 0xA8	; 168
	
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3c5e:	58 e4       	ldi	r21, 0x48	; 72
    3c60:	60 e0       	ldi	r22, 0x00	; 0
    3c62:	70 e0       	ldi	r23, 0x00	; 0
    3c64:	ce 01       	movw	r24, r28
    3c66:	01 96       	adiw	r24, 0x01	; 1
    3c68:	0e 94 0d 12 	call	0x241a	; 0x241a <xTaskDelayUntil>
    3c6c:	82 e3       	ldi	r24, 0x32	; 50
		printf("startLoraTask");
    3c6e:	95 e0       	ldi	r25, 0x05	; 5
    3c70:	9f 93       	push	r25
    3c72:	8f 93       	push	r24
    3c74:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
		_uplink_payload = SensorDataPackageHandler_getLoRaPayload();
    3c78:	ce 01       	movw	r24, r28
    3c7a:	05 96       	adiw	r24, 0x05	; 5
    3c7c:	be de       	rcall	.-644    	; 0x39fa <SensorDataPackageHandler_getLoRaPayload>
    3c7e:	86 e1       	ldi	r24, 0x16	; 22
    3c80:	fe 01       	movw	r30, r28
    3c82:	35 96       	adiw	r30, 0x05	; 5
    3c84:	a9 ed       	ldi	r26, 0xD9	; 217
    3c86:	b5 e1       	ldi	r27, 0x15	; 21
    3c88:	01 90       	ld	r0, Z+
    3c8a:	0d 92       	st	X+, r0
    3c8c:	8a 95       	dec	r24
    3c8e:	e1 f7       	brne	.-8      	; 0x3c88 <UpLinkHandler_lora_handler_task+0x70>
    3c90:	83 e0       	ldi	r24, 0x03	; 3
		status_leds_shortPuls(led_ST4);  // OPTIONAL
    3c92:	0e 94 0b 2a 	call	0x5416	; 0x5416 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3c96:	69 ed       	ldi	r22, 0xD9	; 217
    3c98:	75 e1       	ldi	r23, 0x15	; 21
    3c9a:	80 e0       	ldi	r24, 0x00	; 0
    3c9c:	d2 d2       	rcall	.+1444   	; 0x4242 <lora_driver_sendUploadMessage>
    3c9e:	be d4       	rcall	.+2428   	; 0x461c <lora_driver_mapReturnCodeToText>
    3ca0:	9f 93       	push	r25
    3ca2:	8f 93       	push	r24
    3ca4:	80 e4       	ldi	r24, 0x40	; 64
    3ca6:	95 e0       	ldi	r25, 0x05	; 5
    3ca8:	9f 93       	push	r25
    3caa:	8f 93       	push	r24
    3cac:	0e 94 5d 34 	call	0x68ba	; 0x68ba <printf>
    3cb0:	0f 90       	pop	r0
    3cb2:	0f 90       	pop	r0
    3cb4:	0f 90       	pop	r0
    3cb6:	0f 90       	pop	r0
    3cb8:	0f 90       	pop	r0
    3cba:	0f 90       	pop	r0
    3cbc:	cf cf       	rjmp	.-98     	; 0x3c5c <UpLinkHandler_lora_handler_task+0x44>

00003cbe <UpLinkHandler_lora_handler_initialise>:
    3cbe:	ef 92       	push	r14
    3cc0:	ff 92       	push	r15

static lora_driver_payload_t _uplink_payload;


void UpLinkHandler_lora_handler_initialise(UBaseType_t UpLinkHandler_lora_handler_task_priority)
{
    3cc2:	0f 93       	push	r16
	xTaskCreate(
    3cc4:	e1 2c       	mov	r14, r1
    3cc6:	f1 2c       	mov	r15, r1
    3cc8:	08 2f       	mov	r16, r24
    3cca:	20 e0       	ldi	r18, 0x00	; 0
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	48 e8       	ldi	r20, 0x88	; 136
    3cd0:	51 e0       	ldi	r21, 0x01	; 1
    3cd2:	65 e5       	ldi	r22, 0x55	; 85
    3cd4:	75 e0       	ldi	r23, 0x05	; 5
    3cd6:	8c e0       	ldi	r24, 0x0C	; 12
    3cd8:	9e e1       	ldi	r25, 0x1E	; 30
    3cda:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  UpLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3cde:	0f 91       	pop	r16
    3ce0:	ff 90       	pop	r15
    3ce2:	ef 90       	pop	r14
    3ce4:	08 95       	ret

00003ce6 <_hihTwiCallback>:
    3ce6:	65 30       	cpi	r22, 0x05	; 5
    3ce8:	f1 f4       	brne	.+60     	; 0x3d26 <_hihTwiCallback+0x40>
    3cea:	fa 01       	movw	r30, r20
    3cec:	80 81       	ld	r24, Z
    3cee:	8f 73       	andi	r24, 0x3F	; 63
    3cf0:	90 e0       	ldi	r25, 0x00	; 0
    3cf2:	98 2f       	mov	r25, r24
    3cf4:	88 27       	eor	r24, r24
    3cf6:	21 81       	ldd	r18, Z+1	; 0x01
    3cf8:	82 2b       	or	r24, r18
    3cfa:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3cfe:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3d02:	82 81       	ldd	r24, Z+2	; 0x02
    3d04:	f0 e4       	ldi	r31, 0x40	; 64
    3d06:	8f 9f       	mul	r24, r31
    3d08:	c0 01       	movw	r24, r0
    3d0a:	11 24       	eor	r1, r1
    3d0c:	fa 01       	movw	r30, r20
    3d0e:	23 81       	ldd	r18, Z+3	; 0x03
    3d10:	26 95       	lsr	r18
    3d12:	26 95       	lsr	r18
    3d14:	82 2b       	or	r24, r18
    3d16:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3d1a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3d1e:	81 e0       	ldi	r24, 0x01	; 1
    3d20:	80 93 53 16 	sts	0x1653, r24	; 0x801653 <_measuringIsReady>
    3d24:	08 95       	ret
    3d26:	64 30       	cpi	r22, 0x04	; 4
    3d28:	51 f0       	breq	.+20     	; 0x3d3e <_hihTwiCallback+0x58>
    3d2a:	80 e0       	ldi	r24, 0x00	; 0
    3d2c:	90 e4       	ldi	r25, 0x40	; 64
    3d2e:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3d32:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3d36:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3d3a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3d3e:	08 95       	ret

00003d40 <hih8120_initialise>:
    3d40:	0f 93       	push	r16
    3d42:	1f 93       	push	r17
    3d44:	03 e7       	ldi	r16, 0x73	; 115
    3d46:	1e e1       	ldi	r17, 0x1E	; 30
    3d48:	20 e0       	ldi	r18, 0x00	; 0
    3d4a:	34 e2       	ldi	r19, 0x24	; 36
    3d4c:	44 ef       	ldi	r20, 0xF4	; 244
    3d4e:	50 e0       	ldi	r21, 0x00	; 0
    3d50:	60 e0       	ldi	r22, 0x00	; 0
    3d52:	87 e2       	ldi	r24, 0x27	; 39
    3d54:	0e 94 2e 2a 	call	0x545c	; 0x545c <twiCreate>
    3d58:	90 93 55 16 	sts	0x1655, r25	; 0x801655 <_hih8120Handler+0x1>
    3d5c:	80 93 54 16 	sts	0x1654, r24	; 0x801654 <_hih8120Handler>
    3d60:	21 e0       	ldi	r18, 0x01	; 1
    3d62:	89 2b       	or	r24, r25
    3d64:	09 f0       	breq	.+2      	; 0x3d68 <hih8120_initialise+0x28>
    3d66:	20 e0       	ldi	r18, 0x00	; 0
    3d68:	82 2f       	mov	r24, r18
    3d6a:	1f 91       	pop	r17
    3d6c:	0f 91       	pop	r16
    3d6e:	08 95       	ret

00003d70 <hih8120_wakeup>:
    3d70:	80 91 54 16 	lds	r24, 0x1654	; 0x801654 <_hih8120Handler>
    3d74:	90 91 55 16 	lds	r25, 0x1655	; 0x801655 <_hih8120Handler+0x1>
    3d78:	00 97       	sbiw	r24, 0x00	; 0
    3d7a:	59 f0       	breq	.+22     	; 0x3d92 <hih8120_wakeup+0x22>
    3d7c:	40 e0       	ldi	r20, 0x00	; 0
    3d7e:	60 e0       	ldi	r22, 0x00	; 0
    3d80:	70 e0       	ldi	r23, 0x00	; 0
    3d82:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <twiTransmit>
    3d86:	84 30       	cpi	r24, 0x04	; 4
    3d88:	31 f4       	brne	.+12     	; 0x3d96 <hih8120_wakeup+0x26>
    3d8a:	10 92 53 16 	sts	0x1653, r1	; 0x801653 <_measuringIsReady>
    3d8e:	80 e0       	ldi	r24, 0x00	; 0
    3d90:	08 95       	ret
    3d92:	82 e0       	ldi	r24, 0x02	; 2
    3d94:	08 95       	ret
    3d96:	83 e0       	ldi	r24, 0x03	; 3
    3d98:	08 95       	ret

00003d9a <hih8120_measure>:
    3d9a:	80 91 54 16 	lds	r24, 0x1654	; 0x801654 <_hih8120Handler>
    3d9e:	90 91 55 16 	lds	r25, 0x1655	; 0x801655 <_hih8120Handler+0x1>
    3da2:	00 97       	sbiw	r24, 0x00	; 0
    3da4:	39 f0       	breq	.+14     	; 0x3db4 <hih8120_measure+0x1a>
    3da6:	64 e0       	ldi	r22, 0x04	; 4
    3da8:	0e 94 cb 2a 	call	0x5596	; 0x5596 <twiReceive>
    3dac:	85 30       	cpi	r24, 0x05	; 5
    3dae:	21 f0       	breq	.+8      	; 0x3db8 <hih8120_measure+0x1e>
    3db0:	83 e0       	ldi	r24, 0x03	; 3
    3db2:	08 95       	ret
    3db4:	82 e0       	ldi	r24, 0x02	; 2
    3db6:	08 95       	ret
    3db8:	80 e0       	ldi	r24, 0x00	; 0
    3dba:	08 95       	ret

00003dbc <hih8120_getHumidity>:
    3dbc:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3dc0:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3dc4:	80 e0       	ldi	r24, 0x00	; 0
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__floatunsisf>
    3dcc:	20 e0       	ldi	r18, 0x00	; 0
    3dce:	30 e0       	ldi	r19, 0x00	; 0
    3dd0:	48 ec       	ldi	r20, 0xC8	; 200
    3dd2:	52 e4       	ldi	r21, 0x42	; 66
    3dd4:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <__mulsf3>
    3dd8:	20 e0       	ldi	r18, 0x00	; 0
    3dda:	38 ef       	ldi	r19, 0xF8	; 248
    3ddc:	4f e7       	ldi	r20, 0x7F	; 127
    3dde:	56 e4       	ldi	r21, 0x46	; 70
    3de0:	0c 94 3c 2c 	jmp	0x5878	; 0x5878 <__divsf3>
    3de4:	08 95       	ret

00003de6 <hih8120_getHumidityPercent_x10>:
    3de6:	ea df       	rcall	.-44     	; 0x3dbc <hih8120_getHumidity>
    3de8:	20 e0       	ldi	r18, 0x00	; 0
    3dea:	30 e0       	ldi	r19, 0x00	; 0
    3dec:	40 e2       	ldi	r20, 0x20	; 32
    3dee:	51 e4       	ldi	r21, 0x41	; 65
    3df0:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <__mulsf3>
    3df4:	0e 94 a9 2c 	call	0x5952	; 0x5952 <__fixunssfsi>
    3df8:	cb 01       	movw	r24, r22
    3dfa:	08 95       	ret

00003dfc <hih8120_getTemperature>:
    3dfc:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3e00:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3e04:	80 e0       	ldi	r24, 0x00	; 0
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__floatunsisf>
    3e0c:	20 e0       	ldi	r18, 0x00	; 0
    3e0e:	30 e0       	ldi	r19, 0x00	; 0
    3e10:	45 e2       	ldi	r20, 0x25	; 37
    3e12:	53 e4       	ldi	r21, 0x43	; 67
    3e14:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <__mulsf3>
    3e18:	20 e0       	ldi	r18, 0x00	; 0
    3e1a:	38 ef       	ldi	r19, 0xF8	; 248
    3e1c:	4f e7       	ldi	r20, 0x7F	; 127
    3e1e:	56 e4       	ldi	r21, 0x46	; 70
    3e20:	0e 94 3c 2c 	call	0x5878	; 0x5878 <__divsf3>
    3e24:	20 e0       	ldi	r18, 0x00	; 0
    3e26:	30 e0       	ldi	r19, 0x00	; 0
    3e28:	40 e2       	ldi	r20, 0x20	; 32
    3e2a:	52 e4       	ldi	r21, 0x42	; 66
    3e2c:	0c 94 d7 2b 	jmp	0x57ae	; 0x57ae <__subsf3>
    3e30:	08 95       	ret

00003e32 <hih8120_getTemperature_x10>:
    3e32:	e4 df       	rcall	.-56     	; 0x3dfc <hih8120_getTemperature>
    3e34:	20 e0       	ldi	r18, 0x00	; 0
    3e36:	30 e0       	ldi	r19, 0x00	; 0
    3e38:	40 e2       	ldi	r20, 0x20	; 32
    3e3a:	51 e4       	ldi	r21, 0x41	; 65
    3e3c:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <__mulsf3>
    3e40:	0e 94 a4 2c 	call	0x5948	; 0x5948 <__fixsfsi>
    3e44:	cb 01       	movw	r24, r22
    3e46:	08 95       	ret

00003e48 <_serialCallBack>:
    3e48:	0f 93       	push	r16
    3e4a:	1f 93       	push	r17
    3e4c:	cf 93       	push	r28
    3e4e:	df 93       	push	r29
    3e50:	1f 92       	push	r1
    3e52:	1f 92       	push	r1
    3e54:	cd b7       	in	r28, 0x3d	; 61
    3e56:	de b7       	in	r29, 0x3e	; 62
    3e58:	8c 01       	movw	r16, r24
    3e5a:	19 82       	std	Y+1, r1	; 0x01
    3e5c:	2d c0       	rjmp	.+90     	; 0x3eb8 <_serialCallBack+0x70>
    3e5e:	e0 91 8d 16 	lds	r30, 0x168D	; 0x80168d <rec_buf_inp.2878>
    3e62:	ec 32       	cpi	r30, 0x2C	; 44
    3e64:	50 f4       	brcc	.+20     	; 0x3e7a <_serialCallBack+0x32>
    3e66:	81 e0       	ldi	r24, 0x01	; 1
    3e68:	8e 0f       	add	r24, r30
    3e6a:	80 93 8d 16 	sts	0x168D, r24	; 0x80168d <rec_buf_inp.2878>
    3e6e:	f0 e0       	ldi	r31, 0x00	; 0
    3e70:	e1 54       	subi	r30, 0x41	; 65
    3e72:	f9 4e       	sbci	r31, 0xE9	; 233
    3e74:	8a 81       	ldd	r24, Y+2	; 0x02
    3e76:	80 83       	st	Z, r24
    3e78:	02 c0       	rjmp	.+4      	; 0x3e7e <_serialCallBack+0x36>
    3e7a:	10 92 8d 16 	sts	0x168D, r1	; 0x80168d <rec_buf_inp.2878>
    3e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e80:	8a 30       	cpi	r24, 0x0A	; 10
    3e82:	d1 f4       	brne	.+52     	; 0x3eb8 <_serialCallBack+0x70>
    3e84:	40 91 8d 16 	lds	r20, 0x168D	; 0x80168d <rec_buf_inp.2878>
    3e88:	50 e0       	ldi	r21, 0x00	; 0
    3e8a:	fa 01       	movw	r30, r20
    3e8c:	e3 54       	subi	r30, 0x43	; 67
    3e8e:	f9 4e       	sbci	r31, 0xE9	; 233
    3e90:	10 82       	st	Z, r1
    3e92:	41 50       	subi	r20, 0x01	; 1
    3e94:	51 09       	sbc	r21, r1
    3e96:	9e 01       	movw	r18, r28
    3e98:	2f 5f       	subi	r18, 0xFF	; 255
    3e9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e9c:	6f eb       	ldi	r22, 0xBF	; 191
    3e9e:	76 e1       	ldi	r23, 0x16	; 22
    3ea0:	80 91 90 16 	lds	r24, 0x1690	; 0x801690 <_serialReplyBufferHandle>
    3ea4:	90 91 91 16 	lds	r25, 0x1691	; 0x801691 <_serialReplyBufferHandle+0x1>
    3ea8:	0e 94 8f 0c 	call	0x191e	; 0x191e <xStreamBufferSendFromISR>
    3eac:	89 81       	ldd	r24, Y+1	; 0x01
    3eae:	81 11       	cpse	r24, r1
    3eb0:	0e 94 87 06 	call	0xd0e	; 0xd0e <vPortYield>
    3eb4:	10 92 8d 16 	sts	0x168D, r1	; 0x80168d <rec_buf_inp.2878>
    3eb8:	be 01       	movw	r22, r28
    3eba:	6e 5f       	subi	r22, 0xFE	; 254
    3ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    3ebe:	c8 01       	movw	r24, r16
    3ec0:	49 d6       	rcall	.+3218   	; 0x4b54 <serial_getByte>
    3ec2:	88 23       	and	r24, r24
    3ec4:	61 f2       	breq	.-104    	; 0x3e5e <_serialCallBack+0x16>
    3ec6:	0f 90       	pop	r0
    3ec8:	0f 90       	pop	r0
    3eca:	df 91       	pop	r29
    3ecc:	cf 91       	pop	r28
    3ece:	1f 91       	pop	r17
    3ed0:	0f 91       	pop	r16
    3ed2:	08 95       	ret

00003ed4 <_uploadMessage>:
    3ed4:	0f 93       	push	r16
    3ed6:	1f 93       	push	r17
    3ed8:	cf 93       	push	r28
    3eda:	df 93       	push	r29
    3edc:	8c 01       	movw	r16, r24
    3ede:	eb 01       	movw	r28, r22
    3ee0:	80 91 90 16 	lds	r24, 0x1690	; 0x801690 <_serialReplyBufferHandle>
    3ee4:	90 91 91 16 	lds	r25, 0x1691	; 0x801691 <_serialReplyBufferHandle+0x1>
    3ee8:	0e 94 9a 0b 	call	0x1734	; 0x1734 <xStreamBufferReset>
    3eec:	b8 01       	movw	r22, r16
    3eee:	86 e5       	ldi	r24, 0x56	; 86
    3ef0:	96 e1       	ldi	r25, 0x16	; 22
    3ef2:	0e 94 f7 33 	call	0x67ee	; 0x67ee <strcpy>
    3ef6:	20 97       	sbiw	r28, 0x00	; 0
    3ef8:	79 f0       	breq	.+30     	; 0x3f18 <_uploadMessage+0x44>
    3efa:	e6 e5       	ldi	r30, 0x56	; 86
    3efc:	f6 e1       	ldi	r31, 0x16	; 22
    3efe:	01 90       	ld	r0, Z+
    3f00:	00 20       	and	r0, r0
    3f02:	e9 f7       	brne	.-6      	; 0x3efe <_uploadMessage+0x2a>
    3f04:	31 97       	sbiw	r30, 0x01	; 1
    3f06:	80 e2       	ldi	r24, 0x20	; 32
    3f08:	90 e0       	ldi	r25, 0x00	; 0
    3f0a:	91 83       	std	Z+1, r25	; 0x01
    3f0c:	80 83       	st	Z, r24
    3f0e:	be 01       	movw	r22, r28
    3f10:	86 e5       	ldi	r24, 0x56	; 86
    3f12:	96 e1       	ldi	r25, 0x16	; 22
    3f14:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <strcat>
    3f18:	e6 e5       	ldi	r30, 0x56	; 86
    3f1a:	f6 e1       	ldi	r31, 0x16	; 22
    3f1c:	df 01       	movw	r26, r30
    3f1e:	0d 90       	ld	r0, X+
    3f20:	00 20       	and	r0, r0
    3f22:	e9 f7       	brne	.-6      	; 0x3f1e <_uploadMessage+0x4a>
    3f24:	11 97       	sbiw	r26, 0x01	; 1
    3f26:	8d e0       	ldi	r24, 0x0D	; 13
    3f28:	9a e0       	ldi	r25, 0x0A	; 10
    3f2a:	11 96       	adiw	r26, 0x01	; 1
    3f2c:	9c 93       	st	X, r25
    3f2e:	8e 93       	st	-X, r24
    3f30:	12 96       	adiw	r26, 0x02	; 2
    3f32:	1c 92       	st	X, r1
    3f34:	01 90       	ld	r0, Z+
    3f36:	00 20       	and	r0, r0
    3f38:	e9 f7       	brne	.-6      	; 0x3f34 <_uploadMessage+0x60>
    3f3a:	31 97       	sbiw	r30, 0x01	; 1
    3f3c:	e6 55       	subi	r30, 0x56	; 86
    3f3e:	f6 41       	sbci	r31, 0x16	; 22
    3f40:	ae 2f       	mov	r26, r30
    3f42:	86 e5       	ldi	r24, 0x56	; 86
    3f44:	96 e1       	ldi	r25, 0x16	; 22
    3f46:	ac 01       	movw	r20, r24
    3f48:	6a 2f       	mov	r22, r26
    3f4a:	80 91 92 16 	lds	r24, 0x1692	; 0x801692 <_rn2483_serial>
    3f4e:	90 91 93 16 	lds	r25, 0x1693	; 0x801693 <_rn2483_serial+0x1>
    3f52:	ab d5       	rcall	.+2902   	; 0x4aaa <serial_sendBytes>
    3f54:	81 11       	cpse	r24, r1
    3f56:	11 c0       	rjmp	.+34     	; 0x3f7a <_uploadMessage+0xa6>
    3f58:	08 e2       	ldi	r16, 0x28	; 40
    3f5a:	15 e0       	ldi	r17, 0x05	; 5
    3f5c:	20 e0       	ldi	r18, 0x00	; 0
    3f5e:	30 e0       	ldi	r19, 0x00	; 0
    3f60:	4d e2       	ldi	r20, 0x2D	; 45
    3f62:	50 e0       	ldi	r21, 0x00	; 0
    3f64:	69 e1       	ldi	r22, 0x19	; 25
    3f66:	77 e1       	ldi	r23, 0x17	; 23
    3f68:	80 91 90 16 	lds	r24, 0x1690	; 0x801690 <_serialReplyBufferHandle>
    3f6c:	90 91 91 16 	lds	r25, 0x1691	; 0x801691 <_serialReplyBufferHandle+0x1>
    3f70:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <xStreamBufferReceive>
    3f74:	89 e1       	ldi	r24, 0x19	; 25
    3f76:	97 e1       	ldi	r25, 0x17	; 23
    3f78:	02 c0       	rjmp	.+4      	; 0x3f7e <_uploadMessage+0xaa>
    3f7a:	80 e0       	ldi	r24, 0x00	; 0
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	df 91       	pop	r29
    3f80:	cf 91       	pop	r28
    3f82:	1f 91       	pop	r17
    3f84:	0f 91       	pop	r16
    3f86:	08 95       	ret

00003f88 <_reply2ReturnCode>:
    3f88:	2f 92       	push	r2
    3f8a:	3f 92       	push	r3
    3f8c:	4f 92       	push	r4
    3f8e:	5f 92       	push	r5
    3f90:	6f 92       	push	r6
    3f92:	7f 92       	push	r7
    3f94:	8f 92       	push	r8
    3f96:	9f 92       	push	r9
    3f98:	af 92       	push	r10
    3f9a:	bf 92       	push	r11
    3f9c:	cf 92       	push	r12
    3f9e:	df 92       	push	r13
    3fa0:	ef 92       	push	r14
    3fa2:	ff 92       	push	r15
    3fa4:	0f 93       	push	r16
    3fa6:	1f 93       	push	r17
    3fa8:	cf 93       	push	r28
    3faa:	df 93       	push	r29
    3fac:	5c 01       	movw	r10, r24
    3fae:	fc 01       	movw	r30, r24
    3fb0:	01 90       	ld	r0, Z+
    3fb2:	00 20       	and	r0, r0
    3fb4:	e9 f7       	brne	.-6      	; 0x3fb0 <_reply2ReturnCode+0x28>
    3fb6:	31 97       	sbiw	r30, 0x01	; 1
    3fb8:	6f 01       	movw	r12, r30
    3fba:	c8 1a       	sub	r12, r24
    3fbc:	d9 0a       	sbc	r13, r25
    3fbe:	5c 2c       	mov	r5, r12
    3fc0:	0f 2e       	mov	r0, r31
    3fc2:	f5 ef       	ldi	r31, 0xF5	; 245
    3fc4:	8f 2e       	mov	r8, r31
    3fc6:	f7 e0       	ldi	r31, 0x07	; 7
    3fc8:	9f 2e       	mov	r9, r31
    3fca:	f0 2d       	mov	r31, r0
    3fcc:	e1 2c       	mov	r14, r1
    3fce:	f1 2c       	mov	r15, r1
    3fd0:	4c 2c       	mov	r4, r12
    3fd2:	37 01       	movw	r6, r14
    3fd4:	f4 01       	movw	r30, r8
    3fd6:	01 81       	ldd	r16, Z+1	; 0x01
    3fd8:	12 81       	ldd	r17, Z+2	; 0x02
    3fda:	e8 01       	movw	r28, r16
    3fdc:	09 90       	ld	r0, Y+
    3fde:	00 20       	and	r0, r0
    3fe0:	e9 f7       	brne	.-6      	; 0x3fdc <_reply2ReturnCode+0x54>
    3fe2:	21 97       	sbiw	r28, 0x01	; 1
    3fe4:	c0 1b       	sub	r28, r16
    3fe6:	d1 0b       	sbc	r29, r17
    3fe8:	3c 2e       	mov	r3, r28
    3fea:	f9 e0       	ldi	r31, 0x09	; 9
    3fec:	cf 16       	cp	r12, r31
    3fee:	d1 04       	cpc	r13, r1
    3ff0:	58 f0       	brcs	.+22     	; 0x4008 <_reply2ReturnCode+0x80>
    3ff2:	f4 01       	movw	r30, r8
    3ff4:	20 80       	ld	r2, Z
    3ff6:	fe e0       	ldi	r31, 0x0E	; 14
    3ff8:	2f 12       	cpse	r2, r31
    3ffa:	06 c0       	rjmp	.+12     	; 0x4008 <_reply2ReturnCode+0x80>
    3ffc:	b8 01       	movw	r22, r16
    3ffe:	c5 01       	movw	r24, r10
    4000:	0e 94 c7 33 	call	0x678e	; 0x678e <strcasestr>
    4004:	89 2b       	or	r24, r25
    4006:	09 f5       	brne	.+66     	; 0x404a <_reply2ReturnCode+0xc2>
    4008:	44 2d       	mov	r20, r4
    400a:	35 14       	cp	r3, r5
    400c:	08 f4       	brcc	.+2      	; 0x4010 <_reply2ReturnCode+0x88>
    400e:	4c 2f       	mov	r20, r28
    4010:	50 e0       	ldi	r21, 0x00	; 0
    4012:	b8 01       	movw	r22, r16
    4014:	c5 01       	movw	r24, r10
    4016:	0e 94 fe 33 	call	0x67fc	; 0x67fc <strncasecmp>
    401a:	89 2b       	or	r24, r25
    401c:	49 f4       	brne	.+18     	; 0x4030 <_reply2ReturnCode+0xa8>
    401e:	f3 01       	movw	r30, r6
    4020:	ee 0f       	add	r30, r30
    4022:	ff 1f       	adc	r31, r31
    4024:	e6 0d       	add	r30, r6
    4026:	f7 1d       	adc	r31, r7
    4028:	eb 50       	subi	r30, 0x0B	; 11
    402a:	f8 4f       	sbci	r31, 0xF8	; 248
    402c:	20 80       	ld	r2, Z
    402e:	0d c0       	rjmp	.+26     	; 0x404a <_reply2ReturnCode+0xc2>
    4030:	8f ef       	ldi	r24, 0xFF	; 255
    4032:	e8 1a       	sub	r14, r24
    4034:	f8 0a       	sbc	r15, r24
    4036:	e3 e0       	ldi	r30, 0x03	; 3
    4038:	8e 0e       	add	r8, r30
    403a:	91 1c       	adc	r9, r1
    403c:	f1 e1       	ldi	r31, 0x11	; 17
    403e:	ef 16       	cp	r14, r31
    4040:	f1 04       	cpc	r15, r1
    4042:	39 f6       	brne	.-114    	; 0x3fd2 <_reply2ReturnCode+0x4a>
    4044:	68 94       	set
    4046:	22 24       	eor	r2, r2
    4048:	24 f8       	bld	r2, 4
    404a:	82 2d       	mov	r24, r2
    404c:	df 91       	pop	r29
    404e:	cf 91       	pop	r28
    4050:	1f 91       	pop	r17
    4052:	0f 91       	pop	r16
    4054:	ff 90       	pop	r15
    4056:	ef 90       	pop	r14
    4058:	df 90       	pop	r13
    405a:	cf 90       	pop	r12
    405c:	bf 90       	pop	r11
    405e:	af 90       	pop	r10
    4060:	9f 90       	pop	r9
    4062:	8f 90       	pop	r8
    4064:	7f 90       	pop	r7
    4066:	6f 90       	pop	r6
    4068:	5f 90       	pop	r5
    406a:	4f 90       	pop	r4
    406c:	3f 90       	pop	r3
    406e:	2f 90       	pop	r2
    4070:	08 95       	ret

00004072 <_uploadMessageRc>:
    4072:	30 df       	rcall	.-416    	; 0x3ed4 <_uploadMessage>
    4074:	89 cf       	rjmp	.-238    	; 0x3f88 <_reply2ReturnCode>
    4076:	08 95       	ret

00004078 <lora_driver_flushBuffers>:
    4078:	80 91 90 16 	lds	r24, 0x1690	; 0x801690 <_serialReplyBufferHandle>
    407c:	90 91 91 16 	lds	r25, 0x1691	; 0x801691 <_serialReplyBufferHandle+0x1>
    4080:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <xStreamBufferReset>
    4084:	08 95       	ret

00004086 <lora_driver_initialise>:
    4086:	8f 92       	push	r8
    4088:	9f 92       	push	r9
    408a:	af 92       	push	r10
    408c:	cf 92       	push	r12
    408e:	ef 92       	push	r14
    4090:	0f 93       	push	r16
    4092:	1f 93       	push	r17
    4094:	cf 93       	push	r28
    4096:	c8 2f       	mov	r28, r24
    4098:	8b 01       	movw	r16, r22
    409a:	41 e0       	ldi	r20, 0x01	; 1
    409c:	60 e0       	ldi	r22, 0x00	; 0
    409e:	70 e0       	ldi	r23, 0x00	; 0
    40a0:	88 ec       	ldi	r24, 0xC8	; 200
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <xStreamBufferGenericCreate>
    40a8:	90 93 91 16 	sts	0x1691, r25	; 0x801691 <_serialReplyBufferHandle+0x1>
    40ac:	80 93 90 16 	sts	0x1690, r24	; 0x801690 <_serialReplyBufferHandle>
    40b0:	10 93 8f 16 	sts	0x168F, r17	; 0x80168f <_downlinkMessageBuffer+0x1>
    40b4:	00 93 8e 16 	sts	0x168E, r16	; 0x80168e <_downlinkMessageBuffer>
    40b8:	0f 2e       	mov	r0, r31
    40ba:	f4 e2       	ldi	r31, 0x24	; 36
    40bc:	8f 2e       	mov	r8, r31
    40be:	ff e1       	ldi	r31, 0x1F	; 31
    40c0:	9f 2e       	mov	r9, r31
    40c2:	f0 2d       	mov	r31, r0
    40c4:	68 94       	set
    40c6:	aa 24       	eor	r10, r10
    40c8:	a6 f8       	bld	r10, 6
    40ca:	68 94       	set
    40cc:	cc 24       	eor	r12, r12
    40ce:	c6 f8       	bld	r12, 6
    40d0:	e1 2c       	mov	r14, r1
    40d2:	00 e0       	ldi	r16, 0x00	; 0
    40d4:	23 e0       	ldi	r18, 0x03	; 3
    40d6:	40 e0       	ldi	r20, 0x00	; 0
    40d8:	51 ee       	ldi	r21, 0xE1	; 225
    40da:	60 e0       	ldi	r22, 0x00	; 0
    40dc:	70 e0       	ldi	r23, 0x00	; 0
    40de:	8c 2f       	mov	r24, r28
    40e0:	17 d4       	rcall	.+2094   	; 0x4910 <serial_create>
    40e2:	90 93 93 16 	sts	0x1693, r25	; 0x801693 <_rn2483_serial+0x1>
    40e6:	80 93 92 16 	sts	0x1692, r24	; 0x801692 <_rn2483_serial>
    40ea:	e7 e0       	ldi	r30, 0x07	; 7
    40ec:	f1 e0       	ldi	r31, 0x01	; 1
    40ee:	80 81       	ld	r24, Z
    40f0:	80 61       	ori	r24, 0x10	; 16
    40f2:	80 83       	st	Z, r24
    40f4:	cf 91       	pop	r28
    40f6:	1f 91       	pop	r17
    40f8:	0f 91       	pop	r16
    40fa:	ef 90       	pop	r14
    40fc:	cf 90       	pop	r12
    40fe:	af 90       	pop	r10
    4100:	9f 90       	pop	r9
    4102:	8f 90       	pop	r8
    4104:	08 95       	ret

00004106 <lora_driver_resetRn2483>:
    4106:	88 23       	and	r24, r24
    4108:	31 f0       	breq	.+12     	; 0x4116 <lora_driver_resetRn2483+0x10>
    410a:	e8 e0       	ldi	r30, 0x08	; 8
    410c:	f1 e0       	ldi	r31, 0x01	; 1
    410e:	80 81       	ld	r24, Z
    4110:	8f 7e       	andi	r24, 0xEF	; 239
    4112:	80 83       	st	Z, r24
    4114:	08 95       	ret
    4116:	e8 e0       	ldi	r30, 0x08	; 8
    4118:	f1 e0       	ldi	r31, 0x01	; 1
    411a:	80 81       	ld	r24, Z
    411c:	80 61       	ori	r24, 0x10	; 16
    411e:	80 83       	st	Z, r24
    4120:	08 95       	ret

00004122 <lora_driver_rn2483FactoryReset>:
    4122:	60 e0       	ldi	r22, 0x00	; 0
    4124:	70 e0       	ldi	r23, 0x00	; 0
    4126:	8b e7       	ldi	r24, 0x7B	; 123
    4128:	95 e0       	ldi	r25, 0x05	; 5
    412a:	d4 de       	rcall	.-600    	; 0x3ed4 <_uploadMessage>
    412c:	e9 e1       	ldi	r30, 0x19	; 25
    412e:	f7 e1       	ldi	r31, 0x17	; 23
    4130:	01 90       	ld	r0, Z+
    4132:	00 20       	and	r0, r0
    4134:	e9 f7       	brne	.-6      	; 0x4130 <lora_driver_rn2483FactoryReset+0xe>
    4136:	31 97       	sbiw	r30, 0x01	; 1
    4138:	e9 51       	subi	r30, 0x19	; 25
    413a:	f7 41       	sbci	r31, 0x17	; 23
    413c:	81 e0       	ldi	r24, 0x01	; 1
    413e:	75 97       	sbiw	r30, 0x15	; 21
    4140:	08 f0       	brcs	.+2      	; 0x4144 <lora_driver_rn2483FactoryReset+0x22>
    4142:	80 e0       	ldi	r24, 0x00	; 0
    4144:	08 95       	ret

00004146 <lora_driver_getRn2483Hweui>:
    4146:	cf 93       	push	r28
    4148:	df 93       	push	r29
    414a:	ec 01       	movw	r28, r24
    414c:	60 e0       	ldi	r22, 0x00	; 0
    414e:	70 e0       	ldi	r23, 0x00	; 0
    4150:	8c e8       	ldi	r24, 0x8C	; 140
    4152:	95 e0       	ldi	r25, 0x05	; 5
    4154:	bf de       	rcall	.-642    	; 0x3ed4 <_uploadMessage>
    4156:	e9 e1       	ldi	r30, 0x19	; 25
    4158:	f7 e1       	ldi	r31, 0x17	; 23
    415a:	01 90       	ld	r0, Z+
    415c:	00 20       	and	r0, r0
    415e:	e9 f7       	brne	.-6      	; 0x415a <lora_driver_getRn2483Hweui+0x14>
    4160:	ea 52       	subi	r30, 0x2A	; 42
    4162:	f7 41       	sbci	r31, 0x17	; 23
    4164:	39 f4       	brne	.+14     	; 0x4174 <lora_driver_getRn2483Hweui+0x2e>
    4166:	69 e1       	ldi	r22, 0x19	; 25
    4168:	77 e1       	ldi	r23, 0x17	; 23
    416a:	ce 01       	movw	r24, r28
    416c:	0e 94 f7 33 	call	0x67ee	; 0x67ee <strcpy>
    4170:	80 e0       	ldi	r24, 0x00	; 0
    4172:	02 c0       	rjmp	.+4      	; 0x4178 <lora_driver_getRn2483Hweui+0x32>
    4174:	18 82       	st	Y, r1
    4176:	81 e0       	ldi	r24, 0x01	; 1
    4178:	df 91       	pop	r29
    417a:	cf 91       	pop	r28
    417c:	08 95       	ret

0000417e <lora_driver_setDeviceIdentifier>:
    417e:	fc 01       	movw	r30, r24
    4180:	01 90       	ld	r0, Z+
    4182:	00 20       	and	r0, r0
    4184:	e9 f7       	brne	.-6      	; 0x4180 <lora_driver_setDeviceIdentifier+0x2>
    4186:	9f 01       	movw	r18, r30
    4188:	21 51       	subi	r18, 0x11	; 17
    418a:	31 09       	sbc	r19, r1
    418c:	28 17       	cp	r18, r24
    418e:	39 07       	cpc	r19, r25
    4190:	29 f4       	brne	.+10     	; 0x419c <lora_driver_setDeviceIdentifier+0x1e>
    4192:	bc 01       	movw	r22, r24
    4194:	8a eb       	ldi	r24, 0xBA	; 186
    4196:	95 e0       	ldi	r25, 0x05	; 5
    4198:	6c cf       	rjmp	.-296    	; 0x4072 <_uploadMessageRc>
    419a:	08 95       	ret
    419c:	89 e0       	ldi	r24, 0x09	; 9
    419e:	08 95       	ret

000041a0 <lora_driver_setApplicationIdentifier>:
    41a0:	fc 01       	movw	r30, r24
    41a2:	01 90       	ld	r0, Z+
    41a4:	00 20       	and	r0, r0
    41a6:	e9 f7       	brne	.-6      	; 0x41a2 <lora_driver_setApplicationIdentifier+0x2>
    41a8:	9f 01       	movw	r18, r30
    41aa:	21 51       	subi	r18, 0x11	; 17
    41ac:	31 09       	sbc	r19, r1
    41ae:	28 17       	cp	r18, r24
    41b0:	39 07       	cpc	r19, r25
    41b2:	29 f4       	brne	.+10     	; 0x41be <lora_driver_setApplicationIdentifier+0x1e>
    41b4:	bc 01       	movw	r22, r24
    41b6:	89 ec       	ldi	r24, 0xC9	; 201
    41b8:	95 e0       	ldi	r25, 0x05	; 5
    41ba:	5b cf       	rjmp	.-330    	; 0x4072 <_uploadMessageRc>
    41bc:	08 95       	ret
    41be:	89 e0       	ldi	r24, 0x09	; 9
    41c0:	08 95       	ret

000041c2 <lora_driver_setApplicationKey>:
    41c2:	fc 01       	movw	r30, r24
    41c4:	01 90       	ld	r0, Z+
    41c6:	00 20       	and	r0, r0
    41c8:	e9 f7       	brne	.-6      	; 0x41c4 <lora_driver_setApplicationKey+0x2>
    41ca:	9f 01       	movw	r18, r30
    41cc:	21 52       	subi	r18, 0x21	; 33
    41ce:	31 09       	sbc	r19, r1
    41d0:	28 17       	cp	r18, r24
    41d2:	39 07       	cpc	r19, r25
    41d4:	29 f4       	brne	.+10     	; 0x41e0 <lora_driver_setApplicationKey+0x1e>
    41d6:	bc 01       	movw	r22, r24
    41d8:	88 ed       	ldi	r24, 0xD8	; 216
    41da:	95 e0       	ldi	r25, 0x05	; 5
    41dc:	4a cf       	rjmp	.-364    	; 0x4072 <_uploadMessageRc>
    41de:	08 95       	ret
    41e0:	89 e0       	ldi	r24, 0x09	; 9
    41e2:	08 95       	ret

000041e4 <lora_driver_saveMac>:
    41e4:	60 e0       	ldi	r22, 0x00	; 0
    41e6:	70 e0       	ldi	r23, 0x00	; 0
    41e8:	87 e1       	ldi	r24, 0x17	; 23
    41ea:	96 e0       	ldi	r25, 0x06	; 6
    41ec:	42 cf       	rjmp	.-380    	; 0x4072 <_uploadMessageRc>
    41ee:	08 95       	ret

000041f0 <lora_driver_join>:
    41f0:	0f 93       	push	r16
    41f2:	1f 93       	push	r17
    41f4:	e8 2f       	mov	r30, r24
    41f6:	f0 e0       	ldi	r31, 0x00	; 0
    41f8:	ee 0f       	add	r30, r30
    41fa:	ff 1f       	adc	r31, r31
    41fc:	ef 50       	subi	r30, 0x0F	; 15
    41fe:	f8 4f       	sbci	r31, 0xF8	; 248
    4200:	60 81       	ld	r22, Z
    4202:	71 81       	ldd	r23, Z+1	; 0x01
    4204:	80 e2       	ldi	r24, 0x20	; 32
    4206:	96 e0       	ldi	r25, 0x06	; 6
    4208:	34 df       	rcall	.-408    	; 0x4072 <_uploadMessageRc>
    420a:	81 11       	cpse	r24, r1
    420c:	14 c0       	rjmp	.+40     	; 0x4236 <lora_driver_join+0x46>
    420e:	08 e2       	ldi	r16, 0x28	; 40
    4210:	15 e0       	ldi	r17, 0x05	; 5
    4212:	20 e0       	ldi	r18, 0x00	; 0
    4214:	30 e0       	ldi	r19, 0x00	; 0
    4216:	4d e2       	ldi	r20, 0x2D	; 45
    4218:	50 e0       	ldi	r21, 0x00	; 0
    421a:	69 e1       	ldi	r22, 0x19	; 25
    421c:	77 e1       	ldi	r23, 0x17	; 23
    421e:	80 91 90 16 	lds	r24, 0x1690	; 0x801690 <_serialReplyBufferHandle>
    4222:	90 91 91 16 	lds	r25, 0x1691	; 0x801691 <_serialReplyBufferHandle+0x1>
    4226:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <xStreamBufferReceive>
    422a:	88 23       	and	r24, r24
    422c:	21 f0       	breq	.+8      	; 0x4236 <lora_driver_join+0x46>
    422e:	89 e1       	ldi	r24, 0x19	; 25
    4230:	97 e1       	ldi	r25, 0x17	; 23
    4232:	aa de       	rcall	.-684    	; 0x3f88 <_reply2ReturnCode>
    4234:	03 c0       	rjmp	.+6      	; 0x423c <lora_driver_join+0x4c>
    4236:	89 e1       	ldi	r24, 0x19	; 25
    4238:	97 e1       	ldi	r25, 0x17	; 23
    423a:	a6 de       	rcall	.-692    	; 0x3f88 <_reply2ReturnCode>
    423c:	1f 91       	pop	r17
    423e:	0f 91       	pop	r16
    4240:	08 95       	ret

00004242 <lora_driver_sendUploadMessage>:
    4242:	0f 93       	push	r16
    4244:	1f 93       	push	r17
    4246:	cf 93       	push	r28
    4248:	df 93       	push	r29
    424a:	1f 92       	push	r1
    424c:	cd b7       	in	r28, 0x3d	; 61
    424e:	de b7       	in	r29, 0x3e	; 62
    4250:	db 01       	movw	r26, r22
    4252:	11 96       	adiw	r26, 0x01	; 1
    4254:	9c 91       	ld	r25, X
    4256:	11 97       	sbiw	r26, 0x01	; 1
    4258:	95 31       	cpi	r25, 0x15	; 21
    425a:	08 f0       	brcs	.+2      	; 0x425e <lora_driver_sendUploadMessage+0x1c>
    425c:	b4 c0       	rjmp	.+360    	; 0x43c6 <lora_driver_sendUploadMessage+0x184>
    425e:	99 23       	and	r25, r25
    4260:	81 f1       	breq	.+96     	; 0x42c2 <lora_driver_sendUploadMessage+0x80>
    4262:	60 e0       	ldi	r22, 0x00	; 0
    4264:	70 e0       	ldi	r23, 0x00	; 0
    4266:	27 2f       	mov	r18, r23
    4268:	30 e0       	ldi	r19, 0x00	; 0
    426a:	46 2f       	mov	r20, r22
    426c:	50 e0       	ldi	r21, 0x00	; 0
    426e:	fd 01       	movw	r30, r26
    4270:	e4 0f       	add	r30, r20
    4272:	f5 1f       	adc	r31, r21
    4274:	92 81       	ldd	r25, Z+2	; 0x02
    4276:	92 95       	swap	r25
    4278:	9f 70       	andi	r25, 0x0F	; 15
    427a:	9a 30       	cpi	r25, 0x0A	; 10
    427c:	10 f0       	brcs	.+4      	; 0x4282 <lora_driver_sendUploadMessage+0x40>
    427e:	99 5c       	subi	r25, 0xC9	; 201
    4280:	01 c0       	rjmp	.+2      	; 0x4284 <lora_driver_sendUploadMessage+0x42>
    4282:	90 5d       	subi	r25, 0xD0	; 208
    4284:	f9 01       	movw	r30, r18
    4286:	e6 55       	subi	r30, 0x56	; 86
    4288:	f9 4e       	sbci	r31, 0xE9	; 233
    428a:	90 83       	st	Z, r25
    428c:	2f 5f       	subi	r18, 0xFF	; 255
    428e:	3f 4f       	sbci	r19, 0xFF	; 255
    4290:	fd 01       	movw	r30, r26
    4292:	e4 0f       	add	r30, r20
    4294:	f5 1f       	adc	r31, r21
    4296:	92 81       	ldd	r25, Z+2	; 0x02
    4298:	9f 70       	andi	r25, 0x0F	; 15
    429a:	49 2f       	mov	r20, r25
    429c:	50 e0       	ldi	r21, 0x00	; 0
    429e:	4a 30       	cpi	r20, 0x0A	; 10
    42a0:	51 05       	cpc	r21, r1
    42a2:	14 f0       	brlt	.+4      	; 0x42a8 <lora_driver_sendUploadMessage+0x66>
    42a4:	99 5c       	subi	r25, 0xC9	; 201
    42a6:	01 c0       	rjmp	.+2      	; 0x42aa <lora_driver_sendUploadMessage+0x68>
    42a8:	90 5d       	subi	r25, 0xD0	; 208
    42aa:	f9 01       	movw	r30, r18
    42ac:	e6 55       	subi	r30, 0x56	; 86
    42ae:	f9 4e       	sbci	r31, 0xE9	; 233
    42b0:	90 83       	st	Z, r25
    42b2:	7e 5f       	subi	r23, 0xFE	; 254
    42b4:	6f 5f       	subi	r22, 0xFF	; 255
    42b6:	11 96       	adiw	r26, 0x01	; 1
    42b8:	9c 91       	ld	r25, X
    42ba:	11 97       	sbiw	r26, 0x01	; 1
    42bc:	69 17       	cp	r22, r25
    42be:	98 f2       	brcs	.-90     	; 0x4266 <lora_driver_sendUploadMessage+0x24>
    42c0:	01 c0       	rjmp	.+2      	; 0x42c4 <lora_driver_sendUploadMessage+0x82>
    42c2:	70 e0       	ldi	r23, 0x00	; 0
    42c4:	e7 2f       	mov	r30, r23
    42c6:	f0 e0       	ldi	r31, 0x00	; 0
    42c8:	e6 55       	subi	r30, 0x56	; 86
    42ca:	f9 4e       	sbci	r31, 0xE9	; 233
    42cc:	10 82       	st	Z, r1
    42ce:	4c 91       	ld	r20, X
    42d0:	81 11       	cpse	r24, r1
    42d2:	03 c0       	rjmp	.+6      	; 0x42da <lora_driver_sendUploadMessage+0x98>
    42d4:	89 e2       	ldi	r24, 0x29	; 41
    42d6:	96 e0       	ldi	r25, 0x06	; 6
    42d8:	02 c0       	rjmp	.+4      	; 0x42de <lora_driver_sendUploadMessage+0x9c>
    42da:	8b e2       	ldi	r24, 0x2B	; 43
    42dc:	96 e0       	ldi	r25, 0x06	; 6
    42de:	2a ea       	ldi	r18, 0xAA	; 170
    42e0:	36 e1       	ldi	r19, 0x16	; 22
    42e2:	3f 93       	push	r19
    42e4:	2f 93       	push	r18
    42e6:	1f 92       	push	r1
    42e8:	4f 93       	push	r20
    42ea:	9f 93       	push	r25
    42ec:	8f 93       	push	r24
    42ee:	8f e2       	ldi	r24, 0x2F	; 47
    42f0:	96 e0       	ldi	r25, 0x06	; 6
    42f2:	9f 93       	push	r25
    42f4:	8f 93       	push	r24
    42f6:	8c ee       	ldi	r24, 0xEC	; 236
    42f8:	96 e1       	ldi	r25, 0x16	; 22
    42fa:	9f 93       	push	r25
    42fc:	8f 93       	push	r24
    42fe:	0e 94 a0 34 	call	0x6940	; 0x6940 <sprintf>
    4302:	60 e0       	ldi	r22, 0x00	; 0
    4304:	70 e0       	ldi	r23, 0x00	; 0
    4306:	8c ee       	ldi	r24, 0xEC	; 236
    4308:	96 e1       	ldi	r25, 0x16	; 22
    430a:	b3 de       	rcall	.-666    	; 0x4072 <_uploadMessageRc>
    430c:	0f b6       	in	r0, 0x3f	; 63
    430e:	f8 94       	cli
    4310:	de bf       	out	0x3e, r29	; 62
    4312:	0f be       	out	0x3f, r0	; 63
    4314:	cd bf       	out	0x3d, r28	; 61
    4316:	81 11       	cpse	r24, r1
    4318:	59 c0       	rjmp	.+178    	; 0x43cc <lora_driver_sendUploadMessage+0x18a>
    431a:	08 e2       	ldi	r16, 0x28	; 40
    431c:	15 e0       	ldi	r17, 0x05	; 5
    431e:	20 e0       	ldi	r18, 0x00	; 0
    4320:	30 e0       	ldi	r19, 0x00	; 0
    4322:	4d e2       	ldi	r20, 0x2D	; 45
    4324:	50 e0       	ldi	r21, 0x00	; 0
    4326:	69 e1       	ldi	r22, 0x19	; 25
    4328:	77 e1       	ldi	r23, 0x17	; 23
    432a:	80 91 90 16 	lds	r24, 0x1690	; 0x801690 <_serialReplyBufferHandle>
    432e:	90 91 91 16 	lds	r25, 0x1691	; 0x801691 <_serialReplyBufferHandle+0x1>
    4332:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <xStreamBufferReceive>
    4336:	88 23       	and	r24, r24
    4338:	09 f4       	brne	.+2      	; 0x433c <lora_driver_sendUploadMessage+0xfa>
    433a:	47 c0       	rjmp	.+142    	; 0x43ca <lora_driver_sendUploadMessage+0x188>
    433c:	89 e1       	ldi	r24, 0x19	; 25
    433e:	97 e1       	ldi	r25, 0x17	; 23
    4340:	23 de       	rcall	.-954    	; 0x3f88 <_reply2ReturnCode>
    4342:	8e 30       	cpi	r24, 0x0E	; 14
    4344:	09 f0       	breq	.+2      	; 0x4348 <lora_driver_sendUploadMessage+0x106>
    4346:	42 c0       	rjmp	.+132    	; 0x43cc <lora_driver_sendUploadMessage+0x18a>
    4348:	87 e0       	ldi	r24, 0x07	; 7
    434a:	89 83       	std	Y+1, r24	; 0x01
    434c:	80 91 8e 16 	lds	r24, 0x168E	; 0x80168e <_downlinkMessageBuffer>
    4350:	90 91 8f 16 	lds	r25, 0x168F	; 0x80168f <_downlinkMessageBuffer+0x1>
    4354:	89 2b       	or	r24, r25
    4356:	a9 f1       	breq	.+106    	; 0x43c2 <lora_driver_sendUploadMessage+0x180>
    4358:	be 01       	movw	r22, r28
    435a:	6f 5f       	subi	r22, 0xFF	; 255
    435c:	7f 4f       	sbci	r23, 0xFF	; 255
    435e:	89 e1       	ldi	r24, 0x19	; 25
    4360:	97 e1       	ldi	r25, 0x17	; 23
    4362:	68 d1       	rcall	.+720    	; 0x4634 <decode_port_no>
    4364:	80 93 94 16 	sts	0x1694, r24	; 0x801694 <_downlinkPayload>
    4368:	e9 81       	ldd	r30, Y+1	; 0x01
    436a:	f0 e0       	ldi	r31, 0x00	; 0
    436c:	e7 5e       	subi	r30, 0xE7	; 231
    436e:	f8 4e       	sbci	r31, 0xE8	; 232
    4370:	df 01       	movw	r26, r30
    4372:	0d 90       	ld	r0, X+
    4374:	00 20       	and	r0, r0
    4376:	e9 f7       	brne	.-6      	; 0x4372 <lora_driver_sendUploadMessage+0x130>
    4378:	11 97       	sbiw	r26, 0x01	; 1
    437a:	ae 1b       	sub	r26, r30
    437c:	bf 0b       	sbc	r27, r31
    437e:	aa 23       	and	r26, r26
    4380:	91 f0       	breq	.+36     	; 0x43a6 <lora_driver_sendUploadMessage+0x164>
    4382:	bb 27       	eor	r27, r27
    4384:	cd 01       	movw	r24, r26
    4386:	01 97       	sbiw	r24, 0x01	; 1
    4388:	9c 01       	movw	r18, r24
    438a:	12 f4       	brpl	.+4      	; 0x4390 <lora_driver_sendUploadMessage+0x14e>
    438c:	2f 5f       	subi	r18, 0xFF	; 255
    438e:	3f 4f       	sbci	r19, 0xFF	; 255
    4390:	35 95       	asr	r19
    4392:	27 95       	ror	r18
    4394:	20 93 95 16 	sts	0x1695, r18	; 0x801695 <_downlinkPayload+0x1>
    4398:	af 01       	movw	r20, r30
    439a:	4f 5f       	subi	r20, 0xFF	; 255
    439c:	5f 4f       	sbci	r21, 0xFF	; 255
    439e:	64 e1       	ldi	r22, 0x14	; 20
    43a0:	86 e9       	ldi	r24, 0x96	; 150
    43a2:	96 e1       	ldi	r25, 0x16	; 22
    43a4:	73 d1       	rcall	.+742    	; 0x468c <decode_hexadecimal_string_bytes>
    43a6:	01 e0       	ldi	r16, 0x01	; 1
    43a8:	10 e0       	ldi	r17, 0x00	; 0
    43aa:	20 e0       	ldi	r18, 0x00	; 0
    43ac:	30 e0       	ldi	r19, 0x00	; 0
    43ae:	46 e1       	ldi	r20, 0x16	; 22
    43b0:	50 e0       	ldi	r21, 0x00	; 0
    43b2:	64 e9       	ldi	r22, 0x94	; 148
    43b4:	76 e1       	ldi	r23, 0x16	; 22
    43b6:	80 91 8e 16 	lds	r24, 0x168E	; 0x80168e <_downlinkMessageBuffer>
    43ba:	90 91 8f 16 	lds	r25, 0x168F	; 0x80168f <_downlinkMessageBuffer+0x1>
    43be:	0e 94 ca 0b 	call	0x1794	; 0x1794 <xStreamBufferSend>
    43c2:	8e e0       	ldi	r24, 0x0E	; 14
    43c4:	03 c0       	rjmp	.+6      	; 0x43cc <lora_driver_sendUploadMessage+0x18a>
    43c6:	84 e1       	ldi	r24, 0x14	; 20
    43c8:	01 c0       	rjmp	.+2      	; 0x43cc <lora_driver_sendUploadMessage+0x18a>
    43ca:	80 e0       	ldi	r24, 0x00	; 0
    43cc:	0f 90       	pop	r0
    43ce:	df 91       	pop	r29
    43d0:	cf 91       	pop	r28
    43d2:	1f 91       	pop	r17
    43d4:	0f 91       	pop	r16
    43d6:	08 95       	ret

000043d8 <lora_driver_setAdaptiveDataRate>:
    43d8:	81 30       	cpi	r24, 0x01	; 1
    43da:	19 f0       	breq	.+6      	; 0x43e2 <lora_driver_setAdaptiveDataRate+0xa>
    43dc:	6f e3       	ldi	r22, 0x3F	; 63
    43de:	76 e0       	ldi	r23, 0x06	; 6
    43e0:	02 c0       	rjmp	.+4      	; 0x43e6 <lora_driver_setAdaptiveDataRate+0xe>
    43e2:	68 e1       	ldi	r22, 0x18	; 24
    43e4:	77 e0       	ldi	r23, 0x07	; 7
    43e6:	83 e4       	ldi	r24, 0x43	; 67
    43e8:	96 e0       	ldi	r25, 0x06	; 6
    43ea:	43 ce       	rjmp	.-890    	; 0x4072 <_uploadMessageRc>
    43ec:	08 95       	ret

000043ee <lora_driver_setReceiveDelay>:
    43ee:	9f 93       	push	r25
    43f0:	8f 93       	push	r24
    43f2:	84 e7       	ldi	r24, 0x74	; 116
    43f4:	96 e0       	ldi	r25, 0x06	; 6
    43f6:	9f 93       	push	r25
    43f8:	8f 93       	push	r24
    43fa:	8c ee       	ldi	r24, 0xEC	; 236
    43fc:	96 e1       	ldi	r25, 0x16	; 22
    43fe:	9f 93       	push	r25
    4400:	8f 93       	push	r24
    4402:	0e 94 a0 34 	call	0x6940	; 0x6940 <sprintf>
    4406:	60 e0       	ldi	r22, 0x00	; 0
    4408:	70 e0       	ldi	r23, 0x00	; 0
    440a:	8c ee       	ldi	r24, 0xEC	; 236
    440c:	96 e1       	ldi	r25, 0x16	; 22
    440e:	31 de       	rcall	.-926    	; 0x4072 <_uploadMessageRc>
    4410:	0f 90       	pop	r0
    4412:	0f 90       	pop	r0
    4414:	0f 90       	pop	r0
    4416:	0f 90       	pop	r0
    4418:	0f 90       	pop	r0
    441a:	0f 90       	pop	r0
    441c:	08 95       	ret

0000441e <lora_driver_configureToEu868>:
    441e:	2f 92       	push	r2
    4420:	3f 92       	push	r3
    4422:	4f 92       	push	r4
    4424:	5f 92       	push	r5
    4426:	6f 92       	push	r6
    4428:	7f 92       	push	r7
    442a:	8f 92       	push	r8
    442c:	9f 92       	push	r9
    442e:	af 92       	push	r10
    4430:	bf 92       	push	r11
    4432:	cf 92       	push	r12
    4434:	df 92       	push	r13
    4436:	ef 92       	push	r14
    4438:	ff 92       	push	r15
    443a:	0f 93       	push	r16
    443c:	1f 93       	push	r17
    443e:	cf 93       	push	r28
    4440:	df 93       	push	r29
    4442:	cd b7       	in	r28, 0x3d	; 61
    4444:	de b7       	in	r29, 0x3e	; 62
    4446:	a0 97       	sbiw	r28, 0x20	; 32
    4448:	0f b6       	in	r0, 0x3f	; 63
    444a:	f8 94       	cli
    444c:	de bf       	out	0x3e, r29	; 62
    444e:	0f be       	out	0x3f, r0	; 63
    4450:	cd bf       	out	0x3d, r28	; 61
    4452:	61 ea       	ldi	r22, 0xA1	; 161
    4454:	76 e0       	ldi	r23, 0x06	; 6
    4456:	8d ea       	ldi	r24, 0xAD	; 173
    4458:	96 e0       	ldi	r25, 0x06	; 6
    445a:	3c dd       	rcall	.-1416   	; 0x3ed4 <_uploadMessage>
    445c:	95 dd       	rcall	.-1238   	; 0x3f88 <_reply2ReturnCode>
    445e:	81 11       	cpse	r24, r1
    4460:	a3 c0       	rjmp	.+326    	; 0x45a8 <lora_driver_configureToEu868+0x18a>
    4462:	80 e2       	ldi	r24, 0x20	; 32
    4464:	e2 e2       	ldi	r30, 0x22	; 34
    4466:	f2 e0       	ldi	r31, 0x02	; 2
    4468:	de 01       	movw	r26, r28
    446a:	11 96       	adiw	r26, 0x01	; 1
    446c:	01 90       	ld	r0, Z+
    446e:	0d 92       	st	X+, r0
    4470:	8a 95       	dec	r24
    4472:	e1 f7       	brne	.-8      	; 0x446c <lora_driver_configureToEu868+0x4e>
    4474:	9e 01       	movw	r18, r28
    4476:	2f 5f       	subi	r18, 0xFF	; 255
    4478:	3f 4f       	sbci	r19, 0xFF	; 255
    447a:	69 01       	movw	r12, r18
    447c:	e1 2c       	mov	r14, r1
    447e:	f1 2c       	mov	r15, r1
    4480:	0f 2e       	mov	r0, r31
    4482:	f9 eb       	ldi	r31, 0xB9	; 185
    4484:	af 2e       	mov	r10, r31
    4486:	f6 e0       	ldi	r31, 0x06	; 6
    4488:	bf 2e       	mov	r11, r31
    448a:	f0 2d       	mov	r31, r0
    448c:	0c ee       	ldi	r16, 0xEC	; 236
    448e:	16 e1       	ldi	r17, 0x16	; 22
    4490:	0f 2e       	mov	r0, r31
    4492:	f2 ed       	ldi	r31, 0xD2	; 210
    4494:	4f 2e       	mov	r4, r31
    4496:	f6 e0       	ldi	r31, 0x06	; 6
    4498:	5f 2e       	mov	r5, r31
    449a:	f0 2d       	mov	r31, r0
    449c:	0f 2e       	mov	r0, r31
    449e:	f9 ee       	ldi	r31, 0xE9	; 233
    44a0:	8f 2e       	mov	r8, r31
    44a2:	f6 e0       	ldi	r31, 0x06	; 6
    44a4:	9f 2e       	mov	r9, r31
    44a6:	f0 2d       	mov	r31, r0
    44a8:	0f 2e       	mov	r0, r31
    44aa:	f3 e0       	ldi	r31, 0x03	; 3
    44ac:	6f 2e       	mov	r6, r31
    44ae:	f7 e0       	ldi	r31, 0x07	; 7
    44b0:	7f 2e       	mov	r7, r31
    44b2:	f0 2d       	mov	r31, r0
    44b4:	3e 2c       	mov	r3, r14
    44b6:	2f 2c       	mov	r2, r15
    44b8:	ff 92       	push	r15
    44ba:	ef 92       	push	r14
    44bc:	bf 92       	push	r11
    44be:	af 92       	push	r10
    44c0:	1f 93       	push	r17
    44c2:	0f 93       	push	r16
    44c4:	0e 94 a0 34 	call	0x6940	; 0x6940 <sprintf>
    44c8:	60 e0       	ldi	r22, 0x00	; 0
    44ca:	70 e0       	ldi	r23, 0x00	; 0
    44cc:	c8 01       	movw	r24, r16
    44ce:	02 dd       	rcall	.-1532   	; 0x3ed4 <_uploadMessage>
    44d0:	5b dd       	rcall	.-1354   	; 0x3f88 <_reply2ReturnCode>
    44d2:	0f 90       	pop	r0
    44d4:	0f 90       	pop	r0
    44d6:	0f 90       	pop	r0
    44d8:	0f 90       	pop	r0
    44da:	0f 90       	pop	r0
    44dc:	0f 90       	pop	r0
    44de:	81 11       	cpse	r24, r1
    44e0:	63 c0       	rjmp	.+198    	; 0x45a8 <lora_driver_configureToEu868+0x18a>
    44e2:	32 e0       	ldi	r19, 0x02	; 2
    44e4:	3e 15       	cp	r19, r14
    44e6:	e8 f4       	brcc	.+58     	; 0x4522 <lora_driver_configureToEu868+0x104>
    44e8:	f6 01       	movw	r30, r12
    44ea:	83 81       	ldd	r24, Z+3	; 0x03
    44ec:	8f 93       	push	r24
    44ee:	82 81       	ldd	r24, Z+2	; 0x02
    44f0:	8f 93       	push	r24
    44f2:	81 81       	ldd	r24, Z+1	; 0x01
    44f4:	8f 93       	push	r24
    44f6:	80 81       	ld	r24, Z
    44f8:	8f 93       	push	r24
    44fa:	ff 92       	push	r15
    44fc:	ef 92       	push	r14
    44fe:	5f 92       	push	r5
    4500:	4f 92       	push	r4
    4502:	1f 93       	push	r17
    4504:	0f 93       	push	r16
    4506:	0e 94 a0 34 	call	0x6940	; 0x6940 <sprintf>
    450a:	60 e0       	ldi	r22, 0x00	; 0
    450c:	70 e0       	ldi	r23, 0x00	; 0
    450e:	c8 01       	movw	r24, r16
    4510:	e1 dc       	rcall	.-1598   	; 0x3ed4 <_uploadMessage>
    4512:	3a dd       	rcall	.-1420   	; 0x3f88 <_reply2ReturnCode>
    4514:	0f b6       	in	r0, 0x3f	; 63
    4516:	f8 94       	cli
    4518:	de bf       	out	0x3e, r29	; 62
    451a:	0f be       	out	0x3f, r0	; 63
    451c:	cd bf       	out	0x3d, r28	; 61
    451e:	81 11       	cpse	r24, r1
    4520:	43 c0       	rjmp	.+134    	; 0x45a8 <lora_driver_configureToEu868+0x18a>
    4522:	2f 92       	push	r2
    4524:	3f 92       	push	r3
    4526:	9f 92       	push	r9
    4528:	8f 92       	push	r8
    452a:	1f 93       	push	r17
    452c:	0f 93       	push	r16
    452e:	0e 94 a0 34 	call	0x6940	; 0x6940 <sprintf>
    4532:	60 e0       	ldi	r22, 0x00	; 0
    4534:	70 e0       	ldi	r23, 0x00	; 0
    4536:	c8 01       	movw	r24, r16
    4538:	cd dc       	rcall	.-1638   	; 0x3ed4 <_uploadMessage>
    453a:	26 dd       	rcall	.-1460   	; 0x3f88 <_reply2ReturnCode>
    453c:	0f 90       	pop	r0
    453e:	0f 90       	pop	r0
    4540:	0f 90       	pop	r0
    4542:	0f 90       	pop	r0
    4544:	0f 90       	pop	r0
    4546:	0f 90       	pop	r0
    4548:	81 11       	cpse	r24, r1
    454a:	2e c0       	rjmp	.+92     	; 0x45a8 <lora_driver_configureToEu868+0x18a>
    454c:	2f 92       	push	r2
    454e:	3f 92       	push	r3
    4550:	7f 92       	push	r7
    4552:	6f 92       	push	r6
    4554:	1f 93       	push	r17
    4556:	0f 93       	push	r16
    4558:	0e 94 a0 34 	call	0x6940	; 0x6940 <sprintf>
    455c:	60 e0       	ldi	r22, 0x00	; 0
    455e:	70 e0       	ldi	r23, 0x00	; 0
    4560:	c8 01       	movw	r24, r16
    4562:	b8 dc       	rcall	.-1680   	; 0x3ed4 <_uploadMessage>
    4564:	11 dd       	rcall	.-1502   	; 0x3f88 <_reply2ReturnCode>
    4566:	0f 90       	pop	r0
    4568:	0f 90       	pop	r0
    456a:	0f 90       	pop	r0
    456c:	0f 90       	pop	r0
    456e:	0f 90       	pop	r0
    4570:	0f 90       	pop	r0
    4572:	81 11       	cpse	r24, r1
    4574:	19 c0       	rjmp	.+50     	; 0x45a8 <lora_driver_configureToEu868+0x18a>
    4576:	3f ef       	ldi	r19, 0xFF	; 255
    4578:	e3 1a       	sub	r14, r19
    457a:	f3 0a       	sbc	r15, r19
    457c:	84 e0       	ldi	r24, 0x04	; 4
    457e:	c8 0e       	add	r12, r24
    4580:	d1 1c       	adc	r13, r1
    4582:	98 e0       	ldi	r25, 0x08	; 8
    4584:	e9 16       	cp	r14, r25
    4586:	f1 04       	cpc	r15, r1
    4588:	09 f0       	breq	.+2      	; 0x458c <lora_driver_configureToEu868+0x16e>
    458a:	94 cf       	rjmp	.-216    	; 0x44b4 <lora_driver_configureToEu868+0x96>
    458c:	60 e0       	ldi	r22, 0x00	; 0
    458e:	70 e0       	ldi	r23, 0x00	; 0
    4590:	8b e1       	ldi	r24, 0x1B	; 27
    4592:	97 e0       	ldi	r25, 0x07	; 7
    4594:	9f dc       	rcall	.-1730   	; 0x3ed4 <_uploadMessage>
    4596:	f8 dc       	rcall	.-1552   	; 0x3f88 <_reply2ReturnCode>
    4598:	81 11       	cpse	r24, r1
    459a:	06 c0       	rjmp	.+12     	; 0x45a8 <lora_driver_configureToEu868+0x18a>
    459c:	60 e0       	ldi	r22, 0x00	; 0
    459e:	70 e0       	ldi	r23, 0x00	; 0
    45a0:	8c e2       	ldi	r24, 0x2C	; 44
    45a2:	97 e0       	ldi	r25, 0x07	; 7
    45a4:	97 dc       	rcall	.-1746   	; 0x3ed4 <_uploadMessage>
    45a6:	f0 dc       	rcall	.-1568   	; 0x3f88 <_reply2ReturnCode>
    45a8:	a0 96       	adiw	r28, 0x20	; 32
    45aa:	0f b6       	in	r0, 0x3f	; 63
    45ac:	f8 94       	cli
    45ae:	de bf       	out	0x3e, r29	; 62
    45b0:	0f be       	out	0x3f, r0	; 63
    45b2:	cd bf       	out	0x3d, r28	; 61
    45b4:	df 91       	pop	r29
    45b6:	cf 91       	pop	r28
    45b8:	1f 91       	pop	r17
    45ba:	0f 91       	pop	r16
    45bc:	ff 90       	pop	r15
    45be:	ef 90       	pop	r14
    45c0:	df 90       	pop	r13
    45c2:	cf 90       	pop	r12
    45c4:	bf 90       	pop	r11
    45c6:	af 90       	pop	r10
    45c8:	9f 90       	pop	r9
    45ca:	8f 90       	pop	r8
    45cc:	7f 90       	pop	r7
    45ce:	6f 90       	pop	r6
    45d0:	5f 90       	pop	r5
    45d2:	4f 90       	pop	r4
    45d4:	3f 90       	pop	r3
    45d6:	2f 90       	pop	r2
    45d8:	08 95       	ret

000045da <lora_driver_setOtaaIdentity>:
    45da:	ef 92       	push	r14
    45dc:	ff 92       	push	r15
    45de:	0f 93       	push	r16
    45e0:	1f 93       	push	r17
    45e2:	cf 93       	push	r28
    45e4:	df 93       	push	r29
    45e6:	ec 01       	movw	r28, r24
    45e8:	8b 01       	movw	r16, r22
    45ea:	7a 01       	movw	r14, r20
    45ec:	81 e0       	ldi	r24, 0x01	; 1
    45ee:	f4 de       	rcall	.-536    	; 0x43d8 <lora_driver_setAdaptiveDataRate>
    45f0:	81 11       	cpse	r24, r1
    45f2:	0d c0       	rjmp	.+26     	; 0x460e <lora_driver_setOtaaIdentity+0x34>
    45f4:	ce 01       	movw	r24, r28
    45f6:	d4 dd       	rcall	.-1112   	; 0x41a0 <lora_driver_setApplicationIdentifier>
    45f8:	81 11       	cpse	r24, r1
    45fa:	09 c0       	rjmp	.+18     	; 0x460e <lora_driver_setOtaaIdentity+0x34>
    45fc:	c8 01       	movw	r24, r16
    45fe:	e1 dd       	rcall	.-1086   	; 0x41c2 <lora_driver_setApplicationKey>
    4600:	81 11       	cpse	r24, r1
    4602:	05 c0       	rjmp	.+10     	; 0x460e <lora_driver_setOtaaIdentity+0x34>
    4604:	c7 01       	movw	r24, r14
    4606:	bb dd       	rcall	.-1162   	; 0x417e <lora_driver_setDeviceIdentifier>
    4608:	81 11       	cpse	r24, r1
    460a:	01 c0       	rjmp	.+2      	; 0x460e <lora_driver_setOtaaIdentity+0x34>
    460c:	eb dd       	rcall	.-1066   	; 0x41e4 <lora_driver_saveMac>
    460e:	df 91       	pop	r29
    4610:	cf 91       	pop	r28
    4612:	1f 91       	pop	r17
    4614:	0f 91       	pop	r16
    4616:	ff 90       	pop	r15
    4618:	ef 90       	pop	r14
    461a:	08 95       	ret

0000461c <lora_driver_mapReturnCodeToText>:
    461c:	90 e0       	ldi	r25, 0x00	; 0
    461e:	fc 01       	movw	r30, r24
    4620:	ee 0f       	add	r30, r30
    4622:	ff 1f       	adc	r31, r31
    4624:	8e 0f       	add	r24, r30
    4626:	9f 1f       	adc	r25, r31
    4628:	fc 01       	movw	r30, r24
    462a:	eb 50       	subi	r30, 0x0B	; 11
    462c:	f8 4f       	sbci	r31, 0xF8	; 248
    462e:	81 81       	ldd	r24, Z+1	; 0x01
    4630:	92 81       	ldd	r25, Z+2	; 0x02
    4632:	08 95       	ret

00004634 <decode_port_no>:
    4634:	dc 01       	movw	r26, r24
    4636:	00 97       	sbiw	r24, 0x00	; 0
    4638:	29 f1       	breq	.+74     	; 0x4684 <decode_port_no+0x50>
    463a:	fb 01       	movw	r30, r22
    463c:	20 81       	ld	r18, Z
    463e:	fc 01       	movw	r30, r24
    4640:	01 90       	ld	r0, Z+
    4642:	00 20       	and	r0, r0
    4644:	e9 f7       	brne	.-6      	; 0x4640 <decode_port_no+0xc>
    4646:	31 97       	sbiw	r30, 0x01	; 1
    4648:	e8 1b       	sub	r30, r24
    464a:	f9 0b       	sbc	r31, r25
    464c:	82 2f       	mov	r24, r18
    464e:	90 e0       	ldi	r25, 0x00	; 0
    4650:	e8 17       	cp	r30, r24
    4652:	f9 07       	cpc	r31, r25
    4654:	c8 f0       	brcs	.+50     	; 0x4688 <decode_port_no+0x54>
    4656:	80 e0       	ldi	r24, 0x00	; 0
    4658:	08 c0       	rjmp	.+16     	; 0x466a <decode_port_no+0x36>
    465a:	88 0f       	add	r24, r24
    465c:	38 2f       	mov	r19, r24
    465e:	33 0f       	add	r19, r19
    4660:	33 0f       	add	r19, r19
    4662:	83 0f       	add	r24, r19
    4664:	80 53       	subi	r24, 0x30	; 48
    4666:	89 0f       	add	r24, r25
    4668:	2f 5f       	subi	r18, 0xFF	; 255
    466a:	fd 01       	movw	r30, r26
    466c:	e2 0f       	add	r30, r18
    466e:	f1 1d       	adc	r31, r1
    4670:	90 81       	ld	r25, Z
    4672:	30 ed       	ldi	r19, 0xD0	; 208
    4674:	39 0f       	add	r19, r25
    4676:	3a 30       	cpi	r19, 0x0A	; 10
    4678:	10 f4       	brcc	.+4      	; 0x467e <decode_port_no+0x4a>
    467a:	91 11       	cpse	r25, r1
    467c:	ee cf       	rjmp	.-36     	; 0x465a <decode_port_no+0x26>
    467e:	fb 01       	movw	r30, r22
    4680:	20 83       	st	Z, r18
    4682:	08 95       	ret
    4684:	80 e0       	ldi	r24, 0x00	; 0
    4686:	08 95       	ret
    4688:	80 e0       	ldi	r24, 0x00	; 0
    468a:	08 95       	ret

0000468c <decode_hexadecimal_string_bytes>:
    468c:	0f 93       	push	r16
    468e:	1f 93       	push	r17
    4690:	cf 93       	push	r28
    4692:	df 93       	push	r29
    4694:	dc 01       	movw	r26, r24
    4696:	ea 01       	movw	r28, r20
    4698:	20 97       	sbiw	r28, 0x00	; 0
    469a:	e1 f1       	breq	.+120    	; 0x4714 <decode_hexadecimal_string_bytes+0x88>
    469c:	fa 01       	movw	r30, r20
    469e:	01 90       	ld	r0, Z+
    46a0:	00 20       	and	r0, r0
    46a2:	e9 f7       	brne	.-6      	; 0x469e <decode_hexadecimal_string_bytes+0x12>
    46a4:	31 97       	sbiw	r30, 0x01	; 1
    46a6:	e4 1b       	sub	r30, r20
    46a8:	f5 0b       	sbc	r31, r21
    46aa:	32 97       	sbiw	r30, 0x02	; 2
    46ac:	10 f5       	brcc	.+68     	; 0x46f2 <decode_hexadecimal_string_bytes+0x66>
    46ae:	32 c0       	rjmp	.+100    	; 0x4714 <decode_hexadecimal_string_bytes+0x88>
    46b0:	8d 01       	movw	r16, r26
    46b2:	04 0f       	add	r16, r20
    46b4:	15 1f       	adc	r17, r21
    46b6:	30 e0       	ldi	r19, 0x00	; 0
    46b8:	ae 01       	movw	r20, r28
    46ba:	42 0f       	add	r20, r18
    46bc:	53 1f       	adc	r21, r19
    46be:	fa 01       	movw	r30, r20
    46c0:	90 81       	ld	r25, Z
    46c2:	91 34       	cpi	r25, 0x41	; 65
    46c4:	28 f0       	brcs	.+10     	; 0x46d0 <decode_hexadecimal_string_bytes+0x44>
    46c6:	97 53       	subi	r25, 0x37	; 55
    46c8:	59 2f       	mov	r21, r25
    46ca:	52 95       	swap	r21
    46cc:	50 7f       	andi	r21, 0xF0	; 240
    46ce:	03 c0       	rjmp	.+6      	; 0x46d6 <decode_hexadecimal_string_bytes+0x4a>
    46d0:	59 2f       	mov	r21, r25
    46d2:	52 95       	swap	r21
    46d4:	50 7f       	andi	r21, 0xF0	; 240
    46d6:	2c 0f       	add	r18, r28
    46d8:	3d 1f       	adc	r19, r29
    46da:	f9 01       	movw	r30, r18
    46dc:	91 81       	ldd	r25, Z+1	; 0x01
    46de:	91 34       	cpi	r25, 0x41	; 65
    46e0:	10 f0       	brcs	.+4      	; 0x46e6 <decode_hexadecimal_string_bytes+0x5a>
    46e2:	97 53       	subi	r25, 0x37	; 55
    46e4:	01 c0       	rjmp	.+2      	; 0x46e8 <decode_hexadecimal_string_bytes+0x5c>
    46e6:	90 53       	subi	r25, 0x30	; 48
    46e8:	95 0f       	add	r25, r21
    46ea:	f8 01       	movw	r30, r16
    46ec:	90 83       	st	Z, r25
    46ee:	8f 5f       	subi	r24, 0xFF	; 255
    46f0:	01 c0       	rjmp	.+2      	; 0x46f4 <decode_hexadecimal_string_bytes+0x68>
    46f2:	80 e0       	ldi	r24, 0x00	; 0
    46f4:	28 2f       	mov	r18, r24
    46f6:	22 0f       	add	r18, r18
    46f8:	48 2f       	mov	r20, r24
    46fa:	50 e0       	ldi	r21, 0x00	; 0
    46fc:	fe 01       	movw	r30, r28
    46fe:	01 90       	ld	r0, Z+
    4700:	00 20       	and	r0, r0
    4702:	e9 f7       	brne	.-6      	; 0x46fe <decode_hexadecimal_string_bytes+0x72>
    4704:	31 97       	sbiw	r30, 0x01	; 1
    4706:	ec 1b       	sub	r30, r28
    4708:	fd 0b       	sbc	r31, r29
    470a:	4e 17       	cp	r20, r30
    470c:	5f 07       	cpc	r21, r31
    470e:	10 f4       	brcc	.+4      	; 0x4714 <decode_hexadecimal_string_bytes+0x88>
    4710:	86 13       	cpse	r24, r22
    4712:	ce cf       	rjmp	.-100    	; 0x46b0 <decode_hexadecimal_string_bytes+0x24>
    4714:	df 91       	pop	r29
    4716:	cf 91       	pop	r28
    4718:	1f 91       	pop	r17
    471a:	0f 91       	pop	r16
    471c:	08 95       	ret

0000471e <_serialCallBack>:
    471e:	80 91 49 17 	lds	r24, 0x1749	; 0x801749 <crc_sum.1945>
    4722:	86 0f       	add	r24, r22
    4724:	80 93 49 17 	sts	0x1749, r24	; 0x801749 <crc_sum.1945>
    4728:	90 91 4c 17 	lds	r25, 0x174C	; 0x80174c <_mh_state>
    472c:	91 30       	cpi	r25, 0x01	; 1
    472e:	79 f0       	breq	.+30     	; 0x474e <_serialCallBack+0x30>
    4730:	28 f0       	brcs	.+10     	; 0x473c <_serialCallBack+0x1e>
    4732:	92 30       	cpi	r25, 0x02	; 2
    4734:	a9 f0       	breq	.+42     	; 0x4760 <_serialCallBack+0x42>
    4736:	93 30       	cpi	r25, 0x03	; 3
    4738:	19 f1       	breq	.+70     	; 0x4780 <_serialCallBack+0x62>
    473a:	08 95       	ret
    473c:	6f 3f       	cpi	r22, 0xFF	; 255
    473e:	09 f0       	breq	.+2      	; 0x4742 <_serialCallBack+0x24>
    4740:	48 c0       	rjmp	.+144    	; 0x47d2 <_serialCallBack+0xb4>
    4742:	10 92 49 17 	sts	0x1749, r1	; 0x801749 <crc_sum.1945>
    4746:	81 e0       	ldi	r24, 0x01	; 1
    4748:	80 93 4c 17 	sts	0x174C, r24	; 0x80174c <_mh_state>
    474c:	08 95       	ret
    474e:	66 38       	cpi	r22, 0x86	; 134
    4750:	09 f0       	breq	.+2      	; 0x4754 <_serialCallBack+0x36>
    4752:	3f c0       	rjmp	.+126    	; 0x47d2 <_serialCallBack+0xb4>
    4754:	10 92 48 17 	sts	0x1748, r1	; 0x801748 <inDex.1943>
    4758:	82 e0       	ldi	r24, 0x02	; 2
    475a:	80 93 4c 17 	sts	0x174C, r24	; 0x80174c <_mh_state>
    475e:	08 95       	ret
    4760:	e0 91 48 17 	lds	r30, 0x1748	; 0x801748 <inDex.1943>
    4764:	81 e0       	ldi	r24, 0x01	; 1
    4766:	8e 0f       	add	r24, r30
    4768:	80 93 48 17 	sts	0x1748, r24	; 0x801748 <inDex.1943>
    476c:	f0 e0       	ldi	r31, 0x00	; 0
    476e:	ea 5b       	subi	r30, 0xBA	; 186
    4770:	f8 4e       	sbci	r31, 0xE8	; 232
    4772:	60 83       	st	Z, r22
    4774:	82 30       	cpi	r24, 0x02	; 2
    4776:	69 f5       	brne	.+90     	; 0x47d2 <_serialCallBack+0xb4>
    4778:	83 e0       	ldi	r24, 0x03	; 3
    477a:	80 93 4c 17 	sts	0x174C, r24	; 0x80174c <_mh_state>
    477e:	08 95       	ret
    4780:	90 91 48 17 	lds	r25, 0x1748	; 0x801748 <inDex.1943>
    4784:	21 e0       	ldi	r18, 0x01	; 1
    4786:	29 0f       	add	r18, r25
    4788:	20 93 48 17 	sts	0x1748, r18	; 0x801748 <inDex.1943>
    478c:	96 30       	cpi	r25, 0x06	; 6
    478e:	09 f5       	brne	.+66     	; 0x47d2 <_serialCallBack+0xb4>
    4790:	81 11       	cpse	r24, r1
    4792:	0e c0       	rjmp	.+28     	; 0x47b0 <_serialCallBack+0x92>
    4794:	e6 e4       	ldi	r30, 0x46	; 70
    4796:	f7 e1       	ldi	r31, 0x17	; 23
    4798:	80 81       	ld	r24, Z
    479a:	90 e0       	ldi	r25, 0x00	; 0
    479c:	98 2f       	mov	r25, r24
    479e:	88 27       	eor	r24, r24
    47a0:	21 81       	ldd	r18, Z+1	; 0x01
    47a2:	82 0f       	add	r24, r18
    47a4:	91 1d       	adc	r25, r1
    47a6:	90 93 4e 17 	sts	0x174E, r25	; 0x80174e <_ppm+0x1>
    47aa:	80 93 4d 17 	sts	0x174D, r24	; 0x80174d <_ppm>
    47ae:	04 c0       	rjmp	.+8      	; 0x47b8 <_serialCallBack+0x9a>
    47b0:	10 92 4e 17 	sts	0x174E, r1	; 0x80174e <_ppm+0x1>
    47b4:	10 92 4d 17 	sts	0x174D, r1	; 0x80174d <_ppm>
    47b8:	10 92 4c 17 	sts	0x174C, r1	; 0x80174c <_mh_state>
    47bc:	e0 91 4a 17 	lds	r30, 0x174A	; 0x80174a <_appCallBack>
    47c0:	f0 91 4b 17 	lds	r31, 0x174B	; 0x80174b <_appCallBack+0x1>
    47c4:	30 97       	sbiw	r30, 0x00	; 0
    47c6:	29 f0       	breq	.+10     	; 0x47d2 <_serialCallBack+0xb4>
    47c8:	80 91 4d 17 	lds	r24, 0x174D	; 0x80174d <_ppm>
    47cc:	90 91 4e 17 	lds	r25, 0x174E	; 0x80174e <_ppm+0x1>
    47d0:	19 95       	eicall
    47d2:	08 95       	ret

000047d4 <mh_z19_initialise>:
    47d4:	8f 92       	push	r8
    47d6:	9f 92       	push	r9
    47d8:	af 92       	push	r10
    47da:	cf 92       	push	r12
    47dc:	ef 92       	push	r14
    47de:	0f 93       	push	r16
    47e0:	0f 2e       	mov	r0, r31
    47e2:	ff e8       	ldi	r31, 0x8F	; 143
    47e4:	8f 2e       	mov	r8, r31
    47e6:	f3 e2       	ldi	r31, 0x23	; 35
    47e8:	9f 2e       	mov	r9, r31
    47ea:	f0 2d       	mov	r31, r0
    47ec:	68 94       	set
    47ee:	aa 24       	eor	r10, r10
    47f0:	a4 f8       	bld	r10, 4
    47f2:	68 94       	set
    47f4:	cc 24       	eor	r12, r12
    47f6:	c4 f8       	bld	r12, 4
    47f8:	e1 2c       	mov	r14, r1
    47fa:	00 e0       	ldi	r16, 0x00	; 0
    47fc:	23 e0       	ldi	r18, 0x03	; 3
    47fe:	40 e8       	ldi	r20, 0x80	; 128
    4800:	55 e2       	ldi	r21, 0x25	; 37
    4802:	60 e0       	ldi	r22, 0x00	; 0
    4804:	70 e0       	ldi	r23, 0x00	; 0
    4806:	84 d0       	rcall	.+264    	; 0x4910 <serial_create>
    4808:	90 93 50 17 	sts	0x1750, r25	; 0x801750 <_serial+0x1>
    480c:	80 93 4f 17 	sts	0x174F, r24	; 0x80174f <_serial>
    4810:	0f 91       	pop	r16
    4812:	ef 90       	pop	r14
    4814:	cf 90       	pop	r12
    4816:	af 90       	pop	r10
    4818:	9f 90       	pop	r9
    481a:	8f 90       	pop	r8
    481c:	08 95       	ret

0000481e <mh_z19_injectCallBack>:
    481e:	90 93 4b 17 	sts	0x174B, r25	; 0x80174b <_appCallBack+0x1>
    4822:	80 93 4a 17 	sts	0x174A, r24	; 0x80174a <_appCallBack>
    4826:	08 95       	ret

00004828 <mh_z19_takeMeassuring>:
    4828:	cf 93       	push	r28
    482a:	df 93       	push	r29
    482c:	cd b7       	in	r28, 0x3d	; 61
    482e:	de b7       	in	r29, 0x3e	; 62
    4830:	29 97       	sbiw	r28, 0x09	; 9
    4832:	0f b6       	in	r0, 0x3f	; 63
    4834:	f8 94       	cli
    4836:	de bf       	out	0x3e, r29	; 62
    4838:	0f be       	out	0x3f, r0	; 63
    483a:	cd bf       	out	0x3d, r28	; 61
    483c:	89 e0       	ldi	r24, 0x09	; 9
    483e:	e2 e4       	ldi	r30, 0x42	; 66
    4840:	f2 e0       	ldi	r31, 0x02	; 2
    4842:	9e 01       	movw	r18, r28
    4844:	2f 5f       	subi	r18, 0xFF	; 255
    4846:	3f 4f       	sbci	r19, 0xFF	; 255
    4848:	d9 01       	movw	r26, r18
    484a:	01 90       	ld	r0, Z+
    484c:	0d 92       	st	X+, r0
    484e:	8a 95       	dec	r24
    4850:	e1 f7       	brne	.-8      	; 0x484a <mh_z19_takeMeassuring+0x22>
    4852:	10 92 4e 17 	sts	0x174E, r1	; 0x80174e <_ppm+0x1>
    4856:	10 92 4d 17 	sts	0x174D, r1	; 0x80174d <_ppm>
    485a:	80 91 4f 17 	lds	r24, 0x174F	; 0x80174f <_serial>
    485e:	90 91 50 17 	lds	r25, 0x1750	; 0x801750 <_serial+0x1>
    4862:	00 97       	sbiw	r24, 0x00	; 0
    4864:	31 f0       	breq	.+12     	; 0x4872 <mh_z19_takeMeassuring+0x4a>
    4866:	42 2f       	mov	r20, r18
    4868:	53 2f       	mov	r21, r19
    486a:	69 e0       	ldi	r22, 0x09	; 9
    486c:	1e d1       	rcall	.+572    	; 0x4aaa <serial_sendBytes>
    486e:	80 e0       	ldi	r24, 0x00	; 0
    4870:	01 c0       	rjmp	.+2      	; 0x4874 <mh_z19_takeMeassuring+0x4c>
    4872:	82 e0       	ldi	r24, 0x02	; 2
    4874:	29 96       	adiw	r28, 0x09	; 9
    4876:	0f b6       	in	r0, 0x3f	; 63
    4878:	f8 94       	cli
    487a:	de bf       	out	0x3e, r29	; 62
    487c:	0f be       	out	0x3f, r0	; 63
    487e:	cd bf       	out	0x3d, r28	; 61
    4880:	df 91       	pop	r29
    4882:	cf 91       	pop	r28
    4884:	08 95       	ret

00004886 <mh_z19_getCo2Ppm>:
    4886:	20 91 4d 17 	lds	r18, 0x174D	; 0x80174d <_ppm>
    488a:	30 91 4e 17 	lds	r19, 0x174E	; 0x80174e <_ppm+0x1>
    488e:	21 15       	cp	r18, r1
    4890:	31 05       	cpc	r19, r1
    4892:	29 f4       	brne	.+10     	; 0x489e <mh_z19_getCo2Ppm+0x18>
    4894:	fc 01       	movw	r30, r24
    4896:	11 82       	std	Z+1, r1	; 0x01
    4898:	10 82       	st	Z, r1
    489a:	81 e0       	ldi	r24, 0x01	; 1
    489c:	08 95       	ret
    489e:	fc 01       	movw	r30, r24
    48a0:	31 83       	std	Z+1, r19	; 0x01
    48a2:	20 83       	st	Z, r18
    48a4:	80 e0       	ldi	r24, 0x00	; 0
    48a6:	08 95       	ret

000048a8 <rc_servo_setPosition>:
    48a8:	65 36       	cpi	r22, 0x65	; 101
    48aa:	0c f0       	brlt	.+2      	; 0x48ae <rc_servo_setPosition+0x6>
    48ac:	64 e6       	ldi	r22, 0x64	; 100
    48ae:	6c 39       	cpi	r22, 0x9C	; 156
    48b0:	0c f4       	brge	.+2      	; 0x48b4 <rc_servo_setPosition+0xc>
    48b2:	6c e9       	ldi	r22, 0x9C	; 156
    48b4:	96 ef       	ldi	r25, 0xF6	; 246
    48b6:	69 02       	muls	r22, r25
    48b8:	b0 01       	movw	r22, r0
    48ba:	11 24       	eor	r1, r1
    48bc:	68 54       	subi	r22, 0x48	; 72
    48be:	74 4f       	sbci	r23, 0xF4	; 244
    48c0:	81 11       	cpse	r24, r1
    48c2:	05 c0       	rjmp	.+10     	; 0x48ce <rc_servo_setPosition+0x26>
    48c4:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    48c8:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    48cc:	08 95       	ret
    48ce:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    48d2:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    48d6:	08 95       	ret

000048d8 <rc_servo_initialise>:
    48d8:	ea e0       	ldi	r30, 0x0A	; 10
    48da:	f1 e0       	ldi	r31, 0x01	; 1
    48dc:	80 81       	ld	r24, Z
    48de:	88 61       	ori	r24, 0x18	; 24
    48e0:	80 83       	st	Z, r24
    48e2:	8f e3       	ldi	r24, 0x3F	; 63
    48e4:	9c e9       	ldi	r25, 0x9C	; 156
    48e6:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    48ea:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    48ee:	60 e0       	ldi	r22, 0x00	; 0
    48f0:	80 e0       	ldi	r24, 0x00	; 0
    48f2:	da df       	rcall	.-76     	; 0x48a8 <rc_servo_setPosition>
    48f4:	60 e0       	ldi	r22, 0x00	; 0
    48f6:	81 e0       	ldi	r24, 0x01	; 1
    48f8:	d7 df       	rcall	.-82     	; 0x48a8 <rc_servo_setPosition>
    48fa:	e0 e2       	ldi	r30, 0x20	; 32
    48fc:	f1 e0       	ldi	r31, 0x01	; 1
    48fe:	80 81       	ld	r24, Z
    4900:	82 6a       	ori	r24, 0xA2	; 162
    4902:	80 83       	st	Z, r24
    4904:	e1 e2       	ldi	r30, 0x21	; 33
    4906:	f1 e0       	ldi	r31, 0x01	; 1
    4908:	80 81       	ld	r24, Z
    490a:	8a 61       	ori	r24, 0x1A	; 26
    490c:	80 83       	st	Z, r24
    490e:	08 95       	ret

00004910 <serial_create>:
    4910:	2f 92       	push	r2
    4912:	3f 92       	push	r3
    4914:	4f 92       	push	r4
    4916:	5f 92       	push	r5
    4918:	6f 92       	push	r6
    491a:	7f 92       	push	r7
    491c:	8f 92       	push	r8
    491e:	9f 92       	push	r9
    4920:	af 92       	push	r10
    4922:	cf 92       	push	r12
    4924:	ef 92       	push	r14
    4926:	ff 92       	push	r15
    4928:	0f 93       	push	r16
    492a:	1f 93       	push	r17
    492c:	cf 93       	push	r28
    492e:	df 93       	push	r29
    4930:	cd b7       	in	r28, 0x3d	; 61
    4932:	de b7       	in	r29, 0x3e	; 62
    4934:	f8 2e       	mov	r15, r24
    4936:	2a 01       	movw	r4, r20
    4938:	3b 01       	movw	r6, r22
    493a:	88 e0       	ldi	r24, 0x08	; 8
    493c:	90 e0       	ldi	r25, 0x00	; 0
    493e:	0e 94 af 31 	call	0x635e	; 0x635e <malloc>
    4942:	8c 01       	movw	r16, r24
    4944:	8f 2d       	mov	r24, r15
    4946:	90 e0       	ldi	r25, 0x00	; 0
    4948:	fc 01       	movw	r30, r24
    494a:	ee 0f       	add	r30, r30
    494c:	ff 1f       	adc	r31, r31
    494e:	ef 5a       	subi	r30, 0xAF	; 175
    4950:	f8 4e       	sbci	r31, 0xE8	; 232
    4952:	11 83       	std	Z+1, r17	; 0x01
    4954:	00 83       	st	Z, r16
    4956:	01 15       	cp	r16, r1
    4958:	11 05       	cpc	r17, r1
    495a:	09 f4       	brne	.+2      	; 0x495e <serial_create+0x4e>
    495c:	69 c0       	rjmp	.+210    	; 0x4a30 <serial_create+0x120>
    495e:	88 0f       	add	r24, r24
    4960:	99 1f       	adc	r25, r25
    4962:	fc 01       	movw	r30, r24
    4964:	e5 5f       	subi	r30, 0xF5	; 245
    4966:	fd 4f       	sbci	r31, 0xFD	; 253
    4968:	80 81       	ld	r24, Z
    496a:	91 81       	ldd	r25, Z+1	; 0x01
    496c:	d8 01       	movw	r26, r16
    496e:	8d 93       	st	X+, r24
    4970:	9c 93       	st	X, r25
    4972:	8c 2d       	mov	r24, r12
    4974:	90 e0       	ldi	r25, 0x00	; 0
    4976:	88 0f       	add	r24, r24
    4978:	99 1f       	adc	r25, r25
    497a:	88 0f       	add	r24, r24
    497c:	99 1f       	adc	r25, r25
    497e:	0e 94 af 31 	call	0x635e	; 0x635e <malloc>
    4982:	1c 01       	movw	r2, r24
    4984:	86 e0       	ldi	r24, 0x06	; 6
    4986:	90 e0       	ldi	r25, 0x00	; 0
    4988:	0e 94 af 31 	call	0x635e	; 0x635e <malloc>
    498c:	7c 01       	movw	r14, r24
    498e:	4c 2d       	mov	r20, r12
    4990:	b1 01       	movw	r22, r2
    4992:	f1 d6       	rcall	.+3554   	; 0x5776 <fifo_init>
    4994:	f8 01       	movw	r30, r16
    4996:	f5 82       	std	Z+5, r15	; 0x05
    4998:	e4 82       	std	Z+4, r14	; 0x04
    499a:	8a 2d       	mov	r24, r10
    499c:	90 e0       	ldi	r25, 0x00	; 0
    499e:	88 0f       	add	r24, r24
    49a0:	99 1f       	adc	r25, r25
    49a2:	88 0f       	add	r24, r24
    49a4:	99 1f       	adc	r25, r25
    49a6:	0e 94 af 31 	call	0x635e	; 0x635e <malloc>
    49aa:	1c 01       	movw	r2, r24
    49ac:	86 e0       	ldi	r24, 0x06	; 6
    49ae:	90 e0       	ldi	r25, 0x00	; 0
    49b0:	0e 94 af 31 	call	0x635e	; 0x635e <malloc>
    49b4:	7c 01       	movw	r14, r24
    49b6:	4a 2d       	mov	r20, r10
    49b8:	b1 01       	movw	r22, r2
    49ba:	dd d6       	rcall	.+3514   	; 0x5776 <fifo_init>
    49bc:	d8 01       	movw	r26, r16
    49be:	13 96       	adiw	r26, 0x03	; 3
    49c0:	fc 92       	st	X, r15
    49c2:	ee 92       	st	-X, r14
    49c4:	12 97       	sbiw	r26, 0x02	; 2
    49c6:	17 96       	adiw	r26, 0x07	; 7
    49c8:	9c 92       	st	X, r9
    49ca:	8e 92       	st	-X, r8
    49cc:	16 97       	sbiw	r26, 0x06	; 6
    49ce:	ff b6       	in	r15, 0x3f	; 63
    49d0:	f8 94       	cli
    49d2:	ed 91       	ld	r30, X+
    49d4:	fc 91       	ld	r31, X
    49d6:	11 97       	sbiw	r26, 0x01	; 1
    49d8:	36 97       	sbiw	r30, 0x06	; 6
    49da:	80 81       	ld	r24, Z
    49dc:	82 60       	ori	r24, 0x02	; 2
    49de:	80 83       	st	Z, r24
    49e0:	8d 90       	ld	r8, X+
    49e2:	9c 90       	ld	r9, X
    49e4:	c3 01       	movw	r24, r6
    49e6:	b2 01       	movw	r22, r4
    49e8:	e0 d7       	rcall	.+4032   	; 0x59aa <__floatunsisf>
    49ea:	20 e0       	ldi	r18, 0x00	; 0
    49ec:	30 e0       	ldi	r19, 0x00	; 0
    49ee:	40 e0       	ldi	r20, 0x00	; 0
    49f0:	51 e4       	ldi	r21, 0x41	; 65
    49f2:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <__mulsf3>
    49f6:	9b 01       	movw	r18, r22
    49f8:	ac 01       	movw	r20, r24
    49fa:	60 e0       	ldi	r22, 0x00	; 0
    49fc:	74 e2       	ldi	r23, 0x24	; 36
    49fe:	84 e7       	ldi	r24, 0x74	; 116
    4a00:	9b e4       	ldi	r25, 0x4B	; 75
    4a02:	3a d7       	rcall	.+3700   	; 0x5878 <__divsf3>
    4a04:	20 e0       	ldi	r18, 0x00	; 0
    4a06:	30 e0       	ldi	r19, 0x00	; 0
    4a08:	40 e8       	ldi	r20, 0x80	; 128
    4a0a:	5f e3       	ldi	r21, 0x3F	; 63
    4a0c:	d0 d6       	rcall	.+3488   	; 0x57ae <__subsf3>
    4a0e:	a1 d7       	rcall	.+3906   	; 0x5952 <__fixunssfsi>
    4a10:	f4 01       	movw	r30, r8
    4a12:	32 97       	sbiw	r30, 0x02	; 2
    4a14:	60 83       	st	Z, r22
    4a16:	d8 01       	movw	r26, r16
    4a18:	ed 91       	ld	r30, X+
    4a1a:	fc 91       	ld	r31, X
    4a1c:	11 97       	sbiw	r26, 0x01	; 1
    4a1e:	35 97       	sbiw	r30, 0x05	; 5
    4a20:	88 e9       	ldi	r24, 0x98	; 152
    4a22:	80 83       	st	Z, r24
    4a24:	ed 91       	ld	r30, X+
    4a26:	fc 91       	ld	r31, X
    4a28:	34 97       	sbiw	r30, 0x04	; 4
    4a2a:	86 e0       	ldi	r24, 0x06	; 6
    4a2c:	80 83       	st	Z, r24
    4a2e:	ff be       	out	0x3f, r15	; 63
    4a30:	c8 01       	movw	r24, r16
    4a32:	df 91       	pop	r29
    4a34:	cf 91       	pop	r28
    4a36:	1f 91       	pop	r17
    4a38:	0f 91       	pop	r16
    4a3a:	ff 90       	pop	r15
    4a3c:	ef 90       	pop	r14
    4a3e:	cf 90       	pop	r12
    4a40:	af 90       	pop	r10
    4a42:	9f 90       	pop	r9
    4a44:	8f 90       	pop	r8
    4a46:	7f 90       	pop	r7
    4a48:	6f 90       	pop	r6
    4a4a:	5f 90       	pop	r5
    4a4c:	4f 90       	pop	r4
    4a4e:	3f 90       	pop	r3
    4a50:	2f 90       	pop	r2
    4a52:	08 95       	ret

00004a54 <serial_sendByte>:
    4a54:	cf 93       	push	r28
    4a56:	df 93       	push	r29
    4a58:	dc 01       	movw	r26, r24
    4a5a:	89 2b       	or	r24, r25
    4a5c:	01 f1       	breq	.+64     	; 0x4a9e <serial_sendByte+0x4a>
    4a5e:	12 96       	adiw	r26, 0x02	; 2
    4a60:	ed 91       	ld	r30, X+
    4a62:	fc 91       	ld	r31, X
    4a64:	13 97       	sbiw	r26, 0x03	; 3
    4a66:	93 81       	ldd	r25, Z+3	; 0x03
    4a68:	82 81       	ldd	r24, Z+2	; 0x02
    4a6a:	25 81       	ldd	r18, Z+5	; 0x05
    4a6c:	98 1b       	sub	r25, r24
    4a6e:	92 23       	and	r25, r18
    4a70:	84 81       	ldd	r24, Z+4	; 0x04
    4a72:	98 17       	cp	r25, r24
    4a74:	b1 f0       	breq	.+44     	; 0x4aa2 <serial_sendByte+0x4e>
    4a76:	83 81       	ldd	r24, Z+3	; 0x03
    4a78:	26 95       	lsr	r18
    4a7a:	28 23       	and	r18, r24
    4a7c:	c0 81       	ld	r28, Z
    4a7e:	d1 81       	ldd	r29, Z+1	; 0x01
    4a80:	c2 0f       	add	r28, r18
    4a82:	d1 1d       	adc	r29, r1
    4a84:	68 83       	st	Y, r22
    4a86:	8f 5f       	subi	r24, 0xFF	; 255
    4a88:	95 81       	ldd	r25, Z+5	; 0x05
    4a8a:	89 23       	and	r24, r25
    4a8c:	83 83       	std	Z+3, r24	; 0x03
    4a8e:	ed 91       	ld	r30, X+
    4a90:	fc 91       	ld	r31, X
    4a92:	35 97       	sbiw	r30, 0x05	; 5
    4a94:	80 81       	ld	r24, Z
    4a96:	80 62       	ori	r24, 0x20	; 32
    4a98:	80 83       	st	Z, r24
    4a9a:	80 e0       	ldi	r24, 0x00	; 0
    4a9c:	03 c0       	rjmp	.+6      	; 0x4aa4 <serial_sendByte+0x50>
    4a9e:	81 e0       	ldi	r24, 0x01	; 1
    4aa0:	01 c0       	rjmp	.+2      	; 0x4aa4 <serial_sendByte+0x50>
    4aa2:	82 e0       	ldi	r24, 0x02	; 2
    4aa4:	df 91       	pop	r29
    4aa6:	cf 91       	pop	r28
    4aa8:	08 95       	ret

00004aaa <serial_sendBytes>:
    4aaa:	ef 92       	push	r14
    4aac:	ff 92       	push	r15
    4aae:	0f 93       	push	r16
    4ab0:	1f 93       	push	r17
    4ab2:	cf 93       	push	r28
    4ab4:	df 93       	push	r29
    4ab6:	7c 01       	movw	r14, r24
    4ab8:	00 97       	sbiw	r24, 0x00	; 0
    4aba:	09 f4       	brne	.+2      	; 0x4abe <serial_sendBytes+0x14>
    4abc:	41 c0       	rjmp	.+130    	; 0x4b40 <serial_sendBytes+0x96>
    4abe:	dc 01       	movw	r26, r24
    4ac0:	12 96       	adiw	r26, 0x02	; 2
    4ac2:	ed 91       	ld	r30, X+
    4ac4:	fc 91       	ld	r31, X
    4ac6:	13 97       	sbiw	r26, 0x03	; 3
    4ac8:	93 81       	ldd	r25, Z+3	; 0x03
    4aca:	82 81       	ldd	r24, Z+2	; 0x02
    4acc:	98 1b       	sub	r25, r24
    4ace:	85 81       	ldd	r24, Z+5	; 0x05
    4ad0:	98 23       	and	r25, r24
    4ad2:	84 81       	ldd	r24, Z+4	; 0x04
    4ad4:	89 1b       	sub	r24, r25
    4ad6:	86 17       	cp	r24, r22
    4ad8:	a8 f1       	brcs	.+106    	; 0x4b44 <serial_sendBytes+0x9a>
    4ada:	66 23       	and	r22, r22
    4adc:	41 f1       	breq	.+80     	; 0x4b2e <serial_sendBytes+0x84>
    4ade:	84 2f       	mov	r24, r20
    4ae0:	95 2f       	mov	r25, r21
    4ae2:	dc 01       	movw	r26, r24
    4ae4:	61 50       	subi	r22, 0x01	; 1
    4ae6:	46 2f       	mov	r20, r22
    4ae8:	50 e0       	ldi	r21, 0x00	; 0
    4aea:	4f 5f       	subi	r20, 0xFF	; 255
    4aec:	5f 4f       	sbci	r21, 0xFF	; 255
    4aee:	48 0f       	add	r20, r24
    4af0:	59 1f       	adc	r21, r25
    4af2:	e7 01       	movw	r28, r14
    4af4:	ea 81       	ldd	r30, Y+2	; 0x02
    4af6:	fb 81       	ldd	r31, Y+3	; 0x03
    4af8:	93 81       	ldd	r25, Z+3	; 0x03
    4afa:	82 81       	ldd	r24, Z+2	; 0x02
    4afc:	25 81       	ldd	r18, Z+5	; 0x05
    4afe:	98 1b       	sub	r25, r24
    4b00:	92 23       	and	r25, r18
    4b02:	84 81       	ldd	r24, Z+4	; 0x04
    4b04:	98 17       	cp	r25, r24
    4b06:	79 f0       	breq	.+30     	; 0x4b26 <serial_sendBytes+0x7c>
    4b08:	8c 91       	ld	r24, X
    4b0a:	93 81       	ldd	r25, Z+3	; 0x03
    4b0c:	26 95       	lsr	r18
    4b0e:	29 23       	and	r18, r25
    4b10:	60 81       	ld	r22, Z
    4b12:	71 81       	ldd	r23, Z+1	; 0x01
    4b14:	8b 01       	movw	r16, r22
    4b16:	02 0f       	add	r16, r18
    4b18:	11 1d       	adc	r17, r1
    4b1a:	e8 01       	movw	r28, r16
    4b1c:	88 83       	st	Y, r24
    4b1e:	9f 5f       	subi	r25, 0xFF	; 255
    4b20:	85 81       	ldd	r24, Z+5	; 0x05
    4b22:	98 23       	and	r25, r24
    4b24:	93 83       	std	Z+3, r25	; 0x03
    4b26:	11 96       	adiw	r26, 0x01	; 1
    4b28:	a4 17       	cp	r26, r20
    4b2a:	b5 07       	cpc	r27, r21
    4b2c:	11 f7       	brne	.-60     	; 0x4af2 <serial_sendBytes+0x48>
    4b2e:	d7 01       	movw	r26, r14
    4b30:	ed 91       	ld	r30, X+
    4b32:	fc 91       	ld	r31, X
    4b34:	35 97       	sbiw	r30, 0x05	; 5
    4b36:	80 81       	ld	r24, Z
    4b38:	80 62       	ori	r24, 0x20	; 32
    4b3a:	80 83       	st	Z, r24
    4b3c:	80 e0       	ldi	r24, 0x00	; 0
    4b3e:	03 c0       	rjmp	.+6      	; 0x4b46 <serial_sendBytes+0x9c>
    4b40:	81 e0       	ldi	r24, 0x01	; 1
    4b42:	01 c0       	rjmp	.+2      	; 0x4b46 <serial_sendBytes+0x9c>
    4b44:	82 e0       	ldi	r24, 0x02	; 2
    4b46:	df 91       	pop	r29
    4b48:	cf 91       	pop	r28
    4b4a:	1f 91       	pop	r17
    4b4c:	0f 91       	pop	r16
    4b4e:	ff 90       	pop	r15
    4b50:	ef 90       	pop	r14
    4b52:	08 95       	ret

00004b54 <serial_getByte>:
    4b54:	00 97       	sbiw	r24, 0x00	; 0
    4b56:	d1 f0       	breq	.+52     	; 0x4b8c <serial_getByte+0x38>
    4b58:	dc 01       	movw	r26, r24
    4b5a:	14 96       	adiw	r26, 0x04	; 4
    4b5c:	ed 91       	ld	r30, X+
    4b5e:	fc 91       	ld	r31, X
    4b60:	15 97       	sbiw	r26, 0x05	; 5
    4b62:	93 81       	ldd	r25, Z+3	; 0x03
    4b64:	82 81       	ldd	r24, Z+2	; 0x02
    4b66:	98 17       	cp	r25, r24
    4b68:	99 f0       	breq	.+38     	; 0x4b90 <serial_getByte+0x3c>
    4b6a:	92 81       	ldd	r25, Z+2	; 0x02
    4b6c:	85 81       	ldd	r24, Z+5	; 0x05
    4b6e:	86 95       	lsr	r24
    4b70:	89 23       	and	r24, r25
    4b72:	a0 81       	ld	r26, Z
    4b74:	b1 81       	ldd	r27, Z+1	; 0x01
    4b76:	a8 0f       	add	r26, r24
    4b78:	b1 1d       	adc	r27, r1
    4b7a:	8c 91       	ld	r24, X
    4b7c:	db 01       	movw	r26, r22
    4b7e:	8c 93       	st	X, r24
    4b80:	9f 5f       	subi	r25, 0xFF	; 255
    4b82:	85 81       	ldd	r24, Z+5	; 0x05
    4b84:	98 23       	and	r25, r24
    4b86:	92 83       	std	Z+2, r25	; 0x02
    4b88:	80 e0       	ldi	r24, 0x00	; 0
    4b8a:	08 95       	ret
    4b8c:	81 e0       	ldi	r24, 0x01	; 1
    4b8e:	08 95       	ret
    4b90:	83 e0       	ldi	r24, 0x03	; 3
    4b92:	08 95       	ret

00004b94 <__vector_25>:
    4b94:	1f 92       	push	r1
    4b96:	0f 92       	push	r0
    4b98:	0f b6       	in	r0, 0x3f	; 63
    4b9a:	0f 92       	push	r0
    4b9c:	11 24       	eor	r1, r1
    4b9e:	0b b6       	in	r0, 0x3b	; 59
    4ba0:	0f 92       	push	r0
    4ba2:	2f 93       	push	r18
    4ba4:	3f 93       	push	r19
    4ba6:	4f 93       	push	r20
    4ba8:	5f 93       	push	r21
    4baa:	6f 93       	push	r22
    4bac:	7f 93       	push	r23
    4bae:	8f 93       	push	r24
    4bb0:	9f 93       	push	r25
    4bb2:	af 93       	push	r26
    4bb4:	bf 93       	push	r27
    4bb6:	cf 93       	push	r28
    4bb8:	df 93       	push	r29
    4bba:	ef 93       	push	r30
    4bbc:	ff 93       	push	r31
    4bbe:	a0 91 51 17 	lds	r26, 0x1751	; 0x801751 <_ser_handle>
    4bc2:	b0 91 52 17 	lds	r27, 0x1752	; 0x801752 <_ser_handle+0x1>
    4bc6:	10 97       	sbiw	r26, 0x00	; 0
    4bc8:	11 f1       	breq	.+68     	; 0x4c0e <__vector_25+0x7a>
    4bca:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4bce:	14 96       	adiw	r26, 0x04	; 4
    4bd0:	ed 91       	ld	r30, X+
    4bd2:	fc 91       	ld	r31, X
    4bd4:	15 97       	sbiw	r26, 0x05	; 5
    4bd6:	93 81       	ldd	r25, Z+3	; 0x03
    4bd8:	82 81       	ldd	r24, Z+2	; 0x02
    4bda:	25 81       	ldd	r18, Z+5	; 0x05
    4bdc:	98 1b       	sub	r25, r24
    4bde:	92 23       	and	r25, r18
    4be0:	84 81       	ldd	r24, Z+4	; 0x04
    4be2:	98 17       	cp	r25, r24
    4be4:	61 f0       	breq	.+24     	; 0x4bfe <__vector_25+0x6a>
    4be6:	83 81       	ldd	r24, Z+3	; 0x03
    4be8:	26 95       	lsr	r18
    4bea:	28 23       	and	r18, r24
    4bec:	c0 81       	ld	r28, Z
    4bee:	d1 81       	ldd	r29, Z+1	; 0x01
    4bf0:	c2 0f       	add	r28, r18
    4bf2:	d1 1d       	adc	r29, r1
    4bf4:	68 83       	st	Y, r22
    4bf6:	8f 5f       	subi	r24, 0xFF	; 255
    4bf8:	95 81       	ldd	r25, Z+5	; 0x05
    4bfa:	89 23       	and	r24, r25
    4bfc:	83 83       	std	Z+3, r24	; 0x03
    4bfe:	16 96       	adiw	r26, 0x06	; 6
    4c00:	ed 91       	ld	r30, X+
    4c02:	fc 91       	ld	r31, X
    4c04:	17 97       	sbiw	r26, 0x07	; 7
    4c06:	30 97       	sbiw	r30, 0x00	; 0
    4c08:	11 f0       	breq	.+4      	; 0x4c0e <__vector_25+0x7a>
    4c0a:	cd 01       	movw	r24, r26
    4c0c:	19 95       	eicall
    4c0e:	ff 91       	pop	r31
    4c10:	ef 91       	pop	r30
    4c12:	df 91       	pop	r29
    4c14:	cf 91       	pop	r28
    4c16:	bf 91       	pop	r27
    4c18:	af 91       	pop	r26
    4c1a:	9f 91       	pop	r25
    4c1c:	8f 91       	pop	r24
    4c1e:	7f 91       	pop	r23
    4c20:	6f 91       	pop	r22
    4c22:	5f 91       	pop	r21
    4c24:	4f 91       	pop	r20
    4c26:	3f 91       	pop	r19
    4c28:	2f 91       	pop	r18
    4c2a:	0f 90       	pop	r0
    4c2c:	0b be       	out	0x3b, r0	; 59
    4c2e:	0f 90       	pop	r0
    4c30:	0f be       	out	0x3f, r0	; 63
    4c32:	0f 90       	pop	r0
    4c34:	1f 90       	pop	r1
    4c36:	18 95       	reti

00004c38 <__vector_26>:
    4c38:	1f 92       	push	r1
    4c3a:	0f 92       	push	r0
    4c3c:	0f b6       	in	r0, 0x3f	; 63
    4c3e:	0f 92       	push	r0
    4c40:	11 24       	eor	r1, r1
    4c42:	0b b6       	in	r0, 0x3b	; 59
    4c44:	0f 92       	push	r0
    4c46:	2f 93       	push	r18
    4c48:	8f 93       	push	r24
    4c4a:	9f 93       	push	r25
    4c4c:	af 93       	push	r26
    4c4e:	bf 93       	push	r27
    4c50:	ef 93       	push	r30
    4c52:	ff 93       	push	r31
    4c54:	e0 91 51 17 	lds	r30, 0x1751	; 0x801751 <_ser_handle>
    4c58:	f0 91 52 17 	lds	r31, 0x1752	; 0x801752 <_ser_handle+0x1>
    4c5c:	30 97       	sbiw	r30, 0x00	; 0
    4c5e:	b9 f0       	breq	.+46     	; 0x4c8e <__vector_26+0x56>
    4c60:	02 80       	ldd	r0, Z+2	; 0x02
    4c62:	f3 81       	ldd	r31, Z+3	; 0x03
    4c64:	e0 2d       	mov	r30, r0
    4c66:	93 81       	ldd	r25, Z+3	; 0x03
    4c68:	82 81       	ldd	r24, Z+2	; 0x02
    4c6a:	98 17       	cp	r25, r24
    4c6c:	b1 f0       	breq	.+44     	; 0x4c9a <__vector_26+0x62>
    4c6e:	92 81       	ldd	r25, Z+2	; 0x02
    4c70:	85 81       	ldd	r24, Z+5	; 0x05
    4c72:	28 2f       	mov	r18, r24
    4c74:	26 95       	lsr	r18
    4c76:	29 23       	and	r18, r25
    4c78:	a0 81       	ld	r26, Z
    4c7a:	b1 81       	ldd	r27, Z+1	; 0x01
    4c7c:	a2 0f       	add	r26, r18
    4c7e:	b1 1d       	adc	r27, r1
    4c80:	2c 91       	ld	r18, X
    4c82:	9f 5f       	subi	r25, 0xFF	; 255
    4c84:	89 23       	and	r24, r25
    4c86:	82 83       	std	Z+2, r24	; 0x02
    4c88:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4c8c:	0b c0       	rjmp	.+22     	; 0x4ca4 <__vector_26+0x6c>
    4c8e:	e1 ec       	ldi	r30, 0xC1	; 193
    4c90:	f0 e0       	ldi	r31, 0x00	; 0
    4c92:	80 81       	ld	r24, Z
    4c94:	8f 7d       	andi	r24, 0xDF	; 223
    4c96:	80 83       	st	Z, r24
    4c98:	05 c0       	rjmp	.+10     	; 0x4ca4 <__vector_26+0x6c>
    4c9a:	e1 ec       	ldi	r30, 0xC1	; 193
    4c9c:	f0 e0       	ldi	r31, 0x00	; 0
    4c9e:	80 81       	ld	r24, Z
    4ca0:	8f 7d       	andi	r24, 0xDF	; 223
    4ca2:	80 83       	st	Z, r24
    4ca4:	ff 91       	pop	r31
    4ca6:	ef 91       	pop	r30
    4ca8:	bf 91       	pop	r27
    4caa:	af 91       	pop	r26
    4cac:	9f 91       	pop	r25
    4cae:	8f 91       	pop	r24
    4cb0:	2f 91       	pop	r18
    4cb2:	0f 90       	pop	r0
    4cb4:	0b be       	out	0x3b, r0	; 59
    4cb6:	0f 90       	pop	r0
    4cb8:	0f be       	out	0x3f, r0	; 63
    4cba:	0f 90       	pop	r0
    4cbc:	1f 90       	pop	r1
    4cbe:	18 95       	reti

00004cc0 <__vector_36>:
    4cc0:	1f 92       	push	r1
    4cc2:	0f 92       	push	r0
    4cc4:	0f b6       	in	r0, 0x3f	; 63
    4cc6:	0f 92       	push	r0
    4cc8:	11 24       	eor	r1, r1
    4cca:	0b b6       	in	r0, 0x3b	; 59
    4ccc:	0f 92       	push	r0
    4cce:	2f 93       	push	r18
    4cd0:	3f 93       	push	r19
    4cd2:	4f 93       	push	r20
    4cd4:	5f 93       	push	r21
    4cd6:	6f 93       	push	r22
    4cd8:	7f 93       	push	r23
    4cda:	8f 93       	push	r24
    4cdc:	9f 93       	push	r25
    4cde:	af 93       	push	r26
    4ce0:	bf 93       	push	r27
    4ce2:	cf 93       	push	r28
    4ce4:	df 93       	push	r29
    4ce6:	ef 93       	push	r30
    4ce8:	ff 93       	push	r31
    4cea:	a0 91 53 17 	lds	r26, 0x1753	; 0x801753 <_ser_handle+0x2>
    4cee:	b0 91 54 17 	lds	r27, 0x1754	; 0x801754 <_ser_handle+0x3>
    4cf2:	10 97       	sbiw	r26, 0x00	; 0
    4cf4:	11 f1       	breq	.+68     	; 0x4d3a <__vector_36+0x7a>
    4cf6:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4cfa:	14 96       	adiw	r26, 0x04	; 4
    4cfc:	ed 91       	ld	r30, X+
    4cfe:	fc 91       	ld	r31, X
    4d00:	15 97       	sbiw	r26, 0x05	; 5
    4d02:	93 81       	ldd	r25, Z+3	; 0x03
    4d04:	82 81       	ldd	r24, Z+2	; 0x02
    4d06:	25 81       	ldd	r18, Z+5	; 0x05
    4d08:	98 1b       	sub	r25, r24
    4d0a:	92 23       	and	r25, r18
    4d0c:	84 81       	ldd	r24, Z+4	; 0x04
    4d0e:	98 17       	cp	r25, r24
    4d10:	61 f0       	breq	.+24     	; 0x4d2a <__vector_36+0x6a>
    4d12:	83 81       	ldd	r24, Z+3	; 0x03
    4d14:	26 95       	lsr	r18
    4d16:	28 23       	and	r18, r24
    4d18:	c0 81       	ld	r28, Z
    4d1a:	d1 81       	ldd	r29, Z+1	; 0x01
    4d1c:	c2 0f       	add	r28, r18
    4d1e:	d1 1d       	adc	r29, r1
    4d20:	68 83       	st	Y, r22
    4d22:	8f 5f       	subi	r24, 0xFF	; 255
    4d24:	95 81       	ldd	r25, Z+5	; 0x05
    4d26:	89 23       	and	r24, r25
    4d28:	83 83       	std	Z+3, r24	; 0x03
    4d2a:	16 96       	adiw	r26, 0x06	; 6
    4d2c:	ed 91       	ld	r30, X+
    4d2e:	fc 91       	ld	r31, X
    4d30:	17 97       	sbiw	r26, 0x07	; 7
    4d32:	30 97       	sbiw	r30, 0x00	; 0
    4d34:	11 f0       	breq	.+4      	; 0x4d3a <__vector_36+0x7a>
    4d36:	cd 01       	movw	r24, r26
    4d38:	19 95       	eicall
    4d3a:	ff 91       	pop	r31
    4d3c:	ef 91       	pop	r30
    4d3e:	df 91       	pop	r29
    4d40:	cf 91       	pop	r28
    4d42:	bf 91       	pop	r27
    4d44:	af 91       	pop	r26
    4d46:	9f 91       	pop	r25
    4d48:	8f 91       	pop	r24
    4d4a:	7f 91       	pop	r23
    4d4c:	6f 91       	pop	r22
    4d4e:	5f 91       	pop	r21
    4d50:	4f 91       	pop	r20
    4d52:	3f 91       	pop	r19
    4d54:	2f 91       	pop	r18
    4d56:	0f 90       	pop	r0
    4d58:	0b be       	out	0x3b, r0	; 59
    4d5a:	0f 90       	pop	r0
    4d5c:	0f be       	out	0x3f, r0	; 63
    4d5e:	0f 90       	pop	r0
    4d60:	1f 90       	pop	r1
    4d62:	18 95       	reti

00004d64 <__vector_37>:
    4d64:	1f 92       	push	r1
    4d66:	0f 92       	push	r0
    4d68:	0f b6       	in	r0, 0x3f	; 63
    4d6a:	0f 92       	push	r0
    4d6c:	11 24       	eor	r1, r1
    4d6e:	0b b6       	in	r0, 0x3b	; 59
    4d70:	0f 92       	push	r0
    4d72:	2f 93       	push	r18
    4d74:	8f 93       	push	r24
    4d76:	9f 93       	push	r25
    4d78:	af 93       	push	r26
    4d7a:	bf 93       	push	r27
    4d7c:	ef 93       	push	r30
    4d7e:	ff 93       	push	r31
    4d80:	e0 91 53 17 	lds	r30, 0x1753	; 0x801753 <_ser_handle+0x2>
    4d84:	f0 91 54 17 	lds	r31, 0x1754	; 0x801754 <_ser_handle+0x3>
    4d88:	30 97       	sbiw	r30, 0x00	; 0
    4d8a:	b9 f0       	breq	.+46     	; 0x4dba <__vector_37+0x56>
    4d8c:	02 80       	ldd	r0, Z+2	; 0x02
    4d8e:	f3 81       	ldd	r31, Z+3	; 0x03
    4d90:	e0 2d       	mov	r30, r0
    4d92:	93 81       	ldd	r25, Z+3	; 0x03
    4d94:	82 81       	ldd	r24, Z+2	; 0x02
    4d96:	98 17       	cp	r25, r24
    4d98:	b1 f0       	breq	.+44     	; 0x4dc6 <__vector_37+0x62>
    4d9a:	92 81       	ldd	r25, Z+2	; 0x02
    4d9c:	85 81       	ldd	r24, Z+5	; 0x05
    4d9e:	28 2f       	mov	r18, r24
    4da0:	26 95       	lsr	r18
    4da2:	29 23       	and	r18, r25
    4da4:	a0 81       	ld	r26, Z
    4da6:	b1 81       	ldd	r27, Z+1	; 0x01
    4da8:	a2 0f       	add	r26, r18
    4daa:	b1 1d       	adc	r27, r1
    4dac:	2c 91       	ld	r18, X
    4dae:	9f 5f       	subi	r25, 0xFF	; 255
    4db0:	89 23       	and	r24, r25
    4db2:	82 83       	std	Z+2, r24	; 0x02
    4db4:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4db8:	0b c0       	rjmp	.+22     	; 0x4dd0 <__vector_37+0x6c>
    4dba:	e9 ec       	ldi	r30, 0xC9	; 201
    4dbc:	f0 e0       	ldi	r31, 0x00	; 0
    4dbe:	80 81       	ld	r24, Z
    4dc0:	8f 7d       	andi	r24, 0xDF	; 223
    4dc2:	80 83       	st	Z, r24
    4dc4:	05 c0       	rjmp	.+10     	; 0x4dd0 <__vector_37+0x6c>
    4dc6:	e9 ec       	ldi	r30, 0xC9	; 201
    4dc8:	f0 e0       	ldi	r31, 0x00	; 0
    4dca:	80 81       	ld	r24, Z
    4dcc:	8f 7d       	andi	r24, 0xDF	; 223
    4dce:	80 83       	st	Z, r24
    4dd0:	ff 91       	pop	r31
    4dd2:	ef 91       	pop	r30
    4dd4:	bf 91       	pop	r27
    4dd6:	af 91       	pop	r26
    4dd8:	9f 91       	pop	r25
    4dda:	8f 91       	pop	r24
    4ddc:	2f 91       	pop	r18
    4dde:	0f 90       	pop	r0
    4de0:	0b be       	out	0x3b, r0	; 59
    4de2:	0f 90       	pop	r0
    4de4:	0f be       	out	0x3f, r0	; 63
    4de6:	0f 90       	pop	r0
    4de8:	1f 90       	pop	r1
    4dea:	18 95       	reti

00004dec <__vector_51>:
    4dec:	1f 92       	push	r1
    4dee:	0f 92       	push	r0
    4df0:	0f b6       	in	r0, 0x3f	; 63
    4df2:	0f 92       	push	r0
    4df4:	11 24       	eor	r1, r1
    4df6:	0b b6       	in	r0, 0x3b	; 59
    4df8:	0f 92       	push	r0
    4dfa:	2f 93       	push	r18
    4dfc:	3f 93       	push	r19
    4dfe:	4f 93       	push	r20
    4e00:	5f 93       	push	r21
    4e02:	6f 93       	push	r22
    4e04:	7f 93       	push	r23
    4e06:	8f 93       	push	r24
    4e08:	9f 93       	push	r25
    4e0a:	af 93       	push	r26
    4e0c:	bf 93       	push	r27
    4e0e:	cf 93       	push	r28
    4e10:	df 93       	push	r29
    4e12:	ef 93       	push	r30
    4e14:	ff 93       	push	r31
    4e16:	a0 91 55 17 	lds	r26, 0x1755	; 0x801755 <_ser_handle+0x4>
    4e1a:	b0 91 56 17 	lds	r27, 0x1756	; 0x801756 <_ser_handle+0x5>
    4e1e:	10 97       	sbiw	r26, 0x00	; 0
    4e20:	11 f1       	breq	.+68     	; 0x4e66 <__vector_51+0x7a>
    4e22:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4e26:	14 96       	adiw	r26, 0x04	; 4
    4e28:	ed 91       	ld	r30, X+
    4e2a:	fc 91       	ld	r31, X
    4e2c:	15 97       	sbiw	r26, 0x05	; 5
    4e2e:	93 81       	ldd	r25, Z+3	; 0x03
    4e30:	82 81       	ldd	r24, Z+2	; 0x02
    4e32:	25 81       	ldd	r18, Z+5	; 0x05
    4e34:	98 1b       	sub	r25, r24
    4e36:	92 23       	and	r25, r18
    4e38:	84 81       	ldd	r24, Z+4	; 0x04
    4e3a:	98 17       	cp	r25, r24
    4e3c:	61 f0       	breq	.+24     	; 0x4e56 <__vector_51+0x6a>
    4e3e:	83 81       	ldd	r24, Z+3	; 0x03
    4e40:	26 95       	lsr	r18
    4e42:	28 23       	and	r18, r24
    4e44:	c0 81       	ld	r28, Z
    4e46:	d1 81       	ldd	r29, Z+1	; 0x01
    4e48:	c2 0f       	add	r28, r18
    4e4a:	d1 1d       	adc	r29, r1
    4e4c:	68 83       	st	Y, r22
    4e4e:	8f 5f       	subi	r24, 0xFF	; 255
    4e50:	95 81       	ldd	r25, Z+5	; 0x05
    4e52:	89 23       	and	r24, r25
    4e54:	83 83       	std	Z+3, r24	; 0x03
    4e56:	16 96       	adiw	r26, 0x06	; 6
    4e58:	ed 91       	ld	r30, X+
    4e5a:	fc 91       	ld	r31, X
    4e5c:	17 97       	sbiw	r26, 0x07	; 7
    4e5e:	30 97       	sbiw	r30, 0x00	; 0
    4e60:	11 f0       	breq	.+4      	; 0x4e66 <__vector_51+0x7a>
    4e62:	cd 01       	movw	r24, r26
    4e64:	19 95       	eicall
    4e66:	ff 91       	pop	r31
    4e68:	ef 91       	pop	r30
    4e6a:	df 91       	pop	r29
    4e6c:	cf 91       	pop	r28
    4e6e:	bf 91       	pop	r27
    4e70:	af 91       	pop	r26
    4e72:	9f 91       	pop	r25
    4e74:	8f 91       	pop	r24
    4e76:	7f 91       	pop	r23
    4e78:	6f 91       	pop	r22
    4e7a:	5f 91       	pop	r21
    4e7c:	4f 91       	pop	r20
    4e7e:	3f 91       	pop	r19
    4e80:	2f 91       	pop	r18
    4e82:	0f 90       	pop	r0
    4e84:	0b be       	out	0x3b, r0	; 59
    4e86:	0f 90       	pop	r0
    4e88:	0f be       	out	0x3f, r0	; 63
    4e8a:	0f 90       	pop	r0
    4e8c:	1f 90       	pop	r1
    4e8e:	18 95       	reti

00004e90 <__vector_52>:
    4e90:	1f 92       	push	r1
    4e92:	0f 92       	push	r0
    4e94:	0f b6       	in	r0, 0x3f	; 63
    4e96:	0f 92       	push	r0
    4e98:	11 24       	eor	r1, r1
    4e9a:	0b b6       	in	r0, 0x3b	; 59
    4e9c:	0f 92       	push	r0
    4e9e:	2f 93       	push	r18
    4ea0:	8f 93       	push	r24
    4ea2:	9f 93       	push	r25
    4ea4:	af 93       	push	r26
    4ea6:	bf 93       	push	r27
    4ea8:	ef 93       	push	r30
    4eaa:	ff 93       	push	r31
    4eac:	e0 91 55 17 	lds	r30, 0x1755	; 0x801755 <_ser_handle+0x4>
    4eb0:	f0 91 56 17 	lds	r31, 0x1756	; 0x801756 <_ser_handle+0x5>
    4eb4:	30 97       	sbiw	r30, 0x00	; 0
    4eb6:	b9 f0       	breq	.+46     	; 0x4ee6 <__vector_52+0x56>
    4eb8:	02 80       	ldd	r0, Z+2	; 0x02
    4eba:	f3 81       	ldd	r31, Z+3	; 0x03
    4ebc:	e0 2d       	mov	r30, r0
    4ebe:	93 81       	ldd	r25, Z+3	; 0x03
    4ec0:	82 81       	ldd	r24, Z+2	; 0x02
    4ec2:	98 17       	cp	r25, r24
    4ec4:	b1 f0       	breq	.+44     	; 0x4ef2 <__vector_52+0x62>
    4ec6:	92 81       	ldd	r25, Z+2	; 0x02
    4ec8:	85 81       	ldd	r24, Z+5	; 0x05
    4eca:	28 2f       	mov	r18, r24
    4ecc:	26 95       	lsr	r18
    4ece:	29 23       	and	r18, r25
    4ed0:	a0 81       	ld	r26, Z
    4ed2:	b1 81       	ldd	r27, Z+1	; 0x01
    4ed4:	a2 0f       	add	r26, r18
    4ed6:	b1 1d       	adc	r27, r1
    4ed8:	2c 91       	ld	r18, X
    4eda:	9f 5f       	subi	r25, 0xFF	; 255
    4edc:	89 23       	and	r24, r25
    4ede:	82 83       	std	Z+2, r24	; 0x02
    4ee0:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4ee4:	0b c0       	rjmp	.+22     	; 0x4efc <__vector_52+0x6c>
    4ee6:	e1 ed       	ldi	r30, 0xD1	; 209
    4ee8:	f0 e0       	ldi	r31, 0x00	; 0
    4eea:	80 81       	ld	r24, Z
    4eec:	8f 7d       	andi	r24, 0xDF	; 223
    4eee:	80 83       	st	Z, r24
    4ef0:	05 c0       	rjmp	.+10     	; 0x4efc <__vector_52+0x6c>
    4ef2:	e1 ed       	ldi	r30, 0xD1	; 209
    4ef4:	f0 e0       	ldi	r31, 0x00	; 0
    4ef6:	80 81       	ld	r24, Z
    4ef8:	8f 7d       	andi	r24, 0xDF	; 223
    4efa:	80 83       	st	Z, r24
    4efc:	ff 91       	pop	r31
    4efe:	ef 91       	pop	r30
    4f00:	bf 91       	pop	r27
    4f02:	af 91       	pop	r26
    4f04:	9f 91       	pop	r25
    4f06:	8f 91       	pop	r24
    4f08:	2f 91       	pop	r18
    4f0a:	0f 90       	pop	r0
    4f0c:	0b be       	out	0x3b, r0	; 59
    4f0e:	0f 90       	pop	r0
    4f10:	0f be       	out	0x3f, r0	; 63
    4f12:	0f 90       	pop	r0
    4f14:	1f 90       	pop	r1
    4f16:	18 95       	reti

00004f18 <__vector_54>:
    4f18:	1f 92       	push	r1
    4f1a:	0f 92       	push	r0
    4f1c:	0f b6       	in	r0, 0x3f	; 63
    4f1e:	0f 92       	push	r0
    4f20:	11 24       	eor	r1, r1
    4f22:	0b b6       	in	r0, 0x3b	; 59
    4f24:	0f 92       	push	r0
    4f26:	2f 93       	push	r18
    4f28:	3f 93       	push	r19
    4f2a:	4f 93       	push	r20
    4f2c:	5f 93       	push	r21
    4f2e:	6f 93       	push	r22
    4f30:	7f 93       	push	r23
    4f32:	8f 93       	push	r24
    4f34:	9f 93       	push	r25
    4f36:	af 93       	push	r26
    4f38:	bf 93       	push	r27
    4f3a:	cf 93       	push	r28
    4f3c:	df 93       	push	r29
    4f3e:	ef 93       	push	r30
    4f40:	ff 93       	push	r31
    4f42:	a0 91 57 17 	lds	r26, 0x1757	; 0x801757 <_ser_handle+0x6>
    4f46:	b0 91 58 17 	lds	r27, 0x1758	; 0x801758 <_ser_handle+0x7>
    4f4a:	10 97       	sbiw	r26, 0x00	; 0
    4f4c:	11 f1       	breq	.+68     	; 0x4f92 <__vector_54+0x7a>
    4f4e:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4f52:	14 96       	adiw	r26, 0x04	; 4
    4f54:	ed 91       	ld	r30, X+
    4f56:	fc 91       	ld	r31, X
    4f58:	15 97       	sbiw	r26, 0x05	; 5
    4f5a:	93 81       	ldd	r25, Z+3	; 0x03
    4f5c:	82 81       	ldd	r24, Z+2	; 0x02
    4f5e:	25 81       	ldd	r18, Z+5	; 0x05
    4f60:	98 1b       	sub	r25, r24
    4f62:	92 23       	and	r25, r18
    4f64:	84 81       	ldd	r24, Z+4	; 0x04
    4f66:	98 17       	cp	r25, r24
    4f68:	61 f0       	breq	.+24     	; 0x4f82 <__vector_54+0x6a>
    4f6a:	83 81       	ldd	r24, Z+3	; 0x03
    4f6c:	26 95       	lsr	r18
    4f6e:	28 23       	and	r18, r24
    4f70:	c0 81       	ld	r28, Z
    4f72:	d1 81       	ldd	r29, Z+1	; 0x01
    4f74:	c2 0f       	add	r28, r18
    4f76:	d1 1d       	adc	r29, r1
    4f78:	68 83       	st	Y, r22
    4f7a:	8f 5f       	subi	r24, 0xFF	; 255
    4f7c:	95 81       	ldd	r25, Z+5	; 0x05
    4f7e:	89 23       	and	r24, r25
    4f80:	83 83       	std	Z+3, r24	; 0x03
    4f82:	16 96       	adiw	r26, 0x06	; 6
    4f84:	ed 91       	ld	r30, X+
    4f86:	fc 91       	ld	r31, X
    4f88:	17 97       	sbiw	r26, 0x07	; 7
    4f8a:	30 97       	sbiw	r30, 0x00	; 0
    4f8c:	11 f0       	breq	.+4      	; 0x4f92 <__vector_54+0x7a>
    4f8e:	cd 01       	movw	r24, r26
    4f90:	19 95       	eicall
    4f92:	ff 91       	pop	r31
    4f94:	ef 91       	pop	r30
    4f96:	df 91       	pop	r29
    4f98:	cf 91       	pop	r28
    4f9a:	bf 91       	pop	r27
    4f9c:	af 91       	pop	r26
    4f9e:	9f 91       	pop	r25
    4fa0:	8f 91       	pop	r24
    4fa2:	7f 91       	pop	r23
    4fa4:	6f 91       	pop	r22
    4fa6:	5f 91       	pop	r21
    4fa8:	4f 91       	pop	r20
    4faa:	3f 91       	pop	r19
    4fac:	2f 91       	pop	r18
    4fae:	0f 90       	pop	r0
    4fb0:	0b be       	out	0x3b, r0	; 59
    4fb2:	0f 90       	pop	r0
    4fb4:	0f be       	out	0x3f, r0	; 63
    4fb6:	0f 90       	pop	r0
    4fb8:	1f 90       	pop	r1
    4fba:	18 95       	reti

00004fbc <__vector_55>:
    4fbc:	1f 92       	push	r1
    4fbe:	0f 92       	push	r0
    4fc0:	0f b6       	in	r0, 0x3f	; 63
    4fc2:	0f 92       	push	r0
    4fc4:	11 24       	eor	r1, r1
    4fc6:	0b b6       	in	r0, 0x3b	; 59
    4fc8:	0f 92       	push	r0
    4fca:	2f 93       	push	r18
    4fcc:	8f 93       	push	r24
    4fce:	9f 93       	push	r25
    4fd0:	af 93       	push	r26
    4fd2:	bf 93       	push	r27
    4fd4:	ef 93       	push	r30
    4fd6:	ff 93       	push	r31
    4fd8:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <_ser_handle+0x6>
    4fdc:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <_ser_handle+0x7>
    4fe0:	30 97       	sbiw	r30, 0x00	; 0
    4fe2:	b9 f0       	breq	.+46     	; 0x5012 <__vector_55+0x56>
    4fe4:	02 80       	ldd	r0, Z+2	; 0x02
    4fe6:	f3 81       	ldd	r31, Z+3	; 0x03
    4fe8:	e0 2d       	mov	r30, r0
    4fea:	93 81       	ldd	r25, Z+3	; 0x03
    4fec:	82 81       	ldd	r24, Z+2	; 0x02
    4fee:	98 17       	cp	r25, r24
    4ff0:	b1 f0       	breq	.+44     	; 0x501e <__vector_55+0x62>
    4ff2:	92 81       	ldd	r25, Z+2	; 0x02
    4ff4:	85 81       	ldd	r24, Z+5	; 0x05
    4ff6:	28 2f       	mov	r18, r24
    4ff8:	26 95       	lsr	r18
    4ffa:	29 23       	and	r18, r25
    4ffc:	a0 81       	ld	r26, Z
    4ffe:	b1 81       	ldd	r27, Z+1	; 0x01
    5000:	a2 0f       	add	r26, r18
    5002:	b1 1d       	adc	r27, r1
    5004:	2c 91       	ld	r18, X
    5006:	9f 5f       	subi	r25, 0xFF	; 255
    5008:	89 23       	and	r24, r25
    500a:	82 83       	std	Z+2, r24	; 0x02
    500c:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5010:	0b c0       	rjmp	.+22     	; 0x5028 <__vector_55+0x6c>
    5012:	e1 e3       	ldi	r30, 0x31	; 49
    5014:	f1 e0       	ldi	r31, 0x01	; 1
    5016:	80 81       	ld	r24, Z
    5018:	8f 7d       	andi	r24, 0xDF	; 223
    501a:	80 83       	st	Z, r24
    501c:	05 c0       	rjmp	.+10     	; 0x5028 <__vector_55+0x6c>
    501e:	e1 e3       	ldi	r30, 0x31	; 49
    5020:	f1 e0       	ldi	r31, 0x01	; 1
    5022:	80 81       	ld	r24, Z
    5024:	8f 7d       	andi	r24, 0xDF	; 223
    5026:	80 83       	st	Z, r24
    5028:	ff 91       	pop	r31
    502a:	ef 91       	pop	r30
    502c:	bf 91       	pop	r27
    502e:	af 91       	pop	r26
    5030:	9f 91       	pop	r25
    5032:	8f 91       	pop	r24
    5034:	2f 91       	pop	r18
    5036:	0f 90       	pop	r0
    5038:	0b be       	out	0x3b, r0	; 59
    503a:	0f 90       	pop	r0
    503c:	0f be       	out	0x3f, r0	; 63
    503e:	0f 90       	pop	r0
    5040:	1f 90       	pop	r1
    5042:	18 95       	reti

00005044 <usart_getchar>:
    5044:	cf 93       	push	r28
    5046:	df 93       	push	r29
    5048:	1f 92       	push	r1
    504a:	cd b7       	in	r28, 0x3d	; 61
    504c:	de b7       	in	r29, 0x3e	; 62
    504e:	be 01       	movw	r22, r28
    5050:	6f 5f       	subi	r22, 0xFF	; 255
    5052:	7f 4f       	sbci	r23, 0xFF	; 255
    5054:	80 91 59 17 	lds	r24, 0x1759	; 0x801759 <_com_serial_instance>
    5058:	90 91 5a 17 	lds	r25, 0x175A	; 0x80175a <_com_serial_instance+0x1>
    505c:	7b dd       	rcall	.-1290   	; 0x4b54 <serial_getByte>
    505e:	81 11       	cpse	r24, r1
    5060:	f6 cf       	rjmp	.-20     	; 0x504e <usart_getchar+0xa>
    5062:	89 81       	ldd	r24, Y+1	; 0x01
    5064:	90 e0       	ldi	r25, 0x00	; 0
    5066:	0f 90       	pop	r0
    5068:	df 91       	pop	r29
    506a:	cf 91       	pop	r28
    506c:	08 95       	ret

0000506e <usart_putchar>:
    506e:	68 2f       	mov	r22, r24
    5070:	80 91 59 17 	lds	r24, 0x1759	; 0x801759 <_com_serial_instance>
    5074:	90 91 5a 17 	lds	r25, 0x175A	; 0x80175a <_com_serial_instance+0x1>
    5078:	ed dc       	rcall	.-1574   	; 0x4a54 <serial_sendByte>
    507a:	80 e0       	ldi	r24, 0x00	; 0
    507c:	90 e0       	ldi	r25, 0x00	; 0
    507e:	08 95       	ret

00005080 <stdio_initialise>:
    5080:	8f 92       	push	r8
    5082:	9f 92       	push	r9
    5084:	af 92       	push	r10
    5086:	cf 92       	push	r12
    5088:	ef 92       	push	r14
    508a:	0f 93       	push	r16
    508c:	81 2c       	mov	r8, r1
    508e:	91 2c       	mov	r9, r1
    5090:	68 94       	set
    5092:	aa 24       	eor	r10, r10
    5094:	a7 f8       	bld	r10, 7
    5096:	68 94       	set
    5098:	cc 24       	eor	r12, r12
    509a:	c7 f8       	bld	r12, 7
    509c:	e1 2c       	mov	r14, r1
    509e:	00 e0       	ldi	r16, 0x00	; 0
    50a0:	23 e0       	ldi	r18, 0x03	; 3
    50a2:	40 e0       	ldi	r20, 0x00	; 0
    50a4:	51 ee       	ldi	r21, 0xE1	; 225
    50a6:	60 e0       	ldi	r22, 0x00	; 0
    50a8:	70 e0       	ldi	r23, 0x00	; 0
    50aa:	32 dc       	rcall	.-1948   	; 0x4910 <serial_create>
    50ac:	90 93 5a 17 	sts	0x175A, r25	; 0x80175a <_com_serial_instance+0x1>
    50b0:	80 93 59 17 	sts	0x1759, r24	; 0x801759 <_com_serial_instance>
    50b4:	e6 e9       	ldi	r30, 0x96	; 150
    50b6:	f7 e1       	ldi	r31, 0x17	; 23
    50b8:	83 e1       	ldi	r24, 0x13	; 19
    50ba:	92 e0       	ldi	r25, 0x02	; 2
    50bc:	91 83       	std	Z+1, r25	; 0x01
    50be:	80 83       	st	Z, r24
    50c0:	93 83       	std	Z+3, r25	; 0x03
    50c2:	82 83       	std	Z+2, r24	; 0x02
    50c4:	0f 91       	pop	r16
    50c6:	ef 90       	pop	r14
    50c8:	cf 90       	pop	r12
    50ca:	af 90       	pop	r10
    50cc:	9f 90       	pop	r9
    50ce:	8f 90       	pop	r8
    50d0:	08 95       	ret

000050d2 <_turn_off>:
    50d2:	90 e0       	ldi	r25, 0x00	; 0
    50d4:	fc 01       	movw	r30, r24
    50d6:	ee 0f       	add	r30, r30
    50d8:	ff 1f       	adc	r31, r31
    50da:	e8 0f       	add	r30, r24
    50dc:	f9 1f       	adc	r31, r25
    50de:	ee 0f       	add	r30, r30
    50e0:	ff 1f       	adc	r31, r31
    50e2:	e5 5a       	subi	r30, 0xA5	; 165
    50e4:	f8 4e       	sbci	r31, 0xE8	; 232
    50e6:	23 81       	ldd	r18, Z+3	; 0x03
    50e8:	21 11       	cpse	r18, r1
    50ea:	1f c0       	rjmp	.+62     	; 0x512a <_turn_off+0x58>
    50ec:	9c 01       	movw	r18, r24
    50ee:	22 0f       	add	r18, r18
    50f0:	33 1f       	adc	r19, r19
    50f2:	f9 01       	movw	r30, r18
    50f4:	e8 0f       	add	r30, r24
    50f6:	f9 1f       	adc	r31, r25
    50f8:	ee 0f       	add	r30, r30
    50fa:	ff 1f       	adc	r31, r31
    50fc:	e5 5a       	subi	r30, 0xA5	; 165
    50fe:	f8 4e       	sbci	r31, 0xE8	; 232
    5100:	a0 81       	ld	r26, Z
    5102:	b1 81       	ldd	r27, Z+1	; 0x01
    5104:	4c 91       	ld	r20, X
    5106:	f9 01       	movw	r30, r18
    5108:	e8 0f       	add	r30, r24
    510a:	f9 1f       	adc	r31, r25
    510c:	ee 0f       	add	r30, r30
    510e:	ff 1f       	adc	r31, r31
    5110:	e5 5a       	subi	r30, 0xA5	; 165
    5112:	f8 4e       	sbci	r31, 0xE8	; 232
    5114:	81 e0       	ldi	r24, 0x01	; 1
    5116:	90 e0       	ldi	r25, 0x00	; 0
    5118:	02 80       	ldd	r0, Z+2	; 0x02
    511a:	02 c0       	rjmp	.+4      	; 0x5120 <_turn_off+0x4e>
    511c:	88 0f       	add	r24, r24
    511e:	99 1f       	adc	r25, r25
    5120:	0a 94       	dec	r0
    5122:	e2 f7       	brpl	.-8      	; 0x511c <_turn_off+0x4a>
    5124:	84 2b       	or	r24, r20
    5126:	8c 93       	st	X, r24
    5128:	08 95       	ret
    512a:	fc 01       	movw	r30, r24
    512c:	ee 0f       	add	r30, r30
    512e:	ff 1f       	adc	r31, r31
    5130:	df 01       	movw	r26, r30
    5132:	a8 0f       	add	r26, r24
    5134:	b9 1f       	adc	r27, r25
    5136:	aa 0f       	add	r26, r26
    5138:	bb 1f       	adc	r27, r27
    513a:	a5 5a       	subi	r26, 0xA5	; 165
    513c:	b8 4e       	sbci	r27, 0xE8	; 232
    513e:	0d 90       	ld	r0, X+
    5140:	bc 91       	ld	r27, X
    5142:	a0 2d       	mov	r26, r0
    5144:	2c 91       	ld	r18, X
    5146:	e8 0f       	add	r30, r24
    5148:	f9 1f       	adc	r31, r25
    514a:	ee 0f       	add	r30, r30
    514c:	ff 1f       	adc	r31, r31
    514e:	e5 5a       	subi	r30, 0xA5	; 165
    5150:	f8 4e       	sbci	r31, 0xE8	; 232
    5152:	81 e0       	ldi	r24, 0x01	; 1
    5154:	90 e0       	ldi	r25, 0x00	; 0
    5156:	02 80       	ldd	r0, Z+2	; 0x02
    5158:	02 c0       	rjmp	.+4      	; 0x515e <_turn_off+0x8c>
    515a:	88 0f       	add	r24, r24
    515c:	99 1f       	adc	r25, r25
    515e:	0a 94       	dec	r0
    5160:	e2 f7       	brpl	.-8      	; 0x515a <_turn_off+0x88>
    5162:	80 95       	com	r24
    5164:	82 23       	and	r24, r18
    5166:	8c 93       	st	X, r24
    5168:	08 95       	ret

0000516a <_turn_on>:
    516a:	90 e0       	ldi	r25, 0x00	; 0
    516c:	fc 01       	movw	r30, r24
    516e:	ee 0f       	add	r30, r30
    5170:	ff 1f       	adc	r31, r31
    5172:	e8 0f       	add	r30, r24
    5174:	f9 1f       	adc	r31, r25
    5176:	ee 0f       	add	r30, r30
    5178:	ff 1f       	adc	r31, r31
    517a:	e5 5a       	subi	r30, 0xA5	; 165
    517c:	f8 4e       	sbci	r31, 0xE8	; 232
    517e:	23 81       	ldd	r18, Z+3	; 0x03
    5180:	21 11       	cpse	r18, r1
    5182:	20 c0       	rjmp	.+64     	; 0x51c4 <_turn_on+0x5a>
    5184:	9c 01       	movw	r18, r24
    5186:	22 0f       	add	r18, r18
    5188:	33 1f       	adc	r19, r19
    518a:	f9 01       	movw	r30, r18
    518c:	e8 0f       	add	r30, r24
    518e:	f9 1f       	adc	r31, r25
    5190:	ee 0f       	add	r30, r30
    5192:	ff 1f       	adc	r31, r31
    5194:	e5 5a       	subi	r30, 0xA5	; 165
    5196:	f8 4e       	sbci	r31, 0xE8	; 232
    5198:	a0 81       	ld	r26, Z
    519a:	b1 81       	ldd	r27, Z+1	; 0x01
    519c:	4c 91       	ld	r20, X
    519e:	f9 01       	movw	r30, r18
    51a0:	e8 0f       	add	r30, r24
    51a2:	f9 1f       	adc	r31, r25
    51a4:	ee 0f       	add	r30, r30
    51a6:	ff 1f       	adc	r31, r31
    51a8:	e5 5a       	subi	r30, 0xA5	; 165
    51aa:	f8 4e       	sbci	r31, 0xE8	; 232
    51ac:	81 e0       	ldi	r24, 0x01	; 1
    51ae:	90 e0       	ldi	r25, 0x00	; 0
    51b0:	02 80       	ldd	r0, Z+2	; 0x02
    51b2:	02 c0       	rjmp	.+4      	; 0x51b8 <_turn_on+0x4e>
    51b4:	88 0f       	add	r24, r24
    51b6:	99 1f       	adc	r25, r25
    51b8:	0a 94       	dec	r0
    51ba:	e2 f7       	brpl	.-8      	; 0x51b4 <_turn_on+0x4a>
    51bc:	80 95       	com	r24
    51be:	84 23       	and	r24, r20
    51c0:	8c 93       	st	X, r24
    51c2:	08 95       	ret
    51c4:	fc 01       	movw	r30, r24
    51c6:	ee 0f       	add	r30, r30
    51c8:	ff 1f       	adc	r31, r31
    51ca:	df 01       	movw	r26, r30
    51cc:	a8 0f       	add	r26, r24
    51ce:	b9 1f       	adc	r27, r25
    51d0:	aa 0f       	add	r26, r26
    51d2:	bb 1f       	adc	r27, r27
    51d4:	a5 5a       	subi	r26, 0xA5	; 165
    51d6:	b8 4e       	sbci	r27, 0xE8	; 232
    51d8:	0d 90       	ld	r0, X+
    51da:	bc 91       	ld	r27, X
    51dc:	a0 2d       	mov	r26, r0
    51de:	2c 91       	ld	r18, X
    51e0:	e8 0f       	add	r30, r24
    51e2:	f9 1f       	adc	r31, r25
    51e4:	ee 0f       	add	r30, r30
    51e6:	ff 1f       	adc	r31, r31
    51e8:	e5 5a       	subi	r30, 0xA5	; 165
    51ea:	f8 4e       	sbci	r31, 0xE8	; 232
    51ec:	81 e0       	ldi	r24, 0x01	; 1
    51ee:	90 e0       	ldi	r25, 0x00	; 0
    51f0:	02 80       	ldd	r0, Z+2	; 0x02
    51f2:	02 c0       	rjmp	.+4      	; 0x51f8 <_turn_on+0x8e>
    51f4:	88 0f       	add	r24, r24
    51f6:	99 1f       	adc	r25, r25
    51f8:	0a 94       	dec	r0
    51fa:	e2 f7       	brpl	.-8      	; 0x51f4 <_turn_on+0x8a>
    51fc:	82 2b       	or	r24, r18
    51fe:	8c 93       	st	X, r24
    5200:	08 95       	ret

00005202 <_hal_led_task>:
    5202:	cc 24       	eor	r12, r12
    5204:	c3 94       	inc	r12
    5206:	d1 2c       	mov	r13, r1
    5208:	68 94       	set
    520a:	bb 24       	eor	r11, r11
    520c:	b2 f8       	bld	r11, 2
    520e:	cb e5       	ldi	r28, 0x5B	; 91
    5210:	d7 e1       	ldi	r29, 0x17	; 23
    5212:	10 e0       	ldi	r17, 0x00	; 0
    5214:	8c 81       	ldd	r24, Y+4	; 0x04
    5216:	81 30       	cpi	r24, 0x01	; 1
    5218:	81 f0       	breq	.+32     	; 0x523a <_hal_led_task+0x38>
    521a:	18 f1       	brcs	.+70     	; 0x5262 <_hal_led_task+0x60>
    521c:	82 30       	cpi	r24, 0x02	; 2
    521e:	61 f5       	brne	.+88     	; 0x5278 <_hal_led_task+0x76>
    5220:	e8 81       	ld	r30, Y
    5222:	f9 81       	ldd	r31, Y+1	; 0x01
    5224:	20 81       	ld	r18, Z
    5226:	c6 01       	movw	r24, r12
    5228:	0a 80       	ldd	r0, Y+2	; 0x02
    522a:	02 c0       	rjmp	.+4      	; 0x5230 <_hal_led_task+0x2e>
    522c:	88 0f       	add	r24, r24
    522e:	99 1f       	adc	r25, r25
    5230:	0a 94       	dec	r0
    5232:	e2 f7       	brpl	.-8      	; 0x522c <_hal_led_task+0x2a>
    5234:	82 27       	eor	r24, r18
    5236:	80 83       	st	Z, r24
    5238:	1f c0       	rjmp	.+62     	; 0x5278 <_hal_led_task+0x76>
    523a:	8d 81       	ldd	r24, Y+5	; 0x05
    523c:	8f 5f       	subi	r24, 0xFF	; 255
    523e:	8a 30       	cpi	r24, 0x0A	; 10
    5240:	10 f4       	brcc	.+4      	; 0x5246 <_hal_led_task+0x44>
    5242:	8d 83       	std	Y+5, r24	; 0x05
    5244:	19 c0       	rjmp	.+50     	; 0x5278 <_hal_led_task+0x76>
    5246:	1d 82       	std	Y+5, r1	; 0x05
    5248:	e8 81       	ld	r30, Y
    524a:	f9 81       	ldd	r31, Y+1	; 0x01
    524c:	20 81       	ld	r18, Z
    524e:	c6 01       	movw	r24, r12
    5250:	0a 80       	ldd	r0, Y+2	; 0x02
    5252:	02 c0       	rjmp	.+4      	; 0x5258 <_hal_led_task+0x56>
    5254:	88 0f       	add	r24, r24
    5256:	99 1f       	adc	r25, r25
    5258:	0a 94       	dec	r0
    525a:	e2 f7       	brpl	.-8      	; 0x5254 <_hal_led_task+0x52>
    525c:	82 27       	eor	r24, r18
    525e:	80 83       	st	Z, r24
    5260:	0b c0       	rjmp	.+22     	; 0x5278 <_hal_led_task+0x76>
    5262:	0d 81       	ldd	r16, Y+5	; 0x05
    5264:	00 23       	and	r16, r16
    5266:	29 f0       	breq	.+10     	; 0x5272 <_hal_led_task+0x70>
    5268:	81 2f       	mov	r24, r17
    526a:	7f df       	rcall	.-258    	; 0x516a <_turn_on>
    526c:	01 50       	subi	r16, 0x01	; 1
    526e:	0d 83       	std	Y+5, r16	; 0x05
    5270:	03 c0       	rjmp	.+6      	; 0x5278 <_hal_led_task+0x76>
    5272:	bc 82       	std	Y+4, r11	; 0x04
    5274:	81 2f       	mov	r24, r17
    5276:	2d df       	rcall	.-422    	; 0x50d2 <_turn_off>
    5278:	1f 5f       	subi	r17, 0xFF	; 255
    527a:	26 96       	adiw	r28, 0x06	; 6
    527c:	14 30       	cpi	r17, 0x04	; 4
    527e:	51 f6       	brne	.-108    	; 0x5214 <_hal_led_task+0x12>
    5280:	65 e0       	ldi	r22, 0x05	; 5
    5282:	70 e0       	ldi	r23, 0x00	; 0
    5284:	80 e0       	ldi	r24, 0x00	; 0
    5286:	90 e0       	ldi	r25, 0x00	; 0
    5288:	0e 94 72 12 	call	0x24e4	; 0x24e4 <vTaskDelay>
    528c:	c0 cf       	rjmp	.-128    	; 0x520e <_hal_led_task+0xc>

0000528e <status_leds_initialise>:
    528e:	ef 92       	push	r14
    5290:	ff 92       	push	r15
    5292:	0f 93       	push	r16
    5294:	1f 93       	push	r17
    5296:	cf 93       	push	r28
    5298:	df 93       	push	r29
    529a:	08 2f       	mov	r16, r24
    529c:	80 e4       	ldi	r24, 0x40	; 64
    529e:	87 b9       	out	0x07, r24	; 7
    52a0:	cb e5       	ldi	r28, 0x5B	; 91
    52a2:	d7 e1       	ldi	r29, 0x17	; 23
    52a4:	0f 2e       	mov	r0, r31
    52a6:	f8 e2       	ldi	r31, 0x28	; 40
    52a8:	ef 2e       	mov	r14, r31
    52aa:	f1 2c       	mov	r15, r1
    52ac:	f0 2d       	mov	r31, r0
    52ae:	f9 82       	std	Y+1, r15	; 0x01
    52b0:	e8 82       	st	Y, r14
    52b2:	86 e0       	ldi	r24, 0x06	; 6
    52b4:	8a 83       	std	Y+2, r24	; 0x02
    52b6:	1b 82       	std	Y+3, r1	; 0x03
    52b8:	14 e0       	ldi	r17, 0x04	; 4
    52ba:	1c 83       	std	Y+4, r17	; 0x04
    52bc:	80 e0       	ldi	r24, 0x00	; 0
    52be:	09 df       	rcall	.-494    	; 0x50d2 <_turn_off>
    52c0:	80 e8       	ldi	r24, 0x80	; 128
    52c2:	87 b9       	out	0x07, r24	; 7
    52c4:	ff 82       	std	Y+7, r15	; 0x07
    52c6:	ee 82       	std	Y+6, r14	; 0x06
    52c8:	87 e0       	ldi	r24, 0x07	; 7
    52ca:	88 87       	std	Y+8, r24	; 0x08
    52cc:	19 86       	std	Y+9, r1	; 0x09
    52ce:	1a 87       	std	Y+10, r17	; 0x0a
    52d0:	81 e0       	ldi	r24, 0x01	; 1
    52d2:	ff de       	rcall	.-514    	; 0x50d2 <_turn_off>
    52d4:	80 e2       	ldi	r24, 0x20	; 32
    52d6:	83 bb       	out	0x13, r24	; 19
    52d8:	84 e3       	ldi	r24, 0x34	; 52
    52da:	90 e0       	ldi	r25, 0x00	; 0
    52dc:	9d 87       	std	Y+13, r25	; 0x0d
    52de:	8c 87       	std	Y+12, r24	; 0x0c
    52e0:	85 e0       	ldi	r24, 0x05	; 5
    52e2:	8e 87       	std	Y+14, r24	; 0x0e
    52e4:	1f 86       	std	Y+15, r1	; 0x0f
    52e6:	18 8b       	std	Y+16, r17	; 0x10
    52e8:	82 e0       	ldi	r24, 0x02	; 2
    52ea:	f3 de       	rcall	.-538    	; 0x50d2 <_turn_off>
    52ec:	80 e1       	ldi	r24, 0x10	; 16
    52ee:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    52f2:	82 e0       	ldi	r24, 0x02	; 2
    52f4:	91 e0       	ldi	r25, 0x01	; 1
    52f6:	9b 8b       	std	Y+19, r25	; 0x13
    52f8:	8a 8b       	std	Y+18, r24	; 0x12
    52fa:	1c 8b       	std	Y+20, r17	; 0x14
    52fc:	1d 8a       	std	Y+21, r1	; 0x15
    52fe:	1e 8b       	std	Y+22, r17	; 0x16
    5300:	83 e0       	ldi	r24, 0x03	; 3
    5302:	e7 de       	rcall	.-562    	; 0x50d2 <_turn_off>
    5304:	e1 2c       	mov	r14, r1
    5306:	f1 2c       	mov	r15, r1
    5308:	20 e0       	ldi	r18, 0x00	; 0
    530a:	30 e0       	ldi	r19, 0x00	; 0
    530c:	40 ec       	ldi	r20, 0xC0	; 192
    530e:	50 e0       	ldi	r21, 0x00	; 0
    5310:	68 e2       	ldi	r22, 0x28	; 40
    5312:	78 e0       	ldi	r23, 0x08	; 8
    5314:	81 e0       	ldi	r24, 0x01	; 1
    5316:	99 e2       	ldi	r25, 0x29	; 41
    5318:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <xTaskCreate>
    531c:	df 91       	pop	r29
    531e:	cf 91       	pop	r28
    5320:	1f 91       	pop	r17
    5322:	0f 91       	pop	r16
    5324:	ff 90       	pop	r15
    5326:	ef 90       	pop	r14
    5328:	08 95       	ret

0000532a <status_leds_slowBlink>:
    532a:	cf 93       	push	r28
    532c:	df 93       	push	r29
    532e:	90 e0       	ldi	r25, 0x00	; 0
    5330:	fc 01       	movw	r30, r24
    5332:	ee 0f       	add	r30, r30
    5334:	ff 1f       	adc	r31, r31
    5336:	df 01       	movw	r26, r30
    5338:	a8 0f       	add	r26, r24
    533a:	b9 1f       	adc	r27, r25
    533c:	aa 0f       	add	r26, r26
    533e:	bb 1f       	adc	r27, r27
    5340:	a5 5a       	subi	r26, 0xA5	; 165
    5342:	b8 4e       	sbci	r27, 0xE8	; 232
    5344:	cd 91       	ld	r28, X+
    5346:	dc 91       	ld	r29, X
    5348:	11 97       	sbiw	r26, 0x01	; 1
    534a:	48 81       	ld	r20, Y
    534c:	21 e0       	ldi	r18, 0x01	; 1
    534e:	30 e0       	ldi	r19, 0x00	; 0
    5350:	12 96       	adiw	r26, 0x02	; 2
    5352:	0c 90       	ld	r0, X
    5354:	12 97       	sbiw	r26, 0x02	; 2
    5356:	02 c0       	rjmp	.+4      	; 0x535c <status_leds_slowBlink+0x32>
    5358:	22 0f       	add	r18, r18
    535a:	33 1f       	adc	r19, r19
    535c:	0a 94       	dec	r0
    535e:	e2 f7       	brpl	.-8      	; 0x5358 <status_leds_slowBlink+0x2e>
    5360:	24 27       	eor	r18, r20
    5362:	28 83       	st	Y, r18
    5364:	fd 01       	movw	r30, r26
    5366:	81 e0       	ldi	r24, 0x01	; 1
    5368:	84 83       	std	Z+4, r24	; 0x04
    536a:	df 91       	pop	r29
    536c:	cf 91       	pop	r28
    536e:	08 95       	ret

00005370 <status_leds_fastBlink>:
    5370:	cf 93       	push	r28
    5372:	df 93       	push	r29
    5374:	90 e0       	ldi	r25, 0x00	; 0
    5376:	fc 01       	movw	r30, r24
    5378:	ee 0f       	add	r30, r30
    537a:	ff 1f       	adc	r31, r31
    537c:	df 01       	movw	r26, r30
    537e:	a8 0f       	add	r26, r24
    5380:	b9 1f       	adc	r27, r25
    5382:	aa 0f       	add	r26, r26
    5384:	bb 1f       	adc	r27, r27
    5386:	a5 5a       	subi	r26, 0xA5	; 165
    5388:	b8 4e       	sbci	r27, 0xE8	; 232
    538a:	cd 91       	ld	r28, X+
    538c:	dc 91       	ld	r29, X
    538e:	11 97       	sbiw	r26, 0x01	; 1
    5390:	48 81       	ld	r20, Y
    5392:	21 e0       	ldi	r18, 0x01	; 1
    5394:	30 e0       	ldi	r19, 0x00	; 0
    5396:	12 96       	adiw	r26, 0x02	; 2
    5398:	0c 90       	ld	r0, X
    539a:	12 97       	sbiw	r26, 0x02	; 2
    539c:	02 c0       	rjmp	.+4      	; 0x53a2 <status_leds_fastBlink+0x32>
    539e:	22 0f       	add	r18, r18
    53a0:	33 1f       	adc	r19, r19
    53a2:	0a 94       	dec	r0
    53a4:	e2 f7       	brpl	.-8      	; 0x539e <status_leds_fastBlink+0x2e>
    53a6:	24 27       	eor	r18, r20
    53a8:	28 83       	st	Y, r18
    53aa:	fd 01       	movw	r30, r26
    53ac:	82 e0       	ldi	r24, 0x02	; 2
    53ae:	84 83       	std	Z+4, r24	; 0x04
    53b0:	df 91       	pop	r29
    53b2:	cf 91       	pop	r28
    53b4:	08 95       	ret

000053b6 <status_leds_ledOn>:
    53b6:	28 2f       	mov	r18, r24
    53b8:	30 e0       	ldi	r19, 0x00	; 0
    53ba:	f9 01       	movw	r30, r18
    53bc:	ee 0f       	add	r30, r30
    53be:	ff 1f       	adc	r31, r31
    53c0:	e2 0f       	add	r30, r18
    53c2:	f3 1f       	adc	r31, r19
    53c4:	ee 0f       	add	r30, r30
    53c6:	ff 1f       	adc	r31, r31
    53c8:	e5 5a       	subi	r30, 0xA5	; 165
    53ca:	f8 4e       	sbci	r31, 0xE8	; 232
    53cc:	93 e0       	ldi	r25, 0x03	; 3
    53ce:	94 83       	std	Z+4, r25	; 0x04
    53d0:	cc ce       	rjmp	.-616    	; 0x516a <_turn_on>
    53d2:	08 95       	ret

000053d4 <status_leds_ledOff>:
    53d4:	28 2f       	mov	r18, r24
    53d6:	30 e0       	ldi	r19, 0x00	; 0
    53d8:	f9 01       	movw	r30, r18
    53da:	ee 0f       	add	r30, r30
    53dc:	ff 1f       	adc	r31, r31
    53de:	e2 0f       	add	r30, r18
    53e0:	f3 1f       	adc	r31, r19
    53e2:	ee 0f       	add	r30, r30
    53e4:	ff 1f       	adc	r31, r31
    53e6:	e5 5a       	subi	r30, 0xA5	; 165
    53e8:	f8 4e       	sbci	r31, 0xE8	; 232
    53ea:	94 e0       	ldi	r25, 0x04	; 4
    53ec:	94 83       	std	Z+4, r25	; 0x04
    53ee:	71 ce       	rjmp	.-798    	; 0x50d2 <_turn_off>
    53f0:	08 95       	ret

000053f2 <status_leds_longPuls>:
    53f2:	90 e0       	ldi	r25, 0x00	; 0
    53f4:	fc 01       	movw	r30, r24
    53f6:	ee 0f       	add	r30, r30
    53f8:	ff 1f       	adc	r31, r31
    53fa:	df 01       	movw	r26, r30
    53fc:	a8 0f       	add	r26, r24
    53fe:	b9 1f       	adc	r27, r25
    5400:	aa 0f       	add	r26, r26
    5402:	bb 1f       	adc	r27, r27
    5404:	a5 5a       	subi	r26, 0xA5	; 165
    5406:	b8 4e       	sbci	r27, 0xE8	; 232
    5408:	24 e0       	ldi	r18, 0x04	; 4
    540a:	15 96       	adiw	r26, 0x05	; 5
    540c:	2c 93       	st	X, r18
    540e:	15 97       	sbiw	r26, 0x05	; 5
    5410:	fd 01       	movw	r30, r26
    5412:	14 82       	std	Z+4, r1	; 0x04
    5414:	08 95       	ret

00005416 <status_leds_shortPuls>:
    5416:	90 e0       	ldi	r25, 0x00	; 0
    5418:	fc 01       	movw	r30, r24
    541a:	ee 0f       	add	r30, r30
    541c:	ff 1f       	adc	r31, r31
    541e:	df 01       	movw	r26, r30
    5420:	a8 0f       	add	r26, r24
    5422:	b9 1f       	adc	r27, r25
    5424:	aa 0f       	add	r26, r26
    5426:	bb 1f       	adc	r27, r27
    5428:	a5 5a       	subi	r26, 0xA5	; 165
    542a:	b8 4e       	sbci	r27, 0xE8	; 232
    542c:	21 e0       	ldi	r18, 0x01	; 1
    542e:	15 96       	adiw	r26, 0x05	; 5
    5430:	2c 93       	st	X, r18
    5432:	15 97       	sbiw	r26, 0x05	; 5
    5434:	fd 01       	movw	r30, r26
    5436:	14 82       	std	Z+4, r1	; 0x04
    5438:	08 95       	ret

0000543a <_initTwiInterface>:
    543a:	80 91 81 17 	lds	r24, 0x1781	; 0x801781 <_twiIsInitiated>
    543e:	81 11       	cpse	r24, r1
    5440:	0c c0       	rjmp	.+24     	; 0x545a <_initTwiInterface+0x20>
    5442:	8c e0       	ldi	r24, 0x0C	; 12
    5444:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5448:	8f ef       	ldi	r24, 0xFF	; 255
    544a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    544e:	84 e0       	ldi	r24, 0x04	; 4
    5450:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5454:	81 e0       	ldi	r24, 0x01	; 1
    5456:	80 93 81 17 	sts	0x1781, r24	; 0x801781 <_twiIsInitiated>
    545a:	08 95       	ret

0000545c <twiCreate>:
    545c:	af 92       	push	r10
    545e:	bf 92       	push	r11
    5460:	cf 92       	push	r12
    5462:	df 92       	push	r13
    5464:	ef 92       	push	r14
    5466:	ff 92       	push	r15
    5468:	0f 93       	push	r16
    546a:	1f 93       	push	r17
    546c:	cf 93       	push	r28
    546e:	df 93       	push	r29
    5470:	a8 2e       	mov	r10, r24
    5472:	b6 2e       	mov	r11, r22
    5474:	69 01       	movw	r12, r18
    5476:	7a 01       	movw	r14, r20
    5478:	84 e0       	ldi	r24, 0x04	; 4
    547a:	90 e0       	ldi	r25, 0x00	; 0
    547c:	70 d7       	rcall	.+3808   	; 0x635e <malloc>
    547e:	ec 01       	movw	r28, r24
    5480:	89 2b       	or	r24, r25
    5482:	61 f1       	breq	.+88     	; 0x54dc <twiCreate+0x80>
    5484:	a8 82       	st	Y, r10
    5486:	81 e0       	ldi	r24, 0x01	; 1
    5488:	b8 12       	cpse	r11, r24
    548a:	12 c0       	rjmp	.+36     	; 0x54b0 <twiCreate+0x54>
    548c:	c7 01       	movw	r24, r14
    548e:	b6 01       	movw	r22, r12
    5490:	20 ea       	ldi	r18, 0xA0	; 160
    5492:	36 e8       	ldi	r19, 0x86	; 134
    5494:	41 e0       	ldi	r20, 0x01	; 1
    5496:	50 e0       	ldi	r21, 0x00	; 0
    5498:	15 d7       	rcall	.+3626   	; 0x62c4 <__udivmodsi4>
    549a:	da 01       	movw	r26, r20
    549c:	c9 01       	movw	r24, r18
    549e:	40 97       	sbiw	r24, 0x10	; 16
    54a0:	a1 09       	sbc	r26, r1
    54a2:	b1 09       	sbc	r27, r1
    54a4:	b6 95       	lsr	r27
    54a6:	a7 95       	ror	r26
    54a8:	97 95       	ror	r25
    54aa:	87 95       	ror	r24
    54ac:	89 83       	std	Y+1, r24	; 0x01
    54ae:	11 c0       	rjmp	.+34     	; 0x54d2 <twiCreate+0x76>
    54b0:	c7 01       	movw	r24, r14
    54b2:	b6 01       	movw	r22, r12
    54b4:	20 e8       	ldi	r18, 0x80	; 128
    54b6:	3a e1       	ldi	r19, 0x1A	; 26
    54b8:	46 e0       	ldi	r20, 0x06	; 6
    54ba:	50 e0       	ldi	r21, 0x00	; 0
    54bc:	03 d7       	rcall	.+3590   	; 0x62c4 <__udivmodsi4>
    54be:	da 01       	movw	r26, r20
    54c0:	c9 01       	movw	r24, r18
    54c2:	40 97       	sbiw	r24, 0x10	; 16
    54c4:	a1 09       	sbc	r26, r1
    54c6:	b1 09       	sbc	r27, r1
    54c8:	b6 95       	lsr	r27
    54ca:	a7 95       	ror	r26
    54cc:	97 95       	ror	r25
    54ce:	87 95       	ror	r24
    54d0:	89 83       	std	Y+1, r24	; 0x01
    54d2:	1b 83       	std	Y+3, r17	; 0x03
    54d4:	0a 83       	std	Y+2, r16	; 0x02
    54d6:	8c 2f       	mov	r24, r28
    54d8:	9d 2f       	mov	r25, r29
    54da:	02 c0       	rjmp	.+4      	; 0x54e0 <twiCreate+0x84>
    54dc:	80 e0       	ldi	r24, 0x00	; 0
    54de:	90 e0       	ldi	r25, 0x00	; 0
    54e0:	df 91       	pop	r29
    54e2:	cf 91       	pop	r28
    54e4:	1f 91       	pop	r17
    54e6:	0f 91       	pop	r16
    54e8:	ff 90       	pop	r15
    54ea:	ef 90       	pop	r14
    54ec:	df 90       	pop	r13
    54ee:	cf 90       	pop	r12
    54f0:	bf 90       	pop	r11
    54f2:	af 90       	pop	r10
    54f4:	08 95       	ret

000054f6 <twiIsBusy>:
    54f6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54fa:	81 70       	andi	r24, 0x01	; 1
    54fc:	08 95       	ret

000054fe <twiTransmit>:
    54fe:	ff 92       	push	r15
    5500:	0f 93       	push	r16
    5502:	1f 93       	push	r17
    5504:	cf 93       	push	r28
    5506:	df 93       	push	r29
    5508:	00 97       	sbiw	r24, 0x00	; 0
    550a:	d1 f1       	breq	.+116    	; 0x5580 <twiTransmit+0x82>
    550c:	4a 30       	cpi	r20, 0x0A	; 10
    550e:	d0 f5       	brcc	.+116    	; 0x5584 <twiTransmit+0x86>
    5510:	f4 2e       	mov	r15, r20
    5512:	8b 01       	movw	r16, r22
    5514:	ec 01       	movw	r28, r24
    5516:	ef df       	rcall	.-34     	; 0x54f6 <twiIsBusy>
    5518:	81 11       	cpse	r24, r1
    551a:	36 c0       	rjmp	.+108    	; 0x5588 <twiTransmit+0x8a>
    551c:	80 91 74 17 	lds	r24, 0x1774	; 0x801774 <_twiCurrentHandler>
    5520:	90 91 75 17 	lds	r25, 0x1775	; 0x801775 <_twiCurrentHandler+0x1>
    5524:	c8 17       	cp	r28, r24
    5526:	d9 07       	cpc	r29, r25
    5528:	41 f0       	breq	.+16     	; 0x553a <twiTransmit+0x3c>
    552a:	87 df       	rcall	.-242    	; 0x543a <_initTwiInterface>
    552c:	89 81       	ldd	r24, Y+1	; 0x01
    552e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5532:	d0 93 75 17 	sts	0x1775, r29	; 0x801775 <_twiCurrentHandler+0x1>
    5536:	c0 93 74 17 	sts	0x1774, r28	; 0x801774 <_twiCurrentHandler>
    553a:	81 e0       	ldi	r24, 0x01	; 1
    553c:	8f 0d       	add	r24, r15
    553e:	80 93 76 17 	sts	0x1776, r24	; 0x801776 <_twiMessageLen>
    5542:	88 81       	ld	r24, Y
    5544:	88 0f       	add	r24, r24
    5546:	80 93 77 17 	sts	0x1777, r24	; 0x801777 <_twiMessageBuffer>
    554a:	ff 20       	and	r15, r15
    554c:	89 f0       	breq	.+34     	; 0x5570 <twiTransmit+0x72>
    554e:	f8 01       	movw	r30, r16
    5550:	a8 e7       	ldi	r26, 0x78	; 120
    5552:	b7 e1       	ldi	r27, 0x17	; 23
    5554:	4f ef       	ldi	r20, 0xFF	; 255
    5556:	4f 0d       	add	r20, r15
    5558:	64 2f       	mov	r22, r20
    555a:	70 e0       	ldi	r23, 0x00	; 0
    555c:	cb 01       	movw	r24, r22
    555e:	01 96       	adiw	r24, 0x01	; 1
    5560:	b8 01       	movw	r22, r16
    5562:	68 0f       	add	r22, r24
    5564:	79 1f       	adc	r23, r25
    5566:	81 91       	ld	r24, Z+
    5568:	8d 93       	st	X+, r24
    556a:	e6 17       	cp	r30, r22
    556c:	f7 07       	cpc	r31, r23
    556e:	d9 f7       	brne	.-10     	; 0x5566 <twiTransmit+0x68>
    5570:	88 ef       	ldi	r24, 0xF8	; 248
    5572:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5576:	85 ea       	ldi	r24, 0xA5	; 165
    5578:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    557c:	84 e0       	ldi	r24, 0x04	; 4
    557e:	05 c0       	rjmp	.+10     	; 0x558a <twiTransmit+0x8c>
    5580:	86 e0       	ldi	r24, 0x06	; 6
    5582:	03 c0       	rjmp	.+6      	; 0x558a <twiTransmit+0x8c>
    5584:	87 e0       	ldi	r24, 0x07	; 7
    5586:	01 c0       	rjmp	.+2      	; 0x558a <twiTransmit+0x8c>
    5588:	82 e0       	ldi	r24, 0x02	; 2
    558a:	df 91       	pop	r29
    558c:	cf 91       	pop	r28
    558e:	1f 91       	pop	r17
    5590:	0f 91       	pop	r16
    5592:	ff 90       	pop	r15
    5594:	08 95       	ret

00005596 <twiReceive>:
    5596:	1f 93       	push	r17
    5598:	cf 93       	push	r28
    559a:	df 93       	push	r29
    559c:	00 97       	sbiw	r24, 0x00	; 0
    559e:	29 f1       	breq	.+74     	; 0x55ea <twiReceive+0x54>
    55a0:	6b 30       	cpi	r22, 0x0B	; 11
    55a2:	28 f5       	brcc	.+74     	; 0x55ee <twiReceive+0x58>
    55a4:	16 2f       	mov	r17, r22
    55a6:	ec 01       	movw	r28, r24
    55a8:	a6 df       	rcall	.-180    	; 0x54f6 <twiIsBusy>
    55aa:	81 11       	cpse	r24, r1
    55ac:	22 c0       	rjmp	.+68     	; 0x55f2 <twiReceive+0x5c>
    55ae:	80 91 74 17 	lds	r24, 0x1774	; 0x801774 <_twiCurrentHandler>
    55b2:	90 91 75 17 	lds	r25, 0x1775	; 0x801775 <_twiCurrentHandler+0x1>
    55b6:	c8 17       	cp	r28, r24
    55b8:	d9 07       	cpc	r29, r25
    55ba:	41 f0       	breq	.+16     	; 0x55cc <twiReceive+0x36>
    55bc:	3e df       	rcall	.-388    	; 0x543a <_initTwiInterface>
    55be:	89 81       	ldd	r24, Y+1	; 0x01
    55c0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    55c4:	d0 93 75 17 	sts	0x1775, r29	; 0x801775 <_twiCurrentHandler+0x1>
    55c8:	c0 93 74 17 	sts	0x1774, r28	; 0x801774 <_twiCurrentHandler>
    55cc:	10 93 76 17 	sts	0x1776, r17	; 0x801776 <_twiMessageLen>
    55d0:	88 81       	ld	r24, Y
    55d2:	88 0f       	add	r24, r24
    55d4:	81 60       	ori	r24, 0x01	; 1
    55d6:	80 93 77 17 	sts	0x1777, r24	; 0x801777 <_twiMessageBuffer>
    55da:	88 ef       	ldi	r24, 0xF8	; 248
    55dc:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    55e0:	85 ea       	ldi	r24, 0xA5	; 165
    55e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55e6:	85 e0       	ldi	r24, 0x05	; 5
    55e8:	05 c0       	rjmp	.+10     	; 0x55f4 <twiReceive+0x5e>
    55ea:	86 e0       	ldi	r24, 0x06	; 6
    55ec:	03 c0       	rjmp	.+6      	; 0x55f4 <twiReceive+0x5e>
    55ee:	87 e0       	ldi	r24, 0x07	; 7
    55f0:	01 c0       	rjmp	.+2      	; 0x55f4 <twiReceive+0x5e>
    55f2:	82 e0       	ldi	r24, 0x02	; 2
    55f4:	df 91       	pop	r29
    55f6:	cf 91       	pop	r28
    55f8:	1f 91       	pop	r17
    55fa:	08 95       	ret

000055fc <__vector_39>:
    55fc:	1f 92       	push	r1
    55fe:	0f 92       	push	r0
    5600:	0f b6       	in	r0, 0x3f	; 63
    5602:	0f 92       	push	r0
    5604:	11 24       	eor	r1, r1
    5606:	0b b6       	in	r0, 0x3b	; 59
    5608:	0f 92       	push	r0
    560a:	2f 93       	push	r18
    560c:	3f 93       	push	r19
    560e:	4f 93       	push	r20
    5610:	5f 93       	push	r21
    5612:	6f 93       	push	r22
    5614:	7f 93       	push	r23
    5616:	8f 93       	push	r24
    5618:	9f 93       	push	r25
    561a:	af 93       	push	r26
    561c:	bf 93       	push	r27
    561e:	ef 93       	push	r30
    5620:	ff 93       	push	r31
    5622:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5626:	8e 2f       	mov	r24, r30
    5628:	90 e0       	ldi	r25, 0x00	; 0
    562a:	fc 01       	movw	r30, r24
    562c:	38 97       	sbiw	r30, 0x08	; 8
    562e:	e1 35       	cpi	r30, 0x51	; 81
    5630:	f1 05       	cpc	r31, r1
    5632:	08 f0       	brcs	.+2      	; 0x5636 <__vector_39+0x3a>
    5634:	75 c0       	rjmp	.+234    	; 0x5720 <__vector_39+0x124>
    5636:	88 27       	eor	r24, r24
    5638:	e4 58       	subi	r30, 0x84	; 132
    563a:	ff 4f       	sbci	r31, 0xFF	; 255
    563c:	8f 4f       	sbci	r24, 0xFF	; 255
    563e:	64 c6       	rjmp	.+3272   	; 0x6308 <__tablejump2__>
    5640:	10 92 73 17 	sts	0x1773, r1	; 0x801773 <_index.1885>
    5644:	e0 91 73 17 	lds	r30, 0x1773	; 0x801773 <_index.1885>
    5648:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <_twiMessageLen>
    564c:	e8 17       	cp	r30, r24
    564e:	70 f4       	brcc	.+28     	; 0x566c <__vector_39+0x70>
    5650:	81 e0       	ldi	r24, 0x01	; 1
    5652:	8e 0f       	add	r24, r30
    5654:	80 93 73 17 	sts	0x1773, r24	; 0x801773 <_index.1885>
    5658:	f0 e0       	ldi	r31, 0x00	; 0
    565a:	e9 58       	subi	r30, 0x89	; 137
    565c:	f8 4e       	sbci	r31, 0xE8	; 232
    565e:	80 81       	ld	r24, Z
    5660:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5664:	85 e8       	ldi	r24, 0x85	; 133
    5666:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    566a:	72 c0       	rjmp	.+228    	; 0x5750 <__vector_39+0x154>
    566c:	84 e9       	ldi	r24, 0x94	; 148
    566e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5672:	80 91 74 17 	lds	r24, 0x1774	; 0x801774 <_twiCurrentHandler>
    5676:	90 91 75 17 	lds	r25, 0x1775	; 0x801775 <_twiCurrentHandler+0x1>
    567a:	dc 01       	movw	r26, r24
    567c:	12 96       	adiw	r26, 0x02	; 2
    567e:	ed 91       	ld	r30, X+
    5680:	fc 91       	ld	r31, X
    5682:	13 97       	sbiw	r26, 0x03	; 3
    5684:	30 97       	sbiw	r30, 0x00	; 0
    5686:	09 f4       	brne	.+2      	; 0x568a <__vector_39+0x8e>
    5688:	63 c0       	rjmp	.+198    	; 0x5750 <__vector_39+0x154>
    568a:	20 e0       	ldi	r18, 0x00	; 0
    568c:	40 e0       	ldi	r20, 0x00	; 0
    568e:	50 e0       	ldi	r21, 0x00	; 0
    5690:	64 e0       	ldi	r22, 0x04	; 4
    5692:	19 95       	eicall
    5694:	5d c0       	rjmp	.+186    	; 0x5750 <__vector_39+0x154>
    5696:	e0 91 73 17 	lds	r30, 0x1773	; 0x801773 <_index.1885>
    569a:	81 e0       	ldi	r24, 0x01	; 1
    569c:	8e 0f       	add	r24, r30
    569e:	80 93 73 17 	sts	0x1773, r24	; 0x801773 <_index.1885>
    56a2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    56a6:	f0 e0       	ldi	r31, 0x00	; 0
    56a8:	e9 58       	subi	r30, 0x89	; 137
    56aa:	f8 4e       	sbci	r31, 0xE8	; 232
    56ac:	80 83       	st	Z, r24
    56ae:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    56b2:	80 34       	cpi	r24, 0x40	; 64
    56b4:	11 f4       	brne	.+4      	; 0x56ba <__vector_39+0xbe>
    56b6:	10 92 73 17 	sts	0x1773, r1	; 0x801773 <_index.1885>
    56ba:	20 91 73 17 	lds	r18, 0x1773	; 0x801773 <_index.1885>
    56be:	30 e0       	ldi	r19, 0x00	; 0
    56c0:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <_twiMessageLen>
    56c4:	90 e0       	ldi	r25, 0x00	; 0
    56c6:	01 97       	sbiw	r24, 0x01	; 1
    56c8:	28 17       	cp	r18, r24
    56ca:	39 07       	cpc	r19, r25
    56cc:	24 f4       	brge	.+8      	; 0x56d6 <__vector_39+0xda>
    56ce:	85 ec       	ldi	r24, 0xC5	; 197
    56d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    56d4:	3d c0       	rjmp	.+122    	; 0x5750 <__vector_39+0x154>
    56d6:	85 e8       	ldi	r24, 0x85	; 133
    56d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    56dc:	39 c0       	rjmp	.+114    	; 0x5750 <__vector_39+0x154>
    56de:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    56e2:	e0 91 73 17 	lds	r30, 0x1773	; 0x801773 <_index.1885>
    56e6:	f0 e0       	ldi	r31, 0x00	; 0
    56e8:	e9 58       	subi	r30, 0x89	; 137
    56ea:	f8 4e       	sbci	r31, 0xE8	; 232
    56ec:	80 83       	st	Z, r24
    56ee:	84 e9       	ldi	r24, 0x94	; 148
    56f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    56f4:	80 91 74 17 	lds	r24, 0x1774	; 0x801774 <_twiCurrentHandler>
    56f8:	90 91 75 17 	lds	r25, 0x1775	; 0x801775 <_twiCurrentHandler+0x1>
    56fc:	dc 01       	movw	r26, r24
    56fe:	12 96       	adiw	r26, 0x02	; 2
    5700:	ed 91       	ld	r30, X+
    5702:	fc 91       	ld	r31, X
    5704:	13 97       	sbiw	r26, 0x03	; 3
    5706:	30 97       	sbiw	r30, 0x00	; 0
    5708:	19 f1       	breq	.+70     	; 0x5750 <__vector_39+0x154>
    570a:	20 91 76 17 	lds	r18, 0x1776	; 0x801776 <_twiMessageLen>
    570e:	47 e7       	ldi	r20, 0x77	; 119
    5710:	57 e1       	ldi	r21, 0x17	; 23
    5712:	65 e0       	ldi	r22, 0x05	; 5
    5714:	19 95       	eicall
    5716:	1c c0       	rjmp	.+56     	; 0x5750 <__vector_39+0x154>
    5718:	85 ea       	ldi	r24, 0xA5	; 165
    571a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    571e:	18 c0       	rjmp	.+48     	; 0x5750 <__vector_39+0x154>
    5720:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5724:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5728:	84 e0       	ldi	r24, 0x04	; 4
    572a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    572e:	80 91 74 17 	lds	r24, 0x1774	; 0x801774 <_twiCurrentHandler>
    5732:	90 91 75 17 	lds	r25, 0x1775	; 0x801775 <_twiCurrentHandler+0x1>
    5736:	dc 01       	movw	r26, r24
    5738:	12 96       	adiw	r26, 0x02	; 2
    573a:	ed 91       	ld	r30, X+
    573c:	fc 91       	ld	r31, X
    573e:	13 97       	sbiw	r26, 0x03	; 3
    5740:	30 97       	sbiw	r30, 0x00	; 0
    5742:	31 f0       	breq	.+12     	; 0x5750 <__vector_39+0x154>
    5744:	20 e0       	ldi	r18, 0x00	; 0
    5746:	40 e0       	ldi	r20, 0x00	; 0
    5748:	50 e0       	ldi	r21, 0x00	; 0
    574a:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    574e:	19 95       	eicall
    5750:	ff 91       	pop	r31
    5752:	ef 91       	pop	r30
    5754:	bf 91       	pop	r27
    5756:	af 91       	pop	r26
    5758:	9f 91       	pop	r25
    575a:	8f 91       	pop	r24
    575c:	7f 91       	pop	r23
    575e:	6f 91       	pop	r22
    5760:	5f 91       	pop	r21
    5762:	4f 91       	pop	r20
    5764:	3f 91       	pop	r19
    5766:	2f 91       	pop	r18
    5768:	0f 90       	pop	r0
    576a:	0b be       	out	0x3b, r0	; 59
    576c:	0f 90       	pop	r0
    576e:	0f be       	out	0x3f, r0	; 63
    5770:	0f 90       	pop	r0
    5772:	1f 90       	pop	r1
    5774:	18 95       	reti

00005776 <fifo_init>:
    5776:	fc 01       	movw	r30, r24
    5778:	41 11       	cpse	r20, r1
    577a:	01 c0       	rjmp	.+2      	; 0x577e <fifo_init+0x8>
    577c:	11 d7       	rcall	.+3618   	; 0x65a0 <abort>
    577e:	84 2f       	mov	r24, r20
    5780:	90 e0       	ldi	r25, 0x00	; 0
    5782:	9c 01       	movw	r18, r24
    5784:	21 50       	subi	r18, 0x01	; 1
    5786:	31 09       	sbc	r19, r1
    5788:	82 23       	and	r24, r18
    578a:	93 23       	and	r25, r19
    578c:	89 2b       	or	r24, r25
    578e:	09 f0       	breq	.+2      	; 0x5792 <fifo_init+0x1c>
    5790:	07 d7       	rcall	.+3598   	; 0x65a0 <abort>
    5792:	41 38       	cpi	r20, 0x81	; 129
    5794:	08 f0       	brcs	.+2      	; 0x5798 <fifo_init+0x22>
    5796:	04 d7       	rcall	.+3592   	; 0x65a0 <abort>
    5798:	12 82       	std	Z+2, r1	; 0x02
    579a:	13 82       	std	Z+3, r1	; 0x03
    579c:	44 83       	std	Z+4, r20	; 0x04
    579e:	44 0f       	add	r20, r20
    57a0:	41 50       	subi	r20, 0x01	; 1
    57a2:	45 83       	std	Z+5, r20	; 0x05
    57a4:	71 83       	std	Z+1, r23	; 0x01
    57a6:	60 83       	st	Z, r22
    57a8:	80 e0       	ldi	r24, 0x00	; 0
    57aa:	90 e0       	ldi	r25, 0x00	; 0
    57ac:	08 95       	ret

000057ae <__subsf3>:
    57ae:	50 58       	subi	r21, 0x80	; 128

000057b0 <__addsf3>:
    57b0:	bb 27       	eor	r27, r27
    57b2:	aa 27       	eor	r26, r26
    57b4:	0e d0       	rcall	.+28     	; 0x57d2 <__addsf3x>
    57b6:	4d c1       	rjmp	.+666    	; 0x5a52 <__fp_round>
    57b8:	3e d1       	rcall	.+636    	; 0x5a36 <__fp_pscA>
    57ba:	30 f0       	brcs	.+12     	; 0x57c8 <__addsf3+0x18>
    57bc:	43 d1       	rcall	.+646    	; 0x5a44 <__fp_pscB>
    57be:	20 f0       	brcs	.+8      	; 0x57c8 <__addsf3+0x18>
    57c0:	31 f4       	brne	.+12     	; 0x57ce <__addsf3+0x1e>
    57c2:	9f 3f       	cpi	r25, 0xFF	; 255
    57c4:	11 f4       	brne	.+4      	; 0x57ca <__addsf3+0x1a>
    57c6:	1e f4       	brtc	.+6      	; 0x57ce <__addsf3+0x1e>
    57c8:	33 c1       	rjmp	.+614    	; 0x5a30 <__fp_nan>
    57ca:	0e f4       	brtc	.+2      	; 0x57ce <__addsf3+0x1e>
    57cc:	e0 95       	com	r30
    57ce:	e7 fb       	bst	r30, 7
    57d0:	29 c1       	rjmp	.+594    	; 0x5a24 <__fp_inf>

000057d2 <__addsf3x>:
    57d2:	e9 2f       	mov	r30, r25
    57d4:	4f d1       	rcall	.+670    	; 0x5a74 <__fp_split3>
    57d6:	80 f3       	brcs	.-32     	; 0x57b8 <__addsf3+0x8>
    57d8:	ba 17       	cp	r27, r26
    57da:	62 07       	cpc	r22, r18
    57dc:	73 07       	cpc	r23, r19
    57de:	84 07       	cpc	r24, r20
    57e0:	95 07       	cpc	r25, r21
    57e2:	18 f0       	brcs	.+6      	; 0x57ea <__addsf3x+0x18>
    57e4:	71 f4       	brne	.+28     	; 0x5802 <__addsf3x+0x30>
    57e6:	9e f5       	brtc	.+102    	; 0x584e <__addsf3x+0x7c>
    57e8:	67 c1       	rjmp	.+718    	; 0x5ab8 <__fp_zero>
    57ea:	0e f4       	brtc	.+2      	; 0x57ee <__addsf3x+0x1c>
    57ec:	e0 95       	com	r30
    57ee:	0b 2e       	mov	r0, r27
    57f0:	ba 2f       	mov	r27, r26
    57f2:	a0 2d       	mov	r26, r0
    57f4:	0b 01       	movw	r0, r22
    57f6:	b9 01       	movw	r22, r18
    57f8:	90 01       	movw	r18, r0
    57fa:	0c 01       	movw	r0, r24
    57fc:	ca 01       	movw	r24, r20
    57fe:	a0 01       	movw	r20, r0
    5800:	11 24       	eor	r1, r1
    5802:	ff 27       	eor	r31, r31
    5804:	59 1b       	sub	r21, r25
    5806:	99 f0       	breq	.+38     	; 0x582e <__addsf3x+0x5c>
    5808:	59 3f       	cpi	r21, 0xF9	; 249
    580a:	50 f4       	brcc	.+20     	; 0x5820 <__addsf3x+0x4e>
    580c:	50 3e       	cpi	r21, 0xE0	; 224
    580e:	68 f1       	brcs	.+90     	; 0x586a <__addsf3x+0x98>
    5810:	1a 16       	cp	r1, r26
    5812:	f0 40       	sbci	r31, 0x00	; 0
    5814:	a2 2f       	mov	r26, r18
    5816:	23 2f       	mov	r18, r19
    5818:	34 2f       	mov	r19, r20
    581a:	44 27       	eor	r20, r20
    581c:	58 5f       	subi	r21, 0xF8	; 248
    581e:	f3 cf       	rjmp	.-26     	; 0x5806 <__addsf3x+0x34>
    5820:	46 95       	lsr	r20
    5822:	37 95       	ror	r19
    5824:	27 95       	ror	r18
    5826:	a7 95       	ror	r26
    5828:	f0 40       	sbci	r31, 0x00	; 0
    582a:	53 95       	inc	r21
    582c:	c9 f7       	brne	.-14     	; 0x5820 <__addsf3x+0x4e>
    582e:	7e f4       	brtc	.+30     	; 0x584e <__addsf3x+0x7c>
    5830:	1f 16       	cp	r1, r31
    5832:	ba 0b       	sbc	r27, r26
    5834:	62 0b       	sbc	r22, r18
    5836:	73 0b       	sbc	r23, r19
    5838:	84 0b       	sbc	r24, r20
    583a:	ba f0       	brmi	.+46     	; 0x586a <__addsf3x+0x98>
    583c:	91 50       	subi	r25, 0x01	; 1
    583e:	a1 f0       	breq	.+40     	; 0x5868 <__addsf3x+0x96>
    5840:	ff 0f       	add	r31, r31
    5842:	bb 1f       	adc	r27, r27
    5844:	66 1f       	adc	r22, r22
    5846:	77 1f       	adc	r23, r23
    5848:	88 1f       	adc	r24, r24
    584a:	c2 f7       	brpl	.-16     	; 0x583c <__addsf3x+0x6a>
    584c:	0e c0       	rjmp	.+28     	; 0x586a <__addsf3x+0x98>
    584e:	ba 0f       	add	r27, r26
    5850:	62 1f       	adc	r22, r18
    5852:	73 1f       	adc	r23, r19
    5854:	84 1f       	adc	r24, r20
    5856:	48 f4       	brcc	.+18     	; 0x586a <__addsf3x+0x98>
    5858:	87 95       	ror	r24
    585a:	77 95       	ror	r23
    585c:	67 95       	ror	r22
    585e:	b7 95       	ror	r27
    5860:	f7 95       	ror	r31
    5862:	9e 3f       	cpi	r25, 0xFE	; 254
    5864:	08 f0       	brcs	.+2      	; 0x5868 <__addsf3x+0x96>
    5866:	b3 cf       	rjmp	.-154    	; 0x57ce <__addsf3+0x1e>
    5868:	93 95       	inc	r25
    586a:	88 0f       	add	r24, r24
    586c:	08 f0       	brcs	.+2      	; 0x5870 <__addsf3x+0x9e>
    586e:	99 27       	eor	r25, r25
    5870:	ee 0f       	add	r30, r30
    5872:	97 95       	ror	r25
    5874:	87 95       	ror	r24
    5876:	08 95       	ret

00005878 <__divsf3>:
    5878:	0c d0       	rcall	.+24     	; 0x5892 <__divsf3x>
    587a:	eb c0       	rjmp	.+470    	; 0x5a52 <__fp_round>
    587c:	e3 d0       	rcall	.+454    	; 0x5a44 <__fp_pscB>
    587e:	40 f0       	brcs	.+16     	; 0x5890 <__divsf3+0x18>
    5880:	da d0       	rcall	.+436    	; 0x5a36 <__fp_pscA>
    5882:	30 f0       	brcs	.+12     	; 0x5890 <__divsf3+0x18>
    5884:	21 f4       	brne	.+8      	; 0x588e <__divsf3+0x16>
    5886:	5f 3f       	cpi	r21, 0xFF	; 255
    5888:	19 f0       	breq	.+6      	; 0x5890 <__divsf3+0x18>
    588a:	cc c0       	rjmp	.+408    	; 0x5a24 <__fp_inf>
    588c:	51 11       	cpse	r21, r1
    588e:	15 c1       	rjmp	.+554    	; 0x5aba <__fp_szero>
    5890:	cf c0       	rjmp	.+414    	; 0x5a30 <__fp_nan>

00005892 <__divsf3x>:
    5892:	f0 d0       	rcall	.+480    	; 0x5a74 <__fp_split3>
    5894:	98 f3       	brcs	.-26     	; 0x587c <__divsf3+0x4>

00005896 <__divsf3_pse>:
    5896:	99 23       	and	r25, r25
    5898:	c9 f3       	breq	.-14     	; 0x588c <__divsf3+0x14>
    589a:	55 23       	and	r21, r21
    589c:	b1 f3       	breq	.-20     	; 0x588a <__divsf3+0x12>
    589e:	95 1b       	sub	r25, r21
    58a0:	55 0b       	sbc	r21, r21
    58a2:	bb 27       	eor	r27, r27
    58a4:	aa 27       	eor	r26, r26
    58a6:	62 17       	cp	r22, r18
    58a8:	73 07       	cpc	r23, r19
    58aa:	84 07       	cpc	r24, r20
    58ac:	38 f0       	brcs	.+14     	; 0x58bc <__divsf3_pse+0x26>
    58ae:	9f 5f       	subi	r25, 0xFF	; 255
    58b0:	5f 4f       	sbci	r21, 0xFF	; 255
    58b2:	22 0f       	add	r18, r18
    58b4:	33 1f       	adc	r19, r19
    58b6:	44 1f       	adc	r20, r20
    58b8:	aa 1f       	adc	r26, r26
    58ba:	a9 f3       	breq	.-22     	; 0x58a6 <__divsf3_pse+0x10>
    58bc:	33 d0       	rcall	.+102    	; 0x5924 <__divsf3_pse+0x8e>
    58be:	0e 2e       	mov	r0, r30
    58c0:	3a f0       	brmi	.+14     	; 0x58d0 <__divsf3_pse+0x3a>
    58c2:	e0 e8       	ldi	r30, 0x80	; 128
    58c4:	30 d0       	rcall	.+96     	; 0x5926 <__divsf3_pse+0x90>
    58c6:	91 50       	subi	r25, 0x01	; 1
    58c8:	50 40       	sbci	r21, 0x00	; 0
    58ca:	e6 95       	lsr	r30
    58cc:	00 1c       	adc	r0, r0
    58ce:	ca f7       	brpl	.-14     	; 0x58c2 <__divsf3_pse+0x2c>
    58d0:	29 d0       	rcall	.+82     	; 0x5924 <__divsf3_pse+0x8e>
    58d2:	fe 2f       	mov	r31, r30
    58d4:	27 d0       	rcall	.+78     	; 0x5924 <__divsf3_pse+0x8e>
    58d6:	66 0f       	add	r22, r22
    58d8:	77 1f       	adc	r23, r23
    58da:	88 1f       	adc	r24, r24
    58dc:	bb 1f       	adc	r27, r27
    58de:	26 17       	cp	r18, r22
    58e0:	37 07       	cpc	r19, r23
    58e2:	48 07       	cpc	r20, r24
    58e4:	ab 07       	cpc	r26, r27
    58e6:	b0 e8       	ldi	r27, 0x80	; 128
    58e8:	09 f0       	breq	.+2      	; 0x58ec <__divsf3_pse+0x56>
    58ea:	bb 0b       	sbc	r27, r27
    58ec:	80 2d       	mov	r24, r0
    58ee:	bf 01       	movw	r22, r30
    58f0:	ff 27       	eor	r31, r31
    58f2:	93 58       	subi	r25, 0x83	; 131
    58f4:	5f 4f       	sbci	r21, 0xFF	; 255
    58f6:	2a f0       	brmi	.+10     	; 0x5902 <__divsf3_pse+0x6c>
    58f8:	9e 3f       	cpi	r25, 0xFE	; 254
    58fa:	51 05       	cpc	r21, r1
    58fc:	68 f0       	brcs	.+26     	; 0x5918 <__divsf3_pse+0x82>
    58fe:	92 c0       	rjmp	.+292    	; 0x5a24 <__fp_inf>
    5900:	dc c0       	rjmp	.+440    	; 0x5aba <__fp_szero>
    5902:	5f 3f       	cpi	r21, 0xFF	; 255
    5904:	ec f3       	brlt	.-6      	; 0x5900 <__divsf3_pse+0x6a>
    5906:	98 3e       	cpi	r25, 0xE8	; 232
    5908:	dc f3       	brlt	.-10     	; 0x5900 <__divsf3_pse+0x6a>
    590a:	86 95       	lsr	r24
    590c:	77 95       	ror	r23
    590e:	67 95       	ror	r22
    5910:	b7 95       	ror	r27
    5912:	f7 95       	ror	r31
    5914:	9f 5f       	subi	r25, 0xFF	; 255
    5916:	c9 f7       	brne	.-14     	; 0x590a <__divsf3_pse+0x74>
    5918:	88 0f       	add	r24, r24
    591a:	91 1d       	adc	r25, r1
    591c:	96 95       	lsr	r25
    591e:	87 95       	ror	r24
    5920:	97 f9       	bld	r25, 7
    5922:	08 95       	ret
    5924:	e1 e0       	ldi	r30, 0x01	; 1
    5926:	66 0f       	add	r22, r22
    5928:	77 1f       	adc	r23, r23
    592a:	88 1f       	adc	r24, r24
    592c:	bb 1f       	adc	r27, r27
    592e:	62 17       	cp	r22, r18
    5930:	73 07       	cpc	r23, r19
    5932:	84 07       	cpc	r24, r20
    5934:	ba 07       	cpc	r27, r26
    5936:	20 f0       	brcs	.+8      	; 0x5940 <__divsf3_pse+0xaa>
    5938:	62 1b       	sub	r22, r18
    593a:	73 0b       	sbc	r23, r19
    593c:	84 0b       	sbc	r24, r20
    593e:	ba 0b       	sbc	r27, r26
    5940:	ee 1f       	adc	r30, r30
    5942:	88 f7       	brcc	.-30     	; 0x5926 <__divsf3_pse+0x90>
    5944:	e0 95       	com	r30
    5946:	08 95       	ret

00005948 <__fixsfsi>:
    5948:	04 d0       	rcall	.+8      	; 0x5952 <__fixunssfsi>
    594a:	68 94       	set
    594c:	b1 11       	cpse	r27, r1
    594e:	b5 c0       	rjmp	.+362    	; 0x5aba <__fp_szero>
    5950:	08 95       	ret

00005952 <__fixunssfsi>:
    5952:	98 d0       	rcall	.+304    	; 0x5a84 <__fp_splitA>
    5954:	88 f0       	brcs	.+34     	; 0x5978 <__fixunssfsi+0x26>
    5956:	9f 57       	subi	r25, 0x7F	; 127
    5958:	90 f0       	brcs	.+36     	; 0x597e <__fixunssfsi+0x2c>
    595a:	b9 2f       	mov	r27, r25
    595c:	99 27       	eor	r25, r25
    595e:	b7 51       	subi	r27, 0x17	; 23
    5960:	a0 f0       	brcs	.+40     	; 0x598a <__fixunssfsi+0x38>
    5962:	d1 f0       	breq	.+52     	; 0x5998 <__fixunssfsi+0x46>
    5964:	66 0f       	add	r22, r22
    5966:	77 1f       	adc	r23, r23
    5968:	88 1f       	adc	r24, r24
    596a:	99 1f       	adc	r25, r25
    596c:	1a f0       	brmi	.+6      	; 0x5974 <__fixunssfsi+0x22>
    596e:	ba 95       	dec	r27
    5970:	c9 f7       	brne	.-14     	; 0x5964 <__fixunssfsi+0x12>
    5972:	12 c0       	rjmp	.+36     	; 0x5998 <__fixunssfsi+0x46>
    5974:	b1 30       	cpi	r27, 0x01	; 1
    5976:	81 f0       	breq	.+32     	; 0x5998 <__fixunssfsi+0x46>
    5978:	9f d0       	rcall	.+318    	; 0x5ab8 <__fp_zero>
    597a:	b1 e0       	ldi	r27, 0x01	; 1
    597c:	08 95       	ret
    597e:	9c c0       	rjmp	.+312    	; 0x5ab8 <__fp_zero>
    5980:	67 2f       	mov	r22, r23
    5982:	78 2f       	mov	r23, r24
    5984:	88 27       	eor	r24, r24
    5986:	b8 5f       	subi	r27, 0xF8	; 248
    5988:	39 f0       	breq	.+14     	; 0x5998 <__fixunssfsi+0x46>
    598a:	b9 3f       	cpi	r27, 0xF9	; 249
    598c:	cc f3       	brlt	.-14     	; 0x5980 <__fixunssfsi+0x2e>
    598e:	86 95       	lsr	r24
    5990:	77 95       	ror	r23
    5992:	67 95       	ror	r22
    5994:	b3 95       	inc	r27
    5996:	d9 f7       	brne	.-10     	; 0x598e <__fixunssfsi+0x3c>
    5998:	3e f4       	brtc	.+14     	; 0x59a8 <__fixunssfsi+0x56>
    599a:	90 95       	com	r25
    599c:	80 95       	com	r24
    599e:	70 95       	com	r23
    59a0:	61 95       	neg	r22
    59a2:	7f 4f       	sbci	r23, 0xFF	; 255
    59a4:	8f 4f       	sbci	r24, 0xFF	; 255
    59a6:	9f 4f       	sbci	r25, 0xFF	; 255
    59a8:	08 95       	ret

000059aa <__floatunsisf>:
    59aa:	e8 94       	clt
    59ac:	09 c0       	rjmp	.+18     	; 0x59c0 <__floatsisf+0x12>

000059ae <__floatsisf>:
    59ae:	97 fb       	bst	r25, 7
    59b0:	3e f4       	brtc	.+14     	; 0x59c0 <__floatsisf+0x12>
    59b2:	90 95       	com	r25
    59b4:	80 95       	com	r24
    59b6:	70 95       	com	r23
    59b8:	61 95       	neg	r22
    59ba:	7f 4f       	sbci	r23, 0xFF	; 255
    59bc:	8f 4f       	sbci	r24, 0xFF	; 255
    59be:	9f 4f       	sbci	r25, 0xFF	; 255
    59c0:	99 23       	and	r25, r25
    59c2:	a9 f0       	breq	.+42     	; 0x59ee <__floatsisf+0x40>
    59c4:	f9 2f       	mov	r31, r25
    59c6:	96 e9       	ldi	r25, 0x96	; 150
    59c8:	bb 27       	eor	r27, r27
    59ca:	93 95       	inc	r25
    59cc:	f6 95       	lsr	r31
    59ce:	87 95       	ror	r24
    59d0:	77 95       	ror	r23
    59d2:	67 95       	ror	r22
    59d4:	b7 95       	ror	r27
    59d6:	f1 11       	cpse	r31, r1
    59d8:	f8 cf       	rjmp	.-16     	; 0x59ca <__floatsisf+0x1c>
    59da:	fa f4       	brpl	.+62     	; 0x5a1a <__floatsisf+0x6c>
    59dc:	bb 0f       	add	r27, r27
    59de:	11 f4       	brne	.+4      	; 0x59e4 <__floatsisf+0x36>
    59e0:	60 ff       	sbrs	r22, 0
    59e2:	1b c0       	rjmp	.+54     	; 0x5a1a <__floatsisf+0x6c>
    59e4:	6f 5f       	subi	r22, 0xFF	; 255
    59e6:	7f 4f       	sbci	r23, 0xFF	; 255
    59e8:	8f 4f       	sbci	r24, 0xFF	; 255
    59ea:	9f 4f       	sbci	r25, 0xFF	; 255
    59ec:	16 c0       	rjmp	.+44     	; 0x5a1a <__floatsisf+0x6c>
    59ee:	88 23       	and	r24, r24
    59f0:	11 f0       	breq	.+4      	; 0x59f6 <__floatsisf+0x48>
    59f2:	96 e9       	ldi	r25, 0x96	; 150
    59f4:	11 c0       	rjmp	.+34     	; 0x5a18 <__floatsisf+0x6a>
    59f6:	77 23       	and	r23, r23
    59f8:	21 f0       	breq	.+8      	; 0x5a02 <__floatsisf+0x54>
    59fa:	9e e8       	ldi	r25, 0x8E	; 142
    59fc:	87 2f       	mov	r24, r23
    59fe:	76 2f       	mov	r23, r22
    5a00:	05 c0       	rjmp	.+10     	; 0x5a0c <__floatsisf+0x5e>
    5a02:	66 23       	and	r22, r22
    5a04:	71 f0       	breq	.+28     	; 0x5a22 <__floatsisf+0x74>
    5a06:	96 e8       	ldi	r25, 0x86	; 134
    5a08:	86 2f       	mov	r24, r22
    5a0a:	70 e0       	ldi	r23, 0x00	; 0
    5a0c:	60 e0       	ldi	r22, 0x00	; 0
    5a0e:	2a f0       	brmi	.+10     	; 0x5a1a <__floatsisf+0x6c>
    5a10:	9a 95       	dec	r25
    5a12:	66 0f       	add	r22, r22
    5a14:	77 1f       	adc	r23, r23
    5a16:	88 1f       	adc	r24, r24
    5a18:	da f7       	brpl	.-10     	; 0x5a10 <__floatsisf+0x62>
    5a1a:	88 0f       	add	r24, r24
    5a1c:	96 95       	lsr	r25
    5a1e:	87 95       	ror	r24
    5a20:	97 f9       	bld	r25, 7
    5a22:	08 95       	ret

00005a24 <__fp_inf>:
    5a24:	97 f9       	bld	r25, 7
    5a26:	9f 67       	ori	r25, 0x7F	; 127
    5a28:	80 e8       	ldi	r24, 0x80	; 128
    5a2a:	70 e0       	ldi	r23, 0x00	; 0
    5a2c:	60 e0       	ldi	r22, 0x00	; 0
    5a2e:	08 95       	ret

00005a30 <__fp_nan>:
    5a30:	9f ef       	ldi	r25, 0xFF	; 255
    5a32:	80 ec       	ldi	r24, 0xC0	; 192
    5a34:	08 95       	ret

00005a36 <__fp_pscA>:
    5a36:	00 24       	eor	r0, r0
    5a38:	0a 94       	dec	r0
    5a3a:	16 16       	cp	r1, r22
    5a3c:	17 06       	cpc	r1, r23
    5a3e:	18 06       	cpc	r1, r24
    5a40:	09 06       	cpc	r0, r25
    5a42:	08 95       	ret

00005a44 <__fp_pscB>:
    5a44:	00 24       	eor	r0, r0
    5a46:	0a 94       	dec	r0
    5a48:	12 16       	cp	r1, r18
    5a4a:	13 06       	cpc	r1, r19
    5a4c:	14 06       	cpc	r1, r20
    5a4e:	05 06       	cpc	r0, r21
    5a50:	08 95       	ret

00005a52 <__fp_round>:
    5a52:	09 2e       	mov	r0, r25
    5a54:	03 94       	inc	r0
    5a56:	00 0c       	add	r0, r0
    5a58:	11 f4       	brne	.+4      	; 0x5a5e <__fp_round+0xc>
    5a5a:	88 23       	and	r24, r24
    5a5c:	52 f0       	brmi	.+20     	; 0x5a72 <__fp_round+0x20>
    5a5e:	bb 0f       	add	r27, r27
    5a60:	40 f4       	brcc	.+16     	; 0x5a72 <__fp_round+0x20>
    5a62:	bf 2b       	or	r27, r31
    5a64:	11 f4       	brne	.+4      	; 0x5a6a <__fp_round+0x18>
    5a66:	60 ff       	sbrs	r22, 0
    5a68:	04 c0       	rjmp	.+8      	; 0x5a72 <__fp_round+0x20>
    5a6a:	6f 5f       	subi	r22, 0xFF	; 255
    5a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    5a6e:	8f 4f       	sbci	r24, 0xFF	; 255
    5a70:	9f 4f       	sbci	r25, 0xFF	; 255
    5a72:	08 95       	ret

00005a74 <__fp_split3>:
    5a74:	57 fd       	sbrc	r21, 7
    5a76:	90 58       	subi	r25, 0x80	; 128
    5a78:	44 0f       	add	r20, r20
    5a7a:	55 1f       	adc	r21, r21
    5a7c:	59 f0       	breq	.+22     	; 0x5a94 <__fp_splitA+0x10>
    5a7e:	5f 3f       	cpi	r21, 0xFF	; 255
    5a80:	71 f0       	breq	.+28     	; 0x5a9e <__fp_splitA+0x1a>
    5a82:	47 95       	ror	r20

00005a84 <__fp_splitA>:
    5a84:	88 0f       	add	r24, r24
    5a86:	97 fb       	bst	r25, 7
    5a88:	99 1f       	adc	r25, r25
    5a8a:	61 f0       	breq	.+24     	; 0x5aa4 <__fp_splitA+0x20>
    5a8c:	9f 3f       	cpi	r25, 0xFF	; 255
    5a8e:	79 f0       	breq	.+30     	; 0x5aae <__fp_splitA+0x2a>
    5a90:	87 95       	ror	r24
    5a92:	08 95       	ret
    5a94:	12 16       	cp	r1, r18
    5a96:	13 06       	cpc	r1, r19
    5a98:	14 06       	cpc	r1, r20
    5a9a:	55 1f       	adc	r21, r21
    5a9c:	f2 cf       	rjmp	.-28     	; 0x5a82 <__fp_split3+0xe>
    5a9e:	46 95       	lsr	r20
    5aa0:	f1 df       	rcall	.-30     	; 0x5a84 <__fp_splitA>
    5aa2:	08 c0       	rjmp	.+16     	; 0x5ab4 <__fp_splitA+0x30>
    5aa4:	16 16       	cp	r1, r22
    5aa6:	17 06       	cpc	r1, r23
    5aa8:	18 06       	cpc	r1, r24
    5aaa:	99 1f       	adc	r25, r25
    5aac:	f1 cf       	rjmp	.-30     	; 0x5a90 <__fp_splitA+0xc>
    5aae:	86 95       	lsr	r24
    5ab0:	71 05       	cpc	r23, r1
    5ab2:	61 05       	cpc	r22, r1
    5ab4:	08 94       	sec
    5ab6:	08 95       	ret

00005ab8 <__fp_zero>:
    5ab8:	e8 94       	clt

00005aba <__fp_szero>:
    5aba:	bb 27       	eor	r27, r27
    5abc:	66 27       	eor	r22, r22
    5abe:	77 27       	eor	r23, r23
    5ac0:	cb 01       	movw	r24, r22
    5ac2:	97 f9       	bld	r25, 7
    5ac4:	08 95       	ret

00005ac6 <__mulsf3>:
    5ac6:	0b d0       	rcall	.+22     	; 0x5ade <__mulsf3x>
    5ac8:	c4 cf       	rjmp	.-120    	; 0x5a52 <__fp_round>
    5aca:	b5 df       	rcall	.-150    	; 0x5a36 <__fp_pscA>
    5acc:	28 f0       	brcs	.+10     	; 0x5ad8 <__mulsf3+0x12>
    5ace:	ba df       	rcall	.-140    	; 0x5a44 <__fp_pscB>
    5ad0:	18 f0       	brcs	.+6      	; 0x5ad8 <__mulsf3+0x12>
    5ad2:	95 23       	and	r25, r21
    5ad4:	09 f0       	breq	.+2      	; 0x5ad8 <__mulsf3+0x12>
    5ad6:	a6 cf       	rjmp	.-180    	; 0x5a24 <__fp_inf>
    5ad8:	ab cf       	rjmp	.-170    	; 0x5a30 <__fp_nan>
    5ada:	11 24       	eor	r1, r1
    5adc:	ee cf       	rjmp	.-36     	; 0x5aba <__fp_szero>

00005ade <__mulsf3x>:
    5ade:	ca df       	rcall	.-108    	; 0x5a74 <__fp_split3>
    5ae0:	a0 f3       	brcs	.-24     	; 0x5aca <__mulsf3+0x4>

00005ae2 <__mulsf3_pse>:
    5ae2:	95 9f       	mul	r25, r21
    5ae4:	d1 f3       	breq	.-12     	; 0x5ada <__mulsf3+0x14>
    5ae6:	95 0f       	add	r25, r21
    5ae8:	50 e0       	ldi	r21, 0x00	; 0
    5aea:	55 1f       	adc	r21, r21
    5aec:	62 9f       	mul	r22, r18
    5aee:	f0 01       	movw	r30, r0
    5af0:	72 9f       	mul	r23, r18
    5af2:	bb 27       	eor	r27, r27
    5af4:	f0 0d       	add	r31, r0
    5af6:	b1 1d       	adc	r27, r1
    5af8:	63 9f       	mul	r22, r19
    5afa:	aa 27       	eor	r26, r26
    5afc:	f0 0d       	add	r31, r0
    5afe:	b1 1d       	adc	r27, r1
    5b00:	aa 1f       	adc	r26, r26
    5b02:	64 9f       	mul	r22, r20
    5b04:	66 27       	eor	r22, r22
    5b06:	b0 0d       	add	r27, r0
    5b08:	a1 1d       	adc	r26, r1
    5b0a:	66 1f       	adc	r22, r22
    5b0c:	82 9f       	mul	r24, r18
    5b0e:	22 27       	eor	r18, r18
    5b10:	b0 0d       	add	r27, r0
    5b12:	a1 1d       	adc	r26, r1
    5b14:	62 1f       	adc	r22, r18
    5b16:	73 9f       	mul	r23, r19
    5b18:	b0 0d       	add	r27, r0
    5b1a:	a1 1d       	adc	r26, r1
    5b1c:	62 1f       	adc	r22, r18
    5b1e:	83 9f       	mul	r24, r19
    5b20:	a0 0d       	add	r26, r0
    5b22:	61 1d       	adc	r22, r1
    5b24:	22 1f       	adc	r18, r18
    5b26:	74 9f       	mul	r23, r20
    5b28:	33 27       	eor	r19, r19
    5b2a:	a0 0d       	add	r26, r0
    5b2c:	61 1d       	adc	r22, r1
    5b2e:	23 1f       	adc	r18, r19
    5b30:	84 9f       	mul	r24, r20
    5b32:	60 0d       	add	r22, r0
    5b34:	21 1d       	adc	r18, r1
    5b36:	82 2f       	mov	r24, r18
    5b38:	76 2f       	mov	r23, r22
    5b3a:	6a 2f       	mov	r22, r26
    5b3c:	11 24       	eor	r1, r1
    5b3e:	9f 57       	subi	r25, 0x7F	; 127
    5b40:	50 40       	sbci	r21, 0x00	; 0
    5b42:	8a f0       	brmi	.+34     	; 0x5b66 <__mulsf3_pse+0x84>
    5b44:	e1 f0       	breq	.+56     	; 0x5b7e <__mulsf3_pse+0x9c>
    5b46:	88 23       	and	r24, r24
    5b48:	4a f0       	brmi	.+18     	; 0x5b5c <__mulsf3_pse+0x7a>
    5b4a:	ee 0f       	add	r30, r30
    5b4c:	ff 1f       	adc	r31, r31
    5b4e:	bb 1f       	adc	r27, r27
    5b50:	66 1f       	adc	r22, r22
    5b52:	77 1f       	adc	r23, r23
    5b54:	88 1f       	adc	r24, r24
    5b56:	91 50       	subi	r25, 0x01	; 1
    5b58:	50 40       	sbci	r21, 0x00	; 0
    5b5a:	a9 f7       	brne	.-22     	; 0x5b46 <__mulsf3_pse+0x64>
    5b5c:	9e 3f       	cpi	r25, 0xFE	; 254
    5b5e:	51 05       	cpc	r21, r1
    5b60:	70 f0       	brcs	.+28     	; 0x5b7e <__mulsf3_pse+0x9c>
    5b62:	60 cf       	rjmp	.-320    	; 0x5a24 <__fp_inf>
    5b64:	aa cf       	rjmp	.-172    	; 0x5aba <__fp_szero>
    5b66:	5f 3f       	cpi	r21, 0xFF	; 255
    5b68:	ec f3       	brlt	.-6      	; 0x5b64 <__mulsf3_pse+0x82>
    5b6a:	98 3e       	cpi	r25, 0xE8	; 232
    5b6c:	dc f3       	brlt	.-10     	; 0x5b64 <__mulsf3_pse+0x82>
    5b6e:	86 95       	lsr	r24
    5b70:	77 95       	ror	r23
    5b72:	67 95       	ror	r22
    5b74:	b7 95       	ror	r27
    5b76:	f7 95       	ror	r31
    5b78:	e7 95       	ror	r30
    5b7a:	9f 5f       	subi	r25, 0xFF	; 255
    5b7c:	c1 f7       	brne	.-16     	; 0x5b6e <__mulsf3_pse+0x8c>
    5b7e:	fe 2b       	or	r31, r30
    5b80:	88 0f       	add	r24, r24
    5b82:	91 1d       	adc	r25, r1
    5b84:	96 95       	lsr	r25
    5b86:	87 95       	ror	r24
    5b88:	97 f9       	bld	r25, 7
    5b8a:	08 95       	ret

00005b8c <vfprintf>:
    5b8c:	2f 92       	push	r2
    5b8e:	3f 92       	push	r3
    5b90:	4f 92       	push	r4
    5b92:	5f 92       	push	r5
    5b94:	6f 92       	push	r6
    5b96:	7f 92       	push	r7
    5b98:	8f 92       	push	r8
    5b9a:	9f 92       	push	r9
    5b9c:	af 92       	push	r10
    5b9e:	bf 92       	push	r11
    5ba0:	cf 92       	push	r12
    5ba2:	df 92       	push	r13
    5ba4:	ef 92       	push	r14
    5ba6:	ff 92       	push	r15
    5ba8:	0f 93       	push	r16
    5baa:	1f 93       	push	r17
    5bac:	cf 93       	push	r28
    5bae:	df 93       	push	r29
    5bb0:	cd b7       	in	r28, 0x3d	; 61
    5bb2:	de b7       	in	r29, 0x3e	; 62
    5bb4:	60 97       	sbiw	r28, 0x10	; 16
    5bb6:	0f b6       	in	r0, 0x3f	; 63
    5bb8:	f8 94       	cli
    5bba:	de bf       	out	0x3e, r29	; 62
    5bbc:	0f be       	out	0x3f, r0	; 63
    5bbe:	cd bf       	out	0x3d, r28	; 61
    5bc0:	7c 01       	movw	r14, r24
    5bc2:	1b 01       	movw	r2, r22
    5bc4:	6a 01       	movw	r12, r20
    5bc6:	fc 01       	movw	r30, r24
    5bc8:	17 82       	std	Z+7, r1	; 0x07
    5bca:	16 82       	std	Z+6, r1	; 0x06
    5bcc:	83 81       	ldd	r24, Z+3	; 0x03
    5bce:	81 ff       	sbrs	r24, 1
    5bd0:	2a c3       	rjmp	.+1620   	; 0x6226 <vfprintf+0x69a>
    5bd2:	9e 01       	movw	r18, r28
    5bd4:	2f 5f       	subi	r18, 0xFF	; 255
    5bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    5bd8:	39 01       	movw	r6, r18
    5bda:	f7 01       	movw	r30, r14
    5bdc:	93 81       	ldd	r25, Z+3	; 0x03
    5bde:	f1 01       	movw	r30, r2
    5be0:	93 fd       	sbrc	r25, 3
    5be2:	85 91       	lpm	r24, Z+
    5be4:	93 ff       	sbrs	r25, 3
    5be6:	81 91       	ld	r24, Z+
    5be8:	1f 01       	movw	r2, r30
    5bea:	88 23       	and	r24, r24
    5bec:	09 f4       	brne	.+2      	; 0x5bf0 <vfprintf+0x64>
    5bee:	17 c3       	rjmp	.+1582   	; 0x621e <vfprintf+0x692>
    5bf0:	85 32       	cpi	r24, 0x25	; 37
    5bf2:	39 f4       	brne	.+14     	; 0x5c02 <vfprintf+0x76>
    5bf4:	93 fd       	sbrc	r25, 3
    5bf6:	85 91       	lpm	r24, Z+
    5bf8:	93 ff       	sbrs	r25, 3
    5bfa:	81 91       	ld	r24, Z+
    5bfc:	1f 01       	movw	r2, r30
    5bfe:	85 32       	cpi	r24, 0x25	; 37
    5c00:	31 f4       	brne	.+12     	; 0x5c0e <vfprintf+0x82>
    5c02:	b7 01       	movw	r22, r14
    5c04:	90 e0       	ldi	r25, 0x00	; 0
    5c06:	1d d6       	rcall	.+3130   	; 0x6842 <fputc>
    5c08:	56 01       	movw	r10, r12
    5c0a:	65 01       	movw	r12, r10
    5c0c:	e6 cf       	rjmp	.-52     	; 0x5bda <vfprintf+0x4e>
    5c0e:	10 e0       	ldi	r17, 0x00	; 0
    5c10:	51 2c       	mov	r5, r1
    5c12:	91 2c       	mov	r9, r1
    5c14:	ff e1       	ldi	r31, 0x1F	; 31
    5c16:	f9 15       	cp	r31, r9
    5c18:	d8 f0       	brcs	.+54     	; 0x5c50 <vfprintf+0xc4>
    5c1a:	8b 32       	cpi	r24, 0x2B	; 43
    5c1c:	79 f0       	breq	.+30     	; 0x5c3c <vfprintf+0xb0>
    5c1e:	38 f4       	brcc	.+14     	; 0x5c2e <vfprintf+0xa2>
    5c20:	80 32       	cpi	r24, 0x20	; 32
    5c22:	79 f0       	breq	.+30     	; 0x5c42 <vfprintf+0xb6>
    5c24:	83 32       	cpi	r24, 0x23	; 35
    5c26:	a1 f4       	brne	.+40     	; 0x5c50 <vfprintf+0xc4>
    5c28:	f9 2d       	mov	r31, r9
    5c2a:	f0 61       	ori	r31, 0x10	; 16
    5c2c:	2e c0       	rjmp	.+92     	; 0x5c8a <vfprintf+0xfe>
    5c2e:	8d 32       	cpi	r24, 0x2D	; 45
    5c30:	61 f0       	breq	.+24     	; 0x5c4a <vfprintf+0xbe>
    5c32:	80 33       	cpi	r24, 0x30	; 48
    5c34:	69 f4       	brne	.+26     	; 0x5c50 <vfprintf+0xc4>
    5c36:	29 2d       	mov	r18, r9
    5c38:	21 60       	ori	r18, 0x01	; 1
    5c3a:	2d c0       	rjmp	.+90     	; 0x5c96 <vfprintf+0x10a>
    5c3c:	39 2d       	mov	r19, r9
    5c3e:	32 60       	ori	r19, 0x02	; 2
    5c40:	93 2e       	mov	r9, r19
    5c42:	89 2d       	mov	r24, r9
    5c44:	84 60       	ori	r24, 0x04	; 4
    5c46:	98 2e       	mov	r9, r24
    5c48:	2a c0       	rjmp	.+84     	; 0x5c9e <vfprintf+0x112>
    5c4a:	e9 2d       	mov	r30, r9
    5c4c:	e8 60       	ori	r30, 0x08	; 8
    5c4e:	15 c0       	rjmp	.+42     	; 0x5c7a <vfprintf+0xee>
    5c50:	97 fc       	sbrc	r9, 7
    5c52:	2d c0       	rjmp	.+90     	; 0x5cae <vfprintf+0x122>
    5c54:	20 ed       	ldi	r18, 0xD0	; 208
    5c56:	28 0f       	add	r18, r24
    5c58:	2a 30       	cpi	r18, 0x0A	; 10
    5c5a:	88 f4       	brcc	.+34     	; 0x5c7e <vfprintf+0xf2>
    5c5c:	96 fe       	sbrs	r9, 6
    5c5e:	06 c0       	rjmp	.+12     	; 0x5c6c <vfprintf+0xe0>
    5c60:	3a e0       	ldi	r19, 0x0A	; 10
    5c62:	13 9f       	mul	r17, r19
    5c64:	20 0d       	add	r18, r0
    5c66:	11 24       	eor	r1, r1
    5c68:	12 2f       	mov	r17, r18
    5c6a:	19 c0       	rjmp	.+50     	; 0x5c9e <vfprintf+0x112>
    5c6c:	8a e0       	ldi	r24, 0x0A	; 10
    5c6e:	58 9e       	mul	r5, r24
    5c70:	20 0d       	add	r18, r0
    5c72:	11 24       	eor	r1, r1
    5c74:	52 2e       	mov	r5, r18
    5c76:	e9 2d       	mov	r30, r9
    5c78:	e0 62       	ori	r30, 0x20	; 32
    5c7a:	9e 2e       	mov	r9, r30
    5c7c:	10 c0       	rjmp	.+32     	; 0x5c9e <vfprintf+0x112>
    5c7e:	8e 32       	cpi	r24, 0x2E	; 46
    5c80:	31 f4       	brne	.+12     	; 0x5c8e <vfprintf+0x102>
    5c82:	96 fc       	sbrc	r9, 6
    5c84:	cc c2       	rjmp	.+1432   	; 0x621e <vfprintf+0x692>
    5c86:	f9 2d       	mov	r31, r9
    5c88:	f0 64       	ori	r31, 0x40	; 64
    5c8a:	9f 2e       	mov	r9, r31
    5c8c:	08 c0       	rjmp	.+16     	; 0x5c9e <vfprintf+0x112>
    5c8e:	8c 36       	cpi	r24, 0x6C	; 108
    5c90:	21 f4       	brne	.+8      	; 0x5c9a <vfprintf+0x10e>
    5c92:	29 2d       	mov	r18, r9
    5c94:	20 68       	ori	r18, 0x80	; 128
    5c96:	92 2e       	mov	r9, r18
    5c98:	02 c0       	rjmp	.+4      	; 0x5c9e <vfprintf+0x112>
    5c9a:	88 36       	cpi	r24, 0x68	; 104
    5c9c:	41 f4       	brne	.+16     	; 0x5cae <vfprintf+0x122>
    5c9e:	f1 01       	movw	r30, r2
    5ca0:	93 fd       	sbrc	r25, 3
    5ca2:	85 91       	lpm	r24, Z+
    5ca4:	93 ff       	sbrs	r25, 3
    5ca6:	81 91       	ld	r24, Z+
    5ca8:	1f 01       	movw	r2, r30
    5caa:	81 11       	cpse	r24, r1
    5cac:	b3 cf       	rjmp	.-154    	; 0x5c14 <vfprintf+0x88>
    5cae:	9b eb       	ldi	r25, 0xBB	; 187
    5cb0:	98 0f       	add	r25, r24
    5cb2:	93 30       	cpi	r25, 0x03	; 3
    5cb4:	20 f4       	brcc	.+8      	; 0x5cbe <vfprintf+0x132>
    5cb6:	99 2d       	mov	r25, r9
    5cb8:	90 61       	ori	r25, 0x10	; 16
    5cba:	80 5e       	subi	r24, 0xE0	; 224
    5cbc:	07 c0       	rjmp	.+14     	; 0x5ccc <vfprintf+0x140>
    5cbe:	9b e9       	ldi	r25, 0x9B	; 155
    5cc0:	98 0f       	add	r25, r24
    5cc2:	93 30       	cpi	r25, 0x03	; 3
    5cc4:	08 f0       	brcs	.+2      	; 0x5cc8 <vfprintf+0x13c>
    5cc6:	59 c1       	rjmp	.+690    	; 0x5f7a <vfprintf+0x3ee>
    5cc8:	99 2d       	mov	r25, r9
    5cca:	9f 7e       	andi	r25, 0xEF	; 239
    5ccc:	96 ff       	sbrs	r25, 6
    5cce:	16 e0       	ldi	r17, 0x06	; 6
    5cd0:	9f 73       	andi	r25, 0x3F	; 63
    5cd2:	99 2e       	mov	r9, r25
    5cd4:	85 36       	cpi	r24, 0x65	; 101
    5cd6:	19 f4       	brne	.+6      	; 0x5cde <vfprintf+0x152>
    5cd8:	90 64       	ori	r25, 0x40	; 64
    5cda:	99 2e       	mov	r9, r25
    5cdc:	08 c0       	rjmp	.+16     	; 0x5cee <vfprintf+0x162>
    5cde:	86 36       	cpi	r24, 0x66	; 102
    5ce0:	21 f4       	brne	.+8      	; 0x5cea <vfprintf+0x15e>
    5ce2:	39 2f       	mov	r19, r25
    5ce4:	30 68       	ori	r19, 0x80	; 128
    5ce6:	93 2e       	mov	r9, r19
    5ce8:	02 c0       	rjmp	.+4      	; 0x5cee <vfprintf+0x162>
    5cea:	11 11       	cpse	r17, r1
    5cec:	11 50       	subi	r17, 0x01	; 1
    5cee:	97 fe       	sbrs	r9, 7
    5cf0:	07 c0       	rjmp	.+14     	; 0x5d00 <vfprintf+0x174>
    5cf2:	1c 33       	cpi	r17, 0x3C	; 60
    5cf4:	50 f4       	brcc	.+20     	; 0x5d0a <vfprintf+0x17e>
    5cf6:	44 24       	eor	r4, r4
    5cf8:	43 94       	inc	r4
    5cfa:	41 0e       	add	r4, r17
    5cfc:	27 e0       	ldi	r18, 0x07	; 7
    5cfe:	0b c0       	rjmp	.+22     	; 0x5d16 <vfprintf+0x18a>
    5d00:	18 30       	cpi	r17, 0x08	; 8
    5d02:	38 f0       	brcs	.+14     	; 0x5d12 <vfprintf+0x186>
    5d04:	27 e0       	ldi	r18, 0x07	; 7
    5d06:	17 e0       	ldi	r17, 0x07	; 7
    5d08:	05 c0       	rjmp	.+10     	; 0x5d14 <vfprintf+0x188>
    5d0a:	27 e0       	ldi	r18, 0x07	; 7
    5d0c:	9c e3       	ldi	r25, 0x3C	; 60
    5d0e:	49 2e       	mov	r4, r25
    5d10:	02 c0       	rjmp	.+4      	; 0x5d16 <vfprintf+0x18a>
    5d12:	21 2f       	mov	r18, r17
    5d14:	41 2c       	mov	r4, r1
    5d16:	56 01       	movw	r10, r12
    5d18:	84 e0       	ldi	r24, 0x04	; 4
    5d1a:	a8 0e       	add	r10, r24
    5d1c:	b1 1c       	adc	r11, r1
    5d1e:	f6 01       	movw	r30, r12
    5d20:	60 81       	ld	r22, Z
    5d22:	71 81       	ldd	r23, Z+1	; 0x01
    5d24:	82 81       	ldd	r24, Z+2	; 0x02
    5d26:	93 81       	ldd	r25, Z+3	; 0x03
    5d28:	04 2d       	mov	r16, r4
    5d2a:	a3 01       	movw	r20, r6
    5d2c:	3d d4       	rcall	.+2170   	; 0x65a8 <__ftoa_engine>
    5d2e:	6c 01       	movw	r12, r24
    5d30:	f9 81       	ldd	r31, Y+1	; 0x01
    5d32:	fc 87       	std	Y+12, r31	; 0x0c
    5d34:	f0 ff       	sbrs	r31, 0
    5d36:	02 c0       	rjmp	.+4      	; 0x5d3c <vfprintf+0x1b0>
    5d38:	f3 ff       	sbrs	r31, 3
    5d3a:	06 c0       	rjmp	.+12     	; 0x5d48 <vfprintf+0x1bc>
    5d3c:	91 fc       	sbrc	r9, 1
    5d3e:	06 c0       	rjmp	.+12     	; 0x5d4c <vfprintf+0x1c0>
    5d40:	92 fe       	sbrs	r9, 2
    5d42:	06 c0       	rjmp	.+12     	; 0x5d50 <vfprintf+0x1c4>
    5d44:	00 e2       	ldi	r16, 0x20	; 32
    5d46:	05 c0       	rjmp	.+10     	; 0x5d52 <vfprintf+0x1c6>
    5d48:	0d e2       	ldi	r16, 0x2D	; 45
    5d4a:	03 c0       	rjmp	.+6      	; 0x5d52 <vfprintf+0x1c6>
    5d4c:	0b e2       	ldi	r16, 0x2B	; 43
    5d4e:	01 c0       	rjmp	.+2      	; 0x5d52 <vfprintf+0x1c6>
    5d50:	00 e0       	ldi	r16, 0x00	; 0
    5d52:	8c 85       	ldd	r24, Y+12	; 0x0c
    5d54:	8c 70       	andi	r24, 0x0C	; 12
    5d56:	19 f0       	breq	.+6      	; 0x5d5e <vfprintf+0x1d2>
    5d58:	01 11       	cpse	r16, r1
    5d5a:	43 c2       	rjmp	.+1158   	; 0x61e2 <vfprintf+0x656>
    5d5c:	80 c2       	rjmp	.+1280   	; 0x625e <vfprintf+0x6d2>
    5d5e:	97 fe       	sbrs	r9, 7
    5d60:	10 c0       	rjmp	.+32     	; 0x5d82 <vfprintf+0x1f6>
    5d62:	4c 0c       	add	r4, r12
    5d64:	fc 85       	ldd	r31, Y+12	; 0x0c
    5d66:	f4 ff       	sbrs	r31, 4
    5d68:	04 c0       	rjmp	.+8      	; 0x5d72 <vfprintf+0x1e6>
    5d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    5d6c:	81 33       	cpi	r24, 0x31	; 49
    5d6e:	09 f4       	brne	.+2      	; 0x5d72 <vfprintf+0x1e6>
    5d70:	4a 94       	dec	r4
    5d72:	14 14       	cp	r1, r4
    5d74:	74 f5       	brge	.+92     	; 0x5dd2 <vfprintf+0x246>
    5d76:	28 e0       	ldi	r18, 0x08	; 8
    5d78:	24 15       	cp	r18, r4
    5d7a:	78 f5       	brcc	.+94     	; 0x5dda <vfprintf+0x24e>
    5d7c:	88 e0       	ldi	r24, 0x08	; 8
    5d7e:	48 2e       	mov	r4, r24
    5d80:	2c c0       	rjmp	.+88     	; 0x5dda <vfprintf+0x24e>
    5d82:	96 fc       	sbrc	r9, 6
    5d84:	2a c0       	rjmp	.+84     	; 0x5dda <vfprintf+0x24e>
    5d86:	81 2f       	mov	r24, r17
    5d88:	90 e0       	ldi	r25, 0x00	; 0
    5d8a:	8c 15       	cp	r24, r12
    5d8c:	9d 05       	cpc	r25, r13
    5d8e:	9c f0       	brlt	.+38     	; 0x5db6 <vfprintf+0x22a>
    5d90:	3c ef       	ldi	r19, 0xFC	; 252
    5d92:	c3 16       	cp	r12, r19
    5d94:	3f ef       	ldi	r19, 0xFF	; 255
    5d96:	d3 06       	cpc	r13, r19
    5d98:	74 f0       	brlt	.+28     	; 0x5db6 <vfprintf+0x22a>
    5d9a:	89 2d       	mov	r24, r9
    5d9c:	80 68       	ori	r24, 0x80	; 128
    5d9e:	98 2e       	mov	r9, r24
    5da0:	0a c0       	rjmp	.+20     	; 0x5db6 <vfprintf+0x22a>
    5da2:	e2 e0       	ldi	r30, 0x02	; 2
    5da4:	f0 e0       	ldi	r31, 0x00	; 0
    5da6:	ec 0f       	add	r30, r28
    5da8:	fd 1f       	adc	r31, r29
    5daa:	e1 0f       	add	r30, r17
    5dac:	f1 1d       	adc	r31, r1
    5dae:	80 81       	ld	r24, Z
    5db0:	80 33       	cpi	r24, 0x30	; 48
    5db2:	19 f4       	brne	.+6      	; 0x5dba <vfprintf+0x22e>
    5db4:	11 50       	subi	r17, 0x01	; 1
    5db6:	11 11       	cpse	r17, r1
    5db8:	f4 cf       	rjmp	.-24     	; 0x5da2 <vfprintf+0x216>
    5dba:	97 fe       	sbrs	r9, 7
    5dbc:	0e c0       	rjmp	.+28     	; 0x5dda <vfprintf+0x24e>
    5dbe:	44 24       	eor	r4, r4
    5dc0:	43 94       	inc	r4
    5dc2:	41 0e       	add	r4, r17
    5dc4:	81 2f       	mov	r24, r17
    5dc6:	90 e0       	ldi	r25, 0x00	; 0
    5dc8:	c8 16       	cp	r12, r24
    5dca:	d9 06       	cpc	r13, r25
    5dcc:	2c f4       	brge	.+10     	; 0x5dd8 <vfprintf+0x24c>
    5dce:	1c 19       	sub	r17, r12
    5dd0:	04 c0       	rjmp	.+8      	; 0x5dda <vfprintf+0x24e>
    5dd2:	44 24       	eor	r4, r4
    5dd4:	43 94       	inc	r4
    5dd6:	01 c0       	rjmp	.+2      	; 0x5dda <vfprintf+0x24e>
    5dd8:	10 e0       	ldi	r17, 0x00	; 0
    5dda:	97 fe       	sbrs	r9, 7
    5ddc:	06 c0       	rjmp	.+12     	; 0x5dea <vfprintf+0x25e>
    5dde:	1c 14       	cp	r1, r12
    5de0:	1d 04       	cpc	r1, r13
    5de2:	34 f4       	brge	.+12     	; 0x5df0 <vfprintf+0x264>
    5de4:	c6 01       	movw	r24, r12
    5de6:	01 96       	adiw	r24, 0x01	; 1
    5de8:	05 c0       	rjmp	.+10     	; 0x5df4 <vfprintf+0x268>
    5dea:	85 e0       	ldi	r24, 0x05	; 5
    5dec:	90 e0       	ldi	r25, 0x00	; 0
    5dee:	02 c0       	rjmp	.+4      	; 0x5df4 <vfprintf+0x268>
    5df0:	81 e0       	ldi	r24, 0x01	; 1
    5df2:	90 e0       	ldi	r25, 0x00	; 0
    5df4:	01 11       	cpse	r16, r1
    5df6:	01 96       	adiw	r24, 0x01	; 1
    5df8:	11 23       	and	r17, r17
    5dfa:	31 f0       	breq	.+12     	; 0x5e08 <vfprintf+0x27c>
    5dfc:	21 2f       	mov	r18, r17
    5dfe:	30 e0       	ldi	r19, 0x00	; 0
    5e00:	2f 5f       	subi	r18, 0xFF	; 255
    5e02:	3f 4f       	sbci	r19, 0xFF	; 255
    5e04:	82 0f       	add	r24, r18
    5e06:	93 1f       	adc	r25, r19
    5e08:	25 2d       	mov	r18, r5
    5e0a:	30 e0       	ldi	r19, 0x00	; 0
    5e0c:	82 17       	cp	r24, r18
    5e0e:	93 07       	cpc	r25, r19
    5e10:	14 f4       	brge	.+4      	; 0x5e16 <vfprintf+0x28a>
    5e12:	58 1a       	sub	r5, r24
    5e14:	01 c0       	rjmp	.+2      	; 0x5e18 <vfprintf+0x28c>
    5e16:	51 2c       	mov	r5, r1
    5e18:	89 2d       	mov	r24, r9
    5e1a:	89 70       	andi	r24, 0x09	; 9
    5e1c:	41 f4       	brne	.+16     	; 0x5e2e <vfprintf+0x2a2>
    5e1e:	55 20       	and	r5, r5
    5e20:	31 f0       	breq	.+12     	; 0x5e2e <vfprintf+0x2a2>
    5e22:	b7 01       	movw	r22, r14
    5e24:	80 e2       	ldi	r24, 0x20	; 32
    5e26:	90 e0       	ldi	r25, 0x00	; 0
    5e28:	0c d5       	rcall	.+2584   	; 0x6842 <fputc>
    5e2a:	5a 94       	dec	r5
    5e2c:	f8 cf       	rjmp	.-16     	; 0x5e1e <vfprintf+0x292>
    5e2e:	00 23       	and	r16, r16
    5e30:	21 f0       	breq	.+8      	; 0x5e3a <vfprintf+0x2ae>
    5e32:	b7 01       	movw	r22, r14
    5e34:	80 2f       	mov	r24, r16
    5e36:	90 e0       	ldi	r25, 0x00	; 0
    5e38:	04 d5       	rcall	.+2568   	; 0x6842 <fputc>
    5e3a:	93 fc       	sbrc	r9, 3
    5e3c:	08 c0       	rjmp	.+16     	; 0x5e4e <vfprintf+0x2c2>
    5e3e:	55 20       	and	r5, r5
    5e40:	31 f0       	breq	.+12     	; 0x5e4e <vfprintf+0x2c2>
    5e42:	b7 01       	movw	r22, r14
    5e44:	80 e3       	ldi	r24, 0x30	; 48
    5e46:	90 e0       	ldi	r25, 0x00	; 0
    5e48:	fc d4       	rcall	.+2552   	; 0x6842 <fputc>
    5e4a:	5a 94       	dec	r5
    5e4c:	f8 cf       	rjmp	.-16     	; 0x5e3e <vfprintf+0x2b2>
    5e4e:	97 fe       	sbrs	r9, 7
    5e50:	4a c0       	rjmp	.+148    	; 0x5ee6 <vfprintf+0x35a>
    5e52:	46 01       	movw	r8, r12
    5e54:	d7 fe       	sbrs	r13, 7
    5e56:	02 c0       	rjmp	.+4      	; 0x5e5c <vfprintf+0x2d0>
    5e58:	81 2c       	mov	r8, r1
    5e5a:	91 2c       	mov	r9, r1
    5e5c:	c6 01       	movw	r24, r12
    5e5e:	88 19       	sub	r24, r8
    5e60:	99 09       	sbc	r25, r9
    5e62:	f3 01       	movw	r30, r6
    5e64:	e8 0f       	add	r30, r24
    5e66:	f9 1f       	adc	r31, r25
    5e68:	fe 87       	std	Y+14, r31	; 0x0e
    5e6a:	ed 87       	std	Y+13, r30	; 0x0d
    5e6c:	96 01       	movw	r18, r12
    5e6e:	24 19       	sub	r18, r4
    5e70:	31 09       	sbc	r19, r1
    5e72:	38 8b       	std	Y+16, r19	; 0x10
    5e74:	2f 87       	std	Y+15, r18	; 0x0f
    5e76:	01 2f       	mov	r16, r17
    5e78:	10 e0       	ldi	r17, 0x00	; 0
    5e7a:	11 95       	neg	r17
    5e7c:	01 95       	neg	r16
    5e7e:	11 09       	sbc	r17, r1
    5e80:	3f ef       	ldi	r19, 0xFF	; 255
    5e82:	83 16       	cp	r8, r19
    5e84:	93 06       	cpc	r9, r19
    5e86:	21 f4       	brne	.+8      	; 0x5e90 <vfprintf+0x304>
    5e88:	b7 01       	movw	r22, r14
    5e8a:	8e e2       	ldi	r24, 0x2E	; 46
    5e8c:	90 e0       	ldi	r25, 0x00	; 0
    5e8e:	d9 d4       	rcall	.+2482   	; 0x6842 <fputc>
    5e90:	c8 14       	cp	r12, r8
    5e92:	d9 04       	cpc	r13, r9
    5e94:	4c f0       	brlt	.+18     	; 0x5ea8 <vfprintf+0x31c>
    5e96:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e98:	98 89       	ldd	r25, Y+16	; 0x10
    5e9a:	88 15       	cp	r24, r8
    5e9c:	99 05       	cpc	r25, r9
    5e9e:	24 f4       	brge	.+8      	; 0x5ea8 <vfprintf+0x31c>
    5ea0:	ed 85       	ldd	r30, Y+13	; 0x0d
    5ea2:	fe 85       	ldd	r31, Y+14	; 0x0e
    5ea4:	81 81       	ldd	r24, Z+1	; 0x01
    5ea6:	01 c0       	rjmp	.+2      	; 0x5eaa <vfprintf+0x31e>
    5ea8:	80 e3       	ldi	r24, 0x30	; 48
    5eaa:	f1 e0       	ldi	r31, 0x01	; 1
    5eac:	8f 1a       	sub	r8, r31
    5eae:	91 08       	sbc	r9, r1
    5eb0:	2d 85       	ldd	r18, Y+13	; 0x0d
    5eb2:	3e 85       	ldd	r19, Y+14	; 0x0e
    5eb4:	2f 5f       	subi	r18, 0xFF	; 255
    5eb6:	3f 4f       	sbci	r19, 0xFF	; 255
    5eb8:	3e 87       	std	Y+14, r19	; 0x0e
    5eba:	2d 87       	std	Y+13, r18	; 0x0d
    5ebc:	80 16       	cp	r8, r16
    5ebe:	91 06       	cpc	r9, r17
    5ec0:	24 f0       	brlt	.+8      	; 0x5eca <vfprintf+0x33e>
    5ec2:	b7 01       	movw	r22, r14
    5ec4:	90 e0       	ldi	r25, 0x00	; 0
    5ec6:	bd d4       	rcall	.+2426   	; 0x6842 <fputc>
    5ec8:	db cf       	rjmp	.-74     	; 0x5e80 <vfprintf+0x2f4>
    5eca:	c8 14       	cp	r12, r8
    5ecc:	d9 04       	cpc	r13, r9
    5ece:	41 f4       	brne	.+16     	; 0x5ee0 <vfprintf+0x354>
    5ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    5ed2:	96 33       	cpi	r25, 0x36	; 54
    5ed4:	20 f4       	brcc	.+8      	; 0x5ede <vfprintf+0x352>
    5ed6:	95 33       	cpi	r25, 0x35	; 53
    5ed8:	19 f4       	brne	.+6      	; 0x5ee0 <vfprintf+0x354>
    5eda:	3c 85       	ldd	r19, Y+12	; 0x0c
    5edc:	34 ff       	sbrs	r19, 4
    5ede:	81 e3       	ldi	r24, 0x31	; 49
    5ee0:	b7 01       	movw	r22, r14
    5ee2:	90 e0       	ldi	r25, 0x00	; 0
    5ee4:	48 c0       	rjmp	.+144    	; 0x5f76 <vfprintf+0x3ea>
    5ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    5ee8:	81 33       	cpi	r24, 0x31	; 49
    5eea:	19 f0       	breq	.+6      	; 0x5ef2 <vfprintf+0x366>
    5eec:	9c 85       	ldd	r25, Y+12	; 0x0c
    5eee:	9f 7e       	andi	r25, 0xEF	; 239
    5ef0:	9c 87       	std	Y+12, r25	; 0x0c
    5ef2:	b7 01       	movw	r22, r14
    5ef4:	90 e0       	ldi	r25, 0x00	; 0
    5ef6:	a5 d4       	rcall	.+2378   	; 0x6842 <fputc>
    5ef8:	11 11       	cpse	r17, r1
    5efa:	05 c0       	rjmp	.+10     	; 0x5f06 <vfprintf+0x37a>
    5efc:	94 fc       	sbrc	r9, 4
    5efe:	16 c0       	rjmp	.+44     	; 0x5f2c <vfprintf+0x3a0>
    5f00:	85 e6       	ldi	r24, 0x65	; 101
    5f02:	90 e0       	ldi	r25, 0x00	; 0
    5f04:	15 c0       	rjmp	.+42     	; 0x5f30 <vfprintf+0x3a4>
    5f06:	b7 01       	movw	r22, r14
    5f08:	8e e2       	ldi	r24, 0x2E	; 46
    5f0a:	90 e0       	ldi	r25, 0x00	; 0
    5f0c:	9a d4       	rcall	.+2356   	; 0x6842 <fputc>
    5f0e:	1e 5f       	subi	r17, 0xFE	; 254
    5f10:	82 e0       	ldi	r24, 0x02	; 2
    5f12:	01 e0       	ldi	r16, 0x01	; 1
    5f14:	08 0f       	add	r16, r24
    5f16:	f3 01       	movw	r30, r6
    5f18:	e8 0f       	add	r30, r24
    5f1a:	f1 1d       	adc	r31, r1
    5f1c:	80 81       	ld	r24, Z
    5f1e:	b7 01       	movw	r22, r14
    5f20:	90 e0       	ldi	r25, 0x00	; 0
    5f22:	8f d4       	rcall	.+2334   	; 0x6842 <fputc>
    5f24:	80 2f       	mov	r24, r16
    5f26:	01 13       	cpse	r16, r17
    5f28:	f4 cf       	rjmp	.-24     	; 0x5f12 <vfprintf+0x386>
    5f2a:	e8 cf       	rjmp	.-48     	; 0x5efc <vfprintf+0x370>
    5f2c:	85 e4       	ldi	r24, 0x45	; 69
    5f2e:	90 e0       	ldi	r25, 0x00	; 0
    5f30:	b7 01       	movw	r22, r14
    5f32:	87 d4       	rcall	.+2318   	; 0x6842 <fputc>
    5f34:	d7 fc       	sbrc	r13, 7
    5f36:	06 c0       	rjmp	.+12     	; 0x5f44 <vfprintf+0x3b8>
    5f38:	c1 14       	cp	r12, r1
    5f3a:	d1 04       	cpc	r13, r1
    5f3c:	41 f4       	brne	.+16     	; 0x5f4e <vfprintf+0x3c2>
    5f3e:	ec 85       	ldd	r30, Y+12	; 0x0c
    5f40:	e4 ff       	sbrs	r30, 4
    5f42:	05 c0       	rjmp	.+10     	; 0x5f4e <vfprintf+0x3c2>
    5f44:	d1 94       	neg	r13
    5f46:	c1 94       	neg	r12
    5f48:	d1 08       	sbc	r13, r1
    5f4a:	8d e2       	ldi	r24, 0x2D	; 45
    5f4c:	01 c0       	rjmp	.+2      	; 0x5f50 <vfprintf+0x3c4>
    5f4e:	8b e2       	ldi	r24, 0x2B	; 43
    5f50:	b7 01       	movw	r22, r14
    5f52:	90 e0       	ldi	r25, 0x00	; 0
    5f54:	76 d4       	rcall	.+2284   	; 0x6842 <fputc>
    5f56:	80 e3       	ldi	r24, 0x30	; 48
    5f58:	2a e0       	ldi	r18, 0x0A	; 10
    5f5a:	c2 16       	cp	r12, r18
    5f5c:	d1 04       	cpc	r13, r1
    5f5e:	2c f0       	brlt	.+10     	; 0x5f6a <vfprintf+0x3de>
    5f60:	8f 5f       	subi	r24, 0xFF	; 255
    5f62:	fa e0       	ldi	r31, 0x0A	; 10
    5f64:	cf 1a       	sub	r12, r31
    5f66:	d1 08       	sbc	r13, r1
    5f68:	f7 cf       	rjmp	.-18     	; 0x5f58 <vfprintf+0x3cc>
    5f6a:	b7 01       	movw	r22, r14
    5f6c:	90 e0       	ldi	r25, 0x00	; 0
    5f6e:	69 d4       	rcall	.+2258   	; 0x6842 <fputc>
    5f70:	b7 01       	movw	r22, r14
    5f72:	c6 01       	movw	r24, r12
    5f74:	c0 96       	adiw	r24, 0x30	; 48
    5f76:	65 d4       	rcall	.+2250   	; 0x6842 <fputc>
    5f78:	49 c1       	rjmp	.+658    	; 0x620c <vfprintf+0x680>
    5f7a:	83 36       	cpi	r24, 0x63	; 99
    5f7c:	31 f0       	breq	.+12     	; 0x5f8a <vfprintf+0x3fe>
    5f7e:	83 37       	cpi	r24, 0x73	; 115
    5f80:	79 f0       	breq	.+30     	; 0x5fa0 <vfprintf+0x414>
    5f82:	83 35       	cpi	r24, 0x53	; 83
    5f84:	09 f0       	breq	.+2      	; 0x5f88 <vfprintf+0x3fc>
    5f86:	52 c0       	rjmp	.+164    	; 0x602c <vfprintf+0x4a0>
    5f88:	1f c0       	rjmp	.+62     	; 0x5fc8 <vfprintf+0x43c>
    5f8a:	56 01       	movw	r10, r12
    5f8c:	32 e0       	ldi	r19, 0x02	; 2
    5f8e:	a3 0e       	add	r10, r19
    5f90:	b1 1c       	adc	r11, r1
    5f92:	f6 01       	movw	r30, r12
    5f94:	80 81       	ld	r24, Z
    5f96:	89 83       	std	Y+1, r24	; 0x01
    5f98:	01 e0       	ldi	r16, 0x01	; 1
    5f9a:	10 e0       	ldi	r17, 0x00	; 0
    5f9c:	63 01       	movw	r12, r6
    5f9e:	11 c0       	rjmp	.+34     	; 0x5fc2 <vfprintf+0x436>
    5fa0:	56 01       	movw	r10, r12
    5fa2:	f2 e0       	ldi	r31, 0x02	; 2
    5fa4:	af 0e       	add	r10, r31
    5fa6:	b1 1c       	adc	r11, r1
    5fa8:	f6 01       	movw	r30, r12
    5faa:	c0 80       	ld	r12, Z
    5fac:	d1 80       	ldd	r13, Z+1	; 0x01
    5fae:	96 fe       	sbrs	r9, 6
    5fb0:	03 c0       	rjmp	.+6      	; 0x5fb8 <vfprintf+0x42c>
    5fb2:	61 2f       	mov	r22, r17
    5fb4:	70 e0       	ldi	r23, 0x00	; 0
    5fb6:	02 c0       	rjmp	.+4      	; 0x5fbc <vfprintf+0x430>
    5fb8:	6f ef       	ldi	r22, 0xFF	; 255
    5fba:	7f ef       	ldi	r23, 0xFF	; 255
    5fbc:	c6 01       	movw	r24, r12
    5fbe:	36 d4       	rcall	.+2156   	; 0x682c <strnlen>
    5fc0:	8c 01       	movw	r16, r24
    5fc2:	f9 2d       	mov	r31, r9
    5fc4:	ff 77       	andi	r31, 0x7F	; 127
    5fc6:	13 c0       	rjmp	.+38     	; 0x5fee <vfprintf+0x462>
    5fc8:	56 01       	movw	r10, r12
    5fca:	22 e0       	ldi	r18, 0x02	; 2
    5fcc:	a2 0e       	add	r10, r18
    5fce:	b1 1c       	adc	r11, r1
    5fd0:	f6 01       	movw	r30, r12
    5fd2:	c0 80       	ld	r12, Z
    5fd4:	d1 80       	ldd	r13, Z+1	; 0x01
    5fd6:	96 fe       	sbrs	r9, 6
    5fd8:	03 c0       	rjmp	.+6      	; 0x5fe0 <vfprintf+0x454>
    5fda:	61 2f       	mov	r22, r17
    5fdc:	70 e0       	ldi	r23, 0x00	; 0
    5fde:	02 c0       	rjmp	.+4      	; 0x5fe4 <vfprintf+0x458>
    5fe0:	6f ef       	ldi	r22, 0xFF	; 255
    5fe2:	7f ef       	ldi	r23, 0xFF	; 255
    5fe4:	c6 01       	movw	r24, r12
    5fe6:	b8 d3       	rcall	.+1904   	; 0x6758 <strnlen_P>
    5fe8:	8c 01       	movw	r16, r24
    5fea:	f9 2d       	mov	r31, r9
    5fec:	f0 68       	ori	r31, 0x80	; 128
    5fee:	9f 2e       	mov	r9, r31
    5ff0:	f3 fd       	sbrc	r31, 3
    5ff2:	18 c0       	rjmp	.+48     	; 0x6024 <vfprintf+0x498>
    5ff4:	85 2d       	mov	r24, r5
    5ff6:	90 e0       	ldi	r25, 0x00	; 0
    5ff8:	08 17       	cp	r16, r24
    5ffa:	19 07       	cpc	r17, r25
    5ffc:	98 f4       	brcc	.+38     	; 0x6024 <vfprintf+0x498>
    5ffe:	b7 01       	movw	r22, r14
    6000:	80 e2       	ldi	r24, 0x20	; 32
    6002:	90 e0       	ldi	r25, 0x00	; 0
    6004:	1e d4       	rcall	.+2108   	; 0x6842 <fputc>
    6006:	5a 94       	dec	r5
    6008:	f5 cf       	rjmp	.-22     	; 0x5ff4 <vfprintf+0x468>
    600a:	f6 01       	movw	r30, r12
    600c:	97 fc       	sbrc	r9, 7
    600e:	85 91       	lpm	r24, Z+
    6010:	97 fe       	sbrs	r9, 7
    6012:	81 91       	ld	r24, Z+
    6014:	6f 01       	movw	r12, r30
    6016:	b7 01       	movw	r22, r14
    6018:	90 e0       	ldi	r25, 0x00	; 0
    601a:	13 d4       	rcall	.+2086   	; 0x6842 <fputc>
    601c:	51 10       	cpse	r5, r1
    601e:	5a 94       	dec	r5
    6020:	01 50       	subi	r16, 0x01	; 1
    6022:	11 09       	sbc	r17, r1
    6024:	01 15       	cp	r16, r1
    6026:	11 05       	cpc	r17, r1
    6028:	81 f7       	brne	.-32     	; 0x600a <vfprintf+0x47e>
    602a:	f0 c0       	rjmp	.+480    	; 0x620c <vfprintf+0x680>
    602c:	84 36       	cpi	r24, 0x64	; 100
    602e:	11 f0       	breq	.+4      	; 0x6034 <vfprintf+0x4a8>
    6030:	89 36       	cpi	r24, 0x69	; 105
    6032:	59 f5       	brne	.+86     	; 0x608a <vfprintf+0x4fe>
    6034:	56 01       	movw	r10, r12
    6036:	97 fe       	sbrs	r9, 7
    6038:	09 c0       	rjmp	.+18     	; 0x604c <vfprintf+0x4c0>
    603a:	24 e0       	ldi	r18, 0x04	; 4
    603c:	a2 0e       	add	r10, r18
    603e:	b1 1c       	adc	r11, r1
    6040:	f6 01       	movw	r30, r12
    6042:	60 81       	ld	r22, Z
    6044:	71 81       	ldd	r23, Z+1	; 0x01
    6046:	82 81       	ldd	r24, Z+2	; 0x02
    6048:	93 81       	ldd	r25, Z+3	; 0x03
    604a:	0a c0       	rjmp	.+20     	; 0x6060 <vfprintf+0x4d4>
    604c:	f2 e0       	ldi	r31, 0x02	; 2
    604e:	af 0e       	add	r10, r31
    6050:	b1 1c       	adc	r11, r1
    6052:	f6 01       	movw	r30, r12
    6054:	60 81       	ld	r22, Z
    6056:	71 81       	ldd	r23, Z+1	; 0x01
    6058:	07 2e       	mov	r0, r23
    605a:	00 0c       	add	r0, r0
    605c:	88 0b       	sbc	r24, r24
    605e:	99 0b       	sbc	r25, r25
    6060:	f9 2d       	mov	r31, r9
    6062:	ff 76       	andi	r31, 0x6F	; 111
    6064:	9f 2e       	mov	r9, r31
    6066:	97 ff       	sbrs	r25, 7
    6068:	09 c0       	rjmp	.+18     	; 0x607c <vfprintf+0x4f0>
    606a:	90 95       	com	r25
    606c:	80 95       	com	r24
    606e:	70 95       	com	r23
    6070:	61 95       	neg	r22
    6072:	7f 4f       	sbci	r23, 0xFF	; 255
    6074:	8f 4f       	sbci	r24, 0xFF	; 255
    6076:	9f 4f       	sbci	r25, 0xFF	; 255
    6078:	f0 68       	ori	r31, 0x80	; 128
    607a:	9f 2e       	mov	r9, r31
    607c:	2a e0       	ldi	r18, 0x0A	; 10
    607e:	30 e0       	ldi	r19, 0x00	; 0
    6080:	a3 01       	movw	r20, r6
    6082:	8c d4       	rcall	.+2328   	; 0x699c <__ultoa_invert>
    6084:	c8 2e       	mov	r12, r24
    6086:	c6 18       	sub	r12, r6
    6088:	3e c0       	rjmp	.+124    	; 0x6106 <vfprintf+0x57a>
    608a:	09 2d       	mov	r16, r9
    608c:	85 37       	cpi	r24, 0x75	; 117
    608e:	21 f4       	brne	.+8      	; 0x6098 <vfprintf+0x50c>
    6090:	0f 7e       	andi	r16, 0xEF	; 239
    6092:	2a e0       	ldi	r18, 0x0A	; 10
    6094:	30 e0       	ldi	r19, 0x00	; 0
    6096:	1d c0       	rjmp	.+58     	; 0x60d2 <vfprintf+0x546>
    6098:	09 7f       	andi	r16, 0xF9	; 249
    609a:	8f 36       	cpi	r24, 0x6F	; 111
    609c:	91 f0       	breq	.+36     	; 0x60c2 <vfprintf+0x536>
    609e:	18 f4       	brcc	.+6      	; 0x60a6 <vfprintf+0x51a>
    60a0:	88 35       	cpi	r24, 0x58	; 88
    60a2:	59 f0       	breq	.+22     	; 0x60ba <vfprintf+0x52e>
    60a4:	bc c0       	rjmp	.+376    	; 0x621e <vfprintf+0x692>
    60a6:	80 37       	cpi	r24, 0x70	; 112
    60a8:	19 f0       	breq	.+6      	; 0x60b0 <vfprintf+0x524>
    60aa:	88 37       	cpi	r24, 0x78	; 120
    60ac:	11 f0       	breq	.+4      	; 0x60b2 <vfprintf+0x526>
    60ae:	b7 c0       	rjmp	.+366    	; 0x621e <vfprintf+0x692>
    60b0:	00 61       	ori	r16, 0x10	; 16
    60b2:	04 ff       	sbrs	r16, 4
    60b4:	09 c0       	rjmp	.+18     	; 0x60c8 <vfprintf+0x53c>
    60b6:	04 60       	ori	r16, 0x04	; 4
    60b8:	07 c0       	rjmp	.+14     	; 0x60c8 <vfprintf+0x53c>
    60ba:	94 fe       	sbrs	r9, 4
    60bc:	08 c0       	rjmp	.+16     	; 0x60ce <vfprintf+0x542>
    60be:	06 60       	ori	r16, 0x06	; 6
    60c0:	06 c0       	rjmp	.+12     	; 0x60ce <vfprintf+0x542>
    60c2:	28 e0       	ldi	r18, 0x08	; 8
    60c4:	30 e0       	ldi	r19, 0x00	; 0
    60c6:	05 c0       	rjmp	.+10     	; 0x60d2 <vfprintf+0x546>
    60c8:	20 e1       	ldi	r18, 0x10	; 16
    60ca:	30 e0       	ldi	r19, 0x00	; 0
    60cc:	02 c0       	rjmp	.+4      	; 0x60d2 <vfprintf+0x546>
    60ce:	20 e1       	ldi	r18, 0x10	; 16
    60d0:	32 e0       	ldi	r19, 0x02	; 2
    60d2:	56 01       	movw	r10, r12
    60d4:	07 ff       	sbrs	r16, 7
    60d6:	09 c0       	rjmp	.+18     	; 0x60ea <vfprintf+0x55e>
    60d8:	84 e0       	ldi	r24, 0x04	; 4
    60da:	a8 0e       	add	r10, r24
    60dc:	b1 1c       	adc	r11, r1
    60de:	f6 01       	movw	r30, r12
    60e0:	60 81       	ld	r22, Z
    60e2:	71 81       	ldd	r23, Z+1	; 0x01
    60e4:	82 81       	ldd	r24, Z+2	; 0x02
    60e6:	93 81       	ldd	r25, Z+3	; 0x03
    60e8:	08 c0       	rjmp	.+16     	; 0x60fa <vfprintf+0x56e>
    60ea:	f2 e0       	ldi	r31, 0x02	; 2
    60ec:	af 0e       	add	r10, r31
    60ee:	b1 1c       	adc	r11, r1
    60f0:	f6 01       	movw	r30, r12
    60f2:	60 81       	ld	r22, Z
    60f4:	71 81       	ldd	r23, Z+1	; 0x01
    60f6:	80 e0       	ldi	r24, 0x00	; 0
    60f8:	90 e0       	ldi	r25, 0x00	; 0
    60fa:	a3 01       	movw	r20, r6
    60fc:	4f d4       	rcall	.+2206   	; 0x699c <__ultoa_invert>
    60fe:	c8 2e       	mov	r12, r24
    6100:	c6 18       	sub	r12, r6
    6102:	0f 77       	andi	r16, 0x7F	; 127
    6104:	90 2e       	mov	r9, r16
    6106:	96 fe       	sbrs	r9, 6
    6108:	0b c0       	rjmp	.+22     	; 0x6120 <vfprintf+0x594>
    610a:	09 2d       	mov	r16, r9
    610c:	0e 7f       	andi	r16, 0xFE	; 254
    610e:	c1 16       	cp	r12, r17
    6110:	50 f4       	brcc	.+20     	; 0x6126 <vfprintf+0x59a>
    6112:	94 fe       	sbrs	r9, 4
    6114:	0a c0       	rjmp	.+20     	; 0x612a <vfprintf+0x59e>
    6116:	92 fc       	sbrc	r9, 2
    6118:	08 c0       	rjmp	.+16     	; 0x612a <vfprintf+0x59e>
    611a:	09 2d       	mov	r16, r9
    611c:	0e 7e       	andi	r16, 0xEE	; 238
    611e:	05 c0       	rjmp	.+10     	; 0x612a <vfprintf+0x59e>
    6120:	dc 2c       	mov	r13, r12
    6122:	09 2d       	mov	r16, r9
    6124:	03 c0       	rjmp	.+6      	; 0x612c <vfprintf+0x5a0>
    6126:	dc 2c       	mov	r13, r12
    6128:	01 c0       	rjmp	.+2      	; 0x612c <vfprintf+0x5a0>
    612a:	d1 2e       	mov	r13, r17
    612c:	04 ff       	sbrs	r16, 4
    612e:	0d c0       	rjmp	.+26     	; 0x614a <vfprintf+0x5be>
    6130:	fe 01       	movw	r30, r28
    6132:	ec 0d       	add	r30, r12
    6134:	f1 1d       	adc	r31, r1
    6136:	80 81       	ld	r24, Z
    6138:	80 33       	cpi	r24, 0x30	; 48
    613a:	11 f4       	brne	.+4      	; 0x6140 <vfprintf+0x5b4>
    613c:	09 7e       	andi	r16, 0xE9	; 233
    613e:	09 c0       	rjmp	.+18     	; 0x6152 <vfprintf+0x5c6>
    6140:	02 ff       	sbrs	r16, 2
    6142:	06 c0       	rjmp	.+12     	; 0x6150 <vfprintf+0x5c4>
    6144:	d3 94       	inc	r13
    6146:	d3 94       	inc	r13
    6148:	04 c0       	rjmp	.+8      	; 0x6152 <vfprintf+0x5c6>
    614a:	80 2f       	mov	r24, r16
    614c:	86 78       	andi	r24, 0x86	; 134
    614e:	09 f0       	breq	.+2      	; 0x6152 <vfprintf+0x5c6>
    6150:	d3 94       	inc	r13
    6152:	03 fd       	sbrc	r16, 3
    6154:	10 c0       	rjmp	.+32     	; 0x6176 <vfprintf+0x5ea>
    6156:	00 ff       	sbrs	r16, 0
    6158:	06 c0       	rjmp	.+12     	; 0x6166 <vfprintf+0x5da>
    615a:	1c 2d       	mov	r17, r12
    615c:	d5 14       	cp	r13, r5
    615e:	78 f4       	brcc	.+30     	; 0x617e <vfprintf+0x5f2>
    6160:	15 0d       	add	r17, r5
    6162:	1d 19       	sub	r17, r13
    6164:	0c c0       	rjmp	.+24     	; 0x617e <vfprintf+0x5f2>
    6166:	d5 14       	cp	r13, r5
    6168:	50 f4       	brcc	.+20     	; 0x617e <vfprintf+0x5f2>
    616a:	b7 01       	movw	r22, r14
    616c:	80 e2       	ldi	r24, 0x20	; 32
    616e:	90 e0       	ldi	r25, 0x00	; 0
    6170:	68 d3       	rcall	.+1744   	; 0x6842 <fputc>
    6172:	d3 94       	inc	r13
    6174:	f8 cf       	rjmp	.-16     	; 0x6166 <vfprintf+0x5da>
    6176:	d5 14       	cp	r13, r5
    6178:	10 f4       	brcc	.+4      	; 0x617e <vfprintf+0x5f2>
    617a:	5d 18       	sub	r5, r13
    617c:	01 c0       	rjmp	.+2      	; 0x6180 <vfprintf+0x5f4>
    617e:	51 2c       	mov	r5, r1
    6180:	04 ff       	sbrs	r16, 4
    6182:	0f c0       	rjmp	.+30     	; 0x61a2 <vfprintf+0x616>
    6184:	b7 01       	movw	r22, r14
    6186:	80 e3       	ldi	r24, 0x30	; 48
    6188:	90 e0       	ldi	r25, 0x00	; 0
    618a:	5b d3       	rcall	.+1718   	; 0x6842 <fputc>
    618c:	02 ff       	sbrs	r16, 2
    618e:	16 c0       	rjmp	.+44     	; 0x61bc <vfprintf+0x630>
    6190:	01 fd       	sbrc	r16, 1
    6192:	03 c0       	rjmp	.+6      	; 0x619a <vfprintf+0x60e>
    6194:	88 e7       	ldi	r24, 0x78	; 120
    6196:	90 e0       	ldi	r25, 0x00	; 0
    6198:	02 c0       	rjmp	.+4      	; 0x619e <vfprintf+0x612>
    619a:	88 e5       	ldi	r24, 0x58	; 88
    619c:	90 e0       	ldi	r25, 0x00	; 0
    619e:	b7 01       	movw	r22, r14
    61a0:	0c c0       	rjmp	.+24     	; 0x61ba <vfprintf+0x62e>
    61a2:	80 2f       	mov	r24, r16
    61a4:	86 78       	andi	r24, 0x86	; 134
    61a6:	51 f0       	breq	.+20     	; 0x61bc <vfprintf+0x630>
    61a8:	01 ff       	sbrs	r16, 1
    61aa:	02 c0       	rjmp	.+4      	; 0x61b0 <vfprintf+0x624>
    61ac:	8b e2       	ldi	r24, 0x2B	; 43
    61ae:	01 c0       	rjmp	.+2      	; 0x61b2 <vfprintf+0x626>
    61b0:	80 e2       	ldi	r24, 0x20	; 32
    61b2:	07 fd       	sbrc	r16, 7
    61b4:	8d e2       	ldi	r24, 0x2D	; 45
    61b6:	b7 01       	movw	r22, r14
    61b8:	90 e0       	ldi	r25, 0x00	; 0
    61ba:	43 d3       	rcall	.+1670   	; 0x6842 <fputc>
    61bc:	c1 16       	cp	r12, r17
    61be:	30 f4       	brcc	.+12     	; 0x61cc <vfprintf+0x640>
    61c0:	b7 01       	movw	r22, r14
    61c2:	80 e3       	ldi	r24, 0x30	; 48
    61c4:	90 e0       	ldi	r25, 0x00	; 0
    61c6:	3d d3       	rcall	.+1658   	; 0x6842 <fputc>
    61c8:	11 50       	subi	r17, 0x01	; 1
    61ca:	f8 cf       	rjmp	.-16     	; 0x61bc <vfprintf+0x630>
    61cc:	ca 94       	dec	r12
    61ce:	f3 01       	movw	r30, r6
    61d0:	ec 0d       	add	r30, r12
    61d2:	f1 1d       	adc	r31, r1
    61d4:	80 81       	ld	r24, Z
    61d6:	b7 01       	movw	r22, r14
    61d8:	90 e0       	ldi	r25, 0x00	; 0
    61da:	33 d3       	rcall	.+1638   	; 0x6842 <fputc>
    61dc:	c1 10       	cpse	r12, r1
    61de:	f6 cf       	rjmp	.-20     	; 0x61cc <vfprintf+0x640>
    61e0:	15 c0       	rjmp	.+42     	; 0x620c <vfprintf+0x680>
    61e2:	f4 e0       	ldi	r31, 0x04	; 4
    61e4:	f5 15       	cp	r31, r5
    61e6:	50 f5       	brcc	.+84     	; 0x623c <vfprintf+0x6b0>
    61e8:	84 e0       	ldi	r24, 0x04	; 4
    61ea:	58 1a       	sub	r5, r24
    61ec:	93 fe       	sbrs	r9, 3
    61ee:	1e c0       	rjmp	.+60     	; 0x622c <vfprintf+0x6a0>
    61f0:	01 11       	cpse	r16, r1
    61f2:	25 c0       	rjmp	.+74     	; 0x623e <vfprintf+0x6b2>
    61f4:	2c 85       	ldd	r18, Y+12	; 0x0c
    61f6:	23 ff       	sbrs	r18, 3
    61f8:	27 c0       	rjmp	.+78     	; 0x6248 <vfprintf+0x6bc>
    61fa:	0a e9       	ldi	r16, 0x9A	; 154
    61fc:	11 e0       	ldi	r17, 0x01	; 1
    61fe:	39 2d       	mov	r19, r9
    6200:	30 71       	andi	r19, 0x10	; 16
    6202:	93 2e       	mov	r9, r19
    6204:	f8 01       	movw	r30, r16
    6206:	84 91       	lpm	r24, Z
    6208:	81 11       	cpse	r24, r1
    620a:	21 c0       	rjmp	.+66     	; 0x624e <vfprintf+0x6c2>
    620c:	55 20       	and	r5, r5
    620e:	09 f4       	brne	.+2      	; 0x6212 <vfprintf+0x686>
    6210:	fc cc       	rjmp	.-1544   	; 0x5c0a <vfprintf+0x7e>
    6212:	b7 01       	movw	r22, r14
    6214:	80 e2       	ldi	r24, 0x20	; 32
    6216:	90 e0       	ldi	r25, 0x00	; 0
    6218:	14 d3       	rcall	.+1576   	; 0x6842 <fputc>
    621a:	5a 94       	dec	r5
    621c:	f7 cf       	rjmp	.-18     	; 0x620c <vfprintf+0x680>
    621e:	f7 01       	movw	r30, r14
    6220:	86 81       	ldd	r24, Z+6	; 0x06
    6222:	97 81       	ldd	r25, Z+7	; 0x07
    6224:	23 c0       	rjmp	.+70     	; 0x626c <vfprintf+0x6e0>
    6226:	8f ef       	ldi	r24, 0xFF	; 255
    6228:	9f ef       	ldi	r25, 0xFF	; 255
    622a:	20 c0       	rjmp	.+64     	; 0x626c <vfprintf+0x6e0>
    622c:	b7 01       	movw	r22, r14
    622e:	80 e2       	ldi	r24, 0x20	; 32
    6230:	90 e0       	ldi	r25, 0x00	; 0
    6232:	07 d3       	rcall	.+1550   	; 0x6842 <fputc>
    6234:	5a 94       	dec	r5
    6236:	51 10       	cpse	r5, r1
    6238:	f9 cf       	rjmp	.-14     	; 0x622c <vfprintf+0x6a0>
    623a:	da cf       	rjmp	.-76     	; 0x61f0 <vfprintf+0x664>
    623c:	51 2c       	mov	r5, r1
    623e:	b7 01       	movw	r22, r14
    6240:	80 2f       	mov	r24, r16
    6242:	90 e0       	ldi	r25, 0x00	; 0
    6244:	fe d2       	rcall	.+1532   	; 0x6842 <fputc>
    6246:	d6 cf       	rjmp	.-84     	; 0x61f4 <vfprintf+0x668>
    6248:	0e e9       	ldi	r16, 0x9E	; 158
    624a:	11 e0       	ldi	r17, 0x01	; 1
    624c:	d8 cf       	rjmp	.-80     	; 0x61fe <vfprintf+0x672>
    624e:	91 10       	cpse	r9, r1
    6250:	80 52       	subi	r24, 0x20	; 32
    6252:	b7 01       	movw	r22, r14
    6254:	90 e0       	ldi	r25, 0x00	; 0
    6256:	f5 d2       	rcall	.+1514   	; 0x6842 <fputc>
    6258:	0f 5f       	subi	r16, 0xFF	; 255
    625a:	1f 4f       	sbci	r17, 0xFF	; 255
    625c:	d3 cf       	rjmp	.-90     	; 0x6204 <vfprintf+0x678>
    625e:	23 e0       	ldi	r18, 0x03	; 3
    6260:	25 15       	cp	r18, r5
    6262:	10 f4       	brcc	.+4      	; 0x6268 <vfprintf+0x6dc>
    6264:	83 e0       	ldi	r24, 0x03	; 3
    6266:	c1 cf       	rjmp	.-126    	; 0x61ea <vfprintf+0x65e>
    6268:	51 2c       	mov	r5, r1
    626a:	c4 cf       	rjmp	.-120    	; 0x61f4 <vfprintf+0x668>
    626c:	60 96       	adiw	r28, 0x10	; 16
    626e:	0f b6       	in	r0, 0x3f	; 63
    6270:	f8 94       	cli
    6272:	de bf       	out	0x3e, r29	; 62
    6274:	0f be       	out	0x3f, r0	; 63
    6276:	cd bf       	out	0x3d, r28	; 61
    6278:	df 91       	pop	r29
    627a:	cf 91       	pop	r28
    627c:	1f 91       	pop	r17
    627e:	0f 91       	pop	r16
    6280:	ff 90       	pop	r15
    6282:	ef 90       	pop	r14
    6284:	df 90       	pop	r13
    6286:	cf 90       	pop	r12
    6288:	bf 90       	pop	r11
    628a:	af 90       	pop	r10
    628c:	9f 90       	pop	r9
    628e:	8f 90       	pop	r8
    6290:	7f 90       	pop	r7
    6292:	6f 90       	pop	r6
    6294:	5f 90       	pop	r5
    6296:	4f 90       	pop	r4
    6298:	3f 90       	pop	r3
    629a:	2f 90       	pop	r2
    629c:	08 95       	ret

0000629e <__divmodhi4>:
    629e:	97 fb       	bst	r25, 7
    62a0:	07 2e       	mov	r0, r23
    62a2:	16 f4       	brtc	.+4      	; 0x62a8 <__divmodhi4+0xa>
    62a4:	00 94       	com	r0
    62a6:	06 d0       	rcall	.+12     	; 0x62b4 <__divmodhi4_neg1>
    62a8:	77 fd       	sbrc	r23, 7
    62aa:	08 d0       	rcall	.+16     	; 0x62bc <__divmodhi4_neg2>
    62ac:	44 d0       	rcall	.+136    	; 0x6336 <__udivmodhi4>
    62ae:	07 fc       	sbrc	r0, 7
    62b0:	05 d0       	rcall	.+10     	; 0x62bc <__divmodhi4_neg2>
    62b2:	3e f4       	brtc	.+14     	; 0x62c2 <__divmodhi4_exit>

000062b4 <__divmodhi4_neg1>:
    62b4:	90 95       	com	r25
    62b6:	81 95       	neg	r24
    62b8:	9f 4f       	sbci	r25, 0xFF	; 255
    62ba:	08 95       	ret

000062bc <__divmodhi4_neg2>:
    62bc:	70 95       	com	r23
    62be:	61 95       	neg	r22
    62c0:	7f 4f       	sbci	r23, 0xFF	; 255

000062c2 <__divmodhi4_exit>:
    62c2:	08 95       	ret

000062c4 <__udivmodsi4>:
    62c4:	a1 e2       	ldi	r26, 0x21	; 33
    62c6:	1a 2e       	mov	r1, r26
    62c8:	aa 1b       	sub	r26, r26
    62ca:	bb 1b       	sub	r27, r27
    62cc:	fd 01       	movw	r30, r26
    62ce:	0d c0       	rjmp	.+26     	; 0x62ea <__udivmodsi4_ep>

000062d0 <__udivmodsi4_loop>:
    62d0:	aa 1f       	adc	r26, r26
    62d2:	bb 1f       	adc	r27, r27
    62d4:	ee 1f       	adc	r30, r30
    62d6:	ff 1f       	adc	r31, r31
    62d8:	a2 17       	cp	r26, r18
    62da:	b3 07       	cpc	r27, r19
    62dc:	e4 07       	cpc	r30, r20
    62de:	f5 07       	cpc	r31, r21
    62e0:	20 f0       	brcs	.+8      	; 0x62ea <__udivmodsi4_ep>
    62e2:	a2 1b       	sub	r26, r18
    62e4:	b3 0b       	sbc	r27, r19
    62e6:	e4 0b       	sbc	r30, r20
    62e8:	f5 0b       	sbc	r31, r21

000062ea <__udivmodsi4_ep>:
    62ea:	66 1f       	adc	r22, r22
    62ec:	77 1f       	adc	r23, r23
    62ee:	88 1f       	adc	r24, r24
    62f0:	99 1f       	adc	r25, r25
    62f2:	1a 94       	dec	r1
    62f4:	69 f7       	brne	.-38     	; 0x62d0 <__udivmodsi4_loop>
    62f6:	60 95       	com	r22
    62f8:	70 95       	com	r23
    62fa:	80 95       	com	r24
    62fc:	90 95       	com	r25
    62fe:	9b 01       	movw	r18, r22
    6300:	ac 01       	movw	r20, r24
    6302:	bd 01       	movw	r22, r26
    6304:	cf 01       	movw	r24, r30
    6306:	08 95       	ret

00006308 <__tablejump2__>:
    6308:	ee 0f       	add	r30, r30
    630a:	ff 1f       	adc	r31, r31
    630c:	88 1f       	adc	r24, r24
    630e:	8b bf       	out	0x3b, r24	; 59
    6310:	07 90       	elpm	r0, Z+
    6312:	f6 91       	elpm	r31, Z
    6314:	e0 2d       	mov	r30, r0
    6316:	19 94       	eijmp

00006318 <__umulhisi3>:
    6318:	a2 9f       	mul	r26, r18
    631a:	b0 01       	movw	r22, r0
    631c:	b3 9f       	mul	r27, r19
    631e:	c0 01       	movw	r24, r0
    6320:	a3 9f       	mul	r26, r19
    6322:	70 0d       	add	r23, r0
    6324:	81 1d       	adc	r24, r1
    6326:	11 24       	eor	r1, r1
    6328:	91 1d       	adc	r25, r1
    632a:	b2 9f       	mul	r27, r18
    632c:	70 0d       	add	r23, r0
    632e:	81 1d       	adc	r24, r1
    6330:	11 24       	eor	r1, r1
    6332:	91 1d       	adc	r25, r1
    6334:	08 95       	ret

00006336 <__udivmodhi4>:
    6336:	aa 1b       	sub	r26, r26
    6338:	bb 1b       	sub	r27, r27
    633a:	51 e1       	ldi	r21, 0x11	; 17
    633c:	07 c0       	rjmp	.+14     	; 0x634c <__udivmodhi4_ep>

0000633e <__udivmodhi4_loop>:
    633e:	aa 1f       	adc	r26, r26
    6340:	bb 1f       	adc	r27, r27
    6342:	a6 17       	cp	r26, r22
    6344:	b7 07       	cpc	r27, r23
    6346:	10 f0       	brcs	.+4      	; 0x634c <__udivmodhi4_ep>
    6348:	a6 1b       	sub	r26, r22
    634a:	b7 0b       	sbc	r27, r23

0000634c <__udivmodhi4_ep>:
    634c:	88 1f       	adc	r24, r24
    634e:	99 1f       	adc	r25, r25
    6350:	5a 95       	dec	r21
    6352:	a9 f7       	brne	.-22     	; 0x633e <__udivmodhi4_loop>
    6354:	80 95       	com	r24
    6356:	90 95       	com	r25
    6358:	bc 01       	movw	r22, r24
    635a:	cd 01       	movw	r24, r26
    635c:	08 95       	ret

0000635e <malloc>:
    635e:	0f 93       	push	r16
    6360:	1f 93       	push	r17
    6362:	cf 93       	push	r28
    6364:	df 93       	push	r29
    6366:	82 30       	cpi	r24, 0x02	; 2
    6368:	91 05       	cpc	r25, r1
    636a:	10 f4       	brcc	.+4      	; 0x6370 <malloc+0x12>
    636c:	82 e0       	ldi	r24, 0x02	; 2
    636e:	90 e0       	ldi	r25, 0x00	; 0
    6370:	e0 91 94 17 	lds	r30, 0x1794	; 0x801794 <__flp>
    6374:	f0 91 95 17 	lds	r31, 0x1795	; 0x801795 <__flp+0x1>
    6378:	20 e0       	ldi	r18, 0x00	; 0
    637a:	30 e0       	ldi	r19, 0x00	; 0
    637c:	a0 e0       	ldi	r26, 0x00	; 0
    637e:	b0 e0       	ldi	r27, 0x00	; 0
    6380:	30 97       	sbiw	r30, 0x00	; 0
    6382:	19 f1       	breq	.+70     	; 0x63ca <malloc+0x6c>
    6384:	40 81       	ld	r20, Z
    6386:	51 81       	ldd	r21, Z+1	; 0x01
    6388:	02 81       	ldd	r16, Z+2	; 0x02
    638a:	13 81       	ldd	r17, Z+3	; 0x03
    638c:	48 17       	cp	r20, r24
    638e:	59 07       	cpc	r21, r25
    6390:	c8 f0       	brcs	.+50     	; 0x63c4 <malloc+0x66>
    6392:	84 17       	cp	r24, r20
    6394:	95 07       	cpc	r25, r21
    6396:	69 f4       	brne	.+26     	; 0x63b2 <malloc+0x54>
    6398:	10 97       	sbiw	r26, 0x00	; 0
    639a:	31 f0       	breq	.+12     	; 0x63a8 <malloc+0x4a>
    639c:	12 96       	adiw	r26, 0x02	; 2
    639e:	0c 93       	st	X, r16
    63a0:	12 97       	sbiw	r26, 0x02	; 2
    63a2:	13 96       	adiw	r26, 0x03	; 3
    63a4:	1c 93       	st	X, r17
    63a6:	27 c0       	rjmp	.+78     	; 0x63f6 <malloc+0x98>
    63a8:	00 93 94 17 	sts	0x1794, r16	; 0x801794 <__flp>
    63ac:	10 93 95 17 	sts	0x1795, r17	; 0x801795 <__flp+0x1>
    63b0:	22 c0       	rjmp	.+68     	; 0x63f6 <malloc+0x98>
    63b2:	21 15       	cp	r18, r1
    63b4:	31 05       	cpc	r19, r1
    63b6:	19 f0       	breq	.+6      	; 0x63be <malloc+0x60>
    63b8:	42 17       	cp	r20, r18
    63ba:	53 07       	cpc	r21, r19
    63bc:	18 f4       	brcc	.+6      	; 0x63c4 <malloc+0x66>
    63be:	9a 01       	movw	r18, r20
    63c0:	bd 01       	movw	r22, r26
    63c2:	ef 01       	movw	r28, r30
    63c4:	df 01       	movw	r26, r30
    63c6:	f8 01       	movw	r30, r16
    63c8:	db cf       	rjmp	.-74     	; 0x6380 <malloc+0x22>
    63ca:	21 15       	cp	r18, r1
    63cc:	31 05       	cpc	r19, r1
    63ce:	f9 f0       	breq	.+62     	; 0x640e <malloc+0xb0>
    63d0:	28 1b       	sub	r18, r24
    63d2:	39 0b       	sbc	r19, r25
    63d4:	24 30       	cpi	r18, 0x04	; 4
    63d6:	31 05       	cpc	r19, r1
    63d8:	80 f4       	brcc	.+32     	; 0x63fa <malloc+0x9c>
    63da:	8a 81       	ldd	r24, Y+2	; 0x02
    63dc:	9b 81       	ldd	r25, Y+3	; 0x03
    63de:	61 15       	cp	r22, r1
    63e0:	71 05       	cpc	r23, r1
    63e2:	21 f0       	breq	.+8      	; 0x63ec <malloc+0x8e>
    63e4:	fb 01       	movw	r30, r22
    63e6:	93 83       	std	Z+3, r25	; 0x03
    63e8:	82 83       	std	Z+2, r24	; 0x02
    63ea:	04 c0       	rjmp	.+8      	; 0x63f4 <malloc+0x96>
    63ec:	90 93 95 17 	sts	0x1795, r25	; 0x801795 <__flp+0x1>
    63f0:	80 93 94 17 	sts	0x1794, r24	; 0x801794 <__flp>
    63f4:	fe 01       	movw	r30, r28
    63f6:	32 96       	adiw	r30, 0x02	; 2
    63f8:	44 c0       	rjmp	.+136    	; 0x6482 <malloc+0x124>
    63fa:	fe 01       	movw	r30, r28
    63fc:	e2 0f       	add	r30, r18
    63fe:	f3 1f       	adc	r31, r19
    6400:	81 93       	st	Z+, r24
    6402:	91 93       	st	Z+, r25
    6404:	22 50       	subi	r18, 0x02	; 2
    6406:	31 09       	sbc	r19, r1
    6408:	39 83       	std	Y+1, r19	; 0x01
    640a:	28 83       	st	Y, r18
    640c:	3a c0       	rjmp	.+116    	; 0x6482 <malloc+0x124>
    640e:	20 91 92 17 	lds	r18, 0x1792	; 0x801792 <__brkval>
    6412:	30 91 93 17 	lds	r19, 0x1793	; 0x801793 <__brkval+0x1>
    6416:	23 2b       	or	r18, r19
    6418:	41 f4       	brne	.+16     	; 0x642a <malloc+0xcc>
    641a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    641e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6422:	30 93 93 17 	sts	0x1793, r19	; 0x801793 <__brkval+0x1>
    6426:	20 93 92 17 	sts	0x1792, r18	; 0x801792 <__brkval>
    642a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    642e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6432:	21 15       	cp	r18, r1
    6434:	31 05       	cpc	r19, r1
    6436:	41 f4       	brne	.+16     	; 0x6448 <malloc+0xea>
    6438:	2d b7       	in	r18, 0x3d	; 61
    643a:	3e b7       	in	r19, 0x3e	; 62
    643c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6440:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6444:	24 1b       	sub	r18, r20
    6446:	35 0b       	sbc	r19, r21
    6448:	e0 91 92 17 	lds	r30, 0x1792	; 0x801792 <__brkval>
    644c:	f0 91 93 17 	lds	r31, 0x1793	; 0x801793 <__brkval+0x1>
    6450:	e2 17       	cp	r30, r18
    6452:	f3 07       	cpc	r31, r19
    6454:	a0 f4       	brcc	.+40     	; 0x647e <malloc+0x120>
    6456:	2e 1b       	sub	r18, r30
    6458:	3f 0b       	sbc	r19, r31
    645a:	28 17       	cp	r18, r24
    645c:	39 07       	cpc	r19, r25
    645e:	78 f0       	brcs	.+30     	; 0x647e <malloc+0x120>
    6460:	ac 01       	movw	r20, r24
    6462:	4e 5f       	subi	r20, 0xFE	; 254
    6464:	5f 4f       	sbci	r21, 0xFF	; 255
    6466:	24 17       	cp	r18, r20
    6468:	35 07       	cpc	r19, r21
    646a:	48 f0       	brcs	.+18     	; 0x647e <malloc+0x120>
    646c:	4e 0f       	add	r20, r30
    646e:	5f 1f       	adc	r21, r31
    6470:	50 93 93 17 	sts	0x1793, r21	; 0x801793 <__brkval+0x1>
    6474:	40 93 92 17 	sts	0x1792, r20	; 0x801792 <__brkval>
    6478:	81 93       	st	Z+, r24
    647a:	91 93       	st	Z+, r25
    647c:	02 c0       	rjmp	.+4      	; 0x6482 <malloc+0x124>
    647e:	e0 e0       	ldi	r30, 0x00	; 0
    6480:	f0 e0       	ldi	r31, 0x00	; 0
    6482:	cf 01       	movw	r24, r30
    6484:	df 91       	pop	r29
    6486:	cf 91       	pop	r28
    6488:	1f 91       	pop	r17
    648a:	0f 91       	pop	r16
    648c:	08 95       	ret

0000648e <free>:
    648e:	cf 93       	push	r28
    6490:	df 93       	push	r29
    6492:	00 97       	sbiw	r24, 0x00	; 0
    6494:	09 f4       	brne	.+2      	; 0x6498 <free+0xa>
    6496:	81 c0       	rjmp	.+258    	; 0x659a <free+0x10c>
    6498:	fc 01       	movw	r30, r24
    649a:	32 97       	sbiw	r30, 0x02	; 2
    649c:	13 82       	std	Z+3, r1	; 0x03
    649e:	12 82       	std	Z+2, r1	; 0x02
    64a0:	a0 91 94 17 	lds	r26, 0x1794	; 0x801794 <__flp>
    64a4:	b0 91 95 17 	lds	r27, 0x1795	; 0x801795 <__flp+0x1>
    64a8:	10 97       	sbiw	r26, 0x00	; 0
    64aa:	81 f4       	brne	.+32     	; 0x64cc <free+0x3e>
    64ac:	20 81       	ld	r18, Z
    64ae:	31 81       	ldd	r19, Z+1	; 0x01
    64b0:	82 0f       	add	r24, r18
    64b2:	93 1f       	adc	r25, r19
    64b4:	20 91 92 17 	lds	r18, 0x1792	; 0x801792 <__brkval>
    64b8:	30 91 93 17 	lds	r19, 0x1793	; 0x801793 <__brkval+0x1>
    64bc:	28 17       	cp	r18, r24
    64be:	39 07       	cpc	r19, r25
    64c0:	51 f5       	brne	.+84     	; 0x6516 <free+0x88>
    64c2:	f0 93 93 17 	sts	0x1793, r31	; 0x801793 <__brkval+0x1>
    64c6:	e0 93 92 17 	sts	0x1792, r30	; 0x801792 <__brkval>
    64ca:	67 c0       	rjmp	.+206    	; 0x659a <free+0x10c>
    64cc:	ed 01       	movw	r28, r26
    64ce:	20 e0       	ldi	r18, 0x00	; 0
    64d0:	30 e0       	ldi	r19, 0x00	; 0
    64d2:	ce 17       	cp	r28, r30
    64d4:	df 07       	cpc	r29, r31
    64d6:	40 f4       	brcc	.+16     	; 0x64e8 <free+0x5a>
    64d8:	4a 81       	ldd	r20, Y+2	; 0x02
    64da:	5b 81       	ldd	r21, Y+3	; 0x03
    64dc:	9e 01       	movw	r18, r28
    64de:	41 15       	cp	r20, r1
    64e0:	51 05       	cpc	r21, r1
    64e2:	f1 f0       	breq	.+60     	; 0x6520 <free+0x92>
    64e4:	ea 01       	movw	r28, r20
    64e6:	f5 cf       	rjmp	.-22     	; 0x64d2 <free+0x44>
    64e8:	d3 83       	std	Z+3, r29	; 0x03
    64ea:	c2 83       	std	Z+2, r28	; 0x02
    64ec:	40 81       	ld	r20, Z
    64ee:	51 81       	ldd	r21, Z+1	; 0x01
    64f0:	84 0f       	add	r24, r20
    64f2:	95 1f       	adc	r25, r21
    64f4:	c8 17       	cp	r28, r24
    64f6:	d9 07       	cpc	r29, r25
    64f8:	59 f4       	brne	.+22     	; 0x6510 <free+0x82>
    64fa:	88 81       	ld	r24, Y
    64fc:	99 81       	ldd	r25, Y+1	; 0x01
    64fe:	84 0f       	add	r24, r20
    6500:	95 1f       	adc	r25, r21
    6502:	02 96       	adiw	r24, 0x02	; 2
    6504:	91 83       	std	Z+1, r25	; 0x01
    6506:	80 83       	st	Z, r24
    6508:	8a 81       	ldd	r24, Y+2	; 0x02
    650a:	9b 81       	ldd	r25, Y+3	; 0x03
    650c:	93 83       	std	Z+3, r25	; 0x03
    650e:	82 83       	std	Z+2, r24	; 0x02
    6510:	21 15       	cp	r18, r1
    6512:	31 05       	cpc	r19, r1
    6514:	29 f4       	brne	.+10     	; 0x6520 <free+0x92>
    6516:	f0 93 95 17 	sts	0x1795, r31	; 0x801795 <__flp+0x1>
    651a:	e0 93 94 17 	sts	0x1794, r30	; 0x801794 <__flp>
    651e:	3d c0       	rjmp	.+122    	; 0x659a <free+0x10c>
    6520:	e9 01       	movw	r28, r18
    6522:	fb 83       	std	Y+3, r31	; 0x03
    6524:	ea 83       	std	Y+2, r30	; 0x02
    6526:	49 91       	ld	r20, Y+
    6528:	59 91       	ld	r21, Y+
    652a:	c4 0f       	add	r28, r20
    652c:	d5 1f       	adc	r29, r21
    652e:	ec 17       	cp	r30, r28
    6530:	fd 07       	cpc	r31, r29
    6532:	61 f4       	brne	.+24     	; 0x654c <free+0xbe>
    6534:	80 81       	ld	r24, Z
    6536:	91 81       	ldd	r25, Z+1	; 0x01
    6538:	84 0f       	add	r24, r20
    653a:	95 1f       	adc	r25, r21
    653c:	02 96       	adiw	r24, 0x02	; 2
    653e:	e9 01       	movw	r28, r18
    6540:	99 83       	std	Y+1, r25	; 0x01
    6542:	88 83       	st	Y, r24
    6544:	82 81       	ldd	r24, Z+2	; 0x02
    6546:	93 81       	ldd	r25, Z+3	; 0x03
    6548:	9b 83       	std	Y+3, r25	; 0x03
    654a:	8a 83       	std	Y+2, r24	; 0x02
    654c:	e0 e0       	ldi	r30, 0x00	; 0
    654e:	f0 e0       	ldi	r31, 0x00	; 0
    6550:	12 96       	adiw	r26, 0x02	; 2
    6552:	8d 91       	ld	r24, X+
    6554:	9c 91       	ld	r25, X
    6556:	13 97       	sbiw	r26, 0x03	; 3
    6558:	00 97       	sbiw	r24, 0x00	; 0
    655a:	19 f0       	breq	.+6      	; 0x6562 <free+0xd4>
    655c:	fd 01       	movw	r30, r26
    655e:	dc 01       	movw	r26, r24
    6560:	f7 cf       	rjmp	.-18     	; 0x6550 <free+0xc2>
    6562:	8d 91       	ld	r24, X+
    6564:	9c 91       	ld	r25, X
    6566:	11 97       	sbiw	r26, 0x01	; 1
    6568:	9d 01       	movw	r18, r26
    656a:	2e 5f       	subi	r18, 0xFE	; 254
    656c:	3f 4f       	sbci	r19, 0xFF	; 255
    656e:	82 0f       	add	r24, r18
    6570:	93 1f       	adc	r25, r19
    6572:	20 91 92 17 	lds	r18, 0x1792	; 0x801792 <__brkval>
    6576:	30 91 93 17 	lds	r19, 0x1793	; 0x801793 <__brkval+0x1>
    657a:	28 17       	cp	r18, r24
    657c:	39 07       	cpc	r19, r25
    657e:	69 f4       	brne	.+26     	; 0x659a <free+0x10c>
    6580:	30 97       	sbiw	r30, 0x00	; 0
    6582:	29 f4       	brne	.+10     	; 0x658e <free+0x100>
    6584:	10 92 95 17 	sts	0x1795, r1	; 0x801795 <__flp+0x1>
    6588:	10 92 94 17 	sts	0x1794, r1	; 0x801794 <__flp>
    658c:	02 c0       	rjmp	.+4      	; 0x6592 <free+0x104>
    658e:	13 82       	std	Z+3, r1	; 0x03
    6590:	12 82       	std	Z+2, r1	; 0x02
    6592:	b0 93 93 17 	sts	0x1793, r27	; 0x801793 <__brkval+0x1>
    6596:	a0 93 92 17 	sts	0x1792, r26	; 0x801792 <__brkval>
    659a:	df 91       	pop	r29
    659c:	cf 91       	pop	r28
    659e:	08 95       	ret

000065a0 <abort>:
    65a0:	81 e0       	ldi	r24, 0x01	; 1
    65a2:	90 e0       	ldi	r25, 0x00	; 0
    65a4:	f8 94       	cli
    65a6:	58 c2       	rjmp	.+1200   	; 0x6a58 <_exit>

000065a8 <__ftoa_engine>:
    65a8:	28 30       	cpi	r18, 0x08	; 8
    65aa:	08 f0       	brcs	.+2      	; 0x65ae <__ftoa_engine+0x6>
    65ac:	27 e0       	ldi	r18, 0x07	; 7
    65ae:	33 27       	eor	r19, r19
    65b0:	da 01       	movw	r26, r20
    65b2:	99 0f       	add	r25, r25
    65b4:	31 1d       	adc	r19, r1
    65b6:	87 fd       	sbrc	r24, 7
    65b8:	91 60       	ori	r25, 0x01	; 1
    65ba:	00 96       	adiw	r24, 0x00	; 0
    65bc:	61 05       	cpc	r22, r1
    65be:	71 05       	cpc	r23, r1
    65c0:	39 f4       	brne	.+14     	; 0x65d0 <__ftoa_engine+0x28>
    65c2:	32 60       	ori	r19, 0x02	; 2
    65c4:	2e 5f       	subi	r18, 0xFE	; 254
    65c6:	3d 93       	st	X+, r19
    65c8:	30 e3       	ldi	r19, 0x30	; 48
    65ca:	2a 95       	dec	r18
    65cc:	e1 f7       	brne	.-8      	; 0x65c6 <__ftoa_engine+0x1e>
    65ce:	08 95       	ret
    65d0:	9f 3f       	cpi	r25, 0xFF	; 255
    65d2:	30 f0       	brcs	.+12     	; 0x65e0 <__ftoa_engine+0x38>
    65d4:	80 38       	cpi	r24, 0x80	; 128
    65d6:	71 05       	cpc	r23, r1
    65d8:	61 05       	cpc	r22, r1
    65da:	09 f0       	breq	.+2      	; 0x65de <__ftoa_engine+0x36>
    65dc:	3c 5f       	subi	r19, 0xFC	; 252
    65de:	3c 5f       	subi	r19, 0xFC	; 252
    65e0:	3d 93       	st	X+, r19
    65e2:	91 30       	cpi	r25, 0x01	; 1
    65e4:	08 f0       	brcs	.+2      	; 0x65e8 <__ftoa_engine+0x40>
    65e6:	80 68       	ori	r24, 0x80	; 128
    65e8:	91 1d       	adc	r25, r1
    65ea:	df 93       	push	r29
    65ec:	cf 93       	push	r28
    65ee:	1f 93       	push	r17
    65f0:	0f 93       	push	r16
    65f2:	ff 92       	push	r15
    65f4:	ef 92       	push	r14
    65f6:	19 2f       	mov	r17, r25
    65f8:	98 7f       	andi	r25, 0xF8	; 248
    65fa:	96 95       	lsr	r25
    65fc:	e9 2f       	mov	r30, r25
    65fe:	96 95       	lsr	r25
    6600:	96 95       	lsr	r25
    6602:	e9 0f       	add	r30, r25
    6604:	ff 27       	eor	r31, r31
    6606:	e4 50       	subi	r30, 0x04	; 4
    6608:	fe 4f       	sbci	r31, 0xFE	; 254
    660a:	99 27       	eor	r25, r25
    660c:	33 27       	eor	r19, r19
    660e:	ee 24       	eor	r14, r14
    6610:	ff 24       	eor	r15, r15
    6612:	a7 01       	movw	r20, r14
    6614:	e7 01       	movw	r28, r14
    6616:	05 90       	lpm	r0, Z+
    6618:	08 94       	sec
    661a:	07 94       	ror	r0
    661c:	28 f4       	brcc	.+10     	; 0x6628 <__ftoa_engine+0x80>
    661e:	36 0f       	add	r19, r22
    6620:	e7 1e       	adc	r14, r23
    6622:	f8 1e       	adc	r15, r24
    6624:	49 1f       	adc	r20, r25
    6626:	51 1d       	adc	r21, r1
    6628:	66 0f       	add	r22, r22
    662a:	77 1f       	adc	r23, r23
    662c:	88 1f       	adc	r24, r24
    662e:	99 1f       	adc	r25, r25
    6630:	06 94       	lsr	r0
    6632:	a1 f7       	brne	.-24     	; 0x661c <__ftoa_engine+0x74>
    6634:	05 90       	lpm	r0, Z+
    6636:	07 94       	ror	r0
    6638:	28 f4       	brcc	.+10     	; 0x6644 <__ftoa_engine+0x9c>
    663a:	e7 0e       	add	r14, r23
    663c:	f8 1e       	adc	r15, r24
    663e:	49 1f       	adc	r20, r25
    6640:	56 1f       	adc	r21, r22
    6642:	c1 1d       	adc	r28, r1
    6644:	77 0f       	add	r23, r23
    6646:	88 1f       	adc	r24, r24
    6648:	99 1f       	adc	r25, r25
    664a:	66 1f       	adc	r22, r22
    664c:	06 94       	lsr	r0
    664e:	a1 f7       	brne	.-24     	; 0x6638 <__ftoa_engine+0x90>
    6650:	05 90       	lpm	r0, Z+
    6652:	07 94       	ror	r0
    6654:	28 f4       	brcc	.+10     	; 0x6660 <__ftoa_engine+0xb8>
    6656:	f8 0e       	add	r15, r24
    6658:	49 1f       	adc	r20, r25
    665a:	56 1f       	adc	r21, r22
    665c:	c7 1f       	adc	r28, r23
    665e:	d1 1d       	adc	r29, r1
    6660:	88 0f       	add	r24, r24
    6662:	99 1f       	adc	r25, r25
    6664:	66 1f       	adc	r22, r22
    6666:	77 1f       	adc	r23, r23
    6668:	06 94       	lsr	r0
    666a:	a1 f7       	brne	.-24     	; 0x6654 <__ftoa_engine+0xac>
    666c:	05 90       	lpm	r0, Z+
    666e:	07 94       	ror	r0
    6670:	20 f4       	brcc	.+8      	; 0x667a <__ftoa_engine+0xd2>
    6672:	49 0f       	add	r20, r25
    6674:	56 1f       	adc	r21, r22
    6676:	c7 1f       	adc	r28, r23
    6678:	d8 1f       	adc	r29, r24
    667a:	99 0f       	add	r25, r25
    667c:	66 1f       	adc	r22, r22
    667e:	77 1f       	adc	r23, r23
    6680:	88 1f       	adc	r24, r24
    6682:	06 94       	lsr	r0
    6684:	a9 f7       	brne	.-22     	; 0x6670 <__ftoa_engine+0xc8>
    6686:	84 91       	lpm	r24, Z
    6688:	10 95       	com	r17
    668a:	17 70       	andi	r17, 0x07	; 7
    668c:	41 f0       	breq	.+16     	; 0x669e <__ftoa_engine+0xf6>
    668e:	d6 95       	lsr	r29
    6690:	c7 95       	ror	r28
    6692:	57 95       	ror	r21
    6694:	47 95       	ror	r20
    6696:	f7 94       	ror	r15
    6698:	e7 94       	ror	r14
    669a:	1a 95       	dec	r17
    669c:	c1 f7       	brne	.-16     	; 0x668e <__ftoa_engine+0xe6>
    669e:	e2 ea       	ldi	r30, 0xA2	; 162
    66a0:	f1 e0       	ldi	r31, 0x01	; 1
    66a2:	68 94       	set
    66a4:	15 90       	lpm	r1, Z+
    66a6:	15 91       	lpm	r17, Z+
    66a8:	35 91       	lpm	r19, Z+
    66aa:	65 91       	lpm	r22, Z+
    66ac:	95 91       	lpm	r25, Z+
    66ae:	05 90       	lpm	r0, Z+
    66b0:	7f e2       	ldi	r23, 0x2F	; 47
    66b2:	73 95       	inc	r23
    66b4:	e1 18       	sub	r14, r1
    66b6:	f1 0a       	sbc	r15, r17
    66b8:	43 0b       	sbc	r20, r19
    66ba:	56 0b       	sbc	r21, r22
    66bc:	c9 0b       	sbc	r28, r25
    66be:	d0 09       	sbc	r29, r0
    66c0:	c0 f7       	brcc	.-16     	; 0x66b2 <__ftoa_engine+0x10a>
    66c2:	e1 0c       	add	r14, r1
    66c4:	f1 1e       	adc	r15, r17
    66c6:	43 1f       	adc	r20, r19
    66c8:	56 1f       	adc	r21, r22
    66ca:	c9 1f       	adc	r28, r25
    66cc:	d0 1d       	adc	r29, r0
    66ce:	7e f4       	brtc	.+30     	; 0x66ee <__ftoa_engine+0x146>
    66d0:	70 33       	cpi	r23, 0x30	; 48
    66d2:	11 f4       	brne	.+4      	; 0x66d8 <__ftoa_engine+0x130>
    66d4:	8a 95       	dec	r24
    66d6:	e6 cf       	rjmp	.-52     	; 0x66a4 <__ftoa_engine+0xfc>
    66d8:	e8 94       	clt
    66da:	01 50       	subi	r16, 0x01	; 1
    66dc:	30 f0       	brcs	.+12     	; 0x66ea <__ftoa_engine+0x142>
    66de:	08 0f       	add	r16, r24
    66e0:	0a f4       	brpl	.+2      	; 0x66e4 <__ftoa_engine+0x13c>
    66e2:	00 27       	eor	r16, r16
    66e4:	02 17       	cp	r16, r18
    66e6:	08 f4       	brcc	.+2      	; 0x66ea <__ftoa_engine+0x142>
    66e8:	20 2f       	mov	r18, r16
    66ea:	23 95       	inc	r18
    66ec:	02 2f       	mov	r16, r18
    66ee:	7a 33       	cpi	r23, 0x3A	; 58
    66f0:	28 f0       	brcs	.+10     	; 0x66fc <__ftoa_engine+0x154>
    66f2:	79 e3       	ldi	r23, 0x39	; 57
    66f4:	7d 93       	st	X+, r23
    66f6:	2a 95       	dec	r18
    66f8:	e9 f7       	brne	.-6      	; 0x66f4 <__ftoa_engine+0x14c>
    66fa:	10 c0       	rjmp	.+32     	; 0x671c <__ftoa_engine+0x174>
    66fc:	7d 93       	st	X+, r23
    66fe:	2a 95       	dec	r18
    6700:	89 f6       	brne	.-94     	; 0x66a4 <__ftoa_engine+0xfc>
    6702:	06 94       	lsr	r0
    6704:	97 95       	ror	r25
    6706:	67 95       	ror	r22
    6708:	37 95       	ror	r19
    670a:	17 95       	ror	r17
    670c:	17 94       	ror	r1
    670e:	e1 18       	sub	r14, r1
    6710:	f1 0a       	sbc	r15, r17
    6712:	43 0b       	sbc	r20, r19
    6714:	56 0b       	sbc	r21, r22
    6716:	c9 0b       	sbc	r28, r25
    6718:	d0 09       	sbc	r29, r0
    671a:	98 f0       	brcs	.+38     	; 0x6742 <__ftoa_engine+0x19a>
    671c:	23 95       	inc	r18
    671e:	7e 91       	ld	r23, -X
    6720:	73 95       	inc	r23
    6722:	7a 33       	cpi	r23, 0x3A	; 58
    6724:	08 f0       	brcs	.+2      	; 0x6728 <__ftoa_engine+0x180>
    6726:	70 e3       	ldi	r23, 0x30	; 48
    6728:	7c 93       	st	X, r23
    672a:	20 13       	cpse	r18, r16
    672c:	b8 f7       	brcc	.-18     	; 0x671c <__ftoa_engine+0x174>
    672e:	7e 91       	ld	r23, -X
    6730:	70 61       	ori	r23, 0x10	; 16
    6732:	7d 93       	st	X+, r23
    6734:	30 f0       	brcs	.+12     	; 0x6742 <__ftoa_engine+0x19a>
    6736:	83 95       	inc	r24
    6738:	71 e3       	ldi	r23, 0x31	; 49
    673a:	7d 93       	st	X+, r23
    673c:	70 e3       	ldi	r23, 0x30	; 48
    673e:	2a 95       	dec	r18
    6740:	e1 f7       	brne	.-8      	; 0x673a <__ftoa_engine+0x192>
    6742:	11 24       	eor	r1, r1
    6744:	ef 90       	pop	r14
    6746:	ff 90       	pop	r15
    6748:	0f 91       	pop	r16
    674a:	1f 91       	pop	r17
    674c:	cf 91       	pop	r28
    674e:	df 91       	pop	r29
    6750:	99 27       	eor	r25, r25
    6752:	87 fd       	sbrc	r24, 7
    6754:	90 95       	com	r25
    6756:	08 95       	ret

00006758 <strnlen_P>:
    6758:	fc 01       	movw	r30, r24
    675a:	05 90       	lpm	r0, Z+
    675c:	61 50       	subi	r22, 0x01	; 1
    675e:	70 40       	sbci	r23, 0x00	; 0
    6760:	01 10       	cpse	r0, r1
    6762:	d8 f7       	brcc	.-10     	; 0x675a <strnlen_P+0x2>
    6764:	80 95       	com	r24
    6766:	90 95       	com	r25
    6768:	8e 0f       	add	r24, r30
    676a:	9f 1f       	adc	r25, r31
    676c:	08 95       	ret

0000676e <memcpy>:
    676e:	fb 01       	movw	r30, r22
    6770:	dc 01       	movw	r26, r24
    6772:	02 c0       	rjmp	.+4      	; 0x6778 <memcpy+0xa>
    6774:	01 90       	ld	r0, Z+
    6776:	0d 92       	st	X+, r0
    6778:	41 50       	subi	r20, 0x01	; 1
    677a:	50 40       	sbci	r21, 0x00	; 0
    677c:	d8 f7       	brcc	.-10     	; 0x6774 <memcpy+0x6>
    677e:	08 95       	ret

00006780 <memset>:
    6780:	dc 01       	movw	r26, r24
    6782:	01 c0       	rjmp	.+2      	; 0x6786 <memset+0x6>
    6784:	6d 93       	st	X+, r22
    6786:	41 50       	subi	r20, 0x01	; 1
    6788:	50 40       	sbci	r21, 0x00	; 0
    678a:	e0 f7       	brcc	.-8      	; 0x6784 <memset+0x4>
    678c:	08 95       	ret

0000678e <strcasestr>:
    678e:	fb 01       	movw	r30, r22
    6790:	51 91       	ld	r21, Z+
    6792:	55 23       	and	r21, r21
    6794:	b1 f0       	breq	.+44     	; 0x67c2 <strcasestr+0x34>
    6796:	bf 01       	movw	r22, r30
    6798:	dc 01       	movw	r26, r24
    679a:	05 2e       	mov	r0, r21
    679c:	4d 91       	ld	r20, X+
    679e:	44 23       	and	r20, r20
    67a0:	69 f0       	breq	.+26     	; 0x67bc <strcasestr+0x2e>
    67a2:	10 d0       	rcall	.+32     	; 0x67c4 <strcasestr+0x36>
    67a4:	d9 f7       	brne	.-10     	; 0x679c <strcasestr+0xe>
    67a6:	cd 01       	movw	r24, r26
    67a8:	01 90       	ld	r0, Z+
    67aa:	00 20       	and	r0, r0
    67ac:	49 f0       	breq	.+18     	; 0x67c0 <strcasestr+0x32>
    67ae:	4d 91       	ld	r20, X+
    67b0:	41 11       	cpse	r20, r1
    67b2:	08 d0       	rcall	.+16     	; 0x67c4 <strcasestr+0x36>
    67b4:	c9 f3       	breq	.-14     	; 0x67a8 <strcasestr+0x1a>
    67b6:	fb 01       	movw	r30, r22
    67b8:	41 11       	cpse	r20, r1
    67ba:	ee cf       	rjmp	.-36     	; 0x6798 <strcasestr+0xa>
    67bc:	81 e0       	ldi	r24, 0x01	; 1
    67be:	90 e0       	ldi	r25, 0x00	; 0
    67c0:	01 97       	sbiw	r24, 0x01	; 1
    67c2:	08 95       	ret
    67c4:	40 25       	eor	r20, r0
    67c6:	39 f0       	breq	.+14     	; 0x67d6 <strcasestr+0x48>
    67c8:	40 32       	cpi	r20, 0x20	; 32
    67ca:	29 f4       	brne	.+10     	; 0x67d6 <strcasestr+0x48>
    67cc:	40 29       	or	r20, r0
    67ce:	4b 57       	subi	r20, 0x7B	; 123
    67d0:	46 5e       	subi	r20, 0xE6	; 230
    67d2:	08 f0       	brcs	.+2      	; 0x67d6 <strcasestr+0x48>
    67d4:	18 94       	sez
    67d6:	08 95       	ret

000067d8 <strcat>:
    67d8:	fb 01       	movw	r30, r22
    67da:	dc 01       	movw	r26, r24
    67dc:	0d 90       	ld	r0, X+
    67de:	00 20       	and	r0, r0
    67e0:	e9 f7       	brne	.-6      	; 0x67dc <strcat+0x4>
    67e2:	11 97       	sbiw	r26, 0x01	; 1
    67e4:	01 90       	ld	r0, Z+
    67e6:	0d 92       	st	X+, r0
    67e8:	00 20       	and	r0, r0
    67ea:	e1 f7       	brne	.-8      	; 0x67e4 <strcat+0xc>
    67ec:	08 95       	ret

000067ee <strcpy>:
    67ee:	fb 01       	movw	r30, r22
    67f0:	dc 01       	movw	r26, r24
    67f2:	01 90       	ld	r0, Z+
    67f4:	0d 92       	st	X+, r0
    67f6:	00 20       	and	r0, r0
    67f8:	e1 f7       	brne	.-8      	; 0x67f2 <strcpy+0x4>
    67fa:	08 95       	ret

000067fc <strncasecmp>:
    67fc:	fb 01       	movw	r30, r22
    67fe:	dc 01       	movw	r26, r24
    6800:	41 50       	subi	r20, 0x01	; 1
    6802:	50 40       	sbci	r21, 0x00	; 0
    6804:	88 f0       	brcs	.+34     	; 0x6828 <strncasecmp+0x2c>
    6806:	8d 91       	ld	r24, X+
    6808:	81 34       	cpi	r24, 0x41	; 65
    680a:	1c f0       	brlt	.+6      	; 0x6812 <strncasecmp+0x16>
    680c:	8b 35       	cpi	r24, 0x5B	; 91
    680e:	0c f4       	brge	.+2      	; 0x6812 <strncasecmp+0x16>
    6810:	80 5e       	subi	r24, 0xE0	; 224
    6812:	61 91       	ld	r22, Z+
    6814:	61 34       	cpi	r22, 0x41	; 65
    6816:	1c f0       	brlt	.+6      	; 0x681e <strncasecmp+0x22>
    6818:	6b 35       	cpi	r22, 0x5B	; 91
    681a:	0c f4       	brge	.+2      	; 0x681e <strncasecmp+0x22>
    681c:	60 5e       	subi	r22, 0xE0	; 224
    681e:	86 1b       	sub	r24, r22
    6820:	61 11       	cpse	r22, r1
    6822:	71 f3       	breq	.-36     	; 0x6800 <strncasecmp+0x4>
    6824:	99 0b       	sbc	r25, r25
    6826:	08 95       	ret
    6828:	88 1b       	sub	r24, r24
    682a:	fc cf       	rjmp	.-8      	; 0x6824 <strncasecmp+0x28>

0000682c <strnlen>:
    682c:	fc 01       	movw	r30, r24
    682e:	61 50       	subi	r22, 0x01	; 1
    6830:	70 40       	sbci	r23, 0x00	; 0
    6832:	01 90       	ld	r0, Z+
    6834:	01 10       	cpse	r0, r1
    6836:	d8 f7       	brcc	.-10     	; 0x682e <strnlen+0x2>
    6838:	80 95       	com	r24
    683a:	90 95       	com	r25
    683c:	8e 0f       	add	r24, r30
    683e:	9f 1f       	adc	r25, r31
    6840:	08 95       	ret

00006842 <fputc>:
    6842:	0f 93       	push	r16
    6844:	1f 93       	push	r17
    6846:	cf 93       	push	r28
    6848:	df 93       	push	r29
    684a:	fb 01       	movw	r30, r22
    684c:	23 81       	ldd	r18, Z+3	; 0x03
    684e:	21 fd       	sbrc	r18, 1
    6850:	03 c0       	rjmp	.+6      	; 0x6858 <fputc+0x16>
    6852:	8f ef       	ldi	r24, 0xFF	; 255
    6854:	9f ef       	ldi	r25, 0xFF	; 255
    6856:	2c c0       	rjmp	.+88     	; 0x68b0 <fputc+0x6e>
    6858:	22 ff       	sbrs	r18, 2
    685a:	16 c0       	rjmp	.+44     	; 0x6888 <fputc+0x46>
    685c:	46 81       	ldd	r20, Z+6	; 0x06
    685e:	57 81       	ldd	r21, Z+7	; 0x07
    6860:	24 81       	ldd	r18, Z+4	; 0x04
    6862:	35 81       	ldd	r19, Z+5	; 0x05
    6864:	42 17       	cp	r20, r18
    6866:	53 07       	cpc	r21, r19
    6868:	44 f4       	brge	.+16     	; 0x687a <fputc+0x38>
    686a:	a0 81       	ld	r26, Z
    686c:	b1 81       	ldd	r27, Z+1	; 0x01
    686e:	9d 01       	movw	r18, r26
    6870:	2f 5f       	subi	r18, 0xFF	; 255
    6872:	3f 4f       	sbci	r19, 0xFF	; 255
    6874:	31 83       	std	Z+1, r19	; 0x01
    6876:	20 83       	st	Z, r18
    6878:	8c 93       	st	X, r24
    687a:	26 81       	ldd	r18, Z+6	; 0x06
    687c:	37 81       	ldd	r19, Z+7	; 0x07
    687e:	2f 5f       	subi	r18, 0xFF	; 255
    6880:	3f 4f       	sbci	r19, 0xFF	; 255
    6882:	37 83       	std	Z+7, r19	; 0x07
    6884:	26 83       	std	Z+6, r18	; 0x06
    6886:	14 c0       	rjmp	.+40     	; 0x68b0 <fputc+0x6e>
    6888:	8b 01       	movw	r16, r22
    688a:	ec 01       	movw	r28, r24
    688c:	fb 01       	movw	r30, r22
    688e:	00 84       	ldd	r0, Z+8	; 0x08
    6890:	f1 85       	ldd	r31, Z+9	; 0x09
    6892:	e0 2d       	mov	r30, r0
    6894:	19 95       	eicall
    6896:	89 2b       	or	r24, r25
    6898:	e1 f6       	brne	.-72     	; 0x6852 <fputc+0x10>
    689a:	d8 01       	movw	r26, r16
    689c:	16 96       	adiw	r26, 0x06	; 6
    689e:	8d 91       	ld	r24, X+
    68a0:	9c 91       	ld	r25, X
    68a2:	17 97       	sbiw	r26, 0x07	; 7
    68a4:	01 96       	adiw	r24, 0x01	; 1
    68a6:	17 96       	adiw	r26, 0x07	; 7
    68a8:	9c 93       	st	X, r25
    68aa:	8e 93       	st	-X, r24
    68ac:	16 97       	sbiw	r26, 0x06	; 6
    68ae:	ce 01       	movw	r24, r28
    68b0:	df 91       	pop	r29
    68b2:	cf 91       	pop	r28
    68b4:	1f 91       	pop	r17
    68b6:	0f 91       	pop	r16
    68b8:	08 95       	ret

000068ba <printf>:
    68ba:	cf 93       	push	r28
    68bc:	df 93       	push	r29
    68be:	cd b7       	in	r28, 0x3d	; 61
    68c0:	de b7       	in	r29, 0x3e	; 62
    68c2:	ae 01       	movw	r20, r28
    68c4:	4a 5f       	subi	r20, 0xFA	; 250
    68c6:	5f 4f       	sbci	r21, 0xFF	; 255
    68c8:	fa 01       	movw	r30, r20
    68ca:	61 91       	ld	r22, Z+
    68cc:	71 91       	ld	r23, Z+
    68ce:	af 01       	movw	r20, r30
    68d0:	80 91 98 17 	lds	r24, 0x1798	; 0x801798 <__iob+0x2>
    68d4:	90 91 99 17 	lds	r25, 0x1799	; 0x801799 <__iob+0x3>
    68d8:	59 d9       	rcall	.-3406   	; 0x5b8c <vfprintf>
    68da:	df 91       	pop	r29
    68dc:	cf 91       	pop	r28
    68de:	08 95       	ret

000068e0 <puts>:
    68e0:	0f 93       	push	r16
    68e2:	1f 93       	push	r17
    68e4:	cf 93       	push	r28
    68e6:	df 93       	push	r29
    68e8:	e0 91 98 17 	lds	r30, 0x1798	; 0x801798 <__iob+0x2>
    68ec:	f0 91 99 17 	lds	r31, 0x1799	; 0x801799 <__iob+0x3>
    68f0:	23 81       	ldd	r18, Z+3	; 0x03
    68f2:	21 ff       	sbrs	r18, 1
    68f4:	1b c0       	rjmp	.+54     	; 0x692c <puts+0x4c>
    68f6:	8c 01       	movw	r16, r24
    68f8:	d0 e0       	ldi	r29, 0x00	; 0
    68fa:	c0 e0       	ldi	r28, 0x00	; 0
    68fc:	f8 01       	movw	r30, r16
    68fe:	81 91       	ld	r24, Z+
    6900:	8f 01       	movw	r16, r30
    6902:	60 91 98 17 	lds	r22, 0x1798	; 0x801798 <__iob+0x2>
    6906:	70 91 99 17 	lds	r23, 0x1799	; 0x801799 <__iob+0x3>
    690a:	db 01       	movw	r26, r22
    690c:	18 96       	adiw	r26, 0x08	; 8
    690e:	ed 91       	ld	r30, X+
    6910:	fc 91       	ld	r31, X
    6912:	19 97       	sbiw	r26, 0x09	; 9
    6914:	88 23       	and	r24, r24
    6916:	31 f0       	breq	.+12     	; 0x6924 <puts+0x44>
    6918:	19 95       	eicall
    691a:	89 2b       	or	r24, r25
    691c:	79 f3       	breq	.-34     	; 0x68fc <puts+0x1c>
    691e:	df ef       	ldi	r29, 0xFF	; 255
    6920:	cf ef       	ldi	r28, 0xFF	; 255
    6922:	ec cf       	rjmp	.-40     	; 0x68fc <puts+0x1c>
    6924:	8a e0       	ldi	r24, 0x0A	; 10
    6926:	19 95       	eicall
    6928:	89 2b       	or	r24, r25
    692a:	19 f0       	breq	.+6      	; 0x6932 <puts+0x52>
    692c:	8f ef       	ldi	r24, 0xFF	; 255
    692e:	9f ef       	ldi	r25, 0xFF	; 255
    6930:	02 c0       	rjmp	.+4      	; 0x6936 <puts+0x56>
    6932:	8d 2f       	mov	r24, r29
    6934:	9c 2f       	mov	r25, r28
    6936:	df 91       	pop	r29
    6938:	cf 91       	pop	r28
    693a:	1f 91       	pop	r17
    693c:	0f 91       	pop	r16
    693e:	08 95       	ret

00006940 <sprintf>:
    6940:	0f 93       	push	r16
    6942:	1f 93       	push	r17
    6944:	cf 93       	push	r28
    6946:	df 93       	push	r29
    6948:	cd b7       	in	r28, 0x3d	; 61
    694a:	de b7       	in	r29, 0x3e	; 62
    694c:	2e 97       	sbiw	r28, 0x0e	; 14
    694e:	0f b6       	in	r0, 0x3f	; 63
    6950:	f8 94       	cli
    6952:	de bf       	out	0x3e, r29	; 62
    6954:	0f be       	out	0x3f, r0	; 63
    6956:	cd bf       	out	0x3d, r28	; 61
    6958:	0e 89       	ldd	r16, Y+22	; 0x16
    695a:	1f 89       	ldd	r17, Y+23	; 0x17
    695c:	86 e0       	ldi	r24, 0x06	; 6
    695e:	8c 83       	std	Y+4, r24	; 0x04
    6960:	1a 83       	std	Y+2, r17	; 0x02
    6962:	09 83       	std	Y+1, r16	; 0x01
    6964:	8f ef       	ldi	r24, 0xFF	; 255
    6966:	9f e7       	ldi	r25, 0x7F	; 127
    6968:	9e 83       	std	Y+6, r25	; 0x06
    696a:	8d 83       	std	Y+5, r24	; 0x05
    696c:	ae 01       	movw	r20, r28
    696e:	46 5e       	subi	r20, 0xE6	; 230
    6970:	5f 4f       	sbci	r21, 0xFF	; 255
    6972:	68 8d       	ldd	r22, Y+24	; 0x18
    6974:	79 8d       	ldd	r23, Y+25	; 0x19
    6976:	ce 01       	movw	r24, r28
    6978:	01 96       	adiw	r24, 0x01	; 1
    697a:	08 d9       	rcall	.-3568   	; 0x5b8c <vfprintf>
    697c:	ef 81       	ldd	r30, Y+7	; 0x07
    697e:	f8 85       	ldd	r31, Y+8	; 0x08
    6980:	e0 0f       	add	r30, r16
    6982:	f1 1f       	adc	r31, r17
    6984:	10 82       	st	Z, r1
    6986:	2e 96       	adiw	r28, 0x0e	; 14
    6988:	0f b6       	in	r0, 0x3f	; 63
    698a:	f8 94       	cli
    698c:	de bf       	out	0x3e, r29	; 62
    698e:	0f be       	out	0x3f, r0	; 63
    6990:	cd bf       	out	0x3d, r28	; 61
    6992:	df 91       	pop	r29
    6994:	cf 91       	pop	r28
    6996:	1f 91       	pop	r17
    6998:	0f 91       	pop	r16
    699a:	08 95       	ret

0000699c <__ultoa_invert>:
    699c:	fa 01       	movw	r30, r20
    699e:	aa 27       	eor	r26, r26
    69a0:	28 30       	cpi	r18, 0x08	; 8
    69a2:	51 f1       	breq	.+84     	; 0x69f8 <__ultoa_invert+0x5c>
    69a4:	20 31       	cpi	r18, 0x10	; 16
    69a6:	81 f1       	breq	.+96     	; 0x6a08 <__ultoa_invert+0x6c>
    69a8:	e8 94       	clt
    69aa:	6f 93       	push	r22
    69ac:	6e 7f       	andi	r22, 0xFE	; 254
    69ae:	6e 5f       	subi	r22, 0xFE	; 254
    69b0:	7f 4f       	sbci	r23, 0xFF	; 255
    69b2:	8f 4f       	sbci	r24, 0xFF	; 255
    69b4:	9f 4f       	sbci	r25, 0xFF	; 255
    69b6:	af 4f       	sbci	r26, 0xFF	; 255
    69b8:	b1 e0       	ldi	r27, 0x01	; 1
    69ba:	3e d0       	rcall	.+124    	; 0x6a38 <__ultoa_invert+0x9c>
    69bc:	b4 e0       	ldi	r27, 0x04	; 4
    69be:	3c d0       	rcall	.+120    	; 0x6a38 <__ultoa_invert+0x9c>
    69c0:	67 0f       	add	r22, r23
    69c2:	78 1f       	adc	r23, r24
    69c4:	89 1f       	adc	r24, r25
    69c6:	9a 1f       	adc	r25, r26
    69c8:	a1 1d       	adc	r26, r1
    69ca:	68 0f       	add	r22, r24
    69cc:	79 1f       	adc	r23, r25
    69ce:	8a 1f       	adc	r24, r26
    69d0:	91 1d       	adc	r25, r1
    69d2:	a1 1d       	adc	r26, r1
    69d4:	6a 0f       	add	r22, r26
    69d6:	71 1d       	adc	r23, r1
    69d8:	81 1d       	adc	r24, r1
    69da:	91 1d       	adc	r25, r1
    69dc:	a1 1d       	adc	r26, r1
    69de:	20 d0       	rcall	.+64     	; 0x6a20 <__ultoa_invert+0x84>
    69e0:	09 f4       	brne	.+2      	; 0x69e4 <__ultoa_invert+0x48>
    69e2:	68 94       	set
    69e4:	3f 91       	pop	r19
    69e6:	2a e0       	ldi	r18, 0x0A	; 10
    69e8:	26 9f       	mul	r18, r22
    69ea:	11 24       	eor	r1, r1
    69ec:	30 19       	sub	r19, r0
    69ee:	30 5d       	subi	r19, 0xD0	; 208
    69f0:	31 93       	st	Z+, r19
    69f2:	de f6       	brtc	.-74     	; 0x69aa <__ultoa_invert+0xe>
    69f4:	cf 01       	movw	r24, r30
    69f6:	08 95       	ret
    69f8:	46 2f       	mov	r20, r22
    69fa:	47 70       	andi	r20, 0x07	; 7
    69fc:	40 5d       	subi	r20, 0xD0	; 208
    69fe:	41 93       	st	Z+, r20
    6a00:	b3 e0       	ldi	r27, 0x03	; 3
    6a02:	0f d0       	rcall	.+30     	; 0x6a22 <__ultoa_invert+0x86>
    6a04:	c9 f7       	brne	.-14     	; 0x69f8 <__ultoa_invert+0x5c>
    6a06:	f6 cf       	rjmp	.-20     	; 0x69f4 <__ultoa_invert+0x58>
    6a08:	46 2f       	mov	r20, r22
    6a0a:	4f 70       	andi	r20, 0x0F	; 15
    6a0c:	40 5d       	subi	r20, 0xD0	; 208
    6a0e:	4a 33       	cpi	r20, 0x3A	; 58
    6a10:	18 f0       	brcs	.+6      	; 0x6a18 <__ultoa_invert+0x7c>
    6a12:	49 5d       	subi	r20, 0xD9	; 217
    6a14:	31 fd       	sbrc	r19, 1
    6a16:	40 52       	subi	r20, 0x20	; 32
    6a18:	41 93       	st	Z+, r20
    6a1a:	02 d0       	rcall	.+4      	; 0x6a20 <__ultoa_invert+0x84>
    6a1c:	a9 f7       	brne	.-22     	; 0x6a08 <__ultoa_invert+0x6c>
    6a1e:	ea cf       	rjmp	.-44     	; 0x69f4 <__ultoa_invert+0x58>
    6a20:	b4 e0       	ldi	r27, 0x04	; 4
    6a22:	a6 95       	lsr	r26
    6a24:	97 95       	ror	r25
    6a26:	87 95       	ror	r24
    6a28:	77 95       	ror	r23
    6a2a:	67 95       	ror	r22
    6a2c:	ba 95       	dec	r27
    6a2e:	c9 f7       	brne	.-14     	; 0x6a22 <__ultoa_invert+0x86>
    6a30:	00 97       	sbiw	r24, 0x00	; 0
    6a32:	61 05       	cpc	r22, r1
    6a34:	71 05       	cpc	r23, r1
    6a36:	08 95       	ret
    6a38:	9b 01       	movw	r18, r22
    6a3a:	ac 01       	movw	r20, r24
    6a3c:	0a 2e       	mov	r0, r26
    6a3e:	06 94       	lsr	r0
    6a40:	57 95       	ror	r21
    6a42:	47 95       	ror	r20
    6a44:	37 95       	ror	r19
    6a46:	27 95       	ror	r18
    6a48:	ba 95       	dec	r27
    6a4a:	c9 f7       	brne	.-14     	; 0x6a3e <__ultoa_invert+0xa2>
    6a4c:	62 0f       	add	r22, r18
    6a4e:	73 1f       	adc	r23, r19
    6a50:	84 1f       	adc	r24, r20
    6a52:	95 1f       	adc	r25, r21
    6a54:	a0 1d       	adc	r26, r0
    6a56:	08 95       	ret

00006a58 <_exit>:
    6a58:	f8 94       	cli

00006a5a <__stop_program>:
    6a5a:	ff cf       	rjmp	.-2      	; 0x6a5a <__stop_program>

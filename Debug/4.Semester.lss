
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000059a  00800200  00005e16  00005eaa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005e16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f4e  0080079a  0080079a  00006444  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006444  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000064a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ae8  00000000  00000000  000064e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d5ec  00000000  00000000  00006fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000035f1  00000000  00000000  000145b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000693d  00000000  00000000  00017ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000027b0  00000000  00000000  0001e4e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000042e0  00000000  00000000  00020c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c5ac  00000000  00000000  00024f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a38  00000000  00000000  00031520  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	cd c4       	rjmp	.+2458   	; 0x9cc <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 41 22 	jmp	0x4482	; 0x4482 <__vector_25>
      68:	0c 94 93 22 	jmp	0x4526	; 0x4526 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 d7 22 	jmp	0x45ae	; 0x45ae <__vector_36>
      94:	0c 94 29 23 	jmp	0x4652	; 0x4652 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 75 27 	jmp	0x4eea	; 0x4eea <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 6d 23 	jmp	0x46da	; 0x46da <__vector_51>
      d0:	0c 94 bf 23 	jmp	0x477e	; 0x477e <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 03 24 	jmp	0x4806	; 0x4806 <__vector_54>
      dc:	0c 94 55 24 	jmp	0x48aa	; 0x48aa <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	65 18       	sub	r6, r5
      e6:	65 18       	sub	r6, r5
      e8:	65 18       	sub	r6, r5
      ea:	9c 18       	sub	r9, r12
      ec:	a4 18       	sub	r10, r4
      ee:	b9 18       	sub	r11, r9
      f0:	65 18       	sub	r6, r5
      f2:	65 18       	sub	r6, r5
      f4:	9c 18       	sub	r9, r12
      f6:	a4 18       	sub	r10, r4
      f8:	97 27       	eor	r25, r23
      fa:	07 28       	or	r0, r7
      fc:	07 28       	or	r0, r7
      fe:	07 28       	or	r0, r7
     100:	07 28       	or	r0, r7
     102:	07 28       	or	r0, r7
     104:	07 28       	or	r0, r7
     106:	07 28       	or	r0, r7
     108:	97 27       	eor	r25, r23
     10a:	07 28       	or	r0, r7
     10c:	07 28       	or	r0, r7
     10e:	07 28       	or	r0, r7
     110:	07 28       	or	r0, r7
     112:	07 28       	or	r0, r7
     114:	07 28       	or	r0, r7
     116:	07 28       	or	r0, r7
     118:	99 27       	eor	r25, r25
     11a:	07 28       	or	r0, r7
     11c:	07 28       	or	r0, r7
     11e:	07 28       	or	r0, r7
     120:	07 28       	or	r0, r7
     122:	07 28       	or	r0, r7
     124:	07 28       	or	r0, r7
     126:	07 28       	or	r0, r7
     128:	07 28       	or	r0, r7
     12a:	07 28       	or	r0, r7
     12c:	07 28       	or	r0, r7
     12e:	07 28       	or	r0, r7
     130:	07 28       	or	r0, r7
     132:	07 28       	or	r0, r7
     134:	07 28       	or	r0, r7
     136:	07 28       	or	r0, r7
     138:	99 27       	eor	r25, r25
     13a:	07 28       	or	r0, r7
     13c:	07 28       	or	r0, r7
     13e:	07 28       	or	r0, r7
     140:	07 28       	or	r0, r7
     142:	07 28       	or	r0, r7
     144:	07 28       	or	r0, r7
     146:	07 28       	or	r0, r7
     148:	07 28       	or	r0, r7
     14a:	07 28       	or	r0, r7
     14c:	07 28       	or	r0, r7
     14e:	07 28       	or	r0, r7
     150:	07 28       	or	r0, r7
     152:	07 28       	or	r0, r7
     154:	07 28       	or	r0, r7
     156:	07 28       	or	r0, r7
     158:	03 28       	or	r0, r3
     15a:	07 28       	or	r0, r7
     15c:	07 28       	or	r0, r7
     15e:	07 28       	or	r0, r7
     160:	07 28       	or	r0, r7
     162:	07 28       	or	r0, r7
     164:	07 28       	or	r0, r7
     166:	07 28       	or	r0, r7
     168:	ce 27       	eor	r28, r30
     16a:	07 28       	or	r0, r7
     16c:	07 28       	or	r0, r7
     16e:	07 28       	or	r0, r7
     170:	07 28       	or	r0, r7
     172:	07 28       	or	r0, r7
     174:	07 28       	or	r0, r7
     176:	07 28       	or	r0, r7
     178:	07 28       	or	r0, r7
     17a:	07 28       	or	r0, r7
     17c:	07 28       	or	r0, r7
     17e:	07 28       	or	r0, r7
     180:	07 28       	or	r0, r7
     182:	07 28       	or	r0, r7
     184:	07 28       	or	r0, r7
     186:	07 28       	or	r0, r7
     188:	c2 27       	eor	r28, r18
     18a:	07 28       	or	r0, r7
     18c:	07 28       	or	r0, r7
     18e:	07 28       	or	r0, r7
     190:	07 28       	or	r0, r7
     192:	07 28       	or	r0, r7
     194:	07 28       	or	r0, r7
     196:	07 28       	or	r0, r7
     198:	e6 27       	eor	r30, r22

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <prvCheckTasksWaitingTermination>
     19e:	80 91 7b 14 	lds	r24, 0x147B	; 0x80147b <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	4c d3       	rcall	.+1688   	; 0x840 <vPortYield>
     1a8:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 d7 17 	call	0x2fae	; 0x2fae <prvProcessTimerOrBlockTask>
     1c6:	0e 94 2e 18 	call	0x305c	; 0x305c <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	17 e0       	ldi	r17, 0x07	; 7
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e6 e1       	ldi	r30, 0x16	; 22
     1e4:	fe e5       	ldi	r31, 0x5E	; 94
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	aa 39       	cpi	r26, 0x9A	; 154
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	26 e1       	ldi	r18, 0x16	; 22
     1f8:	aa e9       	ldi	r26, 0x9A	; 154
     1fa:	b7 e0       	ldi	r27, 0x07	; 7
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a8 3e       	cpi	r26, 0xE8	; 232
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 02 1b 	call	0x3604	; 0x3604 <main>
     20a:	0c 94 09 2f 	jmp	0x5e12	; 0x5e12 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <Application_getEventGroup>:
// Declare a variable to hold the created event group.
EventGroupHandle_t xCreatedEventGroup;

EventGroupHandle_t Application_getEventGroup(){
	return xCreatedEventGroup;
}
     210:	80 91 d8 16 	lds	r24, 0x16D8	; 0x8016d8 <xCreatedEventGroup>
     214:	90 91 d9 16 	lds	r25, 0x16D9	; 0x8016d9 <xCreatedEventGroup+0x1>
     218:	08 95       	ret

0000021a <CO2Sensor_handler_initialise>:
}


uint16_t CO2Sensor_getCO2InUint16(){
	return CO2ppm;
}
     21a:	ef 92       	push	r14
     21c:	ff 92       	push	r15
     21e:	0f 93       	push	r16
     220:	e1 2c       	mov	r14, r1
     222:	f1 2c       	mov	r15, r1
     224:	08 2f       	mov	r16, r24
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	40 ec       	ldi	r20, 0xC0	; 192
     22c:	50 e0       	ldi	r21, 0x00	; 0
     22e:	6f e6       	ldi	r22, 0x6F	; 111
     230:	72 e0       	ldi	r23, 0x02	; 2
     232:	87 e2       	ldi	r24, 0x27	; 39
     234:	91 e0       	ldi	r25, 0x01	; 1
     236:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <xTaskCreate>
     23a:	0f 91       	pop	r16
     23c:	ff 90       	pop	r15
     23e:	ef 90       	pop	r14
     240:	08 95       	ret

00000242 <CO2Sensor_aFunctionToSetBits>:
void CO2Sensor_aFunctionToSetBits( EventGroupHandle_t xEventGroup_co2 )
{
EventBits_t uxBits;

  /* Set bit 0  in xEventGroup. */
  uxBits = xEventGroupSetBits(
     242:	41 e0       	ldi	r20, 0x01	; 1
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	70 e0       	ldi	r23, 0x00	; 0
     24a:	45 c0       	rjmp	.+138    	; 0x2d6 <xEventGroupSetBits>
     24c:	08 95       	ret

0000024e <CO2Sensor_handler_task>:
	,  CO2_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void CO2Sensor_handler_task(void *pvParameters)
{
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	00 d0       	rcall	.+0      	; 0x254 <CO2Sensor_handler_task+0x6>
     254:	1f 92       	push	r1
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
	printf("startCO2");
     25a:	87 e7       	ldi	r24, 0x77	; 119
     25c:	92 e0       	ldi	r25, 0x02	; 2
     25e:	9f 93       	push	r25
     260:	8f 93       	push	r24
     262:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <printf>
	(void)pvParameters;
	mh_z19_injectCallBack(NULL);
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 ba 20 	call	0x4174	; 0x4174 <mh_z19_injectCallBack>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     26e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <xTaskGetTickCount>
     272:	69 83       	std	Y+1, r22	; 0x01
     274:	7a 83       	std	Y+2, r23	; 0x02
     276:	8b 83       	std	Y+3, r24	; 0x03
     278:	9c 83       	std	Y+4, r25	; 0x04
     27a:	0f 90       	pop	r0
     27c:	0f 90       	pop	r0
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     27e:	48 ea       	ldi	r20, 0xA8	; 168
     280:	58 e4       	ldi	r21, 0x48	; 72
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	70 e0       	ldi	r23, 0x00	; 0
     286:	ce 01       	movw	r24, r28
     288:	01 96       	adiw	r24, 0x01	; 1
     28a:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <xTaskDelayUntil>
		rc = mh_z19_takeMeassuring();
     28e:	0e 94 bf 20 	call	0x417e	; 0x417e <mh_z19_takeMeassuring>
     292:	80 93 da 16 	sts	0x16DA, r24	; 0x8016da <rc>
		if (rc == MHZ19_OK)
     296:	81 11       	cpse	r24, r1
     298:	f2 cf       	rjmp	.-28     	; 0x27e <CO2Sensor_handler_task+0x30>
		{
			vTaskDelay(50);
     29a:	62 e3       	ldi	r22, 0x32	; 50
     29c:	70 e0       	ldi	r23, 0x00	; 0
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <vTaskDelay>
			if(getCO2return == MHZ19_OK){
     2a6:	80 91 db 16 	lds	r24, 0x16DB	; 0x8016db <getCO2return>
     2aa:	81 11       	cpse	r24, r1
     2ac:	09 c0       	rjmp	.+18     	; 0x2c0 <CO2Sensor_handler_task+0x72>
				getCO2return = mh_z19_getCo2Ppm(&CO2ppm);
     2ae:	8c ed       	ldi	r24, 0xDC	; 220
     2b0:	96 e1       	ldi	r25, 0x16	; 22
     2b2:	0e 94 ee 20 	call	0x41dc	; 0x41dc <mh_z19_getCo2Ppm>
     2b6:	80 93 db 16 	sts	0x16DB, r24	; 0x8016db <getCO2return>
				CO2Sensor_aFunctionToSetBits(Application_getEventGroup());
     2ba:	aa df       	rcall	.-172    	; 0x210 <Application_getEventGroup>
     2bc:	c2 df       	rcall	.-124    	; 0x242 <CO2Sensor_aFunctionToSetBits>
     2be:	df cf       	rjmp	.-66     	; 0x27e <CO2Sensor_handler_task+0x30>
			}
			else if(getCO2return == MHZ19_NO_MEASSURING_AVAILABLE){
     2c0:	81 30       	cpi	r24, 0x01	; 1
     2c2:	e9 f6       	brne	.-70     	; 0x27e <CO2Sensor_handler_task+0x30>
				printf("Didn't get the measurements");
     2c4:	80 e8       	ldi	r24, 0x80	; 128
     2c6:	92 e0       	ldi	r25, 0x02	; 2
     2c8:	9f 93       	push	r25
     2ca:	8f 93       	push	r24
     2cc:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <printf>
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	d4 cf       	rjmp	.-88     	; 0x27e <CO2Sensor_handler_task+0x30>

000002d6 <xEventGroupSetBits>:
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     2d6:	4f 92       	push	r4
     2d8:	5f 92       	push	r5
     2da:	6f 92       	push	r6
     2dc:	7f 92       	push	r7
     2de:	af 92       	push	r10
     2e0:	bf 92       	push	r11
     2e2:	cf 92       	push	r12
     2e4:	df 92       	push	r13
     2e6:	ef 92       	push	r14
     2e8:	ff 92       	push	r15
     2ea:	0f 93       	push	r16
     2ec:	1f 93       	push	r17
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	ec 01       	movw	r28, r24
     2f4:	6a 01       	movw	r12, r20
     2f6:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     2f8:	8c 01       	movw	r16, r24
     2fa:	09 5f       	subi	r16, 0xF9	; 249
     2fc:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     2fe:	0e 94 66 0d 	call	0x1acc	; 0x1acc <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     302:	eb 85       	ldd	r30, Y+11	; 0x0b
     304:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     306:	88 81       	ld	r24, Y
     308:	99 81       	ldd	r25, Y+1	; 0x01
     30a:	aa 81       	ldd	r26, Y+2	; 0x02
     30c:	bb 81       	ldd	r27, Y+3	; 0x03
     30e:	c8 2a       	or	r12, r24
     310:	d9 2a       	or	r13, r25
     312:	ea 2a       	or	r14, r26
     314:	fb 2a       	or	r15, r27
     316:	c8 82       	st	Y, r12
     318:	d9 82       	std	Y+1, r13	; 0x01
     31a:	ea 82       	std	Y+2, r14	; 0x02
     31c:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     31e:	c1 2c       	mov	r12, r1
     320:	d1 2c       	mov	r13, r1
     322:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     324:	3d c0       	rjmp	.+122    	; 0x3a0 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     326:	a4 80       	ldd	r10, Z+4	; 0x04
     328:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     32a:	80 81       	ld	r24, Z
     32c:	91 81       	ldd	r25, Z+1	; 0x01
     32e:	a2 81       	ldd	r26, Z+2	; 0x02
     330:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     332:	ac 01       	movw	r20, r24
     334:	bd 01       	movw	r22, r26
     336:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     338:	b2 fd       	sbrc	r27, 2
     33a:	0e c0       	rjmp	.+28     	; 0x358 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     33c:	48 80       	ld	r4, Y
     33e:	59 80       	ldd	r5, Y+1	; 0x01
     340:	6a 80       	ldd	r6, Y+2	; 0x02
     342:	7b 80       	ldd	r7, Y+3	; 0x03
     344:	44 22       	and	r4, r20
     346:	55 22       	and	r5, r21
     348:	66 22       	and	r6, r22
     34a:	77 22       	and	r7, r23
     34c:	45 28       	or	r4, r5
     34e:	46 28       	or	r4, r6
     350:	47 28       	or	r4, r7
     352:	89 f4       	brne	.+34     	; 0x376 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     354:	20 e0       	ldi	r18, 0x00	; 0
     356:	12 c0       	rjmp	.+36     	; 0x37c <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     358:	48 80       	ld	r4, Y
     35a:	59 80       	ldd	r5, Y+1	; 0x01
     35c:	6a 80       	ldd	r6, Y+2	; 0x02
     35e:	7b 80       	ldd	r7, Y+3	; 0x03
     360:	44 22       	and	r4, r20
     362:	55 22       	and	r5, r21
     364:	66 22       	and	r6, r22
     366:	77 22       	and	r7, r23
     368:	44 15       	cp	r20, r4
     36a:	55 05       	cpc	r21, r5
     36c:	66 05       	cpc	r22, r6
     36e:	77 05       	cpc	r23, r7
     370:	21 f0       	breq	.+8      	; 0x37a <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	03 c0       	rjmp	.+6      	; 0x37c <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     376:	21 e0       	ldi	r18, 0x01	; 1
     378:	01 c0       	rjmp	.+2      	; 0x37c <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     37a:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     37c:	22 23       	and	r18, r18
     37e:	71 f0       	breq	.+28     	; 0x39c <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     380:	b0 ff       	sbrs	r27, 0
     382:	04 c0       	rjmp	.+8      	; 0x38c <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     384:	c4 2a       	or	r12, r20
     386:	d5 2a       	or	r13, r21
     388:	e6 2a       	or	r14, r22
     38a:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     38c:	48 81       	ld	r20, Y
     38e:	59 81       	ldd	r21, Y+1	; 0x01
     390:	6a 81       	ldd	r22, Y+2	; 0x02
     392:	7b 81       	ldd	r23, Y+3	; 0x03
     394:	72 60       	ori	r23, 0x02	; 2
     396:	cf 01       	movw	r24, r30
     398:	0e 94 6f 11 	call	0x22de	; 0x22de <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     39c:	ea 2d       	mov	r30, r10
     39e:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     3a0:	e0 17       	cp	r30, r16
     3a2:	f1 07       	cpc	r31, r17
     3a4:	09 f0       	breq	.+2      	; 0x3a8 <xEventGroupSetBits+0xd2>
     3a6:	bf cf       	rjmp	.-130    	; 0x326 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     3a8:	c0 94       	com	r12
     3aa:	d0 94       	com	r13
     3ac:	e0 94       	com	r14
     3ae:	f0 94       	com	r15
     3b0:	88 81       	ld	r24, Y
     3b2:	99 81       	ldd	r25, Y+1	; 0x01
     3b4:	aa 81       	ldd	r26, Y+2	; 0x02
     3b6:	bb 81       	ldd	r27, Y+3	; 0x03
     3b8:	c8 22       	and	r12, r24
     3ba:	d9 22       	and	r13, r25
     3bc:	ea 22       	and	r14, r26
     3be:	fb 22       	and	r15, r27
     3c0:	c8 82       	st	Y, r12
     3c2:	d9 82       	std	Y+1, r13	; 0x01
     3c4:	ea 82       	std	Y+2, r14	; 0x02
     3c6:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     3c8:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     3cc:	68 81       	ld	r22, Y
     3ce:	79 81       	ldd	r23, Y+1	; 0x01
     3d0:	8a 81       	ldd	r24, Y+2	; 0x02
     3d2:	9b 81       	ldd	r25, Y+3	; 0x03
}
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	ff 90       	pop	r15
     3de:	ef 90       	pop	r14
     3e0:	df 90       	pop	r13
     3e2:	cf 90       	pop	r12
     3e4:	bf 90       	pop	r11
     3e6:	af 90       	pop	r10
     3e8:	7f 90       	pop	r7
     3ea:	6f 90       	pop	r6
     3ec:	5f 90       	pop	r5
     3ee:	4f 90       	pop	r4
     3f0:	08 95       	ret

000003f2 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     3f2:	e6 ea       	ldi	r30, 0xA6	; 166
     3f4:	f7 e0       	ldi	r31, 0x07	; 7
     3f6:	aa ea       	ldi	r26, 0xAA	; 170
     3f8:	b7 e0       	ldi	r27, 0x07	; 7
     3fa:	b1 83       	std	Z+1, r27	; 0x01
     3fc:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     3fe:	13 82       	std	Z+3, r1	; 0x03
     400:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     402:	e6 e2       	ldi	r30, 0x26	; 38
     404:	f4 e1       	ldi	r31, 0x14	; 20
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     406:	f0 93 a5 07 	sts	0x07A5, r31	; 0x8007a5 <pxEnd+0x1>
     40a:	e0 93 a4 07 	sts	0x07A4, r30	; 0x8007a4 <pxEnd>
    pxEnd->xBlockSize = 0;
     40e:	13 82       	std	Z+3, r1	; 0x03
     410:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     412:	11 82       	std	Z+1, r1	; 0x01
     414:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     416:	8c e7       	ldi	r24, 0x7C	; 124
     418:	9c e0       	ldi	r25, 0x0C	; 12
     41a:	13 96       	adiw	r26, 0x03	; 3
     41c:	9c 93       	st	X, r25
     41e:	8e 93       	st	-X, r24
     420:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     422:	ed 93       	st	X+, r30
     424:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     426:	90 93 a1 07 	sts	0x07A1, r25	; 0x8007a1 <xMinimumEverFreeBytesRemaining+0x1>
     42a:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     42e:	90 93 a3 07 	sts	0x07A3, r25	; 0x8007a3 <xFreeBytesRemaining+0x1>
     432:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e8       	ldi	r25, 0x80	; 128
     43a:	90 93 9b 07 	sts	0x079B, r25	; 0x80079b <__data_end+0x1>
     43e:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <__data_end>
     442:	08 95       	ret

00000444 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     44a:	a6 ea       	ldi	r26, 0xA6	; 166
     44c:	b7 e0       	ldi	r27, 0x07	; 7
     44e:	01 c0       	rjmp	.+2      	; 0x452 <prvInsertBlockIntoFreeList+0xe>
     450:	df 01       	movw	r26, r30
     452:	ed 91       	ld	r30, X+
     454:	fc 91       	ld	r31, X
     456:	11 97       	sbiw	r26, 0x01	; 1
     458:	ec 17       	cp	r30, r28
     45a:	fd 07       	cpc	r31, r29
     45c:	c8 f3       	brcs	.-14     	; 0x450 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     45e:	12 96       	adiw	r26, 0x02	; 2
     460:	8d 91       	ld	r24, X+
     462:	9c 91       	ld	r25, X
     464:	13 97       	sbiw	r26, 0x03	; 3
     466:	9d 01       	movw	r18, r26
     468:	28 0f       	add	r18, r24
     46a:	39 1f       	adc	r19, r25
     46c:	c2 17       	cp	r28, r18
     46e:	d3 07       	cpc	r29, r19
     470:	49 f4       	brne	.+18     	; 0x484 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     472:	2a 81       	ldd	r18, Y+2	; 0x02
     474:	3b 81       	ldd	r19, Y+3	; 0x03
     476:	82 0f       	add	r24, r18
     478:	93 1f       	adc	r25, r19
     47a:	13 96       	adiw	r26, 0x03	; 3
     47c:	9c 93       	st	X, r25
     47e:	8e 93       	st	-X, r24
     480:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     482:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     484:	8a 81       	ldd	r24, Y+2	; 0x02
     486:	9b 81       	ldd	r25, Y+3	; 0x03
     488:	9e 01       	movw	r18, r28
     48a:	28 0f       	add	r18, r24
     48c:	39 1f       	adc	r19, r25
     48e:	e2 17       	cp	r30, r18
     490:	f3 07       	cpc	r31, r19
     492:	c1 f4       	brne	.+48     	; 0x4c4 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     494:	20 91 a4 07 	lds	r18, 0x07A4	; 0x8007a4 <pxEnd>
     498:	30 91 a5 07 	lds	r19, 0x07A5	; 0x8007a5 <pxEnd+0x1>
     49c:	e2 17       	cp	r30, r18
     49e:	f3 07       	cpc	r31, r19
     4a0:	71 f0       	breq	.+28     	; 0x4be <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     4a2:	22 81       	ldd	r18, Z+2	; 0x02
     4a4:	33 81       	ldd	r19, Z+3	; 0x03
     4a6:	82 0f       	add	r24, r18
     4a8:	93 1f       	adc	r25, r19
     4aa:	9b 83       	std	Y+3, r25	; 0x03
     4ac:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     4ae:	ed 91       	ld	r30, X+
     4b0:	fc 91       	ld	r31, X
     4b2:	11 97       	sbiw	r26, 0x01	; 1
     4b4:	80 81       	ld	r24, Z
     4b6:	91 81       	ldd	r25, Z+1	; 0x01
     4b8:	99 83       	std	Y+1, r25	; 0x01
     4ba:	88 83       	st	Y, r24
     4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     4be:	39 83       	std	Y+1, r19	; 0x01
     4c0:	28 83       	st	Y, r18
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     4c4:	f9 83       	std	Y+1, r31	; 0x01
     4c6:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     4c8:	ca 17       	cp	r28, r26
     4ca:	db 07       	cpc	r29, r27
     4cc:	11 f0       	breq	.+4      	; 0x4d2 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     4ce:	cd 93       	st	X+, r28
     4d0:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	08 95       	ret

000004d8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     4d8:	ef 92       	push	r14
     4da:	ff 92       	push	r15
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     4e6:	0e 94 66 0d 	call	0x1acc	; 0x1acc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     4ea:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <pxEnd>
     4ee:	90 91 a5 07 	lds	r25, 0x07A5	; 0x8007a5 <pxEnd+0x1>
     4f2:	89 2b       	or	r24, r25
     4f4:	09 f4       	brne	.+2      	; 0x4f8 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     4f6:	7d df       	rcall	.-262    	; 0x3f2 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     4f8:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <__data_end>
     4fc:	90 91 9b 07 	lds	r25, 0x079B	; 0x80079b <__data_end+0x1>
     500:	80 23       	and	r24, r16
     502:	91 23       	and	r25, r17
     504:	89 2b       	or	r24, r25
     506:	09 f0       	breq	.+2      	; 0x50a <pvPortMalloc+0x32>
     508:	76 c0       	rjmp	.+236    	; 0x5f6 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     50a:	01 15       	cp	r16, r1
     50c:	11 05       	cpc	r17, r1
     50e:	49 f0       	breq	.+18     	; 0x522 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     510:	c8 01       	movw	r24, r16
     512:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     514:	08 17       	cp	r16, r24
     516:	19 07       	cpc	r17, r25
     518:	18 f0       	brcs	.+6      	; 0x520 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     51a:	00 e0       	ldi	r16, 0x00	; 0
     51c:	10 e0       	ldi	r17, 0x00	; 0
     51e:	01 c0       	rjmp	.+2      	; 0x522 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     520:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     522:	01 15       	cp	r16, r1
     524:	11 05       	cpc	r17, r1
     526:	09 f4       	brne	.+2      	; 0x52a <pvPortMalloc+0x52>
     528:	69 c0       	rjmp	.+210    	; 0x5fc <pvPortMalloc+0x124>
     52a:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <xFreeBytesRemaining>
     52e:	90 91 a3 07 	lds	r25, 0x07A3	; 0x8007a3 <xFreeBytesRemaining+0x1>
     532:	80 17       	cp	r24, r16
     534:	91 07       	cpc	r25, r17
     536:	08 f4       	brcc	.+2      	; 0x53a <pvPortMalloc+0x62>
     538:	64 c0       	rjmp	.+200    	; 0x602 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     53a:	c0 91 a6 07 	lds	r28, 0x07A6	; 0x8007a6 <xStart>
     53e:	d0 91 a7 07 	lds	r29, 0x07A7	; 0x8007a7 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     542:	e6 ea       	ldi	r30, 0xA6	; 166
     544:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     546:	02 c0       	rjmp	.+4      	; 0x54c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     548:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     54a:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     54c:	8a 81       	ldd	r24, Y+2	; 0x02
     54e:	9b 81       	ldd	r25, Y+3	; 0x03
     550:	80 17       	cp	r24, r16
     552:	91 07       	cpc	r25, r17
     554:	20 f4       	brcc	.+8      	; 0x55e <pvPortMalloc+0x86>
     556:	88 81       	ld	r24, Y
     558:	99 81       	ldd	r25, Y+1	; 0x01
     55a:	00 97       	sbiw	r24, 0x00	; 0
     55c:	a9 f7       	brne	.-22     	; 0x548 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     55e:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <pxEnd>
     562:	90 91 a5 07 	lds	r25, 0x07A5	; 0x8007a5 <pxEnd+0x1>
     566:	c8 17       	cp	r28, r24
     568:	d9 07       	cpc	r29, r25
     56a:	09 f4       	brne	.+2      	; 0x56e <pvPortMalloc+0x96>
     56c:	4d c0       	rjmp	.+154    	; 0x608 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     56e:	e0 80       	ld	r14, Z
     570:	f1 80       	ldd	r15, Z+1	; 0x01
     572:	84 e0       	ldi	r24, 0x04	; 4
     574:	e8 0e       	add	r14, r24
     576:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     578:	88 81       	ld	r24, Y
     57a:	99 81       	ldd	r25, Y+1	; 0x01
     57c:	91 83       	std	Z+1, r25	; 0x01
     57e:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     580:	2a 81       	ldd	r18, Y+2	; 0x02
     582:	3b 81       	ldd	r19, Y+3	; 0x03
     584:	20 1b       	sub	r18, r16
     586:	31 0b       	sbc	r19, r17
     588:	29 30       	cpi	r18, 0x09	; 9
     58a:	31 05       	cpc	r19, r1
     58c:	48 f0       	brcs	.+18     	; 0x5a0 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     58e:	ce 01       	movw	r24, r28
     590:	80 0f       	add	r24, r16
     592:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     594:	fc 01       	movw	r30, r24
     596:	33 83       	std	Z+3, r19	; 0x03
     598:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     59a:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     59c:	0a 83       	std	Y+2, r16	; 0x02
     59e:	52 df       	rcall	.-348    	; 0x444 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     5a0:	2a 81       	ldd	r18, Y+2	; 0x02
     5a2:	3b 81       	ldd	r19, Y+3	; 0x03
     5a4:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <xFreeBytesRemaining>
     5a8:	90 91 a3 07 	lds	r25, 0x07A3	; 0x8007a3 <xFreeBytesRemaining+0x1>
     5ac:	82 1b       	sub	r24, r18
     5ae:	93 0b       	sbc	r25, r19
     5b0:	90 93 a3 07 	sts	0x07A3, r25	; 0x8007a3 <xFreeBytesRemaining+0x1>
     5b4:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     5b8:	40 91 a0 07 	lds	r20, 0x07A0	; 0x8007a0 <xMinimumEverFreeBytesRemaining>
     5bc:	50 91 a1 07 	lds	r21, 0x07A1	; 0x8007a1 <xMinimumEverFreeBytesRemaining+0x1>
     5c0:	84 17       	cp	r24, r20
     5c2:	95 07       	cpc	r25, r21
     5c4:	20 f4       	brcc	.+8      	; 0x5ce <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     5c6:	90 93 a1 07 	sts	0x07A1, r25	; 0x8007a1 <xMinimumEverFreeBytesRemaining+0x1>
     5ca:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     5ce:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <__data_end>
     5d2:	90 91 9b 07 	lds	r25, 0x079B	; 0x80079b <__data_end+0x1>
     5d6:	28 2b       	or	r18, r24
     5d8:	39 2b       	or	r19, r25
     5da:	3b 83       	std	Y+3, r19	; 0x03
     5dc:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     5de:	19 82       	std	Y+1, r1	; 0x01
     5e0:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     5e2:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <xNumberOfSuccessfulAllocations>
     5e6:	90 91 9f 07 	lds	r25, 0x079F	; 0x80079f <xNumberOfSuccessfulAllocations+0x1>
     5ea:	01 96       	adiw	r24, 0x01	; 1
     5ec:	90 93 9f 07 	sts	0x079F, r25	; 0x80079f <xNumberOfSuccessfulAllocations+0x1>
     5f0:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <xNumberOfSuccessfulAllocations>
     5f4:	0b c0       	rjmp	.+22     	; 0x60c <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     5f6:	e1 2c       	mov	r14, r1
     5f8:	f1 2c       	mov	r15, r1
     5fa:	08 c0       	rjmp	.+16     	; 0x60c <pvPortMalloc+0x134>
     5fc:	e1 2c       	mov	r14, r1
     5fe:	f1 2c       	mov	r15, r1
     600:	05 c0       	rjmp	.+10     	; 0x60c <pvPortMalloc+0x134>
     602:	e1 2c       	mov	r14, r1
     604:	f1 2c       	mov	r15, r1
     606:	02 c0       	rjmp	.+4      	; 0x60c <pvPortMalloc+0x134>
     608:	e1 2c       	mov	r14, r1
     60a:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     60c:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     610:	e1 14       	cp	r14, r1
     612:	f1 04       	cpc	r15, r1
     614:	11 f4       	brne	.+4      	; 0x61a <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     616:	0e 94 ee 18 	call	0x31dc	; 0x31dc <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     61a:	c7 01       	movw	r24, r14
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	1f 91       	pop	r17
     622:	0f 91       	pop	r16
     624:	ff 90       	pop	r15
     626:	ef 90       	pop	r14
     628:	08 95       	ret

0000062a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     62a:	0f 93       	push	r16
     62c:	1f 93       	push	r17
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     632:	00 97       	sbiw	r24, 0x00	; 0
     634:	91 f1       	breq	.+100    	; 0x69a <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     636:	ec 01       	movw	r28, r24
     638:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     63a:	4a 81       	ldd	r20, Y+2	; 0x02
     63c:	5b 81       	ldd	r21, Y+3	; 0x03
     63e:	20 91 9a 07 	lds	r18, 0x079A	; 0x80079a <__data_end>
     642:	30 91 9b 07 	lds	r19, 0x079B	; 0x80079b <__data_end+0x1>
     646:	ba 01       	movw	r22, r20
     648:	62 23       	and	r22, r18
     64a:	73 23       	and	r23, r19
     64c:	67 2b       	or	r22, r23
     64e:	29 f1       	breq	.+74     	; 0x69a <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     650:	68 81       	ld	r22, Y
     652:	79 81       	ldd	r23, Y+1	; 0x01
     654:	67 2b       	or	r22, r23
     656:	09 f5       	brne	.+66     	; 0x69a <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     658:	20 95       	com	r18
     65a:	30 95       	com	r19
     65c:	24 23       	and	r18, r20
     65e:	35 23       	and	r19, r21
     660:	3b 83       	std	Y+3, r19	; 0x03
     662:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     664:	0e 94 66 0d 	call	0x1acc	; 0x1acc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     668:	8a 81       	ldd	r24, Y+2	; 0x02
     66a:	9b 81       	ldd	r25, Y+3	; 0x03
     66c:	20 91 a2 07 	lds	r18, 0x07A2	; 0x8007a2 <xFreeBytesRemaining>
     670:	30 91 a3 07 	lds	r19, 0x07A3	; 0x8007a3 <xFreeBytesRemaining+0x1>
     674:	82 0f       	add	r24, r18
     676:	93 1f       	adc	r25, r19
     678:	90 93 a3 07 	sts	0x07A3, r25	; 0x8007a3 <xFreeBytesRemaining+0x1>
     67c:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     680:	ce 01       	movw	r24, r28
     682:	e0 de       	rcall	.-576    	; 0x444 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     684:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <xNumberOfSuccessfulFrees>
     688:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <xNumberOfSuccessfulFrees+0x1>
     68c:	01 96       	adiw	r24, 0x01	; 1
     68e:	90 93 9d 07 	sts	0x079D, r25	; 0x80079d <xNumberOfSuccessfulFrees+0x1>
     692:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     696:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	1f 91       	pop	r17
     6a0:	0f 91       	pop	r16
     6a2:	08 95       	ret

000006a4 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     6a4:	fc 01       	movw	r30, r24
     6a6:	03 96       	adiw	r24, 0x03	; 3
     6a8:	92 83       	std	Z+2, r25	; 0x02
     6aa:	81 83       	std	Z+1, r24	; 0x01
     6ac:	4f ef       	ldi	r20, 0xFF	; 255
     6ae:	5f ef       	ldi	r21, 0xFF	; 255
     6b0:	ba 01       	movw	r22, r20
     6b2:	43 83       	std	Z+3, r20	; 0x03
     6b4:	54 83       	std	Z+4, r21	; 0x04
     6b6:	65 83       	std	Z+5, r22	; 0x05
     6b8:	76 83       	std	Z+6, r23	; 0x06
     6ba:	90 87       	std	Z+8, r25	; 0x08
     6bc:	87 83       	std	Z+7, r24	; 0x07
     6be:	92 87       	std	Z+10, r25	; 0x0a
     6c0:	81 87       	std	Z+9, r24	; 0x09
     6c2:	10 82       	st	Z, r1
     6c4:	08 95       	ret

000006c6 <vListInitialiseItem>:
     6c6:	fc 01       	movw	r30, r24
     6c8:	13 86       	std	Z+11, r1	; 0x0b
     6ca:	12 86       	std	Z+10, r1	; 0x0a
     6cc:	08 95       	ret

000006ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     6d8:	08 81       	ld	r16, Y
     6da:	19 81       	ldd	r17, Y+1	; 0x01
     6dc:	2a 81       	ldd	r18, Y+2	; 0x02
     6de:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     6e0:	0f 3f       	cpi	r16, 0xFF	; 255
     6e2:	4f ef       	ldi	r20, 0xFF	; 255
     6e4:	14 07       	cpc	r17, r20
     6e6:	24 07       	cpc	r18, r20
     6e8:	34 07       	cpc	r19, r20
     6ea:	21 f4       	brne	.+8      	; 0x6f4 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     6ec:	fc 01       	movw	r30, r24
     6ee:	a1 85       	ldd	r26, Z+9	; 0x09
     6f0:	b2 85       	ldd	r27, Z+10	; 0x0a
     6f2:	11 c0       	rjmp	.+34     	; 0x716 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     6f4:	dc 01       	movw	r26, r24
     6f6:	13 96       	adiw	r26, 0x03	; 3
     6f8:	01 c0       	rjmp	.+2      	; 0x6fc <vListInsert+0x2e>
     6fa:	df 01       	movw	r26, r30
     6fc:	14 96       	adiw	r26, 0x04	; 4
     6fe:	ed 91       	ld	r30, X+
     700:	fc 91       	ld	r31, X
     702:	15 97       	sbiw	r26, 0x05	; 5
     704:	40 81       	ld	r20, Z
     706:	51 81       	ldd	r21, Z+1	; 0x01
     708:	62 81       	ldd	r22, Z+2	; 0x02
     70a:	73 81       	ldd	r23, Z+3	; 0x03
     70c:	04 17       	cp	r16, r20
     70e:	15 07       	cpc	r17, r21
     710:	26 07       	cpc	r18, r22
     712:	37 07       	cpc	r19, r23
     714:	90 f7       	brcc	.-28     	; 0x6fa <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     716:	14 96       	adiw	r26, 0x04	; 4
     718:	ed 91       	ld	r30, X+
     71a:	fc 91       	ld	r31, X
     71c:	15 97       	sbiw	r26, 0x05	; 5
     71e:	fd 83       	std	Y+5, r31	; 0x05
     720:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     722:	d7 83       	std	Z+7, r29	; 0x07
     724:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     726:	bf 83       	std	Y+7, r27	; 0x07
     728:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     72a:	15 96       	adiw	r26, 0x05	; 5
     72c:	dc 93       	st	X, r29
     72e:	ce 93       	st	-X, r28
     730:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     732:	9b 87       	std	Y+11, r25	; 0x0b
     734:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     736:	fc 01       	movw	r30, r24
     738:	20 81       	ld	r18, Z
     73a:	2f 5f       	subi	r18, 0xFF	; 255
     73c:	20 83       	st	Z, r18
}
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	1f 91       	pop	r17
     744:	0f 91       	pop	r16
     746:	08 95       	ret

00000748 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     74e:	a2 85       	ldd	r26, Z+10	; 0x0a
     750:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     752:	c4 81       	ldd	r28, Z+4	; 0x04
     754:	d5 81       	ldd	r29, Z+5	; 0x05
     756:	86 81       	ldd	r24, Z+6	; 0x06
     758:	97 81       	ldd	r25, Z+7	; 0x07
     75a:	9f 83       	std	Y+7, r25	; 0x07
     75c:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     75e:	c6 81       	ldd	r28, Z+6	; 0x06
     760:	d7 81       	ldd	r29, Z+7	; 0x07
     762:	84 81       	ldd	r24, Z+4	; 0x04
     764:	95 81       	ldd	r25, Z+5	; 0x05
     766:	9d 83       	std	Y+5, r25	; 0x05
     768:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     76a:	11 96       	adiw	r26, 0x01	; 1
     76c:	8d 91       	ld	r24, X+
     76e:	9c 91       	ld	r25, X
     770:	12 97       	sbiw	r26, 0x02	; 2
     772:	e8 17       	cp	r30, r24
     774:	f9 07       	cpc	r31, r25
     776:	31 f4       	brne	.+12     	; 0x784 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     778:	86 81       	ldd	r24, Z+6	; 0x06
     77a:	97 81       	ldd	r25, Z+7	; 0x07
     77c:	12 96       	adiw	r26, 0x02	; 2
     77e:	9c 93       	st	X, r25
     780:	8e 93       	st	-X, r24
     782:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     784:	13 86       	std	Z+11, r1	; 0x0b
     786:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     788:	8c 91       	ld	r24, X
     78a:	81 50       	subi	r24, 0x01	; 1
     78c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     78e:	8c 91       	ld	r24, X
}
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	08 95       	ret

00000796 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     796:	a8 95       	wdr
     798:	90 ec       	ldi	r25, 0xC0	; 192
     79a:	88 e1       	ldi	r24, 0x18	; 24
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	a8 95       	wdr
     7a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     7ac:	08 95       	ret

000007ae <pxPortInitialiseStack>:
     7ae:	fc 01       	movw	r30, r24
     7b0:	60 83       	st	Z, r22
     7b2:	31 97       	sbiw	r30, 0x01	; 1
     7b4:	70 83       	st	Z, r23
     7b6:	31 97       	sbiw	r30, 0x01	; 1
     7b8:	10 82       	st	Z, r1
     7ba:	31 97       	sbiw	r30, 0x01	; 1
     7bc:	10 82       	st	Z, r1
     7be:	31 97       	sbiw	r30, 0x01	; 1
     7c0:	20 e8       	ldi	r18, 0x80	; 128
     7c2:	20 83       	st	Z, r18
     7c4:	31 97       	sbiw	r30, 0x01	; 1
     7c6:	10 82       	st	Z, r1
     7c8:	31 97       	sbiw	r30, 0x01	; 1
     7ca:	10 82       	st	Z, r1
     7cc:	31 97       	sbiw	r30, 0x01	; 1
     7ce:	10 82       	st	Z, r1
     7d0:	77 97       	sbiw	r30, 0x17	; 23
     7d2:	40 83       	st	Z, r20
     7d4:	31 97       	sbiw	r30, 0x01	; 1
     7d6:	50 83       	st	Z, r21
     7d8:	86 97       	sbiw	r24, 0x26	; 38
     7da:	08 95       	ret

000007dc <xPortStartScheduler>:
     7dc:	dc df       	rcall	.-72     	; 0x796 <prvSetupTimerInterrupt>
     7de:	a0 91 e9 14 	lds	r26, 0x14E9	; 0x8014e9 <pxCurrentTCB>
     7e2:	b0 91 ea 14 	lds	r27, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
     7e6:	cd 91       	ld	r28, X+
     7e8:	cd bf       	out	0x3d, r28	; 61
     7ea:	dd 91       	ld	r29, X+
     7ec:	de bf       	out	0x3e, r29	; 62
     7ee:	ff 91       	pop	r31
     7f0:	ef 91       	pop	r30
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	bf 91       	pop	r27
     7f8:	af 91       	pop	r26
     7fa:	9f 91       	pop	r25
     7fc:	8f 91       	pop	r24
     7fe:	7f 91       	pop	r23
     800:	6f 91       	pop	r22
     802:	5f 91       	pop	r21
     804:	4f 91       	pop	r20
     806:	3f 91       	pop	r19
     808:	2f 91       	pop	r18
     80a:	1f 91       	pop	r17
     80c:	0f 91       	pop	r16
     80e:	ff 90       	pop	r15
     810:	ef 90       	pop	r14
     812:	df 90       	pop	r13
     814:	cf 90       	pop	r12
     816:	bf 90       	pop	r11
     818:	af 90       	pop	r10
     81a:	9f 90       	pop	r9
     81c:	8f 90       	pop	r8
     81e:	7f 90       	pop	r7
     820:	6f 90       	pop	r6
     822:	5f 90       	pop	r5
     824:	4f 90       	pop	r4
     826:	3f 90       	pop	r3
     828:	2f 90       	pop	r2
     82a:	1f 90       	pop	r1
     82c:	0f 90       	pop	r0
     82e:	0c be       	out	0x3c, r0	; 60
     830:	0f 90       	pop	r0
     832:	0b be       	out	0x3b, r0	; 59
     834:	0f 90       	pop	r0
     836:	0f be       	out	0x3f, r0	; 63
     838:	0f 90       	pop	r0
     83a:	08 95       	ret
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	08 95       	ret

00000840 <vPortYield>:
     840:	0f 92       	push	r0
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	f8 94       	cli
     846:	0f 92       	push	r0
     848:	0b b6       	in	r0, 0x3b	; 59
     84a:	0f 92       	push	r0
     84c:	0c b6       	in	r0, 0x3c	; 60
     84e:	0f 92       	push	r0
     850:	1f 92       	push	r1
     852:	11 24       	eor	r1, r1
     854:	2f 92       	push	r2
     856:	3f 92       	push	r3
     858:	4f 92       	push	r4
     85a:	5f 92       	push	r5
     85c:	6f 92       	push	r6
     85e:	7f 92       	push	r7
     860:	8f 92       	push	r8
     862:	9f 92       	push	r9
     864:	af 92       	push	r10
     866:	bf 92       	push	r11
     868:	cf 92       	push	r12
     86a:	df 92       	push	r13
     86c:	ef 92       	push	r14
     86e:	ff 92       	push	r15
     870:	0f 93       	push	r16
     872:	1f 93       	push	r17
     874:	2f 93       	push	r18
     876:	3f 93       	push	r19
     878:	4f 93       	push	r20
     87a:	5f 93       	push	r21
     87c:	6f 93       	push	r22
     87e:	7f 93       	push	r23
     880:	8f 93       	push	r24
     882:	9f 93       	push	r25
     884:	af 93       	push	r26
     886:	bf 93       	push	r27
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	ef 93       	push	r30
     88e:	ff 93       	push	r31
     890:	a0 91 e9 14 	lds	r26, 0x14E9	; 0x8014e9 <pxCurrentTCB>
     894:	b0 91 ea 14 	lds	r27, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
     898:	0d b6       	in	r0, 0x3d	; 61
     89a:	0d 92       	st	X+, r0
     89c:	0e b6       	in	r0, 0x3e	; 62
     89e:	0d 92       	st	X+, r0
     8a0:	0e 94 02 10 	call	0x2004	; 0x2004 <vTaskSwitchContext>
     8a4:	a0 91 e9 14 	lds	r26, 0x14E9	; 0x8014e9 <pxCurrentTCB>
     8a8:	b0 91 ea 14 	lds	r27, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
     8ac:	cd 91       	ld	r28, X+
     8ae:	cd bf       	out	0x3d, r28	; 61
     8b0:	dd 91       	ld	r29, X+
     8b2:	de bf       	out	0x3e, r29	; 62
     8b4:	ff 91       	pop	r31
     8b6:	ef 91       	pop	r30
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	bf 91       	pop	r27
     8be:	af 91       	pop	r26
     8c0:	9f 91       	pop	r25
     8c2:	8f 91       	pop	r24
     8c4:	7f 91       	pop	r23
     8c6:	6f 91       	pop	r22
     8c8:	5f 91       	pop	r21
     8ca:	4f 91       	pop	r20
     8cc:	3f 91       	pop	r19
     8ce:	2f 91       	pop	r18
     8d0:	1f 91       	pop	r17
     8d2:	0f 91       	pop	r16
     8d4:	ff 90       	pop	r15
     8d6:	ef 90       	pop	r14
     8d8:	df 90       	pop	r13
     8da:	cf 90       	pop	r12
     8dc:	bf 90       	pop	r11
     8de:	af 90       	pop	r10
     8e0:	9f 90       	pop	r9
     8e2:	8f 90       	pop	r8
     8e4:	7f 90       	pop	r7
     8e6:	6f 90       	pop	r6
     8e8:	5f 90       	pop	r5
     8ea:	4f 90       	pop	r4
     8ec:	3f 90       	pop	r3
     8ee:	2f 90       	pop	r2
     8f0:	1f 90       	pop	r1
     8f2:	0f 90       	pop	r0
     8f4:	0c be       	out	0x3c, r0	; 60
     8f6:	0f 90       	pop	r0
     8f8:	0b be       	out	0x3b, r0	; 59
     8fa:	0f 90       	pop	r0
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	0f 90       	pop	r0
     900:	08 95       	ret

00000902 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     902:	0f 92       	push	r0
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	0f 92       	push	r0
     90a:	0b b6       	in	r0, 0x3b	; 59
     90c:	0f 92       	push	r0
     90e:	0c b6       	in	r0, 0x3c	; 60
     910:	0f 92       	push	r0
     912:	1f 92       	push	r1
     914:	11 24       	eor	r1, r1
     916:	2f 92       	push	r2
     918:	3f 92       	push	r3
     91a:	4f 92       	push	r4
     91c:	5f 92       	push	r5
     91e:	6f 92       	push	r6
     920:	7f 92       	push	r7
     922:	8f 92       	push	r8
     924:	9f 92       	push	r9
     926:	af 92       	push	r10
     928:	bf 92       	push	r11
     92a:	cf 92       	push	r12
     92c:	df 92       	push	r13
     92e:	ef 92       	push	r14
     930:	ff 92       	push	r15
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	2f 93       	push	r18
     938:	3f 93       	push	r19
     93a:	4f 93       	push	r20
     93c:	5f 93       	push	r21
     93e:	6f 93       	push	r22
     940:	7f 93       	push	r23
     942:	8f 93       	push	r24
     944:	9f 93       	push	r25
     946:	af 93       	push	r26
     948:	bf 93       	push	r27
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	ef 93       	push	r30
     950:	ff 93       	push	r31
     952:	a0 91 e9 14 	lds	r26, 0x14E9	; 0x8014e9 <pxCurrentTCB>
     956:	b0 91 ea 14 	lds	r27, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
     95a:	0d b6       	in	r0, 0x3d	; 61
     95c:	0d 92       	st	X+, r0
     95e:	0e b6       	in	r0, 0x3e	; 62
     960:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     962:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     964:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <xTaskIncrementTick>
     968:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     96a:	0e 94 02 10 	call	0x2004	; 0x2004 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     96e:	a0 91 e9 14 	lds	r26, 0x14E9	; 0x8014e9 <pxCurrentTCB>
     972:	b0 91 ea 14 	lds	r27, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
     976:	cd 91       	ld	r28, X+
     978:	cd bf       	out	0x3d, r28	; 61
     97a:	dd 91       	ld	r29, X+
     97c:	de bf       	out	0x3e, r29	; 62
     97e:	ff 91       	pop	r31
     980:	ef 91       	pop	r30
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	bf 91       	pop	r27
     988:	af 91       	pop	r26
     98a:	9f 91       	pop	r25
     98c:	8f 91       	pop	r24
     98e:	7f 91       	pop	r23
     990:	6f 91       	pop	r22
     992:	5f 91       	pop	r21
     994:	4f 91       	pop	r20
     996:	3f 91       	pop	r19
     998:	2f 91       	pop	r18
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	ff 90       	pop	r15
     9a0:	ef 90       	pop	r14
     9a2:	df 90       	pop	r13
     9a4:	cf 90       	pop	r12
     9a6:	bf 90       	pop	r11
     9a8:	af 90       	pop	r10
     9aa:	9f 90       	pop	r9
     9ac:	8f 90       	pop	r8
     9ae:	7f 90       	pop	r7
     9b0:	6f 90       	pop	r6
     9b2:	5f 90       	pop	r5
     9b4:	4f 90       	pop	r4
     9b6:	3f 90       	pop	r3
     9b8:	2f 90       	pop	r2
     9ba:	1f 90       	pop	r1
     9bc:	0f 90       	pop	r0
     9be:	0c be       	out	0x3c, r0	; 60
     9c0:	0f 90       	pop	r0
     9c2:	0b be       	out	0x3b, r0	; 59
     9c4:	0f 90       	pop	r0
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     9ca:	08 95       	ret

000009cc <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     9cc:	9a df       	rcall	.-204    	; 0x902 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     9ce:	18 95       	reti

000009d0 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	0f 92       	push	r0
     9d6:	fc 01       	movw	r30, r24
     9d8:	86 8d       	ldd	r24, Z+30	; 0x1e
     9da:	81 11       	cpse	r24, r1
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <prvIsQueueEmpty+0x12>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	01 c0       	rjmp	.+2      	; 0x9e4 <prvIsQueueEmpty+0x14>
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	0f 90       	pop	r0
     9e6:	0f be       	out	0x3f, r0	; 63
     9e8:	08 95       	ret

000009ea <prvIsQueueFull>:
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	f8 94       	cli
     9ee:	0f 92       	push	r0
     9f0:	fc 01       	movw	r30, r24
     9f2:	26 8d       	ldd	r18, Z+30	; 0x1e
     9f4:	87 8d       	ldd	r24, Z+31	; 0x1f
     9f6:	28 13       	cpse	r18, r24
     9f8:	02 c0       	rjmp	.+4      	; 0x9fe <prvIsQueueFull+0x14>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	01 c0       	rjmp	.+2      	; 0xa00 <prvIsQueueFull+0x16>
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	0f 90       	pop	r0
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	08 95       	ret

00000a06 <prvCopyDataToQueue>:
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	ec 01       	movw	r28, r24
     a10:	04 2f       	mov	r16, r20
     a12:	1e 8d       	ldd	r17, Y+30	; 0x1e
     a14:	48 a1       	ldd	r20, Y+32	; 0x20
     a16:	41 11       	cpse	r20, r1
     a18:	0c c0       	rjmp	.+24     	; 0xa32 <prvCopyDataToQueue+0x2c>
     a1a:	88 81       	ld	r24, Y
     a1c:	99 81       	ldd	r25, Y+1	; 0x01
     a1e:	89 2b       	or	r24, r25
     a20:	09 f0       	breq	.+2      	; 0xa24 <prvCopyDataToQueue+0x1e>
     a22:	42 c0       	rjmp	.+132    	; 0xaa8 <prvCopyDataToQueue+0xa2>
     a24:	8c 81       	ldd	r24, Y+4	; 0x04
     a26:	9d 81       	ldd	r25, Y+5	; 0x05
     a28:	0e 94 ad 12 	call	0x255a	; 0x255a <xTaskPriorityDisinherit>
     a2c:	1d 82       	std	Y+5, r1	; 0x05
     a2e:	1c 82       	std	Y+4, r1	; 0x04
     a30:	42 c0       	rjmp	.+132    	; 0xab6 <prvCopyDataToQueue+0xb0>
     a32:	01 11       	cpse	r16, r1
     a34:	17 c0       	rjmp	.+46     	; 0xa64 <prvCopyDataToQueue+0x5e>
     a36:	50 e0       	ldi	r21, 0x00	; 0
     a38:	8a 81       	ldd	r24, Y+2	; 0x02
     a3a:	9b 81       	ldd	r25, Y+3	; 0x03
     a3c:	0e 94 8c 2b 	call	0x5718	; 0x5718 <memcpy>
     a40:	28 a1       	ldd	r18, Y+32	; 0x20
     a42:	8a 81       	ldd	r24, Y+2	; 0x02
     a44:	9b 81       	ldd	r25, Y+3	; 0x03
     a46:	82 0f       	add	r24, r18
     a48:	91 1d       	adc	r25, r1
     a4a:	9b 83       	std	Y+3, r25	; 0x03
     a4c:	8a 83       	std	Y+2, r24	; 0x02
     a4e:	2c 81       	ldd	r18, Y+4	; 0x04
     a50:	3d 81       	ldd	r19, Y+5	; 0x05
     a52:	82 17       	cp	r24, r18
     a54:	93 07       	cpc	r25, r19
     a56:	50 f1       	brcs	.+84     	; 0xaac <prvCopyDataToQueue+0xa6>
     a58:	88 81       	ld	r24, Y
     a5a:	99 81       	ldd	r25, Y+1	; 0x01
     a5c:	9b 83       	std	Y+3, r25	; 0x03
     a5e:	8a 83       	std	Y+2, r24	; 0x02
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	29 c0       	rjmp	.+82     	; 0xab6 <prvCopyDataToQueue+0xb0>
     a64:	50 e0       	ldi	r21, 0x00	; 0
     a66:	8e 81       	ldd	r24, Y+6	; 0x06
     a68:	9f 81       	ldd	r25, Y+7	; 0x07
     a6a:	0e 94 8c 2b 	call	0x5718	; 0x5718 <memcpy>
     a6e:	88 a1       	ldd	r24, Y+32	; 0x20
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	91 95       	neg	r25
     a74:	81 95       	neg	r24
     a76:	91 09       	sbc	r25, r1
     a78:	2e 81       	ldd	r18, Y+6	; 0x06
     a7a:	3f 81       	ldd	r19, Y+7	; 0x07
     a7c:	28 0f       	add	r18, r24
     a7e:	39 1f       	adc	r19, r25
     a80:	3f 83       	std	Y+7, r19	; 0x07
     a82:	2e 83       	std	Y+6, r18	; 0x06
     a84:	48 81       	ld	r20, Y
     a86:	59 81       	ldd	r21, Y+1	; 0x01
     a88:	24 17       	cp	r18, r20
     a8a:	35 07       	cpc	r19, r21
     a8c:	30 f4       	brcc	.+12     	; 0xa9a <prvCopyDataToQueue+0x94>
     a8e:	2c 81       	ldd	r18, Y+4	; 0x04
     a90:	3d 81       	ldd	r19, Y+5	; 0x05
     a92:	82 0f       	add	r24, r18
     a94:	93 1f       	adc	r25, r19
     a96:	9f 83       	std	Y+7, r25	; 0x07
     a98:	8e 83       	std	Y+6, r24	; 0x06
     a9a:	02 30       	cpi	r16, 0x02	; 2
     a9c:	49 f4       	brne	.+18     	; 0xab0 <prvCopyDataToQueue+0xaa>
     a9e:	11 23       	and	r17, r17
     aa0:	49 f0       	breq	.+18     	; 0xab4 <prvCopyDataToQueue+0xae>
     aa2:	11 50       	subi	r17, 0x01	; 1
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	07 c0       	rjmp	.+14     	; 0xab6 <prvCopyDataToQueue+0xb0>
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <prvCopyDataToQueue+0xb0>
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	03 c0       	rjmp	.+6      	; 0xab6 <prvCopyDataToQueue+0xb0>
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	01 c0       	rjmp	.+2      	; 0xab6 <prvCopyDataToQueue+0xb0>
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	1f 5f       	subi	r17, 0xFF	; 255
     ab8:	1e 8f       	std	Y+30, r17	; 0x1e
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	1f 91       	pop	r17
     ac0:	0f 91       	pop	r16
     ac2:	08 95       	ret

00000ac4 <prvCopyDataFromQueue>:
     ac4:	fc 01       	movw	r30, r24
     ac6:	40 a1       	ldd	r20, Z+32	; 0x20
     ac8:	44 23       	and	r20, r20
     aca:	a9 f0       	breq	.+42     	; 0xaf6 <prvCopyDataFromQueue+0x32>
     acc:	50 e0       	ldi	r21, 0x00	; 0
     ace:	26 81       	ldd	r18, Z+6	; 0x06
     ad0:	37 81       	ldd	r19, Z+7	; 0x07
     ad2:	24 0f       	add	r18, r20
     ad4:	35 1f       	adc	r19, r21
     ad6:	37 83       	std	Z+7, r19	; 0x07
     ad8:	26 83       	std	Z+6, r18	; 0x06
     ada:	84 81       	ldd	r24, Z+4	; 0x04
     adc:	95 81       	ldd	r25, Z+5	; 0x05
     ade:	28 17       	cp	r18, r24
     ae0:	39 07       	cpc	r19, r25
     ae2:	20 f0       	brcs	.+8      	; 0xaec <prvCopyDataFromQueue+0x28>
     ae4:	80 81       	ld	r24, Z
     ae6:	91 81       	ldd	r25, Z+1	; 0x01
     ae8:	97 83       	std	Z+7, r25	; 0x07
     aea:	86 83       	std	Z+6, r24	; 0x06
     aec:	cb 01       	movw	r24, r22
     aee:	66 81       	ldd	r22, Z+6	; 0x06
     af0:	77 81       	ldd	r23, Z+7	; 0x07
     af2:	0c 94 8c 2b 	jmp	0x5718	; 0x5718 <memcpy>
     af6:	08 95       	ret

00000af8 <prvUnlockQueue>:
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	ec 01       	movw	r28, r24
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	0f 92       	push	r0
     b06:	1a a1       	ldd	r17, Y+34	; 0x22
     b08:	0b c0       	rjmp	.+22     	; 0xb20 <prvUnlockQueue+0x28>
     b0a:	8b 89       	ldd	r24, Y+19	; 0x13
     b0c:	88 23       	and	r24, r24
     b0e:	51 f0       	breq	.+20     	; 0xb24 <prvUnlockQueue+0x2c>
     b10:	ce 01       	movw	r24, r28
     b12:	43 96       	adiw	r24, 0x13	; 19
     b14:	0e 94 c0 10 	call	0x2180	; 0x2180 <xTaskRemoveFromEventList>
     b18:	81 11       	cpse	r24, r1
     b1a:	0e 94 96 12 	call	0x252c	; 0x252c <vTaskMissedYield>
     b1e:	11 50       	subi	r17, 0x01	; 1
     b20:	11 16       	cp	r1, r17
     b22:	9c f3       	brlt	.-26     	; 0xb0a <prvUnlockQueue+0x12>
     b24:	8f ef       	ldi	r24, 0xFF	; 255
     b26:	8a a3       	std	Y+34, r24	; 0x22
     b28:	0f 90       	pop	r0
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	f8 94       	cli
     b30:	0f 92       	push	r0
     b32:	19 a1       	ldd	r17, Y+33	; 0x21
     b34:	0b c0       	rjmp	.+22     	; 0xb4c <prvUnlockQueue+0x54>
     b36:	88 85       	ldd	r24, Y+8	; 0x08
     b38:	88 23       	and	r24, r24
     b3a:	51 f0       	breq	.+20     	; 0xb50 <prvUnlockQueue+0x58>
     b3c:	ce 01       	movw	r24, r28
     b3e:	08 96       	adiw	r24, 0x08	; 8
     b40:	0e 94 c0 10 	call	0x2180	; 0x2180 <xTaskRemoveFromEventList>
     b44:	81 11       	cpse	r24, r1
     b46:	0e 94 96 12 	call	0x252c	; 0x252c <vTaskMissedYield>
     b4a:	11 50       	subi	r17, 0x01	; 1
     b4c:	11 16       	cp	r1, r17
     b4e:	9c f3       	brlt	.-26     	; 0xb36 <prvUnlockQueue+0x3e>
     b50:	8f ef       	ldi	r24, 0xFF	; 255
     b52:	89 a3       	std	Y+33, r24	; 0x21
     b54:	0f 90       	pop	r0
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	08 95       	ret

00000b60 <xQueueGenericReset>:
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	ec 01       	movw	r28, r24
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	f8 94       	cli
     b6a:	0f 92       	push	r0
     b6c:	e8 81       	ld	r30, Y
     b6e:	f9 81       	ldd	r31, Y+1	; 0x01
     b70:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b72:	28 a1       	ldd	r18, Y+32	; 0x20
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	82 9f       	mul	r24, r18
     b7a:	a0 01       	movw	r20, r0
     b7c:	83 9f       	mul	r24, r19
     b7e:	50 0d       	add	r21, r0
     b80:	92 9f       	mul	r25, r18
     b82:	50 0d       	add	r21, r0
     b84:	11 24       	eor	r1, r1
     b86:	4e 0f       	add	r20, r30
     b88:	5f 1f       	adc	r21, r31
     b8a:	5d 83       	std	Y+5, r21	; 0x05
     b8c:	4c 83       	std	Y+4, r20	; 0x04
     b8e:	1e 8e       	std	Y+30, r1	; 0x1e
     b90:	fb 83       	std	Y+3, r31	; 0x03
     b92:	ea 83       	std	Y+2, r30	; 0x02
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	28 9f       	mul	r18, r24
     b98:	a0 01       	movw	r20, r0
     b9a:	29 9f       	mul	r18, r25
     b9c:	50 0d       	add	r21, r0
     b9e:	38 9f       	mul	r19, r24
     ba0:	50 0d       	add	r21, r0
     ba2:	11 24       	eor	r1, r1
     ba4:	cf 01       	movw	r24, r30
     ba6:	84 0f       	add	r24, r20
     ba8:	95 1f       	adc	r25, r21
     baa:	9f 83       	std	Y+7, r25	; 0x07
     bac:	8e 83       	std	Y+6, r24	; 0x06
     bae:	8f ef       	ldi	r24, 0xFF	; 255
     bb0:	89 a3       	std	Y+33, r24	; 0x21
     bb2:	8a a3       	std	Y+34, r24	; 0x22
     bb4:	61 11       	cpse	r22, r1
     bb6:	0b c0       	rjmp	.+22     	; 0xbce <xQueueGenericReset+0x6e>
     bb8:	88 85       	ldd	r24, Y+8	; 0x08
     bba:	88 23       	and	r24, r24
     bbc:	71 f0       	breq	.+28     	; 0xbda <xQueueGenericReset+0x7a>
     bbe:	ce 01       	movw	r24, r28
     bc0:	08 96       	adiw	r24, 0x08	; 8
     bc2:	0e 94 c0 10 	call	0x2180	; 0x2180 <xTaskRemoveFromEventList>
     bc6:	88 23       	and	r24, r24
     bc8:	41 f0       	breq	.+16     	; 0xbda <xQueueGenericReset+0x7a>
     bca:	3a de       	rcall	.-908    	; 0x840 <vPortYield>
     bcc:	06 c0       	rjmp	.+12     	; 0xbda <xQueueGenericReset+0x7a>
     bce:	ce 01       	movw	r24, r28
     bd0:	08 96       	adiw	r24, 0x08	; 8
     bd2:	68 dd       	rcall	.-1328   	; 0x6a4 <vListInitialise>
     bd4:	ce 01       	movw	r24, r28
     bd6:	43 96       	adiw	r24, 0x13	; 19
     bd8:	65 dd       	rcall	.-1334   	; 0x6a4 <vListInitialise>
     bda:	0f 90       	pop	r0
     bdc:	0f be       	out	0x3f, r0	; 63
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	08 95       	ret

00000be6 <prvInitialiseNewQueue>:
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17
     bea:	f8 01       	movw	r30, r16
     bec:	61 11       	cpse	r22, r1
     bee:	03 c0       	rjmp	.+6      	; 0xbf6 <prvInitialiseNewQueue+0x10>
     bf0:	11 83       	std	Z+1, r17	; 0x01
     bf2:	00 83       	st	Z, r16
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <prvInitialiseNewQueue+0x14>
     bf6:	51 83       	std	Z+1, r21	; 0x01
     bf8:	40 83       	st	Z, r20
     bfa:	87 8f       	std	Z+31, r24	; 0x1f
     bfc:	60 a3       	std	Z+32, r22	; 0x20
     bfe:	61 e0       	ldi	r22, 0x01	; 1
     c00:	cf 01       	movw	r24, r30
     c02:	ae df       	rcall	.-164    	; 0xb60 <xQueueGenericReset>
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	08 95       	ret

00000c0a <xQueueGenericCreate>:
     c0a:	df 92       	push	r13
     c0c:	ef 92       	push	r14
     c0e:	ff 92       	push	r15
     c10:	0f 93       	push	r16
     c12:	1f 93       	push	r17
     c14:	cf 93       	push	r28
     c16:	df 93       	push	r29
     c18:	f8 2e       	mov	r15, r24
     c1a:	e6 2e       	mov	r14, r22
     c1c:	d4 2e       	mov	r13, r20
     c1e:	86 9f       	mul	r24, r22
     c20:	c0 01       	movw	r24, r0
     c22:	11 24       	eor	r1, r1
     c24:	83 96       	adiw	r24, 0x23	; 35
     c26:	58 dc       	rcall	.-1872   	; 0x4d8 <pvPortMalloc>
     c28:	ec 01       	movw	r28, r24
     c2a:	00 97       	sbiw	r24, 0x00	; 0
     c2c:	41 f0       	breq	.+16     	; 0xc3e <xQueueGenericCreate+0x34>
     c2e:	8c 01       	movw	r16, r24
     c30:	2d 2d       	mov	r18, r13
     c32:	ac 01       	movw	r20, r24
     c34:	4d 5d       	subi	r20, 0xDD	; 221
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	6e 2d       	mov	r22, r14
     c3a:	8f 2d       	mov	r24, r15
     c3c:	d4 df       	rcall	.-88     	; 0xbe6 <prvInitialiseNewQueue>
     c3e:	ce 01       	movw	r24, r28
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	df 90       	pop	r13
     c4e:	08 95       	ret

00000c50 <xQueueGenericSend>:
     c50:	cf 92       	push	r12
     c52:	df 92       	push	r13
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	29 97       	sbiw	r28, 0x09	; 9
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	de bf       	out	0x3e, r29	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	cd bf       	out	0x3d, r28	; 61
     c70:	7c 01       	movw	r14, r24
     c72:	6b 01       	movw	r12, r22
     c74:	2e 83       	std	Y+6, r18	; 0x06
     c76:	3f 83       	std	Y+7, r19	; 0x07
     c78:	48 87       	std	Y+8, r20	; 0x08
     c7a:	59 87       	std	Y+9, r21	; 0x09
     c7c:	10 e0       	ldi	r17, 0x00	; 0
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	0f 92       	push	r0
     c84:	f7 01       	movw	r30, r14
     c86:	96 8d       	ldd	r25, Z+30	; 0x1e
     c88:	87 8d       	ldd	r24, Z+31	; 0x1f
     c8a:	98 17       	cp	r25, r24
     c8c:	10 f0       	brcs	.+4      	; 0xc92 <xQueueGenericSend+0x42>
     c8e:	02 30       	cpi	r16, 0x02	; 2
     c90:	b1 f4       	brne	.+44     	; 0xcbe <xQueueGenericSend+0x6e>
     c92:	40 2f       	mov	r20, r16
     c94:	b6 01       	movw	r22, r12
     c96:	c7 01       	movw	r24, r14
     c98:	b6 de       	rcall	.-660    	; 0xa06 <prvCopyDataToQueue>
     c9a:	f7 01       	movw	r30, r14
     c9c:	93 89       	ldd	r25, Z+19	; 0x13
     c9e:	99 23       	and	r25, r25
     ca0:	41 f0       	breq	.+16     	; 0xcb2 <xQueueGenericSend+0x62>
     ca2:	c7 01       	movw	r24, r14
     ca4:	43 96       	adiw	r24, 0x13	; 19
     ca6:	0e 94 c0 10 	call	0x2180	; 0x2180 <xTaskRemoveFromEventList>
     caa:	88 23       	and	r24, r24
     cac:	21 f0       	breq	.+8      	; 0xcb6 <xQueueGenericSend+0x66>
     cae:	c8 dd       	rcall	.-1136   	; 0x840 <vPortYield>
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <xQueueGenericSend+0x66>
     cb2:	81 11       	cpse	r24, r1
     cb4:	c5 dd       	rcall	.-1142   	; 0x840 <vPortYield>
     cb6:	0f 90       	pop	r0
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	4b c0       	rjmp	.+150    	; 0xd54 <xQueueGenericSend+0x104>
     cbe:	8e 81       	ldd	r24, Y+6	; 0x06
     cc0:	9f 81       	ldd	r25, Y+7	; 0x07
     cc2:	a8 85       	ldd	r26, Y+8	; 0x08
     cc4:	b9 85       	ldd	r27, Y+9	; 0x09
     cc6:	89 2b       	or	r24, r25
     cc8:	8a 2b       	or	r24, r26
     cca:	8b 2b       	or	r24, r27
     ccc:	21 f4       	brne	.+8      	; 0xcd6 <xQueueGenericSend+0x86>
     cce:	0f 90       	pop	r0
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	3f c0       	rjmp	.+126    	; 0xd54 <xQueueGenericSend+0x104>
     cd6:	11 11       	cpse	r17, r1
     cd8:	05 c0       	rjmp	.+10     	; 0xce4 <xQueueGenericSend+0x94>
     cda:	ce 01       	movw	r24, r28
     cdc:	01 96       	adiw	r24, 0x01	; 1
     cde:	0e 94 1f 12 	call	0x243e	; 0x243e <vTaskInternalSetTimeOutState>
     ce2:	11 e0       	ldi	r17, 0x01	; 1
     ce4:	0f 90       	pop	r0
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	f1 d6       	rcall	.+3554   	; 0x1acc <vTaskSuspendAll>
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	0f 92       	push	r0
     cf0:	f7 01       	movw	r30, r14
     cf2:	81 a1       	ldd	r24, Z+33	; 0x21
     cf4:	8f 3f       	cpi	r24, 0xFF	; 255
     cf6:	09 f4       	brne	.+2      	; 0xcfa <xQueueGenericSend+0xaa>
     cf8:	11 a2       	std	Z+33, r1	; 0x21
     cfa:	f7 01       	movw	r30, r14
     cfc:	82 a1       	ldd	r24, Z+34	; 0x22
     cfe:	8f 3f       	cpi	r24, 0xFF	; 255
     d00:	09 f4       	brne	.+2      	; 0xd04 <xQueueGenericSend+0xb4>
     d02:	12 a2       	std	Z+34, r1	; 0x22
     d04:	0f 90       	pop	r0
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	be 01       	movw	r22, r28
     d0a:	6a 5f       	subi	r22, 0xFA	; 250
     d0c:	7f 4f       	sbci	r23, 0xFF	; 255
     d0e:	ce 01       	movw	r24, r28
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	0e 94 30 12 	call	0x2460	; 0x2460 <xTaskCheckForTimeOut>
     d16:	81 11       	cpse	r24, r1
     d18:	19 c0       	rjmp	.+50     	; 0xd4c <xQueueGenericSend+0xfc>
     d1a:	c7 01       	movw	r24, r14
     d1c:	66 de       	rcall	.-820    	; 0x9ea <prvIsQueueFull>
     d1e:	88 23       	and	r24, r24
     d20:	81 f0       	breq	.+32     	; 0xd42 <xQueueGenericSend+0xf2>
     d22:	4e 81       	ldd	r20, Y+6	; 0x06
     d24:	5f 81       	ldd	r21, Y+7	; 0x07
     d26:	68 85       	ldd	r22, Y+8	; 0x08
     d28:	79 85       	ldd	r23, Y+9	; 0x09
     d2a:	c7 01       	movw	r24, r14
     d2c:	08 96       	adiw	r24, 0x08	; 8
     d2e:	0e 94 67 10 	call	0x20ce	; 0x20ce <vTaskPlaceOnEventList>
     d32:	c7 01       	movw	r24, r14
     d34:	e1 de       	rcall	.-574    	; 0xaf8 <prvUnlockQueue>
     d36:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <xTaskResumeAll>
     d3a:	81 11       	cpse	r24, r1
     d3c:	a0 cf       	rjmp	.-192    	; 0xc7e <xQueueGenericSend+0x2e>
     d3e:	80 dd       	rcall	.-1280   	; 0x840 <vPortYield>
     d40:	9e cf       	rjmp	.-196    	; 0xc7e <xQueueGenericSend+0x2e>
     d42:	c7 01       	movw	r24, r14
     d44:	d9 de       	rcall	.-590    	; 0xaf8 <prvUnlockQueue>
     d46:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <xTaskResumeAll>
     d4a:	99 cf       	rjmp	.-206    	; 0xc7e <xQueueGenericSend+0x2e>
     d4c:	c7 01       	movw	r24, r14
     d4e:	d4 de       	rcall	.-600    	; 0xaf8 <prvUnlockQueue>
     d50:	fd d7       	rcall	.+4090   	; 0x1d4c <xTaskResumeAll>
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	29 96       	adiw	r28, 0x09	; 9
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	1f 91       	pop	r17
     d66:	0f 91       	pop	r16
     d68:	ff 90       	pop	r15
     d6a:	ef 90       	pop	r14
     d6c:	df 90       	pop	r13
     d6e:	cf 90       	pop	r12
     d70:	08 95       	ret

00000d72 <xQueueGenericSendFromISR>:
     d72:	ef 92       	push	r14
     d74:	ff 92       	push	r15
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	8a 01       	movw	r16, r20
     d80:	fc 01       	movw	r30, r24
     d82:	56 8d       	ldd	r21, Z+30	; 0x1e
     d84:	37 8d       	ldd	r19, Z+31	; 0x1f
     d86:	53 17       	cp	r21, r19
     d88:	10 f0       	brcs	.+4      	; 0xd8e <xQueueGenericSendFromISR+0x1c>
     d8a:	22 30       	cpi	r18, 0x02	; 2
     d8c:	f9 f4       	brne	.+62     	; 0xdcc <xQueueGenericSendFromISR+0x5a>
     d8e:	42 2f       	mov	r20, r18
     d90:	78 01       	movw	r14, r16
     d92:	ec 01       	movw	r28, r24
     d94:	1a a1       	ldd	r17, Y+34	; 0x22
     d96:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d98:	ce 01       	movw	r24, r28
     d9a:	35 de       	rcall	.-918    	; 0xa06 <prvCopyDataToQueue>
     d9c:	1f 3f       	cpi	r17, 0xFF	; 255
     d9e:	81 f4       	brne	.+32     	; 0xdc0 <xQueueGenericSendFromISR+0x4e>
     da0:	8b 89       	ldd	r24, Y+19	; 0x13
     da2:	88 23       	and	r24, r24
     da4:	a9 f0       	breq	.+42     	; 0xdd0 <xQueueGenericSendFromISR+0x5e>
     da6:	ce 01       	movw	r24, r28
     da8:	43 96       	adiw	r24, 0x13	; 19
     daa:	0e 94 c0 10 	call	0x2180	; 0x2180 <xTaskRemoveFromEventList>
     dae:	88 23       	and	r24, r24
     db0:	89 f0       	breq	.+34     	; 0xdd4 <xQueueGenericSendFromISR+0x62>
     db2:	e1 14       	cp	r14, r1
     db4:	f1 04       	cpc	r15, r1
     db6:	81 f0       	breq	.+32     	; 0xdd8 <xQueueGenericSendFromISR+0x66>
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	f7 01       	movw	r30, r14
     dbc:	80 83       	st	Z, r24
     dbe:	0d c0       	rjmp	.+26     	; 0xdda <xQueueGenericSendFromISR+0x68>
     dc0:	ff 24       	eor	r15, r15
     dc2:	f3 94       	inc	r15
     dc4:	f1 0e       	add	r15, r17
     dc6:	fa a2       	std	Y+34, r15	; 0x22
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	07 c0       	rjmp	.+14     	; 0xdda <xQueueGenericSendFromISR+0x68>
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	05 c0       	rjmp	.+10     	; 0xdda <xQueueGenericSendFromISR+0x68>
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	03 c0       	rjmp	.+6      	; 0xdda <xQueueGenericSendFromISR+0x68>
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	01 c0       	rjmp	.+2      	; 0xdda <xQueueGenericSendFromISR+0x68>
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	1f 91       	pop	r17
     de0:	0f 91       	pop	r16
     de2:	ff 90       	pop	r15
     de4:	ef 90       	pop	r14
     de6:	08 95       	ret

00000de8 <xQueueReceive>:
     de8:	cf 92       	push	r12
     dea:	df 92       	push	r13
     dec:	ef 92       	push	r14
     dee:	ff 92       	push	r15
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	29 97       	sbiw	r28, 0x09	; 9
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	8c 01       	movw	r16, r24
     e0a:	6b 01       	movw	r12, r22
     e0c:	2e 83       	std	Y+6, r18	; 0x06
     e0e:	3f 83       	std	Y+7, r19	; 0x07
     e10:	48 87       	std	Y+8, r20	; 0x08
     e12:	59 87       	std	Y+9, r21	; 0x09
     e14:	e1 2c       	mov	r14, r1
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	0f 92       	push	r0
     e1c:	f8 01       	movw	r30, r16
     e1e:	f6 8c       	ldd	r15, Z+30	; 0x1e
     e20:	ff 20       	and	r15, r15
     e22:	99 f0       	breq	.+38     	; 0xe4a <xQueueReceive+0x62>
     e24:	b6 01       	movw	r22, r12
     e26:	c8 01       	movw	r24, r16
     e28:	4d de       	rcall	.-870    	; 0xac4 <prvCopyDataFromQueue>
     e2a:	fa 94       	dec	r15
     e2c:	f8 01       	movw	r30, r16
     e2e:	f6 8e       	std	Z+30, r15	; 0x1e
     e30:	80 85       	ldd	r24, Z+8	; 0x08
     e32:	88 23       	and	r24, r24
     e34:	31 f0       	breq	.+12     	; 0xe42 <xQueueReceive+0x5a>
     e36:	c8 01       	movw	r24, r16
     e38:	08 96       	adiw	r24, 0x08	; 8
     e3a:	0e 94 c0 10 	call	0x2180	; 0x2180 <xTaskRemoveFromEventList>
     e3e:	81 11       	cpse	r24, r1
     e40:	ff dc       	rcall	.-1538   	; 0x840 <vPortYield>
     e42:	0f 90       	pop	r0
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	4f c0       	rjmp	.+158    	; 0xee8 <xQueueReceive+0x100>
     e4a:	8e 81       	ldd	r24, Y+6	; 0x06
     e4c:	9f 81       	ldd	r25, Y+7	; 0x07
     e4e:	a8 85       	ldd	r26, Y+8	; 0x08
     e50:	b9 85       	ldd	r27, Y+9	; 0x09
     e52:	89 2b       	or	r24, r25
     e54:	8a 2b       	or	r24, r26
     e56:	8b 2b       	or	r24, r27
     e58:	21 f4       	brne	.+8      	; 0xe62 <xQueueReceive+0x7a>
     e5a:	0f 90       	pop	r0
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	43 c0       	rjmp	.+134    	; 0xee8 <xQueueReceive+0x100>
     e62:	e1 10       	cpse	r14, r1
     e64:	06 c0       	rjmp	.+12     	; 0xe72 <xQueueReceive+0x8a>
     e66:	ce 01       	movw	r24, r28
     e68:	01 96       	adiw	r24, 0x01	; 1
     e6a:	0e 94 1f 12 	call	0x243e	; 0x243e <vTaskInternalSetTimeOutState>
     e6e:	ee 24       	eor	r14, r14
     e70:	e3 94       	inc	r14
     e72:	0f 90       	pop	r0
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	2a d6       	rcall	.+3156   	; 0x1acc <vTaskSuspendAll>
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	0f 92       	push	r0
     e7e:	f8 01       	movw	r30, r16
     e80:	81 a1       	ldd	r24, Z+33	; 0x21
     e82:	8f 3f       	cpi	r24, 0xFF	; 255
     e84:	09 f4       	brne	.+2      	; 0xe88 <xQueueReceive+0xa0>
     e86:	11 a2       	std	Z+33, r1	; 0x21
     e88:	f8 01       	movw	r30, r16
     e8a:	82 a1       	ldd	r24, Z+34	; 0x22
     e8c:	8f 3f       	cpi	r24, 0xFF	; 255
     e8e:	09 f4       	brne	.+2      	; 0xe92 <xQueueReceive+0xaa>
     e90:	12 a2       	std	Z+34, r1	; 0x22
     e92:	0f 90       	pop	r0
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	be 01       	movw	r22, r28
     e98:	6a 5f       	subi	r22, 0xFA	; 250
     e9a:	7f 4f       	sbci	r23, 0xFF	; 255
     e9c:	ce 01       	movw	r24, r28
     e9e:	01 96       	adiw	r24, 0x01	; 1
     ea0:	0e 94 30 12 	call	0x2460	; 0x2460 <xTaskCheckForTimeOut>
     ea4:	81 11       	cpse	r24, r1
     ea6:	17 c0       	rjmp	.+46     	; 0xed6 <xQueueReceive+0xee>
     ea8:	c8 01       	movw	r24, r16
     eaa:	92 dd       	rcall	.-1244   	; 0x9d0 <prvIsQueueEmpty>
     eac:	88 23       	and	r24, r24
     eae:	79 f0       	breq	.+30     	; 0xece <xQueueReceive+0xe6>
     eb0:	4e 81       	ldd	r20, Y+6	; 0x06
     eb2:	5f 81       	ldd	r21, Y+7	; 0x07
     eb4:	68 85       	ldd	r22, Y+8	; 0x08
     eb6:	79 85       	ldd	r23, Y+9	; 0x09
     eb8:	c8 01       	movw	r24, r16
     eba:	43 96       	adiw	r24, 0x13	; 19
     ebc:	0e 94 67 10 	call	0x20ce	; 0x20ce <vTaskPlaceOnEventList>
     ec0:	c8 01       	movw	r24, r16
     ec2:	1a de       	rcall	.-972    	; 0xaf8 <prvUnlockQueue>
     ec4:	43 d7       	rcall	.+3718   	; 0x1d4c <xTaskResumeAll>
     ec6:	81 11       	cpse	r24, r1
     ec8:	a6 cf       	rjmp	.-180    	; 0xe16 <xQueueReceive+0x2e>
     eca:	ba dc       	rcall	.-1676   	; 0x840 <vPortYield>
     ecc:	a4 cf       	rjmp	.-184    	; 0xe16 <xQueueReceive+0x2e>
     ece:	c8 01       	movw	r24, r16
     ed0:	13 de       	rcall	.-986    	; 0xaf8 <prvUnlockQueue>
     ed2:	3c d7       	rcall	.+3704   	; 0x1d4c <xTaskResumeAll>
     ed4:	a0 cf       	rjmp	.-192    	; 0xe16 <xQueueReceive+0x2e>
     ed6:	c8 01       	movw	r24, r16
     ed8:	0f de       	rcall	.-994    	; 0xaf8 <prvUnlockQueue>
     eda:	38 d7       	rcall	.+3696   	; 0x1d4c <xTaskResumeAll>
     edc:	c8 01       	movw	r24, r16
     ede:	78 dd       	rcall	.-1296   	; 0x9d0 <prvIsQueueEmpty>
     ee0:	88 23       	and	r24, r24
     ee2:	09 f4       	brne	.+2      	; 0xee6 <xQueueReceive+0xfe>
     ee4:	98 cf       	rjmp	.-208    	; 0xe16 <xQueueReceive+0x2e>
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	29 96       	adiw	r28, 0x09	; 9
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	1f 91       	pop	r17
     efa:	0f 91       	pop	r16
     efc:	ff 90       	pop	r15
     efe:	ef 90       	pop	r14
     f00:	df 90       	pop	r13
     f02:	cf 90       	pop	r12
     f04:	08 95       	ret

00000f06 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	0f 92       	push	r0
     f12:	89 a1       	ldd	r24, Y+33	; 0x21
     f14:	8f 3f       	cpi	r24, 0xFF	; 255
     f16:	09 f4       	brne	.+2      	; 0xf1a <vQueueWaitForMessageRestricted+0x14>
     f18:	19 a2       	std	Y+33, r1	; 0x21
     f1a:	8a a1       	ldd	r24, Y+34	; 0x22
     f1c:	8f 3f       	cpi	r24, 0xFF	; 255
     f1e:	09 f4       	brne	.+2      	; 0xf22 <vQueueWaitForMessageRestricted+0x1c>
     f20:	1a a2       	std	Y+34, r1	; 0x22
     f22:	0f 90       	pop	r0
     f24:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     f26:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f28:	81 11       	cpse	r24, r1
     f2a:	04 c0       	rjmp	.+8      	; 0xf34 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     f2c:	ce 01       	movw	r24, r28
     f2e:	43 96       	adiw	r24, 0x13	; 19
     f30:	0e 94 7e 10 	call	0x20fc	; 0x20fc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     f34:	ce 01       	movw	r24, r28
     f36:	e0 dd       	rcall	.-1088   	; 0xaf8 <prvUnlockQueue>
    }
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	08 95       	ret

00000f3e <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     f3e:	fc 01       	movw	r30, r24
     f40:	44 81       	ldd	r20, Z+4	; 0x04
     f42:	55 81       	ldd	r21, Z+5	; 0x05
     f44:	22 81       	ldd	r18, Z+2	; 0x02
     f46:	33 81       	ldd	r19, Z+3	; 0x03
     f48:	24 0f       	add	r18, r20
     f4a:	35 1f       	adc	r19, r21
     f4c:	80 81       	ld	r24, Z
     f4e:	91 81       	ldd	r25, Z+1	; 0x01
     f50:	b9 01       	movw	r22, r18
     f52:	68 1b       	sub	r22, r24
     f54:	79 0b       	sbc	r23, r25
     f56:	cb 01       	movw	r24, r22
     f58:	64 17       	cp	r22, r20
     f5a:	75 07       	cpc	r23, r21
     f5c:	10 f0       	brcs	.+4      	; 0xf62 <prvBytesInBuffer+0x24>
     f5e:	84 1b       	sub	r24, r20
     f60:	95 0b       	sbc	r25, r21
     f62:	08 95       	ret

00000f64 <prvInitialiseNewStreamBuffer>:
     f64:	0f 93       	push	r16
     f66:	fc 01       	movw	r30, r24
     f68:	8f e0       	ldi	r24, 0x0F	; 15
     f6a:	df 01       	movw	r26, r30
     f6c:	1d 92       	st	X+, r1
     f6e:	8a 95       	dec	r24
     f70:	e9 f7       	brne	.-6      	; 0xf6c <prvInitialiseNewStreamBuffer+0x8>
     f72:	75 87       	std	Z+13, r23	; 0x0d
     f74:	64 87       	std	Z+12, r22	; 0x0c
     f76:	55 83       	std	Z+5, r21	; 0x05
     f78:	44 83       	std	Z+4, r20	; 0x04
     f7a:	37 83       	std	Z+7, r19	; 0x07
     f7c:	26 83       	std	Z+6, r18	; 0x06
     f7e:	06 87       	std	Z+14, r16	; 0x0e
     f80:	0f 91       	pop	r16
     f82:	08 95       	ret

00000f84 <prvWriteBytesToBuffer>:
     f84:	af 92       	push	r10
     f86:	bf 92       	push	r11
     f88:	cf 92       	push	r12
     f8a:	df 92       	push	r13
     f8c:	ef 92       	push	r14
     f8e:	ff 92       	push	r15
     f90:	0f 93       	push	r16
     f92:	1f 93       	push	r17
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	6c 01       	movw	r12, r24
     f9a:	5b 01       	movw	r10, r22
     f9c:	7a 01       	movw	r14, r20
     f9e:	fc 01       	movw	r30, r24
     fa0:	c2 81       	ldd	r28, Z+2	; 0x02
     fa2:	d3 81       	ldd	r29, Z+3	; 0x03
     fa4:	04 81       	ldd	r16, Z+4	; 0x04
     fa6:	15 81       	ldd	r17, Z+5	; 0x05
     fa8:	0c 1b       	sub	r16, r28
     faa:	1d 0b       	sbc	r17, r29
     fac:	40 17       	cp	r20, r16
     fae:	51 07       	cpc	r21, r17
     fb0:	08 f4       	brcc	.+2      	; 0xfb4 <prvWriteBytesToBuffer+0x30>
     fb2:	8a 01       	movw	r16, r20
     fb4:	f6 01       	movw	r30, r12
     fb6:	84 85       	ldd	r24, Z+12	; 0x0c
     fb8:	95 85       	ldd	r25, Z+13	; 0x0d
     fba:	a8 01       	movw	r20, r16
     fbc:	b5 01       	movw	r22, r10
     fbe:	8c 0f       	add	r24, r28
     fc0:	9d 1f       	adc	r25, r29
     fc2:	0e 94 8c 2b 	call	0x5718	; 0x5718 <memcpy>
     fc6:	0e 15       	cp	r16, r14
     fc8:	1f 05       	cpc	r17, r15
     fca:	58 f4       	brcc	.+22     	; 0xfe2 <prvWriteBytesToBuffer+0x5e>
     fcc:	a7 01       	movw	r20, r14
     fce:	40 1b       	sub	r20, r16
     fd0:	51 0b       	sbc	r21, r17
     fd2:	b5 01       	movw	r22, r10
     fd4:	60 0f       	add	r22, r16
     fd6:	71 1f       	adc	r23, r17
     fd8:	f6 01       	movw	r30, r12
     fda:	84 85       	ldd	r24, Z+12	; 0x0c
     fdc:	95 85       	ldd	r25, Z+13	; 0x0d
     fde:	0e 94 8c 2b 	call	0x5718	; 0x5718 <memcpy>
     fe2:	ce 01       	movw	r24, r28
     fe4:	8e 0d       	add	r24, r14
     fe6:	9f 1d       	adc	r25, r15
     fe8:	f6 01       	movw	r30, r12
     fea:	24 81       	ldd	r18, Z+4	; 0x04
     fec:	35 81       	ldd	r19, Z+5	; 0x05
     fee:	82 17       	cp	r24, r18
     ff0:	93 07       	cpc	r25, r19
     ff2:	10 f0       	brcs	.+4      	; 0xff8 <prvWriteBytesToBuffer+0x74>
     ff4:	82 1b       	sub	r24, r18
     ff6:	93 0b       	sbc	r25, r19
     ff8:	f6 01       	movw	r30, r12
     ffa:	93 83       	std	Z+3, r25	; 0x03
     ffc:	82 83       	std	Z+2, r24	; 0x02
     ffe:	c7 01       	movw	r24, r14
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	1f 91       	pop	r17
    1006:	0f 91       	pop	r16
    1008:	ff 90       	pop	r15
    100a:	ef 90       	pop	r14
    100c:	df 90       	pop	r13
    100e:	cf 90       	pop	r12
    1010:	bf 90       	pop	r11
    1012:	af 90       	pop	r10
    1014:	08 95       	ret

00001016 <prvWriteMessageToBuffer>:
    1016:	cf 92       	push	r12
    1018:	df 92       	push	r13
    101a:	ef 92       	push	r14
    101c:	ff 92       	push	r15
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	1f 92       	push	r1
    1028:	1f 92       	push	r1
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	7c 01       	movw	r14, r24
    1030:	6b 01       	movw	r12, r22
    1032:	5a 83       	std	Y+2, r21	; 0x02
    1034:	49 83       	std	Y+1, r20	; 0x01
    1036:	21 15       	cp	r18, r1
    1038:	31 05       	cpc	r19, r1
    103a:	c1 f0       	breq	.+48     	; 0x106c <prvWriteMessageToBuffer+0x56>
    103c:	fc 01       	movw	r30, r24
    103e:	86 85       	ldd	r24, Z+14	; 0x0e
    1040:	80 fd       	sbrc	r24, 0
    1042:	08 c0       	rjmp	.+16     	; 0x1054 <prvWriteMessageToBuffer+0x3e>
    1044:	42 17       	cp	r20, r18
    1046:	53 07       	cpc	r21, r19
    1048:	08 f4       	brcc	.+2      	; 0x104c <prvWriteMessageToBuffer+0x36>
    104a:	9a 01       	movw	r18, r20
    104c:	3a 83       	std	Y+2, r19	; 0x02
    104e:	29 83       	std	Y+1, r18	; 0x01
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	0f c0       	rjmp	.+30     	; 0x1072 <prvWriteMessageToBuffer+0x5c>
    1054:	20 17       	cp	r18, r16
    1056:	31 07       	cpc	r19, r17
    1058:	58 f0       	brcs	.+22     	; 0x1070 <prvWriteMessageToBuffer+0x5a>
    105a:	42 e0       	ldi	r20, 0x02	; 2
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	be 01       	movw	r22, r28
    1060:	6f 5f       	subi	r22, 0xFF	; 255
    1062:	7f 4f       	sbci	r23, 0xFF	; 255
    1064:	c7 01       	movw	r24, r14
    1066:	8e df       	rcall	.-228    	; 0xf84 <prvWriteBytesToBuffer>
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	03 c0       	rjmp	.+6      	; 0x1072 <prvWriteMessageToBuffer+0x5c>
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	01 c0       	rjmp	.+2      	; 0x1072 <prvWriteMessageToBuffer+0x5c>
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	88 23       	and	r24, r24
    1074:	31 f0       	breq	.+12     	; 0x1082 <prvWriteMessageToBuffer+0x6c>
    1076:	49 81       	ldd	r20, Y+1	; 0x01
    1078:	5a 81       	ldd	r21, Y+2	; 0x02
    107a:	b6 01       	movw	r22, r12
    107c:	c7 01       	movw	r24, r14
    107e:	82 df       	rcall	.-252    	; 0xf84 <prvWriteBytesToBuffer>
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <prvWriteMessageToBuffer+0x70>
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	ff 90       	pop	r15
    1094:	ef 90       	pop	r14
    1096:	df 90       	pop	r13
    1098:	cf 90       	pop	r12
    109a:	08 95       	ret

0000109c <prvReadBytesFromBuffer>:
    109c:	af 92       	push	r10
    109e:	bf 92       	push	r11
    10a0:	cf 92       	push	r12
    10a2:	df 92       	push	r13
    10a4:	ef 92       	push	r14
    10a6:	ff 92       	push	r15
    10a8:	0f 93       	push	r16
    10aa:	1f 93       	push	r17
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	7c 01       	movw	r14, r24
    10b2:	5b 01       	movw	r10, r22
    10b4:	e9 01       	movw	r28, r18
    10b6:	42 17       	cp	r20, r18
    10b8:	53 07       	cpc	r21, r19
    10ba:	08 f4       	brcc	.+2      	; 0x10be <prvReadBytesFromBuffer+0x22>
    10bc:	ea 01       	movw	r28, r20
    10be:	20 97       	sbiw	r28, 0x00	; 0
    10c0:	81 f1       	breq	.+96     	; 0x1122 <prvReadBytesFromBuffer+0x86>
    10c2:	f7 01       	movw	r30, r14
    10c4:	00 81       	ld	r16, Z
    10c6:	11 81       	ldd	r17, Z+1	; 0x01
    10c8:	84 81       	ldd	r24, Z+4	; 0x04
    10ca:	95 81       	ldd	r25, Z+5	; 0x05
    10cc:	80 1b       	sub	r24, r16
    10ce:	91 0b       	sbc	r25, r17
    10d0:	6e 01       	movw	r12, r28
    10d2:	8c 17       	cp	r24, r28
    10d4:	9d 07       	cpc	r25, r29
    10d6:	08 f4       	brcc	.+2      	; 0x10da <prvReadBytesFromBuffer+0x3e>
    10d8:	6c 01       	movw	r12, r24
    10da:	f7 01       	movw	r30, r14
    10dc:	64 85       	ldd	r22, Z+12	; 0x0c
    10de:	75 85       	ldd	r23, Z+13	; 0x0d
    10e0:	60 0f       	add	r22, r16
    10e2:	71 1f       	adc	r23, r17
    10e4:	a6 01       	movw	r20, r12
    10e6:	c5 01       	movw	r24, r10
    10e8:	0e 94 8c 2b 	call	0x5718	; 0x5718 <memcpy>
    10ec:	cc 16       	cp	r12, r28
    10ee:	dd 06       	cpc	r13, r29
    10f0:	58 f4       	brcc	.+22     	; 0x1108 <prvReadBytesFromBuffer+0x6c>
    10f2:	ae 01       	movw	r20, r28
    10f4:	4c 19       	sub	r20, r12
    10f6:	5d 09       	sbc	r21, r13
    10f8:	f7 01       	movw	r30, r14
    10fa:	64 85       	ldd	r22, Z+12	; 0x0c
    10fc:	75 85       	ldd	r23, Z+13	; 0x0d
    10fe:	c5 01       	movw	r24, r10
    1100:	8c 0d       	add	r24, r12
    1102:	9d 1d       	adc	r25, r13
    1104:	0e 94 8c 2b 	call	0x5718	; 0x5718 <memcpy>
    1108:	0c 0f       	add	r16, r28
    110a:	1d 1f       	adc	r17, r29
    110c:	f7 01       	movw	r30, r14
    110e:	84 81       	ldd	r24, Z+4	; 0x04
    1110:	95 81       	ldd	r25, Z+5	; 0x05
    1112:	08 17       	cp	r16, r24
    1114:	19 07       	cpc	r17, r25
    1116:	10 f0       	brcs	.+4      	; 0x111c <prvReadBytesFromBuffer+0x80>
    1118:	08 1b       	sub	r16, r24
    111a:	19 0b       	sbc	r17, r25
    111c:	f7 01       	movw	r30, r14
    111e:	11 83       	std	Z+1, r17	; 0x01
    1120:	00 83       	st	Z, r16
    1122:	ce 01       	movw	r24, r28
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	ff 90       	pop	r15
    112e:	ef 90       	pop	r14
    1130:	df 90       	pop	r13
    1132:	cf 90       	pop	r12
    1134:	bf 90       	pop	r11
    1136:	af 90       	pop	r10
    1138:	08 95       	ret

0000113a <prvReadMessageFromBuffer>:
    113a:	6f 92       	push	r6
    113c:	7f 92       	push	r7
    113e:	8f 92       	push	r8
    1140:	9f 92       	push	r9
    1142:	af 92       	push	r10
    1144:	bf 92       	push	r11
    1146:	cf 92       	push	r12
    1148:	df 92       	push	r13
    114a:	ef 92       	push	r14
    114c:	ff 92       	push	r15
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	1f 92       	push	r1
    1158:	1f 92       	push	r1
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	6c 01       	movw	r12, r24
    1160:	4b 01       	movw	r8, r22
    1162:	5a 01       	movw	r10, r20
    1164:	79 01       	movw	r14, r18
    1166:	01 15       	cp	r16, r1
    1168:	11 05       	cpc	r17, r1
    116a:	b1 f0       	breq	.+44     	; 0x1198 <prvReadMessageFromBuffer+0x5e>
    116c:	fc 01       	movw	r30, r24
    116e:	60 80       	ld	r6, Z
    1170:	71 80       	ldd	r7, Z+1	; 0x01
    1172:	a8 01       	movw	r20, r16
    1174:	be 01       	movw	r22, r28
    1176:	6f 5f       	subi	r22, 0xFF	; 255
    1178:	7f 4f       	sbci	r23, 0xFF	; 255
    117a:	90 df       	rcall	.-224    	; 0x109c <prvReadBytesFromBuffer>
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	9a 81       	ldd	r25, Y+2	; 0x02
    1180:	e0 1a       	sub	r14, r16
    1182:	f1 0a       	sbc	r15, r17
    1184:	a8 16       	cp	r10, r24
    1186:	b9 06       	cpc	r11, r25
    1188:	30 f4       	brcc	.+12     	; 0x1196 <prvReadMessageFromBuffer+0x5c>
    118a:	f6 01       	movw	r30, r12
    118c:	71 82       	std	Z+1, r7	; 0x01
    118e:	60 82       	st	Z, r6
    1190:	a1 2c       	mov	r10, r1
    1192:	b1 2c       	mov	r11, r1
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <prvReadMessageFromBuffer+0x5e>
    1196:	5c 01       	movw	r10, r24
    1198:	97 01       	movw	r18, r14
    119a:	a5 01       	movw	r20, r10
    119c:	b4 01       	movw	r22, r8
    119e:	c6 01       	movw	r24, r12
    11a0:	7d df       	rcall	.-262    	; 0x109c <prvReadBytesFromBuffer>
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	ff 90       	pop	r15
    11b0:	ef 90       	pop	r14
    11b2:	df 90       	pop	r13
    11b4:	cf 90       	pop	r12
    11b6:	bf 90       	pop	r11
    11b8:	af 90       	pop	r10
    11ba:	9f 90       	pop	r9
    11bc:	8f 90       	pop	r8
    11be:	7f 90       	pop	r7
    11c0:	6f 90       	pop	r6
    11c2:	08 95       	ret

000011c4 <xStreamBufferGenericCreate>:
    11c4:	cf 92       	push	r12
    11c6:	df 92       	push	r13
    11c8:	ef 92       	push	r14
    11ca:	ff 92       	push	r15
    11cc:	0f 93       	push	r16
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	ec 01       	movw	r28, r24
    11d4:	6b 01       	movw	r12, r22
    11d6:	41 30       	cpi	r20, 0x01	; 1
    11d8:	11 f4       	brne	.+4      	; 0x11de <xStreamBufferGenericCreate+0x1a>
    11da:	01 e0       	ldi	r16, 0x01	; 1
    11dc:	01 c0       	rjmp	.+2      	; 0x11e0 <xStreamBufferGenericCreate+0x1c>
    11de:	00 e0       	ldi	r16, 0x00	; 0
    11e0:	c1 14       	cp	r12, r1
    11e2:	d1 04       	cpc	r13, r1
    11e4:	19 f4       	brne	.+6      	; 0x11ec <xStreamBufferGenericCreate+0x28>
    11e6:	cc 24       	eor	r12, r12
    11e8:	c3 94       	inc	r12
    11ea:	d1 2c       	mov	r13, r1
    11ec:	ce 01       	movw	r24, r28
    11ee:	40 96       	adiw	r24, 0x10	; 16
    11f0:	c8 17       	cp	r28, r24
    11f2:	d9 07       	cpc	r29, r25
    11f4:	20 f4       	brcc	.+8      	; 0x11fe <xStreamBufferGenericCreate+0x3a>
    11f6:	21 96       	adiw	r28, 0x01	; 1
    11f8:	6f d9       	rcall	.-3362   	; 0x4d8 <pvPortMalloc>
    11fa:	7c 01       	movw	r14, r24
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <xStreamBufferGenericCreate+0x3e>
    11fe:	e1 2c       	mov	r14, r1
    1200:	f1 2c       	mov	r15, r1
    1202:	e1 14       	cp	r14, r1
    1204:	f1 04       	cpc	r15, r1
    1206:	39 f0       	breq	.+14     	; 0x1216 <xStreamBufferGenericCreate+0x52>
    1208:	96 01       	movw	r18, r12
    120a:	ae 01       	movw	r20, r28
    120c:	b7 01       	movw	r22, r14
    120e:	61 5f       	subi	r22, 0xF1	; 241
    1210:	7f 4f       	sbci	r23, 0xFF	; 255
    1212:	c7 01       	movw	r24, r14
    1214:	a7 de       	rcall	.-690    	; 0xf64 <prvInitialiseNewStreamBuffer>
    1216:	c7 01       	movw	r24, r14
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	0f 91       	pop	r16
    121e:	ff 90       	pop	r15
    1220:	ef 90       	pop	r14
    1222:	df 90       	pop	r13
    1224:	cf 90       	pop	r12
    1226:	08 95       	ret

00001228 <xStreamBufferReset>:
    1228:	0f 93       	push	r16
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	0f 92       	push	r0
    1230:	fc 01       	movw	r30, r24
    1232:	20 85       	ldd	r18, Z+8	; 0x08
    1234:	31 85       	ldd	r19, Z+9	; 0x09
    1236:	23 2b       	or	r18, r19
    1238:	71 f4       	brne	.+28     	; 0x1256 <xStreamBufferReset+0x2e>
    123a:	22 85       	ldd	r18, Z+10	; 0x0a
    123c:	33 85       	ldd	r19, Z+11	; 0x0b
    123e:	23 2b       	or	r18, r19
    1240:	61 f4       	brne	.+24     	; 0x125a <xStreamBufferReset+0x32>
    1242:	26 81       	ldd	r18, Z+6	; 0x06
    1244:	37 81       	ldd	r19, Z+7	; 0x07
    1246:	44 81       	ldd	r20, Z+4	; 0x04
    1248:	55 81       	ldd	r21, Z+5	; 0x05
    124a:	64 85       	ldd	r22, Z+12	; 0x0c
    124c:	75 85       	ldd	r23, Z+13	; 0x0d
    124e:	06 85       	ldd	r16, Z+14	; 0x0e
    1250:	89 de       	rcall	.-750    	; 0xf64 <prvInitialiseNewStreamBuffer>
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	03 c0       	rjmp	.+6      	; 0x125c <xStreamBufferReset+0x34>
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	01 c0       	rjmp	.+2      	; 0x125c <xStreamBufferReset+0x34>
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	0f 90       	pop	r0
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	0f 91       	pop	r16
    1262:	08 95       	ret

00001264 <xStreamBufferSpacesAvailable>:
    1264:	fc 01       	movw	r30, r24
    1266:	24 81       	ldd	r18, Z+4	; 0x04
    1268:	35 81       	ldd	r19, Z+5	; 0x05
    126a:	80 81       	ld	r24, Z
    126c:	91 81       	ldd	r25, Z+1	; 0x01
    126e:	82 0f       	add	r24, r18
    1270:	93 1f       	adc	r25, r19
    1272:	42 81       	ldd	r20, Z+2	; 0x02
    1274:	53 81       	ldd	r21, Z+3	; 0x03
    1276:	84 1b       	sub	r24, r20
    1278:	95 0b       	sbc	r25, r21
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	82 17       	cp	r24, r18
    127e:	93 07       	cpc	r25, r19
    1280:	10 f0       	brcs	.+4      	; 0x1286 <xStreamBufferSpacesAvailable+0x22>
    1282:	82 1b       	sub	r24, r18
    1284:	93 0b       	sbc	r25, r19
    1286:	08 95       	ret

00001288 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1288:	2f 92       	push	r2
    128a:	3f 92       	push	r3
    128c:	4f 92       	push	r4
    128e:	5f 92       	push	r5
    1290:	6f 92       	push	r6
    1292:	7f 92       	push	r7
    1294:	8f 92       	push	r8
    1296:	9f 92       	push	r9
    1298:	af 92       	push	r10
    129a:	bf 92       	push	r11
    129c:	cf 92       	push	r12
    129e:	df 92       	push	r13
    12a0:	ef 92       	push	r14
    12a2:	ff 92       	push	r15
    12a4:	0f 93       	push	r16
    12a6:	1f 93       	push	r17
    12a8:	cf 93       	push	r28
    12aa:	df 93       	push	r29
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	2b 97       	sbiw	r28, 0x0b	; 11
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	f8 94       	cli
    12b6:	de bf       	out	0x3e, r29	; 62
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	cd bf       	out	0x3d, r28	; 61
    12bc:	4c 01       	movw	r8, r24
    12be:	7b 87       	std	Y+11, r23	; 0x0b
    12c0:	6a 87       	std	Y+10, r22	; 0x0a
    12c2:	1a 01       	movw	r2, r20
    12c4:	0e 83       	std	Y+6, r16	; 0x06
    12c6:	1f 83       	std	Y+7, r17	; 0x07
    12c8:	28 87       	std	Y+8, r18	; 0x08
    12ca:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    12cc:	fc 01       	movw	r30, r24
    12ce:	84 81       	ldd	r24, Z+4	; 0x04
    12d0:	95 81       	ldd	r25, Z+5	; 0x05
    12d2:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    12d4:	26 85       	ldd	r18, Z+14	; 0x0e
    12d6:	20 ff       	sbrs	r18, 0
    12d8:	0c c0       	rjmp	.+24     	; 0x12f2 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    12da:	2a 01       	movw	r4, r20
    12dc:	f2 e0       	ldi	r31, 0x02	; 2
    12de:	4f 0e       	add	r4, r31
    12e0:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    12e2:	84 15       	cp	r24, r4
    12e4:	95 05       	cpc	r25, r5
    12e6:	58 f4       	brcc	.+22     	; 0x12fe <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    12e8:	1e 82       	std	Y+6, r1	; 0x06
    12ea:	1f 82       	std	Y+7, r1	; 0x07
    12ec:	18 86       	std	Y+8, r1	; 0x08
    12ee:	19 86       	std	Y+9, r1	; 0x09
    12f0:	06 c0       	rjmp	.+12     	; 0x12fe <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    12f2:	84 17       	cp	r24, r20
    12f4:	95 07       	cpc	r25, r21
    12f6:	10 f0       	brcs	.+4      	; 0x12fc <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    12f8:	2a 01       	movw	r4, r20
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    12fc:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    12fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1300:	9f 81       	ldd	r25, Y+7	; 0x07
    1302:	a8 85       	ldd	r26, Y+8	; 0x08
    1304:	b9 85       	ldd	r27, Y+9	; 0x09
    1306:	89 2b       	or	r24, r25
    1308:	8a 2b       	or	r24, r26
    130a:	8b 2b       	or	r24, r27
    130c:	09 f4       	brne	.+2      	; 0x1310 <xStreamBufferSend+0x88>
    130e:	38 c0       	rjmp	.+112    	; 0x1380 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1310:	ce 01       	movw	r24, r28
    1312:	01 96       	adiw	r24, 0x01	; 1
    1314:	0e 94 09 12 	call	0x2412	; 0x2412 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    131e:	c4 01       	movw	r24, r8
    1320:	a1 df       	rcall	.-190    	; 0x1264 <xStreamBufferSpacesAvailable>
    1322:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1324:	84 15       	cp	r24, r4
    1326:	95 05       	cpc	r25, r5
    1328:	40 f5       	brcc	.+80     	; 0x137a <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1334:	0e 94 9a 12 	call	0x2534	; 0x2534 <xTaskGetCurrentTaskHandle>
    1338:	f4 01       	movw	r30, r8
    133a:	93 87       	std	Z+11, r25	; 0x0b
    133c:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    133e:	0f 90       	pop	r0
    1340:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1342:	ae 80       	ldd	r10, Y+6	; 0x06
    1344:	bf 80       	ldd	r11, Y+7	; 0x07
    1346:	c8 84       	ldd	r12, Y+8	; 0x08
    1348:	d9 84       	ldd	r13, Y+9	; 0x09
    134a:	e1 2c       	mov	r14, r1
    134c:	f1 2c       	mov	r15, r1
    134e:	00 e0       	ldi	r16, 0x00	; 0
    1350:	10 e0       	ldi	r17, 0x00	; 0
    1352:	98 01       	movw	r18, r16
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	ba 01       	movw	r22, r20
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	0e 94 08 13 	call	0x2610	; 0x2610 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1360:	f4 01       	movw	r30, r8
    1362:	13 86       	std	Z+11, r1	; 0x0b
    1364:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1366:	be 01       	movw	r22, r28
    1368:	6a 5f       	subi	r22, 0xFA	; 250
    136a:	7f 4f       	sbci	r23, 0xFF	; 255
    136c:	ce 01       	movw	r24, r28
    136e:	01 96       	adiw	r24, 0x01	; 1
    1370:	0e 94 30 12 	call	0x2460	; 0x2460 <xTaskCheckForTimeOut>
    1374:	88 23       	and	r24, r24
    1376:	81 f2       	breq	.-96     	; 0x1318 <xStreamBufferSend+0x90>
    1378:	05 c0       	rjmp	.+10     	; 0x1384 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    137a:	0f 90       	pop	r0
    137c:	0f be       	out	0x3f, r0	; 63
                    break;
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1380:	61 2c       	mov	r6, r1
    1382:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1384:	61 14       	cp	r6, r1
    1386:	71 04       	cpc	r7, r1
    1388:	19 f4       	brne	.+6      	; 0x1390 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    138a:	c4 01       	movw	r24, r8
    138c:	6b df       	rcall	.-298    	; 0x1264 <xStreamBufferSpacesAvailable>
    138e:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1390:	82 01       	movw	r16, r4
    1392:	93 01       	movw	r18, r6
    1394:	a1 01       	movw	r20, r2
    1396:	6a 85       	ldd	r22, Y+10	; 0x0a
    1398:	7b 85       	ldd	r23, Y+11	; 0x0b
    139a:	c4 01       	movw	r24, r8
    139c:	3c de       	rcall	.-904    	; 0x1016 <prvWriteMessageToBuffer>
    139e:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    13a0:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    13a2:	e9 f0       	breq	.+58     	; 0x13de <xStreamBufferSend+0x156>
    13a4:	c4 01       	movw	r24, r8
    13a6:	cb dd       	rcall	.-1130   	; 0xf3e <prvBytesInBuffer>
    13a8:	f4 01       	movw	r30, r8
    13aa:	26 81       	ldd	r18, Z+6	; 0x06
    13ac:	37 81       	ldd	r19, Z+7	; 0x07
    13ae:	82 17       	cp	r24, r18
    13b0:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    13b2:	a8 f0       	brcs	.+42     	; 0x13de <xStreamBufferSend+0x156>
    13b4:	8b d3       	rcall	.+1814   	; 0x1acc <vTaskSuspendAll>
    13b6:	f4 01       	movw	r30, r8
    13b8:	80 85       	ldd	r24, Z+8	; 0x08
    13ba:	91 85       	ldd	r25, Z+9	; 0x09
    13bc:	89 2b       	or	r24, r25
    13be:	71 f0       	breq	.+28     	; 0x13dc <xStreamBufferSend+0x154>
    13c0:	80 85       	ldd	r24, Z+8	; 0x08
    13c2:	91 85       	ldd	r25, Z+9	; 0x09
    13c4:	e1 2c       	mov	r14, r1
    13c6:	f1 2c       	mov	r15, r1
    13c8:	00 e0       	ldi	r16, 0x00	; 0
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	a9 01       	movw	r20, r18
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	0e 94 af 13 	call	0x275e	; 0x275e <xTaskGenericNotify>
    13d6:	f4 01       	movw	r30, r8
    13d8:	11 86       	std	Z+9, r1	; 0x09
    13da:	10 86       	std	Z+8, r1	; 0x08
    13dc:	b7 d4       	rcall	.+2414   	; 0x1d4c <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    13de:	c6 01       	movw	r24, r12
    13e0:	2b 96       	adiw	r28, 0x0b	; 11
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	1f 91       	pop	r17
    13f2:	0f 91       	pop	r16
    13f4:	ff 90       	pop	r15
    13f6:	ef 90       	pop	r14
    13f8:	df 90       	pop	r13
    13fa:	cf 90       	pop	r12
    13fc:	bf 90       	pop	r11
    13fe:	af 90       	pop	r10
    1400:	9f 90       	pop	r9
    1402:	8f 90       	pop	r8
    1404:	7f 90       	pop	r7
    1406:	6f 90       	pop	r6
    1408:	5f 90       	pop	r5
    140a:	4f 90       	pop	r4
    140c:	3f 90       	pop	r3
    140e:	2f 90       	pop	r2
    1410:	08 95       	ret

00001412 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1412:	af 92       	push	r10
    1414:	bf 92       	push	r11
    1416:	cf 92       	push	r12
    1418:	df 92       	push	r13
    141a:	ef 92       	push	r14
    141c:	ff 92       	push	r15
    141e:	0f 93       	push	r16
    1420:	1f 93       	push	r17
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	ec 01       	movw	r28, r24
    1428:	7b 01       	movw	r14, r22
    142a:	5a 01       	movw	r10, r20
    142c:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    142e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1430:	80 ff       	sbrs	r24, 0
    1432:	04 c0       	rjmp	.+8      	; 0x143c <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1434:	8a 01       	movw	r16, r20
    1436:	0e 5f       	subi	r16, 0xFE	; 254
    1438:	1f 4f       	sbci	r17, 0xFF	; 255
    143a:	01 c0       	rjmp	.+2      	; 0x143e <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    143c:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    143e:	ce 01       	movw	r24, r28
    1440:	11 df       	rcall	.-478    	; 0x1264 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1442:	9c 01       	movw	r18, r24
    1444:	a5 01       	movw	r20, r10
    1446:	b7 01       	movw	r22, r14
    1448:	ce 01       	movw	r24, r28
    144a:	e5 dd       	rcall	.-1078   	; 0x1016 <prvWriteMessageToBuffer>
    144c:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    144e:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1450:	c1 f0       	breq	.+48     	; 0x1482 <xStreamBufferSendFromISR+0x70>
    1452:	ce 01       	movw	r24, r28
    1454:	74 dd       	rcall	.-1304   	; 0xf3e <prvBytesInBuffer>
    1456:	2e 81       	ldd	r18, Y+6	; 0x06
    1458:	3f 81       	ldd	r19, Y+7	; 0x07
    145a:	82 17       	cp	r24, r18
    145c:	93 07       	cpc	r25, r19
    145e:	88 f0       	brcs	.+34     	; 0x1482 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1460:	88 85       	ldd	r24, Y+8	; 0x08
    1462:	99 85       	ldd	r25, Y+9	; 0x09
    1464:	89 2b       	or	r24, r25
    1466:	69 f0       	breq	.+26     	; 0x1482 <xStreamBufferSendFromISR+0x70>
    1468:	88 85       	ldd	r24, Y+8	; 0x08
    146a:	99 85       	ldd	r25, Y+9	; 0x09
    146c:	e1 2c       	mov	r14, r1
    146e:	f1 2c       	mov	r15, r1
    1470:	00 e0       	ldi	r16, 0x00	; 0
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	a9 01       	movw	r20, r18
    1478:	60 e0       	ldi	r22, 0x00	; 0
    147a:	0e 94 a6 14 	call	0x294c	; 0x294c <xTaskGenericNotifyFromISR>
    147e:	19 86       	std	Y+9, r1	; 0x09
    1480:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1482:	c5 01       	movw	r24, r10
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	1f 91       	pop	r17
    148a:	0f 91       	pop	r16
    148c:	ff 90       	pop	r15
    148e:	ef 90       	pop	r14
    1490:	df 90       	pop	r13
    1492:	cf 90       	pop	r12
    1494:	bf 90       	pop	r11
    1496:	af 90       	pop	r10
    1498:	08 95       	ret

0000149a <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    149a:	4f 92       	push	r4
    149c:	5f 92       	push	r5
    149e:	6f 92       	push	r6
    14a0:	7f 92       	push	r7
    14a2:	8f 92       	push	r8
    14a4:	9f 92       	push	r9
    14a6:	af 92       	push	r10
    14a8:	bf 92       	push	r11
    14aa:	cf 92       	push	r12
    14ac:	df 92       	push	r13
    14ae:	ef 92       	push	r14
    14b0:	ff 92       	push	r15
    14b2:	0f 93       	push	r16
    14b4:	1f 93       	push	r17
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	ec 01       	movw	r28, r24
    14bc:	2b 01       	movw	r4, r22
    14be:	3a 01       	movw	r6, r20
    14c0:	58 01       	movw	r10, r16
    14c2:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    14c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    14c6:	80 ff       	sbrs	r24, 0
    14c8:	05 c0       	rjmp	.+10     	; 0x14d4 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    14ca:	68 94       	set
    14cc:	88 24       	eor	r8, r8
    14ce:	81 f8       	bld	r8, 1
    14d0:	91 2c       	mov	r9, r1
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    14d4:	81 2c       	mov	r8, r1
    14d6:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    14d8:	a1 14       	cp	r10, r1
    14da:	b1 04       	cpc	r11, r1
    14dc:	c1 04       	cpc	r12, r1
    14de:	d1 04       	cpc	r13, r1
    14e0:	41 f1       	breq	.+80     	; 0x1532 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    14e8:	ce 01       	movw	r24, r28
    14ea:	29 dd       	rcall	.-1454   	; 0xf3e <prvBytesInBuffer>
    14ec:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    14ee:	88 16       	cp	r8, r24
    14f0:	99 06       	cpc	r9, r25
    14f2:	48 f0       	brcs	.+18     	; 0x1506 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    14f4:	60 e0       	ldi	r22, 0x00	; 0
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    14fe:	0e 94 9a 12 	call	0x2534	; 0x2534 <xTaskGetCurrentTaskHandle>
    1502:	99 87       	std	Y+9, r25	; 0x09
    1504:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1506:	0f 90       	pop	r0
    1508:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    150a:	8e 14       	cp	r8, r14
    150c:	9f 04       	cpc	r9, r15
    150e:	a0 f0       	brcs	.+40     	; 0x1538 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1510:	e1 2c       	mov	r14, r1
    1512:	f1 2c       	mov	r15, r1
    1514:	00 e0       	ldi	r16, 0x00	; 0
    1516:	10 e0       	ldi	r17, 0x00	; 0
    1518:	98 01       	movw	r18, r16
    151a:	40 e0       	ldi	r20, 0x00	; 0
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	ba 01       	movw	r22, r20
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	0e 94 08 13 	call	0x2610	; 0x2610 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1526:	19 86       	std	Y+9, r1	; 0x09
    1528:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    152a:	ce 01       	movw	r24, r28
    152c:	08 dd       	rcall	.-1520   	; 0xf3e <prvBytesInBuffer>
    152e:	7c 01       	movw	r14, r24
    1530:	03 c0       	rjmp	.+6      	; 0x1538 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1532:	ce 01       	movw	r24, r28
    1534:	04 dd       	rcall	.-1528   	; 0xf3e <prvBytesInBuffer>
    1536:	7c 01       	movw	r14, r24
    1538:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    153a:	9f 04       	cpc	r9, r15
    153c:	e8 f4       	brcc	.+58     	; 0x1578 <xStreamBufferReceive+0xde>
    153e:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1540:	97 01       	movw	r18, r14
    1542:	a3 01       	movw	r20, r6
    1544:	b2 01       	movw	r22, r4
    1546:	ce 01       	movw	r24, r28
    1548:	f8 dd       	rcall	.-1040   	; 0x113a <prvReadMessageFromBuffer>
    154a:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    154c:	89 2b       	or	r24, r25
    154e:	b1 f0       	breq	.+44     	; 0x157c <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1550:	bd d2       	rcall	.+1402   	; 0x1acc <vTaskSuspendAll>
    1552:	8a 85       	ldd	r24, Y+10	; 0x0a
    1554:	9b 85       	ldd	r25, Y+11	; 0x0b
    1556:	89 2b       	or	r24, r25
    1558:	69 f0       	breq	.+26     	; 0x1574 <xStreamBufferReceive+0xda>
    155a:	8a 85       	ldd	r24, Y+10	; 0x0a
    155c:	9b 85       	ldd	r25, Y+11	; 0x0b
    155e:	e1 2c       	mov	r14, r1
    1560:	f1 2c       	mov	r15, r1
    1562:	00 e0       	ldi	r16, 0x00	; 0
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	a9 01       	movw	r20, r18
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	0e 94 af 13 	call	0x275e	; 0x275e <xTaskGenericNotify>
    1570:	1b 86       	std	Y+11, r1	; 0x0b
    1572:	1a 86       	std	Y+10, r1	; 0x0a
    1574:	eb d3       	rcall	.+2006   	; 0x1d4c <xTaskResumeAll>
    1576:	02 c0       	rjmp	.+4      	; 0x157c <xStreamBufferReceive+0xe2>
    1578:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    157a:	d1 2c       	mov	r13, r1
    157c:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	1f 91       	pop	r17
    1584:	0f 91       	pop	r16
    1586:	ff 90       	pop	r15
    1588:	ef 90       	pop	r14
    158a:	df 90       	pop	r13
    158c:	cf 90       	pop	r12
    158e:	bf 90       	pop	r11
    1590:	af 90       	pop	r10
    1592:	9f 90       	pop	r9
    1594:	8f 90       	pop	r8
    1596:	7f 90       	pop	r7
    1598:	6f 90       	pop	r6
    159a:	5f 90       	pop	r5
    159c:	4f 90       	pop	r4
    159e:	08 95       	ret

000015a0 <prvResetNextTaskUnblockTime>:
    15a0:	e0 91 63 14 	lds	r30, 0x1463	; 0x801463 <pxDelayedTaskList>
    15a4:	f0 91 64 14 	lds	r31, 0x1464	; 0x801464 <pxDelayedTaskList+0x1>
    15a8:	80 81       	ld	r24, Z
    15aa:	81 11       	cpse	r24, r1
    15ac:	0c c0       	rjmp	.+24     	; 0x15c6 <prvResetNextTaskUnblockTime+0x26>
    15ae:	8f ef       	ldi	r24, 0xFF	; 255
    15b0:	9f ef       	ldi	r25, 0xFF	; 255
    15b2:	dc 01       	movw	r26, r24
    15b4:	80 93 2d 14 	sts	0x142D, r24	; 0x80142d <xNextTaskUnblockTime>
    15b8:	90 93 2e 14 	sts	0x142E, r25	; 0x80142e <xNextTaskUnblockTime+0x1>
    15bc:	a0 93 2f 14 	sts	0x142F, r26	; 0x80142f <xNextTaskUnblockTime+0x2>
    15c0:	b0 93 30 14 	sts	0x1430, r27	; 0x801430 <xNextTaskUnblockTime+0x3>
    15c4:	08 95       	ret
    15c6:	e0 91 63 14 	lds	r30, 0x1463	; 0x801463 <pxDelayedTaskList>
    15ca:	f0 91 64 14 	lds	r31, 0x1464	; 0x801464 <pxDelayedTaskList+0x1>
    15ce:	07 80       	ldd	r0, Z+7	; 0x07
    15d0:	f0 85       	ldd	r31, Z+8	; 0x08
    15d2:	e0 2d       	mov	r30, r0
    15d4:	80 81       	ld	r24, Z
    15d6:	91 81       	ldd	r25, Z+1	; 0x01
    15d8:	a2 81       	ldd	r26, Z+2	; 0x02
    15da:	b3 81       	ldd	r27, Z+3	; 0x03
    15dc:	80 93 2d 14 	sts	0x142D, r24	; 0x80142d <xNextTaskUnblockTime>
    15e0:	90 93 2e 14 	sts	0x142E, r25	; 0x80142e <xNextTaskUnblockTime+0x1>
    15e4:	a0 93 2f 14 	sts	0x142F, r26	; 0x80142f <xNextTaskUnblockTime+0x2>
    15e8:	b0 93 30 14 	sts	0x1430, r27	; 0x801430 <xNextTaskUnblockTime+0x3>
    15ec:	08 95       	ret

000015ee <prvDeleteTCB>:
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	ec 01       	movw	r28, r24
    15f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15f8:	18 d8       	rcall	.-4048   	; 0x62a <vPortFree>
    15fa:	ce 01       	movw	r24, r28
    15fc:	16 d8       	rcall	.-4052   	; 0x62a <vPortFree>
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	08 95       	ret

00001604 <prvInitialiseNewTask>:
    1604:	4f 92       	push	r4
    1606:	5f 92       	push	r5
    1608:	6f 92       	push	r6
    160a:	7f 92       	push	r7
    160c:	8f 92       	push	r8
    160e:	9f 92       	push	r9
    1610:	af 92       	push	r10
    1612:	bf 92       	push	r11
    1614:	cf 92       	push	r12
    1616:	df 92       	push	r13
    1618:	ef 92       	push	r14
    161a:	ff 92       	push	r15
    161c:	0f 93       	push	r16
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	2c 01       	movw	r4, r24
    1624:	5b 01       	movw	r10, r22
    1626:	4a 01       	movw	r8, r20
    1628:	39 01       	movw	r6, r18
    162a:	e6 01       	movw	r28, r12
    162c:	65 ea       	ldi	r22, 0xA5	; 165
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1632:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1634:	0e 94 95 2b 	call	0x572a	; 0x572a <memset>
    1638:	8b 8d       	ldd	r24, Y+27	; 0x1b
    163a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    163c:	21 e0       	ldi	r18, 0x01	; 1
    163e:	82 1a       	sub	r8, r18
    1640:	91 08       	sbc	r9, r1
    1642:	88 0e       	add	r8, r24
    1644:	99 1e       	adc	r9, r25
    1646:	a1 14       	cp	r10, r1
    1648:	b1 04       	cpc	r11, r1
    164a:	89 f4       	brne	.+34     	; 0x166e <prvInitialiseNewTask+0x6a>
    164c:	15 c0       	rjmp	.+42     	; 0x1678 <prvInitialiseNewTask+0x74>
    164e:	82 2f       	mov	r24, r18
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	f5 01       	movw	r30, r10
    1654:	e8 0f       	add	r30, r24
    1656:	f9 1f       	adc	r31, r25
    1658:	30 81       	ld	r19, Z
    165a:	de 01       	movw	r26, r28
    165c:	a8 0f       	add	r26, r24
    165e:	b9 1f       	adc	r27, r25
    1660:	5d 96       	adiw	r26, 0x1d	; 29
    1662:	3c 93       	st	X, r19
    1664:	80 81       	ld	r24, Z
    1666:	88 23       	and	r24, r24
    1668:	29 f0       	breq	.+10     	; 0x1674 <prvInitialiseNewTask+0x70>
    166a:	2f 5f       	subi	r18, 0xFF	; 255
    166c:	01 c0       	rjmp	.+2      	; 0x1670 <prvInitialiseNewTask+0x6c>
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	20 31       	cpi	r18, 0x10	; 16
    1672:	68 f3       	brcs	.-38     	; 0x164e <prvInitialiseNewTask+0x4a>
    1674:	1c a6       	std	Y+44, r1	; 0x2c
    1676:	01 c0       	rjmp	.+2      	; 0x167a <prvInitialiseNewTask+0x76>
    1678:	1d 8e       	std	Y+29, r1	; 0x1d
    167a:	0a 30       	cpi	r16, 0x0A	; 10
    167c:	08 f0       	brcs	.+2      	; 0x1680 <prvInitialiseNewTask+0x7c>
    167e:	09 e0       	ldi	r16, 0x09	; 9
    1680:	0a 8f       	std	Y+26, r16	; 0x1a
    1682:	0d a7       	std	Y+45, r16	; 0x2d
    1684:	1e a6       	std	Y+46, r1	; 0x2e
    1686:	ce 01       	movw	r24, r28
    1688:	02 96       	adiw	r24, 0x02	; 2
    168a:	1d d8       	rcall	.-4038   	; 0x6c6 <vListInitialiseItem>
    168c:	ce 01       	movw	r24, r28
    168e:	0e 96       	adiw	r24, 0x0e	; 14
    1690:	1a d8       	rcall	.-4044   	; 0x6c6 <vListInitialiseItem>
    1692:	db 87       	std	Y+11, r29	; 0x0b
    1694:	ca 87       	std	Y+10, r28	; 0x0a
    1696:	8a e0       	ldi	r24, 0x0A	; 10
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	a0 e0       	ldi	r26, 0x00	; 0
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	80 1b       	sub	r24, r16
    16a0:	91 09       	sbc	r25, r1
    16a2:	a1 09       	sbc	r26, r1
    16a4:	b1 09       	sbc	r27, r1
    16a6:	8e 87       	std	Y+14, r24	; 0x0e
    16a8:	9f 87       	std	Y+15, r25	; 0x0f
    16aa:	a8 8b       	std	Y+16, r26	; 0x10
    16ac:	b9 8b       	std	Y+17, r27	; 0x11
    16ae:	df 8b       	std	Y+23, r29	; 0x17
    16b0:	ce 8b       	std	Y+22, r28	; 0x16
    16b2:	84 e0       	ldi	r24, 0x04	; 4
    16b4:	fe 01       	movw	r30, r28
    16b6:	bf 96       	adiw	r30, 0x2f	; 47
    16b8:	df 01       	movw	r26, r30
    16ba:	1d 92       	st	X+, r1
    16bc:	8a 95       	dec	r24
    16be:	e9 f7       	brne	.-6      	; 0x16ba <prvInitialiseNewTask+0xb6>
    16c0:	1b aa       	std	Y+51, r1	; 0x33
    16c2:	a3 01       	movw	r20, r6
    16c4:	b2 01       	movw	r22, r4
    16c6:	c4 01       	movw	r24, r8
    16c8:	72 d8       	rcall	.-3868   	; 0x7ae <pxPortInitialiseStack>
    16ca:	99 83       	std	Y+1, r25	; 0x01
    16cc:	88 83       	st	Y, r24
    16ce:	e1 14       	cp	r14, r1
    16d0:	f1 04       	cpc	r15, r1
    16d2:	19 f0       	breq	.+6      	; 0x16da <prvInitialiseNewTask+0xd6>
    16d4:	f7 01       	movw	r30, r14
    16d6:	d1 83       	std	Z+1, r29	; 0x01
    16d8:	c0 83       	st	Z, r28
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	0f 91       	pop	r16
    16e0:	ff 90       	pop	r15
    16e2:	ef 90       	pop	r14
    16e4:	df 90       	pop	r13
    16e6:	cf 90       	pop	r12
    16e8:	bf 90       	pop	r11
    16ea:	af 90       	pop	r10
    16ec:	9f 90       	pop	r9
    16ee:	8f 90       	pop	r8
    16f0:	7f 90       	pop	r7
    16f2:	6f 90       	pop	r6
    16f4:	5f 90       	pop	r5
    16f6:	4f 90       	pop	r4
    16f8:	08 95       	ret

000016fa <prvInitialiseTaskLists>:
    16fa:	cf 93       	push	r28
    16fc:	c0 e0       	ldi	r28, 0x00	; 0
    16fe:	09 c0       	rjmp	.+18     	; 0x1712 <prvInitialiseTaskLists+0x18>
    1700:	2b e0       	ldi	r18, 0x0B	; 11
    1702:	c2 9f       	mul	r28, r18
    1704:	c0 01       	movw	r24, r0
    1706:	11 24       	eor	r1, r1
    1708:	85 58       	subi	r24, 0x85	; 133
    170a:	9b 4e       	sbci	r25, 0xEB	; 235
    170c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <vListInitialise>
    1710:	cf 5f       	subi	r28, 0xFF	; 255
    1712:	ca 30       	cpi	r28, 0x0A	; 10
    1714:	a8 f3       	brcs	.-22     	; 0x1700 <prvInitialiseTaskLists+0x6>
    1716:	80 e7       	ldi	r24, 0x70	; 112
    1718:	94 e1       	ldi	r25, 0x14	; 20
    171a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <vListInitialise>
    171e:	85 e6       	ldi	r24, 0x65	; 101
    1720:	94 e1       	ldi	r25, 0x14	; 20
    1722:	0e 94 52 03 	call	0x6a4	; 0x6a4 <vListInitialise>
    1726:	86 e5       	ldi	r24, 0x56	; 86
    1728:	94 e1       	ldi	r25, 0x14	; 20
    172a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <vListInitialise>
    172e:	8b e4       	ldi	r24, 0x4B	; 75
    1730:	94 e1       	ldi	r25, 0x14	; 20
    1732:	0e 94 52 03 	call	0x6a4	; 0x6a4 <vListInitialise>
    1736:	8f e3       	ldi	r24, 0x3F	; 63
    1738:	94 e1       	ldi	r25, 0x14	; 20
    173a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <vListInitialise>
    173e:	80 e7       	ldi	r24, 0x70	; 112
    1740:	94 e1       	ldi	r25, 0x14	; 20
    1742:	90 93 64 14 	sts	0x1464, r25	; 0x801464 <pxDelayedTaskList+0x1>
    1746:	80 93 63 14 	sts	0x1463, r24	; 0x801463 <pxDelayedTaskList>
    174a:	85 e6       	ldi	r24, 0x65	; 101
    174c:	94 e1       	ldi	r25, 0x14	; 20
    174e:	90 93 62 14 	sts	0x1462, r25	; 0x801462 <pxOverflowDelayedTaskList+0x1>
    1752:	80 93 61 14 	sts	0x1461, r24	; 0x801461 <pxOverflowDelayedTaskList>
    1756:	cf 91       	pop	r28
    1758:	08 95       	ret

0000175a <prvAddNewTaskToReadyList>:
    175a:	cf 93       	push	r28
    175c:	df 93       	push	r29
    175e:	ec 01       	movw	r28, r24
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	0f 92       	push	r0
    1766:	80 91 3e 14 	lds	r24, 0x143E	; 0x80143e <uxCurrentNumberOfTasks>
    176a:	8f 5f       	subi	r24, 0xFF	; 255
    176c:	80 93 3e 14 	sts	0x143E, r24	; 0x80143e <uxCurrentNumberOfTasks>
    1770:	80 91 e9 14 	lds	r24, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    1774:	90 91 ea 14 	lds	r25, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    1778:	89 2b       	or	r24, r25
    177a:	51 f4       	brne	.+20     	; 0x1790 <prvAddNewTaskToReadyList+0x36>
    177c:	d0 93 ea 14 	sts	0x14EA, r29	; 0x8014ea <pxCurrentTCB+0x1>
    1780:	c0 93 e9 14 	sts	0x14E9, r28	; 0x8014e9 <pxCurrentTCB>
    1784:	80 91 3e 14 	lds	r24, 0x143E	; 0x80143e <uxCurrentNumberOfTasks>
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	91 f4       	brne	.+36     	; 0x17b0 <prvAddNewTaskToReadyList+0x56>
    178c:	b6 df       	rcall	.-148    	; 0x16fa <prvInitialiseTaskLists>
    178e:	10 c0       	rjmp	.+32     	; 0x17b0 <prvAddNewTaskToReadyList+0x56>
    1790:	80 91 38 14 	lds	r24, 0x1438	; 0x801438 <xSchedulerRunning>
    1794:	81 11       	cpse	r24, r1
    1796:	0c c0       	rjmp	.+24     	; 0x17b0 <prvAddNewTaskToReadyList+0x56>
    1798:	e0 91 e9 14 	lds	r30, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    179c:	f0 91 ea 14 	lds	r31, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    17a0:	92 8d       	ldd	r25, Z+26	; 0x1a
    17a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17a4:	89 17       	cp	r24, r25
    17a6:	20 f0       	brcs	.+8      	; 0x17b0 <prvAddNewTaskToReadyList+0x56>
    17a8:	d0 93 ea 14 	sts	0x14EA, r29	; 0x8014ea <pxCurrentTCB+0x1>
    17ac:	c0 93 e9 14 	sts	0x14E9, r28	; 0x8014e9 <pxCurrentTCB>
    17b0:	80 91 31 14 	lds	r24, 0x1431	; 0x801431 <uxTaskNumber>
    17b4:	8f 5f       	subi	r24, 0xFF	; 255
    17b6:	80 93 31 14 	sts	0x1431, r24	; 0x801431 <uxTaskNumber>
    17ba:	ea 8d       	ldd	r30, Y+26	; 0x1a
    17bc:	80 91 39 14 	lds	r24, 0x1439	; 0x801439 <uxTopReadyPriority>
    17c0:	8e 17       	cp	r24, r30
    17c2:	10 f4       	brcc	.+4      	; 0x17c8 <prvAddNewTaskToReadyList+0x6e>
    17c4:	e0 93 39 14 	sts	0x1439, r30	; 0x801439 <uxTopReadyPriority>
    17c8:	8b e0       	ldi	r24, 0x0B	; 11
    17ca:	8e 9f       	mul	r24, r30
    17cc:	f0 01       	movw	r30, r0
    17ce:	11 24       	eor	r1, r1
    17d0:	e5 58       	subi	r30, 0x85	; 133
    17d2:	fb 4e       	sbci	r31, 0xEB	; 235
    17d4:	01 80       	ldd	r0, Z+1	; 0x01
    17d6:	f2 81       	ldd	r31, Z+2	; 0x02
    17d8:	e0 2d       	mov	r30, r0
    17da:	ff 83       	std	Y+7, r31	; 0x07
    17dc:	ee 83       	std	Y+6, r30	; 0x06
    17de:	26 81       	ldd	r18, Z+6	; 0x06
    17e0:	37 81       	ldd	r19, Z+7	; 0x07
    17e2:	39 87       	std	Y+9, r19	; 0x09
    17e4:	28 87       	std	Y+8, r18	; 0x08
    17e6:	a6 81       	ldd	r26, Z+6	; 0x06
    17e8:	b7 81       	ldd	r27, Z+7	; 0x07
    17ea:	9e 01       	movw	r18, r28
    17ec:	2e 5f       	subi	r18, 0xFE	; 254
    17ee:	3f 4f       	sbci	r19, 0xFF	; 255
    17f0:	15 96       	adiw	r26, 0x05	; 5
    17f2:	3c 93       	st	X, r19
    17f4:	2e 93       	st	-X, r18
    17f6:	14 97       	sbiw	r26, 0x04	; 4
    17f8:	37 83       	std	Z+7, r19	; 0x07
    17fa:	26 83       	std	Z+6, r18	; 0x06
    17fc:	ea 8d       	ldd	r30, Y+26	; 0x1a
    17fe:	8e 9f       	mul	r24, r30
    1800:	f0 01       	movw	r30, r0
    1802:	11 24       	eor	r1, r1
    1804:	e5 58       	subi	r30, 0x85	; 133
    1806:	fb 4e       	sbci	r31, 0xEB	; 235
    1808:	fd 87       	std	Y+13, r31	; 0x0d
    180a:	ec 87       	std	Y+12, r30	; 0x0c
    180c:	80 81       	ld	r24, Z
    180e:	8f 5f       	subi	r24, 0xFF	; 255
    1810:	80 83       	st	Z, r24
    1812:	0f 90       	pop	r0
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	80 91 38 14 	lds	r24, 0x1438	; 0x801438 <xSchedulerRunning>
    181a:	88 23       	and	r24, r24
    181c:	49 f0       	breq	.+18     	; 0x1830 <prvAddNewTaskToReadyList+0xd6>
    181e:	e0 91 e9 14 	lds	r30, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    1822:	f0 91 ea 14 	lds	r31, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    1826:	92 8d       	ldd	r25, Z+26	; 0x1a
    1828:	8a 8d       	ldd	r24, Y+26	; 0x1a
    182a:	98 17       	cp	r25, r24
    182c:	08 f4       	brcc	.+2      	; 0x1830 <prvAddNewTaskToReadyList+0xd6>
    182e:	08 d8       	rcall	.-4080   	; 0x840 <vPortYield>
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	08 95       	ret

00001836 <prvCheckTasksWaitingTermination>:
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
    183a:	1b c0       	rjmp	.+54     	; 0x1872 <prvCheckTasksWaitingTermination+0x3c>
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	0f 92       	push	r0
    1842:	e0 91 52 14 	lds	r30, 0x1452	; 0x801452 <xTasksWaitingTermination+0x7>
    1846:	f0 91 53 14 	lds	r31, 0x1453	; 0x801453 <xTasksWaitingTermination+0x8>
    184a:	c0 85       	ldd	r28, Z+8	; 0x08
    184c:	d1 85       	ldd	r29, Z+9	; 0x09
    184e:	ce 01       	movw	r24, r28
    1850:	02 96       	adiw	r24, 0x02	; 2
    1852:	0e 94 a4 03 	call	0x748	; 0x748 <uxListRemove>
    1856:	80 91 3e 14 	lds	r24, 0x143E	; 0x80143e <uxCurrentNumberOfTasks>
    185a:	81 50       	subi	r24, 0x01	; 1
    185c:	80 93 3e 14 	sts	0x143E, r24	; 0x80143e <uxCurrentNumberOfTasks>
    1860:	80 91 4a 14 	lds	r24, 0x144A	; 0x80144a <uxDeletedTasksWaitingCleanUp>
    1864:	81 50       	subi	r24, 0x01	; 1
    1866:	80 93 4a 14 	sts	0x144A, r24	; 0x80144a <uxDeletedTasksWaitingCleanUp>
    186a:	0f 90       	pop	r0
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	ce 01       	movw	r24, r28
    1870:	be de       	rcall	.-644    	; 0x15ee <prvDeleteTCB>
    1872:	80 91 4a 14 	lds	r24, 0x144A	; 0x80144a <uxDeletedTasksWaitingCleanUp>
    1876:	81 11       	cpse	r24, r1
    1878:	e1 cf       	rjmp	.-62     	; 0x183c <prvCheckTasksWaitingTermination+0x6>
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	08 95       	ret

00001880 <prvAddCurrentTaskToDelayedList>:
    1880:	8f 92       	push	r8
    1882:	9f 92       	push	r9
    1884:	af 92       	push	r10
    1886:	bf 92       	push	r11
    1888:	cf 92       	push	r12
    188a:	df 92       	push	r13
    188c:	ef 92       	push	r14
    188e:	ff 92       	push	r15
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	6b 01       	movw	r12, r22
    1896:	7c 01       	movw	r14, r24
    1898:	c4 2f       	mov	r28, r20
    189a:	80 90 3a 14 	lds	r8, 0x143A	; 0x80143a <xTickCount>
    189e:	90 90 3b 14 	lds	r9, 0x143B	; 0x80143b <xTickCount+0x1>
    18a2:	a0 90 3c 14 	lds	r10, 0x143C	; 0x80143c <xTickCount+0x2>
    18a6:	b0 90 3d 14 	lds	r11, 0x143D	; 0x80143d <xTickCount+0x3>
    18aa:	80 91 e9 14 	lds	r24, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    18ae:	90 91 ea 14 	lds	r25, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    18b2:	02 96       	adiw	r24, 0x02	; 2
    18b4:	0e 94 a4 03 	call	0x748	; 0x748 <uxListRemove>
    18b8:	8f ef       	ldi	r24, 0xFF	; 255
    18ba:	c8 16       	cp	r12, r24
    18bc:	d8 06       	cpc	r13, r24
    18be:	e8 06       	cpc	r14, r24
    18c0:	f8 06       	cpc	r15, r24
    18c2:	b1 f5       	brne	.+108    	; 0x1930 <prvAddCurrentTaskToDelayedList+0xb0>
    18c4:	cc 23       	and	r28, r28
    18c6:	a1 f1       	breq	.+104    	; 0x1930 <prvAddCurrentTaskToDelayedList+0xb0>
    18c8:	ef e3       	ldi	r30, 0x3F	; 63
    18ca:	f4 e1       	ldi	r31, 0x14	; 20
    18cc:	a1 81       	ldd	r26, Z+1	; 0x01
    18ce:	b2 81       	ldd	r27, Z+2	; 0x02
    18d0:	c0 91 e9 14 	lds	r28, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    18d4:	d0 91 ea 14 	lds	r29, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    18d8:	bf 83       	std	Y+7, r27	; 0x07
    18da:	ae 83       	std	Y+6, r26	; 0x06
    18dc:	c0 91 e9 14 	lds	r28, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    18e0:	d0 91 ea 14 	lds	r29, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    18e4:	16 96       	adiw	r26, 0x06	; 6
    18e6:	8d 91       	ld	r24, X+
    18e8:	9c 91       	ld	r25, X
    18ea:	17 97       	sbiw	r26, 0x07	; 7
    18ec:	99 87       	std	Y+9, r25	; 0x09
    18ee:	88 87       	std	Y+8, r24	; 0x08
    18f0:	16 96       	adiw	r26, 0x06	; 6
    18f2:	cd 91       	ld	r28, X+
    18f4:	dc 91       	ld	r29, X
    18f6:	17 97       	sbiw	r26, 0x07	; 7
    18f8:	80 91 e9 14 	lds	r24, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    18fc:	90 91 ea 14 	lds	r25, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    1900:	02 96       	adiw	r24, 0x02	; 2
    1902:	9d 83       	std	Y+5, r25	; 0x05
    1904:	8c 83       	std	Y+4, r24	; 0x04
    1906:	80 91 e9 14 	lds	r24, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    190a:	90 91 ea 14 	lds	r25, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    190e:	02 96       	adiw	r24, 0x02	; 2
    1910:	17 96       	adiw	r26, 0x07	; 7
    1912:	9c 93       	st	X, r25
    1914:	8e 93       	st	-X, r24
    1916:	16 97       	sbiw	r26, 0x06	; 6
    1918:	a0 91 e9 14 	lds	r26, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    191c:	b0 91 ea 14 	lds	r27, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    1920:	1d 96       	adiw	r26, 0x0d	; 13
    1922:	fc 93       	st	X, r31
    1924:	ee 93       	st	-X, r30
    1926:	1c 97       	sbiw	r26, 0x0c	; 12
    1928:	80 81       	ld	r24, Z
    192a:	8f 5f       	subi	r24, 0xFF	; 255
    192c:	80 83       	st	Z, r24
    192e:	3f c0       	rjmp	.+126    	; 0x19ae <prvAddCurrentTaskToDelayedList+0x12e>
    1930:	c8 0c       	add	r12, r8
    1932:	d9 1c       	adc	r13, r9
    1934:	ea 1c       	adc	r14, r10
    1936:	fb 1c       	adc	r15, r11
    1938:	e0 91 e9 14 	lds	r30, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    193c:	f0 91 ea 14 	lds	r31, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    1940:	c2 82       	std	Z+2, r12	; 0x02
    1942:	d3 82       	std	Z+3, r13	; 0x03
    1944:	e4 82       	std	Z+4, r14	; 0x04
    1946:	f5 82       	std	Z+5, r15	; 0x05
    1948:	c8 14       	cp	r12, r8
    194a:	d9 04       	cpc	r13, r9
    194c:	ea 04       	cpc	r14, r10
    194e:	fb 04       	cpc	r15, r11
    1950:	68 f4       	brcc	.+26     	; 0x196c <prvAddCurrentTaskToDelayedList+0xec>
    1952:	60 91 e9 14 	lds	r22, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    1956:	70 91 ea 14 	lds	r23, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    195a:	80 91 61 14 	lds	r24, 0x1461	; 0x801461 <pxOverflowDelayedTaskList>
    195e:	90 91 62 14 	lds	r25, 0x1462	; 0x801462 <pxOverflowDelayedTaskList+0x1>
    1962:	6e 5f       	subi	r22, 0xFE	; 254
    1964:	7f 4f       	sbci	r23, 0xFF	; 255
    1966:	0e 94 67 03 	call	0x6ce	; 0x6ce <vListInsert>
    196a:	21 c0       	rjmp	.+66     	; 0x19ae <prvAddCurrentTaskToDelayedList+0x12e>
    196c:	60 91 e9 14 	lds	r22, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    1970:	70 91 ea 14 	lds	r23, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    1974:	80 91 63 14 	lds	r24, 0x1463	; 0x801463 <pxDelayedTaskList>
    1978:	90 91 64 14 	lds	r25, 0x1464	; 0x801464 <pxDelayedTaskList+0x1>
    197c:	6e 5f       	subi	r22, 0xFE	; 254
    197e:	7f 4f       	sbci	r23, 0xFF	; 255
    1980:	0e 94 67 03 	call	0x6ce	; 0x6ce <vListInsert>
    1984:	80 91 2d 14 	lds	r24, 0x142D	; 0x80142d <xNextTaskUnblockTime>
    1988:	90 91 2e 14 	lds	r25, 0x142E	; 0x80142e <xNextTaskUnblockTime+0x1>
    198c:	a0 91 2f 14 	lds	r26, 0x142F	; 0x80142f <xNextTaskUnblockTime+0x2>
    1990:	b0 91 30 14 	lds	r27, 0x1430	; 0x801430 <xNextTaskUnblockTime+0x3>
    1994:	c8 16       	cp	r12, r24
    1996:	d9 06       	cpc	r13, r25
    1998:	ea 06       	cpc	r14, r26
    199a:	fb 06       	cpc	r15, r27
    199c:	40 f4       	brcc	.+16     	; 0x19ae <prvAddCurrentTaskToDelayedList+0x12e>
    199e:	c0 92 2d 14 	sts	0x142D, r12	; 0x80142d <xNextTaskUnblockTime>
    19a2:	d0 92 2e 14 	sts	0x142E, r13	; 0x80142e <xNextTaskUnblockTime+0x1>
    19a6:	e0 92 2f 14 	sts	0x142F, r14	; 0x80142f <xNextTaskUnblockTime+0x2>
    19aa:	f0 92 30 14 	sts	0x1430, r15	; 0x801430 <xNextTaskUnblockTime+0x3>
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	ff 90       	pop	r15
    19b4:	ef 90       	pop	r14
    19b6:	df 90       	pop	r13
    19b8:	cf 90       	pop	r12
    19ba:	bf 90       	pop	r11
    19bc:	af 90       	pop	r10
    19be:	9f 90       	pop	r9
    19c0:	8f 90       	pop	r8
    19c2:	08 95       	ret

000019c4 <xTaskCreate>:
    19c4:	2f 92       	push	r2
    19c6:	3f 92       	push	r3
    19c8:	4f 92       	push	r4
    19ca:	5f 92       	push	r5
    19cc:	6f 92       	push	r6
    19ce:	7f 92       	push	r7
    19d0:	8f 92       	push	r8
    19d2:	9f 92       	push	r9
    19d4:	af 92       	push	r10
    19d6:	bf 92       	push	r11
    19d8:	cf 92       	push	r12
    19da:	df 92       	push	r13
    19dc:	ef 92       	push	r14
    19de:	ff 92       	push	r15
    19e0:	0f 93       	push	r16
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	3c 01       	movw	r6, r24
    19e8:	1b 01       	movw	r2, r22
    19ea:	4a 01       	movw	r8, r20
    19ec:	29 01       	movw	r4, r18
    19ee:	ca 01       	movw	r24, r20
    19f0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <pvPortMalloc>
    19f4:	6c 01       	movw	r12, r24
    19f6:	89 2b       	or	r24, r25
    19f8:	71 f0       	breq	.+28     	; 0x1a16 <xTaskCreate+0x52>
    19fa:	84 e3       	ldi	r24, 0x34	; 52
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <pvPortMalloc>
    1a02:	ec 01       	movw	r28, r24
    1a04:	89 2b       	or	r24, r25
    1a06:	19 f0       	breq	.+6      	; 0x1a0e <xTaskCreate+0x4a>
    1a08:	dc 8e       	std	Y+28, r13	; 0x1c
    1a0a:	cb 8e       	std	Y+27, r12	; 0x1b
    1a0c:	06 c0       	rjmp	.+12     	; 0x1a1a <xTaskCreate+0x56>
    1a0e:	c6 01       	movw	r24, r12
    1a10:	0e 94 15 03 	call	0x62a	; 0x62a <vPortFree>
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <xTaskCreate+0x56>
    1a16:	c0 e0       	ldi	r28, 0x00	; 0
    1a18:	d0 e0       	ldi	r29, 0x00	; 0
    1a1a:	20 97       	sbiw	r28, 0x00	; 0
    1a1c:	61 f0       	breq	.+24     	; 0x1a36 <xTaskCreate+0x72>
    1a1e:	a1 2c       	mov	r10, r1
    1a20:	b1 2c       	mov	r11, r1
    1a22:	6e 01       	movw	r12, r28
    1a24:	92 01       	movw	r18, r4
    1a26:	a4 01       	movw	r20, r8
    1a28:	b1 01       	movw	r22, r2
    1a2a:	c3 01       	movw	r24, r6
    1a2c:	eb dd       	rcall	.-1066   	; 0x1604 <prvInitialiseNewTask>
    1a2e:	ce 01       	movw	r24, r28
    1a30:	94 de       	rcall	.-728    	; 0x175a <prvAddNewTaskToReadyList>
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	01 c0       	rjmp	.+2      	; 0x1a38 <xTaskCreate+0x74>
    1a36:	8f ef       	ldi	r24, 0xFF	; 255
    1a38:	df 91       	pop	r29
    1a3a:	cf 91       	pop	r28
    1a3c:	0f 91       	pop	r16
    1a3e:	ff 90       	pop	r15
    1a40:	ef 90       	pop	r14
    1a42:	df 90       	pop	r13
    1a44:	cf 90       	pop	r12
    1a46:	bf 90       	pop	r11
    1a48:	af 90       	pop	r10
    1a4a:	9f 90       	pop	r9
    1a4c:	8f 90       	pop	r8
    1a4e:	7f 90       	pop	r7
    1a50:	6f 90       	pop	r6
    1a52:	5f 90       	pop	r5
    1a54:	4f 90       	pop	r4
    1a56:	3f 90       	pop	r3
    1a58:	2f 90       	pop	r2
    1a5a:	08 95       	ret

00001a5c <vTaskStartScheduler>:
    1a5c:	ef 92       	push	r14
    1a5e:	ff 92       	push	r15
    1a60:	0f 93       	push	r16
    1a62:	0f 2e       	mov	r0, r31
    1a64:	fb e2       	ldi	r31, 0x2B	; 43
    1a66:	ef 2e       	mov	r14, r31
    1a68:	f4 e1       	ldi	r31, 0x14	; 20
    1a6a:	ff 2e       	mov	r15, r31
    1a6c:	f0 2d       	mov	r31, r0
    1a6e:	00 e0       	ldi	r16, 0x00	; 0
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	40 ec       	ldi	r20, 0xC0	; 192
    1a76:	50 e0       	ldi	r21, 0x00	; 0
    1a78:	6c e9       	ldi	r22, 0x9C	; 156
    1a7a:	72 e0       	ldi	r23, 0x02	; 2
    1a7c:	8d ec       	ldi	r24, 0xCD	; 205
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	a1 df       	rcall	.-190    	; 0x19c4 <xTaskCreate>
    1a82:	81 30       	cpi	r24, 0x01	; 1
    1a84:	11 f4       	brne	.+4      	; 0x1a8a <vTaskStartScheduler+0x2e>
    1a86:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <xTimerCreateTimerTask>
    1a8a:	81 30       	cpi	r24, 0x01	; 1
    1a8c:	c9 f4       	brne	.+50     	; 0x1ac0 <vTaskStartScheduler+0x64>
    1a8e:	f8 94       	cli
    1a90:	8f ef       	ldi	r24, 0xFF	; 255
    1a92:	9f ef       	ldi	r25, 0xFF	; 255
    1a94:	dc 01       	movw	r26, r24
    1a96:	80 93 2d 14 	sts	0x142D, r24	; 0x80142d <xNextTaskUnblockTime>
    1a9a:	90 93 2e 14 	sts	0x142E, r25	; 0x80142e <xNextTaskUnblockTime+0x1>
    1a9e:	a0 93 2f 14 	sts	0x142F, r26	; 0x80142f <xNextTaskUnblockTime+0x2>
    1aa2:	b0 93 30 14 	sts	0x1430, r27	; 0x801430 <xNextTaskUnblockTime+0x3>
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	80 93 38 14 	sts	0x1438, r24	; 0x801438 <xSchedulerRunning>
    1aac:	10 92 3a 14 	sts	0x143A, r1	; 0x80143a <xTickCount>
    1ab0:	10 92 3b 14 	sts	0x143B, r1	; 0x80143b <xTickCount+0x1>
    1ab4:	10 92 3c 14 	sts	0x143C, r1	; 0x80143c <xTickCount+0x2>
    1ab8:	10 92 3d 14 	sts	0x143D, r1	; 0x80143d <xTickCount+0x3>
    1abc:	0e 94 ee 03 	call	0x7dc	; 0x7dc <xPortStartScheduler>
    1ac0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1ac4:	0f 91       	pop	r16
    1ac6:	ff 90       	pop	r15
    1ac8:	ef 90       	pop	r14
    1aca:	08 95       	ret

00001acc <vTaskSuspendAll>:
    1acc:	80 91 2a 14 	lds	r24, 0x142A	; 0x80142a <uxSchedulerSuspended>
    1ad0:	8f 5f       	subi	r24, 0xFF	; 255
    1ad2:	80 93 2a 14 	sts	0x142A, r24	; 0x80142a <uxSchedulerSuspended>
    1ad6:	08 95       	ret

00001ad8 <xTaskGetTickCount>:
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	0f 92       	push	r0
    1ade:	60 91 3a 14 	lds	r22, 0x143A	; 0x80143a <xTickCount>
    1ae2:	70 91 3b 14 	lds	r23, 0x143B	; 0x80143b <xTickCount+0x1>
    1ae6:	80 91 3c 14 	lds	r24, 0x143C	; 0x80143c <xTickCount+0x2>
    1aea:	90 91 3d 14 	lds	r25, 0x143D	; 0x80143d <xTickCount+0x3>
    1aee:	0f 90       	pop	r0
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	08 95       	ret

00001af4 <xTaskIncrementTick>:
    1af4:	cf 92       	push	r12
    1af6:	df 92       	push	r13
    1af8:	ef 92       	push	r14
    1afa:	ff 92       	push	r15
    1afc:	cf 93       	push	r28
    1afe:	df 93       	push	r29
    1b00:	80 91 2a 14 	lds	r24, 0x142A	; 0x80142a <uxSchedulerSuspended>
    1b04:	81 11       	cpse	r24, r1
    1b06:	05 c1       	rjmp	.+522    	; 0x1d12 <xTaskIncrementTick+0x21e>
    1b08:	c0 90 3a 14 	lds	r12, 0x143A	; 0x80143a <xTickCount>
    1b0c:	d0 90 3b 14 	lds	r13, 0x143B	; 0x80143b <xTickCount+0x1>
    1b10:	e0 90 3c 14 	lds	r14, 0x143C	; 0x80143c <xTickCount+0x2>
    1b14:	f0 90 3d 14 	lds	r15, 0x143D	; 0x80143d <xTickCount+0x3>
    1b18:	8f ef       	ldi	r24, 0xFF	; 255
    1b1a:	c8 1a       	sub	r12, r24
    1b1c:	d8 0a       	sbc	r13, r24
    1b1e:	e8 0a       	sbc	r14, r24
    1b20:	f8 0a       	sbc	r15, r24
    1b22:	c0 92 3a 14 	sts	0x143A, r12	; 0x80143a <xTickCount>
    1b26:	d0 92 3b 14 	sts	0x143B, r13	; 0x80143b <xTickCount+0x1>
    1b2a:	e0 92 3c 14 	sts	0x143C, r14	; 0x80143c <xTickCount+0x2>
    1b2e:	f0 92 3d 14 	sts	0x143D, r15	; 0x80143d <xTickCount+0x3>
    1b32:	c1 14       	cp	r12, r1
    1b34:	d1 04       	cpc	r13, r1
    1b36:	e1 04       	cpc	r14, r1
    1b38:	f1 04       	cpc	r15, r1
    1b3a:	b1 f4       	brne	.+44     	; 0x1b68 <xTaskIncrementTick+0x74>
    1b3c:	80 91 63 14 	lds	r24, 0x1463	; 0x801463 <pxDelayedTaskList>
    1b40:	90 91 64 14 	lds	r25, 0x1464	; 0x801464 <pxDelayedTaskList+0x1>
    1b44:	20 91 61 14 	lds	r18, 0x1461	; 0x801461 <pxOverflowDelayedTaskList>
    1b48:	30 91 62 14 	lds	r19, 0x1462	; 0x801462 <pxOverflowDelayedTaskList+0x1>
    1b4c:	30 93 64 14 	sts	0x1464, r19	; 0x801464 <pxDelayedTaskList+0x1>
    1b50:	20 93 63 14 	sts	0x1463, r18	; 0x801463 <pxDelayedTaskList>
    1b54:	90 93 62 14 	sts	0x1462, r25	; 0x801462 <pxOverflowDelayedTaskList+0x1>
    1b58:	80 93 61 14 	sts	0x1461, r24	; 0x801461 <pxOverflowDelayedTaskList>
    1b5c:	80 91 32 14 	lds	r24, 0x1432	; 0x801432 <xNumOfOverflows>
    1b60:	8f 5f       	subi	r24, 0xFF	; 255
    1b62:	80 93 32 14 	sts	0x1432, r24	; 0x801432 <xNumOfOverflows>
    1b66:	1c dd       	rcall	.-1480   	; 0x15a0 <prvResetNextTaskUnblockTime>
    1b68:	80 91 2d 14 	lds	r24, 0x142D	; 0x80142d <xNextTaskUnblockTime>
    1b6c:	90 91 2e 14 	lds	r25, 0x142E	; 0x80142e <xNextTaskUnblockTime+0x1>
    1b70:	a0 91 2f 14 	lds	r26, 0x142F	; 0x80142f <xNextTaskUnblockTime+0x2>
    1b74:	b0 91 30 14 	lds	r27, 0x1430	; 0x801430 <xNextTaskUnblockTime+0x3>
    1b78:	c8 16       	cp	r12, r24
    1b7a:	d9 06       	cpc	r13, r25
    1b7c:	ea 06       	cpc	r14, r26
    1b7e:	fb 06       	cpc	r15, r27
    1b80:	20 f4       	brcc	.+8      	; 0x1b8a <xTaskIncrementTick+0x96>
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	b2 c0       	rjmp	.+356    	; 0x1cea <xTaskIncrementTick+0x1f6>
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	01 c0       	rjmp	.+2      	; 0x1b8c <xTaskIncrementTick+0x98>
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	e0 91 63 14 	lds	r30, 0x1463	; 0x801463 <pxDelayedTaskList>
    1b90:	f0 91 64 14 	lds	r31, 0x1464	; 0x801464 <pxDelayedTaskList+0x1>
    1b94:	90 81       	ld	r25, Z
    1b96:	91 11       	cpse	r25, r1
    1b98:	0c c0       	rjmp	.+24     	; 0x1bb2 <xTaskIncrementTick+0xbe>
    1b9a:	4f ef       	ldi	r20, 0xFF	; 255
    1b9c:	5f ef       	ldi	r21, 0xFF	; 255
    1b9e:	ba 01       	movw	r22, r20
    1ba0:	40 93 2d 14 	sts	0x142D, r20	; 0x80142d <xNextTaskUnblockTime>
    1ba4:	50 93 2e 14 	sts	0x142E, r21	; 0x80142e <xNextTaskUnblockTime+0x1>
    1ba8:	60 93 2f 14 	sts	0x142F, r22	; 0x80142f <xNextTaskUnblockTime+0x2>
    1bac:	70 93 30 14 	sts	0x1430, r23	; 0x801430 <xNextTaskUnblockTime+0x3>
    1bb0:	9c c0       	rjmp	.+312    	; 0x1cea <xTaskIncrementTick+0x1f6>
    1bb2:	e0 91 63 14 	lds	r30, 0x1463	; 0x801463 <pxDelayedTaskList>
    1bb6:	f0 91 64 14 	lds	r31, 0x1464	; 0x801464 <pxDelayedTaskList+0x1>
    1bba:	07 80       	ldd	r0, Z+7	; 0x07
    1bbc:	f0 85       	ldd	r31, Z+8	; 0x08
    1bbe:	e0 2d       	mov	r30, r0
    1bc0:	00 84       	ldd	r0, Z+8	; 0x08
    1bc2:	f1 85       	ldd	r31, Z+9	; 0x09
    1bc4:	e0 2d       	mov	r30, r0
    1bc6:	42 81       	ldd	r20, Z+2	; 0x02
    1bc8:	53 81       	ldd	r21, Z+3	; 0x03
    1bca:	64 81       	ldd	r22, Z+4	; 0x04
    1bcc:	75 81       	ldd	r23, Z+5	; 0x05
    1bce:	c4 16       	cp	r12, r20
    1bd0:	d5 06       	cpc	r13, r21
    1bd2:	e6 06       	cpc	r14, r22
    1bd4:	f7 06       	cpc	r15, r23
    1bd6:	48 f4       	brcc	.+18     	; 0x1bea <xTaskIncrementTick+0xf6>
    1bd8:	40 93 2d 14 	sts	0x142D, r20	; 0x80142d <xNextTaskUnblockTime>
    1bdc:	50 93 2e 14 	sts	0x142E, r21	; 0x80142e <xNextTaskUnblockTime+0x1>
    1be0:	60 93 2f 14 	sts	0x142F, r22	; 0x80142f <xNextTaskUnblockTime+0x2>
    1be4:	70 93 30 14 	sts	0x1430, r23	; 0x801430 <xNextTaskUnblockTime+0x3>
    1be8:	80 c0       	rjmp	.+256    	; 0x1cea <xTaskIncrementTick+0x1f6>
    1bea:	a4 85       	ldd	r26, Z+12	; 0x0c
    1bec:	b5 85       	ldd	r27, Z+13	; 0x0d
    1bee:	c6 81       	ldd	r28, Z+6	; 0x06
    1bf0:	d7 81       	ldd	r29, Z+7	; 0x07
    1bf2:	20 85       	ldd	r18, Z+8	; 0x08
    1bf4:	31 85       	ldd	r19, Z+9	; 0x09
    1bf6:	3f 83       	std	Y+7, r19	; 0x07
    1bf8:	2e 83       	std	Y+6, r18	; 0x06
    1bfa:	c0 85       	ldd	r28, Z+8	; 0x08
    1bfc:	d1 85       	ldd	r29, Z+9	; 0x09
    1bfe:	26 81       	ldd	r18, Z+6	; 0x06
    1c00:	37 81       	ldd	r19, Z+7	; 0x07
    1c02:	3d 83       	std	Y+5, r19	; 0x05
    1c04:	2c 83       	std	Y+4, r18	; 0x04
    1c06:	11 96       	adiw	r26, 0x01	; 1
    1c08:	4d 91       	ld	r20, X+
    1c0a:	5c 91       	ld	r21, X
    1c0c:	12 97       	sbiw	r26, 0x02	; 2
    1c0e:	9f 01       	movw	r18, r30
    1c10:	2e 5f       	subi	r18, 0xFE	; 254
    1c12:	3f 4f       	sbci	r19, 0xFF	; 255
    1c14:	42 17       	cp	r20, r18
    1c16:	53 07       	cpc	r21, r19
    1c18:	31 f4       	brne	.+12     	; 0x1c26 <xTaskIncrementTick+0x132>
    1c1a:	40 85       	ldd	r20, Z+8	; 0x08
    1c1c:	51 85       	ldd	r21, Z+9	; 0x09
    1c1e:	12 96       	adiw	r26, 0x02	; 2
    1c20:	5c 93       	st	X, r21
    1c22:	4e 93       	st	-X, r20
    1c24:	11 97       	sbiw	r26, 0x01	; 1
    1c26:	15 86       	std	Z+13, r1	; 0x0d
    1c28:	14 86       	std	Z+12, r1	; 0x0c
    1c2a:	9c 91       	ld	r25, X
    1c2c:	91 50       	subi	r25, 0x01	; 1
    1c2e:	9c 93       	st	X, r25
    1c30:	a0 8d       	ldd	r26, Z+24	; 0x18
    1c32:	b1 8d       	ldd	r27, Z+25	; 0x19
    1c34:	10 97       	sbiw	r26, 0x00	; 0
    1c36:	09 f1       	breq	.+66     	; 0x1c7a <xTaskIncrementTick+0x186>
    1c38:	c2 89       	ldd	r28, Z+18	; 0x12
    1c3a:	d3 89       	ldd	r29, Z+19	; 0x13
    1c3c:	44 89       	ldd	r20, Z+20	; 0x14
    1c3e:	55 89       	ldd	r21, Z+21	; 0x15
    1c40:	5f 83       	std	Y+7, r21	; 0x07
    1c42:	4e 83       	std	Y+6, r20	; 0x06
    1c44:	c4 89       	ldd	r28, Z+20	; 0x14
    1c46:	d5 89       	ldd	r29, Z+21	; 0x15
    1c48:	42 89       	ldd	r20, Z+18	; 0x12
    1c4a:	53 89       	ldd	r21, Z+19	; 0x13
    1c4c:	5d 83       	std	Y+5, r21	; 0x05
    1c4e:	4c 83       	std	Y+4, r20	; 0x04
    1c50:	11 96       	adiw	r26, 0x01	; 1
    1c52:	6d 91       	ld	r22, X+
    1c54:	7c 91       	ld	r23, X
    1c56:	12 97       	sbiw	r26, 0x02	; 2
    1c58:	af 01       	movw	r20, r30
    1c5a:	42 5f       	subi	r20, 0xF2	; 242
    1c5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c5e:	64 17       	cp	r22, r20
    1c60:	75 07       	cpc	r23, r21
    1c62:	31 f4       	brne	.+12     	; 0x1c70 <xTaskIncrementTick+0x17c>
    1c64:	44 89       	ldd	r20, Z+20	; 0x14
    1c66:	55 89       	ldd	r21, Z+21	; 0x15
    1c68:	12 96       	adiw	r26, 0x02	; 2
    1c6a:	5c 93       	st	X, r21
    1c6c:	4e 93       	st	-X, r20
    1c6e:	11 97       	sbiw	r26, 0x01	; 1
    1c70:	11 8e       	std	Z+25, r1	; 0x19
    1c72:	10 8e       	std	Z+24, r1	; 0x18
    1c74:	9c 91       	ld	r25, X
    1c76:	91 50       	subi	r25, 0x01	; 1
    1c78:	9c 93       	st	X, r25
    1c7a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c7c:	90 91 39 14 	lds	r25, 0x1439	; 0x801439 <uxTopReadyPriority>
    1c80:	9a 17       	cp	r25, r26
    1c82:	10 f4       	brcc	.+4      	; 0x1c88 <xTaskIncrementTick+0x194>
    1c84:	a0 93 39 14 	sts	0x1439, r26	; 0x801439 <uxTopReadyPriority>
    1c88:	9b e0       	ldi	r25, 0x0B	; 11
    1c8a:	9a 9f       	mul	r25, r26
    1c8c:	d0 01       	movw	r26, r0
    1c8e:	11 24       	eor	r1, r1
    1c90:	a5 58       	subi	r26, 0x85	; 133
    1c92:	bb 4e       	sbci	r27, 0xEB	; 235
    1c94:	11 96       	adiw	r26, 0x01	; 1
    1c96:	0d 90       	ld	r0, X+
    1c98:	bc 91       	ld	r27, X
    1c9a:	a0 2d       	mov	r26, r0
    1c9c:	b7 83       	std	Z+7, r27	; 0x07
    1c9e:	a6 83       	std	Z+6, r26	; 0x06
    1ca0:	16 96       	adiw	r26, 0x06	; 6
    1ca2:	4d 91       	ld	r20, X+
    1ca4:	5c 91       	ld	r21, X
    1ca6:	17 97       	sbiw	r26, 0x07	; 7
    1ca8:	51 87       	std	Z+9, r21	; 0x09
    1caa:	40 87       	std	Z+8, r20	; 0x08
    1cac:	16 96       	adiw	r26, 0x06	; 6
    1cae:	cd 91       	ld	r28, X+
    1cb0:	dc 91       	ld	r29, X
    1cb2:	17 97       	sbiw	r26, 0x07	; 7
    1cb4:	3d 83       	std	Y+5, r19	; 0x05
    1cb6:	2c 83       	std	Y+4, r18	; 0x04
    1cb8:	17 96       	adiw	r26, 0x07	; 7
    1cba:	3c 93       	st	X, r19
    1cbc:	2e 93       	st	-X, r18
    1cbe:	16 97       	sbiw	r26, 0x06	; 6
    1cc0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1cc2:	9a 9f       	mul	r25, r26
    1cc4:	d0 01       	movw	r26, r0
    1cc6:	11 24       	eor	r1, r1
    1cc8:	a5 58       	subi	r26, 0x85	; 133
    1cca:	bb 4e       	sbci	r27, 0xEB	; 235
    1ccc:	b5 87       	std	Z+13, r27	; 0x0d
    1cce:	a4 87       	std	Z+12, r26	; 0x0c
    1cd0:	9c 91       	ld	r25, X
    1cd2:	9f 5f       	subi	r25, 0xFF	; 255
    1cd4:	9c 93       	st	X, r25
    1cd6:	22 8d       	ldd	r18, Z+26	; 0x1a
    1cd8:	e0 91 e9 14 	lds	r30, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    1cdc:	f0 91 ea 14 	lds	r31, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    1ce0:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ce2:	29 17       	cp	r18, r25
    1ce4:	08 f0       	brcs	.+2      	; 0x1ce8 <xTaskIncrementTick+0x1f4>
    1ce6:	4f cf       	rjmp	.-354    	; 0x1b86 <xTaskIncrementTick+0x92>
    1ce8:	51 cf       	rjmp	.-350    	; 0x1b8c <xTaskIncrementTick+0x98>
    1cea:	e0 91 e9 14 	lds	r30, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    1cee:	f0 91 ea 14 	lds	r31, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    1cf2:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1cf4:	9b e0       	ldi	r25, 0x0B	; 11
    1cf6:	e9 9f       	mul	r30, r25
    1cf8:	f0 01       	movw	r30, r0
    1cfa:	11 24       	eor	r1, r1
    1cfc:	e5 58       	subi	r30, 0x85	; 133
    1cfe:	fb 4e       	sbci	r31, 0xEB	; 235
    1d00:	90 81       	ld	r25, Z
    1d02:	92 30       	cpi	r25, 0x02	; 2
    1d04:	08 f0       	brcs	.+2      	; 0x1d08 <xTaskIncrementTick+0x214>
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	90 91 33 14 	lds	r25, 0x1433	; 0x801433 <xYieldPending>
    1d0c:	91 11       	cpse	r25, r1
    1d0e:	16 c0       	rjmp	.+44     	; 0x1d3c <xTaskIncrementTick+0x248>
    1d10:	16 c0       	rjmp	.+44     	; 0x1d3e <xTaskIncrementTick+0x24a>
    1d12:	80 91 34 14 	lds	r24, 0x1434	; 0x801434 <xPendedTicks>
    1d16:	90 91 35 14 	lds	r25, 0x1435	; 0x801435 <xPendedTicks+0x1>
    1d1a:	a0 91 36 14 	lds	r26, 0x1436	; 0x801436 <xPendedTicks+0x2>
    1d1e:	b0 91 37 14 	lds	r27, 0x1437	; 0x801437 <xPendedTicks+0x3>
    1d22:	01 96       	adiw	r24, 0x01	; 1
    1d24:	a1 1d       	adc	r26, r1
    1d26:	b1 1d       	adc	r27, r1
    1d28:	80 93 34 14 	sts	0x1434, r24	; 0x801434 <xPendedTicks>
    1d2c:	90 93 35 14 	sts	0x1435, r25	; 0x801435 <xPendedTicks+0x1>
    1d30:	a0 93 36 14 	sts	0x1436, r26	; 0x801436 <xPendedTicks+0x2>
    1d34:	b0 93 37 14 	sts	0x1437, r27	; 0x801437 <xPendedTicks+0x3>
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	01 c0       	rjmp	.+2      	; 0x1d3e <xTaskIncrementTick+0x24a>
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	df 91       	pop	r29
    1d40:	cf 91       	pop	r28
    1d42:	ff 90       	pop	r15
    1d44:	ef 90       	pop	r14
    1d46:	df 90       	pop	r13
    1d48:	cf 90       	pop	r12
    1d4a:	08 95       	ret

00001d4c <xTaskResumeAll>:
    1d4c:	cf 92       	push	r12
    1d4e:	df 92       	push	r13
    1d50:	ef 92       	push	r14
    1d52:	ff 92       	push	r15
    1d54:	cf 93       	push	r28
    1d56:	df 93       	push	r29
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	0f 92       	push	r0
    1d5e:	80 91 2a 14 	lds	r24, 0x142A	; 0x80142a <uxSchedulerSuspended>
    1d62:	81 50       	subi	r24, 0x01	; 1
    1d64:	80 93 2a 14 	sts	0x142A, r24	; 0x80142a <uxSchedulerSuspended>
    1d68:	80 91 2a 14 	lds	r24, 0x142A	; 0x80142a <uxSchedulerSuspended>
    1d6c:	81 11       	cpse	r24, r1
    1d6e:	be c0       	rjmp	.+380    	; 0x1eec <xTaskResumeAll+0x1a0>
    1d70:	80 91 3e 14 	lds	r24, 0x143E	; 0x80143e <uxCurrentNumberOfTasks>
    1d74:	81 11       	cpse	r24, r1
    1d76:	88 c0       	rjmp	.+272    	; 0x1e88 <xTaskResumeAll+0x13c>
    1d78:	bc c0       	rjmp	.+376    	; 0x1ef2 <xTaskResumeAll+0x1a6>
    1d7a:	e0 91 5d 14 	lds	r30, 0x145D	; 0x80145d <xPendingReadyList+0x7>
    1d7e:	f0 91 5e 14 	lds	r31, 0x145E	; 0x80145e <xPendingReadyList+0x8>
    1d82:	00 84       	ldd	r0, Z+8	; 0x08
    1d84:	f1 85       	ldd	r31, Z+9	; 0x09
    1d86:	e0 2d       	mov	r30, r0
    1d88:	a0 8d       	ldd	r26, Z+24	; 0x18
    1d8a:	b1 8d       	ldd	r27, Z+25	; 0x19
    1d8c:	c2 89       	ldd	r28, Z+18	; 0x12
    1d8e:	d3 89       	ldd	r29, Z+19	; 0x13
    1d90:	84 89       	ldd	r24, Z+20	; 0x14
    1d92:	95 89       	ldd	r25, Z+21	; 0x15
    1d94:	9f 83       	std	Y+7, r25	; 0x07
    1d96:	8e 83       	std	Y+6, r24	; 0x06
    1d98:	c4 89       	ldd	r28, Z+20	; 0x14
    1d9a:	d5 89       	ldd	r29, Z+21	; 0x15
    1d9c:	82 89       	ldd	r24, Z+18	; 0x12
    1d9e:	93 89       	ldd	r25, Z+19	; 0x13
    1da0:	9d 83       	std	Y+5, r25	; 0x05
    1da2:	8c 83       	std	Y+4, r24	; 0x04
    1da4:	11 96       	adiw	r26, 0x01	; 1
    1da6:	2d 91       	ld	r18, X+
    1da8:	3c 91       	ld	r19, X
    1daa:	12 97       	sbiw	r26, 0x02	; 2
    1dac:	cf 01       	movw	r24, r30
    1dae:	0e 96       	adiw	r24, 0x0e	; 14
    1db0:	28 17       	cp	r18, r24
    1db2:	39 07       	cpc	r19, r25
    1db4:	31 f4       	brne	.+12     	; 0x1dc2 <xTaskResumeAll+0x76>
    1db6:	84 89       	ldd	r24, Z+20	; 0x14
    1db8:	95 89       	ldd	r25, Z+21	; 0x15
    1dba:	12 96       	adiw	r26, 0x02	; 2
    1dbc:	9c 93       	st	X, r25
    1dbe:	8e 93       	st	-X, r24
    1dc0:	11 97       	sbiw	r26, 0x01	; 1
    1dc2:	11 8e       	std	Z+25, r1	; 0x19
    1dc4:	10 8e       	std	Z+24, r1	; 0x18
    1dc6:	8c 91       	ld	r24, X
    1dc8:	81 50       	subi	r24, 0x01	; 1
    1dca:	8c 93       	st	X, r24
    1dcc:	a4 85       	ldd	r26, Z+12	; 0x0c
    1dce:	b5 85       	ldd	r27, Z+13	; 0x0d
    1dd0:	c6 81       	ldd	r28, Z+6	; 0x06
    1dd2:	d7 81       	ldd	r29, Z+7	; 0x07
    1dd4:	80 85       	ldd	r24, Z+8	; 0x08
    1dd6:	91 85       	ldd	r25, Z+9	; 0x09
    1dd8:	9f 83       	std	Y+7, r25	; 0x07
    1dda:	8e 83       	std	Y+6, r24	; 0x06
    1ddc:	c0 85       	ldd	r28, Z+8	; 0x08
    1dde:	d1 85       	ldd	r29, Z+9	; 0x09
    1de0:	86 81       	ldd	r24, Z+6	; 0x06
    1de2:	97 81       	ldd	r25, Z+7	; 0x07
    1de4:	9d 83       	std	Y+5, r25	; 0x05
    1de6:	8c 83       	std	Y+4, r24	; 0x04
    1de8:	11 96       	adiw	r26, 0x01	; 1
    1dea:	8d 91       	ld	r24, X+
    1dec:	9c 91       	ld	r25, X
    1dee:	12 97       	sbiw	r26, 0x02	; 2
    1df0:	9f 01       	movw	r18, r30
    1df2:	2e 5f       	subi	r18, 0xFE	; 254
    1df4:	3f 4f       	sbci	r19, 0xFF	; 255
    1df6:	82 17       	cp	r24, r18
    1df8:	93 07       	cpc	r25, r19
    1dfa:	31 f4       	brne	.+12     	; 0x1e08 <xTaskResumeAll+0xbc>
    1dfc:	80 85       	ldd	r24, Z+8	; 0x08
    1dfe:	91 85       	ldd	r25, Z+9	; 0x09
    1e00:	12 96       	adiw	r26, 0x02	; 2
    1e02:	9c 93       	st	X, r25
    1e04:	8e 93       	st	-X, r24
    1e06:	11 97       	sbiw	r26, 0x01	; 1
    1e08:	15 86       	std	Z+13, r1	; 0x0d
    1e0a:	14 86       	std	Z+12, r1	; 0x0c
    1e0c:	8c 91       	ld	r24, X
    1e0e:	81 50       	subi	r24, 0x01	; 1
    1e10:	8c 93       	st	X, r24
    1e12:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1e14:	80 91 39 14 	lds	r24, 0x1439	; 0x801439 <uxTopReadyPriority>
    1e18:	8a 17       	cp	r24, r26
    1e1a:	10 f4       	brcc	.+4      	; 0x1e20 <xTaskResumeAll+0xd4>
    1e1c:	a0 93 39 14 	sts	0x1439, r26	; 0x801439 <uxTopReadyPriority>
    1e20:	8b e0       	ldi	r24, 0x0B	; 11
    1e22:	8a 9f       	mul	r24, r26
    1e24:	d0 01       	movw	r26, r0
    1e26:	11 24       	eor	r1, r1
    1e28:	a5 58       	subi	r26, 0x85	; 133
    1e2a:	bb 4e       	sbci	r27, 0xEB	; 235
    1e2c:	11 96       	adiw	r26, 0x01	; 1
    1e2e:	0d 90       	ld	r0, X+
    1e30:	bc 91       	ld	r27, X
    1e32:	a0 2d       	mov	r26, r0
    1e34:	b7 83       	std	Z+7, r27	; 0x07
    1e36:	a6 83       	std	Z+6, r26	; 0x06
    1e38:	16 96       	adiw	r26, 0x06	; 6
    1e3a:	4d 91       	ld	r20, X+
    1e3c:	5c 91       	ld	r21, X
    1e3e:	17 97       	sbiw	r26, 0x07	; 7
    1e40:	51 87       	std	Z+9, r21	; 0x09
    1e42:	40 87       	std	Z+8, r20	; 0x08
    1e44:	16 96       	adiw	r26, 0x06	; 6
    1e46:	cd 91       	ld	r28, X+
    1e48:	dc 91       	ld	r29, X
    1e4a:	17 97       	sbiw	r26, 0x07	; 7
    1e4c:	3d 83       	std	Y+5, r19	; 0x05
    1e4e:	2c 83       	std	Y+4, r18	; 0x04
    1e50:	17 96       	adiw	r26, 0x07	; 7
    1e52:	3c 93       	st	X, r19
    1e54:	2e 93       	st	-X, r18
    1e56:	16 97       	sbiw	r26, 0x06	; 6
    1e58:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1e5a:	8a 9f       	mul	r24, r26
    1e5c:	d0 01       	movw	r26, r0
    1e5e:	11 24       	eor	r1, r1
    1e60:	a5 58       	subi	r26, 0x85	; 133
    1e62:	bb 4e       	sbci	r27, 0xEB	; 235
    1e64:	b5 87       	std	Z+13, r27	; 0x0d
    1e66:	a4 87       	std	Z+12, r26	; 0x0c
    1e68:	8c 91       	ld	r24, X
    1e6a:	8f 5f       	subi	r24, 0xFF	; 255
    1e6c:	8c 93       	st	X, r24
    1e6e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e70:	a0 91 e9 14 	lds	r26, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    1e74:	b0 91 ea 14 	lds	r27, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    1e78:	5a 96       	adiw	r26, 0x1a	; 26
    1e7a:	8c 91       	ld	r24, X
    1e7c:	98 17       	cp	r25, r24
    1e7e:	30 f0       	brcs	.+12     	; 0x1e8c <xTaskResumeAll+0x140>
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	80 93 33 14 	sts	0x1433, r24	; 0x801433 <xYieldPending>
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <xTaskResumeAll+0x140>
    1e88:	e0 e0       	ldi	r30, 0x00	; 0
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 91 56 14 	lds	r24, 0x1456	; 0x801456 <xPendingReadyList>
    1e90:	81 11       	cpse	r24, r1
    1e92:	73 cf       	rjmp	.-282    	; 0x1d7a <xTaskResumeAll+0x2e>
    1e94:	ef 2b       	or	r30, r31
    1e96:	09 f0       	breq	.+2      	; 0x1e9a <xTaskResumeAll+0x14e>
    1e98:	83 db       	rcall	.-2298   	; 0x15a0 <prvResetNextTaskUnblockTime>
    1e9a:	c0 90 34 14 	lds	r12, 0x1434	; 0x801434 <xPendedTicks>
    1e9e:	d0 90 35 14 	lds	r13, 0x1435	; 0x801435 <xPendedTicks+0x1>
    1ea2:	e0 90 36 14 	lds	r14, 0x1436	; 0x801436 <xPendedTicks+0x2>
    1ea6:	f0 90 37 14 	lds	r15, 0x1437	; 0x801437 <xPendedTicks+0x3>
    1eaa:	c1 14       	cp	r12, r1
    1eac:	d1 04       	cpc	r13, r1
    1eae:	e1 04       	cpc	r14, r1
    1eb0:	f1 04       	cpc	r15, r1
    1eb2:	a1 f0       	breq	.+40     	; 0x1edc <xTaskResumeAll+0x190>
    1eb4:	1f de       	rcall	.-962    	; 0x1af4 <xTaskIncrementTick>
    1eb6:	88 23       	and	r24, r24
    1eb8:	19 f0       	breq	.+6      	; 0x1ec0 <xTaskResumeAll+0x174>
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	80 93 33 14 	sts	0x1433, r24	; 0x801433 <xYieldPending>
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	c8 1a       	sub	r12, r24
    1ec4:	d1 08       	sbc	r13, r1
    1ec6:	e1 08       	sbc	r14, r1
    1ec8:	f1 08       	sbc	r15, r1
    1eca:	a1 f7       	brne	.-24     	; 0x1eb4 <xTaskResumeAll+0x168>
    1ecc:	10 92 34 14 	sts	0x1434, r1	; 0x801434 <xPendedTicks>
    1ed0:	10 92 35 14 	sts	0x1435, r1	; 0x801435 <xPendedTicks+0x1>
    1ed4:	10 92 36 14 	sts	0x1436, r1	; 0x801436 <xPendedTicks+0x2>
    1ed8:	10 92 37 14 	sts	0x1437, r1	; 0x801437 <xPendedTicks+0x3>
    1edc:	80 91 33 14 	lds	r24, 0x1433	; 0x801433 <xYieldPending>
    1ee0:	88 23       	and	r24, r24
    1ee2:	31 f0       	breq	.+12     	; 0x1ef0 <xTaskResumeAll+0x1a4>
    1ee4:	0e 94 20 04 	call	0x840	; 0x840 <vPortYield>
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	03 c0       	rjmp	.+6      	; 0x1ef2 <xTaskResumeAll+0x1a6>
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	01 c0       	rjmp	.+2      	; 0x1ef2 <xTaskResumeAll+0x1a6>
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	0f 90       	pop	r0
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	df 91       	pop	r29
    1ef8:	cf 91       	pop	r28
    1efa:	ff 90       	pop	r15
    1efc:	ef 90       	pop	r14
    1efe:	df 90       	pop	r13
    1f00:	cf 90       	pop	r12
    1f02:	08 95       	ret

00001f04 <xTaskDelayUntil>:
    1f04:	8f 92       	push	r8
    1f06:	9f 92       	push	r9
    1f08:	af 92       	push	r10
    1f0a:	bf 92       	push	r11
    1f0c:	cf 92       	push	r12
    1f0e:	df 92       	push	r13
    1f10:	ef 92       	push	r14
    1f12:	ff 92       	push	r15
    1f14:	1f 93       	push	r17
    1f16:	cf 93       	push	r28
    1f18:	df 93       	push	r29
    1f1a:	ec 01       	movw	r28, r24
    1f1c:	6a 01       	movw	r12, r20
    1f1e:	7b 01       	movw	r14, r22
    1f20:	d5 dd       	rcall	.-1110   	; 0x1acc <vTaskSuspendAll>
    1f22:	80 90 3a 14 	lds	r8, 0x143A	; 0x80143a <xTickCount>
    1f26:	90 90 3b 14 	lds	r9, 0x143B	; 0x80143b <xTickCount+0x1>
    1f2a:	a0 90 3c 14 	lds	r10, 0x143C	; 0x80143c <xTickCount+0x2>
    1f2e:	b0 90 3d 14 	lds	r11, 0x143D	; 0x80143d <xTickCount+0x3>
    1f32:	88 81       	ld	r24, Y
    1f34:	99 81       	ldd	r25, Y+1	; 0x01
    1f36:	aa 81       	ldd	r26, Y+2	; 0x02
    1f38:	bb 81       	ldd	r27, Y+3	; 0x03
    1f3a:	ac 01       	movw	r20, r24
    1f3c:	bd 01       	movw	r22, r26
    1f3e:	4c 0d       	add	r20, r12
    1f40:	5d 1d       	adc	r21, r13
    1f42:	6e 1d       	adc	r22, r14
    1f44:	7f 1d       	adc	r23, r15
    1f46:	88 16       	cp	r8, r24
    1f48:	99 06       	cpc	r9, r25
    1f4a:	aa 06       	cpc	r10, r26
    1f4c:	bb 06       	cpc	r11, r27
    1f4e:	60 f4       	brcc	.+24     	; 0x1f68 <xTaskDelayUntil+0x64>
    1f50:	48 17       	cp	r20, r24
    1f52:	59 07       	cpc	r21, r25
    1f54:	6a 07       	cpc	r22, r26
    1f56:	7b 07       	cpc	r23, r27
    1f58:	98 f4       	brcc	.+38     	; 0x1f80 <xTaskDelayUntil+0x7c>
    1f5a:	84 16       	cp	r8, r20
    1f5c:	95 06       	cpc	r9, r21
    1f5e:	a6 06       	cpc	r10, r22
    1f60:	b7 06       	cpc	r11, r23
    1f62:	80 f0       	brcs	.+32     	; 0x1f84 <xTaskDelayUntil+0x80>
    1f64:	10 e0       	ldi	r17, 0x00	; 0
    1f66:	13 c0       	rjmp	.+38     	; 0x1f8e <xTaskDelayUntil+0x8a>
    1f68:	48 17       	cp	r20, r24
    1f6a:	59 07       	cpc	r21, r25
    1f6c:	6a 07       	cpc	r22, r26
    1f6e:	7b 07       	cpc	r23, r27
    1f70:	58 f0       	brcs	.+22     	; 0x1f88 <xTaskDelayUntil+0x84>
    1f72:	84 16       	cp	r8, r20
    1f74:	95 06       	cpc	r9, r21
    1f76:	a6 06       	cpc	r10, r22
    1f78:	b7 06       	cpc	r11, r23
    1f7a:	40 f0       	brcs	.+16     	; 0x1f8c <xTaskDelayUntil+0x88>
    1f7c:	10 e0       	ldi	r17, 0x00	; 0
    1f7e:	07 c0       	rjmp	.+14     	; 0x1f8e <xTaskDelayUntil+0x8a>
    1f80:	10 e0       	ldi	r17, 0x00	; 0
    1f82:	05 c0       	rjmp	.+10     	; 0x1f8e <xTaskDelayUntil+0x8a>
    1f84:	11 e0       	ldi	r17, 0x01	; 1
    1f86:	03 c0       	rjmp	.+6      	; 0x1f8e <xTaskDelayUntil+0x8a>
    1f88:	11 e0       	ldi	r17, 0x01	; 1
    1f8a:	01 c0       	rjmp	.+2      	; 0x1f8e <xTaskDelayUntil+0x8a>
    1f8c:	11 e0       	ldi	r17, 0x01	; 1
    1f8e:	48 83       	st	Y, r20
    1f90:	59 83       	std	Y+1, r21	; 0x01
    1f92:	6a 83       	std	Y+2, r22	; 0x02
    1f94:	7b 83       	std	Y+3, r23	; 0x03
    1f96:	11 23       	and	r17, r17
    1f98:	41 f0       	breq	.+16     	; 0x1faa <xTaskDelayUntil+0xa6>
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	ba 01       	movw	r22, r20
    1f9e:	68 19       	sub	r22, r8
    1fa0:	79 09       	sbc	r23, r9
    1fa2:	8a 09       	sbc	r24, r10
    1fa4:	9b 09       	sbc	r25, r11
    1fa6:	40 e0       	ldi	r20, 0x00	; 0
    1fa8:	6b dc       	rcall	.-1834   	; 0x1880 <prvAddCurrentTaskToDelayedList>
    1faa:	d0 de       	rcall	.-608    	; 0x1d4c <xTaskResumeAll>
    1fac:	81 11       	cpse	r24, r1
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <xTaskDelayUntil+0xb0>
    1fb0:	0e 94 20 04 	call	0x840	; 0x840 <vPortYield>
    1fb4:	81 2f       	mov	r24, r17
    1fb6:	df 91       	pop	r29
    1fb8:	cf 91       	pop	r28
    1fba:	1f 91       	pop	r17
    1fbc:	ff 90       	pop	r15
    1fbe:	ef 90       	pop	r14
    1fc0:	df 90       	pop	r13
    1fc2:	cf 90       	pop	r12
    1fc4:	bf 90       	pop	r11
    1fc6:	af 90       	pop	r10
    1fc8:	9f 90       	pop	r9
    1fca:	8f 90       	pop	r8
    1fcc:	08 95       	ret

00001fce <vTaskDelay>:
    1fce:	cf 92       	push	r12
    1fd0:	df 92       	push	r13
    1fd2:	ef 92       	push	r14
    1fd4:	ff 92       	push	r15
    1fd6:	6b 01       	movw	r12, r22
    1fd8:	7c 01       	movw	r14, r24
    1fda:	67 2b       	or	r22, r23
    1fdc:	68 2b       	or	r22, r24
    1fde:	69 2b       	or	r22, r25
    1fe0:	39 f0       	breq	.+14     	; 0x1ff0 <vTaskDelay+0x22>
    1fe2:	74 dd       	rcall	.-1304   	; 0x1acc <vTaskSuspendAll>
    1fe4:	40 e0       	ldi	r20, 0x00	; 0
    1fe6:	c7 01       	movw	r24, r14
    1fe8:	b6 01       	movw	r22, r12
    1fea:	4a dc       	rcall	.-1900   	; 0x1880 <prvAddCurrentTaskToDelayedList>
    1fec:	af de       	rcall	.-674    	; 0x1d4c <xTaskResumeAll>
    1fee:	01 c0       	rjmp	.+2      	; 0x1ff2 <vTaskDelay+0x24>
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	81 11       	cpse	r24, r1
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <vTaskDelay+0x2c>
    1ff6:	0e 94 20 04 	call	0x840	; 0x840 <vPortYield>
    1ffa:	ff 90       	pop	r15
    1ffc:	ef 90       	pop	r14
    1ffe:	df 90       	pop	r13
    2000:	cf 90       	pop	r12
    2002:	08 95       	ret

00002004 <vTaskSwitchContext>:
    2004:	80 91 2a 14 	lds	r24, 0x142A	; 0x80142a <uxSchedulerSuspended>
    2008:	88 23       	and	r24, r24
    200a:	21 f0       	breq	.+8      	; 0x2014 <vTaskSwitchContext+0x10>
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	80 93 33 14 	sts	0x1433, r24	; 0x801433 <xYieldPending>
    2012:	08 95       	ret
    2014:	10 92 33 14 	sts	0x1433, r1	; 0x801433 <xYieldPending>
    2018:	e0 91 e9 14 	lds	r30, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    201c:	f0 91 ea 14 	lds	r31, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    2020:	20 81       	ld	r18, Z
    2022:	31 81       	ldd	r19, Z+1	; 0x01
    2024:	e0 91 e9 14 	lds	r30, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    2028:	f0 91 ea 14 	lds	r31, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    202c:	83 8d       	ldd	r24, Z+27	; 0x1b
    202e:	94 8d       	ldd	r25, Z+28	; 0x1c
    2030:	82 17       	cp	r24, r18
    2032:	93 07       	cpc	r25, r19
    2034:	60 f0       	brcs	.+24     	; 0x204e <vTaskSwitchContext+0x4a>
    2036:	60 91 e9 14 	lds	r22, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    203a:	70 91 ea 14 	lds	r23, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    203e:	63 5e       	subi	r22, 0xE3	; 227
    2040:	7f 4f       	sbci	r23, 0xFF	; 255
    2042:	80 91 e9 14 	lds	r24, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    2046:	90 91 ea 14 	lds	r25, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    204a:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <vApplicationStackOverflowHook>
    204e:	80 91 39 14 	lds	r24, 0x1439	; 0x801439 <uxTopReadyPriority>
    2052:	01 c0       	rjmp	.+2      	; 0x2056 <vTaskSwitchContext+0x52>
    2054:	81 50       	subi	r24, 0x01	; 1
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	9b e0       	ldi	r25, 0x0B	; 11
    205c:	92 9f       	mul	r25, r18
    205e:	f0 01       	movw	r30, r0
    2060:	93 9f       	mul	r25, r19
    2062:	f0 0d       	add	r31, r0
    2064:	11 24       	eor	r1, r1
    2066:	e5 58       	subi	r30, 0x85	; 133
    2068:	fb 4e       	sbci	r31, 0xEB	; 235
    206a:	90 81       	ld	r25, Z
    206c:	99 23       	and	r25, r25
    206e:	91 f3       	breq	.-28     	; 0x2054 <vTaskSwitchContext+0x50>
    2070:	9b e0       	ldi	r25, 0x0B	; 11
    2072:	92 9f       	mul	r25, r18
    2074:	a0 01       	movw	r20, r0
    2076:	93 9f       	mul	r25, r19
    2078:	50 0d       	add	r21, r0
    207a:	11 24       	eor	r1, r1
    207c:	df 01       	movw	r26, r30
    207e:	01 80       	ldd	r0, Z+1	; 0x01
    2080:	f2 81       	ldd	r31, Z+2	; 0x02
    2082:	e0 2d       	mov	r30, r0
    2084:	04 80       	ldd	r0, Z+4	; 0x04
    2086:	f5 81       	ldd	r31, Z+5	; 0x05
    2088:	e0 2d       	mov	r30, r0
    208a:	12 96       	adiw	r26, 0x02	; 2
    208c:	fc 93       	st	X, r31
    208e:	ee 93       	st	-X, r30
    2090:	11 97       	sbiw	r26, 0x01	; 1
    2092:	42 58       	subi	r20, 0x82	; 130
    2094:	5b 4e       	sbci	r21, 0xEB	; 235
    2096:	e4 17       	cp	r30, r20
    2098:	f5 07       	cpc	r31, r21
    209a:	29 f4       	brne	.+10     	; 0x20a6 <vTaskSwitchContext+0xa2>
    209c:	44 81       	ldd	r20, Z+4	; 0x04
    209e:	55 81       	ldd	r21, Z+5	; 0x05
    20a0:	fd 01       	movw	r30, r26
    20a2:	52 83       	std	Z+2, r21	; 0x02
    20a4:	41 83       	std	Z+1, r20	; 0x01
    20a6:	9b e0       	ldi	r25, 0x0B	; 11
    20a8:	92 9f       	mul	r25, r18
    20aa:	f0 01       	movw	r30, r0
    20ac:	93 9f       	mul	r25, r19
    20ae:	f0 0d       	add	r31, r0
    20b0:	11 24       	eor	r1, r1
    20b2:	e5 58       	subi	r30, 0x85	; 133
    20b4:	fb 4e       	sbci	r31, 0xEB	; 235
    20b6:	01 80       	ldd	r0, Z+1	; 0x01
    20b8:	f2 81       	ldd	r31, Z+2	; 0x02
    20ba:	e0 2d       	mov	r30, r0
    20bc:	20 85       	ldd	r18, Z+8	; 0x08
    20be:	31 85       	ldd	r19, Z+9	; 0x09
    20c0:	30 93 ea 14 	sts	0x14EA, r19	; 0x8014ea <pxCurrentTCB+0x1>
    20c4:	20 93 e9 14 	sts	0x14E9, r18	; 0x8014e9 <pxCurrentTCB>
    20c8:	80 93 39 14 	sts	0x1439, r24	; 0x801439 <uxTopReadyPriority>
    20cc:	08 95       	ret

000020ce <vTaskPlaceOnEventList>:
    20ce:	cf 92       	push	r12
    20d0:	df 92       	push	r13
    20d2:	ef 92       	push	r14
    20d4:	ff 92       	push	r15
    20d6:	6a 01       	movw	r12, r20
    20d8:	7b 01       	movw	r14, r22
    20da:	60 91 e9 14 	lds	r22, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    20de:	70 91 ea 14 	lds	r23, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    20e2:	62 5f       	subi	r22, 0xF2	; 242
    20e4:	7f 4f       	sbci	r23, 0xFF	; 255
    20e6:	0e 94 67 03 	call	0x6ce	; 0x6ce <vListInsert>
    20ea:	41 e0       	ldi	r20, 0x01	; 1
    20ec:	c7 01       	movw	r24, r14
    20ee:	b6 01       	movw	r22, r12
    20f0:	c7 db       	rcall	.-2162   	; 0x1880 <prvAddCurrentTaskToDelayedList>
    20f2:	ff 90       	pop	r15
    20f4:	ef 90       	pop	r14
    20f6:	df 90       	pop	r13
    20f8:	cf 90       	pop	r12
    20fa:	08 95       	ret

000020fc <vTaskPlaceOnEventListRestricted>:
    20fc:	cf 93       	push	r28
    20fe:	df 93       	push	r29
    2100:	fc 01       	movw	r30, r24
    2102:	cb 01       	movw	r24, r22
    2104:	ba 01       	movw	r22, r20
    2106:	a1 81       	ldd	r26, Z+1	; 0x01
    2108:	b2 81       	ldd	r27, Z+2	; 0x02
    210a:	c0 91 e9 14 	lds	r28, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    210e:	d0 91 ea 14 	lds	r29, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    2112:	bb 8b       	std	Y+19, r27	; 0x13
    2114:	aa 8b       	std	Y+18, r26	; 0x12
    2116:	c0 91 e9 14 	lds	r28, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    211a:	d0 91 ea 14 	lds	r29, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    211e:	16 96       	adiw	r26, 0x06	; 6
    2120:	4d 91       	ld	r20, X+
    2122:	5c 91       	ld	r21, X
    2124:	17 97       	sbiw	r26, 0x07	; 7
    2126:	5d 8b       	std	Y+21, r21	; 0x15
    2128:	4c 8b       	std	Y+20, r20	; 0x14
    212a:	16 96       	adiw	r26, 0x06	; 6
    212c:	cd 91       	ld	r28, X+
    212e:	dc 91       	ld	r29, X
    2130:	17 97       	sbiw	r26, 0x07	; 7
    2132:	40 91 e9 14 	lds	r20, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    2136:	50 91 ea 14 	lds	r21, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    213a:	42 5f       	subi	r20, 0xF2	; 242
    213c:	5f 4f       	sbci	r21, 0xFF	; 255
    213e:	5d 83       	std	Y+5, r21	; 0x05
    2140:	4c 83       	std	Y+4, r20	; 0x04
    2142:	40 91 e9 14 	lds	r20, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    2146:	50 91 ea 14 	lds	r21, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    214a:	42 5f       	subi	r20, 0xF2	; 242
    214c:	5f 4f       	sbci	r21, 0xFF	; 255
    214e:	17 96       	adiw	r26, 0x07	; 7
    2150:	5c 93       	st	X, r21
    2152:	4e 93       	st	-X, r20
    2154:	16 97       	sbiw	r26, 0x06	; 6
    2156:	a0 91 e9 14 	lds	r26, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    215a:	b0 91 ea 14 	lds	r27, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    215e:	59 96       	adiw	r26, 0x19	; 25
    2160:	fc 93       	st	X, r31
    2162:	ee 93       	st	-X, r30
    2164:	58 97       	sbiw	r26, 0x18	; 24
    2166:	30 81       	ld	r19, Z
    2168:	3f 5f       	subi	r19, 0xFF	; 255
    216a:	30 83       	st	Z, r19
    216c:	22 23       	and	r18, r18
    216e:	19 f0       	breq	.+6      	; 0x2176 <vTaskPlaceOnEventListRestricted+0x7a>
    2170:	6f ef       	ldi	r22, 0xFF	; 255
    2172:	7f ef       	ldi	r23, 0xFF	; 255
    2174:	cb 01       	movw	r24, r22
    2176:	42 2f       	mov	r20, r18
    2178:	83 db       	rcall	.-2298   	; 0x1880 <prvAddCurrentTaskToDelayedList>
    217a:	df 91       	pop	r29
    217c:	cf 91       	pop	r28
    217e:	08 95       	ret

00002180 <xTaskRemoveFromEventList>:
    2180:	cf 93       	push	r28
    2182:	df 93       	push	r29
    2184:	dc 01       	movw	r26, r24
    2186:	17 96       	adiw	r26, 0x07	; 7
    2188:	ed 91       	ld	r30, X+
    218a:	fc 91       	ld	r31, X
    218c:	18 97       	sbiw	r26, 0x08	; 8
    218e:	00 84       	ldd	r0, Z+8	; 0x08
    2190:	f1 85       	ldd	r31, Z+9	; 0x09
    2192:	e0 2d       	mov	r30, r0
    2194:	a0 8d       	ldd	r26, Z+24	; 0x18
    2196:	b1 8d       	ldd	r27, Z+25	; 0x19
    2198:	c2 89       	ldd	r28, Z+18	; 0x12
    219a:	d3 89       	ldd	r29, Z+19	; 0x13
    219c:	84 89       	ldd	r24, Z+20	; 0x14
    219e:	95 89       	ldd	r25, Z+21	; 0x15
    21a0:	9f 83       	std	Y+7, r25	; 0x07
    21a2:	8e 83       	std	Y+6, r24	; 0x06
    21a4:	c4 89       	ldd	r28, Z+20	; 0x14
    21a6:	d5 89       	ldd	r29, Z+21	; 0x15
    21a8:	82 89       	ldd	r24, Z+18	; 0x12
    21aa:	93 89       	ldd	r25, Z+19	; 0x13
    21ac:	9d 83       	std	Y+5, r25	; 0x05
    21ae:	8c 83       	std	Y+4, r24	; 0x04
    21b0:	11 96       	adiw	r26, 0x01	; 1
    21b2:	8d 91       	ld	r24, X+
    21b4:	9c 91       	ld	r25, X
    21b6:	12 97       	sbiw	r26, 0x02	; 2
    21b8:	9f 01       	movw	r18, r30
    21ba:	22 5f       	subi	r18, 0xF2	; 242
    21bc:	3f 4f       	sbci	r19, 0xFF	; 255
    21be:	82 17       	cp	r24, r18
    21c0:	93 07       	cpc	r25, r19
    21c2:	31 f4       	brne	.+12     	; 0x21d0 <xTaskRemoveFromEventList+0x50>
    21c4:	84 89       	ldd	r24, Z+20	; 0x14
    21c6:	95 89       	ldd	r25, Z+21	; 0x15
    21c8:	12 96       	adiw	r26, 0x02	; 2
    21ca:	9c 93       	st	X, r25
    21cc:	8e 93       	st	-X, r24
    21ce:	11 97       	sbiw	r26, 0x01	; 1
    21d0:	11 8e       	std	Z+25, r1	; 0x19
    21d2:	10 8e       	std	Z+24, r1	; 0x18
    21d4:	8c 91       	ld	r24, X
    21d6:	81 50       	subi	r24, 0x01	; 1
    21d8:	8c 93       	st	X, r24
    21da:	80 91 2a 14 	lds	r24, 0x142A	; 0x80142a <uxSchedulerSuspended>
    21de:	81 11       	cpse	r24, r1
    21e0:	52 c0       	rjmp	.+164    	; 0x2286 <__stack+0x87>
    21e2:	a4 85       	ldd	r26, Z+12	; 0x0c
    21e4:	b5 85       	ldd	r27, Z+13	; 0x0d
    21e6:	c6 81       	ldd	r28, Z+6	; 0x06
    21e8:	d7 81       	ldd	r29, Z+7	; 0x07
    21ea:	80 85       	ldd	r24, Z+8	; 0x08
    21ec:	91 85       	ldd	r25, Z+9	; 0x09
    21ee:	9f 83       	std	Y+7, r25	; 0x07
    21f0:	8e 83       	std	Y+6, r24	; 0x06
    21f2:	c0 85       	ldd	r28, Z+8	; 0x08
    21f4:	d1 85       	ldd	r29, Z+9	; 0x09
    21f6:	86 81       	ldd	r24, Z+6	; 0x06
    21f8:	97 81       	ldd	r25, Z+7	; 0x07
    21fa:	9d 83       	std	Y+5, r25	; 0x05
    21fc:	8c 83       	std	Y+4, r24	; 0x04
    21fe:	11 96       	adiw	r26, 0x01	; 1
    2200:	8d 91       	ld	r24, X+
    2202:	9c 91       	ld	r25, X
    2204:	12 97       	sbiw	r26, 0x02	; 2
    2206:	9f 01       	movw	r18, r30
    2208:	2e 5f       	subi	r18, 0xFE	; 254
    220a:	3f 4f       	sbci	r19, 0xFF	; 255
    220c:	82 17       	cp	r24, r18
    220e:	93 07       	cpc	r25, r19
    2210:	31 f4       	brne	.+12     	; 0x221e <__stack+0x1f>
    2212:	80 85       	ldd	r24, Z+8	; 0x08
    2214:	91 85       	ldd	r25, Z+9	; 0x09
    2216:	12 96       	adiw	r26, 0x02	; 2
    2218:	9c 93       	st	X, r25
    221a:	8e 93       	st	-X, r24
    221c:	11 97       	sbiw	r26, 0x01	; 1
    221e:	15 86       	std	Z+13, r1	; 0x0d
    2220:	14 86       	std	Z+12, r1	; 0x0c
    2222:	8c 91       	ld	r24, X
    2224:	81 50       	subi	r24, 0x01	; 1
    2226:	8c 93       	st	X, r24
    2228:	a2 8d       	ldd	r26, Z+26	; 0x1a
    222a:	80 91 39 14 	lds	r24, 0x1439	; 0x801439 <uxTopReadyPriority>
    222e:	8a 17       	cp	r24, r26
    2230:	10 f4       	brcc	.+4      	; 0x2236 <__stack+0x37>
    2232:	a0 93 39 14 	sts	0x1439, r26	; 0x801439 <uxTopReadyPriority>
    2236:	8b e0       	ldi	r24, 0x0B	; 11
    2238:	8a 9f       	mul	r24, r26
    223a:	d0 01       	movw	r26, r0
    223c:	11 24       	eor	r1, r1
    223e:	a5 58       	subi	r26, 0x85	; 133
    2240:	bb 4e       	sbci	r27, 0xEB	; 235
    2242:	11 96       	adiw	r26, 0x01	; 1
    2244:	0d 90       	ld	r0, X+
    2246:	bc 91       	ld	r27, X
    2248:	a0 2d       	mov	r26, r0
    224a:	b7 83       	std	Z+7, r27	; 0x07
    224c:	a6 83       	std	Z+6, r26	; 0x06
    224e:	16 96       	adiw	r26, 0x06	; 6
    2250:	4d 91       	ld	r20, X+
    2252:	5c 91       	ld	r21, X
    2254:	17 97       	sbiw	r26, 0x07	; 7
    2256:	51 87       	std	Z+9, r21	; 0x09
    2258:	40 87       	std	Z+8, r20	; 0x08
    225a:	16 96       	adiw	r26, 0x06	; 6
    225c:	cd 91       	ld	r28, X+
    225e:	dc 91       	ld	r29, X
    2260:	17 97       	sbiw	r26, 0x07	; 7
    2262:	3d 83       	std	Y+5, r19	; 0x05
    2264:	2c 83       	std	Y+4, r18	; 0x04
    2266:	17 96       	adiw	r26, 0x07	; 7
    2268:	3c 93       	st	X, r19
    226a:	2e 93       	st	-X, r18
    226c:	16 97       	sbiw	r26, 0x06	; 6
    226e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2270:	8a 9f       	mul	r24, r26
    2272:	d0 01       	movw	r26, r0
    2274:	11 24       	eor	r1, r1
    2276:	a5 58       	subi	r26, 0x85	; 133
    2278:	bb 4e       	sbci	r27, 0xEB	; 235
    227a:	b5 87       	std	Z+13, r27	; 0x0d
    227c:	a4 87       	std	Z+12, r26	; 0x0c
    227e:	8c 91       	ld	r24, X
    2280:	8f 5f       	subi	r24, 0xFF	; 255
    2282:	8c 93       	st	X, r24
    2284:	1c c0       	rjmp	.+56     	; 0x22be <__stack+0xbf>
    2286:	46 e5       	ldi	r20, 0x56	; 86
    2288:	54 e1       	ldi	r21, 0x14	; 20
    228a:	da 01       	movw	r26, r20
    228c:	11 96       	adiw	r26, 0x01	; 1
    228e:	cd 91       	ld	r28, X+
    2290:	dc 91       	ld	r29, X
    2292:	12 97       	sbiw	r26, 0x02	; 2
    2294:	d3 8b       	std	Z+19, r29	; 0x13
    2296:	c2 8b       	std	Z+18, r28	; 0x12
    2298:	8e 81       	ldd	r24, Y+6	; 0x06
    229a:	9f 81       	ldd	r25, Y+7	; 0x07
    229c:	95 8b       	std	Z+21, r25	; 0x15
    229e:	84 8b       	std	Z+20, r24	; 0x14
    22a0:	8e 81       	ldd	r24, Y+6	; 0x06
    22a2:	9f 81       	ldd	r25, Y+7	; 0x07
    22a4:	dc 01       	movw	r26, r24
    22a6:	15 96       	adiw	r26, 0x05	; 5
    22a8:	3c 93       	st	X, r19
    22aa:	2e 93       	st	-X, r18
    22ac:	14 97       	sbiw	r26, 0x04	; 4
    22ae:	3f 83       	std	Y+7, r19	; 0x07
    22b0:	2e 83       	std	Y+6, r18	; 0x06
    22b2:	51 8f       	std	Z+25, r21	; 0x19
    22b4:	40 8f       	std	Z+24, r20	; 0x18
    22b6:	da 01       	movw	r26, r20
    22b8:	8c 91       	ld	r24, X
    22ba:	8f 5f       	subi	r24, 0xFF	; 255
    22bc:	8c 93       	st	X, r24
    22be:	92 8d       	ldd	r25, Z+26	; 0x1a
    22c0:	e0 91 e9 14 	lds	r30, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    22c4:	f0 91 ea 14 	lds	r31, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    22c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    22ca:	89 17       	cp	r24, r25
    22cc:	20 f4       	brcc	.+8      	; 0x22d6 <__stack+0xd7>
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	80 93 33 14 	sts	0x1433, r24	; 0x801433 <xYieldPending>
    22d4:	01 c0       	rjmp	.+2      	; 0x22d8 <__stack+0xd9>
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	08 95       	ret

000022de <vTaskRemoveFromUnorderedEventList>:
    22de:	cf 93       	push	r28
    22e0:	df 93       	push	r29
    22e2:	dc 01       	movw	r26, r24
    22e4:	70 68       	ori	r23, 0x80	; 128
    22e6:	4d 93       	st	X+, r20
    22e8:	5d 93       	st	X+, r21
    22ea:	6d 93       	st	X+, r22
    22ec:	7c 93       	st	X, r23
    22ee:	13 97       	sbiw	r26, 0x03	; 3
    22f0:	18 96       	adiw	r26, 0x08	; 8
    22f2:	ed 91       	ld	r30, X+
    22f4:	fc 91       	ld	r31, X
    22f6:	19 97       	sbiw	r26, 0x09	; 9
    22f8:	1a 96       	adiw	r26, 0x0a	; 10
    22fa:	4d 91       	ld	r20, X+
    22fc:	5c 91       	ld	r21, X
    22fe:	1b 97       	sbiw	r26, 0x0b	; 11
    2300:	14 96       	adiw	r26, 0x04	; 4
    2302:	8d 91       	ld	r24, X+
    2304:	9c 91       	ld	r25, X
    2306:	15 97       	sbiw	r26, 0x05	; 5
    2308:	16 96       	adiw	r26, 0x06	; 6
    230a:	2d 91       	ld	r18, X+
    230c:	3c 91       	ld	r19, X
    230e:	17 97       	sbiw	r26, 0x07	; 7
    2310:	ec 01       	movw	r28, r24
    2312:	3f 83       	std	Y+7, r19	; 0x07
    2314:	2e 83       	std	Y+6, r18	; 0x06
    2316:	16 96       	adiw	r26, 0x06	; 6
    2318:	8d 91       	ld	r24, X+
    231a:	9c 91       	ld	r25, X
    231c:	17 97       	sbiw	r26, 0x07	; 7
    231e:	14 96       	adiw	r26, 0x04	; 4
    2320:	2d 91       	ld	r18, X+
    2322:	3c 91       	ld	r19, X
    2324:	15 97       	sbiw	r26, 0x05	; 5
    2326:	ec 01       	movw	r28, r24
    2328:	3d 83       	std	Y+5, r19	; 0x05
    232a:	2c 83       	std	Y+4, r18	; 0x04
    232c:	ea 01       	movw	r28, r20
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	9a 81       	ldd	r25, Y+2	; 0x02
    2332:	a8 17       	cp	r26, r24
    2334:	b9 07       	cpc	r27, r25
    2336:	31 f4       	brne	.+12     	; 0x2344 <vTaskRemoveFromUnorderedEventList+0x66>
    2338:	16 96       	adiw	r26, 0x06	; 6
    233a:	8d 91       	ld	r24, X+
    233c:	9c 91       	ld	r25, X
    233e:	17 97       	sbiw	r26, 0x07	; 7
    2340:	9a 83       	std	Y+2, r25	; 0x02
    2342:	89 83       	std	Y+1, r24	; 0x01
    2344:	1b 96       	adiw	r26, 0x0b	; 11
    2346:	1c 92       	st	X, r1
    2348:	1e 92       	st	-X, r1
    234a:	1a 97       	sbiw	r26, 0x0a	; 10
    234c:	da 01       	movw	r26, r20
    234e:	8c 91       	ld	r24, X
    2350:	81 50       	subi	r24, 0x01	; 1
    2352:	8c 93       	st	X, r24
    2354:	a4 85       	ldd	r26, Z+12	; 0x0c
    2356:	b5 85       	ldd	r27, Z+13	; 0x0d
    2358:	c6 81       	ldd	r28, Z+6	; 0x06
    235a:	d7 81       	ldd	r29, Z+7	; 0x07
    235c:	80 85       	ldd	r24, Z+8	; 0x08
    235e:	91 85       	ldd	r25, Z+9	; 0x09
    2360:	9f 83       	std	Y+7, r25	; 0x07
    2362:	8e 83       	std	Y+6, r24	; 0x06
    2364:	c0 85       	ldd	r28, Z+8	; 0x08
    2366:	d1 85       	ldd	r29, Z+9	; 0x09
    2368:	86 81       	ldd	r24, Z+6	; 0x06
    236a:	97 81       	ldd	r25, Z+7	; 0x07
    236c:	9d 83       	std	Y+5, r25	; 0x05
    236e:	8c 83       	std	Y+4, r24	; 0x04
    2370:	11 96       	adiw	r26, 0x01	; 1
    2372:	8d 91       	ld	r24, X+
    2374:	9c 91       	ld	r25, X
    2376:	12 97       	sbiw	r26, 0x02	; 2
    2378:	9f 01       	movw	r18, r30
    237a:	2e 5f       	subi	r18, 0xFE	; 254
    237c:	3f 4f       	sbci	r19, 0xFF	; 255
    237e:	82 17       	cp	r24, r18
    2380:	93 07       	cpc	r25, r19
    2382:	31 f4       	brne	.+12     	; 0x2390 <vTaskRemoveFromUnorderedEventList+0xb2>
    2384:	80 85       	ldd	r24, Z+8	; 0x08
    2386:	91 85       	ldd	r25, Z+9	; 0x09
    2388:	12 96       	adiw	r26, 0x02	; 2
    238a:	9c 93       	st	X, r25
    238c:	8e 93       	st	-X, r24
    238e:	11 97       	sbiw	r26, 0x01	; 1
    2390:	15 86       	std	Z+13, r1	; 0x0d
    2392:	14 86       	std	Z+12, r1	; 0x0c
    2394:	8c 91       	ld	r24, X
    2396:	81 50       	subi	r24, 0x01	; 1
    2398:	8c 93       	st	X, r24
    239a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    239c:	80 91 39 14 	lds	r24, 0x1439	; 0x801439 <uxTopReadyPriority>
    23a0:	8a 17       	cp	r24, r26
    23a2:	10 f4       	brcc	.+4      	; 0x23a8 <vTaskRemoveFromUnorderedEventList+0xca>
    23a4:	a0 93 39 14 	sts	0x1439, r26	; 0x801439 <uxTopReadyPriority>
    23a8:	8b e0       	ldi	r24, 0x0B	; 11
    23aa:	8a 9f       	mul	r24, r26
    23ac:	d0 01       	movw	r26, r0
    23ae:	11 24       	eor	r1, r1
    23b0:	a5 58       	subi	r26, 0x85	; 133
    23b2:	bb 4e       	sbci	r27, 0xEB	; 235
    23b4:	11 96       	adiw	r26, 0x01	; 1
    23b6:	0d 90       	ld	r0, X+
    23b8:	bc 91       	ld	r27, X
    23ba:	a0 2d       	mov	r26, r0
    23bc:	b7 83       	std	Z+7, r27	; 0x07
    23be:	a6 83       	std	Z+6, r26	; 0x06
    23c0:	16 96       	adiw	r26, 0x06	; 6
    23c2:	4d 91       	ld	r20, X+
    23c4:	5c 91       	ld	r21, X
    23c6:	17 97       	sbiw	r26, 0x07	; 7
    23c8:	51 87       	std	Z+9, r21	; 0x09
    23ca:	40 87       	std	Z+8, r20	; 0x08
    23cc:	16 96       	adiw	r26, 0x06	; 6
    23ce:	cd 91       	ld	r28, X+
    23d0:	dc 91       	ld	r29, X
    23d2:	17 97       	sbiw	r26, 0x07	; 7
    23d4:	3d 83       	std	Y+5, r19	; 0x05
    23d6:	2c 83       	std	Y+4, r18	; 0x04
    23d8:	17 96       	adiw	r26, 0x07	; 7
    23da:	3c 93       	st	X, r19
    23dc:	2e 93       	st	-X, r18
    23de:	16 97       	sbiw	r26, 0x06	; 6
    23e0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    23e2:	8a 9f       	mul	r24, r26
    23e4:	d0 01       	movw	r26, r0
    23e6:	11 24       	eor	r1, r1
    23e8:	a5 58       	subi	r26, 0x85	; 133
    23ea:	bb 4e       	sbci	r27, 0xEB	; 235
    23ec:	b5 87       	std	Z+13, r27	; 0x0d
    23ee:	a4 87       	std	Z+12, r26	; 0x0c
    23f0:	8c 91       	ld	r24, X
    23f2:	8f 5f       	subi	r24, 0xFF	; 255
    23f4:	8c 93       	st	X, r24
    23f6:	92 8d       	ldd	r25, Z+26	; 0x1a
    23f8:	e0 91 e9 14 	lds	r30, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    23fc:	f0 91 ea 14 	lds	r31, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    2400:	82 8d       	ldd	r24, Z+26	; 0x1a
    2402:	89 17       	cp	r24, r25
    2404:	18 f4       	brcc	.+6      	; 0x240c <vTaskRemoveFromUnorderedEventList+0x12e>
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	80 93 33 14 	sts	0x1433, r24	; 0x801433 <xYieldPending>
    240c:	df 91       	pop	r29
    240e:	cf 91       	pop	r28
    2410:	08 95       	ret

00002412 <vTaskSetTimeOutState>:
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	0f 92       	push	r0
    2418:	20 91 32 14 	lds	r18, 0x1432	; 0x801432 <xNumOfOverflows>
    241c:	fc 01       	movw	r30, r24
    241e:	20 83       	st	Z, r18
    2420:	40 91 3a 14 	lds	r20, 0x143A	; 0x80143a <xTickCount>
    2424:	50 91 3b 14 	lds	r21, 0x143B	; 0x80143b <xTickCount+0x1>
    2428:	60 91 3c 14 	lds	r22, 0x143C	; 0x80143c <xTickCount+0x2>
    242c:	70 91 3d 14 	lds	r23, 0x143D	; 0x80143d <xTickCount+0x3>
    2430:	41 83       	std	Z+1, r20	; 0x01
    2432:	52 83       	std	Z+2, r21	; 0x02
    2434:	63 83       	std	Z+3, r22	; 0x03
    2436:	74 83       	std	Z+4, r23	; 0x04
    2438:	0f 90       	pop	r0
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	08 95       	ret

0000243e <vTaskInternalSetTimeOutState>:
    243e:	20 91 32 14 	lds	r18, 0x1432	; 0x801432 <xNumOfOverflows>
    2442:	fc 01       	movw	r30, r24
    2444:	20 83       	st	Z, r18
    2446:	40 91 3a 14 	lds	r20, 0x143A	; 0x80143a <xTickCount>
    244a:	50 91 3b 14 	lds	r21, 0x143B	; 0x80143b <xTickCount+0x1>
    244e:	60 91 3c 14 	lds	r22, 0x143C	; 0x80143c <xTickCount+0x2>
    2452:	70 91 3d 14 	lds	r23, 0x143D	; 0x80143d <xTickCount+0x3>
    2456:	41 83       	std	Z+1, r20	; 0x01
    2458:	52 83       	std	Z+2, r21	; 0x02
    245a:	63 83       	std	Z+3, r22	; 0x03
    245c:	74 83       	std	Z+4, r23	; 0x04
    245e:	08 95       	ret

00002460 <xTaskCheckForTimeOut>:
    2460:	8f 92       	push	r8
    2462:	9f 92       	push	r9
    2464:	af 92       	push	r10
    2466:	bf 92       	push	r11
    2468:	cf 92       	push	r12
    246a:	df 92       	push	r13
    246c:	ef 92       	push	r14
    246e:	ff 92       	push	r15
    2470:	0f 93       	push	r16
    2472:	1f 93       	push	r17
    2474:	cf 93       	push	r28
    2476:	df 93       	push	r29
    2478:	fb 01       	movw	r30, r22
    247a:	0f b6       	in	r0, 0x3f	; 63
    247c:	f8 94       	cli
    247e:	0f 92       	push	r0
    2480:	c0 90 3a 14 	lds	r12, 0x143A	; 0x80143a <xTickCount>
    2484:	d0 90 3b 14 	lds	r13, 0x143B	; 0x80143b <xTickCount+0x1>
    2488:	e0 90 3c 14 	lds	r14, 0x143C	; 0x80143c <xTickCount+0x2>
    248c:	f0 90 3d 14 	lds	r15, 0x143D	; 0x80143d <xTickCount+0x3>
    2490:	dc 01       	movw	r26, r24
    2492:	11 96       	adiw	r26, 0x01	; 1
    2494:	0d 91       	ld	r16, X+
    2496:	1d 91       	ld	r17, X+
    2498:	2d 91       	ld	r18, X+
    249a:	3c 91       	ld	r19, X
    249c:	14 97       	sbiw	r26, 0x04	; 4
    249e:	46 01       	movw	r8, r12
    24a0:	57 01       	movw	r10, r14
    24a2:	80 1a       	sub	r8, r16
    24a4:	91 0a       	sbc	r9, r17
    24a6:	a2 0a       	sbc	r10, r18
    24a8:	b3 0a       	sbc	r11, r19
    24aa:	40 81       	ld	r20, Z
    24ac:	51 81       	ldd	r21, Z+1	; 0x01
    24ae:	62 81       	ldd	r22, Z+2	; 0x02
    24b0:	73 81       	ldd	r23, Z+3	; 0x03
    24b2:	4f 3f       	cpi	r20, 0xFF	; 255
    24b4:	bf ef       	ldi	r27, 0xFF	; 255
    24b6:	5b 07       	cpc	r21, r27
    24b8:	6b 07       	cpc	r22, r27
    24ba:	7b 07       	cpc	r23, r27
    24bc:	39 f1       	breq	.+78     	; 0x250c <xTaskCheckForTimeOut+0xac>
    24be:	ec 01       	movw	r28, r24
    24c0:	b8 81       	ld	r27, Y
    24c2:	a0 91 32 14 	lds	r26, 0x1432	; 0x801432 <xNumOfOverflows>
    24c6:	ba 17       	cp	r27, r26
    24c8:	59 f0       	breq	.+22     	; 0x24e0 <xTaskCheckForTimeOut+0x80>
    24ca:	c0 16       	cp	r12, r16
    24cc:	d1 06       	cpc	r13, r17
    24ce:	e2 06       	cpc	r14, r18
    24d0:	f3 06       	cpc	r15, r19
    24d2:	30 f0       	brcs	.+12     	; 0x24e0 <xTaskCheckForTimeOut+0x80>
    24d4:	10 82       	st	Z, r1
    24d6:	11 82       	std	Z+1, r1	; 0x01
    24d8:	12 82       	std	Z+2, r1	; 0x02
    24da:	13 82       	std	Z+3, r1	; 0x03
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	17 c0       	rjmp	.+46     	; 0x250e <xTaskCheckForTimeOut+0xae>
    24e0:	84 16       	cp	r8, r20
    24e2:	95 06       	cpc	r9, r21
    24e4:	a6 06       	cpc	r10, r22
    24e6:	b7 06       	cpc	r11, r23
    24e8:	58 f4       	brcc	.+22     	; 0x2500 <xTaskCheckForTimeOut+0xa0>
    24ea:	48 19       	sub	r20, r8
    24ec:	59 09       	sbc	r21, r9
    24ee:	6a 09       	sbc	r22, r10
    24f0:	7b 09       	sbc	r23, r11
    24f2:	40 83       	st	Z, r20
    24f4:	51 83       	std	Z+1, r21	; 0x01
    24f6:	62 83       	std	Z+2, r22	; 0x02
    24f8:	73 83       	std	Z+3, r23	; 0x03
    24fa:	a1 df       	rcall	.-190    	; 0x243e <vTaskInternalSetTimeOutState>
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	07 c0       	rjmp	.+14     	; 0x250e <xTaskCheckForTimeOut+0xae>
    2500:	10 82       	st	Z, r1
    2502:	11 82       	std	Z+1, r1	; 0x01
    2504:	12 82       	std	Z+2, r1	; 0x02
    2506:	13 82       	std	Z+3, r1	; 0x03
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	01 c0       	rjmp	.+2      	; 0x250e <xTaskCheckForTimeOut+0xae>
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	0f 90       	pop	r0
    2510:	0f be       	out	0x3f, r0	; 63
    2512:	df 91       	pop	r29
    2514:	cf 91       	pop	r28
    2516:	1f 91       	pop	r17
    2518:	0f 91       	pop	r16
    251a:	ff 90       	pop	r15
    251c:	ef 90       	pop	r14
    251e:	df 90       	pop	r13
    2520:	cf 90       	pop	r12
    2522:	bf 90       	pop	r11
    2524:	af 90       	pop	r10
    2526:	9f 90       	pop	r9
    2528:	8f 90       	pop	r8
    252a:	08 95       	ret

0000252c <vTaskMissedYield>:
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	80 93 33 14 	sts	0x1433, r24	; 0x801433 <xYieldPending>
    2532:	08 95       	ret

00002534 <xTaskGetCurrentTaskHandle>:
    2534:	80 91 e9 14 	lds	r24, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    2538:	90 91 ea 14 	lds	r25, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    253c:	08 95       	ret

0000253e <xTaskGetSchedulerState>:
    253e:	80 91 38 14 	lds	r24, 0x1438	; 0x801438 <xSchedulerRunning>
    2542:	88 23       	and	r24, r24
    2544:	31 f0       	breq	.+12     	; 0x2552 <xTaskGetSchedulerState+0x14>
    2546:	80 91 2a 14 	lds	r24, 0x142A	; 0x80142a <uxSchedulerSuspended>
    254a:	81 11       	cpse	r24, r1
    254c:	04 c0       	rjmp	.+8      	; 0x2556 <xTaskGetSchedulerState+0x18>
    254e:	82 e0       	ldi	r24, 0x02	; 2
    2550:	08 95       	ret
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	08 95       	ret
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	08 95       	ret

0000255a <xTaskPriorityDisinherit>:
    255a:	0f 93       	push	r16
    255c:	1f 93       	push	r17
    255e:	cf 93       	push	r28
    2560:	df 93       	push	r29
    2562:	fc 01       	movw	r30, r24
    2564:	89 2b       	or	r24, r25
    2566:	09 f4       	brne	.+2      	; 0x256a <xTaskPriorityDisinherit+0x10>
    2568:	49 c0       	rjmp	.+146    	; 0x25fc <xTaskPriorityDisinherit+0xa2>
    256a:	86 a5       	ldd	r24, Z+46	; 0x2e
    256c:	81 50       	subi	r24, 0x01	; 1
    256e:	86 a7       	std	Z+46, r24	; 0x2e
    2570:	22 8d       	ldd	r18, Z+26	; 0x1a
    2572:	95 a5       	ldd	r25, Z+45	; 0x2d
    2574:	29 17       	cp	r18, r25
    2576:	09 f4       	brne	.+2      	; 0x257a <xTaskPriorityDisinherit+0x20>
    2578:	43 c0       	rjmp	.+134    	; 0x2600 <xTaskPriorityDisinherit+0xa6>
    257a:	81 11       	cpse	r24, r1
    257c:	43 c0       	rjmp	.+134    	; 0x2604 <xTaskPriorityDisinherit+0xaa>
    257e:	ef 01       	movw	r28, r30
    2580:	8f 01       	movw	r16, r30
    2582:	0e 5f       	subi	r16, 0xFE	; 254
    2584:	1f 4f       	sbci	r17, 0xFF	; 255
    2586:	c8 01       	movw	r24, r16
    2588:	0e 94 a4 03 	call	0x748	; 0x748 <uxListRemove>
    258c:	ed a5       	ldd	r30, Y+45	; 0x2d
    258e:	ea 8f       	std	Y+26, r30	; 0x1a
    2590:	8a e0       	ldi	r24, 0x0A	; 10
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	a0 e0       	ldi	r26, 0x00	; 0
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	8e 1b       	sub	r24, r30
    259a:	91 09       	sbc	r25, r1
    259c:	a1 09       	sbc	r26, r1
    259e:	b1 09       	sbc	r27, r1
    25a0:	8e 87       	std	Y+14, r24	; 0x0e
    25a2:	9f 87       	std	Y+15, r25	; 0x0f
    25a4:	a8 8b       	std	Y+16, r26	; 0x10
    25a6:	b9 8b       	std	Y+17, r27	; 0x11
    25a8:	80 91 39 14 	lds	r24, 0x1439	; 0x801439 <uxTopReadyPriority>
    25ac:	8e 17       	cp	r24, r30
    25ae:	10 f4       	brcc	.+4      	; 0x25b4 <xTaskPriorityDisinherit+0x5a>
    25b0:	e0 93 39 14 	sts	0x1439, r30	; 0x801439 <uxTopReadyPriority>
    25b4:	8b e0       	ldi	r24, 0x0B	; 11
    25b6:	8e 9f       	mul	r24, r30
    25b8:	f0 01       	movw	r30, r0
    25ba:	11 24       	eor	r1, r1
    25bc:	e5 58       	subi	r30, 0x85	; 133
    25be:	fb 4e       	sbci	r31, 0xEB	; 235
    25c0:	01 80       	ldd	r0, Z+1	; 0x01
    25c2:	f2 81       	ldd	r31, Z+2	; 0x02
    25c4:	e0 2d       	mov	r30, r0
    25c6:	ff 83       	std	Y+7, r31	; 0x07
    25c8:	ee 83       	std	Y+6, r30	; 0x06
    25ca:	26 81       	ldd	r18, Z+6	; 0x06
    25cc:	37 81       	ldd	r19, Z+7	; 0x07
    25ce:	39 87       	std	Y+9, r19	; 0x09
    25d0:	28 87       	std	Y+8, r18	; 0x08
    25d2:	a6 81       	ldd	r26, Z+6	; 0x06
    25d4:	b7 81       	ldd	r27, Z+7	; 0x07
    25d6:	15 96       	adiw	r26, 0x05	; 5
    25d8:	1c 93       	st	X, r17
    25da:	0e 93       	st	-X, r16
    25dc:	14 97       	sbiw	r26, 0x04	; 4
    25de:	17 83       	std	Z+7, r17	; 0x07
    25e0:	06 83       	std	Z+6, r16	; 0x06
    25e2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    25e4:	8e 9f       	mul	r24, r30
    25e6:	f0 01       	movw	r30, r0
    25e8:	11 24       	eor	r1, r1
    25ea:	e5 58       	subi	r30, 0x85	; 133
    25ec:	fb 4e       	sbci	r31, 0xEB	; 235
    25ee:	fd 87       	std	Y+13, r31	; 0x0d
    25f0:	ec 87       	std	Y+12, r30	; 0x0c
    25f2:	80 81       	ld	r24, Z
    25f4:	8f 5f       	subi	r24, 0xFF	; 255
    25f6:	80 83       	st	Z, r24
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	05 c0       	rjmp	.+10     	; 0x2606 <xTaskPriorityDisinherit+0xac>
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	03 c0       	rjmp	.+6      	; 0x2606 <xTaskPriorityDisinherit+0xac>
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	01 c0       	rjmp	.+2      	; 0x2606 <xTaskPriorityDisinherit+0xac>
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	df 91       	pop	r29
    2608:	cf 91       	pop	r28
    260a:	1f 91       	pop	r17
    260c:	0f 91       	pop	r16
    260e:	08 95       	ret

00002610 <xTaskGenericNotifyWait>:
    2610:	4f 92       	push	r4
    2612:	5f 92       	push	r5
    2614:	6f 92       	push	r6
    2616:	7f 92       	push	r7
    2618:	af 92       	push	r10
    261a:	bf 92       	push	r11
    261c:	cf 92       	push	r12
    261e:	df 92       	push	r13
    2620:	ef 92       	push	r14
    2622:	ff 92       	push	r15
    2624:	0f 93       	push	r16
    2626:	1f 93       	push	r17
    2628:	cf 93       	push	r28
    262a:	df 93       	push	r29
    262c:	28 01       	movw	r4, r16
    262e:	39 01       	movw	r6, r18
    2630:	0f b6       	in	r0, 0x3f	; 63
    2632:	f8 94       	cli
    2634:	0f 92       	push	r0
    2636:	e0 91 e9 14 	lds	r30, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    263a:	f0 91 ea 14 	lds	r31, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    263e:	c8 2f       	mov	r28, r24
    2640:	d0 e0       	ldi	r29, 0x00	; 0
    2642:	ec 0f       	add	r30, r28
    2644:	fd 1f       	adc	r31, r29
    2646:	83 a9       	ldd	r24, Z+51	; 0x33
    2648:	82 30       	cpi	r24, 0x02	; 2
    264a:	71 f1       	breq	.+92     	; 0x26a8 <xTaskGenericNotifyWait+0x98>
    264c:	e0 91 e9 14 	lds	r30, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    2650:	f0 91 ea 14 	lds	r31, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    2654:	ce 01       	movw	r24, r28
    2656:	88 0f       	add	r24, r24
    2658:	99 1f       	adc	r25, r25
    265a:	88 0f       	add	r24, r24
    265c:	99 1f       	adc	r25, r25
    265e:	e8 0f       	add	r30, r24
    2660:	f9 1f       	adc	r31, r25
    2662:	87 a5       	ldd	r24, Z+47	; 0x2f
    2664:	90 a9       	ldd	r25, Z+48	; 0x30
    2666:	a1 a9       	ldd	r26, Z+49	; 0x31
    2668:	b2 a9       	ldd	r27, Z+50	; 0x32
    266a:	40 95       	com	r20
    266c:	50 95       	com	r21
    266e:	60 95       	com	r22
    2670:	70 95       	com	r23
    2672:	48 23       	and	r20, r24
    2674:	59 23       	and	r21, r25
    2676:	6a 23       	and	r22, r26
    2678:	7b 23       	and	r23, r27
    267a:	47 a7       	std	Z+47, r20	; 0x2f
    267c:	50 ab       	std	Z+48, r21	; 0x30
    267e:	61 ab       	std	Z+49, r22	; 0x31
    2680:	72 ab       	std	Z+50, r23	; 0x32
    2682:	e0 91 e9 14 	lds	r30, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    2686:	f0 91 ea 14 	lds	r31, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    268a:	ec 0f       	add	r30, r28
    268c:	fd 1f       	adc	r31, r29
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	83 ab       	std	Z+51, r24	; 0x33
    2692:	a1 14       	cp	r10, r1
    2694:	b1 04       	cpc	r11, r1
    2696:	c1 04       	cpc	r12, r1
    2698:	d1 04       	cpc	r13, r1
    269a:	31 f0       	breq	.+12     	; 0x26a8 <xTaskGenericNotifyWait+0x98>
    269c:	41 e0       	ldi	r20, 0x01	; 1
    269e:	c6 01       	movw	r24, r12
    26a0:	b5 01       	movw	r22, r10
    26a2:	ee d8       	rcall	.-3620   	; 0x1880 <prvAddCurrentTaskToDelayedList>
    26a4:	0e 94 20 04 	call	0x840	; 0x840 <vPortYield>
    26a8:	0f 90       	pop	r0
    26aa:	0f be       	out	0x3f, r0	; 63
    26ac:	0f b6       	in	r0, 0x3f	; 63
    26ae:	f8 94       	cli
    26b0:	0f 92       	push	r0
    26b2:	e1 14       	cp	r14, r1
    26b4:	f1 04       	cpc	r15, r1
    26b6:	a1 f0       	breq	.+40     	; 0x26e0 <xTaskGenericNotifyWait+0xd0>
    26b8:	e0 91 e9 14 	lds	r30, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    26bc:	f0 91 ea 14 	lds	r31, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    26c0:	ce 01       	movw	r24, r28
    26c2:	88 0f       	add	r24, r24
    26c4:	99 1f       	adc	r25, r25
    26c6:	88 0f       	add	r24, r24
    26c8:	99 1f       	adc	r25, r25
    26ca:	e8 0f       	add	r30, r24
    26cc:	f9 1f       	adc	r31, r25
    26ce:	87 a5       	ldd	r24, Z+47	; 0x2f
    26d0:	90 a9       	ldd	r25, Z+48	; 0x30
    26d2:	a1 a9       	ldd	r26, Z+49	; 0x31
    26d4:	b2 a9       	ldd	r27, Z+50	; 0x32
    26d6:	f7 01       	movw	r30, r14
    26d8:	80 83       	st	Z, r24
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	a2 83       	std	Z+2, r26	; 0x02
    26de:	b3 83       	std	Z+3, r27	; 0x03
    26e0:	e0 91 e9 14 	lds	r30, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    26e4:	f0 91 ea 14 	lds	r31, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    26e8:	ec 0f       	add	r30, r28
    26ea:	fd 1f       	adc	r31, r29
    26ec:	83 a9       	ldd	r24, Z+51	; 0x33
    26ee:	82 30       	cpi	r24, 0x02	; 2
    26f0:	e9 f4       	brne	.+58     	; 0x272c <xTaskGenericNotifyWait+0x11c>
    26f2:	e0 91 e9 14 	lds	r30, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    26f6:	f0 91 ea 14 	lds	r31, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    26fa:	ce 01       	movw	r24, r28
    26fc:	88 0f       	add	r24, r24
    26fe:	99 1f       	adc	r25, r25
    2700:	88 0f       	add	r24, r24
    2702:	99 1f       	adc	r25, r25
    2704:	e8 0f       	add	r30, r24
    2706:	f9 1f       	adc	r31, r25
    2708:	87 a5       	ldd	r24, Z+47	; 0x2f
    270a:	90 a9       	ldd	r25, Z+48	; 0x30
    270c:	a1 a9       	ldd	r26, Z+49	; 0x31
    270e:	b2 a9       	ldd	r27, Z+50	; 0x32
    2710:	40 94       	com	r4
    2712:	50 94       	com	r5
    2714:	60 94       	com	r6
    2716:	70 94       	com	r7
    2718:	48 22       	and	r4, r24
    271a:	59 22       	and	r5, r25
    271c:	6a 22       	and	r6, r26
    271e:	7b 22       	and	r7, r27
    2720:	47 a6       	std	Z+47, r4	; 0x2f
    2722:	50 aa       	std	Z+48, r5	; 0x30
    2724:	61 aa       	std	Z+49, r6	; 0x31
    2726:	72 aa       	std	Z+50, r7	; 0x32
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	01 c0       	rjmp	.+2      	; 0x272e <xTaskGenericNotifyWait+0x11e>
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	20 91 e9 14 	lds	r18, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    2732:	30 91 ea 14 	lds	r19, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    2736:	c2 0f       	add	r28, r18
    2738:	d3 1f       	adc	r29, r19
    273a:	1b aa       	std	Y+51, r1	; 0x33
    273c:	0f 90       	pop	r0
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	df 91       	pop	r29
    2742:	cf 91       	pop	r28
    2744:	1f 91       	pop	r17
    2746:	0f 91       	pop	r16
    2748:	ff 90       	pop	r15
    274a:	ef 90       	pop	r14
    274c:	df 90       	pop	r13
    274e:	cf 90       	pop	r12
    2750:	bf 90       	pop	r11
    2752:	af 90       	pop	r10
    2754:	7f 90       	pop	r7
    2756:	6f 90       	pop	r6
    2758:	5f 90       	pop	r5
    275a:	4f 90       	pop	r4
    275c:	08 95       	ret

0000275e <xTaskGenericNotify>:
    275e:	8f 92       	push	r8
    2760:	9f 92       	push	r9
    2762:	af 92       	push	r10
    2764:	bf 92       	push	r11
    2766:	ef 92       	push	r14
    2768:	ff 92       	push	r15
    276a:	0f 93       	push	r16
    276c:	cf 93       	push	r28
    276e:	df 93       	push	r29
    2770:	dc 01       	movw	r26, r24
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	0f 92       	push	r0
    2778:	e1 14       	cp	r14, r1
    277a:	f1 04       	cpc	r15, r1
    277c:	89 f0       	breq	.+34     	; 0x27a0 <xTaskGenericNotify+0x42>
    277e:	e6 2f       	mov	r30, r22
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	ee 0f       	add	r30, r30
    2784:	ff 1f       	adc	r31, r31
    2786:	ee 0f       	add	r30, r30
    2788:	ff 1f       	adc	r31, r31
    278a:	e8 0f       	add	r30, r24
    278c:	f9 1f       	adc	r31, r25
    278e:	87 a4       	ldd	r8, Z+47	; 0x2f
    2790:	90 a8       	ldd	r9, Z+48	; 0x30
    2792:	a1 a8       	ldd	r10, Z+49	; 0x31
    2794:	b2 a8       	ldd	r11, Z+50	; 0x32
    2796:	f7 01       	movw	r30, r14
    2798:	80 82       	st	Z, r8
    279a:	91 82       	std	Z+1, r9	; 0x01
    279c:	a2 82       	std	Z+2, r10	; 0x02
    279e:	b3 82       	std	Z+3, r11	; 0x03
    27a0:	70 e0       	ldi	r23, 0x00	; 0
    27a2:	fd 01       	movw	r30, r26
    27a4:	e6 0f       	add	r30, r22
    27a6:	f7 1f       	adc	r31, r23
    27a8:	83 a9       	ldd	r24, Z+51	; 0x33
    27aa:	92 e0       	ldi	r25, 0x02	; 2
    27ac:	93 ab       	std	Z+51, r25	; 0x33
    27ae:	02 30       	cpi	r16, 0x02	; 2
    27b0:	01 f1       	breq	.+64     	; 0x27f2 <xTaskGenericNotify+0x94>
    27b2:	18 f4       	brcc	.+6      	; 0x27ba <xTaskGenericNotify+0x5c>
    27b4:	01 30       	cpi	r16, 0x01	; 1
    27b6:	31 f0       	breq	.+12     	; 0x27c4 <xTaskGenericNotify+0x66>
    27b8:	4d c0       	rjmp	.+154    	; 0x2854 <xTaskGenericNotify+0xf6>
    27ba:	03 30       	cpi	r16, 0x03	; 3
    27bc:	79 f1       	breq	.+94     	; 0x281c <xTaskGenericNotify+0xbe>
    27be:	04 30       	cpi	r16, 0x04	; 4
    27c0:	d1 f1       	breq	.+116    	; 0x2836 <xTaskGenericNotify+0xd8>
    27c2:	48 c0       	rjmp	.+144    	; 0x2854 <xTaskGenericNotify+0xf6>
    27c4:	66 0f       	add	r22, r22
    27c6:	77 1f       	adc	r23, r23
    27c8:	66 0f       	add	r22, r22
    27ca:	77 1f       	adc	r23, r23
    27cc:	fd 01       	movw	r30, r26
    27ce:	e6 0f       	add	r30, r22
    27d0:	f7 1f       	adc	r31, r23
    27d2:	87 a4       	ldd	r8, Z+47	; 0x2f
    27d4:	90 a8       	ldd	r9, Z+48	; 0x30
    27d6:	a1 a8       	ldd	r10, Z+49	; 0x31
    27d8:	b2 a8       	ldd	r11, Z+50	; 0x32
    27da:	ba 01       	movw	r22, r20
    27dc:	a9 01       	movw	r20, r18
    27de:	48 29       	or	r20, r8
    27e0:	59 29       	or	r21, r9
    27e2:	6a 29       	or	r22, r10
    27e4:	7b 29       	or	r23, r11
    27e6:	47 a7       	std	Z+47, r20	; 0x2f
    27e8:	50 ab       	std	Z+48, r21	; 0x30
    27ea:	61 ab       	std	Z+49, r22	; 0x31
    27ec:	72 ab       	std	Z+50, r23	; 0x32
    27ee:	01 e0       	ldi	r16, 0x01	; 1
    27f0:	34 c0       	rjmp	.+104    	; 0x285a <xTaskGenericNotify+0xfc>
    27f2:	66 0f       	add	r22, r22
    27f4:	77 1f       	adc	r23, r23
    27f6:	66 0f       	add	r22, r22
    27f8:	77 1f       	adc	r23, r23
    27fa:	fd 01       	movw	r30, r26
    27fc:	e6 0f       	add	r30, r22
    27fe:	f7 1f       	adc	r31, r23
    2800:	47 a5       	ldd	r20, Z+47	; 0x2f
    2802:	50 a9       	ldd	r21, Z+48	; 0x30
    2804:	61 a9       	ldd	r22, Z+49	; 0x31
    2806:	72 a9       	ldd	r23, Z+50	; 0x32
    2808:	4f 5f       	subi	r20, 0xFF	; 255
    280a:	5f 4f       	sbci	r21, 0xFF	; 255
    280c:	6f 4f       	sbci	r22, 0xFF	; 255
    280e:	7f 4f       	sbci	r23, 0xFF	; 255
    2810:	47 a7       	std	Z+47, r20	; 0x2f
    2812:	50 ab       	std	Z+48, r21	; 0x30
    2814:	61 ab       	std	Z+49, r22	; 0x31
    2816:	72 ab       	std	Z+50, r23	; 0x32
    2818:	01 e0       	ldi	r16, 0x01	; 1
    281a:	1f c0       	rjmp	.+62     	; 0x285a <xTaskGenericNotify+0xfc>
    281c:	66 0f       	add	r22, r22
    281e:	77 1f       	adc	r23, r23
    2820:	66 0f       	add	r22, r22
    2822:	77 1f       	adc	r23, r23
    2824:	fd 01       	movw	r30, r26
    2826:	e6 0f       	add	r30, r22
    2828:	f7 1f       	adc	r31, r23
    282a:	27 a7       	std	Z+47, r18	; 0x2f
    282c:	30 ab       	std	Z+48, r19	; 0x30
    282e:	41 ab       	std	Z+49, r20	; 0x31
    2830:	52 ab       	std	Z+50, r21	; 0x32
    2832:	01 e0       	ldi	r16, 0x01	; 1
    2834:	12 c0       	rjmp	.+36     	; 0x285a <xTaskGenericNotify+0xfc>
    2836:	82 30       	cpi	r24, 0x02	; 2
    2838:	79 f0       	breq	.+30     	; 0x2858 <xTaskGenericNotify+0xfa>
    283a:	66 0f       	add	r22, r22
    283c:	77 1f       	adc	r23, r23
    283e:	66 0f       	add	r22, r22
    2840:	77 1f       	adc	r23, r23
    2842:	fd 01       	movw	r30, r26
    2844:	e6 0f       	add	r30, r22
    2846:	f7 1f       	adc	r31, r23
    2848:	27 a7       	std	Z+47, r18	; 0x2f
    284a:	30 ab       	std	Z+48, r19	; 0x30
    284c:	41 ab       	std	Z+49, r20	; 0x31
    284e:	52 ab       	std	Z+50, r21	; 0x32
    2850:	01 e0       	ldi	r16, 0x01	; 1
    2852:	03 c0       	rjmp	.+6      	; 0x285a <xTaskGenericNotify+0xfc>
    2854:	01 e0       	ldi	r16, 0x01	; 1
    2856:	01 c0       	rjmp	.+2      	; 0x285a <xTaskGenericNotify+0xfc>
    2858:	00 e0       	ldi	r16, 0x00	; 0
    285a:	81 30       	cpi	r24, 0x01	; 1
    285c:	09 f0       	breq	.+2      	; 0x2860 <xTaskGenericNotify+0x102>
    285e:	69 c0       	rjmp	.+210    	; 0x2932 <xTaskGenericNotify+0x1d4>
    2860:	1c 96       	adiw	r26, 0x0c	; 12
    2862:	ed 91       	ld	r30, X+
    2864:	fc 91       	ld	r31, X
    2866:	1d 97       	sbiw	r26, 0x0d	; 13
    2868:	16 96       	adiw	r26, 0x06	; 6
    286a:	cd 91       	ld	r28, X+
    286c:	dc 91       	ld	r29, X
    286e:	17 97       	sbiw	r26, 0x07	; 7
    2870:	18 96       	adiw	r26, 0x08	; 8
    2872:	8d 91       	ld	r24, X+
    2874:	9c 91       	ld	r25, X
    2876:	19 97       	sbiw	r26, 0x09	; 9
    2878:	9f 83       	std	Y+7, r25	; 0x07
    287a:	8e 83       	std	Y+6, r24	; 0x06
    287c:	18 96       	adiw	r26, 0x08	; 8
    287e:	cd 91       	ld	r28, X+
    2880:	dc 91       	ld	r29, X
    2882:	19 97       	sbiw	r26, 0x09	; 9
    2884:	16 96       	adiw	r26, 0x06	; 6
    2886:	8d 91       	ld	r24, X+
    2888:	9c 91       	ld	r25, X
    288a:	17 97       	sbiw	r26, 0x07	; 7
    288c:	9d 83       	std	Y+5, r25	; 0x05
    288e:	8c 83       	std	Y+4, r24	; 0x04
    2890:	81 81       	ldd	r24, Z+1	; 0x01
    2892:	92 81       	ldd	r25, Z+2	; 0x02
    2894:	9d 01       	movw	r18, r26
    2896:	2e 5f       	subi	r18, 0xFE	; 254
    2898:	3f 4f       	sbci	r19, 0xFF	; 255
    289a:	82 17       	cp	r24, r18
    289c:	93 07       	cpc	r25, r19
    289e:	31 f4       	brne	.+12     	; 0x28ac <xTaskGenericNotify+0x14e>
    28a0:	18 96       	adiw	r26, 0x08	; 8
    28a2:	8d 91       	ld	r24, X+
    28a4:	9c 91       	ld	r25, X
    28a6:	19 97       	sbiw	r26, 0x09	; 9
    28a8:	92 83       	std	Z+2, r25	; 0x02
    28aa:	81 83       	std	Z+1, r24	; 0x01
    28ac:	1d 96       	adiw	r26, 0x0d	; 13
    28ae:	1c 92       	st	X, r1
    28b0:	1e 92       	st	-X, r1
    28b2:	1c 97       	sbiw	r26, 0x0c	; 12
    28b4:	80 81       	ld	r24, Z
    28b6:	81 50       	subi	r24, 0x01	; 1
    28b8:	80 83       	st	Z, r24
    28ba:	5a 96       	adiw	r26, 0x1a	; 26
    28bc:	ec 91       	ld	r30, X
    28be:	5a 97       	sbiw	r26, 0x1a	; 26
    28c0:	80 91 39 14 	lds	r24, 0x1439	; 0x801439 <uxTopReadyPriority>
    28c4:	8e 17       	cp	r24, r30
    28c6:	10 f4       	brcc	.+4      	; 0x28cc <xTaskGenericNotify+0x16e>
    28c8:	e0 93 39 14 	sts	0x1439, r30	; 0x801439 <uxTopReadyPriority>
    28cc:	8b e0       	ldi	r24, 0x0B	; 11
    28ce:	8e 9f       	mul	r24, r30
    28d0:	f0 01       	movw	r30, r0
    28d2:	11 24       	eor	r1, r1
    28d4:	e5 58       	subi	r30, 0x85	; 133
    28d6:	fb 4e       	sbci	r31, 0xEB	; 235
    28d8:	01 80       	ldd	r0, Z+1	; 0x01
    28da:	f2 81       	ldd	r31, Z+2	; 0x02
    28dc:	e0 2d       	mov	r30, r0
    28de:	17 96       	adiw	r26, 0x07	; 7
    28e0:	fc 93       	st	X, r31
    28e2:	ee 93       	st	-X, r30
    28e4:	16 97       	sbiw	r26, 0x06	; 6
    28e6:	46 81       	ldd	r20, Z+6	; 0x06
    28e8:	57 81       	ldd	r21, Z+7	; 0x07
    28ea:	19 96       	adiw	r26, 0x09	; 9
    28ec:	5c 93       	st	X, r21
    28ee:	4e 93       	st	-X, r20
    28f0:	18 97       	sbiw	r26, 0x08	; 8
    28f2:	c6 81       	ldd	r28, Z+6	; 0x06
    28f4:	d7 81       	ldd	r29, Z+7	; 0x07
    28f6:	3d 83       	std	Y+5, r19	; 0x05
    28f8:	2c 83       	std	Y+4, r18	; 0x04
    28fa:	37 83       	std	Z+7, r19	; 0x07
    28fc:	26 83       	std	Z+6, r18	; 0x06
    28fe:	5a 96       	adiw	r26, 0x1a	; 26
    2900:	ec 91       	ld	r30, X
    2902:	5a 97       	sbiw	r26, 0x1a	; 26
    2904:	8e 9f       	mul	r24, r30
    2906:	f0 01       	movw	r30, r0
    2908:	11 24       	eor	r1, r1
    290a:	e5 58       	subi	r30, 0x85	; 133
    290c:	fb 4e       	sbci	r31, 0xEB	; 235
    290e:	1d 96       	adiw	r26, 0x0d	; 13
    2910:	fc 93       	st	X, r31
    2912:	ee 93       	st	-X, r30
    2914:	1c 97       	sbiw	r26, 0x0c	; 12
    2916:	80 81       	ld	r24, Z
    2918:	8f 5f       	subi	r24, 0xFF	; 255
    291a:	80 83       	st	Z, r24
    291c:	5a 96       	adiw	r26, 0x1a	; 26
    291e:	9c 91       	ld	r25, X
    2920:	e0 91 e9 14 	lds	r30, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    2924:	f0 91 ea 14 	lds	r31, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    2928:	82 8d       	ldd	r24, Z+26	; 0x1a
    292a:	89 17       	cp	r24, r25
    292c:	10 f4       	brcc	.+4      	; 0x2932 <xTaskGenericNotify+0x1d4>
    292e:	0e 94 20 04 	call	0x840	; 0x840 <vPortYield>
    2932:	0f 90       	pop	r0
    2934:	0f be       	out	0x3f, r0	; 63
    2936:	80 2f       	mov	r24, r16
    2938:	df 91       	pop	r29
    293a:	cf 91       	pop	r28
    293c:	0f 91       	pop	r16
    293e:	ff 90       	pop	r15
    2940:	ef 90       	pop	r14
    2942:	bf 90       	pop	r11
    2944:	af 90       	pop	r10
    2946:	9f 90       	pop	r9
    2948:	8f 90       	pop	r8
    294a:	08 95       	ret

0000294c <xTaskGenericNotifyFromISR>:
    294c:	8f 92       	push	r8
    294e:	9f 92       	push	r9
    2950:	af 92       	push	r10
    2952:	bf 92       	push	r11
    2954:	cf 92       	push	r12
    2956:	df 92       	push	r13
    2958:	ef 92       	push	r14
    295a:	ff 92       	push	r15
    295c:	0f 93       	push	r16
    295e:	cf 93       	push	r28
    2960:	df 93       	push	r29
    2962:	dc 01       	movw	r26, r24
    2964:	e1 14       	cp	r14, r1
    2966:	f1 04       	cpc	r15, r1
    2968:	89 f0       	breq	.+34     	; 0x298c <xTaskGenericNotifyFromISR+0x40>
    296a:	e6 2f       	mov	r30, r22
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	ee 0f       	add	r30, r30
    2970:	ff 1f       	adc	r31, r31
    2972:	ee 0f       	add	r30, r30
    2974:	ff 1f       	adc	r31, r31
    2976:	e8 0f       	add	r30, r24
    2978:	f9 1f       	adc	r31, r25
    297a:	87 a4       	ldd	r8, Z+47	; 0x2f
    297c:	90 a8       	ldd	r9, Z+48	; 0x30
    297e:	a1 a8       	ldd	r10, Z+49	; 0x31
    2980:	b2 a8       	ldd	r11, Z+50	; 0x32
    2982:	f7 01       	movw	r30, r14
    2984:	80 82       	st	Z, r8
    2986:	91 82       	std	Z+1, r9	; 0x01
    2988:	a2 82       	std	Z+2, r10	; 0x02
    298a:	b3 82       	std	Z+3, r11	; 0x03
    298c:	70 e0       	ldi	r23, 0x00	; 0
    298e:	fd 01       	movw	r30, r26
    2990:	e6 0f       	add	r30, r22
    2992:	f7 1f       	adc	r31, r23
    2994:	93 a9       	ldd	r25, Z+51	; 0x33
    2996:	82 e0       	ldi	r24, 0x02	; 2
    2998:	83 ab       	std	Z+51, r24	; 0x33
    299a:	02 30       	cpi	r16, 0x02	; 2
    299c:	01 f1       	breq	.+64     	; 0x29de <xTaskGenericNotifyFromISR+0x92>
    299e:	18 f4       	brcc	.+6      	; 0x29a6 <xTaskGenericNotifyFromISR+0x5a>
    29a0:	01 30       	cpi	r16, 0x01	; 1
    29a2:	31 f0       	breq	.+12     	; 0x29b0 <xTaskGenericNotifyFromISR+0x64>
    29a4:	4d c0       	rjmp	.+154    	; 0x2a40 <xTaskGenericNotifyFromISR+0xf4>
    29a6:	03 30       	cpi	r16, 0x03	; 3
    29a8:	79 f1       	breq	.+94     	; 0x2a08 <xTaskGenericNotifyFromISR+0xbc>
    29aa:	04 30       	cpi	r16, 0x04	; 4
    29ac:	d1 f1       	breq	.+116    	; 0x2a22 <xTaskGenericNotifyFromISR+0xd6>
    29ae:	48 c0       	rjmp	.+144    	; 0x2a40 <xTaskGenericNotifyFromISR+0xf4>
    29b0:	66 0f       	add	r22, r22
    29b2:	77 1f       	adc	r23, r23
    29b4:	66 0f       	add	r22, r22
    29b6:	77 1f       	adc	r23, r23
    29b8:	fd 01       	movw	r30, r26
    29ba:	e6 0f       	add	r30, r22
    29bc:	f7 1f       	adc	r31, r23
    29be:	87 a4       	ldd	r8, Z+47	; 0x2f
    29c0:	90 a8       	ldd	r9, Z+48	; 0x30
    29c2:	a1 a8       	ldd	r10, Z+49	; 0x31
    29c4:	b2 a8       	ldd	r11, Z+50	; 0x32
    29c6:	ba 01       	movw	r22, r20
    29c8:	a9 01       	movw	r20, r18
    29ca:	48 29       	or	r20, r8
    29cc:	59 29       	or	r21, r9
    29ce:	6a 29       	or	r22, r10
    29d0:	7b 29       	or	r23, r11
    29d2:	47 a7       	std	Z+47, r20	; 0x2f
    29d4:	50 ab       	std	Z+48, r21	; 0x30
    29d6:	61 ab       	std	Z+49, r22	; 0x31
    29d8:	72 ab       	std	Z+50, r23	; 0x32
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	34 c0       	rjmp	.+104    	; 0x2a46 <xTaskGenericNotifyFromISR+0xfa>
    29de:	66 0f       	add	r22, r22
    29e0:	77 1f       	adc	r23, r23
    29e2:	66 0f       	add	r22, r22
    29e4:	77 1f       	adc	r23, r23
    29e6:	fd 01       	movw	r30, r26
    29e8:	e6 0f       	add	r30, r22
    29ea:	f7 1f       	adc	r31, r23
    29ec:	47 a5       	ldd	r20, Z+47	; 0x2f
    29ee:	50 a9       	ldd	r21, Z+48	; 0x30
    29f0:	61 a9       	ldd	r22, Z+49	; 0x31
    29f2:	72 a9       	ldd	r23, Z+50	; 0x32
    29f4:	4f 5f       	subi	r20, 0xFF	; 255
    29f6:	5f 4f       	sbci	r21, 0xFF	; 255
    29f8:	6f 4f       	sbci	r22, 0xFF	; 255
    29fa:	7f 4f       	sbci	r23, 0xFF	; 255
    29fc:	47 a7       	std	Z+47, r20	; 0x2f
    29fe:	50 ab       	std	Z+48, r21	; 0x30
    2a00:	61 ab       	std	Z+49, r22	; 0x31
    2a02:	72 ab       	std	Z+50, r23	; 0x32
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	1f c0       	rjmp	.+62     	; 0x2a46 <xTaskGenericNotifyFromISR+0xfa>
    2a08:	66 0f       	add	r22, r22
    2a0a:	77 1f       	adc	r23, r23
    2a0c:	66 0f       	add	r22, r22
    2a0e:	77 1f       	adc	r23, r23
    2a10:	fd 01       	movw	r30, r26
    2a12:	e6 0f       	add	r30, r22
    2a14:	f7 1f       	adc	r31, r23
    2a16:	27 a7       	std	Z+47, r18	; 0x2f
    2a18:	30 ab       	std	Z+48, r19	; 0x30
    2a1a:	41 ab       	std	Z+49, r20	; 0x31
    2a1c:	52 ab       	std	Z+50, r21	; 0x32
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	12 c0       	rjmp	.+36     	; 0x2a46 <xTaskGenericNotifyFromISR+0xfa>
    2a22:	92 30       	cpi	r25, 0x02	; 2
    2a24:	79 f0       	breq	.+30     	; 0x2a44 <xTaskGenericNotifyFromISR+0xf8>
    2a26:	66 0f       	add	r22, r22
    2a28:	77 1f       	adc	r23, r23
    2a2a:	66 0f       	add	r22, r22
    2a2c:	77 1f       	adc	r23, r23
    2a2e:	fd 01       	movw	r30, r26
    2a30:	e6 0f       	add	r30, r22
    2a32:	f7 1f       	adc	r31, r23
    2a34:	27 a7       	std	Z+47, r18	; 0x2f
    2a36:	30 ab       	std	Z+48, r19	; 0x30
    2a38:	41 ab       	std	Z+49, r20	; 0x31
    2a3a:	52 ab       	std	Z+50, r21	; 0x32
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	03 c0       	rjmp	.+6      	; 0x2a46 <xTaskGenericNotifyFromISR+0xfa>
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	01 c0       	rjmp	.+2      	; 0x2a46 <xTaskGenericNotifyFromISR+0xfa>
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	91 30       	cpi	r25, 0x01	; 1
    2a48:	09 f0       	breq	.+2      	; 0x2a4c <xTaskGenericNotifyFromISR+0x100>
    2a4a:	96 c0       	rjmp	.+300    	; 0x2b78 <xTaskGenericNotifyFromISR+0x22c>
    2a4c:	90 91 2a 14 	lds	r25, 0x142A	; 0x80142a <uxSchedulerSuspended>
    2a50:	91 11       	cpse	r25, r1
    2a52:	5f c0       	rjmp	.+190    	; 0x2b12 <xTaskGenericNotifyFromISR+0x1c6>
    2a54:	1c 96       	adiw	r26, 0x0c	; 12
    2a56:	ed 91       	ld	r30, X+
    2a58:	fc 91       	ld	r31, X
    2a5a:	1d 97       	sbiw	r26, 0x0d	; 13
    2a5c:	16 96       	adiw	r26, 0x06	; 6
    2a5e:	cd 91       	ld	r28, X+
    2a60:	dc 91       	ld	r29, X
    2a62:	17 97       	sbiw	r26, 0x07	; 7
    2a64:	18 96       	adiw	r26, 0x08	; 8
    2a66:	2d 91       	ld	r18, X+
    2a68:	3c 91       	ld	r19, X
    2a6a:	19 97       	sbiw	r26, 0x09	; 9
    2a6c:	3f 83       	std	Y+7, r19	; 0x07
    2a6e:	2e 83       	std	Y+6, r18	; 0x06
    2a70:	18 96       	adiw	r26, 0x08	; 8
    2a72:	cd 91       	ld	r28, X+
    2a74:	dc 91       	ld	r29, X
    2a76:	19 97       	sbiw	r26, 0x09	; 9
    2a78:	16 96       	adiw	r26, 0x06	; 6
    2a7a:	2d 91       	ld	r18, X+
    2a7c:	3c 91       	ld	r19, X
    2a7e:	17 97       	sbiw	r26, 0x07	; 7
    2a80:	3d 83       	std	Y+5, r19	; 0x05
    2a82:	2c 83       	std	Y+4, r18	; 0x04
    2a84:	41 81       	ldd	r20, Z+1	; 0x01
    2a86:	52 81       	ldd	r21, Z+2	; 0x02
    2a88:	9d 01       	movw	r18, r26
    2a8a:	2e 5f       	subi	r18, 0xFE	; 254
    2a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a8e:	42 17       	cp	r20, r18
    2a90:	53 07       	cpc	r21, r19
    2a92:	31 f4       	brne	.+12     	; 0x2aa0 <xTaskGenericNotifyFromISR+0x154>
    2a94:	18 96       	adiw	r26, 0x08	; 8
    2a96:	4d 91       	ld	r20, X+
    2a98:	5c 91       	ld	r21, X
    2a9a:	19 97       	sbiw	r26, 0x09	; 9
    2a9c:	52 83       	std	Z+2, r21	; 0x02
    2a9e:	41 83       	std	Z+1, r20	; 0x01
    2aa0:	1d 96       	adiw	r26, 0x0d	; 13
    2aa2:	1c 92       	st	X, r1
    2aa4:	1e 92       	st	-X, r1
    2aa6:	1c 97       	sbiw	r26, 0x0c	; 12
    2aa8:	90 81       	ld	r25, Z
    2aaa:	91 50       	subi	r25, 0x01	; 1
    2aac:	90 83       	st	Z, r25
    2aae:	5a 96       	adiw	r26, 0x1a	; 26
    2ab0:	ec 91       	ld	r30, X
    2ab2:	5a 97       	sbiw	r26, 0x1a	; 26
    2ab4:	90 91 39 14 	lds	r25, 0x1439	; 0x801439 <uxTopReadyPriority>
    2ab8:	9e 17       	cp	r25, r30
    2aba:	10 f4       	brcc	.+4      	; 0x2ac0 <xTaskGenericNotifyFromISR+0x174>
    2abc:	e0 93 39 14 	sts	0x1439, r30	; 0x801439 <uxTopReadyPriority>
    2ac0:	9b e0       	ldi	r25, 0x0B	; 11
    2ac2:	9e 9f       	mul	r25, r30
    2ac4:	f0 01       	movw	r30, r0
    2ac6:	11 24       	eor	r1, r1
    2ac8:	e5 58       	subi	r30, 0x85	; 133
    2aca:	fb 4e       	sbci	r31, 0xEB	; 235
    2acc:	01 80       	ldd	r0, Z+1	; 0x01
    2ace:	f2 81       	ldd	r31, Z+2	; 0x02
    2ad0:	e0 2d       	mov	r30, r0
    2ad2:	17 96       	adiw	r26, 0x07	; 7
    2ad4:	fc 93       	st	X, r31
    2ad6:	ee 93       	st	-X, r30
    2ad8:	16 97       	sbiw	r26, 0x06	; 6
    2ada:	46 81       	ldd	r20, Z+6	; 0x06
    2adc:	57 81       	ldd	r21, Z+7	; 0x07
    2ade:	19 96       	adiw	r26, 0x09	; 9
    2ae0:	5c 93       	st	X, r21
    2ae2:	4e 93       	st	-X, r20
    2ae4:	18 97       	sbiw	r26, 0x08	; 8
    2ae6:	c6 81       	ldd	r28, Z+6	; 0x06
    2ae8:	d7 81       	ldd	r29, Z+7	; 0x07
    2aea:	3d 83       	std	Y+5, r19	; 0x05
    2aec:	2c 83       	std	Y+4, r18	; 0x04
    2aee:	37 83       	std	Z+7, r19	; 0x07
    2af0:	26 83       	std	Z+6, r18	; 0x06
    2af2:	5a 96       	adiw	r26, 0x1a	; 26
    2af4:	ec 91       	ld	r30, X
    2af6:	5a 97       	sbiw	r26, 0x1a	; 26
    2af8:	9e 9f       	mul	r25, r30
    2afa:	f0 01       	movw	r30, r0
    2afc:	11 24       	eor	r1, r1
    2afe:	e5 58       	subi	r30, 0x85	; 133
    2b00:	fb 4e       	sbci	r31, 0xEB	; 235
    2b02:	1d 96       	adiw	r26, 0x0d	; 13
    2b04:	fc 93       	st	X, r31
    2b06:	ee 93       	st	-X, r30
    2b08:	1c 97       	sbiw	r26, 0x0c	; 12
    2b0a:	90 81       	ld	r25, Z
    2b0c:	9f 5f       	subi	r25, 0xFF	; 255
    2b0e:	90 83       	st	Z, r25
    2b10:	21 c0       	rjmp	.+66     	; 0x2b54 <xTaskGenericNotifyFromISR+0x208>
    2b12:	66 e5       	ldi	r22, 0x56	; 86
    2b14:	74 e1       	ldi	r23, 0x14	; 20
    2b16:	fb 01       	movw	r30, r22
    2b18:	c1 81       	ldd	r28, Z+1	; 0x01
    2b1a:	d2 81       	ldd	r29, Z+2	; 0x02
    2b1c:	53 96       	adiw	r26, 0x13	; 19
    2b1e:	dc 93       	st	X, r29
    2b20:	ce 93       	st	-X, r28
    2b22:	52 97       	sbiw	r26, 0x12	; 18
    2b24:	2e 81       	ldd	r18, Y+6	; 0x06
    2b26:	3f 81       	ldd	r19, Y+7	; 0x07
    2b28:	55 96       	adiw	r26, 0x15	; 21
    2b2a:	3c 93       	st	X, r19
    2b2c:	2e 93       	st	-X, r18
    2b2e:	54 97       	sbiw	r26, 0x14	; 20
    2b30:	4e 81       	ldd	r20, Y+6	; 0x06
    2b32:	5f 81       	ldd	r21, Y+7	; 0x07
    2b34:	9d 01       	movw	r18, r26
    2b36:	22 5f       	subi	r18, 0xF2	; 242
    2b38:	3f 4f       	sbci	r19, 0xFF	; 255
    2b3a:	fa 01       	movw	r30, r20
    2b3c:	35 83       	std	Z+5, r19	; 0x05
    2b3e:	24 83       	std	Z+4, r18	; 0x04
    2b40:	3f 83       	std	Y+7, r19	; 0x07
    2b42:	2e 83       	std	Y+6, r18	; 0x06
    2b44:	59 96       	adiw	r26, 0x19	; 25
    2b46:	7c 93       	st	X, r23
    2b48:	6e 93       	st	-X, r22
    2b4a:	58 97       	sbiw	r26, 0x18	; 24
    2b4c:	fb 01       	movw	r30, r22
    2b4e:	90 81       	ld	r25, Z
    2b50:	9f 5f       	subi	r25, 0xFF	; 255
    2b52:	90 83       	st	Z, r25
    2b54:	5a 96       	adiw	r26, 0x1a	; 26
    2b56:	2c 91       	ld	r18, X
    2b58:	e0 91 e9 14 	lds	r30, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    2b5c:	f0 91 ea 14 	lds	r31, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>
    2b60:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b62:	92 17       	cp	r25, r18
    2b64:	48 f4       	brcc	.+18     	; 0x2b78 <xTaskGenericNotifyFromISR+0x22c>
    2b66:	c1 14       	cp	r12, r1
    2b68:	d1 04       	cpc	r13, r1
    2b6a:	19 f0       	breq	.+6      	; 0x2b72 <xTaskGenericNotifyFromISR+0x226>
    2b6c:	91 e0       	ldi	r25, 0x01	; 1
    2b6e:	f6 01       	movw	r30, r12
    2b70:	90 83       	st	Z, r25
    2b72:	91 e0       	ldi	r25, 0x01	; 1
    2b74:	90 93 33 14 	sts	0x1433, r25	; 0x801433 <xYieldPending>
    2b78:	df 91       	pop	r29
    2b7a:	cf 91       	pop	r28
    2b7c:	0f 91       	pop	r16
    2b7e:	ff 90       	pop	r15
    2b80:	ef 90       	pop	r14
    2b82:	df 90       	pop	r13
    2b84:	cf 90       	pop	r12
    2b86:	bf 90       	pop	r11
    2b88:	af 90       	pop	r10
    2b8a:	9f 90       	pop	r9
    2b8c:	8f 90       	pop	r8
    2b8e:	08 95       	ret

00002b90 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2b90:	00 97       	sbiw	r24, 0x00	; 0
    2b92:	21 f4       	brne	.+8      	; 0x2b9c <xTaskGenericNotifyStateClear+0xc>
    2b94:	80 91 e9 14 	lds	r24, 0x14E9	; 0x8014e9 <pxCurrentTCB>
    2b98:	90 91 ea 14 	lds	r25, 0x14EA	; 0x8014ea <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2b9c:	0f b6       	in	r0, 0x3f	; 63
    2b9e:	f8 94       	cli
    2ba0:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2ba2:	70 e0       	ldi	r23, 0x00	; 0
    2ba4:	fc 01       	movw	r30, r24
    2ba6:	e6 0f       	add	r30, r22
    2ba8:	f7 1f       	adc	r31, r23
    2baa:	23 a9       	ldd	r18, Z+51	; 0x33
    2bac:	22 30       	cpi	r18, 0x02	; 2
    2bae:	31 f4       	brne	.+12     	; 0x2bbc <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2bb0:	fc 01       	movw	r30, r24
    2bb2:	e6 0f       	add	r30, r22
    2bb4:	f7 1f       	adc	r31, r23
    2bb6:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	01 c0       	rjmp	.+2      	; 0x2bbe <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2bbe:	0f 90       	pop	r0
    2bc0:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2bc2:	08 95       	ret

00002bc4 <prvGetNextExpireTime>:
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	e0 91 f5 14 	lds	r30, 0x14F5	; 0x8014f5 <pxCurrentTimerList>
    2bca:	f0 91 f6 14 	lds	r31, 0x14F6	; 0x8014f6 <pxCurrentTimerList+0x1>
    2bce:	80 81       	ld	r24, Z
    2bd0:	91 e0       	ldi	r25, 0x01	; 1
    2bd2:	81 11       	cpse	r24, r1
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	9c 93       	st	X, r25
    2bd8:	91 11       	cpse	r25, r1
    2bda:	08 c0       	rjmp	.+16     	; 0x2bec <prvGetNextExpireTime+0x28>
    2bdc:	07 80       	ldd	r0, Z+7	; 0x07
    2bde:	f0 85       	ldd	r31, Z+8	; 0x08
    2be0:	e0 2d       	mov	r30, r0
    2be2:	60 81       	ld	r22, Z
    2be4:	71 81       	ldd	r23, Z+1	; 0x01
    2be6:	82 81       	ldd	r24, Z+2	; 0x02
    2be8:	93 81       	ldd	r25, Z+3	; 0x03
    2bea:	08 95       	ret
    2bec:	60 e0       	ldi	r22, 0x00	; 0
    2bee:	70 e0       	ldi	r23, 0x00	; 0
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	08 95       	ret

00002bf4 <prvInsertTimerInActiveList>:
    2bf4:	cf 92       	push	r12
    2bf6:	df 92       	push	r13
    2bf8:	ef 92       	push	r14
    2bfa:	ff 92       	push	r15
    2bfc:	0f 93       	push	r16
    2bfe:	1f 93       	push	r17
    2c00:	fc 01       	movw	r30, r24
    2c02:	42 83       	std	Z+2, r20	; 0x02
    2c04:	53 83       	std	Z+3, r21	; 0x03
    2c06:	64 83       	std	Z+4, r22	; 0x04
    2c08:	75 83       	std	Z+5, r23	; 0x05
    2c0a:	93 87       	std	Z+11, r25	; 0x0b
    2c0c:	82 87       	std	Z+10, r24	; 0x0a
    2c0e:	04 17       	cp	r16, r20
    2c10:	15 07       	cpc	r17, r21
    2c12:	26 07       	cpc	r18, r22
    2c14:	37 07       	cpc	r19, r23
    2c16:	c0 f0       	brcs	.+48     	; 0x2c48 <prvInsertTimerInActiveList+0x54>
    2c18:	0c 19       	sub	r16, r12
    2c1a:	1d 09       	sbc	r17, r13
    2c1c:	2e 09       	sbc	r18, r14
    2c1e:	3f 09       	sbc	r19, r15
    2c20:	86 85       	ldd	r24, Z+14	; 0x0e
    2c22:	97 85       	ldd	r25, Z+15	; 0x0f
    2c24:	a0 89       	ldd	r26, Z+16	; 0x10
    2c26:	b1 89       	ldd	r27, Z+17	; 0x11
    2c28:	08 17       	cp	r16, r24
    2c2a:	19 07       	cpc	r17, r25
    2c2c:	2a 07       	cpc	r18, r26
    2c2e:	3b 07       	cpc	r19, r27
    2c30:	00 f5       	brcc	.+64     	; 0x2c72 <prvInsertTimerInActiveList+0x7e>
    2c32:	bf 01       	movw	r22, r30
    2c34:	6e 5f       	subi	r22, 0xFE	; 254
    2c36:	7f 4f       	sbci	r23, 0xFF	; 255
    2c38:	80 91 f3 14 	lds	r24, 0x14F3	; 0x8014f3 <pxOverflowTimerList>
    2c3c:	90 91 f4 14 	lds	r25, 0x14F4	; 0x8014f4 <pxOverflowTimerList+0x1>
    2c40:	0e 94 67 03 	call	0x6ce	; 0x6ce <vListInsert>
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	18 c0       	rjmp	.+48     	; 0x2c78 <prvInsertTimerInActiveList+0x84>
    2c48:	0c 15       	cp	r16, r12
    2c4a:	1d 05       	cpc	r17, r13
    2c4c:	2e 05       	cpc	r18, r14
    2c4e:	3f 05       	cpc	r19, r15
    2c50:	28 f4       	brcc	.+10     	; 0x2c5c <prvInsertTimerInActiveList+0x68>
    2c52:	4c 15       	cp	r20, r12
    2c54:	5d 05       	cpc	r21, r13
    2c56:	6e 05       	cpc	r22, r14
    2c58:	7f 05       	cpc	r23, r15
    2c5a:	68 f4       	brcc	.+26     	; 0x2c76 <prvInsertTimerInActiveList+0x82>
    2c5c:	bf 01       	movw	r22, r30
    2c5e:	6e 5f       	subi	r22, 0xFE	; 254
    2c60:	7f 4f       	sbci	r23, 0xFF	; 255
    2c62:	80 91 f5 14 	lds	r24, 0x14F5	; 0x8014f5 <pxCurrentTimerList>
    2c66:	90 91 f6 14 	lds	r25, 0x14F6	; 0x8014f6 <pxCurrentTimerList+0x1>
    2c6a:	0e 94 67 03 	call	0x6ce	; 0x6ce <vListInsert>
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
    2c70:	03 c0       	rjmp	.+6      	; 0x2c78 <prvInsertTimerInActiveList+0x84>
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	01 c0       	rjmp	.+2      	; 0x2c78 <prvInsertTimerInActiveList+0x84>
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	1f 91       	pop	r17
    2c7a:	0f 91       	pop	r16
    2c7c:	ff 90       	pop	r15
    2c7e:	ef 90       	pop	r14
    2c80:	df 90       	pop	r13
    2c82:	cf 90       	pop	r12
    2c84:	08 95       	ret

00002c86 <prvCheckForValidListAndQueue>:
    2c86:	0f b6       	in	r0, 0x3f	; 63
    2c88:	f8 94       	cli
    2c8a:	0f 92       	push	r0
    2c8c:	80 91 f1 14 	lds	r24, 0x14F1	; 0x8014f1 <xTimerQueue>
    2c90:	90 91 f2 14 	lds	r25, 0x14F2	; 0x8014f2 <xTimerQueue+0x1>
    2c94:	89 2b       	or	r24, r25
    2c96:	e9 f4       	brne	.+58     	; 0x2cd2 <prvCheckForValidListAndQueue+0x4c>
    2c98:	82 e0       	ldi	r24, 0x02	; 2
    2c9a:	95 e1       	ldi	r25, 0x15	; 21
    2c9c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <vListInitialise>
    2ca0:	87 ef       	ldi	r24, 0xF7	; 247
    2ca2:	94 e1       	ldi	r25, 0x14	; 20
    2ca4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <vListInitialise>
    2ca8:	82 e0       	ldi	r24, 0x02	; 2
    2caa:	95 e1       	ldi	r25, 0x15	; 21
    2cac:	90 93 f6 14 	sts	0x14F6, r25	; 0x8014f6 <pxCurrentTimerList+0x1>
    2cb0:	80 93 f5 14 	sts	0x14F5, r24	; 0x8014f5 <pxCurrentTimerList>
    2cb4:	87 ef       	ldi	r24, 0xF7	; 247
    2cb6:	94 e1       	ldi	r25, 0x14	; 20
    2cb8:	90 93 f4 14 	sts	0x14F4, r25	; 0x8014f4 <pxOverflowTimerList+0x1>
    2cbc:	80 93 f3 14 	sts	0x14F3, r24	; 0x8014f3 <pxOverflowTimerList>
    2cc0:	40 e0       	ldi	r20, 0x00	; 0
    2cc2:	67 e0       	ldi	r22, 0x07	; 7
    2cc4:	8a e0       	ldi	r24, 0x0A	; 10
    2cc6:	0e 94 05 06 	call	0xc0a	; 0xc0a <xQueueGenericCreate>
    2cca:	90 93 f2 14 	sts	0x14F2, r25	; 0x8014f2 <xTimerQueue+0x1>
    2cce:	80 93 f1 14 	sts	0x14F1, r24	; 0x8014f1 <xTimerQueue>
    2cd2:	0f 90       	pop	r0
    2cd4:	0f be       	out	0x3f, r0	; 63
    2cd6:	08 95       	ret

00002cd8 <xTimerCreateTimerTask>:
    2cd8:	ef 92       	push	r14
    2cda:	ff 92       	push	r15
    2cdc:	0f 93       	push	r16
    2cde:	d3 df       	rcall	.-90     	; 0x2c86 <prvCheckForValidListAndQueue>
    2ce0:	80 91 f1 14 	lds	r24, 0x14F1	; 0x8014f1 <xTimerQueue>
    2ce4:	90 91 f2 14 	lds	r25, 0x14F2	; 0x8014f2 <xTimerQueue+0x1>
    2ce8:	89 2b       	or	r24, r25
    2cea:	91 f0       	breq	.+36     	; 0x2d10 <xTimerCreateTimerTask+0x38>
    2cec:	0f 2e       	mov	r0, r31
    2cee:	ff ee       	ldi	r31, 0xEF	; 239
    2cf0:	ef 2e       	mov	r14, r31
    2cf2:	f4 e1       	ldi	r31, 0x14	; 20
    2cf4:	ff 2e       	mov	r15, r31
    2cf6:	f0 2d       	mov	r31, r0
    2cf8:	03 e0       	ldi	r16, 0x03	; 3
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	40 ec       	ldi	r20, 0xC0	; 192
    2d00:	50 e0       	ldi	r21, 0x00	; 0
    2d02:	61 ea       	ldi	r22, 0xA1	; 161
    2d04:	72 e0       	ldi	r23, 0x02	; 2
    2d06:	87 ed       	ldi	r24, 0xD7	; 215
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <xTaskCreate>
    2d0e:	01 c0       	rjmp	.+2      	; 0x2d12 <xTimerCreateTimerTask+0x3a>
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	0f 91       	pop	r16
    2d14:	ff 90       	pop	r15
    2d16:	ef 90       	pop	r14
    2d18:	08 95       	ret

00002d1a <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2d1a:	8f 92       	push	r8
    2d1c:	9f 92       	push	r9
    2d1e:	af 92       	push	r10
    2d20:	bf 92       	push	r11
    2d22:	cf 92       	push	r12
    2d24:	df 92       	push	r13
    2d26:	ef 92       	push	r14
    2d28:	ff 92       	push	r15
    2d2a:	0f 93       	push	r16
    2d2c:	1f 93       	push	r17
    2d2e:	cf 93       	push	r28
    2d30:	df 93       	push	r29
    2d32:	cd b7       	in	r28, 0x3d	; 61
    2d34:	de b7       	in	r29, 0x3e	; 62
    2d36:	27 97       	sbiw	r28, 0x07	; 7
    2d38:	0f b6       	in	r0, 0x3f	; 63
    2d3a:	f8 94       	cli
    2d3c:	de bf       	out	0x3e, r29	; 62
    2d3e:	0f be       	out	0x3f, r0	; 63
    2d40:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2d42:	e0 91 f1 14 	lds	r30, 0x14F1	; 0x8014f1 <xTimerQueue>
    2d46:	f0 91 f2 14 	lds	r31, 0x14F2	; 0x8014f2 <xTimerQueue+0x1>
    2d4a:	30 97       	sbiw	r30, 0x00	; 0
    2d4c:	81 f1       	breq	.+96     	; 0x2dae <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2d4e:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2d50:	2a 83       	std	Y+2, r18	; 0x02
    2d52:	3b 83       	std	Y+3, r19	; 0x03
    2d54:	4c 83       	std	Y+4, r20	; 0x04
    2d56:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2d58:	9f 83       	std	Y+7, r25	; 0x07
    2d5a:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2d5c:	66 30       	cpi	r22, 0x06	; 6
    2d5e:	f4 f4       	brge	.+60     	; 0x2d9c <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2d60:	ee db       	rcall	.-2084   	; 0x253e <xTaskGetSchedulerState>
    2d62:	82 30       	cpi	r24, 0x02	; 2
    2d64:	69 f4       	brne	.+26     	; 0x2d80 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2d66:	00 e0       	ldi	r16, 0x00	; 0
    2d68:	a7 01       	movw	r20, r14
    2d6a:	96 01       	movw	r18, r12
    2d6c:	be 01       	movw	r22, r28
    2d6e:	6f 5f       	subi	r22, 0xFF	; 255
    2d70:	7f 4f       	sbci	r23, 0xFF	; 255
    2d72:	80 91 f1 14 	lds	r24, 0x14F1	; 0x8014f1 <xTimerQueue>
    2d76:	90 91 f2 14 	lds	r25, 0x14F2	; 0x8014f2 <xTimerQueue+0x1>
    2d7a:	0e 94 28 06 	call	0xc50	; 0xc50 <xQueueGenericSend>
    2d7e:	18 c0       	rjmp	.+48     	; 0x2db0 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2d80:	00 e0       	ldi	r16, 0x00	; 0
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	a9 01       	movw	r20, r18
    2d88:	be 01       	movw	r22, r28
    2d8a:	6f 5f       	subi	r22, 0xFF	; 255
    2d8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d8e:	80 91 f1 14 	lds	r24, 0x14F1	; 0x8014f1 <xTimerQueue>
    2d92:	90 91 f2 14 	lds	r25, 0x14F2	; 0x8014f2 <xTimerQueue+0x1>
    2d96:	0e 94 28 06 	call	0xc50	; 0xc50 <xQueueGenericSend>
    2d9a:	0a c0       	rjmp	.+20     	; 0x2db0 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	a8 01       	movw	r20, r16
    2da0:	be 01       	movw	r22, r28
    2da2:	6f 5f       	subi	r22, 0xFF	; 255
    2da4:	7f 4f       	sbci	r23, 0xFF	; 255
    2da6:	cf 01       	movw	r24, r30
    2da8:	0e 94 b9 06 	call	0xd72	; 0xd72 <xQueueGenericSendFromISR>
    2dac:	01 c0       	rjmp	.+2      	; 0x2db0 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2dae:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2db0:	27 96       	adiw	r28, 0x07	; 7
    2db2:	0f b6       	in	r0, 0x3f	; 63
    2db4:	f8 94       	cli
    2db6:	de bf       	out	0x3e, r29	; 62
    2db8:	0f be       	out	0x3f, r0	; 63
    2dba:	cd bf       	out	0x3d, r28	; 61
    2dbc:	df 91       	pop	r29
    2dbe:	cf 91       	pop	r28
    2dc0:	1f 91       	pop	r17
    2dc2:	0f 91       	pop	r16
    2dc4:	ff 90       	pop	r15
    2dc6:	ef 90       	pop	r14
    2dc8:	df 90       	pop	r13
    2dca:	cf 90       	pop	r12
    2dcc:	bf 90       	pop	r11
    2dce:	af 90       	pop	r10
    2dd0:	9f 90       	pop	r9
    2dd2:	8f 90       	pop	r8
    2dd4:	08 95       	ret

00002dd6 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2dd6:	8f 92       	push	r8
    2dd8:	9f 92       	push	r9
    2dda:	af 92       	push	r10
    2ddc:	bf 92       	push	r11
    2dde:	cf 92       	push	r12
    2de0:	df 92       	push	r13
    2de2:	ef 92       	push	r14
    2de4:	ff 92       	push	r15
    2de6:	0f 93       	push	r16
    2de8:	1f 93       	push	r17
    2dea:	cf 93       	push	r28
    2dec:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2dee:	3b c0       	rjmp	.+118    	; 0x2e66 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2df0:	07 80       	ldd	r0, Z+7	; 0x07
    2df2:	f0 85       	ldd	r31, Z+8	; 0x08
    2df4:	e0 2d       	mov	r30, r0
    2df6:	80 80       	ld	r8, Z
    2df8:	91 80       	ldd	r9, Z+1	; 0x01
    2dfa:	a2 80       	ldd	r10, Z+2	; 0x02
    2dfc:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2dfe:	c0 85       	ldd	r28, Z+8	; 0x08
    2e00:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2e02:	8e 01       	movw	r16, r28
    2e04:	0e 5f       	subi	r16, 0xFE	; 254
    2e06:	1f 4f       	sbci	r17, 0xFF	; 255
    2e08:	c8 01       	movw	r24, r16
    2e0a:	0e 94 a4 03 	call	0x748	; 0x748 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2e0e:	ec 89       	ldd	r30, Y+20	; 0x14
    2e10:	fd 89       	ldd	r31, Y+21	; 0x15
    2e12:	ce 01       	movw	r24, r28
    2e14:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2e16:	8e 89       	ldd	r24, Y+22	; 0x16
    2e18:	82 ff       	sbrs	r24, 2
    2e1a:	25 c0       	rjmp	.+74     	; 0x2e66 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2e1c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e1e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e20:	a8 89       	ldd	r26, Y+16	; 0x10
    2e22:	b9 89       	ldd	r27, Y+17	; 0x11
    2e24:	88 0d       	add	r24, r8
    2e26:	99 1d       	adc	r25, r9
    2e28:	aa 1d       	adc	r26, r10
    2e2a:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2e2c:	88 16       	cp	r8, r24
    2e2e:	99 06       	cpc	r9, r25
    2e30:	aa 06       	cpc	r10, r26
    2e32:	bb 06       	cpc	r11, r27
    2e34:	70 f4       	brcc	.+28     	; 0x2e52 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2e36:	8a 83       	std	Y+2, r24	; 0x02
    2e38:	9b 83       	std	Y+3, r25	; 0x03
    2e3a:	ac 83       	std	Y+4, r26	; 0x04
    2e3c:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2e3e:	db 87       	std	Y+11, r29	; 0x0b
    2e40:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2e42:	b8 01       	movw	r22, r16
    2e44:	80 91 f5 14 	lds	r24, 0x14F5	; 0x8014f5 <pxCurrentTimerList>
    2e48:	90 91 f6 14 	lds	r25, 0x14F6	; 0x8014f6 <pxCurrentTimerList+0x1>
    2e4c:	0e 94 67 03 	call	0x6ce	; 0x6ce <vListInsert>
    2e50:	0a c0       	rjmp	.+20     	; 0x2e66 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2e52:	c1 2c       	mov	r12, r1
    2e54:	d1 2c       	mov	r13, r1
    2e56:	76 01       	movw	r14, r12
    2e58:	00 e0       	ldi	r16, 0x00	; 0
    2e5a:	10 e0       	ldi	r17, 0x00	; 0
    2e5c:	a5 01       	movw	r20, r10
    2e5e:	94 01       	movw	r18, r8
    2e60:	60 e0       	ldi	r22, 0x00	; 0
    2e62:	ce 01       	movw	r24, r28
    2e64:	5a df       	rcall	.-332    	; 0x2d1a <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2e66:	e0 91 f5 14 	lds	r30, 0x14F5	; 0x8014f5 <pxCurrentTimerList>
    2e6a:	f0 91 f6 14 	lds	r31, 0x14F6	; 0x8014f6 <pxCurrentTimerList+0x1>
    2e6e:	80 81       	ld	r24, Z
    2e70:	81 11       	cpse	r24, r1
    2e72:	be cf       	rjmp	.-132    	; 0x2df0 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2e74:	80 91 f3 14 	lds	r24, 0x14F3	; 0x8014f3 <pxOverflowTimerList>
    2e78:	90 91 f4 14 	lds	r25, 0x14F4	; 0x8014f4 <pxOverflowTimerList+0x1>
    2e7c:	90 93 f6 14 	sts	0x14F6, r25	; 0x8014f6 <pxCurrentTimerList+0x1>
    2e80:	80 93 f5 14 	sts	0x14F5, r24	; 0x8014f5 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2e84:	f0 93 f4 14 	sts	0x14F4, r31	; 0x8014f4 <pxOverflowTimerList+0x1>
    2e88:	e0 93 f3 14 	sts	0x14F3, r30	; 0x8014f3 <pxOverflowTimerList>
    }
    2e8c:	df 91       	pop	r29
    2e8e:	cf 91       	pop	r28
    2e90:	1f 91       	pop	r17
    2e92:	0f 91       	pop	r16
    2e94:	ff 90       	pop	r15
    2e96:	ef 90       	pop	r14
    2e98:	df 90       	pop	r13
    2e9a:	cf 90       	pop	r12
    2e9c:	bf 90       	pop	r11
    2e9e:	af 90       	pop	r10
    2ea0:	9f 90       	pop	r9
    2ea2:	8f 90       	pop	r8
    2ea4:	08 95       	ret

00002ea6 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2ea6:	cf 92       	push	r12
    2ea8:	df 92       	push	r13
    2eaa:	ef 92       	push	r14
    2eac:	ff 92       	push	r15
    2eae:	cf 93       	push	r28
    2eb0:	df 93       	push	r29
    2eb2:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2eb4:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <xTaskGetTickCount>
    2eb8:	6b 01       	movw	r12, r22
    2eba:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2ebc:	80 91 eb 14 	lds	r24, 0x14EB	; 0x8014eb <xLastTime.2436>
    2ec0:	90 91 ec 14 	lds	r25, 0x14EC	; 0x8014ec <xLastTime.2436+0x1>
    2ec4:	a0 91 ed 14 	lds	r26, 0x14ED	; 0x8014ed <xLastTime.2436+0x2>
    2ec8:	b0 91 ee 14 	lds	r27, 0x14EE	; 0x8014ee <xLastTime.2436+0x3>
    2ecc:	c8 16       	cp	r12, r24
    2ece:	d9 06       	cpc	r13, r25
    2ed0:	ea 06       	cpc	r14, r26
    2ed2:	fb 06       	cpc	r15, r27
    2ed4:	20 f4       	brcc	.+8      	; 0x2ede <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2ed6:	7f df       	rcall	.-258    	; 0x2dd6 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	88 83       	st	Y, r24
    2edc:	01 c0       	rjmp	.+2      	; 0x2ee0 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2ede:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2ee0:	c0 92 eb 14 	sts	0x14EB, r12	; 0x8014eb <xLastTime.2436>
    2ee4:	d0 92 ec 14 	sts	0x14EC, r13	; 0x8014ec <xLastTime.2436+0x1>
    2ee8:	e0 92 ed 14 	sts	0x14ED, r14	; 0x8014ed <xLastTime.2436+0x2>
    2eec:	f0 92 ee 14 	sts	0x14EE, r15	; 0x8014ee <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2ef0:	c7 01       	movw	r24, r14
    2ef2:	b6 01       	movw	r22, r12
    2ef4:	df 91       	pop	r29
    2ef6:	cf 91       	pop	r28
    2ef8:	ff 90       	pop	r15
    2efa:	ef 90       	pop	r14
    2efc:	df 90       	pop	r13
    2efe:	cf 90       	pop	r12
    2f00:	08 95       	ret

00002f02 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2f02:	4f 92       	push	r4
    2f04:	5f 92       	push	r5
    2f06:	6f 92       	push	r6
    2f08:	7f 92       	push	r7
    2f0a:	8f 92       	push	r8
    2f0c:	9f 92       	push	r9
    2f0e:	af 92       	push	r10
    2f10:	bf 92       	push	r11
    2f12:	cf 92       	push	r12
    2f14:	df 92       	push	r13
    2f16:	ef 92       	push	r14
    2f18:	ff 92       	push	r15
    2f1a:	0f 93       	push	r16
    2f1c:	1f 93       	push	r17
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	4b 01       	movw	r8, r22
    2f24:	5c 01       	movw	r10, r24
    2f26:	29 01       	movw	r4, r18
    2f28:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2f2a:	e0 91 f5 14 	lds	r30, 0x14F5	; 0x8014f5 <pxCurrentTimerList>
    2f2e:	f0 91 f6 14 	lds	r31, 0x14F6	; 0x8014f6 <pxCurrentTimerList+0x1>
    2f32:	07 80       	ldd	r0, Z+7	; 0x07
    2f34:	f0 85       	ldd	r31, Z+8	; 0x08
    2f36:	e0 2d       	mov	r30, r0
    2f38:	c0 85       	ldd	r28, Z+8	; 0x08
    2f3a:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2f3c:	ce 01       	movw	r24, r28
    2f3e:	02 96       	adiw	r24, 0x02	; 2
    2f40:	0e 94 a4 03 	call	0x748	; 0x748 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2f44:	8e 89       	ldd	r24, Y+22	; 0x16
    2f46:	82 ff       	sbrs	r24, 2
    2f48:	1b c0       	rjmp	.+54     	; 0x2f80 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2f4a:	4e 85       	ldd	r20, Y+14	; 0x0e
    2f4c:	5f 85       	ldd	r21, Y+15	; 0x0f
    2f4e:	68 89       	ldd	r22, Y+16	; 0x10
    2f50:	79 89       	ldd	r23, Y+17	; 0x11
    2f52:	48 0d       	add	r20, r8
    2f54:	59 1d       	adc	r21, r9
    2f56:	6a 1d       	adc	r22, r10
    2f58:	7b 1d       	adc	r23, r11
    2f5a:	75 01       	movw	r14, r10
    2f5c:	64 01       	movw	r12, r8
    2f5e:	93 01       	movw	r18, r6
    2f60:	82 01       	movw	r16, r4
    2f62:	ce 01       	movw	r24, r28
    2f64:	47 de       	rcall	.-882    	; 0x2bf4 <prvInsertTimerInActiveList>
    2f66:	88 23       	and	r24, r24
    2f68:	69 f0       	breq	.+26     	; 0x2f84 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2f6a:	c1 2c       	mov	r12, r1
    2f6c:	d1 2c       	mov	r13, r1
    2f6e:	76 01       	movw	r14, r12
    2f70:	00 e0       	ldi	r16, 0x00	; 0
    2f72:	10 e0       	ldi	r17, 0x00	; 0
    2f74:	a5 01       	movw	r20, r10
    2f76:	94 01       	movw	r18, r8
    2f78:	60 e0       	ldi	r22, 0x00	; 0
    2f7a:	ce 01       	movw	r24, r28
    2f7c:	ce de       	rcall	.-612    	; 0x2d1a <xTimerGenericCommand>
    2f7e:	02 c0       	rjmp	.+4      	; 0x2f84 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2f80:	8e 7f       	andi	r24, 0xFE	; 254
    2f82:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2f84:	ec 89       	ldd	r30, Y+20	; 0x14
    2f86:	fd 89       	ldd	r31, Y+21	; 0x15
    2f88:	ce 01       	movw	r24, r28
    2f8a:	19 95       	eicall
    }
    2f8c:	df 91       	pop	r29
    2f8e:	cf 91       	pop	r28
    2f90:	1f 91       	pop	r17
    2f92:	0f 91       	pop	r16
    2f94:	ff 90       	pop	r15
    2f96:	ef 90       	pop	r14
    2f98:	df 90       	pop	r13
    2f9a:	cf 90       	pop	r12
    2f9c:	bf 90       	pop	r11
    2f9e:	af 90       	pop	r10
    2fa0:	9f 90       	pop	r9
    2fa2:	8f 90       	pop	r8
    2fa4:	7f 90       	pop	r7
    2fa6:	6f 90       	pop	r6
    2fa8:	5f 90       	pop	r5
    2faa:	4f 90       	pop	r4
    2fac:	08 95       	ret

00002fae <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2fae:	8f 92       	push	r8
    2fb0:	9f 92       	push	r9
    2fb2:	af 92       	push	r10
    2fb4:	bf 92       	push	r11
    2fb6:	cf 92       	push	r12
    2fb8:	df 92       	push	r13
    2fba:	ef 92       	push	r14
    2fbc:	ff 92       	push	r15
    2fbe:	1f 93       	push	r17
    2fc0:	cf 93       	push	r28
    2fc2:	df 93       	push	r29
    2fc4:	1f 92       	push	r1
    2fc6:	cd b7       	in	r28, 0x3d	; 61
    2fc8:	de b7       	in	r29, 0x3e	; 62
    2fca:	6b 01       	movw	r12, r22
    2fcc:	7c 01       	movw	r14, r24
    2fce:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2fd0:	0e 94 66 0d 	call	0x1acc	; 0x1acc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2fd4:	ce 01       	movw	r24, r28
    2fd6:	01 96       	adiw	r24, 0x01	; 1
    2fd8:	66 df       	rcall	.-308    	; 0x2ea6 <prvSampleTimeNow>
    2fda:	4b 01       	movw	r8, r22
    2fdc:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2fde:	89 81       	ldd	r24, Y+1	; 0x01
    2fe0:	81 11       	cpse	r24, r1
    2fe2:	2d c0       	rjmp	.+90     	; 0x303e <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2fe4:	11 11       	cpse	r17, r1
    2fe6:	0d c0       	rjmp	.+26     	; 0x3002 <prvProcessTimerOrBlockTask+0x54>
    2fe8:	8c 14       	cp	r8, r12
    2fea:	9d 04       	cpc	r9, r13
    2fec:	ae 04       	cpc	r10, r14
    2fee:	bf 04       	cpc	r11, r15
    2ff0:	40 f0       	brcs	.+16     	; 0x3002 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    2ff2:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2ff6:	a5 01       	movw	r20, r10
    2ff8:	94 01       	movw	r18, r8
    2ffa:	c7 01       	movw	r24, r14
    2ffc:	b6 01       	movw	r22, r12
    2ffe:	81 df       	rcall	.-254    	; 0x2f02 <prvProcessExpiredTimer>
    3000:	20 c0       	rjmp	.+64     	; 0x3042 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3002:	11 23       	and	r17, r17
    3004:	41 f0       	breq	.+16     	; 0x3016 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3006:	e0 91 f3 14 	lds	r30, 0x14F3	; 0x8014f3 <pxOverflowTimerList>
    300a:	f0 91 f4 14 	lds	r31, 0x14F4	; 0x8014f4 <pxOverflowTimerList+0x1>
    300e:	80 81       	ld	r24, Z
    3010:	11 e0       	ldi	r17, 0x01	; 1
    3012:	81 11       	cpse	r24, r1
    3014:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3016:	b7 01       	movw	r22, r14
    3018:	a6 01       	movw	r20, r12
    301a:	48 19       	sub	r20, r8
    301c:	59 09       	sbc	r21, r9
    301e:	6a 09       	sbc	r22, r10
    3020:	7b 09       	sbc	r23, r11
    3022:	21 2f       	mov	r18, r17
    3024:	80 91 f1 14 	lds	r24, 0x14F1	; 0x8014f1 <xTimerQueue>
    3028:	90 91 f2 14 	lds	r25, 0x14F2	; 0x8014f2 <xTimerQueue+0x1>
    302c:	0e 94 83 07 	call	0xf06	; 0xf06 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3030:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <xTaskResumeAll>
    3034:	81 11       	cpse	r24, r1
    3036:	05 c0       	rjmp	.+10     	; 0x3042 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3038:	0e 94 20 04 	call	0x840	; 0x840 <vPortYield>
    303c:	02 c0       	rjmp	.+4      	; 0x3042 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    303e:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <xTaskResumeAll>
            }
        }
    }
    3042:	0f 90       	pop	r0
    3044:	df 91       	pop	r29
    3046:	cf 91       	pop	r28
    3048:	1f 91       	pop	r17
    304a:	ff 90       	pop	r15
    304c:	ef 90       	pop	r14
    304e:	df 90       	pop	r13
    3050:	cf 90       	pop	r12
    3052:	bf 90       	pop	r11
    3054:	af 90       	pop	r10
    3056:	9f 90       	pop	r9
    3058:	8f 90       	pop	r8
    305a:	08 95       	ret

0000305c <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    305c:	af 92       	push	r10
    305e:	bf 92       	push	r11
    3060:	cf 92       	push	r12
    3062:	df 92       	push	r13
    3064:	ef 92       	push	r14
    3066:	ff 92       	push	r15
    3068:	0f 93       	push	r16
    306a:	1f 93       	push	r17
    306c:	cf 93       	push	r28
    306e:	df 93       	push	r29
    3070:	cd b7       	in	r28, 0x3d	; 61
    3072:	de b7       	in	r29, 0x3e	; 62
    3074:	28 97       	sbiw	r28, 0x08	; 8
    3076:	0f b6       	in	r0, 0x3f	; 63
    3078:	f8 94       	cli
    307a:	de bf       	out	0x3e, r29	; 62
    307c:	0f be       	out	0x3f, r0	; 63
    307e:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3080:	82 c0       	rjmp	.+260    	; 0x3186 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3082:	89 81       	ldd	r24, Y+1	; 0x01
    3084:	88 23       	and	r24, r24
    3086:	0c f4       	brge	.+2      	; 0x308a <prvProcessReceivedCommands+0x2e>
    3088:	7e c0       	rjmp	.+252    	; 0x3186 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    308a:	ae 80       	ldd	r10, Y+6	; 0x06
    308c:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    308e:	d5 01       	movw	r26, r10
    3090:	1c 96       	adiw	r26, 0x0c	; 12
    3092:	8d 91       	ld	r24, X+
    3094:	9c 91       	ld	r25, X
    3096:	1d 97       	sbiw	r26, 0x0d	; 13
    3098:	89 2b       	or	r24, r25
    309a:	21 f0       	breq	.+8      	; 0x30a4 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    309c:	c5 01       	movw	r24, r10
    309e:	02 96       	adiw	r24, 0x02	; 2
    30a0:	0e 94 a4 03 	call	0x748	; 0x748 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    30a4:	ce 01       	movw	r24, r28
    30a6:	08 96       	adiw	r24, 0x08	; 8
    30a8:	fe de       	rcall	.-516    	; 0x2ea6 <prvSampleTimeNow>
    30aa:	8b 01       	movw	r16, r22
    30ac:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    30ae:	e9 81       	ldd	r30, Y+1	; 0x01
    30b0:	0e 2e       	mov	r0, r30
    30b2:	00 0c       	add	r0, r0
    30b4:	ff 0b       	sbc	r31, r31
    30b6:	ea 30       	cpi	r30, 0x0A	; 10
    30b8:	f1 05       	cpc	r31, r1
    30ba:	08 f0       	brcs	.+2      	; 0x30be <prvProcessReceivedCommands+0x62>
    30bc:	64 c0       	rjmp	.+200    	; 0x3186 <prvProcessReceivedCommands+0x12a>
    30be:	88 27       	eor	r24, r24
    30c0:	ee 58       	subi	r30, 0x8E	; 142
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	8f 4f       	sbci	r24, 0xFF	; 255
    30c6:	0c 94 5f 2a 	jmp	0x54be	; 0x54be <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    30ca:	f5 01       	movw	r30, r10
    30cc:	86 89       	ldd	r24, Z+22	; 0x16
    30ce:	81 60       	ori	r24, 0x01	; 1
    30d0:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    30d2:	ca 80       	ldd	r12, Y+2	; 0x02
    30d4:	db 80       	ldd	r13, Y+3	; 0x03
    30d6:	ec 80       	ldd	r14, Y+4	; 0x04
    30d8:	fd 80       	ldd	r15, Y+5	; 0x05
    30da:	46 85       	ldd	r20, Z+14	; 0x0e
    30dc:	57 85       	ldd	r21, Z+15	; 0x0f
    30de:	60 89       	ldd	r22, Z+16	; 0x10
    30e0:	71 89       	ldd	r23, Z+17	; 0x11
    30e2:	4c 0d       	add	r20, r12
    30e4:	5d 1d       	adc	r21, r13
    30e6:	6e 1d       	adc	r22, r14
    30e8:	7f 1d       	adc	r23, r15
    30ea:	c5 01       	movw	r24, r10
    30ec:	83 dd       	rcall	.-1274   	; 0x2bf4 <prvInsertTimerInActiveList>
    30ee:	88 23       	and	r24, r24
    30f0:	09 f4       	brne	.+2      	; 0x30f4 <prvProcessReceivedCommands+0x98>
    30f2:	49 c0       	rjmp	.+146    	; 0x3186 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    30f4:	d5 01       	movw	r26, r10
    30f6:	54 96       	adiw	r26, 0x14	; 20
    30f8:	ed 91       	ld	r30, X+
    30fa:	fc 91       	ld	r31, X
    30fc:	55 97       	sbiw	r26, 0x15	; 21
    30fe:	c5 01       	movw	r24, r10
    3100:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3102:	f5 01       	movw	r30, r10
    3104:	86 89       	ldd	r24, Z+22	; 0x16
    3106:	82 ff       	sbrs	r24, 2
    3108:	3e c0       	rjmp	.+124    	; 0x3186 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    310a:	4a 81       	ldd	r20, Y+2	; 0x02
    310c:	5b 81       	ldd	r21, Y+3	; 0x03
    310e:	6c 81       	ldd	r22, Y+4	; 0x04
    3110:	7d 81       	ldd	r23, Y+5	; 0x05
    3112:	86 85       	ldd	r24, Z+14	; 0x0e
    3114:	97 85       	ldd	r25, Z+15	; 0x0f
    3116:	a0 89       	ldd	r26, Z+16	; 0x10
    3118:	b1 89       	ldd	r27, Z+17	; 0x11
    311a:	9a 01       	movw	r18, r20
    311c:	ab 01       	movw	r20, r22
    311e:	28 0f       	add	r18, r24
    3120:	39 1f       	adc	r19, r25
    3122:	4a 1f       	adc	r20, r26
    3124:	5b 1f       	adc	r21, r27
    3126:	c1 2c       	mov	r12, r1
    3128:	d1 2c       	mov	r13, r1
    312a:	76 01       	movw	r14, r12
    312c:	00 e0       	ldi	r16, 0x00	; 0
    312e:	10 e0       	ldi	r17, 0x00	; 0
    3130:	60 e0       	ldi	r22, 0x00	; 0
    3132:	c5 01       	movw	r24, r10
    3134:	f2 dd       	rcall	.-1052   	; 0x2d1a <xTimerGenericCommand>
    3136:	27 c0       	rjmp	.+78     	; 0x3186 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3138:	d5 01       	movw	r26, r10
    313a:	56 96       	adiw	r26, 0x16	; 22
    313c:	8c 91       	ld	r24, X
    313e:	56 97       	sbiw	r26, 0x16	; 22
    3140:	8e 7f       	andi	r24, 0xFE	; 254
    3142:	56 96       	adiw	r26, 0x16	; 22
    3144:	8c 93       	st	X, r24
                        break;
    3146:	1f c0       	rjmp	.+62     	; 0x3186 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3148:	f5 01       	movw	r30, r10
    314a:	86 89       	ldd	r24, Z+22	; 0x16
    314c:	81 60       	ori	r24, 0x01	; 1
    314e:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3150:	4a 81       	ldd	r20, Y+2	; 0x02
    3152:	5b 81       	ldd	r21, Y+3	; 0x03
    3154:	6c 81       	ldd	r22, Y+4	; 0x04
    3156:	7d 81       	ldd	r23, Y+5	; 0x05
    3158:	46 87       	std	Z+14, r20	; 0x0e
    315a:	57 87       	std	Z+15, r21	; 0x0f
    315c:	60 8b       	std	Z+16, r22	; 0x10
    315e:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3160:	40 0f       	add	r20, r16
    3162:	51 1f       	adc	r21, r17
    3164:	62 1f       	adc	r22, r18
    3166:	73 1f       	adc	r23, r19
    3168:	68 01       	movw	r12, r16
    316a:	79 01       	movw	r14, r18
    316c:	c5 01       	movw	r24, r10
    316e:	42 dd       	rcall	.-1404   	; 0x2bf4 <prvInsertTimerInActiveList>
                        break;
    3170:	0a c0       	rjmp	.+20     	; 0x3186 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3172:	f5 01       	movw	r30, r10
    3174:	86 89       	ldd	r24, Z+22	; 0x16
    3176:	81 fd       	sbrc	r24, 1
    3178:	04 c0       	rjmp	.+8      	; 0x3182 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    317a:	c5 01       	movw	r24, r10
    317c:	0e 94 15 03 	call	0x62a	; 0x62a <vPortFree>
    3180:	02 c0       	rjmp	.+4      	; 0x3186 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3182:	8e 7f       	andi	r24, 0xFE	; 254
    3184:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	a9 01       	movw	r20, r18
    318c:	be 01       	movw	r22, r28
    318e:	6f 5f       	subi	r22, 0xFF	; 255
    3190:	7f 4f       	sbci	r23, 0xFF	; 255
    3192:	80 91 f1 14 	lds	r24, 0x14F1	; 0x8014f1 <xTimerQueue>
    3196:	90 91 f2 14 	lds	r25, 0x14F2	; 0x8014f2 <xTimerQueue+0x1>
    319a:	0e 94 f4 06 	call	0xde8	; 0xde8 <xQueueReceive>
    319e:	81 11       	cpse	r24, r1
    31a0:	70 cf       	rjmp	.-288    	; 0x3082 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    31a2:	28 96       	adiw	r28, 0x08	; 8
    31a4:	0f b6       	in	r0, 0x3f	; 63
    31a6:	f8 94       	cli
    31a8:	de bf       	out	0x3e, r29	; 62
    31aa:	0f be       	out	0x3f, r0	; 63
    31ac:	cd bf       	out	0x3d, r28	; 61
    31ae:	df 91       	pop	r29
    31b0:	cf 91       	pop	r28
    31b2:	1f 91       	pop	r17
    31b4:	0f 91       	pop	r16
    31b6:	ff 90       	pop	r15
    31b8:	ef 90       	pop	r14
    31ba:	df 90       	pop	r13
    31bc:	cf 90       	pop	r12
    31be:	bf 90       	pop	r11
    31c0:	af 90       	pop	r10
    31c2:	08 95       	ret

000031c4 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    31c4:	08 95       	ret

000031c6 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    31c6:	84 b1       	in	r24, 0x04	; 4
    31c8:	80 68       	ori	r24, 0x80	; 128
    31ca:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    31cc:	85 b1       	in	r24, 0x05	; 5
    31ce:	80 68       	ori	r24, 0x80	; 128
    31d0:	85 b9       	out	0x05, r24	; 5
    31d2:	08 95       	ret

000031d4 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    31d4:	83 b1       	in	r24, 0x03	; 3
    31d6:	80 68       	ori	r24, 0x80	; 128
    31d8:	83 b9       	out	0x03, r24	; 3
    31da:	08 95       	ret

000031dc <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    31dc:	f4 df       	rcall	.-24     	; 0x31c6 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    31de:	2f ef       	ldi	r18, 0xFF	; 255
    31e0:	80 e7       	ldi	r24, 0x70	; 112
    31e2:	92 e0       	ldi	r25, 0x02	; 2
    31e4:	21 50       	subi	r18, 0x01	; 1
    31e6:	80 40       	sbci	r24, 0x00	; 0
    31e8:	90 40       	sbci	r25, 0x00	; 0
    31ea:	e1 f7       	brne	.-8      	; 0x31e4 <vApplicationMallocFailedHook+0x8>
    31ec:	00 c0       	rjmp	.+0      	; 0x31ee <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    31ee:	00 00       	nop
    31f0:	f1 df       	rcall	.-30     	; 0x31d4 <prvBlinkMainLed>
    31f2:	f5 cf       	rjmp	.-22     	; 0x31de <vApplicationMallocFailedHook+0x2>

000031f4 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    31f4:	e8 df       	rcall	.-48     	; 0x31c6 <prvSetMainLedOn>
    31f6:	2f ef       	ldi	r18, 0xFF	; 255
    31f8:	87 ea       	ldi	r24, 0xA7	; 167
    31fa:	91 e6       	ldi	r25, 0x61	; 97
    31fc:	21 50       	subi	r18, 0x01	; 1
    31fe:	80 40       	sbci	r24, 0x00	; 0
    3200:	90 40       	sbci	r25, 0x00	; 0
    3202:	e1 f7       	brne	.-8      	; 0x31fc <vApplicationStackOverflowHook+0x8>
    3204:	00 c0       	rjmp	.+0      	; 0x3206 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3206:	00 00       	nop
    3208:	e5 df       	rcall	.-54     	; 0x31d4 <prvBlinkMainLed>
    320a:	f5 cf       	rjmp	.-22     	; 0x31f6 <vApplicationStackOverflowHook+0x2>

0000320c <SensorDataPackageHandler_getLoRaPayload>:

void SensorDataPackageHandler_SetTemperature(int16_t temperature){
	tempIn16 = temperature;
}

lora_driver_payload_t SensorDataPackageHandler_getLoRaPayload(){
    320c:	cf 93       	push	r28
    320e:	df 93       	push	r29
    3210:	ec 01       	movw	r28, r24
	printf("STARTEDSensorDataPackageHandler");
    3212:	89 ea       	ldi	r24, 0xA9	; 169
    3214:	92 e0       	ldi	r25, 0x02	; 2
    3216:	9f 93       	push	r25
    3218:	8f 93       	push	r24
    321a:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <printf>
	printf("and this is the changed hum %u\n", humIn16);
    321e:	80 91 28 15 	lds	r24, 0x1528	; 0x801528 <humIn16+0x1>
    3222:	8f 93       	push	r24
    3224:	80 91 27 15 	lds	r24, 0x1527	; 0x801527 <humIn16>
    3228:	8f 93       	push	r24
    322a:	89 ec       	ldi	r24, 0xC9	; 201
    322c:	92 e0       	ldi	r25, 0x02	; 2
    322e:	9f 93       	push	r25
    3230:	8f 93       	push	r24
    3232:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <printf>
	printf("and also the changed temp %u\n", tempIn16);
    3236:	80 91 26 15 	lds	r24, 0x1526	; 0x801526 <tempIn16+0x1>
    323a:	8f 93       	push	r24
    323c:	80 91 25 15 	lds	r24, 0x1525	; 0x801525 <tempIn16>
    3240:	8f 93       	push	r24
    3242:	89 ee       	ldi	r24, 0xE9	; 233
    3244:	92 e0       	ldi	r25, 0x02	; 2
    3246:	9f 93       	push	r25
    3248:	8f 93       	push	r24
    324a:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <printf>
	printf("and also the changed CO2 %u\n", co2_ppmIn16);
    324e:	80 91 24 15 	lds	r24, 0x1524	; 0x801524 <co2_ppmIn16+0x1>
    3252:	8f 93       	push	r24
    3254:	80 91 23 15 	lds	r24, 0x1523	; 0x801523 <co2_ppmIn16>
    3258:	8f 93       	push	r24
    325a:	87 e0       	ldi	r24, 0x07	; 7
    325c:	93 e0       	ldi	r25, 0x03	; 3
    325e:	9f 93       	push	r25
    3260:	8f 93       	push	r24
    3262:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <printf>
	
	_uplink_payload.len = 6;
    3266:	ed e0       	ldi	r30, 0x0D	; 13
    3268:	f5 e1       	ldi	r31, 0x15	; 21
    326a:	86 e0       	ldi	r24, 0x06	; 6
    326c:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.portNo = 2;
    326e:	82 e0       	ldi	r24, 0x02	; 2
    3270:	80 83       	st	Z, r24
	_uplink_payload.bytes[0] = humIn16 >> 8;
    3272:	80 91 27 15 	lds	r24, 0x1527	; 0x801527 <humIn16>
    3276:	90 91 28 15 	lds	r25, 0x1528	; 0x801528 <humIn16+0x1>
    327a:	92 83       	std	Z+2, r25	; 0x02
	_uplink_payload.bytes[1] = humIn16 & 0xFF;
    327c:	83 83       	std	Z+3, r24	; 0x03
	_uplink_payload.bytes[2] = tempIn16 >> 8;
    327e:	80 91 25 15 	lds	r24, 0x1525	; 0x801525 <tempIn16>
    3282:	90 91 26 15 	lds	r25, 0x1526	; 0x801526 <tempIn16+0x1>
    3286:	94 83       	std	Z+4, r25	; 0x04
	_uplink_payload.bytes[3] = tempIn16 & 0xFF;
    3288:	85 83       	std	Z+5, r24	; 0x05
	_uplink_payload.bytes[4] = co2_ppmIn16 >> 8;
    328a:	80 91 23 15 	lds	r24, 0x1523	; 0x801523 <co2_ppmIn16>
    328e:	90 91 24 15 	lds	r25, 0x1524	; 0x801524 <co2_ppmIn16+0x1>
    3292:	96 83       	std	Z+6, r25	; 0x06
	_uplink_payload.bytes[5] = co2_ppmIn16 & 0xFF;
    3294:	87 83       	std	Z+7, r24	; 0x07
	return _uplink_payload;
    3296:	86 e1       	ldi	r24, 0x16	; 22
    3298:	de 01       	movw	r26, r28
    329a:	01 90       	ld	r0, Z+
    329c:	0d 92       	st	X+, r0
    329e:	8a 95       	dec	r24
    32a0:	e1 f7       	brne	.-8      	; 0x329a <SensorDataPackageHandler_getLoRaPayload+0x8e>
    32a2:	8d b7       	in	r24, 0x3d	; 61
    32a4:	9e b7       	in	r25, 0x3e	; 62
    32a6:	0e 96       	adiw	r24, 0x0e	; 14
    32a8:	0f b6       	in	r0, 0x3f	; 63
    32aa:	f8 94       	cli
    32ac:	9e bf       	out	0x3e, r25	; 62
    32ae:	0f be       	out	0x3f, r0	; 63
    32b0:	8d bf       	out	0x3d, r24	; 61
    32b2:	ce 01       	movw	r24, r28
    32b4:	df 91       	pop	r29
    32b6:	cf 91       	pop	r28
    32b8:	08 95       	ret

000032ba <_lora_setup>:
	,  UpLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    32ba:	cf 93       	push	r28
    32bc:	df 93       	push	r29
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    32c4:	d9 d3       	rcall	.+1970   	; 0x3a78 <lora_driver_rn2483FactoryReset>
    32c6:	55 d6       	rcall	.+3242   	; 0x3f72 <lora_driver_mapReturnCodeToText>
    32c8:	9f 93       	push	r25
    32ca:	8f 93       	push	r24
    32cc:	84 e2       	ldi	r24, 0x24	; 36
    32ce:	93 e0       	ldi	r25, 0x03	; 3
    32d0:	9f 93       	push	r25
    32d2:	8f 93       	push	r24
    32d4:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    32d8:	4d d5       	rcall	.+2714   	; 0x3d74 <lora_driver_configureToEu868>
    32da:	4b d6       	rcall	.+3222   	; 0x3f72 <lora_driver_mapReturnCodeToText>
    32dc:	9f 93       	push	r25
    32de:	8f 93       	push	r24
    32e0:	87 e3       	ldi	r24, 0x37	; 55
    32e2:	93 e0       	ldi	r25, 0x03	; 3
    32e4:	9f 93       	push	r25
    32e6:	8f 93       	push	r24
    32e8:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <printf>
    32ec:	8f e3       	ldi	r24, 0x3F	; 63

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    32ee:	95 e1       	ldi	r25, 0x15	; 21
    32f0:	d5 d3       	rcall	.+1962   	; 0x3a9c <lora_driver_getRn2483Hweui>
    32f2:	3f d6       	rcall	.+3198   	; 0x3f72 <lora_driver_mapReturnCodeToText>
    32f4:	cf e3       	ldi	r28, 0x3F	; 63
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    32f6:	d5 e1       	ldi	r29, 0x15	; 21
    32f8:	df 93       	push	r29
    32fa:	cf 93       	push	r28
    32fc:	9f 93       	push	r25
    32fe:	8f 93       	push	r24
    3300:	80 e5       	ldi	r24, 0x50	; 80
    3302:	93 e0       	ldi	r25, 0x03	; 3
    3304:	9f 93       	push	r25
    3306:	8f 93       	push	r24
    3308:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <printf>
    330c:	ce 01       	movw	r24, r28

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    330e:	e2 d3       	rcall	.+1988   	; 0x3ad4 <lora_driver_setDeviceIdentifier>
    3310:	30 d6       	rcall	.+3168   	; 0x3f72 <lora_driver_mapReturnCodeToText>
    3312:	9f 93       	push	r25
    3314:	8f 93       	push	r24
    3316:	df 93       	push	r29
    3318:	cf 93       	push	r28
    331a:	84 e6       	ldi	r24, 0x64	; 100
    331c:	93 e0       	ldi	r25, 0x03	; 3
    331e:	9f 93       	push	r25
    3320:	8f 93       	push	r24
    3322:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <printf>
    3326:	ae 01       	movw	r20, r28

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3328:	69 e7       	ldi	r22, 0x79	; 121
    332a:	73 e0       	ldi	r23, 0x03	; 3
    332c:	8a e9       	ldi	r24, 0x9A	; 154
    332e:	93 e0       	ldi	r25, 0x03	; 3
    3330:	ff d5       	rcall	.+3070   	; 0x3f30 <lora_driver_setOtaaIdentity>
    3332:	1f d6       	rcall	.+3134   	; 0x3f72 <lora_driver_mapReturnCodeToText>
    3334:	9f 93       	push	r25
    3336:	8f 93       	push	r24
    3338:	df 93       	push	r29
    333a:	cf 93       	push	r28
    333c:	89 e7       	ldi	r24, 0x79	; 121
    333e:	93 e0       	ldi	r25, 0x03	; 3
    3340:	9f 93       	push	r25
    3342:	8f 93       	push	r24
    3344:	8a e9       	ldi	r24, 0x9A	; 154
    3346:	93 e0       	ldi	r25, 0x03	; 3
    3348:	9f 93       	push	r25
    334a:	8f 93       	push	r24
    334c:	8b ea       	ldi	r24, 0xAB	; 171
    334e:	93 e0       	ldi	r25, 0x03	; 3
    3350:	9f 93       	push	r25
    3352:	8f 93       	push	r24
    3354:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <printf>
    3358:	f0 d3       	rcall	.+2016   	; 0x3b3a <lora_driver_saveMac>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    335a:	0b d6       	rcall	.+3094   	; 0x3f72 <lora_driver_mapReturnCodeToText>
    335c:	9f 93       	push	r25
    335e:	8f 93       	push	r24
    3360:	81 ee       	ldi	r24, 0xE1	; 225
    3362:	93 e0       	ldi	r25, 0x03	; 3
    3364:	9f 93       	push	r25
    3366:	8f 93       	push	r24
    3368:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <printf>
    336c:	8d b7       	in	r24, 0x3d	; 61

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    336e:	9e b7       	in	r25, 0x3e	; 62
    3370:	82 96       	adiw	r24, 0x22	; 34
    3372:	0f b6       	in	r0, 0x3f	; 63
    3374:	f8 94       	cli
    3376:	9e bf       	out	0x3e, r25	; 62
    3378:	0f be       	out	0x3f, r0	; 63
    337a:	8d bf       	out	0x3d, r24	; 61
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	d7 d4       	rcall	.+2478   	; 0x3d2e <lora_driver_setAdaptiveDataRate>
    3380:	f8 d5       	rcall	.+3056   	; 0x3f72 <lora_driver_mapReturnCodeToText>
    3382:	9f 93       	push	r25
    3384:	8f 93       	push	r24
    3386:	80 ef       	ldi	r24, 0xF0	; 240
    3388:	93 e0       	ldi	r25, 0x03	; 3
    338a:	9f 93       	push	r25
    338c:	8f 93       	push	r24
    338e:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <printf>
    3392:	84 ef       	ldi	r24, 0xF4	; 244

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3394:	91 e0       	ldi	r25, 0x01	; 1
    3396:	d6 d4       	rcall	.+2476   	; 0x3d44 <lora_driver_setReceiveDelay>
    3398:	ec d5       	rcall	.+3032   	; 0x3f72 <lora_driver_mapReturnCodeToText>
    339a:	9f 93       	push	r25
    339c:	8f 93       	push	r24
    339e:	81 e0       	ldi	r24, 0x01	; 1
    33a0:	8f 93       	push	r24
    33a2:	84 ef       	ldi	r24, 0xF4	; 244
    33a4:	8f 93       	push	r24
    33a6:	81 e1       	ldi	r24, 0x11	; 17
    33a8:	94 e0       	ldi	r25, 0x04	; 4
    33aa:	9f 93       	push	r25
    33ac:	8f 93       	push	r24
    33ae:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <printf>
    33b2:	8d b7       	in	r24, 0x3d	; 61
    33b4:	9e b7       	in	r25, 0x3e	; 62
    33b6:	0a 96       	adiw	r24, 0x0a	; 10
    33b8:	0f b6       	in	r0, 0x3f	; 63
    33ba:	f8 94       	cli
    33bc:	9e bf       	out	0x3e, r25	; 62
    33be:	0f be       	out	0x3f, r0	; 63
    33c0:	8d bf       	out	0x3d, r24	; 61
    33c2:	ca e0       	ldi	r28, 0x0A	; 10

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    33c4:	80 e0       	ldi	r24, 0x00	; 0
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    33c6:	bf d3       	rcall	.+1918   	; 0x3b46 <lora_driver_join>
    33c8:	d8 2f       	mov	r29, r24
    33ca:	d3 d5       	rcall	.+2982   	; 0x3f72 <lora_driver_mapReturnCodeToText>
    33cc:	9f 93       	push	r25
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    33ce:	8f 93       	push	r24
    33d0:	1f 92       	push	r1
    33d2:	cf 93       	push	r28
    33d4:	81 e3       	ldi	r24, 0x31	; 49
    33d6:	94 e0       	ldi	r25, 0x04	; 4
    33d8:	9f 93       	push	r25
    33da:	8f 93       	push	r24
    33dc:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <printf>
    33e0:	0f 90       	pop	r0
    33e2:	0f 90       	pop	r0
    33e4:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    33e6:	0f 90       	pop	r0
    33e8:	0f 90       	pop	r0
    33ea:	0f 90       	pop	r0
    33ec:	d8 30       	cpi	r29, 0x08	; 8
    33ee:	59 f0       	breq	.+22     	; 0x3406 <_lora_setup+0x14c>
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    33f6:	66 e3       	ldi	r22, 0x36	; 54
    33f8:	71 e0       	ldi	r23, 0x01	; 1
    33fa:	80 e0       	ldi	r24, 0x00	; 0
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <vTaskDelay>
    3402:	c1 50       	subi	r28, 0x01	; 1
    3404:	f9 f6       	brne	.-66     	; 0x33c4 <_lora_setup+0x10a>
    3406:	d8 30       	cpi	r29, 0x08	; 8
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3408:	21 f4       	brne	.+8      	; 0x3412 <_lora_setup+0x158>
    340a:	81 e0       	ldi	r24, 0x01	; 1

	if (rc == LORA_ACCEPTED)
    340c:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3410:	09 c0       	rjmp	.+18     	; 0x3424 <_lora_setup+0x16a>
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3418:	80 e0       	ldi	r24, 0x00	; 0
    341a:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    341e:	0e 94 20 04 	call	0x840	; 0x840 <vPortYield>
    3422:	fd cf       	rjmp	.-6      	; 0x341e <_lora_setup+0x164>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3424:	df 91       	pop	r29
    3426:	cf 91       	pop	r28
    3428:	08 95       	ret

0000342a <UpLinkHandler_lora_handler_task>:
		}
	}
}
    342a:	cf 93       	push	r28
    342c:	df 93       	push	r29
    342e:	cd b7       	in	r28, 0x3d	; 61

/*-----------------------------------------------------------*/
void UpLinkHandler_lora_handler_task( void *pvParameters )
{
    3430:	de b7       	in	r29, 0x3e	; 62
    3432:	6a 97       	sbiw	r28, 0x1a	; 26
    3434:	0f b6       	in	r0, 0x3f	; 63
    3436:	f8 94       	cli
    3438:	de bf       	out	0x3e, r29	; 62
    343a:	0f be       	out	0x3f, r0	; 63
    343c:	cd bf       	out	0x3d, r28	; 61
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	0d d3       	rcall	.+1562   	; 0x3a5c <lora_driver_resetRn2483>
	vTaskDelay(2);
    3442:	62 e0       	ldi	r22, 0x02	; 2
    3444:	70 e0       	ldi	r23, 0x00	; 0
    3446:	80 e0       	ldi	r24, 0x00	; 0
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <vTaskDelay>
	lora_driver_resetRn2483(0);
    344e:	80 e0       	ldi	r24, 0x00	; 0
    3450:	05 d3       	rcall	.+1546   	; 0x3a5c <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3452:	66 e9       	ldi	r22, 0x96	; 150
    3454:	70 e0       	ldi	r23, 0x00	; 0
    3456:	80 e0       	ldi	r24, 0x00	; 0
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    345e:	b7 d2       	rcall	.+1390   	; 0x39ce <lora_driver_flushBuffers>

	_lora_setup();
    3460:	2c df       	rcall	.-424    	; 0x32ba <_lora_setup>
    3462:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <xTaskGetTickCount>


	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    3466:	69 83       	std	Y+1, r22	; 0x01
    3468:	7a 83       	std	Y+2, r23	; 0x02
    346a:	8b 83       	std	Y+3, r24	; 0x03
    346c:	9c 83       	std	Y+4, r25	; 0x04
    346e:	48 ea       	ldi	r20, 0xA8	; 168
	
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3470:	58 e4       	ldi	r21, 0x48	; 72
    3472:	60 e0       	ldi	r22, 0x00	; 0
    3474:	70 e0       	ldi	r23, 0x00	; 0
    3476:	ce 01       	movw	r24, r28
    3478:	01 96       	adiw	r24, 0x01	; 1
    347a:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <xTaskDelayUntil>
    347e:	81 e5       	ldi	r24, 0x51	; 81
		printf("startLoraTask");
    3480:	94 e0       	ldi	r25, 0x04	; 4
    3482:	9f 93       	push	r25
    3484:	8f 93       	push	r24
    3486:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <printf>
		_uplink_payload = SensorDataPackageHandler_getLoRaPayload();
    348a:	ce 01       	movw	r24, r28
    348c:	05 96       	adiw	r24, 0x05	; 5
    348e:	be de       	rcall	.-644    	; 0x320c <SensorDataPackageHandler_getLoRaPayload>
    3490:	86 e1       	ldi	r24, 0x16	; 22
    3492:	fe 01       	movw	r30, r28
    3494:	35 96       	adiw	r30, 0x05	; 5
    3496:	a9 e2       	ldi	r26, 0x29	; 41
    3498:	b5 e1       	ldi	r27, 0x15	; 21
    349a:	01 90       	ld	r0, Z+
    349c:	0d 92       	st	X+, r0
    349e:	8a 95       	dec	r24
    34a0:	e1 f7       	brne	.-8      	; 0x349a <UpLinkHandler_lora_handler_task+0x70>
    34a2:	83 e0       	ldi	r24, 0x03	; 3
		status_leds_shortPuls(led_ST4);  // OPTIONAL
    34a4:	0e 94 82 26 	call	0x4d04	; 0x4d04 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    34a8:	69 e2       	ldi	r22, 0x29	; 41
    34aa:	75 e1       	ldi	r23, 0x15	; 21
    34ac:	80 e0       	ldi	r24, 0x00	; 0
    34ae:	74 d3       	rcall	.+1768   	; 0x3b98 <lora_driver_sendUploadMessage>
    34b0:	60 d5       	rcall	.+2752   	; 0x3f72 <lora_driver_mapReturnCodeToText>
    34b2:	9f 93       	push	r25
    34b4:	8f 93       	push	r24
    34b6:	8f e5       	ldi	r24, 0x5F	; 95
    34b8:	94 e0       	ldi	r25, 0x04	; 4
    34ba:	9f 93       	push	r25
    34bc:	8f 93       	push	r24
    34be:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <printf>
    34c2:	0f 90       	pop	r0
    34c4:	0f 90       	pop	r0
    34c6:	0f 90       	pop	r0
    34c8:	0f 90       	pop	r0
    34ca:	0f 90       	pop	r0
    34cc:	0f 90       	pop	r0
    34ce:	cf cf       	rjmp	.-98     	; 0x346e <UpLinkHandler_lora_handler_task+0x44>

000034d0 <UpLinkHandler_lora_handler_initialise>:
    34d0:	ef 92       	push	r14
    34d2:	ff 92       	push	r15

static lora_driver_payload_t _uplink_payload;


void UpLinkHandler_lora_handler_initialise(UBaseType_t UpLinkHandler_lora_handler_task_priority)
{
    34d4:	0f 93       	push	r16
	xTaskCreate(
    34d6:	e1 2c       	mov	r14, r1
    34d8:	f1 2c       	mov	r15, r1
    34da:	08 2f       	mov	r16, r24
    34dc:	20 e0       	ldi	r18, 0x00	; 0
    34de:	30 e0       	ldi	r19, 0x00	; 0
    34e0:	48 e8       	ldi	r20, 0x88	; 136
    34e2:	51 e0       	ldi	r21, 0x01	; 1
    34e4:	64 e7       	ldi	r22, 0x74	; 116
    34e6:	74 e0       	ldi	r23, 0x04	; 4
    34e8:	85 e1       	ldi	r24, 0x15	; 21
    34ea:	9a e1       	ldi	r25, 0x1A	; 26
    34ec:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  UpLinkHandler_lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    34f0:	0f 91       	pop	r16
    34f2:	ff 90       	pop	r15
    34f4:	ef 90       	pop	r14
    34f6:	08 95       	ret

000034f8 <hih8120_handler_initialise>:
	return humidityIn16/10;
}

int16_t hih820_getTemperatureInUint16(){
	return temperatureIn16/10;
}
    34f8:	ef 92       	push	r14
    34fa:	ff 92       	push	r15
    34fc:	0f 93       	push	r16
    34fe:	08 2f       	mov	r16, r24
    3500:	ca d0       	rcall	.+404    	; 0x3696 <hih8120_initialise>
    3502:	81 11       	cpse	r24, r1
    3504:	0c c0       	rjmp	.+24     	; 0x351e <hih8120_handler_initialise+0x26>
    3506:	1f 92       	push	r1
    3508:	1f 92       	push	r1
    350a:	8b e7       	ldi	r24, 0x7B	; 123
    350c:	94 e0       	ldi	r25, 0x04	; 4
    350e:	9f 93       	push	r25
    3510:	8f 93       	push	r24
    3512:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <printf>
    3516:	0f 90       	pop	r0
    3518:	0f 90       	pop	r0
    351a:	0f 90       	pop	r0
    351c:	0f 90       	pop	r0
    351e:	e1 2c       	mov	r14, r1
    3520:	f1 2c       	mov	r15, r1
    3522:	20 e0       	ldi	r18, 0x00	; 0
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	40 ec       	ldi	r20, 0xC0	; 192
    3528:	50 e0       	ldi	r21, 0x00	; 0
    352a:	6f e7       	ldi	r22, 0x7F	; 127
    352c:	74 e0       	ldi	r23, 0x04	; 4
    352e:	86 ea       	ldi	r24, 0xA6	; 166
    3530:	9a e1       	ldi	r25, 0x1A	; 26
    3532:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <xTaskCreate>
    3536:	0f 91       	pop	r16
    3538:	ff 90       	pop	r15
    353a:	ef 90       	pop	r14
    353c:	08 95       	ret

0000353e <hih820_aFunctionToSetBits>:
void hih820_aFunctionToSetBits( EventGroupHandle_t xEventGroup )
{
EventBits_t uxBits;

  /* Set bit 0 and bit 4 in xEventGroup. */
  uxBits = xEventGroupSetBits(
    353e:	40 e1       	ldi	r20, 0x10	; 16
    3540:	50 e0       	ldi	r21, 0x00	; 0
    3542:	60 e0       	ldi	r22, 0x00	; 0
    3544:	70 e0       	ldi	r23, 0x00	; 0
    3546:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <xEventGroupSetBits>
    354a:	08 95       	ret

0000354c <hih820_handler_task>:
	,  hih8120_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

void hih820_handler_task(void *pvParameters)
{
    354c:	cf 93       	push	r28
    354e:	df 93       	push	r29
    3550:	00 d0       	rcall	.+0      	; 0x3552 <hih820_handler_task+0x6>
    3552:	1f 92       	push	r1
    3554:	cd b7       	in	r28, 0x3d	; 61
    3556:	de b7       	in	r29, 0x3e	; 62
	printf("start1");
    3558:	8a e8       	ldi	r24, 0x8A	; 138
    355a:	94 e0       	ldi	r25, 0x04	; 4
    355c:	9f 93       	push	r25
    355e:	8f 93       	push	r24
    3560:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <printf>
	(void)pvParameters;
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    3564:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <xTaskGetTickCount>
    3568:	69 83       	std	Y+1, r22	; 0x01
    356a:	7a 83       	std	Y+2, r23	; 0x02
    356c:	8b 83       	std	Y+3, r24	; 0x03
    356e:	9c 83       	std	Y+4, r25	; 0x04
    3570:	0f 90       	pop	r0
    3572:	0f 90       	pop	r0
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3574:	48 ea       	ldi	r20, 0xA8	; 168
    3576:	58 e4       	ldi	r21, 0x48	; 72
    3578:	60 e0       	ldi	r22, 0x00	; 0
    357a:	70 e0       	ldi	r23, 0x00	; 0
    357c:	ce 01       	movw	r24, r28
    357e:	01 96       	adiw	r24, 0x01	; 1
    3580:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <xTaskDelayUntil>
		printf("start2");
    3584:	81 e9       	ldi	r24, 0x91	; 145
    3586:	94 e0       	ldi	r25, 0x04	; 4
    3588:	9f 93       	push	r25
    358a:	8f 93       	push	r24
    358c:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <printf>
		if (HIH8120_OK == hih8120_wakeup())
    3590:	9a d0       	rcall	.+308    	; 0x36c6 <hih8120_wakeup>
    3592:	0f 90       	pop	r0
    3594:	0f 90       	pop	r0
    3596:	81 11       	cpse	r24, r1
    3598:	ed cf       	rjmp	.-38     	; 0x3574 <hih820_handler_task+0x28>
		{
			printf("start4");
    359a:	88 e9       	ldi	r24, 0x98	; 152
    359c:	94 e0       	ldi	r25, 0x04	; 4
    359e:	9f 93       	push	r25
    35a0:	8f 93       	push	r24
    35a2:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <printf>
			vTaskDelay(50);
    35a6:	62 e3       	ldi	r22, 0x32	; 50
    35a8:	70 e0       	ldi	r23, 0x00	; 0
    35aa:	80 e0       	ldi	r24, 0x00	; 0
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <vTaskDelay>
			if (HIH8120_OK == hih8120_measure())
    35b2:	9e d0       	rcall	.+316    	; 0x36f0 <hih8120_measure>
    35b4:	0f 90       	pop	r0
    35b6:	0f 90       	pop	r0
    35b8:	81 11       	cpse	r24, r1
    35ba:	dc cf       	rjmp	.-72     	; 0x3574 <hih820_handler_task+0x28>
			{
				printf("start5");
    35bc:	8f e9       	ldi	r24, 0x9F	; 159
    35be:	94 e0       	ldi	r25, 0x04	; 4
    35c0:	9f 93       	push	r25
    35c2:	8f 93       	push	r24
    35c4:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <printf>
				vTaskDelay(1);
    35c8:	61 e0       	ldi	r22, 0x01	; 1
    35ca:	70 e0       	ldi	r23, 0x00	; 0
    35cc:	80 e0       	ldi	r24, 0x00	; 0
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <vTaskDelay>
				humidityIn16 = hih8120_getHumidityPercent_x10();
    35d4:	b3 d0       	rcall	.+358    	; 0x373c <hih8120_getHumidityPercent_x10>
    35d6:	90 93 a6 15 	sts	0x15A6, r25	; 0x8015a6 <humidityIn16+0x1>
    35da:	80 93 a5 15 	sts	0x15A5, r24	; 0x8015a5 <humidityIn16>
				temperatureIn16 = hih8120_getTemperature_x10();
    35de:	d4 d0       	rcall	.+424    	; 0x3788 <hih8120_getTemperature_x10>
    35e0:	90 93 a4 15 	sts	0x15A4, r25	; 0x8015a4 <temperatureIn16+0x1>
    35e4:	80 93 a3 15 	sts	0x15A3, r24	; 0x8015a3 <temperatureIn16>
				printf("Arrived here");
    35e8:	86 ea       	ldi	r24, 0xA6	; 166
    35ea:	94 e0       	ldi	r25, 0x04	; 4
    35ec:	9f 93       	push	r25
    35ee:	8f 93       	push	r24
    35f0:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <printf>
				hih820_aFunctionToSetBits(Application_getEventGroup());
    35f4:	0e 94 08 01 	call	0x210	; 0x210 <Application_getEventGroup>
    35f8:	a2 df       	rcall	.-188    	; 0x353e <hih820_aFunctionToSetBits>
    35fa:	0f 90       	pop	r0
    35fc:	0f 90       	pop	r0
    35fe:	0f 90       	pop	r0
    3600:	0f 90       	pop	r0
    3602:	b8 cf       	rjmp	.-144    	; 0x3574 <hih820_handler_task+0x28>

00003604 <main>:
/*-----------------------------------------------------------*/
int main(void)
{
	// Must be done as the very first thing!!
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	0e 94 b7 24 	call	0x496e	; 0x496e <stdio_initialise>
	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(6); // Priority 5 for internal task
    360a:	86 e0       	ldi	r24, 0x06	; 6
    360c:	0e 94 be 25 	call	0x4b7c	; 0x4b7c <status_leds_initialise>
	//Initialize Application
	//Application_handler_initialise(5);
	//initialize CO2Sensor
	mh_z19_initialise(ser_USART3);
    3610:	83 e0       	ldi	r24, 0x03	; 3
    3612:	8b d5       	rcall	.+2838   	; 0x412a <mh_z19_initialise>
	//create CO2 task
	CO2Sensor_handler_initialise(4);
    3614:	84 e0       	ldi	r24, 0x04	; 4
    3616:	0e 94 0d 01 	call	0x21a	; 0x21a <CO2Sensor_handler_initialise>
	//Create humidity temperature task and start with priority 3
	hih8120_handler_initialise(3);
    361a:	83 e0       	ldi	r24, 0x03	; 3
    361c:	6d df       	rcall	.-294    	; 0x34f8 <hih8120_handler_initialise>
	//initialize rc_servo
	//rc_servo_initialise();
	// Initialise the LoRaWAN driver with down-link buffer
	//downLinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
	lora_driver_initialise(2, downLinkMessageBufferHandle);
    361e:	60 91 a7 15 	lds	r22, 0x15A7	; 0x8015a7 <downLinkMessageBufferHandle>
    3622:	70 91 a8 15 	lds	r23, 0x15A8	; 0x8015a8 <downLinkMessageBufferHandle+0x1>
    3626:	82 e0       	ldi	r24, 0x02	; 2
	// Create LoRaWAN task and start it up with priority 2
	UpLinkHandler_lora_handler_initialise(2);
    3628:	d9 d1       	rcall	.+946    	; 0x39dc <lora_driver_initialise>
    362a:	82 e0       	ldi	r24, 0x02	; 2
    362c:	51 df       	rcall	.-350    	; 0x34d0 <UpLinkHandler_lora_handler_initialise>
	//Create LoRaWAN task and start with priority 1
	//DownLinkHandler_lora_handler_initialise(1,downLinkMessageBufferHandle);
	//Create Configuration for Downlink_handler and WindowController
	
	printf("Program Started!!\n");
    362e:	83 eb       	ldi	r24, 0xB3	; 179
    3630:	94 e0       	ldi	r25, 0x04	; 4
    3632:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <puts>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    3636:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <vTaskStartScheduler>
    363a:	ff cf       	rjmp	.-2      	; 0x363a <main+0x36>

0000363c <_hihTwiCallback>:
    363c:	65 30       	cpi	r22, 0x05	; 5
    363e:	f1 f4       	brne	.+60     	; 0x367c <_hihTwiCallback+0x40>
    3640:	fa 01       	movw	r30, r20
    3642:	80 81       	ld	r24, Z
    3644:	8f 73       	andi	r24, 0x3F	; 63
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	98 2f       	mov	r25, r24
    364a:	88 27       	eor	r24, r24
    364c:	21 81       	ldd	r18, Z+1	; 0x01
    364e:	82 2b       	or	r24, r18
    3650:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3654:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3658:	82 81       	ldd	r24, Z+2	; 0x02
    365a:	f0 e4       	ldi	r31, 0x40	; 64
    365c:	8f 9f       	mul	r24, r31
    365e:	c0 01       	movw	r24, r0
    3660:	11 24       	eor	r1, r1
    3662:	fa 01       	movw	r30, r20
    3664:	23 81       	ldd	r18, Z+3	; 0x03
    3666:	26 95       	lsr	r18
    3668:	26 95       	lsr	r18
    366a:	82 2b       	or	r24, r18
    366c:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3670:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	80 93 a9 15 	sts	0x15A9, r24	; 0x8015a9 <_measuringIsReady>
    367a:	08 95       	ret
    367c:	64 30       	cpi	r22, 0x04	; 4
    367e:	51 f0       	breq	.+20     	; 0x3694 <_hihTwiCallback+0x58>
    3680:	80 e0       	ldi	r24, 0x00	; 0
    3682:	90 e4       	ldi	r25, 0x40	; 64
    3684:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3688:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    368c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3690:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3694:	08 95       	ret

00003696 <hih8120_initialise>:
    3696:	0f 93       	push	r16
    3698:	1f 93       	push	r17
    369a:	0e e1       	ldi	r16, 0x1E	; 30
    369c:	1b e1       	ldi	r17, 0x1B	; 27
    369e:	20 e0       	ldi	r18, 0x00	; 0
    36a0:	34 e2       	ldi	r19, 0x24	; 36
    36a2:	44 ef       	ldi	r20, 0xF4	; 244
    36a4:	50 e0       	ldi	r21, 0x00	; 0
    36a6:	60 e0       	ldi	r22, 0x00	; 0
    36a8:	87 e2       	ldi	r24, 0x27	; 39
    36aa:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <twiCreate>
    36ae:	90 93 ab 15 	sts	0x15AB, r25	; 0x8015ab <_hih8120Handler+0x1>
    36b2:	80 93 aa 15 	sts	0x15AA, r24	; 0x8015aa <_hih8120Handler>
    36b6:	21 e0       	ldi	r18, 0x01	; 1
    36b8:	89 2b       	or	r24, r25
    36ba:	09 f0       	breq	.+2      	; 0x36be <hih8120_initialise+0x28>
    36bc:	20 e0       	ldi	r18, 0x00	; 0
    36be:	82 2f       	mov	r24, r18
    36c0:	1f 91       	pop	r17
    36c2:	0f 91       	pop	r16
    36c4:	08 95       	ret

000036c6 <hih8120_wakeup>:
    36c6:	80 91 aa 15 	lds	r24, 0x15AA	; 0x8015aa <_hih8120Handler>
    36ca:	90 91 ab 15 	lds	r25, 0x15AB	; 0x8015ab <_hih8120Handler+0x1>
    36ce:	00 97       	sbiw	r24, 0x00	; 0
    36d0:	59 f0       	breq	.+22     	; 0x36e8 <hih8120_wakeup+0x22>
    36d2:	40 e0       	ldi	r20, 0x00	; 0
    36d4:	60 e0       	ldi	r22, 0x00	; 0
    36d6:	70 e0       	ldi	r23, 0x00	; 0
    36d8:	0e 94 f6 26 	call	0x4dec	; 0x4dec <twiTransmit>
    36dc:	84 30       	cpi	r24, 0x04	; 4
    36de:	31 f4       	brne	.+12     	; 0x36ec <hih8120_wakeup+0x26>
    36e0:	10 92 a9 15 	sts	0x15A9, r1	; 0x8015a9 <_measuringIsReady>
    36e4:	80 e0       	ldi	r24, 0x00	; 0
    36e6:	08 95       	ret
    36e8:	82 e0       	ldi	r24, 0x02	; 2
    36ea:	08 95       	ret
    36ec:	83 e0       	ldi	r24, 0x03	; 3
    36ee:	08 95       	ret

000036f0 <hih8120_measure>:
    36f0:	80 91 aa 15 	lds	r24, 0x15AA	; 0x8015aa <_hih8120Handler>
    36f4:	90 91 ab 15 	lds	r25, 0x15AB	; 0x8015ab <_hih8120Handler+0x1>
    36f8:	00 97       	sbiw	r24, 0x00	; 0
    36fa:	39 f0       	breq	.+14     	; 0x370a <hih8120_measure+0x1a>
    36fc:	64 e0       	ldi	r22, 0x04	; 4
    36fe:	0e 94 42 27 	call	0x4e84	; 0x4e84 <twiReceive>
    3702:	85 30       	cpi	r24, 0x05	; 5
    3704:	21 f0       	breq	.+8      	; 0x370e <hih8120_measure+0x1e>
    3706:	83 e0       	ldi	r24, 0x03	; 3
    3708:	08 95       	ret
    370a:	82 e0       	ldi	r24, 0x02	; 2
    370c:	08 95       	ret
    370e:	80 e0       	ldi	r24, 0x00	; 0
    3710:	08 95       	ret

00003712 <hih8120_getHumidity>:
    3712:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3716:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    371a:	80 e0       	ldi	r24, 0x00	; 0
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	0e 94 4c 29 	call	0x5298	; 0x5298 <__floatunsisf>
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	48 ec       	ldi	r20, 0xC8	; 200
    3728:	52 e4       	ldi	r21, 0x42	; 66
    372a:	0e 94 da 29 	call	0x53b4	; 0x53b4 <__mulsf3>
    372e:	20 e0       	ldi	r18, 0x00	; 0
    3730:	38 ef       	ldi	r19, 0xF8	; 248
    3732:	4f e7       	ldi	r20, 0x7F	; 127
    3734:	56 e4       	ldi	r21, 0x46	; 70
    3736:	0c 94 b3 28 	jmp	0x5166	; 0x5166 <__divsf3>
    373a:	08 95       	ret

0000373c <hih8120_getHumidityPercent_x10>:
    373c:	ea df       	rcall	.-44     	; 0x3712 <hih8120_getHumidity>
    373e:	20 e0       	ldi	r18, 0x00	; 0
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	40 e2       	ldi	r20, 0x20	; 32
    3744:	51 e4       	ldi	r21, 0x41	; 65
    3746:	0e 94 da 29 	call	0x53b4	; 0x53b4 <__mulsf3>
    374a:	0e 94 20 29 	call	0x5240	; 0x5240 <__fixunssfsi>
    374e:	cb 01       	movw	r24, r22
    3750:	08 95       	ret

00003752 <hih8120_getTemperature>:
    3752:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3756:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    375a:	80 e0       	ldi	r24, 0x00	; 0
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	0e 94 4c 29 	call	0x5298	; 0x5298 <__floatunsisf>
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	45 e2       	ldi	r20, 0x25	; 37
    3768:	53 e4       	ldi	r21, 0x43	; 67
    376a:	0e 94 da 29 	call	0x53b4	; 0x53b4 <__mulsf3>
    376e:	20 e0       	ldi	r18, 0x00	; 0
    3770:	38 ef       	ldi	r19, 0xF8	; 248
    3772:	4f e7       	ldi	r20, 0x7F	; 127
    3774:	56 e4       	ldi	r21, 0x46	; 70
    3776:	0e 94 b3 28 	call	0x5166	; 0x5166 <__divsf3>
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	40 e2       	ldi	r20, 0x20	; 32
    3780:	52 e4       	ldi	r21, 0x42	; 66
    3782:	0c 94 4e 28 	jmp	0x509c	; 0x509c <__subsf3>
    3786:	08 95       	ret

00003788 <hih8120_getTemperature_x10>:
    3788:	e4 df       	rcall	.-56     	; 0x3752 <hih8120_getTemperature>
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	40 e2       	ldi	r20, 0x20	; 32
    3790:	51 e4       	ldi	r21, 0x41	; 65
    3792:	0e 94 da 29 	call	0x53b4	; 0x53b4 <__mulsf3>
    3796:	0e 94 1b 29 	call	0x5236	; 0x5236 <__fixsfsi>
    379a:	cb 01       	movw	r24, r22
    379c:	08 95       	ret

0000379e <_serialCallBack>:
    379e:	0f 93       	push	r16
    37a0:	1f 93       	push	r17
    37a2:	cf 93       	push	r28
    37a4:	df 93       	push	r29
    37a6:	1f 92       	push	r1
    37a8:	1f 92       	push	r1
    37aa:	cd b7       	in	r28, 0x3d	; 61
    37ac:	de b7       	in	r29, 0x3e	; 62
    37ae:	8c 01       	movw	r16, r24
    37b0:	19 82       	std	Y+1, r1	; 0x01
    37b2:	2d c0       	rjmp	.+90     	; 0x380e <_serialCallBack+0x70>
    37b4:	e0 91 e3 15 	lds	r30, 0x15E3	; 0x8015e3 <rec_buf_inp.2878>
    37b8:	ec 32       	cpi	r30, 0x2C	; 44
    37ba:	50 f4       	brcc	.+20     	; 0x37d0 <_serialCallBack+0x32>
    37bc:	81 e0       	ldi	r24, 0x01	; 1
    37be:	8e 0f       	add	r24, r30
    37c0:	80 93 e3 15 	sts	0x15E3, r24	; 0x8015e3 <rec_buf_inp.2878>
    37c4:	f0 e0       	ldi	r31, 0x00	; 0
    37c6:	eb 5e       	subi	r30, 0xEB	; 235
    37c8:	f9 4e       	sbci	r31, 0xE9	; 233
    37ca:	8a 81       	ldd	r24, Y+2	; 0x02
    37cc:	80 83       	st	Z, r24
    37ce:	02 c0       	rjmp	.+4      	; 0x37d4 <_serialCallBack+0x36>
    37d0:	10 92 e3 15 	sts	0x15E3, r1	; 0x8015e3 <rec_buf_inp.2878>
    37d4:	8a 81       	ldd	r24, Y+2	; 0x02
    37d6:	8a 30       	cpi	r24, 0x0A	; 10
    37d8:	d1 f4       	brne	.+52     	; 0x380e <_serialCallBack+0x70>
    37da:	40 91 e3 15 	lds	r20, 0x15E3	; 0x8015e3 <rec_buf_inp.2878>
    37de:	50 e0       	ldi	r21, 0x00	; 0
    37e0:	fa 01       	movw	r30, r20
    37e2:	ed 5e       	subi	r30, 0xED	; 237
    37e4:	f9 4e       	sbci	r31, 0xE9	; 233
    37e6:	10 82       	st	Z, r1
    37e8:	41 50       	subi	r20, 0x01	; 1
    37ea:	51 09       	sbc	r21, r1
    37ec:	9e 01       	movw	r18, r28
    37ee:	2f 5f       	subi	r18, 0xFF	; 255
    37f0:	3f 4f       	sbci	r19, 0xFF	; 255
    37f2:	65 e1       	ldi	r22, 0x15	; 21
    37f4:	76 e1       	ldi	r23, 0x16	; 22
    37f6:	80 91 e6 15 	lds	r24, 0x15E6	; 0x8015e6 <_serialReplyBufferHandle>
    37fa:	90 91 e7 15 	lds	r25, 0x15E7	; 0x8015e7 <_serialReplyBufferHandle+0x1>
    37fe:	0e 94 09 0a 	call	0x1412	; 0x1412 <xStreamBufferSendFromISR>
    3802:	89 81       	ldd	r24, Y+1	; 0x01
    3804:	81 11       	cpse	r24, r1
    3806:	0e 94 20 04 	call	0x840	; 0x840 <vPortYield>
    380a:	10 92 e3 15 	sts	0x15E3, r1	; 0x8015e3 <rec_buf_inp.2878>
    380e:	be 01       	movw	r22, r28
    3810:	6e 5f       	subi	r22, 0xFE	; 254
    3812:	7f 4f       	sbci	r23, 0xFF	; 255
    3814:	c8 01       	movw	r24, r16
    3816:	15 d6       	rcall	.+3114   	; 0x4442 <serial_getByte>
    3818:	88 23       	and	r24, r24
    381a:	61 f2       	breq	.-104    	; 0x37b4 <_serialCallBack+0x16>
    381c:	0f 90       	pop	r0
    381e:	0f 90       	pop	r0
    3820:	df 91       	pop	r29
    3822:	cf 91       	pop	r28
    3824:	1f 91       	pop	r17
    3826:	0f 91       	pop	r16
    3828:	08 95       	ret

0000382a <_uploadMessage>:
    382a:	0f 93       	push	r16
    382c:	1f 93       	push	r17
    382e:	cf 93       	push	r28
    3830:	df 93       	push	r29
    3832:	8c 01       	movw	r16, r24
    3834:	eb 01       	movw	r28, r22
    3836:	80 91 e6 15 	lds	r24, 0x15E6	; 0x8015e6 <_serialReplyBufferHandle>
    383a:	90 91 e7 15 	lds	r25, 0x15E7	; 0x8015e7 <_serialReplyBufferHandle+0x1>
    383e:	0e 94 14 09 	call	0x1228	; 0x1228 <xStreamBufferReset>
    3842:	b8 01       	movw	r22, r16
    3844:	8c ea       	ldi	r24, 0xAC	; 172
    3846:	95 e1       	ldi	r25, 0x15	; 21
    3848:	0e 94 cc 2b 	call	0x5798	; 0x5798 <strcpy>
    384c:	20 97       	sbiw	r28, 0x00	; 0
    384e:	79 f0       	breq	.+30     	; 0x386e <_uploadMessage+0x44>
    3850:	ec ea       	ldi	r30, 0xAC	; 172
    3852:	f5 e1       	ldi	r31, 0x15	; 21
    3854:	01 90       	ld	r0, Z+
    3856:	00 20       	and	r0, r0
    3858:	e9 f7       	brne	.-6      	; 0x3854 <_uploadMessage+0x2a>
    385a:	31 97       	sbiw	r30, 0x01	; 1
    385c:	80 e2       	ldi	r24, 0x20	; 32
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	91 83       	std	Z+1, r25	; 0x01
    3862:	80 83       	st	Z, r24
    3864:	be 01       	movw	r22, r28
    3866:	8c ea       	ldi	r24, 0xAC	; 172
    3868:	95 e1       	ldi	r25, 0x15	; 21
    386a:	0e 94 c1 2b 	call	0x5782	; 0x5782 <strcat>
    386e:	ec ea       	ldi	r30, 0xAC	; 172
    3870:	f5 e1       	ldi	r31, 0x15	; 21
    3872:	df 01       	movw	r26, r30
    3874:	0d 90       	ld	r0, X+
    3876:	00 20       	and	r0, r0
    3878:	e9 f7       	brne	.-6      	; 0x3874 <_uploadMessage+0x4a>
    387a:	11 97       	sbiw	r26, 0x01	; 1
    387c:	8d e0       	ldi	r24, 0x0D	; 13
    387e:	9a e0       	ldi	r25, 0x0A	; 10
    3880:	11 96       	adiw	r26, 0x01	; 1
    3882:	9c 93       	st	X, r25
    3884:	8e 93       	st	-X, r24
    3886:	12 96       	adiw	r26, 0x02	; 2
    3888:	1c 92       	st	X, r1
    388a:	01 90       	ld	r0, Z+
    388c:	00 20       	and	r0, r0
    388e:	e9 f7       	brne	.-6      	; 0x388a <_uploadMessage+0x60>
    3890:	31 97       	sbiw	r30, 0x01	; 1
    3892:	ec 5a       	subi	r30, 0xAC	; 172
    3894:	f5 41       	sbci	r31, 0x15	; 21
    3896:	ae 2f       	mov	r26, r30
    3898:	8c ea       	ldi	r24, 0xAC	; 172
    389a:	95 e1       	ldi	r25, 0x15	; 21
    389c:	ac 01       	movw	r20, r24
    389e:	6a 2f       	mov	r22, r26
    38a0:	80 91 e8 15 	lds	r24, 0x15E8	; 0x8015e8 <_rn2483_serial>
    38a4:	90 91 e9 15 	lds	r25, 0x15E9	; 0x8015e9 <_rn2483_serial+0x1>
    38a8:	77 d5       	rcall	.+2798   	; 0x4398 <serial_sendBytes>
    38aa:	81 11       	cpse	r24, r1
    38ac:	11 c0       	rjmp	.+34     	; 0x38d0 <_uploadMessage+0xa6>
    38ae:	08 e2       	ldi	r16, 0x28	; 40
    38b0:	15 e0       	ldi	r17, 0x05	; 5
    38b2:	20 e0       	ldi	r18, 0x00	; 0
    38b4:	30 e0       	ldi	r19, 0x00	; 0
    38b6:	4d e2       	ldi	r20, 0x2D	; 45
    38b8:	50 e0       	ldi	r21, 0x00	; 0
    38ba:	6f e6       	ldi	r22, 0x6F	; 111
    38bc:	76 e1       	ldi	r23, 0x16	; 22
    38be:	80 91 e6 15 	lds	r24, 0x15E6	; 0x8015e6 <_serialReplyBufferHandle>
    38c2:	90 91 e7 15 	lds	r25, 0x15E7	; 0x8015e7 <_serialReplyBufferHandle+0x1>
    38c6:	0e 94 4d 0a 	call	0x149a	; 0x149a <xStreamBufferReceive>
    38ca:	8f e6       	ldi	r24, 0x6F	; 111
    38cc:	96 e1       	ldi	r25, 0x16	; 22
    38ce:	02 c0       	rjmp	.+4      	; 0x38d4 <_uploadMessage+0xaa>
    38d0:	80 e0       	ldi	r24, 0x00	; 0
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	df 91       	pop	r29
    38d6:	cf 91       	pop	r28
    38d8:	1f 91       	pop	r17
    38da:	0f 91       	pop	r16
    38dc:	08 95       	ret

000038de <_reply2ReturnCode>:
    38de:	2f 92       	push	r2
    38e0:	3f 92       	push	r3
    38e2:	4f 92       	push	r4
    38e4:	5f 92       	push	r5
    38e6:	6f 92       	push	r6
    38e8:	7f 92       	push	r7
    38ea:	8f 92       	push	r8
    38ec:	9f 92       	push	r9
    38ee:	af 92       	push	r10
    38f0:	bf 92       	push	r11
    38f2:	cf 92       	push	r12
    38f4:	df 92       	push	r13
    38f6:	ef 92       	push	r14
    38f8:	ff 92       	push	r15
    38fa:	0f 93       	push	r16
    38fc:	1f 93       	push	r17
    38fe:	cf 93       	push	r28
    3900:	df 93       	push	r29
    3902:	5c 01       	movw	r10, r24
    3904:	fc 01       	movw	r30, r24
    3906:	01 90       	ld	r0, Z+
    3908:	00 20       	and	r0, r0
    390a:	e9 f7       	brne	.-6      	; 0x3906 <_reply2ReturnCode+0x28>
    390c:	31 97       	sbiw	r30, 0x01	; 1
    390e:	6f 01       	movw	r12, r30
    3910:	c8 1a       	sub	r12, r24
    3912:	d9 0a       	sbc	r13, r25
    3914:	5c 2c       	mov	r5, r12
    3916:	0f 2e       	mov	r0, r31
    3918:	fe e5       	ldi	r31, 0x5E	; 94
    391a:	8f 2e       	mov	r8, r31
    391c:	f7 e0       	ldi	r31, 0x07	; 7
    391e:	9f 2e       	mov	r9, r31
    3920:	f0 2d       	mov	r31, r0
    3922:	e1 2c       	mov	r14, r1
    3924:	f1 2c       	mov	r15, r1
    3926:	4c 2c       	mov	r4, r12
    3928:	37 01       	movw	r6, r14
    392a:	f4 01       	movw	r30, r8
    392c:	01 81       	ldd	r16, Z+1	; 0x01
    392e:	12 81       	ldd	r17, Z+2	; 0x02
    3930:	e8 01       	movw	r28, r16
    3932:	09 90       	ld	r0, Y+
    3934:	00 20       	and	r0, r0
    3936:	e9 f7       	brne	.-6      	; 0x3932 <_reply2ReturnCode+0x54>
    3938:	21 97       	sbiw	r28, 0x01	; 1
    393a:	c0 1b       	sub	r28, r16
    393c:	d1 0b       	sbc	r29, r17
    393e:	3c 2e       	mov	r3, r28
    3940:	f9 e0       	ldi	r31, 0x09	; 9
    3942:	cf 16       	cp	r12, r31
    3944:	d1 04       	cpc	r13, r1
    3946:	58 f0       	brcs	.+22     	; 0x395e <_reply2ReturnCode+0x80>
    3948:	f4 01       	movw	r30, r8
    394a:	20 80       	ld	r2, Z
    394c:	fe e0       	ldi	r31, 0x0E	; 14
    394e:	2f 12       	cpse	r2, r31
    3950:	06 c0       	rjmp	.+12     	; 0x395e <_reply2ReturnCode+0x80>
    3952:	b8 01       	movw	r22, r16
    3954:	c5 01       	movw	r24, r10
    3956:	0e 94 9c 2b 	call	0x5738	; 0x5738 <strcasestr>
    395a:	89 2b       	or	r24, r25
    395c:	09 f5       	brne	.+66     	; 0x39a0 <_reply2ReturnCode+0xc2>
    395e:	44 2d       	mov	r20, r4
    3960:	35 14       	cp	r3, r5
    3962:	08 f4       	brcc	.+2      	; 0x3966 <_reply2ReturnCode+0x88>
    3964:	4c 2f       	mov	r20, r28
    3966:	50 e0       	ldi	r21, 0x00	; 0
    3968:	b8 01       	movw	r22, r16
    396a:	c5 01       	movw	r24, r10
    396c:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <strncasecmp>
    3970:	89 2b       	or	r24, r25
    3972:	49 f4       	brne	.+18     	; 0x3986 <_reply2ReturnCode+0xa8>
    3974:	f3 01       	movw	r30, r6
    3976:	ee 0f       	add	r30, r30
    3978:	ff 1f       	adc	r31, r31
    397a:	e6 0d       	add	r30, r6
    397c:	f7 1d       	adc	r31, r7
    397e:	e2 5a       	subi	r30, 0xA2	; 162
    3980:	f8 4f       	sbci	r31, 0xF8	; 248
    3982:	20 80       	ld	r2, Z
    3984:	0d c0       	rjmp	.+26     	; 0x39a0 <_reply2ReturnCode+0xc2>
    3986:	8f ef       	ldi	r24, 0xFF	; 255
    3988:	e8 1a       	sub	r14, r24
    398a:	f8 0a       	sbc	r15, r24
    398c:	e3 e0       	ldi	r30, 0x03	; 3
    398e:	8e 0e       	add	r8, r30
    3990:	91 1c       	adc	r9, r1
    3992:	f1 e1       	ldi	r31, 0x11	; 17
    3994:	ef 16       	cp	r14, r31
    3996:	f1 04       	cpc	r15, r1
    3998:	39 f6       	brne	.-114    	; 0x3928 <_reply2ReturnCode+0x4a>
    399a:	68 94       	set
    399c:	22 24       	eor	r2, r2
    399e:	24 f8       	bld	r2, 4
    39a0:	82 2d       	mov	r24, r2
    39a2:	df 91       	pop	r29
    39a4:	cf 91       	pop	r28
    39a6:	1f 91       	pop	r17
    39a8:	0f 91       	pop	r16
    39aa:	ff 90       	pop	r15
    39ac:	ef 90       	pop	r14
    39ae:	df 90       	pop	r13
    39b0:	cf 90       	pop	r12
    39b2:	bf 90       	pop	r11
    39b4:	af 90       	pop	r10
    39b6:	9f 90       	pop	r9
    39b8:	8f 90       	pop	r8
    39ba:	7f 90       	pop	r7
    39bc:	6f 90       	pop	r6
    39be:	5f 90       	pop	r5
    39c0:	4f 90       	pop	r4
    39c2:	3f 90       	pop	r3
    39c4:	2f 90       	pop	r2
    39c6:	08 95       	ret

000039c8 <_uploadMessageRc>:
    39c8:	30 df       	rcall	.-416    	; 0x382a <_uploadMessage>
    39ca:	89 cf       	rjmp	.-238    	; 0x38de <_reply2ReturnCode>
    39cc:	08 95       	ret

000039ce <lora_driver_flushBuffers>:
    39ce:	80 91 e6 15 	lds	r24, 0x15E6	; 0x8015e6 <_serialReplyBufferHandle>
    39d2:	90 91 e7 15 	lds	r25, 0x15E7	; 0x8015e7 <_serialReplyBufferHandle+0x1>
    39d6:	0c 94 14 09 	jmp	0x1228	; 0x1228 <xStreamBufferReset>
    39da:	08 95       	ret

000039dc <lora_driver_initialise>:
    39dc:	8f 92       	push	r8
    39de:	9f 92       	push	r9
    39e0:	af 92       	push	r10
    39e2:	cf 92       	push	r12
    39e4:	ef 92       	push	r14
    39e6:	0f 93       	push	r16
    39e8:	1f 93       	push	r17
    39ea:	cf 93       	push	r28
    39ec:	c8 2f       	mov	r28, r24
    39ee:	8b 01       	movw	r16, r22
    39f0:	41 e0       	ldi	r20, 0x01	; 1
    39f2:	60 e0       	ldi	r22, 0x00	; 0
    39f4:	70 e0       	ldi	r23, 0x00	; 0
    39f6:	88 ec       	ldi	r24, 0xC8	; 200
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <xStreamBufferGenericCreate>
    39fe:	90 93 e7 15 	sts	0x15E7, r25	; 0x8015e7 <_serialReplyBufferHandle+0x1>
    3a02:	80 93 e6 15 	sts	0x15E6, r24	; 0x8015e6 <_serialReplyBufferHandle>
    3a06:	10 93 e5 15 	sts	0x15E5, r17	; 0x8015e5 <_downlinkMessageBuffer+0x1>
    3a0a:	00 93 e4 15 	sts	0x15E4, r16	; 0x8015e4 <_downlinkMessageBuffer>
    3a0e:	0f 2e       	mov	r0, r31
    3a10:	ff ec       	ldi	r31, 0xCF	; 207
    3a12:	8f 2e       	mov	r8, r31
    3a14:	fb e1       	ldi	r31, 0x1B	; 27
    3a16:	9f 2e       	mov	r9, r31
    3a18:	f0 2d       	mov	r31, r0
    3a1a:	68 94       	set
    3a1c:	aa 24       	eor	r10, r10
    3a1e:	a6 f8       	bld	r10, 6
    3a20:	68 94       	set
    3a22:	cc 24       	eor	r12, r12
    3a24:	c6 f8       	bld	r12, 6
    3a26:	e1 2c       	mov	r14, r1
    3a28:	00 e0       	ldi	r16, 0x00	; 0
    3a2a:	23 e0       	ldi	r18, 0x03	; 3
    3a2c:	40 e0       	ldi	r20, 0x00	; 0
    3a2e:	51 ee       	ldi	r21, 0xE1	; 225
    3a30:	60 e0       	ldi	r22, 0x00	; 0
    3a32:	70 e0       	ldi	r23, 0x00	; 0
    3a34:	8c 2f       	mov	r24, r28
    3a36:	e3 d3       	rcall	.+1990   	; 0x41fe <serial_create>
    3a38:	90 93 e9 15 	sts	0x15E9, r25	; 0x8015e9 <_rn2483_serial+0x1>
    3a3c:	80 93 e8 15 	sts	0x15E8, r24	; 0x8015e8 <_rn2483_serial>
    3a40:	e7 e0       	ldi	r30, 0x07	; 7
    3a42:	f1 e0       	ldi	r31, 0x01	; 1
    3a44:	80 81       	ld	r24, Z
    3a46:	80 61       	ori	r24, 0x10	; 16
    3a48:	80 83       	st	Z, r24
    3a4a:	cf 91       	pop	r28
    3a4c:	1f 91       	pop	r17
    3a4e:	0f 91       	pop	r16
    3a50:	ef 90       	pop	r14
    3a52:	cf 90       	pop	r12
    3a54:	af 90       	pop	r10
    3a56:	9f 90       	pop	r9
    3a58:	8f 90       	pop	r8
    3a5a:	08 95       	ret

00003a5c <lora_driver_resetRn2483>:
    3a5c:	88 23       	and	r24, r24
    3a5e:	31 f0       	breq	.+12     	; 0x3a6c <lora_driver_resetRn2483+0x10>
    3a60:	e8 e0       	ldi	r30, 0x08	; 8
    3a62:	f1 e0       	ldi	r31, 0x01	; 1
    3a64:	80 81       	ld	r24, Z
    3a66:	8f 7e       	andi	r24, 0xEF	; 239
    3a68:	80 83       	st	Z, r24
    3a6a:	08 95       	ret
    3a6c:	e8 e0       	ldi	r30, 0x08	; 8
    3a6e:	f1 e0       	ldi	r31, 0x01	; 1
    3a70:	80 81       	ld	r24, Z
    3a72:	80 61       	ori	r24, 0x10	; 16
    3a74:	80 83       	st	Z, r24
    3a76:	08 95       	ret

00003a78 <lora_driver_rn2483FactoryReset>:
    3a78:	60 e0       	ldi	r22, 0x00	; 0
    3a7a:	70 e0       	ldi	r23, 0x00	; 0
    3a7c:	84 ee       	ldi	r24, 0xE4	; 228
    3a7e:	94 e0       	ldi	r25, 0x04	; 4
    3a80:	d4 de       	rcall	.-600    	; 0x382a <_uploadMessage>
    3a82:	ef e6       	ldi	r30, 0x6F	; 111
    3a84:	f6 e1       	ldi	r31, 0x16	; 22
    3a86:	01 90       	ld	r0, Z+
    3a88:	00 20       	and	r0, r0
    3a8a:	e9 f7       	brne	.-6      	; 0x3a86 <lora_driver_rn2483FactoryReset+0xe>
    3a8c:	31 97       	sbiw	r30, 0x01	; 1
    3a8e:	ef 56       	subi	r30, 0x6F	; 111
    3a90:	f6 41       	sbci	r31, 0x16	; 22
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	75 97       	sbiw	r30, 0x15	; 21
    3a96:	08 f0       	brcs	.+2      	; 0x3a9a <lora_driver_rn2483FactoryReset+0x22>
    3a98:	80 e0       	ldi	r24, 0x00	; 0
    3a9a:	08 95       	ret

00003a9c <lora_driver_getRn2483Hweui>:
    3a9c:	cf 93       	push	r28
    3a9e:	df 93       	push	r29
    3aa0:	ec 01       	movw	r28, r24
    3aa2:	60 e0       	ldi	r22, 0x00	; 0
    3aa4:	70 e0       	ldi	r23, 0x00	; 0
    3aa6:	85 ef       	ldi	r24, 0xF5	; 245
    3aa8:	94 e0       	ldi	r25, 0x04	; 4
    3aaa:	bf de       	rcall	.-642    	; 0x382a <_uploadMessage>
    3aac:	ef e6       	ldi	r30, 0x6F	; 111
    3aae:	f6 e1       	ldi	r31, 0x16	; 22
    3ab0:	01 90       	ld	r0, Z+
    3ab2:	00 20       	and	r0, r0
    3ab4:	e9 f7       	brne	.-6      	; 0x3ab0 <lora_driver_getRn2483Hweui+0x14>
    3ab6:	e0 58       	subi	r30, 0x80	; 128
    3ab8:	f6 41       	sbci	r31, 0x16	; 22
    3aba:	39 f4       	brne	.+14     	; 0x3aca <lora_driver_getRn2483Hweui+0x2e>
    3abc:	6f e6       	ldi	r22, 0x6F	; 111
    3abe:	76 e1       	ldi	r23, 0x16	; 22
    3ac0:	ce 01       	movw	r24, r28
    3ac2:	0e 94 cc 2b 	call	0x5798	; 0x5798 <strcpy>
    3ac6:	80 e0       	ldi	r24, 0x00	; 0
    3ac8:	02 c0       	rjmp	.+4      	; 0x3ace <lora_driver_getRn2483Hweui+0x32>
    3aca:	18 82       	st	Y, r1
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	df 91       	pop	r29
    3ad0:	cf 91       	pop	r28
    3ad2:	08 95       	ret

00003ad4 <lora_driver_setDeviceIdentifier>:
    3ad4:	fc 01       	movw	r30, r24
    3ad6:	01 90       	ld	r0, Z+
    3ad8:	00 20       	and	r0, r0
    3ada:	e9 f7       	brne	.-6      	; 0x3ad6 <lora_driver_setDeviceIdentifier+0x2>
    3adc:	9f 01       	movw	r18, r30
    3ade:	21 51       	subi	r18, 0x11	; 17
    3ae0:	31 09       	sbc	r19, r1
    3ae2:	28 17       	cp	r18, r24
    3ae4:	39 07       	cpc	r19, r25
    3ae6:	29 f4       	brne	.+10     	; 0x3af2 <lora_driver_setDeviceIdentifier+0x1e>
    3ae8:	bc 01       	movw	r22, r24
    3aea:	83 e2       	ldi	r24, 0x23	; 35
    3aec:	95 e0       	ldi	r25, 0x05	; 5
    3aee:	6c cf       	rjmp	.-296    	; 0x39c8 <_uploadMessageRc>
    3af0:	08 95       	ret
    3af2:	89 e0       	ldi	r24, 0x09	; 9
    3af4:	08 95       	ret

00003af6 <lora_driver_setApplicationIdentifier>:
    3af6:	fc 01       	movw	r30, r24
    3af8:	01 90       	ld	r0, Z+
    3afa:	00 20       	and	r0, r0
    3afc:	e9 f7       	brne	.-6      	; 0x3af8 <lora_driver_setApplicationIdentifier+0x2>
    3afe:	9f 01       	movw	r18, r30
    3b00:	21 51       	subi	r18, 0x11	; 17
    3b02:	31 09       	sbc	r19, r1
    3b04:	28 17       	cp	r18, r24
    3b06:	39 07       	cpc	r19, r25
    3b08:	29 f4       	brne	.+10     	; 0x3b14 <lora_driver_setApplicationIdentifier+0x1e>
    3b0a:	bc 01       	movw	r22, r24
    3b0c:	82 e3       	ldi	r24, 0x32	; 50
    3b0e:	95 e0       	ldi	r25, 0x05	; 5
    3b10:	5b cf       	rjmp	.-330    	; 0x39c8 <_uploadMessageRc>
    3b12:	08 95       	ret
    3b14:	89 e0       	ldi	r24, 0x09	; 9
    3b16:	08 95       	ret

00003b18 <lora_driver_setApplicationKey>:
    3b18:	fc 01       	movw	r30, r24
    3b1a:	01 90       	ld	r0, Z+
    3b1c:	00 20       	and	r0, r0
    3b1e:	e9 f7       	brne	.-6      	; 0x3b1a <lora_driver_setApplicationKey+0x2>
    3b20:	9f 01       	movw	r18, r30
    3b22:	21 52       	subi	r18, 0x21	; 33
    3b24:	31 09       	sbc	r19, r1
    3b26:	28 17       	cp	r18, r24
    3b28:	39 07       	cpc	r19, r25
    3b2a:	29 f4       	brne	.+10     	; 0x3b36 <lora_driver_setApplicationKey+0x1e>
    3b2c:	bc 01       	movw	r22, r24
    3b2e:	81 e4       	ldi	r24, 0x41	; 65
    3b30:	95 e0       	ldi	r25, 0x05	; 5
    3b32:	4a cf       	rjmp	.-364    	; 0x39c8 <_uploadMessageRc>
    3b34:	08 95       	ret
    3b36:	89 e0       	ldi	r24, 0x09	; 9
    3b38:	08 95       	ret

00003b3a <lora_driver_saveMac>:
    3b3a:	60 e0       	ldi	r22, 0x00	; 0
    3b3c:	70 e0       	ldi	r23, 0x00	; 0
    3b3e:	80 e8       	ldi	r24, 0x80	; 128
    3b40:	95 e0       	ldi	r25, 0x05	; 5
    3b42:	42 cf       	rjmp	.-380    	; 0x39c8 <_uploadMessageRc>
    3b44:	08 95       	ret

00003b46 <lora_driver_join>:
    3b46:	0f 93       	push	r16
    3b48:	1f 93       	push	r17
    3b4a:	e8 2f       	mov	r30, r24
    3b4c:	f0 e0       	ldi	r31, 0x00	; 0
    3b4e:	ee 0f       	add	r30, r30
    3b50:	ff 1f       	adc	r31, r31
    3b52:	e6 5a       	subi	r30, 0xA6	; 166
    3b54:	f8 4f       	sbci	r31, 0xF8	; 248
    3b56:	60 81       	ld	r22, Z
    3b58:	71 81       	ldd	r23, Z+1	; 0x01
    3b5a:	89 e8       	ldi	r24, 0x89	; 137
    3b5c:	95 e0       	ldi	r25, 0x05	; 5
    3b5e:	34 df       	rcall	.-408    	; 0x39c8 <_uploadMessageRc>
    3b60:	81 11       	cpse	r24, r1
    3b62:	14 c0       	rjmp	.+40     	; 0x3b8c <lora_driver_join+0x46>
    3b64:	08 e2       	ldi	r16, 0x28	; 40
    3b66:	15 e0       	ldi	r17, 0x05	; 5
    3b68:	20 e0       	ldi	r18, 0x00	; 0
    3b6a:	30 e0       	ldi	r19, 0x00	; 0
    3b6c:	4d e2       	ldi	r20, 0x2D	; 45
    3b6e:	50 e0       	ldi	r21, 0x00	; 0
    3b70:	6f e6       	ldi	r22, 0x6F	; 111
    3b72:	76 e1       	ldi	r23, 0x16	; 22
    3b74:	80 91 e6 15 	lds	r24, 0x15E6	; 0x8015e6 <_serialReplyBufferHandle>
    3b78:	90 91 e7 15 	lds	r25, 0x15E7	; 0x8015e7 <_serialReplyBufferHandle+0x1>
    3b7c:	0e 94 4d 0a 	call	0x149a	; 0x149a <xStreamBufferReceive>
    3b80:	88 23       	and	r24, r24
    3b82:	21 f0       	breq	.+8      	; 0x3b8c <lora_driver_join+0x46>
    3b84:	8f e6       	ldi	r24, 0x6F	; 111
    3b86:	96 e1       	ldi	r25, 0x16	; 22
    3b88:	aa de       	rcall	.-684    	; 0x38de <_reply2ReturnCode>
    3b8a:	03 c0       	rjmp	.+6      	; 0x3b92 <lora_driver_join+0x4c>
    3b8c:	8f e6       	ldi	r24, 0x6F	; 111
    3b8e:	96 e1       	ldi	r25, 0x16	; 22
    3b90:	a6 de       	rcall	.-692    	; 0x38de <_reply2ReturnCode>
    3b92:	1f 91       	pop	r17
    3b94:	0f 91       	pop	r16
    3b96:	08 95       	ret

00003b98 <lora_driver_sendUploadMessage>:
    3b98:	0f 93       	push	r16
    3b9a:	1f 93       	push	r17
    3b9c:	cf 93       	push	r28
    3b9e:	df 93       	push	r29
    3ba0:	1f 92       	push	r1
    3ba2:	cd b7       	in	r28, 0x3d	; 61
    3ba4:	de b7       	in	r29, 0x3e	; 62
    3ba6:	db 01       	movw	r26, r22
    3ba8:	11 96       	adiw	r26, 0x01	; 1
    3baa:	9c 91       	ld	r25, X
    3bac:	11 97       	sbiw	r26, 0x01	; 1
    3bae:	95 31       	cpi	r25, 0x15	; 21
    3bb0:	08 f0       	brcs	.+2      	; 0x3bb4 <lora_driver_sendUploadMessage+0x1c>
    3bb2:	b4 c0       	rjmp	.+360    	; 0x3d1c <lora_driver_sendUploadMessage+0x184>
    3bb4:	99 23       	and	r25, r25
    3bb6:	81 f1       	breq	.+96     	; 0x3c18 <lora_driver_sendUploadMessage+0x80>
    3bb8:	60 e0       	ldi	r22, 0x00	; 0
    3bba:	70 e0       	ldi	r23, 0x00	; 0
    3bbc:	27 2f       	mov	r18, r23
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	46 2f       	mov	r20, r22
    3bc2:	50 e0       	ldi	r21, 0x00	; 0
    3bc4:	fd 01       	movw	r30, r26
    3bc6:	e4 0f       	add	r30, r20
    3bc8:	f5 1f       	adc	r31, r21
    3bca:	92 81       	ldd	r25, Z+2	; 0x02
    3bcc:	92 95       	swap	r25
    3bce:	9f 70       	andi	r25, 0x0F	; 15
    3bd0:	9a 30       	cpi	r25, 0x0A	; 10
    3bd2:	10 f0       	brcs	.+4      	; 0x3bd8 <lora_driver_sendUploadMessage+0x40>
    3bd4:	99 5c       	subi	r25, 0xC9	; 201
    3bd6:	01 c0       	rjmp	.+2      	; 0x3bda <lora_driver_sendUploadMessage+0x42>
    3bd8:	90 5d       	subi	r25, 0xD0	; 208
    3bda:	f9 01       	movw	r30, r18
    3bdc:	e0 50       	subi	r30, 0x00	; 0
    3bde:	fa 4e       	sbci	r31, 0xEA	; 234
    3be0:	90 83       	st	Z, r25
    3be2:	2f 5f       	subi	r18, 0xFF	; 255
    3be4:	3f 4f       	sbci	r19, 0xFF	; 255
    3be6:	fd 01       	movw	r30, r26
    3be8:	e4 0f       	add	r30, r20
    3bea:	f5 1f       	adc	r31, r21
    3bec:	92 81       	ldd	r25, Z+2	; 0x02
    3bee:	9f 70       	andi	r25, 0x0F	; 15
    3bf0:	49 2f       	mov	r20, r25
    3bf2:	50 e0       	ldi	r21, 0x00	; 0
    3bf4:	4a 30       	cpi	r20, 0x0A	; 10
    3bf6:	51 05       	cpc	r21, r1
    3bf8:	14 f0       	brlt	.+4      	; 0x3bfe <lora_driver_sendUploadMessage+0x66>
    3bfa:	99 5c       	subi	r25, 0xC9	; 201
    3bfc:	01 c0       	rjmp	.+2      	; 0x3c00 <lora_driver_sendUploadMessage+0x68>
    3bfe:	90 5d       	subi	r25, 0xD0	; 208
    3c00:	f9 01       	movw	r30, r18
    3c02:	e0 50       	subi	r30, 0x00	; 0
    3c04:	fa 4e       	sbci	r31, 0xEA	; 234
    3c06:	90 83       	st	Z, r25
    3c08:	7e 5f       	subi	r23, 0xFE	; 254
    3c0a:	6f 5f       	subi	r22, 0xFF	; 255
    3c0c:	11 96       	adiw	r26, 0x01	; 1
    3c0e:	9c 91       	ld	r25, X
    3c10:	11 97       	sbiw	r26, 0x01	; 1
    3c12:	69 17       	cp	r22, r25
    3c14:	98 f2       	brcs	.-90     	; 0x3bbc <lora_driver_sendUploadMessage+0x24>
    3c16:	01 c0       	rjmp	.+2      	; 0x3c1a <lora_driver_sendUploadMessage+0x82>
    3c18:	70 e0       	ldi	r23, 0x00	; 0
    3c1a:	e7 2f       	mov	r30, r23
    3c1c:	f0 e0       	ldi	r31, 0x00	; 0
    3c1e:	e0 50       	subi	r30, 0x00	; 0
    3c20:	fa 4e       	sbci	r31, 0xEA	; 234
    3c22:	10 82       	st	Z, r1
    3c24:	4c 91       	ld	r20, X
    3c26:	81 11       	cpse	r24, r1
    3c28:	03 c0       	rjmp	.+6      	; 0x3c30 <lora_driver_sendUploadMessage+0x98>
    3c2a:	82 e9       	ldi	r24, 0x92	; 146
    3c2c:	95 e0       	ldi	r25, 0x05	; 5
    3c2e:	02 c0       	rjmp	.+4      	; 0x3c34 <lora_driver_sendUploadMessage+0x9c>
    3c30:	84 e9       	ldi	r24, 0x94	; 148
    3c32:	95 e0       	ldi	r25, 0x05	; 5
    3c34:	20 e0       	ldi	r18, 0x00	; 0
    3c36:	36 e1       	ldi	r19, 0x16	; 22
    3c38:	3f 93       	push	r19
    3c3a:	2f 93       	push	r18
    3c3c:	1f 92       	push	r1
    3c3e:	4f 93       	push	r20
    3c40:	9f 93       	push	r25
    3c42:	8f 93       	push	r24
    3c44:	88 e9       	ldi	r24, 0x98	; 152
    3c46:	95 e0       	ldi	r25, 0x05	; 5
    3c48:	9f 93       	push	r25
    3c4a:	8f 93       	push	r24
    3c4c:	82 e4       	ldi	r24, 0x42	; 66
    3c4e:	96 e1       	ldi	r25, 0x16	; 22
    3c50:	9f 93       	push	r25
    3c52:	8f 93       	push	r24
    3c54:	0e 94 2e 2c 	call	0x585c	; 0x585c <sprintf>
    3c58:	60 e0       	ldi	r22, 0x00	; 0
    3c5a:	70 e0       	ldi	r23, 0x00	; 0
    3c5c:	82 e4       	ldi	r24, 0x42	; 66
    3c5e:	96 e1       	ldi	r25, 0x16	; 22
    3c60:	b3 de       	rcall	.-666    	; 0x39c8 <_uploadMessageRc>
    3c62:	0f b6       	in	r0, 0x3f	; 63
    3c64:	f8 94       	cli
    3c66:	de bf       	out	0x3e, r29	; 62
    3c68:	0f be       	out	0x3f, r0	; 63
    3c6a:	cd bf       	out	0x3d, r28	; 61
    3c6c:	81 11       	cpse	r24, r1
    3c6e:	59 c0       	rjmp	.+178    	; 0x3d22 <lora_driver_sendUploadMessage+0x18a>
    3c70:	08 e2       	ldi	r16, 0x28	; 40
    3c72:	15 e0       	ldi	r17, 0x05	; 5
    3c74:	20 e0       	ldi	r18, 0x00	; 0
    3c76:	30 e0       	ldi	r19, 0x00	; 0
    3c78:	4d e2       	ldi	r20, 0x2D	; 45
    3c7a:	50 e0       	ldi	r21, 0x00	; 0
    3c7c:	6f e6       	ldi	r22, 0x6F	; 111
    3c7e:	76 e1       	ldi	r23, 0x16	; 22
    3c80:	80 91 e6 15 	lds	r24, 0x15E6	; 0x8015e6 <_serialReplyBufferHandle>
    3c84:	90 91 e7 15 	lds	r25, 0x15E7	; 0x8015e7 <_serialReplyBufferHandle+0x1>
    3c88:	0e 94 4d 0a 	call	0x149a	; 0x149a <xStreamBufferReceive>
    3c8c:	88 23       	and	r24, r24
    3c8e:	09 f4       	brne	.+2      	; 0x3c92 <lora_driver_sendUploadMessage+0xfa>
    3c90:	47 c0       	rjmp	.+142    	; 0x3d20 <lora_driver_sendUploadMessage+0x188>
    3c92:	8f e6       	ldi	r24, 0x6F	; 111
    3c94:	96 e1       	ldi	r25, 0x16	; 22
    3c96:	23 de       	rcall	.-954    	; 0x38de <_reply2ReturnCode>
    3c98:	8e 30       	cpi	r24, 0x0E	; 14
    3c9a:	09 f0       	breq	.+2      	; 0x3c9e <lora_driver_sendUploadMessage+0x106>
    3c9c:	42 c0       	rjmp	.+132    	; 0x3d22 <lora_driver_sendUploadMessage+0x18a>
    3c9e:	87 e0       	ldi	r24, 0x07	; 7
    3ca0:	89 83       	std	Y+1, r24	; 0x01
    3ca2:	80 91 e4 15 	lds	r24, 0x15E4	; 0x8015e4 <_downlinkMessageBuffer>
    3ca6:	90 91 e5 15 	lds	r25, 0x15E5	; 0x8015e5 <_downlinkMessageBuffer+0x1>
    3caa:	89 2b       	or	r24, r25
    3cac:	a9 f1       	breq	.+106    	; 0x3d18 <lora_driver_sendUploadMessage+0x180>
    3cae:	be 01       	movw	r22, r28
    3cb0:	6f 5f       	subi	r22, 0xFF	; 255
    3cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    3cb4:	8f e6       	ldi	r24, 0x6F	; 111
    3cb6:	96 e1       	ldi	r25, 0x16	; 22
    3cb8:	68 d1       	rcall	.+720    	; 0x3f8a <decode_port_no>
    3cba:	80 93 ea 15 	sts	0x15EA, r24	; 0x8015ea <_downlinkPayload>
    3cbe:	e9 81       	ldd	r30, Y+1	; 0x01
    3cc0:	f0 e0       	ldi	r31, 0x00	; 0
    3cc2:	e1 59       	subi	r30, 0x91	; 145
    3cc4:	f9 4e       	sbci	r31, 0xE9	; 233
    3cc6:	df 01       	movw	r26, r30
    3cc8:	0d 90       	ld	r0, X+
    3cca:	00 20       	and	r0, r0
    3ccc:	e9 f7       	brne	.-6      	; 0x3cc8 <lora_driver_sendUploadMessage+0x130>
    3cce:	11 97       	sbiw	r26, 0x01	; 1
    3cd0:	ae 1b       	sub	r26, r30
    3cd2:	bf 0b       	sbc	r27, r31
    3cd4:	aa 23       	and	r26, r26
    3cd6:	91 f0       	breq	.+36     	; 0x3cfc <lora_driver_sendUploadMessage+0x164>
    3cd8:	bb 27       	eor	r27, r27
    3cda:	cd 01       	movw	r24, r26
    3cdc:	01 97       	sbiw	r24, 0x01	; 1
    3cde:	9c 01       	movw	r18, r24
    3ce0:	12 f4       	brpl	.+4      	; 0x3ce6 <lora_driver_sendUploadMessage+0x14e>
    3ce2:	2f 5f       	subi	r18, 0xFF	; 255
    3ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ce6:	35 95       	asr	r19
    3ce8:	27 95       	ror	r18
    3cea:	20 93 eb 15 	sts	0x15EB, r18	; 0x8015eb <_downlinkPayload+0x1>
    3cee:	af 01       	movw	r20, r30
    3cf0:	4f 5f       	subi	r20, 0xFF	; 255
    3cf2:	5f 4f       	sbci	r21, 0xFF	; 255
    3cf4:	64 e1       	ldi	r22, 0x14	; 20
    3cf6:	8c ee       	ldi	r24, 0xEC	; 236
    3cf8:	95 e1       	ldi	r25, 0x15	; 21
    3cfa:	73 d1       	rcall	.+742    	; 0x3fe2 <decode_hexadecimal_string_bytes>
    3cfc:	01 e0       	ldi	r16, 0x01	; 1
    3cfe:	10 e0       	ldi	r17, 0x00	; 0
    3d00:	20 e0       	ldi	r18, 0x00	; 0
    3d02:	30 e0       	ldi	r19, 0x00	; 0
    3d04:	46 e1       	ldi	r20, 0x16	; 22
    3d06:	50 e0       	ldi	r21, 0x00	; 0
    3d08:	6a ee       	ldi	r22, 0xEA	; 234
    3d0a:	75 e1       	ldi	r23, 0x15	; 21
    3d0c:	80 91 e4 15 	lds	r24, 0x15E4	; 0x8015e4 <_downlinkMessageBuffer>
    3d10:	90 91 e5 15 	lds	r25, 0x15E5	; 0x8015e5 <_downlinkMessageBuffer+0x1>
    3d14:	0e 94 44 09 	call	0x1288	; 0x1288 <xStreamBufferSend>
    3d18:	8e e0       	ldi	r24, 0x0E	; 14
    3d1a:	03 c0       	rjmp	.+6      	; 0x3d22 <lora_driver_sendUploadMessage+0x18a>
    3d1c:	84 e1       	ldi	r24, 0x14	; 20
    3d1e:	01 c0       	rjmp	.+2      	; 0x3d22 <lora_driver_sendUploadMessage+0x18a>
    3d20:	80 e0       	ldi	r24, 0x00	; 0
    3d22:	0f 90       	pop	r0
    3d24:	df 91       	pop	r29
    3d26:	cf 91       	pop	r28
    3d28:	1f 91       	pop	r17
    3d2a:	0f 91       	pop	r16
    3d2c:	08 95       	ret

00003d2e <lora_driver_setAdaptiveDataRate>:
    3d2e:	81 30       	cpi	r24, 0x01	; 1
    3d30:	19 f0       	breq	.+6      	; 0x3d38 <lora_driver_setAdaptiveDataRate+0xa>
    3d32:	68 ea       	ldi	r22, 0xA8	; 168
    3d34:	75 e0       	ldi	r23, 0x05	; 5
    3d36:	02 c0       	rjmp	.+4      	; 0x3d3c <lora_driver_setAdaptiveDataRate+0xe>
    3d38:	61 e8       	ldi	r22, 0x81	; 129
    3d3a:	76 e0       	ldi	r23, 0x06	; 6
    3d3c:	8c ea       	ldi	r24, 0xAC	; 172
    3d3e:	95 e0       	ldi	r25, 0x05	; 5
    3d40:	43 ce       	rjmp	.-890    	; 0x39c8 <_uploadMessageRc>
    3d42:	08 95       	ret

00003d44 <lora_driver_setReceiveDelay>:
    3d44:	9f 93       	push	r25
    3d46:	8f 93       	push	r24
    3d48:	8d ed       	ldi	r24, 0xDD	; 221
    3d4a:	95 e0       	ldi	r25, 0x05	; 5
    3d4c:	9f 93       	push	r25
    3d4e:	8f 93       	push	r24
    3d50:	82 e4       	ldi	r24, 0x42	; 66
    3d52:	96 e1       	ldi	r25, 0x16	; 22
    3d54:	9f 93       	push	r25
    3d56:	8f 93       	push	r24
    3d58:	0e 94 2e 2c 	call	0x585c	; 0x585c <sprintf>
    3d5c:	60 e0       	ldi	r22, 0x00	; 0
    3d5e:	70 e0       	ldi	r23, 0x00	; 0
    3d60:	82 e4       	ldi	r24, 0x42	; 66
    3d62:	96 e1       	ldi	r25, 0x16	; 22
    3d64:	31 de       	rcall	.-926    	; 0x39c8 <_uploadMessageRc>
    3d66:	0f 90       	pop	r0
    3d68:	0f 90       	pop	r0
    3d6a:	0f 90       	pop	r0
    3d6c:	0f 90       	pop	r0
    3d6e:	0f 90       	pop	r0
    3d70:	0f 90       	pop	r0
    3d72:	08 95       	ret

00003d74 <lora_driver_configureToEu868>:
    3d74:	2f 92       	push	r2
    3d76:	3f 92       	push	r3
    3d78:	4f 92       	push	r4
    3d7a:	5f 92       	push	r5
    3d7c:	6f 92       	push	r6
    3d7e:	7f 92       	push	r7
    3d80:	8f 92       	push	r8
    3d82:	9f 92       	push	r9
    3d84:	af 92       	push	r10
    3d86:	bf 92       	push	r11
    3d88:	cf 92       	push	r12
    3d8a:	df 92       	push	r13
    3d8c:	ef 92       	push	r14
    3d8e:	ff 92       	push	r15
    3d90:	0f 93       	push	r16
    3d92:	1f 93       	push	r17
    3d94:	cf 93       	push	r28
    3d96:	df 93       	push	r29
    3d98:	cd b7       	in	r28, 0x3d	; 61
    3d9a:	de b7       	in	r29, 0x3e	; 62
    3d9c:	a0 97       	sbiw	r28, 0x20	; 32
    3d9e:	0f b6       	in	r0, 0x3f	; 63
    3da0:	f8 94       	cli
    3da2:	de bf       	out	0x3e, r29	; 62
    3da4:	0f be       	out	0x3f, r0	; 63
    3da6:	cd bf       	out	0x3d, r28	; 61
    3da8:	6a e0       	ldi	r22, 0x0A	; 10
    3daa:	76 e0       	ldi	r23, 0x06	; 6
    3dac:	86 e1       	ldi	r24, 0x16	; 22
    3dae:	96 e0       	ldi	r25, 0x06	; 6
    3db0:	3c dd       	rcall	.-1416   	; 0x382a <_uploadMessage>
    3db2:	95 dd       	rcall	.-1238   	; 0x38de <_reply2ReturnCode>
    3db4:	81 11       	cpse	r24, r1
    3db6:	a3 c0       	rjmp	.+326    	; 0x3efe <lora_driver_configureToEu868+0x18a>
    3db8:	80 e2       	ldi	r24, 0x20	; 32
    3dba:	e2 e2       	ldi	r30, 0x22	; 34
    3dbc:	f2 e0       	ldi	r31, 0x02	; 2
    3dbe:	de 01       	movw	r26, r28
    3dc0:	11 96       	adiw	r26, 0x01	; 1
    3dc2:	01 90       	ld	r0, Z+
    3dc4:	0d 92       	st	X+, r0
    3dc6:	8a 95       	dec	r24
    3dc8:	e1 f7       	brne	.-8      	; 0x3dc2 <lora_driver_configureToEu868+0x4e>
    3dca:	9e 01       	movw	r18, r28
    3dcc:	2f 5f       	subi	r18, 0xFF	; 255
    3dce:	3f 4f       	sbci	r19, 0xFF	; 255
    3dd0:	69 01       	movw	r12, r18
    3dd2:	e1 2c       	mov	r14, r1
    3dd4:	f1 2c       	mov	r15, r1
    3dd6:	0f 2e       	mov	r0, r31
    3dd8:	f2 e2       	ldi	r31, 0x22	; 34
    3dda:	af 2e       	mov	r10, r31
    3ddc:	f6 e0       	ldi	r31, 0x06	; 6
    3dde:	bf 2e       	mov	r11, r31
    3de0:	f0 2d       	mov	r31, r0
    3de2:	02 e4       	ldi	r16, 0x42	; 66
    3de4:	16 e1       	ldi	r17, 0x16	; 22
    3de6:	0f 2e       	mov	r0, r31
    3de8:	fb e3       	ldi	r31, 0x3B	; 59
    3dea:	4f 2e       	mov	r4, r31
    3dec:	f6 e0       	ldi	r31, 0x06	; 6
    3dee:	5f 2e       	mov	r5, r31
    3df0:	f0 2d       	mov	r31, r0
    3df2:	0f 2e       	mov	r0, r31
    3df4:	f2 e5       	ldi	r31, 0x52	; 82
    3df6:	8f 2e       	mov	r8, r31
    3df8:	f6 e0       	ldi	r31, 0x06	; 6
    3dfa:	9f 2e       	mov	r9, r31
    3dfc:	f0 2d       	mov	r31, r0
    3dfe:	0f 2e       	mov	r0, r31
    3e00:	fc e6       	ldi	r31, 0x6C	; 108
    3e02:	6f 2e       	mov	r6, r31
    3e04:	f6 e0       	ldi	r31, 0x06	; 6
    3e06:	7f 2e       	mov	r7, r31
    3e08:	f0 2d       	mov	r31, r0
    3e0a:	3e 2c       	mov	r3, r14
    3e0c:	2f 2c       	mov	r2, r15
    3e0e:	ff 92       	push	r15
    3e10:	ef 92       	push	r14
    3e12:	bf 92       	push	r11
    3e14:	af 92       	push	r10
    3e16:	1f 93       	push	r17
    3e18:	0f 93       	push	r16
    3e1a:	0e 94 2e 2c 	call	0x585c	; 0x585c <sprintf>
    3e1e:	60 e0       	ldi	r22, 0x00	; 0
    3e20:	70 e0       	ldi	r23, 0x00	; 0
    3e22:	c8 01       	movw	r24, r16
    3e24:	02 dd       	rcall	.-1532   	; 0x382a <_uploadMessage>
    3e26:	5b dd       	rcall	.-1354   	; 0x38de <_reply2ReturnCode>
    3e28:	0f 90       	pop	r0
    3e2a:	0f 90       	pop	r0
    3e2c:	0f 90       	pop	r0
    3e2e:	0f 90       	pop	r0
    3e30:	0f 90       	pop	r0
    3e32:	0f 90       	pop	r0
    3e34:	81 11       	cpse	r24, r1
    3e36:	63 c0       	rjmp	.+198    	; 0x3efe <lora_driver_configureToEu868+0x18a>
    3e38:	32 e0       	ldi	r19, 0x02	; 2
    3e3a:	3e 15       	cp	r19, r14
    3e3c:	e8 f4       	brcc	.+58     	; 0x3e78 <lora_driver_configureToEu868+0x104>
    3e3e:	f6 01       	movw	r30, r12
    3e40:	83 81       	ldd	r24, Z+3	; 0x03
    3e42:	8f 93       	push	r24
    3e44:	82 81       	ldd	r24, Z+2	; 0x02
    3e46:	8f 93       	push	r24
    3e48:	81 81       	ldd	r24, Z+1	; 0x01
    3e4a:	8f 93       	push	r24
    3e4c:	80 81       	ld	r24, Z
    3e4e:	8f 93       	push	r24
    3e50:	ff 92       	push	r15
    3e52:	ef 92       	push	r14
    3e54:	5f 92       	push	r5
    3e56:	4f 92       	push	r4
    3e58:	1f 93       	push	r17
    3e5a:	0f 93       	push	r16
    3e5c:	0e 94 2e 2c 	call	0x585c	; 0x585c <sprintf>
    3e60:	60 e0       	ldi	r22, 0x00	; 0
    3e62:	70 e0       	ldi	r23, 0x00	; 0
    3e64:	c8 01       	movw	r24, r16
    3e66:	e1 dc       	rcall	.-1598   	; 0x382a <_uploadMessage>
    3e68:	3a dd       	rcall	.-1420   	; 0x38de <_reply2ReturnCode>
    3e6a:	0f b6       	in	r0, 0x3f	; 63
    3e6c:	f8 94       	cli
    3e6e:	de bf       	out	0x3e, r29	; 62
    3e70:	0f be       	out	0x3f, r0	; 63
    3e72:	cd bf       	out	0x3d, r28	; 61
    3e74:	81 11       	cpse	r24, r1
    3e76:	43 c0       	rjmp	.+134    	; 0x3efe <lora_driver_configureToEu868+0x18a>
    3e78:	2f 92       	push	r2
    3e7a:	3f 92       	push	r3
    3e7c:	9f 92       	push	r9
    3e7e:	8f 92       	push	r8
    3e80:	1f 93       	push	r17
    3e82:	0f 93       	push	r16
    3e84:	0e 94 2e 2c 	call	0x585c	; 0x585c <sprintf>
    3e88:	60 e0       	ldi	r22, 0x00	; 0
    3e8a:	70 e0       	ldi	r23, 0x00	; 0
    3e8c:	c8 01       	movw	r24, r16
    3e8e:	cd dc       	rcall	.-1638   	; 0x382a <_uploadMessage>
    3e90:	26 dd       	rcall	.-1460   	; 0x38de <_reply2ReturnCode>
    3e92:	0f 90       	pop	r0
    3e94:	0f 90       	pop	r0
    3e96:	0f 90       	pop	r0
    3e98:	0f 90       	pop	r0
    3e9a:	0f 90       	pop	r0
    3e9c:	0f 90       	pop	r0
    3e9e:	81 11       	cpse	r24, r1
    3ea0:	2e c0       	rjmp	.+92     	; 0x3efe <lora_driver_configureToEu868+0x18a>
    3ea2:	2f 92       	push	r2
    3ea4:	3f 92       	push	r3
    3ea6:	7f 92       	push	r7
    3ea8:	6f 92       	push	r6
    3eaa:	1f 93       	push	r17
    3eac:	0f 93       	push	r16
    3eae:	0e 94 2e 2c 	call	0x585c	; 0x585c <sprintf>
    3eb2:	60 e0       	ldi	r22, 0x00	; 0
    3eb4:	70 e0       	ldi	r23, 0x00	; 0
    3eb6:	c8 01       	movw	r24, r16
    3eb8:	b8 dc       	rcall	.-1680   	; 0x382a <_uploadMessage>
    3eba:	11 dd       	rcall	.-1502   	; 0x38de <_reply2ReturnCode>
    3ebc:	0f 90       	pop	r0
    3ebe:	0f 90       	pop	r0
    3ec0:	0f 90       	pop	r0
    3ec2:	0f 90       	pop	r0
    3ec4:	0f 90       	pop	r0
    3ec6:	0f 90       	pop	r0
    3ec8:	81 11       	cpse	r24, r1
    3eca:	19 c0       	rjmp	.+50     	; 0x3efe <lora_driver_configureToEu868+0x18a>
    3ecc:	3f ef       	ldi	r19, 0xFF	; 255
    3ece:	e3 1a       	sub	r14, r19
    3ed0:	f3 0a       	sbc	r15, r19
    3ed2:	84 e0       	ldi	r24, 0x04	; 4
    3ed4:	c8 0e       	add	r12, r24
    3ed6:	d1 1c       	adc	r13, r1
    3ed8:	98 e0       	ldi	r25, 0x08	; 8
    3eda:	e9 16       	cp	r14, r25
    3edc:	f1 04       	cpc	r15, r1
    3ede:	09 f0       	breq	.+2      	; 0x3ee2 <lora_driver_configureToEu868+0x16e>
    3ee0:	94 cf       	rjmp	.-216    	; 0x3e0a <lora_driver_configureToEu868+0x96>
    3ee2:	60 e0       	ldi	r22, 0x00	; 0
    3ee4:	70 e0       	ldi	r23, 0x00	; 0
    3ee6:	84 e8       	ldi	r24, 0x84	; 132
    3ee8:	96 e0       	ldi	r25, 0x06	; 6
    3eea:	9f dc       	rcall	.-1730   	; 0x382a <_uploadMessage>
    3eec:	f8 dc       	rcall	.-1552   	; 0x38de <_reply2ReturnCode>
    3eee:	81 11       	cpse	r24, r1
    3ef0:	06 c0       	rjmp	.+12     	; 0x3efe <lora_driver_configureToEu868+0x18a>
    3ef2:	60 e0       	ldi	r22, 0x00	; 0
    3ef4:	70 e0       	ldi	r23, 0x00	; 0
    3ef6:	85 e9       	ldi	r24, 0x95	; 149
    3ef8:	96 e0       	ldi	r25, 0x06	; 6
    3efa:	97 dc       	rcall	.-1746   	; 0x382a <_uploadMessage>
    3efc:	f0 dc       	rcall	.-1568   	; 0x38de <_reply2ReturnCode>
    3efe:	a0 96       	adiw	r28, 0x20	; 32
    3f00:	0f b6       	in	r0, 0x3f	; 63
    3f02:	f8 94       	cli
    3f04:	de bf       	out	0x3e, r29	; 62
    3f06:	0f be       	out	0x3f, r0	; 63
    3f08:	cd bf       	out	0x3d, r28	; 61
    3f0a:	df 91       	pop	r29
    3f0c:	cf 91       	pop	r28
    3f0e:	1f 91       	pop	r17
    3f10:	0f 91       	pop	r16
    3f12:	ff 90       	pop	r15
    3f14:	ef 90       	pop	r14
    3f16:	df 90       	pop	r13
    3f18:	cf 90       	pop	r12
    3f1a:	bf 90       	pop	r11
    3f1c:	af 90       	pop	r10
    3f1e:	9f 90       	pop	r9
    3f20:	8f 90       	pop	r8
    3f22:	7f 90       	pop	r7
    3f24:	6f 90       	pop	r6
    3f26:	5f 90       	pop	r5
    3f28:	4f 90       	pop	r4
    3f2a:	3f 90       	pop	r3
    3f2c:	2f 90       	pop	r2
    3f2e:	08 95       	ret

00003f30 <lora_driver_setOtaaIdentity>:
    3f30:	ef 92       	push	r14
    3f32:	ff 92       	push	r15
    3f34:	0f 93       	push	r16
    3f36:	1f 93       	push	r17
    3f38:	cf 93       	push	r28
    3f3a:	df 93       	push	r29
    3f3c:	ec 01       	movw	r28, r24
    3f3e:	8b 01       	movw	r16, r22
    3f40:	7a 01       	movw	r14, r20
    3f42:	81 e0       	ldi	r24, 0x01	; 1
    3f44:	f4 de       	rcall	.-536    	; 0x3d2e <lora_driver_setAdaptiveDataRate>
    3f46:	81 11       	cpse	r24, r1
    3f48:	0d c0       	rjmp	.+26     	; 0x3f64 <lora_driver_setOtaaIdentity+0x34>
    3f4a:	ce 01       	movw	r24, r28
    3f4c:	d4 dd       	rcall	.-1112   	; 0x3af6 <lora_driver_setApplicationIdentifier>
    3f4e:	81 11       	cpse	r24, r1
    3f50:	09 c0       	rjmp	.+18     	; 0x3f64 <lora_driver_setOtaaIdentity+0x34>
    3f52:	c8 01       	movw	r24, r16
    3f54:	e1 dd       	rcall	.-1086   	; 0x3b18 <lora_driver_setApplicationKey>
    3f56:	81 11       	cpse	r24, r1
    3f58:	05 c0       	rjmp	.+10     	; 0x3f64 <lora_driver_setOtaaIdentity+0x34>
    3f5a:	c7 01       	movw	r24, r14
    3f5c:	bb dd       	rcall	.-1162   	; 0x3ad4 <lora_driver_setDeviceIdentifier>
    3f5e:	81 11       	cpse	r24, r1
    3f60:	01 c0       	rjmp	.+2      	; 0x3f64 <lora_driver_setOtaaIdentity+0x34>
    3f62:	eb dd       	rcall	.-1066   	; 0x3b3a <lora_driver_saveMac>
    3f64:	df 91       	pop	r29
    3f66:	cf 91       	pop	r28
    3f68:	1f 91       	pop	r17
    3f6a:	0f 91       	pop	r16
    3f6c:	ff 90       	pop	r15
    3f6e:	ef 90       	pop	r14
    3f70:	08 95       	ret

00003f72 <lora_driver_mapReturnCodeToText>:
    3f72:	90 e0       	ldi	r25, 0x00	; 0
    3f74:	fc 01       	movw	r30, r24
    3f76:	ee 0f       	add	r30, r30
    3f78:	ff 1f       	adc	r31, r31
    3f7a:	8e 0f       	add	r24, r30
    3f7c:	9f 1f       	adc	r25, r31
    3f7e:	fc 01       	movw	r30, r24
    3f80:	e2 5a       	subi	r30, 0xA2	; 162
    3f82:	f8 4f       	sbci	r31, 0xF8	; 248
    3f84:	81 81       	ldd	r24, Z+1	; 0x01
    3f86:	92 81       	ldd	r25, Z+2	; 0x02
    3f88:	08 95       	ret

00003f8a <decode_port_no>:
    3f8a:	dc 01       	movw	r26, r24
    3f8c:	00 97       	sbiw	r24, 0x00	; 0
    3f8e:	29 f1       	breq	.+74     	; 0x3fda <decode_port_no+0x50>
    3f90:	fb 01       	movw	r30, r22
    3f92:	20 81       	ld	r18, Z
    3f94:	fc 01       	movw	r30, r24
    3f96:	01 90       	ld	r0, Z+
    3f98:	00 20       	and	r0, r0
    3f9a:	e9 f7       	brne	.-6      	; 0x3f96 <decode_port_no+0xc>
    3f9c:	31 97       	sbiw	r30, 0x01	; 1
    3f9e:	e8 1b       	sub	r30, r24
    3fa0:	f9 0b       	sbc	r31, r25
    3fa2:	82 2f       	mov	r24, r18
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	e8 17       	cp	r30, r24
    3fa8:	f9 07       	cpc	r31, r25
    3faa:	c8 f0       	brcs	.+50     	; 0x3fde <decode_port_no+0x54>
    3fac:	80 e0       	ldi	r24, 0x00	; 0
    3fae:	08 c0       	rjmp	.+16     	; 0x3fc0 <decode_port_no+0x36>
    3fb0:	88 0f       	add	r24, r24
    3fb2:	38 2f       	mov	r19, r24
    3fb4:	33 0f       	add	r19, r19
    3fb6:	33 0f       	add	r19, r19
    3fb8:	83 0f       	add	r24, r19
    3fba:	80 53       	subi	r24, 0x30	; 48
    3fbc:	89 0f       	add	r24, r25
    3fbe:	2f 5f       	subi	r18, 0xFF	; 255
    3fc0:	fd 01       	movw	r30, r26
    3fc2:	e2 0f       	add	r30, r18
    3fc4:	f1 1d       	adc	r31, r1
    3fc6:	90 81       	ld	r25, Z
    3fc8:	30 ed       	ldi	r19, 0xD0	; 208
    3fca:	39 0f       	add	r19, r25
    3fcc:	3a 30       	cpi	r19, 0x0A	; 10
    3fce:	10 f4       	brcc	.+4      	; 0x3fd4 <decode_port_no+0x4a>
    3fd0:	91 11       	cpse	r25, r1
    3fd2:	ee cf       	rjmp	.-36     	; 0x3fb0 <decode_port_no+0x26>
    3fd4:	fb 01       	movw	r30, r22
    3fd6:	20 83       	st	Z, r18
    3fd8:	08 95       	ret
    3fda:	80 e0       	ldi	r24, 0x00	; 0
    3fdc:	08 95       	ret
    3fde:	80 e0       	ldi	r24, 0x00	; 0
    3fe0:	08 95       	ret

00003fe2 <decode_hexadecimal_string_bytes>:
    3fe2:	0f 93       	push	r16
    3fe4:	1f 93       	push	r17
    3fe6:	cf 93       	push	r28
    3fe8:	df 93       	push	r29
    3fea:	dc 01       	movw	r26, r24
    3fec:	ea 01       	movw	r28, r20
    3fee:	20 97       	sbiw	r28, 0x00	; 0
    3ff0:	e1 f1       	breq	.+120    	; 0x406a <decode_hexadecimal_string_bytes+0x88>
    3ff2:	fa 01       	movw	r30, r20
    3ff4:	01 90       	ld	r0, Z+
    3ff6:	00 20       	and	r0, r0
    3ff8:	e9 f7       	brne	.-6      	; 0x3ff4 <decode_hexadecimal_string_bytes+0x12>
    3ffa:	31 97       	sbiw	r30, 0x01	; 1
    3ffc:	e4 1b       	sub	r30, r20
    3ffe:	f5 0b       	sbc	r31, r21
    4000:	32 97       	sbiw	r30, 0x02	; 2
    4002:	10 f5       	brcc	.+68     	; 0x4048 <decode_hexadecimal_string_bytes+0x66>
    4004:	32 c0       	rjmp	.+100    	; 0x406a <decode_hexadecimal_string_bytes+0x88>
    4006:	8d 01       	movw	r16, r26
    4008:	04 0f       	add	r16, r20
    400a:	15 1f       	adc	r17, r21
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	ae 01       	movw	r20, r28
    4010:	42 0f       	add	r20, r18
    4012:	53 1f       	adc	r21, r19
    4014:	fa 01       	movw	r30, r20
    4016:	90 81       	ld	r25, Z
    4018:	91 34       	cpi	r25, 0x41	; 65
    401a:	28 f0       	brcs	.+10     	; 0x4026 <decode_hexadecimal_string_bytes+0x44>
    401c:	97 53       	subi	r25, 0x37	; 55
    401e:	59 2f       	mov	r21, r25
    4020:	52 95       	swap	r21
    4022:	50 7f       	andi	r21, 0xF0	; 240
    4024:	03 c0       	rjmp	.+6      	; 0x402c <decode_hexadecimal_string_bytes+0x4a>
    4026:	59 2f       	mov	r21, r25
    4028:	52 95       	swap	r21
    402a:	50 7f       	andi	r21, 0xF0	; 240
    402c:	2c 0f       	add	r18, r28
    402e:	3d 1f       	adc	r19, r29
    4030:	f9 01       	movw	r30, r18
    4032:	91 81       	ldd	r25, Z+1	; 0x01
    4034:	91 34       	cpi	r25, 0x41	; 65
    4036:	10 f0       	brcs	.+4      	; 0x403c <decode_hexadecimal_string_bytes+0x5a>
    4038:	97 53       	subi	r25, 0x37	; 55
    403a:	01 c0       	rjmp	.+2      	; 0x403e <decode_hexadecimal_string_bytes+0x5c>
    403c:	90 53       	subi	r25, 0x30	; 48
    403e:	95 0f       	add	r25, r21
    4040:	f8 01       	movw	r30, r16
    4042:	90 83       	st	Z, r25
    4044:	8f 5f       	subi	r24, 0xFF	; 255
    4046:	01 c0       	rjmp	.+2      	; 0x404a <decode_hexadecimal_string_bytes+0x68>
    4048:	80 e0       	ldi	r24, 0x00	; 0
    404a:	28 2f       	mov	r18, r24
    404c:	22 0f       	add	r18, r18
    404e:	48 2f       	mov	r20, r24
    4050:	50 e0       	ldi	r21, 0x00	; 0
    4052:	fe 01       	movw	r30, r28
    4054:	01 90       	ld	r0, Z+
    4056:	00 20       	and	r0, r0
    4058:	e9 f7       	brne	.-6      	; 0x4054 <decode_hexadecimal_string_bytes+0x72>
    405a:	31 97       	sbiw	r30, 0x01	; 1
    405c:	ec 1b       	sub	r30, r28
    405e:	fd 0b       	sbc	r31, r29
    4060:	4e 17       	cp	r20, r30
    4062:	5f 07       	cpc	r21, r31
    4064:	10 f4       	brcc	.+4      	; 0x406a <decode_hexadecimal_string_bytes+0x88>
    4066:	86 13       	cpse	r24, r22
    4068:	ce cf       	rjmp	.-100    	; 0x4006 <decode_hexadecimal_string_bytes+0x24>
    406a:	df 91       	pop	r29
    406c:	cf 91       	pop	r28
    406e:	1f 91       	pop	r17
    4070:	0f 91       	pop	r16
    4072:	08 95       	ret

00004074 <_serialCallBack>:
    4074:	80 91 9f 16 	lds	r24, 0x169F	; 0x80169f <crc_sum.1945>
    4078:	86 0f       	add	r24, r22
    407a:	80 93 9f 16 	sts	0x169F, r24	; 0x80169f <crc_sum.1945>
    407e:	90 91 a2 16 	lds	r25, 0x16A2	; 0x8016a2 <_mh_state>
    4082:	91 30       	cpi	r25, 0x01	; 1
    4084:	79 f0       	breq	.+30     	; 0x40a4 <_serialCallBack+0x30>
    4086:	28 f0       	brcs	.+10     	; 0x4092 <_serialCallBack+0x1e>
    4088:	92 30       	cpi	r25, 0x02	; 2
    408a:	a9 f0       	breq	.+42     	; 0x40b6 <_serialCallBack+0x42>
    408c:	93 30       	cpi	r25, 0x03	; 3
    408e:	19 f1       	breq	.+70     	; 0x40d6 <_serialCallBack+0x62>
    4090:	08 95       	ret
    4092:	6f 3f       	cpi	r22, 0xFF	; 255
    4094:	09 f0       	breq	.+2      	; 0x4098 <_serialCallBack+0x24>
    4096:	48 c0       	rjmp	.+144    	; 0x4128 <_serialCallBack+0xb4>
    4098:	10 92 9f 16 	sts	0x169F, r1	; 0x80169f <crc_sum.1945>
    409c:	81 e0       	ldi	r24, 0x01	; 1
    409e:	80 93 a2 16 	sts	0x16A2, r24	; 0x8016a2 <_mh_state>
    40a2:	08 95       	ret
    40a4:	66 38       	cpi	r22, 0x86	; 134
    40a6:	09 f0       	breq	.+2      	; 0x40aa <_serialCallBack+0x36>
    40a8:	3f c0       	rjmp	.+126    	; 0x4128 <_serialCallBack+0xb4>
    40aa:	10 92 9e 16 	sts	0x169E, r1	; 0x80169e <inDex.1943>
    40ae:	82 e0       	ldi	r24, 0x02	; 2
    40b0:	80 93 a2 16 	sts	0x16A2, r24	; 0x8016a2 <_mh_state>
    40b4:	08 95       	ret
    40b6:	e0 91 9e 16 	lds	r30, 0x169E	; 0x80169e <inDex.1943>
    40ba:	81 e0       	ldi	r24, 0x01	; 1
    40bc:	8e 0f       	add	r24, r30
    40be:	80 93 9e 16 	sts	0x169E, r24	; 0x80169e <inDex.1943>
    40c2:	f0 e0       	ldi	r31, 0x00	; 0
    40c4:	e4 56       	subi	r30, 0x64	; 100
    40c6:	f9 4e       	sbci	r31, 0xE9	; 233
    40c8:	60 83       	st	Z, r22
    40ca:	82 30       	cpi	r24, 0x02	; 2
    40cc:	69 f5       	brne	.+90     	; 0x4128 <_serialCallBack+0xb4>
    40ce:	83 e0       	ldi	r24, 0x03	; 3
    40d0:	80 93 a2 16 	sts	0x16A2, r24	; 0x8016a2 <_mh_state>
    40d4:	08 95       	ret
    40d6:	90 91 9e 16 	lds	r25, 0x169E	; 0x80169e <inDex.1943>
    40da:	21 e0       	ldi	r18, 0x01	; 1
    40dc:	29 0f       	add	r18, r25
    40de:	20 93 9e 16 	sts	0x169E, r18	; 0x80169e <inDex.1943>
    40e2:	96 30       	cpi	r25, 0x06	; 6
    40e4:	09 f5       	brne	.+66     	; 0x4128 <_serialCallBack+0xb4>
    40e6:	81 11       	cpse	r24, r1
    40e8:	0e c0       	rjmp	.+28     	; 0x4106 <_serialCallBack+0x92>
    40ea:	ec e9       	ldi	r30, 0x9C	; 156
    40ec:	f6 e1       	ldi	r31, 0x16	; 22
    40ee:	80 81       	ld	r24, Z
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	98 2f       	mov	r25, r24
    40f4:	88 27       	eor	r24, r24
    40f6:	21 81       	ldd	r18, Z+1	; 0x01
    40f8:	82 0f       	add	r24, r18
    40fa:	91 1d       	adc	r25, r1
    40fc:	90 93 a4 16 	sts	0x16A4, r25	; 0x8016a4 <_ppm+0x1>
    4100:	80 93 a3 16 	sts	0x16A3, r24	; 0x8016a3 <_ppm>
    4104:	04 c0       	rjmp	.+8      	; 0x410e <_serialCallBack+0x9a>
    4106:	10 92 a4 16 	sts	0x16A4, r1	; 0x8016a4 <_ppm+0x1>
    410a:	10 92 a3 16 	sts	0x16A3, r1	; 0x8016a3 <_ppm>
    410e:	10 92 a2 16 	sts	0x16A2, r1	; 0x8016a2 <_mh_state>
    4112:	e0 91 a0 16 	lds	r30, 0x16A0	; 0x8016a0 <_appCallBack>
    4116:	f0 91 a1 16 	lds	r31, 0x16A1	; 0x8016a1 <_appCallBack+0x1>
    411a:	30 97       	sbiw	r30, 0x00	; 0
    411c:	29 f0       	breq	.+10     	; 0x4128 <_serialCallBack+0xb4>
    411e:	80 91 a3 16 	lds	r24, 0x16A3	; 0x8016a3 <_ppm>
    4122:	90 91 a4 16 	lds	r25, 0x16A4	; 0x8016a4 <_ppm+0x1>
    4126:	19 95       	eicall
    4128:	08 95       	ret

0000412a <mh_z19_initialise>:
    412a:	8f 92       	push	r8
    412c:	9f 92       	push	r9
    412e:	af 92       	push	r10
    4130:	cf 92       	push	r12
    4132:	ef 92       	push	r14
    4134:	0f 93       	push	r16
    4136:	0f 2e       	mov	r0, r31
    4138:	fa e3       	ldi	r31, 0x3A	; 58
    413a:	8f 2e       	mov	r8, r31
    413c:	f0 e2       	ldi	r31, 0x20	; 32
    413e:	9f 2e       	mov	r9, r31
    4140:	f0 2d       	mov	r31, r0
    4142:	68 94       	set
    4144:	aa 24       	eor	r10, r10
    4146:	a4 f8       	bld	r10, 4
    4148:	68 94       	set
    414a:	cc 24       	eor	r12, r12
    414c:	c4 f8       	bld	r12, 4
    414e:	e1 2c       	mov	r14, r1
    4150:	00 e0       	ldi	r16, 0x00	; 0
    4152:	23 e0       	ldi	r18, 0x03	; 3
    4154:	40 e8       	ldi	r20, 0x80	; 128
    4156:	55 e2       	ldi	r21, 0x25	; 37
    4158:	60 e0       	ldi	r22, 0x00	; 0
    415a:	70 e0       	ldi	r23, 0x00	; 0
    415c:	50 d0       	rcall	.+160    	; 0x41fe <serial_create>
    415e:	90 93 a6 16 	sts	0x16A6, r25	; 0x8016a6 <_serial+0x1>
    4162:	80 93 a5 16 	sts	0x16A5, r24	; 0x8016a5 <_serial>
    4166:	0f 91       	pop	r16
    4168:	ef 90       	pop	r14
    416a:	cf 90       	pop	r12
    416c:	af 90       	pop	r10
    416e:	9f 90       	pop	r9
    4170:	8f 90       	pop	r8
    4172:	08 95       	ret

00004174 <mh_z19_injectCallBack>:
    4174:	90 93 a1 16 	sts	0x16A1, r25	; 0x8016a1 <_appCallBack+0x1>
    4178:	80 93 a0 16 	sts	0x16A0, r24	; 0x8016a0 <_appCallBack>
    417c:	08 95       	ret

0000417e <mh_z19_takeMeassuring>:
    417e:	cf 93       	push	r28
    4180:	df 93       	push	r29
    4182:	cd b7       	in	r28, 0x3d	; 61
    4184:	de b7       	in	r29, 0x3e	; 62
    4186:	29 97       	sbiw	r28, 0x09	; 9
    4188:	0f b6       	in	r0, 0x3f	; 63
    418a:	f8 94       	cli
    418c:	de bf       	out	0x3e, r29	; 62
    418e:	0f be       	out	0x3f, r0	; 63
    4190:	cd bf       	out	0x3d, r28	; 61
    4192:	89 e0       	ldi	r24, 0x09	; 9
    4194:	e2 e4       	ldi	r30, 0x42	; 66
    4196:	f2 e0       	ldi	r31, 0x02	; 2
    4198:	9e 01       	movw	r18, r28
    419a:	2f 5f       	subi	r18, 0xFF	; 255
    419c:	3f 4f       	sbci	r19, 0xFF	; 255
    419e:	d9 01       	movw	r26, r18
    41a0:	01 90       	ld	r0, Z+
    41a2:	0d 92       	st	X+, r0
    41a4:	8a 95       	dec	r24
    41a6:	e1 f7       	brne	.-8      	; 0x41a0 <mh_z19_takeMeassuring+0x22>
    41a8:	10 92 a4 16 	sts	0x16A4, r1	; 0x8016a4 <_ppm+0x1>
    41ac:	10 92 a3 16 	sts	0x16A3, r1	; 0x8016a3 <_ppm>
    41b0:	80 91 a5 16 	lds	r24, 0x16A5	; 0x8016a5 <_serial>
    41b4:	90 91 a6 16 	lds	r25, 0x16A6	; 0x8016a6 <_serial+0x1>
    41b8:	00 97       	sbiw	r24, 0x00	; 0
    41ba:	31 f0       	breq	.+12     	; 0x41c8 <mh_z19_takeMeassuring+0x4a>
    41bc:	42 2f       	mov	r20, r18
    41be:	53 2f       	mov	r21, r19
    41c0:	69 e0       	ldi	r22, 0x09	; 9
    41c2:	ea d0       	rcall	.+468    	; 0x4398 <serial_sendBytes>
    41c4:	80 e0       	ldi	r24, 0x00	; 0
    41c6:	01 c0       	rjmp	.+2      	; 0x41ca <mh_z19_takeMeassuring+0x4c>
    41c8:	82 e0       	ldi	r24, 0x02	; 2
    41ca:	29 96       	adiw	r28, 0x09	; 9
    41cc:	0f b6       	in	r0, 0x3f	; 63
    41ce:	f8 94       	cli
    41d0:	de bf       	out	0x3e, r29	; 62
    41d2:	0f be       	out	0x3f, r0	; 63
    41d4:	cd bf       	out	0x3d, r28	; 61
    41d6:	df 91       	pop	r29
    41d8:	cf 91       	pop	r28
    41da:	08 95       	ret

000041dc <mh_z19_getCo2Ppm>:
    41dc:	20 91 a3 16 	lds	r18, 0x16A3	; 0x8016a3 <_ppm>
    41e0:	30 91 a4 16 	lds	r19, 0x16A4	; 0x8016a4 <_ppm+0x1>
    41e4:	21 15       	cp	r18, r1
    41e6:	31 05       	cpc	r19, r1
    41e8:	29 f4       	brne	.+10     	; 0x41f4 <mh_z19_getCo2Ppm+0x18>
    41ea:	fc 01       	movw	r30, r24
    41ec:	11 82       	std	Z+1, r1	; 0x01
    41ee:	10 82       	st	Z, r1
    41f0:	81 e0       	ldi	r24, 0x01	; 1
    41f2:	08 95       	ret
    41f4:	fc 01       	movw	r30, r24
    41f6:	31 83       	std	Z+1, r19	; 0x01
    41f8:	20 83       	st	Z, r18
    41fa:	80 e0       	ldi	r24, 0x00	; 0
    41fc:	08 95       	ret

000041fe <serial_create>:
    41fe:	2f 92       	push	r2
    4200:	3f 92       	push	r3
    4202:	4f 92       	push	r4
    4204:	5f 92       	push	r5
    4206:	6f 92       	push	r6
    4208:	7f 92       	push	r7
    420a:	8f 92       	push	r8
    420c:	9f 92       	push	r9
    420e:	af 92       	push	r10
    4210:	cf 92       	push	r12
    4212:	ef 92       	push	r14
    4214:	ff 92       	push	r15
    4216:	0f 93       	push	r16
    4218:	1f 93       	push	r17
    421a:	cf 93       	push	r28
    421c:	df 93       	push	r29
    421e:	cd b7       	in	r28, 0x3d	; 61
    4220:	de b7       	in	r29, 0x3e	; 62
    4222:	f8 2e       	mov	r15, r24
    4224:	2a 01       	movw	r4, r20
    4226:	3b 01       	movw	r6, r22
    4228:	88 e0       	ldi	r24, 0x08	; 8
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	0e 94 67 2a 	call	0x54ce	; 0x54ce <malloc>
    4230:	8c 01       	movw	r16, r24
    4232:	8f 2d       	mov	r24, r15
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	fc 01       	movw	r30, r24
    4238:	ee 0f       	add	r30, r30
    423a:	ff 1f       	adc	r31, r31
    423c:	e9 55       	subi	r30, 0x59	; 89
    423e:	f9 4e       	sbci	r31, 0xE9	; 233
    4240:	11 83       	std	Z+1, r17	; 0x01
    4242:	00 83       	st	Z, r16
    4244:	01 15       	cp	r16, r1
    4246:	11 05       	cpc	r17, r1
    4248:	09 f4       	brne	.+2      	; 0x424c <serial_create+0x4e>
    424a:	69 c0       	rjmp	.+210    	; 0x431e <serial_create+0x120>
    424c:	88 0f       	add	r24, r24
    424e:	99 1f       	adc	r25, r25
    4250:	fc 01       	movw	r30, r24
    4252:	e5 5f       	subi	r30, 0xF5	; 245
    4254:	fd 4f       	sbci	r31, 0xFD	; 253
    4256:	80 81       	ld	r24, Z
    4258:	91 81       	ldd	r25, Z+1	; 0x01
    425a:	d8 01       	movw	r26, r16
    425c:	8d 93       	st	X+, r24
    425e:	9c 93       	st	X, r25
    4260:	8c 2d       	mov	r24, r12
    4262:	90 e0       	ldi	r25, 0x00	; 0
    4264:	88 0f       	add	r24, r24
    4266:	99 1f       	adc	r25, r25
    4268:	88 0f       	add	r24, r24
    426a:	99 1f       	adc	r25, r25
    426c:	0e 94 67 2a 	call	0x54ce	; 0x54ce <malloc>
    4270:	1c 01       	movw	r2, r24
    4272:	86 e0       	ldi	r24, 0x06	; 6
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	0e 94 67 2a 	call	0x54ce	; 0x54ce <malloc>
    427a:	7c 01       	movw	r14, r24
    427c:	4c 2d       	mov	r20, r12
    427e:	b1 01       	movw	r22, r2
    4280:	f1 d6       	rcall	.+3554   	; 0x5064 <fifo_init>
    4282:	f8 01       	movw	r30, r16
    4284:	f5 82       	std	Z+5, r15	; 0x05
    4286:	e4 82       	std	Z+4, r14	; 0x04
    4288:	8a 2d       	mov	r24, r10
    428a:	90 e0       	ldi	r25, 0x00	; 0
    428c:	88 0f       	add	r24, r24
    428e:	99 1f       	adc	r25, r25
    4290:	88 0f       	add	r24, r24
    4292:	99 1f       	adc	r25, r25
    4294:	0e 94 67 2a 	call	0x54ce	; 0x54ce <malloc>
    4298:	1c 01       	movw	r2, r24
    429a:	86 e0       	ldi	r24, 0x06	; 6
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	0e 94 67 2a 	call	0x54ce	; 0x54ce <malloc>
    42a2:	7c 01       	movw	r14, r24
    42a4:	4a 2d       	mov	r20, r10
    42a6:	b1 01       	movw	r22, r2
    42a8:	dd d6       	rcall	.+3514   	; 0x5064 <fifo_init>
    42aa:	d8 01       	movw	r26, r16
    42ac:	13 96       	adiw	r26, 0x03	; 3
    42ae:	fc 92       	st	X, r15
    42b0:	ee 92       	st	-X, r14
    42b2:	12 97       	sbiw	r26, 0x02	; 2
    42b4:	17 96       	adiw	r26, 0x07	; 7
    42b6:	9c 92       	st	X, r9
    42b8:	8e 92       	st	-X, r8
    42ba:	16 97       	sbiw	r26, 0x06	; 6
    42bc:	ff b6       	in	r15, 0x3f	; 63
    42be:	f8 94       	cli
    42c0:	ed 91       	ld	r30, X+
    42c2:	fc 91       	ld	r31, X
    42c4:	11 97       	sbiw	r26, 0x01	; 1
    42c6:	36 97       	sbiw	r30, 0x06	; 6
    42c8:	80 81       	ld	r24, Z
    42ca:	82 60       	ori	r24, 0x02	; 2
    42cc:	80 83       	st	Z, r24
    42ce:	8d 90       	ld	r8, X+
    42d0:	9c 90       	ld	r9, X
    42d2:	c3 01       	movw	r24, r6
    42d4:	b2 01       	movw	r22, r4
    42d6:	e0 d7       	rcall	.+4032   	; 0x5298 <__floatunsisf>
    42d8:	20 e0       	ldi	r18, 0x00	; 0
    42da:	30 e0       	ldi	r19, 0x00	; 0
    42dc:	40 e0       	ldi	r20, 0x00	; 0
    42de:	51 e4       	ldi	r21, 0x41	; 65
    42e0:	0e 94 da 29 	call	0x53b4	; 0x53b4 <__mulsf3>
    42e4:	9b 01       	movw	r18, r22
    42e6:	ac 01       	movw	r20, r24
    42e8:	60 e0       	ldi	r22, 0x00	; 0
    42ea:	74 e2       	ldi	r23, 0x24	; 36
    42ec:	84 e7       	ldi	r24, 0x74	; 116
    42ee:	9b e4       	ldi	r25, 0x4B	; 75
    42f0:	3a d7       	rcall	.+3700   	; 0x5166 <__divsf3>
    42f2:	20 e0       	ldi	r18, 0x00	; 0
    42f4:	30 e0       	ldi	r19, 0x00	; 0
    42f6:	40 e8       	ldi	r20, 0x80	; 128
    42f8:	5f e3       	ldi	r21, 0x3F	; 63
    42fa:	d0 d6       	rcall	.+3488   	; 0x509c <__subsf3>
    42fc:	a1 d7       	rcall	.+3906   	; 0x5240 <__fixunssfsi>
    42fe:	f4 01       	movw	r30, r8
    4300:	32 97       	sbiw	r30, 0x02	; 2
    4302:	60 83       	st	Z, r22
    4304:	d8 01       	movw	r26, r16
    4306:	ed 91       	ld	r30, X+
    4308:	fc 91       	ld	r31, X
    430a:	11 97       	sbiw	r26, 0x01	; 1
    430c:	35 97       	sbiw	r30, 0x05	; 5
    430e:	88 e9       	ldi	r24, 0x98	; 152
    4310:	80 83       	st	Z, r24
    4312:	ed 91       	ld	r30, X+
    4314:	fc 91       	ld	r31, X
    4316:	34 97       	sbiw	r30, 0x04	; 4
    4318:	86 e0       	ldi	r24, 0x06	; 6
    431a:	80 83       	st	Z, r24
    431c:	ff be       	out	0x3f, r15	; 63
    431e:	c8 01       	movw	r24, r16
    4320:	df 91       	pop	r29
    4322:	cf 91       	pop	r28
    4324:	1f 91       	pop	r17
    4326:	0f 91       	pop	r16
    4328:	ff 90       	pop	r15
    432a:	ef 90       	pop	r14
    432c:	cf 90       	pop	r12
    432e:	af 90       	pop	r10
    4330:	9f 90       	pop	r9
    4332:	8f 90       	pop	r8
    4334:	7f 90       	pop	r7
    4336:	6f 90       	pop	r6
    4338:	5f 90       	pop	r5
    433a:	4f 90       	pop	r4
    433c:	3f 90       	pop	r3
    433e:	2f 90       	pop	r2
    4340:	08 95       	ret

00004342 <serial_sendByte>:
    4342:	cf 93       	push	r28
    4344:	df 93       	push	r29
    4346:	dc 01       	movw	r26, r24
    4348:	89 2b       	or	r24, r25
    434a:	01 f1       	breq	.+64     	; 0x438c <serial_sendByte+0x4a>
    434c:	12 96       	adiw	r26, 0x02	; 2
    434e:	ed 91       	ld	r30, X+
    4350:	fc 91       	ld	r31, X
    4352:	13 97       	sbiw	r26, 0x03	; 3
    4354:	93 81       	ldd	r25, Z+3	; 0x03
    4356:	82 81       	ldd	r24, Z+2	; 0x02
    4358:	25 81       	ldd	r18, Z+5	; 0x05
    435a:	98 1b       	sub	r25, r24
    435c:	92 23       	and	r25, r18
    435e:	84 81       	ldd	r24, Z+4	; 0x04
    4360:	98 17       	cp	r25, r24
    4362:	b1 f0       	breq	.+44     	; 0x4390 <serial_sendByte+0x4e>
    4364:	83 81       	ldd	r24, Z+3	; 0x03
    4366:	26 95       	lsr	r18
    4368:	28 23       	and	r18, r24
    436a:	c0 81       	ld	r28, Z
    436c:	d1 81       	ldd	r29, Z+1	; 0x01
    436e:	c2 0f       	add	r28, r18
    4370:	d1 1d       	adc	r29, r1
    4372:	68 83       	st	Y, r22
    4374:	8f 5f       	subi	r24, 0xFF	; 255
    4376:	95 81       	ldd	r25, Z+5	; 0x05
    4378:	89 23       	and	r24, r25
    437a:	83 83       	std	Z+3, r24	; 0x03
    437c:	ed 91       	ld	r30, X+
    437e:	fc 91       	ld	r31, X
    4380:	35 97       	sbiw	r30, 0x05	; 5
    4382:	80 81       	ld	r24, Z
    4384:	80 62       	ori	r24, 0x20	; 32
    4386:	80 83       	st	Z, r24
    4388:	80 e0       	ldi	r24, 0x00	; 0
    438a:	03 c0       	rjmp	.+6      	; 0x4392 <serial_sendByte+0x50>
    438c:	81 e0       	ldi	r24, 0x01	; 1
    438e:	01 c0       	rjmp	.+2      	; 0x4392 <serial_sendByte+0x50>
    4390:	82 e0       	ldi	r24, 0x02	; 2
    4392:	df 91       	pop	r29
    4394:	cf 91       	pop	r28
    4396:	08 95       	ret

00004398 <serial_sendBytes>:
    4398:	ef 92       	push	r14
    439a:	ff 92       	push	r15
    439c:	0f 93       	push	r16
    439e:	1f 93       	push	r17
    43a0:	cf 93       	push	r28
    43a2:	df 93       	push	r29
    43a4:	7c 01       	movw	r14, r24
    43a6:	00 97       	sbiw	r24, 0x00	; 0
    43a8:	09 f4       	brne	.+2      	; 0x43ac <serial_sendBytes+0x14>
    43aa:	41 c0       	rjmp	.+130    	; 0x442e <serial_sendBytes+0x96>
    43ac:	dc 01       	movw	r26, r24
    43ae:	12 96       	adiw	r26, 0x02	; 2
    43b0:	ed 91       	ld	r30, X+
    43b2:	fc 91       	ld	r31, X
    43b4:	13 97       	sbiw	r26, 0x03	; 3
    43b6:	93 81       	ldd	r25, Z+3	; 0x03
    43b8:	82 81       	ldd	r24, Z+2	; 0x02
    43ba:	98 1b       	sub	r25, r24
    43bc:	85 81       	ldd	r24, Z+5	; 0x05
    43be:	98 23       	and	r25, r24
    43c0:	84 81       	ldd	r24, Z+4	; 0x04
    43c2:	89 1b       	sub	r24, r25
    43c4:	86 17       	cp	r24, r22
    43c6:	a8 f1       	brcs	.+106    	; 0x4432 <serial_sendBytes+0x9a>
    43c8:	66 23       	and	r22, r22
    43ca:	41 f1       	breq	.+80     	; 0x441c <serial_sendBytes+0x84>
    43cc:	84 2f       	mov	r24, r20
    43ce:	95 2f       	mov	r25, r21
    43d0:	dc 01       	movw	r26, r24
    43d2:	61 50       	subi	r22, 0x01	; 1
    43d4:	46 2f       	mov	r20, r22
    43d6:	50 e0       	ldi	r21, 0x00	; 0
    43d8:	4f 5f       	subi	r20, 0xFF	; 255
    43da:	5f 4f       	sbci	r21, 0xFF	; 255
    43dc:	48 0f       	add	r20, r24
    43de:	59 1f       	adc	r21, r25
    43e0:	e7 01       	movw	r28, r14
    43e2:	ea 81       	ldd	r30, Y+2	; 0x02
    43e4:	fb 81       	ldd	r31, Y+3	; 0x03
    43e6:	93 81       	ldd	r25, Z+3	; 0x03
    43e8:	82 81       	ldd	r24, Z+2	; 0x02
    43ea:	25 81       	ldd	r18, Z+5	; 0x05
    43ec:	98 1b       	sub	r25, r24
    43ee:	92 23       	and	r25, r18
    43f0:	84 81       	ldd	r24, Z+4	; 0x04
    43f2:	98 17       	cp	r25, r24
    43f4:	79 f0       	breq	.+30     	; 0x4414 <serial_sendBytes+0x7c>
    43f6:	8c 91       	ld	r24, X
    43f8:	93 81       	ldd	r25, Z+3	; 0x03
    43fa:	26 95       	lsr	r18
    43fc:	29 23       	and	r18, r25
    43fe:	60 81       	ld	r22, Z
    4400:	71 81       	ldd	r23, Z+1	; 0x01
    4402:	8b 01       	movw	r16, r22
    4404:	02 0f       	add	r16, r18
    4406:	11 1d       	adc	r17, r1
    4408:	e8 01       	movw	r28, r16
    440a:	88 83       	st	Y, r24
    440c:	9f 5f       	subi	r25, 0xFF	; 255
    440e:	85 81       	ldd	r24, Z+5	; 0x05
    4410:	98 23       	and	r25, r24
    4412:	93 83       	std	Z+3, r25	; 0x03
    4414:	11 96       	adiw	r26, 0x01	; 1
    4416:	a4 17       	cp	r26, r20
    4418:	b5 07       	cpc	r27, r21
    441a:	11 f7       	brne	.-60     	; 0x43e0 <serial_sendBytes+0x48>
    441c:	d7 01       	movw	r26, r14
    441e:	ed 91       	ld	r30, X+
    4420:	fc 91       	ld	r31, X
    4422:	35 97       	sbiw	r30, 0x05	; 5
    4424:	80 81       	ld	r24, Z
    4426:	80 62       	ori	r24, 0x20	; 32
    4428:	80 83       	st	Z, r24
    442a:	80 e0       	ldi	r24, 0x00	; 0
    442c:	03 c0       	rjmp	.+6      	; 0x4434 <serial_sendBytes+0x9c>
    442e:	81 e0       	ldi	r24, 0x01	; 1
    4430:	01 c0       	rjmp	.+2      	; 0x4434 <serial_sendBytes+0x9c>
    4432:	82 e0       	ldi	r24, 0x02	; 2
    4434:	df 91       	pop	r29
    4436:	cf 91       	pop	r28
    4438:	1f 91       	pop	r17
    443a:	0f 91       	pop	r16
    443c:	ff 90       	pop	r15
    443e:	ef 90       	pop	r14
    4440:	08 95       	ret

00004442 <serial_getByte>:
    4442:	00 97       	sbiw	r24, 0x00	; 0
    4444:	d1 f0       	breq	.+52     	; 0x447a <serial_getByte+0x38>
    4446:	dc 01       	movw	r26, r24
    4448:	14 96       	adiw	r26, 0x04	; 4
    444a:	ed 91       	ld	r30, X+
    444c:	fc 91       	ld	r31, X
    444e:	15 97       	sbiw	r26, 0x05	; 5
    4450:	93 81       	ldd	r25, Z+3	; 0x03
    4452:	82 81       	ldd	r24, Z+2	; 0x02
    4454:	98 17       	cp	r25, r24
    4456:	99 f0       	breq	.+38     	; 0x447e <serial_getByte+0x3c>
    4458:	92 81       	ldd	r25, Z+2	; 0x02
    445a:	85 81       	ldd	r24, Z+5	; 0x05
    445c:	86 95       	lsr	r24
    445e:	89 23       	and	r24, r25
    4460:	a0 81       	ld	r26, Z
    4462:	b1 81       	ldd	r27, Z+1	; 0x01
    4464:	a8 0f       	add	r26, r24
    4466:	b1 1d       	adc	r27, r1
    4468:	8c 91       	ld	r24, X
    446a:	db 01       	movw	r26, r22
    446c:	8c 93       	st	X, r24
    446e:	9f 5f       	subi	r25, 0xFF	; 255
    4470:	85 81       	ldd	r24, Z+5	; 0x05
    4472:	98 23       	and	r25, r24
    4474:	92 83       	std	Z+2, r25	; 0x02
    4476:	80 e0       	ldi	r24, 0x00	; 0
    4478:	08 95       	ret
    447a:	81 e0       	ldi	r24, 0x01	; 1
    447c:	08 95       	ret
    447e:	83 e0       	ldi	r24, 0x03	; 3
    4480:	08 95       	ret

00004482 <__vector_25>:
    4482:	1f 92       	push	r1
    4484:	0f 92       	push	r0
    4486:	0f b6       	in	r0, 0x3f	; 63
    4488:	0f 92       	push	r0
    448a:	11 24       	eor	r1, r1
    448c:	0b b6       	in	r0, 0x3b	; 59
    448e:	0f 92       	push	r0
    4490:	2f 93       	push	r18
    4492:	3f 93       	push	r19
    4494:	4f 93       	push	r20
    4496:	5f 93       	push	r21
    4498:	6f 93       	push	r22
    449a:	7f 93       	push	r23
    449c:	8f 93       	push	r24
    449e:	9f 93       	push	r25
    44a0:	af 93       	push	r26
    44a2:	bf 93       	push	r27
    44a4:	cf 93       	push	r28
    44a6:	df 93       	push	r29
    44a8:	ef 93       	push	r30
    44aa:	ff 93       	push	r31
    44ac:	a0 91 a7 16 	lds	r26, 0x16A7	; 0x8016a7 <_ser_handle>
    44b0:	b0 91 a8 16 	lds	r27, 0x16A8	; 0x8016a8 <_ser_handle+0x1>
    44b4:	10 97       	sbiw	r26, 0x00	; 0
    44b6:	11 f1       	breq	.+68     	; 0x44fc <__vector_25+0x7a>
    44b8:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    44bc:	14 96       	adiw	r26, 0x04	; 4
    44be:	ed 91       	ld	r30, X+
    44c0:	fc 91       	ld	r31, X
    44c2:	15 97       	sbiw	r26, 0x05	; 5
    44c4:	93 81       	ldd	r25, Z+3	; 0x03
    44c6:	82 81       	ldd	r24, Z+2	; 0x02
    44c8:	25 81       	ldd	r18, Z+5	; 0x05
    44ca:	98 1b       	sub	r25, r24
    44cc:	92 23       	and	r25, r18
    44ce:	84 81       	ldd	r24, Z+4	; 0x04
    44d0:	98 17       	cp	r25, r24
    44d2:	61 f0       	breq	.+24     	; 0x44ec <__vector_25+0x6a>
    44d4:	83 81       	ldd	r24, Z+3	; 0x03
    44d6:	26 95       	lsr	r18
    44d8:	28 23       	and	r18, r24
    44da:	c0 81       	ld	r28, Z
    44dc:	d1 81       	ldd	r29, Z+1	; 0x01
    44de:	c2 0f       	add	r28, r18
    44e0:	d1 1d       	adc	r29, r1
    44e2:	68 83       	st	Y, r22
    44e4:	8f 5f       	subi	r24, 0xFF	; 255
    44e6:	95 81       	ldd	r25, Z+5	; 0x05
    44e8:	89 23       	and	r24, r25
    44ea:	83 83       	std	Z+3, r24	; 0x03
    44ec:	16 96       	adiw	r26, 0x06	; 6
    44ee:	ed 91       	ld	r30, X+
    44f0:	fc 91       	ld	r31, X
    44f2:	17 97       	sbiw	r26, 0x07	; 7
    44f4:	30 97       	sbiw	r30, 0x00	; 0
    44f6:	11 f0       	breq	.+4      	; 0x44fc <__vector_25+0x7a>
    44f8:	cd 01       	movw	r24, r26
    44fa:	19 95       	eicall
    44fc:	ff 91       	pop	r31
    44fe:	ef 91       	pop	r30
    4500:	df 91       	pop	r29
    4502:	cf 91       	pop	r28
    4504:	bf 91       	pop	r27
    4506:	af 91       	pop	r26
    4508:	9f 91       	pop	r25
    450a:	8f 91       	pop	r24
    450c:	7f 91       	pop	r23
    450e:	6f 91       	pop	r22
    4510:	5f 91       	pop	r21
    4512:	4f 91       	pop	r20
    4514:	3f 91       	pop	r19
    4516:	2f 91       	pop	r18
    4518:	0f 90       	pop	r0
    451a:	0b be       	out	0x3b, r0	; 59
    451c:	0f 90       	pop	r0
    451e:	0f be       	out	0x3f, r0	; 63
    4520:	0f 90       	pop	r0
    4522:	1f 90       	pop	r1
    4524:	18 95       	reti

00004526 <__vector_26>:
    4526:	1f 92       	push	r1
    4528:	0f 92       	push	r0
    452a:	0f b6       	in	r0, 0x3f	; 63
    452c:	0f 92       	push	r0
    452e:	11 24       	eor	r1, r1
    4530:	0b b6       	in	r0, 0x3b	; 59
    4532:	0f 92       	push	r0
    4534:	2f 93       	push	r18
    4536:	8f 93       	push	r24
    4538:	9f 93       	push	r25
    453a:	af 93       	push	r26
    453c:	bf 93       	push	r27
    453e:	ef 93       	push	r30
    4540:	ff 93       	push	r31
    4542:	e0 91 a7 16 	lds	r30, 0x16A7	; 0x8016a7 <_ser_handle>
    4546:	f0 91 a8 16 	lds	r31, 0x16A8	; 0x8016a8 <_ser_handle+0x1>
    454a:	30 97       	sbiw	r30, 0x00	; 0
    454c:	b9 f0       	breq	.+46     	; 0x457c <__vector_26+0x56>
    454e:	02 80       	ldd	r0, Z+2	; 0x02
    4550:	f3 81       	ldd	r31, Z+3	; 0x03
    4552:	e0 2d       	mov	r30, r0
    4554:	93 81       	ldd	r25, Z+3	; 0x03
    4556:	82 81       	ldd	r24, Z+2	; 0x02
    4558:	98 17       	cp	r25, r24
    455a:	b1 f0       	breq	.+44     	; 0x4588 <__vector_26+0x62>
    455c:	92 81       	ldd	r25, Z+2	; 0x02
    455e:	85 81       	ldd	r24, Z+5	; 0x05
    4560:	28 2f       	mov	r18, r24
    4562:	26 95       	lsr	r18
    4564:	29 23       	and	r18, r25
    4566:	a0 81       	ld	r26, Z
    4568:	b1 81       	ldd	r27, Z+1	; 0x01
    456a:	a2 0f       	add	r26, r18
    456c:	b1 1d       	adc	r27, r1
    456e:	2c 91       	ld	r18, X
    4570:	9f 5f       	subi	r25, 0xFF	; 255
    4572:	89 23       	and	r24, r25
    4574:	82 83       	std	Z+2, r24	; 0x02
    4576:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    457a:	0b c0       	rjmp	.+22     	; 0x4592 <__vector_26+0x6c>
    457c:	e1 ec       	ldi	r30, 0xC1	; 193
    457e:	f0 e0       	ldi	r31, 0x00	; 0
    4580:	80 81       	ld	r24, Z
    4582:	8f 7d       	andi	r24, 0xDF	; 223
    4584:	80 83       	st	Z, r24
    4586:	05 c0       	rjmp	.+10     	; 0x4592 <__vector_26+0x6c>
    4588:	e1 ec       	ldi	r30, 0xC1	; 193
    458a:	f0 e0       	ldi	r31, 0x00	; 0
    458c:	80 81       	ld	r24, Z
    458e:	8f 7d       	andi	r24, 0xDF	; 223
    4590:	80 83       	st	Z, r24
    4592:	ff 91       	pop	r31
    4594:	ef 91       	pop	r30
    4596:	bf 91       	pop	r27
    4598:	af 91       	pop	r26
    459a:	9f 91       	pop	r25
    459c:	8f 91       	pop	r24
    459e:	2f 91       	pop	r18
    45a0:	0f 90       	pop	r0
    45a2:	0b be       	out	0x3b, r0	; 59
    45a4:	0f 90       	pop	r0
    45a6:	0f be       	out	0x3f, r0	; 63
    45a8:	0f 90       	pop	r0
    45aa:	1f 90       	pop	r1
    45ac:	18 95       	reti

000045ae <__vector_36>:
    45ae:	1f 92       	push	r1
    45b0:	0f 92       	push	r0
    45b2:	0f b6       	in	r0, 0x3f	; 63
    45b4:	0f 92       	push	r0
    45b6:	11 24       	eor	r1, r1
    45b8:	0b b6       	in	r0, 0x3b	; 59
    45ba:	0f 92       	push	r0
    45bc:	2f 93       	push	r18
    45be:	3f 93       	push	r19
    45c0:	4f 93       	push	r20
    45c2:	5f 93       	push	r21
    45c4:	6f 93       	push	r22
    45c6:	7f 93       	push	r23
    45c8:	8f 93       	push	r24
    45ca:	9f 93       	push	r25
    45cc:	af 93       	push	r26
    45ce:	bf 93       	push	r27
    45d0:	cf 93       	push	r28
    45d2:	df 93       	push	r29
    45d4:	ef 93       	push	r30
    45d6:	ff 93       	push	r31
    45d8:	a0 91 a9 16 	lds	r26, 0x16A9	; 0x8016a9 <_ser_handle+0x2>
    45dc:	b0 91 aa 16 	lds	r27, 0x16AA	; 0x8016aa <_ser_handle+0x3>
    45e0:	10 97       	sbiw	r26, 0x00	; 0
    45e2:	11 f1       	breq	.+68     	; 0x4628 <__vector_36+0x7a>
    45e4:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    45e8:	14 96       	adiw	r26, 0x04	; 4
    45ea:	ed 91       	ld	r30, X+
    45ec:	fc 91       	ld	r31, X
    45ee:	15 97       	sbiw	r26, 0x05	; 5
    45f0:	93 81       	ldd	r25, Z+3	; 0x03
    45f2:	82 81       	ldd	r24, Z+2	; 0x02
    45f4:	25 81       	ldd	r18, Z+5	; 0x05
    45f6:	98 1b       	sub	r25, r24
    45f8:	92 23       	and	r25, r18
    45fa:	84 81       	ldd	r24, Z+4	; 0x04
    45fc:	98 17       	cp	r25, r24
    45fe:	61 f0       	breq	.+24     	; 0x4618 <__vector_36+0x6a>
    4600:	83 81       	ldd	r24, Z+3	; 0x03
    4602:	26 95       	lsr	r18
    4604:	28 23       	and	r18, r24
    4606:	c0 81       	ld	r28, Z
    4608:	d1 81       	ldd	r29, Z+1	; 0x01
    460a:	c2 0f       	add	r28, r18
    460c:	d1 1d       	adc	r29, r1
    460e:	68 83       	st	Y, r22
    4610:	8f 5f       	subi	r24, 0xFF	; 255
    4612:	95 81       	ldd	r25, Z+5	; 0x05
    4614:	89 23       	and	r24, r25
    4616:	83 83       	std	Z+3, r24	; 0x03
    4618:	16 96       	adiw	r26, 0x06	; 6
    461a:	ed 91       	ld	r30, X+
    461c:	fc 91       	ld	r31, X
    461e:	17 97       	sbiw	r26, 0x07	; 7
    4620:	30 97       	sbiw	r30, 0x00	; 0
    4622:	11 f0       	breq	.+4      	; 0x4628 <__vector_36+0x7a>
    4624:	cd 01       	movw	r24, r26
    4626:	19 95       	eicall
    4628:	ff 91       	pop	r31
    462a:	ef 91       	pop	r30
    462c:	df 91       	pop	r29
    462e:	cf 91       	pop	r28
    4630:	bf 91       	pop	r27
    4632:	af 91       	pop	r26
    4634:	9f 91       	pop	r25
    4636:	8f 91       	pop	r24
    4638:	7f 91       	pop	r23
    463a:	6f 91       	pop	r22
    463c:	5f 91       	pop	r21
    463e:	4f 91       	pop	r20
    4640:	3f 91       	pop	r19
    4642:	2f 91       	pop	r18
    4644:	0f 90       	pop	r0
    4646:	0b be       	out	0x3b, r0	; 59
    4648:	0f 90       	pop	r0
    464a:	0f be       	out	0x3f, r0	; 63
    464c:	0f 90       	pop	r0
    464e:	1f 90       	pop	r1
    4650:	18 95       	reti

00004652 <__vector_37>:
    4652:	1f 92       	push	r1
    4654:	0f 92       	push	r0
    4656:	0f b6       	in	r0, 0x3f	; 63
    4658:	0f 92       	push	r0
    465a:	11 24       	eor	r1, r1
    465c:	0b b6       	in	r0, 0x3b	; 59
    465e:	0f 92       	push	r0
    4660:	2f 93       	push	r18
    4662:	8f 93       	push	r24
    4664:	9f 93       	push	r25
    4666:	af 93       	push	r26
    4668:	bf 93       	push	r27
    466a:	ef 93       	push	r30
    466c:	ff 93       	push	r31
    466e:	e0 91 a9 16 	lds	r30, 0x16A9	; 0x8016a9 <_ser_handle+0x2>
    4672:	f0 91 aa 16 	lds	r31, 0x16AA	; 0x8016aa <_ser_handle+0x3>
    4676:	30 97       	sbiw	r30, 0x00	; 0
    4678:	b9 f0       	breq	.+46     	; 0x46a8 <__vector_37+0x56>
    467a:	02 80       	ldd	r0, Z+2	; 0x02
    467c:	f3 81       	ldd	r31, Z+3	; 0x03
    467e:	e0 2d       	mov	r30, r0
    4680:	93 81       	ldd	r25, Z+3	; 0x03
    4682:	82 81       	ldd	r24, Z+2	; 0x02
    4684:	98 17       	cp	r25, r24
    4686:	b1 f0       	breq	.+44     	; 0x46b4 <__vector_37+0x62>
    4688:	92 81       	ldd	r25, Z+2	; 0x02
    468a:	85 81       	ldd	r24, Z+5	; 0x05
    468c:	28 2f       	mov	r18, r24
    468e:	26 95       	lsr	r18
    4690:	29 23       	and	r18, r25
    4692:	a0 81       	ld	r26, Z
    4694:	b1 81       	ldd	r27, Z+1	; 0x01
    4696:	a2 0f       	add	r26, r18
    4698:	b1 1d       	adc	r27, r1
    469a:	2c 91       	ld	r18, X
    469c:	9f 5f       	subi	r25, 0xFF	; 255
    469e:	89 23       	and	r24, r25
    46a0:	82 83       	std	Z+2, r24	; 0x02
    46a2:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    46a6:	0b c0       	rjmp	.+22     	; 0x46be <__vector_37+0x6c>
    46a8:	e9 ec       	ldi	r30, 0xC9	; 201
    46aa:	f0 e0       	ldi	r31, 0x00	; 0
    46ac:	80 81       	ld	r24, Z
    46ae:	8f 7d       	andi	r24, 0xDF	; 223
    46b0:	80 83       	st	Z, r24
    46b2:	05 c0       	rjmp	.+10     	; 0x46be <__vector_37+0x6c>
    46b4:	e9 ec       	ldi	r30, 0xC9	; 201
    46b6:	f0 e0       	ldi	r31, 0x00	; 0
    46b8:	80 81       	ld	r24, Z
    46ba:	8f 7d       	andi	r24, 0xDF	; 223
    46bc:	80 83       	st	Z, r24
    46be:	ff 91       	pop	r31
    46c0:	ef 91       	pop	r30
    46c2:	bf 91       	pop	r27
    46c4:	af 91       	pop	r26
    46c6:	9f 91       	pop	r25
    46c8:	8f 91       	pop	r24
    46ca:	2f 91       	pop	r18
    46cc:	0f 90       	pop	r0
    46ce:	0b be       	out	0x3b, r0	; 59
    46d0:	0f 90       	pop	r0
    46d2:	0f be       	out	0x3f, r0	; 63
    46d4:	0f 90       	pop	r0
    46d6:	1f 90       	pop	r1
    46d8:	18 95       	reti

000046da <__vector_51>:
    46da:	1f 92       	push	r1
    46dc:	0f 92       	push	r0
    46de:	0f b6       	in	r0, 0x3f	; 63
    46e0:	0f 92       	push	r0
    46e2:	11 24       	eor	r1, r1
    46e4:	0b b6       	in	r0, 0x3b	; 59
    46e6:	0f 92       	push	r0
    46e8:	2f 93       	push	r18
    46ea:	3f 93       	push	r19
    46ec:	4f 93       	push	r20
    46ee:	5f 93       	push	r21
    46f0:	6f 93       	push	r22
    46f2:	7f 93       	push	r23
    46f4:	8f 93       	push	r24
    46f6:	9f 93       	push	r25
    46f8:	af 93       	push	r26
    46fa:	bf 93       	push	r27
    46fc:	cf 93       	push	r28
    46fe:	df 93       	push	r29
    4700:	ef 93       	push	r30
    4702:	ff 93       	push	r31
    4704:	a0 91 ab 16 	lds	r26, 0x16AB	; 0x8016ab <_ser_handle+0x4>
    4708:	b0 91 ac 16 	lds	r27, 0x16AC	; 0x8016ac <_ser_handle+0x5>
    470c:	10 97       	sbiw	r26, 0x00	; 0
    470e:	11 f1       	breq	.+68     	; 0x4754 <__vector_51+0x7a>
    4710:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4714:	14 96       	adiw	r26, 0x04	; 4
    4716:	ed 91       	ld	r30, X+
    4718:	fc 91       	ld	r31, X
    471a:	15 97       	sbiw	r26, 0x05	; 5
    471c:	93 81       	ldd	r25, Z+3	; 0x03
    471e:	82 81       	ldd	r24, Z+2	; 0x02
    4720:	25 81       	ldd	r18, Z+5	; 0x05
    4722:	98 1b       	sub	r25, r24
    4724:	92 23       	and	r25, r18
    4726:	84 81       	ldd	r24, Z+4	; 0x04
    4728:	98 17       	cp	r25, r24
    472a:	61 f0       	breq	.+24     	; 0x4744 <__vector_51+0x6a>
    472c:	83 81       	ldd	r24, Z+3	; 0x03
    472e:	26 95       	lsr	r18
    4730:	28 23       	and	r18, r24
    4732:	c0 81       	ld	r28, Z
    4734:	d1 81       	ldd	r29, Z+1	; 0x01
    4736:	c2 0f       	add	r28, r18
    4738:	d1 1d       	adc	r29, r1
    473a:	68 83       	st	Y, r22
    473c:	8f 5f       	subi	r24, 0xFF	; 255
    473e:	95 81       	ldd	r25, Z+5	; 0x05
    4740:	89 23       	and	r24, r25
    4742:	83 83       	std	Z+3, r24	; 0x03
    4744:	16 96       	adiw	r26, 0x06	; 6
    4746:	ed 91       	ld	r30, X+
    4748:	fc 91       	ld	r31, X
    474a:	17 97       	sbiw	r26, 0x07	; 7
    474c:	30 97       	sbiw	r30, 0x00	; 0
    474e:	11 f0       	breq	.+4      	; 0x4754 <__vector_51+0x7a>
    4750:	cd 01       	movw	r24, r26
    4752:	19 95       	eicall
    4754:	ff 91       	pop	r31
    4756:	ef 91       	pop	r30
    4758:	df 91       	pop	r29
    475a:	cf 91       	pop	r28
    475c:	bf 91       	pop	r27
    475e:	af 91       	pop	r26
    4760:	9f 91       	pop	r25
    4762:	8f 91       	pop	r24
    4764:	7f 91       	pop	r23
    4766:	6f 91       	pop	r22
    4768:	5f 91       	pop	r21
    476a:	4f 91       	pop	r20
    476c:	3f 91       	pop	r19
    476e:	2f 91       	pop	r18
    4770:	0f 90       	pop	r0
    4772:	0b be       	out	0x3b, r0	; 59
    4774:	0f 90       	pop	r0
    4776:	0f be       	out	0x3f, r0	; 63
    4778:	0f 90       	pop	r0
    477a:	1f 90       	pop	r1
    477c:	18 95       	reti

0000477e <__vector_52>:
    477e:	1f 92       	push	r1
    4780:	0f 92       	push	r0
    4782:	0f b6       	in	r0, 0x3f	; 63
    4784:	0f 92       	push	r0
    4786:	11 24       	eor	r1, r1
    4788:	0b b6       	in	r0, 0x3b	; 59
    478a:	0f 92       	push	r0
    478c:	2f 93       	push	r18
    478e:	8f 93       	push	r24
    4790:	9f 93       	push	r25
    4792:	af 93       	push	r26
    4794:	bf 93       	push	r27
    4796:	ef 93       	push	r30
    4798:	ff 93       	push	r31
    479a:	e0 91 ab 16 	lds	r30, 0x16AB	; 0x8016ab <_ser_handle+0x4>
    479e:	f0 91 ac 16 	lds	r31, 0x16AC	; 0x8016ac <_ser_handle+0x5>
    47a2:	30 97       	sbiw	r30, 0x00	; 0
    47a4:	b9 f0       	breq	.+46     	; 0x47d4 <__vector_52+0x56>
    47a6:	02 80       	ldd	r0, Z+2	; 0x02
    47a8:	f3 81       	ldd	r31, Z+3	; 0x03
    47aa:	e0 2d       	mov	r30, r0
    47ac:	93 81       	ldd	r25, Z+3	; 0x03
    47ae:	82 81       	ldd	r24, Z+2	; 0x02
    47b0:	98 17       	cp	r25, r24
    47b2:	b1 f0       	breq	.+44     	; 0x47e0 <__vector_52+0x62>
    47b4:	92 81       	ldd	r25, Z+2	; 0x02
    47b6:	85 81       	ldd	r24, Z+5	; 0x05
    47b8:	28 2f       	mov	r18, r24
    47ba:	26 95       	lsr	r18
    47bc:	29 23       	and	r18, r25
    47be:	a0 81       	ld	r26, Z
    47c0:	b1 81       	ldd	r27, Z+1	; 0x01
    47c2:	a2 0f       	add	r26, r18
    47c4:	b1 1d       	adc	r27, r1
    47c6:	2c 91       	ld	r18, X
    47c8:	9f 5f       	subi	r25, 0xFF	; 255
    47ca:	89 23       	and	r24, r25
    47cc:	82 83       	std	Z+2, r24	; 0x02
    47ce:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    47d2:	0b c0       	rjmp	.+22     	; 0x47ea <__vector_52+0x6c>
    47d4:	e1 ed       	ldi	r30, 0xD1	; 209
    47d6:	f0 e0       	ldi	r31, 0x00	; 0
    47d8:	80 81       	ld	r24, Z
    47da:	8f 7d       	andi	r24, 0xDF	; 223
    47dc:	80 83       	st	Z, r24
    47de:	05 c0       	rjmp	.+10     	; 0x47ea <__vector_52+0x6c>
    47e0:	e1 ed       	ldi	r30, 0xD1	; 209
    47e2:	f0 e0       	ldi	r31, 0x00	; 0
    47e4:	80 81       	ld	r24, Z
    47e6:	8f 7d       	andi	r24, 0xDF	; 223
    47e8:	80 83       	st	Z, r24
    47ea:	ff 91       	pop	r31
    47ec:	ef 91       	pop	r30
    47ee:	bf 91       	pop	r27
    47f0:	af 91       	pop	r26
    47f2:	9f 91       	pop	r25
    47f4:	8f 91       	pop	r24
    47f6:	2f 91       	pop	r18
    47f8:	0f 90       	pop	r0
    47fa:	0b be       	out	0x3b, r0	; 59
    47fc:	0f 90       	pop	r0
    47fe:	0f be       	out	0x3f, r0	; 63
    4800:	0f 90       	pop	r0
    4802:	1f 90       	pop	r1
    4804:	18 95       	reti

00004806 <__vector_54>:
    4806:	1f 92       	push	r1
    4808:	0f 92       	push	r0
    480a:	0f b6       	in	r0, 0x3f	; 63
    480c:	0f 92       	push	r0
    480e:	11 24       	eor	r1, r1
    4810:	0b b6       	in	r0, 0x3b	; 59
    4812:	0f 92       	push	r0
    4814:	2f 93       	push	r18
    4816:	3f 93       	push	r19
    4818:	4f 93       	push	r20
    481a:	5f 93       	push	r21
    481c:	6f 93       	push	r22
    481e:	7f 93       	push	r23
    4820:	8f 93       	push	r24
    4822:	9f 93       	push	r25
    4824:	af 93       	push	r26
    4826:	bf 93       	push	r27
    4828:	cf 93       	push	r28
    482a:	df 93       	push	r29
    482c:	ef 93       	push	r30
    482e:	ff 93       	push	r31
    4830:	a0 91 ad 16 	lds	r26, 0x16AD	; 0x8016ad <_ser_handle+0x6>
    4834:	b0 91 ae 16 	lds	r27, 0x16AE	; 0x8016ae <_ser_handle+0x7>
    4838:	10 97       	sbiw	r26, 0x00	; 0
    483a:	11 f1       	breq	.+68     	; 0x4880 <__vector_54+0x7a>
    483c:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4840:	14 96       	adiw	r26, 0x04	; 4
    4842:	ed 91       	ld	r30, X+
    4844:	fc 91       	ld	r31, X
    4846:	15 97       	sbiw	r26, 0x05	; 5
    4848:	93 81       	ldd	r25, Z+3	; 0x03
    484a:	82 81       	ldd	r24, Z+2	; 0x02
    484c:	25 81       	ldd	r18, Z+5	; 0x05
    484e:	98 1b       	sub	r25, r24
    4850:	92 23       	and	r25, r18
    4852:	84 81       	ldd	r24, Z+4	; 0x04
    4854:	98 17       	cp	r25, r24
    4856:	61 f0       	breq	.+24     	; 0x4870 <__vector_54+0x6a>
    4858:	83 81       	ldd	r24, Z+3	; 0x03
    485a:	26 95       	lsr	r18
    485c:	28 23       	and	r18, r24
    485e:	c0 81       	ld	r28, Z
    4860:	d1 81       	ldd	r29, Z+1	; 0x01
    4862:	c2 0f       	add	r28, r18
    4864:	d1 1d       	adc	r29, r1
    4866:	68 83       	st	Y, r22
    4868:	8f 5f       	subi	r24, 0xFF	; 255
    486a:	95 81       	ldd	r25, Z+5	; 0x05
    486c:	89 23       	and	r24, r25
    486e:	83 83       	std	Z+3, r24	; 0x03
    4870:	16 96       	adiw	r26, 0x06	; 6
    4872:	ed 91       	ld	r30, X+
    4874:	fc 91       	ld	r31, X
    4876:	17 97       	sbiw	r26, 0x07	; 7
    4878:	30 97       	sbiw	r30, 0x00	; 0
    487a:	11 f0       	breq	.+4      	; 0x4880 <__vector_54+0x7a>
    487c:	cd 01       	movw	r24, r26
    487e:	19 95       	eicall
    4880:	ff 91       	pop	r31
    4882:	ef 91       	pop	r30
    4884:	df 91       	pop	r29
    4886:	cf 91       	pop	r28
    4888:	bf 91       	pop	r27
    488a:	af 91       	pop	r26
    488c:	9f 91       	pop	r25
    488e:	8f 91       	pop	r24
    4890:	7f 91       	pop	r23
    4892:	6f 91       	pop	r22
    4894:	5f 91       	pop	r21
    4896:	4f 91       	pop	r20
    4898:	3f 91       	pop	r19
    489a:	2f 91       	pop	r18
    489c:	0f 90       	pop	r0
    489e:	0b be       	out	0x3b, r0	; 59
    48a0:	0f 90       	pop	r0
    48a2:	0f be       	out	0x3f, r0	; 63
    48a4:	0f 90       	pop	r0
    48a6:	1f 90       	pop	r1
    48a8:	18 95       	reti

000048aa <__vector_55>:
    48aa:	1f 92       	push	r1
    48ac:	0f 92       	push	r0
    48ae:	0f b6       	in	r0, 0x3f	; 63
    48b0:	0f 92       	push	r0
    48b2:	11 24       	eor	r1, r1
    48b4:	0b b6       	in	r0, 0x3b	; 59
    48b6:	0f 92       	push	r0
    48b8:	2f 93       	push	r18
    48ba:	8f 93       	push	r24
    48bc:	9f 93       	push	r25
    48be:	af 93       	push	r26
    48c0:	bf 93       	push	r27
    48c2:	ef 93       	push	r30
    48c4:	ff 93       	push	r31
    48c6:	e0 91 ad 16 	lds	r30, 0x16AD	; 0x8016ad <_ser_handle+0x6>
    48ca:	f0 91 ae 16 	lds	r31, 0x16AE	; 0x8016ae <_ser_handle+0x7>
    48ce:	30 97       	sbiw	r30, 0x00	; 0
    48d0:	b9 f0       	breq	.+46     	; 0x4900 <__vector_55+0x56>
    48d2:	02 80       	ldd	r0, Z+2	; 0x02
    48d4:	f3 81       	ldd	r31, Z+3	; 0x03
    48d6:	e0 2d       	mov	r30, r0
    48d8:	93 81       	ldd	r25, Z+3	; 0x03
    48da:	82 81       	ldd	r24, Z+2	; 0x02
    48dc:	98 17       	cp	r25, r24
    48de:	b1 f0       	breq	.+44     	; 0x490c <__vector_55+0x62>
    48e0:	92 81       	ldd	r25, Z+2	; 0x02
    48e2:	85 81       	ldd	r24, Z+5	; 0x05
    48e4:	28 2f       	mov	r18, r24
    48e6:	26 95       	lsr	r18
    48e8:	29 23       	and	r18, r25
    48ea:	a0 81       	ld	r26, Z
    48ec:	b1 81       	ldd	r27, Z+1	; 0x01
    48ee:	a2 0f       	add	r26, r18
    48f0:	b1 1d       	adc	r27, r1
    48f2:	2c 91       	ld	r18, X
    48f4:	9f 5f       	subi	r25, 0xFF	; 255
    48f6:	89 23       	and	r24, r25
    48f8:	82 83       	std	Z+2, r24	; 0x02
    48fa:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    48fe:	0b c0       	rjmp	.+22     	; 0x4916 <__vector_55+0x6c>
    4900:	e1 e3       	ldi	r30, 0x31	; 49
    4902:	f1 e0       	ldi	r31, 0x01	; 1
    4904:	80 81       	ld	r24, Z
    4906:	8f 7d       	andi	r24, 0xDF	; 223
    4908:	80 83       	st	Z, r24
    490a:	05 c0       	rjmp	.+10     	; 0x4916 <__vector_55+0x6c>
    490c:	e1 e3       	ldi	r30, 0x31	; 49
    490e:	f1 e0       	ldi	r31, 0x01	; 1
    4910:	80 81       	ld	r24, Z
    4912:	8f 7d       	andi	r24, 0xDF	; 223
    4914:	80 83       	st	Z, r24
    4916:	ff 91       	pop	r31
    4918:	ef 91       	pop	r30
    491a:	bf 91       	pop	r27
    491c:	af 91       	pop	r26
    491e:	9f 91       	pop	r25
    4920:	8f 91       	pop	r24
    4922:	2f 91       	pop	r18
    4924:	0f 90       	pop	r0
    4926:	0b be       	out	0x3b, r0	; 59
    4928:	0f 90       	pop	r0
    492a:	0f be       	out	0x3f, r0	; 63
    492c:	0f 90       	pop	r0
    492e:	1f 90       	pop	r1
    4930:	18 95       	reti

00004932 <usart_getchar>:
    4932:	cf 93       	push	r28
    4934:	df 93       	push	r29
    4936:	1f 92       	push	r1
    4938:	cd b7       	in	r28, 0x3d	; 61
    493a:	de b7       	in	r29, 0x3e	; 62
    493c:	be 01       	movw	r22, r28
    493e:	6f 5f       	subi	r22, 0xFF	; 255
    4940:	7f 4f       	sbci	r23, 0xFF	; 255
    4942:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <_com_serial_instance>
    4946:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <_com_serial_instance+0x1>
    494a:	7b dd       	rcall	.-1290   	; 0x4442 <serial_getByte>
    494c:	81 11       	cpse	r24, r1
    494e:	f6 cf       	rjmp	.-20     	; 0x493c <usart_getchar+0xa>
    4950:	89 81       	ldd	r24, Y+1	; 0x01
    4952:	90 e0       	ldi	r25, 0x00	; 0
    4954:	0f 90       	pop	r0
    4956:	df 91       	pop	r29
    4958:	cf 91       	pop	r28
    495a:	08 95       	ret

0000495c <usart_putchar>:
    495c:	68 2f       	mov	r22, r24
    495e:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <_com_serial_instance>
    4962:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <_com_serial_instance+0x1>
    4966:	ed dc       	rcall	.-1574   	; 0x4342 <serial_sendByte>
    4968:	80 e0       	ldi	r24, 0x00	; 0
    496a:	90 e0       	ldi	r25, 0x00	; 0
    496c:	08 95       	ret

0000496e <stdio_initialise>:
    496e:	8f 92       	push	r8
    4970:	9f 92       	push	r9
    4972:	af 92       	push	r10
    4974:	cf 92       	push	r12
    4976:	ef 92       	push	r14
    4978:	0f 93       	push	r16
    497a:	81 2c       	mov	r8, r1
    497c:	91 2c       	mov	r9, r1
    497e:	68 94       	set
    4980:	aa 24       	eor	r10, r10
    4982:	a7 f8       	bld	r10, 7
    4984:	68 94       	set
    4986:	cc 24       	eor	r12, r12
    4988:	c7 f8       	bld	r12, 7
    498a:	e1 2c       	mov	r14, r1
    498c:	00 e0       	ldi	r16, 0x00	; 0
    498e:	23 e0       	ldi	r18, 0x03	; 3
    4990:	40 e0       	ldi	r20, 0x00	; 0
    4992:	51 ee       	ldi	r21, 0xE1	; 225
    4994:	60 e0       	ldi	r22, 0x00	; 0
    4996:	70 e0       	ldi	r23, 0x00	; 0
    4998:	32 dc       	rcall	.-1948   	; 0x41fe <serial_create>
    499a:	90 93 b0 16 	sts	0x16B0, r25	; 0x8016b0 <_com_serial_instance+0x1>
    499e:	80 93 af 16 	sts	0x16AF, r24	; 0x8016af <_com_serial_instance>
    49a2:	e2 ee       	ldi	r30, 0xE2	; 226
    49a4:	f6 e1       	ldi	r31, 0x16	; 22
    49a6:	83 e1       	ldi	r24, 0x13	; 19
    49a8:	92 e0       	ldi	r25, 0x02	; 2
    49aa:	91 83       	std	Z+1, r25	; 0x01
    49ac:	80 83       	st	Z, r24
    49ae:	93 83       	std	Z+3, r25	; 0x03
    49b0:	82 83       	std	Z+2, r24	; 0x02
    49b2:	0f 91       	pop	r16
    49b4:	ef 90       	pop	r14
    49b6:	cf 90       	pop	r12
    49b8:	af 90       	pop	r10
    49ba:	9f 90       	pop	r9
    49bc:	8f 90       	pop	r8
    49be:	08 95       	ret

000049c0 <_turn_off>:
    49c0:	90 e0       	ldi	r25, 0x00	; 0
    49c2:	fc 01       	movw	r30, r24
    49c4:	ee 0f       	add	r30, r30
    49c6:	ff 1f       	adc	r31, r31
    49c8:	e8 0f       	add	r30, r24
    49ca:	f9 1f       	adc	r31, r25
    49cc:	ee 0f       	add	r30, r30
    49ce:	ff 1f       	adc	r31, r31
    49d0:	ef 54       	subi	r30, 0x4F	; 79
    49d2:	f9 4e       	sbci	r31, 0xE9	; 233
    49d4:	23 81       	ldd	r18, Z+3	; 0x03
    49d6:	21 11       	cpse	r18, r1
    49d8:	1f c0       	rjmp	.+62     	; 0x4a18 <_turn_off+0x58>
    49da:	9c 01       	movw	r18, r24
    49dc:	22 0f       	add	r18, r18
    49de:	33 1f       	adc	r19, r19
    49e0:	f9 01       	movw	r30, r18
    49e2:	e8 0f       	add	r30, r24
    49e4:	f9 1f       	adc	r31, r25
    49e6:	ee 0f       	add	r30, r30
    49e8:	ff 1f       	adc	r31, r31
    49ea:	ef 54       	subi	r30, 0x4F	; 79
    49ec:	f9 4e       	sbci	r31, 0xE9	; 233
    49ee:	a0 81       	ld	r26, Z
    49f0:	b1 81       	ldd	r27, Z+1	; 0x01
    49f2:	4c 91       	ld	r20, X
    49f4:	f9 01       	movw	r30, r18
    49f6:	e8 0f       	add	r30, r24
    49f8:	f9 1f       	adc	r31, r25
    49fa:	ee 0f       	add	r30, r30
    49fc:	ff 1f       	adc	r31, r31
    49fe:	ef 54       	subi	r30, 0x4F	; 79
    4a00:	f9 4e       	sbci	r31, 0xE9	; 233
    4a02:	81 e0       	ldi	r24, 0x01	; 1
    4a04:	90 e0       	ldi	r25, 0x00	; 0
    4a06:	02 80       	ldd	r0, Z+2	; 0x02
    4a08:	02 c0       	rjmp	.+4      	; 0x4a0e <_turn_off+0x4e>
    4a0a:	88 0f       	add	r24, r24
    4a0c:	99 1f       	adc	r25, r25
    4a0e:	0a 94       	dec	r0
    4a10:	e2 f7       	brpl	.-8      	; 0x4a0a <_turn_off+0x4a>
    4a12:	84 2b       	or	r24, r20
    4a14:	8c 93       	st	X, r24
    4a16:	08 95       	ret
    4a18:	fc 01       	movw	r30, r24
    4a1a:	ee 0f       	add	r30, r30
    4a1c:	ff 1f       	adc	r31, r31
    4a1e:	df 01       	movw	r26, r30
    4a20:	a8 0f       	add	r26, r24
    4a22:	b9 1f       	adc	r27, r25
    4a24:	aa 0f       	add	r26, r26
    4a26:	bb 1f       	adc	r27, r27
    4a28:	af 54       	subi	r26, 0x4F	; 79
    4a2a:	b9 4e       	sbci	r27, 0xE9	; 233
    4a2c:	0d 90       	ld	r0, X+
    4a2e:	bc 91       	ld	r27, X
    4a30:	a0 2d       	mov	r26, r0
    4a32:	2c 91       	ld	r18, X
    4a34:	e8 0f       	add	r30, r24
    4a36:	f9 1f       	adc	r31, r25
    4a38:	ee 0f       	add	r30, r30
    4a3a:	ff 1f       	adc	r31, r31
    4a3c:	ef 54       	subi	r30, 0x4F	; 79
    4a3e:	f9 4e       	sbci	r31, 0xE9	; 233
    4a40:	81 e0       	ldi	r24, 0x01	; 1
    4a42:	90 e0       	ldi	r25, 0x00	; 0
    4a44:	02 80       	ldd	r0, Z+2	; 0x02
    4a46:	02 c0       	rjmp	.+4      	; 0x4a4c <_turn_off+0x8c>
    4a48:	88 0f       	add	r24, r24
    4a4a:	99 1f       	adc	r25, r25
    4a4c:	0a 94       	dec	r0
    4a4e:	e2 f7       	brpl	.-8      	; 0x4a48 <_turn_off+0x88>
    4a50:	80 95       	com	r24
    4a52:	82 23       	and	r24, r18
    4a54:	8c 93       	st	X, r24
    4a56:	08 95       	ret

00004a58 <_turn_on>:
    4a58:	90 e0       	ldi	r25, 0x00	; 0
    4a5a:	fc 01       	movw	r30, r24
    4a5c:	ee 0f       	add	r30, r30
    4a5e:	ff 1f       	adc	r31, r31
    4a60:	e8 0f       	add	r30, r24
    4a62:	f9 1f       	adc	r31, r25
    4a64:	ee 0f       	add	r30, r30
    4a66:	ff 1f       	adc	r31, r31
    4a68:	ef 54       	subi	r30, 0x4F	; 79
    4a6a:	f9 4e       	sbci	r31, 0xE9	; 233
    4a6c:	23 81       	ldd	r18, Z+3	; 0x03
    4a6e:	21 11       	cpse	r18, r1
    4a70:	20 c0       	rjmp	.+64     	; 0x4ab2 <_turn_on+0x5a>
    4a72:	9c 01       	movw	r18, r24
    4a74:	22 0f       	add	r18, r18
    4a76:	33 1f       	adc	r19, r19
    4a78:	f9 01       	movw	r30, r18
    4a7a:	e8 0f       	add	r30, r24
    4a7c:	f9 1f       	adc	r31, r25
    4a7e:	ee 0f       	add	r30, r30
    4a80:	ff 1f       	adc	r31, r31
    4a82:	ef 54       	subi	r30, 0x4F	; 79
    4a84:	f9 4e       	sbci	r31, 0xE9	; 233
    4a86:	a0 81       	ld	r26, Z
    4a88:	b1 81       	ldd	r27, Z+1	; 0x01
    4a8a:	4c 91       	ld	r20, X
    4a8c:	f9 01       	movw	r30, r18
    4a8e:	e8 0f       	add	r30, r24
    4a90:	f9 1f       	adc	r31, r25
    4a92:	ee 0f       	add	r30, r30
    4a94:	ff 1f       	adc	r31, r31
    4a96:	ef 54       	subi	r30, 0x4F	; 79
    4a98:	f9 4e       	sbci	r31, 0xE9	; 233
    4a9a:	81 e0       	ldi	r24, 0x01	; 1
    4a9c:	90 e0       	ldi	r25, 0x00	; 0
    4a9e:	02 80       	ldd	r0, Z+2	; 0x02
    4aa0:	02 c0       	rjmp	.+4      	; 0x4aa6 <_turn_on+0x4e>
    4aa2:	88 0f       	add	r24, r24
    4aa4:	99 1f       	adc	r25, r25
    4aa6:	0a 94       	dec	r0
    4aa8:	e2 f7       	brpl	.-8      	; 0x4aa2 <_turn_on+0x4a>
    4aaa:	80 95       	com	r24
    4aac:	84 23       	and	r24, r20
    4aae:	8c 93       	st	X, r24
    4ab0:	08 95       	ret
    4ab2:	fc 01       	movw	r30, r24
    4ab4:	ee 0f       	add	r30, r30
    4ab6:	ff 1f       	adc	r31, r31
    4ab8:	df 01       	movw	r26, r30
    4aba:	a8 0f       	add	r26, r24
    4abc:	b9 1f       	adc	r27, r25
    4abe:	aa 0f       	add	r26, r26
    4ac0:	bb 1f       	adc	r27, r27
    4ac2:	af 54       	subi	r26, 0x4F	; 79
    4ac4:	b9 4e       	sbci	r27, 0xE9	; 233
    4ac6:	0d 90       	ld	r0, X+
    4ac8:	bc 91       	ld	r27, X
    4aca:	a0 2d       	mov	r26, r0
    4acc:	2c 91       	ld	r18, X
    4ace:	e8 0f       	add	r30, r24
    4ad0:	f9 1f       	adc	r31, r25
    4ad2:	ee 0f       	add	r30, r30
    4ad4:	ff 1f       	adc	r31, r31
    4ad6:	ef 54       	subi	r30, 0x4F	; 79
    4ad8:	f9 4e       	sbci	r31, 0xE9	; 233
    4ada:	81 e0       	ldi	r24, 0x01	; 1
    4adc:	90 e0       	ldi	r25, 0x00	; 0
    4ade:	02 80       	ldd	r0, Z+2	; 0x02
    4ae0:	02 c0       	rjmp	.+4      	; 0x4ae6 <_turn_on+0x8e>
    4ae2:	88 0f       	add	r24, r24
    4ae4:	99 1f       	adc	r25, r25
    4ae6:	0a 94       	dec	r0
    4ae8:	e2 f7       	brpl	.-8      	; 0x4ae2 <_turn_on+0x8a>
    4aea:	82 2b       	or	r24, r18
    4aec:	8c 93       	st	X, r24
    4aee:	08 95       	ret

00004af0 <_hal_led_task>:
    4af0:	cc 24       	eor	r12, r12
    4af2:	c3 94       	inc	r12
    4af4:	d1 2c       	mov	r13, r1
    4af6:	68 94       	set
    4af8:	bb 24       	eor	r11, r11
    4afa:	b2 f8       	bld	r11, 2
    4afc:	c1 eb       	ldi	r28, 0xB1	; 177
    4afe:	d6 e1       	ldi	r29, 0x16	; 22
    4b00:	10 e0       	ldi	r17, 0x00	; 0
    4b02:	8c 81       	ldd	r24, Y+4	; 0x04
    4b04:	81 30       	cpi	r24, 0x01	; 1
    4b06:	81 f0       	breq	.+32     	; 0x4b28 <_hal_led_task+0x38>
    4b08:	18 f1       	brcs	.+70     	; 0x4b50 <_hal_led_task+0x60>
    4b0a:	82 30       	cpi	r24, 0x02	; 2
    4b0c:	61 f5       	brne	.+88     	; 0x4b66 <_hal_led_task+0x76>
    4b0e:	e8 81       	ld	r30, Y
    4b10:	f9 81       	ldd	r31, Y+1	; 0x01
    4b12:	20 81       	ld	r18, Z
    4b14:	c6 01       	movw	r24, r12
    4b16:	0a 80       	ldd	r0, Y+2	; 0x02
    4b18:	02 c0       	rjmp	.+4      	; 0x4b1e <_hal_led_task+0x2e>
    4b1a:	88 0f       	add	r24, r24
    4b1c:	99 1f       	adc	r25, r25
    4b1e:	0a 94       	dec	r0
    4b20:	e2 f7       	brpl	.-8      	; 0x4b1a <_hal_led_task+0x2a>
    4b22:	82 27       	eor	r24, r18
    4b24:	80 83       	st	Z, r24
    4b26:	1f c0       	rjmp	.+62     	; 0x4b66 <_hal_led_task+0x76>
    4b28:	8d 81       	ldd	r24, Y+5	; 0x05
    4b2a:	8f 5f       	subi	r24, 0xFF	; 255
    4b2c:	8a 30       	cpi	r24, 0x0A	; 10
    4b2e:	10 f4       	brcc	.+4      	; 0x4b34 <_hal_led_task+0x44>
    4b30:	8d 83       	std	Y+5, r24	; 0x05
    4b32:	19 c0       	rjmp	.+50     	; 0x4b66 <_hal_led_task+0x76>
    4b34:	1d 82       	std	Y+5, r1	; 0x05
    4b36:	e8 81       	ld	r30, Y
    4b38:	f9 81       	ldd	r31, Y+1	; 0x01
    4b3a:	20 81       	ld	r18, Z
    4b3c:	c6 01       	movw	r24, r12
    4b3e:	0a 80       	ldd	r0, Y+2	; 0x02
    4b40:	02 c0       	rjmp	.+4      	; 0x4b46 <_hal_led_task+0x56>
    4b42:	88 0f       	add	r24, r24
    4b44:	99 1f       	adc	r25, r25
    4b46:	0a 94       	dec	r0
    4b48:	e2 f7       	brpl	.-8      	; 0x4b42 <_hal_led_task+0x52>
    4b4a:	82 27       	eor	r24, r18
    4b4c:	80 83       	st	Z, r24
    4b4e:	0b c0       	rjmp	.+22     	; 0x4b66 <_hal_led_task+0x76>
    4b50:	0d 81       	ldd	r16, Y+5	; 0x05
    4b52:	00 23       	and	r16, r16
    4b54:	29 f0       	breq	.+10     	; 0x4b60 <_hal_led_task+0x70>
    4b56:	81 2f       	mov	r24, r17
    4b58:	7f df       	rcall	.-258    	; 0x4a58 <_turn_on>
    4b5a:	01 50       	subi	r16, 0x01	; 1
    4b5c:	0d 83       	std	Y+5, r16	; 0x05
    4b5e:	03 c0       	rjmp	.+6      	; 0x4b66 <_hal_led_task+0x76>
    4b60:	bc 82       	std	Y+4, r11	; 0x04
    4b62:	81 2f       	mov	r24, r17
    4b64:	2d df       	rcall	.-422    	; 0x49c0 <_turn_off>
    4b66:	1f 5f       	subi	r17, 0xFF	; 255
    4b68:	26 96       	adiw	r28, 0x06	; 6
    4b6a:	14 30       	cpi	r17, 0x04	; 4
    4b6c:	51 f6       	brne	.-108    	; 0x4b02 <_hal_led_task+0x12>
    4b6e:	65 e0       	ldi	r22, 0x05	; 5
    4b70:	70 e0       	ldi	r23, 0x00	; 0
    4b72:	80 e0       	ldi	r24, 0x00	; 0
    4b74:	90 e0       	ldi	r25, 0x00	; 0
    4b76:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <vTaskDelay>
    4b7a:	c0 cf       	rjmp	.-128    	; 0x4afc <_hal_led_task+0xc>

00004b7c <status_leds_initialise>:
    4b7c:	ef 92       	push	r14
    4b7e:	ff 92       	push	r15
    4b80:	0f 93       	push	r16
    4b82:	1f 93       	push	r17
    4b84:	cf 93       	push	r28
    4b86:	df 93       	push	r29
    4b88:	08 2f       	mov	r16, r24
    4b8a:	80 e4       	ldi	r24, 0x40	; 64
    4b8c:	87 b9       	out	0x07, r24	; 7
    4b8e:	c1 eb       	ldi	r28, 0xB1	; 177
    4b90:	d6 e1       	ldi	r29, 0x16	; 22
    4b92:	0f 2e       	mov	r0, r31
    4b94:	f8 e2       	ldi	r31, 0x28	; 40
    4b96:	ef 2e       	mov	r14, r31
    4b98:	f1 2c       	mov	r15, r1
    4b9a:	f0 2d       	mov	r31, r0
    4b9c:	f9 82       	std	Y+1, r15	; 0x01
    4b9e:	e8 82       	st	Y, r14
    4ba0:	86 e0       	ldi	r24, 0x06	; 6
    4ba2:	8a 83       	std	Y+2, r24	; 0x02
    4ba4:	1b 82       	std	Y+3, r1	; 0x03
    4ba6:	14 e0       	ldi	r17, 0x04	; 4
    4ba8:	1c 83       	std	Y+4, r17	; 0x04
    4baa:	80 e0       	ldi	r24, 0x00	; 0
    4bac:	09 df       	rcall	.-494    	; 0x49c0 <_turn_off>
    4bae:	80 e8       	ldi	r24, 0x80	; 128
    4bb0:	87 b9       	out	0x07, r24	; 7
    4bb2:	ff 82       	std	Y+7, r15	; 0x07
    4bb4:	ee 82       	std	Y+6, r14	; 0x06
    4bb6:	87 e0       	ldi	r24, 0x07	; 7
    4bb8:	88 87       	std	Y+8, r24	; 0x08
    4bba:	19 86       	std	Y+9, r1	; 0x09
    4bbc:	1a 87       	std	Y+10, r17	; 0x0a
    4bbe:	81 e0       	ldi	r24, 0x01	; 1
    4bc0:	ff de       	rcall	.-514    	; 0x49c0 <_turn_off>
    4bc2:	80 e2       	ldi	r24, 0x20	; 32
    4bc4:	83 bb       	out	0x13, r24	; 19
    4bc6:	84 e3       	ldi	r24, 0x34	; 52
    4bc8:	90 e0       	ldi	r25, 0x00	; 0
    4bca:	9d 87       	std	Y+13, r25	; 0x0d
    4bcc:	8c 87       	std	Y+12, r24	; 0x0c
    4bce:	85 e0       	ldi	r24, 0x05	; 5
    4bd0:	8e 87       	std	Y+14, r24	; 0x0e
    4bd2:	1f 86       	std	Y+15, r1	; 0x0f
    4bd4:	18 8b       	std	Y+16, r17	; 0x10
    4bd6:	82 e0       	ldi	r24, 0x02	; 2
    4bd8:	f3 de       	rcall	.-538    	; 0x49c0 <_turn_off>
    4bda:	80 e1       	ldi	r24, 0x10	; 16
    4bdc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    4be0:	82 e0       	ldi	r24, 0x02	; 2
    4be2:	91 e0       	ldi	r25, 0x01	; 1
    4be4:	9b 8b       	std	Y+19, r25	; 0x13
    4be6:	8a 8b       	std	Y+18, r24	; 0x12
    4be8:	1c 8b       	std	Y+20, r17	; 0x14
    4bea:	1d 8a       	std	Y+21, r1	; 0x15
    4bec:	1e 8b       	std	Y+22, r17	; 0x16
    4bee:	83 e0       	ldi	r24, 0x03	; 3
    4bf0:	e7 de       	rcall	.-562    	; 0x49c0 <_turn_off>
    4bf2:	e1 2c       	mov	r14, r1
    4bf4:	f1 2c       	mov	r15, r1
    4bf6:	20 e0       	ldi	r18, 0x00	; 0
    4bf8:	30 e0       	ldi	r19, 0x00	; 0
    4bfa:	40 ec       	ldi	r20, 0xC0	; 192
    4bfc:	50 e0       	ldi	r21, 0x00	; 0
    4bfe:	61 e9       	ldi	r22, 0x91	; 145
    4c00:	77 e0       	ldi	r23, 0x07	; 7
    4c02:	88 e7       	ldi	r24, 0x78	; 120
    4c04:	95 e2       	ldi	r25, 0x25	; 37
    4c06:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <xTaskCreate>
    4c0a:	df 91       	pop	r29
    4c0c:	cf 91       	pop	r28
    4c0e:	1f 91       	pop	r17
    4c10:	0f 91       	pop	r16
    4c12:	ff 90       	pop	r15
    4c14:	ef 90       	pop	r14
    4c16:	08 95       	ret

00004c18 <status_leds_slowBlink>:
    4c18:	cf 93       	push	r28
    4c1a:	df 93       	push	r29
    4c1c:	90 e0       	ldi	r25, 0x00	; 0
    4c1e:	fc 01       	movw	r30, r24
    4c20:	ee 0f       	add	r30, r30
    4c22:	ff 1f       	adc	r31, r31
    4c24:	df 01       	movw	r26, r30
    4c26:	a8 0f       	add	r26, r24
    4c28:	b9 1f       	adc	r27, r25
    4c2a:	aa 0f       	add	r26, r26
    4c2c:	bb 1f       	adc	r27, r27
    4c2e:	af 54       	subi	r26, 0x4F	; 79
    4c30:	b9 4e       	sbci	r27, 0xE9	; 233
    4c32:	cd 91       	ld	r28, X+
    4c34:	dc 91       	ld	r29, X
    4c36:	11 97       	sbiw	r26, 0x01	; 1
    4c38:	48 81       	ld	r20, Y
    4c3a:	21 e0       	ldi	r18, 0x01	; 1
    4c3c:	30 e0       	ldi	r19, 0x00	; 0
    4c3e:	12 96       	adiw	r26, 0x02	; 2
    4c40:	0c 90       	ld	r0, X
    4c42:	12 97       	sbiw	r26, 0x02	; 2
    4c44:	02 c0       	rjmp	.+4      	; 0x4c4a <status_leds_slowBlink+0x32>
    4c46:	22 0f       	add	r18, r18
    4c48:	33 1f       	adc	r19, r19
    4c4a:	0a 94       	dec	r0
    4c4c:	e2 f7       	brpl	.-8      	; 0x4c46 <status_leds_slowBlink+0x2e>
    4c4e:	24 27       	eor	r18, r20
    4c50:	28 83       	st	Y, r18
    4c52:	fd 01       	movw	r30, r26
    4c54:	81 e0       	ldi	r24, 0x01	; 1
    4c56:	84 83       	std	Z+4, r24	; 0x04
    4c58:	df 91       	pop	r29
    4c5a:	cf 91       	pop	r28
    4c5c:	08 95       	ret

00004c5e <status_leds_fastBlink>:
    4c5e:	cf 93       	push	r28
    4c60:	df 93       	push	r29
    4c62:	90 e0       	ldi	r25, 0x00	; 0
    4c64:	fc 01       	movw	r30, r24
    4c66:	ee 0f       	add	r30, r30
    4c68:	ff 1f       	adc	r31, r31
    4c6a:	df 01       	movw	r26, r30
    4c6c:	a8 0f       	add	r26, r24
    4c6e:	b9 1f       	adc	r27, r25
    4c70:	aa 0f       	add	r26, r26
    4c72:	bb 1f       	adc	r27, r27
    4c74:	af 54       	subi	r26, 0x4F	; 79
    4c76:	b9 4e       	sbci	r27, 0xE9	; 233
    4c78:	cd 91       	ld	r28, X+
    4c7a:	dc 91       	ld	r29, X
    4c7c:	11 97       	sbiw	r26, 0x01	; 1
    4c7e:	48 81       	ld	r20, Y
    4c80:	21 e0       	ldi	r18, 0x01	; 1
    4c82:	30 e0       	ldi	r19, 0x00	; 0
    4c84:	12 96       	adiw	r26, 0x02	; 2
    4c86:	0c 90       	ld	r0, X
    4c88:	12 97       	sbiw	r26, 0x02	; 2
    4c8a:	02 c0       	rjmp	.+4      	; 0x4c90 <status_leds_fastBlink+0x32>
    4c8c:	22 0f       	add	r18, r18
    4c8e:	33 1f       	adc	r19, r19
    4c90:	0a 94       	dec	r0
    4c92:	e2 f7       	brpl	.-8      	; 0x4c8c <status_leds_fastBlink+0x2e>
    4c94:	24 27       	eor	r18, r20
    4c96:	28 83       	st	Y, r18
    4c98:	fd 01       	movw	r30, r26
    4c9a:	82 e0       	ldi	r24, 0x02	; 2
    4c9c:	84 83       	std	Z+4, r24	; 0x04
    4c9e:	df 91       	pop	r29
    4ca0:	cf 91       	pop	r28
    4ca2:	08 95       	ret

00004ca4 <status_leds_ledOn>:
    4ca4:	28 2f       	mov	r18, r24
    4ca6:	30 e0       	ldi	r19, 0x00	; 0
    4ca8:	f9 01       	movw	r30, r18
    4caa:	ee 0f       	add	r30, r30
    4cac:	ff 1f       	adc	r31, r31
    4cae:	e2 0f       	add	r30, r18
    4cb0:	f3 1f       	adc	r31, r19
    4cb2:	ee 0f       	add	r30, r30
    4cb4:	ff 1f       	adc	r31, r31
    4cb6:	ef 54       	subi	r30, 0x4F	; 79
    4cb8:	f9 4e       	sbci	r31, 0xE9	; 233
    4cba:	93 e0       	ldi	r25, 0x03	; 3
    4cbc:	94 83       	std	Z+4, r25	; 0x04
    4cbe:	cc ce       	rjmp	.-616    	; 0x4a58 <_turn_on>
    4cc0:	08 95       	ret

00004cc2 <status_leds_ledOff>:
    4cc2:	28 2f       	mov	r18, r24
    4cc4:	30 e0       	ldi	r19, 0x00	; 0
    4cc6:	f9 01       	movw	r30, r18
    4cc8:	ee 0f       	add	r30, r30
    4cca:	ff 1f       	adc	r31, r31
    4ccc:	e2 0f       	add	r30, r18
    4cce:	f3 1f       	adc	r31, r19
    4cd0:	ee 0f       	add	r30, r30
    4cd2:	ff 1f       	adc	r31, r31
    4cd4:	ef 54       	subi	r30, 0x4F	; 79
    4cd6:	f9 4e       	sbci	r31, 0xE9	; 233
    4cd8:	94 e0       	ldi	r25, 0x04	; 4
    4cda:	94 83       	std	Z+4, r25	; 0x04
    4cdc:	71 ce       	rjmp	.-798    	; 0x49c0 <_turn_off>
    4cde:	08 95       	ret

00004ce0 <status_leds_longPuls>:
    4ce0:	90 e0       	ldi	r25, 0x00	; 0
    4ce2:	fc 01       	movw	r30, r24
    4ce4:	ee 0f       	add	r30, r30
    4ce6:	ff 1f       	adc	r31, r31
    4ce8:	df 01       	movw	r26, r30
    4cea:	a8 0f       	add	r26, r24
    4cec:	b9 1f       	adc	r27, r25
    4cee:	aa 0f       	add	r26, r26
    4cf0:	bb 1f       	adc	r27, r27
    4cf2:	af 54       	subi	r26, 0x4F	; 79
    4cf4:	b9 4e       	sbci	r27, 0xE9	; 233
    4cf6:	24 e0       	ldi	r18, 0x04	; 4
    4cf8:	15 96       	adiw	r26, 0x05	; 5
    4cfa:	2c 93       	st	X, r18
    4cfc:	15 97       	sbiw	r26, 0x05	; 5
    4cfe:	fd 01       	movw	r30, r26
    4d00:	14 82       	std	Z+4, r1	; 0x04
    4d02:	08 95       	ret

00004d04 <status_leds_shortPuls>:
    4d04:	90 e0       	ldi	r25, 0x00	; 0
    4d06:	fc 01       	movw	r30, r24
    4d08:	ee 0f       	add	r30, r30
    4d0a:	ff 1f       	adc	r31, r31
    4d0c:	df 01       	movw	r26, r30
    4d0e:	a8 0f       	add	r26, r24
    4d10:	b9 1f       	adc	r27, r25
    4d12:	aa 0f       	add	r26, r26
    4d14:	bb 1f       	adc	r27, r27
    4d16:	af 54       	subi	r26, 0x4F	; 79
    4d18:	b9 4e       	sbci	r27, 0xE9	; 233
    4d1a:	21 e0       	ldi	r18, 0x01	; 1
    4d1c:	15 96       	adiw	r26, 0x05	; 5
    4d1e:	2c 93       	st	X, r18
    4d20:	15 97       	sbiw	r26, 0x05	; 5
    4d22:	fd 01       	movw	r30, r26
    4d24:	14 82       	std	Z+4, r1	; 0x04
    4d26:	08 95       	ret

00004d28 <_initTwiInterface>:
    4d28:	80 91 d7 16 	lds	r24, 0x16D7	; 0x8016d7 <_twiIsInitiated>
    4d2c:	81 11       	cpse	r24, r1
    4d2e:	0c c0       	rjmp	.+24     	; 0x4d48 <_initTwiInterface+0x20>
    4d30:	8c e0       	ldi	r24, 0x0C	; 12
    4d32:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4d36:	8f ef       	ldi	r24, 0xFF	; 255
    4d38:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4d3c:	84 e0       	ldi	r24, 0x04	; 4
    4d3e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4d42:	81 e0       	ldi	r24, 0x01	; 1
    4d44:	80 93 d7 16 	sts	0x16D7, r24	; 0x8016d7 <_twiIsInitiated>
    4d48:	08 95       	ret

00004d4a <twiCreate>:
    4d4a:	af 92       	push	r10
    4d4c:	bf 92       	push	r11
    4d4e:	cf 92       	push	r12
    4d50:	df 92       	push	r13
    4d52:	ef 92       	push	r14
    4d54:	ff 92       	push	r15
    4d56:	0f 93       	push	r16
    4d58:	1f 93       	push	r17
    4d5a:	cf 93       	push	r28
    4d5c:	df 93       	push	r29
    4d5e:	a8 2e       	mov	r10, r24
    4d60:	b6 2e       	mov	r11, r22
    4d62:	69 01       	movw	r12, r18
    4d64:	7a 01       	movw	r14, r20
    4d66:	84 e0       	ldi	r24, 0x04	; 4
    4d68:	90 e0       	ldi	r25, 0x00	; 0
    4d6a:	b1 d3       	rcall	.+1890   	; 0x54ce <malloc>
    4d6c:	ec 01       	movw	r28, r24
    4d6e:	89 2b       	or	r24, r25
    4d70:	61 f1       	breq	.+88     	; 0x4dca <twiCreate+0x80>
    4d72:	a8 82       	st	Y, r10
    4d74:	81 e0       	ldi	r24, 0x01	; 1
    4d76:	b8 12       	cpse	r11, r24
    4d78:	12 c0       	rjmp	.+36     	; 0x4d9e <twiCreate+0x54>
    4d7a:	c7 01       	movw	r24, r14
    4d7c:	b6 01       	movw	r22, r12
    4d7e:	20 ea       	ldi	r18, 0xA0	; 160
    4d80:	36 e8       	ldi	r19, 0x86	; 134
    4d82:	41 e0       	ldi	r20, 0x01	; 1
    4d84:	50 e0       	ldi	r21, 0x00	; 0
    4d86:	79 d3       	rcall	.+1778   	; 0x547a <__udivmodsi4>
    4d88:	da 01       	movw	r26, r20
    4d8a:	c9 01       	movw	r24, r18
    4d8c:	40 97       	sbiw	r24, 0x10	; 16
    4d8e:	a1 09       	sbc	r26, r1
    4d90:	b1 09       	sbc	r27, r1
    4d92:	b6 95       	lsr	r27
    4d94:	a7 95       	ror	r26
    4d96:	97 95       	ror	r25
    4d98:	87 95       	ror	r24
    4d9a:	89 83       	std	Y+1, r24	; 0x01
    4d9c:	11 c0       	rjmp	.+34     	; 0x4dc0 <twiCreate+0x76>
    4d9e:	c7 01       	movw	r24, r14
    4da0:	b6 01       	movw	r22, r12
    4da2:	20 e8       	ldi	r18, 0x80	; 128
    4da4:	3a e1       	ldi	r19, 0x1A	; 26
    4da6:	46 e0       	ldi	r20, 0x06	; 6
    4da8:	50 e0       	ldi	r21, 0x00	; 0
    4daa:	67 d3       	rcall	.+1742   	; 0x547a <__udivmodsi4>
    4dac:	da 01       	movw	r26, r20
    4dae:	c9 01       	movw	r24, r18
    4db0:	40 97       	sbiw	r24, 0x10	; 16
    4db2:	a1 09       	sbc	r26, r1
    4db4:	b1 09       	sbc	r27, r1
    4db6:	b6 95       	lsr	r27
    4db8:	a7 95       	ror	r26
    4dba:	97 95       	ror	r25
    4dbc:	87 95       	ror	r24
    4dbe:	89 83       	std	Y+1, r24	; 0x01
    4dc0:	1b 83       	std	Y+3, r17	; 0x03
    4dc2:	0a 83       	std	Y+2, r16	; 0x02
    4dc4:	8c 2f       	mov	r24, r28
    4dc6:	9d 2f       	mov	r25, r29
    4dc8:	02 c0       	rjmp	.+4      	; 0x4dce <twiCreate+0x84>
    4dca:	80 e0       	ldi	r24, 0x00	; 0
    4dcc:	90 e0       	ldi	r25, 0x00	; 0
    4dce:	df 91       	pop	r29
    4dd0:	cf 91       	pop	r28
    4dd2:	1f 91       	pop	r17
    4dd4:	0f 91       	pop	r16
    4dd6:	ff 90       	pop	r15
    4dd8:	ef 90       	pop	r14
    4dda:	df 90       	pop	r13
    4ddc:	cf 90       	pop	r12
    4dde:	bf 90       	pop	r11
    4de0:	af 90       	pop	r10
    4de2:	08 95       	ret

00004de4 <twiIsBusy>:
    4de4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4de8:	81 70       	andi	r24, 0x01	; 1
    4dea:	08 95       	ret

00004dec <twiTransmit>:
    4dec:	ff 92       	push	r15
    4dee:	0f 93       	push	r16
    4df0:	1f 93       	push	r17
    4df2:	cf 93       	push	r28
    4df4:	df 93       	push	r29
    4df6:	00 97       	sbiw	r24, 0x00	; 0
    4df8:	d1 f1       	breq	.+116    	; 0x4e6e <twiTransmit+0x82>
    4dfa:	4a 30       	cpi	r20, 0x0A	; 10
    4dfc:	d0 f5       	brcc	.+116    	; 0x4e72 <twiTransmit+0x86>
    4dfe:	f4 2e       	mov	r15, r20
    4e00:	8b 01       	movw	r16, r22
    4e02:	ec 01       	movw	r28, r24
    4e04:	ef df       	rcall	.-34     	; 0x4de4 <twiIsBusy>
    4e06:	81 11       	cpse	r24, r1
    4e08:	36 c0       	rjmp	.+108    	; 0x4e76 <twiTransmit+0x8a>
    4e0a:	80 91 ca 16 	lds	r24, 0x16CA	; 0x8016ca <_twiCurrentHandler>
    4e0e:	90 91 cb 16 	lds	r25, 0x16CB	; 0x8016cb <_twiCurrentHandler+0x1>
    4e12:	c8 17       	cp	r28, r24
    4e14:	d9 07       	cpc	r29, r25
    4e16:	41 f0       	breq	.+16     	; 0x4e28 <twiTransmit+0x3c>
    4e18:	87 df       	rcall	.-242    	; 0x4d28 <_initTwiInterface>
    4e1a:	89 81       	ldd	r24, Y+1	; 0x01
    4e1c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4e20:	d0 93 cb 16 	sts	0x16CB, r29	; 0x8016cb <_twiCurrentHandler+0x1>
    4e24:	c0 93 ca 16 	sts	0x16CA, r28	; 0x8016ca <_twiCurrentHandler>
    4e28:	81 e0       	ldi	r24, 0x01	; 1
    4e2a:	8f 0d       	add	r24, r15
    4e2c:	80 93 cc 16 	sts	0x16CC, r24	; 0x8016cc <_twiMessageLen>
    4e30:	88 81       	ld	r24, Y
    4e32:	88 0f       	add	r24, r24
    4e34:	80 93 cd 16 	sts	0x16CD, r24	; 0x8016cd <_twiMessageBuffer>
    4e38:	ff 20       	and	r15, r15
    4e3a:	89 f0       	breq	.+34     	; 0x4e5e <twiTransmit+0x72>
    4e3c:	f8 01       	movw	r30, r16
    4e3e:	ae ec       	ldi	r26, 0xCE	; 206
    4e40:	b6 e1       	ldi	r27, 0x16	; 22
    4e42:	4f ef       	ldi	r20, 0xFF	; 255
    4e44:	4f 0d       	add	r20, r15
    4e46:	64 2f       	mov	r22, r20
    4e48:	70 e0       	ldi	r23, 0x00	; 0
    4e4a:	cb 01       	movw	r24, r22
    4e4c:	01 96       	adiw	r24, 0x01	; 1
    4e4e:	b8 01       	movw	r22, r16
    4e50:	68 0f       	add	r22, r24
    4e52:	79 1f       	adc	r23, r25
    4e54:	81 91       	ld	r24, Z+
    4e56:	8d 93       	st	X+, r24
    4e58:	e6 17       	cp	r30, r22
    4e5a:	f7 07       	cpc	r31, r23
    4e5c:	d9 f7       	brne	.-10     	; 0x4e54 <twiTransmit+0x68>
    4e5e:	88 ef       	ldi	r24, 0xF8	; 248
    4e60:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4e64:	85 ea       	ldi	r24, 0xA5	; 165
    4e66:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4e6a:	84 e0       	ldi	r24, 0x04	; 4
    4e6c:	05 c0       	rjmp	.+10     	; 0x4e78 <twiTransmit+0x8c>
    4e6e:	86 e0       	ldi	r24, 0x06	; 6
    4e70:	03 c0       	rjmp	.+6      	; 0x4e78 <twiTransmit+0x8c>
    4e72:	87 e0       	ldi	r24, 0x07	; 7
    4e74:	01 c0       	rjmp	.+2      	; 0x4e78 <twiTransmit+0x8c>
    4e76:	82 e0       	ldi	r24, 0x02	; 2
    4e78:	df 91       	pop	r29
    4e7a:	cf 91       	pop	r28
    4e7c:	1f 91       	pop	r17
    4e7e:	0f 91       	pop	r16
    4e80:	ff 90       	pop	r15
    4e82:	08 95       	ret

00004e84 <twiReceive>:
    4e84:	1f 93       	push	r17
    4e86:	cf 93       	push	r28
    4e88:	df 93       	push	r29
    4e8a:	00 97       	sbiw	r24, 0x00	; 0
    4e8c:	29 f1       	breq	.+74     	; 0x4ed8 <twiReceive+0x54>
    4e8e:	6b 30       	cpi	r22, 0x0B	; 11
    4e90:	28 f5       	brcc	.+74     	; 0x4edc <twiReceive+0x58>
    4e92:	16 2f       	mov	r17, r22
    4e94:	ec 01       	movw	r28, r24
    4e96:	a6 df       	rcall	.-180    	; 0x4de4 <twiIsBusy>
    4e98:	81 11       	cpse	r24, r1
    4e9a:	22 c0       	rjmp	.+68     	; 0x4ee0 <twiReceive+0x5c>
    4e9c:	80 91 ca 16 	lds	r24, 0x16CA	; 0x8016ca <_twiCurrentHandler>
    4ea0:	90 91 cb 16 	lds	r25, 0x16CB	; 0x8016cb <_twiCurrentHandler+0x1>
    4ea4:	c8 17       	cp	r28, r24
    4ea6:	d9 07       	cpc	r29, r25
    4ea8:	41 f0       	breq	.+16     	; 0x4eba <twiReceive+0x36>
    4eaa:	3e df       	rcall	.-388    	; 0x4d28 <_initTwiInterface>
    4eac:	89 81       	ldd	r24, Y+1	; 0x01
    4eae:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4eb2:	d0 93 cb 16 	sts	0x16CB, r29	; 0x8016cb <_twiCurrentHandler+0x1>
    4eb6:	c0 93 ca 16 	sts	0x16CA, r28	; 0x8016ca <_twiCurrentHandler>
    4eba:	10 93 cc 16 	sts	0x16CC, r17	; 0x8016cc <_twiMessageLen>
    4ebe:	88 81       	ld	r24, Y
    4ec0:	88 0f       	add	r24, r24
    4ec2:	81 60       	ori	r24, 0x01	; 1
    4ec4:	80 93 cd 16 	sts	0x16CD, r24	; 0x8016cd <_twiMessageBuffer>
    4ec8:	88 ef       	ldi	r24, 0xF8	; 248
    4eca:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4ece:	85 ea       	ldi	r24, 0xA5	; 165
    4ed0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4ed4:	85 e0       	ldi	r24, 0x05	; 5
    4ed6:	05 c0       	rjmp	.+10     	; 0x4ee2 <twiReceive+0x5e>
    4ed8:	86 e0       	ldi	r24, 0x06	; 6
    4eda:	03 c0       	rjmp	.+6      	; 0x4ee2 <twiReceive+0x5e>
    4edc:	87 e0       	ldi	r24, 0x07	; 7
    4ede:	01 c0       	rjmp	.+2      	; 0x4ee2 <twiReceive+0x5e>
    4ee0:	82 e0       	ldi	r24, 0x02	; 2
    4ee2:	df 91       	pop	r29
    4ee4:	cf 91       	pop	r28
    4ee6:	1f 91       	pop	r17
    4ee8:	08 95       	ret

00004eea <__vector_39>:
    4eea:	1f 92       	push	r1
    4eec:	0f 92       	push	r0
    4eee:	0f b6       	in	r0, 0x3f	; 63
    4ef0:	0f 92       	push	r0
    4ef2:	11 24       	eor	r1, r1
    4ef4:	0b b6       	in	r0, 0x3b	; 59
    4ef6:	0f 92       	push	r0
    4ef8:	2f 93       	push	r18
    4efa:	3f 93       	push	r19
    4efc:	4f 93       	push	r20
    4efe:	5f 93       	push	r21
    4f00:	6f 93       	push	r22
    4f02:	7f 93       	push	r23
    4f04:	8f 93       	push	r24
    4f06:	9f 93       	push	r25
    4f08:	af 93       	push	r26
    4f0a:	bf 93       	push	r27
    4f0c:	ef 93       	push	r30
    4f0e:	ff 93       	push	r31
    4f10:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4f14:	8e 2f       	mov	r24, r30
    4f16:	90 e0       	ldi	r25, 0x00	; 0
    4f18:	fc 01       	movw	r30, r24
    4f1a:	38 97       	sbiw	r30, 0x08	; 8
    4f1c:	e1 35       	cpi	r30, 0x51	; 81
    4f1e:	f1 05       	cpc	r31, r1
    4f20:	08 f0       	brcs	.+2      	; 0x4f24 <__vector_39+0x3a>
    4f22:	75 c0       	rjmp	.+234    	; 0x500e <__vector_39+0x124>
    4f24:	88 27       	eor	r24, r24
    4f26:	e4 58       	subi	r30, 0x84	; 132
    4f28:	ff 4f       	sbci	r31, 0xFF	; 255
    4f2a:	8f 4f       	sbci	r24, 0xFF	; 255
    4f2c:	c8 c2       	rjmp	.+1424   	; 0x54be <__tablejump2__>
    4f2e:	10 92 c9 16 	sts	0x16C9, r1	; 0x8016c9 <_index.1885>
    4f32:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <_index.1885>
    4f36:	80 91 cc 16 	lds	r24, 0x16CC	; 0x8016cc <_twiMessageLen>
    4f3a:	e8 17       	cp	r30, r24
    4f3c:	70 f4       	brcc	.+28     	; 0x4f5a <__vector_39+0x70>
    4f3e:	81 e0       	ldi	r24, 0x01	; 1
    4f40:	8e 0f       	add	r24, r30
    4f42:	80 93 c9 16 	sts	0x16C9, r24	; 0x8016c9 <_index.1885>
    4f46:	f0 e0       	ldi	r31, 0x00	; 0
    4f48:	e3 53       	subi	r30, 0x33	; 51
    4f4a:	f9 4e       	sbci	r31, 0xE9	; 233
    4f4c:	80 81       	ld	r24, Z
    4f4e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4f52:	85 e8       	ldi	r24, 0x85	; 133
    4f54:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f58:	72 c0       	rjmp	.+228    	; 0x503e <__vector_39+0x154>
    4f5a:	84 e9       	ldi	r24, 0x94	; 148
    4f5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f60:	80 91 ca 16 	lds	r24, 0x16CA	; 0x8016ca <_twiCurrentHandler>
    4f64:	90 91 cb 16 	lds	r25, 0x16CB	; 0x8016cb <_twiCurrentHandler+0x1>
    4f68:	dc 01       	movw	r26, r24
    4f6a:	12 96       	adiw	r26, 0x02	; 2
    4f6c:	ed 91       	ld	r30, X+
    4f6e:	fc 91       	ld	r31, X
    4f70:	13 97       	sbiw	r26, 0x03	; 3
    4f72:	30 97       	sbiw	r30, 0x00	; 0
    4f74:	09 f4       	brne	.+2      	; 0x4f78 <__vector_39+0x8e>
    4f76:	63 c0       	rjmp	.+198    	; 0x503e <__vector_39+0x154>
    4f78:	20 e0       	ldi	r18, 0x00	; 0
    4f7a:	40 e0       	ldi	r20, 0x00	; 0
    4f7c:	50 e0       	ldi	r21, 0x00	; 0
    4f7e:	64 e0       	ldi	r22, 0x04	; 4
    4f80:	19 95       	eicall
    4f82:	5d c0       	rjmp	.+186    	; 0x503e <__vector_39+0x154>
    4f84:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <_index.1885>
    4f88:	81 e0       	ldi	r24, 0x01	; 1
    4f8a:	8e 0f       	add	r24, r30
    4f8c:	80 93 c9 16 	sts	0x16C9, r24	; 0x8016c9 <_index.1885>
    4f90:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4f94:	f0 e0       	ldi	r31, 0x00	; 0
    4f96:	e3 53       	subi	r30, 0x33	; 51
    4f98:	f9 4e       	sbci	r31, 0xE9	; 233
    4f9a:	80 83       	st	Z, r24
    4f9c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4fa0:	80 34       	cpi	r24, 0x40	; 64
    4fa2:	11 f4       	brne	.+4      	; 0x4fa8 <__vector_39+0xbe>
    4fa4:	10 92 c9 16 	sts	0x16C9, r1	; 0x8016c9 <_index.1885>
    4fa8:	20 91 c9 16 	lds	r18, 0x16C9	; 0x8016c9 <_index.1885>
    4fac:	30 e0       	ldi	r19, 0x00	; 0
    4fae:	80 91 cc 16 	lds	r24, 0x16CC	; 0x8016cc <_twiMessageLen>
    4fb2:	90 e0       	ldi	r25, 0x00	; 0
    4fb4:	01 97       	sbiw	r24, 0x01	; 1
    4fb6:	28 17       	cp	r18, r24
    4fb8:	39 07       	cpc	r19, r25
    4fba:	24 f4       	brge	.+8      	; 0x4fc4 <__vector_39+0xda>
    4fbc:	85 ec       	ldi	r24, 0xC5	; 197
    4fbe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4fc2:	3d c0       	rjmp	.+122    	; 0x503e <__vector_39+0x154>
    4fc4:	85 e8       	ldi	r24, 0x85	; 133
    4fc6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4fca:	39 c0       	rjmp	.+114    	; 0x503e <__vector_39+0x154>
    4fcc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4fd0:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <_index.1885>
    4fd4:	f0 e0       	ldi	r31, 0x00	; 0
    4fd6:	e3 53       	subi	r30, 0x33	; 51
    4fd8:	f9 4e       	sbci	r31, 0xE9	; 233
    4fda:	80 83       	st	Z, r24
    4fdc:	84 e9       	ldi	r24, 0x94	; 148
    4fde:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4fe2:	80 91 ca 16 	lds	r24, 0x16CA	; 0x8016ca <_twiCurrentHandler>
    4fe6:	90 91 cb 16 	lds	r25, 0x16CB	; 0x8016cb <_twiCurrentHandler+0x1>
    4fea:	dc 01       	movw	r26, r24
    4fec:	12 96       	adiw	r26, 0x02	; 2
    4fee:	ed 91       	ld	r30, X+
    4ff0:	fc 91       	ld	r31, X
    4ff2:	13 97       	sbiw	r26, 0x03	; 3
    4ff4:	30 97       	sbiw	r30, 0x00	; 0
    4ff6:	19 f1       	breq	.+70     	; 0x503e <__vector_39+0x154>
    4ff8:	20 91 cc 16 	lds	r18, 0x16CC	; 0x8016cc <_twiMessageLen>
    4ffc:	4d ec       	ldi	r20, 0xCD	; 205
    4ffe:	56 e1       	ldi	r21, 0x16	; 22
    5000:	65 e0       	ldi	r22, 0x05	; 5
    5002:	19 95       	eicall
    5004:	1c c0       	rjmp	.+56     	; 0x503e <__vector_39+0x154>
    5006:	85 ea       	ldi	r24, 0xA5	; 165
    5008:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    500c:	18 c0       	rjmp	.+48     	; 0x503e <__vector_39+0x154>
    500e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5012:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5016:	84 e0       	ldi	r24, 0x04	; 4
    5018:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    501c:	80 91 ca 16 	lds	r24, 0x16CA	; 0x8016ca <_twiCurrentHandler>
    5020:	90 91 cb 16 	lds	r25, 0x16CB	; 0x8016cb <_twiCurrentHandler+0x1>
    5024:	dc 01       	movw	r26, r24
    5026:	12 96       	adiw	r26, 0x02	; 2
    5028:	ed 91       	ld	r30, X+
    502a:	fc 91       	ld	r31, X
    502c:	13 97       	sbiw	r26, 0x03	; 3
    502e:	30 97       	sbiw	r30, 0x00	; 0
    5030:	31 f0       	breq	.+12     	; 0x503e <__vector_39+0x154>
    5032:	20 e0       	ldi	r18, 0x00	; 0
    5034:	40 e0       	ldi	r20, 0x00	; 0
    5036:	50 e0       	ldi	r21, 0x00	; 0
    5038:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    503c:	19 95       	eicall
    503e:	ff 91       	pop	r31
    5040:	ef 91       	pop	r30
    5042:	bf 91       	pop	r27
    5044:	af 91       	pop	r26
    5046:	9f 91       	pop	r25
    5048:	8f 91       	pop	r24
    504a:	7f 91       	pop	r23
    504c:	6f 91       	pop	r22
    504e:	5f 91       	pop	r21
    5050:	4f 91       	pop	r20
    5052:	3f 91       	pop	r19
    5054:	2f 91       	pop	r18
    5056:	0f 90       	pop	r0
    5058:	0b be       	out	0x3b, r0	; 59
    505a:	0f 90       	pop	r0
    505c:	0f be       	out	0x3f, r0	; 63
    505e:	0f 90       	pop	r0
    5060:	1f 90       	pop	r1
    5062:	18 95       	reti

00005064 <fifo_init>:
    5064:	fc 01       	movw	r30, r24
    5066:	41 11       	cpse	r20, r1
    5068:	01 c0       	rjmp	.+2      	; 0x506c <fifo_init+0x8>
    506a:	52 d3       	rcall	.+1700   	; 0x5710 <abort>
    506c:	84 2f       	mov	r24, r20
    506e:	90 e0       	ldi	r25, 0x00	; 0
    5070:	9c 01       	movw	r18, r24
    5072:	21 50       	subi	r18, 0x01	; 1
    5074:	31 09       	sbc	r19, r1
    5076:	82 23       	and	r24, r18
    5078:	93 23       	and	r25, r19
    507a:	89 2b       	or	r24, r25
    507c:	09 f0       	breq	.+2      	; 0x5080 <fifo_init+0x1c>
    507e:	48 d3       	rcall	.+1680   	; 0x5710 <abort>
    5080:	41 38       	cpi	r20, 0x81	; 129
    5082:	08 f0       	brcs	.+2      	; 0x5086 <fifo_init+0x22>
    5084:	45 d3       	rcall	.+1674   	; 0x5710 <abort>
    5086:	12 82       	std	Z+2, r1	; 0x02
    5088:	13 82       	std	Z+3, r1	; 0x03
    508a:	44 83       	std	Z+4, r20	; 0x04
    508c:	44 0f       	add	r20, r20
    508e:	41 50       	subi	r20, 0x01	; 1
    5090:	45 83       	std	Z+5, r20	; 0x05
    5092:	71 83       	std	Z+1, r23	; 0x01
    5094:	60 83       	st	Z, r22
    5096:	80 e0       	ldi	r24, 0x00	; 0
    5098:	90 e0       	ldi	r25, 0x00	; 0
    509a:	08 95       	ret

0000509c <__subsf3>:
    509c:	50 58       	subi	r21, 0x80	; 128

0000509e <__addsf3>:
    509e:	bb 27       	eor	r27, r27
    50a0:	aa 27       	eor	r26, r26
    50a2:	0e d0       	rcall	.+28     	; 0x50c0 <__addsf3x>
    50a4:	4d c1       	rjmp	.+666    	; 0x5340 <__fp_round>
    50a6:	3e d1       	rcall	.+636    	; 0x5324 <__fp_pscA>
    50a8:	30 f0       	brcs	.+12     	; 0x50b6 <__addsf3+0x18>
    50aa:	43 d1       	rcall	.+646    	; 0x5332 <__fp_pscB>
    50ac:	20 f0       	brcs	.+8      	; 0x50b6 <__addsf3+0x18>
    50ae:	31 f4       	brne	.+12     	; 0x50bc <__addsf3+0x1e>
    50b0:	9f 3f       	cpi	r25, 0xFF	; 255
    50b2:	11 f4       	brne	.+4      	; 0x50b8 <__addsf3+0x1a>
    50b4:	1e f4       	brtc	.+6      	; 0x50bc <__addsf3+0x1e>
    50b6:	33 c1       	rjmp	.+614    	; 0x531e <__fp_nan>
    50b8:	0e f4       	brtc	.+2      	; 0x50bc <__addsf3+0x1e>
    50ba:	e0 95       	com	r30
    50bc:	e7 fb       	bst	r30, 7
    50be:	29 c1       	rjmp	.+594    	; 0x5312 <__fp_inf>

000050c0 <__addsf3x>:
    50c0:	e9 2f       	mov	r30, r25
    50c2:	4f d1       	rcall	.+670    	; 0x5362 <__fp_split3>
    50c4:	80 f3       	brcs	.-32     	; 0x50a6 <__addsf3+0x8>
    50c6:	ba 17       	cp	r27, r26
    50c8:	62 07       	cpc	r22, r18
    50ca:	73 07       	cpc	r23, r19
    50cc:	84 07       	cpc	r24, r20
    50ce:	95 07       	cpc	r25, r21
    50d0:	18 f0       	brcs	.+6      	; 0x50d8 <__addsf3x+0x18>
    50d2:	71 f4       	brne	.+28     	; 0x50f0 <__addsf3x+0x30>
    50d4:	9e f5       	brtc	.+102    	; 0x513c <__addsf3x+0x7c>
    50d6:	67 c1       	rjmp	.+718    	; 0x53a6 <__fp_zero>
    50d8:	0e f4       	brtc	.+2      	; 0x50dc <__addsf3x+0x1c>
    50da:	e0 95       	com	r30
    50dc:	0b 2e       	mov	r0, r27
    50de:	ba 2f       	mov	r27, r26
    50e0:	a0 2d       	mov	r26, r0
    50e2:	0b 01       	movw	r0, r22
    50e4:	b9 01       	movw	r22, r18
    50e6:	90 01       	movw	r18, r0
    50e8:	0c 01       	movw	r0, r24
    50ea:	ca 01       	movw	r24, r20
    50ec:	a0 01       	movw	r20, r0
    50ee:	11 24       	eor	r1, r1
    50f0:	ff 27       	eor	r31, r31
    50f2:	59 1b       	sub	r21, r25
    50f4:	99 f0       	breq	.+38     	; 0x511c <__addsf3x+0x5c>
    50f6:	59 3f       	cpi	r21, 0xF9	; 249
    50f8:	50 f4       	brcc	.+20     	; 0x510e <__addsf3x+0x4e>
    50fa:	50 3e       	cpi	r21, 0xE0	; 224
    50fc:	68 f1       	brcs	.+90     	; 0x5158 <__addsf3x+0x98>
    50fe:	1a 16       	cp	r1, r26
    5100:	f0 40       	sbci	r31, 0x00	; 0
    5102:	a2 2f       	mov	r26, r18
    5104:	23 2f       	mov	r18, r19
    5106:	34 2f       	mov	r19, r20
    5108:	44 27       	eor	r20, r20
    510a:	58 5f       	subi	r21, 0xF8	; 248
    510c:	f3 cf       	rjmp	.-26     	; 0x50f4 <__addsf3x+0x34>
    510e:	46 95       	lsr	r20
    5110:	37 95       	ror	r19
    5112:	27 95       	ror	r18
    5114:	a7 95       	ror	r26
    5116:	f0 40       	sbci	r31, 0x00	; 0
    5118:	53 95       	inc	r21
    511a:	c9 f7       	brne	.-14     	; 0x510e <__addsf3x+0x4e>
    511c:	7e f4       	brtc	.+30     	; 0x513c <__addsf3x+0x7c>
    511e:	1f 16       	cp	r1, r31
    5120:	ba 0b       	sbc	r27, r26
    5122:	62 0b       	sbc	r22, r18
    5124:	73 0b       	sbc	r23, r19
    5126:	84 0b       	sbc	r24, r20
    5128:	ba f0       	brmi	.+46     	; 0x5158 <__addsf3x+0x98>
    512a:	91 50       	subi	r25, 0x01	; 1
    512c:	a1 f0       	breq	.+40     	; 0x5156 <__addsf3x+0x96>
    512e:	ff 0f       	add	r31, r31
    5130:	bb 1f       	adc	r27, r27
    5132:	66 1f       	adc	r22, r22
    5134:	77 1f       	adc	r23, r23
    5136:	88 1f       	adc	r24, r24
    5138:	c2 f7       	brpl	.-16     	; 0x512a <__addsf3x+0x6a>
    513a:	0e c0       	rjmp	.+28     	; 0x5158 <__addsf3x+0x98>
    513c:	ba 0f       	add	r27, r26
    513e:	62 1f       	adc	r22, r18
    5140:	73 1f       	adc	r23, r19
    5142:	84 1f       	adc	r24, r20
    5144:	48 f4       	brcc	.+18     	; 0x5158 <__addsf3x+0x98>
    5146:	87 95       	ror	r24
    5148:	77 95       	ror	r23
    514a:	67 95       	ror	r22
    514c:	b7 95       	ror	r27
    514e:	f7 95       	ror	r31
    5150:	9e 3f       	cpi	r25, 0xFE	; 254
    5152:	08 f0       	brcs	.+2      	; 0x5156 <__addsf3x+0x96>
    5154:	b3 cf       	rjmp	.-154    	; 0x50bc <__addsf3+0x1e>
    5156:	93 95       	inc	r25
    5158:	88 0f       	add	r24, r24
    515a:	08 f0       	brcs	.+2      	; 0x515e <__addsf3x+0x9e>
    515c:	99 27       	eor	r25, r25
    515e:	ee 0f       	add	r30, r30
    5160:	97 95       	ror	r25
    5162:	87 95       	ror	r24
    5164:	08 95       	ret

00005166 <__divsf3>:
    5166:	0c d0       	rcall	.+24     	; 0x5180 <__divsf3x>
    5168:	eb c0       	rjmp	.+470    	; 0x5340 <__fp_round>
    516a:	e3 d0       	rcall	.+454    	; 0x5332 <__fp_pscB>
    516c:	40 f0       	brcs	.+16     	; 0x517e <__divsf3+0x18>
    516e:	da d0       	rcall	.+436    	; 0x5324 <__fp_pscA>
    5170:	30 f0       	brcs	.+12     	; 0x517e <__divsf3+0x18>
    5172:	21 f4       	brne	.+8      	; 0x517c <__divsf3+0x16>
    5174:	5f 3f       	cpi	r21, 0xFF	; 255
    5176:	19 f0       	breq	.+6      	; 0x517e <__divsf3+0x18>
    5178:	cc c0       	rjmp	.+408    	; 0x5312 <__fp_inf>
    517a:	51 11       	cpse	r21, r1
    517c:	15 c1       	rjmp	.+554    	; 0x53a8 <__fp_szero>
    517e:	cf c0       	rjmp	.+414    	; 0x531e <__fp_nan>

00005180 <__divsf3x>:
    5180:	f0 d0       	rcall	.+480    	; 0x5362 <__fp_split3>
    5182:	98 f3       	brcs	.-26     	; 0x516a <__divsf3+0x4>

00005184 <__divsf3_pse>:
    5184:	99 23       	and	r25, r25
    5186:	c9 f3       	breq	.-14     	; 0x517a <__divsf3+0x14>
    5188:	55 23       	and	r21, r21
    518a:	b1 f3       	breq	.-20     	; 0x5178 <__divsf3+0x12>
    518c:	95 1b       	sub	r25, r21
    518e:	55 0b       	sbc	r21, r21
    5190:	bb 27       	eor	r27, r27
    5192:	aa 27       	eor	r26, r26
    5194:	62 17       	cp	r22, r18
    5196:	73 07       	cpc	r23, r19
    5198:	84 07       	cpc	r24, r20
    519a:	38 f0       	brcs	.+14     	; 0x51aa <__divsf3_pse+0x26>
    519c:	9f 5f       	subi	r25, 0xFF	; 255
    519e:	5f 4f       	sbci	r21, 0xFF	; 255
    51a0:	22 0f       	add	r18, r18
    51a2:	33 1f       	adc	r19, r19
    51a4:	44 1f       	adc	r20, r20
    51a6:	aa 1f       	adc	r26, r26
    51a8:	a9 f3       	breq	.-22     	; 0x5194 <__divsf3_pse+0x10>
    51aa:	33 d0       	rcall	.+102    	; 0x5212 <__divsf3_pse+0x8e>
    51ac:	0e 2e       	mov	r0, r30
    51ae:	3a f0       	brmi	.+14     	; 0x51be <__divsf3_pse+0x3a>
    51b0:	e0 e8       	ldi	r30, 0x80	; 128
    51b2:	30 d0       	rcall	.+96     	; 0x5214 <__divsf3_pse+0x90>
    51b4:	91 50       	subi	r25, 0x01	; 1
    51b6:	50 40       	sbci	r21, 0x00	; 0
    51b8:	e6 95       	lsr	r30
    51ba:	00 1c       	adc	r0, r0
    51bc:	ca f7       	brpl	.-14     	; 0x51b0 <__divsf3_pse+0x2c>
    51be:	29 d0       	rcall	.+82     	; 0x5212 <__divsf3_pse+0x8e>
    51c0:	fe 2f       	mov	r31, r30
    51c2:	27 d0       	rcall	.+78     	; 0x5212 <__divsf3_pse+0x8e>
    51c4:	66 0f       	add	r22, r22
    51c6:	77 1f       	adc	r23, r23
    51c8:	88 1f       	adc	r24, r24
    51ca:	bb 1f       	adc	r27, r27
    51cc:	26 17       	cp	r18, r22
    51ce:	37 07       	cpc	r19, r23
    51d0:	48 07       	cpc	r20, r24
    51d2:	ab 07       	cpc	r26, r27
    51d4:	b0 e8       	ldi	r27, 0x80	; 128
    51d6:	09 f0       	breq	.+2      	; 0x51da <__divsf3_pse+0x56>
    51d8:	bb 0b       	sbc	r27, r27
    51da:	80 2d       	mov	r24, r0
    51dc:	bf 01       	movw	r22, r30
    51de:	ff 27       	eor	r31, r31
    51e0:	93 58       	subi	r25, 0x83	; 131
    51e2:	5f 4f       	sbci	r21, 0xFF	; 255
    51e4:	2a f0       	brmi	.+10     	; 0x51f0 <__divsf3_pse+0x6c>
    51e6:	9e 3f       	cpi	r25, 0xFE	; 254
    51e8:	51 05       	cpc	r21, r1
    51ea:	68 f0       	brcs	.+26     	; 0x5206 <__divsf3_pse+0x82>
    51ec:	92 c0       	rjmp	.+292    	; 0x5312 <__fp_inf>
    51ee:	dc c0       	rjmp	.+440    	; 0x53a8 <__fp_szero>
    51f0:	5f 3f       	cpi	r21, 0xFF	; 255
    51f2:	ec f3       	brlt	.-6      	; 0x51ee <__divsf3_pse+0x6a>
    51f4:	98 3e       	cpi	r25, 0xE8	; 232
    51f6:	dc f3       	brlt	.-10     	; 0x51ee <__divsf3_pse+0x6a>
    51f8:	86 95       	lsr	r24
    51fa:	77 95       	ror	r23
    51fc:	67 95       	ror	r22
    51fe:	b7 95       	ror	r27
    5200:	f7 95       	ror	r31
    5202:	9f 5f       	subi	r25, 0xFF	; 255
    5204:	c9 f7       	brne	.-14     	; 0x51f8 <__divsf3_pse+0x74>
    5206:	88 0f       	add	r24, r24
    5208:	91 1d       	adc	r25, r1
    520a:	96 95       	lsr	r25
    520c:	87 95       	ror	r24
    520e:	97 f9       	bld	r25, 7
    5210:	08 95       	ret
    5212:	e1 e0       	ldi	r30, 0x01	; 1
    5214:	66 0f       	add	r22, r22
    5216:	77 1f       	adc	r23, r23
    5218:	88 1f       	adc	r24, r24
    521a:	bb 1f       	adc	r27, r27
    521c:	62 17       	cp	r22, r18
    521e:	73 07       	cpc	r23, r19
    5220:	84 07       	cpc	r24, r20
    5222:	ba 07       	cpc	r27, r26
    5224:	20 f0       	brcs	.+8      	; 0x522e <__divsf3_pse+0xaa>
    5226:	62 1b       	sub	r22, r18
    5228:	73 0b       	sbc	r23, r19
    522a:	84 0b       	sbc	r24, r20
    522c:	ba 0b       	sbc	r27, r26
    522e:	ee 1f       	adc	r30, r30
    5230:	88 f7       	brcc	.-30     	; 0x5214 <__divsf3_pse+0x90>
    5232:	e0 95       	com	r30
    5234:	08 95       	ret

00005236 <__fixsfsi>:
    5236:	04 d0       	rcall	.+8      	; 0x5240 <__fixunssfsi>
    5238:	68 94       	set
    523a:	b1 11       	cpse	r27, r1
    523c:	b5 c0       	rjmp	.+362    	; 0x53a8 <__fp_szero>
    523e:	08 95       	ret

00005240 <__fixunssfsi>:
    5240:	98 d0       	rcall	.+304    	; 0x5372 <__fp_splitA>
    5242:	88 f0       	brcs	.+34     	; 0x5266 <__fixunssfsi+0x26>
    5244:	9f 57       	subi	r25, 0x7F	; 127
    5246:	90 f0       	brcs	.+36     	; 0x526c <__fixunssfsi+0x2c>
    5248:	b9 2f       	mov	r27, r25
    524a:	99 27       	eor	r25, r25
    524c:	b7 51       	subi	r27, 0x17	; 23
    524e:	a0 f0       	brcs	.+40     	; 0x5278 <__fixunssfsi+0x38>
    5250:	d1 f0       	breq	.+52     	; 0x5286 <__fixunssfsi+0x46>
    5252:	66 0f       	add	r22, r22
    5254:	77 1f       	adc	r23, r23
    5256:	88 1f       	adc	r24, r24
    5258:	99 1f       	adc	r25, r25
    525a:	1a f0       	brmi	.+6      	; 0x5262 <__fixunssfsi+0x22>
    525c:	ba 95       	dec	r27
    525e:	c9 f7       	brne	.-14     	; 0x5252 <__fixunssfsi+0x12>
    5260:	12 c0       	rjmp	.+36     	; 0x5286 <__fixunssfsi+0x46>
    5262:	b1 30       	cpi	r27, 0x01	; 1
    5264:	81 f0       	breq	.+32     	; 0x5286 <__fixunssfsi+0x46>
    5266:	9f d0       	rcall	.+318    	; 0x53a6 <__fp_zero>
    5268:	b1 e0       	ldi	r27, 0x01	; 1
    526a:	08 95       	ret
    526c:	9c c0       	rjmp	.+312    	; 0x53a6 <__fp_zero>
    526e:	67 2f       	mov	r22, r23
    5270:	78 2f       	mov	r23, r24
    5272:	88 27       	eor	r24, r24
    5274:	b8 5f       	subi	r27, 0xF8	; 248
    5276:	39 f0       	breq	.+14     	; 0x5286 <__fixunssfsi+0x46>
    5278:	b9 3f       	cpi	r27, 0xF9	; 249
    527a:	cc f3       	brlt	.-14     	; 0x526e <__fixunssfsi+0x2e>
    527c:	86 95       	lsr	r24
    527e:	77 95       	ror	r23
    5280:	67 95       	ror	r22
    5282:	b3 95       	inc	r27
    5284:	d9 f7       	brne	.-10     	; 0x527c <__fixunssfsi+0x3c>
    5286:	3e f4       	brtc	.+14     	; 0x5296 <__fixunssfsi+0x56>
    5288:	90 95       	com	r25
    528a:	80 95       	com	r24
    528c:	70 95       	com	r23
    528e:	61 95       	neg	r22
    5290:	7f 4f       	sbci	r23, 0xFF	; 255
    5292:	8f 4f       	sbci	r24, 0xFF	; 255
    5294:	9f 4f       	sbci	r25, 0xFF	; 255
    5296:	08 95       	ret

00005298 <__floatunsisf>:
    5298:	e8 94       	clt
    529a:	09 c0       	rjmp	.+18     	; 0x52ae <__floatsisf+0x12>

0000529c <__floatsisf>:
    529c:	97 fb       	bst	r25, 7
    529e:	3e f4       	brtc	.+14     	; 0x52ae <__floatsisf+0x12>
    52a0:	90 95       	com	r25
    52a2:	80 95       	com	r24
    52a4:	70 95       	com	r23
    52a6:	61 95       	neg	r22
    52a8:	7f 4f       	sbci	r23, 0xFF	; 255
    52aa:	8f 4f       	sbci	r24, 0xFF	; 255
    52ac:	9f 4f       	sbci	r25, 0xFF	; 255
    52ae:	99 23       	and	r25, r25
    52b0:	a9 f0       	breq	.+42     	; 0x52dc <__floatsisf+0x40>
    52b2:	f9 2f       	mov	r31, r25
    52b4:	96 e9       	ldi	r25, 0x96	; 150
    52b6:	bb 27       	eor	r27, r27
    52b8:	93 95       	inc	r25
    52ba:	f6 95       	lsr	r31
    52bc:	87 95       	ror	r24
    52be:	77 95       	ror	r23
    52c0:	67 95       	ror	r22
    52c2:	b7 95       	ror	r27
    52c4:	f1 11       	cpse	r31, r1
    52c6:	f8 cf       	rjmp	.-16     	; 0x52b8 <__floatsisf+0x1c>
    52c8:	fa f4       	brpl	.+62     	; 0x5308 <__floatsisf+0x6c>
    52ca:	bb 0f       	add	r27, r27
    52cc:	11 f4       	brne	.+4      	; 0x52d2 <__floatsisf+0x36>
    52ce:	60 ff       	sbrs	r22, 0
    52d0:	1b c0       	rjmp	.+54     	; 0x5308 <__floatsisf+0x6c>
    52d2:	6f 5f       	subi	r22, 0xFF	; 255
    52d4:	7f 4f       	sbci	r23, 0xFF	; 255
    52d6:	8f 4f       	sbci	r24, 0xFF	; 255
    52d8:	9f 4f       	sbci	r25, 0xFF	; 255
    52da:	16 c0       	rjmp	.+44     	; 0x5308 <__floatsisf+0x6c>
    52dc:	88 23       	and	r24, r24
    52de:	11 f0       	breq	.+4      	; 0x52e4 <__floatsisf+0x48>
    52e0:	96 e9       	ldi	r25, 0x96	; 150
    52e2:	11 c0       	rjmp	.+34     	; 0x5306 <__floatsisf+0x6a>
    52e4:	77 23       	and	r23, r23
    52e6:	21 f0       	breq	.+8      	; 0x52f0 <__floatsisf+0x54>
    52e8:	9e e8       	ldi	r25, 0x8E	; 142
    52ea:	87 2f       	mov	r24, r23
    52ec:	76 2f       	mov	r23, r22
    52ee:	05 c0       	rjmp	.+10     	; 0x52fa <__floatsisf+0x5e>
    52f0:	66 23       	and	r22, r22
    52f2:	71 f0       	breq	.+28     	; 0x5310 <__floatsisf+0x74>
    52f4:	96 e8       	ldi	r25, 0x86	; 134
    52f6:	86 2f       	mov	r24, r22
    52f8:	70 e0       	ldi	r23, 0x00	; 0
    52fa:	60 e0       	ldi	r22, 0x00	; 0
    52fc:	2a f0       	brmi	.+10     	; 0x5308 <__floatsisf+0x6c>
    52fe:	9a 95       	dec	r25
    5300:	66 0f       	add	r22, r22
    5302:	77 1f       	adc	r23, r23
    5304:	88 1f       	adc	r24, r24
    5306:	da f7       	brpl	.-10     	; 0x52fe <__floatsisf+0x62>
    5308:	88 0f       	add	r24, r24
    530a:	96 95       	lsr	r25
    530c:	87 95       	ror	r24
    530e:	97 f9       	bld	r25, 7
    5310:	08 95       	ret

00005312 <__fp_inf>:
    5312:	97 f9       	bld	r25, 7
    5314:	9f 67       	ori	r25, 0x7F	; 127
    5316:	80 e8       	ldi	r24, 0x80	; 128
    5318:	70 e0       	ldi	r23, 0x00	; 0
    531a:	60 e0       	ldi	r22, 0x00	; 0
    531c:	08 95       	ret

0000531e <__fp_nan>:
    531e:	9f ef       	ldi	r25, 0xFF	; 255
    5320:	80 ec       	ldi	r24, 0xC0	; 192
    5322:	08 95       	ret

00005324 <__fp_pscA>:
    5324:	00 24       	eor	r0, r0
    5326:	0a 94       	dec	r0
    5328:	16 16       	cp	r1, r22
    532a:	17 06       	cpc	r1, r23
    532c:	18 06       	cpc	r1, r24
    532e:	09 06       	cpc	r0, r25
    5330:	08 95       	ret

00005332 <__fp_pscB>:
    5332:	00 24       	eor	r0, r0
    5334:	0a 94       	dec	r0
    5336:	12 16       	cp	r1, r18
    5338:	13 06       	cpc	r1, r19
    533a:	14 06       	cpc	r1, r20
    533c:	05 06       	cpc	r0, r21
    533e:	08 95       	ret

00005340 <__fp_round>:
    5340:	09 2e       	mov	r0, r25
    5342:	03 94       	inc	r0
    5344:	00 0c       	add	r0, r0
    5346:	11 f4       	brne	.+4      	; 0x534c <__fp_round+0xc>
    5348:	88 23       	and	r24, r24
    534a:	52 f0       	brmi	.+20     	; 0x5360 <__fp_round+0x20>
    534c:	bb 0f       	add	r27, r27
    534e:	40 f4       	brcc	.+16     	; 0x5360 <__fp_round+0x20>
    5350:	bf 2b       	or	r27, r31
    5352:	11 f4       	brne	.+4      	; 0x5358 <__fp_round+0x18>
    5354:	60 ff       	sbrs	r22, 0
    5356:	04 c0       	rjmp	.+8      	; 0x5360 <__fp_round+0x20>
    5358:	6f 5f       	subi	r22, 0xFF	; 255
    535a:	7f 4f       	sbci	r23, 0xFF	; 255
    535c:	8f 4f       	sbci	r24, 0xFF	; 255
    535e:	9f 4f       	sbci	r25, 0xFF	; 255
    5360:	08 95       	ret

00005362 <__fp_split3>:
    5362:	57 fd       	sbrc	r21, 7
    5364:	90 58       	subi	r25, 0x80	; 128
    5366:	44 0f       	add	r20, r20
    5368:	55 1f       	adc	r21, r21
    536a:	59 f0       	breq	.+22     	; 0x5382 <__fp_splitA+0x10>
    536c:	5f 3f       	cpi	r21, 0xFF	; 255
    536e:	71 f0       	breq	.+28     	; 0x538c <__fp_splitA+0x1a>
    5370:	47 95       	ror	r20

00005372 <__fp_splitA>:
    5372:	88 0f       	add	r24, r24
    5374:	97 fb       	bst	r25, 7
    5376:	99 1f       	adc	r25, r25
    5378:	61 f0       	breq	.+24     	; 0x5392 <__fp_splitA+0x20>
    537a:	9f 3f       	cpi	r25, 0xFF	; 255
    537c:	79 f0       	breq	.+30     	; 0x539c <__fp_splitA+0x2a>
    537e:	87 95       	ror	r24
    5380:	08 95       	ret
    5382:	12 16       	cp	r1, r18
    5384:	13 06       	cpc	r1, r19
    5386:	14 06       	cpc	r1, r20
    5388:	55 1f       	adc	r21, r21
    538a:	f2 cf       	rjmp	.-28     	; 0x5370 <__fp_split3+0xe>
    538c:	46 95       	lsr	r20
    538e:	f1 df       	rcall	.-30     	; 0x5372 <__fp_splitA>
    5390:	08 c0       	rjmp	.+16     	; 0x53a2 <__fp_splitA+0x30>
    5392:	16 16       	cp	r1, r22
    5394:	17 06       	cpc	r1, r23
    5396:	18 06       	cpc	r1, r24
    5398:	99 1f       	adc	r25, r25
    539a:	f1 cf       	rjmp	.-30     	; 0x537e <__fp_splitA+0xc>
    539c:	86 95       	lsr	r24
    539e:	71 05       	cpc	r23, r1
    53a0:	61 05       	cpc	r22, r1
    53a2:	08 94       	sec
    53a4:	08 95       	ret

000053a6 <__fp_zero>:
    53a6:	e8 94       	clt

000053a8 <__fp_szero>:
    53a8:	bb 27       	eor	r27, r27
    53aa:	66 27       	eor	r22, r22
    53ac:	77 27       	eor	r23, r23
    53ae:	cb 01       	movw	r24, r22
    53b0:	97 f9       	bld	r25, 7
    53b2:	08 95       	ret

000053b4 <__mulsf3>:
    53b4:	0b d0       	rcall	.+22     	; 0x53cc <__mulsf3x>
    53b6:	c4 cf       	rjmp	.-120    	; 0x5340 <__fp_round>
    53b8:	b5 df       	rcall	.-150    	; 0x5324 <__fp_pscA>
    53ba:	28 f0       	brcs	.+10     	; 0x53c6 <__mulsf3+0x12>
    53bc:	ba df       	rcall	.-140    	; 0x5332 <__fp_pscB>
    53be:	18 f0       	brcs	.+6      	; 0x53c6 <__mulsf3+0x12>
    53c0:	95 23       	and	r25, r21
    53c2:	09 f0       	breq	.+2      	; 0x53c6 <__mulsf3+0x12>
    53c4:	a6 cf       	rjmp	.-180    	; 0x5312 <__fp_inf>
    53c6:	ab cf       	rjmp	.-170    	; 0x531e <__fp_nan>
    53c8:	11 24       	eor	r1, r1
    53ca:	ee cf       	rjmp	.-36     	; 0x53a8 <__fp_szero>

000053cc <__mulsf3x>:
    53cc:	ca df       	rcall	.-108    	; 0x5362 <__fp_split3>
    53ce:	a0 f3       	brcs	.-24     	; 0x53b8 <__mulsf3+0x4>

000053d0 <__mulsf3_pse>:
    53d0:	95 9f       	mul	r25, r21
    53d2:	d1 f3       	breq	.-12     	; 0x53c8 <__mulsf3+0x14>
    53d4:	95 0f       	add	r25, r21
    53d6:	50 e0       	ldi	r21, 0x00	; 0
    53d8:	55 1f       	adc	r21, r21
    53da:	62 9f       	mul	r22, r18
    53dc:	f0 01       	movw	r30, r0
    53de:	72 9f       	mul	r23, r18
    53e0:	bb 27       	eor	r27, r27
    53e2:	f0 0d       	add	r31, r0
    53e4:	b1 1d       	adc	r27, r1
    53e6:	63 9f       	mul	r22, r19
    53e8:	aa 27       	eor	r26, r26
    53ea:	f0 0d       	add	r31, r0
    53ec:	b1 1d       	adc	r27, r1
    53ee:	aa 1f       	adc	r26, r26
    53f0:	64 9f       	mul	r22, r20
    53f2:	66 27       	eor	r22, r22
    53f4:	b0 0d       	add	r27, r0
    53f6:	a1 1d       	adc	r26, r1
    53f8:	66 1f       	adc	r22, r22
    53fa:	82 9f       	mul	r24, r18
    53fc:	22 27       	eor	r18, r18
    53fe:	b0 0d       	add	r27, r0
    5400:	a1 1d       	adc	r26, r1
    5402:	62 1f       	adc	r22, r18
    5404:	73 9f       	mul	r23, r19
    5406:	b0 0d       	add	r27, r0
    5408:	a1 1d       	adc	r26, r1
    540a:	62 1f       	adc	r22, r18
    540c:	83 9f       	mul	r24, r19
    540e:	a0 0d       	add	r26, r0
    5410:	61 1d       	adc	r22, r1
    5412:	22 1f       	adc	r18, r18
    5414:	74 9f       	mul	r23, r20
    5416:	33 27       	eor	r19, r19
    5418:	a0 0d       	add	r26, r0
    541a:	61 1d       	adc	r22, r1
    541c:	23 1f       	adc	r18, r19
    541e:	84 9f       	mul	r24, r20
    5420:	60 0d       	add	r22, r0
    5422:	21 1d       	adc	r18, r1
    5424:	82 2f       	mov	r24, r18
    5426:	76 2f       	mov	r23, r22
    5428:	6a 2f       	mov	r22, r26
    542a:	11 24       	eor	r1, r1
    542c:	9f 57       	subi	r25, 0x7F	; 127
    542e:	50 40       	sbci	r21, 0x00	; 0
    5430:	8a f0       	brmi	.+34     	; 0x5454 <__mulsf3_pse+0x84>
    5432:	e1 f0       	breq	.+56     	; 0x546c <__mulsf3_pse+0x9c>
    5434:	88 23       	and	r24, r24
    5436:	4a f0       	brmi	.+18     	; 0x544a <__mulsf3_pse+0x7a>
    5438:	ee 0f       	add	r30, r30
    543a:	ff 1f       	adc	r31, r31
    543c:	bb 1f       	adc	r27, r27
    543e:	66 1f       	adc	r22, r22
    5440:	77 1f       	adc	r23, r23
    5442:	88 1f       	adc	r24, r24
    5444:	91 50       	subi	r25, 0x01	; 1
    5446:	50 40       	sbci	r21, 0x00	; 0
    5448:	a9 f7       	brne	.-22     	; 0x5434 <__mulsf3_pse+0x64>
    544a:	9e 3f       	cpi	r25, 0xFE	; 254
    544c:	51 05       	cpc	r21, r1
    544e:	70 f0       	brcs	.+28     	; 0x546c <__mulsf3_pse+0x9c>
    5450:	60 cf       	rjmp	.-320    	; 0x5312 <__fp_inf>
    5452:	aa cf       	rjmp	.-172    	; 0x53a8 <__fp_szero>
    5454:	5f 3f       	cpi	r21, 0xFF	; 255
    5456:	ec f3       	brlt	.-6      	; 0x5452 <__mulsf3_pse+0x82>
    5458:	98 3e       	cpi	r25, 0xE8	; 232
    545a:	dc f3       	brlt	.-10     	; 0x5452 <__mulsf3_pse+0x82>
    545c:	86 95       	lsr	r24
    545e:	77 95       	ror	r23
    5460:	67 95       	ror	r22
    5462:	b7 95       	ror	r27
    5464:	f7 95       	ror	r31
    5466:	e7 95       	ror	r30
    5468:	9f 5f       	subi	r25, 0xFF	; 255
    546a:	c1 f7       	brne	.-16     	; 0x545c <__mulsf3_pse+0x8c>
    546c:	fe 2b       	or	r31, r30
    546e:	88 0f       	add	r24, r24
    5470:	91 1d       	adc	r25, r1
    5472:	96 95       	lsr	r25
    5474:	87 95       	ror	r24
    5476:	97 f9       	bld	r25, 7
    5478:	08 95       	ret

0000547a <__udivmodsi4>:
    547a:	a1 e2       	ldi	r26, 0x21	; 33
    547c:	1a 2e       	mov	r1, r26
    547e:	aa 1b       	sub	r26, r26
    5480:	bb 1b       	sub	r27, r27
    5482:	fd 01       	movw	r30, r26
    5484:	0d c0       	rjmp	.+26     	; 0x54a0 <__udivmodsi4_ep>

00005486 <__udivmodsi4_loop>:
    5486:	aa 1f       	adc	r26, r26
    5488:	bb 1f       	adc	r27, r27
    548a:	ee 1f       	adc	r30, r30
    548c:	ff 1f       	adc	r31, r31
    548e:	a2 17       	cp	r26, r18
    5490:	b3 07       	cpc	r27, r19
    5492:	e4 07       	cpc	r30, r20
    5494:	f5 07       	cpc	r31, r21
    5496:	20 f0       	brcs	.+8      	; 0x54a0 <__udivmodsi4_ep>
    5498:	a2 1b       	sub	r26, r18
    549a:	b3 0b       	sbc	r27, r19
    549c:	e4 0b       	sbc	r30, r20
    549e:	f5 0b       	sbc	r31, r21

000054a0 <__udivmodsi4_ep>:
    54a0:	66 1f       	adc	r22, r22
    54a2:	77 1f       	adc	r23, r23
    54a4:	88 1f       	adc	r24, r24
    54a6:	99 1f       	adc	r25, r25
    54a8:	1a 94       	dec	r1
    54aa:	69 f7       	brne	.-38     	; 0x5486 <__udivmodsi4_loop>
    54ac:	60 95       	com	r22
    54ae:	70 95       	com	r23
    54b0:	80 95       	com	r24
    54b2:	90 95       	com	r25
    54b4:	9b 01       	movw	r18, r22
    54b6:	ac 01       	movw	r20, r24
    54b8:	bd 01       	movw	r22, r26
    54ba:	cf 01       	movw	r24, r30
    54bc:	08 95       	ret

000054be <__tablejump2__>:
    54be:	ee 0f       	add	r30, r30
    54c0:	ff 1f       	adc	r31, r31
    54c2:	88 1f       	adc	r24, r24
    54c4:	8b bf       	out	0x3b, r24	; 59
    54c6:	07 90       	elpm	r0, Z+
    54c8:	f6 91       	elpm	r31, Z
    54ca:	e0 2d       	mov	r30, r0
    54cc:	19 94       	eijmp

000054ce <malloc>:
    54ce:	0f 93       	push	r16
    54d0:	1f 93       	push	r17
    54d2:	cf 93       	push	r28
    54d4:	df 93       	push	r29
    54d6:	82 30       	cpi	r24, 0x02	; 2
    54d8:	91 05       	cpc	r25, r1
    54da:	10 f4       	brcc	.+4      	; 0x54e0 <malloc+0x12>
    54dc:	82 e0       	ldi	r24, 0x02	; 2
    54de:	90 e0       	ldi	r25, 0x00	; 0
    54e0:	e0 91 e0 16 	lds	r30, 0x16E0	; 0x8016e0 <__flp>
    54e4:	f0 91 e1 16 	lds	r31, 0x16E1	; 0x8016e1 <__flp+0x1>
    54e8:	20 e0       	ldi	r18, 0x00	; 0
    54ea:	30 e0       	ldi	r19, 0x00	; 0
    54ec:	a0 e0       	ldi	r26, 0x00	; 0
    54ee:	b0 e0       	ldi	r27, 0x00	; 0
    54f0:	30 97       	sbiw	r30, 0x00	; 0
    54f2:	19 f1       	breq	.+70     	; 0x553a <malloc+0x6c>
    54f4:	40 81       	ld	r20, Z
    54f6:	51 81       	ldd	r21, Z+1	; 0x01
    54f8:	02 81       	ldd	r16, Z+2	; 0x02
    54fa:	13 81       	ldd	r17, Z+3	; 0x03
    54fc:	48 17       	cp	r20, r24
    54fe:	59 07       	cpc	r21, r25
    5500:	c8 f0       	brcs	.+50     	; 0x5534 <malloc+0x66>
    5502:	84 17       	cp	r24, r20
    5504:	95 07       	cpc	r25, r21
    5506:	69 f4       	brne	.+26     	; 0x5522 <malloc+0x54>
    5508:	10 97       	sbiw	r26, 0x00	; 0
    550a:	31 f0       	breq	.+12     	; 0x5518 <malloc+0x4a>
    550c:	12 96       	adiw	r26, 0x02	; 2
    550e:	0c 93       	st	X, r16
    5510:	12 97       	sbiw	r26, 0x02	; 2
    5512:	13 96       	adiw	r26, 0x03	; 3
    5514:	1c 93       	st	X, r17
    5516:	27 c0       	rjmp	.+78     	; 0x5566 <malloc+0x98>
    5518:	00 93 e0 16 	sts	0x16E0, r16	; 0x8016e0 <__flp>
    551c:	10 93 e1 16 	sts	0x16E1, r17	; 0x8016e1 <__flp+0x1>
    5520:	22 c0       	rjmp	.+68     	; 0x5566 <malloc+0x98>
    5522:	21 15       	cp	r18, r1
    5524:	31 05       	cpc	r19, r1
    5526:	19 f0       	breq	.+6      	; 0x552e <malloc+0x60>
    5528:	42 17       	cp	r20, r18
    552a:	53 07       	cpc	r21, r19
    552c:	18 f4       	brcc	.+6      	; 0x5534 <malloc+0x66>
    552e:	9a 01       	movw	r18, r20
    5530:	bd 01       	movw	r22, r26
    5532:	ef 01       	movw	r28, r30
    5534:	df 01       	movw	r26, r30
    5536:	f8 01       	movw	r30, r16
    5538:	db cf       	rjmp	.-74     	; 0x54f0 <malloc+0x22>
    553a:	21 15       	cp	r18, r1
    553c:	31 05       	cpc	r19, r1
    553e:	f9 f0       	breq	.+62     	; 0x557e <malloc+0xb0>
    5540:	28 1b       	sub	r18, r24
    5542:	39 0b       	sbc	r19, r25
    5544:	24 30       	cpi	r18, 0x04	; 4
    5546:	31 05       	cpc	r19, r1
    5548:	80 f4       	brcc	.+32     	; 0x556a <malloc+0x9c>
    554a:	8a 81       	ldd	r24, Y+2	; 0x02
    554c:	9b 81       	ldd	r25, Y+3	; 0x03
    554e:	61 15       	cp	r22, r1
    5550:	71 05       	cpc	r23, r1
    5552:	21 f0       	breq	.+8      	; 0x555c <malloc+0x8e>
    5554:	fb 01       	movw	r30, r22
    5556:	93 83       	std	Z+3, r25	; 0x03
    5558:	82 83       	std	Z+2, r24	; 0x02
    555a:	04 c0       	rjmp	.+8      	; 0x5564 <malloc+0x96>
    555c:	90 93 e1 16 	sts	0x16E1, r25	; 0x8016e1 <__flp+0x1>
    5560:	80 93 e0 16 	sts	0x16E0, r24	; 0x8016e0 <__flp>
    5564:	fe 01       	movw	r30, r28
    5566:	32 96       	adiw	r30, 0x02	; 2
    5568:	44 c0       	rjmp	.+136    	; 0x55f2 <malloc+0x124>
    556a:	fe 01       	movw	r30, r28
    556c:	e2 0f       	add	r30, r18
    556e:	f3 1f       	adc	r31, r19
    5570:	81 93       	st	Z+, r24
    5572:	91 93       	st	Z+, r25
    5574:	22 50       	subi	r18, 0x02	; 2
    5576:	31 09       	sbc	r19, r1
    5578:	39 83       	std	Y+1, r19	; 0x01
    557a:	28 83       	st	Y, r18
    557c:	3a c0       	rjmp	.+116    	; 0x55f2 <malloc+0x124>
    557e:	20 91 de 16 	lds	r18, 0x16DE	; 0x8016de <__brkval>
    5582:	30 91 df 16 	lds	r19, 0x16DF	; 0x8016df <__brkval+0x1>
    5586:	23 2b       	or	r18, r19
    5588:	41 f4       	brne	.+16     	; 0x559a <malloc+0xcc>
    558a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    558e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5592:	30 93 df 16 	sts	0x16DF, r19	; 0x8016df <__brkval+0x1>
    5596:	20 93 de 16 	sts	0x16DE, r18	; 0x8016de <__brkval>
    559a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    559e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    55a2:	21 15       	cp	r18, r1
    55a4:	31 05       	cpc	r19, r1
    55a6:	41 f4       	brne	.+16     	; 0x55b8 <malloc+0xea>
    55a8:	2d b7       	in	r18, 0x3d	; 61
    55aa:	3e b7       	in	r19, 0x3e	; 62
    55ac:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    55b0:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    55b4:	24 1b       	sub	r18, r20
    55b6:	35 0b       	sbc	r19, r21
    55b8:	e0 91 de 16 	lds	r30, 0x16DE	; 0x8016de <__brkval>
    55bc:	f0 91 df 16 	lds	r31, 0x16DF	; 0x8016df <__brkval+0x1>
    55c0:	e2 17       	cp	r30, r18
    55c2:	f3 07       	cpc	r31, r19
    55c4:	a0 f4       	brcc	.+40     	; 0x55ee <malloc+0x120>
    55c6:	2e 1b       	sub	r18, r30
    55c8:	3f 0b       	sbc	r19, r31
    55ca:	28 17       	cp	r18, r24
    55cc:	39 07       	cpc	r19, r25
    55ce:	78 f0       	brcs	.+30     	; 0x55ee <malloc+0x120>
    55d0:	ac 01       	movw	r20, r24
    55d2:	4e 5f       	subi	r20, 0xFE	; 254
    55d4:	5f 4f       	sbci	r21, 0xFF	; 255
    55d6:	24 17       	cp	r18, r20
    55d8:	35 07       	cpc	r19, r21
    55da:	48 f0       	brcs	.+18     	; 0x55ee <malloc+0x120>
    55dc:	4e 0f       	add	r20, r30
    55de:	5f 1f       	adc	r21, r31
    55e0:	50 93 df 16 	sts	0x16DF, r21	; 0x8016df <__brkval+0x1>
    55e4:	40 93 de 16 	sts	0x16DE, r20	; 0x8016de <__brkval>
    55e8:	81 93       	st	Z+, r24
    55ea:	91 93       	st	Z+, r25
    55ec:	02 c0       	rjmp	.+4      	; 0x55f2 <malloc+0x124>
    55ee:	e0 e0       	ldi	r30, 0x00	; 0
    55f0:	f0 e0       	ldi	r31, 0x00	; 0
    55f2:	cf 01       	movw	r24, r30
    55f4:	df 91       	pop	r29
    55f6:	cf 91       	pop	r28
    55f8:	1f 91       	pop	r17
    55fa:	0f 91       	pop	r16
    55fc:	08 95       	ret

000055fe <free>:
    55fe:	cf 93       	push	r28
    5600:	df 93       	push	r29
    5602:	00 97       	sbiw	r24, 0x00	; 0
    5604:	09 f4       	brne	.+2      	; 0x5608 <free+0xa>
    5606:	81 c0       	rjmp	.+258    	; 0x570a <free+0x10c>
    5608:	fc 01       	movw	r30, r24
    560a:	32 97       	sbiw	r30, 0x02	; 2
    560c:	13 82       	std	Z+3, r1	; 0x03
    560e:	12 82       	std	Z+2, r1	; 0x02
    5610:	a0 91 e0 16 	lds	r26, 0x16E0	; 0x8016e0 <__flp>
    5614:	b0 91 e1 16 	lds	r27, 0x16E1	; 0x8016e1 <__flp+0x1>
    5618:	10 97       	sbiw	r26, 0x00	; 0
    561a:	81 f4       	brne	.+32     	; 0x563c <free+0x3e>
    561c:	20 81       	ld	r18, Z
    561e:	31 81       	ldd	r19, Z+1	; 0x01
    5620:	82 0f       	add	r24, r18
    5622:	93 1f       	adc	r25, r19
    5624:	20 91 de 16 	lds	r18, 0x16DE	; 0x8016de <__brkval>
    5628:	30 91 df 16 	lds	r19, 0x16DF	; 0x8016df <__brkval+0x1>
    562c:	28 17       	cp	r18, r24
    562e:	39 07       	cpc	r19, r25
    5630:	51 f5       	brne	.+84     	; 0x5686 <free+0x88>
    5632:	f0 93 df 16 	sts	0x16DF, r31	; 0x8016df <__brkval+0x1>
    5636:	e0 93 de 16 	sts	0x16DE, r30	; 0x8016de <__brkval>
    563a:	67 c0       	rjmp	.+206    	; 0x570a <free+0x10c>
    563c:	ed 01       	movw	r28, r26
    563e:	20 e0       	ldi	r18, 0x00	; 0
    5640:	30 e0       	ldi	r19, 0x00	; 0
    5642:	ce 17       	cp	r28, r30
    5644:	df 07       	cpc	r29, r31
    5646:	40 f4       	brcc	.+16     	; 0x5658 <free+0x5a>
    5648:	4a 81       	ldd	r20, Y+2	; 0x02
    564a:	5b 81       	ldd	r21, Y+3	; 0x03
    564c:	9e 01       	movw	r18, r28
    564e:	41 15       	cp	r20, r1
    5650:	51 05       	cpc	r21, r1
    5652:	f1 f0       	breq	.+60     	; 0x5690 <free+0x92>
    5654:	ea 01       	movw	r28, r20
    5656:	f5 cf       	rjmp	.-22     	; 0x5642 <free+0x44>
    5658:	d3 83       	std	Z+3, r29	; 0x03
    565a:	c2 83       	std	Z+2, r28	; 0x02
    565c:	40 81       	ld	r20, Z
    565e:	51 81       	ldd	r21, Z+1	; 0x01
    5660:	84 0f       	add	r24, r20
    5662:	95 1f       	adc	r25, r21
    5664:	c8 17       	cp	r28, r24
    5666:	d9 07       	cpc	r29, r25
    5668:	59 f4       	brne	.+22     	; 0x5680 <free+0x82>
    566a:	88 81       	ld	r24, Y
    566c:	99 81       	ldd	r25, Y+1	; 0x01
    566e:	84 0f       	add	r24, r20
    5670:	95 1f       	adc	r25, r21
    5672:	02 96       	adiw	r24, 0x02	; 2
    5674:	91 83       	std	Z+1, r25	; 0x01
    5676:	80 83       	st	Z, r24
    5678:	8a 81       	ldd	r24, Y+2	; 0x02
    567a:	9b 81       	ldd	r25, Y+3	; 0x03
    567c:	93 83       	std	Z+3, r25	; 0x03
    567e:	82 83       	std	Z+2, r24	; 0x02
    5680:	21 15       	cp	r18, r1
    5682:	31 05       	cpc	r19, r1
    5684:	29 f4       	brne	.+10     	; 0x5690 <free+0x92>
    5686:	f0 93 e1 16 	sts	0x16E1, r31	; 0x8016e1 <__flp+0x1>
    568a:	e0 93 e0 16 	sts	0x16E0, r30	; 0x8016e0 <__flp>
    568e:	3d c0       	rjmp	.+122    	; 0x570a <free+0x10c>
    5690:	e9 01       	movw	r28, r18
    5692:	fb 83       	std	Y+3, r31	; 0x03
    5694:	ea 83       	std	Y+2, r30	; 0x02
    5696:	49 91       	ld	r20, Y+
    5698:	59 91       	ld	r21, Y+
    569a:	c4 0f       	add	r28, r20
    569c:	d5 1f       	adc	r29, r21
    569e:	ec 17       	cp	r30, r28
    56a0:	fd 07       	cpc	r31, r29
    56a2:	61 f4       	brne	.+24     	; 0x56bc <free+0xbe>
    56a4:	80 81       	ld	r24, Z
    56a6:	91 81       	ldd	r25, Z+1	; 0x01
    56a8:	84 0f       	add	r24, r20
    56aa:	95 1f       	adc	r25, r21
    56ac:	02 96       	adiw	r24, 0x02	; 2
    56ae:	e9 01       	movw	r28, r18
    56b0:	99 83       	std	Y+1, r25	; 0x01
    56b2:	88 83       	st	Y, r24
    56b4:	82 81       	ldd	r24, Z+2	; 0x02
    56b6:	93 81       	ldd	r25, Z+3	; 0x03
    56b8:	9b 83       	std	Y+3, r25	; 0x03
    56ba:	8a 83       	std	Y+2, r24	; 0x02
    56bc:	e0 e0       	ldi	r30, 0x00	; 0
    56be:	f0 e0       	ldi	r31, 0x00	; 0
    56c0:	12 96       	adiw	r26, 0x02	; 2
    56c2:	8d 91       	ld	r24, X+
    56c4:	9c 91       	ld	r25, X
    56c6:	13 97       	sbiw	r26, 0x03	; 3
    56c8:	00 97       	sbiw	r24, 0x00	; 0
    56ca:	19 f0       	breq	.+6      	; 0x56d2 <free+0xd4>
    56cc:	fd 01       	movw	r30, r26
    56ce:	dc 01       	movw	r26, r24
    56d0:	f7 cf       	rjmp	.-18     	; 0x56c0 <free+0xc2>
    56d2:	8d 91       	ld	r24, X+
    56d4:	9c 91       	ld	r25, X
    56d6:	11 97       	sbiw	r26, 0x01	; 1
    56d8:	9d 01       	movw	r18, r26
    56da:	2e 5f       	subi	r18, 0xFE	; 254
    56dc:	3f 4f       	sbci	r19, 0xFF	; 255
    56de:	82 0f       	add	r24, r18
    56e0:	93 1f       	adc	r25, r19
    56e2:	20 91 de 16 	lds	r18, 0x16DE	; 0x8016de <__brkval>
    56e6:	30 91 df 16 	lds	r19, 0x16DF	; 0x8016df <__brkval+0x1>
    56ea:	28 17       	cp	r18, r24
    56ec:	39 07       	cpc	r19, r25
    56ee:	69 f4       	brne	.+26     	; 0x570a <free+0x10c>
    56f0:	30 97       	sbiw	r30, 0x00	; 0
    56f2:	29 f4       	brne	.+10     	; 0x56fe <free+0x100>
    56f4:	10 92 e1 16 	sts	0x16E1, r1	; 0x8016e1 <__flp+0x1>
    56f8:	10 92 e0 16 	sts	0x16E0, r1	; 0x8016e0 <__flp>
    56fc:	02 c0       	rjmp	.+4      	; 0x5702 <free+0x104>
    56fe:	13 82       	std	Z+3, r1	; 0x03
    5700:	12 82       	std	Z+2, r1	; 0x02
    5702:	b0 93 df 16 	sts	0x16DF, r27	; 0x8016df <__brkval+0x1>
    5706:	a0 93 de 16 	sts	0x16DE, r26	; 0x8016de <__brkval>
    570a:	df 91       	pop	r29
    570c:	cf 91       	pop	r28
    570e:	08 95       	ret

00005710 <abort>:
    5710:	81 e0       	ldi	r24, 0x01	; 1
    5712:	90 e0       	ldi	r25, 0x00	; 0
    5714:	f8 94       	cli
    5716:	7d c3       	rjmp	.+1786   	; 0x5e12 <_exit>

00005718 <memcpy>:
    5718:	fb 01       	movw	r30, r22
    571a:	dc 01       	movw	r26, r24
    571c:	02 c0       	rjmp	.+4      	; 0x5722 <memcpy+0xa>
    571e:	01 90       	ld	r0, Z+
    5720:	0d 92       	st	X+, r0
    5722:	41 50       	subi	r20, 0x01	; 1
    5724:	50 40       	sbci	r21, 0x00	; 0
    5726:	d8 f7       	brcc	.-10     	; 0x571e <memcpy+0x6>
    5728:	08 95       	ret

0000572a <memset>:
    572a:	dc 01       	movw	r26, r24
    572c:	01 c0       	rjmp	.+2      	; 0x5730 <memset+0x6>
    572e:	6d 93       	st	X+, r22
    5730:	41 50       	subi	r20, 0x01	; 1
    5732:	50 40       	sbci	r21, 0x00	; 0
    5734:	e0 f7       	brcc	.-8      	; 0x572e <memset+0x4>
    5736:	08 95       	ret

00005738 <strcasestr>:
    5738:	fb 01       	movw	r30, r22
    573a:	51 91       	ld	r21, Z+
    573c:	55 23       	and	r21, r21
    573e:	b1 f0       	breq	.+44     	; 0x576c <strcasestr+0x34>
    5740:	bf 01       	movw	r22, r30
    5742:	dc 01       	movw	r26, r24
    5744:	05 2e       	mov	r0, r21
    5746:	4d 91       	ld	r20, X+
    5748:	44 23       	and	r20, r20
    574a:	69 f0       	breq	.+26     	; 0x5766 <strcasestr+0x2e>
    574c:	10 d0       	rcall	.+32     	; 0x576e <strcasestr+0x36>
    574e:	d9 f7       	brne	.-10     	; 0x5746 <strcasestr+0xe>
    5750:	cd 01       	movw	r24, r26
    5752:	01 90       	ld	r0, Z+
    5754:	00 20       	and	r0, r0
    5756:	49 f0       	breq	.+18     	; 0x576a <strcasestr+0x32>
    5758:	4d 91       	ld	r20, X+
    575a:	41 11       	cpse	r20, r1
    575c:	08 d0       	rcall	.+16     	; 0x576e <strcasestr+0x36>
    575e:	c9 f3       	breq	.-14     	; 0x5752 <strcasestr+0x1a>
    5760:	fb 01       	movw	r30, r22
    5762:	41 11       	cpse	r20, r1
    5764:	ee cf       	rjmp	.-36     	; 0x5742 <strcasestr+0xa>
    5766:	81 e0       	ldi	r24, 0x01	; 1
    5768:	90 e0       	ldi	r25, 0x00	; 0
    576a:	01 97       	sbiw	r24, 0x01	; 1
    576c:	08 95       	ret
    576e:	40 25       	eor	r20, r0
    5770:	39 f0       	breq	.+14     	; 0x5780 <strcasestr+0x48>
    5772:	40 32       	cpi	r20, 0x20	; 32
    5774:	29 f4       	brne	.+10     	; 0x5780 <strcasestr+0x48>
    5776:	40 29       	or	r20, r0
    5778:	4b 57       	subi	r20, 0x7B	; 123
    577a:	46 5e       	subi	r20, 0xE6	; 230
    577c:	08 f0       	brcs	.+2      	; 0x5780 <strcasestr+0x48>
    577e:	18 94       	sez
    5780:	08 95       	ret

00005782 <strcat>:
    5782:	fb 01       	movw	r30, r22
    5784:	dc 01       	movw	r26, r24
    5786:	0d 90       	ld	r0, X+
    5788:	00 20       	and	r0, r0
    578a:	e9 f7       	brne	.-6      	; 0x5786 <strcat+0x4>
    578c:	11 97       	sbiw	r26, 0x01	; 1
    578e:	01 90       	ld	r0, Z+
    5790:	0d 92       	st	X+, r0
    5792:	00 20       	and	r0, r0
    5794:	e1 f7       	brne	.-8      	; 0x578e <strcat+0xc>
    5796:	08 95       	ret

00005798 <strcpy>:
    5798:	fb 01       	movw	r30, r22
    579a:	dc 01       	movw	r26, r24
    579c:	01 90       	ld	r0, Z+
    579e:	0d 92       	st	X+, r0
    57a0:	00 20       	and	r0, r0
    57a2:	e1 f7       	brne	.-8      	; 0x579c <strcpy+0x4>
    57a4:	08 95       	ret

000057a6 <strncasecmp>:
    57a6:	fb 01       	movw	r30, r22
    57a8:	dc 01       	movw	r26, r24
    57aa:	41 50       	subi	r20, 0x01	; 1
    57ac:	50 40       	sbci	r21, 0x00	; 0
    57ae:	88 f0       	brcs	.+34     	; 0x57d2 <strncasecmp+0x2c>
    57b0:	8d 91       	ld	r24, X+
    57b2:	81 34       	cpi	r24, 0x41	; 65
    57b4:	1c f0       	brlt	.+6      	; 0x57bc <strncasecmp+0x16>
    57b6:	8b 35       	cpi	r24, 0x5B	; 91
    57b8:	0c f4       	brge	.+2      	; 0x57bc <strncasecmp+0x16>
    57ba:	80 5e       	subi	r24, 0xE0	; 224
    57bc:	61 91       	ld	r22, Z+
    57be:	61 34       	cpi	r22, 0x41	; 65
    57c0:	1c f0       	brlt	.+6      	; 0x57c8 <strncasecmp+0x22>
    57c2:	6b 35       	cpi	r22, 0x5B	; 91
    57c4:	0c f4       	brge	.+2      	; 0x57c8 <strncasecmp+0x22>
    57c6:	60 5e       	subi	r22, 0xE0	; 224
    57c8:	86 1b       	sub	r24, r22
    57ca:	61 11       	cpse	r22, r1
    57cc:	71 f3       	breq	.-36     	; 0x57aa <strncasecmp+0x4>
    57ce:	99 0b       	sbc	r25, r25
    57d0:	08 95       	ret
    57d2:	88 1b       	sub	r24, r24
    57d4:	fc cf       	rjmp	.-8      	; 0x57ce <strncasecmp+0x28>

000057d6 <printf>:
    57d6:	cf 93       	push	r28
    57d8:	df 93       	push	r29
    57da:	cd b7       	in	r28, 0x3d	; 61
    57dc:	de b7       	in	r29, 0x3e	; 62
    57de:	ae 01       	movw	r20, r28
    57e0:	4a 5f       	subi	r20, 0xFA	; 250
    57e2:	5f 4f       	sbci	r21, 0xFF	; 255
    57e4:	fa 01       	movw	r30, r20
    57e6:	61 91       	ld	r22, Z+
    57e8:	71 91       	ld	r23, Z+
    57ea:	af 01       	movw	r20, r30
    57ec:	80 91 e4 16 	lds	r24, 0x16E4	; 0x8016e4 <__iob+0x2>
    57f0:	90 91 e5 16 	lds	r25, 0x16E5	; 0x8016e5 <__iob+0x3>
    57f4:	61 d0       	rcall	.+194    	; 0x58b8 <vfprintf>
    57f6:	df 91       	pop	r29
    57f8:	cf 91       	pop	r28
    57fa:	08 95       	ret

000057fc <puts>:
    57fc:	0f 93       	push	r16
    57fe:	1f 93       	push	r17
    5800:	cf 93       	push	r28
    5802:	df 93       	push	r29
    5804:	e0 91 e4 16 	lds	r30, 0x16E4	; 0x8016e4 <__iob+0x2>
    5808:	f0 91 e5 16 	lds	r31, 0x16E5	; 0x8016e5 <__iob+0x3>
    580c:	23 81       	ldd	r18, Z+3	; 0x03
    580e:	21 ff       	sbrs	r18, 1
    5810:	1b c0       	rjmp	.+54     	; 0x5848 <puts+0x4c>
    5812:	8c 01       	movw	r16, r24
    5814:	d0 e0       	ldi	r29, 0x00	; 0
    5816:	c0 e0       	ldi	r28, 0x00	; 0
    5818:	f8 01       	movw	r30, r16
    581a:	81 91       	ld	r24, Z+
    581c:	8f 01       	movw	r16, r30
    581e:	60 91 e4 16 	lds	r22, 0x16E4	; 0x8016e4 <__iob+0x2>
    5822:	70 91 e5 16 	lds	r23, 0x16E5	; 0x8016e5 <__iob+0x3>
    5826:	db 01       	movw	r26, r22
    5828:	18 96       	adiw	r26, 0x08	; 8
    582a:	ed 91       	ld	r30, X+
    582c:	fc 91       	ld	r31, X
    582e:	19 97       	sbiw	r26, 0x09	; 9
    5830:	88 23       	and	r24, r24
    5832:	31 f0       	breq	.+12     	; 0x5840 <puts+0x44>
    5834:	19 95       	eicall
    5836:	89 2b       	or	r24, r25
    5838:	79 f3       	breq	.-34     	; 0x5818 <puts+0x1c>
    583a:	df ef       	ldi	r29, 0xFF	; 255
    583c:	cf ef       	ldi	r28, 0xFF	; 255
    583e:	ec cf       	rjmp	.-40     	; 0x5818 <puts+0x1c>
    5840:	8a e0       	ldi	r24, 0x0A	; 10
    5842:	19 95       	eicall
    5844:	89 2b       	or	r24, r25
    5846:	19 f0       	breq	.+6      	; 0x584e <puts+0x52>
    5848:	8f ef       	ldi	r24, 0xFF	; 255
    584a:	9f ef       	ldi	r25, 0xFF	; 255
    584c:	02 c0       	rjmp	.+4      	; 0x5852 <puts+0x56>
    584e:	8d 2f       	mov	r24, r29
    5850:	9c 2f       	mov	r25, r28
    5852:	df 91       	pop	r29
    5854:	cf 91       	pop	r28
    5856:	1f 91       	pop	r17
    5858:	0f 91       	pop	r16
    585a:	08 95       	ret

0000585c <sprintf>:
    585c:	0f 93       	push	r16
    585e:	1f 93       	push	r17
    5860:	cf 93       	push	r28
    5862:	df 93       	push	r29
    5864:	cd b7       	in	r28, 0x3d	; 61
    5866:	de b7       	in	r29, 0x3e	; 62
    5868:	2e 97       	sbiw	r28, 0x0e	; 14
    586a:	0f b6       	in	r0, 0x3f	; 63
    586c:	f8 94       	cli
    586e:	de bf       	out	0x3e, r29	; 62
    5870:	0f be       	out	0x3f, r0	; 63
    5872:	cd bf       	out	0x3d, r28	; 61
    5874:	0e 89       	ldd	r16, Y+22	; 0x16
    5876:	1f 89       	ldd	r17, Y+23	; 0x17
    5878:	86 e0       	ldi	r24, 0x06	; 6
    587a:	8c 83       	std	Y+4, r24	; 0x04
    587c:	1a 83       	std	Y+2, r17	; 0x02
    587e:	09 83       	std	Y+1, r16	; 0x01
    5880:	8f ef       	ldi	r24, 0xFF	; 255
    5882:	9f e7       	ldi	r25, 0x7F	; 127
    5884:	9e 83       	std	Y+6, r25	; 0x06
    5886:	8d 83       	std	Y+5, r24	; 0x05
    5888:	ae 01       	movw	r20, r28
    588a:	46 5e       	subi	r20, 0xE6	; 230
    588c:	5f 4f       	sbci	r21, 0xFF	; 255
    588e:	68 8d       	ldd	r22, Y+24	; 0x18
    5890:	79 8d       	ldd	r23, Y+25	; 0x19
    5892:	ce 01       	movw	r24, r28
    5894:	01 96       	adiw	r24, 0x01	; 1
    5896:	10 d0       	rcall	.+32     	; 0x58b8 <vfprintf>
    5898:	ef 81       	ldd	r30, Y+7	; 0x07
    589a:	f8 85       	ldd	r31, Y+8	; 0x08
    589c:	e0 0f       	add	r30, r16
    589e:	f1 1f       	adc	r31, r17
    58a0:	10 82       	st	Z, r1
    58a2:	2e 96       	adiw	r28, 0x0e	; 14
    58a4:	0f b6       	in	r0, 0x3f	; 63
    58a6:	f8 94       	cli
    58a8:	de bf       	out	0x3e, r29	; 62
    58aa:	0f be       	out	0x3f, r0	; 63
    58ac:	cd bf       	out	0x3d, r28	; 61
    58ae:	df 91       	pop	r29
    58b0:	cf 91       	pop	r28
    58b2:	1f 91       	pop	r17
    58b4:	0f 91       	pop	r16
    58b6:	08 95       	ret

000058b8 <vfprintf>:
    58b8:	2f 92       	push	r2
    58ba:	3f 92       	push	r3
    58bc:	4f 92       	push	r4
    58be:	5f 92       	push	r5
    58c0:	6f 92       	push	r6
    58c2:	7f 92       	push	r7
    58c4:	8f 92       	push	r8
    58c6:	9f 92       	push	r9
    58c8:	af 92       	push	r10
    58ca:	bf 92       	push	r11
    58cc:	cf 92       	push	r12
    58ce:	df 92       	push	r13
    58d0:	ef 92       	push	r14
    58d2:	ff 92       	push	r15
    58d4:	0f 93       	push	r16
    58d6:	1f 93       	push	r17
    58d8:	cf 93       	push	r28
    58da:	df 93       	push	r29
    58dc:	cd b7       	in	r28, 0x3d	; 61
    58de:	de b7       	in	r29, 0x3e	; 62
    58e0:	2b 97       	sbiw	r28, 0x0b	; 11
    58e2:	0f b6       	in	r0, 0x3f	; 63
    58e4:	f8 94       	cli
    58e6:	de bf       	out	0x3e, r29	; 62
    58e8:	0f be       	out	0x3f, r0	; 63
    58ea:	cd bf       	out	0x3d, r28	; 61
    58ec:	6c 01       	movw	r12, r24
    58ee:	7b 01       	movw	r14, r22
    58f0:	8a 01       	movw	r16, r20
    58f2:	fc 01       	movw	r30, r24
    58f4:	17 82       	std	Z+7, r1	; 0x07
    58f6:	16 82       	std	Z+6, r1	; 0x06
    58f8:	83 81       	ldd	r24, Z+3	; 0x03
    58fa:	81 ff       	sbrs	r24, 1
    58fc:	bf c1       	rjmp	.+894    	; 0x5c7c <vfprintf+0x3c4>
    58fe:	ce 01       	movw	r24, r28
    5900:	01 96       	adiw	r24, 0x01	; 1
    5902:	3c 01       	movw	r6, r24
    5904:	f6 01       	movw	r30, r12
    5906:	93 81       	ldd	r25, Z+3	; 0x03
    5908:	f7 01       	movw	r30, r14
    590a:	93 fd       	sbrc	r25, 3
    590c:	85 91       	lpm	r24, Z+
    590e:	93 ff       	sbrs	r25, 3
    5910:	81 91       	ld	r24, Z+
    5912:	7f 01       	movw	r14, r30
    5914:	88 23       	and	r24, r24
    5916:	09 f4       	brne	.+2      	; 0x591a <vfprintf+0x62>
    5918:	ad c1       	rjmp	.+858    	; 0x5c74 <vfprintf+0x3bc>
    591a:	85 32       	cpi	r24, 0x25	; 37
    591c:	39 f4       	brne	.+14     	; 0x592c <vfprintf+0x74>
    591e:	93 fd       	sbrc	r25, 3
    5920:	85 91       	lpm	r24, Z+
    5922:	93 ff       	sbrs	r25, 3
    5924:	81 91       	ld	r24, Z+
    5926:	7f 01       	movw	r14, r30
    5928:	85 32       	cpi	r24, 0x25	; 37
    592a:	21 f4       	brne	.+8      	; 0x5934 <vfprintf+0x7c>
    592c:	b6 01       	movw	r22, r12
    592e:	90 e0       	ldi	r25, 0x00	; 0
    5930:	d6 d1       	rcall	.+940    	; 0x5cde <fputc>
    5932:	e8 cf       	rjmp	.-48     	; 0x5904 <vfprintf+0x4c>
    5934:	91 2c       	mov	r9, r1
    5936:	21 2c       	mov	r2, r1
    5938:	31 2c       	mov	r3, r1
    593a:	ff e1       	ldi	r31, 0x1F	; 31
    593c:	f3 15       	cp	r31, r3
    593e:	d8 f0       	brcs	.+54     	; 0x5976 <vfprintf+0xbe>
    5940:	8b 32       	cpi	r24, 0x2B	; 43
    5942:	79 f0       	breq	.+30     	; 0x5962 <vfprintf+0xaa>
    5944:	38 f4       	brcc	.+14     	; 0x5954 <vfprintf+0x9c>
    5946:	80 32       	cpi	r24, 0x20	; 32
    5948:	79 f0       	breq	.+30     	; 0x5968 <vfprintf+0xb0>
    594a:	83 32       	cpi	r24, 0x23	; 35
    594c:	a1 f4       	brne	.+40     	; 0x5976 <vfprintf+0xbe>
    594e:	23 2d       	mov	r18, r3
    5950:	20 61       	ori	r18, 0x10	; 16
    5952:	1d c0       	rjmp	.+58     	; 0x598e <vfprintf+0xd6>
    5954:	8d 32       	cpi	r24, 0x2D	; 45
    5956:	61 f0       	breq	.+24     	; 0x5970 <vfprintf+0xb8>
    5958:	80 33       	cpi	r24, 0x30	; 48
    595a:	69 f4       	brne	.+26     	; 0x5976 <vfprintf+0xbe>
    595c:	23 2d       	mov	r18, r3
    595e:	21 60       	ori	r18, 0x01	; 1
    5960:	16 c0       	rjmp	.+44     	; 0x598e <vfprintf+0xd6>
    5962:	83 2d       	mov	r24, r3
    5964:	82 60       	ori	r24, 0x02	; 2
    5966:	38 2e       	mov	r3, r24
    5968:	e3 2d       	mov	r30, r3
    596a:	e4 60       	ori	r30, 0x04	; 4
    596c:	3e 2e       	mov	r3, r30
    596e:	2a c0       	rjmp	.+84     	; 0x59c4 <vfprintf+0x10c>
    5970:	f3 2d       	mov	r31, r3
    5972:	f8 60       	ori	r31, 0x08	; 8
    5974:	1d c0       	rjmp	.+58     	; 0x59b0 <vfprintf+0xf8>
    5976:	37 fc       	sbrc	r3, 7
    5978:	2d c0       	rjmp	.+90     	; 0x59d4 <vfprintf+0x11c>
    597a:	20 ed       	ldi	r18, 0xD0	; 208
    597c:	28 0f       	add	r18, r24
    597e:	2a 30       	cpi	r18, 0x0A	; 10
    5980:	40 f0       	brcs	.+16     	; 0x5992 <vfprintf+0xda>
    5982:	8e 32       	cpi	r24, 0x2E	; 46
    5984:	b9 f4       	brne	.+46     	; 0x59b4 <vfprintf+0xfc>
    5986:	36 fc       	sbrc	r3, 6
    5988:	75 c1       	rjmp	.+746    	; 0x5c74 <vfprintf+0x3bc>
    598a:	23 2d       	mov	r18, r3
    598c:	20 64       	ori	r18, 0x40	; 64
    598e:	32 2e       	mov	r3, r18
    5990:	19 c0       	rjmp	.+50     	; 0x59c4 <vfprintf+0x10c>
    5992:	36 fe       	sbrs	r3, 6
    5994:	06 c0       	rjmp	.+12     	; 0x59a2 <vfprintf+0xea>
    5996:	8a e0       	ldi	r24, 0x0A	; 10
    5998:	98 9e       	mul	r9, r24
    599a:	20 0d       	add	r18, r0
    599c:	11 24       	eor	r1, r1
    599e:	92 2e       	mov	r9, r18
    59a0:	11 c0       	rjmp	.+34     	; 0x59c4 <vfprintf+0x10c>
    59a2:	ea e0       	ldi	r30, 0x0A	; 10
    59a4:	2e 9e       	mul	r2, r30
    59a6:	20 0d       	add	r18, r0
    59a8:	11 24       	eor	r1, r1
    59aa:	22 2e       	mov	r2, r18
    59ac:	f3 2d       	mov	r31, r3
    59ae:	f0 62       	ori	r31, 0x20	; 32
    59b0:	3f 2e       	mov	r3, r31
    59b2:	08 c0       	rjmp	.+16     	; 0x59c4 <vfprintf+0x10c>
    59b4:	8c 36       	cpi	r24, 0x6C	; 108
    59b6:	21 f4       	brne	.+8      	; 0x59c0 <vfprintf+0x108>
    59b8:	83 2d       	mov	r24, r3
    59ba:	80 68       	ori	r24, 0x80	; 128
    59bc:	38 2e       	mov	r3, r24
    59be:	02 c0       	rjmp	.+4      	; 0x59c4 <vfprintf+0x10c>
    59c0:	88 36       	cpi	r24, 0x68	; 104
    59c2:	41 f4       	brne	.+16     	; 0x59d4 <vfprintf+0x11c>
    59c4:	f7 01       	movw	r30, r14
    59c6:	93 fd       	sbrc	r25, 3
    59c8:	85 91       	lpm	r24, Z+
    59ca:	93 ff       	sbrs	r25, 3
    59cc:	81 91       	ld	r24, Z+
    59ce:	7f 01       	movw	r14, r30
    59d0:	81 11       	cpse	r24, r1
    59d2:	b3 cf       	rjmp	.-154    	; 0x593a <vfprintf+0x82>
    59d4:	98 2f       	mov	r25, r24
    59d6:	9f 7d       	andi	r25, 0xDF	; 223
    59d8:	95 54       	subi	r25, 0x45	; 69
    59da:	93 30       	cpi	r25, 0x03	; 3
    59dc:	28 f4       	brcc	.+10     	; 0x59e8 <vfprintf+0x130>
    59de:	0c 5f       	subi	r16, 0xFC	; 252
    59e0:	1f 4f       	sbci	r17, 0xFF	; 255
    59e2:	9f e3       	ldi	r25, 0x3F	; 63
    59e4:	99 83       	std	Y+1, r25	; 0x01
    59e6:	0d c0       	rjmp	.+26     	; 0x5a02 <vfprintf+0x14a>
    59e8:	83 36       	cpi	r24, 0x63	; 99
    59ea:	31 f0       	breq	.+12     	; 0x59f8 <vfprintf+0x140>
    59ec:	83 37       	cpi	r24, 0x73	; 115
    59ee:	71 f0       	breq	.+28     	; 0x5a0c <vfprintf+0x154>
    59f0:	83 35       	cpi	r24, 0x53	; 83
    59f2:	09 f0       	breq	.+2      	; 0x59f6 <vfprintf+0x13e>
    59f4:	55 c0       	rjmp	.+170    	; 0x5aa0 <vfprintf+0x1e8>
    59f6:	20 c0       	rjmp	.+64     	; 0x5a38 <vfprintf+0x180>
    59f8:	f8 01       	movw	r30, r16
    59fa:	80 81       	ld	r24, Z
    59fc:	89 83       	std	Y+1, r24	; 0x01
    59fe:	0e 5f       	subi	r16, 0xFE	; 254
    5a00:	1f 4f       	sbci	r17, 0xFF	; 255
    5a02:	88 24       	eor	r8, r8
    5a04:	83 94       	inc	r8
    5a06:	91 2c       	mov	r9, r1
    5a08:	53 01       	movw	r10, r6
    5a0a:	12 c0       	rjmp	.+36     	; 0x5a30 <vfprintf+0x178>
    5a0c:	28 01       	movw	r4, r16
    5a0e:	f2 e0       	ldi	r31, 0x02	; 2
    5a10:	4f 0e       	add	r4, r31
    5a12:	51 1c       	adc	r5, r1
    5a14:	f8 01       	movw	r30, r16
    5a16:	a0 80       	ld	r10, Z
    5a18:	b1 80       	ldd	r11, Z+1	; 0x01
    5a1a:	36 fe       	sbrs	r3, 6
    5a1c:	03 c0       	rjmp	.+6      	; 0x5a24 <vfprintf+0x16c>
    5a1e:	69 2d       	mov	r22, r9
    5a20:	70 e0       	ldi	r23, 0x00	; 0
    5a22:	02 c0       	rjmp	.+4      	; 0x5a28 <vfprintf+0x170>
    5a24:	6f ef       	ldi	r22, 0xFF	; 255
    5a26:	7f ef       	ldi	r23, 0xFF	; 255
    5a28:	c5 01       	movw	r24, r10
    5a2a:	4e d1       	rcall	.+668    	; 0x5cc8 <strnlen>
    5a2c:	4c 01       	movw	r8, r24
    5a2e:	82 01       	movw	r16, r4
    5a30:	f3 2d       	mov	r31, r3
    5a32:	ff 77       	andi	r31, 0x7F	; 127
    5a34:	3f 2e       	mov	r3, r31
    5a36:	15 c0       	rjmp	.+42     	; 0x5a62 <vfprintf+0x1aa>
    5a38:	28 01       	movw	r4, r16
    5a3a:	22 e0       	ldi	r18, 0x02	; 2
    5a3c:	42 0e       	add	r4, r18
    5a3e:	51 1c       	adc	r5, r1
    5a40:	f8 01       	movw	r30, r16
    5a42:	a0 80       	ld	r10, Z
    5a44:	b1 80       	ldd	r11, Z+1	; 0x01
    5a46:	36 fe       	sbrs	r3, 6
    5a48:	03 c0       	rjmp	.+6      	; 0x5a50 <vfprintf+0x198>
    5a4a:	69 2d       	mov	r22, r9
    5a4c:	70 e0       	ldi	r23, 0x00	; 0
    5a4e:	02 c0       	rjmp	.+4      	; 0x5a54 <vfprintf+0x19c>
    5a50:	6f ef       	ldi	r22, 0xFF	; 255
    5a52:	7f ef       	ldi	r23, 0xFF	; 255
    5a54:	c5 01       	movw	r24, r10
    5a56:	2d d1       	rcall	.+602    	; 0x5cb2 <strnlen_P>
    5a58:	4c 01       	movw	r8, r24
    5a5a:	f3 2d       	mov	r31, r3
    5a5c:	f0 68       	ori	r31, 0x80	; 128
    5a5e:	3f 2e       	mov	r3, r31
    5a60:	82 01       	movw	r16, r4
    5a62:	33 fc       	sbrc	r3, 3
    5a64:	19 c0       	rjmp	.+50     	; 0x5a98 <vfprintf+0x1e0>
    5a66:	82 2d       	mov	r24, r2
    5a68:	90 e0       	ldi	r25, 0x00	; 0
    5a6a:	88 16       	cp	r8, r24
    5a6c:	99 06       	cpc	r9, r25
    5a6e:	a0 f4       	brcc	.+40     	; 0x5a98 <vfprintf+0x1e0>
    5a70:	b6 01       	movw	r22, r12
    5a72:	80 e2       	ldi	r24, 0x20	; 32
    5a74:	90 e0       	ldi	r25, 0x00	; 0
    5a76:	33 d1       	rcall	.+614    	; 0x5cde <fputc>
    5a78:	2a 94       	dec	r2
    5a7a:	f5 cf       	rjmp	.-22     	; 0x5a66 <vfprintf+0x1ae>
    5a7c:	f5 01       	movw	r30, r10
    5a7e:	37 fc       	sbrc	r3, 7
    5a80:	85 91       	lpm	r24, Z+
    5a82:	37 fe       	sbrs	r3, 7
    5a84:	81 91       	ld	r24, Z+
    5a86:	5f 01       	movw	r10, r30
    5a88:	b6 01       	movw	r22, r12
    5a8a:	90 e0       	ldi	r25, 0x00	; 0
    5a8c:	28 d1       	rcall	.+592    	; 0x5cde <fputc>
    5a8e:	21 10       	cpse	r2, r1
    5a90:	2a 94       	dec	r2
    5a92:	21 e0       	ldi	r18, 0x01	; 1
    5a94:	82 1a       	sub	r8, r18
    5a96:	91 08       	sbc	r9, r1
    5a98:	81 14       	cp	r8, r1
    5a9a:	91 04       	cpc	r9, r1
    5a9c:	79 f7       	brne	.-34     	; 0x5a7c <vfprintf+0x1c4>
    5a9e:	e1 c0       	rjmp	.+450    	; 0x5c62 <vfprintf+0x3aa>
    5aa0:	84 36       	cpi	r24, 0x64	; 100
    5aa2:	11 f0       	breq	.+4      	; 0x5aa8 <vfprintf+0x1f0>
    5aa4:	89 36       	cpi	r24, 0x69	; 105
    5aa6:	39 f5       	brne	.+78     	; 0x5af6 <vfprintf+0x23e>
    5aa8:	f8 01       	movw	r30, r16
    5aaa:	37 fe       	sbrs	r3, 7
    5aac:	07 c0       	rjmp	.+14     	; 0x5abc <vfprintf+0x204>
    5aae:	60 81       	ld	r22, Z
    5ab0:	71 81       	ldd	r23, Z+1	; 0x01
    5ab2:	82 81       	ldd	r24, Z+2	; 0x02
    5ab4:	93 81       	ldd	r25, Z+3	; 0x03
    5ab6:	0c 5f       	subi	r16, 0xFC	; 252
    5ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    5aba:	08 c0       	rjmp	.+16     	; 0x5acc <vfprintf+0x214>
    5abc:	60 81       	ld	r22, Z
    5abe:	71 81       	ldd	r23, Z+1	; 0x01
    5ac0:	07 2e       	mov	r0, r23
    5ac2:	00 0c       	add	r0, r0
    5ac4:	88 0b       	sbc	r24, r24
    5ac6:	99 0b       	sbc	r25, r25
    5ac8:	0e 5f       	subi	r16, 0xFE	; 254
    5aca:	1f 4f       	sbci	r17, 0xFF	; 255
    5acc:	f3 2d       	mov	r31, r3
    5ace:	ff 76       	andi	r31, 0x6F	; 111
    5ad0:	3f 2e       	mov	r3, r31
    5ad2:	97 ff       	sbrs	r25, 7
    5ad4:	09 c0       	rjmp	.+18     	; 0x5ae8 <vfprintf+0x230>
    5ad6:	90 95       	com	r25
    5ad8:	80 95       	com	r24
    5ada:	70 95       	com	r23
    5adc:	61 95       	neg	r22
    5ade:	7f 4f       	sbci	r23, 0xFF	; 255
    5ae0:	8f 4f       	sbci	r24, 0xFF	; 255
    5ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ae4:	f0 68       	ori	r31, 0x80	; 128
    5ae6:	3f 2e       	mov	r3, r31
    5ae8:	2a e0       	ldi	r18, 0x0A	; 10
    5aea:	30 e0       	ldi	r19, 0x00	; 0
    5aec:	a3 01       	movw	r20, r6
    5aee:	33 d1       	rcall	.+614    	; 0x5d56 <__ultoa_invert>
    5af0:	88 2e       	mov	r8, r24
    5af2:	86 18       	sub	r8, r6
    5af4:	44 c0       	rjmp	.+136    	; 0x5b7e <vfprintf+0x2c6>
    5af6:	85 37       	cpi	r24, 0x75	; 117
    5af8:	31 f4       	brne	.+12     	; 0x5b06 <vfprintf+0x24e>
    5afa:	23 2d       	mov	r18, r3
    5afc:	2f 7e       	andi	r18, 0xEF	; 239
    5afe:	b2 2e       	mov	r11, r18
    5b00:	2a e0       	ldi	r18, 0x0A	; 10
    5b02:	30 e0       	ldi	r19, 0x00	; 0
    5b04:	25 c0       	rjmp	.+74     	; 0x5b50 <vfprintf+0x298>
    5b06:	93 2d       	mov	r25, r3
    5b08:	99 7f       	andi	r25, 0xF9	; 249
    5b0a:	b9 2e       	mov	r11, r25
    5b0c:	8f 36       	cpi	r24, 0x6F	; 111
    5b0e:	c1 f0       	breq	.+48     	; 0x5b40 <vfprintf+0x288>
    5b10:	18 f4       	brcc	.+6      	; 0x5b18 <vfprintf+0x260>
    5b12:	88 35       	cpi	r24, 0x58	; 88
    5b14:	79 f0       	breq	.+30     	; 0x5b34 <vfprintf+0x27c>
    5b16:	ae c0       	rjmp	.+348    	; 0x5c74 <vfprintf+0x3bc>
    5b18:	80 37       	cpi	r24, 0x70	; 112
    5b1a:	19 f0       	breq	.+6      	; 0x5b22 <vfprintf+0x26a>
    5b1c:	88 37       	cpi	r24, 0x78	; 120
    5b1e:	21 f0       	breq	.+8      	; 0x5b28 <vfprintf+0x270>
    5b20:	a9 c0       	rjmp	.+338    	; 0x5c74 <vfprintf+0x3bc>
    5b22:	e9 2f       	mov	r30, r25
    5b24:	e0 61       	ori	r30, 0x10	; 16
    5b26:	be 2e       	mov	r11, r30
    5b28:	b4 fe       	sbrs	r11, 4
    5b2a:	0d c0       	rjmp	.+26     	; 0x5b46 <vfprintf+0x28e>
    5b2c:	fb 2d       	mov	r31, r11
    5b2e:	f4 60       	ori	r31, 0x04	; 4
    5b30:	bf 2e       	mov	r11, r31
    5b32:	09 c0       	rjmp	.+18     	; 0x5b46 <vfprintf+0x28e>
    5b34:	34 fe       	sbrs	r3, 4
    5b36:	0a c0       	rjmp	.+20     	; 0x5b4c <vfprintf+0x294>
    5b38:	29 2f       	mov	r18, r25
    5b3a:	26 60       	ori	r18, 0x06	; 6
    5b3c:	b2 2e       	mov	r11, r18
    5b3e:	06 c0       	rjmp	.+12     	; 0x5b4c <vfprintf+0x294>
    5b40:	28 e0       	ldi	r18, 0x08	; 8
    5b42:	30 e0       	ldi	r19, 0x00	; 0
    5b44:	05 c0       	rjmp	.+10     	; 0x5b50 <vfprintf+0x298>
    5b46:	20 e1       	ldi	r18, 0x10	; 16
    5b48:	30 e0       	ldi	r19, 0x00	; 0
    5b4a:	02 c0       	rjmp	.+4      	; 0x5b50 <vfprintf+0x298>
    5b4c:	20 e1       	ldi	r18, 0x10	; 16
    5b4e:	32 e0       	ldi	r19, 0x02	; 2
    5b50:	f8 01       	movw	r30, r16
    5b52:	b7 fe       	sbrs	r11, 7
    5b54:	07 c0       	rjmp	.+14     	; 0x5b64 <vfprintf+0x2ac>
    5b56:	60 81       	ld	r22, Z
    5b58:	71 81       	ldd	r23, Z+1	; 0x01
    5b5a:	82 81       	ldd	r24, Z+2	; 0x02
    5b5c:	93 81       	ldd	r25, Z+3	; 0x03
    5b5e:	0c 5f       	subi	r16, 0xFC	; 252
    5b60:	1f 4f       	sbci	r17, 0xFF	; 255
    5b62:	06 c0       	rjmp	.+12     	; 0x5b70 <vfprintf+0x2b8>
    5b64:	60 81       	ld	r22, Z
    5b66:	71 81       	ldd	r23, Z+1	; 0x01
    5b68:	80 e0       	ldi	r24, 0x00	; 0
    5b6a:	90 e0       	ldi	r25, 0x00	; 0
    5b6c:	0e 5f       	subi	r16, 0xFE	; 254
    5b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    5b70:	a3 01       	movw	r20, r6
    5b72:	f1 d0       	rcall	.+482    	; 0x5d56 <__ultoa_invert>
    5b74:	88 2e       	mov	r8, r24
    5b76:	86 18       	sub	r8, r6
    5b78:	fb 2d       	mov	r31, r11
    5b7a:	ff 77       	andi	r31, 0x7F	; 127
    5b7c:	3f 2e       	mov	r3, r31
    5b7e:	36 fe       	sbrs	r3, 6
    5b80:	0d c0       	rjmp	.+26     	; 0x5b9c <vfprintf+0x2e4>
    5b82:	23 2d       	mov	r18, r3
    5b84:	2e 7f       	andi	r18, 0xFE	; 254
    5b86:	a2 2e       	mov	r10, r18
    5b88:	89 14       	cp	r8, r9
    5b8a:	58 f4       	brcc	.+22     	; 0x5ba2 <vfprintf+0x2ea>
    5b8c:	34 fe       	sbrs	r3, 4
    5b8e:	0b c0       	rjmp	.+22     	; 0x5ba6 <vfprintf+0x2ee>
    5b90:	32 fc       	sbrc	r3, 2
    5b92:	09 c0       	rjmp	.+18     	; 0x5ba6 <vfprintf+0x2ee>
    5b94:	83 2d       	mov	r24, r3
    5b96:	8e 7e       	andi	r24, 0xEE	; 238
    5b98:	a8 2e       	mov	r10, r24
    5b9a:	05 c0       	rjmp	.+10     	; 0x5ba6 <vfprintf+0x2ee>
    5b9c:	b8 2c       	mov	r11, r8
    5b9e:	a3 2c       	mov	r10, r3
    5ba0:	03 c0       	rjmp	.+6      	; 0x5ba8 <vfprintf+0x2f0>
    5ba2:	b8 2c       	mov	r11, r8
    5ba4:	01 c0       	rjmp	.+2      	; 0x5ba8 <vfprintf+0x2f0>
    5ba6:	b9 2c       	mov	r11, r9
    5ba8:	a4 fe       	sbrs	r10, 4
    5baa:	0f c0       	rjmp	.+30     	; 0x5bca <vfprintf+0x312>
    5bac:	fe 01       	movw	r30, r28
    5bae:	e8 0d       	add	r30, r8
    5bb0:	f1 1d       	adc	r31, r1
    5bb2:	80 81       	ld	r24, Z
    5bb4:	80 33       	cpi	r24, 0x30	; 48
    5bb6:	21 f4       	brne	.+8      	; 0x5bc0 <vfprintf+0x308>
    5bb8:	9a 2d       	mov	r25, r10
    5bba:	99 7e       	andi	r25, 0xE9	; 233
    5bbc:	a9 2e       	mov	r10, r25
    5bbe:	09 c0       	rjmp	.+18     	; 0x5bd2 <vfprintf+0x31a>
    5bc0:	a2 fe       	sbrs	r10, 2
    5bc2:	06 c0       	rjmp	.+12     	; 0x5bd0 <vfprintf+0x318>
    5bc4:	b3 94       	inc	r11
    5bc6:	b3 94       	inc	r11
    5bc8:	04 c0       	rjmp	.+8      	; 0x5bd2 <vfprintf+0x31a>
    5bca:	8a 2d       	mov	r24, r10
    5bcc:	86 78       	andi	r24, 0x86	; 134
    5bce:	09 f0       	breq	.+2      	; 0x5bd2 <vfprintf+0x31a>
    5bd0:	b3 94       	inc	r11
    5bd2:	a3 fc       	sbrc	r10, 3
    5bd4:	10 c0       	rjmp	.+32     	; 0x5bf6 <vfprintf+0x33e>
    5bd6:	a0 fe       	sbrs	r10, 0
    5bd8:	06 c0       	rjmp	.+12     	; 0x5be6 <vfprintf+0x32e>
    5bda:	b2 14       	cp	r11, r2
    5bdc:	80 f4       	brcc	.+32     	; 0x5bfe <vfprintf+0x346>
    5bde:	28 0c       	add	r2, r8
    5be0:	92 2c       	mov	r9, r2
    5be2:	9b 18       	sub	r9, r11
    5be4:	0d c0       	rjmp	.+26     	; 0x5c00 <vfprintf+0x348>
    5be6:	b2 14       	cp	r11, r2
    5be8:	58 f4       	brcc	.+22     	; 0x5c00 <vfprintf+0x348>
    5bea:	b6 01       	movw	r22, r12
    5bec:	80 e2       	ldi	r24, 0x20	; 32
    5bee:	90 e0       	ldi	r25, 0x00	; 0
    5bf0:	76 d0       	rcall	.+236    	; 0x5cde <fputc>
    5bf2:	b3 94       	inc	r11
    5bf4:	f8 cf       	rjmp	.-16     	; 0x5be6 <vfprintf+0x32e>
    5bf6:	b2 14       	cp	r11, r2
    5bf8:	18 f4       	brcc	.+6      	; 0x5c00 <vfprintf+0x348>
    5bfa:	2b 18       	sub	r2, r11
    5bfc:	02 c0       	rjmp	.+4      	; 0x5c02 <vfprintf+0x34a>
    5bfe:	98 2c       	mov	r9, r8
    5c00:	21 2c       	mov	r2, r1
    5c02:	a4 fe       	sbrs	r10, 4
    5c04:	0f c0       	rjmp	.+30     	; 0x5c24 <vfprintf+0x36c>
    5c06:	b6 01       	movw	r22, r12
    5c08:	80 e3       	ldi	r24, 0x30	; 48
    5c0a:	90 e0       	ldi	r25, 0x00	; 0
    5c0c:	68 d0       	rcall	.+208    	; 0x5cde <fputc>
    5c0e:	a2 fe       	sbrs	r10, 2
    5c10:	16 c0       	rjmp	.+44     	; 0x5c3e <vfprintf+0x386>
    5c12:	a1 fc       	sbrc	r10, 1
    5c14:	03 c0       	rjmp	.+6      	; 0x5c1c <vfprintf+0x364>
    5c16:	88 e7       	ldi	r24, 0x78	; 120
    5c18:	90 e0       	ldi	r25, 0x00	; 0
    5c1a:	02 c0       	rjmp	.+4      	; 0x5c20 <vfprintf+0x368>
    5c1c:	88 e5       	ldi	r24, 0x58	; 88
    5c1e:	90 e0       	ldi	r25, 0x00	; 0
    5c20:	b6 01       	movw	r22, r12
    5c22:	0c c0       	rjmp	.+24     	; 0x5c3c <vfprintf+0x384>
    5c24:	8a 2d       	mov	r24, r10
    5c26:	86 78       	andi	r24, 0x86	; 134
    5c28:	51 f0       	breq	.+20     	; 0x5c3e <vfprintf+0x386>
    5c2a:	a1 fe       	sbrs	r10, 1
    5c2c:	02 c0       	rjmp	.+4      	; 0x5c32 <vfprintf+0x37a>
    5c2e:	8b e2       	ldi	r24, 0x2B	; 43
    5c30:	01 c0       	rjmp	.+2      	; 0x5c34 <vfprintf+0x37c>
    5c32:	80 e2       	ldi	r24, 0x20	; 32
    5c34:	a7 fc       	sbrc	r10, 7
    5c36:	8d e2       	ldi	r24, 0x2D	; 45
    5c38:	b6 01       	movw	r22, r12
    5c3a:	90 e0       	ldi	r25, 0x00	; 0
    5c3c:	50 d0       	rcall	.+160    	; 0x5cde <fputc>
    5c3e:	89 14       	cp	r8, r9
    5c40:	30 f4       	brcc	.+12     	; 0x5c4e <vfprintf+0x396>
    5c42:	b6 01       	movw	r22, r12
    5c44:	80 e3       	ldi	r24, 0x30	; 48
    5c46:	90 e0       	ldi	r25, 0x00	; 0
    5c48:	4a d0       	rcall	.+148    	; 0x5cde <fputc>
    5c4a:	9a 94       	dec	r9
    5c4c:	f8 cf       	rjmp	.-16     	; 0x5c3e <vfprintf+0x386>
    5c4e:	8a 94       	dec	r8
    5c50:	f3 01       	movw	r30, r6
    5c52:	e8 0d       	add	r30, r8
    5c54:	f1 1d       	adc	r31, r1
    5c56:	80 81       	ld	r24, Z
    5c58:	b6 01       	movw	r22, r12
    5c5a:	90 e0       	ldi	r25, 0x00	; 0
    5c5c:	40 d0       	rcall	.+128    	; 0x5cde <fputc>
    5c5e:	81 10       	cpse	r8, r1
    5c60:	f6 cf       	rjmp	.-20     	; 0x5c4e <vfprintf+0x396>
    5c62:	22 20       	and	r2, r2
    5c64:	09 f4       	brne	.+2      	; 0x5c68 <vfprintf+0x3b0>
    5c66:	4e ce       	rjmp	.-868    	; 0x5904 <vfprintf+0x4c>
    5c68:	b6 01       	movw	r22, r12
    5c6a:	80 e2       	ldi	r24, 0x20	; 32
    5c6c:	90 e0       	ldi	r25, 0x00	; 0
    5c6e:	37 d0       	rcall	.+110    	; 0x5cde <fputc>
    5c70:	2a 94       	dec	r2
    5c72:	f7 cf       	rjmp	.-18     	; 0x5c62 <vfprintf+0x3aa>
    5c74:	f6 01       	movw	r30, r12
    5c76:	86 81       	ldd	r24, Z+6	; 0x06
    5c78:	97 81       	ldd	r25, Z+7	; 0x07
    5c7a:	02 c0       	rjmp	.+4      	; 0x5c80 <vfprintf+0x3c8>
    5c7c:	8f ef       	ldi	r24, 0xFF	; 255
    5c7e:	9f ef       	ldi	r25, 0xFF	; 255
    5c80:	2b 96       	adiw	r28, 0x0b	; 11
    5c82:	0f b6       	in	r0, 0x3f	; 63
    5c84:	f8 94       	cli
    5c86:	de bf       	out	0x3e, r29	; 62
    5c88:	0f be       	out	0x3f, r0	; 63
    5c8a:	cd bf       	out	0x3d, r28	; 61
    5c8c:	df 91       	pop	r29
    5c8e:	cf 91       	pop	r28
    5c90:	1f 91       	pop	r17
    5c92:	0f 91       	pop	r16
    5c94:	ff 90       	pop	r15
    5c96:	ef 90       	pop	r14
    5c98:	df 90       	pop	r13
    5c9a:	cf 90       	pop	r12
    5c9c:	bf 90       	pop	r11
    5c9e:	af 90       	pop	r10
    5ca0:	9f 90       	pop	r9
    5ca2:	8f 90       	pop	r8
    5ca4:	7f 90       	pop	r7
    5ca6:	6f 90       	pop	r6
    5ca8:	5f 90       	pop	r5
    5caa:	4f 90       	pop	r4
    5cac:	3f 90       	pop	r3
    5cae:	2f 90       	pop	r2
    5cb0:	08 95       	ret

00005cb2 <strnlen_P>:
    5cb2:	fc 01       	movw	r30, r24
    5cb4:	05 90       	lpm	r0, Z+
    5cb6:	61 50       	subi	r22, 0x01	; 1
    5cb8:	70 40       	sbci	r23, 0x00	; 0
    5cba:	01 10       	cpse	r0, r1
    5cbc:	d8 f7       	brcc	.-10     	; 0x5cb4 <strnlen_P+0x2>
    5cbe:	80 95       	com	r24
    5cc0:	90 95       	com	r25
    5cc2:	8e 0f       	add	r24, r30
    5cc4:	9f 1f       	adc	r25, r31
    5cc6:	08 95       	ret

00005cc8 <strnlen>:
    5cc8:	fc 01       	movw	r30, r24
    5cca:	61 50       	subi	r22, 0x01	; 1
    5ccc:	70 40       	sbci	r23, 0x00	; 0
    5cce:	01 90       	ld	r0, Z+
    5cd0:	01 10       	cpse	r0, r1
    5cd2:	d8 f7       	brcc	.-10     	; 0x5cca <strnlen+0x2>
    5cd4:	80 95       	com	r24
    5cd6:	90 95       	com	r25
    5cd8:	8e 0f       	add	r24, r30
    5cda:	9f 1f       	adc	r25, r31
    5cdc:	08 95       	ret

00005cde <fputc>:
    5cde:	0f 93       	push	r16
    5ce0:	1f 93       	push	r17
    5ce2:	cf 93       	push	r28
    5ce4:	df 93       	push	r29
    5ce6:	fb 01       	movw	r30, r22
    5ce8:	23 81       	ldd	r18, Z+3	; 0x03
    5cea:	21 fd       	sbrc	r18, 1
    5cec:	03 c0       	rjmp	.+6      	; 0x5cf4 <fputc+0x16>
    5cee:	8f ef       	ldi	r24, 0xFF	; 255
    5cf0:	9f ef       	ldi	r25, 0xFF	; 255
    5cf2:	2c c0       	rjmp	.+88     	; 0x5d4c <fputc+0x6e>
    5cf4:	22 ff       	sbrs	r18, 2
    5cf6:	16 c0       	rjmp	.+44     	; 0x5d24 <fputc+0x46>
    5cf8:	46 81       	ldd	r20, Z+6	; 0x06
    5cfa:	57 81       	ldd	r21, Z+7	; 0x07
    5cfc:	24 81       	ldd	r18, Z+4	; 0x04
    5cfe:	35 81       	ldd	r19, Z+5	; 0x05
    5d00:	42 17       	cp	r20, r18
    5d02:	53 07       	cpc	r21, r19
    5d04:	44 f4       	brge	.+16     	; 0x5d16 <fputc+0x38>
    5d06:	a0 81       	ld	r26, Z
    5d08:	b1 81       	ldd	r27, Z+1	; 0x01
    5d0a:	9d 01       	movw	r18, r26
    5d0c:	2f 5f       	subi	r18, 0xFF	; 255
    5d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    5d10:	31 83       	std	Z+1, r19	; 0x01
    5d12:	20 83       	st	Z, r18
    5d14:	8c 93       	st	X, r24
    5d16:	26 81       	ldd	r18, Z+6	; 0x06
    5d18:	37 81       	ldd	r19, Z+7	; 0x07
    5d1a:	2f 5f       	subi	r18, 0xFF	; 255
    5d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    5d1e:	37 83       	std	Z+7, r19	; 0x07
    5d20:	26 83       	std	Z+6, r18	; 0x06
    5d22:	14 c0       	rjmp	.+40     	; 0x5d4c <fputc+0x6e>
    5d24:	8b 01       	movw	r16, r22
    5d26:	ec 01       	movw	r28, r24
    5d28:	fb 01       	movw	r30, r22
    5d2a:	00 84       	ldd	r0, Z+8	; 0x08
    5d2c:	f1 85       	ldd	r31, Z+9	; 0x09
    5d2e:	e0 2d       	mov	r30, r0
    5d30:	19 95       	eicall
    5d32:	89 2b       	or	r24, r25
    5d34:	e1 f6       	brne	.-72     	; 0x5cee <fputc+0x10>
    5d36:	d8 01       	movw	r26, r16
    5d38:	16 96       	adiw	r26, 0x06	; 6
    5d3a:	8d 91       	ld	r24, X+
    5d3c:	9c 91       	ld	r25, X
    5d3e:	17 97       	sbiw	r26, 0x07	; 7
    5d40:	01 96       	adiw	r24, 0x01	; 1
    5d42:	17 96       	adiw	r26, 0x07	; 7
    5d44:	9c 93       	st	X, r25
    5d46:	8e 93       	st	-X, r24
    5d48:	16 97       	sbiw	r26, 0x06	; 6
    5d4a:	ce 01       	movw	r24, r28
    5d4c:	df 91       	pop	r29
    5d4e:	cf 91       	pop	r28
    5d50:	1f 91       	pop	r17
    5d52:	0f 91       	pop	r16
    5d54:	08 95       	ret

00005d56 <__ultoa_invert>:
    5d56:	fa 01       	movw	r30, r20
    5d58:	aa 27       	eor	r26, r26
    5d5a:	28 30       	cpi	r18, 0x08	; 8
    5d5c:	51 f1       	breq	.+84     	; 0x5db2 <__ultoa_invert+0x5c>
    5d5e:	20 31       	cpi	r18, 0x10	; 16
    5d60:	81 f1       	breq	.+96     	; 0x5dc2 <__ultoa_invert+0x6c>
    5d62:	e8 94       	clt
    5d64:	6f 93       	push	r22
    5d66:	6e 7f       	andi	r22, 0xFE	; 254
    5d68:	6e 5f       	subi	r22, 0xFE	; 254
    5d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d6c:	8f 4f       	sbci	r24, 0xFF	; 255
    5d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d70:	af 4f       	sbci	r26, 0xFF	; 255
    5d72:	b1 e0       	ldi	r27, 0x01	; 1
    5d74:	3e d0       	rcall	.+124    	; 0x5df2 <__ultoa_invert+0x9c>
    5d76:	b4 e0       	ldi	r27, 0x04	; 4
    5d78:	3c d0       	rcall	.+120    	; 0x5df2 <__ultoa_invert+0x9c>
    5d7a:	67 0f       	add	r22, r23
    5d7c:	78 1f       	adc	r23, r24
    5d7e:	89 1f       	adc	r24, r25
    5d80:	9a 1f       	adc	r25, r26
    5d82:	a1 1d       	adc	r26, r1
    5d84:	68 0f       	add	r22, r24
    5d86:	79 1f       	adc	r23, r25
    5d88:	8a 1f       	adc	r24, r26
    5d8a:	91 1d       	adc	r25, r1
    5d8c:	a1 1d       	adc	r26, r1
    5d8e:	6a 0f       	add	r22, r26
    5d90:	71 1d       	adc	r23, r1
    5d92:	81 1d       	adc	r24, r1
    5d94:	91 1d       	adc	r25, r1
    5d96:	a1 1d       	adc	r26, r1
    5d98:	20 d0       	rcall	.+64     	; 0x5dda <__ultoa_invert+0x84>
    5d9a:	09 f4       	brne	.+2      	; 0x5d9e <__ultoa_invert+0x48>
    5d9c:	68 94       	set
    5d9e:	3f 91       	pop	r19
    5da0:	2a e0       	ldi	r18, 0x0A	; 10
    5da2:	26 9f       	mul	r18, r22
    5da4:	11 24       	eor	r1, r1
    5da6:	30 19       	sub	r19, r0
    5da8:	30 5d       	subi	r19, 0xD0	; 208
    5daa:	31 93       	st	Z+, r19
    5dac:	de f6       	brtc	.-74     	; 0x5d64 <__ultoa_invert+0xe>
    5dae:	cf 01       	movw	r24, r30
    5db0:	08 95       	ret
    5db2:	46 2f       	mov	r20, r22
    5db4:	47 70       	andi	r20, 0x07	; 7
    5db6:	40 5d       	subi	r20, 0xD0	; 208
    5db8:	41 93       	st	Z+, r20
    5dba:	b3 e0       	ldi	r27, 0x03	; 3
    5dbc:	0f d0       	rcall	.+30     	; 0x5ddc <__ultoa_invert+0x86>
    5dbe:	c9 f7       	brne	.-14     	; 0x5db2 <__ultoa_invert+0x5c>
    5dc0:	f6 cf       	rjmp	.-20     	; 0x5dae <__ultoa_invert+0x58>
    5dc2:	46 2f       	mov	r20, r22
    5dc4:	4f 70       	andi	r20, 0x0F	; 15
    5dc6:	40 5d       	subi	r20, 0xD0	; 208
    5dc8:	4a 33       	cpi	r20, 0x3A	; 58
    5dca:	18 f0       	brcs	.+6      	; 0x5dd2 <__ultoa_invert+0x7c>
    5dcc:	49 5d       	subi	r20, 0xD9	; 217
    5dce:	31 fd       	sbrc	r19, 1
    5dd0:	40 52       	subi	r20, 0x20	; 32
    5dd2:	41 93       	st	Z+, r20
    5dd4:	02 d0       	rcall	.+4      	; 0x5dda <__ultoa_invert+0x84>
    5dd6:	a9 f7       	brne	.-22     	; 0x5dc2 <__ultoa_invert+0x6c>
    5dd8:	ea cf       	rjmp	.-44     	; 0x5dae <__ultoa_invert+0x58>
    5dda:	b4 e0       	ldi	r27, 0x04	; 4
    5ddc:	a6 95       	lsr	r26
    5dde:	97 95       	ror	r25
    5de0:	87 95       	ror	r24
    5de2:	77 95       	ror	r23
    5de4:	67 95       	ror	r22
    5de6:	ba 95       	dec	r27
    5de8:	c9 f7       	brne	.-14     	; 0x5ddc <__ultoa_invert+0x86>
    5dea:	00 97       	sbiw	r24, 0x00	; 0
    5dec:	61 05       	cpc	r22, r1
    5dee:	71 05       	cpc	r23, r1
    5df0:	08 95       	ret
    5df2:	9b 01       	movw	r18, r22
    5df4:	ac 01       	movw	r20, r24
    5df6:	0a 2e       	mov	r0, r26
    5df8:	06 94       	lsr	r0
    5dfa:	57 95       	ror	r21
    5dfc:	47 95       	ror	r20
    5dfe:	37 95       	ror	r19
    5e00:	27 95       	ror	r18
    5e02:	ba 95       	dec	r27
    5e04:	c9 f7       	brne	.-14     	; 0x5df8 <__ultoa_invert+0xa2>
    5e06:	62 0f       	add	r22, r18
    5e08:	73 1f       	adc	r23, r19
    5e0a:	84 1f       	adc	r24, r20
    5e0c:	95 1f       	adc	r25, r21
    5e0e:	a0 1d       	adc	r26, r0
    5e10:	08 95       	ret

00005e12 <_exit>:
    5e12:	f8 94       	cli

00005e14 <__stop_program>:
    5e14:	ff cf       	rjmp	.-2      	; 0x5e14 <__stop_program>
